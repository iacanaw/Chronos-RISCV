// OVP stuff


////////////////////////////////////////////////////////////
// DVFS Info
//#define FREQUENCY_SCALE ((unsigned int *)0x8FFFFFA0)
//#define CLK_GATING ((unsigned int *)0x8FFFFFFC)
//#define EXECUTED_INST ((unsigned int *)0x8FFFFFF8)

////////////////////////////////////////////////////////////
// Processor ID info
#define MY_ID ((unsigned int *)0x8FFFFFFC)
volatile unsigned int *myID = MY_ID;
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Router mapped register - informs the router its address
#define ROUTER_BASE ((unsigned int *)0x50000000)
volatile unsigned int *myAddress = ROUTER_BASE;
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Router mapped register - informs the printer registers
#define PRINTER_CHAR ((unsigned int *)0x50000020)
#define PRINTER_INT ((unsigned int *)0x50000024)
volatile unsigned int *printChar = PRINTER_CHAR;
volatile unsigned int *printInt = PRINTER_INT;
// Prints a string
void prints(char *text); 

// Prints an integer
void printi(int value); 

// Prints a string followed by a integer
void printsv(char *text1, int value1); 

// Prints two strings and two integers interspersed
void printsvsv(char *text1, int value1, char *text2, int value2); 
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Initialize Chronos stuff
void Chronos_init(){
    *myAddress = 5;//*myID; // This information is provided by HARNESS
    
    return;
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Prints a string
void eprints(char *text) {
    int i = 0;
    do {
        *printChar = text[i];
        i++;
    } while (text[i - 1] != '\0');
    return;
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Prints an integer
void printi(int value) {
    *printInt = value;
    return;
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Prints a string followed by a integer
void printsv(char *text1, int value1) {
    prints(text1);
    printi(value1);
    prints("\n");
    return;
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
// Prints two strings and two integers interspersed
void printsvsv(char *text1, int value1, char *text2, int value2) {
    prints(text1);
    printi(value1);
    prints(text2);
    printi(value2);
    prints("\n");
    return;
}
////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////
