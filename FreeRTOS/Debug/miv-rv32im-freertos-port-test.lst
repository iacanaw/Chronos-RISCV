
miv-rv32im-freertos-port-test.elf:     file format elf32-littleriscv
miv-rv32im-freertos-port-test.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000000

Program Header:
    LOAD off    0x00001000 vaddr 0x80000000 paddr 0x80000000 align 2**12
         filesz 0x000080e0 memsz 0x00042800 flags rwx

Sections:
Idx Name           Size      VMA       LMA       File off  Algn  Flags
  0 .text          00007fe0  80000000  80000000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sdata         00000020  80007fe0  80007fe0  00008fe0  2**4  CONTENTS, ALLOC, LOAD, DATA
  2 .data          000000e0  80008000  80008000  00009000  2**4  CONTENTS, ALLOC, LOAD, DATA
  3 .sbss          00000070  800080e0  800080e0  000090e0  2**4  ALLOC
  4 .bss           0001a6b0  80008150  80008150  000090e0  2**4  ALLOC
  5 .heap          00010000  80022800  80022800  000090e0  2**4  ALLOC
  6 .stack         00010000  80032800  80032800  000090e0  2**4  ALLOC
  7 .debug_line    0000be09  00000000  00000000  000090e0  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_info    0001087b  00000000  00000000  00014ee9  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev  00002e4a  00000000  00000000  00025764  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000988  00000000  00000000  000285b0  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_str     00012ff2  00000000  00000000  00028f38  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges  00000868  00000000  00000000  0003bf2a  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro   00005ba2  00000000  00000000  0003c792  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment       00000039  00000000  00000000  00042334  2**0  CONTENTS, READONLY
 15 .debug_frame   0000230c  00000000  00000000  00042370  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
80000000 l    d  .text	00000000 .text
80007fe0 l    d  .sdata	00000000 .sdata
80008000 l    d  .data	00000000 .data
800080e0 l    d  .sbss	00000000 .sbss
80008150 l    d  .bss	00000000 .bss
80022800 l    d  .heap	00000000 .heap
80032800 l    d  .stack	00000000 .stack
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./riscv_hal/entry.o
8000000c l       .text	00000000 handle_reset
80000004 l       .text	00000000 nmi_vector
80000008 l       .text	00000000 trap_vector
80000030 l       .text	00000000 trap_entry
00000000 l    df *ABS*	00000000 init.c
80000180 l     F .text	00000050 zero_section
00000000 l    df *ABS*	00000000 riscv_hal.c
80000258 l     F .text	000000b8 PLIC_DisableIRQ
80000310 l     F .text	00000044 PLIC_ClaimIRQ
80000354 l     F .text	0000004c PLIC_CompleteIRQ
800080e0 l     O .sbss	00000008 g_systick_increment
00000000 l    df *ABS*	00000000 riscv_hal_stubs.c
00000000 l    df *ABS*	00000000 syscall.c
800080e8 l     O .sbss	00000008 g_stdio_uart
800080f0 l     O .sbss	00000004 g_stdio_uart_init_done
80000e7c l     F .text	00000030 stub
00000000 l    df *ABS*	00000000 core_uart_apb.c
00000000 l    df *ABS*	00000000 heap_2.c
80008150 l     O .bss	00019000 ucHeap
800080f4 l     O .sbss	00000008 xStart
800080fc l     O .sbss	00000008 xEnd
80007fe0 l     O .sdata	00000004 xFreeBytesRemaining
80008104 l     O .sbss	00000004 xHeapHasBeenInitialised.2777
80001590 l     F .text	00000074 prvHeapInit
00000000 l    df *ABS*	00000000 port.c
80001604 l     F .text	0000004c raise_soft_interrupt
80007fe4 l     O .sdata	00000004 uxCriticalNesting
80007fe8 l     O .sdata	00000004 mtime
80007fec l     O .sdata	00000004 mtimecmp
800016c4 l     F .text	000000cc prvSetNextTimerInterrupt
8000185c l     F .text	0000002c prvTaskExitError
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 tasks.c
80021150 l     O .bss	00000064 pxReadyTasksLists
800211b4 l     O .bss	00000014 xDelayedTaskList1
800211c8 l     O .bss	00000014 xDelayedTaskList2
80008110 l     O .sbss	00000004 pxDelayedTaskList
80008114 l     O .sbss	00000004 pxOverflowDelayedTaskList
800211dc l     O .bss	00000014 xPendingReadyList
800211f0 l     O .bss	00000014 xTasksWaitingTermination
80008118 l     O .sbss	00000004 uxTasksDeleted
80021204 l     O .bss	00000014 xSuspendedTaskList
8000811c l     O .sbss	00000004 uxCurrentNumberOfTasks
80008120 l     O .sbss	00000004 xTickCount
80008124 l     O .sbss	00000004 uxTopReadyPriority
80008128 l     O .sbss	00000004 xSchedulerRunning
8000812c l     O .sbss	00000004 uxPendedTicks
80008130 l     O .sbss	00000004 xYieldPending
80008134 l     O .sbss	00000004 xNumOfOverflows
80008138 l     O .sbss	00000004 uxTaskNumber
8000813c l     O .sbss	00000004 xNextTaskUnblockTime
80008140 l     O .sbss	00000004 uxSchedulerSuspended
80002b10 l     F .text	000000c0 prvAllocateTCBAndStack
800027f0 l     F .text	00000138 prvInitialiseTCBVariables
80002928 l     F .text	000000c0 prvInitialiseTaskLists
80002c10 l     F .text	00000060 prvResetNextTaskUnblockTime
80002a88 l     F .text	00000088 prvAddCurrentTaskToDelayedList
800027bc l     F .text	00000034 prvIdleTask
800029e8 l     F .text	000000a0 prvCheckTasksWaitingTermination
80002bd0 l     F .text	00000040 prvDeleteTCB
00000000 l    df *ABS*	00000000 globalMaster.c
00000000 l    df *ABS*	00000000 applications.c
00000000 l    df *ABS*	00000000 packet.c
00000000 l    df *ABS*	00000000 dvfs.c
00000000 l    df *ABS*	00000000 thermal.c
00000000 l    df *ABS*	00000000 chronos.c
800056f4 l     F .text	000000b4 PLIC_EnableIRQ
800057a8 l     F .text	0000003c PLIC_SetPriority
00000000 l    df *ABS*	00000000 main.c
80007348 l     F .text	000000d0 PLIC_init
8000756c l     F .text	00000094 GlobalManagerTask
00000000 l    df *ABS*	00000000 syswrite.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 impure.c
80008080 l     O .data	00000060 impure_data
80007ac4 g     O .text	0000000c readEnergyMemory
80001684 g     F .text	00000040 vPortExitCritical
00010000 g       *ABS*	00000000 STACK_SIZE
80021218 g     O .bss	00000004 SendingSlot
80000a54  w    F .text	00000020 External_11_IRQHandler
800087e0 g       .sdata	00000000 __global_pointer$
80005984 g     F .text	00000048 printsv
80008000 g       *ABS*	00000000 __data_load
8000191c g     F .text	000000e4 SysTick_Handler
80000994  w    F .text	00000020 External_5_IRQHandler
80004cac g     F .text	000000a8 API_PipeInitialization
80003100 g     F .text	00000128 API_TilesReset
8000105c g       .text	00000000 HW_get_8bit_reg_field
80002c98 g     F .text	0000003c vTaskEnterCritical
80005b80 g     F .text	00000080 reverse
80007ae8 g     O .text	0000000c loadStoreDyn
80006a84 g     F .text	00000074 API_AddPendingReq
80021c94 g     O .bss	00000024 priorityMatrix
80005078 g     F .text	00000114 API_checkPipe
8000810c g     O .sbss	00000004 pxCurrentTCB
800080e0 g       .sbss	00000000 __sbss_start
800057e4 g     F .text	000000f4 Chronos_init
800051b4 g     F .text	0000002c API_setFreqScale
80021c90 g     O .bss	00000004 errno
8002121c g     O .bss	000000f0 ServicePipe
80000f94 g       .text	00000000 HW_set_32bit_reg
80007adc g     O .text	0000000c arithDyn
80000b74  w    F .text	00000020 External_20_IRQHandler
80001a00 g     F .text	00000044 xPortStartScheduler
800003a0 g     F .text	00000024 __enable_irq
80001f18 g     F .text	0000021c xTaskGenericCreate
80004eb0 g     F .text	000000b4 API_GetServiceSlot
80007fe0 g       .sdata	00000000 __sdata_start
800014c4 g     F .text	000000cc vPortFree
8002130c g     O .bss	00000004 messageID
80005de0 g     F .text	000000a8 API_PushSendQueue
800227ec g     O .bss	00000008 g_uart
80001034 g       .text	00000000 HW_set_8bit_reg_field
80000c34  w    F .text	00000020 External_26_IRQHandler
800007a4 g     F .text	00000170 handle_trap
8000301c g     F .text	00000084 API_GetApplicationFreeSlot
80001bec g     F .text	00000088 vListInsertEnd
00080000 g       *ABS*	00000000 RAM_SIZE
80000a34  w    F .text	00000020 External_10_IRQHandler
80021cb8 g     O .bss	00000780 applications
80005948 g     F .text	0000003c printi
80001bc4 g     F .text	00000028 vListInitialiseItem
80006af8 g     F .text	00000850 API_NI_Handler
80000cb4  w    F .text	00000020 External_30_IRQHandler
80000b14  w    F .text	00000020 External_17_IRQHandler
80032800 g       .heap	00000000 _heap_end
80000e2c g     F .text	00000050 _isatty
80022800 g       .bss	00000000 __bss_end
80000510 g     F .text	00000294 handle_syscall
80002e38 g     F .text	000001e4 API_AddApplication
800012e8 g     F .text	000001dc pvPortMalloc
80004d54 g     F .text	0000015c API_GetMessageSlot
800035a8 g     F .text	00000360 API_DealocateTask
800001d0 g     F .text	0000006c _init
80001b60 g     F .text	00000064 vListInitialise
80001024 g       .text	00000000 HW_set_8bit_reg
8000102c g       .text	00000000 HW_get_8bit_reg
800024ac g     F .text	00000038 xTaskGetTickCount
80022438 g     O .bss	00000004 temperatureUpdated
800032d0 g     F .text	000002d8 API_AllocateTasks
80004354 g     F .text	000000b0 API_TaskListInit
80004544 g     F .text	000002d8 API_TaskAllocation
80003b98 g     F .text	00000140 API_ClearTaskSlotFromTile
800044c0 g     F .text	00000084 API_GetFreeTaskSlot
800053d0 g     F .text	00000054 resetExecutedInstructions
80008150 g       .sbss	00000000 __sbss_end
80004900 g     F .text	000000e4 API_TaskStart
80000fa4 g       .text	00000000 HW_set_32bit_reg_field
80007600 g     F .text	0000001c write
80003f70 g     F .text	00000128 API_TaskAllocated
8000753c g     F .text	00000014 vApplicationMallocFailedHook
80000c14  w    F .text	00000020 External_25_IRQHandler
80042800 g       .stack	00000000 __stack_top
80000c94  w    F .text	00000020 External_29_IRQHandler
80021310 g     O .bss	00000034 incommingPacket
80002134 g     F .text	000000dc vTaskDelete
80001238 g     F .text	000000b0 UART_polled_tx_string
800227e8 g     O .bss	00000004 selectedFrequencyScale
80000cf4 g     F .text	000000e8 write_hex
80000a94  w    F .text	00000020 External_13_IRQHandler
80005b08 g     F .text	0000002c External_2_IRQHandler
00010000 g       *ABS*	00000000 HEAP_SIZE
80000a74  w    F .text	00000020 External_12_IRQHandler
80008144 g     O .sbss	00000004 thermalPacket_pending
80005da0 g     F .text	00000040 makeAddress
80001184 g     F .text	000000b4 UART_send
80005a80 g     F .text	0000004c SendRaw
80000000 g       .text	00000000 _start
8000518c g     F .text	00000028 API_setFreqIdle
80002324 g     F .text	00000028 vTaskSuspendAll
80005e88 g     F .text	000000a0 API_PopSendQueue
800003c4 g     F .text	000000a8 handle_m_timer_interrupt
800058d8 g     F .text	00000070 prints
80001d48 g     F .text	00000098 uxListRemove
80004098 g     F .text	000002bc API_ApplicationStart
80005acc g     F .text	0000003c NI_enable_irq
80007fe0 g       *ABS*	00000000 __sdata_load
800080e0 g       .data	00000000 __data_end
800026d0 g     F .text	000000ec vTaskSwitchContext
80000b34  w    F .text	00000020 External_18_IRQHandler
80000fcc g       .text	00000000 HW_get_32bit_reg_field
80005c00 g     F .text	000001a0 myItoa
80000bb4  w    F .text	00000020 External_22_IRQHandler
80000ad4  w    F .text	00000020 External_15_IRQHandler
80001b38 g     F .text	00000028 vPortYield
80004404 g     F .text	000000bc API_GetCurrentTaskSlot
80000000 g       *ABS*	00000000 RAM_START_ADDRESS
80008150 g       .bss	00000000 __bss_start
800224d0 g     O .bss	00000318 TaskList
80000af4  w    F .text	00000020 External_16_IRQHandler
80001de0 g     F .text	000000e8 memset
80007418 g     F .text	00000124 main
80005b34 g     F .text	0000004c mySwap
80005214 g     F .text	00000054 API_applyFreqScale
80001c74 g     F .text	000000d4 vListInsert
80000c74  w    F .text	00000020 External_28_IRQHandler
80006948 g     F .text	0000013c API_CheckMessagePipe
800030a0 g     F .text	00000060 API_ApplicationsReset
80002c70 g     F .text	00000028 xTaskGetCurrentTaskHandle
80000fe4 g       .text	00000000 HW_get_16bit_reg
80008000 g       .sdata	00000000 __sdata_end
800049e4 g     F .text	000002c8 API_FinishRunningTask
80032800 g       .heap	00000000 __heap_end
80000ab4  w    F .text	00000020 External_14_IRQHandler
80003a3c g     F .text	0000015c API_GetTaskSlotFromTile
80003908 g     F .text	00000134 getNextPriorityAddr
80003dc4 g     F .text	000001ac API_RepositoryAllocation
8000023c g     F .text	0000001c _fini
8000234c g     F .text	00000160 xTaskResumeAll
80002294 g     F .text	00000090 vTaskStartScheduler
800061c4 g     F .text	00000340 API_SendMessage
80008000 g     O .data	00000080 ext_irq_handler_table
80021344 g     O .bss	00000020 SendingQueue
8000761c g     F .text	00000054 _write_r
80000fec g       .text	00000000 HW_set_16bit_reg_field
80006060 g     F .text	00000164 API_AckTaskAllocation
80021364 g     O .bss	00000004 SendingQueue_tail
80007ff0 g     O .sdata	00000004 _impure_ptr
80032800 g       .stack	00000000 __stack_bottom
80001a44 g     F .text	000000f4 Software_IRQHandler
80005268 g     F .text	00000168 API_freqStepUp
80004f64 g     F .text	00000114 API_ClearPipeSlot
80000c54  w    F .text	00000020 External_27_IRQHandler
800009f4  w    F .text	00000020 External_8_IRQHandler
80000a14  w    F .text	00000020 External_9_IRQHandler
80022800 g       .heap	00000000 __heap_start
80000914  w    F .text	00000020 Invalid_IRQHandler
80005f28 g     F .text	00000138 API_Try2Send
80000954  w    F .text	00000020 External_3_IRQHandler
800024e4 g     F .text	000001ec xTaskIncrementTick
80007ad0 g     O .text	0000000c writeEnergyMemory
8000481c g     F .text	000000e4 API_GetTaskSlot
80008108 g     O .sbss	00000004 g_startscheduler
80005a58 g     F .text	00000028 getYpos
80000b54  w    F .text	00000020 External_19_IRQHandler
80000eac g     F .text	000000e8 _write
80005a2c g     F .text	0000002c getXpos
80022800 g       .bss	00000000 _end
80001790 g     F .text	000000cc vPortSetupTimer
8002243c g     O .bss	00000024 SystemTemperature
800051e0 g     F .text	00000034 API_getFreqScale
80021368 g     O .bss	00000014 str
8002137c g     O .bss	00000004 SendingQueue_front
80002d24 g     F .text	00000114 API_RepositoryWakeUp
800059cc g     F .text	00000060 printsvsv
80002210 g     F .text	00000084 vTaskDelay
8000106c g     F .text	00000118 UART_init
80000f9c g       .text	00000000 HW_get_32bit_reg
80000ddc g     F .text	00000050 _exit
80000fdc g       .text	00000000 HW_set_16bit_reg
80006694 g     F .text	000002b4 API_SendMessageReq
80002cd4 g     F .text	00000050 vTaskExitCritical
80001ec8 g     F .text	00000050 strlen
80001888 g     F .text	00000094 pxPortInitialiseStack
80000934  w    F .text	00000020 External_1_IRQHandler
80006504 g     F .text	00000190 API_SendFinishTask
800009b4  w    F .text	00000020 External_6_IRQHandler
80000cd4  w    F .text	00000020 External_31_IRQHandler
80003cd8 g     F .text	000000ec API_GetSystemTasksSlots
80001650 g     F .text	00000034 vPortEnterCritical
80008000 g       .data	00000000 __data_start
80005424 g     F .text	000002d0 powerEstimation
800227f4 g     O .bss	00000004 ProcessorAddr
80022460 g     O .bss	00000004 priorityPointer
80000b94  w    F .text	00000020 External_21_IRQHandler
80022464 g     O .bss	0000006c Tiles
800004e0 g     F .text	00000030 handle_m_soft_interrupt
8000046c g     F .text	00000074 handle_m_ext_interrupt
80001014 g       .text	00000000 HW_get_16bit_reg_field
80000bd4  w    F .text	00000020 External_23_IRQHandler
80000bf4  w    F .text	00000020 External_24_IRQHandler
80000974  w    F .text	00000020 External_4_IRQHandler
80021380 g     O .bss	00000910 MessagePipe
80003228 g     F .text	000000a8 GeneratePatternMatrix
800009d4  w    F .text	00000020 External_7_IRQHandler
80007550 g     F .text	0000001c vApplicationIdleHook



Disassembly of section .text:

80000000 <_start>:
_start():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:30

  .section      .text.entry
  .globl _start

_start:
  j handle_reset
80000000:	00c0006f          	j	8000000c <handle_reset>

80000004 <nmi_vector>:
nmi_vector():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:33

nmi_vector:
  j nmi_vector
80000004:	0000006f          	j	80000004 <nmi_vector>

80000008 <trap_vector>:
trap_vector():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:36

trap_vector:
  j trap_entry
80000008:	0280006f          	j	80000030 <trap_entry>

8000000c <handle_reset>:
handle_reset():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:39

handle_reset:
  la t0, trap_entry
8000000c:	00000297          	auipc	t0,0x0
80000010:	02428293          	addi	t0,t0,36 # 80000030 <trap_entry>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:40
  csrw mtvec, t0
80000014:	30529073          	csrw	mtvec,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:41
  csrwi mstatus, 0
80000018:	30005073          	csrwi	mstatus,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:42
  csrwi mie, 0
8000001c:	30405073          	csrwi	mie,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:60
  lui t0, 0x0
  fscsr t0
#endif

  # initialize global pointer
  la gp, __global_pointer$
80000020:	00018193          	mv	gp,gp
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:63

  # initialize stack pointer
  la sp, __stack_top
80000024:	00042117          	auipc	sp,0x42
80000028:	7dc10113          	addi	sp,sp,2012 # 80042800 <__stack_top>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:66

  # perform the rest of initialization in C
  j _init
8000002c:	1a40006f          	j	800001d0 <_init>

80000030 <trap_entry>:
trap_entry():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:70


trap_entry:
  addi sp, sp, -33*REGBYTES
80000030:	f7c10113          	addi	sp,sp,-132
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:72

  SREG x1, 0 * REGBYTES(sp)
80000034:	00112023          	sw	ra,0(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:73
  SREG x2, 1 * REGBYTES(sp)
80000038:	00212223          	sw	sp,4(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:74
  SREG x3, 2 * REGBYTES(sp)
8000003c:	00312423          	sw	gp,8(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:75
  SREG x4, 3 * REGBYTES(sp)
80000040:	00412623          	sw	tp,12(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:76
  SREG x5, 4 * REGBYTES(sp)
80000044:	00512823          	sw	t0,16(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:77
  SREG x6, 5 * REGBYTES(sp)
80000048:	00612a23          	sw	t1,20(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:78
  SREG x7, 6 * REGBYTES(sp)
8000004c:	00712c23          	sw	t2,24(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:79
  SREG x8, 7 * REGBYTES(sp)
80000050:	00812e23          	sw	s0,28(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:80
  SREG x9, 8 * REGBYTES(sp)
80000054:	02912023          	sw	s1,32(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:81
  SREG x10, 9 * REGBYTES(sp)
80000058:	02a12223          	sw	a0,36(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:82
  SREG x11, 10 * REGBYTES(sp)
8000005c:	02b12423          	sw	a1,40(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:83
  SREG x12, 11 * REGBYTES(sp)
80000060:	02c12623          	sw	a2,44(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:84
  SREG x13, 12 * REGBYTES(sp)
80000064:	02d12823          	sw	a3,48(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:85
  SREG x14, 13 * REGBYTES(sp)
80000068:	02e12a23          	sw	a4,52(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:86
  SREG x15, 14 * REGBYTES(sp)
8000006c:	02f12c23          	sw	a5,56(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:87
  SREG x16, 15 * REGBYTES(sp)
80000070:	03012e23          	sw	a6,60(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:88
  SREG x17, 16 * REGBYTES(sp)
80000074:	05112023          	sw	a7,64(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:89
  SREG x18, 17 * REGBYTES(sp)
80000078:	05212223          	sw	s2,68(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:90
  SREG x19, 18 * REGBYTES(sp)
8000007c:	05312423          	sw	s3,72(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:91
  SREG x20, 19 * REGBYTES(sp)
80000080:	05412623          	sw	s4,76(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:92
  SREG x21, 20 * REGBYTES(sp)
80000084:	05512823          	sw	s5,80(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:93
  SREG x22, 21 * REGBYTES(sp)
80000088:	05612a23          	sw	s6,84(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:94
  SREG x23, 22 * REGBYTES(sp)
8000008c:	05712c23          	sw	s7,88(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:95
  SREG x24, 23 * REGBYTES(sp)
80000090:	05812e23          	sw	s8,92(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:96
  SREG x25, 24 * REGBYTES(sp)
80000094:	07912023          	sw	s9,96(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:97
  SREG x26, 25 * REGBYTES(sp)
80000098:	07a12223          	sw	s10,100(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:98
  SREG x27, 26 * REGBYTES(sp)
8000009c:	07b12423          	sw	s11,104(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:99
  SREG x28, 27 * REGBYTES(sp)
800000a0:	07c12623          	sw	t3,108(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:100
  SREG x29, 28 * REGBYTES(sp)
800000a4:	07d12823          	sw	t4,112(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:101
  SREG x30, 29 * REGBYTES(sp)
800000a8:	07e12a23          	sw	t5,116(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:102
  SREG x31, 30 * REGBYTES(sp)
800000ac:	07f12c23          	sw	t6,120(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:105

  # Stores the return addr in the stack
  csrr t0, mepc
800000b0:	341022f3          	csrr	t0,mepc
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:106
  SREG t0, 31 * REGBYTES(sp)
800000b4:	06512e23          	sw	t0,124(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:109

  # store the MIE value in the stack
  li t0, MSTATUS_MIE
800000b8:	00800293          	li	t0,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:110
  csrrc t0, mstatus, t0 
800000bc:	3002b2f3          	csrrc	t0,mstatus,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:111
  SREG t0, 32 * REGBYTES(sp) 
800000c0:	08512023          	sw	t0,128(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:113

  csrr a0, mcause
800000c4:	34202573          	csrr	a0,mcause
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:114
  csrr a1, mepc
800000c8:	341025f3          	csrr	a1,mepc
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:115
  mv a2, sp
800000cc:	00010613          	mv	a2,sp
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:116
  call handle_trap
800000d0:	6d4000ef          	jal	ra,800007a4 <handle_trap>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:117
  csrw mepc, a0
800000d4:	34151073          	csrw	mepc,a0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:120

  # Remain in M-mode after mret
  li t0, MSTATUS_MPP
800000d8:	000022b7          	lui	t0,0x2
800000dc:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:121
  csrs mstatus, t0
800000e0:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:126
  #li t0, MSTATUS_MPIE
  #csrs mstatus, t0

  # Restore the interruption status after MRET
  LREG x5, 32 * REGBYTES(sp)  # load the old MIE value to t0
800000e4:	08012283          	lw	t0,128(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:127
  slli t0, t0, 4              # shifts it to the MPIE position
800000e8:	00429293          	slli	t0,t0,0x4
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:128
  csrs mstatus, t0            # restore the MIE value into the MPIE
800000ec:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:130
  
  LREG x1, 0 * REGBYTES(sp)
800000f0:	00012083          	lw	ra,0(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:131
  LREG x2, 1 * REGBYTES(sp)
800000f4:	00412103          	lw	sp,4(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:132
  LREG x3, 2 * REGBYTES(sp)
800000f8:	00812183          	lw	gp,8(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:133
  LREG x4, 3 * REGBYTES(sp)
800000fc:	00c12203          	lw	tp,12(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:134
  LREG x5, 4 * REGBYTES(sp)
80000100:	01012283          	lw	t0,16(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:135
  LREG x6, 5 * REGBYTES(sp)
80000104:	01412303          	lw	t1,20(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:136
  LREG x7, 6 * REGBYTES(sp)
80000108:	01812383          	lw	t2,24(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:137
  LREG x8, 7 * REGBYTES(sp)
8000010c:	01c12403          	lw	s0,28(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:138
  LREG x9, 8 * REGBYTES(sp)
80000110:	02012483          	lw	s1,32(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:139
  LREG x10, 9 * REGBYTES(sp)
80000114:	02412503          	lw	a0,36(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:140
  LREG x11, 10 * REGBYTES(sp)
80000118:	02812583          	lw	a1,40(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:141
  LREG x12, 11 * REGBYTES(sp)
8000011c:	02c12603          	lw	a2,44(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:142
  LREG x13, 12 * REGBYTES(sp)
80000120:	03012683          	lw	a3,48(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:143
  LREG x14, 13 * REGBYTES(sp)
80000124:	03412703          	lw	a4,52(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:144
  LREG x15, 14 * REGBYTES(sp)
80000128:	03812783          	lw	a5,56(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:145
  LREG x16, 15 * REGBYTES(sp)
8000012c:	03c12803          	lw	a6,60(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:146
  LREG x17, 16 * REGBYTES(sp)
80000130:	04012883          	lw	a7,64(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:147
  LREG x18, 17 * REGBYTES(sp)
80000134:	04412903          	lw	s2,68(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:148
  LREG x19, 18 * REGBYTES(sp)
80000138:	04812983          	lw	s3,72(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:149
  LREG x20, 19 * REGBYTES(sp)
8000013c:	04c12a03          	lw	s4,76(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:150
  LREG x21, 20 * REGBYTES(sp)
80000140:	05012a83          	lw	s5,80(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:151
  LREG x22, 21 * REGBYTES(sp)
80000144:	05412b03          	lw	s6,84(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:152
  LREG x23, 22 * REGBYTES(sp)
80000148:	05812b83          	lw	s7,88(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:153
  LREG x24, 23 * REGBYTES(sp)
8000014c:	05c12c03          	lw	s8,92(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:154
  LREG x25, 24 * REGBYTES(sp)
80000150:	06012c83          	lw	s9,96(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:155
  LREG x26, 25 * REGBYTES(sp)
80000154:	06412d03          	lw	s10,100(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:156
  LREG x27, 26 * REGBYTES(sp)
80000158:	06812d83          	lw	s11,104(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:157
  LREG x28, 27 * REGBYTES(sp)
8000015c:	06c12e03          	lw	t3,108(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:158
  LREG x29, 28 * REGBYTES(sp)
80000160:	07012e83          	lw	t4,112(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:159
  LREG x30, 29 * REGBYTES(sp)
80000164:	07412f03          	lw	t5,116(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:160
  LREG x31, 30 * REGBYTES(sp)
80000168:	07812f83          	lw	t6,120(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:162

  addi sp, sp, 33*REGBYTES
8000016c:	08410113          	addi	sp,sp,132
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:163
  mret
80000170:	30200073          	mret
	...

80000180 <zero_section>:
zero_section():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:47
        ++p_vma;
    }
}

static void zero_section(uint32_t * start, uint32_t * end)
{
80000180:	fd010113          	addi	sp,sp,-48
80000184:	02812623          	sw	s0,44(sp)
80000188:	03010413          	addi	s0,sp,48
8000018c:	fca42e23          	sw	a0,-36(s0)
80000190:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:48
    uint32_t * p_zero = start;
80000194:	fdc42783          	lw	a5,-36(s0)
80000198:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:50
    
    while(p_zero <= end)
8000019c:	0180006f          	j	800001b4 <zero_section+0x34>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:52
    {
        *p_zero = 0;
800001a0:	fec42783          	lw	a5,-20(s0)
800001a4:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:53
        ++p_zero;
800001a8:	fec42783          	lw	a5,-20(s0)
800001ac:	00478793          	addi	a5,a5,4
800001b0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:50
    while(p_zero <= end)
800001b4:	fec42703          	lw	a4,-20(s0)
800001b8:	fd842783          	lw	a5,-40(s0)
800001bc:	fee7f2e3          	bleu	a4,a5,800001a0 <zero_section+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:55
    }
}
800001c0:	00000013          	nop
800001c4:	02c12403          	lw	s0,44(sp)
800001c8:	03010113          	addi	sp,sp,48
800001cc:	00008067          	ret

800001d0 <_init>:
_init():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:58

void _init(void)
{
800001d0:	fe010113          	addi	sp,sp,-32
800001d4:	00112e23          	sw	ra,28(sp)
800001d8:	00812c23          	sw	s0,24(sp)
800001dc:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:60
    extern int main(int, char**);
    const char *argv0 = "hello";
800001e0:	800077b7          	lui	a5,0x80007
800001e4:	67078793          	addi	a5,a5,1648 # 80007670 <__stack_top+0xfffc4e70>
800001e8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:61
    char *argv[] = {(char *)argv0, NULL, NULL};
800001ec:	fec42783          	lw	a5,-20(s0)
800001f0:	fef42023          	sw	a5,-32(s0)
800001f4:	fe042223          	sw	zero,-28(s0)
800001f8:	fe042423          	sw	zero,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:66

// Imperas - this is loaded directly by simulator so must not be copied
//    copy_section(&__sdata_load, &__sdata_start, &__sdata_end);
//    copy_section(&__data_load, &__data_start, &__data_end);
    zero_section(&__sbss_start, &__sbss_end);
800001fc:	97018593          	addi	a1,gp,-1680 # 80008150 <__sbss_end>
80000200:	90018513          	addi	a0,gp,-1792 # 800080e0 <__data_end>
80000204:	f7dff0ef          	jal	ra,80000180 <zero_section>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:67
    zero_section(&__bss_start, &__bss_end);
80000208:	800237b7          	lui	a5,0x80023
8000020c:	80078593          	addi	a1,a5,-2048 # 80022800 <__stack_top+0xfffe0000>
80000210:	97018513          	addi	a0,gp,-1680 # 80008150 <__sbss_end>
80000214:	f6dff0ef          	jal	ra,80000180 <zero_section>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:69
    
    main(1, argv);
80000218:	fe040793          	addi	a5,s0,-32
8000021c:	00078593          	mv	a1,a5
80000220:	00100513          	li	a0,1
80000224:	1f4070ef          	jal	ra,80007418 <main>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:70
}
80000228:	00000013          	nop
8000022c:	01c12083          	lw	ra,28(sp)
80000230:	01812403          	lw	s0,24(sp)
80000234:	02010113          	addi	sp,sp,32
80000238:	00008067          	ret

8000023c <_fini>:
_fini():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:75

/* Function called after main() finishes */
void
_fini()
{
8000023c:	ff010113          	addi	sp,sp,-16
80000240:	00812623          	sw	s0,12(sp)
80000244:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:76
}
80000248:	00000013          	nop
8000024c:	00c12403          	lw	s0,12(sp)
80000250:	01010113          	addi	sp,sp,16
80000254:	00008067          	ret

80000258 <PLIC_DisableIRQ>:
PLIC_DisableIRQ():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:174
 * 	If you wish to disable the external interrupt while the interrupt handler
 * 	for that external interrupt is executing then you must use the return value
 * 	EXT_IRQ_DISABLE to return from the extern interrupt handler.
 */
static inline void PLIC_DisableIRQ(IRQn_Type IRQn)
{
80000258:	fd010113          	addi	sp,sp,-48
8000025c:	02812623          	sw	s0,44(sp)
80000260:	03010413          	addi	s0,sp,48
80000264:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:175
    unsigned long hart_id = read_csr(mhartid);
80000268:	f14027f3          	csrr	a5,mhartid
8000026c:	fef42623          	sw	a5,-20(s0)
80000270:	fec42783          	lw	a5,-20(s0)
80000274:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:176
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80000278:	40000737          	lui	a4,0x40000
8000027c:	fdc42783          	lw	a5,-36(s0)
80000280:	0057d793          	srli	a5,a5,0x5
80000284:	fe842683          	lw	a3,-24(s0)
80000288:	00569693          	slli	a3,a3,0x5
8000028c:	00f686b3          	add	a3,a3,a5
80000290:	000017b7          	lui	a5,0x1
80000294:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80000298:	00f687b3          	add	a5,a3,a5
8000029c:	00279793          	slli	a5,a5,0x2
800002a0:	00f707b3          	add	a5,a4,a5
800002a4:	0007a783          	lw	a5,0(a5)
800002a8:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:178

    current &= ~((uint32_t)1 << (IRQn % 32));
800002ac:	fdc42783          	lw	a5,-36(s0)
800002b0:	01f7f793          	andi	a5,a5,31
800002b4:	00100713          	li	a4,1
800002b8:	00f717b3          	sll	a5,a4,a5
800002bc:	fff7c793          	not	a5,a5
800002c0:	fe442703          	lw	a4,-28(s0)
800002c4:	00f777b3          	and	a5,a4,a5
800002c8:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:180

    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
800002cc:	40000737          	lui	a4,0x40000
800002d0:	fdc42783          	lw	a5,-36(s0)
800002d4:	0057d793          	srli	a5,a5,0x5
800002d8:	fe842683          	lw	a3,-24(s0)
800002dc:	00569693          	slli	a3,a3,0x5
800002e0:	00f686b3          	add	a3,a3,a5
800002e4:	000017b7          	lui	a5,0x1
800002e8:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
800002ec:	00f687b3          	add	a5,a3,a5
800002f0:	00279793          	slli	a5,a5,0x2
800002f4:	00f707b3          	add	a5,a4,a5
800002f8:	fe442703          	lw	a4,-28(s0)
800002fc:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:181
}
80000300:	00000013          	nop
80000304:	02c12403          	lw	s0,44(sp)
80000308:	03010113          	addi	sp,sp,48
8000030c:	00008067          	ret

80000310 <PLIC_ClaimIRQ>:
PLIC_ClaimIRQ():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:205

/*==============================================================================
 * The function PLIC_ClaimIRQ() claims the interrupt from the PLIC controller.
 */
static inline uint32_t PLIC_ClaimIRQ(void)
{
80000310:	fe010113          	addi	sp,sp,-32
80000314:	00812e23          	sw	s0,28(sp)
80000318:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:206
    unsigned long hart_id = read_csr(mhartid);
8000031c:	f14027f3          	csrr	a5,mhartid
80000320:	fef42623          	sw	a5,-20(s0)
80000324:	fec42783          	lw	a5,-20(s0)
80000328:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:208

    return PLIC->TARGET[hart_id].CLAIM_COMPLETE;
8000032c:	40000737          	lui	a4,0x40000
80000330:	fe842783          	lw	a5,-24(s0)
80000334:	20078793          	addi	a5,a5,512
80000338:	00c79793          	slli	a5,a5,0xc
8000033c:	00f707b3          	add	a5,a4,a5
80000340:	0047a783          	lw	a5,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:209
}
80000344:	00078513          	mv	a0,a5
80000348:	01c12403          	lw	s0,28(sp)
8000034c:	02010113          	addi	sp,sp,32
80000350:	00008067          	ret

80000354 <PLIC_CompleteIRQ>:
PLIC_CompleteIRQ():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:216
/*==============================================================================
 * The function PLIC_CompleteIRQ() indicates to the PLIC controller the interrupt
 * is processed and claim is complete.
 */
static inline void PLIC_CompleteIRQ(uint32_t source)
{
80000354:	fd010113          	addi	sp,sp,-48
80000358:	02812623          	sw	s0,44(sp)
8000035c:	03010413          	addi	s0,sp,48
80000360:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:217
    unsigned long hart_id = read_csr(mhartid);
80000364:	f14027f3          	csrr	a5,mhartid
80000368:	fef42623          	sw	a5,-20(s0)
8000036c:	fec42783          	lw	a5,-20(s0)
80000370:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:219

    PLIC->TARGET[hart_id].CLAIM_COMPLETE = source;
80000374:	40000737          	lui	a4,0x40000
80000378:	fe842783          	lw	a5,-24(s0)
8000037c:	20078793          	addi	a5,a5,512
80000380:	00c79793          	slli	a5,a5,0xc
80000384:	00f707b3          	add	a5,a4,a5
80000388:	fdc42703          	lw	a4,-36(s0)
8000038c:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:220
}
80000390:	00000013          	nop
80000394:	02c12403          	lw	s0,44(sp)
80000398:	03010113          	addi	sp,sp,48
8000039c:	00008067          	ret

800003a0 <__enable_irq>:
__enable_irq():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:96

/*------------------------------------------------------------------------------
 * Enabler all interrupts.
 */
void __enable_irq(void)
{
800003a0:	fe010113          	addi	sp,sp,-32
800003a4:	00812e23          	sw	s0,28(sp)
800003a8:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:97
    set_csr(mstatus, MSTATUS_MIE);
800003ac:	300467f3          	csrrsi	a5,mstatus,8
800003b0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:98
}
800003b4:	00000013          	nop
800003b8:	01c12403          	lw	s0,28(sp)
800003bc:	02010113          	addi	sp,sp,32
800003c0:	00008067          	ret

800003c4 <handle_m_timer_interrupt>:
handle_m_timer_interrupt():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:128

/*------------------------------------------------------------------------------
 * RISC-V interrupt handler for machine timer interrupts.
 */
void handle_m_timer_interrupt()
{
800003c4:	fe010113          	addi	sp,sp,-32
800003c8:	00112e23          	sw	ra,28(sp)
800003cc:	00812c23          	sw	s0,24(sp)
800003d0:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:129
    clear_csr(mie, MIP_MTIP); //  MIP_MTIP (1 << 7)
800003d4:	08000793          	li	a5,128
800003d8:	3047b7f3          	csrrc	a5,mie,a5
800003dc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:131

    SysTick_Handler();
800003e0:	53c010ef          	jal	ra,8000191c <SysTick_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:133

    PRCI->MTIMECMP[read_csr(mhartid)] = PRCI->MTIME + g_systick_increment;
800003e4:	44000737          	lui	a4,0x44000
800003e8:	0000c7b7          	lui	a5,0xc
800003ec:	00f707b3          	add	a5,a4,a5
800003f0:	ffc7a803          	lw	a6,-4(a5) # bffc <HEAP_SIZE-0x4004>
800003f4:	ff87a783          	lw	a5,-8(a5)
800003f8:	9001a583          	lw	a1,-1792(gp) # 800080e0 <__data_end>
800003fc:	9041a603          	lw	a2,-1788(gp) # 800080e4 <__data_end+0x4>
80000400:	44000537          	lui	a0,0x44000
80000404:	f1402773          	csrr	a4,mhartid
80000408:	fee42423          	sw	a4,-24(s0)
8000040c:	fe842883          	lw	a7,-24(s0)
80000410:	00b786b3          	add	a3,a5,a1
80000414:	00068313          	mv	t1,a3
80000418:	00f33333          	sltu	t1,t1,a5
8000041c:	00c80733          	add	a4,a6,a2
80000420:	00e307b3          	add	a5,t1,a4
80000424:	00078713          	mv	a4,a5
80000428:	00068793          	mv	a5,a3
8000042c:	00070813          	mv	a6,a4
80000430:	00001737          	lui	a4,0x1
80000434:	80070713          	addi	a4,a4,-2048 # 800 <HEAP_SIZE-0xf800>
80000438:	00e88733          	add	a4,a7,a4
8000043c:	00371713          	slli	a4,a4,0x3
80000440:	00e50733          	add	a4,a0,a4
80000444:	00f72023          	sw	a5,0(a4)
80000448:	01072223          	sw	a6,4(a4)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:135

    set_csr(mie, MIP_MTIP);
8000044c:	08000793          	li	a5,128
80000450:	3047a7f3          	csrrs	a5,mie,a5
80000454:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:136
    return;
80000458:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:137
}
8000045c:	01c12083          	lw	ra,28(sp)
80000460:	01812403          	lw	s0,24(sp)
80000464:	02010113          	addi	sp,sp,32
80000468:	00008067          	ret

8000046c <handle_m_ext_interrupt>:
handle_m_ext_interrupt():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:182

/*------------------------------------------------------------------------------
 * 
 */
void handle_m_ext_interrupt()
{
8000046c:	fe010113          	addi	sp,sp,-32
80000470:	00112e23          	sw	ra,28(sp)
80000474:	00812c23          	sw	s0,24(sp)
80000478:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:183
    uint32_t int_num  = PLIC_ClaimIRQ();
8000047c:	e95ff0ef          	jal	ra,80000310 <PLIC_ClaimIRQ>
80000480:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:184
    uint8_t disable = EXT_IRQ_KEEP_ENABLED;
80000484:	fe0405a3          	sb	zero,-21(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:186

    disable = ext_irq_handler_table[int_num]();
80000488:	800087b7          	lui	a5,0x80008
8000048c:	fec42703          	lw	a4,-20(s0)
80000490:	00271713          	slli	a4,a4,0x2
80000494:	00078793          	mv	a5,a5
80000498:	00f707b3          	add	a5,a4,a5
8000049c:	0007a783          	lw	a5,0(a5) # 80008000 <__stack_top+0xfffc5800>
800004a0:	000780e7          	jalr	a5
800004a4:	00050793          	mv	a5,a0
800004a8:	fef405a3          	sb	a5,-21(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:188

    PLIC_CompleteIRQ(int_num);
800004ac:	fec42503          	lw	a0,-20(s0)
800004b0:	ea5ff0ef          	jal	ra,80000354 <PLIC_CompleteIRQ>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:190

    if(EXT_IRQ_DISABLE == disable)
800004b4:	feb44703          	lbu	a4,-21(s0)
800004b8:	00100793          	li	a5,1
800004bc:	00f71863          	bne	a4,a5,800004cc <handle_m_ext_interrupt+0x60>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:192
    {
        PLIC_DisableIRQ((IRQn_Type)int_num);
800004c0:	fec42503          	lw	a0,-20(s0)
800004c4:	d95ff0ef          	jal	ra,80000258 <PLIC_DisableIRQ>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:194
    }
    return;
800004c8:	00000013          	nop
800004cc:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:195
}
800004d0:	01c12083          	lw	ra,28(sp)
800004d4:	01812403          	lw	s0,24(sp)
800004d8:	02010113          	addi	sp,sp,32
800004dc:	00008067          	ret

800004e0 <handle_m_soft_interrupt>:
handle_m_soft_interrupt():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:198

void handle_m_soft_interrupt()
{
800004e0:	ff010113          	addi	sp,sp,-16
800004e4:	00112623          	sw	ra,12(sp)
800004e8:	00812423          	sw	s0,8(sp)
800004ec:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:199
    Software_IRQHandler();
800004f0:	554010ef          	jal	ra,80001a44 <Software_IRQHandler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:202

    /*Clear software interrupt*/
    PRCI->MSIP[0] = 0x00;
800004f4:	440007b7          	lui	a5,0x44000
800004f8:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:203
    return;
800004fc:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:204
}
80000500:	00c12083          	lw	ra,12(sp)
80000504:	00812403          	lw	s0,8(sp)
80000508:	01010113          	addi	sp,sp,16
8000050c:	00008067          	ret

80000510 <handle_syscall>:
handle_syscall():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:207

/* syscall funcion defined at system_call.c */
void handle_syscall(){
80000510:	fd010113          	addi	sp,sp,-48
80000514:	02112623          	sw	ra,44(sp)
80000518:	02812423          	sw	s0,40(sp)
8000051c:	03010413          	addi	s0,sp,48
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:210
	unsigned int arg0, arg1, arg2, arg3, arg4, arg5, type;
	unsigned int *pointer;
	register long temp asm("t0") = 0;
80000520:	00000293          	li	t0,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:211
	asm("addi	t0, sp, 0");
80000524:	00010293          	mv	t0,sp
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:213
	
	pointer = (unsigned int *)(temp + (29*4));
80000528:	00028793          	mv	a5,t0
8000052c:	07478793          	addi	a5,a5,116
80000530:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:214
	arg0 =  *pointer;
80000534:	fec42783          	lw	a5,-20(s0)
80000538:	0007a783          	lw	a5,0(a5)
8000053c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:216

	pointer = (unsigned int *)(temp + (30*4));
80000540:	00028793          	mv	a5,t0
80000544:	07878793          	addi	a5,a5,120
80000548:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:217
	arg1 = *pointer;
8000054c:	fec42783          	lw	a5,-20(s0)
80000550:	0007a783          	lw	a5,0(a5)
80000554:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:219
	
	pointer = (unsigned int *)(temp + (31*4));
80000558:	00028793          	mv	a5,t0
8000055c:	07c78793          	addi	a5,a5,124
80000560:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:220
	arg2 = *pointer;
80000564:	fec42783          	lw	a5,-20(s0)
80000568:	0007a783          	lw	a5,0(a5)
8000056c:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:222

	pointer = (unsigned int *)(temp + (32*4));
80000570:	00028793          	mv	a5,t0
80000574:	08078793          	addi	a5,a5,128
80000578:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:223
	arg3 = *pointer;
8000057c:	fec42783          	lw	a5,-20(s0)
80000580:	0007a783          	lw	a5,0(a5)
80000584:	fcf42e23          	sw	a5,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:225

	pointer = (unsigned int *)(temp + (33*4));
80000588:	00028793          	mv	a5,t0
8000058c:	08478793          	addi	a5,a5,132
80000590:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:226
	arg4 = *pointer;
80000594:	fec42783          	lw	a5,-20(s0)
80000598:	0007a783          	lw	a5,0(a5)
8000059c:	fcf42c23          	sw	a5,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:228

	pointer = (unsigned int *)(temp + (34*4));
800005a0:	00028793          	mv	a5,t0
800005a4:	08878793          	addi	a5,a5,136
800005a8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:229
	arg4 = *pointer;
800005ac:	fec42783          	lw	a5,-20(s0)
800005b0:	0007a783          	lw	a5,0(a5)
800005b4:	fcf42c23          	sw	a5,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:231

	pointer = (unsigned int *)(temp + (36*4));
800005b8:	00028793          	mv	a5,t0
800005bc:	09078793          	addi	a5,a5,144
800005c0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:232
	type = *pointer;
800005c4:	fec42783          	lw	a5,-20(s0)
800005c8:	0007a783          	lw	a5,0(a5)
800005cc:	fcf42a23          	sw	a5,-44(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:234

	switch (type){
800005d0:	fd442783          	lw	a5,-44(s0)
800005d4:	ff678793          	addi	a5,a5,-10
800005d8:	03800713          	li	a4,56
800005dc:	12f76663          	bltu	a4,a5,80000708 <handle_syscall+0x1f8>
800005e0:	00279713          	slli	a4,a5,0x2
800005e4:	800077b7          	lui	a5,0x80007
800005e8:	70c78793          	addi	a5,a5,1804 # 8000770c <__stack_top+0xfffc4f0c>
800005ec:	00f707b3          	add	a5,a4,a5
800005f0:	0007a783          	lw	a5,0(a5)
800005f4:	00078067          	jr	a5
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:237

		case SYS_TESTING:
			prints("Detectei uma chamada TESTE de sistema!\n");
800005f8:	800077b7          	lui	a5,0x80007
800005fc:	67878513          	addi	a0,a5,1656 # 80007678 <__stack_top+0xfffc4e78>
80000600:	2d8050ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:238
			printsv("arg0 ", arg0);
80000604:	fe842783          	lw	a5,-24(s0)
80000608:	00078593          	mv	a1,a5
8000060c:	800077b7          	lui	a5,0x80007
80000610:	6a078513          	addi	a0,a5,1696 # 800076a0 <__stack_top+0xfffc4ea0>
80000614:	370050ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:239
			printsv("arg1 ", arg1);
80000618:	fe442783          	lw	a5,-28(s0)
8000061c:	00078593          	mv	a1,a5
80000620:	800077b7          	lui	a5,0x80007
80000624:	6a878513          	addi	a0,a5,1704 # 800076a8 <__stack_top+0xfffc4ea8>
80000628:	35c050ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:240
			printsv("arg2 ", arg2);
8000062c:	fe042783          	lw	a5,-32(s0)
80000630:	00078593          	mv	a1,a5
80000634:	800077b7          	lui	a5,0x80007
80000638:	6b078513          	addi	a0,a5,1712 # 800076b0 <__stack_top+0xfffc4eb0>
8000063c:	348050ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:241
			printsv("arg3 ", arg3);
80000640:	fdc42783          	lw	a5,-36(s0)
80000644:	00078593          	mv	a1,a5
80000648:	800077b7          	lui	a5,0x80007
8000064c:	6b878513          	addi	a0,a5,1720 # 800076b8 <__stack_top+0xfffc4eb8>
80000650:	334050ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:242
			printsv("arg4 ", arg4);
80000654:	fd842783          	lw	a5,-40(s0)
80000658:	00078593          	mv	a1,a5
8000065c:	800077b7          	lui	a5,0x80007
80000660:	6c078513          	addi	a0,a5,1728 # 800076c0 <__stack_top+0xfffc4ec0>
80000664:	320050ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:243
			printsv("type ", type);
80000668:	fd442783          	lw	a5,-44(s0)
8000066c:	00078593          	mv	a1,a5
80000670:	800077b7          	lui	a5,0x80007
80000674:	6c878513          	addi	a0,a5,1736 # 800076c8 <__stack_top+0xfffc4ec8>
80000678:	30c050ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:244
			break;
8000067c:	1140006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:247

        case SYS_PRINTS:
            prints(arg0);
80000680:	fe842783          	lw	a5,-24(s0)
80000684:	00078513          	mv	a0,a5
80000688:	250050ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:248
            UART_polled_tx_string( &g_uart, arg0 );
8000068c:	fe842783          	lw	a5,-24(s0)
80000690:	00078593          	mv	a1,a5
80000694:	800227b7          	lui	a5,0x80022
80000698:	7ec78513          	addi	a0,a5,2028 # 800227ec <__stack_top+0xfffdffec>
8000069c:	39d000ef          	jal	ra,80001238 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:249
            break;
800006a0:	0f00006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:252
        
        case SYS_PRINTI:
            printi(arg0);
800006a4:	fe842783          	lw	a5,-24(s0)
800006a8:	00078513          	mv	a0,a5
800006ac:	29c050ef          	jal	ra,80005948 <printi>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:253
            myItoa(arg0, str, 10);
800006b0:	fe842703          	lw	a4,-24(s0)
800006b4:	00a00613          	li	a2,10
800006b8:	800217b7          	lui	a5,0x80021
800006bc:	36878593          	addi	a1,a5,872 # 80021368 <__stack_top+0xfffdeb68>
800006c0:	00070513          	mv	a0,a4
800006c4:	53c050ef          	jal	ra,80005c00 <myItoa>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:254
            UART_polled_tx_string( &g_uart, (const uint8_t *)str );
800006c8:	800217b7          	lui	a5,0x80021
800006cc:	36878593          	addi	a1,a5,872 # 80021368 <__stack_top+0xfffdeb68>
800006d0:	800227b7          	lui	a5,0x80022
800006d4:	7ec78513          	addi	a0,a5,2028 # 800227ec <__stack_top+0xfffdffec>
800006d8:	361000ef          	jal	ra,80001238 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:255
            break;
800006dc:	0b40006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:259
        
        case SYS_SEND_MSG:
            //              addr, task
            API_SendMessage(arg0, arg1);
800006e0:	fe442583          	lw	a1,-28(s0)
800006e4:	fe842503          	lw	a0,-24(s0)
800006e8:	2dd050ef          	jal	ra,800061c4 <API_SendMessage>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:260
            break;
800006ec:	0a40006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:264
        
        case SYS_RECV_MSG:
            //                 addr, task
            API_SendMessageReq(arg0, arg1);
800006f0:	fe442583          	lw	a1,-28(s0)
800006f4:	fe842503          	lw	a0,-24(s0)
800006f8:	79d050ef          	jal	ra,80006694 <API_SendMessageReq>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:265
            break;
800006fc:	0940006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:268
        
        case SYS_END_TASK:
            API_FinishRunningTask();
80000700:	2e4040ef          	jal	ra,800049e4 <API_FinishRunningTask>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:269
            break;
80000704:	08c0006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:272

		default:
			prints("Systemcall não identificada!\n");
80000708:	800077b7          	lui	a5,0x80007
8000070c:	6d078513          	addi	a0,a5,1744 # 800076d0 <__stack_top+0xfffc4ed0>
80000710:	1c8050ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:273
			printsv("arg0 ", arg0);
80000714:	fe842783          	lw	a5,-24(s0)
80000718:	00078593          	mv	a1,a5
8000071c:	800077b7          	lui	a5,0x80007
80000720:	6a078513          	addi	a0,a5,1696 # 800076a0 <__stack_top+0xfffc4ea0>
80000724:	260050ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:274
			printsv("arg1 ", arg1);
80000728:	fe442783          	lw	a5,-28(s0)
8000072c:	00078593          	mv	a1,a5
80000730:	800077b7          	lui	a5,0x80007
80000734:	6a878513          	addi	a0,a5,1704 # 800076a8 <__stack_top+0xfffc4ea8>
80000738:	24c050ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:275
			printsv("arg2 ", arg2);
8000073c:	fe042783          	lw	a5,-32(s0)
80000740:	00078593          	mv	a1,a5
80000744:	800077b7          	lui	a5,0x80007
80000748:	6b078513          	addi	a0,a5,1712 # 800076b0 <__stack_top+0xfffc4eb0>
8000074c:	238050ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:276
			printsv("arg3 ", arg3);
80000750:	fdc42783          	lw	a5,-36(s0)
80000754:	00078593          	mv	a1,a5
80000758:	800077b7          	lui	a5,0x80007
8000075c:	6b878513          	addi	a0,a5,1720 # 800076b8 <__stack_top+0xfffc4eb8>
80000760:	224050ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:277
			printsv("arg4 ", arg4);
80000764:	fd842783          	lw	a5,-40(s0)
80000768:	00078593          	mv	a1,a5
8000076c:	800077b7          	lui	a5,0x80007
80000770:	6c078513          	addi	a0,a5,1728 # 800076c0 <__stack_top+0xfffc4ec0>
80000774:	210050ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:278
			printsv("type ", type);
80000778:	fd442783          	lw	a5,-44(s0)
8000077c:	00078593          	mv	a1,a5
80000780:	800077b7          	lui	a5,0x80007
80000784:	6c878513          	addi	a0,a5,1736 # 800076c8 <__stack_top+0xfffc4ec8>
80000788:	1fc050ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:279
			break;
8000078c:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:281
	}
	return;
80000790:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:296
	// 	value = *p;
	// 	printsvsv("i: ", i, " value: ", value);
	// }
    // prints("Cheguei aqui!!!!!!! sucessooo :D\n");
	////////////////////////////////////////////////////
}
80000794:	02c12083          	lw	ra,44(sp)
80000798:	02812403          	lw	s0,40(sp)
8000079c:	03010113          	addi	sp,sp,48
800007a0:	00008067          	ret

800007a4 <handle_trap>:
handle_trap():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:302

/*------------------------------------------------------------------------------
 * Trap/Interrupt handler
 */
uintptr_t handle_trap(uintptr_t mcause, uintptr_t epc)
{
800007a4:	fe010113          	addi	sp,sp,-32
800007a8:	00112e23          	sw	ra,28(sp)
800007ac:	00812c23          	sw	s0,24(sp)
800007b0:	02010413          	addi	s0,sp,32
800007b4:	fea42623          	sw	a0,-20(s0)
800007b8:	feb42423          	sw	a1,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303
    if (!(mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE) == ENV_CALL_M || (mcause & MCAUSE_CAUSE) == ENV_CALL_H || (mcause & MCAUSE_CAUSE) == ENV_CALL_S || (mcause & MCAUSE_CAUSE) == ENV_CALL_U)){
800007bc:	fec42783          	lw	a5,-20(s0)
800007c0:	0607cc63          	bltz	a5,80000838 <handle_trap+0x94>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303 (discriminator 1)
800007c4:	fec42703          	lw	a4,-20(s0)
800007c8:	800007b7          	lui	a5,0x80000
800007cc:	fff7c793          	not	a5,a5
800007d0:	00f77733          	and	a4,a4,a5
800007d4:	00b00793          	li	a5,11
800007d8:	04f70663          	beq	a4,a5,80000824 <handle_trap+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303 (discriminator 2)
800007dc:	fec42703          	lw	a4,-20(s0)
800007e0:	800007b7          	lui	a5,0x80000
800007e4:	fff7c793          	not	a5,a5
800007e8:	00f77733          	and	a4,a4,a5
800007ec:	00a00793          	li	a5,10
800007f0:	02f70a63          	beq	a4,a5,80000824 <handle_trap+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303 (discriminator 3)
800007f4:	fec42703          	lw	a4,-20(s0)
800007f8:	800007b7          	lui	a5,0x80000
800007fc:	fff7c793          	not	a5,a5
80000800:	00f77733          	and	a4,a4,a5
80000804:	00900793          	li	a5,9
80000808:	00f70e63          	beq	a4,a5,80000824 <handle_trap+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303 (discriminator 4)
8000080c:	fec42703          	lw	a4,-20(s0)
80000810:	800007b7          	lui	a5,0x80000
80000814:	fff7c793          	not	a5,a5
80000818:	00f77733          	and	a4,a4,a5
8000081c:	00800793          	li	a5,8
80000820:	00f71c63          	bne	a4,a5,80000838 <handle_trap+0x94>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:304
        handle_syscall();
80000824:	cedff0ef          	jal	ra,80000510 <handle_syscall>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:305
        epc = (uintptr_t) (epc + 4);
80000828:	fe842783          	lw	a5,-24(s0)
8000082c:	00478793          	addi	a5,a5,4 # 80000004 <__stack_top+0xfffbd804>
80000830:	fef42423          	sw	a5,-24(s0)
80000834:	0c40006f          	j	800008f8 <handle_trap+0x154>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:307
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_EXT)){
80000838:	fec42783          	lw	a5,-20(s0)
8000083c:	0207d263          	bgez	a5,80000860 <handle_trap+0xbc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:307 (discriminator 1)
80000840:	fec42703          	lw	a4,-20(s0)
80000844:	800007b7          	lui	a5,0x80000
80000848:	fff7c793          	not	a5,a5
8000084c:	00f77733          	and	a4,a4,a5
80000850:	00b00793          	li	a5,11
80000854:	00f71663          	bne	a4,a5,80000860 <handle_trap+0xbc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:308
        handle_m_ext_interrupt();
80000858:	c15ff0ef          	jal	ra,8000046c <handle_m_ext_interrupt>
8000085c:	09c0006f          	j	800008f8 <handle_trap+0x154>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:310
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_TIMER)){
80000860:	fec42783          	lw	a5,-20(s0)
80000864:	0207d263          	bgez	a5,80000888 <handle_trap+0xe4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:310 (discriminator 1)
80000868:	fec42703          	lw	a4,-20(s0)
8000086c:	800007b7          	lui	a5,0x80000
80000870:	fff7c793          	not	a5,a5
80000874:	00f77733          	and	a4,a4,a5
80000878:	00700793          	li	a5,7
8000087c:	00f71663          	bne	a4,a5,80000888 <handle_trap+0xe4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:311
        handle_m_timer_interrupt();
80000880:	b45ff0ef          	jal	ra,800003c4 <handle_m_timer_interrupt>
80000884:	0740006f          	j	800008f8 <handle_trap+0x154>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:313
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_SOFT)){
80000888:	fec42783          	lw	a5,-20(s0)
8000088c:	0207d263          	bgez	a5,800008b0 <handle_trap+0x10c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:313 (discriminator 1)
80000890:	fec42703          	lw	a4,-20(s0)
80000894:	800007b7          	lui	a5,0x80000
80000898:	fff7c793          	not	a5,a5
8000089c:	00f77733          	and	a4,a4,a5
800008a0:	00300793          	li	a5,3
800008a4:	00f71663          	bne	a4,a5,800008b0 <handle_trap+0x10c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:314
        handle_m_soft_interrupt();
800008a8:	c39ff0ef          	jal	ra,800004e0 <handle_m_soft_interrupt>
800008ac:	04c0006f          	j	800008f8 <handle_trap+0x154>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:317
    }
    else{
        write(1, "trap\n", 5);
800008b0:	00500613          	li	a2,5
800008b4:	800077b7          	lui	a5,0x80007
800008b8:	6f078593          	addi	a1,a5,1776 # 800076f0 <__stack_top+0xfffc4ef0>
800008bc:	00100513          	li	a0,1
800008c0:	541060ef          	jal	ra,80007600 <write>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:318
        printsv("epc: ", epc);
800008c4:	fe842783          	lw	a5,-24(s0)
800008c8:	00078593          	mv	a1,a5
800008cc:	800077b7          	lui	a5,0x80007
800008d0:	6f878513          	addi	a0,a5,1784 # 800076f8 <__stack_top+0xfffc4ef8>
800008d4:	0b0050ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:319
        printsv("mcause: ", mcause);
800008d8:	fec42783          	lw	a5,-20(s0)
800008dc:	00078593          	mv	a1,a5
800008e0:	800077b7          	lui	a5,0x80007
800008e4:	70078513          	addi	a0,a5,1792 # 80007700 <__stack_top+0xfffc4f00>
800008e8:	09c050ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:320
        _exit(mcause);
800008ec:	fec42783          	lw	a5,-20(s0)
800008f0:	00078513          	mv	a0,a5
800008f4:	4e8000ef          	jal	ra,80000ddc <_exit>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:324
    }
    
    // Added by Iaçanã, solves several interruption problems!
    portDISABLE_INTERRUPTS(); 
800008f8:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:325
    return epc;
800008fc:	fe842783          	lw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:326
}
80000900:	00078513          	mv	a0,a5
80000904:	01c12083          	lw	ra,28(sp)
80000908:	01812403          	lw	s0,24(sp)
8000090c:	02010113          	addi	sp,sp,32
80000910:	00008067          	ret

80000914 <Invalid_IRQHandler>:
Invalid_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:37
{
    ;
}

__attribute__((weak))  uint8_t Invalid_IRQHandler(void)
{
80000914:	ff010113          	addi	sp,sp,-16
80000918:	00812623          	sw	s0,12(sp)
8000091c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:38
    return(0);
80000920:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:39
}
80000924:	00078513          	mv	a0,a5
80000928:	00c12403          	lw	s0,12(sp)
8000092c:	01010113          	addi	sp,sp,16
80000930:	00008067          	ret

80000934 <External_1_IRQHandler>:
External_1_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:42

__attribute__((weak))  uint8_t External_1_IRQHandler(void)
{
80000934:	ff010113          	addi	sp,sp,-16
80000938:	00812623          	sw	s0,12(sp)
8000093c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:43
    return(0);
80000940:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:44
}
80000944:	00078513          	mv	a0,a5
80000948:	00c12403          	lw	s0,12(sp)
8000094c:	01010113          	addi	sp,sp,16
80000950:	00008067          	ret

80000954 <External_3_IRQHandler>:
External_3_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:52
{
    return(0);
}

__attribute__((weak))  uint8_t External_3_IRQHandler(void)
{
80000954:	ff010113          	addi	sp,sp,-16
80000958:	00812623          	sw	s0,12(sp)
8000095c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:53
    return(0);
80000960:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:54
}
80000964:	00078513          	mv	a0,a5
80000968:	00c12403          	lw	s0,12(sp)
8000096c:	01010113          	addi	sp,sp,16
80000970:	00008067          	ret

80000974 <External_4_IRQHandler>:
External_4_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:57

__attribute__((weak))  uint8_t External_4_IRQHandler(void)
{
80000974:	ff010113          	addi	sp,sp,-16
80000978:	00812623          	sw	s0,12(sp)
8000097c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:58
    return(0);
80000980:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:59
}
80000984:	00078513          	mv	a0,a5
80000988:	00c12403          	lw	s0,12(sp)
8000098c:	01010113          	addi	sp,sp,16
80000990:	00008067          	ret

80000994 <External_5_IRQHandler>:
External_5_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:62

__attribute__((weak))  uint8_t External_5_IRQHandler(void)
{
80000994:	ff010113          	addi	sp,sp,-16
80000998:	00812623          	sw	s0,12(sp)
8000099c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:63
    return(0);
800009a0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:64
}
800009a4:	00078513          	mv	a0,a5
800009a8:	00c12403          	lw	s0,12(sp)
800009ac:	01010113          	addi	sp,sp,16
800009b0:	00008067          	ret

800009b4 <External_6_IRQHandler>:
External_6_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:67

__attribute__((weak))  uint8_t External_6_IRQHandler(void)
{
800009b4:	ff010113          	addi	sp,sp,-16
800009b8:	00812623          	sw	s0,12(sp)
800009bc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:68
    return(0);
800009c0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:69
}
800009c4:	00078513          	mv	a0,a5
800009c8:	00c12403          	lw	s0,12(sp)
800009cc:	01010113          	addi	sp,sp,16
800009d0:	00008067          	ret

800009d4 <External_7_IRQHandler>:
External_7_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:72

__attribute__((weak))  uint8_t External_7_IRQHandler(void)
{
800009d4:	ff010113          	addi	sp,sp,-16
800009d8:	00812623          	sw	s0,12(sp)
800009dc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:73
    return(0);
800009e0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:74
}
800009e4:	00078513          	mv	a0,a5
800009e8:	00c12403          	lw	s0,12(sp)
800009ec:	01010113          	addi	sp,sp,16
800009f0:	00008067          	ret

800009f4 <External_8_IRQHandler>:
External_8_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:77

__attribute__((weak))  uint8_t External_8_IRQHandler(void)
{
800009f4:	ff010113          	addi	sp,sp,-16
800009f8:	00812623          	sw	s0,12(sp)
800009fc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:78
    return(0);
80000a00:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:79
}
80000a04:	00078513          	mv	a0,a5
80000a08:	00c12403          	lw	s0,12(sp)
80000a0c:	01010113          	addi	sp,sp,16
80000a10:	00008067          	ret

80000a14 <External_9_IRQHandler>:
External_9_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:82

__attribute__((weak))  uint8_t External_9_IRQHandler(void)
{
80000a14:	ff010113          	addi	sp,sp,-16
80000a18:	00812623          	sw	s0,12(sp)
80000a1c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:83
    return(0);
80000a20:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:84
}
80000a24:	00078513          	mv	a0,a5
80000a28:	00c12403          	lw	s0,12(sp)
80000a2c:	01010113          	addi	sp,sp,16
80000a30:	00008067          	ret

80000a34 <External_10_IRQHandler>:
External_10_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:87

__attribute__((weak))  uint8_t External_10_IRQHandler(void)
{
80000a34:	ff010113          	addi	sp,sp,-16
80000a38:	00812623          	sw	s0,12(sp)
80000a3c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:88
    return(0);
80000a40:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:89
}
80000a44:	00078513          	mv	a0,a5
80000a48:	00c12403          	lw	s0,12(sp)
80000a4c:	01010113          	addi	sp,sp,16
80000a50:	00008067          	ret

80000a54 <External_11_IRQHandler>:
External_11_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:92

__attribute__((weak))  uint8_t External_11_IRQHandler(void)
{
80000a54:	ff010113          	addi	sp,sp,-16
80000a58:	00812623          	sw	s0,12(sp)
80000a5c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:93
    return(0);
80000a60:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:94
}
80000a64:	00078513          	mv	a0,a5
80000a68:	00c12403          	lw	s0,12(sp)
80000a6c:	01010113          	addi	sp,sp,16
80000a70:	00008067          	ret

80000a74 <External_12_IRQHandler>:
External_12_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:97

__attribute__((weak))  uint8_t External_12_IRQHandler(void)
{
80000a74:	ff010113          	addi	sp,sp,-16
80000a78:	00812623          	sw	s0,12(sp)
80000a7c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:98
    return(0);
80000a80:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:99
}
80000a84:	00078513          	mv	a0,a5
80000a88:	00c12403          	lw	s0,12(sp)
80000a8c:	01010113          	addi	sp,sp,16
80000a90:	00008067          	ret

80000a94 <External_13_IRQHandler>:
External_13_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:102

__attribute__((weak))  uint8_t External_13_IRQHandler(void)
{
80000a94:	ff010113          	addi	sp,sp,-16
80000a98:	00812623          	sw	s0,12(sp)
80000a9c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:103
    return(0);
80000aa0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:104
}
80000aa4:	00078513          	mv	a0,a5
80000aa8:	00c12403          	lw	s0,12(sp)
80000aac:	01010113          	addi	sp,sp,16
80000ab0:	00008067          	ret

80000ab4 <External_14_IRQHandler>:
External_14_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:107

__attribute__((weak))  uint8_t External_14_IRQHandler(void)
{
80000ab4:	ff010113          	addi	sp,sp,-16
80000ab8:	00812623          	sw	s0,12(sp)
80000abc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:108
    return(0);
80000ac0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:109
}
80000ac4:	00078513          	mv	a0,a5
80000ac8:	00c12403          	lw	s0,12(sp)
80000acc:	01010113          	addi	sp,sp,16
80000ad0:	00008067          	ret

80000ad4 <External_15_IRQHandler>:
External_15_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:112

__attribute__((weak))  uint8_t External_15_IRQHandler(void)
{
80000ad4:	ff010113          	addi	sp,sp,-16
80000ad8:	00812623          	sw	s0,12(sp)
80000adc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:113
    return(0);
80000ae0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:114
}
80000ae4:	00078513          	mv	a0,a5
80000ae8:	00c12403          	lw	s0,12(sp)
80000aec:	01010113          	addi	sp,sp,16
80000af0:	00008067          	ret

80000af4 <External_16_IRQHandler>:
External_16_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:117

__attribute__((weak))  uint8_t External_16_IRQHandler(void)
{
80000af4:	ff010113          	addi	sp,sp,-16
80000af8:	00812623          	sw	s0,12(sp)
80000afc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:118
    return(0);
80000b00:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:119
}
80000b04:	00078513          	mv	a0,a5
80000b08:	00c12403          	lw	s0,12(sp)
80000b0c:	01010113          	addi	sp,sp,16
80000b10:	00008067          	ret

80000b14 <External_17_IRQHandler>:
External_17_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:122

__attribute__((weak))  uint8_t External_17_IRQHandler(void)
{
80000b14:	ff010113          	addi	sp,sp,-16
80000b18:	00812623          	sw	s0,12(sp)
80000b1c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:123
    return(0);
80000b20:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:124
}
80000b24:	00078513          	mv	a0,a5
80000b28:	00c12403          	lw	s0,12(sp)
80000b2c:	01010113          	addi	sp,sp,16
80000b30:	00008067          	ret

80000b34 <External_18_IRQHandler>:
External_18_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:127

__attribute__((weak))  uint8_t External_18_IRQHandler(void)
{
80000b34:	ff010113          	addi	sp,sp,-16
80000b38:	00812623          	sw	s0,12(sp)
80000b3c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:128
    return(0);
80000b40:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:129
}
80000b44:	00078513          	mv	a0,a5
80000b48:	00c12403          	lw	s0,12(sp)
80000b4c:	01010113          	addi	sp,sp,16
80000b50:	00008067          	ret

80000b54 <External_19_IRQHandler>:
External_19_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:132

__attribute__((weak))  uint8_t External_19_IRQHandler(void)
{
80000b54:	ff010113          	addi	sp,sp,-16
80000b58:	00812623          	sw	s0,12(sp)
80000b5c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:133
    return(0);
80000b60:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:134
}
80000b64:	00078513          	mv	a0,a5
80000b68:	00c12403          	lw	s0,12(sp)
80000b6c:	01010113          	addi	sp,sp,16
80000b70:	00008067          	ret

80000b74 <External_20_IRQHandler>:
External_20_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:137

__attribute__((weak))  uint8_t External_20_IRQHandler(void)
{
80000b74:	ff010113          	addi	sp,sp,-16
80000b78:	00812623          	sw	s0,12(sp)
80000b7c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:138
    return(0);
80000b80:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:139
}
80000b84:	00078513          	mv	a0,a5
80000b88:	00c12403          	lw	s0,12(sp)
80000b8c:	01010113          	addi	sp,sp,16
80000b90:	00008067          	ret

80000b94 <External_21_IRQHandler>:
External_21_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:142

__attribute__((weak))  uint8_t External_21_IRQHandler(void)
{
80000b94:	ff010113          	addi	sp,sp,-16
80000b98:	00812623          	sw	s0,12(sp)
80000b9c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:143
    return(0);
80000ba0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:144
}
80000ba4:	00078513          	mv	a0,a5
80000ba8:	00c12403          	lw	s0,12(sp)
80000bac:	01010113          	addi	sp,sp,16
80000bb0:	00008067          	ret

80000bb4 <External_22_IRQHandler>:
External_22_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:147

__attribute__((weak))  uint8_t External_22_IRQHandler(void)
{
80000bb4:	ff010113          	addi	sp,sp,-16
80000bb8:	00812623          	sw	s0,12(sp)
80000bbc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:148
    return(0);
80000bc0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:149
}
80000bc4:	00078513          	mv	a0,a5
80000bc8:	00c12403          	lw	s0,12(sp)
80000bcc:	01010113          	addi	sp,sp,16
80000bd0:	00008067          	ret

80000bd4 <External_23_IRQHandler>:
External_23_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:152

__attribute__((weak))  uint8_t External_23_IRQHandler(void)
{
80000bd4:	ff010113          	addi	sp,sp,-16
80000bd8:	00812623          	sw	s0,12(sp)
80000bdc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:153
    return(0);
80000be0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:154
}
80000be4:	00078513          	mv	a0,a5
80000be8:	00c12403          	lw	s0,12(sp)
80000bec:	01010113          	addi	sp,sp,16
80000bf0:	00008067          	ret

80000bf4 <External_24_IRQHandler>:
External_24_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:157

__attribute__((weak))  uint8_t External_24_IRQHandler(void)
{
80000bf4:	ff010113          	addi	sp,sp,-16
80000bf8:	00812623          	sw	s0,12(sp)
80000bfc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:158
    return(0);
80000c00:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:159
}
80000c04:	00078513          	mv	a0,a5
80000c08:	00c12403          	lw	s0,12(sp)
80000c0c:	01010113          	addi	sp,sp,16
80000c10:	00008067          	ret

80000c14 <External_25_IRQHandler>:
External_25_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:162

__attribute__((weak))  uint8_t External_25_IRQHandler(void)
{
80000c14:	ff010113          	addi	sp,sp,-16
80000c18:	00812623          	sw	s0,12(sp)
80000c1c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:163
    return(0);
80000c20:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:164
}
80000c24:	00078513          	mv	a0,a5
80000c28:	00c12403          	lw	s0,12(sp)
80000c2c:	01010113          	addi	sp,sp,16
80000c30:	00008067          	ret

80000c34 <External_26_IRQHandler>:
External_26_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:167

__attribute__((weak))  uint8_t External_26_IRQHandler(void)
{
80000c34:	ff010113          	addi	sp,sp,-16
80000c38:	00812623          	sw	s0,12(sp)
80000c3c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:168
    return(0);
80000c40:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:169
}
80000c44:	00078513          	mv	a0,a5
80000c48:	00c12403          	lw	s0,12(sp)
80000c4c:	01010113          	addi	sp,sp,16
80000c50:	00008067          	ret

80000c54 <External_27_IRQHandler>:
External_27_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:172

__attribute__((weak))  uint8_t External_27_IRQHandler(void)
{
80000c54:	ff010113          	addi	sp,sp,-16
80000c58:	00812623          	sw	s0,12(sp)
80000c5c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:173
    return(0);
80000c60:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:174
}
80000c64:	00078513          	mv	a0,a5
80000c68:	00c12403          	lw	s0,12(sp)
80000c6c:	01010113          	addi	sp,sp,16
80000c70:	00008067          	ret

80000c74 <External_28_IRQHandler>:
External_28_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:177

__attribute__((weak))  uint8_t External_28_IRQHandler(void)
{
80000c74:	ff010113          	addi	sp,sp,-16
80000c78:	00812623          	sw	s0,12(sp)
80000c7c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:178
    return(0);
80000c80:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:179
}
80000c84:	00078513          	mv	a0,a5
80000c88:	00c12403          	lw	s0,12(sp)
80000c8c:	01010113          	addi	sp,sp,16
80000c90:	00008067          	ret

80000c94 <External_29_IRQHandler>:
External_29_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:182

__attribute__((weak))  uint8_t External_29_IRQHandler(void)
{
80000c94:	ff010113          	addi	sp,sp,-16
80000c98:	00812623          	sw	s0,12(sp)
80000c9c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:183
    return(0);
80000ca0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:184
}
80000ca4:	00078513          	mv	a0,a5
80000ca8:	00c12403          	lw	s0,12(sp)
80000cac:	01010113          	addi	sp,sp,16
80000cb0:	00008067          	ret

80000cb4 <External_30_IRQHandler>:
External_30_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:187

__attribute__((weak))  uint8_t External_30_IRQHandler(void)
{
80000cb4:	ff010113          	addi	sp,sp,-16
80000cb8:	00812623          	sw	s0,12(sp)
80000cbc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:188
    return(0);
80000cc0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:189
}
80000cc4:	00078513          	mv	a0,a5
80000cc8:	00c12403          	lw	s0,12(sp)
80000ccc:	01010113          	addi	sp,sp,16
80000cd0:	00008067          	ret

80000cd4 <External_31_IRQHandler>:
External_31_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:192

__attribute__((weak))  uint8_t External_31_IRQHandler(void)
{
80000cd4:	ff010113          	addi	sp,sp,-16
80000cd8:	00812623          	sw	s0,12(sp)
80000cdc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:193
    return(0);
80000ce0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:194
}
80000ce4:	00078513          	mv	a0,a5
80000ce8:	00c12403          	lw	s0,12(sp)
80000cec:	01010113          	addi	sp,sp,16
80000cf0:	00008067          	ret

80000cf4 <write_hex>:
write_hex():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:55

char *__env[1] = { 0 };
char **environ = __env;

void write_hex(int fd, uint32_t hex)
{
80000cf4:	fd010113          	addi	sp,sp,-48
80000cf8:	02112623          	sw	ra,44(sp)
80000cfc:	02812423          	sw	s0,40(sp)
80000d00:	03010413          	addi	s0,sp,48
80000d04:	fca42e23          	sw	a0,-36(s0)
80000d08:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:61
    uint8_t ii;
    uint8_t jj;
    char towrite;
    uint8_t digit;

    write( fd , "0x", 2 );
80000d0c:	00200613          	li	a2,2
80000d10:	800077b7          	lui	a5,0x80007
80000d14:	7f078593          	addi	a1,a5,2032 # 800077f0 <__stack_top+0xfffc4ff0>
80000d18:	fdc42503          	lw	a0,-36(s0)
80000d1c:	0e5060ef          	jal	ra,80007600 <write>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:63

    for (ii = 8 ; ii > 0; ii--)
80000d20:	00800793          	li	a5,8
80000d24:	fef407a3          	sb	a5,-17(s0)
80000d28:	0980006f          	j	80000dc0 <write_hex+0xcc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:65
    {
        jj = ii-1;
80000d2c:	fef44783          	lbu	a5,-17(s0)
80000d30:	fff78793          	addi	a5,a5,-1
80000d34:	fef40723          	sb	a5,-18(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:66
        digit = ((hex & (0xF << (jj*4))) >> (jj*4));
80000d38:	fee44783          	lbu	a5,-18(s0)
80000d3c:	00279793          	slli	a5,a5,0x2
80000d40:	00f00713          	li	a4,15
80000d44:	00f717b3          	sll	a5,a4,a5
80000d48:	00078713          	mv	a4,a5
80000d4c:	fd842783          	lw	a5,-40(s0)
80000d50:	00f77733          	and	a4,a4,a5
80000d54:	fee44783          	lbu	a5,-18(s0)
80000d58:	00279793          	slli	a5,a5,0x2
80000d5c:	00f757b3          	srl	a5,a4,a5
80000d60:	fef406a3          	sb	a5,-19(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:67
        towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
80000d64:	fed44703          	lbu	a4,-19(s0)
80000d68:	00900793          	li	a5,9
80000d6c:	00e7ee63          	bltu	a5,a4,80000d88 <write_hex+0x94>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 1)
80000d70:	fed44783          	lbu	a5,-19(s0)
80000d74:	03078793          	addi	a5,a5,48
80000d78:	0ff7f793          	andi	a5,a5,255
80000d7c:	01879793          	slli	a5,a5,0x18
80000d80:	4187d793          	srai	a5,a5,0x18
80000d84:	0180006f          	j	80000d9c <write_hex+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 2)
80000d88:	fed44783          	lbu	a5,-19(s0)
80000d8c:	03778793          	addi	a5,a5,55
80000d90:	0ff7f793          	andi	a5,a5,255
80000d94:	01879793          	slli	a5,a5,0x18
80000d98:	4187d793          	srai	a5,a5,0x18
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 4)
80000d9c:	fef40623          	sb	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:68 (discriminator 4)
        write( fd, &towrite, 1);
80000da0:	fec40793          	addi	a5,s0,-20
80000da4:	00100613          	li	a2,1
80000da8:	00078593          	mv	a1,a5
80000dac:	fdc42503          	lw	a0,-36(s0)
80000db0:	051060ef          	jal	ra,80007600 <write>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 4)
    for (ii = 8 ; ii > 0; ii--)
80000db4:	fef44783          	lbu	a5,-17(s0)
80000db8:	fff78793          	addi	a5,a5,-1
80000dbc:	fef407a3          	sb	a5,-17(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 2)
80000dc0:	fef44783          	lbu	a5,-17(s0)
80000dc4:	f60794e3          	bnez	a5,80000d2c <write_hex+0x38>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:70
    }
}
80000dc8:	00000013          	nop
80000dcc:	02c12083          	lw	ra,44(sp)
80000dd0:	02812403          	lw	s0,40(sp)
80000dd4:	03010113          	addi	sp,sp,48
80000dd8:	00008067          	ret

80000ddc <_exit>:
_exit():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:74

               
void _exit(int code)
{
80000ddc:	fd010113          	addi	sp,sp,-48
80000de0:	02112623          	sw	ra,44(sp)
80000de4:	02812423          	sw	s0,40(sp)
80000de8:	03010413          	addi	s0,sp,48
80000dec:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:76
#ifdef MSCC_STDIO_THRU_CORE_UART_APB
    const char * message = "\nProgam has exited with code:";
80000df0:	800077b7          	lui	a5,0x80007
80000df4:	7f478793          	addi	a5,a5,2036 # 800077f4 <__stack_top+0xfffc4ff4>
80000df8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:78

    write(STDERR_FILENO, message, strlen(message));
80000dfc:	fec42503          	lw	a0,-20(s0)
80000e00:	0c8010ef          	jal	ra,80001ec8 <strlen>
80000e04:	00050793          	mv	a5,a0
80000e08:	00078613          	mv	a2,a5
80000e0c:	fec42583          	lw	a1,-20(s0)
80000e10:	00200513          	li	a0,2
80000e14:	7ec060ef          	jal	ra,80007600 <write>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:79
    write_hex(STDERR_FILENO, code);
80000e18:	fdc42783          	lw	a5,-36(s0)
80000e1c:	00078593          	mv	a1,a5
80000e20:	00200513          	li	a0,2
80000e24:	ed1ff0ef          	jal	ra,80000cf4 <write_hex>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:82 (discriminator 1)
#endif

    while (1);
80000e28:	0000006f          	j	80000e28 <_exit+0x4c>

80000e2c <_isatty>:
_isatty():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:101
    curbrk += incr;
    return curbrk - incr;
}

int _isatty(int fd)
{
80000e2c:	fe010113          	addi	sp,sp,-32
80000e30:	00812e23          	sw	s0,28(sp)
80000e34:	02010413          	addi	s0,sp,32
80000e38:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:102
    if (fd == STDOUT_FILENO || fd == STDERR_FILENO)
80000e3c:	fec42703          	lw	a4,-20(s0)
80000e40:	00100793          	li	a5,1
80000e44:	00f70863          	beq	a4,a5,80000e54 <_isatty+0x28>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:102 (discriminator 1)
80000e48:	fec42703          	lw	a4,-20(s0)
80000e4c:	00200793          	li	a5,2
80000e50:	00f71663          	bne	a4,a5,80000e5c <_isatty+0x30>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:104
    {
        return 1;
80000e54:	00100793          	li	a5,1
80000e58:	0140006f          	j	80000e6c <_isatty+0x40>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:107
    }

    errno = EBADF;
80000e5c:	800227b7          	lui	a5,0x80022
80000e60:	00900713          	li	a4,9
80000e64:	c8e7a823          	sw	a4,-880(a5) # 80021c90 <__stack_top+0xfffdf490>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:108
    return 0;
80000e68:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:109
}
80000e6c:	00078513          	mv	a0,a5
80000e70:	01c12403          	lw	s0,28(sp)
80000e74:	02010113          	addi	sp,sp,32
80000e78:	00008067          	ret

80000e7c <stub>:
stub():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:112

static int stub(int err)
{
80000e7c:	fe010113          	addi	sp,sp,-32
80000e80:	00812e23          	sw	s0,28(sp)
80000e84:	02010413          	addi	s0,sp,32
80000e88:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:113
    errno = err;
80000e8c:	800227b7          	lui	a5,0x80022
80000e90:	fec42703          	lw	a4,-20(s0)
80000e94:	c8e7a823          	sw	a4,-880(a5) # 80021c90 <__stack_top+0xfffdf490>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:114
    return -1;
80000e98:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:115
}
80000e9c:	00078513          	mv	a0,a5
80000ea0:	01c12403          	lw	s0,28(sp)
80000ea4:	02010113          	addi	sp,sp,32
80000ea8:	00008067          	ret

80000eac <_write>:
_write():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:226
{
    return stub(ECHILD);
}

ssize_t _write(int fd, const void* ptr, size_t len)
{
80000eac:	fd010113          	addi	sp,sp,-48
80000eb0:	02112623          	sw	ra,44(sp)
80000eb4:	02812423          	sw	s0,40(sp)
80000eb8:	03010413          	addi	s0,sp,48
80000ebc:	fca42e23          	sw	a0,-36(s0)
80000ec0:	fcb42c23          	sw	a1,-40(s0)
80000ec4:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:229

#ifdef MSCC_STDIO_THRU_CORE_UART_APB
  const uint8_t * current = (const uint8_t *) ptr;
80000ec8:	fd842783          	lw	a5,-40(s0)
80000ecc:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:232
  size_t jj;

  if (_isatty(fd))
80000ed0:	fdc42503          	lw	a0,-36(s0)
80000ed4:	f59ff0ef          	jal	ra,80000e2c <_isatty>
80000ed8:	00050793          	mv	a5,a0
80000edc:	08078c63          	beqz	a5,80000f74 <_write+0xc8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:238
  {
        /*--------------------------------------------------------------------------
        * Initialize the UART driver if it is the first time this function is
        * called.
        */
        if ( !g_stdio_uart_init_done )
80000ee0:	9101a783          	lw	a5,-1776(gp) # 800080f0 <g_stdio_uart_init_done>
80000ee4:	02079063          	bnez	a5,80000f04 <_write+0x58>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:245
            /******************************************************************************
            * Baud value:
            * This value is calculated using the following equation:
            *      BAUD_VALUE = (CLOCK / (16 * BAUD_RATE)) - 1
            *****************************************************************************/
            UART_init( &g_stdio_uart, MSCC_STDIO_UART_BASE_ADDR, ((SYS_CLK_FREQ/(16 * MSCC_STDIO_BAUD_VALUE))-1), (DATA_8_BITS | NO_PARITY));
80000ee8:	00100693          	li	a3,1
80000eec:	02c00613          	li	a2,44
80000ef0:	700015b7          	lui	a1,0x70001
80000ef4:	90818513          	addi	a0,gp,-1784 # 800080e8 <g_stdio_uart>
80000ef8:	174000ef          	jal	ra,8000106c <UART_init>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:246
            g_stdio_uart_init_done = 1;
80000efc:	00100713          	li	a4,1
80000f00:	90e1a823          	sw	a4,-1776(gp) # 800080f0 <g_stdio_uart_init_done>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:249
        }

    for (jj = 0; jj < len; jj++)
80000f04:	fe042623          	sw	zero,-20(s0)
80000f08:	0580006f          	j	80000f60 <_write+0xb4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:251
    {
        UART_send(&g_stdio_uart, current + jj, 1);
80000f0c:	fe842703          	lw	a4,-24(s0)
80000f10:	fec42783          	lw	a5,-20(s0)
80000f14:	00f707b3          	add	a5,a4,a5
80000f18:	00100613          	li	a2,1
80000f1c:	00078593          	mv	a1,a5
80000f20:	90818513          	addi	a0,gp,-1784 # 800080e8 <g_stdio_uart>
80000f24:	260000ef          	jal	ra,80001184 <UART_send>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:252
        if (current[jj] == '\n')
80000f28:	fe842703          	lw	a4,-24(s0)
80000f2c:	fec42783          	lw	a5,-20(s0)
80000f30:	00f707b3          	add	a5,a4,a5
80000f34:	0007c703          	lbu	a4,0(a5)
80000f38:	00a00793          	li	a5,10
80000f3c:	00f71c63          	bne	a4,a5,80000f54 <_write+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:254
        {
            UART_send(&g_stdio_uart, (const uint8_t *)"\r", 1);
80000f40:	00100613          	li	a2,1
80000f44:	800087b7          	lui	a5,0x80008
80000f48:	81478593          	addi	a1,a5,-2028 # 80007814 <__stack_top+0xfffc5014>
80000f4c:	90818513          	addi	a0,gp,-1784 # 800080e8 <g_stdio_uart>
80000f50:	234000ef          	jal	ra,80001184 <UART_send>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 2)
    for (jj = 0; jj < len; jj++)
80000f54:	fec42783          	lw	a5,-20(s0)
80000f58:	00178793          	addi	a5,a5,1
80000f5c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 1)
80000f60:	fec42703          	lw	a4,-20(s0)
80000f64:	fd442783          	lw	a5,-44(s0)
80000f68:	faf762e3          	bltu	a4,a5,80000f0c <_write+0x60>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:257
        }
    }
    return len;
80000f6c:	fd442783          	lw	a5,-44(s0)
80000f70:	0100006f          	j	80000f80 <_write+0xd4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:261
  }
#endif

  return stub(EBADF);
80000f74:	00900513          	li	a0,9
80000f78:	f05ff0ef          	jal	ra,80000e7c <stub>
80000f7c:	00050793          	mv	a5,a0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:262
}
80000f80:	00078513          	mv	a0,a5
80000f84:	02c12083          	lw	ra,44(sp)
80000f88:	02812403          	lw	s0,40(sp)
80000f8c:	03010113          	addi	sp,sp,48
80000f90:	00008067          	ret

80000f94 <HW_set_32bit_reg>:
HW_set_32bit_reg():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:36
 *
 * a0:   addr_t reg_addr
 * a1:   uint32_t value
 */
HW_set_32bit_reg:
    sw a1, 0(a0)
80000f94:	00b52023          	sw	a1,0(a0) # 44000000 <RAM_SIZE+0x43f80000>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:37
    ret
80000f98:	00008067          	ret

80000f9c <HW_get_32bit_reg>:
HW_get_32bit_reg():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:47
 *
 * R0:   addr_t reg_addr
 * @return          32 bits value read from the peripheral register.
 */
HW_get_32bit_reg:
    lw a0, 0(a0)
80000f9c:	00052503          	lw	a0,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:48
    ret
80000fa0:	00008067          	ret

80000fa4 <HW_set_32bit_reg_field>:
HW_set_32bit_reg_field():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:60
 * a1:   int_fast8_t shift
 * a2:   uint32_t mask
 * a3:   uint32_t value
 */
HW_set_32bit_reg_field:
    mv t3, a3
80000fa4:	00068e13          	mv	t3,a3
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:61
    sll t3, t3, a1
80000fa8:	00be1e33          	sll	t3,t3,a1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:62
    and  t3, t3, a2
80000fac:	00ce7e33          	and	t3,t3,a2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:63
    lw t1, 0(a0)
80000fb0:	00052303          	lw	t1,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:64
    mv t2, a2
80000fb4:	00060393          	mv	t2,a2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:65
    not t2, t2
80000fb8:	fff3c393          	not	t2,t2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:66
    and t1, t1, t2
80000fbc:	00737333          	and	t1,t1,t2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:67
    or t1, t1, t3
80000fc0:	01c36333          	or	t1,t1,t3
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:68
    sw t1, 0(a0)
80000fc4:	00652023          	sw	t1,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:69
    ret
80000fc8:	00008067          	ret

80000fcc <HW_get_32bit_reg_field>:
HW_get_32bit_reg_field():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:83
 *
 * @return          32 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_32bit_reg_field:
    lw a0, 0(a0)
80000fcc:	00052503          	lw	a0,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:84
    and a0, a0, a2
80000fd0:	00c57533          	and	a0,a0,a2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:85
    srl a0, a0, a1
80000fd4:	00b55533          	srl	a0,a0,a1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:86
    ret
80000fd8:	00008067          	ret

80000fdc <HW_set_16bit_reg>:
HW_set_16bit_reg():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:96
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast16_t value
 */
HW_set_16bit_reg:
    sh a1, 0(a0)
80000fdc:	00b51023          	sh	a1,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:97
    ret
80000fe0:	00008067          	ret

80000fe4 <HW_get_16bit_reg>:
HW_get_16bit_reg():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:107
 *
 * a0:   addr_t reg_addr
 * @return          16 bits value read from the peripheral register.
 */
HW_get_16bit_reg:
    lh a0, (a0)
80000fe4:	00051503          	lh	a0,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:108
    ret
80000fe8:	00008067          	ret

80000fec <HW_set_16bit_reg_field>:
HW_set_16bit_reg_field():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:121
 * a2:   uint_fast16_t mask
 * a3:   uint_fast16_t value
 * @param value     Value to be written in the specified field.
 */
HW_set_16bit_reg_field:
    mv t3, a3
80000fec:	00068e13          	mv	t3,a3
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:122
    sll t3, t3, a1
80000ff0:	00be1e33          	sll	t3,t3,a1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:123
    and  t3, t3, a2
80000ff4:	00ce7e33          	and	t3,t3,a2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:124
    lh t1, 0(a0)
80000ff8:	00051303          	lh	t1,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:125
    mv t2, a2
80000ffc:	00060393          	mv	t2,a2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:126
    not t2, t2
80001000:	fff3c393          	not	t2,t2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:127
    and t1, t1, t2
80001004:	00737333          	and	t1,t1,t2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:128
    or t1, t1, t3
80001008:	01c36333          	or	t1,t1,t3
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:129
    sh t1, 0(a0)
8000100c:	00651023          	sh	t1,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:130
    ret
80001010:	00008067          	ret

80001014 <HW_get_16bit_reg_field>:
HW_get_16bit_reg_field():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:144
 *
 * @return          16 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_16bit_reg_field:
    lh a0, 0(a0)
80001014:	00051503          	lh	a0,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:145
    and a0, a0, a2
80001018:	00c57533          	and	a0,a0,a2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:146
    srl a0, a0, a1
8000101c:	00b55533          	srl	a0,a0,a1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:147
    ret
80001020:	00008067          	ret

80001024 <HW_set_8bit_reg>:
HW_set_8bit_reg():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:157
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast8_t value
 */
HW_set_8bit_reg:
    sb a1, 0(a0)
80001024:	00b50023          	sb	a1,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:158
    ret
80001028:	00008067          	ret

8000102c <HW_get_8bit_reg>:
HW_get_8bit_reg():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:168
 *
 * a0:   addr_t reg_addr
 * @return          8 bits value read from the peripheral register.
 */
HW_get_8bit_reg:
    lb a0, 0(a0)
8000102c:	00050503          	lb	a0,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:169
    ret
80001030:	00008067          	ret

80001034 <HW_set_8bit_reg_field>:
HW_set_8bit_reg_field():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:181
 * a1:   int_fast8_t shift
 * a2:   uint_fast8_t mask
 * a3:   uint_fast8_t value
 */
HW_set_8bit_reg_field:
    mv t3, a3
80001034:	00068e13          	mv	t3,a3
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:182
    sll t3, t3, a1
80001038:	00be1e33          	sll	t3,t3,a1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:183
    and  t3, t3, a2
8000103c:	00ce7e33          	and	t3,t3,a2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:184
    lb t1, 0(a0)
80001040:	00050303          	lb	t1,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:185
    mv t2, a2
80001044:	00060393          	mv	t2,a2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:186
    not t2, t2
80001048:	fff3c393          	not	t2,t2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:187
    and t1, t1, t2
8000104c:	00737333          	and	t1,t1,t2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:188
    or t1, t1, t3
80001050:	01c36333          	or	t1,t1,t3
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:189
    sb t1, 0(a0)
80001054:	00650023          	sb	t1,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:190
    ret
80001058:	00008067          	ret

8000105c <HW_get_8bit_reg_field>:
HW_get_8bit_reg_field():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:204
 *
 * @return          8 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_8bit_reg_field:
    lb a0, 0(a0)
8000105c:	00050503          	lb	a0,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:205
    and a0, a0, a2
80001060:	00c57533          	and	a0,a0,a2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:206
    srl a0, a0, a1
80001064:	00b55533          	srl	a0,a0,a1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:207
    ret
80001068:	00008067          	ret

8000106c <UART_init>:
UART_init():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:46
    UART_instance_t * this_uart,
    addr_t base_addr,
    uint16_t baud_value,
    uint8_t line_config
)
{
8000106c:	fd010113          	addi	sp,sp,-48
80001070:	02112623          	sw	ra,44(sp)
80001074:	02812423          	sw	s0,40(sp)
80001078:	03010413          	addi	s0,sp,48
8000107c:	fca42e23          	sw	a0,-36(s0)
80001080:	fcb42c23          	sw	a1,-40(s0)
80001084:	00060793          	mv	a5,a2
80001088:	00068713          	mv	a4,a3
8000108c:	fcf41b23          	sh	a5,-42(s0)
80001090:	00070793          	mv	a5,a4
80001094:	fcf40aa3          	sb	a5,-43(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53
    
    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( line_config <= MAX_LINE_CONFIG )
    HAL_ASSERT( baud_value <= MAX_BAUD_VALUE )

    if( ( this_uart != NULL_INSTANCE ) &&
80001098:	fdc42783          	lw	a5,-36(s0)
8000109c:	0c078a63          	beqz	a5,80001170 <UART_init+0x104>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53 (discriminator 1)
800010a0:	fd544703          	lbu	a4,-43(s0)
800010a4:	00700793          	li	a5,7
800010a8:	0ce7e463          	bltu	a5,a4,80001170 <UART_init+0x104>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:54
        ( line_config <= MAX_LINE_CONFIG ) &&
800010ac:	fd645703          	lhu	a4,-42(s0)
800010b0:	000027b7          	lui	a5,0x2
800010b4:	0af77e63          	bleu	a5,a4,80001170 <UART_init+0x104>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:60
        ( baud_value <= MAX_BAUD_VALUE ) )
    {
        /*
         * Store lower 8-bits of baud value in CTRL1.
         */
        HAL_set_8bit_reg( base_addr, CTRL1, (uint_fast8_t)(baud_value &
800010b8:	fd842783          	lw	a5,-40(s0)
800010bc:	00878713          	addi	a4,a5,8 # 2008 <HEAP_SIZE-0xdff8>
800010c0:	fd645783          	lhu	a5,-42(s0)
800010c4:	0ff7f793          	andi	a5,a5,255
800010c8:	00078593          	mv	a1,a5
800010cc:	00070513          	mv	a0,a4
800010d0:	f55ff0ef          	jal	ra,80001024 <HW_set_8bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:67
    
        /*
         * Extract higher 5-bits of baud value and store in higher 5-bits 
         * of CTRL2, along with line configuration in lower 3 three bits.
         */
        HAL_set_8bit_reg( base_addr, CTRL2, (uint_fast8_t)line_config | 
800010d4:	fd842783          	lw	a5,-40(s0)
800010d8:	00c78693          	addi	a3,a5,12
800010dc:	fd544703          	lbu	a4,-43(s0)
800010e0:	fd645783          	lhu	a5,-42(s0)
800010e4:	4057d793          	srai	a5,a5,0x5
800010e8:	7f87f793          	andi	a5,a5,2040
800010ec:	00f767b3          	or	a5,a4,a5
800010f0:	00078593          	mv	a1,a5
800010f4:	00068513          	mv	a0,a3
800010f8:	f2dff0ef          	jal	ra,80001024 <HW_set_8bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:71
                                           (uint_fast8_t)((baud_value &
                                   BAUDVALUE_MSB) >> BAUDVALUE_SHIFT ) );
    
        this_uart->base_address = base_addr;
800010fc:	fdc42783          	lw	a5,-36(s0)
80001100:	fd842703          	lw	a4,-40(s0)
80001104:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:94
        
        /*
         * Flush the receive FIFO of data that may have been received before the
         * driver was initialized.
         */
        rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001108:	fdc42783          	lw	a5,-36(s0)
8000110c:	0007a783          	lw	a5,0(a5)
80001110:	01078793          	addi	a5,a5,16
80001114:	00078513          	mv	a0,a5
80001118:	f15ff0ef          	jal	ra,8000102c <HW_get_8bit_reg>
8000111c:	00050793          	mv	a5,a0
80001120:	0027f793          	andi	a5,a5,2
80001124:	fef407a3          	sb	a5,-17(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
                                                    STATUS_RXFULL_MASK;
        while ( rx_full )
80001128:	0380006f          	j	80001160 <UART_init+0xf4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:98
        {
            HAL_get_8bit_reg( this_uart->base_address, RXDATA );
8000112c:	fdc42783          	lw	a5,-36(s0)
80001130:	0007a783          	lw	a5,0(a5)
80001134:	00478793          	addi	a5,a5,4
80001138:	00078513          	mv	a0,a5
8000113c:	ef1ff0ef          	jal	ra,8000102c <HW_get_8bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:99
            rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001140:	fdc42783          	lw	a5,-36(s0)
80001144:	0007a783          	lw	a5,0(a5)
80001148:	01078793          	addi	a5,a5,16
8000114c:	00078513          	mv	a0,a5
80001150:	eddff0ef          	jal	ra,8000102c <HW_get_8bit_reg>
80001154:	00050793          	mv	a5,a0
80001158:	0027f793          	andi	a5,a5,2
8000115c:	fef407a3          	sb	a5,-17(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
        while ( rx_full )
80001160:	fef44783          	lbu	a5,-17(s0)
80001164:	fc0794e3          	bnez	a5,8000112c <UART_init+0xc0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:106
        }

        /*
         * Clear status of the UART instance.
         */
        this_uart->status = (uint8_t)0;
80001168:	fdc42783          	lw	a5,-36(s0)
8000116c:	00078223          	sb	zero,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:108
    }
}
80001170:	00000013          	nop
80001174:	02c12083          	lw	ra,44(sp)
80001178:	02812403          	lw	s0,40(sp)
8000117c:	03010113          	addi	sp,sp,48
80001180:	00008067          	ret

80001184 <UART_send>:
UART_send():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:121
(
    UART_instance_t * this_uart,
    const uint8_t * tx_buffer,
    size_t tx_size
)
{
80001184:	fd010113          	addi	sp,sp,-48
80001188:	02112623          	sw	ra,44(sp)
8000118c:	02812423          	sw	s0,40(sp)
80001190:	03010413          	addi	s0,sp,48
80001194:	fca42e23          	sw	a0,-36(s0)
80001198:	fcb42c23          	sw	a1,-40(s0)
8000119c:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( tx_buffer != NULL_BUFFER )
    HAL_ASSERT( tx_size > 0 )
      
    if( (this_uart != NULL_INSTANCE) &&
800011a0:	fdc42783          	lw	a5,-36(s0)
800011a4:	08078063          	beqz	a5,80001224 <UART_send+0xa0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129 (discriminator 1)
800011a8:	fd842783          	lw	a5,-40(s0)
800011ac:	06078c63          	beqz	a5,80001224 <UART_send+0xa0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:130
        (tx_buffer != NULL_BUFFER)   &&
800011b0:	fd442783          	lw	a5,-44(s0)
800011b4:	06078863          	beqz	a5,80001224 <UART_send+0xa0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133
        (tx_size > (size_t)0) )
    {
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
800011b8:	fe042623          	sw	zero,-20(s0)
800011bc:	05c0006f          	j	80001218 <UART_send+0x94>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:137 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
800011c0:	fdc42783          	lw	a5,-36(s0)
800011c4:	0007a783          	lw	a5,0(a5)
800011c8:	01078793          	addi	a5,a5,16
800011cc:	00078513          	mv	a0,a5
800011d0:	e5dff0ef          	jal	ra,8000102c <HW_get_8bit_reg>
800011d4:	00050793          	mv	a5,a0
800011d8:	0017f793          	andi	a5,a5,1
800011dc:	fef405a3          	sb	a5,-21(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:139 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
800011e0:	feb44783          	lbu	a5,-21(s0)
800011e4:	fc078ee3          	beqz	a5,800011c0 <UART_send+0x3c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:141 (discriminator 2)
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
800011e8:	fdc42783          	lw	a5,-36(s0)
800011ec:	0007a683          	lw	a3,0(a5)
800011f0:	fd842703          	lw	a4,-40(s0)
800011f4:	fec42783          	lw	a5,-20(s0)
800011f8:	00f707b3          	add	a5,a4,a5
800011fc:	0007c783          	lbu	a5,0(a5)
80001200:	00078593          	mv	a1,a5
80001204:	00068513          	mv	a0,a3
80001208:	e1dff0ef          	jal	ra,80001024 <HW_set_8bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 2)
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
8000120c:	fec42783          	lw	a5,-20(s0)
80001210:	00178793          	addi	a5,a5,1
80001214:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 1)
80001218:	fec42703          	lw	a4,-20(s0)
8000121c:	fd442783          	lw	a5,-44(s0)
80001220:	faf760e3          	bltu	a4,a5,800011c0 <UART_send+0x3c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:145
                              (uint_fast8_t)tx_buffer[char_idx] );
        }
    }
}
80001224:	00000013          	nop
80001228:	02c12083          	lw	ra,44(sp)
8000122c:	02812403          	lw	s0,40(sp)
80001230:	03010113          	addi	sp,sp,48
80001234:	00008067          	ret

80001238 <UART_polled_tx_string>:
UART_polled_tx_string():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:239
UART_polled_tx_string
( 
    UART_instance_t * this_uart, 
    const uint8_t * p_sz_string
)
{
80001238:	fd010113          	addi	sp,sp,-48
8000123c:	02112623          	sw	ra,44(sp)
80001240:	02812423          	sw	s0,40(sp)
80001244:	03010413          	addi	s0,sp,48
80001248:	fca42e23          	sw	a0,-36(s0)
8000124c:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246
    uint8_t tx_ready;

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( p_sz_string != NULL_BUFFER )
    
    if( ( this_uart != NULL_INSTANCE ) && ( p_sz_string != NULL_BUFFER ) )
80001250:	fdc42783          	lw	a5,-36(s0)
80001254:	08078063          	beqz	a5,800012d4 <UART_polled_tx_string+0x9c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246 (discriminator 1)
80001258:	fd842783          	lw	a5,-40(s0)
8000125c:	06078c63          	beqz	a5,800012d4 <UART_polled_tx_string+0x9c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:248
    {
        char_idx = 0U;
80001260:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
80001264:	05c0006f          	j	800012c0 <UART_polled_tx_string+0x88>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:253 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001268:	fdc42783          	lw	a5,-36(s0)
8000126c:	0007a783          	lw	a5,0(a5)
80001270:	01078793          	addi	a5,a5,16
80001274:	00078513          	mv	a0,a5
80001278:	db5ff0ef          	jal	ra,8000102c <HW_get_8bit_reg>
8000127c:	00050793          	mv	a5,a0
80001280:	0017f793          	andi	a5,a5,1
80001284:	fef405a3          	sb	a5,-21(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:255 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
80001288:	feb44783          	lbu	a5,-21(s0)
8000128c:	fc078ee3          	beqz	a5,80001268 <UART_polled_tx_string+0x30>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:257
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
80001290:	fdc42783          	lw	a5,-36(s0)
80001294:	0007a683          	lw	a3,0(a5)
80001298:	fd842703          	lw	a4,-40(s0)
8000129c:	fec42783          	lw	a5,-20(s0)
800012a0:	00f707b3          	add	a5,a4,a5
800012a4:	0007c783          	lbu	a5,0(a5)
800012a8:	00078593          	mv	a1,a5
800012ac:	00068513          	mv	a0,a3
800012b0:	d75ff0ef          	jal	ra,80001024 <HW_set_8bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:259
                              (uint_fast8_t)p_sz_string[char_idx] );
            char_idx++;
800012b4:	fec42783          	lw	a5,-20(s0)
800012b8:	00178793          	addi	a5,a5,1
800012bc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
800012c0:	fd842703          	lw	a4,-40(s0)
800012c4:	fec42783          	lw	a5,-20(s0)
800012c8:	00f707b3          	add	a5,a4,a5
800012cc:	0007c783          	lbu	a5,0(a5)
800012d0:	f8079ce3          	bnez	a5,80001268 <UART_polled_tx_string+0x30>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:262
        }
    }
}
800012d4:	00000013          	nop
800012d8:	02c12083          	lw	ra,44(sp)
800012dc:	02812403          	lw	s0,40(sp)
800012e0:	03010113          	addi	sp,sp,48
800012e4:	00008067          	ret

800012e8 <pvPortMalloc>:
pvPortMalloc():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:151
}
/*-----------------------------------------------------------*/


void *pvPortMalloc( size_t xWantedSize )
{
800012e8:	fc010113          	addi	sp,sp,-64
800012ec:	02112e23          	sw	ra,60(sp)
800012f0:	02812c23          	sw	s0,56(sp)
800012f4:	04010413          	addi	s0,sp,64
800012f8:	fca42623          	sw	a0,-52(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:154
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
800012fc:	fe042223          	sw	zero,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:156

	vTaskSuspendAll();
80001300:	024010ef          	jal	ra,80002324 <vTaskSuspendAll>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:160
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
80001304:	9241a783          	lw	a5,-1756(gp) # 80008104 <xHeapHasBeenInitialised.2777>
80001308:	00079863          	bnez	a5,80001318 <pvPortMalloc+0x30>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:162
		{
			prvHeapInit();
8000130c:	284000ef          	jal	ra,80001590 <prvHeapInit>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:163
			xHeapHasBeenInitialised = pdTRUE;
80001310:	00100713          	li	a4,1
80001314:	92e1a223          	sw	a4,-1756(gp) # 80008104 <xHeapHasBeenInitialised.2777>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:168
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
80001318:	fcc42783          	lw	a5,-52(s0)
8000131c:	02078a63          	beqz	a5,80001350 <pvPortMalloc+0x68>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:170
		{
			xWantedSize += heapSTRUCT_SIZE;
80001320:	00800793          	li	a5,8
80001324:	00078713          	mv	a4,a5
80001328:	fcc42783          	lw	a5,-52(s0)
8000132c:	00e787b3          	add	a5,a5,a4
80001330:	fcf42623          	sw	a5,-52(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:173

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
80001334:	fcc42783          	lw	a5,-52(s0)
80001338:	0037f793          	andi	a5,a5,3
8000133c:	00078a63          	beqz	a5,80001350 <pvPortMalloc+0x68>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:176
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
80001340:	fcc42783          	lw	a5,-52(s0)
80001344:	ffc7f793          	andi	a5,a5,-4
80001348:	00478793          	addi	a5,a5,4
8000134c:	fcf42623          	sw	a5,-52(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
80001350:	fcc42783          	lw	a5,-52(s0)
80001354:	14078463          	beqz	a5,8000149c <pvPortMalloc+0x1b4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180 (discriminator 1)
80001358:	fcc42703          	lw	a4,-52(s0)
8000135c:	000197b7          	lui	a5,0x19
80001360:	ffb78793          	addi	a5,a5,-5 # 18ffb <HEAP_SIZE+0x8ffb>
80001364:	12e7ec63          	bltu	a5,a4,8000149c <pvPortMalloc+0x1b4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:184
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
80001368:	91418793          	addi	a5,gp,-1772 # 800080f4 <xStart>
8000136c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:185
			pxBlock = xStart.pxNextFreeBlock;
80001370:	9141a783          	lw	a5,-1772(gp) # 800080f4 <xStart>
80001374:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
80001378:	0180006f          	j	80001390 <pvPortMalloc+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:188
			{
				pxPreviousBlock = pxBlock;
8000137c:	fec42783          	lw	a5,-20(s0)
80001380:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:189
				pxBlock = pxBlock->pxNextFreeBlock;
80001384:	fec42783          	lw	a5,-20(s0)
80001388:	0007a783          	lw	a5,0(a5)
8000138c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
80001390:	fec42783          	lw	a5,-20(s0)
80001394:	0047a783          	lw	a5,4(a5)
80001398:	fcc42703          	lw	a4,-52(s0)
8000139c:	00e7f863          	bleu	a4,a5,800013ac <pvPortMalloc+0xc4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186 (discriminator 1)
800013a0:	fec42783          	lw	a5,-20(s0)
800013a4:	0007a783          	lw	a5,0(a5)
800013a8:	fc079ae3          	bnez	a5,8000137c <pvPortMalloc+0x94>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:193
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
800013ac:	fec42703          	lw	a4,-20(s0)
800013b0:	91c18793          	addi	a5,gp,-1764 # 800080fc <xEnd>
800013b4:	0ef70463          	beq	a4,a5,8000149c <pvPortMalloc+0x1b4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:197
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
800013b8:	fe842783          	lw	a5,-24(s0)
800013bc:	0007a783          	lw	a5,0(a5)
800013c0:	00800713          	li	a4,8
800013c4:	00e787b3          	add	a5,a5,a4
800013c8:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:201

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
800013cc:	fec42783          	lw	a5,-20(s0)
800013d0:	0007a703          	lw	a4,0(a5)
800013d4:	fe842783          	lw	a5,-24(s0)
800013d8:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:204

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
800013dc:	fec42783          	lw	a5,-20(s0)
800013e0:	0047a703          	lw	a4,4(a5)
800013e4:	fcc42783          	lw	a5,-52(s0)
800013e8:	40f707b3          	sub	a5,a4,a5
800013ec:	00800713          	li	a4,8
800013f0:	00171713          	slli	a4,a4,0x1
800013f4:	08f77663          	bleu	a5,a4,80001480 <pvPortMalloc+0x198>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:209
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
800013f8:	fec42703          	lw	a4,-20(s0)
800013fc:	fcc42783          	lw	a5,-52(s0)
80001400:	00f707b3          	add	a5,a4,a5
80001404:	fcf42e23          	sw	a5,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:213

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
80001408:	fec42783          	lw	a5,-20(s0)
8000140c:	0047a703          	lw	a4,4(a5)
80001410:	fcc42783          	lw	a5,-52(s0)
80001414:	40f70733          	sub	a4,a4,a5
80001418:	fdc42783          	lw	a5,-36(s0)
8000141c:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:214
					pxBlock->xBlockSize = xWantedSize;
80001420:	fec42783          	lw	a5,-20(s0)
80001424:	fcc42703          	lw	a4,-52(s0)
80001428:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
8000142c:	fdc42783          	lw	a5,-36(s0)
80001430:	0047a783          	lw	a5,4(a5)
80001434:	fcf42c23          	sw	a5,-40(s0)
80001438:	91418793          	addi	a5,gp,-1772 # 800080f4 <xStart>
8000143c:	fef42023          	sw	a5,-32(s0)
80001440:	0100006f          	j	80001450 <pvPortMalloc+0x168>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 3)
80001444:	fe042783          	lw	a5,-32(s0)
80001448:	0007a783          	lw	a5,0(a5)
8000144c:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 1)
80001450:	fe042783          	lw	a5,-32(s0)
80001454:	0007a783          	lw	a5,0(a5)
80001458:	0047a783          	lw	a5,4(a5)
8000145c:	fd842703          	lw	a4,-40(s0)
80001460:	fee7e2e3          	bltu	a5,a4,80001444 <pvPortMalloc+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 4)
80001464:	fe042783          	lw	a5,-32(s0)
80001468:	0007a703          	lw	a4,0(a5)
8000146c:	fdc42783          	lw	a5,-36(s0)
80001470:	00e7a023          	sw	a4,0(a5)
80001474:	fe042783          	lw	a5,-32(s0)
80001478:	fdc42703          	lw	a4,-36(s0)
8000147c:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:220
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
80001480:	800087b7          	lui	a5,0x80008
80001484:	fe07a703          	lw	a4,-32(a5) # 80007fe0 <__stack_top+0xfffc57e0>
80001488:	fec42783          	lw	a5,-20(s0)
8000148c:	0047a783          	lw	a5,4(a5)
80001490:	40f70733          	sub	a4,a4,a5
80001494:	800087b7          	lui	a5,0x80008
80001498:	fee7a023          	sw	a4,-32(a5) # 80007fe0 <__stack_top+0xfffc57e0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:226
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
8000149c:	6b1000ef          	jal	ra,8000234c <xTaskResumeAll>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:230

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
800014a0:	fe442783          	lw	a5,-28(s0)
800014a4:	00079463          	bnez	a5,800014ac <pvPortMalloc+0x1c4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:233
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
800014a8:	094060ef          	jal	ra,8000753c <vApplicationMallocFailedHook>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:238
		}
	}
	#endif

	return pvReturn;
800014ac:	fe442783          	lw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:239
}
800014b0:	00078513          	mv	a0,a5
800014b4:	03c12083          	lw	ra,60(sp)
800014b8:	03812403          	lw	s0,56(sp)
800014bc:	04010113          	addi	sp,sp,64
800014c0:	00008067          	ret

800014c4 <vPortFree>:
vPortFree():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:243
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
800014c4:	fd010113          	addi	sp,sp,-48
800014c8:	02112623          	sw	ra,44(sp)
800014cc:	02812423          	sw	s0,40(sp)
800014d0:	03010413          	addi	s0,sp,48
800014d4:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:244
uint8_t *puc = ( uint8_t * ) pv;
800014d8:	fdc42783          	lw	a5,-36(s0)
800014dc:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:247
BlockLink_t *pxLink;

	if( pv != NULL )
800014e0:	fdc42783          	lw	a5,-36(s0)
800014e4:	08078c63          	beqz	a5,8000157c <vPortFree+0xb8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:251
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
800014e8:	00800793          	li	a5,8
800014ec:	40f007b3          	neg	a5,a5
800014f0:	fe842703          	lw	a4,-24(s0)
800014f4:	00f707b3          	add	a5,a4,a5
800014f8:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:255

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
800014fc:	fe842783          	lw	a5,-24(s0)
80001500:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:257

		vTaskSuspendAll();
80001504:	621000ef          	jal	ra,80002324 <vTaskSuspendAll>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
80001508:	fe442783          	lw	a5,-28(s0)
8000150c:	0047a783          	lw	a5,4(a5)
80001510:	fef42023          	sw	a5,-32(s0)
80001514:	91418793          	addi	a5,gp,-1772 # 800080f4 <xStart>
80001518:	fef42623          	sw	a5,-20(s0)
8000151c:	0100006f          	j	8000152c <vPortFree+0x68>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 3)
80001520:	fec42783          	lw	a5,-20(s0)
80001524:	0007a783          	lw	a5,0(a5)
80001528:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 1)
8000152c:	fec42783          	lw	a5,-20(s0)
80001530:	0007a783          	lw	a5,0(a5)
80001534:	0047a783          	lw	a5,4(a5)
80001538:	fe042703          	lw	a4,-32(s0)
8000153c:	fee7e2e3          	bltu	a5,a4,80001520 <vPortFree+0x5c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 4)
80001540:	fec42783          	lw	a5,-20(s0)
80001544:	0007a703          	lw	a4,0(a5)
80001548:	fe442783          	lw	a5,-28(s0)
8000154c:	00e7a023          	sw	a4,0(a5)
80001550:	fec42783          	lw	a5,-20(s0)
80001554:	fe442703          	lw	a4,-28(s0)
80001558:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:261 (discriminator 4)
			xFreeBytesRemaining += pxLink->xBlockSize;
8000155c:	fe442783          	lw	a5,-28(s0)
80001560:	0047a703          	lw	a4,4(a5)
80001564:	800087b7          	lui	a5,0x80008
80001568:	fe07a783          	lw	a5,-32(a5) # 80007fe0 <__stack_top+0xfffc57e0>
8000156c:	00f70733          	add	a4,a4,a5
80001570:	800087b7          	lui	a5,0x80008
80001574:	fee7a023          	sw	a4,-32(a5) # 80007fe0 <__stack_top+0xfffc57e0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:264 (discriminator 4)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
80001578:	5d5000ef          	jal	ra,8000234c <xTaskResumeAll>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:266
	}
}
8000157c:	00000013          	nop
80001580:	02c12083          	lw	ra,44(sp)
80001584:	02812403          	lw	s0,40(sp)
80001588:	03010113          	addi	sp,sp,48
8000158c:	00008067          	ret

80001590 <prvHeapInit>:
prvHeapInit():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:282
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
80001590:	fe010113          	addi	sp,sp,-32
80001594:	00812e23          	sw	s0,28(sp)
80001598:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:287
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
8000159c:	800087b7          	lui	a5,0x80008
800015a0:	15478793          	addi	a5,a5,340 # 80008154 <__stack_top+0xfffc5954>
800015a4:	ffc7f793          	andi	a5,a5,-4
800015a8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:291

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
800015ac:	fec42703          	lw	a4,-20(s0)
800015b0:	90e1aa23          	sw	a4,-1772(gp) # 800080f4 <xStart>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:292
	xStart.xBlockSize = ( size_t ) 0;
800015b4:	91418793          	addi	a5,gp,-1772 # 800080f4 <xStart>
800015b8:	0007a223          	sw	zero,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:295

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
800015bc:	91c18793          	addi	a5,gp,-1764 # 800080fc <xEnd>
800015c0:	00019737          	lui	a4,0x19
800015c4:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
800015c8:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:296
	xEnd.pxNextFreeBlock = NULL;
800015cc:	9001ae23          	sw	zero,-1764(gp) # 800080fc <xEnd>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:300

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
800015d0:	fec42783          	lw	a5,-20(s0)
800015d4:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:301
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
800015d8:	fe842783          	lw	a5,-24(s0)
800015dc:	00019737          	lui	a4,0x19
800015e0:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
800015e4:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:302
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
800015e8:	fe842783          	lw	a5,-24(s0)
800015ec:	91c18713          	addi	a4,gp,-1764 # 800080fc <xEnd>
800015f0:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:303
}
800015f4:	00000013          	nop
800015f8:	01c12403          	lw	s0,28(sp)
800015fc:	02010113          	addi	sp,sp,32
80001600:	00008067          	ret

80001604 <raise_soft_interrupt>:
raise_soft_interrupt():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:227
/*==============================================================================
 * The function raise_soft_interrupt() raises a synchronous software interrupt by
 * writing into the MSIP register.
 */
static inline void raise_soft_interrupt()
{
80001604:	fe010113          	addi	sp,sp,-32
80001608:	00812e23          	sw	s0,28(sp)
8000160c:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:228
    unsigned long hart_id = read_csr(mhartid);
80001610:	f14027f3          	csrr	a5,mhartid
80001614:	fef42623          	sw	a5,-20(s0)
80001618:	fec42783          	lw	a5,-20(s0)
8000161c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:231

    /*You need to make sure that the global interrupt is enabled*/
    set_csr(mie, MIP_MSIP);       /*Enable software interrupt bit */
80001620:	304467f3          	csrrsi	a5,mie,8
80001624:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:232
    PRCI->MSIP[hart_id] = 0x01;   /*raise soft interrupt for hart0*/
80001628:	44000737          	lui	a4,0x44000
8000162c:	fe842783          	lw	a5,-24(s0)
80001630:	00279793          	slli	a5,a5,0x2
80001634:	00f707b3          	add	a5,a4,a5
80001638:	00100713          	li	a4,1
8000163c:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:233
}
80001640:	00000013          	nop
80001644:	01c12403          	lw	s0,28(sp)
80001648:	02010113          	addi	sp,sp,32
8000164c:	00008067          	ret

80001650 <vPortEnterCritical>:
vPortEnterCritical():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:132
 * Used to catch tasks that attempt to return from their implementing function.
 */
static void prvTaskExitError( void );

void vPortEnterCritical( void )
{
80001650:	ff010113          	addi	sp,sp,-16
80001654:	00812623          	sw	s0,12(sp)
80001658:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:133
	portDISABLE_INTERRUPTS();
8000165c:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:134
	uxCriticalNesting++;
80001660:	800087b7          	lui	a5,0x80008
80001664:	fe47a783          	lw	a5,-28(a5) # 80007fe4 <__stack_top+0xfffc57e4>
80001668:	00178713          	addi	a4,a5,1
8000166c:	800087b7          	lui	a5,0x80008
80001670:	fee7a223          	sw	a4,-28(a5) # 80007fe4 <__stack_top+0xfffc57e4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:135
}
80001674:	00000013          	nop
80001678:	00c12403          	lw	s0,12(sp)
8000167c:	01010113          	addi	sp,sp,16
80001680:	00008067          	ret

80001684 <vPortExitCritical>:
vPortExitCritical():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:139
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
80001684:	ff010113          	addi	sp,sp,-16
80001688:	00812623          	sw	s0,12(sp)
8000168c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:140
	uxCriticalNesting--;
80001690:	800087b7          	lui	a5,0x80008
80001694:	fe47a783          	lw	a5,-28(a5) # 80007fe4 <__stack_top+0xfffc57e4>
80001698:	fff78713          	addi	a4,a5,-1
8000169c:	800087b7          	lui	a5,0x80008
800016a0:	fee7a223          	sw	a4,-28(a5) # 80007fe4 <__stack_top+0xfffc57e4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:141
	if( uxCriticalNesting == 0 )
800016a4:	800087b7          	lui	a5,0x80008
800016a8:	fe47a783          	lw	a5,-28(a5) # 80007fe4 <__stack_top+0xfffc57e4>
800016ac:	00079463          	bnez	a5,800016b4 <vPortExitCritical+0x30>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:143
	{
		portENABLE_INTERRUPTS();
800016b0:	30046073          	csrsi	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:145
	}
}
800016b4:	00000013          	nop
800016b8:	00c12403          	lw	s0,12(sp)
800016bc:	01010113          	addi	sp,sp,16
800016c0:	00008067          	ret

800016c4 <prvSetNextTimerInterrupt>:
prvSetNextTimerInterrupt():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:151
/*-----------------------------------------------------------*/

/* Sets the next timer interrupt
 * Reads previous timer compare register, and adds tickrate */
static void prvSetNextTimerInterrupt(void)
{
800016c4:	fe010113          	addi	sp,sp,-32
800016c8:	00812e23          	sw	s0,28(sp)
800016cc:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:154
	uint64_t time;

	time = mtime->val_low;
800016d0:	80008637          	lui	a2,0x80008
800016d4:	fe862603          	lw	a2,-24(a2) # 80007fe8 <__stack_top+0xfffc57e8>
800016d8:	00062603          	lw	a2,0(a2)
800016dc:	fec42423          	sw	a2,-24(s0)
800016e0:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:155
	time |= ((uint64_t)mtime->val_high << 32);
800016e4:	80008637          	lui	a2,0x80008
800016e8:	fe862603          	lw	a2,-24(a2) # 80007fe8 <__stack_top+0xfffc57e8>
800016ec:	00462603          	lw	a2,4(a2)
800016f0:	00060693          	mv	a3,a2
800016f4:	00000713          	li	a4,0
800016f8:	00069813          	slli	a6,a3,0x0
800016fc:	00000793          	li	a5,0
80001700:	fe842703          	lw	a4,-24(s0)
80001704:	00f76733          	or	a4,a4,a5
80001708:	fee42423          	sw	a4,-24(s0)
8000170c:	fec42703          	lw	a4,-20(s0)
80001710:	010767b3          	or	a5,a4,a6
80001714:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:157

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
80001718:	fe842683          	lw	a3,-24(s0)
8000171c:	fec42703          	lw	a4,-20(s0)
80001720:	000f45b7          	lui	a1,0xf4
80001724:	24058593          	addi	a1,a1,576 # f4240 <RAM_SIZE+0x74240>
80001728:	00000613          	li	a2,0
8000172c:	00b687b3          	add	a5,a3,a1
80001730:	00078513          	mv	a0,a5
80001734:	00d53533          	sltu	a0,a0,a3
80001738:	00c70833          	add	a6,a4,a2
8000173c:	01050733          	add	a4,a0,a6
80001740:	00070813          	mv	a6,a4
80001744:	fef42423          	sw	a5,-24(s0)
80001748:	ff042623          	sw	a6,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:159

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
8000174c:	800087b7          	lui	a5,0x80008
80001750:	fec7a783          	lw	a5,-20(a5) # 80007fec <__stack_top+0xfffc57ec>
80001754:	fe842703          	lw	a4,-24(s0)
80001758:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:160
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
8000175c:	fec42783          	lw	a5,-20(s0)
80001760:	0007d313          	srli	t1,a5,0x0
80001764:	00000393          	li	t2,0
80001768:	800087b7          	lui	a5,0x80008
8000176c:	fec7a783          	lw	a5,-20(a5) # 80007fec <__stack_top+0xfffc57ec>
80001770:	00030713          	mv	a4,t1
80001774:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:163

	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
80001778:	08000793          	li	a5,128
8000177c:	3047a073          	csrs	mie,a5
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:164
}
80001780:	00000013          	nop
80001784:	01c12403          	lw	s0,28(sp)
80001788:	02010113          	addi	sp,sp,32
8000178c:	00008067          	ret

80001790 <vPortSetupTimer>:
vPortSetupTimer():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:169
/*-----------------------------------------------------------*/

/* Sets and enable the timer interrupt */
void vPortSetupTimer(void)
{
80001790:	fe010113          	addi	sp,sp,-32
80001794:	00812e23          	sw	s0,28(sp)
80001798:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:172
	uint64_t time;

	time = mtime->val_low;
8000179c:	80008637          	lui	a2,0x80008
800017a0:	fe862603          	lw	a2,-24(a2) # 80007fe8 <__stack_top+0xfffc57e8>
800017a4:	00062603          	lw	a2,0(a2)
800017a8:	fec42423          	sw	a2,-24(s0)
800017ac:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:173
	time |= ((uint64_t)mtime->val_high << 32);
800017b0:	80008637          	lui	a2,0x80008
800017b4:	fe862603          	lw	a2,-24(a2) # 80007fe8 <__stack_top+0xfffc57e8>
800017b8:	00462603          	lw	a2,4(a2)
800017bc:	00060693          	mv	a3,a2
800017c0:	00000713          	li	a4,0
800017c4:	00069813          	slli	a6,a3,0x0
800017c8:	00000793          	li	a5,0
800017cc:	fe842703          	lw	a4,-24(s0)
800017d0:	00f76733          	or	a4,a4,a5
800017d4:	fee42423          	sw	a4,-24(s0)
800017d8:	fec42703          	lw	a4,-20(s0)
800017dc:	010767b3          	or	a5,a4,a6
800017e0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:175

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
800017e4:	fe842683          	lw	a3,-24(s0)
800017e8:	fec42703          	lw	a4,-20(s0)
800017ec:	000f45b7          	lui	a1,0xf4
800017f0:	24058593          	addi	a1,a1,576 # f4240 <RAM_SIZE+0x74240>
800017f4:	00000613          	li	a2,0
800017f8:	00b687b3          	add	a5,a3,a1
800017fc:	00078513          	mv	a0,a5
80001800:	00d53533          	sltu	a0,a0,a3
80001804:	00c70833          	add	a6,a4,a2
80001808:	01050733          	add	a4,a0,a6
8000180c:	00070813          	mv	a6,a4
80001810:	fef42423          	sw	a5,-24(s0)
80001814:	ff042623          	sw	a6,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:177

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
80001818:	800087b7          	lui	a5,0x80008
8000181c:	fec7a783          	lw	a5,-20(a5) # 80007fec <__stack_top+0xfffc57ec>
80001820:	fe842703          	lw	a4,-24(s0)
80001824:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:178
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
80001828:	fec42783          	lw	a5,-20(s0)
8000182c:	0007d313          	srli	t1,a5,0x0
80001830:	00000393          	li	t2,0
80001834:	800087b7          	lui	a5,0x80008
80001838:	fec7a783          	lw	a5,-20(a5) # 80007fec <__stack_top+0xfffc57ec>
8000183c:	00030713          	mv	a4,t1
80001840:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:182


	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
80001844:	08000793          	li	a5,128
80001848:	3047a073          	csrs	mie,a5
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:183
}
8000184c:	00000013          	nop
80001850:	01c12403          	lw	s0,28(sp)
80001854:	02010113          	addi	sp,sp,32
80001858:	00008067          	ret

8000185c <prvTaskExitError>:
prvTaskExitError():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:187
/*-----------------------------------------------------------*/

void prvTaskExitError( void )
{
8000185c:	ff010113          	addi	sp,sp,-16
80001860:	00812623          	sw	s0,12(sp)
80001864:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
80001868:	800087b7          	lui	a5,0x80008
8000186c:	fe47a703          	lw	a4,-28(a5) # 80007fe4 <__stack_top+0xfffc57e4>
80001870:	fff00793          	li	a5,-1
80001874:	00f70663          	beq	a4,a5,80001880 <prvTaskExitError+0x24>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194 (discriminator 1)
80001878:	30047073          	csrci	mstatus,8
8000187c:	0000006f          	j	8000187c <prvTaskExitError+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:195
	portDISABLE_INTERRUPTS();
80001880:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:196 (discriminator 2)
	for( ;; );
80001884:	0000006f          	j	80001884 <prvTaskExitError+0x28>

80001888 <pxPortInitialiseStack>:
pxPortInitialiseStack():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:220

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
80001888:	fe010113          	addi	sp,sp,-32
8000188c:	00812e23          	sw	s0,28(sp)
80001890:	02010413          	addi	s0,sp,32
80001894:	fea42623          	sw	a0,-20(s0)
80001898:	feb42423          	sw	a1,-24(s0)
8000189c:	fec42223          	sw	a2,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:224
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	register int *tp asm("x3");
	pxTopOfStack--;
800018a0:	fec42783          	lw	a5,-20(s0)
800018a4:	ffc78793          	addi	a5,a5,-4
800018a8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:225
	*pxTopOfStack = (portSTACK_TYPE)pxCode;			/* Start address */
800018ac:	fe842703          	lw	a4,-24(s0)
800018b0:	fec42783          	lw	a5,-20(s0)
800018b4:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:226
	pxTopOfStack -= 22;
800018b8:	fec42783          	lw	a5,-20(s0)
800018bc:	fa878793          	addi	a5,a5,-88
800018c0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:227
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;	/* Register a0 */
800018c4:	fe442703          	lw	a4,-28(s0)
800018c8:	fec42783          	lw	a5,-20(s0)
800018cc:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:228
	pxTopOfStack -= 6;
800018d0:	fec42783          	lw	a5,-20(s0)
800018d4:	fe878793          	addi	a5,a5,-24
800018d8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:229
	*pxTopOfStack = (portSTACK_TYPE)tp; /* Register thread pointer */
800018dc:	00018793          	mv	a5,gp
800018e0:	00078713          	mv	a4,a5
800018e4:	fec42783          	lw	a5,-20(s0)
800018e8:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:230
	pxTopOfStack -= 3;
800018ec:	fec42783          	lw	a5,-20(s0)
800018f0:	ff478793          	addi	a5,a5,-12
800018f4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:231
	*pxTopOfStack = (portSTACK_TYPE)prvTaskExitError; /* Register ra */
800018f8:	800027b7          	lui	a5,0x80002
800018fc:	85c78713          	addi	a4,a5,-1956 # 8000185c <__stack_top+0xfffbf05c>
80001900:	fec42783          	lw	a5,-20(s0)
80001904:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:233

	return pxTopOfStack;
80001908:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:234
}
8000190c:	00078513          	mv	a0,a5
80001910:	01c12403          	lw	s0,28(sp)
80001914:	02010113          	addi	sp,sp,32
80001918:	00008067          	ret

8000191c <SysTick_Handler>:
SysTick_Handler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:238
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void )
{
8000191c:	ff010113          	addi	sp,sp,-16
80001920:	00112623          	sw	ra,12(sp)
80001924:	00812423          	sw	s0,8(sp)
80001928:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:241
	/*Save Context*/
	{
		__asm volatile("lw	t0, pxCurrentTCB");
8000192c:	92c1a283          	lw	t0,-1748(gp) # 8000810c <pxCurrentTCB>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:242
		__asm volatile("sw	a2, 0x0(t0)");
80001930:	00c2a023          	sw	a2,0(t0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:246
	}

	/* Increment the RTOS tick. */
	prvSetNextTimerInterrupt();
80001934:	d91ff0ef          	jal	ra,800016c4 <prvSetNextTimerInterrupt>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:249

	/*Switch task */
	if( xTaskIncrementTick() != pdFALSE )
80001938:	3ad000ef          	jal	ra,800024e4 <xTaskIncrementTick>
8000193c:	00050793          	mv	a5,a0
80001940:	00078463          	beqz	a5,80001948 <SysTick_Handler+0x2c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:251
	{
		vTaskSwitchContext();
80001944:	58d000ef          	jal	ra,800026d0 <vTaskSwitchContext>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:256
	}

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
80001948:	92c1a103          	lw	sp,-1748(gp) # 8000810c <pxCurrentTCB>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:257
		__asm volatile("lw	sp, 0x0(sp)");
8000194c:	00012103          	lw	sp,0(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:259

		__asm volatile("lw	t0, 31 * 4(sp)");
80001950:	07c12283          	lw	t0,124(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:260
		__asm volatile("csrw	mepc, t0");
80001954:	34129073          	csrw	mepc,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:263

		// Added by Iaçanã
		__asm volatile("lui	t0, 0x2");
80001958:	000022b7          	lui	t0,0x2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:264
  		__asm volatile("addi t0,t0,-2048");
8000195c:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:265
		__asm volatile("csrs mstatus,t0");
80001960:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:267

		__asm volatile("lw	t0, 32 * 4(sp)");
80001964:	08012283          	lw	t0,128(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:268
		__asm volatile("slli t0, t0, 0x4");
80001968:	00429293          	slli	t0,t0,0x4
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:269
		__asm volatile("csrs mstatus, t0");
8000196c:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:271

		__asm volatile("lw	x1, 0x0(sp)");
80001970:	00012083          	lw	ra,0(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:272
		__asm volatile("lw   x4, 3 * 4(sp)");
80001974:	00c12203          	lw	tp,12(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:273
		__asm volatile("lw   x5, 4 * 4(sp)");
80001978:	01012283          	lw	t0,16(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:274
		__asm volatile("lw   x6, 5 * 4(sp)");
8000197c:	01412303          	lw	t1,20(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:275
		__asm volatile("lw   x7, 6 * 4(sp)");
80001980:	01812383          	lw	t2,24(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:276
		__asm volatile("lw   x8, 7 * 4(sp)");
80001984:	01c12403          	lw	s0,28(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:277
		__asm volatile("lw   x9, 8 * 4(sp)");
80001988:	02012483          	lw	s1,32(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:278
		__asm volatile("lw   x10, 9 * 4(sp)");
8000198c:	02412503          	lw	a0,36(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:279
		__asm volatile("lw   x11, 10 * 4(sp)");
80001990:	02812583          	lw	a1,40(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:280
		__asm volatile("lw   x12, 11 * 4(sp)");
80001994:	02c12603          	lw	a2,44(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:281
		__asm volatile("lw   x13, 12 * 4(sp)");
80001998:	03012683          	lw	a3,48(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:282
		__asm volatile("lw   x14, 13 * 4(sp)");
8000199c:	03412703          	lw	a4,52(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:283
		__asm volatile("lw   x15, 14 * 4(sp)");
800019a0:	03812783          	lw	a5,56(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:284
		__asm volatile("lw   x16, 15 * 4(sp)");
800019a4:	03c12803          	lw	a6,60(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:285
		__asm volatile("lw   x17, 16 * 4(sp)");
800019a8:	04012883          	lw	a7,64(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:286
		__asm volatile("lw   x18, 17 * 4(sp)");
800019ac:	04412903          	lw	s2,68(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:287
		__asm volatile("lw   x19, 18 * 4(sp)");
800019b0:	04812983          	lw	s3,72(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:288
		__asm volatile("lw   x20, 19 * 4(sp)");
800019b4:	04c12a03          	lw	s4,76(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:289
		__asm volatile("lw   x21, 20 * 4(sp)");
800019b8:	05012a83          	lw	s5,80(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:290
		__asm volatile("lw   x22, 21 * 4(sp)");
800019bc:	05412b03          	lw	s6,84(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:291
		__asm volatile("lw   x23, 22 * 4(sp)");
800019c0:	05812b83          	lw	s7,88(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:292
		__asm volatile("lw   x24, 23 * 4(sp)");
800019c4:	05c12c03          	lw	s8,92(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:293
		__asm volatile("lw   x25, 24 * 4(sp)");
800019c8:	06012c83          	lw	s9,96(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:294
		__asm volatile("lw   x26, 25 * 4(sp)");
800019cc:	06412d03          	lw	s10,100(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:295
		__asm volatile("lw   x27, 26 * 4(sp)");
800019d0:	06812d83          	lw	s11,104(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:296
		__asm volatile("lw   x28, 27 * 4(sp)");
800019d4:	06c12e03          	lw	t3,108(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:297
		__asm volatile("lw   x29, 28 * 4(sp)");
800019d8:	07012e83          	lw	t4,112(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:298
		__asm volatile("lw   x30, 29 * 4(sp)");
800019dc:	07412f03          	lw	t5,116(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:299
		__asm volatile("lw   x31, 30 * 4(sp)");
800019e0:	07812f83          	lw	t6,120(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:301

		__asm volatile("addi	sp, sp, 4 * 33");
800019e4:	08410113          	addi	sp,sp,132
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:303

		__asm volatile("mret");
800019e8:	30200073          	mret
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:305
	}
}
800019ec:	00000013          	nop
800019f0:	00c12083          	lw	ra,12(sp)
800019f4:	00812403          	lw	s0,8(sp)
800019f8:	01010113          	addi	sp,sp,16
800019fc:	00008067          	ret

80001a00 <xPortStartScheduler>:
xPortStartScheduler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:308
uint32_t g_startscheduler = 0;
BaseType_t xPortStartScheduler( void )
{
80001a00:	ff010113          	addi	sp,sp,-16
80001a04:	00112623          	sw	ra,12(sp)
80001a08:	00812423          	sw	s0,8(sp)
80001a0c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:309
	vPortSetupTimer();
80001a10:	d81ff0ef          	jal	ra,80001790 <vPortSetupTimer>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:310
	uxCriticalNesting = 0;
80001a14:	800087b7          	lui	a5,0x80008
80001a18:	fe07a223          	sw	zero,-28(a5) # 80007fe4 <__stack_top+0xfffc57e4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:311
	g_startscheduler = 1;
80001a1c:	00100713          	li	a4,1
80001a20:	92e1a423          	sw	a4,-1752(gp) # 80008108 <g_startscheduler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:312
	__enable_irq();
80001a24:	97dfe0ef          	jal	ra,800003a0 <__enable_irq>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:314

	raise_soft_interrupt();
80001a28:	bddff0ef          	jal	ra,80001604 <raise_soft_interrupt>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:317

	/*Should not get here*/
	return pdFALSE;
80001a2c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:318
}
80001a30:	00078513          	mv	a0,a5
80001a34:	00c12083          	lw	ra,12(sp)
80001a38:	00812403          	lw	s0,8(sp)
80001a3c:	01010113          	addi	sp,sp,16
80001a40:	00008067          	ret

80001a44 <Software_IRQHandler>:
Software_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:321

void Software_IRQHandler(void)
{
80001a44:	ff010113          	addi	sp,sp,-16
80001a48:	00112623          	sw	ra,12(sp)
80001a4c:	00812423          	sw	s0,8(sp)
80001a50:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:322
	if(1 == g_startscheduler)
80001a54:	9281a703          	lw	a4,-1752(gp) # 80008108 <g_startscheduler>
80001a58:	00100793          	li	a5,1
80001a5c:	00f71863          	bne	a4,a5,80001a6c <Software_IRQHandler+0x28>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:324
	{
		g_startscheduler = 2; //skip the save n switch context first time when scheduler is starting.
80001a60:	00200713          	li	a4,2
80001a64:	92e1a423          	sw	a4,-1752(gp) # 80008108 <g_startscheduler>
80001a68:	0100006f          	j	80001a78 <Software_IRQHandler+0x34>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:330
	}
	else
	{
		/*Save Context*/
		{
			__asm volatile("lw	t0, pxCurrentTCB");
80001a6c:	92c1a283          	lw	t0,-1748(gp) # 8000810c <pxCurrentTCB>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:331
			__asm volatile("sw	a2, 0x0(t0)");
80001a70:	00c2a023          	sw	a2,0(t0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:334
		}

		vTaskSwitchContext();
80001a74:	45d000ef          	jal	ra,800026d0 <vTaskSwitchContext>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:338
	}

	// Moved by Imperas (was previously causing corruption of a5)
	PRCI->MSIP[0] = 0x00;
80001a78:	440007b7          	lui	a5,0x44000
80001a7c:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:342

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
80001a80:	92c1a103          	lw	sp,-1748(gp) # 8000810c <pxCurrentTCB>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:343
		__asm volatile("lw	sp, 0x0(sp)");
80001a84:	00012103          	lw	sp,0(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:345

		__asm volatile("lw	t0, 31 * 4(sp)");
80001a88:	07c12283          	lw	t0,124(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:346
		__asm volatile("csrw	mepc, t0");
80001a8c:	34129073          	csrw	mepc,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:349

		// Added by Iaçanã
		__asm volatile("lui	t0, 0x2");
80001a90:	000022b7          	lui	t0,0x2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:350
  		__asm volatile("addi t0,t0,-2048");
80001a94:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:351
		__asm volatile("csrs mstatus,t0");
80001a98:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:353

		__asm volatile("lw	t0, 32 * 4(sp)");
80001a9c:	08012283          	lw	t0,128(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:354
		__asm volatile("slli t0, t0, 0x4");
80001aa0:	00429293          	slli	t0,t0,0x4
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:355
		__asm volatile("csrs mstatus, t0");
80001aa4:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:357

		__asm volatile("lw	x1, 0x0(sp)");
80001aa8:	00012083          	lw	ra,0(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:358
		__asm volatile("lw   x4, 3 * 4(sp)");
80001aac:	00c12203          	lw	tp,12(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:359
		__asm volatile("lw   x5, 4 * 4(sp)");
80001ab0:	01012283          	lw	t0,16(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:360
		__asm volatile("lw   x6, 5 * 4(sp)");
80001ab4:	01412303          	lw	t1,20(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:361
		__asm volatile("lw   x7, 6 * 4(sp)");
80001ab8:	01812383          	lw	t2,24(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:362
		__asm volatile("lw   x8, 7 * 4(sp)");
80001abc:	01c12403          	lw	s0,28(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:363
		__asm volatile("lw   x9, 8 * 4(sp)");
80001ac0:	02012483          	lw	s1,32(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:364
		__asm volatile("lw   x10, 9 * 4(sp)");
80001ac4:	02412503          	lw	a0,36(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:365
		__asm volatile("lw   x11, 10 * 4(sp)");
80001ac8:	02812583          	lw	a1,40(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:366
		__asm volatile("lw   x12, 11 * 4(sp)");
80001acc:	02c12603          	lw	a2,44(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:367
		__asm volatile("lw   x13, 12 * 4(sp)");
80001ad0:	03012683          	lw	a3,48(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:368
		__asm volatile("lw   x14, 13 * 4(sp)");
80001ad4:	03412703          	lw	a4,52(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:369
		__asm volatile("lw   x15, 14 * 4(sp)");
80001ad8:	03812783          	lw	a5,56(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:370
		__asm volatile("lw   x16, 15 * 4(sp)");
80001adc:	03c12803          	lw	a6,60(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:371
		__asm volatile("lw   x17, 16 * 4(sp)");
80001ae0:	04012883          	lw	a7,64(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:372
		__asm volatile("lw   x18, 17 * 4(sp)");
80001ae4:	04412903          	lw	s2,68(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:373
		__asm volatile("lw   x19, 18 * 4(sp)");
80001ae8:	04812983          	lw	s3,72(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:374
		__asm volatile("lw   x20, 19 * 4(sp)");
80001aec:	04c12a03          	lw	s4,76(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:375
		__asm volatile("lw   x21, 20 * 4(sp)");
80001af0:	05012a83          	lw	s5,80(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:376
		__asm volatile("lw   x22, 21 * 4(sp)");
80001af4:	05412b03          	lw	s6,84(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:377
		__asm volatile("lw   x23, 22 * 4(sp)");
80001af8:	05812b83          	lw	s7,88(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:378
		__asm volatile("lw   x24, 23 * 4(sp)");
80001afc:	05c12c03          	lw	s8,92(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:379
		__asm volatile("lw   x25, 24 * 4(sp)");
80001b00:	06012c83          	lw	s9,96(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:380
		__asm volatile("lw   x26, 25 * 4(sp)");
80001b04:	06412d03          	lw	s10,100(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:381
		__asm volatile("lw   x27, 26 * 4(sp)");
80001b08:	06812d83          	lw	s11,104(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:382
		__asm volatile("lw   x28, 27 * 4(sp)");
80001b0c:	06c12e03          	lw	t3,108(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:383
		__asm volatile("lw   x29, 28 * 4(sp)");
80001b10:	07012e83          	lw	t4,112(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:384
		__asm volatile("lw   x30, 29 * 4(sp)");
80001b14:	07412f03          	lw	t5,116(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:385
		__asm volatile("lw   x31, 30 * 4(sp)");
80001b18:	07812f83          	lw	t6,120(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:387

		__asm volatile("addi	sp, sp, 4 * 33");
80001b1c:	08410113          	addi	sp,sp,132
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:392

	    // Moved by Imperas (causing corruption of a5 at this position)
		//PRCI->MSIP[0] = 0x00;

		__asm volatile("mret");
80001b20:	30200073          	mret
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:394
	}
}
80001b24:	00000013          	nop
80001b28:	00c12083          	lw	ra,12(sp)
80001b2c:	00812403          	lw	s0,8(sp)
80001b30:	01010113          	addi	sp,sp,16
80001b34:	00008067          	ret

80001b38 <vPortYield>:
vPortYield():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:397

void vPortYield( void )
{
80001b38:	ff010113          	addi	sp,sp,-16
80001b3c:	00112623          	sw	ra,12(sp)
80001b40:	00812423          	sw	s0,8(sp)
80001b44:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:398
	raise_soft_interrupt();
80001b48:	abdff0ef          	jal	ra,80001604 <raise_soft_interrupt>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:399
}
80001b4c:	00000013          	nop
80001b50:	00c12083          	lw	ra,12(sp)
80001b54:	00812403          	lw	s0,8(sp)
80001b58:	01010113          	addi	sp,sp,16
80001b5c:	00008067          	ret

80001b60 <vListInitialise>:
vListInitialise():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:80
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
80001b60:	fe010113          	addi	sp,sp,-32
80001b64:	00812e23          	sw	s0,28(sp)
80001b68:	02010413          	addi	s0,sp,32
80001b6c:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:84
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001b70:	fec42783          	lw	a5,-20(s0)
80001b74:	00878713          	addi	a4,a5,8
80001b78:	fec42783          	lw	a5,-20(s0)
80001b7c:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:88

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
80001b80:	fec42783          	lw	a5,-20(s0)
80001b84:	fff00713          	li	a4,-1
80001b88:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:92

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001b8c:	fec42783          	lw	a5,-20(s0)
80001b90:	00878713          	addi	a4,a5,8
80001b94:	fec42783          	lw	a5,-20(s0)
80001b98:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:93
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001b9c:	fec42783          	lw	a5,-20(s0)
80001ba0:	00878713          	addi	a4,a5,8
80001ba4:	fec42783          	lw	a5,-20(s0)
80001ba8:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:95

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
80001bac:	fec42783          	lw	a5,-20(s0)
80001bb0:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:101

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
80001bb4:	00000013          	nop
80001bb8:	01c12403          	lw	s0,28(sp)
80001bbc:	02010113          	addi	sp,sp,32
80001bc0:	00008067          	ret

80001bc4 <vListInitialiseItem>:
vListInitialiseItem():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:105
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
80001bc4:	fe010113          	addi	sp,sp,-32
80001bc8:	00812e23          	sw	s0,28(sp)
80001bcc:	02010413          	addi	s0,sp,32
80001bd0:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:107
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80001bd4:	fec42783          	lw	a5,-20(s0)
80001bd8:	0007a823          	sw	zero,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:113

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
80001bdc:	00000013          	nop
80001be0:	01c12403          	lw	s0,28(sp)
80001be4:	02010113          	addi	sp,sp,32
80001be8:	00008067          	ret

80001bec <vListInsertEnd>:
vListInsertEnd():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:117
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001bec:	fd010113          	addi	sp,sp,-48
80001bf0:	02812623          	sw	s0,44(sp)
80001bf4:	03010413          	addi	s0,sp,48
80001bf8:	fca42e23          	sw	a0,-36(s0)
80001bfc:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:118
ListItem_t * const pxIndex = pxList->pxIndex;
80001c00:	fdc42783          	lw	a5,-36(s0)
80001c04:	0047a783          	lw	a5,4(a5)
80001c08:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:129
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
80001c0c:	fd842783          	lw	a5,-40(s0)
80001c10:	fec42703          	lw	a4,-20(s0)
80001c14:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:130
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
80001c18:	fec42783          	lw	a5,-20(s0)
80001c1c:	0087a703          	lw	a4,8(a5)
80001c20:	fd842783          	lw	a5,-40(s0)
80001c24:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:135

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
80001c28:	fec42783          	lw	a5,-20(s0)
80001c2c:	0087a783          	lw	a5,8(a5)
80001c30:	fd842703          	lw	a4,-40(s0)
80001c34:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:136
	pxIndex->pxPrevious = pxNewListItem;
80001c38:	fec42783          	lw	a5,-20(s0)
80001c3c:	fd842703          	lw	a4,-40(s0)
80001c40:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:139

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001c44:	fd842783          	lw	a5,-40(s0)
80001c48:	fdc42703          	lw	a4,-36(s0)
80001c4c:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:141

	( pxList->uxNumberOfItems )++;
80001c50:	fdc42783          	lw	a5,-36(s0)
80001c54:	0007a783          	lw	a5,0(a5)
80001c58:	00178713          	addi	a4,a5,1
80001c5c:	fdc42783          	lw	a5,-36(s0)
80001c60:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:142
}
80001c64:	00000013          	nop
80001c68:	02c12403          	lw	s0,44(sp)
80001c6c:	03010113          	addi	sp,sp,48
80001c70:	00008067          	ret

80001c74 <vListInsert>:
vListInsert():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:146
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001c74:	fd010113          	addi	sp,sp,-48
80001c78:	02812623          	sw	s0,44(sp)
80001c7c:	03010413          	addi	s0,sp,48
80001c80:	fca42e23          	sw	a0,-36(s0)
80001c84:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:148
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
80001c88:	fd842783          	lw	a5,-40(s0)
80001c8c:	0007a783          	lw	a5,0(a5)
80001c90:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:164
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
80001c94:	fe842703          	lw	a4,-24(s0)
80001c98:	fff00793          	li	a5,-1
80001c9c:	00f71a63          	bne	a4,a5,80001cb0 <vListInsert+0x3c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:166
	{
		pxIterator = pxList->xListEnd.pxPrevious;
80001ca0:	fdc42783          	lw	a5,-36(s0)
80001ca4:	0107a783          	lw	a5,16(a5)
80001ca8:	fef42623          	sw	a5,-20(s0)
80001cac:	0340006f          	j	80001ce0 <vListInsert+0x6c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:192
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001cb0:	fdc42783          	lw	a5,-36(s0)
80001cb4:	00878793          	addi	a5,a5,8
80001cb8:	fef42623          	sw	a5,-20(s0)
80001cbc:	0100006f          	j	80001ccc <vListInsert+0x58>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 3)
80001cc0:	fec42783          	lw	a5,-20(s0)
80001cc4:	0047a783          	lw	a5,4(a5)
80001cc8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 1)
80001ccc:	fec42783          	lw	a5,-20(s0)
80001cd0:	0047a783          	lw	a5,4(a5)
80001cd4:	0007a783          	lw	a5,0(a5)
80001cd8:	fe842703          	lw	a4,-24(s0)
80001cdc:	fef772e3          	bleu	a5,a4,80001cc0 <vListInsert+0x4c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:199
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
80001ce0:	fec42783          	lw	a5,-20(s0)
80001ce4:	0047a703          	lw	a4,4(a5)
80001ce8:	fd842783          	lw	a5,-40(s0)
80001cec:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:200
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
80001cf0:	fd842783          	lw	a5,-40(s0)
80001cf4:	0047a783          	lw	a5,4(a5)
80001cf8:	fd842703          	lw	a4,-40(s0)
80001cfc:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:201
	pxNewListItem->pxPrevious = pxIterator;
80001d00:	fd842783          	lw	a5,-40(s0)
80001d04:	fec42703          	lw	a4,-20(s0)
80001d08:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:202
	pxIterator->pxNext = pxNewListItem;
80001d0c:	fec42783          	lw	a5,-20(s0)
80001d10:	fd842703          	lw	a4,-40(s0)
80001d14:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:206

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001d18:	fd842783          	lw	a5,-40(s0)
80001d1c:	fdc42703          	lw	a4,-36(s0)
80001d20:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:208

	( pxList->uxNumberOfItems )++;
80001d24:	fdc42783          	lw	a5,-36(s0)
80001d28:	0007a783          	lw	a5,0(a5)
80001d2c:	00178713          	addi	a4,a5,1
80001d30:	fdc42783          	lw	a5,-36(s0)
80001d34:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:209
}
80001d38:	00000013          	nop
80001d3c:	02c12403          	lw	s0,44(sp)
80001d40:	03010113          	addi	sp,sp,48
80001d44:	00008067          	ret

80001d48 <uxListRemove>:
uxListRemove():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:213
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
80001d48:	fd010113          	addi	sp,sp,-48
80001d4c:	02812623          	sw	s0,44(sp)
80001d50:	03010413          	addi	s0,sp,48
80001d54:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:216
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
80001d58:	fdc42783          	lw	a5,-36(s0)
80001d5c:	0107a783          	lw	a5,16(a5)
80001d60:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:218

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
80001d64:	fdc42783          	lw	a5,-36(s0)
80001d68:	0047a783          	lw	a5,4(a5)
80001d6c:	fdc42703          	lw	a4,-36(s0)
80001d70:	00872703          	lw	a4,8(a4) # 44000008 <RAM_SIZE+0x43f80008>
80001d74:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:219
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
80001d78:	fdc42783          	lw	a5,-36(s0)
80001d7c:	0087a783          	lw	a5,8(a5)
80001d80:	fdc42703          	lw	a4,-36(s0)
80001d84:	00472703          	lw	a4,4(a4)
80001d88:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:225

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
80001d8c:	fec42783          	lw	a5,-20(s0)
80001d90:	0047a783          	lw	a5,4(a5)
80001d94:	fdc42703          	lw	a4,-36(s0)
80001d98:	00f71a63          	bne	a4,a5,80001dac <uxListRemove+0x64>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:227
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
80001d9c:	fdc42783          	lw	a5,-36(s0)
80001da0:	0087a703          	lw	a4,8(a5)
80001da4:	fec42783          	lw	a5,-20(s0)
80001da8:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:234
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
80001dac:	fdc42783          	lw	a5,-36(s0)
80001db0:	0007a823          	sw	zero,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:235
	( pxList->uxNumberOfItems )--;
80001db4:	fec42783          	lw	a5,-20(s0)
80001db8:	0007a783          	lw	a5,0(a5)
80001dbc:	fff78713          	addi	a4,a5,-1
80001dc0:	fec42783          	lw	a5,-20(s0)
80001dc4:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:237

	return pxList->uxNumberOfItems;
80001dc8:	fec42783          	lw	a5,-20(s0)
80001dcc:	0007a783          	lw	a5,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:238
}
80001dd0:	00078513          	mv	a0,a5
80001dd4:	02c12403          	lw	s0,44(sp)
80001dd8:	03010113          	addi	sp,sp,48
80001ddc:	00008067          	ret

80001de0 <memset>:
memset():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:25

  return dest;
}

void* memset(void* dest, int byte, size_t len)
{
80001de0:	fd010113          	addi	sp,sp,-48
80001de4:	02812623          	sw	s0,44(sp)
80001de8:	03010413          	addi	s0,sp,48
80001dec:	fca42e23          	sw	a0,-36(s0)
80001df0:	fcb42c23          	sw	a1,-40(s0)
80001df4:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:26
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
80001df8:	fdc42703          	lw	a4,-36(s0)
80001dfc:	fd442783          	lw	a5,-44(s0)
80001e00:	00f767b3          	or	a5,a4,a5
80001e04:	0037f793          	andi	a5,a5,3
80001e08:	06079863          	bnez	a5,80001e78 <memset+0x98>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:27
    uintptr_t word = byte & 0xFF;
80001e0c:	fd842783          	lw	a5,-40(s0)
80001e10:	0ff7f793          	andi	a5,a5,255
80001e14:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:28
    word |= word << 8;
80001e18:	fe442783          	lw	a5,-28(s0)
80001e1c:	00879793          	slli	a5,a5,0x8
80001e20:	fe442703          	lw	a4,-28(s0)
80001e24:	00f767b3          	or	a5,a4,a5
80001e28:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:29
    word |= word << 16;
80001e2c:	fe442783          	lw	a5,-28(s0)
80001e30:	01079793          	slli	a5,a5,0x10
80001e34:	fe442703          	lw	a4,-28(s0)
80001e38:	00f767b3          	or	a5,a4,a5
80001e3c:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:32
    word |= word << 16 << 16;

    uintptr_t *d = dest;
80001e40:	fdc42783          	lw	a5,-36(s0)
80001e44:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001e48:	0180006f          	j	80001e60 <memset+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:34
      *d++ = word;
80001e4c:	fec42783          	lw	a5,-20(s0)
80001e50:	00478713          	addi	a4,a5,4
80001e54:	fee42623          	sw	a4,-20(s0)
80001e58:	fe442703          	lw	a4,-28(s0)
80001e5c:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001e60:	fdc42703          	lw	a4,-36(s0)
80001e64:	fd442783          	lw	a5,-44(s0)
80001e68:	00f707b3          	add	a5,a4,a5
80001e6c:	fec42703          	lw	a4,-20(s0)
80001e70:	fcf76ee3          	bltu	a4,a5,80001e4c <memset+0x6c>
80001e74:	0400006f          	j	80001eb4 <memset+0xd4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:36
  } else {
    char *d = dest;
80001e78:	fdc42783          	lw	a5,-36(s0)
80001e7c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001e80:	0200006f          	j	80001ea0 <memset+0xc0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:38
      *d++ = byte;
80001e84:	fe842783          	lw	a5,-24(s0)
80001e88:	00178713          	addi	a4,a5,1
80001e8c:	fee42423          	sw	a4,-24(s0)
80001e90:	fd842703          	lw	a4,-40(s0)
80001e94:	01871713          	slli	a4,a4,0x18
80001e98:	41875713          	srai	a4,a4,0x18
80001e9c:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001ea0:	fdc42703          	lw	a4,-36(s0)
80001ea4:	fd442783          	lw	a5,-44(s0)
80001ea8:	00f707b3          	add	a5,a4,a5
80001eac:	fe842703          	lw	a4,-24(s0)
80001eb0:	fcf76ae3          	bltu	a4,a5,80001e84 <memset+0xa4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:40
  }
  return dest;
80001eb4:	fdc42783          	lw	a5,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:41
}
80001eb8:	00078513          	mv	a0,a5
80001ebc:	02c12403          	lw	s0,44(sp)
80001ec0:	03010113          	addi	sp,sp,48
80001ec4:	00008067          	ret

80001ec8 <strlen>:
strlen():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:44

size_t strlen(const char *s)
{
80001ec8:	fd010113          	addi	sp,sp,-48
80001ecc:	02812623          	sw	s0,44(sp)
80001ed0:	03010413          	addi	s0,sp,48
80001ed4:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:45
  const char *p = s;
80001ed8:	fdc42783          	lw	a5,-36(s0)
80001edc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001ee0:	0100006f          	j	80001ef0 <strlen+0x28>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:47
    p++;
80001ee4:	fec42783          	lw	a5,-20(s0)
80001ee8:	00178793          	addi	a5,a5,1
80001eec:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001ef0:	fec42783          	lw	a5,-20(s0)
80001ef4:	00078783          	lb	a5,0(a5)
80001ef8:	fe0796e3          	bnez	a5,80001ee4 <strlen+0x1c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:48
  return p - s;
80001efc:	fec42703          	lw	a4,-20(s0)
80001f00:	fdc42783          	lw	a5,-36(s0)
80001f04:	40f707b3          	sub	a5,a4,a5
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:49
}
80001f08:	00078513          	mv	a0,a5
80001f0c:	02c12403          	lw	s0,44(sp)
80001f10:	03010113          	addi	sp,sp,48
80001f14:	00008067          	ret

80001f18 <xTaskGenericCreate>:
xTaskGenericCreate():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:551

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80001f18:	fc010113          	addi	sp,sp,-64
80001f1c:	02112e23          	sw	ra,60(sp)
80001f20:	02812c23          	sw	s0,56(sp)
80001f24:	04010413          	addi	s0,sp,64
80001f28:	fca42e23          	sw	a0,-36(s0)
80001f2c:	fcb42c23          	sw	a1,-40(s0)
80001f30:	fcd42823          	sw	a3,-48(s0)
80001f34:	fce42623          	sw	a4,-52(s0)
80001f38:	fcf42423          	sw	a5,-56(s0)
80001f3c:	fd042223          	sw	a6,-60(s0)
80001f40:	fd142023          	sw	a7,-64(s0)
80001f44:	00060793          	mv	a5,a2
80001f48:	fcf41b23          	sh	a5,-42(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:556
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
80001f4c:	fdc42783          	lw	a5,-36(s0)
80001f50:	00079663          	bnez	a5,80001f5c <xTaskGenericCreate+0x44>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:556 (discriminator 1)
80001f54:	30047073          	csrci	mstatus,8
80001f58:	0000006f          	j	80001f58 <xTaskGenericCreate+0x40>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:557
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
80001f5c:	fcc42703          	lw	a4,-52(s0)
80001f60:	00400793          	li	a5,4
80001f64:	00e7f663          	bleu	a4,a5,80001f70 <xTaskGenericCreate+0x58>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 1)
80001f68:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 2)
80001f6c:	0000006f          	j	80001f6c <xTaskGenericCreate+0x54>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:561

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
80001f70:	fd645783          	lhu	a5,-42(s0)
80001f74:	fc442583          	lw	a1,-60(s0)
80001f78:	00078513          	mv	a0,a5
80001f7c:	395000ef          	jal	ra,80002b10 <prvAllocateTCBAndStack>
80001f80:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:562
	if( pxNewTCB != NULL )
80001f84:	fe842783          	lw	a5,-24(s0)
80001f88:	16078263          	beqz	a5,800020ec <xTaskGenericCreate+0x1d4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:598
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
80001f8c:	fe842783          	lw	a5,-24(s0)
80001f90:	0307a703          	lw	a4,48(a5)
80001f94:	fd645683          	lhu	a3,-42(s0)
80001f98:	400007b7          	lui	a5,0x40000
80001f9c:	fff78793          	addi	a5,a5,-1 # 3fffffff <RAM_SIZE+0x3ff7ffff>
80001fa0:	00f687b3          	add	a5,a3,a5
80001fa4:	00279793          	slli	a5,a5,0x2
80001fa8:	00f707b3          	add	a5,a4,a5
80001fac:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:599
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
80001fb0:	fe442783          	lw	a5,-28(s0)
80001fb4:	ffc7f793          	andi	a5,a5,-4
80001fb8:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:602

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
80001fbc:	fe442783          	lw	a5,-28(s0)
80001fc0:	0037f793          	andi	a5,a5,3
80001fc4:	00078663          	beqz	a5,80001fd0 <xTaskGenericCreate+0xb8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 1)
80001fc8:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 3)
80001fcc:	0000006f          	j	80001fcc <xTaskGenericCreate+0xb4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:619
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
80001fd0:	fd645783          	lhu	a5,-42(s0)
80001fd4:	00078713          	mv	a4,a5
80001fd8:	fc042683          	lw	a3,-64(s0)
80001fdc:	fcc42603          	lw	a2,-52(s0)
80001fe0:	fd842583          	lw	a1,-40(s0)
80001fe4:	fe842503          	lw	a0,-24(s0)
80001fe8:	009000ef          	jal	ra,800027f0 <prvInitialiseTCBVariables>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:631
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
80001fec:	fd042603          	lw	a2,-48(s0)
80001ff0:	fdc42583          	lw	a1,-36(s0)
80001ff4:	fe442503          	lw	a0,-28(s0)
80001ff8:	891ff0ef          	jal	ra,80001888 <pxPortInitialiseStack>
80001ffc:	00050713          	mv	a4,a0
80002000:	fe842783          	lw	a5,-24(s0)
80002004:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:635
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
80002008:	fc842783          	lw	a5,-56(s0)
8000200c:	00078863          	beqz	a5,8000201c <xTaskGenericCreate+0x104>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:640
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
80002010:	fc842783          	lw	a5,-56(s0)
80002014:	fe842703          	lw	a4,-24(s0)
80002018:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:649
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
8000201c:	e34ff0ef          	jal	ra,80001650 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:651
		{
			uxCurrentNumberOfTasks++;
80002020:	93c1a783          	lw	a5,-1732(gp) # 8000811c <uxCurrentNumberOfTasks>
80002024:	00178713          	addi	a4,a5,1
80002028:	92e1ae23          	sw	a4,-1732(gp) # 8000811c <uxCurrentNumberOfTasks>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:652
			if( pxCurrentTCB == NULL )
8000202c:	92c1a783          	lw	a5,-1748(gp) # 8000810c <pxCurrentTCB>
80002030:	02079063          	bnez	a5,80002050 <xTaskGenericCreate+0x138>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:656
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
80002034:	fe842703          	lw	a4,-24(s0)
80002038:	92e1a623          	sw	a4,-1748(gp) # 8000810c <pxCurrentTCB>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:658

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
8000203c:	93c1a703          	lw	a4,-1732(gp) # 8000811c <uxCurrentNumberOfTasks>
80002040:	00100793          	li	a5,1
80002044:	02f71663          	bne	a4,a5,80002070 <xTaskGenericCreate+0x158>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:663
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
80002048:	0e1000ef          	jal	ra,80002928 <prvInitialiseTaskLists>
8000204c:	0240006f          	j	80002070 <xTaskGenericCreate+0x158>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:675
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
80002050:	9481a783          	lw	a5,-1720(gp) # 80008128 <xSchedulerRunning>
80002054:	00079e63          	bnez	a5,80002070 <xTaskGenericCreate+0x158>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:677
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
80002058:	92c1a783          	lw	a5,-1748(gp) # 8000810c <pxCurrentTCB>
8000205c:	02c7a783          	lw	a5,44(a5)
80002060:	fcc42703          	lw	a4,-52(s0)
80002064:	00f76663          	bltu	a4,a5,80002070 <xTaskGenericCreate+0x158>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:679
					{
						pxCurrentTCB = pxNewTCB;
80002068:	fe842703          	lw	a4,-24(s0)
8000206c:	92e1a623          	sw	a4,-1748(gp) # 8000810c <pxCurrentTCB>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:692
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
80002070:	9581a783          	lw	a5,-1704(gp) # 80008138 <uxTaskNumber>
80002074:	00178713          	addi	a4,a5,1
80002078:	94e1ac23          	sw	a4,-1704(gp) # 80008138 <uxTaskNumber>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:697

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
8000207c:	9581a703          	lw	a4,-1704(gp) # 80008138 <uxTaskNumber>
80002080:	fe842783          	lw	a5,-24(s0)
80002084:	04e7a423          	sw	a4,72(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:702
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
80002088:	fe842783          	lw	a5,-24(s0)
8000208c:	02c7a703          	lw	a4,44(a5)
80002090:	9441a783          	lw	a5,-1724(gp) # 80008124 <uxTopReadyPriority>
80002094:	00e7f863          	bleu	a4,a5,800020a4 <xTaskGenericCreate+0x18c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 1)
80002098:	fe842783          	lw	a5,-24(s0)
8000209c:	02c7a703          	lw	a4,44(a5)
800020a0:	94e1a223          	sw	a4,-1724(gp) # 80008124 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 3)
800020a4:	fe842783          	lw	a5,-24(s0)
800020a8:	02c7a703          	lw	a4,44(a5)
800020ac:	00070793          	mv	a5,a4
800020b0:	00279793          	slli	a5,a5,0x2
800020b4:	00e787b3          	add	a5,a5,a4
800020b8:	00279793          	slli	a5,a5,0x2
800020bc:	80021737          	lui	a4,0x80021
800020c0:	15070713          	addi	a4,a4,336 # 80021150 <__stack_top+0xfffde950>
800020c4:	00e78733          	add	a4,a5,a4
800020c8:	fe842783          	lw	a5,-24(s0)
800020cc:	00478793          	addi	a5,a5,4
800020d0:	00078593          	mv	a1,a5
800020d4:	00070513          	mv	a0,a4
800020d8:	b15ff0ef          	jal	ra,80001bec <vListInsertEnd>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:704 (discriminator 3)

			xReturn = pdPASS;
800020dc:	00100793          	li	a5,1
800020e0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:707 (discriminator 3)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
800020e4:	da0ff0ef          	jal	ra,80001684 <vPortExitCritical>
800020e8:	00c0006f          	j	800020f4 <xTaskGenericCreate+0x1dc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:711
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
800020ec:	fff00793          	li	a5,-1
800020f0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:715
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
800020f4:	fec42703          	lw	a4,-20(s0)
800020f8:	00100793          	li	a5,1
800020fc:	02f71063          	bne	a4,a5,8000211c <xTaskGenericCreate+0x204>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:717
	{
		if( xSchedulerRunning != pdFALSE )
80002100:	9481a783          	lw	a5,-1720(gp) # 80008128 <xSchedulerRunning>
80002104:	00078c63          	beqz	a5,8000211c <xTaskGenericCreate+0x204>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:721
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
80002108:	92c1a783          	lw	a5,-1748(gp) # 8000810c <pxCurrentTCB>
8000210c:	02c7a783          	lw	a5,44(a5)
80002110:	fcc42703          	lw	a4,-52(s0)
80002114:	00e7f463          	bleu	a4,a5,8000211c <xTaskGenericCreate+0x204>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:723
			{
				taskYIELD_IF_USING_PREEMPTION();
80002118:	a21ff0ef          	jal	ra,80001b38 <vPortYield>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:736
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
8000211c:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:737
}
80002120:	00078513          	mv	a0,a5
80002124:	03c12083          	lw	ra,60(sp)
80002128:	03812403          	lw	s0,56(sp)
8000212c:	04010113          	addi	sp,sp,64
80002130:	00008067          	ret

80002134 <vTaskDelete>:
vTaskDelete():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:743
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
80002134:	fd010113          	addi	sp,sp,-48
80002138:	02112623          	sw	ra,44(sp)
8000213c:	02812423          	sw	s0,40(sp)
80002140:	03010413          	addi	s0,sp,48
80002144:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:746
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
80002148:	d08ff0ef          	jal	ra,80001650 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:750
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
8000214c:	fdc42783          	lw	a5,-36(s0)
80002150:	00079663          	bnez	a5,8000215c <vTaskDelete+0x28>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 1)
80002154:	92c1a783          	lw	a5,-1748(gp) # 8000810c <pxCurrentTCB>
80002158:	0080006f          	j	80002160 <vTaskDelete+0x2c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 2)
8000215c:	fdc42783          	lw	a5,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 4)
80002160:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:756 (discriminator 4)

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80002164:	fec42783          	lw	a5,-20(s0)
80002168:	00478793          	addi	a5,a5,4
8000216c:	00078513          	mv	a0,a5
80002170:	bd9ff0ef          	jal	ra,80001d48 <uxListRemove>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:766 (discriminator 4)
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
80002174:	fec42783          	lw	a5,-20(s0)
80002178:	0287a783          	lw	a5,40(a5)
8000217c:	00078a63          	beqz	a5,80002190 <vTaskDelete+0x5c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:768
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002180:	fec42783          	lw	a5,-20(s0)
80002184:	01878793          	addi	a5,a5,24
80002188:	00078513          	mv	a0,a5
8000218c:	bbdff0ef          	jal	ra,80001d48 <uxListRemove>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:775
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
80002190:	fec42783          	lw	a5,-20(s0)
80002194:	00478793          	addi	a5,a5,4
80002198:	00078593          	mv	a1,a5
8000219c:	800217b7          	lui	a5,0x80021
800021a0:	1f078513          	addi	a0,a5,496 # 800211f0 <__stack_top+0xfffde9f0>
800021a4:	a49ff0ef          	jal	ra,80001bec <vListInsertEnd>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:780

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
800021a8:	9381a783          	lw	a5,-1736(gp) # 80008118 <uxTasksDeleted>
800021ac:	00178713          	addi	a4,a5,1
800021b0:	92e1ac23          	sw	a4,-1736(gp) # 80008118 <uxTasksDeleted>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:784

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
800021b4:	9581a783          	lw	a5,-1704(gp) # 80008138 <uxTaskNumber>
800021b8:	00178713          	addi	a4,a5,1
800021bc:	94e1ac23          	sw	a4,-1704(gp) # 80008138 <uxTaskNumber>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:788

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
800021c0:	cc4ff0ef          	jal	ra,80001684 <vPortExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:792

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
800021c4:	9481a783          	lw	a5,-1720(gp) # 80008128 <xSchedulerRunning>
800021c8:	02078a63          	beqz	a5,800021fc <vTaskDelete+0xc8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:794
		{
			if( pxTCB == pxCurrentTCB )
800021cc:	92c1a783          	lw	a5,-1748(gp) # 8000810c <pxCurrentTCB>
800021d0:	fec42703          	lw	a4,-20(s0)
800021d4:	00f71e63          	bne	a4,a5,800021f0 <vTaskDelete+0xbc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:796
			{
				configASSERT( uxSchedulerSuspended == 0 );
800021d8:	9601a783          	lw	a5,-1696(gp) # 80008140 <uxSchedulerSuspended>
800021dc:	00078663          	beqz	a5,800021e8 <vTaskDelete+0xb4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:796 (discriminator 1)
800021e0:	30047073          	csrci	mstatus,8
800021e4:	0000006f          	j	800021e4 <vTaskDelete+0xb0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:804
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
800021e8:	951ff0ef          	jal	ra,80001b38 <vPortYield>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:817
					prvResetNextTaskUnblockTime();
				}
				taskEXIT_CRITICAL();
			}
		}
	}
800021ec:	0100006f          	j	800021fc <vTaskDelete+0xc8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:810
				taskENTER_CRITICAL();
800021f0:	c60ff0ef          	jal	ra,80001650 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:812
					prvResetNextTaskUnblockTime();
800021f4:	21d000ef          	jal	ra,80002c10 <prvResetNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:814
				taskEXIT_CRITICAL();
800021f8:	c8cff0ef          	jal	ra,80001684 <vPortExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:817
	}
800021fc:	00000013          	nop
80002200:	02c12083          	lw	ra,44(sp)
80002204:	02812403          	lw	s0,40(sp)
80002208:	03010113          	addi	sp,sp,48
8000220c:	00008067          	ret

80002210 <vTaskDelay>:
vTaskDelay():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:921
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
80002210:	fd010113          	addi	sp,sp,-48
80002214:	02112623          	sw	ra,44(sp)
80002218:	02812423          	sw	s0,40(sp)
8000221c:	03010413          	addi	s0,sp,48
80002220:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:923
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
80002224:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:927


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
80002228:	fdc42783          	lw	a5,-36(s0)
8000222c:	04078463          	beqz	a5,80002274 <vTaskDelay+0x64>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:929
		{
			configASSERT( uxSchedulerSuspended == 0 );
80002230:	9601a783          	lw	a5,-1696(gp) # 80008140 <uxSchedulerSuspended>
80002234:	00078663          	beqz	a5,80002240 <vTaskDelay+0x30>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:929 (discriminator 1)
80002238:	30047073          	csrci	mstatus,8
8000223c:	0000006f          	j	8000223c <vTaskDelay+0x2c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:930
			vTaskSuspendAll();
80002240:	0e4000ef          	jal	ra,80002324 <vTaskSuspendAll>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:944
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
80002244:	9401a783          	lw	a5,-1728(gp) # 80008120 <xTickCount>
80002248:	fdc42703          	lw	a4,-36(s0)
8000224c:	00f707b3          	add	a5,a4,a5
80002250:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:949

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80002254:	92c1a783          	lw	a5,-1748(gp) # 8000810c <pxCurrentTCB>
80002258:	00478793          	addi	a5,a5,4
8000225c:	00078513          	mv	a0,a5
80002260:	ae9ff0ef          	jal	ra,80001d48 <uxListRemove>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:960
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
80002264:	fe842503          	lw	a0,-24(s0)
80002268:	021000ef          	jal	ra,80002a88 <prvAddCurrentTaskToDelayedList>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:962
			}
			xAlreadyYielded = xTaskResumeAll();
8000226c:	0e0000ef          	jal	ra,8000234c <xTaskResumeAll>
80002270:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:971
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
80002274:	fec42783          	lw	a5,-20(s0)
80002278:	00079463          	bnez	a5,80002280 <vTaskDelay+0x70>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:973
		{
			portYIELD_WITHIN_API();
8000227c:	8bdff0ef          	jal	ra,80001b38 <vPortYield>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:979
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80002280:	00000013          	nop
80002284:	02c12083          	lw	ra,44(sp)
80002288:	02812403          	lw	s0,40(sp)
8000228c:	03010113          	addi	sp,sp,48
80002290:	00008067          	ret

80002294 <vTaskStartScheduler>:
vTaskStartScheduler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1542

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
80002294:	fe010113          	addi	sp,sp,-32
80002298:	00112e23          	sw	ra,28(sp)
8000229c:	00812c23          	sw	s0,24(sp)
800022a0:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1555
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
800022a4:	00000893          	li	a7,0
800022a8:	00000813          	li	a6,0
800022ac:	00000793          	li	a5,0
800022b0:	00000713          	li	a4,0
800022b4:	00000693          	li	a3,0
800022b8:	40000613          	li	a2,1024
800022bc:	800085b7          	lui	a1,0x80008
800022c0:	81858593          	addi	a1,a1,-2024 # 80007818 <__stack_top+0xfffc5018>
800022c4:	80002537          	lui	a0,0x80002
800022c8:	7bc50513          	addi	a0,a0,1980 # 800027bc <__stack_top+0xfffbffbc>
800022cc:	c4dff0ef          	jal	ra,80001f18 <xTaskGenericCreate>
800022d0:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1572
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
800022d4:	fec42703          	lw	a4,-20(s0)
800022d8:	00100793          	li	a5,1
800022dc:	02f71263          	bne	a4,a5,80002300 <vTaskStartScheduler+0x6c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1579
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
800022e0:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1589
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
800022e4:	fff00713          	li	a4,-1
800022e8:	94e1ae23          	sw	a4,-1700(gp) # 8000813c <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1590
		xSchedulerRunning = pdTRUE;
800022ec:	00100713          	li	a4,1
800022f0:	94e1a423          	sw	a4,-1720(gp) # 80008128 <xSchedulerRunning>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1591
		xTickCount = ( TickType_t ) 0U;
800022f4:	9401a023          	sw	zero,-1728(gp) # 80008120 <xTickCount>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1600
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
800022f8:	f08ff0ef          	jal	ra,80001a00 <xPortStartScheduler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
800022fc:	0140006f          	j	80002310 <vTaskStartScheduler+0x7c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615
		configASSERT( xReturn );
80002300:	fec42783          	lw	a5,-20(s0)
80002304:	00079663          	bnez	a5,80002310 <vTaskStartScheduler+0x7c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 1)
80002308:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 2)
8000230c:	0000006f          	j	8000230c <vTaskStartScheduler+0x78>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
}
80002310:	00000013          	nop
80002314:	01c12083          	lw	ra,28(sp)
80002318:	01812403          	lw	s0,24(sp)
8000231c:	02010113          	addi	sp,sp,32
80002320:	00008067          	ret

80002324 <vTaskSuspendAll>:
vTaskSuspendAll():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1632
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
80002324:	ff010113          	addi	sp,sp,-16
80002328:	00812623          	sw	s0,12(sp)
8000232c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1637
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
80002330:	9601a783          	lw	a5,-1696(gp) # 80008140 <uxSchedulerSuspended>
80002334:	00178713          	addi	a4,a5,1
80002338:	96e1a023          	sw	a4,-1696(gp) # 80008140 <uxSchedulerSuspended>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1638
}
8000233c:	00000013          	nop
80002340:	00c12403          	lw	s0,12(sp)
80002344:	01010113          	addi	sp,sp,16
80002348:	00008067          	ret

8000234c <xTaskResumeAll>:
xTaskResumeAll():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1670

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
8000234c:	fe010113          	addi	sp,sp,-32
80002350:	00112e23          	sw	ra,28(sp)
80002354:	00812c23          	sw	s0,24(sp)
80002358:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1672
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
8000235c:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
80002360:	9601a783          	lw	a5,-1696(gp) # 80008140 <uxSchedulerSuspended>
80002364:	00079663          	bnez	a5,80002370 <xTaskResumeAll+0x24>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676 (discriminator 1)
80002368:	30047073          	csrci	mstatus,8
8000236c:	0000006f          	j	8000236c <xTaskResumeAll+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1683
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
80002370:	ae0ff0ef          	jal	ra,80001650 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1685
	{
		--uxSchedulerSuspended;
80002374:	9601a783          	lw	a5,-1696(gp) # 80008140 <uxSchedulerSuspended>
80002378:	fff78713          	addi	a4,a5,-1
8000237c:	96e1a023          	sw	a4,-1696(gp) # 80008140 <uxSchedulerSuspended>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1687

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80002380:	9601a783          	lw	a5,-1696(gp) # 80008140 <uxSchedulerSuspended>
80002384:	10079663          	bnez	a5,80002490 <xTaskResumeAll+0x144>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1689
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
80002388:	93c1a783          	lw	a5,-1732(gp) # 8000811c <uxCurrentNumberOfTasks>
8000238c:	10078263          	beqz	a5,80002490 <xTaskResumeAll+0x144>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
80002390:	0a80006f          	j	80002438 <xTaskResumeAll+0xec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1695
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
80002394:	800217b7          	lui	a5,0x80021
80002398:	1dc78793          	addi	a5,a5,476 # 800211dc <__stack_top+0xfffde9dc>
8000239c:	00c7a783          	lw	a5,12(a5)
800023a0:	00c7a783          	lw	a5,12(a5)
800023a4:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1696
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
800023a8:	fe842783          	lw	a5,-24(s0)
800023ac:	01878793          	addi	a5,a5,24
800023b0:	00078513          	mv	a0,a5
800023b4:	995ff0ef          	jal	ra,80001d48 <uxListRemove>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1697
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
800023b8:	fe842783          	lw	a5,-24(s0)
800023bc:	00478793          	addi	a5,a5,4
800023c0:	00078513          	mv	a0,a5
800023c4:	985ff0ef          	jal	ra,80001d48 <uxListRemove>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698
					prvAddTaskToReadyList( pxTCB );
800023c8:	fe842783          	lw	a5,-24(s0)
800023cc:	02c7a703          	lw	a4,44(a5)
800023d0:	9441a783          	lw	a5,-1724(gp) # 80008124 <uxTopReadyPriority>
800023d4:	00e7f863          	bleu	a4,a5,800023e4 <xTaskResumeAll+0x98>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 1)
800023d8:	fe842783          	lw	a5,-24(s0)
800023dc:	02c7a703          	lw	a4,44(a5)
800023e0:	94e1a223          	sw	a4,-1724(gp) # 80008124 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 3)
800023e4:	fe842783          	lw	a5,-24(s0)
800023e8:	02c7a703          	lw	a4,44(a5)
800023ec:	00070793          	mv	a5,a4
800023f0:	00279793          	slli	a5,a5,0x2
800023f4:	00e787b3          	add	a5,a5,a4
800023f8:	00279793          	slli	a5,a5,0x2
800023fc:	80021737          	lui	a4,0x80021
80002400:	15070713          	addi	a4,a4,336 # 80021150 <__stack_top+0xfffde950>
80002404:	00e78733          	add	a4,a5,a4
80002408:	fe842783          	lw	a5,-24(s0)
8000240c:	00478793          	addi	a5,a5,4
80002410:	00078593          	mv	a1,a5
80002414:	00070513          	mv	a0,a4
80002418:	fd4ff0ef          	jal	ra,80001bec <vListInsertEnd>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1702 (discriminator 3)

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
8000241c:	fe842783          	lw	a5,-24(s0)
80002420:	02c7a703          	lw	a4,44(a5)
80002424:	92c1a783          	lw	a5,-1748(gp) # 8000810c <pxCurrentTCB>
80002428:	02c7a783          	lw	a5,44(a5)
8000242c:	00f76663          	bltu	a4,a5,80002438 <xTaskResumeAll+0xec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1704
					{
						xYieldPending = pdTRUE;
80002430:	00100713          	li	a4,1
80002434:	94e1a823          	sw	a4,-1712(gp) # 80008130 <xYieldPending>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
80002438:	800217b7          	lui	a5,0x80021
8000243c:	1dc7a783          	lw	a5,476(a5) # 800211dc <__stack_top+0xfffde9dc>
80002440:	f4079ae3          	bnez	a5,80002394 <xTaskResumeAll+0x48>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1716

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
80002444:	94c1a783          	lw	a5,-1716(gp) # 8000812c <uxPendedTicks>
80002448:	02078863          	beqz	a5,80002478 <xTaskResumeAll+0x12c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
8000244c:	0240006f          	j	80002470 <xTaskResumeAll+0x124>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1720
					{
						if( xTaskIncrementTick() != pdFALSE )
80002450:	094000ef          	jal	ra,800024e4 <xTaskIncrementTick>
80002454:	00050793          	mv	a5,a0
80002458:	00078663          	beqz	a5,80002464 <xTaskResumeAll+0x118>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1722
						{
							xYieldPending = pdTRUE;
8000245c:	00100713          	li	a4,1
80002460:	94e1a823          	sw	a4,-1712(gp) # 80008130 <xYieldPending>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1728
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
80002464:	94c1a783          	lw	a5,-1716(gp) # 8000812c <uxPendedTicks>
80002468:	fff78713          	addi	a4,a5,-1
8000246c:	94e1a623          	sw	a4,-1716(gp) # 8000812c <uxPendedTicks>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
					while( uxPendedTicks > ( UBaseType_t ) 0U )
80002470:	94c1a783          	lw	a5,-1716(gp) # 8000812c <uxPendedTicks>
80002474:	fc079ee3          	bnez	a5,80002450 <xTaskResumeAll+0x104>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1736
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
80002478:	9501a703          	lw	a4,-1712(gp) # 80008130 <xYieldPending>
8000247c:	00100793          	li	a5,1
80002480:	00f71863          	bne	a4,a5,80002490 <xTaskResumeAll+0x144>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1740
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
80002484:	00100793          	li	a5,1
80002488:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1743
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
8000248c:	eacff0ef          	jal	ra,80001b38 <vPortYield>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1756
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
80002490:	9f4ff0ef          	jal	ra,80001684 <vPortExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1758

	return xAlreadyYielded;
80002494:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1759
}
80002498:	00078513          	mv	a0,a5
8000249c:	01c12083          	lw	ra,28(sp)
800024a0:	01812403          	lw	s0,24(sp)
800024a4:	02010113          	addi	sp,sp,32
800024a8:	00008067          	ret

800024ac <xTaskGetTickCount>:
xTaskGetTickCount():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1763
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
800024ac:	fe010113          	addi	sp,sp,-32
800024b0:	00112e23          	sw	ra,28(sp)
800024b4:	00812c23          	sw	s0,24(sp)
800024b8:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1767
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
800024bc:	994ff0ef          	jal	ra,80001650 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1769
	{
		xTicks = xTickCount;
800024c0:	9401a783          	lw	a5,-1728(gp) # 80008120 <xTickCount>
800024c4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1771
	}
	portTICK_TYPE_EXIT_CRITICAL();
800024c8:	9bcff0ef          	jal	ra,80001684 <vPortExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1773

	return xTicks;
800024cc:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1774
}
800024d0:	00078513          	mv	a0,a5
800024d4:	01c12083          	lw	ra,28(sp)
800024d8:	01812403          	lw	s0,24(sp)
800024dc:	02010113          	addi	sp,sp,32
800024e0:	00008067          	ret

800024e4 <xTaskIncrementTick>:
xTaskIncrementTick():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1938

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
800024e4:	fd010113          	addi	sp,sp,-48
800024e8:	02112623          	sw	ra,44(sp)
800024ec:	02812423          	sw	s0,40(sp)
800024f0:	03010413          	addi	s0,sp,48
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1941
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
800024f4:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1947

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
800024f8:	9601a783          	lw	a5,-1696(gp) # 80008140 <uxSchedulerSuspended>
800024fc:	1a079063          	bnez	a5,8000269c <xTaskIncrementTick+0x1b8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1951
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
80002500:	9401a783          	lw	a5,-1728(gp) # 80008120 <xTickCount>
80002504:	00178713          	addi	a4,a5,1
80002508:	94e1a023          	sw	a4,-1728(gp) # 80008120 <xTickCount>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1956

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
8000250c:	9401a783          	lw	a5,-1728(gp) # 80008120 <xTickCount>
80002510:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1958

			if( xConstTickCount == ( TickType_t ) 0U )
80002514:	fe842783          	lw	a5,-24(s0)
80002518:	04079063          	bnez	a5,80002558 <xTaskIncrementTick+0x74>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960
			{
				taskSWITCH_DELAYED_LISTS();
8000251c:	9301a783          	lw	a5,-1744(gp) # 80008110 <pxDelayedTaskList>
80002520:	0007a783          	lw	a5,0(a5)
80002524:	00078663          	beqz	a5,80002530 <xTaskIncrementTick+0x4c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 1)
80002528:	30047073          	csrci	mstatus,8
8000252c:	0000006f          	j	8000252c <xTaskIncrementTick+0x48>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 2)
80002530:	9301a783          	lw	a5,-1744(gp) # 80008110 <pxDelayedTaskList>
80002534:	fef42223          	sw	a5,-28(s0)
80002538:	9341a703          	lw	a4,-1740(gp) # 80008114 <pxOverflowDelayedTaskList>
8000253c:	92e1a823          	sw	a4,-1744(gp) # 80008110 <pxDelayedTaskList>
80002540:	fe442703          	lw	a4,-28(s0)
80002544:	92e1aa23          	sw	a4,-1740(gp) # 80008114 <pxOverflowDelayedTaskList>
80002548:	9541a783          	lw	a5,-1708(gp) # 80008134 <xNumOfOverflows>
8000254c:	00178713          	addi	a4,a5,1
80002550:	94e1aa23          	sw	a4,-1708(gp) # 80008134 <xNumOfOverflows>
80002554:	6bc000ef          	jal	ra,80002c10 <prvResetNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1971

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
80002558:	95c1a783          	lw	a5,-1700(gp) # 8000813c <xNextTaskUnblockTime>
8000255c:	fe842703          	lw	a4,-24(s0)
80002560:	10f76063          	bltu	a4,a5,80002660 <xTaskIncrementTick+0x17c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80002564:	9301a783          	lw	a5,-1744(gp) # 80008110 <pxDelayedTaskList>
80002568:	0007a783          	lw	a5,0(a5)
8000256c:	00079663          	bnez	a5,80002578 <xTaskIncrementTick+0x94>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 1)
80002570:	00100793          	li	a5,1
80002574:	0080006f          	j	8000257c <xTaskIncrementTick+0x98>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 2)
80002578:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 4)
8000257c:	00078863          	beqz	a5,8000258c <xTaskIncrementTick+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1982
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
80002580:	fff00713          	li	a4,-1
80002584:	94e1ae23          	sw	a4,-1700(gp) # 8000813c <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1983
						break;
80002588:	0d80006f          	j	80002660 <xTaskIncrementTick+0x17c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1991
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
8000258c:	9301a783          	lw	a5,-1744(gp) # 80008110 <pxDelayedTaskList>
80002590:	00c7a783          	lw	a5,12(a5)
80002594:	00c7a783          	lw	a5,12(a5)
80002598:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1992
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
8000259c:	fe042783          	lw	a5,-32(s0)
800025a0:	0047a783          	lw	a5,4(a5)
800025a4:	fcf42e23          	sw	a5,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1994

						if( xConstTickCount < xItemValue )
800025a8:	fe842703          	lw	a4,-24(s0)
800025ac:	fdc42783          	lw	a5,-36(s0)
800025b0:	00f77863          	bleu	a5,a4,800025c0 <xTaskIncrementTick+0xdc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2001
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
800025b4:	fdc42703          	lw	a4,-36(s0)
800025b8:	94e1ae23          	sw	a4,-1700(gp) # 8000813c <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2002
							break;
800025bc:	0a40006f          	j	80002660 <xTaskIncrementTick+0x17c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2010
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
800025c0:	fe042783          	lw	a5,-32(s0)
800025c4:	00478793          	addi	a5,a5,4
800025c8:	00078513          	mv	a0,a5
800025cc:	f7cff0ef          	jal	ra,80001d48 <uxListRemove>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2014

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
800025d0:	fe042783          	lw	a5,-32(s0)
800025d4:	0287a783          	lw	a5,40(a5)
800025d8:	00078a63          	beqz	a5,800025ec <xTaskIncrementTick+0x108>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2016
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
800025dc:	fe042783          	lw	a5,-32(s0)
800025e0:	01878793          	addi	a5,a5,24
800025e4:	00078513          	mv	a0,a5
800025e8:	f60ff0ef          	jal	ra,80001d48 <uxListRemove>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
800025ec:	fe042783          	lw	a5,-32(s0)
800025f0:	02c7a703          	lw	a4,44(a5)
800025f4:	9441a783          	lw	a5,-1724(gp) # 80008124 <uxTopReadyPriority>
800025f8:	00e7f863          	bleu	a4,a5,80002608 <xTaskIncrementTick+0x124>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 1)
800025fc:	fe042783          	lw	a5,-32(s0)
80002600:	02c7a703          	lw	a4,44(a5)
80002604:	94e1a223          	sw	a4,-1724(gp) # 80008124 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 3)
80002608:	fe042783          	lw	a5,-32(s0)
8000260c:	02c7a703          	lw	a4,44(a5)
80002610:	00070793          	mv	a5,a4
80002614:	00279793          	slli	a5,a5,0x2
80002618:	00e787b3          	add	a5,a5,a4
8000261c:	00279793          	slli	a5,a5,0x2
80002620:	80021737          	lui	a4,0x80021
80002624:	15070713          	addi	a4,a4,336 # 80021150 <__stack_top+0xfffde950>
80002628:	00e78733          	add	a4,a5,a4
8000262c:	fe042783          	lw	a5,-32(s0)
80002630:	00478793          	addi	a5,a5,4
80002634:	00078593          	mv	a1,a5
80002638:	00070513          	mv	a0,a4
8000263c:	db0ff0ef          	jal	ra,80001bec <vListInsertEnd>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2035 (discriminator 3)
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80002640:	fe042783          	lw	a5,-32(s0)
80002644:	02c7a703          	lw	a4,44(a5)
80002648:	92c1a783          	lw	a5,-1748(gp) # 8000810c <pxCurrentTCB>
8000264c:	02c7a783          	lw	a5,44(a5)
80002650:	f0f76ae3          	bltu	a4,a5,80002564 <xTaskIncrementTick+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2037
							{
								xSwitchRequired = pdTRUE;
80002654:	00100793          	li	a5,1
80002658:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
8000265c:	f09ff06f          	j	80002564 <xTaskIncrementTick+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2055
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
80002660:	92c1a783          	lw	a5,-1748(gp) # 8000810c <pxCurrentTCB>
80002664:	02c7a703          	lw	a4,44(a5)
80002668:	800216b7          	lui	a3,0x80021
8000266c:	00070793          	mv	a5,a4
80002670:	00279793          	slli	a5,a5,0x2
80002674:	00e787b3          	add	a5,a5,a4
80002678:	00279793          	slli	a5,a5,0x2
8000267c:	15068713          	addi	a4,a3,336 # 80021150 <__stack_top+0xfffde950>
80002680:	00e787b3          	add	a5,a5,a4
80002684:	0007a703          	lw	a4,0(a5)
80002688:	00100793          	li	a5,1
8000268c:	00e7fe63          	bleu	a4,a5,800026a8 <xTaskIncrementTick+0x1c4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2057
			{
				xSwitchRequired = pdTRUE;
80002690:	00100793          	li	a5,1
80002694:	fef42623          	sw	a5,-20(s0)
80002698:	0100006f          	j	800026a8 <xTaskIncrementTick+0x1c4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2083
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
8000269c:	94c1a783          	lw	a5,-1716(gp) # 8000812c <uxPendedTicks>
800026a0:	00178713          	addi	a4,a5,1
800026a4:	94e1a623          	sw	a4,-1716(gp) # 8000812c <uxPendedTicks>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2096
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
800026a8:	9501a783          	lw	a5,-1712(gp) # 80008130 <xYieldPending>
800026ac:	00078663          	beqz	a5,800026b8 <xTaskIncrementTick+0x1d4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2098
		{
			xSwitchRequired = pdTRUE;
800026b0:	00100793          	li	a5,1
800026b4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2107
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
800026b8:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2108
}
800026bc:	00078513          	mv	a0,a5
800026c0:	02c12083          	lw	ra,44(sp)
800026c4:	02812403          	lw	s0,40(sp)
800026c8:	03010113          	addi	sp,sp,48
800026cc:	00008067          	ret

800026d0 <vTaskSwitchContext>:
vTaskSwitchContext():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2202

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
800026d0:	fe010113          	addi	sp,sp,-32
800026d4:	00812e23          	sw	s0,28(sp)
800026d8:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2203
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
800026dc:	9601a783          	lw	a5,-1696(gp) # 80008140 <uxSchedulerSuspended>
800026e0:	00078863          	beqz	a5,800026f0 <vTaskSwitchContext+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2207
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
800026e4:	00100713          	li	a4,1
800026e8:	94e1a823          	sw	a4,-1712(gp) # 80008130 <xYieldPending>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
800026ec:	0c00006f          	j	800027ac <vTaskSwitchContext+0xdc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2211
		xYieldPending = pdFALSE;
800026f0:	9401a823          	sw	zero,-1712(gp) # 80008130 <xYieldPending>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246
		taskSELECT_HIGHEST_PRIORITY_TASK();
800026f4:	0200006f          	j	80002714 <vTaskSwitchContext+0x44>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 4)
800026f8:	9441a783          	lw	a5,-1724(gp) # 80008124 <uxTopReadyPriority>
800026fc:	00079663          	bnez	a5,80002708 <vTaskSwitchContext+0x38>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 1)
80002700:	30047073          	csrci	mstatus,8
80002704:	0000006f          	j	80002704 <vTaskSwitchContext+0x34>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 2)
80002708:	9441a783          	lw	a5,-1724(gp) # 80008124 <uxTopReadyPriority>
8000270c:	fff78713          	addi	a4,a5,-1
80002710:	94e1a223          	sw	a4,-1724(gp) # 80008124 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 3)
80002714:	9441a703          	lw	a4,-1724(gp) # 80008124 <uxTopReadyPriority>
80002718:	800216b7          	lui	a3,0x80021
8000271c:	00070793          	mv	a5,a4
80002720:	00279793          	slli	a5,a5,0x2
80002724:	00e787b3          	add	a5,a5,a4
80002728:	00279793          	slli	a5,a5,0x2
8000272c:	15068713          	addi	a4,a3,336 # 80021150 <__stack_top+0xfffde950>
80002730:	00e787b3          	add	a5,a5,a4
80002734:	0007a783          	lw	a5,0(a5)
80002738:	fc0780e3          	beqz	a5,800026f8 <vTaskSwitchContext+0x28>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 5)
8000273c:	9441a703          	lw	a4,-1724(gp) # 80008124 <uxTopReadyPriority>
80002740:	00070793          	mv	a5,a4
80002744:	00279793          	slli	a5,a5,0x2
80002748:	00e787b3          	add	a5,a5,a4
8000274c:	00279793          	slli	a5,a5,0x2
80002750:	80021737          	lui	a4,0x80021
80002754:	15070713          	addi	a4,a4,336 # 80021150 <__stack_top+0xfffde950>
80002758:	00e787b3          	add	a5,a5,a4
8000275c:	fef42623          	sw	a5,-20(s0)
80002760:	fec42783          	lw	a5,-20(s0)
80002764:	0047a783          	lw	a5,4(a5)
80002768:	0047a703          	lw	a4,4(a5)
8000276c:	fec42783          	lw	a5,-20(s0)
80002770:	00e7a223          	sw	a4,4(a5)
80002774:	fec42783          	lw	a5,-20(s0)
80002778:	0047a703          	lw	a4,4(a5)
8000277c:	fec42783          	lw	a5,-20(s0)
80002780:	00878793          	addi	a5,a5,8
80002784:	00f71c63          	bne	a4,a5,8000279c <vTaskSwitchContext+0xcc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 6)
80002788:	fec42783          	lw	a5,-20(s0)
8000278c:	0047a783          	lw	a5,4(a5)
80002790:	0047a703          	lw	a4,4(a5)
80002794:	fec42783          	lw	a5,-20(s0)
80002798:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 8)
8000279c:	fec42783          	lw	a5,-20(s0)
800027a0:	0047a783          	lw	a5,4(a5)
800027a4:	00c7a703          	lw	a4,12(a5)
800027a8:	92e1a623          	sw	a4,-1748(gp) # 8000810c <pxCurrentTCB>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
}
800027ac:	00000013          	nop
800027b0:	01c12403          	lw	s0,28(sp)
800027b4:	02010113          	addi	sp,sp,32
800027b8:	00008067          	ret

800027bc <prvIdleTask>:
prvIdleTask():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2689
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
800027bc:	fe010113          	addi	sp,sp,-32
800027c0:	00112e23          	sw	ra,28(sp)
800027c4:	00812c23          	sw	s0,24(sp)
800027c8:	02010413          	addi	s0,sp,32
800027cc:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
800027d0:	218000ef          	jal	ra,800029e8 <prvCheckTasksWaitingTermination>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2719

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
800027d4:	800217b7          	lui	a5,0x80021
800027d8:	1507a703          	lw	a4,336(a5) # 80021150 <__stack_top+0xfffde950>
800027dc:	00100793          	li	a5,1
800027e0:	00e7f463          	bleu	a4,a5,800027e8 <prvIdleTask+0x2c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2721
			{
				taskYIELD();
800027e4:	b54ff0ef          	jal	ra,80001b38 <vPortYield>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2739
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
800027e8:	569040ef          	jal	ra,80007550 <vApplicationIdleHook>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
		prvCheckTasksWaitingTermination();
800027ec:	fe5ff06f          	j	800027d0 <prvIdleTask+0x14>

800027f0 <prvInitialiseTCBVariables>:
prvInitialiseTCBVariables():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2832

#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
800027f0:	fc010113          	addi	sp,sp,-64
800027f4:	02112e23          	sw	ra,60(sp)
800027f8:	02812c23          	sw	s0,56(sp)
800027fc:	04010413          	addi	s0,sp,64
80002800:	fca42e23          	sw	a0,-36(s0)
80002804:	fcb42c23          	sw	a1,-40(s0)
80002808:	fcc42a23          	sw	a2,-44(s0)
8000280c:	fcd42823          	sw	a3,-48(s0)
80002810:	00070793          	mv	a5,a4
80002814:	fcf41723          	sh	a5,-50(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
80002818:	fe042623          	sw	zero,-20(s0)
8000281c:	0440006f          	j	80002860 <prvInitialiseTCBVariables+0x70>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2838
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
80002820:	fd842703          	lw	a4,-40(s0)
80002824:	fec42783          	lw	a5,-20(s0)
80002828:	00f707b3          	add	a5,a4,a5
8000282c:	00078703          	lb	a4,0(a5)
80002830:	fdc42683          	lw	a3,-36(s0)
80002834:	fec42783          	lw	a5,-20(s0)
80002838:	00f687b3          	add	a5,a3,a5
8000283c:	02e78a23          	sb	a4,52(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2843

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
80002840:	fd842703          	lw	a4,-40(s0)
80002844:	fec42783          	lw	a5,-20(s0)
80002848:	00f707b3          	add	a5,a4,a5
8000284c:	00078783          	lb	a5,0(a5)
80002850:	02078063          	beqz	a5,80002870 <prvInitialiseTCBVariables+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 2)
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
80002854:	fec42783          	lw	a5,-20(s0)
80002858:	00178793          	addi	a5,a5,1
8000285c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 1)
80002860:	fec42703          	lw	a4,-20(s0)
80002864:	00f00793          	li	a5,15
80002868:	fae7fce3          	bleu	a4,a5,80002820 <prvInitialiseTCBVariables+0x30>
8000286c:	0080006f          	j	80002874 <prvInitialiseTCBVariables+0x84>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2845
		{
			break;
80002870:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2855
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
80002874:	fdc42783          	lw	a5,-36(s0)
80002878:	040781a3          	sb	zero,67(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2859

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
8000287c:	fd442703          	lw	a4,-44(s0)
80002880:	00400793          	li	a5,4
80002884:	00e7f663          	bleu	a4,a5,80002890 <prvInitialiseTCBVariables+0xa0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2861
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
80002888:	00400793          	li	a5,4
8000288c:	fcf42a23          	sw	a5,-44(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2868
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
80002890:	fdc42783          	lw	a5,-36(s0)
80002894:	fd442703          	lw	a4,-44(s0)
80002898:	02e7a623          	sw	a4,44(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2871
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
8000289c:	fdc42783          	lw	a5,-36(s0)
800028a0:	fd442703          	lw	a4,-44(s0)
800028a4:	04e7a823          	sw	a4,80(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2872
		pxTCB->uxMutexesHeld = 0;
800028a8:	fdc42783          	lw	a5,-36(s0)
800028ac:	0407aa23          	sw	zero,84(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2876
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
800028b0:	fdc42783          	lw	a5,-36(s0)
800028b4:	00478793          	addi	a5,a5,4
800028b8:	00078513          	mv	a0,a5
800028bc:	b08ff0ef          	jal	ra,80001bc4 <vListInitialiseItem>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2877
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
800028c0:	fdc42783          	lw	a5,-36(s0)
800028c4:	01878793          	addi	a5,a5,24
800028c8:	00078513          	mv	a0,a5
800028cc:	af8ff0ef          	jal	ra,80001bc4 <vListInitialiseItem>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2881

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
800028d0:	fdc42783          	lw	a5,-36(s0)
800028d4:	fdc42703          	lw	a4,-36(s0)
800028d8:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2884

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
800028dc:	00500713          	li	a4,5
800028e0:	fd442783          	lw	a5,-44(s0)
800028e4:	40f70733          	sub	a4,a4,a5
800028e8:	fdc42783          	lw	a5,-36(s0)
800028ec:	00e7ac23          	sw	a4,24(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2885
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
800028f0:	fdc42783          	lw	a5,-36(s0)
800028f4:	fdc42703          	lw	a4,-36(s0)
800028f8:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2889

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
800028fc:	fdc42783          	lw	a5,-36(s0)
80002900:	0407a223          	sw	zero,68(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2927
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
80002904:	fdc42783          	lw	a5,-36(s0)
80002908:	0407ac23          	sw	zero,88(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2928
		pxTCB->eNotifyState = eNotWaitingNotification;
8000290c:	fdc42783          	lw	a5,-36(s0)
80002910:	0407ae23          	sw	zero,92(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2938
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
80002914:	00000013          	nop
80002918:	03c12083          	lw	ra,60(sp)
8000291c:	03812403          	lw	s0,56(sp)
80002920:	04010113          	addi	sp,sp,64
80002924:	00008067          	ret

80002928 <prvInitialiseTaskLists>:
prvInitialiseTaskLists():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2997

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
80002928:	fe010113          	addi	sp,sp,-32
8000292c:	00112e23          	sw	ra,28(sp)
80002930:	00812c23          	sw	s0,24(sp)
80002934:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
80002938:	fe042623          	sw	zero,-20(s0)
8000293c:	0380006f          	j	80002974 <prvInitialiseTaskLists+0x4c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3002 (discriminator 3)
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
80002940:	fec42703          	lw	a4,-20(s0)
80002944:	00070793          	mv	a5,a4
80002948:	00279793          	slli	a5,a5,0x2
8000294c:	00e787b3          	add	a5,a5,a4
80002950:	00279793          	slli	a5,a5,0x2
80002954:	80021737          	lui	a4,0x80021
80002958:	15070713          	addi	a4,a4,336 # 80021150 <__stack_top+0xfffde950>
8000295c:	00e787b3          	add	a5,a5,a4
80002960:	00078513          	mv	a0,a5
80002964:	9fcff0ef          	jal	ra,80001b60 <vListInitialise>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 3)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
80002968:	fec42783          	lw	a5,-20(s0)
8000296c:	00178793          	addi	a5,a5,1
80002970:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 1)
80002974:	fec42703          	lw	a4,-20(s0)
80002978:	00400793          	li	a5,4
8000297c:	fce7f2e3          	bleu	a4,a5,80002940 <prvInitialiseTaskLists+0x18>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3005
	}

	vListInitialise( &xDelayedTaskList1 );
80002980:	800217b7          	lui	a5,0x80021
80002984:	1b478513          	addi	a0,a5,436 # 800211b4 <__stack_top+0xfffde9b4>
80002988:	9d8ff0ef          	jal	ra,80001b60 <vListInitialise>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3006
	vListInitialise( &xDelayedTaskList2 );
8000298c:	800217b7          	lui	a5,0x80021
80002990:	1c878513          	addi	a0,a5,456 # 800211c8 <__stack_top+0xfffde9c8>
80002994:	9ccff0ef          	jal	ra,80001b60 <vListInitialise>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3007
	vListInitialise( &xPendingReadyList );
80002998:	800217b7          	lui	a5,0x80021
8000299c:	1dc78513          	addi	a0,a5,476 # 800211dc <__stack_top+0xfffde9dc>
800029a0:	9c0ff0ef          	jal	ra,80001b60 <vListInitialise>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3011

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
800029a4:	800217b7          	lui	a5,0x80021
800029a8:	1f078513          	addi	a0,a5,496 # 800211f0 <__stack_top+0xfffde9f0>
800029ac:	9b4ff0ef          	jal	ra,80001b60 <vListInitialise>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3017
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
800029b0:	800217b7          	lui	a5,0x80021
800029b4:	20478513          	addi	a0,a5,516 # 80021204 <__stack_top+0xfffdea04>
800029b8:	9a8ff0ef          	jal	ra,80001b60 <vListInitialise>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3023
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
800029bc:	80021737          	lui	a4,0x80021
800029c0:	1b470713          	addi	a4,a4,436 # 800211b4 <__stack_top+0xfffde9b4>
800029c4:	92e1a823          	sw	a4,-1744(gp) # 80008110 <pxDelayedTaskList>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3024
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
800029c8:	80021737          	lui	a4,0x80021
800029cc:	1c870713          	addi	a4,a4,456 # 800211c8 <__stack_top+0xfffde9c8>
800029d0:	92e1aa23          	sw	a4,-1740(gp) # 80008114 <pxOverflowDelayedTaskList>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3025
}
800029d4:	00000013          	nop
800029d8:	01c12083          	lw	ra,28(sp)
800029dc:	01812403          	lw	s0,24(sp)
800029e0:	02010113          	addi	sp,sp,32
800029e4:	00008067          	ret

800029e8 <prvCheckTasksWaitingTermination>:
prvCheckTasksWaitingTermination():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3029
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
800029e8:	fe010113          	addi	sp,sp,-32
800029ec:	00112e23          	sw	ra,28(sp)
800029f0:	00812c23          	sw	s0,24(sp)
800029f4:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
800029f8:	0740006f          	j	80002a6c <prvCheckTasksWaitingTermination+0x84>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3038
		{
			vTaskSuspendAll();
800029fc:	929ff0ef          	jal	ra,80002324 <vTaskSuspendAll>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3040
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
80002a00:	800217b7          	lui	a5,0x80021
80002a04:	1f07a783          	lw	a5,496(a5) # 800211f0 <__stack_top+0xfffde9f0>
80002a08:	0017b793          	seqz	a5,a5
80002a0c:	0ff7f793          	andi	a5,a5,255
80002a10:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3042
			}
			( void ) xTaskResumeAll();
80002a14:	939ff0ef          	jal	ra,8000234c <xTaskResumeAll>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3044

			if( xListIsEmpty == pdFALSE )
80002a18:	fec42783          	lw	a5,-20(s0)
80002a1c:	04079863          	bnez	a5,80002a6c <prvCheckTasksWaitingTermination+0x84>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3048
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
80002a20:	c31fe0ef          	jal	ra,80001650 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3050
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
80002a24:	800217b7          	lui	a5,0x80021
80002a28:	1f078793          	addi	a5,a5,496 # 800211f0 <__stack_top+0xfffde9f0>
80002a2c:	00c7a783          	lw	a5,12(a5)
80002a30:	00c7a783          	lw	a5,12(a5)
80002a34:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3051
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80002a38:	fe842783          	lw	a5,-24(s0)
80002a3c:	00478793          	addi	a5,a5,4
80002a40:	00078513          	mv	a0,a5
80002a44:	b04ff0ef          	jal	ra,80001d48 <uxListRemove>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3052
					--uxCurrentNumberOfTasks;
80002a48:	93c1a783          	lw	a5,-1732(gp) # 8000811c <uxCurrentNumberOfTasks>
80002a4c:	fff78713          	addi	a4,a5,-1
80002a50:	92e1ae23          	sw	a4,-1732(gp) # 8000811c <uxCurrentNumberOfTasks>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3053
					--uxTasksDeleted;
80002a54:	9381a783          	lw	a5,-1736(gp) # 80008118 <uxTasksDeleted>
80002a58:	fff78713          	addi	a4,a5,-1
80002a5c:	92e1ac23          	sw	a4,-1736(gp) # 80008118 <uxTasksDeleted>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3055
				}
				taskEXIT_CRITICAL();
80002a60:	c25fe0ef          	jal	ra,80001684 <vPortExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3057

				prvDeleteTCB( pxTCB );
80002a64:	fe842503          	lw	a0,-24(s0)
80002a68:	168000ef          	jal	ra,80002bd0 <prvDeleteTCB>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
80002a6c:	9381a783          	lw	a5,-1736(gp) # 80008118 <uxTasksDeleted>
80002a70:	f80796e3          	bnez	a5,800029fc <prvCheckTasksWaitingTermination+0x14>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3066
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
80002a74:	00000013          	nop
80002a78:	01c12083          	lw	ra,28(sp)
80002a7c:	01812403          	lw	s0,24(sp)
80002a80:	02010113          	addi	sp,sp,32
80002a84:	00008067          	ret

80002a88 <prvAddCurrentTaskToDelayedList>:
prvAddCurrentTaskToDelayedList():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3070
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
80002a88:	fe010113          	addi	sp,sp,-32
80002a8c:	00112e23          	sw	ra,28(sp)
80002a90:	00812c23          	sw	s0,24(sp)
80002a94:	02010413          	addi	s0,sp,32
80002a98:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3072
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
80002a9c:	92c1a783          	lw	a5,-1748(gp) # 8000810c <pxCurrentTCB>
80002aa0:	fec42703          	lw	a4,-20(s0)
80002aa4:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3074

	if( xTimeToWake < xTickCount )
80002aa8:	9401a783          	lw	a5,-1728(gp) # 80008120 <xTickCount>
80002aac:	fec42703          	lw	a4,-20(s0)
80002ab0:	02f77063          	bleu	a5,a4,80002ad0 <prvAddCurrentTaskToDelayedList+0x48>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3077
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80002ab4:	9341a703          	lw	a4,-1740(gp) # 80008114 <pxOverflowDelayedTaskList>
80002ab8:	92c1a783          	lw	a5,-1748(gp) # 8000810c <pxCurrentTCB>
80002abc:	00478793          	addi	a5,a5,4
80002ac0:	00078593          	mv	a1,a5
80002ac4:	00070513          	mv	a0,a4
80002ac8:	9acff0ef          	jal	ra,80001c74 <vListInsert>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
80002acc:	0300006f          	j	80002afc <prvAddCurrentTaskToDelayedList+0x74>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3082
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80002ad0:	9301a703          	lw	a4,-1744(gp) # 80008110 <pxDelayedTaskList>
80002ad4:	92c1a783          	lw	a5,-1748(gp) # 8000810c <pxCurrentTCB>
80002ad8:	00478793          	addi	a5,a5,4
80002adc:	00078593          	mv	a1,a5
80002ae0:	00070513          	mv	a0,a4
80002ae4:	990ff0ef          	jal	ra,80001c74 <vListInsert>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3087
		if( xTimeToWake < xNextTaskUnblockTime )
80002ae8:	95c1a783          	lw	a5,-1700(gp) # 8000813c <xNextTaskUnblockTime>
80002aec:	fec42703          	lw	a4,-20(s0)
80002af0:	00f77663          	bleu	a5,a4,80002afc <prvAddCurrentTaskToDelayedList+0x74>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3089
			xNextTaskUnblockTime = xTimeToWake;
80002af4:	fec42703          	lw	a4,-20(s0)
80002af8:	94e1ae23          	sw	a4,-1700(gp) # 8000813c <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
}
80002afc:	00000013          	nop
80002b00:	01c12083          	lw	ra,28(sp)
80002b04:	01812403          	lw	s0,24(sp)
80002b08:	02010113          	addi	sp,sp,32
80002b0c:	00008067          	ret

80002b10 <prvAllocateTCBAndStack>:
prvAllocateTCBAndStack():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3100
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
80002b10:	fd010113          	addi	sp,sp,-48
80002b14:	02112623          	sw	ra,44(sp)
80002b18:	02812423          	sw	s0,40(sp)
80002b1c:	03010413          	addi	s0,sp,48
80002b20:	00050793          	mv	a5,a0
80002b24:	fcb42c23          	sw	a1,-40(s0)
80002b28:	fcf41f23          	sh	a5,-34(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80002b2c:	fd842783          	lw	a5,-40(s0)
80002b30:	00079e63          	bnez	a5,80002b4c <prvAllocateTCBAndStack+0x3c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 1)
80002b34:	fde45783          	lhu	a5,-34(s0)
80002b38:	00279793          	slli	a5,a5,0x2
80002b3c:	00078513          	mv	a0,a5
80002b40:	fa8fe0ef          	jal	ra,800012e8 <pvPortMalloc>
80002b44:	00050793          	mv	a5,a0
80002b48:	0080006f          	j	80002b50 <prvAllocateTCBAndStack+0x40>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 2)
80002b4c:	fd842783          	lw	a5,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 4)
80002b50:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3134 (discriminator 4)

		if( pxStack != NULL )
80002b54:	fe842783          	lw	a5,-24(s0)
80002b58:	02078a63          	beqz	a5,80002b8c <prvAllocateTCBAndStack+0x7c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3138
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
80002b5c:	06000513          	li	a0,96
80002b60:	f88fe0ef          	jal	ra,800012e8 <pvPortMalloc>
80002b64:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3140

			if( pxNewTCB != NULL )
80002b68:	fec42783          	lw	a5,-20(s0)
80002b6c:	00078a63          	beqz	a5,80002b80 <prvAllocateTCBAndStack+0x70>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3143
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
80002b70:	fec42783          	lw	a5,-20(s0)
80002b74:	fe842703          	lw	a4,-24(s0)
80002b78:	02e7a823          	sw	a4,48(a5)
80002b7c:	0140006f          	j	80002b90 <prvAllocateTCBAndStack+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3149
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
80002b80:	fe842503          	lw	a0,-24(s0)
80002b84:	941fe0ef          	jal	ra,800014c4 <vPortFree>
80002b88:	0080006f          	j	80002b90 <prvAllocateTCBAndStack+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3154
			}
		}
		else
		{
			pxNewTCB = NULL;
80002b8c:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3159
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
80002b90:	fec42783          	lw	a5,-20(s0)
80002b94:	02078263          	beqz	a5,80002bb8 <prvAllocateTCBAndStack+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3165
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
80002b98:	fec42783          	lw	a5,-20(s0)
80002b9c:	0307a703          	lw	a4,48(a5)
80002ba0:	fde45783          	lhu	a5,-34(s0)
80002ba4:	00279793          	slli	a5,a5,0x2
80002ba8:	00078613          	mv	a2,a5
80002bac:	0a500593          	li	a1,165
80002bb0:	00070513          	mv	a0,a4
80002bb4:	a2cff0ef          	jal	ra,80001de0 <memset>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3170
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
80002bb8:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3171
}
80002bbc:	00078513          	mv	a0,a5
80002bc0:	02c12083          	lw	ra,44(sp)
80002bc4:	02812403          	lw	s0,40(sp)
80002bc8:	03010113          	addi	sp,sp,48
80002bcc:	00008067          	ret

80002bd0 <prvDeleteTCB>:
prvDeleteTCB():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3310
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
80002bd0:	fe010113          	addi	sp,sp,-32
80002bd4:	00112e23          	sw	ra,28(sp)
80002bd8:	00812c23          	sw	s0,24(sp)
80002bdc:	02010413          	addi	s0,sp,32
80002be0:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3335
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
80002be4:	fec42783          	lw	a5,-20(s0)
80002be8:	0307a783          	lw	a5,48(a5)
80002bec:	00078513          	mv	a0,a5
80002bf0:	8d5fe0ef          	jal	ra,800014c4 <vPortFree>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3339
		}
		#endif

		vPortFree( pxTCB );
80002bf4:	fec42503          	lw	a0,-20(s0)
80002bf8:	8cdfe0ef          	jal	ra,800014c4 <vPortFree>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3340
	}
80002bfc:	00000013          	nop
80002c00:	01c12083          	lw	ra,28(sp)
80002c04:	01812403          	lw	s0,24(sp)
80002c08:	02010113          	addi	sp,sp,32
80002c0c:	00008067          	ret

80002c10 <prvResetNextTaskUnblockTime>:
prvResetNextTaskUnblockTime():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3346

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
80002c10:	fe010113          	addi	sp,sp,-32
80002c14:	00812e23          	sw	s0,28(sp)
80002c18:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80002c1c:	9301a783          	lw	a5,-1744(gp) # 80008110 <pxDelayedTaskList>
80002c20:	0007a783          	lw	a5,0(a5)
80002c24:	00079663          	bnez	a5,80002c30 <prvResetNextTaskUnblockTime+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 1)
80002c28:	00100793          	li	a5,1
80002c2c:	0080006f          	j	80002c34 <prvResetNextTaskUnblockTime+0x24>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 2)
80002c30:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 4)
80002c34:	00078863          	beqz	a5,80002c44 <prvResetNextTaskUnblockTime+0x34>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3355
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
80002c38:	fff00713          	li	a4,-1
80002c3c:	94e1ae23          	sw	a4,-1700(gp) # 8000813c <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
80002c40:	0200006f          	j	80002c60 <prvResetNextTaskUnblockTime+0x50>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3363
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80002c44:	9301a783          	lw	a5,-1744(gp) # 80008110 <pxDelayedTaskList>
80002c48:	00c7a783          	lw	a5,12(a5)
80002c4c:	00c7a783          	lw	a5,12(a5)
80002c50:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3364
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
80002c54:	fec42783          	lw	a5,-20(s0)
80002c58:	0047a703          	lw	a4,4(a5)
80002c5c:	94e1ae23          	sw	a4,-1700(gp) # 8000813c <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
}
80002c60:	00000013          	nop
80002c64:	01c12403          	lw	s0,28(sp)
80002c68:	02010113          	addi	sp,sp,32
80002c6c:	00008067          	ret

80002c70 <xTaskGetCurrentTaskHandle>:
xTaskGetCurrentTaskHandle():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3372
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
80002c70:	fe010113          	addi	sp,sp,-32
80002c74:	00812e23          	sw	s0,28(sp)
80002c78:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3378
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
80002c7c:	92c1a783          	lw	a5,-1748(gp) # 8000810c <pxCurrentTCB>
80002c80:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3380

		return xReturn;
80002c84:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3381
	}
80002c88:	00078513          	mv	a0,a5
80002c8c:	01c12403          	lw	s0,28(sp)
80002c90:	02010113          	addi	sp,sp,32
80002c94:	00008067          	ret

80002c98 <vTaskEnterCritical>:
vTaskEnterCritical():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3564
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
80002c98:	ff010113          	addi	sp,sp,-16
80002c9c:	00812623          	sw	s0,12(sp)
80002ca0:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3565
		portDISABLE_INTERRUPTS();
80002ca4:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3567

		if( xSchedulerRunning != pdFALSE )
80002ca8:	9481a783          	lw	a5,-1720(gp) # 80008128 <xSchedulerRunning>
80002cac:	00078c63          	beqz	a5,80002cc4 <vTaskEnterCritical+0x2c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3569
		{
			( pxCurrentTCB->uxCriticalNesting )++;
80002cb0:	92c1a783          	lw	a5,-1748(gp) # 8000810c <pxCurrentTCB>
80002cb4:	0447a703          	lw	a4,68(a5)
80002cb8:	00170713          	addi	a4,a4,1
80002cbc:	04e7a223          	sw	a4,68(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3577
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
80002cc0:	92c1a783          	lw	a5,-1748(gp) # 8000810c <pxCurrentTCB>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3586
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80002cc4:	00000013          	nop
80002cc8:	00c12403          	lw	s0,12(sp)
80002ccc:	01010113          	addi	sp,sp,16
80002cd0:	00008067          	ret

80002cd4 <vTaskExitCritical>:
vTaskExitCritical():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3594
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
80002cd4:	ff010113          	addi	sp,sp,-16
80002cd8:	00812623          	sw	s0,12(sp)
80002cdc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3595
		if( xSchedulerRunning != pdFALSE )
80002ce0:	9481a783          	lw	a5,-1720(gp) # 80008128 <xSchedulerRunning>
80002ce4:	02078863          	beqz	a5,80002d14 <vTaskExitCritical+0x40>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3597
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
80002ce8:	92c1a783          	lw	a5,-1748(gp) # 8000810c <pxCurrentTCB>
80002cec:	0447a783          	lw	a5,68(a5)
80002cf0:	02078263          	beqz	a5,80002d14 <vTaskExitCritical+0x40>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3599
			{
				( pxCurrentTCB->uxCriticalNesting )--;
80002cf4:	92c1a783          	lw	a5,-1748(gp) # 8000810c <pxCurrentTCB>
80002cf8:	0447a703          	lw	a4,68(a5)
80002cfc:	fff70713          	addi	a4,a4,-1
80002d00:	04e7a223          	sw	a4,68(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3601

				if( pxCurrentTCB->uxCriticalNesting == 0U )
80002d04:	92c1a783          	lw	a5,-1748(gp) # 8000810c <pxCurrentTCB>
80002d08:	0447a783          	lw	a5,68(a5)
80002d0c:	00079463          	bnez	a5,80002d14 <vTaskExitCritical+0x40>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3603
				{
					portENABLE_INTERRUPTS();
80002d10:	30046073          	csrsi	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3619
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80002d14:	00000013          	nop
80002d18:	00c12403          	lw	s0,12(sp)
80002d1c:	01010113          	addi	sp,sp,16
80002d20:	00008067          	ret

80002d24 <API_RepositoryWakeUp>:
API_RepositoryWakeUp():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:10
#include "packet.h"
#include "services.h"

////////////////////////////////////////////////////////////
// Informs the Repository that the GLOBALMASTER is ready to receive the application info
void API_RepositoryWakeUp(){
80002d24:	fe010113          	addi	sp,sp,-32
80002d28:	00112e23          	sw	ra,28(sp)
80002d2c:	00812c23          	sw	s0,24(sp)
80002d30:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:13
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80002d34:	17c020ef          	jal	ra,80004eb0 <API_GetServiceSlot>
80002d38:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:14
        if(mySlot == PIPE_FULL){
80002d3c:	fec42703          	lw	a4,-20(s0)
80002d40:	fdfe07b7          	lui	a5,0xfdfe0
80002d44:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9d5fd>
80002d48:	00f71463          	bne	a4,a5,80002d50 <API_RepositoryWakeUp+0x2c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:16
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80002d4c:	5ad030ef          	jal	ra,80006af8 <API_NI_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:18
        }
    }while(mySlot == PIPE_FULL);
80002d50:	fec42703          	lw	a4,-20(s0)
80002d54:	fdfe07b7          	lui	a5,0xfdfe0
80002d58:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9d5fd>
80002d5c:	fcf70ce3          	beq	a4,a5,80002d34 <API_RepositoryWakeUp+0x10>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:21
    //printsv("I got a free service slot!! -> ", mySlot);

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80002d60:	800217b7          	lui	a5,0x80021
80002d64:	fec42703          	lw	a4,-20(s0)
80002d68:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
80002d6c:	00070793          	mv	a5,a4
80002d70:	00479793          	slli	a5,a5,0x4
80002d74:	40e787b3          	sub	a5,a5,a4
80002d78:	00279793          	slli	a5,a5,0x2
80002d7c:	00f687b3          	add	a5,a3,a5
80002d80:	feff0737          	lui	a4,0xfeff0
80002d84:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efad6fe>
80002d88:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:23

    ServicePipe[mySlot].header.header       = makeAddress(0, 0) | PERIPH_SOUTH;
80002d8c:	00000593          	li	a1,0
80002d90:	00000513          	li	a0,0
80002d94:	00c030ef          	jal	ra,80005da0 <makeAddress>
80002d98:	00050713          	mv	a4,a0
80002d9c:	000407b7          	lui	a5,0x40
80002da0:	00f766b3          	or	a3,a4,a5
80002da4:	800217b7          	lui	a5,0x80021
80002da8:	fec42703          	lw	a4,-20(s0)
80002dac:	21c78613          	addi	a2,a5,540 # 8002121c <__stack_top+0xfffdea1c>
80002db0:	00070793          	mv	a5,a4
80002db4:	00479793          	slli	a5,a5,0x4
80002db8:	40e787b3          	sub	a5,a5,a4
80002dbc:	00279793          	slli	a5,a5,0x2
80002dc0:	00f607b3          	add	a5,a2,a5
80002dc4:	00d7a423          	sw	a3,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:24
    ServicePipe[mySlot].header.payload_size = PKT_SERVICE_SIZE;
80002dc8:	800217b7          	lui	a5,0x80021
80002dcc:	fec42703          	lw	a4,-20(s0)
80002dd0:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
80002dd4:	00070793          	mv	a5,a4
80002dd8:	00479793          	slli	a5,a5,0x4
80002ddc:	40e787b3          	sub	a5,a5,a4
80002de0:	00279793          	slli	a5,a5,0x2
80002de4:	00f687b3          	add	a5,a3,a5
80002de8:	00b00713          	li	a4,11
80002dec:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:25
    ServicePipe[mySlot].header.service      = REPOSITORY_WAKEUP;
80002df0:	800217b7          	lui	a5,0x80021
80002df4:	fec42703          	lw	a4,-20(s0)
80002df8:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
80002dfc:	00070793          	mv	a5,a4
80002e00:	00479793          	slli	a5,a5,0x4
80002e04:	40e787b3          	sub	a5,a5,a4
80002e08:	00279793          	slli	a5,a5,0x2
80002e0c:	00f687b3          	add	a5,a3,a5
80002e10:	10000713          	li	a4,256
80002e14:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:27

    API_PushSendQueue(SERVICE, mySlot);
80002e18:	fec42583          	lw	a1,-20(s0)
80002e1c:	10100537          	lui	a0,0x10100
80002e20:	7c1020ef          	jal	ra,80005de0 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:28
    return;    
80002e24:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:29
}
80002e28:	01c12083          	lw	ra,28(sp)
80002e2c:	01812403          	lw	s0,24(sp)
80002e30:	02010113          	addi	sp,sp,32
80002e34:	00008067          	ret

80002e38 <API_AddApplication>:
API_AddApplication():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:33

////////////////////////////////////////////////////////////
// Add one Application in the Execution Queue
void API_AddApplication(unsigned int appID, unsigned int appPeriod, unsigned int appExec, unsigned int appNTasks){
80002e38:	fd010113          	addi	sp,sp,-48
80002e3c:	02112623          	sw	ra,44(sp)
80002e40:	02812423          	sw	s0,40(sp)
80002e44:	03010413          	addi	s0,sp,48
80002e48:	fca42e23          	sw	a0,-36(s0)
80002e4c:	fcb42c23          	sw	a1,-40(s0)
80002e50:	fcc42a23          	sw	a2,-44(s0)
80002e54:	fcd42823          	sw	a3,-48(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:34
    int slot = API_GetApplicationFreeSlot();
80002e58:	1c4000ef          	jal	ra,8000301c <API_GetApplicationFreeSlot>
80002e5c:	00050793          	mv	a5,a0
80002e60:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:35
    applications[slot].occupied = TRUE;
80002e64:	800226b7          	lui	a3,0x80022
80002e68:	fec42703          	lw	a4,-20(s0)
80002e6c:	00070793          	mv	a5,a4
80002e70:	00279793          	slli	a5,a5,0x2
80002e74:	00e787b3          	add	a5,a5,a4
80002e78:	00579793          	slli	a5,a5,0x5
80002e7c:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80002e80:	00e787b3          	add	a5,a5,a4
80002e84:	00100713          	li	a4,1
80002e88:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:36
    applications[slot].appID = appID;
80002e8c:	800227b7          	lui	a5,0x80022
80002e90:	fec42703          	lw	a4,-20(s0)
80002e94:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80002e98:	00070793          	mv	a5,a4
80002e9c:	00279793          	slli	a5,a5,0x2
80002ea0:	00e787b3          	add	a5,a5,a4
80002ea4:	00579793          	slli	a5,a5,0x5
80002ea8:	00f687b3          	add	a5,a3,a5
80002eac:	fdc42703          	lw	a4,-36(s0)
80002eb0:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:37
    applications[slot].appPeriod = appPeriod;
80002eb4:	800227b7          	lui	a5,0x80022
80002eb8:	fec42703          	lw	a4,-20(s0)
80002ebc:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80002ec0:	00070793          	mv	a5,a4
80002ec4:	00279793          	slli	a5,a5,0x2
80002ec8:	00e787b3          	add	a5,a5,a4
80002ecc:	00579793          	slli	a5,a5,0x5
80002ed0:	00f687b3          	add	a5,a3,a5
80002ed4:	fd842703          	lw	a4,-40(s0)
80002ed8:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:38
    applications[slot].appExec = appExec;
80002edc:	800227b7          	lui	a5,0x80022
80002ee0:	fec42703          	lw	a4,-20(s0)
80002ee4:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80002ee8:	00070793          	mv	a5,a4
80002eec:	00279793          	slli	a5,a5,0x2
80002ef0:	00e787b3          	add	a5,a5,a4
80002ef4:	00579793          	slli	a5,a5,0x5
80002ef8:	00f687b3          	add	a5,a3,a5
80002efc:	fd442703          	lw	a4,-44(s0)
80002f00:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:39
    applications[slot].numTasks = appNTasks;
80002f04:	800226b7          	lui	a3,0x80022
80002f08:	fec42703          	lw	a4,-20(s0)
80002f0c:	00070793          	mv	a5,a4
80002f10:	00279793          	slli	a5,a5,0x2
80002f14:	00e787b3          	add	a5,a5,a4
80002f18:	00579793          	slli	a5,a5,0x5
80002f1c:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80002f20:	00e787b3          	add	a5,a5,a4
80002f24:	fd042703          	lw	a4,-48(s0)
80002f28:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:40
    applications[slot].nextRun = xTaskGetTickCount() + appPeriod;
80002f2c:	d80ff0ef          	jal	ra,800024ac <xTaskGetTickCount>
80002f30:	00050713          	mv	a4,a0
80002f34:	fd842783          	lw	a5,-40(s0)
80002f38:	00f706b3          	add	a3,a4,a5
80002f3c:	800227b7          	lui	a5,0x80022
80002f40:	fec42703          	lw	a4,-20(s0)
80002f44:	cb878613          	addi	a2,a5,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80002f48:	00070793          	mv	a5,a4
80002f4c:	00279793          	slli	a5,a5,0x2
80002f50:	00e787b3          	add	a5,a5,a4
80002f54:	00579793          	slli	a5,a5,0x5
80002f58:	00f607b3          	add	a5,a2,a5
80002f5c:	08d7a623          	sw	a3,140(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:41
    applications[slot].executed = 0;
80002f60:	800226b7          	lui	a3,0x80022
80002f64:	fec42703          	lw	a4,-20(s0)
80002f68:	00070793          	mv	a5,a4
80002f6c:	00279793          	slli	a5,a5,0x2
80002f70:	00e787b3          	add	a5,a5,a4
80002f74:	00579793          	slli	a5,a5,0x5
80002f78:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80002f7c:	00e787b3          	add	a5,a5,a4
80002f80:	0807a823          	sw	zero,144(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:42
    applications[slot].lastStart = -1;
80002f84:	800227b7          	lui	a5,0x80022
80002f88:	fec42703          	lw	a4,-20(s0)
80002f8c:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80002f90:	00070793          	mv	a5,a4
80002f94:	00279793          	slli	a5,a5,0x2
80002f98:	00e787b3          	add	a5,a5,a4
80002f9c:	00579793          	slli	a5,a5,0x5
80002fa0:	00f687b3          	add	a5,a3,a5
80002fa4:	fff00713          	li	a4,-1
80002fa8:	08e7aa23          	sw	a4,148(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:43
    applications[slot].finishedTasks = 0;
80002fac:	800227b7          	lui	a5,0x80022
80002fb0:	fec42703          	lw	a4,-20(s0)
80002fb4:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80002fb8:	00070793          	mv	a5,a4
80002fbc:	00279793          	slli	a5,a5,0x2
80002fc0:	00e787b3          	add	a5,a5,a4
80002fc4:	00579793          	slli	a5,a5,0x5
80002fc8:	00f687b3          	add	a5,a3,a5
80002fcc:	0807ac23          	sw	zero,152(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:44
    applications[slot].lastFinish = 0;
80002fd0:	800227b7          	lui	a5,0x80022
80002fd4:	fec42703          	lw	a4,-20(s0)
80002fd8:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80002fdc:	00070793          	mv	a5,a4
80002fe0:	00279793          	slli	a5,a5,0x2
80002fe4:	00e787b3          	add	a5,a5,a4
80002fe8:	00579793          	slli	a5,a5,0x5
80002fec:	00f687b3          	add	a5,a3,a5
80002ff0:	0807ae23          	sw	zero,156(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:45
    printsv("New application registered - ID: ", appID);
80002ff4:	fdc42783          	lw	a5,-36(s0)
80002ff8:	00078593          	mv	a1,a5
80002ffc:	800087b7          	lui	a5,0x80008
80003000:	82078513          	addi	a0,a5,-2016 # 80007820 <__stack_top+0xfffc5020>
80003004:	181020ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:46
    return;
80003008:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:47
}
8000300c:	02c12083          	lw	ra,44(sp)
80003010:	02812403          	lw	s0,40(sp)
80003014:	03010113          	addi	sp,sp,48
80003018:	00008067          	ret

8000301c <API_GetApplicationFreeSlot>:
API_GetApplicationFreeSlot():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:65
}


////////////////////////////////////////////////////////////
// Gets an application slot that is free
unsigned int API_GetApplicationFreeSlot(){
8000301c:	fe010113          	addi	sp,sp,-32
80003020:	00112e23          	sw	ra,28(sp)
80003024:	00812c23          	sw	s0,24(sp)
80003028:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:67
    int i;
    for (i = 0; i < NUM_MAX_APPS; i++){
8000302c:	fe042623          	sw	zero,-20(s0)
80003030:	0400006f          	j	80003070 <API_GetApplicationFreeSlot+0x54>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:68
        if (applications[i].occupied == FALSE){
80003034:	800226b7          	lui	a3,0x80022
80003038:	fec42703          	lw	a4,-20(s0)
8000303c:	00070793          	mv	a5,a4
80003040:	00279793          	slli	a5,a5,0x2
80003044:	00e787b3          	add	a5,a5,a4
80003048:	00579793          	slli	a5,a5,0x5
8000304c:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80003050:	00e787b3          	add	a5,a5,a4
80003054:	0007a783          	lw	a5,0(a5)
80003058:	00079663          	bnez	a5,80003064 <API_GetApplicationFreeSlot+0x48>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:69
            return i;
8000305c:	fec42783          	lw	a5,-20(s0)
80003060:	02c0006f          	j	8000308c <API_GetApplicationFreeSlot+0x70>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:67 (discriminator 2)
    for (i = 0; i < NUM_MAX_APPS; i++){
80003064:	fec42783          	lw	a5,-20(s0)
80003068:	00178793          	addi	a5,a5,1
8000306c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:67 (discriminator 1)
80003070:	fec42703          	lw	a4,-20(s0)
80003074:	00b00793          	li	a5,11
80003078:	fae7dee3          	ble	a4,a5,80003034 <API_GetApplicationFreeSlot+0x18>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:72
        }
    }
    prints("returning erro4\n");
8000307c:	800087b7          	lui	a5,0x80008
80003080:	85878513          	addi	a0,a5,-1960 # 80007858 <__stack_top+0xfffc5058>
80003084:	055020ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:73
    return ERRO;
80003088:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:74
}
8000308c:	00078513          	mv	a0,a5
80003090:	01c12083          	lw	ra,28(sp)
80003094:	01812403          	lw	s0,24(sp)
80003098:	02010113          	addi	sp,sp,32
8000309c:	00008067          	ret

800030a0 <API_ApplicationsReset>:
API_ApplicationsReset():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:78

////////////////////////////////////////////////////////////
// Reset applications vector
void API_ApplicationsReset(){
800030a0:	fe010113          	addi	sp,sp,-32
800030a4:	00812e23          	sw	s0,28(sp)
800030a8:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:80
    int i;
    for (i = 0; i < NUM_MAX_APPS; i++){
800030ac:	fe042623          	sw	zero,-20(s0)
800030b0:	0340006f          	j	800030e4 <API_ApplicationsReset+0x44>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:81 (discriminator 3)
        applications[i].occupied = FALSE;
800030b4:	800226b7          	lui	a3,0x80022
800030b8:	fec42703          	lw	a4,-20(s0)
800030bc:	00070793          	mv	a5,a4
800030c0:	00279793          	slli	a5,a5,0x2
800030c4:	00e787b3          	add	a5,a5,a4
800030c8:	00579793          	slli	a5,a5,0x5
800030cc:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
800030d0:	00e787b3          	add	a5,a5,a4
800030d4:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:80 (discriminator 3)
    for (i = 0; i < NUM_MAX_APPS; i++){
800030d8:	fec42783          	lw	a5,-20(s0)
800030dc:	00178793          	addi	a5,a5,1
800030e0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:80 (discriminator 1)
800030e4:	fec42703          	lw	a4,-20(s0)
800030e8:	00b00793          	li	a5,11
800030ec:	fce7d4e3          	ble	a4,a5,800030b4 <API_ApplicationsReset+0x14>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:83
    }
    return;
800030f0:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:84
}
800030f4:	01c12403          	lw	s0,28(sp)
800030f8:	02010113          	addi	sp,sp,32
800030fc:	00008067          	ret

80003100 <API_TilesReset>:
API_TilesReset():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:88

////////////////////////////////////////////////////////////
// Initialize the Tiles Info
void API_TilesReset(){
80003100:	fe010113          	addi	sp,sp,-32
80003104:	00812e23          	sw	s0,28(sp)
80003108:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90
    int i, m, n;
    for (m = 0; m < DIM_X; m++){
8000310c:	fe042623          	sw	zero,-20(s0)
80003110:	0fc0006f          	j	8000320c <API_TilesReset+0x10c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:91
        for (n = 0; n < DIM_Y; n++){
80003114:	fe042423          	sw	zero,-24(s0)
80003118:	0dc0006f          	j	800031f4 <API_TilesReset+0xf4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:92 (discriminator 3)
            Tiles[m][n].temperature = 273;
8000311c:	80022637          	lui	a2,0x80022
80003120:	fe842783          	lw	a5,-24(s0)
80003124:	fec42683          	lw	a3,-20(s0)
80003128:	00078713          	mv	a4,a5
8000312c:	00171713          	slli	a4,a4,0x1
80003130:	00f70733          	add	a4,a4,a5
80003134:	00271793          	slli	a5,a4,0x2
80003138:	00078713          	mv	a4,a5
8000313c:	00068793          	mv	a5,a3
80003140:	00379793          	slli	a5,a5,0x3
80003144:	00d787b3          	add	a5,a5,a3
80003148:	00279793          	slli	a5,a5,0x2
8000314c:	00f70733          	add	a4,a4,a5
80003150:	46460793          	addi	a5,a2,1124 # 80022464 <__stack_top+0xfffdfc64>
80003154:	00f707b3          	add	a5,a4,a5
80003158:	11100713          	li	a4,273
8000315c:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:93 (discriminator 3)
            Tiles[m][n].frequency = 1000;
80003160:	80022737          	lui	a4,0x80022
80003164:	fe842783          	lw	a5,-24(s0)
80003168:	fec42683          	lw	a3,-20(s0)
8000316c:	46470613          	addi	a2,a4,1124 # 80022464 <__stack_top+0xfffdfc64>
80003170:	00078713          	mv	a4,a5
80003174:	00171713          	slli	a4,a4,0x1
80003178:	00f70733          	add	a4,a4,a5
8000317c:	00271793          	slli	a5,a4,0x2
80003180:	00078713          	mv	a4,a5
80003184:	00068793          	mv	a5,a3
80003188:	00379793          	slli	a5,a5,0x3
8000318c:	00d787b3          	add	a5,a5,a3
80003190:	00279793          	slli	a5,a5,0x2
80003194:	00f707b3          	add	a5,a4,a5
80003198:	00f607b3          	add	a5,a2,a5
8000319c:	3e800713          	li	a4,1000
800031a0:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:94 (discriminator 3)
            Tiles[m][n].taskSlots = NUM_MAX_TASKS;
800031a4:	80022737          	lui	a4,0x80022
800031a8:	fe842783          	lw	a5,-24(s0)
800031ac:	fec42683          	lw	a3,-20(s0)
800031b0:	46470613          	addi	a2,a4,1124 # 80022464 <__stack_top+0xfffdfc64>
800031b4:	00078713          	mv	a4,a5
800031b8:	00171713          	slli	a4,a4,0x1
800031bc:	00f70733          	add	a4,a4,a5
800031c0:	00271793          	slli	a5,a4,0x2
800031c4:	00078713          	mv	a4,a5
800031c8:	00068793          	mv	a5,a3
800031cc:	00379793          	slli	a5,a5,0x3
800031d0:	00d787b3          	add	a5,a5,a3
800031d4:	00279793          	slli	a5,a5,0x2
800031d8:	00f707b3          	add	a5,a4,a5
800031dc:	00f607b3          	add	a5,a2,a5
800031e0:	00600713          	li	a4,6
800031e4:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:91 (discriminator 3)
        for (n = 0; n < DIM_Y; n++){
800031e8:	fe842783          	lw	a5,-24(s0)
800031ec:	00178793          	addi	a5,a5,1
800031f0:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:91 (discriminator 1)
800031f4:	fe842703          	lw	a4,-24(s0)
800031f8:	00200793          	li	a5,2
800031fc:	f2e7d0e3          	ble	a4,a5,8000311c <API_TilesReset+0x1c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90 (discriminator 2)
    for (m = 0; m < DIM_X; m++){
80003200:	fec42783          	lw	a5,-20(s0)
80003204:	00178793          	addi	a5,a5,1
80003208:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90 (discriminator 1)
8000320c:	fec42703          	lw	a4,-20(s0)
80003210:	00200793          	li	a5,2
80003214:	f0e7d0e3          	ble	a4,a5,80003114 <API_TilesReset+0x14>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:100
            /*for(i = 0; i < NUM_MAX_TASKS; i++){
                Tiles[m][n].AppTask[i] = NONE;
            }*/
        }
    }    
    return;
80003218:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:101
}
8000321c:	01c12403          	lw	s0,28(sp)
80003220:	02010113          	addi	sp,sp,32
80003224:	00008067          	ret

80003228 <GeneratePatternMatrix>:
GeneratePatternMatrix():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:104

// Generates the Pattern Matrix for Pattern mapping
void GeneratePatternMatrix(){
80003228:	fe010113          	addi	sp,sp,-32
8000322c:	00812e23          	sw	s0,28(sp)
80003230:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:106
    int i, aux;
    aux = 0;
80003234:	fe042423          	sw	zero,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:107
    priorityPointer = 0;
80003238:	800227b7          	lui	a5,0x80022
8000323c:	4607a023          	sw	zero,1120(a5) # 80022460 <__stack_top+0xfffdfc60>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:109
    //prints("Testando Pattern: \n");
    for(i=0; i<(DIM_X*DIM_Y); i++){
80003240:	fe042623          	sw	zero,-20(s0)
80003244:	0700006f          	j	800032b4 <GeneratePatternMatrix+0x8c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:111
        //printi(i); prints(": "); printi(aux); prints("\n");
        priorityMatrix[i] = (aux / DIM_X << 8) | aux % DIM_X;
80003248:	fe842703          	lw	a4,-24(s0)
8000324c:	00300793          	li	a5,3
80003250:	02f747b3          	div	a5,a4,a5
80003254:	00879713          	slli	a4,a5,0x8
80003258:	fe842683          	lw	a3,-24(s0)
8000325c:	00300793          	li	a5,3
80003260:	02f6e7b3          	rem	a5,a3,a5
80003264:	00f767b3          	or	a5,a4,a5
80003268:	00078693          	mv	a3,a5
8000326c:	800227b7          	lui	a5,0x80022
80003270:	fec42703          	lw	a4,-20(s0)
80003274:	00271713          	slli	a4,a4,0x2
80003278:	c9478793          	addi	a5,a5,-876 # 80021c94 <__stack_top+0xfffdf494>
8000327c:	00f707b3          	add	a5,a4,a5
80003280:	00d7a023          	sw	a3,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:130
            else{
                aux = 1;
            }
        } 
        else{
            if(aux<=((DIM_X*DIM_Y)-3))
80003284:	fe842703          	lw	a4,-24(s0)
80003288:	00600793          	li	a5,6
8000328c:	00e7ca63          	blt	a5,a4,800032a0 <GeneratePatternMatrix+0x78>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:131
                aux += 2;
80003290:	fe842783          	lw	a5,-24(s0)
80003294:	00278793          	addi	a5,a5,2
80003298:	fef42423          	sw	a5,-24(s0)
8000329c:	00c0006f          	j	800032a8 <GeneratePatternMatrix+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:133
            else
                aux = 1;
800032a0:	00100793          	li	a5,1
800032a4:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:109 (discriminator 2)
    for(i=0; i<(DIM_X*DIM_Y); i++){
800032a8:	fec42783          	lw	a5,-20(s0)
800032ac:	00178793          	addi	a5,a5,1
800032b0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:109 (discriminator 1)
800032b4:	fec42703          	lw	a4,-20(s0)
800032b8:	00800793          	li	a5,8
800032bc:	f8e7d6e3          	ble	a4,a5,80003248 <GeneratePatternMatrix+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:136
        }    
    }
    return;
800032c0:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:137
}
800032c4:	01c12403          	lw	s0,28(sp)
800032c8:	02010113          	addi	sp,sp,32
800032cc:	00008067          	ret

800032d0 <API_AllocateTasks>:
API_AllocateTasks():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:140

// Checks if there is some task to allocate...
void API_AllocateTasks(unsigned int tick){
800032d0:	fd010113          	addi	sp,sp,-48
800032d4:	02112623          	sw	ra,44(sp)
800032d8:	02812423          	sw	s0,40(sp)
800032dc:	02912223          	sw	s1,36(sp)
800032e0:	03010413          	addi	s0,sp,48
800032e4:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:144
    int i, j;
    int addr, slot;
    // Iterate around every possible application
    for (i = 0; i < NUM_MAX_APPS; i++){
800032e8:	fe042623          	sw	zero,-20(s0)
800032ec:	2980006f          	j	80003584 <API_AllocateTasks+0x2b4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:146
        // If the application is valid
        if (applications[i].occupied == TRUE){
800032f0:	800226b7          	lui	a3,0x80022
800032f4:	fec42703          	lw	a4,-20(s0)
800032f8:	00070793          	mv	a5,a4
800032fc:	00279793          	slli	a5,a5,0x2
80003300:	00e787b3          	add	a5,a5,a4
80003304:	00579793          	slli	a5,a5,0x5
80003308:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
8000330c:	00e787b3          	add	a5,a5,a4
80003310:	0007a703          	lw	a4,0(a5)
80003314:	00100793          	li	a5,1
80003318:	26f71063          	bne	a4,a5,80003578 <API_AllocateTasks+0x2a8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:149

            // If the nextRun of this application is right now, then release each task!
            if(applications[i].nextRun <= tick && applications[i].nextRun != applications[i].lastStart){
8000331c:	800227b7          	lui	a5,0x80022
80003320:	fec42703          	lw	a4,-20(s0)
80003324:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80003328:	00070793          	mv	a5,a4
8000332c:	00279793          	slli	a5,a5,0x2
80003330:	00e787b3          	add	a5,a5,a4
80003334:	00579793          	slli	a5,a5,0x5
80003338:	00f687b3          	add	a5,a3,a5
8000333c:	08c7a783          	lw	a5,140(a5)
80003340:	fdc42703          	lw	a4,-36(s0)
80003344:	22f76a63          	bltu	a4,a5,80003578 <API_AllocateTasks+0x2a8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:149 (discriminator 1)
80003348:	800227b7          	lui	a5,0x80022
8000334c:	fec42703          	lw	a4,-20(s0)
80003350:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80003354:	00070793          	mv	a5,a4
80003358:	00279793          	slli	a5,a5,0x2
8000335c:	00e787b3          	add	a5,a5,a4
80003360:	00579793          	slli	a5,a5,0x5
80003364:	00f687b3          	add	a5,a3,a5
80003368:	08c7a683          	lw	a3,140(a5)
8000336c:	800227b7          	lui	a5,0x80022
80003370:	fec42703          	lw	a4,-20(s0)
80003374:	cb878613          	addi	a2,a5,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80003378:	00070793          	mv	a5,a4
8000337c:	00279793          	slli	a5,a5,0x2
80003380:	00e787b3          	add	a5,a5,a4
80003384:	00579793          	slli	a5,a5,0x5
80003388:	00f607b3          	add	a5,a2,a5
8000338c:	0947a783          	lw	a5,148(a5)
80003390:	1ef68463          	beq	a3,a5,80003578 <API_AllocateTasks+0x2a8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:152

                // If the system has space to accept every task
                if(applications[i].numTasks <= API_GetSystemTasksSlots()){
80003394:	800226b7          	lui	a3,0x80022
80003398:	fec42703          	lw	a4,-20(s0)
8000339c:	00070793          	mv	a5,a4
800033a0:	00279793          	slli	a5,a5,0x2
800033a4:	00e787b3          	add	a5,a5,a4
800033a8:	00579793          	slli	a5,a5,0x5
800033ac:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
800033b0:	00e787b3          	add	a5,a5,a4
800033b4:	0107a483          	lw	s1,16(a5)
800033b8:	121000ef          	jal	ra,80003cd8 <API_GetSystemTasksSlots>
800033bc:	00050793          	mv	a5,a0
800033c0:	1a97ec63          	bltu	a5,s1,80003578 <API_AllocateTasks+0x2a8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:155
                    
                    // Iterates around each task of this application
                    for(j = 0; j < applications[i].numTasks; j++){
800033c4:	fe042423          	sw	zero,-24(s0)
800033c8:	13c0006f          	j	80003504 <API_AllocateTasks+0x234>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:158

                        for(;;){
                            addr = getNextPriorityAddr();
800033cc:	53c000ef          	jal	ra,80003908 <getNextPriorityAddr>
800033d0:	00050793          	mv	a5,a0
800033d4:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:159
                            slot = API_GetTaskSlotFromTile(addr, i, j);
800033d8:	fe442783          	lw	a5,-28(s0)
800033dc:	fec42703          	lw	a4,-20(s0)
800033e0:	fe842683          	lw	a3,-24(s0)
800033e4:	00068613          	mv	a2,a3
800033e8:	00070593          	mv	a1,a4
800033ec:	00078513          	mv	a0,a5
800033f0:	64c000ef          	jal	ra,80003a3c <API_GetTaskSlotFromTile>
800033f4:	00050793          	mv	a5,a0
800033f8:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:160
                            if (slot != ERRO)
800033fc:	fe042703          	lw	a4,-32(s0)
80003400:	fff00793          	li	a5,-1
80003404:	00f71463          	bne	a4,a5,8000340c <API_AllocateTasks+0x13c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:158
                            addr = getNextPriorityAddr();
80003408:	fc5ff06f          	j	800033cc <API_AllocateTasks+0xfc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:161
                                break;
8000340c:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:163
                        }
                        applications[i].tasks[j].status = TASK_ALLOCATING;
80003410:	80022737          	lui	a4,0x80022
80003414:	fe842783          	lw	a5,-24(s0)
80003418:	fec42683          	lw	a3,-20(s0)
8000341c:	cb870613          	addi	a2,a4,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80003420:	00078713          	mv	a4,a5
80003424:	00171713          	slli	a4,a4,0x1
80003428:	00f70733          	add	a4,a4,a5
8000342c:	00271793          	slli	a5,a4,0x2
80003430:	00078713          	mv	a4,a5
80003434:	00068793          	mv	a5,a3
80003438:	00279793          	slli	a5,a5,0x2
8000343c:	00d787b3          	add	a5,a5,a3
80003440:	00579793          	slli	a5,a5,0x5
80003444:	00f707b3          	add	a5,a4,a5
80003448:	00f607b3          	add	a5,a2,a5
8000344c:	00300713          	li	a4,3
80003450:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:164
                        applications[i].tasks[j].addr = addr;
80003454:	fe442603          	lw	a2,-28(s0)
80003458:	80022737          	lui	a4,0x80022
8000345c:	fe842783          	lw	a5,-24(s0)
80003460:	fec42683          	lw	a3,-20(s0)
80003464:	cb870593          	addi	a1,a4,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80003468:	00078713          	mv	a4,a5
8000346c:	00171713          	slli	a4,a4,0x1
80003470:	00f70733          	add	a4,a4,a5
80003474:	00271793          	slli	a5,a4,0x2
80003478:	00078713          	mv	a4,a5
8000347c:	00068793          	mv	a5,a3
80003480:	00279793          	slli	a5,a5,0x2
80003484:	00d787b3          	add	a5,a5,a3
80003488:	00579793          	slli	a5,a5,0x5
8000348c:	00f707b3          	add	a5,a4,a5
80003490:	00f587b3          	add	a5,a1,a5
80003494:	00c7ac23          	sw	a2,24(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:165
                        applications[i].tasks[j].slot = slot;
80003498:	fe042603          	lw	a2,-32(s0)
8000349c:	80022737          	lui	a4,0x80022
800034a0:	fe842783          	lw	a5,-24(s0)
800034a4:	fec42683          	lw	a3,-20(s0)
800034a8:	cb870593          	addi	a1,a4,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
800034ac:	00078713          	mv	a4,a5
800034b0:	00171713          	slli	a4,a4,0x1
800034b4:	00f70733          	add	a4,a4,a5
800034b8:	00271793          	slli	a5,a4,0x2
800034bc:	00078713          	mv	a4,a5
800034c0:	00068793          	mv	a5,a3
800034c4:	00279793          	slli	a5,a5,0x2
800034c8:	00d787b3          	add	a5,a5,a3
800034cc:	00579793          	slli	a5,a5,0x5
800034d0:	00f707b3          	add	a5,a4,a5
800034d4:	00f587b3          	add	a5,a1,a5
800034d8:	00c7ae23          	sw	a2,28(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:166
                        API_RepositoryAllocation(i, j, addr);
800034dc:	fec42783          	lw	a5,-20(s0)
800034e0:	fe842703          	lw	a4,-24(s0)
800034e4:	fe442683          	lw	a3,-28(s0)
800034e8:	00068613          	mv	a2,a3
800034ec:	00070593          	mv	a1,a4
800034f0:	00078513          	mv	a0,a5
800034f4:	0d1000ef          	jal	ra,80003dc4 <API_RepositoryAllocation>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:155
                    for(j = 0; j < applications[i].numTasks; j++){
800034f8:	fe842783          	lw	a5,-24(s0)
800034fc:	00178793          	addi	a5,a5,1
80003500:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:155 (discriminator 1)
80003504:	800226b7          	lui	a3,0x80022
80003508:	fec42703          	lw	a4,-20(s0)
8000350c:	00070793          	mv	a5,a4
80003510:	00279793          	slli	a5,a5,0x2
80003514:	00e787b3          	add	a5,a5,a4
80003518:	00579793          	slli	a5,a5,0x5
8000351c:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80003520:	00e787b3          	add	a5,a5,a4
80003524:	0107a703          	lw	a4,16(a5)
80003528:	fe842783          	lw	a5,-24(s0)
8000352c:	eae7e0e3          	bltu	a5,a4,800033cc <API_AllocateTasks+0xfc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:170
                    }

                    // Resets the lastStart
                    applications[i].lastStart = applications[i].nextRun;
80003530:	800227b7          	lui	a5,0x80022
80003534:	fec42703          	lw	a4,-20(s0)
80003538:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
8000353c:	00070793          	mv	a5,a4
80003540:	00279793          	slli	a5,a5,0x2
80003544:	00e787b3          	add	a5,a5,a4
80003548:	00579793          	slli	a5,a5,0x5
8000354c:	00f687b3          	add	a5,a3,a5
80003550:	08c7a683          	lw	a3,140(a5)
80003554:	800227b7          	lui	a5,0x80022
80003558:	fec42703          	lw	a4,-20(s0)
8000355c:	cb878613          	addi	a2,a5,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80003560:	00070793          	mv	a5,a4
80003564:	00279793          	slli	a5,a5,0x2
80003568:	00e787b3          	add	a5,a5,a4
8000356c:	00579793          	slli	a5,a5,0x5
80003570:	00f607b3          	add	a5,a2,a5
80003574:	08d7aa23          	sw	a3,148(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:144 (discriminator 2)
    for (i = 0; i < NUM_MAX_APPS; i++){
80003578:	fec42783          	lw	a5,-20(s0)
8000357c:	00178793          	addi	a5,a5,1
80003580:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:144 (discriminator 1)
80003584:	fec42703          	lw	a4,-20(s0)
80003588:	00b00793          	li	a5,11
8000358c:	d6e7d2e3          	ble	a4,a5,800032f0 <API_AllocateTasks+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:176
                }
            }
        }
    }

    return;
80003590:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:177
}
80003594:	02c12083          	lw	ra,44(sp)
80003598:	02812403          	lw	s0,40(sp)
8000359c:	02412483          	lw	s1,36(sp)
800035a0:	03010113          	addi	sp,sp,48
800035a4:	00008067          	ret

800035a8 <API_DealocateTask>:
API_DealocateTask():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:179

void API_DealocateTask(unsigned int task_id, unsigned int app_id){
800035a8:	fd010113          	addi	sp,sp,-48
800035ac:	02112623          	sw	ra,44(sp)
800035b0:	02812423          	sw	s0,40(sp)
800035b4:	03010413          	addi	s0,sp,48
800035b8:	fca42e23          	sw	a0,-36(s0)
800035bc:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:181
    unsigned int i, flag, tick;
    applications[app_id].tasks[task_id].status = TASK_FINISHED;
800035c0:	80022737          	lui	a4,0x80022
800035c4:	fdc42783          	lw	a5,-36(s0)
800035c8:	fd842683          	lw	a3,-40(s0)
800035cc:	cb870613          	addi	a2,a4,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
800035d0:	00078713          	mv	a4,a5
800035d4:	00171713          	slli	a4,a4,0x1
800035d8:	00f70733          	add	a4,a4,a5
800035dc:	00271793          	slli	a5,a4,0x2
800035e0:	00078713          	mv	a4,a5
800035e4:	00068793          	mv	a5,a3
800035e8:	00279793          	slli	a5,a5,0x2
800035ec:	00d787b3          	add	a5,a5,a3
800035f0:	00579793          	slli	a5,a5,0x5
800035f4:	00f707b3          	add	a5,a4,a5
800035f8:	00f607b3          	add	a5,a2,a5
800035fc:	00200713          	li	a4,2
80003600:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:183
    // verify if every task has finished
    flag = 1;
80003604:	00100793          	li	a5,1
80003608:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:184
    for (i = 0; i < applications[app_id].numTasks; i++){
8000360c:	fe042623          	sw	zero,-20(s0)
80003610:	0600006f          	j	80003670 <API_DealocateTask+0xc8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:186
        //printsvsv("checking ", i, "task is: ", applications[app_id].tasks[i].status);
        if(applications[app_id].tasks[i].status != TASK_FINISHED){
80003614:	80022737          	lui	a4,0x80022
80003618:	fec42783          	lw	a5,-20(s0)
8000361c:	fd842683          	lw	a3,-40(s0)
80003620:	cb870613          	addi	a2,a4,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80003624:	00078713          	mv	a4,a5
80003628:	00171713          	slli	a4,a4,0x1
8000362c:	00f70733          	add	a4,a4,a5
80003630:	00271793          	slli	a5,a4,0x2
80003634:	00078713          	mv	a4,a5
80003638:	00068793          	mv	a5,a3
8000363c:	00279793          	slli	a5,a5,0x2
80003640:	00d787b3          	add	a5,a5,a3
80003644:	00579793          	slli	a5,a5,0x5
80003648:	00f707b3          	add	a5,a4,a5
8000364c:	00f607b3          	add	a5,a2,a5
80003650:	0147a703          	lw	a4,20(a5)
80003654:	00200793          	li	a5,2
80003658:	00f70663          	beq	a4,a5,80003664 <API_DealocateTask+0xbc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:187
            flag = 0;
8000365c:	fe042423          	sw	zero,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:188
            break;
80003660:	03c0006f          	j	8000369c <API_DealocateTask+0xf4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:184 (discriminator 2)
    for (i = 0; i < applications[app_id].numTasks; i++){
80003664:	fec42783          	lw	a5,-20(s0)
80003668:	00178793          	addi	a5,a5,1
8000366c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:184 (discriminator 1)
80003670:	800226b7          	lui	a3,0x80022
80003674:	fd842703          	lw	a4,-40(s0)
80003678:	00070793          	mv	a5,a4
8000367c:	00279793          	slli	a5,a5,0x2
80003680:	00e787b3          	add	a5,a5,a4
80003684:	00579793          	slli	a5,a5,0x5
80003688:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
8000368c:	00e787b3          	add	a5,a5,a4
80003690:	0107a783          	lw	a5,16(a5)
80003694:	fec42703          	lw	a4,-20(s0)
80003698:	f6f76ee3          	bltu	a4,a5,80003614 <API_DealocateTask+0x6c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:192
        }
    }
    // in positive case
    if(flag){
8000369c:	fe842783          	lw	a5,-24(s0)
800036a0:	24078663          	beqz	a5,800038ec <API_DealocateTask+0x344>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:194
        // register that the application has executed another time
        tick = xTaskGetTickCount();
800036a4:	e09fe0ef          	jal	ra,800024ac <xTaskGetTickCount>
800036a8:	fea42223          	sw	a0,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:195
        applications[app_id].executed++;
800036ac:	800226b7          	lui	a3,0x80022
800036b0:	fd842703          	lw	a4,-40(s0)
800036b4:	00070793          	mv	a5,a4
800036b8:	00279793          	slli	a5,a5,0x2
800036bc:	00e787b3          	add	a5,a5,a4
800036c0:	00579793          	slli	a5,a5,0x5
800036c4:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
800036c8:	00e787b3          	add	a5,a5,a4
800036cc:	0907a783          	lw	a5,144(a5)
800036d0:	00178693          	addi	a3,a5,1
800036d4:	80022637          	lui	a2,0x80022
800036d8:	fd842703          	lw	a4,-40(s0)
800036dc:	00070793          	mv	a5,a4
800036e0:	00279793          	slli	a5,a5,0x2
800036e4:	00e787b3          	add	a5,a5,a4
800036e8:	00579793          	slli	a5,a5,0x5
800036ec:	cb860713          	addi	a4,a2,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
800036f0:	00e787b3          	add	a5,a5,a4
800036f4:	08d7a823          	sw	a3,144(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:196
        printsvsv("Application ", app_id, "was executed in ", (tick - applications[app_id].lastStart));
800036f8:	fd842583          	lw	a1,-40(s0)
800036fc:	800227b7          	lui	a5,0x80022
80003700:	fd842703          	lw	a4,-40(s0)
80003704:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80003708:	00070793          	mv	a5,a4
8000370c:	00279793          	slli	a5,a5,0x2
80003710:	00e787b3          	add	a5,a5,a4
80003714:	00579793          	slli	a5,a5,0x5
80003718:	00f687b3          	add	a5,a3,a5
8000371c:	0947a783          	lw	a5,148(a5)
80003720:	fe442703          	lw	a4,-28(s0)
80003724:	40f707b3          	sub	a5,a4,a5
80003728:	00078693          	mv	a3,a5
8000372c:	800087b7          	lui	a5,0x80008
80003730:	86c78613          	addi	a2,a5,-1940 # 8000786c <__stack_top+0xfffc506c>
80003734:	800087b7          	lui	a5,0x80008
80003738:	88078513          	addi	a0,a5,-1920 # 80007880 <__stack_top+0xfffc5080>
8000373c:	290020ef          	jal	ra,800059cc <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:197
        applications[app_id].lastFinish = tick;
80003740:	800227b7          	lui	a5,0x80022
80003744:	fd842703          	lw	a4,-40(s0)
80003748:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
8000374c:	00070793          	mv	a5,a4
80003750:	00279793          	slli	a5,a5,0x2
80003754:	00e787b3          	add	a5,a5,a4
80003758:	00579793          	slli	a5,a5,0x5
8000375c:	00f687b3          	add	a5,a3,a5
80003760:	fe442703          	lw	a4,-28(s0)
80003764:	08e7ae23          	sw	a4,156(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:199
        // if the application must run another time
        if(applications[app_id].appExec > applications[app_id].executed){
80003768:	800227b7          	lui	a5,0x80022
8000376c:	fd842703          	lw	a4,-40(s0)
80003770:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80003774:	00070793          	mv	a5,a4
80003778:	00279793          	slli	a5,a5,0x2
8000377c:	00e787b3          	add	a5,a5,a4
80003780:	00579793          	slli	a5,a5,0x5
80003784:	00f687b3          	add	a5,a3,a5
80003788:	00c7a683          	lw	a3,12(a5)
8000378c:	80022637          	lui	a2,0x80022
80003790:	fd842703          	lw	a4,-40(s0)
80003794:	00070793          	mv	a5,a4
80003798:	00279793          	slli	a5,a5,0x2
8000379c:	00e787b3          	add	a5,a5,a4
800037a0:	00579793          	slli	a5,a5,0x5
800037a4:	cb860713          	addi	a4,a2,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
800037a8:	00e787b3          	add	a5,a5,a4
800037ac:	0907a783          	lw	a5,144(a5)
800037b0:	0ad7fa63          	bleu	a3,a5,80003864 <API_DealocateTask+0x2bc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:200
            printsv("\t\tThis application still need to run: ", (applications[app_id].appExec - applications[app_id].executed));
800037b4:	800227b7          	lui	a5,0x80022
800037b8:	fd842703          	lw	a4,-40(s0)
800037bc:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
800037c0:	00070793          	mv	a5,a4
800037c4:	00279793          	slli	a5,a5,0x2
800037c8:	00e787b3          	add	a5,a5,a4
800037cc:	00579793          	slli	a5,a5,0x5
800037d0:	00f687b3          	add	a5,a3,a5
800037d4:	00c7a683          	lw	a3,12(a5)
800037d8:	80022637          	lui	a2,0x80022
800037dc:	fd842703          	lw	a4,-40(s0)
800037e0:	00070793          	mv	a5,a4
800037e4:	00279793          	slli	a5,a5,0x2
800037e8:	00e787b3          	add	a5,a5,a4
800037ec:	00579793          	slli	a5,a5,0x5
800037f0:	cb860713          	addi	a4,a2,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
800037f4:	00e787b3          	add	a5,a5,a4
800037f8:	0907a783          	lw	a5,144(a5)
800037fc:	40f687b3          	sub	a5,a3,a5
80003800:	00078593          	mv	a1,a5
80003804:	800087b7          	lui	a5,0x80008
80003808:	89078513          	addi	a0,a5,-1904 # 80007890 <__stack_top+0xfffc5090>
8000380c:	178020ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:201
            applications[app_id].nextRun = tick + applications[app_id].appPeriod;
80003810:	800227b7          	lui	a5,0x80022
80003814:	fd842703          	lw	a4,-40(s0)
80003818:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
8000381c:	00070793          	mv	a5,a4
80003820:	00279793          	slli	a5,a5,0x2
80003824:	00e787b3          	add	a5,a5,a4
80003828:	00579793          	slli	a5,a5,0x5
8000382c:	00f687b3          	add	a5,a3,a5
80003830:	0087a703          	lw	a4,8(a5)
80003834:	fe442783          	lw	a5,-28(s0)
80003838:	00f706b3          	add	a3,a4,a5
8000383c:	800227b7          	lui	a5,0x80022
80003840:	fd842703          	lw	a4,-40(s0)
80003844:	cb878613          	addi	a2,a5,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80003848:	00070793          	mv	a5,a4
8000384c:	00279793          	slli	a5,a5,0x2
80003850:	00e787b3          	add	a5,a5,a4
80003854:	00579793          	slli	a5,a5,0x5
80003858:	00f607b3          	add	a5,a2,a5
8000385c:	08d7a623          	sw	a3,140(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:215
                }
            }
            _exit(0xfe10);
        }        
    }
    return;
80003860:	08c0006f          	j	800038ec <API_DealocateTask+0x344>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:203
            prints("\t\tThis application is DONE!\n");
80003864:	800087b7          	lui	a5,0x80008
80003868:	8b878513          	addi	a0,a5,-1864 # 800078b8 <__stack_top+0xfffc50b8>
8000386c:	06c020ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:204
            applications[app_id].occupied = FALSE;
80003870:	800226b7          	lui	a3,0x80022
80003874:	fd842703          	lw	a4,-40(s0)
80003878:	00070793          	mv	a5,a4
8000387c:	00279793          	slli	a5,a5,0x2
80003880:	00e787b3          	add	a5,a5,a4
80003884:	00579793          	slli	a5,a5,0x5
80003888:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
8000388c:	00e787b3          	add	a5,a5,a4
80003890:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:207
            for(i = 0; i < NUM_MAX_APPS; i++){
80003894:	fe042623          	sw	zero,-20(s0)
80003898:	03c0006f          	j	800038d4 <API_DealocateTask+0x32c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:208
                if (applications[i].occupied == TRUE){
8000389c:	800226b7          	lui	a3,0x80022
800038a0:	fec42703          	lw	a4,-20(s0)
800038a4:	00070793          	mv	a5,a4
800038a8:	00279793          	slli	a5,a5,0x2
800038ac:	00e787b3          	add	a5,a5,a4
800038b0:	00579793          	slli	a5,a5,0x5
800038b4:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
800038b8:	00e787b3          	add	a5,a5,a4
800038bc:	0007a703          	lw	a4,0(a5)
800038c0:	00100793          	li	a5,1
800038c4:	02f70863          	beq	a4,a5,800038f4 <API_DealocateTask+0x34c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:207 (discriminator 2)
            for(i = 0; i < NUM_MAX_APPS; i++){
800038c8:	fec42783          	lw	a5,-20(s0)
800038cc:	00178793          	addi	a5,a5,1
800038d0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:207 (discriminator 1)
800038d4:	fec42703          	lw	a4,-20(s0)
800038d8:	00b00793          	li	a5,11
800038dc:	fce7f0e3          	bleu	a4,a5,8000389c <API_DealocateTask+0x2f4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:212
            _exit(0xfe10);
800038e0:	000107b7          	lui	a5,0x10
800038e4:	e1078513          	addi	a0,a5,-496 # fe10 <HEAP_SIZE-0x1f0>
800038e8:	cf4fd0ef          	jal	ra,80000ddc <_exit>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:215
    return;
800038ec:	00000013          	nop
800038f0:	0080006f          	j	800038f8 <API_DealocateTask+0x350>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:209
                    return;
800038f4:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:216
}
800038f8:	02c12083          	lw	ra,44(sp)
800038fc:	02812403          	lw	s0,40(sp)
80003900:	03010113          	addi	sp,sp,48
80003904:	00008067          	ret

80003908 <getNextPriorityAddr>:
getNextPriorityAddr():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:219

// Gets the address of the next tile in the priority list 
unsigned int getNextPriorityAddr(){
80003908:	fe010113          	addi	sp,sp,-32
8000390c:	00112e23          	sw	ra,28(sp)
80003910:	00812c23          	sw	s0,24(sp)
80003914:	00912a23          	sw	s1,20(sp)
80003918:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:221
    int i;
    unsigned int addr = makeAddress(0,0);
8000391c:	00000593          	li	a1,0
80003920:	00000513          	li	a0,0
80003924:	47c020ef          	jal	ra,80005da0 <makeAddress>
80003928:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:224
    for(;;){
        // Checks if it's a valid address
        if (priorityMatrix[priorityPointer] != makeAddress(0,0)){
8000392c:	800227b7          	lui	a5,0x80022
80003930:	4607a703          	lw	a4,1120(a5) # 80022460 <__stack_top+0xfffdfc60>
80003934:	800227b7          	lui	a5,0x80022
80003938:	00271713          	slli	a4,a4,0x2
8000393c:	c9478793          	addi	a5,a5,-876 # 80021c94 <__stack_top+0xfffdf494>
80003940:	00f707b3          	add	a5,a4,a5
80003944:	0007a483          	lw	s1,0(a5)
80003948:	00000593          	li	a1,0
8000394c:	00000513          	li	a0,0
80003950:	450020ef          	jal	ra,80005da0 <makeAddress>
80003954:	00050793          	mv	a5,a0
80003958:	06f48e63          	beq	s1,a5,800039d4 <getNextPriorityAddr+0xcc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:225
            if (Tiles[getXpos(addr)][getYpos(addr)].taskSlots > 0){
8000395c:	fec42503          	lw	a0,-20(s0)
80003960:	0cc020ef          	jal	ra,80005a2c <getXpos>
80003964:	00050493          	mv	s1,a0
80003968:	fec42503          	lw	a0,-20(s0)
8000396c:	0ec020ef          	jal	ra,80005a58 <getYpos>
80003970:	00050613          	mv	a2,a0
80003974:	800227b7          	lui	a5,0x80022
80003978:	46478693          	addi	a3,a5,1124 # 80022464 <__stack_top+0xfffdfc64>
8000397c:	00060713          	mv	a4,a2
80003980:	00171793          	slli	a5,a4,0x1
80003984:	00078713          	mv	a4,a5
80003988:	00c70733          	add	a4,a4,a2
8000398c:	00271793          	slli	a5,a4,0x2
80003990:	00078713          	mv	a4,a5
80003994:	00048793          	mv	a5,s1
80003998:	00379793          	slli	a5,a5,0x3
8000399c:	009787b3          	add	a5,a5,s1
800039a0:	00279793          	slli	a5,a5,0x2
800039a4:	00f707b3          	add	a5,a4,a5
800039a8:	00f687b3          	add	a5,a3,a5
800039ac:	0087a783          	lw	a5,8(a5)
800039b0:	02078263          	beqz	a5,800039d4 <getNextPriorityAddr+0xcc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:228
            //for(i = 0; i < NUM_MAX_TASKS; i++){
                //if (Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] == NONE)
                    addr = priorityMatrix[priorityPointer];
800039b4:	800227b7          	lui	a5,0x80022
800039b8:	4607a703          	lw	a4,1120(a5) # 80022460 <__stack_top+0xfffdfc60>
800039bc:	800227b7          	lui	a5,0x80022
800039c0:	00271713          	slli	a4,a4,0x2
800039c4:	c9478793          	addi	a5,a5,-876 # 80021c94 <__stack_top+0xfffdf494>
800039c8:	00f707b3          	add	a5,a4,a5
800039cc:	0007a783          	lw	a5,0(a5)
800039d0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:234
            //}
            }
        }

        // Increments the priorityPointer
        priorityPointer++;
800039d4:	800227b7          	lui	a5,0x80022
800039d8:	4607a783          	lw	a5,1120(a5) # 80022460 <__stack_top+0xfffdfc60>
800039dc:	00178713          	addi	a4,a5,1
800039e0:	800227b7          	lui	a5,0x80022
800039e4:	46e7a023          	sw	a4,1120(a5) # 80022460 <__stack_top+0xfffdfc60>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:235
        if (priorityPointer == DIM_X*DIM_Y)
800039e8:	800227b7          	lui	a5,0x80022
800039ec:	4607a703          	lw	a4,1120(a5) # 80022460 <__stack_top+0xfffdfc60>
800039f0:	00900793          	li	a5,9
800039f4:	00f71663          	bne	a4,a5,80003a00 <getNextPriorityAddr+0xf8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:236
            priorityPointer = 0;
800039f8:	800227b7          	lui	a5,0x80022
800039fc:	4607a023          	sw	zero,1120(a5) # 80022460 <__stack_top+0xfffdfc60>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:239

        // If we found a new valid address, return
        if( addr != makeAddress(0,0))
80003a00:	00000593          	li	a1,0
80003a04:	00000513          	li	a0,0
80003a08:	398020ef          	jal	ra,80005da0 <makeAddress>
80003a0c:	00050713          	mv	a4,a0
80003a10:	fec42783          	lw	a5,-20(s0)
80003a14:	00e79463          	bne	a5,a4,80003a1c <getNextPriorityAddr+0x114>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:224
        if (priorityMatrix[priorityPointer] != makeAddress(0,0)){
80003a18:	f15ff06f          	j	8000392c <getNextPriorityAddr+0x24>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:240
            break;
80003a1c:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:242
    }
    return addr;
80003a20:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:244
    //return 0x101;
}
80003a24:	00078513          	mv	a0,a5
80003a28:	01c12083          	lw	ra,28(sp)
80003a2c:	01812403          	lw	s0,24(sp)
80003a30:	01412483          	lw	s1,20(sp)
80003a34:	02010113          	addi	sp,sp,32
80003a38:	00008067          	ret

80003a3c <API_GetTaskSlotFromTile>:
API_GetTaskSlotFromTile():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:247

// Gets a free slot from one given tile
unsigned int API_GetTaskSlotFromTile(unsigned int addr, unsigned int app, unsigned int task){
80003a3c:	fe010113          	addi	sp,sp,-32
80003a40:	00112e23          	sw	ra,28(sp)
80003a44:	00812c23          	sw	s0,24(sp)
80003a48:	00912a23          	sw	s1,20(sp)
80003a4c:	01212823          	sw	s2,16(sp)
80003a50:	02010413          	addi	s0,sp,32
80003a54:	fea42623          	sw	a0,-20(s0)
80003a58:	feb42423          	sw	a1,-24(s0)
80003a5c:	fec42223          	sw	a2,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:257
            printsv("\t achei!! > ", i);
            Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] = (app << 16) | task;
            return i;
        }
    }*/
    if(Tiles[getXpos(addr)][getYpos(addr)].taskSlots > 0){
80003a60:	fec42503          	lw	a0,-20(s0)
80003a64:	7c9010ef          	jal	ra,80005a2c <getXpos>
80003a68:	00050493          	mv	s1,a0
80003a6c:	fec42503          	lw	a0,-20(s0)
80003a70:	7e9010ef          	jal	ra,80005a58 <getYpos>
80003a74:	00050613          	mv	a2,a0
80003a78:	800227b7          	lui	a5,0x80022
80003a7c:	46478693          	addi	a3,a5,1124 # 80022464 <__stack_top+0xfffdfc64>
80003a80:	00060713          	mv	a4,a2
80003a84:	00171793          	slli	a5,a4,0x1
80003a88:	00078713          	mv	a4,a5
80003a8c:	00c70733          	add	a4,a4,a2
80003a90:	00271793          	slli	a5,a4,0x2
80003a94:	00078713          	mv	a4,a5
80003a98:	00048793          	mv	a5,s1
80003a9c:	00379793          	slli	a5,a5,0x3
80003aa0:	009787b3          	add	a5,a5,s1
80003aa4:	00279793          	slli	a5,a5,0x2
80003aa8:	00f707b3          	add	a5,a4,a5
80003aac:	00f687b3          	add	a5,a3,a5
80003ab0:	0087a783          	lw	a5,8(a5)
80003ab4:	0a078c63          	beqz	a5,80003b6c <API_GetTaskSlotFromTile+0x130>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:258
        Tiles[getXpos(addr)][getYpos(addr)].taskSlots = Tiles[getXpos(addr)][getYpos(addr)].taskSlots - 1;
80003ab8:	fec42503          	lw	a0,-20(s0)
80003abc:	771010ef          	jal	ra,80005a2c <getXpos>
80003ac0:	00050493          	mv	s1,a0
80003ac4:	fec42503          	lw	a0,-20(s0)
80003ac8:	791010ef          	jal	ra,80005a58 <getYpos>
80003acc:	00050613          	mv	a2,a0
80003ad0:	800227b7          	lui	a5,0x80022
80003ad4:	46478693          	addi	a3,a5,1124 # 80022464 <__stack_top+0xfffdfc64>
80003ad8:	00060713          	mv	a4,a2
80003adc:	00171793          	slli	a5,a4,0x1
80003ae0:	00078713          	mv	a4,a5
80003ae4:	00c70733          	add	a4,a4,a2
80003ae8:	00271793          	slli	a5,a4,0x2
80003aec:	00078713          	mv	a4,a5
80003af0:	00048793          	mv	a5,s1
80003af4:	00379793          	slli	a5,a5,0x3
80003af8:	009787b3          	add	a5,a5,s1
80003afc:	00279793          	slli	a5,a5,0x2
80003b00:	00f707b3          	add	a5,a4,a5
80003b04:	00f687b3          	add	a5,a3,a5
80003b08:	0087a483          	lw	s1,8(a5)
80003b0c:	fec42503          	lw	a0,-20(s0)
80003b10:	71d010ef          	jal	ra,80005a2c <getXpos>
80003b14:	00050913          	mv	s2,a0
80003b18:	fec42503          	lw	a0,-20(s0)
80003b1c:	73d010ef          	jal	ra,80005a58 <getYpos>
80003b20:	00050593          	mv	a1,a0
80003b24:	fff48693          	addi	a3,s1,-1
80003b28:	800227b7          	lui	a5,0x80022
80003b2c:	46478613          	addi	a2,a5,1124 # 80022464 <__stack_top+0xfffdfc64>
80003b30:	00058713          	mv	a4,a1
80003b34:	00171793          	slli	a5,a4,0x1
80003b38:	00078713          	mv	a4,a5
80003b3c:	00b70733          	add	a4,a4,a1
80003b40:	00271793          	slli	a5,a4,0x2
80003b44:	00078713          	mv	a4,a5
80003b48:	00090793          	mv	a5,s2
80003b4c:	00379793          	slli	a5,a5,0x3
80003b50:	012787b3          	add	a5,a5,s2
80003b54:	00279793          	slli	a5,a5,0x2
80003b58:	00f707b3          	add	a5,a4,a5
80003b5c:	00f607b3          	add	a5,a2,a5
80003b60:	00d7a423          	sw	a3,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:259
        return 1;
80003b64:	00100793          	li	a5,1
80003b68:	0140006f          	j	80003b7c <API_GetTaskSlotFromTile+0x140>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:261
    }else {
        prints("returning erro5\n");
80003b6c:	800087b7          	lui	a5,0x80008
80003b70:	8d878513          	addi	a0,a5,-1832 # 800078d8 <__stack_top+0xfffc50d8>
80003b74:	565010ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:262
        return ERRO;
80003b78:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:264
    }
}
80003b7c:	00078513          	mv	a0,a5
80003b80:	01c12083          	lw	ra,28(sp)
80003b84:	01812403          	lw	s0,24(sp)
80003b88:	01412483          	lw	s1,20(sp)
80003b8c:	01012903          	lw	s2,16(sp)
80003b90:	02010113          	addi	sp,sp,32
80003b94:	00008067          	ret

80003b98 <API_ClearTaskSlotFromTile>:
API_ClearTaskSlotFromTile():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:267

// Clear a slot occupied by a given task
unsigned int API_ClearTaskSlotFromTile(unsigned int addr, unsigned int app, unsigned int task){
80003b98:	fe010113          	addi	sp,sp,-32
80003b9c:	00112e23          	sw	ra,28(sp)
80003ba0:	00812c23          	sw	s0,24(sp)
80003ba4:	00912a23          	sw	s1,20(sp)
80003ba8:	02010413          	addi	s0,sp,32
80003bac:	fea42623          	sw	a0,-20(s0)
80003bb0:	feb42423          	sw	a1,-24(s0)
80003bb4:	fec42223          	sw	a2,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:268
    Tiles[getXpos(addr)][getYpos(addr)].taskSlots++;
80003bb8:	fec42503          	lw	a0,-20(s0)
80003bbc:	671010ef          	jal	ra,80005a2c <getXpos>
80003bc0:	00050493          	mv	s1,a0
80003bc4:	fec42503          	lw	a0,-20(s0)
80003bc8:	691010ef          	jal	ra,80005a58 <getYpos>
80003bcc:	00050693          	mv	a3,a0
80003bd0:	800227b7          	lui	a5,0x80022
80003bd4:	46478613          	addi	a2,a5,1124 # 80022464 <__stack_top+0xfffdfc64>
80003bd8:	00068713          	mv	a4,a3
80003bdc:	00171793          	slli	a5,a4,0x1
80003be0:	00078713          	mv	a4,a5
80003be4:	00d70733          	add	a4,a4,a3
80003be8:	00271793          	slli	a5,a4,0x2
80003bec:	00078713          	mv	a4,a5
80003bf0:	00048793          	mv	a5,s1
80003bf4:	00379793          	slli	a5,a5,0x3
80003bf8:	009787b3          	add	a5,a5,s1
80003bfc:	00279793          	slli	a5,a5,0x2
80003c00:	00f707b3          	add	a5,a4,a5
80003c04:	00f607b3          	add	a5,a2,a5
80003c08:	0087a783          	lw	a5,8(a5)
80003c0c:	00178613          	addi	a2,a5,1
80003c10:	800227b7          	lui	a5,0x80022
80003c14:	46478593          	addi	a1,a5,1124 # 80022464 <__stack_top+0xfffdfc64>
80003c18:	00068713          	mv	a4,a3
80003c1c:	00171793          	slli	a5,a4,0x1
80003c20:	00078713          	mv	a4,a5
80003c24:	00d70733          	add	a4,a4,a3
80003c28:	00271793          	slli	a5,a4,0x2
80003c2c:	00078713          	mv	a4,a5
80003c30:	00048793          	mv	a5,s1
80003c34:	00379793          	slli	a5,a5,0x3
80003c38:	009787b3          	add	a5,a5,s1
80003c3c:	00279793          	slli	a5,a5,0x2
80003c40:	00f707b3          	add	a5,a4,a5
80003c44:	00f587b3          	add	a5,a1,a5
80003c48:	00c7a423          	sw	a2,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:269
    if(Tiles[getXpos(addr)][getYpos(addr)].taskSlots > NUM_MAX_TASKS){
80003c4c:	fec42503          	lw	a0,-20(s0)
80003c50:	5dd010ef          	jal	ra,80005a2c <getXpos>
80003c54:	00050493          	mv	s1,a0
80003c58:	fec42503          	lw	a0,-20(s0)
80003c5c:	5fd010ef          	jal	ra,80005a58 <getYpos>
80003c60:	00050613          	mv	a2,a0
80003c64:	800227b7          	lui	a5,0x80022
80003c68:	46478693          	addi	a3,a5,1124 # 80022464 <__stack_top+0xfffdfc64>
80003c6c:	00060713          	mv	a4,a2
80003c70:	00171793          	slli	a5,a4,0x1
80003c74:	00078713          	mv	a4,a5
80003c78:	00c70733          	add	a4,a4,a2
80003c7c:	00271793          	slli	a5,a4,0x2
80003c80:	00078713          	mv	a4,a5
80003c84:	00048793          	mv	a5,s1
80003c88:	00379793          	slli	a5,a5,0x3
80003c8c:	009787b3          	add	a5,a5,s1
80003c90:	00279793          	slli	a5,a5,0x2
80003c94:	00f707b3          	add	a5,a4,a5
80003c98:	00f687b3          	add	a5,a3,a5
80003c9c:	0087a703          	lw	a4,8(a5)
80003ca0:	00600793          	li	a5,6
80003ca4:	00e7fc63          	bleu	a4,a5,80003cbc <API_ClearTaskSlotFromTile+0x124>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:270
        prints("returning erro6\n");
80003ca8:	800087b7          	lui	a5,0x80008
80003cac:	8ec78513          	addi	a0,a5,-1812 # 800078ec <__stack_top+0xfffc50ec>
80003cb0:	429010ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:271
        return ERRO;
80003cb4:	fff00793          	li	a5,-1
80003cb8:	0080006f          	j	80003cc0 <API_ClearTaskSlotFromTile+0x128>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:274
    }
    else{
        return 1;
80003cbc:	00100793          	li	a5,1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:278
    }
    prints("returning erro7\n");
    return ERRO;
}
80003cc0:	00078513          	mv	a0,a5
80003cc4:	01c12083          	lw	ra,28(sp)
80003cc8:	01812403          	lw	s0,24(sp)
80003ccc:	01412483          	lw	s1,20(sp)
80003cd0:	02010113          	addi	sp,sp,32
80003cd4:	00008067          	ret

80003cd8 <API_GetSystemTasksSlots>:
API_GetSystemTasksSlots():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:281

// Iterates around the system tiles to sum the amount of tasks slots available
unsigned int API_GetSystemTasksSlots(){
80003cd8:	fe010113          	addi	sp,sp,-32
80003cdc:	00112e23          	sw	ra,28(sp)
80003ce0:	00812c23          	sw	s0,24(sp)
80003ce4:	00912a23          	sw	s1,20(sp)
80003ce8:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:283
    int m, n, i, sum;
    sum = 0;
80003cec:	fe042223          	sw	zero,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:284
    for(m = 0; m < DIM_X; m++){
80003cf0:	fe042623          	sw	zero,-20(s0)
80003cf4:	0a80006f          	j	80003d9c <API_GetSystemTasksSlots+0xc4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:285
        for(n = 0; n < DIM_Y; n++){
80003cf8:	fe042423          	sw	zero,-24(s0)
80003cfc:	0880006f          	j	80003d84 <API_GetSystemTasksSlots+0xac>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:286
            if(makeAddress(m,n) != makeAddress(0,0)){
80003d00:	fec42783          	lw	a5,-20(s0)
80003d04:	fe842703          	lw	a4,-24(s0)
80003d08:	00070593          	mv	a1,a4
80003d0c:	00078513          	mv	a0,a5
80003d10:	090020ef          	jal	ra,80005da0 <makeAddress>
80003d14:	00050493          	mv	s1,a0
80003d18:	00000593          	li	a1,0
80003d1c:	00000513          	li	a0,0
80003d20:	080020ef          	jal	ra,80005da0 <makeAddress>
80003d24:	00050793          	mv	a5,a0
80003d28:	04f48863          	beq	s1,a5,80003d78 <API_GetSystemTasksSlots+0xa0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:287
                sum += Tiles[m][n].taskSlots;
80003d2c:	80022737          	lui	a4,0x80022
80003d30:	fe842783          	lw	a5,-24(s0)
80003d34:	fec42683          	lw	a3,-20(s0)
80003d38:	46470613          	addi	a2,a4,1124 # 80022464 <__stack_top+0xfffdfc64>
80003d3c:	00078713          	mv	a4,a5
80003d40:	00171713          	slli	a4,a4,0x1
80003d44:	00f70733          	add	a4,a4,a5
80003d48:	00271793          	slli	a5,a4,0x2
80003d4c:	00078713          	mv	a4,a5
80003d50:	00068793          	mv	a5,a3
80003d54:	00379793          	slli	a5,a5,0x3
80003d58:	00d787b3          	add	a5,a5,a3
80003d5c:	00279793          	slli	a5,a5,0x2
80003d60:	00f707b3          	add	a5,a4,a5
80003d64:	00f607b3          	add	a5,a2,a5
80003d68:	0087a703          	lw	a4,8(a5)
80003d6c:	fe442783          	lw	a5,-28(s0)
80003d70:	00f707b3          	add	a5,a4,a5
80003d74:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:285 (discriminator 2)
        for(n = 0; n < DIM_Y; n++){
80003d78:	fe842783          	lw	a5,-24(s0)
80003d7c:	00178793          	addi	a5,a5,1
80003d80:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:285 (discriminator 1)
80003d84:	fe842703          	lw	a4,-24(s0)
80003d88:	00200793          	li	a5,2
80003d8c:	f6e7dae3          	ble	a4,a5,80003d00 <API_GetSystemTasksSlots+0x28>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:284 (discriminator 2)
    for(m = 0; m < DIM_X; m++){
80003d90:	fec42783          	lw	a5,-20(s0)
80003d94:	00178793          	addi	a5,a5,1
80003d98:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:284 (discriminator 1)
80003d9c:	fec42703          	lw	a4,-20(s0)
80003da0:	00200793          	li	a5,2
80003da4:	f4e7dae3          	ble	a4,a5,80003cf8 <API_GetSystemTasksSlots+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:291
            }
        }
    }
    return sum;
80003da8:	fe442783          	lw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:292
}
80003dac:	00078513          	mv	a0,a5
80003db0:	01c12083          	lw	ra,28(sp)
80003db4:	01812403          	lw	s0,24(sp)
80003db8:	01412483          	lw	s1,20(sp)
80003dbc:	02010113          	addi	sp,sp,32
80003dc0:	00008067          	ret

80003dc4 <API_RepositoryAllocation>:
API_RepositoryAllocation():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:294

void API_RepositoryAllocation(unsigned int app, unsigned int task, unsigned int dest_addr){
80003dc4:	fd010113          	addi	sp,sp,-48
80003dc8:	02112623          	sw	ra,44(sp)
80003dcc:	02812423          	sw	s0,40(sp)
80003dd0:	03010413          	addi	s0,sp,48
80003dd4:	fca42e23          	sw	a0,-36(s0)
80003dd8:	fcb42c23          	sw	a1,-40(s0)
80003ddc:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:297
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80003de0:	0d0010ef          	jal	ra,80004eb0 <API_GetServiceSlot>
80003de4:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:298
        if(mySlot == PIPE_FULL){
80003de8:	fec42703          	lw	a4,-20(s0)
80003dec:	fdfe07b7          	lui	a5,0xfdfe0
80003df0:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9d5fd>
80003df4:	00f71463          	bne	a4,a5,80003dfc <API_RepositoryAllocation+0x38>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:300
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80003df8:	501020ef          	jal	ra,80006af8 <API_NI_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:302
        }
    }while(mySlot == PIPE_FULL);
80003dfc:	fec42703          	lw	a4,-20(s0)
80003e00:	fdfe07b7          	lui	a5,0xfdfe0
80003e04:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9d5fd>
80003e08:	fcf70ce3          	beq	a4,a5,80003de0 <API_RepositoryAllocation+0x1c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:303
    printsv("I got a free service slo-!! -> ", mySlot);
80003e0c:	fec42783          	lw	a5,-20(s0)
80003e10:	00078593          	mv	a1,a5
80003e14:	800087b7          	lui	a5,0x80008
80003e18:	90078513          	addi	a0,a5,-1792 # 80007900 <__stack_top+0xfffc5100>
80003e1c:	369010ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:305

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80003e20:	800217b7          	lui	a5,0x80021
80003e24:	fec42703          	lw	a4,-20(s0)
80003e28:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
80003e2c:	00070793          	mv	a5,a4
80003e30:	00479793          	slli	a5,a5,0x4
80003e34:	40e787b3          	sub	a5,a5,a4
80003e38:	00279793          	slli	a5,a5,0x2
80003e3c:	00f687b3          	add	a5,a3,a5
80003e40:	feff0737          	lui	a4,0xfeff0
80003e44:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efad6fe>
80003e48:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:307

    ServicePipe[mySlot].header.header           = makeAddress(0, 0) | PERIPH_SOUTH;
80003e4c:	00000593          	li	a1,0
80003e50:	00000513          	li	a0,0
80003e54:	74d010ef          	jal	ra,80005da0 <makeAddress>
80003e58:	00050713          	mv	a4,a0
80003e5c:	000407b7          	lui	a5,0x40
80003e60:	00f766b3          	or	a3,a4,a5
80003e64:	800217b7          	lui	a5,0x80021
80003e68:	fec42703          	lw	a4,-20(s0)
80003e6c:	21c78613          	addi	a2,a5,540 # 8002121c <__stack_top+0xfffdea1c>
80003e70:	00070793          	mv	a5,a4
80003e74:	00479793          	slli	a5,a5,0x4
80003e78:	40e787b3          	sub	a5,a5,a4
80003e7c:	00279793          	slli	a5,a5,0x2
80003e80:	00f607b3          	add	a5,a2,a5
80003e84:	00d7a423          	sw	a3,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:308
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80003e88:	800217b7          	lui	a5,0x80021
80003e8c:	fec42703          	lw	a4,-20(s0)
80003e90:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
80003e94:	00070793          	mv	a5,a4
80003e98:	00479793          	slli	a5,a5,0x4
80003e9c:	40e787b3          	sub	a5,a5,a4
80003ea0:	00279793          	slli	a5,a5,0x2
80003ea4:	00f687b3          	add	a5,a3,a5
80003ea8:	00b00713          	li	a4,11
80003eac:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:309
    ServicePipe[mySlot].header.service          = TASK_ALLOCATION_SEND;
80003eb0:	800217b7          	lui	a5,0x80021
80003eb4:	fec42703          	lw	a4,-20(s0)
80003eb8:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
80003ebc:	00070793          	mv	a5,a4
80003ec0:	00479793          	slli	a5,a5,0x4
80003ec4:	40e787b3          	sub	a5,a5,a4
80003ec8:	00279793          	slli	a5,a5,0x2
80003ecc:	00f687b3          	add	a5,a3,a5
80003ed0:	03000713          	li	a4,48
80003ed4:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:310
    ServicePipe[mySlot].header.task_id          = task;
80003ed8:	800217b7          	lui	a5,0x80021
80003edc:	fec42703          	lw	a4,-20(s0)
80003ee0:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
80003ee4:	00070793          	mv	a5,a4
80003ee8:	00479793          	slli	a5,a5,0x4
80003eec:	40e787b3          	sub	a5,a5,a4
80003ef0:	00279793          	slli	a5,a5,0x2
80003ef4:	00f687b3          	add	a5,a3,a5
80003ef8:	fd842703          	lw	a4,-40(s0)
80003efc:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:311
    ServicePipe[mySlot].header.task_app_id      = app;
80003f00:	800217b7          	lui	a5,0x80021
80003f04:	fec42703          	lw	a4,-20(s0)
80003f08:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
80003f0c:	00070793          	mv	a5,a4
80003f10:	00479793          	slli	a5,a5,0x4
80003f14:	40e787b3          	sub	a5,a5,a4
80003f18:	00279793          	slli	a5,a5,0x2
80003f1c:	00f687b3          	add	a5,a3,a5
80003f20:	fdc42703          	lw	a4,-36(s0)
80003f24:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:312
    ServicePipe[mySlot].header.task_dest_addr   = dest_addr;
80003f28:	800217b7          	lui	a5,0x80021
80003f2c:	fec42703          	lw	a4,-20(s0)
80003f30:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
80003f34:	00070793          	mv	a5,a4
80003f38:	00479793          	slli	a5,a5,0x4
80003f3c:	40e787b3          	sub	a5,a5,a4
80003f40:	00279793          	slli	a5,a5,0x2
80003f44:	00f687b3          	add	a5,a3,a5
80003f48:	fd442703          	lw	a4,-44(s0)
80003f4c:	02e7ac23          	sw	a4,56(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:314

    API_PushSendQueue(SERVICE, mySlot);
80003f50:	fec42583          	lw	a1,-20(s0)
80003f54:	10100537          	lui	a0,0x10100
80003f58:	689010ef          	jal	ra,80005de0 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:315
    return;    
80003f5c:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:316
}
80003f60:	02c12083          	lw	ra,44(sp)
80003f64:	02812403          	lw	s0,40(sp)
80003f68:	03010113          	addi	sp,sp,48
80003f6c:	00008067          	ret

80003f70 <API_TaskAllocated>:
API_TaskAllocated():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:318

void API_TaskAllocated(unsigned int task_id, unsigned int app_id){
80003f70:	fd010113          	addi	sp,sp,-48
80003f74:	02112623          	sw	ra,44(sp)
80003f78:	02812423          	sw	s0,40(sp)
80003f7c:	03010413          	addi	s0,sp,48
80003f80:	fca42e23          	sw	a0,-36(s0)
80003f84:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:320
    unsigned int i;
    applications[app_id].tasks[task_id].status = TASK_ALLOCATED;
80003f88:	80022737          	lui	a4,0x80022
80003f8c:	fdc42783          	lw	a5,-36(s0)
80003f90:	fd842683          	lw	a3,-40(s0)
80003f94:	cb870613          	addi	a2,a4,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80003f98:	00078713          	mv	a4,a5
80003f9c:	00171713          	slli	a4,a4,0x1
80003fa0:	00f70733          	add	a4,a4,a5
80003fa4:	00271793          	slli	a5,a4,0x2
80003fa8:	00078713          	mv	a4,a5
80003fac:	00068793          	mv	a5,a3
80003fb0:	00279793          	slli	a5,a5,0x2
80003fb4:	00d787b3          	add	a5,a5,a3
80003fb8:	00579793          	slli	a5,a5,0x5
80003fbc:	00f707b3          	add	a5,a4,a5
80003fc0:	00f607b3          	add	a5,a2,a5
80003fc4:	00400713          	li	a4,4
80003fc8:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:322

    for(i = 0; i < applications[app_id].numTasks; i++){
80003fcc:	fe042623          	sw	zero,-20(s0)
80003fd0:	0580006f          	j	80004028 <API_TaskAllocated+0xb8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:323
        if(applications[app_id].tasks[i].status != TASK_ALLOCATED){
80003fd4:	80022737          	lui	a4,0x80022
80003fd8:	fec42783          	lw	a5,-20(s0)
80003fdc:	fd842683          	lw	a3,-40(s0)
80003fe0:	cb870613          	addi	a2,a4,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80003fe4:	00078713          	mv	a4,a5
80003fe8:	00171713          	slli	a4,a4,0x1
80003fec:	00f70733          	add	a4,a4,a5
80003ff0:	00271793          	slli	a5,a4,0x2
80003ff4:	00078713          	mv	a4,a5
80003ff8:	00068793          	mv	a5,a3
80003ffc:	00279793          	slli	a5,a5,0x2
80004000:	00d787b3          	add	a5,a5,a3
80004004:	00579793          	slli	a5,a5,0x5
80004008:	00f707b3          	add	a5,a4,a5
8000400c:	00f607b3          	add	a5,a2,a5
80004010:	0147a703          	lw	a4,20(a5)
80004014:	00400793          	li	a5,4
80004018:	06f71663          	bne	a4,a5,80004084 <API_TaskAllocated+0x114>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:322 (discriminator 2)
    for(i = 0; i < applications[app_id].numTasks; i++){
8000401c:	fec42783          	lw	a5,-20(s0)
80004020:	00178793          	addi	a5,a5,1
80004024:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:322 (discriminator 1)
80004028:	800226b7          	lui	a3,0x80022
8000402c:	fd842703          	lw	a4,-40(s0)
80004030:	00070793          	mv	a5,a4
80004034:	00279793          	slli	a5,a5,0x2
80004038:	00e787b3          	add	a5,a5,a4
8000403c:	00579793          	slli	a5,a5,0x5
80004040:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80004044:	00e787b3          	add	a5,a5,a4
80004048:	0107a783          	lw	a5,16(a5)
8000404c:	fec42703          	lw	a4,-20(s0)
80004050:	f8f762e3          	bltu	a4,a5,80003fd4 <API_TaskAllocated+0x64>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:328
            //printi(i);
            return;
        }
    }
    printsv("Application allocated: ", app_id);
80004054:	fd842783          	lw	a5,-40(s0)
80004058:	00078593          	mv	a1,a5
8000405c:	800087b7          	lui	a5,0x80008
80004060:	92078513          	addi	a0,a5,-1760 # 80007920 <__stack_top+0xfffc5120>
80004064:	121010ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:329
    API_ApplicationStart(app_id);
80004068:	fd842503          	lw	a0,-40(s0)
8000406c:	02c000ef          	jal	ra,80004098 <API_ApplicationStart>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:330
    prints("\tStart command sent to every task.\n");
80004070:	800087b7          	lui	a5,0x80008
80004074:	93878513          	addi	a0,a5,-1736 # 80007938 <__stack_top+0xfffc5138>
80004078:	061010ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:331
    return;
8000407c:	00000013          	nop
80004080:	0080006f          	j	80004088 <API_TaskAllocated+0x118>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:325
            return;
80004084:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:332
}
80004088:	02c12083          	lw	ra,44(sp)
8000408c:	02812403          	lw	s0,40(sp)
80004090:	03010113          	addi	sp,sp,48
80004094:	00008067          	ret

80004098 <API_ApplicationStart>:
API_ApplicationStart():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:334

void API_ApplicationStart(unsigned int app_id){
80004098:	fd010113          	addi	sp,sp,-48
8000409c:	02112623          	sw	ra,44(sp)
800040a0:	02812423          	sw	s0,40(sp)
800040a4:	03010413          	addi	s0,sp,48
800040a8:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:337
    unsigned int i, j;
    unsigned int mySlot;
    for(i = 0; i < applications[app_id].numTasks; i++){
800040ac:	fe042623          	sw	zero,-20(s0)
800040b0:	2640006f          	j	80004314 <API_ApplicationStart+0x27c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:339
        do{
            mySlot = API_GetMessageSlot();
800040b4:	4a1000ef          	jal	ra,80004d54 <API_GetMessageSlot>
800040b8:	fea42223          	sw	a0,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:340
            if(mySlot == PIPE_FULL){
800040bc:	fe442703          	lw	a4,-28(s0)
800040c0:	fdfe07b7          	lui	a5,0xfdfe0
800040c4:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9d5fd>
800040c8:	00f71463          	bne	a4,a5,800040d0 <API_ApplicationStart+0x38>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:342
                // Runs the NI Handler to send/receive packets, opening space in the PIPE
                API_NI_Handler();
800040cc:	22d020ef          	jal	ra,80006af8 <API_NI_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:344
            }
        }while(mySlot == PIPE_FULL);
800040d0:	fe442703          	lw	a4,-28(s0)
800040d4:	fdfe07b7          	lui	a5,0xfdfe0
800040d8:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9d5fd>
800040dc:	fcf70ce3          	beq	a4,a5,800040b4 <API_ApplicationStart+0x1c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:346

        MessagePipe[mySlot].holder = PIPE_SYS_HOLDER;
800040e0:	800217b7          	lui	a5,0x80021
800040e4:	fe442683          	lw	a3,-28(s0)
800040e8:	38078713          	addi	a4,a5,896 # 80021380 <__stack_top+0xfffdeb80>
800040ec:	24400793          	li	a5,580
800040f0:	02f687b3          	mul	a5,a3,a5
800040f4:	00f707b3          	add	a5,a4,a5
800040f8:	feff0737          	lui	a4,0xfeff0
800040fc:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efad6fe>
80004100:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:348

        MessagePipe[mySlot].header.header           = applications[app_id].tasks[i].addr;
80004104:	80022737          	lui	a4,0x80022
80004108:	fec42783          	lw	a5,-20(s0)
8000410c:	fdc42683          	lw	a3,-36(s0)
80004110:	cb870613          	addi	a2,a4,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80004114:	00078713          	mv	a4,a5
80004118:	00171713          	slli	a4,a4,0x1
8000411c:	00f70733          	add	a4,a4,a5
80004120:	00271793          	slli	a5,a4,0x2
80004124:	00078713          	mv	a4,a5
80004128:	00068793          	mv	a5,a3
8000412c:	00279793          	slli	a5,a5,0x2
80004130:	00d787b3          	add	a5,a5,a3
80004134:	00579793          	slli	a5,a5,0x5
80004138:	00f707b3          	add	a5,a4,a5
8000413c:	00f607b3          	add	a5,a2,a5
80004140:	0187a703          	lw	a4,24(a5)
80004144:	800217b7          	lui	a5,0x80021
80004148:	fe442603          	lw	a2,-28(s0)
8000414c:	38078693          	addi	a3,a5,896 # 80021380 <__stack_top+0xfffdeb80>
80004150:	24400793          	li	a5,580
80004154:	02f607b3          	mul	a5,a2,a5
80004158:	00f687b3          	add	a5,a3,a5
8000415c:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:349
        MessagePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE + applications[app_id].numTasks + 1;
80004160:	800226b7          	lui	a3,0x80022
80004164:	fdc42703          	lw	a4,-36(s0)
80004168:	00070793          	mv	a5,a4
8000416c:	00279793          	slli	a5,a5,0x2
80004170:	00e787b3          	add	a5,a5,a4
80004174:	00579793          	slli	a5,a5,0x5
80004178:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
8000417c:	00e787b3          	add	a5,a5,a4
80004180:	0107a783          	lw	a5,16(a5)
80004184:	00c78713          	addi	a4,a5,12
80004188:	800217b7          	lui	a5,0x80021
8000418c:	fe442603          	lw	a2,-28(s0)
80004190:	38078693          	addi	a3,a5,896 # 80021380 <__stack_top+0xfffdeb80>
80004194:	24400793          	li	a5,580
80004198:	02f607b3          	mul	a5,a2,a5
8000419c:	00f687b3          	add	a5,a3,a5
800041a0:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:350
        MessagePipe[mySlot].header.service          = TASK_START;
800041a4:	800217b7          	lui	a5,0x80021
800041a8:	fe442683          	lw	a3,-28(s0)
800041ac:	38078713          	addi	a4,a5,896 # 80021380 <__stack_top+0xfffdeb80>
800041b0:	24400793          	li	a5,580
800041b4:	02f687b3          	mul	a5,a3,a5
800041b8:	00f707b3          	add	a5,a4,a5
800041bc:	40000713          	li	a4,1024
800041c0:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:351
        MessagePipe[mySlot].header.task_id          = i;
800041c4:	800217b7          	lui	a5,0x80021
800041c8:	fe442683          	lw	a3,-28(s0)
800041cc:	38078713          	addi	a4,a5,896 # 80021380 <__stack_top+0xfffdeb80>
800041d0:	24400793          	li	a5,580
800041d4:	02f687b3          	mul	a5,a3,a5
800041d8:	00f707b3          	add	a5,a4,a5
800041dc:	fec42703          	lw	a4,-20(s0)
800041e0:	00e7ac23          	sw	a4,24(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:352
        MessagePipe[mySlot].header.task_app_id      = app_id;
800041e4:	800217b7          	lui	a5,0x80021
800041e8:	fe442683          	lw	a3,-28(s0)
800041ec:	38078713          	addi	a4,a5,896 # 80021380 <__stack_top+0xfffdeb80>
800041f0:	24400793          	li	a5,580
800041f4:	02f687b3          	mul	a5,a3,a5
800041f8:	00f707b3          	add	a5,a4,a5
800041fc:	fdc42703          	lw	a4,-36(s0)
80004200:	02e7a423          	sw	a4,40(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:353
        MessagePipe[mySlot].msg.length              = applications[app_id].numTasks;
80004204:	800226b7          	lui	a3,0x80022
80004208:	fdc42703          	lw	a4,-36(s0)
8000420c:	00070793          	mv	a5,a4
80004210:	00279793          	slli	a5,a5,0x2
80004214:	00e787b3          	add	a5,a5,a4
80004218:	00579793          	slli	a5,a5,0x5
8000421c:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80004220:	00e787b3          	add	a5,a5,a4
80004224:	0107a703          	lw	a4,16(a5)
80004228:	800217b7          	lui	a5,0x80021
8000422c:	fe442603          	lw	a2,-28(s0)
80004230:	24400693          	li	a3,580
80004234:	02d606b3          	mul	a3,a2,a3
80004238:	38078793          	addi	a5,a5,896 # 80021380 <__stack_top+0xfffdeb80>
8000423c:	00f687b3          	add	a5,a3,a5
80004240:	04e7a023          	sw	a4,64(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:354
        for(j = 0; j < applications[app_id].numTasks; j++){
80004244:	fe042423          	sw	zero,-24(s0)
80004248:	0880006f          	j	800042d0 <API_ApplicationStart+0x238>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:355 (discriminator 3)
            MessagePipe[mySlot].msg.msg[j]          = applications[app_id].tasks[j].addr;
8000424c:	80022737          	lui	a4,0x80022
80004250:	fe842783          	lw	a5,-24(s0)
80004254:	fdc42683          	lw	a3,-36(s0)
80004258:	cb870613          	addi	a2,a4,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
8000425c:	00078713          	mv	a4,a5
80004260:	00171713          	slli	a4,a4,0x1
80004264:	00f70733          	add	a4,a4,a5
80004268:	00271793          	slli	a5,a4,0x2
8000426c:	00078713          	mv	a4,a5
80004270:	00068793          	mv	a5,a3
80004274:	00279793          	slli	a5,a5,0x2
80004278:	00d787b3          	add	a5,a5,a3
8000427c:	00579793          	slli	a5,a5,0x5
80004280:	00f707b3          	add	a5,a4,a5
80004284:	00f607b3          	add	a5,a2,a5
80004288:	0187a683          	lw	a3,24(a5)
8000428c:	80021637          	lui	a2,0x80021
80004290:	fe442703          	lw	a4,-28(s0)
80004294:	00070793          	mv	a5,a4
80004298:	00379793          	slli	a5,a5,0x3
8000429c:	00e787b3          	add	a5,a5,a4
800042a0:	00479793          	slli	a5,a5,0x4
800042a4:	00e787b3          	add	a5,a5,a4
800042a8:	fe842703          	lw	a4,-24(s0)
800042ac:	00e787b3          	add	a5,a5,a4
800042b0:	01078793          	addi	a5,a5,16
800042b4:	38060713          	addi	a4,a2,896 # 80021380 <__stack_top+0xfffdeb80>
800042b8:	00279793          	slli	a5,a5,0x2
800042bc:	00f707b3          	add	a5,a4,a5
800042c0:	00d7a223          	sw	a3,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:354 (discriminator 3)
        for(j = 0; j < applications[app_id].numTasks; j++){
800042c4:	fe842783          	lw	a5,-24(s0)
800042c8:	00178793          	addi	a5,a5,1
800042cc:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:354 (discriminator 1)
800042d0:	800226b7          	lui	a3,0x80022
800042d4:	fdc42703          	lw	a4,-36(s0)
800042d8:	00070793          	mv	a5,a4
800042dc:	00279793          	slli	a5,a5,0x2
800042e0:	00e787b3          	add	a5,a5,a4
800042e4:	00579793          	slli	a5,a5,0x5
800042e8:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
800042ec:	00e787b3          	add	a5,a5,a4
800042f0:	0107a783          	lw	a5,16(a5)
800042f4:	fe842703          	lw	a4,-24(s0)
800042f8:	f4f76ae3          	bltu	a4,a5,8000424c <API_ApplicationStart+0x1b4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:357 (discriminator 2)
        }
        API_PushSendQueue(MESSAGE, mySlot);
800042fc:	fe442583          	lw	a1,-28(s0)
80004300:	20200537          	lui	a0,0x20200
80004304:	2dd010ef          	jal	ra,80005de0 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:337 (discriminator 2)
    for(i = 0; i < applications[app_id].numTasks; i++){
80004308:	fec42783          	lw	a5,-20(s0)
8000430c:	00178793          	addi	a5,a5,1
80004310:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:337 (discriminator 1)
80004314:	800226b7          	lui	a3,0x80022
80004318:	fdc42703          	lw	a4,-36(s0)
8000431c:	00070793          	mv	a5,a4
80004320:	00279793          	slli	a5,a5,0x2
80004324:	00e787b3          	add	a5,a5,a4
80004328:	00579793          	slli	a5,a5,0x5
8000432c:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdf4b8>
80004330:	00e787b3          	add	a5,a5,a4
80004334:	0107a783          	lw	a5,16(a5)
80004338:	fec42703          	lw	a4,-20(s0)
8000433c:	d6f76ce3          	bltu	a4,a5,800040b4 <API_ApplicationStart+0x1c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:359
    }
    return;
80004340:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:360
}
80004344:	02c12083          	lw	ra,44(sp)
80004348:	02812403          	lw	s0,40(sp)
8000434c:	03010113          	addi	sp,sp,48
80004350:	00008067          	ret

80004354 <API_TaskListInit>:
API_TaskListInit():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:13
#include "chronos.h"

// Stores information about each running task
//extern volatile Task TaskList[ NUM_MAX_TASKS ];

void API_TaskListInit(){
80004354:	fe010113          	addi	sp,sp,-32
80004358:	00812e23          	sw	s0,28(sp)
8000435c:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:15
    unsigned int i, j;
    for (i = 0; i < NUM_MAX_TASKS; i++){
80004360:	fe042623          	sw	zero,-20(s0)
80004364:	0840006f          	j	800043e8 <API_TaskListInit+0x94>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:16
        TaskList[i].status = TASK_SLOT_EMPTY;
80004368:	800226b7          	lui	a3,0x80022
8000436c:	fec42703          	lw	a4,-20(s0)
80004370:	00070793          	mv	a5,a4
80004374:	00579793          	slli	a5,a5,0x5
80004378:	00e787b3          	add	a5,a5,a4
8000437c:	00279793          	slli	a5,a5,0x2
80004380:	4d068713          	addi	a4,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80004384:	00e787b3          	add	a5,a5,a4
80004388:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:17
        for (j = 0; j < NUM_MAX_APP_TASKS; j++){
8000438c:	fe042423          	sw	zero,-24(s0)
80004390:	0400006f          	j	800043d0 <API_TaskListInit+0x7c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:18 (discriminator 3)
            TaskList[i].PendingReq[j] = FALSE;
80004394:	800226b7          	lui	a3,0x80022
80004398:	fec42703          	lw	a4,-20(s0)
8000439c:	00070793          	mv	a5,a4
800043a0:	00579793          	slli	a5,a5,0x5
800043a4:	00e787b3          	add	a5,a5,a4
800043a8:	fe842703          	lw	a4,-24(s0)
800043ac:	00e787b3          	add	a5,a5,a4
800043b0:	00c78793          	addi	a5,a5,12
800043b4:	00279713          	slli	a4,a5,0x2
800043b8:	4d068793          	addi	a5,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
800043bc:	00f707b3          	add	a5,a4,a5
800043c0:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:17 (discriminator 3)
        for (j = 0; j < NUM_MAX_APP_TASKS; j++){
800043c4:	fe842783          	lw	a5,-24(s0)
800043c8:	00178793          	addi	a5,a5,1
800043cc:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:17 (discriminator 1)
800043d0:	fe842703          	lw	a4,-24(s0)
800043d4:	00900793          	li	a5,9
800043d8:	fae7fee3          	bleu	a4,a5,80004394 <API_TaskListInit+0x40>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 2)
    for (i = 0; i < NUM_MAX_TASKS; i++){
800043dc:	fec42783          	lw	a5,-20(s0)
800043e0:	00178793          	addi	a5,a5,1
800043e4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 1)
800043e8:	fec42703          	lw	a4,-20(s0)
800043ec:	00500793          	li	a5,5
800043f0:	f6e7fce3          	bleu	a4,a5,80004368 <API_TaskListInit+0x14>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:21
        }
    }
    return;
800043f4:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:22
}
800043f8:	01c12403          	lw	s0,28(sp)
800043fc:	02010113          	addi	sp,sp,32
80004400:	00008067          	ret

80004404 <API_GetCurrentTaskSlot>:
API_GetCurrentTaskSlot():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:24

unsigned int API_GetCurrentTaskSlot(){
80004404:	fe010113          	addi	sp,sp,-32
80004408:	00112e23          	sw	ra,28(sp)
8000440c:	00812c23          	sw	s0,24(sp)
80004410:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:26
    // The handle of the currently running ( calling ) task on the kernel.
    TaskHandle_t xHandle = xTaskGetCurrentTaskHandle();
80004414:	85dfe0ef          	jal	ra,80002c70 <xTaskGetCurrentTaskHandle>
80004418:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:27
    unsigned int i = 0;
8000441c:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:28
    for ( i = 0 ; i < NUM_MAX_TASKS ; i++ ) {
80004420:	fe042623          	sw	zero,-20(s0)
80004424:	06c0006f          	j	80004490 <API_GetCurrentTaskSlot+0x8c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:29
        if ( TaskList[ i ].TaskHandler == xHandle && TaskList[i].status != TASK_SLOT_EMPTY ) {
80004428:	800227b7          	lui	a5,0x80022
8000442c:	fec42703          	lw	a4,-20(s0)
80004430:	4d078693          	addi	a3,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80004434:	00070793          	mv	a5,a4
80004438:	00579793          	slli	a5,a5,0x5
8000443c:	00e787b3          	add	a5,a5,a4
80004440:	00279793          	slli	a5,a5,0x2
80004444:	00f687b3          	add	a5,a3,a5
80004448:	0187a783          	lw	a5,24(a5)
8000444c:	fe842703          	lw	a4,-24(s0)
80004450:	02f71a63          	bne	a4,a5,80004484 <API_GetCurrentTaskSlot+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:29 (discriminator 1)
80004454:	800226b7          	lui	a3,0x80022
80004458:	fec42703          	lw	a4,-20(s0)
8000445c:	00070793          	mv	a5,a4
80004460:	00579793          	slli	a5,a5,0x5
80004464:	00e787b3          	add	a5,a5,a4
80004468:	00279793          	slli	a5,a5,0x2
8000446c:	4d068713          	addi	a4,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80004470:	00e787b3          	add	a5,a5,a4
80004474:	0007a783          	lw	a5,0(a5)
80004478:	00078663          	beqz	a5,80004484 <API_GetCurrentTaskSlot+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:30
            return( i );
8000447c:	fec42783          	lw	a5,-20(s0)
80004480:	02c0006f          	j	800044ac <API_GetCurrentTaskSlot+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:28 (discriminator 2)
    for ( i = 0 ; i < NUM_MAX_TASKS ; i++ ) {
80004484:	fec42783          	lw	a5,-20(s0)
80004488:	00178793          	addi	a5,a5,1
8000448c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:28 (discriminator 1)
80004490:	fec42703          	lw	a4,-20(s0)
80004494:	00500793          	li	a5,5
80004498:	f8e7f8e3          	bleu	a4,a5,80004428 <API_GetCurrentTaskSlot+0x24>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:33
        }
    }
    prints("returning erro0\n");
8000449c:	800087b7          	lui	a5,0x80008
800044a0:	95c78513          	addi	a0,a5,-1700 # 8000795c <__stack_top+0xfffc515c>
800044a4:	434010ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:34
    return ERRO;
800044a8:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:35
}
800044ac:	00078513          	mv	a0,a5
800044b0:	01c12083          	lw	ra,28(sp)
800044b4:	01812403          	lw	s0,24(sp)
800044b8:	02010113          	addi	sp,sp,32
800044bc:	00008067          	ret

800044c0 <API_GetFreeTaskSlot>:
API_GetFreeTaskSlot():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:37

unsigned int API_GetFreeTaskSlot(){
800044c0:	fe010113          	addi	sp,sp,-32
800044c4:	00112e23          	sw	ra,28(sp)
800044c8:	00812c23          	sw	s0,24(sp)
800044cc:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:39
    unsigned int i;
    for (i = 0; i < NUM_MAX_TASKS; i++){
800044d0:	fe042623          	sw	zero,-20(s0)
800044d4:	0400006f          	j	80004514 <API_GetFreeTaskSlot+0x54>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:40
        if (TaskList[i].status == TASK_SLOT_EMPTY){
800044d8:	800226b7          	lui	a3,0x80022
800044dc:	fec42703          	lw	a4,-20(s0)
800044e0:	00070793          	mv	a5,a4
800044e4:	00579793          	slli	a5,a5,0x5
800044e8:	00e787b3          	add	a5,a5,a4
800044ec:	00279793          	slli	a5,a5,0x2
800044f0:	4d068713          	addi	a4,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
800044f4:	00e787b3          	add	a5,a5,a4
800044f8:	0007a783          	lw	a5,0(a5)
800044fc:	00079663          	bnez	a5,80004508 <API_GetFreeTaskSlot+0x48>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:41
            return i;
80004500:	fec42783          	lw	a5,-20(s0)
80004504:	02c0006f          	j	80004530 <API_GetFreeTaskSlot+0x70>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:39 (discriminator 2)
    for (i = 0; i < NUM_MAX_TASKS; i++){
80004508:	fec42783          	lw	a5,-20(s0)
8000450c:	00178793          	addi	a5,a5,1
80004510:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:39 (discriminator 1)
80004514:	fec42703          	lw	a4,-20(s0)
80004518:	00500793          	li	a5,5
8000451c:	fae7fee3          	bleu	a4,a5,800044d8 <API_GetFreeTaskSlot+0x18>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:44
        }
    }
    prints("returning erro1\n");
80004520:	800087b7          	lui	a5,0x80008
80004524:	97078513          	addi	a0,a5,-1680 # 80007970 <__stack_top+0xfffc5170>
80004528:	3b0010ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:45
    return ERRO;
8000452c:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:46
}
80004530:	00078513          	mv	a0,a5
80004534:	01c12083          	lw	ra,28(sp)
80004538:	01812403          	lw	s0,24(sp)
8000453c:	02010113          	addi	sp,sp,32
80004540:	00008067          	ret

80004544 <API_TaskAllocation>:
API_TaskAllocation():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:48

unsigned int API_TaskAllocation(unsigned int task_id, unsigned int txt_size, unsigned int bss_size, unsigned int start_point, unsigned int task_app_id){
80004544:	fc010113          	addi	sp,sp,-64
80004548:	02112e23          	sw	ra,60(sp)
8000454c:	02812c23          	sw	s0,56(sp)
80004550:	04010413          	addi	s0,sp,64
80004554:	fca42e23          	sw	a0,-36(s0)
80004558:	fcb42c23          	sw	a1,-40(s0)
8000455c:	fcc42a23          	sw	a2,-44(s0)
80004560:	fcd42823          	sw	a3,-48(s0)
80004564:	fce42623          	sw	a4,-52(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:49
    unsigned int tslot = API_GetFreeTaskSlot();
80004568:	f59ff0ef          	jal	ra,800044c0 <API_GetFreeTaskSlot>
8000456c:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:51
    int i;
    if(tslot == ERRO){
80004570:	fe842703          	lw	a4,-24(s0)
80004574:	fff00793          	li	a5,-1
80004578:	00f71863          	bne	a4,a5,80004588 <API_TaskAllocation+0x44>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:52
        prints("DEU RUIM NO API_GetFreeTaskSlot()\n");
8000457c:	800087b7          	lui	a5,0x80008
80004580:	98478513          	addi	a0,a5,-1660 # 80007984 <__stack_top+0xfffc5184>
80004584:	354010ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:54
    }
    printsv("Got slot: ", tslot);
80004588:	fe842783          	lw	a5,-24(s0)
8000458c:	00078593          	mv	a1,a5
80004590:	800087b7          	lui	a5,0x80008
80004594:	9a878513          	addi	a0,a5,-1624 # 800079a8 <__stack_top+0xfffc51a8>
80004598:	3ec010ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:55
    TaskList[tslot].status = TASK_SLOT_WAITING_START;
8000459c:	800226b7          	lui	a3,0x80022
800045a0:	fe842703          	lw	a4,-24(s0)
800045a4:	00070793          	mv	a5,a4
800045a8:	00579793          	slli	a5,a5,0x5
800045ac:	00e787b3          	add	a5,a5,a4
800045b0:	00279793          	slli	a5,a5,0x2
800045b4:	4d068713          	addi	a4,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
800045b8:	00e787b3          	add	a5,a5,a4
800045bc:	00200713          	li	a4,2
800045c0:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:56
    TaskList[tslot].waitingMsg = FALSE;
800045c4:	800227b7          	lui	a5,0x80022
800045c8:	fe842703          	lw	a4,-24(s0)
800045cc:	4d078693          	addi	a3,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
800045d0:	00070793          	mv	a5,a4
800045d4:	00579793          	slli	a5,a5,0x5
800045d8:	00e787b3          	add	a5,a5,a4
800045dc:	00279793          	slli	a5,a5,0x2
800045e0:	00f687b3          	add	a5,a3,a5
800045e4:	0007ae23          	sw	zero,28(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:57
    TaskList[tslot].TaskID = task_id;
800045e8:	800226b7          	lui	a3,0x80022
800045ec:	fe842703          	lw	a4,-24(s0)
800045f0:	00070793          	mv	a5,a4
800045f4:	00579793          	slli	a5,a5,0x5
800045f8:	00e787b3          	add	a5,a5,a4
800045fc:	00279793          	slli	a5,a5,0x2
80004600:	4d068713          	addi	a4,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80004604:	00e787b3          	add	a5,a5,a4
80004608:	fdc42703          	lw	a4,-36(s0)
8000460c:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:58
    TaskList[tslot].AppID = task_app_id;
80004610:	800227b7          	lui	a5,0x80022
80004614:	fe842703          	lw	a4,-24(s0)
80004618:	4d078693          	addi	a3,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
8000461c:	00070793          	mv	a5,a4
80004620:	00579793          	slli	a5,a5,0x5
80004624:	00e787b3          	add	a5,a5,a4
80004628:	00279793          	slli	a5,a5,0x2
8000462c:	00f687b3          	add	a5,a3,a5
80004630:	fcc42703          	lw	a4,-52(s0)
80004634:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:59
    TaskList[tslot].taskSize = 4 * (txt_size + bss_size); // it multiply by four because each word has 32 bits and the memory is addressed by byte - so each word is composed by 4 addresses
80004638:	fd842703          	lw	a4,-40(s0)
8000463c:	fd442783          	lw	a5,-44(s0)
80004640:	00f707b3          	add	a5,a4,a5
80004644:	00279693          	slli	a3,a5,0x2
80004648:	800227b7          	lui	a5,0x80022
8000464c:	fe842703          	lw	a4,-24(s0)
80004650:	4d078613          	addi	a2,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80004654:	00070793          	mv	a5,a4
80004658:	00579793          	slli	a5,a5,0x5
8000465c:	00e787b3          	add	a5,a5,a4
80004660:	00279793          	slli	a5,a5,0x2
80004664:	00f607b3          	add	a5,a2,a5
80004668:	02d7a223          	sw	a3,36(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:60
    printsv("Task total size (txt+bss): ", TaskList[tslot].taskSize);
8000466c:	800227b7          	lui	a5,0x80022
80004670:	fe842703          	lw	a4,-24(s0)
80004674:	4d078693          	addi	a3,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80004678:	00070793          	mv	a5,a4
8000467c:	00579793          	slli	a5,a5,0x5
80004680:	00e787b3          	add	a5,a5,a4
80004684:	00279793          	slli	a5,a5,0x2
80004688:	00f687b3          	add	a5,a3,a5
8000468c:	0247a783          	lw	a5,36(a5)
80004690:	00078593          	mv	a1,a5
80004694:	800087b7          	lui	a5,0x80008
80004698:	9b478513          	addi	a0,a5,-1612 # 800079b4 <__stack_top+0xfffc51b4>
8000469c:	2e8010ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:61
    TaskList[tslot].taskAddr = (unsigned int)pvPortMalloc(TaskList[tslot].taskSize+64);
800046a0:	800227b7          	lui	a5,0x80022
800046a4:	fe842703          	lw	a4,-24(s0)
800046a8:	4d078693          	addi	a3,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
800046ac:	00070793          	mv	a5,a4
800046b0:	00579793          	slli	a5,a5,0x5
800046b4:	00e787b3          	add	a5,a5,a4
800046b8:	00279793          	slli	a5,a5,0x2
800046bc:	00f687b3          	add	a5,a3,a5
800046c0:	0247a783          	lw	a5,36(a5)
800046c4:	04078793          	addi	a5,a5,64
800046c8:	00078513          	mv	a0,a5
800046cc:	c1dfc0ef          	jal	ra,800012e8 <pvPortMalloc>
800046d0:	00050793          	mv	a5,a0
800046d4:	00078613          	mv	a2,a5
800046d8:	800227b7          	lui	a5,0x80022
800046dc:	fe842703          	lw	a4,-24(s0)
800046e0:	4d078693          	addi	a3,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
800046e4:	00070793          	mv	a5,a4
800046e8:	00579793          	slli	a5,a5,0x5
800046ec:	00e787b3          	add	a5,a5,a4
800046f0:	00279793          	slli	a5,a5,0x2
800046f4:	00f687b3          	add	a5,a3,a5
800046f8:	02c7a423          	sw	a2,40(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:62
    printsv("Task addr: ", TaskList[tslot].taskAddr);
800046fc:	800227b7          	lui	a5,0x80022
80004700:	fe842703          	lw	a4,-24(s0)
80004704:	4d078693          	addi	a3,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80004708:	00070793          	mv	a5,a4
8000470c:	00579793          	slli	a5,a5,0x5
80004710:	00e787b3          	add	a5,a5,a4
80004714:	00279793          	slli	a5,a5,0x2
80004718:	00f687b3          	add	a5,a3,a5
8000471c:	0287a783          	lw	a5,40(a5)
80004720:	00078593          	mv	a1,a5
80004724:	800087b7          	lui	a5,0x80008
80004728:	9d078513          	addi	a0,a5,-1584 # 800079d0 <__stack_top+0xfffc51d0>
8000472c:	258010ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:63
    TaskList[tslot].mainAddr =  TaskList[tslot].taskAddr + (4 * start_point);
80004730:	800227b7          	lui	a5,0x80022
80004734:	fe842703          	lw	a4,-24(s0)
80004738:	4d078693          	addi	a3,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
8000473c:	00070793          	mv	a5,a4
80004740:	00579793          	slli	a5,a5,0x5
80004744:	00e787b3          	add	a5,a5,a4
80004748:	00279793          	slli	a5,a5,0x2
8000474c:	00f687b3          	add	a5,a3,a5
80004750:	0287a703          	lw	a4,40(a5)
80004754:	fd042783          	lw	a5,-48(s0)
80004758:	00279793          	slli	a5,a5,0x2
8000475c:	00f706b3          	add	a3,a4,a5
80004760:	800227b7          	lui	a5,0x80022
80004764:	fe842703          	lw	a4,-24(s0)
80004768:	4d078613          	addi	a2,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
8000476c:	00070793          	mv	a5,a4
80004770:	00579793          	slli	a5,a5,0x5
80004774:	00e787b3          	add	a5,a5,a4
80004778:	00279793          	slli	a5,a5,0x2
8000477c:	00f607b3          	add	a5,a2,a5
80004780:	02d7a623          	sw	a3,44(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:69

    // filling the MemoryRegion_t struct
    //TaskList[tslot].memRegion.ulLengthInBytes = 0;// TaskList[tslot].taskSize;
    //TaskList[tslot].memRegion.pvBaseAddress = 0;//TaskList[tslot].taskAddr;

    for(i=0;i<NUM_MAX_APP_TASKS;i++){
80004784:	fe042623          	sw	zero,-20(s0)
80004788:	0700006f          	j	800047f8 <API_TaskAllocation+0x2b4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:70 (discriminator 3)
        TaskList[tslot].PendingReq[i] = FALSE;
8000478c:	800226b7          	lui	a3,0x80022
80004790:	fe842703          	lw	a4,-24(s0)
80004794:	00070793          	mv	a5,a4
80004798:	00579793          	slli	a5,a5,0x5
8000479c:	00e787b3          	add	a5,a5,a4
800047a0:	fec42703          	lw	a4,-20(s0)
800047a4:	00e787b3          	add	a5,a5,a4
800047a8:	00c78793          	addi	a5,a5,12
800047ac:	00279713          	slli	a4,a5,0x2
800047b0:	4d068793          	addi	a5,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
800047b4:	00f707b3          	add	a5,a4,a5
800047b8:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:71 (discriminator 3)
        TaskList[tslot].TasksMap[i] = 0;
800047bc:	800226b7          	lui	a3,0x80022
800047c0:	fe842703          	lw	a4,-24(s0)
800047c4:	00070793          	mv	a5,a4
800047c8:	00579793          	slli	a5,a5,0x5
800047cc:	00e787b3          	add	a5,a5,a4
800047d0:	fec42703          	lw	a4,-20(s0)
800047d4:	00e787b3          	add	a5,a5,a4
800047d8:	01478793          	addi	a5,a5,20
800047dc:	4d068713          	addi	a4,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
800047e0:	00279793          	slli	a5,a5,0x2
800047e4:	00f707b3          	add	a5,a4,a5
800047e8:	0007a623          	sw	zero,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:69 (discriminator 3)
    for(i=0;i<NUM_MAX_APP_TASKS;i++){
800047ec:	fec42783          	lw	a5,-20(s0)
800047f0:	00178793          	addi	a5,a5,1
800047f4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:69 (discriminator 1)
800047f8:	fec42703          	lw	a4,-20(s0)
800047fc:	00900793          	li	a5,9
80004800:	f8e7d6e3          	ble	a4,a5,8000478c <API_TaskAllocation+0x248>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:74
    }

    return tslot;
80004804:	fe842783          	lw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:75
}
80004808:	00078513          	mv	a0,a5
8000480c:	03c12083          	lw	ra,60(sp)
80004810:	03812403          	lw	s0,56(sp)
80004814:	04010113          	addi	sp,sp,64
80004818:	00008067          	ret

8000481c <API_GetTaskSlot>:
API_GetTaskSlot():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:77

unsigned int API_GetTaskSlot(unsigned int task_id, unsigned int app_id){
8000481c:	fd010113          	addi	sp,sp,-48
80004820:	02112623          	sw	ra,44(sp)
80004824:	02812423          	sw	s0,40(sp)
80004828:	03010413          	addi	s0,sp,48
8000482c:	fca42e23          	sw	a0,-36(s0)
80004830:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:79
    unsigned int i;
    for( i = 0; i < NUM_MAX_APP_TASKS; i++){
80004834:	fe042623          	sw	zero,-20(s0)
80004838:	0980006f          	j	800048d0 <API_GetTaskSlot+0xb4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:80
        if(task_id == TaskList[i].TaskID && app_id == TaskList[i].AppID && TaskList[i].status != TASK_SLOT_EMPTY)
8000483c:	800226b7          	lui	a3,0x80022
80004840:	fec42703          	lw	a4,-20(s0)
80004844:	00070793          	mv	a5,a4
80004848:	00579793          	slli	a5,a5,0x5
8000484c:	00e787b3          	add	a5,a5,a4
80004850:	00279793          	slli	a5,a5,0x2
80004854:	4d068713          	addi	a4,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80004858:	00e787b3          	add	a5,a5,a4
8000485c:	0107a783          	lw	a5,16(a5)
80004860:	fdc42703          	lw	a4,-36(s0)
80004864:	06f71063          	bne	a4,a5,800048c4 <API_GetTaskSlot+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:80 (discriminator 1)
80004868:	800227b7          	lui	a5,0x80022
8000486c:	fec42703          	lw	a4,-20(s0)
80004870:	4d078693          	addi	a3,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80004874:	00070793          	mv	a5,a4
80004878:	00579793          	slli	a5,a5,0x5
8000487c:	00e787b3          	add	a5,a5,a4
80004880:	00279793          	slli	a5,a5,0x2
80004884:	00f687b3          	add	a5,a3,a5
80004888:	0147a783          	lw	a5,20(a5)
8000488c:	fd842703          	lw	a4,-40(s0)
80004890:	02f71a63          	bne	a4,a5,800048c4 <API_GetTaskSlot+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:80 (discriminator 2)
80004894:	800226b7          	lui	a3,0x80022
80004898:	fec42703          	lw	a4,-20(s0)
8000489c:	00070793          	mv	a5,a4
800048a0:	00579793          	slli	a5,a5,0x5
800048a4:	00e787b3          	add	a5,a5,a4
800048a8:	00279793          	slli	a5,a5,0x2
800048ac:	4d068713          	addi	a4,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
800048b0:	00e787b3          	add	a5,a5,a4
800048b4:	0007a783          	lw	a5,0(a5)
800048b8:	00078663          	beqz	a5,800048c4 <API_GetTaskSlot+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:81
            return i;
800048bc:	fec42783          	lw	a5,-20(s0)
800048c0:	02c0006f          	j	800048ec <API_GetTaskSlot+0xd0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:79 (discriminator 2)
    for( i = 0; i < NUM_MAX_APP_TASKS; i++){
800048c4:	fec42783          	lw	a5,-20(s0)
800048c8:	00178793          	addi	a5,a5,1
800048cc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:79 (discriminator 1)
800048d0:	fec42703          	lw	a4,-20(s0)
800048d4:	00900793          	li	a5,9
800048d8:	f6e7f2e3          	bleu	a4,a5,8000483c <API_GetTaskSlot+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:83
    }
    prints("returning erro2\n");
800048dc:	800087b7          	lui	a5,0x80008
800048e0:	9dc78513          	addi	a0,a5,-1572 # 800079dc <__stack_top+0xfffc51dc>
800048e4:	7f5000ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:84
    return ERRO;
800048e8:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:85
}
800048ec:	00078513          	mv	a0,a5
800048f0:	02c12083          	lw	ra,44(sp)
800048f4:	02812403          	lw	s0,40(sp)
800048f8:	03010113          	addi	sp,sp,48
800048fc:	00008067          	ret

80004900 <API_TaskStart>:
API_TaskStart():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:87

void API_TaskStart(unsigned int slot){
80004900:	fd010113          	addi	sp,sp,-48
80004904:	02112623          	sw	ra,44(sp)
80004908:	02812423          	sw	s0,40(sp)
8000490c:	03010413          	addi	s0,sp,48
80004910:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:89
    BaseType_t xReturned;
    TaskList[slot].status = TASK_SLOT_RUNNING;
80004914:	800226b7          	lui	a3,0x80022
80004918:	fdc42703          	lw	a4,-36(s0)
8000491c:	00070793          	mv	a5,a4
80004920:	00579793          	slli	a5,a5,0x5
80004924:	00e787b3          	add	a5,a5,a4
80004928:	00279793          	slli	a5,a5,0x2
8000492c:	4d068713          	addi	a4,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80004930:	00e787b3          	add	a5,a5,a4
80004934:	00100713          	li	a4,1
80004938:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:100
                                    tskIDLE_PRIORITY+1,         //uxPriority
                                    &TaskList[slot].TaskHandler,// pxCreatedTask
                                    NULL,                       // puxStackBuffer
                                    &TaskList[slot].memRegion );//xRegions*/
    
    xReturned = xTaskCreate(TaskList[slot].mainAddr,
8000493c:	800227b7          	lui	a5,0x80022
80004940:	fdc42703          	lw	a4,-36(s0)
80004944:	4d078693          	addi	a3,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80004948:	00070793          	mv	a5,a4
8000494c:	00579793          	slli	a5,a5,0x5
80004950:	00e787b3          	add	a5,a5,a4
80004954:	00279793          	slli	a5,a5,0x2
80004958:	00f687b3          	add	a5,a3,a5
8000495c:	02c7a783          	lw	a5,44(a5)
80004960:	00078513          	mv	a0,a5
80004964:	fdc42703          	lw	a4,-36(s0)
80004968:	00070793          	mv	a5,a4
8000496c:	00579793          	slli	a5,a5,0x5
80004970:	00e787b3          	add	a5,a5,a4
80004974:	00279793          	slli	a5,a5,0x2
80004978:	01078713          	addi	a4,a5,16
8000497c:	800227b7          	lui	a5,0x80022
80004980:	4d078793          	addi	a5,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80004984:	00f707b3          	add	a5,a4,a5
80004988:	00878793          	addi	a5,a5,8
8000498c:	00000893          	li	a7,0
80004990:	00000813          	li	a6,0
80004994:	00100713          	li	a4,1
80004998:	00000693          	li	a3,0
8000499c:	00002637          	lui	a2,0x2
800049a0:	3e860613          	addi	a2,a2,1000 # 23e8 <HEAP_SIZE-0xdc18>
800049a4:	800085b7          	lui	a1,0x80008
800049a8:	9f058593          	addi	a1,a1,-1552 # 800079f0 <__stack_top+0xfffc51f0>
800049ac:	d6cfd0ef          	jal	ra,80001f18 <xTaskGenericCreate>
800049b0:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:106
                            "LaTask",
                            9192,//8192,//4096,//16384,
                            NULL,
                            tskIDLE_PRIORITY+1,
                            &TaskList[slot].TaskHandler);
    if( xReturned != pdPASS ){
800049b4:	fec42703          	lw	a4,-20(s0)
800049b8:	00100793          	li	a5,1
800049bc:	00f70a63          	beq	a4,a5,800049d0 <API_TaskStart+0xd0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:107
        prints("ERROR - API_TaskStart!!!\n");
800049c0:	800087b7          	lui	a5,0x80008
800049c4:	9f878513          	addi	a0,a5,-1544 # 800079f8 <__stack_top+0xfffc51f8>
800049c8:	711000ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:109
    }
    return;
800049cc:	00000013          	nop
800049d0:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:110
}
800049d4:	02c12083          	lw	ra,44(sp)
800049d8:	02812403          	lw	s0,40(sp)
800049dc:	03010113          	addi	sp,sp,48
800049e0:	00008067          	ret

800049e4 <API_FinishRunningTask>:
API_FinishRunningTask():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:113


void API_FinishRunningTask(){
800049e4:	fe010113          	addi	sp,sp,-32
800049e8:	00112e23          	sw	ra,28(sp)
800049ec:	00812c23          	sw	s0,24(sp)
800049f0:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:115
    int i;
    unsigned int slot = API_GetCurrentTaskSlot();
800049f4:	a11ff0ef          	jal	ra,80004404 <API_GetCurrentTaskSlot>
800049f8:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:116
    printsvsv("Finishing task:", TaskList[slot].TaskID, "app: ", TaskList[slot].AppID);
800049fc:	800226b7          	lui	a3,0x80022
80004a00:	fe842703          	lw	a4,-24(s0)
80004a04:	00070793          	mv	a5,a4
80004a08:	00579793          	slli	a5,a5,0x5
80004a0c:	00e787b3          	add	a5,a5,a4
80004a10:	00279793          	slli	a5,a5,0x2
80004a14:	4d068713          	addi	a4,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80004a18:	00e787b3          	add	a5,a5,a4
80004a1c:	0107a783          	lw	a5,16(a5)
80004a20:	00078593          	mv	a1,a5
80004a24:	800227b7          	lui	a5,0x80022
80004a28:	fe842703          	lw	a4,-24(s0)
80004a2c:	4d078693          	addi	a3,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80004a30:	00070793          	mv	a5,a4
80004a34:	00579793          	slli	a5,a5,0x5
80004a38:	00e787b3          	add	a5,a5,a4
80004a3c:	00279793          	slli	a5,a5,0x2
80004a40:	00f687b3          	add	a5,a3,a5
80004a44:	0147a783          	lw	a5,20(a5)
80004a48:	00078693          	mv	a3,a5
80004a4c:	800087b7          	lui	a5,0x80008
80004a50:	a1478613          	addi	a2,a5,-1516 # 80007a14 <__stack_top+0xfffc5214>
80004a54:	800087b7          	lui	a5,0x80008
80004a58:	a1c78513          	addi	a0,a5,-1508 # 80007a1c <__stack_top+0xfffc521c>
80004a5c:	771000ef          	jal	ra,800059cc <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:117
    while(API_checkPipe(slot) == 1){
80004a60:	00c0006f          	j	80004a6c <API_FinishRunningTask+0x88>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:118
        vTaskDelay(1);
80004a64:	00100513          	li	a0,1
80004a68:	fa8fd0ef          	jal	ra,80002210 <vTaskDelay>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:117
    while(API_checkPipe(slot) == 1){
80004a6c:	fe842503          	lw	a0,-24(s0)
80004a70:	608000ef          	jal	ra,80005078 <API_checkPipe>
80004a74:	00050713          	mv	a4,a0
80004a78:	00100793          	li	a5,1
80004a7c:	fef704e3          	beq	a4,a5,80004a64 <API_FinishRunningTask+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:120
    }
    vPortFree(TaskList[slot].taskAddr);
80004a80:	800227b7          	lui	a5,0x80022
80004a84:	fe842703          	lw	a4,-24(s0)
80004a88:	4d078693          	addi	a3,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80004a8c:	00070793          	mv	a5,a4
80004a90:	00579793          	slli	a5,a5,0x5
80004a94:	00e787b3          	add	a5,a5,a4
80004a98:	00279793          	slli	a5,a5,0x2
80004a9c:	00f687b3          	add	a5,a3,a5
80004aa0:	0287a783          	lw	a5,40(a5)
80004aa4:	00078513          	mv	a0,a5
80004aa8:	a1dfc0ef          	jal	ra,800014c4 <vPortFree>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:122
    
    printsvsv("Task ", TaskList[slot].TaskID, "deleted with sucsess! From application ", TaskList[slot].AppID);
80004aac:	800226b7          	lui	a3,0x80022
80004ab0:	fe842703          	lw	a4,-24(s0)
80004ab4:	00070793          	mv	a5,a4
80004ab8:	00579793          	slli	a5,a5,0x5
80004abc:	00e787b3          	add	a5,a5,a4
80004ac0:	00279793          	slli	a5,a5,0x2
80004ac4:	4d068713          	addi	a4,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80004ac8:	00e787b3          	add	a5,a5,a4
80004acc:	0107a783          	lw	a5,16(a5)
80004ad0:	00078593          	mv	a1,a5
80004ad4:	800227b7          	lui	a5,0x80022
80004ad8:	fe842703          	lw	a4,-24(s0)
80004adc:	4d078693          	addi	a3,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80004ae0:	00070793          	mv	a5,a4
80004ae4:	00579793          	slli	a5,a5,0x5
80004ae8:	00e787b3          	add	a5,a5,a4
80004aec:	00279793          	slli	a5,a5,0x2
80004af0:	00f687b3          	add	a5,a3,a5
80004af4:	0147a783          	lw	a5,20(a5)
80004af8:	00078693          	mv	a3,a5
80004afc:	800087b7          	lui	a5,0x80008
80004b00:	a2c78613          	addi	a2,a5,-1492 # 80007a2c <__stack_top+0xfffc522c>
80004b04:	800087b7          	lui	a5,0x80008
80004b08:	a5478513          	addi	a0,a5,-1452 # 80007a54 <__stack_top+0xfffc5254>
80004b0c:	6c1000ef          	jal	ra,800059cc <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:123
    TaskList[slot].status = TASK_SLOT_EMPTY;
80004b10:	800226b7          	lui	a3,0x80022
80004b14:	fe842703          	lw	a4,-24(s0)
80004b18:	00070793          	mv	a5,a4
80004b1c:	00579793          	slli	a5,a5,0x5
80004b20:	00e787b3          	add	a5,a5,a4
80004b24:	00279793          	slli	a5,a5,0x2
80004b28:	4d068713          	addi	a4,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80004b2c:	00e787b3          	add	a5,a5,a4
80004b30:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:125
    
    for(i = 0; i < NUM_MAX_APP_TASKS; i++){
80004b34:	fe042623          	sw	zero,-20(s0)
80004b38:	0c40006f          	j	80004bfc <API_FinishRunningTask+0x218>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:126
        printsvsv("TaskList[", i, "]status: ", TaskList[i].status );
80004b3c:	800226b7          	lui	a3,0x80022
80004b40:	fec42703          	lw	a4,-20(s0)
80004b44:	00070793          	mv	a5,a4
80004b48:	00579793          	slli	a5,a5,0x5
80004b4c:	00e787b3          	add	a5,a5,a4
80004b50:	00279793          	slli	a5,a5,0x2
80004b54:	4d068713          	addi	a4,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80004b58:	00e787b3          	add	a5,a5,a4
80004b5c:	0007a783          	lw	a5,0(a5)
80004b60:	00078693          	mv	a3,a5
80004b64:	800087b7          	lui	a5,0x80008
80004b68:	a5c78613          	addi	a2,a5,-1444 # 80007a5c <__stack_top+0xfffc525c>
80004b6c:	fec42583          	lw	a1,-20(s0)
80004b70:	800087b7          	lui	a5,0x80008
80004b74:	a6878513          	addi	a0,a5,-1432 # 80007a68 <__stack_top+0xfffc5268>
80004b78:	655000ef          	jal	ra,800059cc <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:127
        if(TaskList[i].status != TASK_SLOT_EMPTY){
80004b7c:	800226b7          	lui	a3,0x80022
80004b80:	fec42703          	lw	a4,-20(s0)
80004b84:	00070793          	mv	a5,a4
80004b88:	00579793          	slli	a5,a5,0x5
80004b8c:	00e787b3          	add	a5,a5,a4
80004b90:	00279793          	slli	a5,a5,0x2
80004b94:	4d068713          	addi	a4,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80004b98:	00e787b3          	add	a5,a5,a4
80004b9c:	0007a783          	lw	a5,0(a5)
80004ba0:	04078863          	beqz	a5,80004bf0 <API_FinishRunningTask+0x20c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:128
            printsvsv("Returning because of: ", i, "TaskList[i].status ", TaskList[i].status);
80004ba4:	800226b7          	lui	a3,0x80022
80004ba8:	fec42703          	lw	a4,-20(s0)
80004bac:	00070793          	mv	a5,a4
80004bb0:	00579793          	slli	a5,a5,0x5
80004bb4:	00e787b3          	add	a5,a5,a4
80004bb8:	00279793          	slli	a5,a5,0x2
80004bbc:	4d068713          	addi	a4,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80004bc0:	00e787b3          	add	a5,a5,a4
80004bc4:	0007a783          	lw	a5,0(a5)
80004bc8:	00078693          	mv	a3,a5
80004bcc:	800087b7          	lui	a5,0x80008
80004bd0:	a7478613          	addi	a2,a5,-1420 # 80007a74 <__stack_top+0xfffc5274>
80004bd4:	fec42583          	lw	a1,-20(s0)
80004bd8:	800087b7          	lui	a5,0x80008
80004bdc:	a8878513          	addi	a0,a5,-1400 # 80007a88 <__stack_top+0xfffc5288>
80004be0:	5ed000ef          	jal	ra,800059cc <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:129
            i = 0xffffffff;
80004be4:	fff00793          	li	a5,-1
80004be8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:130
            break;
80004bec:	01c0006f          	j	80004c08 <API_FinishRunningTask+0x224>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:125 (discriminator 2)
    for(i = 0; i < NUM_MAX_APP_TASKS; i++){
80004bf0:	fec42783          	lw	a5,-20(s0)
80004bf4:	00178793          	addi	a5,a5,1
80004bf8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:125 (discriminator 1)
80004bfc:	fec42703          	lw	a4,-20(s0)
80004c00:	00900793          	li	a5,9
80004c04:	f2e7dce3          	ble	a4,a5,80004b3c <API_FinishRunningTask+0x158>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:133
        }
    }
    if(i != 0xffffffff){
80004c08:	fec42703          	lw	a4,-20(s0)
80004c0c:	fff00793          	li	a5,-1
80004c10:	00f70463          	beq	a4,a5,80004c18 <API_FinishRunningTask+0x234>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:134
        API_setFreqIdle();
80004c14:	578000ef          	jal	ra,8000518c <API_setFreqIdle>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:136
    }
    API_SendFinishTask(TaskList[slot].TaskID, TaskList[slot].AppID);
80004c18:	800226b7          	lui	a3,0x80022
80004c1c:	fe842703          	lw	a4,-24(s0)
80004c20:	00070793          	mv	a5,a4
80004c24:	00579793          	slli	a5,a5,0x5
80004c28:	00e787b3          	add	a5,a5,a4
80004c2c:	00279793          	slli	a5,a5,0x2
80004c30:	4d068713          	addi	a4,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80004c34:	00e787b3          	add	a5,a5,a4
80004c38:	0107a603          	lw	a2,16(a5)
80004c3c:	800227b7          	lui	a5,0x80022
80004c40:	fe842703          	lw	a4,-24(s0)
80004c44:	4d078693          	addi	a3,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80004c48:	00070793          	mv	a5,a4
80004c4c:	00579793          	slli	a5,a5,0x5
80004c50:	00e787b3          	add	a5,a5,a4
80004c54:	00279793          	slli	a5,a5,0x2
80004c58:	00f687b3          	add	a5,a3,a5
80004c5c:	0147a783          	lw	a5,20(a5)
80004c60:	00078593          	mv	a1,a5
80004c64:	00060513          	mv	a0,a2
80004c68:	09d010ef          	jal	ra,80006504 <API_SendFinishTask>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:137
    vTaskDelete(TaskList[slot].TaskHandler);
80004c6c:	800227b7          	lui	a5,0x80022
80004c70:	fe842703          	lw	a4,-24(s0)
80004c74:	4d078693          	addi	a3,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80004c78:	00070793          	mv	a5,a4
80004c7c:	00579793          	slli	a5,a5,0x5
80004c80:	00e787b3          	add	a5,a5,a4
80004c84:	00279793          	slli	a5,a5,0x2
80004c88:	00f687b3          	add	a5,a3,a5
80004c8c:	0187a783          	lw	a5,24(a5)
80004c90:	00078513          	mv	a0,a5
80004c94:	ca0fd0ef          	jal	ra,80002134 <vTaskDelete>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:138
    return;
80004c98:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:139
}
80004c9c:	01c12083          	lw	ra,28(sp)
80004ca0:	01812403          	lw	s0,24(sp)
80004ca4:	02010113          	addi	sp,sp,32
80004ca8:	00008067          	ret

80004cac <API_PipeInitialization>:
API_PipeInitialization():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:13

extern unsigned int thermalPacket_pending; // from thermal.h

////////////////////////////////////////////////////////////
// Initialize the PIPE, setting the status of each slot to FREE
void API_PipeInitialization(){
80004cac:	fe010113          	addi	sp,sp,-32
80004cb0:	00812e23          	sw	s0,28(sp)
80004cb4:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:15
    int i;
    messageID = 0;
80004cb8:	800217b7          	lui	a5,0x80021
80004cbc:	3007a623          	sw	zero,780(a5) # 8002130c <__stack_top+0xfffdeb0c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:16
    for( i = 0; i < PIPE_SIZE; i++ ){
80004cc0:	fe042623          	sw	zero,-20(s0)
80004cc4:	0740006f          	j	80004d38 <API_PipeInitialization+0x8c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:17 (discriminator 3)
        MessagePipe[i].status = PIPE_FREE;
80004cc8:	800217b7          	lui	a5,0x80021
80004ccc:	fec42683          	lw	a3,-20(s0)
80004cd0:	24400713          	li	a4,580
80004cd4:	02e68733          	mul	a4,a3,a4
80004cd8:	38078793          	addi	a5,a5,896 # 80021380 <__stack_top+0xfffdeb80>
80004cdc:	00f707b3          	add	a5,a4,a5
80004ce0:	fff00713          	li	a4,-1
80004ce4:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:18 (discriminator 3)
        MessagePipe[i].msgID  = 0;
80004ce8:	800217b7          	lui	a5,0x80021
80004cec:	fec42683          	lw	a3,-20(s0)
80004cf0:	38078713          	addi	a4,a5,896 # 80021380 <__stack_top+0xfffdeb80>
80004cf4:	24400793          	li	a5,580
80004cf8:	02f687b3          	mul	a5,a3,a5
80004cfc:	00f707b3          	add	a5,a4,a5
80004d00:	0007a423          	sw	zero,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:19 (discriminator 3)
        ServicePipe[i].status = PIPE_FREE;
80004d04:	800216b7          	lui	a3,0x80021
80004d08:	fec42703          	lw	a4,-20(s0)
80004d0c:	00070793          	mv	a5,a4
80004d10:	00479793          	slli	a5,a5,0x4
80004d14:	40e787b3          	sub	a5,a5,a4
80004d18:	00279793          	slli	a5,a5,0x2
80004d1c:	21c68713          	addi	a4,a3,540 # 8002121c <__stack_top+0xfffdea1c>
80004d20:	00e787b3          	add	a5,a5,a4
80004d24:	fff00713          	li	a4,-1
80004d28:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:16 (discriminator 3)
    for( i = 0; i < PIPE_SIZE; i++ ){
80004d2c:	fec42783          	lw	a5,-20(s0)
80004d30:	00178793          	addi	a5,a5,1
80004d34:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:16 (discriminator 1)
80004d38:	fec42703          	lw	a4,-20(s0)
80004d3c:	00300793          	li	a5,3
80004d40:	f8e7d4e3          	ble	a4,a5,80004cc8 <API_PipeInitialization+0x1c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:21
    }
    return;
80004d44:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:22
}
80004d48:	01c12403          	lw	s0,28(sp)
80004d4c:	02010113          	addi	sp,sp,32
80004d50:	00008067          	ret

80004d54 <API_GetMessageSlot>:
API_GetMessageSlot():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:26

////////////////////////////////////////////////////////////
// Returns a free Message slot 
unsigned int API_GetMessageSlot(){
80004d54:	fe010113          	addi	sp,sp,-32
80004d58:	00112e23          	sw	ra,28(sp)
80004d5c:	00812c23          	sw	s0,24(sp)
80004d60:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:28
    int i;
    unsigned int sel = PIPE_FULL;
80004d64:	fdfe07b7          	lui	a5,0xfdfe0
80004d68:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9d5fd>
80004d6c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:29
    vTaskEnterCritical();
80004d70:	f29fd0ef          	jal	ra,80002c98 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:30
    for( i = 0; i < PIPE_SIZE; i++ ){
80004d74:	fe042623          	sw	zero,-20(s0)
80004d78:	0980006f          	j	80004e10 <API_GetMessageSlot+0xbc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:31
        if (MessagePipe[i].status == PIPE_FREE){
80004d7c:	800217b7          	lui	a5,0x80021
80004d80:	fec42683          	lw	a3,-20(s0)
80004d84:	24400713          	li	a4,580
80004d88:	02e68733          	mul	a4,a3,a4
80004d8c:	38078793          	addi	a5,a5,896 # 80021380 <__stack_top+0xfffdeb80>
80004d90:	00f707b3          	add	a5,a4,a5
80004d94:	0007a703          	lw	a4,0(a5)
80004d98:	fff00793          	li	a5,-1
80004d9c:	06f71463          	bne	a4,a5,80004e04 <API_GetMessageSlot+0xb0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:32
            MessagePipe[i].status = PIPE_OCCUPIED;
80004da0:	800217b7          	lui	a5,0x80021
80004da4:	fec42683          	lw	a3,-20(s0)
80004da8:	24400713          	li	a4,580
80004dac:	02e68733          	mul	a4,a3,a4
80004db0:	38078793          	addi	a5,a5,896 # 80021380 <__stack_top+0xfffdeb80>
80004db4:	00f707b3          	add	a5,a4,a5
80004db8:	00100713          	li	a4,1
80004dbc:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:33
            MessagePipe[i].msgID = messageID;
80004dc0:	800217b7          	lui	a5,0x80021
80004dc4:	30c7a703          	lw	a4,780(a5) # 8002130c <__stack_top+0xfffdeb0c>
80004dc8:	800217b7          	lui	a5,0x80021
80004dcc:	fec42603          	lw	a2,-20(s0)
80004dd0:	38078693          	addi	a3,a5,896 # 80021380 <__stack_top+0xfffdeb80>
80004dd4:	24400793          	li	a5,580
80004dd8:	02f607b3          	mul	a5,a2,a5
80004ddc:	00f687b3          	add	a5,a3,a5
80004de0:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:34
            messageID++;
80004de4:	800217b7          	lui	a5,0x80021
80004de8:	30c7a783          	lw	a5,780(a5) # 8002130c <__stack_top+0xfffdeb0c>
80004dec:	00178713          	addi	a4,a5,1
80004df0:	800217b7          	lui	a5,0x80021
80004df4:	30e7a623          	sw	a4,780(a5) # 8002130c <__stack_top+0xfffdeb0c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:35
            sel = i;
80004df8:	fec42783          	lw	a5,-20(s0)
80004dfc:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:36
            break;
80004e00:	01c0006f          	j	80004e1c <API_GetMessageSlot+0xc8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:30 (discriminator 2)
    for( i = 0; i < PIPE_SIZE; i++ ){
80004e04:	fec42783          	lw	a5,-20(s0)
80004e08:	00178793          	addi	a5,a5,1
80004e0c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:30 (discriminator 1)
80004e10:	fec42703          	lw	a4,-20(s0)
80004e14:	00300793          	li	a5,3
80004e18:	f6e7d2e3          	ble	a4,a5,80004d7c <API_GetMessageSlot+0x28>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:39
        }
    }
    if(messageID > 16777215){
80004e1c:	800217b7          	lui	a5,0x80021
80004e20:	30c7a703          	lw	a4,780(a5) # 8002130c <__stack_top+0xfffdeb0c>
80004e24:	010007b7          	lui	a5,0x1000
80004e28:	06f76663          	bltu	a4,a5,80004e94 <API_GetMessageSlot+0x140>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:40
        messageID = 256;
80004e2c:	800217b7          	lui	a5,0x80021
80004e30:	10000713          	li	a4,256
80004e34:	30e7a623          	sw	a4,780(a5) # 8002130c <__stack_top+0xfffdeb0c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:41
        for( i = 0; i < PIPE_SIZE; i++ ){
80004e38:	fe042623          	sw	zero,-20(s0)
80004e3c:	04c0006f          	j	80004e88 <API_GetMessageSlot+0x134>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:42 (discriminator 3)
            MessagePipe[i].msgID = (MessagePipe[i].msgID & 0x000000FF);
80004e40:	800217b7          	lui	a5,0x80021
80004e44:	fec42683          	lw	a3,-20(s0)
80004e48:	38078713          	addi	a4,a5,896 # 80021380 <__stack_top+0xfffdeb80>
80004e4c:	24400793          	li	a5,580
80004e50:	02f687b3          	mul	a5,a3,a5
80004e54:	00f707b3          	add	a5,a4,a5
80004e58:	0087a783          	lw	a5,8(a5)
80004e5c:	0ff7f713          	andi	a4,a5,255
80004e60:	800217b7          	lui	a5,0x80021
80004e64:	fec42603          	lw	a2,-20(s0)
80004e68:	38078693          	addi	a3,a5,896 # 80021380 <__stack_top+0xfffdeb80>
80004e6c:	24400793          	li	a5,580
80004e70:	02f607b3          	mul	a5,a2,a5
80004e74:	00f687b3          	add	a5,a3,a5
80004e78:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:41 (discriminator 3)
        for( i = 0; i < PIPE_SIZE; i++ ){
80004e7c:	fec42783          	lw	a5,-20(s0)
80004e80:	00178793          	addi	a5,a5,1
80004e84:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:41 (discriminator 1)
80004e88:	fec42703          	lw	a4,-20(s0)
80004e8c:	00300793          	li	a5,3
80004e90:	fae7d8e3          	ble	a4,a5,80004e40 <API_GetMessageSlot+0xec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:45
        }
    }
    vTaskExitCritical();
80004e94:	e41fd0ef          	jal	ra,80002cd4 <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:46
    return sel;
80004e98:	fe842783          	lw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:47
}
80004e9c:	00078513          	mv	a0,a5
80004ea0:	01c12083          	lw	ra,28(sp)
80004ea4:	01812403          	lw	s0,24(sp)
80004ea8:	02010113          	addi	sp,sp,32
80004eac:	00008067          	ret

80004eb0 <API_GetServiceSlot>:
API_GetServiceSlot():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:51

////////////////////////////////////////////////////////////
// Returns a free Service slot
unsigned int API_GetServiceSlot(){
80004eb0:	fe010113          	addi	sp,sp,-32
80004eb4:	00112e23          	sw	ra,28(sp)
80004eb8:	00812c23          	sw	s0,24(sp)
80004ebc:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:53
    int i;
    vTaskEnterCritical();
80004ec0:	dd9fd0ef          	jal	ra,80002c98 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:54
    for( i = 0; i < PIPE_SIZE; i++ ){
80004ec4:	fe042623          	sw	zero,-20(s0)
80004ec8:	0700006f          	j	80004f38 <API_GetServiceSlot+0x88>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:55
        if (ServicePipe[i].status == PIPE_FREE){
80004ecc:	800216b7          	lui	a3,0x80021
80004ed0:	fec42703          	lw	a4,-20(s0)
80004ed4:	00070793          	mv	a5,a4
80004ed8:	00479793          	slli	a5,a5,0x4
80004edc:	40e787b3          	sub	a5,a5,a4
80004ee0:	00279793          	slli	a5,a5,0x2
80004ee4:	21c68713          	addi	a4,a3,540 # 8002121c <__stack_top+0xfffdea1c>
80004ee8:	00e787b3          	add	a5,a5,a4
80004eec:	0007a703          	lw	a4,0(a5)
80004ef0:	fff00793          	li	a5,-1
80004ef4:	02f71c63          	bne	a4,a5,80004f2c <API_GetServiceSlot+0x7c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:56
            ServicePipe[i].status = PIPE_OCCUPIED;
80004ef8:	800216b7          	lui	a3,0x80021
80004efc:	fec42703          	lw	a4,-20(s0)
80004f00:	00070793          	mv	a5,a4
80004f04:	00479793          	slli	a5,a5,0x4
80004f08:	40e787b3          	sub	a5,a5,a4
80004f0c:	00279793          	slli	a5,a5,0x2
80004f10:	21c68713          	addi	a4,a3,540 # 8002121c <__stack_top+0xfffdea1c>
80004f14:	00e787b3          	add	a5,a5,a4
80004f18:	00100713          	li	a4,1
80004f1c:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:57
            vTaskExitCritical();
80004f20:	db5fd0ef          	jal	ra,80002cd4 <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:58
            return i;
80004f24:	fec42783          	lw	a5,-20(s0)
80004f28:	0280006f          	j	80004f50 <API_GetServiceSlot+0xa0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:54 (discriminator 2)
    for( i = 0; i < PIPE_SIZE; i++ ){
80004f2c:	fec42783          	lw	a5,-20(s0)
80004f30:	00178793          	addi	a5,a5,1
80004f34:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:54 (discriminator 1)
80004f38:	fec42703          	lw	a4,-20(s0)
80004f3c:	00300793          	li	a5,3
80004f40:	f8e7d6e3          	ble	a4,a5,80004ecc <API_GetServiceSlot+0x1c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:61
        }
    }
    vTaskExitCritical();
80004f44:	d91fd0ef          	jal	ra,80002cd4 <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:62
    return PIPE_FULL;
80004f48:	fdfe07b7          	lui	a5,0xfdfe0
80004f4c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9d5fd>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:63
}
80004f50:	00078513          	mv	a0,a5
80004f54:	01c12083          	lw	ra,28(sp)
80004f58:	01812403          	lw	s0,24(sp)
80004f5c:	02010113          	addi	sp,sp,32
80004f60:	00008067          	ret

80004f64 <API_ClearPipeSlot>:
API_ClearPipeSlot():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:67

////////////////////////////////////////////////////////////
// Clear one PipeSlot after send it
void API_ClearPipeSlot(unsigned int typeSlot){
80004f64:	fd010113          	addi	sp,sp,-48
80004f68:	02812623          	sw	s0,44(sp)
80004f6c:	03010413          	addi	s0,sp,48
80004f70:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:68
    unsigned type = typeSlot & 0xFFFF0000;
80004f74:	fdc42703          	lw	a4,-36(s0)
80004f78:	ffff07b7          	lui	a5,0xffff0
80004f7c:	00f777b3          	and	a5,a4,a5
80004f80:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:69
    unsigned slot = typeSlot & 0x0000FFFF;
80004f84:	fdc42703          	lw	a4,-36(s0)
80004f88:	000107b7          	lui	a5,0x10
80004f8c:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80004f90:	00f777b3          	and	a5,a4,a5
80004f94:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:71
    
    if (type == SERVICE){
80004f98:	fec42703          	lw	a4,-20(s0)
80004f9c:	101007b7          	lui	a5,0x10100
80004fa0:	08f71463          	bne	a4,a5,80005028 <API_ClearPipeSlot+0xc4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:72
        if(ServicePipe[slot].header.service == ENERGY_PACKET){
80004fa4:	800217b7          	lui	a5,0x80021
80004fa8:	fe842703          	lw	a4,-24(s0)
80004fac:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
80004fb0:	00070793          	mv	a5,a4
80004fb4:	00479793          	slli	a5,a5,0x4
80004fb8:	40e787b3          	sub	a5,a5,a4
80004fbc:	00279793          	slli	a5,a5,0x2
80004fc0:	00f687b3          	add	a5,a3,a5
80004fc4:	0107a703          	lw	a4,16(a5)
80004fc8:	05000793          	li	a5,80
80004fcc:	00f71463          	bne	a4,a5,80004fd4 <API_ClearPipeSlot+0x70>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:73
            thermalPacket_pending = FALSE;
80004fd0:	9601a223          	sw	zero,-1692(gp) # 80008144 <thermalPacket_pending>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:75
        }
        ServicePipe[slot].status = PIPE_FREE;
80004fd4:	800216b7          	lui	a3,0x80021
80004fd8:	fe842703          	lw	a4,-24(s0)
80004fdc:	00070793          	mv	a5,a4
80004fe0:	00479793          	slli	a5,a5,0x4
80004fe4:	40e787b3          	sub	a5,a5,a4
80004fe8:	00279793          	slli	a5,a5,0x2
80004fec:	21c68713          	addi	a4,a3,540 # 8002121c <__stack_top+0xfffdea1c>
80004ff0:	00e787b3          	add	a5,a5,a4
80004ff4:	fff00713          	li	a4,-1
80004ff8:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:76
        ServicePipe[slot].holder = PIPE_FREE;
80004ffc:	800217b7          	lui	a5,0x80021
80005000:	fe842703          	lw	a4,-24(s0)
80005004:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
80005008:	00070793          	mv	a5,a4
8000500c:	00479793          	slli	a5,a5,0x4
80005010:	40e787b3          	sub	a5,a5,a4
80005014:	00279793          	slli	a5,a5,0x2
80005018:	00f687b3          	add	a5,a3,a5
8000501c:	fff00713          	li	a4,-1
80005020:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:82
    } else { // type == MESSAGE
        //printsv("cleaning message pipe slot: ", slot);
        MessagePipe[slot].status = PIPE_FREE;
        MessagePipe[slot].holder = PIPE_FREE;
    }
    return;
80005024:	0480006f          	j	8000506c <API_ClearPipeSlot+0x108>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:79
        MessagePipe[slot].status = PIPE_FREE;
80005028:	800217b7          	lui	a5,0x80021
8000502c:	fe842683          	lw	a3,-24(s0)
80005030:	24400713          	li	a4,580
80005034:	02e68733          	mul	a4,a3,a4
80005038:	38078793          	addi	a5,a5,896 # 80021380 <__stack_top+0xfffdeb80>
8000503c:	00f707b3          	add	a5,a4,a5
80005040:	fff00713          	li	a4,-1
80005044:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:80
        MessagePipe[slot].holder = PIPE_FREE;
80005048:	800217b7          	lui	a5,0x80021
8000504c:	fe842683          	lw	a3,-24(s0)
80005050:	38078713          	addi	a4,a5,896 # 80021380 <__stack_top+0xfffdeb80>
80005054:	24400793          	li	a5,580
80005058:	02f687b3          	mul	a5,a3,a5
8000505c:	00f707b3          	add	a5,a4,a5
80005060:	fff00713          	li	a4,-1
80005064:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:82
    return;
80005068:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:83
}
8000506c:	02c12403          	lw	s0,44(sp)
80005070:	03010113          	addi	sp,sp,48
80005074:	00008067          	ret

80005078 <API_checkPipe>:
API_checkPipe():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:85

unsigned int API_checkPipe(unsigned int taskSlot){
80005078:	fd010113          	addi	sp,sp,-48
8000507c:	02112623          	sw	ra,44(sp)
80005080:	02812423          	sw	s0,40(sp)
80005084:	03010413          	addi	s0,sp,48
80005088:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:87
    unsigned int i;
    for(i = 0; i < PIPE_SIZE; i++){
8000508c:	fe042623          	sw	zero,-20(s0)
80005090:	0d80006f          	j	80005168 <API_checkPipe+0xf0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:88
        printsv("i: ", i);
80005094:	fec42783          	lw	a5,-20(s0)
80005098:	00078593          	mv	a1,a5
8000509c:	800087b7          	lui	a5,0x80008
800050a0:	aa078513          	addi	a0,a5,-1376 # 80007aa0 <__stack_top+0xfffc52a0>
800050a4:	0e1000ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:89
        printsv("status: ", MessagePipe[i].status);
800050a8:	800217b7          	lui	a5,0x80021
800050ac:	fec42683          	lw	a3,-20(s0)
800050b0:	24400713          	li	a4,580
800050b4:	02e68733          	mul	a4,a3,a4
800050b8:	38078793          	addi	a5,a5,896 # 80021380 <__stack_top+0xfffdeb80>
800050bc:	00f707b3          	add	a5,a4,a5
800050c0:	0007a783          	lw	a5,0(a5)
800050c4:	00078593          	mv	a1,a5
800050c8:	800087b7          	lui	a5,0x80008
800050cc:	aa478513          	addi	a0,a5,-1372 # 80007aa4 <__stack_top+0xfffc52a4>
800050d0:	0b5000ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:90
        printsv("holder: ", MessagePipe[i].holder);
800050d4:	800217b7          	lui	a5,0x80021
800050d8:	fec42683          	lw	a3,-20(s0)
800050dc:	38078713          	addi	a4,a5,896 # 80021380 <__stack_top+0xfffdeb80>
800050e0:	24400793          	li	a5,580
800050e4:	02f687b3          	mul	a5,a3,a5
800050e8:	00f707b3          	add	a5,a4,a5
800050ec:	0047a783          	lw	a5,4(a5)
800050f0:	00078593          	mv	a1,a5
800050f4:	800087b7          	lui	a5,0x80008
800050f8:	ab078513          	addi	a0,a5,-1360 # 80007ab0 <__stack_top+0xfffc52b0>
800050fc:	089000ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:91
        prints("---\n");
80005100:	800087b7          	lui	a5,0x80008
80005104:	abc78513          	addi	a0,a5,-1348 # 80007abc <__stack_top+0xfffc52bc>
80005108:	7d0000ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:92
        if(MessagePipe[i].status == PIPE_OCCUPIED){
8000510c:	800217b7          	lui	a5,0x80021
80005110:	fec42683          	lw	a3,-20(s0)
80005114:	24400713          	li	a4,580
80005118:	02e68733          	mul	a4,a3,a4
8000511c:	38078793          	addi	a5,a5,896 # 80021380 <__stack_top+0xfffdeb80>
80005120:	00f707b3          	add	a5,a4,a5
80005124:	0007a703          	lw	a4,0(a5)
80005128:	00100793          	li	a5,1
8000512c:	02f71863          	bne	a4,a5,8000515c <API_checkPipe+0xe4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:93
            if(MessagePipe[i].holder == taskSlot){
80005130:	800217b7          	lui	a5,0x80021
80005134:	fec42683          	lw	a3,-20(s0)
80005138:	38078713          	addi	a4,a5,896 # 80021380 <__stack_top+0xfffdeb80>
8000513c:	24400793          	li	a5,580
80005140:	02f687b3          	mul	a5,a3,a5
80005144:	00f707b3          	add	a5,a4,a5
80005148:	0047a783          	lw	a5,4(a5)
8000514c:	fdc42703          	lw	a4,-36(s0)
80005150:	00f71663          	bne	a4,a5,8000515c <API_checkPipe+0xe4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:94
                return 1;
80005154:	00100793          	li	a5,1
80005158:	0200006f          	j	80005178 <API_checkPipe+0x100>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:87 (discriminator 2)
    for(i = 0; i < PIPE_SIZE; i++){
8000515c:	fec42783          	lw	a5,-20(s0)
80005160:	00178793          	addi	a5,a5,1
80005164:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:87 (discriminator 1)
80005168:	fec42703          	lw	a4,-20(s0)
8000516c:	00300793          	li	a5,3
80005170:	f2e7f2e3          	bleu	a4,a5,80005094 <API_checkPipe+0x1c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:98
            }
        }
    }
    return 0;
80005174:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:99
}
80005178:	00078513          	mv	a0,a5
8000517c:	02c12083          	lw	ra,44(sp)
80005180:	02812403          	lw	s0,40(sp)
80005184:	03010113          	addi	sp,sp,48
80005188:	00008067          	ret

8000518c <API_setFreqIdle>:
API_setFreqIdle():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:3
#include "dvfs.h"

void API_setFreqIdle(){
8000518c:	ff010113          	addi	sp,sp,-16
80005190:	00812623          	sw	s0,12(sp)
80005194:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:4
    selectedFrequencyScale = FREQ_IDLE;
80005198:	800227b7          	lui	a5,0x80022
8000519c:	06400713          	li	a4,100
800051a0:	7ee7a423          	sw	a4,2024(a5) # 800227e8 <__stack_top+0xfffdffe8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:5
    return;
800051a4:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:6
}
800051a8:	00c12403          	lw	s0,12(sp)
800051ac:	01010113          	addi	sp,sp,16
800051b0:	00008067          	ret

800051b4 <API_setFreqScale>:
API_setFreqScale():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:8

void API_setFreqScale(unsigned int scale){
800051b4:	fe010113          	addi	sp,sp,-32
800051b8:	00812e23          	sw	s0,28(sp)
800051bc:	02010413          	addi	s0,sp,32
800051c0:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:9
    selectedFrequencyScale = scale;
800051c4:	800227b7          	lui	a5,0x80022
800051c8:	fec42703          	lw	a4,-20(s0)
800051cc:	7ee7a423          	sw	a4,2024(a5) # 800227e8 <__stack_top+0xfffdffe8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:10
    return;
800051d0:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:11
}
800051d4:	01c12403          	lw	s0,28(sp)
800051d8:	02010113          	addi	sp,sp,32
800051dc:	00008067          	ret

800051e0 <API_getFreqScale>:
API_getFreqScale():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:13

unsigned int API_getFreqScale(){
800051e0:	ff010113          	addi	sp,sp,-16
800051e4:	00112623          	sw	ra,12(sp)
800051e8:	00812423          	sw	s0,8(sp)
800051ec:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:14
    return HW_get_32bit_reg(FREQUENCY_SCALE);
800051f0:	900007b7          	lui	a5,0x90000
800051f4:	ff878513          	addi	a0,a5,-8 # 8ffffff8 <__stack_top+0xffbd7f8>
800051f8:	da5fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800051fc:	00050793          	mv	a5,a0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:15
}
80005200:	00078513          	mv	a0,a5
80005204:	00c12083          	lw	ra,12(sp)
80005208:	00812403          	lw	s0,8(sp)
8000520c:	01010113          	addi	sp,sp,16
80005210:	00008067          	ret

80005214 <API_applyFreqScale>:
API_applyFreqScale():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:17

void API_applyFreqScale(){
80005214:	ff010113          	addi	sp,sp,-16
80005218:	00112623          	sw	ra,12(sp)
8000521c:	00812423          	sw	s0,8(sp)
80005220:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:18
    if(selectedFrequencyScale != API_getFreqScale()){
80005224:	fbdff0ef          	jal	ra,800051e0 <API_getFreqScale>
80005228:	00050713          	mv	a4,a0
8000522c:	800227b7          	lui	a5,0x80022
80005230:	7e87a783          	lw	a5,2024(a5) # 800227e8 <__stack_top+0xfffdffe8>
80005234:	02f70063          	beq	a4,a5,80005254 <API_applyFreqScale+0x40>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:19
        HW_set_32bit_reg(FREQUENCY_SCALE, selectedFrequencyScale);
80005238:	800227b7          	lui	a5,0x80022
8000523c:	7e87a783          	lw	a5,2024(a5) # 800227e8 <__stack_top+0xfffdffe8>
80005240:	00078593          	mv	a1,a5
80005244:	900007b7          	lui	a5,0x90000
80005248:	ff878513          	addi	a0,a5,-8 # 8ffffff8 <__stack_top+0xffbd7f8>
8000524c:	d49fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:21
    }
    return;
80005250:	00000013          	nop
80005254:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:22
}
80005258:	00c12083          	lw	ra,12(sp)
8000525c:	00812403          	lw	s0,8(sp)
80005260:	01010113          	addi	sp,sp,16
80005264:	00008067          	ret

80005268 <API_freqStepUp>:
API_freqStepUp():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:24

void API_freqStepUp(){
80005268:	ff010113          	addi	sp,sp,-16
8000526c:	00812623          	sw	s0,12(sp)
80005270:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:25
    if(selectedFrequencyScale == FREQ_IDLE){
80005274:	800227b7          	lui	a5,0x80022
80005278:	7e87a703          	lw	a4,2024(a5) # 800227e8 <__stack_top+0xfffdffe8>
8000527c:	06400793          	li	a5,100
80005280:	00f71a63          	bne	a4,a5,80005294 <API_freqStepUp+0x2c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:26
        selectedFrequencyScale = FREQ_150MHz;
80005284:	800227b7          	lui	a5,0x80022
80005288:	09600713          	li	a4,150
8000528c:	7ee7a423          	sw	a4,2024(a5) # 800227e8 <__stack_top+0xfffdffe8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
        }
        else{
            selectedFrequencyScale = FREQ_IDLE;
        }
    }
    return;
80005290:	1340006f          	j	800053c4 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:28
    else if(selectedFrequencyScale==FREQ_150MHz){
80005294:	800227b7          	lui	a5,0x80022
80005298:	7e87a703          	lw	a4,2024(a5) # 800227e8 <__stack_top+0xfffdffe8>
8000529c:	09600793          	li	a5,150
800052a0:	00f71a63          	bne	a4,a5,800052b4 <API_freqStepUp+0x4c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:29
        selectedFrequencyScale = FREQ_250MHz;
800052a4:	800227b7          	lui	a5,0x80022
800052a8:	0fa00713          	li	a4,250
800052ac:	7ee7a423          	sw	a4,2024(a5) # 800227e8 <__stack_top+0xfffdffe8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
800052b0:	1140006f          	j	800053c4 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:31
    else if(selectedFrequencyScale==FREQ_250MHz){
800052b4:	800227b7          	lui	a5,0x80022
800052b8:	7e87a703          	lw	a4,2024(a5) # 800227e8 <__stack_top+0xfffdffe8>
800052bc:	0fa00793          	li	a5,250
800052c0:	00f71a63          	bne	a4,a5,800052d4 <API_freqStepUp+0x6c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:32
        selectedFrequencyScale = FREQ_500MHz;
800052c4:	800227b7          	lui	a5,0x80022
800052c8:	1f400713          	li	a4,500
800052cc:	7ee7a423          	sw	a4,2024(a5) # 800227e8 <__stack_top+0xfffdffe8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
800052d0:	0f40006f          	j	800053c4 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:34
    else if(selectedFrequencyScale==FREQ_500MHz){
800052d4:	800227b7          	lui	a5,0x80022
800052d8:	7e87a703          	lw	a4,2024(a5) # 800227e8 <__stack_top+0xfffdffe8>
800052dc:	1f400793          	li	a5,500
800052e0:	00f71a63          	bne	a4,a5,800052f4 <API_freqStepUp+0x8c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:35
        selectedFrequencyScale = FREQ_1GHz;
800052e4:	800227b7          	lui	a5,0x80022
800052e8:	3e800713          	li	a4,1000
800052ec:	7ee7a423          	sw	a4,2024(a5) # 800227e8 <__stack_top+0xfffdffe8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
800052f0:	0d40006f          	j	800053c4 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:37
    else if(selectedFrequencyScale==FREQ_1GHz){
800052f4:	800227b7          	lui	a5,0x80022
800052f8:	7e87a703          	lw	a4,2024(a5) # 800227e8 <__stack_top+0xfffdffe8>
800052fc:	3e800793          	li	a5,1000
80005300:	00f71a63          	bne	a4,a5,80005314 <API_freqStepUp+0xac>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:38
        selectedFrequencyScale = FREQ_1GHz;
80005304:	800227b7          	lui	a5,0x80022
80005308:	3e800713          	li	a4,1000
8000530c:	7ee7a423          	sw	a4,2024(a5) # 800227e8 <__stack_top+0xfffdffe8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005310:	0b40006f          	j	800053c4 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:41
        if(selectedFrequencyScale > FREQ_1GHz){
80005314:	800227b7          	lui	a5,0x80022
80005318:	7e87a703          	lw	a4,2024(a5) # 800227e8 <__stack_top+0xfffdffe8>
8000531c:	3e800793          	li	a5,1000
80005320:	00e7fa63          	bleu	a4,a5,80005334 <API_freqStepUp+0xcc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:42
            selectedFrequencyScale = FREQ_1GHz;
80005324:	800227b7          	lui	a5,0x80022
80005328:	3e800713          	li	a4,1000
8000532c:	7ee7a423          	sw	a4,2024(a5) # 800227e8 <__stack_top+0xfffdffe8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005330:	0940006f          	j	800053c4 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:44
        else if(selectedFrequencyScale > FREQ_500MHz){
80005334:	800227b7          	lui	a5,0x80022
80005338:	7e87a703          	lw	a4,2024(a5) # 800227e8 <__stack_top+0xfffdffe8>
8000533c:	1f400793          	li	a5,500
80005340:	00e7fa63          	bleu	a4,a5,80005354 <API_freqStepUp+0xec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:45
            selectedFrequencyScale = FREQ_1GHz;
80005344:	800227b7          	lui	a5,0x80022
80005348:	3e800713          	li	a4,1000
8000534c:	7ee7a423          	sw	a4,2024(a5) # 800227e8 <__stack_top+0xfffdffe8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005350:	0740006f          	j	800053c4 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:47
        else if(selectedFrequencyScale > FREQ_250MHz){
80005354:	800227b7          	lui	a5,0x80022
80005358:	7e87a703          	lw	a4,2024(a5) # 800227e8 <__stack_top+0xfffdffe8>
8000535c:	0fa00793          	li	a5,250
80005360:	00e7fa63          	bleu	a4,a5,80005374 <API_freqStepUp+0x10c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:48
            selectedFrequencyScale = FREQ_500MHz;
80005364:	800227b7          	lui	a5,0x80022
80005368:	1f400713          	li	a4,500
8000536c:	7ee7a423          	sw	a4,2024(a5) # 800227e8 <__stack_top+0xfffdffe8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005370:	0540006f          	j	800053c4 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:50
        else if(selectedFrequencyScale > FREQ_150MHz){
80005374:	800227b7          	lui	a5,0x80022
80005378:	7e87a703          	lw	a4,2024(a5) # 800227e8 <__stack_top+0xfffdffe8>
8000537c:	09600793          	li	a5,150
80005380:	00e7fa63          	bleu	a4,a5,80005394 <API_freqStepUp+0x12c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:51
            selectedFrequencyScale = FREQ_250MHz;
80005384:	800227b7          	lui	a5,0x80022
80005388:	0fa00713          	li	a4,250
8000538c:	7ee7a423          	sw	a4,2024(a5) # 800227e8 <__stack_top+0xfffdffe8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005390:	0340006f          	j	800053c4 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:53
        else if(selectedFrequencyScale > FREQ_IDLE){
80005394:	800227b7          	lui	a5,0x80022
80005398:	7e87a703          	lw	a4,2024(a5) # 800227e8 <__stack_top+0xfffdffe8>
8000539c:	06400793          	li	a5,100
800053a0:	00e7fa63          	bleu	a4,a5,800053b4 <API_freqStepUp+0x14c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:54
            selectedFrequencyScale = FREQ_150MHz;
800053a4:	800227b7          	lui	a5,0x80022
800053a8:	09600713          	li	a4,150
800053ac:	7ee7a423          	sw	a4,2024(a5) # 800227e8 <__stack_top+0xfffdffe8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
800053b0:	0140006f          	j	800053c4 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:57
            selectedFrequencyScale = FREQ_IDLE;
800053b4:	800227b7          	lui	a5,0x80022
800053b8:	06400713          	li	a4,100
800053bc:	7ee7a423          	sw	a4,2024(a5) # 800227e8 <__stack_top+0xfffdffe8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
800053c0:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:61
}
800053c4:	00c12403          	lw	s0,12(sp)
800053c8:	01010113          	addi	sp,sp,16
800053cc:	00008067          	ret

800053d0 <resetExecutedInstructions>:
resetExecutedInstructions():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:11
    printsv("Stores:\t\t",      HW_get_32bit_reg(STORES_COUNT));
    printsv("Others:\t\t",      HW_get_32bit_reg(OTHERS_COUNT));
    prints("--------------------------\n");
}

void resetExecutedInstructions(){
800053d0:	ff010113          	addi	sp,sp,-16
800053d4:	00112623          	sw	ra,12(sp)
800053d8:	00812423          	sw	s0,8(sp)
800053dc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:12
    HW_set_32bit_reg(LOADS_COUNT, 0);
800053e0:	00000593          	li	a1,0
800053e4:	900007b7          	lui	a5,0x90000
800053e8:	ff478513          	addi	a0,a5,-12 # 8ffffff4 <__stack_top+0xffbd7f4>
800053ec:	ba9fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:13
    HW_set_32bit_reg(STORES_COUNT, 0);
800053f0:	00000593          	li	a1,0
800053f4:	900007b7          	lui	a5,0x90000
800053f8:	ff078513          	addi	a0,a5,-16 # 8ffffff0 <__stack_top+0xffbd7f0>
800053fc:	b99fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:14
    HW_set_32bit_reg(OTHERS_COUNT, 0);
80005400:	00000593          	li	a1,0
80005404:	900007b7          	lui	a5,0x90000
80005408:	fec78513          	addi	a0,a5,-20 # 8fffffec <__stack_top+0xffbd7ec>
8000540c:	b89fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:15
    return;
80005410:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:16
}
80005414:	00c12083          	lw	ra,12(sp)
80005418:	00812403          	lw	s0,8(sp)
8000541c:	01010113          	addi	sp,sp,16
80005420:	00008067          	ret

80005424 <powerEstimation>:
powerEstimation():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:18

void powerEstimation(){
80005424:	fc010113          	addi	sp,sp,-64
80005428:	02112e23          	sw	ra,60(sp)
8000542c:	02812c23          	sw	s0,56(sp)
80005430:	04010413          	addi	s0,sp,64
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:21
    unsigned int mySlot;
    //unsigned int actualTime, deltaTime;
    unsigned int Voltage = 3;
80005434:	00300793          	li	a5,3
80005438:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:26
    unsigned int loads, stores, others, total;
    unsigned int dynamicEnergy_PE, dynamicEnergy_MEM, dynamicEnergy_Router;
    unsigned int totalEnergy;
    
    if(!thermalPacket_pending){
8000543c:	9641a783          	lw	a5,-1692(gp) # 80008144 <thermalPacket_pending>
80005440:	2a079063          	bnez	a5,800056e0 <powerEstimation+0x2bc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:27
        thermalPacket_pending = TRUE;
80005444:	00100713          	li	a4,1
80005448:	96e1a223          	sw	a4,-1692(gp) # 80008144 <thermalPacket_pending>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:35

        //                              period in s                      in ns    * 100                     
        //unsigned int period_ns = (unsigned int)((float)((1/(1000000*API_getFreqScale())) * 1000000000) * 100); // period in (ns * 100) ---- 1 ns = 100
        
        // change the PE frequency to the selected one
        API_applyFreqScale();
8000544c:	dc9ff0ef          	jal	ra,80005214 <API_applyFreqScale>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:38

        // reads the number of each type of instruction executed in the last window
        loads = HW_get_32bit_reg(LOADS_COUNT);
80005450:	900007b7          	lui	a5,0x90000
80005454:	ff478513          	addi	a0,a5,-12 # 8ffffff4 <__stack_top+0xffbd7f4>
80005458:	b45fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
8000545c:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:39
        stores = HW_get_32bit_reg(STORES_COUNT);
80005460:	900007b7          	lui	a5,0x90000
80005464:	ff078513          	addi	a0,a5,-16 # 8ffffff0 <__stack_top+0xffbd7f0>
80005468:	b35fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
8000546c:	fea42223          	sw	a0,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:40
        others = HW_get_32bit_reg(OTHERS_COUNT);
80005470:	900007b7          	lui	a5,0x90000
80005474:	fec78513          	addi	a0,a5,-20 # 8fffffec <__stack_top+0xffbd7ec>
80005478:	b25fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
8000547c:	fea42023          	sw	a0,-32(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:41
        resetExecutedInstructions();
80005480:	f51ff0ef          	jal	ra,800053d0 <resetExecutedInstructions>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:44

        // number of instructions executed in the last window
        total = loads + stores + others; 
80005484:	fe842703          	lw	a4,-24(s0)
80005488:	fe442783          	lw	a5,-28(s0)
8000548c:	00f707b3          	add	a5,a4,a5
80005490:	fe042703          	lw	a4,-32(s0)
80005494:	00f707b3          	add	a5,a4,a5
80005498:	fcf42e23          	sw	a5,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:45
        printsv("total:", total);
8000549c:	fdc42783          	lw	a5,-36(s0)
800054a0:	00078593          	mv	a1,a5
800054a4:	800087b7          	lui	a5,0x80008
800054a8:	b3478513          	addi	a0,a5,-1228 # 80007b34 <__stack_top+0xfffc5334>
800054ac:	4d8000ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:48

        // calculates the PE dynamic energy
        dynamicEnergy_PE = ((arithDyn[Voltage] * others) >> 6) + ((loadStoreDyn[Voltage] * (loads + stores)) >> 6);
800054b0:	800087b7          	lui	a5,0x80008
800054b4:	fec42703          	lw	a4,-20(s0)
800054b8:	00271713          	slli	a4,a4,0x2
800054bc:	adc78793          	addi	a5,a5,-1316 # 80007adc <__stack_top+0xfffc52dc>
800054c0:	00f707b3          	add	a5,a4,a5
800054c4:	0007a783          	lw	a5,0(a5)
800054c8:	00078713          	mv	a4,a5
800054cc:	fe042783          	lw	a5,-32(s0)
800054d0:	02f707b3          	mul	a5,a4,a5
800054d4:	0067d713          	srli	a4,a5,0x6
800054d8:	800087b7          	lui	a5,0x80008
800054dc:	fec42683          	lw	a3,-20(s0)
800054e0:	00269693          	slli	a3,a3,0x2
800054e4:	ae878793          	addi	a5,a5,-1304 # 80007ae8 <__stack_top+0xfffc52e8>
800054e8:	00f687b3          	add	a5,a3,a5
800054ec:	0007a783          	lw	a5,0(a5)
800054f0:	00078613          	mv	a2,a5
800054f4:	fe842683          	lw	a3,-24(s0)
800054f8:	fe442783          	lw	a5,-28(s0)
800054fc:	00f687b3          	add	a5,a3,a5
80005500:	02f607b3          	mul	a5,a2,a5
80005504:	0067d793          	srli	a5,a5,0x6
80005508:	00f707b3          	add	a5,a4,a5
8000550c:	fcf42c23          	sw	a5,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:51

        // calculates the MEM dynamic energy
        dynamicEnergy_MEM = ((readEnergyMemory[Voltage] * loads) >> 6) + ((writeEnergyMemory[Voltage] * stores) >> 6);
80005510:	800087b7          	lui	a5,0x80008
80005514:	fec42703          	lw	a4,-20(s0)
80005518:	00271713          	slli	a4,a4,0x2
8000551c:	ac478793          	addi	a5,a5,-1340 # 80007ac4 <__stack_top+0xfffc52c4>
80005520:	00f707b3          	add	a5,a4,a5
80005524:	0007a783          	lw	a5,0(a5)
80005528:	00078713          	mv	a4,a5
8000552c:	fe842783          	lw	a5,-24(s0)
80005530:	02f707b3          	mul	a5,a4,a5
80005534:	0067d713          	srli	a4,a5,0x6
80005538:	800087b7          	lui	a5,0x80008
8000553c:	fec42683          	lw	a3,-20(s0)
80005540:	00269693          	slli	a3,a3,0x2
80005544:	ad078793          	addi	a5,a5,-1328 # 80007ad0 <__stack_top+0xfffc52d0>
80005548:	00f687b3          	add	a5,a3,a5
8000554c:	0007a783          	lw	a5,0(a5)
80005550:	00078693          	mv	a3,a5
80005554:	fe442783          	lw	a5,-28(s0)
80005558:	02f687b3          	mul	a5,a3,a5
8000555c:	0067d793          	srli	a5,a5,0x6
80005560:	00f707b3          	add	a5,a4,a5
80005564:	fcf42a23          	sw	a5,-44(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:54

        // calculates the ROUTER dynamic energy
        dynamicEnergy_Router = 0; // TODO
80005568:	fc042823          	sw	zero,-48(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:57

        // the amount of energy spent by this tile in the last window
        totalEnergy = dynamicEnergy_MEM + dynamicEnergy_PE + dynamicEnergy_Router;
8000556c:	fd442703          	lw	a4,-44(s0)
80005570:	fd842783          	lw	a5,-40(s0)
80005574:	00f707b3          	add	a5,a4,a5
80005578:	fd042703          	lw	a4,-48(s0)
8000557c:	00f707b3          	add	a5,a4,a5
80005580:	fcf42623          	sw	a5,-52(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:58
        printsv("TotalEnergy: ", totalEnergy);
80005584:	fcc42783          	lw	a5,-52(s0)
80005588:	00078593          	mv	a1,a5
8000558c:	800087b7          	lui	a5,0x80008
80005590:	b3c78513          	addi	a0,a5,-1220 # 80007b3c <__stack_top+0xfffc533c>
80005594:	3f0000ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:63

        
        // Get a service slot...
        do{
            mySlot = API_GetServiceSlot();
80005598:	919ff0ef          	jal	ra,80004eb0 <API_GetServiceSlot>
8000559c:	fca42423          	sw	a0,-56(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:64
            if(mySlot == PIPE_FULL){
800055a0:	fc842703          	lw	a4,-56(s0)
800055a4:	fdfe07b7          	lui	a5,0xfdfe0
800055a8:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9d5fd>
800055ac:	00f71463          	bne	a4,a5,800055b4 <powerEstimation+0x190>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:66
                // Runs the NI Handler to send/receive packets, opening space in the PIPE
                API_NI_Handler();
800055b0:	548010ef          	jal	ra,80006af8 <API_NI_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:68
            }
        }while(mySlot == PIPE_FULL);
800055b4:	fc842703          	lw	a4,-56(s0)
800055b8:	fdfe07b7          	lui	a5,0xfdfe0
800055bc:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9d5fd>
800055c0:	fcf70ce3          	beq	a4,a5,80005598 <powerEstimation+0x174>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:70

        ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
800055c4:	800217b7          	lui	a5,0x80021
800055c8:	fc842703          	lw	a4,-56(s0)
800055cc:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
800055d0:	00070793          	mv	a5,a4
800055d4:	00479793          	slli	a5,a5,0x4
800055d8:	40e787b3          	sub	a5,a5,a4
800055dc:	00279793          	slli	a5,a5,0x2
800055e0:	00f687b3          	add	a5,a3,a5
800055e4:	feff0737          	lui	a4,0xfeff0
800055e8:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efad6fe>
800055ec:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:72

        ServicePipe[mySlot].header.header           = makeAddress(0, 0) | PERIPH_WEST;
800055f0:	00000593          	li	a1,0
800055f4:	00000513          	li	a0,0
800055f8:	7a8000ef          	jal	ra,80005da0 <makeAddress>
800055fc:	00050713          	mv	a4,a0
80005600:	000207b7          	lui	a5,0x20
80005604:	00f766b3          	or	a3,a4,a5
80005608:	800217b7          	lui	a5,0x80021
8000560c:	fc842703          	lw	a4,-56(s0)
80005610:	21c78613          	addi	a2,a5,540 # 8002121c <__stack_top+0xfffdea1c>
80005614:	00070793          	mv	a5,a4
80005618:	00479793          	slli	a5,a5,0x4
8000561c:	40e787b3          	sub	a5,a5,a4
80005620:	00279793          	slli	a5,a5,0x2
80005624:	00f607b3          	add	a5,a2,a5
80005628:	00d7a423          	sw	a3,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:73
        ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
8000562c:	800217b7          	lui	a5,0x80021
80005630:	fc842703          	lw	a4,-56(s0)
80005634:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
80005638:	00070793          	mv	a5,a4
8000563c:	00479793          	slli	a5,a5,0x4
80005640:	40e787b3          	sub	a5,a5,a4
80005644:	00279793          	slli	a5,a5,0x2
80005648:	00f687b3          	add	a5,a3,a5
8000564c:	00b00713          	li	a4,11
80005650:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:74
        ServicePipe[mySlot].header.service          = ENERGY_PACKET;
80005654:	800217b7          	lui	a5,0x80021
80005658:	fc842703          	lw	a4,-56(s0)
8000565c:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
80005660:	00070793          	mv	a5,a4
80005664:	00479793          	slli	a5,a5,0x4
80005668:	40e787b3          	sub	a5,a5,a4
8000566c:	00279793          	slli	a5,a5,0x2
80005670:	00f687b3          	add	a5,a3,a5
80005674:	05000713          	li	a4,80
80005678:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:75
        ServicePipe[mySlot].header.source_addr      = ProcessorAddr;
8000567c:	800227b7          	lui	a5,0x80022
80005680:	7f47a683          	lw	a3,2036(a5) # 800227f4 <__stack_top+0xfffdfff4>
80005684:	800217b7          	lui	a5,0x80021
80005688:	fc842703          	lw	a4,-56(s0)
8000568c:	21c78613          	addi	a2,a5,540 # 8002121c <__stack_top+0xfffdea1c>
80005690:	00070793          	mv	a5,a4
80005694:	00479793          	slli	a5,a5,0x4
80005698:	40e787b3          	sub	a5,a5,a4
8000569c:	00279793          	slli	a5,a5,0x2
800056a0:	00f607b3          	add	a5,a2,a5
800056a4:	00d7aa23          	sw	a3,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:76
        ServicePipe[mySlot].header.spent_energy     = totalEnergy;
800056a8:	800217b7          	lui	a5,0x80021
800056ac:	fc842703          	lw	a4,-56(s0)
800056b0:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
800056b4:	00070793          	mv	a5,a4
800056b8:	00479793          	slli	a5,a5,0x4
800056bc:	40e787b3          	sub	a5,a5,a4
800056c0:	00279793          	slli	a5,a5,0x2
800056c4:	00f687b3          	add	a5,a3,a5
800056c8:	fcc42703          	lw	a4,-52(s0)
800056cc:	00e7ac23          	sw	a4,24(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:77
        API_PushSendQueue(SERVICE, mySlot);
800056d0:	fc842583          	lw	a1,-56(s0)
800056d4:	10100537          	lui	a0,0x10100
800056d8:	708000ef          	jal	ra,80005de0 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:79
    }
    return;    
800056dc:	00000013          	nop
800056e0:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:80
800056e4:	03c12083          	lw	ra,60(sp)
800056e8:	03812403          	lw	s0,56(sp)
800056ec:	04010113          	addi	sp,sp,64
800056f0:	00008067          	ret

800056f4 <PLIC_EnableIRQ>:
PLIC_EnableIRQ():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:154
{
800056f4:	fd010113          	addi	sp,sp,-48
800056f8:	02812623          	sw	s0,44(sp)
800056fc:	03010413          	addi	s0,sp,48
80005700:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:155
    unsigned long hart_id = read_csr(mhartid);
80005704:	f14027f3          	csrr	a5,mhartid
80005708:	fef42623          	sw	a5,-20(s0)
8000570c:	fec42783          	lw	a5,-20(s0)
80005710:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:156
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80005714:	40000737          	lui	a4,0x40000
80005718:	fdc42783          	lw	a5,-36(s0)
8000571c:	0057d793          	srli	a5,a5,0x5
80005720:	fe842683          	lw	a3,-24(s0)
80005724:	00569693          	slli	a3,a3,0x5
80005728:	00f686b3          	add	a3,a3,a5
8000572c:	000017b7          	lui	a5,0x1
80005730:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80005734:	00f687b3          	add	a5,a3,a5
80005738:	00279793          	slli	a5,a5,0x2
8000573c:	00f707b3          	add	a5,a4,a5
80005740:	0007a783          	lw	a5,0(a5)
80005744:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:157
    current |= (uint32_t)1 << (IRQn % 32);
80005748:	fdc42783          	lw	a5,-36(s0)
8000574c:	01f7f793          	andi	a5,a5,31
80005750:	00100713          	li	a4,1
80005754:	00f717b3          	sll	a5,a4,a5
80005758:	fe442703          	lw	a4,-28(s0)
8000575c:	00f767b3          	or	a5,a4,a5
80005760:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:158
    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
80005764:	40000737          	lui	a4,0x40000
80005768:	fdc42783          	lw	a5,-36(s0)
8000576c:	0057d793          	srli	a5,a5,0x5
80005770:	fe842683          	lw	a3,-24(s0)
80005774:	00569693          	slli	a3,a3,0x5
80005778:	00f686b3          	add	a3,a3,a5
8000577c:	000017b7          	lui	a5,0x1
80005780:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80005784:	00f687b3          	add	a5,a3,a5
80005788:	00279793          	slli	a5,a5,0x2
8000578c:	00f707b3          	add	a5,a4,a5
80005790:	fe442703          	lw	a4,-28(s0)
80005794:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:159
}
80005798:	00000013          	nop
8000579c:	02c12403          	lw	s0,44(sp)
800057a0:	03010113          	addi	sp,sp,48
800057a4:	00008067          	ret

800057a8 <PLIC_SetPriority>:
PLIC_SetPriority():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:188
{
800057a8:	fe010113          	addi	sp,sp,-32
800057ac:	00812e23          	sw	s0,28(sp)
800057b0:	02010413          	addi	s0,sp,32
800057b4:	fea42623          	sw	a0,-20(s0)
800057b8:	feb42423          	sw	a1,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:189
    PLIC->SOURCE_PRIORITY[IRQn] = priority;
800057bc:	40000737          	lui	a4,0x40000
800057c0:	fec42783          	lw	a5,-20(s0)
800057c4:	00279793          	slli	a5,a5,0x2
800057c8:	00f707b3          	add	a5,a4,a5
800057cc:	fe842703          	lw	a4,-24(s0)
800057d0:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:190
}
800057d4:	00000013          	nop
800057d8:	01c12403          	lw	s0,28(sp)
800057dc:	02010113          	addi	sp,sp,32
800057e0:	00008067          	ret

800057e4 <Chronos_init>:
Chronos_init():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:32

//volatile unsigned int NI_IRCount;

////////////////////////////////////////////////////////////
// Initialize Chronos stuff
void Chronos_init(){
800057e4:	ff010113          	addi	sp,sp,-16
800057e8:	00112623          	sw	ra,12(sp)
800057ec:	00812423          	sw	s0,8(sp)
800057f0:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:34
    // Resets the amount of each executed instruction
    resetExecutedInstructions();
800057f4:	bddff0ef          	jal	ra,800053d0 <resetExecutedInstructions>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:37

    //Informs the Router this tile ID, that is provided by Harness
    HW_set_32bit_reg(ROUTER_BASE, HW_get_32bit_reg(MY_ID)); 
800057f8:	900007b7          	lui	a5,0x90000
800057fc:	ffc78513          	addi	a0,a5,-4 # 8ffffffc <__stack_top+0xffbd7fc>
80005800:	f9cfb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005804:	00050793          	mv	a5,a0
80005808:	00078593          	mv	a1,a5
8000580c:	50000537          	lui	a0,0x50000
80005810:	f84fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:40
    
    // Reads this processor address, calculated by the router
    ProcessorAddr = HW_get_32bit_reg(ROUTER_BASE);
80005814:	50000537          	lui	a0,0x50000
80005818:	f84fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
8000581c:	00050713          	mv	a4,a0
80005820:	800227b7          	lui	a5,0x80022
80005824:	7ee7aa23          	sw	a4,2036(a5) # 800227f4 <__stack_top+0xfffdfff4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:43

    // Informs the PRINTER this tile address
    HW_set_32bit_reg(PRINTER_CHAR, getXpos(ProcessorAddr));
80005828:	800227b7          	lui	a5,0x80022
8000582c:	7f47a783          	lw	a5,2036(a5) # 800227f4 <__stack_top+0xfffdfff4>
80005830:	00078513          	mv	a0,a5
80005834:	1f8000ef          	jal	ra,80005a2c <getXpos>
80005838:	00050793          	mv	a5,a0
8000583c:	00078593          	mv	a1,a5
80005840:	500007b7          	lui	a5,0x50000
80005844:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80005848:	f4cfb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:44
    HW_set_32bit_reg(PRINTER_CHAR, getYpos(ProcessorAddr));
8000584c:	800227b7          	lui	a5,0x80022
80005850:	7f47a783          	lw	a5,2036(a5) # 800227f4 <__stack_top+0xfffdfff4>
80005854:	00078513          	mv	a0,a5
80005858:	200000ef          	jal	ra,80005a58 <getYpos>
8000585c:	00050793          	mv	a5,a0
80005860:	00078593          	mv	a1,a5
80005864:	500007b7          	lui	a5,0x50000
80005868:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
8000586c:	f28fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:47

    // Initialize the TaskList
    API_TaskListInit();
80005870:	ae5fe0ef          	jal	ra,80004354 <API_TaskListInit>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:50
    
    // Initialize the Message & Service PIPE
    API_PipeInitialization();
80005874:	c38ff0ef          	jal	ra,80004cac <API_PipeInitialization>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:51
    SendingQueue_front = 0;
80005878:	800217b7          	lui	a5,0x80021
8000587c:	3607ae23          	sw	zero,892(a5) # 8002137c <__stack_top+0xfffdeb7c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:52
    SendingQueue_tail = 0;
80005880:	800217b7          	lui	a5,0x80021
80005884:	3607a223          	sw	zero,868(a5) # 80021364 <__stack_top+0xfffdeb64>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:55

    // Configures the timer to interrupt at each ms
    HW_set_32bit_reg(NI_TIMER, 1000);
80005888:	3e800593          	li	a1,1000
8000588c:	500007b7          	lui	a5,0x50000
80005890:	01078513          	addi	a0,a5,16 # 50000010 <RAM_SIZE+0x4ff80010>
80005894:	f00fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:58

    // Informs the NI the address to store incoming packets
    HW_set_32bit_reg(NI_ADDR, (unsigned int)&incommingPacket.header);
80005898:	800217b7          	lui	a5,0x80021
8000589c:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
800058a0:	00078593          	mv	a1,a5
800058a4:	500007b7          	lui	a5,0x50000
800058a8:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
800058ac:	ee8fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:61
    
    // Enables interruption from NI
    NI_enable_irq(TX_RX);
800058b0:	000077b7          	lui	a5,0x7
800058b4:	77778513          	addi	a0,a5,1911 # 7777 <HEAP_SIZE-0x8889>
800058b8:	214000ef          	jal	ra,80005acc <NI_enable_irq>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:64

    // Set the system to Idle
    API_setFreqIdle();
800058bc:	8d1ff0ef          	jal	ra,8000518c <API_setFreqIdle>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:65
    API_freqStepUp();
800058c0:	9a9ff0ef          	jal	ra,80005268 <API_freqStepUp>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:66
    return;
800058c4:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:67
}
800058c8:	00c12083          	lw	ra,12(sp)
800058cc:	00812403          	lw	s0,8(sp)
800058d0:	01010113          	addi	sp,sp,16
800058d4:	00008067          	ret

800058d8 <prints>:
prints():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:71

////////////////////////////////////////////////////////////
// Prints a string
void prints(char *text) {
800058d8:	fd010113          	addi	sp,sp,-48
800058dc:	02112623          	sw	ra,44(sp)
800058e0:	02812423          	sw	s0,40(sp)
800058e4:	03010413          	addi	s0,sp,48
800058e8:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:72
    int i = 0;
800058ec:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:74 (discriminator 1)
    do {
        HW_set_32bit_reg(PRINTER_CHAR, text[i]);
800058f0:	fec42783          	lw	a5,-20(s0)
800058f4:	fdc42703          	lw	a4,-36(s0)
800058f8:	00f707b3          	add	a5,a4,a5
800058fc:	00078783          	lb	a5,0(a5)
80005900:	00078593          	mv	a1,a5
80005904:	500007b7          	lui	a5,0x50000
80005908:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
8000590c:	e88fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:75 (discriminator 1)
        i++;
80005910:	fec42783          	lw	a5,-20(s0)
80005914:	00178793          	addi	a5,a5,1
80005918:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:76 (discriminator 1)
    } while (text[i - 1] != '\0');
8000591c:	fec42783          	lw	a5,-20(s0)
80005920:	fff78793          	addi	a5,a5,-1
80005924:	fdc42703          	lw	a4,-36(s0)
80005928:	00f707b3          	add	a5,a4,a5
8000592c:	00078783          	lb	a5,0(a5)
80005930:	fc0790e3          	bnez	a5,800058f0 <prints+0x18>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:77
    return;
80005934:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:78
}
80005938:	02c12083          	lw	ra,44(sp)
8000593c:	02812403          	lw	s0,40(sp)
80005940:	03010113          	addi	sp,sp,48
80005944:	00008067          	ret

80005948 <printi>:
printi():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:82

////////////////////////////////////////////////////////////
// Prints an integer
void printi(int value) {
80005948:	fe010113          	addi	sp,sp,-32
8000594c:	00112e23          	sw	ra,28(sp)
80005950:	00812c23          	sw	s0,24(sp)
80005954:	02010413          	addi	s0,sp,32
80005958:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:83
    HW_set_32bit_reg(PRINTER_INT, value);
8000595c:	fec42783          	lw	a5,-20(s0)
80005960:	00078593          	mv	a1,a5
80005964:	500007b7          	lui	a5,0x50000
80005968:	02478513          	addi	a0,a5,36 # 50000024 <RAM_SIZE+0x4ff80024>
8000596c:	e28fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:84
    return;
80005970:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:85
}
80005974:	01c12083          	lw	ra,28(sp)
80005978:	01812403          	lw	s0,24(sp)
8000597c:	02010113          	addi	sp,sp,32
80005980:	00008067          	ret

80005984 <printsv>:
printsv():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:89

////////////////////////////////////////////////////////////
// Prints a string followed by a integer
void printsv(char *text1, int value1) {
80005984:	fe010113          	addi	sp,sp,-32
80005988:	00112e23          	sw	ra,28(sp)
8000598c:	00812c23          	sw	s0,24(sp)
80005990:	02010413          	addi	s0,sp,32
80005994:	fea42623          	sw	a0,-20(s0)
80005998:	feb42423          	sw	a1,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:90
    prints(text1);
8000599c:	fec42503          	lw	a0,-20(s0)
800059a0:	f39ff0ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:91
    printi(value1);
800059a4:	fe842503          	lw	a0,-24(s0)
800059a8:	fa1ff0ef          	jal	ra,80005948 <printi>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:92
    prints("\n");
800059ac:	800087b7          	lui	a5,0x80008
800059b0:	b4c78513          	addi	a0,a5,-1204 # 80007b4c <__stack_top+0xfffc534c>
800059b4:	f25ff0ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:93
    return;
800059b8:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:94
}
800059bc:	01c12083          	lw	ra,28(sp)
800059c0:	01812403          	lw	s0,24(sp)
800059c4:	02010113          	addi	sp,sp,32
800059c8:	00008067          	ret

800059cc <printsvsv>:
printsvsv():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:98

////////////////////////////////////////////////////////////
// Prints two strings and two integers interspersed
void printsvsv(char *text1, int value1, char *text2, int value2) {
800059cc:	fe010113          	addi	sp,sp,-32
800059d0:	00112e23          	sw	ra,28(sp)
800059d4:	00812c23          	sw	s0,24(sp)
800059d8:	02010413          	addi	s0,sp,32
800059dc:	fea42623          	sw	a0,-20(s0)
800059e0:	feb42423          	sw	a1,-24(s0)
800059e4:	fec42223          	sw	a2,-28(s0)
800059e8:	fed42023          	sw	a3,-32(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:99
    prints(text1);
800059ec:	fec42503          	lw	a0,-20(s0)
800059f0:	ee9ff0ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:100
    printi(value1);
800059f4:	fe842503          	lw	a0,-24(s0)
800059f8:	f51ff0ef          	jal	ra,80005948 <printi>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:101
    prints(text2);
800059fc:	fe442503          	lw	a0,-28(s0)
80005a00:	ed9ff0ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:102
    printi(value2);
80005a04:	fe042503          	lw	a0,-32(s0)
80005a08:	f41ff0ef          	jal	ra,80005948 <printi>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:103
    prints("\n");
80005a0c:	800087b7          	lui	a5,0x80008
80005a10:	b4c78513          	addi	a0,a5,-1204 # 80007b4c <__stack_top+0xfffc534c>
80005a14:	ec5ff0ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:104
    return;
80005a18:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:105
}
80005a1c:	01c12083          	lw	ra,28(sp)
80005a20:	01812403          	lw	s0,24(sp)
80005a24:	02010113          	addi	sp,sp,32
80005a28:	00008067          	ret

80005a2c <getXpos>:
getXpos():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:109

////////////////////////////////////////////////////////////
// Gets the X coordinate from the address
unsigned int getXpos(unsigned int addr) { return ((addr & 0x0000FF00) >> 8); }
80005a2c:	fe010113          	addi	sp,sp,-32
80005a30:	00812e23          	sw	s0,28(sp)
80005a34:	02010413          	addi	s0,sp,32
80005a38:	fea42623          	sw	a0,-20(s0)
80005a3c:	fec42783          	lw	a5,-20(s0)
80005a40:	0087d793          	srli	a5,a5,0x8
80005a44:	0ff7f793          	andi	a5,a5,255
80005a48:	00078513          	mv	a0,a5
80005a4c:	01c12403          	lw	s0,28(sp)
80005a50:	02010113          	addi	sp,sp,32
80005a54:	00008067          	ret

80005a58 <getYpos>:
getYpos():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:113

////////////////////////////////////////////////////////////
// Gets the Y coordinate from the address
unsigned int getYpos(unsigned int addr) { return (addr & 0x000000FF); }
80005a58:	fe010113          	addi	sp,sp,-32
80005a5c:	00812e23          	sw	s0,28(sp)
80005a60:	02010413          	addi	s0,sp,32
80005a64:	fea42623          	sw	a0,-20(s0)
80005a68:	fec42783          	lw	a5,-20(s0)
80005a6c:	0ff7f793          	andi	a5,a5,255
80005a70:	00078513          	mv	a0,a5
80005a74:	01c12403          	lw	s0,28(sp)
80005a78:	02010113          	addi	sp,sp,32
80005a7c:	00008067          	ret

80005a80 <SendRaw>:
SendRaw():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:117

///////////////////////////////////////////////////////////////////
// Configure the NI to transmitt a given packet
void SendRaw(unsigned int addr) {
80005a80:	fe010113          	addi	sp,sp,-32
80005a84:	00112e23          	sw	ra,28(sp)
80005a88:	00812c23          	sw	s0,24(sp)
80005a8c:	02010413          	addi	s0,sp,32
80005a90:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:118
    HW_set_32bit_reg(NI_ADDR, addr);
80005a94:	fec42583          	lw	a1,-20(s0)
80005a98:	500007b7          	lui	a5,0x50000
80005a9c:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
80005aa0:	cf4fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:119
    HW_set_32bit_reg(NI_TX, TX);
80005aa4:	000027b7          	lui	a5,0x2
80005aa8:	22278593          	addi	a1,a5,546 # 2222 <HEAP_SIZE-0xddde>
80005aac:	500007b7          	lui	a5,0x50000
80005ab0:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80005ab4:	ce0fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:120
    return;
80005ab8:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:121
}
80005abc:	01c12083          	lw	ra,28(sp)
80005ac0:	01812403          	lw	s0,24(sp)
80005ac4:	02010113          	addi	sp,sp,32
80005ac8:	00008067          	ret

80005acc <NI_enable_irq>:
NI_enable_irq():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:125

////////////////////////////////////////////////////////////
// Enables interruptions incomming from NI
void NI_enable_irq(int which){
80005acc:	fe010113          	addi	sp,sp,-32
80005ad0:	00112e23          	sw	ra,28(sp)
80005ad4:	00812c23          	sw	s0,24(sp)
80005ad8:	02010413          	addi	s0,sp,32
80005adc:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:126
    PLIC_EnableIRQ(NI_RX_IRQn);
80005ae0:	00200513          	li	a0,2
80005ae4:	c11ff0ef          	jal	ra,800056f4 <PLIC_EnableIRQ>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:127
    PLIC_SetPriority(NI_RX_IRQn, 1);
80005ae8:	00100593          	li	a1,1
80005aec:	00200513          	li	a0,2
80005af0:	cb9ff0ef          	jal	ra,800057a8 <PLIC_SetPriority>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:128
    return;
80005af4:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:129
}
80005af8:	01c12083          	lw	ra,28(sp)
80005afc:	01812403          	lw	s0,24(sp)
80005b00:	02010113          	addi	sp,sp,32
80005b04:	00008067          	ret

80005b08 <External_2_IRQHandler>:
External_2_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:140
    return;
}

////////////////////////////////////////////////////////////
// Interruption handler for the NI
uint8_t External_2_IRQHandler(void){    
80005b08:	ff010113          	addi	sp,sp,-16
80005b0c:	00112623          	sw	ra,12(sp)
80005b10:	00812423          	sw	s0,8(sp)
80005b14:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:141
    API_NI_Handler();
80005b18:	7e1000ef          	jal	ra,80006af8 <API_NI_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:143

    return 0;
80005b1c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:144
}
80005b20:	00078513          	mv	a0,a5
80005b24:	00c12083          	lw	ra,12(sp)
80005b28:	00812403          	lw	s0,8(sp)
80005b2c:	01010113          	addi	sp,sp,16
80005b30:	00008067          	ret

80005b34 <mySwap>:
mySwap():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:149

////////////////////////////////////////////////////////////
// https://www.techiedelight.com/implement-itoa-function-in-c/
// Function to swap two numbers
void mySwap(char *x, char *y) {
80005b34:	fd010113          	addi	sp,sp,-48
80005b38:	02812623          	sw	s0,44(sp)
80005b3c:	03010413          	addi	s0,sp,48
80005b40:	fca42e23          	sw	a0,-36(s0)
80005b44:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:150
    char t = *x; *x = *y; *y = t;
80005b48:	fdc42783          	lw	a5,-36(s0)
80005b4c:	0007c783          	lbu	a5,0(a5)
80005b50:	fef407a3          	sb	a5,-17(s0)
80005b54:	fd842783          	lw	a5,-40(s0)
80005b58:	00078703          	lb	a4,0(a5)
80005b5c:	fdc42783          	lw	a5,-36(s0)
80005b60:	00e78023          	sb	a4,0(a5)
80005b64:	fd842783          	lw	a5,-40(s0)
80005b68:	fef44703          	lbu	a4,-17(s0)
80005b6c:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:151
}
80005b70:	00000013          	nop
80005b74:	02c12403          	lw	s0,44(sp)
80005b78:	03010113          	addi	sp,sp,48
80005b7c:	00008067          	ret

80005b80 <reverse>:
reverse():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:153
// Function to reverse `buffer[i…j]`
char* reverse(char *buffer, int i, int j){
80005b80:	fe010113          	addi	sp,sp,-32
80005b84:	00112e23          	sw	ra,28(sp)
80005b88:	00812c23          	sw	s0,24(sp)
80005b8c:	02010413          	addi	s0,sp,32
80005b90:	fea42623          	sw	a0,-20(s0)
80005b94:	feb42423          	sw	a1,-24(s0)
80005b98:	fec42223          	sw	a2,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:154
    while (i < j) {
80005b9c:	0400006f          	j	80005bdc <reverse+0x5c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:155
        mySwap(&buffer[i++], &buffer[j--]);
80005ba0:	fe842783          	lw	a5,-24(s0)
80005ba4:	00178713          	addi	a4,a5,1
80005ba8:	fee42423          	sw	a4,-24(s0)
80005bac:	00078713          	mv	a4,a5
80005bb0:	fec42783          	lw	a5,-20(s0)
80005bb4:	00e786b3          	add	a3,a5,a4
80005bb8:	fe442783          	lw	a5,-28(s0)
80005bbc:	fff78713          	addi	a4,a5,-1
80005bc0:	fee42223          	sw	a4,-28(s0)
80005bc4:	00078713          	mv	a4,a5
80005bc8:	fec42783          	lw	a5,-20(s0)
80005bcc:	00e787b3          	add	a5,a5,a4
80005bd0:	00078593          	mv	a1,a5
80005bd4:	00068513          	mv	a0,a3
80005bd8:	f5dff0ef          	jal	ra,80005b34 <mySwap>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:154
    while (i < j) {
80005bdc:	fe842703          	lw	a4,-24(s0)
80005be0:	fe442783          	lw	a5,-28(s0)
80005be4:	faf74ee3          	blt	a4,a5,80005ba0 <reverse+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:158
    }
 
    return buffer;
80005be8:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:159
}
80005bec:	00078513          	mv	a0,a5
80005bf0:	01c12083          	lw	ra,28(sp)
80005bf4:	01812403          	lw	s0,24(sp)
80005bf8:	02010113          	addi	sp,sp,32
80005bfc:	00008067          	ret

80005c00 <myItoa>:
myItoa():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:161
// Iterative function to implement `itoa()` function in C
char* myItoa(int value, char* buffer, int base){
80005c00:	fd010113          	addi	sp,sp,-48
80005c04:	02112623          	sw	ra,44(sp)
80005c08:	02812423          	sw	s0,40(sp)
80005c0c:	03010413          	addi	s0,sp,48
80005c10:	fca42e23          	sw	a0,-36(s0)
80005c14:	fcb42c23          	sw	a1,-40(s0)
80005c18:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:163
    // invalid input
    if (base < 2 || base > 32) {
80005c1c:	fd442703          	lw	a4,-44(s0)
80005c20:	00100793          	li	a5,1
80005c24:	00e7d863          	ble	a4,a5,80005c34 <myItoa+0x34>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:163 (discriminator 1)
80005c28:	fd442703          	lw	a4,-44(s0)
80005c2c:	02000793          	li	a5,32
80005c30:	00e7d663          	ble	a4,a5,80005c3c <myItoa+0x3c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:164
        return buffer;
80005c34:	fd842783          	lw	a5,-40(s0)
80005c38:	1540006f          	j	80005d8c <myItoa+0x18c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:168
    }
    // consider the absolute value of the number
    int n;
    if (value < 0)
80005c3c:	fdc42783          	lw	a5,-36(s0)
80005c40:	0007da63          	bgez	a5,80005c54 <myItoa+0x54>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:169
        n = value * -1;
80005c44:	fdc42783          	lw	a5,-36(s0)
80005c48:	40f007b3          	neg	a5,a5
80005c4c:	fef42623          	sw	a5,-20(s0)
80005c50:	00c0006f          	j	80005c5c <myItoa+0x5c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:171
    else 
        n = value;
80005c54:	fdc42783          	lw	a5,-36(s0)
80005c58:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:173

    int i = 0;
80005c5c:	fe042423          	sw	zero,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:174
    while (n){
80005c60:	09c0006f          	j	80005cfc <myItoa+0xfc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:175
        int r = n % base;
80005c64:	fec42703          	lw	a4,-20(s0)
80005c68:	fd442783          	lw	a5,-44(s0)
80005c6c:	02f767b3          	rem	a5,a4,a5
80005c70:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:177
 
        if (r >= 10) {
80005c74:	fe442703          	lw	a4,-28(s0)
80005c78:	00900793          	li	a5,9
80005c7c:	02e7de63          	ble	a4,a5,80005cb8 <myItoa+0xb8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:178
            buffer[i++] = 65 + (r - 10);
80005c80:	fe442783          	lw	a5,-28(s0)
80005c84:	0ff7f793          	andi	a5,a5,255
80005c88:	03778793          	addi	a5,a5,55
80005c8c:	0ff7f693          	andi	a3,a5,255
80005c90:	fe842783          	lw	a5,-24(s0)
80005c94:	00178713          	addi	a4,a5,1
80005c98:	fee42423          	sw	a4,-24(s0)
80005c9c:	00078713          	mv	a4,a5
80005ca0:	fd842783          	lw	a5,-40(s0)
80005ca4:	00e787b3          	add	a5,a5,a4
80005ca8:	01869713          	slli	a4,a3,0x18
80005cac:	41875713          	srai	a4,a4,0x18
80005cb0:	00e78023          	sb	a4,0(a5)
80005cb4:	0380006f          	j	80005cec <myItoa+0xec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:181
        }
        else {
            buffer[i++] = 48 + r;
80005cb8:	fe442783          	lw	a5,-28(s0)
80005cbc:	0ff7f793          	andi	a5,a5,255
80005cc0:	03078793          	addi	a5,a5,48
80005cc4:	0ff7f693          	andi	a3,a5,255
80005cc8:	fe842783          	lw	a5,-24(s0)
80005ccc:	00178713          	addi	a4,a5,1
80005cd0:	fee42423          	sw	a4,-24(s0)
80005cd4:	00078713          	mv	a4,a5
80005cd8:	fd842783          	lw	a5,-40(s0)
80005cdc:	00e787b3          	add	a5,a5,a4
80005ce0:	01869713          	slli	a4,a3,0x18
80005ce4:	41875713          	srai	a4,a4,0x18
80005ce8:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:184
        }
 
        n = n / base;
80005cec:	fec42703          	lw	a4,-20(s0)
80005cf0:	fd442783          	lw	a5,-44(s0)
80005cf4:	02f747b3          	div	a5,a4,a5
80005cf8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:174
    while (n){
80005cfc:	fec42783          	lw	a5,-20(s0)
80005d00:	f60792e3          	bnez	a5,80005c64 <myItoa+0x64>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:187
    }
    // if the number is 0
    if (i == 0) {
80005d04:	fe842783          	lw	a5,-24(s0)
80005d08:	02079263          	bnez	a5,80005d2c <myItoa+0x12c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:188
        buffer[i++] = '0';
80005d0c:	fe842783          	lw	a5,-24(s0)
80005d10:	00178713          	addi	a4,a5,1
80005d14:	fee42423          	sw	a4,-24(s0)
80005d18:	00078713          	mv	a4,a5
80005d1c:	fd842783          	lw	a5,-40(s0)
80005d20:	00e787b3          	add	a5,a5,a4
80005d24:	03000713          	li	a4,48
80005d28:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:193
    }
    // If the base is 10 and the value is negative, the resulting string
    // is preceded with a minus sign (-)
    // With any other base, value is always considered unsigned
    if (value < 0 && base == 10) {
80005d2c:	fdc42783          	lw	a5,-36(s0)
80005d30:	0207d863          	bgez	a5,80005d60 <myItoa+0x160>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:193 (discriminator 1)
80005d34:	fd442703          	lw	a4,-44(s0)
80005d38:	00a00793          	li	a5,10
80005d3c:	02f71263          	bne	a4,a5,80005d60 <myItoa+0x160>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:194
        buffer[i++] = '-';
80005d40:	fe842783          	lw	a5,-24(s0)
80005d44:	00178713          	addi	a4,a5,1
80005d48:	fee42423          	sw	a4,-24(s0)
80005d4c:	00078713          	mv	a4,a5
80005d50:	fd842783          	lw	a5,-40(s0)
80005d54:	00e787b3          	add	a5,a5,a4
80005d58:	02d00713          	li	a4,45
80005d5c:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:196
    }
    buffer[i] = '\0'; // null terminate string
80005d60:	fe842783          	lw	a5,-24(s0)
80005d64:	fd842703          	lw	a4,-40(s0)
80005d68:	00f707b3          	add	a5,a4,a5
80005d6c:	00078023          	sb	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:198
    // reverse the string and return it
    return reverse(buffer, 0, i - 1);
80005d70:	fe842783          	lw	a5,-24(s0)
80005d74:	fff78793          	addi	a5,a5,-1
80005d78:	00078613          	mv	a2,a5
80005d7c:	00000593          	li	a1,0
80005d80:	fd842503          	lw	a0,-40(s0)
80005d84:	dfdff0ef          	jal	ra,80005b80 <reverse>
80005d88:	00050793          	mv	a5,a0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:199
}
80005d8c:	00078513          	mv	a0,a5
80005d90:	02c12083          	lw	ra,44(sp)
80005d94:	02812403          	lw	s0,40(sp)
80005d98:	03010113          	addi	sp,sp,48
80005d9c:	00008067          	ret

80005da0 <makeAddress>:
makeAddress():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:213
    return;
}

////////////////////////////////////////////////////////////
// Returns the PE address for a giver pair of coords
unsigned int makeAddress(unsigned int x, unsigned int y) {
80005da0:	fd010113          	addi	sp,sp,-48
80005da4:	02812623          	sw	s0,44(sp)
80005da8:	03010413          	addi	s0,sp,48
80005dac:	fca42e23          	sw	a0,-36(s0)
80005db0:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:214
    unsigned int address = 0x00000000;
80005db4:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:215
    return (address | (x << 8) | y);
80005db8:	fdc42783          	lw	a5,-36(s0)
80005dbc:	00879713          	slli	a4,a5,0x8
80005dc0:	fec42783          	lw	a5,-20(s0)
80005dc4:	00f76733          	or	a4,a4,a5
80005dc8:	fd842783          	lw	a5,-40(s0)
80005dcc:	00f767b3          	or	a5,a4,a5
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:216
}
80005dd0:	00078513          	mv	a0,a5
80005dd4:	02c12403          	lw	s0,44(sp)
80005dd8:	03010113          	addi	sp,sp,48
80005ddc:	00008067          	ret

80005de0 <API_PushSendQueue>:
API_PushSendQueue():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:220

////////////////////////////////////////////////////////////
// Pushes one slot to the sending queue
void API_PushSendQueue(unsigned int type, unsigned int slot){
80005de0:	fe010113          	addi	sp,sp,-32
80005de4:	00112e23          	sw	ra,28(sp)
80005de8:	00812c23          	sw	s0,24(sp)
80005dec:	02010413          	addi	s0,sp,32
80005df0:	fea42623          	sw	a0,-20(s0)
80005df4:	feb42423          	sw	a1,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:221
    vTaskEnterCritical();
80005df8:	ea1fc0ef          	jal	ra,80002c98 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:222
    SendingQueue[SendingQueue_front] = type | slot;
80005dfc:	800217b7          	lui	a5,0x80021
80005e00:	37c7a683          	lw	a3,892(a5) # 8002137c <__stack_top+0xfffdeb7c>
80005e04:	fec42703          	lw	a4,-20(s0)
80005e08:	fe842783          	lw	a5,-24(s0)
80005e0c:	00f76733          	or	a4,a4,a5
80005e10:	800217b7          	lui	a5,0x80021
80005e14:	00269693          	slli	a3,a3,0x2
80005e18:	34478793          	addi	a5,a5,836 # 80021344 <__stack_top+0xfffdeb44>
80005e1c:	00f687b3          	add	a5,a3,a5
80005e20:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:223
    printsv("SendingQueue_front: ", SendingQueue_front);
80005e24:	800217b7          	lui	a5,0x80021
80005e28:	37c7a783          	lw	a5,892(a5) # 8002137c <__stack_top+0xfffdeb7c>
80005e2c:	00078593          	mv	a1,a5
80005e30:	800087b7          	lui	a5,0x80008
80005e34:	b7878513          	addi	a0,a5,-1160 # 80007b78 <__stack_top+0xfffc5378>
80005e38:	b4dff0ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:224
    if(SendingQueue_front == (PIPE_SIZE*2)-1){
80005e3c:	800217b7          	lui	a5,0x80021
80005e40:	37c7a703          	lw	a4,892(a5) # 8002137c <__stack_top+0xfffdeb7c>
80005e44:	00700793          	li	a5,7
80005e48:	00f71863          	bne	a4,a5,80005e58 <API_PushSendQueue+0x78>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:225
        SendingQueue_front = 0;
80005e4c:	800217b7          	lui	a5,0x80021
80005e50:	3607ae23          	sw	zero,892(a5) # 8002137c <__stack_top+0xfffdeb7c>
80005e54:	0180006f          	j	80005e6c <API_PushSendQueue+0x8c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:227
    } else {
        SendingQueue_front++;
80005e58:	800217b7          	lui	a5,0x80021
80005e5c:	37c7a783          	lw	a5,892(a5) # 8002137c <__stack_top+0xfffdeb7c>
80005e60:	00178713          	addi	a4,a5,1
80005e64:	800217b7          	lui	a5,0x80021
80005e68:	36e7ae23          	sw	a4,892(a5) # 8002137c <__stack_top+0xfffdeb7c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:229
    }
    API_Try2Send();
80005e6c:	0bc000ef          	jal	ra,80005f28 <API_Try2Send>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:230
    vTaskExitCritical();
80005e70:	e65fc0ef          	jal	ra,80002cd4 <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:231
    return;
80005e74:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:232
}
80005e78:	01c12083          	lw	ra,28(sp)
80005e7c:	01812403          	lw	s0,24(sp)
80005e80:	02010113          	addi	sp,sp,32
80005e84:	00008067          	ret

80005e88 <API_PopSendQueue>:
API_PopSendQueue():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:236

////////////////////////////////////////////////////////////
// Pushes one slot to the sending queue
unsigned int API_PopSendQueue(){
80005e88:	fe010113          	addi	sp,sp,-32
80005e8c:	00112e23          	sw	ra,28(sp)
80005e90:	00812c23          	sw	s0,24(sp)
80005e94:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:238
    unsigned int element;
    vTaskEnterCritical();
80005e98:	e01fc0ef          	jal	ra,80002c98 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:239
    if (SendingQueue_front == SendingQueue_tail){
80005e9c:	800217b7          	lui	a5,0x80021
80005ea0:	37c7a703          	lw	a4,892(a5) # 8002137c <__stack_top+0xfffdeb7c>
80005ea4:	800217b7          	lui	a5,0x80021
80005ea8:	3647a783          	lw	a5,868(a5) # 80021364 <__stack_top+0xfffdeb64>
80005eac:	00f71863          	bne	a4,a5,80005ebc <API_PopSendQueue+0x34>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:240
        vTaskExitCritical();
80005eb0:	e25fc0ef          	jal	ra,80002cd4 <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:241
        return EMPTY;
80005eb4:	303007b7          	lui	a5,0x30300
80005eb8:	05c0006f          	j	80005f14 <API_PopSendQueue+0x8c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:243
    } else {
        element = SendingQueue[SendingQueue_tail];
80005ebc:	800217b7          	lui	a5,0x80021
80005ec0:	3647a703          	lw	a4,868(a5) # 80021364 <__stack_top+0xfffdeb64>
80005ec4:	800217b7          	lui	a5,0x80021
80005ec8:	00271713          	slli	a4,a4,0x2
80005ecc:	34478793          	addi	a5,a5,836 # 80021344 <__stack_top+0xfffdeb44>
80005ed0:	00f707b3          	add	a5,a4,a5
80005ed4:	0007a783          	lw	a5,0(a5)
80005ed8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:244
        if (SendingQueue_tail == (PIPE_SIZE*2)-1){
80005edc:	800217b7          	lui	a5,0x80021
80005ee0:	3647a703          	lw	a4,868(a5) # 80021364 <__stack_top+0xfffdeb64>
80005ee4:	00700793          	li	a5,7
80005ee8:	00f71863          	bne	a4,a5,80005ef8 <API_PopSendQueue+0x70>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:245
            SendingQueue_tail = 0;
80005eec:	800217b7          	lui	a5,0x80021
80005ef0:	3607a223          	sw	zero,868(a5) # 80021364 <__stack_top+0xfffdeb64>
80005ef4:	0180006f          	j	80005f0c <API_PopSendQueue+0x84>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:247
        } else {
            SendingQueue_tail++;
80005ef8:	800217b7          	lui	a5,0x80021
80005efc:	3647a783          	lw	a5,868(a5) # 80021364 <__stack_top+0xfffdeb64>
80005f00:	00178713          	addi	a4,a5,1
80005f04:	800217b7          	lui	a5,0x80021
80005f08:	36e7a223          	sw	a4,868(a5) # 80021364 <__stack_top+0xfffdeb64>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:249
        }
        vTaskExitCritical();
80005f0c:	dc9fc0ef          	jal	ra,80002cd4 <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:250
        return element;
80005f10:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:252
    }
}
80005f14:	00078513          	mv	a0,a5
80005f18:	01c12083          	lw	ra,28(sp)
80005f1c:	01812403          	lw	s0,24(sp)
80005f20:	02010113          	addi	sp,sp,32
80005f24:	00008067          	ret

80005f28 <API_Try2Send>:
API_Try2Send():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:256

////////////////////////////////////////////////////////////
// Try to send some packet! 
void API_Try2Send(){
80005f28:	fe010113          	addi	sp,sp,-32
80005f2c:	00112e23          	sw	ra,28(sp)
80005f30:	00812c23          	sw	s0,24(sp)
80005f34:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:260
    unsigned int toSend;
    // Try to send the packet to NI if it's available
    // Checks if the NI is available to transmitt something
    if (HW_get_32bit_reg(NI_TX) == NI_STATUS_OFF){
80005f38:	500007b7          	lui	a5,0x50000
80005f3c:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80005f40:	85cfb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005f44:	00050713          	mv	a4,a0
80005f48:	0ff00793          	li	a5,255
80005f4c:	0ef71a63          	bne	a4,a5,80006040 <API_Try2Send+0x118>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:261
        vTaskEnterCritical();
80005f50:	d49fc0ef          	jal	ra,80002c98 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:262
        toSend = API_PopSendQueue();
80005f54:	f35ff0ef          	jal	ra,80005e88 <API_PopSendQueue>
80005f58:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:263
        if (toSend != EMPTY){
80005f5c:	fec42703          	lw	a4,-20(s0)
80005f60:	303007b7          	lui	a5,0x30300
80005f64:	0af70c63          	beq	a4,a5,8000601c <API_Try2Send+0xf4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:264
            SendingSlot = toSend;
80005f68:	800217b7          	lui	a5,0x80021
80005f6c:	fec42703          	lw	a4,-20(s0)
80005f70:	20e7ac23          	sw	a4,536(a5) # 80021218 <__stack_top+0xfffdea18>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:265
            if((toSend & 0xFFFF0000) ==  SERVICE){
80005f74:	fec42703          	lw	a4,-20(s0)
80005f78:	ffff07b7          	lui	a5,0xffff0
80005f7c:	00f77733          	and	a4,a4,a5
80005f80:	101007b7          	lui	a5,0x10100
80005f84:	04f71063          	bne	a4,a5,80005fc4 <API_Try2Send+0x9c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:266
                SendRaw((unsigned int)&ServicePipe[toSend & 0x0000FFFF].header);
80005f88:	fec42703          	lw	a4,-20(s0)
80005f8c:	000107b7          	lui	a5,0x10
80005f90:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80005f94:	00f77733          	and	a4,a4,a5
80005f98:	00070793          	mv	a5,a4
80005f9c:	00479793          	slli	a5,a5,0x4
80005fa0:	40e787b3          	sub	a5,a5,a4
80005fa4:	00279793          	slli	a5,a5,0x2
80005fa8:	80021737          	lui	a4,0x80021
80005fac:	21c70713          	addi	a4,a4,540 # 8002121c <__stack_top+0xfffdea1c>
80005fb0:	00e787b3          	add	a5,a5,a4
80005fb4:	00878793          	addi	a5,a5,8
80005fb8:	00078513          	mv	a0,a5
80005fbc:	ac5ff0ef          	jal	ra,80005a80 <SendRaw>
80005fc0:	0480006f          	j	80006008 <API_Try2Send+0xe0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:268
            }
            else if((toSend & 0xFFFF0000) ==  MESSAGE){
80005fc4:	fec42703          	lw	a4,-20(s0)
80005fc8:	ffff07b7          	lui	a5,0xffff0
80005fcc:	00f77733          	and	a4,a4,a5
80005fd0:	202007b7          	lui	a5,0x20200
80005fd4:	02f71a63          	bne	a4,a5,80006008 <API_Try2Send+0xe0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:269
                SendRaw((unsigned int)&MessagePipe[toSend & 0x0000FFFF].header);
80005fd8:	fec42703          	lw	a4,-20(s0)
80005fdc:	000107b7          	lui	a5,0x10
80005fe0:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80005fe4:	00f77733          	and	a4,a4,a5
80005fe8:	24400793          	li	a5,580
80005fec:	02f70733          	mul	a4,a4,a5
80005ff0:	800217b7          	lui	a5,0x80021
80005ff4:	38078793          	addi	a5,a5,896 # 80021380 <__stack_top+0xfffdeb80>
80005ff8:	00f707b3          	add	a5,a4,a5
80005ffc:	00c78793          	addi	a5,a5,12
80006000:	00078513          	mv	a0,a5
80006004:	a7dff0ef          	jal	ra,80005a80 <SendRaw>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:271
            }
            prints("API_Try2Send success!\n");
80006008:	800087b7          	lui	a5,0x80008
8000600c:	b9078513          	addi	a0,a5,-1136 # 80007b90 <__stack_top+0xfffc5390>
80006010:	8c9ff0ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:272
        vTaskExitCritical();
80006014:	cc1fc0ef          	jal	ra,80002cd4 <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:280
            prints("API_Try2Send failed - empty SendQueue!\n");
        }
    } else {
        prints("API_Try2Send failed - NI_TX occupied!\n");
    }
    return;
80006018:	0380006f          	j	80006050 <API_Try2Send+0x128>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:274
            HW_set_32bit_reg(NI_TX, RESET);
8000601c:	000097b7          	lui	a5,0x9
80006020:	88878593          	addi	a1,a5,-1912 # 8888 <HEAP_SIZE-0x7778>
80006024:	500007b7          	lui	a5,0x50000
80006028:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
8000602c:	f69fa0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:275
            prints("API_Try2Send failed - empty SendQueue!\n");
80006030:	800087b7          	lui	a5,0x80008
80006034:	ba878513          	addi	a0,a5,-1112 # 80007ba8 <__stack_top+0xfffc53a8>
80006038:	8a1ff0ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:280
    return;
8000603c:	0140006f          	j	80006050 <API_Try2Send+0x128>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:278
        prints("API_Try2Send failed - NI_TX occupied!\n");
80006040:	800087b7          	lui	a5,0x80008
80006044:	bd078513          	addi	a0,a5,-1072 # 80007bd0 <__stack_top+0xfffc53d0>
80006048:	891ff0ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:280
    return;
8000604c:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:281
}
80006050:	01c12083          	lw	ra,28(sp)
80006054:	01812403          	lw	s0,24(sp)
80006058:	02010113          	addi	sp,sp,32
8000605c:	00008067          	ret

80006060 <API_AckTaskAllocation>:
API_AckTaskAllocation():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:283

void API_AckTaskAllocation(unsigned int task_id, unsigned int app_id){
80006060:	fd010113          	addi	sp,sp,-48
80006064:	02112623          	sw	ra,44(sp)
80006068:	02812423          	sw	s0,40(sp)
8000606c:	03010413          	addi	s0,sp,48
80006070:	fca42e23          	sw	a0,-36(s0)
80006074:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:286
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80006078:	e39fe0ef          	jal	ra,80004eb0 <API_GetServiceSlot>
8000607c:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:287
        if(mySlot == PIPE_FULL){
80006080:	fec42703          	lw	a4,-20(s0)
80006084:	fdfe07b7          	lui	a5,0xfdfe0
80006088:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9d5fd>
8000608c:	00f71463          	bne	a4,a5,80006094 <API_AckTaskAllocation+0x34>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:289
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80006090:	269000ef          	jal	ra,80006af8 <API_NI_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:291
        }
    }while(mySlot == PIPE_FULL);
80006094:	fec42703          	lw	a4,-20(s0)
80006098:	fdfe07b7          	lui	a5,0xfdfe0
8000609c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9d5fd>
800060a0:	fcf70ce3          	beq	a4,a5,80006078 <API_AckTaskAllocation+0x18>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:293

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
800060a4:	800217b7          	lui	a5,0x80021
800060a8:	fec42703          	lw	a4,-20(s0)
800060ac:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
800060b0:	00070793          	mv	a5,a4
800060b4:	00479793          	slli	a5,a5,0x4
800060b8:	40e787b3          	sub	a5,a5,a4
800060bc:	00279793          	slli	a5,a5,0x2
800060c0:	00f687b3          	add	a5,a3,a5
800060c4:	feff0737          	lui	a4,0xfeff0
800060c8:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efad6fe>
800060cc:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:295

    ServicePipe[mySlot].header.header           = makeAddress(0, 0);
800060d0:	00000593          	li	a1,0
800060d4:	00000513          	li	a0,0
800060d8:	cc9ff0ef          	jal	ra,80005da0 <makeAddress>
800060dc:	00050613          	mv	a2,a0
800060e0:	800217b7          	lui	a5,0x80021
800060e4:	fec42703          	lw	a4,-20(s0)
800060e8:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
800060ec:	00070793          	mv	a5,a4
800060f0:	00479793          	slli	a5,a5,0x4
800060f4:	40e787b3          	sub	a5,a5,a4
800060f8:	00279793          	slli	a5,a5,0x2
800060fc:	00f687b3          	add	a5,a3,a5
80006100:	00c7a423          	sw	a2,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:296
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80006104:	800217b7          	lui	a5,0x80021
80006108:	fec42703          	lw	a4,-20(s0)
8000610c:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
80006110:	00070793          	mv	a5,a4
80006114:	00479793          	slli	a5,a5,0x4
80006118:	40e787b3          	sub	a5,a5,a4
8000611c:	00279793          	slli	a5,a5,0x2
80006120:	00f687b3          	add	a5,a3,a5
80006124:	00b00713          	li	a4,11
80006128:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:297
    ServicePipe[mySlot].header.service          = TASK_ALLOCATION_SUCCESS;
8000612c:	800217b7          	lui	a5,0x80021
80006130:	fec42703          	lw	a4,-20(s0)
80006134:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
80006138:	00070793          	mv	a5,a4
8000613c:	00479793          	slli	a5,a5,0x4
80006140:	40e787b3          	sub	a5,a5,a4
80006144:	00279793          	slli	a5,a5,0x2
80006148:	00f687b3          	add	a5,a3,a5
8000614c:	03500713          	li	a4,53
80006150:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:298
    ServicePipe[mySlot].header.task_id          = task_id;
80006154:	800217b7          	lui	a5,0x80021
80006158:	fec42703          	lw	a4,-20(s0)
8000615c:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
80006160:	00070793          	mv	a5,a4
80006164:	00479793          	slli	a5,a5,0x4
80006168:	40e787b3          	sub	a5,a5,a4
8000616c:	00279793          	slli	a5,a5,0x2
80006170:	00f687b3          	add	a5,a3,a5
80006174:	fdc42703          	lw	a4,-36(s0)
80006178:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:299
    ServicePipe[mySlot].header.task_app_id      = app_id;
8000617c:	800217b7          	lui	a5,0x80021
80006180:	fec42703          	lw	a4,-20(s0)
80006184:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
80006188:	00070793          	mv	a5,a4
8000618c:	00479793          	slli	a5,a5,0x4
80006190:	40e787b3          	sub	a5,a5,a4
80006194:	00279793          	slli	a5,a5,0x2
80006198:	00f687b3          	add	a5,a3,a5
8000619c:	fd842703          	lw	a4,-40(s0)
800061a0:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:301

    API_PushSendQueue(SERVICE, mySlot);
800061a4:	fec42583          	lw	a1,-20(s0)
800061a8:	10100537          	lui	a0,0x10100
800061ac:	c35ff0ef          	jal	ra,80005de0 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:302
    return;    
800061b0:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:303
}
800061b4:	02c12083          	lw	ra,44(sp)
800061b8:	02812403          	lw	s0,40(sp)
800061bc:	03010113          	addi	sp,sp,48
800061c0:	00008067          	ret

800061c4 <API_SendMessage>:
API_SendMessage():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:305

void API_SendMessage(unsigned int addr, unsigned int taskID){
800061c4:	fd010113          	addi	sp,sp,-48
800061c8:	02112623          	sw	ra,44(sp)
800061cc:	02812423          	sw	s0,40(sp)
800061d0:	03010413          	addi	s0,sp,48
800061d4:	fca42e23          	sw	a0,-36(s0)
800061d8:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:311
    unsigned int mySlot;
    unsigned int taskSlot;
    unsigned int i;
    Message *theMessage;
    do{
        mySlot = API_GetMessageSlot();
800061dc:	b79fe0ef          	jal	ra,80004d54 <API_GetMessageSlot>
800061e0:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:312
        if(mySlot == PIPE_FULL){
800061e4:	fe842703          	lw	a4,-24(s0)
800061e8:	fdfe07b7          	lui	a5,0xfdfe0
800061ec:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9d5fd>
800061f0:	00f71463          	bne	a4,a5,800061f8 <API_SendMessage+0x34>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:314
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
800061f4:	105000ef          	jal	ra,80006af8 <API_NI_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:316
        }
    }while(mySlot == PIPE_FULL);
800061f8:	fe842703          	lw	a4,-24(s0)
800061fc:	fdfe07b7          	lui	a5,0xfdfe0
80006200:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9d5fd>
80006204:	fcf70ce3          	beq	a4,a5,800061dc <API_SendMessage+0x18>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:318
    
    theMessage = addr;
80006208:	fdc42783          	lw	a5,-36(s0)
8000620c:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:320

    taskSlot = API_GetCurrentTaskSlot();
80006210:	9f4fe0ef          	jal	ra,80004404 <API_GetCurrentTaskSlot>
80006214:	fea42023          	sw	a0,-32(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:321
    printsv("taskSlot: ", taskSlot);
80006218:	fe042783          	lw	a5,-32(s0)
8000621c:	00078593          	mv	a1,a5
80006220:	800087b7          	lui	a5,0x80008
80006224:	bf878513          	addi	a0,a5,-1032 # 80007bf8 <__stack_top+0xfffc53f8>
80006228:	f5cff0ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:322
    printsvsv("Adding a msg to task ", taskID, " in the PIPE slot ", mySlot);
8000622c:	fd842703          	lw	a4,-40(s0)
80006230:	fe842783          	lw	a5,-24(s0)
80006234:	00078693          	mv	a3,a5
80006238:	800087b7          	lui	a5,0x80008
8000623c:	c0478613          	addi	a2,a5,-1020 # 80007c04 <__stack_top+0xfffc5404>
80006240:	00070593          	mv	a1,a4
80006244:	800087b7          	lui	a5,0x80008
80006248:	c1878513          	addi	a0,a5,-1000 # 80007c18 <__stack_top+0xfffc5418>
8000624c:	f80ff0ef          	jal	ra,800059cc <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:323
    printsv("from app: ", TaskList[taskSlot].AppID);
80006250:	800227b7          	lui	a5,0x80022
80006254:	fe042703          	lw	a4,-32(s0)
80006258:	4d078693          	addi	a3,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
8000625c:	00070793          	mv	a5,a4
80006260:	00579793          	slli	a5,a5,0x5
80006264:	00e787b3          	add	a5,a5,a4
80006268:	00279793          	slli	a5,a5,0x2
8000626c:	00f687b3          	add	a5,a3,a5
80006270:	0147a783          	lw	a5,20(a5)
80006274:	00078593          	mv	a1,a5
80006278:	800087b7          	lui	a5,0x80008
8000627c:	c3078513          	addi	a0,a5,-976 # 80007c30 <__stack_top+0xfffc5430>
80006280:	f04ff0ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:324
    MessagePipe[mySlot].holder = taskSlot;
80006284:	800217b7          	lui	a5,0x80021
80006288:	fe842683          	lw	a3,-24(s0)
8000628c:	38078713          	addi	a4,a5,896 # 80021380 <__stack_top+0xfffdeb80>
80006290:	24400793          	li	a5,580
80006294:	02f687b3          	mul	a5,a3,a5
80006298:	00f707b3          	add	a5,a4,a5
8000629c:	fe042703          	lw	a4,-32(s0)
800062a0:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:326

    MessagePipe[mySlot].header.header           = TaskList[taskSlot].TasksMap[taskID];
800062a4:	800226b7          	lui	a3,0x80022
800062a8:	fe042703          	lw	a4,-32(s0)
800062ac:	00070793          	mv	a5,a4
800062b0:	00579793          	slli	a5,a5,0x5
800062b4:	00e787b3          	add	a5,a5,a4
800062b8:	fd842703          	lw	a4,-40(s0)
800062bc:	00e787b3          	add	a5,a5,a4
800062c0:	01478793          	addi	a5,a5,20
800062c4:	4d068713          	addi	a4,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
800062c8:	00279793          	slli	a5,a5,0x2
800062cc:	00f707b3          	add	a5,a4,a5
800062d0:	00c7a703          	lw	a4,12(a5)
800062d4:	800217b7          	lui	a5,0x80021
800062d8:	fe842603          	lw	a2,-24(s0)
800062dc:	38078693          	addi	a3,a5,896 # 80021380 <__stack_top+0xfffdeb80>
800062e0:	24400793          	li	a5,580
800062e4:	02f607b3          	mul	a5,a2,a5
800062e8:	00f687b3          	add	a5,a3,a5
800062ec:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:327
    MessagePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE + theMessage->length + 1;
800062f0:	fe442783          	lw	a5,-28(s0)
800062f4:	0007a783          	lw	a5,0(a5)
800062f8:	00c78713          	addi	a4,a5,12
800062fc:	800217b7          	lui	a5,0x80021
80006300:	fe842603          	lw	a2,-24(s0)
80006304:	38078693          	addi	a3,a5,896 # 80021380 <__stack_top+0xfffdeb80>
80006308:	24400793          	li	a5,580
8000630c:	02f607b3          	mul	a5,a2,a5
80006310:	00f687b3          	add	a5,a3,a5
80006314:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:328
    MessagePipe[mySlot].header.service          = MESSAGE_DELIVERY;
80006318:	800217b7          	lui	a5,0x80021
8000631c:	fe842683          	lw	a3,-24(s0)
80006320:	38078713          	addi	a4,a5,896 # 80021380 <__stack_top+0xfffdeb80>
80006324:	24400793          	li	a5,580
80006328:	02f687b3          	mul	a5,a3,a5
8000632c:	00f707b3          	add	a5,a4,a5
80006330:	02000713          	li	a4,32
80006334:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:329
    MessagePipe[mySlot].header.application_id   = TaskList[taskSlot].AppID;
80006338:	800227b7          	lui	a5,0x80022
8000633c:	fe042703          	lw	a4,-32(s0)
80006340:	4d078693          	addi	a3,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80006344:	00070793          	mv	a5,a4
80006348:	00579793          	slli	a5,a5,0x5
8000634c:	00e787b3          	add	a5,a5,a4
80006350:	00279793          	slli	a5,a5,0x2
80006354:	00f687b3          	add	a5,a3,a5
80006358:	0147a703          	lw	a4,20(a5)
8000635c:	800217b7          	lui	a5,0x80021
80006360:	fe842603          	lw	a2,-24(s0)
80006364:	38078693          	addi	a3,a5,896 # 80021380 <__stack_top+0xfffdeb80>
80006368:	24400793          	li	a5,580
8000636c:	02f607b3          	mul	a5,a2,a5
80006370:	00f687b3          	add	a5,a3,a5
80006374:	00e7ac23          	sw	a4,24(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:330
    MessagePipe[mySlot].header.producer_task    = TaskList[taskSlot].TaskID;
80006378:	800226b7          	lui	a3,0x80022
8000637c:	fe042703          	lw	a4,-32(s0)
80006380:	00070793          	mv	a5,a4
80006384:	00579793          	slli	a5,a5,0x5
80006388:	00e787b3          	add	a5,a5,a4
8000638c:	00279793          	slli	a5,a5,0x2
80006390:	4d068713          	addi	a4,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80006394:	00e787b3          	add	a5,a5,a4
80006398:	0107a703          	lw	a4,16(a5)
8000639c:	800217b7          	lui	a5,0x80021
800063a0:	fe842603          	lw	a2,-24(s0)
800063a4:	38078693          	addi	a3,a5,896 # 80021380 <__stack_top+0xfffdeb80>
800063a8:	24400793          	li	a5,580
800063ac:	02f607b3          	mul	a5,a2,a5
800063b0:	00f687b3          	add	a5,a3,a5
800063b4:	00e7ae23          	sw	a4,28(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:331
    MessagePipe[mySlot].header.destination_task = taskID;
800063b8:	800217b7          	lui	a5,0x80021
800063bc:	fe842683          	lw	a3,-24(s0)
800063c0:	38078713          	addi	a4,a5,896 # 80021380 <__stack_top+0xfffdeb80>
800063c4:	24400793          	li	a5,580
800063c8:	02f687b3          	mul	a5,a3,a5
800063cc:	00f707b3          	add	a5,a4,a5
800063d0:	fd842703          	lw	a4,-40(s0)
800063d4:	02e7a023          	sw	a4,32(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:332
    MessagePipe[mySlot].msg.length              = theMessage->length;
800063d8:	fe442783          	lw	a5,-28(s0)
800063dc:	0007a703          	lw	a4,0(a5)
800063e0:	800217b7          	lui	a5,0x80021
800063e4:	fe842603          	lw	a2,-24(s0)
800063e8:	24400693          	li	a3,580
800063ec:	02d606b3          	mul	a3,a2,a3
800063f0:	38078793          	addi	a5,a5,896 # 80021380 <__stack_top+0xfffdeb80>
800063f4:	00f687b3          	add	a5,a3,a5
800063f8:	04e7a023          	sw	a4,64(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:333
    for (i = 0; i < theMessage->length; i++){
800063fc:	fe042623          	sw	zero,-20(s0)
80006400:	05c0006f          	j	8000645c <API_SendMessage+0x298>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:334 (discriminator 3)
        MessagePipe[mySlot].msg.msg[i]          = theMessage->msg[i];
80006404:	fe442703          	lw	a4,-28(s0)
80006408:	fec42783          	lw	a5,-20(s0)
8000640c:	00279793          	slli	a5,a5,0x2
80006410:	00f707b3          	add	a5,a4,a5
80006414:	0047a683          	lw	a3,4(a5)
80006418:	80021637          	lui	a2,0x80021
8000641c:	fe842703          	lw	a4,-24(s0)
80006420:	00070793          	mv	a5,a4
80006424:	00379793          	slli	a5,a5,0x3
80006428:	00e787b3          	add	a5,a5,a4
8000642c:	00479793          	slli	a5,a5,0x4
80006430:	00e787b3          	add	a5,a5,a4
80006434:	fec42703          	lw	a4,-20(s0)
80006438:	00e787b3          	add	a5,a5,a4
8000643c:	01078793          	addi	a5,a5,16
80006440:	38060713          	addi	a4,a2,896 # 80021380 <__stack_top+0xfffdeb80>
80006444:	00279793          	slli	a5,a5,0x2
80006448:	00f707b3          	add	a5,a4,a5
8000644c:	00d7a223          	sw	a3,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:333 (discriminator 3)
    for (i = 0; i < theMessage->length; i++){
80006450:	fec42783          	lw	a5,-20(s0)
80006454:	00178793          	addi	a5,a5,1
80006458:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:333 (discriminator 1)
8000645c:	fe442783          	lw	a5,-28(s0)
80006460:	0007a783          	lw	a5,0(a5)
80006464:	fec42703          	lw	a4,-20(s0)
80006468:	f8f76ee3          	bltu	a4,a5,80006404 <API_SendMessage+0x240>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:337
    }
    
    if (TaskList[taskSlot].PendingReq[taskID] == TRUE){
8000646c:	800226b7          	lui	a3,0x80022
80006470:	fe042703          	lw	a4,-32(s0)
80006474:	00070793          	mv	a5,a4
80006478:	00579793          	slli	a5,a5,0x5
8000647c:	00e787b3          	add	a5,a5,a4
80006480:	fd842703          	lw	a4,-40(s0)
80006484:	00e787b3          	add	a5,a5,a4
80006488:	00c78793          	addi	a5,a5,12
8000648c:	00279713          	slli	a4,a5,0x2
80006490:	4d068793          	addi	a5,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80006494:	00f707b3          	add	a5,a4,a5
80006498:	0007a703          	lw	a4,0(a5)
8000649c:	00100793          	li	a5,1
800064a0:	04f71863          	bne	a4,a5,800064f0 <API_SendMessage+0x32c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:338
        prints(">>>>>Achei aqui no pending!\n");
800064a4:	800087b7          	lui	a5,0x80008
800064a8:	c3c78513          	addi	a0,a5,-964 # 80007c3c <__stack_top+0xfffc543c>
800064ac:	c2cff0ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:339
        API_PushSendQueue(MESSAGE, mySlot);
800064b0:	fe842583          	lw	a1,-24(s0)
800064b4:	20200537          	lui	a0,0x20200
800064b8:	929ff0ef          	jal	ra,80005de0 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:340
        TaskList[taskSlot].PendingReq[taskID] = FALSE;
800064bc:	800226b7          	lui	a3,0x80022
800064c0:	fe042703          	lw	a4,-32(s0)
800064c4:	00070793          	mv	a5,a4
800064c8:	00579793          	slli	a5,a5,0x5
800064cc:	00e787b3          	add	a5,a5,a4
800064d0:	fd842703          	lw	a4,-40(s0)
800064d4:	00e787b3          	add	a5,a5,a4
800064d8:	00c78793          	addi	a5,a5,12
800064dc:	00279713          	slli	a4,a5,0x2
800064e0:	4d068793          	addi	a5,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
800064e4:	00f707b3          	add	a5,a4,a5
800064e8:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:342
    }
    return;
800064ec:	00000013          	nop
800064f0:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:343
}
800064f4:	02c12083          	lw	ra,44(sp)
800064f8:	02812403          	lw	s0,40(sp)
800064fc:	03010113          	addi	sp,sp,48
80006500:	00008067          	ret

80006504 <API_SendFinishTask>:
API_SendFinishTask():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:345

void API_SendFinishTask(unsigned int task_id, unsigned int app_id){
80006504:	fd010113          	addi	sp,sp,-48
80006508:	02112623          	sw	ra,44(sp)
8000650c:	02812423          	sw	s0,40(sp)
80006510:	03010413          	addi	s0,sp,48
80006514:	fca42e23          	sw	a0,-36(s0)
80006518:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:348
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
8000651c:	995fe0ef          	jal	ra,80004eb0 <API_GetServiceSlot>
80006520:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:349
        if(mySlot == PIPE_FULL){
80006524:	fec42703          	lw	a4,-20(s0)
80006528:	fdfe07b7          	lui	a5,0xfdfe0
8000652c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9d5fd>
80006530:	00f71463          	bne	a4,a5,80006538 <API_SendFinishTask+0x34>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:351
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80006534:	5c4000ef          	jal	ra,80006af8 <API_NI_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:353
        }
    }while(mySlot == PIPE_FULL);
80006538:	fec42703          	lw	a4,-20(s0)
8000653c:	fdfe07b7          	lui	a5,0xfdfe0
80006540:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9d5fd>
80006544:	fcf70ce3          	beq	a4,a5,8000651c <API_SendFinishTask+0x18>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:355

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80006548:	800217b7          	lui	a5,0x80021
8000654c:	fec42703          	lw	a4,-20(s0)
80006550:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
80006554:	00070793          	mv	a5,a4
80006558:	00479793          	slli	a5,a5,0x4
8000655c:	40e787b3          	sub	a5,a5,a4
80006560:	00279793          	slli	a5,a5,0x2
80006564:	00f687b3          	add	a5,a3,a5
80006568:	feff0737          	lui	a4,0xfeff0
8000656c:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efad6fe>
80006570:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:357

    ServicePipe[mySlot].header.header           = makeAddress(0, 0);
80006574:	00000593          	li	a1,0
80006578:	00000513          	li	a0,0
8000657c:	825ff0ef          	jal	ra,80005da0 <makeAddress>
80006580:	00050613          	mv	a2,a0
80006584:	800217b7          	lui	a5,0x80021
80006588:	fec42703          	lw	a4,-20(s0)
8000658c:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
80006590:	00070793          	mv	a5,a4
80006594:	00479793          	slli	a5,a5,0x4
80006598:	40e787b3          	sub	a5,a5,a4
8000659c:	00279793          	slli	a5,a5,0x2
800065a0:	00f687b3          	add	a5,a3,a5
800065a4:	00c7a423          	sw	a2,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:358
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
800065a8:	800217b7          	lui	a5,0x80021
800065ac:	fec42703          	lw	a4,-20(s0)
800065b0:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
800065b4:	00070793          	mv	a5,a4
800065b8:	00479793          	slli	a5,a5,0x4
800065bc:	40e787b3          	sub	a5,a5,a4
800065c0:	00279793          	slli	a5,a5,0x2
800065c4:	00f687b3          	add	a5,a3,a5
800065c8:	00b00713          	li	a4,11
800065cc:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:359
    ServicePipe[mySlot].header.service          = TASK_FINISH;
800065d0:	800217b7          	lui	a5,0x80021
800065d4:	fec42703          	lw	a4,-20(s0)
800065d8:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
800065dc:	00070793          	mv	a5,a4
800065e0:	00479793          	slli	a5,a5,0x4
800065e4:	40e787b3          	sub	a5,a5,a4
800065e8:	00279793          	slli	a5,a5,0x2
800065ec:	00f687b3          	add	a5,a3,a5
800065f0:	50000713          	li	a4,1280
800065f4:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:360
    ServicePipe[mySlot].header.task_id          = task_id;
800065f8:	800217b7          	lui	a5,0x80021
800065fc:	fec42703          	lw	a4,-20(s0)
80006600:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
80006604:	00070793          	mv	a5,a4
80006608:	00479793          	slli	a5,a5,0x4
8000660c:	40e787b3          	sub	a5,a5,a4
80006610:	00279793          	slli	a5,a5,0x2
80006614:	00f687b3          	add	a5,a3,a5
80006618:	fdc42703          	lw	a4,-36(s0)
8000661c:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:361
    ServicePipe[mySlot].header.task_app_id      = app_id;
80006620:	800217b7          	lui	a5,0x80021
80006624:	fec42703          	lw	a4,-20(s0)
80006628:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
8000662c:	00070793          	mv	a5,a4
80006630:	00479793          	slli	a5,a5,0x4
80006634:	40e787b3          	sub	a5,a5,a4
80006638:	00279793          	slli	a5,a5,0x2
8000663c:	00f687b3          	add	a5,a3,a5
80006640:	fd842703          	lw	a4,-40(s0)
80006644:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:362
    ServicePipe[mySlot].header.task_dest_addr   = ProcessorAddr;
80006648:	800227b7          	lui	a5,0x80022
8000664c:	7f47a683          	lw	a3,2036(a5) # 800227f4 <__stack_top+0xfffdfff4>
80006650:	800217b7          	lui	a5,0x80021
80006654:	fec42703          	lw	a4,-20(s0)
80006658:	21c78613          	addi	a2,a5,540 # 8002121c <__stack_top+0xfffdea1c>
8000665c:	00070793          	mv	a5,a4
80006660:	00479793          	slli	a5,a5,0x4
80006664:	40e787b3          	sub	a5,a5,a4
80006668:	00279793          	slli	a5,a5,0x2
8000666c:	00f607b3          	add	a5,a2,a5
80006670:	02d7ac23          	sw	a3,56(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:363
    API_PushSendQueue(SERVICE, mySlot);
80006674:	fec42583          	lw	a1,-20(s0)
80006678:	10100537          	lui	a0,0x10100
8000667c:	f64ff0ef          	jal	ra,80005de0 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:364
    return;    
80006680:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:365
}
80006684:	02c12083          	lw	ra,44(sp)
80006688:	02812403          	lw	s0,40(sp)
8000668c:	03010113          	addi	sp,sp,48
80006690:	00008067          	ret

80006694 <API_SendMessageReq>:
API_SendMessageReq():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:367

void API_SendMessageReq(unsigned int addr, unsigned int taskID){
80006694:	fd010113          	addi	sp,sp,-48
80006698:	02112623          	sw	ra,44(sp)
8000669c:	02812423          	sw	s0,40(sp)
800066a0:	03010413          	addi	s0,sp,48
800066a4:	fca42e23          	sw	a0,-36(s0)
800066a8:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:372
    unsigned int taskSlot;
    unsigned int mySlot;

    // Update task info
    taskSlot = API_GetCurrentTaskSlot();
800066ac:	d59fd0ef          	jal	ra,80004404 <API_GetCurrentTaskSlot>
800066b0:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:373
    TaskList[taskSlot].waitingMsg = TRUE;
800066b4:	800227b7          	lui	a5,0x80022
800066b8:	fec42703          	lw	a4,-20(s0)
800066bc:	4d078693          	addi	a3,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
800066c0:	00070793          	mv	a5,a4
800066c4:	00579793          	slli	a5,a5,0x5
800066c8:	00e787b3          	add	a5,a5,a4
800066cc:	00279793          	slli	a5,a5,0x2
800066d0:	00f687b3          	add	a5,a3,a5
800066d4:	00100713          	li	a4,1
800066d8:	00e7ae23          	sw	a4,28(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:374
    TaskList[taskSlot].MsgToReceive = addr;
800066dc:	800226b7          	lui	a3,0x80022
800066e0:	fec42703          	lw	a4,-20(s0)
800066e4:	00070793          	mv	a5,a4
800066e8:	00579793          	slli	a5,a5,0x5
800066ec:	00e787b3          	add	a5,a5,a4
800066f0:	00279793          	slli	a5,a5,0x2
800066f4:	4d068713          	addi	a4,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
800066f8:	00e787b3          	add	a5,a5,a4
800066fc:	fdc42703          	lw	a4,-36(s0)
80006700:	02e7a023          	sw	a4,32(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:379
    //printsv("API_SendMessageReq addr: ", addr);

    // Sends the message request
    do{
        mySlot = API_GetServiceSlot();
80006704:	facfe0ef          	jal	ra,80004eb0 <API_GetServiceSlot>
80006708:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:380
        if(mySlot == PIPE_FULL){
8000670c:	fe842703          	lw	a4,-24(s0)
80006710:	fdfe07b7          	lui	a5,0xfdfe0
80006714:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9d5fd>
80006718:	00f71463          	bne	a4,a5,80006720 <API_SendMessageReq+0x8c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:382
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
8000671c:	3dc000ef          	jal	ra,80006af8 <API_NI_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:384
        }
    }while(mySlot == PIPE_FULL);
80006720:	fe842703          	lw	a4,-24(s0)
80006724:	fdfe07b7          	lui	a5,0xfdfe0
80006728:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9d5fd>
8000672c:	fcf70ce3          	beq	a4,a5,80006704 <API_SendMessageReq+0x70>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:386

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80006730:	800217b7          	lui	a5,0x80021
80006734:	fe842703          	lw	a4,-24(s0)
80006738:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
8000673c:	00070793          	mv	a5,a4
80006740:	00479793          	slli	a5,a5,0x4
80006744:	40e787b3          	sub	a5,a5,a4
80006748:	00279793          	slli	a5,a5,0x2
8000674c:	00f687b3          	add	a5,a3,a5
80006750:	feff0737          	lui	a4,0xfeff0
80006754:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efad6fe>
80006758:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:388

    ServicePipe[mySlot].header.header           = TaskList[taskSlot].TasksMap[taskID];
8000675c:	800226b7          	lui	a3,0x80022
80006760:	fec42703          	lw	a4,-20(s0)
80006764:	00070793          	mv	a5,a4
80006768:	00579793          	slli	a5,a5,0x5
8000676c:	00e787b3          	add	a5,a5,a4
80006770:	fd842703          	lw	a4,-40(s0)
80006774:	00e787b3          	add	a5,a5,a4
80006778:	01478793          	addi	a5,a5,20
8000677c:	4d068713          	addi	a4,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80006780:	00279793          	slli	a5,a5,0x2
80006784:	00f707b3          	add	a5,a4,a5
80006788:	00c7a683          	lw	a3,12(a5)
8000678c:	800217b7          	lui	a5,0x80021
80006790:	fe842703          	lw	a4,-24(s0)
80006794:	21c78613          	addi	a2,a5,540 # 8002121c <__stack_top+0xfffdea1c>
80006798:	00070793          	mv	a5,a4
8000679c:	00479793          	slli	a5,a5,0x4
800067a0:	40e787b3          	sub	a5,a5,a4
800067a4:	00279793          	slli	a5,a5,0x2
800067a8:	00f607b3          	add	a5,a2,a5
800067ac:	00d7a423          	sw	a3,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:389
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
800067b0:	800217b7          	lui	a5,0x80021
800067b4:	fe842703          	lw	a4,-24(s0)
800067b8:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
800067bc:	00070793          	mv	a5,a4
800067c0:	00479793          	slli	a5,a5,0x4
800067c4:	40e787b3          	sub	a5,a5,a4
800067c8:	00279793          	slli	a5,a5,0x2
800067cc:	00f687b3          	add	a5,a3,a5
800067d0:	00b00713          	li	a4,11
800067d4:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:390
    ServicePipe[mySlot].header.service          = MESSAGE_REQUEST;
800067d8:	800217b7          	lui	a5,0x80021
800067dc:	fe842703          	lw	a4,-24(s0)
800067e0:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
800067e4:	00070793          	mv	a5,a4
800067e8:	00479793          	slli	a5,a5,0x4
800067ec:	40e787b3          	sub	a5,a5,a4
800067f0:	00279793          	slli	a5,a5,0x2
800067f4:	00f687b3          	add	a5,a3,a5
800067f8:	01000713          	li	a4,16
800067fc:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:391
    ServicePipe[mySlot].header.task_id          = TaskList[taskSlot].TaskID;
80006800:	800226b7          	lui	a3,0x80022
80006804:	fec42703          	lw	a4,-20(s0)
80006808:	00070793          	mv	a5,a4
8000680c:	00579793          	slli	a5,a5,0x5
80006810:	00e787b3          	add	a5,a5,a4
80006814:	00279793          	slli	a5,a5,0x2
80006818:	4d068713          	addi	a4,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
8000681c:	00e787b3          	add	a5,a5,a4
80006820:	0107a683          	lw	a3,16(a5)
80006824:	800217b7          	lui	a5,0x80021
80006828:	fe842703          	lw	a4,-24(s0)
8000682c:	21c78613          	addi	a2,a5,540 # 8002121c <__stack_top+0xfffdea1c>
80006830:	00070793          	mv	a5,a4
80006834:	00479793          	slli	a5,a5,0x4
80006838:	40e787b3          	sub	a5,a5,a4
8000683c:	00279793          	slli	a5,a5,0x2
80006840:	00f607b3          	add	a5,a2,a5
80006844:	00d7aa23          	sw	a3,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:392
    ServicePipe[mySlot].header.task_app_id      = TaskList[taskSlot].AppID;
80006848:	800227b7          	lui	a5,0x80022
8000684c:	fec42703          	lw	a4,-20(s0)
80006850:	4d078693          	addi	a3,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80006854:	00070793          	mv	a5,a4
80006858:	00579793          	slli	a5,a5,0x5
8000685c:	00e787b3          	add	a5,a5,a4
80006860:	00279793          	slli	a5,a5,0x2
80006864:	00f687b3          	add	a5,a3,a5
80006868:	0147a683          	lw	a3,20(a5)
8000686c:	800217b7          	lui	a5,0x80021
80006870:	fe842703          	lw	a4,-24(s0)
80006874:	21c78613          	addi	a2,a5,540 # 8002121c <__stack_top+0xfffdea1c>
80006878:	00070793          	mv	a5,a4
8000687c:	00479793          	slli	a5,a5,0x4
80006880:	40e787b3          	sub	a5,a5,a4
80006884:	00279793          	slli	a5,a5,0x2
80006888:	00f607b3          	add	a5,a2,a5
8000688c:	02d7a223          	sw	a3,36(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:393
    ServicePipe[mySlot].header.producer_task_id = taskID;
80006890:	800217b7          	lui	a5,0x80021
80006894:	fe842703          	lw	a4,-24(s0)
80006898:	21c78693          	addi	a3,a5,540 # 8002121c <__stack_top+0xfffdea1c>
8000689c:	00070793          	mv	a5,a4
800068a0:	00479793          	slli	a5,a5,0x4
800068a4:	40e787b3          	sub	a5,a5,a4
800068a8:	00279793          	slli	a5,a5,0x2
800068ac:	00f687b3          	add	a5,a3,a5
800068b0:	fd842703          	lw	a4,-40(s0)
800068b4:	00e7ae23          	sw	a4,28(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:395

    API_PushSendQueue(SERVICE, mySlot);
800068b8:	fe842583          	lw	a1,-24(s0)
800068bc:	10100537          	lui	a0,0x10100
800068c0:	d20ff0ef          	jal	ra,80005de0 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:397

    prints("Esperando Mensagem!\n");
800068c4:	800087b7          	lui	a5,0x80008
800068c8:	c5c78513          	addi	a0,a5,-932 # 80007c5c <__stack_top+0xfffc545c>
800068cc:	80cff0ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:399
    // Bloquear a tarefa!
    while(TaskList[taskSlot].waitingMsg == TRUE){ 
800068d0:	02c0006f          	j	800068fc <API_SendMessageReq+0x268>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:400
        printsvsv("taskslot ", taskSlot, " esperando mensagem ", 0);
800068d4:	fec42703          	lw	a4,-20(s0)
800068d8:	00000693          	li	a3,0
800068dc:	800087b7          	lui	a5,0x80008
800068e0:	c7478613          	addi	a2,a5,-908 # 80007c74 <__stack_top+0xfffc5474>
800068e4:	00070593          	mv	a1,a4
800068e8:	800087b7          	lui	a5,0x80008
800068ec:	c8c78513          	addi	a0,a5,-884 # 80007c8c <__stack_top+0xfffc548c>
800068f0:	8dcff0ef          	jal	ra,800059cc <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:401
        vTaskDelay(1); 
800068f4:	00100513          	li	a0,1
800068f8:	919fb0ef          	jal	ra,80002210 <vTaskDelay>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:399
    while(TaskList[taskSlot].waitingMsg == TRUE){ 
800068fc:	800227b7          	lui	a5,0x80022
80006900:	fec42703          	lw	a4,-20(s0)
80006904:	4d078693          	addi	a3,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80006908:	00070793          	mv	a5,a4
8000690c:	00579793          	slli	a5,a5,0x5
80006910:	00e787b3          	add	a5,a5,a4
80006914:	00279793          	slli	a5,a5,0x2
80006918:	00f687b3          	add	a5,a3,a5
8000691c:	01c7a703          	lw	a4,28(a5)
80006920:	00100793          	li	a5,1
80006924:	faf708e3          	beq	a4,a5,800068d4 <API_SendMessageReq+0x240>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:403
    }
    prints("Mensagem Recebida!\n");
80006928:	800087b7          	lui	a5,0x80008
8000692c:	c9878513          	addi	a0,a5,-872 # 80007c98 <__stack_top+0xfffc5498>
80006930:	fa9fe0ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:404
    return;
80006934:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:405
}
80006938:	02c12083          	lw	ra,44(sp)
8000693c:	02812403          	lw	s0,40(sp)
80006940:	03010113          	addi	sp,sp,48
80006944:	00008067          	ret

80006948 <API_CheckMessagePipe>:
API_CheckMessagePipe():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:407

unsigned int API_CheckMessagePipe(unsigned int requester_task_id, unsigned int task_app_id){
80006948:	fd010113          	addi	sp,sp,-48
8000694c:	02812623          	sw	s0,44(sp)
80006950:	03010413          	addi	s0,sp,48
80006954:	fca42e23          	sw	a0,-36(s0)
80006958:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:409
    unsigned int i;
    unsigned int sel = ERRO;
8000695c:	fff00793          	li	a5,-1
80006960:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:410
    unsigned int smallID = 268435455;
80006964:	100007b7          	lui	a5,0x10000
80006968:	fff78793          	addi	a5,a5,-1 # fffffff <RAM_SIZE+0xff7ffff>
8000696c:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:412
    //vTaskEnterCritical();
    for (i = 0; i < PIPE_SIZE; i++){
80006970:	fe042623          	sw	zero,-20(s0)
80006974:	0c80006f          	j	80006a3c <API_CheckMessagePipe+0xf4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:414
        //printsv("testing ", i);
        if(MessagePipe[i].status == PIPE_OCCUPIED){
80006978:	800217b7          	lui	a5,0x80021
8000697c:	fec42683          	lw	a3,-20(s0)
80006980:	24400713          	li	a4,580
80006984:	02e68733          	mul	a4,a3,a4
80006988:	38078793          	addi	a5,a5,896 # 80021380 <__stack_top+0xfffdeb80>
8000698c:	00f707b3          	add	a5,a4,a5
80006990:	0007a703          	lw	a4,0(a5)
80006994:	00100793          	li	a5,1
80006998:	08f71c63          	bne	a4,a5,80006a30 <API_CheckMessagePipe+0xe8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:415
            if(MessagePipe[i].header.application_id == task_app_id){
8000699c:	800217b7          	lui	a5,0x80021
800069a0:	fec42683          	lw	a3,-20(s0)
800069a4:	38078713          	addi	a4,a5,896 # 80021380 <__stack_top+0xfffdeb80>
800069a8:	24400793          	li	a5,580
800069ac:	02f687b3          	mul	a5,a3,a5
800069b0:	00f707b3          	add	a5,a4,a5
800069b4:	0187a783          	lw	a5,24(a5)
800069b8:	fd842703          	lw	a4,-40(s0)
800069bc:	06f71a63          	bne	a4,a5,80006a30 <API_CheckMessagePipe+0xe8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:416
                if(MessagePipe[i].header.destination_task == requester_task_id){
800069c0:	800217b7          	lui	a5,0x80021
800069c4:	fec42683          	lw	a3,-20(s0)
800069c8:	38078713          	addi	a4,a5,896 # 80021380 <__stack_top+0xfffdeb80>
800069cc:	24400793          	li	a5,580
800069d0:	02f687b3          	mul	a5,a3,a5
800069d4:	00f707b3          	add	a5,a4,a5
800069d8:	0207a783          	lw	a5,32(a5)
800069dc:	fdc42703          	lw	a4,-36(s0)
800069e0:	04f71863          	bne	a4,a5,80006a30 <API_CheckMessagePipe+0xe8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:417
                    if(MessagePipe[i].msgID < smallID){
800069e4:	800217b7          	lui	a5,0x80021
800069e8:	fec42683          	lw	a3,-20(s0)
800069ec:	38078713          	addi	a4,a5,896 # 80021380 <__stack_top+0xfffdeb80>
800069f0:	24400793          	li	a5,580
800069f4:	02f687b3          	mul	a5,a3,a5
800069f8:	00f707b3          	add	a5,a4,a5
800069fc:	0087a783          	lw	a5,8(a5)
80006a00:	fe442703          	lw	a4,-28(s0)
80006a04:	02e7f663          	bleu	a4,a5,80006a30 <API_CheckMessagePipe+0xe8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:418
                        smallID = MessagePipe[i].msgID;
80006a08:	800217b7          	lui	a5,0x80021
80006a0c:	fec42683          	lw	a3,-20(s0)
80006a10:	38078713          	addi	a4,a5,896 # 80021380 <__stack_top+0xfffdeb80>
80006a14:	24400793          	li	a5,580
80006a18:	02f687b3          	mul	a5,a3,a5
80006a1c:	00f707b3          	add	a5,a4,a5
80006a20:	0087a783          	lw	a5,8(a5)
80006a24:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:419
                        sel = i;
80006a28:	fec42783          	lw	a5,-20(s0)
80006a2c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:412 (discriminator 2)
    for (i = 0; i < PIPE_SIZE; i++){
80006a30:	fec42783          	lw	a5,-20(s0)
80006a34:	00178793          	addi	a5,a5,1
80006a38:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:412 (discriminator 1)
80006a3c:	fec42703          	lw	a4,-20(s0)
80006a40:	00300793          	li	a5,3
80006a44:	f2e7fae3          	bleu	a4,a5,80006978 <API_CheckMessagePipe+0x30>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:425
                    }
                }
            }
        }
    }
    if(sel != ERRO){
80006a48:	fe842703          	lw	a4,-24(s0)
80006a4c:	fff00793          	li	a5,-1
80006a50:	02f70063          	beq	a4,a5,80006a70 <API_CheckMessagePipe+0x128>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:426
        MessagePipe[sel].status == PIPE_TRANSMITTING;
80006a54:	800217b7          	lui	a5,0x80021
80006a58:	fe842683          	lw	a3,-24(s0)
80006a5c:	24400713          	li	a4,580
80006a60:	02e68733          	mul	a4,a3,a4
80006a64:	38078793          	addi	a5,a5,896 # 80021380 <__stack_top+0xfffdeb80>
80006a68:	00f707b3          	add	a5,a4,a5
80006a6c:	0007a783          	lw	a5,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:429
    }
    //vTaskExitCritical();
    return sel;
80006a70:	fe842783          	lw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:430
}
80006a74:	00078513          	mv	a0,a5
80006a78:	02c12403          	lw	s0,44(sp)
80006a7c:	03010113          	addi	sp,sp,48
80006a80:	00008067          	ret

80006a84 <API_AddPendingReq>:
API_AddPendingReq():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:432

void API_AddPendingReq(unsigned int requester_task_id, unsigned int task_app_id, unsigned int producer_task_id){
80006a84:	fd010113          	addi	sp,sp,-48
80006a88:	02112623          	sw	ra,44(sp)
80006a8c:	02812423          	sw	s0,40(sp)
80006a90:	03010413          	addi	s0,sp,48
80006a94:	fca42e23          	sw	a0,-36(s0)
80006a98:	fcb42c23          	sw	a1,-40(s0)
80006a9c:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:433
    unsigned int slot = API_GetTaskSlot(producer_task_id, task_app_id);
80006aa0:	fd842583          	lw	a1,-40(s0)
80006aa4:	fd442503          	lw	a0,-44(s0)
80006aa8:	d75fd0ef          	jal	ra,8000481c <API_GetTaskSlot>
80006aac:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:434
    TaskList[slot].PendingReq[requester_task_id] = TRUE;
80006ab0:	800226b7          	lui	a3,0x80022
80006ab4:	fec42703          	lw	a4,-20(s0)
80006ab8:	00070793          	mv	a5,a4
80006abc:	00579793          	slli	a5,a5,0x5
80006ac0:	00e787b3          	add	a5,a5,a4
80006ac4:	fdc42703          	lw	a4,-36(s0)
80006ac8:	00e787b3          	add	a5,a5,a4
80006acc:	00c78793          	addi	a5,a5,12
80006ad0:	00279713          	slli	a4,a5,0x2
80006ad4:	4d068793          	addi	a5,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80006ad8:	00f707b3          	add	a5,a4,a5
80006adc:	00100713          	li	a4,1
80006ae0:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:435
    return;
80006ae4:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:436
}
80006ae8:	02c12083          	lw	ra,44(sp)
80006aec:	02812403          	lw	s0,40(sp)
80006af0:	03010113          	addi	sp,sp,48
80006af4:	00008067          	ret

80006af8 <API_NI_Handler>:
API_NI_Handler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:439


void API_NI_Handler(){
80006af8:	fe010113          	addi	sp,sp,-32
80006afc:	00112e23          	sw	ra,28(sp)
80006b00:	00812c23          	sw	s0,24(sp)
80006b04:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:442
    unsigned int aux;
    unsigned int service;
    unsigned int count = 0;
80006b08:	fe042423          	sw	zero,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:444
    do{
        vTaskEnterCritical();
80006b0c:	98cfc0ef          	jal	ra,80002c98 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:445
        if (HW_get_32bit_reg(NI_TX) == NI_STATUS_INTER){
80006b10:	500007b7          	lui	a5,0x50000
80006b14:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80006b18:	c84fa0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80006b1c:	00050713          	mv	a4,a0
80006b20:	000017b7          	lui	a5,0x1
80006b24:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
80006b28:	04f71263          	bne	a4,a5,80006b6c <API_NI_Handler+0x74>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:446
            prints("TX interruption catched\n"); // - ", NI_IRCount);
80006b2c:	800087b7          	lui	a5,0x80008
80006b30:	cac78513          	addi	a0,a5,-852 # 80007cac <__stack_top+0xfffc54ac>
80006b34:	da5fe0ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:447
            API_ClearPipeSlot(SendingSlot); // clear the pipe slot that was transmitted
80006b38:	800217b7          	lui	a5,0x80021
80006b3c:	2187a783          	lw	a5,536(a5) # 80021218 <__stack_top+0xfffdea18>
80006b40:	00078513          	mv	a0,a5
80006b44:	c20fe0ef          	jal	ra,80004f64 <API_ClearPipeSlot>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:448
            HW_set_32bit_reg(NI_TX, DONE);  // releases the interruption
80006b48:	800057b7          	lui	a5,0x80005
80006b4c:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffc2d55>
80006b50:	500007b7          	lui	a5,0x50000
80006b54:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80006b58:	c3cfa0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:449
            API_Try2Send();                 // tries to send another packet (if available)
80006b5c:	bccff0ef          	jal	ra,80005f28 <API_Try2Send>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:450
            count++;
80006b60:	fe842783          	lw	a5,-24(s0)
80006b64:	00178793          	addi	a5,a5,1
80006b68:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:453
        }

        if( HW_get_32bit_reg(NI_RX) == NI_STATUS_INTER || HW_get_32bit_reg(NI_RX) == NI_STATUS_WAITING) {
80006b6c:	500007b7          	lui	a5,0x50000
80006b70:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80006b74:	c28fa0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80006b78:	00050713          	mv	a4,a0
80006b7c:	000017b7          	lui	a5,0x1
80006b80:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
80006b84:	00f70e63          	beq	a4,a5,80006ba0 <API_NI_Handler+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:453 (discriminator 1)
80006b88:	500007b7          	lui	a5,0x50000
80006b8c:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80006b90:	c0cfa0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80006b94:	00050713          	mv	a4,a0
80006b98:	02200793          	li	a5,34
80006b9c:	70f71463          	bne	a4,a5,800072a4 <API_NI_Handler+0x7ac>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:454
            prints("RX interruption catched\n"); // - ", NI_IRCount);
80006ba0:	800087b7          	lui	a5,0x80008
80006ba4:	cc878513          	addi	a0,a5,-824 # 80007cc8 <__stack_top+0xfffc54c8>
80006ba8:	d31fe0ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:455
            service = incommingPacket.service;
80006bac:	800217b7          	lui	a5,0x80021
80006bb0:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006bb4:	0087a783          	lw	a5,8(a5)
80006bb8:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:456
            incommingPacket.service = SOLVED;
80006bbc:	800217b7          	lui	a5,0x80021
80006bc0:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006bc4:	00010737          	lui	a4,0x10
80006bc8:	fff70713          	addi	a4,a4,-1 # ffff <HEAP_SIZE-0x1>
80006bcc:	00e7a423          	sw	a4,8(a5)
80006bd0:	fe442703          	lw	a4,-28(s0)
80006bd4:	05500793          	li	a5,85
80006bd8:	5ef70663          	beq	a4,a5,800071c4 <API_NI_Handler+0x6cc>
80006bdc:	fe442703          	lw	a4,-28(s0)
80006be0:	05500793          	li	a5,85
80006be4:	06e7e063          	bltu	a5,a4,80006c44 <API_NI_Handler+0x14c>
80006be8:	fe442703          	lw	a4,-28(s0)
80006bec:	02100793          	li	a5,33
80006bf0:	58f70263          	beq	a4,a5,80007174 <API_NI_Handler+0x67c>
80006bf4:	fe442703          	lw	a4,-28(s0)
80006bf8:	02100793          	li	a5,33
80006bfc:	02e7e063          	bltu	a5,a4,80006c1c <API_NI_Handler+0x124>
80006c00:	fe442703          	lw	a4,-28(s0)
80006c04:	01000793          	li	a5,16
80006c08:	42f70263          	beq	a4,a5,8000702c <API_NI_Handler+0x534>
80006c0c:	fe442703          	lw	a4,-28(s0)
80006c10:	02000793          	li	a5,32
80006c14:	4ef70263          	beq	a4,a5,800070f8 <API_NI_Handler+0x600>
80006c18:	6480006f          	j	80007260 <API_NI_Handler+0x768>
80006c1c:	fe442703          	lw	a4,-28(s0)
80006c20:	03300793          	li	a5,51
80006c24:	22f70c63          	beq	a4,a5,80006e5c <API_NI_Handler+0x364>
80006c28:	fe442703          	lw	a4,-28(s0)
80006c2c:	03500793          	li	a5,53
80006c30:	26f70063          	beq	a4,a5,80006e90 <API_NI_Handler+0x398>
80006c34:	fe442703          	lw	a4,-28(s0)
80006c38:	03000793          	li	a5,48
80006c3c:	0af70463          	beq	a4,a5,80006ce4 <API_NI_Handler+0x1ec>
80006c40:	6200006f          	j	80007260 <API_NI_Handler+0x768>
80006c44:	fe442703          	lw	a4,-28(s0)
80006c48:	40000793          	li	a5,1024
80006c4c:	26f70c63          	beq	a4,a5,80006ec4 <API_NI_Handler+0x3cc>
80006c50:	fe442703          	lw	a4,-28(s0)
80006c54:	40000793          	li	a5,1024
80006c58:	02e7e063          	bltu	a5,a4,80006c78 <API_NI_Handler+0x180>
80006c5c:	fe442703          	lw	a4,-28(s0)
80006c60:	05600793          	li	a5,86
80006c64:	58f70c63          	beq	a4,a5,800071fc <API_NI_Handler+0x704>
80006c68:	fe442703          	lw	a4,-28(s0)
80006c6c:	20000793          	li	a5,512
80006c70:	02f70a63          	beq	a4,a5,80006ca4 <API_NI_Handler+0x1ac>
80006c74:	5ec0006f          	j	80007260 <API_NI_Handler+0x768>
80006c78:	fe442703          	lw	a4,-28(s0)
80006c7c:	50000793          	li	a5,1280
80006c80:	14f70463          	beq	a4,a5,80006dc8 <API_NI_Handler+0x2d0>
80006c84:	fe442703          	lw	a4,-28(s0)
80006c88:	000107b7          	lui	a5,0x10
80006c8c:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80006c90:	5ef70863          	beq	a4,a5,80007280 <API_NI_Handler+0x788>
80006c94:	fe442703          	lw	a4,-28(s0)
80006c98:	40100793          	li	a5,1025
80006c9c:	2af70463          	beq	a4,a5,80006f44 <API_NI_Handler+0x44c>
80006ca0:	5c00006f          	j	80007260 <API_NI_Handler+0x768>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:460
            switch (service){
                case REPOSITORY_APP_INFO: // When the repository informs the GM that exist a new Application available:
                    //prints("REPOSITORY_APP_INFO\n");
                    API_AddApplication(incommingPacket.application_id,
80006ca4:	800217b7          	lui	a5,0x80021
80006ca8:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006cac:	00c7a703          	lw	a4,12(a5)
80006cb0:	800217b7          	lui	a5,0x80021
80006cb4:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006cb8:	0107a583          	lw	a1,16(a5)
80006cbc:	800217b7          	lui	a5,0x80021
80006cc0:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006cc4:	0147a603          	lw	a2,20(a5)
80006cc8:	800217b7          	lui	a5,0x80021
80006ccc:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006cd0:	0187a783          	lw	a5,24(a5)
80006cd4:	00078693          	mv	a3,a5
80006cd8:	00070513          	mv	a0,a4
80006cdc:	95cfc0ef          	jal	ra,80002e38 <API_AddApplication>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:464
                                    incommingPacket.aplication_period, 
                                    incommingPacket.application_executions, 
                                    incommingPacket.application_n_tasks);
                    break;
80006ce0:	5a40006f          	j	80007284 <API_NI_Handler+0x78c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:467
                
                case TASK_ALLOCATION_SEND: // When the GM asks one Slave to allocate one task
                    prints("TASK_ALLOCATION_SEND\n");
80006ce4:	800087b7          	lui	a5,0x80008
80006ce8:	ce478513          	addi	a0,a5,-796 # 80007ce4 <__stack_top+0xfffc54e4>
80006cec:	bedfe0ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:468
                    aux = API_TaskAllocation(incommingPacket.task_id,
80006cf0:	800217b7          	lui	a5,0x80021
80006cf4:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006cf8:	00c7a503          	lw	a0,12(a5)
80006cfc:	800217b7          	lui	a5,0x80021
80006d00:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006d04:	0107a583          	lw	a1,16(a5)
80006d08:	800217b7          	lui	a5,0x80021
80006d0c:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006d10:	0147a603          	lw	a2,20(a5)
80006d14:	800217b7          	lui	a5,0x80021
80006d18:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006d1c:	0187a683          	lw	a3,24(a5)
80006d20:	800217b7          	lui	a5,0x80021
80006d24:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006d28:	01c7a783          	lw	a5,28(a5)
80006d2c:	00078713          	mv	a4,a5
80006d30:	815fd0ef          	jal	ra,80004544 <API_TaskAllocation>
80006d34:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:473
                                            incommingPacket.task_txt_size,
                                            incommingPacket.task_bss_size,
                                            incommingPacket.task_start_point,
                                            incommingPacket.task_app_id);
                    printsv("Task slot: ", aux);
80006d38:	fec42783          	lw	a5,-20(s0)
80006d3c:	00078593          	mv	a1,a5
80006d40:	800087b7          	lui	a5,0x80008
80006d44:	cfc78513          	addi	a0,a5,-772 # 80007cfc <__stack_top+0xfffc54fc>
80006d48:	c3dfe0ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:474
                    printsv("Task slot TaskAddr: ", TaskList[aux].taskAddr);
80006d4c:	800227b7          	lui	a5,0x80022
80006d50:	fec42703          	lw	a4,-20(s0)
80006d54:	4d078693          	addi	a3,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80006d58:	00070793          	mv	a5,a4
80006d5c:	00579793          	slli	a5,a5,0x5
80006d60:	00e787b3          	add	a5,a5,a4
80006d64:	00279793          	slli	a5,a5,0x2
80006d68:	00f687b3          	add	a5,a3,a5
80006d6c:	0287a783          	lw	a5,40(a5)
80006d70:	00078593          	mv	a1,a5
80006d74:	800087b7          	lui	a5,0x80008
80006d78:	d0878513          	addi	a0,a5,-760 # 80007d08 <__stack_top+0xfffc5508>
80006d7c:	c09fe0ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:476
                    // Informs the NI were to write the application
                    HW_set_32bit_reg(NI_RX, TaskList[aux].taskAddr);
80006d80:	800227b7          	lui	a5,0x80022
80006d84:	fec42703          	lw	a4,-20(s0)
80006d88:	4d078693          	addi	a3,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80006d8c:	00070793          	mv	a5,a4
80006d90:	00579793          	slli	a5,a5,0x5
80006d94:	00e787b3          	add	a5,a5,a4
80006d98:	00279793          	slli	a5,a5,0x2
80006d9c:	00f687b3          	add	a5,a3,a5
80006da0:	0287a783          	lw	a5,40(a5)
80006da4:	00078593          	mv	a1,a5
80006da8:	500007b7          	lui	a5,0x50000
80006dac:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80006db0:	9e4fa0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:477
                    incommingPacket.service = TASK_ALLOCATION_FINISHED;
80006db4:	800217b7          	lui	a5,0x80021
80006db8:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006dbc:	03300713          	li	a4,51
80006dc0:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:478
                    break;
80006dc4:	4c00006f          	j	80007284 <API_NI_Handler+0x78c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:481
                
                case TASK_FINISH:
                    printsvsv("FINISHED: Task ", incommingPacket.task_id, "from application ", incommingPacket.task_app_id);
80006dc8:	800217b7          	lui	a5,0x80021
80006dcc:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006dd0:	00c7a783          	lw	a5,12(a5)
80006dd4:	00078713          	mv	a4,a5
80006dd8:	800217b7          	lui	a5,0x80021
80006ddc:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006de0:	01c7a783          	lw	a5,28(a5)
80006de4:	00078693          	mv	a3,a5
80006de8:	800087b7          	lui	a5,0x80008
80006dec:	d2078613          	addi	a2,a5,-736 # 80007d20 <__stack_top+0xfffc5520>
80006df0:	00070593          	mv	a1,a4
80006df4:	800087b7          	lui	a5,0x80008
80006df8:	d3478513          	addi	a0,a5,-716 # 80007d34 <__stack_top+0xfffc5534>
80006dfc:	bd1fe0ef          	jal	ra,800059cc <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:482
                    API_ClearTaskSlotFromTile(incommingPacket.task_dest_addr, incommingPacket.task_app_id, incommingPacket.task_id);
80006e00:	800217b7          	lui	a5,0x80021
80006e04:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006e08:	0307a703          	lw	a4,48(a5)
80006e0c:	800217b7          	lui	a5,0x80021
80006e10:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006e14:	01c7a683          	lw	a3,28(a5)
80006e18:	800217b7          	lui	a5,0x80021
80006e1c:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006e20:	00c7a783          	lw	a5,12(a5)
80006e24:	00078613          	mv	a2,a5
80006e28:	00068593          	mv	a1,a3
80006e2c:	00070513          	mv	a0,a4
80006e30:	d69fc0ef          	jal	ra,80003b98 <API_ClearTaskSlotFromTile>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:483
                    API_DealocateTask(incommingPacket.task_id, incommingPacket.task_app_id);
80006e34:	800217b7          	lui	a5,0x80021
80006e38:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006e3c:	00c7a703          	lw	a4,12(a5)
80006e40:	800217b7          	lui	a5,0x80021
80006e44:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006e48:	01c7a783          	lw	a5,28(a5)
80006e4c:	00078593          	mv	a1,a5
80006e50:	00070513          	mv	a0,a4
80006e54:	f54fc0ef          	jal	ra,800035a8 <API_DealocateTask>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:484
                    break;
80006e58:	42c0006f          	j	80007284 <API_NI_Handler+0x78c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:487

                case TASK_ALLOCATION_FINISHED:
                    prints("TASK_ALLOCATION_FINISHED\n");
80006e5c:	800087b7          	lui	a5,0x80008
80006e60:	d4478513          	addi	a0,a5,-700 # 80007d44 <__stack_top+0xfffc5544>
80006e64:	a75fe0ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:488
                    API_AckTaskAllocation(incommingPacket.task_id, incommingPacket.task_app_id);
80006e68:	800217b7          	lui	a5,0x80021
80006e6c:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006e70:	00c7a703          	lw	a4,12(a5)
80006e74:	800217b7          	lui	a5,0x80021
80006e78:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006e7c:	01c7a783          	lw	a5,28(a5)
80006e80:	00078593          	mv	a1,a5
80006e84:	00070513          	mv	a0,a4
80006e88:	9d8ff0ef          	jal	ra,80006060 <API_AckTaskAllocation>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:489
                    break;
80006e8c:	3f80006f          	j	80007284 <API_NI_Handler+0x78c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:492

                case TASK_ALLOCATION_SUCCESS:
                    prints("TASK_ALLOCATION_SUCCESS\n");
80006e90:	800087b7          	lui	a5,0x80008
80006e94:	d6078513          	addi	a0,a5,-672 # 80007d60 <__stack_top+0xfffc5560>
80006e98:	a41fe0ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:494
                    //printi(incommingPacket.task_id);
                    API_TaskAllocated(incommingPacket.task_id, incommingPacket.task_app_id);
80006e9c:	800217b7          	lui	a5,0x80021
80006ea0:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006ea4:	00c7a703          	lw	a4,12(a5)
80006ea8:	800217b7          	lui	a5,0x80021
80006eac:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006eb0:	01c7a783          	lw	a5,28(a5)
80006eb4:	00078593          	mv	a1,a5
80006eb8:	00070513          	mv	a0,a4
80006ebc:	8b4fd0ef          	jal	ra,80003f70 <API_TaskAllocated>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:495
                    break;
80006ec0:	3c40006f          	j	80007284 <API_NI_Handler+0x78c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:498

                case TASK_START:
                    prints("Chegou um TASK_START!\n");
80006ec4:	800087b7          	lui	a5,0x80008
80006ec8:	d7c78513          	addi	a0,a5,-644 # 80007d7c <__stack_top+0xfffc557c>
80006ecc:	a0dfe0ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:499
                    aux = API_GetTaskSlot(incommingPacket.task_id, incommingPacket.task_app_id);
80006ed0:	800217b7          	lui	a5,0x80021
80006ed4:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006ed8:	00c7a703          	lw	a4,12(a5)
80006edc:	800217b7          	lui	a5,0x80021
80006ee0:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006ee4:	01c7a783          	lw	a5,28(a5)
80006ee8:	00078593          	mv	a1,a5
80006eec:	00070513          	mv	a0,a4
80006ef0:	92dfd0ef          	jal	ra,8000481c <API_GetTaskSlot>
80006ef4:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:501
                    // Informs the NI were to write the application
                    HW_set_32bit_reg(NI_RX, (unsigned int)&TaskList[aux].appNumTasks);
80006ef8:	fec42703          	lw	a4,-20(s0)
80006efc:	00070793          	mv	a5,a4
80006f00:	00579793          	slli	a5,a5,0x5
80006f04:	00e787b3          	add	a5,a5,a4
80006f08:	00279793          	slli	a5,a5,0x2
80006f0c:	05078713          	addi	a4,a5,80
80006f10:	800227b7          	lui	a5,0x80022
80006f14:	4d078793          	addi	a5,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80006f18:	00f707b3          	add	a5,a4,a5
80006f1c:	00878793          	addi	a5,a5,8
80006f20:	00078593          	mv	a1,a5
80006f24:	500007b7          	lui	a5,0x50000
80006f28:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80006f2c:	868fa0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:502
                    incommingPacket.service = TASK_RUN;
80006f30:	800217b7          	lui	a5,0x80021
80006f34:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006f38:	40100713          	li	a4,1025
80006f3c:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:503
                    break;
80006f40:	3440006f          	j	80007284 <API_NI_Handler+0x78c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:506
                
                case TASK_RUN:
                    prints("Chegou um TASK_RUN!\n");
80006f44:	800087b7          	lui	a5,0x80008
80006f48:	d9478513          	addi	a0,a5,-620 # 80007d94 <__stack_top+0xfffc5594>
80006f4c:	98dfe0ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:507
                    aux = API_GetTaskSlot(incommingPacket.task_id, incommingPacket.task_app_id);
80006f50:	800217b7          	lui	a5,0x80021
80006f54:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006f58:	00c7a703          	lw	a4,12(a5)
80006f5c:	800217b7          	lui	a5,0x80021
80006f60:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80006f64:	01c7a783          	lw	a5,28(a5)
80006f68:	00078593          	mv	a1,a5
80006f6c:	00070513          	mv	a0,a4
80006f70:	8adfd0ef          	jal	ra,8000481c <API_GetTaskSlot>
80006f74:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:508
                    TaskList[aux].status = TASK_SLOT_READY;
80006f78:	800226b7          	lui	a3,0x80022
80006f7c:	fec42703          	lw	a4,-20(s0)
80006f80:	00070793          	mv	a5,a4
80006f84:	00579793          	slli	a5,a5,0x5
80006f88:	00e787b3          	add	a5,a5,a4
80006f8c:	00279793          	slli	a5,a5,0x2
80006f90:	4d068713          	addi	a4,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80006f94:	00e787b3          	add	a5,a5,a4
80006f98:	00300713          	li	a4,3
80006f9c:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:509
                    API_setFreqScale(1000);
80006fa0:	3e800513          	li	a0,1000
80006fa4:	a10fe0ef          	jal	ra,800051b4 <API_setFreqScale>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:510
                    printsvsv("Starting Task ", TaskList[aux].TaskID, " from app ", TaskList[aux].AppID);
80006fa8:	800226b7          	lui	a3,0x80022
80006fac:	fec42703          	lw	a4,-20(s0)
80006fb0:	00070793          	mv	a5,a4
80006fb4:	00579793          	slli	a5,a5,0x5
80006fb8:	00e787b3          	add	a5,a5,a4
80006fbc:	00279793          	slli	a5,a5,0x2
80006fc0:	4d068713          	addi	a4,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80006fc4:	00e787b3          	add	a5,a5,a4
80006fc8:	0107a783          	lw	a5,16(a5)
80006fcc:	00078593          	mv	a1,a5
80006fd0:	800227b7          	lui	a5,0x80022
80006fd4:	fec42703          	lw	a4,-20(s0)
80006fd8:	4d078693          	addi	a3,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80006fdc:	00070793          	mv	a5,a4
80006fe0:	00579793          	slli	a5,a5,0x5
80006fe4:	00e787b3          	add	a5,a5,a4
80006fe8:	00279793          	slli	a5,a5,0x2
80006fec:	00f687b3          	add	a5,a3,a5
80006ff0:	0147a783          	lw	a5,20(a5)
80006ff4:	00078693          	mv	a3,a5
80006ff8:	800087b7          	lui	a5,0x80008
80006ffc:	dac78613          	addi	a2,a5,-596 # 80007dac <__stack_top+0xfffc55ac>
80007000:	800087b7          	lui	a5,0x80008
80007004:	db878513          	addi	a0,a5,-584 # 80007db8 <__stack_top+0xfffc55b8>
80007008:	9c5fe0ef          	jal	ra,800059cc <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:511
                    printsv("taskSlot run: ", aux);
8000700c:	fec42783          	lw	a5,-20(s0)
80007010:	00078593          	mv	a1,a5
80007014:	800087b7          	lui	a5,0x80008
80007018:	dc878513          	addi	a0,a5,-568 # 80007dc8 <__stack_top+0xfffc55c8>
8000701c:	969fe0ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:512
                    API_TaskStart(aux);
80007020:	fec42503          	lw	a0,-20(s0)
80007024:	8ddfd0ef          	jal	ra,80004900 <API_TaskStart>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:522
                    //         API_setFreqScale(1000);
                    //         printsvsv("Starting Task ", TaskList[aux].TaskID, " from app ", TaskList[aux].AppID);
                    //         API_TaskStart(aux);
                    //     }
                    // }
                    break;
80007028:	25c0006f          	j	80007284 <API_NI_Handler+0x78c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:526

                case MESSAGE_REQUEST:
                    // check the pipe
                    printsvsv("Chegou um message request! App: ", incommingPacket.task_app_id, "Task: ", incommingPacket.task_id);
8000702c:	800217b7          	lui	a5,0x80021
80007030:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80007034:	01c7a783          	lw	a5,28(a5)
80007038:	00078713          	mv	a4,a5
8000703c:	800217b7          	lui	a5,0x80021
80007040:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80007044:	00c7a783          	lw	a5,12(a5)
80007048:	00078693          	mv	a3,a5
8000704c:	800087b7          	lui	a5,0x80008
80007050:	dd878613          	addi	a2,a5,-552 # 80007dd8 <__stack_top+0xfffc55d8>
80007054:	00070593          	mv	a1,a4
80007058:	800087b7          	lui	a5,0x80008
8000705c:	de078513          	addi	a0,a5,-544 # 80007de0 <__stack_top+0xfffc55e0>
80007060:	96dfe0ef          	jal	ra,800059cc <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:527
                    aux = API_CheckMessagePipe(incommingPacket.task_id, incommingPacket.task_app_id);
80007064:	800217b7          	lui	a5,0x80021
80007068:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
8000706c:	00c7a703          	lw	a4,12(a5)
80007070:	800217b7          	lui	a5,0x80021
80007074:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80007078:	01c7a783          	lw	a5,28(a5)
8000707c:	00078593          	mv	a1,a5
80007080:	00070513          	mv	a0,a4
80007084:	8c5ff0ef          	jal	ra,80006948 <API_CheckMessagePipe>
80007088:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:528
                    if (aux == ERRO){
8000708c:	fec42703          	lw	a4,-20(s0)
80007090:	fff00793          	li	a5,-1
80007094:	04f71463          	bne	a4,a5,800070dc <API_NI_Handler+0x5e4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:530
                        // register an messagerequest
                        prints("Mensagem não encontrada, adicionando ao PendingReq!\n");
80007098:	800087b7          	lui	a5,0x80008
8000709c:	e0478513          	addi	a0,a5,-508 # 80007e04 <__stack_top+0xfffc5604>
800070a0:	839fe0ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:531
                        API_AddPendingReq(incommingPacket.task_id, incommingPacket.task_app_id, incommingPacket.producer_task_id);
800070a4:	800217b7          	lui	a5,0x80021
800070a8:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
800070ac:	00c7a703          	lw	a4,12(a5)
800070b0:	800217b7          	lui	a5,0x80021
800070b4:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
800070b8:	01c7a683          	lw	a3,28(a5)
800070bc:	800217b7          	lui	a5,0x80021
800070c0:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
800070c4:	0147a783          	lw	a5,20(a5)
800070c8:	00078613          	mv	a2,a5
800070cc:	00068593          	mv	a1,a3
800070d0:	00070513          	mv	a0,a4
800070d4:	9b1ff0ef          	jal	ra,80006a84 <API_AddPendingReq>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:537
                    } else {
                        prints("Mensagem encontrada no pipe!\n");
                        API_PushSendQueue(MESSAGE, aux);
                        // API_Try2Send();
                    }
                    break;
800070d8:	1ac0006f          	j	80007284 <API_NI_Handler+0x78c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:533
                        prints("Mensagem encontrada no pipe!\n");
800070dc:	800087b7          	lui	a5,0x80008
800070e0:	e3c78513          	addi	a0,a5,-452 # 80007e3c <__stack_top+0xfffc563c>
800070e4:	ff4fe0ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:534
                        API_PushSendQueue(MESSAGE, aux);
800070e8:	fec42583          	lw	a1,-20(s0)
800070ec:	20200537          	lui	a0,0x20200
800070f0:	cf1fe0ef          	jal	ra,80005de0 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:537
                    break;
800070f4:	1900006f          	j	80007284 <API_NI_Handler+0x78c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:540
                
                case MESSAGE_DELIVERY:
                    prints("Tem uma mensagem chegando...\n");
800070f8:	800087b7          	lui	a5,0x80008
800070fc:	e5c78513          	addi	a0,a5,-420 # 80007e5c <__stack_top+0xfffc565c>
80007100:	fd8fe0ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:541
                    aux = API_GetTaskSlot(incommingPacket.destination_task, incommingPacket.application_id);
80007104:	800217b7          	lui	a5,0x80021
80007108:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
8000710c:	0147a703          	lw	a4,20(a5)
80007110:	800217b7          	lui	a5,0x80021
80007114:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80007118:	00c7a783          	lw	a5,12(a5)
8000711c:	00078593          	mv	a1,a5
80007120:	00070513          	mv	a0,a4
80007124:	ef8fd0ef          	jal	ra,8000481c <API_GetTaskSlot>
80007128:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:543
                    //printsv("MESSAGE_DELIVERY addr: ", TaskList[aux].MsgToReceive);
                    HW_set_32bit_reg(NI_RX, TaskList[aux].MsgToReceive);
8000712c:	800226b7          	lui	a3,0x80022
80007130:	fec42703          	lw	a4,-20(s0)
80007134:	00070793          	mv	a5,a4
80007138:	00579793          	slli	a5,a5,0x5
8000713c:	00e787b3          	add	a5,a5,a4
80007140:	00279793          	slli	a5,a5,0x2
80007144:	4d068713          	addi	a4,a3,1232 # 800224d0 <__stack_top+0xfffdfcd0>
80007148:	00e787b3          	add	a5,a5,a4
8000714c:	0207a783          	lw	a5,32(a5)
80007150:	00078593          	mv	a1,a5
80007154:	500007b7          	lui	a5,0x50000
80007158:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
8000715c:	e39f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:544
                    incommingPacket.service = MESSAGE_DELIVERY_FINISH;
80007160:	800217b7          	lui	a5,0x80021
80007164:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80007168:	02100713          	li	a4,33
8000716c:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:546
                    //prints("done...\n----------\n");
                    break;
80007170:	1140006f          	j	80007284 <API_NI_Handler+0x78c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:550
                
                case MESSAGE_DELIVERY_FINISH:
                    //prints("Terminou de entregar a mensagem!!\n");
                    aux = API_GetTaskSlot(incommingPacket.destination_task, incommingPacket.application_id);
80007174:	800217b7          	lui	a5,0x80021
80007178:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
8000717c:	0147a703          	lw	a4,20(a5)
80007180:	800217b7          	lui	a5,0x80021
80007184:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80007188:	00c7a783          	lw	a5,12(a5)
8000718c:	00078593          	mv	a1,a5
80007190:	00070513          	mv	a0,a4
80007194:	e88fd0ef          	jal	ra,8000481c <API_GetTaskSlot>
80007198:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:551
                    TaskList[aux].waitingMsg = FALSE;
8000719c:	800227b7          	lui	a5,0x80022
800071a0:	fec42703          	lw	a4,-20(s0)
800071a4:	4d078693          	addi	a3,a5,1232 # 800224d0 <__stack_top+0xfffdfcd0>
800071a8:	00070793          	mv	a5,a4
800071ac:	00579793          	slli	a5,a5,0x5
800071b0:	00e787b3          	add	a5,a5,a4
800071b4:	00279793          	slli	a5,a5,0x2
800071b8:	00f687b3          	add	a5,a3,a5
800071bc:	0007ae23          	sw	zero,28(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:552
                    break;
800071c0:	0c40006f          	j	80007284 <API_NI_Handler+0x78c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:555

                case TEMPERATURE_PACKET:
                    prints("Recebendo pacote de temperatura");
800071c4:	800087b7          	lui	a5,0x80008
800071c8:	e7c78513          	addi	a0,a5,-388 # 80007e7c <__stack_top+0xfffc567c>
800071cc:	f0cfe0ef          	jal	ra,800058d8 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:556
                    HW_set_32bit_reg(NI_RX, (unsigned int)&SystemTemperature);
800071d0:	800227b7          	lui	a5,0x80022
800071d4:	43c78793          	addi	a5,a5,1084 # 8002243c <__stack_top+0xfffdfc3c>
800071d8:	00078593          	mv	a1,a5
800071dc:	500007b7          	lui	a5,0x50000
800071e0:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800071e4:	db1f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:557
                    incommingPacket.service = FINISH_TEMPERATURE_PACKET;
800071e8:	800217b7          	lui	a5,0x80021
800071ec:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
800071f0:	05600713          	li	a4,86
800071f4:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:558
                    break;
800071f8:	08c0006f          	j	80007284 <API_NI_Handler+0x78c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:561
                
                case FINISH_TEMPERATURE_PACKET:
                    temperatureUpdated = 1;
800071fc:	800227b7          	lui	a5,0x80022
80007200:	00100713          	li	a4,1
80007204:	42e7ac23          	sw	a4,1080(a5) # 80022438 <__stack_top+0xfffdfc38>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:562
                    for(aux = 0; aux < DIM_X*DIM_Y; aux++){ 
80007208:	fe042623          	sw	zero,-20(s0)
8000720c:	0440006f          	j	80007250 <API_NI_Handler+0x758>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:563 (discriminator 3)
                        printsvsv("pe", aux, "temp: ", SystemTemperature[aux]);
80007210:	fec42583          	lw	a1,-20(s0)
80007214:	800227b7          	lui	a5,0x80022
80007218:	fec42703          	lw	a4,-20(s0)
8000721c:	00271713          	slli	a4,a4,0x2
80007220:	43c78793          	addi	a5,a5,1084 # 8002243c <__stack_top+0xfffdfc3c>
80007224:	00f707b3          	add	a5,a4,a5
80007228:	0007a783          	lw	a5,0(a5)
8000722c:	00078693          	mv	a3,a5
80007230:	800087b7          	lui	a5,0x80008
80007234:	e9c78613          	addi	a2,a5,-356 # 80007e9c <__stack_top+0xfffc569c>
80007238:	800087b7          	lui	a5,0x80008
8000723c:	ea478513          	addi	a0,a5,-348 # 80007ea4 <__stack_top+0xfffc56a4>
80007240:	f8cfe0ef          	jal	ra,800059cc <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:562 (discriminator 3)
                    for(aux = 0; aux < DIM_X*DIM_Y; aux++){ 
80007244:	fec42783          	lw	a5,-20(s0)
80007248:	00178793          	addi	a5,a5,1
8000724c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:562 (discriminator 1)
80007250:	fec42703          	lw	a4,-20(s0)
80007254:	00800793          	li	a5,8
80007258:	fae7fce3          	bleu	a4,a5,80007210 <API_NI_Handler+0x718>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:565
                    }
                    break;
8000725c:	0280006f          	j	80007284 <API_NI_Handler+0x78c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:571

                case SOLVED:
                    break;
                    
                default:
                    printsv("ERROR External_2_IRQHandler Unknown-Service ", incommingPacket.service);
80007260:	800217b7          	lui	a5,0x80021
80007264:	31078793          	addi	a5,a5,784 # 80021310 <__stack_top+0xfffdeb10>
80007268:	0087a783          	lw	a5,8(a5)
8000726c:	00078593          	mv	a1,a5
80007270:	800087b7          	lui	a5,0x80008
80007274:	ea878513          	addi	a0,a5,-344 # 80007ea8 <__stack_top+0xfffc56a8>
80007278:	f0cfe0ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:572
                    break;
8000727c:	0080006f          	j	80007284 <API_NI_Handler+0x78c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:568
                    break;
80007280:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:574
            }
            HW_set_32bit_reg(NI_RX, DONE);
80007284:	800057b7          	lui	a5,0x80005
80007288:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffc2d55>
8000728c:	500007b7          	lui	a5,0x50000
80007290:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007294:	d01f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:575
            count++;
80007298:	fe842783          	lw	a5,-24(s0)
8000729c:	00178793          	addi	a5,a5,1
800072a0:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:577
        }
        vTaskExitCritical();
800072a4:	a31fb0ef          	jal	ra,80002cd4 <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:578
    } while( HW_get_32bit_reg(NI_RX) == NI_STATUS_INTER || HW_get_32bit_reg(NI_RX) == NI_STATUS_WAITING || HW_get_32bit_reg(NI_TX) == NI_STATUS_INTER);
800072a8:	500007b7          	lui	a5,0x50000
800072ac:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800072b0:	cedf90ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800072b4:	00050713          	mv	a4,a0
800072b8:	000017b7          	lui	a5,0x1
800072bc:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
800072c0:	84f706e3          	beq	a4,a5,80006b0c <API_NI_Handler+0x14>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:578 (discriminator 1)
800072c4:	500007b7          	lui	a5,0x50000
800072c8:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800072cc:	cd1f90ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800072d0:	00050713          	mv	a4,a0
800072d4:	02200793          	li	a5,34
800072d8:	82f70ae3          	beq	a4,a5,80006b0c <API_NI_Handler+0x14>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:578 (discriminator 2)
800072dc:	500007b7          	lui	a5,0x50000
800072e0:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
800072e4:	cb9f90ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800072e8:	00050713          	mv	a4,a0
800072ec:	000017b7          	lui	a5,0x1
800072f0:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
800072f4:	80f70ce3          	beq	a4,a5,80006b0c <API_NI_Handler+0x14>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:580
    
    vTaskEnterCritical();
800072f8:	9a1fb0ef          	jal	ra,80002c98 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:581
    if (HW_get_32bit_reg(NI_TIMER) == NI_STATUS_INTER){
800072fc:	500007b7          	lui	a5,0x50000
80007300:	01078513          	addi	a0,a5,16 # 50000010 <RAM_SIZE+0x4ff80010>
80007304:	c99f90ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80007308:	00050713          	mv	a4,a0
8000730c:	000017b7          	lui	a5,0x1
80007310:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
80007314:	00f71e63          	bne	a4,a5,80007330 <API_NI_Handler+0x838>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:582
        powerEstimation();
80007318:	90cfe0ef          	jal	ra,80005424 <powerEstimation>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:583
        HW_set_32bit_reg(NI_TIMER, DONE);
8000731c:	800057b7          	lui	a5,0x80005
80007320:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffc2d55>
80007324:	500007b7          	lui	a5,0x50000
80007328:	01078513          	addi	a0,a5,16 # 50000010 <RAM_SIZE+0x4ff80010>
8000732c:	c69f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:585
    }
    vTaskExitCritical();
80007330:	9a5fb0ef          	jal	ra,80002cd4 <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:587
    
    return;
80007334:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:588
80007338:	01c12083          	lw	ra,28(sp)
8000733c:	01812403          	lw	s0,24(sp)
80007340:	02010113          	addi	sp,sp,32
80007344:	00008067          	ret

80007348 <PLIC_init>:
PLIC_init():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:124
{
80007348:	fe010113          	addi	sp,sp,-32
8000734c:	00812e23          	sw	s0,28(sp)
80007350:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:126
    unsigned long hart_id = read_csr(mhartid);
80007354:	f14027f3          	csrr	a5,mhartid
80007358:	fef42423          	sw	a5,-24(s0)
8000735c:	fe842783          	lw	a5,-24(s0)
80007360:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
80007364:	fe042623          	sw	zero,-20(s0)
80007368:	03c0006f          	j	800073a4 <PLIC_init+0x5c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:131 (discriminator 3)
        PLIC->TARGET_ENABLES[hart_id].ENABLES[inc] = 0;
8000736c:	40000737          	lui	a4,0x40000
80007370:	fe442783          	lw	a5,-28(s0)
80007374:	00579693          	slli	a3,a5,0x5
80007378:	fec42783          	lw	a5,-20(s0)
8000737c:	00f686b3          	add	a3,a3,a5
80007380:	000017b7          	lui	a5,0x1
80007384:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80007388:	00f687b3          	add	a5,a3,a5
8000738c:	00279793          	slli	a5,a5,0x2
80007390:	00f707b3          	add	a5,a4,a5
80007394:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 3)
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
80007398:	fec42783          	lw	a5,-20(s0)
8000739c:	00178793          	addi	a5,a5,1
800073a0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 1)
800073a4:	fec42783          	lw	a5,-20(s0)
800073a8:	fc0782e3          	beqz	a5,8000736c <PLIC_init+0x24>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
800073ac:	fe042623          	sw	zero,-20(s0)
800073b0:	0240006f          	j	800073d4 <PLIC_init+0x8c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:139 (discriminator 3)
        PLIC->SOURCE_PRIORITY[inc] = 0;
800073b4:	40000737          	lui	a4,0x40000
800073b8:	fec42783          	lw	a5,-20(s0)
800073bc:	00279793          	slli	a5,a5,0x2
800073c0:	00f707b3          	add	a5,a4,a5
800073c4:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 3)
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
800073c8:	fec42783          	lw	a5,-20(s0)
800073cc:	00178793          	addi	a5,a5,1
800073d0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 1)
800073d4:	fec42703          	lw	a4,-20(s0)
800073d8:	01e00793          	li	a5,30
800073dc:	fce7fce3          	bleu	a4,a5,800073b4 <PLIC_init+0x6c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:143
    PLIC->TARGET[hart_id].PRIORITY_THRESHOLD = 0;
800073e0:	40000737          	lui	a4,0x40000
800073e4:	fe442783          	lw	a5,-28(s0)
800073e8:	20078793          	addi	a5,a5,512
800073ec:	00c79793          	slli	a5,a5,0xc
800073f0:	00f707b3          	add	a5,a4,a5
800073f4:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:146
    set_csr(mie, MIP_MEIP);
800073f8:	000017b7          	lui	a5,0x1
800073fc:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80007400:	3047a7f3          	csrrs	a5,mie,a5
80007404:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:147
}
80007408:	00000013          	nop
8000740c:	01c12403          	lw	s0,28(sp)
80007410:	02010113          	addi	sp,sp,32
80007414:	00008067          	ret

80007418 <main>:
main():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:58
extern volatile unsigned int NI_IRCount;

/*-----------------------------------------------------------*/

int main( void )
{
80007418:	fd010113          	addi	sp,sp,-48
8000741c:	02112623          	sw	ra,44(sp)
80007420:	02812423          	sw	s0,40(sp)
80007424:	03010413          	addi	s0,sp,48
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:60
	char str[20];
    PLIC_init();
80007428:	f21ff0ef          	jal	ra,80007348 <PLIC_init>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:66

    /**************************************************************************
    * Initialize CoreUART with its base address, baud value, and line
    * configuration.
    *************************************************************************/
    UART_init(&g_uart, COREUARTAPB0_BASE_ADDR, BAUD_VALUE_115200,
8000742c:	00100693          	li	a3,1
80007430:	02c00613          	li	a2,44
80007434:	700015b7          	lui	a1,0x70001
80007438:	800227b7          	lui	a5,0x80022
8000743c:	7ec78513          	addi	a0,a5,2028 # 800227ec <__stack_top+0xfffdffec>
80007440:	c2df90ef          	jal	ra,8000106c <UART_init>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:72
             (DATA_8_BITS | NO_PARITY) );
    
	/**************************************************************************
    * Initialize the Chronos platform stuff
    *************************************************************************/
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n Chronos platform initializing... \n" );
80007444:	800087b7          	lui	a5,0x80008
80007448:	ef078593          	addi	a1,a5,-272 # 80007ef0 <__stack_top+0xfffc56f0>
8000744c:	800227b7          	lui	a5,0x80022
80007450:	7ec78513          	addi	a0,a5,2028 # 800227ec <__stack_top+0xfffdffec>
80007454:	de5f90ef          	jal	ra,80001238 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:73
	Chronos_init();
80007458:	b8cfe0ef          	jal	ra,800057e4 <Chronos_init>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:74
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This terminal belongs to the address: " );
8000745c:	800087b7          	lui	a5,0x80008
80007460:	f1878593          	addi	a1,a5,-232 # 80007f18 <__stack_top+0xfffc5718>
80007464:	800227b7          	lui	a5,0x80022
80007468:	7ec78513          	addi	a0,a5,2028 # 800227ec <__stack_top+0xfffdffec>
8000746c:	dcdf90ef          	jal	ra,80001238 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:75
	myItoa(ProcessorAddr, str, 16);
80007470:	800227b7          	lui	a5,0x80022
80007474:	7f47a783          	lw	a5,2036(a5) # 800227f4 <__stack_top+0xfffdfff4>
80007478:	00078713          	mv	a4,a5
8000747c:	fdc40793          	addi	a5,s0,-36
80007480:	01000613          	li	a2,16
80007484:	00078593          	mv	a1,a5
80007488:	00070513          	mv	a0,a4
8000748c:	f74fe0ef          	jal	ra,80005c00 <myItoa>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:76
    UART_polled_tx_string( &g_uart, (const uint8_t *)str); UART_polled_tx_string( &g_uart, (const uint8_t *)"\n");
80007490:	fdc40793          	addi	a5,s0,-36
80007494:	00078593          	mv	a1,a5
80007498:	800227b7          	lui	a5,0x80022
8000749c:	7ec78513          	addi	a0,a5,2028 # 800227ec <__stack_top+0xfffdffec>
800074a0:	d99f90ef          	jal	ra,80001238 <UART_polled_tx_string>
800074a4:	800087b7          	lui	a5,0x80008
800074a8:	f4478593          	addi	a1,a5,-188 # 80007f44 <__stack_top+0xfffc5744>
800074ac:	800227b7          	lui	a5,0x80022
800074b0:	7ec78513          	addi	a0,a5,2028 # 800227ec <__stack_top+0xfffdffec>
800074b4:	d85f90ef          	jal	ra,80001238 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:81
	
	//xTaskCreate( NI_TX_Handler, "TXHandler", 1024*4, NULL, (tskIDLE_PRIORITY + 1), NULL);
	//xTaskCreate( NI_RX_Handler, "RXHandler", 1024*3, NULL, (tskIDLE_PRIORITY + 1), NULL);

	if (ProcessorAddr == 0x0000){
800074b8:	800227b7          	lui	a5,0x80022
800074bc:	7f47a783          	lw	a5,2036(a5) # 800227f4 <__stack_top+0xfffdfff4>
800074c0:	04079663          	bnez	a5,8000750c <main+0xf4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:82
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is the Global Master: \n" );
800074c4:	800087b7          	lui	a5,0x80008
800074c8:	f4878593          	addi	a1,a5,-184 # 80007f48 <__stack_top+0xfffc5748>
800074cc:	800227b7          	lui	a5,0x80022
800074d0:	7ec78513          	addi	a0,a5,2028 # 800227ec <__stack_top+0xfffdffec>
800074d4:	d65f90ef          	jal	ra,80001238 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:84
		/* Create the GlobalManager task */
		xTaskCreate( GlobalManagerTask, "GlobalMaster", 1024*6, NULL, (tskIDLE_PRIORITY + 1), NULL );
800074d8:	00000893          	li	a7,0
800074dc:	00000813          	li	a6,0
800074e0:	00000793          	li	a5,0
800074e4:	00100713          	li	a4,1
800074e8:	00000693          	li	a3,0
800074ec:	00002637          	lui	a2,0x2
800074f0:	80060613          	addi	a2,a2,-2048 # 1800 <HEAP_SIZE-0xe800>
800074f4:	800085b7          	lui	a1,0x80008
800074f8:	f7458593          	addi	a1,a1,-140 # 80007f74 <__stack_top+0xfffc5774>
800074fc:	80007537          	lui	a0,0x80007
80007500:	56c50513          	addi	a0,a0,1388 # 8000756c <__stack_top+0xfffc4d6c>
80007504:	a15fa0ef          	jal	ra,80001f18 <xTaskGenericCreate>
80007508:	0180006f          	j	80007520 <main+0x108>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:86
	} else {
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is a Slave: \n" );
8000750c:	800087b7          	lui	a5,0x80008
80007510:	f8478593          	addi	a1,a5,-124 # 80007f84 <__stack_top+0xfffc5784>
80007514:	800227b7          	lui	a5,0x80022
80007518:	7ec78513          	addi	a0,a5,2028 # 800227ec <__stack_top+0xfffdffec>
8000751c:	d1df90ef          	jal	ra,80001238 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:94
		//xTaskCreate( vUartAliveTask, "Alive", 1024*3, NULL, (tskIDLE_PRIORITY + 1), NULL );
	}
	//xTaskCreate( NI_Handler, "Handler", 1024*6, NULL, (tskIDLE_PRIORITY + 2), NULL );

	/* Start the kernel.  From here on, only tasks and interrupts will run. */
	vTaskStartScheduler();
80007520:	d75fa0ef          	jal	ra,80002294 <vTaskStartScheduler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:97

	/* Exit FreeRTOS */
	return 0;
80007524:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:98
}
80007528:	00078513          	mv	a0,a5
8000752c:	02c12083          	lw	ra,44(sp)
80007530:	02812403          	lw	s0,40(sp)
80007534:	03010113          	addi	sp,sp,48
80007538:	00008067          	ret

8000753c <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:103

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
8000753c:	ff010113          	addi	sp,sp,-16
80007540:	00812623          	sw	s0,12(sp)
80007544:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:114
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
80007548:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:115 (discriminator 1)
	for( ;; );
8000754c:	0000006f          	j	8000754c <vApplicationMallocFailedHook+0x10>

80007550 <vApplicationIdleHook>:
vApplicationIdleHook():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:120
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
80007550:	ff010113          	addi	sp,sp,-16
80007554:	00812623          	sw	s0,12(sp)
80007558:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:130
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
8000755c:	00000013          	nop
80007560:	00c12403          	lw	s0,12(sp)
80007564:	01010113          	addi	sp,sp,16
80007568:	00008067          	ret

8000756c <GlobalManagerTask>:
GlobalManagerTask():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:181
// 	}
// }

/*-----------------------------------------------------------*/

static void GlobalManagerTask( void *pvParameters ){
8000756c:	fc010113          	addi	sp,sp,-64
80007570:	02112e23          	sw	ra,60(sp)
80007574:	02812c23          	sw	s0,56(sp)
80007578:	04010413          	addi	s0,sp,64
8000757c:	fca42623          	sw	a0,-52(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:187
	( void ) pvParameters;
	int tick;
	char str[20];

	// Initialize the priority vector with the pattern policy
	GeneratePatternMatrix();
80007580:	ca9fb0ef          	jal	ra,80003228 <GeneratePatternMatrix>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:190

	// Initialize the System Tiles Info
	API_TilesReset();
80007584:	b7dfb0ef          	jal	ra,80003100 <API_TilesReset>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:193

	// Initialize the applications vector
    API_ApplicationsReset();
80007588:	b19fb0ef          	jal	ra,800030a0 <API_ApplicationsReset>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:196

	// Informs the Repository that the GLOBALMASTER is ready to receive the application info
	API_RepositoryWakeUp();
8000758c:	f98fb0ef          	jal	ra,80002d24 <API_RepositoryWakeUp>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:199 (discriminator 1)

	for(;;){
		tick = xTaskGetTickCount();
80007590:	f1dfa0ef          	jal	ra,800024ac <xTaskGetTickCount>
80007594:	00050793          	mv	a5,a0
80007598:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:200 (discriminator 1)
		myItoa(tick, str, 10);
8000759c:	fd840793          	addi	a5,s0,-40
800075a0:	00a00613          	li	a2,10
800075a4:	00078593          	mv	a1,a5
800075a8:	fec42503          	lw	a0,-20(s0)
800075ac:	e54fe0ef          	jal	ra,80005c00 <myItoa>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:201 (discriminator 1)
		UART_polled_tx_string( &g_uart, (const uint8_t *)str);
800075b0:	fd840793          	addi	a5,s0,-40
800075b4:	00078593          	mv	a1,a5
800075b8:	800227b7          	lui	a5,0x80022
800075bc:	7ec78513          	addi	a0,a5,2028 # 800227ec <__stack_top+0xfffdffec>
800075c0:	c79f90ef          	jal	ra,80001238 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:202 (discriminator 1)
		printsv("GlobalMasterActive", tick);
800075c4:	fec42583          	lw	a1,-20(s0)
800075c8:	800087b7          	lui	a5,0x80008
800075cc:	fa478513          	addi	a0,a5,-92 # 80007fa4 <__stack_top+0xfffc57a4>
800075d0:	bb4fe0ef          	jal	ra,80005984 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:203 (discriminator 1)
		UART_polled_tx_string( &g_uart, (const uint8_t *)" GlobalMasterRoutine...\r\n" );
800075d4:	800087b7          	lui	a5,0x80008
800075d8:	fb878593          	addi	a1,a5,-72 # 80007fb8 <__stack_top+0xfffc57b8>
800075dc:	800227b7          	lui	a5,0x80022
800075e0:	7ec78513          	addi	a0,a5,2028 # 800227ec <__stack_top+0xfffdffec>
800075e4:	c55f90ef          	jal	ra,80001238 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:206 (discriminator 1)

		// Checks if there is some task to allocate...
		API_AllocateTasks(tick);
800075e8:	fec42783          	lw	a5,-20(s0)
800075ec:	00078513          	mv	a0,a5
800075f0:	ce1fb0ef          	jal	ra,800032d0 <API_AllocateTasks>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:208 (discriminator 1)

		vTaskDelay(1);
800075f4:	00100513          	li	a0,1
800075f8:	c19fa0ef          	jal	ra,80002210 <vTaskDelay>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:199 (discriminator 1)
		tick = xTaskGetTickCount();
800075fc:	f95ff06f          	j	80007590 <GlobalManagerTask+0x24>

80007600 <write>:
write():
80007600:	00001797          	auipc	a5,0x1
80007604:	9f078793          	addi	a5,a5,-1552 # 80007ff0 <_impure_ptr>
80007608:	00060693          	mv	a3,a2
8000760c:	00058613          	mv	a2,a1
80007610:	00050593          	mv	a1,a0
80007614:	0007a503          	lw	a0,0(a5)
80007618:	0040006f          	j	8000761c <_write_r>

8000761c <_write_r>:
_write_r():
8000761c:	ff010113          	addi	sp,sp,-16
80007620:	00812423          	sw	s0,8(sp)
80007624:	00050413          	mv	s0,a0
80007628:	00058513          	mv	a0,a1
8000762c:	00060593          	mv	a1,a2
80007630:	00068613          	mv	a2,a3
80007634:	0001a797          	auipc	a5,0x1a
80007638:	6407ae23          	sw	zero,1628(a5) # 80021c90 <errno>
8000763c:	00112623          	sw	ra,12(sp)
80007640:	86df90ef          	jal	ra,80000eac <_write>
80007644:	fff00793          	li	a5,-1
80007648:	00f51c63          	bne	a0,a5,80007660 <_write_r+0x44>
8000764c:	0001a797          	auipc	a5,0x1a
80007650:	64478793          	addi	a5,a5,1604 # 80021c90 <errno>
80007654:	0007a783          	lw	a5,0(a5)
80007658:	00078463          	beqz	a5,80007660 <_write_r+0x44>
8000765c:	00f42023          	sw	a5,0(s0)
80007660:	00c12083          	lw	ra,12(sp)
80007664:	00812403          	lw	s0,8(sp)
80007668:	01010113          	addi	sp,sp,16
8000766c:	00008067          	ret
80007670:	6568                	flw	fa0,76(a0)
80007672:	6c6c                	flw	fa1,92(s0)
80007674:	0000006f          	j	80007674 <_write_r+0x58>
80007678:	6544                	flw	fs1,12(a0)
8000767a:	6574                	flw	fa3,76(a0)
8000767c:	69657463          	bleu	s6,a0,80007d04 <loadStoreDyn+0x21c>
80007680:	7520                	flw	fs0,104(a0)
80007682:	616d                	addi	sp,sp,240
80007684:	6320                	flw	fs0,64(a4)
80007686:	6168                	flw	fa0,68(a0)
80007688:	616d                	addi	sp,sp,240
8000768a:	6164                	flw	fs1,68(a0)
8000768c:	5420                	lw	s0,104(s0)
8000768e:	5345                	li	t1,-15
80007690:	4554                	lw	a3,12(a0)
80007692:	6420                	flw	fs0,72(s0)
80007694:	2065                	jal	8000773c <_write_r+0x120>
80007696:	74736973          	csrrsi	s2,0x747,6
8000769a:	6d65                	lui	s10,0x19
8000769c:	2161                	jal	80007b24 <loadStoreDyn+0x3c>
8000769e:	000a                	c.slli	zero,0x2
800076a0:	7261                	lui	tp,0xffff8
800076a2:	00203067          	0x203067
800076a6:	0000                	unimp
800076a8:	7261                	lui	tp,0xffff8
800076aa:	00203167          	0x203167
800076ae:	0000                	unimp
800076b0:	7261                	lui	tp,0xffff8
800076b2:	00203267          	0x203267
800076b6:	0000                	unimp
800076b8:	7261                	lui	tp,0xffff8
800076ba:	00203367          	0x203367
800076be:	0000                	unimp
800076c0:	7261                	lui	tp,0xffff8
800076c2:	00203467          	0x203467
800076c6:	0000                	unimp
800076c8:	7974                	flw	fa3,116(a0)
800076ca:	6570                	flw	fa2,76(a0)
800076cc:	0020                	addi	s0,sp,8
800076ce:	0000                	unimp
800076d0:	74737953          	0x74737953
800076d4:	6d65                	lui	s10,0x19
800076d6:	6c6c6163          	bltu	s8,t1,80007d98 <loadStoreDyn+0x2b0>
800076da:	6e20                	flw	fs0,88(a2)
800076dc:	206fa3c3          	fmadd.s	ft7,ft11,ft6,ft4,rdn
800076e0:	6469                	lui	s0,0x1a
800076e2:	6e65                	lui	t3,0x19
800076e4:	6974                	flw	fa3,84(a0)
800076e6:	6966                	flw	fs2,88(sp)
800076e8:	61646163          	bltu	s0,s6,80007cea <loadStoreDyn+0x202>
800076ec:	0a21                	addi	s4,s4,8
800076ee:	0000                	unimp
800076f0:	7274                	flw	fa3,100(a2)
800076f2:	7061                	c.lui	zero,0xffff8
800076f4:	000a                	c.slli	zero,0x2
800076f6:	0000                	unimp
800076f8:	7065                	c.lui	zero,0xffff9
800076fa:	00203a63          	0x203a63
800076fe:	0000                	unimp
80007700:	636d                	lui	t1,0x1b
80007702:	7561                	lui	a0,0xffff8
80007704:	203a6573          	csrrsi	a0,hideleg,20
80007708:	0000                	unimp
8000770a:	0000                	unimp
8000770c:	0700                	addi	s0,sp,896
8000770e:	8000                	0x8000
80007710:	0708                	addi	a0,sp,896
80007712:	8000                	0x8000
80007714:	0708                	addi	a0,sp,896
80007716:	8000                	0x8000
80007718:	0708                	addi	a0,sp,896
8000771a:	8000                	0x8000
8000771c:	0708                	addi	a0,sp,896
8000771e:	8000                	0x8000
80007720:	0708                	addi	a0,sp,896
80007722:	8000                	0x8000
80007724:	0708                	addi	a0,sp,896
80007726:	8000                	0x8000
80007728:	0708                	addi	a0,sp,896
8000772a:	8000                	0x8000
8000772c:	0708                	addi	a0,sp,896
8000772e:	8000                	0x8000
80007730:	0708                	addi	a0,sp,896
80007732:	8000                	0x8000
80007734:	06e0                	addi	s0,sp,844
80007736:	8000                	0x8000
80007738:	0708                	addi	a0,sp,896
8000773a:	8000                	0x8000
8000773c:	0708                	addi	a0,sp,896
8000773e:	8000                	0x8000
80007740:	0708                	addi	a0,sp,896
80007742:	8000                	0x8000
80007744:	0708                	addi	a0,sp,896
80007746:	8000                	0x8000
80007748:	0708                	addi	a0,sp,896
8000774a:	8000                	0x8000
8000774c:	0708                	addi	a0,sp,896
8000774e:	8000                	0x8000
80007750:	0708                	addi	a0,sp,896
80007752:	8000                	0x8000
80007754:	0708                	addi	a0,sp,896
80007756:	8000                	0x8000
80007758:	0708                	addi	a0,sp,896
8000775a:	8000                	0x8000
8000775c:	06f0                	addi	a2,sp,844
8000775e:	8000                	0x8000
80007760:	0708                	addi	a0,sp,896
80007762:	8000                	0x8000
80007764:	0708                	addi	a0,sp,896
80007766:	8000                	0x8000
80007768:	0708                	addi	a0,sp,896
8000776a:	8000                	0x8000
8000776c:	0708                	addi	a0,sp,896
8000776e:	8000                	0x8000
80007770:	0708                	addi	a0,sp,896
80007772:	8000                	0x8000
80007774:	0708                	addi	a0,sp,896
80007776:	8000                	0x8000
80007778:	0708                	addi	a0,sp,896
8000777a:	8000                	0x8000
8000777c:	0708                	addi	a0,sp,896
8000777e:	8000                	0x8000
80007780:	0708                	addi	a0,sp,896
80007782:	8000                	0x8000
80007784:	06a4                	addi	s1,sp,840
80007786:	8000                	0x8000
80007788:	0708                	addi	a0,sp,896
8000778a:	8000                	0x8000
8000778c:	0708                	addi	a0,sp,896
8000778e:	8000                	0x8000
80007790:	0708                	addi	a0,sp,896
80007792:	8000                	0x8000
80007794:	0708                	addi	a0,sp,896
80007796:	8000                	0x8000
80007798:	0708                	addi	a0,sp,896
8000779a:	8000                	0x8000
8000779c:	0708                	addi	a0,sp,896
8000779e:	8000                	0x8000
800077a0:	0708                	addi	a0,sp,896
800077a2:	8000                	0x8000
800077a4:	0708                	addi	a0,sp,896
800077a6:	8000                	0x8000
800077a8:	0708                	addi	a0,sp,896
800077aa:	8000                	0x8000
800077ac:	0680                	addi	s0,sp,832
800077ae:	8000                	0x8000
800077b0:	0708                	addi	a0,sp,896
800077b2:	8000                	0x8000
800077b4:	0708                	addi	a0,sp,896
800077b6:	8000                	0x8000
800077b8:	0708                	addi	a0,sp,896
800077ba:	8000                	0x8000
800077bc:	0708                	addi	a0,sp,896
800077be:	8000                	0x8000
800077c0:	0708                	addi	a0,sp,896
800077c2:	8000                	0x8000
800077c4:	0708                	addi	a0,sp,896
800077c6:	8000                	0x8000
800077c8:	0708                	addi	a0,sp,896
800077ca:	8000                	0x8000
800077cc:	0708                	addi	a0,sp,896
800077ce:	8000                	0x8000
800077d0:	0708                	addi	a0,sp,896
800077d2:	8000                	0x8000
800077d4:	0708                	addi	a0,sp,896
800077d6:	8000                	0x8000
800077d8:	0708                	addi	a0,sp,896
800077da:	8000                	0x8000
800077dc:	0708                	addi	a0,sp,896
800077de:	8000                	0x8000
800077e0:	0708                	addi	a0,sp,896
800077e2:	8000                	0x8000
800077e4:	0708                	addi	a0,sp,896
800077e6:	8000                	0x8000
800077e8:	0708                	addi	a0,sp,896
800077ea:	8000                	0x8000
800077ec:	05f8                	addi	a4,sp,716
800077ee:	8000                	0x8000
800077f0:	7830                	flw	fa2,112(s0)
800077f2:	0000                	unimp
800077f4:	500a                	0x500a
800077f6:	6f72                	flw	ft10,28(sp)
800077f8:	206d6167          	0x206d6167
800077fc:	6168                	flw	fa0,68(a0)
800077fe:	78652073          	csrs	0x786,a0
80007802:	7469                	lui	s0,0xffffa
80007804:	6465                	lui	s0,0x19
80007806:	7720                	flw	fs0,104(a4)
80007808:	7469                	lui	s0,0xffffa
8000780a:	2068                	fld	fa0,192(s0)
8000780c:	65646f63          	bltu	s0,s6,80007e6a <loadStoreDyn+0x382>
80007810:	003a                	c.slli	zero,0xe
80007812:	0000                	unimp
80007814:	000d                	c.nop	3
80007816:	0000                	unimp
80007818:	4449                	li	s0,18
8000781a:	454c                	lw	a1,12(a0)
8000781c:	0000                	unimp
8000781e:	0000                	unimp
80007820:	654e                	flw	fa0,208(sp)
80007822:	70612077          	0x70612077
80007826:	6c70                	flw	fa2,92(s0)
80007828:	6369                	lui	t1,0x1a
8000782a:	7461                	lui	s0,0xffff8
8000782c:	6f69                	lui	t5,0x1a
8000782e:	206e                	fld	ft0,216(sp)
80007830:	6572                	flw	fa0,28(sp)
80007832:	74736967          	0x74736967
80007836:	7265                	lui	tp,0xffff9
80007838:	6465                	lui	s0,0x19
8000783a:	2d20                	fld	fs0,88(a0)
8000783c:	4920                	lw	s0,80(a0)
8000783e:	3a44                	fld	fs1,176(a2)
80007840:	0020                	addi	s0,sp,8
80007842:	0000                	unimp
80007844:	6572                	flw	fa0,28(sp)
80007846:	7574                	flw	fa3,108(a0)
80007848:	6e72                	flw	ft8,28(sp)
8000784a:	6e69                	lui	t3,0x1a
8000784c:	72652067          	0x72652067
80007850:	6f72                	flw	ft10,28(sp)
80007852:	00000a33          	add	s4,zero,zero
80007856:	0000                	unimp
80007858:	6572                	flw	fa0,28(sp)
8000785a:	7574                	flw	fa3,108(a0)
8000785c:	6e72                	flw	ft8,28(sp)
8000785e:	6e69                	lui	t3,0x1a
80007860:	72652067          	0x72652067
80007864:	6f72                	flw	ft10,28(sp)
80007866:	0a34                	addi	a3,sp,280
80007868:	0000                	unimp
8000786a:	0000                	unimp
8000786c:	20736177          	0x20736177
80007870:	7865                	lui	a6,0xffff9
80007872:	6365                	lui	t1,0x19
80007874:	7475                	lui	s0,0xffffd
80007876:	6465                	lui	s0,0x19
80007878:	6920                	flw	fs0,80(a0)
8000787a:	206e                	fld	ft0,216(sp)
8000787c:	0000                	unimp
8000787e:	0000                	unimp
80007880:	7041                	c.lui	zero,0xffff0
80007882:	6c70                	flw	fa2,92(s0)
80007884:	6369                	lui	t1,0x1a
80007886:	7461                	lui	s0,0xffff8
80007888:	6f69                	lui	t5,0x1a
8000788a:	206e                	fld	ft0,216(sp)
8000788c:	0000                	unimp
8000788e:	0000                	unimp
80007890:	0909                	addi	s2,s2,2
80007892:	6854                	flw	fa3,20(s0)
80007894:	7369                	lui	t1,0xffffa
80007896:	6120                	flw	fs0,64(a0)
80007898:	7070                	flw	fa2,100(s0)
8000789a:	696c                	flw	fa1,84(a0)
8000789c:	69746163          	bltu	s0,s7,80007f1e <loadStoreDyn+0x436>
800078a0:	73206e6f          	jal	t3,8000dfd2 <__global_pointer$+0x57f2>
800078a4:	6974                	flw	fa3,84(a0)
800078a6:	6c6c                	flw	fa1,92(s0)
800078a8:	6e20                	flw	fs0,88(a2)
800078aa:	6565                	lui	a0,0x19
800078ac:	2064                	fld	fs1,192(s0)
800078ae:	6f74                	flw	fa3,92(a4)
800078b0:	7220                	flw	fs0,96(a2)
800078b2:	6e75                	lui	t3,0x1d
800078b4:	203a                	fld	ft0,392(sp)
800078b6:	0000                	unimp
800078b8:	0909                	addi	s2,s2,2
800078ba:	6854                	flw	fa3,20(s0)
800078bc:	7369                	lui	t1,0xffffa
800078be:	6120                	flw	fs0,64(a0)
800078c0:	7070                	flw	fa2,100(s0)
800078c2:	696c                	flw	fa1,84(a0)
800078c4:	69746163          	bltu	s0,s7,80007f46 <loadStoreDyn+0x45e>
800078c8:	69206e6f          	jal	t3,8000df5a <__global_pointer$+0x577a>
800078cc:	4f442073          	csrs	0x4f4,s0
800078d0:	454e                	lw	a0,208(sp)
800078d2:	0a21                	addi	s4,s4,8
800078d4:	0000                	unimp
800078d6:	0000                	unimp
800078d8:	6572                	flw	fa0,28(sp)
800078da:	7574                	flw	fa3,108(a0)
800078dc:	6e72                	flw	ft8,28(sp)
800078de:	6e69                	lui	t3,0x1a
800078e0:	72652067          	0x72652067
800078e4:	6f72                	flw	ft10,28(sp)
800078e6:	0a35                	addi	s4,s4,13
800078e8:	0000                	unimp
800078ea:	0000                	unimp
800078ec:	6572                	flw	fa0,28(sp)
800078ee:	7574                	flw	fa3,108(a0)
800078f0:	6e72                	flw	ft8,28(sp)
800078f2:	6e69                	lui	t3,0x1a
800078f4:	72652067          	0x72652067
800078f8:	6f72                	flw	ft10,28(sp)
800078fa:	0a36                	slli	s4,s4,0xd
800078fc:	0000                	unimp
800078fe:	0000                	unimp
80007900:	2049                	jal	80007982 <_write_r+0x366>
80007902:	20746f67          	0x20746f67
80007906:	2061                	jal	8000798e <_write_r+0x372>
80007908:	7266                	flw	ft4,120(sp)
8000790a:	6565                	lui	a0,0x19
8000790c:	7320                	flw	fs0,96(a4)
8000790e:	7265                	lui	tp,0xffff9
80007910:	6976                	flw	fs2,92(sp)
80007912:	73206563          	bltu	zero,s2,8000803c <__data_load+0x3c>
80007916:	6f6c                	flw	fa1,92(a4)
80007918:	212d                	jal	80007d42 <loadStoreDyn+0x25a>
8000791a:	2021                	jal	80007922 <_write_r+0x306>
8000791c:	3e2d                	jal	80007456 <main+0x3e>
8000791e:	0020                	addi	s0,sp,8
80007920:	7041                	c.lui	zero,0xffff0
80007922:	6c70                	flw	fa2,92(s0)
80007924:	6369                	lui	t1,0x1a
80007926:	7461                	lui	s0,0xffff8
80007928:	6f69                	lui	t5,0x1a
8000792a:	206e                	fld	ft0,216(sp)
8000792c:	6c61                	lui	s8,0x18
8000792e:	6f6c                	flw	fa1,92(a4)
80007930:	65746163          	bltu	s0,s7,80007f72 <loadStoreDyn+0x48a>
80007934:	3a64                	fld	fs1,240(a2)
80007936:	0020                	addi	s0,sp,8
80007938:	5309                	li	t1,-30
8000793a:	6174                	flw	fa3,68(a0)
8000793c:	7472                	flw	fs0,60(sp)
8000793e:	6320                	flw	fs0,64(a4)
80007940:	616d6d6f          	jal	s10,800ddf56 <__stack_top+0x9b756>
80007944:	646e                	flw	fs0,216(sp)
80007946:	7320                	flw	fs0,96(a4)
80007948:	6e65                	lui	t3,0x19
8000794a:	2074                	fld	fa3,192(s0)
8000794c:	6f74                	flw	fa3,92(a4)
8000794e:	6520                	flw	fs0,72(a0)
80007950:	6576                	flw	fa0,92(sp)
80007952:	7972                	flw	fs2,60(sp)
80007954:	7420                	flw	fs0,104(s0)
80007956:	7361                	lui	t1,0xffff8
80007958:	000a2e6b          	0xa2e6b
8000795c:	6572                	flw	fa0,28(sp)
8000795e:	7574                	flw	fa3,108(a0)
80007960:	6e72                	flw	ft8,28(sp)
80007962:	6e69                	lui	t3,0x1a
80007964:	72652067          	0x72652067
80007968:	6f72                	flw	ft10,28(sp)
8000796a:	0a30                	addi	a2,sp,280
8000796c:	0000                	unimp
8000796e:	0000                	unimp
80007970:	6572                	flw	fa0,28(sp)
80007972:	7574                	flw	fa3,108(a0)
80007974:	6e72                	flw	ft8,28(sp)
80007976:	6e69                	lui	t3,0x1a
80007978:	72652067          	0x72652067
8000797c:	6f72                	flw	ft10,28(sp)
8000797e:	0a31                	addi	s4,s4,12
80007980:	0000                	unimp
80007982:	0000                	unimp
80007984:	4544                	lw	s1,12(a0)
80007986:	2055                	jal	80007a2a <_write_r+0x40e>
80007988:	5552                	lw	a0,52(sp)
8000798a:	4d49                	li	s10,18
8000798c:	4e20                	lw	s0,88(a2)
8000798e:	5041204f          	fnmadd.s	ft0,ft2,ft4,fa0,rdn
80007992:	5f49                	li	t5,-14
80007994:	46746547          	fmsub.q	fa0,fs0,ft7,fs0,unknown
80007998:	6572                	flw	fa0,28(sp)
8000799a:	5465                	li	s0,-7
8000799c:	7361                	lui	t1,0xffff8
8000799e:	6f6c536b          	0x6f6c536b
800079a2:	2874                	fld	fa3,208(s0)
800079a4:	0a29                	addi	s4,s4,10
800079a6:	0000                	unimp
800079a8:	20746f47          	fmsub.s	ft10,fs0,ft7,ft4,unknown
800079ac:	746f6c73          	csrrsi	s8,0x746,30
800079b0:	203a                	fld	ft0,392(sp)
800079b2:	0000                	unimp
800079b4:	6154                	flw	fa3,4(a0)
800079b6:	74206b73          	csrrsi	s6,0x742,0
800079ba:	6c61746f          	jal	s0,8001f080 <__global_pointer$+0x168a0>
800079be:	7320                	flw	fs0,96(a4)
800079c0:	7a69                	lui	s4,0xffffa
800079c2:	2065                	jal	80007a6a <_write_r+0x44e>
800079c4:	7428                	flw	fa0,104(s0)
800079c6:	7478                	flw	fa4,108(s0)
800079c8:	7373622b          	0x7373622b
800079cc:	3a29                	jal	800072e6 <API_NI_Handler+0x7ee>
800079ce:	0020                	addi	s0,sp,8
800079d0:	6154                	flw	fa3,4(a0)
800079d2:	61206b73          	csrrsi	s6,0x612,0
800079d6:	6464                	flw	fs1,76(s0)
800079d8:	3a72                	fld	fs4,312(sp)
800079da:	0020                	addi	s0,sp,8
800079dc:	6572                	flw	fa0,28(sp)
800079de:	7574                	flw	fa3,108(a0)
800079e0:	6e72                	flw	ft8,28(sp)
800079e2:	6e69                	lui	t3,0x1a
800079e4:	72652067          	0x72652067
800079e8:	6f72                	flw	ft10,28(sp)
800079ea:	0a32                	slli	s4,s4,0xc
800079ec:	0000                	unimp
800079ee:	0000                	unimp
800079f0:	614c                	flw	fa1,4(a0)
800079f2:	6154                	flw	fa3,4(a0)
800079f4:	00006b73          	csrrsi	s6,ustatus,0
800079f8:	5245                	li	tp,-15
800079fa:	4f52                	lw	t5,20(sp)
800079fc:	2052                	fld	ft0,272(sp)
800079fe:	202d                	jal	80007a28 <_write_r+0x40c>
80007a00:	5041                	c.li	zero,-16
80007a02:	5f49                	li	t5,-14
80007a04:	6154                	flw	fa3,4(a0)
80007a06:	74536b73          	csrrsi	s6,0x745,6
80007a0a:	7261                	lui	tp,0xffff8
80007a0c:	2174                	fld	fa3,192(a0)
80007a0e:	2121                	jal	80007e16 <loadStoreDyn+0x32e>
80007a10:	000a                	c.slli	zero,0x2
80007a12:	0000                	unimp
80007a14:	7061                	c.lui	zero,0xffff8
80007a16:	3a70                	fld	fa2,240(a2)
80007a18:	0020                	addi	s0,sp,8
80007a1a:	0000                	unimp
80007a1c:	6946                	flw	fs2,80(sp)
80007a1e:	696e                	flw	fs2,216(sp)
80007a20:	6e696873          	csrrsi	a6,0x6e6,18
80007a24:	61742067          	0x61742067
80007a28:	003a6b73          	csrrsi	s6,fcsr,20
80007a2c:	6564                	flw	fs1,76(a0)
80007a2e:	656c                	flw	fa1,76(a0)
80007a30:	6574                	flw	fa3,76(a0)
80007a32:	2064                	fld	fs1,192(s0)
80007a34:	68746977          	0x68746977
80007a38:	7320                	flw	fs0,96(a4)
80007a3a:	6375                	lui	t1,0x1d
80007a3c:	73736573          	csrrsi	a0,0x737,6
80007a40:	2021                	jal	80007a48 <_write_r+0x42c>
80007a42:	7246                	flw	ft4,112(sp)
80007a44:	61206d6f          	jal	s10,8000e056 <__global_pointer$+0x5876>
80007a48:	7070                	flw	fa2,100(s0)
80007a4a:	696c                	flw	fa1,84(a0)
80007a4c:	69746163          	bltu	s0,s7,800080ce <impure_data+0x4e>
80007a50:	00206e6f          	jal	t3,8000da52 <__global_pointer$+0x5272>
80007a54:	6154                	flw	fa3,4(a0)
80007a56:	00206b73          	csrrsi	s6,frm,0
80007a5a:	0000                	unimp
80007a5c:	735d                	lui	t1,0xffff7
80007a5e:	6174                	flw	fa3,68(a0)
80007a60:	7574                	flw	fa3,108(a0)
80007a62:	00203a73          	csrrc	s4,frm,zero
80007a66:	0000                	unimp
80007a68:	6154                	flw	fa3,4(a0)
80007a6a:	694c6b73          	csrrsi	s6,0x694,24
80007a6e:	005b7473          	csrrci	s0,utvec,22
80007a72:	0000                	unimp
80007a74:	6154                	flw	fa3,4(a0)
80007a76:	694c6b73          	csrrsi	s6,0x694,24
80007a7a:	695b7473          	csrrci	s0,0x695,22
80007a7e:	2e5d                	jal	80007e34 <loadStoreDyn+0x34c>
80007a80:	74617473          	csrrci	s0,0x746,2
80007a84:	7375                	lui	t1,0xffffd
80007a86:	0020                	addi	s0,sp,8
80007a88:	6552                	flw	fa0,20(sp)
80007a8a:	7574                	flw	fa3,108(a0)
80007a8c:	6e72                	flw	ft8,28(sp)
80007a8e:	6e69                	lui	t3,0x1a
80007a90:	65622067          	0x65622067
80007a94:	73756163          	bltu	a0,s7,800081b6 <__sbss_end+0x66>
80007a98:	2065                	jal	80007b40 <loadStoreDyn+0x58>
80007a9a:	203a666f          	jal	a2,800ae49c <__stack_top+0x6bc9c>
80007a9e:	0000                	unimp
80007aa0:	3a69                	jal	8000743a <main+0x22>
80007aa2:	0020                	addi	s0,sp,8
80007aa4:	74617473          	csrrci	s0,0x746,2
80007aa8:	7375                	lui	t1,0xffffd
80007aaa:	203a                	fld	ft0,392(sp)
80007aac:	0000                	unimp
80007aae:	0000                	unimp
80007ab0:	6f68                	flw	fa0,92(a4)
80007ab2:	646c                	flw	fa1,76(s0)
80007ab4:	7265                	lui	tp,0xffff9
80007ab6:	203a                	fld	ft0,392(sp)
80007ab8:	0000                	unimp
80007aba:	0000                	unimp
80007abc:	2d2d                	jal	800080f6 <xStart+0x2>
80007abe:	0a2d                	addi	s4,s4,11
80007ac0:	0000                	unimp
	...

80007ac4 <readEnergyMemory>:
80007ac4:	18cf 0000 1e74 0000 24b4 0000               ....t....$..

80007ad0 <writeEnergyMemory>:
80007ad0:	228b 0000 2b23 0000 34b9 0000               ."..#+...4..

80007adc <arithDyn>:
80007adc:	035b 0000 0449 0000 055a 0000               [...I...Z...

80007ae8 <loadStoreDyn>:
80007ae8:	0622 0000 07d1 0000 09bd 0000 2d2d 2d2d     "...........----
80007af8:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
80007b08:	2d2d 2d2d 2d2d 000a 6f4c 6461 3a73 0909     ------..Loads:..
80007b18:	0000 0000 7453 726f 7365 093a 0009 0000     ....Stores:.....
80007b28:	744f 6568 7372 093a 0009 0000 6f74 6174     Others:.....tota
80007b38:	3a6c 0000 6f54 6174 456c 656e 6772 3a79     l:..TotalEnergy:
80007b48:	0020 0000 000a 0000 7266 6d6f 203a 0000      .......from: ..
80007b58:	736d 2067 6f70 6e69 6574 3a72 0020 0000     msg pointer: ...
80007b68:	694d 686e 2061 6174 6b73 4920 3a44 0020     Minha task ID: .
80007b78:	6553 646e 6e69 5167 6575 6575 665f 6f72     SendingQueue_fro
80007b88:	746e 203a 0000 0000 5041 5f49 7254 3279     nt: ....API_Try2
80007b98:	6553 646e 7320 6375 6563 7373 0a21 0000     Send success!...
80007ba8:	5041 5f49 7254 3279 6553 646e 6620 6961     API_Try2Send fai
80007bb8:	656c 2064 202d 6d65 7470 2079 6553 646e     led - empty Send
80007bc8:	7551 7565 2165 000a 5041 5f49 7254 3279     Queue!..API_Try2
80007bd8:	6553 646e 6620 6961 656c 2064 202d 494e     Send failed - NI
80007be8:	545f 2058 636f 7563 6970 6465 0a21 0000     _TX occupied!...
80007bf8:	6174 6b73 6c53 746f 203a 0000 6920 206e     taskSlot: .. in 
80007c08:	6874 2065 4950 4550 7320 6f6c 2074 0000     the PIPE slot ..
80007c18:	6441 6964 676e 6120 6d20 6773 7420 206f     Adding a msg to 
80007c28:	6174 6b73 0020 0000 7266 6d6f 6120 7070     task ...from app
80007c38:	203a 0000 3e3e 3e3e 413e 6863 6965 6120     : ..>>>>>Achei a
80007c48:	7571 2069 6f6e 7020 6e65 6964 676e 0a21     qui no pending!.
80007c58:	0000 0000 7345 6570 6172 646e 206f 654d     ....Esperando Me
80007c68:	736e 6761 6d65 0a21 0000 0000 6520 7073     nsagem!..... esp
80007c78:	7265 6e61 6f64 6d20 6e65 6173 6567 206d     erando mensagem 
80007c88:	0000 0000 6174 6b73 6c73 746f 0020 0000     ....taskslot ...
80007c98:	654d 736e 6761 6d65 5220 6365 6265 6469     Mensagem Recebid
80007ca8:	2161 000a 5854 6920 746e 7265 7572 7470     a!..TX interrupt
80007cb8:	6f69 206e 6163 6374 6568 0a64 0000 0000     ion catched.....
80007cc8:	5852 6920 746e 7265 7572 7470 6f69 206e     RX interruption 
80007cd8:	6163 6374 6568 0a64 0000 0000 4154 4b53     catched.....TASK
80007ce8:	415f 4c4c 434f 5441 4f49 5f4e 4553 444e     _ALLOCATION_SEND
80007cf8:	000a 0000 6154 6b73 7320 6f6c 3a74 0020     ....Task slot: .
80007d08:	6154 6b73 7320 6f6c 2074 6154 6b73 6441     Task slot TaskAd
80007d18:	7264 203a 0000 0000 7266 6d6f 6120 7070     dr: ....from app
80007d28:	696c 6163 6974 6e6f 0020 0000 4946 494e     lication ...FINI
80007d38:	4853 4445 203a 6154 6b73 0020 4154 4b53     SHED: Task .TASK
80007d48:	415f 4c4c 434f 5441 4f49 5f4e 4946 494e     _ALLOCATION_FINI
80007d58:	4853 4445 000a 0000 4154 4b53 415f 4c4c     SHED....TASK_ALL
80007d68:	434f 5441 4f49 5f4e 5553 4343 5345 0a53     OCATION_SUCCESS.
80007d78:	0000 0000 6843 6765 756f 7520 206d 4154     ....Chegou um TA
80007d88:	4b53 535f 4154 5452 0a21 0000 6843 6765     SK_START!...Cheg
80007d98:	756f 7520 206d 4154 4b53 525f 4e55 0a21     ou um TASK_RUN!.
80007da8:	0000 0000 6620 6f72 206d 7061 2070 0000     .... from app ..
80007db8:	7453 7261 6974 676e 5420 7361 206b 0000     Starting Task ..
80007dc8:	6174 6b73 6c53 746f 7220 6e75 203a 0000     taskSlot run: ..
80007dd8:	6154 6b73 203a 0000 6843 6765 756f 7520     Task: ..Chegou u
80007de8:	206d 656d 7373 6761 2065 6572 7571 7365     m message reques
80007df8:	2174 4120 7070 203a 0000 0000 654d 736e     t! App: ....Mens
80007e08:	6761 6d65 6e20 a3c3 206f 6e65 6f63 746e     agem n..o encont
80007e18:	6172 6164 202c 6461 6369 6f69 616e 646e     rada, adicionand
80007e28:	206f 6f61 5020 6e65 6964 676e 6552 2171     o ao PendingReq!
80007e38:	000a 0000 654d 736e 6761 6d65 6520 636e     ....Mensagem enc
80007e48:	6e6f 7274 6461 2061 6f6e 7020 7069 2165     ontrada no pipe!
80007e58:	000a 0000 6554 206d 6d75 2061 656d 736e     ....Tem uma mens
80007e68:	6761 6d65 6320 6568 6167 646e 2e6f 2e2e     agem chegando...
80007e78:	000a 0000 6552 6563 6562 646e 206f 6170     ....Recebendo pa
80007e88:	6f63 6574 6420 2065 6574 706d 7265 7461     cote de temperat
80007e98:	7275 0061 6574 706d 203a 0000 6570 0000     ura.temp: ..pe..
80007ea8:	5245 4f52 2052 7845 6574 6e72 6c61 325f     ERROR External_2
80007eb8:	495f 5152 6148 646e 656c 2072 6e55 6e6b     _IRQHandler Unkn
80007ec8:	776f 2d6e 6553 7672 6369 2065 0000 0000     own-Service ....
80007ed8:	0a0d 7246 6565 5452 534f 4520 6178 706d     ..FreeRTOS Examp
80007ee8:	656c 0a0d 0000 0000 200a 6843 6f72 6f6e     le....... Chrono
80007ef8:	2073 6c70 7461 6f66 6d72 6920 696e 6974     s platform initi
80007f08:	6c61 7a69 6e69 2e67 2e2e 0a20 0000 0000     alizing... .....
80007f18:	200a 6854 7369 7420 7265 696d 616e 206c     . This terminal 
80007f28:	6562 6f6c 676e 2073 6f74 7420 6568 6120     belongs to the a
80007f38:	6464 6572 7373 203a 0000 0000 000a 0000     ddress: ........
80007f48:	200a 6854 7369 7020 6f72 6563 7373 726f     . This processor
80007f58:	6920 2073 6874 2065 6c47 626f 6c61 4d20      is the Global M
80007f68:	7361 6574 3a72 0a20 0000 0000 6c47 626f     aster: .....Glob
80007f78:	6c61 614d 7473 7265 0000 0000 200a 6854     alMaster..... Th
80007f88:	7369 7020 6f72 6563 7373 726f 6920 2073     is processor is 
80007f98:	2061 6c53 7661 3a65 0a20 0000 6c47 626f     a Slave: ...Glob
80007fa8:	6c61 614d 7473 7265 6341 6974 6576 0000     alMasterActive..
80007fb8:	4720 6f6c 6162 4d6c 7361 6574 5272 756f      GlobalMasterRou
80007fc8:	6974 656e 2e2e 0d2e 000a 0000 0000 0000     tine............
	...
