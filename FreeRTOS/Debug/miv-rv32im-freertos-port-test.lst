
miv-rv32im-freertos-port-test.elf:     file format elf32-littleriscv
miv-rv32im-freertos-port-test.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000000

Program Header:
    LOAD off    0x00001000 vaddr 0x80000000 paddr 0x80000000 align 2**12
         filesz 0x00006560 memsz 0x00040a50 flags rwx

Sections:
Idx Name           Size      VMA       LMA       File off  Algn  Flags
  0 .text          00006460  80000000  80000000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sdata         00000020  80006460  80006460  00007460  2**4  CONTENTS, ALLOC, LOAD, DATA
  2 .data          000000e0  80006480  80006480  00007480  2**4  CONTENTS, ALLOC, LOAD, DATA
  3 .sbss          00000070  80006560  80006560  00007560  2**4  ALLOC
  4 .bss           0001a480  800065d0  800065d0  00007560  2**4  ALLOC
  5 .heap          00010000  80020a50  80020a50  00007560  2**4  ALLOC
  6 .stack         00010000  80030a50  80030a50  00007560  2**4  ALLOC
  7 .debug_line    0000a902  00000000  00000000  00007560  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_info    0000f350  00000000  00000000  00011e62  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev  00002a7e  00000000  00000000  000211b2  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000910  00000000  00000000  00023c30  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_str     00012b1d  00000000  00000000  00024540  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges  000007e0  00000000  00000000  0003705d  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro   000058c2  00000000  00000000  0003783d  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment       00000039  00000000  00000000  0003d0ff  2**0  CONTENTS, READONLY
 15 .debug_frame   0000215c  00000000  00000000  0003d138  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
80000000 l    d  .text	00000000 .text
80006460 l    d  .sdata	00000000 .sdata
80006480 l    d  .data	00000000 .data
80006560 l    d  .sbss	00000000 .sbss
800065d0 l    d  .bss	00000000 .bss
80020a50 l    d  .heap	00000000 .heap
80030a50 l    d  .stack	00000000 .stack
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./riscv_hal/entry.o
8000000c l       .text	00000000 handle_reset
80000004 l       .text	00000000 nmi_vector
80000008 l       .text	00000000 trap_vector
80000030 l       .text	00000000 trap_entry
00000000 l    df *ABS*	00000000 init.c
80000160 l     F .text	00000050 zero_section
00000000 l    df *ABS*	00000000 riscv_hal.c
80000238 l     F .text	000000b8 PLIC_DisableIRQ
800002f0 l     F .text	00000044 PLIC_ClaimIRQ
80000334 l     F .text	0000004c PLIC_CompleteIRQ
80006560 l     O .sbss	00000008 g_systick_increment
00000000 l    df *ABS*	00000000 riscv_hal_stubs.c
00000000 l    df *ABS*	00000000 syscall.c
80006568 l     O .sbss	00000008 g_stdio_uart
80006570 l     O .sbss	00000004 g_stdio_uart_init_done
80000de8 l     F .text	00000030 stub
00000000 l    df *ABS*	00000000 core_uart_apb.c
00000000 l    df *ABS*	00000000 heap_2.c
800065d0 l     O .bss	00019000 ucHeap
80006574 l     O .sbss	00000008 xStart
8000657c l     O .sbss	00000008 xEnd
80006460 l     O .sdata	00000004 xFreeBytesRemaining
80006584 l     O .sbss	00000004 xHeapHasBeenInitialised.2777
800014fc l     F .text	00000074 prvHeapInit
00000000 l    df *ABS*	00000000 port.c
80001570 l     F .text	0000004c raise_soft_interrupt
80006464 l     O .sdata	00000004 uxCriticalNesting
80006468 l     O .sdata	00000004 mtime
8000646c l     O .sdata	00000004 mtimecmp
80001630 l     F .text	000000cc prvSetNextTimerInterrupt
800017c8 l     F .text	0000002c prvTaskExitError
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 tasks.c
8001f5d0 l     O .bss	00000064 pxReadyTasksLists
8001f634 l     O .bss	00000014 xDelayedTaskList1
8001f648 l     O .bss	00000014 xDelayedTaskList2
80006590 l     O .sbss	00000004 pxDelayedTaskList
80006594 l     O .sbss	00000004 pxOverflowDelayedTaskList
8001f65c l     O .bss	00000014 xPendingReadyList
8001f670 l     O .bss	00000014 xTasksWaitingTermination
80006598 l     O .sbss	00000004 uxTasksDeleted
8001f684 l     O .bss	00000014 xSuspendedTaskList
8000659c l     O .sbss	00000004 uxCurrentNumberOfTasks
800065a0 l     O .sbss	00000004 xTickCount
800065a4 l     O .sbss	00000004 uxTopReadyPriority
800065a8 l     O .sbss	00000004 xSchedulerRunning
800065ac l     O .sbss	00000004 uxPendedTicks
800065b0 l     O .sbss	00000004 xYieldPending
800065b4 l     O .sbss	00000004 xNumOfOverflows
800065b8 l     O .sbss	00000004 uxTaskNumber
800065bc l     O .sbss	00000004 xNextTaskUnblockTime
800065c0 l     O .sbss	00000004 uxSchedulerSuspended
80002a4c l     F .text	000000c0 prvAllocateTCBAndStack
8000272c l     F .text	00000138 prvInitialiseTCBVariables
80002864 l     F .text	000000c0 prvInitialiseTaskLists
80002b4c l     F .text	00000060 prvResetNextTaskUnblockTime
800029c4 l     F .text	00000088 prvAddCurrentTaskToDelayedList
800026f8 l     F .text	00000034 prvIdleTask
80002924 l     F .text	000000a0 prvCheckTasksWaitingTermination
80002b0c l     F .text	00000040 prvDeleteTCB
00000000 l    df *ABS*	00000000 chronos.c
80002bd4 l     F .text	000000b4 PLIC_EnableIRQ
80002c88 l     F .text	0000003c PLIC_SetPriority
00000000 l    df *ABS*	00000000 globalMaster.c
00000000 l    df *ABS*	00000000 applications.c
00000000 l    df *ABS*	00000000 packet.c
00000000 l    df *ABS*	00000000 main.c
80005c3c l     F .text	000000d0 PLIC_init
80005f40 l     F .text	00000090 GlobalManagerTask
80005e88 l     F .text	000000b8 vUartAliveTask
00000000 l    df *ABS*	00000000 syswrite.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 impure.c
80006500 l     O .data	00000060 impure_data
800015f0 g     F .text	00000040 vPortExitCritical
00010000 g       *ABS*	00000000 STACK_SIZE
8001f698 g     O .bss	00000004 SendingSlot
800009c0  w    F .text	00000020 External_11_IRQHandler
80006c60 g       .sdata	00000000 __global_pointer$
80002e48 g     F .text	00000048 printsv
80006480 g       *ABS*	00000000 __data_load
80001888 g     F .text	000000cc SysTick_Handler
80000900  w    F .text	00000020 External_5_IRQHandler
80005878 g     F .text	000000a8 API_PipeInitialization
80004518 g     F .text	00000118 API_TilesReset
80000fc8 g       .text	00000000 HW_get_8bit_reg_field
800034b8 g     F .text	00000080 reverse
800040d4 g     F .text	00000078 API_AddPendingReq
80020114 g     O .bss	00000024 priorityMatrix
80005ba8 g     F .text	00000094 API_checkPipe
8000658c g     O .sbss	00000004 pxCurrentTCB
80006560 g       .sbss	00000000 __sbss_start
80002cc4 g     F .text	000000d8 Chronos_init
80020110 g     O .bss	00000004 errno
8001f69c g     O .bss	000000f0 ServicePipe
80000f00 g       .text	00000000 HW_set_32bit_reg
80000ae0  w    F .text	00000020 External_20_IRQHandler
80001954 g     F .text	00000044 xPortStartScheduler
80000380 g     F .text	00000024 __enable_irq
80001e54 g     F .text	0000021c xTaskGenericCreate
80005a6c g     F .text	000000a0 API_GetServiceSlot
80006460 g       .sdata	00000000 __sdata_start
80001430 g     F .text	000000cc vPortFree
8001f78c g     O .bss	00000004 messageID
80003718 g     F .text	00000088 API_PushSendQueue
80020a3c g     O .bss	00000008 g_uart
80000fa0 g       .text	00000000 HW_set_8bit_reg_field
80000ba0  w    F .text	00000020 External_26_IRQHandler
80000790 g     F .text	00000110 handle_trap
80004448 g     F .text	00000070 API_GetApplicationFreeSlot
80001b28 g     F .text	00000088 vListInsertEnd
00080000 g       *ABS*	00000000 RAM_SIZE
800009a0  w    F .text	00000020 External_10_IRQHandler
80020138 g     O .bss	00000780 applications
80002e0c g     F .text	0000003c printi
80001b00 g     F .text	00000028 vListInitialiseItem
80000c20  w    F .text	00000020 External_30_IRQHandler
80000a80  w    F .text	00000020 External_17_IRQHandler
80030a50 g       .heap	00000000 _heap_end
80000d98 g     F .text	00000050 _isatty
80020a50 g       .bss	00000000 __bss_end
800004ec g     F .text	000002a4 handle_syscall
80004264 g     F .text	000001e4 API_AddApplication
80001254 g     F .text	000001dc pvPortMalloc
80005920 g     F .text	0000014c API_GetMessageSlot
800001b0 g     F .text	0000006c _init
80001a9c g     F .text	00000064 vListInitialise
80000f90 g       .text	00000000 HW_set_8bit_reg
80000f98 g       .text	00000000 HW_get_8bit_reg
800023e8 g     F .text	00000038 xTaskGetTickCount
800046d8 g     F .text	000002d8 API_AllocateTasks
800052b8 g     F .text	000000b4 API_TaskListInit
80005464 g     F .text	000001c0 API_TaskAllocation
800053f4 g     F .text	00000070 API_GetFreeTaskSlot
800065d0 g       .sbss	00000000 __sbss_end
800056f4 g     F .text	000000bc API_TaskStart
80000f10 g       .text	00000000 HW_set_32bit_reg_field
80005fd0 g     F .text	0000001c write
80004eb8 g     F .text	00000134 API_TaskAllocated
80005e58 g     F .text	00000014 vApplicationMallocFailedHook
80000b80  w    F .text	00000020 External_25_IRQHandler
80040a50 g       .stack	00000000 __stack_top
80000c00  w    F .text	00000020 External_29_IRQHandler
8001f790 g     O .bss	00000034 incommingPacket
80002070 g     F .text	000000dc vTaskDelete
800011a4 g     F .text	000000b0 UART_polled_tx_string
80000c60 g     F .text	000000e8 write_hex
80000a00  w    F .text	00000020 External_13_IRQHandler
80003074 g     F .text	000003f8 External_2_IRQHandler
00010000 g       *ABS*	00000000 HEAP_SIZE
800009e0  w    F .text	00000020 External_12_IRQHandler
800036d8 g     F .text	00000040 makeAddress
800010f0 g     F .text	000000b4 UART_send
80002f44 g     F .text	0000004c SendRaw
80000000 g       .text	00000000 _start
80002260 g     F .text	00000028 vTaskSuspendAll
800037a0 g     F .text	0000008c API_PopSendQueue
800003a4 g     F .text	000000a8 handle_m_timer_interrupt
80002d9c g     F .text	00000070 prints
80001c84 g     F .text	00000098 uxListRemove
80004fec g     F .text	000002cc API_ApplicationStart
80002f90 g     F .text	00000094 NI_enable_irq
80006460 g       *ABS*	00000000 __sdata_load
80006560 g       .data	00000000 __data_end
8000260c g     F .text	000000ec vTaskSwitchContext
80000aa0  w    F .text	00000020 External_18_IRQHandler
80000f38 g       .text	00000000 HW_get_32bit_reg_field
80003538 g     F .text	000001a0 myItoa
80000b20  w    F .text	00000020 External_22_IRQHandler
80000a40  w    F .text	00000020 External_15_IRQHandler
80001a74 g     F .text	00000028 vPortYield
8000536c g     F .text	00000088 API_GetCurrentTaskSlot
80000000 g       *ABS*	00000000 RAM_START_ADDRESS
800065d0 g       .bss	00000000 __bss_start
800208b8 g     O .bss	000000f0 TaskList
80000a60  w    F .text	00000020 External_16_IRQHandler
80001d1c g     F .text	000000e8 memset
80005d0c g     F .text	0000014c main
8000346c g     F .text	0000004c mySwap
80001bb0 g     F .text	000000d4 vListInsert
80000be0  w    F .text	00000020 External_28_IRQHandler
80004004 g     F .text	000000d0 API_CheckMessagePipe
800044b8 g     F .text	00000060 API_ApplicationsReset
80002bac g     F .text	00000028 xTaskGetCurrentTaskHandle
80000f50 g       .text	00000000 HW_get_16bit_reg
80006480 g       .sdata	00000000 __sdata_end
800057b0 g     F .text	000000c8 API_FinishRunningTask
80030a50 g       .heap	00000000 __heap_end
80000a20  w    F .text	00000020 External_14_IRQHandler
80004afc g     F .text	00000114 API_GetTaskSlotFromTile
800049b0 g     F .text	0000014c getNextPriorityAddr
80004d1c g     F .text	0000019c API_RepositoryAllocation
8000021c g     F .text	0000001c _fini
80002288 g     F .text	00000160 xTaskResumeAll
800021d0 g     F .text	00000090 vTaskStartScheduler
80003a8c g     F .text	000002bc API_SendMessage
80006480 g     O .data	00000080 ext_irq_handler_table
8001f7c4 g     O .bss	00000020 SendingQueue
80005fec g     F .text	00000054 _write_r
80000f58 g       .text	00000000 HW_set_16bit_reg_field
80003924 g     F .text	00000168 API_AckTaskAllocation
8001f7e4 g     O .bss	00000004 SendingQueue_tail
80006470 g     O .sdata	00000004 _impure_ptr
80030a50 g       .stack	00000000 __stack_bottom
80001998 g     F .text	000000dc Software_IRQHandler
80005b0c g     F .text	0000009c API_ClearPipeSlot
80000bc0  w    F .text	00000020 External_27_IRQHandler
80000960  w    F .text	00000020 External_8_IRQHandler
80000980  w    F .text	00000020 External_9_IRQHandler
80020a50 g       .heap	00000000 __heap_start
800008a0  w    F .text	00000020 Invalid_IRQHandler
8000382c g     F .text	000000f8 API_Try2Send
800008c0  w    F .text	00000020 External_3_IRQHandler
80002420 g     F .text	000001ec xTaskIncrementTick
80005624 g     F .text	000000d0 API_GetTaskSlot
80006588 g     O .sbss	00000004 g_startscheduler
80002f1c g     F .text	00000028 getYpos
80000ac0  w    F .text	00000020 External_19_IRQHandler
80000e18 g     F .text	000000e8 _write
80002ef0 g     F .text	0000002c getXpos
80020a50 g       .bss	00000000 _end
800016fc g     F .text	000000cc vPortSetupTimer
8001f7e8 g     O .bss	00000014 str
8001f7fc g     O .bss	00000004 SendingQueue_front
8000414c g     F .text	00000118 API_RepositoryWakeUp
80002e90 g     F .text	00000060 printsvsv
8000214c g     F .text	00000084 vTaskDelay
80000fd8 g     F .text	00000118 UART_init
80000f08 g       .text	00000000 HW_get_32bit_reg
80000d48 g     F .text	00000050 _exit
80000f48 g       .text	00000000 HW_set_16bit_reg
80003d48 g     F .text	000002bc API_SendMessageReq
80001e04 g     F .text	00000050 strlen
800017f4 g     F .text	00000094 pxPortInitialiseStack
80003024 g     F .text	00000050 External_1_IRQHandler
80000920  w    F .text	00000020 External_6_IRQHandler
80000c40  w    F .text	00000020 External_31_IRQHandler
80004c10 g     F .text	0000010c API_GetSystemTasksSlots
800015bc g     F .text	00000034 vPortEnterCritical
80006480 g       .data	00000000 __data_start
80020a44 g     O .bss	00000004 ProcessorAddr
800209a8 g     O .bss	00000004 priorityPointer
80000b00  w    F .text	00000020 External_21_IRQHandler
800209ac g     O .bss	00000090 Tiles
800004bc g     F .text	00000030 handle_m_soft_interrupt
8000044c g     F .text	00000070 handle_m_ext_interrupt
80000f80 g       .text	00000000 HW_get_16bit_reg_field
80000b40  w    F .text	00000020 External_23_IRQHandler
80000b60  w    F .text	00000020 External_24_IRQHandler
800008e0  w    F .text	00000020 External_4_IRQHandler
8001f800 g     O .bss	00000910 MessagePipe
80004630 g     F .text	000000a8 GeneratePatternMatrix
80000940  w    F .text	00000020 External_7_IRQHandler
80005e6c g     F .text	0000001c vApplicationIdleHook



Disassembly of section .text:

80000000 <_start>:
_start():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:30

  .section      .text.entry
  .globl _start

_start:
  j handle_reset
80000000:	00c0006f          	j	8000000c <handle_reset>

80000004 <nmi_vector>:
nmi_vector():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:33

nmi_vector:
  j nmi_vector
80000004:	0000006f          	j	80000004 <nmi_vector>

80000008 <trap_vector>:
trap_vector():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:36

trap_vector:
  j trap_entry
80000008:	0280006f          	j	80000030 <trap_entry>

8000000c <handle_reset>:
handle_reset():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:39

handle_reset:
  la t0, trap_entry
8000000c:	00000297          	auipc	t0,0x0
80000010:	02428293          	addi	t0,t0,36 # 80000030 <trap_entry>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:40
  csrw mtvec, t0
80000014:	30529073          	csrw	mtvec,t0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:41
  csrwi mstatus, 0
80000018:	30005073          	csrwi	mstatus,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:42
  csrwi mie, 0
8000001c:	30405073          	csrwi	mie,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:60
  lui t0, 0x0
  fscsr t0
#endif

  # initialize global pointer
  la gp, __global_pointer$
80000020:	00018193          	mv	gp,gp
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:63

  # initialize stack pointer
  la sp, __stack_top
80000024:	00041117          	auipc	sp,0x41
80000028:	a2c10113          	addi	sp,sp,-1492 # 80040a50 <__stack_top>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:66

  # perform the rest of initialization in C
  j _init
8000002c:	1840006f          	j	800001b0 <_init>

80000030 <trap_entry>:
trap_entry():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:70


trap_entry:
  addi sp, sp, -32*REGBYTES
80000030:	f8010113          	addi	sp,sp,-128
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:72

  SREG x1, 0 * REGBYTES(sp)
80000034:	00112023          	sw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:73
  SREG x2, 1 * REGBYTES(sp)
80000038:	00212223          	sw	sp,4(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:74
  SREG x3, 2 * REGBYTES(sp)
8000003c:	00312423          	sw	gp,8(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:75
  SREG x4, 3 * REGBYTES(sp)
80000040:	00412623          	sw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:76
  SREG x5, 4 * REGBYTES(sp)
80000044:	00512823          	sw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:77
  SREG x6, 5 * REGBYTES(sp)
80000048:	00612a23          	sw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:78
  SREG x7, 6 * REGBYTES(sp)
8000004c:	00712c23          	sw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:79
  SREG x8, 7 * REGBYTES(sp)
80000050:	00812e23          	sw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:80
  SREG x9, 8 * REGBYTES(sp)
80000054:	02912023          	sw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:81
  SREG x10, 9 * REGBYTES(sp)
80000058:	02a12223          	sw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:82
  SREG x11, 10 * REGBYTES(sp)
8000005c:	02b12423          	sw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:83
  SREG x12, 11 * REGBYTES(sp)
80000060:	02c12623          	sw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:84
  SREG x13, 12 * REGBYTES(sp)
80000064:	02d12823          	sw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:85
  SREG x14, 13 * REGBYTES(sp)
80000068:	02e12a23          	sw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:86
  SREG x15, 14 * REGBYTES(sp)
8000006c:	02f12c23          	sw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:87
  SREG x16, 15 * REGBYTES(sp)
80000070:	03012e23          	sw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:88
  SREG x17, 16 * REGBYTES(sp)
80000074:	05112023          	sw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:89
  SREG x18, 17 * REGBYTES(sp)
80000078:	05212223          	sw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:90
  SREG x19, 18 * REGBYTES(sp)
8000007c:	05312423          	sw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:91
  SREG x20, 19 * REGBYTES(sp)
80000080:	05412623          	sw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:92
  SREG x21, 20 * REGBYTES(sp)
80000084:	05512823          	sw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:93
  SREG x22, 21 * REGBYTES(sp)
80000088:	05612a23          	sw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:94
  SREG x23, 22 * REGBYTES(sp)
8000008c:	05712c23          	sw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:95
  SREG x24, 23 * REGBYTES(sp)
80000090:	05812e23          	sw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:96
  SREG x25, 24 * REGBYTES(sp)
80000094:	07912023          	sw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:97
  SREG x26, 25 * REGBYTES(sp)
80000098:	07a12223          	sw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:98
  SREG x27, 26 * REGBYTES(sp)
8000009c:	07b12423          	sw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:99
  SREG x28, 27 * REGBYTES(sp)
800000a0:	07c12623          	sw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:100
  SREG x29, 28 * REGBYTES(sp)
800000a4:	07d12823          	sw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:101
  SREG x30, 29 * REGBYTES(sp)
800000a8:	07e12a23          	sw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:102
  SREG x31, 30 * REGBYTES(sp)
800000ac:	07f12c23          	sw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:105


  csrr t0, mepc
800000b0:	341022f3          	csrr	t0,mepc
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:106
  SREG t0, 31 * REGBYTES(sp)
800000b4:	06512e23          	sw	t0,124(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:108

  csrr a0, mcause
800000b8:	34202573          	csrr	a0,mcause
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:109
  csrr a1, mepc
800000bc:	341025f3          	csrr	a1,mepc
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:110
  mv a2, sp
800000c0:	00010613          	mv	a2,sp
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:111
  jal handle_trap
800000c4:	6cc000ef          	jal	ra,80000790 <handle_trap>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:112
  csrw mepc, a0
800000c8:	34151073          	csrw	mepc,a0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:115

  # Remain in M-mode after mret
  li t0, MSTATUS_MPP
800000cc:	000022b7          	lui	t0,0x2
800000d0:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:116
  csrs mstatus, t0
800000d4:	3002a073          	csrs	mstatus,t0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:118

  LREG x1, 0 * REGBYTES(sp)
800000d8:	00012083          	lw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:119
  LREG x2, 1 * REGBYTES(sp)
800000dc:	00412103          	lw	sp,4(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:120
  LREG x3, 2 * REGBYTES(sp)
800000e0:	00812183          	lw	gp,8(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:121
  LREG x4, 3 * REGBYTES(sp)
800000e4:	00c12203          	lw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:122
  LREG x5, 4 * REGBYTES(sp)
800000e8:	01012283          	lw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:123
  LREG x6, 5 * REGBYTES(sp)
800000ec:	01412303          	lw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:124
  LREG x7, 6 * REGBYTES(sp)
800000f0:	01812383          	lw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:125
  LREG x8, 7 * REGBYTES(sp)
800000f4:	01c12403          	lw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:126
  LREG x9, 8 * REGBYTES(sp)
800000f8:	02012483          	lw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:127
  LREG x10, 9 * REGBYTES(sp)
800000fc:	02412503          	lw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:128
  LREG x11, 10 * REGBYTES(sp)
80000100:	02812583          	lw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:129
  LREG x12, 11 * REGBYTES(sp)
80000104:	02c12603          	lw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:130
  LREG x13, 12 * REGBYTES(sp)
80000108:	03012683          	lw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:131
  LREG x14, 13 * REGBYTES(sp)
8000010c:	03412703          	lw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:132
  LREG x15, 14 * REGBYTES(sp)
80000110:	03812783          	lw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:133
  LREG x16, 15 * REGBYTES(sp)
80000114:	03c12803          	lw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:134
  LREG x17, 16 * REGBYTES(sp)
80000118:	04012883          	lw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:135
  LREG x18, 17 * REGBYTES(sp)
8000011c:	04412903          	lw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:136
  LREG x19, 18 * REGBYTES(sp)
80000120:	04812983          	lw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:137
  LREG x20, 19 * REGBYTES(sp)
80000124:	04c12a03          	lw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:138
  LREG x21, 20 * REGBYTES(sp)
80000128:	05012a83          	lw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:139
  LREG x22, 21 * REGBYTES(sp)
8000012c:	05412b03          	lw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:140
  LREG x23, 22 * REGBYTES(sp)
80000130:	05812b83          	lw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:141
  LREG x24, 23 * REGBYTES(sp)
80000134:	05c12c03          	lw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:142
  LREG x25, 24 * REGBYTES(sp)
80000138:	06012c83          	lw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:143
  LREG x26, 25 * REGBYTES(sp)
8000013c:	06412d03          	lw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:144
  LREG x27, 26 * REGBYTES(sp)
80000140:	06812d83          	lw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:145
  LREG x28, 27 * REGBYTES(sp)
80000144:	06c12e03          	lw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:146
  LREG x29, 28 * REGBYTES(sp)
80000148:	07012e83          	lw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:147
  LREG x30, 29 * REGBYTES(sp)
8000014c:	07412f03          	lw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:148
  LREG x31, 30 * REGBYTES(sp)
80000150:	07812f83          	lw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:150

  addi sp, sp, 32*REGBYTES
80000154:	08010113          	addi	sp,sp,128
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:151
  mret
80000158:	30200073          	mret
8000015c:	0000                	unimp
	...

80000160 <zero_section>:
zero_section():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:47
        ++p_vma;
    }
}

static void zero_section(uint32_t * start, uint32_t * end)
{
80000160:	fd010113          	addi	sp,sp,-48
80000164:	02812623          	sw	s0,44(sp)
80000168:	03010413          	addi	s0,sp,48
8000016c:	fca42e23          	sw	a0,-36(s0)
80000170:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:48
    uint32_t * p_zero = start;
80000174:	fdc42783          	lw	a5,-36(s0)
80000178:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:50
    
    while(p_zero <= end)
8000017c:	0180006f          	j	80000194 <zero_section+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:52
    {
        *p_zero = 0;
80000180:	fec42783          	lw	a5,-20(s0)
80000184:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:53
        ++p_zero;
80000188:	fec42783          	lw	a5,-20(s0)
8000018c:	00478793          	addi	a5,a5,4
80000190:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:50
    while(p_zero <= end)
80000194:	fec42703          	lw	a4,-20(s0)
80000198:	fd842783          	lw	a5,-40(s0)
8000019c:	fee7f2e3          	bleu	a4,a5,80000180 <zero_section+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:55
    }
}
800001a0:	00000013          	nop
800001a4:	02c12403          	lw	s0,44(sp)
800001a8:	03010113          	addi	sp,sp,48
800001ac:	00008067          	ret

800001b0 <_init>:
_init():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:58

void _init(void)
{
800001b0:	fe010113          	addi	sp,sp,-32
800001b4:	00112e23          	sw	ra,28(sp)
800001b8:	00812c23          	sw	s0,24(sp)
800001bc:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:60
    extern int main(int, char**);
    const char *argv0 = "hello";
800001c0:	800067b7          	lui	a5,0x80006
800001c4:	04078793          	addi	a5,a5,64 # 80006040 <__stack_top+0xfffc55f0>
800001c8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:61
    char *argv[] = {(char *)argv0, NULL, NULL};
800001cc:	fec42783          	lw	a5,-20(s0)
800001d0:	fef42023          	sw	a5,-32(s0)
800001d4:	fe042223          	sw	zero,-28(s0)
800001d8:	fe042423          	sw	zero,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:66

// Imperas - this is loaded directly by simulator so must not be copied
//    copy_section(&__sdata_load, &__sdata_start, &__sdata_end);
//    copy_section(&__data_load, &__data_start, &__data_end);
    zero_section(&__sbss_start, &__sbss_end);
800001dc:	97018593          	addi	a1,gp,-1680 # 800065d0 <__sbss_end>
800001e0:	90018513          	addi	a0,gp,-1792 # 80006560 <__data_end>
800001e4:	f7dff0ef          	jal	ra,80000160 <zero_section>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:67
    zero_section(&__bss_start, &__bss_end);
800001e8:	800217b7          	lui	a5,0x80021
800001ec:	a5078593          	addi	a1,a5,-1456 # 80020a50 <__stack_top+0xfffe0000>
800001f0:	97018513          	addi	a0,gp,-1680 # 800065d0 <__sbss_end>
800001f4:	f6dff0ef          	jal	ra,80000160 <zero_section>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:69
    
    main(1, argv);
800001f8:	fe040793          	addi	a5,s0,-32
800001fc:	00078593          	mv	a1,a5
80000200:	00100513          	li	a0,1
80000204:	309050ef          	jal	ra,80005d0c <main>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:70
}
80000208:	00000013          	nop
8000020c:	01c12083          	lw	ra,28(sp)
80000210:	01812403          	lw	s0,24(sp)
80000214:	02010113          	addi	sp,sp,32
80000218:	00008067          	ret

8000021c <_fini>:
_fini():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:75

/* Function called after main() finishes */
void
_fini()
{
8000021c:	ff010113          	addi	sp,sp,-16
80000220:	00812623          	sw	s0,12(sp)
80000224:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:76
}
80000228:	00000013          	nop
8000022c:	00c12403          	lw	s0,12(sp)
80000230:	01010113          	addi	sp,sp,16
80000234:	00008067          	ret

80000238 <PLIC_DisableIRQ>:
PLIC_DisableIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:174
 * 	If you wish to disable the external interrupt while the interrupt handler
 * 	for that external interrupt is executing then you must use the return value
 * 	EXT_IRQ_DISABLE to return from the extern interrupt handler.
 */
static inline void PLIC_DisableIRQ(IRQn_Type IRQn)
{
80000238:	fd010113          	addi	sp,sp,-48
8000023c:	02812623          	sw	s0,44(sp)
80000240:	03010413          	addi	s0,sp,48
80000244:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:175
    unsigned long hart_id = read_csr(mhartid);
80000248:	f14027f3          	csrr	a5,mhartid
8000024c:	fef42623          	sw	a5,-20(s0)
80000250:	fec42783          	lw	a5,-20(s0)
80000254:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:176
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80000258:	40000737          	lui	a4,0x40000
8000025c:	fdc42783          	lw	a5,-36(s0)
80000260:	0057d793          	srli	a5,a5,0x5
80000264:	fe842683          	lw	a3,-24(s0)
80000268:	00569693          	slli	a3,a3,0x5
8000026c:	00f686b3          	add	a3,a3,a5
80000270:	000017b7          	lui	a5,0x1
80000274:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80000278:	00f687b3          	add	a5,a3,a5
8000027c:	00279793          	slli	a5,a5,0x2
80000280:	00f707b3          	add	a5,a4,a5
80000284:	0007a783          	lw	a5,0(a5)
80000288:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:178

    current &= ~((uint32_t)1 << (IRQn % 32));
8000028c:	fdc42783          	lw	a5,-36(s0)
80000290:	01f7f793          	andi	a5,a5,31
80000294:	00100713          	li	a4,1
80000298:	00f717b3          	sll	a5,a4,a5
8000029c:	fff7c793          	not	a5,a5
800002a0:	fe442703          	lw	a4,-28(s0)
800002a4:	00f777b3          	and	a5,a4,a5
800002a8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:180

    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
800002ac:	40000737          	lui	a4,0x40000
800002b0:	fdc42783          	lw	a5,-36(s0)
800002b4:	0057d793          	srli	a5,a5,0x5
800002b8:	fe842683          	lw	a3,-24(s0)
800002bc:	00569693          	slli	a3,a3,0x5
800002c0:	00f686b3          	add	a3,a3,a5
800002c4:	000017b7          	lui	a5,0x1
800002c8:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
800002cc:	00f687b3          	add	a5,a3,a5
800002d0:	00279793          	slli	a5,a5,0x2
800002d4:	00f707b3          	add	a5,a4,a5
800002d8:	fe442703          	lw	a4,-28(s0)
800002dc:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:181
}
800002e0:	00000013          	nop
800002e4:	02c12403          	lw	s0,44(sp)
800002e8:	03010113          	addi	sp,sp,48
800002ec:	00008067          	ret

800002f0 <PLIC_ClaimIRQ>:
PLIC_ClaimIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:205

/*==============================================================================
 * The function PLIC_ClaimIRQ() claims the interrupt from the PLIC controller.
 */
static inline uint32_t PLIC_ClaimIRQ(void)
{
800002f0:	fe010113          	addi	sp,sp,-32
800002f4:	00812e23          	sw	s0,28(sp)
800002f8:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:206
    unsigned long hart_id = read_csr(mhartid);
800002fc:	f14027f3          	csrr	a5,mhartid
80000300:	fef42623          	sw	a5,-20(s0)
80000304:	fec42783          	lw	a5,-20(s0)
80000308:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:208

    return PLIC->TARGET[hart_id].CLAIM_COMPLETE;
8000030c:	40000737          	lui	a4,0x40000
80000310:	fe842783          	lw	a5,-24(s0)
80000314:	20078793          	addi	a5,a5,512
80000318:	00c79793          	slli	a5,a5,0xc
8000031c:	00f707b3          	add	a5,a4,a5
80000320:	0047a783          	lw	a5,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:209
}
80000324:	00078513          	mv	a0,a5
80000328:	01c12403          	lw	s0,28(sp)
8000032c:	02010113          	addi	sp,sp,32
80000330:	00008067          	ret

80000334 <PLIC_CompleteIRQ>:
PLIC_CompleteIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:216
/*==============================================================================
 * The function PLIC_CompleteIRQ() indicates to the PLIC controller the interrupt
 * is processed and claim is complete.
 */
static inline void PLIC_CompleteIRQ(uint32_t source)
{
80000334:	fd010113          	addi	sp,sp,-48
80000338:	02812623          	sw	s0,44(sp)
8000033c:	03010413          	addi	s0,sp,48
80000340:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:217
    unsigned long hart_id = read_csr(mhartid);
80000344:	f14027f3          	csrr	a5,mhartid
80000348:	fef42623          	sw	a5,-20(s0)
8000034c:	fec42783          	lw	a5,-20(s0)
80000350:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:219

    PLIC->TARGET[hart_id].CLAIM_COMPLETE = source;
80000354:	40000737          	lui	a4,0x40000
80000358:	fe842783          	lw	a5,-24(s0)
8000035c:	20078793          	addi	a5,a5,512
80000360:	00c79793          	slli	a5,a5,0xc
80000364:	00f707b3          	add	a5,a4,a5
80000368:	fdc42703          	lw	a4,-36(s0)
8000036c:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:220
}
80000370:	00000013          	nop
80000374:	02c12403          	lw	s0,44(sp)
80000378:	03010113          	addi	sp,sp,48
8000037c:	00008067          	ret

80000380 <__enable_irq>:
__enable_irq():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:96

/*------------------------------------------------------------------------------
 * Enabler all interrupts.
 */
void __enable_irq(void)
{
80000380:	fe010113          	addi	sp,sp,-32
80000384:	00812e23          	sw	s0,28(sp)
80000388:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:97
    set_csr(mstatus, MSTATUS_MIE);
8000038c:	300467f3          	csrrsi	a5,mstatus,8
80000390:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:98
}
80000394:	00000013          	nop
80000398:	01c12403          	lw	s0,28(sp)
8000039c:	02010113          	addi	sp,sp,32
800003a0:	00008067          	ret

800003a4 <handle_m_timer_interrupt>:
handle_m_timer_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:128

/*------------------------------------------------------------------------------
 * RISC-V interrupt handler for machine timer interrupts.
 */
void handle_m_timer_interrupt()
{
800003a4:	fe010113          	addi	sp,sp,-32
800003a8:	00112e23          	sw	ra,28(sp)
800003ac:	00812c23          	sw	s0,24(sp)
800003b0:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:129
    clear_csr(mie, MIP_MTIP);
800003b4:	08000793          	li	a5,128
800003b8:	3047b7f3          	csrrc	a5,mie,a5
800003bc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:131

    SysTick_Handler();
800003c0:	4c8010ef          	jal	ra,80001888 <SysTick_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:133

    PRCI->MTIMECMP[read_csr(mhartid)] = PRCI->MTIME + g_systick_increment;
800003c4:	44000737          	lui	a4,0x44000
800003c8:	0000c7b7          	lui	a5,0xc
800003cc:	00f707b3          	add	a5,a4,a5
800003d0:	ffc7a803          	lw	a6,-4(a5) # bffc <HEAP_SIZE-0x4004>
800003d4:	ff87a783          	lw	a5,-8(a5)
800003d8:	9001a583          	lw	a1,-1792(gp) # 80006560 <__data_end>
800003dc:	9041a603          	lw	a2,-1788(gp) # 80006564 <__data_end+0x4>
800003e0:	44000537          	lui	a0,0x44000
800003e4:	f1402773          	csrr	a4,mhartid
800003e8:	fee42423          	sw	a4,-24(s0)
800003ec:	fe842883          	lw	a7,-24(s0)
800003f0:	00b786b3          	add	a3,a5,a1
800003f4:	00068313          	mv	t1,a3
800003f8:	00f33333          	sltu	t1,t1,a5
800003fc:	00c80733          	add	a4,a6,a2
80000400:	00e307b3          	add	a5,t1,a4
80000404:	00078713          	mv	a4,a5
80000408:	00068793          	mv	a5,a3
8000040c:	00070813          	mv	a6,a4
80000410:	00001737          	lui	a4,0x1
80000414:	80070713          	addi	a4,a4,-2048 # 800 <HEAP_SIZE-0xf800>
80000418:	00e88733          	add	a4,a7,a4
8000041c:	00371713          	slli	a4,a4,0x3
80000420:	00e50733          	add	a4,a0,a4
80000424:	00f72023          	sw	a5,0(a4)
80000428:	01072223          	sw	a6,4(a4)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:135

    set_csr(mie, MIP_MTIP);
8000042c:	08000793          	li	a5,128
80000430:	3047a7f3          	csrrs	a5,mie,a5
80000434:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:136
}
80000438:	00000013          	nop
8000043c:	01c12083          	lw	ra,28(sp)
80000440:	01812403          	lw	s0,24(sp)
80000444:	02010113          	addi	sp,sp,32
80000448:	00008067          	ret

8000044c <handle_m_ext_interrupt>:
handle_m_ext_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:181

/*------------------------------------------------------------------------------
 * 
 */
void handle_m_ext_interrupt()
{
8000044c:	fe010113          	addi	sp,sp,-32
80000450:	00112e23          	sw	ra,28(sp)
80000454:	00812c23          	sw	s0,24(sp)
80000458:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:182
    uint32_t int_num  = PLIC_ClaimIRQ();
8000045c:	e95ff0ef          	jal	ra,800002f0 <PLIC_ClaimIRQ>
80000460:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:183
    uint8_t disable = EXT_IRQ_KEEP_ENABLED;
80000464:	fe0405a3          	sb	zero,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:185

    disable = ext_irq_handler_table[int_num]();
80000468:	800067b7          	lui	a5,0x80006
8000046c:	fec42703          	lw	a4,-20(s0)
80000470:	00271713          	slli	a4,a4,0x2
80000474:	48078793          	addi	a5,a5,1152 # 80006480 <__stack_top+0xfffc5a30>
80000478:	00f707b3          	add	a5,a4,a5
8000047c:	0007a783          	lw	a5,0(a5)
80000480:	000780e7          	jalr	a5
80000484:	00050793          	mv	a5,a0
80000488:	fef405a3          	sb	a5,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:187

    PLIC_CompleteIRQ(int_num);
8000048c:	fec42503          	lw	a0,-20(s0)
80000490:	ea5ff0ef          	jal	ra,80000334 <PLIC_CompleteIRQ>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:189

    if(EXT_IRQ_DISABLE == disable)
80000494:	feb44703          	lbu	a4,-21(s0)
80000498:	00100793          	li	a5,1
8000049c:	00f71663          	bne	a4,a5,800004a8 <handle_m_ext_interrupt+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:191
    {
        PLIC_DisableIRQ((IRQn_Type)int_num);
800004a0:	fec42503          	lw	a0,-20(s0)
800004a4:	d95ff0ef          	jal	ra,80000238 <PLIC_DisableIRQ>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:193
    }
}
800004a8:	00000013          	nop
800004ac:	01c12083          	lw	ra,28(sp)
800004b0:	01812403          	lw	s0,24(sp)
800004b4:	02010113          	addi	sp,sp,32
800004b8:	00008067          	ret

800004bc <handle_m_soft_interrupt>:
handle_m_soft_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:196

void handle_m_soft_interrupt()
{
800004bc:	ff010113          	addi	sp,sp,-16
800004c0:	00112623          	sw	ra,12(sp)
800004c4:	00812423          	sw	s0,8(sp)
800004c8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:197
    Software_IRQHandler();
800004cc:	4cc010ef          	jal	ra,80001998 <Software_IRQHandler>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:200

    /*Clear software interrupt*/
    PRCI->MSIP[0] = 0x00;
800004d0:	440007b7          	lui	a5,0x44000
800004d4:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:201
}
800004d8:	00000013          	nop
800004dc:	00c12083          	lw	ra,12(sp)
800004e0:	00812403          	lw	s0,8(sp)
800004e4:	01010113          	addi	sp,sp,16
800004e8:	00008067          	ret

800004ec <handle_syscall>:
handle_syscall():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:204

/* syscall funcion defined at system_call.c */
unsigned int handle_syscall(){
800004ec:	fd010113          	addi	sp,sp,-48
800004f0:	02112623          	sw	ra,44(sp)
800004f4:	02812423          	sw	s0,40(sp)
800004f8:	03212223          	sw	s2,36(sp)
800004fc:	03010413          	addi	s0,sp,48
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:207
	unsigned int arg0, arg1, arg2, arg3, arg4, arg5, type;
	unsigned int *pointer;
	register long temp asm("s2") = 0;
80000500:	00000913          	li	s2,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:208
	asm("addi	s2, sp, 0");
80000504:	00010913          	mv	s2,sp
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:210
	
	pointer = (unsigned int *)(temp + (29*4));
80000508:	00090793          	mv	a5,s2
8000050c:	07478793          	addi	a5,a5,116
80000510:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:211
	arg0 =  *pointer;
80000514:	fec42783          	lw	a5,-20(s0)
80000518:	0007a783          	lw	a5,0(a5)
8000051c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:213

	pointer = (unsigned int *)(temp + (30*4));
80000520:	00090793          	mv	a5,s2
80000524:	07878793          	addi	a5,a5,120
80000528:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:214
	arg1 = *pointer;
8000052c:	fec42783          	lw	a5,-20(s0)
80000530:	0007a783          	lw	a5,0(a5)
80000534:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:216
	
	pointer = (unsigned int *)(temp + (31*4));
80000538:	00090793          	mv	a5,s2
8000053c:	07c78793          	addi	a5,a5,124
80000540:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:217
	arg2 = *pointer;
80000544:	fec42783          	lw	a5,-20(s0)
80000548:	0007a783          	lw	a5,0(a5)
8000054c:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:219

	pointer = (unsigned int *)(temp + (32*4));
80000550:	00090793          	mv	a5,s2
80000554:	08078793          	addi	a5,a5,128
80000558:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:220
	arg3 = *pointer;
8000055c:	fec42783          	lw	a5,-20(s0)
80000560:	0007a783          	lw	a5,0(a5)
80000564:	fcf42e23          	sw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:222

	pointer = (unsigned int *)(temp + (33*4));
80000568:	00090793          	mv	a5,s2
8000056c:	08478793          	addi	a5,a5,132
80000570:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:223
	arg4 = *pointer;
80000574:	fec42783          	lw	a5,-20(s0)
80000578:	0007a783          	lw	a5,0(a5)
8000057c:	fcf42c23          	sw	a5,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:225

	pointer = (unsigned int *)(temp + (34*4));
80000580:	00090793          	mv	a5,s2
80000584:	08878793          	addi	a5,a5,136
80000588:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:226
	arg4 = *pointer;
8000058c:	fec42783          	lw	a5,-20(s0)
80000590:	0007a783          	lw	a5,0(a5)
80000594:	fcf42c23          	sw	a5,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:228

	pointer = (unsigned int *)(temp + (36*4));
80000598:	00090793          	mv	a5,s2
8000059c:	09078793          	addi	a5,a5,144
800005a0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:229
	type = *pointer;
800005a4:	fec42783          	lw	a5,-20(s0)
800005a8:	0007a783          	lw	a5,0(a5)
800005ac:	fcf42a23          	sw	a5,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:231
	
	switch (type){
800005b0:	fd442783          	lw	a5,-44(s0)
800005b4:	ff678793          	addi	a5,a5,-10
800005b8:	03800713          	li	a4,56
800005bc:	12f76863          	bltu	a4,a5,800006ec <handle_syscall+0x200>
800005c0:	00279713          	slli	a4,a5,0x2
800005c4:	800067b7          	lui	a5,0x80006
800005c8:	0c878793          	addi	a5,a5,200 # 800060c8 <__stack_top+0xfffc5678>
800005cc:	00f707b3          	add	a5,a4,a5
800005d0:	0007a783          	lw	a5,0(a5)
800005d4:	00078067          	jr	a5
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:234

		case SYS_TESTING:
			prints("Detectei uma chamada TESTE de sistema!\n");
800005d8:	800067b7          	lui	a5,0x80006
800005dc:	04878513          	addi	a0,a5,72 # 80006048 <__stack_top+0xfffc55f8>
800005e0:	7bc020ef          	jal	ra,80002d9c <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:235
			printsv("arg0 ", arg0);
800005e4:	fe842783          	lw	a5,-24(s0)
800005e8:	00078593          	mv	a1,a5
800005ec:	800067b7          	lui	a5,0x80006
800005f0:	07078513          	addi	a0,a5,112 # 80006070 <__stack_top+0xfffc5620>
800005f4:	055020ef          	jal	ra,80002e48 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:236
			printsv("arg1 ", arg1);
800005f8:	fe442783          	lw	a5,-28(s0)
800005fc:	00078593          	mv	a1,a5
80000600:	800067b7          	lui	a5,0x80006
80000604:	07878513          	addi	a0,a5,120 # 80006078 <__stack_top+0xfffc5628>
80000608:	041020ef          	jal	ra,80002e48 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:237
			printsv("arg2 ", arg2);
8000060c:	fe042783          	lw	a5,-32(s0)
80000610:	00078593          	mv	a1,a5
80000614:	800067b7          	lui	a5,0x80006
80000618:	08078513          	addi	a0,a5,128 # 80006080 <__stack_top+0xfffc5630>
8000061c:	02d020ef          	jal	ra,80002e48 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:238
			printsv("arg3 ", arg3);
80000620:	fdc42783          	lw	a5,-36(s0)
80000624:	00078593          	mv	a1,a5
80000628:	800067b7          	lui	a5,0x80006
8000062c:	08878513          	addi	a0,a5,136 # 80006088 <__stack_top+0xfffc5638>
80000630:	019020ef          	jal	ra,80002e48 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:239
			printsv("arg4 ", arg4);
80000634:	fd842783          	lw	a5,-40(s0)
80000638:	00078593          	mv	a1,a5
8000063c:	800067b7          	lui	a5,0x80006
80000640:	09078513          	addi	a0,a5,144 # 80006090 <__stack_top+0xfffc5640>
80000644:	005020ef          	jal	ra,80002e48 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:240
			printsv("type ", type);
80000648:	fd442783          	lw	a5,-44(s0)
8000064c:	00078593          	mv	a1,a5
80000650:	800067b7          	lui	a5,0x80006
80000654:	09878513          	addi	a0,a5,152 # 80006098 <__stack_top+0xfffc5648>
80000658:	7f0020ef          	jal	ra,80002e48 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:241
			break;
8000065c:	1180006f          	j	80000774 <handle_syscall+0x288>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:244

        case SYS_PRINTS:
            prints(arg0);
80000660:	fe842783          	lw	a5,-24(s0)
80000664:	00078513          	mv	a0,a5
80000668:	734020ef          	jal	ra,80002d9c <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:245
            UART_polled_tx_string( &g_uart, arg0 );
8000066c:	fe842783          	lw	a5,-24(s0)
80000670:	00078593          	mv	a1,a5
80000674:	800217b7          	lui	a5,0x80021
80000678:	a3c78513          	addi	a0,a5,-1476 # 80020a3c <__stack_top+0xfffdffec>
8000067c:	329000ef          	jal	ra,800011a4 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:246
            break;
80000680:	0f40006f          	j	80000774 <handle_syscall+0x288>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:249
        
        case SYS_PRINTI:
            printi(arg0);
80000684:	fe842783          	lw	a5,-24(s0)
80000688:	00078513          	mv	a0,a5
8000068c:	780020ef          	jal	ra,80002e0c <printi>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:250
            myItoa(arg0, str, 10);
80000690:	fe842703          	lw	a4,-24(s0)
80000694:	00a00613          	li	a2,10
80000698:	8001f7b7          	lui	a5,0x8001f
8000069c:	7e878593          	addi	a1,a5,2024 # 8001f7e8 <__stack_top+0xfffded98>
800006a0:	00070513          	mv	a0,a4
800006a4:	695020ef          	jal	ra,80003538 <myItoa>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:251
            UART_polled_tx_string( &g_uart, (const uint8_t *)str );
800006a8:	8001f7b7          	lui	a5,0x8001f
800006ac:	7e878593          	addi	a1,a5,2024 # 8001f7e8 <__stack_top+0xfffded98>
800006b0:	800217b7          	lui	a5,0x80021
800006b4:	a3c78513          	addi	a0,a5,-1476 # 80020a3c <__stack_top+0xfffdffec>
800006b8:	2ed000ef          	jal	ra,800011a4 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:252
            break;
800006bc:	0b80006f          	j	80000774 <handle_syscall+0x288>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:256
        
        case SYS_SEND_MSG:
            //              addr, task
            API_SendMessage(arg0, arg1);
800006c0:	fe442583          	lw	a1,-28(s0)
800006c4:	fe842503          	lw	a0,-24(s0)
800006c8:	3c4030ef          	jal	ra,80003a8c <API_SendMessage>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:257
            break;
800006cc:	0a80006f          	j	80000774 <handle_syscall+0x288>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:261
        
        case SYS_RECV_MSG:
            //                 addr, task
            API_SendMessageReq(arg0, arg1);
800006d0:	fe442583          	lw	a1,-28(s0)
800006d4:	fe842503          	lw	a0,-24(s0)
800006d8:	670030ef          	jal	ra,80003d48 <API_SendMessageReq>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:262
            break;
800006dc:	0980006f          	j	80000774 <handle_syscall+0x288>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:265
        
        case SYS_END_TASK:
            API_FinishRunningTask(arg0);
800006e0:	fe842503          	lw	a0,-24(s0)
800006e4:	0cc050ef          	jal	ra,800057b0 <API_FinishRunningTask>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:266
            break;
800006e8:	08c0006f          	j	80000774 <handle_syscall+0x288>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:269

		default:
			prints("Systemcall não identificada!\n");
800006ec:	800067b7          	lui	a5,0x80006
800006f0:	0a078513          	addi	a0,a5,160 # 800060a0 <__stack_top+0xfffc5650>
800006f4:	6a8020ef          	jal	ra,80002d9c <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:270
			printsv("arg0 ", arg0);
800006f8:	fe842783          	lw	a5,-24(s0)
800006fc:	00078593          	mv	a1,a5
80000700:	800067b7          	lui	a5,0x80006
80000704:	07078513          	addi	a0,a5,112 # 80006070 <__stack_top+0xfffc5620>
80000708:	740020ef          	jal	ra,80002e48 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:271
			printsv("arg1 ", arg1);
8000070c:	fe442783          	lw	a5,-28(s0)
80000710:	00078593          	mv	a1,a5
80000714:	800067b7          	lui	a5,0x80006
80000718:	07878513          	addi	a0,a5,120 # 80006078 <__stack_top+0xfffc5628>
8000071c:	72c020ef          	jal	ra,80002e48 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:272
			printsv("arg2 ", arg2);
80000720:	fe042783          	lw	a5,-32(s0)
80000724:	00078593          	mv	a1,a5
80000728:	800067b7          	lui	a5,0x80006
8000072c:	08078513          	addi	a0,a5,128 # 80006080 <__stack_top+0xfffc5630>
80000730:	718020ef          	jal	ra,80002e48 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:273
			printsv("arg3 ", arg3);
80000734:	fdc42783          	lw	a5,-36(s0)
80000738:	00078593          	mv	a1,a5
8000073c:	800067b7          	lui	a5,0x80006
80000740:	08878513          	addi	a0,a5,136 # 80006088 <__stack_top+0xfffc5638>
80000744:	704020ef          	jal	ra,80002e48 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:274
			printsv("arg4 ", arg4);
80000748:	fd842783          	lw	a5,-40(s0)
8000074c:	00078593          	mv	a1,a5
80000750:	800067b7          	lui	a5,0x80006
80000754:	09078513          	addi	a0,a5,144 # 80006090 <__stack_top+0xfffc5640>
80000758:	6f0020ef          	jal	ra,80002e48 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:275
			printsv("type ", type);
8000075c:	fd442783          	lw	a5,-44(s0)
80000760:	00078593          	mv	a1,a5
80000764:	800067b7          	lui	a5,0x80006
80000768:	09878513          	addi	a0,a5,152 # 80006098 <__stack_top+0xfffc5648>
8000076c:	6dc020ef          	jal	ra,80002e48 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:276
			break;
80000770:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:278
	}
	return 87;
80000774:	05700793          	li	a5,87
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:293
	// 	value = *p;
	// 	printsvsv("i: ", i, " value: ", value);
	// }
    // prints("Cheguei aqui!!!!!!! sucessooo :D\n");
	////////////////////////////////////////////////////
}
80000778:	00078513          	mv	a0,a5
8000077c:	02c12083          	lw	ra,44(sp)
80000780:	02812403          	lw	s0,40(sp)
80000784:	02412903          	lw	s2,36(sp)
80000788:	03010113          	addi	sp,sp,48
8000078c:	00008067          	ret

80000790 <handle_trap>:
handle_trap():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:299

/*------------------------------------------------------------------------------
 * Trap/Interrupt handler
 */
uintptr_t handle_trap(uintptr_t mcause, uintptr_t epc)
{
80000790:	fe010113          	addi	sp,sp,-32
80000794:	00112e23          	sw	ra,28(sp)
80000798:	00812c23          	sw	s0,24(sp)
8000079c:	02010413          	addi	s0,sp,32
800007a0:	fea42623          	sw	a0,-20(s0)
800007a4:	feb42423          	sw	a1,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:300
    if (mcause == ENV_CALL_M || mcause == ENV_CALL_H || mcause == ENV_CALL_S || mcause == ENV_CALL_U){
800007a8:	fec42703          	lw	a4,-20(s0)
800007ac:	00b00793          	li	a5,11
800007b0:	02f70463          	beq	a4,a5,800007d8 <handle_trap+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:300 (discriminator 1)
800007b4:	fec42703          	lw	a4,-20(s0)
800007b8:	00a00793          	li	a5,10
800007bc:	00f70e63          	beq	a4,a5,800007d8 <handle_trap+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:300 (discriminator 2)
800007c0:	fec42703          	lw	a4,-20(s0)
800007c4:	00900793          	li	a5,9
800007c8:	00f70863          	beq	a4,a5,800007d8 <handle_trap+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:300 (discriminator 3)
800007cc:	fec42703          	lw	a4,-20(s0)
800007d0:	00800793          	li	a5,8
800007d4:	00f71c63          	bne	a4,a5,800007ec <handle_trap+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:301
        handle_syscall();
800007d8:	d15ff0ef          	jal	ra,800004ec <handle_syscall>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:302
        epc = (uintptr_t) (epc + 4);
800007dc:	fe842783          	lw	a5,-24(s0)
800007e0:	00478793          	addi	a5,a5,4
800007e4:	fef42423          	sw	a5,-24(s0)
800007e8:	0a00006f          	j	80000888 <handle_trap+0xf8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:304
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_EXT)){
800007ec:	fec42783          	lw	a5,-20(s0)
800007f0:	0207d263          	bgez	a5,80000814 <handle_trap+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:304 (discriminator 1)
800007f4:	fec42703          	lw	a4,-20(s0)
800007f8:	800007b7          	lui	a5,0x80000
800007fc:	fff7c793          	not	a5,a5
80000800:	00f77733          	and	a4,a4,a5
80000804:	00b00793          	li	a5,11
80000808:	00f71663          	bne	a4,a5,80000814 <handle_trap+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:305
        handle_m_ext_interrupt();
8000080c:	c41ff0ef          	jal	ra,8000044c <handle_m_ext_interrupt>
80000810:	0780006f          	j	80000888 <handle_trap+0xf8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:307
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_TIMER)){
80000814:	fec42783          	lw	a5,-20(s0)
80000818:	0207d263          	bgez	a5,8000083c <handle_trap+0xac>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:307 (discriminator 1)
8000081c:	fec42703          	lw	a4,-20(s0)
80000820:	800007b7          	lui	a5,0x80000
80000824:	fff7c793          	not	a5,a5
80000828:	00f77733          	and	a4,a4,a5
8000082c:	00700793          	li	a5,7
80000830:	00f71663          	bne	a4,a5,8000083c <handle_trap+0xac>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:308
        handle_m_timer_interrupt();
80000834:	b71ff0ef          	jal	ra,800003a4 <handle_m_timer_interrupt>
80000838:	0500006f          	j	80000888 <handle_trap+0xf8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:310
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_SOFT)){
8000083c:	fec42783          	lw	a5,-20(s0)
80000840:	0207d263          	bgez	a5,80000864 <handle_trap+0xd4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:310 (discriminator 1)
80000844:	fec42703          	lw	a4,-20(s0)
80000848:	800007b7          	lui	a5,0x80000
8000084c:	fff7c793          	not	a5,a5
80000850:	00f77733          	and	a4,a4,a5
80000854:	00300793          	li	a5,3
80000858:	00f71663          	bne	a4,a5,80000864 <handle_trap+0xd4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:311
        handle_m_soft_interrupt();
8000085c:	c61ff0ef          	jal	ra,800004bc <handle_m_soft_interrupt>
80000860:	0280006f          	j	80000888 <handle_trap+0xf8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:314
    }
    else{
        write(1, "trap\n", 5);
80000864:	00500613          	li	a2,5
80000868:	800067b7          	lui	a5,0x80006
8000086c:	0c078593          	addi	a1,a5,192 # 800060c0 <__stack_top+0xfffc5670>
80000870:	00100513          	li	a0,1
80000874:	75c050ef          	jal	ra,80005fd0 <write>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:315
        _exit(1 + mcause);
80000878:	fec42783          	lw	a5,-20(s0)
8000087c:	00178793          	addi	a5,a5,1
80000880:	00078513          	mv	a0,a5
80000884:	4c4000ef          	jal	ra,80000d48 <_exit>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:317
    }
    return epc;
80000888:	fe842783          	lw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:318
}
8000088c:	00078513          	mv	a0,a5
80000890:	01c12083          	lw	ra,28(sp)
80000894:	01812403          	lw	s0,24(sp)
80000898:	02010113          	addi	sp,sp,32
8000089c:	00008067          	ret

800008a0 <Invalid_IRQHandler>:
Invalid_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:37
{
    ;
}

__attribute__((weak))  uint8_t Invalid_IRQHandler(void)
{
800008a0:	ff010113          	addi	sp,sp,-16
800008a4:	00812623          	sw	s0,12(sp)
800008a8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:38
    return(0);
800008ac:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:39
}
800008b0:	00078513          	mv	a0,a5
800008b4:	00c12403          	lw	s0,12(sp)
800008b8:	01010113          	addi	sp,sp,16
800008bc:	00008067          	ret

800008c0 <External_3_IRQHandler>:
External_3_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:52
{
    return(0);
}

__attribute__((weak))  uint8_t External_3_IRQHandler(void)
{
800008c0:	ff010113          	addi	sp,sp,-16
800008c4:	00812623          	sw	s0,12(sp)
800008c8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:53
    return(0);
800008cc:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:54
}
800008d0:	00078513          	mv	a0,a5
800008d4:	00c12403          	lw	s0,12(sp)
800008d8:	01010113          	addi	sp,sp,16
800008dc:	00008067          	ret

800008e0 <External_4_IRQHandler>:
External_4_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:57

__attribute__((weak))  uint8_t External_4_IRQHandler(void)
{
800008e0:	ff010113          	addi	sp,sp,-16
800008e4:	00812623          	sw	s0,12(sp)
800008e8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:58
    return(0);
800008ec:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:59
}
800008f0:	00078513          	mv	a0,a5
800008f4:	00c12403          	lw	s0,12(sp)
800008f8:	01010113          	addi	sp,sp,16
800008fc:	00008067          	ret

80000900 <External_5_IRQHandler>:
External_5_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:62

__attribute__((weak))  uint8_t External_5_IRQHandler(void)
{
80000900:	ff010113          	addi	sp,sp,-16
80000904:	00812623          	sw	s0,12(sp)
80000908:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:63
    return(0);
8000090c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:64
}
80000910:	00078513          	mv	a0,a5
80000914:	00c12403          	lw	s0,12(sp)
80000918:	01010113          	addi	sp,sp,16
8000091c:	00008067          	ret

80000920 <External_6_IRQHandler>:
External_6_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:67

__attribute__((weak))  uint8_t External_6_IRQHandler(void)
{
80000920:	ff010113          	addi	sp,sp,-16
80000924:	00812623          	sw	s0,12(sp)
80000928:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:68
    return(0);
8000092c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:69
}
80000930:	00078513          	mv	a0,a5
80000934:	00c12403          	lw	s0,12(sp)
80000938:	01010113          	addi	sp,sp,16
8000093c:	00008067          	ret

80000940 <External_7_IRQHandler>:
External_7_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:72

__attribute__((weak))  uint8_t External_7_IRQHandler(void)
{
80000940:	ff010113          	addi	sp,sp,-16
80000944:	00812623          	sw	s0,12(sp)
80000948:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:73
    return(0);
8000094c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:74
}
80000950:	00078513          	mv	a0,a5
80000954:	00c12403          	lw	s0,12(sp)
80000958:	01010113          	addi	sp,sp,16
8000095c:	00008067          	ret

80000960 <External_8_IRQHandler>:
External_8_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:77

__attribute__((weak))  uint8_t External_8_IRQHandler(void)
{
80000960:	ff010113          	addi	sp,sp,-16
80000964:	00812623          	sw	s0,12(sp)
80000968:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:78
    return(0);
8000096c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:79
}
80000970:	00078513          	mv	a0,a5
80000974:	00c12403          	lw	s0,12(sp)
80000978:	01010113          	addi	sp,sp,16
8000097c:	00008067          	ret

80000980 <External_9_IRQHandler>:
External_9_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:82

__attribute__((weak))  uint8_t External_9_IRQHandler(void)
{
80000980:	ff010113          	addi	sp,sp,-16
80000984:	00812623          	sw	s0,12(sp)
80000988:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:83
    return(0);
8000098c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:84
}
80000990:	00078513          	mv	a0,a5
80000994:	00c12403          	lw	s0,12(sp)
80000998:	01010113          	addi	sp,sp,16
8000099c:	00008067          	ret

800009a0 <External_10_IRQHandler>:
External_10_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:87

__attribute__((weak))  uint8_t External_10_IRQHandler(void)
{
800009a0:	ff010113          	addi	sp,sp,-16
800009a4:	00812623          	sw	s0,12(sp)
800009a8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:88
    return(0);
800009ac:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:89
}
800009b0:	00078513          	mv	a0,a5
800009b4:	00c12403          	lw	s0,12(sp)
800009b8:	01010113          	addi	sp,sp,16
800009bc:	00008067          	ret

800009c0 <External_11_IRQHandler>:
External_11_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:92

__attribute__((weak))  uint8_t External_11_IRQHandler(void)
{
800009c0:	ff010113          	addi	sp,sp,-16
800009c4:	00812623          	sw	s0,12(sp)
800009c8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:93
    return(0);
800009cc:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:94
}
800009d0:	00078513          	mv	a0,a5
800009d4:	00c12403          	lw	s0,12(sp)
800009d8:	01010113          	addi	sp,sp,16
800009dc:	00008067          	ret

800009e0 <External_12_IRQHandler>:
External_12_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:97

__attribute__((weak))  uint8_t External_12_IRQHandler(void)
{
800009e0:	ff010113          	addi	sp,sp,-16
800009e4:	00812623          	sw	s0,12(sp)
800009e8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:98
    return(0);
800009ec:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:99
}
800009f0:	00078513          	mv	a0,a5
800009f4:	00c12403          	lw	s0,12(sp)
800009f8:	01010113          	addi	sp,sp,16
800009fc:	00008067          	ret

80000a00 <External_13_IRQHandler>:
External_13_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:102

__attribute__((weak))  uint8_t External_13_IRQHandler(void)
{
80000a00:	ff010113          	addi	sp,sp,-16
80000a04:	00812623          	sw	s0,12(sp)
80000a08:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:103
    return(0);
80000a0c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:104
}
80000a10:	00078513          	mv	a0,a5
80000a14:	00c12403          	lw	s0,12(sp)
80000a18:	01010113          	addi	sp,sp,16
80000a1c:	00008067          	ret

80000a20 <External_14_IRQHandler>:
External_14_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:107

__attribute__((weak))  uint8_t External_14_IRQHandler(void)
{
80000a20:	ff010113          	addi	sp,sp,-16
80000a24:	00812623          	sw	s0,12(sp)
80000a28:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:108
    return(0);
80000a2c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:109
}
80000a30:	00078513          	mv	a0,a5
80000a34:	00c12403          	lw	s0,12(sp)
80000a38:	01010113          	addi	sp,sp,16
80000a3c:	00008067          	ret

80000a40 <External_15_IRQHandler>:
External_15_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:112

__attribute__((weak))  uint8_t External_15_IRQHandler(void)
{
80000a40:	ff010113          	addi	sp,sp,-16
80000a44:	00812623          	sw	s0,12(sp)
80000a48:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:113
    return(0);
80000a4c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:114
}
80000a50:	00078513          	mv	a0,a5
80000a54:	00c12403          	lw	s0,12(sp)
80000a58:	01010113          	addi	sp,sp,16
80000a5c:	00008067          	ret

80000a60 <External_16_IRQHandler>:
External_16_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:117

__attribute__((weak))  uint8_t External_16_IRQHandler(void)
{
80000a60:	ff010113          	addi	sp,sp,-16
80000a64:	00812623          	sw	s0,12(sp)
80000a68:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:118
    return(0);
80000a6c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:119
}
80000a70:	00078513          	mv	a0,a5
80000a74:	00c12403          	lw	s0,12(sp)
80000a78:	01010113          	addi	sp,sp,16
80000a7c:	00008067          	ret

80000a80 <External_17_IRQHandler>:
External_17_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:122

__attribute__((weak))  uint8_t External_17_IRQHandler(void)
{
80000a80:	ff010113          	addi	sp,sp,-16
80000a84:	00812623          	sw	s0,12(sp)
80000a88:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:123
    return(0);
80000a8c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:124
}
80000a90:	00078513          	mv	a0,a5
80000a94:	00c12403          	lw	s0,12(sp)
80000a98:	01010113          	addi	sp,sp,16
80000a9c:	00008067          	ret

80000aa0 <External_18_IRQHandler>:
External_18_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:127

__attribute__((weak))  uint8_t External_18_IRQHandler(void)
{
80000aa0:	ff010113          	addi	sp,sp,-16
80000aa4:	00812623          	sw	s0,12(sp)
80000aa8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:128
    return(0);
80000aac:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:129
}
80000ab0:	00078513          	mv	a0,a5
80000ab4:	00c12403          	lw	s0,12(sp)
80000ab8:	01010113          	addi	sp,sp,16
80000abc:	00008067          	ret

80000ac0 <External_19_IRQHandler>:
External_19_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:132

__attribute__((weak))  uint8_t External_19_IRQHandler(void)
{
80000ac0:	ff010113          	addi	sp,sp,-16
80000ac4:	00812623          	sw	s0,12(sp)
80000ac8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:133
    return(0);
80000acc:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:134
}
80000ad0:	00078513          	mv	a0,a5
80000ad4:	00c12403          	lw	s0,12(sp)
80000ad8:	01010113          	addi	sp,sp,16
80000adc:	00008067          	ret

80000ae0 <External_20_IRQHandler>:
External_20_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:137

__attribute__((weak))  uint8_t External_20_IRQHandler(void)
{
80000ae0:	ff010113          	addi	sp,sp,-16
80000ae4:	00812623          	sw	s0,12(sp)
80000ae8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:138
    return(0);
80000aec:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:139
}
80000af0:	00078513          	mv	a0,a5
80000af4:	00c12403          	lw	s0,12(sp)
80000af8:	01010113          	addi	sp,sp,16
80000afc:	00008067          	ret

80000b00 <External_21_IRQHandler>:
External_21_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:142

__attribute__((weak))  uint8_t External_21_IRQHandler(void)
{
80000b00:	ff010113          	addi	sp,sp,-16
80000b04:	00812623          	sw	s0,12(sp)
80000b08:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:143
    return(0);
80000b0c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:144
}
80000b10:	00078513          	mv	a0,a5
80000b14:	00c12403          	lw	s0,12(sp)
80000b18:	01010113          	addi	sp,sp,16
80000b1c:	00008067          	ret

80000b20 <External_22_IRQHandler>:
External_22_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:147

__attribute__((weak))  uint8_t External_22_IRQHandler(void)
{
80000b20:	ff010113          	addi	sp,sp,-16
80000b24:	00812623          	sw	s0,12(sp)
80000b28:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:148
    return(0);
80000b2c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:149
}
80000b30:	00078513          	mv	a0,a5
80000b34:	00c12403          	lw	s0,12(sp)
80000b38:	01010113          	addi	sp,sp,16
80000b3c:	00008067          	ret

80000b40 <External_23_IRQHandler>:
External_23_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:152

__attribute__((weak))  uint8_t External_23_IRQHandler(void)
{
80000b40:	ff010113          	addi	sp,sp,-16
80000b44:	00812623          	sw	s0,12(sp)
80000b48:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:153
    return(0);
80000b4c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:154
}
80000b50:	00078513          	mv	a0,a5
80000b54:	00c12403          	lw	s0,12(sp)
80000b58:	01010113          	addi	sp,sp,16
80000b5c:	00008067          	ret

80000b60 <External_24_IRQHandler>:
External_24_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:157

__attribute__((weak))  uint8_t External_24_IRQHandler(void)
{
80000b60:	ff010113          	addi	sp,sp,-16
80000b64:	00812623          	sw	s0,12(sp)
80000b68:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:158
    return(0);
80000b6c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:159
}
80000b70:	00078513          	mv	a0,a5
80000b74:	00c12403          	lw	s0,12(sp)
80000b78:	01010113          	addi	sp,sp,16
80000b7c:	00008067          	ret

80000b80 <External_25_IRQHandler>:
External_25_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:162

__attribute__((weak))  uint8_t External_25_IRQHandler(void)
{
80000b80:	ff010113          	addi	sp,sp,-16
80000b84:	00812623          	sw	s0,12(sp)
80000b88:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:163
    return(0);
80000b8c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:164
}
80000b90:	00078513          	mv	a0,a5
80000b94:	00c12403          	lw	s0,12(sp)
80000b98:	01010113          	addi	sp,sp,16
80000b9c:	00008067          	ret

80000ba0 <External_26_IRQHandler>:
External_26_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:167

__attribute__((weak))  uint8_t External_26_IRQHandler(void)
{
80000ba0:	ff010113          	addi	sp,sp,-16
80000ba4:	00812623          	sw	s0,12(sp)
80000ba8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:168
    return(0);
80000bac:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:169
}
80000bb0:	00078513          	mv	a0,a5
80000bb4:	00c12403          	lw	s0,12(sp)
80000bb8:	01010113          	addi	sp,sp,16
80000bbc:	00008067          	ret

80000bc0 <External_27_IRQHandler>:
External_27_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:172

__attribute__((weak))  uint8_t External_27_IRQHandler(void)
{
80000bc0:	ff010113          	addi	sp,sp,-16
80000bc4:	00812623          	sw	s0,12(sp)
80000bc8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:173
    return(0);
80000bcc:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:174
}
80000bd0:	00078513          	mv	a0,a5
80000bd4:	00c12403          	lw	s0,12(sp)
80000bd8:	01010113          	addi	sp,sp,16
80000bdc:	00008067          	ret

80000be0 <External_28_IRQHandler>:
External_28_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:177

__attribute__((weak))  uint8_t External_28_IRQHandler(void)
{
80000be0:	ff010113          	addi	sp,sp,-16
80000be4:	00812623          	sw	s0,12(sp)
80000be8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:178
    return(0);
80000bec:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:179
}
80000bf0:	00078513          	mv	a0,a5
80000bf4:	00c12403          	lw	s0,12(sp)
80000bf8:	01010113          	addi	sp,sp,16
80000bfc:	00008067          	ret

80000c00 <External_29_IRQHandler>:
External_29_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:182

__attribute__((weak))  uint8_t External_29_IRQHandler(void)
{
80000c00:	ff010113          	addi	sp,sp,-16
80000c04:	00812623          	sw	s0,12(sp)
80000c08:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:183
    return(0);
80000c0c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:184
}
80000c10:	00078513          	mv	a0,a5
80000c14:	00c12403          	lw	s0,12(sp)
80000c18:	01010113          	addi	sp,sp,16
80000c1c:	00008067          	ret

80000c20 <External_30_IRQHandler>:
External_30_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:187

__attribute__((weak))  uint8_t External_30_IRQHandler(void)
{
80000c20:	ff010113          	addi	sp,sp,-16
80000c24:	00812623          	sw	s0,12(sp)
80000c28:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:188
    return(0);
80000c2c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:189
}
80000c30:	00078513          	mv	a0,a5
80000c34:	00c12403          	lw	s0,12(sp)
80000c38:	01010113          	addi	sp,sp,16
80000c3c:	00008067          	ret

80000c40 <External_31_IRQHandler>:
External_31_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:192

__attribute__((weak))  uint8_t External_31_IRQHandler(void)
{
80000c40:	ff010113          	addi	sp,sp,-16
80000c44:	00812623          	sw	s0,12(sp)
80000c48:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:193
    return(0);
80000c4c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:194
}
80000c50:	00078513          	mv	a0,a5
80000c54:	00c12403          	lw	s0,12(sp)
80000c58:	01010113          	addi	sp,sp,16
80000c5c:	00008067          	ret

80000c60 <write_hex>:
write_hex():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:55

char *__env[1] = { 0 };
char **environ = __env;

void write_hex(int fd, uint32_t hex)
{
80000c60:	fd010113          	addi	sp,sp,-48
80000c64:	02112623          	sw	ra,44(sp)
80000c68:	02812423          	sw	s0,40(sp)
80000c6c:	03010413          	addi	s0,sp,48
80000c70:	fca42e23          	sw	a0,-36(s0)
80000c74:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:61
    uint8_t ii;
    uint8_t jj;
    char towrite;
    uint8_t digit;

    write( fd , "0x", 2 );
80000c78:	00200613          	li	a2,2
80000c7c:	800067b7          	lui	a5,0x80006
80000c80:	1ac78593          	addi	a1,a5,428 # 800061ac <__stack_top+0xfffc575c>
80000c84:	fdc42503          	lw	a0,-36(s0)
80000c88:	348050ef          	jal	ra,80005fd0 <write>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:63

    for (ii = 8 ; ii > 0; ii--)
80000c8c:	00800793          	li	a5,8
80000c90:	fef407a3          	sb	a5,-17(s0)
80000c94:	0980006f          	j	80000d2c <write_hex+0xcc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:65
    {
        jj = ii-1;
80000c98:	fef44783          	lbu	a5,-17(s0)
80000c9c:	fff78793          	addi	a5,a5,-1
80000ca0:	fef40723          	sb	a5,-18(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:66
        digit = ((hex & (0xF << (jj*4))) >> (jj*4));
80000ca4:	fee44783          	lbu	a5,-18(s0)
80000ca8:	00279793          	slli	a5,a5,0x2
80000cac:	00f00713          	li	a4,15
80000cb0:	00f717b3          	sll	a5,a4,a5
80000cb4:	00078713          	mv	a4,a5
80000cb8:	fd842783          	lw	a5,-40(s0)
80000cbc:	00f77733          	and	a4,a4,a5
80000cc0:	fee44783          	lbu	a5,-18(s0)
80000cc4:	00279793          	slli	a5,a5,0x2
80000cc8:	00f757b3          	srl	a5,a4,a5
80000ccc:	fef406a3          	sb	a5,-19(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:67
        towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
80000cd0:	fed44703          	lbu	a4,-19(s0)
80000cd4:	00900793          	li	a5,9
80000cd8:	00e7ee63          	bltu	a5,a4,80000cf4 <write_hex+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 1)
80000cdc:	fed44783          	lbu	a5,-19(s0)
80000ce0:	03078793          	addi	a5,a5,48
80000ce4:	0ff7f793          	andi	a5,a5,255
80000ce8:	01879793          	slli	a5,a5,0x18
80000cec:	4187d793          	srai	a5,a5,0x18
80000cf0:	0180006f          	j	80000d08 <write_hex+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 2)
80000cf4:	fed44783          	lbu	a5,-19(s0)
80000cf8:	03778793          	addi	a5,a5,55
80000cfc:	0ff7f793          	andi	a5,a5,255
80000d00:	01879793          	slli	a5,a5,0x18
80000d04:	4187d793          	srai	a5,a5,0x18
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 4)
80000d08:	fef40623          	sb	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:68 (discriminator 4)
        write( fd, &towrite, 1);
80000d0c:	fec40793          	addi	a5,s0,-20
80000d10:	00100613          	li	a2,1
80000d14:	00078593          	mv	a1,a5
80000d18:	fdc42503          	lw	a0,-36(s0)
80000d1c:	2b4050ef          	jal	ra,80005fd0 <write>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 4)
    for (ii = 8 ; ii > 0; ii--)
80000d20:	fef44783          	lbu	a5,-17(s0)
80000d24:	fff78793          	addi	a5,a5,-1
80000d28:	fef407a3          	sb	a5,-17(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 2)
80000d2c:	fef44783          	lbu	a5,-17(s0)
80000d30:	f60794e3          	bnez	a5,80000c98 <write_hex+0x38>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:70
    }
}
80000d34:	00000013          	nop
80000d38:	02c12083          	lw	ra,44(sp)
80000d3c:	02812403          	lw	s0,40(sp)
80000d40:	03010113          	addi	sp,sp,48
80000d44:	00008067          	ret

80000d48 <_exit>:
_exit():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:74

               
void _exit(int code)
{
80000d48:	fd010113          	addi	sp,sp,-48
80000d4c:	02112623          	sw	ra,44(sp)
80000d50:	02812423          	sw	s0,40(sp)
80000d54:	03010413          	addi	s0,sp,48
80000d58:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:76
#ifdef MSCC_STDIO_THRU_CORE_UART_APB
    const char * message = "\nProgam has exited with code:";
80000d5c:	800067b7          	lui	a5,0x80006
80000d60:	1b078793          	addi	a5,a5,432 # 800061b0 <__stack_top+0xfffc5760>
80000d64:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:78

    write(STDERR_FILENO, message, strlen(message));
80000d68:	fec42503          	lw	a0,-20(s0)
80000d6c:	098010ef          	jal	ra,80001e04 <strlen>
80000d70:	00050793          	mv	a5,a0
80000d74:	00078613          	mv	a2,a5
80000d78:	fec42583          	lw	a1,-20(s0)
80000d7c:	00200513          	li	a0,2
80000d80:	250050ef          	jal	ra,80005fd0 <write>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:79
    write_hex(STDERR_FILENO, code);
80000d84:	fdc42783          	lw	a5,-36(s0)
80000d88:	00078593          	mv	a1,a5
80000d8c:	00200513          	li	a0,2
80000d90:	ed1ff0ef          	jal	ra,80000c60 <write_hex>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:82 (discriminator 1)
#endif

    while (1);
80000d94:	0000006f          	j	80000d94 <_exit+0x4c>

80000d98 <_isatty>:
_isatty():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:101
    curbrk += incr;
    return curbrk - incr;
}

int _isatty(int fd)
{
80000d98:	fe010113          	addi	sp,sp,-32
80000d9c:	00812e23          	sw	s0,28(sp)
80000da0:	02010413          	addi	s0,sp,32
80000da4:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:102
    if (fd == STDOUT_FILENO || fd == STDERR_FILENO)
80000da8:	fec42703          	lw	a4,-20(s0)
80000dac:	00100793          	li	a5,1
80000db0:	00f70863          	beq	a4,a5,80000dc0 <_isatty+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:102 (discriminator 1)
80000db4:	fec42703          	lw	a4,-20(s0)
80000db8:	00200793          	li	a5,2
80000dbc:	00f71663          	bne	a4,a5,80000dc8 <_isatty+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:104
    {
        return 1;
80000dc0:	00100793          	li	a5,1
80000dc4:	0140006f          	j	80000dd8 <_isatty+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:107
    }

    errno = EBADF;
80000dc8:	800207b7          	lui	a5,0x80020
80000dcc:	00900713          	li	a4,9
80000dd0:	10e7a823          	sw	a4,272(a5) # 80020110 <__stack_top+0xfffdf6c0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:108
    return 0;
80000dd4:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:109
}
80000dd8:	00078513          	mv	a0,a5
80000ddc:	01c12403          	lw	s0,28(sp)
80000de0:	02010113          	addi	sp,sp,32
80000de4:	00008067          	ret

80000de8 <stub>:
stub():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:112

static int stub(int err)
{
80000de8:	fe010113          	addi	sp,sp,-32
80000dec:	00812e23          	sw	s0,28(sp)
80000df0:	02010413          	addi	s0,sp,32
80000df4:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:113
    errno = err;
80000df8:	800207b7          	lui	a5,0x80020
80000dfc:	fec42703          	lw	a4,-20(s0)
80000e00:	10e7a823          	sw	a4,272(a5) # 80020110 <__stack_top+0xfffdf6c0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:114
    return -1;
80000e04:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:115
}
80000e08:	00078513          	mv	a0,a5
80000e0c:	01c12403          	lw	s0,28(sp)
80000e10:	02010113          	addi	sp,sp,32
80000e14:	00008067          	ret

80000e18 <_write>:
_write():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:226
{
    return stub(ECHILD);
}

ssize_t _write(int fd, const void* ptr, size_t len)
{
80000e18:	fd010113          	addi	sp,sp,-48
80000e1c:	02112623          	sw	ra,44(sp)
80000e20:	02812423          	sw	s0,40(sp)
80000e24:	03010413          	addi	s0,sp,48
80000e28:	fca42e23          	sw	a0,-36(s0)
80000e2c:	fcb42c23          	sw	a1,-40(s0)
80000e30:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:229

#ifdef MSCC_STDIO_THRU_CORE_UART_APB
  const uint8_t * current = (const uint8_t *) ptr;
80000e34:	fd842783          	lw	a5,-40(s0)
80000e38:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:232
  size_t jj;

  if (_isatty(fd))
80000e3c:	fdc42503          	lw	a0,-36(s0)
80000e40:	f59ff0ef          	jal	ra,80000d98 <_isatty>
80000e44:	00050793          	mv	a5,a0
80000e48:	08078c63          	beqz	a5,80000ee0 <_write+0xc8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:238
  {
        /*--------------------------------------------------------------------------
        * Initialize the UART driver if it is the first time this function is
        * called.
        */
        if ( !g_stdio_uart_init_done )
80000e4c:	9101a783          	lw	a5,-1776(gp) # 80006570 <g_stdio_uart_init_done>
80000e50:	02079063          	bnez	a5,80000e70 <_write+0x58>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:245
            /******************************************************************************
            * Baud value:
            * This value is calculated using the following equation:
            *      BAUD_VALUE = (CLOCK / (16 * BAUD_RATE)) - 1
            *****************************************************************************/
            UART_init( &g_stdio_uart, MSCC_STDIO_UART_BASE_ADDR, ((SYS_CLK_FREQ/(16 * MSCC_STDIO_BAUD_VALUE))-1), (DATA_8_BITS | NO_PARITY));
80000e54:	00100693          	li	a3,1
80000e58:	02c00613          	li	a2,44
80000e5c:	700015b7          	lui	a1,0x70001
80000e60:	90818513          	addi	a0,gp,-1784 # 80006568 <g_stdio_uart>
80000e64:	174000ef          	jal	ra,80000fd8 <UART_init>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:246
            g_stdio_uart_init_done = 1;
80000e68:	00100713          	li	a4,1
80000e6c:	90e1a823          	sw	a4,-1776(gp) # 80006570 <g_stdio_uart_init_done>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:249
        }

    for (jj = 0; jj < len; jj++)
80000e70:	fe042623          	sw	zero,-20(s0)
80000e74:	0580006f          	j	80000ecc <_write+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:251
    {
        UART_send(&g_stdio_uart, current + jj, 1);
80000e78:	fe842703          	lw	a4,-24(s0)
80000e7c:	fec42783          	lw	a5,-20(s0)
80000e80:	00f707b3          	add	a5,a4,a5
80000e84:	00100613          	li	a2,1
80000e88:	00078593          	mv	a1,a5
80000e8c:	90818513          	addi	a0,gp,-1784 # 80006568 <g_stdio_uart>
80000e90:	260000ef          	jal	ra,800010f0 <UART_send>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:252
        if (current[jj] == '\n')
80000e94:	fe842703          	lw	a4,-24(s0)
80000e98:	fec42783          	lw	a5,-20(s0)
80000e9c:	00f707b3          	add	a5,a4,a5
80000ea0:	0007c703          	lbu	a4,0(a5)
80000ea4:	00a00793          	li	a5,10
80000ea8:	00f71c63          	bne	a4,a5,80000ec0 <_write+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:254
        {
            UART_send(&g_stdio_uart, (const uint8_t *)"\r", 1);
80000eac:	00100613          	li	a2,1
80000eb0:	800067b7          	lui	a5,0x80006
80000eb4:	1d078593          	addi	a1,a5,464 # 800061d0 <__stack_top+0xfffc5780>
80000eb8:	90818513          	addi	a0,gp,-1784 # 80006568 <g_stdio_uart>
80000ebc:	234000ef          	jal	ra,800010f0 <UART_send>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 2)
    for (jj = 0; jj < len; jj++)
80000ec0:	fec42783          	lw	a5,-20(s0)
80000ec4:	00178793          	addi	a5,a5,1
80000ec8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 1)
80000ecc:	fec42703          	lw	a4,-20(s0)
80000ed0:	fd442783          	lw	a5,-44(s0)
80000ed4:	faf762e3          	bltu	a4,a5,80000e78 <_write+0x60>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:257
        }
    }
    return len;
80000ed8:	fd442783          	lw	a5,-44(s0)
80000edc:	0100006f          	j	80000eec <_write+0xd4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:261
  }
#endif

  return stub(EBADF);
80000ee0:	00900513          	li	a0,9
80000ee4:	f05ff0ef          	jal	ra,80000de8 <stub>
80000ee8:	00050793          	mv	a5,a0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:262
}
80000eec:	00078513          	mv	a0,a5
80000ef0:	02c12083          	lw	ra,44(sp)
80000ef4:	02812403          	lw	s0,40(sp)
80000ef8:	03010113          	addi	sp,sp,48
80000efc:	00008067          	ret

80000f00 <HW_set_32bit_reg>:
HW_set_32bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:36
 *
 * a0:   addr_t reg_addr
 * a1:   uint32_t value
 */
HW_set_32bit_reg:
    sw a1, 0(a0)
80000f00:	00b52023          	sw	a1,0(a0) # 44000000 <RAM_SIZE+0x43f80000>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:37
    ret
80000f04:	00008067          	ret

80000f08 <HW_get_32bit_reg>:
HW_get_32bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:47
 *
 * R0:   addr_t reg_addr
 * @return          32 bits value read from the peripheral register.
 */
HW_get_32bit_reg:
    lw a0, 0(a0)
80000f08:	00052503          	lw	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:48
    ret
80000f0c:	00008067          	ret

80000f10 <HW_set_32bit_reg_field>:
HW_set_32bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:60
 * a1:   int_fast8_t shift
 * a2:   uint32_t mask
 * a3:   uint32_t value
 */
HW_set_32bit_reg_field:
    mv t3, a3
80000f10:	00068e13          	mv	t3,a3
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:61
    sll t3, t3, a1
80000f14:	00be1e33          	sll	t3,t3,a1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:62
    and  t3, t3, a2
80000f18:	00ce7e33          	and	t3,t3,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:63
    lw t1, 0(a0)
80000f1c:	00052303          	lw	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:64
    mv t2, a2
80000f20:	00060393          	mv	t2,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:65
    not t2, t2
80000f24:	fff3c393          	not	t2,t2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:66
    and t1, t1, t2
80000f28:	00737333          	and	t1,t1,t2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:67
    or t1, t1, t3
80000f2c:	01c36333          	or	t1,t1,t3
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:68
    sw t1, 0(a0)
80000f30:	00652023          	sw	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:69
    ret
80000f34:	00008067          	ret

80000f38 <HW_get_32bit_reg_field>:
HW_get_32bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:83
 *
 * @return          32 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_32bit_reg_field:
    lw a0, 0(a0)
80000f38:	00052503          	lw	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:84
    and a0, a0, a2
80000f3c:	00c57533          	and	a0,a0,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:85
    srl a0, a0, a1
80000f40:	00b55533          	srl	a0,a0,a1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:86
    ret
80000f44:	00008067          	ret

80000f48 <HW_set_16bit_reg>:
HW_set_16bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:96
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast16_t value
 */
HW_set_16bit_reg:
    sh a1, 0(a0)
80000f48:	00b51023          	sh	a1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:97
    ret
80000f4c:	00008067          	ret

80000f50 <HW_get_16bit_reg>:
HW_get_16bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:107
 *
 * a0:   addr_t reg_addr
 * @return          16 bits value read from the peripheral register.
 */
HW_get_16bit_reg:
    lh a0, (a0)
80000f50:	00051503          	lh	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:108
    ret
80000f54:	00008067          	ret

80000f58 <HW_set_16bit_reg_field>:
HW_set_16bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:121
 * a2:   uint_fast16_t mask
 * a3:   uint_fast16_t value
 * @param value     Value to be written in the specified field.
 */
HW_set_16bit_reg_field:
    mv t3, a3
80000f58:	00068e13          	mv	t3,a3
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:122
    sll t3, t3, a1
80000f5c:	00be1e33          	sll	t3,t3,a1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:123
    and  t3, t3, a2
80000f60:	00ce7e33          	and	t3,t3,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:124
    lh t1, 0(a0)
80000f64:	00051303          	lh	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:125
    mv t2, a2
80000f68:	00060393          	mv	t2,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:126
    not t2, t2
80000f6c:	fff3c393          	not	t2,t2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:127
    and t1, t1, t2
80000f70:	00737333          	and	t1,t1,t2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:128
    or t1, t1, t3
80000f74:	01c36333          	or	t1,t1,t3
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:129
    sh t1, 0(a0)
80000f78:	00651023          	sh	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:130
    ret
80000f7c:	00008067          	ret

80000f80 <HW_get_16bit_reg_field>:
HW_get_16bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:144
 *
 * @return          16 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_16bit_reg_field:
    lh a0, 0(a0)
80000f80:	00051503          	lh	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:145
    and a0, a0, a2
80000f84:	00c57533          	and	a0,a0,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:146
    srl a0, a0, a1
80000f88:	00b55533          	srl	a0,a0,a1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:147
    ret
80000f8c:	00008067          	ret

80000f90 <HW_set_8bit_reg>:
HW_set_8bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:157
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast8_t value
 */
HW_set_8bit_reg:
    sb a1, 0(a0)
80000f90:	00b50023          	sb	a1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:158
    ret
80000f94:	00008067          	ret

80000f98 <HW_get_8bit_reg>:
HW_get_8bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:168
 *
 * a0:   addr_t reg_addr
 * @return          8 bits value read from the peripheral register.
 */
HW_get_8bit_reg:
    lb a0, 0(a0)
80000f98:	00050503          	lb	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:169
    ret
80000f9c:	00008067          	ret

80000fa0 <HW_set_8bit_reg_field>:
HW_set_8bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:181
 * a1:   int_fast8_t shift
 * a2:   uint_fast8_t mask
 * a3:   uint_fast8_t value
 */
HW_set_8bit_reg_field:
    mv t3, a3
80000fa0:	00068e13          	mv	t3,a3
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:182
    sll t3, t3, a1
80000fa4:	00be1e33          	sll	t3,t3,a1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:183
    and  t3, t3, a2
80000fa8:	00ce7e33          	and	t3,t3,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:184
    lb t1, 0(a0)
80000fac:	00050303          	lb	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:185
    mv t2, a2
80000fb0:	00060393          	mv	t2,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:186
    not t2, t2
80000fb4:	fff3c393          	not	t2,t2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:187
    and t1, t1, t2
80000fb8:	00737333          	and	t1,t1,t2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:188
    or t1, t1, t3
80000fbc:	01c36333          	or	t1,t1,t3
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:189
    sb t1, 0(a0)
80000fc0:	00650023          	sb	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:190
    ret
80000fc4:	00008067          	ret

80000fc8 <HW_get_8bit_reg_field>:
HW_get_8bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:204
 *
 * @return          8 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_8bit_reg_field:
    lb a0, 0(a0)
80000fc8:	00050503          	lb	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:205
    and a0, a0, a2
80000fcc:	00c57533          	and	a0,a0,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:206
    srl a0, a0, a1
80000fd0:	00b55533          	srl	a0,a0,a1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:207
    ret
80000fd4:	00008067          	ret

80000fd8 <UART_init>:
UART_init():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:46
    UART_instance_t * this_uart,
    addr_t base_addr,
    uint16_t baud_value,
    uint8_t line_config
)
{
80000fd8:	fd010113          	addi	sp,sp,-48
80000fdc:	02112623          	sw	ra,44(sp)
80000fe0:	02812423          	sw	s0,40(sp)
80000fe4:	03010413          	addi	s0,sp,48
80000fe8:	fca42e23          	sw	a0,-36(s0)
80000fec:	fcb42c23          	sw	a1,-40(s0)
80000ff0:	00060793          	mv	a5,a2
80000ff4:	00068713          	mv	a4,a3
80000ff8:	fcf41b23          	sh	a5,-42(s0)
80000ffc:	00070793          	mv	a5,a4
80001000:	fcf40aa3          	sb	a5,-43(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53
    
    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( line_config <= MAX_LINE_CONFIG )
    HAL_ASSERT( baud_value <= MAX_BAUD_VALUE )

    if( ( this_uart != NULL_INSTANCE ) &&
80001004:	fdc42783          	lw	a5,-36(s0)
80001008:	0c078a63          	beqz	a5,800010dc <UART_init+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53 (discriminator 1)
8000100c:	fd544703          	lbu	a4,-43(s0)
80001010:	00700793          	li	a5,7
80001014:	0ce7e463          	bltu	a5,a4,800010dc <UART_init+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:54
        ( line_config <= MAX_LINE_CONFIG ) &&
80001018:	fd645703          	lhu	a4,-42(s0)
8000101c:	000027b7          	lui	a5,0x2
80001020:	0af77e63          	bleu	a5,a4,800010dc <UART_init+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:60
        ( baud_value <= MAX_BAUD_VALUE ) )
    {
        /*
         * Store lower 8-bits of baud value in CTRL1.
         */
        HAL_set_8bit_reg( base_addr, CTRL1, (uint_fast8_t)(baud_value &
80001024:	fd842783          	lw	a5,-40(s0)
80001028:	00878713          	addi	a4,a5,8 # 2008 <HEAP_SIZE-0xdff8>
8000102c:	fd645783          	lhu	a5,-42(s0)
80001030:	0ff7f793          	andi	a5,a5,255
80001034:	00078593          	mv	a1,a5
80001038:	00070513          	mv	a0,a4
8000103c:	f55ff0ef          	jal	ra,80000f90 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:67
    
        /*
         * Extract higher 5-bits of baud value and store in higher 5-bits 
         * of CTRL2, along with line configuration in lower 3 three bits.
         */
        HAL_set_8bit_reg( base_addr, CTRL2, (uint_fast8_t)line_config | 
80001040:	fd842783          	lw	a5,-40(s0)
80001044:	00c78693          	addi	a3,a5,12
80001048:	fd544703          	lbu	a4,-43(s0)
8000104c:	fd645783          	lhu	a5,-42(s0)
80001050:	4057d793          	srai	a5,a5,0x5
80001054:	7f87f793          	andi	a5,a5,2040
80001058:	00f767b3          	or	a5,a4,a5
8000105c:	00078593          	mv	a1,a5
80001060:	00068513          	mv	a0,a3
80001064:	f2dff0ef          	jal	ra,80000f90 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:71
                                           (uint_fast8_t)((baud_value &
                                   BAUDVALUE_MSB) >> BAUDVALUE_SHIFT ) );
    
        this_uart->base_address = base_addr;
80001068:	fdc42783          	lw	a5,-36(s0)
8000106c:	fd842703          	lw	a4,-40(s0)
80001070:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:94
        
        /*
         * Flush the receive FIFO of data that may have been received before the
         * driver was initialized.
         */
        rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001074:	fdc42783          	lw	a5,-36(s0)
80001078:	0007a783          	lw	a5,0(a5)
8000107c:	01078793          	addi	a5,a5,16
80001080:	00078513          	mv	a0,a5
80001084:	f15ff0ef          	jal	ra,80000f98 <HW_get_8bit_reg>
80001088:	00050793          	mv	a5,a0
8000108c:	0027f793          	andi	a5,a5,2
80001090:	fef407a3          	sb	a5,-17(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
                                                    STATUS_RXFULL_MASK;
        while ( rx_full )
80001094:	0380006f          	j	800010cc <UART_init+0xf4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:98
        {
            HAL_get_8bit_reg( this_uart->base_address, RXDATA );
80001098:	fdc42783          	lw	a5,-36(s0)
8000109c:	0007a783          	lw	a5,0(a5)
800010a0:	00478793          	addi	a5,a5,4
800010a4:	00078513          	mv	a0,a5
800010a8:	ef1ff0ef          	jal	ra,80000f98 <HW_get_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:99
            rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
800010ac:	fdc42783          	lw	a5,-36(s0)
800010b0:	0007a783          	lw	a5,0(a5)
800010b4:	01078793          	addi	a5,a5,16
800010b8:	00078513          	mv	a0,a5
800010bc:	eddff0ef          	jal	ra,80000f98 <HW_get_8bit_reg>
800010c0:	00050793          	mv	a5,a0
800010c4:	0027f793          	andi	a5,a5,2
800010c8:	fef407a3          	sb	a5,-17(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
        while ( rx_full )
800010cc:	fef44783          	lbu	a5,-17(s0)
800010d0:	fc0794e3          	bnez	a5,80001098 <UART_init+0xc0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:106
        }

        /*
         * Clear status of the UART instance.
         */
        this_uart->status = (uint8_t)0;
800010d4:	fdc42783          	lw	a5,-36(s0)
800010d8:	00078223          	sb	zero,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:108
    }
}
800010dc:	00000013          	nop
800010e0:	02c12083          	lw	ra,44(sp)
800010e4:	02812403          	lw	s0,40(sp)
800010e8:	03010113          	addi	sp,sp,48
800010ec:	00008067          	ret

800010f0 <UART_send>:
UART_send():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:121
(
    UART_instance_t * this_uart,
    const uint8_t * tx_buffer,
    size_t tx_size
)
{
800010f0:	fd010113          	addi	sp,sp,-48
800010f4:	02112623          	sw	ra,44(sp)
800010f8:	02812423          	sw	s0,40(sp)
800010fc:	03010413          	addi	s0,sp,48
80001100:	fca42e23          	sw	a0,-36(s0)
80001104:	fcb42c23          	sw	a1,-40(s0)
80001108:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( tx_buffer != NULL_BUFFER )
    HAL_ASSERT( tx_size > 0 )
      
    if( (this_uart != NULL_INSTANCE) &&
8000110c:	fdc42783          	lw	a5,-36(s0)
80001110:	08078063          	beqz	a5,80001190 <UART_send+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129 (discriminator 1)
80001114:	fd842783          	lw	a5,-40(s0)
80001118:	06078c63          	beqz	a5,80001190 <UART_send+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:130
        (tx_buffer != NULL_BUFFER)   &&
8000111c:	fd442783          	lw	a5,-44(s0)
80001120:	06078863          	beqz	a5,80001190 <UART_send+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133
        (tx_size > (size_t)0) )
    {
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
80001124:	fe042623          	sw	zero,-20(s0)
80001128:	05c0006f          	j	80001184 <UART_send+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:137 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
8000112c:	fdc42783          	lw	a5,-36(s0)
80001130:	0007a783          	lw	a5,0(a5)
80001134:	01078793          	addi	a5,a5,16
80001138:	00078513          	mv	a0,a5
8000113c:	e5dff0ef          	jal	ra,80000f98 <HW_get_8bit_reg>
80001140:	00050793          	mv	a5,a0
80001144:	0017f793          	andi	a5,a5,1
80001148:	fef405a3          	sb	a5,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:139 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
8000114c:	feb44783          	lbu	a5,-21(s0)
80001150:	fc078ee3          	beqz	a5,8000112c <UART_send+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:141 (discriminator 2)
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
80001154:	fdc42783          	lw	a5,-36(s0)
80001158:	0007a683          	lw	a3,0(a5)
8000115c:	fd842703          	lw	a4,-40(s0)
80001160:	fec42783          	lw	a5,-20(s0)
80001164:	00f707b3          	add	a5,a4,a5
80001168:	0007c783          	lbu	a5,0(a5)
8000116c:	00078593          	mv	a1,a5
80001170:	00068513          	mv	a0,a3
80001174:	e1dff0ef          	jal	ra,80000f90 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 2)
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
80001178:	fec42783          	lw	a5,-20(s0)
8000117c:	00178793          	addi	a5,a5,1
80001180:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 1)
80001184:	fec42703          	lw	a4,-20(s0)
80001188:	fd442783          	lw	a5,-44(s0)
8000118c:	faf760e3          	bltu	a4,a5,8000112c <UART_send+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:145
                              (uint_fast8_t)tx_buffer[char_idx] );
        }
    }
}
80001190:	00000013          	nop
80001194:	02c12083          	lw	ra,44(sp)
80001198:	02812403          	lw	s0,40(sp)
8000119c:	03010113          	addi	sp,sp,48
800011a0:	00008067          	ret

800011a4 <UART_polled_tx_string>:
UART_polled_tx_string():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:239
UART_polled_tx_string
( 
    UART_instance_t * this_uart, 
    const uint8_t * p_sz_string
)
{
800011a4:	fd010113          	addi	sp,sp,-48
800011a8:	02112623          	sw	ra,44(sp)
800011ac:	02812423          	sw	s0,40(sp)
800011b0:	03010413          	addi	s0,sp,48
800011b4:	fca42e23          	sw	a0,-36(s0)
800011b8:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246
    uint8_t tx_ready;

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( p_sz_string != NULL_BUFFER )
    
    if( ( this_uart != NULL_INSTANCE ) && ( p_sz_string != NULL_BUFFER ) )
800011bc:	fdc42783          	lw	a5,-36(s0)
800011c0:	08078063          	beqz	a5,80001240 <UART_polled_tx_string+0x9c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246 (discriminator 1)
800011c4:	fd842783          	lw	a5,-40(s0)
800011c8:	06078c63          	beqz	a5,80001240 <UART_polled_tx_string+0x9c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:248
    {
        char_idx = 0U;
800011cc:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
800011d0:	05c0006f          	j	8000122c <UART_polled_tx_string+0x88>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:253 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
800011d4:	fdc42783          	lw	a5,-36(s0)
800011d8:	0007a783          	lw	a5,0(a5)
800011dc:	01078793          	addi	a5,a5,16
800011e0:	00078513          	mv	a0,a5
800011e4:	db5ff0ef          	jal	ra,80000f98 <HW_get_8bit_reg>
800011e8:	00050793          	mv	a5,a0
800011ec:	0017f793          	andi	a5,a5,1
800011f0:	fef405a3          	sb	a5,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:255 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
800011f4:	feb44783          	lbu	a5,-21(s0)
800011f8:	fc078ee3          	beqz	a5,800011d4 <UART_polled_tx_string+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:257
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
800011fc:	fdc42783          	lw	a5,-36(s0)
80001200:	0007a683          	lw	a3,0(a5)
80001204:	fd842703          	lw	a4,-40(s0)
80001208:	fec42783          	lw	a5,-20(s0)
8000120c:	00f707b3          	add	a5,a4,a5
80001210:	0007c783          	lbu	a5,0(a5)
80001214:	00078593          	mv	a1,a5
80001218:	00068513          	mv	a0,a3
8000121c:	d75ff0ef          	jal	ra,80000f90 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:259
                              (uint_fast8_t)p_sz_string[char_idx] );
            char_idx++;
80001220:	fec42783          	lw	a5,-20(s0)
80001224:	00178793          	addi	a5,a5,1
80001228:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
8000122c:	fd842703          	lw	a4,-40(s0)
80001230:	fec42783          	lw	a5,-20(s0)
80001234:	00f707b3          	add	a5,a4,a5
80001238:	0007c783          	lbu	a5,0(a5)
8000123c:	f8079ce3          	bnez	a5,800011d4 <UART_polled_tx_string+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:262
        }
    }
}
80001240:	00000013          	nop
80001244:	02c12083          	lw	ra,44(sp)
80001248:	02812403          	lw	s0,40(sp)
8000124c:	03010113          	addi	sp,sp,48
80001250:	00008067          	ret

80001254 <pvPortMalloc>:
pvPortMalloc():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:151
}
/*-----------------------------------------------------------*/


void *pvPortMalloc( size_t xWantedSize )
{
80001254:	fc010113          	addi	sp,sp,-64
80001258:	02112e23          	sw	ra,60(sp)
8000125c:	02812c23          	sw	s0,56(sp)
80001260:	04010413          	addi	s0,sp,64
80001264:	fca42623          	sw	a0,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:154
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
80001268:	fe042223          	sw	zero,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:156

	vTaskSuspendAll();
8000126c:	7f5000ef          	jal	ra,80002260 <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:160
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
80001270:	9241a783          	lw	a5,-1756(gp) # 80006584 <xHeapHasBeenInitialised.2777>
80001274:	00079863          	bnez	a5,80001284 <pvPortMalloc+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:162
		{
			prvHeapInit();
80001278:	284000ef          	jal	ra,800014fc <prvHeapInit>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:163
			xHeapHasBeenInitialised = pdTRUE;
8000127c:	00100713          	li	a4,1
80001280:	92e1a223          	sw	a4,-1756(gp) # 80006584 <xHeapHasBeenInitialised.2777>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:168
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
80001284:	fcc42783          	lw	a5,-52(s0)
80001288:	02078a63          	beqz	a5,800012bc <pvPortMalloc+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:170
		{
			xWantedSize += heapSTRUCT_SIZE;
8000128c:	00800793          	li	a5,8
80001290:	00078713          	mv	a4,a5
80001294:	fcc42783          	lw	a5,-52(s0)
80001298:	00e787b3          	add	a5,a5,a4
8000129c:	fcf42623          	sw	a5,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:173

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
800012a0:	fcc42783          	lw	a5,-52(s0)
800012a4:	0037f793          	andi	a5,a5,3
800012a8:	00078a63          	beqz	a5,800012bc <pvPortMalloc+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:176
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
800012ac:	fcc42783          	lw	a5,-52(s0)
800012b0:	ffc7f793          	andi	a5,a5,-4
800012b4:	00478793          	addi	a5,a5,4
800012b8:	fcf42623          	sw	a5,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
800012bc:	fcc42783          	lw	a5,-52(s0)
800012c0:	14078463          	beqz	a5,80001408 <pvPortMalloc+0x1b4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180 (discriminator 1)
800012c4:	fcc42703          	lw	a4,-52(s0)
800012c8:	000197b7          	lui	a5,0x19
800012cc:	ffb78793          	addi	a5,a5,-5 # 18ffb <HEAP_SIZE+0x8ffb>
800012d0:	12e7ec63          	bltu	a5,a4,80001408 <pvPortMalloc+0x1b4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:184
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
800012d4:	91418793          	addi	a5,gp,-1772 # 80006574 <xStart>
800012d8:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:185
			pxBlock = xStart.pxNextFreeBlock;
800012dc:	9141a783          	lw	a5,-1772(gp) # 80006574 <xStart>
800012e0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
800012e4:	0180006f          	j	800012fc <pvPortMalloc+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:188
			{
				pxPreviousBlock = pxBlock;
800012e8:	fec42783          	lw	a5,-20(s0)
800012ec:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:189
				pxBlock = pxBlock->pxNextFreeBlock;
800012f0:	fec42783          	lw	a5,-20(s0)
800012f4:	0007a783          	lw	a5,0(a5)
800012f8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
800012fc:	fec42783          	lw	a5,-20(s0)
80001300:	0047a783          	lw	a5,4(a5)
80001304:	fcc42703          	lw	a4,-52(s0)
80001308:	00e7f863          	bleu	a4,a5,80001318 <pvPortMalloc+0xc4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186 (discriminator 1)
8000130c:	fec42783          	lw	a5,-20(s0)
80001310:	0007a783          	lw	a5,0(a5)
80001314:	fc079ae3          	bnez	a5,800012e8 <pvPortMalloc+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:193
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
80001318:	fec42703          	lw	a4,-20(s0)
8000131c:	91c18793          	addi	a5,gp,-1764 # 8000657c <xEnd>
80001320:	0ef70463          	beq	a4,a5,80001408 <pvPortMalloc+0x1b4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:197
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
80001324:	fe842783          	lw	a5,-24(s0)
80001328:	0007a783          	lw	a5,0(a5)
8000132c:	00800713          	li	a4,8
80001330:	00e787b3          	add	a5,a5,a4
80001334:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:201

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
80001338:	fec42783          	lw	a5,-20(s0)
8000133c:	0007a703          	lw	a4,0(a5)
80001340:	fe842783          	lw	a5,-24(s0)
80001344:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:204

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
80001348:	fec42783          	lw	a5,-20(s0)
8000134c:	0047a703          	lw	a4,4(a5)
80001350:	fcc42783          	lw	a5,-52(s0)
80001354:	40f707b3          	sub	a5,a4,a5
80001358:	00800713          	li	a4,8
8000135c:	00171713          	slli	a4,a4,0x1
80001360:	08f77663          	bleu	a5,a4,800013ec <pvPortMalloc+0x198>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:209
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
80001364:	fec42703          	lw	a4,-20(s0)
80001368:	fcc42783          	lw	a5,-52(s0)
8000136c:	00f707b3          	add	a5,a4,a5
80001370:	fcf42e23          	sw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:213

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
80001374:	fec42783          	lw	a5,-20(s0)
80001378:	0047a703          	lw	a4,4(a5)
8000137c:	fcc42783          	lw	a5,-52(s0)
80001380:	40f70733          	sub	a4,a4,a5
80001384:	fdc42783          	lw	a5,-36(s0)
80001388:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:214
					pxBlock->xBlockSize = xWantedSize;
8000138c:	fec42783          	lw	a5,-20(s0)
80001390:	fcc42703          	lw	a4,-52(s0)
80001394:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
80001398:	fdc42783          	lw	a5,-36(s0)
8000139c:	0047a783          	lw	a5,4(a5)
800013a0:	fcf42c23          	sw	a5,-40(s0)
800013a4:	91418793          	addi	a5,gp,-1772 # 80006574 <xStart>
800013a8:	fef42023          	sw	a5,-32(s0)
800013ac:	0100006f          	j	800013bc <pvPortMalloc+0x168>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 3)
800013b0:	fe042783          	lw	a5,-32(s0)
800013b4:	0007a783          	lw	a5,0(a5)
800013b8:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 1)
800013bc:	fe042783          	lw	a5,-32(s0)
800013c0:	0007a783          	lw	a5,0(a5)
800013c4:	0047a783          	lw	a5,4(a5)
800013c8:	fd842703          	lw	a4,-40(s0)
800013cc:	fee7e2e3          	bltu	a5,a4,800013b0 <pvPortMalloc+0x15c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 4)
800013d0:	fe042783          	lw	a5,-32(s0)
800013d4:	0007a703          	lw	a4,0(a5)
800013d8:	fdc42783          	lw	a5,-36(s0)
800013dc:	00e7a023          	sw	a4,0(a5)
800013e0:	fe042783          	lw	a5,-32(s0)
800013e4:	fdc42703          	lw	a4,-36(s0)
800013e8:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:220
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
800013ec:	800067b7          	lui	a5,0x80006
800013f0:	4607a703          	lw	a4,1120(a5) # 80006460 <__stack_top+0xfffc5a10>
800013f4:	fec42783          	lw	a5,-20(s0)
800013f8:	0047a783          	lw	a5,4(a5)
800013fc:	40f70733          	sub	a4,a4,a5
80001400:	800067b7          	lui	a5,0x80006
80001404:	46e7a023          	sw	a4,1120(a5) # 80006460 <__stack_top+0xfffc5a10>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:226
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
80001408:	681000ef          	jal	ra,80002288 <xTaskResumeAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:230

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
8000140c:	fe442783          	lw	a5,-28(s0)
80001410:	00079463          	bnez	a5,80001418 <pvPortMalloc+0x1c4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:233
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
80001414:	245040ef          	jal	ra,80005e58 <vApplicationMallocFailedHook>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:238
		}
	}
	#endif

	return pvReturn;
80001418:	fe442783          	lw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:239
}
8000141c:	00078513          	mv	a0,a5
80001420:	03c12083          	lw	ra,60(sp)
80001424:	03812403          	lw	s0,56(sp)
80001428:	04010113          	addi	sp,sp,64
8000142c:	00008067          	ret

80001430 <vPortFree>:
vPortFree():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:243
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
80001430:	fd010113          	addi	sp,sp,-48
80001434:	02112623          	sw	ra,44(sp)
80001438:	02812423          	sw	s0,40(sp)
8000143c:	03010413          	addi	s0,sp,48
80001440:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:244
uint8_t *puc = ( uint8_t * ) pv;
80001444:	fdc42783          	lw	a5,-36(s0)
80001448:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:247
BlockLink_t *pxLink;

	if( pv != NULL )
8000144c:	fdc42783          	lw	a5,-36(s0)
80001450:	08078c63          	beqz	a5,800014e8 <vPortFree+0xb8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:251
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
80001454:	00800793          	li	a5,8
80001458:	40f007b3          	neg	a5,a5
8000145c:	fe842703          	lw	a4,-24(s0)
80001460:	00f707b3          	add	a5,a4,a5
80001464:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:255

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
80001468:	fe842783          	lw	a5,-24(s0)
8000146c:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:257

		vTaskSuspendAll();
80001470:	5f1000ef          	jal	ra,80002260 <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
80001474:	fe442783          	lw	a5,-28(s0)
80001478:	0047a783          	lw	a5,4(a5)
8000147c:	fef42023          	sw	a5,-32(s0)
80001480:	91418793          	addi	a5,gp,-1772 # 80006574 <xStart>
80001484:	fef42623          	sw	a5,-20(s0)
80001488:	0100006f          	j	80001498 <vPortFree+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 3)
8000148c:	fec42783          	lw	a5,-20(s0)
80001490:	0007a783          	lw	a5,0(a5)
80001494:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 1)
80001498:	fec42783          	lw	a5,-20(s0)
8000149c:	0007a783          	lw	a5,0(a5)
800014a0:	0047a783          	lw	a5,4(a5)
800014a4:	fe042703          	lw	a4,-32(s0)
800014a8:	fee7e2e3          	bltu	a5,a4,8000148c <vPortFree+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 4)
800014ac:	fec42783          	lw	a5,-20(s0)
800014b0:	0007a703          	lw	a4,0(a5)
800014b4:	fe442783          	lw	a5,-28(s0)
800014b8:	00e7a023          	sw	a4,0(a5)
800014bc:	fec42783          	lw	a5,-20(s0)
800014c0:	fe442703          	lw	a4,-28(s0)
800014c4:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:261 (discriminator 4)
			xFreeBytesRemaining += pxLink->xBlockSize;
800014c8:	fe442783          	lw	a5,-28(s0)
800014cc:	0047a703          	lw	a4,4(a5)
800014d0:	800067b7          	lui	a5,0x80006
800014d4:	4607a783          	lw	a5,1120(a5) # 80006460 <__stack_top+0xfffc5a10>
800014d8:	00f70733          	add	a4,a4,a5
800014dc:	800067b7          	lui	a5,0x80006
800014e0:	46e7a023          	sw	a4,1120(a5) # 80006460 <__stack_top+0xfffc5a10>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:264 (discriminator 4)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
800014e4:	5a5000ef          	jal	ra,80002288 <xTaskResumeAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:266
	}
}
800014e8:	00000013          	nop
800014ec:	02c12083          	lw	ra,44(sp)
800014f0:	02812403          	lw	s0,40(sp)
800014f4:	03010113          	addi	sp,sp,48
800014f8:	00008067          	ret

800014fc <prvHeapInit>:
prvHeapInit():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:282
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
800014fc:	fe010113          	addi	sp,sp,-32
80001500:	00812e23          	sw	s0,28(sp)
80001504:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:287
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
80001508:	800067b7          	lui	a5,0x80006
8000150c:	5d478793          	addi	a5,a5,1492 # 800065d4 <__stack_top+0xfffc5b84>
80001510:	ffc7f793          	andi	a5,a5,-4
80001514:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:291

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
80001518:	fec42703          	lw	a4,-20(s0)
8000151c:	90e1aa23          	sw	a4,-1772(gp) # 80006574 <xStart>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:292
	xStart.xBlockSize = ( size_t ) 0;
80001520:	91418793          	addi	a5,gp,-1772 # 80006574 <xStart>
80001524:	0007a223          	sw	zero,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:295

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
80001528:	91c18793          	addi	a5,gp,-1764 # 8000657c <xEnd>
8000152c:	00019737          	lui	a4,0x19
80001530:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
80001534:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:296
	xEnd.pxNextFreeBlock = NULL;
80001538:	9001ae23          	sw	zero,-1764(gp) # 8000657c <xEnd>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:300

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
8000153c:	fec42783          	lw	a5,-20(s0)
80001540:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:301
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
80001544:	fe842783          	lw	a5,-24(s0)
80001548:	00019737          	lui	a4,0x19
8000154c:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
80001550:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:302
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
80001554:	fe842783          	lw	a5,-24(s0)
80001558:	91c18713          	addi	a4,gp,-1764 # 8000657c <xEnd>
8000155c:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:303
}
80001560:	00000013          	nop
80001564:	01c12403          	lw	s0,28(sp)
80001568:	02010113          	addi	sp,sp,32
8000156c:	00008067          	ret

80001570 <raise_soft_interrupt>:
raise_soft_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:227
/*==============================================================================
 * The function raise_soft_interrupt() raises a synchronous software interrupt by
 * writing into the MSIP register.
 */
static inline void raise_soft_interrupt()
{
80001570:	fe010113          	addi	sp,sp,-32
80001574:	00812e23          	sw	s0,28(sp)
80001578:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:228
    unsigned long hart_id = read_csr(mhartid);
8000157c:	f14027f3          	csrr	a5,mhartid
80001580:	fef42623          	sw	a5,-20(s0)
80001584:	fec42783          	lw	a5,-20(s0)
80001588:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:231

    /*You need to make sure that the global interrupt is enabled*/
    set_csr(mie, MIP_MSIP);       /*Enable software interrupt bit */
8000158c:	304467f3          	csrrsi	a5,mie,8
80001590:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:232
    PRCI->MSIP[hart_id] = 0x01;   /*raise soft interrupt for hart0*/
80001594:	44000737          	lui	a4,0x44000
80001598:	fe842783          	lw	a5,-24(s0)
8000159c:	00279793          	slli	a5,a5,0x2
800015a0:	00f707b3          	add	a5,a4,a5
800015a4:	00100713          	li	a4,1
800015a8:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:233
}
800015ac:	00000013          	nop
800015b0:	01c12403          	lw	s0,28(sp)
800015b4:	02010113          	addi	sp,sp,32
800015b8:	00008067          	ret

800015bc <vPortEnterCritical>:
vPortEnterCritical():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:132
 * Used to catch tasks that attempt to return from their implementing function.
 */
static void prvTaskExitError( void );

void vPortEnterCritical( void )
{
800015bc:	ff010113          	addi	sp,sp,-16
800015c0:	00812623          	sw	s0,12(sp)
800015c4:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:133
	portDISABLE_INTERRUPTS();
800015c8:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:134
	uxCriticalNesting++;
800015cc:	800067b7          	lui	a5,0x80006
800015d0:	4647a783          	lw	a5,1124(a5) # 80006464 <__stack_top+0xfffc5a14>
800015d4:	00178713          	addi	a4,a5,1
800015d8:	800067b7          	lui	a5,0x80006
800015dc:	46e7a223          	sw	a4,1124(a5) # 80006464 <__stack_top+0xfffc5a14>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:135
}
800015e0:	00000013          	nop
800015e4:	00c12403          	lw	s0,12(sp)
800015e8:	01010113          	addi	sp,sp,16
800015ec:	00008067          	ret

800015f0 <vPortExitCritical>:
vPortExitCritical():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:139
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
800015f0:	ff010113          	addi	sp,sp,-16
800015f4:	00812623          	sw	s0,12(sp)
800015f8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:140
	uxCriticalNesting--;
800015fc:	800067b7          	lui	a5,0x80006
80001600:	4647a783          	lw	a5,1124(a5) # 80006464 <__stack_top+0xfffc5a14>
80001604:	fff78713          	addi	a4,a5,-1
80001608:	800067b7          	lui	a5,0x80006
8000160c:	46e7a223          	sw	a4,1124(a5) # 80006464 <__stack_top+0xfffc5a14>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:141
	if( uxCriticalNesting == 0 )
80001610:	800067b7          	lui	a5,0x80006
80001614:	4647a783          	lw	a5,1124(a5) # 80006464 <__stack_top+0xfffc5a14>
80001618:	00079463          	bnez	a5,80001620 <vPortExitCritical+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:143
	{
		portENABLE_INTERRUPTS();
8000161c:	30046073          	csrsi	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:145
	}
}
80001620:	00000013          	nop
80001624:	00c12403          	lw	s0,12(sp)
80001628:	01010113          	addi	sp,sp,16
8000162c:	00008067          	ret

80001630 <prvSetNextTimerInterrupt>:
prvSetNextTimerInterrupt():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:151
/*-----------------------------------------------------------*/

/* Sets the next timer interrupt
 * Reads previous timer compare register, and adds tickrate */
static void prvSetNextTimerInterrupt(void)
{
80001630:	fe010113          	addi	sp,sp,-32
80001634:	00812e23          	sw	s0,28(sp)
80001638:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:154
	uint64_t time;

	time = mtime->val_low;
8000163c:	80006637          	lui	a2,0x80006
80001640:	46862603          	lw	a2,1128(a2) # 80006468 <__stack_top+0xfffc5a18>
80001644:	00062603          	lw	a2,0(a2)
80001648:	fec42423          	sw	a2,-24(s0)
8000164c:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:155
	time |= ((uint64_t)mtime->val_high << 32);
80001650:	80006637          	lui	a2,0x80006
80001654:	46862603          	lw	a2,1128(a2) # 80006468 <__stack_top+0xfffc5a18>
80001658:	00462603          	lw	a2,4(a2)
8000165c:	00060693          	mv	a3,a2
80001660:	00000713          	li	a4,0
80001664:	00069813          	slli	a6,a3,0x0
80001668:	00000793          	li	a5,0
8000166c:	fe842703          	lw	a4,-24(s0)
80001670:	00f76733          	or	a4,a4,a5
80001674:	fee42423          	sw	a4,-24(s0)
80001678:	fec42703          	lw	a4,-20(s0)
8000167c:	010767b3          	or	a5,a4,a6
80001680:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:157

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
80001684:	fe842683          	lw	a3,-24(s0)
80001688:	fec42703          	lw	a4,-20(s0)
8000168c:	000145b7          	lui	a1,0x14
80001690:	43858593          	addi	a1,a1,1080 # 14438 <HEAP_SIZE+0x4438>
80001694:	00000613          	li	a2,0
80001698:	00b687b3          	add	a5,a3,a1
8000169c:	00078513          	mv	a0,a5
800016a0:	00d53533          	sltu	a0,a0,a3
800016a4:	00c70833          	add	a6,a4,a2
800016a8:	01050733          	add	a4,a0,a6
800016ac:	00070813          	mv	a6,a4
800016b0:	fef42423          	sw	a5,-24(s0)
800016b4:	ff042623          	sw	a6,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:159

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
800016b8:	800067b7          	lui	a5,0x80006
800016bc:	46c7a783          	lw	a5,1132(a5) # 8000646c <__stack_top+0xfffc5a1c>
800016c0:	fe842703          	lw	a4,-24(s0)
800016c4:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:160
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
800016c8:	fec42783          	lw	a5,-20(s0)
800016cc:	0007d313          	srli	t1,a5,0x0
800016d0:	00000393          	li	t2,0
800016d4:	800067b7          	lui	a5,0x80006
800016d8:	46c7a783          	lw	a5,1132(a5) # 8000646c <__stack_top+0xfffc5a1c>
800016dc:	00030713          	mv	a4,t1
800016e0:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:163

	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
800016e4:	08000793          	li	a5,128
800016e8:	3047a073          	csrs	mie,a5
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:164
}
800016ec:	00000013          	nop
800016f0:	01c12403          	lw	s0,28(sp)
800016f4:	02010113          	addi	sp,sp,32
800016f8:	00008067          	ret

800016fc <vPortSetupTimer>:
vPortSetupTimer():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:169
/*-----------------------------------------------------------*/

/* Sets and enable the timer interrupt */
void vPortSetupTimer(void)
{
800016fc:	fe010113          	addi	sp,sp,-32
80001700:	00812e23          	sw	s0,28(sp)
80001704:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:172
	uint64_t time;

	time = mtime->val_low;
80001708:	80006637          	lui	a2,0x80006
8000170c:	46862603          	lw	a2,1128(a2) # 80006468 <__stack_top+0xfffc5a18>
80001710:	00062603          	lw	a2,0(a2)
80001714:	fec42423          	sw	a2,-24(s0)
80001718:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:173
	time |= ((uint64_t)mtime->val_high << 32);
8000171c:	80006637          	lui	a2,0x80006
80001720:	46862603          	lw	a2,1128(a2) # 80006468 <__stack_top+0xfffc5a18>
80001724:	00462603          	lw	a2,4(a2)
80001728:	00060693          	mv	a3,a2
8000172c:	00000713          	li	a4,0
80001730:	00069813          	slli	a6,a3,0x0
80001734:	00000793          	li	a5,0
80001738:	fe842703          	lw	a4,-24(s0)
8000173c:	00f76733          	or	a4,a4,a5
80001740:	fee42423          	sw	a4,-24(s0)
80001744:	fec42703          	lw	a4,-20(s0)
80001748:	010767b3          	or	a5,a4,a6
8000174c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:175

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
80001750:	fe842683          	lw	a3,-24(s0)
80001754:	fec42703          	lw	a4,-20(s0)
80001758:	000145b7          	lui	a1,0x14
8000175c:	43858593          	addi	a1,a1,1080 # 14438 <HEAP_SIZE+0x4438>
80001760:	00000613          	li	a2,0
80001764:	00b687b3          	add	a5,a3,a1
80001768:	00078513          	mv	a0,a5
8000176c:	00d53533          	sltu	a0,a0,a3
80001770:	00c70833          	add	a6,a4,a2
80001774:	01050733          	add	a4,a0,a6
80001778:	00070813          	mv	a6,a4
8000177c:	fef42423          	sw	a5,-24(s0)
80001780:	ff042623          	sw	a6,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:177

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
80001784:	800067b7          	lui	a5,0x80006
80001788:	46c7a783          	lw	a5,1132(a5) # 8000646c <__stack_top+0xfffc5a1c>
8000178c:	fe842703          	lw	a4,-24(s0)
80001790:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:178
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
80001794:	fec42783          	lw	a5,-20(s0)
80001798:	0007d313          	srli	t1,a5,0x0
8000179c:	00000393          	li	t2,0
800017a0:	800067b7          	lui	a5,0x80006
800017a4:	46c7a783          	lw	a5,1132(a5) # 8000646c <__stack_top+0xfffc5a1c>
800017a8:	00030713          	mv	a4,t1
800017ac:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:182


	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
800017b0:	08000793          	li	a5,128
800017b4:	3047a073          	csrs	mie,a5
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:183
}
800017b8:	00000013          	nop
800017bc:	01c12403          	lw	s0,28(sp)
800017c0:	02010113          	addi	sp,sp,32
800017c4:	00008067          	ret

800017c8 <prvTaskExitError>:
prvTaskExitError():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:187
/*-----------------------------------------------------------*/

void prvTaskExitError( void )
{
800017c8:	ff010113          	addi	sp,sp,-16
800017cc:	00812623          	sw	s0,12(sp)
800017d0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
800017d4:	800067b7          	lui	a5,0x80006
800017d8:	4647a703          	lw	a4,1124(a5) # 80006464 <__stack_top+0xfffc5a14>
800017dc:	fff00793          	li	a5,-1
800017e0:	00f70663          	beq	a4,a5,800017ec <prvTaskExitError+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194 (discriminator 1)
800017e4:	30047073          	csrci	mstatus,8
800017e8:	0000006f          	j	800017e8 <prvTaskExitError+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:195
	portDISABLE_INTERRUPTS();
800017ec:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:196 (discriminator 2)
	for( ;; );
800017f0:	0000006f          	j	800017f0 <prvTaskExitError+0x28>

800017f4 <pxPortInitialiseStack>:
pxPortInitialiseStack():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:220

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
800017f4:	fe010113          	addi	sp,sp,-32
800017f8:	00812e23          	sw	s0,28(sp)
800017fc:	02010413          	addi	s0,sp,32
80001800:	fea42623          	sw	a0,-20(s0)
80001804:	feb42423          	sw	a1,-24(s0)
80001808:	fec42223          	sw	a2,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:224
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	register int *tp asm("x3");
	pxTopOfStack--;
8000180c:	fec42783          	lw	a5,-20(s0)
80001810:	ffc78793          	addi	a5,a5,-4
80001814:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:225
	*pxTopOfStack = (portSTACK_TYPE)pxCode;			/* Start address */
80001818:	fe842703          	lw	a4,-24(s0)
8000181c:	fec42783          	lw	a5,-20(s0)
80001820:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:226
	pxTopOfStack -= 22;
80001824:	fec42783          	lw	a5,-20(s0)
80001828:	fa878793          	addi	a5,a5,-88
8000182c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:227
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;	/* Register a0 */
80001830:	fe442703          	lw	a4,-28(s0)
80001834:	fec42783          	lw	a5,-20(s0)
80001838:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:228
	pxTopOfStack -= 6;
8000183c:	fec42783          	lw	a5,-20(s0)
80001840:	fe878793          	addi	a5,a5,-24
80001844:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:229
	*pxTopOfStack = (portSTACK_TYPE)tp; /* Register thread pointer */
80001848:	00018793          	mv	a5,gp
8000184c:	00078713          	mv	a4,a5
80001850:	fec42783          	lw	a5,-20(s0)
80001854:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:230
	pxTopOfStack -= 3;
80001858:	fec42783          	lw	a5,-20(s0)
8000185c:	ff478793          	addi	a5,a5,-12
80001860:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:231
	*pxTopOfStack = (portSTACK_TYPE)prvTaskExitError; /* Register ra */
80001864:	800017b7          	lui	a5,0x80001
80001868:	7c878713          	addi	a4,a5,1992 # 800017c8 <__stack_top+0xfffc0d78>
8000186c:	fec42783          	lw	a5,-20(s0)
80001870:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:233

	return pxTopOfStack;
80001874:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:234
}
80001878:	00078513          	mv	a0,a5
8000187c:	01c12403          	lw	s0,28(sp)
80001880:	02010113          	addi	sp,sp,32
80001884:	00008067          	ret

80001888 <SysTick_Handler>:
SysTick_Handler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:238
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void )
{
80001888:	ff010113          	addi	sp,sp,-16
8000188c:	00112623          	sw	ra,12(sp)
80001890:	00812423          	sw	s0,8(sp)
80001894:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:241
	/*Save Context*/
	{
		__asm volatile("lw	t0, pxCurrentTCB");
80001898:	92c1a283          	lw	t0,-1748(gp) # 8000658c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:242
		__asm volatile("sw	a2, 0x0(t0)");
8000189c:	00c2a023          	sw	a2,0(t0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:246
	}

	/* Increment the RTOS tick. */
	prvSetNextTimerInterrupt();
800018a0:	d91ff0ef          	jal	ra,80001630 <prvSetNextTimerInterrupt>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:249

	/*Switch task */
	if( xTaskIncrementTick() != pdFALSE )
800018a4:	37d000ef          	jal	ra,80002420 <xTaskIncrementTick>
800018a8:	00050793          	mv	a5,a0
800018ac:	00078463          	beqz	a5,800018b4 <SysTick_Handler+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:251
	{
		vTaskSwitchContext();
800018b0:	55d000ef          	jal	ra,8000260c <vTaskSwitchContext>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:256
	}

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
800018b4:	92c1a103          	lw	sp,-1748(gp) # 8000658c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:257
		__asm volatile("lw	sp, 0x0(sp)");
800018b8:	00012103          	lw	sp,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:259

		__asm volatile("lw	t0, 31 * 4(sp)");
800018bc:	07c12283          	lw	t0,124(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:260
		__asm volatile("csrw	mepc, t0");
800018c0:	34129073          	csrw	mepc,t0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:262

		__asm volatile("lw	x1, 0x0(sp)");
800018c4:	00012083          	lw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:263
		__asm volatile("lw   x4, 3 * 4(sp)");
800018c8:	00c12203          	lw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:264
		__asm volatile("lw   x5, 4 * 4(sp)");
800018cc:	01012283          	lw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:265
		__asm volatile("lw   x6, 5 * 4(sp)");
800018d0:	01412303          	lw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:266
		__asm volatile("lw   x7, 6 * 4(sp)");
800018d4:	01812383          	lw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:267
		__asm volatile("lw   x8, 7 * 4(sp)");
800018d8:	01c12403          	lw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:268
		__asm volatile("lw   x9, 8 * 4(sp)");
800018dc:	02012483          	lw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:269
		__asm volatile("lw   x10, 9 * 4(sp)");
800018e0:	02412503          	lw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:270
		__asm volatile("lw   x11, 10 * 4(sp)");
800018e4:	02812583          	lw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:271
		__asm volatile("lw   x12, 11 * 4(sp)");
800018e8:	02c12603          	lw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:272
		__asm volatile("lw   x13, 12 * 4(sp)");
800018ec:	03012683          	lw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:273
		__asm volatile("lw   x14, 13 * 4(sp)");
800018f0:	03412703          	lw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:274
		__asm volatile("lw   x15, 14 * 4(sp)");
800018f4:	03812783          	lw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:275
		__asm volatile("lw   x16, 15 * 4(sp)");
800018f8:	03c12803          	lw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:276
		__asm volatile("lw   x17, 16 * 4(sp)");
800018fc:	04012883          	lw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:277
		__asm volatile("lw   x18, 17 * 4(sp)");
80001900:	04412903          	lw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:278
		__asm volatile("lw   x19, 18 * 4(sp)");
80001904:	04812983          	lw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:279
		__asm volatile("lw   x20, 19 * 4(sp)");
80001908:	04c12a03          	lw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:280
		__asm volatile("lw   x21, 20 * 4(sp)");
8000190c:	05012a83          	lw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:281
		__asm volatile("lw   x22, 21 * 4(sp)");
80001910:	05412b03          	lw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:282
		__asm volatile("lw   x23, 22 * 4(sp)");
80001914:	05812b83          	lw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:283
		__asm volatile("lw   x24, 23 * 4(sp)");
80001918:	05c12c03          	lw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:284
		__asm volatile("lw   x25, 24 * 4(sp)");
8000191c:	06012c83          	lw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:285
		__asm volatile("lw   x26, 25 * 4(sp)");
80001920:	06412d03          	lw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:286
		__asm volatile("lw   x27, 26 * 4(sp)");
80001924:	06812d83          	lw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:287
		__asm volatile("lw   x28, 27 * 4(sp)");
80001928:	06c12e03          	lw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:288
		__asm volatile("lw   x29, 28 * 4(sp)");
8000192c:	07012e83          	lw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:289
		__asm volatile("lw   x30, 29 * 4(sp)");
80001930:	07412f03          	lw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:290
		__asm volatile("lw   x31, 30 * 4(sp)");
80001934:	07812f83          	lw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:292

		__asm volatile("addi	sp, sp, 4 * 32");
80001938:	08010113          	addi	sp,sp,128
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:294

		__asm volatile("mret");
8000193c:	30200073          	mret
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:296
	}
}
80001940:	00000013          	nop
80001944:	00c12083          	lw	ra,12(sp)
80001948:	00812403          	lw	s0,8(sp)
8000194c:	01010113          	addi	sp,sp,16
80001950:	00008067          	ret

80001954 <xPortStartScheduler>:
xPortStartScheduler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:299
uint32_t g_startscheduler = 0;
BaseType_t xPortStartScheduler( void )
{
80001954:	ff010113          	addi	sp,sp,-16
80001958:	00112623          	sw	ra,12(sp)
8000195c:	00812423          	sw	s0,8(sp)
80001960:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:300
	vPortSetupTimer();
80001964:	d99ff0ef          	jal	ra,800016fc <vPortSetupTimer>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:301
	uxCriticalNesting = 0;
80001968:	800067b7          	lui	a5,0x80006
8000196c:	4607a223          	sw	zero,1124(a5) # 80006464 <__stack_top+0xfffc5a14>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:302
	g_startscheduler = 1;
80001970:	00100713          	li	a4,1
80001974:	92e1a423          	sw	a4,-1752(gp) # 80006588 <g_startscheduler>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:303
	__enable_irq();
80001978:	a09fe0ef          	jal	ra,80000380 <__enable_irq>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:305

	raise_soft_interrupt();
8000197c:	bf5ff0ef          	jal	ra,80001570 <raise_soft_interrupt>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:308

	/*Should not get here*/
	return pdFALSE;
80001980:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:309
}
80001984:	00078513          	mv	a0,a5
80001988:	00c12083          	lw	ra,12(sp)
8000198c:	00812403          	lw	s0,8(sp)
80001990:	01010113          	addi	sp,sp,16
80001994:	00008067          	ret

80001998 <Software_IRQHandler>:
Software_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:312

void Software_IRQHandler(void)
{
80001998:	ff010113          	addi	sp,sp,-16
8000199c:	00112623          	sw	ra,12(sp)
800019a0:	00812423          	sw	s0,8(sp)
800019a4:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:313
	if(1 == g_startscheduler)
800019a8:	9281a703          	lw	a4,-1752(gp) # 80006588 <g_startscheduler>
800019ac:	00100793          	li	a5,1
800019b0:	00f71863          	bne	a4,a5,800019c0 <Software_IRQHandler+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:315
	{
		g_startscheduler = 2; //skip the save n switch context first time when scheduler is starting.
800019b4:	00200713          	li	a4,2
800019b8:	92e1a423          	sw	a4,-1752(gp) # 80006588 <g_startscheduler>
800019bc:	0100006f          	j	800019cc <Software_IRQHandler+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:321
	}
	else
	{
		/*Save Context*/
		{
			__asm volatile("lw	t0, pxCurrentTCB");
800019c0:	92c1a283          	lw	t0,-1748(gp) # 8000658c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:322
			__asm volatile("sw	a2, 0x0(t0)");
800019c4:	00c2a023          	sw	a2,0(t0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:325
		}

		vTaskSwitchContext();
800019c8:	445000ef          	jal	ra,8000260c <vTaskSwitchContext>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:329
	}

	// Moved by Imperas (was previously causing corruption of a5)
	PRCI->MSIP[0] = 0x00;
800019cc:	440007b7          	lui	a5,0x44000
800019d0:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:333

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
800019d4:	92c1a103          	lw	sp,-1748(gp) # 8000658c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:334
		__asm volatile("lw	sp, 0x0(sp)");
800019d8:	00012103          	lw	sp,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:336

		__asm volatile("lw	t0, 31 * 4(sp)");
800019dc:	07c12283          	lw	t0,124(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:337
		__asm volatile("csrw	mepc, t0");
800019e0:	34129073          	csrw	mepc,t0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:339

		__asm volatile("lw	x1, 0x0(sp)");
800019e4:	00012083          	lw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:340
		__asm volatile("lw   x4, 3 * 4(sp)");
800019e8:	00c12203          	lw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:341
		__asm volatile("lw   x5, 4 * 4(sp)");
800019ec:	01012283          	lw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:342
		__asm volatile("lw   x6, 5 * 4(sp)");
800019f0:	01412303          	lw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:343
		__asm volatile("lw   x7, 6 * 4(sp)");
800019f4:	01812383          	lw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:344
		__asm volatile("lw   x8, 7 * 4(sp)");
800019f8:	01c12403          	lw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:345
		__asm volatile("lw   x9, 8 * 4(sp)");
800019fc:	02012483          	lw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:346
		__asm volatile("lw   x10, 9 * 4(sp)");
80001a00:	02412503          	lw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:347
		__asm volatile("lw   x11, 10 * 4(sp)");
80001a04:	02812583          	lw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:348
		__asm volatile("lw   x12, 11 * 4(sp)");
80001a08:	02c12603          	lw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:349
		__asm volatile("lw   x13, 12 * 4(sp)");
80001a0c:	03012683          	lw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:350
		__asm volatile("lw   x14, 13 * 4(sp)");
80001a10:	03412703          	lw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:351
		__asm volatile("lw   x15, 14 * 4(sp)");
80001a14:	03812783          	lw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:352
		__asm volatile("lw   x16, 15 * 4(sp)");
80001a18:	03c12803          	lw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:353
		__asm volatile("lw   x17, 16 * 4(sp)");
80001a1c:	04012883          	lw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:354
		__asm volatile("lw   x18, 17 * 4(sp)");
80001a20:	04412903          	lw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:355
		__asm volatile("lw   x19, 18 * 4(sp)");
80001a24:	04812983          	lw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:356
		__asm volatile("lw   x20, 19 * 4(sp)");
80001a28:	04c12a03          	lw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:357
		__asm volatile("lw   x21, 20 * 4(sp)");
80001a2c:	05012a83          	lw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:358
		__asm volatile("lw   x22, 21 * 4(sp)");
80001a30:	05412b03          	lw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:359
		__asm volatile("lw   x23, 22 * 4(sp)");
80001a34:	05812b83          	lw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:360
		__asm volatile("lw   x24, 23 * 4(sp)");
80001a38:	05c12c03          	lw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:361
		__asm volatile("lw   x25, 24 * 4(sp)");
80001a3c:	06012c83          	lw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:362
		__asm volatile("lw   x26, 25 * 4(sp)");
80001a40:	06412d03          	lw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:363
		__asm volatile("lw   x27, 26 * 4(sp)");
80001a44:	06812d83          	lw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:364
		__asm volatile("lw   x28, 27 * 4(sp)");
80001a48:	06c12e03          	lw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:365
		__asm volatile("lw   x29, 28 * 4(sp)");
80001a4c:	07012e83          	lw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:366
		__asm volatile("lw   x30, 29 * 4(sp)");
80001a50:	07412f03          	lw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:367
		__asm volatile("lw   x31, 30 * 4(sp)");
80001a54:	07812f83          	lw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:369

		__asm volatile("addi	sp, sp, 4 * 32");
80001a58:	08010113          	addi	sp,sp,128
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:374

	    // Moved by Imperas (causing corruption of a5 at this position)
		//PRCI->MSIP[0] = 0x00;

		__asm volatile("mret");
80001a5c:	30200073          	mret
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:376
	}
}
80001a60:	00000013          	nop
80001a64:	00c12083          	lw	ra,12(sp)
80001a68:	00812403          	lw	s0,8(sp)
80001a6c:	01010113          	addi	sp,sp,16
80001a70:	00008067          	ret

80001a74 <vPortYield>:
vPortYield():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:379

void vPortYield( void )
{
80001a74:	ff010113          	addi	sp,sp,-16
80001a78:	00112623          	sw	ra,12(sp)
80001a7c:	00812423          	sw	s0,8(sp)
80001a80:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:380
	raise_soft_interrupt();
80001a84:	aedff0ef          	jal	ra,80001570 <raise_soft_interrupt>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:381
}
80001a88:	00000013          	nop
80001a8c:	00c12083          	lw	ra,12(sp)
80001a90:	00812403          	lw	s0,8(sp)
80001a94:	01010113          	addi	sp,sp,16
80001a98:	00008067          	ret

80001a9c <vListInitialise>:
vListInitialise():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:80
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
80001a9c:	fe010113          	addi	sp,sp,-32
80001aa0:	00812e23          	sw	s0,28(sp)
80001aa4:	02010413          	addi	s0,sp,32
80001aa8:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:84
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001aac:	fec42783          	lw	a5,-20(s0)
80001ab0:	00878713          	addi	a4,a5,8
80001ab4:	fec42783          	lw	a5,-20(s0)
80001ab8:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:88

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
80001abc:	fec42783          	lw	a5,-20(s0)
80001ac0:	fff00713          	li	a4,-1
80001ac4:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:92

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001ac8:	fec42783          	lw	a5,-20(s0)
80001acc:	00878713          	addi	a4,a5,8
80001ad0:	fec42783          	lw	a5,-20(s0)
80001ad4:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:93
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001ad8:	fec42783          	lw	a5,-20(s0)
80001adc:	00878713          	addi	a4,a5,8
80001ae0:	fec42783          	lw	a5,-20(s0)
80001ae4:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:95

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
80001ae8:	fec42783          	lw	a5,-20(s0)
80001aec:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:101

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
80001af0:	00000013          	nop
80001af4:	01c12403          	lw	s0,28(sp)
80001af8:	02010113          	addi	sp,sp,32
80001afc:	00008067          	ret

80001b00 <vListInitialiseItem>:
vListInitialiseItem():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:105
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
80001b00:	fe010113          	addi	sp,sp,-32
80001b04:	00812e23          	sw	s0,28(sp)
80001b08:	02010413          	addi	s0,sp,32
80001b0c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:107
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80001b10:	fec42783          	lw	a5,-20(s0)
80001b14:	0007a823          	sw	zero,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:113

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
80001b18:	00000013          	nop
80001b1c:	01c12403          	lw	s0,28(sp)
80001b20:	02010113          	addi	sp,sp,32
80001b24:	00008067          	ret

80001b28 <vListInsertEnd>:
vListInsertEnd():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:117
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001b28:	fd010113          	addi	sp,sp,-48
80001b2c:	02812623          	sw	s0,44(sp)
80001b30:	03010413          	addi	s0,sp,48
80001b34:	fca42e23          	sw	a0,-36(s0)
80001b38:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:118
ListItem_t * const pxIndex = pxList->pxIndex;
80001b3c:	fdc42783          	lw	a5,-36(s0)
80001b40:	0047a783          	lw	a5,4(a5)
80001b44:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:129
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
80001b48:	fd842783          	lw	a5,-40(s0)
80001b4c:	fec42703          	lw	a4,-20(s0)
80001b50:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:130
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
80001b54:	fec42783          	lw	a5,-20(s0)
80001b58:	0087a703          	lw	a4,8(a5)
80001b5c:	fd842783          	lw	a5,-40(s0)
80001b60:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:135

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
80001b64:	fec42783          	lw	a5,-20(s0)
80001b68:	0087a783          	lw	a5,8(a5)
80001b6c:	fd842703          	lw	a4,-40(s0)
80001b70:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:136
	pxIndex->pxPrevious = pxNewListItem;
80001b74:	fec42783          	lw	a5,-20(s0)
80001b78:	fd842703          	lw	a4,-40(s0)
80001b7c:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:139

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001b80:	fd842783          	lw	a5,-40(s0)
80001b84:	fdc42703          	lw	a4,-36(s0)
80001b88:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:141

	( pxList->uxNumberOfItems )++;
80001b8c:	fdc42783          	lw	a5,-36(s0)
80001b90:	0007a783          	lw	a5,0(a5)
80001b94:	00178713          	addi	a4,a5,1
80001b98:	fdc42783          	lw	a5,-36(s0)
80001b9c:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:142
}
80001ba0:	00000013          	nop
80001ba4:	02c12403          	lw	s0,44(sp)
80001ba8:	03010113          	addi	sp,sp,48
80001bac:	00008067          	ret

80001bb0 <vListInsert>:
vListInsert():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:146
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001bb0:	fd010113          	addi	sp,sp,-48
80001bb4:	02812623          	sw	s0,44(sp)
80001bb8:	03010413          	addi	s0,sp,48
80001bbc:	fca42e23          	sw	a0,-36(s0)
80001bc0:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:148
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
80001bc4:	fd842783          	lw	a5,-40(s0)
80001bc8:	0007a783          	lw	a5,0(a5)
80001bcc:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:164
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
80001bd0:	fe842703          	lw	a4,-24(s0)
80001bd4:	fff00793          	li	a5,-1
80001bd8:	00f71a63          	bne	a4,a5,80001bec <vListInsert+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:166
	{
		pxIterator = pxList->xListEnd.pxPrevious;
80001bdc:	fdc42783          	lw	a5,-36(s0)
80001be0:	0107a783          	lw	a5,16(a5)
80001be4:	fef42623          	sw	a5,-20(s0)
80001be8:	0340006f          	j	80001c1c <vListInsert+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:192
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001bec:	fdc42783          	lw	a5,-36(s0)
80001bf0:	00878793          	addi	a5,a5,8
80001bf4:	fef42623          	sw	a5,-20(s0)
80001bf8:	0100006f          	j	80001c08 <vListInsert+0x58>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 3)
80001bfc:	fec42783          	lw	a5,-20(s0)
80001c00:	0047a783          	lw	a5,4(a5)
80001c04:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 1)
80001c08:	fec42783          	lw	a5,-20(s0)
80001c0c:	0047a783          	lw	a5,4(a5)
80001c10:	0007a783          	lw	a5,0(a5)
80001c14:	fe842703          	lw	a4,-24(s0)
80001c18:	fef772e3          	bleu	a5,a4,80001bfc <vListInsert+0x4c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:199
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
80001c1c:	fec42783          	lw	a5,-20(s0)
80001c20:	0047a703          	lw	a4,4(a5)
80001c24:	fd842783          	lw	a5,-40(s0)
80001c28:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:200
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
80001c2c:	fd842783          	lw	a5,-40(s0)
80001c30:	0047a783          	lw	a5,4(a5)
80001c34:	fd842703          	lw	a4,-40(s0)
80001c38:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:201
	pxNewListItem->pxPrevious = pxIterator;
80001c3c:	fd842783          	lw	a5,-40(s0)
80001c40:	fec42703          	lw	a4,-20(s0)
80001c44:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:202
	pxIterator->pxNext = pxNewListItem;
80001c48:	fec42783          	lw	a5,-20(s0)
80001c4c:	fd842703          	lw	a4,-40(s0)
80001c50:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:206

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001c54:	fd842783          	lw	a5,-40(s0)
80001c58:	fdc42703          	lw	a4,-36(s0)
80001c5c:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:208

	( pxList->uxNumberOfItems )++;
80001c60:	fdc42783          	lw	a5,-36(s0)
80001c64:	0007a783          	lw	a5,0(a5)
80001c68:	00178713          	addi	a4,a5,1
80001c6c:	fdc42783          	lw	a5,-36(s0)
80001c70:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:209
}
80001c74:	00000013          	nop
80001c78:	02c12403          	lw	s0,44(sp)
80001c7c:	03010113          	addi	sp,sp,48
80001c80:	00008067          	ret

80001c84 <uxListRemove>:
uxListRemove():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:213
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
80001c84:	fd010113          	addi	sp,sp,-48
80001c88:	02812623          	sw	s0,44(sp)
80001c8c:	03010413          	addi	s0,sp,48
80001c90:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:216
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
80001c94:	fdc42783          	lw	a5,-36(s0)
80001c98:	0107a783          	lw	a5,16(a5)
80001c9c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:218

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
80001ca0:	fdc42783          	lw	a5,-36(s0)
80001ca4:	0047a783          	lw	a5,4(a5)
80001ca8:	fdc42703          	lw	a4,-36(s0)
80001cac:	00872703          	lw	a4,8(a4) # 44000008 <RAM_SIZE+0x43f80008>
80001cb0:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:219
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
80001cb4:	fdc42783          	lw	a5,-36(s0)
80001cb8:	0087a783          	lw	a5,8(a5)
80001cbc:	fdc42703          	lw	a4,-36(s0)
80001cc0:	00472703          	lw	a4,4(a4)
80001cc4:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:225

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
80001cc8:	fec42783          	lw	a5,-20(s0)
80001ccc:	0047a783          	lw	a5,4(a5)
80001cd0:	fdc42703          	lw	a4,-36(s0)
80001cd4:	00f71a63          	bne	a4,a5,80001ce8 <uxListRemove+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:227
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
80001cd8:	fdc42783          	lw	a5,-36(s0)
80001cdc:	0087a703          	lw	a4,8(a5)
80001ce0:	fec42783          	lw	a5,-20(s0)
80001ce4:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:234
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
80001ce8:	fdc42783          	lw	a5,-36(s0)
80001cec:	0007a823          	sw	zero,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:235
	( pxList->uxNumberOfItems )--;
80001cf0:	fec42783          	lw	a5,-20(s0)
80001cf4:	0007a783          	lw	a5,0(a5)
80001cf8:	fff78713          	addi	a4,a5,-1
80001cfc:	fec42783          	lw	a5,-20(s0)
80001d00:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:237

	return pxList->uxNumberOfItems;
80001d04:	fec42783          	lw	a5,-20(s0)
80001d08:	0007a783          	lw	a5,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:238
}
80001d0c:	00078513          	mv	a0,a5
80001d10:	02c12403          	lw	s0,44(sp)
80001d14:	03010113          	addi	sp,sp,48
80001d18:	00008067          	ret

80001d1c <memset>:
memset():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:25

  return dest;
}

void* memset(void* dest, int byte, size_t len)
{
80001d1c:	fd010113          	addi	sp,sp,-48
80001d20:	02812623          	sw	s0,44(sp)
80001d24:	03010413          	addi	s0,sp,48
80001d28:	fca42e23          	sw	a0,-36(s0)
80001d2c:	fcb42c23          	sw	a1,-40(s0)
80001d30:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:26
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
80001d34:	fdc42703          	lw	a4,-36(s0)
80001d38:	fd442783          	lw	a5,-44(s0)
80001d3c:	00f767b3          	or	a5,a4,a5
80001d40:	0037f793          	andi	a5,a5,3
80001d44:	06079863          	bnez	a5,80001db4 <memset+0x98>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:27
    uintptr_t word = byte & 0xFF;
80001d48:	fd842783          	lw	a5,-40(s0)
80001d4c:	0ff7f793          	andi	a5,a5,255
80001d50:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:28
    word |= word << 8;
80001d54:	fe442783          	lw	a5,-28(s0)
80001d58:	00879793          	slli	a5,a5,0x8
80001d5c:	fe442703          	lw	a4,-28(s0)
80001d60:	00f767b3          	or	a5,a4,a5
80001d64:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:29
    word |= word << 16;
80001d68:	fe442783          	lw	a5,-28(s0)
80001d6c:	01079793          	slli	a5,a5,0x10
80001d70:	fe442703          	lw	a4,-28(s0)
80001d74:	00f767b3          	or	a5,a4,a5
80001d78:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:32
    word |= word << 16 << 16;

    uintptr_t *d = dest;
80001d7c:	fdc42783          	lw	a5,-36(s0)
80001d80:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001d84:	0180006f          	j	80001d9c <memset+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:34
      *d++ = word;
80001d88:	fec42783          	lw	a5,-20(s0)
80001d8c:	00478713          	addi	a4,a5,4
80001d90:	fee42623          	sw	a4,-20(s0)
80001d94:	fe442703          	lw	a4,-28(s0)
80001d98:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001d9c:	fdc42703          	lw	a4,-36(s0)
80001da0:	fd442783          	lw	a5,-44(s0)
80001da4:	00f707b3          	add	a5,a4,a5
80001da8:	fec42703          	lw	a4,-20(s0)
80001dac:	fcf76ee3          	bltu	a4,a5,80001d88 <memset+0x6c>
80001db0:	0400006f          	j	80001df0 <memset+0xd4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:36
  } else {
    char *d = dest;
80001db4:	fdc42783          	lw	a5,-36(s0)
80001db8:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001dbc:	0200006f          	j	80001ddc <memset+0xc0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:38
      *d++ = byte;
80001dc0:	fe842783          	lw	a5,-24(s0)
80001dc4:	00178713          	addi	a4,a5,1
80001dc8:	fee42423          	sw	a4,-24(s0)
80001dcc:	fd842703          	lw	a4,-40(s0)
80001dd0:	01871713          	slli	a4,a4,0x18
80001dd4:	41875713          	srai	a4,a4,0x18
80001dd8:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001ddc:	fdc42703          	lw	a4,-36(s0)
80001de0:	fd442783          	lw	a5,-44(s0)
80001de4:	00f707b3          	add	a5,a4,a5
80001de8:	fe842703          	lw	a4,-24(s0)
80001dec:	fcf76ae3          	bltu	a4,a5,80001dc0 <memset+0xa4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:40
  }
  return dest;
80001df0:	fdc42783          	lw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:41
}
80001df4:	00078513          	mv	a0,a5
80001df8:	02c12403          	lw	s0,44(sp)
80001dfc:	03010113          	addi	sp,sp,48
80001e00:	00008067          	ret

80001e04 <strlen>:
strlen():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:44

size_t strlen(const char *s)
{
80001e04:	fd010113          	addi	sp,sp,-48
80001e08:	02812623          	sw	s0,44(sp)
80001e0c:	03010413          	addi	s0,sp,48
80001e10:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:45
  const char *p = s;
80001e14:	fdc42783          	lw	a5,-36(s0)
80001e18:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001e1c:	0100006f          	j	80001e2c <strlen+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:47
    p++;
80001e20:	fec42783          	lw	a5,-20(s0)
80001e24:	00178793          	addi	a5,a5,1
80001e28:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001e2c:	fec42783          	lw	a5,-20(s0)
80001e30:	00078783          	lb	a5,0(a5)
80001e34:	fe0796e3          	bnez	a5,80001e20 <strlen+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:48
  return p - s;
80001e38:	fec42703          	lw	a4,-20(s0)
80001e3c:	fdc42783          	lw	a5,-36(s0)
80001e40:	40f707b3          	sub	a5,a4,a5
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:49
}
80001e44:	00078513          	mv	a0,a5
80001e48:	02c12403          	lw	s0,44(sp)
80001e4c:	03010113          	addi	sp,sp,48
80001e50:	00008067          	ret

80001e54 <xTaskGenericCreate>:
xTaskGenericCreate():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:551

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80001e54:	fc010113          	addi	sp,sp,-64
80001e58:	02112e23          	sw	ra,60(sp)
80001e5c:	02812c23          	sw	s0,56(sp)
80001e60:	04010413          	addi	s0,sp,64
80001e64:	fca42e23          	sw	a0,-36(s0)
80001e68:	fcb42c23          	sw	a1,-40(s0)
80001e6c:	fcd42823          	sw	a3,-48(s0)
80001e70:	fce42623          	sw	a4,-52(s0)
80001e74:	fcf42423          	sw	a5,-56(s0)
80001e78:	fd042223          	sw	a6,-60(s0)
80001e7c:	fd142023          	sw	a7,-64(s0)
80001e80:	00060793          	mv	a5,a2
80001e84:	fcf41b23          	sh	a5,-42(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:556
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
80001e88:	fdc42783          	lw	a5,-36(s0)
80001e8c:	00079663          	bnez	a5,80001e98 <xTaskGenericCreate+0x44>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:556 (discriminator 1)
80001e90:	30047073          	csrci	mstatus,8
80001e94:	0000006f          	j	80001e94 <xTaskGenericCreate+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:557
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
80001e98:	fcc42703          	lw	a4,-52(s0)
80001e9c:	00400793          	li	a5,4
80001ea0:	00e7f663          	bleu	a4,a5,80001eac <xTaskGenericCreate+0x58>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 1)
80001ea4:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 2)
80001ea8:	0000006f          	j	80001ea8 <xTaskGenericCreate+0x54>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:561

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
80001eac:	fd645783          	lhu	a5,-42(s0)
80001eb0:	fc442583          	lw	a1,-60(s0)
80001eb4:	00078513          	mv	a0,a5
80001eb8:	395000ef          	jal	ra,80002a4c <prvAllocateTCBAndStack>
80001ebc:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:562
	if( pxNewTCB != NULL )
80001ec0:	fe842783          	lw	a5,-24(s0)
80001ec4:	16078263          	beqz	a5,80002028 <xTaskGenericCreate+0x1d4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:598
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
80001ec8:	fe842783          	lw	a5,-24(s0)
80001ecc:	0307a703          	lw	a4,48(a5)
80001ed0:	fd645683          	lhu	a3,-42(s0)
80001ed4:	400007b7          	lui	a5,0x40000
80001ed8:	fff78793          	addi	a5,a5,-1 # 3fffffff <RAM_SIZE+0x3ff7ffff>
80001edc:	00f687b3          	add	a5,a3,a5
80001ee0:	00279793          	slli	a5,a5,0x2
80001ee4:	00f707b3          	add	a5,a4,a5
80001ee8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:599
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
80001eec:	fe442783          	lw	a5,-28(s0)
80001ef0:	ffc7f793          	andi	a5,a5,-4
80001ef4:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:602

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
80001ef8:	fe442783          	lw	a5,-28(s0)
80001efc:	0037f793          	andi	a5,a5,3
80001f00:	00078663          	beqz	a5,80001f0c <xTaskGenericCreate+0xb8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 1)
80001f04:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 3)
80001f08:	0000006f          	j	80001f08 <xTaskGenericCreate+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:619
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
80001f0c:	fd645783          	lhu	a5,-42(s0)
80001f10:	00078713          	mv	a4,a5
80001f14:	fc042683          	lw	a3,-64(s0)
80001f18:	fcc42603          	lw	a2,-52(s0)
80001f1c:	fd842583          	lw	a1,-40(s0)
80001f20:	fe842503          	lw	a0,-24(s0)
80001f24:	009000ef          	jal	ra,8000272c <prvInitialiseTCBVariables>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:631
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
80001f28:	fd042603          	lw	a2,-48(s0)
80001f2c:	fdc42583          	lw	a1,-36(s0)
80001f30:	fe442503          	lw	a0,-28(s0)
80001f34:	8c1ff0ef          	jal	ra,800017f4 <pxPortInitialiseStack>
80001f38:	00050713          	mv	a4,a0
80001f3c:	fe842783          	lw	a5,-24(s0)
80001f40:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:635
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
80001f44:	fc842783          	lw	a5,-56(s0)
80001f48:	00078863          	beqz	a5,80001f58 <xTaskGenericCreate+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:640
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
80001f4c:	fc842783          	lw	a5,-56(s0)
80001f50:	fe842703          	lw	a4,-24(s0)
80001f54:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:649
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
80001f58:	e64ff0ef          	jal	ra,800015bc <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:651
		{
			uxCurrentNumberOfTasks++;
80001f5c:	93c1a783          	lw	a5,-1732(gp) # 8000659c <uxCurrentNumberOfTasks>
80001f60:	00178713          	addi	a4,a5,1
80001f64:	92e1ae23          	sw	a4,-1732(gp) # 8000659c <uxCurrentNumberOfTasks>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:652
			if( pxCurrentTCB == NULL )
80001f68:	92c1a783          	lw	a5,-1748(gp) # 8000658c <pxCurrentTCB>
80001f6c:	02079063          	bnez	a5,80001f8c <xTaskGenericCreate+0x138>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:656
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
80001f70:	fe842703          	lw	a4,-24(s0)
80001f74:	92e1a623          	sw	a4,-1748(gp) # 8000658c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:658

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
80001f78:	93c1a703          	lw	a4,-1732(gp) # 8000659c <uxCurrentNumberOfTasks>
80001f7c:	00100793          	li	a5,1
80001f80:	02f71663          	bne	a4,a5,80001fac <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:663
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
80001f84:	0e1000ef          	jal	ra,80002864 <prvInitialiseTaskLists>
80001f88:	0240006f          	j	80001fac <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:675
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
80001f8c:	9481a783          	lw	a5,-1720(gp) # 800065a8 <xSchedulerRunning>
80001f90:	00079e63          	bnez	a5,80001fac <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:677
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
80001f94:	92c1a783          	lw	a5,-1748(gp) # 8000658c <pxCurrentTCB>
80001f98:	02c7a783          	lw	a5,44(a5)
80001f9c:	fcc42703          	lw	a4,-52(s0)
80001fa0:	00f76663          	bltu	a4,a5,80001fac <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:679
					{
						pxCurrentTCB = pxNewTCB;
80001fa4:	fe842703          	lw	a4,-24(s0)
80001fa8:	92e1a623          	sw	a4,-1748(gp) # 8000658c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:692
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
80001fac:	9581a783          	lw	a5,-1704(gp) # 800065b8 <uxTaskNumber>
80001fb0:	00178713          	addi	a4,a5,1
80001fb4:	94e1ac23          	sw	a4,-1704(gp) # 800065b8 <uxTaskNumber>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:697

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
80001fb8:	9581a703          	lw	a4,-1704(gp) # 800065b8 <uxTaskNumber>
80001fbc:	fe842783          	lw	a5,-24(s0)
80001fc0:	04e7a423          	sw	a4,72(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:702
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
80001fc4:	fe842783          	lw	a5,-24(s0)
80001fc8:	02c7a703          	lw	a4,44(a5)
80001fcc:	9441a783          	lw	a5,-1724(gp) # 800065a4 <uxTopReadyPriority>
80001fd0:	00e7f863          	bleu	a4,a5,80001fe0 <xTaskGenericCreate+0x18c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 1)
80001fd4:	fe842783          	lw	a5,-24(s0)
80001fd8:	02c7a703          	lw	a4,44(a5)
80001fdc:	94e1a223          	sw	a4,-1724(gp) # 800065a4 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 3)
80001fe0:	fe842783          	lw	a5,-24(s0)
80001fe4:	02c7a703          	lw	a4,44(a5)
80001fe8:	00070793          	mv	a5,a4
80001fec:	00279793          	slli	a5,a5,0x2
80001ff0:	00e787b3          	add	a5,a5,a4
80001ff4:	00279793          	slli	a5,a5,0x2
80001ff8:	8001f737          	lui	a4,0x8001f
80001ffc:	5d070713          	addi	a4,a4,1488 # 8001f5d0 <__stack_top+0xfffdeb80>
80002000:	00e78733          	add	a4,a5,a4
80002004:	fe842783          	lw	a5,-24(s0)
80002008:	00478793          	addi	a5,a5,4
8000200c:	00078593          	mv	a1,a5
80002010:	00070513          	mv	a0,a4
80002014:	b15ff0ef          	jal	ra,80001b28 <vListInsertEnd>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:704 (discriminator 3)

			xReturn = pdPASS;
80002018:	00100793          	li	a5,1
8000201c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:707 (discriminator 3)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
80002020:	dd0ff0ef          	jal	ra,800015f0 <vPortExitCritical>
80002024:	00c0006f          	j	80002030 <xTaskGenericCreate+0x1dc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:711
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
80002028:	fff00793          	li	a5,-1
8000202c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:715
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
80002030:	fec42703          	lw	a4,-20(s0)
80002034:	00100793          	li	a5,1
80002038:	02f71063          	bne	a4,a5,80002058 <xTaskGenericCreate+0x204>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:717
	{
		if( xSchedulerRunning != pdFALSE )
8000203c:	9481a783          	lw	a5,-1720(gp) # 800065a8 <xSchedulerRunning>
80002040:	00078c63          	beqz	a5,80002058 <xTaskGenericCreate+0x204>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:721
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
80002044:	92c1a783          	lw	a5,-1748(gp) # 8000658c <pxCurrentTCB>
80002048:	02c7a783          	lw	a5,44(a5)
8000204c:	fcc42703          	lw	a4,-52(s0)
80002050:	00e7f463          	bleu	a4,a5,80002058 <xTaskGenericCreate+0x204>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:723
			{
				taskYIELD_IF_USING_PREEMPTION();
80002054:	a21ff0ef          	jal	ra,80001a74 <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:736
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
80002058:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:737
}
8000205c:	00078513          	mv	a0,a5
80002060:	03c12083          	lw	ra,60(sp)
80002064:	03812403          	lw	s0,56(sp)
80002068:	04010113          	addi	sp,sp,64
8000206c:	00008067          	ret

80002070 <vTaskDelete>:
vTaskDelete():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:743
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
80002070:	fd010113          	addi	sp,sp,-48
80002074:	02112623          	sw	ra,44(sp)
80002078:	02812423          	sw	s0,40(sp)
8000207c:	03010413          	addi	s0,sp,48
80002080:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:746
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
80002084:	d38ff0ef          	jal	ra,800015bc <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:750
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
80002088:	fdc42783          	lw	a5,-36(s0)
8000208c:	00079663          	bnez	a5,80002098 <vTaskDelete+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 1)
80002090:	92c1a783          	lw	a5,-1748(gp) # 8000658c <pxCurrentTCB>
80002094:	0080006f          	j	8000209c <vTaskDelete+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 2)
80002098:	fdc42783          	lw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 4)
8000209c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:756 (discriminator 4)

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
800020a0:	fec42783          	lw	a5,-20(s0)
800020a4:	00478793          	addi	a5,a5,4
800020a8:	00078513          	mv	a0,a5
800020ac:	bd9ff0ef          	jal	ra,80001c84 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:766 (discriminator 4)
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
800020b0:	fec42783          	lw	a5,-20(s0)
800020b4:	0287a783          	lw	a5,40(a5)
800020b8:	00078a63          	beqz	a5,800020cc <vTaskDelete+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:768
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
800020bc:	fec42783          	lw	a5,-20(s0)
800020c0:	01878793          	addi	a5,a5,24
800020c4:	00078513          	mv	a0,a5
800020c8:	bbdff0ef          	jal	ra,80001c84 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:775
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
800020cc:	fec42783          	lw	a5,-20(s0)
800020d0:	00478793          	addi	a5,a5,4
800020d4:	00078593          	mv	a1,a5
800020d8:	8001f7b7          	lui	a5,0x8001f
800020dc:	67078513          	addi	a0,a5,1648 # 8001f670 <__stack_top+0xfffdec20>
800020e0:	a49ff0ef          	jal	ra,80001b28 <vListInsertEnd>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:780

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
800020e4:	9381a783          	lw	a5,-1736(gp) # 80006598 <uxTasksDeleted>
800020e8:	00178713          	addi	a4,a5,1
800020ec:	92e1ac23          	sw	a4,-1736(gp) # 80006598 <uxTasksDeleted>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:784

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
800020f0:	9581a783          	lw	a5,-1704(gp) # 800065b8 <uxTaskNumber>
800020f4:	00178713          	addi	a4,a5,1
800020f8:	94e1ac23          	sw	a4,-1704(gp) # 800065b8 <uxTaskNumber>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:788

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
800020fc:	cf4ff0ef          	jal	ra,800015f0 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:792

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
80002100:	9481a783          	lw	a5,-1720(gp) # 800065a8 <xSchedulerRunning>
80002104:	02078a63          	beqz	a5,80002138 <vTaskDelete+0xc8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:794
		{
			if( pxTCB == pxCurrentTCB )
80002108:	92c1a783          	lw	a5,-1748(gp) # 8000658c <pxCurrentTCB>
8000210c:	fec42703          	lw	a4,-20(s0)
80002110:	00f71e63          	bne	a4,a5,8000212c <vTaskDelete+0xbc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:796
			{
				configASSERT( uxSchedulerSuspended == 0 );
80002114:	9601a783          	lw	a5,-1696(gp) # 800065c0 <uxSchedulerSuspended>
80002118:	00078663          	beqz	a5,80002124 <vTaskDelete+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:796 (discriminator 1)
8000211c:	30047073          	csrci	mstatus,8
80002120:	0000006f          	j	80002120 <vTaskDelete+0xb0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:804
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
80002124:	951ff0ef          	jal	ra,80001a74 <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:817
					prvResetNextTaskUnblockTime();
				}
				taskEXIT_CRITICAL();
			}
		}
	}
80002128:	0100006f          	j	80002138 <vTaskDelete+0xc8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:810
				taskENTER_CRITICAL();
8000212c:	c90ff0ef          	jal	ra,800015bc <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:812
					prvResetNextTaskUnblockTime();
80002130:	21d000ef          	jal	ra,80002b4c <prvResetNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:814
				taskEXIT_CRITICAL();
80002134:	cbcff0ef          	jal	ra,800015f0 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:817
	}
80002138:	00000013          	nop
8000213c:	02c12083          	lw	ra,44(sp)
80002140:	02812403          	lw	s0,40(sp)
80002144:	03010113          	addi	sp,sp,48
80002148:	00008067          	ret

8000214c <vTaskDelay>:
vTaskDelay():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:921
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
8000214c:	fd010113          	addi	sp,sp,-48
80002150:	02112623          	sw	ra,44(sp)
80002154:	02812423          	sw	s0,40(sp)
80002158:	03010413          	addi	s0,sp,48
8000215c:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:923
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
80002160:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:927


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
80002164:	fdc42783          	lw	a5,-36(s0)
80002168:	04078463          	beqz	a5,800021b0 <vTaskDelay+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:929
		{
			configASSERT( uxSchedulerSuspended == 0 );
8000216c:	9601a783          	lw	a5,-1696(gp) # 800065c0 <uxSchedulerSuspended>
80002170:	00078663          	beqz	a5,8000217c <vTaskDelay+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:929 (discriminator 1)
80002174:	30047073          	csrci	mstatus,8
80002178:	0000006f          	j	80002178 <vTaskDelay+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:930
			vTaskSuspendAll();
8000217c:	0e4000ef          	jal	ra,80002260 <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:944
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
80002180:	9401a783          	lw	a5,-1728(gp) # 800065a0 <xTickCount>
80002184:	fdc42703          	lw	a4,-36(s0)
80002188:	00f707b3          	add	a5,a4,a5
8000218c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:949

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80002190:	92c1a783          	lw	a5,-1748(gp) # 8000658c <pxCurrentTCB>
80002194:	00478793          	addi	a5,a5,4
80002198:	00078513          	mv	a0,a5
8000219c:	ae9ff0ef          	jal	ra,80001c84 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:960
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
800021a0:	fe842503          	lw	a0,-24(s0)
800021a4:	021000ef          	jal	ra,800029c4 <prvAddCurrentTaskToDelayedList>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:962
			}
			xAlreadyYielded = xTaskResumeAll();
800021a8:	0e0000ef          	jal	ra,80002288 <xTaskResumeAll>
800021ac:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:971
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
800021b0:	fec42783          	lw	a5,-20(s0)
800021b4:	00079463          	bnez	a5,800021bc <vTaskDelay+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:973
		{
			portYIELD_WITHIN_API();
800021b8:	8bdff0ef          	jal	ra,80001a74 <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:979
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
800021bc:	00000013          	nop
800021c0:	02c12083          	lw	ra,44(sp)
800021c4:	02812403          	lw	s0,40(sp)
800021c8:	03010113          	addi	sp,sp,48
800021cc:	00008067          	ret

800021d0 <vTaskStartScheduler>:
vTaskStartScheduler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1542

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
800021d0:	fe010113          	addi	sp,sp,-32
800021d4:	00112e23          	sw	ra,28(sp)
800021d8:	00812c23          	sw	s0,24(sp)
800021dc:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1555
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
800021e0:	00000893          	li	a7,0
800021e4:	00000813          	li	a6,0
800021e8:	00000793          	li	a5,0
800021ec:	00000713          	li	a4,0
800021f0:	00000693          	li	a3,0
800021f4:	40000613          	li	a2,1024
800021f8:	800065b7          	lui	a1,0x80006
800021fc:	1d458593          	addi	a1,a1,468 # 800061d4 <__stack_top+0xfffc5784>
80002200:	80002537          	lui	a0,0x80002
80002204:	6f850513          	addi	a0,a0,1784 # 800026f8 <__stack_top+0xfffc1ca8>
80002208:	c4dff0ef          	jal	ra,80001e54 <xTaskGenericCreate>
8000220c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1572
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
80002210:	fec42703          	lw	a4,-20(s0)
80002214:	00100793          	li	a5,1
80002218:	02f71263          	bne	a4,a5,8000223c <vTaskStartScheduler+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1579
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
8000221c:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1589
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
80002220:	fff00713          	li	a4,-1
80002224:	94e1ae23          	sw	a4,-1700(gp) # 800065bc <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1590
		xSchedulerRunning = pdTRUE;
80002228:	00100713          	li	a4,1
8000222c:	94e1a423          	sw	a4,-1720(gp) # 800065a8 <xSchedulerRunning>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1591
		xTickCount = ( TickType_t ) 0U;
80002230:	9401a023          	sw	zero,-1728(gp) # 800065a0 <xTickCount>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1600
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
80002234:	f20ff0ef          	jal	ra,80001954 <xPortStartScheduler>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
80002238:	0140006f          	j	8000224c <vTaskStartScheduler+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615
		configASSERT( xReturn );
8000223c:	fec42783          	lw	a5,-20(s0)
80002240:	00079663          	bnez	a5,8000224c <vTaskStartScheduler+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 1)
80002244:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 2)
80002248:	0000006f          	j	80002248 <vTaskStartScheduler+0x78>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
}
8000224c:	00000013          	nop
80002250:	01c12083          	lw	ra,28(sp)
80002254:	01812403          	lw	s0,24(sp)
80002258:	02010113          	addi	sp,sp,32
8000225c:	00008067          	ret

80002260 <vTaskSuspendAll>:
vTaskSuspendAll():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1632
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
80002260:	ff010113          	addi	sp,sp,-16
80002264:	00812623          	sw	s0,12(sp)
80002268:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1637
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
8000226c:	9601a783          	lw	a5,-1696(gp) # 800065c0 <uxSchedulerSuspended>
80002270:	00178713          	addi	a4,a5,1
80002274:	96e1a023          	sw	a4,-1696(gp) # 800065c0 <uxSchedulerSuspended>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1638
}
80002278:	00000013          	nop
8000227c:	00c12403          	lw	s0,12(sp)
80002280:	01010113          	addi	sp,sp,16
80002284:	00008067          	ret

80002288 <xTaskResumeAll>:
xTaskResumeAll():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1670

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
80002288:	fe010113          	addi	sp,sp,-32
8000228c:	00112e23          	sw	ra,28(sp)
80002290:	00812c23          	sw	s0,24(sp)
80002294:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1672
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
80002298:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
8000229c:	9601a783          	lw	a5,-1696(gp) # 800065c0 <uxSchedulerSuspended>
800022a0:	00079663          	bnez	a5,800022ac <xTaskResumeAll+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676 (discriminator 1)
800022a4:	30047073          	csrci	mstatus,8
800022a8:	0000006f          	j	800022a8 <xTaskResumeAll+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1683
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
800022ac:	b10ff0ef          	jal	ra,800015bc <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1685
	{
		--uxSchedulerSuspended;
800022b0:	9601a783          	lw	a5,-1696(gp) # 800065c0 <uxSchedulerSuspended>
800022b4:	fff78713          	addi	a4,a5,-1
800022b8:	96e1a023          	sw	a4,-1696(gp) # 800065c0 <uxSchedulerSuspended>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1687

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
800022bc:	9601a783          	lw	a5,-1696(gp) # 800065c0 <uxSchedulerSuspended>
800022c0:	10079663          	bnez	a5,800023cc <xTaskResumeAll+0x144>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1689
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
800022c4:	93c1a783          	lw	a5,-1732(gp) # 8000659c <uxCurrentNumberOfTasks>
800022c8:	10078263          	beqz	a5,800023cc <xTaskResumeAll+0x144>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
800022cc:	0a80006f          	j	80002374 <xTaskResumeAll+0xec>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1695
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
800022d0:	8001f7b7          	lui	a5,0x8001f
800022d4:	65c78793          	addi	a5,a5,1628 # 8001f65c <__stack_top+0xfffdec0c>
800022d8:	00c7a783          	lw	a5,12(a5)
800022dc:	00c7a783          	lw	a5,12(a5)
800022e0:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1696
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
800022e4:	fe842783          	lw	a5,-24(s0)
800022e8:	01878793          	addi	a5,a5,24
800022ec:	00078513          	mv	a0,a5
800022f0:	995ff0ef          	jal	ra,80001c84 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1697
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
800022f4:	fe842783          	lw	a5,-24(s0)
800022f8:	00478793          	addi	a5,a5,4
800022fc:	00078513          	mv	a0,a5
80002300:	985ff0ef          	jal	ra,80001c84 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698
					prvAddTaskToReadyList( pxTCB );
80002304:	fe842783          	lw	a5,-24(s0)
80002308:	02c7a703          	lw	a4,44(a5)
8000230c:	9441a783          	lw	a5,-1724(gp) # 800065a4 <uxTopReadyPriority>
80002310:	00e7f863          	bleu	a4,a5,80002320 <xTaskResumeAll+0x98>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 1)
80002314:	fe842783          	lw	a5,-24(s0)
80002318:	02c7a703          	lw	a4,44(a5)
8000231c:	94e1a223          	sw	a4,-1724(gp) # 800065a4 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 3)
80002320:	fe842783          	lw	a5,-24(s0)
80002324:	02c7a703          	lw	a4,44(a5)
80002328:	00070793          	mv	a5,a4
8000232c:	00279793          	slli	a5,a5,0x2
80002330:	00e787b3          	add	a5,a5,a4
80002334:	00279793          	slli	a5,a5,0x2
80002338:	8001f737          	lui	a4,0x8001f
8000233c:	5d070713          	addi	a4,a4,1488 # 8001f5d0 <__stack_top+0xfffdeb80>
80002340:	00e78733          	add	a4,a5,a4
80002344:	fe842783          	lw	a5,-24(s0)
80002348:	00478793          	addi	a5,a5,4
8000234c:	00078593          	mv	a1,a5
80002350:	00070513          	mv	a0,a4
80002354:	fd4ff0ef          	jal	ra,80001b28 <vListInsertEnd>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1702 (discriminator 3)

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80002358:	fe842783          	lw	a5,-24(s0)
8000235c:	02c7a703          	lw	a4,44(a5)
80002360:	92c1a783          	lw	a5,-1748(gp) # 8000658c <pxCurrentTCB>
80002364:	02c7a783          	lw	a5,44(a5)
80002368:	00f76663          	bltu	a4,a5,80002374 <xTaskResumeAll+0xec>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1704
					{
						xYieldPending = pdTRUE;
8000236c:	00100713          	li	a4,1
80002370:	94e1a823          	sw	a4,-1712(gp) # 800065b0 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
80002374:	8001f7b7          	lui	a5,0x8001f
80002378:	65c7a783          	lw	a5,1628(a5) # 8001f65c <__stack_top+0xfffdec0c>
8000237c:	f4079ae3          	bnez	a5,800022d0 <xTaskResumeAll+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1716

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
80002380:	94c1a783          	lw	a5,-1716(gp) # 800065ac <uxPendedTicks>
80002384:	02078863          	beqz	a5,800023b4 <xTaskResumeAll+0x12c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
80002388:	0240006f          	j	800023ac <xTaskResumeAll+0x124>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1720
					{
						if( xTaskIncrementTick() != pdFALSE )
8000238c:	094000ef          	jal	ra,80002420 <xTaskIncrementTick>
80002390:	00050793          	mv	a5,a0
80002394:	00078663          	beqz	a5,800023a0 <xTaskResumeAll+0x118>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1722
						{
							xYieldPending = pdTRUE;
80002398:	00100713          	li	a4,1
8000239c:	94e1a823          	sw	a4,-1712(gp) # 800065b0 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1728
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
800023a0:	94c1a783          	lw	a5,-1716(gp) # 800065ac <uxPendedTicks>
800023a4:	fff78713          	addi	a4,a5,-1
800023a8:	94e1a623          	sw	a4,-1716(gp) # 800065ac <uxPendedTicks>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
					while( uxPendedTicks > ( UBaseType_t ) 0U )
800023ac:	94c1a783          	lw	a5,-1716(gp) # 800065ac <uxPendedTicks>
800023b0:	fc079ee3          	bnez	a5,8000238c <xTaskResumeAll+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1736
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
800023b4:	9501a703          	lw	a4,-1712(gp) # 800065b0 <xYieldPending>
800023b8:	00100793          	li	a5,1
800023bc:	00f71863          	bne	a4,a5,800023cc <xTaskResumeAll+0x144>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1740
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
800023c0:	00100793          	li	a5,1
800023c4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1743
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
800023c8:	eacff0ef          	jal	ra,80001a74 <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1756
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
800023cc:	a24ff0ef          	jal	ra,800015f0 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1758

	return xAlreadyYielded;
800023d0:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1759
}
800023d4:	00078513          	mv	a0,a5
800023d8:	01c12083          	lw	ra,28(sp)
800023dc:	01812403          	lw	s0,24(sp)
800023e0:	02010113          	addi	sp,sp,32
800023e4:	00008067          	ret

800023e8 <xTaskGetTickCount>:
xTaskGetTickCount():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1763
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
800023e8:	fe010113          	addi	sp,sp,-32
800023ec:	00112e23          	sw	ra,28(sp)
800023f0:	00812c23          	sw	s0,24(sp)
800023f4:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1767
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
800023f8:	9c4ff0ef          	jal	ra,800015bc <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1769
	{
		xTicks = xTickCount;
800023fc:	9401a783          	lw	a5,-1728(gp) # 800065a0 <xTickCount>
80002400:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1771
	}
	portTICK_TYPE_EXIT_CRITICAL();
80002404:	9ecff0ef          	jal	ra,800015f0 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1773

	return xTicks;
80002408:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1774
}
8000240c:	00078513          	mv	a0,a5
80002410:	01c12083          	lw	ra,28(sp)
80002414:	01812403          	lw	s0,24(sp)
80002418:	02010113          	addi	sp,sp,32
8000241c:	00008067          	ret

80002420 <xTaskIncrementTick>:
xTaskIncrementTick():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1938

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
80002420:	fd010113          	addi	sp,sp,-48
80002424:	02112623          	sw	ra,44(sp)
80002428:	02812423          	sw	s0,40(sp)
8000242c:	03010413          	addi	s0,sp,48
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1941
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
80002430:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1947

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80002434:	9601a783          	lw	a5,-1696(gp) # 800065c0 <uxSchedulerSuspended>
80002438:	1a079063          	bnez	a5,800025d8 <xTaskIncrementTick+0x1b8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1951
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
8000243c:	9401a783          	lw	a5,-1728(gp) # 800065a0 <xTickCount>
80002440:	00178713          	addi	a4,a5,1
80002444:	94e1a023          	sw	a4,-1728(gp) # 800065a0 <xTickCount>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1956

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
80002448:	9401a783          	lw	a5,-1728(gp) # 800065a0 <xTickCount>
8000244c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1958

			if( xConstTickCount == ( TickType_t ) 0U )
80002450:	fe842783          	lw	a5,-24(s0)
80002454:	04079063          	bnez	a5,80002494 <xTaskIncrementTick+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960
			{
				taskSWITCH_DELAYED_LISTS();
80002458:	9301a783          	lw	a5,-1744(gp) # 80006590 <pxDelayedTaskList>
8000245c:	0007a783          	lw	a5,0(a5)
80002460:	00078663          	beqz	a5,8000246c <xTaskIncrementTick+0x4c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 1)
80002464:	30047073          	csrci	mstatus,8
80002468:	0000006f          	j	80002468 <xTaskIncrementTick+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 2)
8000246c:	9301a783          	lw	a5,-1744(gp) # 80006590 <pxDelayedTaskList>
80002470:	fef42223          	sw	a5,-28(s0)
80002474:	9341a703          	lw	a4,-1740(gp) # 80006594 <pxOverflowDelayedTaskList>
80002478:	92e1a823          	sw	a4,-1744(gp) # 80006590 <pxDelayedTaskList>
8000247c:	fe442703          	lw	a4,-28(s0)
80002480:	92e1aa23          	sw	a4,-1740(gp) # 80006594 <pxOverflowDelayedTaskList>
80002484:	9541a783          	lw	a5,-1708(gp) # 800065b4 <xNumOfOverflows>
80002488:	00178713          	addi	a4,a5,1
8000248c:	94e1aa23          	sw	a4,-1708(gp) # 800065b4 <xNumOfOverflows>
80002490:	6bc000ef          	jal	ra,80002b4c <prvResetNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1971

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
80002494:	95c1a783          	lw	a5,-1700(gp) # 800065bc <xNextTaskUnblockTime>
80002498:	fe842703          	lw	a4,-24(s0)
8000249c:	10f76063          	bltu	a4,a5,8000259c <xTaskIncrementTick+0x17c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
800024a0:	9301a783          	lw	a5,-1744(gp) # 80006590 <pxDelayedTaskList>
800024a4:	0007a783          	lw	a5,0(a5)
800024a8:	00079663          	bnez	a5,800024b4 <xTaskIncrementTick+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 1)
800024ac:	00100793          	li	a5,1
800024b0:	0080006f          	j	800024b8 <xTaskIncrementTick+0x98>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 2)
800024b4:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 4)
800024b8:	00078863          	beqz	a5,800024c8 <xTaskIncrementTick+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1982
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
800024bc:	fff00713          	li	a4,-1
800024c0:	94e1ae23          	sw	a4,-1700(gp) # 800065bc <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1983
						break;
800024c4:	0d80006f          	j	8000259c <xTaskIncrementTick+0x17c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1991
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
800024c8:	9301a783          	lw	a5,-1744(gp) # 80006590 <pxDelayedTaskList>
800024cc:	00c7a783          	lw	a5,12(a5)
800024d0:	00c7a783          	lw	a5,12(a5)
800024d4:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1992
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
800024d8:	fe042783          	lw	a5,-32(s0)
800024dc:	0047a783          	lw	a5,4(a5)
800024e0:	fcf42e23          	sw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1994

						if( xConstTickCount < xItemValue )
800024e4:	fe842703          	lw	a4,-24(s0)
800024e8:	fdc42783          	lw	a5,-36(s0)
800024ec:	00f77863          	bleu	a5,a4,800024fc <xTaskIncrementTick+0xdc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2001
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
800024f0:	fdc42703          	lw	a4,-36(s0)
800024f4:	94e1ae23          	sw	a4,-1700(gp) # 800065bc <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2002
							break;
800024f8:	0a40006f          	j	8000259c <xTaskIncrementTick+0x17c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2010
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
800024fc:	fe042783          	lw	a5,-32(s0)
80002500:	00478793          	addi	a5,a5,4
80002504:	00078513          	mv	a0,a5
80002508:	f7cff0ef          	jal	ra,80001c84 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2014

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
8000250c:	fe042783          	lw	a5,-32(s0)
80002510:	0287a783          	lw	a5,40(a5)
80002514:	00078a63          	beqz	a5,80002528 <xTaskIncrementTick+0x108>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2016
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002518:	fe042783          	lw	a5,-32(s0)
8000251c:	01878793          	addi	a5,a5,24
80002520:	00078513          	mv	a0,a5
80002524:	f60ff0ef          	jal	ra,80001c84 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
80002528:	fe042783          	lw	a5,-32(s0)
8000252c:	02c7a703          	lw	a4,44(a5)
80002530:	9441a783          	lw	a5,-1724(gp) # 800065a4 <uxTopReadyPriority>
80002534:	00e7f863          	bleu	a4,a5,80002544 <xTaskIncrementTick+0x124>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 1)
80002538:	fe042783          	lw	a5,-32(s0)
8000253c:	02c7a703          	lw	a4,44(a5)
80002540:	94e1a223          	sw	a4,-1724(gp) # 800065a4 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 3)
80002544:	fe042783          	lw	a5,-32(s0)
80002548:	02c7a703          	lw	a4,44(a5)
8000254c:	00070793          	mv	a5,a4
80002550:	00279793          	slli	a5,a5,0x2
80002554:	00e787b3          	add	a5,a5,a4
80002558:	00279793          	slli	a5,a5,0x2
8000255c:	8001f737          	lui	a4,0x8001f
80002560:	5d070713          	addi	a4,a4,1488 # 8001f5d0 <__stack_top+0xfffdeb80>
80002564:	00e78733          	add	a4,a5,a4
80002568:	fe042783          	lw	a5,-32(s0)
8000256c:	00478793          	addi	a5,a5,4
80002570:	00078593          	mv	a1,a5
80002574:	00070513          	mv	a0,a4
80002578:	db0ff0ef          	jal	ra,80001b28 <vListInsertEnd>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2035 (discriminator 3)
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
8000257c:	fe042783          	lw	a5,-32(s0)
80002580:	02c7a703          	lw	a4,44(a5)
80002584:	92c1a783          	lw	a5,-1748(gp) # 8000658c <pxCurrentTCB>
80002588:	02c7a783          	lw	a5,44(a5)
8000258c:	f0f76ae3          	bltu	a4,a5,800024a0 <xTaskIncrementTick+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2037
							{
								xSwitchRequired = pdTRUE;
80002590:	00100793          	li	a5,1
80002594:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80002598:	f09ff06f          	j	800024a0 <xTaskIncrementTick+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2055
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
8000259c:	92c1a783          	lw	a5,-1748(gp) # 8000658c <pxCurrentTCB>
800025a0:	02c7a703          	lw	a4,44(a5)
800025a4:	8001f6b7          	lui	a3,0x8001f
800025a8:	00070793          	mv	a5,a4
800025ac:	00279793          	slli	a5,a5,0x2
800025b0:	00e787b3          	add	a5,a5,a4
800025b4:	00279793          	slli	a5,a5,0x2
800025b8:	5d068713          	addi	a4,a3,1488 # 8001f5d0 <__stack_top+0xfffdeb80>
800025bc:	00e787b3          	add	a5,a5,a4
800025c0:	0007a703          	lw	a4,0(a5)
800025c4:	00100793          	li	a5,1
800025c8:	00e7fe63          	bleu	a4,a5,800025e4 <xTaskIncrementTick+0x1c4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2057
			{
				xSwitchRequired = pdTRUE;
800025cc:	00100793          	li	a5,1
800025d0:	fef42623          	sw	a5,-20(s0)
800025d4:	0100006f          	j	800025e4 <xTaskIncrementTick+0x1c4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2083
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
800025d8:	94c1a783          	lw	a5,-1716(gp) # 800065ac <uxPendedTicks>
800025dc:	00178713          	addi	a4,a5,1
800025e0:	94e1a623          	sw	a4,-1716(gp) # 800065ac <uxPendedTicks>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2096
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
800025e4:	9501a783          	lw	a5,-1712(gp) # 800065b0 <xYieldPending>
800025e8:	00078663          	beqz	a5,800025f4 <xTaskIncrementTick+0x1d4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2098
		{
			xSwitchRequired = pdTRUE;
800025ec:	00100793          	li	a5,1
800025f0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2107
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
800025f4:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2108
}
800025f8:	00078513          	mv	a0,a5
800025fc:	02c12083          	lw	ra,44(sp)
80002600:	02812403          	lw	s0,40(sp)
80002604:	03010113          	addi	sp,sp,48
80002608:	00008067          	ret

8000260c <vTaskSwitchContext>:
vTaskSwitchContext():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2202

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
8000260c:	fe010113          	addi	sp,sp,-32
80002610:	00812e23          	sw	s0,28(sp)
80002614:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2203
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
80002618:	9601a783          	lw	a5,-1696(gp) # 800065c0 <uxSchedulerSuspended>
8000261c:	00078863          	beqz	a5,8000262c <vTaskSwitchContext+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2207
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
80002620:	00100713          	li	a4,1
80002624:	94e1a823          	sw	a4,-1712(gp) # 800065b0 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
80002628:	0c00006f          	j	800026e8 <vTaskSwitchContext+0xdc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2211
		xYieldPending = pdFALSE;
8000262c:	9401a823          	sw	zero,-1712(gp) # 800065b0 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246
		taskSELECT_HIGHEST_PRIORITY_TASK();
80002630:	0200006f          	j	80002650 <vTaskSwitchContext+0x44>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 4)
80002634:	9441a783          	lw	a5,-1724(gp) # 800065a4 <uxTopReadyPriority>
80002638:	00079663          	bnez	a5,80002644 <vTaskSwitchContext+0x38>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 1)
8000263c:	30047073          	csrci	mstatus,8
80002640:	0000006f          	j	80002640 <vTaskSwitchContext+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 2)
80002644:	9441a783          	lw	a5,-1724(gp) # 800065a4 <uxTopReadyPriority>
80002648:	fff78713          	addi	a4,a5,-1
8000264c:	94e1a223          	sw	a4,-1724(gp) # 800065a4 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 3)
80002650:	9441a703          	lw	a4,-1724(gp) # 800065a4 <uxTopReadyPriority>
80002654:	8001f6b7          	lui	a3,0x8001f
80002658:	00070793          	mv	a5,a4
8000265c:	00279793          	slli	a5,a5,0x2
80002660:	00e787b3          	add	a5,a5,a4
80002664:	00279793          	slli	a5,a5,0x2
80002668:	5d068713          	addi	a4,a3,1488 # 8001f5d0 <__stack_top+0xfffdeb80>
8000266c:	00e787b3          	add	a5,a5,a4
80002670:	0007a783          	lw	a5,0(a5)
80002674:	fc0780e3          	beqz	a5,80002634 <vTaskSwitchContext+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 5)
80002678:	9441a703          	lw	a4,-1724(gp) # 800065a4 <uxTopReadyPriority>
8000267c:	00070793          	mv	a5,a4
80002680:	00279793          	slli	a5,a5,0x2
80002684:	00e787b3          	add	a5,a5,a4
80002688:	00279793          	slli	a5,a5,0x2
8000268c:	8001f737          	lui	a4,0x8001f
80002690:	5d070713          	addi	a4,a4,1488 # 8001f5d0 <__stack_top+0xfffdeb80>
80002694:	00e787b3          	add	a5,a5,a4
80002698:	fef42623          	sw	a5,-20(s0)
8000269c:	fec42783          	lw	a5,-20(s0)
800026a0:	0047a783          	lw	a5,4(a5)
800026a4:	0047a703          	lw	a4,4(a5)
800026a8:	fec42783          	lw	a5,-20(s0)
800026ac:	00e7a223          	sw	a4,4(a5)
800026b0:	fec42783          	lw	a5,-20(s0)
800026b4:	0047a703          	lw	a4,4(a5)
800026b8:	fec42783          	lw	a5,-20(s0)
800026bc:	00878793          	addi	a5,a5,8
800026c0:	00f71c63          	bne	a4,a5,800026d8 <vTaskSwitchContext+0xcc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 6)
800026c4:	fec42783          	lw	a5,-20(s0)
800026c8:	0047a783          	lw	a5,4(a5)
800026cc:	0047a703          	lw	a4,4(a5)
800026d0:	fec42783          	lw	a5,-20(s0)
800026d4:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 8)
800026d8:	fec42783          	lw	a5,-20(s0)
800026dc:	0047a783          	lw	a5,4(a5)
800026e0:	00c7a703          	lw	a4,12(a5)
800026e4:	92e1a623          	sw	a4,-1748(gp) # 8000658c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
}
800026e8:	00000013          	nop
800026ec:	01c12403          	lw	s0,28(sp)
800026f0:	02010113          	addi	sp,sp,32
800026f4:	00008067          	ret

800026f8 <prvIdleTask>:
prvIdleTask():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2689
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
800026f8:	fe010113          	addi	sp,sp,-32
800026fc:	00112e23          	sw	ra,28(sp)
80002700:	00812c23          	sw	s0,24(sp)
80002704:	02010413          	addi	s0,sp,32
80002708:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
8000270c:	218000ef          	jal	ra,80002924 <prvCheckTasksWaitingTermination>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2719

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
80002710:	8001f7b7          	lui	a5,0x8001f
80002714:	5d07a703          	lw	a4,1488(a5) # 8001f5d0 <__stack_top+0xfffdeb80>
80002718:	00100793          	li	a5,1
8000271c:	00e7f463          	bleu	a4,a5,80002724 <prvIdleTask+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2721
			{
				taskYIELD();
80002720:	b54ff0ef          	jal	ra,80001a74 <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2739
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
80002724:	748030ef          	jal	ra,80005e6c <vApplicationIdleHook>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
		prvCheckTasksWaitingTermination();
80002728:	fe5ff06f          	j	8000270c <prvIdleTask+0x14>

8000272c <prvInitialiseTCBVariables>:
prvInitialiseTCBVariables():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2832

#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
8000272c:	fc010113          	addi	sp,sp,-64
80002730:	02112e23          	sw	ra,60(sp)
80002734:	02812c23          	sw	s0,56(sp)
80002738:	04010413          	addi	s0,sp,64
8000273c:	fca42e23          	sw	a0,-36(s0)
80002740:	fcb42c23          	sw	a1,-40(s0)
80002744:	fcc42a23          	sw	a2,-44(s0)
80002748:	fcd42823          	sw	a3,-48(s0)
8000274c:	00070793          	mv	a5,a4
80002750:	fcf41723          	sh	a5,-50(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
80002754:	fe042623          	sw	zero,-20(s0)
80002758:	0440006f          	j	8000279c <prvInitialiseTCBVariables+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2838
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
8000275c:	fd842703          	lw	a4,-40(s0)
80002760:	fec42783          	lw	a5,-20(s0)
80002764:	00f707b3          	add	a5,a4,a5
80002768:	00078703          	lb	a4,0(a5)
8000276c:	fdc42683          	lw	a3,-36(s0)
80002770:	fec42783          	lw	a5,-20(s0)
80002774:	00f687b3          	add	a5,a3,a5
80002778:	02e78a23          	sb	a4,52(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2843

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
8000277c:	fd842703          	lw	a4,-40(s0)
80002780:	fec42783          	lw	a5,-20(s0)
80002784:	00f707b3          	add	a5,a4,a5
80002788:	00078783          	lb	a5,0(a5)
8000278c:	02078063          	beqz	a5,800027ac <prvInitialiseTCBVariables+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 2)
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
80002790:	fec42783          	lw	a5,-20(s0)
80002794:	00178793          	addi	a5,a5,1
80002798:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 1)
8000279c:	fec42703          	lw	a4,-20(s0)
800027a0:	00f00793          	li	a5,15
800027a4:	fae7fce3          	bleu	a4,a5,8000275c <prvInitialiseTCBVariables+0x30>
800027a8:	0080006f          	j	800027b0 <prvInitialiseTCBVariables+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2845
		{
			break;
800027ac:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2855
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
800027b0:	fdc42783          	lw	a5,-36(s0)
800027b4:	040781a3          	sb	zero,67(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2859

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
800027b8:	fd442703          	lw	a4,-44(s0)
800027bc:	00400793          	li	a5,4
800027c0:	00e7f663          	bleu	a4,a5,800027cc <prvInitialiseTCBVariables+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2861
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
800027c4:	00400793          	li	a5,4
800027c8:	fcf42a23          	sw	a5,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2868
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
800027cc:	fdc42783          	lw	a5,-36(s0)
800027d0:	fd442703          	lw	a4,-44(s0)
800027d4:	02e7a623          	sw	a4,44(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2871
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
800027d8:	fdc42783          	lw	a5,-36(s0)
800027dc:	fd442703          	lw	a4,-44(s0)
800027e0:	04e7a823          	sw	a4,80(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2872
		pxTCB->uxMutexesHeld = 0;
800027e4:	fdc42783          	lw	a5,-36(s0)
800027e8:	0407aa23          	sw	zero,84(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2876
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
800027ec:	fdc42783          	lw	a5,-36(s0)
800027f0:	00478793          	addi	a5,a5,4
800027f4:	00078513          	mv	a0,a5
800027f8:	b08ff0ef          	jal	ra,80001b00 <vListInitialiseItem>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2877
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
800027fc:	fdc42783          	lw	a5,-36(s0)
80002800:	01878793          	addi	a5,a5,24
80002804:	00078513          	mv	a0,a5
80002808:	af8ff0ef          	jal	ra,80001b00 <vListInitialiseItem>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2881

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
8000280c:	fdc42783          	lw	a5,-36(s0)
80002810:	fdc42703          	lw	a4,-36(s0)
80002814:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2884

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80002818:	00500713          	li	a4,5
8000281c:	fd442783          	lw	a5,-44(s0)
80002820:	40f70733          	sub	a4,a4,a5
80002824:	fdc42783          	lw	a5,-36(s0)
80002828:	00e7ac23          	sw	a4,24(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2885
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
8000282c:	fdc42783          	lw	a5,-36(s0)
80002830:	fdc42703          	lw	a4,-36(s0)
80002834:	02e7a223          	sw	a4,36(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2889

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
80002838:	fdc42783          	lw	a5,-36(s0)
8000283c:	0407a223          	sw	zero,68(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2927
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
80002840:	fdc42783          	lw	a5,-36(s0)
80002844:	0407ac23          	sw	zero,88(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2928
		pxTCB->eNotifyState = eNotWaitingNotification;
80002848:	fdc42783          	lw	a5,-36(s0)
8000284c:	0407ae23          	sw	zero,92(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2938
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
80002850:	00000013          	nop
80002854:	03c12083          	lw	ra,60(sp)
80002858:	03812403          	lw	s0,56(sp)
8000285c:	04010113          	addi	sp,sp,64
80002860:	00008067          	ret

80002864 <prvInitialiseTaskLists>:
prvInitialiseTaskLists():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2997

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
80002864:	fe010113          	addi	sp,sp,-32
80002868:	00112e23          	sw	ra,28(sp)
8000286c:	00812c23          	sw	s0,24(sp)
80002870:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
80002874:	fe042623          	sw	zero,-20(s0)
80002878:	0380006f          	j	800028b0 <prvInitialiseTaskLists+0x4c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3002 (discriminator 3)
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
8000287c:	fec42703          	lw	a4,-20(s0)
80002880:	00070793          	mv	a5,a4
80002884:	00279793          	slli	a5,a5,0x2
80002888:	00e787b3          	add	a5,a5,a4
8000288c:	00279793          	slli	a5,a5,0x2
80002890:	8001f737          	lui	a4,0x8001f
80002894:	5d070713          	addi	a4,a4,1488 # 8001f5d0 <__stack_top+0xfffdeb80>
80002898:	00e787b3          	add	a5,a5,a4
8000289c:	00078513          	mv	a0,a5
800028a0:	9fcff0ef          	jal	ra,80001a9c <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 3)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
800028a4:	fec42783          	lw	a5,-20(s0)
800028a8:	00178793          	addi	a5,a5,1
800028ac:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 1)
800028b0:	fec42703          	lw	a4,-20(s0)
800028b4:	00400793          	li	a5,4
800028b8:	fce7f2e3          	bleu	a4,a5,8000287c <prvInitialiseTaskLists+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3005
	}

	vListInitialise( &xDelayedTaskList1 );
800028bc:	8001f7b7          	lui	a5,0x8001f
800028c0:	63478513          	addi	a0,a5,1588 # 8001f634 <__stack_top+0xfffdebe4>
800028c4:	9d8ff0ef          	jal	ra,80001a9c <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3006
	vListInitialise( &xDelayedTaskList2 );
800028c8:	8001f7b7          	lui	a5,0x8001f
800028cc:	64878513          	addi	a0,a5,1608 # 8001f648 <__stack_top+0xfffdebf8>
800028d0:	9ccff0ef          	jal	ra,80001a9c <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3007
	vListInitialise( &xPendingReadyList );
800028d4:	8001f7b7          	lui	a5,0x8001f
800028d8:	65c78513          	addi	a0,a5,1628 # 8001f65c <__stack_top+0xfffdec0c>
800028dc:	9c0ff0ef          	jal	ra,80001a9c <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3011

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
800028e0:	8001f7b7          	lui	a5,0x8001f
800028e4:	67078513          	addi	a0,a5,1648 # 8001f670 <__stack_top+0xfffdec20>
800028e8:	9b4ff0ef          	jal	ra,80001a9c <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3017
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
800028ec:	8001f7b7          	lui	a5,0x8001f
800028f0:	68478513          	addi	a0,a5,1668 # 8001f684 <__stack_top+0xfffdec34>
800028f4:	9a8ff0ef          	jal	ra,80001a9c <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3023
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
800028f8:	8001f737          	lui	a4,0x8001f
800028fc:	63470713          	addi	a4,a4,1588 # 8001f634 <__stack_top+0xfffdebe4>
80002900:	92e1a823          	sw	a4,-1744(gp) # 80006590 <pxDelayedTaskList>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3024
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
80002904:	8001f737          	lui	a4,0x8001f
80002908:	64870713          	addi	a4,a4,1608 # 8001f648 <__stack_top+0xfffdebf8>
8000290c:	92e1aa23          	sw	a4,-1740(gp) # 80006594 <pxOverflowDelayedTaskList>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3025
}
80002910:	00000013          	nop
80002914:	01c12083          	lw	ra,28(sp)
80002918:	01812403          	lw	s0,24(sp)
8000291c:	02010113          	addi	sp,sp,32
80002920:	00008067          	ret

80002924 <prvCheckTasksWaitingTermination>:
prvCheckTasksWaitingTermination():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3029
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
80002924:	fe010113          	addi	sp,sp,-32
80002928:	00112e23          	sw	ra,28(sp)
8000292c:	00812c23          	sw	s0,24(sp)
80002930:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
80002934:	0740006f          	j	800029a8 <prvCheckTasksWaitingTermination+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3038
		{
			vTaskSuspendAll();
80002938:	929ff0ef          	jal	ra,80002260 <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3040
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
8000293c:	8001f7b7          	lui	a5,0x8001f
80002940:	6707a783          	lw	a5,1648(a5) # 8001f670 <__stack_top+0xfffdec20>
80002944:	0017b793          	seqz	a5,a5
80002948:	0ff7f793          	andi	a5,a5,255
8000294c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3042
			}
			( void ) xTaskResumeAll();
80002950:	939ff0ef          	jal	ra,80002288 <xTaskResumeAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3044

			if( xListIsEmpty == pdFALSE )
80002954:	fec42783          	lw	a5,-20(s0)
80002958:	04079863          	bnez	a5,800029a8 <prvCheckTasksWaitingTermination+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3048
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
8000295c:	c61fe0ef          	jal	ra,800015bc <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3050
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
80002960:	8001f7b7          	lui	a5,0x8001f
80002964:	67078793          	addi	a5,a5,1648 # 8001f670 <__stack_top+0xfffdec20>
80002968:	00c7a783          	lw	a5,12(a5)
8000296c:	00c7a783          	lw	a5,12(a5)
80002970:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3051
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80002974:	fe842783          	lw	a5,-24(s0)
80002978:	00478793          	addi	a5,a5,4
8000297c:	00078513          	mv	a0,a5
80002980:	b04ff0ef          	jal	ra,80001c84 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3052
					--uxCurrentNumberOfTasks;
80002984:	93c1a783          	lw	a5,-1732(gp) # 8000659c <uxCurrentNumberOfTasks>
80002988:	fff78713          	addi	a4,a5,-1
8000298c:	92e1ae23          	sw	a4,-1732(gp) # 8000659c <uxCurrentNumberOfTasks>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3053
					--uxTasksDeleted;
80002990:	9381a783          	lw	a5,-1736(gp) # 80006598 <uxTasksDeleted>
80002994:	fff78713          	addi	a4,a5,-1
80002998:	92e1ac23          	sw	a4,-1736(gp) # 80006598 <uxTasksDeleted>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3055
				}
				taskEXIT_CRITICAL();
8000299c:	c55fe0ef          	jal	ra,800015f0 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3057

				prvDeleteTCB( pxTCB );
800029a0:	fe842503          	lw	a0,-24(s0)
800029a4:	168000ef          	jal	ra,80002b0c <prvDeleteTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
800029a8:	9381a783          	lw	a5,-1736(gp) # 80006598 <uxTasksDeleted>
800029ac:	f80796e3          	bnez	a5,80002938 <prvCheckTasksWaitingTermination+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3066
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
800029b0:	00000013          	nop
800029b4:	01c12083          	lw	ra,28(sp)
800029b8:	01812403          	lw	s0,24(sp)
800029bc:	02010113          	addi	sp,sp,32
800029c0:	00008067          	ret

800029c4 <prvAddCurrentTaskToDelayedList>:
prvAddCurrentTaskToDelayedList():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3070
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
800029c4:	fe010113          	addi	sp,sp,-32
800029c8:	00112e23          	sw	ra,28(sp)
800029cc:	00812c23          	sw	s0,24(sp)
800029d0:	02010413          	addi	s0,sp,32
800029d4:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3072
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
800029d8:	92c1a783          	lw	a5,-1748(gp) # 8000658c <pxCurrentTCB>
800029dc:	fec42703          	lw	a4,-20(s0)
800029e0:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3074

	if( xTimeToWake < xTickCount )
800029e4:	9401a783          	lw	a5,-1728(gp) # 800065a0 <xTickCount>
800029e8:	fec42703          	lw	a4,-20(s0)
800029ec:	02f77063          	bleu	a5,a4,80002a0c <prvAddCurrentTaskToDelayedList+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3077
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
800029f0:	9341a703          	lw	a4,-1740(gp) # 80006594 <pxOverflowDelayedTaskList>
800029f4:	92c1a783          	lw	a5,-1748(gp) # 8000658c <pxCurrentTCB>
800029f8:	00478793          	addi	a5,a5,4
800029fc:	00078593          	mv	a1,a5
80002a00:	00070513          	mv	a0,a4
80002a04:	9acff0ef          	jal	ra,80001bb0 <vListInsert>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
80002a08:	0300006f          	j	80002a38 <prvAddCurrentTaskToDelayedList+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3082
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80002a0c:	9301a703          	lw	a4,-1744(gp) # 80006590 <pxDelayedTaskList>
80002a10:	92c1a783          	lw	a5,-1748(gp) # 8000658c <pxCurrentTCB>
80002a14:	00478793          	addi	a5,a5,4
80002a18:	00078593          	mv	a1,a5
80002a1c:	00070513          	mv	a0,a4
80002a20:	990ff0ef          	jal	ra,80001bb0 <vListInsert>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3087
		if( xTimeToWake < xNextTaskUnblockTime )
80002a24:	95c1a783          	lw	a5,-1700(gp) # 800065bc <xNextTaskUnblockTime>
80002a28:	fec42703          	lw	a4,-20(s0)
80002a2c:	00f77663          	bleu	a5,a4,80002a38 <prvAddCurrentTaskToDelayedList+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3089
			xNextTaskUnblockTime = xTimeToWake;
80002a30:	fec42703          	lw	a4,-20(s0)
80002a34:	94e1ae23          	sw	a4,-1700(gp) # 800065bc <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
}
80002a38:	00000013          	nop
80002a3c:	01c12083          	lw	ra,28(sp)
80002a40:	01812403          	lw	s0,24(sp)
80002a44:	02010113          	addi	sp,sp,32
80002a48:	00008067          	ret

80002a4c <prvAllocateTCBAndStack>:
prvAllocateTCBAndStack():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3100
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
80002a4c:	fd010113          	addi	sp,sp,-48
80002a50:	02112623          	sw	ra,44(sp)
80002a54:	02812423          	sw	s0,40(sp)
80002a58:	03010413          	addi	s0,sp,48
80002a5c:	00050793          	mv	a5,a0
80002a60:	fcb42c23          	sw	a1,-40(s0)
80002a64:	fcf41f23          	sh	a5,-34(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80002a68:	fd842783          	lw	a5,-40(s0)
80002a6c:	00079e63          	bnez	a5,80002a88 <prvAllocateTCBAndStack+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 1)
80002a70:	fde45783          	lhu	a5,-34(s0)
80002a74:	00279793          	slli	a5,a5,0x2
80002a78:	00078513          	mv	a0,a5
80002a7c:	fd8fe0ef          	jal	ra,80001254 <pvPortMalloc>
80002a80:	00050793          	mv	a5,a0
80002a84:	0080006f          	j	80002a8c <prvAllocateTCBAndStack+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 2)
80002a88:	fd842783          	lw	a5,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 4)
80002a8c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3134 (discriminator 4)

		if( pxStack != NULL )
80002a90:	fe842783          	lw	a5,-24(s0)
80002a94:	02078a63          	beqz	a5,80002ac8 <prvAllocateTCBAndStack+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3138
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
80002a98:	06000513          	li	a0,96
80002a9c:	fb8fe0ef          	jal	ra,80001254 <pvPortMalloc>
80002aa0:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3140

			if( pxNewTCB != NULL )
80002aa4:	fec42783          	lw	a5,-20(s0)
80002aa8:	00078a63          	beqz	a5,80002abc <prvAllocateTCBAndStack+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3143
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
80002aac:	fec42783          	lw	a5,-20(s0)
80002ab0:	fe842703          	lw	a4,-24(s0)
80002ab4:	02e7a823          	sw	a4,48(a5)
80002ab8:	0140006f          	j	80002acc <prvAllocateTCBAndStack+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3149
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
80002abc:	fe842503          	lw	a0,-24(s0)
80002ac0:	971fe0ef          	jal	ra,80001430 <vPortFree>
80002ac4:	0080006f          	j	80002acc <prvAllocateTCBAndStack+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3154
			}
		}
		else
		{
			pxNewTCB = NULL;
80002ac8:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3159
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
80002acc:	fec42783          	lw	a5,-20(s0)
80002ad0:	02078263          	beqz	a5,80002af4 <prvAllocateTCBAndStack+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3165
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
80002ad4:	fec42783          	lw	a5,-20(s0)
80002ad8:	0307a703          	lw	a4,48(a5)
80002adc:	fde45783          	lhu	a5,-34(s0)
80002ae0:	00279793          	slli	a5,a5,0x2
80002ae4:	00078613          	mv	a2,a5
80002ae8:	0a500593          	li	a1,165
80002aec:	00070513          	mv	a0,a4
80002af0:	a2cff0ef          	jal	ra,80001d1c <memset>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3170
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
80002af4:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3171
}
80002af8:	00078513          	mv	a0,a5
80002afc:	02c12083          	lw	ra,44(sp)
80002b00:	02812403          	lw	s0,40(sp)
80002b04:	03010113          	addi	sp,sp,48
80002b08:	00008067          	ret

80002b0c <prvDeleteTCB>:
prvDeleteTCB():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3310
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
80002b0c:	fe010113          	addi	sp,sp,-32
80002b10:	00112e23          	sw	ra,28(sp)
80002b14:	00812c23          	sw	s0,24(sp)
80002b18:	02010413          	addi	s0,sp,32
80002b1c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3335
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
80002b20:	fec42783          	lw	a5,-20(s0)
80002b24:	0307a783          	lw	a5,48(a5)
80002b28:	00078513          	mv	a0,a5
80002b2c:	905fe0ef          	jal	ra,80001430 <vPortFree>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3339
		}
		#endif

		vPortFree( pxTCB );
80002b30:	fec42503          	lw	a0,-20(s0)
80002b34:	8fdfe0ef          	jal	ra,80001430 <vPortFree>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3340
	}
80002b38:	00000013          	nop
80002b3c:	01c12083          	lw	ra,28(sp)
80002b40:	01812403          	lw	s0,24(sp)
80002b44:	02010113          	addi	sp,sp,32
80002b48:	00008067          	ret

80002b4c <prvResetNextTaskUnblockTime>:
prvResetNextTaskUnblockTime():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3346

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
80002b4c:	fe010113          	addi	sp,sp,-32
80002b50:	00812e23          	sw	s0,28(sp)
80002b54:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80002b58:	9301a783          	lw	a5,-1744(gp) # 80006590 <pxDelayedTaskList>
80002b5c:	0007a783          	lw	a5,0(a5)
80002b60:	00079663          	bnez	a5,80002b6c <prvResetNextTaskUnblockTime+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 1)
80002b64:	00100793          	li	a5,1
80002b68:	0080006f          	j	80002b70 <prvResetNextTaskUnblockTime+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 2)
80002b6c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 4)
80002b70:	00078863          	beqz	a5,80002b80 <prvResetNextTaskUnblockTime+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3355
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
80002b74:	fff00713          	li	a4,-1
80002b78:	94e1ae23          	sw	a4,-1700(gp) # 800065bc <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
80002b7c:	0200006f          	j	80002b9c <prvResetNextTaskUnblockTime+0x50>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3363
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80002b80:	9301a783          	lw	a5,-1744(gp) # 80006590 <pxDelayedTaskList>
80002b84:	00c7a783          	lw	a5,12(a5)
80002b88:	00c7a783          	lw	a5,12(a5)
80002b8c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3364
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
80002b90:	fec42783          	lw	a5,-20(s0)
80002b94:	0047a703          	lw	a4,4(a5)
80002b98:	94e1ae23          	sw	a4,-1700(gp) # 800065bc <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
}
80002b9c:	00000013          	nop
80002ba0:	01c12403          	lw	s0,28(sp)
80002ba4:	02010113          	addi	sp,sp,32
80002ba8:	00008067          	ret

80002bac <xTaskGetCurrentTaskHandle>:
xTaskGetCurrentTaskHandle():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3372
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
80002bac:	fe010113          	addi	sp,sp,-32
80002bb0:	00812e23          	sw	s0,28(sp)
80002bb4:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3378
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
80002bb8:	92c1a783          	lw	a5,-1748(gp) # 8000658c <pxCurrentTCB>
80002bbc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3380

		return xReturn;
80002bc0:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3381
	}
80002bc4:	00078513          	mv	a0,a5
80002bc8:	01c12403          	lw	s0,28(sp)
80002bcc:	02010113          	addi	sp,sp,32
80002bd0:	00008067          	ret

80002bd4 <PLIC_EnableIRQ>:
PLIC_EnableIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:154
{
80002bd4:	fd010113          	addi	sp,sp,-48
80002bd8:	02812623          	sw	s0,44(sp)
80002bdc:	03010413          	addi	s0,sp,48
80002be0:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:155
    unsigned long hart_id = read_csr(mhartid);
80002be4:	f14027f3          	csrr	a5,mhartid
80002be8:	fef42623          	sw	a5,-20(s0)
80002bec:	fec42783          	lw	a5,-20(s0)
80002bf0:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:156
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80002bf4:	40000737          	lui	a4,0x40000
80002bf8:	fdc42783          	lw	a5,-36(s0)
80002bfc:	0057d793          	srli	a5,a5,0x5
80002c00:	fe842683          	lw	a3,-24(s0)
80002c04:	00569693          	slli	a3,a3,0x5
80002c08:	00f686b3          	add	a3,a3,a5
80002c0c:	000017b7          	lui	a5,0x1
80002c10:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80002c14:	00f687b3          	add	a5,a3,a5
80002c18:	00279793          	slli	a5,a5,0x2
80002c1c:	00f707b3          	add	a5,a4,a5
80002c20:	0007a783          	lw	a5,0(a5)
80002c24:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:157
    current |= (uint32_t)1 << (IRQn % 32);
80002c28:	fdc42783          	lw	a5,-36(s0)
80002c2c:	01f7f793          	andi	a5,a5,31
80002c30:	00100713          	li	a4,1
80002c34:	00f717b3          	sll	a5,a4,a5
80002c38:	fe442703          	lw	a4,-28(s0)
80002c3c:	00f767b3          	or	a5,a4,a5
80002c40:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:158
    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
80002c44:	40000737          	lui	a4,0x40000
80002c48:	fdc42783          	lw	a5,-36(s0)
80002c4c:	0057d793          	srli	a5,a5,0x5
80002c50:	fe842683          	lw	a3,-24(s0)
80002c54:	00569693          	slli	a3,a3,0x5
80002c58:	00f686b3          	add	a3,a3,a5
80002c5c:	000017b7          	lui	a5,0x1
80002c60:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80002c64:	00f687b3          	add	a5,a3,a5
80002c68:	00279793          	slli	a5,a5,0x2
80002c6c:	00f707b3          	add	a5,a4,a5
80002c70:	fe442703          	lw	a4,-28(s0)
80002c74:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:159
}
80002c78:	00000013          	nop
80002c7c:	02c12403          	lw	s0,44(sp)
80002c80:	03010113          	addi	sp,sp,48
80002c84:	00008067          	ret

80002c88 <PLIC_SetPriority>:
PLIC_SetPriority():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:188
{
80002c88:	fe010113          	addi	sp,sp,-32
80002c8c:	00812e23          	sw	s0,28(sp)
80002c90:	02010413          	addi	s0,sp,32
80002c94:	fea42623          	sw	a0,-20(s0)
80002c98:	feb42423          	sw	a1,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:189
    PLIC->SOURCE_PRIORITY[IRQn] = priority;
80002c9c:	40000737          	lui	a4,0x40000
80002ca0:	fec42783          	lw	a5,-20(s0)
80002ca4:	00279793          	slli	a5,a5,0x2
80002ca8:	00f707b3          	add	a5,a4,a5
80002cac:	fe842703          	lw	a4,-24(s0)
80002cb0:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:190
}
80002cb4:	00000013          	nop
80002cb8:	01c12403          	lw	s0,28(sp)
80002cbc:	02010113          	addi	sp,sp,32
80002cc0:	00008067          	ret

80002cc4 <Chronos_init>:
Chronos_init():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:27
extern volatile unsigned int SendingQueue_front;
extern volatile unsigned int SendingQueue_tail;

////////////////////////////////////////////////////////////
// Initialize Chronos stuff
void Chronos_init(){
80002cc4:	ff010113          	addi	sp,sp,-16
80002cc8:	00112623          	sw	ra,12(sp)
80002ccc:	00812423          	sw	s0,8(sp)
80002cd0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:29
    //Informs the Router this tile ID, that is provided by Harness
    HW_set_32bit_reg(ROUTER_BASE, HW_get_32bit_reg(MY_ID)); 
80002cd4:	900007b7          	lui	a5,0x90000
80002cd8:	ffc78513          	addi	a0,a5,-4 # 8ffffffc <__stack_top+0xffbf5ac>
80002cdc:	a2cfe0ef          	jal	ra,80000f08 <HW_get_32bit_reg>
80002ce0:	00050793          	mv	a5,a0
80002ce4:	00078593          	mv	a1,a5
80002ce8:	50000537          	lui	a0,0x50000
80002cec:	a14fe0ef          	jal	ra,80000f00 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:32
    
    // Reads this processor address, calculated by the router
    ProcessorAddr = HW_get_32bit_reg(ROUTER_BASE);
80002cf0:	50000537          	lui	a0,0x50000
80002cf4:	a14fe0ef          	jal	ra,80000f08 <HW_get_32bit_reg>
80002cf8:	00050713          	mv	a4,a0
80002cfc:	800217b7          	lui	a5,0x80021
80002d00:	a4e7a223          	sw	a4,-1468(a5) # 80020a44 <__stack_top+0xfffdfff4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:35

    // Informs the PRINTER this tile address
    HW_set_32bit_reg(PRINTER_CHAR, getXpos(ProcessorAddr));
80002d04:	800217b7          	lui	a5,0x80021
80002d08:	a447a783          	lw	a5,-1468(a5) # 80020a44 <__stack_top+0xfffdfff4>
80002d0c:	00078513          	mv	a0,a5
80002d10:	1e0000ef          	jal	ra,80002ef0 <getXpos>
80002d14:	00050793          	mv	a5,a0
80002d18:	00078593          	mv	a1,a5
80002d1c:	500007b7          	lui	a5,0x50000
80002d20:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002d24:	9dcfe0ef          	jal	ra,80000f00 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:36
    HW_set_32bit_reg(PRINTER_CHAR, getYpos(ProcessorAddr));
80002d28:	800217b7          	lui	a5,0x80021
80002d2c:	a447a783          	lw	a5,-1468(a5) # 80020a44 <__stack_top+0xfffdfff4>
80002d30:	00078513          	mv	a0,a5
80002d34:	1e8000ef          	jal	ra,80002f1c <getYpos>
80002d38:	00050793          	mv	a5,a0
80002d3c:	00078593          	mv	a1,a5
80002d40:	500007b7          	lui	a5,0x50000
80002d44:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002d48:	9b8fe0ef          	jal	ra,80000f00 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:39

    // Enables interruption from NI
    NI_enable_irq(TX_RX);
80002d4c:	000077b7          	lui	a5,0x7
80002d50:	77778513          	addi	a0,a5,1911 # 7777 <HEAP_SIZE-0x8889>
80002d54:	23c000ef          	jal	ra,80002f90 <NI_enable_irq>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:42

    // Informs the NI the address to store incoming packets
    HW_set_32bit_reg(NI_ADDR, (unsigned int)&incommingPacket.header);
80002d58:	8001f7b7          	lui	a5,0x8001f
80002d5c:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
80002d60:	00078593          	mv	a1,a5
80002d64:	500007b7          	lui	a5,0x50000
80002d68:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
80002d6c:	994fe0ef          	jal	ra,80000f00 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:45
    
    // Initialize the TaskList
    API_TaskListInit();
80002d70:	548020ef          	jal	ra,800052b8 <API_TaskListInit>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:48

    // Initialize the Message & Service PIPE
    API_PipeInitialization();
80002d74:	305020ef          	jal	ra,80005878 <API_PipeInitialization>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:49
    SendingQueue_front = 0;
80002d78:	8001f7b7          	lui	a5,0x8001f
80002d7c:	7e07ae23          	sw	zero,2044(a5) # 8001f7fc <__stack_top+0xfffdedac>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:50
    SendingQueue_tail = 0;
80002d80:	8001f7b7          	lui	a5,0x8001f
80002d84:	7e07a223          	sw	zero,2020(a5) # 8001f7e4 <__stack_top+0xfffded94>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:52

    return;
80002d88:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:53
}
80002d8c:	00c12083          	lw	ra,12(sp)
80002d90:	00812403          	lw	s0,8(sp)
80002d94:	01010113          	addi	sp,sp,16
80002d98:	00008067          	ret

80002d9c <prints>:
prints():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:57

////////////////////////////////////////////////////////////
// Prints a string
void prints(char *text) {
80002d9c:	fd010113          	addi	sp,sp,-48
80002da0:	02112623          	sw	ra,44(sp)
80002da4:	02812423          	sw	s0,40(sp)
80002da8:	03010413          	addi	s0,sp,48
80002dac:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:58
    int i = 0;
80002db0:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:60 (discriminator 1)
    do {
        HW_set_32bit_reg(PRINTER_CHAR, text[i]);
80002db4:	fec42783          	lw	a5,-20(s0)
80002db8:	fdc42703          	lw	a4,-36(s0)
80002dbc:	00f707b3          	add	a5,a4,a5
80002dc0:	00078783          	lb	a5,0(a5)
80002dc4:	00078593          	mv	a1,a5
80002dc8:	500007b7          	lui	a5,0x50000
80002dcc:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002dd0:	930fe0ef          	jal	ra,80000f00 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:61 (discriminator 1)
        i++;
80002dd4:	fec42783          	lw	a5,-20(s0)
80002dd8:	00178793          	addi	a5,a5,1
80002ddc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:62 (discriminator 1)
    } while (text[i - 1] != '\0');
80002de0:	fec42783          	lw	a5,-20(s0)
80002de4:	fff78793          	addi	a5,a5,-1
80002de8:	fdc42703          	lw	a4,-36(s0)
80002dec:	00f707b3          	add	a5,a4,a5
80002df0:	00078783          	lb	a5,0(a5)
80002df4:	fc0790e3          	bnez	a5,80002db4 <prints+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:63
    return;
80002df8:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:64
}
80002dfc:	02c12083          	lw	ra,44(sp)
80002e00:	02812403          	lw	s0,40(sp)
80002e04:	03010113          	addi	sp,sp,48
80002e08:	00008067          	ret

80002e0c <printi>:
printi():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:68

////////////////////////////////////////////////////////////
// Prints an integer
void printi(int value) {
80002e0c:	fe010113          	addi	sp,sp,-32
80002e10:	00112e23          	sw	ra,28(sp)
80002e14:	00812c23          	sw	s0,24(sp)
80002e18:	02010413          	addi	s0,sp,32
80002e1c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:69
    HW_set_32bit_reg(PRINTER_INT, value);
80002e20:	fec42783          	lw	a5,-20(s0)
80002e24:	00078593          	mv	a1,a5
80002e28:	500007b7          	lui	a5,0x50000
80002e2c:	02478513          	addi	a0,a5,36 # 50000024 <RAM_SIZE+0x4ff80024>
80002e30:	8d0fe0ef          	jal	ra,80000f00 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:70
    return;
80002e34:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:71
}
80002e38:	01c12083          	lw	ra,28(sp)
80002e3c:	01812403          	lw	s0,24(sp)
80002e40:	02010113          	addi	sp,sp,32
80002e44:	00008067          	ret

80002e48 <printsv>:
printsv():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:75

////////////////////////////////////////////////////////////
// Prints a string followed by a integer
void printsv(char *text1, int value1) {
80002e48:	fe010113          	addi	sp,sp,-32
80002e4c:	00112e23          	sw	ra,28(sp)
80002e50:	00812c23          	sw	s0,24(sp)
80002e54:	02010413          	addi	s0,sp,32
80002e58:	fea42623          	sw	a0,-20(s0)
80002e5c:	feb42423          	sw	a1,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:77
    //vPortEnterCritical();
        prints(text1);
80002e60:	fec42503          	lw	a0,-20(s0)
80002e64:	f39ff0ef          	jal	ra,80002d9c <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:78
        printi(value1);
80002e68:	fe842503          	lw	a0,-24(s0)
80002e6c:	fa1ff0ef          	jal	ra,80002e0c <printi>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:79
        prints("\n");
80002e70:	800067b7          	lui	a5,0x80006
80002e74:	1dc78513          	addi	a0,a5,476 # 800061dc <__stack_top+0xfffc578c>
80002e78:	f25ff0ef          	jal	ra,80002d9c <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:81
    //vPortExitCritical();
    return;
80002e7c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:82
}
80002e80:	01c12083          	lw	ra,28(sp)
80002e84:	01812403          	lw	s0,24(sp)
80002e88:	02010113          	addi	sp,sp,32
80002e8c:	00008067          	ret

80002e90 <printsvsv>:
printsvsv():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:86

////////////////////////////////////////////////////////////
// Prints two strings and two integers interspersed
void printsvsv(char *text1, int value1, char *text2, int value2) {
80002e90:	fe010113          	addi	sp,sp,-32
80002e94:	00112e23          	sw	ra,28(sp)
80002e98:	00812c23          	sw	s0,24(sp)
80002e9c:	02010413          	addi	s0,sp,32
80002ea0:	fea42623          	sw	a0,-20(s0)
80002ea4:	feb42423          	sw	a1,-24(s0)
80002ea8:	fec42223          	sw	a2,-28(s0)
80002eac:	fed42023          	sw	a3,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:88
    //vPortEnterCritical();
        prints(text1);
80002eb0:	fec42503          	lw	a0,-20(s0)
80002eb4:	ee9ff0ef          	jal	ra,80002d9c <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:89
        printi(value1);
80002eb8:	fe842503          	lw	a0,-24(s0)
80002ebc:	f51ff0ef          	jal	ra,80002e0c <printi>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:90
        prints(text2);
80002ec0:	fe442503          	lw	a0,-28(s0)
80002ec4:	ed9ff0ef          	jal	ra,80002d9c <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:91
        printi(value2);
80002ec8:	fe042503          	lw	a0,-32(s0)
80002ecc:	f41ff0ef          	jal	ra,80002e0c <printi>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:92
        prints("\n");
80002ed0:	800067b7          	lui	a5,0x80006
80002ed4:	1dc78513          	addi	a0,a5,476 # 800061dc <__stack_top+0xfffc578c>
80002ed8:	ec5ff0ef          	jal	ra,80002d9c <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:94
    //vPortExitCritical();
    return;
80002edc:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:95
}
80002ee0:	01c12083          	lw	ra,28(sp)
80002ee4:	01812403          	lw	s0,24(sp)
80002ee8:	02010113          	addi	sp,sp,32
80002eec:	00008067          	ret

80002ef0 <getXpos>:
getXpos():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:99

////////////////////////////////////////////////////////////
// Gets the X coordinate from the address
unsigned int getXpos(unsigned int addr) { return ((addr & 0x0000FF00) >> 8); }
80002ef0:	fe010113          	addi	sp,sp,-32
80002ef4:	00812e23          	sw	s0,28(sp)
80002ef8:	02010413          	addi	s0,sp,32
80002efc:	fea42623          	sw	a0,-20(s0)
80002f00:	fec42783          	lw	a5,-20(s0)
80002f04:	0087d793          	srli	a5,a5,0x8
80002f08:	0ff7f793          	andi	a5,a5,255
80002f0c:	00078513          	mv	a0,a5
80002f10:	01c12403          	lw	s0,28(sp)
80002f14:	02010113          	addi	sp,sp,32
80002f18:	00008067          	ret

80002f1c <getYpos>:
getYpos():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:103

////////////////////////////////////////////////////////////
// Gets the Y coordinate from the address
unsigned int getYpos(unsigned int addr) { return (addr & 0x000000FF); }
80002f1c:	fe010113          	addi	sp,sp,-32
80002f20:	00812e23          	sw	s0,28(sp)
80002f24:	02010413          	addi	s0,sp,32
80002f28:	fea42623          	sw	a0,-20(s0)
80002f2c:	fec42783          	lw	a5,-20(s0)
80002f30:	0ff7f793          	andi	a5,a5,255
80002f34:	00078513          	mv	a0,a5
80002f38:	01c12403          	lw	s0,28(sp)
80002f3c:	02010113          	addi	sp,sp,32
80002f40:	00008067          	ret

80002f44 <SendRaw>:
SendRaw():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:107

///////////////////////////////////////////////////////////////////
// Configure the NI to transmitt a given packet
void SendRaw(unsigned int addr) {
80002f44:	fe010113          	addi	sp,sp,-32
80002f48:	00112e23          	sw	ra,28(sp)
80002f4c:	00812c23          	sw	s0,24(sp)
80002f50:	02010413          	addi	s0,sp,32
80002f54:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:108
    HW_set_32bit_reg(NI_ADDR, addr);
80002f58:	fec42583          	lw	a1,-20(s0)
80002f5c:	500007b7          	lui	a5,0x50000
80002f60:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
80002f64:	f9dfd0ef          	jal	ra,80000f00 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:109
    HW_set_32bit_reg(NI_TX, TX);
80002f68:	000027b7          	lui	a5,0x2
80002f6c:	22278593          	addi	a1,a5,546 # 2222 <HEAP_SIZE-0xddde>
80002f70:	500007b7          	lui	a5,0x50000
80002f74:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80002f78:	f89fd0ef          	jal	ra,80000f00 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:110
    return;
80002f7c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:111
}
80002f80:	01c12083          	lw	ra,28(sp)
80002f84:	01812403          	lw	s0,24(sp)
80002f88:	02010113          	addi	sp,sp,32
80002f8c:	00008067          	ret

80002f90 <NI_enable_irq>:
NI_enable_irq():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:115

////////////////////////////////////////////////////////////
// Enables interruptions incomming from NI
void NI_enable_irq(int which){
80002f90:	fe010113          	addi	sp,sp,-32
80002f94:	00112e23          	sw	ra,28(sp)
80002f98:	00812c23          	sw	s0,24(sp)
80002f9c:	02010413          	addi	s0,sp,32
80002fa0:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:116
	if (which == TX || which == TX_RX){
80002fa4:	fec42703          	lw	a4,-20(s0)
80002fa8:	000027b7          	lui	a5,0x2
80002fac:	22278793          	addi	a5,a5,546 # 2222 <HEAP_SIZE-0xddde>
80002fb0:	00f70a63          	beq	a4,a5,80002fc4 <NI_enable_irq+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:116 (discriminator 1)
80002fb4:	fec42703          	lw	a4,-20(s0)
80002fb8:	000077b7          	lui	a5,0x7
80002fbc:	77778793          	addi	a5,a5,1911 # 7777 <HEAP_SIZE-0x8889>
80002fc0:	00f71c63          	bne	a4,a5,80002fd8 <NI_enable_irq+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:117
        PLIC_EnableIRQ(NI_TX_IRQn);
80002fc4:	00100513          	li	a0,1
80002fc8:	c0dff0ef          	jal	ra,80002bd4 <PLIC_EnableIRQ>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:118
        PLIC_SetPriority(NI_TX_IRQn, 1);
80002fcc:	00100593          	li	a1,1
80002fd0:	00100513          	li	a0,1
80002fd4:	cb5ff0ef          	jal	ra,80002c88 <PLIC_SetPriority>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:120
    }
    if (which == RX || which == TX_RX){
80002fd8:	fec42703          	lw	a4,-20(s0)
80002fdc:	000037b7          	lui	a5,0x3
80002fe0:	33378793          	addi	a5,a5,819 # 3333 <HEAP_SIZE-0xcccd>
80002fe4:	00f70a63          	beq	a4,a5,80002ff8 <NI_enable_irq+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:120 (discriminator 1)
80002fe8:	fec42703          	lw	a4,-20(s0)
80002fec:	000077b7          	lui	a5,0x7
80002ff0:	77778793          	addi	a5,a5,1911 # 7777 <HEAP_SIZE-0x8889>
80002ff4:	00f71e63          	bne	a4,a5,80003010 <NI_enable_irq+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:121
        PLIC_EnableIRQ(NI_RX_IRQn);
80002ff8:	00200513          	li	a0,2
80002ffc:	bd9ff0ef          	jal	ra,80002bd4 <PLIC_EnableIRQ>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:122
        PLIC_SetPriority(NI_RX_IRQn, 1);
80003000:	00100593          	li	a1,1
80003004:	00200513          	li	a0,2
80003008:	c81ff0ef          	jal	ra,80002c88 <PLIC_SetPriority>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:124
    }
    return;
8000300c:	00000013          	nop
80003010:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:125
}
80003014:	01c12083          	lw	ra,28(sp)
80003018:	01812403          	lw	s0,24(sp)
8000301c:	02010113          	addi	sp,sp,32
80003020:	00008067          	ret

80003024 <External_1_IRQHandler>:
External_1_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:137
    return;
}

////////////////////////////////////////////////////////////
// Interruptions handler for TX
uint8_t External_1_IRQHandler(void){ 
80003024:	ff010113          	addi	sp,sp,-16
80003028:	00112623          	sw	ra,12(sp)
8000302c:	00812423          	sw	s0,8(sp)
80003030:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:139
    //prints("INTERRUPTION TX\n");
    API_ClearPipeSlot(SendingSlot);
80003034:	8001f7b7          	lui	a5,0x8001f
80003038:	6987a783          	lw	a5,1688(a5) # 8001f698 <__stack_top+0xfffdec48>
8000303c:	00078513          	mv	a0,a5
80003040:	2cd020ef          	jal	ra,80005b0c <API_ClearPipeSlot>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:140
    HW_set_32bit_reg(NI_TX, DONE);
80003044:	000057b7          	lui	a5,0x5
80003048:	55578593          	addi	a1,a5,1365 # 5555 <HEAP_SIZE-0xaaab>
8000304c:	500007b7          	lui	a5,0x50000
80003050:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80003054:	eadfd0ef          	jal	ra,80000f00 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:141
    API_Try2Send();
80003058:	7d4000ef          	jal	ra,8000382c <API_Try2Send>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:142
    return 0;
8000305c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:143
}
80003060:	00078513          	mv	a0,a5
80003064:	00c12083          	lw	ra,12(sp)
80003068:	00812403          	lw	s0,8(sp)
8000306c:	01010113          	addi	sp,sp,16
80003070:	00008067          	ret

80003074 <External_2_IRQHandler>:
External_2_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:147

////////////////////////////////////////////////////////////
// Interruptions handler for RX
uint8_t External_2_IRQHandler(void){
80003074:	fe010113          	addi	sp,sp,-32
80003078:	00112e23          	sw	ra,28(sp)
8000307c:	00812c23          	sw	s0,24(sp)
80003080:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:165
    // printsv("Flit 10: ", incommingPacket.flit10);
    // printsv("Flit 11: ", incommingPacket.flit11);
    // printsv("Flit 12: ", incommingPacket.flit12);


    switch (incommingPacket.service){
80003084:	8001f7b7          	lui	a5,0x8001f
80003088:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
8000308c:	0087a783          	lw	a5,8(a5)
80003090:	03300713          	li	a4,51
80003094:	12e78e63          	beq	a5,a4,800031d0 <External_2_IRQHandler+0x15c>
80003098:	03300713          	li	a4,51
8000309c:	02f76a63          	bltu	a4,a5,800030d0 <External_2_IRQHandler+0x5c>
800030a0:	02000713          	li	a4,32
800030a4:	2ae78e63          	beq	a5,a4,80003360 <External_2_IRQHandler+0x2ec>
800030a8:	02000713          	li	a4,32
800030ac:	00f76863          	bltu	a4,a5,800030bc <External_2_IRQHandler+0x48>
800030b0:	01000713          	li	a4,16
800030b4:	22e78863          	beq	a5,a4,800032e4 <External_2_IRQHandler+0x270>
800030b8:	3680006f          	j	80003420 <External_2_IRQHandler+0x3ac>
800030bc:	02100713          	li	a4,33
800030c0:	30e78863          	beq	a5,a4,800033d0 <External_2_IRQHandler+0x35c>
800030c4:	03000713          	li	a4,48
800030c8:	06e78c63          	beq	a5,a4,80003140 <External_2_IRQHandler+0xcc>
800030cc:	3540006f          	j	80003420 <External_2_IRQHandler+0x3ac>
800030d0:	20000713          	li	a4,512
800030d4:	02e78663          	beq	a5,a4,80003100 <External_2_IRQHandler+0x8c>
800030d8:	20000713          	li	a4,512
800030dc:	00f76863          	bltu	a4,a5,800030ec <External_2_IRQHandler+0x78>
800030e0:	03500713          	li	a4,53
800030e4:	10e78a63          	beq	a5,a4,800031f8 <External_2_IRQHandler+0x184>
800030e8:	3380006f          	j	80003420 <External_2_IRQHandler+0x3ac>
800030ec:	40000713          	li	a4,1024
800030f0:	12e78863          	beq	a5,a4,80003220 <External_2_IRQHandler+0x1ac>
800030f4:	40100713          	li	a4,1025
800030f8:	18e78e63          	beq	a5,a4,80003294 <External_2_IRQHandler+0x220>
800030fc:	3240006f          	j	80003420 <External_2_IRQHandler+0x3ac>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:170
        unsigned int aux;

        case REPOSITORY_APP_INFO: // When the repository informs the GM that exist a new Application available:
            //prints("REPOSITORY_APP_INFO\n");
            API_AddApplication(incommingPacket.application_id,
80003100:	8001f7b7          	lui	a5,0x8001f
80003104:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
80003108:	00c7a703          	lw	a4,12(a5)
8000310c:	8001f7b7          	lui	a5,0x8001f
80003110:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
80003114:	0107a583          	lw	a1,16(a5)
80003118:	8001f7b7          	lui	a5,0x8001f
8000311c:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
80003120:	0147a603          	lw	a2,20(a5)
80003124:	8001f7b7          	lui	a5,0x8001f
80003128:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
8000312c:	0187a783          	lw	a5,24(a5)
80003130:	00078693          	mv	a3,a5
80003134:	00070513          	mv	a0,a4
80003138:	12c010ef          	jal	ra,80004264 <API_AddApplication>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:174
                               incommingPacket.aplication_period, 
                               incommingPacket.application_executions, 
                               incommingPacket.application_n_tasks);
            break;
8000313c:	3040006f          	j	80003440 <External_2_IRQHandler+0x3cc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:179
        
        case TASK_ALLOCATION_SEND: // When the GM asks one Slave to allocate one task
            // aux will receive the taskslot 
            //prints("TASK_ALLOCATION_SEND\n");
            aux = API_TaskAllocation(incommingPacket.task_id,
80003140:	8001f7b7          	lui	a5,0x8001f
80003144:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
80003148:	00c7a503          	lw	a0,12(a5)
8000314c:	8001f7b7          	lui	a5,0x8001f
80003150:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
80003154:	0107a583          	lw	a1,16(a5)
80003158:	8001f7b7          	lui	a5,0x8001f
8000315c:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
80003160:	0147a603          	lw	a2,20(a5)
80003164:	8001f7b7          	lui	a5,0x8001f
80003168:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
8000316c:	0187a683          	lw	a3,24(a5)
80003170:	8001f7b7          	lui	a5,0x8001f
80003174:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
80003178:	01c7a783          	lw	a5,28(a5)
8000317c:	00078713          	mv	a4,a5
80003180:	2e4020ef          	jal	ra,80005464 <API_TaskAllocation>
80003184:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:186
                                     incommingPacket.task_bss_size,
                                     incommingPacket.task_start_point,
                                     incommingPacket.task_app_id);

            // Informs the NI were to write the application
            HW_set_32bit_reg(NI_ADDR, TaskList[aux].taskAddr);
80003188:	800217b7          	lui	a5,0x80021
8000318c:	fec42703          	lw	a4,-20(s0)
80003190:	8b878693          	addi	a3,a5,-1864 # 800208b8 <__stack_top+0xfffdfe68>
80003194:	00070793          	mv	a5,a4
80003198:	00479793          	slli	a5,a5,0x4
8000319c:	40e787b3          	sub	a5,a5,a4
800031a0:	00379793          	slli	a5,a5,0x3
800031a4:	00f687b3          	add	a5,a3,a5
800031a8:	01c7a783          	lw	a5,28(a5)
800031ac:	00078593          	mv	a1,a5
800031b0:	500007b7          	lui	a5,0x50000
800031b4:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
800031b8:	d49fd0ef          	jal	ra,80000f00 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:187
            incommingPacket.service = TASK_ALLOCATION_FINISHED;
800031bc:	8001f7b7          	lui	a5,0x8001f
800031c0:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
800031c4:	03300713          	li	a4,51
800031c8:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:188
            break;
800031cc:	2740006f          	j	80003440 <External_2_IRQHandler+0x3cc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:192

        case TASK_ALLOCATION_FINISHED:
            //prints("TASK_ALLOCATION_FINISHED\n");
            API_AckTaskAllocation(incommingPacket.task_id, incommingPacket.task_app_id);
800031d0:	8001f7b7          	lui	a5,0x8001f
800031d4:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
800031d8:	00c7a703          	lw	a4,12(a5)
800031dc:	8001f7b7          	lui	a5,0x8001f
800031e0:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
800031e4:	01c7a783          	lw	a5,28(a5)
800031e8:	00078593          	mv	a1,a5
800031ec:	00070513          	mv	a0,a4
800031f0:	734000ef          	jal	ra,80003924 <API_AckTaskAllocation>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:193
            break;
800031f4:	24c0006f          	j	80003440 <External_2_IRQHandler+0x3cc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:197

        case TASK_ALLOCATION_SUCCESS:
            //prints("TASK_ALLOCATION_SUCCESS\n");
            API_TaskAllocated(incommingPacket.task_id, incommingPacket.task_app_id);
800031f8:	8001f7b7          	lui	a5,0x8001f
800031fc:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
80003200:	00c7a703          	lw	a4,12(a5)
80003204:	8001f7b7          	lui	a5,0x8001f
80003208:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
8000320c:	01c7a783          	lw	a5,28(a5)
80003210:	00078593          	mv	a1,a5
80003214:	00070513          	mv	a0,a4
80003218:	4a1010ef          	jal	ra,80004eb8 <API_TaskAllocated>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:198
            break;
8000321c:	2240006f          	j	80003440 <External_2_IRQHandler+0x3cc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:202

        case TASK_START:
            //prints("Chegou um TASK_START!\n");
            aux = API_GetTaskSlot(incommingPacket.task_id, incommingPacket.task_app_id);
80003220:	8001f7b7          	lui	a5,0x8001f
80003224:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
80003228:	00c7a703          	lw	a4,12(a5)
8000322c:	8001f7b7          	lui	a5,0x8001f
80003230:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
80003234:	01c7a783          	lw	a5,28(a5)
80003238:	00078593          	mv	a1,a5
8000323c:	00070513          	mv	a0,a4
80003240:	3e4020ef          	jal	ra,80005624 <API_GetTaskSlot>
80003244:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:204
            // Informs the NI were to write the application
            HW_set_32bit_reg(NI_ADDR, (unsigned int)&TaskList[aux].appNumTasks);
80003248:	fec42703          	lw	a4,-20(s0)
8000324c:	00070793          	mv	a5,a4
80003250:	00479793          	slli	a5,a5,0x4
80003254:	40e787b3          	sub	a5,a5,a4
80003258:	00379793          	slli	a5,a5,0x3
8000325c:	04078713          	addi	a4,a5,64
80003260:	800217b7          	lui	a5,0x80021
80003264:	8b878793          	addi	a5,a5,-1864 # 800208b8 <__stack_top+0xfffdfe68>
80003268:	00f707b3          	add	a5,a4,a5
8000326c:	00c78793          	addi	a5,a5,12
80003270:	00078593          	mv	a1,a5
80003274:	500007b7          	lui	a5,0x50000
80003278:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
8000327c:	c85fd0ef          	jal	ra,80000f00 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:205
            incommingPacket.service = TASK_RUN;
80003280:	8001f7b7          	lui	a5,0x8001f
80003284:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
80003288:	40100713          	li	a4,1025
8000328c:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:206
            break;
80003290:	1b00006f          	j	80003440 <External_2_IRQHandler+0x3cc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:210
        
        case TASK_RUN:
            //prints("Chegou um TASK_RUN!\n");
            aux = API_GetTaskSlot(incommingPacket.task_id, incommingPacket.task_app_id);
80003294:	8001f7b7          	lui	a5,0x8001f
80003298:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
8000329c:	00c7a703          	lw	a4,12(a5)
800032a0:	8001f7b7          	lui	a5,0x8001f
800032a4:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
800032a8:	01c7a783          	lw	a5,28(a5)
800032ac:	00078593          	mv	a1,a5
800032b0:	00070513          	mv	a0,a4
800032b4:	370020ef          	jal	ra,80005624 <API_GetTaskSlot>
800032b8:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:211
            printsv("Starting Task: ", incommingPacket.task_id);
800032bc:	8001f7b7          	lui	a5,0x8001f
800032c0:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
800032c4:	00c7a783          	lw	a5,12(a5)
800032c8:	00078593          	mv	a1,a5
800032cc:	800067b7          	lui	a5,0x80006
800032d0:	1e078513          	addi	a0,a5,480 # 800061e0 <__stack_top+0xfffc5790>
800032d4:	b75ff0ef          	jal	ra,80002e48 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:212
            API_TaskStart(aux);
800032d8:	fec42503          	lw	a0,-20(s0)
800032dc:	418020ef          	jal	ra,800056f4 <API_TaskStart>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:213
            break;
800032e0:	1600006f          	j	80003440 <External_2_IRQHandler+0x3cc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:218

        case MESSAGE_REQUEST:
            // check the pipe
            //prints("Chegou um message request! \n");
            aux = API_CheckMessagePipe(incommingPacket.task_id, incommingPacket.task_app_id);
800032e4:	8001f7b7          	lui	a5,0x8001f
800032e8:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
800032ec:	00c7a703          	lw	a4,12(a5)
800032f0:	8001f7b7          	lui	a5,0x8001f
800032f4:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
800032f8:	01c7a783          	lw	a5,28(a5)
800032fc:	00078593          	mv	a1,a5
80003300:	00070513          	mv	a0,a4
80003304:	501000ef          	jal	ra,80004004 <API_CheckMessagePipe>
80003308:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:219
            if (aux == ERRO){
8000330c:	fec42703          	lw	a4,-20(s0)
80003310:	fff00793          	li	a5,-1
80003314:	02f71e63          	bne	a4,a5,80003350 <External_2_IRQHandler+0x2dc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:222
                // register an messagerequest
                //prints("Mensagem não encontrada, adicionando ao PendingReq!\n");
                API_AddPendingReq(incommingPacket.task_id, incommingPacket.task_app_id, incommingPacket.producer_task_id);
80003318:	8001f7b7          	lui	a5,0x8001f
8000331c:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
80003320:	00c7a703          	lw	a4,12(a5)
80003324:	8001f7b7          	lui	a5,0x8001f
80003328:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
8000332c:	01c7a683          	lw	a3,28(a5)
80003330:	8001f7b7          	lui	a5,0x8001f
80003334:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
80003338:	0147a783          	lw	a5,20(a5)
8000333c:	00078613          	mv	a2,a5
80003340:	00068593          	mv	a1,a3
80003344:	00070513          	mv	a0,a4
80003348:	58d000ef          	jal	ra,800040d4 <API_AddPendingReq>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:227
            } else {
                //prints("Mensagem encontrada!\n");
                API_PushSendQueue(MESSAGE, aux);
            }
            break;
8000334c:	0f40006f          	j	80003440 <External_2_IRQHandler+0x3cc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:225
                API_PushSendQueue(MESSAGE, aux);
80003350:	fec42583          	lw	a1,-20(s0)
80003354:	20200537          	lui	a0,0x20200
80003358:	3c0000ef          	jal	ra,80003718 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:227
            break;
8000335c:	0e40006f          	j	80003440 <External_2_IRQHandler+0x3cc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:231
        
        case MESSAGE_DELIVERY:
            //prints("Tem uma mensagem chegando...\n");
            aux = API_GetTaskSlot(incommingPacket.destination_task, incommingPacket.application_id);
80003360:	8001f7b7          	lui	a5,0x8001f
80003364:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
80003368:	0147a703          	lw	a4,20(a5)
8000336c:	8001f7b7          	lui	a5,0x8001f
80003370:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
80003374:	00c7a783          	lw	a5,12(a5)
80003378:	00078593          	mv	a1,a5
8000337c:	00070513          	mv	a0,a4
80003380:	2a4020ef          	jal	ra,80005624 <API_GetTaskSlot>
80003384:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:232
            incommingPacket.service = MESSAGE_DELIVERY_FINISH;
80003388:	8001f7b7          	lui	a5,0x8001f
8000338c:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
80003390:	02100713          	li	a4,33
80003394:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:234
            //printsv("MESSAGE_DELIVERY addr: ", TaskList[aux].MsgToReceive);
            HW_set_32bit_reg(NI_ADDR, TaskList[aux].MsgToReceive);
80003398:	800217b7          	lui	a5,0x80021
8000339c:	fec42703          	lw	a4,-20(s0)
800033a0:	8b878693          	addi	a3,a5,-1864 # 800208b8 <__stack_top+0xfffdfe68>
800033a4:	00070793          	mv	a5,a4
800033a8:	00479793          	slli	a5,a5,0x4
800033ac:	40e787b3          	sub	a5,a5,a4
800033b0:	00379793          	slli	a5,a5,0x3
800033b4:	00f687b3          	add	a5,a3,a5
800033b8:	0147a783          	lw	a5,20(a5)
800033bc:	00078593          	mv	a1,a5
800033c0:	500007b7          	lui	a5,0x50000
800033c4:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
800033c8:	b39fd0ef          	jal	ra,80000f00 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:235
            break;
800033cc:	0740006f          	j	80003440 <External_2_IRQHandler+0x3cc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:239
        
        case MESSAGE_DELIVERY_FINISH:
            //prints("Terminou de entregar a mensagem!!\n");
            aux = API_GetTaskSlot(incommingPacket.destination_task, incommingPacket.application_id);
800033d0:	8001f7b7          	lui	a5,0x8001f
800033d4:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
800033d8:	0147a703          	lw	a4,20(a5)
800033dc:	8001f7b7          	lui	a5,0x8001f
800033e0:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
800033e4:	00c7a783          	lw	a5,12(a5)
800033e8:	00078593          	mv	a1,a5
800033ec:	00070513          	mv	a0,a4
800033f0:	234020ef          	jal	ra,80005624 <API_GetTaskSlot>
800033f4:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:240
            TaskList[aux].waitingMsg = FALSE;
800033f8:	800216b7          	lui	a3,0x80021
800033fc:	fec42703          	lw	a4,-20(s0)
80003400:	00070793          	mv	a5,a4
80003404:	00479793          	slli	a5,a5,0x4
80003408:	40e787b3          	sub	a5,a5,a4
8000340c:	00379793          	slli	a5,a5,0x3
80003410:	8b868713          	addi	a4,a3,-1864 # 800208b8 <__stack_top+0xfffdfe68>
80003414:	00e787b3          	add	a5,a5,a4
80003418:	0007a823          	sw	zero,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:241
            break;
8000341c:	0240006f          	j	80003440 <External_2_IRQHandler+0x3cc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:245
            

        default:
            printsv("ERROR External_2_IRQHandler Unknown-Service", incommingPacket.service);
80003420:	8001f7b7          	lui	a5,0x8001f
80003424:	79078793          	addi	a5,a5,1936 # 8001f790 <__stack_top+0xfffded40>
80003428:	0087a783          	lw	a5,8(a5)
8000342c:	00078593          	mv	a1,a5
80003430:	800067b7          	lui	a5,0x80006
80003434:	1f078513          	addi	a0,a5,496 # 800061f0 <__stack_top+0xfffc57a0>
80003438:	a11ff0ef          	jal	ra,80002e48 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:246
            break;
8000343c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:249
    }
    // prints("==========================\n");
    HW_set_32bit_reg(NI_RX, DONE);
80003440:	000057b7          	lui	a5,0x5
80003444:	55578593          	addi	a1,a5,1365 # 5555 <HEAP_SIZE-0xaaab>
80003448:	500007b7          	lui	a5,0x50000
8000344c:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80003450:	ab1fd0ef          	jal	ra,80000f00 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:250
    return 0;
80003454:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:251
}
80003458:	00078513          	mv	a0,a5
8000345c:	01c12083          	lw	ra,28(sp)
80003460:	01812403          	lw	s0,24(sp)
80003464:	02010113          	addi	sp,sp,32
80003468:	00008067          	ret

8000346c <mySwap>:
mySwap():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:256

////////////////////////////////////////////////////////////
// https://www.techiedelight.com/implement-itoa-function-in-c/
// Function to swap two numbers
void mySwap(char *x, char *y) {
8000346c:	fd010113          	addi	sp,sp,-48
80003470:	02812623          	sw	s0,44(sp)
80003474:	03010413          	addi	s0,sp,48
80003478:	fca42e23          	sw	a0,-36(s0)
8000347c:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:257
    char t = *x; *x = *y; *y = t;
80003480:	fdc42783          	lw	a5,-36(s0)
80003484:	0007c783          	lbu	a5,0(a5)
80003488:	fef407a3          	sb	a5,-17(s0)
8000348c:	fd842783          	lw	a5,-40(s0)
80003490:	00078703          	lb	a4,0(a5)
80003494:	fdc42783          	lw	a5,-36(s0)
80003498:	00e78023          	sb	a4,0(a5)
8000349c:	fd842783          	lw	a5,-40(s0)
800034a0:	fef44703          	lbu	a4,-17(s0)
800034a4:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:258
}
800034a8:	00000013          	nop
800034ac:	02c12403          	lw	s0,44(sp)
800034b0:	03010113          	addi	sp,sp,48
800034b4:	00008067          	ret

800034b8 <reverse>:
reverse():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:260
// Function to reverse `buffer[i…j]`
char* reverse(char *buffer, int i, int j){
800034b8:	fe010113          	addi	sp,sp,-32
800034bc:	00112e23          	sw	ra,28(sp)
800034c0:	00812c23          	sw	s0,24(sp)
800034c4:	02010413          	addi	s0,sp,32
800034c8:	fea42623          	sw	a0,-20(s0)
800034cc:	feb42423          	sw	a1,-24(s0)
800034d0:	fec42223          	sw	a2,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:261
    while (i < j) {
800034d4:	0400006f          	j	80003514 <reverse+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:262
        mySwap(&buffer[i++], &buffer[j--]);
800034d8:	fe842783          	lw	a5,-24(s0)
800034dc:	00178713          	addi	a4,a5,1
800034e0:	fee42423          	sw	a4,-24(s0)
800034e4:	00078713          	mv	a4,a5
800034e8:	fec42783          	lw	a5,-20(s0)
800034ec:	00e786b3          	add	a3,a5,a4
800034f0:	fe442783          	lw	a5,-28(s0)
800034f4:	fff78713          	addi	a4,a5,-1
800034f8:	fee42223          	sw	a4,-28(s0)
800034fc:	00078713          	mv	a4,a5
80003500:	fec42783          	lw	a5,-20(s0)
80003504:	00e787b3          	add	a5,a5,a4
80003508:	00078593          	mv	a1,a5
8000350c:	00068513          	mv	a0,a3
80003510:	f5dff0ef          	jal	ra,8000346c <mySwap>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:261
    while (i < j) {
80003514:	fe842703          	lw	a4,-24(s0)
80003518:	fe442783          	lw	a5,-28(s0)
8000351c:	faf74ee3          	blt	a4,a5,800034d8 <reverse+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:265
    }
 
    return buffer;
80003520:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:266
}
80003524:	00078513          	mv	a0,a5
80003528:	01c12083          	lw	ra,28(sp)
8000352c:	01812403          	lw	s0,24(sp)
80003530:	02010113          	addi	sp,sp,32
80003534:	00008067          	ret

80003538 <myItoa>:
myItoa():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:268
// Iterative function to implement `itoa()` function in C
char* myItoa(int value, char* buffer, int base){
80003538:	fd010113          	addi	sp,sp,-48
8000353c:	02112623          	sw	ra,44(sp)
80003540:	02812423          	sw	s0,40(sp)
80003544:	03010413          	addi	s0,sp,48
80003548:	fca42e23          	sw	a0,-36(s0)
8000354c:	fcb42c23          	sw	a1,-40(s0)
80003550:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:270
    // invalid input
    if (base < 2 || base > 32) {
80003554:	fd442703          	lw	a4,-44(s0)
80003558:	00100793          	li	a5,1
8000355c:	00e7d863          	ble	a4,a5,8000356c <myItoa+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:270 (discriminator 1)
80003560:	fd442703          	lw	a4,-44(s0)
80003564:	02000793          	li	a5,32
80003568:	00e7d663          	ble	a4,a5,80003574 <myItoa+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:271
        return buffer;
8000356c:	fd842783          	lw	a5,-40(s0)
80003570:	1540006f          	j	800036c4 <myItoa+0x18c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:275
    }
    // consider the absolute value of the number
    int n;
    if (value < 0)
80003574:	fdc42783          	lw	a5,-36(s0)
80003578:	0007da63          	bgez	a5,8000358c <myItoa+0x54>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:276
        n = value * -1;
8000357c:	fdc42783          	lw	a5,-36(s0)
80003580:	40f007b3          	neg	a5,a5
80003584:	fef42623          	sw	a5,-20(s0)
80003588:	00c0006f          	j	80003594 <myItoa+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:278
    else 
        n = value;
8000358c:	fdc42783          	lw	a5,-36(s0)
80003590:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:280

    int i = 0;
80003594:	fe042423          	sw	zero,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:281
    while (n){
80003598:	09c0006f          	j	80003634 <myItoa+0xfc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:282
        int r = n % base;
8000359c:	fec42703          	lw	a4,-20(s0)
800035a0:	fd442783          	lw	a5,-44(s0)
800035a4:	02f767b3          	rem	a5,a4,a5
800035a8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:284
 
        if (r >= 10) {
800035ac:	fe442703          	lw	a4,-28(s0)
800035b0:	00900793          	li	a5,9
800035b4:	02e7de63          	ble	a4,a5,800035f0 <myItoa+0xb8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:285
            buffer[i++] = 65 + (r - 10);
800035b8:	fe442783          	lw	a5,-28(s0)
800035bc:	0ff7f793          	andi	a5,a5,255
800035c0:	03778793          	addi	a5,a5,55
800035c4:	0ff7f693          	andi	a3,a5,255
800035c8:	fe842783          	lw	a5,-24(s0)
800035cc:	00178713          	addi	a4,a5,1
800035d0:	fee42423          	sw	a4,-24(s0)
800035d4:	00078713          	mv	a4,a5
800035d8:	fd842783          	lw	a5,-40(s0)
800035dc:	00e787b3          	add	a5,a5,a4
800035e0:	01869713          	slli	a4,a3,0x18
800035e4:	41875713          	srai	a4,a4,0x18
800035e8:	00e78023          	sb	a4,0(a5)
800035ec:	0380006f          	j	80003624 <myItoa+0xec>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:288
        }
        else {
            buffer[i++] = 48 + r;
800035f0:	fe442783          	lw	a5,-28(s0)
800035f4:	0ff7f793          	andi	a5,a5,255
800035f8:	03078793          	addi	a5,a5,48
800035fc:	0ff7f693          	andi	a3,a5,255
80003600:	fe842783          	lw	a5,-24(s0)
80003604:	00178713          	addi	a4,a5,1
80003608:	fee42423          	sw	a4,-24(s0)
8000360c:	00078713          	mv	a4,a5
80003610:	fd842783          	lw	a5,-40(s0)
80003614:	00e787b3          	add	a5,a5,a4
80003618:	01869713          	slli	a4,a3,0x18
8000361c:	41875713          	srai	a4,a4,0x18
80003620:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:291
        }
 
        n = n / base;
80003624:	fec42703          	lw	a4,-20(s0)
80003628:	fd442783          	lw	a5,-44(s0)
8000362c:	02f747b3          	div	a5,a4,a5
80003630:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:281
    while (n){
80003634:	fec42783          	lw	a5,-20(s0)
80003638:	f60792e3          	bnez	a5,8000359c <myItoa+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:294
    }
    // if the number is 0
    if (i == 0) {
8000363c:	fe842783          	lw	a5,-24(s0)
80003640:	02079263          	bnez	a5,80003664 <myItoa+0x12c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:295
        buffer[i++] = '0';
80003644:	fe842783          	lw	a5,-24(s0)
80003648:	00178713          	addi	a4,a5,1
8000364c:	fee42423          	sw	a4,-24(s0)
80003650:	00078713          	mv	a4,a5
80003654:	fd842783          	lw	a5,-40(s0)
80003658:	00e787b3          	add	a5,a5,a4
8000365c:	03000713          	li	a4,48
80003660:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:300
    }
    // If the base is 10 and the value is negative, the resulting string
    // is preceded with a minus sign (-)
    // With any other base, value is always considered unsigned
    if (value < 0 && base == 10) {
80003664:	fdc42783          	lw	a5,-36(s0)
80003668:	0207d863          	bgez	a5,80003698 <myItoa+0x160>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:300 (discriminator 1)
8000366c:	fd442703          	lw	a4,-44(s0)
80003670:	00a00793          	li	a5,10
80003674:	02f71263          	bne	a4,a5,80003698 <myItoa+0x160>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:301
        buffer[i++] = '-';
80003678:	fe842783          	lw	a5,-24(s0)
8000367c:	00178713          	addi	a4,a5,1
80003680:	fee42423          	sw	a4,-24(s0)
80003684:	00078713          	mv	a4,a5
80003688:	fd842783          	lw	a5,-40(s0)
8000368c:	00e787b3          	add	a5,a5,a4
80003690:	02d00713          	li	a4,45
80003694:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:303
    }
    buffer[i] = '\0'; // null terminate string
80003698:	fe842783          	lw	a5,-24(s0)
8000369c:	fd842703          	lw	a4,-40(s0)
800036a0:	00f707b3          	add	a5,a4,a5
800036a4:	00078023          	sb	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:305
    // reverse the string and return it
    return reverse(buffer, 0, i - 1);
800036a8:	fe842783          	lw	a5,-24(s0)
800036ac:	fff78793          	addi	a5,a5,-1
800036b0:	00078613          	mv	a2,a5
800036b4:	00000593          	li	a1,0
800036b8:	fd842503          	lw	a0,-40(s0)
800036bc:	dfdff0ef          	jal	ra,800034b8 <reverse>
800036c0:	00050793          	mv	a5,a0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:306
}
800036c4:	00078513          	mv	a0,a5
800036c8:	02c12083          	lw	ra,44(sp)
800036cc:	02812403          	lw	s0,40(sp)
800036d0:	03010113          	addi	sp,sp,48
800036d4:	00008067          	ret

800036d8 <makeAddress>:
makeAddress():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:320
    return;
}

////////////////////////////////////////////////////////////
// Returns the PE address for a giver pair of coords
unsigned int makeAddress(unsigned int x, unsigned int y) {
800036d8:	fd010113          	addi	sp,sp,-48
800036dc:	02812623          	sw	s0,44(sp)
800036e0:	03010413          	addi	s0,sp,48
800036e4:	fca42e23          	sw	a0,-36(s0)
800036e8:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:321
    unsigned int address = 0x00000000;
800036ec:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:322
    return (address | (x << 8) | y);
800036f0:	fdc42783          	lw	a5,-36(s0)
800036f4:	00879713          	slli	a4,a5,0x8
800036f8:	fec42783          	lw	a5,-20(s0)
800036fc:	00f76733          	or	a4,a4,a5
80003700:	fd842783          	lw	a5,-40(s0)
80003704:	00f767b3          	or	a5,a4,a5
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:323
}
80003708:	00078513          	mv	a0,a5
8000370c:	02c12403          	lw	s0,44(sp)
80003710:	03010113          	addi	sp,sp,48
80003714:	00008067          	ret

80003718 <API_PushSendQueue>:
API_PushSendQueue():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:327

////////////////////////////////////////////////////////////
// Pushes one slot to the sending queue
void API_PushSendQueue(unsigned int type, unsigned int slot){
80003718:	fe010113          	addi	sp,sp,-32
8000371c:	00112e23          	sw	ra,28(sp)
80003720:	00812c23          	sw	s0,24(sp)
80003724:	02010413          	addi	s0,sp,32
80003728:	fea42623          	sw	a0,-20(s0)
8000372c:	feb42423          	sw	a1,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:328
    SendingQueue[SendingQueue_front] = type | slot;
80003730:	8001f7b7          	lui	a5,0x8001f
80003734:	7fc7a683          	lw	a3,2044(a5) # 8001f7fc <__stack_top+0xfffdedac>
80003738:	fec42703          	lw	a4,-20(s0)
8000373c:	fe842783          	lw	a5,-24(s0)
80003740:	00f76733          	or	a4,a4,a5
80003744:	8001f7b7          	lui	a5,0x8001f
80003748:	00269693          	slli	a3,a3,0x2
8000374c:	7c478793          	addi	a5,a5,1988 # 8001f7c4 <__stack_top+0xfffded74>
80003750:	00f687b3          	add	a5,a3,a5
80003754:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:329
    if(SendingQueue_front == (PIPE_SIZE*2)-1){
80003758:	8001f7b7          	lui	a5,0x8001f
8000375c:	7fc7a703          	lw	a4,2044(a5) # 8001f7fc <__stack_top+0xfffdedac>
80003760:	00700793          	li	a5,7
80003764:	00f71863          	bne	a4,a5,80003774 <API_PushSendQueue+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:330
        SendingQueue_front = 0;
80003768:	8001f7b7          	lui	a5,0x8001f
8000376c:	7e07ae23          	sw	zero,2044(a5) # 8001f7fc <__stack_top+0xfffdedac>
80003770:	0180006f          	j	80003788 <API_PushSendQueue+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:332
    } else {
        SendingQueue_front++;
80003774:	8001f7b7          	lui	a5,0x8001f
80003778:	7fc7a783          	lw	a5,2044(a5) # 8001f7fc <__stack_top+0xfffdedac>
8000377c:	00178713          	addi	a4,a5,1
80003780:	8001f7b7          	lui	a5,0x8001f
80003784:	7ee7ae23          	sw	a4,2044(a5) # 8001f7fc <__stack_top+0xfffdedac>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:334
    }
    API_Try2Send();
80003788:	0a4000ef          	jal	ra,8000382c <API_Try2Send>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:335
    return;
8000378c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:336
}
80003790:	01c12083          	lw	ra,28(sp)
80003794:	01812403          	lw	s0,24(sp)
80003798:	02010113          	addi	sp,sp,32
8000379c:	00008067          	ret

800037a0 <API_PopSendQueue>:
API_PopSendQueue():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:340

////////////////////////////////////////////////////////////
// Pushes one slot to the sending queue
unsigned int API_PopSendQueue(){
800037a0:	fe010113          	addi	sp,sp,-32
800037a4:	00812e23          	sw	s0,28(sp)
800037a8:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:342
    unsigned int element;
    if (SendingQueue_front == SendingQueue_tail){
800037ac:	8001f7b7          	lui	a5,0x8001f
800037b0:	7fc7a703          	lw	a4,2044(a5) # 8001f7fc <__stack_top+0xfffdedac>
800037b4:	8001f7b7          	lui	a5,0x8001f
800037b8:	7e47a783          	lw	a5,2020(a5) # 8001f7e4 <__stack_top+0xfffded94>
800037bc:	00f71663          	bne	a4,a5,800037c8 <API_PopSendQueue+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:343
        return EMPTY;
800037c0:	303007b7          	lui	a5,0x30300
800037c4:	0580006f          	j	8000381c <API_PopSendQueue+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:345
    } else {
        element = SendingQueue[SendingQueue_tail];
800037c8:	8001f7b7          	lui	a5,0x8001f
800037cc:	7e47a703          	lw	a4,2020(a5) # 8001f7e4 <__stack_top+0xfffded94>
800037d0:	8001f7b7          	lui	a5,0x8001f
800037d4:	00271713          	slli	a4,a4,0x2
800037d8:	7c478793          	addi	a5,a5,1988 # 8001f7c4 <__stack_top+0xfffded74>
800037dc:	00f707b3          	add	a5,a4,a5
800037e0:	0007a783          	lw	a5,0(a5)
800037e4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:346
        if (SendingQueue_tail == (PIPE_SIZE*2)-1){
800037e8:	8001f7b7          	lui	a5,0x8001f
800037ec:	7e47a703          	lw	a4,2020(a5) # 8001f7e4 <__stack_top+0xfffded94>
800037f0:	00700793          	li	a5,7
800037f4:	00f71863          	bne	a4,a5,80003804 <API_PopSendQueue+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:347
            SendingQueue_tail = 0;
800037f8:	8001f7b7          	lui	a5,0x8001f
800037fc:	7e07a223          	sw	zero,2020(a5) # 8001f7e4 <__stack_top+0xfffded94>
80003800:	0180006f          	j	80003818 <API_PopSendQueue+0x78>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:349
        } else {
            SendingQueue_tail++;
80003804:	8001f7b7          	lui	a5,0x8001f
80003808:	7e47a783          	lw	a5,2020(a5) # 8001f7e4 <__stack_top+0xfffded94>
8000380c:	00178713          	addi	a4,a5,1
80003810:	8001f7b7          	lui	a5,0x8001f
80003814:	7ee7a223          	sw	a4,2020(a5) # 8001f7e4 <__stack_top+0xfffded94>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:351
        }
        return element;
80003818:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:353
    }
}
8000381c:	00078513          	mv	a0,a5
80003820:	01c12403          	lw	s0,28(sp)
80003824:	02010113          	addi	sp,sp,32
80003828:	00008067          	ret

8000382c <API_Try2Send>:
API_Try2Send():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:357

////////////////////////////////////////////////////////////
// Try to send some packet! 
void API_Try2Send(){
8000382c:	fe010113          	addi	sp,sp,-32
80003830:	00112e23          	sw	ra,28(sp)
80003834:	00812c23          	sw	s0,24(sp)
80003838:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:361
    unsigned int toSend;
    //prints("API_Try2Send\n");
    // Try to send the packet to NI if it's available
    vPortEnterCritical();
8000383c:	d81fd0ef          	jal	ra,800015bc <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:363
        // Checks if the NI is available to transmitt something
        if (HW_get_32bit_reg(NI_TX) == NI_STATUS_OFF){
80003840:	500007b7          	lui	a5,0x50000
80003844:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80003848:	ec0fd0ef          	jal	ra,80000f08 <HW_get_32bit_reg>
8000384c:	00050713          	mv	a4,a0
80003850:	0ff00793          	li	a5,255
80003854:	0af71c63          	bne	a4,a5,8000390c <API_Try2Send+0xe0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:365
            //prints("NI_TX free\n");
            toSend = API_PopSendQueue();
80003858:	f49ff0ef          	jal	ra,800037a0 <API_PopSendQueue>
8000385c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:367
            //printsv("toSend ", toSend);
            if (toSend != EMPTY){
80003860:	fec42703          	lw	a4,-20(s0)
80003864:	303007b7          	lui	a5,0x30300
80003868:	0af70263          	beq	a4,a5,8000390c <API_Try2Send+0xe0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:368
                SendingSlot = toSend;
8000386c:	8001f7b7          	lui	a5,0x8001f
80003870:	fec42703          	lw	a4,-20(s0)
80003874:	68e7ac23          	sw	a4,1688(a5) # 8001f698 <__stack_top+0xfffdec48>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:369
                if((toSend & 0xFFFF0000) ==  SERVICE){
80003878:	fec42703          	lw	a4,-20(s0)
8000387c:	ffff07b7          	lui	a5,0xffff0
80003880:	00f77733          	and	a4,a4,a5
80003884:	101007b7          	lui	a5,0x10100
80003888:	04f71063          	bne	a4,a5,800038c8 <API_Try2Send+0x9c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:370
                    SendRaw((unsigned int)&ServicePipe[toSend & 0x0000FFFF].header);
8000388c:	fec42703          	lw	a4,-20(s0)
80003890:	000107b7          	lui	a5,0x10
80003894:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80003898:	00f77733          	and	a4,a4,a5
8000389c:	00070793          	mv	a5,a4
800038a0:	00479793          	slli	a5,a5,0x4
800038a4:	40e787b3          	sub	a5,a5,a4
800038a8:	00279793          	slli	a5,a5,0x2
800038ac:	8001f737          	lui	a4,0x8001f
800038b0:	69c70713          	addi	a4,a4,1692 # 8001f69c <__stack_top+0xfffdec4c>
800038b4:	00e787b3          	add	a5,a5,a4
800038b8:	00878793          	addi	a5,a5,8
800038bc:	00078513          	mv	a0,a5
800038c0:	e84ff0ef          	jal	ra,80002f44 <SendRaw>
800038c4:	0480006f          	j	8000390c <API_Try2Send+0xe0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:372
                }
                else if((toSend & 0xFFFF0000) ==  MESSAGE){
800038c8:	fec42703          	lw	a4,-20(s0)
800038cc:	ffff07b7          	lui	a5,0xffff0
800038d0:	00f77733          	and	a4,a4,a5
800038d4:	202007b7          	lui	a5,0x20200
800038d8:	02f71a63          	bne	a4,a5,8000390c <API_Try2Send+0xe0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:373
                    SendRaw((unsigned int)&MessagePipe[toSend & 0x0000FFFF].header);
800038dc:	fec42703          	lw	a4,-20(s0)
800038e0:	000107b7          	lui	a5,0x10
800038e4:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
800038e8:	00f77733          	and	a4,a4,a5
800038ec:	24400793          	li	a5,580
800038f0:	02f70733          	mul	a4,a4,a5
800038f4:	800207b7          	lui	a5,0x80020
800038f8:	80078793          	addi	a5,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
800038fc:	00f707b3          	add	a5,a4,a5
80003900:	00c78793          	addi	a5,a5,12
80003904:	00078513          	mv	a0,a5
80003908:	e3cff0ef          	jal	ra,80002f44 <SendRaw>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:379
                }
            }
        } else {
            //prints("NI_TX occupied\n");
        }
    vPortExitCritical();
8000390c:	ce5fd0ef          	jal	ra,800015f0 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:380
    return;
80003910:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:381
}
80003914:	01c12083          	lw	ra,28(sp)
80003918:	01812403          	lw	s0,24(sp)
8000391c:	02010113          	addi	sp,sp,32
80003920:	00008067          	ret

80003924 <API_AckTaskAllocation>:
API_AckTaskAllocation():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:383

void API_AckTaskAllocation(unsigned int task_id, unsigned int app_id){
80003924:	fd010113          	addi	sp,sp,-48
80003928:	02112623          	sw	ra,44(sp)
8000392c:	02812423          	sw	s0,40(sp)
80003930:	03010413          	addi	s0,sp,48
80003934:	fca42e23          	sw	a0,-36(s0)
80003938:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:386
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
8000393c:	130020ef          	jal	ra,80005a6c <API_GetServiceSlot>
80003940:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:387
        if(mySlot == PIPE_FULL) vTaskDelay(1);
80003944:	fec42703          	lw	a4,-20(s0)
80003948:	fdfe07b7          	lui	a5,0xfdfe0
8000394c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f3ad>
80003950:	00f71663          	bne	a4,a5,8000395c <API_AckTaskAllocation+0x38>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:387 (discriminator 1)
80003954:	00100513          	li	a0,1
80003958:	ff4fe0ef          	jal	ra,8000214c <vTaskDelay>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:388
    }while(mySlot == PIPE_FULL);
8000395c:	fec42703          	lw	a4,-20(s0)
80003960:	fdfe07b7          	lui	a5,0xfdfe0
80003964:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f3ad>
80003968:	fcf70ae3          	beq	a4,a5,8000393c <API_AckTaskAllocation+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:391
    //printsv("I got a free service slot!! -> ", mySlot);

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
8000396c:	8001f7b7          	lui	a5,0x8001f
80003970:	fec42703          	lw	a4,-20(s0)
80003974:	69c78693          	addi	a3,a5,1692 # 8001f69c <__stack_top+0xfffdec4c>
80003978:	00070793          	mv	a5,a4
8000397c:	00479793          	slli	a5,a5,0x4
80003980:	40e787b3          	sub	a5,a5,a4
80003984:	00279793          	slli	a5,a5,0x2
80003988:	00f687b3          	add	a5,a3,a5
8000398c:	feff0737          	lui	a4,0xfeff0
80003990:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efaf4ae>
80003994:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:393

    ServicePipe[mySlot].header.header           = makeAddress(0, 0);
80003998:	00000593          	li	a1,0
8000399c:	00000513          	li	a0,0
800039a0:	d39ff0ef          	jal	ra,800036d8 <makeAddress>
800039a4:	00050613          	mv	a2,a0
800039a8:	8001f7b7          	lui	a5,0x8001f
800039ac:	fec42703          	lw	a4,-20(s0)
800039b0:	69c78693          	addi	a3,a5,1692 # 8001f69c <__stack_top+0xfffdec4c>
800039b4:	00070793          	mv	a5,a4
800039b8:	00479793          	slli	a5,a5,0x4
800039bc:	40e787b3          	sub	a5,a5,a4
800039c0:	00279793          	slli	a5,a5,0x2
800039c4:	00f687b3          	add	a5,a3,a5
800039c8:	00c7a423          	sw	a2,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:394
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
800039cc:	8001f7b7          	lui	a5,0x8001f
800039d0:	fec42703          	lw	a4,-20(s0)
800039d4:	69c78693          	addi	a3,a5,1692 # 8001f69c <__stack_top+0xfffdec4c>
800039d8:	00070793          	mv	a5,a4
800039dc:	00479793          	slli	a5,a5,0x4
800039e0:	40e787b3          	sub	a5,a5,a4
800039e4:	00279793          	slli	a5,a5,0x2
800039e8:	00f687b3          	add	a5,a3,a5
800039ec:	00b00713          	li	a4,11
800039f0:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:395
    ServicePipe[mySlot].header.service          = TASK_ALLOCATION_SUCCESS;
800039f4:	8001f7b7          	lui	a5,0x8001f
800039f8:	fec42703          	lw	a4,-20(s0)
800039fc:	69c78693          	addi	a3,a5,1692 # 8001f69c <__stack_top+0xfffdec4c>
80003a00:	00070793          	mv	a5,a4
80003a04:	00479793          	slli	a5,a5,0x4
80003a08:	40e787b3          	sub	a5,a5,a4
80003a0c:	00279793          	slli	a5,a5,0x2
80003a10:	00f687b3          	add	a5,a3,a5
80003a14:	03500713          	li	a4,53
80003a18:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:396
    ServicePipe[mySlot].header.task_id          = task_id;
80003a1c:	8001f7b7          	lui	a5,0x8001f
80003a20:	fec42703          	lw	a4,-20(s0)
80003a24:	69c78693          	addi	a3,a5,1692 # 8001f69c <__stack_top+0xfffdec4c>
80003a28:	00070793          	mv	a5,a4
80003a2c:	00479793          	slli	a5,a5,0x4
80003a30:	40e787b3          	sub	a5,a5,a4
80003a34:	00279793          	slli	a5,a5,0x2
80003a38:	00f687b3          	add	a5,a3,a5
80003a3c:	fdc42703          	lw	a4,-36(s0)
80003a40:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:397
    ServicePipe[mySlot].header.task_app_id      = app_id;
80003a44:	8001f7b7          	lui	a5,0x8001f
80003a48:	fec42703          	lw	a4,-20(s0)
80003a4c:	69c78693          	addi	a3,a5,1692 # 8001f69c <__stack_top+0xfffdec4c>
80003a50:	00070793          	mv	a5,a4
80003a54:	00479793          	slli	a5,a5,0x4
80003a58:	40e787b3          	sub	a5,a5,a4
80003a5c:	00279793          	slli	a5,a5,0x2
80003a60:	00f687b3          	add	a5,a3,a5
80003a64:	fd842703          	lw	a4,-40(s0)
80003a68:	02e7a223          	sw	a4,36(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:399

    API_PushSendQueue(SERVICE, mySlot);
80003a6c:	fec42583          	lw	a1,-20(s0)
80003a70:	10100537          	lui	a0,0x10100
80003a74:	ca5ff0ef          	jal	ra,80003718 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:400
    return;    
80003a78:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:401
}
80003a7c:	02c12083          	lw	ra,44(sp)
80003a80:	02812403          	lw	s0,40(sp)
80003a84:	03010113          	addi	sp,sp,48
80003a88:	00008067          	ret

80003a8c <API_SendMessage>:
API_SendMessage():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:403

void API_SendMessage(unsigned int addr, unsigned int taskID){
80003a8c:	fd010113          	addi	sp,sp,-48
80003a90:	02112623          	sw	ra,44(sp)
80003a94:	02812423          	sw	s0,40(sp)
80003a98:	03010413          	addi	s0,sp,48
80003a9c:	fca42e23          	sw	a0,-36(s0)
80003aa0:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:409
    unsigned int mySlot;
    unsigned int taskSlot;
    unsigned int i;
    Message *theMessage;
    do{
        mySlot = API_GetMessageSlot();
80003aa4:	67d010ef          	jal	ra,80005920 <API_GetMessageSlot>
80003aa8:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:410
        if(mySlot == PIPE_FULL) vTaskDelay(1);
80003aac:	fe842703          	lw	a4,-24(s0)
80003ab0:	fdfe07b7          	lui	a5,0xfdfe0
80003ab4:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f3ad>
80003ab8:	00f71663          	bne	a4,a5,80003ac4 <API_SendMessage+0x38>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:410 (discriminator 1)
80003abc:	00100513          	li	a0,1
80003ac0:	e8cfe0ef          	jal	ra,8000214c <vTaskDelay>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:411
    }while(mySlot == PIPE_FULL);
80003ac4:	fe842703          	lw	a4,-24(s0)
80003ac8:	fdfe07b7          	lui	a5,0xfdfe0
80003acc:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f3ad>
80003ad0:	fcf70ae3          	beq	a4,a5,80003aa4 <API_SendMessage+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:413
    
    theMessage = addr;
80003ad4:	fdc42783          	lw	a5,-36(s0)
80003ad8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:415

    taskSlot = API_GetCurrentTaskSlot();
80003adc:	091010ef          	jal	ra,8000536c <API_GetCurrentTaskSlot>
80003ae0:	fea42023          	sw	a0,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:416
    printsv("Adding a msg in the PIPE slot ", mySlot);
80003ae4:	fe842783          	lw	a5,-24(s0)
80003ae8:	00078593          	mv	a1,a5
80003aec:	800067b7          	lui	a5,0x80006
80003af0:	24478513          	addi	a0,a5,580 # 80006244 <__stack_top+0xfffc57f4>
80003af4:	b54ff0ef          	jal	ra,80002e48 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:417
    MessagePipe[mySlot].holder = taskSlot;
80003af8:	800207b7          	lui	a5,0x80020
80003afc:	fe842683          	lw	a3,-24(s0)
80003b00:	80078713          	addi	a4,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
80003b04:	24400793          	li	a5,580
80003b08:	02f687b3          	mul	a5,a3,a5
80003b0c:	00f707b3          	add	a5,a4,a5
80003b10:	fe042703          	lw	a4,-32(s0)
80003b14:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:419

    MessagePipe[mySlot].header.header           = TaskList[taskSlot].TasksMap[taskID];
80003b18:	800216b7          	lui	a3,0x80021
80003b1c:	fe042703          	lw	a4,-32(s0)
80003b20:	00070793          	mv	a5,a4
80003b24:	00479793          	slli	a5,a5,0x4
80003b28:	40e787b3          	sub	a5,a5,a4
80003b2c:	00179793          	slli	a5,a5,0x1
80003b30:	fd842703          	lw	a4,-40(s0)
80003b34:	00e787b3          	add	a5,a5,a4
80003b38:	01478793          	addi	a5,a5,20
80003b3c:	00279713          	slli	a4,a5,0x2
80003b40:	8b868793          	addi	a5,a3,-1864 # 800208b8 <__stack_top+0xfffdfe68>
80003b44:	00f707b3          	add	a5,a4,a5
80003b48:	0007a703          	lw	a4,0(a5)
80003b4c:	800207b7          	lui	a5,0x80020
80003b50:	fe842603          	lw	a2,-24(s0)
80003b54:	80078693          	addi	a3,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
80003b58:	24400793          	li	a5,580
80003b5c:	02f607b3          	mul	a5,a2,a5
80003b60:	00f687b3          	add	a5,a3,a5
80003b64:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:420
    MessagePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE + theMessage->length + 1;
80003b68:	fe442783          	lw	a5,-28(s0)
80003b6c:	0007a783          	lw	a5,0(a5)
80003b70:	00c78713          	addi	a4,a5,12
80003b74:	800207b7          	lui	a5,0x80020
80003b78:	fe842603          	lw	a2,-24(s0)
80003b7c:	80078693          	addi	a3,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
80003b80:	24400793          	li	a5,580
80003b84:	02f607b3          	mul	a5,a2,a5
80003b88:	00f687b3          	add	a5,a3,a5
80003b8c:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:421
    MessagePipe[mySlot].header.service          = MESSAGE_DELIVERY;
80003b90:	800207b7          	lui	a5,0x80020
80003b94:	fe842683          	lw	a3,-24(s0)
80003b98:	80078713          	addi	a4,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
80003b9c:	24400793          	li	a5,580
80003ba0:	02f687b3          	mul	a5,a3,a5
80003ba4:	00f707b3          	add	a5,a4,a5
80003ba8:	02000713          	li	a4,32
80003bac:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:422
    MessagePipe[mySlot].header.application_id   = TaskList[taskSlot].AppID;
80003bb0:	800217b7          	lui	a5,0x80021
80003bb4:	fe042703          	lw	a4,-32(s0)
80003bb8:	8b878693          	addi	a3,a5,-1864 # 800208b8 <__stack_top+0xfffdfe68>
80003bbc:	00070793          	mv	a5,a4
80003bc0:	00479793          	slli	a5,a5,0x4
80003bc4:	40e787b3          	sub	a5,a5,a4
80003bc8:	00379793          	slli	a5,a5,0x3
80003bcc:	00f687b3          	add	a5,a3,a5
80003bd0:	0087a703          	lw	a4,8(a5)
80003bd4:	800207b7          	lui	a5,0x80020
80003bd8:	fe842603          	lw	a2,-24(s0)
80003bdc:	80078693          	addi	a3,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
80003be0:	24400793          	li	a5,580
80003be4:	02f607b3          	mul	a5,a2,a5
80003be8:	00f687b3          	add	a5,a3,a5
80003bec:	00e7ac23          	sw	a4,24(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:423
    MessagePipe[mySlot].header.producer_task    = TaskList[taskSlot].TaskID;
80003bf0:	800217b7          	lui	a5,0x80021
80003bf4:	fe042703          	lw	a4,-32(s0)
80003bf8:	8b878693          	addi	a3,a5,-1864 # 800208b8 <__stack_top+0xfffdfe68>
80003bfc:	00070793          	mv	a5,a4
80003c00:	00479793          	slli	a5,a5,0x4
80003c04:	40e787b3          	sub	a5,a5,a4
80003c08:	00379793          	slli	a5,a5,0x3
80003c0c:	00f687b3          	add	a5,a3,a5
80003c10:	0047a703          	lw	a4,4(a5)
80003c14:	800207b7          	lui	a5,0x80020
80003c18:	fe842603          	lw	a2,-24(s0)
80003c1c:	80078693          	addi	a3,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
80003c20:	24400793          	li	a5,580
80003c24:	02f607b3          	mul	a5,a2,a5
80003c28:	00f687b3          	add	a5,a3,a5
80003c2c:	00e7ae23          	sw	a4,28(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:424
    MessagePipe[mySlot].header.destination_task = taskID;
80003c30:	800207b7          	lui	a5,0x80020
80003c34:	fe842683          	lw	a3,-24(s0)
80003c38:	80078713          	addi	a4,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
80003c3c:	24400793          	li	a5,580
80003c40:	02f687b3          	mul	a5,a3,a5
80003c44:	00f707b3          	add	a5,a4,a5
80003c48:	fd842703          	lw	a4,-40(s0)
80003c4c:	02e7a023          	sw	a4,32(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:425
    MessagePipe[mySlot].msg.length              = theMessage->length;
80003c50:	fe442783          	lw	a5,-28(s0)
80003c54:	0007a703          	lw	a4,0(a5)
80003c58:	800207b7          	lui	a5,0x80020
80003c5c:	fe842603          	lw	a2,-24(s0)
80003c60:	24400693          	li	a3,580
80003c64:	02d606b3          	mul	a3,a2,a3
80003c68:	80078793          	addi	a5,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
80003c6c:	00f687b3          	add	a5,a3,a5
80003c70:	04e7a023          	sw	a4,64(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:426
    for (i = 0; i < theMessage->length; i++){
80003c74:	fe042623          	sw	zero,-20(s0)
80003c78:	05c0006f          	j	80003cd4 <API_SendMessage+0x248>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:427 (discriminator 3)
        MessagePipe[mySlot].msg.msg[i]          = theMessage->msg[i];
80003c7c:	fe442703          	lw	a4,-28(s0)
80003c80:	fec42783          	lw	a5,-20(s0)
80003c84:	00279793          	slli	a5,a5,0x2
80003c88:	00f707b3          	add	a5,a4,a5
80003c8c:	0047a683          	lw	a3,4(a5)
80003c90:	80020637          	lui	a2,0x80020
80003c94:	fe842703          	lw	a4,-24(s0)
80003c98:	00070793          	mv	a5,a4
80003c9c:	00379793          	slli	a5,a5,0x3
80003ca0:	00e787b3          	add	a5,a5,a4
80003ca4:	00479793          	slli	a5,a5,0x4
80003ca8:	00e787b3          	add	a5,a5,a4
80003cac:	fec42703          	lw	a4,-20(s0)
80003cb0:	00e787b3          	add	a5,a5,a4
80003cb4:	01078793          	addi	a5,a5,16
80003cb8:	80060713          	addi	a4,a2,-2048 # 8001f800 <__stack_top+0xfffdedb0>
80003cbc:	00279793          	slli	a5,a5,0x2
80003cc0:	00f707b3          	add	a5,a4,a5
80003cc4:	00d7a223          	sw	a3,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:426 (discriminator 3)
    for (i = 0; i < theMessage->length; i++){
80003cc8:	fec42783          	lw	a5,-20(s0)
80003ccc:	00178793          	addi	a5,a5,1
80003cd0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:426 (discriminator 1)
80003cd4:	fe442783          	lw	a5,-28(s0)
80003cd8:	0007a783          	lw	a5,0(a5)
80003cdc:	fec42703          	lw	a4,-20(s0)
80003ce0:	f8f76ee3          	bltu	a4,a5,80003c7c <API_SendMessage+0x1f0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:430
    }
    
    vPortEnterCritical();
80003ce4:	8d9fd0ef          	jal	ra,800015bc <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:431
    if (TaskList[taskSlot].PendingReq[taskID] == TRUE){
80003ce8:	800216b7          	lui	a3,0x80021
80003cec:	fe042703          	lw	a4,-32(s0)
80003cf0:	00070793          	mv	a5,a4
80003cf4:	00479793          	slli	a5,a5,0x4
80003cf8:	40e787b3          	sub	a5,a5,a4
80003cfc:	00179793          	slli	a5,a5,0x1
80003d00:	fd842703          	lw	a4,-40(s0)
80003d04:	00e787b3          	add	a5,a5,a4
80003d08:	00878793          	addi	a5,a5,8
80003d0c:	8b868713          	addi	a4,a3,-1864 # 800208b8 <__stack_top+0xfffdfe68>
80003d10:	00279793          	slli	a5,a5,0x2
80003d14:	00f707b3          	add	a5,a4,a5
80003d18:	0047a703          	lw	a4,4(a5)
80003d1c:	00100793          	li	a5,1
80003d20:	00f71863          	bne	a4,a5,80003d30 <API_SendMessage+0x2a4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:432
        API_PushSendQueue(MESSAGE, mySlot);
80003d24:	fe842583          	lw	a1,-24(s0)
80003d28:	20200537          	lui	a0,0x20200
80003d2c:	9edff0ef          	jal	ra,80003718 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:434
    }
    vPortExitCritical();
80003d30:	8c1fd0ef          	jal	ra,800015f0 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:436

    return;
80003d34:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:437
}
80003d38:	02c12083          	lw	ra,44(sp)
80003d3c:	02812403          	lw	s0,40(sp)
80003d40:	03010113          	addi	sp,sp,48
80003d44:	00008067          	ret

80003d48 <API_SendMessageReq>:
API_SendMessageReq():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:439

void API_SendMessageReq(unsigned int addr, unsigned int taskID){
80003d48:	fd010113          	addi	sp,sp,-48
80003d4c:	02112623          	sw	ra,44(sp)
80003d50:	02812423          	sw	s0,40(sp)
80003d54:	03010413          	addi	s0,sp,48
80003d58:	fca42e23          	sw	a0,-36(s0)
80003d5c:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:444
    unsigned int taskSlot;
    unsigned int mySlot;

    // Update task info
    taskSlot = API_GetCurrentTaskSlot();
80003d60:	60c010ef          	jal	ra,8000536c <API_GetCurrentTaskSlot>
80003d64:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:445
    TaskList[taskSlot].waitingMsg = TRUE;
80003d68:	800216b7          	lui	a3,0x80021
80003d6c:	fec42703          	lw	a4,-20(s0)
80003d70:	00070793          	mv	a5,a4
80003d74:	00479793          	slli	a5,a5,0x4
80003d78:	40e787b3          	sub	a5,a5,a4
80003d7c:	00379793          	slli	a5,a5,0x3
80003d80:	8b868713          	addi	a4,a3,-1864 # 800208b8 <__stack_top+0xfffdfe68>
80003d84:	00e787b3          	add	a5,a5,a4
80003d88:	00100713          	li	a4,1
80003d8c:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:446
    TaskList[taskSlot].MsgToReceive = addr;
80003d90:	800217b7          	lui	a5,0x80021
80003d94:	fec42703          	lw	a4,-20(s0)
80003d98:	8b878693          	addi	a3,a5,-1864 # 800208b8 <__stack_top+0xfffdfe68>
80003d9c:	00070793          	mv	a5,a4
80003da0:	00479793          	slli	a5,a5,0x4
80003da4:	40e787b3          	sub	a5,a5,a4
80003da8:	00379793          	slli	a5,a5,0x3
80003dac:	00f687b3          	add	a5,a3,a5
80003db0:	fdc42703          	lw	a4,-36(s0)
80003db4:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:451
    //printsv("API_SendMessageReq addr: ", addr);

    // Sends the message request
    do{
        mySlot = API_GetServiceSlot();
80003db8:	4b5010ef          	jal	ra,80005a6c <API_GetServiceSlot>
80003dbc:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:452
        if(mySlot == PIPE_FULL) vTaskDelay(1);
80003dc0:	fe842703          	lw	a4,-24(s0)
80003dc4:	fdfe07b7          	lui	a5,0xfdfe0
80003dc8:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f3ad>
80003dcc:	00f71663          	bne	a4,a5,80003dd8 <API_SendMessageReq+0x90>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:452 (discriminator 1)
80003dd0:	00100513          	li	a0,1
80003dd4:	b78fe0ef          	jal	ra,8000214c <vTaskDelay>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:453
    }while(mySlot == PIPE_FULL);
80003dd8:	fe842703          	lw	a4,-24(s0)
80003ddc:	fdfe07b7          	lui	a5,0xfdfe0
80003de0:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f3ad>
80003de4:	fcf70ae3          	beq	a4,a5,80003db8 <API_SendMessageReq+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:455

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80003de8:	8001f7b7          	lui	a5,0x8001f
80003dec:	fe842703          	lw	a4,-24(s0)
80003df0:	69c78693          	addi	a3,a5,1692 # 8001f69c <__stack_top+0xfffdec4c>
80003df4:	00070793          	mv	a5,a4
80003df8:	00479793          	slli	a5,a5,0x4
80003dfc:	40e787b3          	sub	a5,a5,a4
80003e00:	00279793          	slli	a5,a5,0x2
80003e04:	00f687b3          	add	a5,a3,a5
80003e08:	feff0737          	lui	a4,0xfeff0
80003e0c:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efaf4ae>
80003e10:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:457

    ServicePipe[mySlot].header.header           = TaskList[taskSlot].TasksMap[taskID];
80003e14:	800216b7          	lui	a3,0x80021
80003e18:	fec42703          	lw	a4,-20(s0)
80003e1c:	00070793          	mv	a5,a4
80003e20:	00479793          	slli	a5,a5,0x4
80003e24:	40e787b3          	sub	a5,a5,a4
80003e28:	00179793          	slli	a5,a5,0x1
80003e2c:	fd842703          	lw	a4,-40(s0)
80003e30:	00e787b3          	add	a5,a5,a4
80003e34:	01478793          	addi	a5,a5,20
80003e38:	00279713          	slli	a4,a5,0x2
80003e3c:	8b868793          	addi	a5,a3,-1864 # 800208b8 <__stack_top+0xfffdfe68>
80003e40:	00f707b3          	add	a5,a4,a5
80003e44:	0007a683          	lw	a3,0(a5)
80003e48:	8001f7b7          	lui	a5,0x8001f
80003e4c:	fe842703          	lw	a4,-24(s0)
80003e50:	69c78613          	addi	a2,a5,1692 # 8001f69c <__stack_top+0xfffdec4c>
80003e54:	00070793          	mv	a5,a4
80003e58:	00479793          	slli	a5,a5,0x4
80003e5c:	40e787b3          	sub	a5,a5,a4
80003e60:	00279793          	slli	a5,a5,0x2
80003e64:	00f607b3          	add	a5,a2,a5
80003e68:	00d7a423          	sw	a3,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:458
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80003e6c:	8001f7b7          	lui	a5,0x8001f
80003e70:	fe842703          	lw	a4,-24(s0)
80003e74:	69c78693          	addi	a3,a5,1692 # 8001f69c <__stack_top+0xfffdec4c>
80003e78:	00070793          	mv	a5,a4
80003e7c:	00479793          	slli	a5,a5,0x4
80003e80:	40e787b3          	sub	a5,a5,a4
80003e84:	00279793          	slli	a5,a5,0x2
80003e88:	00f687b3          	add	a5,a3,a5
80003e8c:	00b00713          	li	a4,11
80003e90:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:459
    ServicePipe[mySlot].header.service          = MESSAGE_REQUEST;
80003e94:	8001f7b7          	lui	a5,0x8001f
80003e98:	fe842703          	lw	a4,-24(s0)
80003e9c:	69c78693          	addi	a3,a5,1692 # 8001f69c <__stack_top+0xfffdec4c>
80003ea0:	00070793          	mv	a5,a4
80003ea4:	00479793          	slli	a5,a5,0x4
80003ea8:	40e787b3          	sub	a5,a5,a4
80003eac:	00279793          	slli	a5,a5,0x2
80003eb0:	00f687b3          	add	a5,a3,a5
80003eb4:	01000713          	li	a4,16
80003eb8:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:460
    ServicePipe[mySlot].header.task_id          = TaskList[taskSlot].TaskID;
80003ebc:	800217b7          	lui	a5,0x80021
80003ec0:	fec42703          	lw	a4,-20(s0)
80003ec4:	8b878693          	addi	a3,a5,-1864 # 800208b8 <__stack_top+0xfffdfe68>
80003ec8:	00070793          	mv	a5,a4
80003ecc:	00479793          	slli	a5,a5,0x4
80003ed0:	40e787b3          	sub	a5,a5,a4
80003ed4:	00379793          	slli	a5,a5,0x3
80003ed8:	00f687b3          	add	a5,a3,a5
80003edc:	0047a683          	lw	a3,4(a5)
80003ee0:	8001f7b7          	lui	a5,0x8001f
80003ee4:	fe842703          	lw	a4,-24(s0)
80003ee8:	69c78613          	addi	a2,a5,1692 # 8001f69c <__stack_top+0xfffdec4c>
80003eec:	00070793          	mv	a5,a4
80003ef0:	00479793          	slli	a5,a5,0x4
80003ef4:	40e787b3          	sub	a5,a5,a4
80003ef8:	00279793          	slli	a5,a5,0x2
80003efc:	00f607b3          	add	a5,a2,a5
80003f00:	00d7aa23          	sw	a3,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:461
    ServicePipe[mySlot].header.task_app_id      = TaskList[taskSlot].AppID;
80003f04:	800217b7          	lui	a5,0x80021
80003f08:	fec42703          	lw	a4,-20(s0)
80003f0c:	8b878693          	addi	a3,a5,-1864 # 800208b8 <__stack_top+0xfffdfe68>
80003f10:	00070793          	mv	a5,a4
80003f14:	00479793          	slli	a5,a5,0x4
80003f18:	40e787b3          	sub	a5,a5,a4
80003f1c:	00379793          	slli	a5,a5,0x3
80003f20:	00f687b3          	add	a5,a3,a5
80003f24:	0087a683          	lw	a3,8(a5)
80003f28:	8001f7b7          	lui	a5,0x8001f
80003f2c:	fe842703          	lw	a4,-24(s0)
80003f30:	69c78613          	addi	a2,a5,1692 # 8001f69c <__stack_top+0xfffdec4c>
80003f34:	00070793          	mv	a5,a4
80003f38:	00479793          	slli	a5,a5,0x4
80003f3c:	40e787b3          	sub	a5,a5,a4
80003f40:	00279793          	slli	a5,a5,0x2
80003f44:	00f607b3          	add	a5,a2,a5
80003f48:	02d7a223          	sw	a3,36(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:462
    ServicePipe[mySlot].header.producer_task_id = taskID;
80003f4c:	8001f7b7          	lui	a5,0x8001f
80003f50:	fe842703          	lw	a4,-24(s0)
80003f54:	69c78693          	addi	a3,a5,1692 # 8001f69c <__stack_top+0xfffdec4c>
80003f58:	00070793          	mv	a5,a4
80003f5c:	00479793          	slli	a5,a5,0x4
80003f60:	40e787b3          	sub	a5,a5,a4
80003f64:	00279793          	slli	a5,a5,0x2
80003f68:	00f687b3          	add	a5,a3,a5
80003f6c:	fd842703          	lw	a4,-40(s0)
80003f70:	00e7ae23          	sw	a4,28(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:464

    API_PushSendQueue(SERVICE, mySlot);
80003f74:	fe842583          	lw	a1,-24(s0)
80003f78:	10100537          	lui	a0,0x10100
80003f7c:	f9cff0ef          	jal	ra,80003718 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:465
    prints("Esperando Mensagem!\n");
80003f80:	800067b7          	lui	a5,0x80006
80003f84:	26478513          	addi	a0,a5,612 # 80006264 <__stack_top+0xfffc5814>
80003f88:	e15fe0ef          	jal	ra,80002d9c <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:467
    // Bloquear a tarefa!
    while(TaskList[taskSlot].waitingMsg == TRUE){ 
80003f8c:	02c0006f          	j	80003fb8 <API_SendMessageReq+0x270>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:468
        printsvsv("taskslot ", taskSlot, " esperando mensagem ", 0);
80003f90:	fec42703          	lw	a4,-20(s0)
80003f94:	00000693          	li	a3,0
80003f98:	800067b7          	lui	a5,0x80006
80003f9c:	27c78613          	addi	a2,a5,636 # 8000627c <__stack_top+0xfffc582c>
80003fa0:	00070593          	mv	a1,a4
80003fa4:	800067b7          	lui	a5,0x80006
80003fa8:	29478513          	addi	a0,a5,660 # 80006294 <__stack_top+0xfffc5844>
80003fac:	ee5fe0ef          	jal	ra,80002e90 <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:469
        vTaskDelay(1); 
80003fb0:	00100513          	li	a0,1
80003fb4:	998fe0ef          	jal	ra,8000214c <vTaskDelay>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:467
    while(TaskList[taskSlot].waitingMsg == TRUE){ 
80003fb8:	800216b7          	lui	a3,0x80021
80003fbc:	fec42703          	lw	a4,-20(s0)
80003fc0:	00070793          	mv	a5,a4
80003fc4:	00479793          	slli	a5,a5,0x4
80003fc8:	40e787b3          	sub	a5,a5,a4
80003fcc:	00379793          	slli	a5,a5,0x3
80003fd0:	8b868713          	addi	a4,a3,-1864 # 800208b8 <__stack_top+0xfffdfe68>
80003fd4:	00e787b3          	add	a5,a5,a4
80003fd8:	0107a703          	lw	a4,16(a5)
80003fdc:	00100793          	li	a5,1
80003fe0:	faf708e3          	beq	a4,a5,80003f90 <API_SendMessageReq+0x248>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:471
    }
    prints("Mensagem Recebida!\n");
80003fe4:	800067b7          	lui	a5,0x80006
80003fe8:	2a078513          	addi	a0,a5,672 # 800062a0 <__stack_top+0xfffc5850>
80003fec:	db1fe0ef          	jal	ra,80002d9c <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:472
    return;
80003ff0:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:473
}
80003ff4:	02c12083          	lw	ra,44(sp)
80003ff8:	02812403          	lw	s0,40(sp)
80003ffc:	03010113          	addi	sp,sp,48
80004000:	00008067          	ret

80004004 <API_CheckMessagePipe>:
API_CheckMessagePipe():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:475

unsigned int API_CheckMessagePipe(unsigned int requester_task_id, unsigned int task_app_id){
80004004:	fd010113          	addi	sp,sp,-48
80004008:	02812623          	sw	s0,44(sp)
8000400c:	03010413          	addi	s0,sp,48
80004010:	fca42e23          	sw	a0,-36(s0)
80004014:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:477
    unsigned int i;
    unsigned int sel = ERRO;
80004018:	fff00793          	li	a5,-1
8000401c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:478
    unsigned int smallID = 268435455;
80004020:	100007b7          	lui	a5,0x10000
80004024:	fff78793          	addi	a5,a5,-1 # fffffff <RAM_SIZE+0xff7ffff>
80004028:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:479
    for (i = 0; i < PIPE_SIZE; i++){
8000402c:	fe042623          	sw	zero,-20(s0)
80004030:	0840006f          	j	800040b4 <API_CheckMessagePipe+0xb0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:480
        if(MessagePipe[i].status == PIPE_OCCUPIED){
80004034:	800207b7          	lui	a5,0x80020
80004038:	fec42683          	lw	a3,-20(s0)
8000403c:	24400713          	li	a4,580
80004040:	02e68733          	mul	a4,a3,a4
80004044:	80078793          	addi	a5,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
80004048:	00f707b3          	add	a5,a4,a5
8000404c:	0007a703          	lw	a4,0(a5)
80004050:	00100793          	li	a5,1
80004054:	04f71a63          	bne	a4,a5,800040a8 <API_CheckMessagePipe+0xa4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:481
            if(MessagePipe[i].header.application_id == task_app_id){
80004058:	800207b7          	lui	a5,0x80020
8000405c:	fec42683          	lw	a3,-20(s0)
80004060:	80078713          	addi	a4,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
80004064:	24400793          	li	a5,580
80004068:	02f687b3          	mul	a5,a3,a5
8000406c:	00f707b3          	add	a5,a4,a5
80004070:	0187a783          	lw	a5,24(a5)
80004074:	fd842703          	lw	a4,-40(s0)
80004078:	02f71863          	bne	a4,a5,800040a8 <API_CheckMessagePipe+0xa4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:482
                if(MessagePipe[i].header.destination_task == requester_task_id){
8000407c:	800207b7          	lui	a5,0x80020
80004080:	fec42683          	lw	a3,-20(s0)
80004084:	80078713          	addi	a4,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
80004088:	24400793          	li	a5,580
8000408c:	02f687b3          	mul	a5,a3,a5
80004090:	00f707b3          	add	a5,a4,a5
80004094:	0207a783          	lw	a5,32(a5)
80004098:	fdc42703          	lw	a4,-36(s0)
8000409c:	00f71663          	bne	a4,a5,800040a8 <API_CheckMessagePipe+0xa4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:485
                    //if(MessagePipe[i].msgID < smallID){
                    //    smallID = MessagePipe[i].msgID;
                        sel = i;
800040a0:	fec42783          	lw	a5,-20(s0)
800040a4:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:479 (discriminator 2)
    for (i = 0; i < PIPE_SIZE; i++){
800040a8:	fec42783          	lw	a5,-20(s0)
800040ac:	00178793          	addi	a5,a5,1
800040b0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:479 (discriminator 1)
800040b4:	fec42703          	lw	a4,-20(s0)
800040b8:	00300793          	li	a5,3
800040bc:	f6e7fce3          	bleu	a4,a5,80004034 <API_CheckMessagePipe+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:492
                }
            }
        }
    }
    //printsv("returning sel: ", sel);
    return sel;
800040c0:	fe842783          	lw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:493
}
800040c4:	00078513          	mv	a0,a5
800040c8:	02c12403          	lw	s0,44(sp)
800040cc:	03010113          	addi	sp,sp,48
800040d0:	00008067          	ret

800040d4 <API_AddPendingReq>:
API_AddPendingReq():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:495

void API_AddPendingReq(unsigned int requester_task_id, unsigned int task_app_id, unsigned int producer_task_id){
800040d4:	fd010113          	addi	sp,sp,-48
800040d8:	02112623          	sw	ra,44(sp)
800040dc:	02812423          	sw	s0,40(sp)
800040e0:	03010413          	addi	s0,sp,48
800040e4:	fca42e23          	sw	a0,-36(s0)
800040e8:	fcb42c23          	sw	a1,-40(s0)
800040ec:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:496
    unsigned int slot = API_GetTaskSlot(producer_task_id, task_app_id);
800040f0:	fd842583          	lw	a1,-40(s0)
800040f4:	fd442503          	lw	a0,-44(s0)
800040f8:	52c010ef          	jal	ra,80005624 <API_GetTaskSlot>
800040fc:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:497
    TaskList[slot].PendingReq[requester_task_id] = TRUE;
80004100:	800216b7          	lui	a3,0x80021
80004104:	fec42703          	lw	a4,-20(s0)
80004108:	00070793          	mv	a5,a4
8000410c:	00479793          	slli	a5,a5,0x4
80004110:	40e787b3          	sub	a5,a5,a4
80004114:	00179793          	slli	a5,a5,0x1
80004118:	fdc42703          	lw	a4,-36(s0)
8000411c:	00e787b3          	add	a5,a5,a4
80004120:	00878793          	addi	a5,a5,8
80004124:	8b868713          	addi	a4,a3,-1864 # 800208b8 <__stack_top+0xfffdfe68>
80004128:	00279793          	slli	a5,a5,0x2
8000412c:	00f707b3          	add	a5,a4,a5
80004130:	00100713          	li	a4,1
80004134:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:498
    return;
80004138:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:499
}
8000413c:	02c12083          	lw	ra,44(sp)
80004140:	02812403          	lw	s0,40(sp)
80004144:	03010113          	addi	sp,sp,48
80004148:	00008067          	ret

8000414c <API_RepositoryWakeUp>:
API_RepositoryWakeUp():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:10
#include "packet.h"
#include "services.h"

////////////////////////////////////////////////////////////
// Informs the Repository that the GLOBALMASTER is ready to receive the application info
void API_RepositoryWakeUp(){
8000414c:	fe010113          	addi	sp,sp,-32
80004150:	00112e23          	sw	ra,28(sp)
80004154:	00812c23          	sw	s0,24(sp)
80004158:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:13
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
8000415c:	111010ef          	jal	ra,80005a6c <API_GetServiceSlot>
80004160:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:14
        if(mySlot == PIPE_FULL) vTaskDelay(1);
80004164:	fec42703          	lw	a4,-20(s0)
80004168:	fdfe07b7          	lui	a5,0xfdfe0
8000416c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f3ad>
80004170:	00f71663          	bne	a4,a5,8000417c <API_RepositoryWakeUp+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:14 (discriminator 1)
80004174:	00100513          	li	a0,1
80004178:	fd5fd0ef          	jal	ra,8000214c <vTaskDelay>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:15
    }while(mySlot == PIPE_FULL);
8000417c:	fec42703          	lw	a4,-20(s0)
80004180:	fdfe07b7          	lui	a5,0xfdfe0
80004184:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f3ad>
80004188:	fcf70ae3          	beq	a4,a5,8000415c <API_RepositoryWakeUp+0x10>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:18
    //printsv("I got a free service slot!! -> ", mySlot);

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
8000418c:	8001f7b7          	lui	a5,0x8001f
80004190:	fec42703          	lw	a4,-20(s0)
80004194:	69c78693          	addi	a3,a5,1692 # 8001f69c <__stack_top+0xfffdec4c>
80004198:	00070793          	mv	a5,a4
8000419c:	00479793          	slli	a5,a5,0x4
800041a0:	40e787b3          	sub	a5,a5,a4
800041a4:	00279793          	slli	a5,a5,0x2
800041a8:	00f687b3          	add	a5,a3,a5
800041ac:	feff0737          	lui	a4,0xfeff0
800041b0:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efaf4ae>
800041b4:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:20

    ServicePipe[mySlot].header.header       = makeAddress(0, 0) | PERIPH_SOUTH;
800041b8:	00000593          	li	a1,0
800041bc:	00000513          	li	a0,0
800041c0:	d18ff0ef          	jal	ra,800036d8 <makeAddress>
800041c4:	00050713          	mv	a4,a0
800041c8:	000407b7          	lui	a5,0x40
800041cc:	00f766b3          	or	a3,a4,a5
800041d0:	8001f7b7          	lui	a5,0x8001f
800041d4:	fec42703          	lw	a4,-20(s0)
800041d8:	69c78613          	addi	a2,a5,1692 # 8001f69c <__stack_top+0xfffdec4c>
800041dc:	00070793          	mv	a5,a4
800041e0:	00479793          	slli	a5,a5,0x4
800041e4:	40e787b3          	sub	a5,a5,a4
800041e8:	00279793          	slli	a5,a5,0x2
800041ec:	00f607b3          	add	a5,a2,a5
800041f0:	00d7a423          	sw	a3,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:21
    ServicePipe[mySlot].header.payload_size = PKT_SERVICE_SIZE;
800041f4:	8001f7b7          	lui	a5,0x8001f
800041f8:	fec42703          	lw	a4,-20(s0)
800041fc:	69c78693          	addi	a3,a5,1692 # 8001f69c <__stack_top+0xfffdec4c>
80004200:	00070793          	mv	a5,a4
80004204:	00479793          	slli	a5,a5,0x4
80004208:	40e787b3          	sub	a5,a5,a4
8000420c:	00279793          	slli	a5,a5,0x2
80004210:	00f687b3          	add	a5,a3,a5
80004214:	00b00713          	li	a4,11
80004218:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:22
    ServicePipe[mySlot].header.service      = REPOSITORY_WAKEUP;
8000421c:	8001f7b7          	lui	a5,0x8001f
80004220:	fec42703          	lw	a4,-20(s0)
80004224:	69c78693          	addi	a3,a5,1692 # 8001f69c <__stack_top+0xfffdec4c>
80004228:	00070793          	mv	a5,a4
8000422c:	00479793          	slli	a5,a5,0x4
80004230:	40e787b3          	sub	a5,a5,a4
80004234:	00279793          	slli	a5,a5,0x2
80004238:	00f687b3          	add	a5,a3,a5
8000423c:	10000713          	li	a4,256
80004240:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:24

    API_PushSendQueue(SERVICE, mySlot);
80004244:	fec42583          	lw	a1,-20(s0)
80004248:	10100537          	lui	a0,0x10100
8000424c:	cccff0ef          	jal	ra,80003718 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:25
    return;    
80004250:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:26
}
80004254:	01c12083          	lw	ra,28(sp)
80004258:	01812403          	lw	s0,24(sp)
8000425c:	02010113          	addi	sp,sp,32
80004260:	00008067          	ret

80004264 <API_AddApplication>:
API_AddApplication():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:30

////////////////////////////////////////////////////////////
// Add one Application in the Execution Queue
void API_AddApplication(unsigned int appID, unsigned int appPeriod, unsigned int appExec, unsigned int appNTasks){
80004264:	fd010113          	addi	sp,sp,-48
80004268:	02112623          	sw	ra,44(sp)
8000426c:	02812423          	sw	s0,40(sp)
80004270:	03010413          	addi	s0,sp,48
80004274:	fca42e23          	sw	a0,-36(s0)
80004278:	fcb42c23          	sw	a1,-40(s0)
8000427c:	fcc42a23          	sw	a2,-44(s0)
80004280:	fcd42823          	sw	a3,-48(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:31
    int slot = API_GetApplicationFreeSlot();
80004284:	1c4000ef          	jal	ra,80004448 <API_GetApplicationFreeSlot>
80004288:	00050793          	mv	a5,a0
8000428c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:32
    applications[slot].occupied = TRUE;
80004290:	800206b7          	lui	a3,0x80020
80004294:	fec42703          	lw	a4,-20(s0)
80004298:	00070793          	mv	a5,a4
8000429c:	00279793          	slli	a5,a5,0x2
800042a0:	00e787b3          	add	a5,a5,a4
800042a4:	00579793          	slli	a5,a5,0x5
800042a8:	13868713          	addi	a4,a3,312 # 80020138 <__stack_top+0xfffdf6e8>
800042ac:	00e787b3          	add	a5,a5,a4
800042b0:	00100713          	li	a4,1
800042b4:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:33
    applications[slot].appID = appID;
800042b8:	800207b7          	lui	a5,0x80020
800042bc:	fec42703          	lw	a4,-20(s0)
800042c0:	13878693          	addi	a3,a5,312 # 80020138 <__stack_top+0xfffdf6e8>
800042c4:	00070793          	mv	a5,a4
800042c8:	00279793          	slli	a5,a5,0x2
800042cc:	00e787b3          	add	a5,a5,a4
800042d0:	00579793          	slli	a5,a5,0x5
800042d4:	00f687b3          	add	a5,a3,a5
800042d8:	fdc42703          	lw	a4,-36(s0)
800042dc:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:34
    applications[slot].appPeriod = appPeriod;
800042e0:	800207b7          	lui	a5,0x80020
800042e4:	fec42703          	lw	a4,-20(s0)
800042e8:	13878693          	addi	a3,a5,312 # 80020138 <__stack_top+0xfffdf6e8>
800042ec:	00070793          	mv	a5,a4
800042f0:	00279793          	slli	a5,a5,0x2
800042f4:	00e787b3          	add	a5,a5,a4
800042f8:	00579793          	slli	a5,a5,0x5
800042fc:	00f687b3          	add	a5,a3,a5
80004300:	fd842703          	lw	a4,-40(s0)
80004304:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:35
    applications[slot].appExec = appExec;
80004308:	800207b7          	lui	a5,0x80020
8000430c:	fec42703          	lw	a4,-20(s0)
80004310:	13878693          	addi	a3,a5,312 # 80020138 <__stack_top+0xfffdf6e8>
80004314:	00070793          	mv	a5,a4
80004318:	00279793          	slli	a5,a5,0x2
8000431c:	00e787b3          	add	a5,a5,a4
80004320:	00579793          	slli	a5,a5,0x5
80004324:	00f687b3          	add	a5,a3,a5
80004328:	fd442703          	lw	a4,-44(s0)
8000432c:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:36
    applications[slot].numTasks = appNTasks;
80004330:	800206b7          	lui	a3,0x80020
80004334:	fec42703          	lw	a4,-20(s0)
80004338:	00070793          	mv	a5,a4
8000433c:	00279793          	slli	a5,a5,0x2
80004340:	00e787b3          	add	a5,a5,a4
80004344:	00579793          	slli	a5,a5,0x5
80004348:	13868713          	addi	a4,a3,312 # 80020138 <__stack_top+0xfffdf6e8>
8000434c:	00e787b3          	add	a5,a5,a4
80004350:	fd042703          	lw	a4,-48(s0)
80004354:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:37
    applications[slot].nextRun = xTaskGetTickCount() + appPeriod;
80004358:	890fe0ef          	jal	ra,800023e8 <xTaskGetTickCount>
8000435c:	00050713          	mv	a4,a0
80004360:	fd842783          	lw	a5,-40(s0)
80004364:	00f706b3          	add	a3,a4,a5
80004368:	800207b7          	lui	a5,0x80020
8000436c:	fec42703          	lw	a4,-20(s0)
80004370:	13878613          	addi	a2,a5,312 # 80020138 <__stack_top+0xfffdf6e8>
80004374:	00070793          	mv	a5,a4
80004378:	00279793          	slli	a5,a5,0x2
8000437c:	00e787b3          	add	a5,a5,a4
80004380:	00579793          	slli	a5,a5,0x5
80004384:	00f607b3          	add	a5,a2,a5
80004388:	08d7a623          	sw	a3,140(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:38
    applications[slot].executed = 0;
8000438c:	800206b7          	lui	a3,0x80020
80004390:	fec42703          	lw	a4,-20(s0)
80004394:	00070793          	mv	a5,a4
80004398:	00279793          	slli	a5,a5,0x2
8000439c:	00e787b3          	add	a5,a5,a4
800043a0:	00579793          	slli	a5,a5,0x5
800043a4:	13868713          	addi	a4,a3,312 # 80020138 <__stack_top+0xfffdf6e8>
800043a8:	00e787b3          	add	a5,a5,a4
800043ac:	0807a823          	sw	zero,144(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:39
    applications[slot].lastStart = -1;
800043b0:	800207b7          	lui	a5,0x80020
800043b4:	fec42703          	lw	a4,-20(s0)
800043b8:	13878693          	addi	a3,a5,312 # 80020138 <__stack_top+0xfffdf6e8>
800043bc:	00070793          	mv	a5,a4
800043c0:	00279793          	slli	a5,a5,0x2
800043c4:	00e787b3          	add	a5,a5,a4
800043c8:	00579793          	slli	a5,a5,0x5
800043cc:	00f687b3          	add	a5,a3,a5
800043d0:	fff00713          	li	a4,-1
800043d4:	08e7aa23          	sw	a4,148(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:40
    applications[slot].finishedTasks = 0;
800043d8:	800207b7          	lui	a5,0x80020
800043dc:	fec42703          	lw	a4,-20(s0)
800043e0:	13878693          	addi	a3,a5,312 # 80020138 <__stack_top+0xfffdf6e8>
800043e4:	00070793          	mv	a5,a4
800043e8:	00279793          	slli	a5,a5,0x2
800043ec:	00e787b3          	add	a5,a5,a4
800043f0:	00579793          	slli	a5,a5,0x5
800043f4:	00f687b3          	add	a5,a3,a5
800043f8:	0807ac23          	sw	zero,152(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:41
    applications[slot].lastFinish = 0;
800043fc:	800207b7          	lui	a5,0x80020
80004400:	fec42703          	lw	a4,-20(s0)
80004404:	13878693          	addi	a3,a5,312 # 80020138 <__stack_top+0xfffdf6e8>
80004408:	00070793          	mv	a5,a4
8000440c:	00279793          	slli	a5,a5,0x2
80004410:	00e787b3          	add	a5,a5,a4
80004414:	00579793          	slli	a5,a5,0x5
80004418:	00f687b3          	add	a5,a3,a5
8000441c:	0807ae23          	sw	zero,156(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:42
    printsv("New application registered - ID: ", appID);
80004420:	fdc42783          	lw	a5,-36(s0)
80004424:	00078593          	mv	a1,a5
80004428:	800067b7          	lui	a5,0x80006
8000442c:	2b478513          	addi	a0,a5,692 # 800062b4 <__stack_top+0xfffc5864>
80004430:	a19fe0ef          	jal	ra,80002e48 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:43
    return;
80004434:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:44
}
80004438:	02c12083          	lw	ra,44(sp)
8000443c:	02812403          	lw	s0,40(sp)
80004440:	03010113          	addi	sp,sp,48
80004444:	00008067          	ret

80004448 <API_GetApplicationFreeSlot>:
API_GetApplicationFreeSlot():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:61
}


////////////////////////////////////////////////////////////
// Gets an application slot that is free
unsigned int API_GetApplicationFreeSlot(){
80004448:	fe010113          	addi	sp,sp,-32
8000444c:	00812e23          	sw	s0,28(sp)
80004450:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:63
    int i;
    for (i = 0; i < NUM_MAX_APPS; i++){
80004454:	fe042623          	sw	zero,-20(s0)
80004458:	0400006f          	j	80004498 <API_GetApplicationFreeSlot+0x50>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:64
        if (applications[i].occupied == FALSE){
8000445c:	800206b7          	lui	a3,0x80020
80004460:	fec42703          	lw	a4,-20(s0)
80004464:	00070793          	mv	a5,a4
80004468:	00279793          	slli	a5,a5,0x2
8000446c:	00e787b3          	add	a5,a5,a4
80004470:	00579793          	slli	a5,a5,0x5
80004474:	13868713          	addi	a4,a3,312 # 80020138 <__stack_top+0xfffdf6e8>
80004478:	00e787b3          	add	a5,a5,a4
8000447c:	0007a783          	lw	a5,0(a5)
80004480:	00079663          	bnez	a5,8000448c <API_GetApplicationFreeSlot+0x44>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:65
            return i;
80004484:	fec42783          	lw	a5,-20(s0)
80004488:	0200006f          	j	800044a8 <API_GetApplicationFreeSlot+0x60>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:63 (discriminator 2)
    for (i = 0; i < NUM_MAX_APPS; i++){
8000448c:	fec42783          	lw	a5,-20(s0)
80004490:	00178793          	addi	a5,a5,1
80004494:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:63 (discriminator 1)
80004498:	fec42703          	lw	a4,-20(s0)
8000449c:	00b00793          	li	a5,11
800044a0:	fae7dee3          	ble	a4,a5,8000445c <API_GetApplicationFreeSlot+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:68
        }
    }
    return ERRO;
800044a4:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:69
}
800044a8:	00078513          	mv	a0,a5
800044ac:	01c12403          	lw	s0,28(sp)
800044b0:	02010113          	addi	sp,sp,32
800044b4:	00008067          	ret

800044b8 <API_ApplicationsReset>:
API_ApplicationsReset():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:73

////////////////////////////////////////////////////////////
// Reset applications vector
void API_ApplicationsReset(){
800044b8:	fe010113          	addi	sp,sp,-32
800044bc:	00812e23          	sw	s0,28(sp)
800044c0:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:75
    int i;
    for (i = 0; i < NUM_MAX_APPS; i++){
800044c4:	fe042623          	sw	zero,-20(s0)
800044c8:	0340006f          	j	800044fc <API_ApplicationsReset+0x44>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:76 (discriminator 3)
        applications[i].occupied = FALSE;
800044cc:	800206b7          	lui	a3,0x80020
800044d0:	fec42703          	lw	a4,-20(s0)
800044d4:	00070793          	mv	a5,a4
800044d8:	00279793          	slli	a5,a5,0x2
800044dc:	00e787b3          	add	a5,a5,a4
800044e0:	00579793          	slli	a5,a5,0x5
800044e4:	13868713          	addi	a4,a3,312 # 80020138 <__stack_top+0xfffdf6e8>
800044e8:	00e787b3          	add	a5,a5,a4
800044ec:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:75 (discriminator 3)
    for (i = 0; i < NUM_MAX_APPS; i++){
800044f0:	fec42783          	lw	a5,-20(s0)
800044f4:	00178793          	addi	a5,a5,1
800044f8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:75 (discriminator 1)
800044fc:	fec42703          	lw	a4,-20(s0)
80004500:	00b00793          	li	a5,11
80004504:	fce7d4e3          	ble	a4,a5,800044cc <API_ApplicationsReset+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:78
    }
    return;
80004508:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:79
}
8000450c:	01c12403          	lw	s0,28(sp)
80004510:	02010113          	addi	sp,sp,32
80004514:	00008067          	ret

80004518 <API_TilesReset>:
API_TilesReset():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:83

////////////////////////////////////////////////////////////
// Initialize the Tiles Info
void API_TilesReset(){
80004518:	fe010113          	addi	sp,sp,-32
8000451c:	00812e23          	sw	s0,28(sp)
80004520:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:85
    int i, m, n;
    for (m = 0; m < DIM_X; m++){
80004524:	fe042423          	sw	zero,-24(s0)
80004528:	0ec0006f          	j	80004614 <API_TilesReset+0xfc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:86
        for (n = 0; n < DIM_Y; n++){
8000452c:	fe042223          	sw	zero,-28(s0)
80004530:	0cc0006f          	j	800045fc <API_TilesReset+0xe4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:87
            Tiles[m][n].temperature = 273;
80004534:	800216b7          	lui	a3,0x80021
80004538:	fe842703          	lw	a4,-24(s0)
8000453c:	00070793          	mv	a5,a4
80004540:	00179793          	slli	a5,a5,0x1
80004544:	00e787b3          	add	a5,a5,a4
80004548:	fe442703          	lw	a4,-28(s0)
8000454c:	00e787b3          	add	a5,a5,a4
80004550:	00479713          	slli	a4,a5,0x4
80004554:	9ac68793          	addi	a5,a3,-1620 # 800209ac <__stack_top+0xfffdff5c>
80004558:	00f707b3          	add	a5,a4,a5
8000455c:	11100713          	li	a4,273
80004560:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:88
            Tiles[m][n].frequency = 1000;
80004564:	800216b7          	lui	a3,0x80021
80004568:	fe842703          	lw	a4,-24(s0)
8000456c:	00070793          	mv	a5,a4
80004570:	00179793          	slli	a5,a5,0x1
80004574:	00e787b3          	add	a5,a5,a4
80004578:	fe442703          	lw	a4,-28(s0)
8000457c:	00e787b3          	add	a5,a5,a4
80004580:	9ac68713          	addi	a4,a3,-1620 # 800209ac <__stack_top+0xfffdff5c>
80004584:	00479793          	slli	a5,a5,0x4
80004588:	00f707b3          	add	a5,a4,a5
8000458c:	3e800713          	li	a4,1000
80004590:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:89
            for(i = 0; i < NUM_MAX_TASKS; i++){
80004594:	fe042623          	sw	zero,-20(s0)
80004598:	04c0006f          	j	800045e4 <API_TilesReset+0xcc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90 (discriminator 3)
                Tiles[m][n].AppTask[i] = NONE;
8000459c:	800216b7          	lui	a3,0x80021
800045a0:	fe842703          	lw	a4,-24(s0)
800045a4:	00070793          	mv	a5,a4
800045a8:	00179793          	slli	a5,a5,0x1
800045ac:	00e787b3          	add	a5,a5,a4
800045b0:	fe442703          	lw	a4,-28(s0)
800045b4:	00e787b3          	add	a5,a5,a4
800045b8:	00279713          	slli	a4,a5,0x2
800045bc:	fec42783          	lw	a5,-20(s0)
800045c0:	00f707b3          	add	a5,a4,a5
800045c4:	9ac68713          	addi	a4,a3,-1620 # 800209ac <__stack_top+0xfffdff5c>
800045c8:	00279793          	slli	a5,a5,0x2
800045cc:	00f707b3          	add	a5,a4,a5
800045d0:	fff00713          	li	a4,-1
800045d4:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:89 (discriminator 3)
            for(i = 0; i < NUM_MAX_TASKS; i++){
800045d8:	fec42783          	lw	a5,-20(s0)
800045dc:	00178793          	addi	a5,a5,1
800045e0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:89 (discriminator 1)
800045e4:	fec42703          	lw	a4,-20(s0)
800045e8:	00100793          	li	a5,1
800045ec:	fae7d8e3          	ble	a4,a5,8000459c <API_TilesReset+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:86 (discriminator 2)
        for (n = 0; n < DIM_Y; n++){
800045f0:	fe442783          	lw	a5,-28(s0)
800045f4:	00178793          	addi	a5,a5,1
800045f8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:86 (discriminator 1)
800045fc:	fe442703          	lw	a4,-28(s0)
80004600:	00200793          	li	a5,2
80004604:	f2e7d8e3          	ble	a4,a5,80004534 <API_TilesReset+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:85 (discriminator 2)
    for (m = 0; m < DIM_X; m++){
80004608:	fe842783          	lw	a5,-24(s0)
8000460c:	00178793          	addi	a5,a5,1
80004610:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:85 (discriminator 1)
80004614:	fe842703          	lw	a4,-24(s0)
80004618:	00200793          	li	a5,2
8000461c:	f0e7d8e3          	ble	a4,a5,8000452c <API_TilesReset+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:94
            }
        }
    }    
    return;
80004620:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:95
}
80004624:	01c12403          	lw	s0,28(sp)
80004628:	02010113          	addi	sp,sp,32
8000462c:	00008067          	ret

80004630 <GeneratePatternMatrix>:
GeneratePatternMatrix():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:98

// Generates the Pattern Matrix for Pattern mapping
void GeneratePatternMatrix(){
80004630:	fe010113          	addi	sp,sp,-32
80004634:	00812e23          	sw	s0,28(sp)
80004638:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:100
    int i, aux;
    aux = 0;
8000463c:	fe042423          	sw	zero,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:101
    priorityPointer = 0;
80004640:	800217b7          	lui	a5,0x80021
80004644:	9a07a423          	sw	zero,-1624(a5) # 800209a8 <__stack_top+0xfffdff58>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:103
    //prints("Testando Pattern: \n");
    for(i=0; i<(DIM_X*DIM_Y); i++){
80004648:	fe042623          	sw	zero,-20(s0)
8000464c:	0700006f          	j	800046bc <GeneratePatternMatrix+0x8c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:105
        //printi(i); prints(": "); printi(aux); prints("\n");
        priorityMatrix[i] = (aux / DIM_X << 8) | aux % DIM_X;
80004650:	fe842703          	lw	a4,-24(s0)
80004654:	00300793          	li	a5,3
80004658:	02f747b3          	div	a5,a4,a5
8000465c:	00879713          	slli	a4,a5,0x8
80004660:	fe842683          	lw	a3,-24(s0)
80004664:	00300793          	li	a5,3
80004668:	02f6e7b3          	rem	a5,a3,a5
8000466c:	00f767b3          	or	a5,a4,a5
80004670:	00078693          	mv	a3,a5
80004674:	800207b7          	lui	a5,0x80020
80004678:	fec42703          	lw	a4,-20(s0)
8000467c:	00271713          	slli	a4,a4,0x2
80004680:	11478793          	addi	a5,a5,276 # 80020114 <__stack_top+0xfffdf6c4>
80004684:	00f707b3          	add	a5,a4,a5
80004688:	00d7a023          	sw	a3,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:124
            else{
                aux = 1;
            }
        } 
        else{
            if(aux<=((DIM_X*DIM_Y)-3))
8000468c:	fe842703          	lw	a4,-24(s0)
80004690:	00600793          	li	a5,6
80004694:	00e7ca63          	blt	a5,a4,800046a8 <GeneratePatternMatrix+0x78>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:125
                aux += 2;
80004698:	fe842783          	lw	a5,-24(s0)
8000469c:	00278793          	addi	a5,a5,2
800046a0:	fef42423          	sw	a5,-24(s0)
800046a4:	00c0006f          	j	800046b0 <GeneratePatternMatrix+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:127
            else
                aux = 1;
800046a8:	00100793          	li	a5,1
800046ac:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:103 (discriminator 2)
    for(i=0; i<(DIM_X*DIM_Y); i++){
800046b0:	fec42783          	lw	a5,-20(s0)
800046b4:	00178793          	addi	a5,a5,1
800046b8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:103 (discriminator 1)
800046bc:	fec42703          	lw	a4,-20(s0)
800046c0:	00800793          	li	a5,8
800046c4:	f8e7d6e3          	ble	a4,a5,80004650 <GeneratePatternMatrix+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:130
        }    
    }
    return;
800046c8:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:131
}
800046cc:	01c12403          	lw	s0,28(sp)
800046d0:	02010113          	addi	sp,sp,32
800046d4:	00008067          	ret

800046d8 <API_AllocateTasks>:
API_AllocateTasks():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:134

// Checks if there is some task to allocate...
void API_AllocateTasks(unsigned int tick){
800046d8:	fd010113          	addi	sp,sp,-48
800046dc:	02112623          	sw	ra,44(sp)
800046e0:	02812423          	sw	s0,40(sp)
800046e4:	02912223          	sw	s1,36(sp)
800046e8:	03010413          	addi	s0,sp,48
800046ec:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:138
    int i, j;
    int addr, slot;
    // Iterate around every possible application
    for (i = 0; i < NUM_MAX_APPS; i++){
800046f0:	fe042623          	sw	zero,-20(s0)
800046f4:	2980006f          	j	8000498c <API_AllocateTasks+0x2b4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:140
        // If the application is valid
        if (applications[i].occupied == TRUE){
800046f8:	800206b7          	lui	a3,0x80020
800046fc:	fec42703          	lw	a4,-20(s0)
80004700:	00070793          	mv	a5,a4
80004704:	00279793          	slli	a5,a5,0x2
80004708:	00e787b3          	add	a5,a5,a4
8000470c:	00579793          	slli	a5,a5,0x5
80004710:	13868713          	addi	a4,a3,312 # 80020138 <__stack_top+0xfffdf6e8>
80004714:	00e787b3          	add	a5,a5,a4
80004718:	0007a703          	lw	a4,0(a5)
8000471c:	00100793          	li	a5,1
80004720:	26f71063          	bne	a4,a5,80004980 <API_AllocateTasks+0x2a8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:143

            // If the nextRun of this application is right now, then release each task!
            if(applications[i].nextRun <= tick && applications[i].nextRun != applications[i].lastStart){
80004724:	800207b7          	lui	a5,0x80020
80004728:	fec42703          	lw	a4,-20(s0)
8000472c:	13878693          	addi	a3,a5,312 # 80020138 <__stack_top+0xfffdf6e8>
80004730:	00070793          	mv	a5,a4
80004734:	00279793          	slli	a5,a5,0x2
80004738:	00e787b3          	add	a5,a5,a4
8000473c:	00579793          	slli	a5,a5,0x5
80004740:	00f687b3          	add	a5,a3,a5
80004744:	08c7a783          	lw	a5,140(a5)
80004748:	fdc42703          	lw	a4,-36(s0)
8000474c:	22f76a63          	bltu	a4,a5,80004980 <API_AllocateTasks+0x2a8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:143 (discriminator 1)
80004750:	800207b7          	lui	a5,0x80020
80004754:	fec42703          	lw	a4,-20(s0)
80004758:	13878693          	addi	a3,a5,312 # 80020138 <__stack_top+0xfffdf6e8>
8000475c:	00070793          	mv	a5,a4
80004760:	00279793          	slli	a5,a5,0x2
80004764:	00e787b3          	add	a5,a5,a4
80004768:	00579793          	slli	a5,a5,0x5
8000476c:	00f687b3          	add	a5,a3,a5
80004770:	08c7a683          	lw	a3,140(a5)
80004774:	800207b7          	lui	a5,0x80020
80004778:	fec42703          	lw	a4,-20(s0)
8000477c:	13878613          	addi	a2,a5,312 # 80020138 <__stack_top+0xfffdf6e8>
80004780:	00070793          	mv	a5,a4
80004784:	00279793          	slli	a5,a5,0x2
80004788:	00e787b3          	add	a5,a5,a4
8000478c:	00579793          	slli	a5,a5,0x5
80004790:	00f607b3          	add	a5,a2,a5
80004794:	0947a783          	lw	a5,148(a5)
80004798:	1ef68463          	beq	a3,a5,80004980 <API_AllocateTasks+0x2a8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:146

                // If the system has space to accept every task
                if(applications[i].numTasks <= API_GetSystemTasksSlots()){
8000479c:	800206b7          	lui	a3,0x80020
800047a0:	fec42703          	lw	a4,-20(s0)
800047a4:	00070793          	mv	a5,a4
800047a8:	00279793          	slli	a5,a5,0x2
800047ac:	00e787b3          	add	a5,a5,a4
800047b0:	00579793          	slli	a5,a5,0x5
800047b4:	13868713          	addi	a4,a3,312 # 80020138 <__stack_top+0xfffdf6e8>
800047b8:	00e787b3          	add	a5,a5,a4
800047bc:	0107a483          	lw	s1,16(a5)
800047c0:	450000ef          	jal	ra,80004c10 <API_GetSystemTasksSlots>
800047c4:	00050793          	mv	a5,a0
800047c8:	1a97ec63          	bltu	a5,s1,80004980 <API_AllocateTasks+0x2a8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:149
                    
                    // Iterates around each task of this application
                    for(j = 0; j < applications[i].numTasks; j++){
800047cc:	fe042423          	sw	zero,-24(s0)
800047d0:	13c0006f          	j	8000490c <API_AllocateTasks+0x234>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:152

                        for(;;){
                            addr = getNextPriorityAddr();
800047d4:	1dc000ef          	jal	ra,800049b0 <getNextPriorityAddr>
800047d8:	00050793          	mv	a5,a0
800047dc:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:153
                            slot = API_GetTaskSlotFromTile(addr, i, j);
800047e0:	fe442783          	lw	a5,-28(s0)
800047e4:	fec42703          	lw	a4,-20(s0)
800047e8:	fe842683          	lw	a3,-24(s0)
800047ec:	00068613          	mv	a2,a3
800047f0:	00070593          	mv	a1,a4
800047f4:	00078513          	mv	a0,a5
800047f8:	304000ef          	jal	ra,80004afc <API_GetTaskSlotFromTile>
800047fc:	00050793          	mv	a5,a0
80004800:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:154
                            if (slot != ERRO)
80004804:	fe042703          	lw	a4,-32(s0)
80004808:	fff00793          	li	a5,-1
8000480c:	00f71463          	bne	a4,a5,80004814 <API_AllocateTasks+0x13c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:152
                            addr = getNextPriorityAddr();
80004810:	fc5ff06f          	j	800047d4 <API_AllocateTasks+0xfc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:155
                                break;
80004814:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:157
                        }
                        applications[i].tasks[j].status = TASK_ALLOCATING;
80004818:	80020737          	lui	a4,0x80020
8000481c:	fe842783          	lw	a5,-24(s0)
80004820:	fec42683          	lw	a3,-20(s0)
80004824:	13870613          	addi	a2,a4,312 # 80020138 <__stack_top+0xfffdf6e8>
80004828:	00078713          	mv	a4,a5
8000482c:	00171713          	slli	a4,a4,0x1
80004830:	00f70733          	add	a4,a4,a5
80004834:	00271793          	slli	a5,a4,0x2
80004838:	00078713          	mv	a4,a5
8000483c:	00068793          	mv	a5,a3
80004840:	00279793          	slli	a5,a5,0x2
80004844:	00d787b3          	add	a5,a5,a3
80004848:	00579793          	slli	a5,a5,0x5
8000484c:	00f707b3          	add	a5,a4,a5
80004850:	00f607b3          	add	a5,a2,a5
80004854:	00300713          	li	a4,3
80004858:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:158
                        applications[i].tasks[j].addr = addr;
8000485c:	fe442603          	lw	a2,-28(s0)
80004860:	80020737          	lui	a4,0x80020
80004864:	fe842783          	lw	a5,-24(s0)
80004868:	fec42683          	lw	a3,-20(s0)
8000486c:	13870593          	addi	a1,a4,312 # 80020138 <__stack_top+0xfffdf6e8>
80004870:	00078713          	mv	a4,a5
80004874:	00171713          	slli	a4,a4,0x1
80004878:	00f70733          	add	a4,a4,a5
8000487c:	00271793          	slli	a5,a4,0x2
80004880:	00078713          	mv	a4,a5
80004884:	00068793          	mv	a5,a3
80004888:	00279793          	slli	a5,a5,0x2
8000488c:	00d787b3          	add	a5,a5,a3
80004890:	00579793          	slli	a5,a5,0x5
80004894:	00f707b3          	add	a5,a4,a5
80004898:	00f587b3          	add	a5,a1,a5
8000489c:	00c7ac23          	sw	a2,24(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:159
                        applications[i].tasks[j].slot = slot;
800048a0:	fe042603          	lw	a2,-32(s0)
800048a4:	80020737          	lui	a4,0x80020
800048a8:	fe842783          	lw	a5,-24(s0)
800048ac:	fec42683          	lw	a3,-20(s0)
800048b0:	13870593          	addi	a1,a4,312 # 80020138 <__stack_top+0xfffdf6e8>
800048b4:	00078713          	mv	a4,a5
800048b8:	00171713          	slli	a4,a4,0x1
800048bc:	00f70733          	add	a4,a4,a5
800048c0:	00271793          	slli	a5,a4,0x2
800048c4:	00078713          	mv	a4,a5
800048c8:	00068793          	mv	a5,a3
800048cc:	00279793          	slli	a5,a5,0x2
800048d0:	00d787b3          	add	a5,a5,a3
800048d4:	00579793          	slli	a5,a5,0x5
800048d8:	00f707b3          	add	a5,a4,a5
800048dc:	00f587b3          	add	a5,a1,a5
800048e0:	00c7ae23          	sw	a2,28(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:160
                        API_RepositoryAllocation(i, j, addr);
800048e4:	fec42783          	lw	a5,-20(s0)
800048e8:	fe842703          	lw	a4,-24(s0)
800048ec:	fe442683          	lw	a3,-28(s0)
800048f0:	00068613          	mv	a2,a3
800048f4:	00070593          	mv	a1,a4
800048f8:	00078513          	mv	a0,a5
800048fc:	420000ef          	jal	ra,80004d1c <API_RepositoryAllocation>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:149
                    for(j = 0; j < applications[i].numTasks; j++){
80004900:	fe842783          	lw	a5,-24(s0)
80004904:	00178793          	addi	a5,a5,1
80004908:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:149 (discriminator 1)
8000490c:	800206b7          	lui	a3,0x80020
80004910:	fec42703          	lw	a4,-20(s0)
80004914:	00070793          	mv	a5,a4
80004918:	00279793          	slli	a5,a5,0x2
8000491c:	00e787b3          	add	a5,a5,a4
80004920:	00579793          	slli	a5,a5,0x5
80004924:	13868713          	addi	a4,a3,312 # 80020138 <__stack_top+0xfffdf6e8>
80004928:	00e787b3          	add	a5,a5,a4
8000492c:	0107a703          	lw	a4,16(a5)
80004930:	fe842783          	lw	a5,-24(s0)
80004934:	eae7e0e3          	bltu	a5,a4,800047d4 <API_AllocateTasks+0xfc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:164
                    }

                    // Resets the lastStart
                    applications[i].lastStart = applications[i].nextRun;
80004938:	800207b7          	lui	a5,0x80020
8000493c:	fec42703          	lw	a4,-20(s0)
80004940:	13878693          	addi	a3,a5,312 # 80020138 <__stack_top+0xfffdf6e8>
80004944:	00070793          	mv	a5,a4
80004948:	00279793          	slli	a5,a5,0x2
8000494c:	00e787b3          	add	a5,a5,a4
80004950:	00579793          	slli	a5,a5,0x5
80004954:	00f687b3          	add	a5,a3,a5
80004958:	08c7a683          	lw	a3,140(a5)
8000495c:	800207b7          	lui	a5,0x80020
80004960:	fec42703          	lw	a4,-20(s0)
80004964:	13878613          	addi	a2,a5,312 # 80020138 <__stack_top+0xfffdf6e8>
80004968:	00070793          	mv	a5,a4
8000496c:	00279793          	slli	a5,a5,0x2
80004970:	00e787b3          	add	a5,a5,a4
80004974:	00579793          	slli	a5,a5,0x5
80004978:	00f607b3          	add	a5,a2,a5
8000497c:	08d7aa23          	sw	a3,148(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:138 (discriminator 2)
    for (i = 0; i < NUM_MAX_APPS; i++){
80004980:	fec42783          	lw	a5,-20(s0)
80004984:	00178793          	addi	a5,a5,1
80004988:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:138 (discriminator 1)
8000498c:	fec42703          	lw	a4,-20(s0)
80004990:	00b00793          	li	a5,11
80004994:	d6e7d2e3          	ble	a4,a5,800046f8 <API_AllocateTasks+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:170
                }
            }
        }
    }

    return;
80004998:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:171
}
8000499c:	02c12083          	lw	ra,44(sp)
800049a0:	02812403          	lw	s0,40(sp)
800049a4:	02412483          	lw	s1,36(sp)
800049a8:	03010113          	addi	sp,sp,48
800049ac:	00008067          	ret

800049b0 <getNextPriorityAddr>:
getNextPriorityAddr():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:174

// Gets the address of the next tile in the priority list 
unsigned int getNextPriorityAddr(){
800049b0:	fe010113          	addi	sp,sp,-32
800049b4:	00112e23          	sw	ra,28(sp)
800049b8:	00812c23          	sw	s0,24(sp)
800049bc:	00912a23          	sw	s1,20(sp)
800049c0:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:176
    int i;
    unsigned int addr = makeAddress(0,0);
800049c4:	00000593          	li	a1,0
800049c8:	00000513          	li	a0,0
800049cc:	d0dfe0ef          	jal	ra,800036d8 <makeAddress>
800049d0:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:179
    for(;;){
        // Checks if it's a valid address
        if (priorityMatrix[priorityPointer] != makeAddress(0,0)){
800049d4:	800217b7          	lui	a5,0x80021
800049d8:	9a87a703          	lw	a4,-1624(a5) # 800209a8 <__stack_top+0xfffdff58>
800049dc:	800207b7          	lui	a5,0x80020
800049e0:	00271713          	slli	a4,a4,0x2
800049e4:	11478793          	addi	a5,a5,276 # 80020114 <__stack_top+0xfffdf6c4>
800049e8:	00f707b3          	add	a5,a4,a5
800049ec:	0007a483          	lw	s1,0(a5)
800049f0:	00000593          	li	a1,0
800049f4:	00000513          	li	a0,0
800049f8:	ce1fe0ef          	jal	ra,800036d8 <makeAddress>
800049fc:	00050793          	mv	a5,a0
80004a00:	08f48a63          	beq	s1,a5,80004a94 <getNextPriorityAddr+0xe4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:180
            for(i = 0; i < NUM_MAX_TASKS; i++){
80004a04:	fe042623          	sw	zero,-20(s0)
80004a08:	0800006f          	j	80004a88 <getNextPriorityAddr+0xd8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:181
                if (Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] == NONE)
80004a0c:	fe842503          	lw	a0,-24(s0)
80004a10:	ce0fe0ef          	jal	ra,80002ef0 <getXpos>
80004a14:	00050493          	mv	s1,a0
80004a18:	fe842503          	lw	a0,-24(s0)
80004a1c:	d00fe0ef          	jal	ra,80002f1c <getYpos>
80004a20:	00050693          	mv	a3,a0
80004a24:	80021737          	lui	a4,0x80021
80004a28:	00048793          	mv	a5,s1
80004a2c:	00179793          	slli	a5,a5,0x1
80004a30:	009787b3          	add	a5,a5,s1
80004a34:	00d787b3          	add	a5,a5,a3
80004a38:	00279693          	slli	a3,a5,0x2
80004a3c:	fec42783          	lw	a5,-20(s0)
80004a40:	00f687b3          	add	a5,a3,a5
80004a44:	9ac70713          	addi	a4,a4,-1620 # 800209ac <__stack_top+0xfffdff5c>
80004a48:	00279793          	slli	a5,a5,0x2
80004a4c:	00f707b3          	add	a5,a4,a5
80004a50:	0087a703          	lw	a4,8(a5)
80004a54:	fff00793          	li	a5,-1
80004a58:	02f71263          	bne	a4,a5,80004a7c <getNextPriorityAddr+0xcc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:182
                    addr = priorityMatrix[priorityPointer];
80004a5c:	800217b7          	lui	a5,0x80021
80004a60:	9a87a703          	lw	a4,-1624(a5) # 800209a8 <__stack_top+0xfffdff58>
80004a64:	800207b7          	lui	a5,0x80020
80004a68:	00271713          	slli	a4,a4,0x2
80004a6c:	11478793          	addi	a5,a5,276 # 80020114 <__stack_top+0xfffdf6c4>
80004a70:	00f707b3          	add	a5,a4,a5
80004a74:	0007a783          	lw	a5,0(a5)
80004a78:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:180 (discriminator 2)
            for(i = 0; i < NUM_MAX_TASKS; i++){
80004a7c:	fec42783          	lw	a5,-20(s0)
80004a80:	00178793          	addi	a5,a5,1
80004a84:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:180 (discriminator 1)
80004a88:	fec42703          	lw	a4,-20(s0)
80004a8c:	00100793          	li	a5,1
80004a90:	f6e7dee3          	ble	a4,a5,80004a0c <getNextPriorityAddr+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:187
            }
        }

        // Increments the priorityPointer
        priorityPointer++;
80004a94:	800217b7          	lui	a5,0x80021
80004a98:	9a87a783          	lw	a5,-1624(a5) # 800209a8 <__stack_top+0xfffdff58>
80004a9c:	00178713          	addi	a4,a5,1
80004aa0:	800217b7          	lui	a5,0x80021
80004aa4:	9ae7a423          	sw	a4,-1624(a5) # 800209a8 <__stack_top+0xfffdff58>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:188
        if (priorityPointer == DIM_X*DIM_Y)
80004aa8:	800217b7          	lui	a5,0x80021
80004aac:	9a87a703          	lw	a4,-1624(a5) # 800209a8 <__stack_top+0xfffdff58>
80004ab0:	00900793          	li	a5,9
80004ab4:	00f71663          	bne	a4,a5,80004ac0 <getNextPriorityAddr+0x110>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:189
            priorityPointer = 0;
80004ab8:	800217b7          	lui	a5,0x80021
80004abc:	9a07a423          	sw	zero,-1624(a5) # 800209a8 <__stack_top+0xfffdff58>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:192

        // If we found a new valid address, return
        if( addr != makeAddress(0,0))
80004ac0:	00000593          	li	a1,0
80004ac4:	00000513          	li	a0,0
80004ac8:	c11fe0ef          	jal	ra,800036d8 <makeAddress>
80004acc:	00050713          	mv	a4,a0
80004ad0:	fe842783          	lw	a5,-24(s0)
80004ad4:	00e79463          	bne	a5,a4,80004adc <getNextPriorityAddr+0x12c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:179
        if (priorityMatrix[priorityPointer] != makeAddress(0,0)){
80004ad8:	efdff06f          	j	800049d4 <getNextPriorityAddr+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:193
            break;
80004adc:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:195
    }
    return addr;
80004ae0:	fe842783          	lw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:196
}
80004ae4:	00078513          	mv	a0,a5
80004ae8:	01c12083          	lw	ra,28(sp)
80004aec:	01812403          	lw	s0,24(sp)
80004af0:	01412483          	lw	s1,20(sp)
80004af4:	02010113          	addi	sp,sp,32
80004af8:	00008067          	ret

80004afc <API_GetTaskSlotFromTile>:
API_GetTaskSlotFromTile():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:199

// Gets a free slot from one given tile
unsigned int API_GetTaskSlotFromTile(unsigned int addr, unsigned int app, unsigned int task){
80004afc:	fd010113          	addi	sp,sp,-48
80004b00:	02112623          	sw	ra,44(sp)
80004b04:	02812423          	sw	s0,40(sp)
80004b08:	02912223          	sw	s1,36(sp)
80004b0c:	03212023          	sw	s2,32(sp)
80004b10:	03010413          	addi	s0,sp,48
80004b14:	fca42e23          	sw	a0,-36(s0)
80004b18:	fcb42c23          	sw	a1,-40(s0)
80004b1c:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:201
    int i;
    for(i = 0; i < NUM_MAX_TASKS; i++){
80004b20:	fe042623          	sw	zero,-20(s0)
80004b24:	0c00006f          	j	80004be4 <API_GetTaskSlotFromTile+0xe8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:202
        if(Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] == NONE){
80004b28:	fdc42503          	lw	a0,-36(s0)
80004b2c:	bc4fe0ef          	jal	ra,80002ef0 <getXpos>
80004b30:	00050493          	mv	s1,a0
80004b34:	fdc42503          	lw	a0,-36(s0)
80004b38:	be4fe0ef          	jal	ra,80002f1c <getYpos>
80004b3c:	00050693          	mv	a3,a0
80004b40:	80021737          	lui	a4,0x80021
80004b44:	00048793          	mv	a5,s1
80004b48:	00179793          	slli	a5,a5,0x1
80004b4c:	009787b3          	add	a5,a5,s1
80004b50:	00d787b3          	add	a5,a5,a3
80004b54:	00279693          	slli	a3,a5,0x2
80004b58:	fec42783          	lw	a5,-20(s0)
80004b5c:	00f687b3          	add	a5,a3,a5
80004b60:	9ac70713          	addi	a4,a4,-1620 # 800209ac <__stack_top+0xfffdff5c>
80004b64:	00279793          	slli	a5,a5,0x2
80004b68:	00f707b3          	add	a5,a4,a5
80004b6c:	0087a703          	lw	a4,8(a5)
80004b70:	fff00793          	li	a5,-1
80004b74:	06f71263          	bne	a4,a5,80004bd8 <API_GetTaskSlotFromTile+0xdc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:203
            Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] = (app << 16) | task;
80004b78:	fd842783          	lw	a5,-40(s0)
80004b7c:	01079493          	slli	s1,a5,0x10
80004b80:	fdc42503          	lw	a0,-36(s0)
80004b84:	b6cfe0ef          	jal	ra,80002ef0 <getXpos>
80004b88:	00050913          	mv	s2,a0
80004b8c:	fdc42503          	lw	a0,-36(s0)
80004b90:	b8cfe0ef          	jal	ra,80002f1c <getYpos>
80004b94:	00050613          	mv	a2,a0
80004b98:	fd442783          	lw	a5,-44(s0)
80004b9c:	00f4e733          	or	a4,s1,a5
80004ba0:	800216b7          	lui	a3,0x80021
80004ba4:	00090793          	mv	a5,s2
80004ba8:	00179793          	slli	a5,a5,0x1
80004bac:	012787b3          	add	a5,a5,s2
80004bb0:	00c787b3          	add	a5,a5,a2
80004bb4:	00279613          	slli	a2,a5,0x2
80004bb8:	fec42783          	lw	a5,-20(s0)
80004bbc:	00f607b3          	add	a5,a2,a5
80004bc0:	9ac68693          	addi	a3,a3,-1620 # 800209ac <__stack_top+0xfffdff5c>
80004bc4:	00279793          	slli	a5,a5,0x2
80004bc8:	00f687b3          	add	a5,a3,a5
80004bcc:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:204
            return i;
80004bd0:	fec42783          	lw	a5,-20(s0)
80004bd4:	0200006f          	j	80004bf4 <API_GetTaskSlotFromTile+0xf8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:201 (discriminator 2)
    for(i = 0; i < NUM_MAX_TASKS; i++){
80004bd8:	fec42783          	lw	a5,-20(s0)
80004bdc:	00178793          	addi	a5,a5,1
80004be0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:201 (discriminator 1)
80004be4:	fec42703          	lw	a4,-20(s0)
80004be8:	00100793          	li	a5,1
80004bec:	f2e7dee3          	ble	a4,a5,80004b28 <API_GetTaskSlotFromTile+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:207
        }
    }
    return ERRO;
80004bf0:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:208
}
80004bf4:	00078513          	mv	a0,a5
80004bf8:	02c12083          	lw	ra,44(sp)
80004bfc:	02812403          	lw	s0,40(sp)
80004c00:	02412483          	lw	s1,36(sp)
80004c04:	02012903          	lw	s2,32(sp)
80004c08:	03010113          	addi	sp,sp,48
80004c0c:	00008067          	ret

80004c10 <API_GetSystemTasksSlots>:
API_GetSystemTasksSlots():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:212


// Iterates around the system tiles to sum the amount of tasks slots available
unsigned int API_GetSystemTasksSlots(){
80004c10:	fe010113          	addi	sp,sp,-32
80004c14:	00112e23          	sw	ra,28(sp)
80004c18:	00812c23          	sw	s0,24(sp)
80004c1c:	00912a23          	sw	s1,20(sp)
80004c20:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:214
    int m, n, i, sum;
    sum = 0;
80004c24:	fe042023          	sw	zero,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:215
    for(m = 0; m < DIM_X; m++){
80004c28:	fe042623          	sw	zero,-20(s0)
80004c2c:	0c80006f          	j	80004cf4 <API_GetSystemTasksSlots+0xe4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:216
        for(n = 0; n < DIM_Y; n++){
80004c30:	fe042423          	sw	zero,-24(s0)
80004c34:	0a80006f          	j	80004cdc <API_GetSystemTasksSlots+0xcc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:217
            if(makeAddress(m,n) != makeAddress(0,0)){
80004c38:	fec42783          	lw	a5,-20(s0)
80004c3c:	fe842703          	lw	a4,-24(s0)
80004c40:	00070593          	mv	a1,a4
80004c44:	00078513          	mv	a0,a5
80004c48:	a91fe0ef          	jal	ra,800036d8 <makeAddress>
80004c4c:	00050493          	mv	s1,a0
80004c50:	00000593          	li	a1,0
80004c54:	00000513          	li	a0,0
80004c58:	a81fe0ef          	jal	ra,800036d8 <makeAddress>
80004c5c:	00050793          	mv	a5,a0
80004c60:	06f48863          	beq	s1,a5,80004cd0 <API_GetSystemTasksSlots+0xc0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:218
                for(i = 0; i < NUM_MAX_TASKS; i++){
80004c64:	fe042223          	sw	zero,-28(s0)
80004c68:	05c0006f          	j	80004cc4 <API_GetSystemTasksSlots+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:219
                    if(Tiles[m][n].AppTask[i] == NONE){
80004c6c:	800216b7          	lui	a3,0x80021
80004c70:	fec42703          	lw	a4,-20(s0)
80004c74:	00070793          	mv	a5,a4
80004c78:	00179793          	slli	a5,a5,0x1
80004c7c:	00e787b3          	add	a5,a5,a4
80004c80:	fe842703          	lw	a4,-24(s0)
80004c84:	00e787b3          	add	a5,a5,a4
80004c88:	00279713          	slli	a4,a5,0x2
80004c8c:	fe442783          	lw	a5,-28(s0)
80004c90:	00f707b3          	add	a5,a4,a5
80004c94:	9ac68713          	addi	a4,a3,-1620 # 800209ac <__stack_top+0xfffdff5c>
80004c98:	00279793          	slli	a5,a5,0x2
80004c9c:	00f707b3          	add	a5,a4,a5
80004ca0:	0087a703          	lw	a4,8(a5)
80004ca4:	fff00793          	li	a5,-1
80004ca8:	00f71863          	bne	a4,a5,80004cb8 <API_GetSystemTasksSlots+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:220
                        sum++;
80004cac:	fe042783          	lw	a5,-32(s0)
80004cb0:	00178793          	addi	a5,a5,1
80004cb4:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:218 (discriminator 2)
                for(i = 0; i < NUM_MAX_TASKS; i++){
80004cb8:	fe442783          	lw	a5,-28(s0)
80004cbc:	00178793          	addi	a5,a5,1
80004cc0:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:218 (discriminator 1)
80004cc4:	fe442703          	lw	a4,-28(s0)
80004cc8:	00100793          	li	a5,1
80004ccc:	fae7d0e3          	ble	a4,a5,80004c6c <API_GetSystemTasksSlots+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:216 (discriminator 2)
        for(n = 0; n < DIM_Y; n++){
80004cd0:	fe842783          	lw	a5,-24(s0)
80004cd4:	00178793          	addi	a5,a5,1
80004cd8:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:216 (discriminator 1)
80004cdc:	fe842703          	lw	a4,-24(s0)
80004ce0:	00200793          	li	a5,2
80004ce4:	f4e7dae3          	ble	a4,a5,80004c38 <API_GetSystemTasksSlots+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:215 (discriminator 2)
    for(m = 0; m < DIM_X; m++){
80004ce8:	fec42783          	lw	a5,-20(s0)
80004cec:	00178793          	addi	a5,a5,1
80004cf0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:215 (discriminator 1)
80004cf4:	fec42703          	lw	a4,-20(s0)
80004cf8:	00200793          	li	a5,2
80004cfc:	f2e7dae3          	ble	a4,a5,80004c30 <API_GetSystemTasksSlots+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:226
                    }
                }
            }
        }
    }
    return sum;
80004d00:	fe042783          	lw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:227
}
80004d04:	00078513          	mv	a0,a5
80004d08:	01c12083          	lw	ra,28(sp)
80004d0c:	01812403          	lw	s0,24(sp)
80004d10:	01412483          	lw	s1,20(sp)
80004d14:	02010113          	addi	sp,sp,32
80004d18:	00008067          	ret

80004d1c <API_RepositoryAllocation>:
API_RepositoryAllocation():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:229

void API_RepositoryAllocation(unsigned int app, unsigned int task, unsigned int dest_addr){
80004d1c:	fd010113          	addi	sp,sp,-48
80004d20:	02112623          	sw	ra,44(sp)
80004d24:	02812423          	sw	s0,40(sp)
80004d28:	03010413          	addi	s0,sp,48
80004d2c:	fca42e23          	sw	a0,-36(s0)
80004d30:	fcb42c23          	sw	a1,-40(s0)
80004d34:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:232
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80004d38:	535000ef          	jal	ra,80005a6c <API_GetServiceSlot>
80004d3c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:233
        if(mySlot == PIPE_FULL) vTaskDelay(1);
80004d40:	fec42703          	lw	a4,-20(s0)
80004d44:	fdfe07b7          	lui	a5,0xfdfe0
80004d48:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f3ad>
80004d4c:	00f71663          	bne	a4,a5,80004d58 <API_RepositoryAllocation+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:233 (discriminator 1)
80004d50:	00100513          	li	a0,1
80004d54:	bf8fd0ef          	jal	ra,8000214c <vTaskDelay>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:234
    }while(mySlot == PIPE_FULL);
80004d58:	fec42703          	lw	a4,-20(s0)
80004d5c:	fdfe07b7          	lui	a5,0xfdfe0
80004d60:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f3ad>
80004d64:	fcf70ae3          	beq	a4,a5,80004d38 <API_RepositoryAllocation+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:237
    //printsv("I got a free service slot!! -> ", mySlot);

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80004d68:	8001f7b7          	lui	a5,0x8001f
80004d6c:	fec42703          	lw	a4,-20(s0)
80004d70:	69c78693          	addi	a3,a5,1692 # 8001f69c <__stack_top+0xfffdec4c>
80004d74:	00070793          	mv	a5,a4
80004d78:	00479793          	slli	a5,a5,0x4
80004d7c:	40e787b3          	sub	a5,a5,a4
80004d80:	00279793          	slli	a5,a5,0x2
80004d84:	00f687b3          	add	a5,a3,a5
80004d88:	feff0737          	lui	a4,0xfeff0
80004d8c:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efaf4ae>
80004d90:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:239

    ServicePipe[mySlot].header.header           = makeAddress(0, 0) | PERIPH_SOUTH;
80004d94:	00000593          	li	a1,0
80004d98:	00000513          	li	a0,0
80004d9c:	93dfe0ef          	jal	ra,800036d8 <makeAddress>
80004da0:	00050713          	mv	a4,a0
80004da4:	000407b7          	lui	a5,0x40
80004da8:	00f766b3          	or	a3,a4,a5
80004dac:	8001f7b7          	lui	a5,0x8001f
80004db0:	fec42703          	lw	a4,-20(s0)
80004db4:	69c78613          	addi	a2,a5,1692 # 8001f69c <__stack_top+0xfffdec4c>
80004db8:	00070793          	mv	a5,a4
80004dbc:	00479793          	slli	a5,a5,0x4
80004dc0:	40e787b3          	sub	a5,a5,a4
80004dc4:	00279793          	slli	a5,a5,0x2
80004dc8:	00f607b3          	add	a5,a2,a5
80004dcc:	00d7a423          	sw	a3,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:240
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80004dd0:	8001f7b7          	lui	a5,0x8001f
80004dd4:	fec42703          	lw	a4,-20(s0)
80004dd8:	69c78693          	addi	a3,a5,1692 # 8001f69c <__stack_top+0xfffdec4c>
80004ddc:	00070793          	mv	a5,a4
80004de0:	00479793          	slli	a5,a5,0x4
80004de4:	40e787b3          	sub	a5,a5,a4
80004de8:	00279793          	slli	a5,a5,0x2
80004dec:	00f687b3          	add	a5,a3,a5
80004df0:	00b00713          	li	a4,11
80004df4:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:241
    ServicePipe[mySlot].header.service          = TASK_ALLOCATION_SEND;
80004df8:	8001f7b7          	lui	a5,0x8001f
80004dfc:	fec42703          	lw	a4,-20(s0)
80004e00:	69c78693          	addi	a3,a5,1692 # 8001f69c <__stack_top+0xfffdec4c>
80004e04:	00070793          	mv	a5,a4
80004e08:	00479793          	slli	a5,a5,0x4
80004e0c:	40e787b3          	sub	a5,a5,a4
80004e10:	00279793          	slli	a5,a5,0x2
80004e14:	00f687b3          	add	a5,a3,a5
80004e18:	03000713          	li	a4,48
80004e1c:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:242
    ServicePipe[mySlot].header.task_id          = task;
80004e20:	8001f7b7          	lui	a5,0x8001f
80004e24:	fec42703          	lw	a4,-20(s0)
80004e28:	69c78693          	addi	a3,a5,1692 # 8001f69c <__stack_top+0xfffdec4c>
80004e2c:	00070793          	mv	a5,a4
80004e30:	00479793          	slli	a5,a5,0x4
80004e34:	40e787b3          	sub	a5,a5,a4
80004e38:	00279793          	slli	a5,a5,0x2
80004e3c:	00f687b3          	add	a5,a3,a5
80004e40:	fd842703          	lw	a4,-40(s0)
80004e44:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:243
    ServicePipe[mySlot].header.task_app_id      = app;
80004e48:	8001f7b7          	lui	a5,0x8001f
80004e4c:	fec42703          	lw	a4,-20(s0)
80004e50:	69c78693          	addi	a3,a5,1692 # 8001f69c <__stack_top+0xfffdec4c>
80004e54:	00070793          	mv	a5,a4
80004e58:	00479793          	slli	a5,a5,0x4
80004e5c:	40e787b3          	sub	a5,a5,a4
80004e60:	00279793          	slli	a5,a5,0x2
80004e64:	00f687b3          	add	a5,a3,a5
80004e68:	fdc42703          	lw	a4,-36(s0)
80004e6c:	02e7a223          	sw	a4,36(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:244
    ServicePipe[mySlot].header.task_dest_addr   = dest_addr;
80004e70:	8001f7b7          	lui	a5,0x8001f
80004e74:	fec42703          	lw	a4,-20(s0)
80004e78:	69c78693          	addi	a3,a5,1692 # 8001f69c <__stack_top+0xfffdec4c>
80004e7c:	00070793          	mv	a5,a4
80004e80:	00479793          	slli	a5,a5,0x4
80004e84:	40e787b3          	sub	a5,a5,a4
80004e88:	00279793          	slli	a5,a5,0x2
80004e8c:	00f687b3          	add	a5,a3,a5
80004e90:	fd442703          	lw	a4,-44(s0)
80004e94:	02e7ac23          	sw	a4,56(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:246

    API_PushSendQueue(SERVICE, mySlot);
80004e98:	fec42583          	lw	a1,-20(s0)
80004e9c:	10100537          	lui	a0,0x10100
80004ea0:	879fe0ef          	jal	ra,80003718 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:247
    return;    
80004ea4:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:248
}
80004ea8:	02c12083          	lw	ra,44(sp)
80004eac:	02812403          	lw	s0,40(sp)
80004eb0:	03010113          	addi	sp,sp,48
80004eb4:	00008067          	ret

80004eb8 <API_TaskAllocated>:
API_TaskAllocated():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:250

void API_TaskAllocated(unsigned int task_id, unsigned int app_id){
80004eb8:	fd010113          	addi	sp,sp,-48
80004ebc:	02112623          	sw	ra,44(sp)
80004ec0:	02812423          	sw	s0,40(sp)
80004ec4:	03010413          	addi	s0,sp,48
80004ec8:	fca42e23          	sw	a0,-36(s0)
80004ecc:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:252
    unsigned int i;
    applications[app_id].tasks[task_id].status = TASK_ALLOCATED;
80004ed0:	80020737          	lui	a4,0x80020
80004ed4:	fdc42783          	lw	a5,-36(s0)
80004ed8:	fd842683          	lw	a3,-40(s0)
80004edc:	13870613          	addi	a2,a4,312 # 80020138 <__stack_top+0xfffdf6e8>
80004ee0:	00078713          	mv	a4,a5
80004ee4:	00171713          	slli	a4,a4,0x1
80004ee8:	00f70733          	add	a4,a4,a5
80004eec:	00271793          	slli	a5,a4,0x2
80004ef0:	00078713          	mv	a4,a5
80004ef4:	00068793          	mv	a5,a3
80004ef8:	00279793          	slli	a5,a5,0x2
80004efc:	00d787b3          	add	a5,a5,a3
80004f00:	00579793          	slli	a5,a5,0x5
80004f04:	00f707b3          	add	a5,a4,a5
80004f08:	00f607b3          	add	a5,a2,a5
80004f0c:	00400713          	li	a4,4
80004f10:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:254

    for(i = 0; i < applications[app_id].numTasks; i++){
80004f14:	fe042623          	sw	zero,-20(s0)
80004f18:	0580006f          	j	80004f70 <API_TaskAllocated+0xb8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:255
        if(applications[app_id].tasks[i].status != TASK_ALLOCATED){
80004f1c:	80020737          	lui	a4,0x80020
80004f20:	fec42783          	lw	a5,-20(s0)
80004f24:	fd842683          	lw	a3,-40(s0)
80004f28:	13870613          	addi	a2,a4,312 # 80020138 <__stack_top+0xfffdf6e8>
80004f2c:	00078713          	mv	a4,a5
80004f30:	00171713          	slli	a4,a4,0x1
80004f34:	00f70733          	add	a4,a4,a5
80004f38:	00271793          	slli	a5,a4,0x2
80004f3c:	00078713          	mv	a4,a5
80004f40:	00068793          	mv	a5,a3
80004f44:	00279793          	slli	a5,a5,0x2
80004f48:	00d787b3          	add	a5,a5,a3
80004f4c:	00579793          	slli	a5,a5,0x5
80004f50:	00f707b3          	add	a5,a4,a5
80004f54:	00f607b3          	add	a5,a2,a5
80004f58:	0147a703          	lw	a4,20(a5)
80004f5c:	00400793          	li	a5,4
80004f60:	06f71c63          	bne	a4,a5,80004fd8 <API_TaskAllocated+0x120>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:254 (discriminator 2)
    for(i = 0; i < applications[app_id].numTasks; i++){
80004f64:	fec42783          	lw	a5,-20(s0)
80004f68:	00178793          	addi	a5,a5,1
80004f6c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:254 (discriminator 1)
80004f70:	800206b7          	lui	a3,0x80020
80004f74:	fd842703          	lw	a4,-40(s0)
80004f78:	00070793          	mv	a5,a4
80004f7c:	00279793          	slli	a5,a5,0x2
80004f80:	00e787b3          	add	a5,a5,a4
80004f84:	00579793          	slli	a5,a5,0x5
80004f88:	13868713          	addi	a4,a3,312 # 80020138 <__stack_top+0xfffdf6e8>
80004f8c:	00e787b3          	add	a5,a5,a4
80004f90:	0107a783          	lw	a5,16(a5)
80004f94:	fec42703          	lw	a4,-20(s0)
80004f98:	f8f762e3          	bltu	a4,a5,80004f1c <API_TaskAllocated+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:259
            return;
        }
    }
    printsvsv("Application ", app_id, " is allocated!", 1);
80004f9c:	fd842703          	lw	a4,-40(s0)
80004fa0:	00100693          	li	a3,1
80004fa4:	800067b7          	lui	a5,0x80006
80004fa8:	2d878613          	addi	a2,a5,728 # 800062d8 <__stack_top+0xfffc5888>
80004fac:	00070593          	mv	a1,a4
80004fb0:	800067b7          	lui	a5,0x80006
80004fb4:	2e878513          	addi	a0,a5,744 # 800062e8 <__stack_top+0xfffc5898>
80004fb8:	ed9fd0ef          	jal	ra,80002e90 <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:260
    API_ApplicationStart(app_id);
80004fbc:	fd842503          	lw	a0,-40(s0)
80004fc0:	02c000ef          	jal	ra,80004fec <API_ApplicationStart>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:261
    prints("\tStart command sent to every task.\n");
80004fc4:	800067b7          	lui	a5,0x80006
80004fc8:	2f878513          	addi	a0,a5,760 # 800062f8 <__stack_top+0xfffc58a8>
80004fcc:	dd1fd0ef          	jal	ra,80002d9c <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:262
    return;
80004fd0:	00000013          	nop
80004fd4:	0080006f          	j	80004fdc <API_TaskAllocated+0x124>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:256
            return;
80004fd8:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:263
}
80004fdc:	02c12083          	lw	ra,44(sp)
80004fe0:	02812403          	lw	s0,40(sp)
80004fe4:	03010113          	addi	sp,sp,48
80004fe8:	00008067          	ret

80004fec <API_ApplicationStart>:
API_ApplicationStart():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:265

void API_ApplicationStart(unsigned int app_id){
80004fec:	fd010113          	addi	sp,sp,-48
80004ff0:	02112623          	sw	ra,44(sp)
80004ff4:	02812423          	sw	s0,40(sp)
80004ff8:	03010413          	addi	s0,sp,48
80004ffc:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:268
    unsigned int i, j;
    unsigned int mySlot;
    for(i = 0; i < applications[app_id].numTasks; i++){
80005000:	fe042623          	sw	zero,-20(s0)
80005004:	2680006f          	j	8000526c <API_ApplicationStart+0x280>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:270
        do{
            mySlot = API_GetMessageSlot();
80005008:	119000ef          	jal	ra,80005920 <API_GetMessageSlot>
8000500c:	fea42223          	sw	a0,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:271
            if(mySlot == PIPE_FULL){ 
80005010:	fe442703          	lw	a4,-28(s0)
80005014:	fdfe07b7          	lui	a5,0xfdfe0
80005018:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f3ad>
8000501c:	00f71663          	bne	a4,a5,80005028 <API_ApplicationStart+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:272
                vTaskDelay(1);
80005020:	00100513          	li	a0,1
80005024:	928fd0ef          	jal	ra,8000214c <vTaskDelay>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:275
                //prints("pipe full!\n");
            }
        }while(mySlot == PIPE_FULL);
80005028:	fe442703          	lw	a4,-28(s0)
8000502c:	fdfe07b7          	lui	a5,0xfdfe0
80005030:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f3ad>
80005034:	fcf70ae3          	beq	a4,a5,80005008 <API_ApplicationStart+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:277

        MessagePipe[mySlot].holder = PIPE_SYS_HOLDER;
80005038:	800207b7          	lui	a5,0x80020
8000503c:	fe442683          	lw	a3,-28(s0)
80005040:	80078713          	addi	a4,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
80005044:	24400793          	li	a5,580
80005048:	02f687b3          	mul	a5,a3,a5
8000504c:	00f707b3          	add	a5,a4,a5
80005050:	feff0737          	lui	a4,0xfeff0
80005054:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efaf4ae>
80005058:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:279

        MessagePipe[mySlot].header.header           = applications[app_id].tasks[i].addr;
8000505c:	80020737          	lui	a4,0x80020
80005060:	fec42783          	lw	a5,-20(s0)
80005064:	fdc42683          	lw	a3,-36(s0)
80005068:	13870613          	addi	a2,a4,312 # 80020138 <__stack_top+0xfffdf6e8>
8000506c:	00078713          	mv	a4,a5
80005070:	00171713          	slli	a4,a4,0x1
80005074:	00f70733          	add	a4,a4,a5
80005078:	00271793          	slli	a5,a4,0x2
8000507c:	00078713          	mv	a4,a5
80005080:	00068793          	mv	a5,a3
80005084:	00279793          	slli	a5,a5,0x2
80005088:	00d787b3          	add	a5,a5,a3
8000508c:	00579793          	slli	a5,a5,0x5
80005090:	00f707b3          	add	a5,a4,a5
80005094:	00f607b3          	add	a5,a2,a5
80005098:	0187a703          	lw	a4,24(a5)
8000509c:	800207b7          	lui	a5,0x80020
800050a0:	fe442603          	lw	a2,-28(s0)
800050a4:	80078693          	addi	a3,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
800050a8:	24400793          	li	a5,580
800050ac:	02f607b3          	mul	a5,a2,a5
800050b0:	00f687b3          	add	a5,a3,a5
800050b4:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:280
        MessagePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE + applications[app_id].numTasks + 1;
800050b8:	800206b7          	lui	a3,0x80020
800050bc:	fdc42703          	lw	a4,-36(s0)
800050c0:	00070793          	mv	a5,a4
800050c4:	00279793          	slli	a5,a5,0x2
800050c8:	00e787b3          	add	a5,a5,a4
800050cc:	00579793          	slli	a5,a5,0x5
800050d0:	13868713          	addi	a4,a3,312 # 80020138 <__stack_top+0xfffdf6e8>
800050d4:	00e787b3          	add	a5,a5,a4
800050d8:	0107a783          	lw	a5,16(a5)
800050dc:	00c78713          	addi	a4,a5,12
800050e0:	800207b7          	lui	a5,0x80020
800050e4:	fe442603          	lw	a2,-28(s0)
800050e8:	80078693          	addi	a3,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
800050ec:	24400793          	li	a5,580
800050f0:	02f607b3          	mul	a5,a2,a5
800050f4:	00f687b3          	add	a5,a3,a5
800050f8:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:281
        MessagePipe[mySlot].header.service          = TASK_START;
800050fc:	800207b7          	lui	a5,0x80020
80005100:	fe442683          	lw	a3,-28(s0)
80005104:	80078713          	addi	a4,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
80005108:	24400793          	li	a5,580
8000510c:	02f687b3          	mul	a5,a3,a5
80005110:	00f707b3          	add	a5,a4,a5
80005114:	40000713          	li	a4,1024
80005118:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:282
        MessagePipe[mySlot].header.task_id          = i;
8000511c:	800207b7          	lui	a5,0x80020
80005120:	fe442683          	lw	a3,-28(s0)
80005124:	80078713          	addi	a4,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
80005128:	24400793          	li	a5,580
8000512c:	02f687b3          	mul	a5,a3,a5
80005130:	00f707b3          	add	a5,a4,a5
80005134:	fec42703          	lw	a4,-20(s0)
80005138:	00e7ac23          	sw	a4,24(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:283
        MessagePipe[mySlot].header.task_app_id      = app_id;
8000513c:	800207b7          	lui	a5,0x80020
80005140:	fe442683          	lw	a3,-28(s0)
80005144:	80078713          	addi	a4,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
80005148:	24400793          	li	a5,580
8000514c:	02f687b3          	mul	a5,a3,a5
80005150:	00f707b3          	add	a5,a4,a5
80005154:	fdc42703          	lw	a4,-36(s0)
80005158:	02e7a423          	sw	a4,40(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:284
        MessagePipe[mySlot].msg.length              = applications[app_id].numTasks;
8000515c:	800206b7          	lui	a3,0x80020
80005160:	fdc42703          	lw	a4,-36(s0)
80005164:	00070793          	mv	a5,a4
80005168:	00279793          	slli	a5,a5,0x2
8000516c:	00e787b3          	add	a5,a5,a4
80005170:	00579793          	slli	a5,a5,0x5
80005174:	13868713          	addi	a4,a3,312 # 80020138 <__stack_top+0xfffdf6e8>
80005178:	00e787b3          	add	a5,a5,a4
8000517c:	0107a703          	lw	a4,16(a5)
80005180:	800207b7          	lui	a5,0x80020
80005184:	fe442603          	lw	a2,-28(s0)
80005188:	24400693          	li	a3,580
8000518c:	02d606b3          	mul	a3,a2,a3
80005190:	80078793          	addi	a5,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
80005194:	00f687b3          	add	a5,a3,a5
80005198:	04e7a023          	sw	a4,64(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:285
        for(j = 0; j < applications[app_id].numTasks; j++){
8000519c:	fe042423          	sw	zero,-24(s0)
800051a0:	0880006f          	j	80005228 <API_ApplicationStart+0x23c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:286 (discriminator 3)
            MessagePipe[mySlot].msg.msg[j]          = applications[app_id].tasks[j].addr;
800051a4:	80020737          	lui	a4,0x80020
800051a8:	fe842783          	lw	a5,-24(s0)
800051ac:	fdc42683          	lw	a3,-36(s0)
800051b0:	13870613          	addi	a2,a4,312 # 80020138 <__stack_top+0xfffdf6e8>
800051b4:	00078713          	mv	a4,a5
800051b8:	00171713          	slli	a4,a4,0x1
800051bc:	00f70733          	add	a4,a4,a5
800051c0:	00271793          	slli	a5,a4,0x2
800051c4:	00078713          	mv	a4,a5
800051c8:	00068793          	mv	a5,a3
800051cc:	00279793          	slli	a5,a5,0x2
800051d0:	00d787b3          	add	a5,a5,a3
800051d4:	00579793          	slli	a5,a5,0x5
800051d8:	00f707b3          	add	a5,a4,a5
800051dc:	00f607b3          	add	a5,a2,a5
800051e0:	0187a683          	lw	a3,24(a5)
800051e4:	80020637          	lui	a2,0x80020
800051e8:	fe442703          	lw	a4,-28(s0)
800051ec:	00070793          	mv	a5,a4
800051f0:	00379793          	slli	a5,a5,0x3
800051f4:	00e787b3          	add	a5,a5,a4
800051f8:	00479793          	slli	a5,a5,0x4
800051fc:	00e787b3          	add	a5,a5,a4
80005200:	fe842703          	lw	a4,-24(s0)
80005204:	00e787b3          	add	a5,a5,a4
80005208:	01078793          	addi	a5,a5,16
8000520c:	80060713          	addi	a4,a2,-2048 # 8001f800 <__stack_top+0xfffdedb0>
80005210:	00279793          	slli	a5,a5,0x2
80005214:	00f707b3          	add	a5,a4,a5
80005218:	00d7a223          	sw	a3,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:285 (discriminator 3)
        for(j = 0; j < applications[app_id].numTasks; j++){
8000521c:	fe842783          	lw	a5,-24(s0)
80005220:	00178793          	addi	a5,a5,1
80005224:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:285 (discriminator 1)
80005228:	800206b7          	lui	a3,0x80020
8000522c:	fdc42703          	lw	a4,-36(s0)
80005230:	00070793          	mv	a5,a4
80005234:	00279793          	slli	a5,a5,0x2
80005238:	00e787b3          	add	a5,a5,a4
8000523c:	00579793          	slli	a5,a5,0x5
80005240:	13868713          	addi	a4,a3,312 # 80020138 <__stack_top+0xfffdf6e8>
80005244:	00e787b3          	add	a5,a5,a4
80005248:	0107a783          	lw	a5,16(a5)
8000524c:	fe842703          	lw	a4,-24(s0)
80005250:	f4f76ae3          	bltu	a4,a5,800051a4 <API_ApplicationStart+0x1b8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:289 (discriminator 2)
            //printsvsv("task ", j, " addr ", MessagePipe[mySlot].msg.msg[j]);
        }
        API_PushSendQueue(MESSAGE, mySlot);
80005254:	fe442583          	lw	a1,-28(s0)
80005258:	20200537          	lui	a0,0x20200
8000525c:	cbcfe0ef          	jal	ra,80003718 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:268 (discriminator 2)
    for(i = 0; i < applications[app_id].numTasks; i++){
80005260:	fec42783          	lw	a5,-20(s0)
80005264:	00178793          	addi	a5,a5,1
80005268:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:268 (discriminator 1)
8000526c:	800206b7          	lui	a3,0x80020
80005270:	fdc42703          	lw	a4,-36(s0)
80005274:	00070793          	mv	a5,a4
80005278:	00279793          	slli	a5,a5,0x2
8000527c:	00e787b3          	add	a5,a5,a4
80005280:	00579793          	slli	a5,a5,0x5
80005284:	13868713          	addi	a4,a3,312 # 80020138 <__stack_top+0xfffdf6e8>
80005288:	00e787b3          	add	a5,a5,a4
8000528c:	0107a783          	lw	a5,16(a5)
80005290:	fec42703          	lw	a4,-20(s0)
80005294:	d6f76ae3          	bltu	a4,a5,80005008 <API_ApplicationStart+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:291
    }
    prints("Terminei API_ApplicationStart\n");
80005298:	800067b7          	lui	a5,0x80006
8000529c:	31c78513          	addi	a0,a5,796 # 8000631c <__stack_top+0xfffc58cc>
800052a0:	afdfd0ef          	jal	ra,80002d9c <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:292
}
800052a4:	00000013          	nop
800052a8:	02c12083          	lw	ra,44(sp)
800052ac:	02812403          	lw	s0,40(sp)
800052b0:	03010113          	addi	sp,sp,48
800052b4:	00008067          	ret

800052b8 <API_TaskListInit>:
API_TaskListInit():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:13
#include "chronos.h"

// Stores information about each running task
//extern volatile Task TaskList[ NUM_MAX_TASKS ];

void API_TaskListInit(){
800052b8:	fe010113          	addi	sp,sp,-32
800052bc:	00812e23          	sw	s0,28(sp)
800052c0:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:15
    unsigned int i, j;
    for (i = 0; i < NUM_MAX_TASKS; i++){
800052c4:	fe042623          	sw	zero,-20(s0)
800052c8:	0880006f          	j	80005350 <API_TaskListInit+0x98>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:16
        TaskList[i].status = TASK_SLOT_EMPTY;
800052cc:	800216b7          	lui	a3,0x80021
800052d0:	fec42703          	lw	a4,-20(s0)
800052d4:	00070793          	mv	a5,a4
800052d8:	00479793          	slli	a5,a5,0x4
800052dc:	40e787b3          	sub	a5,a5,a4
800052e0:	00379793          	slli	a5,a5,0x3
800052e4:	8b868713          	addi	a4,a3,-1864 # 800208b8 <__stack_top+0xfffdfe68>
800052e8:	00e787b3          	add	a5,a5,a4
800052ec:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:17
        for (j = 0; j < NUM_MAX_APP_TASKS; j++){
800052f0:	fe042423          	sw	zero,-24(s0)
800052f4:	0440006f          	j	80005338 <API_TaskListInit+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:18 (discriminator 3)
            TaskList[i].PendingReq[j] = FALSE;
800052f8:	800216b7          	lui	a3,0x80021
800052fc:	fec42703          	lw	a4,-20(s0)
80005300:	00070793          	mv	a5,a4
80005304:	00479793          	slli	a5,a5,0x4
80005308:	40e787b3          	sub	a5,a5,a4
8000530c:	00179793          	slli	a5,a5,0x1
80005310:	fe842703          	lw	a4,-24(s0)
80005314:	00e787b3          	add	a5,a5,a4
80005318:	00878793          	addi	a5,a5,8
8000531c:	8b868713          	addi	a4,a3,-1864 # 800208b8 <__stack_top+0xfffdfe68>
80005320:	00279793          	slli	a5,a5,0x2
80005324:	00f707b3          	add	a5,a4,a5
80005328:	0007a223          	sw	zero,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:17 (discriminator 3)
        for (j = 0; j < NUM_MAX_APP_TASKS; j++){
8000532c:	fe842783          	lw	a5,-24(s0)
80005330:	00178793          	addi	a5,a5,1
80005334:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:17 (discriminator 1)
80005338:	fe842703          	lw	a4,-24(s0)
8000533c:	00900793          	li	a5,9
80005340:	fae7fce3          	bleu	a4,a5,800052f8 <API_TaskListInit+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 2)
    for (i = 0; i < NUM_MAX_TASKS; i++){
80005344:	fec42783          	lw	a5,-20(s0)
80005348:	00178793          	addi	a5,a5,1
8000534c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 1)
80005350:	fec42703          	lw	a4,-20(s0)
80005354:	00100793          	li	a5,1
80005358:	f6e7fae3          	bleu	a4,a5,800052cc <API_TaskListInit+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:21
        }
    }
    return;
8000535c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:22
}
80005360:	01c12403          	lw	s0,28(sp)
80005364:	02010113          	addi	sp,sp,32
80005368:	00008067          	ret

8000536c <API_GetCurrentTaskSlot>:
API_GetCurrentTaskSlot():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:24

unsigned int API_GetCurrentTaskSlot(){
8000536c:	fe010113          	addi	sp,sp,-32
80005370:	00112e23          	sw	ra,28(sp)
80005374:	00812c23          	sw	s0,24(sp)
80005378:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:26
    // The handle of the currently running ( calling ) task on the kernel.
    TaskHandle_t xHandle = xTaskGetCurrentTaskHandle();
8000537c:	831fd0ef          	jal	ra,80002bac <xTaskGetCurrentTaskHandle>
80005380:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:27
    unsigned int i = 0;
80005384:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:28
    for ( i = 0 ; i < NUM_MAX_TASKS ; i++ ) {
80005388:	fe042623          	sw	zero,-20(s0)
8000538c:	0440006f          	j	800053d0 <API_GetCurrentTaskSlot+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:29
        if ( TaskList[ i ].TaskHandler == xHandle ) {
80005390:	800217b7          	lui	a5,0x80021
80005394:	fec42703          	lw	a4,-20(s0)
80005398:	8b878693          	addi	a3,a5,-1864 # 800208b8 <__stack_top+0xfffdfe68>
8000539c:	00070793          	mv	a5,a4
800053a0:	00479793          	slli	a5,a5,0x4
800053a4:	40e787b3          	sub	a5,a5,a4
800053a8:	00379793          	slli	a5,a5,0x3
800053ac:	00f687b3          	add	a5,a3,a5
800053b0:	00c7a783          	lw	a5,12(a5)
800053b4:	fe842703          	lw	a4,-24(s0)
800053b8:	00f71663          	bne	a4,a5,800053c4 <API_GetCurrentTaskSlot+0x58>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:30
            return( i );
800053bc:	fec42783          	lw	a5,-20(s0)
800053c0:	0200006f          	j	800053e0 <API_GetCurrentTaskSlot+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:28 (discriminator 2)
    for ( i = 0 ; i < NUM_MAX_TASKS ; i++ ) {
800053c4:	fec42783          	lw	a5,-20(s0)
800053c8:	00178793          	addi	a5,a5,1
800053cc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:28 (discriminator 1)
800053d0:	fec42703          	lw	a4,-20(s0)
800053d4:	00100793          	li	a5,1
800053d8:	fae7fce3          	bleu	a4,a5,80005390 <API_GetCurrentTaskSlot+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:33
        }
    }
    return ERRO;
800053dc:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:34
}
800053e0:	00078513          	mv	a0,a5
800053e4:	01c12083          	lw	ra,28(sp)
800053e8:	01812403          	lw	s0,24(sp)
800053ec:	02010113          	addi	sp,sp,32
800053f0:	00008067          	ret

800053f4 <API_GetFreeTaskSlot>:
API_GetFreeTaskSlot():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:36

unsigned int API_GetFreeTaskSlot(){
800053f4:	fe010113          	addi	sp,sp,-32
800053f8:	00812e23          	sw	s0,28(sp)
800053fc:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:38
    unsigned int i;
    for (i = 0; i < NUM_MAX_TASKS; i++){
80005400:	fe042623          	sw	zero,-20(s0)
80005404:	0400006f          	j	80005444 <API_GetFreeTaskSlot+0x50>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:39
        if (TaskList[i].status == TASK_SLOT_EMPTY){
80005408:	800216b7          	lui	a3,0x80021
8000540c:	fec42703          	lw	a4,-20(s0)
80005410:	00070793          	mv	a5,a4
80005414:	00479793          	slli	a5,a5,0x4
80005418:	40e787b3          	sub	a5,a5,a4
8000541c:	00379793          	slli	a5,a5,0x3
80005420:	8b868713          	addi	a4,a3,-1864 # 800208b8 <__stack_top+0xfffdfe68>
80005424:	00e787b3          	add	a5,a5,a4
80005428:	0007a783          	lw	a5,0(a5)
8000542c:	00079663          	bnez	a5,80005438 <API_GetFreeTaskSlot+0x44>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:40
            return i;
80005430:	fec42783          	lw	a5,-20(s0)
80005434:	0200006f          	j	80005454 <API_GetFreeTaskSlot+0x60>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:38 (discriminator 2)
    for (i = 0; i < NUM_MAX_TASKS; i++){
80005438:	fec42783          	lw	a5,-20(s0)
8000543c:	00178793          	addi	a5,a5,1
80005440:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:38 (discriminator 1)
80005444:	fec42703          	lw	a4,-20(s0)
80005448:	00100793          	li	a5,1
8000544c:	fae7fee3          	bleu	a4,a5,80005408 <API_GetFreeTaskSlot+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:43
        }
    }
    return ERRO;
80005450:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:44
}
80005454:	00078513          	mv	a0,a5
80005458:	01c12403          	lw	s0,28(sp)
8000545c:	02010113          	addi	sp,sp,32
80005460:	00008067          	ret

80005464 <API_TaskAllocation>:
API_TaskAllocation():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:46

unsigned int API_TaskAllocation(unsigned int task_id, unsigned int txt_size, unsigned int bss_size, unsigned int start_point, unsigned int task_app_id){
80005464:	fc010113          	addi	sp,sp,-64
80005468:	02112e23          	sw	ra,60(sp)
8000546c:	02812c23          	sw	s0,56(sp)
80005470:	04010413          	addi	s0,sp,64
80005474:	fca42e23          	sw	a0,-36(s0)
80005478:	fcb42c23          	sw	a1,-40(s0)
8000547c:	fcc42a23          	sw	a2,-44(s0)
80005480:	fcd42823          	sw	a3,-48(s0)
80005484:	fce42623          	sw	a4,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:47
    unsigned int tslot = API_GetFreeTaskSlot();
80005488:	f6dff0ef          	jal	ra,800053f4 <API_GetFreeTaskSlot>
8000548c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:48
    TaskList[tslot].status = TASK_SLOT_WAITING_START;
80005490:	800216b7          	lui	a3,0x80021
80005494:	fec42703          	lw	a4,-20(s0)
80005498:	00070793          	mv	a5,a4
8000549c:	00479793          	slli	a5,a5,0x4
800054a0:	40e787b3          	sub	a5,a5,a4
800054a4:	00379793          	slli	a5,a5,0x3
800054a8:	8b868713          	addi	a4,a3,-1864 # 800208b8 <__stack_top+0xfffdfe68>
800054ac:	00e787b3          	add	a5,a5,a4
800054b0:	00200713          	li	a4,2
800054b4:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:49
    TaskList[tslot].waitingMsg = FALSE;
800054b8:	800216b7          	lui	a3,0x80021
800054bc:	fec42703          	lw	a4,-20(s0)
800054c0:	00070793          	mv	a5,a4
800054c4:	00479793          	slli	a5,a5,0x4
800054c8:	40e787b3          	sub	a5,a5,a4
800054cc:	00379793          	slli	a5,a5,0x3
800054d0:	8b868713          	addi	a4,a3,-1864 # 800208b8 <__stack_top+0xfffdfe68>
800054d4:	00e787b3          	add	a5,a5,a4
800054d8:	0007a823          	sw	zero,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:50
    TaskList[tslot].TaskID = task_id;
800054dc:	800217b7          	lui	a5,0x80021
800054e0:	fec42703          	lw	a4,-20(s0)
800054e4:	8b878693          	addi	a3,a5,-1864 # 800208b8 <__stack_top+0xfffdfe68>
800054e8:	00070793          	mv	a5,a4
800054ec:	00479793          	slli	a5,a5,0x4
800054f0:	40e787b3          	sub	a5,a5,a4
800054f4:	00379793          	slli	a5,a5,0x3
800054f8:	00f687b3          	add	a5,a3,a5
800054fc:	fdc42703          	lw	a4,-36(s0)
80005500:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:51
    TaskList[tslot].AppID = task_app_id;
80005504:	800217b7          	lui	a5,0x80021
80005508:	fec42703          	lw	a4,-20(s0)
8000550c:	8b878693          	addi	a3,a5,-1864 # 800208b8 <__stack_top+0xfffdfe68>
80005510:	00070793          	mv	a5,a4
80005514:	00479793          	slli	a5,a5,0x4
80005518:	40e787b3          	sub	a5,a5,a4
8000551c:	00379793          	slli	a5,a5,0x3
80005520:	00f687b3          	add	a5,a3,a5
80005524:	fcc42703          	lw	a4,-52(s0)
80005528:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:52
    TaskList[tslot].taskSize = 4 * (txt_size + bss_size); // it multiply by four because each word has 32 bits and the memory is addressed by byte - so each word is composed by 4 addresses
8000552c:	fd842703          	lw	a4,-40(s0)
80005530:	fd442783          	lw	a5,-44(s0)
80005534:	00f707b3          	add	a5,a4,a5
80005538:	00279693          	slli	a3,a5,0x2
8000553c:	800217b7          	lui	a5,0x80021
80005540:	fec42703          	lw	a4,-20(s0)
80005544:	8b878613          	addi	a2,a5,-1864 # 800208b8 <__stack_top+0xfffdfe68>
80005548:	00070793          	mv	a5,a4
8000554c:	00479793          	slli	a5,a5,0x4
80005550:	40e787b3          	sub	a5,a5,a4
80005554:	00379793          	slli	a5,a5,0x3
80005558:	00f607b3          	add	a5,a2,a5
8000555c:	00d7ac23          	sw	a3,24(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:54

    TaskList[tslot].taskAddr = (unsigned int)pvPortMalloc(TaskList[tslot].taskSize); //vPortFree(TaskList[tslot].taskAddr);    
80005560:	800217b7          	lui	a5,0x80021
80005564:	fec42703          	lw	a4,-20(s0)
80005568:	8b878693          	addi	a3,a5,-1864 # 800208b8 <__stack_top+0xfffdfe68>
8000556c:	00070793          	mv	a5,a4
80005570:	00479793          	slli	a5,a5,0x4
80005574:	40e787b3          	sub	a5,a5,a4
80005578:	00379793          	slli	a5,a5,0x3
8000557c:	00f687b3          	add	a5,a3,a5
80005580:	0187a783          	lw	a5,24(a5)
80005584:	00078513          	mv	a0,a5
80005588:	ccdfb0ef          	jal	ra,80001254 <pvPortMalloc>
8000558c:	00050793          	mv	a5,a0
80005590:	00078613          	mv	a2,a5
80005594:	800217b7          	lui	a5,0x80021
80005598:	fec42703          	lw	a4,-20(s0)
8000559c:	8b878693          	addi	a3,a5,-1864 # 800208b8 <__stack_top+0xfffdfe68>
800055a0:	00070793          	mv	a5,a4
800055a4:	00479793          	slli	a5,a5,0x4
800055a8:	40e787b3          	sub	a5,a5,a4
800055ac:	00379793          	slli	a5,a5,0x3
800055b0:	00f687b3          	add	a5,a3,a5
800055b4:	00c7ae23          	sw	a2,28(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:55
    TaskList[tslot].mainAddr =  TaskList[tslot].taskAddr + (4 * start_point);
800055b8:	800217b7          	lui	a5,0x80021
800055bc:	fec42703          	lw	a4,-20(s0)
800055c0:	8b878693          	addi	a3,a5,-1864 # 800208b8 <__stack_top+0xfffdfe68>
800055c4:	00070793          	mv	a5,a4
800055c8:	00479793          	slli	a5,a5,0x4
800055cc:	40e787b3          	sub	a5,a5,a4
800055d0:	00379793          	slli	a5,a5,0x3
800055d4:	00f687b3          	add	a5,a3,a5
800055d8:	01c7a703          	lw	a4,28(a5)
800055dc:	fd042783          	lw	a5,-48(s0)
800055e0:	00279793          	slli	a5,a5,0x2
800055e4:	00f706b3          	add	a3,a4,a5
800055e8:	80021637          	lui	a2,0x80021
800055ec:	fec42703          	lw	a4,-20(s0)
800055f0:	00070793          	mv	a5,a4
800055f4:	00479793          	slli	a5,a5,0x4
800055f8:	40e787b3          	sub	a5,a5,a4
800055fc:	00379793          	slli	a5,a5,0x3
80005600:	8b860713          	addi	a4,a2,-1864 # 800208b8 <__stack_top+0xfffdfe68>
80005604:	00e787b3          	add	a5,a5,a4
80005608:	02d7a023          	sw	a3,32(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:57

    return tslot;
8000560c:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:58
}
80005610:	00078513          	mv	a0,a5
80005614:	03c12083          	lw	ra,60(sp)
80005618:	03812403          	lw	s0,56(sp)
8000561c:	04010113          	addi	sp,sp,64
80005620:	00008067          	ret

80005624 <API_GetTaskSlot>:
API_GetTaskSlot():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:60

unsigned int API_GetTaskSlot(unsigned int task_id, unsigned int app_id){
80005624:	fd010113          	addi	sp,sp,-48
80005628:	02812623          	sw	s0,44(sp)
8000562c:	03010413          	addi	s0,sp,48
80005630:	fca42e23          	sw	a0,-36(s0)
80005634:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:62
    unsigned int i;
    for( i = 0; i < NUM_MAX_APP_TASKS; i++){
80005638:	fe042623          	sw	zero,-20(s0)
8000563c:	0980006f          	j	800056d4 <API_GetTaskSlot+0xb0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:63
        if(task_id == TaskList[i].TaskID && app_id == TaskList[i].AppID && TaskList[i].status != TASK_SLOT_EMPTY)
80005640:	800217b7          	lui	a5,0x80021
80005644:	fec42703          	lw	a4,-20(s0)
80005648:	8b878693          	addi	a3,a5,-1864 # 800208b8 <__stack_top+0xfffdfe68>
8000564c:	00070793          	mv	a5,a4
80005650:	00479793          	slli	a5,a5,0x4
80005654:	40e787b3          	sub	a5,a5,a4
80005658:	00379793          	slli	a5,a5,0x3
8000565c:	00f687b3          	add	a5,a3,a5
80005660:	0047a783          	lw	a5,4(a5)
80005664:	fdc42703          	lw	a4,-36(s0)
80005668:	06f71063          	bne	a4,a5,800056c8 <API_GetTaskSlot+0xa4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:63 (discriminator 1)
8000566c:	800217b7          	lui	a5,0x80021
80005670:	fec42703          	lw	a4,-20(s0)
80005674:	8b878693          	addi	a3,a5,-1864 # 800208b8 <__stack_top+0xfffdfe68>
80005678:	00070793          	mv	a5,a4
8000567c:	00479793          	slli	a5,a5,0x4
80005680:	40e787b3          	sub	a5,a5,a4
80005684:	00379793          	slli	a5,a5,0x3
80005688:	00f687b3          	add	a5,a3,a5
8000568c:	0087a783          	lw	a5,8(a5)
80005690:	fd842703          	lw	a4,-40(s0)
80005694:	02f71a63          	bne	a4,a5,800056c8 <API_GetTaskSlot+0xa4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:63 (discriminator 2)
80005698:	800216b7          	lui	a3,0x80021
8000569c:	fec42703          	lw	a4,-20(s0)
800056a0:	00070793          	mv	a5,a4
800056a4:	00479793          	slli	a5,a5,0x4
800056a8:	40e787b3          	sub	a5,a5,a4
800056ac:	00379793          	slli	a5,a5,0x3
800056b0:	8b868713          	addi	a4,a3,-1864 # 800208b8 <__stack_top+0xfffdfe68>
800056b4:	00e787b3          	add	a5,a5,a4
800056b8:	0007a783          	lw	a5,0(a5)
800056bc:	00078663          	beqz	a5,800056c8 <API_GetTaskSlot+0xa4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:64
            return i;
800056c0:	fec42783          	lw	a5,-20(s0)
800056c4:	0200006f          	j	800056e4 <API_GetTaskSlot+0xc0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:62 (discriminator 2)
    for( i = 0; i < NUM_MAX_APP_TASKS; i++){
800056c8:	fec42783          	lw	a5,-20(s0)
800056cc:	00178793          	addi	a5,a5,1
800056d0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:62 (discriminator 1)
800056d4:	fec42703          	lw	a4,-20(s0)
800056d8:	00900793          	li	a5,9
800056dc:	f6e7f2e3          	bleu	a4,a5,80005640 <API_GetTaskSlot+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:66
    }
    return ERRO;
800056e0:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:67
}
800056e4:	00078513          	mv	a0,a5
800056e8:	02c12403          	lw	s0,44(sp)
800056ec:	03010113          	addi	sp,sp,48
800056f0:	00008067          	ret

800056f4 <API_TaskStart>:
API_TaskStart():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:69

void API_TaskStart(unsigned int slot){
800056f4:	fe010113          	addi	sp,sp,-32
800056f8:	00112e23          	sw	ra,28(sp)
800056fc:	00812c23          	sw	s0,24(sp)
80005700:	02010413          	addi	s0,sp,32
80005704:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:70
    TaskList[slot].status = TASK_SLOT_RUNNING;
80005708:	800216b7          	lui	a3,0x80021
8000570c:	fec42703          	lw	a4,-20(s0)
80005710:	00070793          	mv	a5,a4
80005714:	00479793          	slli	a5,a5,0x4
80005718:	40e787b3          	sub	a5,a5,a4
8000571c:	00379793          	slli	a5,a5,0x3
80005720:	8b868713          	addi	a4,a3,-1864 # 800208b8 <__stack_top+0xfffdfe68>
80005724:	00e787b3          	add	a5,a5,a4
80005728:	00100713          	li	a4,1
8000572c:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:71
    xTaskCreate(TaskList[slot].mainAddr,
80005730:	800216b7          	lui	a3,0x80021
80005734:	fec42703          	lw	a4,-20(s0)
80005738:	00070793          	mv	a5,a4
8000573c:	00479793          	slli	a5,a5,0x4
80005740:	40e787b3          	sub	a5,a5,a4
80005744:	00379793          	slli	a5,a5,0x3
80005748:	8b868713          	addi	a4,a3,-1864 # 800208b8 <__stack_top+0xfffdfe68>
8000574c:	00e787b3          	add	a5,a5,a4
80005750:	0207a783          	lw	a5,32(a5)
80005754:	00078513          	mv	a0,a5
80005758:	fec42703          	lw	a4,-20(s0)
8000575c:	00070793          	mv	a5,a4
80005760:	00479793          	slli	a5,a5,0x4
80005764:	40e787b3          	sub	a5,a5,a4
80005768:	00379793          	slli	a5,a5,0x3
8000576c:	80021737          	lui	a4,0x80021
80005770:	8b870713          	addi	a4,a4,-1864 # 800208b8 <__stack_top+0xfffdfe68>
80005774:	00e787b3          	add	a5,a5,a4
80005778:	00c78793          	addi	a5,a5,12
8000577c:	00000893          	li	a7,0
80005780:	00000813          	li	a6,0
80005784:	00100713          	li	a4,1
80005788:	00000693          	li	a3,0
8000578c:	40000613          	li	a2,1024
80005790:	800065b7          	lui	a1,0x80006
80005794:	33c58593          	addi	a1,a1,828 # 8000633c <__stack_top+0xfffc58ec>
80005798:	ebcfc0ef          	jal	ra,80001e54 <xTaskGenericCreate>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:77
                "LaTask",
                1024,
                NULL,
                tskIDLE_PRIORITY+1,
                &TaskList[slot].TaskHandler);
    return;
8000579c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:78
}
800057a0:	01c12083          	lw	ra,28(sp)
800057a4:	01812403          	lw	s0,24(sp)
800057a8:	02010113          	addi	sp,sp,32
800057ac:	00008067          	ret

800057b0 <API_FinishRunningTask>:
API_FinishRunningTask():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:81


void API_FinishRunningTask(unsigned int finishAddr){
800057b0:	fd010113          	addi	sp,sp,-48
800057b4:	02112623          	sw	ra,44(sp)
800057b8:	02812423          	sw	s0,40(sp)
800057bc:	03010413          	addi	s0,sp,48
800057c0:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:82
    unsigned int slot = API_GetCurrentTaskSlot();
800057c4:	ba9ff0ef          	jal	ra,8000536c <API_GetCurrentTaskSlot>
800057c8:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:83
    unsigned int wait = 1;
800057cc:	00100793          	li	a5,1
800057d0:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:84
    unsigned int *finishVar = finishAddr;
800057d4:	fdc42783          	lw	a5,-36(s0)
800057d8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:85
    if(API_checkPipe(slot) == 1){
800057dc:	fec42503          	lw	a0,-20(s0)
800057e0:	3c8000ef          	jal	ra,80005ba8 <API_checkPipe>
800057e4:	00050713          	mv	a4,a0
800057e8:	00100793          	li	a5,1
800057ec:	00f71a63          	bne	a4,a5,80005800 <API_FinishRunningTask+0x50>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:86
        finishVar[0] = 557;
800057f0:	fe442783          	lw	a5,-28(s0)
800057f4:	22d00713          	li	a4,557
800057f8:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:87
        return;
800057fc:	06c0006f          	j	80005868 <API_FinishRunningTask+0xb8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:89
    }
    finishVar[0] = 117;
80005800:	fe442783          	lw	a5,-28(s0)
80005804:	07500713          	li	a4,117
80005808:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:90
    vTaskDelete(TaskList[slot].TaskHandler);
8000580c:	800217b7          	lui	a5,0x80021
80005810:	fec42703          	lw	a4,-20(s0)
80005814:	8b878693          	addi	a3,a5,-1864 # 800208b8 <__stack_top+0xfffdfe68>
80005818:	00070793          	mv	a5,a4
8000581c:	00479793          	slli	a5,a5,0x4
80005820:	40e787b3          	sub	a5,a5,a4
80005824:	00379793          	slli	a5,a5,0x3
80005828:	00f687b3          	add	a5,a3,a5
8000582c:	00c7a783          	lw	a5,12(a5)
80005830:	00078513          	mv	a0,a5
80005834:	83dfc0ef          	jal	ra,80002070 <vTaskDelete>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:91
    vPortFree(TaskList[slot].taskAddr);
80005838:	800217b7          	lui	a5,0x80021
8000583c:	fec42703          	lw	a4,-20(s0)
80005840:	8b878693          	addi	a3,a5,-1864 # 800208b8 <__stack_top+0xfffdfe68>
80005844:	00070793          	mv	a5,a4
80005848:	00479793          	slli	a5,a5,0x4
8000584c:	40e787b3          	sub	a5,a5,a4
80005850:	00379793          	slli	a5,a5,0x3
80005854:	00f687b3          	add	a5,a3,a5
80005858:	01c7a783          	lw	a5,28(a5)
8000585c:	00078513          	mv	a0,a5
80005860:	bd1fb0ef          	jal	ra,80001430 <vPortFree>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:93
    //API_InformFinishTask();
    return;
80005864:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:94
80005868:	02c12083          	lw	ra,44(sp)
8000586c:	02812403          	lw	s0,40(sp)
80005870:	03010113          	addi	sp,sp,48
80005874:	00008067          	ret

80005878 <API_PipeInitialization>:
API_PipeInitialization():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:11
extern volatile ServicePacket ServicePipe[PIPE_SIZE];
extern unsigned int messageID;

////////////////////////////////////////////////////////////
// Initialize the PIPE, setting the status of each slot to FREE
void API_PipeInitialization(){
80005878:	fe010113          	addi	sp,sp,-32
8000587c:	00812e23          	sw	s0,28(sp)
80005880:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:13
    int i;
    messageID = 0;
80005884:	8001f7b7          	lui	a5,0x8001f
80005888:	7807a623          	sw	zero,1932(a5) # 8001f78c <__stack_top+0xfffded3c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:14
    for( i = 0; i < PIPE_SIZE; i++ ){
8000588c:	fe042623          	sw	zero,-20(s0)
80005890:	0740006f          	j	80005904 <API_PipeInitialization+0x8c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:15 (discriminator 3)
        MessagePipe[i].status = PIPE_FREE;
80005894:	800207b7          	lui	a5,0x80020
80005898:	fec42683          	lw	a3,-20(s0)
8000589c:	24400713          	li	a4,580
800058a0:	02e68733          	mul	a4,a3,a4
800058a4:	80078793          	addi	a5,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
800058a8:	00f707b3          	add	a5,a4,a5
800058ac:	fff00713          	li	a4,-1
800058b0:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:16 (discriminator 3)
        MessagePipe[i].msgID  = 0;
800058b4:	800207b7          	lui	a5,0x80020
800058b8:	fec42683          	lw	a3,-20(s0)
800058bc:	80078713          	addi	a4,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
800058c0:	24400793          	li	a5,580
800058c4:	02f687b3          	mul	a5,a3,a5
800058c8:	00f707b3          	add	a5,a4,a5
800058cc:	0007a423          	sw	zero,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:17 (discriminator 3)
        ServicePipe[i].status = PIPE_FREE;
800058d0:	8001f6b7          	lui	a3,0x8001f
800058d4:	fec42703          	lw	a4,-20(s0)
800058d8:	00070793          	mv	a5,a4
800058dc:	00479793          	slli	a5,a5,0x4
800058e0:	40e787b3          	sub	a5,a5,a4
800058e4:	00279793          	slli	a5,a5,0x2
800058e8:	69c68713          	addi	a4,a3,1692 # 8001f69c <__stack_top+0xfffdec4c>
800058ec:	00e787b3          	add	a5,a5,a4
800058f0:	fff00713          	li	a4,-1
800058f4:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:14 (discriminator 3)
    for( i = 0; i < PIPE_SIZE; i++ ){
800058f8:	fec42783          	lw	a5,-20(s0)
800058fc:	00178793          	addi	a5,a5,1
80005900:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:14 (discriminator 1)
80005904:	fec42703          	lw	a4,-20(s0)
80005908:	00300793          	li	a5,3
8000590c:	f8e7d4e3          	ble	a4,a5,80005894 <API_PipeInitialization+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:19
    }
    return;
80005910:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:20
}
80005914:	01c12403          	lw	s0,28(sp)
80005918:	02010113          	addi	sp,sp,32
8000591c:	00008067          	ret

80005920 <API_GetMessageSlot>:
API_GetMessageSlot():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:24

////////////////////////////////////////////////////////////
// Returns a free Message slot 
unsigned int API_GetMessageSlot(){
80005920:	fe010113          	addi	sp,sp,-32
80005924:	00812e23          	sw	s0,28(sp)
80005928:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:26
    int i;
    unsigned int sel = PIPE_FULL;
8000592c:	fdfe07b7          	lui	a5,0xfdfe0
80005930:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f3ad>
80005934:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:27
    for( i = 0; i < PIPE_SIZE; i++ ){
80005938:	fe042623          	sw	zero,-20(s0)
8000593c:	0980006f          	j	800059d4 <API_GetMessageSlot+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:28
        if (MessagePipe[i].status == PIPE_FREE){
80005940:	800207b7          	lui	a5,0x80020
80005944:	fec42683          	lw	a3,-20(s0)
80005948:	24400713          	li	a4,580
8000594c:	02e68733          	mul	a4,a3,a4
80005950:	80078793          	addi	a5,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
80005954:	00f707b3          	add	a5,a4,a5
80005958:	0007a703          	lw	a4,0(a5)
8000595c:	fff00793          	li	a5,-1
80005960:	06f71463          	bne	a4,a5,800059c8 <API_GetMessageSlot+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:29
            MessagePipe[i].status = PIPE_OCCUPIED;
80005964:	800207b7          	lui	a5,0x80020
80005968:	fec42683          	lw	a3,-20(s0)
8000596c:	24400713          	li	a4,580
80005970:	02e68733          	mul	a4,a3,a4
80005974:	80078793          	addi	a5,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
80005978:	00f707b3          	add	a5,a4,a5
8000597c:	00100713          	li	a4,1
80005980:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:30
            MessagePipe[i].msgID = messageID;
80005984:	8001f7b7          	lui	a5,0x8001f
80005988:	78c7a703          	lw	a4,1932(a5) # 8001f78c <__stack_top+0xfffded3c>
8000598c:	800207b7          	lui	a5,0x80020
80005990:	fec42603          	lw	a2,-20(s0)
80005994:	80078693          	addi	a3,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
80005998:	24400793          	li	a5,580
8000599c:	02f607b3          	mul	a5,a2,a5
800059a0:	00f687b3          	add	a5,a3,a5
800059a4:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:31
            messageID++;
800059a8:	8001f7b7          	lui	a5,0x8001f
800059ac:	78c7a783          	lw	a5,1932(a5) # 8001f78c <__stack_top+0xfffded3c>
800059b0:	00178713          	addi	a4,a5,1
800059b4:	8001f7b7          	lui	a5,0x8001f
800059b8:	78e7a623          	sw	a4,1932(a5) # 8001f78c <__stack_top+0xfffded3c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:32
            sel = i;
800059bc:	fec42783          	lw	a5,-20(s0)
800059c0:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:33
            break;
800059c4:	01c0006f          	j	800059e0 <API_GetMessageSlot+0xc0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:27 (discriminator 2)
    for( i = 0; i < PIPE_SIZE; i++ ){
800059c8:	fec42783          	lw	a5,-20(s0)
800059cc:	00178793          	addi	a5,a5,1
800059d0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:27 (discriminator 1)
800059d4:	fec42703          	lw	a4,-20(s0)
800059d8:	00300793          	li	a5,3
800059dc:	f6e7d2e3          	ble	a4,a5,80005940 <API_GetMessageSlot+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:36
        }
    }
    if(messageID > 16777215){
800059e0:	8001f7b7          	lui	a5,0x8001f
800059e4:	78c7a703          	lw	a4,1932(a5) # 8001f78c <__stack_top+0xfffded3c>
800059e8:	010007b7          	lui	a5,0x1000
800059ec:	06f76663          	bltu	a4,a5,80005a58 <API_GetMessageSlot+0x138>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:37
        messageID = 256;
800059f0:	8001f7b7          	lui	a5,0x8001f
800059f4:	10000713          	li	a4,256
800059f8:	78e7a623          	sw	a4,1932(a5) # 8001f78c <__stack_top+0xfffded3c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:38
        for( i = 0; i < PIPE_SIZE; i++ ){
800059fc:	fe042623          	sw	zero,-20(s0)
80005a00:	04c0006f          	j	80005a4c <API_GetMessageSlot+0x12c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:39 (discriminator 3)
            MessagePipe[i].msgID = (MessagePipe[i].msgID & 0x000000FF);
80005a04:	800207b7          	lui	a5,0x80020
80005a08:	fec42683          	lw	a3,-20(s0)
80005a0c:	80078713          	addi	a4,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
80005a10:	24400793          	li	a5,580
80005a14:	02f687b3          	mul	a5,a3,a5
80005a18:	00f707b3          	add	a5,a4,a5
80005a1c:	0087a783          	lw	a5,8(a5)
80005a20:	0ff7f713          	andi	a4,a5,255
80005a24:	800207b7          	lui	a5,0x80020
80005a28:	fec42603          	lw	a2,-20(s0)
80005a2c:	80078693          	addi	a3,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
80005a30:	24400793          	li	a5,580
80005a34:	02f607b3          	mul	a5,a2,a5
80005a38:	00f687b3          	add	a5,a3,a5
80005a3c:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:38 (discriminator 3)
        for( i = 0; i < PIPE_SIZE; i++ ){
80005a40:	fec42783          	lw	a5,-20(s0)
80005a44:	00178793          	addi	a5,a5,1
80005a48:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:38 (discriminator 1)
80005a4c:	fec42703          	lw	a4,-20(s0)
80005a50:	00300793          	li	a5,3
80005a54:	fae7d8e3          	ble	a4,a5,80005a04 <API_GetMessageSlot+0xe4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:42
        }
    }
    return sel;
80005a58:	fe842783          	lw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:43
}
80005a5c:	00078513          	mv	a0,a5
80005a60:	01c12403          	lw	s0,28(sp)
80005a64:	02010113          	addi	sp,sp,32
80005a68:	00008067          	ret

80005a6c <API_GetServiceSlot>:
API_GetServiceSlot():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:47

////////////////////////////////////////////////////////////
// Returns a free Service slot
unsigned int API_GetServiceSlot(){
80005a6c:	fe010113          	addi	sp,sp,-32
80005a70:	00812e23          	sw	s0,28(sp)
80005a74:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:49
    int i;
    for( i = 0; i < PIPE_SIZE; i++ ){
80005a78:	fe042623          	sw	zero,-20(s0)
80005a7c:	06c0006f          	j	80005ae8 <API_GetServiceSlot+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:50
        if (ServicePipe[i].status == PIPE_FREE){
80005a80:	8001f6b7          	lui	a3,0x8001f
80005a84:	fec42703          	lw	a4,-20(s0)
80005a88:	00070793          	mv	a5,a4
80005a8c:	00479793          	slli	a5,a5,0x4
80005a90:	40e787b3          	sub	a5,a5,a4
80005a94:	00279793          	slli	a5,a5,0x2
80005a98:	69c68713          	addi	a4,a3,1692 # 8001f69c <__stack_top+0xfffdec4c>
80005a9c:	00e787b3          	add	a5,a5,a4
80005aa0:	0007a703          	lw	a4,0(a5)
80005aa4:	fff00793          	li	a5,-1
80005aa8:	02f71a63          	bne	a4,a5,80005adc <API_GetServiceSlot+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:51
            ServicePipe[i].status = PIPE_OCCUPIED;
80005aac:	8001f6b7          	lui	a3,0x8001f
80005ab0:	fec42703          	lw	a4,-20(s0)
80005ab4:	00070793          	mv	a5,a4
80005ab8:	00479793          	slli	a5,a5,0x4
80005abc:	40e787b3          	sub	a5,a5,a4
80005ac0:	00279793          	slli	a5,a5,0x2
80005ac4:	69c68713          	addi	a4,a3,1692 # 8001f69c <__stack_top+0xfffdec4c>
80005ac8:	00e787b3          	add	a5,a5,a4
80005acc:	00100713          	li	a4,1
80005ad0:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:52
            return i;
80005ad4:	fec42783          	lw	a5,-20(s0)
80005ad8:	0240006f          	j	80005afc <API_GetServiceSlot+0x90>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:49 (discriminator 2)
    for( i = 0; i < PIPE_SIZE; i++ ){
80005adc:	fec42783          	lw	a5,-20(s0)
80005ae0:	00178793          	addi	a5,a5,1
80005ae4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:49 (discriminator 1)
80005ae8:	fec42703          	lw	a4,-20(s0)
80005aec:	00300793          	li	a5,3
80005af0:	f8e7d8e3          	ble	a4,a5,80005a80 <API_GetServiceSlot+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:55
        }
    }
    return PIPE_FULL;
80005af4:	fdfe07b7          	lui	a5,0xfdfe0
80005af8:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f3ad>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:56
}
80005afc:	00078513          	mv	a0,a5
80005b00:	01c12403          	lw	s0,28(sp)
80005b04:	02010113          	addi	sp,sp,32
80005b08:	00008067          	ret

80005b0c <API_ClearPipeSlot>:
API_ClearPipeSlot():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:60

////////////////////////////////////////////////////////////
// Clear one PipeSlot after send it
void API_ClearPipeSlot(unsigned int typeSlot){
80005b0c:	fd010113          	addi	sp,sp,-48
80005b10:	02812623          	sw	s0,44(sp)
80005b14:	03010413          	addi	s0,sp,48
80005b18:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:61
    unsigned type = typeSlot & 0xFFFF0000;
80005b1c:	fdc42703          	lw	a4,-36(s0)
80005b20:	ffff07b7          	lui	a5,0xffff0
80005b24:	00f777b3          	and	a5,a4,a5
80005b28:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:62
    unsigned slot = typeSlot & 0x0000FFFF;
80005b2c:	fdc42703          	lw	a4,-36(s0)
80005b30:	000107b7          	lui	a5,0x10
80005b34:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80005b38:	00f777b3          	and	a5,a4,a5
80005b3c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:63
    if (type == SERVICE){
80005b40:	fec42703          	lw	a4,-20(s0)
80005b44:	101007b7          	lui	a5,0x10100
80005b48:	02f71863          	bne	a4,a5,80005b78 <API_ClearPipeSlot+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:64
        ServicePipe[slot].status = PIPE_FREE;
80005b4c:	8001f6b7          	lui	a3,0x8001f
80005b50:	fe842703          	lw	a4,-24(s0)
80005b54:	00070793          	mv	a5,a4
80005b58:	00479793          	slli	a5,a5,0x4
80005b5c:	40e787b3          	sub	a5,a5,a4
80005b60:	00279793          	slli	a5,a5,0x2
80005b64:	69c68713          	addi	a4,a3,1692 # 8001f69c <__stack_top+0xfffdec4c>
80005b68:	00e787b3          	add	a5,a5,a4
80005b6c:	fff00713          	li	a4,-1
80005b70:	00e7a023          	sw	a4,0(a5) # 10100000 <RAM_SIZE+0x10080000>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:68
    } else { // type == MESSAGE
        MessagePipe[slot].status = PIPE_FREE;
    }
    return;
80005b74:	0280006f          	j	80005b9c <API_ClearPipeSlot+0x90>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:66
        MessagePipe[slot].status = PIPE_FREE;
80005b78:	800207b7          	lui	a5,0x80020
80005b7c:	fe842683          	lw	a3,-24(s0)
80005b80:	24400713          	li	a4,580
80005b84:	02e68733          	mul	a4,a3,a4
80005b88:	80078793          	addi	a5,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
80005b8c:	00f707b3          	add	a5,a4,a5
80005b90:	fff00713          	li	a4,-1
80005b94:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:68
    return;
80005b98:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:69
}
80005b9c:	02c12403          	lw	s0,44(sp)
80005ba0:	03010113          	addi	sp,sp,48
80005ba4:	00008067          	ret

80005ba8 <API_checkPipe>:
API_checkPipe():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:71

unsigned int API_checkPipe(unsigned int taskSlot){
80005ba8:	fd010113          	addi	sp,sp,-48
80005bac:	02812623          	sw	s0,44(sp)
80005bb0:	03010413          	addi	s0,sp,48
80005bb4:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:73
    unsigned int i;
    for(i = 0; i < PIPE_SIZE; i++){
80005bb8:	fe042623          	sw	zero,-20(s0)
80005bbc:	0600006f          	j	80005c1c <API_checkPipe+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:74
        if(MessagePipe[i].status == PIPE_OCCUPIED && MessagePipe[i].holder == taskSlot){
80005bc0:	800207b7          	lui	a5,0x80020
80005bc4:	fec42683          	lw	a3,-20(s0)
80005bc8:	24400713          	li	a4,580
80005bcc:	02e68733          	mul	a4,a3,a4
80005bd0:	80078793          	addi	a5,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
80005bd4:	00f707b3          	add	a5,a4,a5
80005bd8:	0007a703          	lw	a4,0(a5)
80005bdc:	00100793          	li	a5,1
80005be0:	02f71863          	bne	a4,a5,80005c10 <API_checkPipe+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:74 (discriminator 1)
80005be4:	800207b7          	lui	a5,0x80020
80005be8:	fec42683          	lw	a3,-20(s0)
80005bec:	80078713          	addi	a4,a5,-2048 # 8001f800 <__stack_top+0xfffdedb0>
80005bf0:	24400793          	li	a5,580
80005bf4:	02f687b3          	mul	a5,a3,a5
80005bf8:	00f707b3          	add	a5,a4,a5
80005bfc:	0047a783          	lw	a5,4(a5)
80005c00:	fdc42703          	lw	a4,-36(s0)
80005c04:	00f71663          	bne	a4,a5,80005c10 <API_checkPipe+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:75
            return 1;
80005c08:	00100793          	li	a5,1
80005c0c:	0200006f          	j	80005c2c <API_checkPipe+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:73 (discriminator 2)
    for(i = 0; i < PIPE_SIZE; i++){
80005c10:	fec42783          	lw	a5,-20(s0)
80005c14:	00178793          	addi	a5,a5,1
80005c18:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:73 (discriminator 1)
80005c1c:	fec42703          	lw	a4,-20(s0)
80005c20:	00300793          	li	a5,3
80005c24:	f8e7fee3          	bleu	a4,a5,80005bc0 <API_checkPipe+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:78
        }
    }
    return 0;
80005c28:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:79
}
80005c2c:	00078513          	mv	a0,a5
80005c30:	02c12403          	lw	s0,44(sp)
80005c34:	03010113          	addi	sp,sp,48
80005c38:	00008067          	ret

80005c3c <PLIC_init>:
PLIC_init():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:124
{
80005c3c:	fe010113          	addi	sp,sp,-32
80005c40:	00812e23          	sw	s0,28(sp)
80005c44:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:126
    unsigned long hart_id = read_csr(mhartid);
80005c48:	f14027f3          	csrr	a5,mhartid
80005c4c:	fef42423          	sw	a5,-24(s0)
80005c50:	fe842783          	lw	a5,-24(s0)
80005c54:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
80005c58:	fe042623          	sw	zero,-20(s0)
80005c5c:	03c0006f          	j	80005c98 <PLIC_init+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:131 (discriminator 3)
        PLIC->TARGET_ENABLES[hart_id].ENABLES[inc] = 0;
80005c60:	40000737          	lui	a4,0x40000
80005c64:	fe442783          	lw	a5,-28(s0)
80005c68:	00579693          	slli	a3,a5,0x5
80005c6c:	fec42783          	lw	a5,-20(s0)
80005c70:	00f686b3          	add	a3,a3,a5
80005c74:	000017b7          	lui	a5,0x1
80005c78:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80005c7c:	00f687b3          	add	a5,a3,a5
80005c80:	00279793          	slli	a5,a5,0x2
80005c84:	00f707b3          	add	a5,a4,a5
80005c88:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 3)
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
80005c8c:	fec42783          	lw	a5,-20(s0)
80005c90:	00178793          	addi	a5,a5,1
80005c94:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 1)
80005c98:	fec42783          	lw	a5,-20(s0)
80005c9c:	fc0782e3          	beqz	a5,80005c60 <PLIC_init+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
80005ca0:	fe042623          	sw	zero,-20(s0)
80005ca4:	0240006f          	j	80005cc8 <PLIC_init+0x8c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:139 (discriminator 3)
        PLIC->SOURCE_PRIORITY[inc] = 0;
80005ca8:	40000737          	lui	a4,0x40000
80005cac:	fec42783          	lw	a5,-20(s0)
80005cb0:	00279793          	slli	a5,a5,0x2
80005cb4:	00f707b3          	add	a5,a4,a5
80005cb8:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 3)
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
80005cbc:	fec42783          	lw	a5,-20(s0)
80005cc0:	00178793          	addi	a5,a5,1
80005cc4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 1)
80005cc8:	fec42703          	lw	a4,-20(s0)
80005ccc:	01e00793          	li	a5,30
80005cd0:	fce7fce3          	bleu	a4,a5,80005ca8 <PLIC_init+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:143
    PLIC->TARGET[hart_id].PRIORITY_THRESHOLD = 0;
80005cd4:	40000737          	lui	a4,0x40000
80005cd8:	fe442783          	lw	a5,-28(s0)
80005cdc:	20078793          	addi	a5,a5,512
80005ce0:	00c79793          	slli	a5,a5,0xc
80005ce4:	00f707b3          	add	a5,a4,a5
80005ce8:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:146
    set_csr(mie, MIP_MEIP);
80005cec:	000017b7          	lui	a5,0x1
80005cf0:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80005cf4:	3047a7f3          	csrrs	a5,mie,a5
80005cf8:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:147
}
80005cfc:	00000013          	nop
80005d00:	01c12403          	lw	s0,28(sp)
80005d04:	02010113          	addi	sp,sp,32
80005d08:	00008067          	ret

80005d0c <main>:
main():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:49
unsigned int ProcessorAddr;

/*-----------------------------------------------------------*/

int main( void )
{
80005d0c:	fd010113          	addi	sp,sp,-48
80005d10:	02112623          	sw	ra,44(sp)
80005d14:	02812423          	sw	s0,40(sp)
80005d18:	03010413          	addi	s0,sp,48
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:51
	char str[20];
    PLIC_init();
80005d1c:	f21ff0ef          	jal	ra,80005c3c <PLIC_init>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:57

    /**************************************************************************
    * Initialize CoreUART with its base address, baud value, and line
    * configuration.
    *************************************************************************/
    UART_init(&g_uart, COREUARTAPB0_BASE_ADDR, BAUD_VALUE_115200,
80005d20:	00100693          	li	a3,1
80005d24:	02c00613          	li	a2,44
80005d28:	700015b7          	lui	a1,0x70001
80005d2c:	800217b7          	lui	a5,0x80021
80005d30:	a3c78513          	addi	a0,a5,-1476 # 80020a3c <__stack_top+0xfffdffec>
80005d34:	aa4fb0ef          	jal	ra,80000fd8 <UART_init>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:63
             (DATA_8_BITS | NO_PARITY) );
    
	/**************************************************************************
    * Initialize the Chronos platform stuff
    *************************************************************************/
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n Chronos platform initializing... \n" );
80005d38:	800067b7          	lui	a5,0x80006
80005d3c:	35c78593          	addi	a1,a5,860 # 8000635c <__stack_top+0xfffc590c>
80005d40:	800217b7          	lui	a5,0x80021
80005d44:	a3c78513          	addi	a0,a5,-1476 # 80020a3c <__stack_top+0xfffdffec>
80005d48:	c5cfb0ef          	jal	ra,800011a4 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:64
	Chronos_init();
80005d4c:	f79fc0ef          	jal	ra,80002cc4 <Chronos_init>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:65
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This terminal belongs to the address: " );
80005d50:	800067b7          	lui	a5,0x80006
80005d54:	38478593          	addi	a1,a5,900 # 80006384 <__stack_top+0xfffc5934>
80005d58:	800217b7          	lui	a5,0x80021
80005d5c:	a3c78513          	addi	a0,a5,-1476 # 80020a3c <__stack_top+0xfffdffec>
80005d60:	c44fb0ef          	jal	ra,800011a4 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:66
	myItoa(ProcessorAddr, str, 16);
80005d64:	800217b7          	lui	a5,0x80021
80005d68:	a447a783          	lw	a5,-1468(a5) # 80020a44 <__stack_top+0xfffdfff4>
80005d6c:	00078713          	mv	a4,a5
80005d70:	fdc40793          	addi	a5,s0,-36
80005d74:	01000613          	li	a2,16
80005d78:	00078593          	mv	a1,a5
80005d7c:	00070513          	mv	a0,a4
80005d80:	fb8fd0ef          	jal	ra,80003538 <myItoa>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:67
    UART_polled_tx_string( &g_uart, (const uint8_t *)str); UART_polled_tx_string( &g_uart, (const uint8_t *)"\n");
80005d84:	fdc40793          	addi	a5,s0,-36
80005d88:	00078593          	mv	a1,a5
80005d8c:	800217b7          	lui	a5,0x80021
80005d90:	a3c78513          	addi	a0,a5,-1476 # 80020a3c <__stack_top+0xfffdffec>
80005d94:	c10fb0ef          	jal	ra,800011a4 <UART_polled_tx_string>
80005d98:	800067b7          	lui	a5,0x80006
80005d9c:	3b078593          	addi	a1,a5,944 # 800063b0 <__stack_top+0xfffc5960>
80005da0:	800217b7          	lui	a5,0x80021
80005da4:	a3c78513          	addi	a0,a5,-1476 # 80020a3c <__stack_top+0xfffdffec>
80005da8:	bfcfb0ef          	jal	ra,800011a4 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:71
	
	//AppsToMap = 0;
	
	if (ProcessorAddr == 0x0000){
80005dac:	800217b7          	lui	a5,0x80021
80005db0:	a447a783          	lw	a5,-1468(a5) # 80020a44 <__stack_top+0xfffdfff4>
80005db4:	04079463          	bnez	a5,80005dfc <main+0xf0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:72
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is the Global Master: \n" );
80005db8:	800067b7          	lui	a5,0x80006
80005dbc:	3b478593          	addi	a1,a5,948 # 800063b4 <__stack_top+0xfffc5964>
80005dc0:	800217b7          	lui	a5,0x80021
80005dc4:	a3c78513          	addi	a0,a5,-1476 # 80020a3c <__stack_top+0xfffdffec>
80005dc8:	bdcfb0ef          	jal	ra,800011a4 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:74
		/* Create the GlobalManager task */
		xTaskCreate( GlobalManagerTask, "GlobalMaster", 1000, NULL, (configMAX_PRIORITIES - 1), NULL );
80005dcc:	00000893          	li	a7,0
80005dd0:	00000813          	li	a6,0
80005dd4:	00000793          	li	a5,0
80005dd8:	00400713          	li	a4,4
80005ddc:	00000693          	li	a3,0
80005de0:	3e800613          	li	a2,1000
80005de4:	800065b7          	lui	a1,0x80006
80005de8:	3e058593          	addi	a1,a1,992 # 800063e0 <__stack_top+0xfffc5990>
80005dec:	80006537          	lui	a0,0x80006
80005df0:	f4050513          	addi	a0,a0,-192 # 80005f40 <__stack_top+0xfffc54f0>
80005df4:	860fc0ef          	jal	ra,80001e54 <xTaskGenericCreate>
80005df8:	0440006f          	j	80005e3c <main+0x130>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:76
	} else {
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is a Slave: \n" );
80005dfc:	800067b7          	lui	a5,0x80006
80005e00:	3f078593          	addi	a1,a5,1008 # 800063f0 <__stack_top+0xfffc59a0>
80005e04:	800217b7          	lui	a5,0x80021
80005e08:	a3c78513          	addi	a0,a5,-1476 # 80020a3c <__stack_top+0xfffdffec>
80005e0c:	b98fb0ef          	jal	ra,800011a4 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:79
		
		/* Create the two test tasks. */
		xTaskCreate( vUartAliveTask, "Alive", 1000, NULL, 0, NULL );
80005e10:	00000893          	li	a7,0
80005e14:	00000813          	li	a6,0
80005e18:	00000793          	li	a5,0
80005e1c:	00000713          	li	a4,0
80005e20:	00000693          	li	a3,0
80005e24:	3e800613          	li	a2,1000
80005e28:	800065b7          	lui	a1,0x80006
80005e2c:	41058593          	addi	a1,a1,1040 # 80006410 <__stack_top+0xfffc59c0>
80005e30:	80006537          	lui	a0,0x80006
80005e34:	e8850513          	addi	a0,a0,-376 # 80005e88 <__stack_top+0xfffc5438>
80005e38:	81cfc0ef          	jal	ra,80001e54 <xTaskGenericCreate>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:83
	}	

	/* Start the kernel.  From here on, only tasks and interrupts will run. */
	vTaskStartScheduler();
80005e3c:	b94fc0ef          	jal	ra,800021d0 <vTaskStartScheduler>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:86

	/* Exit FreeRTOS */
	return 0;
80005e40:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:87
}
80005e44:	00078513          	mv	a0,a5
80005e48:	02c12083          	lw	ra,44(sp)
80005e4c:	02812403          	lw	s0,40(sp)
80005e50:	03010113          	addi	sp,sp,48
80005e54:	00008067          	ret

80005e58 <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:92

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
80005e58:	ff010113          	addi	sp,sp,-16
80005e5c:	00812623          	sw	s0,12(sp)
80005e60:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:103
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
80005e64:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:104 (discriminator 1)
	for( ;; );
80005e68:	0000006f          	j	80005e68 <vApplicationMallocFailedHook+0x10>

80005e6c <vApplicationIdleHook>:
vApplicationIdleHook():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:109
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
80005e6c:	ff010113          	addi	sp,sp,-16
80005e70:	00812623          	sw	s0,12(sp)
80005e74:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:119
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
80005e78:	00000013          	nop
80005e7c:	00c12403          	lw	s0,12(sp)
80005e80:	01010113          	addi	sp,sp,16
80005e84:	00008067          	ret

80005e88 <vUartAliveTask>:
vUartAliveTask():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:136
	for( ;; );
}
/*-----------------------------------------------------------*/

static void vUartAliveTask( void *pvParameters )
{
80005e88:	fc010113          	addi	sp,sp,-64
80005e8c:	02112e23          	sw	ra,60(sp)
80005e90:	02812c23          	sw	s0,56(sp)
80005e94:	04010413          	addi	s0,sp,64
80005e98:	fca42623          	sw	a0,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:140
	( void ) pvParameters;
	char str[20];
	unsigned int i;
	for( i = 0 ;; i++ ){
80005e9c:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:141 (discriminator 2)
		myItoa(ProcessorAddr, str, 16);
80005ea0:	800217b7          	lui	a5,0x80021
80005ea4:	a447a783          	lw	a5,-1468(a5) # 80020a44 <__stack_top+0xfffdfff4>
80005ea8:	00078713          	mv	a4,a5
80005eac:	fd840793          	addi	a5,s0,-40
80005eb0:	01000613          	li	a2,16
80005eb4:	00078593          	mv	a1,a5
80005eb8:	00070513          	mv	a0,a4
80005ebc:	e7cfd0ef          	jal	ra,80003538 <myItoa>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:142 (discriminator 2)
		UART_polled_tx_string( &g_uart, (const uint8_t *)str);
80005ec0:	fd840793          	addi	a5,s0,-40
80005ec4:	00078593          	mv	a1,a5
80005ec8:	800217b7          	lui	a5,0x80021
80005ecc:	a3c78513          	addi	a0,a5,-1476 # 80020a3c <__stack_top+0xfffdffec>
80005ed0:	ad4fb0ef          	jal	ra,800011a4 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:143 (discriminator 2)
		UART_polled_tx_string( &g_uart, (const uint8_t *)" PE is alive - " );
80005ed4:	800067b7          	lui	a5,0x80006
80005ed8:	41878593          	addi	a1,a5,1048 # 80006418 <__stack_top+0xfffc59c8>
80005edc:	800217b7          	lui	a5,0x80021
80005ee0:	a3c78513          	addi	a0,a5,-1476 # 80020a3c <__stack_top+0xfffdffec>
80005ee4:	ac0fb0ef          	jal	ra,800011a4 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:144 (discriminator 2)
		myItoa(i, str, 10);
80005ee8:	fec42783          	lw	a5,-20(s0)
80005eec:	fd840713          	addi	a4,s0,-40
80005ef0:	00a00613          	li	a2,10
80005ef4:	00070593          	mv	a1,a4
80005ef8:	00078513          	mv	a0,a5
80005efc:	e3cfd0ef          	jal	ra,80003538 <myItoa>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:145 (discriminator 2)
		UART_polled_tx_string( &g_uart, (const uint8_t *)str);
80005f00:	fd840793          	addi	a5,s0,-40
80005f04:	00078593          	mv	a1,a5
80005f08:	800217b7          	lui	a5,0x80021
80005f0c:	a3c78513          	addi	a0,a5,-1476 # 80020a3c <__stack_top+0xfffdffec>
80005f10:	a94fb0ef          	jal	ra,800011a4 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:146 (discriminator 2)
		UART_polled_tx_string( &g_uart, (const uint8_t *)" -\r\n" );
80005f14:	800067b7          	lui	a5,0x80006
80005f18:	42878593          	addi	a1,a5,1064 # 80006428 <__stack_top+0xfffc59d8>
80005f1c:	800217b7          	lui	a5,0x80021
80005f20:	a3c78513          	addi	a0,a5,-1476 # 80020a3c <__stack_top+0xfffdffec>
80005f24:	a80fb0ef          	jal	ra,800011a4 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:147 (discriminator 2)
	    vTaskDelay(10);
80005f28:	00a00513          	li	a0,10
80005f2c:	a20fc0ef          	jal	ra,8000214c <vTaskDelay>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:140 (discriminator 2)
	for( i = 0 ;; i++ ){
80005f30:	fec42783          	lw	a5,-20(s0)
80005f34:	00178793          	addi	a5,a5,1
80005f38:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:141 (discriminator 2)
		myItoa(ProcessorAddr, str, 16);
80005f3c:	f65ff06f          	j	80005ea0 <vUartAliveTask+0x18>

80005f40 <GlobalManagerTask>:
GlobalManagerTask():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:153
	}
}

/*-----------------------------------------------------------*/

static void GlobalManagerTask( void *pvParameters ){
80005f40:	fc010113          	addi	sp,sp,-64
80005f44:	02112e23          	sw	ra,60(sp)
80005f48:	02812c23          	sw	s0,56(sp)
80005f4c:	04010413          	addi	s0,sp,64
80005f50:	fca42623          	sw	a0,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:158
	( void ) pvParameters;
	int tick;
	char str[20];
	// Initialize the priority vector with the pattern policy
	GeneratePatternMatrix();
80005f54:	edcfe0ef          	jal	ra,80004630 <GeneratePatternMatrix>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:161

	// Initialize the System Tiles Info
	API_TilesReset();
80005f58:	dc0fe0ef          	jal	ra,80004518 <API_TilesReset>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:164

	// Initialize the applications vector
    API_ApplicationsReset();
80005f5c:	d5cfe0ef          	jal	ra,800044b8 <API_ApplicationsReset>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:167

	// Informs the Repository that the GLOBALMASTER is ready to receive the application info
	API_RepositoryWakeUp();
80005f60:	9ecfe0ef          	jal	ra,8000414c <API_RepositoryWakeUp>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:170 (discriminator 1)

	for(;;){
		tick = xTaskGetTickCount();
80005f64:	c84fc0ef          	jal	ra,800023e8 <xTaskGetTickCount>
80005f68:	00050793          	mv	a5,a0
80005f6c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:171 (discriminator 1)
		myItoa(tick, str, 10);
80005f70:	fd840793          	addi	a5,s0,-40
80005f74:	00a00613          	li	a2,10
80005f78:	00078593          	mv	a1,a5
80005f7c:	fec42503          	lw	a0,-20(s0)
80005f80:	db8fd0ef          	jal	ra,80003538 <myItoa>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:172 (discriminator 1)
		UART_polled_tx_string( &g_uart, (const uint8_t *)str);
80005f84:	fd840793          	addi	a5,s0,-40
80005f88:	00078593          	mv	a1,a5
80005f8c:	800217b7          	lui	a5,0x80021
80005f90:	a3c78513          	addi	a0,a5,-1476 # 80020a3c <__stack_top+0xfffdffec>
80005f94:	a10fb0ef          	jal	ra,800011a4 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:173 (discriminator 1)
		printsv("GlobalMasterActive", tick);
80005f98:	fec42583          	lw	a1,-20(s0)
80005f9c:	800067b7          	lui	a5,0x80006
80005fa0:	43078513          	addi	a0,a5,1072 # 80006430 <__stack_top+0xfffc59e0>
80005fa4:	ea5fc0ef          	jal	ra,80002e48 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:174 (discriminator 1)
		UART_polled_tx_string( &g_uart, (const uint8_t *)" GlobalMasterRoutine...\r\n" );
80005fa8:	800067b7          	lui	a5,0x80006
80005fac:	44478593          	addi	a1,a5,1092 # 80006444 <__stack_top+0xfffc59f4>
80005fb0:	800217b7          	lui	a5,0x80021
80005fb4:	a3c78513          	addi	a0,a5,-1476 # 80020a3c <__stack_top+0xfffdffec>
80005fb8:	9ecfb0ef          	jal	ra,800011a4 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:177 (discriminator 1)

		// Checks if there is some task to allocate...
		API_AllocateTasks(tick);
80005fbc:	fec42783          	lw	a5,-20(s0)
80005fc0:	00078513          	mv	a0,a5
80005fc4:	f14fe0ef          	jal	ra,800046d8 <API_AllocateTasks>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:179 (discriminator 1)

		asm ("wfi");
80005fc8:	10500073          	wfi
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:170 (discriminator 1)
		tick = xTaskGetTickCount();
80005fcc:	f99ff06f          	j	80005f64 <GlobalManagerTask+0x24>

80005fd0 <write>:
write():
80005fd0:	00000797          	auipc	a5,0x0
80005fd4:	4a078793          	addi	a5,a5,1184 # 80006470 <_impure_ptr>
80005fd8:	00060693          	mv	a3,a2
80005fdc:	00058613          	mv	a2,a1
80005fe0:	00050593          	mv	a1,a0
80005fe4:	0007a503          	lw	a0,0(a5)
80005fe8:	0040006f          	j	80005fec <_write_r>

80005fec <_write_r>:
_write_r():
80005fec:	ff010113          	addi	sp,sp,-16
80005ff0:	00812423          	sw	s0,8(sp)
80005ff4:	00050413          	mv	s0,a0
80005ff8:	00058513          	mv	a0,a1
80005ffc:	00060593          	mv	a1,a2
80006000:	00068613          	mv	a2,a3
80006004:	0001a797          	auipc	a5,0x1a
80006008:	1007a623          	sw	zero,268(a5) # 80020110 <errno>
8000600c:	00112623          	sw	ra,12(sp)
80006010:	e09fa0ef          	jal	ra,80000e18 <_write>
80006014:	fff00793          	li	a5,-1
80006018:	00f51c63          	bne	a0,a5,80006030 <_write_r+0x44>
8000601c:	0001a797          	auipc	a5,0x1a
80006020:	0f478793          	addi	a5,a5,244 # 80020110 <errno>
80006024:	0007a783          	lw	a5,0(a5)
80006028:	00078463          	beqz	a5,80006030 <_write_r+0x44>
8000602c:	00f42023          	sw	a5,0(s0)
80006030:	00c12083          	lw	ra,12(sp)
80006034:	00812403          	lw	s0,8(sp)
80006038:	01010113          	addi	sp,sp,16
8000603c:	00008067          	ret
80006040:	6568                	flw	fa0,76(a0)
80006042:	6c6c                	flw	fa1,92(s0)
80006044:	0000006f          	j	80006044 <_write_r+0x58>
80006048:	6544                	flw	fs1,12(a0)
8000604a:	6574                	flw	fa3,76(a0)
8000604c:	69657463          	bleu	s6,a0,800066d4 <__sbss_end+0x104>
80006050:	7520                	flw	fs0,104(a0)
80006052:	616d                	addi	sp,sp,240
80006054:	6320                	flw	fs0,64(a4)
80006056:	6168                	flw	fa0,68(a0)
80006058:	616d                	addi	sp,sp,240
8000605a:	6164                	flw	fs1,68(a0)
8000605c:	5420                	lw	s0,104(s0)
8000605e:	5345                	li	t1,-15
80006060:	4554                	lw	a3,12(a0)
80006062:	6420                	flw	fs0,72(s0)
80006064:	2065                	jal	8000610c <_write_r+0x120>
80006066:	74736973          	csrrsi	s2,0x747,6
8000606a:	6d65                	lui	s10,0x19
8000606c:	2161                	jal	800064f4 <__data_load+0x74>
8000606e:	000a                	c.slli	zero,0x2
80006070:	7261                	lui	tp,0xffff8
80006072:	00203067          	0x203067
80006076:	0000                	unimp
80006078:	7261                	lui	tp,0xffff8
8000607a:	00203167          	0x203167
8000607e:	0000                	unimp
80006080:	7261                	lui	tp,0xffff8
80006082:	00203267          	0x203267
80006086:	0000                	unimp
80006088:	7261                	lui	tp,0xffff8
8000608a:	00203367          	0x203367
8000608e:	0000                	unimp
80006090:	7261                	lui	tp,0xffff8
80006092:	00203467          	0x203467
80006096:	0000                	unimp
80006098:	7974                	flw	fa3,116(a0)
8000609a:	6570                	flw	fa2,76(a0)
8000609c:	0020                	addi	s0,sp,8
8000609e:	0000                	unimp
800060a0:	74737953          	0x74737953
800060a4:	6d65                	lui	s10,0x19
800060a6:	6c6c6163          	bltu	s8,t1,80006768 <__sbss_end+0x198>
800060aa:	6e20                	flw	fs0,88(a2)
800060ac:	206fa3c3          	fmadd.s	ft7,ft11,ft6,ft4,rdn
800060b0:	6469                	lui	s0,0x1a
800060b2:	6e65                	lui	t3,0x19
800060b4:	6974                	flw	fa3,84(a0)
800060b6:	6966                	flw	fs2,88(sp)
800060b8:	61646163          	bltu	s0,s6,800066ba <__sbss_end+0xea>
800060bc:	0a21                	addi	s4,s4,8
800060be:	0000                	unimp
800060c0:	7274                	flw	fa3,100(a2)
800060c2:	7061                	c.lui	zero,0xffff8
800060c4:	000a                	c.slli	zero,0x2
800060c6:	0000                	unimp
800060c8:	06e0                	addi	s0,sp,844
800060ca:	8000                	0x8000
800060cc:	06ec                	addi	a1,sp,844
800060ce:	8000                	0x8000
800060d0:	06ec                	addi	a1,sp,844
800060d2:	8000                	0x8000
800060d4:	06ec                	addi	a1,sp,844
800060d6:	8000                	0x8000
800060d8:	06ec                	addi	a1,sp,844
800060da:	8000                	0x8000
800060dc:	06ec                	addi	a1,sp,844
800060de:	8000                	0x8000
800060e0:	06ec                	addi	a1,sp,844
800060e2:	8000                	0x8000
800060e4:	06ec                	addi	a1,sp,844
800060e6:	8000                	0x8000
800060e8:	06ec                	addi	a1,sp,844
800060ea:	8000                	0x8000
800060ec:	06ec                	addi	a1,sp,844
800060ee:	8000                	0x8000
800060f0:	06c0                	addi	s0,sp,836
800060f2:	8000                	0x8000
800060f4:	06ec                	addi	a1,sp,844
800060f6:	8000                	0x8000
800060f8:	06ec                	addi	a1,sp,844
800060fa:	8000                	0x8000
800060fc:	06ec                	addi	a1,sp,844
800060fe:	8000                	0x8000
80006100:	06ec                	addi	a1,sp,844
80006102:	8000                	0x8000
80006104:	06ec                	addi	a1,sp,844
80006106:	8000                	0x8000
80006108:	06ec                	addi	a1,sp,844
8000610a:	8000                	0x8000
8000610c:	06ec                	addi	a1,sp,844
8000610e:	8000                	0x8000
80006110:	06ec                	addi	a1,sp,844
80006112:	8000                	0x8000
80006114:	06ec                	addi	a1,sp,844
80006116:	8000                	0x8000
80006118:	06d0                	addi	a2,sp,836
8000611a:	8000                	0x8000
8000611c:	06ec                	addi	a1,sp,844
8000611e:	8000                	0x8000
80006120:	06ec                	addi	a1,sp,844
80006122:	8000                	0x8000
80006124:	06ec                	addi	a1,sp,844
80006126:	8000                	0x8000
80006128:	06ec                	addi	a1,sp,844
8000612a:	8000                	0x8000
8000612c:	06ec                	addi	a1,sp,844
8000612e:	8000                	0x8000
80006130:	06ec                	addi	a1,sp,844
80006132:	8000                	0x8000
80006134:	06ec                	addi	a1,sp,844
80006136:	8000                	0x8000
80006138:	06ec                	addi	a1,sp,844
8000613a:	8000                	0x8000
8000613c:	06ec                	addi	a1,sp,844
8000613e:	8000                	0x8000
80006140:	0684                	addi	s1,sp,832
80006142:	8000                	0x8000
80006144:	06ec                	addi	a1,sp,844
80006146:	8000                	0x8000
80006148:	06ec                	addi	a1,sp,844
8000614a:	8000                	0x8000
8000614c:	06ec                	addi	a1,sp,844
8000614e:	8000                	0x8000
80006150:	06ec                	addi	a1,sp,844
80006152:	8000                	0x8000
80006154:	06ec                	addi	a1,sp,844
80006156:	8000                	0x8000
80006158:	06ec                	addi	a1,sp,844
8000615a:	8000                	0x8000
8000615c:	06ec                	addi	a1,sp,844
8000615e:	8000                	0x8000
80006160:	06ec                	addi	a1,sp,844
80006162:	8000                	0x8000
80006164:	06ec                	addi	a1,sp,844
80006166:	8000                	0x8000
80006168:	0660                	addi	s0,sp,780
8000616a:	8000                	0x8000
8000616c:	06ec                	addi	a1,sp,844
8000616e:	8000                	0x8000
80006170:	06ec                	addi	a1,sp,844
80006172:	8000                	0x8000
80006174:	06ec                	addi	a1,sp,844
80006176:	8000                	0x8000
80006178:	06ec                	addi	a1,sp,844
8000617a:	8000                	0x8000
8000617c:	06ec                	addi	a1,sp,844
8000617e:	8000                	0x8000
80006180:	06ec                	addi	a1,sp,844
80006182:	8000                	0x8000
80006184:	06ec                	addi	a1,sp,844
80006186:	8000                	0x8000
80006188:	06ec                	addi	a1,sp,844
8000618a:	8000                	0x8000
8000618c:	06ec                	addi	a1,sp,844
8000618e:	8000                	0x8000
80006190:	06ec                	addi	a1,sp,844
80006192:	8000                	0x8000
80006194:	06ec                	addi	a1,sp,844
80006196:	8000                	0x8000
80006198:	06ec                	addi	a1,sp,844
8000619a:	8000                	0x8000
8000619c:	06ec                	addi	a1,sp,844
8000619e:	8000                	0x8000
800061a0:	06ec                	addi	a1,sp,844
800061a2:	8000                	0x8000
800061a4:	06ec                	addi	a1,sp,844
800061a6:	8000                	0x8000
800061a8:	05d8                	addi	a4,sp,708
800061aa:	8000                	0x8000
800061ac:	7830                	flw	fa2,112(s0)
800061ae:	0000                	unimp
800061b0:	500a                	0x500a
800061b2:	6f72                	flw	ft10,28(sp)
800061b4:	206d6167          	0x206d6167
800061b8:	6168                	flw	fa0,68(a0)
800061ba:	78652073          	csrs	0x786,a0
800061be:	7469                	lui	s0,0xffffa
800061c0:	6465                	lui	s0,0x19
800061c2:	7720                	flw	fs0,104(a4)
800061c4:	7469                	lui	s0,0xffffa
800061c6:	2068                	fld	fa0,192(s0)
800061c8:	65646f63          	bltu	s0,s6,80006826 <__sbss_end+0x256>
800061cc:	003a                	c.slli	zero,0xe
800061ce:	0000                	unimp
800061d0:	000d                	c.nop	3
800061d2:	0000                	unimp
800061d4:	4449                	li	s0,18
800061d6:	454c                	lw	a1,12(a0)
800061d8:	0000                	unimp
800061da:	0000                	unimp
800061dc:	000a                	c.slli	zero,0x2
800061de:	0000                	unimp
800061e0:	72617453          	0x72617453
800061e4:	6974                	flw	fa3,84(a0)
800061e6:	676e                	flw	fa4,216(sp)
800061e8:	5420                	lw	s0,104(s0)
800061ea:	7361                	lui	t1,0xffff8
800061ec:	00203a6b          	0x203a6b
800061f0:	5245                	li	tp,-15
800061f2:	4f52                	lw	t5,20(sp)
800061f4:	2052                	fld	ft0,272(sp)
800061f6:	7845                	lui	a6,0xffff1
800061f8:	6574                	flw	fa3,76(a0)
800061fa:	6e72                	flw	ft8,28(sp)
800061fc:	6c61                	lui	s8,0x18
800061fe:	325f 495f 5152      	0x5152495f325f
80006204:	6148                	flw	fa0,4(a0)
80006206:	646e                	flw	fs0,216(sp)
80006208:	656c                	flw	fa1,76(a0)
8000620a:	2072                	fld	ft0,280(sp)
8000620c:	6e55                	lui	t3,0x15
8000620e:	776f6e6b          	0x776f6e6b
80006212:	2d6e                	fld	fs10,216(sp)
80006214:	76726553          	0x76726553
80006218:	6369                	lui	t1,0x1a
8000621a:	0065                	c.nop	25
8000621c:	7266                	flw	ft4,120(sp)
8000621e:	203a6d6f          	jal	s10,800acc20 <__stack_top+0x6c1d0>
80006222:	0000                	unimp
80006224:	736d                	lui	t1,0xffffb
80006226:	6f702067          	0x6f702067
8000622a:	6e69                	lui	t3,0x1a
8000622c:	6574                	flw	fa3,76(a0)
8000622e:	3a72                	fld	fs4,312(sp)
80006230:	0020                	addi	s0,sp,8
80006232:	0000                	unimp
80006234:	694d                	lui	s2,0x13
80006236:	686e                	flw	fa6,216(sp)
80006238:	2061                	jal	800062c0 <_write_r+0x2d4>
8000623a:	6174                	flw	fa3,68(a0)
8000623c:	49206b73          	csrrsi	s6,0x492,0
80006240:	3a44                	fld	fs1,176(a2)
80006242:	0020                	addi	s0,sp,8
80006244:	6441                	lui	s0,0x10
80006246:	6964                	flw	fs1,84(a0)
80006248:	676e                	flw	fa4,216(sp)
8000624a:	6120                	flw	fs0,64(a0)
8000624c:	6d20                	flw	fs0,88(a0)
8000624e:	69206773          	csrrsi	a4,0x692,0
80006252:	206e                	fld	ft0,216(sp)
80006254:	6874                	flw	fa3,84(s0)
80006256:	2065                	jal	800062fe <_write_r+0x312>
80006258:	4950                	lw	a2,20(a0)
8000625a:	4550                	lw	a2,12(a0)
8000625c:	7320                	flw	fs0,96(a4)
8000625e:	6f6c                	flw	fa1,92(a4)
80006260:	2074                	fld	fa3,192(s0)
80006262:	0000                	unimp
80006264:	7345                	lui	t1,0xffff1
80006266:	6570                	flw	fa2,76(a0)
80006268:	6172                	flw	ft2,28(sp)
8000626a:	646e                	flw	fs0,216(sp)
8000626c:	654d206f          	j	800d88c0 <__stack_top+0x97e70>
80006270:	736e                	flw	ft6,248(sp)
80006272:	6761                	lui	a4,0x18
80006274:	6d65                	lui	s10,0x19
80006276:	0a21                	addi	s4,s4,8
80006278:	0000                	unimp
8000627a:	0000                	unimp
8000627c:	6520                	flw	fs0,72(a0)
8000627e:	72657073          	csrci	0x726,10
80006282:	6e61                	lui	t3,0x18
80006284:	6f64                	flw	fs1,92(a4)
80006286:	6d20                	flw	fs0,88(a0)
80006288:	6e65                	lui	t3,0x19
8000628a:	65676173          	csrrsi	sp,0x656,14
8000628e:	206d                	jal	80006338 <_write_r+0x34c>
80006290:	0000                	unimp
80006292:	0000                	unimp
80006294:	6174                	flw	fa3,68(a0)
80006296:	6c736b73          	csrrsi	s6,0x6c7,6
8000629a:	0020746f          	jal	s0,8000d29c <__global_pointer$+0x663c>
8000629e:	0000                	unimp
800062a0:	654d                	lui	a0,0x13
800062a2:	736e                	flw	ft6,248(sp)
800062a4:	6761                	lui	a4,0x18
800062a6:	6d65                	lui	s10,0x19
800062a8:	5220                	lw	s0,96(a2)
800062aa:	6365                	lui	t1,0x19
800062ac:	6265                	lui	tp,0x19
800062ae:	6469                	lui	s0,0x1a
800062b0:	2161                	jal	80006738 <__sbss_end+0x168>
800062b2:	000a                	c.slli	zero,0x2
800062b4:	654e                	flw	fa0,208(sp)
800062b6:	70612077          	0x70612077
800062ba:	6c70                	flw	fa2,92(s0)
800062bc:	6369                	lui	t1,0x1a
800062be:	7461                	lui	s0,0xffff8
800062c0:	6f69                	lui	t5,0x1a
800062c2:	206e                	fld	ft0,216(sp)
800062c4:	6572                	flw	fa0,28(sp)
800062c6:	74736967          	0x74736967
800062ca:	7265                	lui	tp,0xffff9
800062cc:	6465                	lui	s0,0x19
800062ce:	2d20                	fld	fs0,88(a0)
800062d0:	4920                	lw	s0,80(a0)
800062d2:	3a44                	fld	fs1,176(a2)
800062d4:	0020                	addi	s0,sp,8
800062d6:	0000                	unimp
800062d8:	6920                	flw	fs0,80(a0)
800062da:	6c612073          	csrs	0x6c6,sp
800062de:	6f6c                	flw	fa1,92(a4)
800062e0:	65746163          	bltu	s0,s7,80006922 <__sbss_end+0x352>
800062e4:	2164                	fld	fs1,192(a0)
800062e6:	0000                	unimp
800062e8:	7041                	c.lui	zero,0xffff0
800062ea:	6c70                	flw	fa2,92(s0)
800062ec:	6369                	lui	t1,0x1a
800062ee:	7461                	lui	s0,0xffff8
800062f0:	6f69                	lui	t5,0x1a
800062f2:	206e                	fld	ft0,216(sp)
800062f4:	0000                	unimp
800062f6:	0000                	unimp
800062f8:	5309                	li	t1,-30
800062fa:	6174                	flw	fa3,68(a0)
800062fc:	7472                	flw	fs0,60(sp)
800062fe:	6320                	flw	fs0,64(a4)
80006300:	616d6d6f          	jal	s10,800dc916 <__stack_top+0x9bec6>
80006304:	646e                	flw	fs0,216(sp)
80006306:	7320                	flw	fs0,96(a4)
80006308:	6e65                	lui	t3,0x19
8000630a:	2074                	fld	fa3,192(s0)
8000630c:	6f74                	flw	fa3,92(a4)
8000630e:	6520                	flw	fs0,72(a0)
80006310:	6576                	flw	fa0,92(sp)
80006312:	7972                	flw	fs2,60(sp)
80006314:	7420                	flw	fs0,104(s0)
80006316:	7361                	lui	t1,0xffff8
80006318:	000a2e6b          	0xa2e6b
8000631c:	6554                	flw	fa3,12(a0)
8000631e:	6d72                	flw	fs10,28(sp)
80006320:	6e69                	lui	t3,0x1a
80006322:	6965                	lui	s2,0x19
80006324:	4120                	lw	s0,64(a0)
80006326:	4950                	lw	a2,20(a0)
80006328:	415f 7070 696c      	0x696c7070415f
8000632e:	69746163          	bltu	s0,s7,800069b0 <__sbss_end+0x3e0>
80006332:	74536e6f          	jal	t3,8003d276 <__heap_end+0xc826>
80006336:	7261                	lui	tp,0xffff8
80006338:	0a74                	addi	a3,sp,284
8000633a:	0000                	unimp
8000633c:	614c                	flw	fa1,4(a0)
8000633e:	6154                	flw	fa3,4(a0)
80006340:	00006b73          	csrrsi	s6,ustatus,0
80006344:	0a0d                	addi	s4,s4,3
80006346:	7246                	flw	ft4,112(sp)
80006348:	6565                	lui	a0,0x19
8000634a:	5452                	lw	s0,52(sp)
8000634c:	4520534f          	0x4520534f
80006350:	6178                	flw	fa4,68(a0)
80006352:	706d                	c.lui	zero,0xffffb
80006354:	656c                	flw	fa1,76(a0)
80006356:	0a0d                	addi	s4,s4,3
80006358:	0000                	unimp
8000635a:	0000                	unimp
8000635c:	200a                	fld	ft0,128(sp)
8000635e:	6f726843          	fmadd.q	fa6,ft4,fs7,fa3,unknown
80006362:	6f6e                	flw	ft10,216(sp)
80006364:	6c702073          	csrr	zero,0x6c7
80006368:	7461                	lui	s0,0xffff8
8000636a:	6f66                	flw	ft10,88(sp)
8000636c:	6d72                	flw	fs10,28(sp)
8000636e:	6920                	flw	fs0,80(a0)
80006370:	696e                	flw	fs2,216(sp)
80006372:	6974                	flw	fa3,84(a0)
80006374:	6c61                	lui	s8,0x18
80006376:	7a69                	lui	s4,0xffffa
80006378:	6e69                	lui	t3,0x1a
8000637a:	2e2e2e67          	0x2e2e2e67
8000637e:	0a20                	addi	s0,sp,280
80006380:	0000                	unimp
80006382:	0000                	unimp
80006384:	200a                	fld	ft0,128(sp)
80006386:	6854                	flw	fa3,20(s0)
80006388:	7369                	lui	t1,0xffffa
8000638a:	7420                	flw	fs0,104(s0)
8000638c:	7265                	lui	tp,0xffff9
8000638e:	696d                	lui	s2,0x1b
80006390:	616e                	flw	ft2,216(sp)
80006392:	206c                	fld	fa1,192(s0)
80006394:	6562                	flw	fa0,24(sp)
80006396:	6f6c                	flw	fa1,92(a4)
80006398:	676e                	flw	fa4,216(sp)
8000639a:	6f742073          	csrs	0x6f7,s0
8000639e:	7420                	flw	fs0,104(s0)
800063a0:	6568                	flw	fa0,76(a0)
800063a2:	6120                	flw	fs0,64(a0)
800063a4:	6464                	flw	fs1,76(s0)
800063a6:	6572                	flw	fa0,28(sp)
800063a8:	203a7373          	csrrci	t1,hideleg,20
800063ac:	0000                	unimp
800063ae:	0000                	unimp
800063b0:	000a                	c.slli	zero,0x2
800063b2:	0000                	unimp
800063b4:	200a                	fld	ft0,128(sp)
800063b6:	6854                	flw	fa3,20(s0)
800063b8:	7369                	lui	t1,0xffffa
800063ba:	7020                	flw	fs0,96(s0)
800063bc:	6f72                	flw	ft10,28(sp)
800063be:	73736563          	bltu	t1,s7,80006ae8 <__sbss_end+0x518>
800063c2:	6920726f          	jal	tp,8000da54 <__global_pointer$+0x6df4>
800063c6:	68742073          	csrs	0x687,s0
800063ca:	2065                	jal	80006472 <_impure_ptr+0x2>
800063cc:	626f6c47          	fmsub.d	fs8,ft10,ft6,fa2,unknown
800063d0:	6c61                	lui	s8,0x18
800063d2:	4d20                	lw	s0,88(a0)
800063d4:	7361                	lui	t1,0xffff8
800063d6:	6574                	flw	fa3,76(a0)
800063d8:	3a72                	fld	fs4,312(sp)
800063da:	0a20                	addi	s0,sp,280
800063dc:	0000                	unimp
800063de:	0000                	unimp
800063e0:	626f6c47          	fmsub.d	fs8,ft10,ft6,fa2,unknown
800063e4:	6c61                	lui	s8,0x18
800063e6:	614d                	addi	sp,sp,176
800063e8:	72657473          	csrrci	s0,0x726,10
800063ec:	0000                	unimp
800063ee:	0000                	unimp
800063f0:	200a                	fld	ft0,128(sp)
800063f2:	6854                	flw	fa3,20(s0)
800063f4:	7369                	lui	t1,0xffffa
800063f6:	7020                	flw	fs0,96(s0)
800063f8:	6f72                	flw	ft10,28(sp)
800063fa:	73736563          	bltu	t1,s7,80006b24 <__sbss_end+0x554>
800063fe:	6920726f          	jal	tp,8000da90 <__global_pointer$+0x6e30>
80006402:	20612073          	csrs	0x206,sp
80006406:	76616c53          	0x76616c53
8000640a:	3a65                	jal	80005dc2 <main+0xb6>
8000640c:	0a20                	addi	s0,sp,280
8000640e:	0000                	unimp
80006410:	6c41                	lui	s8,0x10
80006412:	7669                	lui	a2,0xffffa
80006414:	0065                	c.nop	25
80006416:	0000                	unimp
80006418:	5020                	lw	s0,96(s0)
8000641a:	2045                	jal	800064ba <__data_load+0x3a>
8000641c:	7369                	lui	t1,0xffffa
8000641e:	6120                	flw	fs0,64(a0)
80006420:	696c                	flw	fa1,84(a0)
80006422:	6576                	flw	fa0,92(sp)
80006424:	2d20                	fld	fs0,88(a0)
80006426:	0020                	addi	s0,sp,8
80006428:	2d20                	fld	fs0,88(a0)
8000642a:	0a0d                	addi	s4,s4,3
8000642c:	0000                	unimp
8000642e:	0000                	unimp
80006430:	626f6c47          	fmsub.d	fs8,ft10,ft6,fa2,unknown
80006434:	6c61                	lui	s8,0x18
80006436:	614d                	addi	sp,sp,176
80006438:	72657473          	csrrci	s0,0x726,10
8000643c:	6341                	lui	t1,0x10
8000643e:	6974                	flw	fa3,84(a0)
80006440:	6576                	flw	fa0,92(sp)
80006442:	0000                	unimp
80006444:	4720                	lw	s0,72(a4)
80006446:	6f6c                	flw	fa1,92(a4)
80006448:	6162                	flw	ft2,24(sp)
8000644a:	4d6c                	lw	a1,92(a0)
8000644c:	7361                	lui	t1,0xffff8
8000644e:	6574                	flw	fa3,76(a0)
80006450:	5272                	lw	tp,60(sp)
80006452:	6974756f          	jal	a0,8004e2e8 <__stack_top+0xd898>
80006456:	656e                	flw	fa0,216(sp)
80006458:	2e2e                	fld	ft8,200(sp)
8000645a:	0d2e                	slli	s10,s10,0xb
8000645c:	000a                	c.slli	zero,0x2
	...
