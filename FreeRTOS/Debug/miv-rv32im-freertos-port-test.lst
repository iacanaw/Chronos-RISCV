
miv-rv32im-freertos-port-test.elf:     file format elf32-littleriscv
miv-rv32im-freertos-port-test.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000000

Program Header:
    LOAD off    0x00001000 vaddr 0x80000000 paddr 0x80000000 align 2**12
         filesz 0x00007960 memsz 0x00042050 flags rwx

Sections:
Idx Name           Size      VMA       LMA       File off  Algn  Flags
  0 .text          00007860  80000000  80000000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sdata         00000020  80007860  80007860  00008860  2**4  CONTENTS, ALLOC, LOAD, DATA
  2 .data          000000e0  80007880  80007880  00008880  2**4  CONTENTS, ALLOC, LOAD, DATA
  3 .sbss          00000070  80007960  80007960  00008960  2**4  ALLOC
  4 .bss           0001a680  800079d0  800079d0  00008960  2**4  ALLOC
  5 .heap          00010000  80022050  80022050  00008960  2**4  ALLOC
  6 .stack         00010000  80032050  80032050  00008960  2**4  ALLOC
  7 .debug_line    0000b2e7  00000000  00000000  00008960  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_info    0000f791  00000000  00000000  00013c47  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev  00002c53  00000000  00000000  000233d8  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000978  00000000  00000000  00026030  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_str     00012db6  00000000  00000000  000269a8  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges  00000840  00000000  00000000  0003975e  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro   00005967  00000000  00000000  00039f9e  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment       00000039  00000000  00000000  0003f905  2**0  CONTENTS, READONLY
 15 .debug_frame   000022a8  00000000  00000000  0003f940  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
80000000 l    d  .text	00000000 .text
80007860 l    d  .sdata	00000000 .sdata
80007880 l    d  .data	00000000 .data
80007960 l    d  .sbss	00000000 .sbss
800079d0 l    d  .bss	00000000 .bss
80022050 l    d  .heap	00000000 .heap
80032050 l    d  .stack	00000000 .stack
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./riscv_hal/entry.o
8000000c l       .text	00000000 handle_reset
80000004 l       .text	00000000 nmi_vector
80000008 l       .text	00000000 trap_vector
80000030 l       .text	00000000 trap_entry
00000000 l    df *ABS*	00000000 init.c
80000180 l     F .text	00000050 zero_section
00000000 l    df *ABS*	00000000 riscv_hal.c
80000258 l     F .text	000000b8 PLIC_DisableIRQ
80000310 l     F .text	00000044 PLIC_ClaimIRQ
80000354 l     F .text	0000004c PLIC_CompleteIRQ
80007960 l     O .sbss	00000008 g_systick_increment
00000000 l    df *ABS*	00000000 riscv_hal_stubs.c
00000000 l    df *ABS*	00000000 syscall.c
80007968 l     O .sbss	00000008 g_stdio_uart
80007970 l     O .sbss	00000004 g_stdio_uart_init_done
80000e7c l     F .text	00000030 stub
00000000 l    df *ABS*	00000000 core_uart_apb.c
00000000 l    df *ABS*	00000000 heap_2.c
800079d0 l     O .bss	00019000 ucHeap
80007974 l     O .sbss	00000008 xStart
8000797c l     O .sbss	00000008 xEnd
80007860 l     O .sdata	00000004 xFreeBytesRemaining
80007984 l     O .sbss	00000004 xHeapHasBeenInitialised.2777
80001590 l     F .text	00000074 prvHeapInit
00000000 l    df *ABS*	00000000 port.c
80001604 l     F .text	0000004c raise_soft_interrupt
80007864 l     O .sdata	00000004 uxCriticalNesting
80007868 l     O .sdata	00000004 mtime
8000786c l     O .sdata	00000004 mtimecmp
800016c4 l     F .text	000000cc prvSetNextTimerInterrupt
8000185c l     F .text	0000002c prvTaskExitError
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 tasks.c
800209d0 l     O .bss	00000064 pxReadyTasksLists
80020a34 l     O .bss	00000014 xDelayedTaskList1
80020a48 l     O .bss	00000014 xDelayedTaskList2
80007990 l     O .sbss	00000004 pxDelayedTaskList
80007994 l     O .sbss	00000004 pxOverflowDelayedTaskList
80020a5c l     O .bss	00000014 xPendingReadyList
80020a70 l     O .bss	00000014 xTasksWaitingTermination
80007998 l     O .sbss	00000004 uxTasksDeleted
80020a84 l     O .bss	00000014 xSuspendedTaskList
8000799c l     O .sbss	00000004 uxCurrentNumberOfTasks
800079a0 l     O .sbss	00000004 xTickCount
800079a4 l     O .sbss	00000004 uxTopReadyPriority
800079a8 l     O .sbss	00000004 xSchedulerRunning
800079ac l     O .sbss	00000004 uxPendedTicks
800079b0 l     O .sbss	00000004 xYieldPending
800079b4 l     O .sbss	00000004 xNumOfOverflows
800079b8 l     O .sbss	00000004 uxTaskNumber
800079bc l     O .sbss	00000004 xNextTaskUnblockTime
800079c0 l     O .sbss	00000004 uxSchedulerSuspended
80002b10 l     F .text	000000c0 prvAllocateTCBAndStack
800027f0 l     F .text	00000138 prvInitialiseTCBVariables
80002928 l     F .text	000000c0 prvInitialiseTaskLists
80002c10 l     F .text	00000060 prvResetNextTaskUnblockTime
80002a88 l     F .text	00000088 prvAddCurrentTaskToDelayedList
800027bc l     F .text	00000034 prvIdleTask
800029e8 l     F .text	000000a0 prvCheckTasksWaitingTermination
80002bd0 l     F .text	00000040 prvDeleteTCB
00000000 l    df *ABS*	00000000 chronos.c
80002c98 l     F .text	000000b4 PLIC_EnableIRQ
80002d4c l     F .text	0000003c PLIC_SetPriority
00000000 l    df *ABS*	00000000 globalMaster.c
00000000 l    df *ABS*	00000000 applications.c
00000000 l    df *ABS*	00000000 packet.c
00000000 l    df *ABS*	00000000 dvfs.c
00000000 l    df *ABS*	00000000 thermal.c
00000000 l    df *ABS*	00000000 main.c
80006c64 l     F .text	000000d0 PLIC_init
80006e88 l     F .text	00000094 GlobalManagerTask
00000000 l    df *ABS*	00000000 syswrite.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 impure.c
80007900 l     O .data	00000060 impure_data
80001684 g     F .text	00000040 vPortExitCritical
00010000 g       *ABS*	00000000 STACK_SIZE
80020a98 g     O .bss	00000004 SendingSlot
80000a54  w    F .text	00000020 External_11_IRQHandler
80008060 g       .sdata	00000000 __global_pointer$
80002f24 g     F .text	00000048 printsv
80007880 g       *ABS*	00000000 __data_load
8000191c g     F .text	000000e4 SysTick_Handler
80000994  w    F .text	00000020 External_5_IRQHandler
80006740 g     F .text	000000a8 API_PipeInitialization
80004c20 g     F .text	00000128 API_TilesReset
8000105c g       .text	00000000 HW_get_8bit_reg_field
80003120 g     F .text	00000080 reverse
80003fb8 g     F .text	00000074 API_AddPendingReq
80021514 g     O .bss	00000024 priorityMatrix
80006a70 g     F .text	00000094 API_checkPipe
8000798c g     O .sbss	00000004 pxCurrentTCB
80007960 g       .sbss	00000000 __sbss_start
80002d88 g     F .text	000000f0 Chronos_init
80006b44 g     F .text	00000030 API_setFreqScale
80021510 g     O .bss	00000004 errno
80020a9c g     O .bss	000000f0 ServicePipe
80000f94 g       .text	00000000 HW_set_32bit_reg
80000b74  w    F .text	00000020 External_20_IRQHandler
80001a00 g     F .text	00000044 xPortStartScheduler
800003a0 g     F .text	00000024 __enable_irq
80001f18 g     F .text	0000021c xTaskGenericCreate
80006934 g     F .text	000000a0 API_GetServiceSlot
80007860 g       .sdata	00000000 __sdata_start
800014c4 g     F .text	000000cc vPortFree
80020b8c g     O .bss	00000004 messageID
80003380 g     F .text	000000a0 API_PushSendQueue
80022040 g     O .bss	00000008 g_uart
80001034 g       .text	00000000 HW_set_8bit_reg_field
80000c34  w    F .text	00000020 External_26_IRQHandler
800007a4 g     F .text	00000170 handle_trap
80004b3c g     F .text	00000084 API_GetApplicationFreeSlot
80001bec g     F .text	00000088 vListInsertEnd
00080000 g       *ABS*	00000000 RAM_SIZE
80000a34  w    F .text	00000020 External_10_IRQHandler
80021538 g     O .bss	00000780 applications
80002ee8 g     F .text	0000003c printi
80001bc4 g     F .text	00000028 vListInitialiseItem
8000402c g     F .text	00000818 API_NI_Handler
80000cb4  w    F .text	00000020 External_30_IRQHandler
80000b14  w    F .text	00000020 External_17_IRQHandler
80032050 g       .heap	00000000 _heap_end
80000e2c g     F .text	00000050 _isatty
80022050 g       .bss	00000000 __bss_end
80000510 g     F .text	00000294 handle_syscall
80004958 g     F .text	000001e4 API_AddApplication
800012e8 g     F .text	000001dc pvPortMalloc
800067e8 g     F .text	0000014c API_GetMessageSlot
800050c8 g     F .text	00000360 API_DealocateTask
800001d0 g     F .text	0000006c _init
80001b60 g     F .text	00000064 vListInitialise
80001024 g       .text	00000000 HW_set_8bit_reg
8000102c g       .text	00000000 HW_get_8bit_reg
800024ac g     F .text	00000038 xTaskGetTickCount
80004df0 g     F .text	000002d8 API_AllocateTasks
80005e74 g     F .text	000000b0 API_TaskListInit
8000603c g     F .text	000002d8 API_TaskAllocation
800056b8 g     F .text	00000140 API_ClearTaskSlotFromTile
80005fb8 g     F .text	00000084 API_GetFreeTaskSlot
80006c10 g     F .text	00000054 resetExecutedInstructions
800079d0 g       .sbss	00000000 __sbss_end
800063f8 g     F .text	000000e4 API_TaskStart
80000fa4 g       .text	00000000 HW_set_32bit_reg_field
80006f1c g     F .text	00000018 write
80005a90 g     F .text	00000128 API_TaskAllocated
80006e58 g     F .text	00000014 vApplicationMallocFailedHook
80000c14  w    F .text	00000020 External_25_IRQHandler
80042050 g       .stack	00000000 __stack_top
80000c94  w    F .text	00000020 External_29_IRQHandler
80020b90 g     O .bss	00000034 incommingPacket
80002134 g     F .text	000000dc vTaskDelete
80001238 g     F .text	000000b0 UART_polled_tx_string
80000cf4 g     F .text	000000e8 write_hex
80000a94  w    F .text	00000020 External_13_IRQHandler
800030a8 g     F .text	0000002c External_2_IRQHandler
00010000 g       *ABS*	00000000 HEAP_SIZE
80000a74  w    F .text	00000020 External_12_IRQHandler
80003340 g     F .text	00000040 makeAddress
80001184 g     F .text	000000b4 UART_send
80003020 g     F .text	0000004c SendRaw
80000000 g       .text	00000000 _start
80006b04 g     F .text	00000040 API_setFreqIdle
80002324 g     F .text	00000028 vTaskSuspendAll
80003420 g     F .text	0000008c API_PopSendQueue
800003c4 g     F .text	000000a8 handle_m_timer_interrupt
80002e78 g     F .text	00000070 prints
80006b74 g     F .text	0000009c printExecutedInstructions
80001d48 g     F .text	00000098 uxListRemove
80005bb8 g     F .text	000002bc API_ApplicationStart
8000306c g     F .text	0000003c NI_enable_irq
80007860 g       *ABS*	00000000 __sdata_load
80007960 g       .data	00000000 __data_end
800026d0 g     F .text	000000ec vTaskSwitchContext
80000b34  w    F .text	00000020 External_18_IRQHandler
80000fcc g       .text	00000000 HW_get_32bit_reg_field
800031a0 g     F .text	000001a0 myItoa
80000bb4  w    F .text	00000020 External_22_IRQHandler
80000ad4  w    F .text	00000020 External_15_IRQHandler
80001b38 g     F .text	00000028 vPortYield
80005f24 g     F .text	00000094 API_GetCurrentTaskSlot
80000000 g       *ABS*	00000000 RAM_START_ADDRESS
800079d0 g       .bss	00000000 __bss_start
80021cb8 g     O .bss	00000318 TaskList
80000af4  w    F .text	00000020 External_16_IRQHandler
80001de0 g     F .text	000000e8 memset
80006d34 g     F .text	00000124 main
800030d4 g     F .text	0000004c mySwap
80001c74 g     F .text	000000d4 vListInsert
80000c74  w    F .text	00000020 External_28_IRQHandler
80003e7c g     F .text	0000013c API_CheckMessagePipe
80004bc0 g     F .text	00000060 API_ApplicationsReset
80002c70 g     F .text	00000028 xTaskGetCurrentTaskHandle
80000fe4 g       .text	00000000 HW_get_16bit_reg
80007880 g       .sdata	00000000 __sdata_end
800064dc g     F .text	00000264 API_FinishRunningTask
80032050 g       .heap	00000000 __heap_end
80000ab4  w    F .text	00000020 External_14_IRQHandler
8000555c g     F .text	0000015c API_GetTaskSlotFromTile
80005428 g     F .text	00000134 getNextPriorityAddr
800058e4 g     F .text	000001ac API_RepositoryAllocation
8000023c g     F .text	0000001c _fini
8000234c g     F .text	00000160 xTaskResumeAll
80002294 g     F .text	00000090 vTaskStartScheduler
80003740 g     F .text	000002f8 API_SendMessage
80007880 g     O .data	00000080 ext_irq_handler_table
80020bc4 g     O .bss	00000020 SendingQueue
80006f34 g     F .text	00000054 _write_r
80000fec g       .text	00000000 HW_set_16bit_reg_field
800035dc g     F .text	00000164 API_AckTaskAllocation
80020be4 g     O .bss	00000004 SendingQueue_tail
80007874 g     O .sdata	00000004 _impure_ptr
80032050 g       .stack	00000000 __stack_bottom
80001a44 g     F .text	000000f4 Software_IRQHandler
800069d4 g     F .text	0000009c API_ClearPipeSlot
80000c54  w    F .text	00000020 External_27_IRQHandler
80007870 g     O .sdata	00000004 frequencyScale
800009f4  w    F .text	00000020 External_8_IRQHandler
80000a14  w    F .text	00000020 External_9_IRQHandler
80022050 g       .heap	00000000 __heap_start
80000914  w    F .text	00000020 Invalid_IRQHandler
800034ac g     F .text	00000130 API_Try2Send
80000954  w    F .text	00000020 External_3_IRQHandler
800024e4 g     F .text	000001ec xTaskIncrementTick
80006314 g     F .text	000000e4 API_GetTaskSlot
80007988 g     O .sbss	00000004 g_startscheduler
80002ff8 g     F .text	00000028 getYpos
80000b54  w    F .text	00000020 External_19_IRQHandler
80000eac g     F .text	000000e8 _write
80002fcc g     F .text	0000002c getXpos
80022050 g       .bss	00000000 _end
80001790 g     F .text	000000cc vPortSetupTimer
80020be8 g     O .bss	00000014 str
80020bfc g     O .bss	00000004 SendingQueue_front
80004844 g     F .text	00000114 API_RepositoryWakeUp
80002f6c g     F .text	00000060 printsvsv
80002210 g     F .text	00000084 vTaskDelay
8000106c g     F .text	00000118 UART_init
80000f9c g       .text	00000000 HW_get_32bit_reg
80000ddc g     F .text	00000050 _exit
80000fdc g       .text	00000000 HW_set_16bit_reg
80003bc8 g     F .text	000002b4 API_SendMessageReq
80001ec8 g     F .text	00000050 strlen
80001888 g     F .text	00000094 pxPortInitialiseStack
80000934  w    F .text	00000020 External_1_IRQHandler
80003a38 g     F .text	00000190 API_SendFinishTask
800009b4  w    F .text	00000020 External_6_IRQHandler
80000cd4  w    F .text	00000020 External_31_IRQHandler
800057f8 g     F .text	000000ec API_GetSystemTasksSlots
80001650 g     F .text	00000034 vPortEnterCritical
80007880 g       .data	00000000 __data_start
80022048 g     O .bss	00000004 ProcessorAddr
80021fd0 g     O .bss	00000004 priorityPointer
80000b94  w    F .text	00000020 External_21_IRQHandler
80021fd4 g     O .bss	0000006c Tiles
800004e0 g     F .text	00000030 handle_m_soft_interrupt
8000046c g     F .text	00000074 handle_m_ext_interrupt
80001014 g       .text	00000000 HW_get_16bit_reg_field
80000bd4  w    F .text	00000020 External_23_IRQHandler
80000bf4  w    F .text	00000020 External_24_IRQHandler
80000974  w    F .text	00000020 External_4_IRQHandler
80020c00 g     O .bss	00000910 MessagePipe
80004d48 g     F .text	000000a8 GeneratePatternMatrix
800009d4  w    F .text	00000020 External_7_IRQHandler
80006e6c g     F .text	0000001c vApplicationIdleHook



Disassembly of section .text:

80000000 <_start>:
_start():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:30

  .section      .text.entry
  .globl _start

_start:
  j handle_reset
80000000:	00c0006f          	j	8000000c <handle_reset>

80000004 <nmi_vector>:
nmi_vector():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:33

nmi_vector:
  j nmi_vector
80000004:	0000006f          	j	80000004 <nmi_vector>

80000008 <trap_vector>:
trap_vector():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:36

trap_vector:
  j trap_entry
80000008:	0280006f          	j	80000030 <trap_entry>

8000000c <handle_reset>:
handle_reset():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:39

handle_reset:
  la t0, trap_entry
8000000c:	00000297          	auipc	t0,0x0
80000010:	02428293          	addi	t0,t0,36 # 80000030 <trap_entry>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:40
  csrw mtvec, t0
80000014:	30529073          	csrw	mtvec,t0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:41
  csrwi mstatus, 0
80000018:	30005073          	csrwi	mstatus,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:42
  csrwi mie, 0
8000001c:	30405073          	csrwi	mie,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:60
  lui t0, 0x0
  fscsr t0
#endif

  # initialize global pointer
  la gp, __global_pointer$
80000020:	00018193          	mv	gp,gp
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:63

  # initialize stack pointer
  la sp, __stack_top
80000024:	00042117          	auipc	sp,0x42
80000028:	02c10113          	addi	sp,sp,44 # 80042050 <__stack_top>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:66

  # perform the rest of initialization in C
  j _init
8000002c:	1a40006f          	j	800001d0 <_init>

80000030 <trap_entry>:
trap_entry():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:70


trap_entry:
  addi sp, sp, -33*REGBYTES
80000030:	f7c10113          	addi	sp,sp,-132
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:72

  SREG x1, 0 * REGBYTES(sp)
80000034:	00112023          	sw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:73
  SREG x2, 1 * REGBYTES(sp)
80000038:	00212223          	sw	sp,4(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:74
  SREG x3, 2 * REGBYTES(sp)
8000003c:	00312423          	sw	gp,8(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:75
  SREG x4, 3 * REGBYTES(sp)
80000040:	00412623          	sw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:76
  SREG x5, 4 * REGBYTES(sp)
80000044:	00512823          	sw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:77
  SREG x6, 5 * REGBYTES(sp)
80000048:	00612a23          	sw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:78
  SREG x7, 6 * REGBYTES(sp)
8000004c:	00712c23          	sw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:79
  SREG x8, 7 * REGBYTES(sp)
80000050:	00812e23          	sw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:80
  SREG x9, 8 * REGBYTES(sp)
80000054:	02912023          	sw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:81
  SREG x10, 9 * REGBYTES(sp)
80000058:	02a12223          	sw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:82
  SREG x11, 10 * REGBYTES(sp)
8000005c:	02b12423          	sw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:83
  SREG x12, 11 * REGBYTES(sp)
80000060:	02c12623          	sw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:84
  SREG x13, 12 * REGBYTES(sp)
80000064:	02d12823          	sw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:85
  SREG x14, 13 * REGBYTES(sp)
80000068:	02e12a23          	sw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:86
  SREG x15, 14 * REGBYTES(sp)
8000006c:	02f12c23          	sw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:87
  SREG x16, 15 * REGBYTES(sp)
80000070:	03012e23          	sw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:88
  SREG x17, 16 * REGBYTES(sp)
80000074:	05112023          	sw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:89
  SREG x18, 17 * REGBYTES(sp)
80000078:	05212223          	sw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:90
  SREG x19, 18 * REGBYTES(sp)
8000007c:	05312423          	sw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:91
  SREG x20, 19 * REGBYTES(sp)
80000080:	05412623          	sw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:92
  SREG x21, 20 * REGBYTES(sp)
80000084:	05512823          	sw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:93
  SREG x22, 21 * REGBYTES(sp)
80000088:	05612a23          	sw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:94
  SREG x23, 22 * REGBYTES(sp)
8000008c:	05712c23          	sw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:95
  SREG x24, 23 * REGBYTES(sp)
80000090:	05812e23          	sw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:96
  SREG x25, 24 * REGBYTES(sp)
80000094:	07912023          	sw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:97
  SREG x26, 25 * REGBYTES(sp)
80000098:	07a12223          	sw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:98
  SREG x27, 26 * REGBYTES(sp)
8000009c:	07b12423          	sw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:99
  SREG x28, 27 * REGBYTES(sp)
800000a0:	07c12623          	sw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:100
  SREG x29, 28 * REGBYTES(sp)
800000a4:	07d12823          	sw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:101
  SREG x30, 29 * REGBYTES(sp)
800000a8:	07e12a23          	sw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:102
  SREG x31, 30 * REGBYTES(sp)
800000ac:	07f12c23          	sw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:105

  # Stores the return addr in the stack
  csrr t0, mepc
800000b0:	341022f3          	csrr	t0,mepc
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:106
  SREG t0, 31 * REGBYTES(sp)
800000b4:	06512e23          	sw	t0,124(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:109

  # store the MIE value in the stack
  li t0, MSTATUS_MIE
800000b8:	00800293          	li	t0,8
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:110
  csrrc t0, mstatus, t0 
800000bc:	3002b2f3          	csrrc	t0,mstatus,t0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:111
  SREG t0, 32 * REGBYTES(sp) 
800000c0:	08512023          	sw	t0,128(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:113

  csrr a0, mcause
800000c4:	34202573          	csrr	a0,mcause
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:114
  csrr a1, mepc
800000c8:	341025f3          	csrr	a1,mepc
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:115
  mv a2, sp
800000cc:	00010613          	mv	a2,sp
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:116
  call handle_trap
800000d0:	6d4000ef          	jal	ra,800007a4 <handle_trap>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:117
  csrw mepc, a0
800000d4:	34151073          	csrw	mepc,a0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:120

  # Remain in M-mode after mret
  li t0, MSTATUS_MPP
800000d8:	000022b7          	lui	t0,0x2
800000dc:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:121
  csrs mstatus, t0
800000e0:	3002a073          	csrs	mstatus,t0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:126
  #li t0, MSTATUS_MPIE
  #csrs mstatus, t0

  # Restore the interruption status after MRET
  LREG x5, 32 * REGBYTES(sp)  # load the old MIE value to t0
800000e4:	08012283          	lw	t0,128(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:127
  slli t0, t0, 4              # shifts it to the MPIE position
800000e8:	00429293          	slli	t0,t0,0x4
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:128
  csrs mstatus, t0            # restore the MIE value into the MPIE
800000ec:	3002a073          	csrs	mstatus,t0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:130
  
  LREG x1, 0 * REGBYTES(sp)
800000f0:	00012083          	lw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:131
  LREG x2, 1 * REGBYTES(sp)
800000f4:	00412103          	lw	sp,4(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:132
  LREG x3, 2 * REGBYTES(sp)
800000f8:	00812183          	lw	gp,8(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:133
  LREG x4, 3 * REGBYTES(sp)
800000fc:	00c12203          	lw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:134
  LREG x5, 4 * REGBYTES(sp)
80000100:	01012283          	lw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:135
  LREG x6, 5 * REGBYTES(sp)
80000104:	01412303          	lw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:136
  LREG x7, 6 * REGBYTES(sp)
80000108:	01812383          	lw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:137
  LREG x8, 7 * REGBYTES(sp)
8000010c:	01c12403          	lw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:138
  LREG x9, 8 * REGBYTES(sp)
80000110:	02012483          	lw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:139
  LREG x10, 9 * REGBYTES(sp)
80000114:	02412503          	lw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:140
  LREG x11, 10 * REGBYTES(sp)
80000118:	02812583          	lw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:141
  LREG x12, 11 * REGBYTES(sp)
8000011c:	02c12603          	lw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:142
  LREG x13, 12 * REGBYTES(sp)
80000120:	03012683          	lw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:143
  LREG x14, 13 * REGBYTES(sp)
80000124:	03412703          	lw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:144
  LREG x15, 14 * REGBYTES(sp)
80000128:	03812783          	lw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:145
  LREG x16, 15 * REGBYTES(sp)
8000012c:	03c12803          	lw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:146
  LREG x17, 16 * REGBYTES(sp)
80000130:	04012883          	lw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:147
  LREG x18, 17 * REGBYTES(sp)
80000134:	04412903          	lw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:148
  LREG x19, 18 * REGBYTES(sp)
80000138:	04812983          	lw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:149
  LREG x20, 19 * REGBYTES(sp)
8000013c:	04c12a03          	lw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:150
  LREG x21, 20 * REGBYTES(sp)
80000140:	05012a83          	lw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:151
  LREG x22, 21 * REGBYTES(sp)
80000144:	05412b03          	lw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:152
  LREG x23, 22 * REGBYTES(sp)
80000148:	05812b83          	lw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:153
  LREG x24, 23 * REGBYTES(sp)
8000014c:	05c12c03          	lw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:154
  LREG x25, 24 * REGBYTES(sp)
80000150:	06012c83          	lw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:155
  LREG x26, 25 * REGBYTES(sp)
80000154:	06412d03          	lw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:156
  LREG x27, 26 * REGBYTES(sp)
80000158:	06812d83          	lw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:157
  LREG x28, 27 * REGBYTES(sp)
8000015c:	06c12e03          	lw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:158
  LREG x29, 28 * REGBYTES(sp)
80000160:	07012e83          	lw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:159
  LREG x30, 29 * REGBYTES(sp)
80000164:	07412f03          	lw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:160
  LREG x31, 30 * REGBYTES(sp)
80000168:	07812f83          	lw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:162

  addi sp, sp, 33*REGBYTES
8000016c:	08410113          	addi	sp,sp,132
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:163
  mret
80000170:	30200073          	mret
	...

80000180 <zero_section>:
zero_section():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:47
        ++p_vma;
    }
}

static void zero_section(uint32_t * start, uint32_t * end)
{
80000180:	fd010113          	addi	sp,sp,-48
80000184:	02812623          	sw	s0,44(sp)
80000188:	03010413          	addi	s0,sp,48
8000018c:	fca42e23          	sw	a0,-36(s0)
80000190:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:48
    uint32_t * p_zero = start;
80000194:	fdc42783          	lw	a5,-36(s0)
80000198:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:50
    
    while(p_zero <= end)
8000019c:	0180006f          	j	800001b4 <zero_section+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:52
    {
        *p_zero = 0;
800001a0:	fec42783          	lw	a5,-20(s0)
800001a4:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:53
        ++p_zero;
800001a8:	fec42783          	lw	a5,-20(s0)
800001ac:	00478793          	addi	a5,a5,4
800001b0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:50
    while(p_zero <= end)
800001b4:	fec42703          	lw	a4,-20(s0)
800001b8:	fd842783          	lw	a5,-40(s0)
800001bc:	fee7f2e3          	bleu	a4,a5,800001a0 <zero_section+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:55
    }
}
800001c0:	00000013          	nop
800001c4:	02c12403          	lw	s0,44(sp)
800001c8:	03010113          	addi	sp,sp,48
800001cc:	00008067          	ret

800001d0 <_init>:
_init():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:58

void _init(void)
{
800001d0:	fe010113          	addi	sp,sp,-32
800001d4:	00112e23          	sw	ra,28(sp)
800001d8:	00812c23          	sw	s0,24(sp)
800001dc:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:60
    extern int main(int, char**);
    const char *argv0 = "hello";
800001e0:	800077b7          	lui	a5,0x80007
800001e4:	f9078793          	addi	a5,a5,-112 # 80006f90 <__stack_top+0xfffc4f40>
800001e8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:61
    char *argv[] = {(char *)argv0, NULL, NULL};
800001ec:	fec42783          	lw	a5,-20(s0)
800001f0:	fef42023          	sw	a5,-32(s0)
800001f4:	fe042223          	sw	zero,-28(s0)
800001f8:	fe042423          	sw	zero,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:66

// Imperas - this is loaded directly by simulator so must not be copied
//    copy_section(&__sdata_load, &__sdata_start, &__sdata_end);
//    copy_section(&__data_load, &__data_start, &__data_end);
    zero_section(&__sbss_start, &__sbss_end);
800001fc:	97018593          	addi	a1,gp,-1680 # 800079d0 <__sbss_end>
80000200:	90018513          	addi	a0,gp,-1792 # 80007960 <__data_end>
80000204:	f7dff0ef          	jal	ra,80000180 <zero_section>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:67
    zero_section(&__bss_start, &__bss_end);
80000208:	800227b7          	lui	a5,0x80022
8000020c:	05078593          	addi	a1,a5,80 # 80022050 <__stack_top+0xfffe0000>
80000210:	97018513          	addi	a0,gp,-1680 # 800079d0 <__sbss_end>
80000214:	f6dff0ef          	jal	ra,80000180 <zero_section>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:69
    
    main(1, argv);
80000218:	fe040793          	addi	a5,s0,-32
8000021c:	00078593          	mv	a1,a5
80000220:	00100513          	li	a0,1
80000224:	311060ef          	jal	ra,80006d34 <main>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:70
}
80000228:	00000013          	nop
8000022c:	01c12083          	lw	ra,28(sp)
80000230:	01812403          	lw	s0,24(sp)
80000234:	02010113          	addi	sp,sp,32
80000238:	00008067          	ret

8000023c <_fini>:
_fini():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:75

/* Function called after main() finishes */
void
_fini()
{
8000023c:	ff010113          	addi	sp,sp,-16
80000240:	00812623          	sw	s0,12(sp)
80000244:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:76
}
80000248:	00000013          	nop
8000024c:	00c12403          	lw	s0,12(sp)
80000250:	01010113          	addi	sp,sp,16
80000254:	00008067          	ret

80000258 <PLIC_DisableIRQ>:
PLIC_DisableIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:174
 * 	If you wish to disable the external interrupt while the interrupt handler
 * 	for that external interrupt is executing then you must use the return value
 * 	EXT_IRQ_DISABLE to return from the extern interrupt handler.
 */
static inline void PLIC_DisableIRQ(IRQn_Type IRQn)
{
80000258:	fd010113          	addi	sp,sp,-48
8000025c:	02812623          	sw	s0,44(sp)
80000260:	03010413          	addi	s0,sp,48
80000264:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:175
    unsigned long hart_id = read_csr(mhartid);
80000268:	f14027f3          	csrr	a5,mhartid
8000026c:	fef42623          	sw	a5,-20(s0)
80000270:	fec42783          	lw	a5,-20(s0)
80000274:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:176
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80000278:	40000737          	lui	a4,0x40000
8000027c:	fdc42783          	lw	a5,-36(s0)
80000280:	0057d793          	srli	a5,a5,0x5
80000284:	fe842683          	lw	a3,-24(s0)
80000288:	00569693          	slli	a3,a3,0x5
8000028c:	00f686b3          	add	a3,a3,a5
80000290:	000017b7          	lui	a5,0x1
80000294:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80000298:	00f687b3          	add	a5,a3,a5
8000029c:	00279793          	slli	a5,a5,0x2
800002a0:	00f707b3          	add	a5,a4,a5
800002a4:	0007a783          	lw	a5,0(a5)
800002a8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:178

    current &= ~((uint32_t)1 << (IRQn % 32));
800002ac:	fdc42783          	lw	a5,-36(s0)
800002b0:	01f7f793          	andi	a5,a5,31
800002b4:	00100713          	li	a4,1
800002b8:	00f717b3          	sll	a5,a4,a5
800002bc:	fff7c793          	not	a5,a5
800002c0:	fe442703          	lw	a4,-28(s0)
800002c4:	00f777b3          	and	a5,a4,a5
800002c8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:180

    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
800002cc:	40000737          	lui	a4,0x40000
800002d0:	fdc42783          	lw	a5,-36(s0)
800002d4:	0057d793          	srli	a5,a5,0x5
800002d8:	fe842683          	lw	a3,-24(s0)
800002dc:	00569693          	slli	a3,a3,0x5
800002e0:	00f686b3          	add	a3,a3,a5
800002e4:	000017b7          	lui	a5,0x1
800002e8:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
800002ec:	00f687b3          	add	a5,a3,a5
800002f0:	00279793          	slli	a5,a5,0x2
800002f4:	00f707b3          	add	a5,a4,a5
800002f8:	fe442703          	lw	a4,-28(s0)
800002fc:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:181
}
80000300:	00000013          	nop
80000304:	02c12403          	lw	s0,44(sp)
80000308:	03010113          	addi	sp,sp,48
8000030c:	00008067          	ret

80000310 <PLIC_ClaimIRQ>:
PLIC_ClaimIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:205

/*==============================================================================
 * The function PLIC_ClaimIRQ() claims the interrupt from the PLIC controller.
 */
static inline uint32_t PLIC_ClaimIRQ(void)
{
80000310:	fe010113          	addi	sp,sp,-32
80000314:	00812e23          	sw	s0,28(sp)
80000318:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:206
    unsigned long hart_id = read_csr(mhartid);
8000031c:	f14027f3          	csrr	a5,mhartid
80000320:	fef42623          	sw	a5,-20(s0)
80000324:	fec42783          	lw	a5,-20(s0)
80000328:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:208

    return PLIC->TARGET[hart_id].CLAIM_COMPLETE;
8000032c:	40000737          	lui	a4,0x40000
80000330:	fe842783          	lw	a5,-24(s0)
80000334:	20078793          	addi	a5,a5,512
80000338:	00c79793          	slli	a5,a5,0xc
8000033c:	00f707b3          	add	a5,a4,a5
80000340:	0047a783          	lw	a5,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:209
}
80000344:	00078513          	mv	a0,a5
80000348:	01c12403          	lw	s0,28(sp)
8000034c:	02010113          	addi	sp,sp,32
80000350:	00008067          	ret

80000354 <PLIC_CompleteIRQ>:
PLIC_CompleteIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:216
/*==============================================================================
 * The function PLIC_CompleteIRQ() indicates to the PLIC controller the interrupt
 * is processed and claim is complete.
 */
static inline void PLIC_CompleteIRQ(uint32_t source)
{
80000354:	fd010113          	addi	sp,sp,-48
80000358:	02812623          	sw	s0,44(sp)
8000035c:	03010413          	addi	s0,sp,48
80000360:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:217
    unsigned long hart_id = read_csr(mhartid);
80000364:	f14027f3          	csrr	a5,mhartid
80000368:	fef42623          	sw	a5,-20(s0)
8000036c:	fec42783          	lw	a5,-20(s0)
80000370:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:219

    PLIC->TARGET[hart_id].CLAIM_COMPLETE = source;
80000374:	40000737          	lui	a4,0x40000
80000378:	fe842783          	lw	a5,-24(s0)
8000037c:	20078793          	addi	a5,a5,512
80000380:	00c79793          	slli	a5,a5,0xc
80000384:	00f707b3          	add	a5,a4,a5
80000388:	fdc42703          	lw	a4,-36(s0)
8000038c:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:220
}
80000390:	00000013          	nop
80000394:	02c12403          	lw	s0,44(sp)
80000398:	03010113          	addi	sp,sp,48
8000039c:	00008067          	ret

800003a0 <__enable_irq>:
__enable_irq():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:96

/*------------------------------------------------------------------------------
 * Enabler all interrupts.
 */
void __enable_irq(void)
{
800003a0:	fe010113          	addi	sp,sp,-32
800003a4:	00812e23          	sw	s0,28(sp)
800003a8:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:97
    set_csr(mstatus, MSTATUS_MIE);
800003ac:	300467f3          	csrrsi	a5,mstatus,8
800003b0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:98
}
800003b4:	00000013          	nop
800003b8:	01c12403          	lw	s0,28(sp)
800003bc:	02010113          	addi	sp,sp,32
800003c0:	00008067          	ret

800003c4 <handle_m_timer_interrupt>:
handle_m_timer_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:128

/*------------------------------------------------------------------------------
 * RISC-V interrupt handler for machine timer interrupts.
 */
void handle_m_timer_interrupt()
{
800003c4:	fe010113          	addi	sp,sp,-32
800003c8:	00112e23          	sw	ra,28(sp)
800003cc:	00812c23          	sw	s0,24(sp)
800003d0:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:129
    clear_csr(mie, MIP_MTIP); //  MIP_MTIP (1 << 7)
800003d4:	08000793          	li	a5,128
800003d8:	3047b7f3          	csrrc	a5,mie,a5
800003dc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:131

    SysTick_Handler();
800003e0:	53c010ef          	jal	ra,8000191c <SysTick_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:133

    PRCI->MTIMECMP[read_csr(mhartid)] = PRCI->MTIME + g_systick_increment;
800003e4:	44000737          	lui	a4,0x44000
800003e8:	0000c7b7          	lui	a5,0xc
800003ec:	00f707b3          	add	a5,a4,a5
800003f0:	ffc7a803          	lw	a6,-4(a5) # bffc <HEAP_SIZE-0x4004>
800003f4:	ff87a783          	lw	a5,-8(a5)
800003f8:	9001a583          	lw	a1,-1792(gp) # 80007960 <__data_end>
800003fc:	9041a603          	lw	a2,-1788(gp) # 80007964 <__data_end+0x4>
80000400:	44000537          	lui	a0,0x44000
80000404:	f1402773          	csrr	a4,mhartid
80000408:	fee42423          	sw	a4,-24(s0)
8000040c:	fe842883          	lw	a7,-24(s0)
80000410:	00b786b3          	add	a3,a5,a1
80000414:	00068313          	mv	t1,a3
80000418:	00f33333          	sltu	t1,t1,a5
8000041c:	00c80733          	add	a4,a6,a2
80000420:	00e307b3          	add	a5,t1,a4
80000424:	00078713          	mv	a4,a5
80000428:	00068793          	mv	a5,a3
8000042c:	00070813          	mv	a6,a4
80000430:	00001737          	lui	a4,0x1
80000434:	80070713          	addi	a4,a4,-2048 # 800 <HEAP_SIZE-0xf800>
80000438:	00e88733          	add	a4,a7,a4
8000043c:	00371713          	slli	a4,a4,0x3
80000440:	00e50733          	add	a4,a0,a4
80000444:	00f72023          	sw	a5,0(a4)
80000448:	01072223          	sw	a6,4(a4)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:135

    set_csr(mie, MIP_MTIP);
8000044c:	08000793          	li	a5,128
80000450:	3047a7f3          	csrrs	a5,mie,a5
80000454:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:136
    return;
80000458:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:137
}
8000045c:	01c12083          	lw	ra,28(sp)
80000460:	01812403          	lw	s0,24(sp)
80000464:	02010113          	addi	sp,sp,32
80000468:	00008067          	ret

8000046c <handle_m_ext_interrupt>:
handle_m_ext_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:182

/*------------------------------------------------------------------------------
 * 
 */
void handle_m_ext_interrupt()
{
8000046c:	fe010113          	addi	sp,sp,-32
80000470:	00112e23          	sw	ra,28(sp)
80000474:	00812c23          	sw	s0,24(sp)
80000478:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:183
    uint32_t int_num  = PLIC_ClaimIRQ();
8000047c:	e95ff0ef          	jal	ra,80000310 <PLIC_ClaimIRQ>
80000480:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:184
    uint8_t disable = EXT_IRQ_KEEP_ENABLED;
80000484:	fe0405a3          	sb	zero,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:186

    disable = ext_irq_handler_table[int_num]();
80000488:	800087b7          	lui	a5,0x80008
8000048c:	fec42703          	lw	a4,-20(s0)
80000490:	00271713          	slli	a4,a4,0x2
80000494:	88078793          	addi	a5,a5,-1920 # 80007880 <__stack_top+0xfffc5830>
80000498:	00f707b3          	add	a5,a4,a5
8000049c:	0007a783          	lw	a5,0(a5)
800004a0:	000780e7          	jalr	a5
800004a4:	00050793          	mv	a5,a0
800004a8:	fef405a3          	sb	a5,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:188

    PLIC_CompleteIRQ(int_num);
800004ac:	fec42503          	lw	a0,-20(s0)
800004b0:	ea5ff0ef          	jal	ra,80000354 <PLIC_CompleteIRQ>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:190

    if(EXT_IRQ_DISABLE == disable)
800004b4:	feb44703          	lbu	a4,-21(s0)
800004b8:	00100793          	li	a5,1
800004bc:	00f71863          	bne	a4,a5,800004cc <handle_m_ext_interrupt+0x60>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:192
    {
        PLIC_DisableIRQ((IRQn_Type)int_num);
800004c0:	fec42503          	lw	a0,-20(s0)
800004c4:	d95ff0ef          	jal	ra,80000258 <PLIC_DisableIRQ>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:194
    }
    return;
800004c8:	00000013          	nop
800004cc:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:195
}
800004d0:	01c12083          	lw	ra,28(sp)
800004d4:	01812403          	lw	s0,24(sp)
800004d8:	02010113          	addi	sp,sp,32
800004dc:	00008067          	ret

800004e0 <handle_m_soft_interrupt>:
handle_m_soft_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:198

void handle_m_soft_interrupt()
{
800004e0:	ff010113          	addi	sp,sp,-16
800004e4:	00112623          	sw	ra,12(sp)
800004e8:	00812423          	sw	s0,8(sp)
800004ec:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:199
    Software_IRQHandler();
800004f0:	554010ef          	jal	ra,80001a44 <Software_IRQHandler>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:202

    /*Clear software interrupt*/
    PRCI->MSIP[0] = 0x00;
800004f4:	440007b7          	lui	a5,0x44000
800004f8:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:203
    return;
800004fc:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:204
}
80000500:	00c12083          	lw	ra,12(sp)
80000504:	00812403          	lw	s0,8(sp)
80000508:	01010113          	addi	sp,sp,16
8000050c:	00008067          	ret

80000510 <handle_syscall>:
handle_syscall():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:207

/* syscall funcion defined at system_call.c */
void handle_syscall(){
80000510:	fd010113          	addi	sp,sp,-48
80000514:	02112623          	sw	ra,44(sp)
80000518:	02812423          	sw	s0,40(sp)
8000051c:	03010413          	addi	s0,sp,48
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:210
	unsigned int arg0, arg1, arg2, arg3, arg4, arg5, type;
	unsigned int *pointer;
	register long temp asm("t0") = 0;
80000520:	00000293          	li	t0,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:211
	asm("addi	t0, sp, 0");
80000524:	00010293          	mv	t0,sp
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:213
	
	pointer = (unsigned int *)(temp + (29*4));
80000528:	00028793          	mv	a5,t0
8000052c:	07478793          	addi	a5,a5,116
80000530:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:214
	arg0 =  *pointer;
80000534:	fec42783          	lw	a5,-20(s0)
80000538:	0007a783          	lw	a5,0(a5)
8000053c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:216

	pointer = (unsigned int *)(temp + (30*4));
80000540:	00028793          	mv	a5,t0
80000544:	07878793          	addi	a5,a5,120
80000548:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:217
	arg1 = *pointer;
8000054c:	fec42783          	lw	a5,-20(s0)
80000550:	0007a783          	lw	a5,0(a5)
80000554:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:219
	
	pointer = (unsigned int *)(temp + (31*4));
80000558:	00028793          	mv	a5,t0
8000055c:	07c78793          	addi	a5,a5,124
80000560:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:220
	arg2 = *pointer;
80000564:	fec42783          	lw	a5,-20(s0)
80000568:	0007a783          	lw	a5,0(a5)
8000056c:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:222

	pointer = (unsigned int *)(temp + (32*4));
80000570:	00028793          	mv	a5,t0
80000574:	08078793          	addi	a5,a5,128
80000578:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:223
	arg3 = *pointer;
8000057c:	fec42783          	lw	a5,-20(s0)
80000580:	0007a783          	lw	a5,0(a5)
80000584:	fcf42e23          	sw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:225

	pointer = (unsigned int *)(temp + (33*4));
80000588:	00028793          	mv	a5,t0
8000058c:	08478793          	addi	a5,a5,132
80000590:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:226
	arg4 = *pointer;
80000594:	fec42783          	lw	a5,-20(s0)
80000598:	0007a783          	lw	a5,0(a5)
8000059c:	fcf42c23          	sw	a5,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:228

	pointer = (unsigned int *)(temp + (34*4));
800005a0:	00028793          	mv	a5,t0
800005a4:	08878793          	addi	a5,a5,136
800005a8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:229
	arg4 = *pointer;
800005ac:	fec42783          	lw	a5,-20(s0)
800005b0:	0007a783          	lw	a5,0(a5)
800005b4:	fcf42c23          	sw	a5,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:231

	pointer = (unsigned int *)(temp + (36*4));
800005b8:	00028793          	mv	a5,t0
800005bc:	09078793          	addi	a5,a5,144
800005c0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:232
	type = *pointer;
800005c4:	fec42783          	lw	a5,-20(s0)
800005c8:	0007a783          	lw	a5,0(a5)
800005cc:	fcf42a23          	sw	a5,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:234

	switch (type){
800005d0:	fd442783          	lw	a5,-44(s0)
800005d4:	ff678793          	addi	a5,a5,-10
800005d8:	03800713          	li	a4,56
800005dc:	12f76663          	bltu	a4,a5,80000708 <handle_syscall+0x1f8>
800005e0:	00279713          	slli	a4,a5,0x2
800005e4:	800077b7          	lui	a5,0x80007
800005e8:	02c78793          	addi	a5,a5,44 # 8000702c <__stack_top+0xfffc4fdc>
800005ec:	00f707b3          	add	a5,a4,a5
800005f0:	0007a783          	lw	a5,0(a5)
800005f4:	00078067          	jr	a5
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:237

		case SYS_TESTING:
			prints("Detectei uma chamada TESTE de sistema!\n");
800005f8:	800077b7          	lui	a5,0x80007
800005fc:	f9878513          	addi	a0,a5,-104 # 80006f98 <__stack_top+0xfffc4f48>
80000600:	079020ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:238
			printsv("arg0 ", arg0);
80000604:	fe842783          	lw	a5,-24(s0)
80000608:	00078593          	mv	a1,a5
8000060c:	800077b7          	lui	a5,0x80007
80000610:	fc078513          	addi	a0,a5,-64 # 80006fc0 <__stack_top+0xfffc4f70>
80000614:	111020ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:239
			printsv("arg1 ", arg1);
80000618:	fe442783          	lw	a5,-28(s0)
8000061c:	00078593          	mv	a1,a5
80000620:	800077b7          	lui	a5,0x80007
80000624:	fc878513          	addi	a0,a5,-56 # 80006fc8 <__stack_top+0xfffc4f78>
80000628:	0fd020ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:240
			printsv("arg2 ", arg2);
8000062c:	fe042783          	lw	a5,-32(s0)
80000630:	00078593          	mv	a1,a5
80000634:	800077b7          	lui	a5,0x80007
80000638:	fd078513          	addi	a0,a5,-48 # 80006fd0 <__stack_top+0xfffc4f80>
8000063c:	0e9020ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:241
			printsv("arg3 ", arg3);
80000640:	fdc42783          	lw	a5,-36(s0)
80000644:	00078593          	mv	a1,a5
80000648:	800077b7          	lui	a5,0x80007
8000064c:	fd878513          	addi	a0,a5,-40 # 80006fd8 <__stack_top+0xfffc4f88>
80000650:	0d5020ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:242
			printsv("arg4 ", arg4);
80000654:	fd842783          	lw	a5,-40(s0)
80000658:	00078593          	mv	a1,a5
8000065c:	800077b7          	lui	a5,0x80007
80000660:	fe078513          	addi	a0,a5,-32 # 80006fe0 <__stack_top+0xfffc4f90>
80000664:	0c1020ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:243
			printsv("type ", type);
80000668:	fd442783          	lw	a5,-44(s0)
8000066c:	00078593          	mv	a1,a5
80000670:	800077b7          	lui	a5,0x80007
80000674:	fe878513          	addi	a0,a5,-24 # 80006fe8 <__stack_top+0xfffc4f98>
80000678:	0ad020ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:244
			break;
8000067c:	1140006f          	j	80000790 <handle_syscall+0x280>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:247

        case SYS_PRINTS:
            prints(arg0);
80000680:	fe842783          	lw	a5,-24(s0)
80000684:	00078513          	mv	a0,a5
80000688:	7f0020ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:248
            UART_polled_tx_string( &g_uart, arg0 );
8000068c:	fe842783          	lw	a5,-24(s0)
80000690:	00078593          	mv	a1,a5
80000694:	800227b7          	lui	a5,0x80022
80000698:	04078513          	addi	a0,a5,64 # 80022040 <__stack_top+0xfffdfff0>
8000069c:	39d000ef          	jal	ra,80001238 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:249
            break;
800006a0:	0f00006f          	j	80000790 <handle_syscall+0x280>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:252
        
        case SYS_PRINTI:
            printi(arg0);
800006a4:	fe842783          	lw	a5,-24(s0)
800006a8:	00078513          	mv	a0,a5
800006ac:	03d020ef          	jal	ra,80002ee8 <printi>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:253
            myItoa(arg0, str, 10);
800006b0:	fe842703          	lw	a4,-24(s0)
800006b4:	00a00613          	li	a2,10
800006b8:	800217b7          	lui	a5,0x80021
800006bc:	be878593          	addi	a1,a5,-1048 # 80020be8 <__stack_top+0xfffdeb98>
800006c0:	00070513          	mv	a0,a4
800006c4:	2dd020ef          	jal	ra,800031a0 <myItoa>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:254
            UART_polled_tx_string( &g_uart, (const uint8_t *)str );
800006c8:	800217b7          	lui	a5,0x80021
800006cc:	be878593          	addi	a1,a5,-1048 # 80020be8 <__stack_top+0xfffdeb98>
800006d0:	800227b7          	lui	a5,0x80022
800006d4:	04078513          	addi	a0,a5,64 # 80022040 <__stack_top+0xfffdfff0>
800006d8:	361000ef          	jal	ra,80001238 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:255
            break;
800006dc:	0b40006f          	j	80000790 <handle_syscall+0x280>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:259
        
        case SYS_SEND_MSG:
            //              addr, task
            API_SendMessage(arg0, arg1);
800006e0:	fe442583          	lw	a1,-28(s0)
800006e4:	fe842503          	lw	a0,-24(s0)
800006e8:	058030ef          	jal	ra,80003740 <API_SendMessage>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:260
            break;
800006ec:	0a40006f          	j	80000790 <handle_syscall+0x280>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:264
        
        case SYS_RECV_MSG:
            //                 addr, task
            API_SendMessageReq(arg0, arg1);
800006f0:	fe442583          	lw	a1,-28(s0)
800006f4:	fe842503          	lw	a0,-24(s0)
800006f8:	4d0030ef          	jal	ra,80003bc8 <API_SendMessageReq>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:265
            break;
800006fc:	0940006f          	j	80000790 <handle_syscall+0x280>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:268
        
        case SYS_END_TASK:
            API_FinishRunningTask();
80000700:	5dd050ef          	jal	ra,800064dc <API_FinishRunningTask>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:269
            break;
80000704:	08c0006f          	j	80000790 <handle_syscall+0x280>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:272

		default:
			prints("Systemcall não identificada!\n");
80000708:	800077b7          	lui	a5,0x80007
8000070c:	ff078513          	addi	a0,a5,-16 # 80006ff0 <__stack_top+0xfffc4fa0>
80000710:	768020ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:273
			printsv("arg0 ", arg0);
80000714:	fe842783          	lw	a5,-24(s0)
80000718:	00078593          	mv	a1,a5
8000071c:	800077b7          	lui	a5,0x80007
80000720:	fc078513          	addi	a0,a5,-64 # 80006fc0 <__stack_top+0xfffc4f70>
80000724:	001020ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:274
			printsv("arg1 ", arg1);
80000728:	fe442783          	lw	a5,-28(s0)
8000072c:	00078593          	mv	a1,a5
80000730:	800077b7          	lui	a5,0x80007
80000734:	fc878513          	addi	a0,a5,-56 # 80006fc8 <__stack_top+0xfffc4f78>
80000738:	7ec020ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:275
			printsv("arg2 ", arg2);
8000073c:	fe042783          	lw	a5,-32(s0)
80000740:	00078593          	mv	a1,a5
80000744:	800077b7          	lui	a5,0x80007
80000748:	fd078513          	addi	a0,a5,-48 # 80006fd0 <__stack_top+0xfffc4f80>
8000074c:	7d8020ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:276
			printsv("arg3 ", arg3);
80000750:	fdc42783          	lw	a5,-36(s0)
80000754:	00078593          	mv	a1,a5
80000758:	800077b7          	lui	a5,0x80007
8000075c:	fd878513          	addi	a0,a5,-40 # 80006fd8 <__stack_top+0xfffc4f88>
80000760:	7c4020ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:277
			printsv("arg4 ", arg4);
80000764:	fd842783          	lw	a5,-40(s0)
80000768:	00078593          	mv	a1,a5
8000076c:	800077b7          	lui	a5,0x80007
80000770:	fe078513          	addi	a0,a5,-32 # 80006fe0 <__stack_top+0xfffc4f90>
80000774:	7b0020ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:278
			printsv("type ", type);
80000778:	fd442783          	lw	a5,-44(s0)
8000077c:	00078593          	mv	a1,a5
80000780:	800077b7          	lui	a5,0x80007
80000784:	fe878513          	addi	a0,a5,-24 # 80006fe8 <__stack_top+0xfffc4f98>
80000788:	79c020ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:279
			break;
8000078c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:281
	}
	return;
80000790:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:296
	// 	value = *p;
	// 	printsvsv("i: ", i, " value: ", value);
	// }
    // prints("Cheguei aqui!!!!!!! sucessooo :D\n");
	////////////////////////////////////////////////////
}
80000794:	02c12083          	lw	ra,44(sp)
80000798:	02812403          	lw	s0,40(sp)
8000079c:	03010113          	addi	sp,sp,48
800007a0:	00008067          	ret

800007a4 <handle_trap>:
handle_trap():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:302

/*------------------------------------------------------------------------------
 * Trap/Interrupt handler
 */
uintptr_t handle_trap(uintptr_t mcause, uintptr_t epc)
{
800007a4:	fe010113          	addi	sp,sp,-32
800007a8:	00112e23          	sw	ra,28(sp)
800007ac:	00812c23          	sw	s0,24(sp)
800007b0:	02010413          	addi	s0,sp,32
800007b4:	fea42623          	sw	a0,-20(s0)
800007b8:	feb42423          	sw	a1,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303
    if (!(mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE) == ENV_CALL_M || (mcause & MCAUSE_CAUSE) == ENV_CALL_H || (mcause & MCAUSE_CAUSE) == ENV_CALL_S || (mcause & MCAUSE_CAUSE) == ENV_CALL_U)){
800007bc:	fec42783          	lw	a5,-20(s0)
800007c0:	0607cc63          	bltz	a5,80000838 <handle_trap+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303 (discriminator 1)
800007c4:	fec42703          	lw	a4,-20(s0)
800007c8:	800007b7          	lui	a5,0x80000
800007cc:	fff7c793          	not	a5,a5
800007d0:	00f77733          	and	a4,a4,a5
800007d4:	00b00793          	li	a5,11
800007d8:	04f70663          	beq	a4,a5,80000824 <handle_trap+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303 (discriminator 2)
800007dc:	fec42703          	lw	a4,-20(s0)
800007e0:	800007b7          	lui	a5,0x80000
800007e4:	fff7c793          	not	a5,a5
800007e8:	00f77733          	and	a4,a4,a5
800007ec:	00a00793          	li	a5,10
800007f0:	02f70a63          	beq	a4,a5,80000824 <handle_trap+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303 (discriminator 3)
800007f4:	fec42703          	lw	a4,-20(s0)
800007f8:	800007b7          	lui	a5,0x80000
800007fc:	fff7c793          	not	a5,a5
80000800:	00f77733          	and	a4,a4,a5
80000804:	00900793          	li	a5,9
80000808:	00f70e63          	beq	a4,a5,80000824 <handle_trap+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303 (discriminator 4)
8000080c:	fec42703          	lw	a4,-20(s0)
80000810:	800007b7          	lui	a5,0x80000
80000814:	fff7c793          	not	a5,a5
80000818:	00f77733          	and	a4,a4,a5
8000081c:	00800793          	li	a5,8
80000820:	00f71c63          	bne	a4,a5,80000838 <handle_trap+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:304
        handle_syscall();
80000824:	cedff0ef          	jal	ra,80000510 <handle_syscall>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:305
        epc = (uintptr_t) (epc + 4);
80000828:	fe842783          	lw	a5,-24(s0)
8000082c:	00478793          	addi	a5,a5,4 # 80000004 <__stack_top+0xfffbdfb4>
80000830:	fef42423          	sw	a5,-24(s0)
80000834:	0c40006f          	j	800008f8 <handle_trap+0x154>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:307
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_EXT)){
80000838:	fec42783          	lw	a5,-20(s0)
8000083c:	0207d263          	bgez	a5,80000860 <handle_trap+0xbc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:307 (discriminator 1)
80000840:	fec42703          	lw	a4,-20(s0)
80000844:	800007b7          	lui	a5,0x80000
80000848:	fff7c793          	not	a5,a5
8000084c:	00f77733          	and	a4,a4,a5
80000850:	00b00793          	li	a5,11
80000854:	00f71663          	bne	a4,a5,80000860 <handle_trap+0xbc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:308
        handle_m_ext_interrupt();
80000858:	c15ff0ef          	jal	ra,8000046c <handle_m_ext_interrupt>
8000085c:	09c0006f          	j	800008f8 <handle_trap+0x154>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:310
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_TIMER)){
80000860:	fec42783          	lw	a5,-20(s0)
80000864:	0207d263          	bgez	a5,80000888 <handle_trap+0xe4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:310 (discriminator 1)
80000868:	fec42703          	lw	a4,-20(s0)
8000086c:	800007b7          	lui	a5,0x80000
80000870:	fff7c793          	not	a5,a5
80000874:	00f77733          	and	a4,a4,a5
80000878:	00700793          	li	a5,7
8000087c:	00f71663          	bne	a4,a5,80000888 <handle_trap+0xe4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:311
        handle_m_timer_interrupt();
80000880:	b45ff0ef          	jal	ra,800003c4 <handle_m_timer_interrupt>
80000884:	0740006f          	j	800008f8 <handle_trap+0x154>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:313
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_SOFT)){
80000888:	fec42783          	lw	a5,-20(s0)
8000088c:	0207d263          	bgez	a5,800008b0 <handle_trap+0x10c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:313 (discriminator 1)
80000890:	fec42703          	lw	a4,-20(s0)
80000894:	800007b7          	lui	a5,0x80000
80000898:	fff7c793          	not	a5,a5
8000089c:	00f77733          	and	a4,a4,a5
800008a0:	00300793          	li	a5,3
800008a4:	00f71663          	bne	a4,a5,800008b0 <handle_trap+0x10c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:314
        handle_m_soft_interrupt();
800008a8:	c39ff0ef          	jal	ra,800004e0 <handle_m_soft_interrupt>
800008ac:	04c0006f          	j	800008f8 <handle_trap+0x154>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:317
    }
    else{
        write(1, "trap\n", 5);
800008b0:	00500613          	li	a2,5
800008b4:	800077b7          	lui	a5,0x80007
800008b8:	01078593          	addi	a1,a5,16 # 80007010 <__stack_top+0xfffc4fc0>
800008bc:	00100513          	li	a0,1
800008c0:	65c060ef          	jal	ra,80006f1c <write>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:318
        printsv("epc: ", epc);
800008c4:	fe842783          	lw	a5,-24(s0)
800008c8:	00078593          	mv	a1,a5
800008cc:	800077b7          	lui	a5,0x80007
800008d0:	01878513          	addi	a0,a5,24 # 80007018 <__stack_top+0xfffc4fc8>
800008d4:	650020ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:319
        printsv("mcause: ", mcause);
800008d8:	fec42783          	lw	a5,-20(s0)
800008dc:	00078593          	mv	a1,a5
800008e0:	800077b7          	lui	a5,0x80007
800008e4:	02078513          	addi	a0,a5,32 # 80007020 <__stack_top+0xfffc4fd0>
800008e8:	63c020ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:320
        _exit(mcause);
800008ec:	fec42783          	lw	a5,-20(s0)
800008f0:	00078513          	mv	a0,a5
800008f4:	4e8000ef          	jal	ra,80000ddc <_exit>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:324
    }
    
    // Added by Iaçanã, solves several interruption problems!
    portDISABLE_INTERRUPTS(); 
800008f8:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:325
    return epc;
800008fc:	fe842783          	lw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:326
}
80000900:	00078513          	mv	a0,a5
80000904:	01c12083          	lw	ra,28(sp)
80000908:	01812403          	lw	s0,24(sp)
8000090c:	02010113          	addi	sp,sp,32
80000910:	00008067          	ret

80000914 <Invalid_IRQHandler>:
Invalid_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:37
{
    ;
}

__attribute__((weak))  uint8_t Invalid_IRQHandler(void)
{
80000914:	ff010113          	addi	sp,sp,-16
80000918:	00812623          	sw	s0,12(sp)
8000091c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:38
    return(0);
80000920:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:39
}
80000924:	00078513          	mv	a0,a5
80000928:	00c12403          	lw	s0,12(sp)
8000092c:	01010113          	addi	sp,sp,16
80000930:	00008067          	ret

80000934 <External_1_IRQHandler>:
External_1_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:42

__attribute__((weak))  uint8_t External_1_IRQHandler(void)
{
80000934:	ff010113          	addi	sp,sp,-16
80000938:	00812623          	sw	s0,12(sp)
8000093c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:43
    return(0);
80000940:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:44
}
80000944:	00078513          	mv	a0,a5
80000948:	00c12403          	lw	s0,12(sp)
8000094c:	01010113          	addi	sp,sp,16
80000950:	00008067          	ret

80000954 <External_3_IRQHandler>:
External_3_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:52
{
    return(0);
}

__attribute__((weak))  uint8_t External_3_IRQHandler(void)
{
80000954:	ff010113          	addi	sp,sp,-16
80000958:	00812623          	sw	s0,12(sp)
8000095c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:53
    return(0);
80000960:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:54
}
80000964:	00078513          	mv	a0,a5
80000968:	00c12403          	lw	s0,12(sp)
8000096c:	01010113          	addi	sp,sp,16
80000970:	00008067          	ret

80000974 <External_4_IRQHandler>:
External_4_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:57

__attribute__((weak))  uint8_t External_4_IRQHandler(void)
{
80000974:	ff010113          	addi	sp,sp,-16
80000978:	00812623          	sw	s0,12(sp)
8000097c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:58
    return(0);
80000980:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:59
}
80000984:	00078513          	mv	a0,a5
80000988:	00c12403          	lw	s0,12(sp)
8000098c:	01010113          	addi	sp,sp,16
80000990:	00008067          	ret

80000994 <External_5_IRQHandler>:
External_5_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:62

__attribute__((weak))  uint8_t External_5_IRQHandler(void)
{
80000994:	ff010113          	addi	sp,sp,-16
80000998:	00812623          	sw	s0,12(sp)
8000099c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:63
    return(0);
800009a0:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:64
}
800009a4:	00078513          	mv	a0,a5
800009a8:	00c12403          	lw	s0,12(sp)
800009ac:	01010113          	addi	sp,sp,16
800009b0:	00008067          	ret

800009b4 <External_6_IRQHandler>:
External_6_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:67

__attribute__((weak))  uint8_t External_6_IRQHandler(void)
{
800009b4:	ff010113          	addi	sp,sp,-16
800009b8:	00812623          	sw	s0,12(sp)
800009bc:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:68
    return(0);
800009c0:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:69
}
800009c4:	00078513          	mv	a0,a5
800009c8:	00c12403          	lw	s0,12(sp)
800009cc:	01010113          	addi	sp,sp,16
800009d0:	00008067          	ret

800009d4 <External_7_IRQHandler>:
External_7_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:72

__attribute__((weak))  uint8_t External_7_IRQHandler(void)
{
800009d4:	ff010113          	addi	sp,sp,-16
800009d8:	00812623          	sw	s0,12(sp)
800009dc:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:73
    return(0);
800009e0:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:74
}
800009e4:	00078513          	mv	a0,a5
800009e8:	00c12403          	lw	s0,12(sp)
800009ec:	01010113          	addi	sp,sp,16
800009f0:	00008067          	ret

800009f4 <External_8_IRQHandler>:
External_8_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:77

__attribute__((weak))  uint8_t External_8_IRQHandler(void)
{
800009f4:	ff010113          	addi	sp,sp,-16
800009f8:	00812623          	sw	s0,12(sp)
800009fc:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:78
    return(0);
80000a00:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:79
}
80000a04:	00078513          	mv	a0,a5
80000a08:	00c12403          	lw	s0,12(sp)
80000a0c:	01010113          	addi	sp,sp,16
80000a10:	00008067          	ret

80000a14 <External_9_IRQHandler>:
External_9_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:82

__attribute__((weak))  uint8_t External_9_IRQHandler(void)
{
80000a14:	ff010113          	addi	sp,sp,-16
80000a18:	00812623          	sw	s0,12(sp)
80000a1c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:83
    return(0);
80000a20:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:84
}
80000a24:	00078513          	mv	a0,a5
80000a28:	00c12403          	lw	s0,12(sp)
80000a2c:	01010113          	addi	sp,sp,16
80000a30:	00008067          	ret

80000a34 <External_10_IRQHandler>:
External_10_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:87

__attribute__((weak))  uint8_t External_10_IRQHandler(void)
{
80000a34:	ff010113          	addi	sp,sp,-16
80000a38:	00812623          	sw	s0,12(sp)
80000a3c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:88
    return(0);
80000a40:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:89
}
80000a44:	00078513          	mv	a0,a5
80000a48:	00c12403          	lw	s0,12(sp)
80000a4c:	01010113          	addi	sp,sp,16
80000a50:	00008067          	ret

80000a54 <External_11_IRQHandler>:
External_11_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:92

__attribute__((weak))  uint8_t External_11_IRQHandler(void)
{
80000a54:	ff010113          	addi	sp,sp,-16
80000a58:	00812623          	sw	s0,12(sp)
80000a5c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:93
    return(0);
80000a60:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:94
}
80000a64:	00078513          	mv	a0,a5
80000a68:	00c12403          	lw	s0,12(sp)
80000a6c:	01010113          	addi	sp,sp,16
80000a70:	00008067          	ret

80000a74 <External_12_IRQHandler>:
External_12_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:97

__attribute__((weak))  uint8_t External_12_IRQHandler(void)
{
80000a74:	ff010113          	addi	sp,sp,-16
80000a78:	00812623          	sw	s0,12(sp)
80000a7c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:98
    return(0);
80000a80:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:99
}
80000a84:	00078513          	mv	a0,a5
80000a88:	00c12403          	lw	s0,12(sp)
80000a8c:	01010113          	addi	sp,sp,16
80000a90:	00008067          	ret

80000a94 <External_13_IRQHandler>:
External_13_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:102

__attribute__((weak))  uint8_t External_13_IRQHandler(void)
{
80000a94:	ff010113          	addi	sp,sp,-16
80000a98:	00812623          	sw	s0,12(sp)
80000a9c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:103
    return(0);
80000aa0:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:104
}
80000aa4:	00078513          	mv	a0,a5
80000aa8:	00c12403          	lw	s0,12(sp)
80000aac:	01010113          	addi	sp,sp,16
80000ab0:	00008067          	ret

80000ab4 <External_14_IRQHandler>:
External_14_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:107

__attribute__((weak))  uint8_t External_14_IRQHandler(void)
{
80000ab4:	ff010113          	addi	sp,sp,-16
80000ab8:	00812623          	sw	s0,12(sp)
80000abc:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:108
    return(0);
80000ac0:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:109
}
80000ac4:	00078513          	mv	a0,a5
80000ac8:	00c12403          	lw	s0,12(sp)
80000acc:	01010113          	addi	sp,sp,16
80000ad0:	00008067          	ret

80000ad4 <External_15_IRQHandler>:
External_15_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:112

__attribute__((weak))  uint8_t External_15_IRQHandler(void)
{
80000ad4:	ff010113          	addi	sp,sp,-16
80000ad8:	00812623          	sw	s0,12(sp)
80000adc:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:113
    return(0);
80000ae0:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:114
}
80000ae4:	00078513          	mv	a0,a5
80000ae8:	00c12403          	lw	s0,12(sp)
80000aec:	01010113          	addi	sp,sp,16
80000af0:	00008067          	ret

80000af4 <External_16_IRQHandler>:
External_16_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:117

__attribute__((weak))  uint8_t External_16_IRQHandler(void)
{
80000af4:	ff010113          	addi	sp,sp,-16
80000af8:	00812623          	sw	s0,12(sp)
80000afc:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:118
    return(0);
80000b00:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:119
}
80000b04:	00078513          	mv	a0,a5
80000b08:	00c12403          	lw	s0,12(sp)
80000b0c:	01010113          	addi	sp,sp,16
80000b10:	00008067          	ret

80000b14 <External_17_IRQHandler>:
External_17_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:122

__attribute__((weak))  uint8_t External_17_IRQHandler(void)
{
80000b14:	ff010113          	addi	sp,sp,-16
80000b18:	00812623          	sw	s0,12(sp)
80000b1c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:123
    return(0);
80000b20:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:124
}
80000b24:	00078513          	mv	a0,a5
80000b28:	00c12403          	lw	s0,12(sp)
80000b2c:	01010113          	addi	sp,sp,16
80000b30:	00008067          	ret

80000b34 <External_18_IRQHandler>:
External_18_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:127

__attribute__((weak))  uint8_t External_18_IRQHandler(void)
{
80000b34:	ff010113          	addi	sp,sp,-16
80000b38:	00812623          	sw	s0,12(sp)
80000b3c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:128
    return(0);
80000b40:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:129
}
80000b44:	00078513          	mv	a0,a5
80000b48:	00c12403          	lw	s0,12(sp)
80000b4c:	01010113          	addi	sp,sp,16
80000b50:	00008067          	ret

80000b54 <External_19_IRQHandler>:
External_19_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:132

__attribute__((weak))  uint8_t External_19_IRQHandler(void)
{
80000b54:	ff010113          	addi	sp,sp,-16
80000b58:	00812623          	sw	s0,12(sp)
80000b5c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:133
    return(0);
80000b60:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:134
}
80000b64:	00078513          	mv	a0,a5
80000b68:	00c12403          	lw	s0,12(sp)
80000b6c:	01010113          	addi	sp,sp,16
80000b70:	00008067          	ret

80000b74 <External_20_IRQHandler>:
External_20_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:137

__attribute__((weak))  uint8_t External_20_IRQHandler(void)
{
80000b74:	ff010113          	addi	sp,sp,-16
80000b78:	00812623          	sw	s0,12(sp)
80000b7c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:138
    return(0);
80000b80:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:139
}
80000b84:	00078513          	mv	a0,a5
80000b88:	00c12403          	lw	s0,12(sp)
80000b8c:	01010113          	addi	sp,sp,16
80000b90:	00008067          	ret

80000b94 <External_21_IRQHandler>:
External_21_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:142

__attribute__((weak))  uint8_t External_21_IRQHandler(void)
{
80000b94:	ff010113          	addi	sp,sp,-16
80000b98:	00812623          	sw	s0,12(sp)
80000b9c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:143
    return(0);
80000ba0:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:144
}
80000ba4:	00078513          	mv	a0,a5
80000ba8:	00c12403          	lw	s0,12(sp)
80000bac:	01010113          	addi	sp,sp,16
80000bb0:	00008067          	ret

80000bb4 <External_22_IRQHandler>:
External_22_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:147

__attribute__((weak))  uint8_t External_22_IRQHandler(void)
{
80000bb4:	ff010113          	addi	sp,sp,-16
80000bb8:	00812623          	sw	s0,12(sp)
80000bbc:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:148
    return(0);
80000bc0:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:149
}
80000bc4:	00078513          	mv	a0,a5
80000bc8:	00c12403          	lw	s0,12(sp)
80000bcc:	01010113          	addi	sp,sp,16
80000bd0:	00008067          	ret

80000bd4 <External_23_IRQHandler>:
External_23_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:152

__attribute__((weak))  uint8_t External_23_IRQHandler(void)
{
80000bd4:	ff010113          	addi	sp,sp,-16
80000bd8:	00812623          	sw	s0,12(sp)
80000bdc:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:153
    return(0);
80000be0:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:154
}
80000be4:	00078513          	mv	a0,a5
80000be8:	00c12403          	lw	s0,12(sp)
80000bec:	01010113          	addi	sp,sp,16
80000bf0:	00008067          	ret

80000bf4 <External_24_IRQHandler>:
External_24_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:157

__attribute__((weak))  uint8_t External_24_IRQHandler(void)
{
80000bf4:	ff010113          	addi	sp,sp,-16
80000bf8:	00812623          	sw	s0,12(sp)
80000bfc:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:158
    return(0);
80000c00:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:159
}
80000c04:	00078513          	mv	a0,a5
80000c08:	00c12403          	lw	s0,12(sp)
80000c0c:	01010113          	addi	sp,sp,16
80000c10:	00008067          	ret

80000c14 <External_25_IRQHandler>:
External_25_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:162

__attribute__((weak))  uint8_t External_25_IRQHandler(void)
{
80000c14:	ff010113          	addi	sp,sp,-16
80000c18:	00812623          	sw	s0,12(sp)
80000c1c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:163
    return(0);
80000c20:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:164
}
80000c24:	00078513          	mv	a0,a5
80000c28:	00c12403          	lw	s0,12(sp)
80000c2c:	01010113          	addi	sp,sp,16
80000c30:	00008067          	ret

80000c34 <External_26_IRQHandler>:
External_26_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:167

__attribute__((weak))  uint8_t External_26_IRQHandler(void)
{
80000c34:	ff010113          	addi	sp,sp,-16
80000c38:	00812623          	sw	s0,12(sp)
80000c3c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:168
    return(0);
80000c40:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:169
}
80000c44:	00078513          	mv	a0,a5
80000c48:	00c12403          	lw	s0,12(sp)
80000c4c:	01010113          	addi	sp,sp,16
80000c50:	00008067          	ret

80000c54 <External_27_IRQHandler>:
External_27_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:172

__attribute__((weak))  uint8_t External_27_IRQHandler(void)
{
80000c54:	ff010113          	addi	sp,sp,-16
80000c58:	00812623          	sw	s0,12(sp)
80000c5c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:173
    return(0);
80000c60:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:174
}
80000c64:	00078513          	mv	a0,a5
80000c68:	00c12403          	lw	s0,12(sp)
80000c6c:	01010113          	addi	sp,sp,16
80000c70:	00008067          	ret

80000c74 <External_28_IRQHandler>:
External_28_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:177

__attribute__((weak))  uint8_t External_28_IRQHandler(void)
{
80000c74:	ff010113          	addi	sp,sp,-16
80000c78:	00812623          	sw	s0,12(sp)
80000c7c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:178
    return(0);
80000c80:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:179
}
80000c84:	00078513          	mv	a0,a5
80000c88:	00c12403          	lw	s0,12(sp)
80000c8c:	01010113          	addi	sp,sp,16
80000c90:	00008067          	ret

80000c94 <External_29_IRQHandler>:
External_29_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:182

__attribute__((weak))  uint8_t External_29_IRQHandler(void)
{
80000c94:	ff010113          	addi	sp,sp,-16
80000c98:	00812623          	sw	s0,12(sp)
80000c9c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:183
    return(0);
80000ca0:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:184
}
80000ca4:	00078513          	mv	a0,a5
80000ca8:	00c12403          	lw	s0,12(sp)
80000cac:	01010113          	addi	sp,sp,16
80000cb0:	00008067          	ret

80000cb4 <External_30_IRQHandler>:
External_30_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:187

__attribute__((weak))  uint8_t External_30_IRQHandler(void)
{
80000cb4:	ff010113          	addi	sp,sp,-16
80000cb8:	00812623          	sw	s0,12(sp)
80000cbc:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:188
    return(0);
80000cc0:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:189
}
80000cc4:	00078513          	mv	a0,a5
80000cc8:	00c12403          	lw	s0,12(sp)
80000ccc:	01010113          	addi	sp,sp,16
80000cd0:	00008067          	ret

80000cd4 <External_31_IRQHandler>:
External_31_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:192

__attribute__((weak))  uint8_t External_31_IRQHandler(void)
{
80000cd4:	ff010113          	addi	sp,sp,-16
80000cd8:	00812623          	sw	s0,12(sp)
80000cdc:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:193
    return(0);
80000ce0:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:194
}
80000ce4:	00078513          	mv	a0,a5
80000ce8:	00c12403          	lw	s0,12(sp)
80000cec:	01010113          	addi	sp,sp,16
80000cf0:	00008067          	ret

80000cf4 <write_hex>:
write_hex():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:55

char *__env[1] = { 0 };
char **environ = __env;

void write_hex(int fd, uint32_t hex)
{
80000cf4:	fd010113          	addi	sp,sp,-48
80000cf8:	02112623          	sw	ra,44(sp)
80000cfc:	02812423          	sw	s0,40(sp)
80000d00:	03010413          	addi	s0,sp,48
80000d04:	fca42e23          	sw	a0,-36(s0)
80000d08:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:61
    uint8_t ii;
    uint8_t jj;
    char towrite;
    uint8_t digit;

    write( fd , "0x", 2 );
80000d0c:	00200613          	li	a2,2
80000d10:	800077b7          	lui	a5,0x80007
80000d14:	11078593          	addi	a1,a5,272 # 80007110 <__stack_top+0xfffc50c0>
80000d18:	fdc42503          	lw	a0,-36(s0)
80000d1c:	200060ef          	jal	ra,80006f1c <write>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:63

    for (ii = 8 ; ii > 0; ii--)
80000d20:	00800793          	li	a5,8
80000d24:	fef407a3          	sb	a5,-17(s0)
80000d28:	0980006f          	j	80000dc0 <write_hex+0xcc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:65
    {
        jj = ii-1;
80000d2c:	fef44783          	lbu	a5,-17(s0)
80000d30:	fff78793          	addi	a5,a5,-1
80000d34:	fef40723          	sb	a5,-18(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:66
        digit = ((hex & (0xF << (jj*4))) >> (jj*4));
80000d38:	fee44783          	lbu	a5,-18(s0)
80000d3c:	00279793          	slli	a5,a5,0x2
80000d40:	00f00713          	li	a4,15
80000d44:	00f717b3          	sll	a5,a4,a5
80000d48:	00078713          	mv	a4,a5
80000d4c:	fd842783          	lw	a5,-40(s0)
80000d50:	00f77733          	and	a4,a4,a5
80000d54:	fee44783          	lbu	a5,-18(s0)
80000d58:	00279793          	slli	a5,a5,0x2
80000d5c:	00f757b3          	srl	a5,a4,a5
80000d60:	fef406a3          	sb	a5,-19(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:67
        towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
80000d64:	fed44703          	lbu	a4,-19(s0)
80000d68:	00900793          	li	a5,9
80000d6c:	00e7ee63          	bltu	a5,a4,80000d88 <write_hex+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 1)
80000d70:	fed44783          	lbu	a5,-19(s0)
80000d74:	03078793          	addi	a5,a5,48
80000d78:	0ff7f793          	andi	a5,a5,255
80000d7c:	01879793          	slli	a5,a5,0x18
80000d80:	4187d793          	srai	a5,a5,0x18
80000d84:	0180006f          	j	80000d9c <write_hex+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 2)
80000d88:	fed44783          	lbu	a5,-19(s0)
80000d8c:	03778793          	addi	a5,a5,55
80000d90:	0ff7f793          	andi	a5,a5,255
80000d94:	01879793          	slli	a5,a5,0x18
80000d98:	4187d793          	srai	a5,a5,0x18
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 4)
80000d9c:	fef40623          	sb	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:68 (discriminator 4)
        write( fd, &towrite, 1);
80000da0:	fec40793          	addi	a5,s0,-20
80000da4:	00100613          	li	a2,1
80000da8:	00078593          	mv	a1,a5
80000dac:	fdc42503          	lw	a0,-36(s0)
80000db0:	16c060ef          	jal	ra,80006f1c <write>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 4)
    for (ii = 8 ; ii > 0; ii--)
80000db4:	fef44783          	lbu	a5,-17(s0)
80000db8:	fff78793          	addi	a5,a5,-1
80000dbc:	fef407a3          	sb	a5,-17(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 2)
80000dc0:	fef44783          	lbu	a5,-17(s0)
80000dc4:	f60794e3          	bnez	a5,80000d2c <write_hex+0x38>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:70
    }
}
80000dc8:	00000013          	nop
80000dcc:	02c12083          	lw	ra,44(sp)
80000dd0:	02812403          	lw	s0,40(sp)
80000dd4:	03010113          	addi	sp,sp,48
80000dd8:	00008067          	ret

80000ddc <_exit>:
_exit():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:74

               
void _exit(int code)
{
80000ddc:	fd010113          	addi	sp,sp,-48
80000de0:	02112623          	sw	ra,44(sp)
80000de4:	02812423          	sw	s0,40(sp)
80000de8:	03010413          	addi	s0,sp,48
80000dec:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:76
#ifdef MSCC_STDIO_THRU_CORE_UART_APB
    const char * message = "\nProgam has exited with code:";
80000df0:	800077b7          	lui	a5,0x80007
80000df4:	11478793          	addi	a5,a5,276 # 80007114 <__stack_top+0xfffc50c4>
80000df8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:78

    write(STDERR_FILENO, message, strlen(message));
80000dfc:	fec42503          	lw	a0,-20(s0)
80000e00:	0c8010ef          	jal	ra,80001ec8 <strlen>
80000e04:	00050793          	mv	a5,a0
80000e08:	00078613          	mv	a2,a5
80000e0c:	fec42583          	lw	a1,-20(s0)
80000e10:	00200513          	li	a0,2
80000e14:	108060ef          	jal	ra,80006f1c <write>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:79
    write_hex(STDERR_FILENO, code);
80000e18:	fdc42783          	lw	a5,-36(s0)
80000e1c:	00078593          	mv	a1,a5
80000e20:	00200513          	li	a0,2
80000e24:	ed1ff0ef          	jal	ra,80000cf4 <write_hex>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:82 (discriminator 1)
#endif

    while (1);
80000e28:	0000006f          	j	80000e28 <_exit+0x4c>

80000e2c <_isatty>:
_isatty():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:101
    curbrk += incr;
    return curbrk - incr;
}

int _isatty(int fd)
{
80000e2c:	fe010113          	addi	sp,sp,-32
80000e30:	00812e23          	sw	s0,28(sp)
80000e34:	02010413          	addi	s0,sp,32
80000e38:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:102
    if (fd == STDOUT_FILENO || fd == STDERR_FILENO)
80000e3c:	fec42703          	lw	a4,-20(s0)
80000e40:	00100793          	li	a5,1
80000e44:	00f70863          	beq	a4,a5,80000e54 <_isatty+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:102 (discriminator 1)
80000e48:	fec42703          	lw	a4,-20(s0)
80000e4c:	00200793          	li	a5,2
80000e50:	00f71663          	bne	a4,a5,80000e5c <_isatty+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:104
    {
        return 1;
80000e54:	00100793          	li	a5,1
80000e58:	0140006f          	j	80000e6c <_isatty+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:107
    }

    errno = EBADF;
80000e5c:	800217b7          	lui	a5,0x80021
80000e60:	00900713          	li	a4,9
80000e64:	50e7a823          	sw	a4,1296(a5) # 80021510 <__stack_top+0xfffdf4c0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:108
    return 0;
80000e68:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:109
}
80000e6c:	00078513          	mv	a0,a5
80000e70:	01c12403          	lw	s0,28(sp)
80000e74:	02010113          	addi	sp,sp,32
80000e78:	00008067          	ret

80000e7c <stub>:
stub():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:112

static int stub(int err)
{
80000e7c:	fe010113          	addi	sp,sp,-32
80000e80:	00812e23          	sw	s0,28(sp)
80000e84:	02010413          	addi	s0,sp,32
80000e88:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:113
    errno = err;
80000e8c:	800217b7          	lui	a5,0x80021
80000e90:	fec42703          	lw	a4,-20(s0)
80000e94:	50e7a823          	sw	a4,1296(a5) # 80021510 <__stack_top+0xfffdf4c0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:114
    return -1;
80000e98:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:115
}
80000e9c:	00078513          	mv	a0,a5
80000ea0:	01c12403          	lw	s0,28(sp)
80000ea4:	02010113          	addi	sp,sp,32
80000ea8:	00008067          	ret

80000eac <_write>:
_write():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:226
{
    return stub(ECHILD);
}

ssize_t _write(int fd, const void* ptr, size_t len)
{
80000eac:	fd010113          	addi	sp,sp,-48
80000eb0:	02112623          	sw	ra,44(sp)
80000eb4:	02812423          	sw	s0,40(sp)
80000eb8:	03010413          	addi	s0,sp,48
80000ebc:	fca42e23          	sw	a0,-36(s0)
80000ec0:	fcb42c23          	sw	a1,-40(s0)
80000ec4:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:229

#ifdef MSCC_STDIO_THRU_CORE_UART_APB
  const uint8_t * current = (const uint8_t *) ptr;
80000ec8:	fd842783          	lw	a5,-40(s0)
80000ecc:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:232
  size_t jj;

  if (_isatty(fd))
80000ed0:	fdc42503          	lw	a0,-36(s0)
80000ed4:	f59ff0ef          	jal	ra,80000e2c <_isatty>
80000ed8:	00050793          	mv	a5,a0
80000edc:	08078c63          	beqz	a5,80000f74 <_write+0xc8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:238
  {
        /*--------------------------------------------------------------------------
        * Initialize the UART driver if it is the first time this function is
        * called.
        */
        if ( !g_stdio_uart_init_done )
80000ee0:	9101a783          	lw	a5,-1776(gp) # 80007970 <g_stdio_uart_init_done>
80000ee4:	02079063          	bnez	a5,80000f04 <_write+0x58>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:245
            /******************************************************************************
            * Baud value:
            * This value is calculated using the following equation:
            *      BAUD_VALUE = (CLOCK / (16 * BAUD_RATE)) - 1
            *****************************************************************************/
            UART_init( &g_stdio_uart, MSCC_STDIO_UART_BASE_ADDR, ((SYS_CLK_FREQ/(16 * MSCC_STDIO_BAUD_VALUE))-1), (DATA_8_BITS | NO_PARITY));
80000ee8:	00100693          	li	a3,1
80000eec:	02c00613          	li	a2,44
80000ef0:	700015b7          	lui	a1,0x70001
80000ef4:	90818513          	addi	a0,gp,-1784 # 80007968 <g_stdio_uart>
80000ef8:	174000ef          	jal	ra,8000106c <UART_init>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:246
            g_stdio_uart_init_done = 1;
80000efc:	00100713          	li	a4,1
80000f00:	90e1a823          	sw	a4,-1776(gp) # 80007970 <g_stdio_uart_init_done>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:249
        }

    for (jj = 0; jj < len; jj++)
80000f04:	fe042623          	sw	zero,-20(s0)
80000f08:	0580006f          	j	80000f60 <_write+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:251
    {
        UART_send(&g_stdio_uart, current + jj, 1);
80000f0c:	fe842703          	lw	a4,-24(s0)
80000f10:	fec42783          	lw	a5,-20(s0)
80000f14:	00f707b3          	add	a5,a4,a5
80000f18:	00100613          	li	a2,1
80000f1c:	00078593          	mv	a1,a5
80000f20:	90818513          	addi	a0,gp,-1784 # 80007968 <g_stdio_uart>
80000f24:	260000ef          	jal	ra,80001184 <UART_send>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:252
        if (current[jj] == '\n')
80000f28:	fe842703          	lw	a4,-24(s0)
80000f2c:	fec42783          	lw	a5,-20(s0)
80000f30:	00f707b3          	add	a5,a4,a5
80000f34:	0007c703          	lbu	a4,0(a5)
80000f38:	00a00793          	li	a5,10
80000f3c:	00f71c63          	bne	a4,a5,80000f54 <_write+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:254
        {
            UART_send(&g_stdio_uart, (const uint8_t *)"\r", 1);
80000f40:	00100613          	li	a2,1
80000f44:	800077b7          	lui	a5,0x80007
80000f48:	13478593          	addi	a1,a5,308 # 80007134 <__stack_top+0xfffc50e4>
80000f4c:	90818513          	addi	a0,gp,-1784 # 80007968 <g_stdio_uart>
80000f50:	234000ef          	jal	ra,80001184 <UART_send>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 2)
    for (jj = 0; jj < len; jj++)
80000f54:	fec42783          	lw	a5,-20(s0)
80000f58:	00178793          	addi	a5,a5,1
80000f5c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 1)
80000f60:	fec42703          	lw	a4,-20(s0)
80000f64:	fd442783          	lw	a5,-44(s0)
80000f68:	faf762e3          	bltu	a4,a5,80000f0c <_write+0x60>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:257
        }
    }
    return len;
80000f6c:	fd442783          	lw	a5,-44(s0)
80000f70:	0100006f          	j	80000f80 <_write+0xd4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:261
  }
#endif

  return stub(EBADF);
80000f74:	00900513          	li	a0,9
80000f78:	f05ff0ef          	jal	ra,80000e7c <stub>
80000f7c:	00050793          	mv	a5,a0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:262
}
80000f80:	00078513          	mv	a0,a5
80000f84:	02c12083          	lw	ra,44(sp)
80000f88:	02812403          	lw	s0,40(sp)
80000f8c:	03010113          	addi	sp,sp,48
80000f90:	00008067          	ret

80000f94 <HW_set_32bit_reg>:
HW_set_32bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:36
 *
 * a0:   addr_t reg_addr
 * a1:   uint32_t value
 */
HW_set_32bit_reg:
    sw a1, 0(a0)
80000f94:	00b52023          	sw	a1,0(a0) # 44000000 <RAM_SIZE+0x43f80000>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:37
    ret
80000f98:	00008067          	ret

80000f9c <HW_get_32bit_reg>:
HW_get_32bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:47
 *
 * R0:   addr_t reg_addr
 * @return          32 bits value read from the peripheral register.
 */
HW_get_32bit_reg:
    lw a0, 0(a0)
80000f9c:	00052503          	lw	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:48
    ret
80000fa0:	00008067          	ret

80000fa4 <HW_set_32bit_reg_field>:
HW_set_32bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:60
 * a1:   int_fast8_t shift
 * a2:   uint32_t mask
 * a3:   uint32_t value
 */
HW_set_32bit_reg_field:
    mv t3, a3
80000fa4:	00068e13          	mv	t3,a3
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:61
    sll t3, t3, a1
80000fa8:	00be1e33          	sll	t3,t3,a1
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:62
    and  t3, t3, a2
80000fac:	00ce7e33          	and	t3,t3,a2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:63
    lw t1, 0(a0)
80000fb0:	00052303          	lw	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:64
    mv t2, a2
80000fb4:	00060393          	mv	t2,a2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:65
    not t2, t2
80000fb8:	fff3c393          	not	t2,t2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:66
    and t1, t1, t2
80000fbc:	00737333          	and	t1,t1,t2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:67
    or t1, t1, t3
80000fc0:	01c36333          	or	t1,t1,t3
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:68
    sw t1, 0(a0)
80000fc4:	00652023          	sw	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:69
    ret
80000fc8:	00008067          	ret

80000fcc <HW_get_32bit_reg_field>:
HW_get_32bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:83
 *
 * @return          32 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_32bit_reg_field:
    lw a0, 0(a0)
80000fcc:	00052503          	lw	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:84
    and a0, a0, a2
80000fd0:	00c57533          	and	a0,a0,a2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:85
    srl a0, a0, a1
80000fd4:	00b55533          	srl	a0,a0,a1
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:86
    ret
80000fd8:	00008067          	ret

80000fdc <HW_set_16bit_reg>:
HW_set_16bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:96
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast16_t value
 */
HW_set_16bit_reg:
    sh a1, 0(a0)
80000fdc:	00b51023          	sh	a1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:97
    ret
80000fe0:	00008067          	ret

80000fe4 <HW_get_16bit_reg>:
HW_get_16bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:107
 *
 * a0:   addr_t reg_addr
 * @return          16 bits value read from the peripheral register.
 */
HW_get_16bit_reg:
    lh a0, (a0)
80000fe4:	00051503          	lh	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:108
    ret
80000fe8:	00008067          	ret

80000fec <HW_set_16bit_reg_field>:
HW_set_16bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:121
 * a2:   uint_fast16_t mask
 * a3:   uint_fast16_t value
 * @param value     Value to be written in the specified field.
 */
HW_set_16bit_reg_field:
    mv t3, a3
80000fec:	00068e13          	mv	t3,a3
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:122
    sll t3, t3, a1
80000ff0:	00be1e33          	sll	t3,t3,a1
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:123
    and  t3, t3, a2
80000ff4:	00ce7e33          	and	t3,t3,a2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:124
    lh t1, 0(a0)
80000ff8:	00051303          	lh	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:125
    mv t2, a2
80000ffc:	00060393          	mv	t2,a2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:126
    not t2, t2
80001000:	fff3c393          	not	t2,t2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:127
    and t1, t1, t2
80001004:	00737333          	and	t1,t1,t2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:128
    or t1, t1, t3
80001008:	01c36333          	or	t1,t1,t3
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:129
    sh t1, 0(a0)
8000100c:	00651023          	sh	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:130
    ret
80001010:	00008067          	ret

80001014 <HW_get_16bit_reg_field>:
HW_get_16bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:144
 *
 * @return          16 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_16bit_reg_field:
    lh a0, 0(a0)
80001014:	00051503          	lh	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:145
    and a0, a0, a2
80001018:	00c57533          	and	a0,a0,a2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:146
    srl a0, a0, a1
8000101c:	00b55533          	srl	a0,a0,a1
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:147
    ret
80001020:	00008067          	ret

80001024 <HW_set_8bit_reg>:
HW_set_8bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:157
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast8_t value
 */
HW_set_8bit_reg:
    sb a1, 0(a0)
80001024:	00b50023          	sb	a1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:158
    ret
80001028:	00008067          	ret

8000102c <HW_get_8bit_reg>:
HW_get_8bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:168
 *
 * a0:   addr_t reg_addr
 * @return          8 bits value read from the peripheral register.
 */
HW_get_8bit_reg:
    lb a0, 0(a0)
8000102c:	00050503          	lb	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:169
    ret
80001030:	00008067          	ret

80001034 <HW_set_8bit_reg_field>:
HW_set_8bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:181
 * a1:   int_fast8_t shift
 * a2:   uint_fast8_t mask
 * a3:   uint_fast8_t value
 */
HW_set_8bit_reg_field:
    mv t3, a3
80001034:	00068e13          	mv	t3,a3
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:182
    sll t3, t3, a1
80001038:	00be1e33          	sll	t3,t3,a1
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:183
    and  t3, t3, a2
8000103c:	00ce7e33          	and	t3,t3,a2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:184
    lb t1, 0(a0)
80001040:	00050303          	lb	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:185
    mv t2, a2
80001044:	00060393          	mv	t2,a2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:186
    not t2, t2
80001048:	fff3c393          	not	t2,t2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:187
    and t1, t1, t2
8000104c:	00737333          	and	t1,t1,t2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:188
    or t1, t1, t3
80001050:	01c36333          	or	t1,t1,t3
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:189
    sb t1, 0(a0)
80001054:	00650023          	sb	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:190
    ret
80001058:	00008067          	ret

8000105c <HW_get_8bit_reg_field>:
HW_get_8bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:204
 *
 * @return          8 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_8bit_reg_field:
    lb a0, 0(a0)
8000105c:	00050503          	lb	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:205
    and a0, a0, a2
80001060:	00c57533          	and	a0,a0,a2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:206
    srl a0, a0, a1
80001064:	00b55533          	srl	a0,a0,a1
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:207
    ret
80001068:	00008067          	ret

8000106c <UART_init>:
UART_init():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:46
    UART_instance_t * this_uart,
    addr_t base_addr,
    uint16_t baud_value,
    uint8_t line_config
)
{
8000106c:	fd010113          	addi	sp,sp,-48
80001070:	02112623          	sw	ra,44(sp)
80001074:	02812423          	sw	s0,40(sp)
80001078:	03010413          	addi	s0,sp,48
8000107c:	fca42e23          	sw	a0,-36(s0)
80001080:	fcb42c23          	sw	a1,-40(s0)
80001084:	00060793          	mv	a5,a2
80001088:	00068713          	mv	a4,a3
8000108c:	fcf41b23          	sh	a5,-42(s0)
80001090:	00070793          	mv	a5,a4
80001094:	fcf40aa3          	sb	a5,-43(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53
    
    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( line_config <= MAX_LINE_CONFIG )
    HAL_ASSERT( baud_value <= MAX_BAUD_VALUE )

    if( ( this_uart != NULL_INSTANCE ) &&
80001098:	fdc42783          	lw	a5,-36(s0)
8000109c:	0c078a63          	beqz	a5,80001170 <UART_init+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53 (discriminator 1)
800010a0:	fd544703          	lbu	a4,-43(s0)
800010a4:	00700793          	li	a5,7
800010a8:	0ce7e463          	bltu	a5,a4,80001170 <UART_init+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:54
        ( line_config <= MAX_LINE_CONFIG ) &&
800010ac:	fd645703          	lhu	a4,-42(s0)
800010b0:	000027b7          	lui	a5,0x2
800010b4:	0af77e63          	bleu	a5,a4,80001170 <UART_init+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:60
        ( baud_value <= MAX_BAUD_VALUE ) )
    {
        /*
         * Store lower 8-bits of baud value in CTRL1.
         */
        HAL_set_8bit_reg( base_addr, CTRL1, (uint_fast8_t)(baud_value &
800010b8:	fd842783          	lw	a5,-40(s0)
800010bc:	00878713          	addi	a4,a5,8 # 2008 <HEAP_SIZE-0xdff8>
800010c0:	fd645783          	lhu	a5,-42(s0)
800010c4:	0ff7f793          	andi	a5,a5,255
800010c8:	00078593          	mv	a1,a5
800010cc:	00070513          	mv	a0,a4
800010d0:	f55ff0ef          	jal	ra,80001024 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:67
    
        /*
         * Extract higher 5-bits of baud value and store in higher 5-bits 
         * of CTRL2, along with line configuration in lower 3 three bits.
         */
        HAL_set_8bit_reg( base_addr, CTRL2, (uint_fast8_t)line_config | 
800010d4:	fd842783          	lw	a5,-40(s0)
800010d8:	00c78693          	addi	a3,a5,12
800010dc:	fd544703          	lbu	a4,-43(s0)
800010e0:	fd645783          	lhu	a5,-42(s0)
800010e4:	4057d793          	srai	a5,a5,0x5
800010e8:	7f87f793          	andi	a5,a5,2040
800010ec:	00f767b3          	or	a5,a4,a5
800010f0:	00078593          	mv	a1,a5
800010f4:	00068513          	mv	a0,a3
800010f8:	f2dff0ef          	jal	ra,80001024 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:71
                                           (uint_fast8_t)((baud_value &
                                   BAUDVALUE_MSB) >> BAUDVALUE_SHIFT ) );
    
        this_uart->base_address = base_addr;
800010fc:	fdc42783          	lw	a5,-36(s0)
80001100:	fd842703          	lw	a4,-40(s0)
80001104:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:94
        
        /*
         * Flush the receive FIFO of data that may have been received before the
         * driver was initialized.
         */
        rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001108:	fdc42783          	lw	a5,-36(s0)
8000110c:	0007a783          	lw	a5,0(a5)
80001110:	01078793          	addi	a5,a5,16
80001114:	00078513          	mv	a0,a5
80001118:	f15ff0ef          	jal	ra,8000102c <HW_get_8bit_reg>
8000111c:	00050793          	mv	a5,a0
80001120:	0027f793          	andi	a5,a5,2
80001124:	fef407a3          	sb	a5,-17(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
                                                    STATUS_RXFULL_MASK;
        while ( rx_full )
80001128:	0380006f          	j	80001160 <UART_init+0xf4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:98
        {
            HAL_get_8bit_reg( this_uart->base_address, RXDATA );
8000112c:	fdc42783          	lw	a5,-36(s0)
80001130:	0007a783          	lw	a5,0(a5)
80001134:	00478793          	addi	a5,a5,4
80001138:	00078513          	mv	a0,a5
8000113c:	ef1ff0ef          	jal	ra,8000102c <HW_get_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:99
            rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001140:	fdc42783          	lw	a5,-36(s0)
80001144:	0007a783          	lw	a5,0(a5)
80001148:	01078793          	addi	a5,a5,16
8000114c:	00078513          	mv	a0,a5
80001150:	eddff0ef          	jal	ra,8000102c <HW_get_8bit_reg>
80001154:	00050793          	mv	a5,a0
80001158:	0027f793          	andi	a5,a5,2
8000115c:	fef407a3          	sb	a5,-17(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
        while ( rx_full )
80001160:	fef44783          	lbu	a5,-17(s0)
80001164:	fc0794e3          	bnez	a5,8000112c <UART_init+0xc0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:106
        }

        /*
         * Clear status of the UART instance.
         */
        this_uart->status = (uint8_t)0;
80001168:	fdc42783          	lw	a5,-36(s0)
8000116c:	00078223          	sb	zero,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:108
    }
}
80001170:	00000013          	nop
80001174:	02c12083          	lw	ra,44(sp)
80001178:	02812403          	lw	s0,40(sp)
8000117c:	03010113          	addi	sp,sp,48
80001180:	00008067          	ret

80001184 <UART_send>:
UART_send():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:121
(
    UART_instance_t * this_uart,
    const uint8_t * tx_buffer,
    size_t tx_size
)
{
80001184:	fd010113          	addi	sp,sp,-48
80001188:	02112623          	sw	ra,44(sp)
8000118c:	02812423          	sw	s0,40(sp)
80001190:	03010413          	addi	s0,sp,48
80001194:	fca42e23          	sw	a0,-36(s0)
80001198:	fcb42c23          	sw	a1,-40(s0)
8000119c:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( tx_buffer != NULL_BUFFER )
    HAL_ASSERT( tx_size > 0 )
      
    if( (this_uart != NULL_INSTANCE) &&
800011a0:	fdc42783          	lw	a5,-36(s0)
800011a4:	08078063          	beqz	a5,80001224 <UART_send+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129 (discriminator 1)
800011a8:	fd842783          	lw	a5,-40(s0)
800011ac:	06078c63          	beqz	a5,80001224 <UART_send+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:130
        (tx_buffer != NULL_BUFFER)   &&
800011b0:	fd442783          	lw	a5,-44(s0)
800011b4:	06078863          	beqz	a5,80001224 <UART_send+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133
        (tx_size > (size_t)0) )
    {
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
800011b8:	fe042623          	sw	zero,-20(s0)
800011bc:	05c0006f          	j	80001218 <UART_send+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:137 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
800011c0:	fdc42783          	lw	a5,-36(s0)
800011c4:	0007a783          	lw	a5,0(a5)
800011c8:	01078793          	addi	a5,a5,16
800011cc:	00078513          	mv	a0,a5
800011d0:	e5dff0ef          	jal	ra,8000102c <HW_get_8bit_reg>
800011d4:	00050793          	mv	a5,a0
800011d8:	0017f793          	andi	a5,a5,1
800011dc:	fef405a3          	sb	a5,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:139 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
800011e0:	feb44783          	lbu	a5,-21(s0)
800011e4:	fc078ee3          	beqz	a5,800011c0 <UART_send+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:141 (discriminator 2)
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
800011e8:	fdc42783          	lw	a5,-36(s0)
800011ec:	0007a683          	lw	a3,0(a5)
800011f0:	fd842703          	lw	a4,-40(s0)
800011f4:	fec42783          	lw	a5,-20(s0)
800011f8:	00f707b3          	add	a5,a4,a5
800011fc:	0007c783          	lbu	a5,0(a5)
80001200:	00078593          	mv	a1,a5
80001204:	00068513          	mv	a0,a3
80001208:	e1dff0ef          	jal	ra,80001024 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 2)
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
8000120c:	fec42783          	lw	a5,-20(s0)
80001210:	00178793          	addi	a5,a5,1
80001214:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 1)
80001218:	fec42703          	lw	a4,-20(s0)
8000121c:	fd442783          	lw	a5,-44(s0)
80001220:	faf760e3          	bltu	a4,a5,800011c0 <UART_send+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:145
                              (uint_fast8_t)tx_buffer[char_idx] );
        }
    }
}
80001224:	00000013          	nop
80001228:	02c12083          	lw	ra,44(sp)
8000122c:	02812403          	lw	s0,40(sp)
80001230:	03010113          	addi	sp,sp,48
80001234:	00008067          	ret

80001238 <UART_polled_tx_string>:
UART_polled_tx_string():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:239
UART_polled_tx_string
( 
    UART_instance_t * this_uart, 
    const uint8_t * p_sz_string
)
{
80001238:	fd010113          	addi	sp,sp,-48
8000123c:	02112623          	sw	ra,44(sp)
80001240:	02812423          	sw	s0,40(sp)
80001244:	03010413          	addi	s0,sp,48
80001248:	fca42e23          	sw	a0,-36(s0)
8000124c:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246
    uint8_t tx_ready;

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( p_sz_string != NULL_BUFFER )
    
    if( ( this_uart != NULL_INSTANCE ) && ( p_sz_string != NULL_BUFFER ) )
80001250:	fdc42783          	lw	a5,-36(s0)
80001254:	08078063          	beqz	a5,800012d4 <UART_polled_tx_string+0x9c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246 (discriminator 1)
80001258:	fd842783          	lw	a5,-40(s0)
8000125c:	06078c63          	beqz	a5,800012d4 <UART_polled_tx_string+0x9c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:248
    {
        char_idx = 0U;
80001260:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
80001264:	05c0006f          	j	800012c0 <UART_polled_tx_string+0x88>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:253 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001268:	fdc42783          	lw	a5,-36(s0)
8000126c:	0007a783          	lw	a5,0(a5)
80001270:	01078793          	addi	a5,a5,16
80001274:	00078513          	mv	a0,a5
80001278:	db5ff0ef          	jal	ra,8000102c <HW_get_8bit_reg>
8000127c:	00050793          	mv	a5,a0
80001280:	0017f793          	andi	a5,a5,1
80001284:	fef405a3          	sb	a5,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:255 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
80001288:	feb44783          	lbu	a5,-21(s0)
8000128c:	fc078ee3          	beqz	a5,80001268 <UART_polled_tx_string+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:257
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
80001290:	fdc42783          	lw	a5,-36(s0)
80001294:	0007a683          	lw	a3,0(a5)
80001298:	fd842703          	lw	a4,-40(s0)
8000129c:	fec42783          	lw	a5,-20(s0)
800012a0:	00f707b3          	add	a5,a4,a5
800012a4:	0007c783          	lbu	a5,0(a5)
800012a8:	00078593          	mv	a1,a5
800012ac:	00068513          	mv	a0,a3
800012b0:	d75ff0ef          	jal	ra,80001024 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:259
                              (uint_fast8_t)p_sz_string[char_idx] );
            char_idx++;
800012b4:	fec42783          	lw	a5,-20(s0)
800012b8:	00178793          	addi	a5,a5,1
800012bc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
800012c0:	fd842703          	lw	a4,-40(s0)
800012c4:	fec42783          	lw	a5,-20(s0)
800012c8:	00f707b3          	add	a5,a4,a5
800012cc:	0007c783          	lbu	a5,0(a5)
800012d0:	f8079ce3          	bnez	a5,80001268 <UART_polled_tx_string+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:262
        }
    }
}
800012d4:	00000013          	nop
800012d8:	02c12083          	lw	ra,44(sp)
800012dc:	02812403          	lw	s0,40(sp)
800012e0:	03010113          	addi	sp,sp,48
800012e4:	00008067          	ret

800012e8 <pvPortMalloc>:
pvPortMalloc():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:151
}
/*-----------------------------------------------------------*/


void *pvPortMalloc( size_t xWantedSize )
{
800012e8:	fc010113          	addi	sp,sp,-64
800012ec:	02112e23          	sw	ra,60(sp)
800012f0:	02812c23          	sw	s0,56(sp)
800012f4:	04010413          	addi	s0,sp,64
800012f8:	fca42623          	sw	a0,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:154
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
800012fc:	fe042223          	sw	zero,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:156

	vTaskSuspendAll();
80001300:	024010ef          	jal	ra,80002324 <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:160
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
80001304:	9241a783          	lw	a5,-1756(gp) # 80007984 <xHeapHasBeenInitialised.2777>
80001308:	00079863          	bnez	a5,80001318 <pvPortMalloc+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:162
		{
			prvHeapInit();
8000130c:	284000ef          	jal	ra,80001590 <prvHeapInit>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:163
			xHeapHasBeenInitialised = pdTRUE;
80001310:	00100713          	li	a4,1
80001314:	92e1a223          	sw	a4,-1756(gp) # 80007984 <xHeapHasBeenInitialised.2777>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:168
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
80001318:	fcc42783          	lw	a5,-52(s0)
8000131c:	02078a63          	beqz	a5,80001350 <pvPortMalloc+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:170
		{
			xWantedSize += heapSTRUCT_SIZE;
80001320:	00800793          	li	a5,8
80001324:	00078713          	mv	a4,a5
80001328:	fcc42783          	lw	a5,-52(s0)
8000132c:	00e787b3          	add	a5,a5,a4
80001330:	fcf42623          	sw	a5,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:173

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
80001334:	fcc42783          	lw	a5,-52(s0)
80001338:	0037f793          	andi	a5,a5,3
8000133c:	00078a63          	beqz	a5,80001350 <pvPortMalloc+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:176
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
80001340:	fcc42783          	lw	a5,-52(s0)
80001344:	ffc7f793          	andi	a5,a5,-4
80001348:	00478793          	addi	a5,a5,4
8000134c:	fcf42623          	sw	a5,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
80001350:	fcc42783          	lw	a5,-52(s0)
80001354:	14078463          	beqz	a5,8000149c <pvPortMalloc+0x1b4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180 (discriminator 1)
80001358:	fcc42703          	lw	a4,-52(s0)
8000135c:	000197b7          	lui	a5,0x19
80001360:	ffb78793          	addi	a5,a5,-5 # 18ffb <HEAP_SIZE+0x8ffb>
80001364:	12e7ec63          	bltu	a5,a4,8000149c <pvPortMalloc+0x1b4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:184
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
80001368:	91418793          	addi	a5,gp,-1772 # 80007974 <xStart>
8000136c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:185
			pxBlock = xStart.pxNextFreeBlock;
80001370:	9141a783          	lw	a5,-1772(gp) # 80007974 <xStart>
80001374:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
80001378:	0180006f          	j	80001390 <pvPortMalloc+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:188
			{
				pxPreviousBlock = pxBlock;
8000137c:	fec42783          	lw	a5,-20(s0)
80001380:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:189
				pxBlock = pxBlock->pxNextFreeBlock;
80001384:	fec42783          	lw	a5,-20(s0)
80001388:	0007a783          	lw	a5,0(a5)
8000138c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
80001390:	fec42783          	lw	a5,-20(s0)
80001394:	0047a783          	lw	a5,4(a5)
80001398:	fcc42703          	lw	a4,-52(s0)
8000139c:	00e7f863          	bleu	a4,a5,800013ac <pvPortMalloc+0xc4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186 (discriminator 1)
800013a0:	fec42783          	lw	a5,-20(s0)
800013a4:	0007a783          	lw	a5,0(a5)
800013a8:	fc079ae3          	bnez	a5,8000137c <pvPortMalloc+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:193
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
800013ac:	fec42703          	lw	a4,-20(s0)
800013b0:	91c18793          	addi	a5,gp,-1764 # 8000797c <xEnd>
800013b4:	0ef70463          	beq	a4,a5,8000149c <pvPortMalloc+0x1b4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:197
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
800013b8:	fe842783          	lw	a5,-24(s0)
800013bc:	0007a783          	lw	a5,0(a5)
800013c0:	00800713          	li	a4,8
800013c4:	00e787b3          	add	a5,a5,a4
800013c8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:201

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
800013cc:	fec42783          	lw	a5,-20(s0)
800013d0:	0007a703          	lw	a4,0(a5)
800013d4:	fe842783          	lw	a5,-24(s0)
800013d8:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:204

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
800013dc:	fec42783          	lw	a5,-20(s0)
800013e0:	0047a703          	lw	a4,4(a5)
800013e4:	fcc42783          	lw	a5,-52(s0)
800013e8:	40f707b3          	sub	a5,a4,a5
800013ec:	00800713          	li	a4,8
800013f0:	00171713          	slli	a4,a4,0x1
800013f4:	08f77663          	bleu	a5,a4,80001480 <pvPortMalloc+0x198>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:209
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
800013f8:	fec42703          	lw	a4,-20(s0)
800013fc:	fcc42783          	lw	a5,-52(s0)
80001400:	00f707b3          	add	a5,a4,a5
80001404:	fcf42e23          	sw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:213

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
80001408:	fec42783          	lw	a5,-20(s0)
8000140c:	0047a703          	lw	a4,4(a5)
80001410:	fcc42783          	lw	a5,-52(s0)
80001414:	40f70733          	sub	a4,a4,a5
80001418:	fdc42783          	lw	a5,-36(s0)
8000141c:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:214
					pxBlock->xBlockSize = xWantedSize;
80001420:	fec42783          	lw	a5,-20(s0)
80001424:	fcc42703          	lw	a4,-52(s0)
80001428:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
8000142c:	fdc42783          	lw	a5,-36(s0)
80001430:	0047a783          	lw	a5,4(a5)
80001434:	fcf42c23          	sw	a5,-40(s0)
80001438:	91418793          	addi	a5,gp,-1772 # 80007974 <xStart>
8000143c:	fef42023          	sw	a5,-32(s0)
80001440:	0100006f          	j	80001450 <pvPortMalloc+0x168>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 3)
80001444:	fe042783          	lw	a5,-32(s0)
80001448:	0007a783          	lw	a5,0(a5)
8000144c:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 1)
80001450:	fe042783          	lw	a5,-32(s0)
80001454:	0007a783          	lw	a5,0(a5)
80001458:	0047a783          	lw	a5,4(a5)
8000145c:	fd842703          	lw	a4,-40(s0)
80001460:	fee7e2e3          	bltu	a5,a4,80001444 <pvPortMalloc+0x15c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 4)
80001464:	fe042783          	lw	a5,-32(s0)
80001468:	0007a703          	lw	a4,0(a5)
8000146c:	fdc42783          	lw	a5,-36(s0)
80001470:	00e7a023          	sw	a4,0(a5)
80001474:	fe042783          	lw	a5,-32(s0)
80001478:	fdc42703          	lw	a4,-36(s0)
8000147c:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:220
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
80001480:	800087b7          	lui	a5,0x80008
80001484:	8607a703          	lw	a4,-1952(a5) # 80007860 <__stack_top+0xfffc5810>
80001488:	fec42783          	lw	a5,-20(s0)
8000148c:	0047a783          	lw	a5,4(a5)
80001490:	40f70733          	sub	a4,a4,a5
80001494:	800087b7          	lui	a5,0x80008
80001498:	86e7a023          	sw	a4,-1952(a5) # 80007860 <__stack_top+0xfffc5810>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:226
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
8000149c:	6b1000ef          	jal	ra,8000234c <xTaskResumeAll>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:230

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
800014a0:	fe442783          	lw	a5,-28(s0)
800014a4:	00079463          	bnez	a5,800014ac <pvPortMalloc+0x1c4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:233
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
800014a8:	1b1050ef          	jal	ra,80006e58 <vApplicationMallocFailedHook>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:238
		}
	}
	#endif

	return pvReturn;
800014ac:	fe442783          	lw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:239
}
800014b0:	00078513          	mv	a0,a5
800014b4:	03c12083          	lw	ra,60(sp)
800014b8:	03812403          	lw	s0,56(sp)
800014bc:	04010113          	addi	sp,sp,64
800014c0:	00008067          	ret

800014c4 <vPortFree>:
vPortFree():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:243
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
800014c4:	fd010113          	addi	sp,sp,-48
800014c8:	02112623          	sw	ra,44(sp)
800014cc:	02812423          	sw	s0,40(sp)
800014d0:	03010413          	addi	s0,sp,48
800014d4:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:244
uint8_t *puc = ( uint8_t * ) pv;
800014d8:	fdc42783          	lw	a5,-36(s0)
800014dc:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:247
BlockLink_t *pxLink;

	if( pv != NULL )
800014e0:	fdc42783          	lw	a5,-36(s0)
800014e4:	08078c63          	beqz	a5,8000157c <vPortFree+0xb8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:251
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
800014e8:	00800793          	li	a5,8
800014ec:	40f007b3          	neg	a5,a5
800014f0:	fe842703          	lw	a4,-24(s0)
800014f4:	00f707b3          	add	a5,a4,a5
800014f8:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:255

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
800014fc:	fe842783          	lw	a5,-24(s0)
80001500:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:257

		vTaskSuspendAll();
80001504:	621000ef          	jal	ra,80002324 <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
80001508:	fe442783          	lw	a5,-28(s0)
8000150c:	0047a783          	lw	a5,4(a5)
80001510:	fef42023          	sw	a5,-32(s0)
80001514:	91418793          	addi	a5,gp,-1772 # 80007974 <xStart>
80001518:	fef42623          	sw	a5,-20(s0)
8000151c:	0100006f          	j	8000152c <vPortFree+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 3)
80001520:	fec42783          	lw	a5,-20(s0)
80001524:	0007a783          	lw	a5,0(a5)
80001528:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 1)
8000152c:	fec42783          	lw	a5,-20(s0)
80001530:	0007a783          	lw	a5,0(a5)
80001534:	0047a783          	lw	a5,4(a5)
80001538:	fe042703          	lw	a4,-32(s0)
8000153c:	fee7e2e3          	bltu	a5,a4,80001520 <vPortFree+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 4)
80001540:	fec42783          	lw	a5,-20(s0)
80001544:	0007a703          	lw	a4,0(a5)
80001548:	fe442783          	lw	a5,-28(s0)
8000154c:	00e7a023          	sw	a4,0(a5)
80001550:	fec42783          	lw	a5,-20(s0)
80001554:	fe442703          	lw	a4,-28(s0)
80001558:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:261 (discriminator 4)
			xFreeBytesRemaining += pxLink->xBlockSize;
8000155c:	fe442783          	lw	a5,-28(s0)
80001560:	0047a703          	lw	a4,4(a5)
80001564:	800087b7          	lui	a5,0x80008
80001568:	8607a783          	lw	a5,-1952(a5) # 80007860 <__stack_top+0xfffc5810>
8000156c:	00f70733          	add	a4,a4,a5
80001570:	800087b7          	lui	a5,0x80008
80001574:	86e7a023          	sw	a4,-1952(a5) # 80007860 <__stack_top+0xfffc5810>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:264 (discriminator 4)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
80001578:	5d5000ef          	jal	ra,8000234c <xTaskResumeAll>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:266
	}
}
8000157c:	00000013          	nop
80001580:	02c12083          	lw	ra,44(sp)
80001584:	02812403          	lw	s0,40(sp)
80001588:	03010113          	addi	sp,sp,48
8000158c:	00008067          	ret

80001590 <prvHeapInit>:
prvHeapInit():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:282
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
80001590:	fe010113          	addi	sp,sp,-32
80001594:	00812e23          	sw	s0,28(sp)
80001598:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:287
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
8000159c:	800087b7          	lui	a5,0x80008
800015a0:	9d478793          	addi	a5,a5,-1580 # 800079d4 <__stack_top+0xfffc5984>
800015a4:	ffc7f793          	andi	a5,a5,-4
800015a8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:291

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
800015ac:	fec42703          	lw	a4,-20(s0)
800015b0:	90e1aa23          	sw	a4,-1772(gp) # 80007974 <xStart>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:292
	xStart.xBlockSize = ( size_t ) 0;
800015b4:	91418793          	addi	a5,gp,-1772 # 80007974 <xStart>
800015b8:	0007a223          	sw	zero,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:295

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
800015bc:	91c18793          	addi	a5,gp,-1764 # 8000797c <xEnd>
800015c0:	00019737          	lui	a4,0x19
800015c4:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
800015c8:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:296
	xEnd.pxNextFreeBlock = NULL;
800015cc:	9001ae23          	sw	zero,-1764(gp) # 8000797c <xEnd>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:300

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
800015d0:	fec42783          	lw	a5,-20(s0)
800015d4:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:301
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
800015d8:	fe842783          	lw	a5,-24(s0)
800015dc:	00019737          	lui	a4,0x19
800015e0:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
800015e4:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:302
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
800015e8:	fe842783          	lw	a5,-24(s0)
800015ec:	91c18713          	addi	a4,gp,-1764 # 8000797c <xEnd>
800015f0:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:303
}
800015f4:	00000013          	nop
800015f8:	01c12403          	lw	s0,28(sp)
800015fc:	02010113          	addi	sp,sp,32
80001600:	00008067          	ret

80001604 <raise_soft_interrupt>:
raise_soft_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:227
/*==============================================================================
 * The function raise_soft_interrupt() raises a synchronous software interrupt by
 * writing into the MSIP register.
 */
static inline void raise_soft_interrupt()
{
80001604:	fe010113          	addi	sp,sp,-32
80001608:	00812e23          	sw	s0,28(sp)
8000160c:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:228
    unsigned long hart_id = read_csr(mhartid);
80001610:	f14027f3          	csrr	a5,mhartid
80001614:	fef42623          	sw	a5,-20(s0)
80001618:	fec42783          	lw	a5,-20(s0)
8000161c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:231

    /*You need to make sure that the global interrupt is enabled*/
    set_csr(mie, MIP_MSIP);       /*Enable software interrupt bit */
80001620:	304467f3          	csrrsi	a5,mie,8
80001624:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:232
    PRCI->MSIP[hart_id] = 0x01;   /*raise soft interrupt for hart0*/
80001628:	44000737          	lui	a4,0x44000
8000162c:	fe842783          	lw	a5,-24(s0)
80001630:	00279793          	slli	a5,a5,0x2
80001634:	00f707b3          	add	a5,a4,a5
80001638:	00100713          	li	a4,1
8000163c:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:233
}
80001640:	00000013          	nop
80001644:	01c12403          	lw	s0,28(sp)
80001648:	02010113          	addi	sp,sp,32
8000164c:	00008067          	ret

80001650 <vPortEnterCritical>:
vPortEnterCritical():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:132
 * Used to catch tasks that attempt to return from their implementing function.
 */
static void prvTaskExitError( void );

void vPortEnterCritical( void )
{
80001650:	ff010113          	addi	sp,sp,-16
80001654:	00812623          	sw	s0,12(sp)
80001658:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:133
	portDISABLE_INTERRUPTS();
8000165c:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:134
	uxCriticalNesting++;
80001660:	800087b7          	lui	a5,0x80008
80001664:	8647a783          	lw	a5,-1948(a5) # 80007864 <__stack_top+0xfffc5814>
80001668:	00178713          	addi	a4,a5,1
8000166c:	800087b7          	lui	a5,0x80008
80001670:	86e7a223          	sw	a4,-1948(a5) # 80007864 <__stack_top+0xfffc5814>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:135
}
80001674:	00000013          	nop
80001678:	00c12403          	lw	s0,12(sp)
8000167c:	01010113          	addi	sp,sp,16
80001680:	00008067          	ret

80001684 <vPortExitCritical>:
vPortExitCritical():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:139
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
80001684:	ff010113          	addi	sp,sp,-16
80001688:	00812623          	sw	s0,12(sp)
8000168c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:140
	uxCriticalNesting--;
80001690:	800087b7          	lui	a5,0x80008
80001694:	8647a783          	lw	a5,-1948(a5) # 80007864 <__stack_top+0xfffc5814>
80001698:	fff78713          	addi	a4,a5,-1
8000169c:	800087b7          	lui	a5,0x80008
800016a0:	86e7a223          	sw	a4,-1948(a5) # 80007864 <__stack_top+0xfffc5814>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:141
	if( uxCriticalNesting == 0 )
800016a4:	800087b7          	lui	a5,0x80008
800016a8:	8647a783          	lw	a5,-1948(a5) # 80007864 <__stack_top+0xfffc5814>
800016ac:	00079463          	bnez	a5,800016b4 <vPortExitCritical+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:143
	{
		portENABLE_INTERRUPTS();
800016b0:	30046073          	csrsi	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:145
	}
}
800016b4:	00000013          	nop
800016b8:	00c12403          	lw	s0,12(sp)
800016bc:	01010113          	addi	sp,sp,16
800016c0:	00008067          	ret

800016c4 <prvSetNextTimerInterrupt>:
prvSetNextTimerInterrupt():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:151
/*-----------------------------------------------------------*/

/* Sets the next timer interrupt
 * Reads previous timer compare register, and adds tickrate */
static void prvSetNextTimerInterrupt(void)
{
800016c4:	fe010113          	addi	sp,sp,-32
800016c8:	00812e23          	sw	s0,28(sp)
800016cc:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:154
	uint64_t time;

	time = mtime->val_low;
800016d0:	80008637          	lui	a2,0x80008
800016d4:	86862603          	lw	a2,-1944(a2) # 80007868 <__stack_top+0xfffc5818>
800016d8:	00062603          	lw	a2,0(a2)
800016dc:	fec42423          	sw	a2,-24(s0)
800016e0:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:155
	time |= ((uint64_t)mtime->val_high << 32);
800016e4:	80008637          	lui	a2,0x80008
800016e8:	86862603          	lw	a2,-1944(a2) # 80007868 <__stack_top+0xfffc5818>
800016ec:	00462603          	lw	a2,4(a2)
800016f0:	00060693          	mv	a3,a2
800016f4:	00000713          	li	a4,0
800016f8:	00069813          	slli	a6,a3,0x0
800016fc:	00000793          	li	a5,0
80001700:	fe842703          	lw	a4,-24(s0)
80001704:	00f76733          	or	a4,a4,a5
80001708:	fee42423          	sw	a4,-24(s0)
8000170c:	fec42703          	lw	a4,-20(s0)
80001710:	010767b3          	or	a5,a4,a6
80001714:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:157

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
80001718:	fe842683          	lw	a3,-24(s0)
8000171c:	fec42703          	lw	a4,-20(s0)
80001720:	000f45b7          	lui	a1,0xf4
80001724:	24058593          	addi	a1,a1,576 # f4240 <RAM_SIZE+0x74240>
80001728:	00000613          	li	a2,0
8000172c:	00b687b3          	add	a5,a3,a1
80001730:	00078513          	mv	a0,a5
80001734:	00d53533          	sltu	a0,a0,a3
80001738:	00c70833          	add	a6,a4,a2
8000173c:	01050733          	add	a4,a0,a6
80001740:	00070813          	mv	a6,a4
80001744:	fef42423          	sw	a5,-24(s0)
80001748:	ff042623          	sw	a6,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:159

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
8000174c:	800087b7          	lui	a5,0x80008
80001750:	86c7a783          	lw	a5,-1940(a5) # 8000786c <__stack_top+0xfffc581c>
80001754:	fe842703          	lw	a4,-24(s0)
80001758:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:160
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
8000175c:	fec42783          	lw	a5,-20(s0)
80001760:	0007d313          	srli	t1,a5,0x0
80001764:	00000393          	li	t2,0
80001768:	800087b7          	lui	a5,0x80008
8000176c:	86c7a783          	lw	a5,-1940(a5) # 8000786c <__stack_top+0xfffc581c>
80001770:	00030713          	mv	a4,t1
80001774:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:163

	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
80001778:	08000793          	li	a5,128
8000177c:	3047a073          	csrs	mie,a5
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:164
}
80001780:	00000013          	nop
80001784:	01c12403          	lw	s0,28(sp)
80001788:	02010113          	addi	sp,sp,32
8000178c:	00008067          	ret

80001790 <vPortSetupTimer>:
vPortSetupTimer():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:169
/*-----------------------------------------------------------*/

/* Sets and enable the timer interrupt */
void vPortSetupTimer(void)
{
80001790:	fe010113          	addi	sp,sp,-32
80001794:	00812e23          	sw	s0,28(sp)
80001798:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:172
	uint64_t time;

	time = mtime->val_low;
8000179c:	80008637          	lui	a2,0x80008
800017a0:	86862603          	lw	a2,-1944(a2) # 80007868 <__stack_top+0xfffc5818>
800017a4:	00062603          	lw	a2,0(a2)
800017a8:	fec42423          	sw	a2,-24(s0)
800017ac:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:173
	time |= ((uint64_t)mtime->val_high << 32);
800017b0:	80008637          	lui	a2,0x80008
800017b4:	86862603          	lw	a2,-1944(a2) # 80007868 <__stack_top+0xfffc5818>
800017b8:	00462603          	lw	a2,4(a2)
800017bc:	00060693          	mv	a3,a2
800017c0:	00000713          	li	a4,0
800017c4:	00069813          	slli	a6,a3,0x0
800017c8:	00000793          	li	a5,0
800017cc:	fe842703          	lw	a4,-24(s0)
800017d0:	00f76733          	or	a4,a4,a5
800017d4:	fee42423          	sw	a4,-24(s0)
800017d8:	fec42703          	lw	a4,-20(s0)
800017dc:	010767b3          	or	a5,a4,a6
800017e0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:175

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
800017e4:	fe842683          	lw	a3,-24(s0)
800017e8:	fec42703          	lw	a4,-20(s0)
800017ec:	000f45b7          	lui	a1,0xf4
800017f0:	24058593          	addi	a1,a1,576 # f4240 <RAM_SIZE+0x74240>
800017f4:	00000613          	li	a2,0
800017f8:	00b687b3          	add	a5,a3,a1
800017fc:	00078513          	mv	a0,a5
80001800:	00d53533          	sltu	a0,a0,a3
80001804:	00c70833          	add	a6,a4,a2
80001808:	01050733          	add	a4,a0,a6
8000180c:	00070813          	mv	a6,a4
80001810:	fef42423          	sw	a5,-24(s0)
80001814:	ff042623          	sw	a6,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:177

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
80001818:	800087b7          	lui	a5,0x80008
8000181c:	86c7a783          	lw	a5,-1940(a5) # 8000786c <__stack_top+0xfffc581c>
80001820:	fe842703          	lw	a4,-24(s0)
80001824:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:178
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
80001828:	fec42783          	lw	a5,-20(s0)
8000182c:	0007d313          	srli	t1,a5,0x0
80001830:	00000393          	li	t2,0
80001834:	800087b7          	lui	a5,0x80008
80001838:	86c7a783          	lw	a5,-1940(a5) # 8000786c <__stack_top+0xfffc581c>
8000183c:	00030713          	mv	a4,t1
80001840:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:182


	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
80001844:	08000793          	li	a5,128
80001848:	3047a073          	csrs	mie,a5
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:183
}
8000184c:	00000013          	nop
80001850:	01c12403          	lw	s0,28(sp)
80001854:	02010113          	addi	sp,sp,32
80001858:	00008067          	ret

8000185c <prvTaskExitError>:
prvTaskExitError():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:187
/*-----------------------------------------------------------*/

void prvTaskExitError( void )
{
8000185c:	ff010113          	addi	sp,sp,-16
80001860:	00812623          	sw	s0,12(sp)
80001864:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
80001868:	800087b7          	lui	a5,0x80008
8000186c:	8647a703          	lw	a4,-1948(a5) # 80007864 <__stack_top+0xfffc5814>
80001870:	fff00793          	li	a5,-1
80001874:	00f70663          	beq	a4,a5,80001880 <prvTaskExitError+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194 (discriminator 1)
80001878:	30047073          	csrci	mstatus,8
8000187c:	0000006f          	j	8000187c <prvTaskExitError+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:195
	portDISABLE_INTERRUPTS();
80001880:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:196 (discriminator 2)
	for( ;; );
80001884:	0000006f          	j	80001884 <prvTaskExitError+0x28>

80001888 <pxPortInitialiseStack>:
pxPortInitialiseStack():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:220

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
80001888:	fe010113          	addi	sp,sp,-32
8000188c:	00812e23          	sw	s0,28(sp)
80001890:	02010413          	addi	s0,sp,32
80001894:	fea42623          	sw	a0,-20(s0)
80001898:	feb42423          	sw	a1,-24(s0)
8000189c:	fec42223          	sw	a2,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:224
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	register int *tp asm("x3");
	pxTopOfStack--;
800018a0:	fec42783          	lw	a5,-20(s0)
800018a4:	ffc78793          	addi	a5,a5,-4
800018a8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:225
	*pxTopOfStack = (portSTACK_TYPE)pxCode;			/* Start address */
800018ac:	fe842703          	lw	a4,-24(s0)
800018b0:	fec42783          	lw	a5,-20(s0)
800018b4:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:226
	pxTopOfStack -= 22;
800018b8:	fec42783          	lw	a5,-20(s0)
800018bc:	fa878793          	addi	a5,a5,-88
800018c0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:227
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;	/* Register a0 */
800018c4:	fe442703          	lw	a4,-28(s0)
800018c8:	fec42783          	lw	a5,-20(s0)
800018cc:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:228
	pxTopOfStack -= 6;
800018d0:	fec42783          	lw	a5,-20(s0)
800018d4:	fe878793          	addi	a5,a5,-24
800018d8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:229
	*pxTopOfStack = (portSTACK_TYPE)tp; /* Register thread pointer */
800018dc:	00018793          	mv	a5,gp
800018e0:	00078713          	mv	a4,a5
800018e4:	fec42783          	lw	a5,-20(s0)
800018e8:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:230
	pxTopOfStack -= 3;
800018ec:	fec42783          	lw	a5,-20(s0)
800018f0:	ff478793          	addi	a5,a5,-12
800018f4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:231
	*pxTopOfStack = (portSTACK_TYPE)prvTaskExitError; /* Register ra */
800018f8:	800027b7          	lui	a5,0x80002
800018fc:	85c78713          	addi	a4,a5,-1956 # 8000185c <__stack_top+0xfffbf80c>
80001900:	fec42783          	lw	a5,-20(s0)
80001904:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:233

	return pxTopOfStack;
80001908:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:234
}
8000190c:	00078513          	mv	a0,a5
80001910:	01c12403          	lw	s0,28(sp)
80001914:	02010113          	addi	sp,sp,32
80001918:	00008067          	ret

8000191c <SysTick_Handler>:
SysTick_Handler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:238
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void )
{
8000191c:	ff010113          	addi	sp,sp,-16
80001920:	00112623          	sw	ra,12(sp)
80001924:	00812423          	sw	s0,8(sp)
80001928:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:241
	/*Save Context*/
	{
		__asm volatile("lw	t0, pxCurrentTCB");
8000192c:	92c1a283          	lw	t0,-1748(gp) # 8000798c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:242
		__asm volatile("sw	a2, 0x0(t0)");
80001930:	00c2a023          	sw	a2,0(t0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:246
	}

	/* Increment the RTOS tick. */
	prvSetNextTimerInterrupt();
80001934:	d91ff0ef          	jal	ra,800016c4 <prvSetNextTimerInterrupt>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:249

	/*Switch task */
	if( xTaskIncrementTick() != pdFALSE )
80001938:	3ad000ef          	jal	ra,800024e4 <xTaskIncrementTick>
8000193c:	00050793          	mv	a5,a0
80001940:	00078463          	beqz	a5,80001948 <SysTick_Handler+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:251
	{
		vTaskSwitchContext();
80001944:	58d000ef          	jal	ra,800026d0 <vTaskSwitchContext>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:256
	}

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
80001948:	92c1a103          	lw	sp,-1748(gp) # 8000798c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:257
		__asm volatile("lw	sp, 0x0(sp)");
8000194c:	00012103          	lw	sp,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:259

		__asm volatile("lw	t0, 31 * 4(sp)");
80001950:	07c12283          	lw	t0,124(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:260
		__asm volatile("csrw	mepc, t0");
80001954:	34129073          	csrw	mepc,t0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:263

		// Added by Iaçanã
		__asm volatile("lui	t0, 0x2");
80001958:	000022b7          	lui	t0,0x2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:264
  		__asm volatile("addi t0,t0,-2048");
8000195c:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:265
		__asm volatile("csrs mstatus,t0");
80001960:	3002a073          	csrs	mstatus,t0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:267

		__asm volatile("lw	t0, 32 * 4(sp)");
80001964:	08012283          	lw	t0,128(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:268
		__asm volatile("slli t0, t0, 0x4");
80001968:	00429293          	slli	t0,t0,0x4
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:269
		__asm volatile("csrs mstatus, t0");
8000196c:	3002a073          	csrs	mstatus,t0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:271

		__asm volatile("lw	x1, 0x0(sp)");
80001970:	00012083          	lw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:272
		__asm volatile("lw   x4, 3 * 4(sp)");
80001974:	00c12203          	lw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:273
		__asm volatile("lw   x5, 4 * 4(sp)");
80001978:	01012283          	lw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:274
		__asm volatile("lw   x6, 5 * 4(sp)");
8000197c:	01412303          	lw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:275
		__asm volatile("lw   x7, 6 * 4(sp)");
80001980:	01812383          	lw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:276
		__asm volatile("lw   x8, 7 * 4(sp)");
80001984:	01c12403          	lw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:277
		__asm volatile("lw   x9, 8 * 4(sp)");
80001988:	02012483          	lw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:278
		__asm volatile("lw   x10, 9 * 4(sp)");
8000198c:	02412503          	lw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:279
		__asm volatile("lw   x11, 10 * 4(sp)");
80001990:	02812583          	lw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:280
		__asm volatile("lw   x12, 11 * 4(sp)");
80001994:	02c12603          	lw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:281
		__asm volatile("lw   x13, 12 * 4(sp)");
80001998:	03012683          	lw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:282
		__asm volatile("lw   x14, 13 * 4(sp)");
8000199c:	03412703          	lw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:283
		__asm volatile("lw   x15, 14 * 4(sp)");
800019a0:	03812783          	lw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:284
		__asm volatile("lw   x16, 15 * 4(sp)");
800019a4:	03c12803          	lw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:285
		__asm volatile("lw   x17, 16 * 4(sp)");
800019a8:	04012883          	lw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:286
		__asm volatile("lw   x18, 17 * 4(sp)");
800019ac:	04412903          	lw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:287
		__asm volatile("lw   x19, 18 * 4(sp)");
800019b0:	04812983          	lw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:288
		__asm volatile("lw   x20, 19 * 4(sp)");
800019b4:	04c12a03          	lw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:289
		__asm volatile("lw   x21, 20 * 4(sp)");
800019b8:	05012a83          	lw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:290
		__asm volatile("lw   x22, 21 * 4(sp)");
800019bc:	05412b03          	lw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:291
		__asm volatile("lw   x23, 22 * 4(sp)");
800019c0:	05812b83          	lw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:292
		__asm volatile("lw   x24, 23 * 4(sp)");
800019c4:	05c12c03          	lw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:293
		__asm volatile("lw   x25, 24 * 4(sp)");
800019c8:	06012c83          	lw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:294
		__asm volatile("lw   x26, 25 * 4(sp)");
800019cc:	06412d03          	lw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:295
		__asm volatile("lw   x27, 26 * 4(sp)");
800019d0:	06812d83          	lw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:296
		__asm volatile("lw   x28, 27 * 4(sp)");
800019d4:	06c12e03          	lw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:297
		__asm volatile("lw   x29, 28 * 4(sp)");
800019d8:	07012e83          	lw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:298
		__asm volatile("lw   x30, 29 * 4(sp)");
800019dc:	07412f03          	lw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:299
		__asm volatile("lw   x31, 30 * 4(sp)");
800019e0:	07812f83          	lw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:301

		__asm volatile("addi	sp, sp, 4 * 33");
800019e4:	08410113          	addi	sp,sp,132
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:303

		__asm volatile("mret");
800019e8:	30200073          	mret
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:305
	}
}
800019ec:	00000013          	nop
800019f0:	00c12083          	lw	ra,12(sp)
800019f4:	00812403          	lw	s0,8(sp)
800019f8:	01010113          	addi	sp,sp,16
800019fc:	00008067          	ret

80001a00 <xPortStartScheduler>:
xPortStartScheduler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:308
uint32_t g_startscheduler = 0;
BaseType_t xPortStartScheduler( void )
{
80001a00:	ff010113          	addi	sp,sp,-16
80001a04:	00112623          	sw	ra,12(sp)
80001a08:	00812423          	sw	s0,8(sp)
80001a0c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:309
	vPortSetupTimer();
80001a10:	d81ff0ef          	jal	ra,80001790 <vPortSetupTimer>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:310
	uxCriticalNesting = 0;
80001a14:	800087b7          	lui	a5,0x80008
80001a18:	8607a223          	sw	zero,-1948(a5) # 80007864 <__stack_top+0xfffc5814>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:311
	g_startscheduler = 1;
80001a1c:	00100713          	li	a4,1
80001a20:	92e1a423          	sw	a4,-1752(gp) # 80007988 <g_startscheduler>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:312
	__enable_irq();
80001a24:	97dfe0ef          	jal	ra,800003a0 <__enable_irq>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:314

	raise_soft_interrupt();
80001a28:	bddff0ef          	jal	ra,80001604 <raise_soft_interrupt>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:317

	/*Should not get here*/
	return pdFALSE;
80001a2c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:318
}
80001a30:	00078513          	mv	a0,a5
80001a34:	00c12083          	lw	ra,12(sp)
80001a38:	00812403          	lw	s0,8(sp)
80001a3c:	01010113          	addi	sp,sp,16
80001a40:	00008067          	ret

80001a44 <Software_IRQHandler>:
Software_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:321

void Software_IRQHandler(void)
{
80001a44:	ff010113          	addi	sp,sp,-16
80001a48:	00112623          	sw	ra,12(sp)
80001a4c:	00812423          	sw	s0,8(sp)
80001a50:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:322
	if(1 == g_startscheduler)
80001a54:	9281a703          	lw	a4,-1752(gp) # 80007988 <g_startscheduler>
80001a58:	00100793          	li	a5,1
80001a5c:	00f71863          	bne	a4,a5,80001a6c <Software_IRQHandler+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:324
	{
		g_startscheduler = 2; //skip the save n switch context first time when scheduler is starting.
80001a60:	00200713          	li	a4,2
80001a64:	92e1a423          	sw	a4,-1752(gp) # 80007988 <g_startscheduler>
80001a68:	0100006f          	j	80001a78 <Software_IRQHandler+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:330
	}
	else
	{
		/*Save Context*/
		{
			__asm volatile("lw	t0, pxCurrentTCB");
80001a6c:	92c1a283          	lw	t0,-1748(gp) # 8000798c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:331
			__asm volatile("sw	a2, 0x0(t0)");
80001a70:	00c2a023          	sw	a2,0(t0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:334
		}

		vTaskSwitchContext();
80001a74:	45d000ef          	jal	ra,800026d0 <vTaskSwitchContext>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:338
	}

	// Moved by Imperas (was previously causing corruption of a5)
	PRCI->MSIP[0] = 0x00;
80001a78:	440007b7          	lui	a5,0x44000
80001a7c:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:342

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
80001a80:	92c1a103          	lw	sp,-1748(gp) # 8000798c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:343
		__asm volatile("lw	sp, 0x0(sp)");
80001a84:	00012103          	lw	sp,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:345

		__asm volatile("lw	t0, 31 * 4(sp)");
80001a88:	07c12283          	lw	t0,124(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:346
		__asm volatile("csrw	mepc, t0");
80001a8c:	34129073          	csrw	mepc,t0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:349

		// Added by Iaçanã
		__asm volatile("lui	t0, 0x2");
80001a90:	000022b7          	lui	t0,0x2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:350
  		__asm volatile("addi t0,t0,-2048");
80001a94:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:351
		__asm volatile("csrs mstatus,t0");
80001a98:	3002a073          	csrs	mstatus,t0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:353

		__asm volatile("lw	t0, 32 * 4(sp)");
80001a9c:	08012283          	lw	t0,128(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:354
		__asm volatile("slli t0, t0, 0x4");
80001aa0:	00429293          	slli	t0,t0,0x4
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:355
		__asm volatile("csrs mstatus, t0");
80001aa4:	3002a073          	csrs	mstatus,t0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:357

		__asm volatile("lw	x1, 0x0(sp)");
80001aa8:	00012083          	lw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:358
		__asm volatile("lw   x4, 3 * 4(sp)");
80001aac:	00c12203          	lw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:359
		__asm volatile("lw   x5, 4 * 4(sp)");
80001ab0:	01012283          	lw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:360
		__asm volatile("lw   x6, 5 * 4(sp)");
80001ab4:	01412303          	lw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:361
		__asm volatile("lw   x7, 6 * 4(sp)");
80001ab8:	01812383          	lw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:362
		__asm volatile("lw   x8, 7 * 4(sp)");
80001abc:	01c12403          	lw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:363
		__asm volatile("lw   x9, 8 * 4(sp)");
80001ac0:	02012483          	lw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:364
		__asm volatile("lw   x10, 9 * 4(sp)");
80001ac4:	02412503          	lw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:365
		__asm volatile("lw   x11, 10 * 4(sp)");
80001ac8:	02812583          	lw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:366
		__asm volatile("lw   x12, 11 * 4(sp)");
80001acc:	02c12603          	lw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:367
		__asm volatile("lw   x13, 12 * 4(sp)");
80001ad0:	03012683          	lw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:368
		__asm volatile("lw   x14, 13 * 4(sp)");
80001ad4:	03412703          	lw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:369
		__asm volatile("lw   x15, 14 * 4(sp)");
80001ad8:	03812783          	lw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:370
		__asm volatile("lw   x16, 15 * 4(sp)");
80001adc:	03c12803          	lw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:371
		__asm volatile("lw   x17, 16 * 4(sp)");
80001ae0:	04012883          	lw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:372
		__asm volatile("lw   x18, 17 * 4(sp)");
80001ae4:	04412903          	lw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:373
		__asm volatile("lw   x19, 18 * 4(sp)");
80001ae8:	04812983          	lw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:374
		__asm volatile("lw   x20, 19 * 4(sp)");
80001aec:	04c12a03          	lw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:375
		__asm volatile("lw   x21, 20 * 4(sp)");
80001af0:	05012a83          	lw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:376
		__asm volatile("lw   x22, 21 * 4(sp)");
80001af4:	05412b03          	lw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:377
		__asm volatile("lw   x23, 22 * 4(sp)");
80001af8:	05812b83          	lw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:378
		__asm volatile("lw   x24, 23 * 4(sp)");
80001afc:	05c12c03          	lw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:379
		__asm volatile("lw   x25, 24 * 4(sp)");
80001b00:	06012c83          	lw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:380
		__asm volatile("lw   x26, 25 * 4(sp)");
80001b04:	06412d03          	lw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:381
		__asm volatile("lw   x27, 26 * 4(sp)");
80001b08:	06812d83          	lw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:382
		__asm volatile("lw   x28, 27 * 4(sp)");
80001b0c:	06c12e03          	lw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:383
		__asm volatile("lw   x29, 28 * 4(sp)");
80001b10:	07012e83          	lw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:384
		__asm volatile("lw   x30, 29 * 4(sp)");
80001b14:	07412f03          	lw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:385
		__asm volatile("lw   x31, 30 * 4(sp)");
80001b18:	07812f83          	lw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:387

		__asm volatile("addi	sp, sp, 4 * 33");
80001b1c:	08410113          	addi	sp,sp,132
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:392

	    // Moved by Imperas (causing corruption of a5 at this position)
		//PRCI->MSIP[0] = 0x00;

		__asm volatile("mret");
80001b20:	30200073          	mret
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:394
	}
}
80001b24:	00000013          	nop
80001b28:	00c12083          	lw	ra,12(sp)
80001b2c:	00812403          	lw	s0,8(sp)
80001b30:	01010113          	addi	sp,sp,16
80001b34:	00008067          	ret

80001b38 <vPortYield>:
vPortYield():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:397

void vPortYield( void )
{
80001b38:	ff010113          	addi	sp,sp,-16
80001b3c:	00112623          	sw	ra,12(sp)
80001b40:	00812423          	sw	s0,8(sp)
80001b44:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:398
	raise_soft_interrupt();
80001b48:	abdff0ef          	jal	ra,80001604 <raise_soft_interrupt>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:399
}
80001b4c:	00000013          	nop
80001b50:	00c12083          	lw	ra,12(sp)
80001b54:	00812403          	lw	s0,8(sp)
80001b58:	01010113          	addi	sp,sp,16
80001b5c:	00008067          	ret

80001b60 <vListInitialise>:
vListInitialise():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:80
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
80001b60:	fe010113          	addi	sp,sp,-32
80001b64:	00812e23          	sw	s0,28(sp)
80001b68:	02010413          	addi	s0,sp,32
80001b6c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:84
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001b70:	fec42783          	lw	a5,-20(s0)
80001b74:	00878713          	addi	a4,a5,8
80001b78:	fec42783          	lw	a5,-20(s0)
80001b7c:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:88

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
80001b80:	fec42783          	lw	a5,-20(s0)
80001b84:	fff00713          	li	a4,-1
80001b88:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:92

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001b8c:	fec42783          	lw	a5,-20(s0)
80001b90:	00878713          	addi	a4,a5,8
80001b94:	fec42783          	lw	a5,-20(s0)
80001b98:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:93
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001b9c:	fec42783          	lw	a5,-20(s0)
80001ba0:	00878713          	addi	a4,a5,8
80001ba4:	fec42783          	lw	a5,-20(s0)
80001ba8:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:95

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
80001bac:	fec42783          	lw	a5,-20(s0)
80001bb0:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:101

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
80001bb4:	00000013          	nop
80001bb8:	01c12403          	lw	s0,28(sp)
80001bbc:	02010113          	addi	sp,sp,32
80001bc0:	00008067          	ret

80001bc4 <vListInitialiseItem>:
vListInitialiseItem():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:105
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
80001bc4:	fe010113          	addi	sp,sp,-32
80001bc8:	00812e23          	sw	s0,28(sp)
80001bcc:	02010413          	addi	s0,sp,32
80001bd0:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:107
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80001bd4:	fec42783          	lw	a5,-20(s0)
80001bd8:	0007a823          	sw	zero,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:113

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
80001bdc:	00000013          	nop
80001be0:	01c12403          	lw	s0,28(sp)
80001be4:	02010113          	addi	sp,sp,32
80001be8:	00008067          	ret

80001bec <vListInsertEnd>:
vListInsertEnd():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:117
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001bec:	fd010113          	addi	sp,sp,-48
80001bf0:	02812623          	sw	s0,44(sp)
80001bf4:	03010413          	addi	s0,sp,48
80001bf8:	fca42e23          	sw	a0,-36(s0)
80001bfc:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:118
ListItem_t * const pxIndex = pxList->pxIndex;
80001c00:	fdc42783          	lw	a5,-36(s0)
80001c04:	0047a783          	lw	a5,4(a5)
80001c08:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:129
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
80001c0c:	fd842783          	lw	a5,-40(s0)
80001c10:	fec42703          	lw	a4,-20(s0)
80001c14:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:130
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
80001c18:	fec42783          	lw	a5,-20(s0)
80001c1c:	0087a703          	lw	a4,8(a5)
80001c20:	fd842783          	lw	a5,-40(s0)
80001c24:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:135

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
80001c28:	fec42783          	lw	a5,-20(s0)
80001c2c:	0087a783          	lw	a5,8(a5)
80001c30:	fd842703          	lw	a4,-40(s0)
80001c34:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:136
	pxIndex->pxPrevious = pxNewListItem;
80001c38:	fec42783          	lw	a5,-20(s0)
80001c3c:	fd842703          	lw	a4,-40(s0)
80001c40:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:139

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001c44:	fd842783          	lw	a5,-40(s0)
80001c48:	fdc42703          	lw	a4,-36(s0)
80001c4c:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:141

	( pxList->uxNumberOfItems )++;
80001c50:	fdc42783          	lw	a5,-36(s0)
80001c54:	0007a783          	lw	a5,0(a5)
80001c58:	00178713          	addi	a4,a5,1
80001c5c:	fdc42783          	lw	a5,-36(s0)
80001c60:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:142
}
80001c64:	00000013          	nop
80001c68:	02c12403          	lw	s0,44(sp)
80001c6c:	03010113          	addi	sp,sp,48
80001c70:	00008067          	ret

80001c74 <vListInsert>:
vListInsert():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:146
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001c74:	fd010113          	addi	sp,sp,-48
80001c78:	02812623          	sw	s0,44(sp)
80001c7c:	03010413          	addi	s0,sp,48
80001c80:	fca42e23          	sw	a0,-36(s0)
80001c84:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:148
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
80001c88:	fd842783          	lw	a5,-40(s0)
80001c8c:	0007a783          	lw	a5,0(a5)
80001c90:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:164
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
80001c94:	fe842703          	lw	a4,-24(s0)
80001c98:	fff00793          	li	a5,-1
80001c9c:	00f71a63          	bne	a4,a5,80001cb0 <vListInsert+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:166
	{
		pxIterator = pxList->xListEnd.pxPrevious;
80001ca0:	fdc42783          	lw	a5,-36(s0)
80001ca4:	0107a783          	lw	a5,16(a5)
80001ca8:	fef42623          	sw	a5,-20(s0)
80001cac:	0340006f          	j	80001ce0 <vListInsert+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:192
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001cb0:	fdc42783          	lw	a5,-36(s0)
80001cb4:	00878793          	addi	a5,a5,8
80001cb8:	fef42623          	sw	a5,-20(s0)
80001cbc:	0100006f          	j	80001ccc <vListInsert+0x58>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 3)
80001cc0:	fec42783          	lw	a5,-20(s0)
80001cc4:	0047a783          	lw	a5,4(a5)
80001cc8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 1)
80001ccc:	fec42783          	lw	a5,-20(s0)
80001cd0:	0047a783          	lw	a5,4(a5)
80001cd4:	0007a783          	lw	a5,0(a5)
80001cd8:	fe842703          	lw	a4,-24(s0)
80001cdc:	fef772e3          	bleu	a5,a4,80001cc0 <vListInsert+0x4c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:199
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
80001ce0:	fec42783          	lw	a5,-20(s0)
80001ce4:	0047a703          	lw	a4,4(a5)
80001ce8:	fd842783          	lw	a5,-40(s0)
80001cec:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:200
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
80001cf0:	fd842783          	lw	a5,-40(s0)
80001cf4:	0047a783          	lw	a5,4(a5)
80001cf8:	fd842703          	lw	a4,-40(s0)
80001cfc:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:201
	pxNewListItem->pxPrevious = pxIterator;
80001d00:	fd842783          	lw	a5,-40(s0)
80001d04:	fec42703          	lw	a4,-20(s0)
80001d08:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:202
	pxIterator->pxNext = pxNewListItem;
80001d0c:	fec42783          	lw	a5,-20(s0)
80001d10:	fd842703          	lw	a4,-40(s0)
80001d14:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:206

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001d18:	fd842783          	lw	a5,-40(s0)
80001d1c:	fdc42703          	lw	a4,-36(s0)
80001d20:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:208

	( pxList->uxNumberOfItems )++;
80001d24:	fdc42783          	lw	a5,-36(s0)
80001d28:	0007a783          	lw	a5,0(a5)
80001d2c:	00178713          	addi	a4,a5,1
80001d30:	fdc42783          	lw	a5,-36(s0)
80001d34:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:209
}
80001d38:	00000013          	nop
80001d3c:	02c12403          	lw	s0,44(sp)
80001d40:	03010113          	addi	sp,sp,48
80001d44:	00008067          	ret

80001d48 <uxListRemove>:
uxListRemove():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:213
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
80001d48:	fd010113          	addi	sp,sp,-48
80001d4c:	02812623          	sw	s0,44(sp)
80001d50:	03010413          	addi	s0,sp,48
80001d54:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:216
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
80001d58:	fdc42783          	lw	a5,-36(s0)
80001d5c:	0107a783          	lw	a5,16(a5)
80001d60:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:218

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
80001d64:	fdc42783          	lw	a5,-36(s0)
80001d68:	0047a783          	lw	a5,4(a5)
80001d6c:	fdc42703          	lw	a4,-36(s0)
80001d70:	00872703          	lw	a4,8(a4) # 44000008 <RAM_SIZE+0x43f80008>
80001d74:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:219
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
80001d78:	fdc42783          	lw	a5,-36(s0)
80001d7c:	0087a783          	lw	a5,8(a5)
80001d80:	fdc42703          	lw	a4,-36(s0)
80001d84:	00472703          	lw	a4,4(a4)
80001d88:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:225

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
80001d8c:	fec42783          	lw	a5,-20(s0)
80001d90:	0047a783          	lw	a5,4(a5)
80001d94:	fdc42703          	lw	a4,-36(s0)
80001d98:	00f71a63          	bne	a4,a5,80001dac <uxListRemove+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:227
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
80001d9c:	fdc42783          	lw	a5,-36(s0)
80001da0:	0087a703          	lw	a4,8(a5)
80001da4:	fec42783          	lw	a5,-20(s0)
80001da8:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:234
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
80001dac:	fdc42783          	lw	a5,-36(s0)
80001db0:	0007a823          	sw	zero,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:235
	( pxList->uxNumberOfItems )--;
80001db4:	fec42783          	lw	a5,-20(s0)
80001db8:	0007a783          	lw	a5,0(a5)
80001dbc:	fff78713          	addi	a4,a5,-1
80001dc0:	fec42783          	lw	a5,-20(s0)
80001dc4:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:237

	return pxList->uxNumberOfItems;
80001dc8:	fec42783          	lw	a5,-20(s0)
80001dcc:	0007a783          	lw	a5,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:238
}
80001dd0:	00078513          	mv	a0,a5
80001dd4:	02c12403          	lw	s0,44(sp)
80001dd8:	03010113          	addi	sp,sp,48
80001ddc:	00008067          	ret

80001de0 <memset>:
memset():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:25

  return dest;
}

void* memset(void* dest, int byte, size_t len)
{
80001de0:	fd010113          	addi	sp,sp,-48
80001de4:	02812623          	sw	s0,44(sp)
80001de8:	03010413          	addi	s0,sp,48
80001dec:	fca42e23          	sw	a0,-36(s0)
80001df0:	fcb42c23          	sw	a1,-40(s0)
80001df4:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:26
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
80001df8:	fdc42703          	lw	a4,-36(s0)
80001dfc:	fd442783          	lw	a5,-44(s0)
80001e00:	00f767b3          	or	a5,a4,a5
80001e04:	0037f793          	andi	a5,a5,3
80001e08:	06079863          	bnez	a5,80001e78 <memset+0x98>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:27
    uintptr_t word = byte & 0xFF;
80001e0c:	fd842783          	lw	a5,-40(s0)
80001e10:	0ff7f793          	andi	a5,a5,255
80001e14:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:28
    word |= word << 8;
80001e18:	fe442783          	lw	a5,-28(s0)
80001e1c:	00879793          	slli	a5,a5,0x8
80001e20:	fe442703          	lw	a4,-28(s0)
80001e24:	00f767b3          	or	a5,a4,a5
80001e28:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:29
    word |= word << 16;
80001e2c:	fe442783          	lw	a5,-28(s0)
80001e30:	01079793          	slli	a5,a5,0x10
80001e34:	fe442703          	lw	a4,-28(s0)
80001e38:	00f767b3          	or	a5,a4,a5
80001e3c:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:32
    word |= word << 16 << 16;

    uintptr_t *d = dest;
80001e40:	fdc42783          	lw	a5,-36(s0)
80001e44:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001e48:	0180006f          	j	80001e60 <memset+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:34
      *d++ = word;
80001e4c:	fec42783          	lw	a5,-20(s0)
80001e50:	00478713          	addi	a4,a5,4
80001e54:	fee42623          	sw	a4,-20(s0)
80001e58:	fe442703          	lw	a4,-28(s0)
80001e5c:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001e60:	fdc42703          	lw	a4,-36(s0)
80001e64:	fd442783          	lw	a5,-44(s0)
80001e68:	00f707b3          	add	a5,a4,a5
80001e6c:	fec42703          	lw	a4,-20(s0)
80001e70:	fcf76ee3          	bltu	a4,a5,80001e4c <memset+0x6c>
80001e74:	0400006f          	j	80001eb4 <memset+0xd4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:36
  } else {
    char *d = dest;
80001e78:	fdc42783          	lw	a5,-36(s0)
80001e7c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001e80:	0200006f          	j	80001ea0 <memset+0xc0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:38
      *d++ = byte;
80001e84:	fe842783          	lw	a5,-24(s0)
80001e88:	00178713          	addi	a4,a5,1
80001e8c:	fee42423          	sw	a4,-24(s0)
80001e90:	fd842703          	lw	a4,-40(s0)
80001e94:	01871713          	slli	a4,a4,0x18
80001e98:	41875713          	srai	a4,a4,0x18
80001e9c:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001ea0:	fdc42703          	lw	a4,-36(s0)
80001ea4:	fd442783          	lw	a5,-44(s0)
80001ea8:	00f707b3          	add	a5,a4,a5
80001eac:	fe842703          	lw	a4,-24(s0)
80001eb0:	fcf76ae3          	bltu	a4,a5,80001e84 <memset+0xa4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:40
  }
  return dest;
80001eb4:	fdc42783          	lw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:41
}
80001eb8:	00078513          	mv	a0,a5
80001ebc:	02c12403          	lw	s0,44(sp)
80001ec0:	03010113          	addi	sp,sp,48
80001ec4:	00008067          	ret

80001ec8 <strlen>:
strlen():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:44

size_t strlen(const char *s)
{
80001ec8:	fd010113          	addi	sp,sp,-48
80001ecc:	02812623          	sw	s0,44(sp)
80001ed0:	03010413          	addi	s0,sp,48
80001ed4:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:45
  const char *p = s;
80001ed8:	fdc42783          	lw	a5,-36(s0)
80001edc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001ee0:	0100006f          	j	80001ef0 <strlen+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:47
    p++;
80001ee4:	fec42783          	lw	a5,-20(s0)
80001ee8:	00178793          	addi	a5,a5,1
80001eec:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001ef0:	fec42783          	lw	a5,-20(s0)
80001ef4:	00078783          	lb	a5,0(a5)
80001ef8:	fe0796e3          	bnez	a5,80001ee4 <strlen+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:48
  return p - s;
80001efc:	fec42703          	lw	a4,-20(s0)
80001f00:	fdc42783          	lw	a5,-36(s0)
80001f04:	40f707b3          	sub	a5,a4,a5
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:49
}
80001f08:	00078513          	mv	a0,a5
80001f0c:	02c12403          	lw	s0,44(sp)
80001f10:	03010113          	addi	sp,sp,48
80001f14:	00008067          	ret

80001f18 <xTaskGenericCreate>:
xTaskGenericCreate():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:551

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80001f18:	fc010113          	addi	sp,sp,-64
80001f1c:	02112e23          	sw	ra,60(sp)
80001f20:	02812c23          	sw	s0,56(sp)
80001f24:	04010413          	addi	s0,sp,64
80001f28:	fca42e23          	sw	a0,-36(s0)
80001f2c:	fcb42c23          	sw	a1,-40(s0)
80001f30:	fcd42823          	sw	a3,-48(s0)
80001f34:	fce42623          	sw	a4,-52(s0)
80001f38:	fcf42423          	sw	a5,-56(s0)
80001f3c:	fd042223          	sw	a6,-60(s0)
80001f40:	fd142023          	sw	a7,-64(s0)
80001f44:	00060793          	mv	a5,a2
80001f48:	fcf41b23          	sh	a5,-42(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:556
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
80001f4c:	fdc42783          	lw	a5,-36(s0)
80001f50:	00079663          	bnez	a5,80001f5c <xTaskGenericCreate+0x44>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:556 (discriminator 1)
80001f54:	30047073          	csrci	mstatus,8
80001f58:	0000006f          	j	80001f58 <xTaskGenericCreate+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:557
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
80001f5c:	fcc42703          	lw	a4,-52(s0)
80001f60:	00400793          	li	a5,4
80001f64:	00e7f663          	bleu	a4,a5,80001f70 <xTaskGenericCreate+0x58>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 1)
80001f68:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 2)
80001f6c:	0000006f          	j	80001f6c <xTaskGenericCreate+0x54>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:561

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
80001f70:	fd645783          	lhu	a5,-42(s0)
80001f74:	fc442583          	lw	a1,-60(s0)
80001f78:	00078513          	mv	a0,a5
80001f7c:	395000ef          	jal	ra,80002b10 <prvAllocateTCBAndStack>
80001f80:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:562
	if( pxNewTCB != NULL )
80001f84:	fe842783          	lw	a5,-24(s0)
80001f88:	16078263          	beqz	a5,800020ec <xTaskGenericCreate+0x1d4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:598
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
80001f8c:	fe842783          	lw	a5,-24(s0)
80001f90:	0307a703          	lw	a4,48(a5)
80001f94:	fd645683          	lhu	a3,-42(s0)
80001f98:	400007b7          	lui	a5,0x40000
80001f9c:	fff78793          	addi	a5,a5,-1 # 3fffffff <RAM_SIZE+0x3ff7ffff>
80001fa0:	00f687b3          	add	a5,a3,a5
80001fa4:	00279793          	slli	a5,a5,0x2
80001fa8:	00f707b3          	add	a5,a4,a5
80001fac:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:599
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
80001fb0:	fe442783          	lw	a5,-28(s0)
80001fb4:	ffc7f793          	andi	a5,a5,-4
80001fb8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:602

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
80001fbc:	fe442783          	lw	a5,-28(s0)
80001fc0:	0037f793          	andi	a5,a5,3
80001fc4:	00078663          	beqz	a5,80001fd0 <xTaskGenericCreate+0xb8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 1)
80001fc8:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 3)
80001fcc:	0000006f          	j	80001fcc <xTaskGenericCreate+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:619
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
80001fd0:	fd645783          	lhu	a5,-42(s0)
80001fd4:	00078713          	mv	a4,a5
80001fd8:	fc042683          	lw	a3,-64(s0)
80001fdc:	fcc42603          	lw	a2,-52(s0)
80001fe0:	fd842583          	lw	a1,-40(s0)
80001fe4:	fe842503          	lw	a0,-24(s0)
80001fe8:	009000ef          	jal	ra,800027f0 <prvInitialiseTCBVariables>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:631
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
80001fec:	fd042603          	lw	a2,-48(s0)
80001ff0:	fdc42583          	lw	a1,-36(s0)
80001ff4:	fe442503          	lw	a0,-28(s0)
80001ff8:	891ff0ef          	jal	ra,80001888 <pxPortInitialiseStack>
80001ffc:	00050713          	mv	a4,a0
80002000:	fe842783          	lw	a5,-24(s0)
80002004:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:635
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
80002008:	fc842783          	lw	a5,-56(s0)
8000200c:	00078863          	beqz	a5,8000201c <xTaskGenericCreate+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:640
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
80002010:	fc842783          	lw	a5,-56(s0)
80002014:	fe842703          	lw	a4,-24(s0)
80002018:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:649
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
8000201c:	e34ff0ef          	jal	ra,80001650 <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:651
		{
			uxCurrentNumberOfTasks++;
80002020:	93c1a783          	lw	a5,-1732(gp) # 8000799c <uxCurrentNumberOfTasks>
80002024:	00178713          	addi	a4,a5,1
80002028:	92e1ae23          	sw	a4,-1732(gp) # 8000799c <uxCurrentNumberOfTasks>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:652
			if( pxCurrentTCB == NULL )
8000202c:	92c1a783          	lw	a5,-1748(gp) # 8000798c <pxCurrentTCB>
80002030:	02079063          	bnez	a5,80002050 <xTaskGenericCreate+0x138>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:656
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
80002034:	fe842703          	lw	a4,-24(s0)
80002038:	92e1a623          	sw	a4,-1748(gp) # 8000798c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:658

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
8000203c:	93c1a703          	lw	a4,-1732(gp) # 8000799c <uxCurrentNumberOfTasks>
80002040:	00100793          	li	a5,1
80002044:	02f71663          	bne	a4,a5,80002070 <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:663
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
80002048:	0e1000ef          	jal	ra,80002928 <prvInitialiseTaskLists>
8000204c:	0240006f          	j	80002070 <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:675
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
80002050:	9481a783          	lw	a5,-1720(gp) # 800079a8 <xSchedulerRunning>
80002054:	00079e63          	bnez	a5,80002070 <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:677
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
80002058:	92c1a783          	lw	a5,-1748(gp) # 8000798c <pxCurrentTCB>
8000205c:	02c7a783          	lw	a5,44(a5)
80002060:	fcc42703          	lw	a4,-52(s0)
80002064:	00f76663          	bltu	a4,a5,80002070 <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:679
					{
						pxCurrentTCB = pxNewTCB;
80002068:	fe842703          	lw	a4,-24(s0)
8000206c:	92e1a623          	sw	a4,-1748(gp) # 8000798c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:692
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
80002070:	9581a783          	lw	a5,-1704(gp) # 800079b8 <uxTaskNumber>
80002074:	00178713          	addi	a4,a5,1
80002078:	94e1ac23          	sw	a4,-1704(gp) # 800079b8 <uxTaskNumber>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:697

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
8000207c:	9581a703          	lw	a4,-1704(gp) # 800079b8 <uxTaskNumber>
80002080:	fe842783          	lw	a5,-24(s0)
80002084:	04e7a423          	sw	a4,72(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:702
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
80002088:	fe842783          	lw	a5,-24(s0)
8000208c:	02c7a703          	lw	a4,44(a5)
80002090:	9441a783          	lw	a5,-1724(gp) # 800079a4 <uxTopReadyPriority>
80002094:	00e7f863          	bleu	a4,a5,800020a4 <xTaskGenericCreate+0x18c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 1)
80002098:	fe842783          	lw	a5,-24(s0)
8000209c:	02c7a703          	lw	a4,44(a5)
800020a0:	94e1a223          	sw	a4,-1724(gp) # 800079a4 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 3)
800020a4:	fe842783          	lw	a5,-24(s0)
800020a8:	02c7a703          	lw	a4,44(a5)
800020ac:	00070793          	mv	a5,a4
800020b0:	00279793          	slli	a5,a5,0x2
800020b4:	00e787b3          	add	a5,a5,a4
800020b8:	00279793          	slli	a5,a5,0x2
800020bc:	80021737          	lui	a4,0x80021
800020c0:	9d070713          	addi	a4,a4,-1584 # 800209d0 <__stack_top+0xfffde980>
800020c4:	00e78733          	add	a4,a5,a4
800020c8:	fe842783          	lw	a5,-24(s0)
800020cc:	00478793          	addi	a5,a5,4
800020d0:	00078593          	mv	a1,a5
800020d4:	00070513          	mv	a0,a4
800020d8:	b15ff0ef          	jal	ra,80001bec <vListInsertEnd>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:704 (discriminator 3)

			xReturn = pdPASS;
800020dc:	00100793          	li	a5,1
800020e0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:707 (discriminator 3)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
800020e4:	da0ff0ef          	jal	ra,80001684 <vPortExitCritical>
800020e8:	00c0006f          	j	800020f4 <xTaskGenericCreate+0x1dc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:711
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
800020ec:	fff00793          	li	a5,-1
800020f0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:715
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
800020f4:	fec42703          	lw	a4,-20(s0)
800020f8:	00100793          	li	a5,1
800020fc:	02f71063          	bne	a4,a5,8000211c <xTaskGenericCreate+0x204>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:717
	{
		if( xSchedulerRunning != pdFALSE )
80002100:	9481a783          	lw	a5,-1720(gp) # 800079a8 <xSchedulerRunning>
80002104:	00078c63          	beqz	a5,8000211c <xTaskGenericCreate+0x204>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:721
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
80002108:	92c1a783          	lw	a5,-1748(gp) # 8000798c <pxCurrentTCB>
8000210c:	02c7a783          	lw	a5,44(a5)
80002110:	fcc42703          	lw	a4,-52(s0)
80002114:	00e7f463          	bleu	a4,a5,8000211c <xTaskGenericCreate+0x204>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:723
			{
				taskYIELD_IF_USING_PREEMPTION();
80002118:	a21ff0ef          	jal	ra,80001b38 <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:736
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
8000211c:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:737
}
80002120:	00078513          	mv	a0,a5
80002124:	03c12083          	lw	ra,60(sp)
80002128:	03812403          	lw	s0,56(sp)
8000212c:	04010113          	addi	sp,sp,64
80002130:	00008067          	ret

80002134 <vTaskDelete>:
vTaskDelete():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:743
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
80002134:	fd010113          	addi	sp,sp,-48
80002138:	02112623          	sw	ra,44(sp)
8000213c:	02812423          	sw	s0,40(sp)
80002140:	03010413          	addi	s0,sp,48
80002144:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:746
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
80002148:	d08ff0ef          	jal	ra,80001650 <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:750
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
8000214c:	fdc42783          	lw	a5,-36(s0)
80002150:	00079663          	bnez	a5,8000215c <vTaskDelete+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 1)
80002154:	92c1a783          	lw	a5,-1748(gp) # 8000798c <pxCurrentTCB>
80002158:	0080006f          	j	80002160 <vTaskDelete+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 2)
8000215c:	fdc42783          	lw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 4)
80002160:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:756 (discriminator 4)

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80002164:	fec42783          	lw	a5,-20(s0)
80002168:	00478793          	addi	a5,a5,4
8000216c:	00078513          	mv	a0,a5
80002170:	bd9ff0ef          	jal	ra,80001d48 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:766 (discriminator 4)
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
80002174:	fec42783          	lw	a5,-20(s0)
80002178:	0287a783          	lw	a5,40(a5)
8000217c:	00078a63          	beqz	a5,80002190 <vTaskDelete+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:768
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002180:	fec42783          	lw	a5,-20(s0)
80002184:	01878793          	addi	a5,a5,24
80002188:	00078513          	mv	a0,a5
8000218c:	bbdff0ef          	jal	ra,80001d48 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:775
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
80002190:	fec42783          	lw	a5,-20(s0)
80002194:	00478793          	addi	a5,a5,4
80002198:	00078593          	mv	a1,a5
8000219c:	800217b7          	lui	a5,0x80021
800021a0:	a7078513          	addi	a0,a5,-1424 # 80020a70 <__stack_top+0xfffdea20>
800021a4:	a49ff0ef          	jal	ra,80001bec <vListInsertEnd>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:780

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
800021a8:	9381a783          	lw	a5,-1736(gp) # 80007998 <uxTasksDeleted>
800021ac:	00178713          	addi	a4,a5,1
800021b0:	92e1ac23          	sw	a4,-1736(gp) # 80007998 <uxTasksDeleted>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:784

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
800021b4:	9581a783          	lw	a5,-1704(gp) # 800079b8 <uxTaskNumber>
800021b8:	00178713          	addi	a4,a5,1
800021bc:	94e1ac23          	sw	a4,-1704(gp) # 800079b8 <uxTaskNumber>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:788

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
800021c0:	cc4ff0ef          	jal	ra,80001684 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:792

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
800021c4:	9481a783          	lw	a5,-1720(gp) # 800079a8 <xSchedulerRunning>
800021c8:	02078a63          	beqz	a5,800021fc <vTaskDelete+0xc8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:794
		{
			if( pxTCB == pxCurrentTCB )
800021cc:	92c1a783          	lw	a5,-1748(gp) # 8000798c <pxCurrentTCB>
800021d0:	fec42703          	lw	a4,-20(s0)
800021d4:	00f71e63          	bne	a4,a5,800021f0 <vTaskDelete+0xbc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:796
			{
				configASSERT( uxSchedulerSuspended == 0 );
800021d8:	9601a783          	lw	a5,-1696(gp) # 800079c0 <uxSchedulerSuspended>
800021dc:	00078663          	beqz	a5,800021e8 <vTaskDelete+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:796 (discriminator 1)
800021e0:	30047073          	csrci	mstatus,8
800021e4:	0000006f          	j	800021e4 <vTaskDelete+0xb0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:804
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
800021e8:	951ff0ef          	jal	ra,80001b38 <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:817
					prvResetNextTaskUnblockTime();
				}
				taskEXIT_CRITICAL();
			}
		}
	}
800021ec:	0100006f          	j	800021fc <vTaskDelete+0xc8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:810
				taskENTER_CRITICAL();
800021f0:	c60ff0ef          	jal	ra,80001650 <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:812
					prvResetNextTaskUnblockTime();
800021f4:	21d000ef          	jal	ra,80002c10 <prvResetNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:814
				taskEXIT_CRITICAL();
800021f8:	c8cff0ef          	jal	ra,80001684 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:817
	}
800021fc:	00000013          	nop
80002200:	02c12083          	lw	ra,44(sp)
80002204:	02812403          	lw	s0,40(sp)
80002208:	03010113          	addi	sp,sp,48
8000220c:	00008067          	ret

80002210 <vTaskDelay>:
vTaskDelay():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:921
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
80002210:	fd010113          	addi	sp,sp,-48
80002214:	02112623          	sw	ra,44(sp)
80002218:	02812423          	sw	s0,40(sp)
8000221c:	03010413          	addi	s0,sp,48
80002220:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:923
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
80002224:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:927


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
80002228:	fdc42783          	lw	a5,-36(s0)
8000222c:	04078463          	beqz	a5,80002274 <vTaskDelay+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:929
		{
			configASSERT( uxSchedulerSuspended == 0 );
80002230:	9601a783          	lw	a5,-1696(gp) # 800079c0 <uxSchedulerSuspended>
80002234:	00078663          	beqz	a5,80002240 <vTaskDelay+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:929 (discriminator 1)
80002238:	30047073          	csrci	mstatus,8
8000223c:	0000006f          	j	8000223c <vTaskDelay+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:930
			vTaskSuspendAll();
80002240:	0e4000ef          	jal	ra,80002324 <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:944
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
80002244:	9401a783          	lw	a5,-1728(gp) # 800079a0 <xTickCount>
80002248:	fdc42703          	lw	a4,-36(s0)
8000224c:	00f707b3          	add	a5,a4,a5
80002250:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:949

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80002254:	92c1a783          	lw	a5,-1748(gp) # 8000798c <pxCurrentTCB>
80002258:	00478793          	addi	a5,a5,4
8000225c:	00078513          	mv	a0,a5
80002260:	ae9ff0ef          	jal	ra,80001d48 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:960
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
80002264:	fe842503          	lw	a0,-24(s0)
80002268:	021000ef          	jal	ra,80002a88 <prvAddCurrentTaskToDelayedList>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:962
			}
			xAlreadyYielded = xTaskResumeAll();
8000226c:	0e0000ef          	jal	ra,8000234c <xTaskResumeAll>
80002270:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:971
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
80002274:	fec42783          	lw	a5,-20(s0)
80002278:	00079463          	bnez	a5,80002280 <vTaskDelay+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:973
		{
			portYIELD_WITHIN_API();
8000227c:	8bdff0ef          	jal	ra,80001b38 <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:979
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80002280:	00000013          	nop
80002284:	02c12083          	lw	ra,44(sp)
80002288:	02812403          	lw	s0,40(sp)
8000228c:	03010113          	addi	sp,sp,48
80002290:	00008067          	ret

80002294 <vTaskStartScheduler>:
vTaskStartScheduler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1542

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
80002294:	fe010113          	addi	sp,sp,-32
80002298:	00112e23          	sw	ra,28(sp)
8000229c:	00812c23          	sw	s0,24(sp)
800022a0:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1555
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
800022a4:	00000893          	li	a7,0
800022a8:	00000813          	li	a6,0
800022ac:	00000793          	li	a5,0
800022b0:	00000713          	li	a4,0
800022b4:	00000693          	li	a3,0
800022b8:	40000613          	li	a2,1024
800022bc:	800075b7          	lui	a1,0x80007
800022c0:	13858593          	addi	a1,a1,312 # 80007138 <__stack_top+0xfffc50e8>
800022c4:	80002537          	lui	a0,0x80002
800022c8:	7bc50513          	addi	a0,a0,1980 # 800027bc <__stack_top+0xfffc076c>
800022cc:	c4dff0ef          	jal	ra,80001f18 <xTaskGenericCreate>
800022d0:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1572
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
800022d4:	fec42703          	lw	a4,-20(s0)
800022d8:	00100793          	li	a5,1
800022dc:	02f71263          	bne	a4,a5,80002300 <vTaskStartScheduler+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1579
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
800022e0:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1589
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
800022e4:	fff00713          	li	a4,-1
800022e8:	94e1ae23          	sw	a4,-1700(gp) # 800079bc <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1590
		xSchedulerRunning = pdTRUE;
800022ec:	00100713          	li	a4,1
800022f0:	94e1a423          	sw	a4,-1720(gp) # 800079a8 <xSchedulerRunning>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1591
		xTickCount = ( TickType_t ) 0U;
800022f4:	9401a023          	sw	zero,-1728(gp) # 800079a0 <xTickCount>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1600
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
800022f8:	f08ff0ef          	jal	ra,80001a00 <xPortStartScheduler>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
800022fc:	0140006f          	j	80002310 <vTaskStartScheduler+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615
		configASSERT( xReturn );
80002300:	fec42783          	lw	a5,-20(s0)
80002304:	00079663          	bnez	a5,80002310 <vTaskStartScheduler+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 1)
80002308:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 2)
8000230c:	0000006f          	j	8000230c <vTaskStartScheduler+0x78>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
}
80002310:	00000013          	nop
80002314:	01c12083          	lw	ra,28(sp)
80002318:	01812403          	lw	s0,24(sp)
8000231c:	02010113          	addi	sp,sp,32
80002320:	00008067          	ret

80002324 <vTaskSuspendAll>:
vTaskSuspendAll():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1632
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
80002324:	ff010113          	addi	sp,sp,-16
80002328:	00812623          	sw	s0,12(sp)
8000232c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1637
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
80002330:	9601a783          	lw	a5,-1696(gp) # 800079c0 <uxSchedulerSuspended>
80002334:	00178713          	addi	a4,a5,1
80002338:	96e1a023          	sw	a4,-1696(gp) # 800079c0 <uxSchedulerSuspended>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1638
}
8000233c:	00000013          	nop
80002340:	00c12403          	lw	s0,12(sp)
80002344:	01010113          	addi	sp,sp,16
80002348:	00008067          	ret

8000234c <xTaskResumeAll>:
xTaskResumeAll():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1670

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
8000234c:	fe010113          	addi	sp,sp,-32
80002350:	00112e23          	sw	ra,28(sp)
80002354:	00812c23          	sw	s0,24(sp)
80002358:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1672
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
8000235c:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
80002360:	9601a783          	lw	a5,-1696(gp) # 800079c0 <uxSchedulerSuspended>
80002364:	00079663          	bnez	a5,80002370 <xTaskResumeAll+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676 (discriminator 1)
80002368:	30047073          	csrci	mstatus,8
8000236c:	0000006f          	j	8000236c <xTaskResumeAll+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1683
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
80002370:	ae0ff0ef          	jal	ra,80001650 <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1685
	{
		--uxSchedulerSuspended;
80002374:	9601a783          	lw	a5,-1696(gp) # 800079c0 <uxSchedulerSuspended>
80002378:	fff78713          	addi	a4,a5,-1
8000237c:	96e1a023          	sw	a4,-1696(gp) # 800079c0 <uxSchedulerSuspended>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1687

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80002380:	9601a783          	lw	a5,-1696(gp) # 800079c0 <uxSchedulerSuspended>
80002384:	10079663          	bnez	a5,80002490 <xTaskResumeAll+0x144>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1689
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
80002388:	93c1a783          	lw	a5,-1732(gp) # 8000799c <uxCurrentNumberOfTasks>
8000238c:	10078263          	beqz	a5,80002490 <xTaskResumeAll+0x144>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
80002390:	0a80006f          	j	80002438 <xTaskResumeAll+0xec>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1695
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
80002394:	800217b7          	lui	a5,0x80021
80002398:	a5c78793          	addi	a5,a5,-1444 # 80020a5c <__stack_top+0xfffdea0c>
8000239c:	00c7a783          	lw	a5,12(a5)
800023a0:	00c7a783          	lw	a5,12(a5)
800023a4:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1696
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
800023a8:	fe842783          	lw	a5,-24(s0)
800023ac:	01878793          	addi	a5,a5,24
800023b0:	00078513          	mv	a0,a5
800023b4:	995ff0ef          	jal	ra,80001d48 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1697
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
800023b8:	fe842783          	lw	a5,-24(s0)
800023bc:	00478793          	addi	a5,a5,4
800023c0:	00078513          	mv	a0,a5
800023c4:	985ff0ef          	jal	ra,80001d48 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698
					prvAddTaskToReadyList( pxTCB );
800023c8:	fe842783          	lw	a5,-24(s0)
800023cc:	02c7a703          	lw	a4,44(a5)
800023d0:	9441a783          	lw	a5,-1724(gp) # 800079a4 <uxTopReadyPriority>
800023d4:	00e7f863          	bleu	a4,a5,800023e4 <xTaskResumeAll+0x98>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 1)
800023d8:	fe842783          	lw	a5,-24(s0)
800023dc:	02c7a703          	lw	a4,44(a5)
800023e0:	94e1a223          	sw	a4,-1724(gp) # 800079a4 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 3)
800023e4:	fe842783          	lw	a5,-24(s0)
800023e8:	02c7a703          	lw	a4,44(a5)
800023ec:	00070793          	mv	a5,a4
800023f0:	00279793          	slli	a5,a5,0x2
800023f4:	00e787b3          	add	a5,a5,a4
800023f8:	00279793          	slli	a5,a5,0x2
800023fc:	80021737          	lui	a4,0x80021
80002400:	9d070713          	addi	a4,a4,-1584 # 800209d0 <__stack_top+0xfffde980>
80002404:	00e78733          	add	a4,a5,a4
80002408:	fe842783          	lw	a5,-24(s0)
8000240c:	00478793          	addi	a5,a5,4
80002410:	00078593          	mv	a1,a5
80002414:	00070513          	mv	a0,a4
80002418:	fd4ff0ef          	jal	ra,80001bec <vListInsertEnd>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1702 (discriminator 3)

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
8000241c:	fe842783          	lw	a5,-24(s0)
80002420:	02c7a703          	lw	a4,44(a5)
80002424:	92c1a783          	lw	a5,-1748(gp) # 8000798c <pxCurrentTCB>
80002428:	02c7a783          	lw	a5,44(a5)
8000242c:	00f76663          	bltu	a4,a5,80002438 <xTaskResumeAll+0xec>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1704
					{
						xYieldPending = pdTRUE;
80002430:	00100713          	li	a4,1
80002434:	94e1a823          	sw	a4,-1712(gp) # 800079b0 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
80002438:	800217b7          	lui	a5,0x80021
8000243c:	a5c7a783          	lw	a5,-1444(a5) # 80020a5c <__stack_top+0xfffdea0c>
80002440:	f4079ae3          	bnez	a5,80002394 <xTaskResumeAll+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1716

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
80002444:	94c1a783          	lw	a5,-1716(gp) # 800079ac <uxPendedTicks>
80002448:	02078863          	beqz	a5,80002478 <xTaskResumeAll+0x12c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
8000244c:	0240006f          	j	80002470 <xTaskResumeAll+0x124>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1720
					{
						if( xTaskIncrementTick() != pdFALSE )
80002450:	094000ef          	jal	ra,800024e4 <xTaskIncrementTick>
80002454:	00050793          	mv	a5,a0
80002458:	00078663          	beqz	a5,80002464 <xTaskResumeAll+0x118>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1722
						{
							xYieldPending = pdTRUE;
8000245c:	00100713          	li	a4,1
80002460:	94e1a823          	sw	a4,-1712(gp) # 800079b0 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1728
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
80002464:	94c1a783          	lw	a5,-1716(gp) # 800079ac <uxPendedTicks>
80002468:	fff78713          	addi	a4,a5,-1
8000246c:	94e1a623          	sw	a4,-1716(gp) # 800079ac <uxPendedTicks>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
					while( uxPendedTicks > ( UBaseType_t ) 0U )
80002470:	94c1a783          	lw	a5,-1716(gp) # 800079ac <uxPendedTicks>
80002474:	fc079ee3          	bnez	a5,80002450 <xTaskResumeAll+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1736
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
80002478:	9501a703          	lw	a4,-1712(gp) # 800079b0 <xYieldPending>
8000247c:	00100793          	li	a5,1
80002480:	00f71863          	bne	a4,a5,80002490 <xTaskResumeAll+0x144>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1740
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
80002484:	00100793          	li	a5,1
80002488:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1743
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
8000248c:	eacff0ef          	jal	ra,80001b38 <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1756
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
80002490:	9f4ff0ef          	jal	ra,80001684 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1758

	return xAlreadyYielded;
80002494:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1759
}
80002498:	00078513          	mv	a0,a5
8000249c:	01c12083          	lw	ra,28(sp)
800024a0:	01812403          	lw	s0,24(sp)
800024a4:	02010113          	addi	sp,sp,32
800024a8:	00008067          	ret

800024ac <xTaskGetTickCount>:
xTaskGetTickCount():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1763
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
800024ac:	fe010113          	addi	sp,sp,-32
800024b0:	00112e23          	sw	ra,28(sp)
800024b4:	00812c23          	sw	s0,24(sp)
800024b8:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1767
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
800024bc:	994ff0ef          	jal	ra,80001650 <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1769
	{
		xTicks = xTickCount;
800024c0:	9401a783          	lw	a5,-1728(gp) # 800079a0 <xTickCount>
800024c4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1771
	}
	portTICK_TYPE_EXIT_CRITICAL();
800024c8:	9bcff0ef          	jal	ra,80001684 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1773

	return xTicks;
800024cc:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1774
}
800024d0:	00078513          	mv	a0,a5
800024d4:	01c12083          	lw	ra,28(sp)
800024d8:	01812403          	lw	s0,24(sp)
800024dc:	02010113          	addi	sp,sp,32
800024e0:	00008067          	ret

800024e4 <xTaskIncrementTick>:
xTaskIncrementTick():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1938

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
800024e4:	fd010113          	addi	sp,sp,-48
800024e8:	02112623          	sw	ra,44(sp)
800024ec:	02812423          	sw	s0,40(sp)
800024f0:	03010413          	addi	s0,sp,48
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1941
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
800024f4:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1947

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
800024f8:	9601a783          	lw	a5,-1696(gp) # 800079c0 <uxSchedulerSuspended>
800024fc:	1a079063          	bnez	a5,8000269c <xTaskIncrementTick+0x1b8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1951
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
80002500:	9401a783          	lw	a5,-1728(gp) # 800079a0 <xTickCount>
80002504:	00178713          	addi	a4,a5,1
80002508:	94e1a023          	sw	a4,-1728(gp) # 800079a0 <xTickCount>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1956

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
8000250c:	9401a783          	lw	a5,-1728(gp) # 800079a0 <xTickCount>
80002510:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1958

			if( xConstTickCount == ( TickType_t ) 0U )
80002514:	fe842783          	lw	a5,-24(s0)
80002518:	04079063          	bnez	a5,80002558 <xTaskIncrementTick+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960
			{
				taskSWITCH_DELAYED_LISTS();
8000251c:	9301a783          	lw	a5,-1744(gp) # 80007990 <pxDelayedTaskList>
80002520:	0007a783          	lw	a5,0(a5)
80002524:	00078663          	beqz	a5,80002530 <xTaskIncrementTick+0x4c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 1)
80002528:	30047073          	csrci	mstatus,8
8000252c:	0000006f          	j	8000252c <xTaskIncrementTick+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 2)
80002530:	9301a783          	lw	a5,-1744(gp) # 80007990 <pxDelayedTaskList>
80002534:	fef42223          	sw	a5,-28(s0)
80002538:	9341a703          	lw	a4,-1740(gp) # 80007994 <pxOverflowDelayedTaskList>
8000253c:	92e1a823          	sw	a4,-1744(gp) # 80007990 <pxDelayedTaskList>
80002540:	fe442703          	lw	a4,-28(s0)
80002544:	92e1aa23          	sw	a4,-1740(gp) # 80007994 <pxOverflowDelayedTaskList>
80002548:	9541a783          	lw	a5,-1708(gp) # 800079b4 <xNumOfOverflows>
8000254c:	00178713          	addi	a4,a5,1
80002550:	94e1aa23          	sw	a4,-1708(gp) # 800079b4 <xNumOfOverflows>
80002554:	6bc000ef          	jal	ra,80002c10 <prvResetNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1971

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
80002558:	95c1a783          	lw	a5,-1700(gp) # 800079bc <xNextTaskUnblockTime>
8000255c:	fe842703          	lw	a4,-24(s0)
80002560:	10f76063          	bltu	a4,a5,80002660 <xTaskIncrementTick+0x17c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80002564:	9301a783          	lw	a5,-1744(gp) # 80007990 <pxDelayedTaskList>
80002568:	0007a783          	lw	a5,0(a5)
8000256c:	00079663          	bnez	a5,80002578 <xTaskIncrementTick+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 1)
80002570:	00100793          	li	a5,1
80002574:	0080006f          	j	8000257c <xTaskIncrementTick+0x98>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 2)
80002578:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 4)
8000257c:	00078863          	beqz	a5,8000258c <xTaskIncrementTick+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1982
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
80002580:	fff00713          	li	a4,-1
80002584:	94e1ae23          	sw	a4,-1700(gp) # 800079bc <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1983
						break;
80002588:	0d80006f          	j	80002660 <xTaskIncrementTick+0x17c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1991
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
8000258c:	9301a783          	lw	a5,-1744(gp) # 80007990 <pxDelayedTaskList>
80002590:	00c7a783          	lw	a5,12(a5)
80002594:	00c7a783          	lw	a5,12(a5)
80002598:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1992
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
8000259c:	fe042783          	lw	a5,-32(s0)
800025a0:	0047a783          	lw	a5,4(a5)
800025a4:	fcf42e23          	sw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1994

						if( xConstTickCount < xItemValue )
800025a8:	fe842703          	lw	a4,-24(s0)
800025ac:	fdc42783          	lw	a5,-36(s0)
800025b0:	00f77863          	bleu	a5,a4,800025c0 <xTaskIncrementTick+0xdc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2001
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
800025b4:	fdc42703          	lw	a4,-36(s0)
800025b8:	94e1ae23          	sw	a4,-1700(gp) # 800079bc <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2002
							break;
800025bc:	0a40006f          	j	80002660 <xTaskIncrementTick+0x17c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2010
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
800025c0:	fe042783          	lw	a5,-32(s0)
800025c4:	00478793          	addi	a5,a5,4
800025c8:	00078513          	mv	a0,a5
800025cc:	f7cff0ef          	jal	ra,80001d48 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2014

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
800025d0:	fe042783          	lw	a5,-32(s0)
800025d4:	0287a783          	lw	a5,40(a5)
800025d8:	00078a63          	beqz	a5,800025ec <xTaskIncrementTick+0x108>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2016
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
800025dc:	fe042783          	lw	a5,-32(s0)
800025e0:	01878793          	addi	a5,a5,24
800025e4:	00078513          	mv	a0,a5
800025e8:	f60ff0ef          	jal	ra,80001d48 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
800025ec:	fe042783          	lw	a5,-32(s0)
800025f0:	02c7a703          	lw	a4,44(a5)
800025f4:	9441a783          	lw	a5,-1724(gp) # 800079a4 <uxTopReadyPriority>
800025f8:	00e7f863          	bleu	a4,a5,80002608 <xTaskIncrementTick+0x124>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 1)
800025fc:	fe042783          	lw	a5,-32(s0)
80002600:	02c7a703          	lw	a4,44(a5)
80002604:	94e1a223          	sw	a4,-1724(gp) # 800079a4 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 3)
80002608:	fe042783          	lw	a5,-32(s0)
8000260c:	02c7a703          	lw	a4,44(a5)
80002610:	00070793          	mv	a5,a4
80002614:	00279793          	slli	a5,a5,0x2
80002618:	00e787b3          	add	a5,a5,a4
8000261c:	00279793          	slli	a5,a5,0x2
80002620:	80021737          	lui	a4,0x80021
80002624:	9d070713          	addi	a4,a4,-1584 # 800209d0 <__stack_top+0xfffde980>
80002628:	00e78733          	add	a4,a5,a4
8000262c:	fe042783          	lw	a5,-32(s0)
80002630:	00478793          	addi	a5,a5,4
80002634:	00078593          	mv	a1,a5
80002638:	00070513          	mv	a0,a4
8000263c:	db0ff0ef          	jal	ra,80001bec <vListInsertEnd>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2035 (discriminator 3)
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80002640:	fe042783          	lw	a5,-32(s0)
80002644:	02c7a703          	lw	a4,44(a5)
80002648:	92c1a783          	lw	a5,-1748(gp) # 8000798c <pxCurrentTCB>
8000264c:	02c7a783          	lw	a5,44(a5)
80002650:	f0f76ae3          	bltu	a4,a5,80002564 <xTaskIncrementTick+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2037
							{
								xSwitchRequired = pdTRUE;
80002654:	00100793          	li	a5,1
80002658:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
8000265c:	f09ff06f          	j	80002564 <xTaskIncrementTick+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2055
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
80002660:	92c1a783          	lw	a5,-1748(gp) # 8000798c <pxCurrentTCB>
80002664:	02c7a703          	lw	a4,44(a5)
80002668:	800216b7          	lui	a3,0x80021
8000266c:	00070793          	mv	a5,a4
80002670:	00279793          	slli	a5,a5,0x2
80002674:	00e787b3          	add	a5,a5,a4
80002678:	00279793          	slli	a5,a5,0x2
8000267c:	9d068713          	addi	a4,a3,-1584 # 800209d0 <__stack_top+0xfffde980>
80002680:	00e787b3          	add	a5,a5,a4
80002684:	0007a703          	lw	a4,0(a5)
80002688:	00100793          	li	a5,1
8000268c:	00e7fe63          	bleu	a4,a5,800026a8 <xTaskIncrementTick+0x1c4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2057
			{
				xSwitchRequired = pdTRUE;
80002690:	00100793          	li	a5,1
80002694:	fef42623          	sw	a5,-20(s0)
80002698:	0100006f          	j	800026a8 <xTaskIncrementTick+0x1c4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2083
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
8000269c:	94c1a783          	lw	a5,-1716(gp) # 800079ac <uxPendedTicks>
800026a0:	00178713          	addi	a4,a5,1
800026a4:	94e1a623          	sw	a4,-1716(gp) # 800079ac <uxPendedTicks>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2096
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
800026a8:	9501a783          	lw	a5,-1712(gp) # 800079b0 <xYieldPending>
800026ac:	00078663          	beqz	a5,800026b8 <xTaskIncrementTick+0x1d4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2098
		{
			xSwitchRequired = pdTRUE;
800026b0:	00100793          	li	a5,1
800026b4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2107
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
800026b8:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2108
}
800026bc:	00078513          	mv	a0,a5
800026c0:	02c12083          	lw	ra,44(sp)
800026c4:	02812403          	lw	s0,40(sp)
800026c8:	03010113          	addi	sp,sp,48
800026cc:	00008067          	ret

800026d0 <vTaskSwitchContext>:
vTaskSwitchContext():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2202

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
800026d0:	fe010113          	addi	sp,sp,-32
800026d4:	00812e23          	sw	s0,28(sp)
800026d8:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2203
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
800026dc:	9601a783          	lw	a5,-1696(gp) # 800079c0 <uxSchedulerSuspended>
800026e0:	00078863          	beqz	a5,800026f0 <vTaskSwitchContext+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2207
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
800026e4:	00100713          	li	a4,1
800026e8:	94e1a823          	sw	a4,-1712(gp) # 800079b0 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
800026ec:	0c00006f          	j	800027ac <vTaskSwitchContext+0xdc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2211
		xYieldPending = pdFALSE;
800026f0:	9401a823          	sw	zero,-1712(gp) # 800079b0 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246
		taskSELECT_HIGHEST_PRIORITY_TASK();
800026f4:	0200006f          	j	80002714 <vTaskSwitchContext+0x44>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 4)
800026f8:	9441a783          	lw	a5,-1724(gp) # 800079a4 <uxTopReadyPriority>
800026fc:	00079663          	bnez	a5,80002708 <vTaskSwitchContext+0x38>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 1)
80002700:	30047073          	csrci	mstatus,8
80002704:	0000006f          	j	80002704 <vTaskSwitchContext+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 2)
80002708:	9441a783          	lw	a5,-1724(gp) # 800079a4 <uxTopReadyPriority>
8000270c:	fff78713          	addi	a4,a5,-1
80002710:	94e1a223          	sw	a4,-1724(gp) # 800079a4 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 3)
80002714:	9441a703          	lw	a4,-1724(gp) # 800079a4 <uxTopReadyPriority>
80002718:	800216b7          	lui	a3,0x80021
8000271c:	00070793          	mv	a5,a4
80002720:	00279793          	slli	a5,a5,0x2
80002724:	00e787b3          	add	a5,a5,a4
80002728:	00279793          	slli	a5,a5,0x2
8000272c:	9d068713          	addi	a4,a3,-1584 # 800209d0 <__stack_top+0xfffde980>
80002730:	00e787b3          	add	a5,a5,a4
80002734:	0007a783          	lw	a5,0(a5)
80002738:	fc0780e3          	beqz	a5,800026f8 <vTaskSwitchContext+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 5)
8000273c:	9441a703          	lw	a4,-1724(gp) # 800079a4 <uxTopReadyPriority>
80002740:	00070793          	mv	a5,a4
80002744:	00279793          	slli	a5,a5,0x2
80002748:	00e787b3          	add	a5,a5,a4
8000274c:	00279793          	slli	a5,a5,0x2
80002750:	80021737          	lui	a4,0x80021
80002754:	9d070713          	addi	a4,a4,-1584 # 800209d0 <__stack_top+0xfffde980>
80002758:	00e787b3          	add	a5,a5,a4
8000275c:	fef42623          	sw	a5,-20(s0)
80002760:	fec42783          	lw	a5,-20(s0)
80002764:	0047a783          	lw	a5,4(a5)
80002768:	0047a703          	lw	a4,4(a5)
8000276c:	fec42783          	lw	a5,-20(s0)
80002770:	00e7a223          	sw	a4,4(a5)
80002774:	fec42783          	lw	a5,-20(s0)
80002778:	0047a703          	lw	a4,4(a5)
8000277c:	fec42783          	lw	a5,-20(s0)
80002780:	00878793          	addi	a5,a5,8
80002784:	00f71c63          	bne	a4,a5,8000279c <vTaskSwitchContext+0xcc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 6)
80002788:	fec42783          	lw	a5,-20(s0)
8000278c:	0047a783          	lw	a5,4(a5)
80002790:	0047a703          	lw	a4,4(a5)
80002794:	fec42783          	lw	a5,-20(s0)
80002798:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 8)
8000279c:	fec42783          	lw	a5,-20(s0)
800027a0:	0047a783          	lw	a5,4(a5)
800027a4:	00c7a703          	lw	a4,12(a5)
800027a8:	92e1a623          	sw	a4,-1748(gp) # 8000798c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
}
800027ac:	00000013          	nop
800027b0:	01c12403          	lw	s0,28(sp)
800027b4:	02010113          	addi	sp,sp,32
800027b8:	00008067          	ret

800027bc <prvIdleTask>:
prvIdleTask():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2689
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
800027bc:	fe010113          	addi	sp,sp,-32
800027c0:	00112e23          	sw	ra,28(sp)
800027c4:	00812c23          	sw	s0,24(sp)
800027c8:	02010413          	addi	s0,sp,32
800027cc:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
800027d0:	218000ef          	jal	ra,800029e8 <prvCheckTasksWaitingTermination>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2719

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
800027d4:	800217b7          	lui	a5,0x80021
800027d8:	9d07a703          	lw	a4,-1584(a5) # 800209d0 <__stack_top+0xfffde980>
800027dc:	00100793          	li	a5,1
800027e0:	00e7f463          	bleu	a4,a5,800027e8 <prvIdleTask+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2721
			{
				taskYIELD();
800027e4:	b54ff0ef          	jal	ra,80001b38 <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2739
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
800027e8:	684040ef          	jal	ra,80006e6c <vApplicationIdleHook>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
		prvCheckTasksWaitingTermination();
800027ec:	fe5ff06f          	j	800027d0 <prvIdleTask+0x14>

800027f0 <prvInitialiseTCBVariables>:
prvInitialiseTCBVariables():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2832

#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
800027f0:	fc010113          	addi	sp,sp,-64
800027f4:	02112e23          	sw	ra,60(sp)
800027f8:	02812c23          	sw	s0,56(sp)
800027fc:	04010413          	addi	s0,sp,64
80002800:	fca42e23          	sw	a0,-36(s0)
80002804:	fcb42c23          	sw	a1,-40(s0)
80002808:	fcc42a23          	sw	a2,-44(s0)
8000280c:	fcd42823          	sw	a3,-48(s0)
80002810:	00070793          	mv	a5,a4
80002814:	fcf41723          	sh	a5,-50(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
80002818:	fe042623          	sw	zero,-20(s0)
8000281c:	0440006f          	j	80002860 <prvInitialiseTCBVariables+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2838
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
80002820:	fd842703          	lw	a4,-40(s0)
80002824:	fec42783          	lw	a5,-20(s0)
80002828:	00f707b3          	add	a5,a4,a5
8000282c:	00078703          	lb	a4,0(a5)
80002830:	fdc42683          	lw	a3,-36(s0)
80002834:	fec42783          	lw	a5,-20(s0)
80002838:	00f687b3          	add	a5,a3,a5
8000283c:	02e78a23          	sb	a4,52(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2843

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
80002840:	fd842703          	lw	a4,-40(s0)
80002844:	fec42783          	lw	a5,-20(s0)
80002848:	00f707b3          	add	a5,a4,a5
8000284c:	00078783          	lb	a5,0(a5)
80002850:	02078063          	beqz	a5,80002870 <prvInitialiseTCBVariables+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 2)
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
80002854:	fec42783          	lw	a5,-20(s0)
80002858:	00178793          	addi	a5,a5,1
8000285c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 1)
80002860:	fec42703          	lw	a4,-20(s0)
80002864:	00f00793          	li	a5,15
80002868:	fae7fce3          	bleu	a4,a5,80002820 <prvInitialiseTCBVariables+0x30>
8000286c:	0080006f          	j	80002874 <prvInitialiseTCBVariables+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2845
		{
			break;
80002870:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2855
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
80002874:	fdc42783          	lw	a5,-36(s0)
80002878:	040781a3          	sb	zero,67(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2859

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
8000287c:	fd442703          	lw	a4,-44(s0)
80002880:	00400793          	li	a5,4
80002884:	00e7f663          	bleu	a4,a5,80002890 <prvInitialiseTCBVariables+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2861
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
80002888:	00400793          	li	a5,4
8000288c:	fcf42a23          	sw	a5,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2868
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
80002890:	fdc42783          	lw	a5,-36(s0)
80002894:	fd442703          	lw	a4,-44(s0)
80002898:	02e7a623          	sw	a4,44(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2871
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
8000289c:	fdc42783          	lw	a5,-36(s0)
800028a0:	fd442703          	lw	a4,-44(s0)
800028a4:	04e7a823          	sw	a4,80(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2872
		pxTCB->uxMutexesHeld = 0;
800028a8:	fdc42783          	lw	a5,-36(s0)
800028ac:	0407aa23          	sw	zero,84(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2876
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
800028b0:	fdc42783          	lw	a5,-36(s0)
800028b4:	00478793          	addi	a5,a5,4
800028b8:	00078513          	mv	a0,a5
800028bc:	b08ff0ef          	jal	ra,80001bc4 <vListInitialiseItem>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2877
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
800028c0:	fdc42783          	lw	a5,-36(s0)
800028c4:	01878793          	addi	a5,a5,24
800028c8:	00078513          	mv	a0,a5
800028cc:	af8ff0ef          	jal	ra,80001bc4 <vListInitialiseItem>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2881

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
800028d0:	fdc42783          	lw	a5,-36(s0)
800028d4:	fdc42703          	lw	a4,-36(s0)
800028d8:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2884

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
800028dc:	00500713          	li	a4,5
800028e0:	fd442783          	lw	a5,-44(s0)
800028e4:	40f70733          	sub	a4,a4,a5
800028e8:	fdc42783          	lw	a5,-36(s0)
800028ec:	00e7ac23          	sw	a4,24(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2885
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
800028f0:	fdc42783          	lw	a5,-36(s0)
800028f4:	fdc42703          	lw	a4,-36(s0)
800028f8:	02e7a223          	sw	a4,36(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2889

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
800028fc:	fdc42783          	lw	a5,-36(s0)
80002900:	0407a223          	sw	zero,68(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2927
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
80002904:	fdc42783          	lw	a5,-36(s0)
80002908:	0407ac23          	sw	zero,88(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2928
		pxTCB->eNotifyState = eNotWaitingNotification;
8000290c:	fdc42783          	lw	a5,-36(s0)
80002910:	0407ae23          	sw	zero,92(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2938
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
80002914:	00000013          	nop
80002918:	03c12083          	lw	ra,60(sp)
8000291c:	03812403          	lw	s0,56(sp)
80002920:	04010113          	addi	sp,sp,64
80002924:	00008067          	ret

80002928 <prvInitialiseTaskLists>:
prvInitialiseTaskLists():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2997

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
80002928:	fe010113          	addi	sp,sp,-32
8000292c:	00112e23          	sw	ra,28(sp)
80002930:	00812c23          	sw	s0,24(sp)
80002934:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
80002938:	fe042623          	sw	zero,-20(s0)
8000293c:	0380006f          	j	80002974 <prvInitialiseTaskLists+0x4c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3002 (discriminator 3)
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
80002940:	fec42703          	lw	a4,-20(s0)
80002944:	00070793          	mv	a5,a4
80002948:	00279793          	slli	a5,a5,0x2
8000294c:	00e787b3          	add	a5,a5,a4
80002950:	00279793          	slli	a5,a5,0x2
80002954:	80021737          	lui	a4,0x80021
80002958:	9d070713          	addi	a4,a4,-1584 # 800209d0 <__stack_top+0xfffde980>
8000295c:	00e787b3          	add	a5,a5,a4
80002960:	00078513          	mv	a0,a5
80002964:	9fcff0ef          	jal	ra,80001b60 <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 3)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
80002968:	fec42783          	lw	a5,-20(s0)
8000296c:	00178793          	addi	a5,a5,1
80002970:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 1)
80002974:	fec42703          	lw	a4,-20(s0)
80002978:	00400793          	li	a5,4
8000297c:	fce7f2e3          	bleu	a4,a5,80002940 <prvInitialiseTaskLists+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3005
	}

	vListInitialise( &xDelayedTaskList1 );
80002980:	800217b7          	lui	a5,0x80021
80002984:	a3478513          	addi	a0,a5,-1484 # 80020a34 <__stack_top+0xfffde9e4>
80002988:	9d8ff0ef          	jal	ra,80001b60 <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3006
	vListInitialise( &xDelayedTaskList2 );
8000298c:	800217b7          	lui	a5,0x80021
80002990:	a4878513          	addi	a0,a5,-1464 # 80020a48 <__stack_top+0xfffde9f8>
80002994:	9ccff0ef          	jal	ra,80001b60 <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3007
	vListInitialise( &xPendingReadyList );
80002998:	800217b7          	lui	a5,0x80021
8000299c:	a5c78513          	addi	a0,a5,-1444 # 80020a5c <__stack_top+0xfffdea0c>
800029a0:	9c0ff0ef          	jal	ra,80001b60 <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3011

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
800029a4:	800217b7          	lui	a5,0x80021
800029a8:	a7078513          	addi	a0,a5,-1424 # 80020a70 <__stack_top+0xfffdea20>
800029ac:	9b4ff0ef          	jal	ra,80001b60 <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3017
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
800029b0:	800217b7          	lui	a5,0x80021
800029b4:	a8478513          	addi	a0,a5,-1404 # 80020a84 <__stack_top+0xfffdea34>
800029b8:	9a8ff0ef          	jal	ra,80001b60 <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3023
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
800029bc:	80021737          	lui	a4,0x80021
800029c0:	a3470713          	addi	a4,a4,-1484 # 80020a34 <__stack_top+0xfffde9e4>
800029c4:	92e1a823          	sw	a4,-1744(gp) # 80007990 <pxDelayedTaskList>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3024
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
800029c8:	80021737          	lui	a4,0x80021
800029cc:	a4870713          	addi	a4,a4,-1464 # 80020a48 <__stack_top+0xfffde9f8>
800029d0:	92e1aa23          	sw	a4,-1740(gp) # 80007994 <pxOverflowDelayedTaskList>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3025
}
800029d4:	00000013          	nop
800029d8:	01c12083          	lw	ra,28(sp)
800029dc:	01812403          	lw	s0,24(sp)
800029e0:	02010113          	addi	sp,sp,32
800029e4:	00008067          	ret

800029e8 <prvCheckTasksWaitingTermination>:
prvCheckTasksWaitingTermination():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3029
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
800029e8:	fe010113          	addi	sp,sp,-32
800029ec:	00112e23          	sw	ra,28(sp)
800029f0:	00812c23          	sw	s0,24(sp)
800029f4:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
800029f8:	0740006f          	j	80002a6c <prvCheckTasksWaitingTermination+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3038
		{
			vTaskSuspendAll();
800029fc:	929ff0ef          	jal	ra,80002324 <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3040
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
80002a00:	800217b7          	lui	a5,0x80021
80002a04:	a707a783          	lw	a5,-1424(a5) # 80020a70 <__stack_top+0xfffdea20>
80002a08:	0017b793          	seqz	a5,a5
80002a0c:	0ff7f793          	andi	a5,a5,255
80002a10:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3042
			}
			( void ) xTaskResumeAll();
80002a14:	939ff0ef          	jal	ra,8000234c <xTaskResumeAll>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3044

			if( xListIsEmpty == pdFALSE )
80002a18:	fec42783          	lw	a5,-20(s0)
80002a1c:	04079863          	bnez	a5,80002a6c <prvCheckTasksWaitingTermination+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3048
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
80002a20:	c31fe0ef          	jal	ra,80001650 <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3050
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
80002a24:	800217b7          	lui	a5,0x80021
80002a28:	a7078793          	addi	a5,a5,-1424 # 80020a70 <__stack_top+0xfffdea20>
80002a2c:	00c7a783          	lw	a5,12(a5)
80002a30:	00c7a783          	lw	a5,12(a5)
80002a34:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3051
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80002a38:	fe842783          	lw	a5,-24(s0)
80002a3c:	00478793          	addi	a5,a5,4
80002a40:	00078513          	mv	a0,a5
80002a44:	b04ff0ef          	jal	ra,80001d48 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3052
					--uxCurrentNumberOfTasks;
80002a48:	93c1a783          	lw	a5,-1732(gp) # 8000799c <uxCurrentNumberOfTasks>
80002a4c:	fff78713          	addi	a4,a5,-1
80002a50:	92e1ae23          	sw	a4,-1732(gp) # 8000799c <uxCurrentNumberOfTasks>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3053
					--uxTasksDeleted;
80002a54:	9381a783          	lw	a5,-1736(gp) # 80007998 <uxTasksDeleted>
80002a58:	fff78713          	addi	a4,a5,-1
80002a5c:	92e1ac23          	sw	a4,-1736(gp) # 80007998 <uxTasksDeleted>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3055
				}
				taskEXIT_CRITICAL();
80002a60:	c25fe0ef          	jal	ra,80001684 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3057

				prvDeleteTCB( pxTCB );
80002a64:	fe842503          	lw	a0,-24(s0)
80002a68:	168000ef          	jal	ra,80002bd0 <prvDeleteTCB>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
80002a6c:	9381a783          	lw	a5,-1736(gp) # 80007998 <uxTasksDeleted>
80002a70:	f80796e3          	bnez	a5,800029fc <prvCheckTasksWaitingTermination+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3066
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
80002a74:	00000013          	nop
80002a78:	01c12083          	lw	ra,28(sp)
80002a7c:	01812403          	lw	s0,24(sp)
80002a80:	02010113          	addi	sp,sp,32
80002a84:	00008067          	ret

80002a88 <prvAddCurrentTaskToDelayedList>:
prvAddCurrentTaskToDelayedList():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3070
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
80002a88:	fe010113          	addi	sp,sp,-32
80002a8c:	00112e23          	sw	ra,28(sp)
80002a90:	00812c23          	sw	s0,24(sp)
80002a94:	02010413          	addi	s0,sp,32
80002a98:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3072
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
80002a9c:	92c1a783          	lw	a5,-1748(gp) # 8000798c <pxCurrentTCB>
80002aa0:	fec42703          	lw	a4,-20(s0)
80002aa4:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3074

	if( xTimeToWake < xTickCount )
80002aa8:	9401a783          	lw	a5,-1728(gp) # 800079a0 <xTickCount>
80002aac:	fec42703          	lw	a4,-20(s0)
80002ab0:	02f77063          	bleu	a5,a4,80002ad0 <prvAddCurrentTaskToDelayedList+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3077
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80002ab4:	9341a703          	lw	a4,-1740(gp) # 80007994 <pxOverflowDelayedTaskList>
80002ab8:	92c1a783          	lw	a5,-1748(gp) # 8000798c <pxCurrentTCB>
80002abc:	00478793          	addi	a5,a5,4
80002ac0:	00078593          	mv	a1,a5
80002ac4:	00070513          	mv	a0,a4
80002ac8:	9acff0ef          	jal	ra,80001c74 <vListInsert>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
80002acc:	0300006f          	j	80002afc <prvAddCurrentTaskToDelayedList+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3082
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80002ad0:	9301a703          	lw	a4,-1744(gp) # 80007990 <pxDelayedTaskList>
80002ad4:	92c1a783          	lw	a5,-1748(gp) # 8000798c <pxCurrentTCB>
80002ad8:	00478793          	addi	a5,a5,4
80002adc:	00078593          	mv	a1,a5
80002ae0:	00070513          	mv	a0,a4
80002ae4:	990ff0ef          	jal	ra,80001c74 <vListInsert>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3087
		if( xTimeToWake < xNextTaskUnblockTime )
80002ae8:	95c1a783          	lw	a5,-1700(gp) # 800079bc <xNextTaskUnblockTime>
80002aec:	fec42703          	lw	a4,-20(s0)
80002af0:	00f77663          	bleu	a5,a4,80002afc <prvAddCurrentTaskToDelayedList+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3089
			xNextTaskUnblockTime = xTimeToWake;
80002af4:	fec42703          	lw	a4,-20(s0)
80002af8:	94e1ae23          	sw	a4,-1700(gp) # 800079bc <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
}
80002afc:	00000013          	nop
80002b00:	01c12083          	lw	ra,28(sp)
80002b04:	01812403          	lw	s0,24(sp)
80002b08:	02010113          	addi	sp,sp,32
80002b0c:	00008067          	ret

80002b10 <prvAllocateTCBAndStack>:
prvAllocateTCBAndStack():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3100
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
80002b10:	fd010113          	addi	sp,sp,-48
80002b14:	02112623          	sw	ra,44(sp)
80002b18:	02812423          	sw	s0,40(sp)
80002b1c:	03010413          	addi	s0,sp,48
80002b20:	00050793          	mv	a5,a0
80002b24:	fcb42c23          	sw	a1,-40(s0)
80002b28:	fcf41f23          	sh	a5,-34(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80002b2c:	fd842783          	lw	a5,-40(s0)
80002b30:	00079e63          	bnez	a5,80002b4c <prvAllocateTCBAndStack+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 1)
80002b34:	fde45783          	lhu	a5,-34(s0)
80002b38:	00279793          	slli	a5,a5,0x2
80002b3c:	00078513          	mv	a0,a5
80002b40:	fa8fe0ef          	jal	ra,800012e8 <pvPortMalloc>
80002b44:	00050793          	mv	a5,a0
80002b48:	0080006f          	j	80002b50 <prvAllocateTCBAndStack+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 2)
80002b4c:	fd842783          	lw	a5,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 4)
80002b50:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3134 (discriminator 4)

		if( pxStack != NULL )
80002b54:	fe842783          	lw	a5,-24(s0)
80002b58:	02078a63          	beqz	a5,80002b8c <prvAllocateTCBAndStack+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3138
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
80002b5c:	06000513          	li	a0,96
80002b60:	f88fe0ef          	jal	ra,800012e8 <pvPortMalloc>
80002b64:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3140

			if( pxNewTCB != NULL )
80002b68:	fec42783          	lw	a5,-20(s0)
80002b6c:	00078a63          	beqz	a5,80002b80 <prvAllocateTCBAndStack+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3143
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
80002b70:	fec42783          	lw	a5,-20(s0)
80002b74:	fe842703          	lw	a4,-24(s0)
80002b78:	02e7a823          	sw	a4,48(a5)
80002b7c:	0140006f          	j	80002b90 <prvAllocateTCBAndStack+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3149
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
80002b80:	fe842503          	lw	a0,-24(s0)
80002b84:	941fe0ef          	jal	ra,800014c4 <vPortFree>
80002b88:	0080006f          	j	80002b90 <prvAllocateTCBAndStack+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3154
			}
		}
		else
		{
			pxNewTCB = NULL;
80002b8c:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3159
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
80002b90:	fec42783          	lw	a5,-20(s0)
80002b94:	02078263          	beqz	a5,80002bb8 <prvAllocateTCBAndStack+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3165
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
80002b98:	fec42783          	lw	a5,-20(s0)
80002b9c:	0307a703          	lw	a4,48(a5)
80002ba0:	fde45783          	lhu	a5,-34(s0)
80002ba4:	00279793          	slli	a5,a5,0x2
80002ba8:	00078613          	mv	a2,a5
80002bac:	0a500593          	li	a1,165
80002bb0:	00070513          	mv	a0,a4
80002bb4:	a2cff0ef          	jal	ra,80001de0 <memset>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3170
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
80002bb8:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3171
}
80002bbc:	00078513          	mv	a0,a5
80002bc0:	02c12083          	lw	ra,44(sp)
80002bc4:	02812403          	lw	s0,40(sp)
80002bc8:	03010113          	addi	sp,sp,48
80002bcc:	00008067          	ret

80002bd0 <prvDeleteTCB>:
prvDeleteTCB():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3310
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
80002bd0:	fe010113          	addi	sp,sp,-32
80002bd4:	00112e23          	sw	ra,28(sp)
80002bd8:	00812c23          	sw	s0,24(sp)
80002bdc:	02010413          	addi	s0,sp,32
80002be0:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3335
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
80002be4:	fec42783          	lw	a5,-20(s0)
80002be8:	0307a783          	lw	a5,48(a5)
80002bec:	00078513          	mv	a0,a5
80002bf0:	8d5fe0ef          	jal	ra,800014c4 <vPortFree>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3339
		}
		#endif

		vPortFree( pxTCB );
80002bf4:	fec42503          	lw	a0,-20(s0)
80002bf8:	8cdfe0ef          	jal	ra,800014c4 <vPortFree>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3340
	}
80002bfc:	00000013          	nop
80002c00:	01c12083          	lw	ra,28(sp)
80002c04:	01812403          	lw	s0,24(sp)
80002c08:	02010113          	addi	sp,sp,32
80002c0c:	00008067          	ret

80002c10 <prvResetNextTaskUnblockTime>:
prvResetNextTaskUnblockTime():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3346

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
80002c10:	fe010113          	addi	sp,sp,-32
80002c14:	00812e23          	sw	s0,28(sp)
80002c18:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80002c1c:	9301a783          	lw	a5,-1744(gp) # 80007990 <pxDelayedTaskList>
80002c20:	0007a783          	lw	a5,0(a5)
80002c24:	00079663          	bnez	a5,80002c30 <prvResetNextTaskUnblockTime+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 1)
80002c28:	00100793          	li	a5,1
80002c2c:	0080006f          	j	80002c34 <prvResetNextTaskUnblockTime+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 2)
80002c30:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 4)
80002c34:	00078863          	beqz	a5,80002c44 <prvResetNextTaskUnblockTime+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3355
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
80002c38:	fff00713          	li	a4,-1
80002c3c:	94e1ae23          	sw	a4,-1700(gp) # 800079bc <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
80002c40:	0200006f          	j	80002c60 <prvResetNextTaskUnblockTime+0x50>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3363
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80002c44:	9301a783          	lw	a5,-1744(gp) # 80007990 <pxDelayedTaskList>
80002c48:	00c7a783          	lw	a5,12(a5)
80002c4c:	00c7a783          	lw	a5,12(a5)
80002c50:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3364
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
80002c54:	fec42783          	lw	a5,-20(s0)
80002c58:	0047a703          	lw	a4,4(a5)
80002c5c:	94e1ae23          	sw	a4,-1700(gp) # 800079bc <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
}
80002c60:	00000013          	nop
80002c64:	01c12403          	lw	s0,28(sp)
80002c68:	02010113          	addi	sp,sp,32
80002c6c:	00008067          	ret

80002c70 <xTaskGetCurrentTaskHandle>:
xTaskGetCurrentTaskHandle():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3372
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
80002c70:	fe010113          	addi	sp,sp,-32
80002c74:	00812e23          	sw	s0,28(sp)
80002c78:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3378
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
80002c7c:	92c1a783          	lw	a5,-1748(gp) # 8000798c <pxCurrentTCB>
80002c80:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3380

		return xReturn;
80002c84:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3381
	}
80002c88:	00078513          	mv	a0,a5
80002c8c:	01c12403          	lw	s0,28(sp)
80002c90:	02010113          	addi	sp,sp,32
80002c94:	00008067          	ret

80002c98 <PLIC_EnableIRQ>:
PLIC_EnableIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:154
{
80002c98:	fd010113          	addi	sp,sp,-48
80002c9c:	02812623          	sw	s0,44(sp)
80002ca0:	03010413          	addi	s0,sp,48
80002ca4:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:155
    unsigned long hart_id = read_csr(mhartid);
80002ca8:	f14027f3          	csrr	a5,mhartid
80002cac:	fef42623          	sw	a5,-20(s0)
80002cb0:	fec42783          	lw	a5,-20(s0)
80002cb4:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:156
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80002cb8:	40000737          	lui	a4,0x40000
80002cbc:	fdc42783          	lw	a5,-36(s0)
80002cc0:	0057d793          	srli	a5,a5,0x5
80002cc4:	fe842683          	lw	a3,-24(s0)
80002cc8:	00569693          	slli	a3,a3,0x5
80002ccc:	00f686b3          	add	a3,a3,a5
80002cd0:	000017b7          	lui	a5,0x1
80002cd4:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80002cd8:	00f687b3          	add	a5,a3,a5
80002cdc:	00279793          	slli	a5,a5,0x2
80002ce0:	00f707b3          	add	a5,a4,a5
80002ce4:	0007a783          	lw	a5,0(a5)
80002ce8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:157
    current |= (uint32_t)1 << (IRQn % 32);
80002cec:	fdc42783          	lw	a5,-36(s0)
80002cf0:	01f7f793          	andi	a5,a5,31
80002cf4:	00100713          	li	a4,1
80002cf8:	00f717b3          	sll	a5,a4,a5
80002cfc:	fe442703          	lw	a4,-28(s0)
80002d00:	00f767b3          	or	a5,a4,a5
80002d04:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:158
    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
80002d08:	40000737          	lui	a4,0x40000
80002d0c:	fdc42783          	lw	a5,-36(s0)
80002d10:	0057d793          	srli	a5,a5,0x5
80002d14:	fe842683          	lw	a3,-24(s0)
80002d18:	00569693          	slli	a3,a3,0x5
80002d1c:	00f686b3          	add	a3,a3,a5
80002d20:	000017b7          	lui	a5,0x1
80002d24:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80002d28:	00f687b3          	add	a5,a3,a5
80002d2c:	00279793          	slli	a5,a5,0x2
80002d30:	00f707b3          	add	a5,a4,a5
80002d34:	fe442703          	lw	a4,-28(s0)
80002d38:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:159
}
80002d3c:	00000013          	nop
80002d40:	02c12403          	lw	s0,44(sp)
80002d44:	03010113          	addi	sp,sp,48
80002d48:	00008067          	ret

80002d4c <PLIC_SetPriority>:
PLIC_SetPriority():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:188
{
80002d4c:	fe010113          	addi	sp,sp,-32
80002d50:	00812e23          	sw	s0,28(sp)
80002d54:	02010413          	addi	s0,sp,32
80002d58:	fea42623          	sw	a0,-20(s0)
80002d5c:	feb42423          	sw	a1,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:189
    PLIC->SOURCE_PRIORITY[IRQn] = priority;
80002d60:	40000737          	lui	a4,0x40000
80002d64:	fec42783          	lw	a5,-20(s0)
80002d68:	00279793          	slli	a5,a5,0x2
80002d6c:	00f707b3          	add	a5,a4,a5
80002d70:	fe842703          	lw	a4,-24(s0)
80002d74:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:190
}
80002d78:	00000013          	nop
80002d7c:	01c12403          	lw	s0,28(sp)
80002d80:	02010113          	addi	sp,sp,32
80002d84:	00008067          	ret

80002d88 <Chronos_init>:
Chronos_init():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:29

//volatile unsigned int NI_IRCount;

////////////////////////////////////////////////////////////
// Initialize Chronos stuff
void Chronos_init(){
80002d88:	ff010113          	addi	sp,sp,-16
80002d8c:	00112623          	sw	ra,12(sp)
80002d90:	00812423          	sw	s0,8(sp)
80002d94:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:31
    // Resets the amount of each executed instruction
    resetExecutedInstructions();
80002d98:	679030ef          	jal	ra,80006c10 <resetExecutedInstructions>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:34

    //Informs the Router this tile ID, that is provided by Harness
    HW_set_32bit_reg(ROUTER_BASE, HW_get_32bit_reg(MY_ID)); 
80002d9c:	900007b7          	lui	a5,0x90000
80002da0:	ffc78513          	addi	a0,a5,-4 # 8ffffffc <__stack_top+0xffbdfac>
80002da4:	9f8fe0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80002da8:	00050793          	mv	a5,a0
80002dac:	00078593          	mv	a1,a5
80002db0:	50000537          	lui	a0,0x50000
80002db4:	9e0fe0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:37
    
    // Reads this processor address, calculated by the router
    ProcessorAddr = HW_get_32bit_reg(ROUTER_BASE);
80002db8:	50000537          	lui	a0,0x50000
80002dbc:	9e0fe0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80002dc0:	00050713          	mv	a4,a0
80002dc4:	800227b7          	lui	a5,0x80022
80002dc8:	04e7a423          	sw	a4,72(a5) # 80022048 <__stack_top+0xfffdfff8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:40

    // Informs the PRINTER this tile address
    HW_set_32bit_reg(PRINTER_CHAR, getXpos(ProcessorAddr));
80002dcc:	800227b7          	lui	a5,0x80022
80002dd0:	0487a783          	lw	a5,72(a5) # 80022048 <__stack_top+0xfffdfff8>
80002dd4:	00078513          	mv	a0,a5
80002dd8:	1f4000ef          	jal	ra,80002fcc <getXpos>
80002ddc:	00050793          	mv	a5,a0
80002de0:	00078593          	mv	a1,a5
80002de4:	500007b7          	lui	a5,0x50000
80002de8:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002dec:	9a8fe0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:41
    HW_set_32bit_reg(PRINTER_CHAR, getYpos(ProcessorAddr));
80002df0:	800227b7          	lui	a5,0x80022
80002df4:	0487a783          	lw	a5,72(a5) # 80022048 <__stack_top+0xfffdfff8>
80002df8:	00078513          	mv	a0,a5
80002dfc:	1fc000ef          	jal	ra,80002ff8 <getYpos>
80002e00:	00050793          	mv	a5,a0
80002e04:	00078593          	mv	a1,a5
80002e08:	500007b7          	lui	a5,0x50000
80002e0c:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002e10:	984fe0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:44

    // Initialize the TaskList
    API_TaskListInit();
80002e14:	060030ef          	jal	ra,80005e74 <API_TaskListInit>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:47
    
    // Initialize the Message & Service PIPE
    API_PipeInitialization();
80002e18:	129030ef          	jal	ra,80006740 <API_PipeInitialization>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:48
    SendingQueue_front = 0;
80002e1c:	800217b7          	lui	a5,0x80021
80002e20:	be07ae23          	sw	zero,-1028(a5) # 80020bfc <__stack_top+0xfffdebac>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:49
    SendingQueue_tail = 0;
80002e24:	800217b7          	lui	a5,0x80021
80002e28:	be07a223          	sw	zero,-1052(a5) # 80020be4 <__stack_top+0xfffdeb94>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:52

    // Configures the timer to interrupt at each ms
    HW_set_32bit_reg(NI_TIMER, 1000);
80002e2c:	3e800593          	li	a1,1000
80002e30:	500007b7          	lui	a5,0x50000
80002e34:	01078513          	addi	a0,a5,16 # 50000010 <RAM_SIZE+0x4ff80010>
80002e38:	95cfe0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:55

    // Informs the NI the address to store incoming packets
    HW_set_32bit_reg(NI_ADDR, (unsigned int)&incommingPacket.header);
80002e3c:	800217b7          	lui	a5,0x80021
80002e40:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
80002e44:	00078593          	mv	a1,a5
80002e48:	500007b7          	lui	a5,0x50000
80002e4c:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
80002e50:	944fe0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:58
    
    // Enables interruption from NI
    NI_enable_irq(TX_RX);
80002e54:	000077b7          	lui	a5,0x7
80002e58:	77778513          	addi	a0,a5,1911 # 7777 <HEAP_SIZE-0x8889>
80002e5c:	210000ef          	jal	ra,8000306c <NI_enable_irq>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:61

    // Set the system to Idle
    API_setFreqIdle();
80002e60:	4a5030ef          	jal	ra,80006b04 <API_setFreqIdle>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:63

    return;
80002e64:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:64
}
80002e68:	00c12083          	lw	ra,12(sp)
80002e6c:	00812403          	lw	s0,8(sp)
80002e70:	01010113          	addi	sp,sp,16
80002e74:	00008067          	ret

80002e78 <prints>:
prints():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:68

////////////////////////////////////////////////////////////
// Prints a string
void prints(char *text) {
80002e78:	fd010113          	addi	sp,sp,-48
80002e7c:	02112623          	sw	ra,44(sp)
80002e80:	02812423          	sw	s0,40(sp)
80002e84:	03010413          	addi	s0,sp,48
80002e88:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:69
    int i = 0;
80002e8c:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:71 (discriminator 1)
    do {
        HW_set_32bit_reg(PRINTER_CHAR, text[i]);
80002e90:	fec42783          	lw	a5,-20(s0)
80002e94:	fdc42703          	lw	a4,-36(s0)
80002e98:	00f707b3          	add	a5,a4,a5
80002e9c:	00078783          	lb	a5,0(a5)
80002ea0:	00078593          	mv	a1,a5
80002ea4:	500007b7          	lui	a5,0x50000
80002ea8:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002eac:	8e8fe0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:72 (discriminator 1)
        i++;
80002eb0:	fec42783          	lw	a5,-20(s0)
80002eb4:	00178793          	addi	a5,a5,1
80002eb8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:73 (discriminator 1)
    } while (text[i - 1] != '\0');
80002ebc:	fec42783          	lw	a5,-20(s0)
80002ec0:	fff78793          	addi	a5,a5,-1
80002ec4:	fdc42703          	lw	a4,-36(s0)
80002ec8:	00f707b3          	add	a5,a4,a5
80002ecc:	00078783          	lb	a5,0(a5)
80002ed0:	fc0790e3          	bnez	a5,80002e90 <prints+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:74
    return;
80002ed4:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:75
}
80002ed8:	02c12083          	lw	ra,44(sp)
80002edc:	02812403          	lw	s0,40(sp)
80002ee0:	03010113          	addi	sp,sp,48
80002ee4:	00008067          	ret

80002ee8 <printi>:
printi():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:79

////////////////////////////////////////////////////////////
// Prints an integer
void printi(int value) {
80002ee8:	fe010113          	addi	sp,sp,-32
80002eec:	00112e23          	sw	ra,28(sp)
80002ef0:	00812c23          	sw	s0,24(sp)
80002ef4:	02010413          	addi	s0,sp,32
80002ef8:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:80
    HW_set_32bit_reg(PRINTER_INT, value);
80002efc:	fec42783          	lw	a5,-20(s0)
80002f00:	00078593          	mv	a1,a5
80002f04:	500007b7          	lui	a5,0x50000
80002f08:	02478513          	addi	a0,a5,36 # 50000024 <RAM_SIZE+0x4ff80024>
80002f0c:	888fe0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:81
    return;
80002f10:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:82
}
80002f14:	01c12083          	lw	ra,28(sp)
80002f18:	01812403          	lw	s0,24(sp)
80002f1c:	02010113          	addi	sp,sp,32
80002f20:	00008067          	ret

80002f24 <printsv>:
printsv():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:86

////////////////////////////////////////////////////////////
// Prints a string followed by a integer
void printsv(char *text1, int value1) {
80002f24:	fe010113          	addi	sp,sp,-32
80002f28:	00112e23          	sw	ra,28(sp)
80002f2c:	00812c23          	sw	s0,24(sp)
80002f30:	02010413          	addi	s0,sp,32
80002f34:	fea42623          	sw	a0,-20(s0)
80002f38:	feb42423          	sw	a1,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:87
    prints(text1);
80002f3c:	fec42503          	lw	a0,-20(s0)
80002f40:	f39ff0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:88
    printi(value1);
80002f44:	fe842503          	lw	a0,-24(s0)
80002f48:	fa1ff0ef          	jal	ra,80002ee8 <printi>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:89
    prints("\n");
80002f4c:	800077b7          	lui	a5,0x80007
80002f50:	14078513          	addi	a0,a5,320 # 80007140 <__stack_top+0xfffc50f0>
80002f54:	f25ff0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:90
    return;
80002f58:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:91
}
80002f5c:	01c12083          	lw	ra,28(sp)
80002f60:	01812403          	lw	s0,24(sp)
80002f64:	02010113          	addi	sp,sp,32
80002f68:	00008067          	ret

80002f6c <printsvsv>:
printsvsv():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:95

////////////////////////////////////////////////////////////
// Prints two strings and two integers interspersed
void printsvsv(char *text1, int value1, char *text2, int value2) {
80002f6c:	fe010113          	addi	sp,sp,-32
80002f70:	00112e23          	sw	ra,28(sp)
80002f74:	00812c23          	sw	s0,24(sp)
80002f78:	02010413          	addi	s0,sp,32
80002f7c:	fea42623          	sw	a0,-20(s0)
80002f80:	feb42423          	sw	a1,-24(s0)
80002f84:	fec42223          	sw	a2,-28(s0)
80002f88:	fed42023          	sw	a3,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:96
    prints(text1);
80002f8c:	fec42503          	lw	a0,-20(s0)
80002f90:	ee9ff0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:97
    printi(value1);
80002f94:	fe842503          	lw	a0,-24(s0)
80002f98:	f51ff0ef          	jal	ra,80002ee8 <printi>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:98
    prints(text2);
80002f9c:	fe442503          	lw	a0,-28(s0)
80002fa0:	ed9ff0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:99
    printi(value2);
80002fa4:	fe042503          	lw	a0,-32(s0)
80002fa8:	f41ff0ef          	jal	ra,80002ee8 <printi>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:100
    prints("\n");
80002fac:	800077b7          	lui	a5,0x80007
80002fb0:	14078513          	addi	a0,a5,320 # 80007140 <__stack_top+0xfffc50f0>
80002fb4:	ec5ff0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:101
    return;
80002fb8:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:102
}
80002fbc:	01c12083          	lw	ra,28(sp)
80002fc0:	01812403          	lw	s0,24(sp)
80002fc4:	02010113          	addi	sp,sp,32
80002fc8:	00008067          	ret

80002fcc <getXpos>:
getXpos():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:106

////////////////////////////////////////////////////////////
// Gets the X coordinate from the address
unsigned int getXpos(unsigned int addr) { return ((addr & 0x0000FF00) >> 8); }
80002fcc:	fe010113          	addi	sp,sp,-32
80002fd0:	00812e23          	sw	s0,28(sp)
80002fd4:	02010413          	addi	s0,sp,32
80002fd8:	fea42623          	sw	a0,-20(s0)
80002fdc:	fec42783          	lw	a5,-20(s0)
80002fe0:	0087d793          	srli	a5,a5,0x8
80002fe4:	0ff7f793          	andi	a5,a5,255
80002fe8:	00078513          	mv	a0,a5
80002fec:	01c12403          	lw	s0,28(sp)
80002ff0:	02010113          	addi	sp,sp,32
80002ff4:	00008067          	ret

80002ff8 <getYpos>:
getYpos():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:110

////////////////////////////////////////////////////////////
// Gets the Y coordinate from the address
unsigned int getYpos(unsigned int addr) { return (addr & 0x000000FF); }
80002ff8:	fe010113          	addi	sp,sp,-32
80002ffc:	00812e23          	sw	s0,28(sp)
80003000:	02010413          	addi	s0,sp,32
80003004:	fea42623          	sw	a0,-20(s0)
80003008:	fec42783          	lw	a5,-20(s0)
8000300c:	0ff7f793          	andi	a5,a5,255
80003010:	00078513          	mv	a0,a5
80003014:	01c12403          	lw	s0,28(sp)
80003018:	02010113          	addi	sp,sp,32
8000301c:	00008067          	ret

80003020 <SendRaw>:
SendRaw():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:114

///////////////////////////////////////////////////////////////////
// Configure the NI to transmitt a given packet
void SendRaw(unsigned int addr) {
80003020:	fe010113          	addi	sp,sp,-32
80003024:	00112e23          	sw	ra,28(sp)
80003028:	00812c23          	sw	s0,24(sp)
8000302c:	02010413          	addi	s0,sp,32
80003030:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:115
    HW_set_32bit_reg(NI_ADDR, addr);
80003034:	fec42583          	lw	a1,-20(s0)
80003038:	500007b7          	lui	a5,0x50000
8000303c:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
80003040:	f55fd0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:116
    HW_set_32bit_reg(NI_TX, TX);
80003044:	000027b7          	lui	a5,0x2
80003048:	22278593          	addi	a1,a5,546 # 2222 <HEAP_SIZE-0xddde>
8000304c:	500007b7          	lui	a5,0x50000
80003050:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80003054:	f41fd0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:117
    return;
80003058:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:118
}
8000305c:	01c12083          	lw	ra,28(sp)
80003060:	01812403          	lw	s0,24(sp)
80003064:	02010113          	addi	sp,sp,32
80003068:	00008067          	ret

8000306c <NI_enable_irq>:
NI_enable_irq():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:122

////////////////////////////////////////////////////////////
// Enables interruptions incomming from NI
void NI_enable_irq(int which){
8000306c:	fe010113          	addi	sp,sp,-32
80003070:	00112e23          	sw	ra,28(sp)
80003074:	00812c23          	sw	s0,24(sp)
80003078:	02010413          	addi	s0,sp,32
8000307c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:123
    PLIC_EnableIRQ(NI_RX_IRQn);
80003080:	00200513          	li	a0,2
80003084:	c15ff0ef          	jal	ra,80002c98 <PLIC_EnableIRQ>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:124
    PLIC_SetPriority(NI_RX_IRQn, 1);
80003088:	00100593          	li	a1,1
8000308c:	00200513          	li	a0,2
80003090:	cbdff0ef          	jal	ra,80002d4c <PLIC_SetPriority>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:125
    return;
80003094:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:126
}
80003098:	01c12083          	lw	ra,28(sp)
8000309c:	01812403          	lw	s0,24(sp)
800030a0:	02010113          	addi	sp,sp,32
800030a4:	00008067          	ret

800030a8 <External_2_IRQHandler>:
External_2_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:137
    return;
}

////////////////////////////////////////////////////////////
// Interruption handler for the NI
uint8_t External_2_IRQHandler(void){    
800030a8:	ff010113          	addi	sp,sp,-16
800030ac:	00112623          	sw	ra,12(sp)
800030b0:	00812423          	sw	s0,8(sp)
800030b4:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:138
    API_NI_Handler();
800030b8:	775000ef          	jal	ra,8000402c <API_NI_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:140

    return 0;
800030bc:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:141
}
800030c0:	00078513          	mv	a0,a5
800030c4:	00c12083          	lw	ra,12(sp)
800030c8:	00812403          	lw	s0,8(sp)
800030cc:	01010113          	addi	sp,sp,16
800030d0:	00008067          	ret

800030d4 <mySwap>:
mySwap():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:146

////////////////////////////////////////////////////////////
// https://www.techiedelight.com/implement-itoa-function-in-c/
// Function to swap two numbers
void mySwap(char *x, char *y) {
800030d4:	fd010113          	addi	sp,sp,-48
800030d8:	02812623          	sw	s0,44(sp)
800030dc:	03010413          	addi	s0,sp,48
800030e0:	fca42e23          	sw	a0,-36(s0)
800030e4:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:147
    char t = *x; *x = *y; *y = t;
800030e8:	fdc42783          	lw	a5,-36(s0)
800030ec:	0007c783          	lbu	a5,0(a5)
800030f0:	fef407a3          	sb	a5,-17(s0)
800030f4:	fd842783          	lw	a5,-40(s0)
800030f8:	00078703          	lb	a4,0(a5)
800030fc:	fdc42783          	lw	a5,-36(s0)
80003100:	00e78023          	sb	a4,0(a5)
80003104:	fd842783          	lw	a5,-40(s0)
80003108:	fef44703          	lbu	a4,-17(s0)
8000310c:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:148
}
80003110:	00000013          	nop
80003114:	02c12403          	lw	s0,44(sp)
80003118:	03010113          	addi	sp,sp,48
8000311c:	00008067          	ret

80003120 <reverse>:
reverse():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:150
// Function to reverse `buffer[i…j]`
char* reverse(char *buffer, int i, int j){
80003120:	fe010113          	addi	sp,sp,-32
80003124:	00112e23          	sw	ra,28(sp)
80003128:	00812c23          	sw	s0,24(sp)
8000312c:	02010413          	addi	s0,sp,32
80003130:	fea42623          	sw	a0,-20(s0)
80003134:	feb42423          	sw	a1,-24(s0)
80003138:	fec42223          	sw	a2,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:151
    while (i < j) {
8000313c:	0400006f          	j	8000317c <reverse+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:152
        mySwap(&buffer[i++], &buffer[j--]);
80003140:	fe842783          	lw	a5,-24(s0)
80003144:	00178713          	addi	a4,a5,1
80003148:	fee42423          	sw	a4,-24(s0)
8000314c:	00078713          	mv	a4,a5
80003150:	fec42783          	lw	a5,-20(s0)
80003154:	00e786b3          	add	a3,a5,a4
80003158:	fe442783          	lw	a5,-28(s0)
8000315c:	fff78713          	addi	a4,a5,-1
80003160:	fee42223          	sw	a4,-28(s0)
80003164:	00078713          	mv	a4,a5
80003168:	fec42783          	lw	a5,-20(s0)
8000316c:	00e787b3          	add	a5,a5,a4
80003170:	00078593          	mv	a1,a5
80003174:	00068513          	mv	a0,a3
80003178:	f5dff0ef          	jal	ra,800030d4 <mySwap>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:151
    while (i < j) {
8000317c:	fe842703          	lw	a4,-24(s0)
80003180:	fe442783          	lw	a5,-28(s0)
80003184:	faf74ee3          	blt	a4,a5,80003140 <reverse+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:155
    }
 
    return buffer;
80003188:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:156
}
8000318c:	00078513          	mv	a0,a5
80003190:	01c12083          	lw	ra,28(sp)
80003194:	01812403          	lw	s0,24(sp)
80003198:	02010113          	addi	sp,sp,32
8000319c:	00008067          	ret

800031a0 <myItoa>:
myItoa():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:158
// Iterative function to implement `itoa()` function in C
char* myItoa(int value, char* buffer, int base){
800031a0:	fd010113          	addi	sp,sp,-48
800031a4:	02112623          	sw	ra,44(sp)
800031a8:	02812423          	sw	s0,40(sp)
800031ac:	03010413          	addi	s0,sp,48
800031b0:	fca42e23          	sw	a0,-36(s0)
800031b4:	fcb42c23          	sw	a1,-40(s0)
800031b8:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:160
    // invalid input
    if (base < 2 || base > 32) {
800031bc:	fd442703          	lw	a4,-44(s0)
800031c0:	00100793          	li	a5,1
800031c4:	00e7d863          	ble	a4,a5,800031d4 <myItoa+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:160 (discriminator 1)
800031c8:	fd442703          	lw	a4,-44(s0)
800031cc:	02000793          	li	a5,32
800031d0:	00e7d663          	ble	a4,a5,800031dc <myItoa+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:161
        return buffer;
800031d4:	fd842783          	lw	a5,-40(s0)
800031d8:	1540006f          	j	8000332c <myItoa+0x18c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:165
    }
    // consider the absolute value of the number
    int n;
    if (value < 0)
800031dc:	fdc42783          	lw	a5,-36(s0)
800031e0:	0007da63          	bgez	a5,800031f4 <myItoa+0x54>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:166
        n = value * -1;
800031e4:	fdc42783          	lw	a5,-36(s0)
800031e8:	40f007b3          	neg	a5,a5
800031ec:	fef42623          	sw	a5,-20(s0)
800031f0:	00c0006f          	j	800031fc <myItoa+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:168
    else 
        n = value;
800031f4:	fdc42783          	lw	a5,-36(s0)
800031f8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:170

    int i = 0;
800031fc:	fe042423          	sw	zero,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:171
    while (n){
80003200:	09c0006f          	j	8000329c <myItoa+0xfc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:172
        int r = n % base;
80003204:	fec42703          	lw	a4,-20(s0)
80003208:	fd442783          	lw	a5,-44(s0)
8000320c:	02f767b3          	rem	a5,a4,a5
80003210:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:174
 
        if (r >= 10) {
80003214:	fe442703          	lw	a4,-28(s0)
80003218:	00900793          	li	a5,9
8000321c:	02e7de63          	ble	a4,a5,80003258 <myItoa+0xb8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:175
            buffer[i++] = 65 + (r - 10);
80003220:	fe442783          	lw	a5,-28(s0)
80003224:	0ff7f793          	andi	a5,a5,255
80003228:	03778793          	addi	a5,a5,55
8000322c:	0ff7f693          	andi	a3,a5,255
80003230:	fe842783          	lw	a5,-24(s0)
80003234:	00178713          	addi	a4,a5,1
80003238:	fee42423          	sw	a4,-24(s0)
8000323c:	00078713          	mv	a4,a5
80003240:	fd842783          	lw	a5,-40(s0)
80003244:	00e787b3          	add	a5,a5,a4
80003248:	01869713          	slli	a4,a3,0x18
8000324c:	41875713          	srai	a4,a4,0x18
80003250:	00e78023          	sb	a4,0(a5)
80003254:	0380006f          	j	8000328c <myItoa+0xec>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:178
        }
        else {
            buffer[i++] = 48 + r;
80003258:	fe442783          	lw	a5,-28(s0)
8000325c:	0ff7f793          	andi	a5,a5,255
80003260:	03078793          	addi	a5,a5,48
80003264:	0ff7f693          	andi	a3,a5,255
80003268:	fe842783          	lw	a5,-24(s0)
8000326c:	00178713          	addi	a4,a5,1
80003270:	fee42423          	sw	a4,-24(s0)
80003274:	00078713          	mv	a4,a5
80003278:	fd842783          	lw	a5,-40(s0)
8000327c:	00e787b3          	add	a5,a5,a4
80003280:	01869713          	slli	a4,a3,0x18
80003284:	41875713          	srai	a4,a4,0x18
80003288:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:181
        }
 
        n = n / base;
8000328c:	fec42703          	lw	a4,-20(s0)
80003290:	fd442783          	lw	a5,-44(s0)
80003294:	02f747b3          	div	a5,a4,a5
80003298:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:171
    while (n){
8000329c:	fec42783          	lw	a5,-20(s0)
800032a0:	f60792e3          	bnez	a5,80003204 <myItoa+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:184
    }
    // if the number is 0
    if (i == 0) {
800032a4:	fe842783          	lw	a5,-24(s0)
800032a8:	02079263          	bnez	a5,800032cc <myItoa+0x12c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:185
        buffer[i++] = '0';
800032ac:	fe842783          	lw	a5,-24(s0)
800032b0:	00178713          	addi	a4,a5,1
800032b4:	fee42423          	sw	a4,-24(s0)
800032b8:	00078713          	mv	a4,a5
800032bc:	fd842783          	lw	a5,-40(s0)
800032c0:	00e787b3          	add	a5,a5,a4
800032c4:	03000713          	li	a4,48
800032c8:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:190
    }
    // If the base is 10 and the value is negative, the resulting string
    // is preceded with a minus sign (-)
    // With any other base, value is always considered unsigned
    if (value < 0 && base == 10) {
800032cc:	fdc42783          	lw	a5,-36(s0)
800032d0:	0207d863          	bgez	a5,80003300 <myItoa+0x160>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:190 (discriminator 1)
800032d4:	fd442703          	lw	a4,-44(s0)
800032d8:	00a00793          	li	a5,10
800032dc:	02f71263          	bne	a4,a5,80003300 <myItoa+0x160>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:191
        buffer[i++] = '-';
800032e0:	fe842783          	lw	a5,-24(s0)
800032e4:	00178713          	addi	a4,a5,1
800032e8:	fee42423          	sw	a4,-24(s0)
800032ec:	00078713          	mv	a4,a5
800032f0:	fd842783          	lw	a5,-40(s0)
800032f4:	00e787b3          	add	a5,a5,a4
800032f8:	02d00713          	li	a4,45
800032fc:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:193
    }
    buffer[i] = '\0'; // null terminate string
80003300:	fe842783          	lw	a5,-24(s0)
80003304:	fd842703          	lw	a4,-40(s0)
80003308:	00f707b3          	add	a5,a4,a5
8000330c:	00078023          	sb	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:195
    // reverse the string and return it
    return reverse(buffer, 0, i - 1);
80003310:	fe842783          	lw	a5,-24(s0)
80003314:	fff78793          	addi	a5,a5,-1
80003318:	00078613          	mv	a2,a5
8000331c:	00000593          	li	a1,0
80003320:	fd842503          	lw	a0,-40(s0)
80003324:	dfdff0ef          	jal	ra,80003120 <reverse>
80003328:	00050793          	mv	a5,a0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:196
}
8000332c:	00078513          	mv	a0,a5
80003330:	02c12083          	lw	ra,44(sp)
80003334:	02812403          	lw	s0,40(sp)
80003338:	03010113          	addi	sp,sp,48
8000333c:	00008067          	ret

80003340 <makeAddress>:
makeAddress():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:210
    return;
}

////////////////////////////////////////////////////////////
// Returns the PE address for a giver pair of coords
unsigned int makeAddress(unsigned int x, unsigned int y) {
80003340:	fd010113          	addi	sp,sp,-48
80003344:	02812623          	sw	s0,44(sp)
80003348:	03010413          	addi	s0,sp,48
8000334c:	fca42e23          	sw	a0,-36(s0)
80003350:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:211
    unsigned int address = 0x00000000;
80003354:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:212
    return (address | (x << 8) | y);
80003358:	fdc42783          	lw	a5,-36(s0)
8000335c:	00879713          	slli	a4,a5,0x8
80003360:	fec42783          	lw	a5,-20(s0)
80003364:	00f76733          	or	a4,a4,a5
80003368:	fd842783          	lw	a5,-40(s0)
8000336c:	00f767b3          	or	a5,a4,a5
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:213
}
80003370:	00078513          	mv	a0,a5
80003374:	02c12403          	lw	s0,44(sp)
80003378:	03010113          	addi	sp,sp,48
8000337c:	00008067          	ret

80003380 <API_PushSendQueue>:
API_PushSendQueue():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:217

////////////////////////////////////////////////////////////
// Pushes one slot to the sending queue
void API_PushSendQueue(unsigned int type, unsigned int slot){
80003380:	fe010113          	addi	sp,sp,-32
80003384:	00112e23          	sw	ra,28(sp)
80003388:	00812c23          	sw	s0,24(sp)
8000338c:	02010413          	addi	s0,sp,32
80003390:	fea42623          	sw	a0,-20(s0)
80003394:	feb42423          	sw	a1,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:218
    SendingQueue[SendingQueue_front] = type | slot;
80003398:	800217b7          	lui	a5,0x80021
8000339c:	bfc7a683          	lw	a3,-1028(a5) # 80020bfc <__stack_top+0xfffdebac>
800033a0:	fec42703          	lw	a4,-20(s0)
800033a4:	fe842783          	lw	a5,-24(s0)
800033a8:	00f76733          	or	a4,a4,a5
800033ac:	800217b7          	lui	a5,0x80021
800033b0:	00269693          	slli	a3,a3,0x2
800033b4:	bc478793          	addi	a5,a5,-1084 # 80020bc4 <__stack_top+0xfffdeb74>
800033b8:	00f687b3          	add	a5,a3,a5
800033bc:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:219
    printsv("SendingQueue_front: ", SendingQueue_front);
800033c0:	800217b7          	lui	a5,0x80021
800033c4:	bfc7a783          	lw	a5,-1028(a5) # 80020bfc <__stack_top+0xfffdebac>
800033c8:	00078593          	mv	a1,a5
800033cc:	800077b7          	lui	a5,0x80007
800033d0:	16c78513          	addi	a0,a5,364 # 8000716c <__stack_top+0xfffc511c>
800033d4:	b51ff0ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:220
    if(SendingQueue_front == (PIPE_SIZE*2)-1){
800033d8:	800217b7          	lui	a5,0x80021
800033dc:	bfc7a703          	lw	a4,-1028(a5) # 80020bfc <__stack_top+0xfffdebac>
800033e0:	00700793          	li	a5,7
800033e4:	00f71863          	bne	a4,a5,800033f4 <API_PushSendQueue+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:221
        SendingQueue_front = 0;
800033e8:	800217b7          	lui	a5,0x80021
800033ec:	be07ae23          	sw	zero,-1028(a5) # 80020bfc <__stack_top+0xfffdebac>
800033f0:	0180006f          	j	80003408 <API_PushSendQueue+0x88>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:223
    } else {
        SendingQueue_front++;
800033f4:	800217b7          	lui	a5,0x80021
800033f8:	bfc7a783          	lw	a5,-1028(a5) # 80020bfc <__stack_top+0xfffdebac>
800033fc:	00178713          	addi	a4,a5,1
80003400:	800217b7          	lui	a5,0x80021
80003404:	bee7ae23          	sw	a4,-1028(a5) # 80020bfc <__stack_top+0xfffdebac>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:225
    }
    API_Try2Send();
80003408:	0a4000ef          	jal	ra,800034ac <API_Try2Send>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:226
    return;
8000340c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:227
}
80003410:	01c12083          	lw	ra,28(sp)
80003414:	01812403          	lw	s0,24(sp)
80003418:	02010113          	addi	sp,sp,32
8000341c:	00008067          	ret

80003420 <API_PopSendQueue>:
API_PopSendQueue():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:231

////////////////////////////////////////////////////////////
// Pushes one slot to the sending queue
unsigned int API_PopSendQueue(){
80003420:	fe010113          	addi	sp,sp,-32
80003424:	00812e23          	sw	s0,28(sp)
80003428:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:233
    unsigned int element;
    if (SendingQueue_front == SendingQueue_tail){
8000342c:	800217b7          	lui	a5,0x80021
80003430:	bfc7a703          	lw	a4,-1028(a5) # 80020bfc <__stack_top+0xfffdebac>
80003434:	800217b7          	lui	a5,0x80021
80003438:	be47a783          	lw	a5,-1052(a5) # 80020be4 <__stack_top+0xfffdeb94>
8000343c:	00f71663          	bne	a4,a5,80003448 <API_PopSendQueue+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:234
        return EMPTY;
80003440:	303007b7          	lui	a5,0x30300
80003444:	0580006f          	j	8000349c <API_PopSendQueue+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:236
    } else {
        element = SendingQueue[SendingQueue_tail];
80003448:	800217b7          	lui	a5,0x80021
8000344c:	be47a703          	lw	a4,-1052(a5) # 80020be4 <__stack_top+0xfffdeb94>
80003450:	800217b7          	lui	a5,0x80021
80003454:	00271713          	slli	a4,a4,0x2
80003458:	bc478793          	addi	a5,a5,-1084 # 80020bc4 <__stack_top+0xfffdeb74>
8000345c:	00f707b3          	add	a5,a4,a5
80003460:	0007a783          	lw	a5,0(a5)
80003464:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:237
        if (SendingQueue_tail == (PIPE_SIZE*2)-1){
80003468:	800217b7          	lui	a5,0x80021
8000346c:	be47a703          	lw	a4,-1052(a5) # 80020be4 <__stack_top+0xfffdeb94>
80003470:	00700793          	li	a5,7
80003474:	00f71863          	bne	a4,a5,80003484 <API_PopSendQueue+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:238
            SendingQueue_tail = 0;
80003478:	800217b7          	lui	a5,0x80021
8000347c:	be07a223          	sw	zero,-1052(a5) # 80020be4 <__stack_top+0xfffdeb94>
80003480:	0180006f          	j	80003498 <API_PopSendQueue+0x78>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:240
        } else {
            SendingQueue_tail++;
80003484:	800217b7          	lui	a5,0x80021
80003488:	be47a783          	lw	a5,-1052(a5) # 80020be4 <__stack_top+0xfffdeb94>
8000348c:	00178713          	addi	a4,a5,1
80003490:	800217b7          	lui	a5,0x80021
80003494:	bee7a223          	sw	a4,-1052(a5) # 80020be4 <__stack_top+0xfffdeb94>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:242
        }
        return element;
80003498:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:244
    }
}
8000349c:	00078513          	mv	a0,a5
800034a0:	01c12403          	lw	s0,28(sp)
800034a4:	02010113          	addi	sp,sp,32
800034a8:	00008067          	ret

800034ac <API_Try2Send>:
API_Try2Send():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:248

////////////////////////////////////////////////////////////
// Try to send some packet! 
void API_Try2Send(){
800034ac:	fe010113          	addi	sp,sp,-32
800034b0:	00112e23          	sw	ra,28(sp)
800034b4:	00812c23          	sw	s0,24(sp)
800034b8:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:253
    unsigned int toSend;
    // Try to send the packet to NI if it's available
    // Checks if the NI is available to transmitt something
    //vPortEnterCritical();
    if (HW_get_32bit_reg(NI_TX) == NI_STATUS_OFF){
800034bc:	500007b7          	lui	a5,0x50000
800034c0:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
800034c4:	ad9fd0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800034c8:	00050713          	mv	a4,a0
800034cc:	0ff00793          	li	a5,255
800034d0:	0ef71663          	bne	a4,a5,800035bc <API_Try2Send+0x110>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:254
        toSend = API_PopSendQueue();
800034d4:	f4dff0ef          	jal	ra,80003420 <API_PopSendQueue>
800034d8:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:255
        if (toSend != EMPTY){
800034dc:	fec42703          	lw	a4,-20(s0)
800034e0:	303007b7          	lui	a5,0x30300
800034e4:	0af70a63          	beq	a4,a5,80003598 <API_Try2Send+0xec>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:256
            SendingSlot = toSend;
800034e8:	800217b7          	lui	a5,0x80021
800034ec:	fec42703          	lw	a4,-20(s0)
800034f0:	a8e7ac23          	sw	a4,-1384(a5) # 80020a98 <__stack_top+0xfffdea48>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:257
            if((toSend & 0xFFFF0000) ==  SERVICE){
800034f4:	fec42703          	lw	a4,-20(s0)
800034f8:	ffff07b7          	lui	a5,0xffff0
800034fc:	00f77733          	and	a4,a4,a5
80003500:	101007b7          	lui	a5,0x10100
80003504:	04f71063          	bne	a4,a5,80003544 <API_Try2Send+0x98>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:258
                SendRaw((unsigned int)&ServicePipe[toSend & 0x0000FFFF].header);
80003508:	fec42703          	lw	a4,-20(s0)
8000350c:	000107b7          	lui	a5,0x10
80003510:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80003514:	00f77733          	and	a4,a4,a5
80003518:	00070793          	mv	a5,a4
8000351c:	00479793          	slli	a5,a5,0x4
80003520:	40e787b3          	sub	a5,a5,a4
80003524:	00279793          	slli	a5,a5,0x2
80003528:	80021737          	lui	a4,0x80021
8000352c:	a9c70713          	addi	a4,a4,-1380 # 80020a9c <__stack_top+0xfffdea4c>
80003530:	00e787b3          	add	a5,a5,a4
80003534:	00878793          	addi	a5,a5,8
80003538:	00078513          	mv	a0,a5
8000353c:	ae5ff0ef          	jal	ra,80003020 <SendRaw>
80003540:	0480006f          	j	80003588 <API_Try2Send+0xdc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:260
            }
            else if((toSend & 0xFFFF0000) ==  MESSAGE){
80003544:	fec42703          	lw	a4,-20(s0)
80003548:	ffff07b7          	lui	a5,0xffff0
8000354c:	00f77733          	and	a4,a4,a5
80003550:	202007b7          	lui	a5,0x20200
80003554:	02f71a63          	bne	a4,a5,80003588 <API_Try2Send+0xdc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:261
                SendRaw((unsigned int)&MessagePipe[toSend & 0x0000FFFF].header);
80003558:	fec42703          	lw	a4,-20(s0)
8000355c:	000107b7          	lui	a5,0x10
80003560:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80003564:	00f77733          	and	a4,a4,a5
80003568:	24400793          	li	a5,580
8000356c:	02f70733          	mul	a4,a4,a5
80003570:	800217b7          	lui	a5,0x80021
80003574:	c0078793          	addi	a5,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
80003578:	00f707b3          	add	a5,a4,a5
8000357c:	00c78793          	addi	a5,a5,12
80003580:	00078513          	mv	a0,a5
80003584:	a9dff0ef          	jal	ra,80003020 <SendRaw>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:263
            }
            prints("API_Try2Send success!\n");
80003588:	800077b7          	lui	a5,0x80007
8000358c:	18478513          	addi	a0,a5,388 # 80007184 <__stack_top+0xfffc5134>
80003590:	8e9ff0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:272
        }
    } else {
        prints("API_Try2Send failed - NI_TX occupied!\n");
    }
    //vPortExitCritical();
    return;
80003594:	0380006f          	j	800035cc <API_Try2Send+0x120>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:265
            HW_set_32bit_reg(NI_TX, RESET);
80003598:	000097b7          	lui	a5,0x9
8000359c:	88878593          	addi	a1,a5,-1912 # 8888 <HEAP_SIZE-0x7778>
800035a0:	500007b7          	lui	a5,0x50000
800035a4:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
800035a8:	9edfd0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:266
            prints("API_Try2Send failed - empty SendQueue!\n");
800035ac:	800077b7          	lui	a5,0x80007
800035b0:	19c78513          	addi	a0,a5,412 # 8000719c <__stack_top+0xfffc514c>
800035b4:	8c5ff0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:272
    return;
800035b8:	0140006f          	j	800035cc <API_Try2Send+0x120>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:269
        prints("API_Try2Send failed - NI_TX occupied!\n");
800035bc:	800077b7          	lui	a5,0x80007
800035c0:	1c478513          	addi	a0,a5,452 # 800071c4 <__stack_top+0xfffc5174>
800035c4:	8b5ff0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:272
    return;
800035c8:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:273
}
800035cc:	01c12083          	lw	ra,28(sp)
800035d0:	01812403          	lw	s0,24(sp)
800035d4:	02010113          	addi	sp,sp,32
800035d8:	00008067          	ret

800035dc <API_AckTaskAllocation>:
API_AckTaskAllocation():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:275

void API_AckTaskAllocation(unsigned int task_id, unsigned int app_id){
800035dc:	fd010113          	addi	sp,sp,-48
800035e0:	02112623          	sw	ra,44(sp)
800035e4:	02812423          	sw	s0,40(sp)
800035e8:	03010413          	addi	s0,sp,48
800035ec:	fca42e23          	sw	a0,-36(s0)
800035f0:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:278
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
800035f4:	340030ef          	jal	ra,80006934 <API_GetServiceSlot>
800035f8:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:279
        if(mySlot == PIPE_FULL){
800035fc:	fec42703          	lw	a4,-20(s0)
80003600:	fdfe07b7          	lui	a5,0xfdfe0
80003604:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9ddad>
80003608:	00f71463          	bne	a4,a5,80003610 <API_AckTaskAllocation+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:281
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
8000360c:	221000ef          	jal	ra,8000402c <API_NI_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:283
        }
    }while(mySlot == PIPE_FULL);
80003610:	fec42703          	lw	a4,-20(s0)
80003614:	fdfe07b7          	lui	a5,0xfdfe0
80003618:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9ddad>
8000361c:	fcf70ce3          	beq	a4,a5,800035f4 <API_AckTaskAllocation+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:285

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80003620:	800217b7          	lui	a5,0x80021
80003624:	fec42703          	lw	a4,-20(s0)
80003628:	a9c78693          	addi	a3,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
8000362c:	00070793          	mv	a5,a4
80003630:	00479793          	slli	a5,a5,0x4
80003634:	40e787b3          	sub	a5,a5,a4
80003638:	00279793          	slli	a5,a5,0x2
8000363c:	00f687b3          	add	a5,a3,a5
80003640:	feff0737          	lui	a4,0xfeff0
80003644:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efadeae>
80003648:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:287

    ServicePipe[mySlot].header.header           = makeAddress(0, 0);
8000364c:	00000593          	li	a1,0
80003650:	00000513          	li	a0,0
80003654:	cedff0ef          	jal	ra,80003340 <makeAddress>
80003658:	00050613          	mv	a2,a0
8000365c:	800217b7          	lui	a5,0x80021
80003660:	fec42703          	lw	a4,-20(s0)
80003664:	a9c78693          	addi	a3,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
80003668:	00070793          	mv	a5,a4
8000366c:	00479793          	slli	a5,a5,0x4
80003670:	40e787b3          	sub	a5,a5,a4
80003674:	00279793          	slli	a5,a5,0x2
80003678:	00f687b3          	add	a5,a3,a5
8000367c:	00c7a423          	sw	a2,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:288
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80003680:	800217b7          	lui	a5,0x80021
80003684:	fec42703          	lw	a4,-20(s0)
80003688:	a9c78693          	addi	a3,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
8000368c:	00070793          	mv	a5,a4
80003690:	00479793          	slli	a5,a5,0x4
80003694:	40e787b3          	sub	a5,a5,a4
80003698:	00279793          	slli	a5,a5,0x2
8000369c:	00f687b3          	add	a5,a3,a5
800036a0:	00b00713          	li	a4,11
800036a4:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:289
    ServicePipe[mySlot].header.service          = TASK_ALLOCATION_SUCCESS;
800036a8:	800217b7          	lui	a5,0x80021
800036ac:	fec42703          	lw	a4,-20(s0)
800036b0:	a9c78693          	addi	a3,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
800036b4:	00070793          	mv	a5,a4
800036b8:	00479793          	slli	a5,a5,0x4
800036bc:	40e787b3          	sub	a5,a5,a4
800036c0:	00279793          	slli	a5,a5,0x2
800036c4:	00f687b3          	add	a5,a3,a5
800036c8:	03500713          	li	a4,53
800036cc:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:290
    ServicePipe[mySlot].header.task_id          = task_id;
800036d0:	800217b7          	lui	a5,0x80021
800036d4:	fec42703          	lw	a4,-20(s0)
800036d8:	a9c78693          	addi	a3,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
800036dc:	00070793          	mv	a5,a4
800036e0:	00479793          	slli	a5,a5,0x4
800036e4:	40e787b3          	sub	a5,a5,a4
800036e8:	00279793          	slli	a5,a5,0x2
800036ec:	00f687b3          	add	a5,a3,a5
800036f0:	fdc42703          	lw	a4,-36(s0)
800036f4:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:291
    ServicePipe[mySlot].header.task_app_id      = app_id;
800036f8:	800217b7          	lui	a5,0x80021
800036fc:	fec42703          	lw	a4,-20(s0)
80003700:	a9c78693          	addi	a3,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
80003704:	00070793          	mv	a5,a4
80003708:	00479793          	slli	a5,a5,0x4
8000370c:	40e787b3          	sub	a5,a5,a4
80003710:	00279793          	slli	a5,a5,0x2
80003714:	00f687b3          	add	a5,a3,a5
80003718:	fd842703          	lw	a4,-40(s0)
8000371c:	02e7a223          	sw	a4,36(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:293

    API_PushSendQueue(SERVICE, mySlot);
80003720:	fec42583          	lw	a1,-20(s0)
80003724:	10100537          	lui	a0,0x10100
80003728:	c59ff0ef          	jal	ra,80003380 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:294
    return;    
8000372c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:295
}
80003730:	02c12083          	lw	ra,44(sp)
80003734:	02812403          	lw	s0,40(sp)
80003738:	03010113          	addi	sp,sp,48
8000373c:	00008067          	ret

80003740 <API_SendMessage>:
API_SendMessage():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:297

void API_SendMessage(unsigned int addr, unsigned int taskID){
80003740:	fd010113          	addi	sp,sp,-48
80003744:	02112623          	sw	ra,44(sp)
80003748:	02812423          	sw	s0,40(sp)
8000374c:	03010413          	addi	s0,sp,48
80003750:	fca42e23          	sw	a0,-36(s0)
80003754:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:303
    unsigned int mySlot;
    unsigned int taskSlot;
    unsigned int i;
    Message *theMessage;
    do{
        mySlot = API_GetMessageSlot();
80003758:	090030ef          	jal	ra,800067e8 <API_GetMessageSlot>
8000375c:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:304
        if(mySlot == PIPE_FULL){
80003760:	fe842703          	lw	a4,-24(s0)
80003764:	fdfe07b7          	lui	a5,0xfdfe0
80003768:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9ddad>
8000376c:	00f71463          	bne	a4,a5,80003774 <API_SendMessage+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:306
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80003770:	0bd000ef          	jal	ra,8000402c <API_NI_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:308
        }
    }while(mySlot == PIPE_FULL);
80003774:	fe842703          	lw	a4,-24(s0)
80003778:	fdfe07b7          	lui	a5,0xfdfe0
8000377c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9ddad>
80003780:	fcf70ce3          	beq	a4,a5,80003758 <API_SendMessage+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:310
    
    theMessage = addr;
80003784:	fdc42783          	lw	a5,-36(s0)
80003788:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:312

    taskSlot = API_GetCurrentTaskSlot();
8000378c:	798020ef          	jal	ra,80005f24 <API_GetCurrentTaskSlot>
80003790:	fea42023          	sw	a0,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:313
    printsvsv("Adding a msg to task ", taskID, " in the PIPE slot ", mySlot);
80003794:	fd842703          	lw	a4,-40(s0)
80003798:	fe842783          	lw	a5,-24(s0)
8000379c:	00078693          	mv	a3,a5
800037a0:	800077b7          	lui	a5,0x80007
800037a4:	1ec78613          	addi	a2,a5,492 # 800071ec <__stack_top+0xfffc519c>
800037a8:	00070593          	mv	a1,a4
800037ac:	800077b7          	lui	a5,0x80007
800037b0:	20078513          	addi	a0,a5,512 # 80007200 <__stack_top+0xfffc51b0>
800037b4:	fb8ff0ef          	jal	ra,80002f6c <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:314
    MessagePipe[mySlot].holder = taskSlot;
800037b8:	800217b7          	lui	a5,0x80021
800037bc:	fe842683          	lw	a3,-24(s0)
800037c0:	c0078713          	addi	a4,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
800037c4:	24400793          	li	a5,580
800037c8:	02f687b3          	mul	a5,a3,a5
800037cc:	00f707b3          	add	a5,a4,a5
800037d0:	fe042703          	lw	a4,-32(s0)
800037d4:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:316

    MessagePipe[mySlot].header.header           = TaskList[taskSlot].TasksMap[taskID];
800037d8:	800226b7          	lui	a3,0x80022
800037dc:	fe042703          	lw	a4,-32(s0)
800037e0:	00070793          	mv	a5,a4
800037e4:	00579793          	slli	a5,a5,0x5
800037e8:	00e787b3          	add	a5,a5,a4
800037ec:	fd842703          	lw	a4,-40(s0)
800037f0:	00e787b3          	add	a5,a5,a4
800037f4:	01478793          	addi	a5,a5,20
800037f8:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
800037fc:	00279793          	slli	a5,a5,0x2
80003800:	00f707b3          	add	a5,a4,a5
80003804:	00c7a703          	lw	a4,12(a5)
80003808:	800217b7          	lui	a5,0x80021
8000380c:	fe842603          	lw	a2,-24(s0)
80003810:	c0078693          	addi	a3,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
80003814:	24400793          	li	a5,580
80003818:	02f607b3          	mul	a5,a2,a5
8000381c:	00f687b3          	add	a5,a3,a5
80003820:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:317
    MessagePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE + theMessage->length + 1;
80003824:	fe442783          	lw	a5,-28(s0)
80003828:	0007a783          	lw	a5,0(a5)
8000382c:	00c78713          	addi	a4,a5,12
80003830:	800217b7          	lui	a5,0x80021
80003834:	fe842603          	lw	a2,-24(s0)
80003838:	c0078693          	addi	a3,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
8000383c:	24400793          	li	a5,580
80003840:	02f607b3          	mul	a5,a2,a5
80003844:	00f687b3          	add	a5,a3,a5
80003848:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:318
    MessagePipe[mySlot].header.service          = MESSAGE_DELIVERY;
8000384c:	800217b7          	lui	a5,0x80021
80003850:	fe842683          	lw	a3,-24(s0)
80003854:	c0078713          	addi	a4,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
80003858:	24400793          	li	a5,580
8000385c:	02f687b3          	mul	a5,a3,a5
80003860:	00f707b3          	add	a5,a4,a5
80003864:	02000713          	li	a4,32
80003868:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:319
    MessagePipe[mySlot].header.application_id   = TaskList[taskSlot].AppID;
8000386c:	800227b7          	lui	a5,0x80022
80003870:	fe042703          	lw	a4,-32(s0)
80003874:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80003878:	00070793          	mv	a5,a4
8000387c:	00579793          	slli	a5,a5,0x5
80003880:	00e787b3          	add	a5,a5,a4
80003884:	00279793          	slli	a5,a5,0x2
80003888:	00f687b3          	add	a5,a3,a5
8000388c:	0147a703          	lw	a4,20(a5)
80003890:	800217b7          	lui	a5,0x80021
80003894:	fe842603          	lw	a2,-24(s0)
80003898:	c0078693          	addi	a3,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
8000389c:	24400793          	li	a5,580
800038a0:	02f607b3          	mul	a5,a2,a5
800038a4:	00f687b3          	add	a5,a3,a5
800038a8:	00e7ac23          	sw	a4,24(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:320
    MessagePipe[mySlot].header.producer_task    = TaskList[taskSlot].TaskID;
800038ac:	800226b7          	lui	a3,0x80022
800038b0:	fe042703          	lw	a4,-32(s0)
800038b4:	00070793          	mv	a5,a4
800038b8:	00579793          	slli	a5,a5,0x5
800038bc:	00e787b3          	add	a5,a5,a4
800038c0:	00279793          	slli	a5,a5,0x2
800038c4:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
800038c8:	00e787b3          	add	a5,a5,a4
800038cc:	0107a703          	lw	a4,16(a5)
800038d0:	800217b7          	lui	a5,0x80021
800038d4:	fe842603          	lw	a2,-24(s0)
800038d8:	c0078693          	addi	a3,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
800038dc:	24400793          	li	a5,580
800038e0:	02f607b3          	mul	a5,a2,a5
800038e4:	00f687b3          	add	a5,a3,a5
800038e8:	00e7ae23          	sw	a4,28(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:321
    MessagePipe[mySlot].header.destination_task = taskID;
800038ec:	800217b7          	lui	a5,0x80021
800038f0:	fe842683          	lw	a3,-24(s0)
800038f4:	c0078713          	addi	a4,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
800038f8:	24400793          	li	a5,580
800038fc:	02f687b3          	mul	a5,a3,a5
80003900:	00f707b3          	add	a5,a4,a5
80003904:	fd842703          	lw	a4,-40(s0)
80003908:	02e7a023          	sw	a4,32(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:322
    MessagePipe[mySlot].msg.length              = theMessage->length;
8000390c:	fe442783          	lw	a5,-28(s0)
80003910:	0007a703          	lw	a4,0(a5)
80003914:	800217b7          	lui	a5,0x80021
80003918:	fe842603          	lw	a2,-24(s0)
8000391c:	24400693          	li	a3,580
80003920:	02d606b3          	mul	a3,a2,a3
80003924:	c0078793          	addi	a5,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
80003928:	00f687b3          	add	a5,a3,a5
8000392c:	04e7a023          	sw	a4,64(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:323
    for (i = 0; i < theMessage->length; i++){
80003930:	fe042623          	sw	zero,-20(s0)
80003934:	05c0006f          	j	80003990 <API_SendMessage+0x250>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:324 (discriminator 3)
        MessagePipe[mySlot].msg.msg[i]          = theMessage->msg[i];
80003938:	fe442703          	lw	a4,-28(s0)
8000393c:	fec42783          	lw	a5,-20(s0)
80003940:	00279793          	slli	a5,a5,0x2
80003944:	00f707b3          	add	a5,a4,a5
80003948:	0047a683          	lw	a3,4(a5)
8000394c:	80021637          	lui	a2,0x80021
80003950:	fe842703          	lw	a4,-24(s0)
80003954:	00070793          	mv	a5,a4
80003958:	00379793          	slli	a5,a5,0x3
8000395c:	00e787b3          	add	a5,a5,a4
80003960:	00479793          	slli	a5,a5,0x4
80003964:	00e787b3          	add	a5,a5,a4
80003968:	fec42703          	lw	a4,-20(s0)
8000396c:	00e787b3          	add	a5,a5,a4
80003970:	01078793          	addi	a5,a5,16
80003974:	c0060713          	addi	a4,a2,-1024 # 80020c00 <__stack_top+0xfffdebb0>
80003978:	00279793          	slli	a5,a5,0x2
8000397c:	00f707b3          	add	a5,a4,a5
80003980:	00d7a223          	sw	a3,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:323 (discriminator 3)
    for (i = 0; i < theMessage->length; i++){
80003984:	fec42783          	lw	a5,-20(s0)
80003988:	00178793          	addi	a5,a5,1
8000398c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:323 (discriminator 1)
80003990:	fe442783          	lw	a5,-28(s0)
80003994:	0007a783          	lw	a5,0(a5)
80003998:	fec42703          	lw	a4,-20(s0)
8000399c:	f8f76ee3          	bltu	a4,a5,80003938 <API_SendMessage+0x1f8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:327
    }
    
    if (TaskList[taskSlot].PendingReq[taskID] == TRUE){
800039a0:	800226b7          	lui	a3,0x80022
800039a4:	fe042703          	lw	a4,-32(s0)
800039a8:	00070793          	mv	a5,a4
800039ac:	00579793          	slli	a5,a5,0x5
800039b0:	00e787b3          	add	a5,a5,a4
800039b4:	fd842703          	lw	a4,-40(s0)
800039b8:	00e787b3          	add	a5,a5,a4
800039bc:	00c78793          	addi	a5,a5,12
800039c0:	00279713          	slli	a4,a5,0x2
800039c4:	cb868793          	addi	a5,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
800039c8:	00f707b3          	add	a5,a4,a5
800039cc:	0007a703          	lw	a4,0(a5)
800039d0:	00100793          	li	a5,1
800039d4:	04f71863          	bne	a4,a5,80003a24 <API_SendMessage+0x2e4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:328
        prints(">>>>>Achei aqui no pending!\n");
800039d8:	800077b7          	lui	a5,0x80007
800039dc:	21878513          	addi	a0,a5,536 # 80007218 <__stack_top+0xfffc51c8>
800039e0:	c98ff0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:329
        API_PushSendQueue(MESSAGE, mySlot);
800039e4:	fe842583          	lw	a1,-24(s0)
800039e8:	20200537          	lui	a0,0x20200
800039ec:	995ff0ef          	jal	ra,80003380 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:330
        TaskList[taskSlot].PendingReq[taskID] = FALSE;
800039f0:	800226b7          	lui	a3,0x80022
800039f4:	fe042703          	lw	a4,-32(s0)
800039f8:	00070793          	mv	a5,a4
800039fc:	00579793          	slli	a5,a5,0x5
80003a00:	00e787b3          	add	a5,a5,a4
80003a04:	fd842703          	lw	a4,-40(s0)
80003a08:	00e787b3          	add	a5,a5,a4
80003a0c:	00c78793          	addi	a5,a5,12
80003a10:	00279713          	slli	a4,a5,0x2
80003a14:	cb868793          	addi	a5,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80003a18:	00f707b3          	add	a5,a4,a5
80003a1c:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:332
    }
    return;
80003a20:	00000013          	nop
80003a24:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:333
}
80003a28:	02c12083          	lw	ra,44(sp)
80003a2c:	02812403          	lw	s0,40(sp)
80003a30:	03010113          	addi	sp,sp,48
80003a34:	00008067          	ret

80003a38 <API_SendFinishTask>:
API_SendFinishTask():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:335

void API_SendFinishTask(unsigned int task_id, unsigned int app_id){
80003a38:	fd010113          	addi	sp,sp,-48
80003a3c:	02112623          	sw	ra,44(sp)
80003a40:	02812423          	sw	s0,40(sp)
80003a44:	03010413          	addi	s0,sp,48
80003a48:	fca42e23          	sw	a0,-36(s0)
80003a4c:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:338
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80003a50:	6e5020ef          	jal	ra,80006934 <API_GetServiceSlot>
80003a54:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:339
        if(mySlot == PIPE_FULL){
80003a58:	fec42703          	lw	a4,-20(s0)
80003a5c:	fdfe07b7          	lui	a5,0xfdfe0
80003a60:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9ddad>
80003a64:	00f71463          	bne	a4,a5,80003a6c <API_SendFinishTask+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:341
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80003a68:	5c4000ef          	jal	ra,8000402c <API_NI_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:343
        }
    }while(mySlot == PIPE_FULL);
80003a6c:	fec42703          	lw	a4,-20(s0)
80003a70:	fdfe07b7          	lui	a5,0xfdfe0
80003a74:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9ddad>
80003a78:	fcf70ce3          	beq	a4,a5,80003a50 <API_SendFinishTask+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:345

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80003a7c:	800217b7          	lui	a5,0x80021
80003a80:	fec42703          	lw	a4,-20(s0)
80003a84:	a9c78693          	addi	a3,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
80003a88:	00070793          	mv	a5,a4
80003a8c:	00479793          	slli	a5,a5,0x4
80003a90:	40e787b3          	sub	a5,a5,a4
80003a94:	00279793          	slli	a5,a5,0x2
80003a98:	00f687b3          	add	a5,a3,a5
80003a9c:	feff0737          	lui	a4,0xfeff0
80003aa0:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efadeae>
80003aa4:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:347

    ServicePipe[mySlot].header.header           = makeAddress(0, 0);
80003aa8:	00000593          	li	a1,0
80003aac:	00000513          	li	a0,0
80003ab0:	891ff0ef          	jal	ra,80003340 <makeAddress>
80003ab4:	00050613          	mv	a2,a0
80003ab8:	800217b7          	lui	a5,0x80021
80003abc:	fec42703          	lw	a4,-20(s0)
80003ac0:	a9c78693          	addi	a3,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
80003ac4:	00070793          	mv	a5,a4
80003ac8:	00479793          	slli	a5,a5,0x4
80003acc:	40e787b3          	sub	a5,a5,a4
80003ad0:	00279793          	slli	a5,a5,0x2
80003ad4:	00f687b3          	add	a5,a3,a5
80003ad8:	00c7a423          	sw	a2,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:348
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80003adc:	800217b7          	lui	a5,0x80021
80003ae0:	fec42703          	lw	a4,-20(s0)
80003ae4:	a9c78693          	addi	a3,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
80003ae8:	00070793          	mv	a5,a4
80003aec:	00479793          	slli	a5,a5,0x4
80003af0:	40e787b3          	sub	a5,a5,a4
80003af4:	00279793          	slli	a5,a5,0x2
80003af8:	00f687b3          	add	a5,a3,a5
80003afc:	00b00713          	li	a4,11
80003b00:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:349
    ServicePipe[mySlot].header.service          = TASK_FINISH;
80003b04:	800217b7          	lui	a5,0x80021
80003b08:	fec42703          	lw	a4,-20(s0)
80003b0c:	a9c78693          	addi	a3,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
80003b10:	00070793          	mv	a5,a4
80003b14:	00479793          	slli	a5,a5,0x4
80003b18:	40e787b3          	sub	a5,a5,a4
80003b1c:	00279793          	slli	a5,a5,0x2
80003b20:	00f687b3          	add	a5,a3,a5
80003b24:	50000713          	li	a4,1280
80003b28:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:350
    ServicePipe[mySlot].header.task_id          = task_id;
80003b2c:	800217b7          	lui	a5,0x80021
80003b30:	fec42703          	lw	a4,-20(s0)
80003b34:	a9c78693          	addi	a3,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
80003b38:	00070793          	mv	a5,a4
80003b3c:	00479793          	slli	a5,a5,0x4
80003b40:	40e787b3          	sub	a5,a5,a4
80003b44:	00279793          	slli	a5,a5,0x2
80003b48:	00f687b3          	add	a5,a3,a5
80003b4c:	fdc42703          	lw	a4,-36(s0)
80003b50:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:351
    ServicePipe[mySlot].header.task_app_id      = app_id;
80003b54:	800217b7          	lui	a5,0x80021
80003b58:	fec42703          	lw	a4,-20(s0)
80003b5c:	a9c78693          	addi	a3,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
80003b60:	00070793          	mv	a5,a4
80003b64:	00479793          	slli	a5,a5,0x4
80003b68:	40e787b3          	sub	a5,a5,a4
80003b6c:	00279793          	slli	a5,a5,0x2
80003b70:	00f687b3          	add	a5,a3,a5
80003b74:	fd842703          	lw	a4,-40(s0)
80003b78:	02e7a223          	sw	a4,36(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:352
    ServicePipe[mySlot].header.task_dest_addr   = ProcessorAddr;
80003b7c:	800227b7          	lui	a5,0x80022
80003b80:	0487a683          	lw	a3,72(a5) # 80022048 <__stack_top+0xfffdfff8>
80003b84:	800217b7          	lui	a5,0x80021
80003b88:	fec42703          	lw	a4,-20(s0)
80003b8c:	a9c78613          	addi	a2,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
80003b90:	00070793          	mv	a5,a4
80003b94:	00479793          	slli	a5,a5,0x4
80003b98:	40e787b3          	sub	a5,a5,a4
80003b9c:	00279793          	slli	a5,a5,0x2
80003ba0:	00f607b3          	add	a5,a2,a5
80003ba4:	02d7ac23          	sw	a3,56(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:353
    API_PushSendQueue(SERVICE, mySlot);
80003ba8:	fec42583          	lw	a1,-20(s0)
80003bac:	10100537          	lui	a0,0x10100
80003bb0:	fd0ff0ef          	jal	ra,80003380 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:354
    return;    
80003bb4:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:355
}
80003bb8:	02c12083          	lw	ra,44(sp)
80003bbc:	02812403          	lw	s0,40(sp)
80003bc0:	03010113          	addi	sp,sp,48
80003bc4:	00008067          	ret

80003bc8 <API_SendMessageReq>:
API_SendMessageReq():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:357

void API_SendMessageReq(unsigned int addr, unsigned int taskID){
80003bc8:	fd010113          	addi	sp,sp,-48
80003bcc:	02112623          	sw	ra,44(sp)
80003bd0:	02812423          	sw	s0,40(sp)
80003bd4:	03010413          	addi	s0,sp,48
80003bd8:	fca42e23          	sw	a0,-36(s0)
80003bdc:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:362
    unsigned int taskSlot;
    unsigned int mySlot;

    // Update task info
    taskSlot = API_GetCurrentTaskSlot();
80003be0:	344020ef          	jal	ra,80005f24 <API_GetCurrentTaskSlot>
80003be4:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:363
    TaskList[taskSlot].waitingMsg = TRUE;
80003be8:	800227b7          	lui	a5,0x80022
80003bec:	fec42703          	lw	a4,-20(s0)
80003bf0:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80003bf4:	00070793          	mv	a5,a4
80003bf8:	00579793          	slli	a5,a5,0x5
80003bfc:	00e787b3          	add	a5,a5,a4
80003c00:	00279793          	slli	a5,a5,0x2
80003c04:	00f687b3          	add	a5,a3,a5
80003c08:	00100713          	li	a4,1
80003c0c:	00e7ae23          	sw	a4,28(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:364
    TaskList[taskSlot].MsgToReceive = addr;
80003c10:	800226b7          	lui	a3,0x80022
80003c14:	fec42703          	lw	a4,-20(s0)
80003c18:	00070793          	mv	a5,a4
80003c1c:	00579793          	slli	a5,a5,0x5
80003c20:	00e787b3          	add	a5,a5,a4
80003c24:	00279793          	slli	a5,a5,0x2
80003c28:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80003c2c:	00e787b3          	add	a5,a5,a4
80003c30:	fdc42703          	lw	a4,-36(s0)
80003c34:	02e7a023          	sw	a4,32(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:369
    //printsv("API_SendMessageReq addr: ", addr);

    // Sends the message request
    do{
        mySlot = API_GetServiceSlot();
80003c38:	4fd020ef          	jal	ra,80006934 <API_GetServiceSlot>
80003c3c:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:370
        if(mySlot == PIPE_FULL){
80003c40:	fe842703          	lw	a4,-24(s0)
80003c44:	fdfe07b7          	lui	a5,0xfdfe0
80003c48:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9ddad>
80003c4c:	00f71463          	bne	a4,a5,80003c54 <API_SendMessageReq+0x8c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:372
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80003c50:	3dc000ef          	jal	ra,8000402c <API_NI_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:374
        }
    }while(mySlot == PIPE_FULL);
80003c54:	fe842703          	lw	a4,-24(s0)
80003c58:	fdfe07b7          	lui	a5,0xfdfe0
80003c5c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9ddad>
80003c60:	fcf70ce3          	beq	a4,a5,80003c38 <API_SendMessageReq+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:376

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80003c64:	800217b7          	lui	a5,0x80021
80003c68:	fe842703          	lw	a4,-24(s0)
80003c6c:	a9c78693          	addi	a3,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
80003c70:	00070793          	mv	a5,a4
80003c74:	00479793          	slli	a5,a5,0x4
80003c78:	40e787b3          	sub	a5,a5,a4
80003c7c:	00279793          	slli	a5,a5,0x2
80003c80:	00f687b3          	add	a5,a3,a5
80003c84:	feff0737          	lui	a4,0xfeff0
80003c88:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efadeae>
80003c8c:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:378

    ServicePipe[mySlot].header.header           = TaskList[taskSlot].TasksMap[taskID];
80003c90:	800226b7          	lui	a3,0x80022
80003c94:	fec42703          	lw	a4,-20(s0)
80003c98:	00070793          	mv	a5,a4
80003c9c:	00579793          	slli	a5,a5,0x5
80003ca0:	00e787b3          	add	a5,a5,a4
80003ca4:	fd842703          	lw	a4,-40(s0)
80003ca8:	00e787b3          	add	a5,a5,a4
80003cac:	01478793          	addi	a5,a5,20
80003cb0:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80003cb4:	00279793          	slli	a5,a5,0x2
80003cb8:	00f707b3          	add	a5,a4,a5
80003cbc:	00c7a683          	lw	a3,12(a5)
80003cc0:	800217b7          	lui	a5,0x80021
80003cc4:	fe842703          	lw	a4,-24(s0)
80003cc8:	a9c78613          	addi	a2,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
80003ccc:	00070793          	mv	a5,a4
80003cd0:	00479793          	slli	a5,a5,0x4
80003cd4:	40e787b3          	sub	a5,a5,a4
80003cd8:	00279793          	slli	a5,a5,0x2
80003cdc:	00f607b3          	add	a5,a2,a5
80003ce0:	00d7a423          	sw	a3,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:379
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80003ce4:	800217b7          	lui	a5,0x80021
80003ce8:	fe842703          	lw	a4,-24(s0)
80003cec:	a9c78693          	addi	a3,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
80003cf0:	00070793          	mv	a5,a4
80003cf4:	00479793          	slli	a5,a5,0x4
80003cf8:	40e787b3          	sub	a5,a5,a4
80003cfc:	00279793          	slli	a5,a5,0x2
80003d00:	00f687b3          	add	a5,a3,a5
80003d04:	00b00713          	li	a4,11
80003d08:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:380
    ServicePipe[mySlot].header.service          = MESSAGE_REQUEST;
80003d0c:	800217b7          	lui	a5,0x80021
80003d10:	fe842703          	lw	a4,-24(s0)
80003d14:	a9c78693          	addi	a3,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
80003d18:	00070793          	mv	a5,a4
80003d1c:	00479793          	slli	a5,a5,0x4
80003d20:	40e787b3          	sub	a5,a5,a4
80003d24:	00279793          	slli	a5,a5,0x2
80003d28:	00f687b3          	add	a5,a3,a5
80003d2c:	01000713          	li	a4,16
80003d30:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:381
    ServicePipe[mySlot].header.task_id          = TaskList[taskSlot].TaskID;
80003d34:	800226b7          	lui	a3,0x80022
80003d38:	fec42703          	lw	a4,-20(s0)
80003d3c:	00070793          	mv	a5,a4
80003d40:	00579793          	slli	a5,a5,0x5
80003d44:	00e787b3          	add	a5,a5,a4
80003d48:	00279793          	slli	a5,a5,0x2
80003d4c:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80003d50:	00e787b3          	add	a5,a5,a4
80003d54:	0107a683          	lw	a3,16(a5)
80003d58:	800217b7          	lui	a5,0x80021
80003d5c:	fe842703          	lw	a4,-24(s0)
80003d60:	a9c78613          	addi	a2,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
80003d64:	00070793          	mv	a5,a4
80003d68:	00479793          	slli	a5,a5,0x4
80003d6c:	40e787b3          	sub	a5,a5,a4
80003d70:	00279793          	slli	a5,a5,0x2
80003d74:	00f607b3          	add	a5,a2,a5
80003d78:	00d7aa23          	sw	a3,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:382
    ServicePipe[mySlot].header.task_app_id      = TaskList[taskSlot].AppID;
80003d7c:	800227b7          	lui	a5,0x80022
80003d80:	fec42703          	lw	a4,-20(s0)
80003d84:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80003d88:	00070793          	mv	a5,a4
80003d8c:	00579793          	slli	a5,a5,0x5
80003d90:	00e787b3          	add	a5,a5,a4
80003d94:	00279793          	slli	a5,a5,0x2
80003d98:	00f687b3          	add	a5,a3,a5
80003d9c:	0147a683          	lw	a3,20(a5)
80003da0:	800217b7          	lui	a5,0x80021
80003da4:	fe842703          	lw	a4,-24(s0)
80003da8:	a9c78613          	addi	a2,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
80003dac:	00070793          	mv	a5,a4
80003db0:	00479793          	slli	a5,a5,0x4
80003db4:	40e787b3          	sub	a5,a5,a4
80003db8:	00279793          	slli	a5,a5,0x2
80003dbc:	00f607b3          	add	a5,a2,a5
80003dc0:	02d7a223          	sw	a3,36(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:383
    ServicePipe[mySlot].header.producer_task_id = taskID;
80003dc4:	800217b7          	lui	a5,0x80021
80003dc8:	fe842703          	lw	a4,-24(s0)
80003dcc:	a9c78693          	addi	a3,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
80003dd0:	00070793          	mv	a5,a4
80003dd4:	00479793          	slli	a5,a5,0x4
80003dd8:	40e787b3          	sub	a5,a5,a4
80003ddc:	00279793          	slli	a5,a5,0x2
80003de0:	00f687b3          	add	a5,a3,a5
80003de4:	fd842703          	lw	a4,-40(s0)
80003de8:	00e7ae23          	sw	a4,28(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:385

    API_PushSendQueue(SERVICE, mySlot);
80003dec:	fe842583          	lw	a1,-24(s0)
80003df0:	10100537          	lui	a0,0x10100
80003df4:	d8cff0ef          	jal	ra,80003380 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:387

    prints("Esperando Mensagem!\n");
80003df8:	800077b7          	lui	a5,0x80007
80003dfc:	23878513          	addi	a0,a5,568 # 80007238 <__stack_top+0xfffc51e8>
80003e00:	878ff0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:389
    // Bloquear a tarefa!
    while(TaskList[taskSlot].waitingMsg == TRUE){ 
80003e04:	02c0006f          	j	80003e30 <API_SendMessageReq+0x268>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:390
        printsvsv("taskslot ", taskSlot, " esperando mensagem ", 0);
80003e08:	fec42703          	lw	a4,-20(s0)
80003e0c:	00000693          	li	a3,0
80003e10:	800077b7          	lui	a5,0x80007
80003e14:	25078613          	addi	a2,a5,592 # 80007250 <__stack_top+0xfffc5200>
80003e18:	00070593          	mv	a1,a4
80003e1c:	800077b7          	lui	a5,0x80007
80003e20:	26878513          	addi	a0,a5,616 # 80007268 <__stack_top+0xfffc5218>
80003e24:	948ff0ef          	jal	ra,80002f6c <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:391
        vTaskDelay(1); 
80003e28:	00100513          	li	a0,1
80003e2c:	be4fe0ef          	jal	ra,80002210 <vTaskDelay>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:389
    while(TaskList[taskSlot].waitingMsg == TRUE){ 
80003e30:	800227b7          	lui	a5,0x80022
80003e34:	fec42703          	lw	a4,-20(s0)
80003e38:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80003e3c:	00070793          	mv	a5,a4
80003e40:	00579793          	slli	a5,a5,0x5
80003e44:	00e787b3          	add	a5,a5,a4
80003e48:	00279793          	slli	a5,a5,0x2
80003e4c:	00f687b3          	add	a5,a3,a5
80003e50:	01c7a703          	lw	a4,28(a5)
80003e54:	00100793          	li	a5,1
80003e58:	faf708e3          	beq	a4,a5,80003e08 <API_SendMessageReq+0x240>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:393
    }
    prints("Mensagem Recebida!\n");
80003e5c:	800077b7          	lui	a5,0x80007
80003e60:	27478513          	addi	a0,a5,628 # 80007274 <__stack_top+0xfffc5224>
80003e64:	814ff0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:394
    return;
80003e68:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:395
}
80003e6c:	02c12083          	lw	ra,44(sp)
80003e70:	02812403          	lw	s0,40(sp)
80003e74:	03010113          	addi	sp,sp,48
80003e78:	00008067          	ret

80003e7c <API_CheckMessagePipe>:
API_CheckMessagePipe():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:397

unsigned int API_CheckMessagePipe(unsigned int requester_task_id, unsigned int task_app_id){
80003e7c:	fd010113          	addi	sp,sp,-48
80003e80:	02812623          	sw	s0,44(sp)
80003e84:	03010413          	addi	s0,sp,48
80003e88:	fca42e23          	sw	a0,-36(s0)
80003e8c:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:399
    unsigned int i;
    unsigned int sel = ERRO;
80003e90:	fff00793          	li	a5,-1
80003e94:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:400
    unsigned int smallID = 268435455;
80003e98:	100007b7          	lui	a5,0x10000
80003e9c:	fff78793          	addi	a5,a5,-1 # fffffff <RAM_SIZE+0xff7ffff>
80003ea0:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:401
    for (i = 0; i < PIPE_SIZE; i++){
80003ea4:	fe042623          	sw	zero,-20(s0)
80003ea8:	0c80006f          	j	80003f70 <API_CheckMessagePipe+0xf4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:402
        if(MessagePipe[i].status == PIPE_OCCUPIED){
80003eac:	800217b7          	lui	a5,0x80021
80003eb0:	fec42683          	lw	a3,-20(s0)
80003eb4:	24400713          	li	a4,580
80003eb8:	02e68733          	mul	a4,a3,a4
80003ebc:	c0078793          	addi	a5,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
80003ec0:	00f707b3          	add	a5,a4,a5
80003ec4:	0007a703          	lw	a4,0(a5)
80003ec8:	00100793          	li	a5,1
80003ecc:	08f71c63          	bne	a4,a5,80003f64 <API_CheckMessagePipe+0xe8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:403
            if(MessagePipe[i].header.application_id == task_app_id){
80003ed0:	800217b7          	lui	a5,0x80021
80003ed4:	fec42683          	lw	a3,-20(s0)
80003ed8:	c0078713          	addi	a4,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
80003edc:	24400793          	li	a5,580
80003ee0:	02f687b3          	mul	a5,a3,a5
80003ee4:	00f707b3          	add	a5,a4,a5
80003ee8:	0187a783          	lw	a5,24(a5)
80003eec:	fd842703          	lw	a4,-40(s0)
80003ef0:	06f71a63          	bne	a4,a5,80003f64 <API_CheckMessagePipe+0xe8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:404
                if(MessagePipe[i].header.destination_task == requester_task_id){
80003ef4:	800217b7          	lui	a5,0x80021
80003ef8:	fec42683          	lw	a3,-20(s0)
80003efc:	c0078713          	addi	a4,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
80003f00:	24400793          	li	a5,580
80003f04:	02f687b3          	mul	a5,a3,a5
80003f08:	00f707b3          	add	a5,a4,a5
80003f0c:	0207a783          	lw	a5,32(a5)
80003f10:	fdc42703          	lw	a4,-36(s0)
80003f14:	04f71863          	bne	a4,a5,80003f64 <API_CheckMessagePipe+0xe8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:405
                    if(MessagePipe[i].msgID < smallID){
80003f18:	800217b7          	lui	a5,0x80021
80003f1c:	fec42683          	lw	a3,-20(s0)
80003f20:	c0078713          	addi	a4,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
80003f24:	24400793          	li	a5,580
80003f28:	02f687b3          	mul	a5,a3,a5
80003f2c:	00f707b3          	add	a5,a4,a5
80003f30:	0087a783          	lw	a5,8(a5)
80003f34:	fe442703          	lw	a4,-28(s0)
80003f38:	02e7f663          	bleu	a4,a5,80003f64 <API_CheckMessagePipe+0xe8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:406
                        smallID = MessagePipe[i].msgID;
80003f3c:	800217b7          	lui	a5,0x80021
80003f40:	fec42683          	lw	a3,-20(s0)
80003f44:	c0078713          	addi	a4,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
80003f48:	24400793          	li	a5,580
80003f4c:	02f687b3          	mul	a5,a3,a5
80003f50:	00f707b3          	add	a5,a4,a5
80003f54:	0087a783          	lw	a5,8(a5)
80003f58:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:407
                        sel = i;
80003f5c:	fec42783          	lw	a5,-20(s0)
80003f60:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:401 (discriminator 2)
    for (i = 0; i < PIPE_SIZE; i++){
80003f64:	fec42783          	lw	a5,-20(s0)
80003f68:	00178793          	addi	a5,a5,1
80003f6c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:401 (discriminator 1)
80003f70:	fec42703          	lw	a4,-20(s0)
80003f74:	00300793          	li	a5,3
80003f78:	f2e7fae3          	bleu	a4,a5,80003eac <API_CheckMessagePipe+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:413
                    }
                }
            }
        }
    }
    if(sel != ERRO){
80003f7c:	fe842703          	lw	a4,-24(s0)
80003f80:	fff00793          	li	a5,-1
80003f84:	02f70063          	beq	a4,a5,80003fa4 <API_CheckMessagePipe+0x128>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:414
        MessagePipe[sel].status == PIPE_TRANSMITTING;
80003f88:	800217b7          	lui	a5,0x80021
80003f8c:	fe842683          	lw	a3,-24(s0)
80003f90:	24400713          	li	a4,580
80003f94:	02e68733          	mul	a4,a3,a4
80003f98:	c0078793          	addi	a5,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
80003f9c:	00f707b3          	add	a5,a4,a5
80003fa0:	0007a783          	lw	a5,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:417
    }
    //printsv("returning sel: ", sel);
    return sel;
80003fa4:	fe842783          	lw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:418
}
80003fa8:	00078513          	mv	a0,a5
80003fac:	02c12403          	lw	s0,44(sp)
80003fb0:	03010113          	addi	sp,sp,48
80003fb4:	00008067          	ret

80003fb8 <API_AddPendingReq>:
API_AddPendingReq():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:420

void API_AddPendingReq(unsigned int requester_task_id, unsigned int task_app_id, unsigned int producer_task_id){
80003fb8:	fd010113          	addi	sp,sp,-48
80003fbc:	02112623          	sw	ra,44(sp)
80003fc0:	02812423          	sw	s0,40(sp)
80003fc4:	03010413          	addi	s0,sp,48
80003fc8:	fca42e23          	sw	a0,-36(s0)
80003fcc:	fcb42c23          	sw	a1,-40(s0)
80003fd0:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:421
    unsigned int slot = API_GetTaskSlot(producer_task_id, task_app_id);
80003fd4:	fd842583          	lw	a1,-40(s0)
80003fd8:	fd442503          	lw	a0,-44(s0)
80003fdc:	338020ef          	jal	ra,80006314 <API_GetTaskSlot>
80003fe0:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:422
    TaskList[slot].PendingReq[requester_task_id] = TRUE;
80003fe4:	800226b7          	lui	a3,0x80022
80003fe8:	fec42703          	lw	a4,-20(s0)
80003fec:	00070793          	mv	a5,a4
80003ff0:	00579793          	slli	a5,a5,0x5
80003ff4:	00e787b3          	add	a5,a5,a4
80003ff8:	fdc42703          	lw	a4,-36(s0)
80003ffc:	00e787b3          	add	a5,a5,a4
80004000:	00c78793          	addi	a5,a5,12
80004004:	00279713          	slli	a4,a5,0x2
80004008:	cb868793          	addi	a5,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
8000400c:	00f707b3          	add	a5,a4,a5
80004010:	00100713          	li	a4,1
80004014:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:423
    return;
80004018:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:424
}
8000401c:	02c12083          	lw	ra,44(sp)
80004020:	02812403          	lw	s0,40(sp)
80004024:	03010113          	addi	sp,sp,48
80004028:	00008067          	ret

8000402c <API_NI_Handler>:
API_NI_Handler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:427


void API_NI_Handler(){
8000402c:	fe010113          	addi	sp,sp,-32
80004030:	00112e23          	sw	ra,28(sp)
80004034:	00812c23          	sw	s0,24(sp)
80004038:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:430
    unsigned int aux;
    unsigned int service;
    unsigned int count = 0;
8000403c:	fe042423          	sw	zero,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:432
    do{
        if (HW_get_32bit_reg(NI_TX) == NI_STATUS_INTER){
80004040:	500007b7          	lui	a5,0x50000
80004044:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80004048:	f55fc0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
8000404c:	00050713          	mv	a4,a0
80004050:	000017b7          	lui	a5,0x1
80004054:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
80004058:	04f71263          	bne	a4,a5,8000409c <API_NI_Handler+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:433
            prints("TX interruption catched\n"); // - ", NI_IRCount);
8000405c:	800077b7          	lui	a5,0x80007
80004060:	28878513          	addi	a0,a5,648 # 80007288 <__stack_top+0xfffc5238>
80004064:	e15fe0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:434
            API_ClearPipeSlot(SendingSlot); // clear the pipe slot that was transmitted
80004068:	800217b7          	lui	a5,0x80021
8000406c:	a987a783          	lw	a5,-1384(a5) # 80020a98 <__stack_top+0xfffdea48>
80004070:	00078513          	mv	a0,a5
80004074:	161020ef          	jal	ra,800069d4 <API_ClearPipeSlot>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:435
            HW_set_32bit_reg(NI_TX, DONE);  // releases the interruption
80004078:	800057b7          	lui	a5,0x80005
8000407c:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffc3505>
80004080:	500007b7          	lui	a5,0x50000
80004084:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80004088:	f0dfc0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:436
            API_Try2Send();                 // tries to send another packet (if available)
8000408c:	c20ff0ef          	jal	ra,800034ac <API_Try2Send>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:437
            count++;
80004090:	fe842783          	lw	a5,-24(s0)
80004094:	00178793          	addi	a5,a5,1
80004098:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:440
        }

        if( HW_get_32bit_reg(NI_RX) == NI_STATUS_INTER || HW_get_32bit_reg(NI_RX) == NI_STATUS_WAITING) {
8000409c:	500007b7          	lui	a5,0x50000
800040a0:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800040a4:	ef9fc0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800040a8:	00050713          	mv	a4,a0
800040ac:	000017b7          	lui	a5,0x1
800040b0:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
800040b4:	00f70e63          	beq	a4,a5,800040d0 <API_NI_Handler+0xa4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:440 (discriminator 1)
800040b8:	500007b7          	lui	a5,0x50000
800040bc:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800040c0:	eddfc0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800040c4:	00050713          	mv	a4,a0
800040c8:	02200793          	li	a5,34
800040cc:	60f71c63          	bne	a4,a5,800046e4 <API_NI_Handler+0x6b8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:441
            prints("RX interruption catched\n"); // - ", NI_IRCount);
800040d0:	800077b7          	lui	a5,0x80007
800040d4:	2a478513          	addi	a0,a5,676 # 800072a4 <__stack_top+0xfffc5254>
800040d8:	da1fe0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:442
            service = incommingPacket.service;
800040dc:	800217b7          	lui	a5,0x80021
800040e0:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
800040e4:	0087a783          	lw	a5,8(a5)
800040e8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:443
            incommingPacket.service = SOLVED;
800040ec:	800217b7          	lui	a5,0x80021
800040f0:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
800040f4:	00010737          	lui	a4,0x10
800040f8:	fff70713          	addi	a4,a4,-1 # ffff <HEAP_SIZE-0x1>
800040fc:	00e7a423          	sw	a4,8(a5)
80004100:	fe442703          	lw	a4,-28(s0)
80004104:	03500793          	li	a5,53
80004108:	2af70063          	beq	a4,a5,800043a8 <API_NI_Handler+0x37c>
8000410c:	fe442703          	lw	a4,-28(s0)
80004110:	03500793          	li	a5,53
80004114:	04e7ea63          	bltu	a5,a4,80004168 <API_NI_Handler+0x13c>
80004118:	fe442703          	lw	a4,-28(s0)
8000411c:	02100793          	li	a5,33
80004120:	52f70863          	beq	a4,a5,80004650 <API_NI_Handler+0x624>
80004124:	fe442703          	lw	a4,-28(s0)
80004128:	02100793          	li	a5,33
8000412c:	02e7e063          	bltu	a5,a4,8000414c <API_NI_Handler+0x120>
80004130:	fe442703          	lw	a4,-28(s0)
80004134:	01000793          	li	a5,16
80004138:	3cf70863          	beq	a4,a5,80004508 <API_NI_Handler+0x4dc>
8000413c:	fe442703          	lw	a4,-28(s0)
80004140:	02000793          	li	a5,32
80004144:	48f70863          	beq	a4,a5,800045d4 <API_NI_Handler+0x5a8>
80004148:	5580006f          	j	800046a0 <API_NI_Handler+0x674>
8000414c:	fe442703          	lw	a4,-28(s0)
80004150:	03000793          	li	a5,48
80004154:	0af70463          	beq	a4,a5,800041fc <API_NI_Handler+0x1d0>
80004158:	fe442703          	lw	a4,-28(s0)
8000415c:	03300793          	li	a5,51
80004160:	20f70a63          	beq	a4,a5,80004374 <API_NI_Handler+0x348>
80004164:	53c0006f          	j	800046a0 <API_NI_Handler+0x674>
80004168:	fe442703          	lw	a4,-28(s0)
8000416c:	40100793          	li	a5,1025
80004170:	2ef70663          	beq	a4,a5,8000445c <API_NI_Handler+0x430>
80004174:	fe442703          	lw	a4,-28(s0)
80004178:	40100793          	li	a5,1025
8000417c:	02e7e063          	bltu	a5,a4,8000419c <API_NI_Handler+0x170>
80004180:	fe442703          	lw	a4,-28(s0)
80004184:	20000793          	li	a5,512
80004188:	02f70a63          	beq	a4,a5,800041bc <API_NI_Handler+0x190>
8000418c:	fe442703          	lw	a4,-28(s0)
80004190:	40000793          	li	a5,1024
80004194:	24f70463          	beq	a4,a5,800043dc <API_NI_Handler+0x3b0>
80004198:	5080006f          	j	800046a0 <API_NI_Handler+0x674>
8000419c:	fe442703          	lw	a4,-28(s0)
800041a0:	50000793          	li	a5,1280
800041a4:	12f70e63          	beq	a4,a5,800042e0 <API_NI_Handler+0x2b4>
800041a8:	fe442703          	lw	a4,-28(s0)
800041ac:	000107b7          	lui	a5,0x10
800041b0:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
800041b4:	50f70663          	beq	a4,a5,800046c0 <API_NI_Handler+0x694>
800041b8:	4e80006f          	j	800046a0 <API_NI_Handler+0x674>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:447
            switch (service){
                case REPOSITORY_APP_INFO: // When the repository informs the GM that exist a new Application available:
                    //prints("REPOSITORY_APP_INFO\n");
                    API_AddApplication(incommingPacket.application_id,
800041bc:	800217b7          	lui	a5,0x80021
800041c0:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
800041c4:	00c7a703          	lw	a4,12(a5)
800041c8:	800217b7          	lui	a5,0x80021
800041cc:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
800041d0:	0107a583          	lw	a1,16(a5)
800041d4:	800217b7          	lui	a5,0x80021
800041d8:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
800041dc:	0147a603          	lw	a2,20(a5)
800041e0:	800217b7          	lui	a5,0x80021
800041e4:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
800041e8:	0187a783          	lw	a5,24(a5)
800041ec:	00078693          	mv	a3,a5
800041f0:	00070513          	mv	a0,a4
800041f4:	764000ef          	jal	ra,80004958 <API_AddApplication>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:451
                                    incommingPacket.aplication_period, 
                                    incommingPacket.application_executions, 
                                    incommingPacket.application_n_tasks);
                    break;
800041f8:	4cc0006f          	j	800046c4 <API_NI_Handler+0x698>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:454
                
                case TASK_ALLOCATION_SEND: // When the GM asks one Slave to allocate one task
                    prints("TASK_ALLOCATION_SEND\n");
800041fc:	800077b7          	lui	a5,0x80007
80004200:	2c078513          	addi	a0,a5,704 # 800072c0 <__stack_top+0xfffc5270>
80004204:	c75fe0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:455
                    aux = API_TaskAllocation(incommingPacket.task_id,
80004208:	800217b7          	lui	a5,0x80021
8000420c:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
80004210:	00c7a503          	lw	a0,12(a5)
80004214:	800217b7          	lui	a5,0x80021
80004218:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
8000421c:	0107a583          	lw	a1,16(a5)
80004220:	800217b7          	lui	a5,0x80021
80004224:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
80004228:	0147a603          	lw	a2,20(a5)
8000422c:	800217b7          	lui	a5,0x80021
80004230:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
80004234:	0187a683          	lw	a3,24(a5)
80004238:	800217b7          	lui	a5,0x80021
8000423c:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
80004240:	01c7a783          	lw	a5,28(a5)
80004244:	00078713          	mv	a4,a5
80004248:	5f5010ef          	jal	ra,8000603c <API_TaskAllocation>
8000424c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:460
                                            incommingPacket.task_txt_size,
                                            incommingPacket.task_bss_size,
                                            incommingPacket.task_start_point,
                                            incommingPacket.task_app_id);
                    printsv("Task slot: ", aux);
80004250:	fec42783          	lw	a5,-20(s0)
80004254:	00078593          	mv	a1,a5
80004258:	800077b7          	lui	a5,0x80007
8000425c:	2d878513          	addi	a0,a5,728 # 800072d8 <__stack_top+0xfffc5288>
80004260:	cc5fe0ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:461
                    printsv("Task slot TaskAddr: ", TaskList[aux].taskAddr);
80004264:	800227b7          	lui	a5,0x80022
80004268:	fec42703          	lw	a4,-20(s0)
8000426c:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80004270:	00070793          	mv	a5,a4
80004274:	00579793          	slli	a5,a5,0x5
80004278:	00e787b3          	add	a5,a5,a4
8000427c:	00279793          	slli	a5,a5,0x2
80004280:	00f687b3          	add	a5,a3,a5
80004284:	0287a783          	lw	a5,40(a5)
80004288:	00078593          	mv	a1,a5
8000428c:	800077b7          	lui	a5,0x80007
80004290:	2e478513          	addi	a0,a5,740 # 800072e4 <__stack_top+0xfffc5294>
80004294:	c91fe0ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:463
                    // Informs the NI were to write the application
                    HW_set_32bit_reg(NI_RX, TaskList[aux].taskAddr);
80004298:	800227b7          	lui	a5,0x80022
8000429c:	fec42703          	lw	a4,-20(s0)
800042a0:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdfc68>
800042a4:	00070793          	mv	a5,a4
800042a8:	00579793          	slli	a5,a5,0x5
800042ac:	00e787b3          	add	a5,a5,a4
800042b0:	00279793          	slli	a5,a5,0x2
800042b4:	00f687b3          	add	a5,a3,a5
800042b8:	0287a783          	lw	a5,40(a5)
800042bc:	00078593          	mv	a1,a5
800042c0:	500007b7          	lui	a5,0x50000
800042c4:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800042c8:	ccdfc0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:464
                    incommingPacket.service = TASK_ALLOCATION_FINISHED;
800042cc:	800217b7          	lui	a5,0x80021
800042d0:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
800042d4:	03300713          	li	a4,51
800042d8:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:465
                    break;
800042dc:	3e80006f          	j	800046c4 <API_NI_Handler+0x698>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:468
                
                case TASK_FINISH:
                    printsvsv("FINISHED: Task ", incommingPacket.task_id, "from application ", incommingPacket.task_app_id);
800042e0:	800217b7          	lui	a5,0x80021
800042e4:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
800042e8:	00c7a783          	lw	a5,12(a5)
800042ec:	00078713          	mv	a4,a5
800042f0:	800217b7          	lui	a5,0x80021
800042f4:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
800042f8:	01c7a783          	lw	a5,28(a5)
800042fc:	00078693          	mv	a3,a5
80004300:	800077b7          	lui	a5,0x80007
80004304:	2fc78613          	addi	a2,a5,764 # 800072fc <__stack_top+0xfffc52ac>
80004308:	00070593          	mv	a1,a4
8000430c:	800077b7          	lui	a5,0x80007
80004310:	31078513          	addi	a0,a5,784 # 80007310 <__stack_top+0xfffc52c0>
80004314:	c59fe0ef          	jal	ra,80002f6c <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:469
                    API_ClearTaskSlotFromTile(incommingPacket.task_dest_addr, incommingPacket.task_app_id, incommingPacket.task_id);
80004318:	800217b7          	lui	a5,0x80021
8000431c:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
80004320:	0307a703          	lw	a4,48(a5)
80004324:	800217b7          	lui	a5,0x80021
80004328:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
8000432c:	01c7a683          	lw	a3,28(a5)
80004330:	800217b7          	lui	a5,0x80021
80004334:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
80004338:	00c7a783          	lw	a5,12(a5)
8000433c:	00078613          	mv	a2,a5
80004340:	00068593          	mv	a1,a3
80004344:	00070513          	mv	a0,a4
80004348:	370010ef          	jal	ra,800056b8 <API_ClearTaskSlotFromTile>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:470
                    API_DealocateTask(incommingPacket.task_id, incommingPacket.task_app_id);
8000434c:	800217b7          	lui	a5,0x80021
80004350:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
80004354:	00c7a703          	lw	a4,12(a5)
80004358:	800217b7          	lui	a5,0x80021
8000435c:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
80004360:	01c7a783          	lw	a5,28(a5)
80004364:	00078593          	mv	a1,a5
80004368:	00070513          	mv	a0,a4
8000436c:	55d000ef          	jal	ra,800050c8 <API_DealocateTask>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:471
                    break;
80004370:	3540006f          	j	800046c4 <API_NI_Handler+0x698>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:474

                case TASK_ALLOCATION_FINISHED:
                    prints("TASK_ALLOCATION_FINISHED\n");
80004374:	800077b7          	lui	a5,0x80007
80004378:	32078513          	addi	a0,a5,800 # 80007320 <__stack_top+0xfffc52d0>
8000437c:	afdfe0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:475
                    API_AckTaskAllocation(incommingPacket.task_id, incommingPacket.task_app_id);
80004380:	800217b7          	lui	a5,0x80021
80004384:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
80004388:	00c7a703          	lw	a4,12(a5)
8000438c:	800217b7          	lui	a5,0x80021
80004390:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
80004394:	01c7a783          	lw	a5,28(a5)
80004398:	00078593          	mv	a1,a5
8000439c:	00070513          	mv	a0,a4
800043a0:	a3cff0ef          	jal	ra,800035dc <API_AckTaskAllocation>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:485
                        printsv("taskSize: ", TaskList[aux].taskSize);
                        printsv("taskAddr: ", TaskList[aux].taskAddr);
                        printsv("mainAddr: ", TaskList[aux].mainAddr);
                        printsv("taskHandler: ", (unsigned int)TaskList[aux].TaskHandler);
                    }*/
                    break;
800043a4:	3200006f          	j	800046c4 <API_NI_Handler+0x698>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:488

                case TASK_ALLOCATION_SUCCESS:
                    prints("TASK_ALLOCATION_SUCCESS\n");
800043a8:	800077b7          	lui	a5,0x80007
800043ac:	33c78513          	addi	a0,a5,828 # 8000733c <__stack_top+0xfffc52ec>
800043b0:	ac9fe0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:490
                    //printi(incommingPacket.task_id);
                    API_TaskAllocated(incommingPacket.task_id, incommingPacket.task_app_id);
800043b4:	800217b7          	lui	a5,0x80021
800043b8:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
800043bc:	00c7a703          	lw	a4,12(a5)
800043c0:	800217b7          	lui	a5,0x80021
800043c4:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
800043c8:	01c7a783          	lw	a5,28(a5)
800043cc:	00078593          	mv	a1,a5
800043d0:	00070513          	mv	a0,a4
800043d4:	6bc010ef          	jal	ra,80005a90 <API_TaskAllocated>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:491
                    break;
800043d8:	2ec0006f          	j	800046c4 <API_NI_Handler+0x698>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:494

                case TASK_START:
                    prints("Chegou um TASK_START!\n");
800043dc:	800077b7          	lui	a5,0x80007
800043e0:	35878513          	addi	a0,a5,856 # 80007358 <__stack_top+0xfffc5308>
800043e4:	a95fe0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:495
                    aux = API_GetTaskSlot(incommingPacket.task_id, incommingPacket.task_app_id);
800043e8:	800217b7          	lui	a5,0x80021
800043ec:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
800043f0:	00c7a703          	lw	a4,12(a5)
800043f4:	800217b7          	lui	a5,0x80021
800043f8:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
800043fc:	01c7a783          	lw	a5,28(a5)
80004400:	00078593          	mv	a1,a5
80004404:	00070513          	mv	a0,a4
80004408:	70d010ef          	jal	ra,80006314 <API_GetTaskSlot>
8000440c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:497
                    // Informs the NI were to write the application
                    HW_set_32bit_reg(NI_RX, (unsigned int)&TaskList[aux].appNumTasks);
80004410:	fec42703          	lw	a4,-20(s0)
80004414:	00070793          	mv	a5,a4
80004418:	00579793          	slli	a5,a5,0x5
8000441c:	00e787b3          	add	a5,a5,a4
80004420:	00279793          	slli	a5,a5,0x2
80004424:	05078713          	addi	a4,a5,80
80004428:	800227b7          	lui	a5,0x80022
8000442c:	cb878793          	addi	a5,a5,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80004430:	00f707b3          	add	a5,a4,a5
80004434:	00878793          	addi	a5,a5,8
80004438:	00078593          	mv	a1,a5
8000443c:	500007b7          	lui	a5,0x50000
80004440:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80004444:	b51fc0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:498
                    incommingPacket.service = TASK_RUN;
80004448:	800217b7          	lui	a5,0x80021
8000444c:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
80004450:	40100713          	li	a4,1025
80004454:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:499
                    break;
80004458:	26c0006f          	j	800046c4 <API_NI_Handler+0x698>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:502
                
                case TASK_RUN:
                    prints("Chegou um TASK_RUN!\n");
8000445c:	800077b7          	lui	a5,0x80007
80004460:	37078513          	addi	a0,a5,880 # 80007370 <__stack_top+0xfffc5320>
80004464:	a15fe0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:503
                    aux = API_GetTaskSlot(incommingPacket.task_id, incommingPacket.task_app_id);
80004468:	800217b7          	lui	a5,0x80021
8000446c:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
80004470:	00c7a703          	lw	a4,12(a5)
80004474:	800217b7          	lui	a5,0x80021
80004478:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
8000447c:	01c7a783          	lw	a5,28(a5)
80004480:	00078593          	mv	a1,a5
80004484:	00070513          	mv	a0,a4
80004488:	68d010ef          	jal	ra,80006314 <API_GetTaskSlot>
8000448c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:504
                    TaskList[aux].status = TASK_SLOT_READY;
80004490:	800226b7          	lui	a3,0x80022
80004494:	fec42703          	lw	a4,-20(s0)
80004498:	00070793          	mv	a5,a4
8000449c:	00579793          	slli	a5,a5,0x5
800044a0:	00e787b3          	add	a5,a5,a4
800044a4:	00279793          	slli	a5,a5,0x2
800044a8:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
800044ac:	00e787b3          	add	a5,a5,a4
800044b0:	00300713          	li	a4,3
800044b4:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:505
                    printsvsv("Enabling Task: ", incommingPacket.task_id, "from app: ", incommingPacket.task_app_id);
800044b8:	800217b7          	lui	a5,0x80021
800044bc:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
800044c0:	00c7a783          	lw	a5,12(a5)
800044c4:	00078713          	mv	a4,a5
800044c8:	800217b7          	lui	a5,0x80021
800044cc:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
800044d0:	01c7a783          	lw	a5,28(a5)
800044d4:	00078693          	mv	a3,a5
800044d8:	800077b7          	lui	a5,0x80007
800044dc:	38878613          	addi	a2,a5,904 # 80007388 <__stack_top+0xfffc5338>
800044e0:	00070593          	mv	a1,a4
800044e4:	800077b7          	lui	a5,0x80007
800044e8:	39478513          	addi	a0,a5,916 # 80007394 <__stack_top+0xfffc5344>
800044ec:	a81fe0ef          	jal	ra,80002f6c <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:506
                    printsv("Slot: ", aux);
800044f0:	fec42783          	lw	a5,-20(s0)
800044f4:	00078593          	mv	a1,a5
800044f8:	800077b7          	lui	a5,0x80007
800044fc:	3a478513          	addi	a0,a5,932 # 800073a4 <__stack_top+0xfffc5354>
80004500:	a25fe0ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:507
                    break;
80004504:	1c00006f          	j	800046c4 <API_NI_Handler+0x698>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:511

                case MESSAGE_REQUEST:
                    // check the pipe
                    printsvsv("Chegou um message request! App: ", incommingPacket.task_app_id, "Task: ", incommingPacket.task_id);
80004508:	800217b7          	lui	a5,0x80021
8000450c:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
80004510:	01c7a783          	lw	a5,28(a5)
80004514:	00078713          	mv	a4,a5
80004518:	800217b7          	lui	a5,0x80021
8000451c:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
80004520:	00c7a783          	lw	a5,12(a5)
80004524:	00078693          	mv	a3,a5
80004528:	800077b7          	lui	a5,0x80007
8000452c:	3ac78613          	addi	a2,a5,940 # 800073ac <__stack_top+0xfffc535c>
80004530:	00070593          	mv	a1,a4
80004534:	800077b7          	lui	a5,0x80007
80004538:	3b478513          	addi	a0,a5,948 # 800073b4 <__stack_top+0xfffc5364>
8000453c:	a31fe0ef          	jal	ra,80002f6c <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:512
                    aux = API_CheckMessagePipe(incommingPacket.task_id, incommingPacket.task_app_id);
80004540:	800217b7          	lui	a5,0x80021
80004544:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
80004548:	00c7a703          	lw	a4,12(a5)
8000454c:	800217b7          	lui	a5,0x80021
80004550:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
80004554:	01c7a783          	lw	a5,28(a5)
80004558:	00078593          	mv	a1,a5
8000455c:	00070513          	mv	a0,a4
80004560:	91dff0ef          	jal	ra,80003e7c <API_CheckMessagePipe>
80004564:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:513
                    if (aux == ERRO){
80004568:	fec42703          	lw	a4,-20(s0)
8000456c:	fff00793          	li	a5,-1
80004570:	04f71463          	bne	a4,a5,800045b8 <API_NI_Handler+0x58c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:515
                        // register an messagerequest
                        prints("Mensagem não encontrada, adicionando ao PendingReq!\n");
80004574:	800077b7          	lui	a5,0x80007
80004578:	3d878513          	addi	a0,a5,984 # 800073d8 <__stack_top+0xfffc5388>
8000457c:	8fdfe0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:516
                        API_AddPendingReq(incommingPacket.task_id, incommingPacket.task_app_id, incommingPacket.producer_task_id);
80004580:	800217b7          	lui	a5,0x80021
80004584:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
80004588:	00c7a703          	lw	a4,12(a5)
8000458c:	800217b7          	lui	a5,0x80021
80004590:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
80004594:	01c7a683          	lw	a3,28(a5)
80004598:	800217b7          	lui	a5,0x80021
8000459c:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
800045a0:	0147a783          	lw	a5,20(a5)
800045a4:	00078613          	mv	a2,a5
800045a8:	00068593          	mv	a1,a3
800045ac:	00070513          	mv	a0,a4
800045b0:	a09ff0ef          	jal	ra,80003fb8 <API_AddPendingReq>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:522
                    } else {
                        prints("Mensagem encontrada no pipe!\n");
                        API_PushSendQueue(MESSAGE, aux);
                        // API_Try2Send();
                    }
                    break;
800045b4:	1100006f          	j	800046c4 <API_NI_Handler+0x698>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:518
                        prints("Mensagem encontrada no pipe!\n");
800045b8:	800077b7          	lui	a5,0x80007
800045bc:	41078513          	addi	a0,a5,1040 # 80007410 <__stack_top+0xfffc53c0>
800045c0:	8b9fe0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:519
                        API_PushSendQueue(MESSAGE, aux);
800045c4:	fec42583          	lw	a1,-20(s0)
800045c8:	20200537          	lui	a0,0x20200
800045cc:	db5fe0ef          	jal	ra,80003380 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:522
                    break;
800045d0:	0f40006f          	j	800046c4 <API_NI_Handler+0x698>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:525
                
                case MESSAGE_DELIVERY:
                    prints("Tem uma mensagem chegando...\n");
800045d4:	800077b7          	lui	a5,0x80007
800045d8:	43078513          	addi	a0,a5,1072 # 80007430 <__stack_top+0xfffc53e0>
800045dc:	89dfe0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:526
                    aux = API_GetTaskSlot(incommingPacket.destination_task, incommingPacket.application_id);
800045e0:	800217b7          	lui	a5,0x80021
800045e4:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
800045e8:	0147a703          	lw	a4,20(a5)
800045ec:	800217b7          	lui	a5,0x80021
800045f0:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
800045f4:	00c7a783          	lw	a5,12(a5)
800045f8:	00078593          	mv	a1,a5
800045fc:	00070513          	mv	a0,a4
80004600:	515010ef          	jal	ra,80006314 <API_GetTaskSlot>
80004604:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:528
                    //printsv("MESSAGE_DELIVERY addr: ", TaskList[aux].MsgToReceive);
                    HW_set_32bit_reg(NI_RX, TaskList[aux].MsgToReceive);
80004608:	800226b7          	lui	a3,0x80022
8000460c:	fec42703          	lw	a4,-20(s0)
80004610:	00070793          	mv	a5,a4
80004614:	00579793          	slli	a5,a5,0x5
80004618:	00e787b3          	add	a5,a5,a4
8000461c:	00279793          	slli	a5,a5,0x2
80004620:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80004624:	00e787b3          	add	a5,a5,a4
80004628:	0207a783          	lw	a5,32(a5)
8000462c:	00078593          	mv	a1,a5
80004630:	500007b7          	lui	a5,0x50000
80004634:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80004638:	95dfc0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:529
                    incommingPacket.service = MESSAGE_DELIVERY_FINISH;
8000463c:	800217b7          	lui	a5,0x80021
80004640:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
80004644:	02100713          	li	a4,33
80004648:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:531
                    //prints("done...\n----------\n");
                    break;
8000464c:	0780006f          	j	800046c4 <API_NI_Handler+0x698>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:535
                
                case MESSAGE_DELIVERY_FINISH:
                    //prints("Terminou de entregar a mensagem!!\n");
                    aux = API_GetTaskSlot(incommingPacket.destination_task, incommingPacket.application_id);
80004650:	800217b7          	lui	a5,0x80021
80004654:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
80004658:	0147a703          	lw	a4,20(a5)
8000465c:	800217b7          	lui	a5,0x80021
80004660:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
80004664:	00c7a783          	lw	a5,12(a5)
80004668:	00078593          	mv	a1,a5
8000466c:	00070513          	mv	a0,a4
80004670:	4a5010ef          	jal	ra,80006314 <API_GetTaskSlot>
80004674:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:536
                    TaskList[aux].waitingMsg = FALSE;
80004678:	800227b7          	lui	a5,0x80022
8000467c:	fec42703          	lw	a4,-20(s0)
80004680:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80004684:	00070793          	mv	a5,a4
80004688:	00579793          	slli	a5,a5,0x5
8000468c:	00e787b3          	add	a5,a5,a4
80004690:	00279793          	slli	a5,a5,0x2
80004694:	00f687b3          	add	a5,a3,a5
80004698:	0007ae23          	sw	zero,28(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:537
                    break;
8000469c:	0280006f          	j	800046c4 <API_NI_Handler+0x698>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:543

                case SOLVED:
                    break;
                    
                default:
                    printsv("ERROR External_2_IRQHandler Unknown-Service ", incommingPacket.service);
800046a0:	800217b7          	lui	a5,0x80021
800046a4:	b9078793          	addi	a5,a5,-1136 # 80020b90 <__stack_top+0xfffdeb40>
800046a8:	0087a783          	lw	a5,8(a5)
800046ac:	00078593          	mv	a1,a5
800046b0:	800077b7          	lui	a5,0x80007
800046b4:	45078513          	addi	a0,a5,1104 # 80007450 <__stack_top+0xfffc5400>
800046b8:	86dfe0ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:544
                    break;
800046bc:	0080006f          	j	800046c4 <API_NI_Handler+0x698>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:540
                    break;
800046c0:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:546
            }
            HW_set_32bit_reg(NI_RX, DONE);
800046c4:	800057b7          	lui	a5,0x80005
800046c8:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffc3505>
800046cc:	500007b7          	lui	a5,0x50000
800046d0:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800046d4:	8c1fc0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:547
            count++;
800046d8:	fe842783          	lw	a5,-24(s0)
800046dc:	00178793          	addi	a5,a5,1
800046e0:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:550
        }
    
    } while( HW_get_32bit_reg(NI_RX) == NI_STATUS_INTER || HW_get_32bit_reg(NI_RX) == NI_STATUS_WAITING || HW_get_32bit_reg(NI_TX) == NI_STATUS_INTER);
800046e4:	500007b7          	lui	a5,0x50000
800046e8:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800046ec:	8b1fc0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800046f0:	00050713          	mv	a4,a0
800046f4:	000017b7          	lui	a5,0x1
800046f8:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
800046fc:	94f702e3          	beq	a4,a5,80004040 <API_NI_Handler+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:550 (discriminator 1)
80004700:	500007b7          	lui	a5,0x50000
80004704:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80004708:	895fc0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
8000470c:	00050713          	mv	a4,a0
80004710:	02200793          	li	a5,34
80004714:	92f706e3          	beq	a4,a5,80004040 <API_NI_Handler+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:550 (discriminator 2)
80004718:	500007b7          	lui	a5,0x50000
8000471c:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80004720:	87dfc0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80004724:	00050713          	mv	a4,a0
80004728:	000017b7          	lui	a5,0x1
8000472c:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
80004730:	90f708e3          	beq	a4,a5,80004040 <API_NI_Handler+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:552
    
    for(aux = 0; aux < NUM_MAX_TASKS; aux++){
80004734:	fe042623          	sw	zero,-20(s0)
80004738:	0b00006f          	j	800047e8 <API_NI_Handler+0x7bc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:553
        if(TaskList[aux].status == TASK_SLOT_READY){
8000473c:	800226b7          	lui	a3,0x80022
80004740:	fec42703          	lw	a4,-20(s0)
80004744:	00070793          	mv	a5,a4
80004748:	00579793          	slli	a5,a5,0x5
8000474c:	00e787b3          	add	a5,a5,a4
80004750:	00279793          	slli	a5,a5,0x2
80004754:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80004758:	00e787b3          	add	a5,a5,a4
8000475c:	0007a703          	lw	a4,0(a5)
80004760:	00300793          	li	a5,3
80004764:	06f71c63          	bne	a4,a5,800047dc <API_NI_Handler+0x7b0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:554
            printsvsv("Starting Task ", TaskList[aux].TaskID, " from app ", TaskList[aux].AppID);
80004768:	800226b7          	lui	a3,0x80022
8000476c:	fec42703          	lw	a4,-20(s0)
80004770:	00070793          	mv	a5,a4
80004774:	00579793          	slli	a5,a5,0x5
80004778:	00e787b3          	add	a5,a5,a4
8000477c:	00279793          	slli	a5,a5,0x2
80004780:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80004784:	00e787b3          	add	a5,a5,a4
80004788:	0107a783          	lw	a5,16(a5)
8000478c:	00078593          	mv	a1,a5
80004790:	800227b7          	lui	a5,0x80022
80004794:	fec42703          	lw	a4,-20(s0)
80004798:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdfc68>
8000479c:	00070793          	mv	a5,a4
800047a0:	00579793          	slli	a5,a5,0x5
800047a4:	00e787b3          	add	a5,a5,a4
800047a8:	00279793          	slli	a5,a5,0x2
800047ac:	00f687b3          	add	a5,a3,a5
800047b0:	0147a783          	lw	a5,20(a5)
800047b4:	00078693          	mv	a3,a5
800047b8:	800077b7          	lui	a5,0x80007
800047bc:	48078613          	addi	a2,a5,1152 # 80007480 <__stack_top+0xfffc5430>
800047c0:	800077b7          	lui	a5,0x80007
800047c4:	48c78513          	addi	a0,a5,1164 # 8000748c <__stack_top+0xfffc543c>
800047c8:	fa4fe0ef          	jal	ra,80002f6c <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:555
            API_setFreqScale(1000);
800047cc:	3e800513          	li	a0,1000
800047d0:	374020ef          	jal	ra,80006b44 <API_setFreqScale>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:556
            API_TaskStart(aux);
800047d4:	fec42503          	lw	a0,-20(s0)
800047d8:	421010ef          	jal	ra,800063f8 <API_TaskStart>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:552 (discriminator 2)
    for(aux = 0; aux < NUM_MAX_TASKS; aux++){
800047dc:	fec42783          	lw	a5,-20(s0)
800047e0:	00178793          	addi	a5,a5,1
800047e4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:552 (discriminator 1)
800047e8:	fec42703          	lw	a4,-20(s0)
800047ec:	00500793          	li	a5,5
800047f0:	f4e7f6e3          	bleu	a4,a5,8000473c <API_NI_Handler+0x710>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:560
        }
    }
    
    if (HW_get_32bit_reg(NI_TIMER) == NI_STATUS_INTER){
800047f4:	500007b7          	lui	a5,0x50000
800047f8:	01078513          	addi	a0,a5,16 # 50000010 <RAM_SIZE+0x4ff80010>
800047fc:	fa0fc0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80004800:	00050713          	mv	a4,a0
80004804:	000017b7          	lui	a5,0x1
80004808:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
8000480c:	02f71263          	bne	a4,a5,80004830 <API_NI_Handler+0x804>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:561
        printExecutedInstructions();
80004810:	364020ef          	jal	ra,80006b74 <printExecutedInstructions>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:562
        resetExecutedInstructions();
80004814:	3fc020ef          	jal	ra,80006c10 <resetExecutedInstructions>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:563
        HW_set_32bit_reg(NI_TIMER, DONE);
80004818:	800057b7          	lui	a5,0x80005
8000481c:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffc3505>
80004820:	500007b7          	lui	a5,0x50000
80004824:	01078513          	addi	a0,a5,16 # 50000010 <RAM_SIZE+0x4ff80010>
80004828:	f6cfc0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:566
    }
    
    return;
8000482c:	00000013          	nop
80004830:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:567
80004834:	01c12083          	lw	ra,28(sp)
80004838:	01812403          	lw	s0,24(sp)
8000483c:	02010113          	addi	sp,sp,32
80004840:	00008067          	ret

80004844 <API_RepositoryWakeUp>:
API_RepositoryWakeUp():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:10
#include "packet.h"
#include "services.h"

////////////////////////////////////////////////////////////
// Informs the Repository that the GLOBALMASTER is ready to receive the application info
void API_RepositoryWakeUp(){
80004844:	fe010113          	addi	sp,sp,-32
80004848:	00112e23          	sw	ra,28(sp)
8000484c:	00812c23          	sw	s0,24(sp)
80004850:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:13
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80004854:	0e0020ef          	jal	ra,80006934 <API_GetServiceSlot>
80004858:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:14
        if(mySlot == PIPE_FULL){
8000485c:	fec42703          	lw	a4,-20(s0)
80004860:	fdfe07b7          	lui	a5,0xfdfe0
80004864:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9ddad>
80004868:	00f71463          	bne	a4,a5,80004870 <API_RepositoryWakeUp+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:16
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
8000486c:	fc0ff0ef          	jal	ra,8000402c <API_NI_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:18
        }
    }while(mySlot == PIPE_FULL);
80004870:	fec42703          	lw	a4,-20(s0)
80004874:	fdfe07b7          	lui	a5,0xfdfe0
80004878:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9ddad>
8000487c:	fcf70ce3          	beq	a4,a5,80004854 <API_RepositoryWakeUp+0x10>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:21
    //printsv("I got a free service slot!! -> ", mySlot);

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80004880:	800217b7          	lui	a5,0x80021
80004884:	fec42703          	lw	a4,-20(s0)
80004888:	a9c78693          	addi	a3,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
8000488c:	00070793          	mv	a5,a4
80004890:	00479793          	slli	a5,a5,0x4
80004894:	40e787b3          	sub	a5,a5,a4
80004898:	00279793          	slli	a5,a5,0x2
8000489c:	00f687b3          	add	a5,a3,a5
800048a0:	feff0737          	lui	a4,0xfeff0
800048a4:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efadeae>
800048a8:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:23

    ServicePipe[mySlot].header.header       = makeAddress(0, 0) | PERIPH_SOUTH;
800048ac:	00000593          	li	a1,0
800048b0:	00000513          	li	a0,0
800048b4:	a8dfe0ef          	jal	ra,80003340 <makeAddress>
800048b8:	00050713          	mv	a4,a0
800048bc:	000407b7          	lui	a5,0x40
800048c0:	00f766b3          	or	a3,a4,a5
800048c4:	800217b7          	lui	a5,0x80021
800048c8:	fec42703          	lw	a4,-20(s0)
800048cc:	a9c78613          	addi	a2,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
800048d0:	00070793          	mv	a5,a4
800048d4:	00479793          	slli	a5,a5,0x4
800048d8:	40e787b3          	sub	a5,a5,a4
800048dc:	00279793          	slli	a5,a5,0x2
800048e0:	00f607b3          	add	a5,a2,a5
800048e4:	00d7a423          	sw	a3,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:24
    ServicePipe[mySlot].header.payload_size = PKT_SERVICE_SIZE;
800048e8:	800217b7          	lui	a5,0x80021
800048ec:	fec42703          	lw	a4,-20(s0)
800048f0:	a9c78693          	addi	a3,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
800048f4:	00070793          	mv	a5,a4
800048f8:	00479793          	slli	a5,a5,0x4
800048fc:	40e787b3          	sub	a5,a5,a4
80004900:	00279793          	slli	a5,a5,0x2
80004904:	00f687b3          	add	a5,a3,a5
80004908:	00b00713          	li	a4,11
8000490c:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:25
    ServicePipe[mySlot].header.service      = REPOSITORY_WAKEUP;
80004910:	800217b7          	lui	a5,0x80021
80004914:	fec42703          	lw	a4,-20(s0)
80004918:	a9c78693          	addi	a3,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
8000491c:	00070793          	mv	a5,a4
80004920:	00479793          	slli	a5,a5,0x4
80004924:	40e787b3          	sub	a5,a5,a4
80004928:	00279793          	slli	a5,a5,0x2
8000492c:	00f687b3          	add	a5,a3,a5
80004930:	10000713          	li	a4,256
80004934:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:27

    API_PushSendQueue(SERVICE, mySlot);
80004938:	fec42583          	lw	a1,-20(s0)
8000493c:	10100537          	lui	a0,0x10100
80004940:	a41fe0ef          	jal	ra,80003380 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:28
    return;    
80004944:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:29
}
80004948:	01c12083          	lw	ra,28(sp)
8000494c:	01812403          	lw	s0,24(sp)
80004950:	02010113          	addi	sp,sp,32
80004954:	00008067          	ret

80004958 <API_AddApplication>:
API_AddApplication():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:33

////////////////////////////////////////////////////////////
// Add one Application in the Execution Queue
void API_AddApplication(unsigned int appID, unsigned int appPeriod, unsigned int appExec, unsigned int appNTasks){
80004958:	fd010113          	addi	sp,sp,-48
8000495c:	02112623          	sw	ra,44(sp)
80004960:	02812423          	sw	s0,40(sp)
80004964:	03010413          	addi	s0,sp,48
80004968:	fca42e23          	sw	a0,-36(s0)
8000496c:	fcb42c23          	sw	a1,-40(s0)
80004970:	fcc42a23          	sw	a2,-44(s0)
80004974:	fcd42823          	sw	a3,-48(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:34
    int slot = API_GetApplicationFreeSlot();
80004978:	1c4000ef          	jal	ra,80004b3c <API_GetApplicationFreeSlot>
8000497c:	00050793          	mv	a5,a0
80004980:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:35
    applications[slot].occupied = TRUE;
80004984:	800216b7          	lui	a3,0x80021
80004988:	fec42703          	lw	a4,-20(s0)
8000498c:	00070793          	mv	a5,a4
80004990:	00279793          	slli	a5,a5,0x2
80004994:	00e787b3          	add	a5,a5,a4
80004998:	00579793          	slli	a5,a5,0x5
8000499c:	53868713          	addi	a4,a3,1336 # 80021538 <__stack_top+0xfffdf4e8>
800049a0:	00e787b3          	add	a5,a5,a4
800049a4:	00100713          	li	a4,1
800049a8:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:36
    applications[slot].appID = appID;
800049ac:	800217b7          	lui	a5,0x80021
800049b0:	fec42703          	lw	a4,-20(s0)
800049b4:	53878693          	addi	a3,a5,1336 # 80021538 <__stack_top+0xfffdf4e8>
800049b8:	00070793          	mv	a5,a4
800049bc:	00279793          	slli	a5,a5,0x2
800049c0:	00e787b3          	add	a5,a5,a4
800049c4:	00579793          	slli	a5,a5,0x5
800049c8:	00f687b3          	add	a5,a3,a5
800049cc:	fdc42703          	lw	a4,-36(s0)
800049d0:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:37
    applications[slot].appPeriod = appPeriod;
800049d4:	800217b7          	lui	a5,0x80021
800049d8:	fec42703          	lw	a4,-20(s0)
800049dc:	53878693          	addi	a3,a5,1336 # 80021538 <__stack_top+0xfffdf4e8>
800049e0:	00070793          	mv	a5,a4
800049e4:	00279793          	slli	a5,a5,0x2
800049e8:	00e787b3          	add	a5,a5,a4
800049ec:	00579793          	slli	a5,a5,0x5
800049f0:	00f687b3          	add	a5,a3,a5
800049f4:	fd842703          	lw	a4,-40(s0)
800049f8:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:38
    applications[slot].appExec = appExec;
800049fc:	800217b7          	lui	a5,0x80021
80004a00:	fec42703          	lw	a4,-20(s0)
80004a04:	53878693          	addi	a3,a5,1336 # 80021538 <__stack_top+0xfffdf4e8>
80004a08:	00070793          	mv	a5,a4
80004a0c:	00279793          	slli	a5,a5,0x2
80004a10:	00e787b3          	add	a5,a5,a4
80004a14:	00579793          	slli	a5,a5,0x5
80004a18:	00f687b3          	add	a5,a3,a5
80004a1c:	fd442703          	lw	a4,-44(s0)
80004a20:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:39
    applications[slot].numTasks = appNTasks;
80004a24:	800216b7          	lui	a3,0x80021
80004a28:	fec42703          	lw	a4,-20(s0)
80004a2c:	00070793          	mv	a5,a4
80004a30:	00279793          	slli	a5,a5,0x2
80004a34:	00e787b3          	add	a5,a5,a4
80004a38:	00579793          	slli	a5,a5,0x5
80004a3c:	53868713          	addi	a4,a3,1336 # 80021538 <__stack_top+0xfffdf4e8>
80004a40:	00e787b3          	add	a5,a5,a4
80004a44:	fd042703          	lw	a4,-48(s0)
80004a48:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:40
    applications[slot].nextRun = xTaskGetTickCount() + appPeriod;
80004a4c:	a61fd0ef          	jal	ra,800024ac <xTaskGetTickCount>
80004a50:	00050713          	mv	a4,a0
80004a54:	fd842783          	lw	a5,-40(s0)
80004a58:	00f706b3          	add	a3,a4,a5
80004a5c:	800217b7          	lui	a5,0x80021
80004a60:	fec42703          	lw	a4,-20(s0)
80004a64:	53878613          	addi	a2,a5,1336 # 80021538 <__stack_top+0xfffdf4e8>
80004a68:	00070793          	mv	a5,a4
80004a6c:	00279793          	slli	a5,a5,0x2
80004a70:	00e787b3          	add	a5,a5,a4
80004a74:	00579793          	slli	a5,a5,0x5
80004a78:	00f607b3          	add	a5,a2,a5
80004a7c:	08d7a623          	sw	a3,140(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:41
    applications[slot].executed = 0;
80004a80:	800216b7          	lui	a3,0x80021
80004a84:	fec42703          	lw	a4,-20(s0)
80004a88:	00070793          	mv	a5,a4
80004a8c:	00279793          	slli	a5,a5,0x2
80004a90:	00e787b3          	add	a5,a5,a4
80004a94:	00579793          	slli	a5,a5,0x5
80004a98:	53868713          	addi	a4,a3,1336 # 80021538 <__stack_top+0xfffdf4e8>
80004a9c:	00e787b3          	add	a5,a5,a4
80004aa0:	0807a823          	sw	zero,144(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:42
    applications[slot].lastStart = -1;
80004aa4:	800217b7          	lui	a5,0x80021
80004aa8:	fec42703          	lw	a4,-20(s0)
80004aac:	53878693          	addi	a3,a5,1336 # 80021538 <__stack_top+0xfffdf4e8>
80004ab0:	00070793          	mv	a5,a4
80004ab4:	00279793          	slli	a5,a5,0x2
80004ab8:	00e787b3          	add	a5,a5,a4
80004abc:	00579793          	slli	a5,a5,0x5
80004ac0:	00f687b3          	add	a5,a3,a5
80004ac4:	fff00713          	li	a4,-1
80004ac8:	08e7aa23          	sw	a4,148(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:43
    applications[slot].finishedTasks = 0;
80004acc:	800217b7          	lui	a5,0x80021
80004ad0:	fec42703          	lw	a4,-20(s0)
80004ad4:	53878693          	addi	a3,a5,1336 # 80021538 <__stack_top+0xfffdf4e8>
80004ad8:	00070793          	mv	a5,a4
80004adc:	00279793          	slli	a5,a5,0x2
80004ae0:	00e787b3          	add	a5,a5,a4
80004ae4:	00579793          	slli	a5,a5,0x5
80004ae8:	00f687b3          	add	a5,a3,a5
80004aec:	0807ac23          	sw	zero,152(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:44
    applications[slot].lastFinish = 0;
80004af0:	800217b7          	lui	a5,0x80021
80004af4:	fec42703          	lw	a4,-20(s0)
80004af8:	53878693          	addi	a3,a5,1336 # 80021538 <__stack_top+0xfffdf4e8>
80004afc:	00070793          	mv	a5,a4
80004b00:	00279793          	slli	a5,a5,0x2
80004b04:	00e787b3          	add	a5,a5,a4
80004b08:	00579793          	slli	a5,a5,0x5
80004b0c:	00f687b3          	add	a5,a3,a5
80004b10:	0807ae23          	sw	zero,156(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:45
    printsv("New application registered - ID: ", appID);
80004b14:	fdc42783          	lw	a5,-36(s0)
80004b18:	00078593          	mv	a1,a5
80004b1c:	800077b7          	lui	a5,0x80007
80004b20:	49c78513          	addi	a0,a5,1180 # 8000749c <__stack_top+0xfffc544c>
80004b24:	c00fe0ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:46
    return;
80004b28:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:47
}
80004b2c:	02c12083          	lw	ra,44(sp)
80004b30:	02812403          	lw	s0,40(sp)
80004b34:	03010113          	addi	sp,sp,48
80004b38:	00008067          	ret

80004b3c <API_GetApplicationFreeSlot>:
API_GetApplicationFreeSlot():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:65
}


////////////////////////////////////////////////////////////
// Gets an application slot that is free
unsigned int API_GetApplicationFreeSlot(){
80004b3c:	fe010113          	addi	sp,sp,-32
80004b40:	00112e23          	sw	ra,28(sp)
80004b44:	00812c23          	sw	s0,24(sp)
80004b48:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:67
    int i;
    for (i = 0; i < NUM_MAX_APPS; i++){
80004b4c:	fe042623          	sw	zero,-20(s0)
80004b50:	0400006f          	j	80004b90 <API_GetApplicationFreeSlot+0x54>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:68
        if (applications[i].occupied == FALSE){
80004b54:	800216b7          	lui	a3,0x80021
80004b58:	fec42703          	lw	a4,-20(s0)
80004b5c:	00070793          	mv	a5,a4
80004b60:	00279793          	slli	a5,a5,0x2
80004b64:	00e787b3          	add	a5,a5,a4
80004b68:	00579793          	slli	a5,a5,0x5
80004b6c:	53868713          	addi	a4,a3,1336 # 80021538 <__stack_top+0xfffdf4e8>
80004b70:	00e787b3          	add	a5,a5,a4
80004b74:	0007a783          	lw	a5,0(a5)
80004b78:	00079663          	bnez	a5,80004b84 <API_GetApplicationFreeSlot+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:69
            return i;
80004b7c:	fec42783          	lw	a5,-20(s0)
80004b80:	02c0006f          	j	80004bac <API_GetApplicationFreeSlot+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:67 (discriminator 2)
    for (i = 0; i < NUM_MAX_APPS; i++){
80004b84:	fec42783          	lw	a5,-20(s0)
80004b88:	00178793          	addi	a5,a5,1
80004b8c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:67 (discriminator 1)
80004b90:	fec42703          	lw	a4,-20(s0)
80004b94:	00b00793          	li	a5,11
80004b98:	fae7dee3          	ble	a4,a5,80004b54 <API_GetApplicationFreeSlot+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:72
        }
    }
    prints("returning erro4\n");
80004b9c:	800077b7          	lui	a5,0x80007
80004ba0:	4d478513          	addi	a0,a5,1236 # 800074d4 <__stack_top+0xfffc5484>
80004ba4:	ad4fe0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:73
    return ERRO;
80004ba8:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:74
}
80004bac:	00078513          	mv	a0,a5
80004bb0:	01c12083          	lw	ra,28(sp)
80004bb4:	01812403          	lw	s0,24(sp)
80004bb8:	02010113          	addi	sp,sp,32
80004bbc:	00008067          	ret

80004bc0 <API_ApplicationsReset>:
API_ApplicationsReset():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:78

////////////////////////////////////////////////////////////
// Reset applications vector
void API_ApplicationsReset(){
80004bc0:	fe010113          	addi	sp,sp,-32
80004bc4:	00812e23          	sw	s0,28(sp)
80004bc8:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:80
    int i;
    for (i = 0; i < NUM_MAX_APPS; i++){
80004bcc:	fe042623          	sw	zero,-20(s0)
80004bd0:	0340006f          	j	80004c04 <API_ApplicationsReset+0x44>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:81 (discriminator 3)
        applications[i].occupied = FALSE;
80004bd4:	800216b7          	lui	a3,0x80021
80004bd8:	fec42703          	lw	a4,-20(s0)
80004bdc:	00070793          	mv	a5,a4
80004be0:	00279793          	slli	a5,a5,0x2
80004be4:	00e787b3          	add	a5,a5,a4
80004be8:	00579793          	slli	a5,a5,0x5
80004bec:	53868713          	addi	a4,a3,1336 # 80021538 <__stack_top+0xfffdf4e8>
80004bf0:	00e787b3          	add	a5,a5,a4
80004bf4:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:80 (discriminator 3)
    for (i = 0; i < NUM_MAX_APPS; i++){
80004bf8:	fec42783          	lw	a5,-20(s0)
80004bfc:	00178793          	addi	a5,a5,1
80004c00:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:80 (discriminator 1)
80004c04:	fec42703          	lw	a4,-20(s0)
80004c08:	00b00793          	li	a5,11
80004c0c:	fce7d4e3          	ble	a4,a5,80004bd4 <API_ApplicationsReset+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:83
    }
    return;
80004c10:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:84
}
80004c14:	01c12403          	lw	s0,28(sp)
80004c18:	02010113          	addi	sp,sp,32
80004c1c:	00008067          	ret

80004c20 <API_TilesReset>:
API_TilesReset():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:88

////////////////////////////////////////////////////////////
// Initialize the Tiles Info
void API_TilesReset(){
80004c20:	fe010113          	addi	sp,sp,-32
80004c24:	00812e23          	sw	s0,28(sp)
80004c28:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90
    int i, m, n;
    for (m = 0; m < DIM_X; m++){
80004c2c:	fe042623          	sw	zero,-20(s0)
80004c30:	0fc0006f          	j	80004d2c <API_TilesReset+0x10c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:91
        for (n = 0; n < DIM_Y; n++){
80004c34:	fe042423          	sw	zero,-24(s0)
80004c38:	0dc0006f          	j	80004d14 <API_TilesReset+0xf4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:92 (discriminator 3)
            Tiles[m][n].temperature = 273;
80004c3c:	80022637          	lui	a2,0x80022
80004c40:	fe842783          	lw	a5,-24(s0)
80004c44:	fec42683          	lw	a3,-20(s0)
80004c48:	00078713          	mv	a4,a5
80004c4c:	00171713          	slli	a4,a4,0x1
80004c50:	00f70733          	add	a4,a4,a5
80004c54:	00271793          	slli	a5,a4,0x2
80004c58:	00078713          	mv	a4,a5
80004c5c:	00068793          	mv	a5,a3
80004c60:	00379793          	slli	a5,a5,0x3
80004c64:	00d787b3          	add	a5,a5,a3
80004c68:	00279793          	slli	a5,a5,0x2
80004c6c:	00f70733          	add	a4,a4,a5
80004c70:	fd460793          	addi	a5,a2,-44 # 80021fd4 <__stack_top+0xfffdff84>
80004c74:	00f707b3          	add	a5,a4,a5
80004c78:	11100713          	li	a4,273
80004c7c:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:93 (discriminator 3)
            Tiles[m][n].frequency = 1000;
80004c80:	80022737          	lui	a4,0x80022
80004c84:	fe842783          	lw	a5,-24(s0)
80004c88:	fec42683          	lw	a3,-20(s0)
80004c8c:	fd470613          	addi	a2,a4,-44 # 80021fd4 <__stack_top+0xfffdff84>
80004c90:	00078713          	mv	a4,a5
80004c94:	00171713          	slli	a4,a4,0x1
80004c98:	00f70733          	add	a4,a4,a5
80004c9c:	00271793          	slli	a5,a4,0x2
80004ca0:	00078713          	mv	a4,a5
80004ca4:	00068793          	mv	a5,a3
80004ca8:	00379793          	slli	a5,a5,0x3
80004cac:	00d787b3          	add	a5,a5,a3
80004cb0:	00279793          	slli	a5,a5,0x2
80004cb4:	00f707b3          	add	a5,a4,a5
80004cb8:	00f607b3          	add	a5,a2,a5
80004cbc:	3e800713          	li	a4,1000
80004cc0:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:94 (discriminator 3)
            Tiles[m][n].taskSlots = NUM_MAX_TASKS;
80004cc4:	80022737          	lui	a4,0x80022
80004cc8:	fe842783          	lw	a5,-24(s0)
80004ccc:	fec42683          	lw	a3,-20(s0)
80004cd0:	fd470613          	addi	a2,a4,-44 # 80021fd4 <__stack_top+0xfffdff84>
80004cd4:	00078713          	mv	a4,a5
80004cd8:	00171713          	slli	a4,a4,0x1
80004cdc:	00f70733          	add	a4,a4,a5
80004ce0:	00271793          	slli	a5,a4,0x2
80004ce4:	00078713          	mv	a4,a5
80004ce8:	00068793          	mv	a5,a3
80004cec:	00379793          	slli	a5,a5,0x3
80004cf0:	00d787b3          	add	a5,a5,a3
80004cf4:	00279793          	slli	a5,a5,0x2
80004cf8:	00f707b3          	add	a5,a4,a5
80004cfc:	00f607b3          	add	a5,a2,a5
80004d00:	00600713          	li	a4,6
80004d04:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:91 (discriminator 3)
        for (n = 0; n < DIM_Y; n++){
80004d08:	fe842783          	lw	a5,-24(s0)
80004d0c:	00178793          	addi	a5,a5,1
80004d10:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:91 (discriminator 1)
80004d14:	fe842703          	lw	a4,-24(s0)
80004d18:	00200793          	li	a5,2
80004d1c:	f2e7d0e3          	ble	a4,a5,80004c3c <API_TilesReset+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90 (discriminator 2)
    for (m = 0; m < DIM_X; m++){
80004d20:	fec42783          	lw	a5,-20(s0)
80004d24:	00178793          	addi	a5,a5,1
80004d28:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90 (discriminator 1)
80004d2c:	fec42703          	lw	a4,-20(s0)
80004d30:	00200793          	li	a5,2
80004d34:	f0e7d0e3          	ble	a4,a5,80004c34 <API_TilesReset+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:100
            /*for(i = 0; i < NUM_MAX_TASKS; i++){
                Tiles[m][n].AppTask[i] = NONE;
            }*/
        }
    }    
    return;
80004d38:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:101
}
80004d3c:	01c12403          	lw	s0,28(sp)
80004d40:	02010113          	addi	sp,sp,32
80004d44:	00008067          	ret

80004d48 <GeneratePatternMatrix>:
GeneratePatternMatrix():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:104

// Generates the Pattern Matrix for Pattern mapping
void GeneratePatternMatrix(){
80004d48:	fe010113          	addi	sp,sp,-32
80004d4c:	00812e23          	sw	s0,28(sp)
80004d50:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:106
    int i, aux;
    aux = 0;
80004d54:	fe042423          	sw	zero,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:107
    priorityPointer = 0;
80004d58:	800227b7          	lui	a5,0x80022
80004d5c:	fc07a823          	sw	zero,-48(a5) # 80021fd0 <__stack_top+0xfffdff80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:109
    //prints("Testando Pattern: \n");
    for(i=0; i<(DIM_X*DIM_Y); i++){
80004d60:	fe042623          	sw	zero,-20(s0)
80004d64:	0700006f          	j	80004dd4 <GeneratePatternMatrix+0x8c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:111
        //printi(i); prints(": "); printi(aux); prints("\n");
        priorityMatrix[i] = (aux / DIM_X << 8) | aux % DIM_X;
80004d68:	fe842703          	lw	a4,-24(s0)
80004d6c:	00300793          	li	a5,3
80004d70:	02f747b3          	div	a5,a4,a5
80004d74:	00879713          	slli	a4,a5,0x8
80004d78:	fe842683          	lw	a3,-24(s0)
80004d7c:	00300793          	li	a5,3
80004d80:	02f6e7b3          	rem	a5,a3,a5
80004d84:	00f767b3          	or	a5,a4,a5
80004d88:	00078693          	mv	a3,a5
80004d8c:	800217b7          	lui	a5,0x80021
80004d90:	fec42703          	lw	a4,-20(s0)
80004d94:	00271713          	slli	a4,a4,0x2
80004d98:	51478793          	addi	a5,a5,1300 # 80021514 <__stack_top+0xfffdf4c4>
80004d9c:	00f707b3          	add	a5,a4,a5
80004da0:	00d7a023          	sw	a3,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:130
            else{
                aux = 1;
            }
        } 
        else{
            if(aux<=((DIM_X*DIM_Y)-3))
80004da4:	fe842703          	lw	a4,-24(s0)
80004da8:	00600793          	li	a5,6
80004dac:	00e7ca63          	blt	a5,a4,80004dc0 <GeneratePatternMatrix+0x78>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:131
                aux += 2;
80004db0:	fe842783          	lw	a5,-24(s0)
80004db4:	00278793          	addi	a5,a5,2
80004db8:	fef42423          	sw	a5,-24(s0)
80004dbc:	00c0006f          	j	80004dc8 <GeneratePatternMatrix+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:133
            else
                aux = 1;
80004dc0:	00100793          	li	a5,1
80004dc4:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:109 (discriminator 2)
    for(i=0; i<(DIM_X*DIM_Y); i++){
80004dc8:	fec42783          	lw	a5,-20(s0)
80004dcc:	00178793          	addi	a5,a5,1
80004dd0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:109 (discriminator 1)
80004dd4:	fec42703          	lw	a4,-20(s0)
80004dd8:	00800793          	li	a5,8
80004ddc:	f8e7d6e3          	ble	a4,a5,80004d68 <GeneratePatternMatrix+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:136
        }    
    }
    return;
80004de0:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:137
}
80004de4:	01c12403          	lw	s0,28(sp)
80004de8:	02010113          	addi	sp,sp,32
80004dec:	00008067          	ret

80004df0 <API_AllocateTasks>:
API_AllocateTasks():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:140

// Checks if there is some task to allocate...
void API_AllocateTasks(unsigned int tick){
80004df0:	fd010113          	addi	sp,sp,-48
80004df4:	02112623          	sw	ra,44(sp)
80004df8:	02812423          	sw	s0,40(sp)
80004dfc:	02912223          	sw	s1,36(sp)
80004e00:	03010413          	addi	s0,sp,48
80004e04:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:144
    int i, j;
    int addr, slot;
    // Iterate around every possible application
    for (i = 0; i < NUM_MAX_APPS; i++){
80004e08:	fe042623          	sw	zero,-20(s0)
80004e0c:	2980006f          	j	800050a4 <API_AllocateTasks+0x2b4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:146
        // If the application is valid
        if (applications[i].occupied == TRUE){
80004e10:	800216b7          	lui	a3,0x80021
80004e14:	fec42703          	lw	a4,-20(s0)
80004e18:	00070793          	mv	a5,a4
80004e1c:	00279793          	slli	a5,a5,0x2
80004e20:	00e787b3          	add	a5,a5,a4
80004e24:	00579793          	slli	a5,a5,0x5
80004e28:	53868713          	addi	a4,a3,1336 # 80021538 <__stack_top+0xfffdf4e8>
80004e2c:	00e787b3          	add	a5,a5,a4
80004e30:	0007a703          	lw	a4,0(a5)
80004e34:	00100793          	li	a5,1
80004e38:	26f71063          	bne	a4,a5,80005098 <API_AllocateTasks+0x2a8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:149

            // If the nextRun of this application is right now, then release each task!
            if(applications[i].nextRun <= tick && applications[i].nextRun != applications[i].lastStart){
80004e3c:	800217b7          	lui	a5,0x80021
80004e40:	fec42703          	lw	a4,-20(s0)
80004e44:	53878693          	addi	a3,a5,1336 # 80021538 <__stack_top+0xfffdf4e8>
80004e48:	00070793          	mv	a5,a4
80004e4c:	00279793          	slli	a5,a5,0x2
80004e50:	00e787b3          	add	a5,a5,a4
80004e54:	00579793          	slli	a5,a5,0x5
80004e58:	00f687b3          	add	a5,a3,a5
80004e5c:	08c7a783          	lw	a5,140(a5)
80004e60:	fdc42703          	lw	a4,-36(s0)
80004e64:	22f76a63          	bltu	a4,a5,80005098 <API_AllocateTasks+0x2a8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:149 (discriminator 1)
80004e68:	800217b7          	lui	a5,0x80021
80004e6c:	fec42703          	lw	a4,-20(s0)
80004e70:	53878693          	addi	a3,a5,1336 # 80021538 <__stack_top+0xfffdf4e8>
80004e74:	00070793          	mv	a5,a4
80004e78:	00279793          	slli	a5,a5,0x2
80004e7c:	00e787b3          	add	a5,a5,a4
80004e80:	00579793          	slli	a5,a5,0x5
80004e84:	00f687b3          	add	a5,a3,a5
80004e88:	08c7a683          	lw	a3,140(a5)
80004e8c:	800217b7          	lui	a5,0x80021
80004e90:	fec42703          	lw	a4,-20(s0)
80004e94:	53878613          	addi	a2,a5,1336 # 80021538 <__stack_top+0xfffdf4e8>
80004e98:	00070793          	mv	a5,a4
80004e9c:	00279793          	slli	a5,a5,0x2
80004ea0:	00e787b3          	add	a5,a5,a4
80004ea4:	00579793          	slli	a5,a5,0x5
80004ea8:	00f607b3          	add	a5,a2,a5
80004eac:	0947a783          	lw	a5,148(a5)
80004eb0:	1ef68463          	beq	a3,a5,80005098 <API_AllocateTasks+0x2a8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:152

                // If the system has space to accept every task
                if(applications[i].numTasks <= API_GetSystemTasksSlots()){
80004eb4:	800216b7          	lui	a3,0x80021
80004eb8:	fec42703          	lw	a4,-20(s0)
80004ebc:	00070793          	mv	a5,a4
80004ec0:	00279793          	slli	a5,a5,0x2
80004ec4:	00e787b3          	add	a5,a5,a4
80004ec8:	00579793          	slli	a5,a5,0x5
80004ecc:	53868713          	addi	a4,a3,1336 # 80021538 <__stack_top+0xfffdf4e8>
80004ed0:	00e787b3          	add	a5,a5,a4
80004ed4:	0107a483          	lw	s1,16(a5)
80004ed8:	121000ef          	jal	ra,800057f8 <API_GetSystemTasksSlots>
80004edc:	00050793          	mv	a5,a0
80004ee0:	1a97ec63          	bltu	a5,s1,80005098 <API_AllocateTasks+0x2a8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:155
                    
                    // Iterates around each task of this application
                    for(j = 0; j < applications[i].numTasks; j++){
80004ee4:	fe042423          	sw	zero,-24(s0)
80004ee8:	13c0006f          	j	80005024 <API_AllocateTasks+0x234>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:158

                        for(;;){
                            addr = getNextPriorityAddr();
80004eec:	53c000ef          	jal	ra,80005428 <getNextPriorityAddr>
80004ef0:	00050793          	mv	a5,a0
80004ef4:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:159
                            slot = API_GetTaskSlotFromTile(addr, i, j);
80004ef8:	fe442783          	lw	a5,-28(s0)
80004efc:	fec42703          	lw	a4,-20(s0)
80004f00:	fe842683          	lw	a3,-24(s0)
80004f04:	00068613          	mv	a2,a3
80004f08:	00070593          	mv	a1,a4
80004f0c:	00078513          	mv	a0,a5
80004f10:	64c000ef          	jal	ra,8000555c <API_GetTaskSlotFromTile>
80004f14:	00050793          	mv	a5,a0
80004f18:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:160
                            if (slot != ERRO)
80004f1c:	fe042703          	lw	a4,-32(s0)
80004f20:	fff00793          	li	a5,-1
80004f24:	00f71463          	bne	a4,a5,80004f2c <API_AllocateTasks+0x13c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:158
                            addr = getNextPriorityAddr();
80004f28:	fc5ff06f          	j	80004eec <API_AllocateTasks+0xfc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:161
                                break;
80004f2c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:163
                        }
                        applications[i].tasks[j].status = TASK_ALLOCATING;
80004f30:	80021737          	lui	a4,0x80021
80004f34:	fe842783          	lw	a5,-24(s0)
80004f38:	fec42683          	lw	a3,-20(s0)
80004f3c:	53870613          	addi	a2,a4,1336 # 80021538 <__stack_top+0xfffdf4e8>
80004f40:	00078713          	mv	a4,a5
80004f44:	00171713          	slli	a4,a4,0x1
80004f48:	00f70733          	add	a4,a4,a5
80004f4c:	00271793          	slli	a5,a4,0x2
80004f50:	00078713          	mv	a4,a5
80004f54:	00068793          	mv	a5,a3
80004f58:	00279793          	slli	a5,a5,0x2
80004f5c:	00d787b3          	add	a5,a5,a3
80004f60:	00579793          	slli	a5,a5,0x5
80004f64:	00f707b3          	add	a5,a4,a5
80004f68:	00f607b3          	add	a5,a2,a5
80004f6c:	00300713          	li	a4,3
80004f70:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:164
                        applications[i].tasks[j].addr = addr;
80004f74:	fe442603          	lw	a2,-28(s0)
80004f78:	80021737          	lui	a4,0x80021
80004f7c:	fe842783          	lw	a5,-24(s0)
80004f80:	fec42683          	lw	a3,-20(s0)
80004f84:	53870593          	addi	a1,a4,1336 # 80021538 <__stack_top+0xfffdf4e8>
80004f88:	00078713          	mv	a4,a5
80004f8c:	00171713          	slli	a4,a4,0x1
80004f90:	00f70733          	add	a4,a4,a5
80004f94:	00271793          	slli	a5,a4,0x2
80004f98:	00078713          	mv	a4,a5
80004f9c:	00068793          	mv	a5,a3
80004fa0:	00279793          	slli	a5,a5,0x2
80004fa4:	00d787b3          	add	a5,a5,a3
80004fa8:	00579793          	slli	a5,a5,0x5
80004fac:	00f707b3          	add	a5,a4,a5
80004fb0:	00f587b3          	add	a5,a1,a5
80004fb4:	00c7ac23          	sw	a2,24(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:165
                        applications[i].tasks[j].slot = slot;
80004fb8:	fe042603          	lw	a2,-32(s0)
80004fbc:	80021737          	lui	a4,0x80021
80004fc0:	fe842783          	lw	a5,-24(s0)
80004fc4:	fec42683          	lw	a3,-20(s0)
80004fc8:	53870593          	addi	a1,a4,1336 # 80021538 <__stack_top+0xfffdf4e8>
80004fcc:	00078713          	mv	a4,a5
80004fd0:	00171713          	slli	a4,a4,0x1
80004fd4:	00f70733          	add	a4,a4,a5
80004fd8:	00271793          	slli	a5,a4,0x2
80004fdc:	00078713          	mv	a4,a5
80004fe0:	00068793          	mv	a5,a3
80004fe4:	00279793          	slli	a5,a5,0x2
80004fe8:	00d787b3          	add	a5,a5,a3
80004fec:	00579793          	slli	a5,a5,0x5
80004ff0:	00f707b3          	add	a5,a4,a5
80004ff4:	00f587b3          	add	a5,a1,a5
80004ff8:	00c7ae23          	sw	a2,28(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:166
                        API_RepositoryAllocation(i, j, addr);
80004ffc:	fec42783          	lw	a5,-20(s0)
80005000:	fe842703          	lw	a4,-24(s0)
80005004:	fe442683          	lw	a3,-28(s0)
80005008:	00068613          	mv	a2,a3
8000500c:	00070593          	mv	a1,a4
80005010:	00078513          	mv	a0,a5
80005014:	0d1000ef          	jal	ra,800058e4 <API_RepositoryAllocation>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:155
                    for(j = 0; j < applications[i].numTasks; j++){
80005018:	fe842783          	lw	a5,-24(s0)
8000501c:	00178793          	addi	a5,a5,1
80005020:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:155 (discriminator 1)
80005024:	800216b7          	lui	a3,0x80021
80005028:	fec42703          	lw	a4,-20(s0)
8000502c:	00070793          	mv	a5,a4
80005030:	00279793          	slli	a5,a5,0x2
80005034:	00e787b3          	add	a5,a5,a4
80005038:	00579793          	slli	a5,a5,0x5
8000503c:	53868713          	addi	a4,a3,1336 # 80021538 <__stack_top+0xfffdf4e8>
80005040:	00e787b3          	add	a5,a5,a4
80005044:	0107a703          	lw	a4,16(a5)
80005048:	fe842783          	lw	a5,-24(s0)
8000504c:	eae7e0e3          	bltu	a5,a4,80004eec <API_AllocateTasks+0xfc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:170
                    }

                    // Resets the lastStart
                    applications[i].lastStart = applications[i].nextRun;
80005050:	800217b7          	lui	a5,0x80021
80005054:	fec42703          	lw	a4,-20(s0)
80005058:	53878693          	addi	a3,a5,1336 # 80021538 <__stack_top+0xfffdf4e8>
8000505c:	00070793          	mv	a5,a4
80005060:	00279793          	slli	a5,a5,0x2
80005064:	00e787b3          	add	a5,a5,a4
80005068:	00579793          	slli	a5,a5,0x5
8000506c:	00f687b3          	add	a5,a3,a5
80005070:	08c7a683          	lw	a3,140(a5)
80005074:	800217b7          	lui	a5,0x80021
80005078:	fec42703          	lw	a4,-20(s0)
8000507c:	53878613          	addi	a2,a5,1336 # 80021538 <__stack_top+0xfffdf4e8>
80005080:	00070793          	mv	a5,a4
80005084:	00279793          	slli	a5,a5,0x2
80005088:	00e787b3          	add	a5,a5,a4
8000508c:	00579793          	slli	a5,a5,0x5
80005090:	00f607b3          	add	a5,a2,a5
80005094:	08d7aa23          	sw	a3,148(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:144 (discriminator 2)
    for (i = 0; i < NUM_MAX_APPS; i++){
80005098:	fec42783          	lw	a5,-20(s0)
8000509c:	00178793          	addi	a5,a5,1
800050a0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:144 (discriminator 1)
800050a4:	fec42703          	lw	a4,-20(s0)
800050a8:	00b00793          	li	a5,11
800050ac:	d6e7d2e3          	ble	a4,a5,80004e10 <API_AllocateTasks+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:176
                }
            }
        }
    }

    return;
800050b0:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:177
}
800050b4:	02c12083          	lw	ra,44(sp)
800050b8:	02812403          	lw	s0,40(sp)
800050bc:	02412483          	lw	s1,36(sp)
800050c0:	03010113          	addi	sp,sp,48
800050c4:	00008067          	ret

800050c8 <API_DealocateTask>:
API_DealocateTask():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:179

void API_DealocateTask(unsigned int task_id, unsigned int app_id){
800050c8:	fd010113          	addi	sp,sp,-48
800050cc:	02112623          	sw	ra,44(sp)
800050d0:	02812423          	sw	s0,40(sp)
800050d4:	03010413          	addi	s0,sp,48
800050d8:	fca42e23          	sw	a0,-36(s0)
800050dc:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:181
    unsigned int i, flag, tick;
    applications[app_id].tasks[task_id].status = TASK_FINISHED;
800050e0:	80021737          	lui	a4,0x80021
800050e4:	fdc42783          	lw	a5,-36(s0)
800050e8:	fd842683          	lw	a3,-40(s0)
800050ec:	53870613          	addi	a2,a4,1336 # 80021538 <__stack_top+0xfffdf4e8>
800050f0:	00078713          	mv	a4,a5
800050f4:	00171713          	slli	a4,a4,0x1
800050f8:	00f70733          	add	a4,a4,a5
800050fc:	00271793          	slli	a5,a4,0x2
80005100:	00078713          	mv	a4,a5
80005104:	00068793          	mv	a5,a3
80005108:	00279793          	slli	a5,a5,0x2
8000510c:	00d787b3          	add	a5,a5,a3
80005110:	00579793          	slli	a5,a5,0x5
80005114:	00f707b3          	add	a5,a4,a5
80005118:	00f607b3          	add	a5,a2,a5
8000511c:	00200713          	li	a4,2
80005120:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:183
    // verify if every task has finished
    flag = 1;
80005124:	00100793          	li	a5,1
80005128:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:184
    for (i = 0; i < applications[app_id].numTasks; i++){
8000512c:	fe042623          	sw	zero,-20(s0)
80005130:	0600006f          	j	80005190 <API_DealocateTask+0xc8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:186
        //printsvsv("checking ", i, "task is: ", applications[app_id].tasks[i].status);
        if(applications[app_id].tasks[i].status != TASK_FINISHED){
80005134:	80021737          	lui	a4,0x80021
80005138:	fec42783          	lw	a5,-20(s0)
8000513c:	fd842683          	lw	a3,-40(s0)
80005140:	53870613          	addi	a2,a4,1336 # 80021538 <__stack_top+0xfffdf4e8>
80005144:	00078713          	mv	a4,a5
80005148:	00171713          	slli	a4,a4,0x1
8000514c:	00f70733          	add	a4,a4,a5
80005150:	00271793          	slli	a5,a4,0x2
80005154:	00078713          	mv	a4,a5
80005158:	00068793          	mv	a5,a3
8000515c:	00279793          	slli	a5,a5,0x2
80005160:	00d787b3          	add	a5,a5,a3
80005164:	00579793          	slli	a5,a5,0x5
80005168:	00f707b3          	add	a5,a4,a5
8000516c:	00f607b3          	add	a5,a2,a5
80005170:	0147a703          	lw	a4,20(a5)
80005174:	00200793          	li	a5,2
80005178:	00f70663          	beq	a4,a5,80005184 <API_DealocateTask+0xbc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:187
            flag = 0;
8000517c:	fe042423          	sw	zero,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:188
            break;
80005180:	03c0006f          	j	800051bc <API_DealocateTask+0xf4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:184 (discriminator 2)
    for (i = 0; i < applications[app_id].numTasks; i++){
80005184:	fec42783          	lw	a5,-20(s0)
80005188:	00178793          	addi	a5,a5,1
8000518c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:184 (discriminator 1)
80005190:	800216b7          	lui	a3,0x80021
80005194:	fd842703          	lw	a4,-40(s0)
80005198:	00070793          	mv	a5,a4
8000519c:	00279793          	slli	a5,a5,0x2
800051a0:	00e787b3          	add	a5,a5,a4
800051a4:	00579793          	slli	a5,a5,0x5
800051a8:	53868713          	addi	a4,a3,1336 # 80021538 <__stack_top+0xfffdf4e8>
800051ac:	00e787b3          	add	a5,a5,a4
800051b0:	0107a783          	lw	a5,16(a5)
800051b4:	fec42703          	lw	a4,-20(s0)
800051b8:	f6f76ee3          	bltu	a4,a5,80005134 <API_DealocateTask+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:192
        }
    }
    // in positive case
    if(flag){
800051bc:	fe842783          	lw	a5,-24(s0)
800051c0:	24078663          	beqz	a5,8000540c <API_DealocateTask+0x344>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:194
        // register that the application has executed another time
        tick = xTaskGetTickCount();
800051c4:	ae8fd0ef          	jal	ra,800024ac <xTaskGetTickCount>
800051c8:	fea42223          	sw	a0,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:195
        applications[app_id].executed++;
800051cc:	800216b7          	lui	a3,0x80021
800051d0:	fd842703          	lw	a4,-40(s0)
800051d4:	00070793          	mv	a5,a4
800051d8:	00279793          	slli	a5,a5,0x2
800051dc:	00e787b3          	add	a5,a5,a4
800051e0:	00579793          	slli	a5,a5,0x5
800051e4:	53868713          	addi	a4,a3,1336 # 80021538 <__stack_top+0xfffdf4e8>
800051e8:	00e787b3          	add	a5,a5,a4
800051ec:	0907a783          	lw	a5,144(a5)
800051f0:	00178693          	addi	a3,a5,1
800051f4:	80021637          	lui	a2,0x80021
800051f8:	fd842703          	lw	a4,-40(s0)
800051fc:	00070793          	mv	a5,a4
80005200:	00279793          	slli	a5,a5,0x2
80005204:	00e787b3          	add	a5,a5,a4
80005208:	00579793          	slli	a5,a5,0x5
8000520c:	53860713          	addi	a4,a2,1336 # 80021538 <__stack_top+0xfffdf4e8>
80005210:	00e787b3          	add	a5,a5,a4
80005214:	08d7a823          	sw	a3,144(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:196
        printsvsv("Application ", app_id, "was executed in ", (tick - applications[app_id].lastStart));
80005218:	fd842583          	lw	a1,-40(s0)
8000521c:	800217b7          	lui	a5,0x80021
80005220:	fd842703          	lw	a4,-40(s0)
80005224:	53878693          	addi	a3,a5,1336 # 80021538 <__stack_top+0xfffdf4e8>
80005228:	00070793          	mv	a5,a4
8000522c:	00279793          	slli	a5,a5,0x2
80005230:	00e787b3          	add	a5,a5,a4
80005234:	00579793          	slli	a5,a5,0x5
80005238:	00f687b3          	add	a5,a3,a5
8000523c:	0947a783          	lw	a5,148(a5)
80005240:	fe442703          	lw	a4,-28(s0)
80005244:	40f707b3          	sub	a5,a4,a5
80005248:	00078693          	mv	a3,a5
8000524c:	800077b7          	lui	a5,0x80007
80005250:	4e878613          	addi	a2,a5,1256 # 800074e8 <__stack_top+0xfffc5498>
80005254:	800077b7          	lui	a5,0x80007
80005258:	4fc78513          	addi	a0,a5,1276 # 800074fc <__stack_top+0xfffc54ac>
8000525c:	d11fd0ef          	jal	ra,80002f6c <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:197
        applications[app_id].lastFinish = tick;
80005260:	800217b7          	lui	a5,0x80021
80005264:	fd842703          	lw	a4,-40(s0)
80005268:	53878693          	addi	a3,a5,1336 # 80021538 <__stack_top+0xfffdf4e8>
8000526c:	00070793          	mv	a5,a4
80005270:	00279793          	slli	a5,a5,0x2
80005274:	00e787b3          	add	a5,a5,a4
80005278:	00579793          	slli	a5,a5,0x5
8000527c:	00f687b3          	add	a5,a3,a5
80005280:	fe442703          	lw	a4,-28(s0)
80005284:	08e7ae23          	sw	a4,156(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:199
        // if the application must run another time
        if(applications[app_id].appExec > applications[app_id].executed){
80005288:	800217b7          	lui	a5,0x80021
8000528c:	fd842703          	lw	a4,-40(s0)
80005290:	53878693          	addi	a3,a5,1336 # 80021538 <__stack_top+0xfffdf4e8>
80005294:	00070793          	mv	a5,a4
80005298:	00279793          	slli	a5,a5,0x2
8000529c:	00e787b3          	add	a5,a5,a4
800052a0:	00579793          	slli	a5,a5,0x5
800052a4:	00f687b3          	add	a5,a3,a5
800052a8:	00c7a683          	lw	a3,12(a5)
800052ac:	80021637          	lui	a2,0x80021
800052b0:	fd842703          	lw	a4,-40(s0)
800052b4:	00070793          	mv	a5,a4
800052b8:	00279793          	slli	a5,a5,0x2
800052bc:	00e787b3          	add	a5,a5,a4
800052c0:	00579793          	slli	a5,a5,0x5
800052c4:	53860713          	addi	a4,a2,1336 # 80021538 <__stack_top+0xfffdf4e8>
800052c8:	00e787b3          	add	a5,a5,a4
800052cc:	0907a783          	lw	a5,144(a5)
800052d0:	0ad7fa63          	bleu	a3,a5,80005384 <API_DealocateTask+0x2bc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:200
            printsv("\t\tThis application still need to run: ", (applications[app_id].appExec - applications[app_id].executed));
800052d4:	800217b7          	lui	a5,0x80021
800052d8:	fd842703          	lw	a4,-40(s0)
800052dc:	53878693          	addi	a3,a5,1336 # 80021538 <__stack_top+0xfffdf4e8>
800052e0:	00070793          	mv	a5,a4
800052e4:	00279793          	slli	a5,a5,0x2
800052e8:	00e787b3          	add	a5,a5,a4
800052ec:	00579793          	slli	a5,a5,0x5
800052f0:	00f687b3          	add	a5,a3,a5
800052f4:	00c7a683          	lw	a3,12(a5)
800052f8:	80021637          	lui	a2,0x80021
800052fc:	fd842703          	lw	a4,-40(s0)
80005300:	00070793          	mv	a5,a4
80005304:	00279793          	slli	a5,a5,0x2
80005308:	00e787b3          	add	a5,a5,a4
8000530c:	00579793          	slli	a5,a5,0x5
80005310:	53860713          	addi	a4,a2,1336 # 80021538 <__stack_top+0xfffdf4e8>
80005314:	00e787b3          	add	a5,a5,a4
80005318:	0907a783          	lw	a5,144(a5)
8000531c:	40f687b3          	sub	a5,a3,a5
80005320:	00078593          	mv	a1,a5
80005324:	800077b7          	lui	a5,0x80007
80005328:	50c78513          	addi	a0,a5,1292 # 8000750c <__stack_top+0xfffc54bc>
8000532c:	bf9fd0ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:201
            applications[app_id].nextRun = tick + applications[app_id].appPeriod;
80005330:	800217b7          	lui	a5,0x80021
80005334:	fd842703          	lw	a4,-40(s0)
80005338:	53878693          	addi	a3,a5,1336 # 80021538 <__stack_top+0xfffdf4e8>
8000533c:	00070793          	mv	a5,a4
80005340:	00279793          	slli	a5,a5,0x2
80005344:	00e787b3          	add	a5,a5,a4
80005348:	00579793          	slli	a5,a5,0x5
8000534c:	00f687b3          	add	a5,a3,a5
80005350:	0087a703          	lw	a4,8(a5)
80005354:	fe442783          	lw	a5,-28(s0)
80005358:	00f706b3          	add	a3,a4,a5
8000535c:	800217b7          	lui	a5,0x80021
80005360:	fd842703          	lw	a4,-40(s0)
80005364:	53878613          	addi	a2,a5,1336 # 80021538 <__stack_top+0xfffdf4e8>
80005368:	00070793          	mv	a5,a4
8000536c:	00279793          	slli	a5,a5,0x2
80005370:	00e787b3          	add	a5,a5,a4
80005374:	00579793          	slli	a5,a5,0x5
80005378:	00f607b3          	add	a5,a2,a5
8000537c:	08d7a623          	sw	a3,140(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:215
                }
            }
            _exit(0xfe10);
        }        
    }
    return;
80005380:	08c0006f          	j	8000540c <API_DealocateTask+0x344>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:203
            prints("\t\tThis application is DONE!\n");
80005384:	800077b7          	lui	a5,0x80007
80005388:	53478513          	addi	a0,a5,1332 # 80007534 <__stack_top+0xfffc54e4>
8000538c:	aedfd0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:204
            applications[app_id].occupied = FALSE;
80005390:	800216b7          	lui	a3,0x80021
80005394:	fd842703          	lw	a4,-40(s0)
80005398:	00070793          	mv	a5,a4
8000539c:	00279793          	slli	a5,a5,0x2
800053a0:	00e787b3          	add	a5,a5,a4
800053a4:	00579793          	slli	a5,a5,0x5
800053a8:	53868713          	addi	a4,a3,1336 # 80021538 <__stack_top+0xfffdf4e8>
800053ac:	00e787b3          	add	a5,a5,a4
800053b0:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:207
            for(i = 0; i < NUM_MAX_APPS; i++){
800053b4:	fe042623          	sw	zero,-20(s0)
800053b8:	03c0006f          	j	800053f4 <API_DealocateTask+0x32c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:208
                if (applications[i].occupied == TRUE){
800053bc:	800216b7          	lui	a3,0x80021
800053c0:	fec42703          	lw	a4,-20(s0)
800053c4:	00070793          	mv	a5,a4
800053c8:	00279793          	slli	a5,a5,0x2
800053cc:	00e787b3          	add	a5,a5,a4
800053d0:	00579793          	slli	a5,a5,0x5
800053d4:	53868713          	addi	a4,a3,1336 # 80021538 <__stack_top+0xfffdf4e8>
800053d8:	00e787b3          	add	a5,a5,a4
800053dc:	0007a703          	lw	a4,0(a5)
800053e0:	00100793          	li	a5,1
800053e4:	02f70863          	beq	a4,a5,80005414 <API_DealocateTask+0x34c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:207 (discriminator 2)
            for(i = 0; i < NUM_MAX_APPS; i++){
800053e8:	fec42783          	lw	a5,-20(s0)
800053ec:	00178793          	addi	a5,a5,1
800053f0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:207 (discriminator 1)
800053f4:	fec42703          	lw	a4,-20(s0)
800053f8:	00b00793          	li	a5,11
800053fc:	fce7f0e3          	bleu	a4,a5,800053bc <API_DealocateTask+0x2f4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:212
            _exit(0xfe10);
80005400:	000107b7          	lui	a5,0x10
80005404:	e1078513          	addi	a0,a5,-496 # fe10 <HEAP_SIZE-0x1f0>
80005408:	9d5fb0ef          	jal	ra,80000ddc <_exit>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:215
    return;
8000540c:	00000013          	nop
80005410:	0080006f          	j	80005418 <API_DealocateTask+0x350>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:209
                    return;
80005414:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:216
}
80005418:	02c12083          	lw	ra,44(sp)
8000541c:	02812403          	lw	s0,40(sp)
80005420:	03010113          	addi	sp,sp,48
80005424:	00008067          	ret

80005428 <getNextPriorityAddr>:
getNextPriorityAddr():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:219

// Gets the address of the next tile in the priority list 
unsigned int getNextPriorityAddr(){
80005428:	fe010113          	addi	sp,sp,-32
8000542c:	00112e23          	sw	ra,28(sp)
80005430:	00812c23          	sw	s0,24(sp)
80005434:	00912a23          	sw	s1,20(sp)
80005438:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:221
    int i;
    unsigned int addr = makeAddress(0,0);
8000543c:	00000593          	li	a1,0
80005440:	00000513          	li	a0,0
80005444:	efdfd0ef          	jal	ra,80003340 <makeAddress>
80005448:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:224
    for(;;){
        // Checks if it's a valid address
        if (priorityMatrix[priorityPointer] != makeAddress(0,0)){
8000544c:	800227b7          	lui	a5,0x80022
80005450:	fd07a703          	lw	a4,-48(a5) # 80021fd0 <__stack_top+0xfffdff80>
80005454:	800217b7          	lui	a5,0x80021
80005458:	00271713          	slli	a4,a4,0x2
8000545c:	51478793          	addi	a5,a5,1300 # 80021514 <__stack_top+0xfffdf4c4>
80005460:	00f707b3          	add	a5,a4,a5
80005464:	0007a483          	lw	s1,0(a5)
80005468:	00000593          	li	a1,0
8000546c:	00000513          	li	a0,0
80005470:	ed1fd0ef          	jal	ra,80003340 <makeAddress>
80005474:	00050793          	mv	a5,a0
80005478:	06f48e63          	beq	s1,a5,800054f4 <getNextPriorityAddr+0xcc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:225
            if (Tiles[getXpos(addr)][getYpos(addr)].taskSlots > 0){
8000547c:	fec42503          	lw	a0,-20(s0)
80005480:	b4dfd0ef          	jal	ra,80002fcc <getXpos>
80005484:	00050493          	mv	s1,a0
80005488:	fec42503          	lw	a0,-20(s0)
8000548c:	b6dfd0ef          	jal	ra,80002ff8 <getYpos>
80005490:	00050613          	mv	a2,a0
80005494:	800227b7          	lui	a5,0x80022
80005498:	fd478693          	addi	a3,a5,-44 # 80021fd4 <__stack_top+0xfffdff84>
8000549c:	00060713          	mv	a4,a2
800054a0:	00171793          	slli	a5,a4,0x1
800054a4:	00078713          	mv	a4,a5
800054a8:	00c70733          	add	a4,a4,a2
800054ac:	00271793          	slli	a5,a4,0x2
800054b0:	00078713          	mv	a4,a5
800054b4:	00048793          	mv	a5,s1
800054b8:	00379793          	slli	a5,a5,0x3
800054bc:	009787b3          	add	a5,a5,s1
800054c0:	00279793          	slli	a5,a5,0x2
800054c4:	00f707b3          	add	a5,a4,a5
800054c8:	00f687b3          	add	a5,a3,a5
800054cc:	0087a783          	lw	a5,8(a5)
800054d0:	02078263          	beqz	a5,800054f4 <getNextPriorityAddr+0xcc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:228
            //for(i = 0; i < NUM_MAX_TASKS; i++){
                //if (Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] == NONE)
                    addr = priorityMatrix[priorityPointer];
800054d4:	800227b7          	lui	a5,0x80022
800054d8:	fd07a703          	lw	a4,-48(a5) # 80021fd0 <__stack_top+0xfffdff80>
800054dc:	800217b7          	lui	a5,0x80021
800054e0:	00271713          	slli	a4,a4,0x2
800054e4:	51478793          	addi	a5,a5,1300 # 80021514 <__stack_top+0xfffdf4c4>
800054e8:	00f707b3          	add	a5,a4,a5
800054ec:	0007a783          	lw	a5,0(a5)
800054f0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:234
            //}
            }
        }

        // Increments the priorityPointer
        priorityPointer++;
800054f4:	800227b7          	lui	a5,0x80022
800054f8:	fd07a783          	lw	a5,-48(a5) # 80021fd0 <__stack_top+0xfffdff80>
800054fc:	00178713          	addi	a4,a5,1
80005500:	800227b7          	lui	a5,0x80022
80005504:	fce7a823          	sw	a4,-48(a5) # 80021fd0 <__stack_top+0xfffdff80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:235
        if (priorityPointer == DIM_X*DIM_Y)
80005508:	800227b7          	lui	a5,0x80022
8000550c:	fd07a703          	lw	a4,-48(a5) # 80021fd0 <__stack_top+0xfffdff80>
80005510:	00900793          	li	a5,9
80005514:	00f71663          	bne	a4,a5,80005520 <getNextPriorityAddr+0xf8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:236
            priorityPointer = 0;
80005518:	800227b7          	lui	a5,0x80022
8000551c:	fc07a823          	sw	zero,-48(a5) # 80021fd0 <__stack_top+0xfffdff80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:239

        // If we found a new valid address, return
        if( addr != makeAddress(0,0))
80005520:	00000593          	li	a1,0
80005524:	00000513          	li	a0,0
80005528:	e19fd0ef          	jal	ra,80003340 <makeAddress>
8000552c:	00050713          	mv	a4,a0
80005530:	fec42783          	lw	a5,-20(s0)
80005534:	00e79463          	bne	a5,a4,8000553c <getNextPriorityAddr+0x114>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:224
        if (priorityMatrix[priorityPointer] != makeAddress(0,0)){
80005538:	f15ff06f          	j	8000544c <getNextPriorityAddr+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:240
            break;
8000553c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:242
    }
    return addr;
80005540:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:244
    //return 0x101;
}
80005544:	00078513          	mv	a0,a5
80005548:	01c12083          	lw	ra,28(sp)
8000554c:	01812403          	lw	s0,24(sp)
80005550:	01412483          	lw	s1,20(sp)
80005554:	02010113          	addi	sp,sp,32
80005558:	00008067          	ret

8000555c <API_GetTaskSlotFromTile>:
API_GetTaskSlotFromTile():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:247

// Gets a free slot from one given tile
unsigned int API_GetTaskSlotFromTile(unsigned int addr, unsigned int app, unsigned int task){
8000555c:	fe010113          	addi	sp,sp,-32
80005560:	00112e23          	sw	ra,28(sp)
80005564:	00812c23          	sw	s0,24(sp)
80005568:	00912a23          	sw	s1,20(sp)
8000556c:	01212823          	sw	s2,16(sp)
80005570:	02010413          	addi	s0,sp,32
80005574:	fea42623          	sw	a0,-20(s0)
80005578:	feb42423          	sw	a1,-24(s0)
8000557c:	fec42223          	sw	a2,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:257
            printsv("\t achei!! > ", i);
            Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] = (app << 16) | task;
            return i;
        }
    }*/
    if(Tiles[getXpos(addr)][getYpos(addr)].taskSlots > 0){
80005580:	fec42503          	lw	a0,-20(s0)
80005584:	a49fd0ef          	jal	ra,80002fcc <getXpos>
80005588:	00050493          	mv	s1,a0
8000558c:	fec42503          	lw	a0,-20(s0)
80005590:	a69fd0ef          	jal	ra,80002ff8 <getYpos>
80005594:	00050613          	mv	a2,a0
80005598:	800227b7          	lui	a5,0x80022
8000559c:	fd478693          	addi	a3,a5,-44 # 80021fd4 <__stack_top+0xfffdff84>
800055a0:	00060713          	mv	a4,a2
800055a4:	00171793          	slli	a5,a4,0x1
800055a8:	00078713          	mv	a4,a5
800055ac:	00c70733          	add	a4,a4,a2
800055b0:	00271793          	slli	a5,a4,0x2
800055b4:	00078713          	mv	a4,a5
800055b8:	00048793          	mv	a5,s1
800055bc:	00379793          	slli	a5,a5,0x3
800055c0:	009787b3          	add	a5,a5,s1
800055c4:	00279793          	slli	a5,a5,0x2
800055c8:	00f707b3          	add	a5,a4,a5
800055cc:	00f687b3          	add	a5,a3,a5
800055d0:	0087a783          	lw	a5,8(a5)
800055d4:	0a078c63          	beqz	a5,8000568c <API_GetTaskSlotFromTile+0x130>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:258
        Tiles[getXpos(addr)][getYpos(addr)].taskSlots = Tiles[getXpos(addr)][getYpos(addr)].taskSlots - 1;
800055d8:	fec42503          	lw	a0,-20(s0)
800055dc:	9f1fd0ef          	jal	ra,80002fcc <getXpos>
800055e0:	00050493          	mv	s1,a0
800055e4:	fec42503          	lw	a0,-20(s0)
800055e8:	a11fd0ef          	jal	ra,80002ff8 <getYpos>
800055ec:	00050613          	mv	a2,a0
800055f0:	800227b7          	lui	a5,0x80022
800055f4:	fd478693          	addi	a3,a5,-44 # 80021fd4 <__stack_top+0xfffdff84>
800055f8:	00060713          	mv	a4,a2
800055fc:	00171793          	slli	a5,a4,0x1
80005600:	00078713          	mv	a4,a5
80005604:	00c70733          	add	a4,a4,a2
80005608:	00271793          	slli	a5,a4,0x2
8000560c:	00078713          	mv	a4,a5
80005610:	00048793          	mv	a5,s1
80005614:	00379793          	slli	a5,a5,0x3
80005618:	009787b3          	add	a5,a5,s1
8000561c:	00279793          	slli	a5,a5,0x2
80005620:	00f707b3          	add	a5,a4,a5
80005624:	00f687b3          	add	a5,a3,a5
80005628:	0087a483          	lw	s1,8(a5)
8000562c:	fec42503          	lw	a0,-20(s0)
80005630:	99dfd0ef          	jal	ra,80002fcc <getXpos>
80005634:	00050913          	mv	s2,a0
80005638:	fec42503          	lw	a0,-20(s0)
8000563c:	9bdfd0ef          	jal	ra,80002ff8 <getYpos>
80005640:	00050593          	mv	a1,a0
80005644:	fff48693          	addi	a3,s1,-1
80005648:	800227b7          	lui	a5,0x80022
8000564c:	fd478613          	addi	a2,a5,-44 # 80021fd4 <__stack_top+0xfffdff84>
80005650:	00058713          	mv	a4,a1
80005654:	00171793          	slli	a5,a4,0x1
80005658:	00078713          	mv	a4,a5
8000565c:	00b70733          	add	a4,a4,a1
80005660:	00271793          	slli	a5,a4,0x2
80005664:	00078713          	mv	a4,a5
80005668:	00090793          	mv	a5,s2
8000566c:	00379793          	slli	a5,a5,0x3
80005670:	012787b3          	add	a5,a5,s2
80005674:	00279793          	slli	a5,a5,0x2
80005678:	00f707b3          	add	a5,a4,a5
8000567c:	00f607b3          	add	a5,a2,a5
80005680:	00d7a423          	sw	a3,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:259
        return 1;
80005684:	00100793          	li	a5,1
80005688:	0140006f          	j	8000569c <API_GetTaskSlotFromTile+0x140>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:261
    }else {
        prints("returning erro5\n");
8000568c:	800077b7          	lui	a5,0x80007
80005690:	55478513          	addi	a0,a5,1364 # 80007554 <__stack_top+0xfffc5504>
80005694:	fe4fd0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:262
        return ERRO;
80005698:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:264
    }
}
8000569c:	00078513          	mv	a0,a5
800056a0:	01c12083          	lw	ra,28(sp)
800056a4:	01812403          	lw	s0,24(sp)
800056a8:	01412483          	lw	s1,20(sp)
800056ac:	01012903          	lw	s2,16(sp)
800056b0:	02010113          	addi	sp,sp,32
800056b4:	00008067          	ret

800056b8 <API_ClearTaskSlotFromTile>:
API_ClearTaskSlotFromTile():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:267

// Clear a slot occupied by a given task
unsigned int API_ClearTaskSlotFromTile(unsigned int addr, unsigned int app, unsigned int task){
800056b8:	fe010113          	addi	sp,sp,-32
800056bc:	00112e23          	sw	ra,28(sp)
800056c0:	00812c23          	sw	s0,24(sp)
800056c4:	00912a23          	sw	s1,20(sp)
800056c8:	02010413          	addi	s0,sp,32
800056cc:	fea42623          	sw	a0,-20(s0)
800056d0:	feb42423          	sw	a1,-24(s0)
800056d4:	fec42223          	sw	a2,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:268
    Tiles[getXpos(addr)][getYpos(addr)].taskSlots++;
800056d8:	fec42503          	lw	a0,-20(s0)
800056dc:	8f1fd0ef          	jal	ra,80002fcc <getXpos>
800056e0:	00050493          	mv	s1,a0
800056e4:	fec42503          	lw	a0,-20(s0)
800056e8:	911fd0ef          	jal	ra,80002ff8 <getYpos>
800056ec:	00050693          	mv	a3,a0
800056f0:	800227b7          	lui	a5,0x80022
800056f4:	fd478613          	addi	a2,a5,-44 # 80021fd4 <__stack_top+0xfffdff84>
800056f8:	00068713          	mv	a4,a3
800056fc:	00171793          	slli	a5,a4,0x1
80005700:	00078713          	mv	a4,a5
80005704:	00d70733          	add	a4,a4,a3
80005708:	00271793          	slli	a5,a4,0x2
8000570c:	00078713          	mv	a4,a5
80005710:	00048793          	mv	a5,s1
80005714:	00379793          	slli	a5,a5,0x3
80005718:	009787b3          	add	a5,a5,s1
8000571c:	00279793          	slli	a5,a5,0x2
80005720:	00f707b3          	add	a5,a4,a5
80005724:	00f607b3          	add	a5,a2,a5
80005728:	0087a783          	lw	a5,8(a5)
8000572c:	00178613          	addi	a2,a5,1
80005730:	800227b7          	lui	a5,0x80022
80005734:	fd478593          	addi	a1,a5,-44 # 80021fd4 <__stack_top+0xfffdff84>
80005738:	00068713          	mv	a4,a3
8000573c:	00171793          	slli	a5,a4,0x1
80005740:	00078713          	mv	a4,a5
80005744:	00d70733          	add	a4,a4,a3
80005748:	00271793          	slli	a5,a4,0x2
8000574c:	00078713          	mv	a4,a5
80005750:	00048793          	mv	a5,s1
80005754:	00379793          	slli	a5,a5,0x3
80005758:	009787b3          	add	a5,a5,s1
8000575c:	00279793          	slli	a5,a5,0x2
80005760:	00f707b3          	add	a5,a4,a5
80005764:	00f587b3          	add	a5,a1,a5
80005768:	00c7a423          	sw	a2,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:269
    if(Tiles[getXpos(addr)][getYpos(addr)].taskSlots >= NUM_MAX_TASKS){
8000576c:	fec42503          	lw	a0,-20(s0)
80005770:	85dfd0ef          	jal	ra,80002fcc <getXpos>
80005774:	00050493          	mv	s1,a0
80005778:	fec42503          	lw	a0,-20(s0)
8000577c:	87dfd0ef          	jal	ra,80002ff8 <getYpos>
80005780:	00050613          	mv	a2,a0
80005784:	800227b7          	lui	a5,0x80022
80005788:	fd478693          	addi	a3,a5,-44 # 80021fd4 <__stack_top+0xfffdff84>
8000578c:	00060713          	mv	a4,a2
80005790:	00171793          	slli	a5,a4,0x1
80005794:	00078713          	mv	a4,a5
80005798:	00c70733          	add	a4,a4,a2
8000579c:	00271793          	slli	a5,a4,0x2
800057a0:	00078713          	mv	a4,a5
800057a4:	00048793          	mv	a5,s1
800057a8:	00379793          	slli	a5,a5,0x3
800057ac:	009787b3          	add	a5,a5,s1
800057b0:	00279793          	slli	a5,a5,0x2
800057b4:	00f707b3          	add	a5,a4,a5
800057b8:	00f687b3          	add	a5,a3,a5
800057bc:	0087a703          	lw	a4,8(a5)
800057c0:	00500793          	li	a5,5
800057c4:	00e7fc63          	bleu	a4,a5,800057dc <API_ClearTaskSlotFromTile+0x124>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:270
        prints("returning erro6\n");
800057c8:	800077b7          	lui	a5,0x80007
800057cc:	56878513          	addi	a0,a5,1384 # 80007568 <__stack_top+0xfffc5518>
800057d0:	ea8fd0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:271
        return ERRO;
800057d4:	fff00793          	li	a5,-1
800057d8:	0080006f          	j	800057e0 <API_ClearTaskSlotFromTile+0x128>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:274
    }
    else{
        return 1;
800057dc:	00100793          	li	a5,1
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:278
    }
    prints("returning erro7\n");
    return ERRO;
}
800057e0:	00078513          	mv	a0,a5
800057e4:	01c12083          	lw	ra,28(sp)
800057e8:	01812403          	lw	s0,24(sp)
800057ec:	01412483          	lw	s1,20(sp)
800057f0:	02010113          	addi	sp,sp,32
800057f4:	00008067          	ret

800057f8 <API_GetSystemTasksSlots>:
API_GetSystemTasksSlots():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:281

// Iterates around the system tiles to sum the amount of tasks slots available
unsigned int API_GetSystemTasksSlots(){
800057f8:	fe010113          	addi	sp,sp,-32
800057fc:	00112e23          	sw	ra,28(sp)
80005800:	00812c23          	sw	s0,24(sp)
80005804:	00912a23          	sw	s1,20(sp)
80005808:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:283
    int m, n, i, sum;
    sum = 0;
8000580c:	fe042223          	sw	zero,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:284
    for(m = 0; m < DIM_X; m++){
80005810:	fe042623          	sw	zero,-20(s0)
80005814:	0a80006f          	j	800058bc <API_GetSystemTasksSlots+0xc4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:285
        for(n = 0; n < DIM_Y; n++){
80005818:	fe042423          	sw	zero,-24(s0)
8000581c:	0880006f          	j	800058a4 <API_GetSystemTasksSlots+0xac>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:286
            if(makeAddress(m,n) != makeAddress(0,0)){
80005820:	fec42783          	lw	a5,-20(s0)
80005824:	fe842703          	lw	a4,-24(s0)
80005828:	00070593          	mv	a1,a4
8000582c:	00078513          	mv	a0,a5
80005830:	b11fd0ef          	jal	ra,80003340 <makeAddress>
80005834:	00050493          	mv	s1,a0
80005838:	00000593          	li	a1,0
8000583c:	00000513          	li	a0,0
80005840:	b01fd0ef          	jal	ra,80003340 <makeAddress>
80005844:	00050793          	mv	a5,a0
80005848:	04f48863          	beq	s1,a5,80005898 <API_GetSystemTasksSlots+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:287
                sum += Tiles[m][n].taskSlots;
8000584c:	80022737          	lui	a4,0x80022
80005850:	fe842783          	lw	a5,-24(s0)
80005854:	fec42683          	lw	a3,-20(s0)
80005858:	fd470613          	addi	a2,a4,-44 # 80021fd4 <__stack_top+0xfffdff84>
8000585c:	00078713          	mv	a4,a5
80005860:	00171713          	slli	a4,a4,0x1
80005864:	00f70733          	add	a4,a4,a5
80005868:	00271793          	slli	a5,a4,0x2
8000586c:	00078713          	mv	a4,a5
80005870:	00068793          	mv	a5,a3
80005874:	00379793          	slli	a5,a5,0x3
80005878:	00d787b3          	add	a5,a5,a3
8000587c:	00279793          	slli	a5,a5,0x2
80005880:	00f707b3          	add	a5,a4,a5
80005884:	00f607b3          	add	a5,a2,a5
80005888:	0087a703          	lw	a4,8(a5)
8000588c:	fe442783          	lw	a5,-28(s0)
80005890:	00f707b3          	add	a5,a4,a5
80005894:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:285 (discriminator 2)
        for(n = 0; n < DIM_Y; n++){
80005898:	fe842783          	lw	a5,-24(s0)
8000589c:	00178793          	addi	a5,a5,1
800058a0:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:285 (discriminator 1)
800058a4:	fe842703          	lw	a4,-24(s0)
800058a8:	00200793          	li	a5,2
800058ac:	f6e7dae3          	ble	a4,a5,80005820 <API_GetSystemTasksSlots+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:284 (discriminator 2)
    for(m = 0; m < DIM_X; m++){
800058b0:	fec42783          	lw	a5,-20(s0)
800058b4:	00178793          	addi	a5,a5,1
800058b8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:284 (discriminator 1)
800058bc:	fec42703          	lw	a4,-20(s0)
800058c0:	00200793          	li	a5,2
800058c4:	f4e7dae3          	ble	a4,a5,80005818 <API_GetSystemTasksSlots+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:291
            }
        }
    }
    return sum;
800058c8:	fe442783          	lw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:292
}
800058cc:	00078513          	mv	a0,a5
800058d0:	01c12083          	lw	ra,28(sp)
800058d4:	01812403          	lw	s0,24(sp)
800058d8:	01412483          	lw	s1,20(sp)
800058dc:	02010113          	addi	sp,sp,32
800058e0:	00008067          	ret

800058e4 <API_RepositoryAllocation>:
API_RepositoryAllocation():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:294

void API_RepositoryAllocation(unsigned int app, unsigned int task, unsigned int dest_addr){
800058e4:	fd010113          	addi	sp,sp,-48
800058e8:	02112623          	sw	ra,44(sp)
800058ec:	02812423          	sw	s0,40(sp)
800058f0:	03010413          	addi	s0,sp,48
800058f4:	fca42e23          	sw	a0,-36(s0)
800058f8:	fcb42c23          	sw	a1,-40(s0)
800058fc:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:297
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80005900:	034010ef          	jal	ra,80006934 <API_GetServiceSlot>
80005904:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:298
        if(mySlot == PIPE_FULL){
80005908:	fec42703          	lw	a4,-20(s0)
8000590c:	fdfe07b7          	lui	a5,0xfdfe0
80005910:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9ddad>
80005914:	00f71463          	bne	a4,a5,8000591c <API_RepositoryAllocation+0x38>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:300
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80005918:	f14fe0ef          	jal	ra,8000402c <API_NI_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:302
        }
    }while(mySlot == PIPE_FULL);
8000591c:	fec42703          	lw	a4,-20(s0)
80005920:	fdfe07b7          	lui	a5,0xfdfe0
80005924:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9ddad>
80005928:	fcf70ce3          	beq	a4,a5,80005900 <API_RepositoryAllocation+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:303
    printsv("I got a free service slot!! -> ", mySlot);
8000592c:	fec42783          	lw	a5,-20(s0)
80005930:	00078593          	mv	a1,a5
80005934:	800077b7          	lui	a5,0x80007
80005938:	57c78513          	addi	a0,a5,1404 # 8000757c <__stack_top+0xfffc552c>
8000593c:	de8fd0ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:305

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80005940:	800217b7          	lui	a5,0x80021
80005944:	fec42703          	lw	a4,-20(s0)
80005948:	a9c78693          	addi	a3,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
8000594c:	00070793          	mv	a5,a4
80005950:	00479793          	slli	a5,a5,0x4
80005954:	40e787b3          	sub	a5,a5,a4
80005958:	00279793          	slli	a5,a5,0x2
8000595c:	00f687b3          	add	a5,a3,a5
80005960:	feff0737          	lui	a4,0xfeff0
80005964:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efadeae>
80005968:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:307

    ServicePipe[mySlot].header.header           = makeAddress(0, 0) | PERIPH_SOUTH;
8000596c:	00000593          	li	a1,0
80005970:	00000513          	li	a0,0
80005974:	9cdfd0ef          	jal	ra,80003340 <makeAddress>
80005978:	00050713          	mv	a4,a0
8000597c:	000407b7          	lui	a5,0x40
80005980:	00f766b3          	or	a3,a4,a5
80005984:	800217b7          	lui	a5,0x80021
80005988:	fec42703          	lw	a4,-20(s0)
8000598c:	a9c78613          	addi	a2,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
80005990:	00070793          	mv	a5,a4
80005994:	00479793          	slli	a5,a5,0x4
80005998:	40e787b3          	sub	a5,a5,a4
8000599c:	00279793          	slli	a5,a5,0x2
800059a0:	00f607b3          	add	a5,a2,a5
800059a4:	00d7a423          	sw	a3,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:308
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
800059a8:	800217b7          	lui	a5,0x80021
800059ac:	fec42703          	lw	a4,-20(s0)
800059b0:	a9c78693          	addi	a3,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
800059b4:	00070793          	mv	a5,a4
800059b8:	00479793          	slli	a5,a5,0x4
800059bc:	40e787b3          	sub	a5,a5,a4
800059c0:	00279793          	slli	a5,a5,0x2
800059c4:	00f687b3          	add	a5,a3,a5
800059c8:	00b00713          	li	a4,11
800059cc:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:309
    ServicePipe[mySlot].header.service          = TASK_ALLOCATION_SEND;
800059d0:	800217b7          	lui	a5,0x80021
800059d4:	fec42703          	lw	a4,-20(s0)
800059d8:	a9c78693          	addi	a3,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
800059dc:	00070793          	mv	a5,a4
800059e0:	00479793          	slli	a5,a5,0x4
800059e4:	40e787b3          	sub	a5,a5,a4
800059e8:	00279793          	slli	a5,a5,0x2
800059ec:	00f687b3          	add	a5,a3,a5
800059f0:	03000713          	li	a4,48
800059f4:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:310
    ServicePipe[mySlot].header.task_id          = task;
800059f8:	800217b7          	lui	a5,0x80021
800059fc:	fec42703          	lw	a4,-20(s0)
80005a00:	a9c78693          	addi	a3,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
80005a04:	00070793          	mv	a5,a4
80005a08:	00479793          	slli	a5,a5,0x4
80005a0c:	40e787b3          	sub	a5,a5,a4
80005a10:	00279793          	slli	a5,a5,0x2
80005a14:	00f687b3          	add	a5,a3,a5
80005a18:	fd842703          	lw	a4,-40(s0)
80005a1c:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:311
    ServicePipe[mySlot].header.task_app_id      = app;
80005a20:	800217b7          	lui	a5,0x80021
80005a24:	fec42703          	lw	a4,-20(s0)
80005a28:	a9c78693          	addi	a3,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
80005a2c:	00070793          	mv	a5,a4
80005a30:	00479793          	slli	a5,a5,0x4
80005a34:	40e787b3          	sub	a5,a5,a4
80005a38:	00279793          	slli	a5,a5,0x2
80005a3c:	00f687b3          	add	a5,a3,a5
80005a40:	fdc42703          	lw	a4,-36(s0)
80005a44:	02e7a223          	sw	a4,36(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:312
    ServicePipe[mySlot].header.task_dest_addr   = dest_addr;
80005a48:	800217b7          	lui	a5,0x80021
80005a4c:	fec42703          	lw	a4,-20(s0)
80005a50:	a9c78693          	addi	a3,a5,-1380 # 80020a9c <__stack_top+0xfffdea4c>
80005a54:	00070793          	mv	a5,a4
80005a58:	00479793          	slli	a5,a5,0x4
80005a5c:	40e787b3          	sub	a5,a5,a4
80005a60:	00279793          	slli	a5,a5,0x2
80005a64:	00f687b3          	add	a5,a3,a5
80005a68:	fd442703          	lw	a4,-44(s0)
80005a6c:	02e7ac23          	sw	a4,56(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:314

    API_PushSendQueue(SERVICE, mySlot);
80005a70:	fec42583          	lw	a1,-20(s0)
80005a74:	10100537          	lui	a0,0x10100
80005a78:	909fd0ef          	jal	ra,80003380 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:315
    return;    
80005a7c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:316
}
80005a80:	02c12083          	lw	ra,44(sp)
80005a84:	02812403          	lw	s0,40(sp)
80005a88:	03010113          	addi	sp,sp,48
80005a8c:	00008067          	ret

80005a90 <API_TaskAllocated>:
API_TaskAllocated():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:318

void API_TaskAllocated(unsigned int task_id, unsigned int app_id){
80005a90:	fd010113          	addi	sp,sp,-48
80005a94:	02112623          	sw	ra,44(sp)
80005a98:	02812423          	sw	s0,40(sp)
80005a9c:	03010413          	addi	s0,sp,48
80005aa0:	fca42e23          	sw	a0,-36(s0)
80005aa4:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:320
    unsigned int i;
    applications[app_id].tasks[task_id].status = TASK_ALLOCATED;
80005aa8:	80021737          	lui	a4,0x80021
80005aac:	fdc42783          	lw	a5,-36(s0)
80005ab0:	fd842683          	lw	a3,-40(s0)
80005ab4:	53870613          	addi	a2,a4,1336 # 80021538 <__stack_top+0xfffdf4e8>
80005ab8:	00078713          	mv	a4,a5
80005abc:	00171713          	slli	a4,a4,0x1
80005ac0:	00f70733          	add	a4,a4,a5
80005ac4:	00271793          	slli	a5,a4,0x2
80005ac8:	00078713          	mv	a4,a5
80005acc:	00068793          	mv	a5,a3
80005ad0:	00279793          	slli	a5,a5,0x2
80005ad4:	00d787b3          	add	a5,a5,a3
80005ad8:	00579793          	slli	a5,a5,0x5
80005adc:	00f707b3          	add	a5,a4,a5
80005ae0:	00f607b3          	add	a5,a2,a5
80005ae4:	00400713          	li	a4,4
80005ae8:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:322

    for(i = 0; i < applications[app_id].numTasks; i++){
80005aec:	fe042623          	sw	zero,-20(s0)
80005af0:	0580006f          	j	80005b48 <API_TaskAllocated+0xb8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:323
        if(applications[app_id].tasks[i].status != TASK_ALLOCATED){
80005af4:	80021737          	lui	a4,0x80021
80005af8:	fec42783          	lw	a5,-20(s0)
80005afc:	fd842683          	lw	a3,-40(s0)
80005b00:	53870613          	addi	a2,a4,1336 # 80021538 <__stack_top+0xfffdf4e8>
80005b04:	00078713          	mv	a4,a5
80005b08:	00171713          	slli	a4,a4,0x1
80005b0c:	00f70733          	add	a4,a4,a5
80005b10:	00271793          	slli	a5,a4,0x2
80005b14:	00078713          	mv	a4,a5
80005b18:	00068793          	mv	a5,a3
80005b1c:	00279793          	slli	a5,a5,0x2
80005b20:	00d787b3          	add	a5,a5,a3
80005b24:	00579793          	slli	a5,a5,0x5
80005b28:	00f707b3          	add	a5,a4,a5
80005b2c:	00f607b3          	add	a5,a2,a5
80005b30:	0147a703          	lw	a4,20(a5)
80005b34:	00400793          	li	a5,4
80005b38:	06f71663          	bne	a4,a5,80005ba4 <API_TaskAllocated+0x114>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:322 (discriminator 2)
    for(i = 0; i < applications[app_id].numTasks; i++){
80005b3c:	fec42783          	lw	a5,-20(s0)
80005b40:	00178793          	addi	a5,a5,1
80005b44:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:322 (discriminator 1)
80005b48:	800216b7          	lui	a3,0x80021
80005b4c:	fd842703          	lw	a4,-40(s0)
80005b50:	00070793          	mv	a5,a4
80005b54:	00279793          	slli	a5,a5,0x2
80005b58:	00e787b3          	add	a5,a5,a4
80005b5c:	00579793          	slli	a5,a5,0x5
80005b60:	53868713          	addi	a4,a3,1336 # 80021538 <__stack_top+0xfffdf4e8>
80005b64:	00e787b3          	add	a5,a5,a4
80005b68:	0107a783          	lw	a5,16(a5)
80005b6c:	fec42703          	lw	a4,-20(s0)
80005b70:	f8f762e3          	bltu	a4,a5,80005af4 <API_TaskAllocated+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:328
            //printi(i);
            return;
        }
    }
    printsv("Application allocated: ", app_id);
80005b74:	fd842783          	lw	a5,-40(s0)
80005b78:	00078593          	mv	a1,a5
80005b7c:	800077b7          	lui	a5,0x80007
80005b80:	59c78513          	addi	a0,a5,1436 # 8000759c <__stack_top+0xfffc554c>
80005b84:	ba0fd0ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:329
    API_ApplicationStart(app_id);
80005b88:	fd842503          	lw	a0,-40(s0)
80005b8c:	02c000ef          	jal	ra,80005bb8 <API_ApplicationStart>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:330
    prints("\tStart command sent to every task.\n");
80005b90:	800077b7          	lui	a5,0x80007
80005b94:	5b478513          	addi	a0,a5,1460 # 800075b4 <__stack_top+0xfffc5564>
80005b98:	ae0fd0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:331
    return;
80005b9c:	00000013          	nop
80005ba0:	0080006f          	j	80005ba8 <API_TaskAllocated+0x118>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:325
            return;
80005ba4:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:332
}
80005ba8:	02c12083          	lw	ra,44(sp)
80005bac:	02812403          	lw	s0,40(sp)
80005bb0:	03010113          	addi	sp,sp,48
80005bb4:	00008067          	ret

80005bb8 <API_ApplicationStart>:
API_ApplicationStart():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:334

void API_ApplicationStart(unsigned int app_id){
80005bb8:	fd010113          	addi	sp,sp,-48
80005bbc:	02112623          	sw	ra,44(sp)
80005bc0:	02812423          	sw	s0,40(sp)
80005bc4:	03010413          	addi	s0,sp,48
80005bc8:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:337
    unsigned int i, j;
    unsigned int mySlot;
    for(i = 0; i < applications[app_id].numTasks; i++){
80005bcc:	fe042623          	sw	zero,-20(s0)
80005bd0:	2640006f          	j	80005e34 <API_ApplicationStart+0x27c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:339
        do{
            mySlot = API_GetMessageSlot();
80005bd4:	415000ef          	jal	ra,800067e8 <API_GetMessageSlot>
80005bd8:	fea42223          	sw	a0,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:340
            if(mySlot == PIPE_FULL){
80005bdc:	fe442703          	lw	a4,-28(s0)
80005be0:	fdfe07b7          	lui	a5,0xfdfe0
80005be4:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9ddad>
80005be8:	00f71463          	bne	a4,a5,80005bf0 <API_ApplicationStart+0x38>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:342
                // Runs the NI Handler to send/receive packets, opening space in the PIPE
                API_NI_Handler();
80005bec:	c40fe0ef          	jal	ra,8000402c <API_NI_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:344
            }
        }while(mySlot == PIPE_FULL);
80005bf0:	fe442703          	lw	a4,-28(s0)
80005bf4:	fdfe07b7          	lui	a5,0xfdfe0
80005bf8:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9ddad>
80005bfc:	fcf70ce3          	beq	a4,a5,80005bd4 <API_ApplicationStart+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:346

        MessagePipe[mySlot].holder = PIPE_SYS_HOLDER;
80005c00:	800217b7          	lui	a5,0x80021
80005c04:	fe442683          	lw	a3,-28(s0)
80005c08:	c0078713          	addi	a4,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
80005c0c:	24400793          	li	a5,580
80005c10:	02f687b3          	mul	a5,a3,a5
80005c14:	00f707b3          	add	a5,a4,a5
80005c18:	feff0737          	lui	a4,0xfeff0
80005c1c:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efadeae>
80005c20:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:348

        MessagePipe[mySlot].header.header           = applications[app_id].tasks[i].addr;
80005c24:	80021737          	lui	a4,0x80021
80005c28:	fec42783          	lw	a5,-20(s0)
80005c2c:	fdc42683          	lw	a3,-36(s0)
80005c30:	53870613          	addi	a2,a4,1336 # 80021538 <__stack_top+0xfffdf4e8>
80005c34:	00078713          	mv	a4,a5
80005c38:	00171713          	slli	a4,a4,0x1
80005c3c:	00f70733          	add	a4,a4,a5
80005c40:	00271793          	slli	a5,a4,0x2
80005c44:	00078713          	mv	a4,a5
80005c48:	00068793          	mv	a5,a3
80005c4c:	00279793          	slli	a5,a5,0x2
80005c50:	00d787b3          	add	a5,a5,a3
80005c54:	00579793          	slli	a5,a5,0x5
80005c58:	00f707b3          	add	a5,a4,a5
80005c5c:	00f607b3          	add	a5,a2,a5
80005c60:	0187a703          	lw	a4,24(a5)
80005c64:	800217b7          	lui	a5,0x80021
80005c68:	fe442603          	lw	a2,-28(s0)
80005c6c:	c0078693          	addi	a3,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
80005c70:	24400793          	li	a5,580
80005c74:	02f607b3          	mul	a5,a2,a5
80005c78:	00f687b3          	add	a5,a3,a5
80005c7c:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:349
        MessagePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE + applications[app_id].numTasks + 1;
80005c80:	800216b7          	lui	a3,0x80021
80005c84:	fdc42703          	lw	a4,-36(s0)
80005c88:	00070793          	mv	a5,a4
80005c8c:	00279793          	slli	a5,a5,0x2
80005c90:	00e787b3          	add	a5,a5,a4
80005c94:	00579793          	slli	a5,a5,0x5
80005c98:	53868713          	addi	a4,a3,1336 # 80021538 <__stack_top+0xfffdf4e8>
80005c9c:	00e787b3          	add	a5,a5,a4
80005ca0:	0107a783          	lw	a5,16(a5)
80005ca4:	00c78713          	addi	a4,a5,12
80005ca8:	800217b7          	lui	a5,0x80021
80005cac:	fe442603          	lw	a2,-28(s0)
80005cb0:	c0078693          	addi	a3,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
80005cb4:	24400793          	li	a5,580
80005cb8:	02f607b3          	mul	a5,a2,a5
80005cbc:	00f687b3          	add	a5,a3,a5
80005cc0:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:350
        MessagePipe[mySlot].header.service          = TASK_START;
80005cc4:	800217b7          	lui	a5,0x80021
80005cc8:	fe442683          	lw	a3,-28(s0)
80005ccc:	c0078713          	addi	a4,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
80005cd0:	24400793          	li	a5,580
80005cd4:	02f687b3          	mul	a5,a3,a5
80005cd8:	00f707b3          	add	a5,a4,a5
80005cdc:	40000713          	li	a4,1024
80005ce0:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:351
        MessagePipe[mySlot].header.task_id          = i;
80005ce4:	800217b7          	lui	a5,0x80021
80005ce8:	fe442683          	lw	a3,-28(s0)
80005cec:	c0078713          	addi	a4,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
80005cf0:	24400793          	li	a5,580
80005cf4:	02f687b3          	mul	a5,a3,a5
80005cf8:	00f707b3          	add	a5,a4,a5
80005cfc:	fec42703          	lw	a4,-20(s0)
80005d00:	00e7ac23          	sw	a4,24(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:352
        MessagePipe[mySlot].header.task_app_id      = app_id;
80005d04:	800217b7          	lui	a5,0x80021
80005d08:	fe442683          	lw	a3,-28(s0)
80005d0c:	c0078713          	addi	a4,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
80005d10:	24400793          	li	a5,580
80005d14:	02f687b3          	mul	a5,a3,a5
80005d18:	00f707b3          	add	a5,a4,a5
80005d1c:	fdc42703          	lw	a4,-36(s0)
80005d20:	02e7a423          	sw	a4,40(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:353
        MessagePipe[mySlot].msg.length              = applications[app_id].numTasks;
80005d24:	800216b7          	lui	a3,0x80021
80005d28:	fdc42703          	lw	a4,-36(s0)
80005d2c:	00070793          	mv	a5,a4
80005d30:	00279793          	slli	a5,a5,0x2
80005d34:	00e787b3          	add	a5,a5,a4
80005d38:	00579793          	slli	a5,a5,0x5
80005d3c:	53868713          	addi	a4,a3,1336 # 80021538 <__stack_top+0xfffdf4e8>
80005d40:	00e787b3          	add	a5,a5,a4
80005d44:	0107a703          	lw	a4,16(a5)
80005d48:	800217b7          	lui	a5,0x80021
80005d4c:	fe442603          	lw	a2,-28(s0)
80005d50:	24400693          	li	a3,580
80005d54:	02d606b3          	mul	a3,a2,a3
80005d58:	c0078793          	addi	a5,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
80005d5c:	00f687b3          	add	a5,a3,a5
80005d60:	04e7a023          	sw	a4,64(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:354
        for(j = 0; j < applications[app_id].numTasks; j++){
80005d64:	fe042423          	sw	zero,-24(s0)
80005d68:	0880006f          	j	80005df0 <API_ApplicationStart+0x238>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:355 (discriminator 3)
            MessagePipe[mySlot].msg.msg[j]          = applications[app_id].tasks[j].addr;
80005d6c:	80021737          	lui	a4,0x80021
80005d70:	fe842783          	lw	a5,-24(s0)
80005d74:	fdc42683          	lw	a3,-36(s0)
80005d78:	53870613          	addi	a2,a4,1336 # 80021538 <__stack_top+0xfffdf4e8>
80005d7c:	00078713          	mv	a4,a5
80005d80:	00171713          	slli	a4,a4,0x1
80005d84:	00f70733          	add	a4,a4,a5
80005d88:	00271793          	slli	a5,a4,0x2
80005d8c:	00078713          	mv	a4,a5
80005d90:	00068793          	mv	a5,a3
80005d94:	00279793          	slli	a5,a5,0x2
80005d98:	00d787b3          	add	a5,a5,a3
80005d9c:	00579793          	slli	a5,a5,0x5
80005da0:	00f707b3          	add	a5,a4,a5
80005da4:	00f607b3          	add	a5,a2,a5
80005da8:	0187a683          	lw	a3,24(a5)
80005dac:	80021637          	lui	a2,0x80021
80005db0:	fe442703          	lw	a4,-28(s0)
80005db4:	00070793          	mv	a5,a4
80005db8:	00379793          	slli	a5,a5,0x3
80005dbc:	00e787b3          	add	a5,a5,a4
80005dc0:	00479793          	slli	a5,a5,0x4
80005dc4:	00e787b3          	add	a5,a5,a4
80005dc8:	fe842703          	lw	a4,-24(s0)
80005dcc:	00e787b3          	add	a5,a5,a4
80005dd0:	01078793          	addi	a5,a5,16
80005dd4:	c0060713          	addi	a4,a2,-1024 # 80020c00 <__stack_top+0xfffdebb0>
80005dd8:	00279793          	slli	a5,a5,0x2
80005ddc:	00f707b3          	add	a5,a4,a5
80005de0:	00d7a223          	sw	a3,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:354 (discriminator 3)
        for(j = 0; j < applications[app_id].numTasks; j++){
80005de4:	fe842783          	lw	a5,-24(s0)
80005de8:	00178793          	addi	a5,a5,1
80005dec:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:354 (discriminator 1)
80005df0:	800216b7          	lui	a3,0x80021
80005df4:	fdc42703          	lw	a4,-36(s0)
80005df8:	00070793          	mv	a5,a4
80005dfc:	00279793          	slli	a5,a5,0x2
80005e00:	00e787b3          	add	a5,a5,a4
80005e04:	00579793          	slli	a5,a5,0x5
80005e08:	53868713          	addi	a4,a3,1336 # 80021538 <__stack_top+0xfffdf4e8>
80005e0c:	00e787b3          	add	a5,a5,a4
80005e10:	0107a783          	lw	a5,16(a5)
80005e14:	fe842703          	lw	a4,-24(s0)
80005e18:	f4f76ae3          	bltu	a4,a5,80005d6c <API_ApplicationStart+0x1b4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:357 (discriminator 2)
        }
        API_PushSendQueue(MESSAGE, mySlot);
80005e1c:	fe442583          	lw	a1,-28(s0)
80005e20:	20200537          	lui	a0,0x20200
80005e24:	d5cfd0ef          	jal	ra,80003380 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:337 (discriminator 2)
    for(i = 0; i < applications[app_id].numTasks; i++){
80005e28:	fec42783          	lw	a5,-20(s0)
80005e2c:	00178793          	addi	a5,a5,1
80005e30:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:337 (discriminator 1)
80005e34:	800216b7          	lui	a3,0x80021
80005e38:	fdc42703          	lw	a4,-36(s0)
80005e3c:	00070793          	mv	a5,a4
80005e40:	00279793          	slli	a5,a5,0x2
80005e44:	00e787b3          	add	a5,a5,a4
80005e48:	00579793          	slli	a5,a5,0x5
80005e4c:	53868713          	addi	a4,a3,1336 # 80021538 <__stack_top+0xfffdf4e8>
80005e50:	00e787b3          	add	a5,a5,a4
80005e54:	0107a783          	lw	a5,16(a5)
80005e58:	fec42703          	lw	a4,-20(s0)
80005e5c:	d6f76ce3          	bltu	a4,a5,80005bd4 <API_ApplicationStart+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:359
    }
    return;
80005e60:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:360
}
80005e64:	02c12083          	lw	ra,44(sp)
80005e68:	02812403          	lw	s0,40(sp)
80005e6c:	03010113          	addi	sp,sp,48
80005e70:	00008067          	ret

80005e74 <API_TaskListInit>:
API_TaskListInit():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:13
#include "chronos.h"

// Stores information about each running task
//extern volatile Task TaskList[ NUM_MAX_TASKS ];

void API_TaskListInit(){
80005e74:	fe010113          	addi	sp,sp,-32
80005e78:	00812e23          	sw	s0,28(sp)
80005e7c:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:15
    unsigned int i, j;
    for (i = 0; i < NUM_MAX_TASKS; i++){
80005e80:	fe042623          	sw	zero,-20(s0)
80005e84:	0840006f          	j	80005f08 <API_TaskListInit+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:16
        TaskList[i].status = TASK_SLOT_EMPTY;
80005e88:	800226b7          	lui	a3,0x80022
80005e8c:	fec42703          	lw	a4,-20(s0)
80005e90:	00070793          	mv	a5,a4
80005e94:	00579793          	slli	a5,a5,0x5
80005e98:	00e787b3          	add	a5,a5,a4
80005e9c:	00279793          	slli	a5,a5,0x2
80005ea0:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80005ea4:	00e787b3          	add	a5,a5,a4
80005ea8:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:17
        for (j = 0; j < NUM_MAX_APP_TASKS; j++){
80005eac:	fe042423          	sw	zero,-24(s0)
80005eb0:	0400006f          	j	80005ef0 <API_TaskListInit+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:18 (discriminator 3)
            TaskList[i].PendingReq[j] = FALSE;
80005eb4:	800226b7          	lui	a3,0x80022
80005eb8:	fec42703          	lw	a4,-20(s0)
80005ebc:	00070793          	mv	a5,a4
80005ec0:	00579793          	slli	a5,a5,0x5
80005ec4:	00e787b3          	add	a5,a5,a4
80005ec8:	fe842703          	lw	a4,-24(s0)
80005ecc:	00e787b3          	add	a5,a5,a4
80005ed0:	00c78793          	addi	a5,a5,12
80005ed4:	00279713          	slli	a4,a5,0x2
80005ed8:	cb868793          	addi	a5,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80005edc:	00f707b3          	add	a5,a4,a5
80005ee0:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:17 (discriminator 3)
        for (j = 0; j < NUM_MAX_APP_TASKS; j++){
80005ee4:	fe842783          	lw	a5,-24(s0)
80005ee8:	00178793          	addi	a5,a5,1
80005eec:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:17 (discriminator 1)
80005ef0:	fe842703          	lw	a4,-24(s0)
80005ef4:	00900793          	li	a5,9
80005ef8:	fae7fee3          	bleu	a4,a5,80005eb4 <API_TaskListInit+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 2)
    for (i = 0; i < NUM_MAX_TASKS; i++){
80005efc:	fec42783          	lw	a5,-20(s0)
80005f00:	00178793          	addi	a5,a5,1
80005f04:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 1)
80005f08:	fec42703          	lw	a4,-20(s0)
80005f0c:	00500793          	li	a5,5
80005f10:	f6e7fce3          	bleu	a4,a5,80005e88 <API_TaskListInit+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:21
        }
    }
    return;
80005f14:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:22
}
80005f18:	01c12403          	lw	s0,28(sp)
80005f1c:	02010113          	addi	sp,sp,32
80005f20:	00008067          	ret

80005f24 <API_GetCurrentTaskSlot>:
API_GetCurrentTaskSlot():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:24

unsigned int API_GetCurrentTaskSlot(){
80005f24:	fe010113          	addi	sp,sp,-32
80005f28:	00112e23          	sw	ra,28(sp)
80005f2c:	00812c23          	sw	s0,24(sp)
80005f30:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:26
    // The handle of the currently running ( calling ) task on the kernel.
    TaskHandle_t xHandle = xTaskGetCurrentTaskHandle();
80005f34:	d3dfc0ef          	jal	ra,80002c70 <xTaskGetCurrentTaskHandle>
80005f38:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:27
    unsigned int i = 0;
80005f3c:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:28
    for ( i = 0 ; i < NUM_MAX_TASKS ; i++ ) {
80005f40:	fe042623          	sw	zero,-20(s0)
80005f44:	0440006f          	j	80005f88 <API_GetCurrentTaskSlot+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:29
        if ( TaskList[ i ].TaskHandler == xHandle ) {
80005f48:	800227b7          	lui	a5,0x80022
80005f4c:	fec42703          	lw	a4,-20(s0)
80005f50:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80005f54:	00070793          	mv	a5,a4
80005f58:	00579793          	slli	a5,a5,0x5
80005f5c:	00e787b3          	add	a5,a5,a4
80005f60:	00279793          	slli	a5,a5,0x2
80005f64:	00f687b3          	add	a5,a3,a5
80005f68:	0187a783          	lw	a5,24(a5)
80005f6c:	fe842703          	lw	a4,-24(s0)
80005f70:	00f71663          	bne	a4,a5,80005f7c <API_GetCurrentTaskSlot+0x58>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:30
            return( i );
80005f74:	fec42783          	lw	a5,-20(s0)
80005f78:	02c0006f          	j	80005fa4 <API_GetCurrentTaskSlot+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:28 (discriminator 2)
    for ( i = 0 ; i < NUM_MAX_TASKS ; i++ ) {
80005f7c:	fec42783          	lw	a5,-20(s0)
80005f80:	00178793          	addi	a5,a5,1
80005f84:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:28 (discriminator 1)
80005f88:	fec42703          	lw	a4,-20(s0)
80005f8c:	00500793          	li	a5,5
80005f90:	fae7fce3          	bleu	a4,a5,80005f48 <API_GetCurrentTaskSlot+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:33
        }
    }
    prints("returning erro0\n");
80005f94:	800077b7          	lui	a5,0x80007
80005f98:	5d878513          	addi	a0,a5,1496 # 800075d8 <__stack_top+0xfffc5588>
80005f9c:	eddfc0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:34
    return ERRO;
80005fa0:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:35
}
80005fa4:	00078513          	mv	a0,a5
80005fa8:	01c12083          	lw	ra,28(sp)
80005fac:	01812403          	lw	s0,24(sp)
80005fb0:	02010113          	addi	sp,sp,32
80005fb4:	00008067          	ret

80005fb8 <API_GetFreeTaskSlot>:
API_GetFreeTaskSlot():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:37

unsigned int API_GetFreeTaskSlot(){
80005fb8:	fe010113          	addi	sp,sp,-32
80005fbc:	00112e23          	sw	ra,28(sp)
80005fc0:	00812c23          	sw	s0,24(sp)
80005fc4:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:39
    unsigned int i;
    for (i = 0; i < NUM_MAX_TASKS; i++){
80005fc8:	fe042623          	sw	zero,-20(s0)
80005fcc:	0400006f          	j	8000600c <API_GetFreeTaskSlot+0x54>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:40
        if (TaskList[i].status == TASK_SLOT_EMPTY){
80005fd0:	800226b7          	lui	a3,0x80022
80005fd4:	fec42703          	lw	a4,-20(s0)
80005fd8:	00070793          	mv	a5,a4
80005fdc:	00579793          	slli	a5,a5,0x5
80005fe0:	00e787b3          	add	a5,a5,a4
80005fe4:	00279793          	slli	a5,a5,0x2
80005fe8:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80005fec:	00e787b3          	add	a5,a5,a4
80005ff0:	0007a783          	lw	a5,0(a5)
80005ff4:	00079663          	bnez	a5,80006000 <API_GetFreeTaskSlot+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:41
            return i;
80005ff8:	fec42783          	lw	a5,-20(s0)
80005ffc:	02c0006f          	j	80006028 <API_GetFreeTaskSlot+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:39 (discriminator 2)
    for (i = 0; i < NUM_MAX_TASKS; i++){
80006000:	fec42783          	lw	a5,-20(s0)
80006004:	00178793          	addi	a5,a5,1
80006008:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:39 (discriminator 1)
8000600c:	fec42703          	lw	a4,-20(s0)
80006010:	00500793          	li	a5,5
80006014:	fae7fee3          	bleu	a4,a5,80005fd0 <API_GetFreeTaskSlot+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:44
        }
    }
    prints("returning erro1\n");
80006018:	800077b7          	lui	a5,0x80007
8000601c:	5ec78513          	addi	a0,a5,1516 # 800075ec <__stack_top+0xfffc559c>
80006020:	e59fc0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:45
    return ERRO;
80006024:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:46
}
80006028:	00078513          	mv	a0,a5
8000602c:	01c12083          	lw	ra,28(sp)
80006030:	01812403          	lw	s0,24(sp)
80006034:	02010113          	addi	sp,sp,32
80006038:	00008067          	ret

8000603c <API_TaskAllocation>:
API_TaskAllocation():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:48

unsigned int API_TaskAllocation(unsigned int task_id, unsigned int txt_size, unsigned int bss_size, unsigned int start_point, unsigned int task_app_id){
8000603c:	fc010113          	addi	sp,sp,-64
80006040:	02112e23          	sw	ra,60(sp)
80006044:	02812c23          	sw	s0,56(sp)
80006048:	04010413          	addi	s0,sp,64
8000604c:	fca42e23          	sw	a0,-36(s0)
80006050:	fcb42c23          	sw	a1,-40(s0)
80006054:	fcc42a23          	sw	a2,-44(s0)
80006058:	fcd42823          	sw	a3,-48(s0)
8000605c:	fce42623          	sw	a4,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:49
    unsigned int tslot = API_GetFreeTaskSlot();
80006060:	f59ff0ef          	jal	ra,80005fb8 <API_GetFreeTaskSlot>
80006064:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:51
    int i;
    if(tslot == ERRO){
80006068:	fe842703          	lw	a4,-24(s0)
8000606c:	fff00793          	li	a5,-1
80006070:	00f71863          	bne	a4,a5,80006080 <API_TaskAllocation+0x44>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:52
        prints("DEU RUIM NO API_GetFreeTaskSlot()\n");
80006074:	800077b7          	lui	a5,0x80007
80006078:	60078513          	addi	a0,a5,1536 # 80007600 <__stack_top+0xfffc55b0>
8000607c:	dfdfc0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:54
    }
    printsv("Got slot: ", tslot);
80006080:	fe842783          	lw	a5,-24(s0)
80006084:	00078593          	mv	a1,a5
80006088:	800077b7          	lui	a5,0x80007
8000608c:	62478513          	addi	a0,a5,1572 # 80007624 <__stack_top+0xfffc55d4>
80006090:	e95fc0ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:55
    TaskList[tslot].status = TASK_SLOT_WAITING_START;
80006094:	800226b7          	lui	a3,0x80022
80006098:	fe842703          	lw	a4,-24(s0)
8000609c:	00070793          	mv	a5,a4
800060a0:	00579793          	slli	a5,a5,0x5
800060a4:	00e787b3          	add	a5,a5,a4
800060a8:	00279793          	slli	a5,a5,0x2
800060ac:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
800060b0:	00e787b3          	add	a5,a5,a4
800060b4:	00200713          	li	a4,2
800060b8:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:56
    TaskList[tslot].waitingMsg = FALSE;
800060bc:	800227b7          	lui	a5,0x80022
800060c0:	fe842703          	lw	a4,-24(s0)
800060c4:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdfc68>
800060c8:	00070793          	mv	a5,a4
800060cc:	00579793          	slli	a5,a5,0x5
800060d0:	00e787b3          	add	a5,a5,a4
800060d4:	00279793          	slli	a5,a5,0x2
800060d8:	00f687b3          	add	a5,a3,a5
800060dc:	0007ae23          	sw	zero,28(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:57
    TaskList[tslot].TaskID = task_id;
800060e0:	800226b7          	lui	a3,0x80022
800060e4:	fe842703          	lw	a4,-24(s0)
800060e8:	00070793          	mv	a5,a4
800060ec:	00579793          	slli	a5,a5,0x5
800060f0:	00e787b3          	add	a5,a5,a4
800060f4:	00279793          	slli	a5,a5,0x2
800060f8:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
800060fc:	00e787b3          	add	a5,a5,a4
80006100:	fdc42703          	lw	a4,-36(s0)
80006104:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:58
    TaskList[tslot].AppID = task_app_id;
80006108:	800227b7          	lui	a5,0x80022
8000610c:	fe842703          	lw	a4,-24(s0)
80006110:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80006114:	00070793          	mv	a5,a4
80006118:	00579793          	slli	a5,a5,0x5
8000611c:	00e787b3          	add	a5,a5,a4
80006120:	00279793          	slli	a5,a5,0x2
80006124:	00f687b3          	add	a5,a3,a5
80006128:	fcc42703          	lw	a4,-52(s0)
8000612c:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:59
    TaskList[tslot].taskSize = 4 * (txt_size + bss_size); // it multiply by four because each word has 32 bits and the memory is addressed by byte - so each word is composed by 4 addresses
80006130:	fd842703          	lw	a4,-40(s0)
80006134:	fd442783          	lw	a5,-44(s0)
80006138:	00f707b3          	add	a5,a4,a5
8000613c:	00279693          	slli	a3,a5,0x2
80006140:	800227b7          	lui	a5,0x80022
80006144:	fe842703          	lw	a4,-24(s0)
80006148:	cb878613          	addi	a2,a5,-840 # 80021cb8 <__stack_top+0xfffdfc68>
8000614c:	00070793          	mv	a5,a4
80006150:	00579793          	slli	a5,a5,0x5
80006154:	00e787b3          	add	a5,a5,a4
80006158:	00279793          	slli	a5,a5,0x2
8000615c:	00f607b3          	add	a5,a2,a5
80006160:	02d7a223          	sw	a3,36(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:60
    printsv("Task total size (txt+bss): ", TaskList[tslot].taskSize);
80006164:	800227b7          	lui	a5,0x80022
80006168:	fe842703          	lw	a4,-24(s0)
8000616c:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80006170:	00070793          	mv	a5,a4
80006174:	00579793          	slli	a5,a5,0x5
80006178:	00e787b3          	add	a5,a5,a4
8000617c:	00279793          	slli	a5,a5,0x2
80006180:	00f687b3          	add	a5,a3,a5
80006184:	0247a783          	lw	a5,36(a5)
80006188:	00078593          	mv	a1,a5
8000618c:	800077b7          	lui	a5,0x80007
80006190:	63078513          	addi	a0,a5,1584 # 80007630 <__stack_top+0xfffc55e0>
80006194:	d91fc0ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:61
    TaskList[tslot].taskAddr = (unsigned int)pvPortMalloc(TaskList[tslot].taskSize+64);
80006198:	800227b7          	lui	a5,0x80022
8000619c:	fe842703          	lw	a4,-24(s0)
800061a0:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdfc68>
800061a4:	00070793          	mv	a5,a4
800061a8:	00579793          	slli	a5,a5,0x5
800061ac:	00e787b3          	add	a5,a5,a4
800061b0:	00279793          	slli	a5,a5,0x2
800061b4:	00f687b3          	add	a5,a3,a5
800061b8:	0247a783          	lw	a5,36(a5)
800061bc:	04078793          	addi	a5,a5,64
800061c0:	00078513          	mv	a0,a5
800061c4:	924fb0ef          	jal	ra,800012e8 <pvPortMalloc>
800061c8:	00050793          	mv	a5,a0
800061cc:	00078613          	mv	a2,a5
800061d0:	800227b7          	lui	a5,0x80022
800061d4:	fe842703          	lw	a4,-24(s0)
800061d8:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdfc68>
800061dc:	00070793          	mv	a5,a4
800061e0:	00579793          	slli	a5,a5,0x5
800061e4:	00e787b3          	add	a5,a5,a4
800061e8:	00279793          	slli	a5,a5,0x2
800061ec:	00f687b3          	add	a5,a3,a5
800061f0:	02c7a423          	sw	a2,40(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:62
    printsv("Task addr: ", TaskList[tslot].taskAddr);
800061f4:	800227b7          	lui	a5,0x80022
800061f8:	fe842703          	lw	a4,-24(s0)
800061fc:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80006200:	00070793          	mv	a5,a4
80006204:	00579793          	slli	a5,a5,0x5
80006208:	00e787b3          	add	a5,a5,a4
8000620c:	00279793          	slli	a5,a5,0x2
80006210:	00f687b3          	add	a5,a3,a5
80006214:	0287a783          	lw	a5,40(a5)
80006218:	00078593          	mv	a1,a5
8000621c:	800077b7          	lui	a5,0x80007
80006220:	64c78513          	addi	a0,a5,1612 # 8000764c <__stack_top+0xfffc55fc>
80006224:	d01fc0ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:63
    TaskList[tslot].mainAddr =  TaskList[tslot].taskAddr + (4 * start_point);
80006228:	800227b7          	lui	a5,0x80022
8000622c:	fe842703          	lw	a4,-24(s0)
80006230:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80006234:	00070793          	mv	a5,a4
80006238:	00579793          	slli	a5,a5,0x5
8000623c:	00e787b3          	add	a5,a5,a4
80006240:	00279793          	slli	a5,a5,0x2
80006244:	00f687b3          	add	a5,a3,a5
80006248:	0287a703          	lw	a4,40(a5)
8000624c:	fd042783          	lw	a5,-48(s0)
80006250:	00279793          	slli	a5,a5,0x2
80006254:	00f706b3          	add	a3,a4,a5
80006258:	800227b7          	lui	a5,0x80022
8000625c:	fe842703          	lw	a4,-24(s0)
80006260:	cb878613          	addi	a2,a5,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80006264:	00070793          	mv	a5,a4
80006268:	00579793          	slli	a5,a5,0x5
8000626c:	00e787b3          	add	a5,a5,a4
80006270:	00279793          	slli	a5,a5,0x2
80006274:	00f607b3          	add	a5,a2,a5
80006278:	02d7a623          	sw	a3,44(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:69

    // filling the MemoryRegion_t struct
    //TaskList[tslot].memRegion.ulLengthInBytes = 0;// TaskList[tslot].taskSize;
    //TaskList[tslot].memRegion.pvBaseAddress = 0;//TaskList[tslot].taskAddr;

    for(i=0;i<NUM_MAX_APP_TASKS;i++){
8000627c:	fe042623          	sw	zero,-20(s0)
80006280:	0700006f          	j	800062f0 <API_TaskAllocation+0x2b4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:70 (discriminator 3)
        TaskList[tslot].PendingReq[i] = FALSE;
80006284:	800226b7          	lui	a3,0x80022
80006288:	fe842703          	lw	a4,-24(s0)
8000628c:	00070793          	mv	a5,a4
80006290:	00579793          	slli	a5,a5,0x5
80006294:	00e787b3          	add	a5,a5,a4
80006298:	fec42703          	lw	a4,-20(s0)
8000629c:	00e787b3          	add	a5,a5,a4
800062a0:	00c78793          	addi	a5,a5,12
800062a4:	00279713          	slli	a4,a5,0x2
800062a8:	cb868793          	addi	a5,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
800062ac:	00f707b3          	add	a5,a4,a5
800062b0:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:71 (discriminator 3)
        TaskList[tslot].TasksMap[i] = 0;
800062b4:	800226b7          	lui	a3,0x80022
800062b8:	fe842703          	lw	a4,-24(s0)
800062bc:	00070793          	mv	a5,a4
800062c0:	00579793          	slli	a5,a5,0x5
800062c4:	00e787b3          	add	a5,a5,a4
800062c8:	fec42703          	lw	a4,-20(s0)
800062cc:	00e787b3          	add	a5,a5,a4
800062d0:	01478793          	addi	a5,a5,20
800062d4:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
800062d8:	00279793          	slli	a5,a5,0x2
800062dc:	00f707b3          	add	a5,a4,a5
800062e0:	0007a623          	sw	zero,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:69 (discriminator 3)
    for(i=0;i<NUM_MAX_APP_TASKS;i++){
800062e4:	fec42783          	lw	a5,-20(s0)
800062e8:	00178793          	addi	a5,a5,1
800062ec:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:69 (discriminator 1)
800062f0:	fec42703          	lw	a4,-20(s0)
800062f4:	00900793          	li	a5,9
800062f8:	f8e7d6e3          	ble	a4,a5,80006284 <API_TaskAllocation+0x248>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:74
    }

    return tslot;
800062fc:	fe842783          	lw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:75
}
80006300:	00078513          	mv	a0,a5
80006304:	03c12083          	lw	ra,60(sp)
80006308:	03812403          	lw	s0,56(sp)
8000630c:	04010113          	addi	sp,sp,64
80006310:	00008067          	ret

80006314 <API_GetTaskSlot>:
API_GetTaskSlot():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:77

unsigned int API_GetTaskSlot(unsigned int task_id, unsigned int app_id){
80006314:	fd010113          	addi	sp,sp,-48
80006318:	02112623          	sw	ra,44(sp)
8000631c:	02812423          	sw	s0,40(sp)
80006320:	03010413          	addi	s0,sp,48
80006324:	fca42e23          	sw	a0,-36(s0)
80006328:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:79
    unsigned int i;
    for( i = 0; i < NUM_MAX_APP_TASKS; i++){
8000632c:	fe042623          	sw	zero,-20(s0)
80006330:	0980006f          	j	800063c8 <API_GetTaskSlot+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:80
        if(task_id == TaskList[i].TaskID && app_id == TaskList[i].AppID && TaskList[i].status != TASK_SLOT_EMPTY)
80006334:	800226b7          	lui	a3,0x80022
80006338:	fec42703          	lw	a4,-20(s0)
8000633c:	00070793          	mv	a5,a4
80006340:	00579793          	slli	a5,a5,0x5
80006344:	00e787b3          	add	a5,a5,a4
80006348:	00279793          	slli	a5,a5,0x2
8000634c:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80006350:	00e787b3          	add	a5,a5,a4
80006354:	0107a783          	lw	a5,16(a5)
80006358:	fdc42703          	lw	a4,-36(s0)
8000635c:	06f71063          	bne	a4,a5,800063bc <API_GetTaskSlot+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:80 (discriminator 1)
80006360:	800227b7          	lui	a5,0x80022
80006364:	fec42703          	lw	a4,-20(s0)
80006368:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdfc68>
8000636c:	00070793          	mv	a5,a4
80006370:	00579793          	slli	a5,a5,0x5
80006374:	00e787b3          	add	a5,a5,a4
80006378:	00279793          	slli	a5,a5,0x2
8000637c:	00f687b3          	add	a5,a3,a5
80006380:	0147a783          	lw	a5,20(a5)
80006384:	fd842703          	lw	a4,-40(s0)
80006388:	02f71a63          	bne	a4,a5,800063bc <API_GetTaskSlot+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:80 (discriminator 2)
8000638c:	800226b7          	lui	a3,0x80022
80006390:	fec42703          	lw	a4,-20(s0)
80006394:	00070793          	mv	a5,a4
80006398:	00579793          	slli	a5,a5,0x5
8000639c:	00e787b3          	add	a5,a5,a4
800063a0:	00279793          	slli	a5,a5,0x2
800063a4:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
800063a8:	00e787b3          	add	a5,a5,a4
800063ac:	0007a783          	lw	a5,0(a5)
800063b0:	00078663          	beqz	a5,800063bc <API_GetTaskSlot+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:81
            return i;
800063b4:	fec42783          	lw	a5,-20(s0)
800063b8:	02c0006f          	j	800063e4 <API_GetTaskSlot+0xd0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:79 (discriminator 2)
    for( i = 0; i < NUM_MAX_APP_TASKS; i++){
800063bc:	fec42783          	lw	a5,-20(s0)
800063c0:	00178793          	addi	a5,a5,1
800063c4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:79 (discriminator 1)
800063c8:	fec42703          	lw	a4,-20(s0)
800063cc:	00900793          	li	a5,9
800063d0:	f6e7f2e3          	bleu	a4,a5,80006334 <API_GetTaskSlot+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:83
    }
    prints("returning erro2\n");
800063d4:	800077b7          	lui	a5,0x80007
800063d8:	65878513          	addi	a0,a5,1624 # 80007658 <__stack_top+0xfffc5608>
800063dc:	a9dfc0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:84
    return ERRO;
800063e0:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:85
}
800063e4:	00078513          	mv	a0,a5
800063e8:	02c12083          	lw	ra,44(sp)
800063ec:	02812403          	lw	s0,40(sp)
800063f0:	03010113          	addi	sp,sp,48
800063f4:	00008067          	ret

800063f8 <API_TaskStart>:
API_TaskStart():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:87

void API_TaskStart(unsigned int slot){
800063f8:	fd010113          	addi	sp,sp,-48
800063fc:	02112623          	sw	ra,44(sp)
80006400:	02812423          	sw	s0,40(sp)
80006404:	03010413          	addi	s0,sp,48
80006408:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:89
    BaseType_t xReturned;
    TaskList[slot].status = TASK_SLOT_RUNNING;
8000640c:	800226b7          	lui	a3,0x80022
80006410:	fdc42703          	lw	a4,-36(s0)
80006414:	00070793          	mv	a5,a4
80006418:	00579793          	slli	a5,a5,0x5
8000641c:	00e787b3          	add	a5,a5,a4
80006420:	00279793          	slli	a5,a5,0x2
80006424:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80006428:	00e787b3          	add	a5,a5,a4
8000642c:	00100713          	li	a4,1
80006430:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:100
                                    tskIDLE_PRIORITY+1,         //uxPriority
                                    &TaskList[slot].TaskHandler,// pxCreatedTask
                                    NULL,                       // puxStackBuffer
                                    &TaskList[slot].memRegion );//xRegions*/
    
    xReturned = xTaskCreate(TaskList[slot].mainAddr,
80006434:	800227b7          	lui	a5,0x80022
80006438:	fdc42703          	lw	a4,-36(s0)
8000643c:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80006440:	00070793          	mv	a5,a4
80006444:	00579793          	slli	a5,a5,0x5
80006448:	00e787b3          	add	a5,a5,a4
8000644c:	00279793          	slli	a5,a5,0x2
80006450:	00f687b3          	add	a5,a3,a5
80006454:	02c7a783          	lw	a5,44(a5)
80006458:	00078513          	mv	a0,a5
8000645c:	fdc42703          	lw	a4,-36(s0)
80006460:	00070793          	mv	a5,a4
80006464:	00579793          	slli	a5,a5,0x5
80006468:	00e787b3          	add	a5,a5,a4
8000646c:	00279793          	slli	a5,a5,0x2
80006470:	01078713          	addi	a4,a5,16
80006474:	800227b7          	lui	a5,0x80022
80006478:	cb878793          	addi	a5,a5,-840 # 80021cb8 <__stack_top+0xfffdfc68>
8000647c:	00f707b3          	add	a5,a4,a5
80006480:	00878793          	addi	a5,a5,8
80006484:	00000893          	li	a7,0
80006488:	00000813          	li	a6,0
8000648c:	00100713          	li	a4,1
80006490:	00000693          	li	a3,0
80006494:	00002637          	lui	a2,0x2
80006498:	3e860613          	addi	a2,a2,1000 # 23e8 <HEAP_SIZE-0xdc18>
8000649c:	800075b7          	lui	a1,0x80007
800064a0:	66c58593          	addi	a1,a1,1644 # 8000766c <__stack_top+0xfffc561c>
800064a4:	a75fb0ef          	jal	ra,80001f18 <xTaskGenericCreate>
800064a8:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:106
                            "LaTask",
                            9192,//8192,//4096,//16384,
                            NULL,
                            tskIDLE_PRIORITY+1,
                            &TaskList[slot].TaskHandler);
    if( xReturned != pdPASS ){
800064ac:	fec42703          	lw	a4,-20(s0)
800064b0:	00100793          	li	a5,1
800064b4:	00f70a63          	beq	a4,a5,800064c8 <API_TaskStart+0xd0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:107
        prints("ERROR - API_TaskStart!!!\n");
800064b8:	800077b7          	lui	a5,0x80007
800064bc:	67478513          	addi	a0,a5,1652 # 80007674 <__stack_top+0xfffc5624>
800064c0:	9b9fc0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:109
    }
    return;
800064c4:	00000013          	nop
800064c8:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:110
}
800064cc:	02c12083          	lw	ra,44(sp)
800064d0:	02812403          	lw	s0,40(sp)
800064d4:	03010113          	addi	sp,sp,48
800064d8:	00008067          	ret

800064dc <API_FinishRunningTask>:
API_FinishRunningTask():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:113


void API_FinishRunningTask(){
800064dc:	fe010113          	addi	sp,sp,-32
800064e0:	00112e23          	sw	ra,28(sp)
800064e4:	00812c23          	sw	s0,24(sp)
800064e8:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:115
    int i;
    unsigned int slot = API_GetCurrentTaskSlot();
800064ec:	a39ff0ef          	jal	ra,80005f24 <API_GetCurrentTaskSlot>
800064f0:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:116
    while(API_checkPipe(slot) == 1){
800064f4:	00c0006f          	j	80006500 <API_FinishRunningTask+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:117
        vTaskDelay(1);
800064f8:	00100513          	li	a0,1
800064fc:	d15fb0ef          	jal	ra,80002210 <vTaskDelay>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:116
    while(API_checkPipe(slot) == 1){
80006500:	fe842503          	lw	a0,-24(s0)
80006504:	56c000ef          	jal	ra,80006a70 <API_checkPipe>
80006508:	00050713          	mv	a4,a0
8000650c:	00100793          	li	a5,1
80006510:	fef704e3          	beq	a4,a5,800064f8 <API_FinishRunningTask+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:119
    }
    vPortFree(TaskList[slot].taskAddr);
80006514:	800227b7          	lui	a5,0x80022
80006518:	fe842703          	lw	a4,-24(s0)
8000651c:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80006520:	00070793          	mv	a5,a4
80006524:	00579793          	slli	a5,a5,0x5
80006528:	00e787b3          	add	a5,a5,a4
8000652c:	00279793          	slli	a5,a5,0x2
80006530:	00f687b3          	add	a5,a3,a5
80006534:	0287a783          	lw	a5,40(a5)
80006538:	00078513          	mv	a0,a5
8000653c:	f89fa0ef          	jal	ra,800014c4 <vPortFree>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:121
    
    printsvsv("Task ", TaskList[slot].TaskID, "deleted with sucsess! From application ", TaskList[slot].AppID);
80006540:	800226b7          	lui	a3,0x80022
80006544:	fe842703          	lw	a4,-24(s0)
80006548:	00070793          	mv	a5,a4
8000654c:	00579793          	slli	a5,a5,0x5
80006550:	00e787b3          	add	a5,a5,a4
80006554:	00279793          	slli	a5,a5,0x2
80006558:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
8000655c:	00e787b3          	add	a5,a5,a4
80006560:	0107a783          	lw	a5,16(a5)
80006564:	00078593          	mv	a1,a5
80006568:	800227b7          	lui	a5,0x80022
8000656c:	fe842703          	lw	a4,-24(s0)
80006570:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80006574:	00070793          	mv	a5,a4
80006578:	00579793          	slli	a5,a5,0x5
8000657c:	00e787b3          	add	a5,a5,a4
80006580:	00279793          	slli	a5,a5,0x2
80006584:	00f687b3          	add	a5,a3,a5
80006588:	0147a783          	lw	a5,20(a5)
8000658c:	00078693          	mv	a3,a5
80006590:	800077b7          	lui	a5,0x80007
80006594:	69078613          	addi	a2,a5,1680 # 80007690 <__stack_top+0xfffc5640>
80006598:	800077b7          	lui	a5,0x80007
8000659c:	6b878513          	addi	a0,a5,1720 # 800076b8 <__stack_top+0xfffc5668>
800065a0:	9cdfc0ef          	jal	ra,80002f6c <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:122
    TaskList[slot].status = TASK_SLOT_EMPTY;
800065a4:	800226b7          	lui	a3,0x80022
800065a8:	fe842703          	lw	a4,-24(s0)
800065ac:	00070793          	mv	a5,a4
800065b0:	00579793          	slli	a5,a5,0x5
800065b4:	00e787b3          	add	a5,a5,a4
800065b8:	00279793          	slli	a5,a5,0x2
800065bc:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
800065c0:	00e787b3          	add	a5,a5,a4
800065c4:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:124
    
    for(i = 0; i < NUM_MAX_APP_TASKS; i++){
800065c8:	fe042623          	sw	zero,-20(s0)
800065cc:	0c40006f          	j	80006690 <API_FinishRunningTask+0x1b4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:125
        printsvsv("TaskList[", i, "]status: ", TaskList[i].status );
800065d0:	800226b7          	lui	a3,0x80022
800065d4:	fec42703          	lw	a4,-20(s0)
800065d8:	00070793          	mv	a5,a4
800065dc:	00579793          	slli	a5,a5,0x5
800065e0:	00e787b3          	add	a5,a5,a4
800065e4:	00279793          	slli	a5,a5,0x2
800065e8:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
800065ec:	00e787b3          	add	a5,a5,a4
800065f0:	0007a783          	lw	a5,0(a5)
800065f4:	00078693          	mv	a3,a5
800065f8:	800077b7          	lui	a5,0x80007
800065fc:	6c078613          	addi	a2,a5,1728 # 800076c0 <__stack_top+0xfffc5670>
80006600:	fec42583          	lw	a1,-20(s0)
80006604:	800077b7          	lui	a5,0x80007
80006608:	6cc78513          	addi	a0,a5,1740 # 800076cc <__stack_top+0xfffc567c>
8000660c:	961fc0ef          	jal	ra,80002f6c <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:126
        if(TaskList[i].status != TASK_SLOT_EMPTY){
80006610:	800226b7          	lui	a3,0x80022
80006614:	fec42703          	lw	a4,-20(s0)
80006618:	00070793          	mv	a5,a4
8000661c:	00579793          	slli	a5,a5,0x5
80006620:	00e787b3          	add	a5,a5,a4
80006624:	00279793          	slli	a5,a5,0x2
80006628:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
8000662c:	00e787b3          	add	a5,a5,a4
80006630:	0007a783          	lw	a5,0(a5)
80006634:	04078863          	beqz	a5,80006684 <API_FinishRunningTask+0x1a8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:127
            printsvsv("Returning because of: ", i, "TaskList[i].status ", TaskList[i].status);
80006638:	800226b7          	lui	a3,0x80022
8000663c:	fec42703          	lw	a4,-20(s0)
80006640:	00070793          	mv	a5,a4
80006644:	00579793          	slli	a5,a5,0x5
80006648:	00e787b3          	add	a5,a5,a4
8000664c:	00279793          	slli	a5,a5,0x2
80006650:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
80006654:	00e787b3          	add	a5,a5,a4
80006658:	0007a783          	lw	a5,0(a5)
8000665c:	00078693          	mv	a3,a5
80006660:	800077b7          	lui	a5,0x80007
80006664:	6d878613          	addi	a2,a5,1752 # 800076d8 <__stack_top+0xfffc5688>
80006668:	fec42583          	lw	a1,-20(s0)
8000666c:	800077b7          	lui	a5,0x80007
80006670:	6ec78513          	addi	a0,a5,1772 # 800076ec <__stack_top+0xfffc569c>
80006674:	8f9fc0ef          	jal	ra,80002f6c <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:128
            i = 0xffffffff;
80006678:	fff00793          	li	a5,-1
8000667c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:129
            break;
80006680:	01c0006f          	j	8000669c <API_FinishRunningTask+0x1c0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:124 (discriminator 2)
    for(i = 0; i < NUM_MAX_APP_TASKS; i++){
80006684:	fec42783          	lw	a5,-20(s0)
80006688:	00178793          	addi	a5,a5,1
8000668c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:124 (discriminator 1)
80006690:	fec42703          	lw	a4,-20(s0)
80006694:	00900793          	li	a5,9
80006698:	f2e7dce3          	ble	a4,a5,800065d0 <API_FinishRunningTask+0xf4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:132
        }
    }
    if(i != 0xffffffff){
8000669c:	fec42703          	lw	a4,-20(s0)
800066a0:	fff00793          	li	a5,-1
800066a4:	00f70463          	beq	a4,a5,800066ac <API_FinishRunningTask+0x1d0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:133
        API_setFreqIdle();
800066a8:	45c000ef          	jal	ra,80006b04 <API_setFreqIdle>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:135
    }
    API_SendFinishTask(TaskList[slot].TaskID, TaskList[slot].AppID);
800066ac:	800226b7          	lui	a3,0x80022
800066b0:	fe842703          	lw	a4,-24(s0)
800066b4:	00070793          	mv	a5,a4
800066b8:	00579793          	slli	a5,a5,0x5
800066bc:	00e787b3          	add	a5,a5,a4
800066c0:	00279793          	slli	a5,a5,0x2
800066c4:	cb868713          	addi	a4,a3,-840 # 80021cb8 <__stack_top+0xfffdfc68>
800066c8:	00e787b3          	add	a5,a5,a4
800066cc:	0107a603          	lw	a2,16(a5)
800066d0:	800227b7          	lui	a5,0x80022
800066d4:	fe842703          	lw	a4,-24(s0)
800066d8:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdfc68>
800066dc:	00070793          	mv	a5,a4
800066e0:	00579793          	slli	a5,a5,0x5
800066e4:	00e787b3          	add	a5,a5,a4
800066e8:	00279793          	slli	a5,a5,0x2
800066ec:	00f687b3          	add	a5,a3,a5
800066f0:	0147a783          	lw	a5,20(a5)
800066f4:	00078593          	mv	a1,a5
800066f8:	00060513          	mv	a0,a2
800066fc:	b3cfd0ef          	jal	ra,80003a38 <API_SendFinishTask>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:136
    vTaskDelete(TaskList[slot].TaskHandler);
80006700:	800227b7          	lui	a5,0x80022
80006704:	fe842703          	lw	a4,-24(s0)
80006708:	cb878693          	addi	a3,a5,-840 # 80021cb8 <__stack_top+0xfffdfc68>
8000670c:	00070793          	mv	a5,a4
80006710:	00579793          	slli	a5,a5,0x5
80006714:	00e787b3          	add	a5,a5,a4
80006718:	00279793          	slli	a5,a5,0x2
8000671c:	00f687b3          	add	a5,a3,a5
80006720:	0187a783          	lw	a5,24(a5)
80006724:	00078513          	mv	a0,a5
80006728:	a0dfb0ef          	jal	ra,80002134 <vTaskDelete>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:137
    return;
8000672c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:138
}
80006730:	01c12083          	lw	ra,28(sp)
80006734:	01812403          	lw	s0,24(sp)
80006738:	02010113          	addi	sp,sp,32
8000673c:	00008067          	ret

80006740 <API_PipeInitialization>:
API_PipeInitialization():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:11
extern volatile ServicePacket ServicePipe[PIPE_SIZE];
extern unsigned int messageID;

////////////////////////////////////////////////////////////
// Initialize the PIPE, setting the status of each slot to FREE
void API_PipeInitialization(){
80006740:	fe010113          	addi	sp,sp,-32
80006744:	00812e23          	sw	s0,28(sp)
80006748:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:13
    int i;
    messageID = 0;
8000674c:	800217b7          	lui	a5,0x80021
80006750:	b807a623          	sw	zero,-1140(a5) # 80020b8c <__stack_top+0xfffdeb3c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:14
    for( i = 0; i < PIPE_SIZE; i++ ){
80006754:	fe042623          	sw	zero,-20(s0)
80006758:	0740006f          	j	800067cc <API_PipeInitialization+0x8c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:15 (discriminator 3)
        MessagePipe[i].status = PIPE_FREE;
8000675c:	800217b7          	lui	a5,0x80021
80006760:	fec42683          	lw	a3,-20(s0)
80006764:	24400713          	li	a4,580
80006768:	02e68733          	mul	a4,a3,a4
8000676c:	c0078793          	addi	a5,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
80006770:	00f707b3          	add	a5,a4,a5
80006774:	fff00713          	li	a4,-1
80006778:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:16 (discriminator 3)
        MessagePipe[i].msgID  = 0;
8000677c:	800217b7          	lui	a5,0x80021
80006780:	fec42683          	lw	a3,-20(s0)
80006784:	c0078713          	addi	a4,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
80006788:	24400793          	li	a5,580
8000678c:	02f687b3          	mul	a5,a3,a5
80006790:	00f707b3          	add	a5,a4,a5
80006794:	0007a423          	sw	zero,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:17 (discriminator 3)
        ServicePipe[i].status = PIPE_FREE;
80006798:	800216b7          	lui	a3,0x80021
8000679c:	fec42703          	lw	a4,-20(s0)
800067a0:	00070793          	mv	a5,a4
800067a4:	00479793          	slli	a5,a5,0x4
800067a8:	40e787b3          	sub	a5,a5,a4
800067ac:	00279793          	slli	a5,a5,0x2
800067b0:	a9c68713          	addi	a4,a3,-1380 # 80020a9c <__stack_top+0xfffdea4c>
800067b4:	00e787b3          	add	a5,a5,a4
800067b8:	fff00713          	li	a4,-1
800067bc:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:14 (discriminator 3)
    for( i = 0; i < PIPE_SIZE; i++ ){
800067c0:	fec42783          	lw	a5,-20(s0)
800067c4:	00178793          	addi	a5,a5,1
800067c8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:14 (discriminator 1)
800067cc:	fec42703          	lw	a4,-20(s0)
800067d0:	00300793          	li	a5,3
800067d4:	f8e7d4e3          	ble	a4,a5,8000675c <API_PipeInitialization+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:19
    }
    return;
800067d8:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:20
}
800067dc:	01c12403          	lw	s0,28(sp)
800067e0:	02010113          	addi	sp,sp,32
800067e4:	00008067          	ret

800067e8 <API_GetMessageSlot>:
API_GetMessageSlot():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:24

////////////////////////////////////////////////////////////
// Returns a free Message slot 
unsigned int API_GetMessageSlot(){
800067e8:	fe010113          	addi	sp,sp,-32
800067ec:	00812e23          	sw	s0,28(sp)
800067f0:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:26
    int i;
    unsigned int sel = PIPE_FULL;
800067f4:	fdfe07b7          	lui	a5,0xfdfe0
800067f8:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9ddad>
800067fc:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:27
    for( i = 0; i < PIPE_SIZE; i++ ){
80006800:	fe042623          	sw	zero,-20(s0)
80006804:	0980006f          	j	8000689c <API_GetMessageSlot+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:28
        if (MessagePipe[i].status == PIPE_FREE){
80006808:	800217b7          	lui	a5,0x80021
8000680c:	fec42683          	lw	a3,-20(s0)
80006810:	24400713          	li	a4,580
80006814:	02e68733          	mul	a4,a3,a4
80006818:	c0078793          	addi	a5,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
8000681c:	00f707b3          	add	a5,a4,a5
80006820:	0007a703          	lw	a4,0(a5)
80006824:	fff00793          	li	a5,-1
80006828:	06f71463          	bne	a4,a5,80006890 <API_GetMessageSlot+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:29
            MessagePipe[i].status = PIPE_OCCUPIED;
8000682c:	800217b7          	lui	a5,0x80021
80006830:	fec42683          	lw	a3,-20(s0)
80006834:	24400713          	li	a4,580
80006838:	02e68733          	mul	a4,a3,a4
8000683c:	c0078793          	addi	a5,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
80006840:	00f707b3          	add	a5,a4,a5
80006844:	00100713          	li	a4,1
80006848:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:30
            MessagePipe[i].msgID = messageID;
8000684c:	800217b7          	lui	a5,0x80021
80006850:	b8c7a703          	lw	a4,-1140(a5) # 80020b8c <__stack_top+0xfffdeb3c>
80006854:	800217b7          	lui	a5,0x80021
80006858:	fec42603          	lw	a2,-20(s0)
8000685c:	c0078693          	addi	a3,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
80006860:	24400793          	li	a5,580
80006864:	02f607b3          	mul	a5,a2,a5
80006868:	00f687b3          	add	a5,a3,a5
8000686c:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:31
            messageID++;
80006870:	800217b7          	lui	a5,0x80021
80006874:	b8c7a783          	lw	a5,-1140(a5) # 80020b8c <__stack_top+0xfffdeb3c>
80006878:	00178713          	addi	a4,a5,1
8000687c:	800217b7          	lui	a5,0x80021
80006880:	b8e7a623          	sw	a4,-1140(a5) # 80020b8c <__stack_top+0xfffdeb3c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:32
            sel = i;
80006884:	fec42783          	lw	a5,-20(s0)
80006888:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:33
            break;
8000688c:	01c0006f          	j	800068a8 <API_GetMessageSlot+0xc0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:27 (discriminator 2)
    for( i = 0; i < PIPE_SIZE; i++ ){
80006890:	fec42783          	lw	a5,-20(s0)
80006894:	00178793          	addi	a5,a5,1
80006898:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:27 (discriminator 1)
8000689c:	fec42703          	lw	a4,-20(s0)
800068a0:	00300793          	li	a5,3
800068a4:	f6e7d2e3          	ble	a4,a5,80006808 <API_GetMessageSlot+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:36
        }
    }
    if(messageID > 16777215){
800068a8:	800217b7          	lui	a5,0x80021
800068ac:	b8c7a703          	lw	a4,-1140(a5) # 80020b8c <__stack_top+0xfffdeb3c>
800068b0:	010007b7          	lui	a5,0x1000
800068b4:	06f76663          	bltu	a4,a5,80006920 <API_GetMessageSlot+0x138>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:37
        messageID = 256;
800068b8:	800217b7          	lui	a5,0x80021
800068bc:	10000713          	li	a4,256
800068c0:	b8e7a623          	sw	a4,-1140(a5) # 80020b8c <__stack_top+0xfffdeb3c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:38
        for( i = 0; i < PIPE_SIZE; i++ ){
800068c4:	fe042623          	sw	zero,-20(s0)
800068c8:	04c0006f          	j	80006914 <API_GetMessageSlot+0x12c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:39 (discriminator 3)
            MessagePipe[i].msgID = (MessagePipe[i].msgID & 0x000000FF);
800068cc:	800217b7          	lui	a5,0x80021
800068d0:	fec42683          	lw	a3,-20(s0)
800068d4:	c0078713          	addi	a4,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
800068d8:	24400793          	li	a5,580
800068dc:	02f687b3          	mul	a5,a3,a5
800068e0:	00f707b3          	add	a5,a4,a5
800068e4:	0087a783          	lw	a5,8(a5)
800068e8:	0ff7f713          	andi	a4,a5,255
800068ec:	800217b7          	lui	a5,0x80021
800068f0:	fec42603          	lw	a2,-20(s0)
800068f4:	c0078693          	addi	a3,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
800068f8:	24400793          	li	a5,580
800068fc:	02f607b3          	mul	a5,a2,a5
80006900:	00f687b3          	add	a5,a3,a5
80006904:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:38 (discriminator 3)
        for( i = 0; i < PIPE_SIZE; i++ ){
80006908:	fec42783          	lw	a5,-20(s0)
8000690c:	00178793          	addi	a5,a5,1
80006910:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:38 (discriminator 1)
80006914:	fec42703          	lw	a4,-20(s0)
80006918:	00300793          	li	a5,3
8000691c:	fae7d8e3          	ble	a4,a5,800068cc <API_GetMessageSlot+0xe4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:42
        }
    }
    return sel;
80006920:	fe842783          	lw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:43
}
80006924:	00078513          	mv	a0,a5
80006928:	01c12403          	lw	s0,28(sp)
8000692c:	02010113          	addi	sp,sp,32
80006930:	00008067          	ret

80006934 <API_GetServiceSlot>:
API_GetServiceSlot():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:47

////////////////////////////////////////////////////////////
// Returns a free Service slot
unsigned int API_GetServiceSlot(){
80006934:	fe010113          	addi	sp,sp,-32
80006938:	00812e23          	sw	s0,28(sp)
8000693c:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:49
    int i;
    for( i = 0; i < PIPE_SIZE; i++ ){
80006940:	fe042623          	sw	zero,-20(s0)
80006944:	06c0006f          	j	800069b0 <API_GetServiceSlot+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:50
        if (ServicePipe[i].status == PIPE_FREE){
80006948:	800216b7          	lui	a3,0x80021
8000694c:	fec42703          	lw	a4,-20(s0)
80006950:	00070793          	mv	a5,a4
80006954:	00479793          	slli	a5,a5,0x4
80006958:	40e787b3          	sub	a5,a5,a4
8000695c:	00279793          	slli	a5,a5,0x2
80006960:	a9c68713          	addi	a4,a3,-1380 # 80020a9c <__stack_top+0xfffdea4c>
80006964:	00e787b3          	add	a5,a5,a4
80006968:	0007a703          	lw	a4,0(a5)
8000696c:	fff00793          	li	a5,-1
80006970:	02f71a63          	bne	a4,a5,800069a4 <API_GetServiceSlot+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:51
            ServicePipe[i].status = PIPE_OCCUPIED;
80006974:	800216b7          	lui	a3,0x80021
80006978:	fec42703          	lw	a4,-20(s0)
8000697c:	00070793          	mv	a5,a4
80006980:	00479793          	slli	a5,a5,0x4
80006984:	40e787b3          	sub	a5,a5,a4
80006988:	00279793          	slli	a5,a5,0x2
8000698c:	a9c68713          	addi	a4,a3,-1380 # 80020a9c <__stack_top+0xfffdea4c>
80006990:	00e787b3          	add	a5,a5,a4
80006994:	00100713          	li	a4,1
80006998:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:52
            return i;
8000699c:	fec42783          	lw	a5,-20(s0)
800069a0:	0240006f          	j	800069c4 <API_GetServiceSlot+0x90>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:49 (discriminator 2)
    for( i = 0; i < PIPE_SIZE; i++ ){
800069a4:	fec42783          	lw	a5,-20(s0)
800069a8:	00178793          	addi	a5,a5,1
800069ac:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:49 (discriminator 1)
800069b0:	fec42703          	lw	a4,-20(s0)
800069b4:	00300793          	li	a5,3
800069b8:	f8e7d8e3          	ble	a4,a5,80006948 <API_GetServiceSlot+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:55
        }
    }
    return PIPE_FULL;
800069bc:	fdfe07b7          	lui	a5,0xfdfe0
800069c0:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9ddad>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:56
}
800069c4:	00078513          	mv	a0,a5
800069c8:	01c12403          	lw	s0,28(sp)
800069cc:	02010113          	addi	sp,sp,32
800069d0:	00008067          	ret

800069d4 <API_ClearPipeSlot>:
API_ClearPipeSlot():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:60

////////////////////////////////////////////////////////////
// Clear one PipeSlot after send it
void API_ClearPipeSlot(unsigned int typeSlot){
800069d4:	fd010113          	addi	sp,sp,-48
800069d8:	02812623          	sw	s0,44(sp)
800069dc:	03010413          	addi	s0,sp,48
800069e0:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:61
    unsigned type = typeSlot & 0xFFFF0000;
800069e4:	fdc42703          	lw	a4,-36(s0)
800069e8:	ffff07b7          	lui	a5,0xffff0
800069ec:	00f777b3          	and	a5,a4,a5
800069f0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:62
    unsigned slot = typeSlot & 0x0000FFFF;
800069f4:	fdc42703          	lw	a4,-36(s0)
800069f8:	000107b7          	lui	a5,0x10
800069fc:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80006a00:	00f777b3          	and	a5,a4,a5
80006a04:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:64
    
    if (type == SERVICE){
80006a08:	fec42703          	lw	a4,-20(s0)
80006a0c:	101007b7          	lui	a5,0x10100
80006a10:	02f71863          	bne	a4,a5,80006a40 <API_ClearPipeSlot+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:65
        ServicePipe[slot].status = PIPE_FREE;
80006a14:	800216b7          	lui	a3,0x80021
80006a18:	fe842703          	lw	a4,-24(s0)
80006a1c:	00070793          	mv	a5,a4
80006a20:	00479793          	slli	a5,a5,0x4
80006a24:	40e787b3          	sub	a5,a5,a4
80006a28:	00279793          	slli	a5,a5,0x2
80006a2c:	a9c68713          	addi	a4,a3,-1380 # 80020a9c <__stack_top+0xfffdea4c>
80006a30:	00e787b3          	add	a5,a5,a4
80006a34:	fff00713          	li	a4,-1
80006a38:	00e7a023          	sw	a4,0(a5) # 10100000 <RAM_SIZE+0x10080000>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:70
    } else { // type == MESSAGE
        //printsv("cleaning message pipe slot: ", slot);
        MessagePipe[slot].status = PIPE_FREE;
    }
    return;
80006a3c:	0280006f          	j	80006a64 <API_ClearPipeSlot+0x90>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:68
        MessagePipe[slot].status = PIPE_FREE;
80006a40:	800217b7          	lui	a5,0x80021
80006a44:	fe842683          	lw	a3,-24(s0)
80006a48:	24400713          	li	a4,580
80006a4c:	02e68733          	mul	a4,a3,a4
80006a50:	c0078793          	addi	a5,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
80006a54:	00f707b3          	add	a5,a4,a5
80006a58:	fff00713          	li	a4,-1
80006a5c:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:70
    return;
80006a60:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:71
}
80006a64:	02c12403          	lw	s0,44(sp)
80006a68:	03010113          	addi	sp,sp,48
80006a6c:	00008067          	ret

80006a70 <API_checkPipe>:
API_checkPipe():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:73

unsigned int API_checkPipe(unsigned int taskSlot){
80006a70:	fd010113          	addi	sp,sp,-48
80006a74:	02812623          	sw	s0,44(sp)
80006a78:	03010413          	addi	s0,sp,48
80006a7c:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:75
    unsigned int i;
    for(i = 0; i < PIPE_SIZE; i++){
80006a80:	fe042623          	sw	zero,-20(s0)
80006a84:	0600006f          	j	80006ae4 <API_checkPipe+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:80
        // printsv("i: ", i);
        // printsv("status: ", MessagePipe[i].status);
        // printsv("holder: ", MessagePipe[i].holder);
        // prints("---\n");
        if(MessagePipe[i].status == PIPE_OCCUPIED){
80006a88:	800217b7          	lui	a5,0x80021
80006a8c:	fec42683          	lw	a3,-20(s0)
80006a90:	24400713          	li	a4,580
80006a94:	02e68733          	mul	a4,a3,a4
80006a98:	c0078793          	addi	a5,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
80006a9c:	00f707b3          	add	a5,a4,a5
80006aa0:	0007a703          	lw	a4,0(a5)
80006aa4:	00100793          	li	a5,1
80006aa8:	02f71863          	bne	a4,a5,80006ad8 <API_checkPipe+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:81
            if(MessagePipe[i].holder == taskSlot){
80006aac:	800217b7          	lui	a5,0x80021
80006ab0:	fec42683          	lw	a3,-20(s0)
80006ab4:	c0078713          	addi	a4,a5,-1024 # 80020c00 <__stack_top+0xfffdebb0>
80006ab8:	24400793          	li	a5,580
80006abc:	02f687b3          	mul	a5,a3,a5
80006ac0:	00f707b3          	add	a5,a4,a5
80006ac4:	0047a783          	lw	a5,4(a5)
80006ac8:	fdc42703          	lw	a4,-36(s0)
80006acc:	00f71663          	bne	a4,a5,80006ad8 <API_checkPipe+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:82
                return 1;
80006ad0:	00100793          	li	a5,1
80006ad4:	0200006f          	j	80006af4 <API_checkPipe+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:75 (discriminator 2)
    for(i = 0; i < PIPE_SIZE; i++){
80006ad8:	fec42783          	lw	a5,-20(s0)
80006adc:	00178793          	addi	a5,a5,1
80006ae0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:75 (discriminator 1)
80006ae4:	fec42703          	lw	a4,-20(s0)
80006ae8:	00300793          	li	a5,3
80006aec:	f8e7fee3          	bleu	a4,a5,80006a88 <API_checkPipe+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:86
            }
        }
    }
    return 0;
80006af0:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:87
}
80006af4:	00078513          	mv	a0,a5
80006af8:	02c12403          	lw	s0,44(sp)
80006afc:	03010113          	addi	sp,sp,48
80006b00:	00008067          	ret

80006b04 <API_setFreqIdle>:
API_setFreqIdle():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:3
#include "dvfs.h"

void API_setFreqIdle(){
80006b04:	ff010113          	addi	sp,sp,-16
80006b08:	00112623          	sw	ra,12(sp)
80006b0c:	00812423          	sw	s0,8(sp)
80006b10:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:4
    prints("API_setFreqIdle\n ");
80006b14:	800077b7          	lui	a5,0x80007
80006b18:	70478513          	addi	a0,a5,1796 # 80007704 <__stack_top+0xfffc56b4>
80006b1c:	b5cfc0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:5
    *frequencyScale = FREQ_IDLE;
80006b20:	800087b7          	lui	a5,0x80008
80006b24:	8707a783          	lw	a5,-1936(a5) # 80007870 <__stack_top+0xfffc5820>
80006b28:	06400713          	li	a4,100
80006b2c:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:6
    return;
80006b30:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:7
}
80006b34:	00c12083          	lw	ra,12(sp)
80006b38:	00812403          	lw	s0,8(sp)
80006b3c:	01010113          	addi	sp,sp,16
80006b40:	00008067          	ret

80006b44 <API_setFreqScale>:
API_setFreqScale():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:9

void API_setFreqScale(unsigned int scale){
80006b44:	fe010113          	addi	sp,sp,-32
80006b48:	00812e23          	sw	s0,28(sp)
80006b4c:	02010413          	addi	s0,sp,32
80006b50:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:10
    *frequencyScale = scale;
80006b54:	800087b7          	lui	a5,0x80008
80006b58:	8707a783          	lw	a5,-1936(a5) # 80007870 <__stack_top+0xfffc5820>
80006b5c:	fec42703          	lw	a4,-20(s0)
80006b60:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:11
    return;
80006b64:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:12
}
80006b68:	01c12403          	lw	s0,28(sp)
80006b6c:	02010113          	addi	sp,sp,32
80006b70:	00008067          	ret

80006b74 <printExecutedInstructions>:
printExecutedInstructions():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:4
#include "thermal.h"


void printExecutedInstructions(){
80006b74:	ff010113          	addi	sp,sp,-16
80006b78:	00112623          	sw	ra,12(sp)
80006b7c:	00812423          	sw	s0,8(sp)
80006b80:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:5
    prints("--------------------------\n");
80006b84:	800077b7          	lui	a5,0x80007
80006b88:	71878513          	addi	a0,a5,1816 # 80007718 <__stack_top+0xfffc56c8>
80006b8c:	aecfc0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:6
    printsv("Loads:\t\t",       HW_get_32bit_reg(LOADS_COUNT));
80006b90:	900007b7          	lui	a5,0x90000
80006b94:	ff478513          	addi	a0,a5,-12 # 8ffffff4 <__stack_top+0xffbdfa4>
80006b98:	c04fa0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80006b9c:	00050793          	mv	a5,a0
80006ba0:	00078593          	mv	a1,a5
80006ba4:	800077b7          	lui	a5,0x80007
80006ba8:	73478513          	addi	a0,a5,1844 # 80007734 <__stack_top+0xfffc56e4>
80006bac:	b78fc0ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:7
    printsv("Stores:\t\t",      HW_get_32bit_reg(STORES_COUNT));
80006bb0:	900007b7          	lui	a5,0x90000
80006bb4:	ff078513          	addi	a0,a5,-16 # 8ffffff0 <__stack_top+0xffbdfa0>
80006bb8:	be4fa0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80006bbc:	00050793          	mv	a5,a0
80006bc0:	00078593          	mv	a1,a5
80006bc4:	800077b7          	lui	a5,0x80007
80006bc8:	74078513          	addi	a0,a5,1856 # 80007740 <__stack_top+0xfffc56f0>
80006bcc:	b58fc0ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:8
    printsv("Others:\t\t",      HW_get_32bit_reg(OTHERS_COUNT));
80006bd0:	900007b7          	lui	a5,0x90000
80006bd4:	fec78513          	addi	a0,a5,-20 # 8fffffec <__stack_top+0xffbdf9c>
80006bd8:	bc4fa0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80006bdc:	00050793          	mv	a5,a0
80006be0:	00078593          	mv	a1,a5
80006be4:	800077b7          	lui	a5,0x80007
80006be8:	74c78513          	addi	a0,a5,1868 # 8000774c <__stack_top+0xfffc56fc>
80006bec:	b38fc0ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:9
    prints("--------------------------\n");
80006bf0:	800077b7          	lui	a5,0x80007
80006bf4:	71878513          	addi	a0,a5,1816 # 80007718 <__stack_top+0xfffc56c8>
80006bf8:	a80fc0ef          	jal	ra,80002e78 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:10
}
80006bfc:	00000013          	nop
80006c00:	00c12083          	lw	ra,12(sp)
80006c04:	00812403          	lw	s0,8(sp)
80006c08:	01010113          	addi	sp,sp,16
80006c0c:	00008067          	ret

80006c10 <resetExecutedInstructions>:
resetExecutedInstructions():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:12

void resetExecutedInstructions(){
80006c10:	ff010113          	addi	sp,sp,-16
80006c14:	00112623          	sw	ra,12(sp)
80006c18:	00812423          	sw	s0,8(sp)
80006c1c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:13
    HW_set_32bit_reg(LOADS_COUNT, 0);
80006c20:	00000593          	li	a1,0
80006c24:	900007b7          	lui	a5,0x90000
80006c28:	ff478513          	addi	a0,a5,-12 # 8ffffff4 <__stack_top+0xffbdfa4>
80006c2c:	b68fa0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:14
    HW_set_32bit_reg(STORES_COUNT, 0);
80006c30:	00000593          	li	a1,0
80006c34:	900007b7          	lui	a5,0x90000
80006c38:	ff078513          	addi	a0,a5,-16 # 8ffffff0 <__stack_top+0xffbdfa0>
80006c3c:	b58fa0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:15
    HW_set_32bit_reg(OTHERS_COUNT, 0);
80006c40:	00000593          	li	a1,0
80006c44:	900007b7          	lui	a5,0x90000
80006c48:	fec78513          	addi	a0,a5,-20 # 8fffffec <__stack_top+0xffbdf9c>
80006c4c:	b48fa0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:16
    return;
80006c50:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:17
}
80006c54:	00c12083          	lw	ra,12(sp)
80006c58:	00812403          	lw	s0,8(sp)
80006c5c:	01010113          	addi	sp,sp,16
80006c60:	00008067          	ret

80006c64 <PLIC_init>:
PLIC_init():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:124
{
80006c64:	fe010113          	addi	sp,sp,-32
80006c68:	00812e23          	sw	s0,28(sp)
80006c6c:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:126
    unsigned long hart_id = read_csr(mhartid);
80006c70:	f14027f3          	csrr	a5,mhartid
80006c74:	fef42423          	sw	a5,-24(s0)
80006c78:	fe842783          	lw	a5,-24(s0)
80006c7c:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
80006c80:	fe042623          	sw	zero,-20(s0)
80006c84:	03c0006f          	j	80006cc0 <PLIC_init+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:131 (discriminator 3)
        PLIC->TARGET_ENABLES[hart_id].ENABLES[inc] = 0;
80006c88:	40000737          	lui	a4,0x40000
80006c8c:	fe442783          	lw	a5,-28(s0)
80006c90:	00579693          	slli	a3,a5,0x5
80006c94:	fec42783          	lw	a5,-20(s0)
80006c98:	00f686b3          	add	a3,a3,a5
80006c9c:	000017b7          	lui	a5,0x1
80006ca0:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80006ca4:	00f687b3          	add	a5,a3,a5
80006ca8:	00279793          	slli	a5,a5,0x2
80006cac:	00f707b3          	add	a5,a4,a5
80006cb0:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 3)
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
80006cb4:	fec42783          	lw	a5,-20(s0)
80006cb8:	00178793          	addi	a5,a5,1
80006cbc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 1)
80006cc0:	fec42783          	lw	a5,-20(s0)
80006cc4:	fc0782e3          	beqz	a5,80006c88 <PLIC_init+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
80006cc8:	fe042623          	sw	zero,-20(s0)
80006ccc:	0240006f          	j	80006cf0 <PLIC_init+0x8c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:139 (discriminator 3)
        PLIC->SOURCE_PRIORITY[inc] = 0;
80006cd0:	40000737          	lui	a4,0x40000
80006cd4:	fec42783          	lw	a5,-20(s0)
80006cd8:	00279793          	slli	a5,a5,0x2
80006cdc:	00f707b3          	add	a5,a4,a5
80006ce0:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 3)
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
80006ce4:	fec42783          	lw	a5,-20(s0)
80006ce8:	00178793          	addi	a5,a5,1
80006cec:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 1)
80006cf0:	fec42703          	lw	a4,-20(s0)
80006cf4:	01e00793          	li	a5,30
80006cf8:	fce7fce3          	bleu	a4,a5,80006cd0 <PLIC_init+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:143
    PLIC->TARGET[hart_id].PRIORITY_THRESHOLD = 0;
80006cfc:	40000737          	lui	a4,0x40000
80006d00:	fe442783          	lw	a5,-28(s0)
80006d04:	20078793          	addi	a5,a5,512
80006d08:	00c79793          	slli	a5,a5,0xc
80006d0c:	00f707b3          	add	a5,a4,a5
80006d10:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:146
    set_csr(mie, MIP_MEIP);
80006d14:	000017b7          	lui	a5,0x1
80006d18:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80006d1c:	3047a7f3          	csrrs	a5,mie,a5
80006d20:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:147
}
80006d24:	00000013          	nop
80006d28:	01c12403          	lw	s0,28(sp)
80006d2c:	02010113          	addi	sp,sp,32
80006d30:	00008067          	ret

80006d34 <main>:
main():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:58
extern volatile unsigned int NI_IRCount;

/*-----------------------------------------------------------*/

int main( void )
{
80006d34:	fd010113          	addi	sp,sp,-48
80006d38:	02112623          	sw	ra,44(sp)
80006d3c:	02812423          	sw	s0,40(sp)
80006d40:	03010413          	addi	s0,sp,48
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:60
	char str[20];
    PLIC_init();
80006d44:	f21ff0ef          	jal	ra,80006c64 <PLIC_init>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:66

    /**************************************************************************
    * Initialize CoreUART with its base address, baud value, and line
    * configuration.
    *************************************************************************/
    UART_init(&g_uart, COREUARTAPB0_BASE_ADDR, BAUD_VALUE_115200,
80006d48:	00100693          	li	a3,1
80006d4c:	02c00613          	li	a2,44
80006d50:	700015b7          	lui	a1,0x70001
80006d54:	800227b7          	lui	a5,0x80022
80006d58:	04078513          	addi	a0,a5,64 # 80022040 <__stack_top+0xfffdfff0>
80006d5c:	b10fa0ef          	jal	ra,8000106c <UART_init>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:72
             (DATA_8_BITS | NO_PARITY) );
    
	/**************************************************************************
    * Initialize the Chronos platform stuff
    *************************************************************************/
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n Chronos platform initializing... \n" );
80006d60:	800077b7          	lui	a5,0x80007
80006d64:	77078593          	addi	a1,a5,1904 # 80007770 <__stack_top+0xfffc5720>
80006d68:	800227b7          	lui	a5,0x80022
80006d6c:	04078513          	addi	a0,a5,64 # 80022040 <__stack_top+0xfffdfff0>
80006d70:	cc8fa0ef          	jal	ra,80001238 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:73
	Chronos_init();
80006d74:	814fc0ef          	jal	ra,80002d88 <Chronos_init>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:74
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This terminal belongs to the address: " );
80006d78:	800077b7          	lui	a5,0x80007
80006d7c:	79878593          	addi	a1,a5,1944 # 80007798 <__stack_top+0xfffc5748>
80006d80:	800227b7          	lui	a5,0x80022
80006d84:	04078513          	addi	a0,a5,64 # 80022040 <__stack_top+0xfffdfff0>
80006d88:	cb0fa0ef          	jal	ra,80001238 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:75
	myItoa(ProcessorAddr, str, 16);
80006d8c:	800227b7          	lui	a5,0x80022
80006d90:	0487a783          	lw	a5,72(a5) # 80022048 <__stack_top+0xfffdfff8>
80006d94:	00078713          	mv	a4,a5
80006d98:	fdc40793          	addi	a5,s0,-36
80006d9c:	01000613          	li	a2,16
80006da0:	00078593          	mv	a1,a5
80006da4:	00070513          	mv	a0,a4
80006da8:	bf8fc0ef          	jal	ra,800031a0 <myItoa>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:76
    UART_polled_tx_string( &g_uart, (const uint8_t *)str); UART_polled_tx_string( &g_uart, (const uint8_t *)"\n");
80006dac:	fdc40793          	addi	a5,s0,-36
80006db0:	00078593          	mv	a1,a5
80006db4:	800227b7          	lui	a5,0x80022
80006db8:	04078513          	addi	a0,a5,64 # 80022040 <__stack_top+0xfffdfff0>
80006dbc:	c7cfa0ef          	jal	ra,80001238 <UART_polled_tx_string>
80006dc0:	800077b7          	lui	a5,0x80007
80006dc4:	7c478593          	addi	a1,a5,1988 # 800077c4 <__stack_top+0xfffc5774>
80006dc8:	800227b7          	lui	a5,0x80022
80006dcc:	04078513          	addi	a0,a5,64 # 80022040 <__stack_top+0xfffdfff0>
80006dd0:	c68fa0ef          	jal	ra,80001238 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:81
	
	//xTaskCreate( NI_TX_Handler, "TXHandler", 1024*4, NULL, (tskIDLE_PRIORITY + 1), NULL);
	//xTaskCreate( NI_RX_Handler, "RXHandler", 1024*3, NULL, (tskIDLE_PRIORITY + 1), NULL);

	if (ProcessorAddr == 0x0000){
80006dd4:	800227b7          	lui	a5,0x80022
80006dd8:	0487a783          	lw	a5,72(a5) # 80022048 <__stack_top+0xfffdfff8>
80006ddc:	04079663          	bnez	a5,80006e28 <main+0xf4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:82
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is the Global Master: \n" );
80006de0:	800077b7          	lui	a5,0x80007
80006de4:	7c878593          	addi	a1,a5,1992 # 800077c8 <__stack_top+0xfffc5778>
80006de8:	800227b7          	lui	a5,0x80022
80006dec:	04078513          	addi	a0,a5,64 # 80022040 <__stack_top+0xfffdfff0>
80006df0:	c48fa0ef          	jal	ra,80001238 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:84
		/* Create the GlobalManager task */
		xTaskCreate( GlobalManagerTask, "GlobalMaster", 1024*6, NULL, (tskIDLE_PRIORITY + 1), NULL );
80006df4:	00000893          	li	a7,0
80006df8:	00000813          	li	a6,0
80006dfc:	00000793          	li	a5,0
80006e00:	00100713          	li	a4,1
80006e04:	00000693          	li	a3,0
80006e08:	00002637          	lui	a2,0x2
80006e0c:	80060613          	addi	a2,a2,-2048 # 1800 <HEAP_SIZE-0xe800>
80006e10:	800075b7          	lui	a1,0x80007
80006e14:	7f458593          	addi	a1,a1,2036 # 800077f4 <__stack_top+0xfffc57a4>
80006e18:	80007537          	lui	a0,0x80007
80006e1c:	e8850513          	addi	a0,a0,-376 # 80006e88 <__stack_top+0xfffc4e38>
80006e20:	8f8fb0ef          	jal	ra,80001f18 <xTaskGenericCreate>
80006e24:	0180006f          	j	80006e3c <main+0x108>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:86
	} else {
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is a Slave: \n" );
80006e28:	800087b7          	lui	a5,0x80008
80006e2c:	80478593          	addi	a1,a5,-2044 # 80007804 <__stack_top+0xfffc57b4>
80006e30:	800227b7          	lui	a5,0x80022
80006e34:	04078513          	addi	a0,a5,64 # 80022040 <__stack_top+0xfffdfff0>
80006e38:	c00fa0ef          	jal	ra,80001238 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:94
		//xTaskCreate( vUartAliveTask, "Alive", 1024*3, NULL, (tskIDLE_PRIORITY + 1), NULL );
	}
	//xTaskCreate( NI_Handler, "Handler", 1024*6, NULL, (tskIDLE_PRIORITY + 2), NULL );

	/* Start the kernel.  From here on, only tasks and interrupts will run. */
	vTaskStartScheduler();
80006e3c:	c58fb0ef          	jal	ra,80002294 <vTaskStartScheduler>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:97

	/* Exit FreeRTOS */
	return 0;
80006e40:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:98
}
80006e44:	00078513          	mv	a0,a5
80006e48:	02c12083          	lw	ra,44(sp)
80006e4c:	02812403          	lw	s0,40(sp)
80006e50:	03010113          	addi	sp,sp,48
80006e54:	00008067          	ret

80006e58 <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:103

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
80006e58:	ff010113          	addi	sp,sp,-16
80006e5c:	00812623          	sw	s0,12(sp)
80006e60:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:114
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
80006e64:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:115 (discriminator 1)
	for( ;; );
80006e68:	0000006f          	j	80006e68 <vApplicationMallocFailedHook+0x10>

80006e6c <vApplicationIdleHook>:
vApplicationIdleHook():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:120
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
80006e6c:	ff010113          	addi	sp,sp,-16
80006e70:	00812623          	sw	s0,12(sp)
80006e74:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:130
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
80006e78:	00000013          	nop
80006e7c:	00c12403          	lw	s0,12(sp)
80006e80:	01010113          	addi	sp,sp,16
80006e84:	00008067          	ret

80006e88 <GlobalManagerTask>:
GlobalManagerTask():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:181
// 	}
// }

/*-----------------------------------------------------------*/

static void GlobalManagerTask( void *pvParameters ){
80006e88:	fc010113          	addi	sp,sp,-64
80006e8c:	02112e23          	sw	ra,60(sp)
80006e90:	02812c23          	sw	s0,56(sp)
80006e94:	04010413          	addi	s0,sp,64
80006e98:	fca42623          	sw	a0,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:187
	( void ) pvParameters;
	int tick;
	char str[20];

	// Initialize the priority vector with the pattern policy
	GeneratePatternMatrix();
80006e9c:	eadfd0ef          	jal	ra,80004d48 <GeneratePatternMatrix>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:190

	// Initialize the System Tiles Info
	API_TilesReset();
80006ea0:	d81fd0ef          	jal	ra,80004c20 <API_TilesReset>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:193

	// Initialize the applications vector
    API_ApplicationsReset();
80006ea4:	d1dfd0ef          	jal	ra,80004bc0 <API_ApplicationsReset>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:196

	// Informs the Repository that the GLOBALMASTER is ready to receive the application info
	API_RepositoryWakeUp();
80006ea8:	99dfd0ef          	jal	ra,80004844 <API_RepositoryWakeUp>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:199 (discriminator 1)

	for(;;){
		tick = xTaskGetTickCount();
80006eac:	e00fb0ef          	jal	ra,800024ac <xTaskGetTickCount>
80006eb0:	00050793          	mv	a5,a0
80006eb4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:200 (discriminator 1)
		myItoa(tick, str, 10);
80006eb8:	fd840793          	addi	a5,s0,-40
80006ebc:	00a00613          	li	a2,10
80006ec0:	00078593          	mv	a1,a5
80006ec4:	fec42503          	lw	a0,-20(s0)
80006ec8:	ad8fc0ef          	jal	ra,800031a0 <myItoa>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:201 (discriminator 1)
		UART_polled_tx_string( &g_uart, (const uint8_t *)str);
80006ecc:	fd840793          	addi	a5,s0,-40
80006ed0:	00078593          	mv	a1,a5
80006ed4:	800227b7          	lui	a5,0x80022
80006ed8:	04078513          	addi	a0,a5,64 # 80022040 <__stack_top+0xfffdfff0>
80006edc:	b5cfa0ef          	jal	ra,80001238 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:202 (discriminator 1)
		printsv("GlobalMasterActive", tick);
80006ee0:	fec42583          	lw	a1,-20(s0)
80006ee4:	800087b7          	lui	a5,0x80008
80006ee8:	82478513          	addi	a0,a5,-2012 # 80007824 <__stack_top+0xfffc57d4>
80006eec:	838fc0ef          	jal	ra,80002f24 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:203 (discriminator 1)
		UART_polled_tx_string( &g_uart, (const uint8_t *)" GlobalMasterRoutine...\r\n" );
80006ef0:	800087b7          	lui	a5,0x80008
80006ef4:	83878593          	addi	a1,a5,-1992 # 80007838 <__stack_top+0xfffc57e8>
80006ef8:	800227b7          	lui	a5,0x80022
80006efc:	04078513          	addi	a0,a5,64 # 80022040 <__stack_top+0xfffdfff0>
80006f00:	b38fa0ef          	jal	ra,80001238 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:206 (discriminator 1)

		// Checks if there is some task to allocate...
		API_AllocateTasks(tick);
80006f04:	fec42783          	lw	a5,-20(s0)
80006f08:	00078513          	mv	a0,a5
80006f0c:	ee5fd0ef          	jal	ra,80004df0 <API_AllocateTasks>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:208 (discriminator 1)

		vTaskDelay(1);
80006f10:	00100513          	li	a0,1
80006f14:	afcfb0ef          	jal	ra,80002210 <vTaskDelay>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:199 (discriminator 1)
		tick = xTaskGetTickCount();
80006f18:	f95ff06f          	j	80006eac <GlobalManagerTask+0x24>

80006f1c <write>:
write():
80006f1c:	81418793          	addi	a5,gp,-2028 # 80007874 <_impure_ptr>
80006f20:	00060693          	mv	a3,a2
80006f24:	00058613          	mv	a2,a1
80006f28:	00050593          	mv	a1,a0
80006f2c:	0007a503          	lw	a0,0(a5)
80006f30:	0040006f          	j	80006f34 <_write_r>

80006f34 <_write_r>:
_write_r():
80006f34:	ff010113          	addi	sp,sp,-16
80006f38:	00812423          	sw	s0,8(sp)
80006f3c:	00050413          	mv	s0,a0
80006f40:	00058513          	mv	a0,a1
80006f44:	00060593          	mv	a1,a2
80006f48:	00068613          	mv	a2,a3
80006f4c:	0001a797          	auipc	a5,0x1a
80006f50:	5c07a223          	sw	zero,1476(a5) # 80021510 <errno>
80006f54:	00112623          	sw	ra,12(sp)
80006f58:	f55f90ef          	jal	ra,80000eac <_write>
80006f5c:	fff00793          	li	a5,-1
80006f60:	00f51c63          	bne	a0,a5,80006f78 <_write_r+0x44>
80006f64:	0001a797          	auipc	a5,0x1a
80006f68:	5ac78793          	addi	a5,a5,1452 # 80021510 <errno>
80006f6c:	0007a783          	lw	a5,0(a5)
80006f70:	00078463          	beqz	a5,80006f78 <_write_r+0x44>
80006f74:	00f42023          	sw	a5,0(s0)
80006f78:	00c12083          	lw	ra,12(sp)
80006f7c:	00812403          	lw	s0,8(sp)
80006f80:	01010113          	addi	sp,sp,16
80006f84:	00008067          	ret
	...
80006f90:	6568                	flw	fa0,76(a0)
80006f92:	6c6c                	flw	fa1,92(s0)
80006f94:	0000006f          	j	80006f94 <_write_r+0x60>
80006f98:	6544                	flw	fs1,12(a0)
80006f9a:	6574                	flw	fa3,76(a0)
80006f9c:	69657463          	bleu	s6,a0,80007624 <_write_r+0x6f0>
80006fa0:	7520                	flw	fs0,104(a0)
80006fa2:	616d                	addi	sp,sp,240
80006fa4:	6320                	flw	fs0,64(a4)
80006fa6:	6168                	flw	fa0,68(a0)
80006fa8:	616d                	addi	sp,sp,240
80006faa:	6164                	flw	fs1,68(a0)
80006fac:	5420                	lw	s0,104(s0)
80006fae:	5345                	li	t1,-15
80006fb0:	4554                	lw	a3,12(a0)
80006fb2:	6420                	flw	fs0,72(s0)
80006fb4:	2065                	jal	8000705c <_write_r+0x128>
80006fb6:	74736973          	csrrsi	s2,0x747,6
80006fba:	6d65                	lui	s10,0x19
80006fbc:	2161                	jal	80007444 <_write_r+0x510>
80006fbe:	000a                	c.slli	zero,0x2
80006fc0:	7261                	lui	tp,0xffff8
80006fc2:	00203067          	0x203067
80006fc6:	0000                	unimp
80006fc8:	7261                	lui	tp,0xffff8
80006fca:	00203167          	0x203167
80006fce:	0000                	unimp
80006fd0:	7261                	lui	tp,0xffff8
80006fd2:	00203267          	0x203267
80006fd6:	0000                	unimp
80006fd8:	7261                	lui	tp,0xffff8
80006fda:	00203367          	0x203367
80006fde:	0000                	unimp
80006fe0:	7261                	lui	tp,0xffff8
80006fe2:	00203467          	0x203467
80006fe6:	0000                	unimp
80006fe8:	7974                	flw	fa3,116(a0)
80006fea:	6570                	flw	fa2,76(a0)
80006fec:	0020                	addi	s0,sp,8
80006fee:	0000                	unimp
80006ff0:	74737953          	0x74737953
80006ff4:	6d65                	lui	s10,0x19
80006ff6:	6c6c6163          	bltu	s8,t1,800076b8 <_write_r+0x784>
80006ffa:	6e20                	flw	fs0,88(a2)
80006ffc:	206fa3c3          	fmadd.s	ft7,ft11,ft6,ft4,rdn
80007000:	6469                	lui	s0,0x1a
80007002:	6e65                	lui	t3,0x19
80007004:	6974                	flw	fa3,84(a0)
80007006:	6966                	flw	fs2,88(sp)
80007008:	61646163          	bltu	s0,s6,8000760a <_write_r+0x6d6>
8000700c:	0a21                	addi	s4,s4,8
8000700e:	0000                	unimp
80007010:	7274                	flw	fa3,100(a2)
80007012:	7061                	c.lui	zero,0xffff8
80007014:	000a                	c.slli	zero,0x2
80007016:	0000                	unimp
80007018:	7065                	c.lui	zero,0xffff9
8000701a:	00203a63          	0x203a63
8000701e:	0000                	unimp
80007020:	636d                	lui	t1,0x1b
80007022:	7561                	lui	a0,0xffff8
80007024:	203a6573          	csrrsi	a0,hideleg,20
80007028:	0000                	unimp
8000702a:	0000                	unimp
8000702c:	0700                	addi	s0,sp,896
8000702e:	8000                	0x8000
80007030:	0708                	addi	a0,sp,896
80007032:	8000                	0x8000
80007034:	0708                	addi	a0,sp,896
80007036:	8000                	0x8000
80007038:	0708                	addi	a0,sp,896
8000703a:	8000                	0x8000
8000703c:	0708                	addi	a0,sp,896
8000703e:	8000                	0x8000
80007040:	0708                	addi	a0,sp,896
80007042:	8000                	0x8000
80007044:	0708                	addi	a0,sp,896
80007046:	8000                	0x8000
80007048:	0708                	addi	a0,sp,896
8000704a:	8000                	0x8000
8000704c:	0708                	addi	a0,sp,896
8000704e:	8000                	0x8000
80007050:	0708                	addi	a0,sp,896
80007052:	8000                	0x8000
80007054:	06e0                	addi	s0,sp,844
80007056:	8000                	0x8000
80007058:	0708                	addi	a0,sp,896
8000705a:	8000                	0x8000
8000705c:	0708                	addi	a0,sp,896
8000705e:	8000                	0x8000
80007060:	0708                	addi	a0,sp,896
80007062:	8000                	0x8000
80007064:	0708                	addi	a0,sp,896
80007066:	8000                	0x8000
80007068:	0708                	addi	a0,sp,896
8000706a:	8000                	0x8000
8000706c:	0708                	addi	a0,sp,896
8000706e:	8000                	0x8000
80007070:	0708                	addi	a0,sp,896
80007072:	8000                	0x8000
80007074:	0708                	addi	a0,sp,896
80007076:	8000                	0x8000
80007078:	0708                	addi	a0,sp,896
8000707a:	8000                	0x8000
8000707c:	06f0                	addi	a2,sp,844
8000707e:	8000                	0x8000
80007080:	0708                	addi	a0,sp,896
80007082:	8000                	0x8000
80007084:	0708                	addi	a0,sp,896
80007086:	8000                	0x8000
80007088:	0708                	addi	a0,sp,896
8000708a:	8000                	0x8000
8000708c:	0708                	addi	a0,sp,896
8000708e:	8000                	0x8000
80007090:	0708                	addi	a0,sp,896
80007092:	8000                	0x8000
80007094:	0708                	addi	a0,sp,896
80007096:	8000                	0x8000
80007098:	0708                	addi	a0,sp,896
8000709a:	8000                	0x8000
8000709c:	0708                	addi	a0,sp,896
8000709e:	8000                	0x8000
800070a0:	0708                	addi	a0,sp,896
800070a2:	8000                	0x8000
800070a4:	06a4                	addi	s1,sp,840
800070a6:	8000                	0x8000
800070a8:	0708                	addi	a0,sp,896
800070aa:	8000                	0x8000
800070ac:	0708                	addi	a0,sp,896
800070ae:	8000                	0x8000
800070b0:	0708                	addi	a0,sp,896
800070b2:	8000                	0x8000
800070b4:	0708                	addi	a0,sp,896
800070b6:	8000                	0x8000
800070b8:	0708                	addi	a0,sp,896
800070ba:	8000                	0x8000
800070bc:	0708                	addi	a0,sp,896
800070be:	8000                	0x8000
800070c0:	0708                	addi	a0,sp,896
800070c2:	8000                	0x8000
800070c4:	0708                	addi	a0,sp,896
800070c6:	8000                	0x8000
800070c8:	0708                	addi	a0,sp,896
800070ca:	8000                	0x8000
800070cc:	0680                	addi	s0,sp,832
800070ce:	8000                	0x8000
800070d0:	0708                	addi	a0,sp,896
800070d2:	8000                	0x8000
800070d4:	0708                	addi	a0,sp,896
800070d6:	8000                	0x8000
800070d8:	0708                	addi	a0,sp,896
800070da:	8000                	0x8000
800070dc:	0708                	addi	a0,sp,896
800070de:	8000                	0x8000
800070e0:	0708                	addi	a0,sp,896
800070e2:	8000                	0x8000
800070e4:	0708                	addi	a0,sp,896
800070e6:	8000                	0x8000
800070e8:	0708                	addi	a0,sp,896
800070ea:	8000                	0x8000
800070ec:	0708                	addi	a0,sp,896
800070ee:	8000                	0x8000
800070f0:	0708                	addi	a0,sp,896
800070f2:	8000                	0x8000
800070f4:	0708                	addi	a0,sp,896
800070f6:	8000                	0x8000
800070f8:	0708                	addi	a0,sp,896
800070fa:	8000                	0x8000
800070fc:	0708                	addi	a0,sp,896
800070fe:	8000                	0x8000
80007100:	0708                	addi	a0,sp,896
80007102:	8000                	0x8000
80007104:	0708                	addi	a0,sp,896
80007106:	8000                	0x8000
80007108:	0708                	addi	a0,sp,896
8000710a:	8000                	0x8000
8000710c:	05f8                	addi	a4,sp,716
8000710e:	8000                	0x8000
80007110:	7830                	flw	fa2,112(s0)
80007112:	0000                	unimp
80007114:	500a                	0x500a
80007116:	6f72                	flw	ft10,28(sp)
80007118:	206d6167          	0x206d6167
8000711c:	6168                	flw	fa0,68(a0)
8000711e:	78652073          	csrs	0x786,a0
80007122:	7469                	lui	s0,0xffffa
80007124:	6465                	lui	s0,0x19
80007126:	7720                	flw	fs0,104(a4)
80007128:	7469                	lui	s0,0xffffa
8000712a:	2068                	fld	fa0,192(s0)
8000712c:	65646f63          	bltu	s0,s6,8000778a <_write_r+0x856>
80007130:	003a                	c.slli	zero,0xe
80007132:	0000                	unimp
80007134:	000d                	c.nop	3
80007136:	0000                	unimp
80007138:	4449                	li	s0,18
8000713a:	454c                	lw	a1,12(a0)
8000713c:	0000                	unimp
8000713e:	0000                	unimp
80007140:	000a                	c.slli	zero,0x2
80007142:	0000                	unimp
80007144:	7266                	flw	ft4,120(sp)
80007146:	203a6d6f          	jal	s10,800adb48 <__stack_top+0x6baf8>
8000714a:	0000                	unimp
8000714c:	736d                	lui	t1,0xffffb
8000714e:	6f702067          	0x6f702067
80007152:	6e69                	lui	t3,0x1a
80007154:	6574                	flw	fa3,76(a0)
80007156:	3a72                	fld	fs4,312(sp)
80007158:	0020                	addi	s0,sp,8
8000715a:	0000                	unimp
8000715c:	694d                	lui	s2,0x13
8000715e:	686e                	flw	fa6,216(sp)
80007160:	2061                	jal	800071e8 <_write_r+0x2b4>
80007162:	6174                	flw	fa3,68(a0)
80007164:	49206b73          	csrrsi	s6,0x492,0
80007168:	3a44                	fld	fs1,176(a2)
8000716a:	0020                	addi	s0,sp,8
8000716c:	646e6553          	0x646e6553
80007170:	6e69                	lui	t3,0x1a
80007172:	65755167          	0x65755167
80007176:	6575                	lui	a0,0x1d
80007178:	665f 6f72 746e      	0x746e6f72665f
8000717e:	203a                	fld	ft0,392(sp)
80007180:	0000                	unimp
80007182:	0000                	unimp
80007184:	5041                	c.li	zero,-16
80007186:	5f49                	li	t5,-14
80007188:	7254                	flw	fa3,36(a2)
8000718a:	3279                	jal	80006b18 <API_setFreqIdle+0x14>
8000718c:	646e6553          	0x646e6553
80007190:	7320                	flw	fs0,96(a4)
80007192:	6375                	lui	t1,0x1d
80007194:	73736563          	bltu	t1,s7,800078be <__data_load+0x3e>
80007198:	0a21                	addi	s4,s4,8
8000719a:	0000                	unimp
8000719c:	5041                	c.li	zero,-16
8000719e:	5f49                	li	t5,-14
800071a0:	7254                	flw	fa3,36(a2)
800071a2:	3279                	jal	80006b30 <API_setFreqIdle+0x2c>
800071a4:	646e6553          	0x646e6553
800071a8:	6620                	flw	fs0,72(a2)
800071aa:	6961                	lui	s2,0x18
800071ac:	656c                	flw	fa1,76(a0)
800071ae:	2064                	fld	fs1,192(s0)
800071b0:	202d                	jal	800071da <_write_r+0x2a6>
800071b2:	6d65                	lui	s10,0x19
800071b4:	7470                	flw	fa2,108(s0)
800071b6:	2079                	jal	80007244 <_write_r+0x310>
800071b8:	646e6553          	0x646e6553
800071bc:	7551                	lui	a0,0xffff4
800071be:	7565                	lui	a0,0xffff9
800071c0:	2165                	jal	80007668 <_write_r+0x734>
800071c2:	000a                	c.slli	zero,0x2
800071c4:	5041                	c.li	zero,-16
800071c6:	5f49                	li	t5,-14
800071c8:	7254                	flw	fa3,36(a2)
800071ca:	3279                	jal	80006b58 <API_setFreqScale+0x14>
800071cc:	646e6553          	0x646e6553
800071d0:	6620                	flw	fs0,72(a2)
800071d2:	6961                	lui	s2,0x18
800071d4:	656c                	flw	fa1,76(a0)
800071d6:	2064                	fld	fs1,192(s0)
800071d8:	202d                	jal	80007202 <_write_r+0x2ce>
800071da:	494e                	lw	s2,208(sp)
800071dc:	545f 2058 636f      	0x636f2058545f
800071e2:	69707563          	bleu	s7,zero,8000786c <mtimecmp>
800071e6:	6465                	lui	s0,0x19
800071e8:	0a21                	addi	s4,s4,8
800071ea:	0000                	unimp
800071ec:	6920                	flw	fs0,80(a0)
800071ee:	206e                	fld	ft0,216(sp)
800071f0:	6874                	flw	fa3,84(s0)
800071f2:	2065                	jal	8000729a <_write_r+0x366>
800071f4:	4950                	lw	a2,20(a0)
800071f6:	4550                	lw	a2,12(a0)
800071f8:	7320                	flw	fs0,96(a4)
800071fa:	6f6c                	flw	fa1,92(a4)
800071fc:	2074                	fld	fa3,192(s0)
800071fe:	0000                	unimp
80007200:	6441                	lui	s0,0x10
80007202:	6964                	flw	fs1,84(a0)
80007204:	676e                	flw	fa4,216(sp)
80007206:	6120                	flw	fs0,64(a0)
80007208:	6d20                	flw	fs0,88(a0)
8000720a:	74206773          	csrrsi	a4,0x742,0
8000720e:	6174206f          	j	8004a024 <__stack_top+0x7fd4>
80007212:	00206b73          	csrrsi	s6,frm,0
80007216:	0000                	unimp
80007218:	3e3e                	fld	ft8,488(sp)
8000721a:	3e3e                	fld	ft8,488(sp)
8000721c:	413e                	lw	sp,204(sp)
8000721e:	69656863          	bltu	a0,s6,800078ae <__data_load+0x2e>
80007222:	6120                	flw	fs0,64(a0)
80007224:	7571                	lui	a0,0xffffc
80007226:	2069                	jal	800072b0 <_write_r+0x37c>
80007228:	6f6e                	flw	ft10,216(sp)
8000722a:	7020                	flw	fs0,96(s0)
8000722c:	6e65                	lui	t3,0x19
8000722e:	6964                	flw	fs1,84(a0)
80007230:	676e                	flw	fa4,216(sp)
80007232:	0a21                	addi	s4,s4,8
80007234:	0000                	unimp
80007236:	0000                	unimp
80007238:	7345                	lui	t1,0xffff1
8000723a:	6570                	flw	fa2,76(a0)
8000723c:	6172                	flw	ft2,28(sp)
8000723e:	646e                	flw	fs0,216(sp)
80007240:	654d206f          	j	800d9894 <__stack_top+0x97844>
80007244:	736e                	flw	ft6,248(sp)
80007246:	6761                	lui	a4,0x18
80007248:	6d65                	lui	s10,0x19
8000724a:	0a21                	addi	s4,s4,8
8000724c:	0000                	unimp
8000724e:	0000                	unimp
80007250:	6520                	flw	fs0,72(a0)
80007252:	72657073          	csrci	0x726,10
80007256:	6e61                	lui	t3,0x18
80007258:	6f64                	flw	fs1,92(a4)
8000725a:	6d20                	flw	fs0,88(a0)
8000725c:	6e65                	lui	t3,0x19
8000725e:	65676173          	csrrsi	sp,0x656,14
80007262:	206d                	jal	8000730c <_write_r+0x3d8>
80007264:	0000                	unimp
80007266:	0000                	unimp
80007268:	6174                	flw	fa3,68(a0)
8000726a:	6c736b73          	csrrsi	s6,0x6c7,6
8000726e:	0020746f          	jal	s0,8000e270 <__global_pointer$+0x6210>
80007272:	0000                	unimp
80007274:	654d                	lui	a0,0x13
80007276:	736e                	flw	ft6,248(sp)
80007278:	6761                	lui	a4,0x18
8000727a:	6d65                	lui	s10,0x19
8000727c:	5220                	lw	s0,96(a2)
8000727e:	6365                	lui	t1,0x19
80007280:	6265                	lui	tp,0x19
80007282:	6469                	lui	s0,0x1a
80007284:	2161                	jal	8000770c <_write_r+0x7d8>
80007286:	000a                	c.slli	zero,0x2
80007288:	5854                	lw	a3,52(s0)
8000728a:	6920                	flw	fs0,80(a0)
8000728c:	746e                	flw	fs0,248(sp)
8000728e:	7265                	lui	tp,0xffff9
80007290:	7572                	flw	fa0,60(sp)
80007292:	7470                	flw	fa2,108(s0)
80007294:	6f69                	lui	t5,0x1a
80007296:	206e                	fld	ft0,216(sp)
80007298:	63746163          	bltu	s0,s7,800078ba <__data_load+0x3a>
8000729c:	6568                	flw	fa0,76(a0)
8000729e:	0a64                	addi	s1,sp,284
800072a0:	0000                	unimp
800072a2:	0000                	unimp
800072a4:	5852                	lw	a6,52(sp)
800072a6:	6920                	flw	fs0,80(a0)
800072a8:	746e                	flw	fs0,248(sp)
800072aa:	7265                	lui	tp,0xffff9
800072ac:	7572                	flw	fa0,60(sp)
800072ae:	7470                	flw	fa2,108(s0)
800072b0:	6f69                	lui	t5,0x1a
800072b2:	206e                	fld	ft0,216(sp)
800072b4:	63746163          	bltu	s0,s7,800078d6 <__data_load+0x56>
800072b8:	6568                	flw	fa0,76(a0)
800072ba:	0a64                	addi	s1,sp,284
800072bc:	0000                	unimp
800072be:	0000                	unimp
800072c0:	4154                	lw	a3,4(a0)
800072c2:	415f4b53          	0x415f4b53
800072c6:	4c4c                	lw	a1,28(s0)
800072c8:	5441434f          	0x5441434f
800072cc:	4f49                	li	t5,18
800072ce:	5f4e                	lw	t5,240(sp)
800072d0:	444e4553          	0x444e4553
800072d4:	000a                	c.slli	zero,0x2
800072d6:	0000                	unimp
800072d8:	6154                	flw	fa3,4(a0)
800072da:	73206b73          	csrrsi	s6,0x732,0
800072de:	6f6c                	flw	fa1,92(a4)
800072e0:	3a74                	fld	fa3,240(a2)
800072e2:	0020                	addi	s0,sp,8
800072e4:	6154                	flw	fa3,4(a0)
800072e6:	73206b73          	csrrsi	s6,0x732,0
800072ea:	6f6c                	flw	fa1,92(a4)
800072ec:	2074                	fld	fa3,192(s0)
800072ee:	6154                	flw	fa3,4(a0)
800072f0:	64416b73          	csrrsi	s6,0x644,2
800072f4:	7264                	flw	fs1,100(a2)
800072f6:	203a                	fld	ft0,392(sp)
800072f8:	0000                	unimp
800072fa:	0000                	unimp
800072fc:	7266                	flw	ft4,120(sp)
800072fe:	61206d6f          	jal	s10,8000d910 <__global_pointer$+0x58b0>
80007302:	7070                	flw	fa2,100(s0)
80007304:	696c                	flw	fa1,84(a0)
80007306:	69746163          	bltu	s0,s7,80007988 <g_startscheduler>
8000730a:	00206e6f          	jal	t3,8000d30c <__global_pointer$+0x52ac>
8000730e:	0000                	unimp
80007310:	4946                	lw	s2,80(sp)
80007312:	494e                	lw	s2,208(sp)
80007314:	44454853          	0x44454853
80007318:	203a                	fld	ft0,392(sp)
8000731a:	6154                	flw	fa3,4(a0)
8000731c:	00206b73          	csrrsi	s6,frm,0
80007320:	4154                	lw	a3,4(a0)
80007322:	415f4b53          	0x415f4b53
80007326:	4c4c                	lw	a1,28(s0)
80007328:	5441434f          	0x5441434f
8000732c:	4f49                	li	t5,18
8000732e:	5f4e                	lw	t5,240(sp)
80007330:	4946                	lw	s2,80(sp)
80007332:	494e                	lw	s2,208(sp)
80007334:	44454853          	0x44454853
80007338:	000a                	c.slli	zero,0x2
8000733a:	0000                	unimp
8000733c:	4154                	lw	a3,4(a0)
8000733e:	415f4b53          	0x415f4b53
80007342:	4c4c                	lw	a1,28(s0)
80007344:	5441434f          	0x5441434f
80007348:	4f49                	li	t5,18
8000734a:	5f4e                	lw	t5,240(sp)
8000734c:	43435553          	0x43435553
80007350:	5345                	li	t1,-15
80007352:	00000a53          	fadd.s	fs4,ft0,ft0,rne
80007356:	0000                	unimp
80007358:	67656843          	fmadd.q	fa6,fa0,fs6,fa2,unknown
8000735c:	7520756f          	jal	a0,8000eaae <__global_pointer$+0x6a4e>
80007360:	206d                	jal	8000740a <_write_r+0x4d6>
80007362:	4154                	lw	a3,4(a0)
80007364:	535f4b53          	0x535f4b53
80007368:	4154                	lw	a3,4(a0)
8000736a:	5452                	lw	s0,52(sp)
8000736c:	0a21                	addi	s4,s4,8
8000736e:	0000                	unimp
80007370:	67656843          	fmadd.q	fa6,fa0,fs6,fa2,unknown
80007374:	7520756f          	jal	a0,8000eac6 <__global_pointer$+0x6a66>
80007378:	206d                	jal	80007422 <_write_r+0x4ee>
8000737a:	4154                	lw	a3,4(a0)
8000737c:	525f4b53          	0x525f4b53
80007380:	4e55                	li	t3,21
80007382:	0a21                	addi	s4,s4,8
80007384:	0000                	unimp
80007386:	0000                	unimp
80007388:	7266                	flw	ft4,120(sp)
8000738a:	61206d6f          	jal	s10,8000d99c <__global_pointer$+0x593c>
8000738e:	7070                	flw	fa2,100(s0)
80007390:	203a                	fld	ft0,392(sp)
80007392:	0000                	unimp
80007394:	6e45                	lui	t3,0x11
80007396:	6261                	lui	tp,0x18
80007398:	696c                	flw	fa1,84(a0)
8000739a:	676e                	flw	fa4,216(sp)
8000739c:	5420                	lw	s0,104(s0)
8000739e:	7361                	lui	t1,0xffff8
800073a0:	00203a6b          	0x203a6b
800073a4:	746f6c53          	0x746f6c53
800073a8:	203a                	fld	ft0,392(sp)
800073aa:	0000                	unimp
800073ac:	6154                	flw	fa3,4(a0)
800073ae:	203a6b73          	csrrsi	s6,hideleg,20
800073b2:	0000                	unimp
800073b4:	67656843          	fmadd.q	fa6,fa0,fs6,fa2,unknown
800073b8:	7520756f          	jal	a0,8000eb0a <__global_pointer$+0x6aaa>
800073bc:	206d                	jal	80007466 <_write_r+0x532>
800073be:	656d                	lui	a0,0x1b
800073c0:	67617373          	csrrci	t1,0x676,2
800073c4:	2065                	jal	8000746c <_write_r+0x538>
800073c6:	6572                	flw	fa0,28(sp)
800073c8:	7571                	lui	a0,0xffffc
800073ca:	7365                	lui	t1,0xffff9
800073cc:	2174                	fld	fa3,192(a0)
800073ce:	4120                	lw	s0,64(a0)
800073d0:	7070                	flw	fa2,100(s0)
800073d2:	203a                	fld	ft0,392(sp)
800073d4:	0000                	unimp
800073d6:	0000                	unimp
800073d8:	654d                	lui	a0,0x13
800073da:	736e                	flw	ft6,248(sp)
800073dc:	6761                	lui	a4,0x18
800073de:	6d65                	lui	s10,0x19
800073e0:	6e20                	flw	fs0,88(a2)
800073e2:	206fa3c3          	fmadd.s	ft7,ft11,ft6,ft4,rdn
800073e6:	6e65                	lui	t3,0x19
800073e8:	746e6f63          	bltu	t3,t1,80007b46 <__sbss_end+0x176>
800073ec:	6172                	flw	ft2,28(sp)
800073ee:	6164                	flw	fs1,68(a0)
800073f0:	202c                	fld	fa1,64(s0)
800073f2:	6461                	lui	s0,0x18
800073f4:	6369                	lui	t1,0x1a
800073f6:	6f69                	lui	t5,0x1a
800073f8:	616e                	flw	ft2,216(sp)
800073fa:	646e                	flw	fs0,216(sp)
800073fc:	6f61206f          	j	80019af2 <__global_pointer$+0x11a92>
80007400:	5020                	lw	s0,96(s0)
80007402:	6e65                	lui	t3,0x19
80007404:	6964                	flw	fs1,84(a0)
80007406:	676e                	flw	fa4,216(sp)
80007408:	6552                	flw	fa0,20(sp)
8000740a:	2171                	jal	80007896 <__data_load+0x16>
8000740c:	000a                	c.slli	zero,0x2
8000740e:	0000                	unimp
80007410:	654d                	lui	a0,0x13
80007412:	736e                	flw	ft6,248(sp)
80007414:	6761                	lui	a4,0x18
80007416:	6d65                	lui	s10,0x19
80007418:	6520                	flw	fs0,72(a0)
8000741a:	636e                	flw	ft6,216(sp)
8000741c:	72746e6f          	jal	t3,8004e342 <__stack_top+0xc2f2>
80007420:	6461                	lui	s0,0x18
80007422:	2061                	jal	800074aa <_write_r+0x576>
80007424:	6f6e                	flw	ft10,216(sp)
80007426:	7020                	flw	fs0,96(s0)
80007428:	7069                	c.lui	zero,0xffffa
8000742a:	2165                	jal	800078d2 <__data_load+0x52>
8000742c:	000a                	c.slli	zero,0x2
8000742e:	0000                	unimp
80007430:	6554                	flw	fa3,12(a0)
80007432:	206d                	jal	800074dc <_write_r+0x5a8>
80007434:	6d75                	lui	s10,0x1d
80007436:	2061                	jal	800074be <_write_r+0x58a>
80007438:	656d                	lui	a0,0x1b
8000743a:	736e                	flw	ft6,248(sp)
8000743c:	6761                	lui	a4,0x18
8000743e:	6d65                	lui	s10,0x19
80007440:	6320                	flw	fs0,64(a4)
80007442:	6568                	flw	fa0,76(a0)
80007444:	646e6167          	0x646e6167
80007448:	2e2e2e6f          	jal	t3,800e972a <__stack_top+0xa76da>
8000744c:	000a                	c.slli	zero,0x2
8000744e:	0000                	unimp
80007450:	5245                	li	tp,-15
80007452:	4f52                	lw	t5,20(sp)
80007454:	2052                	fld	ft0,272(sp)
80007456:	7845                	lui	a6,0xffff1
80007458:	6574                	flw	fa3,76(a0)
8000745a:	6e72                	flw	ft8,28(sp)
8000745c:	6c61                	lui	s8,0x18
8000745e:	325f 495f 5152      	0x5152495f325f
80007464:	6148                	flw	fa0,4(a0)
80007466:	646e                	flw	fs0,216(sp)
80007468:	656c                	flw	fa1,76(a0)
8000746a:	2072                	fld	ft0,280(sp)
8000746c:	6e55                	lui	t3,0x15
8000746e:	776f6e6b          	0x776f6e6b
80007472:	2d6e                	fld	fs10,216(sp)
80007474:	76726553          	0x76726553
80007478:	6369                	lui	t1,0x1a
8000747a:	2065                	jal	80007522 <_write_r+0x5ee>
8000747c:	0000                	unimp
8000747e:	0000                	unimp
80007480:	6620                	flw	fs0,72(a2)
80007482:	6f72                	flw	ft10,28(sp)
80007484:	206d                	jal	8000752e <_write_r+0x5fa>
80007486:	7061                	c.lui	zero,0xffff8
80007488:	2070                	fld	fa2,192(s0)
8000748a:	0000                	unimp
8000748c:	72617453          	0x72617453
80007490:	6974                	flw	fa3,84(a0)
80007492:	676e                	flw	fa4,216(sp)
80007494:	5420                	lw	s0,104(s0)
80007496:	7361                	lui	t1,0xffff8
80007498:	0000206b          	0x206b
8000749c:	654e                	flw	fa0,208(sp)
8000749e:	70612077          	0x70612077
800074a2:	6c70                	flw	fa2,92(s0)
800074a4:	6369                	lui	t1,0x1a
800074a6:	7461                	lui	s0,0xffff8
800074a8:	6f69                	lui	t5,0x1a
800074aa:	206e                	fld	ft0,216(sp)
800074ac:	6572                	flw	fa0,28(sp)
800074ae:	74736967          	0x74736967
800074b2:	7265                	lui	tp,0xffff9
800074b4:	6465                	lui	s0,0x19
800074b6:	2d20                	fld	fs0,88(a0)
800074b8:	4920                	lw	s0,80(a0)
800074ba:	3a44                	fld	fs1,176(a2)
800074bc:	0020                	addi	s0,sp,8
800074be:	0000                	unimp
800074c0:	6572                	flw	fa0,28(sp)
800074c2:	7574                	flw	fa3,108(a0)
800074c4:	6e72                	flw	ft8,28(sp)
800074c6:	6e69                	lui	t3,0x1a
800074c8:	72652067          	0x72652067
800074cc:	6f72                	flw	ft10,28(sp)
800074ce:	00000a33          	add	s4,zero,zero
800074d2:	0000                	unimp
800074d4:	6572                	flw	fa0,28(sp)
800074d6:	7574                	flw	fa3,108(a0)
800074d8:	6e72                	flw	ft8,28(sp)
800074da:	6e69                	lui	t3,0x1a
800074dc:	72652067          	0x72652067
800074e0:	6f72                	flw	ft10,28(sp)
800074e2:	0a34                	addi	a3,sp,280
800074e4:	0000                	unimp
800074e6:	0000                	unimp
800074e8:	20736177          	0x20736177
800074ec:	7865                	lui	a6,0xffff9
800074ee:	6365                	lui	t1,0x19
800074f0:	7475                	lui	s0,0xffffd
800074f2:	6465                	lui	s0,0x19
800074f4:	6920                	flw	fs0,80(a0)
800074f6:	206e                	fld	ft0,216(sp)
800074f8:	0000                	unimp
800074fa:	0000                	unimp
800074fc:	7041                	c.lui	zero,0xffff0
800074fe:	6c70                	flw	fa2,92(s0)
80007500:	6369                	lui	t1,0x1a
80007502:	7461                	lui	s0,0xffff8
80007504:	6f69                	lui	t5,0x1a
80007506:	206e                	fld	ft0,216(sp)
80007508:	0000                	unimp
8000750a:	0000                	unimp
8000750c:	0909                	addi	s2,s2,2
8000750e:	6854                	flw	fa3,20(s0)
80007510:	7369                	lui	t1,0xffffa
80007512:	6120                	flw	fs0,64(a0)
80007514:	7070                	flw	fa2,100(s0)
80007516:	696c                	flw	fa1,84(a0)
80007518:	69746163          	bltu	s0,s7,80007b9a <__sbss_end+0x1ca>
8000751c:	73206e6f          	jal	t3,8000dc4e <__global_pointer$+0x5bee>
80007520:	6974                	flw	fa3,84(a0)
80007522:	6c6c                	flw	fa1,92(s0)
80007524:	6e20                	flw	fs0,88(a2)
80007526:	6565                	lui	a0,0x19
80007528:	2064                	fld	fs1,192(s0)
8000752a:	6f74                	flw	fa3,92(a4)
8000752c:	7220                	flw	fs0,96(a2)
8000752e:	6e75                	lui	t3,0x1d
80007530:	203a                	fld	ft0,392(sp)
80007532:	0000                	unimp
80007534:	0909                	addi	s2,s2,2
80007536:	6854                	flw	fa3,20(s0)
80007538:	7369                	lui	t1,0xffffa
8000753a:	6120                	flw	fs0,64(a0)
8000753c:	7070                	flw	fa2,100(s0)
8000753e:	696c                	flw	fa1,84(a0)
80007540:	69746163          	bltu	s0,s7,80007bc2 <__sbss_end+0x1f2>
80007544:	69206e6f          	jal	t3,8000dbd6 <__global_pointer$+0x5b76>
80007548:	4f442073          	csrs	0x4f4,s0
8000754c:	454e                	lw	a0,208(sp)
8000754e:	0a21                	addi	s4,s4,8
80007550:	0000                	unimp
80007552:	0000                	unimp
80007554:	6572                	flw	fa0,28(sp)
80007556:	7574                	flw	fa3,108(a0)
80007558:	6e72                	flw	ft8,28(sp)
8000755a:	6e69                	lui	t3,0x1a
8000755c:	72652067          	0x72652067
80007560:	6f72                	flw	ft10,28(sp)
80007562:	0a35                	addi	s4,s4,13
80007564:	0000                	unimp
80007566:	0000                	unimp
80007568:	6572                	flw	fa0,28(sp)
8000756a:	7574                	flw	fa3,108(a0)
8000756c:	6e72                	flw	ft8,28(sp)
8000756e:	6e69                	lui	t3,0x1a
80007570:	72652067          	0x72652067
80007574:	6f72                	flw	ft10,28(sp)
80007576:	0a36                	slli	s4,s4,0xd
80007578:	0000                	unimp
8000757a:	0000                	unimp
8000757c:	2049                	jal	800075fe <_write_r+0x6ca>
8000757e:	20746f67          	0x20746f67
80007582:	2061                	jal	8000760a <_write_r+0x6d6>
80007584:	7266                	flw	ft4,120(sp)
80007586:	6565                	lui	a0,0x19
80007588:	7320                	flw	fs0,96(a4)
8000758a:	7265                	lui	tp,0xffff9
8000758c:	6976                	flw	fs2,92(sp)
8000758e:	73206563          	bltu	zero,s2,80007cb8 <__sbss_end+0x2e8>
80007592:	6f6c                	flw	fa1,92(a4)
80007594:	2174                	fld	fa3,192(a0)
80007596:	2021                	jal	8000759e <_write_r+0x66a>
80007598:	3e2d                	jal	800070d2 <_write_r+0x19e>
8000759a:	0020                	addi	s0,sp,8
8000759c:	7041                	c.lui	zero,0xffff0
8000759e:	6c70                	flw	fa2,92(s0)
800075a0:	6369                	lui	t1,0x1a
800075a2:	7461                	lui	s0,0xffff8
800075a4:	6f69                	lui	t5,0x1a
800075a6:	206e                	fld	ft0,216(sp)
800075a8:	6c61                	lui	s8,0x18
800075aa:	6f6c                	flw	fa1,92(a4)
800075ac:	65746163          	bltu	s0,s7,80007bee <__sbss_end+0x21e>
800075b0:	3a64                	fld	fs1,240(a2)
800075b2:	0020                	addi	s0,sp,8
800075b4:	5309                	li	t1,-30
800075b6:	6174                	flw	fa3,68(a0)
800075b8:	7472                	flw	fs0,60(sp)
800075ba:	6320                	flw	fs0,64(a4)
800075bc:	616d6d6f          	jal	s10,800ddbd2 <__stack_top+0x9bb82>
800075c0:	646e                	flw	fs0,216(sp)
800075c2:	7320                	flw	fs0,96(a4)
800075c4:	6e65                	lui	t3,0x19
800075c6:	2074                	fld	fa3,192(s0)
800075c8:	6f74                	flw	fa3,92(a4)
800075ca:	6520                	flw	fs0,72(a0)
800075cc:	6576                	flw	fa0,92(sp)
800075ce:	7972                	flw	fs2,60(sp)
800075d0:	7420                	flw	fs0,104(s0)
800075d2:	7361                	lui	t1,0xffff8
800075d4:	000a2e6b          	0xa2e6b
800075d8:	6572                	flw	fa0,28(sp)
800075da:	7574                	flw	fa3,108(a0)
800075dc:	6e72                	flw	ft8,28(sp)
800075de:	6e69                	lui	t3,0x1a
800075e0:	72652067          	0x72652067
800075e4:	6f72                	flw	ft10,28(sp)
800075e6:	0a30                	addi	a2,sp,280
800075e8:	0000                	unimp
800075ea:	0000                	unimp
800075ec:	6572                	flw	fa0,28(sp)
800075ee:	7574                	flw	fa3,108(a0)
800075f0:	6e72                	flw	ft8,28(sp)
800075f2:	6e69                	lui	t3,0x1a
800075f4:	72652067          	0x72652067
800075f8:	6f72                	flw	ft10,28(sp)
800075fa:	0a31                	addi	s4,s4,12
800075fc:	0000                	unimp
800075fe:	0000                	unimp
80007600:	4544                	lw	s1,12(a0)
80007602:	2055                	jal	800076a6 <_write_r+0x772>
80007604:	5552                	lw	a0,52(sp)
80007606:	4d49                	li	s10,18
80007608:	4e20                	lw	s0,88(a2)
8000760a:	5041204f          	fnmadd.s	ft0,ft2,ft4,fa0,rdn
8000760e:	5f49                	li	t5,-14
80007610:	46746547          	fmsub.q	fa0,fs0,ft7,fs0,unknown
80007614:	6572                	flw	fa0,28(sp)
80007616:	5465                	li	s0,-7
80007618:	7361                	lui	t1,0xffff8
8000761a:	6f6c536b          	0x6f6c536b
8000761e:	2874                	fld	fa3,208(s0)
80007620:	0a29                	addi	s4,s4,10
80007622:	0000                	unimp
80007624:	20746f47          	fmsub.s	ft10,fs0,ft7,ft4,unknown
80007628:	746f6c73          	csrrsi	s8,0x746,30
8000762c:	203a                	fld	ft0,392(sp)
8000762e:	0000                	unimp
80007630:	6154                	flw	fa3,4(a0)
80007632:	74206b73          	csrrsi	s6,0x742,0
80007636:	6c61746f          	jal	s0,8001ecfc <__global_pointer$+0x16c9c>
8000763a:	7320                	flw	fs0,96(a4)
8000763c:	7a69                	lui	s4,0xffffa
8000763e:	2065                	jal	800076e6 <_write_r+0x7b2>
80007640:	7428                	flw	fa0,104(s0)
80007642:	7478                	flw	fa4,108(s0)
80007644:	7373622b          	0x7373622b
80007648:	3a29                	jal	80006f62 <_write_r+0x2e>
8000764a:	0020                	addi	s0,sp,8
8000764c:	6154                	flw	fa3,4(a0)
8000764e:	61206b73          	csrrsi	s6,0x612,0
80007652:	6464                	flw	fs1,76(s0)
80007654:	3a72                	fld	fs4,312(sp)
80007656:	0020                	addi	s0,sp,8
80007658:	6572                	flw	fa0,28(sp)
8000765a:	7574                	flw	fa3,108(a0)
8000765c:	6e72                	flw	ft8,28(sp)
8000765e:	6e69                	lui	t3,0x1a
80007660:	72652067          	0x72652067
80007664:	6f72                	flw	ft10,28(sp)
80007666:	0a32                	slli	s4,s4,0xc
80007668:	0000                	unimp
8000766a:	0000                	unimp
8000766c:	614c                	flw	fa1,4(a0)
8000766e:	6154                	flw	fa3,4(a0)
80007670:	00006b73          	csrrsi	s6,ustatus,0
80007674:	5245                	li	tp,-15
80007676:	4f52                	lw	t5,20(sp)
80007678:	2052                	fld	ft0,272(sp)
8000767a:	202d                	jal	800076a4 <_write_r+0x770>
8000767c:	5041                	c.li	zero,-16
8000767e:	5f49                	li	t5,-14
80007680:	6154                	flw	fa3,4(a0)
80007682:	74536b73          	csrrsi	s6,0x745,6
80007686:	7261                	lui	tp,0xffff8
80007688:	2174                	fld	fa3,192(a0)
8000768a:	2121                	jal	80007a92 <__sbss_end+0xc2>
8000768c:	000a                	c.slli	zero,0x2
8000768e:	0000                	unimp
80007690:	6564                	flw	fs1,76(a0)
80007692:	656c                	flw	fa1,76(a0)
80007694:	6574                	flw	fa3,76(a0)
80007696:	2064                	fld	fs1,192(s0)
80007698:	68746977          	0x68746977
8000769c:	7320                	flw	fs0,96(a4)
8000769e:	6375                	lui	t1,0x1d
800076a0:	73736573          	csrrsi	a0,0x737,6
800076a4:	2021                	jal	800076ac <_write_r+0x778>
800076a6:	7246                	flw	ft4,112(sp)
800076a8:	61206d6f          	jal	s10,8000dcba <__global_pointer$+0x5c5a>
800076ac:	7070                	flw	fa2,100(s0)
800076ae:	696c                	flw	fa1,84(a0)
800076b0:	69746163          	bltu	s0,s7,80007d32 <__sbss_end+0x362>
800076b4:	00206e6f          	jal	t3,8000d6b6 <__global_pointer$+0x5656>
800076b8:	6154                	flw	fa3,4(a0)
800076ba:	00206b73          	csrrsi	s6,frm,0
800076be:	0000                	unimp
800076c0:	735d                	lui	t1,0xffff7
800076c2:	6174                	flw	fa3,68(a0)
800076c4:	7574                	flw	fa3,108(a0)
800076c6:	00203a73          	csrrc	s4,frm,zero
800076ca:	0000                	unimp
800076cc:	6154                	flw	fa3,4(a0)
800076ce:	694c6b73          	csrrsi	s6,0x694,24
800076d2:	005b7473          	csrrci	s0,utvec,22
800076d6:	0000                	unimp
800076d8:	6154                	flw	fa3,4(a0)
800076da:	694c6b73          	csrrsi	s6,0x694,24
800076de:	695b7473          	csrrci	s0,0x695,22
800076e2:	2e5d                	jal	80007a98 <__sbss_end+0xc8>
800076e4:	74617473          	csrrci	s0,0x746,2
800076e8:	7375                	lui	t1,0xffffd
800076ea:	0020                	addi	s0,sp,8
800076ec:	6552                	flw	fa0,20(sp)
800076ee:	7574                	flw	fa3,108(a0)
800076f0:	6e72                	flw	ft8,28(sp)
800076f2:	6e69                	lui	t3,0x1a
800076f4:	65622067          	0x65622067
800076f8:	73756163          	bltu	a0,s7,80007e1a <__sbss_end+0x44a>
800076fc:	2065                	jal	800077a4 <_write_r+0x870>
800076fe:	203a666f          	jal	a2,800ae100 <__stack_top+0x6c0b0>
80007702:	0000                	unimp
80007704:	5041                	c.li	zero,-16
80007706:	5f49                	li	t5,-14
80007708:	46746573          	csrrsi	a0,0x467,8
8000770c:	6572                	flw	fa0,28(sp)
8000770e:	4971                	li	s2,28
80007710:	6c64                	flw	fs1,92(s0)
80007712:	0a65                	addi	s4,s4,25
80007714:	0020                	addi	s0,sp,8
80007716:	0000                	unimp
80007718:	2d2d                	jal	80007d52 <__sbss_end+0x382>
8000771a:	2d2d                	jal	80007d54 <__sbss_end+0x384>
8000771c:	2d2d                	jal	80007d56 <__sbss_end+0x386>
8000771e:	2d2d                	jal	80007d58 <__sbss_end+0x388>
80007720:	2d2d                	jal	80007d5a <__sbss_end+0x38a>
80007722:	2d2d                	jal	80007d5c <__sbss_end+0x38c>
80007724:	2d2d                	jal	80007d5e <__sbss_end+0x38e>
80007726:	2d2d                	jal	80007d60 <__sbss_end+0x390>
80007728:	2d2d                	jal	80007d62 <__sbss_end+0x392>
8000772a:	2d2d                	jal	80007d64 <__sbss_end+0x394>
8000772c:	2d2d                	jal	80007d66 <__sbss_end+0x396>
8000772e:	2d2d                	jal	80007d68 <__sbss_end+0x398>
80007730:	2d2d                	jal	80007d6a <__sbss_end+0x39a>
80007732:	000a                	c.slli	zero,0x2
80007734:	6f4c                	flw	fa1,28(a4)
80007736:	6461                	lui	s0,0x18
80007738:	09093a73          	csrrc	s4,0x90,s2
8000773c:	0000                	unimp
8000773e:	0000                	unimp
80007740:	726f7453          	0x726f7453
80007744:	7365                	lui	t1,0xffff9
80007746:	093a                	slli	s2,s2,0xe
80007748:	0009                	c.nop	2
8000774a:	0000                	unimp
8000774c:	6568744f          	0x6568744f
80007750:	7372                	flw	ft6,60(sp)
80007752:	093a                	slli	s2,s2,0xe
80007754:	0009                	c.nop	2
80007756:	0000                	unimp
80007758:	0a0d                	addi	s4,s4,3
8000775a:	7246                	flw	ft4,112(sp)
8000775c:	6565                	lui	a0,0x19
8000775e:	5452                	lw	s0,52(sp)
80007760:	4520534f          	0x4520534f
80007764:	6178                	flw	fa4,68(a0)
80007766:	706d                	c.lui	zero,0xffffb
80007768:	656c                	flw	fa1,76(a0)
8000776a:	0a0d                	addi	s4,s4,3
8000776c:	0000                	unimp
8000776e:	0000                	unimp
80007770:	200a                	fld	ft0,128(sp)
80007772:	6f726843          	fmadd.q	fa6,ft4,fs7,fa3,unknown
80007776:	6f6e                	flw	ft10,216(sp)
80007778:	6c702073          	csrr	zero,0x6c7
8000777c:	7461                	lui	s0,0xffff8
8000777e:	6f66                	flw	ft10,88(sp)
80007780:	6d72                	flw	fs10,28(sp)
80007782:	6920                	flw	fs0,80(a0)
80007784:	696e                	flw	fs2,216(sp)
80007786:	6974                	flw	fa3,84(a0)
80007788:	6c61                	lui	s8,0x18
8000778a:	7a69                	lui	s4,0xffffa
8000778c:	6e69                	lui	t3,0x1a
8000778e:	2e2e2e67          	0x2e2e2e67
80007792:	0a20                	addi	s0,sp,280
80007794:	0000                	unimp
80007796:	0000                	unimp
80007798:	200a                	fld	ft0,128(sp)
8000779a:	6854                	flw	fa3,20(s0)
8000779c:	7369                	lui	t1,0xffffa
8000779e:	7420                	flw	fs0,104(s0)
800077a0:	7265                	lui	tp,0xffff9
800077a2:	696d                	lui	s2,0x1b
800077a4:	616e                	flw	ft2,216(sp)
800077a6:	206c                	fld	fa1,192(s0)
800077a8:	6562                	flw	fa0,24(sp)
800077aa:	6f6c                	flw	fa1,92(a4)
800077ac:	676e                	flw	fa4,216(sp)
800077ae:	6f742073          	csrs	0x6f7,s0
800077b2:	7420                	flw	fs0,104(s0)
800077b4:	6568                	flw	fa0,76(a0)
800077b6:	6120                	flw	fs0,64(a0)
800077b8:	6464                	flw	fs1,76(s0)
800077ba:	6572                	flw	fa0,28(sp)
800077bc:	203a7373          	csrrci	t1,hideleg,20
800077c0:	0000                	unimp
800077c2:	0000                	unimp
800077c4:	000a                	c.slli	zero,0x2
800077c6:	0000                	unimp
800077c8:	200a                	fld	ft0,128(sp)
800077ca:	6854                	flw	fa3,20(s0)
800077cc:	7369                	lui	t1,0xffffa
800077ce:	7020                	flw	fs0,96(s0)
800077d0:	6f72                	flw	ft10,28(sp)
800077d2:	73736563          	bltu	t1,s7,80007efc <__sbss_end+0x52c>
800077d6:	6920726f          	jal	tp,8000ee68 <__global_pointer$+0x6e08>
800077da:	68742073          	csrs	0x687,s0
800077de:	2065                	jal	80007886 <__data_load+0x6>
800077e0:	626f6c47          	fmsub.d	fs8,ft10,ft6,fa2,unknown
800077e4:	6c61                	lui	s8,0x18
800077e6:	4d20                	lw	s0,88(a0)
800077e8:	7361                	lui	t1,0xffff8
800077ea:	6574                	flw	fa3,76(a0)
800077ec:	3a72                	fld	fs4,312(sp)
800077ee:	0a20                	addi	s0,sp,280
800077f0:	0000                	unimp
800077f2:	0000                	unimp
800077f4:	626f6c47          	fmsub.d	fs8,ft10,ft6,fa2,unknown
800077f8:	6c61                	lui	s8,0x18
800077fa:	614d                	addi	sp,sp,176
800077fc:	72657473          	csrrci	s0,0x726,10
80007800:	0000                	unimp
80007802:	0000                	unimp
80007804:	200a                	fld	ft0,128(sp)
80007806:	6854                	flw	fa3,20(s0)
80007808:	7369                	lui	t1,0xffffa
8000780a:	7020                	flw	fs0,96(s0)
8000780c:	6f72                	flw	ft10,28(sp)
8000780e:	73736563          	bltu	t1,s7,80007f38 <__sbss_end+0x568>
80007812:	6920726f          	jal	tp,8000eea4 <__global_pointer$+0x6e44>
80007816:	20612073          	csrs	0x206,sp
8000781a:	76616c53          	0x76616c53
8000781e:	3a65                	jal	800071d6 <_write_r+0x2a2>
80007820:	0a20                	addi	s0,sp,280
80007822:	0000                	unimp
80007824:	626f6c47          	fmsub.d	fs8,ft10,ft6,fa2,unknown
80007828:	6c61                	lui	s8,0x18
8000782a:	614d                	addi	sp,sp,176
8000782c:	72657473          	csrrci	s0,0x726,10
80007830:	6341                	lui	t1,0x10
80007832:	6974                	flw	fa3,84(a0)
80007834:	6576                	flw	fa0,92(sp)
80007836:	0000                	unimp
80007838:	4720                	lw	s0,72(a4)
8000783a:	6f6c                	flw	fa1,92(a4)
8000783c:	6162                	flw	ft2,24(sp)
8000783e:	4d6c                	lw	a1,92(a0)
80007840:	7361                	lui	t1,0xffff8
80007842:	6574                	flw	fa3,76(a0)
80007844:	5272                	lw	tp,60(sp)
80007846:	6974756f          	jal	a0,8004f6dc <__stack_top+0xd68c>
8000784a:	656e                	flw	fa0,216(sp)
8000784c:	2e2e                	fld	ft8,200(sp)
8000784e:	0d2e                	slli	s10,s10,0xb
80007850:	000a                	c.slli	zero,0x2
	...
