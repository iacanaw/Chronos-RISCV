
miv-rv32im-freertos-port-test.elf:     file format elf32-littleriscv
miv-rv32im-freertos-port-test.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000000

Program Header:
    LOAD off    0x00001000 vaddr 0x80000000 paddr 0x80000000 align 2**12
         filesz 0x00008a80 memsz 0x00043410 flags rwx

Sections:
Idx Name           Size      VMA       LMA       File off  Algn  Flags
  0 .text          00008980  80000000  80000000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sdata         00000020  80008980  80008980  00009980  2**4  CONTENTS, ALLOC, LOAD, DATA
  2 .data          000000e0  800089a0  800089a0  000099a0  2**4  CONTENTS, ALLOC, LOAD, DATA
  3 .sbss          000000a0  80008a80  80008a80  00009a80  2**4  ALLOC
  4 .bss           0001a8f0  80008b20  80008b20  00009a80  2**4  ALLOC
  5 .heap          00010000  80023410  80023410  00009a80  2**4  ALLOC
  6 .stack         00010000  80033410  80033410  00009a80  2**4  ALLOC
  7 .debug_line    0000c29a  00000000  00000000  00009a80  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_info    00010bdd  00000000  00000000  00015d1a  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev  00002eb4  00000000  00000000  000268f7  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000009a8  00000000  00000000  000297b0  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_str     000133e9  00000000  00000000  0002a158  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges  00000870  00000000  00000000  0003d541  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro   00005c36  00000000  00000000  0003ddb1  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment       00000039  00000000  00000000  000439e7  2**0  CONTENTS, READONLY
 15 .debug_frame   00002394  00000000  00000000  00043a20  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
80000000 l    d  .text	00000000 .text
80008980 l    d  .sdata	00000000 .sdata
800089a0 l    d  .data	00000000 .data
80008a80 l    d  .sbss	00000000 .sbss
80008b20 l    d  .bss	00000000 .bss
80023410 l    d  .heap	00000000 .heap
80033410 l    d  .stack	00000000 .stack
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./riscv_hal/entry.o
8000000c l       .text	00000000 handle_reset
80000004 l       .text	00000000 nmi_vector
80000008 l       .text	00000000 trap_vector
80000030 l       .text	00000000 trap_entry
00000000 l    df *ABS*	00000000 init.c
80000180 l     F .text	00000050 zero_section
00000000 l    df *ABS*	00000000 riscv_hal.c
80000258 l     F .text	000000b8 PLIC_DisableIRQ
80000310 l     F .text	00000044 PLIC_ClaimIRQ
80000354 l     F .text	0000004c PLIC_CompleteIRQ
80008a80 l     O .sbss	00000008 g_systick_increment
00000000 l    df *ABS*	00000000 riscv_hal_stubs.c
00000000 l    df *ABS*	00000000 syscall.c
80008a88 l     O .sbss	00000008 g_stdio_uart
80008a90 l     O .sbss	00000004 g_stdio_uart_init_done
80000e7c l     F .text	00000030 stub
00000000 l    df *ABS*	00000000 core_uart_apb.c
00000000 l    df *ABS*	00000000 heap_2.c
80008b20 l     O .bss	00019000 ucHeap
80008a94 l     O .sbss	00000008 xStart
80008a9c l     O .sbss	00000008 xEnd
80008980 l     O .sdata	00000004 xFreeBytesRemaining
80008aa4 l     O .sbss	00000004 xHeapHasBeenInitialised.2777
80001590 l     F .text	00000074 prvHeapInit
00000000 l    df *ABS*	00000000 port.c
80001604 l     F .text	0000004c raise_soft_interrupt
80008984 l     O .sdata	00000004 uxCriticalNesting
80008988 l     O .sdata	00000004 mtime
8000898c l     O .sdata	00000004 mtimecmp
800016c4 l     F .text	000000cc prvSetNextTimerInterrupt
8000185c l     F .text	0000002c prvTaskExitError
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 tasks.c
80021b20 l     O .bss	00000064 pxReadyTasksLists
80021b84 l     O .bss	00000014 xDelayedTaskList1
80021b98 l     O .bss	00000014 xDelayedTaskList2
80008ab0 l     O .sbss	00000004 pxDelayedTaskList
80008ab4 l     O .sbss	00000004 pxOverflowDelayedTaskList
80021bac l     O .bss	00000014 xPendingReadyList
80021bc0 l     O .bss	00000014 xTasksWaitingTermination
80008ab8 l     O .sbss	00000004 uxTasksDeleted
80021bd4 l     O .bss	00000014 xSuspendedTaskList
80008abc l     O .sbss	00000004 uxCurrentNumberOfTasks
80008ac0 l     O .sbss	00000004 xTickCount
80008ac4 l     O .sbss	00000004 uxTopReadyPriority
80008ac8 l     O .sbss	00000004 xSchedulerRunning
80008acc l     O .sbss	00000004 uxPendedTicks
80008ad0 l     O .sbss	00000004 xYieldPending
80008ad4 l     O .sbss	00000004 xNumOfOverflows
80008ad8 l     O .sbss	00000004 uxTaskNumber
80008adc l     O .sbss	00000004 xNextTaskUnblockTime
80008ae0 l     O .sbss	00000004 uxSchedulerSuspended
80002c98 l     F .text	000000c0 prvAllocateTCBAndStack
80002978 l     F .text	00000138 prvInitialiseTCBVariables
80002ab0 l     F .text	000000c0 prvInitialiseTaskLists
80002d98 l     F .text	00000060 prvResetNextTaskUnblockTime
80002c10 l     F .text	00000088 prvAddCurrentTaskToDelayedList
80002294 l     F .text	0000009c prvTaskIsTaskSuspended
80002944 l     F .text	00000034 prvIdleTask
80002b70 l     F .text	000000a0 prvCheckTasksWaitingTermination
80002d58 l     F .text	00000040 prvDeleteTCB
00000000 l    df *ABS*	00000000 globalMaster.c
00000000 l    df *ABS*	00000000 applications.c
00000000 l    df *ABS*	00000000 packet.c
00000000 l    df *ABS*	00000000 dvfs.c
00000000 l    df *ABS*	00000000 thermal.c
00000000 l    df *ABS*	00000000 chronos.c
80005c30 l     F .text	000000b4 PLIC_EnableIRQ
80005ce4 l     F .text	0000003c PLIC_SetPriority
00000000 l    df *ABS*	00000000 main.c
80007b70 l     F .text	000000d0 PLIC_init
80007d94 l     F .text	000000b0 GlobalManagerTask
00000000 l    df *ABS*	00000000 syswrite.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 impure.c
80008a20 l     O .data	00000060 impure_data
80008ae8 g     O .sbss	00000004 eastFlits_last
80008af0 g     O .sbss	00000004 westFlits_last
80008350 g     O .text	0000000c readEnergyMemory
80001684 g     F .text	00000040 vPortExitCritical
00010000 g       *ABS*	00000000 STACK_SIZE
80023400 g     O .bss	00000004 memFlits
80021be8 g     O .bss	00000004 SendingSlot
80000a54  w    F .text	00000020 External_11_IRQHandler
80009180 g       .sdata	00000000 __global_pointer$
80005ec0 g     F .text	00000048 printsv
80008b04 g     O .sbss	00000004 southPackets_last
800089a0 g       *ABS*	00000000 __data_load
8000191c g     F .text	000000e4 SysTick_Handler
80000994  w    F .text	00000020 External_5_IRQHandler
80004e50 g     F .text	000000a8 API_PipeInitialization
80003288 g     F .text	00000128 API_TilesReset
8000105c g       .text	00000000 HW_get_8bit_reg_field
80002e20 g     F .text	0000003c vTaskEnterCritical
800060bc g     F .text	00000080 reverse
80008374 g     O .text	0000000c loadStoreDyn
800070f4 g     F .text	00000074 API_AddPendingReq
800228a8 g     O .bss	00000024 priorityMatrix
80005200 g     F .text	00000114 API_checkPipe
80008aac g     O .sbss	00000004 pxCurrentTCB
80008a80 g       .sbss	00000000 __sbss_start
80005d20 g     F .text	000000f4 Chronos_init
8000533c g     F .text	0000002c API_setFreqScale
800228a4 g     O .bss	00000004 errno
80021bec g     O .bss	000000f0 ServicePipe
80000f94 g       .text	00000000 HW_set_32bit_reg
80008368 g     O .text	0000000c arithDyn
80000b74  w    F .text	00000020 External_20_IRQHandler
80001a00 g     F .text	00000044 xPortStartScheduler
800003a0 g     F .text	00000024 __enable_irq
80001f18 g     F .text	0000021c xTaskGenericCreate
80005054 g     F .text	000000b4 API_GetServiceSlot
80008980 g       .sdata	00000000 __sdata_start
800014c4 g     F .text	000000cc vPortFree
80021cdc g     O .bss	00000004 messageID
8000631c g     F .text	000000c4 API_PushSendQueue
80023404 g     O .bss	00000008 g_uart
80001034 g       .text	00000000 HW_set_8bit_reg_field
80000c34  w    F .text	00000020 External_26_IRQHandler
800007a4 g     F .text	00000170 handle_trap
800031a4 g     F .text	00000084 API_GetApplicationFreeSlot
80001bec g     F .text	00000088 vListInsertEnd
800055ac g     F .text	000000a4 getNumberOfPorts
00080000 g       *ABS*	00000000 RAM_SIZE
80000a34  w    F .text	00000020 External_10_IRQHandler
800228cc g     O .bss	00000780 applications
80008b10 g     O .sbss	00000004 API_SystemFinish
80005e84 g     F .text	0000003c printi
80008aec g     O .sbss	00000004 eastPackets_last
80001bc4 g     F .text	00000028 vListInitialiseItem
80007168 g     F .text	00000a08 API_NI_Handler
80000cb4  w    F .text	00000020 External_30_IRQHandler
80008af4 g     O .sbss	00000004 westPackets_last
80000b14  w    F .text	00000020 External_17_IRQHandler
80033410 g       .heap	00000000 _heap_end
80000e2c g     F .text	00000050 _isatty
80023410 g       .bss	00000000 __bss_end
80000510 g     F .text	00000294 handle_syscall
80002fc0 g     F .text	000001e4 API_AddApplication
800012e8 g     F .text	000001dc pvPortMalloc
80004ef8 g     F .text	0000015c API_GetMessageSlot
80003730 g     F .text	00000360 API_DealocateTask
800001d0 g     F .text	0000006c _init
80001b60 g     F .text	00000064 vListInitialise
80001024 g       .text	00000000 HW_set_8bit_reg
8000102c g       .text	00000000 HW_get_8bit_reg
80002634 g     F .text	00000038 xTaskGetTickCount
8002304c g     O .bss	00000004 temperatureUpdated
80003458 g     F .text	000002d8 API_AllocateTasks
800044dc g     F .text	000000b0 API_TaskListInit
800046cc g     F .text	000002d8 API_TaskAllocation
80008afc g     O .sbss	00000004 northPackets_last
80003d20 g     F .text	00000140 API_ClearTaskSlotFromTile
80004648 g     F .text	00000084 API_GetFreeTaskSlot
80005558 g     F .text	00000054 resetExecutedInstructions
80008b20 g       .sbss	00000000 __sbss_end
80004a88 g     F .text	000000e4 API_TaskStart
80000fa4 g       .text	00000000 HW_set_32bit_reg_field
80007e44 g     F .text	0000001c write
800040f8 g     F .text	00000128 API_TaskAllocated
80007d64 g     F .text	00000014 vApplicationMallocFailedHook
80000c14  w    F .text	00000020 External_25_IRQHandler
80005650 g     F .text	0000026c estimateNoCActivity
80043410 g       .stack	00000000 __stack_top
80000c94  w    F .text	00000020 External_29_IRQHandler
80008af8 g     O .sbss	00000004 northFlits_last
80021ce0 g     O .bss	00000034 incommingPacket
80002134 g     F .text	000000dc vTaskDelete
80001238 g     F .text	000000b0 UART_polled_tx_string
800233fc g     O .bss	00000004 selectedFrequencyScale
80000cf4 g     F .text	000000e8 write_hex
80000a94  w    F .text	00000020 External_13_IRQHandler
80006044 g     F .text	0000002c External_2_IRQHandler
00010000 g       *ABS*	00000000 HEAP_SIZE
80000a74  w    F .text	00000020 External_12_IRQHandler
80008ae4 g     O .sbss	00000004 thermalPacket_pending
800062dc g     F .text	00000040 makeAddress
80001184 g     F .text	000000b4 UART_send
80005fbc g     F .text	0000004c SendRaw
80000000 g       .text	00000000 _start
80005314 g     F .text	00000028 API_setFreqIdle
800024ac g     F .text	00000028 vTaskSuspendAll
800064b8 g     F .text	000000a0 API_PopSendQueue
800003c4 g     F .text	000000a8 handle_m_timer_interrupt
80005e14 g     F .text	00000070 prints
80001d48 g     F .text	00000098 uxListRemove
80004220 g     F .text	000002bc API_ApplicationStart
80006008 g     F .text	0000003c NI_enable_irq
80008980 g       *ABS*	00000000 __sdata_load
80008a80 g       .data	00000000 __data_end
80002330 g     F .text	000000ec vTaskResume
80002858 g     F .text	000000ec vTaskSwitchContext
80000b34  w    F .text	00000020 External_18_IRQHandler
80000fcc g       .text	00000000 HW_get_32bit_reg_field
80008320 g     O .text	0000000c powerAvgBufferIdle
8000613c g     F .text	000001a0 myItoa
80000bb4  w    F .text	00000020 External_22_IRQHandler
80000ad4  w    F .text	00000020 External_15_IRQHandler
80001b38 g     F .text	00000028 vPortYield
8000458c g     F .text	000000bc API_GetCurrentTaskSlot
80000000 g       *ABS*	00000000 RAM_START_ADDRESS
80008b20 g       .bss	00000000 __bss_start
800230e4 g     O .bss	00000318 TaskList
80000af4  w    F .text	00000020 External_16_IRQHandler
80001de0 g     F .text	000000e8 memset
80007c40 g     F .text	00000124 main
80006070 g     F .text	0000004c mySwap
8000539c g     F .text	00000054 API_applyFreqScale
80001c74 g     F .text	000000d4 vListInsert
80000c74  w    F .text	00000020 External_28_IRQHandler
80006fb8 g     F .text	0000013c API_CheckMessagePipe
800063e0 g     F .text	000000d8 API_PrioritySend
80003228 g     F .text	00000060 API_ApplicationsReset
80002df8 g     F .text	00000028 xTaskGetCurrentTaskHandle
80000fe4 g       .text	00000000 HW_get_16bit_reg
800089a0 g       .sdata	00000000 __sdata_end
80004b6c g     F .text	000002e4 API_FinishRunningTask
80008344 g     O .text	0000000c powerSwitchControlActive
80033410 g       .heap	00000000 __heap_end
80000ab4  w    F .text	00000020 External_14_IRQHandler
80003bc4 g     F .text	0000015c API_GetTaskSlotFromTile
80003a90 g     F .text	00000134 getNextPriorityAddr
80008b00 g     O .sbss	00000004 southFlits_last
80003f4c g     F .text	000001ac API_RepositoryAllocation
8000023c g     F .text	0000001c _fini
800024d4 g     F .text	00000160 xTaskResumeAll
8000241c g     F .text	00000090 vTaskStartScheduler
80006840 g     F .text	00000340 API_SendMessage
800089a0 g     O .data	00000080 ext_irq_handler_table
80021d14 g     O .bss	00000020 SendingQueue
80007e60 g     F .text	00000054 _write_r
80000fec g       .text	00000000 HW_set_16bit_reg_field
800066dc g     F .text	00000164 API_AckTaskAllocation
80021d34 g     O .bss	00000004 SendingQueue_tail
80008990 g     O .sdata	00000004 _impure_ptr
80033410 g       .stack	00000000 __stack_bottom
80001a44 g     F .text	000000f4 Software_IRQHandler
800053f0 g     F .text	00000168 API_freqStepUp
80005108 g     F .text	000000f8 API_ClearPipeSlot
80000c54  w    F .text	00000020 External_27_IRQHandler
80021d38 g     O .bss	00000244 ThermalPacket
800009f4  w    F .text	00000020 External_8_IRQHandler
80000a14  w    F .text	00000020 External_9_IRQHandler
80023410 g       .heap	00000000 __heap_start
80000914  w    F .text	00000020 Invalid_IRQHandler
8000832c g     O .text	0000000c powerSwitchControlIdle
80006558 g     F .text	00000184 API_Try2Send
80000954  w    F .text	00000020 External_3_IRQHandler
8000266c g     F .text	000001ec xTaskIncrementTick
8000835c g     O .text	0000000c writeEnergyMemory
800049a4 g     F .text	000000e4 API_GetTaskSlot
80008aa8 g     O .sbss	00000004 g_startscheduler
80005f94 g     F .text	00000028 getYpos
80000b54  w    F .text	00000020 External_19_IRQHandler
80000eac g     F .text	000000e8 _write
80005f68 g     F .text	0000002c getXpos
80023410 g       .bss	00000000 _end
80001790 g     F .text	000000cc vPortSetupTimer
80023050 g     O .bss	00000024 SystemTemperature
80005368 g     F .text	00000034 API_getFreqScale
80021f7c g     O .bss	00000014 str
80021f90 g     O .bss	00000004 SendingQueue_front
80002eac g     F .text	00000114 API_RepositoryWakeUp
80005f08 g     F .text	00000060 printsvsv
80002210 g     F .text	00000084 vTaskDelay
8000106c g     F .text	00000118 UART_init
80000f9c g       .text	00000000 HW_get_32bit_reg
80008338 g     O .text	0000000c powerAvgBufferActive
80000ddc g     F .text	00000050 _exit
80000fdc g       .text	00000000 HW_set_16bit_reg
80006d10 g     F .text	000002a8 API_SendMessageReq
80002e5c g     F .text	00000050 vTaskExitCritical
80001ec8 g     F .text	00000050 strlen
80001888 g     F .text	00000094 pxPortInitialiseStack
80000934  w    F .text	00000020 External_1_IRQHandler
80006b80 g     F .text	00000190 API_SendFinishTask
800009b4  w    F .text	00000020 External_6_IRQHandler
80000cd4  w    F .text	00000020 External_31_IRQHandler
80003e60 g     F .text	000000ec API_GetSystemTasksSlots
80001650 g     F .text	00000034 vPortEnterCritical
800089a0 g       .data	00000000 __data_start
800058bc g     F .text	00000374 powerEstimation
8002340c g     O .bss	00000004 ProcessorAddr
80008b0c g     O .sbss	00000004 localPackets_last
80023074 g     O .bss	00000004 priorityPointer
80000b94  w    F .text	00000020 External_21_IRQHandler
80023078 g     O .bss	0000006c Tiles
800004e0 g     F .text	00000030 handle_m_soft_interrupt
8000046c g     F .text	00000074 handle_m_ext_interrupt
80001014 g       .text	00000000 HW_get_16bit_reg_field
80000bd4  w    F .text	00000020 External_23_IRQHandler
80000bf4  w    F .text	00000020 External_24_IRQHandler
80008b08 g     O .sbss	00000004 localFlits_last
80000974  w    F .text	00000020 External_4_IRQHandler
80021f94 g     O .bss	00000910 MessagePipe
800033b0 g     F .text	000000a8 GeneratePatternMatrix
800009d4  w    F .text	00000020 External_7_IRQHandler
80007d78 g     F .text	0000001c vApplicationIdleHook



Disassembly of section .text:

80000000 <_start>:
_start():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:30

  .section      .text.entry
  .globl _start

_start:
  j handle_reset
80000000:	00c0006f          	j	8000000c <handle_reset>

80000004 <nmi_vector>:
nmi_vector():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:33

nmi_vector:
  j nmi_vector
80000004:	0000006f          	j	80000004 <nmi_vector>

80000008 <trap_vector>:
trap_vector():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:36

trap_vector:
  j trap_entry
80000008:	0280006f          	j	80000030 <trap_entry>

8000000c <handle_reset>:
handle_reset():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:39

handle_reset:
  la t0, trap_entry
8000000c:	00000297          	auipc	t0,0x0
80000010:	02428293          	addi	t0,t0,36 # 80000030 <trap_entry>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:40
  csrw mtvec, t0
80000014:	30529073          	csrw	mtvec,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:41
  csrwi mstatus, 0
80000018:	30005073          	csrwi	mstatus,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:42
  csrwi mie, 0
8000001c:	30405073          	csrwi	mie,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:60
  lui t0, 0x0
  fscsr t0
#endif

  # initialize global pointer
  la gp, __global_pointer$
80000020:	00018193          	mv	gp,gp
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:63

  # initialize stack pointer
  la sp, __stack_top
80000024:	00043117          	auipc	sp,0x43
80000028:	3ec10113          	addi	sp,sp,1004 # 80043410 <__stack_top>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:66

  # perform the rest of initialization in C
  j _init
8000002c:	1a40006f          	j	800001d0 <_init>

80000030 <trap_entry>:
trap_entry():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:70


trap_entry:
  addi sp, sp, -33*REGBYTES
80000030:	f7c10113          	addi	sp,sp,-132
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:72

  SREG x1, 0 * REGBYTES(sp)
80000034:	00112023          	sw	ra,0(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:73
  SREG x2, 1 * REGBYTES(sp)
80000038:	00212223          	sw	sp,4(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:74
  SREG x3, 2 * REGBYTES(sp)
8000003c:	00312423          	sw	gp,8(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:75
  SREG x4, 3 * REGBYTES(sp)
80000040:	00412623          	sw	tp,12(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:76
  SREG x5, 4 * REGBYTES(sp)
80000044:	00512823          	sw	t0,16(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:77
  SREG x6, 5 * REGBYTES(sp)
80000048:	00612a23          	sw	t1,20(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:78
  SREG x7, 6 * REGBYTES(sp)
8000004c:	00712c23          	sw	t2,24(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:79
  SREG x8, 7 * REGBYTES(sp)
80000050:	00812e23          	sw	s0,28(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:80
  SREG x9, 8 * REGBYTES(sp)
80000054:	02912023          	sw	s1,32(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:81
  SREG x10, 9 * REGBYTES(sp)
80000058:	02a12223          	sw	a0,36(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:82
  SREG x11, 10 * REGBYTES(sp)
8000005c:	02b12423          	sw	a1,40(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:83
  SREG x12, 11 * REGBYTES(sp)
80000060:	02c12623          	sw	a2,44(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:84
  SREG x13, 12 * REGBYTES(sp)
80000064:	02d12823          	sw	a3,48(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:85
  SREG x14, 13 * REGBYTES(sp)
80000068:	02e12a23          	sw	a4,52(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:86
  SREG x15, 14 * REGBYTES(sp)
8000006c:	02f12c23          	sw	a5,56(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:87
  SREG x16, 15 * REGBYTES(sp)
80000070:	03012e23          	sw	a6,60(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:88
  SREG x17, 16 * REGBYTES(sp)
80000074:	05112023          	sw	a7,64(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:89
  SREG x18, 17 * REGBYTES(sp)
80000078:	05212223          	sw	s2,68(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:90
  SREG x19, 18 * REGBYTES(sp)
8000007c:	05312423          	sw	s3,72(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:91
  SREG x20, 19 * REGBYTES(sp)
80000080:	05412623          	sw	s4,76(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:92
  SREG x21, 20 * REGBYTES(sp)
80000084:	05512823          	sw	s5,80(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:93
  SREG x22, 21 * REGBYTES(sp)
80000088:	05612a23          	sw	s6,84(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:94
  SREG x23, 22 * REGBYTES(sp)
8000008c:	05712c23          	sw	s7,88(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:95
  SREG x24, 23 * REGBYTES(sp)
80000090:	05812e23          	sw	s8,92(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:96
  SREG x25, 24 * REGBYTES(sp)
80000094:	07912023          	sw	s9,96(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:97
  SREG x26, 25 * REGBYTES(sp)
80000098:	07a12223          	sw	s10,100(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:98
  SREG x27, 26 * REGBYTES(sp)
8000009c:	07b12423          	sw	s11,104(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:99
  SREG x28, 27 * REGBYTES(sp)
800000a0:	07c12623          	sw	t3,108(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:100
  SREG x29, 28 * REGBYTES(sp)
800000a4:	07d12823          	sw	t4,112(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:101
  SREG x30, 29 * REGBYTES(sp)
800000a8:	07e12a23          	sw	t5,116(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:102
  SREG x31, 30 * REGBYTES(sp)
800000ac:	07f12c23          	sw	t6,120(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:105

  # Stores the return addr in the stack
  csrr t0, mepc
800000b0:	341022f3          	csrr	t0,mepc
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:106
  SREG t0, 31 * REGBYTES(sp)
800000b4:	06512e23          	sw	t0,124(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:109

  # store the MIE value in the stack
  li t0, MSTATUS_MIE
800000b8:	00800293          	li	t0,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:110
  csrrc t0, mstatus, t0 
800000bc:	3002b2f3          	csrrc	t0,mstatus,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:111
  SREG t0, 32 * REGBYTES(sp) 
800000c0:	08512023          	sw	t0,128(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:113

  csrr a0, mcause
800000c4:	34202573          	csrr	a0,mcause
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:114
  csrr a1, mepc
800000c8:	341025f3          	csrr	a1,mepc
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:115
  mv a2, sp
800000cc:	00010613          	mv	a2,sp
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:116
  call handle_trap
800000d0:	6d4000ef          	jal	ra,800007a4 <handle_trap>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:117
  csrw mepc, a0
800000d4:	34151073          	csrw	mepc,a0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:120

  # Remain in M-mode after mret
  li t0, MSTATUS_MPP
800000d8:	000022b7          	lui	t0,0x2
800000dc:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:121
  csrs mstatus, t0
800000e0:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:126
  #li t0, MSTATUS_MPIE
  #csrs mstatus, t0

  # Restore the interruption status after MRET
  LREG x5, 32 * REGBYTES(sp)  # load the old MIE value to t0
800000e4:	08012283          	lw	t0,128(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:127
  slli t0, t0, 4              # shifts it to the MPIE position
800000e8:	00429293          	slli	t0,t0,0x4
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:128
  csrs mstatus, t0            # restore the MIE value into the MPIE
800000ec:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:130
  
  LREG x1, 0 * REGBYTES(sp)
800000f0:	00012083          	lw	ra,0(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:131
  LREG x2, 1 * REGBYTES(sp)
800000f4:	00412103          	lw	sp,4(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:132
  LREG x3, 2 * REGBYTES(sp)
800000f8:	00812183          	lw	gp,8(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:133
  LREG x4, 3 * REGBYTES(sp)
800000fc:	00c12203          	lw	tp,12(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:134
  LREG x5, 4 * REGBYTES(sp)
80000100:	01012283          	lw	t0,16(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:135
  LREG x6, 5 * REGBYTES(sp)
80000104:	01412303          	lw	t1,20(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:136
  LREG x7, 6 * REGBYTES(sp)
80000108:	01812383          	lw	t2,24(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:137
  LREG x8, 7 * REGBYTES(sp)
8000010c:	01c12403          	lw	s0,28(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:138
  LREG x9, 8 * REGBYTES(sp)
80000110:	02012483          	lw	s1,32(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:139
  LREG x10, 9 * REGBYTES(sp)
80000114:	02412503          	lw	a0,36(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:140
  LREG x11, 10 * REGBYTES(sp)
80000118:	02812583          	lw	a1,40(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:141
  LREG x12, 11 * REGBYTES(sp)
8000011c:	02c12603          	lw	a2,44(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:142
  LREG x13, 12 * REGBYTES(sp)
80000120:	03012683          	lw	a3,48(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:143
  LREG x14, 13 * REGBYTES(sp)
80000124:	03412703          	lw	a4,52(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:144
  LREG x15, 14 * REGBYTES(sp)
80000128:	03812783          	lw	a5,56(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:145
  LREG x16, 15 * REGBYTES(sp)
8000012c:	03c12803          	lw	a6,60(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:146
  LREG x17, 16 * REGBYTES(sp)
80000130:	04012883          	lw	a7,64(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:147
  LREG x18, 17 * REGBYTES(sp)
80000134:	04412903          	lw	s2,68(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:148
  LREG x19, 18 * REGBYTES(sp)
80000138:	04812983          	lw	s3,72(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:149
  LREG x20, 19 * REGBYTES(sp)
8000013c:	04c12a03          	lw	s4,76(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:150
  LREG x21, 20 * REGBYTES(sp)
80000140:	05012a83          	lw	s5,80(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:151
  LREG x22, 21 * REGBYTES(sp)
80000144:	05412b03          	lw	s6,84(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:152
  LREG x23, 22 * REGBYTES(sp)
80000148:	05812b83          	lw	s7,88(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:153
  LREG x24, 23 * REGBYTES(sp)
8000014c:	05c12c03          	lw	s8,92(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:154
  LREG x25, 24 * REGBYTES(sp)
80000150:	06012c83          	lw	s9,96(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:155
  LREG x26, 25 * REGBYTES(sp)
80000154:	06412d03          	lw	s10,100(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:156
  LREG x27, 26 * REGBYTES(sp)
80000158:	06812d83          	lw	s11,104(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:157
  LREG x28, 27 * REGBYTES(sp)
8000015c:	06c12e03          	lw	t3,108(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:158
  LREG x29, 28 * REGBYTES(sp)
80000160:	07012e83          	lw	t4,112(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:159
  LREG x30, 29 * REGBYTES(sp)
80000164:	07412f03          	lw	t5,116(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:160
  LREG x31, 30 * REGBYTES(sp)
80000168:	07812f83          	lw	t6,120(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:162

  addi sp, sp, 33*REGBYTES
8000016c:	08410113          	addi	sp,sp,132
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:163
  mret
80000170:	30200073          	mret
	...

80000180 <zero_section>:
zero_section():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:47
        ++p_vma;
    }
}

static void zero_section(uint32_t * start, uint32_t * end)
{
80000180:	fd010113          	addi	sp,sp,-48
80000184:	02812623          	sw	s0,44(sp)
80000188:	03010413          	addi	s0,sp,48
8000018c:	fca42e23          	sw	a0,-36(s0)
80000190:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:48
    uint32_t * p_zero = start;
80000194:	fdc42783          	lw	a5,-36(s0)
80000198:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:50
    
    while(p_zero <= end)
8000019c:	0180006f          	j	800001b4 <zero_section+0x34>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:52
    {
        *p_zero = 0;
800001a0:	fec42783          	lw	a5,-20(s0)
800001a4:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:53
        ++p_zero;
800001a8:	fec42783          	lw	a5,-20(s0)
800001ac:	00478793          	addi	a5,a5,4
800001b0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:50
    while(p_zero <= end)
800001b4:	fec42703          	lw	a4,-20(s0)
800001b8:	fd842783          	lw	a5,-40(s0)
800001bc:	fee7f2e3          	bleu	a4,a5,800001a0 <zero_section+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:55
    }
}
800001c0:	00000013          	nop
800001c4:	02c12403          	lw	s0,44(sp)
800001c8:	03010113          	addi	sp,sp,48
800001cc:	00008067          	ret

800001d0 <_init>:
_init():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:58

void _init(void)
{
800001d0:	fe010113          	addi	sp,sp,-32
800001d4:	00112e23          	sw	ra,28(sp)
800001d8:	00812c23          	sw	s0,24(sp)
800001dc:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:60
    extern int main(int, char**);
    const char *argv0 = "hello";
800001e0:	800087b7          	lui	a5,0x80008
800001e4:	ec078793          	addi	a5,a5,-320 # 80007ec0 <__stack_top+0xfffc4ab0>
800001e8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:61
    char *argv[] = {(char *)argv0, NULL, NULL};
800001ec:	fec42783          	lw	a5,-20(s0)
800001f0:	fef42023          	sw	a5,-32(s0)
800001f4:	fe042223          	sw	zero,-28(s0)
800001f8:	fe042423          	sw	zero,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:66

// Imperas - this is loaded directly by simulator so must not be copied
//    copy_section(&__sdata_load, &__sdata_start, &__sdata_end);
//    copy_section(&__data_load, &__data_start, &__data_end);
    zero_section(&__sbss_start, &__sbss_end);
800001fc:	9a018593          	addi	a1,gp,-1632 # 80008b20 <__sbss_end>
80000200:	90018513          	addi	a0,gp,-1792 # 80008a80 <__data_end>
80000204:	f7dff0ef          	jal	ra,80000180 <zero_section>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:67
    zero_section(&__bss_start, &__bss_end);
80000208:	800237b7          	lui	a5,0x80023
8000020c:	41078593          	addi	a1,a5,1040 # 80023410 <__stack_top+0xfffe0000>
80000210:	9a018513          	addi	a0,gp,-1632 # 80008b20 <__sbss_end>
80000214:	f6dff0ef          	jal	ra,80000180 <zero_section>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:69
    
    main(1, argv);
80000218:	fe040793          	addi	a5,s0,-32
8000021c:	00078593          	mv	a1,a5
80000220:	00100513          	li	a0,1
80000224:	21d070ef          	jal	ra,80007c40 <main>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:70
}
80000228:	00000013          	nop
8000022c:	01c12083          	lw	ra,28(sp)
80000230:	01812403          	lw	s0,24(sp)
80000234:	02010113          	addi	sp,sp,32
80000238:	00008067          	ret

8000023c <_fini>:
_fini():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:75

/* Function called after main() finishes */
void
_fini()
{
8000023c:	ff010113          	addi	sp,sp,-16
80000240:	00812623          	sw	s0,12(sp)
80000244:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:76
}
80000248:	00000013          	nop
8000024c:	00c12403          	lw	s0,12(sp)
80000250:	01010113          	addi	sp,sp,16
80000254:	00008067          	ret

80000258 <PLIC_DisableIRQ>:
PLIC_DisableIRQ():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:174
 * 	If you wish to disable the external interrupt while the interrupt handler
 * 	for that external interrupt is executing then you must use the return value
 * 	EXT_IRQ_DISABLE to return from the extern interrupt handler.
 */
static inline void PLIC_DisableIRQ(IRQn_Type IRQn)
{
80000258:	fd010113          	addi	sp,sp,-48
8000025c:	02812623          	sw	s0,44(sp)
80000260:	03010413          	addi	s0,sp,48
80000264:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:175
    unsigned long hart_id = read_csr(mhartid);
80000268:	f14027f3          	csrr	a5,mhartid
8000026c:	fef42623          	sw	a5,-20(s0)
80000270:	fec42783          	lw	a5,-20(s0)
80000274:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:176
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80000278:	40000737          	lui	a4,0x40000
8000027c:	fdc42783          	lw	a5,-36(s0)
80000280:	0057d793          	srli	a5,a5,0x5
80000284:	fe842683          	lw	a3,-24(s0)
80000288:	00569693          	slli	a3,a3,0x5
8000028c:	00f686b3          	add	a3,a3,a5
80000290:	000017b7          	lui	a5,0x1
80000294:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80000298:	00f687b3          	add	a5,a3,a5
8000029c:	00279793          	slli	a5,a5,0x2
800002a0:	00f707b3          	add	a5,a4,a5
800002a4:	0007a783          	lw	a5,0(a5)
800002a8:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:178

    current &= ~((uint32_t)1 << (IRQn % 32));
800002ac:	fdc42783          	lw	a5,-36(s0)
800002b0:	01f7f793          	andi	a5,a5,31
800002b4:	00100713          	li	a4,1
800002b8:	00f717b3          	sll	a5,a4,a5
800002bc:	fff7c793          	not	a5,a5
800002c0:	fe442703          	lw	a4,-28(s0)
800002c4:	00f777b3          	and	a5,a4,a5
800002c8:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:180

    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
800002cc:	40000737          	lui	a4,0x40000
800002d0:	fdc42783          	lw	a5,-36(s0)
800002d4:	0057d793          	srli	a5,a5,0x5
800002d8:	fe842683          	lw	a3,-24(s0)
800002dc:	00569693          	slli	a3,a3,0x5
800002e0:	00f686b3          	add	a3,a3,a5
800002e4:	000017b7          	lui	a5,0x1
800002e8:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
800002ec:	00f687b3          	add	a5,a3,a5
800002f0:	00279793          	slli	a5,a5,0x2
800002f4:	00f707b3          	add	a5,a4,a5
800002f8:	fe442703          	lw	a4,-28(s0)
800002fc:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:181
}
80000300:	00000013          	nop
80000304:	02c12403          	lw	s0,44(sp)
80000308:	03010113          	addi	sp,sp,48
8000030c:	00008067          	ret

80000310 <PLIC_ClaimIRQ>:
PLIC_ClaimIRQ():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:205

/*==============================================================================
 * The function PLIC_ClaimIRQ() claims the interrupt from the PLIC controller.
 */
static inline uint32_t PLIC_ClaimIRQ(void)
{
80000310:	fe010113          	addi	sp,sp,-32
80000314:	00812e23          	sw	s0,28(sp)
80000318:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:206
    unsigned long hart_id = read_csr(mhartid);
8000031c:	f14027f3          	csrr	a5,mhartid
80000320:	fef42623          	sw	a5,-20(s0)
80000324:	fec42783          	lw	a5,-20(s0)
80000328:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:208

    return PLIC->TARGET[hart_id].CLAIM_COMPLETE;
8000032c:	40000737          	lui	a4,0x40000
80000330:	fe842783          	lw	a5,-24(s0)
80000334:	20078793          	addi	a5,a5,512
80000338:	00c79793          	slli	a5,a5,0xc
8000033c:	00f707b3          	add	a5,a4,a5
80000340:	0047a783          	lw	a5,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:209
}
80000344:	00078513          	mv	a0,a5
80000348:	01c12403          	lw	s0,28(sp)
8000034c:	02010113          	addi	sp,sp,32
80000350:	00008067          	ret

80000354 <PLIC_CompleteIRQ>:
PLIC_CompleteIRQ():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:216
/*==============================================================================
 * The function PLIC_CompleteIRQ() indicates to the PLIC controller the interrupt
 * is processed and claim is complete.
 */
static inline void PLIC_CompleteIRQ(uint32_t source)
{
80000354:	fd010113          	addi	sp,sp,-48
80000358:	02812623          	sw	s0,44(sp)
8000035c:	03010413          	addi	s0,sp,48
80000360:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:217
    unsigned long hart_id = read_csr(mhartid);
80000364:	f14027f3          	csrr	a5,mhartid
80000368:	fef42623          	sw	a5,-20(s0)
8000036c:	fec42783          	lw	a5,-20(s0)
80000370:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:219

    PLIC->TARGET[hart_id].CLAIM_COMPLETE = source;
80000374:	40000737          	lui	a4,0x40000
80000378:	fe842783          	lw	a5,-24(s0)
8000037c:	20078793          	addi	a5,a5,512
80000380:	00c79793          	slli	a5,a5,0xc
80000384:	00f707b3          	add	a5,a4,a5
80000388:	fdc42703          	lw	a4,-36(s0)
8000038c:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:220
}
80000390:	00000013          	nop
80000394:	02c12403          	lw	s0,44(sp)
80000398:	03010113          	addi	sp,sp,48
8000039c:	00008067          	ret

800003a0 <__enable_irq>:
__enable_irq():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:96

/*------------------------------------------------------------------------------
 * Enabler all interrupts.
 */
void __enable_irq(void)
{
800003a0:	fe010113          	addi	sp,sp,-32
800003a4:	00812e23          	sw	s0,28(sp)
800003a8:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:97
    set_csr(mstatus, MSTATUS_MIE);
800003ac:	300467f3          	csrrsi	a5,mstatus,8
800003b0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:98
}
800003b4:	00000013          	nop
800003b8:	01c12403          	lw	s0,28(sp)
800003bc:	02010113          	addi	sp,sp,32
800003c0:	00008067          	ret

800003c4 <handle_m_timer_interrupt>:
handle_m_timer_interrupt():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:128

/*------------------------------------------------------------------------------
 * RISC-V interrupt handler for machine timer interrupts.
 */
void handle_m_timer_interrupt()
{
800003c4:	fe010113          	addi	sp,sp,-32
800003c8:	00112e23          	sw	ra,28(sp)
800003cc:	00812c23          	sw	s0,24(sp)
800003d0:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:129
    clear_csr(mie, MIP_MTIP); //  MIP_MTIP (1 << 7)
800003d4:	08000793          	li	a5,128
800003d8:	3047b7f3          	csrrc	a5,mie,a5
800003dc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:131

    SysTick_Handler();
800003e0:	53c010ef          	jal	ra,8000191c <SysTick_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:133

    PRCI->MTIMECMP[read_csr(mhartid)] = PRCI->MTIME + g_systick_increment;
800003e4:	44000737          	lui	a4,0x44000
800003e8:	0000c7b7          	lui	a5,0xc
800003ec:	00f707b3          	add	a5,a4,a5
800003f0:	ffc7a803          	lw	a6,-4(a5) # bffc <HEAP_SIZE-0x4004>
800003f4:	ff87a783          	lw	a5,-8(a5)
800003f8:	9001a583          	lw	a1,-1792(gp) # 80008a80 <__data_end>
800003fc:	9041a603          	lw	a2,-1788(gp) # 80008a84 <__data_end+0x4>
80000400:	44000537          	lui	a0,0x44000
80000404:	f1402773          	csrr	a4,mhartid
80000408:	fee42423          	sw	a4,-24(s0)
8000040c:	fe842883          	lw	a7,-24(s0)
80000410:	00b786b3          	add	a3,a5,a1
80000414:	00068313          	mv	t1,a3
80000418:	00f33333          	sltu	t1,t1,a5
8000041c:	00c80733          	add	a4,a6,a2
80000420:	00e307b3          	add	a5,t1,a4
80000424:	00078713          	mv	a4,a5
80000428:	00068793          	mv	a5,a3
8000042c:	00070813          	mv	a6,a4
80000430:	00001737          	lui	a4,0x1
80000434:	80070713          	addi	a4,a4,-2048 # 800 <HEAP_SIZE-0xf800>
80000438:	00e88733          	add	a4,a7,a4
8000043c:	00371713          	slli	a4,a4,0x3
80000440:	00e50733          	add	a4,a0,a4
80000444:	00f72023          	sw	a5,0(a4)
80000448:	01072223          	sw	a6,4(a4)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:135

    set_csr(mie, MIP_MTIP);
8000044c:	08000793          	li	a5,128
80000450:	3047a7f3          	csrrs	a5,mie,a5
80000454:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:136
    return;
80000458:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:137
}
8000045c:	01c12083          	lw	ra,28(sp)
80000460:	01812403          	lw	s0,24(sp)
80000464:	02010113          	addi	sp,sp,32
80000468:	00008067          	ret

8000046c <handle_m_ext_interrupt>:
handle_m_ext_interrupt():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:182

/*------------------------------------------------------------------------------
 * 
 */
void handle_m_ext_interrupt()
{
8000046c:	fe010113          	addi	sp,sp,-32
80000470:	00112e23          	sw	ra,28(sp)
80000474:	00812c23          	sw	s0,24(sp)
80000478:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:183
    uint32_t int_num  = PLIC_ClaimIRQ();
8000047c:	e95ff0ef          	jal	ra,80000310 <PLIC_ClaimIRQ>
80000480:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:184
    uint8_t disable = EXT_IRQ_KEEP_ENABLED;
80000484:	fe0405a3          	sb	zero,-21(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:186

    disable = ext_irq_handler_table[int_num]();
80000488:	800097b7          	lui	a5,0x80009
8000048c:	fec42703          	lw	a4,-20(s0)
80000490:	00271713          	slli	a4,a4,0x2
80000494:	9a078793          	addi	a5,a5,-1632 # 800089a0 <__stack_top+0xfffc5590>
80000498:	00f707b3          	add	a5,a4,a5
8000049c:	0007a783          	lw	a5,0(a5)
800004a0:	000780e7          	jalr	a5
800004a4:	00050793          	mv	a5,a0
800004a8:	fef405a3          	sb	a5,-21(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:188

    PLIC_CompleteIRQ(int_num);
800004ac:	fec42503          	lw	a0,-20(s0)
800004b0:	ea5ff0ef          	jal	ra,80000354 <PLIC_CompleteIRQ>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:190

    if(EXT_IRQ_DISABLE == disable)
800004b4:	feb44703          	lbu	a4,-21(s0)
800004b8:	00100793          	li	a5,1
800004bc:	00f71863          	bne	a4,a5,800004cc <handle_m_ext_interrupt+0x60>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:192
    {
        PLIC_DisableIRQ((IRQn_Type)int_num);
800004c0:	fec42503          	lw	a0,-20(s0)
800004c4:	d95ff0ef          	jal	ra,80000258 <PLIC_DisableIRQ>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:194
    }
    return;
800004c8:	00000013          	nop
800004cc:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:195
}
800004d0:	01c12083          	lw	ra,28(sp)
800004d4:	01812403          	lw	s0,24(sp)
800004d8:	02010113          	addi	sp,sp,32
800004dc:	00008067          	ret

800004e0 <handle_m_soft_interrupt>:
handle_m_soft_interrupt():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:198

void handle_m_soft_interrupt()
{
800004e0:	ff010113          	addi	sp,sp,-16
800004e4:	00112623          	sw	ra,12(sp)
800004e8:	00812423          	sw	s0,8(sp)
800004ec:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:199
    Software_IRQHandler();
800004f0:	554010ef          	jal	ra,80001a44 <Software_IRQHandler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:202

    /*Clear software interrupt*/
    PRCI->MSIP[0] = 0x00;
800004f4:	440007b7          	lui	a5,0x44000
800004f8:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:203
    return;
800004fc:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:204
}
80000500:	00c12083          	lw	ra,12(sp)
80000504:	00812403          	lw	s0,8(sp)
80000508:	01010113          	addi	sp,sp,16
8000050c:	00008067          	ret

80000510 <handle_syscall>:
handle_syscall():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:207

/* syscall funcion defined at system_call.c */
void handle_syscall(){
80000510:	fd010113          	addi	sp,sp,-48
80000514:	02112623          	sw	ra,44(sp)
80000518:	02812423          	sw	s0,40(sp)
8000051c:	03010413          	addi	s0,sp,48
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:210
	unsigned int arg0, arg1, arg2, arg3, arg4, arg5, type;
	unsigned int *pointer;
	register long temp asm("t0") = 0;
80000520:	00000293          	li	t0,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:211
	asm("addi	t0, sp, 0");
80000524:	00010293          	mv	t0,sp
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:213
	
	pointer = (unsigned int *)(temp + (29*4));
80000528:	00028793          	mv	a5,t0
8000052c:	07478793          	addi	a5,a5,116
80000530:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:214
	arg0 =  *pointer;
80000534:	fec42783          	lw	a5,-20(s0)
80000538:	0007a783          	lw	a5,0(a5)
8000053c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:216

	pointer = (unsigned int *)(temp + (30*4));
80000540:	00028793          	mv	a5,t0
80000544:	07878793          	addi	a5,a5,120
80000548:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:217
	arg1 = *pointer;
8000054c:	fec42783          	lw	a5,-20(s0)
80000550:	0007a783          	lw	a5,0(a5)
80000554:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:219
	
	pointer = (unsigned int *)(temp + (31*4));
80000558:	00028793          	mv	a5,t0
8000055c:	07c78793          	addi	a5,a5,124
80000560:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:220
	arg2 = *pointer;
80000564:	fec42783          	lw	a5,-20(s0)
80000568:	0007a783          	lw	a5,0(a5)
8000056c:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:222

	pointer = (unsigned int *)(temp + (32*4));
80000570:	00028793          	mv	a5,t0
80000574:	08078793          	addi	a5,a5,128
80000578:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:223
	arg3 = *pointer;
8000057c:	fec42783          	lw	a5,-20(s0)
80000580:	0007a783          	lw	a5,0(a5)
80000584:	fcf42e23          	sw	a5,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:225

	pointer = (unsigned int *)(temp + (33*4));
80000588:	00028793          	mv	a5,t0
8000058c:	08478793          	addi	a5,a5,132
80000590:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:226
	arg4 = *pointer;
80000594:	fec42783          	lw	a5,-20(s0)
80000598:	0007a783          	lw	a5,0(a5)
8000059c:	fcf42c23          	sw	a5,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:228

	pointer = (unsigned int *)(temp + (34*4));
800005a0:	00028793          	mv	a5,t0
800005a4:	08878793          	addi	a5,a5,136
800005a8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:229
	arg4 = *pointer;
800005ac:	fec42783          	lw	a5,-20(s0)
800005b0:	0007a783          	lw	a5,0(a5)
800005b4:	fcf42c23          	sw	a5,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:231

	pointer = (unsigned int *)(temp + (36*4));
800005b8:	00028793          	mv	a5,t0
800005bc:	09078793          	addi	a5,a5,144
800005c0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:232
	type = *pointer;
800005c4:	fec42783          	lw	a5,-20(s0)
800005c8:	0007a783          	lw	a5,0(a5)
800005cc:	fcf42a23          	sw	a5,-44(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:234

	switch (type){
800005d0:	fd442783          	lw	a5,-44(s0)
800005d4:	ff678793          	addi	a5,a5,-10
800005d8:	03800713          	li	a4,56
800005dc:	12f76663          	bltu	a4,a5,80000708 <handle_syscall+0x1f8>
800005e0:	00279713          	slli	a4,a5,0x2
800005e4:	800087b7          	lui	a5,0x80008
800005e8:	f5c78793          	addi	a5,a5,-164 # 80007f5c <__stack_top+0xfffc4b4c>
800005ec:	00f707b3          	add	a5,a4,a5
800005f0:	0007a783          	lw	a5,0(a5)
800005f4:	00078067          	jr	a5
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:237

		case SYS_TESTING:
			prints("Detectei uma chamada TESTE de sistema!\n");
800005f8:	800087b7          	lui	a5,0x80008
800005fc:	ec878513          	addi	a0,a5,-312 # 80007ec8 <__stack_top+0xfffc4ab8>
80000600:	015050ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:238
			printsv("arg0 ", arg0);
80000604:	fe842783          	lw	a5,-24(s0)
80000608:	00078593          	mv	a1,a5
8000060c:	800087b7          	lui	a5,0x80008
80000610:	ef078513          	addi	a0,a5,-272 # 80007ef0 <__stack_top+0xfffc4ae0>
80000614:	0ad050ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:239
			printsv("arg1 ", arg1);
80000618:	fe442783          	lw	a5,-28(s0)
8000061c:	00078593          	mv	a1,a5
80000620:	800087b7          	lui	a5,0x80008
80000624:	ef878513          	addi	a0,a5,-264 # 80007ef8 <__stack_top+0xfffc4ae8>
80000628:	099050ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:240
			printsv("arg2 ", arg2);
8000062c:	fe042783          	lw	a5,-32(s0)
80000630:	00078593          	mv	a1,a5
80000634:	800087b7          	lui	a5,0x80008
80000638:	f0078513          	addi	a0,a5,-256 # 80007f00 <__stack_top+0xfffc4af0>
8000063c:	085050ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:241
			printsv("arg3 ", arg3);
80000640:	fdc42783          	lw	a5,-36(s0)
80000644:	00078593          	mv	a1,a5
80000648:	800087b7          	lui	a5,0x80008
8000064c:	f0878513          	addi	a0,a5,-248 # 80007f08 <__stack_top+0xfffc4af8>
80000650:	071050ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:242
			printsv("arg4 ", arg4);
80000654:	fd842783          	lw	a5,-40(s0)
80000658:	00078593          	mv	a1,a5
8000065c:	800087b7          	lui	a5,0x80008
80000660:	f1078513          	addi	a0,a5,-240 # 80007f10 <__stack_top+0xfffc4b00>
80000664:	05d050ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:243
			printsv("type ", type);
80000668:	fd442783          	lw	a5,-44(s0)
8000066c:	00078593          	mv	a1,a5
80000670:	800087b7          	lui	a5,0x80008
80000674:	f1878513          	addi	a0,a5,-232 # 80007f18 <__stack_top+0xfffc4b08>
80000678:	049050ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:244
			break;
8000067c:	1140006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:247

        case SYS_PRINTS:
            prints(arg0);
80000680:	fe842783          	lw	a5,-24(s0)
80000684:	00078513          	mv	a0,a5
80000688:	78c050ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:248
            UART_polled_tx_string( &g_uart, arg0 );
8000068c:	fe842783          	lw	a5,-24(s0)
80000690:	00078593          	mv	a1,a5
80000694:	800237b7          	lui	a5,0x80023
80000698:	40478513          	addi	a0,a5,1028 # 80023404 <__stack_top+0xfffdfff4>
8000069c:	39d000ef          	jal	ra,80001238 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:249
            break;
800006a0:	0f00006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:252
        
        case SYS_PRINTI:
            printi(arg0);
800006a4:	fe842783          	lw	a5,-24(s0)
800006a8:	00078513          	mv	a0,a5
800006ac:	7d8050ef          	jal	ra,80005e84 <printi>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:253
            myItoa(arg0, str, 10);
800006b0:	fe842703          	lw	a4,-24(s0)
800006b4:	00a00613          	li	a2,10
800006b8:	800227b7          	lui	a5,0x80022
800006bc:	f7c78593          	addi	a1,a5,-132 # 80021f7c <__stack_top+0xfffdeb6c>
800006c0:	00070513          	mv	a0,a4
800006c4:	279050ef          	jal	ra,8000613c <myItoa>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:254
            UART_polled_tx_string( &g_uart, (const uint8_t *)str );
800006c8:	800227b7          	lui	a5,0x80022
800006cc:	f7c78593          	addi	a1,a5,-132 # 80021f7c <__stack_top+0xfffdeb6c>
800006d0:	800237b7          	lui	a5,0x80023
800006d4:	40478513          	addi	a0,a5,1028 # 80023404 <__stack_top+0xfffdfff4>
800006d8:	361000ef          	jal	ra,80001238 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:255
            break;
800006dc:	0b40006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:259
        
        case SYS_SEND_MSG:
            //              addr, task
            API_SendMessage(arg0, arg1);
800006e0:	fe442583          	lw	a1,-28(s0)
800006e4:	fe842503          	lw	a0,-24(s0)
800006e8:	158060ef          	jal	ra,80006840 <API_SendMessage>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:260
            break;
800006ec:	0a40006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:264
        
        case SYS_RECV_MSG:
            //                 addr, task
            API_SendMessageReq(arg0, arg1);
800006f0:	fe442583          	lw	a1,-28(s0)
800006f4:	fe842503          	lw	a0,-24(s0)
800006f8:	618060ef          	jal	ra,80006d10 <API_SendMessageReq>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:265
            break;
800006fc:	0940006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:268
        
        case SYS_END_TASK:
            API_FinishRunningTask();
80000700:	46c040ef          	jal	ra,80004b6c <API_FinishRunningTask>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:269
            break;
80000704:	08c0006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:272

		default:
			prints("Systemcall não identificada!\n");
80000708:	800087b7          	lui	a5,0x80008
8000070c:	f2078513          	addi	a0,a5,-224 # 80007f20 <__stack_top+0xfffc4b10>
80000710:	704050ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:273
			printsv("arg0 ", arg0);
80000714:	fe842783          	lw	a5,-24(s0)
80000718:	00078593          	mv	a1,a5
8000071c:	800087b7          	lui	a5,0x80008
80000720:	ef078513          	addi	a0,a5,-272 # 80007ef0 <__stack_top+0xfffc4ae0>
80000724:	79c050ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:274
			printsv("arg1 ", arg1);
80000728:	fe442783          	lw	a5,-28(s0)
8000072c:	00078593          	mv	a1,a5
80000730:	800087b7          	lui	a5,0x80008
80000734:	ef878513          	addi	a0,a5,-264 # 80007ef8 <__stack_top+0xfffc4ae8>
80000738:	788050ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:275
			printsv("arg2 ", arg2);
8000073c:	fe042783          	lw	a5,-32(s0)
80000740:	00078593          	mv	a1,a5
80000744:	800087b7          	lui	a5,0x80008
80000748:	f0078513          	addi	a0,a5,-256 # 80007f00 <__stack_top+0xfffc4af0>
8000074c:	774050ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:276
			printsv("arg3 ", arg3);
80000750:	fdc42783          	lw	a5,-36(s0)
80000754:	00078593          	mv	a1,a5
80000758:	800087b7          	lui	a5,0x80008
8000075c:	f0878513          	addi	a0,a5,-248 # 80007f08 <__stack_top+0xfffc4af8>
80000760:	760050ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:277
			printsv("arg4 ", arg4);
80000764:	fd842783          	lw	a5,-40(s0)
80000768:	00078593          	mv	a1,a5
8000076c:	800087b7          	lui	a5,0x80008
80000770:	f1078513          	addi	a0,a5,-240 # 80007f10 <__stack_top+0xfffc4b00>
80000774:	74c050ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:278
			printsv("type ", type);
80000778:	fd442783          	lw	a5,-44(s0)
8000077c:	00078593          	mv	a1,a5
80000780:	800087b7          	lui	a5,0x80008
80000784:	f1878513          	addi	a0,a5,-232 # 80007f18 <__stack_top+0xfffc4b08>
80000788:	738050ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:279
			break;
8000078c:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:281
	}
	return;
80000790:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:296
	// 	value = *p;
	// 	printsvsv("i: ", i, " value: ", value);
	// }
    // prints("Cheguei aqui!!!!!!! sucessooo :D\n");
	////////////////////////////////////////////////////
}
80000794:	02c12083          	lw	ra,44(sp)
80000798:	02812403          	lw	s0,40(sp)
8000079c:	03010113          	addi	sp,sp,48
800007a0:	00008067          	ret

800007a4 <handle_trap>:
handle_trap():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:302

/*------------------------------------------------------------------------------
 * Trap/Interrupt handler
 */
uintptr_t handle_trap(uintptr_t mcause, uintptr_t epc)
{
800007a4:	fe010113          	addi	sp,sp,-32
800007a8:	00112e23          	sw	ra,28(sp)
800007ac:	00812c23          	sw	s0,24(sp)
800007b0:	02010413          	addi	s0,sp,32
800007b4:	fea42623          	sw	a0,-20(s0)
800007b8:	feb42423          	sw	a1,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303
    if (!(mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE) == ENV_CALL_M || (mcause & MCAUSE_CAUSE) == ENV_CALL_H || (mcause & MCAUSE_CAUSE) == ENV_CALL_S || (mcause & MCAUSE_CAUSE) == ENV_CALL_U)){
800007bc:	fec42783          	lw	a5,-20(s0)
800007c0:	0607cc63          	bltz	a5,80000838 <handle_trap+0x94>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303 (discriminator 1)
800007c4:	fec42703          	lw	a4,-20(s0)
800007c8:	800007b7          	lui	a5,0x80000
800007cc:	fff7c793          	not	a5,a5
800007d0:	00f77733          	and	a4,a4,a5
800007d4:	00b00793          	li	a5,11
800007d8:	04f70663          	beq	a4,a5,80000824 <handle_trap+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303 (discriminator 2)
800007dc:	fec42703          	lw	a4,-20(s0)
800007e0:	800007b7          	lui	a5,0x80000
800007e4:	fff7c793          	not	a5,a5
800007e8:	00f77733          	and	a4,a4,a5
800007ec:	00a00793          	li	a5,10
800007f0:	02f70a63          	beq	a4,a5,80000824 <handle_trap+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303 (discriminator 3)
800007f4:	fec42703          	lw	a4,-20(s0)
800007f8:	800007b7          	lui	a5,0x80000
800007fc:	fff7c793          	not	a5,a5
80000800:	00f77733          	and	a4,a4,a5
80000804:	00900793          	li	a5,9
80000808:	00f70e63          	beq	a4,a5,80000824 <handle_trap+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303 (discriminator 4)
8000080c:	fec42703          	lw	a4,-20(s0)
80000810:	800007b7          	lui	a5,0x80000
80000814:	fff7c793          	not	a5,a5
80000818:	00f77733          	and	a4,a4,a5
8000081c:	00800793          	li	a5,8
80000820:	00f71c63          	bne	a4,a5,80000838 <handle_trap+0x94>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:304
        handle_syscall();
80000824:	cedff0ef          	jal	ra,80000510 <handle_syscall>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:305
        epc = (uintptr_t) (epc + 4);
80000828:	fe842783          	lw	a5,-24(s0)
8000082c:	00478793          	addi	a5,a5,4 # 80000004 <__stack_top+0xfffbcbf4>
80000830:	fef42423          	sw	a5,-24(s0)
80000834:	0c40006f          	j	800008f8 <handle_trap+0x154>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:307
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_EXT)){
80000838:	fec42783          	lw	a5,-20(s0)
8000083c:	0207d263          	bgez	a5,80000860 <handle_trap+0xbc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:307 (discriminator 1)
80000840:	fec42703          	lw	a4,-20(s0)
80000844:	800007b7          	lui	a5,0x80000
80000848:	fff7c793          	not	a5,a5
8000084c:	00f77733          	and	a4,a4,a5
80000850:	00b00793          	li	a5,11
80000854:	00f71663          	bne	a4,a5,80000860 <handle_trap+0xbc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:308
        handle_m_ext_interrupt();
80000858:	c15ff0ef          	jal	ra,8000046c <handle_m_ext_interrupt>
8000085c:	09c0006f          	j	800008f8 <handle_trap+0x154>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:310
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_TIMER)){
80000860:	fec42783          	lw	a5,-20(s0)
80000864:	0207d263          	bgez	a5,80000888 <handle_trap+0xe4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:310 (discriminator 1)
80000868:	fec42703          	lw	a4,-20(s0)
8000086c:	800007b7          	lui	a5,0x80000
80000870:	fff7c793          	not	a5,a5
80000874:	00f77733          	and	a4,a4,a5
80000878:	00700793          	li	a5,7
8000087c:	00f71663          	bne	a4,a5,80000888 <handle_trap+0xe4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:311
        handle_m_timer_interrupt();
80000880:	b45ff0ef          	jal	ra,800003c4 <handle_m_timer_interrupt>
80000884:	0740006f          	j	800008f8 <handle_trap+0x154>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:313
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_SOFT)){
80000888:	fec42783          	lw	a5,-20(s0)
8000088c:	0207d263          	bgez	a5,800008b0 <handle_trap+0x10c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:313 (discriminator 1)
80000890:	fec42703          	lw	a4,-20(s0)
80000894:	800007b7          	lui	a5,0x80000
80000898:	fff7c793          	not	a5,a5
8000089c:	00f77733          	and	a4,a4,a5
800008a0:	00300793          	li	a5,3
800008a4:	00f71663          	bne	a4,a5,800008b0 <handle_trap+0x10c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:314
        handle_m_soft_interrupt();
800008a8:	c39ff0ef          	jal	ra,800004e0 <handle_m_soft_interrupt>
800008ac:	04c0006f          	j	800008f8 <handle_trap+0x154>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:317
    }
    else{
        write(1, "trap\n", 5);
800008b0:	00500613          	li	a2,5
800008b4:	800087b7          	lui	a5,0x80008
800008b8:	f4078593          	addi	a1,a5,-192 # 80007f40 <__stack_top+0xfffc4b30>
800008bc:	00100513          	li	a0,1
800008c0:	584070ef          	jal	ra,80007e44 <write>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:318
        printsv("epc: ", epc);
800008c4:	fe842783          	lw	a5,-24(s0)
800008c8:	00078593          	mv	a1,a5
800008cc:	800087b7          	lui	a5,0x80008
800008d0:	f4878513          	addi	a0,a5,-184 # 80007f48 <__stack_top+0xfffc4b38>
800008d4:	5ec050ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:319
        printsv("mcause: ", mcause);
800008d8:	fec42783          	lw	a5,-20(s0)
800008dc:	00078593          	mv	a1,a5
800008e0:	800087b7          	lui	a5,0x80008
800008e4:	f5078513          	addi	a0,a5,-176 # 80007f50 <__stack_top+0xfffc4b40>
800008e8:	5d8050ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:320
        _exit(mcause);
800008ec:	fec42783          	lw	a5,-20(s0)
800008f0:	00078513          	mv	a0,a5
800008f4:	4e8000ef          	jal	ra,80000ddc <_exit>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:324
    }
    
    // Added by Iaçanã, solves several interruption problems!
    portDISABLE_INTERRUPTS(); 
800008f8:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:325
    return epc;
800008fc:	fe842783          	lw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:326
}
80000900:	00078513          	mv	a0,a5
80000904:	01c12083          	lw	ra,28(sp)
80000908:	01812403          	lw	s0,24(sp)
8000090c:	02010113          	addi	sp,sp,32
80000910:	00008067          	ret

80000914 <Invalid_IRQHandler>:
Invalid_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:37
{
    ;
}

__attribute__((weak))  uint8_t Invalid_IRQHandler(void)
{
80000914:	ff010113          	addi	sp,sp,-16
80000918:	00812623          	sw	s0,12(sp)
8000091c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:38
    return(0);
80000920:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:39
}
80000924:	00078513          	mv	a0,a5
80000928:	00c12403          	lw	s0,12(sp)
8000092c:	01010113          	addi	sp,sp,16
80000930:	00008067          	ret

80000934 <External_1_IRQHandler>:
External_1_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:42

__attribute__((weak))  uint8_t External_1_IRQHandler(void)
{
80000934:	ff010113          	addi	sp,sp,-16
80000938:	00812623          	sw	s0,12(sp)
8000093c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:43
    return(0);
80000940:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:44
}
80000944:	00078513          	mv	a0,a5
80000948:	00c12403          	lw	s0,12(sp)
8000094c:	01010113          	addi	sp,sp,16
80000950:	00008067          	ret

80000954 <External_3_IRQHandler>:
External_3_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:52
{
    return(0);
}

__attribute__((weak))  uint8_t External_3_IRQHandler(void)
{
80000954:	ff010113          	addi	sp,sp,-16
80000958:	00812623          	sw	s0,12(sp)
8000095c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:53
    return(0);
80000960:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:54
}
80000964:	00078513          	mv	a0,a5
80000968:	00c12403          	lw	s0,12(sp)
8000096c:	01010113          	addi	sp,sp,16
80000970:	00008067          	ret

80000974 <External_4_IRQHandler>:
External_4_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:57

__attribute__((weak))  uint8_t External_4_IRQHandler(void)
{
80000974:	ff010113          	addi	sp,sp,-16
80000978:	00812623          	sw	s0,12(sp)
8000097c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:58
    return(0);
80000980:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:59
}
80000984:	00078513          	mv	a0,a5
80000988:	00c12403          	lw	s0,12(sp)
8000098c:	01010113          	addi	sp,sp,16
80000990:	00008067          	ret

80000994 <External_5_IRQHandler>:
External_5_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:62

__attribute__((weak))  uint8_t External_5_IRQHandler(void)
{
80000994:	ff010113          	addi	sp,sp,-16
80000998:	00812623          	sw	s0,12(sp)
8000099c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:63
    return(0);
800009a0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:64
}
800009a4:	00078513          	mv	a0,a5
800009a8:	00c12403          	lw	s0,12(sp)
800009ac:	01010113          	addi	sp,sp,16
800009b0:	00008067          	ret

800009b4 <External_6_IRQHandler>:
External_6_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:67

__attribute__((weak))  uint8_t External_6_IRQHandler(void)
{
800009b4:	ff010113          	addi	sp,sp,-16
800009b8:	00812623          	sw	s0,12(sp)
800009bc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:68
    return(0);
800009c0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:69
}
800009c4:	00078513          	mv	a0,a5
800009c8:	00c12403          	lw	s0,12(sp)
800009cc:	01010113          	addi	sp,sp,16
800009d0:	00008067          	ret

800009d4 <External_7_IRQHandler>:
External_7_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:72

__attribute__((weak))  uint8_t External_7_IRQHandler(void)
{
800009d4:	ff010113          	addi	sp,sp,-16
800009d8:	00812623          	sw	s0,12(sp)
800009dc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:73
    return(0);
800009e0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:74
}
800009e4:	00078513          	mv	a0,a5
800009e8:	00c12403          	lw	s0,12(sp)
800009ec:	01010113          	addi	sp,sp,16
800009f0:	00008067          	ret

800009f4 <External_8_IRQHandler>:
External_8_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:77

__attribute__((weak))  uint8_t External_8_IRQHandler(void)
{
800009f4:	ff010113          	addi	sp,sp,-16
800009f8:	00812623          	sw	s0,12(sp)
800009fc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:78
    return(0);
80000a00:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:79
}
80000a04:	00078513          	mv	a0,a5
80000a08:	00c12403          	lw	s0,12(sp)
80000a0c:	01010113          	addi	sp,sp,16
80000a10:	00008067          	ret

80000a14 <External_9_IRQHandler>:
External_9_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:82

__attribute__((weak))  uint8_t External_9_IRQHandler(void)
{
80000a14:	ff010113          	addi	sp,sp,-16
80000a18:	00812623          	sw	s0,12(sp)
80000a1c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:83
    return(0);
80000a20:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:84
}
80000a24:	00078513          	mv	a0,a5
80000a28:	00c12403          	lw	s0,12(sp)
80000a2c:	01010113          	addi	sp,sp,16
80000a30:	00008067          	ret

80000a34 <External_10_IRQHandler>:
External_10_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:87

__attribute__((weak))  uint8_t External_10_IRQHandler(void)
{
80000a34:	ff010113          	addi	sp,sp,-16
80000a38:	00812623          	sw	s0,12(sp)
80000a3c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:88
    return(0);
80000a40:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:89
}
80000a44:	00078513          	mv	a0,a5
80000a48:	00c12403          	lw	s0,12(sp)
80000a4c:	01010113          	addi	sp,sp,16
80000a50:	00008067          	ret

80000a54 <External_11_IRQHandler>:
External_11_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:92

__attribute__((weak))  uint8_t External_11_IRQHandler(void)
{
80000a54:	ff010113          	addi	sp,sp,-16
80000a58:	00812623          	sw	s0,12(sp)
80000a5c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:93
    return(0);
80000a60:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:94
}
80000a64:	00078513          	mv	a0,a5
80000a68:	00c12403          	lw	s0,12(sp)
80000a6c:	01010113          	addi	sp,sp,16
80000a70:	00008067          	ret

80000a74 <External_12_IRQHandler>:
External_12_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:97

__attribute__((weak))  uint8_t External_12_IRQHandler(void)
{
80000a74:	ff010113          	addi	sp,sp,-16
80000a78:	00812623          	sw	s0,12(sp)
80000a7c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:98
    return(0);
80000a80:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:99
}
80000a84:	00078513          	mv	a0,a5
80000a88:	00c12403          	lw	s0,12(sp)
80000a8c:	01010113          	addi	sp,sp,16
80000a90:	00008067          	ret

80000a94 <External_13_IRQHandler>:
External_13_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:102

__attribute__((weak))  uint8_t External_13_IRQHandler(void)
{
80000a94:	ff010113          	addi	sp,sp,-16
80000a98:	00812623          	sw	s0,12(sp)
80000a9c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:103
    return(0);
80000aa0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:104
}
80000aa4:	00078513          	mv	a0,a5
80000aa8:	00c12403          	lw	s0,12(sp)
80000aac:	01010113          	addi	sp,sp,16
80000ab0:	00008067          	ret

80000ab4 <External_14_IRQHandler>:
External_14_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:107

__attribute__((weak))  uint8_t External_14_IRQHandler(void)
{
80000ab4:	ff010113          	addi	sp,sp,-16
80000ab8:	00812623          	sw	s0,12(sp)
80000abc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:108
    return(0);
80000ac0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:109
}
80000ac4:	00078513          	mv	a0,a5
80000ac8:	00c12403          	lw	s0,12(sp)
80000acc:	01010113          	addi	sp,sp,16
80000ad0:	00008067          	ret

80000ad4 <External_15_IRQHandler>:
External_15_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:112

__attribute__((weak))  uint8_t External_15_IRQHandler(void)
{
80000ad4:	ff010113          	addi	sp,sp,-16
80000ad8:	00812623          	sw	s0,12(sp)
80000adc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:113
    return(0);
80000ae0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:114
}
80000ae4:	00078513          	mv	a0,a5
80000ae8:	00c12403          	lw	s0,12(sp)
80000aec:	01010113          	addi	sp,sp,16
80000af0:	00008067          	ret

80000af4 <External_16_IRQHandler>:
External_16_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:117

__attribute__((weak))  uint8_t External_16_IRQHandler(void)
{
80000af4:	ff010113          	addi	sp,sp,-16
80000af8:	00812623          	sw	s0,12(sp)
80000afc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:118
    return(0);
80000b00:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:119
}
80000b04:	00078513          	mv	a0,a5
80000b08:	00c12403          	lw	s0,12(sp)
80000b0c:	01010113          	addi	sp,sp,16
80000b10:	00008067          	ret

80000b14 <External_17_IRQHandler>:
External_17_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:122

__attribute__((weak))  uint8_t External_17_IRQHandler(void)
{
80000b14:	ff010113          	addi	sp,sp,-16
80000b18:	00812623          	sw	s0,12(sp)
80000b1c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:123
    return(0);
80000b20:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:124
}
80000b24:	00078513          	mv	a0,a5
80000b28:	00c12403          	lw	s0,12(sp)
80000b2c:	01010113          	addi	sp,sp,16
80000b30:	00008067          	ret

80000b34 <External_18_IRQHandler>:
External_18_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:127

__attribute__((weak))  uint8_t External_18_IRQHandler(void)
{
80000b34:	ff010113          	addi	sp,sp,-16
80000b38:	00812623          	sw	s0,12(sp)
80000b3c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:128
    return(0);
80000b40:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:129
}
80000b44:	00078513          	mv	a0,a5
80000b48:	00c12403          	lw	s0,12(sp)
80000b4c:	01010113          	addi	sp,sp,16
80000b50:	00008067          	ret

80000b54 <External_19_IRQHandler>:
External_19_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:132

__attribute__((weak))  uint8_t External_19_IRQHandler(void)
{
80000b54:	ff010113          	addi	sp,sp,-16
80000b58:	00812623          	sw	s0,12(sp)
80000b5c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:133
    return(0);
80000b60:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:134
}
80000b64:	00078513          	mv	a0,a5
80000b68:	00c12403          	lw	s0,12(sp)
80000b6c:	01010113          	addi	sp,sp,16
80000b70:	00008067          	ret

80000b74 <External_20_IRQHandler>:
External_20_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:137

__attribute__((weak))  uint8_t External_20_IRQHandler(void)
{
80000b74:	ff010113          	addi	sp,sp,-16
80000b78:	00812623          	sw	s0,12(sp)
80000b7c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:138
    return(0);
80000b80:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:139
}
80000b84:	00078513          	mv	a0,a5
80000b88:	00c12403          	lw	s0,12(sp)
80000b8c:	01010113          	addi	sp,sp,16
80000b90:	00008067          	ret

80000b94 <External_21_IRQHandler>:
External_21_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:142

__attribute__((weak))  uint8_t External_21_IRQHandler(void)
{
80000b94:	ff010113          	addi	sp,sp,-16
80000b98:	00812623          	sw	s0,12(sp)
80000b9c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:143
    return(0);
80000ba0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:144
}
80000ba4:	00078513          	mv	a0,a5
80000ba8:	00c12403          	lw	s0,12(sp)
80000bac:	01010113          	addi	sp,sp,16
80000bb0:	00008067          	ret

80000bb4 <External_22_IRQHandler>:
External_22_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:147

__attribute__((weak))  uint8_t External_22_IRQHandler(void)
{
80000bb4:	ff010113          	addi	sp,sp,-16
80000bb8:	00812623          	sw	s0,12(sp)
80000bbc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:148
    return(0);
80000bc0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:149
}
80000bc4:	00078513          	mv	a0,a5
80000bc8:	00c12403          	lw	s0,12(sp)
80000bcc:	01010113          	addi	sp,sp,16
80000bd0:	00008067          	ret

80000bd4 <External_23_IRQHandler>:
External_23_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:152

__attribute__((weak))  uint8_t External_23_IRQHandler(void)
{
80000bd4:	ff010113          	addi	sp,sp,-16
80000bd8:	00812623          	sw	s0,12(sp)
80000bdc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:153
    return(0);
80000be0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:154
}
80000be4:	00078513          	mv	a0,a5
80000be8:	00c12403          	lw	s0,12(sp)
80000bec:	01010113          	addi	sp,sp,16
80000bf0:	00008067          	ret

80000bf4 <External_24_IRQHandler>:
External_24_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:157

__attribute__((weak))  uint8_t External_24_IRQHandler(void)
{
80000bf4:	ff010113          	addi	sp,sp,-16
80000bf8:	00812623          	sw	s0,12(sp)
80000bfc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:158
    return(0);
80000c00:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:159
}
80000c04:	00078513          	mv	a0,a5
80000c08:	00c12403          	lw	s0,12(sp)
80000c0c:	01010113          	addi	sp,sp,16
80000c10:	00008067          	ret

80000c14 <External_25_IRQHandler>:
External_25_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:162

__attribute__((weak))  uint8_t External_25_IRQHandler(void)
{
80000c14:	ff010113          	addi	sp,sp,-16
80000c18:	00812623          	sw	s0,12(sp)
80000c1c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:163
    return(0);
80000c20:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:164
}
80000c24:	00078513          	mv	a0,a5
80000c28:	00c12403          	lw	s0,12(sp)
80000c2c:	01010113          	addi	sp,sp,16
80000c30:	00008067          	ret

80000c34 <External_26_IRQHandler>:
External_26_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:167

__attribute__((weak))  uint8_t External_26_IRQHandler(void)
{
80000c34:	ff010113          	addi	sp,sp,-16
80000c38:	00812623          	sw	s0,12(sp)
80000c3c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:168
    return(0);
80000c40:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:169
}
80000c44:	00078513          	mv	a0,a5
80000c48:	00c12403          	lw	s0,12(sp)
80000c4c:	01010113          	addi	sp,sp,16
80000c50:	00008067          	ret

80000c54 <External_27_IRQHandler>:
External_27_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:172

__attribute__((weak))  uint8_t External_27_IRQHandler(void)
{
80000c54:	ff010113          	addi	sp,sp,-16
80000c58:	00812623          	sw	s0,12(sp)
80000c5c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:173
    return(0);
80000c60:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:174
}
80000c64:	00078513          	mv	a0,a5
80000c68:	00c12403          	lw	s0,12(sp)
80000c6c:	01010113          	addi	sp,sp,16
80000c70:	00008067          	ret

80000c74 <External_28_IRQHandler>:
External_28_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:177

__attribute__((weak))  uint8_t External_28_IRQHandler(void)
{
80000c74:	ff010113          	addi	sp,sp,-16
80000c78:	00812623          	sw	s0,12(sp)
80000c7c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:178
    return(0);
80000c80:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:179
}
80000c84:	00078513          	mv	a0,a5
80000c88:	00c12403          	lw	s0,12(sp)
80000c8c:	01010113          	addi	sp,sp,16
80000c90:	00008067          	ret

80000c94 <External_29_IRQHandler>:
External_29_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:182

__attribute__((weak))  uint8_t External_29_IRQHandler(void)
{
80000c94:	ff010113          	addi	sp,sp,-16
80000c98:	00812623          	sw	s0,12(sp)
80000c9c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:183
    return(0);
80000ca0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:184
}
80000ca4:	00078513          	mv	a0,a5
80000ca8:	00c12403          	lw	s0,12(sp)
80000cac:	01010113          	addi	sp,sp,16
80000cb0:	00008067          	ret

80000cb4 <External_30_IRQHandler>:
External_30_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:187

__attribute__((weak))  uint8_t External_30_IRQHandler(void)
{
80000cb4:	ff010113          	addi	sp,sp,-16
80000cb8:	00812623          	sw	s0,12(sp)
80000cbc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:188
    return(0);
80000cc0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:189
}
80000cc4:	00078513          	mv	a0,a5
80000cc8:	00c12403          	lw	s0,12(sp)
80000ccc:	01010113          	addi	sp,sp,16
80000cd0:	00008067          	ret

80000cd4 <External_31_IRQHandler>:
External_31_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:192

__attribute__((weak))  uint8_t External_31_IRQHandler(void)
{
80000cd4:	ff010113          	addi	sp,sp,-16
80000cd8:	00812623          	sw	s0,12(sp)
80000cdc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:193
    return(0);
80000ce0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:194
}
80000ce4:	00078513          	mv	a0,a5
80000ce8:	00c12403          	lw	s0,12(sp)
80000cec:	01010113          	addi	sp,sp,16
80000cf0:	00008067          	ret

80000cf4 <write_hex>:
write_hex():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:55

char *__env[1] = { 0 };
char **environ = __env;

void write_hex(int fd, uint32_t hex)
{
80000cf4:	fd010113          	addi	sp,sp,-48
80000cf8:	02112623          	sw	ra,44(sp)
80000cfc:	02812423          	sw	s0,40(sp)
80000d00:	03010413          	addi	s0,sp,48
80000d04:	fca42e23          	sw	a0,-36(s0)
80000d08:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:61
    uint8_t ii;
    uint8_t jj;
    char towrite;
    uint8_t digit;

    write( fd , "0x", 2 );
80000d0c:	00200613          	li	a2,2
80000d10:	800087b7          	lui	a5,0x80008
80000d14:	04078593          	addi	a1,a5,64 # 80008040 <__stack_top+0xfffc4c30>
80000d18:	fdc42503          	lw	a0,-36(s0)
80000d1c:	128070ef          	jal	ra,80007e44 <write>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:63

    for (ii = 8 ; ii > 0; ii--)
80000d20:	00800793          	li	a5,8
80000d24:	fef407a3          	sb	a5,-17(s0)
80000d28:	0980006f          	j	80000dc0 <write_hex+0xcc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:65
    {
        jj = ii-1;
80000d2c:	fef44783          	lbu	a5,-17(s0)
80000d30:	fff78793          	addi	a5,a5,-1
80000d34:	fef40723          	sb	a5,-18(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:66
        digit = ((hex & (0xF << (jj*4))) >> (jj*4));
80000d38:	fee44783          	lbu	a5,-18(s0)
80000d3c:	00279793          	slli	a5,a5,0x2
80000d40:	00f00713          	li	a4,15
80000d44:	00f717b3          	sll	a5,a4,a5
80000d48:	00078713          	mv	a4,a5
80000d4c:	fd842783          	lw	a5,-40(s0)
80000d50:	00f77733          	and	a4,a4,a5
80000d54:	fee44783          	lbu	a5,-18(s0)
80000d58:	00279793          	slli	a5,a5,0x2
80000d5c:	00f757b3          	srl	a5,a4,a5
80000d60:	fef406a3          	sb	a5,-19(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:67
        towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
80000d64:	fed44703          	lbu	a4,-19(s0)
80000d68:	00900793          	li	a5,9
80000d6c:	00e7ee63          	bltu	a5,a4,80000d88 <write_hex+0x94>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 1)
80000d70:	fed44783          	lbu	a5,-19(s0)
80000d74:	03078793          	addi	a5,a5,48
80000d78:	0ff7f793          	andi	a5,a5,255
80000d7c:	01879793          	slli	a5,a5,0x18
80000d80:	4187d793          	srai	a5,a5,0x18
80000d84:	0180006f          	j	80000d9c <write_hex+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 2)
80000d88:	fed44783          	lbu	a5,-19(s0)
80000d8c:	03778793          	addi	a5,a5,55
80000d90:	0ff7f793          	andi	a5,a5,255
80000d94:	01879793          	slli	a5,a5,0x18
80000d98:	4187d793          	srai	a5,a5,0x18
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 4)
80000d9c:	fef40623          	sb	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:68 (discriminator 4)
        write( fd, &towrite, 1);
80000da0:	fec40793          	addi	a5,s0,-20
80000da4:	00100613          	li	a2,1
80000da8:	00078593          	mv	a1,a5
80000dac:	fdc42503          	lw	a0,-36(s0)
80000db0:	094070ef          	jal	ra,80007e44 <write>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 4)
    for (ii = 8 ; ii > 0; ii--)
80000db4:	fef44783          	lbu	a5,-17(s0)
80000db8:	fff78793          	addi	a5,a5,-1
80000dbc:	fef407a3          	sb	a5,-17(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 2)
80000dc0:	fef44783          	lbu	a5,-17(s0)
80000dc4:	f60794e3          	bnez	a5,80000d2c <write_hex+0x38>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:70
    }
}
80000dc8:	00000013          	nop
80000dcc:	02c12083          	lw	ra,44(sp)
80000dd0:	02812403          	lw	s0,40(sp)
80000dd4:	03010113          	addi	sp,sp,48
80000dd8:	00008067          	ret

80000ddc <_exit>:
_exit():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:74

               
void _exit(int code)
{
80000ddc:	fd010113          	addi	sp,sp,-48
80000de0:	02112623          	sw	ra,44(sp)
80000de4:	02812423          	sw	s0,40(sp)
80000de8:	03010413          	addi	s0,sp,48
80000dec:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:76
#ifdef MSCC_STDIO_THRU_CORE_UART_APB
    const char * message = "\nProgam has exited with code:";
80000df0:	800087b7          	lui	a5,0x80008
80000df4:	04478793          	addi	a5,a5,68 # 80008044 <__stack_top+0xfffc4c34>
80000df8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:78

    write(STDERR_FILENO, message, strlen(message));
80000dfc:	fec42503          	lw	a0,-20(s0)
80000e00:	0c8010ef          	jal	ra,80001ec8 <strlen>
80000e04:	00050793          	mv	a5,a0
80000e08:	00078613          	mv	a2,a5
80000e0c:	fec42583          	lw	a1,-20(s0)
80000e10:	00200513          	li	a0,2
80000e14:	030070ef          	jal	ra,80007e44 <write>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:79
    write_hex(STDERR_FILENO, code);
80000e18:	fdc42783          	lw	a5,-36(s0)
80000e1c:	00078593          	mv	a1,a5
80000e20:	00200513          	li	a0,2
80000e24:	ed1ff0ef          	jal	ra,80000cf4 <write_hex>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:82 (discriminator 1)
#endif

    while (1);
80000e28:	0000006f          	j	80000e28 <_exit+0x4c>

80000e2c <_isatty>:
_isatty():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:101
    curbrk += incr;
    return curbrk - incr;
}

int _isatty(int fd)
{
80000e2c:	fe010113          	addi	sp,sp,-32
80000e30:	00812e23          	sw	s0,28(sp)
80000e34:	02010413          	addi	s0,sp,32
80000e38:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:102
    if (fd == STDOUT_FILENO || fd == STDERR_FILENO)
80000e3c:	fec42703          	lw	a4,-20(s0)
80000e40:	00100793          	li	a5,1
80000e44:	00f70863          	beq	a4,a5,80000e54 <_isatty+0x28>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:102 (discriminator 1)
80000e48:	fec42703          	lw	a4,-20(s0)
80000e4c:	00200793          	li	a5,2
80000e50:	00f71663          	bne	a4,a5,80000e5c <_isatty+0x30>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:104
    {
        return 1;
80000e54:	00100793          	li	a5,1
80000e58:	0140006f          	j	80000e6c <_isatty+0x40>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:107
    }

    errno = EBADF;
80000e5c:	800237b7          	lui	a5,0x80023
80000e60:	00900713          	li	a4,9
80000e64:	8ae7a223          	sw	a4,-1884(a5) # 800228a4 <__stack_top+0xfffdf494>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:108
    return 0;
80000e68:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:109
}
80000e6c:	00078513          	mv	a0,a5
80000e70:	01c12403          	lw	s0,28(sp)
80000e74:	02010113          	addi	sp,sp,32
80000e78:	00008067          	ret

80000e7c <stub>:
stub():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:112

static int stub(int err)
{
80000e7c:	fe010113          	addi	sp,sp,-32
80000e80:	00812e23          	sw	s0,28(sp)
80000e84:	02010413          	addi	s0,sp,32
80000e88:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:113
    errno = err;
80000e8c:	800237b7          	lui	a5,0x80023
80000e90:	fec42703          	lw	a4,-20(s0)
80000e94:	8ae7a223          	sw	a4,-1884(a5) # 800228a4 <__stack_top+0xfffdf494>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:114
    return -1;
80000e98:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:115
}
80000e9c:	00078513          	mv	a0,a5
80000ea0:	01c12403          	lw	s0,28(sp)
80000ea4:	02010113          	addi	sp,sp,32
80000ea8:	00008067          	ret

80000eac <_write>:
_write():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:226
{
    return stub(ECHILD);
}

ssize_t _write(int fd, const void* ptr, size_t len)
{
80000eac:	fd010113          	addi	sp,sp,-48
80000eb0:	02112623          	sw	ra,44(sp)
80000eb4:	02812423          	sw	s0,40(sp)
80000eb8:	03010413          	addi	s0,sp,48
80000ebc:	fca42e23          	sw	a0,-36(s0)
80000ec0:	fcb42c23          	sw	a1,-40(s0)
80000ec4:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:229

#ifdef MSCC_STDIO_THRU_CORE_UART_APB
  const uint8_t * current = (const uint8_t *) ptr;
80000ec8:	fd842783          	lw	a5,-40(s0)
80000ecc:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:232
  size_t jj;

  if (_isatty(fd))
80000ed0:	fdc42503          	lw	a0,-36(s0)
80000ed4:	f59ff0ef          	jal	ra,80000e2c <_isatty>
80000ed8:	00050793          	mv	a5,a0
80000edc:	08078c63          	beqz	a5,80000f74 <_write+0xc8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:238
  {
        /*--------------------------------------------------------------------------
        * Initialize the UART driver if it is the first time this function is
        * called.
        */
        if ( !g_stdio_uart_init_done )
80000ee0:	9101a783          	lw	a5,-1776(gp) # 80008a90 <g_stdio_uart_init_done>
80000ee4:	02079063          	bnez	a5,80000f04 <_write+0x58>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:245
            /******************************************************************************
            * Baud value:
            * This value is calculated using the following equation:
            *      BAUD_VALUE = (CLOCK / (16 * BAUD_RATE)) - 1
            *****************************************************************************/
            UART_init( &g_stdio_uart, MSCC_STDIO_UART_BASE_ADDR, ((SYS_CLK_FREQ/(16 * MSCC_STDIO_BAUD_VALUE))-1), (DATA_8_BITS | NO_PARITY));
80000ee8:	00100693          	li	a3,1
80000eec:	02c00613          	li	a2,44
80000ef0:	700015b7          	lui	a1,0x70001
80000ef4:	90818513          	addi	a0,gp,-1784 # 80008a88 <g_stdio_uart>
80000ef8:	174000ef          	jal	ra,8000106c <UART_init>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:246
            g_stdio_uart_init_done = 1;
80000efc:	00100713          	li	a4,1
80000f00:	90e1a823          	sw	a4,-1776(gp) # 80008a90 <g_stdio_uart_init_done>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:249
        }

    for (jj = 0; jj < len; jj++)
80000f04:	fe042623          	sw	zero,-20(s0)
80000f08:	0580006f          	j	80000f60 <_write+0xb4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:251
    {
        UART_send(&g_stdio_uart, current + jj, 1);
80000f0c:	fe842703          	lw	a4,-24(s0)
80000f10:	fec42783          	lw	a5,-20(s0)
80000f14:	00f707b3          	add	a5,a4,a5
80000f18:	00100613          	li	a2,1
80000f1c:	00078593          	mv	a1,a5
80000f20:	90818513          	addi	a0,gp,-1784 # 80008a88 <g_stdio_uart>
80000f24:	260000ef          	jal	ra,80001184 <UART_send>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:252
        if (current[jj] == '\n')
80000f28:	fe842703          	lw	a4,-24(s0)
80000f2c:	fec42783          	lw	a5,-20(s0)
80000f30:	00f707b3          	add	a5,a4,a5
80000f34:	0007c703          	lbu	a4,0(a5)
80000f38:	00a00793          	li	a5,10
80000f3c:	00f71c63          	bne	a4,a5,80000f54 <_write+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:254
        {
            UART_send(&g_stdio_uart, (const uint8_t *)"\r", 1);
80000f40:	00100613          	li	a2,1
80000f44:	800087b7          	lui	a5,0x80008
80000f48:	06478593          	addi	a1,a5,100 # 80008064 <__stack_top+0xfffc4c54>
80000f4c:	90818513          	addi	a0,gp,-1784 # 80008a88 <g_stdio_uart>
80000f50:	234000ef          	jal	ra,80001184 <UART_send>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 2)
    for (jj = 0; jj < len; jj++)
80000f54:	fec42783          	lw	a5,-20(s0)
80000f58:	00178793          	addi	a5,a5,1
80000f5c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 1)
80000f60:	fec42703          	lw	a4,-20(s0)
80000f64:	fd442783          	lw	a5,-44(s0)
80000f68:	faf762e3          	bltu	a4,a5,80000f0c <_write+0x60>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:257
        }
    }
    return len;
80000f6c:	fd442783          	lw	a5,-44(s0)
80000f70:	0100006f          	j	80000f80 <_write+0xd4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:261
  }
#endif

  return stub(EBADF);
80000f74:	00900513          	li	a0,9
80000f78:	f05ff0ef          	jal	ra,80000e7c <stub>
80000f7c:	00050793          	mv	a5,a0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:262
}
80000f80:	00078513          	mv	a0,a5
80000f84:	02c12083          	lw	ra,44(sp)
80000f88:	02812403          	lw	s0,40(sp)
80000f8c:	03010113          	addi	sp,sp,48
80000f90:	00008067          	ret

80000f94 <HW_set_32bit_reg>:
HW_set_32bit_reg():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:36
 *
 * a0:   addr_t reg_addr
 * a1:   uint32_t value
 */
HW_set_32bit_reg:
    sw a1, 0(a0)
80000f94:	00b52023          	sw	a1,0(a0) # 44000000 <RAM_SIZE+0x43f80000>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:37
    ret
80000f98:	00008067          	ret

80000f9c <HW_get_32bit_reg>:
HW_get_32bit_reg():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:47
 *
 * R0:   addr_t reg_addr
 * @return          32 bits value read from the peripheral register.
 */
HW_get_32bit_reg:
    lw a0, 0(a0)
80000f9c:	00052503          	lw	a0,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:48
    ret
80000fa0:	00008067          	ret

80000fa4 <HW_set_32bit_reg_field>:
HW_set_32bit_reg_field():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:60
 * a1:   int_fast8_t shift
 * a2:   uint32_t mask
 * a3:   uint32_t value
 */
HW_set_32bit_reg_field:
    mv t3, a3
80000fa4:	00068e13          	mv	t3,a3
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:61
    sll t3, t3, a1
80000fa8:	00be1e33          	sll	t3,t3,a1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:62
    and  t3, t3, a2
80000fac:	00ce7e33          	and	t3,t3,a2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:63
    lw t1, 0(a0)
80000fb0:	00052303          	lw	t1,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:64
    mv t2, a2
80000fb4:	00060393          	mv	t2,a2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:65
    not t2, t2
80000fb8:	fff3c393          	not	t2,t2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:66
    and t1, t1, t2
80000fbc:	00737333          	and	t1,t1,t2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:67
    or t1, t1, t3
80000fc0:	01c36333          	or	t1,t1,t3
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:68
    sw t1, 0(a0)
80000fc4:	00652023          	sw	t1,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:69
    ret
80000fc8:	00008067          	ret

80000fcc <HW_get_32bit_reg_field>:
HW_get_32bit_reg_field():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:83
 *
 * @return          32 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_32bit_reg_field:
    lw a0, 0(a0)
80000fcc:	00052503          	lw	a0,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:84
    and a0, a0, a2
80000fd0:	00c57533          	and	a0,a0,a2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:85
    srl a0, a0, a1
80000fd4:	00b55533          	srl	a0,a0,a1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:86
    ret
80000fd8:	00008067          	ret

80000fdc <HW_set_16bit_reg>:
HW_set_16bit_reg():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:96
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast16_t value
 */
HW_set_16bit_reg:
    sh a1, 0(a0)
80000fdc:	00b51023          	sh	a1,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:97
    ret
80000fe0:	00008067          	ret

80000fe4 <HW_get_16bit_reg>:
HW_get_16bit_reg():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:107
 *
 * a0:   addr_t reg_addr
 * @return          16 bits value read from the peripheral register.
 */
HW_get_16bit_reg:
    lh a0, (a0)
80000fe4:	00051503          	lh	a0,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:108
    ret
80000fe8:	00008067          	ret

80000fec <HW_set_16bit_reg_field>:
HW_set_16bit_reg_field():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:121
 * a2:   uint_fast16_t mask
 * a3:   uint_fast16_t value
 * @param value     Value to be written in the specified field.
 */
HW_set_16bit_reg_field:
    mv t3, a3
80000fec:	00068e13          	mv	t3,a3
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:122
    sll t3, t3, a1
80000ff0:	00be1e33          	sll	t3,t3,a1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:123
    and  t3, t3, a2
80000ff4:	00ce7e33          	and	t3,t3,a2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:124
    lh t1, 0(a0)
80000ff8:	00051303          	lh	t1,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:125
    mv t2, a2
80000ffc:	00060393          	mv	t2,a2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:126
    not t2, t2
80001000:	fff3c393          	not	t2,t2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:127
    and t1, t1, t2
80001004:	00737333          	and	t1,t1,t2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:128
    or t1, t1, t3
80001008:	01c36333          	or	t1,t1,t3
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:129
    sh t1, 0(a0)
8000100c:	00651023          	sh	t1,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:130
    ret
80001010:	00008067          	ret

80001014 <HW_get_16bit_reg_field>:
HW_get_16bit_reg_field():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:144
 *
 * @return          16 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_16bit_reg_field:
    lh a0, 0(a0)
80001014:	00051503          	lh	a0,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:145
    and a0, a0, a2
80001018:	00c57533          	and	a0,a0,a2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:146
    srl a0, a0, a1
8000101c:	00b55533          	srl	a0,a0,a1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:147
    ret
80001020:	00008067          	ret

80001024 <HW_set_8bit_reg>:
HW_set_8bit_reg():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:157
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast8_t value
 */
HW_set_8bit_reg:
    sb a1, 0(a0)
80001024:	00b50023          	sb	a1,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:158
    ret
80001028:	00008067          	ret

8000102c <HW_get_8bit_reg>:
HW_get_8bit_reg():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:168
 *
 * a0:   addr_t reg_addr
 * @return          8 bits value read from the peripheral register.
 */
HW_get_8bit_reg:
    lb a0, 0(a0)
8000102c:	00050503          	lb	a0,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:169
    ret
80001030:	00008067          	ret

80001034 <HW_set_8bit_reg_field>:
HW_set_8bit_reg_field():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:181
 * a1:   int_fast8_t shift
 * a2:   uint_fast8_t mask
 * a3:   uint_fast8_t value
 */
HW_set_8bit_reg_field:
    mv t3, a3
80001034:	00068e13          	mv	t3,a3
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:182
    sll t3, t3, a1
80001038:	00be1e33          	sll	t3,t3,a1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:183
    and  t3, t3, a2
8000103c:	00ce7e33          	and	t3,t3,a2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:184
    lb t1, 0(a0)
80001040:	00050303          	lb	t1,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:185
    mv t2, a2
80001044:	00060393          	mv	t2,a2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:186
    not t2, t2
80001048:	fff3c393          	not	t2,t2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:187
    and t1, t1, t2
8000104c:	00737333          	and	t1,t1,t2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:188
    or t1, t1, t3
80001050:	01c36333          	or	t1,t1,t3
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:189
    sb t1, 0(a0)
80001054:	00650023          	sb	t1,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:190
    ret
80001058:	00008067          	ret

8000105c <HW_get_8bit_reg_field>:
HW_get_8bit_reg_field():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:204
 *
 * @return          8 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_8bit_reg_field:
    lb a0, 0(a0)
8000105c:	00050503          	lb	a0,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:205
    and a0, a0, a2
80001060:	00c57533          	and	a0,a0,a2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:206
    srl a0, a0, a1
80001064:	00b55533          	srl	a0,a0,a1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:207
    ret
80001068:	00008067          	ret

8000106c <UART_init>:
UART_init():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:46
    UART_instance_t * this_uart,
    addr_t base_addr,
    uint16_t baud_value,
    uint8_t line_config
)
{
8000106c:	fd010113          	addi	sp,sp,-48
80001070:	02112623          	sw	ra,44(sp)
80001074:	02812423          	sw	s0,40(sp)
80001078:	03010413          	addi	s0,sp,48
8000107c:	fca42e23          	sw	a0,-36(s0)
80001080:	fcb42c23          	sw	a1,-40(s0)
80001084:	00060793          	mv	a5,a2
80001088:	00068713          	mv	a4,a3
8000108c:	fcf41b23          	sh	a5,-42(s0)
80001090:	00070793          	mv	a5,a4
80001094:	fcf40aa3          	sb	a5,-43(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53
    
    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( line_config <= MAX_LINE_CONFIG )
    HAL_ASSERT( baud_value <= MAX_BAUD_VALUE )

    if( ( this_uart != NULL_INSTANCE ) &&
80001098:	fdc42783          	lw	a5,-36(s0)
8000109c:	0c078a63          	beqz	a5,80001170 <UART_init+0x104>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53 (discriminator 1)
800010a0:	fd544703          	lbu	a4,-43(s0)
800010a4:	00700793          	li	a5,7
800010a8:	0ce7e463          	bltu	a5,a4,80001170 <UART_init+0x104>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:54
        ( line_config <= MAX_LINE_CONFIG ) &&
800010ac:	fd645703          	lhu	a4,-42(s0)
800010b0:	000027b7          	lui	a5,0x2
800010b4:	0af77e63          	bleu	a5,a4,80001170 <UART_init+0x104>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:60
        ( baud_value <= MAX_BAUD_VALUE ) )
    {
        /*
         * Store lower 8-bits of baud value in CTRL1.
         */
        HAL_set_8bit_reg( base_addr, CTRL1, (uint_fast8_t)(baud_value &
800010b8:	fd842783          	lw	a5,-40(s0)
800010bc:	00878713          	addi	a4,a5,8 # 2008 <HEAP_SIZE-0xdff8>
800010c0:	fd645783          	lhu	a5,-42(s0)
800010c4:	0ff7f793          	andi	a5,a5,255
800010c8:	00078593          	mv	a1,a5
800010cc:	00070513          	mv	a0,a4
800010d0:	f55ff0ef          	jal	ra,80001024 <HW_set_8bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:67
    
        /*
         * Extract higher 5-bits of baud value and store in higher 5-bits 
         * of CTRL2, along with line configuration in lower 3 three bits.
         */
        HAL_set_8bit_reg( base_addr, CTRL2, (uint_fast8_t)line_config | 
800010d4:	fd842783          	lw	a5,-40(s0)
800010d8:	00c78693          	addi	a3,a5,12
800010dc:	fd544703          	lbu	a4,-43(s0)
800010e0:	fd645783          	lhu	a5,-42(s0)
800010e4:	4057d793          	srai	a5,a5,0x5
800010e8:	7f87f793          	andi	a5,a5,2040
800010ec:	00f767b3          	or	a5,a4,a5
800010f0:	00078593          	mv	a1,a5
800010f4:	00068513          	mv	a0,a3
800010f8:	f2dff0ef          	jal	ra,80001024 <HW_set_8bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:71
                                           (uint_fast8_t)((baud_value &
                                   BAUDVALUE_MSB) >> BAUDVALUE_SHIFT ) );
    
        this_uart->base_address = base_addr;
800010fc:	fdc42783          	lw	a5,-36(s0)
80001100:	fd842703          	lw	a4,-40(s0)
80001104:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:94
        
        /*
         * Flush the receive FIFO of data that may have been received before the
         * driver was initialized.
         */
        rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001108:	fdc42783          	lw	a5,-36(s0)
8000110c:	0007a783          	lw	a5,0(a5)
80001110:	01078793          	addi	a5,a5,16
80001114:	00078513          	mv	a0,a5
80001118:	f15ff0ef          	jal	ra,8000102c <HW_get_8bit_reg>
8000111c:	00050793          	mv	a5,a0
80001120:	0027f793          	andi	a5,a5,2
80001124:	fef407a3          	sb	a5,-17(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
                                                    STATUS_RXFULL_MASK;
        while ( rx_full )
80001128:	0380006f          	j	80001160 <UART_init+0xf4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:98
        {
            HAL_get_8bit_reg( this_uart->base_address, RXDATA );
8000112c:	fdc42783          	lw	a5,-36(s0)
80001130:	0007a783          	lw	a5,0(a5)
80001134:	00478793          	addi	a5,a5,4
80001138:	00078513          	mv	a0,a5
8000113c:	ef1ff0ef          	jal	ra,8000102c <HW_get_8bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:99
            rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001140:	fdc42783          	lw	a5,-36(s0)
80001144:	0007a783          	lw	a5,0(a5)
80001148:	01078793          	addi	a5,a5,16
8000114c:	00078513          	mv	a0,a5
80001150:	eddff0ef          	jal	ra,8000102c <HW_get_8bit_reg>
80001154:	00050793          	mv	a5,a0
80001158:	0027f793          	andi	a5,a5,2
8000115c:	fef407a3          	sb	a5,-17(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
        while ( rx_full )
80001160:	fef44783          	lbu	a5,-17(s0)
80001164:	fc0794e3          	bnez	a5,8000112c <UART_init+0xc0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:106
        }

        /*
         * Clear status of the UART instance.
         */
        this_uart->status = (uint8_t)0;
80001168:	fdc42783          	lw	a5,-36(s0)
8000116c:	00078223          	sb	zero,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:108
    }
}
80001170:	00000013          	nop
80001174:	02c12083          	lw	ra,44(sp)
80001178:	02812403          	lw	s0,40(sp)
8000117c:	03010113          	addi	sp,sp,48
80001180:	00008067          	ret

80001184 <UART_send>:
UART_send():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:121
(
    UART_instance_t * this_uart,
    const uint8_t * tx_buffer,
    size_t tx_size
)
{
80001184:	fd010113          	addi	sp,sp,-48
80001188:	02112623          	sw	ra,44(sp)
8000118c:	02812423          	sw	s0,40(sp)
80001190:	03010413          	addi	s0,sp,48
80001194:	fca42e23          	sw	a0,-36(s0)
80001198:	fcb42c23          	sw	a1,-40(s0)
8000119c:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( tx_buffer != NULL_BUFFER )
    HAL_ASSERT( tx_size > 0 )
      
    if( (this_uart != NULL_INSTANCE) &&
800011a0:	fdc42783          	lw	a5,-36(s0)
800011a4:	08078063          	beqz	a5,80001224 <UART_send+0xa0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129 (discriminator 1)
800011a8:	fd842783          	lw	a5,-40(s0)
800011ac:	06078c63          	beqz	a5,80001224 <UART_send+0xa0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:130
        (tx_buffer != NULL_BUFFER)   &&
800011b0:	fd442783          	lw	a5,-44(s0)
800011b4:	06078863          	beqz	a5,80001224 <UART_send+0xa0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133
        (tx_size > (size_t)0) )
    {
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
800011b8:	fe042623          	sw	zero,-20(s0)
800011bc:	05c0006f          	j	80001218 <UART_send+0x94>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:137 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
800011c0:	fdc42783          	lw	a5,-36(s0)
800011c4:	0007a783          	lw	a5,0(a5)
800011c8:	01078793          	addi	a5,a5,16
800011cc:	00078513          	mv	a0,a5
800011d0:	e5dff0ef          	jal	ra,8000102c <HW_get_8bit_reg>
800011d4:	00050793          	mv	a5,a0
800011d8:	0017f793          	andi	a5,a5,1
800011dc:	fef405a3          	sb	a5,-21(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:139 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
800011e0:	feb44783          	lbu	a5,-21(s0)
800011e4:	fc078ee3          	beqz	a5,800011c0 <UART_send+0x3c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:141 (discriminator 2)
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
800011e8:	fdc42783          	lw	a5,-36(s0)
800011ec:	0007a683          	lw	a3,0(a5)
800011f0:	fd842703          	lw	a4,-40(s0)
800011f4:	fec42783          	lw	a5,-20(s0)
800011f8:	00f707b3          	add	a5,a4,a5
800011fc:	0007c783          	lbu	a5,0(a5)
80001200:	00078593          	mv	a1,a5
80001204:	00068513          	mv	a0,a3
80001208:	e1dff0ef          	jal	ra,80001024 <HW_set_8bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 2)
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
8000120c:	fec42783          	lw	a5,-20(s0)
80001210:	00178793          	addi	a5,a5,1
80001214:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 1)
80001218:	fec42703          	lw	a4,-20(s0)
8000121c:	fd442783          	lw	a5,-44(s0)
80001220:	faf760e3          	bltu	a4,a5,800011c0 <UART_send+0x3c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:145
                              (uint_fast8_t)tx_buffer[char_idx] );
        }
    }
}
80001224:	00000013          	nop
80001228:	02c12083          	lw	ra,44(sp)
8000122c:	02812403          	lw	s0,40(sp)
80001230:	03010113          	addi	sp,sp,48
80001234:	00008067          	ret

80001238 <UART_polled_tx_string>:
UART_polled_tx_string():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:239
UART_polled_tx_string
( 
    UART_instance_t * this_uart, 
    const uint8_t * p_sz_string
)
{
80001238:	fd010113          	addi	sp,sp,-48
8000123c:	02112623          	sw	ra,44(sp)
80001240:	02812423          	sw	s0,40(sp)
80001244:	03010413          	addi	s0,sp,48
80001248:	fca42e23          	sw	a0,-36(s0)
8000124c:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246
    uint8_t tx_ready;

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( p_sz_string != NULL_BUFFER )
    
    if( ( this_uart != NULL_INSTANCE ) && ( p_sz_string != NULL_BUFFER ) )
80001250:	fdc42783          	lw	a5,-36(s0)
80001254:	08078063          	beqz	a5,800012d4 <UART_polled_tx_string+0x9c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246 (discriminator 1)
80001258:	fd842783          	lw	a5,-40(s0)
8000125c:	06078c63          	beqz	a5,800012d4 <UART_polled_tx_string+0x9c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:248
    {
        char_idx = 0U;
80001260:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
80001264:	05c0006f          	j	800012c0 <UART_polled_tx_string+0x88>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:253 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001268:	fdc42783          	lw	a5,-36(s0)
8000126c:	0007a783          	lw	a5,0(a5)
80001270:	01078793          	addi	a5,a5,16
80001274:	00078513          	mv	a0,a5
80001278:	db5ff0ef          	jal	ra,8000102c <HW_get_8bit_reg>
8000127c:	00050793          	mv	a5,a0
80001280:	0017f793          	andi	a5,a5,1
80001284:	fef405a3          	sb	a5,-21(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:255 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
80001288:	feb44783          	lbu	a5,-21(s0)
8000128c:	fc078ee3          	beqz	a5,80001268 <UART_polled_tx_string+0x30>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:257
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
80001290:	fdc42783          	lw	a5,-36(s0)
80001294:	0007a683          	lw	a3,0(a5)
80001298:	fd842703          	lw	a4,-40(s0)
8000129c:	fec42783          	lw	a5,-20(s0)
800012a0:	00f707b3          	add	a5,a4,a5
800012a4:	0007c783          	lbu	a5,0(a5)
800012a8:	00078593          	mv	a1,a5
800012ac:	00068513          	mv	a0,a3
800012b0:	d75ff0ef          	jal	ra,80001024 <HW_set_8bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:259
                              (uint_fast8_t)p_sz_string[char_idx] );
            char_idx++;
800012b4:	fec42783          	lw	a5,-20(s0)
800012b8:	00178793          	addi	a5,a5,1
800012bc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
800012c0:	fd842703          	lw	a4,-40(s0)
800012c4:	fec42783          	lw	a5,-20(s0)
800012c8:	00f707b3          	add	a5,a4,a5
800012cc:	0007c783          	lbu	a5,0(a5)
800012d0:	f8079ce3          	bnez	a5,80001268 <UART_polled_tx_string+0x30>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:262
        }
    }
}
800012d4:	00000013          	nop
800012d8:	02c12083          	lw	ra,44(sp)
800012dc:	02812403          	lw	s0,40(sp)
800012e0:	03010113          	addi	sp,sp,48
800012e4:	00008067          	ret

800012e8 <pvPortMalloc>:
pvPortMalloc():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:151
}
/*-----------------------------------------------------------*/


void *pvPortMalloc( size_t xWantedSize )
{
800012e8:	fc010113          	addi	sp,sp,-64
800012ec:	02112e23          	sw	ra,60(sp)
800012f0:	02812c23          	sw	s0,56(sp)
800012f4:	04010413          	addi	s0,sp,64
800012f8:	fca42623          	sw	a0,-52(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:154
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
800012fc:	fe042223          	sw	zero,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:156

	vTaskSuspendAll();
80001300:	1ac010ef          	jal	ra,800024ac <vTaskSuspendAll>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:160
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
80001304:	9241a783          	lw	a5,-1756(gp) # 80008aa4 <xHeapHasBeenInitialised.2777>
80001308:	00079863          	bnez	a5,80001318 <pvPortMalloc+0x30>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:162
		{
			prvHeapInit();
8000130c:	284000ef          	jal	ra,80001590 <prvHeapInit>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:163
			xHeapHasBeenInitialised = pdTRUE;
80001310:	00100713          	li	a4,1
80001314:	92e1a223          	sw	a4,-1756(gp) # 80008aa4 <xHeapHasBeenInitialised.2777>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:168
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
80001318:	fcc42783          	lw	a5,-52(s0)
8000131c:	02078a63          	beqz	a5,80001350 <pvPortMalloc+0x68>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:170
		{
			xWantedSize += heapSTRUCT_SIZE;
80001320:	00800793          	li	a5,8
80001324:	00078713          	mv	a4,a5
80001328:	fcc42783          	lw	a5,-52(s0)
8000132c:	00e787b3          	add	a5,a5,a4
80001330:	fcf42623          	sw	a5,-52(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:173

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
80001334:	fcc42783          	lw	a5,-52(s0)
80001338:	0037f793          	andi	a5,a5,3
8000133c:	00078a63          	beqz	a5,80001350 <pvPortMalloc+0x68>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:176
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
80001340:	fcc42783          	lw	a5,-52(s0)
80001344:	ffc7f793          	andi	a5,a5,-4
80001348:	00478793          	addi	a5,a5,4
8000134c:	fcf42623          	sw	a5,-52(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
80001350:	fcc42783          	lw	a5,-52(s0)
80001354:	14078463          	beqz	a5,8000149c <pvPortMalloc+0x1b4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180 (discriminator 1)
80001358:	fcc42703          	lw	a4,-52(s0)
8000135c:	000197b7          	lui	a5,0x19
80001360:	ffb78793          	addi	a5,a5,-5 # 18ffb <HEAP_SIZE+0x8ffb>
80001364:	12e7ec63          	bltu	a5,a4,8000149c <pvPortMalloc+0x1b4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:184
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
80001368:	91418793          	addi	a5,gp,-1772 # 80008a94 <xStart>
8000136c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:185
			pxBlock = xStart.pxNextFreeBlock;
80001370:	9141a783          	lw	a5,-1772(gp) # 80008a94 <xStart>
80001374:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
80001378:	0180006f          	j	80001390 <pvPortMalloc+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:188
			{
				pxPreviousBlock = pxBlock;
8000137c:	fec42783          	lw	a5,-20(s0)
80001380:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:189
				pxBlock = pxBlock->pxNextFreeBlock;
80001384:	fec42783          	lw	a5,-20(s0)
80001388:	0007a783          	lw	a5,0(a5)
8000138c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
80001390:	fec42783          	lw	a5,-20(s0)
80001394:	0047a783          	lw	a5,4(a5)
80001398:	fcc42703          	lw	a4,-52(s0)
8000139c:	00e7f863          	bleu	a4,a5,800013ac <pvPortMalloc+0xc4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186 (discriminator 1)
800013a0:	fec42783          	lw	a5,-20(s0)
800013a4:	0007a783          	lw	a5,0(a5)
800013a8:	fc079ae3          	bnez	a5,8000137c <pvPortMalloc+0x94>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:193
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
800013ac:	fec42703          	lw	a4,-20(s0)
800013b0:	91c18793          	addi	a5,gp,-1764 # 80008a9c <xEnd>
800013b4:	0ef70463          	beq	a4,a5,8000149c <pvPortMalloc+0x1b4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:197
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
800013b8:	fe842783          	lw	a5,-24(s0)
800013bc:	0007a783          	lw	a5,0(a5)
800013c0:	00800713          	li	a4,8
800013c4:	00e787b3          	add	a5,a5,a4
800013c8:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:201

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
800013cc:	fec42783          	lw	a5,-20(s0)
800013d0:	0007a703          	lw	a4,0(a5)
800013d4:	fe842783          	lw	a5,-24(s0)
800013d8:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:204

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
800013dc:	fec42783          	lw	a5,-20(s0)
800013e0:	0047a703          	lw	a4,4(a5)
800013e4:	fcc42783          	lw	a5,-52(s0)
800013e8:	40f707b3          	sub	a5,a4,a5
800013ec:	00800713          	li	a4,8
800013f0:	00171713          	slli	a4,a4,0x1
800013f4:	08f77663          	bleu	a5,a4,80001480 <pvPortMalloc+0x198>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:209
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
800013f8:	fec42703          	lw	a4,-20(s0)
800013fc:	fcc42783          	lw	a5,-52(s0)
80001400:	00f707b3          	add	a5,a4,a5
80001404:	fcf42e23          	sw	a5,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:213

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
80001408:	fec42783          	lw	a5,-20(s0)
8000140c:	0047a703          	lw	a4,4(a5)
80001410:	fcc42783          	lw	a5,-52(s0)
80001414:	40f70733          	sub	a4,a4,a5
80001418:	fdc42783          	lw	a5,-36(s0)
8000141c:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:214
					pxBlock->xBlockSize = xWantedSize;
80001420:	fec42783          	lw	a5,-20(s0)
80001424:	fcc42703          	lw	a4,-52(s0)
80001428:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
8000142c:	fdc42783          	lw	a5,-36(s0)
80001430:	0047a783          	lw	a5,4(a5)
80001434:	fcf42c23          	sw	a5,-40(s0)
80001438:	91418793          	addi	a5,gp,-1772 # 80008a94 <xStart>
8000143c:	fef42023          	sw	a5,-32(s0)
80001440:	0100006f          	j	80001450 <pvPortMalloc+0x168>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 3)
80001444:	fe042783          	lw	a5,-32(s0)
80001448:	0007a783          	lw	a5,0(a5)
8000144c:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 1)
80001450:	fe042783          	lw	a5,-32(s0)
80001454:	0007a783          	lw	a5,0(a5)
80001458:	0047a783          	lw	a5,4(a5)
8000145c:	fd842703          	lw	a4,-40(s0)
80001460:	fee7e2e3          	bltu	a5,a4,80001444 <pvPortMalloc+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 4)
80001464:	fe042783          	lw	a5,-32(s0)
80001468:	0007a703          	lw	a4,0(a5)
8000146c:	fdc42783          	lw	a5,-36(s0)
80001470:	00e7a023          	sw	a4,0(a5)
80001474:	fe042783          	lw	a5,-32(s0)
80001478:	fdc42703          	lw	a4,-36(s0)
8000147c:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:220
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
80001480:	800097b7          	lui	a5,0x80009
80001484:	9807a703          	lw	a4,-1664(a5) # 80008980 <__stack_top+0xfffc5570>
80001488:	fec42783          	lw	a5,-20(s0)
8000148c:	0047a783          	lw	a5,4(a5)
80001490:	40f70733          	sub	a4,a4,a5
80001494:	800097b7          	lui	a5,0x80009
80001498:	98e7a023          	sw	a4,-1664(a5) # 80008980 <__stack_top+0xfffc5570>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:226
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
8000149c:	038010ef          	jal	ra,800024d4 <xTaskResumeAll>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:230

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
800014a0:	fe442783          	lw	a5,-28(s0)
800014a4:	00079463          	bnez	a5,800014ac <pvPortMalloc+0x1c4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:233
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
800014a8:	0bd060ef          	jal	ra,80007d64 <vApplicationMallocFailedHook>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:238
		}
	}
	#endif

	return pvReturn;
800014ac:	fe442783          	lw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:239
}
800014b0:	00078513          	mv	a0,a5
800014b4:	03c12083          	lw	ra,60(sp)
800014b8:	03812403          	lw	s0,56(sp)
800014bc:	04010113          	addi	sp,sp,64
800014c0:	00008067          	ret

800014c4 <vPortFree>:
vPortFree():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:243
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
800014c4:	fd010113          	addi	sp,sp,-48
800014c8:	02112623          	sw	ra,44(sp)
800014cc:	02812423          	sw	s0,40(sp)
800014d0:	03010413          	addi	s0,sp,48
800014d4:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:244
uint8_t *puc = ( uint8_t * ) pv;
800014d8:	fdc42783          	lw	a5,-36(s0)
800014dc:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:247
BlockLink_t *pxLink;

	if( pv != NULL )
800014e0:	fdc42783          	lw	a5,-36(s0)
800014e4:	08078c63          	beqz	a5,8000157c <vPortFree+0xb8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:251
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
800014e8:	00800793          	li	a5,8
800014ec:	40f007b3          	neg	a5,a5
800014f0:	fe842703          	lw	a4,-24(s0)
800014f4:	00f707b3          	add	a5,a4,a5
800014f8:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:255

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
800014fc:	fe842783          	lw	a5,-24(s0)
80001500:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:257

		vTaskSuspendAll();
80001504:	7a9000ef          	jal	ra,800024ac <vTaskSuspendAll>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
80001508:	fe442783          	lw	a5,-28(s0)
8000150c:	0047a783          	lw	a5,4(a5)
80001510:	fef42023          	sw	a5,-32(s0)
80001514:	91418793          	addi	a5,gp,-1772 # 80008a94 <xStart>
80001518:	fef42623          	sw	a5,-20(s0)
8000151c:	0100006f          	j	8000152c <vPortFree+0x68>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 3)
80001520:	fec42783          	lw	a5,-20(s0)
80001524:	0007a783          	lw	a5,0(a5)
80001528:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 1)
8000152c:	fec42783          	lw	a5,-20(s0)
80001530:	0007a783          	lw	a5,0(a5)
80001534:	0047a783          	lw	a5,4(a5)
80001538:	fe042703          	lw	a4,-32(s0)
8000153c:	fee7e2e3          	bltu	a5,a4,80001520 <vPortFree+0x5c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 4)
80001540:	fec42783          	lw	a5,-20(s0)
80001544:	0007a703          	lw	a4,0(a5)
80001548:	fe442783          	lw	a5,-28(s0)
8000154c:	00e7a023          	sw	a4,0(a5)
80001550:	fec42783          	lw	a5,-20(s0)
80001554:	fe442703          	lw	a4,-28(s0)
80001558:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:261 (discriminator 4)
			xFreeBytesRemaining += pxLink->xBlockSize;
8000155c:	fe442783          	lw	a5,-28(s0)
80001560:	0047a703          	lw	a4,4(a5)
80001564:	800097b7          	lui	a5,0x80009
80001568:	9807a783          	lw	a5,-1664(a5) # 80008980 <__stack_top+0xfffc5570>
8000156c:	00f70733          	add	a4,a4,a5
80001570:	800097b7          	lui	a5,0x80009
80001574:	98e7a023          	sw	a4,-1664(a5) # 80008980 <__stack_top+0xfffc5570>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:264 (discriminator 4)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
80001578:	75d000ef          	jal	ra,800024d4 <xTaskResumeAll>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:266
	}
}
8000157c:	00000013          	nop
80001580:	02c12083          	lw	ra,44(sp)
80001584:	02812403          	lw	s0,40(sp)
80001588:	03010113          	addi	sp,sp,48
8000158c:	00008067          	ret

80001590 <prvHeapInit>:
prvHeapInit():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:282
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
80001590:	fe010113          	addi	sp,sp,-32
80001594:	00812e23          	sw	s0,28(sp)
80001598:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:287
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
8000159c:	800097b7          	lui	a5,0x80009
800015a0:	b2478793          	addi	a5,a5,-1244 # 80008b24 <__stack_top+0xfffc5714>
800015a4:	ffc7f793          	andi	a5,a5,-4
800015a8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:291

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
800015ac:	fec42703          	lw	a4,-20(s0)
800015b0:	90e1aa23          	sw	a4,-1772(gp) # 80008a94 <xStart>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:292
	xStart.xBlockSize = ( size_t ) 0;
800015b4:	91418793          	addi	a5,gp,-1772 # 80008a94 <xStart>
800015b8:	0007a223          	sw	zero,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:295

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
800015bc:	91c18793          	addi	a5,gp,-1764 # 80008a9c <xEnd>
800015c0:	00019737          	lui	a4,0x19
800015c4:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
800015c8:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:296
	xEnd.pxNextFreeBlock = NULL;
800015cc:	9001ae23          	sw	zero,-1764(gp) # 80008a9c <xEnd>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:300

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
800015d0:	fec42783          	lw	a5,-20(s0)
800015d4:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:301
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
800015d8:	fe842783          	lw	a5,-24(s0)
800015dc:	00019737          	lui	a4,0x19
800015e0:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
800015e4:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:302
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
800015e8:	fe842783          	lw	a5,-24(s0)
800015ec:	91c18713          	addi	a4,gp,-1764 # 80008a9c <xEnd>
800015f0:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:303
}
800015f4:	00000013          	nop
800015f8:	01c12403          	lw	s0,28(sp)
800015fc:	02010113          	addi	sp,sp,32
80001600:	00008067          	ret

80001604 <raise_soft_interrupt>:
raise_soft_interrupt():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:227
/*==============================================================================
 * The function raise_soft_interrupt() raises a synchronous software interrupt by
 * writing into the MSIP register.
 */
static inline void raise_soft_interrupt()
{
80001604:	fe010113          	addi	sp,sp,-32
80001608:	00812e23          	sw	s0,28(sp)
8000160c:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:228
    unsigned long hart_id = read_csr(mhartid);
80001610:	f14027f3          	csrr	a5,mhartid
80001614:	fef42623          	sw	a5,-20(s0)
80001618:	fec42783          	lw	a5,-20(s0)
8000161c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:231

    /*You need to make sure that the global interrupt is enabled*/
    set_csr(mie, MIP_MSIP);       /*Enable software interrupt bit */
80001620:	304467f3          	csrrsi	a5,mie,8
80001624:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:232
    PRCI->MSIP[hart_id] = 0x01;   /*raise soft interrupt for hart0*/
80001628:	44000737          	lui	a4,0x44000
8000162c:	fe842783          	lw	a5,-24(s0)
80001630:	00279793          	slli	a5,a5,0x2
80001634:	00f707b3          	add	a5,a4,a5
80001638:	00100713          	li	a4,1
8000163c:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:233
}
80001640:	00000013          	nop
80001644:	01c12403          	lw	s0,28(sp)
80001648:	02010113          	addi	sp,sp,32
8000164c:	00008067          	ret

80001650 <vPortEnterCritical>:
vPortEnterCritical():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:132
 * Used to catch tasks that attempt to return from their implementing function.
 */
static void prvTaskExitError( void );

void vPortEnterCritical( void )
{
80001650:	ff010113          	addi	sp,sp,-16
80001654:	00812623          	sw	s0,12(sp)
80001658:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:133
	portDISABLE_INTERRUPTS();
8000165c:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:134
	uxCriticalNesting++;
80001660:	800097b7          	lui	a5,0x80009
80001664:	9847a783          	lw	a5,-1660(a5) # 80008984 <__stack_top+0xfffc5574>
80001668:	00178713          	addi	a4,a5,1
8000166c:	800097b7          	lui	a5,0x80009
80001670:	98e7a223          	sw	a4,-1660(a5) # 80008984 <__stack_top+0xfffc5574>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:135
}
80001674:	00000013          	nop
80001678:	00c12403          	lw	s0,12(sp)
8000167c:	01010113          	addi	sp,sp,16
80001680:	00008067          	ret

80001684 <vPortExitCritical>:
vPortExitCritical():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:139
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
80001684:	ff010113          	addi	sp,sp,-16
80001688:	00812623          	sw	s0,12(sp)
8000168c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:140
	uxCriticalNesting--;
80001690:	800097b7          	lui	a5,0x80009
80001694:	9847a783          	lw	a5,-1660(a5) # 80008984 <__stack_top+0xfffc5574>
80001698:	fff78713          	addi	a4,a5,-1
8000169c:	800097b7          	lui	a5,0x80009
800016a0:	98e7a223          	sw	a4,-1660(a5) # 80008984 <__stack_top+0xfffc5574>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:141
	if( uxCriticalNesting == 0 )
800016a4:	800097b7          	lui	a5,0x80009
800016a8:	9847a783          	lw	a5,-1660(a5) # 80008984 <__stack_top+0xfffc5574>
800016ac:	00079463          	bnez	a5,800016b4 <vPortExitCritical+0x30>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:143
	{
		portENABLE_INTERRUPTS();
800016b0:	30046073          	csrsi	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:145
	}
}
800016b4:	00000013          	nop
800016b8:	00c12403          	lw	s0,12(sp)
800016bc:	01010113          	addi	sp,sp,16
800016c0:	00008067          	ret

800016c4 <prvSetNextTimerInterrupt>:
prvSetNextTimerInterrupt():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:151
/*-----------------------------------------------------------*/

/* Sets the next timer interrupt
 * Reads previous timer compare register, and adds tickrate */
static void prvSetNextTimerInterrupt(void)
{
800016c4:	fe010113          	addi	sp,sp,-32
800016c8:	00812e23          	sw	s0,28(sp)
800016cc:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:154
	uint64_t time;

	time = mtime->val_low;
800016d0:	80009637          	lui	a2,0x80009
800016d4:	98862603          	lw	a2,-1656(a2) # 80008988 <__stack_top+0xfffc5578>
800016d8:	00062603          	lw	a2,0(a2)
800016dc:	fec42423          	sw	a2,-24(s0)
800016e0:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:155
	time |= ((uint64_t)mtime->val_high << 32);
800016e4:	80009637          	lui	a2,0x80009
800016e8:	98862603          	lw	a2,-1656(a2) # 80008988 <__stack_top+0xfffc5578>
800016ec:	00462603          	lw	a2,4(a2)
800016f0:	00060693          	mv	a3,a2
800016f4:	00000713          	li	a4,0
800016f8:	00069813          	slli	a6,a3,0x0
800016fc:	00000793          	li	a5,0
80001700:	fe842703          	lw	a4,-24(s0)
80001704:	00f76733          	or	a4,a4,a5
80001708:	fee42423          	sw	a4,-24(s0)
8000170c:	fec42703          	lw	a4,-20(s0)
80001710:	010767b3          	or	a5,a4,a6
80001714:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:157

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
80001718:	fe842683          	lw	a3,-24(s0)
8000171c:	fec42703          	lw	a4,-20(s0)
80001720:	000185b7          	lui	a1,0x18
80001724:	6a058593          	addi	a1,a1,1696 # 186a0 <HEAP_SIZE+0x86a0>
80001728:	00000613          	li	a2,0
8000172c:	00b687b3          	add	a5,a3,a1
80001730:	00078513          	mv	a0,a5
80001734:	00d53533          	sltu	a0,a0,a3
80001738:	00c70833          	add	a6,a4,a2
8000173c:	01050733          	add	a4,a0,a6
80001740:	00070813          	mv	a6,a4
80001744:	fef42423          	sw	a5,-24(s0)
80001748:	ff042623          	sw	a6,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:159

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
8000174c:	800097b7          	lui	a5,0x80009
80001750:	98c7a783          	lw	a5,-1652(a5) # 8000898c <__stack_top+0xfffc557c>
80001754:	fe842703          	lw	a4,-24(s0)
80001758:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:160
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
8000175c:	fec42783          	lw	a5,-20(s0)
80001760:	0007d313          	srli	t1,a5,0x0
80001764:	00000393          	li	t2,0
80001768:	800097b7          	lui	a5,0x80009
8000176c:	98c7a783          	lw	a5,-1652(a5) # 8000898c <__stack_top+0xfffc557c>
80001770:	00030713          	mv	a4,t1
80001774:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:163

	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
80001778:	08000793          	li	a5,128
8000177c:	3047a073          	csrs	mie,a5
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:164
}
80001780:	00000013          	nop
80001784:	01c12403          	lw	s0,28(sp)
80001788:	02010113          	addi	sp,sp,32
8000178c:	00008067          	ret

80001790 <vPortSetupTimer>:
vPortSetupTimer():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:169
/*-----------------------------------------------------------*/

/* Sets and enable the timer interrupt */
void vPortSetupTimer(void)
{
80001790:	fe010113          	addi	sp,sp,-32
80001794:	00812e23          	sw	s0,28(sp)
80001798:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:172
	uint64_t time;

	time = mtime->val_low;
8000179c:	80009637          	lui	a2,0x80009
800017a0:	98862603          	lw	a2,-1656(a2) # 80008988 <__stack_top+0xfffc5578>
800017a4:	00062603          	lw	a2,0(a2)
800017a8:	fec42423          	sw	a2,-24(s0)
800017ac:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:173
	time |= ((uint64_t)mtime->val_high << 32);
800017b0:	80009637          	lui	a2,0x80009
800017b4:	98862603          	lw	a2,-1656(a2) # 80008988 <__stack_top+0xfffc5578>
800017b8:	00462603          	lw	a2,4(a2)
800017bc:	00060693          	mv	a3,a2
800017c0:	00000713          	li	a4,0
800017c4:	00069813          	slli	a6,a3,0x0
800017c8:	00000793          	li	a5,0
800017cc:	fe842703          	lw	a4,-24(s0)
800017d0:	00f76733          	or	a4,a4,a5
800017d4:	fee42423          	sw	a4,-24(s0)
800017d8:	fec42703          	lw	a4,-20(s0)
800017dc:	010767b3          	or	a5,a4,a6
800017e0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:175

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
800017e4:	fe842683          	lw	a3,-24(s0)
800017e8:	fec42703          	lw	a4,-20(s0)
800017ec:	000185b7          	lui	a1,0x18
800017f0:	6a058593          	addi	a1,a1,1696 # 186a0 <HEAP_SIZE+0x86a0>
800017f4:	00000613          	li	a2,0
800017f8:	00b687b3          	add	a5,a3,a1
800017fc:	00078513          	mv	a0,a5
80001800:	00d53533          	sltu	a0,a0,a3
80001804:	00c70833          	add	a6,a4,a2
80001808:	01050733          	add	a4,a0,a6
8000180c:	00070813          	mv	a6,a4
80001810:	fef42423          	sw	a5,-24(s0)
80001814:	ff042623          	sw	a6,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:177

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
80001818:	800097b7          	lui	a5,0x80009
8000181c:	98c7a783          	lw	a5,-1652(a5) # 8000898c <__stack_top+0xfffc557c>
80001820:	fe842703          	lw	a4,-24(s0)
80001824:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:178
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
80001828:	fec42783          	lw	a5,-20(s0)
8000182c:	0007d313          	srli	t1,a5,0x0
80001830:	00000393          	li	t2,0
80001834:	800097b7          	lui	a5,0x80009
80001838:	98c7a783          	lw	a5,-1652(a5) # 8000898c <__stack_top+0xfffc557c>
8000183c:	00030713          	mv	a4,t1
80001840:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:182


	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
80001844:	08000793          	li	a5,128
80001848:	3047a073          	csrs	mie,a5
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:183
}
8000184c:	00000013          	nop
80001850:	01c12403          	lw	s0,28(sp)
80001854:	02010113          	addi	sp,sp,32
80001858:	00008067          	ret

8000185c <prvTaskExitError>:
prvTaskExitError():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:187
/*-----------------------------------------------------------*/

void prvTaskExitError( void )
{
8000185c:	ff010113          	addi	sp,sp,-16
80001860:	00812623          	sw	s0,12(sp)
80001864:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
80001868:	800097b7          	lui	a5,0x80009
8000186c:	9847a703          	lw	a4,-1660(a5) # 80008984 <__stack_top+0xfffc5574>
80001870:	fff00793          	li	a5,-1
80001874:	00f70663          	beq	a4,a5,80001880 <prvTaskExitError+0x24>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194 (discriminator 1)
80001878:	30047073          	csrci	mstatus,8
8000187c:	0000006f          	j	8000187c <prvTaskExitError+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:195
	portDISABLE_INTERRUPTS();
80001880:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:196 (discriminator 2)
	for( ;; );
80001884:	0000006f          	j	80001884 <prvTaskExitError+0x28>

80001888 <pxPortInitialiseStack>:
pxPortInitialiseStack():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:220

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
80001888:	fe010113          	addi	sp,sp,-32
8000188c:	00812e23          	sw	s0,28(sp)
80001890:	02010413          	addi	s0,sp,32
80001894:	fea42623          	sw	a0,-20(s0)
80001898:	feb42423          	sw	a1,-24(s0)
8000189c:	fec42223          	sw	a2,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:224
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	register int *tp asm("x3");
	pxTopOfStack--;
800018a0:	fec42783          	lw	a5,-20(s0)
800018a4:	ffc78793          	addi	a5,a5,-4
800018a8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:225
	*pxTopOfStack = (portSTACK_TYPE)pxCode;			/* Start address */
800018ac:	fe842703          	lw	a4,-24(s0)
800018b0:	fec42783          	lw	a5,-20(s0)
800018b4:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:226
	pxTopOfStack -= 22;
800018b8:	fec42783          	lw	a5,-20(s0)
800018bc:	fa878793          	addi	a5,a5,-88
800018c0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:227
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;	/* Register a0 */
800018c4:	fe442703          	lw	a4,-28(s0)
800018c8:	fec42783          	lw	a5,-20(s0)
800018cc:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:228
	pxTopOfStack -= 6;
800018d0:	fec42783          	lw	a5,-20(s0)
800018d4:	fe878793          	addi	a5,a5,-24
800018d8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:229
	*pxTopOfStack = (portSTACK_TYPE)tp; /* Register thread pointer */
800018dc:	00018793          	mv	a5,gp
800018e0:	00078713          	mv	a4,a5
800018e4:	fec42783          	lw	a5,-20(s0)
800018e8:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:230
	pxTopOfStack -= 3;
800018ec:	fec42783          	lw	a5,-20(s0)
800018f0:	ff478793          	addi	a5,a5,-12
800018f4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:231
	*pxTopOfStack = (portSTACK_TYPE)prvTaskExitError; /* Register ra */
800018f8:	800027b7          	lui	a5,0x80002
800018fc:	85c78713          	addi	a4,a5,-1956 # 8000185c <__stack_top+0xfffbe44c>
80001900:	fec42783          	lw	a5,-20(s0)
80001904:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:233

	return pxTopOfStack;
80001908:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:234
}
8000190c:	00078513          	mv	a0,a5
80001910:	01c12403          	lw	s0,28(sp)
80001914:	02010113          	addi	sp,sp,32
80001918:	00008067          	ret

8000191c <SysTick_Handler>:
SysTick_Handler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:238
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void )
{
8000191c:	ff010113          	addi	sp,sp,-16
80001920:	00112623          	sw	ra,12(sp)
80001924:	00812423          	sw	s0,8(sp)
80001928:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:241
	/*Save Context*/
	{
		__asm volatile("lw	t0, pxCurrentTCB");
8000192c:	92c1a283          	lw	t0,-1748(gp) # 80008aac <pxCurrentTCB>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:242
		__asm volatile("sw	a2, 0x0(t0)");
80001930:	00c2a023          	sw	a2,0(t0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:246
	}

	/* Increment the RTOS tick. */
	prvSetNextTimerInterrupt();
80001934:	d91ff0ef          	jal	ra,800016c4 <prvSetNextTimerInterrupt>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:249

	/*Switch task */
	if( xTaskIncrementTick() != pdFALSE )
80001938:	535000ef          	jal	ra,8000266c <xTaskIncrementTick>
8000193c:	00050793          	mv	a5,a0
80001940:	00078463          	beqz	a5,80001948 <SysTick_Handler+0x2c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:251
	{
		vTaskSwitchContext();
80001944:	715000ef          	jal	ra,80002858 <vTaskSwitchContext>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:256
	}

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
80001948:	92c1a103          	lw	sp,-1748(gp) # 80008aac <pxCurrentTCB>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:257
		__asm volatile("lw	sp, 0x0(sp)");
8000194c:	00012103          	lw	sp,0(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:259

		__asm volatile("lw	t0, 31 * 4(sp)");
80001950:	07c12283          	lw	t0,124(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:260
		__asm volatile("csrw	mepc, t0");
80001954:	34129073          	csrw	mepc,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:263

		// Added by Iaçanã
		__asm volatile("lui	t0, 0x2");
80001958:	000022b7          	lui	t0,0x2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:264
  		__asm volatile("addi t0,t0,-2048");
8000195c:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:265
		__asm volatile("csrs mstatus,t0");
80001960:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:267

		__asm volatile("lw	t0, 32 * 4(sp)");
80001964:	08012283          	lw	t0,128(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:268
		__asm volatile("slli t0, t0, 0x4");
80001968:	00429293          	slli	t0,t0,0x4
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:269
		__asm volatile("csrs mstatus, t0");
8000196c:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:271

		__asm volatile("lw	x1, 0x0(sp)");
80001970:	00012083          	lw	ra,0(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:272
		__asm volatile("lw   x4, 3 * 4(sp)");
80001974:	00c12203          	lw	tp,12(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:273
		__asm volatile("lw   x5, 4 * 4(sp)");
80001978:	01012283          	lw	t0,16(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:274
		__asm volatile("lw   x6, 5 * 4(sp)");
8000197c:	01412303          	lw	t1,20(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:275
		__asm volatile("lw   x7, 6 * 4(sp)");
80001980:	01812383          	lw	t2,24(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:276
		__asm volatile("lw   x8, 7 * 4(sp)");
80001984:	01c12403          	lw	s0,28(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:277
		__asm volatile("lw   x9, 8 * 4(sp)");
80001988:	02012483          	lw	s1,32(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:278
		__asm volatile("lw   x10, 9 * 4(sp)");
8000198c:	02412503          	lw	a0,36(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:279
		__asm volatile("lw   x11, 10 * 4(sp)");
80001990:	02812583          	lw	a1,40(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:280
		__asm volatile("lw   x12, 11 * 4(sp)");
80001994:	02c12603          	lw	a2,44(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:281
		__asm volatile("lw   x13, 12 * 4(sp)");
80001998:	03012683          	lw	a3,48(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:282
		__asm volatile("lw   x14, 13 * 4(sp)");
8000199c:	03412703          	lw	a4,52(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:283
		__asm volatile("lw   x15, 14 * 4(sp)");
800019a0:	03812783          	lw	a5,56(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:284
		__asm volatile("lw   x16, 15 * 4(sp)");
800019a4:	03c12803          	lw	a6,60(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:285
		__asm volatile("lw   x17, 16 * 4(sp)");
800019a8:	04012883          	lw	a7,64(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:286
		__asm volatile("lw   x18, 17 * 4(sp)");
800019ac:	04412903          	lw	s2,68(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:287
		__asm volatile("lw   x19, 18 * 4(sp)");
800019b0:	04812983          	lw	s3,72(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:288
		__asm volatile("lw   x20, 19 * 4(sp)");
800019b4:	04c12a03          	lw	s4,76(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:289
		__asm volatile("lw   x21, 20 * 4(sp)");
800019b8:	05012a83          	lw	s5,80(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:290
		__asm volatile("lw   x22, 21 * 4(sp)");
800019bc:	05412b03          	lw	s6,84(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:291
		__asm volatile("lw   x23, 22 * 4(sp)");
800019c0:	05812b83          	lw	s7,88(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:292
		__asm volatile("lw   x24, 23 * 4(sp)");
800019c4:	05c12c03          	lw	s8,92(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:293
		__asm volatile("lw   x25, 24 * 4(sp)");
800019c8:	06012c83          	lw	s9,96(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:294
		__asm volatile("lw   x26, 25 * 4(sp)");
800019cc:	06412d03          	lw	s10,100(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:295
		__asm volatile("lw   x27, 26 * 4(sp)");
800019d0:	06812d83          	lw	s11,104(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:296
		__asm volatile("lw   x28, 27 * 4(sp)");
800019d4:	06c12e03          	lw	t3,108(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:297
		__asm volatile("lw   x29, 28 * 4(sp)");
800019d8:	07012e83          	lw	t4,112(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:298
		__asm volatile("lw   x30, 29 * 4(sp)");
800019dc:	07412f03          	lw	t5,116(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:299
		__asm volatile("lw   x31, 30 * 4(sp)");
800019e0:	07812f83          	lw	t6,120(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:301

		__asm volatile("addi	sp, sp, 4 * 33");
800019e4:	08410113          	addi	sp,sp,132
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:303

		__asm volatile("mret");
800019e8:	30200073          	mret
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:305
	}
}
800019ec:	00000013          	nop
800019f0:	00c12083          	lw	ra,12(sp)
800019f4:	00812403          	lw	s0,8(sp)
800019f8:	01010113          	addi	sp,sp,16
800019fc:	00008067          	ret

80001a00 <xPortStartScheduler>:
xPortStartScheduler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:308
uint32_t g_startscheduler = 0;
BaseType_t xPortStartScheduler( void )
{
80001a00:	ff010113          	addi	sp,sp,-16
80001a04:	00112623          	sw	ra,12(sp)
80001a08:	00812423          	sw	s0,8(sp)
80001a0c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:309
	vPortSetupTimer();
80001a10:	d81ff0ef          	jal	ra,80001790 <vPortSetupTimer>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:310
	uxCriticalNesting = 0;
80001a14:	800097b7          	lui	a5,0x80009
80001a18:	9807a223          	sw	zero,-1660(a5) # 80008984 <__stack_top+0xfffc5574>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:311
	g_startscheduler = 1;
80001a1c:	00100713          	li	a4,1
80001a20:	92e1a423          	sw	a4,-1752(gp) # 80008aa8 <g_startscheduler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:312
	__enable_irq();
80001a24:	97dfe0ef          	jal	ra,800003a0 <__enable_irq>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:314

	raise_soft_interrupt();
80001a28:	bddff0ef          	jal	ra,80001604 <raise_soft_interrupt>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:317

	/*Should not get here*/
	return pdFALSE;
80001a2c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:318
}
80001a30:	00078513          	mv	a0,a5
80001a34:	00c12083          	lw	ra,12(sp)
80001a38:	00812403          	lw	s0,8(sp)
80001a3c:	01010113          	addi	sp,sp,16
80001a40:	00008067          	ret

80001a44 <Software_IRQHandler>:
Software_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:321

void Software_IRQHandler(void)
{
80001a44:	ff010113          	addi	sp,sp,-16
80001a48:	00112623          	sw	ra,12(sp)
80001a4c:	00812423          	sw	s0,8(sp)
80001a50:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:322
	if(1 == g_startscheduler)
80001a54:	9281a703          	lw	a4,-1752(gp) # 80008aa8 <g_startscheduler>
80001a58:	00100793          	li	a5,1
80001a5c:	00f71863          	bne	a4,a5,80001a6c <Software_IRQHandler+0x28>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:324
	{
		g_startscheduler = 2; //skip the save n switch context first time when scheduler is starting.
80001a60:	00200713          	li	a4,2
80001a64:	92e1a423          	sw	a4,-1752(gp) # 80008aa8 <g_startscheduler>
80001a68:	0100006f          	j	80001a78 <Software_IRQHandler+0x34>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:330
	}
	else
	{
		/*Save Context*/
		{
			__asm volatile("lw	t0, pxCurrentTCB");
80001a6c:	92c1a283          	lw	t0,-1748(gp) # 80008aac <pxCurrentTCB>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:331
			__asm volatile("sw	a2, 0x0(t0)");
80001a70:	00c2a023          	sw	a2,0(t0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:334
		}

		vTaskSwitchContext();
80001a74:	5e5000ef          	jal	ra,80002858 <vTaskSwitchContext>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:338
	}

	// Moved by Imperas (was previously causing corruption of a5)
	PRCI->MSIP[0] = 0x00;
80001a78:	440007b7          	lui	a5,0x44000
80001a7c:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:342

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
80001a80:	92c1a103          	lw	sp,-1748(gp) # 80008aac <pxCurrentTCB>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:343
		__asm volatile("lw	sp, 0x0(sp)");
80001a84:	00012103          	lw	sp,0(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:345

		__asm volatile("lw	t0, 31 * 4(sp)");
80001a88:	07c12283          	lw	t0,124(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:346
		__asm volatile("csrw	mepc, t0");
80001a8c:	34129073          	csrw	mepc,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:349

		// Added by Iaçanã
		__asm volatile("lui	t0, 0x2");
80001a90:	000022b7          	lui	t0,0x2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:350
  		__asm volatile("addi t0,t0,-2048");
80001a94:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:351
		__asm volatile("csrs mstatus,t0");
80001a98:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:353

		__asm volatile("lw	t0, 32 * 4(sp)");
80001a9c:	08012283          	lw	t0,128(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:354
		__asm volatile("slli t0, t0, 0x4");
80001aa0:	00429293          	slli	t0,t0,0x4
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:355
		__asm volatile("csrs mstatus, t0");
80001aa4:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:357

		__asm volatile("lw	x1, 0x0(sp)");
80001aa8:	00012083          	lw	ra,0(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:358
		__asm volatile("lw   x4, 3 * 4(sp)");
80001aac:	00c12203          	lw	tp,12(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:359
		__asm volatile("lw   x5, 4 * 4(sp)");
80001ab0:	01012283          	lw	t0,16(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:360
		__asm volatile("lw   x6, 5 * 4(sp)");
80001ab4:	01412303          	lw	t1,20(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:361
		__asm volatile("lw   x7, 6 * 4(sp)");
80001ab8:	01812383          	lw	t2,24(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:362
		__asm volatile("lw   x8, 7 * 4(sp)");
80001abc:	01c12403          	lw	s0,28(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:363
		__asm volatile("lw   x9, 8 * 4(sp)");
80001ac0:	02012483          	lw	s1,32(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:364
		__asm volatile("lw   x10, 9 * 4(sp)");
80001ac4:	02412503          	lw	a0,36(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:365
		__asm volatile("lw   x11, 10 * 4(sp)");
80001ac8:	02812583          	lw	a1,40(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:366
		__asm volatile("lw   x12, 11 * 4(sp)");
80001acc:	02c12603          	lw	a2,44(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:367
		__asm volatile("lw   x13, 12 * 4(sp)");
80001ad0:	03012683          	lw	a3,48(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:368
		__asm volatile("lw   x14, 13 * 4(sp)");
80001ad4:	03412703          	lw	a4,52(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:369
		__asm volatile("lw   x15, 14 * 4(sp)");
80001ad8:	03812783          	lw	a5,56(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:370
		__asm volatile("lw   x16, 15 * 4(sp)");
80001adc:	03c12803          	lw	a6,60(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:371
		__asm volatile("lw   x17, 16 * 4(sp)");
80001ae0:	04012883          	lw	a7,64(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:372
		__asm volatile("lw   x18, 17 * 4(sp)");
80001ae4:	04412903          	lw	s2,68(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:373
		__asm volatile("lw   x19, 18 * 4(sp)");
80001ae8:	04812983          	lw	s3,72(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:374
		__asm volatile("lw   x20, 19 * 4(sp)");
80001aec:	04c12a03          	lw	s4,76(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:375
		__asm volatile("lw   x21, 20 * 4(sp)");
80001af0:	05012a83          	lw	s5,80(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:376
		__asm volatile("lw   x22, 21 * 4(sp)");
80001af4:	05412b03          	lw	s6,84(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:377
		__asm volatile("lw   x23, 22 * 4(sp)");
80001af8:	05812b83          	lw	s7,88(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:378
		__asm volatile("lw   x24, 23 * 4(sp)");
80001afc:	05c12c03          	lw	s8,92(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:379
		__asm volatile("lw   x25, 24 * 4(sp)");
80001b00:	06012c83          	lw	s9,96(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:380
		__asm volatile("lw   x26, 25 * 4(sp)");
80001b04:	06412d03          	lw	s10,100(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:381
		__asm volatile("lw   x27, 26 * 4(sp)");
80001b08:	06812d83          	lw	s11,104(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:382
		__asm volatile("lw   x28, 27 * 4(sp)");
80001b0c:	06c12e03          	lw	t3,108(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:383
		__asm volatile("lw   x29, 28 * 4(sp)");
80001b10:	07012e83          	lw	t4,112(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:384
		__asm volatile("lw   x30, 29 * 4(sp)");
80001b14:	07412f03          	lw	t5,116(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:385
		__asm volatile("lw   x31, 30 * 4(sp)");
80001b18:	07812f83          	lw	t6,120(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:387

		__asm volatile("addi	sp, sp, 4 * 33");
80001b1c:	08410113          	addi	sp,sp,132
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:392

	    // Moved by Imperas (causing corruption of a5 at this position)
		//PRCI->MSIP[0] = 0x00;

		__asm volatile("mret");
80001b20:	30200073          	mret
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:394
	}
}
80001b24:	00000013          	nop
80001b28:	00c12083          	lw	ra,12(sp)
80001b2c:	00812403          	lw	s0,8(sp)
80001b30:	01010113          	addi	sp,sp,16
80001b34:	00008067          	ret

80001b38 <vPortYield>:
vPortYield():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:397

void vPortYield( void )
{
80001b38:	ff010113          	addi	sp,sp,-16
80001b3c:	00112623          	sw	ra,12(sp)
80001b40:	00812423          	sw	s0,8(sp)
80001b44:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:398
	raise_soft_interrupt();
80001b48:	abdff0ef          	jal	ra,80001604 <raise_soft_interrupt>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:399
}
80001b4c:	00000013          	nop
80001b50:	00c12083          	lw	ra,12(sp)
80001b54:	00812403          	lw	s0,8(sp)
80001b58:	01010113          	addi	sp,sp,16
80001b5c:	00008067          	ret

80001b60 <vListInitialise>:
vListInitialise():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:80
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
80001b60:	fe010113          	addi	sp,sp,-32
80001b64:	00812e23          	sw	s0,28(sp)
80001b68:	02010413          	addi	s0,sp,32
80001b6c:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:84
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001b70:	fec42783          	lw	a5,-20(s0)
80001b74:	00878713          	addi	a4,a5,8
80001b78:	fec42783          	lw	a5,-20(s0)
80001b7c:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:88

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
80001b80:	fec42783          	lw	a5,-20(s0)
80001b84:	fff00713          	li	a4,-1
80001b88:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:92

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001b8c:	fec42783          	lw	a5,-20(s0)
80001b90:	00878713          	addi	a4,a5,8
80001b94:	fec42783          	lw	a5,-20(s0)
80001b98:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:93
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001b9c:	fec42783          	lw	a5,-20(s0)
80001ba0:	00878713          	addi	a4,a5,8
80001ba4:	fec42783          	lw	a5,-20(s0)
80001ba8:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:95

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
80001bac:	fec42783          	lw	a5,-20(s0)
80001bb0:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:101

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
80001bb4:	00000013          	nop
80001bb8:	01c12403          	lw	s0,28(sp)
80001bbc:	02010113          	addi	sp,sp,32
80001bc0:	00008067          	ret

80001bc4 <vListInitialiseItem>:
vListInitialiseItem():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:105
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
80001bc4:	fe010113          	addi	sp,sp,-32
80001bc8:	00812e23          	sw	s0,28(sp)
80001bcc:	02010413          	addi	s0,sp,32
80001bd0:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:107
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80001bd4:	fec42783          	lw	a5,-20(s0)
80001bd8:	0007a823          	sw	zero,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:113

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
80001bdc:	00000013          	nop
80001be0:	01c12403          	lw	s0,28(sp)
80001be4:	02010113          	addi	sp,sp,32
80001be8:	00008067          	ret

80001bec <vListInsertEnd>:
vListInsertEnd():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:117
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001bec:	fd010113          	addi	sp,sp,-48
80001bf0:	02812623          	sw	s0,44(sp)
80001bf4:	03010413          	addi	s0,sp,48
80001bf8:	fca42e23          	sw	a0,-36(s0)
80001bfc:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:118
ListItem_t * const pxIndex = pxList->pxIndex;
80001c00:	fdc42783          	lw	a5,-36(s0)
80001c04:	0047a783          	lw	a5,4(a5)
80001c08:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:129
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
80001c0c:	fd842783          	lw	a5,-40(s0)
80001c10:	fec42703          	lw	a4,-20(s0)
80001c14:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:130
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
80001c18:	fec42783          	lw	a5,-20(s0)
80001c1c:	0087a703          	lw	a4,8(a5)
80001c20:	fd842783          	lw	a5,-40(s0)
80001c24:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:135

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
80001c28:	fec42783          	lw	a5,-20(s0)
80001c2c:	0087a783          	lw	a5,8(a5)
80001c30:	fd842703          	lw	a4,-40(s0)
80001c34:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:136
	pxIndex->pxPrevious = pxNewListItem;
80001c38:	fec42783          	lw	a5,-20(s0)
80001c3c:	fd842703          	lw	a4,-40(s0)
80001c40:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:139

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001c44:	fd842783          	lw	a5,-40(s0)
80001c48:	fdc42703          	lw	a4,-36(s0)
80001c4c:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:141

	( pxList->uxNumberOfItems )++;
80001c50:	fdc42783          	lw	a5,-36(s0)
80001c54:	0007a783          	lw	a5,0(a5)
80001c58:	00178713          	addi	a4,a5,1
80001c5c:	fdc42783          	lw	a5,-36(s0)
80001c60:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:142
}
80001c64:	00000013          	nop
80001c68:	02c12403          	lw	s0,44(sp)
80001c6c:	03010113          	addi	sp,sp,48
80001c70:	00008067          	ret

80001c74 <vListInsert>:
vListInsert():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:146
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001c74:	fd010113          	addi	sp,sp,-48
80001c78:	02812623          	sw	s0,44(sp)
80001c7c:	03010413          	addi	s0,sp,48
80001c80:	fca42e23          	sw	a0,-36(s0)
80001c84:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:148
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
80001c88:	fd842783          	lw	a5,-40(s0)
80001c8c:	0007a783          	lw	a5,0(a5)
80001c90:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:164
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
80001c94:	fe842703          	lw	a4,-24(s0)
80001c98:	fff00793          	li	a5,-1
80001c9c:	00f71a63          	bne	a4,a5,80001cb0 <vListInsert+0x3c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:166
	{
		pxIterator = pxList->xListEnd.pxPrevious;
80001ca0:	fdc42783          	lw	a5,-36(s0)
80001ca4:	0107a783          	lw	a5,16(a5)
80001ca8:	fef42623          	sw	a5,-20(s0)
80001cac:	0340006f          	j	80001ce0 <vListInsert+0x6c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:192
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001cb0:	fdc42783          	lw	a5,-36(s0)
80001cb4:	00878793          	addi	a5,a5,8
80001cb8:	fef42623          	sw	a5,-20(s0)
80001cbc:	0100006f          	j	80001ccc <vListInsert+0x58>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 3)
80001cc0:	fec42783          	lw	a5,-20(s0)
80001cc4:	0047a783          	lw	a5,4(a5)
80001cc8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 1)
80001ccc:	fec42783          	lw	a5,-20(s0)
80001cd0:	0047a783          	lw	a5,4(a5)
80001cd4:	0007a783          	lw	a5,0(a5)
80001cd8:	fe842703          	lw	a4,-24(s0)
80001cdc:	fef772e3          	bleu	a5,a4,80001cc0 <vListInsert+0x4c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:199
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
80001ce0:	fec42783          	lw	a5,-20(s0)
80001ce4:	0047a703          	lw	a4,4(a5)
80001ce8:	fd842783          	lw	a5,-40(s0)
80001cec:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:200
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
80001cf0:	fd842783          	lw	a5,-40(s0)
80001cf4:	0047a783          	lw	a5,4(a5)
80001cf8:	fd842703          	lw	a4,-40(s0)
80001cfc:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:201
	pxNewListItem->pxPrevious = pxIterator;
80001d00:	fd842783          	lw	a5,-40(s0)
80001d04:	fec42703          	lw	a4,-20(s0)
80001d08:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:202
	pxIterator->pxNext = pxNewListItem;
80001d0c:	fec42783          	lw	a5,-20(s0)
80001d10:	fd842703          	lw	a4,-40(s0)
80001d14:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:206

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001d18:	fd842783          	lw	a5,-40(s0)
80001d1c:	fdc42703          	lw	a4,-36(s0)
80001d20:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:208

	( pxList->uxNumberOfItems )++;
80001d24:	fdc42783          	lw	a5,-36(s0)
80001d28:	0007a783          	lw	a5,0(a5)
80001d2c:	00178713          	addi	a4,a5,1
80001d30:	fdc42783          	lw	a5,-36(s0)
80001d34:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:209
}
80001d38:	00000013          	nop
80001d3c:	02c12403          	lw	s0,44(sp)
80001d40:	03010113          	addi	sp,sp,48
80001d44:	00008067          	ret

80001d48 <uxListRemove>:
uxListRemove():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:213
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
80001d48:	fd010113          	addi	sp,sp,-48
80001d4c:	02812623          	sw	s0,44(sp)
80001d50:	03010413          	addi	s0,sp,48
80001d54:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:216
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
80001d58:	fdc42783          	lw	a5,-36(s0)
80001d5c:	0107a783          	lw	a5,16(a5)
80001d60:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:218

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
80001d64:	fdc42783          	lw	a5,-36(s0)
80001d68:	0047a783          	lw	a5,4(a5)
80001d6c:	fdc42703          	lw	a4,-36(s0)
80001d70:	00872703          	lw	a4,8(a4) # 44000008 <RAM_SIZE+0x43f80008>
80001d74:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:219
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
80001d78:	fdc42783          	lw	a5,-36(s0)
80001d7c:	0087a783          	lw	a5,8(a5)
80001d80:	fdc42703          	lw	a4,-36(s0)
80001d84:	00472703          	lw	a4,4(a4)
80001d88:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:225

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
80001d8c:	fec42783          	lw	a5,-20(s0)
80001d90:	0047a783          	lw	a5,4(a5)
80001d94:	fdc42703          	lw	a4,-36(s0)
80001d98:	00f71a63          	bne	a4,a5,80001dac <uxListRemove+0x64>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:227
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
80001d9c:	fdc42783          	lw	a5,-36(s0)
80001da0:	0087a703          	lw	a4,8(a5)
80001da4:	fec42783          	lw	a5,-20(s0)
80001da8:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:234
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
80001dac:	fdc42783          	lw	a5,-36(s0)
80001db0:	0007a823          	sw	zero,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:235
	( pxList->uxNumberOfItems )--;
80001db4:	fec42783          	lw	a5,-20(s0)
80001db8:	0007a783          	lw	a5,0(a5)
80001dbc:	fff78713          	addi	a4,a5,-1
80001dc0:	fec42783          	lw	a5,-20(s0)
80001dc4:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:237

	return pxList->uxNumberOfItems;
80001dc8:	fec42783          	lw	a5,-20(s0)
80001dcc:	0007a783          	lw	a5,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:238
}
80001dd0:	00078513          	mv	a0,a5
80001dd4:	02c12403          	lw	s0,44(sp)
80001dd8:	03010113          	addi	sp,sp,48
80001ddc:	00008067          	ret

80001de0 <memset>:
memset():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:25

  return dest;
}

void* memset(void* dest, int byte, size_t len)
{
80001de0:	fd010113          	addi	sp,sp,-48
80001de4:	02812623          	sw	s0,44(sp)
80001de8:	03010413          	addi	s0,sp,48
80001dec:	fca42e23          	sw	a0,-36(s0)
80001df0:	fcb42c23          	sw	a1,-40(s0)
80001df4:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:26
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
80001df8:	fdc42703          	lw	a4,-36(s0)
80001dfc:	fd442783          	lw	a5,-44(s0)
80001e00:	00f767b3          	or	a5,a4,a5
80001e04:	0037f793          	andi	a5,a5,3
80001e08:	06079863          	bnez	a5,80001e78 <memset+0x98>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:27
    uintptr_t word = byte & 0xFF;
80001e0c:	fd842783          	lw	a5,-40(s0)
80001e10:	0ff7f793          	andi	a5,a5,255
80001e14:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:28
    word |= word << 8;
80001e18:	fe442783          	lw	a5,-28(s0)
80001e1c:	00879793          	slli	a5,a5,0x8
80001e20:	fe442703          	lw	a4,-28(s0)
80001e24:	00f767b3          	or	a5,a4,a5
80001e28:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:29
    word |= word << 16;
80001e2c:	fe442783          	lw	a5,-28(s0)
80001e30:	01079793          	slli	a5,a5,0x10
80001e34:	fe442703          	lw	a4,-28(s0)
80001e38:	00f767b3          	or	a5,a4,a5
80001e3c:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:32
    word |= word << 16 << 16;

    uintptr_t *d = dest;
80001e40:	fdc42783          	lw	a5,-36(s0)
80001e44:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001e48:	0180006f          	j	80001e60 <memset+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:34
      *d++ = word;
80001e4c:	fec42783          	lw	a5,-20(s0)
80001e50:	00478713          	addi	a4,a5,4
80001e54:	fee42623          	sw	a4,-20(s0)
80001e58:	fe442703          	lw	a4,-28(s0)
80001e5c:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001e60:	fdc42703          	lw	a4,-36(s0)
80001e64:	fd442783          	lw	a5,-44(s0)
80001e68:	00f707b3          	add	a5,a4,a5
80001e6c:	fec42703          	lw	a4,-20(s0)
80001e70:	fcf76ee3          	bltu	a4,a5,80001e4c <memset+0x6c>
80001e74:	0400006f          	j	80001eb4 <memset+0xd4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:36
  } else {
    char *d = dest;
80001e78:	fdc42783          	lw	a5,-36(s0)
80001e7c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001e80:	0200006f          	j	80001ea0 <memset+0xc0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:38
      *d++ = byte;
80001e84:	fe842783          	lw	a5,-24(s0)
80001e88:	00178713          	addi	a4,a5,1
80001e8c:	fee42423          	sw	a4,-24(s0)
80001e90:	fd842703          	lw	a4,-40(s0)
80001e94:	01871713          	slli	a4,a4,0x18
80001e98:	41875713          	srai	a4,a4,0x18
80001e9c:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001ea0:	fdc42703          	lw	a4,-36(s0)
80001ea4:	fd442783          	lw	a5,-44(s0)
80001ea8:	00f707b3          	add	a5,a4,a5
80001eac:	fe842703          	lw	a4,-24(s0)
80001eb0:	fcf76ae3          	bltu	a4,a5,80001e84 <memset+0xa4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:40
  }
  return dest;
80001eb4:	fdc42783          	lw	a5,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:41
}
80001eb8:	00078513          	mv	a0,a5
80001ebc:	02c12403          	lw	s0,44(sp)
80001ec0:	03010113          	addi	sp,sp,48
80001ec4:	00008067          	ret

80001ec8 <strlen>:
strlen():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:44

size_t strlen(const char *s)
{
80001ec8:	fd010113          	addi	sp,sp,-48
80001ecc:	02812623          	sw	s0,44(sp)
80001ed0:	03010413          	addi	s0,sp,48
80001ed4:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:45
  const char *p = s;
80001ed8:	fdc42783          	lw	a5,-36(s0)
80001edc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001ee0:	0100006f          	j	80001ef0 <strlen+0x28>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:47
    p++;
80001ee4:	fec42783          	lw	a5,-20(s0)
80001ee8:	00178793          	addi	a5,a5,1
80001eec:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001ef0:	fec42783          	lw	a5,-20(s0)
80001ef4:	00078783          	lb	a5,0(a5)
80001ef8:	fe0796e3          	bnez	a5,80001ee4 <strlen+0x1c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:48
  return p - s;
80001efc:	fec42703          	lw	a4,-20(s0)
80001f00:	fdc42783          	lw	a5,-36(s0)
80001f04:	40f707b3          	sub	a5,a4,a5
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:49
}
80001f08:	00078513          	mv	a0,a5
80001f0c:	02c12403          	lw	s0,44(sp)
80001f10:	03010113          	addi	sp,sp,48
80001f14:	00008067          	ret

80001f18 <xTaskGenericCreate>:
xTaskGenericCreate():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:551

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80001f18:	fc010113          	addi	sp,sp,-64
80001f1c:	02112e23          	sw	ra,60(sp)
80001f20:	02812c23          	sw	s0,56(sp)
80001f24:	04010413          	addi	s0,sp,64
80001f28:	fca42e23          	sw	a0,-36(s0)
80001f2c:	fcb42c23          	sw	a1,-40(s0)
80001f30:	fcd42823          	sw	a3,-48(s0)
80001f34:	fce42623          	sw	a4,-52(s0)
80001f38:	fcf42423          	sw	a5,-56(s0)
80001f3c:	fd042223          	sw	a6,-60(s0)
80001f40:	fd142023          	sw	a7,-64(s0)
80001f44:	00060793          	mv	a5,a2
80001f48:	fcf41b23          	sh	a5,-42(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:556
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
80001f4c:	fdc42783          	lw	a5,-36(s0)
80001f50:	00079663          	bnez	a5,80001f5c <xTaskGenericCreate+0x44>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:556 (discriminator 1)
80001f54:	30047073          	csrci	mstatus,8
80001f58:	0000006f          	j	80001f58 <xTaskGenericCreate+0x40>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:557
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
80001f5c:	fcc42703          	lw	a4,-52(s0)
80001f60:	00400793          	li	a5,4
80001f64:	00e7f663          	bleu	a4,a5,80001f70 <xTaskGenericCreate+0x58>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 1)
80001f68:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 2)
80001f6c:	0000006f          	j	80001f6c <xTaskGenericCreate+0x54>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:561

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
80001f70:	fd645783          	lhu	a5,-42(s0)
80001f74:	fc442583          	lw	a1,-60(s0)
80001f78:	00078513          	mv	a0,a5
80001f7c:	51d000ef          	jal	ra,80002c98 <prvAllocateTCBAndStack>
80001f80:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:562
	if( pxNewTCB != NULL )
80001f84:	fe842783          	lw	a5,-24(s0)
80001f88:	16078263          	beqz	a5,800020ec <xTaskGenericCreate+0x1d4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:598
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
80001f8c:	fe842783          	lw	a5,-24(s0)
80001f90:	0307a703          	lw	a4,48(a5)
80001f94:	fd645683          	lhu	a3,-42(s0)
80001f98:	400007b7          	lui	a5,0x40000
80001f9c:	fff78793          	addi	a5,a5,-1 # 3fffffff <RAM_SIZE+0x3ff7ffff>
80001fa0:	00f687b3          	add	a5,a3,a5
80001fa4:	00279793          	slli	a5,a5,0x2
80001fa8:	00f707b3          	add	a5,a4,a5
80001fac:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:599
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
80001fb0:	fe442783          	lw	a5,-28(s0)
80001fb4:	ffc7f793          	andi	a5,a5,-4
80001fb8:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:602

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
80001fbc:	fe442783          	lw	a5,-28(s0)
80001fc0:	0037f793          	andi	a5,a5,3
80001fc4:	00078663          	beqz	a5,80001fd0 <xTaskGenericCreate+0xb8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 1)
80001fc8:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 3)
80001fcc:	0000006f          	j	80001fcc <xTaskGenericCreate+0xb4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:619
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
80001fd0:	fd645783          	lhu	a5,-42(s0)
80001fd4:	00078713          	mv	a4,a5
80001fd8:	fc042683          	lw	a3,-64(s0)
80001fdc:	fcc42603          	lw	a2,-52(s0)
80001fe0:	fd842583          	lw	a1,-40(s0)
80001fe4:	fe842503          	lw	a0,-24(s0)
80001fe8:	191000ef          	jal	ra,80002978 <prvInitialiseTCBVariables>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:631
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
80001fec:	fd042603          	lw	a2,-48(s0)
80001ff0:	fdc42583          	lw	a1,-36(s0)
80001ff4:	fe442503          	lw	a0,-28(s0)
80001ff8:	891ff0ef          	jal	ra,80001888 <pxPortInitialiseStack>
80001ffc:	00050713          	mv	a4,a0
80002000:	fe842783          	lw	a5,-24(s0)
80002004:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:635
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
80002008:	fc842783          	lw	a5,-56(s0)
8000200c:	00078863          	beqz	a5,8000201c <xTaskGenericCreate+0x104>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:640
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
80002010:	fc842783          	lw	a5,-56(s0)
80002014:	fe842703          	lw	a4,-24(s0)
80002018:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:649
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
8000201c:	e34ff0ef          	jal	ra,80001650 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:651
		{
			uxCurrentNumberOfTasks++;
80002020:	93c1a783          	lw	a5,-1732(gp) # 80008abc <uxCurrentNumberOfTasks>
80002024:	00178713          	addi	a4,a5,1
80002028:	92e1ae23          	sw	a4,-1732(gp) # 80008abc <uxCurrentNumberOfTasks>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:652
			if( pxCurrentTCB == NULL )
8000202c:	92c1a783          	lw	a5,-1748(gp) # 80008aac <pxCurrentTCB>
80002030:	02079063          	bnez	a5,80002050 <xTaskGenericCreate+0x138>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:656
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
80002034:	fe842703          	lw	a4,-24(s0)
80002038:	92e1a623          	sw	a4,-1748(gp) # 80008aac <pxCurrentTCB>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:658

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
8000203c:	93c1a703          	lw	a4,-1732(gp) # 80008abc <uxCurrentNumberOfTasks>
80002040:	00100793          	li	a5,1
80002044:	02f71663          	bne	a4,a5,80002070 <xTaskGenericCreate+0x158>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:663
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
80002048:	269000ef          	jal	ra,80002ab0 <prvInitialiseTaskLists>
8000204c:	0240006f          	j	80002070 <xTaskGenericCreate+0x158>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:675
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
80002050:	9481a783          	lw	a5,-1720(gp) # 80008ac8 <xSchedulerRunning>
80002054:	00079e63          	bnez	a5,80002070 <xTaskGenericCreate+0x158>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:677
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
80002058:	92c1a783          	lw	a5,-1748(gp) # 80008aac <pxCurrentTCB>
8000205c:	02c7a783          	lw	a5,44(a5)
80002060:	fcc42703          	lw	a4,-52(s0)
80002064:	00f76663          	bltu	a4,a5,80002070 <xTaskGenericCreate+0x158>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:679
					{
						pxCurrentTCB = pxNewTCB;
80002068:	fe842703          	lw	a4,-24(s0)
8000206c:	92e1a623          	sw	a4,-1748(gp) # 80008aac <pxCurrentTCB>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:692
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
80002070:	9581a783          	lw	a5,-1704(gp) # 80008ad8 <uxTaskNumber>
80002074:	00178713          	addi	a4,a5,1
80002078:	94e1ac23          	sw	a4,-1704(gp) # 80008ad8 <uxTaskNumber>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:697

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
8000207c:	9581a703          	lw	a4,-1704(gp) # 80008ad8 <uxTaskNumber>
80002080:	fe842783          	lw	a5,-24(s0)
80002084:	04e7a423          	sw	a4,72(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:702
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
80002088:	fe842783          	lw	a5,-24(s0)
8000208c:	02c7a703          	lw	a4,44(a5)
80002090:	9441a783          	lw	a5,-1724(gp) # 80008ac4 <uxTopReadyPriority>
80002094:	00e7f863          	bleu	a4,a5,800020a4 <xTaskGenericCreate+0x18c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 1)
80002098:	fe842783          	lw	a5,-24(s0)
8000209c:	02c7a703          	lw	a4,44(a5)
800020a0:	94e1a223          	sw	a4,-1724(gp) # 80008ac4 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 3)
800020a4:	fe842783          	lw	a5,-24(s0)
800020a8:	02c7a703          	lw	a4,44(a5)
800020ac:	00070793          	mv	a5,a4
800020b0:	00279793          	slli	a5,a5,0x2
800020b4:	00e787b3          	add	a5,a5,a4
800020b8:	00279793          	slli	a5,a5,0x2
800020bc:	80022737          	lui	a4,0x80022
800020c0:	b2070713          	addi	a4,a4,-1248 # 80021b20 <__stack_top+0xfffde710>
800020c4:	00e78733          	add	a4,a5,a4
800020c8:	fe842783          	lw	a5,-24(s0)
800020cc:	00478793          	addi	a5,a5,4
800020d0:	00078593          	mv	a1,a5
800020d4:	00070513          	mv	a0,a4
800020d8:	b15ff0ef          	jal	ra,80001bec <vListInsertEnd>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:704 (discriminator 3)

			xReturn = pdPASS;
800020dc:	00100793          	li	a5,1
800020e0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:707 (discriminator 3)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
800020e4:	da0ff0ef          	jal	ra,80001684 <vPortExitCritical>
800020e8:	00c0006f          	j	800020f4 <xTaskGenericCreate+0x1dc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:711
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
800020ec:	fff00793          	li	a5,-1
800020f0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:715
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
800020f4:	fec42703          	lw	a4,-20(s0)
800020f8:	00100793          	li	a5,1
800020fc:	02f71063          	bne	a4,a5,8000211c <xTaskGenericCreate+0x204>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:717
	{
		if( xSchedulerRunning != pdFALSE )
80002100:	9481a783          	lw	a5,-1720(gp) # 80008ac8 <xSchedulerRunning>
80002104:	00078c63          	beqz	a5,8000211c <xTaskGenericCreate+0x204>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:721
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
80002108:	92c1a783          	lw	a5,-1748(gp) # 80008aac <pxCurrentTCB>
8000210c:	02c7a783          	lw	a5,44(a5)
80002110:	fcc42703          	lw	a4,-52(s0)
80002114:	00e7f463          	bleu	a4,a5,8000211c <xTaskGenericCreate+0x204>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:723
			{
				taskYIELD_IF_USING_PREEMPTION();
80002118:	a21ff0ef          	jal	ra,80001b38 <vPortYield>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:736
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
8000211c:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:737
}
80002120:	00078513          	mv	a0,a5
80002124:	03c12083          	lw	ra,60(sp)
80002128:	03812403          	lw	s0,56(sp)
8000212c:	04010113          	addi	sp,sp,64
80002130:	00008067          	ret

80002134 <vTaskDelete>:
vTaskDelete():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:743
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
80002134:	fd010113          	addi	sp,sp,-48
80002138:	02112623          	sw	ra,44(sp)
8000213c:	02812423          	sw	s0,40(sp)
80002140:	03010413          	addi	s0,sp,48
80002144:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:746
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
80002148:	d08ff0ef          	jal	ra,80001650 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:750
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
8000214c:	fdc42783          	lw	a5,-36(s0)
80002150:	00079663          	bnez	a5,8000215c <vTaskDelete+0x28>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 1)
80002154:	92c1a783          	lw	a5,-1748(gp) # 80008aac <pxCurrentTCB>
80002158:	0080006f          	j	80002160 <vTaskDelete+0x2c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 2)
8000215c:	fdc42783          	lw	a5,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 4)
80002160:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:756 (discriminator 4)

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80002164:	fec42783          	lw	a5,-20(s0)
80002168:	00478793          	addi	a5,a5,4
8000216c:	00078513          	mv	a0,a5
80002170:	bd9ff0ef          	jal	ra,80001d48 <uxListRemove>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:766 (discriminator 4)
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
80002174:	fec42783          	lw	a5,-20(s0)
80002178:	0287a783          	lw	a5,40(a5)
8000217c:	00078a63          	beqz	a5,80002190 <vTaskDelete+0x5c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:768
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002180:	fec42783          	lw	a5,-20(s0)
80002184:	01878793          	addi	a5,a5,24
80002188:	00078513          	mv	a0,a5
8000218c:	bbdff0ef          	jal	ra,80001d48 <uxListRemove>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:775
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
80002190:	fec42783          	lw	a5,-20(s0)
80002194:	00478793          	addi	a5,a5,4
80002198:	00078593          	mv	a1,a5
8000219c:	800227b7          	lui	a5,0x80022
800021a0:	bc078513          	addi	a0,a5,-1088 # 80021bc0 <__stack_top+0xfffde7b0>
800021a4:	a49ff0ef          	jal	ra,80001bec <vListInsertEnd>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:780

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
800021a8:	9381a783          	lw	a5,-1736(gp) # 80008ab8 <uxTasksDeleted>
800021ac:	00178713          	addi	a4,a5,1
800021b0:	92e1ac23          	sw	a4,-1736(gp) # 80008ab8 <uxTasksDeleted>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:784

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
800021b4:	9581a783          	lw	a5,-1704(gp) # 80008ad8 <uxTaskNumber>
800021b8:	00178713          	addi	a4,a5,1
800021bc:	94e1ac23          	sw	a4,-1704(gp) # 80008ad8 <uxTaskNumber>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:788

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
800021c0:	cc4ff0ef          	jal	ra,80001684 <vPortExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:792

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
800021c4:	9481a783          	lw	a5,-1720(gp) # 80008ac8 <xSchedulerRunning>
800021c8:	02078a63          	beqz	a5,800021fc <vTaskDelete+0xc8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:794
		{
			if( pxTCB == pxCurrentTCB )
800021cc:	92c1a783          	lw	a5,-1748(gp) # 80008aac <pxCurrentTCB>
800021d0:	fec42703          	lw	a4,-20(s0)
800021d4:	00f71e63          	bne	a4,a5,800021f0 <vTaskDelete+0xbc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:796
			{
				configASSERT( uxSchedulerSuspended == 0 );
800021d8:	9601a783          	lw	a5,-1696(gp) # 80008ae0 <uxSchedulerSuspended>
800021dc:	00078663          	beqz	a5,800021e8 <vTaskDelete+0xb4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:796 (discriminator 1)
800021e0:	30047073          	csrci	mstatus,8
800021e4:	0000006f          	j	800021e4 <vTaskDelete+0xb0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:804
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
800021e8:	951ff0ef          	jal	ra,80001b38 <vPortYield>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:817
					prvResetNextTaskUnblockTime();
				}
				taskEXIT_CRITICAL();
			}
		}
	}
800021ec:	0100006f          	j	800021fc <vTaskDelete+0xc8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:810
				taskENTER_CRITICAL();
800021f0:	c60ff0ef          	jal	ra,80001650 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:812
					prvResetNextTaskUnblockTime();
800021f4:	3a5000ef          	jal	ra,80002d98 <prvResetNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:814
				taskEXIT_CRITICAL();
800021f8:	c8cff0ef          	jal	ra,80001684 <vPortExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:817
	}
800021fc:	00000013          	nop
80002200:	02c12083          	lw	ra,44(sp)
80002204:	02812403          	lw	s0,40(sp)
80002208:	03010113          	addi	sp,sp,48
8000220c:	00008067          	ret

80002210 <vTaskDelay>:
vTaskDelay():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:921
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
80002210:	fd010113          	addi	sp,sp,-48
80002214:	02112623          	sw	ra,44(sp)
80002218:	02812423          	sw	s0,40(sp)
8000221c:	03010413          	addi	s0,sp,48
80002220:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:923
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
80002224:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:927


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
80002228:	fdc42783          	lw	a5,-36(s0)
8000222c:	04078463          	beqz	a5,80002274 <vTaskDelay+0x64>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:929
		{
			configASSERT( uxSchedulerSuspended == 0 );
80002230:	9601a783          	lw	a5,-1696(gp) # 80008ae0 <uxSchedulerSuspended>
80002234:	00078663          	beqz	a5,80002240 <vTaskDelay+0x30>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:929 (discriminator 1)
80002238:	30047073          	csrci	mstatus,8
8000223c:	0000006f          	j	8000223c <vTaskDelay+0x2c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:930
			vTaskSuspendAll();
80002240:	26c000ef          	jal	ra,800024ac <vTaskSuspendAll>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:944
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
80002244:	9401a783          	lw	a5,-1728(gp) # 80008ac0 <xTickCount>
80002248:	fdc42703          	lw	a4,-36(s0)
8000224c:	00f707b3          	add	a5,a4,a5
80002250:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:949

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80002254:	92c1a783          	lw	a5,-1748(gp) # 80008aac <pxCurrentTCB>
80002258:	00478793          	addi	a5,a5,4
8000225c:	00078513          	mv	a0,a5
80002260:	ae9ff0ef          	jal	ra,80001d48 <uxListRemove>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:960
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
80002264:	fe842503          	lw	a0,-24(s0)
80002268:	1a9000ef          	jal	ra,80002c10 <prvAddCurrentTaskToDelayedList>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:962
			}
			xAlreadyYielded = xTaskResumeAll();
8000226c:	268000ef          	jal	ra,800024d4 <xTaskResumeAll>
80002270:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:971
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
80002274:	fec42783          	lw	a5,-20(s0)
80002278:	00079463          	bnez	a5,80002280 <vTaskDelay+0x70>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:973
		{
			portYIELD_WITHIN_API();
8000227c:	8bdff0ef          	jal	ra,80001b38 <vPortYield>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:979
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80002280:	00000013          	nop
80002284:	02c12083          	lw	ra,44(sp)
80002288:	02812403          	lw	s0,40(sp)
8000228c:	03010113          	addi	sp,sp,48
80002290:	00008067          	ret

80002294 <prvTaskIsTaskSuspended>:
prvTaskIsTaskSuspended():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1372
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
80002294:	fd010113          	addi	sp,sp,-48
80002298:	02812623          	sw	s0,44(sp)
8000229c:	03010413          	addi	s0,sp,48
800022a0:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1373
	BaseType_t xReturn = pdFALSE;
800022a4:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1374
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
800022a8:	fdc42783          	lw	a5,-36(s0)
800022ac:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1380

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
800022b0:	fdc42783          	lw	a5,-36(s0)
800022b4:	00079663          	bnez	a5,800022c0 <prvTaskIsTaskSuspended+0x2c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1380 (discriminator 1)
800022b8:	30047073          	csrci	mstatus,8
800022bc:	0000006f          	j	800022bc <prvTaskIsTaskSuspended+0x28>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1383

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
800022c0:	fe842783          	lw	a5,-24(s0)
800022c4:	0147a703          	lw	a4,20(a5)
800022c8:	800227b7          	lui	a5,0x80022
800022cc:	bd478793          	addi	a5,a5,-1068 # 80021bd4 <__stack_top+0xfffde7c4>
800022d0:	00f71663          	bne	a4,a5,800022dc <prvTaskIsTaskSuspended+0x48>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1383 (discriminator 1)
800022d4:	00100793          	li	a5,1
800022d8:	0080006f          	j	800022e0 <prvTaskIsTaskSuspended+0x4c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1383 (discriminator 2)
800022dc:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1383 (discriminator 4)
800022e0:	02078e63          	beqz	a5,8000231c <prvTaskIsTaskSuspended+0x88>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1386
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
800022e4:	fe842783          	lw	a5,-24(s0)
800022e8:	0287a703          	lw	a4,40(a5)
800022ec:	800227b7          	lui	a5,0x80022
800022f0:	bac78793          	addi	a5,a5,-1108 # 80021bac <__stack_top+0xfffde79c>
800022f4:	02f70463          	beq	a4,a5,8000231c <prvTaskIsTaskSuspended+0x88>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1390
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
800022f8:	fe842783          	lw	a5,-24(s0)
800022fc:	0287a783          	lw	a5,40(a5)
80002300:	00079663          	bnez	a5,8000230c <prvTaskIsTaskSuspended+0x78>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1390 (discriminator 1)
80002304:	00100793          	li	a5,1
80002308:	0080006f          	j	80002310 <prvTaskIsTaskSuspended+0x7c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1390 (discriminator 2)
8000230c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1390 (discriminator 4)
80002310:	00078663          	beqz	a5,8000231c <prvTaskIsTaskSuspended+0x88>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1392
				{
					xReturn = pdTRUE;
80002314:	00100793          	li	a5,1
80002318:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1409
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
8000231c:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1410
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
80002320:	00078513          	mv	a0,a5
80002324:	02c12403          	lw	s0,44(sp)
80002328:	03010113          	addi	sp,sp,48
8000232c:	00008067          	ret

80002330 <vTaskResume>:
vTaskResume():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1418
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
80002330:	fd010113          	addi	sp,sp,-48
80002334:	02112623          	sw	ra,44(sp)
80002338:	02812423          	sw	s0,40(sp)
8000233c:	03010413          	addi	s0,sp,48
80002340:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1419
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
80002344:	fdc42783          	lw	a5,-36(s0)
80002348:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1422

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
8000234c:	fdc42783          	lw	a5,-36(s0)
80002350:	00079663          	bnez	a5,8000235c <vTaskResume+0x2c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1422 (discriminator 1)
80002354:	30047073          	csrci	mstatus,8
80002358:	0000006f          	j	80002358 <vTaskResume+0x28>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1426

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
8000235c:	fec42783          	lw	a5,-20(s0)
80002360:	0a078463          	beqz	a5,80002408 <vTaskResume+0xd8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1426 (discriminator 1)
80002364:	92c1a783          	lw	a5,-1748(gp) # 80008aac <pxCurrentTCB>
80002368:	fec42703          	lw	a4,-20(s0)
8000236c:	08f70e63          	beq	a4,a5,80002408 <vTaskResume+0xd8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1428
		{
			taskENTER_CRITICAL();
80002370:	ae0ff0ef          	jal	ra,80001650 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1430
			{
				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
80002374:	fec42503          	lw	a0,-20(s0)
80002378:	f1dff0ef          	jal	ra,80002294 <prvTaskIsTaskSuspended>
8000237c:	00050713          	mv	a4,a0
80002380:	00100793          	li	a5,1
80002384:	08f71063          	bne	a4,a5,80002404 <vTaskResume+0xd4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1436
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
80002388:	fec42783          	lw	a5,-20(s0)
8000238c:	00478793          	addi	a5,a5,4
80002390:	00078513          	mv	a0,a5
80002394:	9b5ff0ef          	jal	ra,80001d48 <uxListRemove>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1437
					prvAddTaskToReadyList( pxTCB );
80002398:	fec42783          	lw	a5,-20(s0)
8000239c:	02c7a703          	lw	a4,44(a5)
800023a0:	9441a783          	lw	a5,-1724(gp) # 80008ac4 <uxTopReadyPriority>
800023a4:	00e7f863          	bleu	a4,a5,800023b4 <vTaskResume+0x84>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1437 (discriminator 1)
800023a8:	fec42783          	lw	a5,-20(s0)
800023ac:	02c7a703          	lw	a4,44(a5)
800023b0:	94e1a223          	sw	a4,-1724(gp) # 80008ac4 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1437 (discriminator 3)
800023b4:	fec42783          	lw	a5,-20(s0)
800023b8:	02c7a703          	lw	a4,44(a5)
800023bc:	00070793          	mv	a5,a4
800023c0:	00279793          	slli	a5,a5,0x2
800023c4:	00e787b3          	add	a5,a5,a4
800023c8:	00279793          	slli	a5,a5,0x2
800023cc:	80022737          	lui	a4,0x80022
800023d0:	b2070713          	addi	a4,a4,-1248 # 80021b20 <__stack_top+0xfffde710>
800023d4:	00e78733          	add	a4,a5,a4
800023d8:	fec42783          	lw	a5,-20(s0)
800023dc:	00478793          	addi	a5,a5,4
800023e0:	00078593          	mv	a1,a5
800023e4:	00070513          	mv	a0,a4
800023e8:	805ff0ef          	jal	ra,80001bec <vListInsertEnd>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1440 (discriminator 3)

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
800023ec:	fec42783          	lw	a5,-20(s0)
800023f0:	02c7a703          	lw	a4,44(a5)
800023f4:	92c1a783          	lw	a5,-1748(gp) # 80008aac <pxCurrentTCB>
800023f8:	02c7a783          	lw	a5,44(a5)
800023fc:	00f76463          	bltu	a4,a5,80002404 <vTaskResume+0xd4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1445
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
80002400:	f38ff0ef          	jal	ra,80001b38 <vPortYield>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1457
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
80002404:	a80ff0ef          	jal	ra,80001684 <vPortExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1463
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80002408:	00000013          	nop
8000240c:	02c12083          	lw	ra,44(sp)
80002410:	02812403          	lw	s0,40(sp)
80002414:	03010113          	addi	sp,sp,48
80002418:	00008067          	ret

8000241c <vTaskStartScheduler>:
vTaskStartScheduler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1542

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
8000241c:	fe010113          	addi	sp,sp,-32
80002420:	00112e23          	sw	ra,28(sp)
80002424:	00812c23          	sw	s0,24(sp)
80002428:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1555
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
8000242c:	00000893          	li	a7,0
80002430:	00000813          	li	a6,0
80002434:	00000793          	li	a5,0
80002438:	00000713          	li	a4,0
8000243c:	00000693          	li	a3,0
80002440:	40000613          	li	a2,1024
80002444:	800085b7          	lui	a1,0x80008
80002448:	06858593          	addi	a1,a1,104 # 80008068 <__stack_top+0xfffc4c58>
8000244c:	80003537          	lui	a0,0x80003
80002450:	94450513          	addi	a0,a0,-1724 # 80002944 <__stack_top+0xfffbf534>
80002454:	ac5ff0ef          	jal	ra,80001f18 <xTaskGenericCreate>
80002458:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1572
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
8000245c:	fec42703          	lw	a4,-20(s0)
80002460:	00100793          	li	a5,1
80002464:	02f71263          	bne	a4,a5,80002488 <vTaskStartScheduler+0x6c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1579
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
80002468:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1589
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
8000246c:	fff00713          	li	a4,-1
80002470:	94e1ae23          	sw	a4,-1700(gp) # 80008adc <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1590
		xSchedulerRunning = pdTRUE;
80002474:	00100713          	li	a4,1
80002478:	94e1a423          	sw	a4,-1720(gp) # 80008ac8 <xSchedulerRunning>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1591
		xTickCount = ( TickType_t ) 0U;
8000247c:	9401a023          	sw	zero,-1728(gp) # 80008ac0 <xTickCount>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1600
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
80002480:	d80ff0ef          	jal	ra,80001a00 <xPortStartScheduler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
80002484:	0140006f          	j	80002498 <vTaskStartScheduler+0x7c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615
		configASSERT( xReturn );
80002488:	fec42783          	lw	a5,-20(s0)
8000248c:	00079663          	bnez	a5,80002498 <vTaskStartScheduler+0x7c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 1)
80002490:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 2)
80002494:	0000006f          	j	80002494 <vTaskStartScheduler+0x78>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
}
80002498:	00000013          	nop
8000249c:	01c12083          	lw	ra,28(sp)
800024a0:	01812403          	lw	s0,24(sp)
800024a4:	02010113          	addi	sp,sp,32
800024a8:	00008067          	ret

800024ac <vTaskSuspendAll>:
vTaskSuspendAll():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1632
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
800024ac:	ff010113          	addi	sp,sp,-16
800024b0:	00812623          	sw	s0,12(sp)
800024b4:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1637
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
800024b8:	9601a783          	lw	a5,-1696(gp) # 80008ae0 <uxSchedulerSuspended>
800024bc:	00178713          	addi	a4,a5,1
800024c0:	96e1a023          	sw	a4,-1696(gp) # 80008ae0 <uxSchedulerSuspended>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1638
}
800024c4:	00000013          	nop
800024c8:	00c12403          	lw	s0,12(sp)
800024cc:	01010113          	addi	sp,sp,16
800024d0:	00008067          	ret

800024d4 <xTaskResumeAll>:
xTaskResumeAll():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1670

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
800024d4:	fe010113          	addi	sp,sp,-32
800024d8:	00112e23          	sw	ra,28(sp)
800024dc:	00812c23          	sw	s0,24(sp)
800024e0:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1672
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
800024e4:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
800024e8:	9601a783          	lw	a5,-1696(gp) # 80008ae0 <uxSchedulerSuspended>
800024ec:	00079663          	bnez	a5,800024f8 <xTaskResumeAll+0x24>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676 (discriminator 1)
800024f0:	30047073          	csrci	mstatus,8
800024f4:	0000006f          	j	800024f4 <xTaskResumeAll+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1683
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
800024f8:	958ff0ef          	jal	ra,80001650 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1685
	{
		--uxSchedulerSuspended;
800024fc:	9601a783          	lw	a5,-1696(gp) # 80008ae0 <uxSchedulerSuspended>
80002500:	fff78713          	addi	a4,a5,-1
80002504:	96e1a023          	sw	a4,-1696(gp) # 80008ae0 <uxSchedulerSuspended>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1687

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80002508:	9601a783          	lw	a5,-1696(gp) # 80008ae0 <uxSchedulerSuspended>
8000250c:	10079663          	bnez	a5,80002618 <xTaskResumeAll+0x144>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1689
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
80002510:	93c1a783          	lw	a5,-1732(gp) # 80008abc <uxCurrentNumberOfTasks>
80002514:	10078263          	beqz	a5,80002618 <xTaskResumeAll+0x144>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
80002518:	0a80006f          	j	800025c0 <xTaskResumeAll+0xec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1695
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
8000251c:	800227b7          	lui	a5,0x80022
80002520:	bac78793          	addi	a5,a5,-1108 # 80021bac <__stack_top+0xfffde79c>
80002524:	00c7a783          	lw	a5,12(a5)
80002528:	00c7a783          	lw	a5,12(a5)
8000252c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1696
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002530:	fe842783          	lw	a5,-24(s0)
80002534:	01878793          	addi	a5,a5,24
80002538:	00078513          	mv	a0,a5
8000253c:	80dff0ef          	jal	ra,80001d48 <uxListRemove>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1697
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80002540:	fe842783          	lw	a5,-24(s0)
80002544:	00478793          	addi	a5,a5,4
80002548:	00078513          	mv	a0,a5
8000254c:	ffcff0ef          	jal	ra,80001d48 <uxListRemove>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698
					prvAddTaskToReadyList( pxTCB );
80002550:	fe842783          	lw	a5,-24(s0)
80002554:	02c7a703          	lw	a4,44(a5)
80002558:	9441a783          	lw	a5,-1724(gp) # 80008ac4 <uxTopReadyPriority>
8000255c:	00e7f863          	bleu	a4,a5,8000256c <xTaskResumeAll+0x98>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 1)
80002560:	fe842783          	lw	a5,-24(s0)
80002564:	02c7a703          	lw	a4,44(a5)
80002568:	94e1a223          	sw	a4,-1724(gp) # 80008ac4 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 3)
8000256c:	fe842783          	lw	a5,-24(s0)
80002570:	02c7a703          	lw	a4,44(a5)
80002574:	00070793          	mv	a5,a4
80002578:	00279793          	slli	a5,a5,0x2
8000257c:	00e787b3          	add	a5,a5,a4
80002580:	00279793          	slli	a5,a5,0x2
80002584:	80022737          	lui	a4,0x80022
80002588:	b2070713          	addi	a4,a4,-1248 # 80021b20 <__stack_top+0xfffde710>
8000258c:	00e78733          	add	a4,a5,a4
80002590:	fe842783          	lw	a5,-24(s0)
80002594:	00478793          	addi	a5,a5,4
80002598:	00078593          	mv	a1,a5
8000259c:	00070513          	mv	a0,a4
800025a0:	e4cff0ef          	jal	ra,80001bec <vListInsertEnd>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1702 (discriminator 3)

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
800025a4:	fe842783          	lw	a5,-24(s0)
800025a8:	02c7a703          	lw	a4,44(a5)
800025ac:	92c1a783          	lw	a5,-1748(gp) # 80008aac <pxCurrentTCB>
800025b0:	02c7a783          	lw	a5,44(a5)
800025b4:	00f76663          	bltu	a4,a5,800025c0 <xTaskResumeAll+0xec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1704
					{
						xYieldPending = pdTRUE;
800025b8:	00100713          	li	a4,1
800025bc:	94e1a823          	sw	a4,-1712(gp) # 80008ad0 <xYieldPending>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
800025c0:	800227b7          	lui	a5,0x80022
800025c4:	bac7a783          	lw	a5,-1108(a5) # 80021bac <__stack_top+0xfffde79c>
800025c8:	f4079ae3          	bnez	a5,8000251c <xTaskResumeAll+0x48>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1716

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
800025cc:	94c1a783          	lw	a5,-1716(gp) # 80008acc <uxPendedTicks>
800025d0:	02078863          	beqz	a5,80002600 <xTaskResumeAll+0x12c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
800025d4:	0240006f          	j	800025f8 <xTaskResumeAll+0x124>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1720
					{
						if( xTaskIncrementTick() != pdFALSE )
800025d8:	094000ef          	jal	ra,8000266c <xTaskIncrementTick>
800025dc:	00050793          	mv	a5,a0
800025e0:	00078663          	beqz	a5,800025ec <xTaskResumeAll+0x118>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1722
						{
							xYieldPending = pdTRUE;
800025e4:	00100713          	li	a4,1
800025e8:	94e1a823          	sw	a4,-1712(gp) # 80008ad0 <xYieldPending>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1728
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
800025ec:	94c1a783          	lw	a5,-1716(gp) # 80008acc <uxPendedTicks>
800025f0:	fff78713          	addi	a4,a5,-1
800025f4:	94e1a623          	sw	a4,-1716(gp) # 80008acc <uxPendedTicks>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
					while( uxPendedTicks > ( UBaseType_t ) 0U )
800025f8:	94c1a783          	lw	a5,-1716(gp) # 80008acc <uxPendedTicks>
800025fc:	fc079ee3          	bnez	a5,800025d8 <xTaskResumeAll+0x104>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1736
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
80002600:	9501a703          	lw	a4,-1712(gp) # 80008ad0 <xYieldPending>
80002604:	00100793          	li	a5,1
80002608:	00f71863          	bne	a4,a5,80002618 <xTaskResumeAll+0x144>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1740
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
8000260c:	00100793          	li	a5,1
80002610:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1743
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
80002614:	d24ff0ef          	jal	ra,80001b38 <vPortYield>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1756
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
80002618:	86cff0ef          	jal	ra,80001684 <vPortExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1758

	return xAlreadyYielded;
8000261c:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1759
}
80002620:	00078513          	mv	a0,a5
80002624:	01c12083          	lw	ra,28(sp)
80002628:	01812403          	lw	s0,24(sp)
8000262c:	02010113          	addi	sp,sp,32
80002630:	00008067          	ret

80002634 <xTaskGetTickCount>:
xTaskGetTickCount():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1763
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
80002634:	fe010113          	addi	sp,sp,-32
80002638:	00112e23          	sw	ra,28(sp)
8000263c:	00812c23          	sw	s0,24(sp)
80002640:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1767
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
80002644:	80cff0ef          	jal	ra,80001650 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1769
	{
		xTicks = xTickCount;
80002648:	9401a783          	lw	a5,-1728(gp) # 80008ac0 <xTickCount>
8000264c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1771
	}
	portTICK_TYPE_EXIT_CRITICAL();
80002650:	834ff0ef          	jal	ra,80001684 <vPortExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1773

	return xTicks;
80002654:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1774
}
80002658:	00078513          	mv	a0,a5
8000265c:	01c12083          	lw	ra,28(sp)
80002660:	01812403          	lw	s0,24(sp)
80002664:	02010113          	addi	sp,sp,32
80002668:	00008067          	ret

8000266c <xTaskIncrementTick>:
xTaskIncrementTick():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1938

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
8000266c:	fd010113          	addi	sp,sp,-48
80002670:	02112623          	sw	ra,44(sp)
80002674:	02812423          	sw	s0,40(sp)
80002678:	03010413          	addi	s0,sp,48
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1941
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
8000267c:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1947

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80002680:	9601a783          	lw	a5,-1696(gp) # 80008ae0 <uxSchedulerSuspended>
80002684:	1a079063          	bnez	a5,80002824 <xTaskIncrementTick+0x1b8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1951
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
80002688:	9401a783          	lw	a5,-1728(gp) # 80008ac0 <xTickCount>
8000268c:	00178713          	addi	a4,a5,1
80002690:	94e1a023          	sw	a4,-1728(gp) # 80008ac0 <xTickCount>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1956

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
80002694:	9401a783          	lw	a5,-1728(gp) # 80008ac0 <xTickCount>
80002698:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1958

			if( xConstTickCount == ( TickType_t ) 0U )
8000269c:	fe842783          	lw	a5,-24(s0)
800026a0:	04079063          	bnez	a5,800026e0 <xTaskIncrementTick+0x74>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960
			{
				taskSWITCH_DELAYED_LISTS();
800026a4:	9301a783          	lw	a5,-1744(gp) # 80008ab0 <pxDelayedTaskList>
800026a8:	0007a783          	lw	a5,0(a5)
800026ac:	00078663          	beqz	a5,800026b8 <xTaskIncrementTick+0x4c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 1)
800026b0:	30047073          	csrci	mstatus,8
800026b4:	0000006f          	j	800026b4 <xTaskIncrementTick+0x48>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 2)
800026b8:	9301a783          	lw	a5,-1744(gp) # 80008ab0 <pxDelayedTaskList>
800026bc:	fef42223          	sw	a5,-28(s0)
800026c0:	9341a703          	lw	a4,-1740(gp) # 80008ab4 <pxOverflowDelayedTaskList>
800026c4:	92e1a823          	sw	a4,-1744(gp) # 80008ab0 <pxDelayedTaskList>
800026c8:	fe442703          	lw	a4,-28(s0)
800026cc:	92e1aa23          	sw	a4,-1740(gp) # 80008ab4 <pxOverflowDelayedTaskList>
800026d0:	9541a783          	lw	a5,-1708(gp) # 80008ad4 <xNumOfOverflows>
800026d4:	00178713          	addi	a4,a5,1
800026d8:	94e1aa23          	sw	a4,-1708(gp) # 80008ad4 <xNumOfOverflows>
800026dc:	6bc000ef          	jal	ra,80002d98 <prvResetNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1971

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
800026e0:	95c1a783          	lw	a5,-1700(gp) # 80008adc <xNextTaskUnblockTime>
800026e4:	fe842703          	lw	a4,-24(s0)
800026e8:	10f76063          	bltu	a4,a5,800027e8 <xTaskIncrementTick+0x17c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
800026ec:	9301a783          	lw	a5,-1744(gp) # 80008ab0 <pxDelayedTaskList>
800026f0:	0007a783          	lw	a5,0(a5)
800026f4:	00079663          	bnez	a5,80002700 <xTaskIncrementTick+0x94>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 1)
800026f8:	00100793          	li	a5,1
800026fc:	0080006f          	j	80002704 <xTaskIncrementTick+0x98>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 2)
80002700:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 4)
80002704:	00078863          	beqz	a5,80002714 <xTaskIncrementTick+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1982
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
80002708:	fff00713          	li	a4,-1
8000270c:	94e1ae23          	sw	a4,-1700(gp) # 80008adc <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1983
						break;
80002710:	0d80006f          	j	800027e8 <xTaskIncrementTick+0x17c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1991
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80002714:	9301a783          	lw	a5,-1744(gp) # 80008ab0 <pxDelayedTaskList>
80002718:	00c7a783          	lw	a5,12(a5)
8000271c:	00c7a783          	lw	a5,12(a5)
80002720:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1992
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
80002724:	fe042783          	lw	a5,-32(s0)
80002728:	0047a783          	lw	a5,4(a5)
8000272c:	fcf42e23          	sw	a5,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1994

						if( xConstTickCount < xItemValue )
80002730:	fe842703          	lw	a4,-24(s0)
80002734:	fdc42783          	lw	a5,-36(s0)
80002738:	00f77863          	bleu	a5,a4,80002748 <xTaskIncrementTick+0xdc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2001
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
8000273c:	fdc42703          	lw	a4,-36(s0)
80002740:	94e1ae23          	sw	a4,-1700(gp) # 80008adc <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2002
							break;
80002744:	0a40006f          	j	800027e8 <xTaskIncrementTick+0x17c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2010
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80002748:	fe042783          	lw	a5,-32(s0)
8000274c:	00478793          	addi	a5,a5,4
80002750:	00078513          	mv	a0,a5
80002754:	df4ff0ef          	jal	ra,80001d48 <uxListRemove>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2014

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
80002758:	fe042783          	lw	a5,-32(s0)
8000275c:	0287a783          	lw	a5,40(a5)
80002760:	00078a63          	beqz	a5,80002774 <xTaskIncrementTick+0x108>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2016
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002764:	fe042783          	lw	a5,-32(s0)
80002768:	01878793          	addi	a5,a5,24
8000276c:	00078513          	mv	a0,a5
80002770:	dd8ff0ef          	jal	ra,80001d48 <uxListRemove>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
80002774:	fe042783          	lw	a5,-32(s0)
80002778:	02c7a703          	lw	a4,44(a5)
8000277c:	9441a783          	lw	a5,-1724(gp) # 80008ac4 <uxTopReadyPriority>
80002780:	00e7f863          	bleu	a4,a5,80002790 <xTaskIncrementTick+0x124>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 1)
80002784:	fe042783          	lw	a5,-32(s0)
80002788:	02c7a703          	lw	a4,44(a5)
8000278c:	94e1a223          	sw	a4,-1724(gp) # 80008ac4 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 3)
80002790:	fe042783          	lw	a5,-32(s0)
80002794:	02c7a703          	lw	a4,44(a5)
80002798:	00070793          	mv	a5,a4
8000279c:	00279793          	slli	a5,a5,0x2
800027a0:	00e787b3          	add	a5,a5,a4
800027a4:	00279793          	slli	a5,a5,0x2
800027a8:	80022737          	lui	a4,0x80022
800027ac:	b2070713          	addi	a4,a4,-1248 # 80021b20 <__stack_top+0xfffde710>
800027b0:	00e78733          	add	a4,a5,a4
800027b4:	fe042783          	lw	a5,-32(s0)
800027b8:	00478793          	addi	a5,a5,4
800027bc:	00078593          	mv	a1,a5
800027c0:	00070513          	mv	a0,a4
800027c4:	c28ff0ef          	jal	ra,80001bec <vListInsertEnd>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2035 (discriminator 3)
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
800027c8:	fe042783          	lw	a5,-32(s0)
800027cc:	02c7a703          	lw	a4,44(a5)
800027d0:	92c1a783          	lw	a5,-1748(gp) # 80008aac <pxCurrentTCB>
800027d4:	02c7a783          	lw	a5,44(a5)
800027d8:	f0f76ae3          	bltu	a4,a5,800026ec <xTaskIncrementTick+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2037
							{
								xSwitchRequired = pdTRUE;
800027dc:	00100793          	li	a5,1
800027e0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
800027e4:	f09ff06f          	j	800026ec <xTaskIncrementTick+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2055
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
800027e8:	92c1a783          	lw	a5,-1748(gp) # 80008aac <pxCurrentTCB>
800027ec:	02c7a703          	lw	a4,44(a5)
800027f0:	800226b7          	lui	a3,0x80022
800027f4:	00070793          	mv	a5,a4
800027f8:	00279793          	slli	a5,a5,0x2
800027fc:	00e787b3          	add	a5,a5,a4
80002800:	00279793          	slli	a5,a5,0x2
80002804:	b2068713          	addi	a4,a3,-1248 # 80021b20 <__stack_top+0xfffde710>
80002808:	00e787b3          	add	a5,a5,a4
8000280c:	0007a703          	lw	a4,0(a5)
80002810:	00100793          	li	a5,1
80002814:	00e7fe63          	bleu	a4,a5,80002830 <xTaskIncrementTick+0x1c4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2057
			{
				xSwitchRequired = pdTRUE;
80002818:	00100793          	li	a5,1
8000281c:	fef42623          	sw	a5,-20(s0)
80002820:	0100006f          	j	80002830 <xTaskIncrementTick+0x1c4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2083
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
80002824:	94c1a783          	lw	a5,-1716(gp) # 80008acc <uxPendedTicks>
80002828:	00178713          	addi	a4,a5,1
8000282c:	94e1a623          	sw	a4,-1716(gp) # 80008acc <uxPendedTicks>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2096
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
80002830:	9501a783          	lw	a5,-1712(gp) # 80008ad0 <xYieldPending>
80002834:	00078663          	beqz	a5,80002840 <xTaskIncrementTick+0x1d4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2098
		{
			xSwitchRequired = pdTRUE;
80002838:	00100793          	li	a5,1
8000283c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2107
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
80002840:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2108
}
80002844:	00078513          	mv	a0,a5
80002848:	02c12083          	lw	ra,44(sp)
8000284c:	02812403          	lw	s0,40(sp)
80002850:	03010113          	addi	sp,sp,48
80002854:	00008067          	ret

80002858 <vTaskSwitchContext>:
vTaskSwitchContext():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2202

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
80002858:	fe010113          	addi	sp,sp,-32
8000285c:	00812e23          	sw	s0,28(sp)
80002860:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2203
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
80002864:	9601a783          	lw	a5,-1696(gp) # 80008ae0 <uxSchedulerSuspended>
80002868:	00078863          	beqz	a5,80002878 <vTaskSwitchContext+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2207
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
8000286c:	00100713          	li	a4,1
80002870:	94e1a823          	sw	a4,-1712(gp) # 80008ad0 <xYieldPending>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
80002874:	0c00006f          	j	80002934 <vTaskSwitchContext+0xdc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2211
		xYieldPending = pdFALSE;
80002878:	9401a823          	sw	zero,-1712(gp) # 80008ad0 <xYieldPending>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246
		taskSELECT_HIGHEST_PRIORITY_TASK();
8000287c:	0200006f          	j	8000289c <vTaskSwitchContext+0x44>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 4)
80002880:	9441a783          	lw	a5,-1724(gp) # 80008ac4 <uxTopReadyPriority>
80002884:	00079663          	bnez	a5,80002890 <vTaskSwitchContext+0x38>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 1)
80002888:	30047073          	csrci	mstatus,8
8000288c:	0000006f          	j	8000288c <vTaskSwitchContext+0x34>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 2)
80002890:	9441a783          	lw	a5,-1724(gp) # 80008ac4 <uxTopReadyPriority>
80002894:	fff78713          	addi	a4,a5,-1
80002898:	94e1a223          	sw	a4,-1724(gp) # 80008ac4 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 3)
8000289c:	9441a703          	lw	a4,-1724(gp) # 80008ac4 <uxTopReadyPriority>
800028a0:	800226b7          	lui	a3,0x80022
800028a4:	00070793          	mv	a5,a4
800028a8:	00279793          	slli	a5,a5,0x2
800028ac:	00e787b3          	add	a5,a5,a4
800028b0:	00279793          	slli	a5,a5,0x2
800028b4:	b2068713          	addi	a4,a3,-1248 # 80021b20 <__stack_top+0xfffde710>
800028b8:	00e787b3          	add	a5,a5,a4
800028bc:	0007a783          	lw	a5,0(a5)
800028c0:	fc0780e3          	beqz	a5,80002880 <vTaskSwitchContext+0x28>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 5)
800028c4:	9441a703          	lw	a4,-1724(gp) # 80008ac4 <uxTopReadyPriority>
800028c8:	00070793          	mv	a5,a4
800028cc:	00279793          	slli	a5,a5,0x2
800028d0:	00e787b3          	add	a5,a5,a4
800028d4:	00279793          	slli	a5,a5,0x2
800028d8:	80022737          	lui	a4,0x80022
800028dc:	b2070713          	addi	a4,a4,-1248 # 80021b20 <__stack_top+0xfffde710>
800028e0:	00e787b3          	add	a5,a5,a4
800028e4:	fef42623          	sw	a5,-20(s0)
800028e8:	fec42783          	lw	a5,-20(s0)
800028ec:	0047a783          	lw	a5,4(a5)
800028f0:	0047a703          	lw	a4,4(a5)
800028f4:	fec42783          	lw	a5,-20(s0)
800028f8:	00e7a223          	sw	a4,4(a5)
800028fc:	fec42783          	lw	a5,-20(s0)
80002900:	0047a703          	lw	a4,4(a5)
80002904:	fec42783          	lw	a5,-20(s0)
80002908:	00878793          	addi	a5,a5,8
8000290c:	00f71c63          	bne	a4,a5,80002924 <vTaskSwitchContext+0xcc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 6)
80002910:	fec42783          	lw	a5,-20(s0)
80002914:	0047a783          	lw	a5,4(a5)
80002918:	0047a703          	lw	a4,4(a5)
8000291c:	fec42783          	lw	a5,-20(s0)
80002920:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 8)
80002924:	fec42783          	lw	a5,-20(s0)
80002928:	0047a783          	lw	a5,4(a5)
8000292c:	00c7a703          	lw	a4,12(a5)
80002930:	92e1a623          	sw	a4,-1748(gp) # 80008aac <pxCurrentTCB>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
}
80002934:	00000013          	nop
80002938:	01c12403          	lw	s0,28(sp)
8000293c:	02010113          	addi	sp,sp,32
80002940:	00008067          	ret

80002944 <prvIdleTask>:
prvIdleTask():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2689
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
80002944:	fe010113          	addi	sp,sp,-32
80002948:	00112e23          	sw	ra,28(sp)
8000294c:	00812c23          	sw	s0,24(sp)
80002950:	02010413          	addi	s0,sp,32
80002954:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
80002958:	218000ef          	jal	ra,80002b70 <prvCheckTasksWaitingTermination>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2719

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
8000295c:	800227b7          	lui	a5,0x80022
80002960:	b207a703          	lw	a4,-1248(a5) # 80021b20 <__stack_top+0xfffde710>
80002964:	00100793          	li	a5,1
80002968:	00e7f463          	bleu	a4,a5,80002970 <prvIdleTask+0x2c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2721
			{
				taskYIELD();
8000296c:	9ccff0ef          	jal	ra,80001b38 <vPortYield>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2739
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
80002970:	408050ef          	jal	ra,80007d78 <vApplicationIdleHook>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
		prvCheckTasksWaitingTermination();
80002974:	fe5ff06f          	j	80002958 <prvIdleTask+0x14>

80002978 <prvInitialiseTCBVariables>:
prvInitialiseTCBVariables():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2832

#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80002978:	fc010113          	addi	sp,sp,-64
8000297c:	02112e23          	sw	ra,60(sp)
80002980:	02812c23          	sw	s0,56(sp)
80002984:	04010413          	addi	s0,sp,64
80002988:	fca42e23          	sw	a0,-36(s0)
8000298c:	fcb42c23          	sw	a1,-40(s0)
80002990:	fcc42a23          	sw	a2,-44(s0)
80002994:	fcd42823          	sw	a3,-48(s0)
80002998:	00070793          	mv	a5,a4
8000299c:	fcf41723          	sh	a5,-50(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
800029a0:	fe042623          	sw	zero,-20(s0)
800029a4:	0440006f          	j	800029e8 <prvInitialiseTCBVariables+0x70>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2838
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
800029a8:	fd842703          	lw	a4,-40(s0)
800029ac:	fec42783          	lw	a5,-20(s0)
800029b0:	00f707b3          	add	a5,a4,a5
800029b4:	00078703          	lb	a4,0(a5)
800029b8:	fdc42683          	lw	a3,-36(s0)
800029bc:	fec42783          	lw	a5,-20(s0)
800029c0:	00f687b3          	add	a5,a3,a5
800029c4:	02e78a23          	sb	a4,52(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2843

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
800029c8:	fd842703          	lw	a4,-40(s0)
800029cc:	fec42783          	lw	a5,-20(s0)
800029d0:	00f707b3          	add	a5,a4,a5
800029d4:	00078783          	lb	a5,0(a5)
800029d8:	02078063          	beqz	a5,800029f8 <prvInitialiseTCBVariables+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 2)
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
800029dc:	fec42783          	lw	a5,-20(s0)
800029e0:	00178793          	addi	a5,a5,1
800029e4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 1)
800029e8:	fec42703          	lw	a4,-20(s0)
800029ec:	00f00793          	li	a5,15
800029f0:	fae7fce3          	bleu	a4,a5,800029a8 <prvInitialiseTCBVariables+0x30>
800029f4:	0080006f          	j	800029fc <prvInitialiseTCBVariables+0x84>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2845
		{
			break;
800029f8:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2855
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
800029fc:	fdc42783          	lw	a5,-36(s0)
80002a00:	040781a3          	sb	zero,67(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2859

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
80002a04:	fd442703          	lw	a4,-44(s0)
80002a08:	00400793          	li	a5,4
80002a0c:	00e7f663          	bleu	a4,a5,80002a18 <prvInitialiseTCBVariables+0xa0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2861
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
80002a10:	00400793          	li	a5,4
80002a14:	fcf42a23          	sw	a5,-44(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2868
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
80002a18:	fdc42783          	lw	a5,-36(s0)
80002a1c:	fd442703          	lw	a4,-44(s0)
80002a20:	02e7a623          	sw	a4,44(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2871
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
80002a24:	fdc42783          	lw	a5,-36(s0)
80002a28:	fd442703          	lw	a4,-44(s0)
80002a2c:	04e7a823          	sw	a4,80(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2872
		pxTCB->uxMutexesHeld = 0;
80002a30:	fdc42783          	lw	a5,-36(s0)
80002a34:	0407aa23          	sw	zero,84(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2876
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
80002a38:	fdc42783          	lw	a5,-36(s0)
80002a3c:	00478793          	addi	a5,a5,4
80002a40:	00078513          	mv	a0,a5
80002a44:	980ff0ef          	jal	ra,80001bc4 <vListInitialiseItem>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2877
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
80002a48:	fdc42783          	lw	a5,-36(s0)
80002a4c:	01878793          	addi	a5,a5,24
80002a50:	00078513          	mv	a0,a5
80002a54:	970ff0ef          	jal	ra,80001bc4 <vListInitialiseItem>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2881

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
80002a58:	fdc42783          	lw	a5,-36(s0)
80002a5c:	fdc42703          	lw	a4,-36(s0)
80002a60:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2884

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80002a64:	00500713          	li	a4,5
80002a68:	fd442783          	lw	a5,-44(s0)
80002a6c:	40f70733          	sub	a4,a4,a5
80002a70:	fdc42783          	lw	a5,-36(s0)
80002a74:	00e7ac23          	sw	a4,24(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2885
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
80002a78:	fdc42783          	lw	a5,-36(s0)
80002a7c:	fdc42703          	lw	a4,-36(s0)
80002a80:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2889

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
80002a84:	fdc42783          	lw	a5,-36(s0)
80002a88:	0407a223          	sw	zero,68(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2927
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
80002a8c:	fdc42783          	lw	a5,-36(s0)
80002a90:	0407ac23          	sw	zero,88(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2928
		pxTCB->eNotifyState = eNotWaitingNotification;
80002a94:	fdc42783          	lw	a5,-36(s0)
80002a98:	0407ae23          	sw	zero,92(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2938
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
80002a9c:	00000013          	nop
80002aa0:	03c12083          	lw	ra,60(sp)
80002aa4:	03812403          	lw	s0,56(sp)
80002aa8:	04010113          	addi	sp,sp,64
80002aac:	00008067          	ret

80002ab0 <prvInitialiseTaskLists>:
prvInitialiseTaskLists():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2997

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
80002ab0:	fe010113          	addi	sp,sp,-32
80002ab4:	00112e23          	sw	ra,28(sp)
80002ab8:	00812c23          	sw	s0,24(sp)
80002abc:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
80002ac0:	fe042623          	sw	zero,-20(s0)
80002ac4:	0380006f          	j	80002afc <prvInitialiseTaskLists+0x4c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3002 (discriminator 3)
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
80002ac8:	fec42703          	lw	a4,-20(s0)
80002acc:	00070793          	mv	a5,a4
80002ad0:	00279793          	slli	a5,a5,0x2
80002ad4:	00e787b3          	add	a5,a5,a4
80002ad8:	00279793          	slli	a5,a5,0x2
80002adc:	80022737          	lui	a4,0x80022
80002ae0:	b2070713          	addi	a4,a4,-1248 # 80021b20 <__stack_top+0xfffde710>
80002ae4:	00e787b3          	add	a5,a5,a4
80002ae8:	00078513          	mv	a0,a5
80002aec:	874ff0ef          	jal	ra,80001b60 <vListInitialise>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 3)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
80002af0:	fec42783          	lw	a5,-20(s0)
80002af4:	00178793          	addi	a5,a5,1
80002af8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 1)
80002afc:	fec42703          	lw	a4,-20(s0)
80002b00:	00400793          	li	a5,4
80002b04:	fce7f2e3          	bleu	a4,a5,80002ac8 <prvInitialiseTaskLists+0x18>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3005
	}

	vListInitialise( &xDelayedTaskList1 );
80002b08:	800227b7          	lui	a5,0x80022
80002b0c:	b8478513          	addi	a0,a5,-1148 # 80021b84 <__stack_top+0xfffde774>
80002b10:	850ff0ef          	jal	ra,80001b60 <vListInitialise>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3006
	vListInitialise( &xDelayedTaskList2 );
80002b14:	800227b7          	lui	a5,0x80022
80002b18:	b9878513          	addi	a0,a5,-1128 # 80021b98 <__stack_top+0xfffde788>
80002b1c:	844ff0ef          	jal	ra,80001b60 <vListInitialise>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3007
	vListInitialise( &xPendingReadyList );
80002b20:	800227b7          	lui	a5,0x80022
80002b24:	bac78513          	addi	a0,a5,-1108 # 80021bac <__stack_top+0xfffde79c>
80002b28:	838ff0ef          	jal	ra,80001b60 <vListInitialise>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3011

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
80002b2c:	800227b7          	lui	a5,0x80022
80002b30:	bc078513          	addi	a0,a5,-1088 # 80021bc0 <__stack_top+0xfffde7b0>
80002b34:	82cff0ef          	jal	ra,80001b60 <vListInitialise>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3017
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
80002b38:	800227b7          	lui	a5,0x80022
80002b3c:	bd478513          	addi	a0,a5,-1068 # 80021bd4 <__stack_top+0xfffde7c4>
80002b40:	820ff0ef          	jal	ra,80001b60 <vListInitialise>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3023
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
80002b44:	80022737          	lui	a4,0x80022
80002b48:	b8470713          	addi	a4,a4,-1148 # 80021b84 <__stack_top+0xfffde774>
80002b4c:	92e1a823          	sw	a4,-1744(gp) # 80008ab0 <pxDelayedTaskList>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3024
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
80002b50:	80022737          	lui	a4,0x80022
80002b54:	b9870713          	addi	a4,a4,-1128 # 80021b98 <__stack_top+0xfffde788>
80002b58:	92e1aa23          	sw	a4,-1740(gp) # 80008ab4 <pxOverflowDelayedTaskList>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3025
}
80002b5c:	00000013          	nop
80002b60:	01c12083          	lw	ra,28(sp)
80002b64:	01812403          	lw	s0,24(sp)
80002b68:	02010113          	addi	sp,sp,32
80002b6c:	00008067          	ret

80002b70 <prvCheckTasksWaitingTermination>:
prvCheckTasksWaitingTermination():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3029
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
80002b70:	fe010113          	addi	sp,sp,-32
80002b74:	00112e23          	sw	ra,28(sp)
80002b78:	00812c23          	sw	s0,24(sp)
80002b7c:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
80002b80:	0740006f          	j	80002bf4 <prvCheckTasksWaitingTermination+0x84>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3038
		{
			vTaskSuspendAll();
80002b84:	929ff0ef          	jal	ra,800024ac <vTaskSuspendAll>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3040
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
80002b88:	800227b7          	lui	a5,0x80022
80002b8c:	bc07a783          	lw	a5,-1088(a5) # 80021bc0 <__stack_top+0xfffde7b0>
80002b90:	0017b793          	seqz	a5,a5
80002b94:	0ff7f793          	andi	a5,a5,255
80002b98:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3042
			}
			( void ) xTaskResumeAll();
80002b9c:	939ff0ef          	jal	ra,800024d4 <xTaskResumeAll>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3044

			if( xListIsEmpty == pdFALSE )
80002ba0:	fec42783          	lw	a5,-20(s0)
80002ba4:	04079863          	bnez	a5,80002bf4 <prvCheckTasksWaitingTermination+0x84>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3048
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
80002ba8:	aa9fe0ef          	jal	ra,80001650 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3050
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
80002bac:	800227b7          	lui	a5,0x80022
80002bb0:	bc078793          	addi	a5,a5,-1088 # 80021bc0 <__stack_top+0xfffde7b0>
80002bb4:	00c7a783          	lw	a5,12(a5)
80002bb8:	00c7a783          	lw	a5,12(a5)
80002bbc:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3051
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80002bc0:	fe842783          	lw	a5,-24(s0)
80002bc4:	00478793          	addi	a5,a5,4
80002bc8:	00078513          	mv	a0,a5
80002bcc:	97cff0ef          	jal	ra,80001d48 <uxListRemove>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3052
					--uxCurrentNumberOfTasks;
80002bd0:	93c1a783          	lw	a5,-1732(gp) # 80008abc <uxCurrentNumberOfTasks>
80002bd4:	fff78713          	addi	a4,a5,-1
80002bd8:	92e1ae23          	sw	a4,-1732(gp) # 80008abc <uxCurrentNumberOfTasks>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3053
					--uxTasksDeleted;
80002bdc:	9381a783          	lw	a5,-1736(gp) # 80008ab8 <uxTasksDeleted>
80002be0:	fff78713          	addi	a4,a5,-1
80002be4:	92e1ac23          	sw	a4,-1736(gp) # 80008ab8 <uxTasksDeleted>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3055
				}
				taskEXIT_CRITICAL();
80002be8:	a9dfe0ef          	jal	ra,80001684 <vPortExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3057

				prvDeleteTCB( pxTCB );
80002bec:	fe842503          	lw	a0,-24(s0)
80002bf0:	168000ef          	jal	ra,80002d58 <prvDeleteTCB>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
80002bf4:	9381a783          	lw	a5,-1736(gp) # 80008ab8 <uxTasksDeleted>
80002bf8:	f80796e3          	bnez	a5,80002b84 <prvCheckTasksWaitingTermination+0x14>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3066
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
80002bfc:	00000013          	nop
80002c00:	01c12083          	lw	ra,28(sp)
80002c04:	01812403          	lw	s0,24(sp)
80002c08:	02010113          	addi	sp,sp,32
80002c0c:	00008067          	ret

80002c10 <prvAddCurrentTaskToDelayedList>:
prvAddCurrentTaskToDelayedList():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3070
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
80002c10:	fe010113          	addi	sp,sp,-32
80002c14:	00112e23          	sw	ra,28(sp)
80002c18:	00812c23          	sw	s0,24(sp)
80002c1c:	02010413          	addi	s0,sp,32
80002c20:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3072
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
80002c24:	92c1a783          	lw	a5,-1748(gp) # 80008aac <pxCurrentTCB>
80002c28:	fec42703          	lw	a4,-20(s0)
80002c2c:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3074

	if( xTimeToWake < xTickCount )
80002c30:	9401a783          	lw	a5,-1728(gp) # 80008ac0 <xTickCount>
80002c34:	fec42703          	lw	a4,-20(s0)
80002c38:	02f77063          	bleu	a5,a4,80002c58 <prvAddCurrentTaskToDelayedList+0x48>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3077
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80002c3c:	9341a703          	lw	a4,-1740(gp) # 80008ab4 <pxOverflowDelayedTaskList>
80002c40:	92c1a783          	lw	a5,-1748(gp) # 80008aac <pxCurrentTCB>
80002c44:	00478793          	addi	a5,a5,4
80002c48:	00078593          	mv	a1,a5
80002c4c:	00070513          	mv	a0,a4
80002c50:	824ff0ef          	jal	ra,80001c74 <vListInsert>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
80002c54:	0300006f          	j	80002c84 <prvAddCurrentTaskToDelayedList+0x74>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3082
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80002c58:	9301a703          	lw	a4,-1744(gp) # 80008ab0 <pxDelayedTaskList>
80002c5c:	92c1a783          	lw	a5,-1748(gp) # 80008aac <pxCurrentTCB>
80002c60:	00478793          	addi	a5,a5,4
80002c64:	00078593          	mv	a1,a5
80002c68:	00070513          	mv	a0,a4
80002c6c:	808ff0ef          	jal	ra,80001c74 <vListInsert>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3087
		if( xTimeToWake < xNextTaskUnblockTime )
80002c70:	95c1a783          	lw	a5,-1700(gp) # 80008adc <xNextTaskUnblockTime>
80002c74:	fec42703          	lw	a4,-20(s0)
80002c78:	00f77663          	bleu	a5,a4,80002c84 <prvAddCurrentTaskToDelayedList+0x74>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3089
			xNextTaskUnblockTime = xTimeToWake;
80002c7c:	fec42703          	lw	a4,-20(s0)
80002c80:	94e1ae23          	sw	a4,-1700(gp) # 80008adc <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
}
80002c84:	00000013          	nop
80002c88:	01c12083          	lw	ra,28(sp)
80002c8c:	01812403          	lw	s0,24(sp)
80002c90:	02010113          	addi	sp,sp,32
80002c94:	00008067          	ret

80002c98 <prvAllocateTCBAndStack>:
prvAllocateTCBAndStack():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3100
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
80002c98:	fd010113          	addi	sp,sp,-48
80002c9c:	02112623          	sw	ra,44(sp)
80002ca0:	02812423          	sw	s0,40(sp)
80002ca4:	03010413          	addi	s0,sp,48
80002ca8:	00050793          	mv	a5,a0
80002cac:	fcb42c23          	sw	a1,-40(s0)
80002cb0:	fcf41f23          	sh	a5,-34(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80002cb4:	fd842783          	lw	a5,-40(s0)
80002cb8:	00079e63          	bnez	a5,80002cd4 <prvAllocateTCBAndStack+0x3c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 1)
80002cbc:	fde45783          	lhu	a5,-34(s0)
80002cc0:	00279793          	slli	a5,a5,0x2
80002cc4:	00078513          	mv	a0,a5
80002cc8:	e20fe0ef          	jal	ra,800012e8 <pvPortMalloc>
80002ccc:	00050793          	mv	a5,a0
80002cd0:	0080006f          	j	80002cd8 <prvAllocateTCBAndStack+0x40>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 2)
80002cd4:	fd842783          	lw	a5,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 4)
80002cd8:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3134 (discriminator 4)

		if( pxStack != NULL )
80002cdc:	fe842783          	lw	a5,-24(s0)
80002ce0:	02078a63          	beqz	a5,80002d14 <prvAllocateTCBAndStack+0x7c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3138
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
80002ce4:	06000513          	li	a0,96
80002ce8:	e00fe0ef          	jal	ra,800012e8 <pvPortMalloc>
80002cec:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3140

			if( pxNewTCB != NULL )
80002cf0:	fec42783          	lw	a5,-20(s0)
80002cf4:	00078a63          	beqz	a5,80002d08 <prvAllocateTCBAndStack+0x70>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3143
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
80002cf8:	fec42783          	lw	a5,-20(s0)
80002cfc:	fe842703          	lw	a4,-24(s0)
80002d00:	02e7a823          	sw	a4,48(a5)
80002d04:	0140006f          	j	80002d18 <prvAllocateTCBAndStack+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3149
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
80002d08:	fe842503          	lw	a0,-24(s0)
80002d0c:	fb8fe0ef          	jal	ra,800014c4 <vPortFree>
80002d10:	0080006f          	j	80002d18 <prvAllocateTCBAndStack+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3154
			}
		}
		else
		{
			pxNewTCB = NULL;
80002d14:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3159
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
80002d18:	fec42783          	lw	a5,-20(s0)
80002d1c:	02078263          	beqz	a5,80002d40 <prvAllocateTCBAndStack+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3165
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
80002d20:	fec42783          	lw	a5,-20(s0)
80002d24:	0307a703          	lw	a4,48(a5)
80002d28:	fde45783          	lhu	a5,-34(s0)
80002d2c:	00279793          	slli	a5,a5,0x2
80002d30:	00078613          	mv	a2,a5
80002d34:	0a500593          	li	a1,165
80002d38:	00070513          	mv	a0,a4
80002d3c:	8a4ff0ef          	jal	ra,80001de0 <memset>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3170
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
80002d40:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3171
}
80002d44:	00078513          	mv	a0,a5
80002d48:	02c12083          	lw	ra,44(sp)
80002d4c:	02812403          	lw	s0,40(sp)
80002d50:	03010113          	addi	sp,sp,48
80002d54:	00008067          	ret

80002d58 <prvDeleteTCB>:
prvDeleteTCB():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3310
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
80002d58:	fe010113          	addi	sp,sp,-32
80002d5c:	00112e23          	sw	ra,28(sp)
80002d60:	00812c23          	sw	s0,24(sp)
80002d64:	02010413          	addi	s0,sp,32
80002d68:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3335
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
80002d6c:	fec42783          	lw	a5,-20(s0)
80002d70:	0307a783          	lw	a5,48(a5)
80002d74:	00078513          	mv	a0,a5
80002d78:	f4cfe0ef          	jal	ra,800014c4 <vPortFree>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3339
		}
		#endif

		vPortFree( pxTCB );
80002d7c:	fec42503          	lw	a0,-20(s0)
80002d80:	f44fe0ef          	jal	ra,800014c4 <vPortFree>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3340
	}
80002d84:	00000013          	nop
80002d88:	01c12083          	lw	ra,28(sp)
80002d8c:	01812403          	lw	s0,24(sp)
80002d90:	02010113          	addi	sp,sp,32
80002d94:	00008067          	ret

80002d98 <prvResetNextTaskUnblockTime>:
prvResetNextTaskUnblockTime():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3346

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
80002d98:	fe010113          	addi	sp,sp,-32
80002d9c:	00812e23          	sw	s0,28(sp)
80002da0:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80002da4:	9301a783          	lw	a5,-1744(gp) # 80008ab0 <pxDelayedTaskList>
80002da8:	0007a783          	lw	a5,0(a5)
80002dac:	00079663          	bnez	a5,80002db8 <prvResetNextTaskUnblockTime+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 1)
80002db0:	00100793          	li	a5,1
80002db4:	0080006f          	j	80002dbc <prvResetNextTaskUnblockTime+0x24>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 2)
80002db8:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 4)
80002dbc:	00078863          	beqz	a5,80002dcc <prvResetNextTaskUnblockTime+0x34>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3355
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
80002dc0:	fff00713          	li	a4,-1
80002dc4:	94e1ae23          	sw	a4,-1700(gp) # 80008adc <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
80002dc8:	0200006f          	j	80002de8 <prvResetNextTaskUnblockTime+0x50>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3363
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80002dcc:	9301a783          	lw	a5,-1744(gp) # 80008ab0 <pxDelayedTaskList>
80002dd0:	00c7a783          	lw	a5,12(a5)
80002dd4:	00c7a783          	lw	a5,12(a5)
80002dd8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3364
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
80002ddc:	fec42783          	lw	a5,-20(s0)
80002de0:	0047a703          	lw	a4,4(a5)
80002de4:	94e1ae23          	sw	a4,-1700(gp) # 80008adc <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
}
80002de8:	00000013          	nop
80002dec:	01c12403          	lw	s0,28(sp)
80002df0:	02010113          	addi	sp,sp,32
80002df4:	00008067          	ret

80002df8 <xTaskGetCurrentTaskHandle>:
xTaskGetCurrentTaskHandle():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3372
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
80002df8:	fe010113          	addi	sp,sp,-32
80002dfc:	00812e23          	sw	s0,28(sp)
80002e00:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3378
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
80002e04:	92c1a783          	lw	a5,-1748(gp) # 80008aac <pxCurrentTCB>
80002e08:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3380

		return xReturn;
80002e0c:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3381
	}
80002e10:	00078513          	mv	a0,a5
80002e14:	01c12403          	lw	s0,28(sp)
80002e18:	02010113          	addi	sp,sp,32
80002e1c:	00008067          	ret

80002e20 <vTaskEnterCritical>:
vTaskEnterCritical():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3564
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
80002e20:	ff010113          	addi	sp,sp,-16
80002e24:	00812623          	sw	s0,12(sp)
80002e28:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3565
		portDISABLE_INTERRUPTS();
80002e2c:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3567

		if( xSchedulerRunning != pdFALSE )
80002e30:	9481a783          	lw	a5,-1720(gp) # 80008ac8 <xSchedulerRunning>
80002e34:	00078c63          	beqz	a5,80002e4c <vTaskEnterCritical+0x2c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3569
		{
			( pxCurrentTCB->uxCriticalNesting )++;
80002e38:	92c1a783          	lw	a5,-1748(gp) # 80008aac <pxCurrentTCB>
80002e3c:	0447a703          	lw	a4,68(a5)
80002e40:	00170713          	addi	a4,a4,1
80002e44:	04e7a223          	sw	a4,68(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3577
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
80002e48:	92c1a783          	lw	a5,-1748(gp) # 80008aac <pxCurrentTCB>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3586
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80002e4c:	00000013          	nop
80002e50:	00c12403          	lw	s0,12(sp)
80002e54:	01010113          	addi	sp,sp,16
80002e58:	00008067          	ret

80002e5c <vTaskExitCritical>:
vTaskExitCritical():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3594
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
80002e5c:	ff010113          	addi	sp,sp,-16
80002e60:	00812623          	sw	s0,12(sp)
80002e64:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3595
		if( xSchedulerRunning != pdFALSE )
80002e68:	9481a783          	lw	a5,-1720(gp) # 80008ac8 <xSchedulerRunning>
80002e6c:	02078863          	beqz	a5,80002e9c <vTaskExitCritical+0x40>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3597
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
80002e70:	92c1a783          	lw	a5,-1748(gp) # 80008aac <pxCurrentTCB>
80002e74:	0447a783          	lw	a5,68(a5)
80002e78:	02078263          	beqz	a5,80002e9c <vTaskExitCritical+0x40>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3599
			{
				( pxCurrentTCB->uxCriticalNesting )--;
80002e7c:	92c1a783          	lw	a5,-1748(gp) # 80008aac <pxCurrentTCB>
80002e80:	0447a703          	lw	a4,68(a5)
80002e84:	fff70713          	addi	a4,a4,-1
80002e88:	04e7a223          	sw	a4,68(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3601

				if( pxCurrentTCB->uxCriticalNesting == 0U )
80002e8c:	92c1a783          	lw	a5,-1748(gp) # 80008aac <pxCurrentTCB>
80002e90:	0447a783          	lw	a5,68(a5)
80002e94:	00079463          	bnez	a5,80002e9c <vTaskExitCritical+0x40>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3603
				{
					portENABLE_INTERRUPTS();
80002e98:	30046073          	csrsi	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3619
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80002e9c:	00000013          	nop
80002ea0:	00c12403          	lw	s0,12(sp)
80002ea4:	01010113          	addi	sp,sp,16
80002ea8:	00008067          	ret

80002eac <API_RepositoryWakeUp>:
API_RepositoryWakeUp():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:10
#include "packet.h"
#include "services.h"

////////////////////////////////////////////////////////////
// Informs the Repository that the GLOBALMASTER is ready to receive the application info
void API_RepositoryWakeUp(){
80002eac:	fe010113          	addi	sp,sp,-32
80002eb0:	00112e23          	sw	ra,28(sp)
80002eb4:	00812c23          	sw	s0,24(sp)
80002eb8:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:13
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80002ebc:	198020ef          	jal	ra,80005054 <API_GetServiceSlot>
80002ec0:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:14
        if(mySlot == PIPE_FULL){
80002ec4:	fec42703          	lw	a4,-20(s0)
80002ec8:	fdfe07b7          	lui	a5,0xfdfe0
80002ecc:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9c9ed>
80002ed0:	00f71463          	bne	a4,a5,80002ed8 <API_RepositoryWakeUp+0x2c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:16
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80002ed4:	294040ef          	jal	ra,80007168 <API_NI_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:18
        }
    }while(mySlot == PIPE_FULL);
80002ed8:	fec42703          	lw	a4,-20(s0)
80002edc:	fdfe07b7          	lui	a5,0xfdfe0
80002ee0:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9c9ed>
80002ee4:	fcf70ce3          	beq	a4,a5,80002ebc <API_RepositoryWakeUp+0x10>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:21
    //printsv("I got a free service slot!! -> ", mySlot);

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80002ee8:	800227b7          	lui	a5,0x80022
80002eec:	fec42703          	lw	a4,-20(s0)
80002ef0:	bec78693          	addi	a3,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
80002ef4:	00070793          	mv	a5,a4
80002ef8:	00479793          	slli	a5,a5,0x4
80002efc:	40e787b3          	sub	a5,a5,a4
80002f00:	00279793          	slli	a5,a5,0x2
80002f04:	00f687b3          	add	a5,a3,a5
80002f08:	feff0737          	lui	a4,0xfeff0
80002f0c:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efacaee>
80002f10:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:23

    ServicePipe[mySlot].header.header       = makeAddress(0, 0) | PERIPH_SOUTH;
80002f14:	00000593          	li	a1,0
80002f18:	00000513          	li	a0,0
80002f1c:	3c0030ef          	jal	ra,800062dc <makeAddress>
80002f20:	00050713          	mv	a4,a0
80002f24:	000407b7          	lui	a5,0x40
80002f28:	00f766b3          	or	a3,a4,a5
80002f2c:	800227b7          	lui	a5,0x80022
80002f30:	fec42703          	lw	a4,-20(s0)
80002f34:	bec78613          	addi	a2,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
80002f38:	00070793          	mv	a5,a4
80002f3c:	00479793          	slli	a5,a5,0x4
80002f40:	40e787b3          	sub	a5,a5,a4
80002f44:	00279793          	slli	a5,a5,0x2
80002f48:	00f607b3          	add	a5,a2,a5
80002f4c:	00d7a423          	sw	a3,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:24
    ServicePipe[mySlot].header.payload_size = PKT_SERVICE_SIZE;
80002f50:	800227b7          	lui	a5,0x80022
80002f54:	fec42703          	lw	a4,-20(s0)
80002f58:	bec78693          	addi	a3,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
80002f5c:	00070793          	mv	a5,a4
80002f60:	00479793          	slli	a5,a5,0x4
80002f64:	40e787b3          	sub	a5,a5,a4
80002f68:	00279793          	slli	a5,a5,0x2
80002f6c:	00f687b3          	add	a5,a3,a5
80002f70:	00b00713          	li	a4,11
80002f74:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:25
    ServicePipe[mySlot].header.service      = REPOSITORY_WAKEUP;
80002f78:	800227b7          	lui	a5,0x80022
80002f7c:	fec42703          	lw	a4,-20(s0)
80002f80:	bec78693          	addi	a3,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
80002f84:	00070793          	mv	a5,a4
80002f88:	00479793          	slli	a5,a5,0x4
80002f8c:	40e787b3          	sub	a5,a5,a4
80002f90:	00279793          	slli	a5,a5,0x2
80002f94:	00f687b3          	add	a5,a3,a5
80002f98:	10000713          	li	a4,256
80002f9c:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:27

    API_PushSendQueue(SERVICE, mySlot);
80002fa0:	fec42583          	lw	a1,-20(s0)
80002fa4:	10100537          	lui	a0,0x10100
80002fa8:	374030ef          	jal	ra,8000631c <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:28
    return;    
80002fac:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:29
}
80002fb0:	01c12083          	lw	ra,28(sp)
80002fb4:	01812403          	lw	s0,24(sp)
80002fb8:	02010113          	addi	sp,sp,32
80002fbc:	00008067          	ret

80002fc0 <API_AddApplication>:
API_AddApplication():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:33

////////////////////////////////////////////////////////////
// Add one Application in the Execution Queue
void API_AddApplication(unsigned int appID, unsigned int appPeriod, unsigned int appExec, unsigned int appNTasks){
80002fc0:	fd010113          	addi	sp,sp,-48
80002fc4:	02112623          	sw	ra,44(sp)
80002fc8:	02812423          	sw	s0,40(sp)
80002fcc:	03010413          	addi	s0,sp,48
80002fd0:	fca42e23          	sw	a0,-36(s0)
80002fd4:	fcb42c23          	sw	a1,-40(s0)
80002fd8:	fcc42a23          	sw	a2,-44(s0)
80002fdc:	fcd42823          	sw	a3,-48(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:34
    int slot = API_GetApplicationFreeSlot();
80002fe0:	1c4000ef          	jal	ra,800031a4 <API_GetApplicationFreeSlot>
80002fe4:	00050793          	mv	a5,a0
80002fe8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:35
    applications[slot].occupied = TRUE;
80002fec:	800236b7          	lui	a3,0x80023
80002ff0:	fec42703          	lw	a4,-20(s0)
80002ff4:	00070793          	mv	a5,a4
80002ff8:	00279793          	slli	a5,a5,0x2
80002ffc:	00e787b3          	add	a5,a5,a4
80003000:	00579793          	slli	a5,a5,0x5
80003004:	8cc68713          	addi	a4,a3,-1844 # 800228cc <__stack_top+0xfffdf4bc>
80003008:	00e787b3          	add	a5,a5,a4
8000300c:	00100713          	li	a4,1
80003010:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:36
    applications[slot].appID = appID;
80003014:	800237b7          	lui	a5,0x80023
80003018:	fec42703          	lw	a4,-20(s0)
8000301c:	8cc78693          	addi	a3,a5,-1844 # 800228cc <__stack_top+0xfffdf4bc>
80003020:	00070793          	mv	a5,a4
80003024:	00279793          	slli	a5,a5,0x2
80003028:	00e787b3          	add	a5,a5,a4
8000302c:	00579793          	slli	a5,a5,0x5
80003030:	00f687b3          	add	a5,a3,a5
80003034:	fdc42703          	lw	a4,-36(s0)
80003038:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:37
    applications[slot].appPeriod = appPeriod;
8000303c:	800237b7          	lui	a5,0x80023
80003040:	fec42703          	lw	a4,-20(s0)
80003044:	8cc78693          	addi	a3,a5,-1844 # 800228cc <__stack_top+0xfffdf4bc>
80003048:	00070793          	mv	a5,a4
8000304c:	00279793          	slli	a5,a5,0x2
80003050:	00e787b3          	add	a5,a5,a4
80003054:	00579793          	slli	a5,a5,0x5
80003058:	00f687b3          	add	a5,a3,a5
8000305c:	fd842703          	lw	a4,-40(s0)
80003060:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:38
    applications[slot].appExec = appExec;
80003064:	800237b7          	lui	a5,0x80023
80003068:	fec42703          	lw	a4,-20(s0)
8000306c:	8cc78693          	addi	a3,a5,-1844 # 800228cc <__stack_top+0xfffdf4bc>
80003070:	00070793          	mv	a5,a4
80003074:	00279793          	slli	a5,a5,0x2
80003078:	00e787b3          	add	a5,a5,a4
8000307c:	00579793          	slli	a5,a5,0x5
80003080:	00f687b3          	add	a5,a3,a5
80003084:	fd442703          	lw	a4,-44(s0)
80003088:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:39
    applications[slot].numTasks = appNTasks;
8000308c:	800236b7          	lui	a3,0x80023
80003090:	fec42703          	lw	a4,-20(s0)
80003094:	00070793          	mv	a5,a4
80003098:	00279793          	slli	a5,a5,0x2
8000309c:	00e787b3          	add	a5,a5,a4
800030a0:	00579793          	slli	a5,a5,0x5
800030a4:	8cc68713          	addi	a4,a3,-1844 # 800228cc <__stack_top+0xfffdf4bc>
800030a8:	00e787b3          	add	a5,a5,a4
800030ac:	fd042703          	lw	a4,-48(s0)
800030b0:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:40
    applications[slot].nextRun = xTaskGetTickCount() + appPeriod;
800030b4:	d80ff0ef          	jal	ra,80002634 <xTaskGetTickCount>
800030b8:	00050713          	mv	a4,a0
800030bc:	fd842783          	lw	a5,-40(s0)
800030c0:	00f706b3          	add	a3,a4,a5
800030c4:	800237b7          	lui	a5,0x80023
800030c8:	fec42703          	lw	a4,-20(s0)
800030cc:	8cc78613          	addi	a2,a5,-1844 # 800228cc <__stack_top+0xfffdf4bc>
800030d0:	00070793          	mv	a5,a4
800030d4:	00279793          	slli	a5,a5,0x2
800030d8:	00e787b3          	add	a5,a5,a4
800030dc:	00579793          	slli	a5,a5,0x5
800030e0:	00f607b3          	add	a5,a2,a5
800030e4:	08d7a623          	sw	a3,140(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:41
    applications[slot].executed = 0;
800030e8:	800236b7          	lui	a3,0x80023
800030ec:	fec42703          	lw	a4,-20(s0)
800030f0:	00070793          	mv	a5,a4
800030f4:	00279793          	slli	a5,a5,0x2
800030f8:	00e787b3          	add	a5,a5,a4
800030fc:	00579793          	slli	a5,a5,0x5
80003100:	8cc68713          	addi	a4,a3,-1844 # 800228cc <__stack_top+0xfffdf4bc>
80003104:	00e787b3          	add	a5,a5,a4
80003108:	0807a823          	sw	zero,144(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:42
    applications[slot].lastStart = -1;
8000310c:	800237b7          	lui	a5,0x80023
80003110:	fec42703          	lw	a4,-20(s0)
80003114:	8cc78693          	addi	a3,a5,-1844 # 800228cc <__stack_top+0xfffdf4bc>
80003118:	00070793          	mv	a5,a4
8000311c:	00279793          	slli	a5,a5,0x2
80003120:	00e787b3          	add	a5,a5,a4
80003124:	00579793          	slli	a5,a5,0x5
80003128:	00f687b3          	add	a5,a3,a5
8000312c:	fff00713          	li	a4,-1
80003130:	08e7aa23          	sw	a4,148(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:43
    applications[slot].finishedTasks = 0;
80003134:	800237b7          	lui	a5,0x80023
80003138:	fec42703          	lw	a4,-20(s0)
8000313c:	8cc78693          	addi	a3,a5,-1844 # 800228cc <__stack_top+0xfffdf4bc>
80003140:	00070793          	mv	a5,a4
80003144:	00279793          	slli	a5,a5,0x2
80003148:	00e787b3          	add	a5,a5,a4
8000314c:	00579793          	slli	a5,a5,0x5
80003150:	00f687b3          	add	a5,a3,a5
80003154:	0807ac23          	sw	zero,152(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:44
    applications[slot].lastFinish = 0;
80003158:	800237b7          	lui	a5,0x80023
8000315c:	fec42703          	lw	a4,-20(s0)
80003160:	8cc78693          	addi	a3,a5,-1844 # 800228cc <__stack_top+0xfffdf4bc>
80003164:	00070793          	mv	a5,a4
80003168:	00279793          	slli	a5,a5,0x2
8000316c:	00e787b3          	add	a5,a5,a4
80003170:	00579793          	slli	a5,a5,0x5
80003174:	00f687b3          	add	a5,a3,a5
80003178:	0807ae23          	sw	zero,156(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:45
    printsv("New application registered - ID: ", appID);
8000317c:	fdc42783          	lw	a5,-36(s0)
80003180:	00078593          	mv	a1,a5
80003184:	800087b7          	lui	a5,0x80008
80003188:	07078513          	addi	a0,a5,112 # 80008070 <__stack_top+0xfffc4c60>
8000318c:	535020ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:46
    return;
80003190:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:47
}
80003194:	02c12083          	lw	ra,44(sp)
80003198:	02812403          	lw	s0,40(sp)
8000319c:	03010113          	addi	sp,sp,48
800031a0:	00008067          	ret

800031a4 <API_GetApplicationFreeSlot>:
API_GetApplicationFreeSlot():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:65
}


////////////////////////////////////////////////////////////
// Gets an application slot that is free
unsigned int API_GetApplicationFreeSlot(){
800031a4:	fe010113          	addi	sp,sp,-32
800031a8:	00112e23          	sw	ra,28(sp)
800031ac:	00812c23          	sw	s0,24(sp)
800031b0:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:67
    int i;
    for (i = 0; i < NUM_MAX_APPS; i++){
800031b4:	fe042623          	sw	zero,-20(s0)
800031b8:	0400006f          	j	800031f8 <API_GetApplicationFreeSlot+0x54>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:68
        if (applications[i].occupied == FALSE){
800031bc:	800236b7          	lui	a3,0x80023
800031c0:	fec42703          	lw	a4,-20(s0)
800031c4:	00070793          	mv	a5,a4
800031c8:	00279793          	slli	a5,a5,0x2
800031cc:	00e787b3          	add	a5,a5,a4
800031d0:	00579793          	slli	a5,a5,0x5
800031d4:	8cc68713          	addi	a4,a3,-1844 # 800228cc <__stack_top+0xfffdf4bc>
800031d8:	00e787b3          	add	a5,a5,a4
800031dc:	0007a783          	lw	a5,0(a5)
800031e0:	00079663          	bnez	a5,800031ec <API_GetApplicationFreeSlot+0x48>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:69
            return i;
800031e4:	fec42783          	lw	a5,-20(s0)
800031e8:	02c0006f          	j	80003214 <API_GetApplicationFreeSlot+0x70>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:67 (discriminator 2)
    for (i = 0; i < NUM_MAX_APPS; i++){
800031ec:	fec42783          	lw	a5,-20(s0)
800031f0:	00178793          	addi	a5,a5,1
800031f4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:67 (discriminator 1)
800031f8:	fec42703          	lw	a4,-20(s0)
800031fc:	00b00793          	li	a5,11
80003200:	fae7dee3          	ble	a4,a5,800031bc <API_GetApplicationFreeSlot+0x18>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:72
        }
    }
    prints("returning erro4\n");
80003204:	800087b7          	lui	a5,0x80008
80003208:	0a878513          	addi	a0,a5,168 # 800080a8 <__stack_top+0xfffc4c98>
8000320c:	409020ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:73
    return ERRO;
80003210:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:74
}
80003214:	00078513          	mv	a0,a5
80003218:	01c12083          	lw	ra,28(sp)
8000321c:	01812403          	lw	s0,24(sp)
80003220:	02010113          	addi	sp,sp,32
80003224:	00008067          	ret

80003228 <API_ApplicationsReset>:
API_ApplicationsReset():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:78

////////////////////////////////////////////////////////////
// Reset applications vector
void API_ApplicationsReset(){
80003228:	fe010113          	addi	sp,sp,-32
8000322c:	00812e23          	sw	s0,28(sp)
80003230:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:80
    int i;
    for (i = 0; i < NUM_MAX_APPS; i++){
80003234:	fe042623          	sw	zero,-20(s0)
80003238:	0340006f          	j	8000326c <API_ApplicationsReset+0x44>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:81 (discriminator 3)
        applications[i].occupied = FALSE;
8000323c:	800236b7          	lui	a3,0x80023
80003240:	fec42703          	lw	a4,-20(s0)
80003244:	00070793          	mv	a5,a4
80003248:	00279793          	slli	a5,a5,0x2
8000324c:	00e787b3          	add	a5,a5,a4
80003250:	00579793          	slli	a5,a5,0x5
80003254:	8cc68713          	addi	a4,a3,-1844 # 800228cc <__stack_top+0xfffdf4bc>
80003258:	00e787b3          	add	a5,a5,a4
8000325c:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:80 (discriminator 3)
    for (i = 0; i < NUM_MAX_APPS; i++){
80003260:	fec42783          	lw	a5,-20(s0)
80003264:	00178793          	addi	a5,a5,1
80003268:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:80 (discriminator 1)
8000326c:	fec42703          	lw	a4,-20(s0)
80003270:	00b00793          	li	a5,11
80003274:	fce7d4e3          	ble	a4,a5,8000323c <API_ApplicationsReset+0x14>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:83
    }
    return;
80003278:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:84
}
8000327c:	01c12403          	lw	s0,28(sp)
80003280:	02010113          	addi	sp,sp,32
80003284:	00008067          	ret

80003288 <API_TilesReset>:
API_TilesReset():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:88

////////////////////////////////////////////////////////////
// Initialize the Tiles Info
void API_TilesReset(){
80003288:	fe010113          	addi	sp,sp,-32
8000328c:	00812e23          	sw	s0,28(sp)
80003290:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90
    int i, m, n;
    for (m = 0; m < DIM_X; m++){
80003294:	fe042623          	sw	zero,-20(s0)
80003298:	0fc0006f          	j	80003394 <API_TilesReset+0x10c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:91
        for (n = 0; n < DIM_Y; n++){
8000329c:	fe042423          	sw	zero,-24(s0)
800032a0:	0dc0006f          	j	8000337c <API_TilesReset+0xf4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:92 (discriminator 3)
            Tiles[m][n].temperature = 273;
800032a4:	80023637          	lui	a2,0x80023
800032a8:	fe842783          	lw	a5,-24(s0)
800032ac:	fec42683          	lw	a3,-20(s0)
800032b0:	00078713          	mv	a4,a5
800032b4:	00171713          	slli	a4,a4,0x1
800032b8:	00f70733          	add	a4,a4,a5
800032bc:	00271793          	slli	a5,a4,0x2
800032c0:	00078713          	mv	a4,a5
800032c4:	00068793          	mv	a5,a3
800032c8:	00379793          	slli	a5,a5,0x3
800032cc:	00d787b3          	add	a5,a5,a3
800032d0:	00279793          	slli	a5,a5,0x2
800032d4:	00f70733          	add	a4,a4,a5
800032d8:	07860793          	addi	a5,a2,120 # 80023078 <__stack_top+0xfffdfc68>
800032dc:	00f707b3          	add	a5,a4,a5
800032e0:	11100713          	li	a4,273
800032e4:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:93 (discriminator 3)
            Tiles[m][n].frequency = 1000;
800032e8:	80023737          	lui	a4,0x80023
800032ec:	fe842783          	lw	a5,-24(s0)
800032f0:	fec42683          	lw	a3,-20(s0)
800032f4:	07870613          	addi	a2,a4,120 # 80023078 <__stack_top+0xfffdfc68>
800032f8:	00078713          	mv	a4,a5
800032fc:	00171713          	slli	a4,a4,0x1
80003300:	00f70733          	add	a4,a4,a5
80003304:	00271793          	slli	a5,a4,0x2
80003308:	00078713          	mv	a4,a5
8000330c:	00068793          	mv	a5,a3
80003310:	00379793          	slli	a5,a5,0x3
80003314:	00d787b3          	add	a5,a5,a3
80003318:	00279793          	slli	a5,a5,0x2
8000331c:	00f707b3          	add	a5,a4,a5
80003320:	00f607b3          	add	a5,a2,a5
80003324:	3e800713          	li	a4,1000
80003328:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:94 (discriminator 3)
            Tiles[m][n].taskSlots = NUM_MAX_TASKS;
8000332c:	80023737          	lui	a4,0x80023
80003330:	fe842783          	lw	a5,-24(s0)
80003334:	fec42683          	lw	a3,-20(s0)
80003338:	07870613          	addi	a2,a4,120 # 80023078 <__stack_top+0xfffdfc68>
8000333c:	00078713          	mv	a4,a5
80003340:	00171713          	slli	a4,a4,0x1
80003344:	00f70733          	add	a4,a4,a5
80003348:	00271793          	slli	a5,a4,0x2
8000334c:	00078713          	mv	a4,a5
80003350:	00068793          	mv	a5,a3
80003354:	00379793          	slli	a5,a5,0x3
80003358:	00d787b3          	add	a5,a5,a3
8000335c:	00279793          	slli	a5,a5,0x2
80003360:	00f707b3          	add	a5,a4,a5
80003364:	00f607b3          	add	a5,a2,a5
80003368:	00600713          	li	a4,6
8000336c:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:91 (discriminator 3)
        for (n = 0; n < DIM_Y; n++){
80003370:	fe842783          	lw	a5,-24(s0)
80003374:	00178793          	addi	a5,a5,1
80003378:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:91 (discriminator 1)
8000337c:	fe842703          	lw	a4,-24(s0)
80003380:	00200793          	li	a5,2
80003384:	f2e7d0e3          	ble	a4,a5,800032a4 <API_TilesReset+0x1c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90 (discriminator 2)
    for (m = 0; m < DIM_X; m++){
80003388:	fec42783          	lw	a5,-20(s0)
8000338c:	00178793          	addi	a5,a5,1
80003390:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90 (discriminator 1)
80003394:	fec42703          	lw	a4,-20(s0)
80003398:	00200793          	li	a5,2
8000339c:	f0e7d0e3          	ble	a4,a5,8000329c <API_TilesReset+0x14>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:100
            /*for(i = 0; i < NUM_MAX_TASKS; i++){
                Tiles[m][n].AppTask[i] = NONE;
            }*/
        }
    }    
    return;
800033a0:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:101
}
800033a4:	01c12403          	lw	s0,28(sp)
800033a8:	02010113          	addi	sp,sp,32
800033ac:	00008067          	ret

800033b0 <GeneratePatternMatrix>:
GeneratePatternMatrix():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:104

// Generates the Pattern Matrix for Pattern mapping
void GeneratePatternMatrix(){
800033b0:	fe010113          	addi	sp,sp,-32
800033b4:	00812e23          	sw	s0,28(sp)
800033b8:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:106
    int i, aux;
    aux = 0;
800033bc:	fe042423          	sw	zero,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:107
    priorityPointer = 0;
800033c0:	800237b7          	lui	a5,0x80023
800033c4:	0607aa23          	sw	zero,116(a5) # 80023074 <__stack_top+0xfffdfc64>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:109
    //prints("Testando Pattern: \n");
    for(i=0; i<(DIM_X*DIM_Y); i++){
800033c8:	fe042623          	sw	zero,-20(s0)
800033cc:	0700006f          	j	8000343c <GeneratePatternMatrix+0x8c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:111
        //printi(i); prints(": "); printi(aux); prints("\n");
        priorityMatrix[i] = (aux / DIM_X << 8) | aux % DIM_X;
800033d0:	fe842703          	lw	a4,-24(s0)
800033d4:	00300793          	li	a5,3
800033d8:	02f747b3          	div	a5,a4,a5
800033dc:	00879713          	slli	a4,a5,0x8
800033e0:	fe842683          	lw	a3,-24(s0)
800033e4:	00300793          	li	a5,3
800033e8:	02f6e7b3          	rem	a5,a3,a5
800033ec:	00f767b3          	or	a5,a4,a5
800033f0:	00078693          	mv	a3,a5
800033f4:	800237b7          	lui	a5,0x80023
800033f8:	fec42703          	lw	a4,-20(s0)
800033fc:	00271713          	slli	a4,a4,0x2
80003400:	8a878793          	addi	a5,a5,-1880 # 800228a8 <__stack_top+0xfffdf498>
80003404:	00f707b3          	add	a5,a4,a5
80003408:	00d7a023          	sw	a3,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:130
            else{
                aux = 1;
            }
        } 
        else{
            if(aux<=((DIM_X*DIM_Y)-3))
8000340c:	fe842703          	lw	a4,-24(s0)
80003410:	00600793          	li	a5,6
80003414:	00e7ca63          	blt	a5,a4,80003428 <GeneratePatternMatrix+0x78>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:131
                aux += 2;
80003418:	fe842783          	lw	a5,-24(s0)
8000341c:	00278793          	addi	a5,a5,2
80003420:	fef42423          	sw	a5,-24(s0)
80003424:	00c0006f          	j	80003430 <GeneratePatternMatrix+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:133
            else
                aux = 1;
80003428:	00100793          	li	a5,1
8000342c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:109 (discriminator 2)
    for(i=0; i<(DIM_X*DIM_Y); i++){
80003430:	fec42783          	lw	a5,-20(s0)
80003434:	00178793          	addi	a5,a5,1
80003438:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:109 (discriminator 1)
8000343c:	fec42703          	lw	a4,-20(s0)
80003440:	00800793          	li	a5,8
80003444:	f8e7d6e3          	ble	a4,a5,800033d0 <GeneratePatternMatrix+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:136
        }    
    }
    return;
80003448:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:137
}
8000344c:	01c12403          	lw	s0,28(sp)
80003450:	02010113          	addi	sp,sp,32
80003454:	00008067          	ret

80003458 <API_AllocateTasks>:
API_AllocateTasks():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:140

// Checks if there is some task to allocate...
void API_AllocateTasks(unsigned int tick){
80003458:	fd010113          	addi	sp,sp,-48
8000345c:	02112623          	sw	ra,44(sp)
80003460:	02812423          	sw	s0,40(sp)
80003464:	02912223          	sw	s1,36(sp)
80003468:	03010413          	addi	s0,sp,48
8000346c:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:144
    int i, j;
    int addr, slot;
    // Iterate around every possible application
    for (i = 0; i < NUM_MAX_APPS; i++){
80003470:	fe042623          	sw	zero,-20(s0)
80003474:	2980006f          	j	8000370c <API_AllocateTasks+0x2b4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:146
        // If the application is valid
        if (applications[i].occupied == TRUE){
80003478:	800236b7          	lui	a3,0x80023
8000347c:	fec42703          	lw	a4,-20(s0)
80003480:	00070793          	mv	a5,a4
80003484:	00279793          	slli	a5,a5,0x2
80003488:	00e787b3          	add	a5,a5,a4
8000348c:	00579793          	slli	a5,a5,0x5
80003490:	8cc68713          	addi	a4,a3,-1844 # 800228cc <__stack_top+0xfffdf4bc>
80003494:	00e787b3          	add	a5,a5,a4
80003498:	0007a703          	lw	a4,0(a5)
8000349c:	00100793          	li	a5,1
800034a0:	26f71063          	bne	a4,a5,80003700 <API_AllocateTasks+0x2a8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:149

            // If the nextRun of this application is right now, then release each task!
            if(applications[i].nextRun <= tick && applications[i].nextRun != applications[i].lastStart){
800034a4:	800237b7          	lui	a5,0x80023
800034a8:	fec42703          	lw	a4,-20(s0)
800034ac:	8cc78693          	addi	a3,a5,-1844 # 800228cc <__stack_top+0xfffdf4bc>
800034b0:	00070793          	mv	a5,a4
800034b4:	00279793          	slli	a5,a5,0x2
800034b8:	00e787b3          	add	a5,a5,a4
800034bc:	00579793          	slli	a5,a5,0x5
800034c0:	00f687b3          	add	a5,a3,a5
800034c4:	08c7a783          	lw	a5,140(a5)
800034c8:	fdc42703          	lw	a4,-36(s0)
800034cc:	22f76a63          	bltu	a4,a5,80003700 <API_AllocateTasks+0x2a8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:149 (discriminator 1)
800034d0:	800237b7          	lui	a5,0x80023
800034d4:	fec42703          	lw	a4,-20(s0)
800034d8:	8cc78693          	addi	a3,a5,-1844 # 800228cc <__stack_top+0xfffdf4bc>
800034dc:	00070793          	mv	a5,a4
800034e0:	00279793          	slli	a5,a5,0x2
800034e4:	00e787b3          	add	a5,a5,a4
800034e8:	00579793          	slli	a5,a5,0x5
800034ec:	00f687b3          	add	a5,a3,a5
800034f0:	08c7a683          	lw	a3,140(a5)
800034f4:	800237b7          	lui	a5,0x80023
800034f8:	fec42703          	lw	a4,-20(s0)
800034fc:	8cc78613          	addi	a2,a5,-1844 # 800228cc <__stack_top+0xfffdf4bc>
80003500:	00070793          	mv	a5,a4
80003504:	00279793          	slli	a5,a5,0x2
80003508:	00e787b3          	add	a5,a5,a4
8000350c:	00579793          	slli	a5,a5,0x5
80003510:	00f607b3          	add	a5,a2,a5
80003514:	0947a783          	lw	a5,148(a5)
80003518:	1ef68463          	beq	a3,a5,80003700 <API_AllocateTasks+0x2a8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:152

                // If the system has space to accept every task
                if(applications[i].numTasks <= API_GetSystemTasksSlots()){
8000351c:	800236b7          	lui	a3,0x80023
80003520:	fec42703          	lw	a4,-20(s0)
80003524:	00070793          	mv	a5,a4
80003528:	00279793          	slli	a5,a5,0x2
8000352c:	00e787b3          	add	a5,a5,a4
80003530:	00579793          	slli	a5,a5,0x5
80003534:	8cc68713          	addi	a4,a3,-1844 # 800228cc <__stack_top+0xfffdf4bc>
80003538:	00e787b3          	add	a5,a5,a4
8000353c:	0107a483          	lw	s1,16(a5)
80003540:	121000ef          	jal	ra,80003e60 <API_GetSystemTasksSlots>
80003544:	00050793          	mv	a5,a0
80003548:	1a97ec63          	bltu	a5,s1,80003700 <API_AllocateTasks+0x2a8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:155
                    
                    // Iterates around each task of this application
                    for(j = 0; j < applications[i].numTasks; j++){
8000354c:	fe042423          	sw	zero,-24(s0)
80003550:	13c0006f          	j	8000368c <API_AllocateTasks+0x234>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:158

                        for(;;){
                            addr = getNextPriorityAddr();
80003554:	53c000ef          	jal	ra,80003a90 <getNextPriorityAddr>
80003558:	00050793          	mv	a5,a0
8000355c:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:159
                            slot = API_GetTaskSlotFromTile(addr, i, j);
80003560:	fe442783          	lw	a5,-28(s0)
80003564:	fec42703          	lw	a4,-20(s0)
80003568:	fe842683          	lw	a3,-24(s0)
8000356c:	00068613          	mv	a2,a3
80003570:	00070593          	mv	a1,a4
80003574:	00078513          	mv	a0,a5
80003578:	64c000ef          	jal	ra,80003bc4 <API_GetTaskSlotFromTile>
8000357c:	00050793          	mv	a5,a0
80003580:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:160
                            if (slot != ERRO)
80003584:	fe042703          	lw	a4,-32(s0)
80003588:	fff00793          	li	a5,-1
8000358c:	00f71463          	bne	a4,a5,80003594 <API_AllocateTasks+0x13c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:158
                            addr = getNextPriorityAddr();
80003590:	fc5ff06f          	j	80003554 <API_AllocateTasks+0xfc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:161
                                break;
80003594:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:163
                        }
                        applications[i].tasks[j].status = TASK_ALLOCATING;
80003598:	80023737          	lui	a4,0x80023
8000359c:	fe842783          	lw	a5,-24(s0)
800035a0:	fec42683          	lw	a3,-20(s0)
800035a4:	8cc70613          	addi	a2,a4,-1844 # 800228cc <__stack_top+0xfffdf4bc>
800035a8:	00078713          	mv	a4,a5
800035ac:	00171713          	slli	a4,a4,0x1
800035b0:	00f70733          	add	a4,a4,a5
800035b4:	00271793          	slli	a5,a4,0x2
800035b8:	00078713          	mv	a4,a5
800035bc:	00068793          	mv	a5,a3
800035c0:	00279793          	slli	a5,a5,0x2
800035c4:	00d787b3          	add	a5,a5,a3
800035c8:	00579793          	slli	a5,a5,0x5
800035cc:	00f707b3          	add	a5,a4,a5
800035d0:	00f607b3          	add	a5,a2,a5
800035d4:	00300713          	li	a4,3
800035d8:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:164
                        applications[i].tasks[j].addr = addr;
800035dc:	fe442603          	lw	a2,-28(s0)
800035e0:	80023737          	lui	a4,0x80023
800035e4:	fe842783          	lw	a5,-24(s0)
800035e8:	fec42683          	lw	a3,-20(s0)
800035ec:	8cc70593          	addi	a1,a4,-1844 # 800228cc <__stack_top+0xfffdf4bc>
800035f0:	00078713          	mv	a4,a5
800035f4:	00171713          	slli	a4,a4,0x1
800035f8:	00f70733          	add	a4,a4,a5
800035fc:	00271793          	slli	a5,a4,0x2
80003600:	00078713          	mv	a4,a5
80003604:	00068793          	mv	a5,a3
80003608:	00279793          	slli	a5,a5,0x2
8000360c:	00d787b3          	add	a5,a5,a3
80003610:	00579793          	slli	a5,a5,0x5
80003614:	00f707b3          	add	a5,a4,a5
80003618:	00f587b3          	add	a5,a1,a5
8000361c:	00c7ac23          	sw	a2,24(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:165
                        applications[i].tasks[j].slot = slot;
80003620:	fe042603          	lw	a2,-32(s0)
80003624:	80023737          	lui	a4,0x80023
80003628:	fe842783          	lw	a5,-24(s0)
8000362c:	fec42683          	lw	a3,-20(s0)
80003630:	8cc70593          	addi	a1,a4,-1844 # 800228cc <__stack_top+0xfffdf4bc>
80003634:	00078713          	mv	a4,a5
80003638:	00171713          	slli	a4,a4,0x1
8000363c:	00f70733          	add	a4,a4,a5
80003640:	00271793          	slli	a5,a4,0x2
80003644:	00078713          	mv	a4,a5
80003648:	00068793          	mv	a5,a3
8000364c:	00279793          	slli	a5,a5,0x2
80003650:	00d787b3          	add	a5,a5,a3
80003654:	00579793          	slli	a5,a5,0x5
80003658:	00f707b3          	add	a5,a4,a5
8000365c:	00f587b3          	add	a5,a1,a5
80003660:	00c7ae23          	sw	a2,28(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:166
                        API_RepositoryAllocation(i, j, addr);
80003664:	fec42783          	lw	a5,-20(s0)
80003668:	fe842703          	lw	a4,-24(s0)
8000366c:	fe442683          	lw	a3,-28(s0)
80003670:	00068613          	mv	a2,a3
80003674:	00070593          	mv	a1,a4
80003678:	00078513          	mv	a0,a5
8000367c:	0d1000ef          	jal	ra,80003f4c <API_RepositoryAllocation>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:155
                    for(j = 0; j < applications[i].numTasks; j++){
80003680:	fe842783          	lw	a5,-24(s0)
80003684:	00178793          	addi	a5,a5,1
80003688:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:155 (discriminator 1)
8000368c:	800236b7          	lui	a3,0x80023
80003690:	fec42703          	lw	a4,-20(s0)
80003694:	00070793          	mv	a5,a4
80003698:	00279793          	slli	a5,a5,0x2
8000369c:	00e787b3          	add	a5,a5,a4
800036a0:	00579793          	slli	a5,a5,0x5
800036a4:	8cc68713          	addi	a4,a3,-1844 # 800228cc <__stack_top+0xfffdf4bc>
800036a8:	00e787b3          	add	a5,a5,a4
800036ac:	0107a703          	lw	a4,16(a5)
800036b0:	fe842783          	lw	a5,-24(s0)
800036b4:	eae7e0e3          	bltu	a5,a4,80003554 <API_AllocateTasks+0xfc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:170
                    }

                    // Resets the lastStart
                    applications[i].lastStart = applications[i].nextRun;
800036b8:	800237b7          	lui	a5,0x80023
800036bc:	fec42703          	lw	a4,-20(s0)
800036c0:	8cc78693          	addi	a3,a5,-1844 # 800228cc <__stack_top+0xfffdf4bc>
800036c4:	00070793          	mv	a5,a4
800036c8:	00279793          	slli	a5,a5,0x2
800036cc:	00e787b3          	add	a5,a5,a4
800036d0:	00579793          	slli	a5,a5,0x5
800036d4:	00f687b3          	add	a5,a3,a5
800036d8:	08c7a683          	lw	a3,140(a5)
800036dc:	800237b7          	lui	a5,0x80023
800036e0:	fec42703          	lw	a4,-20(s0)
800036e4:	8cc78613          	addi	a2,a5,-1844 # 800228cc <__stack_top+0xfffdf4bc>
800036e8:	00070793          	mv	a5,a4
800036ec:	00279793          	slli	a5,a5,0x2
800036f0:	00e787b3          	add	a5,a5,a4
800036f4:	00579793          	slli	a5,a5,0x5
800036f8:	00f607b3          	add	a5,a2,a5
800036fc:	08d7aa23          	sw	a3,148(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:144 (discriminator 2)
    for (i = 0; i < NUM_MAX_APPS; i++){
80003700:	fec42783          	lw	a5,-20(s0)
80003704:	00178793          	addi	a5,a5,1
80003708:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:144 (discriminator 1)
8000370c:	fec42703          	lw	a4,-20(s0)
80003710:	00b00793          	li	a5,11
80003714:	d6e7d2e3          	ble	a4,a5,80003478 <API_AllocateTasks+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:176
                }
            }
        }
    }

    return;
80003718:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:177
}
8000371c:	02c12083          	lw	ra,44(sp)
80003720:	02812403          	lw	s0,40(sp)
80003724:	02412483          	lw	s1,36(sp)
80003728:	03010113          	addi	sp,sp,48
8000372c:	00008067          	ret

80003730 <API_DealocateTask>:
API_DealocateTask():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:179

void API_DealocateTask(unsigned int task_id, unsigned int app_id){
80003730:	fd010113          	addi	sp,sp,-48
80003734:	02112623          	sw	ra,44(sp)
80003738:	02812423          	sw	s0,40(sp)
8000373c:	03010413          	addi	s0,sp,48
80003740:	fca42e23          	sw	a0,-36(s0)
80003744:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:182
    unsigned int i, tick;
    volatile int flag;
    applications[app_id].tasks[task_id].status = TASK_FINISHED;
80003748:	80023737          	lui	a4,0x80023
8000374c:	fdc42783          	lw	a5,-36(s0)
80003750:	fd842683          	lw	a3,-40(s0)
80003754:	8cc70613          	addi	a2,a4,-1844 # 800228cc <__stack_top+0xfffdf4bc>
80003758:	00078713          	mv	a4,a5
8000375c:	00171713          	slli	a4,a4,0x1
80003760:	00f70733          	add	a4,a4,a5
80003764:	00271793          	slli	a5,a4,0x2
80003768:	00078713          	mv	a4,a5
8000376c:	00068793          	mv	a5,a3
80003770:	00279793          	slli	a5,a5,0x2
80003774:	00d787b3          	add	a5,a5,a3
80003778:	00579793          	slli	a5,a5,0x5
8000377c:	00f707b3          	add	a5,a4,a5
80003780:	00f607b3          	add	a5,a2,a5
80003784:	00200713          	li	a4,2
80003788:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:184
    // verify if every task has finished
    flag = 1;
8000378c:	00100793          	li	a5,1
80003790:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:185
    for (i = 0; i < applications[app_id].numTasks; i++){
80003794:	fe042623          	sw	zero,-20(s0)
80003798:	0600006f          	j	800037f8 <API_DealocateTask+0xc8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:187
        //printsvsv("checking ", i, "task is: ", applications[app_id].tasks[i].status);
        if(applications[app_id].tasks[i].status != TASK_FINISHED){
8000379c:	80023737          	lui	a4,0x80023
800037a0:	fec42783          	lw	a5,-20(s0)
800037a4:	fd842683          	lw	a3,-40(s0)
800037a8:	8cc70613          	addi	a2,a4,-1844 # 800228cc <__stack_top+0xfffdf4bc>
800037ac:	00078713          	mv	a4,a5
800037b0:	00171713          	slli	a4,a4,0x1
800037b4:	00f70733          	add	a4,a4,a5
800037b8:	00271793          	slli	a5,a4,0x2
800037bc:	00078713          	mv	a4,a5
800037c0:	00068793          	mv	a5,a3
800037c4:	00279793          	slli	a5,a5,0x2
800037c8:	00d787b3          	add	a5,a5,a3
800037cc:	00579793          	slli	a5,a5,0x5
800037d0:	00f707b3          	add	a5,a4,a5
800037d4:	00f607b3          	add	a5,a2,a5
800037d8:	0147a703          	lw	a4,20(a5)
800037dc:	00200793          	li	a5,2
800037e0:	00f70663          	beq	a4,a5,800037ec <API_DealocateTask+0xbc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:188
            flag = 0;
800037e4:	fe042223          	sw	zero,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:189
            break;
800037e8:	03c0006f          	j	80003824 <API_DealocateTask+0xf4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:185 (discriminator 2)
    for (i = 0; i < applications[app_id].numTasks; i++){
800037ec:	fec42783          	lw	a5,-20(s0)
800037f0:	00178793          	addi	a5,a5,1
800037f4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:185 (discriminator 1)
800037f8:	800236b7          	lui	a3,0x80023
800037fc:	fd842703          	lw	a4,-40(s0)
80003800:	00070793          	mv	a5,a4
80003804:	00279793          	slli	a5,a5,0x2
80003808:	00e787b3          	add	a5,a5,a4
8000380c:	00579793          	slli	a5,a5,0x5
80003810:	8cc68713          	addi	a4,a3,-1844 # 800228cc <__stack_top+0xfffdf4bc>
80003814:	00e787b3          	add	a5,a5,a4
80003818:	0107a783          	lw	a5,16(a5)
8000381c:	fec42703          	lw	a4,-20(s0)
80003820:	f6f76ee3          	bltu	a4,a5,8000379c <API_DealocateTask+0x6c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:193
        }
    }
    // in positive case
    if(flag){
80003824:	fe442783          	lw	a5,-28(s0)
80003828:	24078663          	beqz	a5,80003a74 <API_DealocateTask+0x344>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:195
        // register that the application has executed another time
        tick = xTaskGetTickCount();
8000382c:	e09fe0ef          	jal	ra,80002634 <xTaskGetTickCount>
80003830:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:196
        applications[app_id].executed++;
80003834:	800236b7          	lui	a3,0x80023
80003838:	fd842703          	lw	a4,-40(s0)
8000383c:	00070793          	mv	a5,a4
80003840:	00279793          	slli	a5,a5,0x2
80003844:	00e787b3          	add	a5,a5,a4
80003848:	00579793          	slli	a5,a5,0x5
8000384c:	8cc68713          	addi	a4,a3,-1844 # 800228cc <__stack_top+0xfffdf4bc>
80003850:	00e787b3          	add	a5,a5,a4
80003854:	0907a783          	lw	a5,144(a5)
80003858:	00178693          	addi	a3,a5,1
8000385c:	80023637          	lui	a2,0x80023
80003860:	fd842703          	lw	a4,-40(s0)
80003864:	00070793          	mv	a5,a4
80003868:	00279793          	slli	a5,a5,0x2
8000386c:	00e787b3          	add	a5,a5,a4
80003870:	00579793          	slli	a5,a5,0x5
80003874:	8cc60713          	addi	a4,a2,-1844 # 800228cc <__stack_top+0xfffdf4bc>
80003878:	00e787b3          	add	a5,a5,a4
8000387c:	08d7a823          	sw	a3,144(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:197
        printsvsv("Application ", app_id, "was executed in ", (tick - applications[app_id].lastStart));
80003880:	fd842583          	lw	a1,-40(s0)
80003884:	800237b7          	lui	a5,0x80023
80003888:	fd842703          	lw	a4,-40(s0)
8000388c:	8cc78693          	addi	a3,a5,-1844 # 800228cc <__stack_top+0xfffdf4bc>
80003890:	00070793          	mv	a5,a4
80003894:	00279793          	slli	a5,a5,0x2
80003898:	00e787b3          	add	a5,a5,a4
8000389c:	00579793          	slli	a5,a5,0x5
800038a0:	00f687b3          	add	a5,a3,a5
800038a4:	0947a783          	lw	a5,148(a5)
800038a8:	fe842703          	lw	a4,-24(s0)
800038ac:	40f707b3          	sub	a5,a4,a5
800038b0:	00078693          	mv	a3,a5
800038b4:	800087b7          	lui	a5,0x80008
800038b8:	0bc78613          	addi	a2,a5,188 # 800080bc <__stack_top+0xfffc4cac>
800038bc:	800087b7          	lui	a5,0x80008
800038c0:	0d078513          	addi	a0,a5,208 # 800080d0 <__stack_top+0xfffc4cc0>
800038c4:	644020ef          	jal	ra,80005f08 <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:198
        applications[app_id].lastFinish = tick;
800038c8:	800237b7          	lui	a5,0x80023
800038cc:	fd842703          	lw	a4,-40(s0)
800038d0:	8cc78693          	addi	a3,a5,-1844 # 800228cc <__stack_top+0xfffdf4bc>
800038d4:	00070793          	mv	a5,a4
800038d8:	00279793          	slli	a5,a5,0x2
800038dc:	00e787b3          	add	a5,a5,a4
800038e0:	00579793          	slli	a5,a5,0x5
800038e4:	00f687b3          	add	a5,a3,a5
800038e8:	fe842703          	lw	a4,-24(s0)
800038ec:	08e7ae23          	sw	a4,156(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:200
        // if the application must run another time
        if(applications[app_id].appExec > applications[app_id].executed){
800038f0:	800237b7          	lui	a5,0x80023
800038f4:	fd842703          	lw	a4,-40(s0)
800038f8:	8cc78693          	addi	a3,a5,-1844 # 800228cc <__stack_top+0xfffdf4bc>
800038fc:	00070793          	mv	a5,a4
80003900:	00279793          	slli	a5,a5,0x2
80003904:	00e787b3          	add	a5,a5,a4
80003908:	00579793          	slli	a5,a5,0x5
8000390c:	00f687b3          	add	a5,a3,a5
80003910:	00c7a683          	lw	a3,12(a5)
80003914:	80023637          	lui	a2,0x80023
80003918:	fd842703          	lw	a4,-40(s0)
8000391c:	00070793          	mv	a5,a4
80003920:	00279793          	slli	a5,a5,0x2
80003924:	00e787b3          	add	a5,a5,a4
80003928:	00579793          	slli	a5,a5,0x5
8000392c:	8cc60713          	addi	a4,a2,-1844 # 800228cc <__stack_top+0xfffdf4bc>
80003930:	00e787b3          	add	a5,a5,a4
80003934:	0907a783          	lw	a5,144(a5)
80003938:	0ad7fa63          	bleu	a3,a5,800039ec <API_DealocateTask+0x2bc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:201
            printsv("\t\tThis application still need to run: ", (applications[app_id].appExec - applications[app_id].executed));
8000393c:	800237b7          	lui	a5,0x80023
80003940:	fd842703          	lw	a4,-40(s0)
80003944:	8cc78693          	addi	a3,a5,-1844 # 800228cc <__stack_top+0xfffdf4bc>
80003948:	00070793          	mv	a5,a4
8000394c:	00279793          	slli	a5,a5,0x2
80003950:	00e787b3          	add	a5,a5,a4
80003954:	00579793          	slli	a5,a5,0x5
80003958:	00f687b3          	add	a5,a3,a5
8000395c:	00c7a683          	lw	a3,12(a5)
80003960:	80023637          	lui	a2,0x80023
80003964:	fd842703          	lw	a4,-40(s0)
80003968:	00070793          	mv	a5,a4
8000396c:	00279793          	slli	a5,a5,0x2
80003970:	00e787b3          	add	a5,a5,a4
80003974:	00579793          	slli	a5,a5,0x5
80003978:	8cc60713          	addi	a4,a2,-1844 # 800228cc <__stack_top+0xfffdf4bc>
8000397c:	00e787b3          	add	a5,a5,a4
80003980:	0907a783          	lw	a5,144(a5)
80003984:	40f687b3          	sub	a5,a3,a5
80003988:	00078593          	mv	a1,a5
8000398c:	800087b7          	lui	a5,0x80008
80003990:	0e078513          	addi	a0,a5,224 # 800080e0 <__stack_top+0xfffc4cd0>
80003994:	52c020ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:202
            applications[app_id].nextRun = tick + applications[app_id].appPeriod;
80003998:	800237b7          	lui	a5,0x80023
8000399c:	fd842703          	lw	a4,-40(s0)
800039a0:	8cc78693          	addi	a3,a5,-1844 # 800228cc <__stack_top+0xfffdf4bc>
800039a4:	00070793          	mv	a5,a4
800039a8:	00279793          	slli	a5,a5,0x2
800039ac:	00e787b3          	add	a5,a5,a4
800039b0:	00579793          	slli	a5,a5,0x5
800039b4:	00f687b3          	add	a5,a3,a5
800039b8:	0087a703          	lw	a4,8(a5)
800039bc:	fe842783          	lw	a5,-24(s0)
800039c0:	00f706b3          	add	a3,a4,a5
800039c4:	800237b7          	lui	a5,0x80023
800039c8:	fd842703          	lw	a4,-40(s0)
800039cc:	8cc78613          	addi	a2,a5,-1844 # 800228cc <__stack_top+0xfffdf4bc>
800039d0:	00070793          	mv	a5,a4
800039d4:	00279793          	slli	a5,a5,0x2
800039d8:	00e787b3          	add	a5,a5,a4
800039dc:	00579793          	slli	a5,a5,0x5
800039e0:	00f607b3          	add	a5,a2,a5
800039e4:	08d7a623          	sw	a3,140(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:217
            }
            API_SystemFinish = TRUE;
            //_exit(0xfe10);
        }        
    }
    return;
800039e8:	08c0006f          	j	80003a74 <API_DealocateTask+0x344>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:204
            prints("\t\tThis application is DONE!\n");
800039ec:	800087b7          	lui	a5,0x80008
800039f0:	10878513          	addi	a0,a5,264 # 80008108 <__stack_top+0xfffc4cf8>
800039f4:	420020ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:205
            applications[app_id].occupied = FALSE;
800039f8:	800236b7          	lui	a3,0x80023
800039fc:	fd842703          	lw	a4,-40(s0)
80003a00:	00070793          	mv	a5,a4
80003a04:	00279793          	slli	a5,a5,0x2
80003a08:	00e787b3          	add	a5,a5,a4
80003a0c:	00579793          	slli	a5,a5,0x5
80003a10:	8cc68713          	addi	a4,a3,-1844 # 800228cc <__stack_top+0xfffdf4bc>
80003a14:	00e787b3          	add	a5,a5,a4
80003a18:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:208
            for(i = 0; i < NUM_MAX_APPS; i++){
80003a1c:	fe042623          	sw	zero,-20(s0)
80003a20:	03c0006f          	j	80003a5c <API_DealocateTask+0x32c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:209
                if (applications[i].occupied == TRUE){
80003a24:	800236b7          	lui	a3,0x80023
80003a28:	fec42703          	lw	a4,-20(s0)
80003a2c:	00070793          	mv	a5,a4
80003a30:	00279793          	slli	a5,a5,0x2
80003a34:	00e787b3          	add	a5,a5,a4
80003a38:	00579793          	slli	a5,a5,0x5
80003a3c:	8cc68713          	addi	a4,a3,-1844 # 800228cc <__stack_top+0xfffdf4bc>
80003a40:	00e787b3          	add	a5,a5,a4
80003a44:	0007a703          	lw	a4,0(a5)
80003a48:	00100793          	li	a5,1
80003a4c:	02f70863          	beq	a4,a5,80003a7c <API_DealocateTask+0x34c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:208 (discriminator 2)
            for(i = 0; i < NUM_MAX_APPS; i++){
80003a50:	fec42783          	lw	a5,-20(s0)
80003a54:	00178793          	addi	a5,a5,1
80003a58:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:208 (discriminator 1)
80003a5c:	fec42703          	lw	a4,-20(s0)
80003a60:	00b00793          	li	a5,11
80003a64:	fce7f0e3          	bleu	a4,a5,80003a24 <API_DealocateTask+0x2f4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:213
            API_SystemFinish = TRUE;
80003a68:	00100713          	li	a4,1
80003a6c:	98e1a823          	sw	a4,-1648(gp) # 80008b10 <API_SystemFinish>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:217
    return;
80003a70:	00000013          	nop
80003a74:	00000013          	nop
80003a78:	0080006f          	j	80003a80 <API_DealocateTask+0x350>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:210
                    return;
80003a7c:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:218
}
80003a80:	02c12083          	lw	ra,44(sp)
80003a84:	02812403          	lw	s0,40(sp)
80003a88:	03010113          	addi	sp,sp,48
80003a8c:	00008067          	ret

80003a90 <getNextPriorityAddr>:
getNextPriorityAddr():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:221

// Gets the address of the next tile in the priority list 
unsigned int getNextPriorityAddr(){
80003a90:	fe010113          	addi	sp,sp,-32
80003a94:	00112e23          	sw	ra,28(sp)
80003a98:	00812c23          	sw	s0,24(sp)
80003a9c:	00912a23          	sw	s1,20(sp)
80003aa0:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:223
    int i;
    unsigned int addr = makeAddress(0,0);
80003aa4:	00000593          	li	a1,0
80003aa8:	00000513          	li	a0,0
80003aac:	031020ef          	jal	ra,800062dc <makeAddress>
80003ab0:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:226
    for(;;){
        // Checks if it's a valid address
        if (priorityMatrix[priorityPointer] != makeAddress(0,0)){
80003ab4:	800237b7          	lui	a5,0x80023
80003ab8:	0747a703          	lw	a4,116(a5) # 80023074 <__stack_top+0xfffdfc64>
80003abc:	800237b7          	lui	a5,0x80023
80003ac0:	00271713          	slli	a4,a4,0x2
80003ac4:	8a878793          	addi	a5,a5,-1880 # 800228a8 <__stack_top+0xfffdf498>
80003ac8:	00f707b3          	add	a5,a4,a5
80003acc:	0007a483          	lw	s1,0(a5)
80003ad0:	00000593          	li	a1,0
80003ad4:	00000513          	li	a0,0
80003ad8:	005020ef          	jal	ra,800062dc <makeAddress>
80003adc:	00050793          	mv	a5,a0
80003ae0:	06f48e63          	beq	s1,a5,80003b5c <getNextPriorityAddr+0xcc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:227
            if (Tiles[getXpos(addr)][getYpos(addr)].taskSlots > 0){
80003ae4:	fec42503          	lw	a0,-20(s0)
80003ae8:	480020ef          	jal	ra,80005f68 <getXpos>
80003aec:	00050493          	mv	s1,a0
80003af0:	fec42503          	lw	a0,-20(s0)
80003af4:	4a0020ef          	jal	ra,80005f94 <getYpos>
80003af8:	00050613          	mv	a2,a0
80003afc:	800237b7          	lui	a5,0x80023
80003b00:	07878693          	addi	a3,a5,120 # 80023078 <__stack_top+0xfffdfc68>
80003b04:	00060713          	mv	a4,a2
80003b08:	00171793          	slli	a5,a4,0x1
80003b0c:	00078713          	mv	a4,a5
80003b10:	00c70733          	add	a4,a4,a2
80003b14:	00271793          	slli	a5,a4,0x2
80003b18:	00078713          	mv	a4,a5
80003b1c:	00048793          	mv	a5,s1
80003b20:	00379793          	slli	a5,a5,0x3
80003b24:	009787b3          	add	a5,a5,s1
80003b28:	00279793          	slli	a5,a5,0x2
80003b2c:	00f707b3          	add	a5,a4,a5
80003b30:	00f687b3          	add	a5,a3,a5
80003b34:	0087a783          	lw	a5,8(a5)
80003b38:	02078263          	beqz	a5,80003b5c <getNextPriorityAddr+0xcc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:230
            //for(i = 0; i < NUM_MAX_TASKS; i++){
                //if (Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] == NONE)
                    addr = priorityMatrix[priorityPointer];
80003b3c:	800237b7          	lui	a5,0x80023
80003b40:	0747a703          	lw	a4,116(a5) # 80023074 <__stack_top+0xfffdfc64>
80003b44:	800237b7          	lui	a5,0x80023
80003b48:	00271713          	slli	a4,a4,0x2
80003b4c:	8a878793          	addi	a5,a5,-1880 # 800228a8 <__stack_top+0xfffdf498>
80003b50:	00f707b3          	add	a5,a4,a5
80003b54:	0007a783          	lw	a5,0(a5)
80003b58:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:236
            //}
            }
        }

        // Increments the priorityPointer
        priorityPointer++;
80003b5c:	800237b7          	lui	a5,0x80023
80003b60:	0747a783          	lw	a5,116(a5) # 80023074 <__stack_top+0xfffdfc64>
80003b64:	00178713          	addi	a4,a5,1
80003b68:	800237b7          	lui	a5,0x80023
80003b6c:	06e7aa23          	sw	a4,116(a5) # 80023074 <__stack_top+0xfffdfc64>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:237
        if (priorityPointer == DIM_X*DIM_Y)
80003b70:	800237b7          	lui	a5,0x80023
80003b74:	0747a703          	lw	a4,116(a5) # 80023074 <__stack_top+0xfffdfc64>
80003b78:	00900793          	li	a5,9
80003b7c:	00f71663          	bne	a4,a5,80003b88 <getNextPriorityAddr+0xf8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:238
            priorityPointer = 0;
80003b80:	800237b7          	lui	a5,0x80023
80003b84:	0607aa23          	sw	zero,116(a5) # 80023074 <__stack_top+0xfffdfc64>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:241

        // If we found a new valid address, return
        if( addr != makeAddress(0,0))
80003b88:	00000593          	li	a1,0
80003b8c:	00000513          	li	a0,0
80003b90:	74c020ef          	jal	ra,800062dc <makeAddress>
80003b94:	00050713          	mv	a4,a0
80003b98:	fec42783          	lw	a5,-20(s0)
80003b9c:	00e79463          	bne	a5,a4,80003ba4 <getNextPriorityAddr+0x114>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:226
        if (priorityMatrix[priorityPointer] != makeAddress(0,0)){
80003ba0:	f15ff06f          	j	80003ab4 <getNextPriorityAddr+0x24>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:242
            break;
80003ba4:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:244
    }
    return addr;
80003ba8:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:246
    //return 0x101;
}
80003bac:	00078513          	mv	a0,a5
80003bb0:	01c12083          	lw	ra,28(sp)
80003bb4:	01812403          	lw	s0,24(sp)
80003bb8:	01412483          	lw	s1,20(sp)
80003bbc:	02010113          	addi	sp,sp,32
80003bc0:	00008067          	ret

80003bc4 <API_GetTaskSlotFromTile>:
API_GetTaskSlotFromTile():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:249

// Gets a free slot from one given tile
unsigned int API_GetTaskSlotFromTile(unsigned int addr, unsigned int app, unsigned int task){
80003bc4:	fe010113          	addi	sp,sp,-32
80003bc8:	00112e23          	sw	ra,28(sp)
80003bcc:	00812c23          	sw	s0,24(sp)
80003bd0:	00912a23          	sw	s1,20(sp)
80003bd4:	01212823          	sw	s2,16(sp)
80003bd8:	02010413          	addi	s0,sp,32
80003bdc:	fea42623          	sw	a0,-20(s0)
80003be0:	feb42423          	sw	a1,-24(s0)
80003be4:	fec42223          	sw	a2,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:259
            printsv("\t achei!! > ", i);
            Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] = (app << 16) | task;
            return i;
        }
    }*/
    if(Tiles[getXpos(addr)][getYpos(addr)].taskSlots > 0){
80003be8:	fec42503          	lw	a0,-20(s0)
80003bec:	37c020ef          	jal	ra,80005f68 <getXpos>
80003bf0:	00050493          	mv	s1,a0
80003bf4:	fec42503          	lw	a0,-20(s0)
80003bf8:	39c020ef          	jal	ra,80005f94 <getYpos>
80003bfc:	00050613          	mv	a2,a0
80003c00:	800237b7          	lui	a5,0x80023
80003c04:	07878693          	addi	a3,a5,120 # 80023078 <__stack_top+0xfffdfc68>
80003c08:	00060713          	mv	a4,a2
80003c0c:	00171793          	slli	a5,a4,0x1
80003c10:	00078713          	mv	a4,a5
80003c14:	00c70733          	add	a4,a4,a2
80003c18:	00271793          	slli	a5,a4,0x2
80003c1c:	00078713          	mv	a4,a5
80003c20:	00048793          	mv	a5,s1
80003c24:	00379793          	slli	a5,a5,0x3
80003c28:	009787b3          	add	a5,a5,s1
80003c2c:	00279793          	slli	a5,a5,0x2
80003c30:	00f707b3          	add	a5,a4,a5
80003c34:	00f687b3          	add	a5,a3,a5
80003c38:	0087a783          	lw	a5,8(a5)
80003c3c:	0a078c63          	beqz	a5,80003cf4 <API_GetTaskSlotFromTile+0x130>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:260
        Tiles[getXpos(addr)][getYpos(addr)].taskSlots = Tiles[getXpos(addr)][getYpos(addr)].taskSlots - 1;
80003c40:	fec42503          	lw	a0,-20(s0)
80003c44:	324020ef          	jal	ra,80005f68 <getXpos>
80003c48:	00050493          	mv	s1,a0
80003c4c:	fec42503          	lw	a0,-20(s0)
80003c50:	344020ef          	jal	ra,80005f94 <getYpos>
80003c54:	00050613          	mv	a2,a0
80003c58:	800237b7          	lui	a5,0x80023
80003c5c:	07878693          	addi	a3,a5,120 # 80023078 <__stack_top+0xfffdfc68>
80003c60:	00060713          	mv	a4,a2
80003c64:	00171793          	slli	a5,a4,0x1
80003c68:	00078713          	mv	a4,a5
80003c6c:	00c70733          	add	a4,a4,a2
80003c70:	00271793          	slli	a5,a4,0x2
80003c74:	00078713          	mv	a4,a5
80003c78:	00048793          	mv	a5,s1
80003c7c:	00379793          	slli	a5,a5,0x3
80003c80:	009787b3          	add	a5,a5,s1
80003c84:	00279793          	slli	a5,a5,0x2
80003c88:	00f707b3          	add	a5,a4,a5
80003c8c:	00f687b3          	add	a5,a3,a5
80003c90:	0087a483          	lw	s1,8(a5)
80003c94:	fec42503          	lw	a0,-20(s0)
80003c98:	2d0020ef          	jal	ra,80005f68 <getXpos>
80003c9c:	00050913          	mv	s2,a0
80003ca0:	fec42503          	lw	a0,-20(s0)
80003ca4:	2f0020ef          	jal	ra,80005f94 <getYpos>
80003ca8:	00050593          	mv	a1,a0
80003cac:	fff48693          	addi	a3,s1,-1
80003cb0:	800237b7          	lui	a5,0x80023
80003cb4:	07878613          	addi	a2,a5,120 # 80023078 <__stack_top+0xfffdfc68>
80003cb8:	00058713          	mv	a4,a1
80003cbc:	00171793          	slli	a5,a4,0x1
80003cc0:	00078713          	mv	a4,a5
80003cc4:	00b70733          	add	a4,a4,a1
80003cc8:	00271793          	slli	a5,a4,0x2
80003ccc:	00078713          	mv	a4,a5
80003cd0:	00090793          	mv	a5,s2
80003cd4:	00379793          	slli	a5,a5,0x3
80003cd8:	012787b3          	add	a5,a5,s2
80003cdc:	00279793          	slli	a5,a5,0x2
80003ce0:	00f707b3          	add	a5,a4,a5
80003ce4:	00f607b3          	add	a5,a2,a5
80003ce8:	00d7a423          	sw	a3,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:261
        return 1;
80003cec:	00100793          	li	a5,1
80003cf0:	0140006f          	j	80003d04 <API_GetTaskSlotFromTile+0x140>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:263
    }else {
        prints("returning erro5\n");
80003cf4:	800087b7          	lui	a5,0x80008
80003cf8:	12878513          	addi	a0,a5,296 # 80008128 <__stack_top+0xfffc4d18>
80003cfc:	118020ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:264
        return ERRO;
80003d00:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:266
    }
}
80003d04:	00078513          	mv	a0,a5
80003d08:	01c12083          	lw	ra,28(sp)
80003d0c:	01812403          	lw	s0,24(sp)
80003d10:	01412483          	lw	s1,20(sp)
80003d14:	01012903          	lw	s2,16(sp)
80003d18:	02010113          	addi	sp,sp,32
80003d1c:	00008067          	ret

80003d20 <API_ClearTaskSlotFromTile>:
API_ClearTaskSlotFromTile():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:269

// Clear a slot occupied by a given task
unsigned int API_ClearTaskSlotFromTile(unsigned int addr, unsigned int app, unsigned int task){
80003d20:	fe010113          	addi	sp,sp,-32
80003d24:	00112e23          	sw	ra,28(sp)
80003d28:	00812c23          	sw	s0,24(sp)
80003d2c:	00912a23          	sw	s1,20(sp)
80003d30:	02010413          	addi	s0,sp,32
80003d34:	fea42623          	sw	a0,-20(s0)
80003d38:	feb42423          	sw	a1,-24(s0)
80003d3c:	fec42223          	sw	a2,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:270
    Tiles[getXpos(addr)][getYpos(addr)].taskSlots++;
80003d40:	fec42503          	lw	a0,-20(s0)
80003d44:	224020ef          	jal	ra,80005f68 <getXpos>
80003d48:	00050493          	mv	s1,a0
80003d4c:	fec42503          	lw	a0,-20(s0)
80003d50:	244020ef          	jal	ra,80005f94 <getYpos>
80003d54:	00050693          	mv	a3,a0
80003d58:	800237b7          	lui	a5,0x80023
80003d5c:	07878613          	addi	a2,a5,120 # 80023078 <__stack_top+0xfffdfc68>
80003d60:	00068713          	mv	a4,a3
80003d64:	00171793          	slli	a5,a4,0x1
80003d68:	00078713          	mv	a4,a5
80003d6c:	00d70733          	add	a4,a4,a3
80003d70:	00271793          	slli	a5,a4,0x2
80003d74:	00078713          	mv	a4,a5
80003d78:	00048793          	mv	a5,s1
80003d7c:	00379793          	slli	a5,a5,0x3
80003d80:	009787b3          	add	a5,a5,s1
80003d84:	00279793          	slli	a5,a5,0x2
80003d88:	00f707b3          	add	a5,a4,a5
80003d8c:	00f607b3          	add	a5,a2,a5
80003d90:	0087a783          	lw	a5,8(a5)
80003d94:	00178613          	addi	a2,a5,1
80003d98:	800237b7          	lui	a5,0x80023
80003d9c:	07878593          	addi	a1,a5,120 # 80023078 <__stack_top+0xfffdfc68>
80003da0:	00068713          	mv	a4,a3
80003da4:	00171793          	slli	a5,a4,0x1
80003da8:	00078713          	mv	a4,a5
80003dac:	00d70733          	add	a4,a4,a3
80003db0:	00271793          	slli	a5,a4,0x2
80003db4:	00078713          	mv	a4,a5
80003db8:	00048793          	mv	a5,s1
80003dbc:	00379793          	slli	a5,a5,0x3
80003dc0:	009787b3          	add	a5,a5,s1
80003dc4:	00279793          	slli	a5,a5,0x2
80003dc8:	00f707b3          	add	a5,a4,a5
80003dcc:	00f587b3          	add	a5,a1,a5
80003dd0:	00c7a423          	sw	a2,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:271
    if(Tiles[getXpos(addr)][getYpos(addr)].taskSlots > NUM_MAX_TASKS){
80003dd4:	fec42503          	lw	a0,-20(s0)
80003dd8:	190020ef          	jal	ra,80005f68 <getXpos>
80003ddc:	00050493          	mv	s1,a0
80003de0:	fec42503          	lw	a0,-20(s0)
80003de4:	1b0020ef          	jal	ra,80005f94 <getYpos>
80003de8:	00050613          	mv	a2,a0
80003dec:	800237b7          	lui	a5,0x80023
80003df0:	07878693          	addi	a3,a5,120 # 80023078 <__stack_top+0xfffdfc68>
80003df4:	00060713          	mv	a4,a2
80003df8:	00171793          	slli	a5,a4,0x1
80003dfc:	00078713          	mv	a4,a5
80003e00:	00c70733          	add	a4,a4,a2
80003e04:	00271793          	slli	a5,a4,0x2
80003e08:	00078713          	mv	a4,a5
80003e0c:	00048793          	mv	a5,s1
80003e10:	00379793          	slli	a5,a5,0x3
80003e14:	009787b3          	add	a5,a5,s1
80003e18:	00279793          	slli	a5,a5,0x2
80003e1c:	00f707b3          	add	a5,a4,a5
80003e20:	00f687b3          	add	a5,a3,a5
80003e24:	0087a703          	lw	a4,8(a5)
80003e28:	00600793          	li	a5,6
80003e2c:	00e7fc63          	bleu	a4,a5,80003e44 <API_ClearTaskSlotFromTile+0x124>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:272
        prints("returning erro6\n");
80003e30:	800087b7          	lui	a5,0x80008
80003e34:	13c78513          	addi	a0,a5,316 # 8000813c <__stack_top+0xfffc4d2c>
80003e38:	7dd010ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:273
        return ERRO;
80003e3c:	fff00793          	li	a5,-1
80003e40:	0080006f          	j	80003e48 <API_ClearTaskSlotFromTile+0x128>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:276
    }
    else{
        return 1;
80003e44:	00100793          	li	a5,1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:280
    }
    prints("returning erro7\n");
    return ERRO;
}
80003e48:	00078513          	mv	a0,a5
80003e4c:	01c12083          	lw	ra,28(sp)
80003e50:	01812403          	lw	s0,24(sp)
80003e54:	01412483          	lw	s1,20(sp)
80003e58:	02010113          	addi	sp,sp,32
80003e5c:	00008067          	ret

80003e60 <API_GetSystemTasksSlots>:
API_GetSystemTasksSlots():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:283

// Iterates around the system tiles to sum the amount of tasks slots available
unsigned int API_GetSystemTasksSlots(){
80003e60:	fe010113          	addi	sp,sp,-32
80003e64:	00112e23          	sw	ra,28(sp)
80003e68:	00812c23          	sw	s0,24(sp)
80003e6c:	00912a23          	sw	s1,20(sp)
80003e70:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:285
    int m, n, i, sum;
    sum = 0;
80003e74:	fe042223          	sw	zero,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:286
    for(m = 0; m < DIM_X; m++){
80003e78:	fe042623          	sw	zero,-20(s0)
80003e7c:	0a80006f          	j	80003f24 <API_GetSystemTasksSlots+0xc4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:287
        for(n = 0; n < DIM_Y; n++){
80003e80:	fe042423          	sw	zero,-24(s0)
80003e84:	0880006f          	j	80003f0c <API_GetSystemTasksSlots+0xac>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:288
            if(makeAddress(m,n) != makeAddress(0,0)){
80003e88:	fec42783          	lw	a5,-20(s0)
80003e8c:	fe842703          	lw	a4,-24(s0)
80003e90:	00070593          	mv	a1,a4
80003e94:	00078513          	mv	a0,a5
80003e98:	444020ef          	jal	ra,800062dc <makeAddress>
80003e9c:	00050493          	mv	s1,a0
80003ea0:	00000593          	li	a1,0
80003ea4:	00000513          	li	a0,0
80003ea8:	434020ef          	jal	ra,800062dc <makeAddress>
80003eac:	00050793          	mv	a5,a0
80003eb0:	04f48863          	beq	s1,a5,80003f00 <API_GetSystemTasksSlots+0xa0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:289
                sum += Tiles[m][n].taskSlots;
80003eb4:	80023737          	lui	a4,0x80023
80003eb8:	fe842783          	lw	a5,-24(s0)
80003ebc:	fec42683          	lw	a3,-20(s0)
80003ec0:	07870613          	addi	a2,a4,120 # 80023078 <__stack_top+0xfffdfc68>
80003ec4:	00078713          	mv	a4,a5
80003ec8:	00171713          	slli	a4,a4,0x1
80003ecc:	00f70733          	add	a4,a4,a5
80003ed0:	00271793          	slli	a5,a4,0x2
80003ed4:	00078713          	mv	a4,a5
80003ed8:	00068793          	mv	a5,a3
80003edc:	00379793          	slli	a5,a5,0x3
80003ee0:	00d787b3          	add	a5,a5,a3
80003ee4:	00279793          	slli	a5,a5,0x2
80003ee8:	00f707b3          	add	a5,a4,a5
80003eec:	00f607b3          	add	a5,a2,a5
80003ef0:	0087a703          	lw	a4,8(a5)
80003ef4:	fe442783          	lw	a5,-28(s0)
80003ef8:	00f707b3          	add	a5,a4,a5
80003efc:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:287 (discriminator 2)
        for(n = 0; n < DIM_Y; n++){
80003f00:	fe842783          	lw	a5,-24(s0)
80003f04:	00178793          	addi	a5,a5,1
80003f08:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:287 (discriminator 1)
80003f0c:	fe842703          	lw	a4,-24(s0)
80003f10:	00200793          	li	a5,2
80003f14:	f6e7dae3          	ble	a4,a5,80003e88 <API_GetSystemTasksSlots+0x28>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:286 (discriminator 2)
    for(m = 0; m < DIM_X; m++){
80003f18:	fec42783          	lw	a5,-20(s0)
80003f1c:	00178793          	addi	a5,a5,1
80003f20:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:286 (discriminator 1)
80003f24:	fec42703          	lw	a4,-20(s0)
80003f28:	00200793          	li	a5,2
80003f2c:	f4e7dae3          	ble	a4,a5,80003e80 <API_GetSystemTasksSlots+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:293
            }
        }
    }
    return sum;
80003f30:	fe442783          	lw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:294
}
80003f34:	00078513          	mv	a0,a5
80003f38:	01c12083          	lw	ra,28(sp)
80003f3c:	01812403          	lw	s0,24(sp)
80003f40:	01412483          	lw	s1,20(sp)
80003f44:	02010113          	addi	sp,sp,32
80003f48:	00008067          	ret

80003f4c <API_RepositoryAllocation>:
API_RepositoryAllocation():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:296

void API_RepositoryAllocation(unsigned int app, unsigned int task, unsigned int dest_addr){
80003f4c:	fd010113          	addi	sp,sp,-48
80003f50:	02112623          	sw	ra,44(sp)
80003f54:	02812423          	sw	s0,40(sp)
80003f58:	03010413          	addi	s0,sp,48
80003f5c:	fca42e23          	sw	a0,-36(s0)
80003f60:	fcb42c23          	sw	a1,-40(s0)
80003f64:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:299
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80003f68:	0ec010ef          	jal	ra,80005054 <API_GetServiceSlot>
80003f6c:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:300
        if(mySlot == PIPE_FULL){
80003f70:	fec42703          	lw	a4,-20(s0)
80003f74:	fdfe07b7          	lui	a5,0xfdfe0
80003f78:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9c9ed>
80003f7c:	00f71463          	bne	a4,a5,80003f84 <API_RepositoryAllocation+0x38>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:302
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80003f80:	1e8030ef          	jal	ra,80007168 <API_NI_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:304
        }
    }while(mySlot == PIPE_FULL);
80003f84:	fec42703          	lw	a4,-20(s0)
80003f88:	fdfe07b7          	lui	a5,0xfdfe0
80003f8c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9c9ed>
80003f90:	fcf70ce3          	beq	a4,a5,80003f68 <API_RepositoryAllocation+0x1c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:305
    printsv("I got a free service slo-!! -> ", mySlot);
80003f94:	fec42783          	lw	a5,-20(s0)
80003f98:	00078593          	mv	a1,a5
80003f9c:	800087b7          	lui	a5,0x80008
80003fa0:	15078513          	addi	a0,a5,336 # 80008150 <__stack_top+0xfffc4d40>
80003fa4:	71d010ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:307

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80003fa8:	800227b7          	lui	a5,0x80022
80003fac:	fec42703          	lw	a4,-20(s0)
80003fb0:	bec78693          	addi	a3,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
80003fb4:	00070793          	mv	a5,a4
80003fb8:	00479793          	slli	a5,a5,0x4
80003fbc:	40e787b3          	sub	a5,a5,a4
80003fc0:	00279793          	slli	a5,a5,0x2
80003fc4:	00f687b3          	add	a5,a3,a5
80003fc8:	feff0737          	lui	a4,0xfeff0
80003fcc:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efacaee>
80003fd0:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:309

    ServicePipe[mySlot].header.header           = makeAddress(0, 0) | PERIPH_SOUTH;
80003fd4:	00000593          	li	a1,0
80003fd8:	00000513          	li	a0,0
80003fdc:	300020ef          	jal	ra,800062dc <makeAddress>
80003fe0:	00050713          	mv	a4,a0
80003fe4:	000407b7          	lui	a5,0x40
80003fe8:	00f766b3          	or	a3,a4,a5
80003fec:	800227b7          	lui	a5,0x80022
80003ff0:	fec42703          	lw	a4,-20(s0)
80003ff4:	bec78613          	addi	a2,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
80003ff8:	00070793          	mv	a5,a4
80003ffc:	00479793          	slli	a5,a5,0x4
80004000:	40e787b3          	sub	a5,a5,a4
80004004:	00279793          	slli	a5,a5,0x2
80004008:	00f607b3          	add	a5,a2,a5
8000400c:	00d7a423          	sw	a3,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:310
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80004010:	800227b7          	lui	a5,0x80022
80004014:	fec42703          	lw	a4,-20(s0)
80004018:	bec78693          	addi	a3,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
8000401c:	00070793          	mv	a5,a4
80004020:	00479793          	slli	a5,a5,0x4
80004024:	40e787b3          	sub	a5,a5,a4
80004028:	00279793          	slli	a5,a5,0x2
8000402c:	00f687b3          	add	a5,a3,a5
80004030:	00b00713          	li	a4,11
80004034:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:311
    ServicePipe[mySlot].header.service          = TASK_ALLOCATION_SEND;
80004038:	800227b7          	lui	a5,0x80022
8000403c:	fec42703          	lw	a4,-20(s0)
80004040:	bec78693          	addi	a3,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
80004044:	00070793          	mv	a5,a4
80004048:	00479793          	slli	a5,a5,0x4
8000404c:	40e787b3          	sub	a5,a5,a4
80004050:	00279793          	slli	a5,a5,0x2
80004054:	00f687b3          	add	a5,a3,a5
80004058:	03000713          	li	a4,48
8000405c:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:312
    ServicePipe[mySlot].header.task_id          = task;
80004060:	800227b7          	lui	a5,0x80022
80004064:	fec42703          	lw	a4,-20(s0)
80004068:	bec78693          	addi	a3,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
8000406c:	00070793          	mv	a5,a4
80004070:	00479793          	slli	a5,a5,0x4
80004074:	40e787b3          	sub	a5,a5,a4
80004078:	00279793          	slli	a5,a5,0x2
8000407c:	00f687b3          	add	a5,a3,a5
80004080:	fd842703          	lw	a4,-40(s0)
80004084:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:313
    ServicePipe[mySlot].header.task_app_id      = app;
80004088:	800227b7          	lui	a5,0x80022
8000408c:	fec42703          	lw	a4,-20(s0)
80004090:	bec78693          	addi	a3,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
80004094:	00070793          	mv	a5,a4
80004098:	00479793          	slli	a5,a5,0x4
8000409c:	40e787b3          	sub	a5,a5,a4
800040a0:	00279793          	slli	a5,a5,0x2
800040a4:	00f687b3          	add	a5,a3,a5
800040a8:	fdc42703          	lw	a4,-36(s0)
800040ac:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:314
    ServicePipe[mySlot].header.task_dest_addr   = dest_addr;
800040b0:	800227b7          	lui	a5,0x80022
800040b4:	fec42703          	lw	a4,-20(s0)
800040b8:	bec78693          	addi	a3,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
800040bc:	00070793          	mv	a5,a4
800040c0:	00479793          	slli	a5,a5,0x4
800040c4:	40e787b3          	sub	a5,a5,a4
800040c8:	00279793          	slli	a5,a5,0x2
800040cc:	00f687b3          	add	a5,a3,a5
800040d0:	fd442703          	lw	a4,-44(s0)
800040d4:	02e7ac23          	sw	a4,56(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:316

    API_PushSendQueue(SERVICE, mySlot);
800040d8:	fec42583          	lw	a1,-20(s0)
800040dc:	10100537          	lui	a0,0x10100
800040e0:	23c020ef          	jal	ra,8000631c <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:317
    return;    
800040e4:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:318
}
800040e8:	02c12083          	lw	ra,44(sp)
800040ec:	02812403          	lw	s0,40(sp)
800040f0:	03010113          	addi	sp,sp,48
800040f4:	00008067          	ret

800040f8 <API_TaskAllocated>:
API_TaskAllocated():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:320

void API_TaskAllocated(unsigned int task_id, unsigned int app_id){
800040f8:	fd010113          	addi	sp,sp,-48
800040fc:	02112623          	sw	ra,44(sp)
80004100:	02812423          	sw	s0,40(sp)
80004104:	03010413          	addi	s0,sp,48
80004108:	fca42e23          	sw	a0,-36(s0)
8000410c:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:322
    unsigned int i;
    applications[app_id].tasks[task_id].status = TASK_ALLOCATED;
80004110:	80023737          	lui	a4,0x80023
80004114:	fdc42783          	lw	a5,-36(s0)
80004118:	fd842683          	lw	a3,-40(s0)
8000411c:	8cc70613          	addi	a2,a4,-1844 # 800228cc <__stack_top+0xfffdf4bc>
80004120:	00078713          	mv	a4,a5
80004124:	00171713          	slli	a4,a4,0x1
80004128:	00f70733          	add	a4,a4,a5
8000412c:	00271793          	slli	a5,a4,0x2
80004130:	00078713          	mv	a4,a5
80004134:	00068793          	mv	a5,a3
80004138:	00279793          	slli	a5,a5,0x2
8000413c:	00d787b3          	add	a5,a5,a3
80004140:	00579793          	slli	a5,a5,0x5
80004144:	00f707b3          	add	a5,a4,a5
80004148:	00f607b3          	add	a5,a2,a5
8000414c:	00400713          	li	a4,4
80004150:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:324

    for(i = 0; i < applications[app_id].numTasks; i++){
80004154:	fe042623          	sw	zero,-20(s0)
80004158:	0580006f          	j	800041b0 <API_TaskAllocated+0xb8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:325
        if(applications[app_id].tasks[i].status != TASK_ALLOCATED){
8000415c:	80023737          	lui	a4,0x80023
80004160:	fec42783          	lw	a5,-20(s0)
80004164:	fd842683          	lw	a3,-40(s0)
80004168:	8cc70613          	addi	a2,a4,-1844 # 800228cc <__stack_top+0xfffdf4bc>
8000416c:	00078713          	mv	a4,a5
80004170:	00171713          	slli	a4,a4,0x1
80004174:	00f70733          	add	a4,a4,a5
80004178:	00271793          	slli	a5,a4,0x2
8000417c:	00078713          	mv	a4,a5
80004180:	00068793          	mv	a5,a3
80004184:	00279793          	slli	a5,a5,0x2
80004188:	00d787b3          	add	a5,a5,a3
8000418c:	00579793          	slli	a5,a5,0x5
80004190:	00f707b3          	add	a5,a4,a5
80004194:	00f607b3          	add	a5,a2,a5
80004198:	0147a703          	lw	a4,20(a5)
8000419c:	00400793          	li	a5,4
800041a0:	06f71663          	bne	a4,a5,8000420c <API_TaskAllocated+0x114>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:324 (discriminator 2)
    for(i = 0; i < applications[app_id].numTasks; i++){
800041a4:	fec42783          	lw	a5,-20(s0)
800041a8:	00178793          	addi	a5,a5,1
800041ac:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:324 (discriminator 1)
800041b0:	800236b7          	lui	a3,0x80023
800041b4:	fd842703          	lw	a4,-40(s0)
800041b8:	00070793          	mv	a5,a4
800041bc:	00279793          	slli	a5,a5,0x2
800041c0:	00e787b3          	add	a5,a5,a4
800041c4:	00579793          	slli	a5,a5,0x5
800041c8:	8cc68713          	addi	a4,a3,-1844 # 800228cc <__stack_top+0xfffdf4bc>
800041cc:	00e787b3          	add	a5,a5,a4
800041d0:	0107a783          	lw	a5,16(a5)
800041d4:	fec42703          	lw	a4,-20(s0)
800041d8:	f8f762e3          	bltu	a4,a5,8000415c <API_TaskAllocated+0x64>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:330
            //printi(i);
            return;
        }
    }
    printsv("Application allocated: ", app_id);
800041dc:	fd842783          	lw	a5,-40(s0)
800041e0:	00078593          	mv	a1,a5
800041e4:	800087b7          	lui	a5,0x80008
800041e8:	17078513          	addi	a0,a5,368 # 80008170 <__stack_top+0xfffc4d60>
800041ec:	4d5010ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:331
    API_ApplicationStart(app_id);
800041f0:	fd842503          	lw	a0,-40(s0)
800041f4:	02c000ef          	jal	ra,80004220 <API_ApplicationStart>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:332
    prints("\tStart command sent to every task.\n");
800041f8:	800087b7          	lui	a5,0x80008
800041fc:	18878513          	addi	a0,a5,392 # 80008188 <__stack_top+0xfffc4d78>
80004200:	415010ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:333
    return;
80004204:	00000013          	nop
80004208:	0080006f          	j	80004210 <API_TaskAllocated+0x118>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:327
            return;
8000420c:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:334
}
80004210:	02c12083          	lw	ra,44(sp)
80004214:	02812403          	lw	s0,40(sp)
80004218:	03010113          	addi	sp,sp,48
8000421c:	00008067          	ret

80004220 <API_ApplicationStart>:
API_ApplicationStart():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:336

void API_ApplicationStart(unsigned int app_id){
80004220:	fd010113          	addi	sp,sp,-48
80004224:	02112623          	sw	ra,44(sp)
80004228:	02812423          	sw	s0,40(sp)
8000422c:	03010413          	addi	s0,sp,48
80004230:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:339
    unsigned int i, j;
    unsigned int mySlot;
    for(i = 0; i < applications[app_id].numTasks; i++){
80004234:	fe042623          	sw	zero,-20(s0)
80004238:	2640006f          	j	8000449c <API_ApplicationStart+0x27c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:341
        do{
            mySlot = API_GetMessageSlot();
8000423c:	4bd000ef          	jal	ra,80004ef8 <API_GetMessageSlot>
80004240:	fea42223          	sw	a0,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:342
            if(mySlot == PIPE_FULL){
80004244:	fe442703          	lw	a4,-28(s0)
80004248:	fdfe07b7          	lui	a5,0xfdfe0
8000424c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9c9ed>
80004250:	00f71463          	bne	a4,a5,80004258 <API_ApplicationStart+0x38>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:344
                // Runs the NI Handler to send/receive packets, opening space in the PIPE
                API_NI_Handler();
80004254:	715020ef          	jal	ra,80007168 <API_NI_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:346
            }
        }while(mySlot == PIPE_FULL);
80004258:	fe442703          	lw	a4,-28(s0)
8000425c:	fdfe07b7          	lui	a5,0xfdfe0
80004260:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9c9ed>
80004264:	fcf70ce3          	beq	a4,a5,8000423c <API_ApplicationStart+0x1c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:348

        MessagePipe[mySlot].holder = PIPE_SYS_HOLDER;
80004268:	800227b7          	lui	a5,0x80022
8000426c:	fe442683          	lw	a3,-28(s0)
80004270:	f9478713          	addi	a4,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
80004274:	24400793          	li	a5,580
80004278:	02f687b3          	mul	a5,a3,a5
8000427c:	00f707b3          	add	a5,a4,a5
80004280:	feff0737          	lui	a4,0xfeff0
80004284:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efacaee>
80004288:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:350

        MessagePipe[mySlot].header.header           = applications[app_id].tasks[i].addr;
8000428c:	80023737          	lui	a4,0x80023
80004290:	fec42783          	lw	a5,-20(s0)
80004294:	fdc42683          	lw	a3,-36(s0)
80004298:	8cc70613          	addi	a2,a4,-1844 # 800228cc <__stack_top+0xfffdf4bc>
8000429c:	00078713          	mv	a4,a5
800042a0:	00171713          	slli	a4,a4,0x1
800042a4:	00f70733          	add	a4,a4,a5
800042a8:	00271793          	slli	a5,a4,0x2
800042ac:	00078713          	mv	a4,a5
800042b0:	00068793          	mv	a5,a3
800042b4:	00279793          	slli	a5,a5,0x2
800042b8:	00d787b3          	add	a5,a5,a3
800042bc:	00579793          	slli	a5,a5,0x5
800042c0:	00f707b3          	add	a5,a4,a5
800042c4:	00f607b3          	add	a5,a2,a5
800042c8:	0187a703          	lw	a4,24(a5)
800042cc:	800227b7          	lui	a5,0x80022
800042d0:	fe442603          	lw	a2,-28(s0)
800042d4:	f9478693          	addi	a3,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
800042d8:	24400793          	li	a5,580
800042dc:	02f607b3          	mul	a5,a2,a5
800042e0:	00f687b3          	add	a5,a3,a5
800042e4:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:351
        MessagePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE + applications[app_id].numTasks + 1;
800042e8:	800236b7          	lui	a3,0x80023
800042ec:	fdc42703          	lw	a4,-36(s0)
800042f0:	00070793          	mv	a5,a4
800042f4:	00279793          	slli	a5,a5,0x2
800042f8:	00e787b3          	add	a5,a5,a4
800042fc:	00579793          	slli	a5,a5,0x5
80004300:	8cc68713          	addi	a4,a3,-1844 # 800228cc <__stack_top+0xfffdf4bc>
80004304:	00e787b3          	add	a5,a5,a4
80004308:	0107a783          	lw	a5,16(a5)
8000430c:	00c78713          	addi	a4,a5,12
80004310:	800227b7          	lui	a5,0x80022
80004314:	fe442603          	lw	a2,-28(s0)
80004318:	f9478693          	addi	a3,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
8000431c:	24400793          	li	a5,580
80004320:	02f607b3          	mul	a5,a2,a5
80004324:	00f687b3          	add	a5,a3,a5
80004328:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:352
        MessagePipe[mySlot].header.service          = TASK_START;
8000432c:	800227b7          	lui	a5,0x80022
80004330:	fe442683          	lw	a3,-28(s0)
80004334:	f9478713          	addi	a4,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
80004338:	24400793          	li	a5,580
8000433c:	02f687b3          	mul	a5,a3,a5
80004340:	00f707b3          	add	a5,a4,a5
80004344:	40000713          	li	a4,1024
80004348:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:353
        MessagePipe[mySlot].header.task_id          = i;
8000434c:	800227b7          	lui	a5,0x80022
80004350:	fe442683          	lw	a3,-28(s0)
80004354:	f9478713          	addi	a4,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
80004358:	24400793          	li	a5,580
8000435c:	02f687b3          	mul	a5,a3,a5
80004360:	00f707b3          	add	a5,a4,a5
80004364:	fec42703          	lw	a4,-20(s0)
80004368:	00e7ac23          	sw	a4,24(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:354
        MessagePipe[mySlot].header.task_app_id      = app_id;
8000436c:	800227b7          	lui	a5,0x80022
80004370:	fe442683          	lw	a3,-28(s0)
80004374:	f9478713          	addi	a4,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
80004378:	24400793          	li	a5,580
8000437c:	02f687b3          	mul	a5,a3,a5
80004380:	00f707b3          	add	a5,a4,a5
80004384:	fdc42703          	lw	a4,-36(s0)
80004388:	02e7a423          	sw	a4,40(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:355
        MessagePipe[mySlot].msg.length              = applications[app_id].numTasks;
8000438c:	800236b7          	lui	a3,0x80023
80004390:	fdc42703          	lw	a4,-36(s0)
80004394:	00070793          	mv	a5,a4
80004398:	00279793          	slli	a5,a5,0x2
8000439c:	00e787b3          	add	a5,a5,a4
800043a0:	00579793          	slli	a5,a5,0x5
800043a4:	8cc68713          	addi	a4,a3,-1844 # 800228cc <__stack_top+0xfffdf4bc>
800043a8:	00e787b3          	add	a5,a5,a4
800043ac:	0107a703          	lw	a4,16(a5)
800043b0:	800227b7          	lui	a5,0x80022
800043b4:	fe442603          	lw	a2,-28(s0)
800043b8:	24400693          	li	a3,580
800043bc:	02d606b3          	mul	a3,a2,a3
800043c0:	f9478793          	addi	a5,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
800043c4:	00f687b3          	add	a5,a3,a5
800043c8:	04e7a023          	sw	a4,64(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:356
        for(j = 0; j < applications[app_id].numTasks; j++){
800043cc:	fe042423          	sw	zero,-24(s0)
800043d0:	0880006f          	j	80004458 <API_ApplicationStart+0x238>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:357 (discriminator 3)
            MessagePipe[mySlot].msg.msg[j]          = applications[app_id].tasks[j].addr;
800043d4:	80023737          	lui	a4,0x80023
800043d8:	fe842783          	lw	a5,-24(s0)
800043dc:	fdc42683          	lw	a3,-36(s0)
800043e0:	8cc70613          	addi	a2,a4,-1844 # 800228cc <__stack_top+0xfffdf4bc>
800043e4:	00078713          	mv	a4,a5
800043e8:	00171713          	slli	a4,a4,0x1
800043ec:	00f70733          	add	a4,a4,a5
800043f0:	00271793          	slli	a5,a4,0x2
800043f4:	00078713          	mv	a4,a5
800043f8:	00068793          	mv	a5,a3
800043fc:	00279793          	slli	a5,a5,0x2
80004400:	00d787b3          	add	a5,a5,a3
80004404:	00579793          	slli	a5,a5,0x5
80004408:	00f707b3          	add	a5,a4,a5
8000440c:	00f607b3          	add	a5,a2,a5
80004410:	0187a683          	lw	a3,24(a5)
80004414:	80022637          	lui	a2,0x80022
80004418:	fe442703          	lw	a4,-28(s0)
8000441c:	00070793          	mv	a5,a4
80004420:	00379793          	slli	a5,a5,0x3
80004424:	00e787b3          	add	a5,a5,a4
80004428:	00479793          	slli	a5,a5,0x4
8000442c:	00e787b3          	add	a5,a5,a4
80004430:	fe842703          	lw	a4,-24(s0)
80004434:	00e787b3          	add	a5,a5,a4
80004438:	01078793          	addi	a5,a5,16
8000443c:	f9460713          	addi	a4,a2,-108 # 80021f94 <__stack_top+0xfffdeb84>
80004440:	00279793          	slli	a5,a5,0x2
80004444:	00f707b3          	add	a5,a4,a5
80004448:	00d7a223          	sw	a3,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:356 (discriminator 3)
        for(j = 0; j < applications[app_id].numTasks; j++){
8000444c:	fe842783          	lw	a5,-24(s0)
80004450:	00178793          	addi	a5,a5,1
80004454:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:356 (discriminator 1)
80004458:	800236b7          	lui	a3,0x80023
8000445c:	fdc42703          	lw	a4,-36(s0)
80004460:	00070793          	mv	a5,a4
80004464:	00279793          	slli	a5,a5,0x2
80004468:	00e787b3          	add	a5,a5,a4
8000446c:	00579793          	slli	a5,a5,0x5
80004470:	8cc68713          	addi	a4,a3,-1844 # 800228cc <__stack_top+0xfffdf4bc>
80004474:	00e787b3          	add	a5,a5,a4
80004478:	0107a783          	lw	a5,16(a5)
8000447c:	fe842703          	lw	a4,-24(s0)
80004480:	f4f76ae3          	bltu	a4,a5,800043d4 <API_ApplicationStart+0x1b4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:359 (discriminator 2)
        }
        API_PushSendQueue(MESSAGE, mySlot);
80004484:	fe442583          	lw	a1,-28(s0)
80004488:	20200537          	lui	a0,0x20200
8000448c:	691010ef          	jal	ra,8000631c <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:339 (discriminator 2)
    for(i = 0; i < applications[app_id].numTasks; i++){
80004490:	fec42783          	lw	a5,-20(s0)
80004494:	00178793          	addi	a5,a5,1
80004498:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:339 (discriminator 1)
8000449c:	800236b7          	lui	a3,0x80023
800044a0:	fdc42703          	lw	a4,-36(s0)
800044a4:	00070793          	mv	a5,a4
800044a8:	00279793          	slli	a5,a5,0x2
800044ac:	00e787b3          	add	a5,a5,a4
800044b0:	00579793          	slli	a5,a5,0x5
800044b4:	8cc68713          	addi	a4,a3,-1844 # 800228cc <__stack_top+0xfffdf4bc>
800044b8:	00e787b3          	add	a5,a5,a4
800044bc:	0107a783          	lw	a5,16(a5)
800044c0:	fec42703          	lw	a4,-20(s0)
800044c4:	d6f76ce3          	bltu	a4,a5,8000423c <API_ApplicationStart+0x1c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:361
    }
    return;
800044c8:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:362
}
800044cc:	02c12083          	lw	ra,44(sp)
800044d0:	02812403          	lw	s0,40(sp)
800044d4:	03010113          	addi	sp,sp,48
800044d8:	00008067          	ret

800044dc <API_TaskListInit>:
API_TaskListInit():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:13
#include "chronos.h"

// Stores information about each running task
//extern volatile Task TaskList[ NUM_MAX_TASKS ];

void API_TaskListInit(){
800044dc:	fe010113          	addi	sp,sp,-32
800044e0:	00812e23          	sw	s0,28(sp)
800044e4:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:15
    unsigned int i, j;
    for (i = 0; i < NUM_MAX_TASKS; i++){
800044e8:	fe042623          	sw	zero,-20(s0)
800044ec:	0840006f          	j	80004570 <API_TaskListInit+0x94>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:16
        TaskList[i].status = TASK_SLOT_EMPTY;
800044f0:	800236b7          	lui	a3,0x80023
800044f4:	fec42703          	lw	a4,-20(s0)
800044f8:	00070793          	mv	a5,a4
800044fc:	00579793          	slli	a5,a5,0x5
80004500:	00e787b3          	add	a5,a5,a4
80004504:	00279793          	slli	a5,a5,0x2
80004508:	0e468713          	addi	a4,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
8000450c:	00e787b3          	add	a5,a5,a4
80004510:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:17
        for (j = 0; j < NUM_MAX_APP_TASKS; j++){
80004514:	fe042423          	sw	zero,-24(s0)
80004518:	0400006f          	j	80004558 <API_TaskListInit+0x7c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:18 (discriminator 3)
            TaskList[i].PendingReq[j] = FALSE;
8000451c:	800236b7          	lui	a3,0x80023
80004520:	fec42703          	lw	a4,-20(s0)
80004524:	00070793          	mv	a5,a4
80004528:	00579793          	slli	a5,a5,0x5
8000452c:	00e787b3          	add	a5,a5,a4
80004530:	fe842703          	lw	a4,-24(s0)
80004534:	00e787b3          	add	a5,a5,a4
80004538:	00c78793          	addi	a5,a5,12
8000453c:	00279713          	slli	a4,a5,0x2
80004540:	0e468793          	addi	a5,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
80004544:	00f707b3          	add	a5,a4,a5
80004548:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:17 (discriminator 3)
        for (j = 0; j < NUM_MAX_APP_TASKS; j++){
8000454c:	fe842783          	lw	a5,-24(s0)
80004550:	00178793          	addi	a5,a5,1
80004554:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:17 (discriminator 1)
80004558:	fe842703          	lw	a4,-24(s0)
8000455c:	00900793          	li	a5,9
80004560:	fae7fee3          	bleu	a4,a5,8000451c <API_TaskListInit+0x40>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 2)
    for (i = 0; i < NUM_MAX_TASKS; i++){
80004564:	fec42783          	lw	a5,-20(s0)
80004568:	00178793          	addi	a5,a5,1
8000456c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 1)
80004570:	fec42703          	lw	a4,-20(s0)
80004574:	00500793          	li	a5,5
80004578:	f6e7fce3          	bleu	a4,a5,800044f0 <API_TaskListInit+0x14>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:21
        }
    }
    return;
8000457c:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:22
}
80004580:	01c12403          	lw	s0,28(sp)
80004584:	02010113          	addi	sp,sp,32
80004588:	00008067          	ret

8000458c <API_GetCurrentTaskSlot>:
API_GetCurrentTaskSlot():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:24

unsigned int API_GetCurrentTaskSlot(){
8000458c:	fe010113          	addi	sp,sp,-32
80004590:	00112e23          	sw	ra,28(sp)
80004594:	00812c23          	sw	s0,24(sp)
80004598:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:26
    // The handle of the currently running ( calling ) task on the kernel.
    TaskHandle_t xHandle = xTaskGetCurrentTaskHandle();
8000459c:	85dfe0ef          	jal	ra,80002df8 <xTaskGetCurrentTaskHandle>
800045a0:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:27
    unsigned int i = 0;
800045a4:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:28
    for ( i = 0 ; i < NUM_MAX_TASKS ; i++ ) {
800045a8:	fe042623          	sw	zero,-20(s0)
800045ac:	06c0006f          	j	80004618 <API_GetCurrentTaskSlot+0x8c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:29
        if ( TaskList[ i ].TaskHandler == xHandle && TaskList[i].status != TASK_SLOT_EMPTY ) {
800045b0:	800237b7          	lui	a5,0x80023
800045b4:	fec42703          	lw	a4,-20(s0)
800045b8:	0e478693          	addi	a3,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
800045bc:	00070793          	mv	a5,a4
800045c0:	00579793          	slli	a5,a5,0x5
800045c4:	00e787b3          	add	a5,a5,a4
800045c8:	00279793          	slli	a5,a5,0x2
800045cc:	00f687b3          	add	a5,a3,a5
800045d0:	0187a783          	lw	a5,24(a5)
800045d4:	fe842703          	lw	a4,-24(s0)
800045d8:	02f71a63          	bne	a4,a5,8000460c <API_GetCurrentTaskSlot+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:29 (discriminator 1)
800045dc:	800236b7          	lui	a3,0x80023
800045e0:	fec42703          	lw	a4,-20(s0)
800045e4:	00070793          	mv	a5,a4
800045e8:	00579793          	slli	a5,a5,0x5
800045ec:	00e787b3          	add	a5,a5,a4
800045f0:	00279793          	slli	a5,a5,0x2
800045f4:	0e468713          	addi	a4,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
800045f8:	00e787b3          	add	a5,a5,a4
800045fc:	0007a783          	lw	a5,0(a5)
80004600:	00078663          	beqz	a5,8000460c <API_GetCurrentTaskSlot+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:30
            return( i );
80004604:	fec42783          	lw	a5,-20(s0)
80004608:	02c0006f          	j	80004634 <API_GetCurrentTaskSlot+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:28 (discriminator 2)
    for ( i = 0 ; i < NUM_MAX_TASKS ; i++ ) {
8000460c:	fec42783          	lw	a5,-20(s0)
80004610:	00178793          	addi	a5,a5,1
80004614:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:28 (discriminator 1)
80004618:	fec42703          	lw	a4,-20(s0)
8000461c:	00500793          	li	a5,5
80004620:	f8e7f8e3          	bleu	a4,a5,800045b0 <API_GetCurrentTaskSlot+0x24>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:33
        }
    }
    prints("returning erro0\n");
80004624:	800087b7          	lui	a5,0x80008
80004628:	1ac78513          	addi	a0,a5,428 # 800081ac <__stack_top+0xfffc4d9c>
8000462c:	7e8010ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:34
    return ERRO;
80004630:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:35
}
80004634:	00078513          	mv	a0,a5
80004638:	01c12083          	lw	ra,28(sp)
8000463c:	01812403          	lw	s0,24(sp)
80004640:	02010113          	addi	sp,sp,32
80004644:	00008067          	ret

80004648 <API_GetFreeTaskSlot>:
API_GetFreeTaskSlot():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:37

unsigned int API_GetFreeTaskSlot(){
80004648:	fe010113          	addi	sp,sp,-32
8000464c:	00112e23          	sw	ra,28(sp)
80004650:	00812c23          	sw	s0,24(sp)
80004654:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:39
    unsigned int i;
    for (i = 0; i < NUM_MAX_TASKS; i++){
80004658:	fe042623          	sw	zero,-20(s0)
8000465c:	0400006f          	j	8000469c <API_GetFreeTaskSlot+0x54>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:40
        if (TaskList[i].status == TASK_SLOT_EMPTY){
80004660:	800236b7          	lui	a3,0x80023
80004664:	fec42703          	lw	a4,-20(s0)
80004668:	00070793          	mv	a5,a4
8000466c:	00579793          	slli	a5,a5,0x5
80004670:	00e787b3          	add	a5,a5,a4
80004674:	00279793          	slli	a5,a5,0x2
80004678:	0e468713          	addi	a4,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
8000467c:	00e787b3          	add	a5,a5,a4
80004680:	0007a783          	lw	a5,0(a5)
80004684:	00079663          	bnez	a5,80004690 <API_GetFreeTaskSlot+0x48>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:41
            return i;
80004688:	fec42783          	lw	a5,-20(s0)
8000468c:	02c0006f          	j	800046b8 <API_GetFreeTaskSlot+0x70>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:39 (discriminator 2)
    for (i = 0; i < NUM_MAX_TASKS; i++){
80004690:	fec42783          	lw	a5,-20(s0)
80004694:	00178793          	addi	a5,a5,1
80004698:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:39 (discriminator 1)
8000469c:	fec42703          	lw	a4,-20(s0)
800046a0:	00500793          	li	a5,5
800046a4:	fae7fee3          	bleu	a4,a5,80004660 <API_GetFreeTaskSlot+0x18>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:44
        }
    }
    prints("returning erro1\n");
800046a8:	800087b7          	lui	a5,0x80008
800046ac:	1c078513          	addi	a0,a5,448 # 800081c0 <__stack_top+0xfffc4db0>
800046b0:	764010ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:45
    return ERRO;
800046b4:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:46
}
800046b8:	00078513          	mv	a0,a5
800046bc:	01c12083          	lw	ra,28(sp)
800046c0:	01812403          	lw	s0,24(sp)
800046c4:	02010113          	addi	sp,sp,32
800046c8:	00008067          	ret

800046cc <API_TaskAllocation>:
API_TaskAllocation():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:48

unsigned int API_TaskAllocation(unsigned int task_id, unsigned int txt_size, unsigned int bss_size, unsigned int start_point, unsigned int task_app_id){
800046cc:	fc010113          	addi	sp,sp,-64
800046d0:	02112e23          	sw	ra,60(sp)
800046d4:	02812c23          	sw	s0,56(sp)
800046d8:	04010413          	addi	s0,sp,64
800046dc:	fca42e23          	sw	a0,-36(s0)
800046e0:	fcb42c23          	sw	a1,-40(s0)
800046e4:	fcc42a23          	sw	a2,-44(s0)
800046e8:	fcd42823          	sw	a3,-48(s0)
800046ec:	fce42623          	sw	a4,-52(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:49
    unsigned int tslot = API_GetFreeTaskSlot();
800046f0:	f59ff0ef          	jal	ra,80004648 <API_GetFreeTaskSlot>
800046f4:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:51
    int i;
    if(tslot == ERRO){
800046f8:	fe842703          	lw	a4,-24(s0)
800046fc:	fff00793          	li	a5,-1
80004700:	00f71863          	bne	a4,a5,80004710 <API_TaskAllocation+0x44>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:52
        prints("DEU RUIM NO API_GetFreeTaskSlot()\n");
80004704:	800087b7          	lui	a5,0x80008
80004708:	1d478513          	addi	a0,a5,468 # 800081d4 <__stack_top+0xfffc4dc4>
8000470c:	708010ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:54
    }
    printsv("Got slot: ", tslot);
80004710:	fe842783          	lw	a5,-24(s0)
80004714:	00078593          	mv	a1,a5
80004718:	800087b7          	lui	a5,0x80008
8000471c:	1f878513          	addi	a0,a5,504 # 800081f8 <__stack_top+0xfffc4de8>
80004720:	7a0010ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:55
    TaskList[tslot].status = TASK_SLOT_WAITING_START;
80004724:	800236b7          	lui	a3,0x80023
80004728:	fe842703          	lw	a4,-24(s0)
8000472c:	00070793          	mv	a5,a4
80004730:	00579793          	slli	a5,a5,0x5
80004734:	00e787b3          	add	a5,a5,a4
80004738:	00279793          	slli	a5,a5,0x2
8000473c:	0e468713          	addi	a4,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
80004740:	00e787b3          	add	a5,a5,a4
80004744:	00200713          	li	a4,2
80004748:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:56
    TaskList[tslot].waitingMsg = FALSE;
8000474c:	800237b7          	lui	a5,0x80023
80004750:	fe842703          	lw	a4,-24(s0)
80004754:	0e478693          	addi	a3,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
80004758:	00070793          	mv	a5,a4
8000475c:	00579793          	slli	a5,a5,0x5
80004760:	00e787b3          	add	a5,a5,a4
80004764:	00279793          	slli	a5,a5,0x2
80004768:	00f687b3          	add	a5,a3,a5
8000476c:	0007ae23          	sw	zero,28(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:57
    TaskList[tslot].TaskID = task_id;
80004770:	800236b7          	lui	a3,0x80023
80004774:	fe842703          	lw	a4,-24(s0)
80004778:	00070793          	mv	a5,a4
8000477c:	00579793          	slli	a5,a5,0x5
80004780:	00e787b3          	add	a5,a5,a4
80004784:	00279793          	slli	a5,a5,0x2
80004788:	0e468713          	addi	a4,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
8000478c:	00e787b3          	add	a5,a5,a4
80004790:	fdc42703          	lw	a4,-36(s0)
80004794:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:58
    TaskList[tslot].AppID = task_app_id;
80004798:	800237b7          	lui	a5,0x80023
8000479c:	fe842703          	lw	a4,-24(s0)
800047a0:	0e478693          	addi	a3,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
800047a4:	00070793          	mv	a5,a4
800047a8:	00579793          	slli	a5,a5,0x5
800047ac:	00e787b3          	add	a5,a5,a4
800047b0:	00279793          	slli	a5,a5,0x2
800047b4:	00f687b3          	add	a5,a3,a5
800047b8:	fcc42703          	lw	a4,-52(s0)
800047bc:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:59
    TaskList[tslot].taskSize = 4 * (txt_size + bss_size); // it multiply by four because each word has 32 bits and the memory is addressed by byte - so each word is composed by 4 addresses
800047c0:	fd842703          	lw	a4,-40(s0)
800047c4:	fd442783          	lw	a5,-44(s0)
800047c8:	00f707b3          	add	a5,a4,a5
800047cc:	00279693          	slli	a3,a5,0x2
800047d0:	800237b7          	lui	a5,0x80023
800047d4:	fe842703          	lw	a4,-24(s0)
800047d8:	0e478613          	addi	a2,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
800047dc:	00070793          	mv	a5,a4
800047e0:	00579793          	slli	a5,a5,0x5
800047e4:	00e787b3          	add	a5,a5,a4
800047e8:	00279793          	slli	a5,a5,0x2
800047ec:	00f607b3          	add	a5,a2,a5
800047f0:	02d7a223          	sw	a3,36(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:60
    printsv("Task total size (txt+bss): ", TaskList[tslot].taskSize);
800047f4:	800237b7          	lui	a5,0x80023
800047f8:	fe842703          	lw	a4,-24(s0)
800047fc:	0e478693          	addi	a3,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
80004800:	00070793          	mv	a5,a4
80004804:	00579793          	slli	a5,a5,0x5
80004808:	00e787b3          	add	a5,a5,a4
8000480c:	00279793          	slli	a5,a5,0x2
80004810:	00f687b3          	add	a5,a3,a5
80004814:	0247a783          	lw	a5,36(a5)
80004818:	00078593          	mv	a1,a5
8000481c:	800087b7          	lui	a5,0x80008
80004820:	20478513          	addi	a0,a5,516 # 80008204 <__stack_top+0xfffc4df4>
80004824:	69c010ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:61
    TaskList[tslot].taskAddr = (unsigned int)pvPortMalloc(TaskList[tslot].taskSize+64);
80004828:	800237b7          	lui	a5,0x80023
8000482c:	fe842703          	lw	a4,-24(s0)
80004830:	0e478693          	addi	a3,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
80004834:	00070793          	mv	a5,a4
80004838:	00579793          	slli	a5,a5,0x5
8000483c:	00e787b3          	add	a5,a5,a4
80004840:	00279793          	slli	a5,a5,0x2
80004844:	00f687b3          	add	a5,a3,a5
80004848:	0247a783          	lw	a5,36(a5)
8000484c:	04078793          	addi	a5,a5,64
80004850:	00078513          	mv	a0,a5
80004854:	a95fc0ef          	jal	ra,800012e8 <pvPortMalloc>
80004858:	00050793          	mv	a5,a0
8000485c:	00078613          	mv	a2,a5
80004860:	800237b7          	lui	a5,0x80023
80004864:	fe842703          	lw	a4,-24(s0)
80004868:	0e478693          	addi	a3,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
8000486c:	00070793          	mv	a5,a4
80004870:	00579793          	slli	a5,a5,0x5
80004874:	00e787b3          	add	a5,a5,a4
80004878:	00279793          	slli	a5,a5,0x2
8000487c:	00f687b3          	add	a5,a3,a5
80004880:	02c7a423          	sw	a2,40(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:62
    printsv("Task addr: ", TaskList[tslot].taskAddr);
80004884:	800237b7          	lui	a5,0x80023
80004888:	fe842703          	lw	a4,-24(s0)
8000488c:	0e478693          	addi	a3,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
80004890:	00070793          	mv	a5,a4
80004894:	00579793          	slli	a5,a5,0x5
80004898:	00e787b3          	add	a5,a5,a4
8000489c:	00279793          	slli	a5,a5,0x2
800048a0:	00f687b3          	add	a5,a3,a5
800048a4:	0287a783          	lw	a5,40(a5)
800048a8:	00078593          	mv	a1,a5
800048ac:	800087b7          	lui	a5,0x80008
800048b0:	22078513          	addi	a0,a5,544 # 80008220 <__stack_top+0xfffc4e10>
800048b4:	60c010ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:63
    TaskList[tslot].mainAddr =  TaskList[tslot].taskAddr + (4 * start_point);
800048b8:	800237b7          	lui	a5,0x80023
800048bc:	fe842703          	lw	a4,-24(s0)
800048c0:	0e478693          	addi	a3,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
800048c4:	00070793          	mv	a5,a4
800048c8:	00579793          	slli	a5,a5,0x5
800048cc:	00e787b3          	add	a5,a5,a4
800048d0:	00279793          	slli	a5,a5,0x2
800048d4:	00f687b3          	add	a5,a3,a5
800048d8:	0287a703          	lw	a4,40(a5)
800048dc:	fd042783          	lw	a5,-48(s0)
800048e0:	00279793          	slli	a5,a5,0x2
800048e4:	00f706b3          	add	a3,a4,a5
800048e8:	800237b7          	lui	a5,0x80023
800048ec:	fe842703          	lw	a4,-24(s0)
800048f0:	0e478613          	addi	a2,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
800048f4:	00070793          	mv	a5,a4
800048f8:	00579793          	slli	a5,a5,0x5
800048fc:	00e787b3          	add	a5,a5,a4
80004900:	00279793          	slli	a5,a5,0x2
80004904:	00f607b3          	add	a5,a2,a5
80004908:	02d7a623          	sw	a3,44(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:69

    // filling the MemoryRegion_t struct
    //TaskList[tslot].memRegion.ulLengthInBytes = 0;// TaskList[tslot].taskSize;
    //TaskList[tslot].memRegion.pvBaseAddress = 0;//TaskList[tslot].taskAddr;

    for(i=0;i<NUM_MAX_APP_TASKS;i++){
8000490c:	fe042623          	sw	zero,-20(s0)
80004910:	0700006f          	j	80004980 <API_TaskAllocation+0x2b4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:70 (discriminator 3)
        TaskList[tslot].PendingReq[i] = FALSE;
80004914:	800236b7          	lui	a3,0x80023
80004918:	fe842703          	lw	a4,-24(s0)
8000491c:	00070793          	mv	a5,a4
80004920:	00579793          	slli	a5,a5,0x5
80004924:	00e787b3          	add	a5,a5,a4
80004928:	fec42703          	lw	a4,-20(s0)
8000492c:	00e787b3          	add	a5,a5,a4
80004930:	00c78793          	addi	a5,a5,12
80004934:	00279713          	slli	a4,a5,0x2
80004938:	0e468793          	addi	a5,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
8000493c:	00f707b3          	add	a5,a4,a5
80004940:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:71 (discriminator 3)
        TaskList[tslot].TasksMap[i] = 0;
80004944:	800236b7          	lui	a3,0x80023
80004948:	fe842703          	lw	a4,-24(s0)
8000494c:	00070793          	mv	a5,a4
80004950:	00579793          	slli	a5,a5,0x5
80004954:	00e787b3          	add	a5,a5,a4
80004958:	fec42703          	lw	a4,-20(s0)
8000495c:	00e787b3          	add	a5,a5,a4
80004960:	01478793          	addi	a5,a5,20
80004964:	0e468713          	addi	a4,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
80004968:	00279793          	slli	a5,a5,0x2
8000496c:	00f707b3          	add	a5,a4,a5
80004970:	0007a623          	sw	zero,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:69 (discriminator 3)
    for(i=0;i<NUM_MAX_APP_TASKS;i++){
80004974:	fec42783          	lw	a5,-20(s0)
80004978:	00178793          	addi	a5,a5,1
8000497c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:69 (discriminator 1)
80004980:	fec42703          	lw	a4,-20(s0)
80004984:	00900793          	li	a5,9
80004988:	f8e7d6e3          	ble	a4,a5,80004914 <API_TaskAllocation+0x248>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:74
    }

    return tslot;
8000498c:	fe842783          	lw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:75
}
80004990:	00078513          	mv	a0,a5
80004994:	03c12083          	lw	ra,60(sp)
80004998:	03812403          	lw	s0,56(sp)
8000499c:	04010113          	addi	sp,sp,64
800049a0:	00008067          	ret

800049a4 <API_GetTaskSlot>:
API_GetTaskSlot():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:77

unsigned int API_GetTaskSlot(unsigned int task_id, unsigned int app_id){
800049a4:	fd010113          	addi	sp,sp,-48
800049a8:	02112623          	sw	ra,44(sp)
800049ac:	02812423          	sw	s0,40(sp)
800049b0:	03010413          	addi	s0,sp,48
800049b4:	fca42e23          	sw	a0,-36(s0)
800049b8:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:79
    unsigned int i;
    for( i = 0; i < NUM_MAX_APP_TASKS; i++){
800049bc:	fe042623          	sw	zero,-20(s0)
800049c0:	0980006f          	j	80004a58 <API_GetTaskSlot+0xb4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:80
        if(task_id == TaskList[i].TaskID && app_id == TaskList[i].AppID && TaskList[i].status != TASK_SLOT_EMPTY)
800049c4:	800236b7          	lui	a3,0x80023
800049c8:	fec42703          	lw	a4,-20(s0)
800049cc:	00070793          	mv	a5,a4
800049d0:	00579793          	slli	a5,a5,0x5
800049d4:	00e787b3          	add	a5,a5,a4
800049d8:	00279793          	slli	a5,a5,0x2
800049dc:	0e468713          	addi	a4,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
800049e0:	00e787b3          	add	a5,a5,a4
800049e4:	0107a783          	lw	a5,16(a5)
800049e8:	fdc42703          	lw	a4,-36(s0)
800049ec:	06f71063          	bne	a4,a5,80004a4c <API_GetTaskSlot+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:80 (discriminator 1)
800049f0:	800237b7          	lui	a5,0x80023
800049f4:	fec42703          	lw	a4,-20(s0)
800049f8:	0e478693          	addi	a3,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
800049fc:	00070793          	mv	a5,a4
80004a00:	00579793          	slli	a5,a5,0x5
80004a04:	00e787b3          	add	a5,a5,a4
80004a08:	00279793          	slli	a5,a5,0x2
80004a0c:	00f687b3          	add	a5,a3,a5
80004a10:	0147a783          	lw	a5,20(a5)
80004a14:	fd842703          	lw	a4,-40(s0)
80004a18:	02f71a63          	bne	a4,a5,80004a4c <API_GetTaskSlot+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:80 (discriminator 2)
80004a1c:	800236b7          	lui	a3,0x80023
80004a20:	fec42703          	lw	a4,-20(s0)
80004a24:	00070793          	mv	a5,a4
80004a28:	00579793          	slli	a5,a5,0x5
80004a2c:	00e787b3          	add	a5,a5,a4
80004a30:	00279793          	slli	a5,a5,0x2
80004a34:	0e468713          	addi	a4,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
80004a38:	00e787b3          	add	a5,a5,a4
80004a3c:	0007a783          	lw	a5,0(a5)
80004a40:	00078663          	beqz	a5,80004a4c <API_GetTaskSlot+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:81
            return i;
80004a44:	fec42783          	lw	a5,-20(s0)
80004a48:	02c0006f          	j	80004a74 <API_GetTaskSlot+0xd0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:79 (discriminator 2)
    for( i = 0; i < NUM_MAX_APP_TASKS; i++){
80004a4c:	fec42783          	lw	a5,-20(s0)
80004a50:	00178793          	addi	a5,a5,1
80004a54:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:79 (discriminator 1)
80004a58:	fec42703          	lw	a4,-20(s0)
80004a5c:	00900793          	li	a5,9
80004a60:	f6e7f2e3          	bleu	a4,a5,800049c4 <API_GetTaskSlot+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:83
    }
    prints("returning erro2\n");
80004a64:	800087b7          	lui	a5,0x80008
80004a68:	22c78513          	addi	a0,a5,556 # 8000822c <__stack_top+0xfffc4e1c>
80004a6c:	3a8010ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:84
    return ERRO;
80004a70:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:85
}
80004a74:	00078513          	mv	a0,a5
80004a78:	02c12083          	lw	ra,44(sp)
80004a7c:	02812403          	lw	s0,40(sp)
80004a80:	03010113          	addi	sp,sp,48
80004a84:	00008067          	ret

80004a88 <API_TaskStart>:
API_TaskStart():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:87

void API_TaskStart(unsigned int slot){
80004a88:	fd010113          	addi	sp,sp,-48
80004a8c:	02112623          	sw	ra,44(sp)
80004a90:	02812423          	sw	s0,40(sp)
80004a94:	03010413          	addi	s0,sp,48
80004a98:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:89
    BaseType_t xReturned;
    TaskList[slot].status = TASK_SLOT_RUNNING;
80004a9c:	800236b7          	lui	a3,0x80023
80004aa0:	fdc42703          	lw	a4,-36(s0)
80004aa4:	00070793          	mv	a5,a4
80004aa8:	00579793          	slli	a5,a5,0x5
80004aac:	00e787b3          	add	a5,a5,a4
80004ab0:	00279793          	slli	a5,a5,0x2
80004ab4:	0e468713          	addi	a4,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
80004ab8:	00e787b3          	add	a5,a5,a4
80004abc:	00100713          	li	a4,1
80004ac0:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:100
                                    tskIDLE_PRIORITY+1,         //uxPriority
                                    &TaskList[slot].TaskHandler,// pxCreatedTask
                                    NULL,                       // puxStackBuffer
                                    &TaskList[slot].memRegion );//xRegions*/
    
    xReturned = xTaskCreate(TaskList[slot].mainAddr,
80004ac4:	800237b7          	lui	a5,0x80023
80004ac8:	fdc42703          	lw	a4,-36(s0)
80004acc:	0e478693          	addi	a3,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
80004ad0:	00070793          	mv	a5,a4
80004ad4:	00579793          	slli	a5,a5,0x5
80004ad8:	00e787b3          	add	a5,a5,a4
80004adc:	00279793          	slli	a5,a5,0x2
80004ae0:	00f687b3          	add	a5,a3,a5
80004ae4:	02c7a783          	lw	a5,44(a5)
80004ae8:	00078513          	mv	a0,a5
80004aec:	fdc42703          	lw	a4,-36(s0)
80004af0:	00070793          	mv	a5,a4
80004af4:	00579793          	slli	a5,a5,0x5
80004af8:	00e787b3          	add	a5,a5,a4
80004afc:	00279793          	slli	a5,a5,0x2
80004b00:	01078713          	addi	a4,a5,16
80004b04:	800237b7          	lui	a5,0x80023
80004b08:	0e478793          	addi	a5,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
80004b0c:	00f707b3          	add	a5,a4,a5
80004b10:	00878793          	addi	a5,a5,8
80004b14:	00000893          	li	a7,0
80004b18:	00000813          	li	a6,0
80004b1c:	00100713          	li	a4,1
80004b20:	00000693          	li	a3,0
80004b24:	00002637          	lui	a2,0x2
80004b28:	3e860613          	addi	a2,a2,1000 # 23e8 <HEAP_SIZE-0xdc18>
80004b2c:	800085b7          	lui	a1,0x80008
80004b30:	24058593          	addi	a1,a1,576 # 80008240 <__stack_top+0xfffc4e30>
80004b34:	be4fd0ef          	jal	ra,80001f18 <xTaskGenericCreate>
80004b38:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:106
                            "LaTask",
                            9192,//8192,//4096,//16384,
                            NULL,
                            tskIDLE_PRIORITY+1,
                            &TaskList[slot].TaskHandler);
    if( xReturned != pdPASS ){
80004b3c:	fec42703          	lw	a4,-20(s0)
80004b40:	00100793          	li	a5,1
80004b44:	00f70a63          	beq	a4,a5,80004b58 <API_TaskStart+0xd0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:107
        prints("ERROR - API_TaskStart!!!\n");
80004b48:	800087b7          	lui	a5,0x80008
80004b4c:	24878513          	addi	a0,a5,584 # 80008248 <__stack_top+0xfffc4e38>
80004b50:	2c4010ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:109
    }
    return;
80004b54:	00000013          	nop
80004b58:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:110
}
80004b5c:	02c12083          	lw	ra,44(sp)
80004b60:	02812403          	lw	s0,40(sp)
80004b64:	03010113          	addi	sp,sp,48
80004b68:	00008067          	ret

80004b6c <API_FinishRunningTask>:
API_FinishRunningTask():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:113


void API_FinishRunningTask(){
80004b6c:	fe010113          	addi	sp,sp,-32
80004b70:	00112e23          	sw	ra,28(sp)
80004b74:	00812c23          	sw	s0,24(sp)
80004b78:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:115
    int i;
    unsigned int slot = API_GetCurrentTaskSlot();
80004b7c:	a11ff0ef          	jal	ra,8000458c <API_GetCurrentTaskSlot>
80004b80:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:116
    printsvsv("Finishing task:", TaskList[slot].TaskID, "app: ", TaskList[slot].AppID);
80004b84:	800236b7          	lui	a3,0x80023
80004b88:	fe842703          	lw	a4,-24(s0)
80004b8c:	00070793          	mv	a5,a4
80004b90:	00579793          	slli	a5,a5,0x5
80004b94:	00e787b3          	add	a5,a5,a4
80004b98:	00279793          	slli	a5,a5,0x2
80004b9c:	0e468713          	addi	a4,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
80004ba0:	00e787b3          	add	a5,a5,a4
80004ba4:	0107a783          	lw	a5,16(a5)
80004ba8:	00078593          	mv	a1,a5
80004bac:	800237b7          	lui	a5,0x80023
80004bb0:	fe842703          	lw	a4,-24(s0)
80004bb4:	0e478693          	addi	a3,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
80004bb8:	00070793          	mv	a5,a4
80004bbc:	00579793          	slli	a5,a5,0x5
80004bc0:	00e787b3          	add	a5,a5,a4
80004bc4:	00279793          	slli	a5,a5,0x2
80004bc8:	00f687b3          	add	a5,a3,a5
80004bcc:	0147a783          	lw	a5,20(a5)
80004bd0:	00078693          	mv	a3,a5
80004bd4:	800087b7          	lui	a5,0x80008
80004bd8:	26478613          	addi	a2,a5,612 # 80008264 <__stack_top+0xfffc4e54>
80004bdc:	800087b7          	lui	a5,0x80008
80004be0:	26c78513          	addi	a0,a5,620 # 8000826c <__stack_top+0xfffc4e5c>
80004be4:	324010ef          	jal	ra,80005f08 <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:117
    printsv("From slot: ", slot);
80004be8:	fe842783          	lw	a5,-24(s0)
80004bec:	00078593          	mv	a1,a5
80004bf0:	800087b7          	lui	a5,0x80008
80004bf4:	27c78513          	addi	a0,a5,636 # 8000827c <__stack_top+0xfffc4e6c>
80004bf8:	2c8010ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:118
    while(API_checkPipe(slot) == 1){
80004bfc:	00c0006f          	j	80004c08 <API_FinishRunningTask+0x9c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:119
        vTaskDelay(1);
80004c00:	00100513          	li	a0,1
80004c04:	e0cfd0ef          	jal	ra,80002210 <vTaskDelay>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:118
    while(API_checkPipe(slot) == 1){
80004c08:	fe842503          	lw	a0,-24(s0)
80004c0c:	5f4000ef          	jal	ra,80005200 <API_checkPipe>
80004c10:	00050713          	mv	a4,a0
80004c14:	00100793          	li	a5,1
80004c18:	fef704e3          	beq	a4,a5,80004c00 <API_FinishRunningTask+0x94>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:121
    }
    vTaskEnterCritical();
80004c1c:	a04fe0ef          	jal	ra,80002e20 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:122
    printsvsv("Task ", TaskList[slot].TaskID, "deleted with sucsess! From application ", TaskList[slot].AppID);
80004c20:	800236b7          	lui	a3,0x80023
80004c24:	fe842703          	lw	a4,-24(s0)
80004c28:	00070793          	mv	a5,a4
80004c2c:	00579793          	slli	a5,a5,0x5
80004c30:	00e787b3          	add	a5,a5,a4
80004c34:	00279793          	slli	a5,a5,0x2
80004c38:	0e468713          	addi	a4,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
80004c3c:	00e787b3          	add	a5,a5,a4
80004c40:	0107a783          	lw	a5,16(a5)
80004c44:	00078593          	mv	a1,a5
80004c48:	800237b7          	lui	a5,0x80023
80004c4c:	fe842703          	lw	a4,-24(s0)
80004c50:	0e478693          	addi	a3,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
80004c54:	00070793          	mv	a5,a4
80004c58:	00579793          	slli	a5,a5,0x5
80004c5c:	00e787b3          	add	a5,a5,a4
80004c60:	00279793          	slli	a5,a5,0x2
80004c64:	00f687b3          	add	a5,a3,a5
80004c68:	0147a783          	lw	a5,20(a5)
80004c6c:	00078693          	mv	a3,a5
80004c70:	800087b7          	lui	a5,0x80008
80004c74:	28878613          	addi	a2,a5,648 # 80008288 <__stack_top+0xfffc4e78>
80004c78:	800087b7          	lui	a5,0x80008
80004c7c:	2b078513          	addi	a0,a5,688 # 800082b0 <__stack_top+0xfffc4ea0>
80004c80:	288010ef          	jal	ra,80005f08 <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:123
    TaskList[slot].status = TASK_SLOT_EMPTY;
80004c84:	800236b7          	lui	a3,0x80023
80004c88:	fe842703          	lw	a4,-24(s0)
80004c8c:	00070793          	mv	a5,a4
80004c90:	00579793          	slli	a5,a5,0x5
80004c94:	00e787b3          	add	a5,a5,a4
80004c98:	00279793          	slli	a5,a5,0x2
80004c9c:	0e468713          	addi	a4,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
80004ca0:	00e787b3          	add	a5,a5,a4
80004ca4:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:125
    
    for(i = 0; i < NUM_MAX_TASKS; i++){
80004ca8:	fe042623          	sw	zero,-20(s0)
80004cac:	0c40006f          	j	80004d70 <API_FinishRunningTask+0x204>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:126
        printsvsv("TaskList[", i, "]status: ", TaskList[i].status );
80004cb0:	800236b7          	lui	a3,0x80023
80004cb4:	fec42703          	lw	a4,-20(s0)
80004cb8:	00070793          	mv	a5,a4
80004cbc:	00579793          	slli	a5,a5,0x5
80004cc0:	00e787b3          	add	a5,a5,a4
80004cc4:	00279793          	slli	a5,a5,0x2
80004cc8:	0e468713          	addi	a4,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
80004ccc:	00e787b3          	add	a5,a5,a4
80004cd0:	0007a783          	lw	a5,0(a5)
80004cd4:	00078693          	mv	a3,a5
80004cd8:	800087b7          	lui	a5,0x80008
80004cdc:	2b878613          	addi	a2,a5,696 # 800082b8 <__stack_top+0xfffc4ea8>
80004ce0:	fec42583          	lw	a1,-20(s0)
80004ce4:	800087b7          	lui	a5,0x80008
80004ce8:	2c478513          	addi	a0,a5,708 # 800082c4 <__stack_top+0xfffc4eb4>
80004cec:	21c010ef          	jal	ra,80005f08 <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:127
        if(TaskList[i].status != TASK_SLOT_EMPTY){
80004cf0:	800236b7          	lui	a3,0x80023
80004cf4:	fec42703          	lw	a4,-20(s0)
80004cf8:	00070793          	mv	a5,a4
80004cfc:	00579793          	slli	a5,a5,0x5
80004d00:	00e787b3          	add	a5,a5,a4
80004d04:	00279793          	slli	a5,a5,0x2
80004d08:	0e468713          	addi	a4,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
80004d0c:	00e787b3          	add	a5,a5,a4
80004d10:	0007a783          	lw	a5,0(a5)
80004d14:	04078863          	beqz	a5,80004d64 <API_FinishRunningTask+0x1f8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:128
            printsvsv("Returning because of: ", i, "TaskList[i].status ", TaskList[i].status);
80004d18:	800236b7          	lui	a3,0x80023
80004d1c:	fec42703          	lw	a4,-20(s0)
80004d20:	00070793          	mv	a5,a4
80004d24:	00579793          	slli	a5,a5,0x5
80004d28:	00e787b3          	add	a5,a5,a4
80004d2c:	00279793          	slli	a5,a5,0x2
80004d30:	0e468713          	addi	a4,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
80004d34:	00e787b3          	add	a5,a5,a4
80004d38:	0007a783          	lw	a5,0(a5)
80004d3c:	00078693          	mv	a3,a5
80004d40:	800087b7          	lui	a5,0x80008
80004d44:	2d078613          	addi	a2,a5,720 # 800082d0 <__stack_top+0xfffc4ec0>
80004d48:	fec42583          	lw	a1,-20(s0)
80004d4c:	800087b7          	lui	a5,0x80008
80004d50:	2e478513          	addi	a0,a5,740 # 800082e4 <__stack_top+0xfffc4ed4>
80004d54:	1b4010ef          	jal	ra,80005f08 <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:129
            i = 0xffffffff;
80004d58:	fff00793          	li	a5,-1
80004d5c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:130
            break;
80004d60:	01c0006f          	j	80004d7c <API_FinishRunningTask+0x210>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:125 (discriminator 2)
    for(i = 0; i < NUM_MAX_TASKS; i++){
80004d64:	fec42783          	lw	a5,-20(s0)
80004d68:	00178793          	addi	a5,a5,1
80004d6c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:125 (discriminator 1)
80004d70:	fec42703          	lw	a4,-20(s0)
80004d74:	00500793          	li	a5,5
80004d78:	f2e7dce3          	ble	a4,a5,80004cb0 <API_FinishRunningTask+0x144>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:133
        }
    }
    if(i != 0xffffffff){
80004d7c:	fec42703          	lw	a4,-20(s0)
80004d80:	fff00793          	li	a5,-1
80004d84:	00f70463          	beq	a4,a5,80004d8c <API_FinishRunningTask+0x220>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:134
        API_setFreqIdle();
80004d88:	58c000ef          	jal	ra,80005314 <API_setFreqIdle>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:136
    }
    API_SendFinishTask(TaskList[slot].TaskID, TaskList[slot].AppID);
80004d8c:	800236b7          	lui	a3,0x80023
80004d90:	fe842703          	lw	a4,-24(s0)
80004d94:	00070793          	mv	a5,a4
80004d98:	00579793          	slli	a5,a5,0x5
80004d9c:	00e787b3          	add	a5,a5,a4
80004da0:	00279793          	slli	a5,a5,0x2
80004da4:	0e468713          	addi	a4,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
80004da8:	00e787b3          	add	a5,a5,a4
80004dac:	0107a603          	lw	a2,16(a5)
80004db0:	800237b7          	lui	a5,0x80023
80004db4:	fe842703          	lw	a4,-24(s0)
80004db8:	0e478693          	addi	a3,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
80004dbc:	00070793          	mv	a5,a4
80004dc0:	00579793          	slli	a5,a5,0x5
80004dc4:	00e787b3          	add	a5,a5,a4
80004dc8:	00279793          	slli	a5,a5,0x2
80004dcc:	00f687b3          	add	a5,a3,a5
80004dd0:	0147a783          	lw	a5,20(a5)
80004dd4:	00078593          	mv	a1,a5
80004dd8:	00060513          	mv	a0,a2
80004ddc:	5a5010ef          	jal	ra,80006b80 <API_SendFinishTask>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:137
    vPortFree(TaskList[slot].taskAddr);
80004de0:	800237b7          	lui	a5,0x80023
80004de4:	fe842703          	lw	a4,-24(s0)
80004de8:	0e478693          	addi	a3,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
80004dec:	00070793          	mv	a5,a4
80004df0:	00579793          	slli	a5,a5,0x5
80004df4:	00e787b3          	add	a5,a5,a4
80004df8:	00279793          	slli	a5,a5,0x2
80004dfc:	00f687b3          	add	a5,a3,a5
80004e00:	0287a783          	lw	a5,40(a5)
80004e04:	00078513          	mv	a0,a5
80004e08:	ebcfc0ef          	jal	ra,800014c4 <vPortFree>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:138
    vTaskExitCritical();
80004e0c:	850fe0ef          	jal	ra,80002e5c <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:139
    vTaskDelete(TaskList[slot].TaskHandler);
80004e10:	800237b7          	lui	a5,0x80023
80004e14:	fe842703          	lw	a4,-24(s0)
80004e18:	0e478693          	addi	a3,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
80004e1c:	00070793          	mv	a5,a4
80004e20:	00579793          	slli	a5,a5,0x5
80004e24:	00e787b3          	add	a5,a5,a4
80004e28:	00279793          	slli	a5,a5,0x2
80004e2c:	00f687b3          	add	a5,a3,a5
80004e30:	0187a783          	lw	a5,24(a5)
80004e34:	00078513          	mv	a0,a5
80004e38:	afcfd0ef          	jal	ra,80002134 <vTaskDelete>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:140
    return;
80004e3c:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:141
}
80004e40:	01c12083          	lw	ra,28(sp)
80004e44:	01812403          	lw	s0,24(sp)
80004e48:	02010113          	addi	sp,sp,32
80004e4c:	00008067          	ret

80004e50 <API_PipeInitialization>:
API_PipeInitialization():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:13

extern unsigned int thermalPacket_pending; // from thermal.h

////////////////////////////////////////////////////////////
// Initialize the PIPE, setting the status of each slot to FREE
void API_PipeInitialization(){
80004e50:	fe010113          	addi	sp,sp,-32
80004e54:	00812e23          	sw	s0,28(sp)
80004e58:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:15
    int i;
    messageID = 0;
80004e5c:	800227b7          	lui	a5,0x80022
80004e60:	cc07ae23          	sw	zero,-804(a5) # 80021cdc <__stack_top+0xfffde8cc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:16
    for( i = 0; i < PIPE_SIZE; i++ ){
80004e64:	fe042623          	sw	zero,-20(s0)
80004e68:	0740006f          	j	80004edc <API_PipeInitialization+0x8c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:17 (discriminator 3)
        MessagePipe[i].status = PIPE_FREE;
80004e6c:	800227b7          	lui	a5,0x80022
80004e70:	fec42683          	lw	a3,-20(s0)
80004e74:	24400713          	li	a4,580
80004e78:	02e68733          	mul	a4,a3,a4
80004e7c:	f9478793          	addi	a5,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
80004e80:	00f707b3          	add	a5,a4,a5
80004e84:	fff00713          	li	a4,-1
80004e88:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:18 (discriminator 3)
        MessagePipe[i].msgID  = 0;
80004e8c:	800227b7          	lui	a5,0x80022
80004e90:	fec42683          	lw	a3,-20(s0)
80004e94:	f9478713          	addi	a4,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
80004e98:	24400793          	li	a5,580
80004e9c:	02f687b3          	mul	a5,a3,a5
80004ea0:	00f707b3          	add	a5,a4,a5
80004ea4:	0007a423          	sw	zero,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:19 (discriminator 3)
        ServicePipe[i].status = PIPE_FREE;
80004ea8:	800226b7          	lui	a3,0x80022
80004eac:	fec42703          	lw	a4,-20(s0)
80004eb0:	00070793          	mv	a5,a4
80004eb4:	00479793          	slli	a5,a5,0x4
80004eb8:	40e787b3          	sub	a5,a5,a4
80004ebc:	00279793          	slli	a5,a5,0x2
80004ec0:	bec68713          	addi	a4,a3,-1044 # 80021bec <__stack_top+0xfffde7dc>
80004ec4:	00e787b3          	add	a5,a5,a4
80004ec8:	fff00713          	li	a4,-1
80004ecc:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:16 (discriminator 3)
    for( i = 0; i < PIPE_SIZE; i++ ){
80004ed0:	fec42783          	lw	a5,-20(s0)
80004ed4:	00178793          	addi	a5,a5,1
80004ed8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:16 (discriminator 1)
80004edc:	fec42703          	lw	a4,-20(s0)
80004ee0:	00300793          	li	a5,3
80004ee4:	f8e7d4e3          	ble	a4,a5,80004e6c <API_PipeInitialization+0x1c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:21
    }
    return;
80004ee8:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:22
}
80004eec:	01c12403          	lw	s0,28(sp)
80004ef0:	02010113          	addi	sp,sp,32
80004ef4:	00008067          	ret

80004ef8 <API_GetMessageSlot>:
API_GetMessageSlot():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:26

////////////////////////////////////////////////////////////
// Returns a free Message slot 
unsigned int API_GetMessageSlot(){
80004ef8:	fe010113          	addi	sp,sp,-32
80004efc:	00112e23          	sw	ra,28(sp)
80004f00:	00812c23          	sw	s0,24(sp)
80004f04:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:28
    int i;
    unsigned int sel = PIPE_FULL;
80004f08:	fdfe07b7          	lui	a5,0xfdfe0
80004f0c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9c9ed>
80004f10:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:29
    vTaskEnterCritical();
80004f14:	f0dfd0ef          	jal	ra,80002e20 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:30
    for( i = 0; i < PIPE_SIZE; i++ ){
80004f18:	fe042623          	sw	zero,-20(s0)
80004f1c:	0980006f          	j	80004fb4 <API_GetMessageSlot+0xbc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:31
        if (MessagePipe[i].status == PIPE_FREE){
80004f20:	800227b7          	lui	a5,0x80022
80004f24:	fec42683          	lw	a3,-20(s0)
80004f28:	24400713          	li	a4,580
80004f2c:	02e68733          	mul	a4,a3,a4
80004f30:	f9478793          	addi	a5,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
80004f34:	00f707b3          	add	a5,a4,a5
80004f38:	0007a703          	lw	a4,0(a5)
80004f3c:	fff00793          	li	a5,-1
80004f40:	06f71463          	bne	a4,a5,80004fa8 <API_GetMessageSlot+0xb0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:32
            MessagePipe[i].status = PIPE_OCCUPIED;
80004f44:	800227b7          	lui	a5,0x80022
80004f48:	fec42683          	lw	a3,-20(s0)
80004f4c:	24400713          	li	a4,580
80004f50:	02e68733          	mul	a4,a3,a4
80004f54:	f9478793          	addi	a5,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
80004f58:	00f707b3          	add	a5,a4,a5
80004f5c:	00100713          	li	a4,1
80004f60:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:33
            MessagePipe[i].msgID = messageID;
80004f64:	800227b7          	lui	a5,0x80022
80004f68:	cdc7a703          	lw	a4,-804(a5) # 80021cdc <__stack_top+0xfffde8cc>
80004f6c:	800227b7          	lui	a5,0x80022
80004f70:	fec42603          	lw	a2,-20(s0)
80004f74:	f9478693          	addi	a3,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
80004f78:	24400793          	li	a5,580
80004f7c:	02f607b3          	mul	a5,a2,a5
80004f80:	00f687b3          	add	a5,a3,a5
80004f84:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:34
            messageID++;
80004f88:	800227b7          	lui	a5,0x80022
80004f8c:	cdc7a783          	lw	a5,-804(a5) # 80021cdc <__stack_top+0xfffde8cc>
80004f90:	00178713          	addi	a4,a5,1
80004f94:	800227b7          	lui	a5,0x80022
80004f98:	cce7ae23          	sw	a4,-804(a5) # 80021cdc <__stack_top+0xfffde8cc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:35
            sel = i;
80004f9c:	fec42783          	lw	a5,-20(s0)
80004fa0:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:36
            break;
80004fa4:	01c0006f          	j	80004fc0 <API_GetMessageSlot+0xc8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:30 (discriminator 2)
    for( i = 0; i < PIPE_SIZE; i++ ){
80004fa8:	fec42783          	lw	a5,-20(s0)
80004fac:	00178793          	addi	a5,a5,1
80004fb0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:30 (discriminator 1)
80004fb4:	fec42703          	lw	a4,-20(s0)
80004fb8:	00300793          	li	a5,3
80004fbc:	f6e7d2e3          	ble	a4,a5,80004f20 <API_GetMessageSlot+0x28>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:39
        }
    }
    if(messageID > 16777215){
80004fc0:	800227b7          	lui	a5,0x80022
80004fc4:	cdc7a703          	lw	a4,-804(a5) # 80021cdc <__stack_top+0xfffde8cc>
80004fc8:	010007b7          	lui	a5,0x1000
80004fcc:	06f76663          	bltu	a4,a5,80005038 <API_GetMessageSlot+0x140>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:40
        messageID = 256;
80004fd0:	800227b7          	lui	a5,0x80022
80004fd4:	10000713          	li	a4,256
80004fd8:	cce7ae23          	sw	a4,-804(a5) # 80021cdc <__stack_top+0xfffde8cc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:41
        for( i = 0; i < PIPE_SIZE; i++ ){
80004fdc:	fe042623          	sw	zero,-20(s0)
80004fe0:	04c0006f          	j	8000502c <API_GetMessageSlot+0x134>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:42 (discriminator 3)
            MessagePipe[i].msgID = (MessagePipe[i].msgID & 0x000000FF);
80004fe4:	800227b7          	lui	a5,0x80022
80004fe8:	fec42683          	lw	a3,-20(s0)
80004fec:	f9478713          	addi	a4,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
80004ff0:	24400793          	li	a5,580
80004ff4:	02f687b3          	mul	a5,a3,a5
80004ff8:	00f707b3          	add	a5,a4,a5
80004ffc:	0087a783          	lw	a5,8(a5)
80005000:	0ff7f713          	andi	a4,a5,255
80005004:	800227b7          	lui	a5,0x80022
80005008:	fec42603          	lw	a2,-20(s0)
8000500c:	f9478693          	addi	a3,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
80005010:	24400793          	li	a5,580
80005014:	02f607b3          	mul	a5,a2,a5
80005018:	00f687b3          	add	a5,a3,a5
8000501c:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:41 (discriminator 3)
        for( i = 0; i < PIPE_SIZE; i++ ){
80005020:	fec42783          	lw	a5,-20(s0)
80005024:	00178793          	addi	a5,a5,1
80005028:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:41 (discriminator 1)
8000502c:	fec42703          	lw	a4,-20(s0)
80005030:	00300793          	li	a5,3
80005034:	fae7d8e3          	ble	a4,a5,80004fe4 <API_GetMessageSlot+0xec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:45
        }
    }
    vTaskExitCritical();
80005038:	e25fd0ef          	jal	ra,80002e5c <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:46
    return sel;
8000503c:	fe842783          	lw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:47
}
80005040:	00078513          	mv	a0,a5
80005044:	01c12083          	lw	ra,28(sp)
80005048:	01812403          	lw	s0,24(sp)
8000504c:	02010113          	addi	sp,sp,32
80005050:	00008067          	ret

80005054 <API_GetServiceSlot>:
API_GetServiceSlot():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:51

////////////////////////////////////////////////////////////
// Returns a free Service slot
unsigned int API_GetServiceSlot(){
80005054:	fe010113          	addi	sp,sp,-32
80005058:	00112e23          	sw	ra,28(sp)
8000505c:	00812c23          	sw	s0,24(sp)
80005060:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:53
    int i;
    vTaskEnterCritical();
80005064:	dbdfd0ef          	jal	ra,80002e20 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:54
    for( i = 0; i < PIPE_SIZE; i++ ){
80005068:	fe042623          	sw	zero,-20(s0)
8000506c:	0700006f          	j	800050dc <API_GetServiceSlot+0x88>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:55
        if (ServicePipe[i].status == PIPE_FREE){
80005070:	800226b7          	lui	a3,0x80022
80005074:	fec42703          	lw	a4,-20(s0)
80005078:	00070793          	mv	a5,a4
8000507c:	00479793          	slli	a5,a5,0x4
80005080:	40e787b3          	sub	a5,a5,a4
80005084:	00279793          	slli	a5,a5,0x2
80005088:	bec68713          	addi	a4,a3,-1044 # 80021bec <__stack_top+0xfffde7dc>
8000508c:	00e787b3          	add	a5,a5,a4
80005090:	0007a703          	lw	a4,0(a5)
80005094:	fff00793          	li	a5,-1
80005098:	02f71c63          	bne	a4,a5,800050d0 <API_GetServiceSlot+0x7c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:56
            ServicePipe[i].status = PIPE_OCCUPIED;
8000509c:	800226b7          	lui	a3,0x80022
800050a0:	fec42703          	lw	a4,-20(s0)
800050a4:	00070793          	mv	a5,a4
800050a8:	00479793          	slli	a5,a5,0x4
800050ac:	40e787b3          	sub	a5,a5,a4
800050b0:	00279793          	slli	a5,a5,0x2
800050b4:	bec68713          	addi	a4,a3,-1044 # 80021bec <__stack_top+0xfffde7dc>
800050b8:	00e787b3          	add	a5,a5,a4
800050bc:	00100713          	li	a4,1
800050c0:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:57
            vTaskExitCritical();
800050c4:	d99fd0ef          	jal	ra,80002e5c <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:58
            return i;
800050c8:	fec42783          	lw	a5,-20(s0)
800050cc:	0280006f          	j	800050f4 <API_GetServiceSlot+0xa0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:54 (discriminator 2)
    for( i = 0; i < PIPE_SIZE; i++ ){
800050d0:	fec42783          	lw	a5,-20(s0)
800050d4:	00178793          	addi	a5,a5,1
800050d8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:54 (discriminator 1)
800050dc:	fec42703          	lw	a4,-20(s0)
800050e0:	00300793          	li	a5,3
800050e4:	f8e7d6e3          	ble	a4,a5,80005070 <API_GetServiceSlot+0x1c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:61
        }
    }
    vTaskExitCritical();
800050e8:	d75fd0ef          	jal	ra,80002e5c <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:62
    return PIPE_FULL;
800050ec:	fdfe07b7          	lui	a5,0xfdfe0
800050f0:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9c9ed>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:63
}
800050f4:	00078513          	mv	a0,a5
800050f8:	01c12083          	lw	ra,28(sp)
800050fc:	01812403          	lw	s0,24(sp)
80005100:	02010113          	addi	sp,sp,32
80005104:	00008067          	ret

80005108 <API_ClearPipeSlot>:
API_ClearPipeSlot():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:67

////////////////////////////////////////////////////////////
// Clear one PipeSlot after send it
void API_ClearPipeSlot(unsigned int typeSlot){
80005108:	fd010113          	addi	sp,sp,-48
8000510c:	02812623          	sw	s0,44(sp)
80005110:	03010413          	addi	s0,sp,48
80005114:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:68
    unsigned type = typeSlot & 0xFFFF0000;
80005118:	fdc42703          	lw	a4,-36(s0)
8000511c:	ffff07b7          	lui	a5,0xffff0
80005120:	00f777b3          	and	a5,a4,a5
80005124:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:69
    unsigned slot = typeSlot & 0x0000FFFF;
80005128:	fdc42703          	lw	a4,-36(s0)
8000512c:	000107b7          	lui	a5,0x10
80005130:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80005134:	00f777b3          	and	a5,a4,a5
80005138:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:72
    

    if (type == SERVICE){
8000513c:	fec42703          	lw	a4,-20(s0)
80005140:	101007b7          	lui	a5,0x10100
80005144:	04f71c63          	bne	a4,a5,8000519c <API_ClearPipeSlot+0x94>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:73
        ServicePipe[slot].status = PIPE_FREE;
80005148:	800226b7          	lui	a3,0x80022
8000514c:	fe842703          	lw	a4,-24(s0)
80005150:	00070793          	mv	a5,a4
80005154:	00479793          	slli	a5,a5,0x4
80005158:	40e787b3          	sub	a5,a5,a4
8000515c:	00279793          	slli	a5,a5,0x2
80005160:	bec68713          	addi	a4,a3,-1044 # 80021bec <__stack_top+0xfffde7dc>
80005164:	00e787b3          	add	a5,a5,a4
80005168:	fff00713          	li	a4,-1
8000516c:	00e7a023          	sw	a4,0(a5) # 10100000 <RAM_SIZE+0x10080000>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:74
        ServicePipe[slot].holder = PIPE_FREE;
80005170:	800227b7          	lui	a5,0x80022
80005174:	fe842703          	lw	a4,-24(s0)
80005178:	bec78693          	addi	a3,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
8000517c:	00070793          	mv	a5,a4
80005180:	00479793          	slli	a5,a5,0x4
80005184:	40e787b3          	sub	a5,a5,a4
80005188:	00279793          	slli	a5,a5,0x2
8000518c:	00f687b3          	add	a5,a3,a5
80005190:	fff00713          	li	a4,-1
80005194:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:82
    } else { // type == MESSAGE
        //printsv("cleaning message pipe slot: ", slot);
        MessagePipe[slot].status = PIPE_FREE;
        MessagePipe[slot].holder = PIPE_FREE;
    }
    return;
80005198:	05c0006f          	j	800051f4 <API_ClearPipeSlot+0xec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:75
    } else if (type == THERMAL){
8000519c:	fec42703          	lw	a4,-20(s0)
800051a0:	404007b7          	lui	a5,0x40400
800051a4:	00f71663          	bne	a4,a5,800051b0 <API_ClearPipeSlot+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:76
        thermalPacket_pending = FALSE;
800051a8:	9601a223          	sw	zero,-1692(gp) # 80008ae4 <thermalPacket_pending>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:82
    return;
800051ac:	0480006f          	j	800051f4 <API_ClearPipeSlot+0xec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:79
        MessagePipe[slot].status = PIPE_FREE;
800051b0:	800227b7          	lui	a5,0x80022
800051b4:	fe842683          	lw	a3,-24(s0)
800051b8:	24400713          	li	a4,580
800051bc:	02e68733          	mul	a4,a3,a4
800051c0:	f9478793          	addi	a5,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
800051c4:	00f707b3          	add	a5,a4,a5
800051c8:	fff00713          	li	a4,-1
800051cc:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:80
        MessagePipe[slot].holder = PIPE_FREE;
800051d0:	800227b7          	lui	a5,0x80022
800051d4:	fe842683          	lw	a3,-24(s0)
800051d8:	f9478713          	addi	a4,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
800051dc:	24400793          	li	a5,580
800051e0:	02f687b3          	mul	a5,a3,a5
800051e4:	00f707b3          	add	a5,a4,a5
800051e8:	fff00713          	li	a4,-1
800051ec:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:82
    return;
800051f0:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:83
}
800051f4:	02c12403          	lw	s0,44(sp)
800051f8:	03010113          	addi	sp,sp,48
800051fc:	00008067          	ret

80005200 <API_checkPipe>:
API_checkPipe():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:85

unsigned int API_checkPipe(unsigned int taskSlot){
80005200:	fd010113          	addi	sp,sp,-48
80005204:	02112623          	sw	ra,44(sp)
80005208:	02812423          	sw	s0,40(sp)
8000520c:	03010413          	addi	s0,sp,48
80005210:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:87
    unsigned int i;
    for(i = 0; i < PIPE_SIZE; i++){
80005214:	fe042623          	sw	zero,-20(s0)
80005218:	0d80006f          	j	800052f0 <API_checkPipe+0xf0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:88
        printsv("i: ", i);
8000521c:	fec42783          	lw	a5,-20(s0)
80005220:	00078593          	mv	a1,a5
80005224:	800087b7          	lui	a5,0x80008
80005228:	2fc78513          	addi	a0,a5,764 # 800082fc <__stack_top+0xfffc4eec>
8000522c:	495000ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:89
        printsv("status: ", MessagePipe[i].status);
80005230:	800227b7          	lui	a5,0x80022
80005234:	fec42683          	lw	a3,-20(s0)
80005238:	24400713          	li	a4,580
8000523c:	02e68733          	mul	a4,a3,a4
80005240:	f9478793          	addi	a5,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
80005244:	00f707b3          	add	a5,a4,a5
80005248:	0007a783          	lw	a5,0(a5)
8000524c:	00078593          	mv	a1,a5
80005250:	800087b7          	lui	a5,0x80008
80005254:	30078513          	addi	a0,a5,768 # 80008300 <__stack_top+0xfffc4ef0>
80005258:	469000ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:90
        printsv("holder: ", MessagePipe[i].holder);
8000525c:	800227b7          	lui	a5,0x80022
80005260:	fec42683          	lw	a3,-20(s0)
80005264:	f9478713          	addi	a4,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
80005268:	24400793          	li	a5,580
8000526c:	02f687b3          	mul	a5,a3,a5
80005270:	00f707b3          	add	a5,a4,a5
80005274:	0047a783          	lw	a5,4(a5)
80005278:	00078593          	mv	a1,a5
8000527c:	800087b7          	lui	a5,0x80008
80005280:	30c78513          	addi	a0,a5,780 # 8000830c <__stack_top+0xfffc4efc>
80005284:	43d000ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:91
        prints("---\n");
80005288:	800087b7          	lui	a5,0x80008
8000528c:	31878513          	addi	a0,a5,792 # 80008318 <__stack_top+0xfffc4f08>
80005290:	385000ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:92
        if(MessagePipe[i].status == PIPE_OCCUPIED){
80005294:	800227b7          	lui	a5,0x80022
80005298:	fec42683          	lw	a3,-20(s0)
8000529c:	24400713          	li	a4,580
800052a0:	02e68733          	mul	a4,a3,a4
800052a4:	f9478793          	addi	a5,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
800052a8:	00f707b3          	add	a5,a4,a5
800052ac:	0007a703          	lw	a4,0(a5)
800052b0:	00100793          	li	a5,1
800052b4:	02f71863          	bne	a4,a5,800052e4 <API_checkPipe+0xe4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:93
            if(MessagePipe[i].holder == taskSlot){
800052b8:	800227b7          	lui	a5,0x80022
800052bc:	fec42683          	lw	a3,-20(s0)
800052c0:	f9478713          	addi	a4,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
800052c4:	24400793          	li	a5,580
800052c8:	02f687b3          	mul	a5,a3,a5
800052cc:	00f707b3          	add	a5,a4,a5
800052d0:	0047a783          	lw	a5,4(a5)
800052d4:	fdc42703          	lw	a4,-36(s0)
800052d8:	00f71663          	bne	a4,a5,800052e4 <API_checkPipe+0xe4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:94
                return 1;
800052dc:	00100793          	li	a5,1
800052e0:	0200006f          	j	80005300 <API_checkPipe+0x100>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:87 (discriminator 2)
    for(i = 0; i < PIPE_SIZE; i++){
800052e4:	fec42783          	lw	a5,-20(s0)
800052e8:	00178793          	addi	a5,a5,1
800052ec:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:87 (discriminator 1)
800052f0:	fec42703          	lw	a4,-20(s0)
800052f4:	00300793          	li	a5,3
800052f8:	f2e7f2e3          	bleu	a4,a5,8000521c <API_checkPipe+0x1c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:98
            }
        }
    }
    return 0;
800052fc:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:99
}
80005300:	00078513          	mv	a0,a5
80005304:	02c12083          	lw	ra,44(sp)
80005308:	02812403          	lw	s0,40(sp)
8000530c:	03010113          	addi	sp,sp,48
80005310:	00008067          	ret

80005314 <API_setFreqIdle>:
API_setFreqIdle():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:3
#include "dvfs.h"

void API_setFreqIdle(){
80005314:	ff010113          	addi	sp,sp,-16
80005318:	00812623          	sw	s0,12(sp)
8000531c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:4
    selectedFrequencyScale = FREQ_IDLE;
80005320:	800237b7          	lui	a5,0x80023
80005324:	06400713          	li	a4,100
80005328:	3ee7ae23          	sw	a4,1020(a5) # 800233fc <__stack_top+0xfffdffec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:5
    return;
8000532c:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:6
}
80005330:	00c12403          	lw	s0,12(sp)
80005334:	01010113          	addi	sp,sp,16
80005338:	00008067          	ret

8000533c <API_setFreqScale>:
API_setFreqScale():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:8

void API_setFreqScale(unsigned int scale){
8000533c:	fe010113          	addi	sp,sp,-32
80005340:	00812e23          	sw	s0,28(sp)
80005344:	02010413          	addi	s0,sp,32
80005348:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:9
    selectedFrequencyScale = scale;
8000534c:	800237b7          	lui	a5,0x80023
80005350:	fec42703          	lw	a4,-20(s0)
80005354:	3ee7ae23          	sw	a4,1020(a5) # 800233fc <__stack_top+0xfffdffec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:10
    return;
80005358:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:11
}
8000535c:	01c12403          	lw	s0,28(sp)
80005360:	02010113          	addi	sp,sp,32
80005364:	00008067          	ret

80005368 <API_getFreqScale>:
API_getFreqScale():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:13

unsigned int API_getFreqScale(){
80005368:	ff010113          	addi	sp,sp,-16
8000536c:	00112623          	sw	ra,12(sp)
80005370:	00812423          	sw	s0,8(sp)
80005374:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:14
    return HW_get_32bit_reg(FREQUENCY_SCALE);
80005378:	900007b7          	lui	a5,0x90000
8000537c:	ff878513          	addi	a0,a5,-8 # 8ffffff8 <__stack_top+0xffbcbe8>
80005380:	c1dfb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005384:	00050793          	mv	a5,a0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:15
}
80005388:	00078513          	mv	a0,a5
8000538c:	00c12083          	lw	ra,12(sp)
80005390:	00812403          	lw	s0,8(sp)
80005394:	01010113          	addi	sp,sp,16
80005398:	00008067          	ret

8000539c <API_applyFreqScale>:
API_applyFreqScale():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:17

void API_applyFreqScale(){
8000539c:	ff010113          	addi	sp,sp,-16
800053a0:	00112623          	sw	ra,12(sp)
800053a4:	00812423          	sw	s0,8(sp)
800053a8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:18
    if(selectedFrequencyScale != API_getFreqScale()){
800053ac:	fbdff0ef          	jal	ra,80005368 <API_getFreqScale>
800053b0:	00050713          	mv	a4,a0
800053b4:	800237b7          	lui	a5,0x80023
800053b8:	3fc7a783          	lw	a5,1020(a5) # 800233fc <__stack_top+0xfffdffec>
800053bc:	02f70063          	beq	a4,a5,800053dc <API_applyFreqScale+0x40>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:19
        HW_set_32bit_reg(FREQUENCY_SCALE, selectedFrequencyScale);
800053c0:	800237b7          	lui	a5,0x80023
800053c4:	3fc7a783          	lw	a5,1020(a5) # 800233fc <__stack_top+0xfffdffec>
800053c8:	00078593          	mv	a1,a5
800053cc:	900007b7          	lui	a5,0x90000
800053d0:	ff878513          	addi	a0,a5,-8 # 8ffffff8 <__stack_top+0xffbcbe8>
800053d4:	bc1fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:21
    }
    return;
800053d8:	00000013          	nop
800053dc:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:22
}
800053e0:	00c12083          	lw	ra,12(sp)
800053e4:	00812403          	lw	s0,8(sp)
800053e8:	01010113          	addi	sp,sp,16
800053ec:	00008067          	ret

800053f0 <API_freqStepUp>:
API_freqStepUp():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:24

void API_freqStepUp(){
800053f0:	ff010113          	addi	sp,sp,-16
800053f4:	00812623          	sw	s0,12(sp)
800053f8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:25
    if(selectedFrequencyScale == FREQ_IDLE){
800053fc:	800237b7          	lui	a5,0x80023
80005400:	3fc7a703          	lw	a4,1020(a5) # 800233fc <__stack_top+0xfffdffec>
80005404:	06400793          	li	a5,100
80005408:	00f71a63          	bne	a4,a5,8000541c <API_freqStepUp+0x2c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:26
        selectedFrequencyScale = FREQ_150MHz;
8000540c:	800237b7          	lui	a5,0x80023
80005410:	09600713          	li	a4,150
80005414:	3ee7ae23          	sw	a4,1020(a5) # 800233fc <__stack_top+0xfffdffec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
        }
        else{
            selectedFrequencyScale = FREQ_IDLE;
        }
    }
    return;
80005418:	1340006f          	j	8000554c <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:28
    else if(selectedFrequencyScale==FREQ_150MHz){
8000541c:	800237b7          	lui	a5,0x80023
80005420:	3fc7a703          	lw	a4,1020(a5) # 800233fc <__stack_top+0xfffdffec>
80005424:	09600793          	li	a5,150
80005428:	00f71a63          	bne	a4,a5,8000543c <API_freqStepUp+0x4c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:29
        selectedFrequencyScale = FREQ_250MHz;
8000542c:	800237b7          	lui	a5,0x80023
80005430:	0fa00713          	li	a4,250
80005434:	3ee7ae23          	sw	a4,1020(a5) # 800233fc <__stack_top+0xfffdffec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005438:	1140006f          	j	8000554c <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:31
    else if(selectedFrequencyScale==FREQ_250MHz){
8000543c:	800237b7          	lui	a5,0x80023
80005440:	3fc7a703          	lw	a4,1020(a5) # 800233fc <__stack_top+0xfffdffec>
80005444:	0fa00793          	li	a5,250
80005448:	00f71a63          	bne	a4,a5,8000545c <API_freqStepUp+0x6c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:32
        selectedFrequencyScale = FREQ_500MHz;
8000544c:	800237b7          	lui	a5,0x80023
80005450:	1f400713          	li	a4,500
80005454:	3ee7ae23          	sw	a4,1020(a5) # 800233fc <__stack_top+0xfffdffec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005458:	0f40006f          	j	8000554c <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:34
    else if(selectedFrequencyScale==FREQ_500MHz){
8000545c:	800237b7          	lui	a5,0x80023
80005460:	3fc7a703          	lw	a4,1020(a5) # 800233fc <__stack_top+0xfffdffec>
80005464:	1f400793          	li	a5,500
80005468:	00f71a63          	bne	a4,a5,8000547c <API_freqStepUp+0x8c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:35
        selectedFrequencyScale = FREQ_1GHz;
8000546c:	800237b7          	lui	a5,0x80023
80005470:	3e800713          	li	a4,1000
80005474:	3ee7ae23          	sw	a4,1020(a5) # 800233fc <__stack_top+0xfffdffec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005478:	0d40006f          	j	8000554c <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:37
    else if(selectedFrequencyScale==FREQ_1GHz){
8000547c:	800237b7          	lui	a5,0x80023
80005480:	3fc7a703          	lw	a4,1020(a5) # 800233fc <__stack_top+0xfffdffec>
80005484:	3e800793          	li	a5,1000
80005488:	00f71a63          	bne	a4,a5,8000549c <API_freqStepUp+0xac>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:38
        selectedFrequencyScale = FREQ_1GHz;
8000548c:	800237b7          	lui	a5,0x80023
80005490:	3e800713          	li	a4,1000
80005494:	3ee7ae23          	sw	a4,1020(a5) # 800233fc <__stack_top+0xfffdffec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005498:	0b40006f          	j	8000554c <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:41
        if(selectedFrequencyScale > FREQ_1GHz){
8000549c:	800237b7          	lui	a5,0x80023
800054a0:	3fc7a703          	lw	a4,1020(a5) # 800233fc <__stack_top+0xfffdffec>
800054a4:	3e800793          	li	a5,1000
800054a8:	00e7fa63          	bleu	a4,a5,800054bc <API_freqStepUp+0xcc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:42
            selectedFrequencyScale = FREQ_1GHz;
800054ac:	800237b7          	lui	a5,0x80023
800054b0:	3e800713          	li	a4,1000
800054b4:	3ee7ae23          	sw	a4,1020(a5) # 800233fc <__stack_top+0xfffdffec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
800054b8:	0940006f          	j	8000554c <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:44
        else if(selectedFrequencyScale > FREQ_500MHz){
800054bc:	800237b7          	lui	a5,0x80023
800054c0:	3fc7a703          	lw	a4,1020(a5) # 800233fc <__stack_top+0xfffdffec>
800054c4:	1f400793          	li	a5,500
800054c8:	00e7fa63          	bleu	a4,a5,800054dc <API_freqStepUp+0xec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:45
            selectedFrequencyScale = FREQ_1GHz;
800054cc:	800237b7          	lui	a5,0x80023
800054d0:	3e800713          	li	a4,1000
800054d4:	3ee7ae23          	sw	a4,1020(a5) # 800233fc <__stack_top+0xfffdffec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
800054d8:	0740006f          	j	8000554c <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:47
        else if(selectedFrequencyScale > FREQ_250MHz){
800054dc:	800237b7          	lui	a5,0x80023
800054e0:	3fc7a703          	lw	a4,1020(a5) # 800233fc <__stack_top+0xfffdffec>
800054e4:	0fa00793          	li	a5,250
800054e8:	00e7fa63          	bleu	a4,a5,800054fc <API_freqStepUp+0x10c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:48
            selectedFrequencyScale = FREQ_500MHz;
800054ec:	800237b7          	lui	a5,0x80023
800054f0:	1f400713          	li	a4,500
800054f4:	3ee7ae23          	sw	a4,1020(a5) # 800233fc <__stack_top+0xfffdffec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
800054f8:	0540006f          	j	8000554c <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:50
        else if(selectedFrequencyScale > FREQ_150MHz){
800054fc:	800237b7          	lui	a5,0x80023
80005500:	3fc7a703          	lw	a4,1020(a5) # 800233fc <__stack_top+0xfffdffec>
80005504:	09600793          	li	a5,150
80005508:	00e7fa63          	bleu	a4,a5,8000551c <API_freqStepUp+0x12c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:51
            selectedFrequencyScale = FREQ_250MHz;
8000550c:	800237b7          	lui	a5,0x80023
80005510:	0fa00713          	li	a4,250
80005514:	3ee7ae23          	sw	a4,1020(a5) # 800233fc <__stack_top+0xfffdffec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005518:	0340006f          	j	8000554c <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:53
        else if(selectedFrequencyScale > FREQ_IDLE){
8000551c:	800237b7          	lui	a5,0x80023
80005520:	3fc7a703          	lw	a4,1020(a5) # 800233fc <__stack_top+0xfffdffec>
80005524:	06400793          	li	a5,100
80005528:	00e7fa63          	bleu	a4,a5,8000553c <API_freqStepUp+0x14c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:54
            selectedFrequencyScale = FREQ_150MHz;
8000552c:	800237b7          	lui	a5,0x80023
80005530:	09600713          	li	a4,150
80005534:	3ee7ae23          	sw	a4,1020(a5) # 800233fc <__stack_top+0xfffdffec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005538:	0140006f          	j	8000554c <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:57
            selectedFrequencyScale = FREQ_IDLE;
8000553c:	800237b7          	lui	a5,0x80023
80005540:	06400713          	li	a4,100
80005544:	3ee7ae23          	sw	a4,1020(a5) # 800233fc <__stack_top+0xfffdffec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005548:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:61
}
8000554c:	00c12403          	lw	s0,12(sp)
80005550:	01010113          	addi	sp,sp,16
80005554:	00008067          	ret

80005558 <resetExecutedInstructions>:
resetExecutedInstructions():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:12
    printsv("Stores:\t\t",      HW_get_32bit_reg(STORES_COUNT));
    printsv("Others:\t\t",      HW_get_32bit_reg(OTHERS_COUNT));
    prints("--------------------------\n");
}

void resetExecutedInstructions(){
80005558:	ff010113          	addi	sp,sp,-16
8000555c:	00112623          	sw	ra,12(sp)
80005560:	00812423          	sw	s0,8(sp)
80005564:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:13
    HW_set_32bit_reg(LOADS_COUNT, 0);
80005568:	00000593          	li	a1,0
8000556c:	900007b7          	lui	a5,0x90000
80005570:	ff478513          	addi	a0,a5,-12 # 8ffffff4 <__stack_top+0xffbcbe4>
80005574:	a21fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:14
    HW_set_32bit_reg(STORES_COUNT, 0);
80005578:	00000593          	li	a1,0
8000557c:	900007b7          	lui	a5,0x90000
80005580:	ff078513          	addi	a0,a5,-16 # 8ffffff0 <__stack_top+0xffbcbe0>
80005584:	a11fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:15
    HW_set_32bit_reg(OTHERS_COUNT, 0);
80005588:	00000593          	li	a1,0
8000558c:	900007b7          	lui	a5,0x90000
80005590:	fec78513          	addi	a0,a5,-20 # 8fffffec <__stack_top+0xffbcbdc>
80005594:	a01fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:16
    return;
80005598:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:17
}
8000559c:	00c12083          	lw	ra,12(sp)
800055a0:	00812403          	lw	s0,8(sp)
800055a4:	01010113          	addi	sp,sp,16
800055a8:	00008067          	ret

800055ac <getNumberOfPorts>:
getNumberOfPorts():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:21

///////////////////////////////////////////////////////////////////
/* Get the number of ports in the router based in his address*/
unsigned int getNumberOfPorts(unsigned int address) {
800055ac:	fd010113          	addi	sp,sp,-48
800055b0:	02112623          	sw	ra,44(sp)
800055b4:	02812423          	sw	s0,40(sp)
800055b8:	03010413          	addi	s0,sp,48
800055bc:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:23
    unsigned int x, y;
    x = getXpos(address);
800055c0:	fdc42503          	lw	a0,-36(s0)
800055c4:	1a5000ef          	jal	ra,80005f68 <getXpos>
800055c8:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:24
    y = getYpos(address);
800055cc:	fdc42503          	lw	a0,-36(s0)
800055d0:	1c5000ef          	jal	ra,80005f94 <getYpos>
800055d4:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:26

    if ((x == 0 || x == (DIM_X - 1)) && (y == 0 || y == (DIM_Y - 1))) {
800055d8:	fec42783          	lw	a5,-20(s0)
800055dc:	00078863          	beqz	a5,800055ec <getNumberOfPorts+0x40>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:26 (discriminator 2)
800055e0:	fec42703          	lw	a4,-20(s0)
800055e4:	00200793          	li	a5,2
800055e8:	02f71063          	bne	a4,a5,80005608 <getNumberOfPorts+0x5c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:26 (discriminator 3)
800055ec:	fe842783          	lw	a5,-24(s0)
800055f0:	00078863          	beqz	a5,80005600 <getNumberOfPorts+0x54>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:26 (discriminator 4)
800055f4:	fe842703          	lw	a4,-24(s0)
800055f8:	00200793          	li	a5,2
800055fc:	00f71663          	bne	a4,a5,80005608 <getNumberOfPorts+0x5c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:27
        return 3;
80005600:	00300793          	li	a5,3
80005604:	0380006f          	j	8000563c <getNumberOfPorts+0x90>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:29
    } else {
        if (x == 0 || x == (DIM_X - 1) || y == 0 || y == (DIM_Y - 1)) {
80005608:	fec42783          	lw	a5,-20(s0)
8000560c:	02078263          	beqz	a5,80005630 <getNumberOfPorts+0x84>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:29 (discriminator 1)
80005610:	fec42703          	lw	a4,-20(s0)
80005614:	00200793          	li	a5,2
80005618:	00f70c63          	beq	a4,a5,80005630 <getNumberOfPorts+0x84>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:29 (discriminator 2)
8000561c:	fe842783          	lw	a5,-24(s0)
80005620:	00078863          	beqz	a5,80005630 <getNumberOfPorts+0x84>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:29 (discriminator 3)
80005624:	fe842703          	lw	a4,-24(s0)
80005628:	00200793          	li	a5,2
8000562c:	00f71663          	bne	a4,a5,80005638 <getNumberOfPorts+0x8c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:30
            return 4;
80005630:	00400793          	li	a5,4
80005634:	0080006f          	j	8000563c <getNumberOfPorts+0x90>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:32
        } else {
            return 5;
80005638:	00500793          	li	a5,5
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:35
        }
    }
}
8000563c:	00078513          	mv	a0,a5
80005640:	02c12083          	lw	ra,44(sp)
80005644:	02812403          	lw	s0,40(sp)
80005648:	03010113          	addi	sp,sp,48
8000564c:	00008067          	ret

80005650 <estimateNoCActivity>:
estimateNoCActivity():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:39

///////////////////////////////////////////////////////////////////
/* Activity estimation based in the amount of flits and packets crossing the router */
unsigned int estimateNoCActivity() {
80005650:	fe010113          	addi	sp,sp,-32
80005654:	00112e23          	sw	ra,28(sp)
80005658:	00812c23          	sw	s0,24(sp)
8000565c:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:42
    unsigned int totalPackets, totalFlits;
    // calculate the difference between the last interruption and the current one
    totalPackets =  HW_get_32bit_reg(EAST_PACKETS) - eastPackets_last;
80005660:	900007b7          	lui	a5,0x90000
80005664:	fc478513          	addi	a0,a5,-60 # 8fffffc4 <__stack_top+0xffbcbb4>
80005668:	935fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
8000566c:	00050713          	mv	a4,a0
80005670:	96c1a783          	lw	a5,-1684(gp) # 80008aec <eastPackets_last>
80005674:	40f707b3          	sub	a5,a4,a5
80005678:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:43
    totalPackets += HW_get_32bit_reg(WEST_PACKETS) - westPackets_last;
8000567c:	900007b7          	lui	a5,0x90000
80005680:	fbc78513          	addi	a0,a5,-68 # 8fffffbc <__stack_top+0xffbcbac>
80005684:	919fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005688:	00050713          	mv	a4,a0
8000568c:	9741a783          	lw	a5,-1676(gp) # 80008af4 <westPackets_last>
80005690:	40f707b3          	sub	a5,a4,a5
80005694:	fec42703          	lw	a4,-20(s0)
80005698:	00f707b3          	add	a5,a4,a5
8000569c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:44
    totalPackets += HW_get_32bit_reg(SOUTH_PACKETS) - southPackets_last;
800056a0:	900007b7          	lui	a5,0x90000
800056a4:	fac78513          	addi	a0,a5,-84 # 8fffffac <__stack_top+0xffbcb9c>
800056a8:	8f5fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800056ac:	00050713          	mv	a4,a0
800056b0:	9841a783          	lw	a5,-1660(gp) # 80008b04 <southPackets_last>
800056b4:	40f707b3          	sub	a5,a4,a5
800056b8:	fec42703          	lw	a4,-20(s0)
800056bc:	00f707b3          	add	a5,a4,a5
800056c0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:45
    totalPackets += HW_get_32bit_reg(LOCAL_PACKETS) - localPackets_last;
800056c4:	900007b7          	lui	a5,0x90000
800056c8:	fa478513          	addi	a0,a5,-92 # 8fffffa4 <__stack_top+0xffbcb94>
800056cc:	8d1fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800056d0:	00050713          	mv	a4,a0
800056d4:	98c1a783          	lw	a5,-1652(gp) # 80008b0c <localPackets_last>
800056d8:	40f707b3          	sub	a5,a4,a5
800056dc:	fec42703          	lw	a4,-20(s0)
800056e0:	00f707b3          	add	a5,a4,a5
800056e4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:46
    totalPackets += HW_get_32bit_reg(NORTH_PACKETS) - northPackets_last;
800056e8:	900007b7          	lui	a5,0x90000
800056ec:	fb478513          	addi	a0,a5,-76 # 8fffffb4 <__stack_top+0xffbcba4>
800056f0:	8adfb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800056f4:	00050713          	mv	a4,a0
800056f8:	97c1a783          	lw	a5,-1668(gp) # 80008afc <northPackets_last>
800056fc:	40f707b3          	sub	a5,a4,a5
80005700:	fec42703          	lw	a4,-20(s0)
80005704:	00f707b3          	add	a5,a4,a5
80005708:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:49
    //totalPackets = eastPackets_dif + westPackets_dif + southPackets_dif + localPackets_dif + northPackets_dif;

    eastPackets_last  = HW_get_32bit_reg(EAST_PACKETS);
8000570c:	900007b7          	lui	a5,0x90000
80005710:	fc478513          	addi	a0,a5,-60 # 8fffffc4 <__stack_top+0xffbcbb4>
80005714:	889fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005718:	00050713          	mv	a4,a0
8000571c:	96e1a623          	sw	a4,-1684(gp) # 80008aec <eastPackets_last>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:50
    westPackets_last  = HW_get_32bit_reg(WEST_PACKETS);
80005720:	900007b7          	lui	a5,0x90000
80005724:	fbc78513          	addi	a0,a5,-68 # 8fffffbc <__stack_top+0xffbcbac>
80005728:	875fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
8000572c:	00050713          	mv	a4,a0
80005730:	96e1aa23          	sw	a4,-1676(gp) # 80008af4 <westPackets_last>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:51
    southPackets_last = HW_get_32bit_reg(SOUTH_PACKETS);
80005734:	900007b7          	lui	a5,0x90000
80005738:	fac78513          	addi	a0,a5,-84 # 8fffffac <__stack_top+0xffbcb9c>
8000573c:	861fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005740:	00050713          	mv	a4,a0
80005744:	98e1a223          	sw	a4,-1660(gp) # 80008b04 <southPackets_last>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:52
    localPackets_last = HW_get_32bit_reg(LOCAL_PACKETS);
80005748:	900007b7          	lui	a5,0x90000
8000574c:	fa478513          	addi	a0,a5,-92 # 8fffffa4 <__stack_top+0xffbcb94>
80005750:	84dfb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005754:	00050713          	mv	a4,a0
80005758:	98e1a623          	sw	a4,-1652(gp) # 80008b0c <localPackets_last>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:53
    northPackets_last = HW_get_32bit_reg(NORTH_PACKETS);
8000575c:	900007b7          	lui	a5,0x90000
80005760:	fb478513          	addi	a0,a5,-76 # 8fffffb4 <__stack_top+0xffbcba4>
80005764:	839fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005768:	00050713          	mv	a4,a0
8000576c:	96e1ae23          	sw	a4,-1668(gp) # 80008afc <northPackets_last>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:56

    // alculate the difference between the last interruption and the current one
    totalFlits =  HW_get_32bit_reg(EAST_FLITS) - eastFlits_last;
80005770:	900007b7          	lui	a5,0x90000
80005774:	fc878513          	addi	a0,a5,-56 # 8fffffc8 <__stack_top+0xffbcbb8>
80005778:	825fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
8000577c:	00050713          	mv	a4,a0
80005780:	9681a783          	lw	a5,-1688(gp) # 80008ae8 <eastFlits_last>
80005784:	40f707b3          	sub	a5,a4,a5
80005788:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:57
    totalFlits += HW_get_32bit_reg(WEST_FLITS) - westFlits_last;
8000578c:	900007b7          	lui	a5,0x90000
80005790:	fc078513          	addi	a0,a5,-64 # 8fffffc0 <__stack_top+0xffbcbb0>
80005794:	809fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005798:	00050713          	mv	a4,a0
8000579c:	9701a783          	lw	a5,-1680(gp) # 80008af0 <westFlits_last>
800057a0:	40f707b3          	sub	a5,a4,a5
800057a4:	fe842703          	lw	a4,-24(s0)
800057a8:	00f707b3          	add	a5,a4,a5
800057ac:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:58
    totalFlits += HW_get_32bit_reg(SOUTH_FLITS) - southFlits_last;
800057b0:	900007b7          	lui	a5,0x90000
800057b4:	fb078513          	addi	a0,a5,-80 # 8fffffb0 <__stack_top+0xffbcba0>
800057b8:	fe4fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800057bc:	00050713          	mv	a4,a0
800057c0:	9801a783          	lw	a5,-1664(gp) # 80008b00 <southFlits_last>
800057c4:	40f707b3          	sub	a5,a4,a5
800057c8:	fe842703          	lw	a4,-24(s0)
800057cc:	00f707b3          	add	a5,a4,a5
800057d0:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:59
    memFlits = HW_get_32bit_reg(LOCAL_FLITS) - localFlits_last;
800057d4:	900007b7          	lui	a5,0x90000
800057d8:	fa878513          	addi	a0,a5,-88 # 8fffffa8 <__stack_top+0xffbcb98>
800057dc:	fc0fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800057e0:	00050713          	mv	a4,a0
800057e4:	9881a783          	lw	a5,-1656(gp) # 80008b08 <localFlits_last>
800057e8:	40f70733          	sub	a4,a4,a5
800057ec:	800237b7          	lui	a5,0x80023
800057f0:	40e7a023          	sw	a4,1024(a5) # 80023400 <__stack_top+0xfffdfff0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:60
    totalFlits += memFlits;
800057f4:	800237b7          	lui	a5,0x80023
800057f8:	4007a783          	lw	a5,1024(a5) # 80023400 <__stack_top+0xfffdfff0>
800057fc:	fe842703          	lw	a4,-24(s0)
80005800:	00f707b3          	add	a5,a4,a5
80005804:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:62
    //totalFlits += HW_get_32bit_reg(LOCAL_FLITS) - localFlits_last;
    totalFlits += HW_get_32bit_reg(NORTH_FLITS) - northFlits_last;
80005808:	900007b7          	lui	a5,0x90000
8000580c:	fb878513          	addi	a0,a5,-72 # 8fffffb8 <__stack_top+0xffbcba8>
80005810:	f8cfb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005814:	00050713          	mv	a4,a0
80005818:	9781a783          	lw	a5,-1672(gp) # 80008af8 <northFlits_last>
8000581c:	40f707b3          	sub	a5,a4,a5
80005820:	fe842703          	lw	a4,-24(s0)
80005824:	00f707b3          	add	a5,a4,a5
80005828:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:65
    //totalFlits = eastFlits_dif + westFlits_dif + southFlits_dif + localFlits_dif + northFlits_dif;

    eastFlits_last  = HW_get_32bit_reg(EAST_FLITS);
8000582c:	900007b7          	lui	a5,0x90000
80005830:	fc878513          	addi	a0,a5,-56 # 8fffffc8 <__stack_top+0xffbcbb8>
80005834:	f68fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005838:	00050713          	mv	a4,a0
8000583c:	96e1a423          	sw	a4,-1688(gp) # 80008ae8 <eastFlits_last>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:66
    westFlits_last  = HW_get_32bit_reg(WEST_FLITS);
80005840:	900007b7          	lui	a5,0x90000
80005844:	fc078513          	addi	a0,a5,-64 # 8fffffc0 <__stack_top+0xffbcbb0>
80005848:	f54fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
8000584c:	00050713          	mv	a4,a0
80005850:	96e1a823          	sw	a4,-1680(gp) # 80008af0 <westFlits_last>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:67
    southFlits_last = HW_get_32bit_reg(SOUTH_FLITS);
80005854:	900007b7          	lui	a5,0x90000
80005858:	fb078513          	addi	a0,a5,-80 # 8fffffb0 <__stack_top+0xffbcba0>
8000585c:	f40fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005860:	00050713          	mv	a4,a0
80005864:	98e1a023          	sw	a4,-1664(gp) # 80008b00 <southFlits_last>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:68
    localFlits_last = HW_get_32bit_reg(LOCAL_FLITS);
80005868:	900007b7          	lui	a5,0x90000
8000586c:	fa878513          	addi	a0,a5,-88 # 8fffffa8 <__stack_top+0xffbcb98>
80005870:	f2cfb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005874:	00050713          	mv	a4,a0
80005878:	98e1a423          	sw	a4,-1656(gp) # 80008b08 <localFlits_last>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:69
    northFlits_last = HW_get_32bit_reg(NORTH_FLITS);
8000587c:	900007b7          	lui	a5,0x90000
80005880:	fb878513          	addi	a0,a5,-72 # 8fffffb8 <__stack_top+0xffbcba8>
80005884:	f18fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005888:	00050713          	mv	a4,a0
8000588c:	96e1ac23          	sw	a4,-1672(gp) # 80008af8 <northFlits_last>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:71

    return ((totalPackets * 5) + totalFlits);
80005890:	fec42703          	lw	a4,-20(s0)
80005894:	00070793          	mv	a5,a4
80005898:	00279793          	slli	a5,a5,0x2
8000589c:	00e78733          	add	a4,a5,a4
800058a0:	fe842783          	lw	a5,-24(s0)
800058a4:	00f707b3          	add	a5,a4,a5
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:72
}
800058a8:	00078513          	mv	a0,a5
800058ac:	01c12083          	lw	ra,28(sp)
800058b0:	01812403          	lw	s0,24(sp)
800058b4:	02010113          	addi	sp,sp,32
800058b8:	00008067          	ret

800058bc <powerEstimation>:
powerEstimation():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:74

void powerEstimation(){
800058bc:	fa010113          	addi	sp,sp,-96
800058c0:	04112e23          	sw	ra,92(sp)
800058c4:	04812c23          	sw	s0,88(sp)
800058c8:	06010413          	addi	s0,sp,96
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:76
    //unsigned int actualTime, deltaTime;
    unsigned int Voltage = 2;
800058cc:	00200793          	li	a5,2
800058d0:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:82
    unsigned int loads, stores, others, total;
    unsigned int dynamicEnergy_PE, dynamicEnergy_MEM, dynamicEnergy_Router;
    unsigned int leakEnergy_PE;
    unsigned int totalEnergy, nPorts, nocActivity, energyActive, energyIdle, nocIdle, idleNoCEnergy, activeNoCEnergy;
    
    if(!thermalPacket_pending){
800058d4:	9641a783          	lw	a5,-1692(gp) # 80008ae4 <thermalPacket_pending>
800058d8:	34079263          	bnez	a5,80005c1c <powerEstimation+0x360>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:83
        thermalPacket_pending = TRUE;
800058dc:	00100713          	li	a4,1
800058e0:	96e1a223          	sw	a4,-1692(gp) # 80008ae4 <thermalPacket_pending>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:86

        // gets the number of ports
        nPorts = getNumberOfPorts(ProcessorAddr);
800058e4:	800237b7          	lui	a5,0x80023
800058e8:	40c7a783          	lw	a5,1036(a5) # 8002340c <__stack_top+0xfffdfffc>
800058ec:	00078513          	mv	a0,a5
800058f0:	cbdff0ef          	jal	ra,800055ac <getNumberOfPorts>
800058f4:	fea42223          	sw	a0,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:89
         
        // estimate the noc activity
        nocActivity = estimateNoCActivity();
800058f8:	d59ff0ef          	jal	ra,80005650 <estimateNoCActivity>
800058fc:	fea42023          	sw	a0,-32(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:90
        if(nocActivity < 1000000)
80005900:	fe042703          	lw	a4,-32(s0)
80005904:	000f47b7          	lui	a5,0xf4
80005908:	23f78793          	addi	a5,a5,575 # f423f <RAM_SIZE+0x7423f>
8000590c:	00e7ee63          	bltu	a5,a4,80005928 <powerEstimation+0x6c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:91
            nocIdle = 1000000 - nocActivity;
80005910:	000f47b7          	lui	a5,0xf4
80005914:	24078713          	addi	a4,a5,576 # f4240 <RAM_SIZE+0x74240>
80005918:	fe042783          	lw	a5,-32(s0)
8000591c:	40f707b3          	sub	a5,a4,a5
80005920:	fef42623          	sw	a5,-20(s0)
80005924:	0080006f          	j	8000592c <powerEstimation+0x70>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:93
        else
            nocIdle = 0;
80005928:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:96

        // calculates the energy
        energyActive = ((nPorts * powerAvgBufferActive[Voltage]) + powerSwitchControlActive[Voltage]);
8000592c:	800087b7          	lui	a5,0x80008
80005930:	fe842703          	lw	a4,-24(s0)
80005934:	00271713          	slli	a4,a4,0x2
80005938:	33878793          	addi	a5,a5,824 # 80008338 <__stack_top+0xfffc4f28>
8000593c:	00f707b3          	add	a5,a4,a5
80005940:	0007a783          	lw	a5,0(a5)
80005944:	00078713          	mv	a4,a5
80005948:	fe442783          	lw	a5,-28(s0)
8000594c:	02f707b3          	mul	a5,a4,a5
80005950:	80008737          	lui	a4,0x80008
80005954:	fe842683          	lw	a3,-24(s0)
80005958:	00269693          	slli	a3,a3,0x2
8000595c:	34470713          	addi	a4,a4,836 # 80008344 <__stack_top+0xfffc4f34>
80005960:	00e68733          	add	a4,a3,a4
80005964:	00072703          	lw	a4,0(a4)
80005968:	00e787b3          	add	a5,a5,a4
8000596c:	fcf42e23          	sw	a5,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:97
        energyIdle   = ((nPorts * powerAvgBufferIdle[Voltage]) + powerSwitchControlIdle[Voltage]);
80005970:	800087b7          	lui	a5,0x80008
80005974:	fe842703          	lw	a4,-24(s0)
80005978:	00271713          	slli	a4,a4,0x2
8000597c:	32078793          	addi	a5,a5,800 # 80008320 <__stack_top+0xfffc4f10>
80005980:	00f707b3          	add	a5,a4,a5
80005984:	0007a783          	lw	a5,0(a5)
80005988:	00078713          	mv	a4,a5
8000598c:	fe442783          	lw	a5,-28(s0)
80005990:	02f707b3          	mul	a5,a4,a5
80005994:	80008737          	lui	a4,0x80008
80005998:	fe842683          	lw	a3,-24(s0)
8000599c:	00269693          	slli	a3,a3,0x2
800059a0:	32c70713          	addi	a4,a4,812 # 8000832c <__stack_top+0xfffc4f1c>
800059a4:	00e68733          	add	a4,a3,a4
800059a8:	00072703          	lw	a4,0(a4)
800059ac:	00e787b3          	add	a5,a5,a4
800059b0:	fcf42c23          	sw	a5,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:100

        // multiply by the period to get the power consumption
        idleNoCEnergy = nocIdle * energyIdle; // * DC_DC_CONVERTER_ENERGY_OVERHEAD / 10;
800059b4:	fec42703          	lw	a4,-20(s0)
800059b8:	fd842783          	lw	a5,-40(s0)
800059bc:	02f707b3          	mul	a5,a4,a5
800059c0:	fcf42a23          	sw	a5,-44(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:101
        activeNoCEnergy = nocActivity * energyActive + (memFlits * (readEnergyMemory[Voltage] + writeEnergyMemory[Voltage]));  //* DC_DC_CONVERTER_ENERGY_OVERHEAD / 10;
800059c4:	fe042703          	lw	a4,-32(s0)
800059c8:	fdc42783          	lw	a5,-36(s0)
800059cc:	02f70733          	mul	a4,a4,a5
800059d0:	800087b7          	lui	a5,0x80008
800059d4:	fe842683          	lw	a3,-24(s0)
800059d8:	00269693          	slli	a3,a3,0x2
800059dc:	35078793          	addi	a5,a5,848 # 80008350 <__stack_top+0xfffc4f40>
800059e0:	00f687b3          	add	a5,a3,a5
800059e4:	0007a683          	lw	a3,0(a5)
800059e8:	800087b7          	lui	a5,0x80008
800059ec:	fe842603          	lw	a2,-24(s0)
800059f0:	00261613          	slli	a2,a2,0x2
800059f4:	35c78793          	addi	a5,a5,860 # 8000835c <__stack_top+0xfffc4f4c>
800059f8:	00f607b3          	add	a5,a2,a5
800059fc:	0007a783          	lw	a5,0(a5)
80005a00:	00f687b3          	add	a5,a3,a5
80005a04:	00078693          	mv	a3,a5
80005a08:	800237b7          	lui	a5,0x80023
80005a0c:	4007a783          	lw	a5,1024(a5) # 80023400 <__stack_top+0xfffdfff0>
80005a10:	02f687b3          	mul	a5,a3,a5
80005a14:	00f707b3          	add	a5,a4,a5
80005a18:	fcf42823          	sw	a5,-48(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:104

        // calculates the ROUTER dynamic energy
        dynamicEnergy_Router = (idleNoCEnergy + activeNoCEnergy) >> 6;
80005a1c:	fd442703          	lw	a4,-44(s0)
80005a20:	fd042783          	lw	a5,-48(s0)
80005a24:	00f707b3          	add	a5,a4,a5
80005a28:	0067d793          	srli	a5,a5,0x6
80005a2c:	fcf42623          	sw	a5,-52(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:105
        printsv("dynamicEnergy_Router >> ", dynamicEnergy_Router);
80005a30:	fcc42783          	lw	a5,-52(s0)
80005a34:	00078593          	mv	a1,a5
80005a38:	800087b7          	lui	a5,0x80008
80005a3c:	3c078513          	addi	a0,a5,960 # 800083c0 <__stack_top+0xfffc4fb0>
80005a40:	480000ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:108

        // reads the number of each type of instruction executed in the last window
        loads = HW_get_32bit_reg(LOADS_COUNT);
80005a44:	900007b7          	lui	a5,0x90000
80005a48:	ff478513          	addi	a0,a5,-12 # 8ffffff4 <__stack_top+0xffbcbe4>
80005a4c:	d50fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005a50:	fca42423          	sw	a0,-56(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:109
        stores = HW_get_32bit_reg(STORES_COUNT);
80005a54:	900007b7          	lui	a5,0x90000
80005a58:	ff078513          	addi	a0,a5,-16 # 8ffffff0 <__stack_top+0xffbcbe0>
80005a5c:	d40fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005a60:	fca42223          	sw	a0,-60(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:110
        others = HW_get_32bit_reg(OTHERS_COUNT);
80005a64:	900007b7          	lui	a5,0x90000
80005a68:	fec78513          	addi	a0,a5,-20 # 8fffffec <__stack_top+0xffbcbdc>
80005a6c:	d30fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005a70:	fca42023          	sw	a0,-64(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:111
        resetExecutedInstructions();
80005a74:	ae5ff0ef          	jal	ra,80005558 <resetExecutedInstructions>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:114

        // number of instructions executed in the last window
        total = loads + stores + others; 
80005a78:	fc842703          	lw	a4,-56(s0)
80005a7c:	fc442783          	lw	a5,-60(s0)
80005a80:	00f707b3          	add	a5,a4,a5
80005a84:	fc042703          	lw	a4,-64(s0)
80005a88:	00f707b3          	add	a5,a4,a5
80005a8c:	faf42e23          	sw	a5,-68(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:115
        printsv("total instructions~~~> ", total);
80005a90:	fbc42783          	lw	a5,-68(s0)
80005a94:	00078593          	mv	a1,a5
80005a98:	800087b7          	lui	a5,0x80008
80005a9c:	3dc78513          	addi	a0,a5,988 # 800083dc <__stack_top+0xfffc4fcc>
80005aa0:	420000ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:118

        // calculates the PE dynamic energy
        dynamicEnergy_PE = ((arithDyn[Voltage] * others)) + ((loadStoreDyn[Voltage] * (loads + stores)));
80005aa4:	800087b7          	lui	a5,0x80008
80005aa8:	fe842703          	lw	a4,-24(s0)
80005aac:	00271713          	slli	a4,a4,0x2
80005ab0:	36878793          	addi	a5,a5,872 # 80008368 <__stack_top+0xfffc4f58>
80005ab4:	00f707b3          	add	a5,a4,a5
80005ab8:	0007a783          	lw	a5,0(a5)
80005abc:	00078713          	mv	a4,a5
80005ac0:	fc042783          	lw	a5,-64(s0)
80005ac4:	02f70733          	mul	a4,a4,a5
80005ac8:	800087b7          	lui	a5,0x80008
80005acc:	fe842683          	lw	a3,-24(s0)
80005ad0:	00269693          	slli	a3,a3,0x2
80005ad4:	37478793          	addi	a5,a5,884 # 80008374 <__stack_top+0xfffc4f64>
80005ad8:	00f687b3          	add	a5,a3,a5
80005adc:	0007a783          	lw	a5,0(a5)
80005ae0:	00078613          	mv	a2,a5
80005ae4:	fc842683          	lw	a3,-56(s0)
80005ae8:	fc442783          	lw	a5,-60(s0)
80005aec:	00f687b3          	add	a5,a3,a5
80005af0:	02f607b3          	mul	a5,a2,a5
80005af4:	00f707b3          	add	a5,a4,a5
80005af8:	faf42c23          	sw	a5,-72(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:119
        dynamicEnergy_PE = dynamicEnergy_PE >> 6;
80005afc:	fb842783          	lw	a5,-72(s0)
80005b00:	0067d793          	srli	a5,a5,0x6
80005b04:	faf42c23          	sw	a5,-72(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:123
        //printsv("dynamicEnergy_PE >> 6: ", dynamicEnergy_PE);

        // calculates the PE leakage energy
        leakEnergy_PE = (unsigned int)((PE_LEAKAGE * 1000000) * 0.001) >> 6; // mW => pW * s => pJ
80005b08:	69700793          	li	a5,1687
80005b0c:	faf42a23          	sw	a5,-76(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:126

        // calculates the MEM dynamic energy
        dynamicEnergy_MEM = (readEnergyMemory[Voltage] * loads) + (writeEnergyMemory[Voltage] * stores);
80005b10:	800087b7          	lui	a5,0x80008
80005b14:	fe842703          	lw	a4,-24(s0)
80005b18:	00271713          	slli	a4,a4,0x2
80005b1c:	35078793          	addi	a5,a5,848 # 80008350 <__stack_top+0xfffc4f40>
80005b20:	00f707b3          	add	a5,a4,a5
80005b24:	0007a783          	lw	a5,0(a5)
80005b28:	00078713          	mv	a4,a5
80005b2c:	fc842783          	lw	a5,-56(s0)
80005b30:	02f70733          	mul	a4,a4,a5
80005b34:	800087b7          	lui	a5,0x80008
80005b38:	fe842683          	lw	a3,-24(s0)
80005b3c:	00269693          	slli	a3,a3,0x2
80005b40:	35c78793          	addi	a5,a5,860 # 8000835c <__stack_top+0xfffc4f4c>
80005b44:	00f687b3          	add	a5,a3,a5
80005b48:	0007a783          	lw	a5,0(a5)
80005b4c:	00078693          	mv	a3,a5
80005b50:	fc442783          	lw	a5,-60(s0)
80005b54:	02f687b3          	mul	a5,a3,a5
80005b58:	00f707b3          	add	a5,a4,a5
80005b5c:	faf42823          	sw	a5,-80(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:127
        dynamicEnergy_MEM = dynamicEnergy_MEM >> 6;
80005b60:	fb042783          	lw	a5,-80(s0)
80005b64:	0067d793          	srli	a5,a5,0x6
80005b68:	faf42823          	sw	a5,-80(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:131
        //printsv("dynamicEnergy_MEM >> 6: ", dynamicEnergy_MEM);

        // the amount of energy spent by this tile in the last window
        totalEnergy = (dynamicEnergy_MEM + dynamicEnergy_PE + dynamicEnergy_Router) + (leakEnergy_PE);
80005b6c:	fb042703          	lw	a4,-80(s0)
80005b70:	fb842783          	lw	a5,-72(s0)
80005b74:	00f70733          	add	a4,a4,a5
80005b78:	fcc42783          	lw	a5,-52(s0)
80005b7c:	00f707b3          	add	a5,a4,a5
80005b80:	fb442703          	lw	a4,-76(s0)
80005b84:	00f707b3          	add	a5,a4,a5
80005b88:	faf42623          	sw	a5,-84(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:132
        printsv("TotalEnergy: ", totalEnergy);
80005b8c:	fac42783          	lw	a5,-84(s0)
80005b90:	00078593          	mv	a1,a5
80005b94:	800087b7          	lui	a5,0x80008
80005b98:	3f478513          	addi	a0,a5,1012 # 800083f4 <__stack_top+0xfffc4fe4>
80005b9c:	324000ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:135

        // Fill the ThermalPacket slot...
        ThermalPacket.header.header           = makeAddress(0, 0) | PERIPH_WEST;
80005ba0:	00000593          	li	a1,0
80005ba4:	00000513          	li	a0,0
80005ba8:	734000ef          	jal	ra,800062dc <makeAddress>
80005bac:	00050713          	mv	a4,a0
80005bb0:	000207b7          	lui	a5,0x20
80005bb4:	00f76733          	or	a4,a4,a5
80005bb8:	800227b7          	lui	a5,0x80022
80005bbc:	d3878793          	addi	a5,a5,-712 # 80021d38 <__stack_top+0xfffde928>
80005bc0:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:136
        ThermalPacket.header.payload_size     = PKT_SERVICE_SIZE;
80005bc4:	800227b7          	lui	a5,0x80022
80005bc8:	d3878793          	addi	a5,a5,-712 # 80021d38 <__stack_top+0xfffde928>
80005bcc:	00b00713          	li	a4,11
80005bd0:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:137
        ThermalPacket.header.service          = ENERGY_PACKET;
80005bd4:	800227b7          	lui	a5,0x80022
80005bd8:	d3878793          	addi	a5,a5,-712 # 80021d38 <__stack_top+0xfffde928>
80005bdc:	05000713          	li	a4,80
80005be0:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:138
        ThermalPacket.header.source_addr      = ProcessorAddr;
80005be4:	800237b7          	lui	a5,0x80023
80005be8:	40c7a703          	lw	a4,1036(a5) # 8002340c <__stack_top+0xfffdfffc>
80005bec:	800227b7          	lui	a5,0x80022
80005bf0:	d3878793          	addi	a5,a5,-712 # 80021d38 <__stack_top+0xfffde928>
80005bf4:	00e7ac23          	sw	a4,24(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:139
        ThermalPacket.header.spent_energy     = totalEnergy;
80005bf8:	800227b7          	lui	a5,0x80022
80005bfc:	d3878793          	addi	a5,a5,-712 # 80021d38 <__stack_top+0xfffde928>
80005c00:	fac42703          	lw	a4,-84(s0)
80005c04:	00e7ae23          	sw	a4,28(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:141
        //API_PushSendQueue(THERMAL, 0);
        prints("EnergyPckt sent\n");
80005c08:	800087b7          	lui	a5,0x80008
80005c0c:	40478513          	addi	a0,a5,1028 # 80008404 <__stack_top+0xfffc4ff4>
80005c10:	204000ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:144

        // change the PE frequency to the selected one
        API_applyFreqScale();
80005c14:	f88ff0ef          	jal	ra,8000539c <API_applyFreqScale>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:146
    }
    return;
80005c18:	00000013          	nop
80005c1c:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:147
}
80005c20:	05c12083          	lw	ra,92(sp)
80005c24:	05812403          	lw	s0,88(sp)
80005c28:	06010113          	addi	sp,sp,96
80005c2c:	00008067          	ret

80005c30 <PLIC_EnableIRQ>:
PLIC_EnableIRQ():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:154
{
80005c30:	fd010113          	addi	sp,sp,-48
80005c34:	02812623          	sw	s0,44(sp)
80005c38:	03010413          	addi	s0,sp,48
80005c3c:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:155
    unsigned long hart_id = read_csr(mhartid);
80005c40:	f14027f3          	csrr	a5,mhartid
80005c44:	fef42623          	sw	a5,-20(s0)
80005c48:	fec42783          	lw	a5,-20(s0)
80005c4c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:156
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80005c50:	40000737          	lui	a4,0x40000
80005c54:	fdc42783          	lw	a5,-36(s0)
80005c58:	0057d793          	srli	a5,a5,0x5
80005c5c:	fe842683          	lw	a3,-24(s0)
80005c60:	00569693          	slli	a3,a3,0x5
80005c64:	00f686b3          	add	a3,a3,a5
80005c68:	000017b7          	lui	a5,0x1
80005c6c:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80005c70:	00f687b3          	add	a5,a3,a5
80005c74:	00279793          	slli	a5,a5,0x2
80005c78:	00f707b3          	add	a5,a4,a5
80005c7c:	0007a783          	lw	a5,0(a5)
80005c80:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:157
    current |= (uint32_t)1 << (IRQn % 32);
80005c84:	fdc42783          	lw	a5,-36(s0)
80005c88:	01f7f793          	andi	a5,a5,31
80005c8c:	00100713          	li	a4,1
80005c90:	00f717b3          	sll	a5,a4,a5
80005c94:	fe442703          	lw	a4,-28(s0)
80005c98:	00f767b3          	or	a5,a4,a5
80005c9c:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:158
    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
80005ca0:	40000737          	lui	a4,0x40000
80005ca4:	fdc42783          	lw	a5,-36(s0)
80005ca8:	0057d793          	srli	a5,a5,0x5
80005cac:	fe842683          	lw	a3,-24(s0)
80005cb0:	00569693          	slli	a3,a3,0x5
80005cb4:	00f686b3          	add	a3,a3,a5
80005cb8:	000017b7          	lui	a5,0x1
80005cbc:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80005cc0:	00f687b3          	add	a5,a3,a5
80005cc4:	00279793          	slli	a5,a5,0x2
80005cc8:	00f707b3          	add	a5,a4,a5
80005ccc:	fe442703          	lw	a4,-28(s0)
80005cd0:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:159
}
80005cd4:	00000013          	nop
80005cd8:	02c12403          	lw	s0,44(sp)
80005cdc:	03010113          	addi	sp,sp,48
80005ce0:	00008067          	ret

80005ce4 <PLIC_SetPriority>:
PLIC_SetPriority():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:188
{
80005ce4:	fe010113          	addi	sp,sp,-32
80005ce8:	00812e23          	sw	s0,28(sp)
80005cec:	02010413          	addi	s0,sp,32
80005cf0:	fea42623          	sw	a0,-20(s0)
80005cf4:	feb42423          	sw	a1,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:189
    PLIC->SOURCE_PRIORITY[IRQn] = priority;
80005cf8:	40000737          	lui	a4,0x40000
80005cfc:	fec42783          	lw	a5,-20(s0)
80005d00:	00279793          	slli	a5,a5,0x2
80005d04:	00f707b3          	add	a5,a4,a5
80005d08:	fe842703          	lw	a4,-24(s0)
80005d0c:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:190
}
80005d10:	00000013          	nop
80005d14:	01c12403          	lw	s0,28(sp)
80005d18:	02010113          	addi	sp,sp,32
80005d1c:	00008067          	ret

80005d20 <Chronos_init>:
Chronos_init():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:31
extern unsigned int temperatureUpdated;


////////////////////////////////////////////////////////////
// Initialize Chronos stuff
void Chronos_init(){
80005d20:	ff010113          	addi	sp,sp,-16
80005d24:	00112623          	sw	ra,12(sp)
80005d28:	00812423          	sw	s0,8(sp)
80005d2c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:33
    // Resets the amount of each executed instruction
    resetExecutedInstructions();
80005d30:	829ff0ef          	jal	ra,80005558 <resetExecutedInstructions>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:36

    //Informs the Router this tile ID, that is provided by Harness
    HW_set_32bit_reg(ROUTER_BASE, HW_get_32bit_reg(MY_ID)); 
80005d34:	900007b7          	lui	a5,0x90000
80005d38:	ffc78513          	addi	a0,a5,-4 # 8ffffffc <__stack_top+0xffbcbec>
80005d3c:	a60fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005d40:	00050793          	mv	a5,a0
80005d44:	00078593          	mv	a1,a5
80005d48:	50000537          	lui	a0,0x50000
80005d4c:	a48fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:39
    
    // Reads this processor address, calculated by the router
    ProcessorAddr = HW_get_32bit_reg(ROUTER_BASE);
80005d50:	50000537          	lui	a0,0x50000
80005d54:	a48fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005d58:	00050713          	mv	a4,a0
80005d5c:	800237b7          	lui	a5,0x80023
80005d60:	40e7a623          	sw	a4,1036(a5) # 8002340c <__stack_top+0xfffdfffc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:42

    // Informs the PRINTER this tile address
    HW_set_32bit_reg(PRINTER_CHAR, getXpos(ProcessorAddr));
80005d64:	800237b7          	lui	a5,0x80023
80005d68:	40c7a783          	lw	a5,1036(a5) # 8002340c <__stack_top+0xfffdfffc>
80005d6c:	00078513          	mv	a0,a5
80005d70:	1f8000ef          	jal	ra,80005f68 <getXpos>
80005d74:	00050793          	mv	a5,a0
80005d78:	00078593          	mv	a1,a5
80005d7c:	500007b7          	lui	a5,0x50000
80005d80:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80005d84:	a10fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:43
    HW_set_32bit_reg(PRINTER_CHAR, getYpos(ProcessorAddr));
80005d88:	800237b7          	lui	a5,0x80023
80005d8c:	40c7a783          	lw	a5,1036(a5) # 8002340c <__stack_top+0xfffdfffc>
80005d90:	00078513          	mv	a0,a5
80005d94:	200000ef          	jal	ra,80005f94 <getYpos>
80005d98:	00050793          	mv	a5,a0
80005d9c:	00078593          	mv	a1,a5
80005da0:	500007b7          	lui	a5,0x50000
80005da4:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80005da8:	9ecfb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:46

    // Initialize the TaskList
    API_TaskListInit();
80005dac:	f30fe0ef          	jal	ra,800044dc <API_TaskListInit>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:49
    
    // Initialize the Message & Service PIPE
    API_PipeInitialization();
80005db0:	8a0ff0ef          	jal	ra,80004e50 <API_PipeInitialization>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:50
    SendingQueue_front = 0;
80005db4:	800227b7          	lui	a5,0x80022
80005db8:	f807a823          	sw	zero,-112(a5) # 80021f90 <__stack_top+0xfffdeb80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:51
    SendingQueue_tail = 0;
80005dbc:	800227b7          	lui	a5,0x80022
80005dc0:	d207aa23          	sw	zero,-716(a5) # 80021d34 <__stack_top+0xfffde924>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:54

    // Configures the timer to interrupt at each ms
    HW_set_32bit_reg(NI_TIMER, 1000);
80005dc4:	3e800593          	li	a1,1000
80005dc8:	500007b7          	lui	a5,0x50000
80005dcc:	01078513          	addi	a0,a5,16 # 50000010 <RAM_SIZE+0x4ff80010>
80005dd0:	9c4fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:57

    // Informs the NI the address to store incoming packets
    HW_set_32bit_reg(NI_ADDR, (unsigned int)&incommingPacket.header);
80005dd4:	800227b7          	lui	a5,0x80022
80005dd8:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
80005ddc:	00078593          	mv	a1,a5
80005de0:	500007b7          	lui	a5,0x50000
80005de4:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
80005de8:	9acfb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:60
    
    // Enables interruption from NI
    NI_enable_irq(TX_RX);
80005dec:	000077b7          	lui	a5,0x7
80005df0:	77778513          	addi	a0,a5,1911 # 7777 <HEAP_SIZE-0x8889>
80005df4:	214000ef          	jal	ra,80006008 <NI_enable_irq>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:63

    // Set the system to Idle
    API_setFreqIdle();
80005df8:	d1cff0ef          	jal	ra,80005314 <API_setFreqIdle>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:64
    API_freqStepUp();
80005dfc:	df4ff0ef          	jal	ra,800053f0 <API_freqStepUp>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:65
    return;
80005e00:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:66
}
80005e04:	00c12083          	lw	ra,12(sp)
80005e08:	00812403          	lw	s0,8(sp)
80005e0c:	01010113          	addi	sp,sp,16
80005e10:	00008067          	ret

80005e14 <prints>:
prints():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:70

////////////////////////////////////////////////////////////
// Prints a string
void prints(char *text) {
80005e14:	fd010113          	addi	sp,sp,-48
80005e18:	02112623          	sw	ra,44(sp)
80005e1c:	02812423          	sw	s0,40(sp)
80005e20:	03010413          	addi	s0,sp,48
80005e24:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:71
    int i = 0;
80005e28:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:73 (discriminator 1)
    do {
        HW_set_32bit_reg(PRINTER_CHAR, text[i]);
80005e2c:	fec42783          	lw	a5,-20(s0)
80005e30:	fdc42703          	lw	a4,-36(s0)
80005e34:	00f707b3          	add	a5,a4,a5
80005e38:	00078783          	lb	a5,0(a5)
80005e3c:	00078593          	mv	a1,a5
80005e40:	500007b7          	lui	a5,0x50000
80005e44:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80005e48:	94cfb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:74 (discriminator 1)
        i++;
80005e4c:	fec42783          	lw	a5,-20(s0)
80005e50:	00178793          	addi	a5,a5,1
80005e54:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:75 (discriminator 1)
    } while (text[i - 1] != '\0');
80005e58:	fec42783          	lw	a5,-20(s0)
80005e5c:	fff78793          	addi	a5,a5,-1
80005e60:	fdc42703          	lw	a4,-36(s0)
80005e64:	00f707b3          	add	a5,a4,a5
80005e68:	00078783          	lb	a5,0(a5)
80005e6c:	fc0790e3          	bnez	a5,80005e2c <prints+0x18>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:76
    return;
80005e70:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:77
}
80005e74:	02c12083          	lw	ra,44(sp)
80005e78:	02812403          	lw	s0,40(sp)
80005e7c:	03010113          	addi	sp,sp,48
80005e80:	00008067          	ret

80005e84 <printi>:
printi():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:81

////////////////////////////////////////////////////////////
// Prints an integer
void printi(int value) {
80005e84:	fe010113          	addi	sp,sp,-32
80005e88:	00112e23          	sw	ra,28(sp)
80005e8c:	00812c23          	sw	s0,24(sp)
80005e90:	02010413          	addi	s0,sp,32
80005e94:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:82
    HW_set_32bit_reg(PRINTER_INT, value);
80005e98:	fec42783          	lw	a5,-20(s0)
80005e9c:	00078593          	mv	a1,a5
80005ea0:	500007b7          	lui	a5,0x50000
80005ea4:	02478513          	addi	a0,a5,36 # 50000024 <RAM_SIZE+0x4ff80024>
80005ea8:	8ecfb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:83
    return;
80005eac:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:84
}
80005eb0:	01c12083          	lw	ra,28(sp)
80005eb4:	01812403          	lw	s0,24(sp)
80005eb8:	02010113          	addi	sp,sp,32
80005ebc:	00008067          	ret

80005ec0 <printsv>:
printsv():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:88

////////////////////////////////////////////////////////////
// Prints a string followed by a integer
void printsv(char *text1, int value1) {
80005ec0:	fe010113          	addi	sp,sp,-32
80005ec4:	00112e23          	sw	ra,28(sp)
80005ec8:	00812c23          	sw	s0,24(sp)
80005ecc:	02010413          	addi	s0,sp,32
80005ed0:	fea42623          	sw	a0,-20(s0)
80005ed4:	feb42423          	sw	a1,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:89
    prints(text1);
80005ed8:	fec42503          	lw	a0,-20(s0)
80005edc:	f39ff0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:90
    printi(value1);
80005ee0:	fe842503          	lw	a0,-24(s0)
80005ee4:	fa1ff0ef          	jal	ra,80005e84 <printi>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:91
    prints("\n");
80005ee8:	800087b7          	lui	a5,0x80008
80005eec:	41878513          	addi	a0,a5,1048 # 80008418 <__stack_top+0xfffc5008>
80005ef0:	f25ff0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:92
    return;
80005ef4:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:93
}
80005ef8:	01c12083          	lw	ra,28(sp)
80005efc:	01812403          	lw	s0,24(sp)
80005f00:	02010113          	addi	sp,sp,32
80005f04:	00008067          	ret

80005f08 <printsvsv>:
printsvsv():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:97

////////////////////////////////////////////////////////////
// Prints two strings and two integers interspersed
void printsvsv(char *text1, int value1, char *text2, int value2) {
80005f08:	fe010113          	addi	sp,sp,-32
80005f0c:	00112e23          	sw	ra,28(sp)
80005f10:	00812c23          	sw	s0,24(sp)
80005f14:	02010413          	addi	s0,sp,32
80005f18:	fea42623          	sw	a0,-20(s0)
80005f1c:	feb42423          	sw	a1,-24(s0)
80005f20:	fec42223          	sw	a2,-28(s0)
80005f24:	fed42023          	sw	a3,-32(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:98
    prints(text1);
80005f28:	fec42503          	lw	a0,-20(s0)
80005f2c:	ee9ff0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:99
    printi(value1);
80005f30:	fe842503          	lw	a0,-24(s0)
80005f34:	f51ff0ef          	jal	ra,80005e84 <printi>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:100
    prints(text2);
80005f38:	fe442503          	lw	a0,-28(s0)
80005f3c:	ed9ff0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:101
    printi(value2);
80005f40:	fe042503          	lw	a0,-32(s0)
80005f44:	f41ff0ef          	jal	ra,80005e84 <printi>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:102
    prints("\n");
80005f48:	800087b7          	lui	a5,0x80008
80005f4c:	41878513          	addi	a0,a5,1048 # 80008418 <__stack_top+0xfffc5008>
80005f50:	ec5ff0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:103
    return;
80005f54:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:104
}
80005f58:	01c12083          	lw	ra,28(sp)
80005f5c:	01812403          	lw	s0,24(sp)
80005f60:	02010113          	addi	sp,sp,32
80005f64:	00008067          	ret

80005f68 <getXpos>:
getXpos():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:108

////////////////////////////////////////////////////////////
// Gets the X coordinate from the address
unsigned int getXpos(unsigned int addr) { return ((addr & 0x0000FF00) >> 8); }
80005f68:	fe010113          	addi	sp,sp,-32
80005f6c:	00812e23          	sw	s0,28(sp)
80005f70:	02010413          	addi	s0,sp,32
80005f74:	fea42623          	sw	a0,-20(s0)
80005f78:	fec42783          	lw	a5,-20(s0)
80005f7c:	0087d793          	srli	a5,a5,0x8
80005f80:	0ff7f793          	andi	a5,a5,255
80005f84:	00078513          	mv	a0,a5
80005f88:	01c12403          	lw	s0,28(sp)
80005f8c:	02010113          	addi	sp,sp,32
80005f90:	00008067          	ret

80005f94 <getYpos>:
getYpos():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:112

////////////////////////////////////////////////////////////
// Gets the Y coordinate from the address
unsigned int getYpos(unsigned int addr) { return (addr & 0x000000FF); }
80005f94:	fe010113          	addi	sp,sp,-32
80005f98:	00812e23          	sw	s0,28(sp)
80005f9c:	02010413          	addi	s0,sp,32
80005fa0:	fea42623          	sw	a0,-20(s0)
80005fa4:	fec42783          	lw	a5,-20(s0)
80005fa8:	0ff7f793          	andi	a5,a5,255
80005fac:	00078513          	mv	a0,a5
80005fb0:	01c12403          	lw	s0,28(sp)
80005fb4:	02010113          	addi	sp,sp,32
80005fb8:	00008067          	ret

80005fbc <SendRaw>:
SendRaw():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:116

///////////////////////////////////////////////////////////////////
// Configure the NI to transmitt a given packet
void SendRaw(unsigned int addr) {
80005fbc:	fe010113          	addi	sp,sp,-32
80005fc0:	00112e23          	sw	ra,28(sp)
80005fc4:	00812c23          	sw	s0,24(sp)
80005fc8:	02010413          	addi	s0,sp,32
80005fcc:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:117
    HW_set_32bit_reg(NI_ADDR, addr);
80005fd0:	fec42583          	lw	a1,-20(s0)
80005fd4:	500007b7          	lui	a5,0x50000
80005fd8:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
80005fdc:	fb9fa0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:118
    HW_set_32bit_reg(NI_TX, TX);
80005fe0:	000027b7          	lui	a5,0x2
80005fe4:	22278593          	addi	a1,a5,546 # 2222 <HEAP_SIZE-0xddde>
80005fe8:	500007b7          	lui	a5,0x50000
80005fec:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80005ff0:	fa5fa0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:119
    return;
80005ff4:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:120
}
80005ff8:	01c12083          	lw	ra,28(sp)
80005ffc:	01812403          	lw	s0,24(sp)
80006000:	02010113          	addi	sp,sp,32
80006004:	00008067          	ret

80006008 <NI_enable_irq>:
NI_enable_irq():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:124

////////////////////////////////////////////////////////////
// Enables interruptions incomming from NI
void NI_enable_irq(int which){
80006008:	fe010113          	addi	sp,sp,-32
8000600c:	00112e23          	sw	ra,28(sp)
80006010:	00812c23          	sw	s0,24(sp)
80006014:	02010413          	addi	s0,sp,32
80006018:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:125
    PLIC_EnableIRQ(NI_RX_IRQn);
8000601c:	00200513          	li	a0,2
80006020:	c11ff0ef          	jal	ra,80005c30 <PLIC_EnableIRQ>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:126
    PLIC_SetPriority(NI_RX_IRQn, 1);
80006024:	00100593          	li	a1,1
80006028:	00200513          	li	a0,2
8000602c:	cb9ff0ef          	jal	ra,80005ce4 <PLIC_SetPriority>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:127
    return;
80006030:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:128
}
80006034:	01c12083          	lw	ra,28(sp)
80006038:	01812403          	lw	s0,24(sp)
8000603c:	02010113          	addi	sp,sp,32
80006040:	00008067          	ret

80006044 <External_2_IRQHandler>:
External_2_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:139
    return;
}

////////////////////////////////////////////////////////////
// Interruption handler for the NI
uint8_t External_2_IRQHandler(void){    
80006044:	ff010113          	addi	sp,sp,-16
80006048:	00112623          	sw	ra,12(sp)
8000604c:	00812423          	sw	s0,8(sp)
80006050:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:140
    API_NI_Handler();
80006054:	114010ef          	jal	ra,80007168 <API_NI_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:142

    return 0;
80006058:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:143
}
8000605c:	00078513          	mv	a0,a5
80006060:	00c12083          	lw	ra,12(sp)
80006064:	00812403          	lw	s0,8(sp)
80006068:	01010113          	addi	sp,sp,16
8000606c:	00008067          	ret

80006070 <mySwap>:
mySwap():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:148

////////////////////////////////////////////////////////////
// https://www.techiedelight.com/implement-itoa-function-in-c/
// Function to swap two numbers
void mySwap(char *x, char *y) {
80006070:	fd010113          	addi	sp,sp,-48
80006074:	02812623          	sw	s0,44(sp)
80006078:	03010413          	addi	s0,sp,48
8000607c:	fca42e23          	sw	a0,-36(s0)
80006080:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:149
    char t = *x; *x = *y; *y = t;
80006084:	fdc42783          	lw	a5,-36(s0)
80006088:	0007c783          	lbu	a5,0(a5)
8000608c:	fef407a3          	sb	a5,-17(s0)
80006090:	fd842783          	lw	a5,-40(s0)
80006094:	00078703          	lb	a4,0(a5)
80006098:	fdc42783          	lw	a5,-36(s0)
8000609c:	00e78023          	sb	a4,0(a5)
800060a0:	fd842783          	lw	a5,-40(s0)
800060a4:	fef44703          	lbu	a4,-17(s0)
800060a8:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:150
}
800060ac:	00000013          	nop
800060b0:	02c12403          	lw	s0,44(sp)
800060b4:	03010113          	addi	sp,sp,48
800060b8:	00008067          	ret

800060bc <reverse>:
reverse():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:152
// Function to reverse `buffer[i…j]`
char* reverse(char *buffer, int i, int j){
800060bc:	fe010113          	addi	sp,sp,-32
800060c0:	00112e23          	sw	ra,28(sp)
800060c4:	00812c23          	sw	s0,24(sp)
800060c8:	02010413          	addi	s0,sp,32
800060cc:	fea42623          	sw	a0,-20(s0)
800060d0:	feb42423          	sw	a1,-24(s0)
800060d4:	fec42223          	sw	a2,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:153
    while (i < j) {
800060d8:	0400006f          	j	80006118 <reverse+0x5c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:154
        mySwap(&buffer[i++], &buffer[j--]);
800060dc:	fe842783          	lw	a5,-24(s0)
800060e0:	00178713          	addi	a4,a5,1
800060e4:	fee42423          	sw	a4,-24(s0)
800060e8:	00078713          	mv	a4,a5
800060ec:	fec42783          	lw	a5,-20(s0)
800060f0:	00e786b3          	add	a3,a5,a4
800060f4:	fe442783          	lw	a5,-28(s0)
800060f8:	fff78713          	addi	a4,a5,-1
800060fc:	fee42223          	sw	a4,-28(s0)
80006100:	00078713          	mv	a4,a5
80006104:	fec42783          	lw	a5,-20(s0)
80006108:	00e787b3          	add	a5,a5,a4
8000610c:	00078593          	mv	a1,a5
80006110:	00068513          	mv	a0,a3
80006114:	f5dff0ef          	jal	ra,80006070 <mySwap>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:153
    while (i < j) {
80006118:	fe842703          	lw	a4,-24(s0)
8000611c:	fe442783          	lw	a5,-28(s0)
80006120:	faf74ee3          	blt	a4,a5,800060dc <reverse+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:157
    }
 
    return buffer;
80006124:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:158
}
80006128:	00078513          	mv	a0,a5
8000612c:	01c12083          	lw	ra,28(sp)
80006130:	01812403          	lw	s0,24(sp)
80006134:	02010113          	addi	sp,sp,32
80006138:	00008067          	ret

8000613c <myItoa>:
myItoa():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:160
// Iterative function to implement `itoa()` function in C
char* myItoa(int value, char* buffer, int base){
8000613c:	fd010113          	addi	sp,sp,-48
80006140:	02112623          	sw	ra,44(sp)
80006144:	02812423          	sw	s0,40(sp)
80006148:	03010413          	addi	s0,sp,48
8000614c:	fca42e23          	sw	a0,-36(s0)
80006150:	fcb42c23          	sw	a1,-40(s0)
80006154:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:162
    // invalid input
    if (base < 2 || base > 32) {
80006158:	fd442703          	lw	a4,-44(s0)
8000615c:	00100793          	li	a5,1
80006160:	00e7d863          	ble	a4,a5,80006170 <myItoa+0x34>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:162 (discriminator 1)
80006164:	fd442703          	lw	a4,-44(s0)
80006168:	02000793          	li	a5,32
8000616c:	00e7d663          	ble	a4,a5,80006178 <myItoa+0x3c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:163
        return buffer;
80006170:	fd842783          	lw	a5,-40(s0)
80006174:	1540006f          	j	800062c8 <myItoa+0x18c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:167
    }
    // consider the absolute value of the number
    int n;
    if (value < 0)
80006178:	fdc42783          	lw	a5,-36(s0)
8000617c:	0007da63          	bgez	a5,80006190 <myItoa+0x54>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:168
        n = value * -1;
80006180:	fdc42783          	lw	a5,-36(s0)
80006184:	40f007b3          	neg	a5,a5
80006188:	fef42623          	sw	a5,-20(s0)
8000618c:	00c0006f          	j	80006198 <myItoa+0x5c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:170
    else 
        n = value;
80006190:	fdc42783          	lw	a5,-36(s0)
80006194:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:172

    int i = 0;
80006198:	fe042423          	sw	zero,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:173
    while (n){
8000619c:	09c0006f          	j	80006238 <myItoa+0xfc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:174
        int r = n % base;
800061a0:	fec42703          	lw	a4,-20(s0)
800061a4:	fd442783          	lw	a5,-44(s0)
800061a8:	02f767b3          	rem	a5,a4,a5
800061ac:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:176
 
        if (r >= 10) {
800061b0:	fe442703          	lw	a4,-28(s0)
800061b4:	00900793          	li	a5,9
800061b8:	02e7de63          	ble	a4,a5,800061f4 <myItoa+0xb8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:177
            buffer[i++] = 65 + (r - 10);
800061bc:	fe442783          	lw	a5,-28(s0)
800061c0:	0ff7f793          	andi	a5,a5,255
800061c4:	03778793          	addi	a5,a5,55
800061c8:	0ff7f693          	andi	a3,a5,255
800061cc:	fe842783          	lw	a5,-24(s0)
800061d0:	00178713          	addi	a4,a5,1
800061d4:	fee42423          	sw	a4,-24(s0)
800061d8:	00078713          	mv	a4,a5
800061dc:	fd842783          	lw	a5,-40(s0)
800061e0:	00e787b3          	add	a5,a5,a4
800061e4:	01869713          	slli	a4,a3,0x18
800061e8:	41875713          	srai	a4,a4,0x18
800061ec:	00e78023          	sb	a4,0(a5)
800061f0:	0380006f          	j	80006228 <myItoa+0xec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:180
        }
        else {
            buffer[i++] = 48 + r;
800061f4:	fe442783          	lw	a5,-28(s0)
800061f8:	0ff7f793          	andi	a5,a5,255
800061fc:	03078793          	addi	a5,a5,48
80006200:	0ff7f693          	andi	a3,a5,255
80006204:	fe842783          	lw	a5,-24(s0)
80006208:	00178713          	addi	a4,a5,1
8000620c:	fee42423          	sw	a4,-24(s0)
80006210:	00078713          	mv	a4,a5
80006214:	fd842783          	lw	a5,-40(s0)
80006218:	00e787b3          	add	a5,a5,a4
8000621c:	01869713          	slli	a4,a3,0x18
80006220:	41875713          	srai	a4,a4,0x18
80006224:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:183
        }
 
        n = n / base;
80006228:	fec42703          	lw	a4,-20(s0)
8000622c:	fd442783          	lw	a5,-44(s0)
80006230:	02f747b3          	div	a5,a4,a5
80006234:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:173
    while (n){
80006238:	fec42783          	lw	a5,-20(s0)
8000623c:	f60792e3          	bnez	a5,800061a0 <myItoa+0x64>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:186
    }
    // if the number is 0
    if (i == 0) {
80006240:	fe842783          	lw	a5,-24(s0)
80006244:	02079263          	bnez	a5,80006268 <myItoa+0x12c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:187
        buffer[i++] = '0';
80006248:	fe842783          	lw	a5,-24(s0)
8000624c:	00178713          	addi	a4,a5,1
80006250:	fee42423          	sw	a4,-24(s0)
80006254:	00078713          	mv	a4,a5
80006258:	fd842783          	lw	a5,-40(s0)
8000625c:	00e787b3          	add	a5,a5,a4
80006260:	03000713          	li	a4,48
80006264:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:192
    }
    // If the base is 10 and the value is negative, the resulting string
    // is preceded with a minus sign (-)
    // With any other base, value is always considered unsigned
    if (value < 0 && base == 10) {
80006268:	fdc42783          	lw	a5,-36(s0)
8000626c:	0207d863          	bgez	a5,8000629c <myItoa+0x160>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:192 (discriminator 1)
80006270:	fd442703          	lw	a4,-44(s0)
80006274:	00a00793          	li	a5,10
80006278:	02f71263          	bne	a4,a5,8000629c <myItoa+0x160>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:193
        buffer[i++] = '-';
8000627c:	fe842783          	lw	a5,-24(s0)
80006280:	00178713          	addi	a4,a5,1
80006284:	fee42423          	sw	a4,-24(s0)
80006288:	00078713          	mv	a4,a5
8000628c:	fd842783          	lw	a5,-40(s0)
80006290:	00e787b3          	add	a5,a5,a4
80006294:	02d00713          	li	a4,45
80006298:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:195
    }
    buffer[i] = '\0'; // null terminate string
8000629c:	fe842783          	lw	a5,-24(s0)
800062a0:	fd842703          	lw	a4,-40(s0)
800062a4:	00f707b3          	add	a5,a4,a5
800062a8:	00078023          	sb	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:197
    // reverse the string and return it
    return reverse(buffer, 0, i - 1);
800062ac:	fe842783          	lw	a5,-24(s0)
800062b0:	fff78793          	addi	a5,a5,-1
800062b4:	00078613          	mv	a2,a5
800062b8:	00000593          	li	a1,0
800062bc:	fd842503          	lw	a0,-40(s0)
800062c0:	dfdff0ef          	jal	ra,800060bc <reverse>
800062c4:	00050793          	mv	a5,a0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:198
}
800062c8:	00078513          	mv	a0,a5
800062cc:	02c12083          	lw	ra,44(sp)
800062d0:	02812403          	lw	s0,40(sp)
800062d4:	03010113          	addi	sp,sp,48
800062d8:	00008067          	ret

800062dc <makeAddress>:
makeAddress():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:212
    return;
}

////////////////////////////////////////////////////////////
// Returns the PE address for a giver pair of coords
unsigned int makeAddress(unsigned int x, unsigned int y) {
800062dc:	fd010113          	addi	sp,sp,-48
800062e0:	02812623          	sw	s0,44(sp)
800062e4:	03010413          	addi	s0,sp,48
800062e8:	fca42e23          	sw	a0,-36(s0)
800062ec:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:213
    unsigned int address = 0x00000000;
800062f0:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:214
    return (address | (x << 8) | y);
800062f4:	fdc42783          	lw	a5,-36(s0)
800062f8:	00879713          	slli	a4,a5,0x8
800062fc:	fec42783          	lw	a5,-20(s0)
80006300:	00f76733          	or	a4,a4,a5
80006304:	fd842783          	lw	a5,-40(s0)
80006308:	00f767b3          	or	a5,a4,a5
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:215
}
8000630c:	00078513          	mv	a0,a5
80006310:	02c12403          	lw	s0,44(sp)
80006314:	03010113          	addi	sp,sp,48
80006318:	00008067          	ret

8000631c <API_PushSendQueue>:
API_PushSendQueue():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:219

////////////////////////////////////////////////////////////
// Pushes one slot to the sending queue
void API_PushSendQueue(unsigned int type, unsigned int slot){
8000631c:	fe010113          	addi	sp,sp,-32
80006320:	00112e23          	sw	ra,28(sp)
80006324:	00812c23          	sw	s0,24(sp)
80006328:	02010413          	addi	s0,sp,32
8000632c:	fea42623          	sw	a0,-20(s0)
80006330:	feb42423          	sw	a1,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:220
    vTaskEnterCritical();
80006334:	aedfc0ef          	jal	ra,80002e20 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:221
    if(type == THERMAL){
80006338:	fec42703          	lw	a4,-20(s0)
8000633c:	404007b7          	lui	a5,0x40400
80006340:	00f71a63          	bne	a4,a5,80006354 <API_PushSendQueue+0x38>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:222
        API_PrioritySend(type, slot);
80006344:	fe842583          	lw	a1,-24(s0)
80006348:	fec42503          	lw	a0,-20(s0)
8000634c:	094000ef          	jal	ra,800063e0 <API_PrioritySend>
80006350:	0780006f          	j	800063c8 <API_PushSendQueue+0xac>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:224
    } else {
        SendingQueue[SendingQueue_front] = type | slot;
80006354:	800227b7          	lui	a5,0x80022
80006358:	f907a683          	lw	a3,-112(a5) # 80021f90 <__stack_top+0xfffdeb80>
8000635c:	fec42703          	lw	a4,-20(s0)
80006360:	fe842783          	lw	a5,-24(s0)
80006364:	00f76733          	or	a4,a4,a5
80006368:	800227b7          	lui	a5,0x80022
8000636c:	00269693          	slli	a3,a3,0x2
80006370:	d1478793          	addi	a5,a5,-748 # 80021d14 <__stack_top+0xfffde904>
80006374:	00f687b3          	add	a5,a3,a5
80006378:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:225
        printsv("SendingQueue_front: ", SendingQueue_front);
8000637c:	800227b7          	lui	a5,0x80022
80006380:	f907a783          	lw	a5,-112(a5) # 80021f90 <__stack_top+0xfffdeb80>
80006384:	00078593          	mv	a1,a5
80006388:	800087b7          	lui	a5,0x80008
8000638c:	44478513          	addi	a0,a5,1092 # 80008444 <__stack_top+0xfffc5034>
80006390:	b31ff0ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:226
        if(SendingQueue_front == (PIPE_SIZE*2)-1){
80006394:	800227b7          	lui	a5,0x80022
80006398:	f907a703          	lw	a4,-112(a5) # 80021f90 <__stack_top+0xfffdeb80>
8000639c:	00700793          	li	a5,7
800063a0:	00f71863          	bne	a4,a5,800063b0 <API_PushSendQueue+0x94>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:227
            SendingQueue_front = 0;
800063a4:	800227b7          	lui	a5,0x80022
800063a8:	f807a823          	sw	zero,-112(a5) # 80021f90 <__stack_top+0xfffdeb80>
800063ac:	0180006f          	j	800063c4 <API_PushSendQueue+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:229
        } else {
            SendingQueue_front++;
800063b0:	800227b7          	lui	a5,0x80022
800063b4:	f907a783          	lw	a5,-112(a5) # 80021f90 <__stack_top+0xfffdeb80>
800063b8:	00178713          	addi	a4,a5,1
800063bc:	800227b7          	lui	a5,0x80022
800063c0:	f8e7a823          	sw	a4,-112(a5) # 80021f90 <__stack_top+0xfffdeb80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:231
        }
        API_Try2Send();
800063c4:	194000ef          	jal	ra,80006558 <API_Try2Send>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:233
    }
    vTaskExitCritical();
800063c8:	a95fc0ef          	jal	ra,80002e5c <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:234
    return;
800063cc:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:235
}
800063d0:	01c12083          	lw	ra,28(sp)
800063d4:	01812403          	lw	s0,24(sp)
800063d8:	02010113          	addi	sp,sp,32
800063dc:	00008067          	ret

800063e0 <API_PrioritySend>:
API_PrioritySend():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:238


void API_PrioritySend(unsigned int type, unsigned int slot){
800063e0:	fb010113          	addi	sp,sp,-80
800063e4:	04112623          	sw	ra,76(sp)
800063e8:	04812423          	sw	s0,72(sp)
800063ec:	05010413          	addi	s0,sp,80
800063f0:	faa42e23          	sw	a0,-68(s0)
800063f4:	fab42c23          	sw	a1,-72(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:240
    unsigned int auxQ[PIPE_SIZE*2];
    unsigned int aux, i = 0;
800063f8:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:242 (discriminator 1)
    do{
        aux = API_PopSendQueue();
800063fc:	0bc000ef          	jal	ra,800064b8 <API_PopSendQueue>
80006400:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:243 (discriminator 1)
        auxQ[i] = aux;
80006404:	fec42783          	lw	a5,-20(s0)
80006408:	00279793          	slli	a5,a5,0x2
8000640c:	ff040713          	addi	a4,s0,-16
80006410:	00f707b3          	add	a5,a4,a5
80006414:	fe842703          	lw	a4,-24(s0)
80006418:	fce7ac23          	sw	a4,-40(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:244 (discriminator 1)
        i++;
8000641c:	fec42783          	lw	a5,-20(s0)
80006420:	00178793          	addi	a5,a5,1
80006424:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:245 (discriminator 1)
    }while(aux != EMPTY);
80006428:	fe842703          	lw	a4,-24(s0)
8000642c:	303007b7          	lui	a5,0x30300
80006430:	fcf716e3          	bne	a4,a5,800063fc <API_PrioritySend+0x1c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:246
    API_PushSendQueue(type+1, slot);
80006434:	fbc42783          	lw	a5,-68(s0)
80006438:	00178793          	addi	a5,a5,1 # 30300001 <RAM_SIZE+0x30280001>
8000643c:	fb842583          	lw	a1,-72(s0)
80006440:	00078513          	mv	a0,a5
80006444:	ed9ff0ef          	jal	ra,8000631c <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:247
    i = 0;
80006448:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:249
    do{
        aux = auxQ[i];
8000644c:	fec42783          	lw	a5,-20(s0)
80006450:	00279793          	slli	a5,a5,0x2
80006454:	ff040713          	addi	a4,s0,-16
80006458:	00f707b3          	add	a5,a4,a5
8000645c:	fd87a783          	lw	a5,-40(a5)
80006460:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:250
        if(aux != EMPTY)
80006464:	fe842703          	lw	a4,-24(s0)
80006468:	303007b7          	lui	a5,0x30300
8000646c:	02f70663          	beq	a4,a5,80006498 <API_PrioritySend+0xb8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:251
            API_PushSendQueue((aux & 0xFFFF0000), (aux & 0x0000FFFF));
80006470:	fe842703          	lw	a4,-24(s0)
80006474:	ffff07b7          	lui	a5,0xffff0
80006478:	00f776b3          	and	a3,a4,a5
8000647c:	fe842703          	lw	a4,-24(s0)
80006480:	000107b7          	lui	a5,0x10
80006484:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80006488:	00f777b3          	and	a5,a4,a5
8000648c:	00078593          	mv	a1,a5
80006490:	00068513          	mv	a0,a3
80006494:	e89ff0ef          	jal	ra,8000631c <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:252
    }while(aux != EMPTY);
80006498:	fe842703          	lw	a4,-24(s0)
8000649c:	303007b7          	lui	a5,0x30300
800064a0:	faf716e3          	bne	a4,a5,8000644c <API_PrioritySend+0x6c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:274
    //     }
    //     vTaskExitCritical();
    // } else {
    //     prints("ERROR API_PrioritySend()\n");
    // }
    return;
800064a4:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:275
}
800064a8:	04c12083          	lw	ra,76(sp)
800064ac:	04812403          	lw	s0,72(sp)
800064b0:	05010113          	addi	sp,sp,80
800064b4:	00008067          	ret

800064b8 <API_PopSendQueue>:
API_PopSendQueue():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:280


////////////////////////////////////////////////////////////
// Pushes one slot to the sending queue
unsigned int API_PopSendQueue(){
800064b8:	fe010113          	addi	sp,sp,-32
800064bc:	00112e23          	sw	ra,28(sp)
800064c0:	00812c23          	sw	s0,24(sp)
800064c4:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:282
    unsigned int element;
    vTaskEnterCritical();
800064c8:	959fc0ef          	jal	ra,80002e20 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:283
    if (SendingQueue_front == SendingQueue_tail){
800064cc:	800227b7          	lui	a5,0x80022
800064d0:	f907a703          	lw	a4,-112(a5) # 80021f90 <__stack_top+0xfffdeb80>
800064d4:	800227b7          	lui	a5,0x80022
800064d8:	d347a783          	lw	a5,-716(a5) # 80021d34 <__stack_top+0xfffde924>
800064dc:	00f71863          	bne	a4,a5,800064ec <API_PopSendQueue+0x34>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:284
        vTaskExitCritical();
800064e0:	97dfc0ef          	jal	ra,80002e5c <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:285
        return EMPTY;
800064e4:	303007b7          	lui	a5,0x30300
800064e8:	05c0006f          	j	80006544 <API_PopSendQueue+0x8c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:287
    } else {
        element = SendingQueue[SendingQueue_tail];
800064ec:	800227b7          	lui	a5,0x80022
800064f0:	d347a703          	lw	a4,-716(a5) # 80021d34 <__stack_top+0xfffde924>
800064f4:	800227b7          	lui	a5,0x80022
800064f8:	00271713          	slli	a4,a4,0x2
800064fc:	d1478793          	addi	a5,a5,-748 # 80021d14 <__stack_top+0xfffde904>
80006500:	00f707b3          	add	a5,a4,a5
80006504:	0007a783          	lw	a5,0(a5)
80006508:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:288
        if (SendingQueue_tail == (PIPE_SIZE*2)-1){
8000650c:	800227b7          	lui	a5,0x80022
80006510:	d347a703          	lw	a4,-716(a5) # 80021d34 <__stack_top+0xfffde924>
80006514:	00700793          	li	a5,7
80006518:	00f71863          	bne	a4,a5,80006528 <API_PopSendQueue+0x70>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:289
            SendingQueue_tail = 0;
8000651c:	800227b7          	lui	a5,0x80022
80006520:	d207aa23          	sw	zero,-716(a5) # 80021d34 <__stack_top+0xfffde924>
80006524:	0180006f          	j	8000653c <API_PopSendQueue+0x84>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:291
        } else {
            SendingQueue_tail++;
80006528:	800227b7          	lui	a5,0x80022
8000652c:	d347a783          	lw	a5,-716(a5) # 80021d34 <__stack_top+0xfffde924>
80006530:	00178713          	addi	a4,a5,1
80006534:	800227b7          	lui	a5,0x80022
80006538:	d2e7aa23          	sw	a4,-716(a5) # 80021d34 <__stack_top+0xfffde924>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:293
        }
        vTaskExitCritical();
8000653c:	921fc0ef          	jal	ra,80002e5c <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:294
        return element;
80006540:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:296
    }
}
80006544:	00078513          	mv	a0,a5
80006548:	01c12083          	lw	ra,28(sp)
8000654c:	01812403          	lw	s0,24(sp)
80006550:	02010113          	addi	sp,sp,32
80006554:	00008067          	ret

80006558 <API_Try2Send>:
API_Try2Send():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:300

////////////////////////////////////////////////////////////
// Try to send some packet! 
void API_Try2Send(){
80006558:	fe010113          	addi	sp,sp,-32
8000655c:	00112e23          	sw	ra,28(sp)
80006560:	00812c23          	sw	s0,24(sp)
80006564:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:304
    unsigned int toSend;
    // Try to send the packet to NI if it's available
    // Checks if the NI is available to transmitt something
    if (HW_get_32bit_reg(NI_TX) == NI_STATUS_OFF){
80006568:	500007b7          	lui	a5,0x50000
8000656c:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80006570:	a2dfa0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80006574:	00050713          	mv	a4,a0
80006578:	0ff00793          	li	a5,255
8000657c:	14f71063          	bne	a4,a5,800066bc <API_Try2Send+0x164>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:305
        vTaskEnterCritical();
80006580:	8a1fc0ef          	jal	ra,80002e20 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:306
        toSend = API_PopSendQueue();
80006584:	f35ff0ef          	jal	ra,800064b8 <API_PopSendQueue>
80006588:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:307
        if (toSend != EMPTY){
8000658c:	fec42703          	lw	a4,-20(s0)
80006590:	303007b7          	lui	a5,0x30300
80006594:	10f70263          	beq	a4,a5,80006698 <API_Try2Send+0x140>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:308
            SendingSlot = toSend;
80006598:	800227b7          	lui	a5,0x80022
8000659c:	fec42703          	lw	a4,-20(s0)
800065a0:	bee7a423          	sw	a4,-1048(a5) # 80021be8 <__stack_top+0xfffde7d8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:309
            if((toSend & 0xFFFF0000) ==  SERVICE){
800065a4:	fec42703          	lw	a4,-20(s0)
800065a8:	ffff07b7          	lui	a5,0xffff0
800065ac:	00f77733          	and	a4,a4,a5
800065b0:	101007b7          	lui	a5,0x10100
800065b4:	04f71063          	bne	a4,a5,800065f4 <API_Try2Send+0x9c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:310
                SendRaw((unsigned int)&ServicePipe[toSend & 0x0000FFFF].header);
800065b8:	fec42703          	lw	a4,-20(s0)
800065bc:	000107b7          	lui	a5,0x10
800065c0:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
800065c4:	00f77733          	and	a4,a4,a5
800065c8:	00070793          	mv	a5,a4
800065cc:	00479793          	slli	a5,a5,0x4
800065d0:	40e787b3          	sub	a5,a5,a4
800065d4:	00279793          	slli	a5,a5,0x2
800065d8:	80022737          	lui	a4,0x80022
800065dc:	bec70713          	addi	a4,a4,-1044 # 80021bec <__stack_top+0xfffde7dc>
800065e0:	00e787b3          	add	a5,a5,a4
800065e4:	00878793          	addi	a5,a5,8
800065e8:	00078513          	mv	a0,a5
800065ec:	9d1ff0ef          	jal	ra,80005fbc <SendRaw>
800065f0:	0940006f          	j	80006684 <API_Try2Send+0x12c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:312
            }
            else if((toSend & 0xFFFF0000) ==  MESSAGE){
800065f4:	fec42703          	lw	a4,-20(s0)
800065f8:	ffff07b7          	lui	a5,0xffff0
800065fc:	00f77733          	and	a4,a4,a5
80006600:	202007b7          	lui	a5,0x20200
80006604:	02f71c63          	bne	a4,a5,8000663c <API_Try2Send+0xe4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:313
                SendRaw((unsigned int)&MessagePipe[toSend & 0x0000FFFF].header);
80006608:	fec42703          	lw	a4,-20(s0)
8000660c:	000107b7          	lui	a5,0x10
80006610:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80006614:	00f77733          	and	a4,a4,a5
80006618:	24400793          	li	a5,580
8000661c:	02f70733          	mul	a4,a4,a5
80006620:	800227b7          	lui	a5,0x80022
80006624:	f9478793          	addi	a5,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
80006628:	00f707b3          	add	a5,a4,a5
8000662c:	00c78793          	addi	a5,a5,12
80006630:	00078513          	mv	a0,a5
80006634:	989ff0ef          	jal	ra,80005fbc <SendRaw>
80006638:	04c0006f          	j	80006684 <API_Try2Send+0x12c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:315
            }
            else if((toSend & 0xFFFF0000) ==  THERMAL){
8000663c:	fec42703          	lw	a4,-20(s0)
80006640:	ffff07b7          	lui	a5,0xffff0
80006644:	00f77733          	and	a4,a4,a5
80006648:	404007b7          	lui	a5,0x40400
8000664c:	02f71263          	bne	a4,a5,80006670 <API_Try2Send+0x118>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:316
                SendingSlot = THERMAL;
80006650:	800227b7          	lui	a5,0x80022
80006654:	40400737          	lui	a4,0x40400
80006658:	bee7a423          	sw	a4,-1048(a5) # 80021be8 <__stack_top+0xfffde7d8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:317
                SendRaw((unsigned int)&ThermalPacket.header);
8000665c:	800227b7          	lui	a5,0x80022
80006660:	d4478793          	addi	a5,a5,-700 # 80021d44 <__stack_top+0xfffde934>
80006664:	00078513          	mv	a0,a5
80006668:	955ff0ef          	jal	ra,80005fbc <SendRaw>
8000666c:	0180006f          	j	80006684 <API_Try2Send+0x12c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:319
            } else{
                printsv("desconhecido!! ", toSend);
80006670:	fec42783          	lw	a5,-20(s0)
80006674:	00078593          	mv	a1,a5
80006678:	800087b7          	lui	a5,0x80008
8000667c:	45c78513          	addi	a0,a5,1116 # 8000845c <__stack_top+0xfffc504c>
80006680:	841ff0ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:321
            }
            prints("API_Try2Send success!\n");
80006684:	800087b7          	lui	a5,0x80008
80006688:	46c78513          	addi	a0,a5,1132 # 8000846c <__stack_top+0xfffc505c>
8000668c:	f88ff0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:322
        vTaskExitCritical();
80006690:	fccfc0ef          	jal	ra,80002e5c <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:330
            prints("API_Try2Send failed - empty SendQueue!\n");
        }
    } else {
        prints("API_Try2Send failed - NI_TX occupied!\n");
    }
    return;
80006694:	0380006f          	j	800066cc <API_Try2Send+0x174>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:324
            HW_set_32bit_reg(NI_TX, RESET);
80006698:	000097b7          	lui	a5,0x9
8000669c:	88878593          	addi	a1,a5,-1912 # 8888 <HEAP_SIZE-0x7778>
800066a0:	500007b7          	lui	a5,0x50000
800066a4:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
800066a8:	8edfa0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:325
            prints("API_Try2Send failed - empty SendQueue!\n");
800066ac:	800087b7          	lui	a5,0x80008
800066b0:	48478513          	addi	a0,a5,1156 # 80008484 <__stack_top+0xfffc5074>
800066b4:	f60ff0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:330
    return;
800066b8:	0140006f          	j	800066cc <API_Try2Send+0x174>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:328
        prints("API_Try2Send failed - NI_TX occupied!\n");
800066bc:	800087b7          	lui	a5,0x80008
800066c0:	4ac78513          	addi	a0,a5,1196 # 800084ac <__stack_top+0xfffc509c>
800066c4:	f50ff0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:330
    return;
800066c8:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:331
}
800066cc:	01c12083          	lw	ra,28(sp)
800066d0:	01812403          	lw	s0,24(sp)
800066d4:	02010113          	addi	sp,sp,32
800066d8:	00008067          	ret

800066dc <API_AckTaskAllocation>:
API_AckTaskAllocation():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:333

void API_AckTaskAllocation(unsigned int task_id, unsigned int app_id){
800066dc:	fd010113          	addi	sp,sp,-48
800066e0:	02112623          	sw	ra,44(sp)
800066e4:	02812423          	sw	s0,40(sp)
800066e8:	03010413          	addi	s0,sp,48
800066ec:	fca42e23          	sw	a0,-36(s0)
800066f0:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:336
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
800066f4:	961fe0ef          	jal	ra,80005054 <API_GetServiceSlot>
800066f8:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:337
        if(mySlot == PIPE_FULL){
800066fc:	fec42703          	lw	a4,-20(s0)
80006700:	fdfe07b7          	lui	a5,0xfdfe0
80006704:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9c9ed>
80006708:	00f71463          	bne	a4,a5,80006710 <API_AckTaskAllocation+0x34>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:339
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
8000670c:	25d000ef          	jal	ra,80007168 <API_NI_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:341
        }
    }while(mySlot == PIPE_FULL);
80006710:	fec42703          	lw	a4,-20(s0)
80006714:	fdfe07b7          	lui	a5,0xfdfe0
80006718:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9c9ed>
8000671c:	fcf70ce3          	beq	a4,a5,800066f4 <API_AckTaskAllocation+0x18>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:343

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80006720:	800227b7          	lui	a5,0x80022
80006724:	fec42703          	lw	a4,-20(s0)
80006728:	bec78693          	addi	a3,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
8000672c:	00070793          	mv	a5,a4
80006730:	00479793          	slli	a5,a5,0x4
80006734:	40e787b3          	sub	a5,a5,a4
80006738:	00279793          	slli	a5,a5,0x2
8000673c:	00f687b3          	add	a5,a3,a5
80006740:	feff0737          	lui	a4,0xfeff0
80006744:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efacaee>
80006748:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:345

    ServicePipe[mySlot].header.header           = makeAddress(0, 0);
8000674c:	00000593          	li	a1,0
80006750:	00000513          	li	a0,0
80006754:	b89ff0ef          	jal	ra,800062dc <makeAddress>
80006758:	00050613          	mv	a2,a0
8000675c:	800227b7          	lui	a5,0x80022
80006760:	fec42703          	lw	a4,-20(s0)
80006764:	bec78693          	addi	a3,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
80006768:	00070793          	mv	a5,a4
8000676c:	00479793          	slli	a5,a5,0x4
80006770:	40e787b3          	sub	a5,a5,a4
80006774:	00279793          	slli	a5,a5,0x2
80006778:	00f687b3          	add	a5,a3,a5
8000677c:	00c7a423          	sw	a2,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:346
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80006780:	800227b7          	lui	a5,0x80022
80006784:	fec42703          	lw	a4,-20(s0)
80006788:	bec78693          	addi	a3,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
8000678c:	00070793          	mv	a5,a4
80006790:	00479793          	slli	a5,a5,0x4
80006794:	40e787b3          	sub	a5,a5,a4
80006798:	00279793          	slli	a5,a5,0x2
8000679c:	00f687b3          	add	a5,a3,a5
800067a0:	00b00713          	li	a4,11
800067a4:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:347
    ServicePipe[mySlot].header.service          = TASK_ALLOCATION_SUCCESS;
800067a8:	800227b7          	lui	a5,0x80022
800067ac:	fec42703          	lw	a4,-20(s0)
800067b0:	bec78693          	addi	a3,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
800067b4:	00070793          	mv	a5,a4
800067b8:	00479793          	slli	a5,a5,0x4
800067bc:	40e787b3          	sub	a5,a5,a4
800067c0:	00279793          	slli	a5,a5,0x2
800067c4:	00f687b3          	add	a5,a3,a5
800067c8:	03500713          	li	a4,53
800067cc:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:348
    ServicePipe[mySlot].header.task_id          = task_id;
800067d0:	800227b7          	lui	a5,0x80022
800067d4:	fec42703          	lw	a4,-20(s0)
800067d8:	bec78693          	addi	a3,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
800067dc:	00070793          	mv	a5,a4
800067e0:	00479793          	slli	a5,a5,0x4
800067e4:	40e787b3          	sub	a5,a5,a4
800067e8:	00279793          	slli	a5,a5,0x2
800067ec:	00f687b3          	add	a5,a3,a5
800067f0:	fdc42703          	lw	a4,-36(s0)
800067f4:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:349
    ServicePipe[mySlot].header.task_app_id      = app_id;
800067f8:	800227b7          	lui	a5,0x80022
800067fc:	fec42703          	lw	a4,-20(s0)
80006800:	bec78693          	addi	a3,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
80006804:	00070793          	mv	a5,a4
80006808:	00479793          	slli	a5,a5,0x4
8000680c:	40e787b3          	sub	a5,a5,a4
80006810:	00279793          	slli	a5,a5,0x2
80006814:	00f687b3          	add	a5,a3,a5
80006818:	fd842703          	lw	a4,-40(s0)
8000681c:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:351

    API_PushSendQueue(SERVICE, mySlot);
80006820:	fec42583          	lw	a1,-20(s0)
80006824:	10100537          	lui	a0,0x10100
80006828:	af5ff0ef          	jal	ra,8000631c <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:352
    return;    
8000682c:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:353
}
80006830:	02c12083          	lw	ra,44(sp)
80006834:	02812403          	lw	s0,40(sp)
80006838:	03010113          	addi	sp,sp,48
8000683c:	00008067          	ret

80006840 <API_SendMessage>:
API_SendMessage():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:355

void API_SendMessage(unsigned int addr, unsigned int taskID){
80006840:	fd010113          	addi	sp,sp,-48
80006844:	02112623          	sw	ra,44(sp)
80006848:	02812423          	sw	s0,40(sp)
8000684c:	03010413          	addi	s0,sp,48
80006850:	fca42e23          	sw	a0,-36(s0)
80006854:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:361
    unsigned int mySlot;
    unsigned int taskSlot;
    unsigned int i;
    Message *theMessage;
    do{
        mySlot = API_GetMessageSlot();
80006858:	ea0fe0ef          	jal	ra,80004ef8 <API_GetMessageSlot>
8000685c:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:362
        if(mySlot == PIPE_FULL){
80006860:	fe842703          	lw	a4,-24(s0)
80006864:	fdfe07b7          	lui	a5,0xfdfe0
80006868:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9c9ed>
8000686c:	00f71463          	bne	a4,a5,80006874 <API_SendMessage+0x34>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:364
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80006870:	0f9000ef          	jal	ra,80007168 <API_NI_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:366
        }
    }while(mySlot == PIPE_FULL);
80006874:	fe842703          	lw	a4,-24(s0)
80006878:	fdfe07b7          	lui	a5,0xfdfe0
8000687c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9c9ed>
80006880:	fcf70ce3          	beq	a4,a5,80006858 <API_SendMessage+0x18>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:368
    
    theMessage = addr;
80006884:	fdc42783          	lw	a5,-36(s0)
80006888:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:370

    taskSlot = API_GetCurrentTaskSlot();
8000688c:	d01fd0ef          	jal	ra,8000458c <API_GetCurrentTaskSlot>
80006890:	fea42023          	sw	a0,-32(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:371
    printsv("taskSlot: ", taskSlot);
80006894:	fe042783          	lw	a5,-32(s0)
80006898:	00078593          	mv	a1,a5
8000689c:	800087b7          	lui	a5,0x80008
800068a0:	4d478513          	addi	a0,a5,1236 # 800084d4 <__stack_top+0xfffc50c4>
800068a4:	e1cff0ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:372
    printsvsv("Adding a msg to task ", taskID, " in the PIPE slot ", mySlot);
800068a8:	fd842703          	lw	a4,-40(s0)
800068ac:	fe842783          	lw	a5,-24(s0)
800068b0:	00078693          	mv	a3,a5
800068b4:	800087b7          	lui	a5,0x80008
800068b8:	4e078613          	addi	a2,a5,1248 # 800084e0 <__stack_top+0xfffc50d0>
800068bc:	00070593          	mv	a1,a4
800068c0:	800087b7          	lui	a5,0x80008
800068c4:	4f478513          	addi	a0,a5,1268 # 800084f4 <__stack_top+0xfffc50e4>
800068c8:	e40ff0ef          	jal	ra,80005f08 <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:373
    printsv("from app: ", TaskList[taskSlot].AppID);
800068cc:	800237b7          	lui	a5,0x80023
800068d0:	fe042703          	lw	a4,-32(s0)
800068d4:	0e478693          	addi	a3,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
800068d8:	00070793          	mv	a5,a4
800068dc:	00579793          	slli	a5,a5,0x5
800068e0:	00e787b3          	add	a5,a5,a4
800068e4:	00279793          	slli	a5,a5,0x2
800068e8:	00f687b3          	add	a5,a3,a5
800068ec:	0147a783          	lw	a5,20(a5)
800068f0:	00078593          	mv	a1,a5
800068f4:	800087b7          	lui	a5,0x80008
800068f8:	50c78513          	addi	a0,a5,1292 # 8000850c <__stack_top+0xfffc50fc>
800068fc:	dc4ff0ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:374
    MessagePipe[mySlot].holder = taskSlot;
80006900:	800227b7          	lui	a5,0x80022
80006904:	fe842683          	lw	a3,-24(s0)
80006908:	f9478713          	addi	a4,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
8000690c:	24400793          	li	a5,580
80006910:	02f687b3          	mul	a5,a3,a5
80006914:	00f707b3          	add	a5,a4,a5
80006918:	fe042703          	lw	a4,-32(s0)
8000691c:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:376

    MessagePipe[mySlot].header.header           = TaskList[taskSlot].TasksMap[taskID];
80006920:	800236b7          	lui	a3,0x80023
80006924:	fe042703          	lw	a4,-32(s0)
80006928:	00070793          	mv	a5,a4
8000692c:	00579793          	slli	a5,a5,0x5
80006930:	00e787b3          	add	a5,a5,a4
80006934:	fd842703          	lw	a4,-40(s0)
80006938:	00e787b3          	add	a5,a5,a4
8000693c:	01478793          	addi	a5,a5,20
80006940:	0e468713          	addi	a4,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
80006944:	00279793          	slli	a5,a5,0x2
80006948:	00f707b3          	add	a5,a4,a5
8000694c:	00c7a703          	lw	a4,12(a5)
80006950:	800227b7          	lui	a5,0x80022
80006954:	fe842603          	lw	a2,-24(s0)
80006958:	f9478693          	addi	a3,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
8000695c:	24400793          	li	a5,580
80006960:	02f607b3          	mul	a5,a2,a5
80006964:	00f687b3          	add	a5,a3,a5
80006968:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:377
    MessagePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE + theMessage->length + 1;
8000696c:	fe442783          	lw	a5,-28(s0)
80006970:	0007a783          	lw	a5,0(a5)
80006974:	00c78713          	addi	a4,a5,12
80006978:	800227b7          	lui	a5,0x80022
8000697c:	fe842603          	lw	a2,-24(s0)
80006980:	f9478693          	addi	a3,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
80006984:	24400793          	li	a5,580
80006988:	02f607b3          	mul	a5,a2,a5
8000698c:	00f687b3          	add	a5,a3,a5
80006990:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:378
    MessagePipe[mySlot].header.service          = MESSAGE_DELIVERY;
80006994:	800227b7          	lui	a5,0x80022
80006998:	fe842683          	lw	a3,-24(s0)
8000699c:	f9478713          	addi	a4,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
800069a0:	24400793          	li	a5,580
800069a4:	02f687b3          	mul	a5,a3,a5
800069a8:	00f707b3          	add	a5,a4,a5
800069ac:	02000713          	li	a4,32
800069b0:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:379
    MessagePipe[mySlot].header.application_id   = TaskList[taskSlot].AppID;
800069b4:	800237b7          	lui	a5,0x80023
800069b8:	fe042703          	lw	a4,-32(s0)
800069bc:	0e478693          	addi	a3,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
800069c0:	00070793          	mv	a5,a4
800069c4:	00579793          	slli	a5,a5,0x5
800069c8:	00e787b3          	add	a5,a5,a4
800069cc:	00279793          	slli	a5,a5,0x2
800069d0:	00f687b3          	add	a5,a3,a5
800069d4:	0147a703          	lw	a4,20(a5)
800069d8:	800227b7          	lui	a5,0x80022
800069dc:	fe842603          	lw	a2,-24(s0)
800069e0:	f9478693          	addi	a3,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
800069e4:	24400793          	li	a5,580
800069e8:	02f607b3          	mul	a5,a2,a5
800069ec:	00f687b3          	add	a5,a3,a5
800069f0:	00e7ac23          	sw	a4,24(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:380
    MessagePipe[mySlot].header.producer_task    = TaskList[taskSlot].TaskID;
800069f4:	800236b7          	lui	a3,0x80023
800069f8:	fe042703          	lw	a4,-32(s0)
800069fc:	00070793          	mv	a5,a4
80006a00:	00579793          	slli	a5,a5,0x5
80006a04:	00e787b3          	add	a5,a5,a4
80006a08:	00279793          	slli	a5,a5,0x2
80006a0c:	0e468713          	addi	a4,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
80006a10:	00e787b3          	add	a5,a5,a4
80006a14:	0107a703          	lw	a4,16(a5)
80006a18:	800227b7          	lui	a5,0x80022
80006a1c:	fe842603          	lw	a2,-24(s0)
80006a20:	f9478693          	addi	a3,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
80006a24:	24400793          	li	a5,580
80006a28:	02f607b3          	mul	a5,a2,a5
80006a2c:	00f687b3          	add	a5,a3,a5
80006a30:	00e7ae23          	sw	a4,28(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:381
    MessagePipe[mySlot].header.destination_task = taskID;
80006a34:	800227b7          	lui	a5,0x80022
80006a38:	fe842683          	lw	a3,-24(s0)
80006a3c:	f9478713          	addi	a4,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
80006a40:	24400793          	li	a5,580
80006a44:	02f687b3          	mul	a5,a3,a5
80006a48:	00f707b3          	add	a5,a4,a5
80006a4c:	fd842703          	lw	a4,-40(s0)
80006a50:	02e7a023          	sw	a4,32(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:382
    MessagePipe[mySlot].msg.length              = theMessage->length;
80006a54:	fe442783          	lw	a5,-28(s0)
80006a58:	0007a703          	lw	a4,0(a5)
80006a5c:	800227b7          	lui	a5,0x80022
80006a60:	fe842603          	lw	a2,-24(s0)
80006a64:	24400693          	li	a3,580
80006a68:	02d606b3          	mul	a3,a2,a3
80006a6c:	f9478793          	addi	a5,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
80006a70:	00f687b3          	add	a5,a3,a5
80006a74:	04e7a023          	sw	a4,64(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:383
    for (i = 0; i < theMessage->length; i++){
80006a78:	fe042623          	sw	zero,-20(s0)
80006a7c:	05c0006f          	j	80006ad8 <API_SendMessage+0x298>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:384 (discriminator 3)
        MessagePipe[mySlot].msg.msg[i]          = theMessage->msg[i];
80006a80:	fe442703          	lw	a4,-28(s0)
80006a84:	fec42783          	lw	a5,-20(s0)
80006a88:	00279793          	slli	a5,a5,0x2
80006a8c:	00f707b3          	add	a5,a4,a5
80006a90:	0047a683          	lw	a3,4(a5)
80006a94:	80022637          	lui	a2,0x80022
80006a98:	fe842703          	lw	a4,-24(s0)
80006a9c:	00070793          	mv	a5,a4
80006aa0:	00379793          	slli	a5,a5,0x3
80006aa4:	00e787b3          	add	a5,a5,a4
80006aa8:	00479793          	slli	a5,a5,0x4
80006aac:	00e787b3          	add	a5,a5,a4
80006ab0:	fec42703          	lw	a4,-20(s0)
80006ab4:	00e787b3          	add	a5,a5,a4
80006ab8:	01078793          	addi	a5,a5,16
80006abc:	f9460713          	addi	a4,a2,-108 # 80021f94 <__stack_top+0xfffdeb84>
80006ac0:	00279793          	slli	a5,a5,0x2
80006ac4:	00f707b3          	add	a5,a4,a5
80006ac8:	00d7a223          	sw	a3,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:383 (discriminator 3)
    for (i = 0; i < theMessage->length; i++){
80006acc:	fec42783          	lw	a5,-20(s0)
80006ad0:	00178793          	addi	a5,a5,1
80006ad4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:383 (discriminator 1)
80006ad8:	fe442783          	lw	a5,-28(s0)
80006adc:	0007a783          	lw	a5,0(a5)
80006ae0:	fec42703          	lw	a4,-20(s0)
80006ae4:	f8f76ee3          	bltu	a4,a5,80006a80 <API_SendMessage+0x240>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:387
    }
    
    if (TaskList[taskSlot].PendingReq[taskID] == TRUE){
80006ae8:	800236b7          	lui	a3,0x80023
80006aec:	fe042703          	lw	a4,-32(s0)
80006af0:	00070793          	mv	a5,a4
80006af4:	00579793          	slli	a5,a5,0x5
80006af8:	00e787b3          	add	a5,a5,a4
80006afc:	fd842703          	lw	a4,-40(s0)
80006b00:	00e787b3          	add	a5,a5,a4
80006b04:	00c78793          	addi	a5,a5,12
80006b08:	00279713          	slli	a4,a5,0x2
80006b0c:	0e468793          	addi	a5,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
80006b10:	00f707b3          	add	a5,a4,a5
80006b14:	0007a703          	lw	a4,0(a5)
80006b18:	00100793          	li	a5,1
80006b1c:	04f71863          	bne	a4,a5,80006b6c <API_SendMessage+0x32c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:388
        prints(">>>>>Achei aqui no pending!\n");
80006b20:	800087b7          	lui	a5,0x80008
80006b24:	51878513          	addi	a0,a5,1304 # 80008518 <__stack_top+0xfffc5108>
80006b28:	aecff0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:389
        TaskList[taskSlot].PendingReq[taskID] = FALSE;
80006b2c:	800236b7          	lui	a3,0x80023
80006b30:	fe042703          	lw	a4,-32(s0)
80006b34:	00070793          	mv	a5,a4
80006b38:	00579793          	slli	a5,a5,0x5
80006b3c:	00e787b3          	add	a5,a5,a4
80006b40:	fd842703          	lw	a4,-40(s0)
80006b44:	00e787b3          	add	a5,a5,a4
80006b48:	00c78793          	addi	a5,a5,12
80006b4c:	00279713          	slli	a4,a5,0x2
80006b50:	0e468793          	addi	a5,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
80006b54:	00f707b3          	add	a5,a4,a5
80006b58:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:390
        API_PushSendQueue(MESSAGE, mySlot);
80006b5c:	fe842583          	lw	a1,-24(s0)
80006b60:	20200537          	lui	a0,0x20200
80006b64:	fb8ff0ef          	jal	ra,8000631c <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:392
    }
    return;
80006b68:	00000013          	nop
80006b6c:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:393
}
80006b70:	02c12083          	lw	ra,44(sp)
80006b74:	02812403          	lw	s0,40(sp)
80006b78:	03010113          	addi	sp,sp,48
80006b7c:	00008067          	ret

80006b80 <API_SendFinishTask>:
API_SendFinishTask():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:395

void API_SendFinishTask(unsigned int task_id, unsigned int app_id){
80006b80:	fd010113          	addi	sp,sp,-48
80006b84:	02112623          	sw	ra,44(sp)
80006b88:	02812423          	sw	s0,40(sp)
80006b8c:	03010413          	addi	s0,sp,48
80006b90:	fca42e23          	sw	a0,-36(s0)
80006b94:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:398
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80006b98:	cbcfe0ef          	jal	ra,80005054 <API_GetServiceSlot>
80006b9c:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:399
        if(mySlot == PIPE_FULL){
80006ba0:	fec42703          	lw	a4,-20(s0)
80006ba4:	fdfe07b7          	lui	a5,0xfdfe0
80006ba8:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9c9ed>
80006bac:	00f71463          	bne	a4,a5,80006bb4 <API_SendFinishTask+0x34>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:401
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80006bb0:	5b8000ef          	jal	ra,80007168 <API_NI_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:403
        }
    }while(mySlot == PIPE_FULL);
80006bb4:	fec42703          	lw	a4,-20(s0)
80006bb8:	fdfe07b7          	lui	a5,0xfdfe0
80006bbc:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9c9ed>
80006bc0:	fcf70ce3          	beq	a4,a5,80006b98 <API_SendFinishTask+0x18>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:405

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80006bc4:	800227b7          	lui	a5,0x80022
80006bc8:	fec42703          	lw	a4,-20(s0)
80006bcc:	bec78693          	addi	a3,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
80006bd0:	00070793          	mv	a5,a4
80006bd4:	00479793          	slli	a5,a5,0x4
80006bd8:	40e787b3          	sub	a5,a5,a4
80006bdc:	00279793          	slli	a5,a5,0x2
80006be0:	00f687b3          	add	a5,a3,a5
80006be4:	feff0737          	lui	a4,0xfeff0
80006be8:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efacaee>
80006bec:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:407

    ServicePipe[mySlot].header.header           = makeAddress(0, 0);
80006bf0:	00000593          	li	a1,0
80006bf4:	00000513          	li	a0,0
80006bf8:	ee4ff0ef          	jal	ra,800062dc <makeAddress>
80006bfc:	00050613          	mv	a2,a0
80006c00:	800227b7          	lui	a5,0x80022
80006c04:	fec42703          	lw	a4,-20(s0)
80006c08:	bec78693          	addi	a3,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
80006c0c:	00070793          	mv	a5,a4
80006c10:	00479793          	slli	a5,a5,0x4
80006c14:	40e787b3          	sub	a5,a5,a4
80006c18:	00279793          	slli	a5,a5,0x2
80006c1c:	00f687b3          	add	a5,a3,a5
80006c20:	00c7a423          	sw	a2,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:408
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80006c24:	800227b7          	lui	a5,0x80022
80006c28:	fec42703          	lw	a4,-20(s0)
80006c2c:	bec78693          	addi	a3,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
80006c30:	00070793          	mv	a5,a4
80006c34:	00479793          	slli	a5,a5,0x4
80006c38:	40e787b3          	sub	a5,a5,a4
80006c3c:	00279793          	slli	a5,a5,0x2
80006c40:	00f687b3          	add	a5,a3,a5
80006c44:	00b00713          	li	a4,11
80006c48:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:409
    ServicePipe[mySlot].header.service          = TASK_FINISH;
80006c4c:	800227b7          	lui	a5,0x80022
80006c50:	fec42703          	lw	a4,-20(s0)
80006c54:	bec78693          	addi	a3,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
80006c58:	00070793          	mv	a5,a4
80006c5c:	00479793          	slli	a5,a5,0x4
80006c60:	40e787b3          	sub	a5,a5,a4
80006c64:	00279793          	slli	a5,a5,0x2
80006c68:	00f687b3          	add	a5,a3,a5
80006c6c:	50000713          	li	a4,1280
80006c70:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:410
    ServicePipe[mySlot].header.task_id          = task_id;
80006c74:	800227b7          	lui	a5,0x80022
80006c78:	fec42703          	lw	a4,-20(s0)
80006c7c:	bec78693          	addi	a3,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
80006c80:	00070793          	mv	a5,a4
80006c84:	00479793          	slli	a5,a5,0x4
80006c88:	40e787b3          	sub	a5,a5,a4
80006c8c:	00279793          	slli	a5,a5,0x2
80006c90:	00f687b3          	add	a5,a3,a5
80006c94:	fdc42703          	lw	a4,-36(s0)
80006c98:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:411
    ServicePipe[mySlot].header.task_app_id      = app_id;
80006c9c:	800227b7          	lui	a5,0x80022
80006ca0:	fec42703          	lw	a4,-20(s0)
80006ca4:	bec78693          	addi	a3,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
80006ca8:	00070793          	mv	a5,a4
80006cac:	00479793          	slli	a5,a5,0x4
80006cb0:	40e787b3          	sub	a5,a5,a4
80006cb4:	00279793          	slli	a5,a5,0x2
80006cb8:	00f687b3          	add	a5,a3,a5
80006cbc:	fd842703          	lw	a4,-40(s0)
80006cc0:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:412
    ServicePipe[mySlot].header.task_dest_addr   = ProcessorAddr;
80006cc4:	800237b7          	lui	a5,0x80023
80006cc8:	40c7a683          	lw	a3,1036(a5) # 8002340c <__stack_top+0xfffdfffc>
80006ccc:	800227b7          	lui	a5,0x80022
80006cd0:	fec42703          	lw	a4,-20(s0)
80006cd4:	bec78613          	addi	a2,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
80006cd8:	00070793          	mv	a5,a4
80006cdc:	00479793          	slli	a5,a5,0x4
80006ce0:	40e787b3          	sub	a5,a5,a4
80006ce4:	00279793          	slli	a5,a5,0x2
80006ce8:	00f607b3          	add	a5,a2,a5
80006cec:	02d7ac23          	sw	a3,56(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:413
    API_PushSendQueue(SERVICE, mySlot);
80006cf0:	fec42583          	lw	a1,-20(s0)
80006cf4:	10100537          	lui	a0,0x10100
80006cf8:	e24ff0ef          	jal	ra,8000631c <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:414
    return;    
80006cfc:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:415
}
80006d00:	02c12083          	lw	ra,44(sp)
80006d04:	02812403          	lw	s0,40(sp)
80006d08:	03010113          	addi	sp,sp,48
80006d0c:	00008067          	ret

80006d10 <API_SendMessageReq>:
API_SendMessageReq():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:417

void API_SendMessageReq(unsigned int addr, unsigned int taskID){
80006d10:	fd010113          	addi	sp,sp,-48
80006d14:	02112623          	sw	ra,44(sp)
80006d18:	02812423          	sw	s0,40(sp)
80006d1c:	03010413          	addi	s0,sp,48
80006d20:	fca42e23          	sw	a0,-36(s0)
80006d24:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:420
    unsigned int taskSlot;
    unsigned int mySlot;
    volatile unsigned int idle = 0;
80006d28:	fe042223          	sw	zero,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:422
    // Update task info
    taskSlot = API_GetCurrentTaskSlot();
80006d2c:	861fd0ef          	jal	ra,8000458c <API_GetCurrentTaskSlot>
80006d30:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:423
    TaskList[taskSlot].waitingMsg = TRUE;
80006d34:	800237b7          	lui	a5,0x80023
80006d38:	fec42703          	lw	a4,-20(s0)
80006d3c:	0e478693          	addi	a3,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
80006d40:	00070793          	mv	a5,a4
80006d44:	00579793          	slli	a5,a5,0x5
80006d48:	00e787b3          	add	a5,a5,a4
80006d4c:	00279793          	slli	a5,a5,0x2
80006d50:	00f687b3          	add	a5,a3,a5
80006d54:	00100713          	li	a4,1
80006d58:	00e7ae23          	sw	a4,28(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:424
    TaskList[taskSlot].MsgToReceive = addr;
80006d5c:	800236b7          	lui	a3,0x80023
80006d60:	fec42703          	lw	a4,-20(s0)
80006d64:	00070793          	mv	a5,a4
80006d68:	00579793          	slli	a5,a5,0x5
80006d6c:	00e787b3          	add	a5,a5,a4
80006d70:	00279793          	slli	a5,a5,0x2
80006d74:	0e468713          	addi	a4,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
80006d78:	00e787b3          	add	a5,a5,a4
80006d7c:	fdc42703          	lw	a4,-36(s0)
80006d80:	02e7a023          	sw	a4,32(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:429
    //printsv("API_SendMessageReq addr: ", addr);

    // Sends the message request
    do{
        mySlot = API_GetServiceSlot();
80006d84:	ad0fe0ef          	jal	ra,80005054 <API_GetServiceSlot>
80006d88:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:430
        if(mySlot == PIPE_FULL){
80006d8c:	fe842703          	lw	a4,-24(s0)
80006d90:	fdfe07b7          	lui	a5,0xfdfe0
80006d94:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9c9ed>
80006d98:	00f71463          	bne	a4,a5,80006da0 <API_SendMessageReq+0x90>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:432
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80006d9c:	3cc000ef          	jal	ra,80007168 <API_NI_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:434
        }
    }while(mySlot == PIPE_FULL);
80006da0:	fe842703          	lw	a4,-24(s0)
80006da4:	fdfe07b7          	lui	a5,0xfdfe0
80006da8:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9c9ed>
80006dac:	fcf70ce3          	beq	a4,a5,80006d84 <API_SendMessageReq+0x74>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:436

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80006db0:	800227b7          	lui	a5,0x80022
80006db4:	fe842703          	lw	a4,-24(s0)
80006db8:	bec78693          	addi	a3,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
80006dbc:	00070793          	mv	a5,a4
80006dc0:	00479793          	slli	a5,a5,0x4
80006dc4:	40e787b3          	sub	a5,a5,a4
80006dc8:	00279793          	slli	a5,a5,0x2
80006dcc:	00f687b3          	add	a5,a3,a5
80006dd0:	feff0737          	lui	a4,0xfeff0
80006dd4:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efacaee>
80006dd8:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:438

    ServicePipe[mySlot].header.header           = TaskList[taskSlot].TasksMap[taskID];
80006ddc:	800236b7          	lui	a3,0x80023
80006de0:	fec42703          	lw	a4,-20(s0)
80006de4:	00070793          	mv	a5,a4
80006de8:	00579793          	slli	a5,a5,0x5
80006dec:	00e787b3          	add	a5,a5,a4
80006df0:	fd842703          	lw	a4,-40(s0)
80006df4:	00e787b3          	add	a5,a5,a4
80006df8:	01478793          	addi	a5,a5,20
80006dfc:	0e468713          	addi	a4,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
80006e00:	00279793          	slli	a5,a5,0x2
80006e04:	00f707b3          	add	a5,a4,a5
80006e08:	00c7a683          	lw	a3,12(a5)
80006e0c:	800227b7          	lui	a5,0x80022
80006e10:	fe842703          	lw	a4,-24(s0)
80006e14:	bec78613          	addi	a2,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
80006e18:	00070793          	mv	a5,a4
80006e1c:	00479793          	slli	a5,a5,0x4
80006e20:	40e787b3          	sub	a5,a5,a4
80006e24:	00279793          	slli	a5,a5,0x2
80006e28:	00f607b3          	add	a5,a2,a5
80006e2c:	00d7a423          	sw	a3,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:439
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80006e30:	800227b7          	lui	a5,0x80022
80006e34:	fe842703          	lw	a4,-24(s0)
80006e38:	bec78693          	addi	a3,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
80006e3c:	00070793          	mv	a5,a4
80006e40:	00479793          	slli	a5,a5,0x4
80006e44:	40e787b3          	sub	a5,a5,a4
80006e48:	00279793          	slli	a5,a5,0x2
80006e4c:	00f687b3          	add	a5,a3,a5
80006e50:	00b00713          	li	a4,11
80006e54:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:440
    ServicePipe[mySlot].header.service          = MESSAGE_REQUEST;
80006e58:	800227b7          	lui	a5,0x80022
80006e5c:	fe842703          	lw	a4,-24(s0)
80006e60:	bec78693          	addi	a3,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
80006e64:	00070793          	mv	a5,a4
80006e68:	00479793          	slli	a5,a5,0x4
80006e6c:	40e787b3          	sub	a5,a5,a4
80006e70:	00279793          	slli	a5,a5,0x2
80006e74:	00f687b3          	add	a5,a3,a5
80006e78:	01000713          	li	a4,16
80006e7c:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:441
    ServicePipe[mySlot].header.task_id          = TaskList[taskSlot].TaskID;
80006e80:	800236b7          	lui	a3,0x80023
80006e84:	fec42703          	lw	a4,-20(s0)
80006e88:	00070793          	mv	a5,a4
80006e8c:	00579793          	slli	a5,a5,0x5
80006e90:	00e787b3          	add	a5,a5,a4
80006e94:	00279793          	slli	a5,a5,0x2
80006e98:	0e468713          	addi	a4,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
80006e9c:	00e787b3          	add	a5,a5,a4
80006ea0:	0107a683          	lw	a3,16(a5)
80006ea4:	800227b7          	lui	a5,0x80022
80006ea8:	fe842703          	lw	a4,-24(s0)
80006eac:	bec78613          	addi	a2,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
80006eb0:	00070793          	mv	a5,a4
80006eb4:	00479793          	slli	a5,a5,0x4
80006eb8:	40e787b3          	sub	a5,a5,a4
80006ebc:	00279793          	slli	a5,a5,0x2
80006ec0:	00f607b3          	add	a5,a2,a5
80006ec4:	00d7aa23          	sw	a3,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:442
    ServicePipe[mySlot].header.task_app_id      = TaskList[taskSlot].AppID;
80006ec8:	800237b7          	lui	a5,0x80023
80006ecc:	fec42703          	lw	a4,-20(s0)
80006ed0:	0e478693          	addi	a3,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
80006ed4:	00070793          	mv	a5,a4
80006ed8:	00579793          	slli	a5,a5,0x5
80006edc:	00e787b3          	add	a5,a5,a4
80006ee0:	00279793          	slli	a5,a5,0x2
80006ee4:	00f687b3          	add	a5,a3,a5
80006ee8:	0147a683          	lw	a3,20(a5)
80006eec:	800227b7          	lui	a5,0x80022
80006ef0:	fe842703          	lw	a4,-24(s0)
80006ef4:	bec78613          	addi	a2,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
80006ef8:	00070793          	mv	a5,a4
80006efc:	00479793          	slli	a5,a5,0x4
80006f00:	40e787b3          	sub	a5,a5,a4
80006f04:	00279793          	slli	a5,a5,0x2
80006f08:	00f607b3          	add	a5,a2,a5
80006f0c:	02d7a223          	sw	a3,36(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:443
    ServicePipe[mySlot].header.producer_task_id = taskID;
80006f10:	800227b7          	lui	a5,0x80022
80006f14:	fe842703          	lw	a4,-24(s0)
80006f18:	bec78693          	addi	a3,a5,-1044 # 80021bec <__stack_top+0xfffde7dc>
80006f1c:	00070793          	mv	a5,a4
80006f20:	00479793          	slli	a5,a5,0x4
80006f24:	40e787b3          	sub	a5,a5,a4
80006f28:	00279793          	slli	a5,a5,0x2
80006f2c:	00f687b3          	add	a5,a3,a5
80006f30:	fd842703          	lw	a4,-40(s0)
80006f34:	00e7ae23          	sw	a4,28(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:445

    prints("Esperando Mensagem!\n");
80006f38:	800087b7          	lui	a5,0x80008
80006f3c:	53878513          	addi	a0,a5,1336 # 80008538 <__stack_top+0xfffc5128>
80006f40:	ed5fe0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:447

    API_PushSendQueue(SERVICE, mySlot);
80006f44:	fe842583          	lw	a1,-24(s0)
80006f48:	10100537          	lui	a0,0x10100
80006f4c:	bd0ff0ef          	jal	ra,8000631c <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:449
    
    API_setFreqScale(100);
80006f50:	06400513          	li	a0,100
80006f54:	be8fe0ef          	jal	ra,8000533c <API_setFreqScale>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:451
    // Bloquear a tarefa!
    while(TaskList[taskSlot].waitingMsg == TRUE){ 
80006f58:	00c0006f          	j	80006f64 <API_SendMessageReq+0x254>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:458
        //     API_setFreqIdle();
        //     API_applyFreqScale();
        //     idle = 1;
        // }
        //printsv("esperando", mySlot);
        vTaskDelay(1);
80006f5c:	00100513          	li	a0,1
80006f60:	ab0fb0ef          	jal	ra,80002210 <vTaskDelay>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:451
    while(TaskList[taskSlot].waitingMsg == TRUE){ 
80006f64:	800237b7          	lui	a5,0x80023
80006f68:	fec42703          	lw	a4,-20(s0)
80006f6c:	0e478693          	addi	a3,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
80006f70:	00070793          	mv	a5,a4
80006f74:	00579793          	slli	a5,a5,0x5
80006f78:	00e787b3          	add	a5,a5,a4
80006f7c:	00279793          	slli	a5,a5,0x2
80006f80:	00f687b3          	add	a5,a3,a5
80006f84:	01c7a703          	lw	a4,28(a5)
80006f88:	00100793          	li	a5,1
80006f8c:	fcf708e3          	beq	a4,a5,80006f5c <API_SendMessageReq+0x24c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:463
        //mySlot++;

    }
    //vTaskSuspend(TaskList[taskSlot].TaskHandler);
    API_setFreqScale(1000);
80006f90:	3e800513          	li	a0,1000
80006f94:	ba8fe0ef          	jal	ra,8000533c <API_setFreqScale>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:465

    prints("Mensagem Recebida!\n");
80006f98:	800087b7          	lui	a5,0x80008
80006f9c:	55078513          	addi	a0,a5,1360 # 80008550 <__stack_top+0xfffc5140>
80006fa0:	e75fe0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:466
    return;
80006fa4:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:467
}
80006fa8:	02c12083          	lw	ra,44(sp)
80006fac:	02812403          	lw	s0,40(sp)
80006fb0:	03010113          	addi	sp,sp,48
80006fb4:	00008067          	ret

80006fb8 <API_CheckMessagePipe>:
API_CheckMessagePipe():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:469

unsigned int API_CheckMessagePipe(unsigned int requester_task_id, unsigned int task_app_id){
80006fb8:	fd010113          	addi	sp,sp,-48
80006fbc:	02812623          	sw	s0,44(sp)
80006fc0:	03010413          	addi	s0,sp,48
80006fc4:	fca42e23          	sw	a0,-36(s0)
80006fc8:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:471
    unsigned int i;
    unsigned int sel = ERRO;
80006fcc:	fff00793          	li	a5,-1
80006fd0:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:472
    unsigned int smallID = 268435455;
80006fd4:	100007b7          	lui	a5,0x10000
80006fd8:	fff78793          	addi	a5,a5,-1 # fffffff <RAM_SIZE+0xff7ffff>
80006fdc:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:474
    //vTaskEnterCritical();
    for (i = 0; i < PIPE_SIZE; i++){
80006fe0:	fe042623          	sw	zero,-20(s0)
80006fe4:	0c80006f          	j	800070ac <API_CheckMessagePipe+0xf4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:476
        //printsv("testing ", i);
        if(MessagePipe[i].status == PIPE_OCCUPIED){
80006fe8:	800227b7          	lui	a5,0x80022
80006fec:	fec42683          	lw	a3,-20(s0)
80006ff0:	24400713          	li	a4,580
80006ff4:	02e68733          	mul	a4,a3,a4
80006ff8:	f9478793          	addi	a5,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
80006ffc:	00f707b3          	add	a5,a4,a5
80007000:	0007a703          	lw	a4,0(a5)
80007004:	00100793          	li	a5,1
80007008:	08f71c63          	bne	a4,a5,800070a0 <API_CheckMessagePipe+0xe8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:477
            if(MessagePipe[i].header.application_id == task_app_id){
8000700c:	800227b7          	lui	a5,0x80022
80007010:	fec42683          	lw	a3,-20(s0)
80007014:	f9478713          	addi	a4,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
80007018:	24400793          	li	a5,580
8000701c:	02f687b3          	mul	a5,a3,a5
80007020:	00f707b3          	add	a5,a4,a5
80007024:	0187a783          	lw	a5,24(a5)
80007028:	fd842703          	lw	a4,-40(s0)
8000702c:	06f71a63          	bne	a4,a5,800070a0 <API_CheckMessagePipe+0xe8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:478
                if(MessagePipe[i].header.destination_task == requester_task_id){
80007030:	800227b7          	lui	a5,0x80022
80007034:	fec42683          	lw	a3,-20(s0)
80007038:	f9478713          	addi	a4,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
8000703c:	24400793          	li	a5,580
80007040:	02f687b3          	mul	a5,a3,a5
80007044:	00f707b3          	add	a5,a4,a5
80007048:	0207a783          	lw	a5,32(a5)
8000704c:	fdc42703          	lw	a4,-36(s0)
80007050:	04f71863          	bne	a4,a5,800070a0 <API_CheckMessagePipe+0xe8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:479
                    if(MessagePipe[i].msgID < smallID){
80007054:	800227b7          	lui	a5,0x80022
80007058:	fec42683          	lw	a3,-20(s0)
8000705c:	f9478713          	addi	a4,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
80007060:	24400793          	li	a5,580
80007064:	02f687b3          	mul	a5,a3,a5
80007068:	00f707b3          	add	a5,a4,a5
8000706c:	0087a783          	lw	a5,8(a5)
80007070:	fe442703          	lw	a4,-28(s0)
80007074:	02e7f663          	bleu	a4,a5,800070a0 <API_CheckMessagePipe+0xe8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:480
                        smallID = MessagePipe[i].msgID;
80007078:	800227b7          	lui	a5,0x80022
8000707c:	fec42683          	lw	a3,-20(s0)
80007080:	f9478713          	addi	a4,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
80007084:	24400793          	li	a5,580
80007088:	02f687b3          	mul	a5,a3,a5
8000708c:	00f707b3          	add	a5,a4,a5
80007090:	0087a783          	lw	a5,8(a5)
80007094:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:481
                        sel = i;
80007098:	fec42783          	lw	a5,-20(s0)
8000709c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:474 (discriminator 2)
    for (i = 0; i < PIPE_SIZE; i++){
800070a0:	fec42783          	lw	a5,-20(s0)
800070a4:	00178793          	addi	a5,a5,1
800070a8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:474 (discriminator 1)
800070ac:	fec42703          	lw	a4,-20(s0)
800070b0:	00300793          	li	a5,3
800070b4:	f2e7fae3          	bleu	a4,a5,80006fe8 <API_CheckMessagePipe+0x30>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:487
                    }
                }
            }
        }
    }
    if(sel != ERRO){
800070b8:	fe842703          	lw	a4,-24(s0)
800070bc:	fff00793          	li	a5,-1
800070c0:	02f70063          	beq	a4,a5,800070e0 <API_CheckMessagePipe+0x128>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:488
        MessagePipe[sel].status == PIPE_TRANSMITTING;
800070c4:	800227b7          	lui	a5,0x80022
800070c8:	fe842683          	lw	a3,-24(s0)
800070cc:	24400713          	li	a4,580
800070d0:	02e68733          	mul	a4,a3,a4
800070d4:	f9478793          	addi	a5,a5,-108 # 80021f94 <__stack_top+0xfffdeb84>
800070d8:	00f707b3          	add	a5,a4,a5
800070dc:	0007a783          	lw	a5,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:491
    }
    //vTaskExitCritical();
    return sel;
800070e0:	fe842783          	lw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:492
}
800070e4:	00078513          	mv	a0,a5
800070e8:	02c12403          	lw	s0,44(sp)
800070ec:	03010113          	addi	sp,sp,48
800070f0:	00008067          	ret

800070f4 <API_AddPendingReq>:
API_AddPendingReq():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:494

void API_AddPendingReq(unsigned int requester_task_id, unsigned int task_app_id, unsigned int producer_task_id){
800070f4:	fd010113          	addi	sp,sp,-48
800070f8:	02112623          	sw	ra,44(sp)
800070fc:	02812423          	sw	s0,40(sp)
80007100:	03010413          	addi	s0,sp,48
80007104:	fca42e23          	sw	a0,-36(s0)
80007108:	fcb42c23          	sw	a1,-40(s0)
8000710c:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:495
    unsigned int slot = API_GetTaskSlot(producer_task_id, task_app_id);
80007110:	fd842583          	lw	a1,-40(s0)
80007114:	fd442503          	lw	a0,-44(s0)
80007118:	88dfd0ef          	jal	ra,800049a4 <API_GetTaskSlot>
8000711c:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:496
    TaskList[slot].PendingReq[requester_task_id] = TRUE;
80007120:	800236b7          	lui	a3,0x80023
80007124:	fec42703          	lw	a4,-20(s0)
80007128:	00070793          	mv	a5,a4
8000712c:	00579793          	slli	a5,a5,0x5
80007130:	00e787b3          	add	a5,a5,a4
80007134:	fdc42703          	lw	a4,-36(s0)
80007138:	00e787b3          	add	a5,a5,a4
8000713c:	00c78793          	addi	a5,a5,12
80007140:	00279713          	slli	a4,a5,0x2
80007144:	0e468793          	addi	a5,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
80007148:	00f707b3          	add	a5,a4,a5
8000714c:	00100713          	li	a4,1
80007150:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:497
    return;
80007154:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:498
}
80007158:	02c12083          	lw	ra,44(sp)
8000715c:	02812403          	lw	s0,40(sp)
80007160:	03010113          	addi	sp,sp,48
80007164:	00008067          	ret

80007168 <API_NI_Handler>:
API_NI_Handler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:501


void API_NI_Handler(){
80007168:	fe010113          	addi	sp,sp,-32
8000716c:	00112e23          	sw	ra,28(sp)
80007170:	00812c23          	sw	s0,24(sp)
80007174:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:504
    unsigned int aux;
    unsigned int service;
    vTaskEnterCritical();
80007178:	ca9fb0ef          	jal	ra,80002e20 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:507
    do{
    
        if (HW_get_32bit_reg(NI_TX) == NI_STATUS_INTER){
8000717c:	500007b7          	lui	a5,0x50000
80007180:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80007184:	e19f90ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80007188:	00050713          	mv	a4,a0
8000718c:	000017b7          	lui	a5,0x1
80007190:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
80007194:	02f71c63          	bne	a4,a5,800071cc <API_NI_Handler+0x64>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:508
            prints("TX interruption catched\n");
80007198:	800087b7          	lui	a5,0x80008
8000719c:	56478513          	addi	a0,a5,1380 # 80008564 <__stack_top+0xfffc5154>
800071a0:	c75fe0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:509
            API_ClearPipeSlot(SendingSlot); // clear the pipe slot that was transmitted
800071a4:	800227b7          	lui	a5,0x80022
800071a8:	be87a783          	lw	a5,-1048(a5) # 80021be8 <__stack_top+0xfffde7d8>
800071ac:	00078513          	mv	a0,a5
800071b0:	f59fd0ef          	jal	ra,80005108 <API_ClearPipeSlot>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:510
            HW_set_32bit_reg(NI_TX, DONE);  // releases the interruption
800071b4:	800057b7          	lui	a5,0x80005
800071b8:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffc2145>
800071bc:	500007b7          	lui	a5,0x50000
800071c0:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
800071c4:	dd1f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:511
            API_Try2Send();                 // tries to send another packet (if available)
800071c8:	b90ff0ef          	jal	ra,80006558 <API_Try2Send>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:514
        }

        if( HW_get_32bit_reg(NI_RX) == NI_STATUS_INTER || HW_get_32bit_reg(NI_RX) == NI_STATUS_WAITING) {
800071cc:	500007b7          	lui	a5,0x50000
800071d0:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800071d4:	dc9f90ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800071d8:	00050713          	mv	a4,a0
800071dc:	000017b7          	lui	a5,0x1
800071e0:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
800071e4:	00f70e63          	beq	a4,a5,80007200 <API_NI_Handler+0x98>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:514 (discriminator 1)
800071e8:	500007b7          	lui	a5,0x50000
800071ec:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800071f0:	dadf90ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800071f4:	00050713          	mv	a4,a0
800071f8:	02200793          	li	a5,34
800071fc:	0cf71ae3          	bne	a4,a5,80007ad0 <API_NI_Handler+0x968>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:515
            prints("RX interruption catched\n");
80007200:	800087b7          	lui	a5,0x80008
80007204:	58078513          	addi	a0,a5,1408 # 80008580 <__stack_top+0xfffc5170>
80007208:	c0dfe0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:516
            service = incommingPacket.service;
8000720c:	800227b7          	lui	a5,0x80022
80007210:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
80007214:	0087a783          	lw	a5,8(a5)
80007218:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:517
            incommingPacket.service = SOLVED;
8000721c:	800227b7          	lui	a5,0x80022
80007220:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
80007224:	00010737          	lui	a4,0x10
80007228:	fff70713          	addi	a4,a4,-1 # ffff <HEAP_SIZE-0x1>
8000722c:	00e7a423          	sw	a4,8(a5)
80007230:	fe842703          	lw	a4,-24(s0)
80007234:	05500793          	li	a5,85
80007238:	74f70c63          	beq	a4,a5,80007990 <API_NI_Handler+0x828>
8000723c:	fe842703          	lw	a4,-24(s0)
80007240:	05500793          	li	a5,85
80007244:	06e7e063          	bltu	a5,a4,800072a4 <API_NI_Handler+0x13c>
80007248:	fe842703          	lw	a4,-24(s0)
8000724c:	02100793          	li	a5,33
80007250:	6af70263          	beq	a4,a5,800078f4 <API_NI_Handler+0x78c>
80007254:	fe842703          	lw	a4,-24(s0)
80007258:	02100793          	li	a5,33
8000725c:	02e7e063          	bltu	a5,a4,8000727c <API_NI_Handler+0x114>
80007260:	fe842703          	lw	a4,-24(s0)
80007264:	01000793          	li	a5,16
80007268:	50f70263          	beq	a4,a5,8000776c <API_NI_Handler+0x604>
8000726c:	fe842703          	lw	a4,-24(s0)
80007270:	02000793          	li	a5,32
80007274:	5ef70263          	beq	a4,a5,80007858 <API_NI_Handler+0x6f0>
80007278:	0190006f          	j	80007a90 <API_NI_Handler+0x928>
8000727c:	fe842703          	lw	a4,-24(s0)
80007280:	03300793          	li	a5,51
80007284:	28f70c63          	beq	a4,a5,8000751c <API_NI_Handler+0x3b4>
80007288:	fe842703          	lw	a4,-24(s0)
8000728c:	03500793          	li	a5,53
80007290:	2ef70063          	beq	a4,a5,80007570 <API_NI_Handler+0x408>
80007294:	fe842703          	lw	a4,-24(s0)
80007298:	03000793          	li	a5,48
8000729c:	0cf70463          	beq	a4,a5,80007364 <API_NI_Handler+0x1fc>
800072a0:	7f00006f          	j	80007a90 <API_NI_Handler+0x928>
800072a4:	fe842703          	lw	a4,-24(s0)
800072a8:	40000793          	li	a5,1024
800072ac:	30f70c63          	beq	a4,a5,800075c4 <API_NI_Handler+0x45c>
800072b0:	fe842703          	lw	a4,-24(s0)
800072b4:	40000793          	li	a5,1024
800072b8:	02e7e063          	bltu	a5,a4,800072d8 <API_NI_Handler+0x170>
800072bc:	fe842703          	lw	a4,-24(s0)
800072c0:	05600793          	li	a5,86
800072c4:	72f70263          	beq	a4,a5,800079e8 <API_NI_Handler+0x880>
800072c8:	fe842703          	lw	a4,-24(s0)
800072cc:	20000793          	li	a5,512
800072d0:	02f70a63          	beq	a4,a5,80007304 <API_NI_Handler+0x19c>
800072d4:	7bc0006f          	j	80007a90 <API_NI_Handler+0x928>
800072d8:	fe842703          	lw	a4,-24(s0)
800072dc:	50000793          	li	a5,1280
800072e0:	18f70463          	beq	a4,a5,80007468 <API_NI_Handler+0x300>
800072e4:	fe842703          	lw	a4,-24(s0)
800072e8:	000107b7          	lui	a5,0x10
800072ec:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
800072f0:	76f70e63          	beq	a4,a5,80007a6c <API_NI_Handler+0x904>
800072f4:	fe842703          	lw	a4,-24(s0)
800072f8:	40100793          	li	a5,1025
800072fc:	36f70463          	beq	a4,a5,80007664 <API_NI_Handler+0x4fc>
80007300:	7900006f          	j	80007a90 <API_NI_Handler+0x928>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:521
            switch (service){
                case REPOSITORY_APP_INFO: // When the repository informs the GM that exist a new Application available:
                    //prints("REPOSITORY_APP_INFO\n");
                    API_AddApplication(incommingPacket.application_id,
80007304:	800227b7          	lui	a5,0x80022
80007308:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
8000730c:	00c7a703          	lw	a4,12(a5)
80007310:	800227b7          	lui	a5,0x80022
80007314:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
80007318:	0107a583          	lw	a1,16(a5)
8000731c:	800227b7          	lui	a5,0x80022
80007320:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
80007324:	0147a603          	lw	a2,20(a5)
80007328:	800227b7          	lui	a5,0x80022
8000732c:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
80007330:	0187a783          	lw	a5,24(a5)
80007334:	00078693          	mv	a3,a5
80007338:	00070513          	mv	a0,a4
8000733c:	c85fb0ef          	jal	ra,80002fc0 <API_AddApplication>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:525
                                    incommingPacket.aplication_period, 
                                    incommingPacket.application_executions, 
                                    incommingPacket.application_n_tasks);
                    HW_set_32bit_reg(NI_RX, DONE);
80007340:	800057b7          	lui	a5,0x80005
80007344:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffc2145>
80007348:	500007b7          	lui	a5,0x50000
8000734c:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007350:	c45f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:526
                    prints("1NI_RX DONE!\n");
80007354:	800087b7          	lui	a5,0x80008
80007358:	59c78513          	addi	a0,a5,1436 # 8000859c <__stack_top+0xfffc518c>
8000735c:	ab9fe0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:527
                    break;
80007360:	7740006f          	j	80007ad4 <API_NI_Handler+0x96c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:530
                
                case TASK_ALLOCATION_SEND: // When the GM asks one Slave to allocate one task
                    prints("TASK_ALLOCATION_SEND\n");
80007364:	800087b7          	lui	a5,0x80008
80007368:	5ac78513          	addi	a0,a5,1452 # 800085ac <__stack_top+0xfffc519c>
8000736c:	aa9fe0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:531
                    aux = API_TaskAllocation(incommingPacket.task_id,
80007370:	800227b7          	lui	a5,0x80022
80007374:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
80007378:	00c7a503          	lw	a0,12(a5)
8000737c:	800227b7          	lui	a5,0x80022
80007380:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
80007384:	0107a583          	lw	a1,16(a5)
80007388:	800227b7          	lui	a5,0x80022
8000738c:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
80007390:	0147a603          	lw	a2,20(a5)
80007394:	800227b7          	lui	a5,0x80022
80007398:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
8000739c:	0187a683          	lw	a3,24(a5)
800073a0:	800227b7          	lui	a5,0x80022
800073a4:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
800073a8:	01c7a783          	lw	a5,28(a5)
800073ac:	00078713          	mv	a4,a5
800073b0:	b1cfd0ef          	jal	ra,800046cc <API_TaskAllocation>
800073b4:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:536
                                            incommingPacket.task_txt_size,
                                            incommingPacket.task_bss_size,
                                            incommingPacket.task_start_point,
                                            incommingPacket.task_app_id);
                    printsv("Task slot: ", aux);
800073b8:	fec42783          	lw	a5,-20(s0)
800073bc:	00078593          	mv	a1,a5
800073c0:	800087b7          	lui	a5,0x80008
800073c4:	5c478513          	addi	a0,a5,1476 # 800085c4 <__stack_top+0xfffc51b4>
800073c8:	af9fe0ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:537
                    printsv("Task slot TaskAddr: ", TaskList[aux].taskAddr);
800073cc:	800237b7          	lui	a5,0x80023
800073d0:	fec42703          	lw	a4,-20(s0)
800073d4:	0e478693          	addi	a3,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
800073d8:	00070793          	mv	a5,a4
800073dc:	00579793          	slli	a5,a5,0x5
800073e0:	00e787b3          	add	a5,a5,a4
800073e4:	00279793          	slli	a5,a5,0x2
800073e8:	00f687b3          	add	a5,a3,a5
800073ec:	0287a783          	lw	a5,40(a5)
800073f0:	00078593          	mv	a1,a5
800073f4:	800087b7          	lui	a5,0x80008
800073f8:	5d078513          	addi	a0,a5,1488 # 800085d0 <__stack_top+0xfffc51c0>
800073fc:	ac5fe0ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:539
                    // Informs the NI were to write the application
                    HW_set_32bit_reg(NI_RX, TaskList[aux].taskAddr);
80007400:	800237b7          	lui	a5,0x80023
80007404:	fec42703          	lw	a4,-20(s0)
80007408:	0e478693          	addi	a3,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
8000740c:	00070793          	mv	a5,a4
80007410:	00579793          	slli	a5,a5,0x5
80007414:	00e787b3          	add	a5,a5,a4
80007418:	00279793          	slli	a5,a5,0x2
8000741c:	00f687b3          	add	a5,a3,a5
80007420:	0287a783          	lw	a5,40(a5)
80007424:	00078593          	mv	a1,a5
80007428:	500007b7          	lui	a5,0x50000
8000742c:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007430:	b65f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:540
                    incommingPacket.service = TASK_ALLOCATION_FINISHED;
80007434:	800227b7          	lui	a5,0x80022
80007438:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
8000743c:	03300713          	li	a4,51
80007440:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:541
                    HW_set_32bit_reg(NI_RX, DONE);
80007444:	800057b7          	lui	a5,0x80005
80007448:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffc2145>
8000744c:	500007b7          	lui	a5,0x50000
80007450:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007454:	b41f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:542
                    prints("2NI_RX DONE!\n");
80007458:	800087b7          	lui	a5,0x80008
8000745c:	5e878513          	addi	a0,a5,1512 # 800085e8 <__stack_top+0xfffc51d8>
80007460:	9b5fe0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:543
                    break;
80007464:	6700006f          	j	80007ad4 <API_NI_Handler+0x96c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:546
                
                case TASK_FINISH:
                    printsvsv("FINISHED: Task ", incommingPacket.task_id, "from application ", incommingPacket.task_app_id);
80007468:	800227b7          	lui	a5,0x80022
8000746c:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
80007470:	00c7a783          	lw	a5,12(a5)
80007474:	00078713          	mv	a4,a5
80007478:	800227b7          	lui	a5,0x80022
8000747c:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
80007480:	01c7a783          	lw	a5,28(a5)
80007484:	00078693          	mv	a3,a5
80007488:	800087b7          	lui	a5,0x80008
8000748c:	5f878613          	addi	a2,a5,1528 # 800085f8 <__stack_top+0xfffc51e8>
80007490:	00070593          	mv	a1,a4
80007494:	800087b7          	lui	a5,0x80008
80007498:	60c78513          	addi	a0,a5,1548 # 8000860c <__stack_top+0xfffc51fc>
8000749c:	a6dfe0ef          	jal	ra,80005f08 <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:547
                    API_ClearTaskSlotFromTile(incommingPacket.task_dest_addr, incommingPacket.task_app_id, incommingPacket.task_id);
800074a0:	800227b7          	lui	a5,0x80022
800074a4:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
800074a8:	0307a703          	lw	a4,48(a5)
800074ac:	800227b7          	lui	a5,0x80022
800074b0:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
800074b4:	01c7a683          	lw	a3,28(a5)
800074b8:	800227b7          	lui	a5,0x80022
800074bc:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
800074c0:	00c7a783          	lw	a5,12(a5)
800074c4:	00078613          	mv	a2,a5
800074c8:	00068593          	mv	a1,a3
800074cc:	00070513          	mv	a0,a4
800074d0:	851fc0ef          	jal	ra,80003d20 <API_ClearTaskSlotFromTile>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:548
                    API_DealocateTask(incommingPacket.task_id, incommingPacket.task_app_id);
800074d4:	800227b7          	lui	a5,0x80022
800074d8:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
800074dc:	00c7a703          	lw	a4,12(a5)
800074e0:	800227b7          	lui	a5,0x80022
800074e4:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
800074e8:	01c7a783          	lw	a5,28(a5)
800074ec:	00078593          	mv	a1,a5
800074f0:	00070513          	mv	a0,a4
800074f4:	a3cfc0ef          	jal	ra,80003730 <API_DealocateTask>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:549
                    HW_set_32bit_reg(NI_RX, DONE);
800074f8:	800057b7          	lui	a5,0x80005
800074fc:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffc2145>
80007500:	500007b7          	lui	a5,0x50000
80007504:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007508:	a8df90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:550
                    prints("3NI_RX DONE!\n");
8000750c:	800087b7          	lui	a5,0x80008
80007510:	61c78513          	addi	a0,a5,1564 # 8000861c <__stack_top+0xfffc520c>
80007514:	901fe0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:551
                    break;
80007518:	5bc0006f          	j	80007ad4 <API_NI_Handler+0x96c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:554

                case TASK_ALLOCATION_FINISHED:
                    prints("TASK_ALLOCATION_FINISHED\n");
8000751c:	800087b7          	lui	a5,0x80008
80007520:	62c78513          	addi	a0,a5,1580 # 8000862c <__stack_top+0xfffc521c>
80007524:	8f1fe0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:555
                    API_AckTaskAllocation(incommingPacket.task_id, incommingPacket.task_app_id);
80007528:	800227b7          	lui	a5,0x80022
8000752c:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
80007530:	00c7a703          	lw	a4,12(a5)
80007534:	800227b7          	lui	a5,0x80022
80007538:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
8000753c:	01c7a783          	lw	a5,28(a5)
80007540:	00078593          	mv	a1,a5
80007544:	00070513          	mv	a0,a4
80007548:	994ff0ef          	jal	ra,800066dc <API_AckTaskAllocation>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:556
                    HW_set_32bit_reg(NI_RX, DONE);
8000754c:	800057b7          	lui	a5,0x80005
80007550:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffc2145>
80007554:	500007b7          	lui	a5,0x50000
80007558:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
8000755c:	a39f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:557
                    prints("4NI_RX DONE!\n");
80007560:	800087b7          	lui	a5,0x80008
80007564:	64878513          	addi	a0,a5,1608 # 80008648 <__stack_top+0xfffc5238>
80007568:	8adfe0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:558
                    break;
8000756c:	5680006f          	j	80007ad4 <API_NI_Handler+0x96c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:561

                case TASK_ALLOCATION_SUCCESS:
                    prints("TASK_ALLOCATION_SUCCESS\n");
80007570:	800087b7          	lui	a5,0x80008
80007574:	65878513          	addi	a0,a5,1624 # 80008658 <__stack_top+0xfffc5248>
80007578:	89dfe0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:563
                    //printi(incommingPacket.task_id);
                    API_TaskAllocated(incommingPacket.task_id, incommingPacket.task_app_id);
8000757c:	800227b7          	lui	a5,0x80022
80007580:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
80007584:	00c7a703          	lw	a4,12(a5)
80007588:	800227b7          	lui	a5,0x80022
8000758c:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
80007590:	01c7a783          	lw	a5,28(a5)
80007594:	00078593          	mv	a1,a5
80007598:	00070513          	mv	a0,a4
8000759c:	b5dfc0ef          	jal	ra,800040f8 <API_TaskAllocated>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:564
                    HW_set_32bit_reg(NI_RX, DONE);
800075a0:	800057b7          	lui	a5,0x80005
800075a4:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffc2145>
800075a8:	500007b7          	lui	a5,0x50000
800075ac:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800075b0:	9e5f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:565
                    prints("5NI_RX DONE!\n");
800075b4:	800087b7          	lui	a5,0x80008
800075b8:	67478513          	addi	a0,a5,1652 # 80008674 <__stack_top+0xfffc5264>
800075bc:	859fe0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:566
                    break;
800075c0:	5140006f          	j	80007ad4 <API_NI_Handler+0x96c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:569

                case TASK_START:
                    prints("Chegou um TASK_START!\n");
800075c4:	800087b7          	lui	a5,0x80008
800075c8:	68478513          	addi	a0,a5,1668 # 80008684 <__stack_top+0xfffc5274>
800075cc:	849fe0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:570
                    aux = API_GetTaskSlot(incommingPacket.task_id, incommingPacket.task_app_id);
800075d0:	800227b7          	lui	a5,0x80022
800075d4:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
800075d8:	00c7a703          	lw	a4,12(a5)
800075dc:	800227b7          	lui	a5,0x80022
800075e0:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
800075e4:	01c7a783          	lw	a5,28(a5)
800075e8:	00078593          	mv	a1,a5
800075ec:	00070513          	mv	a0,a4
800075f0:	bb4fd0ef          	jal	ra,800049a4 <API_GetTaskSlot>
800075f4:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:572
                    // Informs the NI were to write the application
                    HW_set_32bit_reg(NI_RX, (unsigned int)&TaskList[aux].appNumTasks);
800075f8:	fec42703          	lw	a4,-20(s0)
800075fc:	00070793          	mv	a5,a4
80007600:	00579793          	slli	a5,a5,0x5
80007604:	00e787b3          	add	a5,a5,a4
80007608:	00279793          	slli	a5,a5,0x2
8000760c:	05078713          	addi	a4,a5,80
80007610:	800237b7          	lui	a5,0x80023
80007614:	0e478793          	addi	a5,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
80007618:	00f707b3          	add	a5,a4,a5
8000761c:	00878793          	addi	a5,a5,8
80007620:	00078593          	mv	a1,a5
80007624:	500007b7          	lui	a5,0x50000
80007628:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
8000762c:	969f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:573
                    incommingPacket.service = TASK_RUN;
80007630:	800227b7          	lui	a5,0x80022
80007634:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
80007638:	40100713          	li	a4,1025
8000763c:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:574
                    HW_set_32bit_reg(NI_RX, DONE);
80007640:	800057b7          	lui	a5,0x80005
80007644:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffc2145>
80007648:	500007b7          	lui	a5,0x50000
8000764c:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007650:	945f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:575
                    prints("6NI_RX DONE!\n");
80007654:	800087b7          	lui	a5,0x80008
80007658:	69c78513          	addi	a0,a5,1692 # 8000869c <__stack_top+0xfffc528c>
8000765c:	fb8fe0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:576
                    break;
80007660:	4740006f          	j	80007ad4 <API_NI_Handler+0x96c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:579
                
                case TASK_RUN:
                    prints("Chegou um TASK_RUN!\n");
80007664:	800087b7          	lui	a5,0x80008
80007668:	6ac78513          	addi	a0,a5,1708 # 800086ac <__stack_top+0xfffc529c>
8000766c:	fa8fe0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:580
                    aux = API_GetTaskSlot(incommingPacket.task_id, incommingPacket.task_app_id);
80007670:	800227b7          	lui	a5,0x80022
80007674:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
80007678:	00c7a703          	lw	a4,12(a5)
8000767c:	800227b7          	lui	a5,0x80022
80007680:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
80007684:	01c7a783          	lw	a5,28(a5)
80007688:	00078593          	mv	a1,a5
8000768c:	00070513          	mv	a0,a4
80007690:	b14fd0ef          	jal	ra,800049a4 <API_GetTaskSlot>
80007694:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:581
                    TaskList[aux].status = TASK_SLOT_READY;
80007698:	800236b7          	lui	a3,0x80023
8000769c:	fec42703          	lw	a4,-20(s0)
800076a0:	00070793          	mv	a5,a4
800076a4:	00579793          	slli	a5,a5,0x5
800076a8:	00e787b3          	add	a5,a5,a4
800076ac:	00279793          	slli	a5,a5,0x2
800076b0:	0e468713          	addi	a4,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
800076b4:	00e787b3          	add	a5,a5,a4
800076b8:	00300713          	li	a4,3
800076bc:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:582
                    API_setFreqScale(1000);
800076c0:	3e800513          	li	a0,1000
800076c4:	c79fd0ef          	jal	ra,8000533c <API_setFreqScale>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:583
                    printsvsv("Starting Task ", TaskList[aux].TaskID, " from app ", TaskList[aux].AppID);
800076c8:	800236b7          	lui	a3,0x80023
800076cc:	fec42703          	lw	a4,-20(s0)
800076d0:	00070793          	mv	a5,a4
800076d4:	00579793          	slli	a5,a5,0x5
800076d8:	00e787b3          	add	a5,a5,a4
800076dc:	00279793          	slli	a5,a5,0x2
800076e0:	0e468713          	addi	a4,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
800076e4:	00e787b3          	add	a5,a5,a4
800076e8:	0107a783          	lw	a5,16(a5)
800076ec:	00078593          	mv	a1,a5
800076f0:	800237b7          	lui	a5,0x80023
800076f4:	fec42703          	lw	a4,-20(s0)
800076f8:	0e478693          	addi	a3,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
800076fc:	00070793          	mv	a5,a4
80007700:	00579793          	slli	a5,a5,0x5
80007704:	00e787b3          	add	a5,a5,a4
80007708:	00279793          	slli	a5,a5,0x2
8000770c:	00f687b3          	add	a5,a3,a5
80007710:	0147a783          	lw	a5,20(a5)
80007714:	00078693          	mv	a3,a5
80007718:	800087b7          	lui	a5,0x80008
8000771c:	6c478613          	addi	a2,a5,1732 # 800086c4 <__stack_top+0xfffc52b4>
80007720:	800087b7          	lui	a5,0x80008
80007724:	6d078513          	addi	a0,a5,1744 # 800086d0 <__stack_top+0xfffc52c0>
80007728:	fe0fe0ef          	jal	ra,80005f08 <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:584
                    printsv("taskSlot run: ", aux);
8000772c:	fec42783          	lw	a5,-20(s0)
80007730:	00078593          	mv	a1,a5
80007734:	800087b7          	lui	a5,0x80008
80007738:	6e078513          	addi	a0,a5,1760 # 800086e0 <__stack_top+0xfffc52d0>
8000773c:	f84fe0ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:585
                    HW_set_32bit_reg(NI_RX, DONE);
80007740:	800057b7          	lui	a5,0x80005
80007744:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffc2145>
80007748:	500007b7          	lui	a5,0x50000
8000774c:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007750:	845f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:586
                    prints("7NI_RX DONE!\n");
80007754:	800087b7          	lui	a5,0x80008
80007758:	6f078513          	addi	a0,a5,1776 # 800086f0 <__stack_top+0xfffc52e0>
8000775c:	eb8fe0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:587
                    API_TaskStart(aux);
80007760:	fec42503          	lw	a0,-20(s0)
80007764:	b24fd0ef          	jal	ra,80004a88 <API_TaskStart>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:598
                    //         printsvsv("Starting Task ", TaskList[aux].TaskID, " from app ", TaskList[aux].AppID);
                    //         API_TaskStart(aux);
                    //     }
                    // }
                    
                    break;
80007768:	36c0006f          	j	80007ad4 <API_NI_Handler+0x96c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:602

                case MESSAGE_REQUEST:
                    // check the pipe
                    printsvsv("Chegou um message request! App: ", incommingPacket.task_app_id, "Task: ", incommingPacket.task_id);
8000776c:	800227b7          	lui	a5,0x80022
80007770:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
80007774:	01c7a783          	lw	a5,28(a5)
80007778:	00078713          	mv	a4,a5
8000777c:	800227b7          	lui	a5,0x80022
80007780:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
80007784:	00c7a783          	lw	a5,12(a5)
80007788:	00078693          	mv	a3,a5
8000778c:	800087b7          	lui	a5,0x80008
80007790:	70078613          	addi	a2,a5,1792 # 80008700 <__stack_top+0xfffc52f0>
80007794:	00070593          	mv	a1,a4
80007798:	800087b7          	lui	a5,0x80008
8000779c:	70878513          	addi	a0,a5,1800 # 80008708 <__stack_top+0xfffc52f8>
800077a0:	f68fe0ef          	jal	ra,80005f08 <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:603
                    aux = API_CheckMessagePipe(incommingPacket.task_id, incommingPacket.task_app_id);
800077a4:	800227b7          	lui	a5,0x80022
800077a8:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
800077ac:	00c7a703          	lw	a4,12(a5)
800077b0:	800227b7          	lui	a5,0x80022
800077b4:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
800077b8:	01c7a783          	lw	a5,28(a5)
800077bc:	00078593          	mv	a1,a5
800077c0:	00070513          	mv	a0,a4
800077c4:	ff4ff0ef          	jal	ra,80006fb8 <API_CheckMessagePipe>
800077c8:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:604
                    if (aux == ERRO){
800077cc:	fec42703          	lw	a4,-20(s0)
800077d0:	fff00793          	li	a5,-1
800077d4:	04f71463          	bne	a4,a5,8000781c <API_NI_Handler+0x6b4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:606
                        // register an messagerequest
                        prints("Mensagem não encontrada, adicionando ao PendingReq!\n");
800077d8:	800087b7          	lui	a5,0x80008
800077dc:	72c78513          	addi	a0,a5,1836 # 8000872c <__stack_top+0xfffc531c>
800077e0:	e34fe0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:607
                        API_AddPendingReq(incommingPacket.task_id, incommingPacket.task_app_id, incommingPacket.producer_task_id);
800077e4:	800227b7          	lui	a5,0x80022
800077e8:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
800077ec:	00c7a703          	lw	a4,12(a5)
800077f0:	800227b7          	lui	a5,0x80022
800077f4:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
800077f8:	01c7a683          	lw	a3,28(a5)
800077fc:	800227b7          	lui	a5,0x80022
80007800:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
80007804:	0147a783          	lw	a5,20(a5)
80007808:	00078613          	mv	a2,a5
8000780c:	00068593          	mv	a1,a3
80007810:	00070513          	mv	a0,a4
80007814:	8e1ff0ef          	jal	ra,800070f4 <API_AddPendingReq>
80007818:	01c0006f          	j	80007834 <API_NI_Handler+0x6cc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:609
                    } else {
                        prints("Mensagem encontrada no pipe!\n");
8000781c:	800087b7          	lui	a5,0x80008
80007820:	76478513          	addi	a0,a5,1892 # 80008764 <__stack_top+0xfffc5354>
80007824:	df0fe0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:610
                        API_PushSendQueue(MESSAGE, aux);
80007828:	fec42583          	lw	a1,-20(s0)
8000782c:	20200537          	lui	a0,0x20200
80007830:	aedfe0ef          	jal	ra,8000631c <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:613
                        // API_Try2Send();
                    }
                    HW_set_32bit_reg(NI_RX, DONE);
80007834:	800057b7          	lui	a5,0x80005
80007838:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffc2145>
8000783c:	500007b7          	lui	a5,0x50000
80007840:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007844:	f50f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:614
                    prints("8NI_RX DONE!\n");
80007848:	800087b7          	lui	a5,0x80008
8000784c:	78478513          	addi	a0,a5,1924 # 80008784 <__stack_top+0xfffc5374>
80007850:	dc4fe0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:615
                    break;
80007854:	2800006f          	j	80007ad4 <API_NI_Handler+0x96c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:618
                
                case MESSAGE_DELIVERY:
                    prints("Tem uma mensagem chegando...\n");
80007858:	800087b7          	lui	a5,0x80008
8000785c:	79478513          	addi	a0,a5,1940 # 80008794 <__stack_top+0xfffc5384>
80007860:	db4fe0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:619
                    aux = API_GetTaskSlot(incommingPacket.destination_task, incommingPacket.application_id);
80007864:	800227b7          	lui	a5,0x80022
80007868:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
8000786c:	0147a703          	lw	a4,20(a5)
80007870:	800227b7          	lui	a5,0x80022
80007874:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
80007878:	00c7a783          	lw	a5,12(a5)
8000787c:	00078593          	mv	a1,a5
80007880:	00070513          	mv	a0,a4
80007884:	920fd0ef          	jal	ra,800049a4 <API_GetTaskSlot>
80007888:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:621
                    //printsv("MESSAGE_DELIVERY addr: ", TaskList[aux].MsgToReceive);
                    HW_set_32bit_reg(NI_RX, TaskList[aux].MsgToReceive);
8000788c:	800236b7          	lui	a3,0x80023
80007890:	fec42703          	lw	a4,-20(s0)
80007894:	00070793          	mv	a5,a4
80007898:	00579793          	slli	a5,a5,0x5
8000789c:	00e787b3          	add	a5,a5,a4
800078a0:	00279793          	slli	a5,a5,0x2
800078a4:	0e468713          	addi	a4,a3,228 # 800230e4 <__stack_top+0xfffdfcd4>
800078a8:	00e787b3          	add	a5,a5,a4
800078ac:	0207a783          	lw	a5,32(a5)
800078b0:	00078593          	mv	a1,a5
800078b4:	500007b7          	lui	a5,0x50000
800078b8:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800078bc:	ed8f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:622
                    incommingPacket.service = MESSAGE_DELIVERY_FINISH;
800078c0:	800227b7          	lui	a5,0x80022
800078c4:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
800078c8:	02100713          	li	a4,33
800078cc:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:624
                    //prints("done...\n----------\n");
                    HW_set_32bit_reg(NI_RX, DONE);
800078d0:	800057b7          	lui	a5,0x80005
800078d4:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffc2145>
800078d8:	500007b7          	lui	a5,0x50000
800078dc:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800078e0:	eb4f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:625
                    prints("9NI_RX DONE!\n");
800078e4:	800087b7          	lui	a5,0x80008
800078e8:	7b478513          	addi	a0,a5,1972 # 800087b4 <__stack_top+0xfffc53a4>
800078ec:	d28fe0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:626
                    break;
800078f0:	1e40006f          	j	80007ad4 <API_NI_Handler+0x96c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:630
                
                case MESSAGE_DELIVERY_FINISH:
                    //prints("Terminou de entregar a mensagem!!\n");
                    aux = API_GetTaskSlot(incommingPacket.destination_task, incommingPacket.application_id);
800078f4:	800227b7          	lui	a5,0x80022
800078f8:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
800078fc:	0147a703          	lw	a4,20(a5)
80007900:	800227b7          	lui	a5,0x80022
80007904:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
80007908:	00c7a783          	lw	a5,12(a5)
8000790c:	00078593          	mv	a1,a5
80007910:	00070513          	mv	a0,a4
80007914:	890fd0ef          	jal	ra,800049a4 <API_GetTaskSlot>
80007918:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:631
                    TaskList[aux].waitingMsg = FALSE;
8000791c:	800237b7          	lui	a5,0x80023
80007920:	fec42703          	lw	a4,-20(s0)
80007924:	0e478693          	addi	a3,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
80007928:	00070793          	mv	a5,a4
8000792c:	00579793          	slli	a5,a5,0x5
80007930:	00e787b3          	add	a5,a5,a4
80007934:	00279793          	slli	a5,a5,0x2
80007938:	00f687b3          	add	a5,a3,a5
8000793c:	0007ae23          	sw	zero,28(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:632
                    vTaskResume(TaskList[aux].TaskHandler);
80007940:	800237b7          	lui	a5,0x80023
80007944:	fec42703          	lw	a4,-20(s0)
80007948:	0e478693          	addi	a3,a5,228 # 800230e4 <__stack_top+0xfffdfcd4>
8000794c:	00070793          	mv	a5,a4
80007950:	00579793          	slli	a5,a5,0x5
80007954:	00e787b3          	add	a5,a5,a4
80007958:	00279793          	slli	a5,a5,0x2
8000795c:	00f687b3          	add	a5,a3,a5
80007960:	0187a783          	lw	a5,24(a5)
80007964:	00078513          	mv	a0,a5
80007968:	9c9fa0ef          	jal	ra,80002330 <vTaskResume>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:633
                    HW_set_32bit_reg(NI_RX, DONE);
8000796c:	800057b7          	lui	a5,0x80005
80007970:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffc2145>
80007974:	500007b7          	lui	a5,0x50000
80007978:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
8000797c:	e18f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:634
                    prints("10NI_RX DONE!\n");
80007980:	800087b7          	lui	a5,0x80008
80007984:	7c478513          	addi	a0,a5,1988 # 800087c4 <__stack_top+0xfffc53b4>
80007988:	c8cfe0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:635
                    break;
8000798c:	1480006f          	j	80007ad4 <API_NI_Handler+0x96c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:638

                case TEMPERATURE_PACKET:
                    prints("Recebendo pacote de temperatura");
80007990:	800087b7          	lui	a5,0x80008
80007994:	7d478513          	addi	a0,a5,2004 # 800087d4 <__stack_top+0xfffc53c4>
80007998:	c7cfe0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:639
                    HW_set_32bit_reg(NI_RX, (unsigned int)&SystemTemperature);
8000799c:	800237b7          	lui	a5,0x80023
800079a0:	05078793          	addi	a5,a5,80 # 80023050 <__stack_top+0xfffdfc40>
800079a4:	00078593          	mv	a1,a5
800079a8:	500007b7          	lui	a5,0x50000
800079ac:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800079b0:	de4f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:640
                    incommingPacket.service = FINISH_TEMPERATURE_PACKET;
800079b4:	800227b7          	lui	a5,0x80022
800079b8:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
800079bc:	05600713          	li	a4,86
800079c0:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:641
                    HW_set_32bit_reg(NI_RX, DONE);
800079c4:	800057b7          	lui	a5,0x80005
800079c8:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffc2145>
800079cc:	500007b7          	lui	a5,0x50000
800079d0:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800079d4:	dc0f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:642
                    prints("11NI_RX DONE!\n");
800079d8:	800087b7          	lui	a5,0x80008
800079dc:	7f478513          	addi	a0,a5,2036 # 800087f4 <__stack_top+0xfffc53e4>
800079e0:	c34fe0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:643
                    break;
800079e4:	0f00006f          	j	80007ad4 <API_NI_Handler+0x96c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:646
                
                case FINISH_TEMPERATURE_PACKET:
                    temperatureUpdated = 1;
800079e8:	800237b7          	lui	a5,0x80023
800079ec:	00100713          	li	a4,1
800079f0:	04e7a623          	sw	a4,76(a5) # 8002304c <__stack_top+0xfffdfc3c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:647
                    for(aux = 0; aux < DIM_X*DIM_Y; aux++){ 
800079f4:	fe042623          	sw	zero,-20(s0)
800079f8:	0440006f          	j	80007a3c <API_NI_Handler+0x8d4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:648 (discriminator 3)
                        printsvsv("pe", aux, "temp: ", SystemTemperature[aux]);
800079fc:	fec42583          	lw	a1,-20(s0)
80007a00:	800237b7          	lui	a5,0x80023
80007a04:	fec42703          	lw	a4,-20(s0)
80007a08:	00271713          	slli	a4,a4,0x2
80007a0c:	05078793          	addi	a5,a5,80 # 80023050 <__stack_top+0xfffdfc40>
80007a10:	00f707b3          	add	a5,a4,a5
80007a14:	0007a783          	lw	a5,0(a5)
80007a18:	00078693          	mv	a3,a5
80007a1c:	800097b7          	lui	a5,0x80009
80007a20:	80478613          	addi	a2,a5,-2044 # 80008804 <__stack_top+0xfffc53f4>
80007a24:	800097b7          	lui	a5,0x80009
80007a28:	80c78513          	addi	a0,a5,-2036 # 8000880c <__stack_top+0xfffc53fc>
80007a2c:	cdcfe0ef          	jal	ra,80005f08 <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:647 (discriminator 3)
                    for(aux = 0; aux < DIM_X*DIM_Y; aux++){ 
80007a30:	fec42783          	lw	a5,-20(s0)
80007a34:	00178793          	addi	a5,a5,1
80007a38:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:647 (discriminator 1)
80007a3c:	fec42703          	lw	a4,-20(s0)
80007a40:	00800793          	li	a5,8
80007a44:	fae7fce3          	bleu	a4,a5,800079fc <API_NI_Handler+0x894>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:650
                    }
                    HW_set_32bit_reg(NI_RX, DONE);
80007a48:	800057b7          	lui	a5,0x80005
80007a4c:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffc2145>
80007a50:	500007b7          	lui	a5,0x50000
80007a54:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007a58:	d3cf90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:651
                    prints("12NI_RX DONE!\n");
80007a5c:	800097b7          	lui	a5,0x80009
80007a60:	81078513          	addi	a0,a5,-2032 # 80008810 <__stack_top+0xfffc5400>
80007a64:	bb0fe0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:652
                    break;
80007a68:	06c0006f          	j	80007ad4 <API_NI_Handler+0x96c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:655

                case SOLVED:
                    HW_set_32bit_reg(NI_RX, DONE);
80007a6c:	800057b7          	lui	a5,0x80005
80007a70:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffc2145>
80007a74:	500007b7          	lui	a5,0x50000
80007a78:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007a7c:	d18f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:656
                    prints("13NI_RX DONE!\n");
80007a80:	800097b7          	lui	a5,0x80009
80007a84:	82078513          	addi	a0,a5,-2016 # 80008820 <__stack_top+0xfffc5410>
80007a88:	b8cfe0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:657
                    break;
80007a8c:	0480006f          	j	80007ad4 <API_NI_Handler+0x96c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:660
                    
                default:
                    printsv("ERROR External_2_IRQHandler Unknown-Service ", incommingPacket.service);
80007a90:	800227b7          	lui	a5,0x80022
80007a94:	ce078793          	addi	a5,a5,-800 # 80021ce0 <__stack_top+0xfffde8d0>
80007a98:	0087a783          	lw	a5,8(a5)
80007a9c:	00078593          	mv	a1,a5
80007aa0:	800097b7          	lui	a5,0x80009
80007aa4:	83078513          	addi	a0,a5,-2000 # 80008830 <__stack_top+0xfffc5420>
80007aa8:	c18fe0ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:661
                    HW_set_32bit_reg(NI_RX, DONE);
80007aac:	800057b7          	lui	a5,0x80005
80007ab0:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffc2145>
80007ab4:	500007b7          	lui	a5,0x50000
80007ab8:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007abc:	cd8f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:662
                    prints("14NI_RX DONE!\n");
80007ac0:	800097b7          	lui	a5,0x80009
80007ac4:	86078513          	addi	a0,a5,-1952 # 80008860 <__stack_top+0xfffc5450>
80007ac8:	b4cfe0ef          	jal	ra,80005e14 <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:663
                    break;
80007acc:	0080006f          	j	80007ad4 <API_NI_Handler+0x96c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:665
            }
        }
80007ad0:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:667
        
    } while( HW_get_32bit_reg(NI_RX) == NI_STATUS_INTER || HW_get_32bit_reg(NI_RX) == NI_STATUS_WAITING || HW_get_32bit_reg(NI_TX) == NI_STATUS_INTER);
80007ad4:	500007b7          	lui	a5,0x50000
80007ad8:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007adc:	cc0f90ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80007ae0:	00050713          	mv	a4,a0
80007ae4:	000017b7          	lui	a5,0x1
80007ae8:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
80007aec:	e8f70863          	beq	a4,a5,8000717c <API_NI_Handler+0x14>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:667 (discriminator 1)
80007af0:	500007b7          	lui	a5,0x50000
80007af4:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007af8:	ca4f90ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80007afc:	00050713          	mv	a4,a0
80007b00:	02200793          	li	a5,34
80007b04:	e6f70c63          	beq	a4,a5,8000717c <API_NI_Handler+0x14>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:667 (discriminator 2)
80007b08:	500007b7          	lui	a5,0x50000
80007b0c:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80007b10:	c8cf90ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80007b14:	00050713          	mv	a4,a0
80007b18:	000017b7          	lui	a5,0x1
80007b1c:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
80007b20:	e4f70e63          	beq	a4,a5,8000717c <API_NI_Handler+0x14>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:669

    if (HW_get_32bit_reg(NI_TIMER) == NI_STATUS_INTER){
80007b24:	500007b7          	lui	a5,0x50000
80007b28:	01078513          	addi	a0,a5,16 # 50000010 <RAM_SIZE+0x4ff80010>
80007b2c:	c70f90ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80007b30:	00050713          	mv	a4,a0
80007b34:	000017b7          	lui	a5,0x1
80007b38:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
80007b3c:	00f71e63          	bne	a4,a5,80007b58 <API_NI_Handler+0x9f0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:670
        powerEstimation();
80007b40:	d7dfd0ef          	jal	ra,800058bc <powerEstimation>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:671
        HW_set_32bit_reg(NI_TIMER, DONE);
80007b44:	800057b7          	lui	a5,0x80005
80007b48:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffc2145>
80007b4c:	500007b7          	lui	a5,0x50000
80007b50:	01078513          	addi	a0,a5,16 # 50000010 <RAM_SIZE+0x4ff80010>
80007b54:	c40f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:675
    }


    vTaskExitCritical();
80007b58:	b04fb0ef          	jal	ra,80002e5c <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:677
    
    return;
80007b5c:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:678
80007b60:	01c12083          	lw	ra,28(sp)
80007b64:	01812403          	lw	s0,24(sp)
80007b68:	02010113          	addi	sp,sp,32
80007b6c:	00008067          	ret

80007b70 <PLIC_init>:
PLIC_init():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:124
{
80007b70:	fe010113          	addi	sp,sp,-32
80007b74:	00812e23          	sw	s0,28(sp)
80007b78:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:126
    unsigned long hart_id = read_csr(mhartid);
80007b7c:	f14027f3          	csrr	a5,mhartid
80007b80:	fef42423          	sw	a5,-24(s0)
80007b84:	fe842783          	lw	a5,-24(s0)
80007b88:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
80007b8c:	fe042623          	sw	zero,-20(s0)
80007b90:	03c0006f          	j	80007bcc <PLIC_init+0x5c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:131 (discriminator 3)
        PLIC->TARGET_ENABLES[hart_id].ENABLES[inc] = 0;
80007b94:	40000737          	lui	a4,0x40000
80007b98:	fe442783          	lw	a5,-28(s0)
80007b9c:	00579693          	slli	a3,a5,0x5
80007ba0:	fec42783          	lw	a5,-20(s0)
80007ba4:	00f686b3          	add	a3,a3,a5
80007ba8:	000017b7          	lui	a5,0x1
80007bac:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80007bb0:	00f687b3          	add	a5,a3,a5
80007bb4:	00279793          	slli	a5,a5,0x2
80007bb8:	00f707b3          	add	a5,a4,a5
80007bbc:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 3)
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
80007bc0:	fec42783          	lw	a5,-20(s0)
80007bc4:	00178793          	addi	a5,a5,1
80007bc8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 1)
80007bcc:	fec42783          	lw	a5,-20(s0)
80007bd0:	fc0782e3          	beqz	a5,80007b94 <PLIC_init+0x24>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
80007bd4:	fe042623          	sw	zero,-20(s0)
80007bd8:	0240006f          	j	80007bfc <PLIC_init+0x8c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:139 (discriminator 3)
        PLIC->SOURCE_PRIORITY[inc] = 0;
80007bdc:	40000737          	lui	a4,0x40000
80007be0:	fec42783          	lw	a5,-20(s0)
80007be4:	00279793          	slli	a5,a5,0x2
80007be8:	00f707b3          	add	a5,a4,a5
80007bec:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 3)
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
80007bf0:	fec42783          	lw	a5,-20(s0)
80007bf4:	00178793          	addi	a5,a5,1
80007bf8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 1)
80007bfc:	fec42703          	lw	a4,-20(s0)
80007c00:	01e00793          	li	a5,30
80007c04:	fce7fce3          	bleu	a4,a5,80007bdc <PLIC_init+0x6c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:143
    PLIC->TARGET[hart_id].PRIORITY_THRESHOLD = 0;
80007c08:	40000737          	lui	a4,0x40000
80007c0c:	fe442783          	lw	a5,-28(s0)
80007c10:	20078793          	addi	a5,a5,512
80007c14:	00c79793          	slli	a5,a5,0xc
80007c18:	00f707b3          	add	a5,a4,a5
80007c1c:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:146
    set_csr(mie, MIP_MEIP);
80007c20:	000017b7          	lui	a5,0x1
80007c24:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80007c28:	3047a7f3          	csrrs	a5,mie,a5
80007c2c:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:147
}
80007c30:	00000013          	nop
80007c34:	01c12403          	lw	s0,28(sp)
80007c38:	02010113          	addi	sp,sp,32
80007c3c:	00008067          	ret

80007c40 <main>:
main():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:60
extern volatile unsigned int NI_IRCount;

/*-----------------------------------------------------------*/

int main( void )
{
80007c40:	fd010113          	addi	sp,sp,-48
80007c44:	02112623          	sw	ra,44(sp)
80007c48:	02812423          	sw	s0,40(sp)
80007c4c:	03010413          	addi	s0,sp,48
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:62
	char str[20];
    PLIC_init();
80007c50:	f21ff0ef          	jal	ra,80007b70 <PLIC_init>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:68

    /**************************************************************************
    * Initialize CoreUART with its base address, baud value, and line
    * configuration.
    *************************************************************************/
    UART_init(&g_uart, COREUARTAPB0_BASE_ADDR, BAUD_VALUE_115200,
80007c54:	00100693          	li	a3,1
80007c58:	02c00613          	li	a2,44
80007c5c:	700015b7          	lui	a1,0x70001
80007c60:	800237b7          	lui	a5,0x80023
80007c64:	40478513          	addi	a0,a5,1028 # 80023404 <__stack_top+0xfffdfff4>
80007c68:	c04f90ef          	jal	ra,8000106c <UART_init>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:74
             (DATA_8_BITS | NO_PARITY) );
    
	/**************************************************************************
    * Initialize the Chronos platform stuff
    *************************************************************************/
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n Chronos platform initializing... \n" );
80007c6c:	800097b7          	lui	a5,0x80009
80007c70:	88878593          	addi	a1,a5,-1912 # 80008888 <__stack_top+0xfffc5478>
80007c74:	800237b7          	lui	a5,0x80023
80007c78:	40478513          	addi	a0,a5,1028 # 80023404 <__stack_top+0xfffdfff4>
80007c7c:	dbcf90ef          	jal	ra,80001238 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:75
	Chronos_init();
80007c80:	8a0fe0ef          	jal	ra,80005d20 <Chronos_init>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:76
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This terminal belongs to the address: " );
80007c84:	800097b7          	lui	a5,0x80009
80007c88:	8b078593          	addi	a1,a5,-1872 # 800088b0 <__stack_top+0xfffc54a0>
80007c8c:	800237b7          	lui	a5,0x80023
80007c90:	40478513          	addi	a0,a5,1028 # 80023404 <__stack_top+0xfffdfff4>
80007c94:	da4f90ef          	jal	ra,80001238 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:77
	myItoa(ProcessorAddr, str, 16);
80007c98:	800237b7          	lui	a5,0x80023
80007c9c:	40c7a783          	lw	a5,1036(a5) # 8002340c <__stack_top+0xfffdfffc>
80007ca0:	00078713          	mv	a4,a5
80007ca4:	fdc40793          	addi	a5,s0,-36
80007ca8:	01000613          	li	a2,16
80007cac:	00078593          	mv	a1,a5
80007cb0:	00070513          	mv	a0,a4
80007cb4:	c88fe0ef          	jal	ra,8000613c <myItoa>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:78
    UART_polled_tx_string( &g_uart, (const uint8_t *)str); UART_polled_tx_string( &g_uart, (const uint8_t *)"\n");
80007cb8:	fdc40793          	addi	a5,s0,-36
80007cbc:	00078593          	mv	a1,a5
80007cc0:	800237b7          	lui	a5,0x80023
80007cc4:	40478513          	addi	a0,a5,1028 # 80023404 <__stack_top+0xfffdfff4>
80007cc8:	d70f90ef          	jal	ra,80001238 <UART_polled_tx_string>
80007ccc:	800097b7          	lui	a5,0x80009
80007cd0:	8dc78593          	addi	a1,a5,-1828 # 800088dc <__stack_top+0xfffc54cc>
80007cd4:	800237b7          	lui	a5,0x80023
80007cd8:	40478513          	addi	a0,a5,1028 # 80023404 <__stack_top+0xfffdfff4>
80007cdc:	d5cf90ef          	jal	ra,80001238 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:83
	
	//xTaskCreate( NI_TX_Handler, "TXHandler", 1024*4, NULL, (tskIDLE_PRIORITY + 1), NULL);
	//xTaskCreate( NI_RX_Handler, "RXHandler", 1024*3, NULL, (tskIDLE_PRIORITY + 1), NULL);

	if (ProcessorAddr == 0x0000){
80007ce0:	800237b7          	lui	a5,0x80023
80007ce4:	40c7a783          	lw	a5,1036(a5) # 8002340c <__stack_top+0xfffdfffc>
80007ce8:	04079663          	bnez	a5,80007d34 <main+0xf4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:84
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is the Global Master: \n" );
80007cec:	800097b7          	lui	a5,0x80009
80007cf0:	8e078593          	addi	a1,a5,-1824 # 800088e0 <__stack_top+0xfffc54d0>
80007cf4:	800237b7          	lui	a5,0x80023
80007cf8:	40478513          	addi	a0,a5,1028 # 80023404 <__stack_top+0xfffdfff4>
80007cfc:	d3cf90ef          	jal	ra,80001238 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:86
		/* Create the GlobalManager task */
		xTaskCreate( GlobalManagerTask, "GlobalMaster", 1024*6, NULL, (tskIDLE_PRIORITY + 1), NULL );
80007d00:	00000893          	li	a7,0
80007d04:	00000813          	li	a6,0
80007d08:	00000793          	li	a5,0
80007d0c:	00100713          	li	a4,1
80007d10:	00000693          	li	a3,0
80007d14:	00002637          	lui	a2,0x2
80007d18:	80060613          	addi	a2,a2,-2048 # 1800 <HEAP_SIZE-0xe800>
80007d1c:	800095b7          	lui	a1,0x80009
80007d20:	90c58593          	addi	a1,a1,-1780 # 8000890c <__stack_top+0xfffc54fc>
80007d24:	80008537          	lui	a0,0x80008
80007d28:	d9450513          	addi	a0,a0,-620 # 80007d94 <__stack_top+0xfffc4984>
80007d2c:	9ecfa0ef          	jal	ra,80001f18 <xTaskGenericCreate>
80007d30:	0180006f          	j	80007d48 <main+0x108>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:88
	} else {
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is a Slave: \n" );
80007d34:	800097b7          	lui	a5,0x80009
80007d38:	91c78593          	addi	a1,a5,-1764 # 8000891c <__stack_top+0xfffc550c>
80007d3c:	800237b7          	lui	a5,0x80023
80007d40:	40478513          	addi	a0,a5,1028 # 80023404 <__stack_top+0xfffdfff4>
80007d44:	cf4f90ef          	jal	ra,80001238 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:96
		//xTaskCreate( vUartAliveTask, "Alive", 1024, NULL, (tskIDLE_PRIORITY), NULL );
	}
	//xTaskCreate( NI_Handler, "Handler", 1024*6, NULL, (tskIDLE_PRIORITY + 2), NULL );

	/* Start the kernel.  From here on, only tasks and interrupts will run. */
	vTaskStartScheduler();
80007d48:	ed4fa0ef          	jal	ra,8000241c <vTaskStartScheduler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:99

	/* Exit FreeRTOS */
	return 0;
80007d4c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:100
}
80007d50:	00078513          	mv	a0,a5
80007d54:	02c12083          	lw	ra,44(sp)
80007d58:	02812403          	lw	s0,40(sp)
80007d5c:	03010113          	addi	sp,sp,48
80007d60:	00008067          	ret

80007d64 <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:105

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
80007d64:	ff010113          	addi	sp,sp,-16
80007d68:	00812623          	sw	s0,12(sp)
80007d6c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:116
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
80007d70:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:117 (discriminator 1)
	for( ;; );
80007d74:	0000006f          	j	80007d74 <vApplicationMallocFailedHook+0x10>

80007d78 <vApplicationIdleHook>:
vApplicationIdleHook():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:122
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
80007d78:	ff010113          	addi	sp,sp,-16
80007d7c:	00812623          	sw	s0,12(sp)
80007d80:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:132
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
80007d84:	00000013          	nop
80007d88:	00c12403          	lw	s0,12(sp)
80007d8c:	01010113          	addi	sp,sp,16
80007d90:	00008067          	ret

80007d94 <GlobalManagerTask>:
GlobalManagerTask():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:190
	// }
}

/*-----------------------------------------------------------*/

static void GlobalManagerTask( void *pvParameters ){
80007d94:	fc010113          	addi	sp,sp,-64
80007d98:	02112e23          	sw	ra,60(sp)
80007d9c:	02812c23          	sw	s0,56(sp)
80007da0:	04010413          	addi	s0,sp,64
80007da4:	fca42623          	sw	a0,-52(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:196
	( void ) pvParameters;
	int tick;
	char str[20];

	// Initialize the priority vector with the pattern policy
	GeneratePatternMatrix();
80007da8:	e08fb0ef          	jal	ra,800033b0 <GeneratePatternMatrix>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:199

	// Initialize the System Tiles Info
	API_TilesReset();
80007dac:	cdcfb0ef          	jal	ra,80003288 <API_TilesReset>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:202

	// Initialize the applications vector
    API_ApplicationsReset();
80007db0:	c78fb0ef          	jal	ra,80003228 <API_ApplicationsReset>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:205

	// Informs the Repository that the GLOBALMASTER is ready to receive the application info
	API_RepositoryWakeUp();
80007db4:	8f8fb0ef          	jal	ra,80002eac <API_RepositoryWakeUp>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:208

	for(;;){
		tick = xTaskGetTickCount();
80007db8:	87dfa0ef          	jal	ra,80002634 <xTaskGetTickCount>
80007dbc:	00050793          	mv	a5,a0
80007dc0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:209
		myItoa(tick, str, 10);
80007dc4:	fd840793          	addi	a5,s0,-40
80007dc8:	00a00613          	li	a2,10
80007dcc:	00078593          	mv	a1,a5
80007dd0:	fec42503          	lw	a0,-20(s0)
80007dd4:	b68fe0ef          	jal	ra,8000613c <myItoa>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:210
		UART_polled_tx_string( &g_uart, (const uint8_t *)str);
80007dd8:	fd840793          	addi	a5,s0,-40
80007ddc:	00078593          	mv	a1,a5
80007de0:	800237b7          	lui	a5,0x80023
80007de4:	40478513          	addi	a0,a5,1028 # 80023404 <__stack_top+0xfffdfff4>
80007de8:	c50f90ef          	jal	ra,80001238 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:211
		printsv("GlobalMasterActive", tick);
80007dec:	fec42583          	lw	a1,-20(s0)
80007df0:	800097b7          	lui	a5,0x80009
80007df4:	94878513          	addi	a0,a5,-1720 # 80008948 <__stack_top+0xfffc5538>
80007df8:	8c8fe0ef          	jal	ra,80005ec0 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:212
		UART_polled_tx_string( &g_uart, (const uint8_t *)" GlobalMasterRoutine...\r\n" );
80007dfc:	800097b7          	lui	a5,0x80009
80007e00:	95c78593          	addi	a1,a5,-1700 # 8000895c <__stack_top+0xfffc554c>
80007e04:	800237b7          	lui	a5,0x80023
80007e08:	40478513          	addi	a0,a5,1028 # 80023404 <__stack_top+0xfffdfff4>
80007e0c:	c2cf90ef          	jal	ra,80001238 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:215

		// Checks if there is some task to allocate...
		API_AllocateTasks(tick);
80007e10:	fec42783          	lw	a5,-20(s0)
80007e14:	00078513          	mv	a0,a5
80007e18:	e40fb0ef          	jal	ra,80003458 <API_AllocateTasks>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:216
		if(API_SystemFinish){
80007e1c:	9901a783          	lw	a5,-1648(gp) # 80008b10 <API_SystemFinish>
80007e20:	00078c63          	beqz	a5,80007e38 <GlobalManagerTask+0xa4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:217
			vTaskDelay(200); // to cool down the system
80007e24:	0c800513          	li	a0,200
80007e28:	be8fa0ef          	jal	ra,80002210 <vTaskDelay>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:218
			_exit(0xfe10);
80007e2c:	000107b7          	lui	a5,0x10
80007e30:	e1078513          	addi	a0,a5,-496 # fe10 <HEAP_SIZE-0x1f0>
80007e34:	fa9f80ef          	jal	ra,80000ddc <_exit>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:221
		}
		else{
			vTaskDelay(1);
80007e38:	00100513          	li	a0,1
80007e3c:	bd4fa0ef          	jal	ra,80002210 <vTaskDelay>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:208
		tick = xTaskGetTickCount();
80007e40:	f79ff06f          	j	80007db8 <GlobalManagerTask+0x24>

80007e44 <write>:
write():
80007e44:	00001797          	auipc	a5,0x1
80007e48:	b4c78793          	addi	a5,a5,-1204 # 80008990 <_impure_ptr>
80007e4c:	00060693          	mv	a3,a2
80007e50:	00058613          	mv	a2,a1
80007e54:	00050593          	mv	a1,a0
80007e58:	0007a503          	lw	a0,0(a5)
80007e5c:	0040006f          	j	80007e60 <_write_r>

80007e60 <_write_r>:
_write_r():
80007e60:	ff010113          	addi	sp,sp,-16
80007e64:	00812423          	sw	s0,8(sp)
80007e68:	00050413          	mv	s0,a0
80007e6c:	00058513          	mv	a0,a1
80007e70:	00060593          	mv	a1,a2
80007e74:	00068613          	mv	a2,a3
80007e78:	0001b797          	auipc	a5,0x1b
80007e7c:	a207a623          	sw	zero,-1492(a5) # 800228a4 <errno>
80007e80:	00112623          	sw	ra,12(sp)
80007e84:	828f90ef          	jal	ra,80000eac <_write>
80007e88:	fff00793          	li	a5,-1
80007e8c:	00f51c63          	bne	a0,a5,80007ea4 <_write_r+0x44>
80007e90:	0001b797          	auipc	a5,0x1b
80007e94:	a1478793          	addi	a5,a5,-1516 # 800228a4 <errno>
80007e98:	0007a783          	lw	a5,0(a5)
80007e9c:	00078463          	beqz	a5,80007ea4 <_write_r+0x44>
80007ea0:	00f42023          	sw	a5,0(s0)
80007ea4:	00c12083          	lw	ra,12(sp)
80007ea8:	00812403          	lw	s0,8(sp)
80007eac:	01010113          	addi	sp,sp,16
80007eb0:	00008067          	ret
	...
80007ec0:	6568                	flw	fa0,76(a0)
80007ec2:	6c6c                	flw	fa1,92(s0)
80007ec4:	0000006f          	j	80007ec4 <_write_r+0x64>
80007ec8:	6544                	flw	fs1,12(a0)
80007eca:	6574                	flw	fa3,76(a0)
80007ecc:	69657463          	bleu	s6,a0,80008554 <loadStoreDyn+0x1e0>
80007ed0:	7520                	flw	fs0,104(a0)
80007ed2:	616d                	addi	sp,sp,240
80007ed4:	6320                	flw	fs0,64(a4)
80007ed6:	6168                	flw	fa0,68(a0)
80007ed8:	616d                	addi	sp,sp,240
80007eda:	6164                	flw	fs1,68(a0)
80007edc:	5420                	lw	s0,104(s0)
80007ede:	5345                	li	t1,-15
80007ee0:	4554                	lw	a3,12(a0)
80007ee2:	6420                	flw	fs0,72(s0)
80007ee4:	2065                	jal	80007f8c <_write_r+0x12c>
80007ee6:	74736973          	csrrsi	s2,0x747,6
80007eea:	6d65                	lui	s10,0x19
80007eec:	2161                	jal	80008374 <loadStoreDyn>
80007eee:	000a                	c.slli	zero,0x2
80007ef0:	7261                	lui	tp,0xffff8
80007ef2:	00203067          	0x203067
80007ef6:	0000                	unimp
80007ef8:	7261                	lui	tp,0xffff8
80007efa:	00203167          	0x203167
80007efe:	0000                	unimp
80007f00:	7261                	lui	tp,0xffff8
80007f02:	00203267          	0x203267
80007f06:	0000                	unimp
80007f08:	7261                	lui	tp,0xffff8
80007f0a:	00203367          	0x203367
80007f0e:	0000                	unimp
80007f10:	7261                	lui	tp,0xffff8
80007f12:	00203467          	0x203467
80007f16:	0000                	unimp
80007f18:	7974                	flw	fa3,116(a0)
80007f1a:	6570                	flw	fa2,76(a0)
80007f1c:	0020                	addi	s0,sp,8
80007f1e:	0000                	unimp
80007f20:	74737953          	0x74737953
80007f24:	6d65                	lui	s10,0x19
80007f26:	6c6c6163          	bltu	s8,t1,800085e8 <loadStoreDyn+0x274>
80007f2a:	6e20                	flw	fs0,88(a2)
80007f2c:	206fa3c3          	fmadd.s	ft7,ft11,ft6,ft4,rdn
80007f30:	6469                	lui	s0,0x1a
80007f32:	6e65                	lui	t3,0x19
80007f34:	6974                	flw	fa3,84(a0)
80007f36:	6966                	flw	fs2,88(sp)
80007f38:	61646163          	bltu	s0,s6,8000853a <loadStoreDyn+0x1c6>
80007f3c:	0a21                	addi	s4,s4,8
80007f3e:	0000                	unimp
80007f40:	7274                	flw	fa3,100(a2)
80007f42:	7061                	c.lui	zero,0xffff8
80007f44:	000a                	c.slli	zero,0x2
80007f46:	0000                	unimp
80007f48:	7065                	c.lui	zero,0xffff9
80007f4a:	00203a63          	0x203a63
80007f4e:	0000                	unimp
80007f50:	636d                	lui	t1,0x1b
80007f52:	7561                	lui	a0,0xffff8
80007f54:	203a6573          	csrrsi	a0,hideleg,20
80007f58:	0000                	unimp
80007f5a:	0000                	unimp
80007f5c:	0700                	addi	s0,sp,896
80007f5e:	8000                	0x8000
80007f60:	0708                	addi	a0,sp,896
80007f62:	8000                	0x8000
80007f64:	0708                	addi	a0,sp,896
80007f66:	8000                	0x8000
80007f68:	0708                	addi	a0,sp,896
80007f6a:	8000                	0x8000
80007f6c:	0708                	addi	a0,sp,896
80007f6e:	8000                	0x8000
80007f70:	0708                	addi	a0,sp,896
80007f72:	8000                	0x8000
80007f74:	0708                	addi	a0,sp,896
80007f76:	8000                	0x8000
80007f78:	0708                	addi	a0,sp,896
80007f7a:	8000                	0x8000
80007f7c:	0708                	addi	a0,sp,896
80007f7e:	8000                	0x8000
80007f80:	0708                	addi	a0,sp,896
80007f82:	8000                	0x8000
80007f84:	06e0                	addi	s0,sp,844
80007f86:	8000                	0x8000
80007f88:	0708                	addi	a0,sp,896
80007f8a:	8000                	0x8000
80007f8c:	0708                	addi	a0,sp,896
80007f8e:	8000                	0x8000
80007f90:	0708                	addi	a0,sp,896
80007f92:	8000                	0x8000
80007f94:	0708                	addi	a0,sp,896
80007f96:	8000                	0x8000
80007f98:	0708                	addi	a0,sp,896
80007f9a:	8000                	0x8000
80007f9c:	0708                	addi	a0,sp,896
80007f9e:	8000                	0x8000
80007fa0:	0708                	addi	a0,sp,896
80007fa2:	8000                	0x8000
80007fa4:	0708                	addi	a0,sp,896
80007fa6:	8000                	0x8000
80007fa8:	0708                	addi	a0,sp,896
80007faa:	8000                	0x8000
80007fac:	06f0                	addi	a2,sp,844
80007fae:	8000                	0x8000
80007fb0:	0708                	addi	a0,sp,896
80007fb2:	8000                	0x8000
80007fb4:	0708                	addi	a0,sp,896
80007fb6:	8000                	0x8000
80007fb8:	0708                	addi	a0,sp,896
80007fba:	8000                	0x8000
80007fbc:	0708                	addi	a0,sp,896
80007fbe:	8000                	0x8000
80007fc0:	0708                	addi	a0,sp,896
80007fc2:	8000                	0x8000
80007fc4:	0708                	addi	a0,sp,896
80007fc6:	8000                	0x8000
80007fc8:	0708                	addi	a0,sp,896
80007fca:	8000                	0x8000
80007fcc:	0708                	addi	a0,sp,896
80007fce:	8000                	0x8000
80007fd0:	0708                	addi	a0,sp,896
80007fd2:	8000                	0x8000
80007fd4:	06a4                	addi	s1,sp,840
80007fd6:	8000                	0x8000
80007fd8:	0708                	addi	a0,sp,896
80007fda:	8000                	0x8000
80007fdc:	0708                	addi	a0,sp,896
80007fde:	8000                	0x8000
80007fe0:	0708                	addi	a0,sp,896
80007fe2:	8000                	0x8000
80007fe4:	0708                	addi	a0,sp,896
80007fe6:	8000                	0x8000
80007fe8:	0708                	addi	a0,sp,896
80007fea:	8000                	0x8000
80007fec:	0708                	addi	a0,sp,896
80007fee:	8000                	0x8000
80007ff0:	0708                	addi	a0,sp,896
80007ff2:	8000                	0x8000
80007ff4:	0708                	addi	a0,sp,896
80007ff6:	8000                	0x8000
80007ff8:	0708                	addi	a0,sp,896
80007ffa:	8000                	0x8000
80007ffc:	0680                	addi	s0,sp,832
80007ffe:	8000                	0x8000
80008000:	0708                	addi	a0,sp,896
80008002:	8000                	0x8000
80008004:	0708                	addi	a0,sp,896
80008006:	8000                	0x8000
80008008:	0708                	addi	a0,sp,896
8000800a:	8000                	0x8000
8000800c:	0708                	addi	a0,sp,896
8000800e:	8000                	0x8000
80008010:	0708                	addi	a0,sp,896
80008012:	8000                	0x8000
80008014:	0708                	addi	a0,sp,896
80008016:	8000                	0x8000
80008018:	0708                	addi	a0,sp,896
8000801a:	8000                	0x8000
8000801c:	0708                	addi	a0,sp,896
8000801e:	8000                	0x8000
80008020:	0708                	addi	a0,sp,896
80008022:	8000                	0x8000
80008024:	0708                	addi	a0,sp,896
80008026:	8000                	0x8000
80008028:	0708                	addi	a0,sp,896
8000802a:	8000                	0x8000
8000802c:	0708                	addi	a0,sp,896
8000802e:	8000                	0x8000
80008030:	0708                	addi	a0,sp,896
80008032:	8000                	0x8000
80008034:	0708                	addi	a0,sp,896
80008036:	8000                	0x8000
80008038:	0708                	addi	a0,sp,896
8000803a:	8000                	0x8000
8000803c:	05f8                	addi	a4,sp,716
8000803e:	8000                	0x8000
80008040:	7830                	flw	fa2,112(s0)
80008042:	0000                	unimp
80008044:	500a                	0x500a
80008046:	6f72                	flw	ft10,28(sp)
80008048:	206d6167          	0x206d6167
8000804c:	6168                	flw	fa0,68(a0)
8000804e:	78652073          	csrs	0x786,a0
80008052:	7469                	lui	s0,0xffffa
80008054:	6465                	lui	s0,0x19
80008056:	7720                	flw	fs0,104(a4)
80008058:	7469                	lui	s0,0xffffa
8000805a:	2068                	fld	fa0,192(s0)
8000805c:	65646f63          	bltu	s0,s6,800086ba <loadStoreDyn+0x346>
80008060:	003a                	c.slli	zero,0xe
80008062:	0000                	unimp
80008064:	000d                	c.nop	3
80008066:	0000                	unimp
80008068:	4449                	li	s0,18
8000806a:	454c                	lw	a1,12(a0)
8000806c:	0000                	unimp
8000806e:	0000                	unimp
80008070:	654e                	flw	fa0,208(sp)
80008072:	70612077          	0x70612077
80008076:	6c70                	flw	fa2,92(s0)
80008078:	6369                	lui	t1,0x1a
8000807a:	7461                	lui	s0,0xffff8
8000807c:	6f69                	lui	t5,0x1a
8000807e:	206e                	fld	ft0,216(sp)
80008080:	6572                	flw	fa0,28(sp)
80008082:	74736967          	0x74736967
80008086:	7265                	lui	tp,0xffff9
80008088:	6465                	lui	s0,0x19
8000808a:	2d20                	fld	fs0,88(a0)
8000808c:	4920                	lw	s0,80(a0)
8000808e:	3a44                	fld	fs1,176(a2)
80008090:	0020                	addi	s0,sp,8
80008092:	0000                	unimp
80008094:	6572                	flw	fa0,28(sp)
80008096:	7574                	flw	fa3,108(a0)
80008098:	6e72                	flw	ft8,28(sp)
8000809a:	6e69                	lui	t3,0x1a
8000809c:	72652067          	0x72652067
800080a0:	6f72                	flw	ft10,28(sp)
800080a2:	00000a33          	add	s4,zero,zero
800080a6:	0000                	unimp
800080a8:	6572                	flw	fa0,28(sp)
800080aa:	7574                	flw	fa3,108(a0)
800080ac:	6e72                	flw	ft8,28(sp)
800080ae:	6e69                	lui	t3,0x1a
800080b0:	72652067          	0x72652067
800080b4:	6f72                	flw	ft10,28(sp)
800080b6:	0a34                	addi	a3,sp,280
800080b8:	0000                	unimp
800080ba:	0000                	unimp
800080bc:	20736177          	0x20736177
800080c0:	7865                	lui	a6,0xffff9
800080c2:	6365                	lui	t1,0x19
800080c4:	7475                	lui	s0,0xffffd
800080c6:	6465                	lui	s0,0x19
800080c8:	6920                	flw	fs0,80(a0)
800080ca:	206e                	fld	ft0,216(sp)
800080cc:	0000                	unimp
800080ce:	0000                	unimp
800080d0:	7041                	c.lui	zero,0xffff0
800080d2:	6c70                	flw	fa2,92(s0)
800080d4:	6369                	lui	t1,0x1a
800080d6:	7461                	lui	s0,0xffff8
800080d8:	6f69                	lui	t5,0x1a
800080da:	206e                	fld	ft0,216(sp)
800080dc:	0000                	unimp
800080de:	0000                	unimp
800080e0:	0909                	addi	s2,s2,2
800080e2:	6854                	flw	fa3,20(s0)
800080e4:	7369                	lui	t1,0xffffa
800080e6:	6120                	flw	fs0,64(a0)
800080e8:	7070                	flw	fa2,100(s0)
800080ea:	696c                	flw	fa1,84(a0)
800080ec:	69746163          	bltu	s0,s7,8000876e <loadStoreDyn+0x3fa>
800080f0:	73206e6f          	jal	t3,8000e822 <__global_pointer$+0x56a2>
800080f4:	6974                	flw	fa3,84(a0)
800080f6:	6c6c                	flw	fa1,92(s0)
800080f8:	6e20                	flw	fs0,88(a2)
800080fa:	6565                	lui	a0,0x19
800080fc:	2064                	fld	fs1,192(s0)
800080fe:	6f74                	flw	fa3,92(a4)
80008100:	7220                	flw	fs0,96(a2)
80008102:	6e75                	lui	t3,0x1d
80008104:	203a                	fld	ft0,392(sp)
80008106:	0000                	unimp
80008108:	0909                	addi	s2,s2,2
8000810a:	6854                	flw	fa3,20(s0)
8000810c:	7369                	lui	t1,0xffffa
8000810e:	6120                	flw	fs0,64(a0)
80008110:	7070                	flw	fa2,100(s0)
80008112:	696c                	flw	fa1,84(a0)
80008114:	69746163          	bltu	s0,s7,80008796 <loadStoreDyn+0x422>
80008118:	69206e6f          	jal	t3,8000e7aa <__global_pointer$+0x562a>
8000811c:	4f442073          	csrs	0x4f4,s0
80008120:	454e                	lw	a0,208(sp)
80008122:	0a21                	addi	s4,s4,8
80008124:	0000                	unimp
80008126:	0000                	unimp
80008128:	6572                	flw	fa0,28(sp)
8000812a:	7574                	flw	fa3,108(a0)
8000812c:	6e72                	flw	ft8,28(sp)
8000812e:	6e69                	lui	t3,0x1a
80008130:	72652067          	0x72652067
80008134:	6f72                	flw	ft10,28(sp)
80008136:	0a35                	addi	s4,s4,13
80008138:	0000                	unimp
8000813a:	0000                	unimp
8000813c:	6572                	flw	fa0,28(sp)
8000813e:	7574                	flw	fa3,108(a0)
80008140:	6e72                	flw	ft8,28(sp)
80008142:	6e69                	lui	t3,0x1a
80008144:	72652067          	0x72652067
80008148:	6f72                	flw	ft10,28(sp)
8000814a:	0a36                	slli	s4,s4,0xd
8000814c:	0000                	unimp
8000814e:	0000                	unimp
80008150:	2049                	jal	800081d2 <_write_r+0x372>
80008152:	20746f67          	0x20746f67
80008156:	2061                	jal	800081de <_write_r+0x37e>
80008158:	7266                	flw	ft4,120(sp)
8000815a:	6565                	lui	a0,0x19
8000815c:	7320                	flw	fs0,96(a4)
8000815e:	7265                	lui	tp,0xffff9
80008160:	6976                	flw	fs2,92(sp)
80008162:	73206563          	bltu	zero,s2,8000888c <loadStoreDyn+0x518>
80008166:	6f6c                	flw	fa1,92(a4)
80008168:	212d                	jal	80008592 <loadStoreDyn+0x21e>
8000816a:	2021                	jal	80008172 <_write_r+0x312>
8000816c:	3e2d                	jal	80007ca6 <main+0x66>
8000816e:	0020                	addi	s0,sp,8
80008170:	7041                	c.lui	zero,0xffff0
80008172:	6c70                	flw	fa2,92(s0)
80008174:	6369                	lui	t1,0x1a
80008176:	7461                	lui	s0,0xffff8
80008178:	6f69                	lui	t5,0x1a
8000817a:	206e                	fld	ft0,216(sp)
8000817c:	6c61                	lui	s8,0x18
8000817e:	6f6c                	flw	fa1,92(a4)
80008180:	65746163          	bltu	s0,s7,800087c2 <loadStoreDyn+0x44e>
80008184:	3a64                	fld	fs1,240(a2)
80008186:	0020                	addi	s0,sp,8
80008188:	5309                	li	t1,-30
8000818a:	6174                	flw	fa3,68(a0)
8000818c:	7472                	flw	fs0,60(sp)
8000818e:	6320                	flw	fs0,64(a4)
80008190:	616d6d6f          	jal	s10,800de7a6 <__stack_top+0x9b396>
80008194:	646e                	flw	fs0,216(sp)
80008196:	7320                	flw	fs0,96(a4)
80008198:	6e65                	lui	t3,0x19
8000819a:	2074                	fld	fa3,192(s0)
8000819c:	6f74                	flw	fa3,92(a4)
8000819e:	6520                	flw	fs0,72(a0)
800081a0:	6576                	flw	fa0,92(sp)
800081a2:	7972                	flw	fs2,60(sp)
800081a4:	7420                	flw	fs0,104(s0)
800081a6:	7361                	lui	t1,0xffff8
800081a8:	000a2e6b          	0xa2e6b
800081ac:	6572                	flw	fa0,28(sp)
800081ae:	7574                	flw	fa3,108(a0)
800081b0:	6e72                	flw	ft8,28(sp)
800081b2:	6e69                	lui	t3,0x1a
800081b4:	72652067          	0x72652067
800081b8:	6f72                	flw	ft10,28(sp)
800081ba:	0a30                	addi	a2,sp,280
800081bc:	0000                	unimp
800081be:	0000                	unimp
800081c0:	6572                	flw	fa0,28(sp)
800081c2:	7574                	flw	fa3,108(a0)
800081c4:	6e72                	flw	ft8,28(sp)
800081c6:	6e69                	lui	t3,0x1a
800081c8:	72652067          	0x72652067
800081cc:	6f72                	flw	ft10,28(sp)
800081ce:	0a31                	addi	s4,s4,12
800081d0:	0000                	unimp
800081d2:	0000                	unimp
800081d4:	4544                	lw	s1,12(a0)
800081d6:	2055                	jal	8000827a <_write_r+0x41a>
800081d8:	5552                	lw	a0,52(sp)
800081da:	4d49                	li	s10,18
800081dc:	4e20                	lw	s0,88(a2)
800081de:	5041204f          	fnmadd.s	ft0,ft2,ft4,fa0,rdn
800081e2:	5f49                	li	t5,-14
800081e4:	46746547          	fmsub.q	fa0,fs0,ft7,fs0,unknown
800081e8:	6572                	flw	fa0,28(sp)
800081ea:	5465                	li	s0,-7
800081ec:	7361                	lui	t1,0xffff8
800081ee:	6f6c536b          	0x6f6c536b
800081f2:	2874                	fld	fa3,208(s0)
800081f4:	0a29                	addi	s4,s4,10
800081f6:	0000                	unimp
800081f8:	20746f47          	fmsub.s	ft10,fs0,ft7,ft4,unknown
800081fc:	746f6c73          	csrrsi	s8,0x746,30
80008200:	203a                	fld	ft0,392(sp)
80008202:	0000                	unimp
80008204:	6154                	flw	fa3,4(a0)
80008206:	74206b73          	csrrsi	s6,0x742,0
8000820a:	6c61746f          	jal	s0,8001f8d0 <__global_pointer$+0x16750>
8000820e:	7320                	flw	fs0,96(a4)
80008210:	7a69                	lui	s4,0xffffa
80008212:	2065                	jal	800082ba <_write_r+0x45a>
80008214:	7428                	flw	fa0,104(s0)
80008216:	7478                	flw	fa4,108(s0)
80008218:	7373622b          	0x7373622b
8000821c:	3a29                	jal	80007b36 <API_NI_Handler+0x9ce>
8000821e:	0020                	addi	s0,sp,8
80008220:	6154                	flw	fa3,4(a0)
80008222:	61206b73          	csrrsi	s6,0x612,0
80008226:	6464                	flw	fs1,76(s0)
80008228:	3a72                	fld	fs4,312(sp)
8000822a:	0020                	addi	s0,sp,8
8000822c:	6572                	flw	fa0,28(sp)
8000822e:	7574                	flw	fa3,108(a0)
80008230:	6e72                	flw	ft8,28(sp)
80008232:	6e69                	lui	t3,0x1a
80008234:	72652067          	0x72652067
80008238:	6f72                	flw	ft10,28(sp)
8000823a:	0a32                	slli	s4,s4,0xc
8000823c:	0000                	unimp
8000823e:	0000                	unimp
80008240:	614c                	flw	fa1,4(a0)
80008242:	6154                	flw	fa3,4(a0)
80008244:	00006b73          	csrrsi	s6,ustatus,0
80008248:	5245                	li	tp,-15
8000824a:	4f52                	lw	t5,20(sp)
8000824c:	2052                	fld	ft0,272(sp)
8000824e:	202d                	jal	80008278 <_write_r+0x418>
80008250:	5041                	c.li	zero,-16
80008252:	5f49                	li	t5,-14
80008254:	6154                	flw	fa3,4(a0)
80008256:	74536b73          	csrrsi	s6,0x745,6
8000825a:	7261                	lui	tp,0xffff8
8000825c:	2174                	fld	fa3,192(a0)
8000825e:	2121                	jal	80008666 <loadStoreDyn+0x2f2>
80008260:	000a                	c.slli	zero,0x2
80008262:	0000                	unimp
80008264:	7061                	c.lui	zero,0xffff8
80008266:	3a70                	fld	fa2,240(a2)
80008268:	0020                	addi	s0,sp,8
8000826a:	0000                	unimp
8000826c:	6946                	flw	fs2,80(sp)
8000826e:	696e                	flw	fs2,216(sp)
80008270:	6e696873          	csrrsi	a6,0x6e6,18
80008274:	61742067          	0x61742067
80008278:	003a6b73          	csrrsi	s6,fcsr,20
8000827c:	7246                	flw	ft4,112(sp)
8000827e:	73206d6f          	jal	s10,8000e9b0 <__global_pointer$+0x5830>
80008282:	6f6c                	flw	fa1,92(a4)
80008284:	3a74                	fld	fa3,240(a2)
80008286:	0020                	addi	s0,sp,8
80008288:	6564                	flw	fs1,76(a0)
8000828a:	656c                	flw	fa1,76(a0)
8000828c:	6574                	flw	fa3,76(a0)
8000828e:	2064                	fld	fs1,192(s0)
80008290:	68746977          	0x68746977
80008294:	7320                	flw	fs0,96(a4)
80008296:	6375                	lui	t1,0x1d
80008298:	73736573          	csrrsi	a0,0x737,6
8000829c:	2021                	jal	800082a4 <_write_r+0x444>
8000829e:	7246                	flw	ft4,112(sp)
800082a0:	61206d6f          	jal	s10,8000e8b2 <__global_pointer$+0x5732>
800082a4:	7070                	flw	fa2,100(s0)
800082a6:	696c                	flw	fa1,84(a0)
800082a8:	69746163          	bltu	s0,s7,8000892a <loadStoreDyn+0x5b6>
800082ac:	00206e6f          	jal	t3,8000e2ae <__global_pointer$+0x512e>
800082b0:	6154                	flw	fa3,4(a0)
800082b2:	00206b73          	csrrsi	s6,frm,0
800082b6:	0000                	unimp
800082b8:	735d                	lui	t1,0xffff7
800082ba:	6174                	flw	fa3,68(a0)
800082bc:	7574                	flw	fa3,108(a0)
800082be:	00203a73          	csrrc	s4,frm,zero
800082c2:	0000                	unimp
800082c4:	6154                	flw	fa3,4(a0)
800082c6:	694c6b73          	csrrsi	s6,0x694,24
800082ca:	005b7473          	csrrci	s0,utvec,22
800082ce:	0000                	unimp
800082d0:	6154                	flw	fa3,4(a0)
800082d2:	694c6b73          	csrrsi	s6,0x694,24
800082d6:	695b7473          	csrrci	s0,0x695,22
800082da:	2e5d                	jal	80008690 <loadStoreDyn+0x31c>
800082dc:	74617473          	csrrci	s0,0x746,2
800082e0:	7375                	lui	t1,0xffffd
800082e2:	0020                	addi	s0,sp,8
800082e4:	6552                	flw	fa0,20(sp)
800082e6:	7574                	flw	fa3,108(a0)
800082e8:	6e72                	flw	ft8,28(sp)
800082ea:	6e69                	lui	t3,0x1a
800082ec:	65622067          	0x65622067
800082f0:	73756163          	bltu	a0,s7,80008a12 <__data_load+0x72>
800082f4:	2065                	jal	8000839c <loadStoreDyn+0x28>
800082f6:	203a666f          	jal	a2,800aecf8 <__stack_top+0x6b8e8>
800082fa:	0000                	unimp
800082fc:	3a69                	jal	80007c96 <main+0x56>
800082fe:	0020                	addi	s0,sp,8
80008300:	74617473          	csrrci	s0,0x746,2
80008304:	7375                	lui	t1,0xffffd
80008306:	203a                	fld	ft0,392(sp)
80008308:	0000                	unimp
8000830a:	0000                	unimp
8000830c:	6f68                	flw	fa0,92(a4)
8000830e:	646c                	flw	fa1,76(s0)
80008310:	7265                	lui	tp,0xffff9
80008312:	203a                	fld	ft0,392(sp)
80008314:	0000                	unimp
80008316:	0000                	unimp
80008318:	2d2d                	jal	80008952 <loadStoreDyn+0x5de>
8000831a:	0a2d                	addi	s4,s4,11
8000831c:	0000                	unimp
	...

80008320 <powerAvgBufferIdle>:
80008320:	0031 0000 003e 0000 004d 0000               1...>...M...

8000832c <powerSwitchControlIdle>:
8000832c:	000e 0000 0012 0000 0016 0000               ............

80008338 <powerAvgBufferActive>:
80008338:	0076 0000 0097 0000 00bc 0000               v...........

80008344 <powerSwitchControlActive>:
80008344:	0029 0000 0034 0000 0041 0000               )...4...A...

80008350 <readEnergyMemory>:
80008350:	18cf 0000 1e74 0000 0340 0000               ....t...@...

8000835c <writeEnergyMemory>:
8000835c:	228b 0000 2b23 0000 0240 0000               ."..#+..@...

80008368 <arithDyn>:
80008368:	035b 0000 0449 0000 086e 0000               [...I...n...

80008374 <loadStoreDyn>:
80008374:	0622 0000 07d1 0000 09d9 0000 2d2d 2d2d     "...........----
80008384:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
80008394:	2d2d 2d2d 2d2d 000a 6f4c 6461 3a73 0909     ------..Loads:..
800083a4:	0000 0000 7453 726f 7365 093a 0009 0000     ....Stores:.....
800083b4:	744f 6568 7372 093a 0009 0000 7964 616e     Others:.....dyna
800083c4:	696d 4563 656e 6772 5f79 6f52 7475 7265     micEnergy_Router
800083d4:	3e20 203e 0000 0000 6f74 6174 206c 6e69      >> ....total in
800083e4:	7473 7572 7463 6f69 736e 7e7e 3e7e 0020     structions~~~> .
800083f4:	6f54 6174 456c 656e 6772 3a79 0020 0000     TotalEnergy: ...
80008404:	6e45 7265 7967 6350 746b 7320 6e65 0a74     EnergyPckt sent.
80008414:	0000 0000 000a 0000 7266 6d6f 203a 0000     ........from: ..
80008424:	736d 2067 6f70 6e69 6574 3a72 0020 0000     msg pointer: ...
80008434:	694d 686e 2061 6174 6b73 4920 3a44 0020     Minha task ID: .
80008444:	6553 646e 6e69 5167 6575 6575 665f 6f72     SendingQueue_fro
80008454:	746e 203a 0000 0000 6564 6373 6e6f 6568     nt: ....desconhe
80008464:	6963 6f64 2121 0020 5041 5f49 7254 3279     cido!! .API_Try2
80008474:	6553 646e 7320 6375 6563 7373 0a21 0000     Send success!...
80008484:	5041 5f49 7254 3279 6553 646e 6620 6961     API_Try2Send fai
80008494:	656c 2064 202d 6d65 7470 2079 6553 646e     led - empty Send
800084a4:	7551 7565 2165 000a 5041 5f49 7254 3279     Queue!..API_Try2
800084b4:	6553 646e 6620 6961 656c 2064 202d 494e     Send failed - NI
800084c4:	545f 2058 636f 7563 6970 6465 0a21 0000     _TX occupied!...
800084d4:	6174 6b73 6c53 746f 203a 0000 6920 206e     taskSlot: .. in 
800084e4:	6874 2065 4950 4550 7320 6f6c 2074 0000     the PIPE slot ..
800084f4:	6441 6964 676e 6120 6d20 6773 7420 206f     Adding a msg to 
80008504:	6174 6b73 0020 0000 7266 6d6f 6120 7070     task ...from app
80008514:	203a 0000 3e3e 3e3e 413e 6863 6965 6120     : ..>>>>>Achei a
80008524:	7571 2069 6f6e 7020 6e65 6964 676e 0a21     qui no pending!.
80008534:	0000 0000 7345 6570 6172 646e 206f 654d     ....Esperando Me
80008544:	736e 6761 6d65 0a21 0000 0000 654d 736e     nsagem!.....Mens
80008554:	6761 6d65 5220 6365 6265 6469 2161 000a     agem Recebida!..
80008564:	5854 6920 746e 7265 7572 7470 6f69 206e     TX interruption 
80008574:	6163 6374 6568 0a64 0000 0000 5852 6920     catched.....RX i
80008584:	746e 7265 7572 7470 6f69 206e 6163 6374     nterruption catc
80008594:	6568 0a64 0000 0000 4e31 5f49 5852 4420     hed.....1NI_RX D
800085a4:	4e4f 2145 000a 0000 4154 4b53 415f 4c4c     ONE!....TASK_ALL
800085b4:	434f 5441 4f49 5f4e 4553 444e 000a 0000     OCATION_SEND....
800085c4:	6154 6b73 7320 6f6c 3a74 0020 6154 6b73     Task slot: .Task
800085d4:	7320 6f6c 2074 6154 6b73 6441 7264 203a      slot TaskAddr: 
800085e4:	0000 0000 4e32 5f49 5852 4420 4e4f 2145     ....2NI_RX DONE!
800085f4:	000a 0000 7266 6d6f 6120 7070 696c 6163     ....from applica
80008604:	6974 6e6f 0020 0000 4946 494e 4853 4445     tion ...FINISHED
80008614:	203a 6154 6b73 0020 4e33 5f49 5852 4420     : Task .3NI_RX D
80008624:	4e4f 2145 000a 0000 4154 4b53 415f 4c4c     ONE!....TASK_ALL
80008634:	434f 5441 4f49 5f4e 4946 494e 4853 4445     OCATION_FINISHED
80008644:	000a 0000 4e34 5f49 5852 4420 4e4f 2145     ....4NI_RX DONE!
80008654:	000a 0000 4154 4b53 415f 4c4c 434f 5441     ....TASK_ALLOCAT
80008664:	4f49 5f4e 5553 4343 5345 0a53 0000 0000     ION_SUCCESS.....
80008674:	4e35 5f49 5852 4420 4e4f 2145 000a 0000     5NI_RX DONE!....
80008684:	6843 6765 756f 7520 206d 4154 4b53 535f     Chegou um TASK_S
80008694:	4154 5452 0a21 0000 4e36 5f49 5852 4420     TART!...6NI_RX D
800086a4:	4e4f 2145 000a 0000 6843 6765 756f 7520     ONE!....Chegou u
800086b4:	206d 4154 4b53 525f 4e55 0a21 0000 0000     m TASK_RUN!.....
800086c4:	6620 6f72 206d 7061 2070 0000 7453 7261      from app ..Star
800086d4:	6974 676e 5420 7361 206b 0000 6174 6b73     ting Task ..task
800086e4:	6c53 746f 7220 6e75 203a 0000 4e37 5f49     Slot run: ..7NI_
800086f4:	5852 4420 4e4f 2145 000a 0000 6154 6b73     RX DONE!....Task
80008704:	203a 0000 6843 6765 756f 7520 206d 656d     : ..Chegou um me
80008714:	7373 6761 2065 6572 7571 7365 2174 4120     ssage request! A
80008724:	7070 203a 0000 0000 654d 736e 6761 6d65     pp: ....Mensagem
80008734:	6e20 a3c3 206f 6e65 6f63 746e 6172 6164      n..o encontrada
80008744:	202c 6461 6369 6f69 616e 646e 206f 6f61     , adicionando ao
80008754:	5020 6e65 6964 676e 6552 2171 000a 0000      PendingReq!....
80008764:	654d 736e 6761 6d65 6520 636e 6e6f 7274     Mensagem encontr
80008774:	6461 2061 6f6e 7020 7069 2165 000a 0000     ada no pipe!....
80008784:	4e38 5f49 5852 4420 4e4f 2145 000a 0000     8NI_RX DONE!....
80008794:	6554 206d 6d75 2061 656d 736e 6761 6d65     Tem uma mensagem
800087a4:	6320 6568 6167 646e 2e6f 2e2e 000a 0000      chegando.......
800087b4:	4e39 5f49 5852 4420 4e4f 2145 000a 0000     9NI_RX DONE!....
800087c4:	3031 494e 525f 2058 4f44 454e 0a21 0000     10NI_RX DONE!...
800087d4:	6552 6563 6562 646e 206f 6170 6f63 6574     Recebendo pacote
800087e4:	6420 2065 6574 706d 7265 7461 7275 0061      de temperatura.
800087f4:	3131 494e 525f 2058 4f44 454e 0a21 0000     11NI_RX DONE!...
80008804:	6574 706d 203a 0000 6570 0000 3231 494e     temp: ..pe..12NI
80008814:	525f 2058 4f44 454e 0a21 0000 3331 494e     _RX DONE!...13NI
80008824:	525f 2058 4f44 454e 0a21 0000 5245 4f52     _RX DONE!...ERRO
80008834:	2052 7845 6574 6e72 6c61 325f 495f 5152     R External_2_IRQ
80008844:	6148 646e 656c 2072 6e55 6e6b 776f 2d6e     Handler Unknown-
80008854:	6553 7672 6369 2065 0000 0000 3431 494e     Service ....14NI
80008864:	525f 2058 4f44 454e 0a21 0000 0a0d 7246     _RX DONE!.....Fr
80008874:	6565 5452 534f 4520 6178 706d 656c 0a0d     eeRTOS Example..
80008884:	0000 0000 200a 6843 6f72 6f6e 2073 6c70     ..... Chronos pl
80008894:	7461 6f66 6d72 6920 696e 6974 6c61 7a69     atform initializ
800088a4:	6e69 2e67 2e2e 0a20 0000 0000 200a 6854     ing... ...... Th
800088b4:	7369 7420 7265 696d 616e 206c 6562 6f6c     is terminal belo
800088c4:	676e 2073 6f74 7420 6568 6120 6464 6572     ngs to the addre
800088d4:	7373 203a 0000 0000 000a 0000 200a 6854     ss: ......... Th
800088e4:	7369 7020 6f72 6563 7373 726f 6920 2073     is processor is 
800088f4:	6874 2065 6c47 626f 6c61 4d20 7361 6574     the Global Maste
80008904:	3a72 0a20 0000 0000 6c47 626f 6c61 614d     r: .....GlobalMa
80008914:	7473 7265 0000 0000 200a 6854 7369 7020     ster..... This p
80008924:	6f72 6563 7373 726f 6920 2073 2061 6c53     rocessor is a Sl
80008934:	7661 3a65 0a20 0000 4920 4c44 2e45 2e2e     ave: ... IDLE...
80008944:	0a20 0000 6c47 626f 6c61 614d 7473 7265      ...GlobalMaster
80008954:	6341 6974 6576 0000 4720 6f6c 6162 4d6c     Active.. GlobalM
80008964:	7361 6574 5272 756f 6974 656e 2e2e 0d2e     asterRoutine....
80008974:	000a 0000 0000 0000 0000 0000               ............
