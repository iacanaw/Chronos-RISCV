
miv-rv32im-freertos-port-test.elf:     file format elf32-littleriscv
miv-rv32im-freertos-port-test.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000000

Program Header:
    LOAD off    0x00001000 vaddr 0x80000000 paddr 0x80000000 align 2**12
         filesz 0x00004e90 memsz 0x0003f1f0 flags rwx

Sections:
Idx Name           Size      VMA       LMA       File off  Algn  Flags
  0 .text          00004d90  80000000  80000000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sdata         00000020  80004d90  80004d90  00005d90  2**4  CONTENTS, ALLOC, LOAD, DATA
  2 .data          000000e0  80004db0  80004db0  00005db0  2**4  CONTENTS, ALLOC, LOAD, DATA
  3 .sbss          00000070  80004e90  80004e90  00005e90  2**4  ALLOC
  4 .bss           0001a2f0  80004f00  80004f00  00005e90  2**4  ALLOC
  5 .heap          00010000  8001f1f0  8001f1f0  00005e90  2**4  ALLOC
  6 .stack         00010000  8002f1f0  8002f1f0  00005e90  2**4  ALLOC
  7 .debug_line    0000a06d  00000000  00000000  00005e90  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_info    0000eba7  00000000  00000000  0000fefd  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev  00002979  00000000  00000000  0001eaa4  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000008a8  00000000  00000000  00021420  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_str     000128f1  00000000  00000000  00021cc8  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges  00000778  00000000  00000000  000345b9  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro   000058c5  00000000  00000000  00034d31  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment       00000039  00000000  00000000  0003a5f6  2**0  CONTENTS, READONLY
 15 .debug_frame   00001f68  00000000  00000000  0003a630  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
80000000 l    d  .text	00000000 .text
80004d90 l    d  .sdata	00000000 .sdata
80004db0 l    d  .data	00000000 .data
80004e90 l    d  .sbss	00000000 .sbss
80004f00 l    d  .bss	00000000 .bss
8001f1f0 l    d  .heap	00000000 .heap
8002f1f0 l    d  .stack	00000000 .stack
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./riscv_hal/entry.o
8000000c l       .text	00000000 handle_reset
80000004 l       .text	00000000 nmi_vector
80000008 l       .text	00000000 trap_vector
80000030 l       .text	00000000 trap_entry
00000000 l    df *ABS*	00000000 init.c
80000160 l     F .text	00000050 zero_section
00000000 l    df *ABS*	00000000 riscv_hal.c
80000238 l     F .text	000000b8 PLIC_DisableIRQ
800002f0 l     F .text	00000044 PLIC_ClaimIRQ
80000334 l     F .text	0000004c PLIC_CompleteIRQ
80004e90 l     O .sbss	00000008 g_systick_increment
00000000 l    df *ABS*	00000000 riscv_hal_stubs.c
00000000 l    df *ABS*	00000000 syscall.c
80004e98 l     O .sbss	00000008 g_stdio_uart
80004ea0 l     O .sbss	00000004 g_stdio_uart_init_done
80000d40 l     F .text	00000030 stub
00000000 l    df *ABS*	00000000 core_uart_apb.c
00000000 l    df *ABS*	00000000 heap_2.c
80004f00 l     O .bss	00019000 ucHeap
80004ea4 l     O .sbss	00000008 xStart
80004eac l     O .sbss	00000008 xEnd
80004d90 l     O .sdata	00000004 xFreeBytesRemaining
80004eb4 l     O .sbss	00000004 xHeapHasBeenInitialised.2777
80001454 l     F .text	00000074 prvHeapInit
00000000 l    df *ABS*	00000000 port.c
800014c8 l     F .text	0000004c raise_soft_interrupt
80004d94 l     O .sdata	00000004 uxCriticalNesting
80004d98 l     O .sdata	00000004 mtime
80004d9c l     O .sdata	00000004 mtimecmp
80001588 l     F .text	000000cc prvSetNextTimerInterrupt
80001720 l     F .text	0000002c prvTaskExitError
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 tasks.c
8001df00 l     O .bss	00000064 pxReadyTasksLists
8001df64 l     O .bss	00000014 xDelayedTaskList1
8001df78 l     O .bss	00000014 xDelayedTaskList2
80004ec0 l     O .sbss	00000004 pxDelayedTaskList
80004ec4 l     O .sbss	00000004 pxOverflowDelayedTaskList
8001df8c l     O .bss	00000014 xPendingReadyList
8001dfa0 l     O .bss	00000014 xTasksWaitingTermination
80004ec8 l     O .sbss	00000004 uxTasksDeleted
8001dfb4 l     O .bss	00000014 xSuspendedTaskList
80004ecc l     O .sbss	00000004 uxCurrentNumberOfTasks
80004ed0 l     O .sbss	00000004 xTickCount
80004ed4 l     O .sbss	00000004 uxTopReadyPriority
80004ed8 l     O .sbss	00000004 xSchedulerRunning
80004edc l     O .sbss	00000004 uxPendedTicks
80004ee0 l     O .sbss	00000004 xYieldPending
80004ee4 l     O .sbss	00000004 xNumOfOverflows
80004ee8 l     O .sbss	00000004 uxTaskNumber
80004eec l     O .sbss	00000004 xNextTaskUnblockTime
80004ef0 l     O .sbss	00000004 uxSchedulerSuspended
800028c8 l     F .text	000000c0 prvAllocateTCBAndStack
800025a8 l     F .text	00000138 prvInitialiseTCBVariables
800026e0 l     F .text	000000c0 prvInitialiseTaskLists
800029c8 l     F .text	00000060 prvResetNextTaskUnblockTime
80002840 l     F .text	00000088 prvAddCurrentTaskToDelayedList
80002574 l     F .text	00000034 prvIdleTask
800027a0 l     F .text	000000a0 prvCheckTasksWaitingTermination
80002988 l     F .text	00000040 prvDeleteTCB
00000000 l    df *ABS*	00000000 chronos.c
80002a28 l     F .text	000000b4 PLIC_EnableIRQ
80002adc l     F .text	0000003c PLIC_SetPriority
00000000 l    df *ABS*	00000000 applications.c
00000000 l    df *ABS*	00000000 packet.c
00000000 l    df *ABS*	00000000 globalMaster.c
00000000 l    df *ABS*	00000000 main.c
800045cc l     F .text	000000d0 PLIC_init
800048ac l     F .text	0000006c GlobalManagerTask
80004844 l     F .text	00000034 vUartTestTask1
80004878 l     F .text	00000034 vUartTestTask2
00000000 l    df *ABS*	00000000 syswrite.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 impure.c
80004e30 l     O .data	00000060 impure_data
80001548 g     F .text	00000040 vPortExitCritical
00010000 g       *ABS*	00000000 STACK_SIZE
8001dfc8 g     O .bss	00000004 SendingSlot
80000918  w    F .text	00000020 External_11_IRQHandler
80005590 g       .sdata	00000000 __global_pointer$
80002ca0 g     F .text	00000048 printsv
80004db0 g       *ABS*	00000000 __data_load
800017e0 g     F .text	000000cc SysTick_Handler
80000858  w    F .text	00000020 External_5_IRQHandler
80003720 g     F .text	0000008c API_PipeInitialization
80003ca4 g     F .text	00000118 API_TilesReset
80000f20 g       .text	00000000 HW_get_8bit_reg_field
800031bc g     F .text	00000080 reverse
8001ea1c g     O .bss	00000024 priorityMatrix
80004ebc g     O .sbss	00000004 pxCurrentTCB
80004e90 g       .sbss	00000000 __sbss_start
80002b18 g     F .text	000000dc Chronos_init
8001ea18 g     O .bss	00000004 errno
8001dfcc g     O .bss	000000f0 ServicePipe
80000e58 g       .text	00000000 HW_set_32bit_reg
80000a38  w    F .text	00000020 External_20_IRQHandler
800018ac g     F .text	00000044 xPortStartScheduler
80000380 g     F .text	00000024 __enable_irq
80001dac g     F .text	0000021c xTaskGenericCreate
800037ac g     F .text	000000a0 API_GetServiceSlot
80004d90 g       .sdata	00000000 __sdata_start
80001388 g     F .text	000000cc vPortFree
8000341c g     F .text	00000088 API_PushSendQueue
8001f114 g     O .bss	00000008 g_uart
80000ef8 g       .text	00000000 HW_set_8bit_reg_field
80000af8  w    F .text	00000020 External_26_IRQHandler
800006e8 g     F .text	00000110 handle_trap
80003bd4 g     F .text	00000070 API_GetApplicationFreeSlot
80001a80 g     F .text	00000088 vListInsertEnd
00080000 g       *ABS*	00000000 RAM_SIZE
800008f8  w    F .text	00000020 External_10_IRQHandler
8001ea40 g     O .bss	00000640 applications
80002c64 g     F .text	0000003c printi
80001a58 g     F .text	00000028 vListInitialiseItem
80000b78  w    F .text	00000020 External_30_IRQHandler
800009d8  w    F .text	00000020 External_17_IRQHandler
8002f1f0 g       .heap	00000000 _heap_end
80000cf0 g     F .text	00000050 _isatty
8001f1f0 g       .bss	00000000 __bss_end
800004ec g     F .text	000001fc handle_syscall
800039f0 g     F .text	000001e4 API_AddApplication
800011ac g     F .text	000001dc pvPortMalloc
800001b0 g     F .text	0000006c _init
800019f4 g     F .text	00000064 vListInitialise
80000ee8 g       .text	00000000 HW_set_8bit_reg
80000ef0 g       .text	00000000 HW_get_8bit_reg
80002264 g     F .text	00000038 xTaskGetTickCount
80003e64 g     F .text	000003fc API_AllocateTasks
80003630 g     F .text	000000f0 API_TaskListInit
80004f00 g       .sbss	00000000 __sbss_end
80000e68 g       .text	00000000 HW_set_32bit_reg_field
80004918 g     F .text	0000001c write
80004814 g     F .text	00000014 vApplicationMallocFailedHook
80000ad8  w    F .text	00000020 External_25_IRQHandler
8003f1f0 g       .stack	00000000 __stack_top
80000b58  w    F .text	00000020 External_29_IRQHandler
8001e0bc g     O .bss	00000034 incommingPacket
800010fc g     F .text	000000b0 UART_polled_tx_string
80000bb8 g     F .text	000000e8 write_hex
80000958  w    F .text	00000020 External_13_IRQHandler
80002eec g     F .text	00000284 External_2_IRQHandler
00010000 g       *ABS*	00000000 HEAP_SIZE
80000938  w    F .text	00000020 External_12_IRQHandler
800033dc g     F .text	00000040 makeAddress
80001048 g     F .text	000000b4 UART_send
80002d9c g     F .text	00000060 SendRaw
80000000 g       .text	00000000 _start
800020dc g     F .text	00000028 vTaskSuspendAll
800034a4 g     F .text	0000008c API_PopSendQueue
800003a4 g     F .text	000000a8 handle_m_timer_interrupt
80002bf4 g     F .text	00000070 prints
80001bdc g     F .text	00000098 uxListRemove
80002dfc g     F .text	00000094 NI_enable_irq
80004d90 g       *ABS*	00000000 __sdata_load
80004e90 g       .data	00000000 __data_end
80002488 g     F .text	000000ec vTaskSwitchContext
800009f8  w    F .text	00000020 External_18_IRQHandler
80000e90 g       .text	00000000 HW_get_32bit_reg_field
8000323c g     F .text	000001a0 myItoa
80000a78  w    F .text	00000020 External_22_IRQHandler
80000998  w    F .text	00000020 External_15_IRQHandler
800019cc g     F .text	00000028 vPortYield
80000000 g       *ABS*	00000000 RAM_START_ADDRESS
80004f00 g       .bss	00000000 __bss_start
8001f11c g     O .bss	000000c8 TaskList
800009b8  w    F .text	00000020 External_16_IRQHandler
80001c74 g     F .text	000000e8 memset
8000469c g     F .text	00000178 main
80003170 g     F .text	0000004c mySwap
80001b08 g     F .text	000000d4 vListInsert
80000b38  w    F .text	00000020 External_28_IRQHandler
80003c44 g     F .text	00000060 API_ApplicationsReset
80000ea8 g       .text	00000000 HW_get_16bit_reg
80004db0 g       .sdata	00000000 __sdata_end
8002f1f0 g       .heap	00000000 __heap_end
80000978  w    F .text	00000020 External_14_IRQHandler
800043ac g     F .text	00000114 API_GetTaskSlotFromTile
80004260 g     F .text	0000014c getNextPriorityAddr
8000021c g     F .text	0000001c _fini
80002104 g     F .text	00000160 xTaskResumeAll
8000204c g     F .text	00000090 vTaskStartScheduler
80004db0 g     O .data	00000080 ext_irq_handler_table
8001e0f0 g     O .bss	00000020 SendingQueue
80004934 g     F .text	00000054 _write_r
80000eb0 g       .text	00000000 HW_set_16bit_reg_field
8001e110 g     O .bss	00000004 SendingQueue_tail
80004da0 g     O .sdata	00000004 _impure_ptr
8002f1f0 g       .stack	00000000 __stack_bottom
800018f0 g     F .text	000000dc Software_IRQHandler
8000384c g     F .text	000000a4 API_ClearPipeSlot
80000b18  w    F .text	00000020 External_27_IRQHandler
800008b8  w    F .text	00000020 External_8_IRQHandler
800008d8  w    F .text	00000020 External_9_IRQHandler
8001f1f0 g       .heap	00000000 __heap_start
800007f8  w    F .text	00000020 Invalid_IRQHandler
80003530 g     F .text	00000100 API_Try2Send
80000818  w    F .text	00000020 External_3_IRQHandler
8000229c g     F .text	000001ec xTaskIncrementTick
80004eb8 g     O .sbss	00000004 g_startscheduler
80002d74 g     F .text	00000028 getYpos
80000a18  w    F .text	00000020 External_19_IRQHandler
80000d70 g     F .text	000000e8 _write
80002d48 g     F .text	0000002c getXpos
8001f1f0 g       .bss	00000000 _end
80001654 g     F .text	000000cc vPortSetupTimer
8001e114 g     O .bss	00000004 SendingQueue_front
800038f0 g     F .text	00000100 API_RepositoryWakeUp
80002ce8 g     F .text	00000060 printsvsv
80001fc8 g     F .text	00000084 vTaskDelay
80000f30 g     F .text	00000118 UART_init
80000e60 g       .text	00000000 HW_get_32bit_reg
80000ca0 g     F .text	00000050 _exit
80000ea0 g       .text	00000000 HW_set_16bit_reg
80001d5c g     F .text	00000050 strlen
8000174c g     F .text	00000094 pxPortInitialiseStack
80002e90 g     F .text	0000005c External_1_IRQHandler
80000878  w    F .text	00000020 External_6_IRQHandler
80000b98  w    F .text	00000020 External_31_IRQHandler
800044c0 g     F .text	0000010c API_GetSystemTasksSlots
80001514 g     F .text	00000034 vPortEnterCritical
80004db0 g       .data	00000000 __data_start
8001f1e4 g     O .bss	00000004 ProcessorAddr
8001f080 g     O .bss	00000004 priorityPointer
80000a58  w    F .text	00000020 External_21_IRQHandler
8001f084 g     O .bss	00000090 Tiles
800004bc g     F .text	00000030 handle_m_soft_interrupt
8000044c g     F .text	00000070 handle_m_ext_interrupt
80000ed8 g       .text	00000000 HW_get_16bit_reg_field
80000a98  w    F .text	00000020 External_23_IRQHandler
80000ab8  w    F .text	00000020 External_24_IRQHandler
80000838  w    F .text	00000020 External_4_IRQHandler
8001e118 g     O .bss	00000900 MessagePipe
80003dbc g     F .text	000000a8 GeneratePatternMatrix
80000898  w    F .text	00000020 External_7_IRQHandler
80004828 g     F .text	0000001c vApplicationIdleHook



Disassembly of section .text:

80000000 <_start>:
_start():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:30

  .section      .text.entry
  .globl _start

_start:
  j handle_reset
80000000:	00c0006f          	j	8000000c <handle_reset>

80000004 <nmi_vector>:
nmi_vector():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:33

nmi_vector:
  j nmi_vector
80000004:	0000006f          	j	80000004 <nmi_vector>

80000008 <trap_vector>:
trap_vector():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:36

trap_vector:
  j trap_entry
80000008:	0280006f          	j	80000030 <trap_entry>

8000000c <handle_reset>:
handle_reset():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:39

handle_reset:
  la t0, trap_entry
8000000c:	00000297          	auipc	t0,0x0
80000010:	02428293          	addi	t0,t0,36 # 80000030 <trap_entry>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:40
  csrw mtvec, t0
80000014:	30529073          	csrw	mtvec,t0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:41
  csrwi mstatus, 0
80000018:	30005073          	csrwi	mstatus,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:42
  csrwi mie, 0
8000001c:	30405073          	csrwi	mie,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:60
  lui t0, 0x0
  fscsr t0
#endif

  # initialize global pointer
  la gp, __global_pointer$
80000020:	00018193          	mv	gp,gp
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:63

  # initialize stack pointer
  la sp, __stack_top
80000024:	0003f117          	auipc	sp,0x3f
80000028:	1cc10113          	addi	sp,sp,460 # 8003f1f0 <__stack_top>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:66

  # perform the rest of initialization in C
  j _init
8000002c:	1840006f          	j	800001b0 <_init>

80000030 <trap_entry>:
trap_entry():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:70


trap_entry:
  addi sp, sp, -32*REGBYTES
80000030:	f8010113          	addi	sp,sp,-128
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:72

  SREG x1, 0 * REGBYTES(sp)
80000034:	00112023          	sw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:73
  SREG x2, 1 * REGBYTES(sp)
80000038:	00212223          	sw	sp,4(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:74
  SREG x3, 2 * REGBYTES(sp)
8000003c:	00312423          	sw	gp,8(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:75
  SREG x4, 3 * REGBYTES(sp)
80000040:	00412623          	sw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:76
  SREG x5, 4 * REGBYTES(sp)
80000044:	00512823          	sw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:77
  SREG x6, 5 * REGBYTES(sp)
80000048:	00612a23          	sw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:78
  SREG x7, 6 * REGBYTES(sp)
8000004c:	00712c23          	sw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:79
  SREG x8, 7 * REGBYTES(sp)
80000050:	00812e23          	sw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:80
  SREG x9, 8 * REGBYTES(sp)
80000054:	02912023          	sw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:81
  SREG x10, 9 * REGBYTES(sp)
80000058:	02a12223          	sw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:82
  SREG x11, 10 * REGBYTES(sp)
8000005c:	02b12423          	sw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:83
  SREG x12, 11 * REGBYTES(sp)
80000060:	02c12623          	sw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:84
  SREG x13, 12 * REGBYTES(sp)
80000064:	02d12823          	sw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:85
  SREG x14, 13 * REGBYTES(sp)
80000068:	02e12a23          	sw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:86
  SREG x15, 14 * REGBYTES(sp)
8000006c:	02f12c23          	sw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:87
  SREG x16, 15 * REGBYTES(sp)
80000070:	03012e23          	sw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:88
  SREG x17, 16 * REGBYTES(sp)
80000074:	05112023          	sw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:89
  SREG x18, 17 * REGBYTES(sp)
80000078:	05212223          	sw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:90
  SREG x19, 18 * REGBYTES(sp)
8000007c:	05312423          	sw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:91
  SREG x20, 19 * REGBYTES(sp)
80000080:	05412623          	sw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:92
  SREG x21, 20 * REGBYTES(sp)
80000084:	05512823          	sw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:93
  SREG x22, 21 * REGBYTES(sp)
80000088:	05612a23          	sw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:94
  SREG x23, 22 * REGBYTES(sp)
8000008c:	05712c23          	sw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:95
  SREG x24, 23 * REGBYTES(sp)
80000090:	05812e23          	sw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:96
  SREG x25, 24 * REGBYTES(sp)
80000094:	07912023          	sw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:97
  SREG x26, 25 * REGBYTES(sp)
80000098:	07a12223          	sw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:98
  SREG x27, 26 * REGBYTES(sp)
8000009c:	07b12423          	sw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:99
  SREG x28, 27 * REGBYTES(sp)
800000a0:	07c12623          	sw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:100
  SREG x29, 28 * REGBYTES(sp)
800000a4:	07d12823          	sw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:101
  SREG x30, 29 * REGBYTES(sp)
800000a8:	07e12a23          	sw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:102
  SREG x31, 30 * REGBYTES(sp)
800000ac:	07f12c23          	sw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:105


  csrr t0, mepc
800000b0:	341022f3          	csrr	t0,mepc
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:106
  SREG t0, 31 * REGBYTES(sp)
800000b4:	06512e23          	sw	t0,124(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:108

  csrr a0, mcause
800000b8:	34202573          	csrr	a0,mcause
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:109
  csrr a1, mepc
800000bc:	341025f3          	csrr	a1,mepc
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:110
  mv a2, sp
800000c0:	00010613          	mv	a2,sp
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:111
  jal handle_trap
800000c4:	624000ef          	jal	ra,800006e8 <handle_trap>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:112
  csrw mepc, a0
800000c8:	34151073          	csrw	mepc,a0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:115

  # Remain in M-mode after mret
  li t0, MSTATUS_MPP
800000cc:	000022b7          	lui	t0,0x2
800000d0:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:116
  csrs mstatus, t0
800000d4:	3002a073          	csrs	mstatus,t0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:118

  LREG x1, 0 * REGBYTES(sp)
800000d8:	00012083          	lw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:119
  LREG x2, 1 * REGBYTES(sp)
800000dc:	00412103          	lw	sp,4(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:120
  LREG x3, 2 * REGBYTES(sp)
800000e0:	00812183          	lw	gp,8(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:121
  LREG x4, 3 * REGBYTES(sp)
800000e4:	00c12203          	lw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:122
  LREG x5, 4 * REGBYTES(sp)
800000e8:	01012283          	lw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:123
  LREG x6, 5 * REGBYTES(sp)
800000ec:	01412303          	lw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:124
  LREG x7, 6 * REGBYTES(sp)
800000f0:	01812383          	lw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:125
  LREG x8, 7 * REGBYTES(sp)
800000f4:	01c12403          	lw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:126
  LREG x9, 8 * REGBYTES(sp)
800000f8:	02012483          	lw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:127
  LREG x10, 9 * REGBYTES(sp)
800000fc:	02412503          	lw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:128
  LREG x11, 10 * REGBYTES(sp)
80000100:	02812583          	lw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:129
  LREG x12, 11 * REGBYTES(sp)
80000104:	02c12603          	lw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:130
  LREG x13, 12 * REGBYTES(sp)
80000108:	03012683          	lw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:131
  LREG x14, 13 * REGBYTES(sp)
8000010c:	03412703          	lw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:132
  LREG x15, 14 * REGBYTES(sp)
80000110:	03812783          	lw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:133
  LREG x16, 15 * REGBYTES(sp)
80000114:	03c12803          	lw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:134
  LREG x17, 16 * REGBYTES(sp)
80000118:	04012883          	lw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:135
  LREG x18, 17 * REGBYTES(sp)
8000011c:	04412903          	lw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:136
  LREG x19, 18 * REGBYTES(sp)
80000120:	04812983          	lw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:137
  LREG x20, 19 * REGBYTES(sp)
80000124:	04c12a03          	lw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:138
  LREG x21, 20 * REGBYTES(sp)
80000128:	05012a83          	lw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:139
  LREG x22, 21 * REGBYTES(sp)
8000012c:	05412b03          	lw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:140
  LREG x23, 22 * REGBYTES(sp)
80000130:	05812b83          	lw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:141
  LREG x24, 23 * REGBYTES(sp)
80000134:	05c12c03          	lw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:142
  LREG x25, 24 * REGBYTES(sp)
80000138:	06012c83          	lw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:143
  LREG x26, 25 * REGBYTES(sp)
8000013c:	06412d03          	lw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:144
  LREG x27, 26 * REGBYTES(sp)
80000140:	06812d83          	lw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:145
  LREG x28, 27 * REGBYTES(sp)
80000144:	06c12e03          	lw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:146
  LREG x29, 28 * REGBYTES(sp)
80000148:	07012e83          	lw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:147
  LREG x30, 29 * REGBYTES(sp)
8000014c:	07412f03          	lw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:148
  LREG x31, 30 * REGBYTES(sp)
80000150:	07812f83          	lw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:150

  addi sp, sp, 32*REGBYTES
80000154:	08010113          	addi	sp,sp,128
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:151
  mret
80000158:	30200073          	mret
8000015c:	0000                	unimp
	...

80000160 <zero_section>:
zero_section():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:47
        ++p_vma;
    }
}

static void zero_section(uint32_t * start, uint32_t * end)
{
80000160:	fd010113          	addi	sp,sp,-48
80000164:	02812623          	sw	s0,44(sp)
80000168:	03010413          	addi	s0,sp,48
8000016c:	fca42e23          	sw	a0,-36(s0)
80000170:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:48
    uint32_t * p_zero = start;
80000174:	fdc42783          	lw	a5,-36(s0)
80000178:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:50
    
    while(p_zero <= end)
8000017c:	0180006f          	j	80000194 <zero_section+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:52
    {
        *p_zero = 0;
80000180:	fec42783          	lw	a5,-20(s0)
80000184:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:53
        ++p_zero;
80000188:	fec42783          	lw	a5,-20(s0)
8000018c:	00478793          	addi	a5,a5,4
80000190:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:50
    while(p_zero <= end)
80000194:	fec42703          	lw	a4,-20(s0)
80000198:	fd842783          	lw	a5,-40(s0)
8000019c:	fee7f2e3          	bleu	a4,a5,80000180 <zero_section+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:55
    }
}
800001a0:	00000013          	nop
800001a4:	02c12403          	lw	s0,44(sp)
800001a8:	03010113          	addi	sp,sp,48
800001ac:	00008067          	ret

800001b0 <_init>:
_init():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:58

void _init(void)
{
800001b0:	fe010113          	addi	sp,sp,-32
800001b4:	00112e23          	sw	ra,28(sp)
800001b8:	00812c23          	sw	s0,24(sp)
800001bc:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:60
    extern int main(int, char**);
    const char *argv0 = "hello";
800001c0:	800057b7          	lui	a5,0x80005
800001c4:	99078793          	addi	a5,a5,-1648 # 80004990 <__stack_top+0xfffc57a0>
800001c8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:61
    char *argv[] = {(char *)argv0, NULL, NULL};
800001cc:	fec42783          	lw	a5,-20(s0)
800001d0:	fef42023          	sw	a5,-32(s0)
800001d4:	fe042223          	sw	zero,-28(s0)
800001d8:	fe042423          	sw	zero,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:66

// Imperas - this is loaded directly by simulator so must not be copied
//    copy_section(&__sdata_load, &__sdata_start, &__sdata_end);
//    copy_section(&__data_load, &__data_start, &__data_end);
    zero_section(&__sbss_start, &__sbss_end);
800001dc:	97018593          	addi	a1,gp,-1680 # 80004f00 <__sbss_end>
800001e0:	90018513          	addi	a0,gp,-1792 # 80004e90 <__data_end>
800001e4:	f7dff0ef          	jal	ra,80000160 <zero_section>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:67
    zero_section(&__bss_start, &__bss_end);
800001e8:	8001f7b7          	lui	a5,0x8001f
800001ec:	1f078593          	addi	a1,a5,496 # 8001f1f0 <__stack_top+0xfffe0000>
800001f0:	97018513          	addi	a0,gp,-1680 # 80004f00 <__sbss_end>
800001f4:	f6dff0ef          	jal	ra,80000160 <zero_section>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:69
    
    main(1, argv);
800001f8:	fe040793          	addi	a5,s0,-32
800001fc:	00078593          	mv	a1,a5
80000200:	00100513          	li	a0,1
80000204:	498040ef          	jal	ra,8000469c <main>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:70
}
80000208:	00000013          	nop
8000020c:	01c12083          	lw	ra,28(sp)
80000210:	01812403          	lw	s0,24(sp)
80000214:	02010113          	addi	sp,sp,32
80000218:	00008067          	ret

8000021c <_fini>:
_fini():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:75

/* Function called after main() finishes */
void
_fini()
{
8000021c:	ff010113          	addi	sp,sp,-16
80000220:	00812623          	sw	s0,12(sp)
80000224:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:76
}
80000228:	00000013          	nop
8000022c:	00c12403          	lw	s0,12(sp)
80000230:	01010113          	addi	sp,sp,16
80000234:	00008067          	ret

80000238 <PLIC_DisableIRQ>:
PLIC_DisableIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:174
 * 	If you wish to disable the external interrupt while the interrupt handler
 * 	for that external interrupt is executing then you must use the return value
 * 	EXT_IRQ_DISABLE to return from the extern interrupt handler.
 */
static inline void PLIC_DisableIRQ(IRQn_Type IRQn)
{
80000238:	fd010113          	addi	sp,sp,-48
8000023c:	02812623          	sw	s0,44(sp)
80000240:	03010413          	addi	s0,sp,48
80000244:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:175
    unsigned long hart_id = read_csr(mhartid);
80000248:	f14027f3          	csrr	a5,mhartid
8000024c:	fef42623          	sw	a5,-20(s0)
80000250:	fec42783          	lw	a5,-20(s0)
80000254:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:176
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80000258:	40000737          	lui	a4,0x40000
8000025c:	fdc42783          	lw	a5,-36(s0)
80000260:	0057d793          	srli	a5,a5,0x5
80000264:	fe842683          	lw	a3,-24(s0)
80000268:	00569693          	slli	a3,a3,0x5
8000026c:	00f686b3          	add	a3,a3,a5
80000270:	000017b7          	lui	a5,0x1
80000274:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80000278:	00f687b3          	add	a5,a3,a5
8000027c:	00279793          	slli	a5,a5,0x2
80000280:	00f707b3          	add	a5,a4,a5
80000284:	0007a783          	lw	a5,0(a5)
80000288:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:178

    current &= ~((uint32_t)1 << (IRQn % 32));
8000028c:	fdc42783          	lw	a5,-36(s0)
80000290:	01f7f793          	andi	a5,a5,31
80000294:	00100713          	li	a4,1
80000298:	00f717b3          	sll	a5,a4,a5
8000029c:	fff7c793          	not	a5,a5
800002a0:	fe442703          	lw	a4,-28(s0)
800002a4:	00f777b3          	and	a5,a4,a5
800002a8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:180

    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
800002ac:	40000737          	lui	a4,0x40000
800002b0:	fdc42783          	lw	a5,-36(s0)
800002b4:	0057d793          	srli	a5,a5,0x5
800002b8:	fe842683          	lw	a3,-24(s0)
800002bc:	00569693          	slli	a3,a3,0x5
800002c0:	00f686b3          	add	a3,a3,a5
800002c4:	000017b7          	lui	a5,0x1
800002c8:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
800002cc:	00f687b3          	add	a5,a3,a5
800002d0:	00279793          	slli	a5,a5,0x2
800002d4:	00f707b3          	add	a5,a4,a5
800002d8:	fe442703          	lw	a4,-28(s0)
800002dc:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:181
}
800002e0:	00000013          	nop
800002e4:	02c12403          	lw	s0,44(sp)
800002e8:	03010113          	addi	sp,sp,48
800002ec:	00008067          	ret

800002f0 <PLIC_ClaimIRQ>:
PLIC_ClaimIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:205

/*==============================================================================
 * The function PLIC_ClaimIRQ() claims the interrupt from the PLIC controller.
 */
static inline uint32_t PLIC_ClaimIRQ(void)
{
800002f0:	fe010113          	addi	sp,sp,-32
800002f4:	00812e23          	sw	s0,28(sp)
800002f8:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:206
    unsigned long hart_id = read_csr(mhartid);
800002fc:	f14027f3          	csrr	a5,mhartid
80000300:	fef42623          	sw	a5,-20(s0)
80000304:	fec42783          	lw	a5,-20(s0)
80000308:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:208

    return PLIC->TARGET[hart_id].CLAIM_COMPLETE;
8000030c:	40000737          	lui	a4,0x40000
80000310:	fe842783          	lw	a5,-24(s0)
80000314:	20078793          	addi	a5,a5,512
80000318:	00c79793          	slli	a5,a5,0xc
8000031c:	00f707b3          	add	a5,a4,a5
80000320:	0047a783          	lw	a5,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:209
}
80000324:	00078513          	mv	a0,a5
80000328:	01c12403          	lw	s0,28(sp)
8000032c:	02010113          	addi	sp,sp,32
80000330:	00008067          	ret

80000334 <PLIC_CompleteIRQ>:
PLIC_CompleteIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:216
/*==============================================================================
 * The function PLIC_CompleteIRQ() indicates to the PLIC controller the interrupt
 * is processed and claim is complete.
 */
static inline void PLIC_CompleteIRQ(uint32_t source)
{
80000334:	fd010113          	addi	sp,sp,-48
80000338:	02812623          	sw	s0,44(sp)
8000033c:	03010413          	addi	s0,sp,48
80000340:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:217
    unsigned long hart_id = read_csr(mhartid);
80000344:	f14027f3          	csrr	a5,mhartid
80000348:	fef42623          	sw	a5,-20(s0)
8000034c:	fec42783          	lw	a5,-20(s0)
80000350:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:219

    PLIC->TARGET[hart_id].CLAIM_COMPLETE = source;
80000354:	40000737          	lui	a4,0x40000
80000358:	fe842783          	lw	a5,-24(s0)
8000035c:	20078793          	addi	a5,a5,512
80000360:	00c79793          	slli	a5,a5,0xc
80000364:	00f707b3          	add	a5,a4,a5
80000368:	fdc42703          	lw	a4,-36(s0)
8000036c:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:220
}
80000370:	00000013          	nop
80000374:	02c12403          	lw	s0,44(sp)
80000378:	03010113          	addi	sp,sp,48
8000037c:	00008067          	ret

80000380 <__enable_irq>:
__enable_irq():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:91

/*------------------------------------------------------------------------------
 * Enabler all interrupts.
 */
void __enable_irq(void)
{
80000380:	fe010113          	addi	sp,sp,-32
80000384:	00812e23          	sw	s0,28(sp)
80000388:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:92
    set_csr(mstatus, MSTATUS_MIE);
8000038c:	300467f3          	csrrsi	a5,mstatus,8
80000390:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:93
}
80000394:	00000013          	nop
80000398:	01c12403          	lw	s0,28(sp)
8000039c:	02010113          	addi	sp,sp,32
800003a0:	00008067          	ret

800003a4 <handle_m_timer_interrupt>:
handle_m_timer_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:123

/*------------------------------------------------------------------------------
 * RISC-V interrupt handler for machine timer interrupts.
 */
void handle_m_timer_interrupt()
{
800003a4:	fe010113          	addi	sp,sp,-32
800003a8:	00112e23          	sw	ra,28(sp)
800003ac:	00812c23          	sw	s0,24(sp)
800003b0:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:124
    clear_csr(mie, MIP_MTIP);
800003b4:	08000793          	li	a5,128
800003b8:	3047b7f3          	csrrc	a5,mie,a5
800003bc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:126

    SysTick_Handler();
800003c0:	420010ef          	jal	ra,800017e0 <SysTick_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:128

    PRCI->MTIMECMP[read_csr(mhartid)] = PRCI->MTIME + g_systick_increment;
800003c4:	44000737          	lui	a4,0x44000
800003c8:	0000c7b7          	lui	a5,0xc
800003cc:	00f707b3          	add	a5,a4,a5
800003d0:	ffc7a803          	lw	a6,-4(a5) # bffc <HEAP_SIZE-0x4004>
800003d4:	ff87a783          	lw	a5,-8(a5)
800003d8:	9001a583          	lw	a1,-1792(gp) # 80004e90 <__data_end>
800003dc:	9041a603          	lw	a2,-1788(gp) # 80004e94 <__data_end+0x4>
800003e0:	44000537          	lui	a0,0x44000
800003e4:	f1402773          	csrr	a4,mhartid
800003e8:	fee42423          	sw	a4,-24(s0)
800003ec:	fe842883          	lw	a7,-24(s0)
800003f0:	00b786b3          	add	a3,a5,a1
800003f4:	00068313          	mv	t1,a3
800003f8:	00f33333          	sltu	t1,t1,a5
800003fc:	00c80733          	add	a4,a6,a2
80000400:	00e307b3          	add	a5,t1,a4
80000404:	00078713          	mv	a4,a5
80000408:	00068793          	mv	a5,a3
8000040c:	00070813          	mv	a6,a4
80000410:	00001737          	lui	a4,0x1
80000414:	80070713          	addi	a4,a4,-2048 # 800 <HEAP_SIZE-0xf800>
80000418:	00e88733          	add	a4,a7,a4
8000041c:	00371713          	slli	a4,a4,0x3
80000420:	00e50733          	add	a4,a0,a4
80000424:	00f72023          	sw	a5,0(a4)
80000428:	01072223          	sw	a6,4(a4)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:130

    set_csr(mie, MIP_MTIP);
8000042c:	08000793          	li	a5,128
80000430:	3047a7f3          	csrrs	a5,mie,a5
80000434:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:131
}
80000438:	00000013          	nop
8000043c:	01c12083          	lw	ra,28(sp)
80000440:	01812403          	lw	s0,24(sp)
80000444:	02010113          	addi	sp,sp,32
80000448:	00008067          	ret

8000044c <handle_m_ext_interrupt>:
handle_m_ext_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:176

/*------------------------------------------------------------------------------
 * 
 */
void handle_m_ext_interrupt()
{
8000044c:	fe010113          	addi	sp,sp,-32
80000450:	00112e23          	sw	ra,28(sp)
80000454:	00812c23          	sw	s0,24(sp)
80000458:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:177
    uint32_t int_num  = PLIC_ClaimIRQ();
8000045c:	e95ff0ef          	jal	ra,800002f0 <PLIC_ClaimIRQ>
80000460:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:178
    uint8_t disable = EXT_IRQ_KEEP_ENABLED;
80000464:	fe0405a3          	sb	zero,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:180

    disable = ext_irq_handler_table[int_num]();
80000468:	800057b7          	lui	a5,0x80005
8000046c:	fec42703          	lw	a4,-20(s0)
80000470:	00271713          	slli	a4,a4,0x2
80000474:	db078793          	addi	a5,a5,-592 # 80004db0 <__stack_top+0xfffc5bc0>
80000478:	00f707b3          	add	a5,a4,a5
8000047c:	0007a783          	lw	a5,0(a5)
80000480:	000780e7          	jalr	a5
80000484:	00050793          	mv	a5,a0
80000488:	fef405a3          	sb	a5,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:182

    PLIC_CompleteIRQ(int_num);
8000048c:	fec42503          	lw	a0,-20(s0)
80000490:	ea5ff0ef          	jal	ra,80000334 <PLIC_CompleteIRQ>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:184

    if(EXT_IRQ_DISABLE == disable)
80000494:	feb44703          	lbu	a4,-21(s0)
80000498:	00100793          	li	a5,1
8000049c:	00f71663          	bne	a4,a5,800004a8 <handle_m_ext_interrupt+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:186
    {
        PLIC_DisableIRQ((IRQn_Type)int_num);
800004a0:	fec42503          	lw	a0,-20(s0)
800004a4:	d95ff0ef          	jal	ra,80000238 <PLIC_DisableIRQ>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:188
    }
}
800004a8:	00000013          	nop
800004ac:	01c12083          	lw	ra,28(sp)
800004b0:	01812403          	lw	s0,24(sp)
800004b4:	02010113          	addi	sp,sp,32
800004b8:	00008067          	ret

800004bc <handle_m_soft_interrupt>:
handle_m_soft_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:191

void handle_m_soft_interrupt()
{
800004bc:	ff010113          	addi	sp,sp,-16
800004c0:	00112623          	sw	ra,12(sp)
800004c4:	00812423          	sw	s0,8(sp)
800004c8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:192
    Software_IRQHandler();
800004cc:	424010ef          	jal	ra,800018f0 <Software_IRQHandler>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:195

    /*Clear software interrupt*/
    PRCI->MSIP[0] = 0x00;
800004d0:	440007b7          	lui	a5,0x44000
800004d4:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:196
}
800004d8:	00000013          	nop
800004dc:	00c12083          	lw	ra,12(sp)
800004e0:	00812403          	lw	s0,8(sp)
800004e4:	01010113          	addi	sp,sp,16
800004e8:	00008067          	ret

800004ec <handle_syscall>:
handle_syscall():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:199

/* syscall funcion defined at system_call.c */
unsigned int handle_syscall(){
800004ec:	fd010113          	addi	sp,sp,-48
800004f0:	02112623          	sw	ra,44(sp)
800004f4:	02812423          	sw	s0,40(sp)
800004f8:	03212223          	sw	s2,36(sp)
800004fc:	03010413          	addi	s0,sp,48
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:202
	unsigned int arg0, arg1, arg2, arg3, arg4, arg5, type;
	unsigned int *pointer;
	register long temp asm("s2") = 0;
80000500:	00000913          	li	s2,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:203
	asm("addi	s2, sp, 0");
80000504:	00010913          	mv	s2,sp
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:205
	
	pointer = (unsigned int *)(temp + (29*4));
80000508:	00090793          	mv	a5,s2
8000050c:	07478793          	addi	a5,a5,116
80000510:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:206
	arg0 =  *pointer;
80000514:	fec42783          	lw	a5,-20(s0)
80000518:	0007a783          	lw	a5,0(a5)
8000051c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:208

	pointer = (unsigned int *)(temp + (30*4));
80000520:	00090793          	mv	a5,s2
80000524:	07878793          	addi	a5,a5,120
80000528:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:209
	arg1 = *pointer;
8000052c:	fec42783          	lw	a5,-20(s0)
80000530:	0007a783          	lw	a5,0(a5)
80000534:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:211
	
	pointer = (unsigned int *)(temp + (31*4));
80000538:	00090793          	mv	a5,s2
8000053c:	07c78793          	addi	a5,a5,124
80000540:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:212
	arg2 = *pointer;
80000544:	fec42783          	lw	a5,-20(s0)
80000548:	0007a783          	lw	a5,0(a5)
8000054c:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:214

	pointer = (unsigned int *)(temp + (32*4));
80000550:	00090793          	mv	a5,s2
80000554:	08078793          	addi	a5,a5,128
80000558:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:215
	arg3 = *pointer;
8000055c:	fec42783          	lw	a5,-20(s0)
80000560:	0007a783          	lw	a5,0(a5)
80000564:	fcf42e23          	sw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:217

	pointer = (unsigned int *)(temp + (33*4));
80000568:	00090793          	mv	a5,s2
8000056c:	08478793          	addi	a5,a5,132
80000570:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:218
	arg4 = *pointer;
80000574:	fec42783          	lw	a5,-20(s0)
80000578:	0007a783          	lw	a5,0(a5)
8000057c:	fcf42c23          	sw	a5,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:220

	pointer = (unsigned int *)(temp + (34*4));
80000580:	00090793          	mv	a5,s2
80000584:	08878793          	addi	a5,a5,136
80000588:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:221
	arg4 = *pointer;
8000058c:	fec42783          	lw	a5,-20(s0)
80000590:	0007a783          	lw	a5,0(a5)
80000594:	fcf42c23          	sw	a5,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:223

	pointer = (unsigned int *)(temp + (36*4));
80000598:	00090793          	mv	a5,s2
8000059c:	09078793          	addi	a5,a5,144
800005a0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:224
	type = *pointer;
800005a4:	fec42783          	lw	a5,-20(s0)
800005a8:	0007a783          	lw	a5,0(a5)
800005ac:	fcf42a23          	sw	a5,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:226
	
	switch (type){
800005b0:	fd442703          	lw	a4,-44(s0)
800005b4:	04200793          	li	a5,66
800005b8:	08f71663          	bne	a4,a5,80000644 <handle_syscall+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:229

		case SYS_TESTING:
			prints("Detectei uma chamada TESTE de sistema!\n");
800005bc:	800057b7          	lui	a5,0x80005
800005c0:	99878513          	addi	a0,a5,-1640 # 80004998 <__stack_top+0xfffc57a8>
800005c4:	630020ef          	jal	ra,80002bf4 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:230
			printsv("arg0 ", arg0);
800005c8:	fe842783          	lw	a5,-24(s0)
800005cc:	00078593          	mv	a1,a5
800005d0:	800057b7          	lui	a5,0x80005
800005d4:	9c078513          	addi	a0,a5,-1600 # 800049c0 <__stack_top+0xfffc57d0>
800005d8:	6c8020ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:231
			printsv("arg1 ", arg1);
800005dc:	fe442783          	lw	a5,-28(s0)
800005e0:	00078593          	mv	a1,a5
800005e4:	800057b7          	lui	a5,0x80005
800005e8:	9c878513          	addi	a0,a5,-1592 # 800049c8 <__stack_top+0xfffc57d8>
800005ec:	6b4020ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:232
			printsv("arg2 ", arg2);
800005f0:	fe042783          	lw	a5,-32(s0)
800005f4:	00078593          	mv	a1,a5
800005f8:	800057b7          	lui	a5,0x80005
800005fc:	9d078513          	addi	a0,a5,-1584 # 800049d0 <__stack_top+0xfffc57e0>
80000600:	6a0020ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:233
			printsv("arg3 ", arg3);
80000604:	fdc42783          	lw	a5,-36(s0)
80000608:	00078593          	mv	a1,a5
8000060c:	800057b7          	lui	a5,0x80005
80000610:	9d878513          	addi	a0,a5,-1576 # 800049d8 <__stack_top+0xfffc57e8>
80000614:	68c020ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:234
			printsv("arg4 ", arg4);
80000618:	fd842783          	lw	a5,-40(s0)
8000061c:	00078593          	mv	a1,a5
80000620:	800057b7          	lui	a5,0x80005
80000624:	9e078513          	addi	a0,a5,-1568 # 800049e0 <__stack_top+0xfffc57f0>
80000628:	678020ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:235
			printsv("type ", type);
8000062c:	fd442783          	lw	a5,-44(s0)
80000630:	00078593          	mv	a1,a5
80000634:	800057b7          	lui	a5,0x80005
80000638:	9e878513          	addi	a0,a5,-1560 # 800049e8 <__stack_top+0xfffc57f8>
8000063c:	664020ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:236
			break;
80000640:	08c0006f          	j	800006cc <handle_syscall+0x1e0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:239

		default:
			prints("Systemcall não identificada!\n");
80000644:	800057b7          	lui	a5,0x80005
80000648:	9f078513          	addi	a0,a5,-1552 # 800049f0 <__stack_top+0xfffc5800>
8000064c:	5a8020ef          	jal	ra,80002bf4 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:240
			printsv("arg0 ", arg0);
80000650:	fe842783          	lw	a5,-24(s0)
80000654:	00078593          	mv	a1,a5
80000658:	800057b7          	lui	a5,0x80005
8000065c:	9c078513          	addi	a0,a5,-1600 # 800049c0 <__stack_top+0xfffc57d0>
80000660:	640020ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:241
			printsv("arg1 ", arg1);
80000664:	fe442783          	lw	a5,-28(s0)
80000668:	00078593          	mv	a1,a5
8000066c:	800057b7          	lui	a5,0x80005
80000670:	9c878513          	addi	a0,a5,-1592 # 800049c8 <__stack_top+0xfffc57d8>
80000674:	62c020ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:242
			printsv("arg2 ", arg2);
80000678:	fe042783          	lw	a5,-32(s0)
8000067c:	00078593          	mv	a1,a5
80000680:	800057b7          	lui	a5,0x80005
80000684:	9d078513          	addi	a0,a5,-1584 # 800049d0 <__stack_top+0xfffc57e0>
80000688:	618020ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:243
			printsv("arg3 ", arg3);
8000068c:	fdc42783          	lw	a5,-36(s0)
80000690:	00078593          	mv	a1,a5
80000694:	800057b7          	lui	a5,0x80005
80000698:	9d878513          	addi	a0,a5,-1576 # 800049d8 <__stack_top+0xfffc57e8>
8000069c:	604020ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:244
			printsv("arg4 ", arg4);
800006a0:	fd842783          	lw	a5,-40(s0)
800006a4:	00078593          	mv	a1,a5
800006a8:	800057b7          	lui	a5,0x80005
800006ac:	9e078513          	addi	a0,a5,-1568 # 800049e0 <__stack_top+0xfffc57f0>
800006b0:	5f0020ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:245
			printsv("type ", type);
800006b4:	fd442783          	lw	a5,-44(s0)
800006b8:	00078593          	mv	a1,a5
800006bc:	800057b7          	lui	a5,0x80005
800006c0:	9e878513          	addi	a0,a5,-1560 # 800049e8 <__stack_top+0xfffc57f8>
800006c4:	5dc020ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:246
			break;
800006c8:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:248
	}
	return 87;
800006cc:	05700793          	li	a5,87
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:263
	// 	value = *p;
	// 	printsvsv("i: ", i, " value: ", value);
	// }
    // prints("Cheguei aqui!!!!!!! sucessooo :D\n");
	////////////////////////////////////////////////////
}
800006d0:	00078513          	mv	a0,a5
800006d4:	02c12083          	lw	ra,44(sp)
800006d8:	02812403          	lw	s0,40(sp)
800006dc:	02412903          	lw	s2,36(sp)
800006e0:	03010113          	addi	sp,sp,48
800006e4:	00008067          	ret

800006e8 <handle_trap>:
handle_trap():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:269

/*------------------------------------------------------------------------------
 * Trap/Interrupt handler
 */
uintptr_t handle_trap(uintptr_t mcause, uintptr_t epc)
{
800006e8:	fe010113          	addi	sp,sp,-32
800006ec:	00112e23          	sw	ra,28(sp)
800006f0:	00812c23          	sw	s0,24(sp)
800006f4:	02010413          	addi	s0,sp,32
800006f8:	fea42623          	sw	a0,-20(s0)
800006fc:	feb42423          	sw	a1,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:270
    if (mcause == ENV_CALL_M || mcause == ENV_CALL_H || mcause == ENV_CALL_S || mcause == ENV_CALL_U){
80000700:	fec42703          	lw	a4,-20(s0)
80000704:	00b00793          	li	a5,11
80000708:	02f70463          	beq	a4,a5,80000730 <handle_trap+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:270 (discriminator 1)
8000070c:	fec42703          	lw	a4,-20(s0)
80000710:	00a00793          	li	a5,10
80000714:	00f70e63          	beq	a4,a5,80000730 <handle_trap+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:270 (discriminator 2)
80000718:	fec42703          	lw	a4,-20(s0)
8000071c:	00900793          	li	a5,9
80000720:	00f70863          	beq	a4,a5,80000730 <handle_trap+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:270 (discriminator 3)
80000724:	fec42703          	lw	a4,-20(s0)
80000728:	00800793          	li	a5,8
8000072c:	00f71c63          	bne	a4,a5,80000744 <handle_trap+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:271
        handle_syscall();
80000730:	dbdff0ef          	jal	ra,800004ec <handle_syscall>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:272
        epc = (uintptr_t) (epc + 4);
80000734:	fe842783          	lw	a5,-24(s0)
80000738:	00478793          	addi	a5,a5,4
8000073c:	fef42423          	sw	a5,-24(s0)
80000740:	0a00006f          	j	800007e0 <handle_trap+0xf8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:274
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_EXT)){
80000744:	fec42783          	lw	a5,-20(s0)
80000748:	0207d263          	bgez	a5,8000076c <handle_trap+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:274 (discriminator 1)
8000074c:	fec42703          	lw	a4,-20(s0)
80000750:	800007b7          	lui	a5,0x80000
80000754:	fff7c793          	not	a5,a5
80000758:	00f77733          	and	a4,a4,a5
8000075c:	00b00793          	li	a5,11
80000760:	00f71663          	bne	a4,a5,8000076c <handle_trap+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:275
        handle_m_ext_interrupt();
80000764:	ce9ff0ef          	jal	ra,8000044c <handle_m_ext_interrupt>
80000768:	0780006f          	j	800007e0 <handle_trap+0xf8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:277
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_TIMER)){
8000076c:	fec42783          	lw	a5,-20(s0)
80000770:	0207d263          	bgez	a5,80000794 <handle_trap+0xac>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:277 (discriminator 1)
80000774:	fec42703          	lw	a4,-20(s0)
80000778:	800007b7          	lui	a5,0x80000
8000077c:	fff7c793          	not	a5,a5
80000780:	00f77733          	and	a4,a4,a5
80000784:	00700793          	li	a5,7
80000788:	00f71663          	bne	a4,a5,80000794 <handle_trap+0xac>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:278
        handle_m_timer_interrupt();
8000078c:	c19ff0ef          	jal	ra,800003a4 <handle_m_timer_interrupt>
80000790:	0500006f          	j	800007e0 <handle_trap+0xf8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:280
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_SOFT)){
80000794:	fec42783          	lw	a5,-20(s0)
80000798:	0207d263          	bgez	a5,800007bc <handle_trap+0xd4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:280 (discriminator 1)
8000079c:	fec42703          	lw	a4,-20(s0)
800007a0:	800007b7          	lui	a5,0x80000
800007a4:	fff7c793          	not	a5,a5
800007a8:	00f77733          	and	a4,a4,a5
800007ac:	00300793          	li	a5,3
800007b0:	00f71663          	bne	a4,a5,800007bc <handle_trap+0xd4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:281
        handle_m_soft_interrupt();
800007b4:	d09ff0ef          	jal	ra,800004bc <handle_m_soft_interrupt>
800007b8:	0280006f          	j	800007e0 <handle_trap+0xf8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:284
    }
    else{
        write(1, "trap\n", 5);
800007bc:	00500613          	li	a2,5
800007c0:	800057b7          	lui	a5,0x80005
800007c4:	a1078593          	addi	a1,a5,-1520 # 80004a10 <__stack_top+0xfffc5820>
800007c8:	00100513          	li	a0,1
800007cc:	14c040ef          	jal	ra,80004918 <write>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:285
        _exit(1 + mcause);
800007d0:	fec42783          	lw	a5,-20(s0)
800007d4:	00178793          	addi	a5,a5,1
800007d8:	00078513          	mv	a0,a5
800007dc:	4c4000ef          	jal	ra,80000ca0 <_exit>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:287
    }
    return epc;
800007e0:	fe842783          	lw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:288
}
800007e4:	00078513          	mv	a0,a5
800007e8:	01c12083          	lw	ra,28(sp)
800007ec:	01812403          	lw	s0,24(sp)
800007f0:	02010113          	addi	sp,sp,32
800007f4:	00008067          	ret

800007f8 <Invalid_IRQHandler>:
Invalid_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:37
{
    ;
}

__attribute__((weak))  uint8_t Invalid_IRQHandler(void)
{
800007f8:	ff010113          	addi	sp,sp,-16
800007fc:	00812623          	sw	s0,12(sp)
80000800:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:38
    return(0);
80000804:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:39
}
80000808:	00078513          	mv	a0,a5
8000080c:	00c12403          	lw	s0,12(sp)
80000810:	01010113          	addi	sp,sp,16
80000814:	00008067          	ret

80000818 <External_3_IRQHandler>:
External_3_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:52
{
    return(0);
}

__attribute__((weak))  uint8_t External_3_IRQHandler(void)
{
80000818:	ff010113          	addi	sp,sp,-16
8000081c:	00812623          	sw	s0,12(sp)
80000820:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:53
    return(0);
80000824:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:54
}
80000828:	00078513          	mv	a0,a5
8000082c:	00c12403          	lw	s0,12(sp)
80000830:	01010113          	addi	sp,sp,16
80000834:	00008067          	ret

80000838 <External_4_IRQHandler>:
External_4_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:57

__attribute__((weak))  uint8_t External_4_IRQHandler(void)
{
80000838:	ff010113          	addi	sp,sp,-16
8000083c:	00812623          	sw	s0,12(sp)
80000840:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:58
    return(0);
80000844:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:59
}
80000848:	00078513          	mv	a0,a5
8000084c:	00c12403          	lw	s0,12(sp)
80000850:	01010113          	addi	sp,sp,16
80000854:	00008067          	ret

80000858 <External_5_IRQHandler>:
External_5_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:62

__attribute__((weak))  uint8_t External_5_IRQHandler(void)
{
80000858:	ff010113          	addi	sp,sp,-16
8000085c:	00812623          	sw	s0,12(sp)
80000860:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:63
    return(0);
80000864:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:64
}
80000868:	00078513          	mv	a0,a5
8000086c:	00c12403          	lw	s0,12(sp)
80000870:	01010113          	addi	sp,sp,16
80000874:	00008067          	ret

80000878 <External_6_IRQHandler>:
External_6_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:67

__attribute__((weak))  uint8_t External_6_IRQHandler(void)
{
80000878:	ff010113          	addi	sp,sp,-16
8000087c:	00812623          	sw	s0,12(sp)
80000880:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:68
    return(0);
80000884:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:69
}
80000888:	00078513          	mv	a0,a5
8000088c:	00c12403          	lw	s0,12(sp)
80000890:	01010113          	addi	sp,sp,16
80000894:	00008067          	ret

80000898 <External_7_IRQHandler>:
External_7_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:72

__attribute__((weak))  uint8_t External_7_IRQHandler(void)
{
80000898:	ff010113          	addi	sp,sp,-16
8000089c:	00812623          	sw	s0,12(sp)
800008a0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:73
    return(0);
800008a4:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:74
}
800008a8:	00078513          	mv	a0,a5
800008ac:	00c12403          	lw	s0,12(sp)
800008b0:	01010113          	addi	sp,sp,16
800008b4:	00008067          	ret

800008b8 <External_8_IRQHandler>:
External_8_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:77

__attribute__((weak))  uint8_t External_8_IRQHandler(void)
{
800008b8:	ff010113          	addi	sp,sp,-16
800008bc:	00812623          	sw	s0,12(sp)
800008c0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:78
    return(0);
800008c4:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:79
}
800008c8:	00078513          	mv	a0,a5
800008cc:	00c12403          	lw	s0,12(sp)
800008d0:	01010113          	addi	sp,sp,16
800008d4:	00008067          	ret

800008d8 <External_9_IRQHandler>:
External_9_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:82

__attribute__((weak))  uint8_t External_9_IRQHandler(void)
{
800008d8:	ff010113          	addi	sp,sp,-16
800008dc:	00812623          	sw	s0,12(sp)
800008e0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:83
    return(0);
800008e4:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:84
}
800008e8:	00078513          	mv	a0,a5
800008ec:	00c12403          	lw	s0,12(sp)
800008f0:	01010113          	addi	sp,sp,16
800008f4:	00008067          	ret

800008f8 <External_10_IRQHandler>:
External_10_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:87

__attribute__((weak))  uint8_t External_10_IRQHandler(void)
{
800008f8:	ff010113          	addi	sp,sp,-16
800008fc:	00812623          	sw	s0,12(sp)
80000900:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:88
    return(0);
80000904:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:89
}
80000908:	00078513          	mv	a0,a5
8000090c:	00c12403          	lw	s0,12(sp)
80000910:	01010113          	addi	sp,sp,16
80000914:	00008067          	ret

80000918 <External_11_IRQHandler>:
External_11_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:92

__attribute__((weak))  uint8_t External_11_IRQHandler(void)
{
80000918:	ff010113          	addi	sp,sp,-16
8000091c:	00812623          	sw	s0,12(sp)
80000920:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:93
    return(0);
80000924:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:94
}
80000928:	00078513          	mv	a0,a5
8000092c:	00c12403          	lw	s0,12(sp)
80000930:	01010113          	addi	sp,sp,16
80000934:	00008067          	ret

80000938 <External_12_IRQHandler>:
External_12_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:97

__attribute__((weak))  uint8_t External_12_IRQHandler(void)
{
80000938:	ff010113          	addi	sp,sp,-16
8000093c:	00812623          	sw	s0,12(sp)
80000940:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:98
    return(0);
80000944:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:99
}
80000948:	00078513          	mv	a0,a5
8000094c:	00c12403          	lw	s0,12(sp)
80000950:	01010113          	addi	sp,sp,16
80000954:	00008067          	ret

80000958 <External_13_IRQHandler>:
External_13_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:102

__attribute__((weak))  uint8_t External_13_IRQHandler(void)
{
80000958:	ff010113          	addi	sp,sp,-16
8000095c:	00812623          	sw	s0,12(sp)
80000960:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:103
    return(0);
80000964:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:104
}
80000968:	00078513          	mv	a0,a5
8000096c:	00c12403          	lw	s0,12(sp)
80000970:	01010113          	addi	sp,sp,16
80000974:	00008067          	ret

80000978 <External_14_IRQHandler>:
External_14_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:107

__attribute__((weak))  uint8_t External_14_IRQHandler(void)
{
80000978:	ff010113          	addi	sp,sp,-16
8000097c:	00812623          	sw	s0,12(sp)
80000980:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:108
    return(0);
80000984:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:109
}
80000988:	00078513          	mv	a0,a5
8000098c:	00c12403          	lw	s0,12(sp)
80000990:	01010113          	addi	sp,sp,16
80000994:	00008067          	ret

80000998 <External_15_IRQHandler>:
External_15_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:112

__attribute__((weak))  uint8_t External_15_IRQHandler(void)
{
80000998:	ff010113          	addi	sp,sp,-16
8000099c:	00812623          	sw	s0,12(sp)
800009a0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:113
    return(0);
800009a4:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:114
}
800009a8:	00078513          	mv	a0,a5
800009ac:	00c12403          	lw	s0,12(sp)
800009b0:	01010113          	addi	sp,sp,16
800009b4:	00008067          	ret

800009b8 <External_16_IRQHandler>:
External_16_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:117

__attribute__((weak))  uint8_t External_16_IRQHandler(void)
{
800009b8:	ff010113          	addi	sp,sp,-16
800009bc:	00812623          	sw	s0,12(sp)
800009c0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:118
    return(0);
800009c4:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:119
}
800009c8:	00078513          	mv	a0,a5
800009cc:	00c12403          	lw	s0,12(sp)
800009d0:	01010113          	addi	sp,sp,16
800009d4:	00008067          	ret

800009d8 <External_17_IRQHandler>:
External_17_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:122

__attribute__((weak))  uint8_t External_17_IRQHandler(void)
{
800009d8:	ff010113          	addi	sp,sp,-16
800009dc:	00812623          	sw	s0,12(sp)
800009e0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:123
    return(0);
800009e4:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:124
}
800009e8:	00078513          	mv	a0,a5
800009ec:	00c12403          	lw	s0,12(sp)
800009f0:	01010113          	addi	sp,sp,16
800009f4:	00008067          	ret

800009f8 <External_18_IRQHandler>:
External_18_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:127

__attribute__((weak))  uint8_t External_18_IRQHandler(void)
{
800009f8:	ff010113          	addi	sp,sp,-16
800009fc:	00812623          	sw	s0,12(sp)
80000a00:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:128
    return(0);
80000a04:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:129
}
80000a08:	00078513          	mv	a0,a5
80000a0c:	00c12403          	lw	s0,12(sp)
80000a10:	01010113          	addi	sp,sp,16
80000a14:	00008067          	ret

80000a18 <External_19_IRQHandler>:
External_19_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:132

__attribute__((weak))  uint8_t External_19_IRQHandler(void)
{
80000a18:	ff010113          	addi	sp,sp,-16
80000a1c:	00812623          	sw	s0,12(sp)
80000a20:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:133
    return(0);
80000a24:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:134
}
80000a28:	00078513          	mv	a0,a5
80000a2c:	00c12403          	lw	s0,12(sp)
80000a30:	01010113          	addi	sp,sp,16
80000a34:	00008067          	ret

80000a38 <External_20_IRQHandler>:
External_20_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:137

__attribute__((weak))  uint8_t External_20_IRQHandler(void)
{
80000a38:	ff010113          	addi	sp,sp,-16
80000a3c:	00812623          	sw	s0,12(sp)
80000a40:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:138
    return(0);
80000a44:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:139
}
80000a48:	00078513          	mv	a0,a5
80000a4c:	00c12403          	lw	s0,12(sp)
80000a50:	01010113          	addi	sp,sp,16
80000a54:	00008067          	ret

80000a58 <External_21_IRQHandler>:
External_21_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:142

__attribute__((weak))  uint8_t External_21_IRQHandler(void)
{
80000a58:	ff010113          	addi	sp,sp,-16
80000a5c:	00812623          	sw	s0,12(sp)
80000a60:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:143
    return(0);
80000a64:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:144
}
80000a68:	00078513          	mv	a0,a5
80000a6c:	00c12403          	lw	s0,12(sp)
80000a70:	01010113          	addi	sp,sp,16
80000a74:	00008067          	ret

80000a78 <External_22_IRQHandler>:
External_22_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:147

__attribute__((weak))  uint8_t External_22_IRQHandler(void)
{
80000a78:	ff010113          	addi	sp,sp,-16
80000a7c:	00812623          	sw	s0,12(sp)
80000a80:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:148
    return(0);
80000a84:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:149
}
80000a88:	00078513          	mv	a0,a5
80000a8c:	00c12403          	lw	s0,12(sp)
80000a90:	01010113          	addi	sp,sp,16
80000a94:	00008067          	ret

80000a98 <External_23_IRQHandler>:
External_23_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:152

__attribute__((weak))  uint8_t External_23_IRQHandler(void)
{
80000a98:	ff010113          	addi	sp,sp,-16
80000a9c:	00812623          	sw	s0,12(sp)
80000aa0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:153
    return(0);
80000aa4:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:154
}
80000aa8:	00078513          	mv	a0,a5
80000aac:	00c12403          	lw	s0,12(sp)
80000ab0:	01010113          	addi	sp,sp,16
80000ab4:	00008067          	ret

80000ab8 <External_24_IRQHandler>:
External_24_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:157

__attribute__((weak))  uint8_t External_24_IRQHandler(void)
{
80000ab8:	ff010113          	addi	sp,sp,-16
80000abc:	00812623          	sw	s0,12(sp)
80000ac0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:158
    return(0);
80000ac4:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:159
}
80000ac8:	00078513          	mv	a0,a5
80000acc:	00c12403          	lw	s0,12(sp)
80000ad0:	01010113          	addi	sp,sp,16
80000ad4:	00008067          	ret

80000ad8 <External_25_IRQHandler>:
External_25_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:162

__attribute__((weak))  uint8_t External_25_IRQHandler(void)
{
80000ad8:	ff010113          	addi	sp,sp,-16
80000adc:	00812623          	sw	s0,12(sp)
80000ae0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:163
    return(0);
80000ae4:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:164
}
80000ae8:	00078513          	mv	a0,a5
80000aec:	00c12403          	lw	s0,12(sp)
80000af0:	01010113          	addi	sp,sp,16
80000af4:	00008067          	ret

80000af8 <External_26_IRQHandler>:
External_26_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:167

__attribute__((weak))  uint8_t External_26_IRQHandler(void)
{
80000af8:	ff010113          	addi	sp,sp,-16
80000afc:	00812623          	sw	s0,12(sp)
80000b00:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:168
    return(0);
80000b04:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:169
}
80000b08:	00078513          	mv	a0,a5
80000b0c:	00c12403          	lw	s0,12(sp)
80000b10:	01010113          	addi	sp,sp,16
80000b14:	00008067          	ret

80000b18 <External_27_IRQHandler>:
External_27_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:172

__attribute__((weak))  uint8_t External_27_IRQHandler(void)
{
80000b18:	ff010113          	addi	sp,sp,-16
80000b1c:	00812623          	sw	s0,12(sp)
80000b20:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:173
    return(0);
80000b24:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:174
}
80000b28:	00078513          	mv	a0,a5
80000b2c:	00c12403          	lw	s0,12(sp)
80000b30:	01010113          	addi	sp,sp,16
80000b34:	00008067          	ret

80000b38 <External_28_IRQHandler>:
External_28_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:177

__attribute__((weak))  uint8_t External_28_IRQHandler(void)
{
80000b38:	ff010113          	addi	sp,sp,-16
80000b3c:	00812623          	sw	s0,12(sp)
80000b40:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:178
    return(0);
80000b44:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:179
}
80000b48:	00078513          	mv	a0,a5
80000b4c:	00c12403          	lw	s0,12(sp)
80000b50:	01010113          	addi	sp,sp,16
80000b54:	00008067          	ret

80000b58 <External_29_IRQHandler>:
External_29_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:182

__attribute__((weak))  uint8_t External_29_IRQHandler(void)
{
80000b58:	ff010113          	addi	sp,sp,-16
80000b5c:	00812623          	sw	s0,12(sp)
80000b60:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:183
    return(0);
80000b64:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:184
}
80000b68:	00078513          	mv	a0,a5
80000b6c:	00c12403          	lw	s0,12(sp)
80000b70:	01010113          	addi	sp,sp,16
80000b74:	00008067          	ret

80000b78 <External_30_IRQHandler>:
External_30_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:187

__attribute__((weak))  uint8_t External_30_IRQHandler(void)
{
80000b78:	ff010113          	addi	sp,sp,-16
80000b7c:	00812623          	sw	s0,12(sp)
80000b80:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:188
    return(0);
80000b84:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:189
}
80000b88:	00078513          	mv	a0,a5
80000b8c:	00c12403          	lw	s0,12(sp)
80000b90:	01010113          	addi	sp,sp,16
80000b94:	00008067          	ret

80000b98 <External_31_IRQHandler>:
External_31_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:192

__attribute__((weak))  uint8_t External_31_IRQHandler(void)
{
80000b98:	ff010113          	addi	sp,sp,-16
80000b9c:	00812623          	sw	s0,12(sp)
80000ba0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:193
    return(0);
80000ba4:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:194
}
80000ba8:	00078513          	mv	a0,a5
80000bac:	00c12403          	lw	s0,12(sp)
80000bb0:	01010113          	addi	sp,sp,16
80000bb4:	00008067          	ret

80000bb8 <write_hex>:
write_hex():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:55

char *__env[1] = { 0 };
char **environ = __env;

void write_hex(int fd, uint32_t hex)
{
80000bb8:	fd010113          	addi	sp,sp,-48
80000bbc:	02112623          	sw	ra,44(sp)
80000bc0:	02812423          	sw	s0,40(sp)
80000bc4:	03010413          	addi	s0,sp,48
80000bc8:	fca42e23          	sw	a0,-36(s0)
80000bcc:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:61
    uint8_t ii;
    uint8_t jj;
    char towrite;
    uint8_t digit;

    write( fd , "0x", 2 );
80000bd0:	00200613          	li	a2,2
80000bd4:	800057b7          	lui	a5,0x80005
80000bd8:	a1878593          	addi	a1,a5,-1512 # 80004a18 <__stack_top+0xfffc5828>
80000bdc:	fdc42503          	lw	a0,-36(s0)
80000be0:	539030ef          	jal	ra,80004918 <write>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:63

    for (ii = 8 ; ii > 0; ii--)
80000be4:	00800793          	li	a5,8
80000be8:	fef407a3          	sb	a5,-17(s0)
80000bec:	0980006f          	j	80000c84 <write_hex+0xcc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:65
    {
        jj = ii-1;
80000bf0:	fef44783          	lbu	a5,-17(s0)
80000bf4:	fff78793          	addi	a5,a5,-1
80000bf8:	fef40723          	sb	a5,-18(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:66
        digit = ((hex & (0xF << (jj*4))) >> (jj*4));
80000bfc:	fee44783          	lbu	a5,-18(s0)
80000c00:	00279793          	slli	a5,a5,0x2
80000c04:	00f00713          	li	a4,15
80000c08:	00f717b3          	sll	a5,a4,a5
80000c0c:	00078713          	mv	a4,a5
80000c10:	fd842783          	lw	a5,-40(s0)
80000c14:	00f77733          	and	a4,a4,a5
80000c18:	fee44783          	lbu	a5,-18(s0)
80000c1c:	00279793          	slli	a5,a5,0x2
80000c20:	00f757b3          	srl	a5,a4,a5
80000c24:	fef406a3          	sb	a5,-19(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:67
        towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
80000c28:	fed44703          	lbu	a4,-19(s0)
80000c2c:	00900793          	li	a5,9
80000c30:	00e7ee63          	bltu	a5,a4,80000c4c <write_hex+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 1)
80000c34:	fed44783          	lbu	a5,-19(s0)
80000c38:	03078793          	addi	a5,a5,48
80000c3c:	0ff7f793          	andi	a5,a5,255
80000c40:	01879793          	slli	a5,a5,0x18
80000c44:	4187d793          	srai	a5,a5,0x18
80000c48:	0180006f          	j	80000c60 <write_hex+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 2)
80000c4c:	fed44783          	lbu	a5,-19(s0)
80000c50:	03778793          	addi	a5,a5,55
80000c54:	0ff7f793          	andi	a5,a5,255
80000c58:	01879793          	slli	a5,a5,0x18
80000c5c:	4187d793          	srai	a5,a5,0x18
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 4)
80000c60:	fef40623          	sb	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:68 (discriminator 4)
        write( fd, &towrite, 1);
80000c64:	fec40793          	addi	a5,s0,-20
80000c68:	00100613          	li	a2,1
80000c6c:	00078593          	mv	a1,a5
80000c70:	fdc42503          	lw	a0,-36(s0)
80000c74:	4a5030ef          	jal	ra,80004918 <write>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 4)
    for (ii = 8 ; ii > 0; ii--)
80000c78:	fef44783          	lbu	a5,-17(s0)
80000c7c:	fff78793          	addi	a5,a5,-1
80000c80:	fef407a3          	sb	a5,-17(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 2)
80000c84:	fef44783          	lbu	a5,-17(s0)
80000c88:	f60794e3          	bnez	a5,80000bf0 <write_hex+0x38>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:70
    }
}
80000c8c:	00000013          	nop
80000c90:	02c12083          	lw	ra,44(sp)
80000c94:	02812403          	lw	s0,40(sp)
80000c98:	03010113          	addi	sp,sp,48
80000c9c:	00008067          	ret

80000ca0 <_exit>:
_exit():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:74

               
void _exit(int code)
{
80000ca0:	fd010113          	addi	sp,sp,-48
80000ca4:	02112623          	sw	ra,44(sp)
80000ca8:	02812423          	sw	s0,40(sp)
80000cac:	03010413          	addi	s0,sp,48
80000cb0:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:76
#ifdef MSCC_STDIO_THRU_CORE_UART_APB
    const char * message = "\nProgam has exited with code:";
80000cb4:	800057b7          	lui	a5,0x80005
80000cb8:	a1c78793          	addi	a5,a5,-1508 # 80004a1c <__stack_top+0xfffc582c>
80000cbc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:78

    write(STDERR_FILENO, message, strlen(message));
80000cc0:	fec42503          	lw	a0,-20(s0)
80000cc4:	098010ef          	jal	ra,80001d5c <strlen>
80000cc8:	00050793          	mv	a5,a0
80000ccc:	00078613          	mv	a2,a5
80000cd0:	fec42583          	lw	a1,-20(s0)
80000cd4:	00200513          	li	a0,2
80000cd8:	441030ef          	jal	ra,80004918 <write>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:79
    write_hex(STDERR_FILENO, code);
80000cdc:	fdc42783          	lw	a5,-36(s0)
80000ce0:	00078593          	mv	a1,a5
80000ce4:	00200513          	li	a0,2
80000ce8:	ed1ff0ef          	jal	ra,80000bb8 <write_hex>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:82 (discriminator 1)
#endif

    while (1);
80000cec:	0000006f          	j	80000cec <_exit+0x4c>

80000cf0 <_isatty>:
_isatty():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:101
    curbrk += incr;
    return curbrk - incr;
}

int _isatty(int fd)
{
80000cf0:	fe010113          	addi	sp,sp,-32
80000cf4:	00812e23          	sw	s0,28(sp)
80000cf8:	02010413          	addi	s0,sp,32
80000cfc:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:102
    if (fd == STDOUT_FILENO || fd == STDERR_FILENO)
80000d00:	fec42703          	lw	a4,-20(s0)
80000d04:	00100793          	li	a5,1
80000d08:	00f70863          	beq	a4,a5,80000d18 <_isatty+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:102 (discriminator 1)
80000d0c:	fec42703          	lw	a4,-20(s0)
80000d10:	00200793          	li	a5,2
80000d14:	00f71663          	bne	a4,a5,80000d20 <_isatty+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:104
    {
        return 1;
80000d18:	00100793          	li	a5,1
80000d1c:	0140006f          	j	80000d30 <_isatty+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:107
    }

    errno = EBADF;
80000d20:	8001f7b7          	lui	a5,0x8001f
80000d24:	00900713          	li	a4,9
80000d28:	a0e7ac23          	sw	a4,-1512(a5) # 8001ea18 <__stack_top+0xfffdf828>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:108
    return 0;
80000d2c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:109
}
80000d30:	00078513          	mv	a0,a5
80000d34:	01c12403          	lw	s0,28(sp)
80000d38:	02010113          	addi	sp,sp,32
80000d3c:	00008067          	ret

80000d40 <stub>:
stub():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:112

static int stub(int err)
{
80000d40:	fe010113          	addi	sp,sp,-32
80000d44:	00812e23          	sw	s0,28(sp)
80000d48:	02010413          	addi	s0,sp,32
80000d4c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:113
    errno = err;
80000d50:	8001f7b7          	lui	a5,0x8001f
80000d54:	fec42703          	lw	a4,-20(s0)
80000d58:	a0e7ac23          	sw	a4,-1512(a5) # 8001ea18 <__stack_top+0xfffdf828>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:114
    return -1;
80000d5c:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:115
}
80000d60:	00078513          	mv	a0,a5
80000d64:	01c12403          	lw	s0,28(sp)
80000d68:	02010113          	addi	sp,sp,32
80000d6c:	00008067          	ret

80000d70 <_write>:
_write():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:226
{
    return stub(ECHILD);
}

ssize_t _write(int fd, const void* ptr, size_t len)
{
80000d70:	fd010113          	addi	sp,sp,-48
80000d74:	02112623          	sw	ra,44(sp)
80000d78:	02812423          	sw	s0,40(sp)
80000d7c:	03010413          	addi	s0,sp,48
80000d80:	fca42e23          	sw	a0,-36(s0)
80000d84:	fcb42c23          	sw	a1,-40(s0)
80000d88:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:229

#ifdef MSCC_STDIO_THRU_CORE_UART_APB
  const uint8_t * current = (const uint8_t *) ptr;
80000d8c:	fd842783          	lw	a5,-40(s0)
80000d90:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:232
  size_t jj;

  if (_isatty(fd))
80000d94:	fdc42503          	lw	a0,-36(s0)
80000d98:	f59ff0ef          	jal	ra,80000cf0 <_isatty>
80000d9c:	00050793          	mv	a5,a0
80000da0:	08078c63          	beqz	a5,80000e38 <_write+0xc8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:238
  {
        /*--------------------------------------------------------------------------
        * Initialize the UART driver if it is the first time this function is
        * called.
        */
        if ( !g_stdio_uart_init_done )
80000da4:	9101a783          	lw	a5,-1776(gp) # 80004ea0 <g_stdio_uart_init_done>
80000da8:	02079063          	bnez	a5,80000dc8 <_write+0x58>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:245
            /******************************************************************************
            * Baud value:
            * This value is calculated using the following equation:
            *      BAUD_VALUE = (CLOCK / (16 * BAUD_RATE)) - 1
            *****************************************************************************/
            UART_init( &g_stdio_uart, MSCC_STDIO_UART_BASE_ADDR, ((SYS_CLK_FREQ/(16 * MSCC_STDIO_BAUD_VALUE))-1), (DATA_8_BITS | NO_PARITY));
80000dac:	00100693          	li	a3,1
80000db0:	02c00613          	li	a2,44
80000db4:	700015b7          	lui	a1,0x70001
80000db8:	90818513          	addi	a0,gp,-1784 # 80004e98 <g_stdio_uart>
80000dbc:	174000ef          	jal	ra,80000f30 <UART_init>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:246
            g_stdio_uart_init_done = 1;
80000dc0:	00100713          	li	a4,1
80000dc4:	90e1a823          	sw	a4,-1776(gp) # 80004ea0 <g_stdio_uart_init_done>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:249
        }

    for (jj = 0; jj < len; jj++)
80000dc8:	fe042623          	sw	zero,-20(s0)
80000dcc:	0580006f          	j	80000e24 <_write+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:251
    {
        UART_send(&g_stdio_uart, current + jj, 1);
80000dd0:	fe842703          	lw	a4,-24(s0)
80000dd4:	fec42783          	lw	a5,-20(s0)
80000dd8:	00f707b3          	add	a5,a4,a5
80000ddc:	00100613          	li	a2,1
80000de0:	00078593          	mv	a1,a5
80000de4:	90818513          	addi	a0,gp,-1784 # 80004e98 <g_stdio_uart>
80000de8:	260000ef          	jal	ra,80001048 <UART_send>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:252
        if (current[jj] == '\n')
80000dec:	fe842703          	lw	a4,-24(s0)
80000df0:	fec42783          	lw	a5,-20(s0)
80000df4:	00f707b3          	add	a5,a4,a5
80000df8:	0007c703          	lbu	a4,0(a5)
80000dfc:	00a00793          	li	a5,10
80000e00:	00f71c63          	bne	a4,a5,80000e18 <_write+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:254
        {
            UART_send(&g_stdio_uart, (const uint8_t *)"\r", 1);
80000e04:	00100613          	li	a2,1
80000e08:	800057b7          	lui	a5,0x80005
80000e0c:	a3c78593          	addi	a1,a5,-1476 # 80004a3c <__stack_top+0xfffc584c>
80000e10:	90818513          	addi	a0,gp,-1784 # 80004e98 <g_stdio_uart>
80000e14:	234000ef          	jal	ra,80001048 <UART_send>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 2)
    for (jj = 0; jj < len; jj++)
80000e18:	fec42783          	lw	a5,-20(s0)
80000e1c:	00178793          	addi	a5,a5,1
80000e20:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 1)
80000e24:	fec42703          	lw	a4,-20(s0)
80000e28:	fd442783          	lw	a5,-44(s0)
80000e2c:	faf762e3          	bltu	a4,a5,80000dd0 <_write+0x60>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:257
        }
    }
    return len;
80000e30:	fd442783          	lw	a5,-44(s0)
80000e34:	0100006f          	j	80000e44 <_write+0xd4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:261
  }
#endif

  return stub(EBADF);
80000e38:	00900513          	li	a0,9
80000e3c:	f05ff0ef          	jal	ra,80000d40 <stub>
80000e40:	00050793          	mv	a5,a0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:262
}
80000e44:	00078513          	mv	a0,a5
80000e48:	02c12083          	lw	ra,44(sp)
80000e4c:	02812403          	lw	s0,40(sp)
80000e50:	03010113          	addi	sp,sp,48
80000e54:	00008067          	ret

80000e58 <HW_set_32bit_reg>:
HW_set_32bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:36
 *
 * a0:   addr_t reg_addr
 * a1:   uint32_t value
 */
HW_set_32bit_reg:
    sw a1, 0(a0)
80000e58:	00b52023          	sw	a1,0(a0) # 44000000 <RAM_SIZE+0x43f80000>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:37
    ret
80000e5c:	00008067          	ret

80000e60 <HW_get_32bit_reg>:
HW_get_32bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:47
 *
 * R0:   addr_t reg_addr
 * @return          32 bits value read from the peripheral register.
 */
HW_get_32bit_reg:
    lw a0, 0(a0)
80000e60:	00052503          	lw	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:48
    ret
80000e64:	00008067          	ret

80000e68 <HW_set_32bit_reg_field>:
HW_set_32bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:60
 * a1:   int_fast8_t shift
 * a2:   uint32_t mask
 * a3:   uint32_t value
 */
HW_set_32bit_reg_field:
    mv t3, a3
80000e68:	00068e13          	mv	t3,a3
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:61
    sll t3, t3, a1
80000e6c:	00be1e33          	sll	t3,t3,a1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:62
    and  t3, t3, a2
80000e70:	00ce7e33          	and	t3,t3,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:63
    lw t1, 0(a0)
80000e74:	00052303          	lw	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:64
    mv t2, a2
80000e78:	00060393          	mv	t2,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:65
    not t2, t2
80000e7c:	fff3c393          	not	t2,t2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:66
    and t1, t1, t2
80000e80:	00737333          	and	t1,t1,t2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:67
    or t1, t1, t3
80000e84:	01c36333          	or	t1,t1,t3
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:68
    sw t1, 0(a0)
80000e88:	00652023          	sw	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:69
    ret
80000e8c:	00008067          	ret

80000e90 <HW_get_32bit_reg_field>:
HW_get_32bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:83
 *
 * @return          32 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_32bit_reg_field:
    lw a0, 0(a0)
80000e90:	00052503          	lw	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:84
    and a0, a0, a2
80000e94:	00c57533          	and	a0,a0,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:85
    srl a0, a0, a1
80000e98:	00b55533          	srl	a0,a0,a1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:86
    ret
80000e9c:	00008067          	ret

80000ea0 <HW_set_16bit_reg>:
HW_set_16bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:96
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast16_t value
 */
HW_set_16bit_reg:
    sh a1, 0(a0)
80000ea0:	00b51023          	sh	a1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:97
    ret
80000ea4:	00008067          	ret

80000ea8 <HW_get_16bit_reg>:
HW_get_16bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:107
 *
 * a0:   addr_t reg_addr
 * @return          16 bits value read from the peripheral register.
 */
HW_get_16bit_reg:
    lh a0, (a0)
80000ea8:	00051503          	lh	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:108
    ret
80000eac:	00008067          	ret

80000eb0 <HW_set_16bit_reg_field>:
HW_set_16bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:121
 * a2:   uint_fast16_t mask
 * a3:   uint_fast16_t value
 * @param value     Value to be written in the specified field.
 */
HW_set_16bit_reg_field:
    mv t3, a3
80000eb0:	00068e13          	mv	t3,a3
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:122
    sll t3, t3, a1
80000eb4:	00be1e33          	sll	t3,t3,a1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:123
    and  t3, t3, a2
80000eb8:	00ce7e33          	and	t3,t3,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:124
    lh t1, 0(a0)
80000ebc:	00051303          	lh	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:125
    mv t2, a2
80000ec0:	00060393          	mv	t2,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:126
    not t2, t2
80000ec4:	fff3c393          	not	t2,t2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:127
    and t1, t1, t2
80000ec8:	00737333          	and	t1,t1,t2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:128
    or t1, t1, t3
80000ecc:	01c36333          	or	t1,t1,t3
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:129
    sh t1, 0(a0)
80000ed0:	00651023          	sh	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:130
    ret
80000ed4:	00008067          	ret

80000ed8 <HW_get_16bit_reg_field>:
HW_get_16bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:144
 *
 * @return          16 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_16bit_reg_field:
    lh a0, 0(a0)
80000ed8:	00051503          	lh	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:145
    and a0, a0, a2
80000edc:	00c57533          	and	a0,a0,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:146
    srl a0, a0, a1
80000ee0:	00b55533          	srl	a0,a0,a1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:147
    ret
80000ee4:	00008067          	ret

80000ee8 <HW_set_8bit_reg>:
HW_set_8bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:157
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast8_t value
 */
HW_set_8bit_reg:
    sb a1, 0(a0)
80000ee8:	00b50023          	sb	a1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:158
    ret
80000eec:	00008067          	ret

80000ef0 <HW_get_8bit_reg>:
HW_get_8bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:168
 *
 * a0:   addr_t reg_addr
 * @return          8 bits value read from the peripheral register.
 */
HW_get_8bit_reg:
    lb a0, 0(a0)
80000ef0:	00050503          	lb	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:169
    ret
80000ef4:	00008067          	ret

80000ef8 <HW_set_8bit_reg_field>:
HW_set_8bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:181
 * a1:   int_fast8_t shift
 * a2:   uint_fast8_t mask
 * a3:   uint_fast8_t value
 */
HW_set_8bit_reg_field:
    mv t3, a3
80000ef8:	00068e13          	mv	t3,a3
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:182
    sll t3, t3, a1
80000efc:	00be1e33          	sll	t3,t3,a1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:183
    and  t3, t3, a2
80000f00:	00ce7e33          	and	t3,t3,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:184
    lb t1, 0(a0)
80000f04:	00050303          	lb	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:185
    mv t2, a2
80000f08:	00060393          	mv	t2,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:186
    not t2, t2
80000f0c:	fff3c393          	not	t2,t2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:187
    and t1, t1, t2
80000f10:	00737333          	and	t1,t1,t2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:188
    or t1, t1, t3
80000f14:	01c36333          	or	t1,t1,t3
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:189
    sb t1, 0(a0)
80000f18:	00650023          	sb	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:190
    ret
80000f1c:	00008067          	ret

80000f20 <HW_get_8bit_reg_field>:
HW_get_8bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:204
 *
 * @return          8 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_8bit_reg_field:
    lb a0, 0(a0)
80000f20:	00050503          	lb	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:205
    and a0, a0, a2
80000f24:	00c57533          	and	a0,a0,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:206
    srl a0, a0, a1
80000f28:	00b55533          	srl	a0,a0,a1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:207
    ret
80000f2c:	00008067          	ret

80000f30 <UART_init>:
UART_init():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:46
    UART_instance_t * this_uart,
    addr_t base_addr,
    uint16_t baud_value,
    uint8_t line_config
)
{
80000f30:	fd010113          	addi	sp,sp,-48
80000f34:	02112623          	sw	ra,44(sp)
80000f38:	02812423          	sw	s0,40(sp)
80000f3c:	03010413          	addi	s0,sp,48
80000f40:	fca42e23          	sw	a0,-36(s0)
80000f44:	fcb42c23          	sw	a1,-40(s0)
80000f48:	00060793          	mv	a5,a2
80000f4c:	00068713          	mv	a4,a3
80000f50:	fcf41b23          	sh	a5,-42(s0)
80000f54:	00070793          	mv	a5,a4
80000f58:	fcf40aa3          	sb	a5,-43(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53
    
    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( line_config <= MAX_LINE_CONFIG )
    HAL_ASSERT( baud_value <= MAX_BAUD_VALUE )

    if( ( this_uart != NULL_INSTANCE ) &&
80000f5c:	fdc42783          	lw	a5,-36(s0)
80000f60:	0c078a63          	beqz	a5,80001034 <UART_init+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53 (discriminator 1)
80000f64:	fd544703          	lbu	a4,-43(s0)
80000f68:	00700793          	li	a5,7
80000f6c:	0ce7e463          	bltu	a5,a4,80001034 <UART_init+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:54
        ( line_config <= MAX_LINE_CONFIG ) &&
80000f70:	fd645703          	lhu	a4,-42(s0)
80000f74:	000027b7          	lui	a5,0x2
80000f78:	0af77e63          	bleu	a5,a4,80001034 <UART_init+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:60
        ( baud_value <= MAX_BAUD_VALUE ) )
    {
        /*
         * Store lower 8-bits of baud value in CTRL1.
         */
        HAL_set_8bit_reg( base_addr, CTRL1, (uint_fast8_t)(baud_value &
80000f7c:	fd842783          	lw	a5,-40(s0)
80000f80:	00878713          	addi	a4,a5,8 # 2008 <HEAP_SIZE-0xdff8>
80000f84:	fd645783          	lhu	a5,-42(s0)
80000f88:	0ff7f793          	andi	a5,a5,255
80000f8c:	00078593          	mv	a1,a5
80000f90:	00070513          	mv	a0,a4
80000f94:	f55ff0ef          	jal	ra,80000ee8 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:67
    
        /*
         * Extract higher 5-bits of baud value and store in higher 5-bits 
         * of CTRL2, along with line configuration in lower 3 three bits.
         */
        HAL_set_8bit_reg( base_addr, CTRL2, (uint_fast8_t)line_config | 
80000f98:	fd842783          	lw	a5,-40(s0)
80000f9c:	00c78693          	addi	a3,a5,12
80000fa0:	fd544703          	lbu	a4,-43(s0)
80000fa4:	fd645783          	lhu	a5,-42(s0)
80000fa8:	4057d793          	srai	a5,a5,0x5
80000fac:	7f87f793          	andi	a5,a5,2040
80000fb0:	00f767b3          	or	a5,a4,a5
80000fb4:	00078593          	mv	a1,a5
80000fb8:	00068513          	mv	a0,a3
80000fbc:	f2dff0ef          	jal	ra,80000ee8 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:71
                                           (uint_fast8_t)((baud_value &
                                   BAUDVALUE_MSB) >> BAUDVALUE_SHIFT ) );
    
        this_uart->base_address = base_addr;
80000fc0:	fdc42783          	lw	a5,-36(s0)
80000fc4:	fd842703          	lw	a4,-40(s0)
80000fc8:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:94
        
        /*
         * Flush the receive FIFO of data that may have been received before the
         * driver was initialized.
         */
        rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80000fcc:	fdc42783          	lw	a5,-36(s0)
80000fd0:	0007a783          	lw	a5,0(a5)
80000fd4:	01078793          	addi	a5,a5,16
80000fd8:	00078513          	mv	a0,a5
80000fdc:	f15ff0ef          	jal	ra,80000ef0 <HW_get_8bit_reg>
80000fe0:	00050793          	mv	a5,a0
80000fe4:	0027f793          	andi	a5,a5,2
80000fe8:	fef407a3          	sb	a5,-17(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
                                                    STATUS_RXFULL_MASK;
        while ( rx_full )
80000fec:	0380006f          	j	80001024 <UART_init+0xf4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:98
        {
            HAL_get_8bit_reg( this_uart->base_address, RXDATA );
80000ff0:	fdc42783          	lw	a5,-36(s0)
80000ff4:	0007a783          	lw	a5,0(a5)
80000ff8:	00478793          	addi	a5,a5,4
80000ffc:	00078513          	mv	a0,a5
80001000:	ef1ff0ef          	jal	ra,80000ef0 <HW_get_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:99
            rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001004:	fdc42783          	lw	a5,-36(s0)
80001008:	0007a783          	lw	a5,0(a5)
8000100c:	01078793          	addi	a5,a5,16
80001010:	00078513          	mv	a0,a5
80001014:	eddff0ef          	jal	ra,80000ef0 <HW_get_8bit_reg>
80001018:	00050793          	mv	a5,a0
8000101c:	0027f793          	andi	a5,a5,2
80001020:	fef407a3          	sb	a5,-17(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
        while ( rx_full )
80001024:	fef44783          	lbu	a5,-17(s0)
80001028:	fc0794e3          	bnez	a5,80000ff0 <UART_init+0xc0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:106
        }

        /*
         * Clear status of the UART instance.
         */
        this_uart->status = (uint8_t)0;
8000102c:	fdc42783          	lw	a5,-36(s0)
80001030:	00078223          	sb	zero,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:108
    }
}
80001034:	00000013          	nop
80001038:	02c12083          	lw	ra,44(sp)
8000103c:	02812403          	lw	s0,40(sp)
80001040:	03010113          	addi	sp,sp,48
80001044:	00008067          	ret

80001048 <UART_send>:
UART_send():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:121
(
    UART_instance_t * this_uart,
    const uint8_t * tx_buffer,
    size_t tx_size
)
{
80001048:	fd010113          	addi	sp,sp,-48
8000104c:	02112623          	sw	ra,44(sp)
80001050:	02812423          	sw	s0,40(sp)
80001054:	03010413          	addi	s0,sp,48
80001058:	fca42e23          	sw	a0,-36(s0)
8000105c:	fcb42c23          	sw	a1,-40(s0)
80001060:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( tx_buffer != NULL_BUFFER )
    HAL_ASSERT( tx_size > 0 )
      
    if( (this_uart != NULL_INSTANCE) &&
80001064:	fdc42783          	lw	a5,-36(s0)
80001068:	08078063          	beqz	a5,800010e8 <UART_send+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129 (discriminator 1)
8000106c:	fd842783          	lw	a5,-40(s0)
80001070:	06078c63          	beqz	a5,800010e8 <UART_send+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:130
        (tx_buffer != NULL_BUFFER)   &&
80001074:	fd442783          	lw	a5,-44(s0)
80001078:	06078863          	beqz	a5,800010e8 <UART_send+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133
        (tx_size > (size_t)0) )
    {
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
8000107c:	fe042623          	sw	zero,-20(s0)
80001080:	05c0006f          	j	800010dc <UART_send+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:137 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001084:	fdc42783          	lw	a5,-36(s0)
80001088:	0007a783          	lw	a5,0(a5)
8000108c:	01078793          	addi	a5,a5,16
80001090:	00078513          	mv	a0,a5
80001094:	e5dff0ef          	jal	ra,80000ef0 <HW_get_8bit_reg>
80001098:	00050793          	mv	a5,a0
8000109c:	0017f793          	andi	a5,a5,1
800010a0:	fef405a3          	sb	a5,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:139 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
800010a4:	feb44783          	lbu	a5,-21(s0)
800010a8:	fc078ee3          	beqz	a5,80001084 <UART_send+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:141 (discriminator 2)
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
800010ac:	fdc42783          	lw	a5,-36(s0)
800010b0:	0007a683          	lw	a3,0(a5)
800010b4:	fd842703          	lw	a4,-40(s0)
800010b8:	fec42783          	lw	a5,-20(s0)
800010bc:	00f707b3          	add	a5,a4,a5
800010c0:	0007c783          	lbu	a5,0(a5)
800010c4:	00078593          	mv	a1,a5
800010c8:	00068513          	mv	a0,a3
800010cc:	e1dff0ef          	jal	ra,80000ee8 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 2)
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
800010d0:	fec42783          	lw	a5,-20(s0)
800010d4:	00178793          	addi	a5,a5,1
800010d8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 1)
800010dc:	fec42703          	lw	a4,-20(s0)
800010e0:	fd442783          	lw	a5,-44(s0)
800010e4:	faf760e3          	bltu	a4,a5,80001084 <UART_send+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:145
                              (uint_fast8_t)tx_buffer[char_idx] );
        }
    }
}
800010e8:	00000013          	nop
800010ec:	02c12083          	lw	ra,44(sp)
800010f0:	02812403          	lw	s0,40(sp)
800010f4:	03010113          	addi	sp,sp,48
800010f8:	00008067          	ret

800010fc <UART_polled_tx_string>:
UART_polled_tx_string():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:239
UART_polled_tx_string
( 
    UART_instance_t * this_uart, 
    const uint8_t * p_sz_string
)
{
800010fc:	fd010113          	addi	sp,sp,-48
80001100:	02112623          	sw	ra,44(sp)
80001104:	02812423          	sw	s0,40(sp)
80001108:	03010413          	addi	s0,sp,48
8000110c:	fca42e23          	sw	a0,-36(s0)
80001110:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246
    uint8_t tx_ready;

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( p_sz_string != NULL_BUFFER )
    
    if( ( this_uart != NULL_INSTANCE ) && ( p_sz_string != NULL_BUFFER ) )
80001114:	fdc42783          	lw	a5,-36(s0)
80001118:	08078063          	beqz	a5,80001198 <UART_polled_tx_string+0x9c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246 (discriminator 1)
8000111c:	fd842783          	lw	a5,-40(s0)
80001120:	06078c63          	beqz	a5,80001198 <UART_polled_tx_string+0x9c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:248
    {
        char_idx = 0U;
80001124:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
80001128:	05c0006f          	j	80001184 <UART_polled_tx_string+0x88>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:253 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
8000112c:	fdc42783          	lw	a5,-36(s0)
80001130:	0007a783          	lw	a5,0(a5)
80001134:	01078793          	addi	a5,a5,16
80001138:	00078513          	mv	a0,a5
8000113c:	db5ff0ef          	jal	ra,80000ef0 <HW_get_8bit_reg>
80001140:	00050793          	mv	a5,a0
80001144:	0017f793          	andi	a5,a5,1
80001148:	fef405a3          	sb	a5,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:255 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
8000114c:	feb44783          	lbu	a5,-21(s0)
80001150:	fc078ee3          	beqz	a5,8000112c <UART_polled_tx_string+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:257
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
80001154:	fdc42783          	lw	a5,-36(s0)
80001158:	0007a683          	lw	a3,0(a5)
8000115c:	fd842703          	lw	a4,-40(s0)
80001160:	fec42783          	lw	a5,-20(s0)
80001164:	00f707b3          	add	a5,a4,a5
80001168:	0007c783          	lbu	a5,0(a5)
8000116c:	00078593          	mv	a1,a5
80001170:	00068513          	mv	a0,a3
80001174:	d75ff0ef          	jal	ra,80000ee8 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:259
                              (uint_fast8_t)p_sz_string[char_idx] );
            char_idx++;
80001178:	fec42783          	lw	a5,-20(s0)
8000117c:	00178793          	addi	a5,a5,1
80001180:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
80001184:	fd842703          	lw	a4,-40(s0)
80001188:	fec42783          	lw	a5,-20(s0)
8000118c:	00f707b3          	add	a5,a4,a5
80001190:	0007c783          	lbu	a5,0(a5)
80001194:	f8079ce3          	bnez	a5,8000112c <UART_polled_tx_string+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:262
        }
    }
}
80001198:	00000013          	nop
8000119c:	02c12083          	lw	ra,44(sp)
800011a0:	02812403          	lw	s0,40(sp)
800011a4:	03010113          	addi	sp,sp,48
800011a8:	00008067          	ret

800011ac <pvPortMalloc>:
pvPortMalloc():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:151
}
/*-----------------------------------------------------------*/


void *pvPortMalloc( size_t xWantedSize )
{
800011ac:	fc010113          	addi	sp,sp,-64
800011b0:	02112e23          	sw	ra,60(sp)
800011b4:	02812c23          	sw	s0,56(sp)
800011b8:	04010413          	addi	s0,sp,64
800011bc:	fca42623          	sw	a0,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:154
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
800011c0:	fe042223          	sw	zero,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:156

	vTaskSuspendAll();
800011c4:	719000ef          	jal	ra,800020dc <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:160
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
800011c8:	9241a783          	lw	a5,-1756(gp) # 80004eb4 <xHeapHasBeenInitialised.2777>
800011cc:	00079863          	bnez	a5,800011dc <pvPortMalloc+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:162
		{
			prvHeapInit();
800011d0:	284000ef          	jal	ra,80001454 <prvHeapInit>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:163
			xHeapHasBeenInitialised = pdTRUE;
800011d4:	00100713          	li	a4,1
800011d8:	92e1a223          	sw	a4,-1756(gp) # 80004eb4 <xHeapHasBeenInitialised.2777>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:168
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
800011dc:	fcc42783          	lw	a5,-52(s0)
800011e0:	02078a63          	beqz	a5,80001214 <pvPortMalloc+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:170
		{
			xWantedSize += heapSTRUCT_SIZE;
800011e4:	00800793          	li	a5,8
800011e8:	00078713          	mv	a4,a5
800011ec:	fcc42783          	lw	a5,-52(s0)
800011f0:	00e787b3          	add	a5,a5,a4
800011f4:	fcf42623          	sw	a5,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:173

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
800011f8:	fcc42783          	lw	a5,-52(s0)
800011fc:	0037f793          	andi	a5,a5,3
80001200:	00078a63          	beqz	a5,80001214 <pvPortMalloc+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:176
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
80001204:	fcc42783          	lw	a5,-52(s0)
80001208:	ffc7f793          	andi	a5,a5,-4
8000120c:	00478793          	addi	a5,a5,4
80001210:	fcf42623          	sw	a5,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
80001214:	fcc42783          	lw	a5,-52(s0)
80001218:	14078463          	beqz	a5,80001360 <pvPortMalloc+0x1b4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180 (discriminator 1)
8000121c:	fcc42703          	lw	a4,-52(s0)
80001220:	000197b7          	lui	a5,0x19
80001224:	ffb78793          	addi	a5,a5,-5 # 18ffb <HEAP_SIZE+0x8ffb>
80001228:	12e7ec63          	bltu	a5,a4,80001360 <pvPortMalloc+0x1b4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:184
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
8000122c:	91418793          	addi	a5,gp,-1772 # 80004ea4 <xStart>
80001230:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:185
			pxBlock = xStart.pxNextFreeBlock;
80001234:	9141a783          	lw	a5,-1772(gp) # 80004ea4 <xStart>
80001238:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
8000123c:	0180006f          	j	80001254 <pvPortMalloc+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:188
			{
				pxPreviousBlock = pxBlock;
80001240:	fec42783          	lw	a5,-20(s0)
80001244:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:189
				pxBlock = pxBlock->pxNextFreeBlock;
80001248:	fec42783          	lw	a5,-20(s0)
8000124c:	0007a783          	lw	a5,0(a5)
80001250:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
80001254:	fec42783          	lw	a5,-20(s0)
80001258:	0047a783          	lw	a5,4(a5)
8000125c:	fcc42703          	lw	a4,-52(s0)
80001260:	00e7f863          	bleu	a4,a5,80001270 <pvPortMalloc+0xc4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186 (discriminator 1)
80001264:	fec42783          	lw	a5,-20(s0)
80001268:	0007a783          	lw	a5,0(a5)
8000126c:	fc079ae3          	bnez	a5,80001240 <pvPortMalloc+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:193
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
80001270:	fec42703          	lw	a4,-20(s0)
80001274:	91c18793          	addi	a5,gp,-1764 # 80004eac <xEnd>
80001278:	0ef70463          	beq	a4,a5,80001360 <pvPortMalloc+0x1b4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:197
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
8000127c:	fe842783          	lw	a5,-24(s0)
80001280:	0007a783          	lw	a5,0(a5)
80001284:	00800713          	li	a4,8
80001288:	00e787b3          	add	a5,a5,a4
8000128c:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:201

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
80001290:	fec42783          	lw	a5,-20(s0)
80001294:	0007a703          	lw	a4,0(a5)
80001298:	fe842783          	lw	a5,-24(s0)
8000129c:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:204

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
800012a0:	fec42783          	lw	a5,-20(s0)
800012a4:	0047a703          	lw	a4,4(a5)
800012a8:	fcc42783          	lw	a5,-52(s0)
800012ac:	40f707b3          	sub	a5,a4,a5
800012b0:	00800713          	li	a4,8
800012b4:	00171713          	slli	a4,a4,0x1
800012b8:	08f77663          	bleu	a5,a4,80001344 <pvPortMalloc+0x198>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:209
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
800012bc:	fec42703          	lw	a4,-20(s0)
800012c0:	fcc42783          	lw	a5,-52(s0)
800012c4:	00f707b3          	add	a5,a4,a5
800012c8:	fcf42e23          	sw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:213

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
800012cc:	fec42783          	lw	a5,-20(s0)
800012d0:	0047a703          	lw	a4,4(a5)
800012d4:	fcc42783          	lw	a5,-52(s0)
800012d8:	40f70733          	sub	a4,a4,a5
800012dc:	fdc42783          	lw	a5,-36(s0)
800012e0:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:214
					pxBlock->xBlockSize = xWantedSize;
800012e4:	fec42783          	lw	a5,-20(s0)
800012e8:	fcc42703          	lw	a4,-52(s0)
800012ec:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
800012f0:	fdc42783          	lw	a5,-36(s0)
800012f4:	0047a783          	lw	a5,4(a5)
800012f8:	fcf42c23          	sw	a5,-40(s0)
800012fc:	91418793          	addi	a5,gp,-1772 # 80004ea4 <xStart>
80001300:	fef42023          	sw	a5,-32(s0)
80001304:	0100006f          	j	80001314 <pvPortMalloc+0x168>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 3)
80001308:	fe042783          	lw	a5,-32(s0)
8000130c:	0007a783          	lw	a5,0(a5)
80001310:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 1)
80001314:	fe042783          	lw	a5,-32(s0)
80001318:	0007a783          	lw	a5,0(a5)
8000131c:	0047a783          	lw	a5,4(a5)
80001320:	fd842703          	lw	a4,-40(s0)
80001324:	fee7e2e3          	bltu	a5,a4,80001308 <pvPortMalloc+0x15c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 4)
80001328:	fe042783          	lw	a5,-32(s0)
8000132c:	0007a703          	lw	a4,0(a5)
80001330:	fdc42783          	lw	a5,-36(s0)
80001334:	00e7a023          	sw	a4,0(a5)
80001338:	fe042783          	lw	a5,-32(s0)
8000133c:	fdc42703          	lw	a4,-36(s0)
80001340:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:220
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
80001344:	800057b7          	lui	a5,0x80005
80001348:	d907a703          	lw	a4,-624(a5) # 80004d90 <__stack_top+0xfffc5ba0>
8000134c:	fec42783          	lw	a5,-20(s0)
80001350:	0047a783          	lw	a5,4(a5)
80001354:	40f70733          	sub	a4,a4,a5
80001358:	800057b7          	lui	a5,0x80005
8000135c:	d8e7a823          	sw	a4,-624(a5) # 80004d90 <__stack_top+0xfffc5ba0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:226
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
80001360:	5a5000ef          	jal	ra,80002104 <xTaskResumeAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:230

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
80001364:	fe442783          	lw	a5,-28(s0)
80001368:	00079463          	bnez	a5,80001370 <pvPortMalloc+0x1c4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:233
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
8000136c:	4a8030ef          	jal	ra,80004814 <vApplicationMallocFailedHook>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:238
		}
	}
	#endif

	return pvReturn;
80001370:	fe442783          	lw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:239
}
80001374:	00078513          	mv	a0,a5
80001378:	03c12083          	lw	ra,60(sp)
8000137c:	03812403          	lw	s0,56(sp)
80001380:	04010113          	addi	sp,sp,64
80001384:	00008067          	ret

80001388 <vPortFree>:
vPortFree():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:243
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
80001388:	fd010113          	addi	sp,sp,-48
8000138c:	02112623          	sw	ra,44(sp)
80001390:	02812423          	sw	s0,40(sp)
80001394:	03010413          	addi	s0,sp,48
80001398:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:244
uint8_t *puc = ( uint8_t * ) pv;
8000139c:	fdc42783          	lw	a5,-36(s0)
800013a0:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:247
BlockLink_t *pxLink;

	if( pv != NULL )
800013a4:	fdc42783          	lw	a5,-36(s0)
800013a8:	08078c63          	beqz	a5,80001440 <vPortFree+0xb8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:251
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
800013ac:	00800793          	li	a5,8
800013b0:	40f007b3          	neg	a5,a5
800013b4:	fe842703          	lw	a4,-24(s0)
800013b8:	00f707b3          	add	a5,a4,a5
800013bc:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:255

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
800013c0:	fe842783          	lw	a5,-24(s0)
800013c4:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:257

		vTaskSuspendAll();
800013c8:	515000ef          	jal	ra,800020dc <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
800013cc:	fe442783          	lw	a5,-28(s0)
800013d0:	0047a783          	lw	a5,4(a5)
800013d4:	fef42023          	sw	a5,-32(s0)
800013d8:	91418793          	addi	a5,gp,-1772 # 80004ea4 <xStart>
800013dc:	fef42623          	sw	a5,-20(s0)
800013e0:	0100006f          	j	800013f0 <vPortFree+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 3)
800013e4:	fec42783          	lw	a5,-20(s0)
800013e8:	0007a783          	lw	a5,0(a5)
800013ec:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 1)
800013f0:	fec42783          	lw	a5,-20(s0)
800013f4:	0007a783          	lw	a5,0(a5)
800013f8:	0047a783          	lw	a5,4(a5)
800013fc:	fe042703          	lw	a4,-32(s0)
80001400:	fee7e2e3          	bltu	a5,a4,800013e4 <vPortFree+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 4)
80001404:	fec42783          	lw	a5,-20(s0)
80001408:	0007a703          	lw	a4,0(a5)
8000140c:	fe442783          	lw	a5,-28(s0)
80001410:	00e7a023          	sw	a4,0(a5)
80001414:	fec42783          	lw	a5,-20(s0)
80001418:	fe442703          	lw	a4,-28(s0)
8000141c:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:261 (discriminator 4)
			xFreeBytesRemaining += pxLink->xBlockSize;
80001420:	fe442783          	lw	a5,-28(s0)
80001424:	0047a703          	lw	a4,4(a5)
80001428:	800057b7          	lui	a5,0x80005
8000142c:	d907a783          	lw	a5,-624(a5) # 80004d90 <__stack_top+0xfffc5ba0>
80001430:	00f70733          	add	a4,a4,a5
80001434:	800057b7          	lui	a5,0x80005
80001438:	d8e7a823          	sw	a4,-624(a5) # 80004d90 <__stack_top+0xfffc5ba0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:264 (discriminator 4)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
8000143c:	4c9000ef          	jal	ra,80002104 <xTaskResumeAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:266
	}
}
80001440:	00000013          	nop
80001444:	02c12083          	lw	ra,44(sp)
80001448:	02812403          	lw	s0,40(sp)
8000144c:	03010113          	addi	sp,sp,48
80001450:	00008067          	ret

80001454 <prvHeapInit>:
prvHeapInit():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:282
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
80001454:	fe010113          	addi	sp,sp,-32
80001458:	00812e23          	sw	s0,28(sp)
8000145c:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:287
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
80001460:	800057b7          	lui	a5,0x80005
80001464:	f0478793          	addi	a5,a5,-252 # 80004f04 <__stack_top+0xfffc5d14>
80001468:	ffc7f793          	andi	a5,a5,-4
8000146c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:291

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
80001470:	fec42703          	lw	a4,-20(s0)
80001474:	90e1aa23          	sw	a4,-1772(gp) # 80004ea4 <xStart>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:292
	xStart.xBlockSize = ( size_t ) 0;
80001478:	91418793          	addi	a5,gp,-1772 # 80004ea4 <xStart>
8000147c:	0007a223          	sw	zero,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:295

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
80001480:	91c18793          	addi	a5,gp,-1764 # 80004eac <xEnd>
80001484:	00019737          	lui	a4,0x19
80001488:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
8000148c:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:296
	xEnd.pxNextFreeBlock = NULL;
80001490:	9001ae23          	sw	zero,-1764(gp) # 80004eac <xEnd>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:300

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
80001494:	fec42783          	lw	a5,-20(s0)
80001498:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:301
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
8000149c:	fe842783          	lw	a5,-24(s0)
800014a0:	00019737          	lui	a4,0x19
800014a4:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
800014a8:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:302
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
800014ac:	fe842783          	lw	a5,-24(s0)
800014b0:	91c18713          	addi	a4,gp,-1764 # 80004eac <xEnd>
800014b4:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:303
}
800014b8:	00000013          	nop
800014bc:	01c12403          	lw	s0,28(sp)
800014c0:	02010113          	addi	sp,sp,32
800014c4:	00008067          	ret

800014c8 <raise_soft_interrupt>:
raise_soft_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:227
/*==============================================================================
 * The function raise_soft_interrupt() raises a synchronous software interrupt by
 * writing into the MSIP register.
 */
static inline void raise_soft_interrupt()
{
800014c8:	fe010113          	addi	sp,sp,-32
800014cc:	00812e23          	sw	s0,28(sp)
800014d0:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:228
    unsigned long hart_id = read_csr(mhartid);
800014d4:	f14027f3          	csrr	a5,mhartid
800014d8:	fef42623          	sw	a5,-20(s0)
800014dc:	fec42783          	lw	a5,-20(s0)
800014e0:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:231

    /*You need to make sure that the global interrupt is enabled*/
    set_csr(mie, MIP_MSIP);       /*Enable software interrupt bit */
800014e4:	304467f3          	csrrsi	a5,mie,8
800014e8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:232
    PRCI->MSIP[hart_id] = 0x01;   /*raise soft interrupt for hart0*/
800014ec:	44000737          	lui	a4,0x44000
800014f0:	fe842783          	lw	a5,-24(s0)
800014f4:	00279793          	slli	a5,a5,0x2
800014f8:	00f707b3          	add	a5,a4,a5
800014fc:	00100713          	li	a4,1
80001500:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:233
}
80001504:	00000013          	nop
80001508:	01c12403          	lw	s0,28(sp)
8000150c:	02010113          	addi	sp,sp,32
80001510:	00008067          	ret

80001514 <vPortEnterCritical>:
vPortEnterCritical():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:132
 * Used to catch tasks that attempt to return from their implementing function.
 */
static void prvTaskExitError( void );

void vPortEnterCritical( void )
{
80001514:	ff010113          	addi	sp,sp,-16
80001518:	00812623          	sw	s0,12(sp)
8000151c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:133
	portDISABLE_INTERRUPTS();
80001520:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:134
	uxCriticalNesting++;
80001524:	800057b7          	lui	a5,0x80005
80001528:	d947a783          	lw	a5,-620(a5) # 80004d94 <__stack_top+0xfffc5ba4>
8000152c:	00178713          	addi	a4,a5,1
80001530:	800057b7          	lui	a5,0x80005
80001534:	d8e7aa23          	sw	a4,-620(a5) # 80004d94 <__stack_top+0xfffc5ba4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:135
}
80001538:	00000013          	nop
8000153c:	00c12403          	lw	s0,12(sp)
80001540:	01010113          	addi	sp,sp,16
80001544:	00008067          	ret

80001548 <vPortExitCritical>:
vPortExitCritical():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:139
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
80001548:	ff010113          	addi	sp,sp,-16
8000154c:	00812623          	sw	s0,12(sp)
80001550:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:140
	uxCriticalNesting--;
80001554:	800057b7          	lui	a5,0x80005
80001558:	d947a783          	lw	a5,-620(a5) # 80004d94 <__stack_top+0xfffc5ba4>
8000155c:	fff78713          	addi	a4,a5,-1
80001560:	800057b7          	lui	a5,0x80005
80001564:	d8e7aa23          	sw	a4,-620(a5) # 80004d94 <__stack_top+0xfffc5ba4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:141
	if( uxCriticalNesting == 0 )
80001568:	800057b7          	lui	a5,0x80005
8000156c:	d947a783          	lw	a5,-620(a5) # 80004d94 <__stack_top+0xfffc5ba4>
80001570:	00079463          	bnez	a5,80001578 <vPortExitCritical+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:143
	{
		portENABLE_INTERRUPTS();
80001574:	30046073          	csrsi	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:145
	}
}
80001578:	00000013          	nop
8000157c:	00c12403          	lw	s0,12(sp)
80001580:	01010113          	addi	sp,sp,16
80001584:	00008067          	ret

80001588 <prvSetNextTimerInterrupt>:
prvSetNextTimerInterrupt():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:151
/*-----------------------------------------------------------*/

/* Sets the next timer interrupt
 * Reads previous timer compare register, and adds tickrate */
static void prvSetNextTimerInterrupt(void)
{
80001588:	fe010113          	addi	sp,sp,-32
8000158c:	00812e23          	sw	s0,28(sp)
80001590:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:154
	uint64_t time;

	time = mtime->val_low;
80001594:	80005637          	lui	a2,0x80005
80001598:	d9862603          	lw	a2,-616(a2) # 80004d98 <__stack_top+0xfffc5ba8>
8000159c:	00062603          	lw	a2,0(a2)
800015a0:	fec42423          	sw	a2,-24(s0)
800015a4:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:155
	time |= ((uint64_t)mtime->val_high << 32);
800015a8:	80005637          	lui	a2,0x80005
800015ac:	d9862603          	lw	a2,-616(a2) # 80004d98 <__stack_top+0xfffc5ba8>
800015b0:	00462603          	lw	a2,4(a2)
800015b4:	00060693          	mv	a3,a2
800015b8:	00000713          	li	a4,0
800015bc:	00069813          	slli	a6,a3,0x0
800015c0:	00000793          	li	a5,0
800015c4:	fe842703          	lw	a4,-24(s0)
800015c8:	00f76733          	or	a4,a4,a5
800015cc:	fee42423          	sw	a4,-24(s0)
800015d0:	fec42703          	lw	a4,-20(s0)
800015d4:	010767b3          	or	a5,a4,a6
800015d8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:157

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
800015dc:	fe842683          	lw	a3,-24(s0)
800015e0:	fec42703          	lw	a4,-20(s0)
800015e4:	000145b7          	lui	a1,0x14
800015e8:	43858593          	addi	a1,a1,1080 # 14438 <HEAP_SIZE+0x4438>
800015ec:	00000613          	li	a2,0
800015f0:	00b687b3          	add	a5,a3,a1
800015f4:	00078513          	mv	a0,a5
800015f8:	00d53533          	sltu	a0,a0,a3
800015fc:	00c70833          	add	a6,a4,a2
80001600:	01050733          	add	a4,a0,a6
80001604:	00070813          	mv	a6,a4
80001608:	fef42423          	sw	a5,-24(s0)
8000160c:	ff042623          	sw	a6,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:159

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
80001610:	800057b7          	lui	a5,0x80005
80001614:	d9c7a783          	lw	a5,-612(a5) # 80004d9c <__stack_top+0xfffc5bac>
80001618:	fe842703          	lw	a4,-24(s0)
8000161c:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:160
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
80001620:	fec42783          	lw	a5,-20(s0)
80001624:	0007d313          	srli	t1,a5,0x0
80001628:	00000393          	li	t2,0
8000162c:	800057b7          	lui	a5,0x80005
80001630:	d9c7a783          	lw	a5,-612(a5) # 80004d9c <__stack_top+0xfffc5bac>
80001634:	00030713          	mv	a4,t1
80001638:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:163

	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
8000163c:	08000793          	li	a5,128
80001640:	3047a073          	csrs	mie,a5
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:164
}
80001644:	00000013          	nop
80001648:	01c12403          	lw	s0,28(sp)
8000164c:	02010113          	addi	sp,sp,32
80001650:	00008067          	ret

80001654 <vPortSetupTimer>:
vPortSetupTimer():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:169
/*-----------------------------------------------------------*/

/* Sets and enable the timer interrupt */
void vPortSetupTimer(void)
{
80001654:	fe010113          	addi	sp,sp,-32
80001658:	00812e23          	sw	s0,28(sp)
8000165c:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:172
	uint64_t time;

	time = mtime->val_low;
80001660:	80005637          	lui	a2,0x80005
80001664:	d9862603          	lw	a2,-616(a2) # 80004d98 <__stack_top+0xfffc5ba8>
80001668:	00062603          	lw	a2,0(a2)
8000166c:	fec42423          	sw	a2,-24(s0)
80001670:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:173
	time |= ((uint64_t)mtime->val_high << 32);
80001674:	80005637          	lui	a2,0x80005
80001678:	d9862603          	lw	a2,-616(a2) # 80004d98 <__stack_top+0xfffc5ba8>
8000167c:	00462603          	lw	a2,4(a2)
80001680:	00060693          	mv	a3,a2
80001684:	00000713          	li	a4,0
80001688:	00069813          	slli	a6,a3,0x0
8000168c:	00000793          	li	a5,0
80001690:	fe842703          	lw	a4,-24(s0)
80001694:	00f76733          	or	a4,a4,a5
80001698:	fee42423          	sw	a4,-24(s0)
8000169c:	fec42703          	lw	a4,-20(s0)
800016a0:	010767b3          	or	a5,a4,a6
800016a4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:175

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
800016a8:	fe842683          	lw	a3,-24(s0)
800016ac:	fec42703          	lw	a4,-20(s0)
800016b0:	000145b7          	lui	a1,0x14
800016b4:	43858593          	addi	a1,a1,1080 # 14438 <HEAP_SIZE+0x4438>
800016b8:	00000613          	li	a2,0
800016bc:	00b687b3          	add	a5,a3,a1
800016c0:	00078513          	mv	a0,a5
800016c4:	00d53533          	sltu	a0,a0,a3
800016c8:	00c70833          	add	a6,a4,a2
800016cc:	01050733          	add	a4,a0,a6
800016d0:	00070813          	mv	a6,a4
800016d4:	fef42423          	sw	a5,-24(s0)
800016d8:	ff042623          	sw	a6,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:177

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
800016dc:	800057b7          	lui	a5,0x80005
800016e0:	d9c7a783          	lw	a5,-612(a5) # 80004d9c <__stack_top+0xfffc5bac>
800016e4:	fe842703          	lw	a4,-24(s0)
800016e8:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:178
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
800016ec:	fec42783          	lw	a5,-20(s0)
800016f0:	0007d313          	srli	t1,a5,0x0
800016f4:	00000393          	li	t2,0
800016f8:	800057b7          	lui	a5,0x80005
800016fc:	d9c7a783          	lw	a5,-612(a5) # 80004d9c <__stack_top+0xfffc5bac>
80001700:	00030713          	mv	a4,t1
80001704:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:182


	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
80001708:	08000793          	li	a5,128
8000170c:	3047a073          	csrs	mie,a5
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:183
}
80001710:	00000013          	nop
80001714:	01c12403          	lw	s0,28(sp)
80001718:	02010113          	addi	sp,sp,32
8000171c:	00008067          	ret

80001720 <prvTaskExitError>:
prvTaskExitError():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:187
/*-----------------------------------------------------------*/

void prvTaskExitError( void )
{
80001720:	ff010113          	addi	sp,sp,-16
80001724:	00812623          	sw	s0,12(sp)
80001728:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
8000172c:	800057b7          	lui	a5,0x80005
80001730:	d947a703          	lw	a4,-620(a5) # 80004d94 <__stack_top+0xfffc5ba4>
80001734:	fff00793          	li	a5,-1
80001738:	00f70663          	beq	a4,a5,80001744 <prvTaskExitError+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194 (discriminator 1)
8000173c:	30047073          	csrci	mstatus,8
80001740:	0000006f          	j	80001740 <prvTaskExitError+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:195
	portDISABLE_INTERRUPTS();
80001744:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:196 (discriminator 2)
	for( ;; );
80001748:	0000006f          	j	80001748 <prvTaskExitError+0x28>

8000174c <pxPortInitialiseStack>:
pxPortInitialiseStack():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:220

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
8000174c:	fe010113          	addi	sp,sp,-32
80001750:	00812e23          	sw	s0,28(sp)
80001754:	02010413          	addi	s0,sp,32
80001758:	fea42623          	sw	a0,-20(s0)
8000175c:	feb42423          	sw	a1,-24(s0)
80001760:	fec42223          	sw	a2,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:224
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	register int *tp asm("x3");
	pxTopOfStack--;
80001764:	fec42783          	lw	a5,-20(s0)
80001768:	ffc78793          	addi	a5,a5,-4
8000176c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:225
	*pxTopOfStack = (portSTACK_TYPE)pxCode;			/* Start address */
80001770:	fe842703          	lw	a4,-24(s0)
80001774:	fec42783          	lw	a5,-20(s0)
80001778:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:226
	pxTopOfStack -= 22;
8000177c:	fec42783          	lw	a5,-20(s0)
80001780:	fa878793          	addi	a5,a5,-88
80001784:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:227
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;	/* Register a0 */
80001788:	fe442703          	lw	a4,-28(s0)
8000178c:	fec42783          	lw	a5,-20(s0)
80001790:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:228
	pxTopOfStack -= 6;
80001794:	fec42783          	lw	a5,-20(s0)
80001798:	fe878793          	addi	a5,a5,-24
8000179c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:229
	*pxTopOfStack = (portSTACK_TYPE)tp; /* Register thread pointer */
800017a0:	00018793          	mv	a5,gp
800017a4:	00078713          	mv	a4,a5
800017a8:	fec42783          	lw	a5,-20(s0)
800017ac:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:230
	pxTopOfStack -= 3;
800017b0:	fec42783          	lw	a5,-20(s0)
800017b4:	ff478793          	addi	a5,a5,-12
800017b8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:231
	*pxTopOfStack = (portSTACK_TYPE)prvTaskExitError; /* Register ra */
800017bc:	800017b7          	lui	a5,0x80001
800017c0:	72078713          	addi	a4,a5,1824 # 80001720 <__stack_top+0xfffc2530>
800017c4:	fec42783          	lw	a5,-20(s0)
800017c8:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:233

	return pxTopOfStack;
800017cc:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:234
}
800017d0:	00078513          	mv	a0,a5
800017d4:	01c12403          	lw	s0,28(sp)
800017d8:	02010113          	addi	sp,sp,32
800017dc:	00008067          	ret

800017e0 <SysTick_Handler>:
SysTick_Handler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:238
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void )
{
800017e0:	ff010113          	addi	sp,sp,-16
800017e4:	00112623          	sw	ra,12(sp)
800017e8:	00812423          	sw	s0,8(sp)
800017ec:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:241
	/*Save Context*/
	{
		__asm volatile("lw	t0, pxCurrentTCB");
800017f0:	92c1a283          	lw	t0,-1748(gp) # 80004ebc <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:242
		__asm volatile("sw	a2, 0x0(t0)");
800017f4:	00c2a023          	sw	a2,0(t0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:246
	}

	/* Increment the RTOS tick. */
	prvSetNextTimerInterrupt();
800017f8:	d91ff0ef          	jal	ra,80001588 <prvSetNextTimerInterrupt>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:249

	/*Switch task */
	if( xTaskIncrementTick() != pdFALSE )
800017fc:	2a1000ef          	jal	ra,8000229c <xTaskIncrementTick>
80001800:	00050793          	mv	a5,a0
80001804:	00078463          	beqz	a5,8000180c <SysTick_Handler+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:251
	{
		vTaskSwitchContext();
80001808:	481000ef          	jal	ra,80002488 <vTaskSwitchContext>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:256
	}

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
8000180c:	92c1a103          	lw	sp,-1748(gp) # 80004ebc <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:257
		__asm volatile("lw	sp, 0x0(sp)");
80001810:	00012103          	lw	sp,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:259

		__asm volatile("lw	t0, 31 * 4(sp)");
80001814:	07c12283          	lw	t0,124(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:260
		__asm volatile("csrw	mepc, t0");
80001818:	34129073          	csrw	mepc,t0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:262

		__asm volatile("lw	x1, 0x0(sp)");
8000181c:	00012083          	lw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:263
		__asm volatile("lw   x4, 3 * 4(sp)");
80001820:	00c12203          	lw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:264
		__asm volatile("lw   x5, 4 * 4(sp)");
80001824:	01012283          	lw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:265
		__asm volatile("lw   x6, 5 * 4(sp)");
80001828:	01412303          	lw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:266
		__asm volatile("lw   x7, 6 * 4(sp)");
8000182c:	01812383          	lw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:267
		__asm volatile("lw   x8, 7 * 4(sp)");
80001830:	01c12403          	lw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:268
		__asm volatile("lw   x9, 8 * 4(sp)");
80001834:	02012483          	lw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:269
		__asm volatile("lw   x10, 9 * 4(sp)");
80001838:	02412503          	lw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:270
		__asm volatile("lw   x11, 10 * 4(sp)");
8000183c:	02812583          	lw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:271
		__asm volatile("lw   x12, 11 * 4(sp)");
80001840:	02c12603          	lw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:272
		__asm volatile("lw   x13, 12 * 4(sp)");
80001844:	03012683          	lw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:273
		__asm volatile("lw   x14, 13 * 4(sp)");
80001848:	03412703          	lw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:274
		__asm volatile("lw   x15, 14 * 4(sp)");
8000184c:	03812783          	lw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:275
		__asm volatile("lw   x16, 15 * 4(sp)");
80001850:	03c12803          	lw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:276
		__asm volatile("lw   x17, 16 * 4(sp)");
80001854:	04012883          	lw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:277
		__asm volatile("lw   x18, 17 * 4(sp)");
80001858:	04412903          	lw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:278
		__asm volatile("lw   x19, 18 * 4(sp)");
8000185c:	04812983          	lw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:279
		__asm volatile("lw   x20, 19 * 4(sp)");
80001860:	04c12a03          	lw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:280
		__asm volatile("lw   x21, 20 * 4(sp)");
80001864:	05012a83          	lw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:281
		__asm volatile("lw   x22, 21 * 4(sp)");
80001868:	05412b03          	lw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:282
		__asm volatile("lw   x23, 22 * 4(sp)");
8000186c:	05812b83          	lw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:283
		__asm volatile("lw   x24, 23 * 4(sp)");
80001870:	05c12c03          	lw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:284
		__asm volatile("lw   x25, 24 * 4(sp)");
80001874:	06012c83          	lw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:285
		__asm volatile("lw   x26, 25 * 4(sp)");
80001878:	06412d03          	lw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:286
		__asm volatile("lw   x27, 26 * 4(sp)");
8000187c:	06812d83          	lw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:287
		__asm volatile("lw   x28, 27 * 4(sp)");
80001880:	06c12e03          	lw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:288
		__asm volatile("lw   x29, 28 * 4(sp)");
80001884:	07012e83          	lw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:289
		__asm volatile("lw   x30, 29 * 4(sp)");
80001888:	07412f03          	lw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:290
		__asm volatile("lw   x31, 30 * 4(sp)");
8000188c:	07812f83          	lw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:292

		__asm volatile("addi	sp, sp, 4 * 32");
80001890:	08010113          	addi	sp,sp,128
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:294

		__asm volatile("mret");
80001894:	30200073          	mret
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:296
	}
}
80001898:	00000013          	nop
8000189c:	00c12083          	lw	ra,12(sp)
800018a0:	00812403          	lw	s0,8(sp)
800018a4:	01010113          	addi	sp,sp,16
800018a8:	00008067          	ret

800018ac <xPortStartScheduler>:
xPortStartScheduler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:299
uint32_t g_startscheduler = 0;
BaseType_t xPortStartScheduler( void )
{
800018ac:	ff010113          	addi	sp,sp,-16
800018b0:	00112623          	sw	ra,12(sp)
800018b4:	00812423          	sw	s0,8(sp)
800018b8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:300
	vPortSetupTimer();
800018bc:	d99ff0ef          	jal	ra,80001654 <vPortSetupTimer>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:301
	uxCriticalNesting = 0;
800018c0:	800057b7          	lui	a5,0x80005
800018c4:	d807aa23          	sw	zero,-620(a5) # 80004d94 <__stack_top+0xfffc5ba4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:302
	g_startscheduler = 1;
800018c8:	00100713          	li	a4,1
800018cc:	92e1a423          	sw	a4,-1752(gp) # 80004eb8 <g_startscheduler>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:303
	__enable_irq();
800018d0:	ab1fe0ef          	jal	ra,80000380 <__enable_irq>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:305

	raise_soft_interrupt();
800018d4:	bf5ff0ef          	jal	ra,800014c8 <raise_soft_interrupt>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:308

	/*Should not get here*/
	return pdFALSE;
800018d8:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:309
}
800018dc:	00078513          	mv	a0,a5
800018e0:	00c12083          	lw	ra,12(sp)
800018e4:	00812403          	lw	s0,8(sp)
800018e8:	01010113          	addi	sp,sp,16
800018ec:	00008067          	ret

800018f0 <Software_IRQHandler>:
Software_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:312

void Software_IRQHandler(void)
{
800018f0:	ff010113          	addi	sp,sp,-16
800018f4:	00112623          	sw	ra,12(sp)
800018f8:	00812423          	sw	s0,8(sp)
800018fc:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:313
	if(1 == g_startscheduler)
80001900:	9281a703          	lw	a4,-1752(gp) # 80004eb8 <g_startscheduler>
80001904:	00100793          	li	a5,1
80001908:	00f71863          	bne	a4,a5,80001918 <Software_IRQHandler+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:315
	{
		g_startscheduler = 2; //skip the save n switch context first time when scheduler is starting.
8000190c:	00200713          	li	a4,2
80001910:	92e1a423          	sw	a4,-1752(gp) # 80004eb8 <g_startscheduler>
80001914:	0100006f          	j	80001924 <Software_IRQHandler+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:321
	}
	else
	{
		/*Save Context*/
		{
			__asm volatile("lw	t0, pxCurrentTCB");
80001918:	92c1a283          	lw	t0,-1748(gp) # 80004ebc <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:322
			__asm volatile("sw	a2, 0x0(t0)");
8000191c:	00c2a023          	sw	a2,0(t0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:325
		}

		vTaskSwitchContext();
80001920:	369000ef          	jal	ra,80002488 <vTaskSwitchContext>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:329
	}

	// Moved by Imperas (was previously causing corruption of a5)
	PRCI->MSIP[0] = 0x00;
80001924:	440007b7          	lui	a5,0x44000
80001928:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:333

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
8000192c:	92c1a103          	lw	sp,-1748(gp) # 80004ebc <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:334
		__asm volatile("lw	sp, 0x0(sp)");
80001930:	00012103          	lw	sp,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:336

		__asm volatile("lw	t0, 31 * 4(sp)");
80001934:	07c12283          	lw	t0,124(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:337
		__asm volatile("csrw	mepc, t0");
80001938:	34129073          	csrw	mepc,t0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:339

		__asm volatile("lw	x1, 0x0(sp)");
8000193c:	00012083          	lw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:340
		__asm volatile("lw   x4, 3 * 4(sp)");
80001940:	00c12203          	lw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:341
		__asm volatile("lw   x5, 4 * 4(sp)");
80001944:	01012283          	lw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:342
		__asm volatile("lw   x6, 5 * 4(sp)");
80001948:	01412303          	lw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:343
		__asm volatile("lw   x7, 6 * 4(sp)");
8000194c:	01812383          	lw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:344
		__asm volatile("lw   x8, 7 * 4(sp)");
80001950:	01c12403          	lw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:345
		__asm volatile("lw   x9, 8 * 4(sp)");
80001954:	02012483          	lw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:346
		__asm volatile("lw   x10, 9 * 4(sp)");
80001958:	02412503          	lw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:347
		__asm volatile("lw   x11, 10 * 4(sp)");
8000195c:	02812583          	lw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:348
		__asm volatile("lw   x12, 11 * 4(sp)");
80001960:	02c12603          	lw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:349
		__asm volatile("lw   x13, 12 * 4(sp)");
80001964:	03012683          	lw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:350
		__asm volatile("lw   x14, 13 * 4(sp)");
80001968:	03412703          	lw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:351
		__asm volatile("lw   x15, 14 * 4(sp)");
8000196c:	03812783          	lw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:352
		__asm volatile("lw   x16, 15 * 4(sp)");
80001970:	03c12803          	lw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:353
		__asm volatile("lw   x17, 16 * 4(sp)");
80001974:	04012883          	lw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:354
		__asm volatile("lw   x18, 17 * 4(sp)");
80001978:	04412903          	lw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:355
		__asm volatile("lw   x19, 18 * 4(sp)");
8000197c:	04812983          	lw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:356
		__asm volatile("lw   x20, 19 * 4(sp)");
80001980:	04c12a03          	lw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:357
		__asm volatile("lw   x21, 20 * 4(sp)");
80001984:	05012a83          	lw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:358
		__asm volatile("lw   x22, 21 * 4(sp)");
80001988:	05412b03          	lw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:359
		__asm volatile("lw   x23, 22 * 4(sp)");
8000198c:	05812b83          	lw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:360
		__asm volatile("lw   x24, 23 * 4(sp)");
80001990:	05c12c03          	lw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:361
		__asm volatile("lw   x25, 24 * 4(sp)");
80001994:	06012c83          	lw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:362
		__asm volatile("lw   x26, 25 * 4(sp)");
80001998:	06412d03          	lw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:363
		__asm volatile("lw   x27, 26 * 4(sp)");
8000199c:	06812d83          	lw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:364
		__asm volatile("lw   x28, 27 * 4(sp)");
800019a0:	06c12e03          	lw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:365
		__asm volatile("lw   x29, 28 * 4(sp)");
800019a4:	07012e83          	lw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:366
		__asm volatile("lw   x30, 29 * 4(sp)");
800019a8:	07412f03          	lw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:367
		__asm volatile("lw   x31, 30 * 4(sp)");
800019ac:	07812f83          	lw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:369

		__asm volatile("addi	sp, sp, 4 * 32");
800019b0:	08010113          	addi	sp,sp,128
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:374

	    // Moved by Imperas (causing corruption of a5 at this position)
		//PRCI->MSIP[0] = 0x00;

		__asm volatile("mret");
800019b4:	30200073          	mret
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:376
	}
}
800019b8:	00000013          	nop
800019bc:	00c12083          	lw	ra,12(sp)
800019c0:	00812403          	lw	s0,8(sp)
800019c4:	01010113          	addi	sp,sp,16
800019c8:	00008067          	ret

800019cc <vPortYield>:
vPortYield():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:379

void vPortYield( void )
{
800019cc:	ff010113          	addi	sp,sp,-16
800019d0:	00112623          	sw	ra,12(sp)
800019d4:	00812423          	sw	s0,8(sp)
800019d8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:380
	raise_soft_interrupt();
800019dc:	aedff0ef          	jal	ra,800014c8 <raise_soft_interrupt>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:381
}
800019e0:	00000013          	nop
800019e4:	00c12083          	lw	ra,12(sp)
800019e8:	00812403          	lw	s0,8(sp)
800019ec:	01010113          	addi	sp,sp,16
800019f0:	00008067          	ret

800019f4 <vListInitialise>:
vListInitialise():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:80
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
800019f4:	fe010113          	addi	sp,sp,-32
800019f8:	00812e23          	sw	s0,28(sp)
800019fc:	02010413          	addi	s0,sp,32
80001a00:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:84
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001a04:	fec42783          	lw	a5,-20(s0)
80001a08:	00878713          	addi	a4,a5,8
80001a0c:	fec42783          	lw	a5,-20(s0)
80001a10:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:88

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
80001a14:	fec42783          	lw	a5,-20(s0)
80001a18:	fff00713          	li	a4,-1
80001a1c:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:92

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001a20:	fec42783          	lw	a5,-20(s0)
80001a24:	00878713          	addi	a4,a5,8
80001a28:	fec42783          	lw	a5,-20(s0)
80001a2c:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:93
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001a30:	fec42783          	lw	a5,-20(s0)
80001a34:	00878713          	addi	a4,a5,8
80001a38:	fec42783          	lw	a5,-20(s0)
80001a3c:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:95

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
80001a40:	fec42783          	lw	a5,-20(s0)
80001a44:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:101

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
80001a48:	00000013          	nop
80001a4c:	01c12403          	lw	s0,28(sp)
80001a50:	02010113          	addi	sp,sp,32
80001a54:	00008067          	ret

80001a58 <vListInitialiseItem>:
vListInitialiseItem():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:105
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
80001a58:	fe010113          	addi	sp,sp,-32
80001a5c:	00812e23          	sw	s0,28(sp)
80001a60:	02010413          	addi	s0,sp,32
80001a64:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:107
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80001a68:	fec42783          	lw	a5,-20(s0)
80001a6c:	0007a823          	sw	zero,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:113

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
80001a70:	00000013          	nop
80001a74:	01c12403          	lw	s0,28(sp)
80001a78:	02010113          	addi	sp,sp,32
80001a7c:	00008067          	ret

80001a80 <vListInsertEnd>:
vListInsertEnd():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:117
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001a80:	fd010113          	addi	sp,sp,-48
80001a84:	02812623          	sw	s0,44(sp)
80001a88:	03010413          	addi	s0,sp,48
80001a8c:	fca42e23          	sw	a0,-36(s0)
80001a90:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:118
ListItem_t * const pxIndex = pxList->pxIndex;
80001a94:	fdc42783          	lw	a5,-36(s0)
80001a98:	0047a783          	lw	a5,4(a5)
80001a9c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:129
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
80001aa0:	fd842783          	lw	a5,-40(s0)
80001aa4:	fec42703          	lw	a4,-20(s0)
80001aa8:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:130
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
80001aac:	fec42783          	lw	a5,-20(s0)
80001ab0:	0087a703          	lw	a4,8(a5)
80001ab4:	fd842783          	lw	a5,-40(s0)
80001ab8:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:135

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
80001abc:	fec42783          	lw	a5,-20(s0)
80001ac0:	0087a783          	lw	a5,8(a5)
80001ac4:	fd842703          	lw	a4,-40(s0)
80001ac8:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:136
	pxIndex->pxPrevious = pxNewListItem;
80001acc:	fec42783          	lw	a5,-20(s0)
80001ad0:	fd842703          	lw	a4,-40(s0)
80001ad4:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:139

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001ad8:	fd842783          	lw	a5,-40(s0)
80001adc:	fdc42703          	lw	a4,-36(s0)
80001ae0:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:141

	( pxList->uxNumberOfItems )++;
80001ae4:	fdc42783          	lw	a5,-36(s0)
80001ae8:	0007a783          	lw	a5,0(a5)
80001aec:	00178713          	addi	a4,a5,1
80001af0:	fdc42783          	lw	a5,-36(s0)
80001af4:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:142
}
80001af8:	00000013          	nop
80001afc:	02c12403          	lw	s0,44(sp)
80001b00:	03010113          	addi	sp,sp,48
80001b04:	00008067          	ret

80001b08 <vListInsert>:
vListInsert():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:146
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001b08:	fd010113          	addi	sp,sp,-48
80001b0c:	02812623          	sw	s0,44(sp)
80001b10:	03010413          	addi	s0,sp,48
80001b14:	fca42e23          	sw	a0,-36(s0)
80001b18:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:148
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
80001b1c:	fd842783          	lw	a5,-40(s0)
80001b20:	0007a783          	lw	a5,0(a5)
80001b24:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:164
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
80001b28:	fe842703          	lw	a4,-24(s0)
80001b2c:	fff00793          	li	a5,-1
80001b30:	00f71a63          	bne	a4,a5,80001b44 <vListInsert+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:166
	{
		pxIterator = pxList->xListEnd.pxPrevious;
80001b34:	fdc42783          	lw	a5,-36(s0)
80001b38:	0107a783          	lw	a5,16(a5)
80001b3c:	fef42623          	sw	a5,-20(s0)
80001b40:	0340006f          	j	80001b74 <vListInsert+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:192
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001b44:	fdc42783          	lw	a5,-36(s0)
80001b48:	00878793          	addi	a5,a5,8
80001b4c:	fef42623          	sw	a5,-20(s0)
80001b50:	0100006f          	j	80001b60 <vListInsert+0x58>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 3)
80001b54:	fec42783          	lw	a5,-20(s0)
80001b58:	0047a783          	lw	a5,4(a5)
80001b5c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 1)
80001b60:	fec42783          	lw	a5,-20(s0)
80001b64:	0047a783          	lw	a5,4(a5)
80001b68:	0007a783          	lw	a5,0(a5)
80001b6c:	fe842703          	lw	a4,-24(s0)
80001b70:	fef772e3          	bleu	a5,a4,80001b54 <vListInsert+0x4c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:199
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
80001b74:	fec42783          	lw	a5,-20(s0)
80001b78:	0047a703          	lw	a4,4(a5)
80001b7c:	fd842783          	lw	a5,-40(s0)
80001b80:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:200
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
80001b84:	fd842783          	lw	a5,-40(s0)
80001b88:	0047a783          	lw	a5,4(a5)
80001b8c:	fd842703          	lw	a4,-40(s0)
80001b90:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:201
	pxNewListItem->pxPrevious = pxIterator;
80001b94:	fd842783          	lw	a5,-40(s0)
80001b98:	fec42703          	lw	a4,-20(s0)
80001b9c:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:202
	pxIterator->pxNext = pxNewListItem;
80001ba0:	fec42783          	lw	a5,-20(s0)
80001ba4:	fd842703          	lw	a4,-40(s0)
80001ba8:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:206

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001bac:	fd842783          	lw	a5,-40(s0)
80001bb0:	fdc42703          	lw	a4,-36(s0)
80001bb4:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:208

	( pxList->uxNumberOfItems )++;
80001bb8:	fdc42783          	lw	a5,-36(s0)
80001bbc:	0007a783          	lw	a5,0(a5)
80001bc0:	00178713          	addi	a4,a5,1
80001bc4:	fdc42783          	lw	a5,-36(s0)
80001bc8:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:209
}
80001bcc:	00000013          	nop
80001bd0:	02c12403          	lw	s0,44(sp)
80001bd4:	03010113          	addi	sp,sp,48
80001bd8:	00008067          	ret

80001bdc <uxListRemove>:
uxListRemove():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:213
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
80001bdc:	fd010113          	addi	sp,sp,-48
80001be0:	02812623          	sw	s0,44(sp)
80001be4:	03010413          	addi	s0,sp,48
80001be8:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:216
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
80001bec:	fdc42783          	lw	a5,-36(s0)
80001bf0:	0107a783          	lw	a5,16(a5)
80001bf4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:218

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
80001bf8:	fdc42783          	lw	a5,-36(s0)
80001bfc:	0047a783          	lw	a5,4(a5)
80001c00:	fdc42703          	lw	a4,-36(s0)
80001c04:	00872703          	lw	a4,8(a4) # 44000008 <RAM_SIZE+0x43f80008>
80001c08:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:219
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
80001c0c:	fdc42783          	lw	a5,-36(s0)
80001c10:	0087a783          	lw	a5,8(a5)
80001c14:	fdc42703          	lw	a4,-36(s0)
80001c18:	00472703          	lw	a4,4(a4)
80001c1c:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:225

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
80001c20:	fec42783          	lw	a5,-20(s0)
80001c24:	0047a783          	lw	a5,4(a5)
80001c28:	fdc42703          	lw	a4,-36(s0)
80001c2c:	00f71a63          	bne	a4,a5,80001c40 <uxListRemove+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:227
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
80001c30:	fdc42783          	lw	a5,-36(s0)
80001c34:	0087a703          	lw	a4,8(a5)
80001c38:	fec42783          	lw	a5,-20(s0)
80001c3c:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:234
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
80001c40:	fdc42783          	lw	a5,-36(s0)
80001c44:	0007a823          	sw	zero,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:235
	( pxList->uxNumberOfItems )--;
80001c48:	fec42783          	lw	a5,-20(s0)
80001c4c:	0007a783          	lw	a5,0(a5)
80001c50:	fff78713          	addi	a4,a5,-1
80001c54:	fec42783          	lw	a5,-20(s0)
80001c58:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:237

	return pxList->uxNumberOfItems;
80001c5c:	fec42783          	lw	a5,-20(s0)
80001c60:	0007a783          	lw	a5,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:238
}
80001c64:	00078513          	mv	a0,a5
80001c68:	02c12403          	lw	s0,44(sp)
80001c6c:	03010113          	addi	sp,sp,48
80001c70:	00008067          	ret

80001c74 <memset>:
memset():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:25

  return dest;
}

void* memset(void* dest, int byte, size_t len)
{
80001c74:	fd010113          	addi	sp,sp,-48
80001c78:	02812623          	sw	s0,44(sp)
80001c7c:	03010413          	addi	s0,sp,48
80001c80:	fca42e23          	sw	a0,-36(s0)
80001c84:	fcb42c23          	sw	a1,-40(s0)
80001c88:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:26
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
80001c8c:	fdc42703          	lw	a4,-36(s0)
80001c90:	fd442783          	lw	a5,-44(s0)
80001c94:	00f767b3          	or	a5,a4,a5
80001c98:	0037f793          	andi	a5,a5,3
80001c9c:	06079863          	bnez	a5,80001d0c <memset+0x98>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:27
    uintptr_t word = byte & 0xFF;
80001ca0:	fd842783          	lw	a5,-40(s0)
80001ca4:	0ff7f793          	andi	a5,a5,255
80001ca8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:28
    word |= word << 8;
80001cac:	fe442783          	lw	a5,-28(s0)
80001cb0:	00879793          	slli	a5,a5,0x8
80001cb4:	fe442703          	lw	a4,-28(s0)
80001cb8:	00f767b3          	or	a5,a4,a5
80001cbc:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:29
    word |= word << 16;
80001cc0:	fe442783          	lw	a5,-28(s0)
80001cc4:	01079793          	slli	a5,a5,0x10
80001cc8:	fe442703          	lw	a4,-28(s0)
80001ccc:	00f767b3          	or	a5,a4,a5
80001cd0:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:32
    word |= word << 16 << 16;

    uintptr_t *d = dest;
80001cd4:	fdc42783          	lw	a5,-36(s0)
80001cd8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001cdc:	0180006f          	j	80001cf4 <memset+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:34
      *d++ = word;
80001ce0:	fec42783          	lw	a5,-20(s0)
80001ce4:	00478713          	addi	a4,a5,4
80001ce8:	fee42623          	sw	a4,-20(s0)
80001cec:	fe442703          	lw	a4,-28(s0)
80001cf0:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001cf4:	fdc42703          	lw	a4,-36(s0)
80001cf8:	fd442783          	lw	a5,-44(s0)
80001cfc:	00f707b3          	add	a5,a4,a5
80001d00:	fec42703          	lw	a4,-20(s0)
80001d04:	fcf76ee3          	bltu	a4,a5,80001ce0 <memset+0x6c>
80001d08:	0400006f          	j	80001d48 <memset+0xd4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:36
  } else {
    char *d = dest;
80001d0c:	fdc42783          	lw	a5,-36(s0)
80001d10:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001d14:	0200006f          	j	80001d34 <memset+0xc0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:38
      *d++ = byte;
80001d18:	fe842783          	lw	a5,-24(s0)
80001d1c:	00178713          	addi	a4,a5,1
80001d20:	fee42423          	sw	a4,-24(s0)
80001d24:	fd842703          	lw	a4,-40(s0)
80001d28:	01871713          	slli	a4,a4,0x18
80001d2c:	41875713          	srai	a4,a4,0x18
80001d30:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001d34:	fdc42703          	lw	a4,-36(s0)
80001d38:	fd442783          	lw	a5,-44(s0)
80001d3c:	00f707b3          	add	a5,a4,a5
80001d40:	fe842703          	lw	a4,-24(s0)
80001d44:	fcf76ae3          	bltu	a4,a5,80001d18 <memset+0xa4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:40
  }
  return dest;
80001d48:	fdc42783          	lw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:41
}
80001d4c:	00078513          	mv	a0,a5
80001d50:	02c12403          	lw	s0,44(sp)
80001d54:	03010113          	addi	sp,sp,48
80001d58:	00008067          	ret

80001d5c <strlen>:
strlen():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:44

size_t strlen(const char *s)
{
80001d5c:	fd010113          	addi	sp,sp,-48
80001d60:	02812623          	sw	s0,44(sp)
80001d64:	03010413          	addi	s0,sp,48
80001d68:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:45
  const char *p = s;
80001d6c:	fdc42783          	lw	a5,-36(s0)
80001d70:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001d74:	0100006f          	j	80001d84 <strlen+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:47
    p++;
80001d78:	fec42783          	lw	a5,-20(s0)
80001d7c:	00178793          	addi	a5,a5,1
80001d80:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001d84:	fec42783          	lw	a5,-20(s0)
80001d88:	00078783          	lb	a5,0(a5)
80001d8c:	fe0796e3          	bnez	a5,80001d78 <strlen+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:48
  return p - s;
80001d90:	fec42703          	lw	a4,-20(s0)
80001d94:	fdc42783          	lw	a5,-36(s0)
80001d98:	40f707b3          	sub	a5,a4,a5
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:49
}
80001d9c:	00078513          	mv	a0,a5
80001da0:	02c12403          	lw	s0,44(sp)
80001da4:	03010113          	addi	sp,sp,48
80001da8:	00008067          	ret

80001dac <xTaskGenericCreate>:
xTaskGenericCreate():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:551

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80001dac:	fc010113          	addi	sp,sp,-64
80001db0:	02112e23          	sw	ra,60(sp)
80001db4:	02812c23          	sw	s0,56(sp)
80001db8:	04010413          	addi	s0,sp,64
80001dbc:	fca42e23          	sw	a0,-36(s0)
80001dc0:	fcb42c23          	sw	a1,-40(s0)
80001dc4:	fcd42823          	sw	a3,-48(s0)
80001dc8:	fce42623          	sw	a4,-52(s0)
80001dcc:	fcf42423          	sw	a5,-56(s0)
80001dd0:	fd042223          	sw	a6,-60(s0)
80001dd4:	fd142023          	sw	a7,-64(s0)
80001dd8:	00060793          	mv	a5,a2
80001ddc:	fcf41b23          	sh	a5,-42(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:556
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
80001de0:	fdc42783          	lw	a5,-36(s0)
80001de4:	00079663          	bnez	a5,80001df0 <xTaskGenericCreate+0x44>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:556 (discriminator 1)
80001de8:	30047073          	csrci	mstatus,8
80001dec:	0000006f          	j	80001dec <xTaskGenericCreate+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:557
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
80001df0:	fcc42703          	lw	a4,-52(s0)
80001df4:	00400793          	li	a5,4
80001df8:	00e7f663          	bleu	a4,a5,80001e04 <xTaskGenericCreate+0x58>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 1)
80001dfc:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 2)
80001e00:	0000006f          	j	80001e00 <xTaskGenericCreate+0x54>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:561

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
80001e04:	fd645783          	lhu	a5,-42(s0)
80001e08:	fc442583          	lw	a1,-60(s0)
80001e0c:	00078513          	mv	a0,a5
80001e10:	2b9000ef          	jal	ra,800028c8 <prvAllocateTCBAndStack>
80001e14:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:562
	if( pxNewTCB != NULL )
80001e18:	fe842783          	lw	a5,-24(s0)
80001e1c:	16078263          	beqz	a5,80001f80 <xTaskGenericCreate+0x1d4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:598
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
80001e20:	fe842783          	lw	a5,-24(s0)
80001e24:	0307a703          	lw	a4,48(a5)
80001e28:	fd645683          	lhu	a3,-42(s0)
80001e2c:	400007b7          	lui	a5,0x40000
80001e30:	fff78793          	addi	a5,a5,-1 # 3fffffff <RAM_SIZE+0x3ff7ffff>
80001e34:	00f687b3          	add	a5,a3,a5
80001e38:	00279793          	slli	a5,a5,0x2
80001e3c:	00f707b3          	add	a5,a4,a5
80001e40:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:599
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
80001e44:	fe442783          	lw	a5,-28(s0)
80001e48:	ffc7f793          	andi	a5,a5,-4
80001e4c:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:602

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
80001e50:	fe442783          	lw	a5,-28(s0)
80001e54:	0037f793          	andi	a5,a5,3
80001e58:	00078663          	beqz	a5,80001e64 <xTaskGenericCreate+0xb8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 1)
80001e5c:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 3)
80001e60:	0000006f          	j	80001e60 <xTaskGenericCreate+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:619
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
80001e64:	fd645783          	lhu	a5,-42(s0)
80001e68:	00078713          	mv	a4,a5
80001e6c:	fc042683          	lw	a3,-64(s0)
80001e70:	fcc42603          	lw	a2,-52(s0)
80001e74:	fd842583          	lw	a1,-40(s0)
80001e78:	fe842503          	lw	a0,-24(s0)
80001e7c:	72c000ef          	jal	ra,800025a8 <prvInitialiseTCBVariables>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:631
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
80001e80:	fd042603          	lw	a2,-48(s0)
80001e84:	fdc42583          	lw	a1,-36(s0)
80001e88:	fe442503          	lw	a0,-28(s0)
80001e8c:	8c1ff0ef          	jal	ra,8000174c <pxPortInitialiseStack>
80001e90:	00050713          	mv	a4,a0
80001e94:	fe842783          	lw	a5,-24(s0)
80001e98:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:635
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
80001e9c:	fc842783          	lw	a5,-56(s0)
80001ea0:	00078863          	beqz	a5,80001eb0 <xTaskGenericCreate+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:640
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
80001ea4:	fc842783          	lw	a5,-56(s0)
80001ea8:	fe842703          	lw	a4,-24(s0)
80001eac:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:649
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
80001eb0:	e64ff0ef          	jal	ra,80001514 <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:651
		{
			uxCurrentNumberOfTasks++;
80001eb4:	93c1a783          	lw	a5,-1732(gp) # 80004ecc <uxCurrentNumberOfTasks>
80001eb8:	00178713          	addi	a4,a5,1
80001ebc:	92e1ae23          	sw	a4,-1732(gp) # 80004ecc <uxCurrentNumberOfTasks>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:652
			if( pxCurrentTCB == NULL )
80001ec0:	92c1a783          	lw	a5,-1748(gp) # 80004ebc <pxCurrentTCB>
80001ec4:	02079063          	bnez	a5,80001ee4 <xTaskGenericCreate+0x138>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:656
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
80001ec8:	fe842703          	lw	a4,-24(s0)
80001ecc:	92e1a623          	sw	a4,-1748(gp) # 80004ebc <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:658

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
80001ed0:	93c1a703          	lw	a4,-1732(gp) # 80004ecc <uxCurrentNumberOfTasks>
80001ed4:	00100793          	li	a5,1
80001ed8:	02f71663          	bne	a4,a5,80001f04 <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:663
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
80001edc:	005000ef          	jal	ra,800026e0 <prvInitialiseTaskLists>
80001ee0:	0240006f          	j	80001f04 <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:675
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
80001ee4:	9481a783          	lw	a5,-1720(gp) # 80004ed8 <xSchedulerRunning>
80001ee8:	00079e63          	bnez	a5,80001f04 <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:677
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
80001eec:	92c1a783          	lw	a5,-1748(gp) # 80004ebc <pxCurrentTCB>
80001ef0:	02c7a783          	lw	a5,44(a5)
80001ef4:	fcc42703          	lw	a4,-52(s0)
80001ef8:	00f76663          	bltu	a4,a5,80001f04 <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:679
					{
						pxCurrentTCB = pxNewTCB;
80001efc:	fe842703          	lw	a4,-24(s0)
80001f00:	92e1a623          	sw	a4,-1748(gp) # 80004ebc <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:692
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
80001f04:	9581a783          	lw	a5,-1704(gp) # 80004ee8 <uxTaskNumber>
80001f08:	00178713          	addi	a4,a5,1
80001f0c:	94e1ac23          	sw	a4,-1704(gp) # 80004ee8 <uxTaskNumber>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:697

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
80001f10:	9581a703          	lw	a4,-1704(gp) # 80004ee8 <uxTaskNumber>
80001f14:	fe842783          	lw	a5,-24(s0)
80001f18:	04e7a423          	sw	a4,72(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:702
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
80001f1c:	fe842783          	lw	a5,-24(s0)
80001f20:	02c7a703          	lw	a4,44(a5)
80001f24:	9441a783          	lw	a5,-1724(gp) # 80004ed4 <uxTopReadyPriority>
80001f28:	00e7f863          	bleu	a4,a5,80001f38 <xTaskGenericCreate+0x18c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 1)
80001f2c:	fe842783          	lw	a5,-24(s0)
80001f30:	02c7a703          	lw	a4,44(a5)
80001f34:	94e1a223          	sw	a4,-1724(gp) # 80004ed4 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 3)
80001f38:	fe842783          	lw	a5,-24(s0)
80001f3c:	02c7a703          	lw	a4,44(a5)
80001f40:	00070793          	mv	a5,a4
80001f44:	00279793          	slli	a5,a5,0x2
80001f48:	00e787b3          	add	a5,a5,a4
80001f4c:	00279793          	slli	a5,a5,0x2
80001f50:	8001e737          	lui	a4,0x8001e
80001f54:	f0070713          	addi	a4,a4,-256 # 8001df00 <__stack_top+0xfffded10>
80001f58:	00e78733          	add	a4,a5,a4
80001f5c:	fe842783          	lw	a5,-24(s0)
80001f60:	00478793          	addi	a5,a5,4
80001f64:	00078593          	mv	a1,a5
80001f68:	00070513          	mv	a0,a4
80001f6c:	b15ff0ef          	jal	ra,80001a80 <vListInsertEnd>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:704 (discriminator 3)

			xReturn = pdPASS;
80001f70:	00100793          	li	a5,1
80001f74:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:707 (discriminator 3)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
80001f78:	dd0ff0ef          	jal	ra,80001548 <vPortExitCritical>
80001f7c:	00c0006f          	j	80001f88 <xTaskGenericCreate+0x1dc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:711
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
80001f80:	fff00793          	li	a5,-1
80001f84:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:715
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
80001f88:	fec42703          	lw	a4,-20(s0)
80001f8c:	00100793          	li	a5,1
80001f90:	02f71063          	bne	a4,a5,80001fb0 <xTaskGenericCreate+0x204>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:717
	{
		if( xSchedulerRunning != pdFALSE )
80001f94:	9481a783          	lw	a5,-1720(gp) # 80004ed8 <xSchedulerRunning>
80001f98:	00078c63          	beqz	a5,80001fb0 <xTaskGenericCreate+0x204>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:721
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
80001f9c:	92c1a783          	lw	a5,-1748(gp) # 80004ebc <pxCurrentTCB>
80001fa0:	02c7a783          	lw	a5,44(a5)
80001fa4:	fcc42703          	lw	a4,-52(s0)
80001fa8:	00e7f463          	bleu	a4,a5,80001fb0 <xTaskGenericCreate+0x204>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:723
			{
				taskYIELD_IF_USING_PREEMPTION();
80001fac:	a21ff0ef          	jal	ra,800019cc <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:736
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
80001fb0:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:737
}
80001fb4:	00078513          	mv	a0,a5
80001fb8:	03c12083          	lw	ra,60(sp)
80001fbc:	03812403          	lw	s0,56(sp)
80001fc0:	04010113          	addi	sp,sp,64
80001fc4:	00008067          	ret

80001fc8 <vTaskDelay>:
vTaskDelay():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:921
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
80001fc8:	fd010113          	addi	sp,sp,-48
80001fcc:	02112623          	sw	ra,44(sp)
80001fd0:	02812423          	sw	s0,40(sp)
80001fd4:	03010413          	addi	s0,sp,48
80001fd8:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:923
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
80001fdc:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:927


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
80001fe0:	fdc42783          	lw	a5,-36(s0)
80001fe4:	04078463          	beqz	a5,8000202c <vTaskDelay+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:929
		{
			configASSERT( uxSchedulerSuspended == 0 );
80001fe8:	9601a783          	lw	a5,-1696(gp) # 80004ef0 <uxSchedulerSuspended>
80001fec:	00078663          	beqz	a5,80001ff8 <vTaskDelay+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:929 (discriminator 1)
80001ff0:	30047073          	csrci	mstatus,8
80001ff4:	0000006f          	j	80001ff4 <vTaskDelay+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:930
			vTaskSuspendAll();
80001ff8:	0e4000ef          	jal	ra,800020dc <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:944
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
80001ffc:	9401a783          	lw	a5,-1728(gp) # 80004ed0 <xTickCount>
80002000:	fdc42703          	lw	a4,-36(s0)
80002004:	00f707b3          	add	a5,a4,a5
80002008:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:949

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
8000200c:	92c1a783          	lw	a5,-1748(gp) # 80004ebc <pxCurrentTCB>
80002010:	00478793          	addi	a5,a5,4
80002014:	00078513          	mv	a0,a5
80002018:	bc5ff0ef          	jal	ra,80001bdc <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:960
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
8000201c:	fe842503          	lw	a0,-24(s0)
80002020:	021000ef          	jal	ra,80002840 <prvAddCurrentTaskToDelayedList>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:962
			}
			xAlreadyYielded = xTaskResumeAll();
80002024:	0e0000ef          	jal	ra,80002104 <xTaskResumeAll>
80002028:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:971
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
8000202c:	fec42783          	lw	a5,-20(s0)
80002030:	00079463          	bnez	a5,80002038 <vTaskDelay+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:973
		{
			portYIELD_WITHIN_API();
80002034:	999ff0ef          	jal	ra,800019cc <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:979
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80002038:	00000013          	nop
8000203c:	02c12083          	lw	ra,44(sp)
80002040:	02812403          	lw	s0,40(sp)
80002044:	03010113          	addi	sp,sp,48
80002048:	00008067          	ret

8000204c <vTaskStartScheduler>:
vTaskStartScheduler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1542

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
8000204c:	fe010113          	addi	sp,sp,-32
80002050:	00112e23          	sw	ra,28(sp)
80002054:	00812c23          	sw	s0,24(sp)
80002058:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1555
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
8000205c:	00000893          	li	a7,0
80002060:	00000813          	li	a6,0
80002064:	00000793          	li	a5,0
80002068:	00000713          	li	a4,0
8000206c:	00000693          	li	a3,0
80002070:	40000613          	li	a2,1024
80002074:	800055b7          	lui	a1,0x80005
80002078:	a4058593          	addi	a1,a1,-1472 # 80004a40 <__stack_top+0xfffc5850>
8000207c:	80002537          	lui	a0,0x80002
80002080:	57450513          	addi	a0,a0,1396 # 80002574 <__stack_top+0xfffc3384>
80002084:	d29ff0ef          	jal	ra,80001dac <xTaskGenericCreate>
80002088:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1572
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
8000208c:	fec42703          	lw	a4,-20(s0)
80002090:	00100793          	li	a5,1
80002094:	02f71263          	bne	a4,a5,800020b8 <vTaskStartScheduler+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1579
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
80002098:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1589
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
8000209c:	fff00713          	li	a4,-1
800020a0:	94e1ae23          	sw	a4,-1700(gp) # 80004eec <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1590
		xSchedulerRunning = pdTRUE;
800020a4:	00100713          	li	a4,1
800020a8:	94e1a423          	sw	a4,-1720(gp) # 80004ed8 <xSchedulerRunning>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1591
		xTickCount = ( TickType_t ) 0U;
800020ac:	9401a023          	sw	zero,-1728(gp) # 80004ed0 <xTickCount>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1600
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
800020b0:	ffcff0ef          	jal	ra,800018ac <xPortStartScheduler>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
800020b4:	0140006f          	j	800020c8 <vTaskStartScheduler+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615
		configASSERT( xReturn );
800020b8:	fec42783          	lw	a5,-20(s0)
800020bc:	00079663          	bnez	a5,800020c8 <vTaskStartScheduler+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 1)
800020c0:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 2)
800020c4:	0000006f          	j	800020c4 <vTaskStartScheduler+0x78>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
}
800020c8:	00000013          	nop
800020cc:	01c12083          	lw	ra,28(sp)
800020d0:	01812403          	lw	s0,24(sp)
800020d4:	02010113          	addi	sp,sp,32
800020d8:	00008067          	ret

800020dc <vTaskSuspendAll>:
vTaskSuspendAll():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1632
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
800020dc:	ff010113          	addi	sp,sp,-16
800020e0:	00812623          	sw	s0,12(sp)
800020e4:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1637
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
800020e8:	9601a783          	lw	a5,-1696(gp) # 80004ef0 <uxSchedulerSuspended>
800020ec:	00178713          	addi	a4,a5,1
800020f0:	96e1a023          	sw	a4,-1696(gp) # 80004ef0 <uxSchedulerSuspended>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1638
}
800020f4:	00000013          	nop
800020f8:	00c12403          	lw	s0,12(sp)
800020fc:	01010113          	addi	sp,sp,16
80002100:	00008067          	ret

80002104 <xTaskResumeAll>:
xTaskResumeAll():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1670

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
80002104:	fe010113          	addi	sp,sp,-32
80002108:	00112e23          	sw	ra,28(sp)
8000210c:	00812c23          	sw	s0,24(sp)
80002110:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1672
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
80002114:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
80002118:	9601a783          	lw	a5,-1696(gp) # 80004ef0 <uxSchedulerSuspended>
8000211c:	00079663          	bnez	a5,80002128 <xTaskResumeAll+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676 (discriminator 1)
80002120:	30047073          	csrci	mstatus,8
80002124:	0000006f          	j	80002124 <xTaskResumeAll+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1683
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
80002128:	becff0ef          	jal	ra,80001514 <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1685
	{
		--uxSchedulerSuspended;
8000212c:	9601a783          	lw	a5,-1696(gp) # 80004ef0 <uxSchedulerSuspended>
80002130:	fff78713          	addi	a4,a5,-1
80002134:	96e1a023          	sw	a4,-1696(gp) # 80004ef0 <uxSchedulerSuspended>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1687

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80002138:	9601a783          	lw	a5,-1696(gp) # 80004ef0 <uxSchedulerSuspended>
8000213c:	10079663          	bnez	a5,80002248 <xTaskResumeAll+0x144>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1689
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
80002140:	93c1a783          	lw	a5,-1732(gp) # 80004ecc <uxCurrentNumberOfTasks>
80002144:	10078263          	beqz	a5,80002248 <xTaskResumeAll+0x144>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
80002148:	0a80006f          	j	800021f0 <xTaskResumeAll+0xec>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1695
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
8000214c:	8001e7b7          	lui	a5,0x8001e
80002150:	f8c78793          	addi	a5,a5,-116 # 8001df8c <__stack_top+0xfffded9c>
80002154:	00c7a783          	lw	a5,12(a5)
80002158:	00c7a783          	lw	a5,12(a5)
8000215c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1696
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002160:	fe842783          	lw	a5,-24(s0)
80002164:	01878793          	addi	a5,a5,24
80002168:	00078513          	mv	a0,a5
8000216c:	a71ff0ef          	jal	ra,80001bdc <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1697
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80002170:	fe842783          	lw	a5,-24(s0)
80002174:	00478793          	addi	a5,a5,4
80002178:	00078513          	mv	a0,a5
8000217c:	a61ff0ef          	jal	ra,80001bdc <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698
					prvAddTaskToReadyList( pxTCB );
80002180:	fe842783          	lw	a5,-24(s0)
80002184:	02c7a703          	lw	a4,44(a5)
80002188:	9441a783          	lw	a5,-1724(gp) # 80004ed4 <uxTopReadyPriority>
8000218c:	00e7f863          	bleu	a4,a5,8000219c <xTaskResumeAll+0x98>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 1)
80002190:	fe842783          	lw	a5,-24(s0)
80002194:	02c7a703          	lw	a4,44(a5)
80002198:	94e1a223          	sw	a4,-1724(gp) # 80004ed4 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 3)
8000219c:	fe842783          	lw	a5,-24(s0)
800021a0:	02c7a703          	lw	a4,44(a5)
800021a4:	00070793          	mv	a5,a4
800021a8:	00279793          	slli	a5,a5,0x2
800021ac:	00e787b3          	add	a5,a5,a4
800021b0:	00279793          	slli	a5,a5,0x2
800021b4:	8001e737          	lui	a4,0x8001e
800021b8:	f0070713          	addi	a4,a4,-256 # 8001df00 <__stack_top+0xfffded10>
800021bc:	00e78733          	add	a4,a5,a4
800021c0:	fe842783          	lw	a5,-24(s0)
800021c4:	00478793          	addi	a5,a5,4
800021c8:	00078593          	mv	a1,a5
800021cc:	00070513          	mv	a0,a4
800021d0:	8b1ff0ef          	jal	ra,80001a80 <vListInsertEnd>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1702 (discriminator 3)

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
800021d4:	fe842783          	lw	a5,-24(s0)
800021d8:	02c7a703          	lw	a4,44(a5)
800021dc:	92c1a783          	lw	a5,-1748(gp) # 80004ebc <pxCurrentTCB>
800021e0:	02c7a783          	lw	a5,44(a5)
800021e4:	00f76663          	bltu	a4,a5,800021f0 <xTaskResumeAll+0xec>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1704
					{
						xYieldPending = pdTRUE;
800021e8:	00100713          	li	a4,1
800021ec:	94e1a823          	sw	a4,-1712(gp) # 80004ee0 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
800021f0:	8001e7b7          	lui	a5,0x8001e
800021f4:	f8c7a783          	lw	a5,-116(a5) # 8001df8c <__stack_top+0xfffded9c>
800021f8:	f4079ae3          	bnez	a5,8000214c <xTaskResumeAll+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1716

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
800021fc:	94c1a783          	lw	a5,-1716(gp) # 80004edc <uxPendedTicks>
80002200:	02078863          	beqz	a5,80002230 <xTaskResumeAll+0x12c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
80002204:	0240006f          	j	80002228 <xTaskResumeAll+0x124>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1720
					{
						if( xTaskIncrementTick() != pdFALSE )
80002208:	094000ef          	jal	ra,8000229c <xTaskIncrementTick>
8000220c:	00050793          	mv	a5,a0
80002210:	00078663          	beqz	a5,8000221c <xTaskResumeAll+0x118>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1722
						{
							xYieldPending = pdTRUE;
80002214:	00100713          	li	a4,1
80002218:	94e1a823          	sw	a4,-1712(gp) # 80004ee0 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1728
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
8000221c:	94c1a783          	lw	a5,-1716(gp) # 80004edc <uxPendedTicks>
80002220:	fff78713          	addi	a4,a5,-1
80002224:	94e1a623          	sw	a4,-1716(gp) # 80004edc <uxPendedTicks>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
					while( uxPendedTicks > ( UBaseType_t ) 0U )
80002228:	94c1a783          	lw	a5,-1716(gp) # 80004edc <uxPendedTicks>
8000222c:	fc079ee3          	bnez	a5,80002208 <xTaskResumeAll+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1736
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
80002230:	9501a703          	lw	a4,-1712(gp) # 80004ee0 <xYieldPending>
80002234:	00100793          	li	a5,1
80002238:	00f71863          	bne	a4,a5,80002248 <xTaskResumeAll+0x144>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1740
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
8000223c:	00100793          	li	a5,1
80002240:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1743
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
80002244:	f88ff0ef          	jal	ra,800019cc <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1756
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
80002248:	b00ff0ef          	jal	ra,80001548 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1758

	return xAlreadyYielded;
8000224c:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1759
}
80002250:	00078513          	mv	a0,a5
80002254:	01c12083          	lw	ra,28(sp)
80002258:	01812403          	lw	s0,24(sp)
8000225c:	02010113          	addi	sp,sp,32
80002260:	00008067          	ret

80002264 <xTaskGetTickCount>:
xTaskGetTickCount():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1763
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
80002264:	fe010113          	addi	sp,sp,-32
80002268:	00112e23          	sw	ra,28(sp)
8000226c:	00812c23          	sw	s0,24(sp)
80002270:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1767
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
80002274:	aa0ff0ef          	jal	ra,80001514 <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1769
	{
		xTicks = xTickCount;
80002278:	9401a783          	lw	a5,-1728(gp) # 80004ed0 <xTickCount>
8000227c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1771
	}
	portTICK_TYPE_EXIT_CRITICAL();
80002280:	ac8ff0ef          	jal	ra,80001548 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1773

	return xTicks;
80002284:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1774
}
80002288:	00078513          	mv	a0,a5
8000228c:	01c12083          	lw	ra,28(sp)
80002290:	01812403          	lw	s0,24(sp)
80002294:	02010113          	addi	sp,sp,32
80002298:	00008067          	ret

8000229c <xTaskIncrementTick>:
xTaskIncrementTick():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1938

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
8000229c:	fd010113          	addi	sp,sp,-48
800022a0:	02112623          	sw	ra,44(sp)
800022a4:	02812423          	sw	s0,40(sp)
800022a8:	03010413          	addi	s0,sp,48
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1941
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
800022ac:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1947

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
800022b0:	9601a783          	lw	a5,-1696(gp) # 80004ef0 <uxSchedulerSuspended>
800022b4:	1a079063          	bnez	a5,80002454 <xTaskIncrementTick+0x1b8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1951
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
800022b8:	9401a783          	lw	a5,-1728(gp) # 80004ed0 <xTickCount>
800022bc:	00178713          	addi	a4,a5,1
800022c0:	94e1a023          	sw	a4,-1728(gp) # 80004ed0 <xTickCount>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1956

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
800022c4:	9401a783          	lw	a5,-1728(gp) # 80004ed0 <xTickCount>
800022c8:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1958

			if( xConstTickCount == ( TickType_t ) 0U )
800022cc:	fe842783          	lw	a5,-24(s0)
800022d0:	04079063          	bnez	a5,80002310 <xTaskIncrementTick+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960
			{
				taskSWITCH_DELAYED_LISTS();
800022d4:	9301a783          	lw	a5,-1744(gp) # 80004ec0 <pxDelayedTaskList>
800022d8:	0007a783          	lw	a5,0(a5)
800022dc:	00078663          	beqz	a5,800022e8 <xTaskIncrementTick+0x4c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 1)
800022e0:	30047073          	csrci	mstatus,8
800022e4:	0000006f          	j	800022e4 <xTaskIncrementTick+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 2)
800022e8:	9301a783          	lw	a5,-1744(gp) # 80004ec0 <pxDelayedTaskList>
800022ec:	fef42223          	sw	a5,-28(s0)
800022f0:	9341a703          	lw	a4,-1740(gp) # 80004ec4 <pxOverflowDelayedTaskList>
800022f4:	92e1a823          	sw	a4,-1744(gp) # 80004ec0 <pxDelayedTaskList>
800022f8:	fe442703          	lw	a4,-28(s0)
800022fc:	92e1aa23          	sw	a4,-1740(gp) # 80004ec4 <pxOverflowDelayedTaskList>
80002300:	9541a783          	lw	a5,-1708(gp) # 80004ee4 <xNumOfOverflows>
80002304:	00178713          	addi	a4,a5,1
80002308:	94e1aa23          	sw	a4,-1708(gp) # 80004ee4 <xNumOfOverflows>
8000230c:	6bc000ef          	jal	ra,800029c8 <prvResetNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1971

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
80002310:	95c1a783          	lw	a5,-1700(gp) # 80004eec <xNextTaskUnblockTime>
80002314:	fe842703          	lw	a4,-24(s0)
80002318:	10f76063          	bltu	a4,a5,80002418 <xTaskIncrementTick+0x17c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
8000231c:	9301a783          	lw	a5,-1744(gp) # 80004ec0 <pxDelayedTaskList>
80002320:	0007a783          	lw	a5,0(a5)
80002324:	00079663          	bnez	a5,80002330 <xTaskIncrementTick+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 1)
80002328:	00100793          	li	a5,1
8000232c:	0080006f          	j	80002334 <xTaskIncrementTick+0x98>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 2)
80002330:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 4)
80002334:	00078863          	beqz	a5,80002344 <xTaskIncrementTick+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1982
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
80002338:	fff00713          	li	a4,-1
8000233c:	94e1ae23          	sw	a4,-1700(gp) # 80004eec <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1983
						break;
80002340:	0d80006f          	j	80002418 <xTaskIncrementTick+0x17c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1991
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80002344:	9301a783          	lw	a5,-1744(gp) # 80004ec0 <pxDelayedTaskList>
80002348:	00c7a783          	lw	a5,12(a5)
8000234c:	00c7a783          	lw	a5,12(a5)
80002350:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1992
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
80002354:	fe042783          	lw	a5,-32(s0)
80002358:	0047a783          	lw	a5,4(a5)
8000235c:	fcf42e23          	sw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1994

						if( xConstTickCount < xItemValue )
80002360:	fe842703          	lw	a4,-24(s0)
80002364:	fdc42783          	lw	a5,-36(s0)
80002368:	00f77863          	bleu	a5,a4,80002378 <xTaskIncrementTick+0xdc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2001
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
8000236c:	fdc42703          	lw	a4,-36(s0)
80002370:	94e1ae23          	sw	a4,-1700(gp) # 80004eec <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2002
							break;
80002374:	0a40006f          	j	80002418 <xTaskIncrementTick+0x17c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2010
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80002378:	fe042783          	lw	a5,-32(s0)
8000237c:	00478793          	addi	a5,a5,4
80002380:	00078513          	mv	a0,a5
80002384:	859ff0ef          	jal	ra,80001bdc <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2014

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
80002388:	fe042783          	lw	a5,-32(s0)
8000238c:	0287a783          	lw	a5,40(a5)
80002390:	00078a63          	beqz	a5,800023a4 <xTaskIncrementTick+0x108>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2016
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002394:	fe042783          	lw	a5,-32(s0)
80002398:	01878793          	addi	a5,a5,24
8000239c:	00078513          	mv	a0,a5
800023a0:	83dff0ef          	jal	ra,80001bdc <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
800023a4:	fe042783          	lw	a5,-32(s0)
800023a8:	02c7a703          	lw	a4,44(a5)
800023ac:	9441a783          	lw	a5,-1724(gp) # 80004ed4 <uxTopReadyPriority>
800023b0:	00e7f863          	bleu	a4,a5,800023c0 <xTaskIncrementTick+0x124>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 1)
800023b4:	fe042783          	lw	a5,-32(s0)
800023b8:	02c7a703          	lw	a4,44(a5)
800023bc:	94e1a223          	sw	a4,-1724(gp) # 80004ed4 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 3)
800023c0:	fe042783          	lw	a5,-32(s0)
800023c4:	02c7a703          	lw	a4,44(a5)
800023c8:	00070793          	mv	a5,a4
800023cc:	00279793          	slli	a5,a5,0x2
800023d0:	00e787b3          	add	a5,a5,a4
800023d4:	00279793          	slli	a5,a5,0x2
800023d8:	8001e737          	lui	a4,0x8001e
800023dc:	f0070713          	addi	a4,a4,-256 # 8001df00 <__stack_top+0xfffded10>
800023e0:	00e78733          	add	a4,a5,a4
800023e4:	fe042783          	lw	a5,-32(s0)
800023e8:	00478793          	addi	a5,a5,4
800023ec:	00078593          	mv	a1,a5
800023f0:	00070513          	mv	a0,a4
800023f4:	e8cff0ef          	jal	ra,80001a80 <vListInsertEnd>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2035 (discriminator 3)
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
800023f8:	fe042783          	lw	a5,-32(s0)
800023fc:	02c7a703          	lw	a4,44(a5)
80002400:	92c1a783          	lw	a5,-1748(gp) # 80004ebc <pxCurrentTCB>
80002404:	02c7a783          	lw	a5,44(a5)
80002408:	f0f76ae3          	bltu	a4,a5,8000231c <xTaskIncrementTick+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2037
							{
								xSwitchRequired = pdTRUE;
8000240c:	00100793          	li	a5,1
80002410:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80002414:	f09ff06f          	j	8000231c <xTaskIncrementTick+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2055
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
80002418:	92c1a783          	lw	a5,-1748(gp) # 80004ebc <pxCurrentTCB>
8000241c:	02c7a703          	lw	a4,44(a5)
80002420:	8001e6b7          	lui	a3,0x8001e
80002424:	00070793          	mv	a5,a4
80002428:	00279793          	slli	a5,a5,0x2
8000242c:	00e787b3          	add	a5,a5,a4
80002430:	00279793          	slli	a5,a5,0x2
80002434:	f0068713          	addi	a4,a3,-256 # 8001df00 <__stack_top+0xfffded10>
80002438:	00e787b3          	add	a5,a5,a4
8000243c:	0007a703          	lw	a4,0(a5)
80002440:	00100793          	li	a5,1
80002444:	00e7fe63          	bleu	a4,a5,80002460 <xTaskIncrementTick+0x1c4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2057
			{
				xSwitchRequired = pdTRUE;
80002448:	00100793          	li	a5,1
8000244c:	fef42623          	sw	a5,-20(s0)
80002450:	0100006f          	j	80002460 <xTaskIncrementTick+0x1c4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2083
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
80002454:	94c1a783          	lw	a5,-1716(gp) # 80004edc <uxPendedTicks>
80002458:	00178713          	addi	a4,a5,1
8000245c:	94e1a623          	sw	a4,-1716(gp) # 80004edc <uxPendedTicks>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2096
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
80002460:	9501a783          	lw	a5,-1712(gp) # 80004ee0 <xYieldPending>
80002464:	00078663          	beqz	a5,80002470 <xTaskIncrementTick+0x1d4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2098
		{
			xSwitchRequired = pdTRUE;
80002468:	00100793          	li	a5,1
8000246c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2107
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
80002470:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2108
}
80002474:	00078513          	mv	a0,a5
80002478:	02c12083          	lw	ra,44(sp)
8000247c:	02812403          	lw	s0,40(sp)
80002480:	03010113          	addi	sp,sp,48
80002484:	00008067          	ret

80002488 <vTaskSwitchContext>:
vTaskSwitchContext():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2202

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
80002488:	fe010113          	addi	sp,sp,-32
8000248c:	00812e23          	sw	s0,28(sp)
80002490:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2203
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
80002494:	9601a783          	lw	a5,-1696(gp) # 80004ef0 <uxSchedulerSuspended>
80002498:	00078863          	beqz	a5,800024a8 <vTaskSwitchContext+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2207
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
8000249c:	00100713          	li	a4,1
800024a0:	94e1a823          	sw	a4,-1712(gp) # 80004ee0 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
800024a4:	0c00006f          	j	80002564 <vTaskSwitchContext+0xdc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2211
		xYieldPending = pdFALSE;
800024a8:	9401a823          	sw	zero,-1712(gp) # 80004ee0 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246
		taskSELECT_HIGHEST_PRIORITY_TASK();
800024ac:	0200006f          	j	800024cc <vTaskSwitchContext+0x44>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 4)
800024b0:	9441a783          	lw	a5,-1724(gp) # 80004ed4 <uxTopReadyPriority>
800024b4:	00079663          	bnez	a5,800024c0 <vTaskSwitchContext+0x38>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 1)
800024b8:	30047073          	csrci	mstatus,8
800024bc:	0000006f          	j	800024bc <vTaskSwitchContext+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 2)
800024c0:	9441a783          	lw	a5,-1724(gp) # 80004ed4 <uxTopReadyPriority>
800024c4:	fff78713          	addi	a4,a5,-1
800024c8:	94e1a223          	sw	a4,-1724(gp) # 80004ed4 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 3)
800024cc:	9441a703          	lw	a4,-1724(gp) # 80004ed4 <uxTopReadyPriority>
800024d0:	8001e6b7          	lui	a3,0x8001e
800024d4:	00070793          	mv	a5,a4
800024d8:	00279793          	slli	a5,a5,0x2
800024dc:	00e787b3          	add	a5,a5,a4
800024e0:	00279793          	slli	a5,a5,0x2
800024e4:	f0068713          	addi	a4,a3,-256 # 8001df00 <__stack_top+0xfffded10>
800024e8:	00e787b3          	add	a5,a5,a4
800024ec:	0007a783          	lw	a5,0(a5)
800024f0:	fc0780e3          	beqz	a5,800024b0 <vTaskSwitchContext+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 5)
800024f4:	9441a703          	lw	a4,-1724(gp) # 80004ed4 <uxTopReadyPriority>
800024f8:	00070793          	mv	a5,a4
800024fc:	00279793          	slli	a5,a5,0x2
80002500:	00e787b3          	add	a5,a5,a4
80002504:	00279793          	slli	a5,a5,0x2
80002508:	8001e737          	lui	a4,0x8001e
8000250c:	f0070713          	addi	a4,a4,-256 # 8001df00 <__stack_top+0xfffded10>
80002510:	00e787b3          	add	a5,a5,a4
80002514:	fef42623          	sw	a5,-20(s0)
80002518:	fec42783          	lw	a5,-20(s0)
8000251c:	0047a783          	lw	a5,4(a5)
80002520:	0047a703          	lw	a4,4(a5)
80002524:	fec42783          	lw	a5,-20(s0)
80002528:	00e7a223          	sw	a4,4(a5)
8000252c:	fec42783          	lw	a5,-20(s0)
80002530:	0047a703          	lw	a4,4(a5)
80002534:	fec42783          	lw	a5,-20(s0)
80002538:	00878793          	addi	a5,a5,8
8000253c:	00f71c63          	bne	a4,a5,80002554 <vTaskSwitchContext+0xcc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 6)
80002540:	fec42783          	lw	a5,-20(s0)
80002544:	0047a783          	lw	a5,4(a5)
80002548:	0047a703          	lw	a4,4(a5)
8000254c:	fec42783          	lw	a5,-20(s0)
80002550:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 8)
80002554:	fec42783          	lw	a5,-20(s0)
80002558:	0047a783          	lw	a5,4(a5)
8000255c:	00c7a703          	lw	a4,12(a5)
80002560:	92e1a623          	sw	a4,-1748(gp) # 80004ebc <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
}
80002564:	00000013          	nop
80002568:	01c12403          	lw	s0,28(sp)
8000256c:	02010113          	addi	sp,sp,32
80002570:	00008067          	ret

80002574 <prvIdleTask>:
prvIdleTask():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2689
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
80002574:	fe010113          	addi	sp,sp,-32
80002578:	00112e23          	sw	ra,28(sp)
8000257c:	00812c23          	sw	s0,24(sp)
80002580:	02010413          	addi	s0,sp,32
80002584:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
80002588:	218000ef          	jal	ra,800027a0 <prvCheckTasksWaitingTermination>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2719

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
8000258c:	8001e7b7          	lui	a5,0x8001e
80002590:	f007a703          	lw	a4,-256(a5) # 8001df00 <__stack_top+0xfffded10>
80002594:	00100793          	li	a5,1
80002598:	00e7f463          	bleu	a4,a5,800025a0 <prvIdleTask+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2721
			{
				taskYIELD();
8000259c:	c30ff0ef          	jal	ra,800019cc <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2739
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
800025a0:	288020ef          	jal	ra,80004828 <vApplicationIdleHook>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
		prvCheckTasksWaitingTermination();
800025a4:	fe5ff06f          	j	80002588 <prvIdleTask+0x14>

800025a8 <prvInitialiseTCBVariables>:
prvInitialiseTCBVariables():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2832

#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
800025a8:	fc010113          	addi	sp,sp,-64
800025ac:	02112e23          	sw	ra,60(sp)
800025b0:	02812c23          	sw	s0,56(sp)
800025b4:	04010413          	addi	s0,sp,64
800025b8:	fca42e23          	sw	a0,-36(s0)
800025bc:	fcb42c23          	sw	a1,-40(s0)
800025c0:	fcc42a23          	sw	a2,-44(s0)
800025c4:	fcd42823          	sw	a3,-48(s0)
800025c8:	00070793          	mv	a5,a4
800025cc:	fcf41723          	sh	a5,-50(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
800025d0:	fe042623          	sw	zero,-20(s0)
800025d4:	0440006f          	j	80002618 <prvInitialiseTCBVariables+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2838
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
800025d8:	fd842703          	lw	a4,-40(s0)
800025dc:	fec42783          	lw	a5,-20(s0)
800025e0:	00f707b3          	add	a5,a4,a5
800025e4:	00078703          	lb	a4,0(a5)
800025e8:	fdc42683          	lw	a3,-36(s0)
800025ec:	fec42783          	lw	a5,-20(s0)
800025f0:	00f687b3          	add	a5,a3,a5
800025f4:	02e78a23          	sb	a4,52(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2843

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
800025f8:	fd842703          	lw	a4,-40(s0)
800025fc:	fec42783          	lw	a5,-20(s0)
80002600:	00f707b3          	add	a5,a4,a5
80002604:	00078783          	lb	a5,0(a5)
80002608:	02078063          	beqz	a5,80002628 <prvInitialiseTCBVariables+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 2)
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
8000260c:	fec42783          	lw	a5,-20(s0)
80002610:	00178793          	addi	a5,a5,1
80002614:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 1)
80002618:	fec42703          	lw	a4,-20(s0)
8000261c:	00f00793          	li	a5,15
80002620:	fae7fce3          	bleu	a4,a5,800025d8 <prvInitialiseTCBVariables+0x30>
80002624:	0080006f          	j	8000262c <prvInitialiseTCBVariables+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2845
		{
			break;
80002628:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2855
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
8000262c:	fdc42783          	lw	a5,-36(s0)
80002630:	040781a3          	sb	zero,67(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2859

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
80002634:	fd442703          	lw	a4,-44(s0)
80002638:	00400793          	li	a5,4
8000263c:	00e7f663          	bleu	a4,a5,80002648 <prvInitialiseTCBVariables+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2861
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
80002640:	00400793          	li	a5,4
80002644:	fcf42a23          	sw	a5,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2868
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
80002648:	fdc42783          	lw	a5,-36(s0)
8000264c:	fd442703          	lw	a4,-44(s0)
80002650:	02e7a623          	sw	a4,44(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2871
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
80002654:	fdc42783          	lw	a5,-36(s0)
80002658:	fd442703          	lw	a4,-44(s0)
8000265c:	04e7a823          	sw	a4,80(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2872
		pxTCB->uxMutexesHeld = 0;
80002660:	fdc42783          	lw	a5,-36(s0)
80002664:	0407aa23          	sw	zero,84(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2876
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
80002668:	fdc42783          	lw	a5,-36(s0)
8000266c:	00478793          	addi	a5,a5,4
80002670:	00078513          	mv	a0,a5
80002674:	be4ff0ef          	jal	ra,80001a58 <vListInitialiseItem>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2877
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
80002678:	fdc42783          	lw	a5,-36(s0)
8000267c:	01878793          	addi	a5,a5,24
80002680:	00078513          	mv	a0,a5
80002684:	bd4ff0ef          	jal	ra,80001a58 <vListInitialiseItem>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2881

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
80002688:	fdc42783          	lw	a5,-36(s0)
8000268c:	fdc42703          	lw	a4,-36(s0)
80002690:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2884

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80002694:	00500713          	li	a4,5
80002698:	fd442783          	lw	a5,-44(s0)
8000269c:	40f70733          	sub	a4,a4,a5
800026a0:	fdc42783          	lw	a5,-36(s0)
800026a4:	00e7ac23          	sw	a4,24(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2885
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
800026a8:	fdc42783          	lw	a5,-36(s0)
800026ac:	fdc42703          	lw	a4,-36(s0)
800026b0:	02e7a223          	sw	a4,36(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2889

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
800026b4:	fdc42783          	lw	a5,-36(s0)
800026b8:	0407a223          	sw	zero,68(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2927
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
800026bc:	fdc42783          	lw	a5,-36(s0)
800026c0:	0407ac23          	sw	zero,88(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2928
		pxTCB->eNotifyState = eNotWaitingNotification;
800026c4:	fdc42783          	lw	a5,-36(s0)
800026c8:	0407ae23          	sw	zero,92(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2938
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
800026cc:	00000013          	nop
800026d0:	03c12083          	lw	ra,60(sp)
800026d4:	03812403          	lw	s0,56(sp)
800026d8:	04010113          	addi	sp,sp,64
800026dc:	00008067          	ret

800026e0 <prvInitialiseTaskLists>:
prvInitialiseTaskLists():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2997

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
800026e0:	fe010113          	addi	sp,sp,-32
800026e4:	00112e23          	sw	ra,28(sp)
800026e8:	00812c23          	sw	s0,24(sp)
800026ec:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
800026f0:	fe042623          	sw	zero,-20(s0)
800026f4:	0380006f          	j	8000272c <prvInitialiseTaskLists+0x4c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3002 (discriminator 3)
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
800026f8:	fec42703          	lw	a4,-20(s0)
800026fc:	00070793          	mv	a5,a4
80002700:	00279793          	slli	a5,a5,0x2
80002704:	00e787b3          	add	a5,a5,a4
80002708:	00279793          	slli	a5,a5,0x2
8000270c:	8001e737          	lui	a4,0x8001e
80002710:	f0070713          	addi	a4,a4,-256 # 8001df00 <__stack_top+0xfffded10>
80002714:	00e787b3          	add	a5,a5,a4
80002718:	00078513          	mv	a0,a5
8000271c:	ad8ff0ef          	jal	ra,800019f4 <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 3)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
80002720:	fec42783          	lw	a5,-20(s0)
80002724:	00178793          	addi	a5,a5,1
80002728:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 1)
8000272c:	fec42703          	lw	a4,-20(s0)
80002730:	00400793          	li	a5,4
80002734:	fce7f2e3          	bleu	a4,a5,800026f8 <prvInitialiseTaskLists+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3005
	}

	vListInitialise( &xDelayedTaskList1 );
80002738:	8001e7b7          	lui	a5,0x8001e
8000273c:	f6478513          	addi	a0,a5,-156 # 8001df64 <__stack_top+0xfffded74>
80002740:	ab4ff0ef          	jal	ra,800019f4 <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3006
	vListInitialise( &xDelayedTaskList2 );
80002744:	8001e7b7          	lui	a5,0x8001e
80002748:	f7878513          	addi	a0,a5,-136 # 8001df78 <__stack_top+0xfffded88>
8000274c:	aa8ff0ef          	jal	ra,800019f4 <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3007
	vListInitialise( &xPendingReadyList );
80002750:	8001e7b7          	lui	a5,0x8001e
80002754:	f8c78513          	addi	a0,a5,-116 # 8001df8c <__stack_top+0xfffded9c>
80002758:	a9cff0ef          	jal	ra,800019f4 <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3011

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
8000275c:	8001e7b7          	lui	a5,0x8001e
80002760:	fa078513          	addi	a0,a5,-96 # 8001dfa0 <__stack_top+0xfffdedb0>
80002764:	a90ff0ef          	jal	ra,800019f4 <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3017
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
80002768:	8001e7b7          	lui	a5,0x8001e
8000276c:	fb478513          	addi	a0,a5,-76 # 8001dfb4 <__stack_top+0xfffdedc4>
80002770:	a84ff0ef          	jal	ra,800019f4 <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3023
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
80002774:	8001e737          	lui	a4,0x8001e
80002778:	f6470713          	addi	a4,a4,-156 # 8001df64 <__stack_top+0xfffded74>
8000277c:	92e1a823          	sw	a4,-1744(gp) # 80004ec0 <pxDelayedTaskList>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3024
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
80002780:	8001e737          	lui	a4,0x8001e
80002784:	f7870713          	addi	a4,a4,-136 # 8001df78 <__stack_top+0xfffded88>
80002788:	92e1aa23          	sw	a4,-1740(gp) # 80004ec4 <pxOverflowDelayedTaskList>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3025
}
8000278c:	00000013          	nop
80002790:	01c12083          	lw	ra,28(sp)
80002794:	01812403          	lw	s0,24(sp)
80002798:	02010113          	addi	sp,sp,32
8000279c:	00008067          	ret

800027a0 <prvCheckTasksWaitingTermination>:
prvCheckTasksWaitingTermination():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3029
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
800027a0:	fe010113          	addi	sp,sp,-32
800027a4:	00112e23          	sw	ra,28(sp)
800027a8:	00812c23          	sw	s0,24(sp)
800027ac:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
800027b0:	0740006f          	j	80002824 <prvCheckTasksWaitingTermination+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3038
		{
			vTaskSuspendAll();
800027b4:	929ff0ef          	jal	ra,800020dc <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3040
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
800027b8:	8001e7b7          	lui	a5,0x8001e
800027bc:	fa07a783          	lw	a5,-96(a5) # 8001dfa0 <__stack_top+0xfffdedb0>
800027c0:	0017b793          	seqz	a5,a5
800027c4:	0ff7f793          	andi	a5,a5,255
800027c8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3042
			}
			( void ) xTaskResumeAll();
800027cc:	939ff0ef          	jal	ra,80002104 <xTaskResumeAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3044

			if( xListIsEmpty == pdFALSE )
800027d0:	fec42783          	lw	a5,-20(s0)
800027d4:	04079863          	bnez	a5,80002824 <prvCheckTasksWaitingTermination+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3048
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
800027d8:	d3dfe0ef          	jal	ra,80001514 <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3050
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
800027dc:	8001e7b7          	lui	a5,0x8001e
800027e0:	fa078793          	addi	a5,a5,-96 # 8001dfa0 <__stack_top+0xfffdedb0>
800027e4:	00c7a783          	lw	a5,12(a5)
800027e8:	00c7a783          	lw	a5,12(a5)
800027ec:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3051
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
800027f0:	fe842783          	lw	a5,-24(s0)
800027f4:	00478793          	addi	a5,a5,4
800027f8:	00078513          	mv	a0,a5
800027fc:	be0ff0ef          	jal	ra,80001bdc <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3052
					--uxCurrentNumberOfTasks;
80002800:	93c1a783          	lw	a5,-1732(gp) # 80004ecc <uxCurrentNumberOfTasks>
80002804:	fff78713          	addi	a4,a5,-1
80002808:	92e1ae23          	sw	a4,-1732(gp) # 80004ecc <uxCurrentNumberOfTasks>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3053
					--uxTasksDeleted;
8000280c:	9381a783          	lw	a5,-1736(gp) # 80004ec8 <uxTasksDeleted>
80002810:	fff78713          	addi	a4,a5,-1
80002814:	92e1ac23          	sw	a4,-1736(gp) # 80004ec8 <uxTasksDeleted>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3055
				}
				taskEXIT_CRITICAL();
80002818:	d31fe0ef          	jal	ra,80001548 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3057

				prvDeleteTCB( pxTCB );
8000281c:	fe842503          	lw	a0,-24(s0)
80002820:	168000ef          	jal	ra,80002988 <prvDeleteTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
80002824:	9381a783          	lw	a5,-1736(gp) # 80004ec8 <uxTasksDeleted>
80002828:	f80796e3          	bnez	a5,800027b4 <prvCheckTasksWaitingTermination+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3066
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
8000282c:	00000013          	nop
80002830:	01c12083          	lw	ra,28(sp)
80002834:	01812403          	lw	s0,24(sp)
80002838:	02010113          	addi	sp,sp,32
8000283c:	00008067          	ret

80002840 <prvAddCurrentTaskToDelayedList>:
prvAddCurrentTaskToDelayedList():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3070
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
80002840:	fe010113          	addi	sp,sp,-32
80002844:	00112e23          	sw	ra,28(sp)
80002848:	00812c23          	sw	s0,24(sp)
8000284c:	02010413          	addi	s0,sp,32
80002850:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3072
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
80002854:	92c1a783          	lw	a5,-1748(gp) # 80004ebc <pxCurrentTCB>
80002858:	fec42703          	lw	a4,-20(s0)
8000285c:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3074

	if( xTimeToWake < xTickCount )
80002860:	9401a783          	lw	a5,-1728(gp) # 80004ed0 <xTickCount>
80002864:	fec42703          	lw	a4,-20(s0)
80002868:	02f77063          	bleu	a5,a4,80002888 <prvAddCurrentTaskToDelayedList+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3077
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
8000286c:	9341a703          	lw	a4,-1740(gp) # 80004ec4 <pxOverflowDelayedTaskList>
80002870:	92c1a783          	lw	a5,-1748(gp) # 80004ebc <pxCurrentTCB>
80002874:	00478793          	addi	a5,a5,4
80002878:	00078593          	mv	a1,a5
8000287c:	00070513          	mv	a0,a4
80002880:	a88ff0ef          	jal	ra,80001b08 <vListInsert>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
80002884:	0300006f          	j	800028b4 <prvAddCurrentTaskToDelayedList+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3082
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80002888:	9301a703          	lw	a4,-1744(gp) # 80004ec0 <pxDelayedTaskList>
8000288c:	92c1a783          	lw	a5,-1748(gp) # 80004ebc <pxCurrentTCB>
80002890:	00478793          	addi	a5,a5,4
80002894:	00078593          	mv	a1,a5
80002898:	00070513          	mv	a0,a4
8000289c:	a6cff0ef          	jal	ra,80001b08 <vListInsert>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3087
		if( xTimeToWake < xNextTaskUnblockTime )
800028a0:	95c1a783          	lw	a5,-1700(gp) # 80004eec <xNextTaskUnblockTime>
800028a4:	fec42703          	lw	a4,-20(s0)
800028a8:	00f77663          	bleu	a5,a4,800028b4 <prvAddCurrentTaskToDelayedList+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3089
			xNextTaskUnblockTime = xTimeToWake;
800028ac:	fec42703          	lw	a4,-20(s0)
800028b0:	94e1ae23          	sw	a4,-1700(gp) # 80004eec <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
}
800028b4:	00000013          	nop
800028b8:	01c12083          	lw	ra,28(sp)
800028bc:	01812403          	lw	s0,24(sp)
800028c0:	02010113          	addi	sp,sp,32
800028c4:	00008067          	ret

800028c8 <prvAllocateTCBAndStack>:
prvAllocateTCBAndStack():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3100
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
800028c8:	fd010113          	addi	sp,sp,-48
800028cc:	02112623          	sw	ra,44(sp)
800028d0:	02812423          	sw	s0,40(sp)
800028d4:	03010413          	addi	s0,sp,48
800028d8:	00050793          	mv	a5,a0
800028dc:	fcb42c23          	sw	a1,-40(s0)
800028e0:	fcf41f23          	sh	a5,-34(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
800028e4:	fd842783          	lw	a5,-40(s0)
800028e8:	00079e63          	bnez	a5,80002904 <prvAllocateTCBAndStack+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 1)
800028ec:	fde45783          	lhu	a5,-34(s0)
800028f0:	00279793          	slli	a5,a5,0x2
800028f4:	00078513          	mv	a0,a5
800028f8:	8b5fe0ef          	jal	ra,800011ac <pvPortMalloc>
800028fc:	00050793          	mv	a5,a0
80002900:	0080006f          	j	80002908 <prvAllocateTCBAndStack+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 2)
80002904:	fd842783          	lw	a5,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 4)
80002908:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3134 (discriminator 4)

		if( pxStack != NULL )
8000290c:	fe842783          	lw	a5,-24(s0)
80002910:	02078a63          	beqz	a5,80002944 <prvAllocateTCBAndStack+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3138
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
80002914:	06000513          	li	a0,96
80002918:	895fe0ef          	jal	ra,800011ac <pvPortMalloc>
8000291c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3140

			if( pxNewTCB != NULL )
80002920:	fec42783          	lw	a5,-20(s0)
80002924:	00078a63          	beqz	a5,80002938 <prvAllocateTCBAndStack+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3143
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
80002928:	fec42783          	lw	a5,-20(s0)
8000292c:	fe842703          	lw	a4,-24(s0)
80002930:	02e7a823          	sw	a4,48(a5)
80002934:	0140006f          	j	80002948 <prvAllocateTCBAndStack+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3149
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
80002938:	fe842503          	lw	a0,-24(s0)
8000293c:	a4dfe0ef          	jal	ra,80001388 <vPortFree>
80002940:	0080006f          	j	80002948 <prvAllocateTCBAndStack+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3154
			}
		}
		else
		{
			pxNewTCB = NULL;
80002944:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3159
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
80002948:	fec42783          	lw	a5,-20(s0)
8000294c:	02078263          	beqz	a5,80002970 <prvAllocateTCBAndStack+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3165
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
80002950:	fec42783          	lw	a5,-20(s0)
80002954:	0307a703          	lw	a4,48(a5)
80002958:	fde45783          	lhu	a5,-34(s0)
8000295c:	00279793          	slli	a5,a5,0x2
80002960:	00078613          	mv	a2,a5
80002964:	0a500593          	li	a1,165
80002968:	00070513          	mv	a0,a4
8000296c:	b08ff0ef          	jal	ra,80001c74 <memset>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3170
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
80002970:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3171
}
80002974:	00078513          	mv	a0,a5
80002978:	02c12083          	lw	ra,44(sp)
8000297c:	02812403          	lw	s0,40(sp)
80002980:	03010113          	addi	sp,sp,48
80002984:	00008067          	ret

80002988 <prvDeleteTCB>:
prvDeleteTCB():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3310
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
80002988:	fe010113          	addi	sp,sp,-32
8000298c:	00112e23          	sw	ra,28(sp)
80002990:	00812c23          	sw	s0,24(sp)
80002994:	02010413          	addi	s0,sp,32
80002998:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3335
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
8000299c:	fec42783          	lw	a5,-20(s0)
800029a0:	0307a783          	lw	a5,48(a5)
800029a4:	00078513          	mv	a0,a5
800029a8:	9e1fe0ef          	jal	ra,80001388 <vPortFree>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3339
		}
		#endif

		vPortFree( pxTCB );
800029ac:	fec42503          	lw	a0,-20(s0)
800029b0:	9d9fe0ef          	jal	ra,80001388 <vPortFree>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3340
	}
800029b4:	00000013          	nop
800029b8:	01c12083          	lw	ra,28(sp)
800029bc:	01812403          	lw	s0,24(sp)
800029c0:	02010113          	addi	sp,sp,32
800029c4:	00008067          	ret

800029c8 <prvResetNextTaskUnblockTime>:
prvResetNextTaskUnblockTime():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3346

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
800029c8:	fe010113          	addi	sp,sp,-32
800029cc:	00812e23          	sw	s0,28(sp)
800029d0:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
800029d4:	9301a783          	lw	a5,-1744(gp) # 80004ec0 <pxDelayedTaskList>
800029d8:	0007a783          	lw	a5,0(a5)
800029dc:	00079663          	bnez	a5,800029e8 <prvResetNextTaskUnblockTime+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 1)
800029e0:	00100793          	li	a5,1
800029e4:	0080006f          	j	800029ec <prvResetNextTaskUnblockTime+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 2)
800029e8:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 4)
800029ec:	00078863          	beqz	a5,800029fc <prvResetNextTaskUnblockTime+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3355
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
800029f0:	fff00713          	li	a4,-1
800029f4:	94e1ae23          	sw	a4,-1700(gp) # 80004eec <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
800029f8:	0200006f          	j	80002a18 <prvResetNextTaskUnblockTime+0x50>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3363
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
800029fc:	9301a783          	lw	a5,-1744(gp) # 80004ec0 <pxDelayedTaskList>
80002a00:	00c7a783          	lw	a5,12(a5)
80002a04:	00c7a783          	lw	a5,12(a5)
80002a08:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3364
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
80002a0c:	fec42783          	lw	a5,-20(s0)
80002a10:	0047a703          	lw	a4,4(a5)
80002a14:	94e1ae23          	sw	a4,-1700(gp) # 80004eec <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
}
80002a18:	00000013          	nop
80002a1c:	01c12403          	lw	s0,28(sp)
80002a20:	02010113          	addi	sp,sp,32
80002a24:	00008067          	ret

80002a28 <PLIC_EnableIRQ>:
PLIC_EnableIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:154
{
80002a28:	fd010113          	addi	sp,sp,-48
80002a2c:	02812623          	sw	s0,44(sp)
80002a30:	03010413          	addi	s0,sp,48
80002a34:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:155
    unsigned long hart_id = read_csr(mhartid);
80002a38:	f14027f3          	csrr	a5,mhartid
80002a3c:	fef42623          	sw	a5,-20(s0)
80002a40:	fec42783          	lw	a5,-20(s0)
80002a44:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:156
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80002a48:	40000737          	lui	a4,0x40000
80002a4c:	fdc42783          	lw	a5,-36(s0)
80002a50:	0057d793          	srli	a5,a5,0x5
80002a54:	fe842683          	lw	a3,-24(s0)
80002a58:	00569693          	slli	a3,a3,0x5
80002a5c:	00f686b3          	add	a3,a3,a5
80002a60:	000017b7          	lui	a5,0x1
80002a64:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80002a68:	00f687b3          	add	a5,a3,a5
80002a6c:	00279793          	slli	a5,a5,0x2
80002a70:	00f707b3          	add	a5,a4,a5
80002a74:	0007a783          	lw	a5,0(a5)
80002a78:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:157
    current |= (uint32_t)1 << (IRQn % 32);
80002a7c:	fdc42783          	lw	a5,-36(s0)
80002a80:	01f7f793          	andi	a5,a5,31
80002a84:	00100713          	li	a4,1
80002a88:	00f717b3          	sll	a5,a4,a5
80002a8c:	fe442703          	lw	a4,-28(s0)
80002a90:	00f767b3          	or	a5,a4,a5
80002a94:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:158
    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
80002a98:	40000737          	lui	a4,0x40000
80002a9c:	fdc42783          	lw	a5,-36(s0)
80002aa0:	0057d793          	srli	a5,a5,0x5
80002aa4:	fe842683          	lw	a3,-24(s0)
80002aa8:	00569693          	slli	a3,a3,0x5
80002aac:	00f686b3          	add	a3,a3,a5
80002ab0:	000017b7          	lui	a5,0x1
80002ab4:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80002ab8:	00f687b3          	add	a5,a3,a5
80002abc:	00279793          	slli	a5,a5,0x2
80002ac0:	00f707b3          	add	a5,a4,a5
80002ac4:	fe442703          	lw	a4,-28(s0)
80002ac8:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:159
}
80002acc:	00000013          	nop
80002ad0:	02c12403          	lw	s0,44(sp)
80002ad4:	03010113          	addi	sp,sp,48
80002ad8:	00008067          	ret

80002adc <PLIC_SetPriority>:
PLIC_SetPriority():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:188
{
80002adc:	fe010113          	addi	sp,sp,-32
80002ae0:	00812e23          	sw	s0,28(sp)
80002ae4:	02010413          	addi	s0,sp,32
80002ae8:	fea42623          	sw	a0,-20(s0)
80002aec:	feb42423          	sw	a1,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:189
    PLIC->SOURCE_PRIORITY[IRQn] = priority;
80002af0:	40000737          	lui	a4,0x40000
80002af4:	fec42783          	lw	a5,-20(s0)
80002af8:	00279793          	slli	a5,a5,0x2
80002afc:	00f707b3          	add	a5,a4,a5
80002b00:	fe842703          	lw	a4,-24(s0)
80002b04:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:190
}
80002b08:	00000013          	nop
80002b0c:	01c12403          	lw	s0,28(sp)
80002b10:	02010113          	addi	sp,sp,32
80002b14:	00008067          	ret

80002b18 <Chronos_init>:
Chronos_init():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:27
extern volatile unsigned int SendingQueue_front;
extern volatile unsigned int SendingQueue_tail;

////////////////////////////////////////////////////////////
// Initialize Chronos stuff
void Chronos_init(){
80002b18:	ff010113          	addi	sp,sp,-16
80002b1c:	00112623          	sw	ra,12(sp)
80002b20:	00812423          	sw	s0,8(sp)
80002b24:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:29
    //Informs the Router this tile ID, that is provided by Harness
    HW_set_32bit_reg(ROUTER_BASE, HW_get_32bit_reg(MY_ID)); 
80002b28:	900007b7          	lui	a5,0x90000
80002b2c:	ffc78513          	addi	a0,a5,-4 # 8ffffffc <__stack_top+0xffc0e0c>
80002b30:	b30fe0ef          	jal	ra,80000e60 <HW_get_32bit_reg>
80002b34:	00050793          	mv	a5,a0
80002b38:	00078593          	mv	a1,a5
80002b3c:	50000537          	lui	a0,0x50000
80002b40:	b18fe0ef          	jal	ra,80000e58 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:32
    
    // Reads this processor address, calculated by the router
    ProcessorAddr = HW_get_32bit_reg(ROUTER_BASE);
80002b44:	50000537          	lui	a0,0x50000
80002b48:	b18fe0ef          	jal	ra,80000e60 <HW_get_32bit_reg>
80002b4c:	00050713          	mv	a4,a0
80002b50:	8001f7b7          	lui	a5,0x8001f
80002b54:	1ee7a223          	sw	a4,484(a5) # 8001f1e4 <__stack_top+0xfffdfff4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:35

    // Informs the PRINTER this tile address
    HW_set_32bit_reg(PRINTER_CHAR, getXpos(ProcessorAddr));
80002b58:	8001f7b7          	lui	a5,0x8001f
80002b5c:	1e47a783          	lw	a5,484(a5) # 8001f1e4 <__stack_top+0xfffdfff4>
80002b60:	00078513          	mv	a0,a5
80002b64:	1e4000ef          	jal	ra,80002d48 <getXpos>
80002b68:	00050793          	mv	a5,a0
80002b6c:	00078593          	mv	a1,a5
80002b70:	500007b7          	lui	a5,0x50000
80002b74:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002b78:	ae0fe0ef          	jal	ra,80000e58 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:36
    HW_set_32bit_reg(PRINTER_CHAR, getYpos(ProcessorAddr));
80002b7c:	8001f7b7          	lui	a5,0x8001f
80002b80:	1e47a783          	lw	a5,484(a5) # 8001f1e4 <__stack_top+0xfffdfff4>
80002b84:	00078513          	mv	a0,a5
80002b88:	1ec000ef          	jal	ra,80002d74 <getYpos>
80002b8c:	00050793          	mv	a5,a0
80002b90:	00078593          	mv	a1,a5
80002b94:	500007b7          	lui	a5,0x50000
80002b98:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002b9c:	abcfe0ef          	jal	ra,80000e58 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:39

    // Enables interruption from NI
    NI_enable_irq(TX_RX);
80002ba0:	000077b7          	lui	a5,0x7
80002ba4:	77778513          	addi	a0,a5,1911 # 7777 <HEAP_SIZE-0x8889>
80002ba8:	254000ef          	jal	ra,80002dfc <NI_enable_irq>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:42

    // Informs the NI the address to store incoming packets
    HW_set_32bit_reg(NI_ADDR, (unsigned int)&incommingPacket.header);
80002bac:	8001e7b7          	lui	a5,0x8001e
80002bb0:	0bc78793          	addi	a5,a5,188 # 8001e0bc <__stack_top+0xfffdeecc>
80002bb4:	00078593          	mv	a1,a5
80002bb8:	500007b7          	lui	a5,0x50000
80002bbc:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
80002bc0:	a98fe0ef          	jal	ra,80000e58 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:45
    
    // Initialize the TaskList
    API_TaskListInit(MAX_LOCAL_TASKS);
80002bc4:	00a00513          	li	a0,10
80002bc8:	269000ef          	jal	ra,80003630 <API_TaskListInit>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:48

    // Initialize the Message & Service PIPE
    API_PipeInitialization();
80002bcc:	355000ef          	jal	ra,80003720 <API_PipeInitialization>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:49
    SendingQueue_front = 0;
80002bd0:	8001e7b7          	lui	a5,0x8001e
80002bd4:	1007aa23          	sw	zero,276(a5) # 8001e114 <__stack_top+0xfffdef24>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:50
    SendingQueue_tail = 0;
80002bd8:	8001e7b7          	lui	a5,0x8001e
80002bdc:	1007a823          	sw	zero,272(a5) # 8001e110 <__stack_top+0xfffdef20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:52

    return;
80002be0:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:53
}
80002be4:	00c12083          	lw	ra,12(sp)
80002be8:	00812403          	lw	s0,8(sp)
80002bec:	01010113          	addi	sp,sp,16
80002bf0:	00008067          	ret

80002bf4 <prints>:
prints():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:57

////////////////////////////////////////////////////////////
// Prints a string
void prints(char *text) {
80002bf4:	fd010113          	addi	sp,sp,-48
80002bf8:	02112623          	sw	ra,44(sp)
80002bfc:	02812423          	sw	s0,40(sp)
80002c00:	03010413          	addi	s0,sp,48
80002c04:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:58
    int i = 0;
80002c08:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:60 (discriminator 1)
    do {
        HW_set_32bit_reg(PRINTER_CHAR, text[i]);
80002c0c:	fec42783          	lw	a5,-20(s0)
80002c10:	fdc42703          	lw	a4,-36(s0)
80002c14:	00f707b3          	add	a5,a4,a5
80002c18:	00078783          	lb	a5,0(a5)
80002c1c:	00078593          	mv	a1,a5
80002c20:	500007b7          	lui	a5,0x50000
80002c24:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002c28:	a30fe0ef          	jal	ra,80000e58 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:61 (discriminator 1)
        i++;
80002c2c:	fec42783          	lw	a5,-20(s0)
80002c30:	00178793          	addi	a5,a5,1
80002c34:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:62 (discriminator 1)
    } while (text[i - 1] != '\0');
80002c38:	fec42783          	lw	a5,-20(s0)
80002c3c:	fff78793          	addi	a5,a5,-1
80002c40:	fdc42703          	lw	a4,-36(s0)
80002c44:	00f707b3          	add	a5,a4,a5
80002c48:	00078783          	lb	a5,0(a5)
80002c4c:	fc0790e3          	bnez	a5,80002c0c <prints+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:63
    return;
80002c50:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:64
}
80002c54:	02c12083          	lw	ra,44(sp)
80002c58:	02812403          	lw	s0,40(sp)
80002c5c:	03010113          	addi	sp,sp,48
80002c60:	00008067          	ret

80002c64 <printi>:
printi():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:68

////////////////////////////////////////////////////////////
// Prints an integer
void printi(int value) {
80002c64:	fe010113          	addi	sp,sp,-32
80002c68:	00112e23          	sw	ra,28(sp)
80002c6c:	00812c23          	sw	s0,24(sp)
80002c70:	02010413          	addi	s0,sp,32
80002c74:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:69
    HW_set_32bit_reg(PRINTER_INT, value);
80002c78:	fec42783          	lw	a5,-20(s0)
80002c7c:	00078593          	mv	a1,a5
80002c80:	500007b7          	lui	a5,0x50000
80002c84:	02478513          	addi	a0,a5,36 # 50000024 <RAM_SIZE+0x4ff80024>
80002c88:	9d0fe0ef          	jal	ra,80000e58 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:70
    return;
80002c8c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:71
}
80002c90:	01c12083          	lw	ra,28(sp)
80002c94:	01812403          	lw	s0,24(sp)
80002c98:	02010113          	addi	sp,sp,32
80002c9c:	00008067          	ret

80002ca0 <printsv>:
printsv():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:75

////////////////////////////////////////////////////////////
// Prints a string followed by a integer
void printsv(char *text1, int value1) {
80002ca0:	fe010113          	addi	sp,sp,-32
80002ca4:	00112e23          	sw	ra,28(sp)
80002ca8:	00812c23          	sw	s0,24(sp)
80002cac:	02010413          	addi	s0,sp,32
80002cb0:	fea42623          	sw	a0,-20(s0)
80002cb4:	feb42423          	sw	a1,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:77
    //vPortEnterCritical();
        prints(text1);
80002cb8:	fec42503          	lw	a0,-20(s0)
80002cbc:	f39ff0ef          	jal	ra,80002bf4 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:78
        printi(value1);
80002cc0:	fe842503          	lw	a0,-24(s0)
80002cc4:	fa1ff0ef          	jal	ra,80002c64 <printi>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:79
        prints("\n");
80002cc8:	800057b7          	lui	a5,0x80005
80002ccc:	a4878513          	addi	a0,a5,-1464 # 80004a48 <__stack_top+0xfffc5858>
80002cd0:	f25ff0ef          	jal	ra,80002bf4 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:81
    //vPortExitCritical();
    return;
80002cd4:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:82
}
80002cd8:	01c12083          	lw	ra,28(sp)
80002cdc:	01812403          	lw	s0,24(sp)
80002ce0:	02010113          	addi	sp,sp,32
80002ce4:	00008067          	ret

80002ce8 <printsvsv>:
printsvsv():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:86

////////////////////////////////////////////////////////////
// Prints two strings and two integers interspersed
void printsvsv(char *text1, int value1, char *text2, int value2) {
80002ce8:	fe010113          	addi	sp,sp,-32
80002cec:	00112e23          	sw	ra,28(sp)
80002cf0:	00812c23          	sw	s0,24(sp)
80002cf4:	02010413          	addi	s0,sp,32
80002cf8:	fea42623          	sw	a0,-20(s0)
80002cfc:	feb42423          	sw	a1,-24(s0)
80002d00:	fec42223          	sw	a2,-28(s0)
80002d04:	fed42023          	sw	a3,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:88
    //vPortEnterCritical();
        prints(text1);
80002d08:	fec42503          	lw	a0,-20(s0)
80002d0c:	ee9ff0ef          	jal	ra,80002bf4 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:89
        printi(value1);
80002d10:	fe842503          	lw	a0,-24(s0)
80002d14:	f51ff0ef          	jal	ra,80002c64 <printi>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:90
        prints(text2);
80002d18:	fe442503          	lw	a0,-28(s0)
80002d1c:	ed9ff0ef          	jal	ra,80002bf4 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:91
        printi(value2);
80002d20:	fe042503          	lw	a0,-32(s0)
80002d24:	f41ff0ef          	jal	ra,80002c64 <printi>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:92
        prints("\n");
80002d28:	800057b7          	lui	a5,0x80005
80002d2c:	a4878513          	addi	a0,a5,-1464 # 80004a48 <__stack_top+0xfffc5858>
80002d30:	ec5ff0ef          	jal	ra,80002bf4 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:94
    //vPortExitCritical();
    return;
80002d34:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:95
}
80002d38:	01c12083          	lw	ra,28(sp)
80002d3c:	01812403          	lw	s0,24(sp)
80002d40:	02010113          	addi	sp,sp,32
80002d44:	00008067          	ret

80002d48 <getXpos>:
getXpos():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:99

////////////////////////////////////////////////////////////
// Gets the X coordinate from the address
unsigned int getXpos(unsigned int addr) { return ((addr & 0x0000FF00) >> 8); }
80002d48:	fe010113          	addi	sp,sp,-32
80002d4c:	00812e23          	sw	s0,28(sp)
80002d50:	02010413          	addi	s0,sp,32
80002d54:	fea42623          	sw	a0,-20(s0)
80002d58:	fec42783          	lw	a5,-20(s0)
80002d5c:	0087d793          	srli	a5,a5,0x8
80002d60:	0ff7f793          	andi	a5,a5,255
80002d64:	00078513          	mv	a0,a5
80002d68:	01c12403          	lw	s0,28(sp)
80002d6c:	02010113          	addi	sp,sp,32
80002d70:	00008067          	ret

80002d74 <getYpos>:
getYpos():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:103

////////////////////////////////////////////////////////////
// Gets the Y coordinate from the address
unsigned int getYpos(unsigned int addr) { return (addr & 0x000000FF); }
80002d74:	fe010113          	addi	sp,sp,-32
80002d78:	00812e23          	sw	s0,28(sp)
80002d7c:	02010413          	addi	s0,sp,32
80002d80:	fea42623          	sw	a0,-20(s0)
80002d84:	fec42783          	lw	a5,-20(s0)
80002d88:	0ff7f793          	andi	a5,a5,255
80002d8c:	00078513          	mv	a0,a5
80002d90:	01c12403          	lw	s0,28(sp)
80002d94:	02010113          	addi	sp,sp,32
80002d98:	00008067          	ret

80002d9c <SendRaw>:
SendRaw():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:107

///////////////////////////////////////////////////////////////////
// Configure the NI to transmitt a given packet
void SendRaw(unsigned int addr) {
80002d9c:	fe010113          	addi	sp,sp,-32
80002da0:	00112e23          	sw	ra,28(sp)
80002da4:	00812c23          	sw	s0,24(sp)
80002da8:	02010413          	addi	s0,sp,32
80002dac:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:108
    vPortEnterCritical();
80002db0:	f64fe0ef          	jal	ra,80001514 <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:109
        HW_set_32bit_reg(NI_ADDR, addr);
80002db4:	fec42583          	lw	a1,-20(s0)
80002db8:	500007b7          	lui	a5,0x50000
80002dbc:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
80002dc0:	898fe0ef          	jal	ra,80000e58 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:110
        HW_set_32bit_reg(NI_TX, TX);
80002dc4:	000027b7          	lui	a5,0x2
80002dc8:	22278593          	addi	a1,a5,546 # 2222 <HEAP_SIZE-0xddde>
80002dcc:	500007b7          	lui	a5,0x50000
80002dd0:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80002dd4:	884fe0ef          	jal	ra,80000e58 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:111
    vPortExitCritical();
80002dd8:	f70fe0ef          	jal	ra,80001548 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:112
    prints("Mensagem enviada!\n");
80002ddc:	800057b7          	lui	a5,0x80005
80002de0:	a4c78513          	addi	a0,a5,-1460 # 80004a4c <__stack_top+0xfffc585c>
80002de4:	e11ff0ef          	jal	ra,80002bf4 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:113
    return;
80002de8:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:114
}
80002dec:	01c12083          	lw	ra,28(sp)
80002df0:	01812403          	lw	s0,24(sp)
80002df4:	02010113          	addi	sp,sp,32
80002df8:	00008067          	ret

80002dfc <NI_enable_irq>:
NI_enable_irq():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:118

////////////////////////////////////////////////////////////
// Enables interruptions incomming from NI
void NI_enable_irq(int which){
80002dfc:	fe010113          	addi	sp,sp,-32
80002e00:	00112e23          	sw	ra,28(sp)
80002e04:	00812c23          	sw	s0,24(sp)
80002e08:	02010413          	addi	s0,sp,32
80002e0c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:119
	if (which == TX || which == TX_RX){
80002e10:	fec42703          	lw	a4,-20(s0)
80002e14:	000027b7          	lui	a5,0x2
80002e18:	22278793          	addi	a5,a5,546 # 2222 <HEAP_SIZE-0xddde>
80002e1c:	00f70a63          	beq	a4,a5,80002e30 <NI_enable_irq+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:119 (discriminator 1)
80002e20:	fec42703          	lw	a4,-20(s0)
80002e24:	000077b7          	lui	a5,0x7
80002e28:	77778793          	addi	a5,a5,1911 # 7777 <HEAP_SIZE-0x8889>
80002e2c:	00f71c63          	bne	a4,a5,80002e44 <NI_enable_irq+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:120
        PLIC_EnableIRQ(NI_TX_IRQn);
80002e30:	00100513          	li	a0,1
80002e34:	bf5ff0ef          	jal	ra,80002a28 <PLIC_EnableIRQ>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:121
        PLIC_SetPriority(NI_TX_IRQn, 1);
80002e38:	00100593          	li	a1,1
80002e3c:	00100513          	li	a0,1
80002e40:	c9dff0ef          	jal	ra,80002adc <PLIC_SetPriority>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:123
    }
    if (which == RX || which == TX_RX){
80002e44:	fec42703          	lw	a4,-20(s0)
80002e48:	000037b7          	lui	a5,0x3
80002e4c:	33378793          	addi	a5,a5,819 # 3333 <HEAP_SIZE-0xcccd>
80002e50:	00f70a63          	beq	a4,a5,80002e64 <NI_enable_irq+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:123 (discriminator 1)
80002e54:	fec42703          	lw	a4,-20(s0)
80002e58:	000077b7          	lui	a5,0x7
80002e5c:	77778793          	addi	a5,a5,1911 # 7777 <HEAP_SIZE-0x8889>
80002e60:	00f71e63          	bne	a4,a5,80002e7c <NI_enable_irq+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:124
        PLIC_EnableIRQ(NI_RX_IRQn);
80002e64:	00200513          	li	a0,2
80002e68:	bc1ff0ef          	jal	ra,80002a28 <PLIC_EnableIRQ>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:125
        PLIC_SetPriority(NI_RX_IRQn, 1);
80002e6c:	00100593          	li	a1,1
80002e70:	00200513          	li	a0,2
80002e74:	c69ff0ef          	jal	ra,80002adc <PLIC_SetPriority>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:127
    }
    return;
80002e78:	00000013          	nop
80002e7c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:128
}
80002e80:	01c12083          	lw	ra,28(sp)
80002e84:	01812403          	lw	s0,24(sp)
80002e88:	02010113          	addi	sp,sp,32
80002e8c:	00008067          	ret

80002e90 <External_1_IRQHandler>:
External_1_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:140
    return;
}

////////////////////////////////////////////////////////////
// Interruptions handler for TX
uint8_t External_1_IRQHandler(void){ 
80002e90:	ff010113          	addi	sp,sp,-16
80002e94:	00112623          	sw	ra,12(sp)
80002e98:	00812423          	sw	s0,8(sp)
80002e9c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:141
    prints("INTERRUPTION TX\n");
80002ea0:	800057b7          	lui	a5,0x80005
80002ea4:	a6078513          	addi	a0,a5,-1440 # 80004a60 <__stack_top+0xfffc5870>
80002ea8:	d4dff0ef          	jal	ra,80002bf4 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:142
    API_ClearPipeSlot(SendingSlot);
80002eac:	8001e7b7          	lui	a5,0x8001e
80002eb0:	fc87a783          	lw	a5,-56(a5) # 8001dfc8 <__stack_top+0xfffdedd8>
80002eb4:	00078513          	mv	a0,a5
80002eb8:	195000ef          	jal	ra,8000384c <API_ClearPipeSlot>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:143
    API_Try2Send();
80002ebc:	674000ef          	jal	ra,80003530 <API_Try2Send>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:145

    HW_set_32bit_reg(NI_TX, DONE);
80002ec0:	000057b7          	lui	a5,0x5
80002ec4:	55578593          	addi	a1,a5,1365 # 5555 <HEAP_SIZE-0xaaab>
80002ec8:	500007b7          	lui	a5,0x50000
80002ecc:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80002ed0:	f89fd0ef          	jal	ra,80000e58 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:146
    return 0;
80002ed4:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:147
}
80002ed8:	00078513          	mv	a0,a5
80002edc:	00c12083          	lw	ra,12(sp)
80002ee0:	00812403          	lw	s0,8(sp)
80002ee4:	01010113          	addi	sp,sp,16
80002ee8:	00008067          	ret

80002eec <External_2_IRQHandler>:
External_2_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:151

////////////////////////////////////////////////////////////
// Interruptions handler for RX
uint8_t External_2_IRQHandler(void){
80002eec:	fe010113          	addi	sp,sp,-32
80002ef0:	00112e23          	sw	ra,28(sp)
80002ef4:	00812c23          	sw	s0,24(sp)
80002ef8:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:152
    prints("==========================\n");
80002efc:	800057b7          	lui	a5,0x80005
80002f00:	a7478513          	addi	a0,a5,-1420 # 80004a74 <__stack_top+0xfffc5884>
80002f04:	cf1ff0ef          	jal	ra,80002bf4 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:153
    prints("INTERRUPTION RX\n");
80002f08:	800057b7          	lui	a5,0x80005
80002f0c:	a9078513          	addi	a0,a5,-1392 # 80004a90 <__stack_top+0xfffc58a0>
80002f10:	ce5ff0ef          	jal	ra,80002bf4 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:154
    printsv("Flit 0 : ", incommingPacket.header);
80002f14:	8001e7b7          	lui	a5,0x8001e
80002f18:	0bc7a783          	lw	a5,188(a5) # 8001e0bc <__stack_top+0xfffdeecc>
80002f1c:	00078593          	mv	a1,a5
80002f20:	800057b7          	lui	a5,0x80005
80002f24:	aa478513          	addi	a0,a5,-1372 # 80004aa4 <__stack_top+0xfffc58b4>
80002f28:	d79ff0ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:155
    printsv("Flit 1 : ", incommingPacket.payload_size);
80002f2c:	8001e7b7          	lui	a5,0x8001e
80002f30:	0bc78793          	addi	a5,a5,188 # 8001e0bc <__stack_top+0xfffdeecc>
80002f34:	0047a783          	lw	a5,4(a5)
80002f38:	00078593          	mv	a1,a5
80002f3c:	800057b7          	lui	a5,0x80005
80002f40:	ab078513          	addi	a0,a5,-1360 # 80004ab0 <__stack_top+0xfffc58c0>
80002f44:	d5dff0ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:156
    printsv("Flit 2 : ", incommingPacket.service);
80002f48:	8001e7b7          	lui	a5,0x8001e
80002f4c:	0bc78793          	addi	a5,a5,188 # 8001e0bc <__stack_top+0xfffdeecc>
80002f50:	0087a783          	lw	a5,8(a5)
80002f54:	00078593          	mv	a1,a5
80002f58:	800057b7          	lui	a5,0x80005
80002f5c:	abc78513          	addi	a0,a5,-1348 # 80004abc <__stack_top+0xfffc58cc>
80002f60:	d41ff0ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:157
    printsv("Flit 3 : ", incommingPacket.flit3);
80002f64:	8001e7b7          	lui	a5,0x8001e
80002f68:	0bc78793          	addi	a5,a5,188 # 8001e0bc <__stack_top+0xfffdeecc>
80002f6c:	00c7a783          	lw	a5,12(a5)
80002f70:	00078593          	mv	a1,a5
80002f74:	800057b7          	lui	a5,0x80005
80002f78:	ac878513          	addi	a0,a5,-1336 # 80004ac8 <__stack_top+0xfffc58d8>
80002f7c:	d25ff0ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:158
    printsv("Flit 4 : ", incommingPacket.flit4);
80002f80:	8001e7b7          	lui	a5,0x8001e
80002f84:	0bc78793          	addi	a5,a5,188 # 8001e0bc <__stack_top+0xfffdeecc>
80002f88:	0107a783          	lw	a5,16(a5)
80002f8c:	00078593          	mv	a1,a5
80002f90:	800057b7          	lui	a5,0x80005
80002f94:	ad478513          	addi	a0,a5,-1324 # 80004ad4 <__stack_top+0xfffc58e4>
80002f98:	d09ff0ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:159
    printsv("Flit 5 : ", incommingPacket.flit5);
80002f9c:	8001e7b7          	lui	a5,0x8001e
80002fa0:	0bc78793          	addi	a5,a5,188 # 8001e0bc <__stack_top+0xfffdeecc>
80002fa4:	0147a783          	lw	a5,20(a5)
80002fa8:	00078593          	mv	a1,a5
80002fac:	800057b7          	lui	a5,0x80005
80002fb0:	ae078513          	addi	a0,a5,-1312 # 80004ae0 <__stack_top+0xfffc58f0>
80002fb4:	cedff0ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:160
    printsv("Flit 6 : ", incommingPacket.flit6);
80002fb8:	8001e7b7          	lui	a5,0x8001e
80002fbc:	0bc78793          	addi	a5,a5,188 # 8001e0bc <__stack_top+0xfffdeecc>
80002fc0:	0187a783          	lw	a5,24(a5)
80002fc4:	00078593          	mv	a1,a5
80002fc8:	800057b7          	lui	a5,0x80005
80002fcc:	aec78513          	addi	a0,a5,-1300 # 80004aec <__stack_top+0xfffc58fc>
80002fd0:	cd1ff0ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:161
    printsv("Flit 7 : ", incommingPacket.flit7);
80002fd4:	8001e7b7          	lui	a5,0x8001e
80002fd8:	0bc78793          	addi	a5,a5,188 # 8001e0bc <__stack_top+0xfffdeecc>
80002fdc:	01c7a783          	lw	a5,28(a5)
80002fe0:	00078593          	mv	a1,a5
80002fe4:	800057b7          	lui	a5,0x80005
80002fe8:	af878513          	addi	a0,a5,-1288 # 80004af8 <__stack_top+0xfffc5908>
80002fec:	cb5ff0ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:162
    printsv("Flit 8 : ", incommingPacket.flit8);
80002ff0:	8001e7b7          	lui	a5,0x8001e
80002ff4:	0bc78793          	addi	a5,a5,188 # 8001e0bc <__stack_top+0xfffdeecc>
80002ff8:	0207a783          	lw	a5,32(a5)
80002ffc:	00078593          	mv	a1,a5
80003000:	800057b7          	lui	a5,0x80005
80003004:	b0478513          	addi	a0,a5,-1276 # 80004b04 <__stack_top+0xfffc5914>
80003008:	c99ff0ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:163
    printsv("Flit 9 : ", incommingPacket.flit9);
8000300c:	8001e7b7          	lui	a5,0x8001e
80003010:	0bc78793          	addi	a5,a5,188 # 8001e0bc <__stack_top+0xfffdeecc>
80003014:	0247a783          	lw	a5,36(a5)
80003018:	00078593          	mv	a1,a5
8000301c:	800057b7          	lui	a5,0x80005
80003020:	b1078513          	addi	a0,a5,-1264 # 80004b10 <__stack_top+0xfffc5920>
80003024:	c7dff0ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:164
    printsv("Flit 10: ", incommingPacket.flit10);
80003028:	8001e7b7          	lui	a5,0x8001e
8000302c:	0bc78793          	addi	a5,a5,188 # 8001e0bc <__stack_top+0xfffdeecc>
80003030:	0287a783          	lw	a5,40(a5)
80003034:	00078593          	mv	a1,a5
80003038:	800057b7          	lui	a5,0x80005
8000303c:	b1c78513          	addi	a0,a5,-1252 # 80004b1c <__stack_top+0xfffc592c>
80003040:	c61ff0ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:165
    printsv("Flit 11: ", incommingPacket.flit11);
80003044:	8001e7b7          	lui	a5,0x8001e
80003048:	0bc78793          	addi	a5,a5,188 # 8001e0bc <__stack_top+0xfffdeecc>
8000304c:	02c7a783          	lw	a5,44(a5)
80003050:	00078593          	mv	a1,a5
80003054:	800057b7          	lui	a5,0x80005
80003058:	b2878513          	addi	a0,a5,-1240 # 80004b28 <__stack_top+0xfffc5938>
8000305c:	c45ff0ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:166
    printsv("Flit 12: ", incommingPacket.flit12);
80003060:	8001e7b7          	lui	a5,0x8001e
80003064:	0bc78793          	addi	a5,a5,188 # 8001e0bc <__stack_top+0xfffdeecc>
80003068:	0307a783          	lw	a5,48(a5)
8000306c:	00078593          	mv	a1,a5
80003070:	800057b7          	lui	a5,0x80005
80003074:	b3478513          	addi	a0,a5,-1228 # 80004b34 <__stack_top+0xfffc5944>
80003078:	c29ff0ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:169


    switch (incommingPacket.service){
8000307c:	8001e7b7          	lui	a5,0x8001e
80003080:	0bc78793          	addi	a5,a5,188 # 8001e0bc <__stack_top+0xfffdeecc>
80003084:	0087a783          	lw	a5,8(a5)
80003088:	03000713          	li	a4,48
8000308c:	04e78663          	beq	a5,a4,800030d8 <External_2_IRQHandler+0x1ec>
80003090:	20000713          	li	a4,512
80003094:	08e79263          	bne	a5,a4,80003118 <External_2_IRQHandler+0x22c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:173
        unsigned int aux;

        case REPOSITORY_APP_INFO: // When the repository informs the GM that exist a new Application available:
            API_AddApplication(incommingPacket.application_id,
80003098:	8001e7b7          	lui	a5,0x8001e
8000309c:	0bc78793          	addi	a5,a5,188 # 8001e0bc <__stack_top+0xfffdeecc>
800030a0:	00c7a703          	lw	a4,12(a5)
800030a4:	8001e7b7          	lui	a5,0x8001e
800030a8:	0bc78793          	addi	a5,a5,188 # 8001e0bc <__stack_top+0xfffdeecc>
800030ac:	0107a583          	lw	a1,16(a5)
800030b0:	8001e7b7          	lui	a5,0x8001e
800030b4:	0bc78793          	addi	a5,a5,188 # 8001e0bc <__stack_top+0xfffdeecc>
800030b8:	0147a603          	lw	a2,20(a5)
800030bc:	8001e7b7          	lui	a5,0x8001e
800030c0:	0bc78793          	addi	a5,a5,188 # 8001e0bc <__stack_top+0xfffdeecc>
800030c4:	0187a783          	lw	a5,24(a5)
800030c8:	00078693          	mv	a3,a5
800030cc:	00070513          	mv	a0,a4
800030d0:	121000ef          	jal	ra,800039f0 <API_AddApplication>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:177
                               incommingPacket.aplication_period, 
                               incommingPacket.application_executions, 
                               incommingPacket.application_n_tasks);
            break;
800030d4:	0640006f          	j	80003138 <External_2_IRQHandler+0x24c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:185
            /*aux = taskAllocation(incommingPacket.task_id,
                                 incommingPacket.task_txt_size,
                                 incommingPacket.task_bss_size,
                                 incommingPacket.task_start_point,
                                 incommingPacket.task_app_id);*/
            aux = 0;
800030d8:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:186
            if(aux == ERRO){
800030dc:	fec42703          	lw	a4,-20(s0)
800030e0:	fff00793          	li	a5,-1
800030e4:	00f71e63          	bne	a4,a5,80003100 <External_2_IRQHandler+0x214>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:187
                printsv("Erro ao alocar uma task! ", aux);
800030e8:	fec42783          	lw	a5,-20(s0)
800030ec:	00078593          	mv	a1,a5
800030f0:	800057b7          	lui	a5,0x80005
800030f4:	b4078513          	addi	a0,a5,-1216 # 80004b40 <__stack_top+0xfffc5950>
800030f8:	ba9ff0ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:191
            } else {
                printsv("Tarefa alocada com sucesso! ", aux);
            }
            break;
800030fc:	03c0006f          	j	80003138 <External_2_IRQHandler+0x24c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:189
                printsv("Tarefa alocada com sucesso! ", aux);
80003100:	fec42783          	lw	a5,-20(s0)
80003104:	00078593          	mv	a1,a5
80003108:	800057b7          	lui	a5,0x80005
8000310c:	b5c78513          	addi	a0,a5,-1188 # 80004b5c <__stack_top+0xfffc596c>
80003110:	b91ff0ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:191
            break;
80003114:	0240006f          	j	80003138 <External_2_IRQHandler+0x24c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:194

        default:
            printsv("ERROR External_2_IRQHandler Unknown-Service", incommingPacket.service);
80003118:	8001e7b7          	lui	a5,0x8001e
8000311c:	0bc78793          	addi	a5,a5,188 # 8001e0bc <__stack_top+0xfffdeecc>
80003120:	0087a783          	lw	a5,8(a5)
80003124:	00078593          	mv	a1,a5
80003128:	800057b7          	lui	a5,0x80005
8000312c:	b7c78513          	addi	a0,a5,-1156 # 80004b7c <__stack_top+0xfffc598c>
80003130:	b71ff0ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:195
            break;
80003134:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:197
    }
    prints("==========================\n");
80003138:	800057b7          	lui	a5,0x80005
8000313c:	a7478513          	addi	a0,a5,-1420 # 80004a74 <__stack_top+0xfffc5884>
80003140:	ab5ff0ef          	jal	ra,80002bf4 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:198
    HW_set_32bit_reg(NI_RX, DONE);
80003144:	000057b7          	lui	a5,0x5
80003148:	55578593          	addi	a1,a5,1365 # 5555 <HEAP_SIZE-0xaaab>
8000314c:	500007b7          	lui	a5,0x50000
80003150:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80003154:	d05fd0ef          	jal	ra,80000e58 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:199
    return 0;
80003158:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:200
}
8000315c:	00078513          	mv	a0,a5
80003160:	01c12083          	lw	ra,28(sp)
80003164:	01812403          	lw	s0,24(sp)
80003168:	02010113          	addi	sp,sp,32
8000316c:	00008067          	ret

80003170 <mySwap>:
mySwap():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:205

////////////////////////////////////////////////////////////
// https://www.techiedelight.com/implement-itoa-function-in-c/
// Function to swap two numbers
void mySwap(char *x, char *y) {
80003170:	fd010113          	addi	sp,sp,-48
80003174:	02812623          	sw	s0,44(sp)
80003178:	03010413          	addi	s0,sp,48
8000317c:	fca42e23          	sw	a0,-36(s0)
80003180:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:206
    char t = *x; *x = *y; *y = t;
80003184:	fdc42783          	lw	a5,-36(s0)
80003188:	0007c783          	lbu	a5,0(a5)
8000318c:	fef407a3          	sb	a5,-17(s0)
80003190:	fd842783          	lw	a5,-40(s0)
80003194:	00078703          	lb	a4,0(a5)
80003198:	fdc42783          	lw	a5,-36(s0)
8000319c:	00e78023          	sb	a4,0(a5)
800031a0:	fd842783          	lw	a5,-40(s0)
800031a4:	fef44703          	lbu	a4,-17(s0)
800031a8:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:207
}
800031ac:	00000013          	nop
800031b0:	02c12403          	lw	s0,44(sp)
800031b4:	03010113          	addi	sp,sp,48
800031b8:	00008067          	ret

800031bc <reverse>:
reverse():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:209
// Function to reverse `buffer[i…j]`
char* reverse(char *buffer, int i, int j){
800031bc:	fe010113          	addi	sp,sp,-32
800031c0:	00112e23          	sw	ra,28(sp)
800031c4:	00812c23          	sw	s0,24(sp)
800031c8:	02010413          	addi	s0,sp,32
800031cc:	fea42623          	sw	a0,-20(s0)
800031d0:	feb42423          	sw	a1,-24(s0)
800031d4:	fec42223          	sw	a2,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:210
    while (i < j) {
800031d8:	0400006f          	j	80003218 <reverse+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:211
        mySwap(&buffer[i++], &buffer[j--]);
800031dc:	fe842783          	lw	a5,-24(s0)
800031e0:	00178713          	addi	a4,a5,1
800031e4:	fee42423          	sw	a4,-24(s0)
800031e8:	00078713          	mv	a4,a5
800031ec:	fec42783          	lw	a5,-20(s0)
800031f0:	00e786b3          	add	a3,a5,a4
800031f4:	fe442783          	lw	a5,-28(s0)
800031f8:	fff78713          	addi	a4,a5,-1
800031fc:	fee42223          	sw	a4,-28(s0)
80003200:	00078713          	mv	a4,a5
80003204:	fec42783          	lw	a5,-20(s0)
80003208:	00e787b3          	add	a5,a5,a4
8000320c:	00078593          	mv	a1,a5
80003210:	00068513          	mv	a0,a3
80003214:	f5dff0ef          	jal	ra,80003170 <mySwap>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:210
    while (i < j) {
80003218:	fe842703          	lw	a4,-24(s0)
8000321c:	fe442783          	lw	a5,-28(s0)
80003220:	faf74ee3          	blt	a4,a5,800031dc <reverse+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:214
    }
 
    return buffer;
80003224:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:215
}
80003228:	00078513          	mv	a0,a5
8000322c:	01c12083          	lw	ra,28(sp)
80003230:	01812403          	lw	s0,24(sp)
80003234:	02010113          	addi	sp,sp,32
80003238:	00008067          	ret

8000323c <myItoa>:
myItoa():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:217
// Iterative function to implement `itoa()` function in C
char* myItoa(int value, char* buffer, int base){
8000323c:	fd010113          	addi	sp,sp,-48
80003240:	02112623          	sw	ra,44(sp)
80003244:	02812423          	sw	s0,40(sp)
80003248:	03010413          	addi	s0,sp,48
8000324c:	fca42e23          	sw	a0,-36(s0)
80003250:	fcb42c23          	sw	a1,-40(s0)
80003254:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:219
    // invalid input
    if (base < 2 || base > 32) {
80003258:	fd442703          	lw	a4,-44(s0)
8000325c:	00100793          	li	a5,1
80003260:	00e7d863          	ble	a4,a5,80003270 <myItoa+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:219 (discriminator 1)
80003264:	fd442703          	lw	a4,-44(s0)
80003268:	02000793          	li	a5,32
8000326c:	00e7d663          	ble	a4,a5,80003278 <myItoa+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:220
        return buffer;
80003270:	fd842783          	lw	a5,-40(s0)
80003274:	1540006f          	j	800033c8 <myItoa+0x18c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:224
    }
    // consider the absolute value of the number
    int n;
    if (value < 0)
80003278:	fdc42783          	lw	a5,-36(s0)
8000327c:	0007da63          	bgez	a5,80003290 <myItoa+0x54>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:225
        n = value * -1;
80003280:	fdc42783          	lw	a5,-36(s0)
80003284:	40f007b3          	neg	a5,a5
80003288:	fef42623          	sw	a5,-20(s0)
8000328c:	00c0006f          	j	80003298 <myItoa+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:227
    else 
        n = value;
80003290:	fdc42783          	lw	a5,-36(s0)
80003294:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:229

    int i = 0;
80003298:	fe042423          	sw	zero,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:230
    while (n){
8000329c:	09c0006f          	j	80003338 <myItoa+0xfc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:231
        int r = n % base;
800032a0:	fec42703          	lw	a4,-20(s0)
800032a4:	fd442783          	lw	a5,-44(s0)
800032a8:	02f767b3          	rem	a5,a4,a5
800032ac:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:233
 
        if (r >= 10) {
800032b0:	fe442703          	lw	a4,-28(s0)
800032b4:	00900793          	li	a5,9
800032b8:	02e7de63          	ble	a4,a5,800032f4 <myItoa+0xb8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:234
            buffer[i++] = 65 + (r - 10);
800032bc:	fe442783          	lw	a5,-28(s0)
800032c0:	0ff7f793          	andi	a5,a5,255
800032c4:	03778793          	addi	a5,a5,55
800032c8:	0ff7f693          	andi	a3,a5,255
800032cc:	fe842783          	lw	a5,-24(s0)
800032d0:	00178713          	addi	a4,a5,1
800032d4:	fee42423          	sw	a4,-24(s0)
800032d8:	00078713          	mv	a4,a5
800032dc:	fd842783          	lw	a5,-40(s0)
800032e0:	00e787b3          	add	a5,a5,a4
800032e4:	01869713          	slli	a4,a3,0x18
800032e8:	41875713          	srai	a4,a4,0x18
800032ec:	00e78023          	sb	a4,0(a5)
800032f0:	0380006f          	j	80003328 <myItoa+0xec>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:237
        }
        else {
            buffer[i++] = 48 + r;
800032f4:	fe442783          	lw	a5,-28(s0)
800032f8:	0ff7f793          	andi	a5,a5,255
800032fc:	03078793          	addi	a5,a5,48
80003300:	0ff7f693          	andi	a3,a5,255
80003304:	fe842783          	lw	a5,-24(s0)
80003308:	00178713          	addi	a4,a5,1
8000330c:	fee42423          	sw	a4,-24(s0)
80003310:	00078713          	mv	a4,a5
80003314:	fd842783          	lw	a5,-40(s0)
80003318:	00e787b3          	add	a5,a5,a4
8000331c:	01869713          	slli	a4,a3,0x18
80003320:	41875713          	srai	a4,a4,0x18
80003324:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:240
        }
 
        n = n / base;
80003328:	fec42703          	lw	a4,-20(s0)
8000332c:	fd442783          	lw	a5,-44(s0)
80003330:	02f747b3          	div	a5,a4,a5
80003334:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:230
    while (n){
80003338:	fec42783          	lw	a5,-20(s0)
8000333c:	f60792e3          	bnez	a5,800032a0 <myItoa+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:243
    }
    // if the number is 0
    if (i == 0) {
80003340:	fe842783          	lw	a5,-24(s0)
80003344:	02079263          	bnez	a5,80003368 <myItoa+0x12c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:244
        buffer[i++] = '0';
80003348:	fe842783          	lw	a5,-24(s0)
8000334c:	00178713          	addi	a4,a5,1
80003350:	fee42423          	sw	a4,-24(s0)
80003354:	00078713          	mv	a4,a5
80003358:	fd842783          	lw	a5,-40(s0)
8000335c:	00e787b3          	add	a5,a5,a4
80003360:	03000713          	li	a4,48
80003364:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:249
    }
    // If the base is 10 and the value is negative, the resulting string
    // is preceded with a minus sign (-)
    // With any other base, value is always considered unsigned
    if (value < 0 && base == 10) {
80003368:	fdc42783          	lw	a5,-36(s0)
8000336c:	0207d863          	bgez	a5,8000339c <myItoa+0x160>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:249 (discriminator 1)
80003370:	fd442703          	lw	a4,-44(s0)
80003374:	00a00793          	li	a5,10
80003378:	02f71263          	bne	a4,a5,8000339c <myItoa+0x160>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:250
        buffer[i++] = '-';
8000337c:	fe842783          	lw	a5,-24(s0)
80003380:	00178713          	addi	a4,a5,1
80003384:	fee42423          	sw	a4,-24(s0)
80003388:	00078713          	mv	a4,a5
8000338c:	fd842783          	lw	a5,-40(s0)
80003390:	00e787b3          	add	a5,a5,a4
80003394:	02d00713          	li	a4,45
80003398:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:252
    }
    buffer[i] = '\0'; // null terminate string
8000339c:	fe842783          	lw	a5,-24(s0)
800033a0:	fd842703          	lw	a4,-40(s0)
800033a4:	00f707b3          	add	a5,a4,a5
800033a8:	00078023          	sb	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:254
    // reverse the string and return it
    return reverse(buffer, 0, i - 1);
800033ac:	fe842783          	lw	a5,-24(s0)
800033b0:	fff78793          	addi	a5,a5,-1
800033b4:	00078613          	mv	a2,a5
800033b8:	00000593          	li	a1,0
800033bc:	fd842503          	lw	a0,-40(s0)
800033c0:	dfdff0ef          	jal	ra,800031bc <reverse>
800033c4:	00050793          	mv	a5,a0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:255
}
800033c8:	00078513          	mv	a0,a5
800033cc:	02c12083          	lw	ra,44(sp)
800033d0:	02812403          	lw	s0,40(sp)
800033d4:	03010113          	addi	sp,sp,48
800033d8:	00008067          	ret

800033dc <makeAddress>:
makeAddress():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:269
    return;
}

////////////////////////////////////////////////////////////
// Returns the PE address for a giver pair of coords
unsigned int makeAddress(unsigned int x, unsigned int y) {
800033dc:	fd010113          	addi	sp,sp,-48
800033e0:	02812623          	sw	s0,44(sp)
800033e4:	03010413          	addi	s0,sp,48
800033e8:	fca42e23          	sw	a0,-36(s0)
800033ec:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:270
    unsigned int address = 0x00000000;
800033f0:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:271
    return (address | (x << 8) | y);
800033f4:	fdc42783          	lw	a5,-36(s0)
800033f8:	00879713          	slli	a4,a5,0x8
800033fc:	fec42783          	lw	a5,-20(s0)
80003400:	00f76733          	or	a4,a4,a5
80003404:	fd842783          	lw	a5,-40(s0)
80003408:	00f767b3          	or	a5,a4,a5
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:272
}
8000340c:	00078513          	mv	a0,a5
80003410:	02c12403          	lw	s0,44(sp)
80003414:	03010113          	addi	sp,sp,48
80003418:	00008067          	ret

8000341c <API_PushSendQueue>:
API_PushSendQueue():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:276

////////////////////////////////////////////////////////////
// Pushes one slot to the sending queue
void API_PushSendQueue(unsigned int type, unsigned int slot){
8000341c:	fe010113          	addi	sp,sp,-32
80003420:	00112e23          	sw	ra,28(sp)
80003424:	00812c23          	sw	s0,24(sp)
80003428:	02010413          	addi	s0,sp,32
8000342c:	fea42623          	sw	a0,-20(s0)
80003430:	feb42423          	sw	a1,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:277
    SendingQueue[SendingQueue_front] = type | slot;
80003434:	8001e7b7          	lui	a5,0x8001e
80003438:	1147a683          	lw	a3,276(a5) # 8001e114 <__stack_top+0xfffdef24>
8000343c:	fec42703          	lw	a4,-20(s0)
80003440:	fe842783          	lw	a5,-24(s0)
80003444:	00f76733          	or	a4,a4,a5
80003448:	8001e7b7          	lui	a5,0x8001e
8000344c:	00269693          	slli	a3,a3,0x2
80003450:	0f078793          	addi	a5,a5,240 # 8001e0f0 <__stack_top+0xfffdef00>
80003454:	00f687b3          	add	a5,a3,a5
80003458:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:278
    if(SendingQueue_front == (PIPE_SIZE*2)-1){
8000345c:	8001e7b7          	lui	a5,0x8001e
80003460:	1147a703          	lw	a4,276(a5) # 8001e114 <__stack_top+0xfffdef24>
80003464:	00700793          	li	a5,7
80003468:	00f71863          	bne	a4,a5,80003478 <API_PushSendQueue+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:279
        SendingQueue_front = 0;
8000346c:	8001e7b7          	lui	a5,0x8001e
80003470:	1007aa23          	sw	zero,276(a5) # 8001e114 <__stack_top+0xfffdef24>
80003474:	0180006f          	j	8000348c <API_PushSendQueue+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:281
    } else {
        SendingQueue_front++;
80003478:	8001e7b7          	lui	a5,0x8001e
8000347c:	1147a783          	lw	a5,276(a5) # 8001e114 <__stack_top+0xfffdef24>
80003480:	00178713          	addi	a4,a5,1
80003484:	8001e7b7          	lui	a5,0x8001e
80003488:	10e7aa23          	sw	a4,276(a5) # 8001e114 <__stack_top+0xfffdef24>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:283
    }
    API_Try2Send();
8000348c:	0a4000ef          	jal	ra,80003530 <API_Try2Send>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:284
    return;
80003490:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:285
}
80003494:	01c12083          	lw	ra,28(sp)
80003498:	01812403          	lw	s0,24(sp)
8000349c:	02010113          	addi	sp,sp,32
800034a0:	00008067          	ret

800034a4 <API_PopSendQueue>:
API_PopSendQueue():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:289

////////////////////////////////////////////////////////////
// Pushes one slot to the sending queue
unsigned int API_PopSendQueue(){
800034a4:	fe010113          	addi	sp,sp,-32
800034a8:	00812e23          	sw	s0,28(sp)
800034ac:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:291
    unsigned int element;
    if (SendingQueue_front == SendingQueue_tail){
800034b0:	8001e7b7          	lui	a5,0x8001e
800034b4:	1147a703          	lw	a4,276(a5) # 8001e114 <__stack_top+0xfffdef24>
800034b8:	8001e7b7          	lui	a5,0x8001e
800034bc:	1107a783          	lw	a5,272(a5) # 8001e110 <__stack_top+0xfffdef20>
800034c0:	00f71663          	bne	a4,a5,800034cc <API_PopSendQueue+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:292
        return EMPTY;
800034c4:	303007b7          	lui	a5,0x30300
800034c8:	0580006f          	j	80003520 <API_PopSendQueue+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:294
    } else {
        element = SendingQueue[SendingQueue_tail];
800034cc:	8001e7b7          	lui	a5,0x8001e
800034d0:	1107a703          	lw	a4,272(a5) # 8001e110 <__stack_top+0xfffdef20>
800034d4:	8001e7b7          	lui	a5,0x8001e
800034d8:	00271713          	slli	a4,a4,0x2
800034dc:	0f078793          	addi	a5,a5,240 # 8001e0f0 <__stack_top+0xfffdef00>
800034e0:	00f707b3          	add	a5,a4,a5
800034e4:	0007a783          	lw	a5,0(a5)
800034e8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:295
        if (SendingQueue_tail == (PIPE_SIZE*2)-1){
800034ec:	8001e7b7          	lui	a5,0x8001e
800034f0:	1107a703          	lw	a4,272(a5) # 8001e110 <__stack_top+0xfffdef20>
800034f4:	00700793          	li	a5,7
800034f8:	00f71863          	bne	a4,a5,80003508 <API_PopSendQueue+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:296
            SendingQueue_tail = 0;
800034fc:	8001e7b7          	lui	a5,0x8001e
80003500:	1007a823          	sw	zero,272(a5) # 8001e110 <__stack_top+0xfffdef20>
80003504:	0180006f          	j	8000351c <API_PopSendQueue+0x78>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:298
        } else {
            SendingQueue_tail++;
80003508:	8001e7b7          	lui	a5,0x8001e
8000350c:	1107a783          	lw	a5,272(a5) # 8001e110 <__stack_top+0xfffdef20>
80003510:	00178713          	addi	a4,a5,1
80003514:	8001e7b7          	lui	a5,0x8001e
80003518:	10e7a823          	sw	a4,272(a5) # 8001e110 <__stack_top+0xfffdef20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:300
        }
        return element;
8000351c:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:302
    }
}
80003520:	00078513          	mv	a0,a5
80003524:	01c12403          	lw	s0,28(sp)
80003528:	02010113          	addi	sp,sp,32
8000352c:	00008067          	ret

80003530 <API_Try2Send>:
API_Try2Send():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:306

////////////////////////////////////////////////////////////
// Try to send some packet! 
void API_Try2Send(){
80003530:	fe010113          	addi	sp,sp,-32
80003534:	00112e23          	sw	ra,28(sp)
80003538:	00812c23          	sw	s0,24(sp)
8000353c:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:310
    unsigned int toSend;
    //prints("API_Try2Send\n");
    // Try to send the packet to NI if it's available
    vPortEnterCritical();
80003540:	fd5fd0ef          	jal	ra,80001514 <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:312
        // Checks if the NI is available to transmitt something
        if (HW_get_32bit_reg(NI_TX) == NI_STATUS_OFF){
80003544:	500007b7          	lui	a5,0x50000
80003548:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
8000354c:	915fd0ef          	jal	ra,80000e60 <HW_get_32bit_reg>
80003550:	00050713          	mv	a4,a0
80003554:	0ff00793          	li	a5,255
80003558:	0cf71063          	bne	a4,a5,80003618 <API_Try2Send+0xe8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:313
            toSend = API_PopSendQueue();
8000355c:	f49ff0ef          	jal	ra,800034a4 <API_PopSendQueue>
80003560:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:315
            //printsv("toSend ", toSend);
            if (toSend != EMPTY){
80003564:	fec42703          	lw	a4,-20(s0)
80003568:	303007b7          	lui	a5,0x30300
8000356c:	0af70663          	beq	a4,a5,80003618 <API_Try2Send+0xe8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:316
                if((toSend & 0xFFFF0000) ==  SERVICE){
80003570:	fec42703          	lw	a4,-20(s0)
80003574:	ffff07b7          	lui	a5,0xffff0
80003578:	00f77733          	and	a4,a4,a5
8000357c:	101007b7          	lui	a5,0x10100
80003580:	04f71063          	bne	a4,a5,800035c0 <API_Try2Send+0x90>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:317
                    SendRaw((unsigned int)&ServicePipe[toSend & 0x0000FFFF].header);
80003584:	fec42703          	lw	a4,-20(s0)
80003588:	000107b7          	lui	a5,0x10
8000358c:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80003590:	00f77733          	and	a4,a4,a5
80003594:	00070793          	mv	a5,a4
80003598:	00479793          	slli	a5,a5,0x4
8000359c:	40e787b3          	sub	a5,a5,a4
800035a0:	00279793          	slli	a5,a5,0x2
800035a4:	8001e737          	lui	a4,0x8001e
800035a8:	fcc70713          	addi	a4,a4,-52 # 8001dfcc <__stack_top+0xfffdeddc>
800035ac:	00e787b3          	add	a5,a5,a4
800035b0:	00878793          	addi	a5,a5,8
800035b4:	00078513          	mv	a0,a5
800035b8:	fe4ff0ef          	jal	ra,80002d9c <SendRaw>
800035bc:	0500006f          	j	8000360c <API_Try2Send+0xdc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:319
                }
                else if((toSend & 0xFFFF0000) ==  MESSAGE){
800035c0:	fec42703          	lw	a4,-20(s0)
800035c4:	ffff07b7          	lui	a5,0xffff0
800035c8:	00f77733          	and	a4,a4,a5
800035cc:	202007b7          	lui	a5,0x20200
800035d0:	02f71e63          	bne	a4,a5,8000360c <API_Try2Send+0xdc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:320
                    SendRaw((unsigned int)&MessagePipe[toSend & 0x0000FFFF].header);
800035d4:	fec42703          	lw	a4,-20(s0)
800035d8:	000107b7          	lui	a5,0x10
800035dc:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
800035e0:	00f77733          	and	a4,a4,a5
800035e4:	00070793          	mv	a5,a4
800035e8:	00379793          	slli	a5,a5,0x3
800035ec:	00e787b3          	add	a5,a5,a4
800035f0:	00679793          	slli	a5,a5,0x6
800035f4:	8001e737          	lui	a4,0x8001e
800035f8:	11870713          	addi	a4,a4,280 # 8001e118 <__stack_top+0xfffdef28>
800035fc:	00e787b3          	add	a5,a5,a4
80003600:	00878793          	addi	a5,a5,8
80003604:	00078513          	mv	a0,a5
80003608:	f94ff0ef          	jal	ra,80002d9c <SendRaw>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:322
                }
                SendingSlot = toSend;
8000360c:	8001e7b7          	lui	a5,0x8001e
80003610:	fec42703          	lw	a4,-20(s0)
80003614:	fce7a423          	sw	a4,-56(a5) # 8001dfc8 <__stack_top+0xfffdedd8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:325
            }
        } 
    vPortExitCritical();
80003618:	f31fd0ef          	jal	ra,80001548 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:326
    return;
8000361c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:327
}
80003620:	01c12083          	lw	ra,28(sp)
80003624:	01812403          	lw	s0,24(sp)
80003628:	02010113          	addi	sp,sp,32
8000362c:	00008067          	ret

80003630 <API_TaskListInit>:
API_TaskListInit():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:13
#include "chronos.h"

// Stores information about each running task
extern Task TaskList[ MAX_LOCAL_TASKS ];

void API_TaskListInit(){
80003630:	fe010113          	addi	sp,sp,-32
80003634:	00812e23          	sw	s0,28(sp)
80003638:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:15
    unsigned int i;
    for (i = 0; i < MAX_LOCAL_TASKS; i++){
8000363c:	fe042623          	sw	zero,-20(s0)
80003640:	0c40006f          	j	80003704 <API_TaskListInit+0xd4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:16 (discriminator 3)
        TaskList[ i ].TaskID = (unsigned int)NULL;
80003644:	8001f6b7          	lui	a3,0x8001f
80003648:	fec42703          	lw	a4,-20(s0)
8000364c:	00070793          	mv	a5,a4
80003650:	00279793          	slli	a5,a5,0x2
80003654:	00e787b3          	add	a5,a5,a4
80003658:	00279793          	slli	a5,a5,0x2
8000365c:	11c68713          	addi	a4,a3,284 # 8001f11c <__stack_top+0xfffdff2c>
80003660:	00e787b3          	add	a5,a5,a4
80003664:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:17 (discriminator 3)
        TaskList[ i ].AppID = (unsigned int)NULL;
80003668:	8001f7b7          	lui	a5,0x8001f
8000366c:	fec42703          	lw	a4,-20(s0)
80003670:	11c78693          	addi	a3,a5,284 # 8001f11c <__stack_top+0xfffdff2c>
80003674:	00070793          	mv	a5,a4
80003678:	00279793          	slli	a5,a5,0x2
8000367c:	00e787b3          	add	a5,a5,a4
80003680:	00279793          	slli	a5,a5,0x2
80003684:	00f687b3          	add	a5,a3,a5
80003688:	0007a223          	sw	zero,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:18 (discriminator 3)
        TaskList[ i ].TaskHandler = NULL;
8000368c:	8001f7b7          	lui	a5,0x8001f
80003690:	fec42703          	lw	a4,-20(s0)
80003694:	11c78693          	addi	a3,a5,284 # 8001f11c <__stack_top+0xfffdff2c>
80003698:	00070793          	mv	a5,a4
8000369c:	00279793          	slli	a5,a5,0x2
800036a0:	00e787b3          	add	a5,a5,a4
800036a4:	00279793          	slli	a5,a5,0x2
800036a8:	00f687b3          	add	a5,a3,a5
800036ac:	0007a423          	sw	zero,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:19 (discriminator 3)
        TaskList[ i ].MsgToReceive = NULL;
800036b0:	8001f6b7          	lui	a3,0x8001f
800036b4:	fec42703          	lw	a4,-20(s0)
800036b8:	00070793          	mv	a5,a4
800036bc:	00279793          	slli	a5,a5,0x2
800036c0:	00e787b3          	add	a5,a5,a4
800036c4:	00279793          	slli	a5,a5,0x2
800036c8:	11c68713          	addi	a4,a3,284 # 8001f11c <__stack_top+0xfffdff2c>
800036cc:	00e787b3          	add	a5,a5,a4
800036d0:	0007a823          	sw	zero,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:20 (discriminator 3)
        TaskList[ i ].waitingMsg = FALSE;
800036d4:	8001f7b7          	lui	a5,0x8001f
800036d8:	fec42703          	lw	a4,-20(s0)
800036dc:	11c78693          	addi	a3,a5,284 # 8001f11c <__stack_top+0xfffdff2c>
800036e0:	00070793          	mv	a5,a4
800036e4:	00279793          	slli	a5,a5,0x2
800036e8:	00e787b3          	add	a5,a5,a4
800036ec:	00279793          	slli	a5,a5,0x2
800036f0:	00f687b3          	add	a5,a3,a5
800036f4:	0007a623          	sw	zero,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 3)
    for (i = 0; i < MAX_LOCAL_TASKS; i++){
800036f8:	fec42783          	lw	a5,-20(s0)
800036fc:	00178793          	addi	a5,a5,1
80003700:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 1)
80003704:	fec42703          	lw	a4,-20(s0)
80003708:	00900793          	li	a5,9
8000370c:	f2e7fce3          	bleu	a4,a5,80003644 <API_TaskListInit+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:22
    }
    return;
80003710:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:23
}
80003714:	01c12403          	lw	s0,28(sp)
80003718:	02010113          	addi	sp,sp,32
8000371c:	00008067          	ret

80003720 <API_PipeInitialization>:
API_PipeInitialization():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:10
extern volatile MessagePacket MessagePipe[PIPE_SIZE];
extern volatile ServicePacket ServicePipe[PIPE_SIZE];

////////////////////////////////////////////////////////////
// Initialize the PIPE, setting the status of each slot to FREE
void API_PipeInitialization(){
80003720:	fe010113          	addi	sp,sp,-32
80003724:	00812e23          	sw	s0,28(sp)
80003728:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:12
    int i;
    for( i = 0; i < PIPE_SIZE; i++ ){
8000372c:	fe042623          	sw	zero,-20(s0)
80003730:	0600006f          	j	80003790 <API_PipeInitialization+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:13 (discriminator 3)
        MessagePipe[i].status = PIPE_FREE;
80003734:	8001e6b7          	lui	a3,0x8001e
80003738:	fec42703          	lw	a4,-20(s0)
8000373c:	00070793          	mv	a5,a4
80003740:	00379793          	slli	a5,a5,0x3
80003744:	00e787b3          	add	a5,a5,a4
80003748:	00679793          	slli	a5,a5,0x6
8000374c:	11868713          	addi	a4,a3,280 # 8001e118 <__stack_top+0xfffdef28>
80003750:	00e787b3          	add	a5,a5,a4
80003754:	fff00713          	li	a4,-1
80003758:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:14 (discriminator 3)
        ServicePipe[i].status = PIPE_FREE;
8000375c:	8001e6b7          	lui	a3,0x8001e
80003760:	fec42703          	lw	a4,-20(s0)
80003764:	00070793          	mv	a5,a4
80003768:	00479793          	slli	a5,a5,0x4
8000376c:	40e787b3          	sub	a5,a5,a4
80003770:	00279793          	slli	a5,a5,0x2
80003774:	fcc68713          	addi	a4,a3,-52 # 8001dfcc <__stack_top+0xfffdeddc>
80003778:	00e787b3          	add	a5,a5,a4
8000377c:	fff00713          	li	a4,-1
80003780:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:12 (discriminator 3)
    for( i = 0; i < PIPE_SIZE; i++ ){
80003784:	fec42783          	lw	a5,-20(s0)
80003788:	00178793          	addi	a5,a5,1
8000378c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:12 (discriminator 1)
80003790:	fec42703          	lw	a4,-20(s0)
80003794:	00300793          	li	a5,3
80003798:	f8e7dee3          	ble	a4,a5,80003734 <API_PipeInitialization+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:16
    }
    return;
8000379c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:17
}
800037a0:	01c12403          	lw	s0,28(sp)
800037a4:	02010113          	addi	sp,sp,32
800037a8:	00008067          	ret

800037ac <API_GetServiceSlot>:
API_GetServiceSlot():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:34
    return PIPE_FULL;
}

////////////////////////////////////////////////////////////
// Returns a free Service slot
unsigned int API_GetServiceSlot(){
800037ac:	fe010113          	addi	sp,sp,-32
800037b0:	00812e23          	sw	s0,28(sp)
800037b4:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:36
    int i;
    for( i = 0; i < PIPE_SIZE; i++ ){
800037b8:	fe042623          	sw	zero,-20(s0)
800037bc:	06c0006f          	j	80003828 <API_GetServiceSlot+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:37
        if (ServicePipe[i].status == PIPE_FREE){
800037c0:	8001e6b7          	lui	a3,0x8001e
800037c4:	fec42703          	lw	a4,-20(s0)
800037c8:	00070793          	mv	a5,a4
800037cc:	00479793          	slli	a5,a5,0x4
800037d0:	40e787b3          	sub	a5,a5,a4
800037d4:	00279793          	slli	a5,a5,0x2
800037d8:	fcc68713          	addi	a4,a3,-52 # 8001dfcc <__stack_top+0xfffdeddc>
800037dc:	00e787b3          	add	a5,a5,a4
800037e0:	0007a703          	lw	a4,0(a5)
800037e4:	fff00793          	li	a5,-1
800037e8:	02f71a63          	bne	a4,a5,8000381c <API_GetServiceSlot+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:38
            ServicePipe[i].status = PIPE_OCCUPIED;
800037ec:	8001e6b7          	lui	a3,0x8001e
800037f0:	fec42703          	lw	a4,-20(s0)
800037f4:	00070793          	mv	a5,a4
800037f8:	00479793          	slli	a5,a5,0x4
800037fc:	40e787b3          	sub	a5,a5,a4
80003800:	00279793          	slli	a5,a5,0x2
80003804:	fcc68713          	addi	a4,a3,-52 # 8001dfcc <__stack_top+0xfffdeddc>
80003808:	00e787b3          	add	a5,a5,a4
8000380c:	00100713          	li	a4,1
80003810:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:39
            return i;
80003814:	fec42783          	lw	a5,-20(s0)
80003818:	0240006f          	j	8000383c <API_GetServiceSlot+0x90>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:36 (discriminator 2)
    for( i = 0; i < PIPE_SIZE; i++ ){
8000381c:	fec42783          	lw	a5,-20(s0)
80003820:	00178793          	addi	a5,a5,1
80003824:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:36 (discriminator 1)
80003828:	fec42703          	lw	a4,-20(s0)
8000382c:	00300793          	li	a5,3
80003830:	f8e7d8e3          	ble	a4,a5,800037c0 <API_GetServiceSlot+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:42
        }
    }
    return PIPE_FULL;
80003834:	fdfe07b7          	lui	a5,0xfdfe0
80003838:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7dfa0c0d>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:43
}
8000383c:	00078513          	mv	a0,a5
80003840:	01c12403          	lw	s0,28(sp)
80003844:	02010113          	addi	sp,sp,32
80003848:	00008067          	ret

8000384c <API_ClearPipeSlot>:
API_ClearPipeSlot():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:47

////////////////////////////////////////////////////////////
// Clear one PipeSlot after send it
void API_ClearPipeSlot(unsigned int typeSlot){
8000384c:	fd010113          	addi	sp,sp,-48
80003850:	02812623          	sw	s0,44(sp)
80003854:	03010413          	addi	s0,sp,48
80003858:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:48
    unsigned type = typeSlot & 0xFFFF0000;
8000385c:	fdc42703          	lw	a4,-36(s0)
80003860:	ffff07b7          	lui	a5,0xffff0
80003864:	00f777b3          	and	a5,a4,a5
80003868:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:49
    unsigned slot = typeSlot & 0x0000FFFF;
8000386c:	fdc42703          	lw	a4,-36(s0)
80003870:	000107b7          	lui	a5,0x10
80003874:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80003878:	00f777b3          	and	a5,a4,a5
8000387c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:50
    if (type == SERVICE){
80003880:	fec42703          	lw	a4,-20(s0)
80003884:	101007b7          	lui	a5,0x10100
80003888:	02f71863          	bne	a4,a5,800038b8 <API_ClearPipeSlot+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:51
        ServicePipe[slot].status = PIPE_FREE;
8000388c:	8001e6b7          	lui	a3,0x8001e
80003890:	fe842703          	lw	a4,-24(s0)
80003894:	00070793          	mv	a5,a4
80003898:	00479793          	slli	a5,a5,0x4
8000389c:	40e787b3          	sub	a5,a5,a4
800038a0:	00279793          	slli	a5,a5,0x2
800038a4:	fcc68713          	addi	a4,a3,-52 # 8001dfcc <__stack_top+0xfffdeddc>
800038a8:	00e787b3          	add	a5,a5,a4
800038ac:	fff00713          	li	a4,-1
800038b0:	00e7a023          	sw	a4,0(a5) # 10100000 <RAM_SIZE+0x10080000>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:55
    } else { // type == MESSAGE
        MessagePipe[slot].status = PIPE_FREE;
    }
    return;
800038b4:	0300006f          	j	800038e4 <API_ClearPipeSlot+0x98>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:53
        MessagePipe[slot].status = PIPE_FREE;
800038b8:	8001e6b7          	lui	a3,0x8001e
800038bc:	fe842703          	lw	a4,-24(s0)
800038c0:	00070793          	mv	a5,a4
800038c4:	00379793          	slli	a5,a5,0x3
800038c8:	00e787b3          	add	a5,a5,a4
800038cc:	00679793          	slli	a5,a5,0x6
800038d0:	11868713          	addi	a4,a3,280 # 8001e118 <__stack_top+0xfffdef28>
800038d4:	00e787b3          	add	a5,a5,a4
800038d8:	fff00713          	li	a4,-1
800038dc:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:55
    return;
800038e0:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:56
}
800038e4:	02c12403          	lw	s0,44(sp)
800038e8:	03010113          	addi	sp,sp,48
800038ec:	00008067          	ret

800038f0 <API_RepositoryWakeUp>:
API_RepositoryWakeUp():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:10
#include "packet.h"
#include "services.h"

////////////////////////////////////////////////////////////
// Informs the Repository that the GLOBALMASTER is ready to receive the application info
void API_RepositoryWakeUp(){
800038f0:	fe010113          	addi	sp,sp,-32
800038f4:	00112e23          	sw	ra,28(sp)
800038f8:	00812c23          	sw	s0,24(sp)
800038fc:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:13 (discriminator 1)
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80003900:	eadff0ef          	jal	ra,800037ac <API_GetServiceSlot>
80003904:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:15 (discriminator 1)
        //vTaskDelay(1);
    }while(mySlot == PIPE_FULL);
80003908:	fec42703          	lw	a4,-20(s0)
8000390c:	fdfe07b7          	lui	a5,0xfdfe0
80003910:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7dfa0c0d>
80003914:	fef706e3          	beq	a4,a5,80003900 <API_RepositoryWakeUp+0x10>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:18
    //printsv("I got a free service slot!! -> ", mySlot);

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80003918:	8001e7b7          	lui	a5,0x8001e
8000391c:	fec42703          	lw	a4,-20(s0)
80003920:	fcc78693          	addi	a3,a5,-52 # 8001dfcc <__stack_top+0xfffdeddc>
80003924:	00070793          	mv	a5,a4
80003928:	00479793          	slli	a5,a5,0x4
8000392c:	40e787b3          	sub	a5,a5,a4
80003930:	00279793          	slli	a5,a5,0x2
80003934:	00f687b3          	add	a5,a3,a5
80003938:	feff0737          	lui	a4,0xfeff0
8000393c:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efb0d0e>
80003940:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:20

    ServicePipe[mySlot].header.header       = makeAddress(0, 0) | PERIPH_SOUTH;
80003944:	00000593          	li	a1,0
80003948:	00000513          	li	a0,0
8000394c:	a91ff0ef          	jal	ra,800033dc <makeAddress>
80003950:	00050713          	mv	a4,a0
80003954:	000407b7          	lui	a5,0x40
80003958:	00f766b3          	or	a3,a4,a5
8000395c:	8001e7b7          	lui	a5,0x8001e
80003960:	fec42703          	lw	a4,-20(s0)
80003964:	fcc78613          	addi	a2,a5,-52 # 8001dfcc <__stack_top+0xfffdeddc>
80003968:	00070793          	mv	a5,a4
8000396c:	00479793          	slli	a5,a5,0x4
80003970:	40e787b3          	sub	a5,a5,a4
80003974:	00279793          	slli	a5,a5,0x2
80003978:	00f607b3          	add	a5,a2,a5
8000397c:	00d7a423          	sw	a3,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:21
    ServicePipe[mySlot].header.payload_size = PKT_SERVICE_SIZE;
80003980:	8001e7b7          	lui	a5,0x8001e
80003984:	fec42703          	lw	a4,-20(s0)
80003988:	fcc78693          	addi	a3,a5,-52 # 8001dfcc <__stack_top+0xfffdeddc>
8000398c:	00070793          	mv	a5,a4
80003990:	00479793          	slli	a5,a5,0x4
80003994:	40e787b3          	sub	a5,a5,a4
80003998:	00279793          	slli	a5,a5,0x2
8000399c:	00f687b3          	add	a5,a3,a5
800039a0:	00b00713          	li	a4,11
800039a4:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:22
    ServicePipe[mySlot].header.service      = REPOSITORY_WAKEUP;
800039a8:	8001e7b7          	lui	a5,0x8001e
800039ac:	fec42703          	lw	a4,-20(s0)
800039b0:	fcc78693          	addi	a3,a5,-52 # 8001dfcc <__stack_top+0xfffdeddc>
800039b4:	00070793          	mv	a5,a4
800039b8:	00479793          	slli	a5,a5,0x4
800039bc:	40e787b3          	sub	a5,a5,a4
800039c0:	00279793          	slli	a5,a5,0x2
800039c4:	00f687b3          	add	a5,a3,a5
800039c8:	10000713          	li	a4,256
800039cc:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:24

    API_PushSendQueue(SERVICE, mySlot);
800039d0:	fec42583          	lw	a1,-20(s0)
800039d4:	10100537          	lui	a0,0x10100
800039d8:	a45ff0ef          	jal	ra,8000341c <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:25
    return;    
800039dc:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:26
}
800039e0:	01c12083          	lw	ra,28(sp)
800039e4:	01812403          	lw	s0,24(sp)
800039e8:	02010113          	addi	sp,sp,32
800039ec:	00008067          	ret

800039f0 <API_AddApplication>:
API_AddApplication():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:30

////////////////////////////////////////////////////////////
// Add one Application in the Execution Queue
void API_AddApplication(unsigned int appID, unsigned int appPeriod, unsigned int appExec, unsigned int appNTasks){
800039f0:	fd010113          	addi	sp,sp,-48
800039f4:	02112623          	sw	ra,44(sp)
800039f8:	02812423          	sw	s0,40(sp)
800039fc:	03010413          	addi	s0,sp,48
80003a00:	fca42e23          	sw	a0,-36(s0)
80003a04:	fcb42c23          	sw	a1,-40(s0)
80003a08:	fcc42a23          	sw	a2,-44(s0)
80003a0c:	fcd42823          	sw	a3,-48(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:31
    int slot = API_GetApplicationFreeSlot();
80003a10:	1c4000ef          	jal	ra,80003bd4 <API_GetApplicationFreeSlot>
80003a14:	00050793          	mv	a5,a0
80003a18:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:32
    applications[slot].occupied = TRUE;
80003a1c:	8001f6b7          	lui	a3,0x8001f
80003a20:	fec42703          	lw	a4,-20(s0)
80003a24:	00070793          	mv	a5,a4
80003a28:	00279793          	slli	a5,a5,0x2
80003a2c:	00e787b3          	add	a5,a5,a4
80003a30:	00579793          	slli	a5,a5,0x5
80003a34:	a4068713          	addi	a4,a3,-1472 # 8001ea40 <__stack_top+0xfffdf850>
80003a38:	00e787b3          	add	a5,a5,a4
80003a3c:	00100713          	li	a4,1
80003a40:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:33
    applications[slot].appID = appID;
80003a44:	8001f7b7          	lui	a5,0x8001f
80003a48:	fec42703          	lw	a4,-20(s0)
80003a4c:	a4078693          	addi	a3,a5,-1472 # 8001ea40 <__stack_top+0xfffdf850>
80003a50:	00070793          	mv	a5,a4
80003a54:	00279793          	slli	a5,a5,0x2
80003a58:	00e787b3          	add	a5,a5,a4
80003a5c:	00579793          	slli	a5,a5,0x5
80003a60:	00f687b3          	add	a5,a3,a5
80003a64:	fdc42703          	lw	a4,-36(s0)
80003a68:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:34
    applications[slot].appPeriod = appPeriod;
80003a6c:	8001f7b7          	lui	a5,0x8001f
80003a70:	fec42703          	lw	a4,-20(s0)
80003a74:	a4078693          	addi	a3,a5,-1472 # 8001ea40 <__stack_top+0xfffdf850>
80003a78:	00070793          	mv	a5,a4
80003a7c:	00279793          	slli	a5,a5,0x2
80003a80:	00e787b3          	add	a5,a5,a4
80003a84:	00579793          	slli	a5,a5,0x5
80003a88:	00f687b3          	add	a5,a3,a5
80003a8c:	fd842703          	lw	a4,-40(s0)
80003a90:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:35
    applications[slot].appExec = appExec;
80003a94:	8001f7b7          	lui	a5,0x8001f
80003a98:	fec42703          	lw	a4,-20(s0)
80003a9c:	a4078693          	addi	a3,a5,-1472 # 8001ea40 <__stack_top+0xfffdf850>
80003aa0:	00070793          	mv	a5,a4
80003aa4:	00279793          	slli	a5,a5,0x2
80003aa8:	00e787b3          	add	a5,a5,a4
80003aac:	00579793          	slli	a5,a5,0x5
80003ab0:	00f687b3          	add	a5,a3,a5
80003ab4:	fd442703          	lw	a4,-44(s0)
80003ab8:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:36
    applications[slot].numTasks = appNTasks;
80003abc:	8001f6b7          	lui	a3,0x8001f
80003ac0:	fec42703          	lw	a4,-20(s0)
80003ac4:	00070793          	mv	a5,a4
80003ac8:	00279793          	slli	a5,a5,0x2
80003acc:	00e787b3          	add	a5,a5,a4
80003ad0:	00579793          	slli	a5,a5,0x5
80003ad4:	a4068713          	addi	a4,a3,-1472 # 8001ea40 <__stack_top+0xfffdf850>
80003ad8:	00e787b3          	add	a5,a5,a4
80003adc:	fd042703          	lw	a4,-48(s0)
80003ae0:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:37
    applications[slot].nextRun = xTaskGetTickCount() + appPeriod;
80003ae4:	f80fe0ef          	jal	ra,80002264 <xTaskGetTickCount>
80003ae8:	00050713          	mv	a4,a0
80003aec:	fd842783          	lw	a5,-40(s0)
80003af0:	00f706b3          	add	a3,a4,a5
80003af4:	8001f7b7          	lui	a5,0x8001f
80003af8:	fec42703          	lw	a4,-20(s0)
80003afc:	a4078613          	addi	a2,a5,-1472 # 8001ea40 <__stack_top+0xfffdf850>
80003b00:	00070793          	mv	a5,a4
80003b04:	00279793          	slli	a5,a5,0x2
80003b08:	00e787b3          	add	a5,a5,a4
80003b0c:	00579793          	slli	a5,a5,0x5
80003b10:	00f607b3          	add	a5,a2,a5
80003b14:	08d7a623          	sw	a3,140(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:38
    applications[slot].executed = 0;
80003b18:	8001f6b7          	lui	a3,0x8001f
80003b1c:	fec42703          	lw	a4,-20(s0)
80003b20:	00070793          	mv	a5,a4
80003b24:	00279793          	slli	a5,a5,0x2
80003b28:	00e787b3          	add	a5,a5,a4
80003b2c:	00579793          	slli	a5,a5,0x5
80003b30:	a4068713          	addi	a4,a3,-1472 # 8001ea40 <__stack_top+0xfffdf850>
80003b34:	00e787b3          	add	a5,a5,a4
80003b38:	0807a823          	sw	zero,144(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:39
    applications[slot].lastStart = -1;
80003b3c:	8001f7b7          	lui	a5,0x8001f
80003b40:	fec42703          	lw	a4,-20(s0)
80003b44:	a4078693          	addi	a3,a5,-1472 # 8001ea40 <__stack_top+0xfffdf850>
80003b48:	00070793          	mv	a5,a4
80003b4c:	00279793          	slli	a5,a5,0x2
80003b50:	00e787b3          	add	a5,a5,a4
80003b54:	00579793          	slli	a5,a5,0x5
80003b58:	00f687b3          	add	a5,a3,a5
80003b5c:	fff00713          	li	a4,-1
80003b60:	08e7aa23          	sw	a4,148(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:40
    applications[slot].finishedTasks = 0;
80003b64:	8001f7b7          	lui	a5,0x8001f
80003b68:	fec42703          	lw	a4,-20(s0)
80003b6c:	a4078693          	addi	a3,a5,-1472 # 8001ea40 <__stack_top+0xfffdf850>
80003b70:	00070793          	mv	a5,a4
80003b74:	00279793          	slli	a5,a5,0x2
80003b78:	00e787b3          	add	a5,a5,a4
80003b7c:	00579793          	slli	a5,a5,0x5
80003b80:	00f687b3          	add	a5,a3,a5
80003b84:	0807ac23          	sw	zero,152(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:41
    applications[slot].lastFinish = 0;
80003b88:	8001f7b7          	lui	a5,0x8001f
80003b8c:	fec42703          	lw	a4,-20(s0)
80003b90:	a4078693          	addi	a3,a5,-1472 # 8001ea40 <__stack_top+0xfffdf850>
80003b94:	00070793          	mv	a5,a4
80003b98:	00279793          	slli	a5,a5,0x2
80003b9c:	00e787b3          	add	a5,a5,a4
80003ba0:	00579793          	slli	a5,a5,0x5
80003ba4:	00f687b3          	add	a5,a3,a5
80003ba8:	0807ae23          	sw	zero,156(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:42
    printsv("New application registered - ID: ", appID);
80003bac:	fdc42783          	lw	a5,-36(s0)
80003bb0:	00078593          	mv	a1,a5
80003bb4:	800057b7          	lui	a5,0x80005
80003bb8:	bd078513          	addi	a0,a5,-1072 # 80004bd0 <__stack_top+0xfffc59e0>
80003bbc:	8e4ff0ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:43
    return;
80003bc0:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:44
}
80003bc4:	02c12083          	lw	ra,44(sp)
80003bc8:	02812403          	lw	s0,40(sp)
80003bcc:	03010113          	addi	sp,sp,48
80003bd0:	00008067          	ret

80003bd4 <API_GetApplicationFreeSlot>:
API_GetApplicationFreeSlot():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:61
}


////////////////////////////////////////////////////////////
// Gets an application slot that is free
unsigned int API_GetApplicationFreeSlot(){
80003bd4:	fe010113          	addi	sp,sp,-32
80003bd8:	00812e23          	sw	s0,28(sp)
80003bdc:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:63
    int i;
    for (i = 0; i < NUM_MAX_APPS; i++){
80003be0:	fe042623          	sw	zero,-20(s0)
80003be4:	0400006f          	j	80003c24 <API_GetApplicationFreeSlot+0x50>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:64
        if (applications[i].occupied == FALSE){
80003be8:	8001f6b7          	lui	a3,0x8001f
80003bec:	fec42703          	lw	a4,-20(s0)
80003bf0:	00070793          	mv	a5,a4
80003bf4:	00279793          	slli	a5,a5,0x2
80003bf8:	00e787b3          	add	a5,a5,a4
80003bfc:	00579793          	slli	a5,a5,0x5
80003c00:	a4068713          	addi	a4,a3,-1472 # 8001ea40 <__stack_top+0xfffdf850>
80003c04:	00e787b3          	add	a5,a5,a4
80003c08:	0007a783          	lw	a5,0(a5)
80003c0c:	00079663          	bnez	a5,80003c18 <API_GetApplicationFreeSlot+0x44>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:65
            return i;
80003c10:	fec42783          	lw	a5,-20(s0)
80003c14:	0200006f          	j	80003c34 <API_GetApplicationFreeSlot+0x60>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:63 (discriminator 2)
    for (i = 0; i < NUM_MAX_APPS; i++){
80003c18:	fec42783          	lw	a5,-20(s0)
80003c1c:	00178793          	addi	a5,a5,1
80003c20:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:63 (discriminator 1)
80003c24:	fec42703          	lw	a4,-20(s0)
80003c28:	00900793          	li	a5,9
80003c2c:	fae7dee3          	ble	a4,a5,80003be8 <API_GetApplicationFreeSlot+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:68
        }
    }
    return ERRO;
80003c30:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:69
}
80003c34:	00078513          	mv	a0,a5
80003c38:	01c12403          	lw	s0,28(sp)
80003c3c:	02010113          	addi	sp,sp,32
80003c40:	00008067          	ret

80003c44 <API_ApplicationsReset>:
API_ApplicationsReset():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:73

////////////////////////////////////////////////////////////
// Reset applications vector
void API_ApplicationsReset(){
80003c44:	fe010113          	addi	sp,sp,-32
80003c48:	00812e23          	sw	s0,28(sp)
80003c4c:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:75
    int i;
    for (i = 0; i < NUM_MAX_APPS; i++){
80003c50:	fe042623          	sw	zero,-20(s0)
80003c54:	0340006f          	j	80003c88 <API_ApplicationsReset+0x44>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:76 (discriminator 3)
        applications[i].occupied = FALSE;
80003c58:	8001f6b7          	lui	a3,0x8001f
80003c5c:	fec42703          	lw	a4,-20(s0)
80003c60:	00070793          	mv	a5,a4
80003c64:	00279793          	slli	a5,a5,0x2
80003c68:	00e787b3          	add	a5,a5,a4
80003c6c:	00579793          	slli	a5,a5,0x5
80003c70:	a4068713          	addi	a4,a3,-1472 # 8001ea40 <__stack_top+0xfffdf850>
80003c74:	00e787b3          	add	a5,a5,a4
80003c78:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:75 (discriminator 3)
    for (i = 0; i < NUM_MAX_APPS; i++){
80003c7c:	fec42783          	lw	a5,-20(s0)
80003c80:	00178793          	addi	a5,a5,1
80003c84:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:75 (discriminator 1)
80003c88:	fec42703          	lw	a4,-20(s0)
80003c8c:	00900793          	li	a5,9
80003c90:	fce7d4e3          	ble	a4,a5,80003c58 <API_ApplicationsReset+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:78
    }
    return;
80003c94:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:79
}
80003c98:	01c12403          	lw	s0,28(sp)
80003c9c:	02010113          	addi	sp,sp,32
80003ca0:	00008067          	ret

80003ca4 <API_TilesReset>:
API_TilesReset():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:83

////////////////////////////////////////////////////////////
// Initialize the Tiles Info
void API_TilesReset(){
80003ca4:	fe010113          	addi	sp,sp,-32
80003ca8:	00812e23          	sw	s0,28(sp)
80003cac:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:85
    int i, m, n;
    for (m = 0; m < DIM_X; m++){
80003cb0:	fe042423          	sw	zero,-24(s0)
80003cb4:	0ec0006f          	j	80003da0 <API_TilesReset+0xfc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:86
        for (n = 0; n < DIM_Y; n++){
80003cb8:	fe042223          	sw	zero,-28(s0)
80003cbc:	0cc0006f          	j	80003d88 <API_TilesReset+0xe4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:87
            Tiles[m][n].temperature = 273;
80003cc0:	8001f6b7          	lui	a3,0x8001f
80003cc4:	fe842703          	lw	a4,-24(s0)
80003cc8:	00070793          	mv	a5,a4
80003ccc:	00179793          	slli	a5,a5,0x1
80003cd0:	00e787b3          	add	a5,a5,a4
80003cd4:	fe442703          	lw	a4,-28(s0)
80003cd8:	00e787b3          	add	a5,a5,a4
80003cdc:	00479713          	slli	a4,a5,0x4
80003ce0:	08468793          	addi	a5,a3,132 # 8001f084 <__stack_top+0xfffdfe94>
80003ce4:	00f707b3          	add	a5,a4,a5
80003ce8:	11100713          	li	a4,273
80003cec:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:88
            Tiles[m][n].frequency = 1000;
80003cf0:	8001f6b7          	lui	a3,0x8001f
80003cf4:	fe842703          	lw	a4,-24(s0)
80003cf8:	00070793          	mv	a5,a4
80003cfc:	00179793          	slli	a5,a5,0x1
80003d00:	00e787b3          	add	a5,a5,a4
80003d04:	fe442703          	lw	a4,-28(s0)
80003d08:	00e787b3          	add	a5,a5,a4
80003d0c:	08468713          	addi	a4,a3,132 # 8001f084 <__stack_top+0xfffdfe94>
80003d10:	00479793          	slli	a5,a5,0x4
80003d14:	00f707b3          	add	a5,a4,a5
80003d18:	3e800713          	li	a4,1000
80003d1c:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:89
            for(i = 0; i < NUM_MAX_TASKS; i++){
80003d20:	fe042623          	sw	zero,-20(s0)
80003d24:	04c0006f          	j	80003d70 <API_TilesReset+0xcc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90 (discriminator 3)
                Tiles[m][n].AppTask[i] = NONE;
80003d28:	8001f6b7          	lui	a3,0x8001f
80003d2c:	fe842703          	lw	a4,-24(s0)
80003d30:	00070793          	mv	a5,a4
80003d34:	00179793          	slli	a5,a5,0x1
80003d38:	00e787b3          	add	a5,a5,a4
80003d3c:	fe442703          	lw	a4,-28(s0)
80003d40:	00e787b3          	add	a5,a5,a4
80003d44:	00279713          	slli	a4,a5,0x2
80003d48:	fec42783          	lw	a5,-20(s0)
80003d4c:	00f707b3          	add	a5,a4,a5
80003d50:	08468713          	addi	a4,a3,132 # 8001f084 <__stack_top+0xfffdfe94>
80003d54:	00279793          	slli	a5,a5,0x2
80003d58:	00f707b3          	add	a5,a4,a5
80003d5c:	fff00713          	li	a4,-1
80003d60:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:89 (discriminator 3)
            for(i = 0; i < NUM_MAX_TASKS; i++){
80003d64:	fec42783          	lw	a5,-20(s0)
80003d68:	00178793          	addi	a5,a5,1
80003d6c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:89 (discriminator 1)
80003d70:	fec42703          	lw	a4,-20(s0)
80003d74:	00100793          	li	a5,1
80003d78:	fae7d8e3          	ble	a4,a5,80003d28 <API_TilesReset+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:86 (discriminator 2)
        for (n = 0; n < DIM_Y; n++){
80003d7c:	fe442783          	lw	a5,-28(s0)
80003d80:	00178793          	addi	a5,a5,1
80003d84:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:86 (discriminator 1)
80003d88:	fe442703          	lw	a4,-28(s0)
80003d8c:	00200793          	li	a5,2
80003d90:	f2e7d8e3          	ble	a4,a5,80003cc0 <API_TilesReset+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:85 (discriminator 2)
    for (m = 0; m < DIM_X; m++){
80003d94:	fe842783          	lw	a5,-24(s0)
80003d98:	00178793          	addi	a5,a5,1
80003d9c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:85 (discriminator 1)
80003da0:	fe842703          	lw	a4,-24(s0)
80003da4:	00200793          	li	a5,2
80003da8:	f0e7d8e3          	ble	a4,a5,80003cb8 <API_TilesReset+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:94
            }
        }
    }    
    return;
80003dac:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:95
}
80003db0:	01c12403          	lw	s0,28(sp)
80003db4:	02010113          	addi	sp,sp,32
80003db8:	00008067          	ret

80003dbc <GeneratePatternMatrix>:
GeneratePatternMatrix():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:98

// Generates the Pattern Matrix for Pattern mapping
void GeneratePatternMatrix(){
80003dbc:	fe010113          	addi	sp,sp,-32
80003dc0:	00812e23          	sw	s0,28(sp)
80003dc4:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:100
    int i, aux;
    aux = 0;
80003dc8:	fe042423          	sw	zero,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:101
    priorityPointer = 0;
80003dcc:	8001f7b7          	lui	a5,0x8001f
80003dd0:	0807a023          	sw	zero,128(a5) # 8001f080 <__stack_top+0xfffdfe90>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:103
    //prints("Testando Pattern: \n");
    for(i=0; i<(DIM_X*DIM_Y); i++){
80003dd4:	fe042623          	sw	zero,-20(s0)
80003dd8:	0700006f          	j	80003e48 <GeneratePatternMatrix+0x8c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:105
        //printi(i); prints(": "); printi(aux); prints("\n");
        priorityMatrix[i] = (aux / DIM_X << 8) | aux % DIM_X;
80003ddc:	fe842703          	lw	a4,-24(s0)
80003de0:	00300793          	li	a5,3
80003de4:	02f747b3          	div	a5,a4,a5
80003de8:	00879713          	slli	a4,a5,0x8
80003dec:	fe842683          	lw	a3,-24(s0)
80003df0:	00300793          	li	a5,3
80003df4:	02f6e7b3          	rem	a5,a3,a5
80003df8:	00f767b3          	or	a5,a4,a5
80003dfc:	00078693          	mv	a3,a5
80003e00:	8001f7b7          	lui	a5,0x8001f
80003e04:	fec42703          	lw	a4,-20(s0)
80003e08:	00271713          	slli	a4,a4,0x2
80003e0c:	a1c78793          	addi	a5,a5,-1508 # 8001ea1c <__stack_top+0xfffdf82c>
80003e10:	00f707b3          	add	a5,a4,a5
80003e14:	00d7a023          	sw	a3,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:124
            else{
                aux = 1;
            }
        } 
        else{
            if(aux<=((DIM_X*DIM_Y)-3))
80003e18:	fe842703          	lw	a4,-24(s0)
80003e1c:	00600793          	li	a5,6
80003e20:	00e7ca63          	blt	a5,a4,80003e34 <GeneratePatternMatrix+0x78>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:125
                aux += 2;
80003e24:	fe842783          	lw	a5,-24(s0)
80003e28:	00278793          	addi	a5,a5,2
80003e2c:	fef42423          	sw	a5,-24(s0)
80003e30:	00c0006f          	j	80003e3c <GeneratePatternMatrix+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:127
            else
                aux = 1;
80003e34:	00100793          	li	a5,1
80003e38:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:103 (discriminator 2)
    for(i=0; i<(DIM_X*DIM_Y); i++){
80003e3c:	fec42783          	lw	a5,-20(s0)
80003e40:	00178793          	addi	a5,a5,1
80003e44:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:103 (discriminator 1)
80003e48:	fec42703          	lw	a4,-20(s0)
80003e4c:	00800793          	li	a5,8
80003e50:	f8e7d6e3          	ble	a4,a5,80003ddc <GeneratePatternMatrix+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:130
        }    
    }
    return;
80003e54:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:131
}
80003e58:	01c12403          	lw	s0,28(sp)
80003e5c:	02010113          	addi	sp,sp,32
80003e60:	00008067          	ret

80003e64 <API_AllocateTasks>:
API_AllocateTasks():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:134

// Checks if there is some task to allocate...
void API_AllocateTasks(unsigned int tick){
80003e64:	fd010113          	addi	sp,sp,-48
80003e68:	02112623          	sw	ra,44(sp)
80003e6c:	02812423          	sw	s0,40(sp)
80003e70:	02912223          	sw	s1,36(sp)
80003e74:	03010413          	addi	s0,sp,48
80003e78:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:138
    int i, j;
    int addr, slot;
    // Iterate around every possible application
    for (i = 0; i < NUM_MAX_APPS; i++){
80003e7c:	fe042623          	sw	zero,-20(s0)
80003e80:	3bc0006f          	j	8000423c <API_AllocateTasks+0x3d8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:139
        printsv("Checking app ", i);
80003e84:	fec42583          	lw	a1,-20(s0)
80003e88:	800057b7          	lui	a5,0x80005
80003e8c:	bf478513          	addi	a0,a5,-1036 # 80004bf4 <__stack_top+0xfffc5a04>
80003e90:	e11fe0ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:141
        // If the application is valid
        if (applications[i].occupied == TRUE){
80003e94:	8001f6b7          	lui	a3,0x8001f
80003e98:	fec42703          	lw	a4,-20(s0)
80003e9c:	00070793          	mv	a5,a4
80003ea0:	00279793          	slli	a5,a5,0x2
80003ea4:	00e787b3          	add	a5,a5,a4
80003ea8:	00579793          	slli	a5,a5,0x5
80003eac:	a4068713          	addi	a4,a3,-1472 # 8001ea40 <__stack_top+0xfffdf850>
80003eb0:	00e787b3          	add	a5,a5,a4
80003eb4:	0007a703          	lw	a4,0(a5)
80003eb8:	00100793          	li	a5,1
80003ebc:	36f71a63          	bne	a4,a5,80004230 <API_AllocateTasks+0x3cc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:142
            printsvsv("\tNR: ", applications[i].nextRun, " TICK: ", tick);
80003ec0:	8001f7b7          	lui	a5,0x8001f
80003ec4:	fec42703          	lw	a4,-20(s0)
80003ec8:	a4078693          	addi	a3,a5,-1472 # 8001ea40 <__stack_top+0xfffdf850>
80003ecc:	00070793          	mv	a5,a4
80003ed0:	00279793          	slli	a5,a5,0x2
80003ed4:	00e787b3          	add	a5,a5,a4
80003ed8:	00579793          	slli	a5,a5,0x5
80003edc:	00f687b3          	add	a5,a3,a5
80003ee0:	08c7a783          	lw	a5,140(a5)
80003ee4:	00078713          	mv	a4,a5
80003ee8:	fdc42783          	lw	a5,-36(s0)
80003eec:	00078693          	mv	a3,a5
80003ef0:	800057b7          	lui	a5,0x80005
80003ef4:	c0478613          	addi	a2,a5,-1020 # 80004c04 <__stack_top+0xfffc5a14>
80003ef8:	00070593          	mv	a1,a4
80003efc:	800057b7          	lui	a5,0x80005
80003f00:	c0c78513          	addi	a0,a5,-1012 # 80004c0c <__stack_top+0xfffc5a1c>
80003f04:	de5fe0ef          	jal	ra,80002ce8 <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:143
            printsvsv("\tNR: ", applications[i].nextRun, " LS: ", applications[i].lastStart);
80003f08:	8001f7b7          	lui	a5,0x8001f
80003f0c:	fec42703          	lw	a4,-20(s0)
80003f10:	a4078693          	addi	a3,a5,-1472 # 8001ea40 <__stack_top+0xfffdf850>
80003f14:	00070793          	mv	a5,a4
80003f18:	00279793          	slli	a5,a5,0x2
80003f1c:	00e787b3          	add	a5,a5,a4
80003f20:	00579793          	slli	a5,a5,0x5
80003f24:	00f687b3          	add	a5,a3,a5
80003f28:	08c7a783          	lw	a5,140(a5)
80003f2c:	00078593          	mv	a1,a5
80003f30:	8001f7b7          	lui	a5,0x8001f
80003f34:	fec42703          	lw	a4,-20(s0)
80003f38:	a4078693          	addi	a3,a5,-1472 # 8001ea40 <__stack_top+0xfffdf850>
80003f3c:	00070793          	mv	a5,a4
80003f40:	00279793          	slli	a5,a5,0x2
80003f44:	00e787b3          	add	a5,a5,a4
80003f48:	00579793          	slli	a5,a5,0x5
80003f4c:	00f687b3          	add	a5,a3,a5
80003f50:	0947a783          	lw	a5,148(a5)
80003f54:	00078693          	mv	a3,a5
80003f58:	800057b7          	lui	a5,0x80005
80003f5c:	c1478613          	addi	a2,a5,-1004 # 80004c14 <__stack_top+0xfffc5a24>
80003f60:	800057b7          	lui	a5,0x80005
80003f64:	c0c78513          	addi	a0,a5,-1012 # 80004c0c <__stack_top+0xfffc5a1c>
80003f68:	d81fe0ef          	jal	ra,80002ce8 <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:145
            // If the nextRun of this application is right now, then release each task!
            if(applications[i].nextRun <= tick && applications[i].nextRun != applications[i].lastStart){
80003f6c:	8001f7b7          	lui	a5,0x8001f
80003f70:	fec42703          	lw	a4,-20(s0)
80003f74:	a4078693          	addi	a3,a5,-1472 # 8001ea40 <__stack_top+0xfffdf850>
80003f78:	00070793          	mv	a5,a4
80003f7c:	00279793          	slli	a5,a5,0x2
80003f80:	00e787b3          	add	a5,a5,a4
80003f84:	00579793          	slli	a5,a5,0x5
80003f88:	00f687b3          	add	a5,a3,a5
80003f8c:	08c7a783          	lw	a5,140(a5)
80003f90:	fdc42703          	lw	a4,-36(s0)
80003f94:	28f76e63          	bltu	a4,a5,80004230 <API_AllocateTasks+0x3cc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:145 (discriminator 1)
80003f98:	8001f7b7          	lui	a5,0x8001f
80003f9c:	fec42703          	lw	a4,-20(s0)
80003fa0:	a4078693          	addi	a3,a5,-1472 # 8001ea40 <__stack_top+0xfffdf850>
80003fa4:	00070793          	mv	a5,a4
80003fa8:	00279793          	slli	a5,a5,0x2
80003fac:	00e787b3          	add	a5,a5,a4
80003fb0:	00579793          	slli	a5,a5,0x5
80003fb4:	00f687b3          	add	a5,a3,a5
80003fb8:	08c7a683          	lw	a3,140(a5)
80003fbc:	8001f7b7          	lui	a5,0x8001f
80003fc0:	fec42703          	lw	a4,-20(s0)
80003fc4:	a4078613          	addi	a2,a5,-1472 # 8001ea40 <__stack_top+0xfffdf850>
80003fc8:	00070793          	mv	a5,a4
80003fcc:	00279793          	slli	a5,a5,0x2
80003fd0:	00e787b3          	add	a5,a5,a4
80003fd4:	00579793          	slli	a5,a5,0x5
80003fd8:	00f607b3          	add	a5,a2,a5
80003fdc:	0947a783          	lw	a5,148(a5)
80003fe0:	24f68863          	beq	a3,a5,80004230 <API_AllocateTasks+0x3cc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:148

                // If the system has space to accept every task
                printsvsv("\tNT: ", applications[i].numTasks, " SLOTS: ", API_GetSystemTasksSlots());
80003fe4:	8001f6b7          	lui	a3,0x8001f
80003fe8:	fec42703          	lw	a4,-20(s0)
80003fec:	00070793          	mv	a5,a4
80003ff0:	00279793          	slli	a5,a5,0x2
80003ff4:	00e787b3          	add	a5,a5,a4
80003ff8:	00579793          	slli	a5,a5,0x5
80003ffc:	a4068713          	addi	a4,a3,-1472 # 8001ea40 <__stack_top+0xfffdf850>
80004000:	00e787b3          	add	a5,a5,a4
80004004:	0107a783          	lw	a5,16(a5)
80004008:	00078493          	mv	s1,a5
8000400c:	4b4000ef          	jal	ra,800044c0 <API_GetSystemTasksSlots>
80004010:	00050793          	mv	a5,a0
80004014:	00078693          	mv	a3,a5
80004018:	800057b7          	lui	a5,0x80005
8000401c:	c1c78613          	addi	a2,a5,-996 # 80004c1c <__stack_top+0xfffc5a2c>
80004020:	00048593          	mv	a1,s1
80004024:	800057b7          	lui	a5,0x80005
80004028:	c2878513          	addi	a0,a5,-984 # 80004c28 <__stack_top+0xfffc5a38>
8000402c:	cbdfe0ef          	jal	ra,80002ce8 <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:149
                if(applications[i].numTasks <= API_GetSystemTasksSlots()){
80004030:	8001f6b7          	lui	a3,0x8001f
80004034:	fec42703          	lw	a4,-20(s0)
80004038:	00070793          	mv	a5,a4
8000403c:	00279793          	slli	a5,a5,0x2
80004040:	00e787b3          	add	a5,a5,a4
80004044:	00579793          	slli	a5,a5,0x5
80004048:	a4068713          	addi	a4,a3,-1472 # 8001ea40 <__stack_top+0xfffdf850>
8000404c:	00e787b3          	add	a5,a5,a4
80004050:	0107a483          	lw	s1,16(a5)
80004054:	46c000ef          	jal	ra,800044c0 <API_GetSystemTasksSlots>
80004058:	00050793          	mv	a5,a0
8000405c:	1c97ea63          	bltu	a5,s1,80004230 <API_AllocateTasks+0x3cc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:152
                    
                    // Iterates around each task of this application
                    for(j = 0; j < applications[i].numTasks; j++){
80004060:	fe042423          	sw	zero,-24(s0)
80004064:	1580006f          	j	800041bc <API_AllocateTasks+0x358>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:155

                        for(;;){
                            addr = getNextPriorityAddr();
80004068:	1f8000ef          	jal	ra,80004260 <getNextPriorityAddr>
8000406c:	00050793          	mv	a5,a0
80004070:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:156
                            slot = API_GetTaskSlotFromTile(addr, i, j);
80004074:	fe442783          	lw	a5,-28(s0)
80004078:	fec42703          	lw	a4,-20(s0)
8000407c:	fe842683          	lw	a3,-24(s0)
80004080:	00068613          	mv	a2,a3
80004084:	00070593          	mv	a1,a4
80004088:	00078513          	mv	a0,a5
8000408c:	320000ef          	jal	ra,800043ac <API_GetTaskSlotFromTile>
80004090:	00050793          	mv	a5,a0
80004094:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:157
                            if (slot != ERRO)
80004098:	fe042703          	lw	a4,-32(s0)
8000409c:	fff00793          	li	a5,-1
800040a0:	00f71463          	bne	a4,a5,800040a8 <API_AllocateTasks+0x244>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:155
                            addr = getNextPriorityAddr();
800040a4:	fc5ff06f          	j	80004068 <API_AllocateTasks+0x204>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:158
                                break;
800040a8:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:160
                        }
                        applications[i].tasks[j].status = TASK_ALLOCATING;
800040ac:	8001f737          	lui	a4,0x8001f
800040b0:	fe842783          	lw	a5,-24(s0)
800040b4:	fec42683          	lw	a3,-20(s0)
800040b8:	a4070613          	addi	a2,a4,-1472 # 8001ea40 <__stack_top+0xfffdf850>
800040bc:	00078713          	mv	a4,a5
800040c0:	00171713          	slli	a4,a4,0x1
800040c4:	00f70733          	add	a4,a4,a5
800040c8:	00271793          	slli	a5,a4,0x2
800040cc:	00078713          	mv	a4,a5
800040d0:	00068793          	mv	a5,a3
800040d4:	00279793          	slli	a5,a5,0x2
800040d8:	00d787b3          	add	a5,a5,a3
800040dc:	00579793          	slli	a5,a5,0x5
800040e0:	00f707b3          	add	a5,a4,a5
800040e4:	00f607b3          	add	a5,a2,a5
800040e8:	00300713          	li	a4,3
800040ec:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:161
                        applications[i].tasks[j].addr = addr;
800040f0:	fe442603          	lw	a2,-28(s0)
800040f4:	8001f737          	lui	a4,0x8001f
800040f8:	fe842783          	lw	a5,-24(s0)
800040fc:	fec42683          	lw	a3,-20(s0)
80004100:	a4070593          	addi	a1,a4,-1472 # 8001ea40 <__stack_top+0xfffdf850>
80004104:	00078713          	mv	a4,a5
80004108:	00171713          	slli	a4,a4,0x1
8000410c:	00f70733          	add	a4,a4,a5
80004110:	00271793          	slli	a5,a4,0x2
80004114:	00078713          	mv	a4,a5
80004118:	00068793          	mv	a5,a3
8000411c:	00279793          	slli	a5,a5,0x2
80004120:	00d787b3          	add	a5,a5,a3
80004124:	00579793          	slli	a5,a5,0x5
80004128:	00f707b3          	add	a5,a4,a5
8000412c:	00f587b3          	add	a5,a1,a5
80004130:	00c7ac23          	sw	a2,24(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:162
                        applications[i].tasks[j].slot = slot;
80004134:	fe042603          	lw	a2,-32(s0)
80004138:	8001f737          	lui	a4,0x8001f
8000413c:	fe842783          	lw	a5,-24(s0)
80004140:	fec42683          	lw	a3,-20(s0)
80004144:	a4070593          	addi	a1,a4,-1472 # 8001ea40 <__stack_top+0xfffdf850>
80004148:	00078713          	mv	a4,a5
8000414c:	00171713          	slli	a4,a4,0x1
80004150:	00f70733          	add	a4,a4,a5
80004154:	00271793          	slli	a5,a4,0x2
80004158:	00078713          	mv	a4,a5
8000415c:	00068793          	mv	a5,a3
80004160:	00279793          	slli	a5,a5,0x2
80004164:	00d787b3          	add	a5,a5,a3
80004168:	00579793          	slli	a5,a5,0x5
8000416c:	00f707b3          	add	a5,a4,a5
80004170:	00f587b3          	add	a5,a1,a5
80004174:	00c7ae23          	sw	a2,28(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:163
                        printsvsv("Application ", i, " Task ", j);
80004178:	fe842683          	lw	a3,-24(s0)
8000417c:	800057b7          	lui	a5,0x80005
80004180:	c3078613          	addi	a2,a5,-976 # 80004c30 <__stack_top+0xfffc5a40>
80004184:	fec42583          	lw	a1,-20(s0)
80004188:	800057b7          	lui	a5,0x80005
8000418c:	c3878513          	addi	a0,a5,-968 # 80004c38 <__stack_top+0xfffc5a48>
80004190:	b59fe0ef          	jal	ra,80002ce8 <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:164
                        printsvsv("Alocados em ", addr, " slot ", slot);
80004194:	fe042683          	lw	a3,-32(s0)
80004198:	800057b7          	lui	a5,0x80005
8000419c:	c4878613          	addi	a2,a5,-952 # 80004c48 <__stack_top+0xfffc5a58>
800041a0:	fe442583          	lw	a1,-28(s0)
800041a4:	800057b7          	lui	a5,0x80005
800041a8:	c5078513          	addi	a0,a5,-944 # 80004c50 <__stack_top+0xfffc5a60>
800041ac:	b3dfe0ef          	jal	ra,80002ce8 <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:152
                    for(j = 0; j < applications[i].numTasks; j++){
800041b0:	fe842783          	lw	a5,-24(s0)
800041b4:	00178793          	addi	a5,a5,1
800041b8:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:152 (discriminator 1)
800041bc:	8001f6b7          	lui	a3,0x8001f
800041c0:	fec42703          	lw	a4,-20(s0)
800041c4:	00070793          	mv	a5,a4
800041c8:	00279793          	slli	a5,a5,0x2
800041cc:	00e787b3          	add	a5,a5,a4
800041d0:	00579793          	slli	a5,a5,0x5
800041d4:	a4068713          	addi	a4,a3,-1472 # 8001ea40 <__stack_top+0xfffdf850>
800041d8:	00e787b3          	add	a5,a5,a4
800041dc:	0107a703          	lw	a4,16(a5)
800041e0:	fe842783          	lw	a5,-24(s0)
800041e4:	e8e7e2e3          	bltu	a5,a4,80004068 <API_AllocateTasks+0x204>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:168
                    }

                    // Resets the lastStart
                    applications[i].lastStart = applications[i].nextRun;
800041e8:	8001f7b7          	lui	a5,0x8001f
800041ec:	fec42703          	lw	a4,-20(s0)
800041f0:	a4078693          	addi	a3,a5,-1472 # 8001ea40 <__stack_top+0xfffdf850>
800041f4:	00070793          	mv	a5,a4
800041f8:	00279793          	slli	a5,a5,0x2
800041fc:	00e787b3          	add	a5,a5,a4
80004200:	00579793          	slli	a5,a5,0x5
80004204:	00f687b3          	add	a5,a3,a5
80004208:	08c7a683          	lw	a3,140(a5)
8000420c:	8001f7b7          	lui	a5,0x8001f
80004210:	fec42703          	lw	a4,-20(s0)
80004214:	a4078613          	addi	a2,a5,-1472 # 8001ea40 <__stack_top+0xfffdf850>
80004218:	00070793          	mv	a5,a4
8000421c:	00279793          	slli	a5,a5,0x2
80004220:	00e787b3          	add	a5,a5,a4
80004224:	00579793          	slli	a5,a5,0x5
80004228:	00f607b3          	add	a5,a2,a5
8000422c:	08d7aa23          	sw	a3,148(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:138 (discriminator 2)
    for (i = 0; i < NUM_MAX_APPS; i++){
80004230:	fec42783          	lw	a5,-20(s0)
80004234:	00178793          	addi	a5,a5,1
80004238:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:138 (discriminator 1)
8000423c:	fec42703          	lw	a4,-20(s0)
80004240:	00900793          	li	a5,9
80004244:	c4e7d0e3          	ble	a4,a5,80003e84 <API_AllocateTasks+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:173
                }
            }
        }
    }
    return;
80004248:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:174
}
8000424c:	02c12083          	lw	ra,44(sp)
80004250:	02812403          	lw	s0,40(sp)
80004254:	02412483          	lw	s1,36(sp)
80004258:	03010113          	addi	sp,sp,48
8000425c:	00008067          	ret

80004260 <getNextPriorityAddr>:
getNextPriorityAddr():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:177

// Gets the address of the next tile in the priority list 
unsigned int getNextPriorityAddr(){
80004260:	fe010113          	addi	sp,sp,-32
80004264:	00112e23          	sw	ra,28(sp)
80004268:	00812c23          	sw	s0,24(sp)
8000426c:	00912a23          	sw	s1,20(sp)
80004270:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:179
    int i;
    unsigned int addr = makeAddress(0,0);
80004274:	00000593          	li	a1,0
80004278:	00000513          	li	a0,0
8000427c:	960ff0ef          	jal	ra,800033dc <makeAddress>
80004280:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:182
    for(;;){
        // Checks if it's a valid address
        if (priorityMatrix[priorityPointer] != makeAddress(0,0)){
80004284:	8001f7b7          	lui	a5,0x8001f
80004288:	0807a703          	lw	a4,128(a5) # 8001f080 <__stack_top+0xfffdfe90>
8000428c:	8001f7b7          	lui	a5,0x8001f
80004290:	00271713          	slli	a4,a4,0x2
80004294:	a1c78793          	addi	a5,a5,-1508 # 8001ea1c <__stack_top+0xfffdf82c>
80004298:	00f707b3          	add	a5,a4,a5
8000429c:	0007a483          	lw	s1,0(a5)
800042a0:	00000593          	li	a1,0
800042a4:	00000513          	li	a0,0
800042a8:	934ff0ef          	jal	ra,800033dc <makeAddress>
800042ac:	00050793          	mv	a5,a0
800042b0:	08f48a63          	beq	s1,a5,80004344 <getNextPriorityAddr+0xe4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:183
            for(i = 0; i < NUM_MAX_TASKS; i++){
800042b4:	fe042623          	sw	zero,-20(s0)
800042b8:	0800006f          	j	80004338 <getNextPriorityAddr+0xd8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:184
                if (Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] == NONE)
800042bc:	fe842503          	lw	a0,-24(s0)
800042c0:	a89fe0ef          	jal	ra,80002d48 <getXpos>
800042c4:	00050493          	mv	s1,a0
800042c8:	fe842503          	lw	a0,-24(s0)
800042cc:	aa9fe0ef          	jal	ra,80002d74 <getYpos>
800042d0:	00050693          	mv	a3,a0
800042d4:	8001f737          	lui	a4,0x8001f
800042d8:	00048793          	mv	a5,s1
800042dc:	00179793          	slli	a5,a5,0x1
800042e0:	009787b3          	add	a5,a5,s1
800042e4:	00d787b3          	add	a5,a5,a3
800042e8:	00279693          	slli	a3,a5,0x2
800042ec:	fec42783          	lw	a5,-20(s0)
800042f0:	00f687b3          	add	a5,a3,a5
800042f4:	08470713          	addi	a4,a4,132 # 8001f084 <__stack_top+0xfffdfe94>
800042f8:	00279793          	slli	a5,a5,0x2
800042fc:	00f707b3          	add	a5,a4,a5
80004300:	0087a703          	lw	a4,8(a5)
80004304:	fff00793          	li	a5,-1
80004308:	02f71263          	bne	a4,a5,8000432c <getNextPriorityAddr+0xcc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:185
                    addr = priorityMatrix[priorityPointer];
8000430c:	8001f7b7          	lui	a5,0x8001f
80004310:	0807a703          	lw	a4,128(a5) # 8001f080 <__stack_top+0xfffdfe90>
80004314:	8001f7b7          	lui	a5,0x8001f
80004318:	00271713          	slli	a4,a4,0x2
8000431c:	a1c78793          	addi	a5,a5,-1508 # 8001ea1c <__stack_top+0xfffdf82c>
80004320:	00f707b3          	add	a5,a4,a5
80004324:	0007a783          	lw	a5,0(a5)
80004328:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:183 (discriminator 2)
            for(i = 0; i < NUM_MAX_TASKS; i++){
8000432c:	fec42783          	lw	a5,-20(s0)
80004330:	00178793          	addi	a5,a5,1
80004334:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:183 (discriminator 1)
80004338:	fec42703          	lw	a4,-20(s0)
8000433c:	00100793          	li	a5,1
80004340:	f6e7dee3          	ble	a4,a5,800042bc <getNextPriorityAddr+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:190
            }
        }

        // Increments the priorityPointer
        priorityPointer++;
80004344:	8001f7b7          	lui	a5,0x8001f
80004348:	0807a783          	lw	a5,128(a5) # 8001f080 <__stack_top+0xfffdfe90>
8000434c:	00178713          	addi	a4,a5,1
80004350:	8001f7b7          	lui	a5,0x8001f
80004354:	08e7a023          	sw	a4,128(a5) # 8001f080 <__stack_top+0xfffdfe90>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:191
        if (priorityPointer == DIM_X*DIM_Y)
80004358:	8001f7b7          	lui	a5,0x8001f
8000435c:	0807a703          	lw	a4,128(a5) # 8001f080 <__stack_top+0xfffdfe90>
80004360:	00900793          	li	a5,9
80004364:	00f71663          	bne	a4,a5,80004370 <getNextPriorityAddr+0x110>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:192
            priorityPointer = 0;
80004368:	8001f7b7          	lui	a5,0x8001f
8000436c:	0807a023          	sw	zero,128(a5) # 8001f080 <__stack_top+0xfffdfe90>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:195

        // If we found a new valid address, return
        if( addr != makeAddress(0,0))
80004370:	00000593          	li	a1,0
80004374:	00000513          	li	a0,0
80004378:	864ff0ef          	jal	ra,800033dc <makeAddress>
8000437c:	00050713          	mv	a4,a0
80004380:	fe842783          	lw	a5,-24(s0)
80004384:	00e79463          	bne	a5,a4,8000438c <getNextPriorityAddr+0x12c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:182
        if (priorityMatrix[priorityPointer] != makeAddress(0,0)){
80004388:	efdff06f          	j	80004284 <getNextPriorityAddr+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:196
            break;
8000438c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:198
    }
    return addr;
80004390:	fe842783          	lw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:199
}
80004394:	00078513          	mv	a0,a5
80004398:	01c12083          	lw	ra,28(sp)
8000439c:	01812403          	lw	s0,24(sp)
800043a0:	01412483          	lw	s1,20(sp)
800043a4:	02010113          	addi	sp,sp,32
800043a8:	00008067          	ret

800043ac <API_GetTaskSlotFromTile>:
API_GetTaskSlotFromTile():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:202

// Gets a free slot from one given tile
unsigned int API_GetTaskSlotFromTile(unsigned int addr, unsigned int app, unsigned int task){
800043ac:	fd010113          	addi	sp,sp,-48
800043b0:	02112623          	sw	ra,44(sp)
800043b4:	02812423          	sw	s0,40(sp)
800043b8:	02912223          	sw	s1,36(sp)
800043bc:	03212023          	sw	s2,32(sp)
800043c0:	03010413          	addi	s0,sp,48
800043c4:	fca42e23          	sw	a0,-36(s0)
800043c8:	fcb42c23          	sw	a1,-40(s0)
800043cc:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:204
    int i;
    for(i = 0; i < NUM_MAX_TASKS; i++){
800043d0:	fe042623          	sw	zero,-20(s0)
800043d4:	0c00006f          	j	80004494 <API_GetTaskSlotFromTile+0xe8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:205
        if(Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] == NONE){
800043d8:	fdc42503          	lw	a0,-36(s0)
800043dc:	96dfe0ef          	jal	ra,80002d48 <getXpos>
800043e0:	00050493          	mv	s1,a0
800043e4:	fdc42503          	lw	a0,-36(s0)
800043e8:	98dfe0ef          	jal	ra,80002d74 <getYpos>
800043ec:	00050693          	mv	a3,a0
800043f0:	8001f737          	lui	a4,0x8001f
800043f4:	00048793          	mv	a5,s1
800043f8:	00179793          	slli	a5,a5,0x1
800043fc:	009787b3          	add	a5,a5,s1
80004400:	00d787b3          	add	a5,a5,a3
80004404:	00279693          	slli	a3,a5,0x2
80004408:	fec42783          	lw	a5,-20(s0)
8000440c:	00f687b3          	add	a5,a3,a5
80004410:	08470713          	addi	a4,a4,132 # 8001f084 <__stack_top+0xfffdfe94>
80004414:	00279793          	slli	a5,a5,0x2
80004418:	00f707b3          	add	a5,a4,a5
8000441c:	0087a703          	lw	a4,8(a5)
80004420:	fff00793          	li	a5,-1
80004424:	06f71263          	bne	a4,a5,80004488 <API_GetTaskSlotFromTile+0xdc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:206
            Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] = (app << 16) | task;
80004428:	fd842783          	lw	a5,-40(s0)
8000442c:	01079493          	slli	s1,a5,0x10
80004430:	fdc42503          	lw	a0,-36(s0)
80004434:	915fe0ef          	jal	ra,80002d48 <getXpos>
80004438:	00050913          	mv	s2,a0
8000443c:	fdc42503          	lw	a0,-36(s0)
80004440:	935fe0ef          	jal	ra,80002d74 <getYpos>
80004444:	00050613          	mv	a2,a0
80004448:	fd442783          	lw	a5,-44(s0)
8000444c:	00f4e733          	or	a4,s1,a5
80004450:	8001f6b7          	lui	a3,0x8001f
80004454:	00090793          	mv	a5,s2
80004458:	00179793          	slli	a5,a5,0x1
8000445c:	012787b3          	add	a5,a5,s2
80004460:	00c787b3          	add	a5,a5,a2
80004464:	00279613          	slli	a2,a5,0x2
80004468:	fec42783          	lw	a5,-20(s0)
8000446c:	00f607b3          	add	a5,a2,a5
80004470:	08468693          	addi	a3,a3,132 # 8001f084 <__stack_top+0xfffdfe94>
80004474:	00279793          	slli	a5,a5,0x2
80004478:	00f687b3          	add	a5,a3,a5
8000447c:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:207
            return i;
80004480:	fec42783          	lw	a5,-20(s0)
80004484:	0200006f          	j	800044a4 <API_GetTaskSlotFromTile+0xf8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:204 (discriminator 2)
    for(i = 0; i < NUM_MAX_TASKS; i++){
80004488:	fec42783          	lw	a5,-20(s0)
8000448c:	00178793          	addi	a5,a5,1
80004490:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:204 (discriminator 1)
80004494:	fec42703          	lw	a4,-20(s0)
80004498:	00100793          	li	a5,1
8000449c:	f2e7dee3          	ble	a4,a5,800043d8 <API_GetTaskSlotFromTile+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:210
        }
    }
    return ERRO;
800044a0:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:211
}
800044a4:	00078513          	mv	a0,a5
800044a8:	02c12083          	lw	ra,44(sp)
800044ac:	02812403          	lw	s0,40(sp)
800044b0:	02412483          	lw	s1,36(sp)
800044b4:	02012903          	lw	s2,32(sp)
800044b8:	03010113          	addi	sp,sp,48
800044bc:	00008067          	ret

800044c0 <API_GetSystemTasksSlots>:
API_GetSystemTasksSlots():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:215


// Iterates around the system tiles to sum the amount of tasks slots available
unsigned int API_GetSystemTasksSlots(){
800044c0:	fe010113          	addi	sp,sp,-32
800044c4:	00112e23          	sw	ra,28(sp)
800044c8:	00812c23          	sw	s0,24(sp)
800044cc:	00912a23          	sw	s1,20(sp)
800044d0:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:217
    int m, n, i, sum;
    sum = 0;
800044d4:	fe042023          	sw	zero,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:218
    for(m = 0; m < DIM_X; m++){
800044d8:	fe042623          	sw	zero,-20(s0)
800044dc:	0c80006f          	j	800045a4 <API_GetSystemTasksSlots+0xe4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:219
        for(n = 0; n < DIM_Y; n++){
800044e0:	fe042423          	sw	zero,-24(s0)
800044e4:	0a80006f          	j	8000458c <API_GetSystemTasksSlots+0xcc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:220
            if(makeAddress(m,n) != makeAddress(0,0)){
800044e8:	fec42783          	lw	a5,-20(s0)
800044ec:	fe842703          	lw	a4,-24(s0)
800044f0:	00070593          	mv	a1,a4
800044f4:	00078513          	mv	a0,a5
800044f8:	ee5fe0ef          	jal	ra,800033dc <makeAddress>
800044fc:	00050493          	mv	s1,a0
80004500:	00000593          	li	a1,0
80004504:	00000513          	li	a0,0
80004508:	ed5fe0ef          	jal	ra,800033dc <makeAddress>
8000450c:	00050793          	mv	a5,a0
80004510:	06f48863          	beq	s1,a5,80004580 <API_GetSystemTasksSlots+0xc0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:221
                for(i = 0; i < NUM_MAX_TASKS; i++){
80004514:	fe042223          	sw	zero,-28(s0)
80004518:	05c0006f          	j	80004574 <API_GetSystemTasksSlots+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:222
                    if(Tiles[m][n].AppTask[i] == NONE){
8000451c:	8001f6b7          	lui	a3,0x8001f
80004520:	fec42703          	lw	a4,-20(s0)
80004524:	00070793          	mv	a5,a4
80004528:	00179793          	slli	a5,a5,0x1
8000452c:	00e787b3          	add	a5,a5,a4
80004530:	fe842703          	lw	a4,-24(s0)
80004534:	00e787b3          	add	a5,a5,a4
80004538:	00279713          	slli	a4,a5,0x2
8000453c:	fe442783          	lw	a5,-28(s0)
80004540:	00f707b3          	add	a5,a4,a5
80004544:	08468713          	addi	a4,a3,132 # 8001f084 <__stack_top+0xfffdfe94>
80004548:	00279793          	slli	a5,a5,0x2
8000454c:	00f707b3          	add	a5,a4,a5
80004550:	0087a703          	lw	a4,8(a5)
80004554:	fff00793          	li	a5,-1
80004558:	00f71863          	bne	a4,a5,80004568 <API_GetSystemTasksSlots+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:223
                        sum++;
8000455c:	fe042783          	lw	a5,-32(s0)
80004560:	00178793          	addi	a5,a5,1
80004564:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:221 (discriminator 2)
                for(i = 0; i < NUM_MAX_TASKS; i++){
80004568:	fe442783          	lw	a5,-28(s0)
8000456c:	00178793          	addi	a5,a5,1
80004570:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:221 (discriminator 1)
80004574:	fe442703          	lw	a4,-28(s0)
80004578:	00100793          	li	a5,1
8000457c:	fae7d0e3          	ble	a4,a5,8000451c <API_GetSystemTasksSlots+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:219 (discriminator 2)
        for(n = 0; n < DIM_Y; n++){
80004580:	fe842783          	lw	a5,-24(s0)
80004584:	00178793          	addi	a5,a5,1
80004588:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:219 (discriminator 1)
8000458c:	fe842703          	lw	a4,-24(s0)
80004590:	00200793          	li	a5,2
80004594:	f4e7dae3          	ble	a4,a5,800044e8 <API_GetSystemTasksSlots+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:218 (discriminator 2)
    for(m = 0; m < DIM_X; m++){
80004598:	fec42783          	lw	a5,-20(s0)
8000459c:	00178793          	addi	a5,a5,1
800045a0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:218 (discriminator 1)
800045a4:	fec42703          	lw	a4,-20(s0)
800045a8:	00200793          	li	a5,2
800045ac:	f2e7dae3          	ble	a4,a5,800044e0 <API_GetSystemTasksSlots+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:229
                    }
                }
            }
        }
    }
    return sum;
800045b0:	fe042783          	lw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:230
800045b4:	00078513          	mv	a0,a5
800045b8:	01c12083          	lw	ra,28(sp)
800045bc:	01812403          	lw	s0,24(sp)
800045c0:	01412483          	lw	s1,20(sp)
800045c4:	02010113          	addi	sp,sp,32
800045c8:	00008067          	ret

800045cc <PLIC_init>:
PLIC_init():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:124
{
800045cc:	fe010113          	addi	sp,sp,-32
800045d0:	00812e23          	sw	s0,28(sp)
800045d4:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:126
    unsigned long hart_id = read_csr(mhartid);
800045d8:	f14027f3          	csrr	a5,mhartid
800045dc:	fef42423          	sw	a5,-24(s0)
800045e0:	fe842783          	lw	a5,-24(s0)
800045e4:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
800045e8:	fe042623          	sw	zero,-20(s0)
800045ec:	03c0006f          	j	80004628 <PLIC_init+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:131 (discriminator 3)
        PLIC->TARGET_ENABLES[hart_id].ENABLES[inc] = 0;
800045f0:	40000737          	lui	a4,0x40000
800045f4:	fe442783          	lw	a5,-28(s0)
800045f8:	00579693          	slli	a3,a5,0x5
800045fc:	fec42783          	lw	a5,-20(s0)
80004600:	00f686b3          	add	a3,a3,a5
80004604:	000017b7          	lui	a5,0x1
80004608:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
8000460c:	00f687b3          	add	a5,a3,a5
80004610:	00279793          	slli	a5,a5,0x2
80004614:	00f707b3          	add	a5,a4,a5
80004618:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 3)
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
8000461c:	fec42783          	lw	a5,-20(s0)
80004620:	00178793          	addi	a5,a5,1
80004624:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 1)
80004628:	fec42783          	lw	a5,-20(s0)
8000462c:	fc0782e3          	beqz	a5,800045f0 <PLIC_init+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
80004630:	fe042623          	sw	zero,-20(s0)
80004634:	0240006f          	j	80004658 <PLIC_init+0x8c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:139 (discriminator 3)
        PLIC->SOURCE_PRIORITY[inc] = 0;
80004638:	40000737          	lui	a4,0x40000
8000463c:	fec42783          	lw	a5,-20(s0)
80004640:	00279793          	slli	a5,a5,0x2
80004644:	00f707b3          	add	a5,a4,a5
80004648:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 3)
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
8000464c:	fec42783          	lw	a5,-20(s0)
80004650:	00178793          	addi	a5,a5,1
80004654:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 1)
80004658:	fec42703          	lw	a4,-20(s0)
8000465c:	01e00793          	li	a5,30
80004660:	fce7fce3          	bleu	a4,a5,80004638 <PLIC_init+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:143
    PLIC->TARGET[hart_id].PRIORITY_THRESHOLD = 0;
80004664:	40000737          	lui	a4,0x40000
80004668:	fe442783          	lw	a5,-28(s0)
8000466c:	20078793          	addi	a5,a5,512
80004670:	00c79793          	slli	a5,a5,0xc
80004674:	00f707b3          	add	a5,a4,a5
80004678:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:146
    set_csr(mie, MIP_MEIP);
8000467c:	000017b7          	lui	a5,0x1
80004680:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80004684:	3047a7f3          	csrrs	a5,mie,a5
80004688:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:147
}
8000468c:	00000013          	nop
80004690:	01c12403          	lw	s0,28(sp)
80004694:	02010113          	addi	sp,sp,32
80004698:	00008067          	ret

8000469c <main>:
main():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:55
Task TaskList[ MAX_LOCAL_TASKS ];

/*-----------------------------------------------------------*/

int main( void )
{
8000469c:	fd010113          	addi	sp,sp,-48
800046a0:	02112623          	sw	ra,44(sp)
800046a4:	02812423          	sw	s0,40(sp)
800046a8:	03010413          	addi	s0,sp,48
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:57
	char str[20];
    PLIC_init();
800046ac:	f21ff0ef          	jal	ra,800045cc <PLIC_init>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:63

    /**************************************************************************
    * Initialize CoreUART with its base address, baud value, and line
    * configuration.
    *************************************************************************/
    UART_init(&g_uart, COREUARTAPB0_BASE_ADDR, BAUD_VALUE_115200,
800046b0:	00100693          	li	a3,1
800046b4:	02c00613          	li	a2,44
800046b8:	700015b7          	lui	a1,0x70001
800046bc:	8001f7b7          	lui	a5,0x8001f
800046c0:	11478513          	addi	a0,a5,276 # 8001f114 <__stack_top+0xfffdff24>
800046c4:	86dfc0ef          	jal	ra,80000f30 <UART_init>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:69
             (DATA_8_BITS | NO_PARITY) );
    
	/**************************************************************************
    * Initialize the Chronos platform stuff
    *************************************************************************/
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n Chronos platform initializing... \n" );
800046c8:	800057b7          	lui	a5,0x80005
800046cc:	c7878593          	addi	a1,a5,-904 # 80004c78 <__stack_top+0xfffc5a88>
800046d0:	8001f7b7          	lui	a5,0x8001f
800046d4:	11478513          	addi	a0,a5,276 # 8001f114 <__stack_top+0xfffdff24>
800046d8:	a25fc0ef          	jal	ra,800010fc <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:70
	Chronos_init();
800046dc:	c3cfe0ef          	jal	ra,80002b18 <Chronos_init>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:71
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This terminal belongs to the address: " );
800046e0:	800057b7          	lui	a5,0x80005
800046e4:	ca078593          	addi	a1,a5,-864 # 80004ca0 <__stack_top+0xfffc5ab0>
800046e8:	8001f7b7          	lui	a5,0x8001f
800046ec:	11478513          	addi	a0,a5,276 # 8001f114 <__stack_top+0xfffdff24>
800046f0:	a0dfc0ef          	jal	ra,800010fc <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:72
	myItoa(ProcessorAddr, str, 16);
800046f4:	8001f7b7          	lui	a5,0x8001f
800046f8:	1e47a783          	lw	a5,484(a5) # 8001f1e4 <__stack_top+0xfffdfff4>
800046fc:	00078713          	mv	a4,a5
80004700:	fdc40793          	addi	a5,s0,-36
80004704:	01000613          	li	a2,16
80004708:	00078593          	mv	a1,a5
8000470c:	00070513          	mv	a0,a4
80004710:	b2dfe0ef          	jal	ra,8000323c <myItoa>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:73
    UART_polled_tx_string( &g_uart, (const uint8_t *)str); UART_polled_tx_string( &g_uart, (const uint8_t *)"\n");
80004714:	fdc40793          	addi	a5,s0,-36
80004718:	00078593          	mv	a1,a5
8000471c:	8001f7b7          	lui	a5,0x8001f
80004720:	11478513          	addi	a0,a5,276 # 8001f114 <__stack_top+0xfffdff24>
80004724:	9d9fc0ef          	jal	ra,800010fc <UART_polled_tx_string>
80004728:	800057b7          	lui	a5,0x80005
8000472c:	ccc78593          	addi	a1,a5,-820 # 80004ccc <__stack_top+0xfffc5adc>
80004730:	8001f7b7          	lui	a5,0x8001f
80004734:	11478513          	addi	a0,a5,276 # 8001f114 <__stack_top+0xfffdff24>
80004738:	9c5fc0ef          	jal	ra,800010fc <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:77
	
	//AppsToMap = 0;
	
	if (ProcessorAddr == 0x0000){
8000473c:	8001f7b7          	lui	a5,0x8001f
80004740:	1e47a783          	lw	a5,484(a5) # 8001f1e4 <__stack_top+0xfffdfff4>
80004744:	04079463          	bnez	a5,8000478c <main+0xf0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:78
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is the Global Master: \n" );
80004748:	800057b7          	lui	a5,0x80005
8000474c:	cd078593          	addi	a1,a5,-816 # 80004cd0 <__stack_top+0xfffc5ae0>
80004750:	8001f7b7          	lui	a5,0x8001f
80004754:	11478513          	addi	a0,a5,276 # 8001f114 <__stack_top+0xfffdff24>
80004758:	9a5fc0ef          	jal	ra,800010fc <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:80
		/* Create the GlobalManager task */
		xTaskCreate( GlobalManagerTask, "GlobalMaster", 1000, NULL, uartPRIMARY_PRIORITY, NULL );
8000475c:	00000893          	li	a7,0
80004760:	00000813          	li	a6,0
80004764:	00000793          	li	a5,0
80004768:	00200713          	li	a4,2
8000476c:	00000693          	li	a3,0
80004770:	3e800613          	li	a2,1000
80004774:	800055b7          	lui	a1,0x80005
80004778:	cfc58593          	addi	a1,a1,-772 # 80004cfc <__stack_top+0xfffc5b0c>
8000477c:	80005537          	lui	a0,0x80005
80004780:	8ac50513          	addi	a0,a0,-1876 # 800048ac <__stack_top+0xfffc56bc>
80004784:	e28fd0ef          	jal	ra,80001dac <xTaskGenericCreate>
80004788:	0700006f          	j	800047f8 <main+0x15c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:82
	} else {
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is a Slave: \n" );
8000478c:	800057b7          	lui	a5,0x80005
80004790:	d0c78593          	addi	a1,a5,-756 # 80004d0c <__stack_top+0xfffc5b1c>
80004794:	8001f7b7          	lui	a5,0x8001f
80004798:	11478513          	addi	a0,a5,276 # 8001f114 <__stack_top+0xfffdff24>
8000479c:	961fc0ef          	jal	ra,800010fc <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:85
		
		/* Create the two test tasks. */
		xTaskCreate( vUartTestTask1, "UArt1", 1000, NULL, uartPRIMARY_PRIORITY, NULL );
800047a0:	00000893          	li	a7,0
800047a4:	00000813          	li	a6,0
800047a8:	00000793          	li	a5,0
800047ac:	00200713          	li	a4,2
800047b0:	00000693          	li	a3,0
800047b4:	3e800613          	li	a2,1000
800047b8:	800055b7          	lui	a1,0x80005
800047bc:	d2c58593          	addi	a1,a1,-724 # 80004d2c <__stack_top+0xfffc5b3c>
800047c0:	80005537          	lui	a0,0x80005
800047c4:	84450513          	addi	a0,a0,-1980 # 80004844 <__stack_top+0xfffc5654>
800047c8:	de4fd0ef          	jal	ra,80001dac <xTaskGenericCreate>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:87
		//API_CreateTask();
		xTaskCreate( vUartTestTask2, "UArt2", 1000, NULL, uartPRIMARY_PRIORITY, NULL );
800047cc:	00000893          	li	a7,0
800047d0:	00000813          	li	a6,0
800047d4:	00000793          	li	a5,0
800047d8:	00200713          	li	a4,2
800047dc:	00000693          	li	a3,0
800047e0:	3e800613          	li	a2,1000
800047e4:	800055b7          	lui	a1,0x80005
800047e8:	d3458593          	addi	a1,a1,-716 # 80004d34 <__stack_top+0xfffc5b44>
800047ec:	80005537          	lui	a0,0x80005
800047f0:	87850513          	addi	a0,a0,-1928 # 80004878 <__stack_top+0xfffc5688>
800047f4:	db8fd0ef          	jal	ra,80001dac <xTaskGenericCreate>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:91
	}	

	/* Start the kernel.  From here on, only tasks and interrupts will run. */
	vTaskStartScheduler();
800047f8:	855fd0ef          	jal	ra,8000204c <vTaskStartScheduler>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:94

	/* Exit FreeRTOS */
	return 0;
800047fc:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:95
}
80004800:	00078513          	mv	a0,a5
80004804:	02c12083          	lw	ra,44(sp)
80004808:	02812403          	lw	s0,40(sp)
8000480c:	03010113          	addi	sp,sp,48
80004810:	00008067          	ret

80004814 <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:100

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
80004814:	ff010113          	addi	sp,sp,-16
80004818:	00812623          	sw	s0,12(sp)
8000481c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:111
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
80004820:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:112 (discriminator 1)
	for( ;; );
80004824:	0000006f          	j	80004824 <vApplicationMallocFailedHook+0x10>

80004828 <vApplicationIdleHook>:
vApplicationIdleHook():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:117
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
80004828:	ff010113          	addi	sp,sp,-16
8000482c:	00812623          	sw	s0,12(sp)
80004830:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:127
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
80004834:	00000013          	nop
80004838:	00c12403          	lw	s0,12(sp)
8000483c:	01010113          	addi	sp,sp,16
80004840:	00008067          	ret

80004844 <vUartTestTask1>:
vUartTestTask1():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:144
	for( ;; );
}
/*-----------------------------------------------------------*/

static void vUartTestTask1( void *pvParameters )
{
80004844:	fe010113          	addi	sp,sp,-32
80004848:	00112e23          	sw	ra,28(sp)
8000484c:	00812c23          	sw	s0,24(sp)
80004850:	02010413          	addi	s0,sp,32
80004854:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:148 (discriminator 1)
	( void ) pvParameters;
	for( ;; )
	{
		UART_polled_tx_string( &g_uart, (const uint8_t *)"Task - 1\r\n" );
80004858:	800057b7          	lui	a5,0x80005
8000485c:	d3c78593          	addi	a1,a5,-708 # 80004d3c <__stack_top+0xfffc5b4c>
80004860:	8001f7b7          	lui	a5,0x8001f
80004864:	11478513          	addi	a0,a5,276 # 8001f114 <__stack_top+0xfffdff24>
80004868:	895fc0ef          	jal	ra,800010fc <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:149 (discriminator 1)
	    vTaskDelay(2);
8000486c:	00200513          	li	a0,2
80004870:	f58fd0ef          	jal	ra,80001fc8 <vTaskDelay>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:148 (discriminator 1)
		UART_polled_tx_string( &g_uart, (const uint8_t *)"Task - 1\r\n" );
80004874:	fe5ff06f          	j	80004858 <vUartTestTask1+0x14>

80004878 <vUartTestTask2>:
vUartTestTask2():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:157


/*-----------------------------------------------------------*/

static void vUartTestTask2( void *pvParameters )
{
80004878:	fe010113          	addi	sp,sp,-32
8000487c:	00112e23          	sw	ra,28(sp)
80004880:	00812c23          	sw	s0,24(sp)
80004884:	02010413          	addi	s0,sp,32
80004888:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:161 (discriminator 1)
	( void ) pvParameters;
	for( ;; )
	{
		UART_polled_tx_string( &g_uart, (const uint8_t *)"Task - 2\r\n" );
8000488c:	800057b7          	lui	a5,0x80005
80004890:	d4878593          	addi	a1,a5,-696 # 80004d48 <__stack_top+0xfffc5b58>
80004894:	8001f7b7          	lui	a5,0x8001f
80004898:	11478513          	addi	a0,a5,276 # 8001f114 <__stack_top+0xfffdff24>
8000489c:	861fc0ef          	jal	ra,800010fc <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:162 (discriminator 1)
	    vTaskDelay(5);
800048a0:	00500513          	li	a0,5
800048a4:	f24fd0ef          	jal	ra,80001fc8 <vTaskDelay>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:161 (discriminator 1)
		UART_polled_tx_string( &g_uart, (const uint8_t *)"Task - 2\r\n" );
800048a8:	fe5ff06f          	j	8000488c <vUartTestTask2+0x14>

800048ac <GlobalManagerTask>:
GlobalManagerTask():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:168
	}
}

/*-----------------------------------------------------------*/

static void GlobalManagerTask( void *pvParameters ){
800048ac:	fd010113          	addi	sp,sp,-48
800048b0:	02112623          	sw	ra,44(sp)
800048b4:	02812423          	sw	s0,40(sp)
800048b8:	03010413          	addi	s0,sp,48
800048bc:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:172
	( void ) pvParameters;
	int tick;
	// Initialize the priority vector with the pattern policy
	GeneratePatternMatrix();
800048c0:	cfcff0ef          	jal	ra,80003dbc <GeneratePatternMatrix>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:175

	// Initialize the System Tiles Info
	API_TilesReset();
800048c4:	be0ff0ef          	jal	ra,80003ca4 <API_TilesReset>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:178

	// Initialize the applications vector
    API_ApplicationsReset();
800048c8:	b7cff0ef          	jal	ra,80003c44 <API_ApplicationsReset>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:181

	// Informs the Repository that the GLOBALMASTER is ready to receive the application info
	API_RepositoryWakeUp();
800048cc:	824ff0ef          	jal	ra,800038f0 <API_RepositoryWakeUp>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:184 (discriminator 1)

	for(;;){
		tick = xTaskGetTickCount();
800048d0:	995fd0ef          	jal	ra,80002264 <xTaskGetTickCount>
800048d4:	00050793          	mv	a5,a0
800048d8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:185 (discriminator 1)
		printsv("GlobalMasterActive", tick);
800048dc:	fec42583          	lw	a1,-20(s0)
800048e0:	800057b7          	lui	a5,0x80005
800048e4:	d5478513          	addi	a0,a5,-684 # 80004d54 <__stack_top+0xfffc5b64>
800048e8:	bb8fe0ef          	jal	ra,80002ca0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:186 (discriminator 1)
		UART_polled_tx_string( &g_uart, (const uint8_t *)"GlobalMasterRoutine...\r\n" );
800048ec:	800057b7          	lui	a5,0x80005
800048f0:	d6878593          	addi	a1,a5,-664 # 80004d68 <__stack_top+0xfffc5b78>
800048f4:	8001f7b7          	lui	a5,0x8001f
800048f8:	11478513          	addi	a0,a5,276 # 8001f114 <__stack_top+0xfffdff24>
800048fc:	801fc0ef          	jal	ra,800010fc <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:189 (discriminator 1)

		// Checks if there is some task to allocate...
		API_AllocateTasks(tick);
80004900:	fec42783          	lw	a5,-20(s0)
80004904:	00078513          	mv	a0,a5
80004908:	d5cff0ef          	jal	ra,80003e64 <API_AllocateTasks>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:194 (discriminator 1)




		vTaskDelay(1);
8000490c:	00100513          	li	a0,1
80004910:	eb8fd0ef          	jal	ra,80001fc8 <vTaskDelay>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:184 (discriminator 1)
		tick = xTaskGetTickCount();
80004914:	fbdff06f          	j	800048d0 <GlobalManagerTask+0x24>

80004918 <write>:
write():
80004918:	00000797          	auipc	a5,0x0
8000491c:	48878793          	addi	a5,a5,1160 # 80004da0 <_impure_ptr>
80004920:	00060693          	mv	a3,a2
80004924:	00058613          	mv	a2,a1
80004928:	00050593          	mv	a1,a0
8000492c:	0007a503          	lw	a0,0(a5)
80004930:	0040006f          	j	80004934 <_write_r>

80004934 <_write_r>:
_write_r():
80004934:	ff010113          	addi	sp,sp,-16
80004938:	00812423          	sw	s0,8(sp)
8000493c:	00050413          	mv	s0,a0
80004940:	00058513          	mv	a0,a1
80004944:	00060593          	mv	a1,a2
80004948:	00068613          	mv	a2,a3
8000494c:	0001a797          	auipc	a5,0x1a
80004950:	0c07a623          	sw	zero,204(a5) # 8001ea18 <errno>
80004954:	00112623          	sw	ra,12(sp)
80004958:	c18fc0ef          	jal	ra,80000d70 <_write>
8000495c:	fff00793          	li	a5,-1
80004960:	00f51c63          	bne	a0,a5,80004978 <_write_r+0x44>
80004964:	0001a797          	auipc	a5,0x1a
80004968:	0b478793          	addi	a5,a5,180 # 8001ea18 <errno>
8000496c:	0007a783          	lw	a5,0(a5)
80004970:	00078463          	beqz	a5,80004978 <_write_r+0x44>
80004974:	00f42023          	sw	a5,0(s0)
80004978:	00c12083          	lw	ra,12(sp)
8000497c:	00812403          	lw	s0,8(sp)
80004980:	01010113          	addi	sp,sp,16
80004984:	00008067          	ret
	...
80004990:	6568                	flw	fa0,76(a0)
80004992:	6c6c                	flw	fa1,92(s0)
80004994:	0000006f          	j	80004994 <_write_r+0x60>
80004998:	6544                	flw	fs1,12(a0)
8000499a:	6574                	flw	fa3,76(a0)
8000499c:	69657463          	bleu	s6,a0,80005024 <__sbss_end+0x124>
800049a0:	7520                	flw	fs0,104(a0)
800049a2:	616d                	addi	sp,sp,240
800049a4:	6320                	flw	fs0,64(a4)
800049a6:	6168                	flw	fa0,68(a0)
800049a8:	616d                	addi	sp,sp,240
800049aa:	6164                	flw	fs1,68(a0)
800049ac:	5420                	lw	s0,104(s0)
800049ae:	5345                	li	t1,-15
800049b0:	4554                	lw	a3,12(a0)
800049b2:	6420                	flw	fs0,72(s0)
800049b4:	2065                	jal	80004a5c <_write_r+0x128>
800049b6:	74736973          	csrrsi	s2,0x747,6
800049ba:	6d65                	lui	s10,0x19
800049bc:	2161                	jal	80004e44 <impure_data+0x14>
800049be:	000a                	c.slli	zero,0x2
800049c0:	7261                	lui	tp,0xffff8
800049c2:	00203067          	0x203067
800049c6:	0000                	unimp
800049c8:	7261                	lui	tp,0xffff8
800049ca:	00203167          	0x203167
800049ce:	0000                	unimp
800049d0:	7261                	lui	tp,0xffff8
800049d2:	00203267          	0x203267
800049d6:	0000                	unimp
800049d8:	7261                	lui	tp,0xffff8
800049da:	00203367          	0x203367
800049de:	0000                	unimp
800049e0:	7261                	lui	tp,0xffff8
800049e2:	00203467          	0x203467
800049e6:	0000                	unimp
800049e8:	7974                	flw	fa3,116(a0)
800049ea:	6570                	flw	fa2,76(a0)
800049ec:	0020                	addi	s0,sp,8
800049ee:	0000                	unimp
800049f0:	74737953          	0x74737953
800049f4:	6d65                	lui	s10,0x19
800049f6:	6c6c6163          	bltu	s8,t1,800050b8 <__sbss_end+0x1b8>
800049fa:	6e20                	flw	fs0,88(a2)
800049fc:	206fa3c3          	fmadd.s	ft7,ft11,ft6,ft4,rdn
80004a00:	6469                	lui	s0,0x1a
80004a02:	6e65                	lui	t3,0x19
80004a04:	6974                	flw	fa3,84(a0)
80004a06:	6966                	flw	fs2,88(sp)
80004a08:	61646163          	bltu	s0,s6,8000500a <__sbss_end+0x10a>
80004a0c:	0a21                	addi	s4,s4,8
80004a0e:	0000                	unimp
80004a10:	7274                	flw	fa3,100(a2)
80004a12:	7061                	c.lui	zero,0xffff8
80004a14:	000a                	c.slli	zero,0x2
80004a16:	0000                	unimp
80004a18:	7830                	flw	fa2,112(s0)
80004a1a:	0000                	unimp
80004a1c:	500a                	0x500a
80004a1e:	6f72                	flw	ft10,28(sp)
80004a20:	206d6167          	0x206d6167
80004a24:	6168                	flw	fa0,68(a0)
80004a26:	78652073          	csrs	0x786,a0
80004a2a:	7469                	lui	s0,0xffffa
80004a2c:	6465                	lui	s0,0x19
80004a2e:	7720                	flw	fs0,104(a4)
80004a30:	7469                	lui	s0,0xffffa
80004a32:	2068                	fld	fa0,192(s0)
80004a34:	65646f63          	bltu	s0,s6,80005092 <__sbss_end+0x192>
80004a38:	003a                	c.slli	zero,0xe
80004a3a:	0000                	unimp
80004a3c:	000d                	c.nop	3
80004a3e:	0000                	unimp
80004a40:	4449                	li	s0,18
80004a42:	454c                	lw	a1,12(a0)
80004a44:	0000                	unimp
80004a46:	0000                	unimp
80004a48:	000a                	c.slli	zero,0x2
80004a4a:	0000                	unimp
80004a4c:	654d                	lui	a0,0x13
80004a4e:	736e                	flw	ft6,248(sp)
80004a50:	6761                	lui	a4,0x18
80004a52:	6d65                	lui	s10,0x19
80004a54:	6520                	flw	fs0,72(a0)
80004a56:	766e                	flw	fa2,248(sp)
80004a58:	6169                	addi	sp,sp,208
80004a5a:	6164                	flw	fs1,68(a0)
80004a5c:	0a21                	addi	s4,s4,8
80004a5e:	0000                	unimp
80004a60:	4e49                	li	t3,18
80004a62:	4554                	lw	a3,12(a0)
80004a64:	5252                	lw	tp,52(sp)
80004a66:	5055                	c.li	zero,-11
80004a68:	4954                	lw	a3,20(a0)
80004a6a:	54204e4f          	0x54204e4f
80004a6e:	0a58                	addi	a4,sp,276
80004a70:	0000                	unimp
80004a72:	0000                	unimp
80004a74:	3d3d                	jal	800048b2 <GlobalManagerTask+0x6>
80004a76:	3d3d                	jal	800048b4 <GlobalManagerTask+0x8>
80004a78:	3d3d                	jal	800048b6 <GlobalManagerTask+0xa>
80004a7a:	3d3d                	jal	800048b8 <GlobalManagerTask+0xc>
80004a7c:	3d3d                	jal	800048ba <GlobalManagerTask+0xe>
80004a7e:	3d3d                	jal	800048bc <GlobalManagerTask+0x10>
80004a80:	3d3d                	jal	800048be <GlobalManagerTask+0x12>
80004a82:	3d3d                	jal	800048c0 <GlobalManagerTask+0x14>
80004a84:	3d3d                	jal	800048c2 <GlobalManagerTask+0x16>
80004a86:	3d3d                	jal	800048c4 <GlobalManagerTask+0x18>
80004a88:	3d3d                	jal	800048c6 <GlobalManagerTask+0x1a>
80004a8a:	3d3d                	jal	800048c8 <GlobalManagerTask+0x1c>
80004a8c:	3d3d                	jal	800048ca <GlobalManagerTask+0x1e>
80004a8e:	000a                	c.slli	zero,0x2
80004a90:	4e49                	li	t3,18
80004a92:	4554                	lw	a3,12(a0)
80004a94:	5252                	lw	tp,52(sp)
80004a96:	5055                	c.li	zero,-11
80004a98:	4954                	lw	a3,20(a0)
80004a9a:	52204e4f          	fnmadd.d	ft8,ft0,ft2,fa0,rmm
80004a9e:	0a58                	addi	a4,sp,276
80004aa0:	0000                	unimp
80004aa2:	0000                	unimp
80004aa4:	6c46                	flw	fs8,80(sp)
80004aa6:	7469                	lui	s0,0xffffa
80004aa8:	3020                	fld	fs0,96(s0)
80004aaa:	3a20                	fld	fs0,112(a2)
80004aac:	0020                	addi	s0,sp,8
80004aae:	0000                	unimp
80004ab0:	6c46                	flw	fs8,80(sp)
80004ab2:	7469                	lui	s0,0xffffa
80004ab4:	3120                	fld	fs0,96(a0)
80004ab6:	3a20                	fld	fs0,112(a2)
80004ab8:	0020                	addi	s0,sp,8
80004aba:	0000                	unimp
80004abc:	6c46                	flw	fs8,80(sp)
80004abe:	7469                	lui	s0,0xffffa
80004ac0:	3220                	fld	fs0,96(a2)
80004ac2:	3a20                	fld	fs0,112(a2)
80004ac4:	0020                	addi	s0,sp,8
80004ac6:	0000                	unimp
80004ac8:	6c46                	flw	fs8,80(sp)
80004aca:	7469                	lui	s0,0xffffa
80004acc:	3320                	fld	fs0,96(a4)
80004ace:	3a20                	fld	fs0,112(a2)
80004ad0:	0020                	addi	s0,sp,8
80004ad2:	0000                	unimp
80004ad4:	6c46                	flw	fs8,80(sp)
80004ad6:	7469                	lui	s0,0xffffa
80004ad8:	3420                	fld	fs0,104(s0)
80004ada:	3a20                	fld	fs0,112(a2)
80004adc:	0020                	addi	s0,sp,8
80004ade:	0000                	unimp
80004ae0:	6c46                	flw	fs8,80(sp)
80004ae2:	7469                	lui	s0,0xffffa
80004ae4:	3520                	fld	fs0,104(a0)
80004ae6:	3a20                	fld	fs0,112(a2)
80004ae8:	0020                	addi	s0,sp,8
80004aea:	0000                	unimp
80004aec:	6c46                	flw	fs8,80(sp)
80004aee:	7469                	lui	s0,0xffffa
80004af0:	3620                	fld	fs0,104(a2)
80004af2:	3a20                	fld	fs0,112(a2)
80004af4:	0020                	addi	s0,sp,8
80004af6:	0000                	unimp
80004af8:	6c46                	flw	fs8,80(sp)
80004afa:	7469                	lui	s0,0xffffa
80004afc:	3720                	fld	fs0,104(a4)
80004afe:	3a20                	fld	fs0,112(a2)
80004b00:	0020                	addi	s0,sp,8
80004b02:	0000                	unimp
80004b04:	6c46                	flw	fs8,80(sp)
80004b06:	7469                	lui	s0,0xffffa
80004b08:	3820                	fld	fs0,112(s0)
80004b0a:	3a20                	fld	fs0,112(a2)
80004b0c:	0020                	addi	s0,sp,8
80004b0e:	0000                	unimp
80004b10:	6c46                	flw	fs8,80(sp)
80004b12:	7469                	lui	s0,0xffffa
80004b14:	3920                	fld	fs0,112(a0)
80004b16:	3a20                	fld	fs0,112(a2)
80004b18:	0020                	addi	s0,sp,8
80004b1a:	0000                	unimp
80004b1c:	6c46                	flw	fs8,80(sp)
80004b1e:	7469                	lui	s0,0xffffa
80004b20:	3120                	fld	fs0,96(a0)
80004b22:	3a30                	fld	fa2,112(a2)
80004b24:	0020                	addi	s0,sp,8
80004b26:	0000                	unimp
80004b28:	6c46                	flw	fs8,80(sp)
80004b2a:	7469                	lui	s0,0xffffa
80004b2c:	3120                	fld	fs0,96(a0)
80004b2e:	3a31                	jal	8000444a <API_GetTaskSlotFromTile+0x9e>
80004b30:	0020                	addi	s0,sp,8
80004b32:	0000                	unimp
80004b34:	6c46                	flw	fs8,80(sp)
80004b36:	7469                	lui	s0,0xffffa
80004b38:	3120                	fld	fs0,96(a0)
80004b3a:	3a32                	fld	fs4,296(sp)
80004b3c:	0020                	addi	s0,sp,8
80004b3e:	0000                	unimp
80004b40:	7245                	lui	tp,0xffff1
80004b42:	6f72                	flw	ft10,28(sp)
80004b44:	6120                	flw	fs0,64(a0)
80004b46:	6c61206f          	j	8001720c <__global_pointer$+0x11c7c>
80004b4a:	7261636f          	jal	t1,8001b270 <__global_pointer$+0x15ce0>
80004b4e:	7520                	flw	fs0,104(a0)
80004b50:	616d                	addi	sp,sp,240
80004b52:	7420                	flw	fs0,104(s0)
80004b54:	7361                	lui	t1,0xffff8
80004b56:	0020216b          	0x20216b
80004b5a:	0000                	unimp
80004b5c:	6154                	flw	fa3,4(a0)
80004b5e:	6572                	flw	fa0,28(sp)
80004b60:	6166                	flw	ft2,88(sp)
80004b62:	6120                	flw	fs0,64(a0)
80004b64:	6f6c                	flw	fa1,92(a4)
80004b66:	61646163          	bltu	s0,s6,80005168 <__sbss_end+0x268>
80004b6a:	6320                	flw	fs0,64(a4)
80004b6c:	73206d6f          	jal	s10,8000b29e <__global_pointer$+0x5d0e>
80004b70:	6375                	lui	t1,0x1d
80004b72:	7365                	lui	t1,0xffff9
80004b74:	20216f73          	csrrsi	t5,hedeleg,2
80004b78:	0000                	unimp
80004b7a:	0000                	unimp
80004b7c:	5245                	li	tp,-15
80004b7e:	4f52                	lw	t5,20(sp)
80004b80:	2052                	fld	ft0,272(sp)
80004b82:	7845                	lui	a6,0xffff1
80004b84:	6574                	flw	fa3,76(a0)
80004b86:	6e72                	flw	ft8,28(sp)
80004b88:	6c61                	lui	s8,0x18
80004b8a:	325f 495f 5152      	0x5152495f325f
80004b90:	6148                	flw	fa0,4(a0)
80004b92:	646e                	flw	fs0,216(sp)
80004b94:	656c                	flw	fa1,76(a0)
80004b96:	2072                	fld	ft0,280(sp)
80004b98:	6e55                	lui	t3,0x15
80004b9a:	776f6e6b          	0x776f6e6b
80004b9e:	2d6e                	fld	fs10,216(sp)
80004ba0:	76726553          	0x76726553
80004ba4:	6369                	lui	t1,0x1a
80004ba6:	0065                	c.nop	25
80004ba8:	7266                	flw	ft4,120(sp)
80004baa:	203a6d6f          	jal	s10,800ab5ac <__stack_top+0x6c3bc>
80004bae:	0000                	unimp
80004bb0:	736d                	lui	t1,0xffffb
80004bb2:	6f702067          	0x6f702067
80004bb6:	6e69                	lui	t3,0x1a
80004bb8:	6574                	flw	fa3,76(a0)
80004bba:	3a72                	fld	fs4,312(sp)
80004bbc:	0020                	addi	s0,sp,8
80004bbe:	0000                	unimp
80004bc0:	694d                	lui	s2,0x13
80004bc2:	686e                	flw	fa6,216(sp)
80004bc4:	2061                	jal	80004c4c <_write_r+0x318>
80004bc6:	6174                	flw	fa3,68(a0)
80004bc8:	49206b73          	csrrsi	s6,0x492,0
80004bcc:	3a44                	fld	fs1,176(a2)
80004bce:	0020                	addi	s0,sp,8
80004bd0:	654e                	flw	fa0,208(sp)
80004bd2:	70612077          	0x70612077
80004bd6:	6c70                	flw	fa2,92(s0)
80004bd8:	6369                	lui	t1,0x1a
80004bda:	7461                	lui	s0,0xffff8
80004bdc:	6f69                	lui	t5,0x1a
80004bde:	206e                	fld	ft0,216(sp)
80004be0:	6572                	flw	fa0,28(sp)
80004be2:	74736967          	0x74736967
80004be6:	7265                	lui	tp,0xffff9
80004be8:	6465                	lui	s0,0x19
80004bea:	2d20                	fld	fs0,88(a0)
80004bec:	4920                	lw	s0,80(a0)
80004bee:	3a44                	fld	fs1,176(a2)
80004bf0:	0020                	addi	s0,sp,8
80004bf2:	0000                	unimp
80004bf4:	63656843          	fmadd.d	fa6,fa0,fs6,fa2,unknown
80004bf8:	676e696b          	0x676e696b
80004bfc:	6120                	flw	fs0,64(a0)
80004bfe:	7070                	flw	fa2,100(s0)
80004c00:	0020                	addi	s0,sp,8
80004c02:	0000                	unimp
80004c04:	5420                	lw	s0,104(s0)
80004c06:	4349                	li	t1,18
80004c08:	00203a4b          	fnmsub.s	fs4,ft0,ft2,ft0,rup
80004c0c:	4e09                	li	t3,2
80004c0e:	3a52                	fld	fs4,304(sp)
80004c10:	0020                	addi	s0,sp,8
80004c12:	0000                	unimp
80004c14:	4c20                	lw	s0,88(s0)
80004c16:	00203a53          	fadd.s	fs4,ft0,ft2,rup
80004c1a:	0000                	unimp
80004c1c:	5320                	lw	s0,96(a4)
80004c1e:	4f4c                	lw	a1,28(a4)
80004c20:	5354                	lw	a3,36(a4)
80004c22:	203a                	fld	ft0,392(sp)
80004c24:	0000                	unimp
80004c26:	0000                	unimp
80004c28:	4e09                	li	t3,2
80004c2a:	3a54                	fld	fa3,176(a2)
80004c2c:	0020                	addi	s0,sp,8
80004c2e:	0000                	unimp
80004c30:	5420                	lw	s0,104(s0)
80004c32:	7361                	lui	t1,0xffff8
80004c34:	0000206b          	0x206b
80004c38:	7041                	c.lui	zero,0xffff0
80004c3a:	6c70                	flw	fa2,92(s0)
80004c3c:	6369                	lui	t1,0x1a
80004c3e:	7461                	lui	s0,0xffff8
80004c40:	6f69                	lui	t5,0x1a
80004c42:	206e                	fld	ft0,216(sp)
80004c44:	0000                	unimp
80004c46:	0000                	unimp
80004c48:	7320                	flw	fs0,96(a4)
80004c4a:	6f6c                	flw	fa1,92(a4)
80004c4c:	2074                	fld	fa3,192(s0)
80004c4e:	0000                	unimp
80004c50:	6c41                	lui	s8,0x10
80004c52:	6461636f          	jal	t1,8001b298 <__global_pointer$+0x15d08>
80004c56:	6520736f          	jal	t1,8000c2a8 <__global_pointer$+0x6d18>
80004c5a:	206d                	jal	80004d04 <_write_r+0x3d0>
80004c5c:	0000                	unimp
80004c5e:	0000                	unimp
80004c60:	0a0d                	addi	s4,s4,3
80004c62:	7246                	flw	ft4,112(sp)
80004c64:	6565                	lui	a0,0x19
80004c66:	5452                	lw	s0,52(sp)
80004c68:	4520534f          	0x4520534f
80004c6c:	6178                	flw	fa4,68(a0)
80004c6e:	706d                	c.lui	zero,0xffffb
80004c70:	656c                	flw	fa1,76(a0)
80004c72:	0a0d                	addi	s4,s4,3
80004c74:	0000                	unimp
80004c76:	0000                	unimp
80004c78:	200a                	fld	ft0,128(sp)
80004c7a:	6f726843          	fmadd.q	fa6,ft4,fs7,fa3,unknown
80004c7e:	6f6e                	flw	ft10,216(sp)
80004c80:	6c702073          	csrr	zero,0x6c7
80004c84:	7461                	lui	s0,0xffff8
80004c86:	6f66                	flw	ft10,88(sp)
80004c88:	6d72                	flw	fs10,28(sp)
80004c8a:	6920                	flw	fs0,80(a0)
80004c8c:	696e                	flw	fs2,216(sp)
80004c8e:	6974                	flw	fa3,84(a0)
80004c90:	6c61                	lui	s8,0x18
80004c92:	7a69                	lui	s4,0xffffa
80004c94:	6e69                	lui	t3,0x1a
80004c96:	2e2e2e67          	0x2e2e2e67
80004c9a:	0a20                	addi	s0,sp,280
80004c9c:	0000                	unimp
80004c9e:	0000                	unimp
80004ca0:	200a                	fld	ft0,128(sp)
80004ca2:	6854                	flw	fa3,20(s0)
80004ca4:	7369                	lui	t1,0xffffa
80004ca6:	7420                	flw	fs0,104(s0)
80004ca8:	7265                	lui	tp,0xffff9
80004caa:	696d                	lui	s2,0x1b
80004cac:	616e                	flw	ft2,216(sp)
80004cae:	206c                	fld	fa1,192(s0)
80004cb0:	6562                	flw	fa0,24(sp)
80004cb2:	6f6c                	flw	fa1,92(a4)
80004cb4:	676e                	flw	fa4,216(sp)
80004cb6:	6f742073          	csrs	0x6f7,s0
80004cba:	7420                	flw	fs0,104(s0)
80004cbc:	6568                	flw	fa0,76(a0)
80004cbe:	6120                	flw	fs0,64(a0)
80004cc0:	6464                	flw	fs1,76(s0)
80004cc2:	6572                	flw	fa0,28(sp)
80004cc4:	203a7373          	csrrci	t1,hideleg,20
80004cc8:	0000                	unimp
80004cca:	0000                	unimp
80004ccc:	000a                	c.slli	zero,0x2
80004cce:	0000                	unimp
80004cd0:	200a                	fld	ft0,128(sp)
80004cd2:	6854                	flw	fa3,20(s0)
80004cd4:	7369                	lui	t1,0xffffa
80004cd6:	7020                	flw	fs0,96(s0)
80004cd8:	6f72                	flw	ft10,28(sp)
80004cda:	73736563          	bltu	t1,s7,80005404 <__sbss_end+0x504>
80004cde:	6920726f          	jal	tp,8000c370 <__global_pointer$+0x6de0>
80004ce2:	68742073          	csrs	0x687,s0
80004ce6:	2065                	jal	80004d8e <_write_r+0x45a>
80004ce8:	626f6c47          	fmsub.d	fs8,ft10,ft6,fa2,unknown
80004cec:	6c61                	lui	s8,0x18
80004cee:	4d20                	lw	s0,88(a0)
80004cf0:	7361                	lui	t1,0xffff8
80004cf2:	6574                	flw	fa3,76(a0)
80004cf4:	3a72                	fld	fs4,312(sp)
80004cf6:	0a20                	addi	s0,sp,280
80004cf8:	0000                	unimp
80004cfa:	0000                	unimp
80004cfc:	626f6c47          	fmsub.d	fs8,ft10,ft6,fa2,unknown
80004d00:	6c61                	lui	s8,0x18
80004d02:	614d                	addi	sp,sp,176
80004d04:	72657473          	csrrci	s0,0x726,10
80004d08:	0000                	unimp
80004d0a:	0000                	unimp
80004d0c:	200a                	fld	ft0,128(sp)
80004d0e:	6854                	flw	fa3,20(s0)
80004d10:	7369                	lui	t1,0xffffa
80004d12:	7020                	flw	fs0,96(s0)
80004d14:	6f72                	flw	ft10,28(sp)
80004d16:	73736563          	bltu	t1,s7,80005440 <__sbss_end+0x540>
80004d1a:	6920726f          	jal	tp,8000c3ac <__global_pointer$+0x6e1c>
80004d1e:	20612073          	csrs	0x206,sp
80004d22:	76616c53          	0x76616c53
80004d26:	3a65                	jal	800046de <main+0x42>
80004d28:	0a20                	addi	s0,sp,280
80004d2a:	0000                	unimp
80004d2c:	4155                	li	sp,21
80004d2e:	7472                	flw	fs0,60(sp)
80004d30:	0031                	c.nop	12
80004d32:	0000                	unimp
80004d34:	4155                	li	sp,21
80004d36:	7472                	flw	fs0,60(sp)
80004d38:	0032                	c.slli	zero,0xc
80004d3a:	0000                	unimp
80004d3c:	6154                	flw	fa3,4(a0)
80004d3e:	2d206b73          	csrrsi	s6,0x2d2,0
80004d42:	3120                	fld	fs0,96(a0)
80004d44:	0a0d                	addi	s4,s4,3
80004d46:	0000                	unimp
80004d48:	6154                	flw	fa3,4(a0)
80004d4a:	2d206b73          	csrrsi	s6,0x2d2,0
80004d4e:	3220                	fld	fs0,96(a2)
80004d50:	0a0d                	addi	s4,s4,3
80004d52:	0000                	unimp
80004d54:	626f6c47          	fmsub.d	fs8,ft10,ft6,fa2,unknown
80004d58:	6c61                	lui	s8,0x18
80004d5a:	614d                	addi	sp,sp,176
80004d5c:	72657473          	csrrci	s0,0x726,10
80004d60:	6341                	lui	t1,0x10
80004d62:	6974                	flw	fa3,84(a0)
80004d64:	6576                	flw	fa0,92(sp)
80004d66:	0000                	unimp
80004d68:	626f6c47          	fmsub.d	fs8,ft10,ft6,fa2,unknown
80004d6c:	6c61                	lui	s8,0x18
80004d6e:	614d                	addi	sp,sp,176
80004d70:	72657473          	csrrci	s0,0x726,10
80004d74:	6f52                	flw	ft10,20(sp)
80004d76:	7475                	lui	s0,0xffffd
80004d78:	6e69                	lui	t3,0x1a
80004d7a:	2e65                	jal	80005132 <__sbss_end+0x232>
80004d7c:	2e2e                	fld	ft8,200(sp)
80004d7e:	0a0d                	addi	s4,s4,3
	...
