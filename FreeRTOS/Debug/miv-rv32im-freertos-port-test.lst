
miv-rv32im-freertos-port-test.elf:     file format elf32-littleriscv
miv-rv32im-freertos-port-test.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000000

Program Header:
    LOAD off    0x00001000 vaddr 0x80000000 paddr 0x80000000 align 2**12
         filesz 0x00007720 memsz 0x00041e10 flags rwx

Sections:
Idx Name           Size      VMA       LMA       File off  Algn  Flags
  0 .text          00007620  80000000  80000000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sdata         00000020  80007620  80007620  00008620  2**4  CONTENTS, ALLOC, LOAD, DATA
  2 .data          000000e0  80007640  80007640  00008640  2**4  CONTENTS, ALLOC, LOAD, DATA
  3 .sbss          00000070  80007720  80007720  00008720  2**4  ALLOC
  4 .bss           0001a680  80007790  80007790  00008720  2**4  ALLOC
  5 .heap          00010000  80021e10  80021e10  00008720  2**4  ALLOC
  6 .stack         00010000  80031e10  80031e10  00008720  2**4  ALLOC
  7 .debug_line    0000b2aa  00000000  00000000  00008720  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_info    0000f5f9  00000000  00000000  000139ca  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev  00002a6f  00000000  00000000  00022fc3  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000920  00000000  00000000  00025a38  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_str     00012ba8  00000000  00000000  00026358  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges  000007f0  00000000  00000000  00038f00  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro   000058d7  00000000  00000000  000396f0  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment       00000039  00000000  00000000  0003efc7  2**0  CONTENTS, READONLY
 15 .debug_frame   000021c0  00000000  00000000  0003f000  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
80000000 l    d  .text	00000000 .text
80007620 l    d  .sdata	00000000 .sdata
80007640 l    d  .data	00000000 .data
80007720 l    d  .sbss	00000000 .sbss
80007790 l    d  .bss	00000000 .bss
80021e10 l    d  .heap	00000000 .heap
80031e10 l    d  .stack	00000000 .stack
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./riscv_hal/entry.o
8000000c l       .text	00000000 handle_reset
80000004 l       .text	00000000 nmi_vector
80000008 l       .text	00000000 trap_vector
80000030 l       .text	00000000 trap_entry
00000000 l    df *ABS*	00000000 init.c
80000160 l     F .text	00000050 zero_section
00000000 l    df *ABS*	00000000 riscv_hal.c
80000238 l     F .text	000000b8 PLIC_DisableIRQ
800002f0 l     F .text	00000044 PLIC_ClaimIRQ
80000334 l     F .text	0000004c PLIC_CompleteIRQ
80007720 l     O .sbss	00000008 g_systick_increment
00000000 l    df *ABS*	00000000 riscv_hal_stubs.c
00000000 l    df *ABS*	00000000 syscall.c
80007728 l     O .sbss	00000008 g_stdio_uart
80007730 l     O .sbss	00000004 g_stdio_uart_init_done
80000e38 l     F .text	00000030 stub
00000000 l    df *ABS*	00000000 core_uart_apb.c
00000000 l    df *ABS*	00000000 heap_2.c
80007790 l     O .bss	00019000 ucHeap
80007734 l     O .sbss	00000008 xStart
8000773c l     O .sbss	00000008 xEnd
80007620 l     O .sdata	00000004 xFreeBytesRemaining
80007744 l     O .sbss	00000004 xHeapHasBeenInitialised.2777
8000154c l     F .text	00000074 prvHeapInit
00000000 l    df *ABS*	00000000 port.c
800015c0 l     F .text	0000004c raise_soft_interrupt
80007624 l     O .sdata	00000004 uxCriticalNesting
80007628 l     O .sdata	00000004 mtime
8000762c l     O .sdata	00000004 mtimecmp
80001680 l     F .text	000000cc prvSetNextTimerInterrupt
80001818 l     F .text	0000002c prvTaskExitError
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 tasks.c
80020790 l     O .bss	00000064 pxReadyTasksLists
800207f4 l     O .bss	00000014 xDelayedTaskList1
80020808 l     O .bss	00000014 xDelayedTaskList2
80007750 l     O .sbss	00000004 pxDelayedTaskList
80007754 l     O .sbss	00000004 pxOverflowDelayedTaskList
8002081c l     O .bss	00000014 xPendingReadyList
80020830 l     O .bss	00000014 xTasksWaitingTermination
80007758 l     O .sbss	00000004 uxTasksDeleted
80020844 l     O .bss	00000014 xSuspendedTaskList
8000775c l     O .sbss	00000004 uxCurrentNumberOfTasks
80007760 l     O .sbss	00000004 xTickCount
80007764 l     O .sbss	00000004 uxTopReadyPriority
80007768 l     O .sbss	00000004 xSchedulerRunning
8000776c l     O .sbss	00000004 uxPendedTicks
80007770 l     O .sbss	00000004 xYieldPending
80007774 l     O .sbss	00000004 xNumOfOverflows
80007778 l     O .sbss	00000004 uxTaskNumber
8000777c l     O .sbss	00000004 xNextTaskUnblockTime
80007780 l     O .sbss	00000004 uxSchedulerSuspended
80002ab4 l     F .text	000000c0 prvAllocateTCBAndStack
80002794 l     F .text	00000138 prvInitialiseTCBVariables
800028cc l     F .text	000000c0 prvInitialiseTaskLists
80002bb4 l     F .text	00000060 prvResetNextTaskUnblockTime
80002a2c l     F .text	00000088 prvAddCurrentTaskToDelayedList
80002760 l     F .text	00000034 prvIdleTask
8000298c l     F .text	000000a0 prvCheckTasksWaitingTermination
80002b74 l     F .text	00000040 prvDeleteTCB
00000000 l    df *ABS*	00000000 chronos.c
80002c3c l     F .text	000000b4 PLIC_EnableIRQ
80002cf0 l     F .text	0000003c PLIC_SetPriority
00000000 l    df *ABS*	00000000 globalMaster.c
00000000 l    df *ABS*	00000000 applications.c
00000000 l    df *ABS*	00000000 packet.c
00000000 l    df *ABS*	00000000 main.c
800062e0 l     F .text	000000d0 PLIC_init
800066e0 l     F .text	00000684 NI_RX_Handler
8000664c l     F .text	00000094 GlobalManagerTask
80006564 l     F .text	000000e8 vUartAliveTask
00000000 l    df *ABS*	00000000 syswrite.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 impure.c
800076c0 l     O .data	00000060 impure_data
80001640 g     F .text	00000040 vPortExitCritical
00010000 g       *ABS*	00000000 STACK_SIZE
80020858 g     O .bss	00000004 SendingSlot
80000a10  w    F .text	00000020 External_11_IRQHandler
80007e20 g       .sdata	00000000 __global_pointer$
80002ea4 g     F .text	00000050 printsv
80007640 g       *ABS*	00000000 __data_load
800018d8 g     F .text	000000d8 SysTick_Handler
80000950  w    F .text	00000020 External_5_IRQHandler
80005f1c g     F .text	000000a8 API_PipeInitialization
800044a4 g     F .text	00000128 API_TilesReset
80001018 g       .text	00000000 HW_get_8bit_reg_field
8000314c g     F .text	00000080 reverse
80004008 g     F .text	00000074 API_AddPendingReq
800212d4 g     O .bss	00000024 priorityMatrix
8000624c g     F .text	00000094 API_checkPipe
8000774c g     O .sbss	00000004 pxCurrentTCB
80007720 g       .sbss	00000000 __sbss_start
80002d2c g     F .text	000000cc Chronos_init
800212d0 g     O .bss	00000004 errno
8002085c g     O .bss	000000f0 ServicePipe
80000f50 g       .text	00000000 HW_set_32bit_reg
80000b30  w    F .text	00000020 External_20_IRQHandler
800019b0 g     F .text	00000044 xPortStartScheduler
80000380 g     F .text	00000024 __enable_irq
80001ebc g     F .text	0000021c xTaskGenericCreate
80006110 g     F .text	000000a0 API_GetServiceSlot
80007620 g       .sdata	00000000 __sdata_start
80001480 g     F .text	000000cc vPortFree
8002094c g     O .bss	00000004 messageID
800033ac g     F .text	000000a0 API_PushSendQueue
80021e04 g     O .bss	00000008 g_uart
80000ff0 g       .text	00000000 HW_set_8bit_reg_field
80000bf0  w    F .text	00000020 External_26_IRQHandler
80000784 g     F .text	0000016c handle_trap
800043c0 g     F .text	00000084 API_GetApplicationFreeSlot
80001b90 g     F .text	00000088 vListInsertEnd
00080000 g       *ABS*	00000000 RAM_SIZE
800009f0  w    F .text	00000020 External_10_IRQHandler
800212f8 g     O .bss	00000780 applications
80002e68 g     F .text	0000003c printi
80001b68 g     F .text	00000028 vListInitialiseItem
80000c70  w    F .text	00000020 External_30_IRQHandler
80000ad0  w    F .text	00000020 External_17_IRQHandler
80031e10 g       .heap	00000000 _heap_end
80000de8 g     F .text	00000050 _isatty
80021e10 g       .bss	00000000 __bss_end
800004f0 g     F .text	00000294 handle_syscall
800041dc g     F .text	000001e4 API_AddApplication
800012a4 g     F .text	000001dc pvPortMalloc
80005fc4 g     F .text	0000014c API_GetMessageSlot
8000494c g     F .text	00000304 API_DealocateTask
800001b0 g     F .text	0000006c _init
80001b04 g     F .text	00000064 vListInitialise
80000fe0 g       .text	00000000 HW_set_8bit_reg
80000fe8 g       .text	00000000 HW_get_8bit_reg
80002450 g     F .text	00000038 xTaskGetTickCount
80004674 g     F .text	000002d8 API_AllocateTasks
80005734 g     F .text	000000b0 API_TaskListInit
800058fc g     F .text	000002d8 API_TaskAllocation
80004ee0 g     F .text	00000140 API_ClearTaskSlotFromTile
80005878 g     F .text	00000084 API_GetFreeTaskSlot
80007790 g       .sbss	00000000 __sbss_end
80005cb8 g     F .text	000000e4 API_TaskStart
80000f60 g       .text	00000000 HW_set_32bit_reg_field
80006d64 g     F .text	0000001c write
80005304 g     F .text	00000128 API_TaskAllocated
80006534 g     F .text	00000014 vApplicationMallocFailedHook
80000bd0  w    F .text	00000020 External_25_IRQHandler
80041e10 g       .stack	00000000 __stack_top
80000c50  w    F .text	00000020 External_29_IRQHandler
80020950 g     O .bss	00000034 incommingPacket
800020d8 g     F .text	000000dc vTaskDelete
800011f4 g     F .text	000000b0 UART_polled_tx_string
80000cb0 g     F .text	000000e8 write_hex
80000a50  w    F .text	00000020 External_13_IRQHandler
800030b0 g     F .text	00000050 External_2_IRQHandler
00010000 g       *ABS*	00000000 HEAP_SIZE
80000a30  w    F .text	00000020 External_12_IRQHandler
8000336c g     F .text	00000040 makeAddress
80001140 g     F .text	000000b4 UART_send
80002fb0 g     F .text	0000004c SendRaw
80000000 g       .text	00000000 _start
800022c8 g     F .text	00000028 vTaskSuspendAll
8000344c g     F .text	0000008c API_PopSendQueue
800003a4 g     F .text	000000a8 handle_m_timer_interrupt
80002df8 g     F .text	00000070 prints
80001cec g     F .text	00000098 uxListRemove
8000542c g     F .text	00000308 API_ApplicationStart
80002ffc g     F .text	00000094 NI_enable_irq
80007620 g       *ABS*	00000000 __sdata_load
80007720 g       .data	00000000 __data_end
80002674 g     F .text	000000ec vTaskSwitchContext
80000af0  w    F .text	00000020 External_18_IRQHandler
80000f88 g       .text	00000000 HW_get_32bit_reg_field
800031cc g     F .text	000001a0 myItoa
80000b70  w    F .text	00000020 External_22_IRQHandler
80000a90  w    F .text	00000020 External_15_IRQHandler
80001adc g     F .text	00000028 vPortYield
800057e4 g     F .text	00000094 API_GetCurrentTaskSlot
80000000 g       *ABS*	00000000 RAM_START_ADDRESS
80007790 g       .bss	00000000 __bss_start
80021a78 g     O .bss	00000318 TaskList
80000ab0  w    F .text	00000020 External_16_IRQHandler
80001d84 g     F .text	000000e8 memset
800063b0 g     F .text	00000184 main
80003100 g     F .text	0000004c mySwap
80001c18 g     F .text	000000d4 vListInsert
80000c30  w    F .text	00000020 External_28_IRQHandler
80003ecc g     F .text	0000013c API_CheckMessagePipe
80004444 g     F .text	00000060 API_ApplicationsReset
80002c14 g     F .text	00000028 xTaskGetCurrentTaskHandle
80000fa0 g       .text	00000000 HW_get_16bit_reg
80007640 g       .sdata	00000000 __sdata_end
80005d9c g     F .text	00000180 API_FinishRunningTask
80021d90 g     O .bss	00000004 NI_IRCount
80031e10 g       .heap	00000000 __heap_end
80000a70  w    F .text	00000020 External_14_IRQHandler
80004d84 g     F .text	0000015c API_GetTaskSlotFromTile
80004c50 g     F .text	00000134 getNextPriorityAddr
8000510c g     F .text	000001f8 API_RepositoryAllocation
8000021c g     F .text	0000001c _fini
800022f0 g     F .text	00000160 xTaskResumeAll
80002238 g     F .text	00000090 vTaskStartScheduler
8000377c g     F .text	000002fc API_SendMessage
80007640 g     O .data	00000080 ext_irq_handler_table
80020984 g     O .bss	00000020 SendingQueue
80006d80 g     F .text	00000054 _write_r
80000fa8 g       .text	00000000 HW_set_16bit_reg_field
80003610 g     F .text	0000016c API_AckTaskAllocation
800209a4 g     O .bss	00000004 SendingQueue_tail
80007630 g     O .sdata	00000004 _impure_ptr
80031e10 g       .stack	00000000 __stack_bottom
800019f4 g     F .text	000000e8 Software_IRQHandler
800061b0 g     F .text	0000009c API_ClearPipeSlot
80000c10  w    F .text	00000020 External_27_IRQHandler
800009b0  w    F .text	00000020 External_8_IRQHandler
800009d0  w    F .text	00000020 External_9_IRQHandler
80021e10 g       .heap	00000000 __heap_start
800008f0  w    F .text	00000020 Invalid_IRQHandler
800034d8 g     F .text	00000138 API_Try2Send
80000910  w    F .text	00000020 External_3_IRQHandler
80002488 g     F .text	000001ec xTaskIncrementTick
80005bd4 g     F .text	000000e4 API_GetTaskSlot
80007748 g     O .sbss	00000004 g_startscheduler
80002f88 g     F .text	00000028 getYpos
80000b10  w    F .text	00000020 External_19_IRQHandler
80000e68 g     F .text	000000e8 _write
80002f5c g     F .text	0000002c getXpos
80021e10 g       .bss	00000000 _end
8000174c g     F .text	000000cc vPortSetupTimer
800209a8 g     O .bss	00000014 str
800209bc g     O .bss	00000004 SendingQueue_front
8000407c g     F .text	00000160 API_RepositoryWakeUp
80002ef4 g     F .text	00000068 printsvsv
800021b4 g     F .text	00000084 vTaskDelay
80001028 g     F .text	00000118 UART_init
80000f58 g       .text	00000000 HW_get_32bit_reg
80000d98 g     F .text	00000050 _exit
80000f98 g       .text	00000000 HW_set_16bit_reg
80003c10 g     F .text	000002bc API_SendMessageReq
80001e6c g     F .text	00000050 strlen
80001844 g     F .text	00000094 pxPortInitialiseStack
80003090 g     F .text	00000020 External_1_IRQHandler
80003a78 g     F .text	00000198 API_SendFinishTask
80000970  w    F .text	00000020 External_6_IRQHandler
80000c90  w    F .text	00000020 External_31_IRQHandler
80005020 g     F .text	000000ec API_GetSystemTasksSlots
8000160c g     F .text	00000034 vPortEnterCritical
80007640 g       .data	00000000 __data_start
80021e0c g     O .bss	00000004 ProcessorAddr
80021d94 g     O .bss	00000004 priorityPointer
80000b50  w    F .text	00000020 External_21_IRQHandler
80021d98 g     O .bss	0000006c Tiles
800004c0 g     F .text	00000030 handle_m_soft_interrupt
8000044c g     F .text	00000074 handle_m_ext_interrupt
80000fd0 g       .text	00000000 HW_get_16bit_reg_field
80000b90  w    F .text	00000020 External_23_IRQHandler
80000bb0  w    F .text	00000020 External_24_IRQHandler
80000930  w    F .text	00000020 External_4_IRQHandler
800209c0 g     O .bss	00000910 MessagePipe
800045cc g     F .text	000000a8 GeneratePatternMatrix
80000990  w    F .text	00000020 External_7_IRQHandler
80006548 g     F .text	0000001c vApplicationIdleHook



Disassembly of section .text:

80000000 <_start>:
_start():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:30

  .section      .text.entry
  .globl _start

_start:
  j handle_reset
80000000:	00c0006f          	j	8000000c <handle_reset>

80000004 <nmi_vector>:
nmi_vector():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:33

nmi_vector:
  j nmi_vector
80000004:	0000006f          	j	80000004 <nmi_vector>

80000008 <trap_vector>:
trap_vector():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:36

trap_vector:
  j trap_entry
80000008:	0280006f          	j	80000030 <trap_entry>

8000000c <handle_reset>:
handle_reset():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:39

handle_reset:
  la t0, trap_entry
8000000c:	00000297          	auipc	t0,0x0
80000010:	02428293          	addi	t0,t0,36 # 80000030 <trap_entry>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:40
  csrw mtvec, t0
80000014:	30529073          	csrw	mtvec,t0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:41
  csrwi mstatus, 0
80000018:	30005073          	csrwi	mstatus,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:42
  csrwi mie, 0
8000001c:	30405073          	csrwi	mie,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:60
  lui t0, 0x0
  fscsr t0
#endif

  # initialize global pointer
  la gp, __global_pointer$
80000020:	00018193          	mv	gp,gp
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:63

  # initialize stack pointer
  la sp, __stack_top
80000024:	00042117          	auipc	sp,0x42
80000028:	dec10113          	addi	sp,sp,-532 # 80041e10 <__stack_top>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:66

  # perform the rest of initialization in C
  j _init
8000002c:	1840006f          	j	800001b0 <_init>

80000030 <trap_entry>:
trap_entry():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:70


trap_entry:
  addi sp, sp, -32*REGBYTES
80000030:	f8010113          	addi	sp,sp,-128
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:72

  SREG x1, 0 * REGBYTES(sp)
80000034:	00112023          	sw	ra,0(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:73
  SREG x2, 1 * REGBYTES(sp)
80000038:	00212223          	sw	sp,4(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:74
  SREG x3, 2 * REGBYTES(sp)
8000003c:	00312423          	sw	gp,8(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:75
  SREG x4, 3 * REGBYTES(sp)
80000040:	00412623          	sw	tp,12(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:76
  SREG x5, 4 * REGBYTES(sp)
80000044:	00512823          	sw	t0,16(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:77
  SREG x6, 5 * REGBYTES(sp)
80000048:	00612a23          	sw	t1,20(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:78
  SREG x7, 6 * REGBYTES(sp)
8000004c:	00712c23          	sw	t2,24(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:79
  SREG x8, 7 * REGBYTES(sp)
80000050:	00812e23          	sw	s0,28(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:80
  SREG x9, 8 * REGBYTES(sp)
80000054:	02912023          	sw	s1,32(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:81
  SREG x10, 9 * REGBYTES(sp)
80000058:	02a12223          	sw	a0,36(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:82
  SREG x11, 10 * REGBYTES(sp)
8000005c:	02b12423          	sw	a1,40(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:83
  SREG x12, 11 * REGBYTES(sp)
80000060:	02c12623          	sw	a2,44(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:84
  SREG x13, 12 * REGBYTES(sp)
80000064:	02d12823          	sw	a3,48(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:85
  SREG x14, 13 * REGBYTES(sp)
80000068:	02e12a23          	sw	a4,52(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:86
  SREG x15, 14 * REGBYTES(sp)
8000006c:	02f12c23          	sw	a5,56(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:87
  SREG x16, 15 * REGBYTES(sp)
80000070:	03012e23          	sw	a6,60(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:88
  SREG x17, 16 * REGBYTES(sp)
80000074:	05112023          	sw	a7,64(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:89
  SREG x18, 17 * REGBYTES(sp)
80000078:	05212223          	sw	s2,68(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:90
  SREG x19, 18 * REGBYTES(sp)
8000007c:	05312423          	sw	s3,72(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:91
  SREG x20, 19 * REGBYTES(sp)
80000080:	05412623          	sw	s4,76(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:92
  SREG x21, 20 * REGBYTES(sp)
80000084:	05512823          	sw	s5,80(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:93
  SREG x22, 21 * REGBYTES(sp)
80000088:	05612a23          	sw	s6,84(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:94
  SREG x23, 22 * REGBYTES(sp)
8000008c:	05712c23          	sw	s7,88(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:95
  SREG x24, 23 * REGBYTES(sp)
80000090:	05812e23          	sw	s8,92(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:96
  SREG x25, 24 * REGBYTES(sp)
80000094:	07912023          	sw	s9,96(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:97
  SREG x26, 25 * REGBYTES(sp)
80000098:	07a12223          	sw	s10,100(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:98
  SREG x27, 26 * REGBYTES(sp)
8000009c:	07b12423          	sw	s11,104(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:99
  SREG x28, 27 * REGBYTES(sp)
800000a0:	07c12623          	sw	t3,108(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:100
  SREG x29, 28 * REGBYTES(sp)
800000a4:	07d12823          	sw	t4,112(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:101
  SREG x30, 29 * REGBYTES(sp)
800000a8:	07e12a23          	sw	t5,116(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:102
  SREG x31, 30 * REGBYTES(sp)
800000ac:	07f12c23          	sw	t6,120(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:104

  csrr t0, mepc
800000b0:	341022f3          	csrr	t0,mepc
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:105
  SREG t0, 31 * REGBYTES(sp)
800000b4:	06512e23          	sw	t0,124(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:107

  csrr a0, mcause
800000b8:	34202573          	csrr	a0,mcause
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:108
  csrr a1, mepc
800000bc:	341025f3          	csrr	a1,mepc
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:109
  mv a2, sp
800000c0:	00010613          	mv	a2,sp
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:110
  call handle_trap
800000c4:	6c0000ef          	jal	ra,80000784 <handle_trap>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:111
  csrw mepc, a0
800000c8:	34151073          	csrw	mepc,a0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:114

  # Remain in M-mode after mret
  li t0, MSTATUS_MPP
800000cc:	000022b7          	lui	t0,0x2
800000d0:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:115
  csrs mstatus, t0
800000d4:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:119
  #li t0, MSTATUS_MPIE
  #csrs mstatus, t0

  LREG x1, 0 * REGBYTES(sp)
800000d8:	00012083          	lw	ra,0(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:120
  LREG x2, 1 * REGBYTES(sp)
800000dc:	00412103          	lw	sp,4(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:121
  LREG x3, 2 * REGBYTES(sp)
800000e0:	00812183          	lw	gp,8(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:122
  LREG x4, 3 * REGBYTES(sp)
800000e4:	00c12203          	lw	tp,12(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:123
  LREG x5, 4 * REGBYTES(sp)
800000e8:	01012283          	lw	t0,16(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:124
  LREG x6, 5 * REGBYTES(sp)
800000ec:	01412303          	lw	t1,20(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:125
  LREG x7, 6 * REGBYTES(sp)
800000f0:	01812383          	lw	t2,24(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:126
  LREG x8, 7 * REGBYTES(sp)
800000f4:	01c12403          	lw	s0,28(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:127
  LREG x9, 8 * REGBYTES(sp)
800000f8:	02012483          	lw	s1,32(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:128
  LREG x10, 9 * REGBYTES(sp)
800000fc:	02412503          	lw	a0,36(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:129
  LREG x11, 10 * REGBYTES(sp)
80000100:	02812583          	lw	a1,40(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:130
  LREG x12, 11 * REGBYTES(sp)
80000104:	02c12603          	lw	a2,44(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:131
  LREG x13, 12 * REGBYTES(sp)
80000108:	03012683          	lw	a3,48(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:132
  LREG x14, 13 * REGBYTES(sp)
8000010c:	03412703          	lw	a4,52(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:133
  LREG x15, 14 * REGBYTES(sp)
80000110:	03812783          	lw	a5,56(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:134
  LREG x16, 15 * REGBYTES(sp)
80000114:	03c12803          	lw	a6,60(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:135
  LREG x17, 16 * REGBYTES(sp)
80000118:	04012883          	lw	a7,64(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:136
  LREG x18, 17 * REGBYTES(sp)
8000011c:	04412903          	lw	s2,68(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:137
  LREG x19, 18 * REGBYTES(sp)
80000120:	04812983          	lw	s3,72(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:138
  LREG x20, 19 * REGBYTES(sp)
80000124:	04c12a03          	lw	s4,76(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:139
  LREG x21, 20 * REGBYTES(sp)
80000128:	05012a83          	lw	s5,80(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:140
  LREG x22, 21 * REGBYTES(sp)
8000012c:	05412b03          	lw	s6,84(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:141
  LREG x23, 22 * REGBYTES(sp)
80000130:	05812b83          	lw	s7,88(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:142
  LREG x24, 23 * REGBYTES(sp)
80000134:	05c12c03          	lw	s8,92(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:143
  LREG x25, 24 * REGBYTES(sp)
80000138:	06012c83          	lw	s9,96(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:144
  LREG x26, 25 * REGBYTES(sp)
8000013c:	06412d03          	lw	s10,100(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:145
  LREG x27, 26 * REGBYTES(sp)
80000140:	06812d83          	lw	s11,104(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:146
  LREG x28, 27 * REGBYTES(sp)
80000144:	06c12e03          	lw	t3,108(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:147
  LREG x29, 28 * REGBYTES(sp)
80000148:	07012e83          	lw	t4,112(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:148
  LREG x30, 29 * REGBYTES(sp)
8000014c:	07412f03          	lw	t5,116(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:149
  LREG x31, 30 * REGBYTES(sp)
80000150:	07812f83          	lw	t6,120(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:151

  addi sp, sp, 32*REGBYTES
80000154:	08010113          	addi	sp,sp,128
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:152
  mret
80000158:	30200073          	mret
8000015c:	0000                	unimp
	...

80000160 <zero_section>:
zero_section():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:47
        ++p_vma;
    }
}

static void zero_section(uint32_t * start, uint32_t * end)
{
80000160:	fd010113          	addi	sp,sp,-48
80000164:	02812623          	sw	s0,44(sp)
80000168:	03010413          	addi	s0,sp,48
8000016c:	fca42e23          	sw	a0,-36(s0)
80000170:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:48
    uint32_t * p_zero = start;
80000174:	fdc42783          	lw	a5,-36(s0)
80000178:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:50
    
    while(p_zero <= end)
8000017c:	0180006f          	j	80000194 <zero_section+0x34>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:52
    {
        *p_zero = 0;
80000180:	fec42783          	lw	a5,-20(s0)
80000184:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:53
        ++p_zero;
80000188:	fec42783          	lw	a5,-20(s0)
8000018c:	00478793          	addi	a5,a5,4
80000190:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:50
    while(p_zero <= end)
80000194:	fec42703          	lw	a4,-20(s0)
80000198:	fd842783          	lw	a5,-40(s0)
8000019c:	fee7f2e3          	bleu	a4,a5,80000180 <zero_section+0x20>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:55
    }
}
800001a0:	00000013          	nop
800001a4:	02c12403          	lw	s0,44(sp)
800001a8:	03010113          	addi	sp,sp,48
800001ac:	00008067          	ret

800001b0 <_init>:
_init():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:58

void _init(void)
{
800001b0:	fe010113          	addi	sp,sp,-32
800001b4:	00112e23          	sw	ra,28(sp)
800001b8:	00812c23          	sw	s0,24(sp)
800001bc:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:60
    extern int main(int, char**);
    const char *argv0 = "hello";
800001c0:	800077b7          	lui	a5,0x80007
800001c4:	de078793          	addi	a5,a5,-544 # 80006de0 <__stack_top+0xfffc4fd0>
800001c8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:61
    char *argv[] = {(char *)argv0, NULL, NULL};
800001cc:	fec42783          	lw	a5,-20(s0)
800001d0:	fef42023          	sw	a5,-32(s0)
800001d4:	fe042223          	sw	zero,-28(s0)
800001d8:	fe042423          	sw	zero,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:66

// Imperas - this is loaded directly by simulator so must not be copied
//    copy_section(&__sdata_load, &__sdata_start, &__sdata_end);
//    copy_section(&__data_load, &__data_start, &__data_end);
    zero_section(&__sbss_start, &__sbss_end);
800001dc:	97018593          	addi	a1,gp,-1680 # 80007790 <__sbss_end>
800001e0:	90018513          	addi	a0,gp,-1792 # 80007720 <__data_end>
800001e4:	f7dff0ef          	jal	ra,80000160 <zero_section>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:67
    zero_section(&__bss_start, &__bss_end);
800001e8:	800227b7          	lui	a5,0x80022
800001ec:	e1078593          	addi	a1,a5,-496 # 80021e10 <__stack_top+0xfffe0000>
800001f0:	97018513          	addi	a0,gp,-1680 # 80007790 <__sbss_end>
800001f4:	f6dff0ef          	jal	ra,80000160 <zero_section>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:69
    
    main(1, argv);
800001f8:	fe040793          	addi	a5,s0,-32
800001fc:	00078593          	mv	a1,a5
80000200:	00100513          	li	a0,1
80000204:	1ac060ef          	jal	ra,800063b0 <main>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:70
}
80000208:	00000013          	nop
8000020c:	01c12083          	lw	ra,28(sp)
80000210:	01812403          	lw	s0,24(sp)
80000214:	02010113          	addi	sp,sp,32
80000218:	00008067          	ret

8000021c <_fini>:
_fini():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:75

/* Function called after main() finishes */
void
_fini()
{
8000021c:	ff010113          	addi	sp,sp,-16
80000220:	00812623          	sw	s0,12(sp)
80000224:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:76
}
80000228:	00000013          	nop
8000022c:	00c12403          	lw	s0,12(sp)
80000230:	01010113          	addi	sp,sp,16
80000234:	00008067          	ret

80000238 <PLIC_DisableIRQ>:
PLIC_DisableIRQ():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:174
 * 	If you wish to disable the external interrupt while the interrupt handler
 * 	for that external interrupt is executing then you must use the return value
 * 	EXT_IRQ_DISABLE to return from the extern interrupt handler.
 */
static inline void PLIC_DisableIRQ(IRQn_Type IRQn)
{
80000238:	fd010113          	addi	sp,sp,-48
8000023c:	02812623          	sw	s0,44(sp)
80000240:	03010413          	addi	s0,sp,48
80000244:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:175
    unsigned long hart_id = read_csr(mhartid);
80000248:	f14027f3          	csrr	a5,mhartid
8000024c:	fef42623          	sw	a5,-20(s0)
80000250:	fec42783          	lw	a5,-20(s0)
80000254:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:176
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80000258:	40000737          	lui	a4,0x40000
8000025c:	fdc42783          	lw	a5,-36(s0)
80000260:	0057d793          	srli	a5,a5,0x5
80000264:	fe842683          	lw	a3,-24(s0)
80000268:	00569693          	slli	a3,a3,0x5
8000026c:	00f686b3          	add	a3,a3,a5
80000270:	000017b7          	lui	a5,0x1
80000274:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80000278:	00f687b3          	add	a5,a3,a5
8000027c:	00279793          	slli	a5,a5,0x2
80000280:	00f707b3          	add	a5,a4,a5
80000284:	0007a783          	lw	a5,0(a5)
80000288:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:178

    current &= ~((uint32_t)1 << (IRQn % 32));
8000028c:	fdc42783          	lw	a5,-36(s0)
80000290:	01f7f793          	andi	a5,a5,31
80000294:	00100713          	li	a4,1
80000298:	00f717b3          	sll	a5,a4,a5
8000029c:	fff7c793          	not	a5,a5
800002a0:	fe442703          	lw	a4,-28(s0)
800002a4:	00f777b3          	and	a5,a4,a5
800002a8:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:180

    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
800002ac:	40000737          	lui	a4,0x40000
800002b0:	fdc42783          	lw	a5,-36(s0)
800002b4:	0057d793          	srli	a5,a5,0x5
800002b8:	fe842683          	lw	a3,-24(s0)
800002bc:	00569693          	slli	a3,a3,0x5
800002c0:	00f686b3          	add	a3,a3,a5
800002c4:	000017b7          	lui	a5,0x1
800002c8:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
800002cc:	00f687b3          	add	a5,a3,a5
800002d0:	00279793          	slli	a5,a5,0x2
800002d4:	00f707b3          	add	a5,a4,a5
800002d8:	fe442703          	lw	a4,-28(s0)
800002dc:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:181
}
800002e0:	00000013          	nop
800002e4:	02c12403          	lw	s0,44(sp)
800002e8:	03010113          	addi	sp,sp,48
800002ec:	00008067          	ret

800002f0 <PLIC_ClaimIRQ>:
PLIC_ClaimIRQ():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:205

/*==============================================================================
 * The function PLIC_ClaimIRQ() claims the interrupt from the PLIC controller.
 */
static inline uint32_t PLIC_ClaimIRQ(void)
{
800002f0:	fe010113          	addi	sp,sp,-32
800002f4:	00812e23          	sw	s0,28(sp)
800002f8:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:206
    unsigned long hart_id = read_csr(mhartid);
800002fc:	f14027f3          	csrr	a5,mhartid
80000300:	fef42623          	sw	a5,-20(s0)
80000304:	fec42783          	lw	a5,-20(s0)
80000308:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:208

    return PLIC->TARGET[hart_id].CLAIM_COMPLETE;
8000030c:	40000737          	lui	a4,0x40000
80000310:	fe842783          	lw	a5,-24(s0)
80000314:	20078793          	addi	a5,a5,512
80000318:	00c79793          	slli	a5,a5,0xc
8000031c:	00f707b3          	add	a5,a4,a5
80000320:	0047a783          	lw	a5,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:209
}
80000324:	00078513          	mv	a0,a5
80000328:	01c12403          	lw	s0,28(sp)
8000032c:	02010113          	addi	sp,sp,32
80000330:	00008067          	ret

80000334 <PLIC_CompleteIRQ>:
PLIC_CompleteIRQ():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:216
/*==============================================================================
 * The function PLIC_CompleteIRQ() indicates to the PLIC controller the interrupt
 * is processed and claim is complete.
 */
static inline void PLIC_CompleteIRQ(uint32_t source)
{
80000334:	fd010113          	addi	sp,sp,-48
80000338:	02812623          	sw	s0,44(sp)
8000033c:	03010413          	addi	s0,sp,48
80000340:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:217
    unsigned long hart_id = read_csr(mhartid);
80000344:	f14027f3          	csrr	a5,mhartid
80000348:	fef42623          	sw	a5,-20(s0)
8000034c:	fec42783          	lw	a5,-20(s0)
80000350:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:219

    PLIC->TARGET[hart_id].CLAIM_COMPLETE = source;
80000354:	40000737          	lui	a4,0x40000
80000358:	fe842783          	lw	a5,-24(s0)
8000035c:	20078793          	addi	a5,a5,512
80000360:	00c79793          	slli	a5,a5,0xc
80000364:	00f707b3          	add	a5,a4,a5
80000368:	fdc42703          	lw	a4,-36(s0)
8000036c:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:220
}
80000370:	00000013          	nop
80000374:	02c12403          	lw	s0,44(sp)
80000378:	03010113          	addi	sp,sp,48
8000037c:	00008067          	ret

80000380 <__enable_irq>:
__enable_irq():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:96

/*------------------------------------------------------------------------------
 * Enabler all interrupts.
 */
void __enable_irq(void)
{
80000380:	fe010113          	addi	sp,sp,-32
80000384:	00812e23          	sw	s0,28(sp)
80000388:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:97
    set_csr(mstatus, MSTATUS_MIE);
8000038c:	300467f3          	csrrsi	a5,mstatus,8
80000390:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:98
}
80000394:	00000013          	nop
80000398:	01c12403          	lw	s0,28(sp)
8000039c:	02010113          	addi	sp,sp,32
800003a0:	00008067          	ret

800003a4 <handle_m_timer_interrupt>:
handle_m_timer_interrupt():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:128

/*------------------------------------------------------------------------------
 * RISC-V interrupt handler for machine timer interrupts.
 */
void handle_m_timer_interrupt()
{
800003a4:	fe010113          	addi	sp,sp,-32
800003a8:	00112e23          	sw	ra,28(sp)
800003ac:	00812c23          	sw	s0,24(sp)
800003b0:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:129
    clear_csr(mie, MIP_MTIP);
800003b4:	08000793          	li	a5,128
800003b8:	3047b7f3          	csrrc	a5,mie,a5
800003bc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:131

    SysTick_Handler();
800003c0:	518010ef          	jal	ra,800018d8 <SysTick_Handler>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:133

    PRCI->MTIMECMP[read_csr(mhartid)] = PRCI->MTIME + g_systick_increment;
800003c4:	44000737          	lui	a4,0x44000
800003c8:	0000c7b7          	lui	a5,0xc
800003cc:	00f707b3          	add	a5,a4,a5
800003d0:	ffc7a803          	lw	a6,-4(a5) # bffc <HEAP_SIZE-0x4004>
800003d4:	ff87a783          	lw	a5,-8(a5)
800003d8:	9001a583          	lw	a1,-1792(gp) # 80007720 <__data_end>
800003dc:	9041a603          	lw	a2,-1788(gp) # 80007724 <__data_end+0x4>
800003e0:	44000537          	lui	a0,0x44000
800003e4:	f1402773          	csrr	a4,mhartid
800003e8:	fee42423          	sw	a4,-24(s0)
800003ec:	fe842883          	lw	a7,-24(s0)
800003f0:	00b786b3          	add	a3,a5,a1
800003f4:	00068313          	mv	t1,a3
800003f8:	00f33333          	sltu	t1,t1,a5
800003fc:	00c80733          	add	a4,a6,a2
80000400:	00e307b3          	add	a5,t1,a4
80000404:	00078713          	mv	a4,a5
80000408:	00068793          	mv	a5,a3
8000040c:	00070813          	mv	a6,a4
80000410:	00001737          	lui	a4,0x1
80000414:	80070713          	addi	a4,a4,-2048 # 800 <HEAP_SIZE-0xf800>
80000418:	00e88733          	add	a4,a7,a4
8000041c:	00371713          	slli	a4,a4,0x3
80000420:	00e50733          	add	a4,a0,a4
80000424:	00f72023          	sw	a5,0(a4)
80000428:	01072223          	sw	a6,4(a4)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:135

    set_csr(mie, MIP_MTIP);
8000042c:	08000793          	li	a5,128
80000430:	3047a7f3          	csrrs	a5,mie,a5
80000434:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:136
    return;
80000438:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:137
}
8000043c:	01c12083          	lw	ra,28(sp)
80000440:	01812403          	lw	s0,24(sp)
80000444:	02010113          	addi	sp,sp,32
80000448:	00008067          	ret

8000044c <handle_m_ext_interrupt>:
handle_m_ext_interrupt():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:182

/*------------------------------------------------------------------------------
 * 
 */
void handle_m_ext_interrupt()
{
8000044c:	fe010113          	addi	sp,sp,-32
80000450:	00112e23          	sw	ra,28(sp)
80000454:	00812c23          	sw	s0,24(sp)
80000458:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:183
    uint32_t int_num  = PLIC_ClaimIRQ();
8000045c:	e95ff0ef          	jal	ra,800002f0 <PLIC_ClaimIRQ>
80000460:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:184
    uint8_t disable = EXT_IRQ_KEEP_ENABLED;
80000464:	fe0405a3          	sb	zero,-21(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:186

    disable = ext_irq_handler_table[int_num]();
80000468:	800077b7          	lui	a5,0x80007
8000046c:	fec42703          	lw	a4,-20(s0)
80000470:	00271713          	slli	a4,a4,0x2
80000474:	64078793          	addi	a5,a5,1600 # 80007640 <__stack_top+0xfffc5830>
80000478:	00f707b3          	add	a5,a4,a5
8000047c:	0007a783          	lw	a5,0(a5)
80000480:	000780e7          	jalr	a5
80000484:	00050793          	mv	a5,a0
80000488:	fef405a3          	sb	a5,-21(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:188

    PLIC_CompleteIRQ(int_num);
8000048c:	fec42503          	lw	a0,-20(s0)
80000490:	ea5ff0ef          	jal	ra,80000334 <PLIC_CompleteIRQ>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:190

    if(EXT_IRQ_DISABLE == disable)
80000494:	feb44703          	lbu	a4,-21(s0)
80000498:	00100793          	li	a5,1
8000049c:	00f71863          	bne	a4,a5,800004ac <handle_m_ext_interrupt+0x60>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:192
    {
        PLIC_DisableIRQ((IRQn_Type)int_num);
800004a0:	fec42503          	lw	a0,-20(s0)
800004a4:	d95ff0ef          	jal	ra,80000238 <PLIC_DisableIRQ>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:194
    }
    return;
800004a8:	00000013          	nop
800004ac:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:195
}
800004b0:	01c12083          	lw	ra,28(sp)
800004b4:	01812403          	lw	s0,24(sp)
800004b8:	02010113          	addi	sp,sp,32
800004bc:	00008067          	ret

800004c0 <handle_m_soft_interrupt>:
handle_m_soft_interrupt():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:198

void handle_m_soft_interrupt()
{
800004c0:	ff010113          	addi	sp,sp,-16
800004c4:	00112623          	sw	ra,12(sp)
800004c8:	00812423          	sw	s0,8(sp)
800004cc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:199
    Software_IRQHandler();
800004d0:	524010ef          	jal	ra,800019f4 <Software_IRQHandler>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:202

    /*Clear software interrupt*/
    PRCI->MSIP[0] = 0x00;
800004d4:	440007b7          	lui	a5,0x44000
800004d8:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:203
    return;
800004dc:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:204
}
800004e0:	00c12083          	lw	ra,12(sp)
800004e4:	00812403          	lw	s0,8(sp)
800004e8:	01010113          	addi	sp,sp,16
800004ec:	00008067          	ret

800004f0 <handle_syscall>:
handle_syscall():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:207

/* syscall funcion defined at system_call.c */
void handle_syscall(){
800004f0:	fd010113          	addi	sp,sp,-48
800004f4:	02112623          	sw	ra,44(sp)
800004f8:	02812423          	sw	s0,40(sp)
800004fc:	03010413          	addi	s0,sp,48
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:210
	unsigned int arg0, arg1, arg2, arg3, arg4, arg5, type;
	unsigned int *pointer;
	register long temp asm("t0") = 0;
80000500:	00000293          	li	t0,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:211
	asm("addi	t0, sp, 0");
80000504:	00010293          	mv	t0,sp
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:213
	
	pointer = (unsigned int *)(temp + (29*4));
80000508:	00028793          	mv	a5,t0
8000050c:	07478793          	addi	a5,a5,116
80000510:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:214
	arg0 =  *pointer;
80000514:	fec42783          	lw	a5,-20(s0)
80000518:	0007a783          	lw	a5,0(a5)
8000051c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:216

	pointer = (unsigned int *)(temp + (30*4));
80000520:	00028793          	mv	a5,t0
80000524:	07878793          	addi	a5,a5,120
80000528:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:217
	arg1 = *pointer;
8000052c:	fec42783          	lw	a5,-20(s0)
80000530:	0007a783          	lw	a5,0(a5)
80000534:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:219
	
	pointer = (unsigned int *)(temp + (31*4));
80000538:	00028793          	mv	a5,t0
8000053c:	07c78793          	addi	a5,a5,124
80000540:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:220
	arg2 = *pointer;
80000544:	fec42783          	lw	a5,-20(s0)
80000548:	0007a783          	lw	a5,0(a5)
8000054c:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:222

	pointer = (unsigned int *)(temp + (32*4));
80000550:	00028793          	mv	a5,t0
80000554:	08078793          	addi	a5,a5,128
80000558:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:223
	arg3 = *pointer;
8000055c:	fec42783          	lw	a5,-20(s0)
80000560:	0007a783          	lw	a5,0(a5)
80000564:	fcf42e23          	sw	a5,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:225

	pointer = (unsigned int *)(temp + (33*4));
80000568:	00028793          	mv	a5,t0
8000056c:	08478793          	addi	a5,a5,132
80000570:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:226
	arg4 = *pointer;
80000574:	fec42783          	lw	a5,-20(s0)
80000578:	0007a783          	lw	a5,0(a5)
8000057c:	fcf42c23          	sw	a5,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:228

	pointer = (unsigned int *)(temp + (34*4));
80000580:	00028793          	mv	a5,t0
80000584:	08878793          	addi	a5,a5,136
80000588:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:229
	arg4 = *pointer;
8000058c:	fec42783          	lw	a5,-20(s0)
80000590:	0007a783          	lw	a5,0(a5)
80000594:	fcf42c23          	sw	a5,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:231

	pointer = (unsigned int *)(temp + (36*4));
80000598:	00028793          	mv	a5,t0
8000059c:	09078793          	addi	a5,a5,144
800005a0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:232
	type = *pointer;
800005a4:	fec42783          	lw	a5,-20(s0)
800005a8:	0007a783          	lw	a5,0(a5)
800005ac:	fcf42a23          	sw	a5,-44(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:243
		p = (temp + (i*4));
		value = *p;
		printsvsv("i: ", i, " value: ", value);
	}*/
	
	switch (type){
800005b0:	fd442783          	lw	a5,-44(s0)
800005b4:	ff678793          	addi	a5,a5,-10
800005b8:	03800713          	li	a4,56
800005bc:	12f76663          	bltu	a4,a5,800006e8 <handle_syscall+0x1f8>
800005c0:	00279713          	slli	a4,a5,0x2
800005c4:	800077b7          	lui	a5,0x80007
800005c8:	e7c78793          	addi	a5,a5,-388 # 80006e7c <__stack_top+0xfffc506c>
800005cc:	00f707b3          	add	a5,a4,a5
800005d0:	0007a783          	lw	a5,0(a5)
800005d4:	00078067          	jr	a5
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:246

		case SYS_TESTING:
			prints("Detectei uma chamada TESTE de sistema!\n");
800005d8:	800077b7          	lui	a5,0x80007
800005dc:	de878513          	addi	a0,a5,-536 # 80006de8 <__stack_top+0xfffc4fd8>
800005e0:	019020ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:247
			printsv("arg0 ", arg0);
800005e4:	fe842783          	lw	a5,-24(s0)
800005e8:	00078593          	mv	a1,a5
800005ec:	800077b7          	lui	a5,0x80007
800005f0:	e1078513          	addi	a0,a5,-496 # 80006e10 <__stack_top+0xfffc5000>
800005f4:	0b1020ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:248
			printsv("arg1 ", arg1);
800005f8:	fe442783          	lw	a5,-28(s0)
800005fc:	00078593          	mv	a1,a5
80000600:	800077b7          	lui	a5,0x80007
80000604:	e1878513          	addi	a0,a5,-488 # 80006e18 <__stack_top+0xfffc5008>
80000608:	09d020ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:249
			printsv("arg2 ", arg2);
8000060c:	fe042783          	lw	a5,-32(s0)
80000610:	00078593          	mv	a1,a5
80000614:	800077b7          	lui	a5,0x80007
80000618:	e2078513          	addi	a0,a5,-480 # 80006e20 <__stack_top+0xfffc5010>
8000061c:	089020ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:250
			printsv("arg3 ", arg3);
80000620:	fdc42783          	lw	a5,-36(s0)
80000624:	00078593          	mv	a1,a5
80000628:	800077b7          	lui	a5,0x80007
8000062c:	e2878513          	addi	a0,a5,-472 # 80006e28 <__stack_top+0xfffc5018>
80000630:	075020ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:251
			printsv("arg4 ", arg4);
80000634:	fd842783          	lw	a5,-40(s0)
80000638:	00078593          	mv	a1,a5
8000063c:	800077b7          	lui	a5,0x80007
80000640:	e3078513          	addi	a0,a5,-464 # 80006e30 <__stack_top+0xfffc5020>
80000644:	061020ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:252
			printsv("type ", type);
80000648:	fd442783          	lw	a5,-44(s0)
8000064c:	00078593          	mv	a1,a5
80000650:	800077b7          	lui	a5,0x80007
80000654:	e3878513          	addi	a0,a5,-456 # 80006e38 <__stack_top+0xfffc5028>
80000658:	04d020ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:253
			break;
8000065c:	1140006f          	j	80000770 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:256

        case SYS_PRINTS:
            prints(arg0);
80000660:	fe842783          	lw	a5,-24(s0)
80000664:	00078513          	mv	a0,a5
80000668:	790020ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:257
            UART_polled_tx_string( &g_uart, arg0 );
8000066c:	fe842783          	lw	a5,-24(s0)
80000670:	00078593          	mv	a1,a5
80000674:	800227b7          	lui	a5,0x80022
80000678:	e0478513          	addi	a0,a5,-508 # 80021e04 <__stack_top+0xfffdfff4>
8000067c:	379000ef          	jal	ra,800011f4 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:258
            break;
80000680:	0f00006f          	j	80000770 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:261
        
        case SYS_PRINTI:
            printi(arg0);
80000684:	fe842783          	lw	a5,-24(s0)
80000688:	00078513          	mv	a0,a5
8000068c:	7dc020ef          	jal	ra,80002e68 <printi>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:262
            myItoa(arg0, str, 10);
80000690:	fe842703          	lw	a4,-24(s0)
80000694:	00a00613          	li	a2,10
80000698:	800217b7          	lui	a5,0x80021
8000069c:	9a878593          	addi	a1,a5,-1624 # 800209a8 <__stack_top+0xfffdeb98>
800006a0:	00070513          	mv	a0,a4
800006a4:	329020ef          	jal	ra,800031cc <myItoa>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:263
            UART_polled_tx_string( &g_uart, (const uint8_t *)str );
800006a8:	800217b7          	lui	a5,0x80021
800006ac:	9a878593          	addi	a1,a5,-1624 # 800209a8 <__stack_top+0xfffdeb98>
800006b0:	800227b7          	lui	a5,0x80022
800006b4:	e0478513          	addi	a0,a5,-508 # 80021e04 <__stack_top+0xfffdfff4>
800006b8:	33d000ef          	jal	ra,800011f4 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:264
            break;
800006bc:	0b40006f          	j	80000770 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:268
        
        case SYS_SEND_MSG:
            //              addr, task
            API_SendMessage(arg0, arg1);
800006c0:	fe442583          	lw	a1,-28(s0)
800006c4:	fe842503          	lw	a0,-24(s0)
800006c8:	0b4030ef          	jal	ra,8000377c <API_SendMessage>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:269
            break;
800006cc:	0a40006f          	j	80000770 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:273
        
        case SYS_RECV_MSG:
            //                 addr, task
            API_SendMessageReq(arg0, arg1);
800006d0:	fe442583          	lw	a1,-28(s0)
800006d4:	fe842503          	lw	a0,-24(s0)
800006d8:	538030ef          	jal	ra,80003c10 <API_SendMessageReq>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:274
            break;
800006dc:	0940006f          	j	80000770 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:277
        
        case SYS_END_TASK:
            API_FinishRunningTask();
800006e0:	6bc050ef          	jal	ra,80005d9c <API_FinishRunningTask>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:278
            break;
800006e4:	08c0006f          	j	80000770 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:281

		default:
			prints("Systemcall não identificada!\n");
800006e8:	800077b7          	lui	a5,0x80007
800006ec:	e4078513          	addi	a0,a5,-448 # 80006e40 <__stack_top+0xfffc5030>
800006f0:	708020ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:282
			printsv("arg0 ", arg0);
800006f4:	fe842783          	lw	a5,-24(s0)
800006f8:	00078593          	mv	a1,a5
800006fc:	800077b7          	lui	a5,0x80007
80000700:	e1078513          	addi	a0,a5,-496 # 80006e10 <__stack_top+0xfffc5000>
80000704:	7a0020ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:283
			printsv("arg1 ", arg1);
80000708:	fe442783          	lw	a5,-28(s0)
8000070c:	00078593          	mv	a1,a5
80000710:	800077b7          	lui	a5,0x80007
80000714:	e1878513          	addi	a0,a5,-488 # 80006e18 <__stack_top+0xfffc5008>
80000718:	78c020ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:284
			printsv("arg2 ", arg2);
8000071c:	fe042783          	lw	a5,-32(s0)
80000720:	00078593          	mv	a1,a5
80000724:	800077b7          	lui	a5,0x80007
80000728:	e2078513          	addi	a0,a5,-480 # 80006e20 <__stack_top+0xfffc5010>
8000072c:	778020ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:285
			printsv("arg3 ", arg3);
80000730:	fdc42783          	lw	a5,-36(s0)
80000734:	00078593          	mv	a1,a5
80000738:	800077b7          	lui	a5,0x80007
8000073c:	e2878513          	addi	a0,a5,-472 # 80006e28 <__stack_top+0xfffc5018>
80000740:	764020ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:286
			printsv("arg4 ", arg4);
80000744:	fd842783          	lw	a5,-40(s0)
80000748:	00078593          	mv	a1,a5
8000074c:	800077b7          	lui	a5,0x80007
80000750:	e3078513          	addi	a0,a5,-464 # 80006e30 <__stack_top+0xfffc5020>
80000754:	750020ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:287
			printsv("type ", type);
80000758:	fd442783          	lw	a5,-44(s0)
8000075c:	00078593          	mv	a1,a5
80000760:	800077b7          	lui	a5,0x80007
80000764:	e3878513          	addi	a0,a5,-456 # 80006e38 <__stack_top+0xfffc5028>
80000768:	73c020ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:288
			break;
8000076c:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:290
	}
	return;
80000770:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:305
	// 	value = *p;
	// 	printsvsv("i: ", i, " value: ", value);
	// }
    // prints("Cheguei aqui!!!!!!! sucessooo :D\n");
	////////////////////////////////////////////////////
}
80000774:	02c12083          	lw	ra,44(sp)
80000778:	02812403          	lw	s0,40(sp)
8000077c:	03010113          	addi	sp,sp,48
80000780:	00008067          	ret

80000784 <handle_trap>:
handle_trap():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:311

/*------------------------------------------------------------------------------
 * Trap/Interrupt handler
 */
uintptr_t handle_trap(uintptr_t mcause, uintptr_t epc)
{
80000784:	fe010113          	addi	sp,sp,-32
80000788:	00112e23          	sw	ra,28(sp)
8000078c:	00812c23          	sw	s0,24(sp)
80000790:	02010413          	addi	s0,sp,32
80000794:	fea42623          	sw	a0,-20(s0)
80000798:	feb42423          	sw	a1,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:312
    if (!(mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE) == ENV_CALL_M || (mcause & MCAUSE_CAUSE) == ENV_CALL_H || (mcause & MCAUSE_CAUSE) == ENV_CALL_S || (mcause & MCAUSE_CAUSE) == ENV_CALL_U)){
8000079c:	fec42783          	lw	a5,-20(s0)
800007a0:	0607cc63          	bltz	a5,80000818 <handle_trap+0x94>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:312 (discriminator 1)
800007a4:	fec42703          	lw	a4,-20(s0)
800007a8:	800007b7          	lui	a5,0x80000
800007ac:	fff7c793          	not	a5,a5
800007b0:	00f77733          	and	a4,a4,a5
800007b4:	00b00793          	li	a5,11
800007b8:	04f70663          	beq	a4,a5,80000804 <handle_trap+0x80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:312 (discriminator 2)
800007bc:	fec42703          	lw	a4,-20(s0)
800007c0:	800007b7          	lui	a5,0x80000
800007c4:	fff7c793          	not	a5,a5
800007c8:	00f77733          	and	a4,a4,a5
800007cc:	00a00793          	li	a5,10
800007d0:	02f70a63          	beq	a4,a5,80000804 <handle_trap+0x80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:312 (discriminator 3)
800007d4:	fec42703          	lw	a4,-20(s0)
800007d8:	800007b7          	lui	a5,0x80000
800007dc:	fff7c793          	not	a5,a5
800007e0:	00f77733          	and	a4,a4,a5
800007e4:	00900793          	li	a5,9
800007e8:	00f70e63          	beq	a4,a5,80000804 <handle_trap+0x80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:312 (discriminator 4)
800007ec:	fec42703          	lw	a4,-20(s0)
800007f0:	800007b7          	lui	a5,0x80000
800007f4:	fff7c793          	not	a5,a5
800007f8:	00f77733          	and	a4,a4,a5
800007fc:	00800793          	li	a5,8
80000800:	00f71c63          	bne	a4,a5,80000818 <handle_trap+0x94>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:313
        handle_syscall();
80000804:	cedff0ef          	jal	ra,800004f0 <handle_syscall>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:314
        epc = (uintptr_t) (epc + 4);
80000808:	fe842783          	lw	a5,-24(s0)
8000080c:	00478793          	addi	a5,a5,4 # 80000004 <__stack_top+0xfffbe1f4>
80000810:	fef42423          	sw	a5,-24(s0)
80000814:	0c40006f          	j	800008d8 <handle_trap+0x154>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:316
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_EXT)){
80000818:	fec42783          	lw	a5,-20(s0)
8000081c:	0207d263          	bgez	a5,80000840 <handle_trap+0xbc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:316 (discriminator 1)
80000820:	fec42703          	lw	a4,-20(s0)
80000824:	800007b7          	lui	a5,0x80000
80000828:	fff7c793          	not	a5,a5
8000082c:	00f77733          	and	a4,a4,a5
80000830:	00b00793          	li	a5,11
80000834:	00f71663          	bne	a4,a5,80000840 <handle_trap+0xbc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:317
        handle_m_ext_interrupt();
80000838:	c15ff0ef          	jal	ra,8000044c <handle_m_ext_interrupt>
8000083c:	09c0006f          	j	800008d8 <handle_trap+0x154>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:319
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_TIMER)){
80000840:	fec42783          	lw	a5,-20(s0)
80000844:	0207d263          	bgez	a5,80000868 <handle_trap+0xe4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:319 (discriminator 1)
80000848:	fec42703          	lw	a4,-20(s0)
8000084c:	800007b7          	lui	a5,0x80000
80000850:	fff7c793          	not	a5,a5
80000854:	00f77733          	and	a4,a4,a5
80000858:	00700793          	li	a5,7
8000085c:	00f71663          	bne	a4,a5,80000868 <handle_trap+0xe4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:320
        handle_m_timer_interrupt();
80000860:	b45ff0ef          	jal	ra,800003a4 <handle_m_timer_interrupt>
80000864:	0740006f          	j	800008d8 <handle_trap+0x154>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:322
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_SOFT)){
80000868:	fec42783          	lw	a5,-20(s0)
8000086c:	0207d263          	bgez	a5,80000890 <handle_trap+0x10c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:322 (discriminator 1)
80000870:	fec42703          	lw	a4,-20(s0)
80000874:	800007b7          	lui	a5,0x80000
80000878:	fff7c793          	not	a5,a5
8000087c:	00f77733          	and	a4,a4,a5
80000880:	00300793          	li	a5,3
80000884:	00f71663          	bne	a4,a5,80000890 <handle_trap+0x10c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:323
        handle_m_soft_interrupt();
80000888:	c39ff0ef          	jal	ra,800004c0 <handle_m_soft_interrupt>
8000088c:	04c0006f          	j	800008d8 <handle_trap+0x154>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:326
    }
    else{
        write(1, "trap\n", 5);
80000890:	00500613          	li	a2,5
80000894:	800077b7          	lui	a5,0x80007
80000898:	e6078593          	addi	a1,a5,-416 # 80006e60 <__stack_top+0xfffc5050>
8000089c:	00100513          	li	a0,1
800008a0:	4c4060ef          	jal	ra,80006d64 <write>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:327
        printsv("epc: ", epc);
800008a4:	fe842783          	lw	a5,-24(s0)
800008a8:	00078593          	mv	a1,a5
800008ac:	800077b7          	lui	a5,0x80007
800008b0:	e6878513          	addi	a0,a5,-408 # 80006e68 <__stack_top+0xfffc5058>
800008b4:	5f0020ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:328
        printsv("mcause: ", mcause);
800008b8:	fec42783          	lw	a5,-20(s0)
800008bc:	00078593          	mv	a1,a5
800008c0:	800077b7          	lui	a5,0x80007
800008c4:	e7078513          	addi	a0,a5,-400 # 80006e70 <__stack_top+0xfffc5060>
800008c8:	5dc020ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:329
        _exit(mcause);
800008cc:	fec42783          	lw	a5,-20(s0)
800008d0:	00078513          	mv	a0,a5
800008d4:	4c4000ef          	jal	ra,80000d98 <_exit>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:332
    }
    //printsv("handle_trap returns: ", epc);
    return epc;
800008d8:	fe842783          	lw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:333
}
800008dc:	00078513          	mv	a0,a5
800008e0:	01c12083          	lw	ra,28(sp)
800008e4:	01812403          	lw	s0,24(sp)
800008e8:	02010113          	addi	sp,sp,32
800008ec:	00008067          	ret

800008f0 <Invalid_IRQHandler>:
Invalid_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:37
{
    ;
}

__attribute__((weak))  uint8_t Invalid_IRQHandler(void)
{
800008f0:	ff010113          	addi	sp,sp,-16
800008f4:	00812623          	sw	s0,12(sp)
800008f8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:38
    return(0);
800008fc:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:39
}
80000900:	00078513          	mv	a0,a5
80000904:	00c12403          	lw	s0,12(sp)
80000908:	01010113          	addi	sp,sp,16
8000090c:	00008067          	ret

80000910 <External_3_IRQHandler>:
External_3_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:52
{
    return(0);
}

__attribute__((weak))  uint8_t External_3_IRQHandler(void)
{
80000910:	ff010113          	addi	sp,sp,-16
80000914:	00812623          	sw	s0,12(sp)
80000918:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:53
    return(0);
8000091c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:54
}
80000920:	00078513          	mv	a0,a5
80000924:	00c12403          	lw	s0,12(sp)
80000928:	01010113          	addi	sp,sp,16
8000092c:	00008067          	ret

80000930 <External_4_IRQHandler>:
External_4_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:57

__attribute__((weak))  uint8_t External_4_IRQHandler(void)
{
80000930:	ff010113          	addi	sp,sp,-16
80000934:	00812623          	sw	s0,12(sp)
80000938:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:58
    return(0);
8000093c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:59
}
80000940:	00078513          	mv	a0,a5
80000944:	00c12403          	lw	s0,12(sp)
80000948:	01010113          	addi	sp,sp,16
8000094c:	00008067          	ret

80000950 <External_5_IRQHandler>:
External_5_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:62

__attribute__((weak))  uint8_t External_5_IRQHandler(void)
{
80000950:	ff010113          	addi	sp,sp,-16
80000954:	00812623          	sw	s0,12(sp)
80000958:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:63
    return(0);
8000095c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:64
}
80000960:	00078513          	mv	a0,a5
80000964:	00c12403          	lw	s0,12(sp)
80000968:	01010113          	addi	sp,sp,16
8000096c:	00008067          	ret

80000970 <External_6_IRQHandler>:
External_6_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:67

__attribute__((weak))  uint8_t External_6_IRQHandler(void)
{
80000970:	ff010113          	addi	sp,sp,-16
80000974:	00812623          	sw	s0,12(sp)
80000978:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:68
    return(0);
8000097c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:69
}
80000980:	00078513          	mv	a0,a5
80000984:	00c12403          	lw	s0,12(sp)
80000988:	01010113          	addi	sp,sp,16
8000098c:	00008067          	ret

80000990 <External_7_IRQHandler>:
External_7_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:72

__attribute__((weak))  uint8_t External_7_IRQHandler(void)
{
80000990:	ff010113          	addi	sp,sp,-16
80000994:	00812623          	sw	s0,12(sp)
80000998:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:73
    return(0);
8000099c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:74
}
800009a0:	00078513          	mv	a0,a5
800009a4:	00c12403          	lw	s0,12(sp)
800009a8:	01010113          	addi	sp,sp,16
800009ac:	00008067          	ret

800009b0 <External_8_IRQHandler>:
External_8_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:77

__attribute__((weak))  uint8_t External_8_IRQHandler(void)
{
800009b0:	ff010113          	addi	sp,sp,-16
800009b4:	00812623          	sw	s0,12(sp)
800009b8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:78
    return(0);
800009bc:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:79
}
800009c0:	00078513          	mv	a0,a5
800009c4:	00c12403          	lw	s0,12(sp)
800009c8:	01010113          	addi	sp,sp,16
800009cc:	00008067          	ret

800009d0 <External_9_IRQHandler>:
External_9_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:82

__attribute__((weak))  uint8_t External_9_IRQHandler(void)
{
800009d0:	ff010113          	addi	sp,sp,-16
800009d4:	00812623          	sw	s0,12(sp)
800009d8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:83
    return(0);
800009dc:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:84
}
800009e0:	00078513          	mv	a0,a5
800009e4:	00c12403          	lw	s0,12(sp)
800009e8:	01010113          	addi	sp,sp,16
800009ec:	00008067          	ret

800009f0 <External_10_IRQHandler>:
External_10_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:87

__attribute__((weak))  uint8_t External_10_IRQHandler(void)
{
800009f0:	ff010113          	addi	sp,sp,-16
800009f4:	00812623          	sw	s0,12(sp)
800009f8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:88
    return(0);
800009fc:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:89
}
80000a00:	00078513          	mv	a0,a5
80000a04:	00c12403          	lw	s0,12(sp)
80000a08:	01010113          	addi	sp,sp,16
80000a0c:	00008067          	ret

80000a10 <External_11_IRQHandler>:
External_11_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:92

__attribute__((weak))  uint8_t External_11_IRQHandler(void)
{
80000a10:	ff010113          	addi	sp,sp,-16
80000a14:	00812623          	sw	s0,12(sp)
80000a18:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:93
    return(0);
80000a1c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:94
}
80000a20:	00078513          	mv	a0,a5
80000a24:	00c12403          	lw	s0,12(sp)
80000a28:	01010113          	addi	sp,sp,16
80000a2c:	00008067          	ret

80000a30 <External_12_IRQHandler>:
External_12_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:97

__attribute__((weak))  uint8_t External_12_IRQHandler(void)
{
80000a30:	ff010113          	addi	sp,sp,-16
80000a34:	00812623          	sw	s0,12(sp)
80000a38:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:98
    return(0);
80000a3c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:99
}
80000a40:	00078513          	mv	a0,a5
80000a44:	00c12403          	lw	s0,12(sp)
80000a48:	01010113          	addi	sp,sp,16
80000a4c:	00008067          	ret

80000a50 <External_13_IRQHandler>:
External_13_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:102

__attribute__((weak))  uint8_t External_13_IRQHandler(void)
{
80000a50:	ff010113          	addi	sp,sp,-16
80000a54:	00812623          	sw	s0,12(sp)
80000a58:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:103
    return(0);
80000a5c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:104
}
80000a60:	00078513          	mv	a0,a5
80000a64:	00c12403          	lw	s0,12(sp)
80000a68:	01010113          	addi	sp,sp,16
80000a6c:	00008067          	ret

80000a70 <External_14_IRQHandler>:
External_14_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:107

__attribute__((weak))  uint8_t External_14_IRQHandler(void)
{
80000a70:	ff010113          	addi	sp,sp,-16
80000a74:	00812623          	sw	s0,12(sp)
80000a78:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:108
    return(0);
80000a7c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:109
}
80000a80:	00078513          	mv	a0,a5
80000a84:	00c12403          	lw	s0,12(sp)
80000a88:	01010113          	addi	sp,sp,16
80000a8c:	00008067          	ret

80000a90 <External_15_IRQHandler>:
External_15_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:112

__attribute__((weak))  uint8_t External_15_IRQHandler(void)
{
80000a90:	ff010113          	addi	sp,sp,-16
80000a94:	00812623          	sw	s0,12(sp)
80000a98:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:113
    return(0);
80000a9c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:114
}
80000aa0:	00078513          	mv	a0,a5
80000aa4:	00c12403          	lw	s0,12(sp)
80000aa8:	01010113          	addi	sp,sp,16
80000aac:	00008067          	ret

80000ab0 <External_16_IRQHandler>:
External_16_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:117

__attribute__((weak))  uint8_t External_16_IRQHandler(void)
{
80000ab0:	ff010113          	addi	sp,sp,-16
80000ab4:	00812623          	sw	s0,12(sp)
80000ab8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:118
    return(0);
80000abc:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:119
}
80000ac0:	00078513          	mv	a0,a5
80000ac4:	00c12403          	lw	s0,12(sp)
80000ac8:	01010113          	addi	sp,sp,16
80000acc:	00008067          	ret

80000ad0 <External_17_IRQHandler>:
External_17_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:122

__attribute__((weak))  uint8_t External_17_IRQHandler(void)
{
80000ad0:	ff010113          	addi	sp,sp,-16
80000ad4:	00812623          	sw	s0,12(sp)
80000ad8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:123
    return(0);
80000adc:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:124
}
80000ae0:	00078513          	mv	a0,a5
80000ae4:	00c12403          	lw	s0,12(sp)
80000ae8:	01010113          	addi	sp,sp,16
80000aec:	00008067          	ret

80000af0 <External_18_IRQHandler>:
External_18_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:127

__attribute__((weak))  uint8_t External_18_IRQHandler(void)
{
80000af0:	ff010113          	addi	sp,sp,-16
80000af4:	00812623          	sw	s0,12(sp)
80000af8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:128
    return(0);
80000afc:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:129
}
80000b00:	00078513          	mv	a0,a5
80000b04:	00c12403          	lw	s0,12(sp)
80000b08:	01010113          	addi	sp,sp,16
80000b0c:	00008067          	ret

80000b10 <External_19_IRQHandler>:
External_19_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:132

__attribute__((weak))  uint8_t External_19_IRQHandler(void)
{
80000b10:	ff010113          	addi	sp,sp,-16
80000b14:	00812623          	sw	s0,12(sp)
80000b18:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:133
    return(0);
80000b1c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:134
}
80000b20:	00078513          	mv	a0,a5
80000b24:	00c12403          	lw	s0,12(sp)
80000b28:	01010113          	addi	sp,sp,16
80000b2c:	00008067          	ret

80000b30 <External_20_IRQHandler>:
External_20_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:137

__attribute__((weak))  uint8_t External_20_IRQHandler(void)
{
80000b30:	ff010113          	addi	sp,sp,-16
80000b34:	00812623          	sw	s0,12(sp)
80000b38:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:138
    return(0);
80000b3c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:139
}
80000b40:	00078513          	mv	a0,a5
80000b44:	00c12403          	lw	s0,12(sp)
80000b48:	01010113          	addi	sp,sp,16
80000b4c:	00008067          	ret

80000b50 <External_21_IRQHandler>:
External_21_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:142

__attribute__((weak))  uint8_t External_21_IRQHandler(void)
{
80000b50:	ff010113          	addi	sp,sp,-16
80000b54:	00812623          	sw	s0,12(sp)
80000b58:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:143
    return(0);
80000b5c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:144
}
80000b60:	00078513          	mv	a0,a5
80000b64:	00c12403          	lw	s0,12(sp)
80000b68:	01010113          	addi	sp,sp,16
80000b6c:	00008067          	ret

80000b70 <External_22_IRQHandler>:
External_22_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:147

__attribute__((weak))  uint8_t External_22_IRQHandler(void)
{
80000b70:	ff010113          	addi	sp,sp,-16
80000b74:	00812623          	sw	s0,12(sp)
80000b78:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:148
    return(0);
80000b7c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:149
}
80000b80:	00078513          	mv	a0,a5
80000b84:	00c12403          	lw	s0,12(sp)
80000b88:	01010113          	addi	sp,sp,16
80000b8c:	00008067          	ret

80000b90 <External_23_IRQHandler>:
External_23_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:152

__attribute__((weak))  uint8_t External_23_IRQHandler(void)
{
80000b90:	ff010113          	addi	sp,sp,-16
80000b94:	00812623          	sw	s0,12(sp)
80000b98:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:153
    return(0);
80000b9c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:154
}
80000ba0:	00078513          	mv	a0,a5
80000ba4:	00c12403          	lw	s0,12(sp)
80000ba8:	01010113          	addi	sp,sp,16
80000bac:	00008067          	ret

80000bb0 <External_24_IRQHandler>:
External_24_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:157

__attribute__((weak))  uint8_t External_24_IRQHandler(void)
{
80000bb0:	ff010113          	addi	sp,sp,-16
80000bb4:	00812623          	sw	s0,12(sp)
80000bb8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:158
    return(0);
80000bbc:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:159
}
80000bc0:	00078513          	mv	a0,a5
80000bc4:	00c12403          	lw	s0,12(sp)
80000bc8:	01010113          	addi	sp,sp,16
80000bcc:	00008067          	ret

80000bd0 <External_25_IRQHandler>:
External_25_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:162

__attribute__((weak))  uint8_t External_25_IRQHandler(void)
{
80000bd0:	ff010113          	addi	sp,sp,-16
80000bd4:	00812623          	sw	s0,12(sp)
80000bd8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:163
    return(0);
80000bdc:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:164
}
80000be0:	00078513          	mv	a0,a5
80000be4:	00c12403          	lw	s0,12(sp)
80000be8:	01010113          	addi	sp,sp,16
80000bec:	00008067          	ret

80000bf0 <External_26_IRQHandler>:
External_26_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:167

__attribute__((weak))  uint8_t External_26_IRQHandler(void)
{
80000bf0:	ff010113          	addi	sp,sp,-16
80000bf4:	00812623          	sw	s0,12(sp)
80000bf8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:168
    return(0);
80000bfc:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:169
}
80000c00:	00078513          	mv	a0,a5
80000c04:	00c12403          	lw	s0,12(sp)
80000c08:	01010113          	addi	sp,sp,16
80000c0c:	00008067          	ret

80000c10 <External_27_IRQHandler>:
External_27_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:172

__attribute__((weak))  uint8_t External_27_IRQHandler(void)
{
80000c10:	ff010113          	addi	sp,sp,-16
80000c14:	00812623          	sw	s0,12(sp)
80000c18:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:173
    return(0);
80000c1c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:174
}
80000c20:	00078513          	mv	a0,a5
80000c24:	00c12403          	lw	s0,12(sp)
80000c28:	01010113          	addi	sp,sp,16
80000c2c:	00008067          	ret

80000c30 <External_28_IRQHandler>:
External_28_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:177

__attribute__((weak))  uint8_t External_28_IRQHandler(void)
{
80000c30:	ff010113          	addi	sp,sp,-16
80000c34:	00812623          	sw	s0,12(sp)
80000c38:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:178
    return(0);
80000c3c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:179
}
80000c40:	00078513          	mv	a0,a5
80000c44:	00c12403          	lw	s0,12(sp)
80000c48:	01010113          	addi	sp,sp,16
80000c4c:	00008067          	ret

80000c50 <External_29_IRQHandler>:
External_29_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:182

__attribute__((weak))  uint8_t External_29_IRQHandler(void)
{
80000c50:	ff010113          	addi	sp,sp,-16
80000c54:	00812623          	sw	s0,12(sp)
80000c58:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:183
    return(0);
80000c5c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:184
}
80000c60:	00078513          	mv	a0,a5
80000c64:	00c12403          	lw	s0,12(sp)
80000c68:	01010113          	addi	sp,sp,16
80000c6c:	00008067          	ret

80000c70 <External_30_IRQHandler>:
External_30_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:187

__attribute__((weak))  uint8_t External_30_IRQHandler(void)
{
80000c70:	ff010113          	addi	sp,sp,-16
80000c74:	00812623          	sw	s0,12(sp)
80000c78:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:188
    return(0);
80000c7c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:189
}
80000c80:	00078513          	mv	a0,a5
80000c84:	00c12403          	lw	s0,12(sp)
80000c88:	01010113          	addi	sp,sp,16
80000c8c:	00008067          	ret

80000c90 <External_31_IRQHandler>:
External_31_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:192

__attribute__((weak))  uint8_t External_31_IRQHandler(void)
{
80000c90:	ff010113          	addi	sp,sp,-16
80000c94:	00812623          	sw	s0,12(sp)
80000c98:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:193
    return(0);
80000c9c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:194
}
80000ca0:	00078513          	mv	a0,a5
80000ca4:	00c12403          	lw	s0,12(sp)
80000ca8:	01010113          	addi	sp,sp,16
80000cac:	00008067          	ret

80000cb0 <write_hex>:
write_hex():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:55

char *__env[1] = { 0 };
char **environ = __env;

void write_hex(int fd, uint32_t hex)
{
80000cb0:	fd010113          	addi	sp,sp,-48
80000cb4:	02112623          	sw	ra,44(sp)
80000cb8:	02812423          	sw	s0,40(sp)
80000cbc:	03010413          	addi	s0,sp,48
80000cc0:	fca42e23          	sw	a0,-36(s0)
80000cc4:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:61
    uint8_t ii;
    uint8_t jj;
    char towrite;
    uint8_t digit;

    write( fd , "0x", 2 );
80000cc8:	00200613          	li	a2,2
80000ccc:	800077b7          	lui	a5,0x80007
80000cd0:	f6078593          	addi	a1,a5,-160 # 80006f60 <__stack_top+0xfffc5150>
80000cd4:	fdc42503          	lw	a0,-36(s0)
80000cd8:	08c060ef          	jal	ra,80006d64 <write>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:63

    for (ii = 8 ; ii > 0; ii--)
80000cdc:	00800793          	li	a5,8
80000ce0:	fef407a3          	sb	a5,-17(s0)
80000ce4:	0980006f          	j	80000d7c <write_hex+0xcc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:65
    {
        jj = ii-1;
80000ce8:	fef44783          	lbu	a5,-17(s0)
80000cec:	fff78793          	addi	a5,a5,-1
80000cf0:	fef40723          	sb	a5,-18(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:66
        digit = ((hex & (0xF << (jj*4))) >> (jj*4));
80000cf4:	fee44783          	lbu	a5,-18(s0)
80000cf8:	00279793          	slli	a5,a5,0x2
80000cfc:	00f00713          	li	a4,15
80000d00:	00f717b3          	sll	a5,a4,a5
80000d04:	00078713          	mv	a4,a5
80000d08:	fd842783          	lw	a5,-40(s0)
80000d0c:	00f77733          	and	a4,a4,a5
80000d10:	fee44783          	lbu	a5,-18(s0)
80000d14:	00279793          	slli	a5,a5,0x2
80000d18:	00f757b3          	srl	a5,a4,a5
80000d1c:	fef406a3          	sb	a5,-19(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:67
        towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
80000d20:	fed44703          	lbu	a4,-19(s0)
80000d24:	00900793          	li	a5,9
80000d28:	00e7ee63          	bltu	a5,a4,80000d44 <write_hex+0x94>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 1)
80000d2c:	fed44783          	lbu	a5,-19(s0)
80000d30:	03078793          	addi	a5,a5,48
80000d34:	0ff7f793          	andi	a5,a5,255
80000d38:	01879793          	slli	a5,a5,0x18
80000d3c:	4187d793          	srai	a5,a5,0x18
80000d40:	0180006f          	j	80000d58 <write_hex+0xa8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 2)
80000d44:	fed44783          	lbu	a5,-19(s0)
80000d48:	03778793          	addi	a5,a5,55
80000d4c:	0ff7f793          	andi	a5,a5,255
80000d50:	01879793          	slli	a5,a5,0x18
80000d54:	4187d793          	srai	a5,a5,0x18
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 4)
80000d58:	fef40623          	sb	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:68 (discriminator 4)
        write( fd, &towrite, 1);
80000d5c:	fec40793          	addi	a5,s0,-20
80000d60:	00100613          	li	a2,1
80000d64:	00078593          	mv	a1,a5
80000d68:	fdc42503          	lw	a0,-36(s0)
80000d6c:	7f9050ef          	jal	ra,80006d64 <write>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 4)
    for (ii = 8 ; ii > 0; ii--)
80000d70:	fef44783          	lbu	a5,-17(s0)
80000d74:	fff78793          	addi	a5,a5,-1
80000d78:	fef407a3          	sb	a5,-17(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 2)
80000d7c:	fef44783          	lbu	a5,-17(s0)
80000d80:	f60794e3          	bnez	a5,80000ce8 <write_hex+0x38>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:70
    }
}
80000d84:	00000013          	nop
80000d88:	02c12083          	lw	ra,44(sp)
80000d8c:	02812403          	lw	s0,40(sp)
80000d90:	03010113          	addi	sp,sp,48
80000d94:	00008067          	ret

80000d98 <_exit>:
_exit():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:74

               
void _exit(int code)
{
80000d98:	fd010113          	addi	sp,sp,-48
80000d9c:	02112623          	sw	ra,44(sp)
80000da0:	02812423          	sw	s0,40(sp)
80000da4:	03010413          	addi	s0,sp,48
80000da8:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:76
#ifdef MSCC_STDIO_THRU_CORE_UART_APB
    const char * message = "\nProgam has exited with code:";
80000dac:	800077b7          	lui	a5,0x80007
80000db0:	f6478793          	addi	a5,a5,-156 # 80006f64 <__stack_top+0xfffc5154>
80000db4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:78

    write(STDERR_FILENO, message, strlen(message));
80000db8:	fec42503          	lw	a0,-20(s0)
80000dbc:	0b0010ef          	jal	ra,80001e6c <strlen>
80000dc0:	00050793          	mv	a5,a0
80000dc4:	00078613          	mv	a2,a5
80000dc8:	fec42583          	lw	a1,-20(s0)
80000dcc:	00200513          	li	a0,2
80000dd0:	795050ef          	jal	ra,80006d64 <write>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:79
    write_hex(STDERR_FILENO, code);
80000dd4:	fdc42783          	lw	a5,-36(s0)
80000dd8:	00078593          	mv	a1,a5
80000ddc:	00200513          	li	a0,2
80000de0:	ed1ff0ef          	jal	ra,80000cb0 <write_hex>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:82 (discriminator 1)
#endif

    while (1);
80000de4:	0000006f          	j	80000de4 <_exit+0x4c>

80000de8 <_isatty>:
_isatty():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:101
    curbrk += incr;
    return curbrk - incr;
}

int _isatty(int fd)
{
80000de8:	fe010113          	addi	sp,sp,-32
80000dec:	00812e23          	sw	s0,28(sp)
80000df0:	02010413          	addi	s0,sp,32
80000df4:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:102
    if (fd == STDOUT_FILENO || fd == STDERR_FILENO)
80000df8:	fec42703          	lw	a4,-20(s0)
80000dfc:	00100793          	li	a5,1
80000e00:	00f70863          	beq	a4,a5,80000e10 <_isatty+0x28>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:102 (discriminator 1)
80000e04:	fec42703          	lw	a4,-20(s0)
80000e08:	00200793          	li	a5,2
80000e0c:	00f71663          	bne	a4,a5,80000e18 <_isatty+0x30>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:104
    {
        return 1;
80000e10:	00100793          	li	a5,1
80000e14:	0140006f          	j	80000e28 <_isatty+0x40>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:107
    }

    errno = EBADF;
80000e18:	800217b7          	lui	a5,0x80021
80000e1c:	00900713          	li	a4,9
80000e20:	2ce7a823          	sw	a4,720(a5) # 800212d0 <__stack_top+0xfffdf4c0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:108
    return 0;
80000e24:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:109
}
80000e28:	00078513          	mv	a0,a5
80000e2c:	01c12403          	lw	s0,28(sp)
80000e30:	02010113          	addi	sp,sp,32
80000e34:	00008067          	ret

80000e38 <stub>:
stub():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:112

static int stub(int err)
{
80000e38:	fe010113          	addi	sp,sp,-32
80000e3c:	00812e23          	sw	s0,28(sp)
80000e40:	02010413          	addi	s0,sp,32
80000e44:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:113
    errno = err;
80000e48:	800217b7          	lui	a5,0x80021
80000e4c:	fec42703          	lw	a4,-20(s0)
80000e50:	2ce7a823          	sw	a4,720(a5) # 800212d0 <__stack_top+0xfffdf4c0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:114
    return -1;
80000e54:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:115
}
80000e58:	00078513          	mv	a0,a5
80000e5c:	01c12403          	lw	s0,28(sp)
80000e60:	02010113          	addi	sp,sp,32
80000e64:	00008067          	ret

80000e68 <_write>:
_write():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:226
{
    return stub(ECHILD);
}

ssize_t _write(int fd, const void* ptr, size_t len)
{
80000e68:	fd010113          	addi	sp,sp,-48
80000e6c:	02112623          	sw	ra,44(sp)
80000e70:	02812423          	sw	s0,40(sp)
80000e74:	03010413          	addi	s0,sp,48
80000e78:	fca42e23          	sw	a0,-36(s0)
80000e7c:	fcb42c23          	sw	a1,-40(s0)
80000e80:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:229

#ifdef MSCC_STDIO_THRU_CORE_UART_APB
  const uint8_t * current = (const uint8_t *) ptr;
80000e84:	fd842783          	lw	a5,-40(s0)
80000e88:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:232
  size_t jj;

  if (_isatty(fd))
80000e8c:	fdc42503          	lw	a0,-36(s0)
80000e90:	f59ff0ef          	jal	ra,80000de8 <_isatty>
80000e94:	00050793          	mv	a5,a0
80000e98:	08078c63          	beqz	a5,80000f30 <_write+0xc8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:238
  {
        /*--------------------------------------------------------------------------
        * Initialize the UART driver if it is the first time this function is
        * called.
        */
        if ( !g_stdio_uart_init_done )
80000e9c:	9101a783          	lw	a5,-1776(gp) # 80007730 <g_stdio_uart_init_done>
80000ea0:	02079063          	bnez	a5,80000ec0 <_write+0x58>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:245
            /******************************************************************************
            * Baud value:
            * This value is calculated using the following equation:
            *      BAUD_VALUE = (CLOCK / (16 * BAUD_RATE)) - 1
            *****************************************************************************/
            UART_init( &g_stdio_uart, MSCC_STDIO_UART_BASE_ADDR, ((SYS_CLK_FREQ/(16 * MSCC_STDIO_BAUD_VALUE))-1), (DATA_8_BITS | NO_PARITY));
80000ea4:	00100693          	li	a3,1
80000ea8:	02c00613          	li	a2,44
80000eac:	700015b7          	lui	a1,0x70001
80000eb0:	90818513          	addi	a0,gp,-1784 # 80007728 <g_stdio_uart>
80000eb4:	174000ef          	jal	ra,80001028 <UART_init>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:246
            g_stdio_uart_init_done = 1;
80000eb8:	00100713          	li	a4,1
80000ebc:	90e1a823          	sw	a4,-1776(gp) # 80007730 <g_stdio_uart_init_done>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:249
        }

    for (jj = 0; jj < len; jj++)
80000ec0:	fe042623          	sw	zero,-20(s0)
80000ec4:	0580006f          	j	80000f1c <_write+0xb4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:251
    {
        UART_send(&g_stdio_uart, current + jj, 1);
80000ec8:	fe842703          	lw	a4,-24(s0)
80000ecc:	fec42783          	lw	a5,-20(s0)
80000ed0:	00f707b3          	add	a5,a4,a5
80000ed4:	00100613          	li	a2,1
80000ed8:	00078593          	mv	a1,a5
80000edc:	90818513          	addi	a0,gp,-1784 # 80007728 <g_stdio_uart>
80000ee0:	260000ef          	jal	ra,80001140 <UART_send>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:252
        if (current[jj] == '\n')
80000ee4:	fe842703          	lw	a4,-24(s0)
80000ee8:	fec42783          	lw	a5,-20(s0)
80000eec:	00f707b3          	add	a5,a4,a5
80000ef0:	0007c703          	lbu	a4,0(a5)
80000ef4:	00a00793          	li	a5,10
80000ef8:	00f71c63          	bne	a4,a5,80000f10 <_write+0xa8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:254
        {
            UART_send(&g_stdio_uart, (const uint8_t *)"\r", 1);
80000efc:	00100613          	li	a2,1
80000f00:	800077b7          	lui	a5,0x80007
80000f04:	f8478593          	addi	a1,a5,-124 # 80006f84 <__stack_top+0xfffc5174>
80000f08:	90818513          	addi	a0,gp,-1784 # 80007728 <g_stdio_uart>
80000f0c:	234000ef          	jal	ra,80001140 <UART_send>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 2)
    for (jj = 0; jj < len; jj++)
80000f10:	fec42783          	lw	a5,-20(s0)
80000f14:	00178793          	addi	a5,a5,1
80000f18:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 1)
80000f1c:	fec42703          	lw	a4,-20(s0)
80000f20:	fd442783          	lw	a5,-44(s0)
80000f24:	faf762e3          	bltu	a4,a5,80000ec8 <_write+0x60>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:257
        }
    }
    return len;
80000f28:	fd442783          	lw	a5,-44(s0)
80000f2c:	0100006f          	j	80000f3c <_write+0xd4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:261
  }
#endif

  return stub(EBADF);
80000f30:	00900513          	li	a0,9
80000f34:	f05ff0ef          	jal	ra,80000e38 <stub>
80000f38:	00050793          	mv	a5,a0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:262
}
80000f3c:	00078513          	mv	a0,a5
80000f40:	02c12083          	lw	ra,44(sp)
80000f44:	02812403          	lw	s0,40(sp)
80000f48:	03010113          	addi	sp,sp,48
80000f4c:	00008067          	ret

80000f50 <HW_set_32bit_reg>:
HW_set_32bit_reg():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:36
 *
 * a0:   addr_t reg_addr
 * a1:   uint32_t value
 */
HW_set_32bit_reg:
    sw a1, 0(a0)
80000f50:	00b52023          	sw	a1,0(a0) # 44000000 <RAM_SIZE+0x43f80000>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:37
    ret
80000f54:	00008067          	ret

80000f58 <HW_get_32bit_reg>:
HW_get_32bit_reg():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:47
 *
 * R0:   addr_t reg_addr
 * @return          32 bits value read from the peripheral register.
 */
HW_get_32bit_reg:
    lw a0, 0(a0)
80000f58:	00052503          	lw	a0,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:48
    ret
80000f5c:	00008067          	ret

80000f60 <HW_set_32bit_reg_field>:
HW_set_32bit_reg_field():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:60
 * a1:   int_fast8_t shift
 * a2:   uint32_t mask
 * a3:   uint32_t value
 */
HW_set_32bit_reg_field:
    mv t3, a3
80000f60:	00068e13          	mv	t3,a3
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:61
    sll t3, t3, a1
80000f64:	00be1e33          	sll	t3,t3,a1
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:62
    and  t3, t3, a2
80000f68:	00ce7e33          	and	t3,t3,a2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:63
    lw t1, 0(a0)
80000f6c:	00052303          	lw	t1,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:64
    mv t2, a2
80000f70:	00060393          	mv	t2,a2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:65
    not t2, t2
80000f74:	fff3c393          	not	t2,t2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:66
    and t1, t1, t2
80000f78:	00737333          	and	t1,t1,t2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:67
    or t1, t1, t3
80000f7c:	01c36333          	or	t1,t1,t3
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:68
    sw t1, 0(a0)
80000f80:	00652023          	sw	t1,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:69
    ret
80000f84:	00008067          	ret

80000f88 <HW_get_32bit_reg_field>:
HW_get_32bit_reg_field():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:83
 *
 * @return          32 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_32bit_reg_field:
    lw a0, 0(a0)
80000f88:	00052503          	lw	a0,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:84
    and a0, a0, a2
80000f8c:	00c57533          	and	a0,a0,a2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:85
    srl a0, a0, a1
80000f90:	00b55533          	srl	a0,a0,a1
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:86
    ret
80000f94:	00008067          	ret

80000f98 <HW_set_16bit_reg>:
HW_set_16bit_reg():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:96
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast16_t value
 */
HW_set_16bit_reg:
    sh a1, 0(a0)
80000f98:	00b51023          	sh	a1,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:97
    ret
80000f9c:	00008067          	ret

80000fa0 <HW_get_16bit_reg>:
HW_get_16bit_reg():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:107
 *
 * a0:   addr_t reg_addr
 * @return          16 bits value read from the peripheral register.
 */
HW_get_16bit_reg:
    lh a0, (a0)
80000fa0:	00051503          	lh	a0,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:108
    ret
80000fa4:	00008067          	ret

80000fa8 <HW_set_16bit_reg_field>:
HW_set_16bit_reg_field():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:121
 * a2:   uint_fast16_t mask
 * a3:   uint_fast16_t value
 * @param value     Value to be written in the specified field.
 */
HW_set_16bit_reg_field:
    mv t3, a3
80000fa8:	00068e13          	mv	t3,a3
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:122
    sll t3, t3, a1
80000fac:	00be1e33          	sll	t3,t3,a1
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:123
    and  t3, t3, a2
80000fb0:	00ce7e33          	and	t3,t3,a2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:124
    lh t1, 0(a0)
80000fb4:	00051303          	lh	t1,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:125
    mv t2, a2
80000fb8:	00060393          	mv	t2,a2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:126
    not t2, t2
80000fbc:	fff3c393          	not	t2,t2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:127
    and t1, t1, t2
80000fc0:	00737333          	and	t1,t1,t2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:128
    or t1, t1, t3
80000fc4:	01c36333          	or	t1,t1,t3
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:129
    sh t1, 0(a0)
80000fc8:	00651023          	sh	t1,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:130
    ret
80000fcc:	00008067          	ret

80000fd0 <HW_get_16bit_reg_field>:
HW_get_16bit_reg_field():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:144
 *
 * @return          16 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_16bit_reg_field:
    lh a0, 0(a0)
80000fd0:	00051503          	lh	a0,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:145
    and a0, a0, a2
80000fd4:	00c57533          	and	a0,a0,a2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:146
    srl a0, a0, a1
80000fd8:	00b55533          	srl	a0,a0,a1
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:147
    ret
80000fdc:	00008067          	ret

80000fe0 <HW_set_8bit_reg>:
HW_set_8bit_reg():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:157
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast8_t value
 */
HW_set_8bit_reg:
    sb a1, 0(a0)
80000fe0:	00b50023          	sb	a1,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:158
    ret
80000fe4:	00008067          	ret

80000fe8 <HW_get_8bit_reg>:
HW_get_8bit_reg():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:168
 *
 * a0:   addr_t reg_addr
 * @return          8 bits value read from the peripheral register.
 */
HW_get_8bit_reg:
    lb a0, 0(a0)
80000fe8:	00050503          	lb	a0,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:169
    ret
80000fec:	00008067          	ret

80000ff0 <HW_set_8bit_reg_field>:
HW_set_8bit_reg_field():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:181
 * a1:   int_fast8_t shift
 * a2:   uint_fast8_t mask
 * a3:   uint_fast8_t value
 */
HW_set_8bit_reg_field:
    mv t3, a3
80000ff0:	00068e13          	mv	t3,a3
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:182
    sll t3, t3, a1
80000ff4:	00be1e33          	sll	t3,t3,a1
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:183
    and  t3, t3, a2
80000ff8:	00ce7e33          	and	t3,t3,a2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:184
    lb t1, 0(a0)
80000ffc:	00050303          	lb	t1,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:185
    mv t2, a2
80001000:	00060393          	mv	t2,a2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:186
    not t2, t2
80001004:	fff3c393          	not	t2,t2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:187
    and t1, t1, t2
80001008:	00737333          	and	t1,t1,t2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:188
    or t1, t1, t3
8000100c:	01c36333          	or	t1,t1,t3
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:189
    sb t1, 0(a0)
80001010:	00650023          	sb	t1,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:190
    ret
80001014:	00008067          	ret

80001018 <HW_get_8bit_reg_field>:
HW_get_8bit_reg_field():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:204
 *
 * @return          8 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_8bit_reg_field:
    lb a0, 0(a0)
80001018:	00050503          	lb	a0,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:205
    and a0, a0, a2
8000101c:	00c57533          	and	a0,a0,a2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:206
    srl a0, a0, a1
80001020:	00b55533          	srl	a0,a0,a1
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:207
    ret
80001024:	00008067          	ret

80001028 <UART_init>:
UART_init():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:46
    UART_instance_t * this_uart,
    addr_t base_addr,
    uint16_t baud_value,
    uint8_t line_config
)
{
80001028:	fd010113          	addi	sp,sp,-48
8000102c:	02112623          	sw	ra,44(sp)
80001030:	02812423          	sw	s0,40(sp)
80001034:	03010413          	addi	s0,sp,48
80001038:	fca42e23          	sw	a0,-36(s0)
8000103c:	fcb42c23          	sw	a1,-40(s0)
80001040:	00060793          	mv	a5,a2
80001044:	00068713          	mv	a4,a3
80001048:	fcf41b23          	sh	a5,-42(s0)
8000104c:	00070793          	mv	a5,a4
80001050:	fcf40aa3          	sb	a5,-43(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53
    
    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( line_config <= MAX_LINE_CONFIG )
    HAL_ASSERT( baud_value <= MAX_BAUD_VALUE )

    if( ( this_uart != NULL_INSTANCE ) &&
80001054:	fdc42783          	lw	a5,-36(s0)
80001058:	0c078a63          	beqz	a5,8000112c <UART_init+0x104>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53 (discriminator 1)
8000105c:	fd544703          	lbu	a4,-43(s0)
80001060:	00700793          	li	a5,7
80001064:	0ce7e463          	bltu	a5,a4,8000112c <UART_init+0x104>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:54
        ( line_config <= MAX_LINE_CONFIG ) &&
80001068:	fd645703          	lhu	a4,-42(s0)
8000106c:	000027b7          	lui	a5,0x2
80001070:	0af77e63          	bleu	a5,a4,8000112c <UART_init+0x104>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:60
        ( baud_value <= MAX_BAUD_VALUE ) )
    {
        /*
         * Store lower 8-bits of baud value in CTRL1.
         */
        HAL_set_8bit_reg( base_addr, CTRL1, (uint_fast8_t)(baud_value &
80001074:	fd842783          	lw	a5,-40(s0)
80001078:	00878713          	addi	a4,a5,8 # 2008 <HEAP_SIZE-0xdff8>
8000107c:	fd645783          	lhu	a5,-42(s0)
80001080:	0ff7f793          	andi	a5,a5,255
80001084:	00078593          	mv	a1,a5
80001088:	00070513          	mv	a0,a4
8000108c:	f55ff0ef          	jal	ra,80000fe0 <HW_set_8bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:67
    
        /*
         * Extract higher 5-bits of baud value and store in higher 5-bits 
         * of CTRL2, along with line configuration in lower 3 three bits.
         */
        HAL_set_8bit_reg( base_addr, CTRL2, (uint_fast8_t)line_config | 
80001090:	fd842783          	lw	a5,-40(s0)
80001094:	00c78693          	addi	a3,a5,12
80001098:	fd544703          	lbu	a4,-43(s0)
8000109c:	fd645783          	lhu	a5,-42(s0)
800010a0:	4057d793          	srai	a5,a5,0x5
800010a4:	7f87f793          	andi	a5,a5,2040
800010a8:	00f767b3          	or	a5,a4,a5
800010ac:	00078593          	mv	a1,a5
800010b0:	00068513          	mv	a0,a3
800010b4:	f2dff0ef          	jal	ra,80000fe0 <HW_set_8bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:71
                                           (uint_fast8_t)((baud_value &
                                   BAUDVALUE_MSB) >> BAUDVALUE_SHIFT ) );
    
        this_uart->base_address = base_addr;
800010b8:	fdc42783          	lw	a5,-36(s0)
800010bc:	fd842703          	lw	a4,-40(s0)
800010c0:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:94
        
        /*
         * Flush the receive FIFO of data that may have been received before the
         * driver was initialized.
         */
        rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
800010c4:	fdc42783          	lw	a5,-36(s0)
800010c8:	0007a783          	lw	a5,0(a5)
800010cc:	01078793          	addi	a5,a5,16
800010d0:	00078513          	mv	a0,a5
800010d4:	f15ff0ef          	jal	ra,80000fe8 <HW_get_8bit_reg>
800010d8:	00050793          	mv	a5,a0
800010dc:	0027f793          	andi	a5,a5,2
800010e0:	fef407a3          	sb	a5,-17(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
                                                    STATUS_RXFULL_MASK;
        while ( rx_full )
800010e4:	0380006f          	j	8000111c <UART_init+0xf4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:98
        {
            HAL_get_8bit_reg( this_uart->base_address, RXDATA );
800010e8:	fdc42783          	lw	a5,-36(s0)
800010ec:	0007a783          	lw	a5,0(a5)
800010f0:	00478793          	addi	a5,a5,4
800010f4:	00078513          	mv	a0,a5
800010f8:	ef1ff0ef          	jal	ra,80000fe8 <HW_get_8bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:99
            rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
800010fc:	fdc42783          	lw	a5,-36(s0)
80001100:	0007a783          	lw	a5,0(a5)
80001104:	01078793          	addi	a5,a5,16
80001108:	00078513          	mv	a0,a5
8000110c:	eddff0ef          	jal	ra,80000fe8 <HW_get_8bit_reg>
80001110:	00050793          	mv	a5,a0
80001114:	0027f793          	andi	a5,a5,2
80001118:	fef407a3          	sb	a5,-17(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
        while ( rx_full )
8000111c:	fef44783          	lbu	a5,-17(s0)
80001120:	fc0794e3          	bnez	a5,800010e8 <UART_init+0xc0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:106
        }

        /*
         * Clear status of the UART instance.
         */
        this_uart->status = (uint8_t)0;
80001124:	fdc42783          	lw	a5,-36(s0)
80001128:	00078223          	sb	zero,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:108
    }
}
8000112c:	00000013          	nop
80001130:	02c12083          	lw	ra,44(sp)
80001134:	02812403          	lw	s0,40(sp)
80001138:	03010113          	addi	sp,sp,48
8000113c:	00008067          	ret

80001140 <UART_send>:
UART_send():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:121
(
    UART_instance_t * this_uart,
    const uint8_t * tx_buffer,
    size_t tx_size
)
{
80001140:	fd010113          	addi	sp,sp,-48
80001144:	02112623          	sw	ra,44(sp)
80001148:	02812423          	sw	s0,40(sp)
8000114c:	03010413          	addi	s0,sp,48
80001150:	fca42e23          	sw	a0,-36(s0)
80001154:	fcb42c23          	sw	a1,-40(s0)
80001158:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( tx_buffer != NULL_BUFFER )
    HAL_ASSERT( tx_size > 0 )
      
    if( (this_uart != NULL_INSTANCE) &&
8000115c:	fdc42783          	lw	a5,-36(s0)
80001160:	08078063          	beqz	a5,800011e0 <UART_send+0xa0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129 (discriminator 1)
80001164:	fd842783          	lw	a5,-40(s0)
80001168:	06078c63          	beqz	a5,800011e0 <UART_send+0xa0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:130
        (tx_buffer != NULL_BUFFER)   &&
8000116c:	fd442783          	lw	a5,-44(s0)
80001170:	06078863          	beqz	a5,800011e0 <UART_send+0xa0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133
        (tx_size > (size_t)0) )
    {
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
80001174:	fe042623          	sw	zero,-20(s0)
80001178:	05c0006f          	j	800011d4 <UART_send+0x94>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:137 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
8000117c:	fdc42783          	lw	a5,-36(s0)
80001180:	0007a783          	lw	a5,0(a5)
80001184:	01078793          	addi	a5,a5,16
80001188:	00078513          	mv	a0,a5
8000118c:	e5dff0ef          	jal	ra,80000fe8 <HW_get_8bit_reg>
80001190:	00050793          	mv	a5,a0
80001194:	0017f793          	andi	a5,a5,1
80001198:	fef405a3          	sb	a5,-21(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:139 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
8000119c:	feb44783          	lbu	a5,-21(s0)
800011a0:	fc078ee3          	beqz	a5,8000117c <UART_send+0x3c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:141 (discriminator 2)
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
800011a4:	fdc42783          	lw	a5,-36(s0)
800011a8:	0007a683          	lw	a3,0(a5)
800011ac:	fd842703          	lw	a4,-40(s0)
800011b0:	fec42783          	lw	a5,-20(s0)
800011b4:	00f707b3          	add	a5,a4,a5
800011b8:	0007c783          	lbu	a5,0(a5)
800011bc:	00078593          	mv	a1,a5
800011c0:	00068513          	mv	a0,a3
800011c4:	e1dff0ef          	jal	ra,80000fe0 <HW_set_8bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 2)
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
800011c8:	fec42783          	lw	a5,-20(s0)
800011cc:	00178793          	addi	a5,a5,1
800011d0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 1)
800011d4:	fec42703          	lw	a4,-20(s0)
800011d8:	fd442783          	lw	a5,-44(s0)
800011dc:	faf760e3          	bltu	a4,a5,8000117c <UART_send+0x3c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:145
                              (uint_fast8_t)tx_buffer[char_idx] );
        }
    }
}
800011e0:	00000013          	nop
800011e4:	02c12083          	lw	ra,44(sp)
800011e8:	02812403          	lw	s0,40(sp)
800011ec:	03010113          	addi	sp,sp,48
800011f0:	00008067          	ret

800011f4 <UART_polled_tx_string>:
UART_polled_tx_string():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:239
UART_polled_tx_string
( 
    UART_instance_t * this_uart, 
    const uint8_t * p_sz_string
)
{
800011f4:	fd010113          	addi	sp,sp,-48
800011f8:	02112623          	sw	ra,44(sp)
800011fc:	02812423          	sw	s0,40(sp)
80001200:	03010413          	addi	s0,sp,48
80001204:	fca42e23          	sw	a0,-36(s0)
80001208:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246
    uint8_t tx_ready;

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( p_sz_string != NULL_BUFFER )
    
    if( ( this_uart != NULL_INSTANCE ) && ( p_sz_string != NULL_BUFFER ) )
8000120c:	fdc42783          	lw	a5,-36(s0)
80001210:	08078063          	beqz	a5,80001290 <UART_polled_tx_string+0x9c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246 (discriminator 1)
80001214:	fd842783          	lw	a5,-40(s0)
80001218:	06078c63          	beqz	a5,80001290 <UART_polled_tx_string+0x9c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:248
    {
        char_idx = 0U;
8000121c:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
80001220:	05c0006f          	j	8000127c <UART_polled_tx_string+0x88>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:253 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001224:	fdc42783          	lw	a5,-36(s0)
80001228:	0007a783          	lw	a5,0(a5)
8000122c:	01078793          	addi	a5,a5,16
80001230:	00078513          	mv	a0,a5
80001234:	db5ff0ef          	jal	ra,80000fe8 <HW_get_8bit_reg>
80001238:	00050793          	mv	a5,a0
8000123c:	0017f793          	andi	a5,a5,1
80001240:	fef405a3          	sb	a5,-21(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:255 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
80001244:	feb44783          	lbu	a5,-21(s0)
80001248:	fc078ee3          	beqz	a5,80001224 <UART_polled_tx_string+0x30>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:257
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
8000124c:	fdc42783          	lw	a5,-36(s0)
80001250:	0007a683          	lw	a3,0(a5)
80001254:	fd842703          	lw	a4,-40(s0)
80001258:	fec42783          	lw	a5,-20(s0)
8000125c:	00f707b3          	add	a5,a4,a5
80001260:	0007c783          	lbu	a5,0(a5)
80001264:	00078593          	mv	a1,a5
80001268:	00068513          	mv	a0,a3
8000126c:	d75ff0ef          	jal	ra,80000fe0 <HW_set_8bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:259
                              (uint_fast8_t)p_sz_string[char_idx] );
            char_idx++;
80001270:	fec42783          	lw	a5,-20(s0)
80001274:	00178793          	addi	a5,a5,1
80001278:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
8000127c:	fd842703          	lw	a4,-40(s0)
80001280:	fec42783          	lw	a5,-20(s0)
80001284:	00f707b3          	add	a5,a4,a5
80001288:	0007c783          	lbu	a5,0(a5)
8000128c:	f8079ce3          	bnez	a5,80001224 <UART_polled_tx_string+0x30>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:262
        }
    }
}
80001290:	00000013          	nop
80001294:	02c12083          	lw	ra,44(sp)
80001298:	02812403          	lw	s0,40(sp)
8000129c:	03010113          	addi	sp,sp,48
800012a0:	00008067          	ret

800012a4 <pvPortMalloc>:
pvPortMalloc():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:151
}
/*-----------------------------------------------------------*/


void *pvPortMalloc( size_t xWantedSize )
{
800012a4:	fc010113          	addi	sp,sp,-64
800012a8:	02112e23          	sw	ra,60(sp)
800012ac:	02812c23          	sw	s0,56(sp)
800012b0:	04010413          	addi	s0,sp,64
800012b4:	fca42623          	sw	a0,-52(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:154
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
800012b8:	fe042223          	sw	zero,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:156

	vTaskSuspendAll();
800012bc:	00c010ef          	jal	ra,800022c8 <vTaskSuspendAll>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:160
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
800012c0:	9241a783          	lw	a5,-1756(gp) # 80007744 <xHeapHasBeenInitialised.2777>
800012c4:	00079863          	bnez	a5,800012d4 <pvPortMalloc+0x30>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:162
		{
			prvHeapInit();
800012c8:	284000ef          	jal	ra,8000154c <prvHeapInit>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:163
			xHeapHasBeenInitialised = pdTRUE;
800012cc:	00100713          	li	a4,1
800012d0:	92e1a223          	sw	a4,-1756(gp) # 80007744 <xHeapHasBeenInitialised.2777>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:168
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
800012d4:	fcc42783          	lw	a5,-52(s0)
800012d8:	02078a63          	beqz	a5,8000130c <pvPortMalloc+0x68>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:170
		{
			xWantedSize += heapSTRUCT_SIZE;
800012dc:	00800793          	li	a5,8
800012e0:	00078713          	mv	a4,a5
800012e4:	fcc42783          	lw	a5,-52(s0)
800012e8:	00e787b3          	add	a5,a5,a4
800012ec:	fcf42623          	sw	a5,-52(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:173

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
800012f0:	fcc42783          	lw	a5,-52(s0)
800012f4:	0037f793          	andi	a5,a5,3
800012f8:	00078a63          	beqz	a5,8000130c <pvPortMalloc+0x68>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:176
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
800012fc:	fcc42783          	lw	a5,-52(s0)
80001300:	ffc7f793          	andi	a5,a5,-4
80001304:	00478793          	addi	a5,a5,4
80001308:	fcf42623          	sw	a5,-52(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
8000130c:	fcc42783          	lw	a5,-52(s0)
80001310:	14078463          	beqz	a5,80001458 <pvPortMalloc+0x1b4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180 (discriminator 1)
80001314:	fcc42703          	lw	a4,-52(s0)
80001318:	000197b7          	lui	a5,0x19
8000131c:	ffb78793          	addi	a5,a5,-5 # 18ffb <HEAP_SIZE+0x8ffb>
80001320:	12e7ec63          	bltu	a5,a4,80001458 <pvPortMalloc+0x1b4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:184
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
80001324:	91418793          	addi	a5,gp,-1772 # 80007734 <xStart>
80001328:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:185
			pxBlock = xStart.pxNextFreeBlock;
8000132c:	9141a783          	lw	a5,-1772(gp) # 80007734 <xStart>
80001330:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
80001334:	0180006f          	j	8000134c <pvPortMalloc+0xa8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:188
			{
				pxPreviousBlock = pxBlock;
80001338:	fec42783          	lw	a5,-20(s0)
8000133c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:189
				pxBlock = pxBlock->pxNextFreeBlock;
80001340:	fec42783          	lw	a5,-20(s0)
80001344:	0007a783          	lw	a5,0(a5)
80001348:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
8000134c:	fec42783          	lw	a5,-20(s0)
80001350:	0047a783          	lw	a5,4(a5)
80001354:	fcc42703          	lw	a4,-52(s0)
80001358:	00e7f863          	bleu	a4,a5,80001368 <pvPortMalloc+0xc4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186 (discriminator 1)
8000135c:	fec42783          	lw	a5,-20(s0)
80001360:	0007a783          	lw	a5,0(a5)
80001364:	fc079ae3          	bnez	a5,80001338 <pvPortMalloc+0x94>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:193
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
80001368:	fec42703          	lw	a4,-20(s0)
8000136c:	91c18793          	addi	a5,gp,-1764 # 8000773c <xEnd>
80001370:	0ef70463          	beq	a4,a5,80001458 <pvPortMalloc+0x1b4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:197
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
80001374:	fe842783          	lw	a5,-24(s0)
80001378:	0007a783          	lw	a5,0(a5)
8000137c:	00800713          	li	a4,8
80001380:	00e787b3          	add	a5,a5,a4
80001384:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:201

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
80001388:	fec42783          	lw	a5,-20(s0)
8000138c:	0007a703          	lw	a4,0(a5)
80001390:	fe842783          	lw	a5,-24(s0)
80001394:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:204

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
80001398:	fec42783          	lw	a5,-20(s0)
8000139c:	0047a703          	lw	a4,4(a5)
800013a0:	fcc42783          	lw	a5,-52(s0)
800013a4:	40f707b3          	sub	a5,a4,a5
800013a8:	00800713          	li	a4,8
800013ac:	00171713          	slli	a4,a4,0x1
800013b0:	08f77663          	bleu	a5,a4,8000143c <pvPortMalloc+0x198>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:209
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
800013b4:	fec42703          	lw	a4,-20(s0)
800013b8:	fcc42783          	lw	a5,-52(s0)
800013bc:	00f707b3          	add	a5,a4,a5
800013c0:	fcf42e23          	sw	a5,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:213

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
800013c4:	fec42783          	lw	a5,-20(s0)
800013c8:	0047a703          	lw	a4,4(a5)
800013cc:	fcc42783          	lw	a5,-52(s0)
800013d0:	40f70733          	sub	a4,a4,a5
800013d4:	fdc42783          	lw	a5,-36(s0)
800013d8:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:214
					pxBlock->xBlockSize = xWantedSize;
800013dc:	fec42783          	lw	a5,-20(s0)
800013e0:	fcc42703          	lw	a4,-52(s0)
800013e4:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
800013e8:	fdc42783          	lw	a5,-36(s0)
800013ec:	0047a783          	lw	a5,4(a5)
800013f0:	fcf42c23          	sw	a5,-40(s0)
800013f4:	91418793          	addi	a5,gp,-1772 # 80007734 <xStart>
800013f8:	fef42023          	sw	a5,-32(s0)
800013fc:	0100006f          	j	8000140c <pvPortMalloc+0x168>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 3)
80001400:	fe042783          	lw	a5,-32(s0)
80001404:	0007a783          	lw	a5,0(a5)
80001408:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 1)
8000140c:	fe042783          	lw	a5,-32(s0)
80001410:	0007a783          	lw	a5,0(a5)
80001414:	0047a783          	lw	a5,4(a5)
80001418:	fd842703          	lw	a4,-40(s0)
8000141c:	fee7e2e3          	bltu	a5,a4,80001400 <pvPortMalloc+0x15c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 4)
80001420:	fe042783          	lw	a5,-32(s0)
80001424:	0007a703          	lw	a4,0(a5)
80001428:	fdc42783          	lw	a5,-36(s0)
8000142c:	00e7a023          	sw	a4,0(a5)
80001430:	fe042783          	lw	a5,-32(s0)
80001434:	fdc42703          	lw	a4,-36(s0)
80001438:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:220
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
8000143c:	800077b7          	lui	a5,0x80007
80001440:	6207a703          	lw	a4,1568(a5) # 80007620 <__stack_top+0xfffc5810>
80001444:	fec42783          	lw	a5,-20(s0)
80001448:	0047a783          	lw	a5,4(a5)
8000144c:	40f70733          	sub	a4,a4,a5
80001450:	800077b7          	lui	a5,0x80007
80001454:	62e7a023          	sw	a4,1568(a5) # 80007620 <__stack_top+0xfffc5810>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:226
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
80001458:	699000ef          	jal	ra,800022f0 <xTaskResumeAll>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:230

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
8000145c:	fe442783          	lw	a5,-28(s0)
80001460:	00079463          	bnez	a5,80001468 <pvPortMalloc+0x1c4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:233
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
80001464:	0d0050ef          	jal	ra,80006534 <vApplicationMallocFailedHook>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:238
		}
	}
	#endif

	return pvReturn;
80001468:	fe442783          	lw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:239
}
8000146c:	00078513          	mv	a0,a5
80001470:	03c12083          	lw	ra,60(sp)
80001474:	03812403          	lw	s0,56(sp)
80001478:	04010113          	addi	sp,sp,64
8000147c:	00008067          	ret

80001480 <vPortFree>:
vPortFree():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:243
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
80001480:	fd010113          	addi	sp,sp,-48
80001484:	02112623          	sw	ra,44(sp)
80001488:	02812423          	sw	s0,40(sp)
8000148c:	03010413          	addi	s0,sp,48
80001490:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:244
uint8_t *puc = ( uint8_t * ) pv;
80001494:	fdc42783          	lw	a5,-36(s0)
80001498:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:247
BlockLink_t *pxLink;

	if( pv != NULL )
8000149c:	fdc42783          	lw	a5,-36(s0)
800014a0:	08078c63          	beqz	a5,80001538 <vPortFree+0xb8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:251
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
800014a4:	00800793          	li	a5,8
800014a8:	40f007b3          	neg	a5,a5
800014ac:	fe842703          	lw	a4,-24(s0)
800014b0:	00f707b3          	add	a5,a4,a5
800014b4:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:255

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
800014b8:	fe842783          	lw	a5,-24(s0)
800014bc:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:257

		vTaskSuspendAll();
800014c0:	609000ef          	jal	ra,800022c8 <vTaskSuspendAll>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
800014c4:	fe442783          	lw	a5,-28(s0)
800014c8:	0047a783          	lw	a5,4(a5)
800014cc:	fef42023          	sw	a5,-32(s0)
800014d0:	91418793          	addi	a5,gp,-1772 # 80007734 <xStart>
800014d4:	fef42623          	sw	a5,-20(s0)
800014d8:	0100006f          	j	800014e8 <vPortFree+0x68>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 3)
800014dc:	fec42783          	lw	a5,-20(s0)
800014e0:	0007a783          	lw	a5,0(a5)
800014e4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 1)
800014e8:	fec42783          	lw	a5,-20(s0)
800014ec:	0007a783          	lw	a5,0(a5)
800014f0:	0047a783          	lw	a5,4(a5)
800014f4:	fe042703          	lw	a4,-32(s0)
800014f8:	fee7e2e3          	bltu	a5,a4,800014dc <vPortFree+0x5c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 4)
800014fc:	fec42783          	lw	a5,-20(s0)
80001500:	0007a703          	lw	a4,0(a5)
80001504:	fe442783          	lw	a5,-28(s0)
80001508:	00e7a023          	sw	a4,0(a5)
8000150c:	fec42783          	lw	a5,-20(s0)
80001510:	fe442703          	lw	a4,-28(s0)
80001514:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:261 (discriminator 4)
			xFreeBytesRemaining += pxLink->xBlockSize;
80001518:	fe442783          	lw	a5,-28(s0)
8000151c:	0047a703          	lw	a4,4(a5)
80001520:	800077b7          	lui	a5,0x80007
80001524:	6207a783          	lw	a5,1568(a5) # 80007620 <__stack_top+0xfffc5810>
80001528:	00f70733          	add	a4,a4,a5
8000152c:	800077b7          	lui	a5,0x80007
80001530:	62e7a023          	sw	a4,1568(a5) # 80007620 <__stack_top+0xfffc5810>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:264 (discriminator 4)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
80001534:	5bd000ef          	jal	ra,800022f0 <xTaskResumeAll>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:266
	}
}
80001538:	00000013          	nop
8000153c:	02c12083          	lw	ra,44(sp)
80001540:	02812403          	lw	s0,40(sp)
80001544:	03010113          	addi	sp,sp,48
80001548:	00008067          	ret

8000154c <prvHeapInit>:
prvHeapInit():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:282
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
8000154c:	fe010113          	addi	sp,sp,-32
80001550:	00812e23          	sw	s0,28(sp)
80001554:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:287
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
80001558:	800077b7          	lui	a5,0x80007
8000155c:	79478793          	addi	a5,a5,1940 # 80007794 <__stack_top+0xfffc5984>
80001560:	ffc7f793          	andi	a5,a5,-4
80001564:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:291

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
80001568:	fec42703          	lw	a4,-20(s0)
8000156c:	90e1aa23          	sw	a4,-1772(gp) # 80007734 <xStart>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:292
	xStart.xBlockSize = ( size_t ) 0;
80001570:	91418793          	addi	a5,gp,-1772 # 80007734 <xStart>
80001574:	0007a223          	sw	zero,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:295

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
80001578:	91c18793          	addi	a5,gp,-1764 # 8000773c <xEnd>
8000157c:	00019737          	lui	a4,0x19
80001580:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
80001584:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:296
	xEnd.pxNextFreeBlock = NULL;
80001588:	9001ae23          	sw	zero,-1764(gp) # 8000773c <xEnd>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:300

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
8000158c:	fec42783          	lw	a5,-20(s0)
80001590:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:301
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
80001594:	fe842783          	lw	a5,-24(s0)
80001598:	00019737          	lui	a4,0x19
8000159c:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
800015a0:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:302
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
800015a4:	fe842783          	lw	a5,-24(s0)
800015a8:	91c18713          	addi	a4,gp,-1764 # 8000773c <xEnd>
800015ac:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:303
}
800015b0:	00000013          	nop
800015b4:	01c12403          	lw	s0,28(sp)
800015b8:	02010113          	addi	sp,sp,32
800015bc:	00008067          	ret

800015c0 <raise_soft_interrupt>:
raise_soft_interrupt():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:227
/*==============================================================================
 * The function raise_soft_interrupt() raises a synchronous software interrupt by
 * writing into the MSIP register.
 */
static inline void raise_soft_interrupt()
{
800015c0:	fe010113          	addi	sp,sp,-32
800015c4:	00812e23          	sw	s0,28(sp)
800015c8:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:228
    unsigned long hart_id = read_csr(mhartid);
800015cc:	f14027f3          	csrr	a5,mhartid
800015d0:	fef42623          	sw	a5,-20(s0)
800015d4:	fec42783          	lw	a5,-20(s0)
800015d8:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:231

    /*You need to make sure that the global interrupt is enabled*/
    set_csr(mie, MIP_MSIP);       /*Enable software interrupt bit */
800015dc:	304467f3          	csrrsi	a5,mie,8
800015e0:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:232
    PRCI->MSIP[hart_id] = 0x01;   /*raise soft interrupt for hart0*/
800015e4:	44000737          	lui	a4,0x44000
800015e8:	fe842783          	lw	a5,-24(s0)
800015ec:	00279793          	slli	a5,a5,0x2
800015f0:	00f707b3          	add	a5,a4,a5
800015f4:	00100713          	li	a4,1
800015f8:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:233
}
800015fc:	00000013          	nop
80001600:	01c12403          	lw	s0,28(sp)
80001604:	02010113          	addi	sp,sp,32
80001608:	00008067          	ret

8000160c <vPortEnterCritical>:
vPortEnterCritical():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:132
 * Used to catch tasks that attempt to return from their implementing function.
 */
static void prvTaskExitError( void );

void vPortEnterCritical( void )
{
8000160c:	ff010113          	addi	sp,sp,-16
80001610:	00812623          	sw	s0,12(sp)
80001614:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:133
	portDISABLE_INTERRUPTS();
80001618:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:134
	uxCriticalNesting++;
8000161c:	800077b7          	lui	a5,0x80007
80001620:	6247a783          	lw	a5,1572(a5) # 80007624 <__stack_top+0xfffc5814>
80001624:	00178713          	addi	a4,a5,1
80001628:	800077b7          	lui	a5,0x80007
8000162c:	62e7a223          	sw	a4,1572(a5) # 80007624 <__stack_top+0xfffc5814>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:135
}
80001630:	00000013          	nop
80001634:	00c12403          	lw	s0,12(sp)
80001638:	01010113          	addi	sp,sp,16
8000163c:	00008067          	ret

80001640 <vPortExitCritical>:
vPortExitCritical():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:139
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
80001640:	ff010113          	addi	sp,sp,-16
80001644:	00812623          	sw	s0,12(sp)
80001648:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:140
	uxCriticalNesting--;
8000164c:	800077b7          	lui	a5,0x80007
80001650:	6247a783          	lw	a5,1572(a5) # 80007624 <__stack_top+0xfffc5814>
80001654:	fff78713          	addi	a4,a5,-1
80001658:	800077b7          	lui	a5,0x80007
8000165c:	62e7a223          	sw	a4,1572(a5) # 80007624 <__stack_top+0xfffc5814>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:141
	if( uxCriticalNesting == 0 )
80001660:	800077b7          	lui	a5,0x80007
80001664:	6247a783          	lw	a5,1572(a5) # 80007624 <__stack_top+0xfffc5814>
80001668:	00079463          	bnez	a5,80001670 <vPortExitCritical+0x30>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:143
	{
		portENABLE_INTERRUPTS();
8000166c:	30046073          	csrsi	mstatus,8
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:145
	}
}
80001670:	00000013          	nop
80001674:	00c12403          	lw	s0,12(sp)
80001678:	01010113          	addi	sp,sp,16
8000167c:	00008067          	ret

80001680 <prvSetNextTimerInterrupt>:
prvSetNextTimerInterrupt():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:151
/*-----------------------------------------------------------*/

/* Sets the next timer interrupt
 * Reads previous timer compare register, and adds tickrate */
static void prvSetNextTimerInterrupt(void)
{
80001680:	fe010113          	addi	sp,sp,-32
80001684:	00812e23          	sw	s0,28(sp)
80001688:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:154
	uint64_t time;

	time = mtime->val_low;
8000168c:	80007637          	lui	a2,0x80007
80001690:	62862603          	lw	a2,1576(a2) # 80007628 <__stack_top+0xfffc5818>
80001694:	00062603          	lw	a2,0(a2)
80001698:	fec42423          	sw	a2,-24(s0)
8000169c:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:155
	time |= ((uint64_t)mtime->val_high << 32);
800016a0:	80007637          	lui	a2,0x80007
800016a4:	62862603          	lw	a2,1576(a2) # 80007628 <__stack_top+0xfffc5818>
800016a8:	00462603          	lw	a2,4(a2)
800016ac:	00060693          	mv	a3,a2
800016b0:	00000713          	li	a4,0
800016b4:	00069813          	slli	a6,a3,0x0
800016b8:	00000793          	li	a5,0
800016bc:	fe842703          	lw	a4,-24(s0)
800016c0:	00f76733          	or	a4,a4,a5
800016c4:	fee42423          	sw	a4,-24(s0)
800016c8:	fec42703          	lw	a4,-20(s0)
800016cc:	010767b3          	or	a5,a4,a6
800016d0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:157

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
800016d4:	fe842683          	lw	a3,-24(s0)
800016d8:	fec42703          	lw	a4,-20(s0)
800016dc:	000145b7          	lui	a1,0x14
800016e0:	43858593          	addi	a1,a1,1080 # 14438 <HEAP_SIZE+0x4438>
800016e4:	00000613          	li	a2,0
800016e8:	00b687b3          	add	a5,a3,a1
800016ec:	00078513          	mv	a0,a5
800016f0:	00d53533          	sltu	a0,a0,a3
800016f4:	00c70833          	add	a6,a4,a2
800016f8:	01050733          	add	a4,a0,a6
800016fc:	00070813          	mv	a6,a4
80001700:	fef42423          	sw	a5,-24(s0)
80001704:	ff042623          	sw	a6,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:159

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
80001708:	800077b7          	lui	a5,0x80007
8000170c:	62c7a783          	lw	a5,1580(a5) # 8000762c <__stack_top+0xfffc581c>
80001710:	fe842703          	lw	a4,-24(s0)
80001714:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:160
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
80001718:	fec42783          	lw	a5,-20(s0)
8000171c:	0007d313          	srli	t1,a5,0x0
80001720:	00000393          	li	t2,0
80001724:	800077b7          	lui	a5,0x80007
80001728:	62c7a783          	lw	a5,1580(a5) # 8000762c <__stack_top+0xfffc581c>
8000172c:	00030713          	mv	a4,t1
80001730:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:163

	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
80001734:	08000793          	li	a5,128
80001738:	3047a073          	csrs	mie,a5
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:164
}
8000173c:	00000013          	nop
80001740:	01c12403          	lw	s0,28(sp)
80001744:	02010113          	addi	sp,sp,32
80001748:	00008067          	ret

8000174c <vPortSetupTimer>:
vPortSetupTimer():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:169
/*-----------------------------------------------------------*/

/* Sets and enable the timer interrupt */
void vPortSetupTimer(void)
{
8000174c:	fe010113          	addi	sp,sp,-32
80001750:	00812e23          	sw	s0,28(sp)
80001754:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:172
	uint64_t time;

	time = mtime->val_low;
80001758:	80007637          	lui	a2,0x80007
8000175c:	62862603          	lw	a2,1576(a2) # 80007628 <__stack_top+0xfffc5818>
80001760:	00062603          	lw	a2,0(a2)
80001764:	fec42423          	sw	a2,-24(s0)
80001768:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:173
	time |= ((uint64_t)mtime->val_high << 32);
8000176c:	80007637          	lui	a2,0x80007
80001770:	62862603          	lw	a2,1576(a2) # 80007628 <__stack_top+0xfffc5818>
80001774:	00462603          	lw	a2,4(a2)
80001778:	00060693          	mv	a3,a2
8000177c:	00000713          	li	a4,0
80001780:	00069813          	slli	a6,a3,0x0
80001784:	00000793          	li	a5,0
80001788:	fe842703          	lw	a4,-24(s0)
8000178c:	00f76733          	or	a4,a4,a5
80001790:	fee42423          	sw	a4,-24(s0)
80001794:	fec42703          	lw	a4,-20(s0)
80001798:	010767b3          	or	a5,a4,a6
8000179c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:175

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
800017a0:	fe842683          	lw	a3,-24(s0)
800017a4:	fec42703          	lw	a4,-20(s0)
800017a8:	000145b7          	lui	a1,0x14
800017ac:	43858593          	addi	a1,a1,1080 # 14438 <HEAP_SIZE+0x4438>
800017b0:	00000613          	li	a2,0
800017b4:	00b687b3          	add	a5,a3,a1
800017b8:	00078513          	mv	a0,a5
800017bc:	00d53533          	sltu	a0,a0,a3
800017c0:	00c70833          	add	a6,a4,a2
800017c4:	01050733          	add	a4,a0,a6
800017c8:	00070813          	mv	a6,a4
800017cc:	fef42423          	sw	a5,-24(s0)
800017d0:	ff042623          	sw	a6,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:177

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
800017d4:	800077b7          	lui	a5,0x80007
800017d8:	62c7a783          	lw	a5,1580(a5) # 8000762c <__stack_top+0xfffc581c>
800017dc:	fe842703          	lw	a4,-24(s0)
800017e0:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:178
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
800017e4:	fec42783          	lw	a5,-20(s0)
800017e8:	0007d313          	srli	t1,a5,0x0
800017ec:	00000393          	li	t2,0
800017f0:	800077b7          	lui	a5,0x80007
800017f4:	62c7a783          	lw	a5,1580(a5) # 8000762c <__stack_top+0xfffc581c>
800017f8:	00030713          	mv	a4,t1
800017fc:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:182


	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
80001800:	08000793          	li	a5,128
80001804:	3047a073          	csrs	mie,a5
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:183
}
80001808:	00000013          	nop
8000180c:	01c12403          	lw	s0,28(sp)
80001810:	02010113          	addi	sp,sp,32
80001814:	00008067          	ret

80001818 <prvTaskExitError>:
prvTaskExitError():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:187
/*-----------------------------------------------------------*/

void prvTaskExitError( void )
{
80001818:	ff010113          	addi	sp,sp,-16
8000181c:	00812623          	sw	s0,12(sp)
80001820:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
80001824:	800077b7          	lui	a5,0x80007
80001828:	6247a703          	lw	a4,1572(a5) # 80007624 <__stack_top+0xfffc5814>
8000182c:	fff00793          	li	a5,-1
80001830:	00f70663          	beq	a4,a5,8000183c <prvTaskExitError+0x24>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194 (discriminator 1)
80001834:	30047073          	csrci	mstatus,8
80001838:	0000006f          	j	80001838 <prvTaskExitError+0x20>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:195
	portDISABLE_INTERRUPTS();
8000183c:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:196 (discriminator 2)
	for( ;; );
80001840:	0000006f          	j	80001840 <prvTaskExitError+0x28>

80001844 <pxPortInitialiseStack>:
pxPortInitialiseStack():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:220

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
80001844:	fe010113          	addi	sp,sp,-32
80001848:	00812e23          	sw	s0,28(sp)
8000184c:	02010413          	addi	s0,sp,32
80001850:	fea42623          	sw	a0,-20(s0)
80001854:	feb42423          	sw	a1,-24(s0)
80001858:	fec42223          	sw	a2,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:224
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	register int *tp asm("x3");
	pxTopOfStack--;
8000185c:	fec42783          	lw	a5,-20(s0)
80001860:	ffc78793          	addi	a5,a5,-4
80001864:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:225
	*pxTopOfStack = (portSTACK_TYPE)pxCode;			/* Start address */
80001868:	fe842703          	lw	a4,-24(s0)
8000186c:	fec42783          	lw	a5,-20(s0)
80001870:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:226
	pxTopOfStack -= 22;
80001874:	fec42783          	lw	a5,-20(s0)
80001878:	fa878793          	addi	a5,a5,-88
8000187c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:227
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;	/* Register a0 */
80001880:	fe442703          	lw	a4,-28(s0)
80001884:	fec42783          	lw	a5,-20(s0)
80001888:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:228
	pxTopOfStack -= 6;
8000188c:	fec42783          	lw	a5,-20(s0)
80001890:	fe878793          	addi	a5,a5,-24
80001894:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:229
	*pxTopOfStack = (portSTACK_TYPE)tp; /* Register thread pointer */
80001898:	00018793          	mv	a5,gp
8000189c:	00078713          	mv	a4,a5
800018a0:	fec42783          	lw	a5,-20(s0)
800018a4:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:230
	pxTopOfStack -= 3;
800018a8:	fec42783          	lw	a5,-20(s0)
800018ac:	ff478793          	addi	a5,a5,-12
800018b0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:231
	*pxTopOfStack = (portSTACK_TYPE)prvTaskExitError; /* Register ra */
800018b4:	800027b7          	lui	a5,0x80002
800018b8:	81878713          	addi	a4,a5,-2024 # 80001818 <__stack_top+0xfffbfa08>
800018bc:	fec42783          	lw	a5,-20(s0)
800018c0:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:233

	return pxTopOfStack;
800018c4:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:234
}
800018c8:	00078513          	mv	a0,a5
800018cc:	01c12403          	lw	s0,28(sp)
800018d0:	02010113          	addi	sp,sp,32
800018d4:	00008067          	ret

800018d8 <SysTick_Handler>:
SysTick_Handler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:238
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void )
{
800018d8:	ff010113          	addi	sp,sp,-16
800018dc:	00112623          	sw	ra,12(sp)
800018e0:	00812423          	sw	s0,8(sp)
800018e4:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:241
	/*Save Context*/
	{
		__asm volatile("lw	t0, pxCurrentTCB");
800018e8:	92c1a283          	lw	t0,-1748(gp) # 8000774c <pxCurrentTCB>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:242
		__asm volatile("sw	a2, 0x0(t0)");
800018ec:	00c2a023          	sw	a2,0(t0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:246
	}

	/* Increment the RTOS tick. */
	prvSetNextTimerInterrupt();
800018f0:	d91ff0ef          	jal	ra,80001680 <prvSetNextTimerInterrupt>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:249

	/*Switch task */
	if( xTaskIncrementTick() != pdFALSE )
800018f4:	395000ef          	jal	ra,80002488 <xTaskIncrementTick>
800018f8:	00050793          	mv	a5,a0
800018fc:	00078463          	beqz	a5,80001904 <SysTick_Handler+0x2c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:251
	{
		vTaskSwitchContext();
80001900:	575000ef          	jal	ra,80002674 <vTaskSwitchContext>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:256
	}

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
80001904:	92c1a103          	lw	sp,-1748(gp) # 8000774c <pxCurrentTCB>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:257
		__asm volatile("lw	sp, 0x0(sp)");
80001908:	00012103          	lw	sp,0(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:259

		__asm volatile("lw	t0, 31 * 4(sp)");
8000190c:	07c12283          	lw	t0,124(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:260
		__asm volatile("csrw	mepc, t0");
80001910:	34129073          	csrw	mepc,t0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:263

		// Added by Iaçanã
		__asm volatile("lui	t0, 0x2");
80001914:	000022b7          	lui	t0,0x2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:264
  		__asm volatile("addi t0,t0,-2048");
80001918:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:265
		__asm volatile("csrs mstatus,t0");
8000191c:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:267

		__asm volatile("lw	x1, 0x0(sp)");
80001920:	00012083          	lw	ra,0(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:268
		__asm volatile("lw   x4, 3 * 4(sp)");
80001924:	00c12203          	lw	tp,12(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:269
		__asm volatile("lw   x5, 4 * 4(sp)");
80001928:	01012283          	lw	t0,16(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:270
		__asm volatile("lw   x6, 5 * 4(sp)");
8000192c:	01412303          	lw	t1,20(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:271
		__asm volatile("lw   x7, 6 * 4(sp)");
80001930:	01812383          	lw	t2,24(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:272
		__asm volatile("lw   x8, 7 * 4(sp)");
80001934:	01c12403          	lw	s0,28(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:273
		__asm volatile("lw   x9, 8 * 4(sp)");
80001938:	02012483          	lw	s1,32(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:274
		__asm volatile("lw   x10, 9 * 4(sp)");
8000193c:	02412503          	lw	a0,36(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:275
		__asm volatile("lw   x11, 10 * 4(sp)");
80001940:	02812583          	lw	a1,40(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:276
		__asm volatile("lw   x12, 11 * 4(sp)");
80001944:	02c12603          	lw	a2,44(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:277
		__asm volatile("lw   x13, 12 * 4(sp)");
80001948:	03012683          	lw	a3,48(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:278
		__asm volatile("lw   x14, 13 * 4(sp)");
8000194c:	03412703          	lw	a4,52(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:279
		__asm volatile("lw   x15, 14 * 4(sp)");
80001950:	03812783          	lw	a5,56(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:280
		__asm volatile("lw   x16, 15 * 4(sp)");
80001954:	03c12803          	lw	a6,60(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:281
		__asm volatile("lw   x17, 16 * 4(sp)");
80001958:	04012883          	lw	a7,64(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:282
		__asm volatile("lw   x18, 17 * 4(sp)");
8000195c:	04412903          	lw	s2,68(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:283
		__asm volatile("lw   x19, 18 * 4(sp)");
80001960:	04812983          	lw	s3,72(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:284
		__asm volatile("lw   x20, 19 * 4(sp)");
80001964:	04c12a03          	lw	s4,76(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:285
		__asm volatile("lw   x21, 20 * 4(sp)");
80001968:	05012a83          	lw	s5,80(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:286
		__asm volatile("lw   x22, 21 * 4(sp)");
8000196c:	05412b03          	lw	s6,84(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:287
		__asm volatile("lw   x23, 22 * 4(sp)");
80001970:	05812b83          	lw	s7,88(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:288
		__asm volatile("lw   x24, 23 * 4(sp)");
80001974:	05c12c03          	lw	s8,92(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:289
		__asm volatile("lw   x25, 24 * 4(sp)");
80001978:	06012c83          	lw	s9,96(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:290
		__asm volatile("lw   x26, 25 * 4(sp)");
8000197c:	06412d03          	lw	s10,100(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:291
		__asm volatile("lw   x27, 26 * 4(sp)");
80001980:	06812d83          	lw	s11,104(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:292
		__asm volatile("lw   x28, 27 * 4(sp)");
80001984:	06c12e03          	lw	t3,108(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:293
		__asm volatile("lw   x29, 28 * 4(sp)");
80001988:	07012e83          	lw	t4,112(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:294
		__asm volatile("lw   x30, 29 * 4(sp)");
8000198c:	07412f03          	lw	t5,116(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:295
		__asm volatile("lw   x31, 30 * 4(sp)");
80001990:	07812f83          	lw	t6,120(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:297

		__asm volatile("addi	sp, sp, 4 * 32");
80001994:	08010113          	addi	sp,sp,128
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:299

		__asm volatile("mret");
80001998:	30200073          	mret
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:301
	}
}
8000199c:	00000013          	nop
800019a0:	00c12083          	lw	ra,12(sp)
800019a4:	00812403          	lw	s0,8(sp)
800019a8:	01010113          	addi	sp,sp,16
800019ac:	00008067          	ret

800019b0 <xPortStartScheduler>:
xPortStartScheduler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:304
uint32_t g_startscheduler = 0;
BaseType_t xPortStartScheduler( void )
{
800019b0:	ff010113          	addi	sp,sp,-16
800019b4:	00112623          	sw	ra,12(sp)
800019b8:	00812423          	sw	s0,8(sp)
800019bc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:305
	vPortSetupTimer();
800019c0:	d8dff0ef          	jal	ra,8000174c <vPortSetupTimer>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:306
	uxCriticalNesting = 0;
800019c4:	800077b7          	lui	a5,0x80007
800019c8:	6207a223          	sw	zero,1572(a5) # 80007624 <__stack_top+0xfffc5814>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:307
	g_startscheduler = 1;
800019cc:	00100713          	li	a4,1
800019d0:	92e1a423          	sw	a4,-1752(gp) # 80007748 <g_startscheduler>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:308
	__enable_irq();
800019d4:	9adfe0ef          	jal	ra,80000380 <__enable_irq>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:310

	raise_soft_interrupt();
800019d8:	be9ff0ef          	jal	ra,800015c0 <raise_soft_interrupt>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:313

	/*Should not get here*/
	return pdFALSE;
800019dc:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:314
}
800019e0:	00078513          	mv	a0,a5
800019e4:	00c12083          	lw	ra,12(sp)
800019e8:	00812403          	lw	s0,8(sp)
800019ec:	01010113          	addi	sp,sp,16
800019f0:	00008067          	ret

800019f4 <Software_IRQHandler>:
Software_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:317

void Software_IRQHandler(void)
{
800019f4:	ff010113          	addi	sp,sp,-16
800019f8:	00112623          	sw	ra,12(sp)
800019fc:	00812423          	sw	s0,8(sp)
80001a00:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:318
	if(1 == g_startscheduler)
80001a04:	9281a703          	lw	a4,-1752(gp) # 80007748 <g_startscheduler>
80001a08:	00100793          	li	a5,1
80001a0c:	00f71863          	bne	a4,a5,80001a1c <Software_IRQHandler+0x28>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:320
	{
		g_startscheduler = 2; //skip the save n switch context first time when scheduler is starting.
80001a10:	00200713          	li	a4,2
80001a14:	92e1a423          	sw	a4,-1752(gp) # 80007748 <g_startscheduler>
80001a18:	0100006f          	j	80001a28 <Software_IRQHandler+0x34>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:326
	}
	else
	{
		/*Save Context*/
		{
			__asm volatile("lw	t0, pxCurrentTCB");
80001a1c:	92c1a283          	lw	t0,-1748(gp) # 8000774c <pxCurrentTCB>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:327
			__asm volatile("sw	a2, 0x0(t0)");
80001a20:	00c2a023          	sw	a2,0(t0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:330
		}

		vTaskSwitchContext();
80001a24:	451000ef          	jal	ra,80002674 <vTaskSwitchContext>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:334
	}

	// Moved by Imperas (was previously causing corruption of a5)
	PRCI->MSIP[0] = 0x00;
80001a28:	440007b7          	lui	a5,0x44000
80001a2c:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:338

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
80001a30:	92c1a103          	lw	sp,-1748(gp) # 8000774c <pxCurrentTCB>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:339
		__asm volatile("lw	sp, 0x0(sp)");
80001a34:	00012103          	lw	sp,0(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:341

		__asm volatile("lw	t0, 31 * 4(sp)");
80001a38:	07c12283          	lw	t0,124(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:342
		__asm volatile("csrw	mepc, t0");
80001a3c:	34129073          	csrw	mepc,t0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:345

		// Added by Iaçanã
		__asm volatile("lui	t0, 0x2");
80001a40:	000022b7          	lui	t0,0x2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:346
  		__asm volatile("addi t0,t0,-2048");
80001a44:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:347
		__asm volatile("csrs mstatus,t0");
80001a48:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:349

		__asm volatile("lw	x1, 0x0(sp)");
80001a4c:	00012083          	lw	ra,0(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:350
		__asm volatile("lw   x4, 3 * 4(sp)");
80001a50:	00c12203          	lw	tp,12(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:351
		__asm volatile("lw   x5, 4 * 4(sp)");
80001a54:	01012283          	lw	t0,16(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:352
		__asm volatile("lw   x6, 5 * 4(sp)");
80001a58:	01412303          	lw	t1,20(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:353
		__asm volatile("lw   x7, 6 * 4(sp)");
80001a5c:	01812383          	lw	t2,24(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:354
		__asm volatile("lw   x8, 7 * 4(sp)");
80001a60:	01c12403          	lw	s0,28(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:355
		__asm volatile("lw   x9, 8 * 4(sp)");
80001a64:	02012483          	lw	s1,32(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:356
		__asm volatile("lw   x10, 9 * 4(sp)");
80001a68:	02412503          	lw	a0,36(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:357
		__asm volatile("lw   x11, 10 * 4(sp)");
80001a6c:	02812583          	lw	a1,40(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:358
		__asm volatile("lw   x12, 11 * 4(sp)");
80001a70:	02c12603          	lw	a2,44(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:359
		__asm volatile("lw   x13, 12 * 4(sp)");
80001a74:	03012683          	lw	a3,48(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:360
		__asm volatile("lw   x14, 13 * 4(sp)");
80001a78:	03412703          	lw	a4,52(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:361
		__asm volatile("lw   x15, 14 * 4(sp)");
80001a7c:	03812783          	lw	a5,56(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:362
		__asm volatile("lw   x16, 15 * 4(sp)");
80001a80:	03c12803          	lw	a6,60(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:363
		__asm volatile("lw   x17, 16 * 4(sp)");
80001a84:	04012883          	lw	a7,64(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:364
		__asm volatile("lw   x18, 17 * 4(sp)");
80001a88:	04412903          	lw	s2,68(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:365
		__asm volatile("lw   x19, 18 * 4(sp)");
80001a8c:	04812983          	lw	s3,72(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:366
		__asm volatile("lw   x20, 19 * 4(sp)");
80001a90:	04c12a03          	lw	s4,76(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:367
		__asm volatile("lw   x21, 20 * 4(sp)");
80001a94:	05012a83          	lw	s5,80(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:368
		__asm volatile("lw   x22, 21 * 4(sp)");
80001a98:	05412b03          	lw	s6,84(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:369
		__asm volatile("lw   x23, 22 * 4(sp)");
80001a9c:	05812b83          	lw	s7,88(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:370
		__asm volatile("lw   x24, 23 * 4(sp)");
80001aa0:	05c12c03          	lw	s8,92(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:371
		__asm volatile("lw   x25, 24 * 4(sp)");
80001aa4:	06012c83          	lw	s9,96(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:372
		__asm volatile("lw   x26, 25 * 4(sp)");
80001aa8:	06412d03          	lw	s10,100(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:373
		__asm volatile("lw   x27, 26 * 4(sp)");
80001aac:	06812d83          	lw	s11,104(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:374
		__asm volatile("lw   x28, 27 * 4(sp)");
80001ab0:	06c12e03          	lw	t3,108(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:375
		__asm volatile("lw   x29, 28 * 4(sp)");
80001ab4:	07012e83          	lw	t4,112(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:376
		__asm volatile("lw   x30, 29 * 4(sp)");
80001ab8:	07412f03          	lw	t5,116(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:377
		__asm volatile("lw   x31, 30 * 4(sp)");
80001abc:	07812f83          	lw	t6,120(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:379

		__asm volatile("addi	sp, sp, 4 * 32");
80001ac0:	08010113          	addi	sp,sp,128
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:384

	    // Moved by Imperas (causing corruption of a5 at this position)
		//PRCI->MSIP[0] = 0x00;

		__asm volatile("mret");
80001ac4:	30200073          	mret
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:386
	}
}
80001ac8:	00000013          	nop
80001acc:	00c12083          	lw	ra,12(sp)
80001ad0:	00812403          	lw	s0,8(sp)
80001ad4:	01010113          	addi	sp,sp,16
80001ad8:	00008067          	ret

80001adc <vPortYield>:
vPortYield():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:389

void vPortYield( void )
{
80001adc:	ff010113          	addi	sp,sp,-16
80001ae0:	00112623          	sw	ra,12(sp)
80001ae4:	00812423          	sw	s0,8(sp)
80001ae8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:390
	raise_soft_interrupt();
80001aec:	ad5ff0ef          	jal	ra,800015c0 <raise_soft_interrupt>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:391
}
80001af0:	00000013          	nop
80001af4:	00c12083          	lw	ra,12(sp)
80001af8:	00812403          	lw	s0,8(sp)
80001afc:	01010113          	addi	sp,sp,16
80001b00:	00008067          	ret

80001b04 <vListInitialise>:
vListInitialise():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:80
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
80001b04:	fe010113          	addi	sp,sp,-32
80001b08:	00812e23          	sw	s0,28(sp)
80001b0c:	02010413          	addi	s0,sp,32
80001b10:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:84
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001b14:	fec42783          	lw	a5,-20(s0)
80001b18:	00878713          	addi	a4,a5,8
80001b1c:	fec42783          	lw	a5,-20(s0)
80001b20:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:88

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
80001b24:	fec42783          	lw	a5,-20(s0)
80001b28:	fff00713          	li	a4,-1
80001b2c:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:92

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001b30:	fec42783          	lw	a5,-20(s0)
80001b34:	00878713          	addi	a4,a5,8
80001b38:	fec42783          	lw	a5,-20(s0)
80001b3c:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:93
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001b40:	fec42783          	lw	a5,-20(s0)
80001b44:	00878713          	addi	a4,a5,8
80001b48:	fec42783          	lw	a5,-20(s0)
80001b4c:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:95

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
80001b50:	fec42783          	lw	a5,-20(s0)
80001b54:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:101

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
80001b58:	00000013          	nop
80001b5c:	01c12403          	lw	s0,28(sp)
80001b60:	02010113          	addi	sp,sp,32
80001b64:	00008067          	ret

80001b68 <vListInitialiseItem>:
vListInitialiseItem():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:105
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
80001b68:	fe010113          	addi	sp,sp,-32
80001b6c:	00812e23          	sw	s0,28(sp)
80001b70:	02010413          	addi	s0,sp,32
80001b74:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:107
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80001b78:	fec42783          	lw	a5,-20(s0)
80001b7c:	0007a823          	sw	zero,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:113

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
80001b80:	00000013          	nop
80001b84:	01c12403          	lw	s0,28(sp)
80001b88:	02010113          	addi	sp,sp,32
80001b8c:	00008067          	ret

80001b90 <vListInsertEnd>:
vListInsertEnd():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:117
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001b90:	fd010113          	addi	sp,sp,-48
80001b94:	02812623          	sw	s0,44(sp)
80001b98:	03010413          	addi	s0,sp,48
80001b9c:	fca42e23          	sw	a0,-36(s0)
80001ba0:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:118
ListItem_t * const pxIndex = pxList->pxIndex;
80001ba4:	fdc42783          	lw	a5,-36(s0)
80001ba8:	0047a783          	lw	a5,4(a5)
80001bac:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:129
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
80001bb0:	fd842783          	lw	a5,-40(s0)
80001bb4:	fec42703          	lw	a4,-20(s0)
80001bb8:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:130
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
80001bbc:	fec42783          	lw	a5,-20(s0)
80001bc0:	0087a703          	lw	a4,8(a5)
80001bc4:	fd842783          	lw	a5,-40(s0)
80001bc8:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:135

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
80001bcc:	fec42783          	lw	a5,-20(s0)
80001bd0:	0087a783          	lw	a5,8(a5)
80001bd4:	fd842703          	lw	a4,-40(s0)
80001bd8:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:136
	pxIndex->pxPrevious = pxNewListItem;
80001bdc:	fec42783          	lw	a5,-20(s0)
80001be0:	fd842703          	lw	a4,-40(s0)
80001be4:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:139

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001be8:	fd842783          	lw	a5,-40(s0)
80001bec:	fdc42703          	lw	a4,-36(s0)
80001bf0:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:141

	( pxList->uxNumberOfItems )++;
80001bf4:	fdc42783          	lw	a5,-36(s0)
80001bf8:	0007a783          	lw	a5,0(a5)
80001bfc:	00178713          	addi	a4,a5,1
80001c00:	fdc42783          	lw	a5,-36(s0)
80001c04:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:142
}
80001c08:	00000013          	nop
80001c0c:	02c12403          	lw	s0,44(sp)
80001c10:	03010113          	addi	sp,sp,48
80001c14:	00008067          	ret

80001c18 <vListInsert>:
vListInsert():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:146
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001c18:	fd010113          	addi	sp,sp,-48
80001c1c:	02812623          	sw	s0,44(sp)
80001c20:	03010413          	addi	s0,sp,48
80001c24:	fca42e23          	sw	a0,-36(s0)
80001c28:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:148
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
80001c2c:	fd842783          	lw	a5,-40(s0)
80001c30:	0007a783          	lw	a5,0(a5)
80001c34:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:164
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
80001c38:	fe842703          	lw	a4,-24(s0)
80001c3c:	fff00793          	li	a5,-1
80001c40:	00f71a63          	bne	a4,a5,80001c54 <vListInsert+0x3c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:166
	{
		pxIterator = pxList->xListEnd.pxPrevious;
80001c44:	fdc42783          	lw	a5,-36(s0)
80001c48:	0107a783          	lw	a5,16(a5)
80001c4c:	fef42623          	sw	a5,-20(s0)
80001c50:	0340006f          	j	80001c84 <vListInsert+0x6c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:192
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001c54:	fdc42783          	lw	a5,-36(s0)
80001c58:	00878793          	addi	a5,a5,8
80001c5c:	fef42623          	sw	a5,-20(s0)
80001c60:	0100006f          	j	80001c70 <vListInsert+0x58>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 3)
80001c64:	fec42783          	lw	a5,-20(s0)
80001c68:	0047a783          	lw	a5,4(a5)
80001c6c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 1)
80001c70:	fec42783          	lw	a5,-20(s0)
80001c74:	0047a783          	lw	a5,4(a5)
80001c78:	0007a783          	lw	a5,0(a5)
80001c7c:	fe842703          	lw	a4,-24(s0)
80001c80:	fef772e3          	bleu	a5,a4,80001c64 <vListInsert+0x4c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:199
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
80001c84:	fec42783          	lw	a5,-20(s0)
80001c88:	0047a703          	lw	a4,4(a5)
80001c8c:	fd842783          	lw	a5,-40(s0)
80001c90:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:200
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
80001c94:	fd842783          	lw	a5,-40(s0)
80001c98:	0047a783          	lw	a5,4(a5)
80001c9c:	fd842703          	lw	a4,-40(s0)
80001ca0:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:201
	pxNewListItem->pxPrevious = pxIterator;
80001ca4:	fd842783          	lw	a5,-40(s0)
80001ca8:	fec42703          	lw	a4,-20(s0)
80001cac:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:202
	pxIterator->pxNext = pxNewListItem;
80001cb0:	fec42783          	lw	a5,-20(s0)
80001cb4:	fd842703          	lw	a4,-40(s0)
80001cb8:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:206

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001cbc:	fd842783          	lw	a5,-40(s0)
80001cc0:	fdc42703          	lw	a4,-36(s0)
80001cc4:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:208

	( pxList->uxNumberOfItems )++;
80001cc8:	fdc42783          	lw	a5,-36(s0)
80001ccc:	0007a783          	lw	a5,0(a5)
80001cd0:	00178713          	addi	a4,a5,1
80001cd4:	fdc42783          	lw	a5,-36(s0)
80001cd8:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:209
}
80001cdc:	00000013          	nop
80001ce0:	02c12403          	lw	s0,44(sp)
80001ce4:	03010113          	addi	sp,sp,48
80001ce8:	00008067          	ret

80001cec <uxListRemove>:
uxListRemove():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:213
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
80001cec:	fd010113          	addi	sp,sp,-48
80001cf0:	02812623          	sw	s0,44(sp)
80001cf4:	03010413          	addi	s0,sp,48
80001cf8:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:216
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
80001cfc:	fdc42783          	lw	a5,-36(s0)
80001d00:	0107a783          	lw	a5,16(a5)
80001d04:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:218

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
80001d08:	fdc42783          	lw	a5,-36(s0)
80001d0c:	0047a783          	lw	a5,4(a5)
80001d10:	fdc42703          	lw	a4,-36(s0)
80001d14:	00872703          	lw	a4,8(a4) # 44000008 <RAM_SIZE+0x43f80008>
80001d18:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:219
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
80001d1c:	fdc42783          	lw	a5,-36(s0)
80001d20:	0087a783          	lw	a5,8(a5)
80001d24:	fdc42703          	lw	a4,-36(s0)
80001d28:	00472703          	lw	a4,4(a4)
80001d2c:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:225

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
80001d30:	fec42783          	lw	a5,-20(s0)
80001d34:	0047a783          	lw	a5,4(a5)
80001d38:	fdc42703          	lw	a4,-36(s0)
80001d3c:	00f71a63          	bne	a4,a5,80001d50 <uxListRemove+0x64>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:227
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
80001d40:	fdc42783          	lw	a5,-36(s0)
80001d44:	0087a703          	lw	a4,8(a5)
80001d48:	fec42783          	lw	a5,-20(s0)
80001d4c:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:234
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
80001d50:	fdc42783          	lw	a5,-36(s0)
80001d54:	0007a823          	sw	zero,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:235
	( pxList->uxNumberOfItems )--;
80001d58:	fec42783          	lw	a5,-20(s0)
80001d5c:	0007a783          	lw	a5,0(a5)
80001d60:	fff78713          	addi	a4,a5,-1
80001d64:	fec42783          	lw	a5,-20(s0)
80001d68:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:237

	return pxList->uxNumberOfItems;
80001d6c:	fec42783          	lw	a5,-20(s0)
80001d70:	0007a783          	lw	a5,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:238
}
80001d74:	00078513          	mv	a0,a5
80001d78:	02c12403          	lw	s0,44(sp)
80001d7c:	03010113          	addi	sp,sp,48
80001d80:	00008067          	ret

80001d84 <memset>:
memset():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:25

  return dest;
}

void* memset(void* dest, int byte, size_t len)
{
80001d84:	fd010113          	addi	sp,sp,-48
80001d88:	02812623          	sw	s0,44(sp)
80001d8c:	03010413          	addi	s0,sp,48
80001d90:	fca42e23          	sw	a0,-36(s0)
80001d94:	fcb42c23          	sw	a1,-40(s0)
80001d98:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:26
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
80001d9c:	fdc42703          	lw	a4,-36(s0)
80001da0:	fd442783          	lw	a5,-44(s0)
80001da4:	00f767b3          	or	a5,a4,a5
80001da8:	0037f793          	andi	a5,a5,3
80001dac:	06079863          	bnez	a5,80001e1c <memset+0x98>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:27
    uintptr_t word = byte & 0xFF;
80001db0:	fd842783          	lw	a5,-40(s0)
80001db4:	0ff7f793          	andi	a5,a5,255
80001db8:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:28
    word |= word << 8;
80001dbc:	fe442783          	lw	a5,-28(s0)
80001dc0:	00879793          	slli	a5,a5,0x8
80001dc4:	fe442703          	lw	a4,-28(s0)
80001dc8:	00f767b3          	or	a5,a4,a5
80001dcc:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:29
    word |= word << 16;
80001dd0:	fe442783          	lw	a5,-28(s0)
80001dd4:	01079793          	slli	a5,a5,0x10
80001dd8:	fe442703          	lw	a4,-28(s0)
80001ddc:	00f767b3          	or	a5,a4,a5
80001de0:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:32
    word |= word << 16 << 16;

    uintptr_t *d = dest;
80001de4:	fdc42783          	lw	a5,-36(s0)
80001de8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001dec:	0180006f          	j	80001e04 <memset+0x80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:34
      *d++ = word;
80001df0:	fec42783          	lw	a5,-20(s0)
80001df4:	00478713          	addi	a4,a5,4
80001df8:	fee42623          	sw	a4,-20(s0)
80001dfc:	fe442703          	lw	a4,-28(s0)
80001e00:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001e04:	fdc42703          	lw	a4,-36(s0)
80001e08:	fd442783          	lw	a5,-44(s0)
80001e0c:	00f707b3          	add	a5,a4,a5
80001e10:	fec42703          	lw	a4,-20(s0)
80001e14:	fcf76ee3          	bltu	a4,a5,80001df0 <memset+0x6c>
80001e18:	0400006f          	j	80001e58 <memset+0xd4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:36
  } else {
    char *d = dest;
80001e1c:	fdc42783          	lw	a5,-36(s0)
80001e20:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001e24:	0200006f          	j	80001e44 <memset+0xc0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:38
      *d++ = byte;
80001e28:	fe842783          	lw	a5,-24(s0)
80001e2c:	00178713          	addi	a4,a5,1
80001e30:	fee42423          	sw	a4,-24(s0)
80001e34:	fd842703          	lw	a4,-40(s0)
80001e38:	01871713          	slli	a4,a4,0x18
80001e3c:	41875713          	srai	a4,a4,0x18
80001e40:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001e44:	fdc42703          	lw	a4,-36(s0)
80001e48:	fd442783          	lw	a5,-44(s0)
80001e4c:	00f707b3          	add	a5,a4,a5
80001e50:	fe842703          	lw	a4,-24(s0)
80001e54:	fcf76ae3          	bltu	a4,a5,80001e28 <memset+0xa4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:40
  }
  return dest;
80001e58:	fdc42783          	lw	a5,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:41
}
80001e5c:	00078513          	mv	a0,a5
80001e60:	02c12403          	lw	s0,44(sp)
80001e64:	03010113          	addi	sp,sp,48
80001e68:	00008067          	ret

80001e6c <strlen>:
strlen():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:44

size_t strlen(const char *s)
{
80001e6c:	fd010113          	addi	sp,sp,-48
80001e70:	02812623          	sw	s0,44(sp)
80001e74:	03010413          	addi	s0,sp,48
80001e78:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:45
  const char *p = s;
80001e7c:	fdc42783          	lw	a5,-36(s0)
80001e80:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001e84:	0100006f          	j	80001e94 <strlen+0x28>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:47
    p++;
80001e88:	fec42783          	lw	a5,-20(s0)
80001e8c:	00178793          	addi	a5,a5,1
80001e90:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001e94:	fec42783          	lw	a5,-20(s0)
80001e98:	00078783          	lb	a5,0(a5)
80001e9c:	fe0796e3          	bnez	a5,80001e88 <strlen+0x1c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:48
  return p - s;
80001ea0:	fec42703          	lw	a4,-20(s0)
80001ea4:	fdc42783          	lw	a5,-36(s0)
80001ea8:	40f707b3          	sub	a5,a4,a5
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:49
}
80001eac:	00078513          	mv	a0,a5
80001eb0:	02c12403          	lw	s0,44(sp)
80001eb4:	03010113          	addi	sp,sp,48
80001eb8:	00008067          	ret

80001ebc <xTaskGenericCreate>:
xTaskGenericCreate():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:551

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80001ebc:	fc010113          	addi	sp,sp,-64
80001ec0:	02112e23          	sw	ra,60(sp)
80001ec4:	02812c23          	sw	s0,56(sp)
80001ec8:	04010413          	addi	s0,sp,64
80001ecc:	fca42e23          	sw	a0,-36(s0)
80001ed0:	fcb42c23          	sw	a1,-40(s0)
80001ed4:	fcd42823          	sw	a3,-48(s0)
80001ed8:	fce42623          	sw	a4,-52(s0)
80001edc:	fcf42423          	sw	a5,-56(s0)
80001ee0:	fd042223          	sw	a6,-60(s0)
80001ee4:	fd142023          	sw	a7,-64(s0)
80001ee8:	00060793          	mv	a5,a2
80001eec:	fcf41b23          	sh	a5,-42(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:556
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
80001ef0:	fdc42783          	lw	a5,-36(s0)
80001ef4:	00079663          	bnez	a5,80001f00 <xTaskGenericCreate+0x44>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:556 (discriminator 1)
80001ef8:	30047073          	csrci	mstatus,8
80001efc:	0000006f          	j	80001efc <xTaskGenericCreate+0x40>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:557
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
80001f00:	fcc42703          	lw	a4,-52(s0)
80001f04:	00400793          	li	a5,4
80001f08:	00e7f663          	bleu	a4,a5,80001f14 <xTaskGenericCreate+0x58>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 1)
80001f0c:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 2)
80001f10:	0000006f          	j	80001f10 <xTaskGenericCreate+0x54>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:561

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
80001f14:	fd645783          	lhu	a5,-42(s0)
80001f18:	fc442583          	lw	a1,-60(s0)
80001f1c:	00078513          	mv	a0,a5
80001f20:	395000ef          	jal	ra,80002ab4 <prvAllocateTCBAndStack>
80001f24:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:562
	if( pxNewTCB != NULL )
80001f28:	fe842783          	lw	a5,-24(s0)
80001f2c:	16078263          	beqz	a5,80002090 <xTaskGenericCreate+0x1d4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:598
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
80001f30:	fe842783          	lw	a5,-24(s0)
80001f34:	0307a703          	lw	a4,48(a5)
80001f38:	fd645683          	lhu	a3,-42(s0)
80001f3c:	400007b7          	lui	a5,0x40000
80001f40:	fff78793          	addi	a5,a5,-1 # 3fffffff <RAM_SIZE+0x3ff7ffff>
80001f44:	00f687b3          	add	a5,a3,a5
80001f48:	00279793          	slli	a5,a5,0x2
80001f4c:	00f707b3          	add	a5,a4,a5
80001f50:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:599
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
80001f54:	fe442783          	lw	a5,-28(s0)
80001f58:	ffc7f793          	andi	a5,a5,-4
80001f5c:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:602

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
80001f60:	fe442783          	lw	a5,-28(s0)
80001f64:	0037f793          	andi	a5,a5,3
80001f68:	00078663          	beqz	a5,80001f74 <xTaskGenericCreate+0xb8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 1)
80001f6c:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 3)
80001f70:	0000006f          	j	80001f70 <xTaskGenericCreate+0xb4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:619
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
80001f74:	fd645783          	lhu	a5,-42(s0)
80001f78:	00078713          	mv	a4,a5
80001f7c:	fc042683          	lw	a3,-64(s0)
80001f80:	fcc42603          	lw	a2,-52(s0)
80001f84:	fd842583          	lw	a1,-40(s0)
80001f88:	fe842503          	lw	a0,-24(s0)
80001f8c:	009000ef          	jal	ra,80002794 <prvInitialiseTCBVariables>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:631
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
80001f90:	fd042603          	lw	a2,-48(s0)
80001f94:	fdc42583          	lw	a1,-36(s0)
80001f98:	fe442503          	lw	a0,-28(s0)
80001f9c:	8a9ff0ef          	jal	ra,80001844 <pxPortInitialiseStack>
80001fa0:	00050713          	mv	a4,a0
80001fa4:	fe842783          	lw	a5,-24(s0)
80001fa8:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:635
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
80001fac:	fc842783          	lw	a5,-56(s0)
80001fb0:	00078863          	beqz	a5,80001fc0 <xTaskGenericCreate+0x104>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:640
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
80001fb4:	fc842783          	lw	a5,-56(s0)
80001fb8:	fe842703          	lw	a4,-24(s0)
80001fbc:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:649
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
80001fc0:	e4cff0ef          	jal	ra,8000160c <vPortEnterCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:651
		{
			uxCurrentNumberOfTasks++;
80001fc4:	93c1a783          	lw	a5,-1732(gp) # 8000775c <uxCurrentNumberOfTasks>
80001fc8:	00178713          	addi	a4,a5,1
80001fcc:	92e1ae23          	sw	a4,-1732(gp) # 8000775c <uxCurrentNumberOfTasks>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:652
			if( pxCurrentTCB == NULL )
80001fd0:	92c1a783          	lw	a5,-1748(gp) # 8000774c <pxCurrentTCB>
80001fd4:	02079063          	bnez	a5,80001ff4 <xTaskGenericCreate+0x138>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:656
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
80001fd8:	fe842703          	lw	a4,-24(s0)
80001fdc:	92e1a623          	sw	a4,-1748(gp) # 8000774c <pxCurrentTCB>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:658

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
80001fe0:	93c1a703          	lw	a4,-1732(gp) # 8000775c <uxCurrentNumberOfTasks>
80001fe4:	00100793          	li	a5,1
80001fe8:	02f71663          	bne	a4,a5,80002014 <xTaskGenericCreate+0x158>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:663
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
80001fec:	0e1000ef          	jal	ra,800028cc <prvInitialiseTaskLists>
80001ff0:	0240006f          	j	80002014 <xTaskGenericCreate+0x158>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:675
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
80001ff4:	9481a783          	lw	a5,-1720(gp) # 80007768 <xSchedulerRunning>
80001ff8:	00079e63          	bnez	a5,80002014 <xTaskGenericCreate+0x158>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:677
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
80001ffc:	92c1a783          	lw	a5,-1748(gp) # 8000774c <pxCurrentTCB>
80002000:	02c7a783          	lw	a5,44(a5)
80002004:	fcc42703          	lw	a4,-52(s0)
80002008:	00f76663          	bltu	a4,a5,80002014 <xTaskGenericCreate+0x158>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:679
					{
						pxCurrentTCB = pxNewTCB;
8000200c:	fe842703          	lw	a4,-24(s0)
80002010:	92e1a623          	sw	a4,-1748(gp) # 8000774c <pxCurrentTCB>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:692
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
80002014:	9581a783          	lw	a5,-1704(gp) # 80007778 <uxTaskNumber>
80002018:	00178713          	addi	a4,a5,1
8000201c:	94e1ac23          	sw	a4,-1704(gp) # 80007778 <uxTaskNumber>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:697

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
80002020:	9581a703          	lw	a4,-1704(gp) # 80007778 <uxTaskNumber>
80002024:	fe842783          	lw	a5,-24(s0)
80002028:	04e7a423          	sw	a4,72(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:702
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
8000202c:	fe842783          	lw	a5,-24(s0)
80002030:	02c7a703          	lw	a4,44(a5)
80002034:	9441a783          	lw	a5,-1724(gp) # 80007764 <uxTopReadyPriority>
80002038:	00e7f863          	bleu	a4,a5,80002048 <xTaskGenericCreate+0x18c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 1)
8000203c:	fe842783          	lw	a5,-24(s0)
80002040:	02c7a703          	lw	a4,44(a5)
80002044:	94e1a223          	sw	a4,-1724(gp) # 80007764 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 3)
80002048:	fe842783          	lw	a5,-24(s0)
8000204c:	02c7a703          	lw	a4,44(a5)
80002050:	00070793          	mv	a5,a4
80002054:	00279793          	slli	a5,a5,0x2
80002058:	00e787b3          	add	a5,a5,a4
8000205c:	00279793          	slli	a5,a5,0x2
80002060:	80020737          	lui	a4,0x80020
80002064:	79070713          	addi	a4,a4,1936 # 80020790 <__stack_top+0xfffde980>
80002068:	00e78733          	add	a4,a5,a4
8000206c:	fe842783          	lw	a5,-24(s0)
80002070:	00478793          	addi	a5,a5,4
80002074:	00078593          	mv	a1,a5
80002078:	00070513          	mv	a0,a4
8000207c:	b15ff0ef          	jal	ra,80001b90 <vListInsertEnd>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:704 (discriminator 3)

			xReturn = pdPASS;
80002080:	00100793          	li	a5,1
80002084:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:707 (discriminator 3)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
80002088:	db8ff0ef          	jal	ra,80001640 <vPortExitCritical>
8000208c:	00c0006f          	j	80002098 <xTaskGenericCreate+0x1dc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:711
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
80002090:	fff00793          	li	a5,-1
80002094:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:715
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
80002098:	fec42703          	lw	a4,-20(s0)
8000209c:	00100793          	li	a5,1
800020a0:	02f71063          	bne	a4,a5,800020c0 <xTaskGenericCreate+0x204>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:717
	{
		if( xSchedulerRunning != pdFALSE )
800020a4:	9481a783          	lw	a5,-1720(gp) # 80007768 <xSchedulerRunning>
800020a8:	00078c63          	beqz	a5,800020c0 <xTaskGenericCreate+0x204>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:721
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
800020ac:	92c1a783          	lw	a5,-1748(gp) # 8000774c <pxCurrentTCB>
800020b0:	02c7a783          	lw	a5,44(a5)
800020b4:	fcc42703          	lw	a4,-52(s0)
800020b8:	00e7f463          	bleu	a4,a5,800020c0 <xTaskGenericCreate+0x204>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:723
			{
				taskYIELD_IF_USING_PREEMPTION();
800020bc:	a21ff0ef          	jal	ra,80001adc <vPortYield>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:736
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
800020c0:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:737
}
800020c4:	00078513          	mv	a0,a5
800020c8:	03c12083          	lw	ra,60(sp)
800020cc:	03812403          	lw	s0,56(sp)
800020d0:	04010113          	addi	sp,sp,64
800020d4:	00008067          	ret

800020d8 <vTaskDelete>:
vTaskDelete():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:743
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
800020d8:	fd010113          	addi	sp,sp,-48
800020dc:	02112623          	sw	ra,44(sp)
800020e0:	02812423          	sw	s0,40(sp)
800020e4:	03010413          	addi	s0,sp,48
800020e8:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:746
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
800020ec:	d20ff0ef          	jal	ra,8000160c <vPortEnterCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:750
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
800020f0:	fdc42783          	lw	a5,-36(s0)
800020f4:	00079663          	bnez	a5,80002100 <vTaskDelete+0x28>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 1)
800020f8:	92c1a783          	lw	a5,-1748(gp) # 8000774c <pxCurrentTCB>
800020fc:	0080006f          	j	80002104 <vTaskDelete+0x2c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 2)
80002100:	fdc42783          	lw	a5,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 4)
80002104:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:756 (discriminator 4)

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80002108:	fec42783          	lw	a5,-20(s0)
8000210c:	00478793          	addi	a5,a5,4
80002110:	00078513          	mv	a0,a5
80002114:	bd9ff0ef          	jal	ra,80001cec <uxListRemove>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:766 (discriminator 4)
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
80002118:	fec42783          	lw	a5,-20(s0)
8000211c:	0287a783          	lw	a5,40(a5)
80002120:	00078a63          	beqz	a5,80002134 <vTaskDelete+0x5c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:768
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002124:	fec42783          	lw	a5,-20(s0)
80002128:	01878793          	addi	a5,a5,24
8000212c:	00078513          	mv	a0,a5
80002130:	bbdff0ef          	jal	ra,80001cec <uxListRemove>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:775
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
80002134:	fec42783          	lw	a5,-20(s0)
80002138:	00478793          	addi	a5,a5,4
8000213c:	00078593          	mv	a1,a5
80002140:	800217b7          	lui	a5,0x80021
80002144:	83078513          	addi	a0,a5,-2000 # 80020830 <__stack_top+0xfffdea20>
80002148:	a49ff0ef          	jal	ra,80001b90 <vListInsertEnd>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:780

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
8000214c:	9381a783          	lw	a5,-1736(gp) # 80007758 <uxTasksDeleted>
80002150:	00178713          	addi	a4,a5,1
80002154:	92e1ac23          	sw	a4,-1736(gp) # 80007758 <uxTasksDeleted>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:784

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
80002158:	9581a783          	lw	a5,-1704(gp) # 80007778 <uxTaskNumber>
8000215c:	00178713          	addi	a4,a5,1
80002160:	94e1ac23          	sw	a4,-1704(gp) # 80007778 <uxTaskNumber>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:788

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
80002164:	cdcff0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:792

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
80002168:	9481a783          	lw	a5,-1720(gp) # 80007768 <xSchedulerRunning>
8000216c:	02078a63          	beqz	a5,800021a0 <vTaskDelete+0xc8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:794
		{
			if( pxTCB == pxCurrentTCB )
80002170:	92c1a783          	lw	a5,-1748(gp) # 8000774c <pxCurrentTCB>
80002174:	fec42703          	lw	a4,-20(s0)
80002178:	00f71e63          	bne	a4,a5,80002194 <vTaskDelete+0xbc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:796
			{
				configASSERT( uxSchedulerSuspended == 0 );
8000217c:	9601a783          	lw	a5,-1696(gp) # 80007780 <uxSchedulerSuspended>
80002180:	00078663          	beqz	a5,8000218c <vTaskDelete+0xb4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:796 (discriminator 1)
80002184:	30047073          	csrci	mstatus,8
80002188:	0000006f          	j	80002188 <vTaskDelete+0xb0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:804
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
8000218c:	951ff0ef          	jal	ra,80001adc <vPortYield>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:817
					prvResetNextTaskUnblockTime();
				}
				taskEXIT_CRITICAL();
			}
		}
	}
80002190:	0100006f          	j	800021a0 <vTaskDelete+0xc8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:810
				taskENTER_CRITICAL();
80002194:	c78ff0ef          	jal	ra,8000160c <vPortEnterCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:812
					prvResetNextTaskUnblockTime();
80002198:	21d000ef          	jal	ra,80002bb4 <prvResetNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:814
				taskEXIT_CRITICAL();
8000219c:	ca4ff0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:817
	}
800021a0:	00000013          	nop
800021a4:	02c12083          	lw	ra,44(sp)
800021a8:	02812403          	lw	s0,40(sp)
800021ac:	03010113          	addi	sp,sp,48
800021b0:	00008067          	ret

800021b4 <vTaskDelay>:
vTaskDelay():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:921
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
800021b4:	fd010113          	addi	sp,sp,-48
800021b8:	02112623          	sw	ra,44(sp)
800021bc:	02812423          	sw	s0,40(sp)
800021c0:	03010413          	addi	s0,sp,48
800021c4:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:923
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
800021c8:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:927


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
800021cc:	fdc42783          	lw	a5,-36(s0)
800021d0:	04078463          	beqz	a5,80002218 <vTaskDelay+0x64>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:929
		{
			configASSERT( uxSchedulerSuspended == 0 );
800021d4:	9601a783          	lw	a5,-1696(gp) # 80007780 <uxSchedulerSuspended>
800021d8:	00078663          	beqz	a5,800021e4 <vTaskDelay+0x30>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:929 (discriminator 1)
800021dc:	30047073          	csrci	mstatus,8
800021e0:	0000006f          	j	800021e0 <vTaskDelay+0x2c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:930
			vTaskSuspendAll();
800021e4:	0e4000ef          	jal	ra,800022c8 <vTaskSuspendAll>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:944
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
800021e8:	9401a783          	lw	a5,-1728(gp) # 80007760 <xTickCount>
800021ec:	fdc42703          	lw	a4,-36(s0)
800021f0:	00f707b3          	add	a5,a4,a5
800021f4:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:949

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
800021f8:	92c1a783          	lw	a5,-1748(gp) # 8000774c <pxCurrentTCB>
800021fc:	00478793          	addi	a5,a5,4
80002200:	00078513          	mv	a0,a5
80002204:	ae9ff0ef          	jal	ra,80001cec <uxListRemove>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:960
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
80002208:	fe842503          	lw	a0,-24(s0)
8000220c:	021000ef          	jal	ra,80002a2c <prvAddCurrentTaskToDelayedList>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:962
			}
			xAlreadyYielded = xTaskResumeAll();
80002210:	0e0000ef          	jal	ra,800022f0 <xTaskResumeAll>
80002214:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:971
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
80002218:	fec42783          	lw	a5,-20(s0)
8000221c:	00079463          	bnez	a5,80002224 <vTaskDelay+0x70>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:973
		{
			portYIELD_WITHIN_API();
80002220:	8bdff0ef          	jal	ra,80001adc <vPortYield>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:979
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80002224:	00000013          	nop
80002228:	02c12083          	lw	ra,44(sp)
8000222c:	02812403          	lw	s0,40(sp)
80002230:	03010113          	addi	sp,sp,48
80002234:	00008067          	ret

80002238 <vTaskStartScheduler>:
vTaskStartScheduler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1542

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
80002238:	fe010113          	addi	sp,sp,-32
8000223c:	00112e23          	sw	ra,28(sp)
80002240:	00812c23          	sw	s0,24(sp)
80002244:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1555
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
80002248:	00000893          	li	a7,0
8000224c:	00000813          	li	a6,0
80002250:	00000793          	li	a5,0
80002254:	00000713          	li	a4,0
80002258:	00000693          	li	a3,0
8000225c:	40000613          	li	a2,1024
80002260:	800075b7          	lui	a1,0x80007
80002264:	f8858593          	addi	a1,a1,-120 # 80006f88 <__stack_top+0xfffc5178>
80002268:	80002537          	lui	a0,0x80002
8000226c:	76050513          	addi	a0,a0,1888 # 80002760 <__stack_top+0xfffc0950>
80002270:	c4dff0ef          	jal	ra,80001ebc <xTaskGenericCreate>
80002274:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1572
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
80002278:	fec42703          	lw	a4,-20(s0)
8000227c:	00100793          	li	a5,1
80002280:	02f71263          	bne	a4,a5,800022a4 <vTaskStartScheduler+0x6c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1579
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
80002284:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1589
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
80002288:	fff00713          	li	a4,-1
8000228c:	94e1ae23          	sw	a4,-1700(gp) # 8000777c <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1590
		xSchedulerRunning = pdTRUE;
80002290:	00100713          	li	a4,1
80002294:	94e1a423          	sw	a4,-1720(gp) # 80007768 <xSchedulerRunning>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1591
		xTickCount = ( TickType_t ) 0U;
80002298:	9401a023          	sw	zero,-1728(gp) # 80007760 <xTickCount>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1600
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
8000229c:	f14ff0ef          	jal	ra,800019b0 <xPortStartScheduler>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
800022a0:	0140006f          	j	800022b4 <vTaskStartScheduler+0x7c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615
		configASSERT( xReturn );
800022a4:	fec42783          	lw	a5,-20(s0)
800022a8:	00079663          	bnez	a5,800022b4 <vTaskStartScheduler+0x7c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 1)
800022ac:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 2)
800022b0:	0000006f          	j	800022b0 <vTaskStartScheduler+0x78>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
}
800022b4:	00000013          	nop
800022b8:	01c12083          	lw	ra,28(sp)
800022bc:	01812403          	lw	s0,24(sp)
800022c0:	02010113          	addi	sp,sp,32
800022c4:	00008067          	ret

800022c8 <vTaskSuspendAll>:
vTaskSuspendAll():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1632
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
800022c8:	ff010113          	addi	sp,sp,-16
800022cc:	00812623          	sw	s0,12(sp)
800022d0:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1637
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
800022d4:	9601a783          	lw	a5,-1696(gp) # 80007780 <uxSchedulerSuspended>
800022d8:	00178713          	addi	a4,a5,1
800022dc:	96e1a023          	sw	a4,-1696(gp) # 80007780 <uxSchedulerSuspended>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1638
}
800022e0:	00000013          	nop
800022e4:	00c12403          	lw	s0,12(sp)
800022e8:	01010113          	addi	sp,sp,16
800022ec:	00008067          	ret

800022f0 <xTaskResumeAll>:
xTaskResumeAll():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1670

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
800022f0:	fe010113          	addi	sp,sp,-32
800022f4:	00112e23          	sw	ra,28(sp)
800022f8:	00812c23          	sw	s0,24(sp)
800022fc:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1672
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
80002300:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
80002304:	9601a783          	lw	a5,-1696(gp) # 80007780 <uxSchedulerSuspended>
80002308:	00079663          	bnez	a5,80002314 <xTaskResumeAll+0x24>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676 (discriminator 1)
8000230c:	30047073          	csrci	mstatus,8
80002310:	0000006f          	j	80002310 <xTaskResumeAll+0x20>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1683
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
80002314:	af8ff0ef          	jal	ra,8000160c <vPortEnterCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1685
	{
		--uxSchedulerSuspended;
80002318:	9601a783          	lw	a5,-1696(gp) # 80007780 <uxSchedulerSuspended>
8000231c:	fff78713          	addi	a4,a5,-1
80002320:	96e1a023          	sw	a4,-1696(gp) # 80007780 <uxSchedulerSuspended>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1687

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80002324:	9601a783          	lw	a5,-1696(gp) # 80007780 <uxSchedulerSuspended>
80002328:	10079663          	bnez	a5,80002434 <xTaskResumeAll+0x144>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1689
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
8000232c:	93c1a783          	lw	a5,-1732(gp) # 8000775c <uxCurrentNumberOfTasks>
80002330:	10078263          	beqz	a5,80002434 <xTaskResumeAll+0x144>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
80002334:	0a80006f          	j	800023dc <xTaskResumeAll+0xec>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1695
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
80002338:	800217b7          	lui	a5,0x80021
8000233c:	81c78793          	addi	a5,a5,-2020 # 8002081c <__stack_top+0xfffdea0c>
80002340:	00c7a783          	lw	a5,12(a5)
80002344:	00c7a783          	lw	a5,12(a5)
80002348:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1696
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
8000234c:	fe842783          	lw	a5,-24(s0)
80002350:	01878793          	addi	a5,a5,24
80002354:	00078513          	mv	a0,a5
80002358:	995ff0ef          	jal	ra,80001cec <uxListRemove>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1697
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
8000235c:	fe842783          	lw	a5,-24(s0)
80002360:	00478793          	addi	a5,a5,4
80002364:	00078513          	mv	a0,a5
80002368:	985ff0ef          	jal	ra,80001cec <uxListRemove>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698
					prvAddTaskToReadyList( pxTCB );
8000236c:	fe842783          	lw	a5,-24(s0)
80002370:	02c7a703          	lw	a4,44(a5)
80002374:	9441a783          	lw	a5,-1724(gp) # 80007764 <uxTopReadyPriority>
80002378:	00e7f863          	bleu	a4,a5,80002388 <xTaskResumeAll+0x98>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 1)
8000237c:	fe842783          	lw	a5,-24(s0)
80002380:	02c7a703          	lw	a4,44(a5)
80002384:	94e1a223          	sw	a4,-1724(gp) # 80007764 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 3)
80002388:	fe842783          	lw	a5,-24(s0)
8000238c:	02c7a703          	lw	a4,44(a5)
80002390:	00070793          	mv	a5,a4
80002394:	00279793          	slli	a5,a5,0x2
80002398:	00e787b3          	add	a5,a5,a4
8000239c:	00279793          	slli	a5,a5,0x2
800023a0:	80020737          	lui	a4,0x80020
800023a4:	79070713          	addi	a4,a4,1936 # 80020790 <__stack_top+0xfffde980>
800023a8:	00e78733          	add	a4,a5,a4
800023ac:	fe842783          	lw	a5,-24(s0)
800023b0:	00478793          	addi	a5,a5,4
800023b4:	00078593          	mv	a1,a5
800023b8:	00070513          	mv	a0,a4
800023bc:	fd4ff0ef          	jal	ra,80001b90 <vListInsertEnd>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1702 (discriminator 3)

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
800023c0:	fe842783          	lw	a5,-24(s0)
800023c4:	02c7a703          	lw	a4,44(a5)
800023c8:	92c1a783          	lw	a5,-1748(gp) # 8000774c <pxCurrentTCB>
800023cc:	02c7a783          	lw	a5,44(a5)
800023d0:	00f76663          	bltu	a4,a5,800023dc <xTaskResumeAll+0xec>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1704
					{
						xYieldPending = pdTRUE;
800023d4:	00100713          	li	a4,1
800023d8:	94e1a823          	sw	a4,-1712(gp) # 80007770 <xYieldPending>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
800023dc:	800217b7          	lui	a5,0x80021
800023e0:	81c7a783          	lw	a5,-2020(a5) # 8002081c <__stack_top+0xfffdea0c>
800023e4:	f4079ae3          	bnez	a5,80002338 <xTaskResumeAll+0x48>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1716

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
800023e8:	94c1a783          	lw	a5,-1716(gp) # 8000776c <uxPendedTicks>
800023ec:	02078863          	beqz	a5,8000241c <xTaskResumeAll+0x12c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
800023f0:	0240006f          	j	80002414 <xTaskResumeAll+0x124>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1720
					{
						if( xTaskIncrementTick() != pdFALSE )
800023f4:	094000ef          	jal	ra,80002488 <xTaskIncrementTick>
800023f8:	00050793          	mv	a5,a0
800023fc:	00078663          	beqz	a5,80002408 <xTaskResumeAll+0x118>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1722
						{
							xYieldPending = pdTRUE;
80002400:	00100713          	li	a4,1
80002404:	94e1a823          	sw	a4,-1712(gp) # 80007770 <xYieldPending>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1728
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
80002408:	94c1a783          	lw	a5,-1716(gp) # 8000776c <uxPendedTicks>
8000240c:	fff78713          	addi	a4,a5,-1
80002410:	94e1a623          	sw	a4,-1716(gp) # 8000776c <uxPendedTicks>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
					while( uxPendedTicks > ( UBaseType_t ) 0U )
80002414:	94c1a783          	lw	a5,-1716(gp) # 8000776c <uxPendedTicks>
80002418:	fc079ee3          	bnez	a5,800023f4 <xTaskResumeAll+0x104>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1736
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
8000241c:	9501a703          	lw	a4,-1712(gp) # 80007770 <xYieldPending>
80002420:	00100793          	li	a5,1
80002424:	00f71863          	bne	a4,a5,80002434 <xTaskResumeAll+0x144>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1740
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
80002428:	00100793          	li	a5,1
8000242c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1743
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
80002430:	eacff0ef          	jal	ra,80001adc <vPortYield>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1756
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
80002434:	a0cff0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1758

	return xAlreadyYielded;
80002438:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1759
}
8000243c:	00078513          	mv	a0,a5
80002440:	01c12083          	lw	ra,28(sp)
80002444:	01812403          	lw	s0,24(sp)
80002448:	02010113          	addi	sp,sp,32
8000244c:	00008067          	ret

80002450 <xTaskGetTickCount>:
xTaskGetTickCount():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1763
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
80002450:	fe010113          	addi	sp,sp,-32
80002454:	00112e23          	sw	ra,28(sp)
80002458:	00812c23          	sw	s0,24(sp)
8000245c:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1767
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
80002460:	9acff0ef          	jal	ra,8000160c <vPortEnterCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1769
	{
		xTicks = xTickCount;
80002464:	9401a783          	lw	a5,-1728(gp) # 80007760 <xTickCount>
80002468:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1771
	}
	portTICK_TYPE_EXIT_CRITICAL();
8000246c:	9d4ff0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1773

	return xTicks;
80002470:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1774
}
80002474:	00078513          	mv	a0,a5
80002478:	01c12083          	lw	ra,28(sp)
8000247c:	01812403          	lw	s0,24(sp)
80002480:	02010113          	addi	sp,sp,32
80002484:	00008067          	ret

80002488 <xTaskIncrementTick>:
xTaskIncrementTick():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1938

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
80002488:	fd010113          	addi	sp,sp,-48
8000248c:	02112623          	sw	ra,44(sp)
80002490:	02812423          	sw	s0,40(sp)
80002494:	03010413          	addi	s0,sp,48
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1941
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
80002498:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1947

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
8000249c:	9601a783          	lw	a5,-1696(gp) # 80007780 <uxSchedulerSuspended>
800024a0:	1a079063          	bnez	a5,80002640 <xTaskIncrementTick+0x1b8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1951
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
800024a4:	9401a783          	lw	a5,-1728(gp) # 80007760 <xTickCount>
800024a8:	00178713          	addi	a4,a5,1
800024ac:	94e1a023          	sw	a4,-1728(gp) # 80007760 <xTickCount>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1956

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
800024b0:	9401a783          	lw	a5,-1728(gp) # 80007760 <xTickCount>
800024b4:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1958

			if( xConstTickCount == ( TickType_t ) 0U )
800024b8:	fe842783          	lw	a5,-24(s0)
800024bc:	04079063          	bnez	a5,800024fc <xTaskIncrementTick+0x74>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960
			{
				taskSWITCH_DELAYED_LISTS();
800024c0:	9301a783          	lw	a5,-1744(gp) # 80007750 <pxDelayedTaskList>
800024c4:	0007a783          	lw	a5,0(a5)
800024c8:	00078663          	beqz	a5,800024d4 <xTaskIncrementTick+0x4c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 1)
800024cc:	30047073          	csrci	mstatus,8
800024d0:	0000006f          	j	800024d0 <xTaskIncrementTick+0x48>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 2)
800024d4:	9301a783          	lw	a5,-1744(gp) # 80007750 <pxDelayedTaskList>
800024d8:	fef42223          	sw	a5,-28(s0)
800024dc:	9341a703          	lw	a4,-1740(gp) # 80007754 <pxOverflowDelayedTaskList>
800024e0:	92e1a823          	sw	a4,-1744(gp) # 80007750 <pxDelayedTaskList>
800024e4:	fe442703          	lw	a4,-28(s0)
800024e8:	92e1aa23          	sw	a4,-1740(gp) # 80007754 <pxOverflowDelayedTaskList>
800024ec:	9541a783          	lw	a5,-1708(gp) # 80007774 <xNumOfOverflows>
800024f0:	00178713          	addi	a4,a5,1
800024f4:	94e1aa23          	sw	a4,-1708(gp) # 80007774 <xNumOfOverflows>
800024f8:	6bc000ef          	jal	ra,80002bb4 <prvResetNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1971

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
800024fc:	95c1a783          	lw	a5,-1700(gp) # 8000777c <xNextTaskUnblockTime>
80002500:	fe842703          	lw	a4,-24(s0)
80002504:	10f76063          	bltu	a4,a5,80002604 <xTaskIncrementTick+0x17c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80002508:	9301a783          	lw	a5,-1744(gp) # 80007750 <pxDelayedTaskList>
8000250c:	0007a783          	lw	a5,0(a5)
80002510:	00079663          	bnez	a5,8000251c <xTaskIncrementTick+0x94>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 1)
80002514:	00100793          	li	a5,1
80002518:	0080006f          	j	80002520 <xTaskIncrementTick+0x98>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 2)
8000251c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 4)
80002520:	00078863          	beqz	a5,80002530 <xTaskIncrementTick+0xa8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1982
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
80002524:	fff00713          	li	a4,-1
80002528:	94e1ae23          	sw	a4,-1700(gp) # 8000777c <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1983
						break;
8000252c:	0d80006f          	j	80002604 <xTaskIncrementTick+0x17c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1991
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80002530:	9301a783          	lw	a5,-1744(gp) # 80007750 <pxDelayedTaskList>
80002534:	00c7a783          	lw	a5,12(a5)
80002538:	00c7a783          	lw	a5,12(a5)
8000253c:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1992
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
80002540:	fe042783          	lw	a5,-32(s0)
80002544:	0047a783          	lw	a5,4(a5)
80002548:	fcf42e23          	sw	a5,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1994

						if( xConstTickCount < xItemValue )
8000254c:	fe842703          	lw	a4,-24(s0)
80002550:	fdc42783          	lw	a5,-36(s0)
80002554:	00f77863          	bleu	a5,a4,80002564 <xTaskIncrementTick+0xdc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2001
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
80002558:	fdc42703          	lw	a4,-36(s0)
8000255c:	94e1ae23          	sw	a4,-1700(gp) # 8000777c <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2002
							break;
80002560:	0a40006f          	j	80002604 <xTaskIncrementTick+0x17c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2010
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80002564:	fe042783          	lw	a5,-32(s0)
80002568:	00478793          	addi	a5,a5,4
8000256c:	00078513          	mv	a0,a5
80002570:	f7cff0ef          	jal	ra,80001cec <uxListRemove>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2014

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
80002574:	fe042783          	lw	a5,-32(s0)
80002578:	0287a783          	lw	a5,40(a5)
8000257c:	00078a63          	beqz	a5,80002590 <xTaskIncrementTick+0x108>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2016
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002580:	fe042783          	lw	a5,-32(s0)
80002584:	01878793          	addi	a5,a5,24
80002588:	00078513          	mv	a0,a5
8000258c:	f60ff0ef          	jal	ra,80001cec <uxListRemove>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
80002590:	fe042783          	lw	a5,-32(s0)
80002594:	02c7a703          	lw	a4,44(a5)
80002598:	9441a783          	lw	a5,-1724(gp) # 80007764 <uxTopReadyPriority>
8000259c:	00e7f863          	bleu	a4,a5,800025ac <xTaskIncrementTick+0x124>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 1)
800025a0:	fe042783          	lw	a5,-32(s0)
800025a4:	02c7a703          	lw	a4,44(a5)
800025a8:	94e1a223          	sw	a4,-1724(gp) # 80007764 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 3)
800025ac:	fe042783          	lw	a5,-32(s0)
800025b0:	02c7a703          	lw	a4,44(a5)
800025b4:	00070793          	mv	a5,a4
800025b8:	00279793          	slli	a5,a5,0x2
800025bc:	00e787b3          	add	a5,a5,a4
800025c0:	00279793          	slli	a5,a5,0x2
800025c4:	80020737          	lui	a4,0x80020
800025c8:	79070713          	addi	a4,a4,1936 # 80020790 <__stack_top+0xfffde980>
800025cc:	00e78733          	add	a4,a5,a4
800025d0:	fe042783          	lw	a5,-32(s0)
800025d4:	00478793          	addi	a5,a5,4
800025d8:	00078593          	mv	a1,a5
800025dc:	00070513          	mv	a0,a4
800025e0:	db0ff0ef          	jal	ra,80001b90 <vListInsertEnd>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2035 (discriminator 3)
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
800025e4:	fe042783          	lw	a5,-32(s0)
800025e8:	02c7a703          	lw	a4,44(a5)
800025ec:	92c1a783          	lw	a5,-1748(gp) # 8000774c <pxCurrentTCB>
800025f0:	02c7a783          	lw	a5,44(a5)
800025f4:	f0f76ae3          	bltu	a4,a5,80002508 <xTaskIncrementTick+0x80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2037
							{
								xSwitchRequired = pdTRUE;
800025f8:	00100793          	li	a5,1
800025fc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80002600:	f09ff06f          	j	80002508 <xTaskIncrementTick+0x80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2055
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
80002604:	92c1a783          	lw	a5,-1748(gp) # 8000774c <pxCurrentTCB>
80002608:	02c7a703          	lw	a4,44(a5)
8000260c:	800206b7          	lui	a3,0x80020
80002610:	00070793          	mv	a5,a4
80002614:	00279793          	slli	a5,a5,0x2
80002618:	00e787b3          	add	a5,a5,a4
8000261c:	00279793          	slli	a5,a5,0x2
80002620:	79068713          	addi	a4,a3,1936 # 80020790 <__stack_top+0xfffde980>
80002624:	00e787b3          	add	a5,a5,a4
80002628:	0007a703          	lw	a4,0(a5)
8000262c:	00100793          	li	a5,1
80002630:	00e7fe63          	bleu	a4,a5,8000264c <xTaskIncrementTick+0x1c4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2057
			{
				xSwitchRequired = pdTRUE;
80002634:	00100793          	li	a5,1
80002638:	fef42623          	sw	a5,-20(s0)
8000263c:	0100006f          	j	8000264c <xTaskIncrementTick+0x1c4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2083
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
80002640:	94c1a783          	lw	a5,-1716(gp) # 8000776c <uxPendedTicks>
80002644:	00178713          	addi	a4,a5,1
80002648:	94e1a623          	sw	a4,-1716(gp) # 8000776c <uxPendedTicks>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2096
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
8000264c:	9501a783          	lw	a5,-1712(gp) # 80007770 <xYieldPending>
80002650:	00078663          	beqz	a5,8000265c <xTaskIncrementTick+0x1d4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2098
		{
			xSwitchRequired = pdTRUE;
80002654:	00100793          	li	a5,1
80002658:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2107
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
8000265c:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2108
}
80002660:	00078513          	mv	a0,a5
80002664:	02c12083          	lw	ra,44(sp)
80002668:	02812403          	lw	s0,40(sp)
8000266c:	03010113          	addi	sp,sp,48
80002670:	00008067          	ret

80002674 <vTaskSwitchContext>:
vTaskSwitchContext():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2202

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
80002674:	fe010113          	addi	sp,sp,-32
80002678:	00812e23          	sw	s0,28(sp)
8000267c:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2203
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
80002680:	9601a783          	lw	a5,-1696(gp) # 80007780 <uxSchedulerSuspended>
80002684:	00078863          	beqz	a5,80002694 <vTaskSwitchContext+0x20>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2207
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
80002688:	00100713          	li	a4,1
8000268c:	94e1a823          	sw	a4,-1712(gp) # 80007770 <xYieldPending>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
80002690:	0c00006f          	j	80002750 <vTaskSwitchContext+0xdc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2211
		xYieldPending = pdFALSE;
80002694:	9401a823          	sw	zero,-1712(gp) # 80007770 <xYieldPending>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246
		taskSELECT_HIGHEST_PRIORITY_TASK();
80002698:	0200006f          	j	800026b8 <vTaskSwitchContext+0x44>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 4)
8000269c:	9441a783          	lw	a5,-1724(gp) # 80007764 <uxTopReadyPriority>
800026a0:	00079663          	bnez	a5,800026ac <vTaskSwitchContext+0x38>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 1)
800026a4:	30047073          	csrci	mstatus,8
800026a8:	0000006f          	j	800026a8 <vTaskSwitchContext+0x34>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 2)
800026ac:	9441a783          	lw	a5,-1724(gp) # 80007764 <uxTopReadyPriority>
800026b0:	fff78713          	addi	a4,a5,-1
800026b4:	94e1a223          	sw	a4,-1724(gp) # 80007764 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 3)
800026b8:	9441a703          	lw	a4,-1724(gp) # 80007764 <uxTopReadyPriority>
800026bc:	800206b7          	lui	a3,0x80020
800026c0:	00070793          	mv	a5,a4
800026c4:	00279793          	slli	a5,a5,0x2
800026c8:	00e787b3          	add	a5,a5,a4
800026cc:	00279793          	slli	a5,a5,0x2
800026d0:	79068713          	addi	a4,a3,1936 # 80020790 <__stack_top+0xfffde980>
800026d4:	00e787b3          	add	a5,a5,a4
800026d8:	0007a783          	lw	a5,0(a5)
800026dc:	fc0780e3          	beqz	a5,8000269c <vTaskSwitchContext+0x28>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 5)
800026e0:	9441a703          	lw	a4,-1724(gp) # 80007764 <uxTopReadyPriority>
800026e4:	00070793          	mv	a5,a4
800026e8:	00279793          	slli	a5,a5,0x2
800026ec:	00e787b3          	add	a5,a5,a4
800026f0:	00279793          	slli	a5,a5,0x2
800026f4:	80020737          	lui	a4,0x80020
800026f8:	79070713          	addi	a4,a4,1936 # 80020790 <__stack_top+0xfffde980>
800026fc:	00e787b3          	add	a5,a5,a4
80002700:	fef42623          	sw	a5,-20(s0)
80002704:	fec42783          	lw	a5,-20(s0)
80002708:	0047a783          	lw	a5,4(a5)
8000270c:	0047a703          	lw	a4,4(a5)
80002710:	fec42783          	lw	a5,-20(s0)
80002714:	00e7a223          	sw	a4,4(a5)
80002718:	fec42783          	lw	a5,-20(s0)
8000271c:	0047a703          	lw	a4,4(a5)
80002720:	fec42783          	lw	a5,-20(s0)
80002724:	00878793          	addi	a5,a5,8
80002728:	00f71c63          	bne	a4,a5,80002740 <vTaskSwitchContext+0xcc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 6)
8000272c:	fec42783          	lw	a5,-20(s0)
80002730:	0047a783          	lw	a5,4(a5)
80002734:	0047a703          	lw	a4,4(a5)
80002738:	fec42783          	lw	a5,-20(s0)
8000273c:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 8)
80002740:	fec42783          	lw	a5,-20(s0)
80002744:	0047a783          	lw	a5,4(a5)
80002748:	00c7a703          	lw	a4,12(a5)
8000274c:	92e1a623          	sw	a4,-1748(gp) # 8000774c <pxCurrentTCB>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
}
80002750:	00000013          	nop
80002754:	01c12403          	lw	s0,28(sp)
80002758:	02010113          	addi	sp,sp,32
8000275c:	00008067          	ret

80002760 <prvIdleTask>:
prvIdleTask():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2689
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
80002760:	fe010113          	addi	sp,sp,-32
80002764:	00112e23          	sw	ra,28(sp)
80002768:	00812c23          	sw	s0,24(sp)
8000276c:	02010413          	addi	s0,sp,32
80002770:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
80002774:	218000ef          	jal	ra,8000298c <prvCheckTasksWaitingTermination>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2719

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
80002778:	800207b7          	lui	a5,0x80020
8000277c:	7907a703          	lw	a4,1936(a5) # 80020790 <__stack_top+0xfffde980>
80002780:	00100793          	li	a5,1
80002784:	00e7f463          	bleu	a4,a5,8000278c <prvIdleTask+0x2c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2721
			{
				taskYIELD();
80002788:	b54ff0ef          	jal	ra,80001adc <vPortYield>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2739
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
8000278c:	5bd030ef          	jal	ra,80006548 <vApplicationIdleHook>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
		prvCheckTasksWaitingTermination();
80002790:	fe5ff06f          	j	80002774 <prvIdleTask+0x14>

80002794 <prvInitialiseTCBVariables>:
prvInitialiseTCBVariables():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2832

#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80002794:	fc010113          	addi	sp,sp,-64
80002798:	02112e23          	sw	ra,60(sp)
8000279c:	02812c23          	sw	s0,56(sp)
800027a0:	04010413          	addi	s0,sp,64
800027a4:	fca42e23          	sw	a0,-36(s0)
800027a8:	fcb42c23          	sw	a1,-40(s0)
800027ac:	fcc42a23          	sw	a2,-44(s0)
800027b0:	fcd42823          	sw	a3,-48(s0)
800027b4:	00070793          	mv	a5,a4
800027b8:	fcf41723          	sh	a5,-50(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
800027bc:	fe042623          	sw	zero,-20(s0)
800027c0:	0440006f          	j	80002804 <prvInitialiseTCBVariables+0x70>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2838
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
800027c4:	fd842703          	lw	a4,-40(s0)
800027c8:	fec42783          	lw	a5,-20(s0)
800027cc:	00f707b3          	add	a5,a4,a5
800027d0:	00078703          	lb	a4,0(a5)
800027d4:	fdc42683          	lw	a3,-36(s0)
800027d8:	fec42783          	lw	a5,-20(s0)
800027dc:	00f687b3          	add	a5,a3,a5
800027e0:	02e78a23          	sb	a4,52(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2843

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
800027e4:	fd842703          	lw	a4,-40(s0)
800027e8:	fec42783          	lw	a5,-20(s0)
800027ec:	00f707b3          	add	a5,a4,a5
800027f0:	00078783          	lb	a5,0(a5)
800027f4:	02078063          	beqz	a5,80002814 <prvInitialiseTCBVariables+0x80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 2)
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
800027f8:	fec42783          	lw	a5,-20(s0)
800027fc:	00178793          	addi	a5,a5,1
80002800:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 1)
80002804:	fec42703          	lw	a4,-20(s0)
80002808:	00f00793          	li	a5,15
8000280c:	fae7fce3          	bleu	a4,a5,800027c4 <prvInitialiseTCBVariables+0x30>
80002810:	0080006f          	j	80002818 <prvInitialiseTCBVariables+0x84>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2845
		{
			break;
80002814:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2855
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
80002818:	fdc42783          	lw	a5,-36(s0)
8000281c:	040781a3          	sb	zero,67(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2859

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
80002820:	fd442703          	lw	a4,-44(s0)
80002824:	00400793          	li	a5,4
80002828:	00e7f663          	bleu	a4,a5,80002834 <prvInitialiseTCBVariables+0xa0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2861
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
8000282c:	00400793          	li	a5,4
80002830:	fcf42a23          	sw	a5,-44(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2868
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
80002834:	fdc42783          	lw	a5,-36(s0)
80002838:	fd442703          	lw	a4,-44(s0)
8000283c:	02e7a623          	sw	a4,44(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2871
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
80002840:	fdc42783          	lw	a5,-36(s0)
80002844:	fd442703          	lw	a4,-44(s0)
80002848:	04e7a823          	sw	a4,80(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2872
		pxTCB->uxMutexesHeld = 0;
8000284c:	fdc42783          	lw	a5,-36(s0)
80002850:	0407aa23          	sw	zero,84(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2876
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
80002854:	fdc42783          	lw	a5,-36(s0)
80002858:	00478793          	addi	a5,a5,4
8000285c:	00078513          	mv	a0,a5
80002860:	b08ff0ef          	jal	ra,80001b68 <vListInitialiseItem>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2877
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
80002864:	fdc42783          	lw	a5,-36(s0)
80002868:	01878793          	addi	a5,a5,24
8000286c:	00078513          	mv	a0,a5
80002870:	af8ff0ef          	jal	ra,80001b68 <vListInitialiseItem>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2881

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
80002874:	fdc42783          	lw	a5,-36(s0)
80002878:	fdc42703          	lw	a4,-36(s0)
8000287c:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2884

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80002880:	00500713          	li	a4,5
80002884:	fd442783          	lw	a5,-44(s0)
80002888:	40f70733          	sub	a4,a4,a5
8000288c:	fdc42783          	lw	a5,-36(s0)
80002890:	00e7ac23          	sw	a4,24(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2885
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
80002894:	fdc42783          	lw	a5,-36(s0)
80002898:	fdc42703          	lw	a4,-36(s0)
8000289c:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2889

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
800028a0:	fdc42783          	lw	a5,-36(s0)
800028a4:	0407a223          	sw	zero,68(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2927
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
800028a8:	fdc42783          	lw	a5,-36(s0)
800028ac:	0407ac23          	sw	zero,88(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2928
		pxTCB->eNotifyState = eNotWaitingNotification;
800028b0:	fdc42783          	lw	a5,-36(s0)
800028b4:	0407ae23          	sw	zero,92(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2938
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
800028b8:	00000013          	nop
800028bc:	03c12083          	lw	ra,60(sp)
800028c0:	03812403          	lw	s0,56(sp)
800028c4:	04010113          	addi	sp,sp,64
800028c8:	00008067          	ret

800028cc <prvInitialiseTaskLists>:
prvInitialiseTaskLists():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2997

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
800028cc:	fe010113          	addi	sp,sp,-32
800028d0:	00112e23          	sw	ra,28(sp)
800028d4:	00812c23          	sw	s0,24(sp)
800028d8:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
800028dc:	fe042623          	sw	zero,-20(s0)
800028e0:	0380006f          	j	80002918 <prvInitialiseTaskLists+0x4c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3002 (discriminator 3)
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
800028e4:	fec42703          	lw	a4,-20(s0)
800028e8:	00070793          	mv	a5,a4
800028ec:	00279793          	slli	a5,a5,0x2
800028f0:	00e787b3          	add	a5,a5,a4
800028f4:	00279793          	slli	a5,a5,0x2
800028f8:	80020737          	lui	a4,0x80020
800028fc:	79070713          	addi	a4,a4,1936 # 80020790 <__stack_top+0xfffde980>
80002900:	00e787b3          	add	a5,a5,a4
80002904:	00078513          	mv	a0,a5
80002908:	9fcff0ef          	jal	ra,80001b04 <vListInitialise>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 3)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
8000290c:	fec42783          	lw	a5,-20(s0)
80002910:	00178793          	addi	a5,a5,1
80002914:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 1)
80002918:	fec42703          	lw	a4,-20(s0)
8000291c:	00400793          	li	a5,4
80002920:	fce7f2e3          	bleu	a4,a5,800028e4 <prvInitialiseTaskLists+0x18>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3005
	}

	vListInitialise( &xDelayedTaskList1 );
80002924:	800207b7          	lui	a5,0x80020
80002928:	7f478513          	addi	a0,a5,2036 # 800207f4 <__stack_top+0xfffde9e4>
8000292c:	9d8ff0ef          	jal	ra,80001b04 <vListInitialise>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3006
	vListInitialise( &xDelayedTaskList2 );
80002930:	800217b7          	lui	a5,0x80021
80002934:	80878513          	addi	a0,a5,-2040 # 80020808 <__stack_top+0xfffde9f8>
80002938:	9ccff0ef          	jal	ra,80001b04 <vListInitialise>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3007
	vListInitialise( &xPendingReadyList );
8000293c:	800217b7          	lui	a5,0x80021
80002940:	81c78513          	addi	a0,a5,-2020 # 8002081c <__stack_top+0xfffdea0c>
80002944:	9c0ff0ef          	jal	ra,80001b04 <vListInitialise>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3011

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
80002948:	800217b7          	lui	a5,0x80021
8000294c:	83078513          	addi	a0,a5,-2000 # 80020830 <__stack_top+0xfffdea20>
80002950:	9b4ff0ef          	jal	ra,80001b04 <vListInitialise>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3017
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
80002954:	800217b7          	lui	a5,0x80021
80002958:	84478513          	addi	a0,a5,-1980 # 80020844 <__stack_top+0xfffdea34>
8000295c:	9a8ff0ef          	jal	ra,80001b04 <vListInitialise>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3023
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
80002960:	80020737          	lui	a4,0x80020
80002964:	7f470713          	addi	a4,a4,2036 # 800207f4 <__stack_top+0xfffde9e4>
80002968:	92e1a823          	sw	a4,-1744(gp) # 80007750 <pxDelayedTaskList>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3024
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
8000296c:	80021737          	lui	a4,0x80021
80002970:	80870713          	addi	a4,a4,-2040 # 80020808 <__stack_top+0xfffde9f8>
80002974:	92e1aa23          	sw	a4,-1740(gp) # 80007754 <pxOverflowDelayedTaskList>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3025
}
80002978:	00000013          	nop
8000297c:	01c12083          	lw	ra,28(sp)
80002980:	01812403          	lw	s0,24(sp)
80002984:	02010113          	addi	sp,sp,32
80002988:	00008067          	ret

8000298c <prvCheckTasksWaitingTermination>:
prvCheckTasksWaitingTermination():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3029
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
8000298c:	fe010113          	addi	sp,sp,-32
80002990:	00112e23          	sw	ra,28(sp)
80002994:	00812c23          	sw	s0,24(sp)
80002998:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
8000299c:	0740006f          	j	80002a10 <prvCheckTasksWaitingTermination+0x84>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3038
		{
			vTaskSuspendAll();
800029a0:	929ff0ef          	jal	ra,800022c8 <vTaskSuspendAll>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3040
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
800029a4:	800217b7          	lui	a5,0x80021
800029a8:	8307a783          	lw	a5,-2000(a5) # 80020830 <__stack_top+0xfffdea20>
800029ac:	0017b793          	seqz	a5,a5
800029b0:	0ff7f793          	andi	a5,a5,255
800029b4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3042
			}
			( void ) xTaskResumeAll();
800029b8:	939ff0ef          	jal	ra,800022f0 <xTaskResumeAll>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3044

			if( xListIsEmpty == pdFALSE )
800029bc:	fec42783          	lw	a5,-20(s0)
800029c0:	04079863          	bnez	a5,80002a10 <prvCheckTasksWaitingTermination+0x84>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3048
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
800029c4:	c49fe0ef          	jal	ra,8000160c <vPortEnterCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3050
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
800029c8:	800217b7          	lui	a5,0x80021
800029cc:	83078793          	addi	a5,a5,-2000 # 80020830 <__stack_top+0xfffdea20>
800029d0:	00c7a783          	lw	a5,12(a5)
800029d4:	00c7a783          	lw	a5,12(a5)
800029d8:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3051
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
800029dc:	fe842783          	lw	a5,-24(s0)
800029e0:	00478793          	addi	a5,a5,4
800029e4:	00078513          	mv	a0,a5
800029e8:	b04ff0ef          	jal	ra,80001cec <uxListRemove>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3052
					--uxCurrentNumberOfTasks;
800029ec:	93c1a783          	lw	a5,-1732(gp) # 8000775c <uxCurrentNumberOfTasks>
800029f0:	fff78713          	addi	a4,a5,-1
800029f4:	92e1ae23          	sw	a4,-1732(gp) # 8000775c <uxCurrentNumberOfTasks>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3053
					--uxTasksDeleted;
800029f8:	9381a783          	lw	a5,-1736(gp) # 80007758 <uxTasksDeleted>
800029fc:	fff78713          	addi	a4,a5,-1
80002a00:	92e1ac23          	sw	a4,-1736(gp) # 80007758 <uxTasksDeleted>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3055
				}
				taskEXIT_CRITICAL();
80002a04:	c3dfe0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3057

				prvDeleteTCB( pxTCB );
80002a08:	fe842503          	lw	a0,-24(s0)
80002a0c:	168000ef          	jal	ra,80002b74 <prvDeleteTCB>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
80002a10:	9381a783          	lw	a5,-1736(gp) # 80007758 <uxTasksDeleted>
80002a14:	f80796e3          	bnez	a5,800029a0 <prvCheckTasksWaitingTermination+0x14>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3066
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
80002a18:	00000013          	nop
80002a1c:	01c12083          	lw	ra,28(sp)
80002a20:	01812403          	lw	s0,24(sp)
80002a24:	02010113          	addi	sp,sp,32
80002a28:	00008067          	ret

80002a2c <prvAddCurrentTaskToDelayedList>:
prvAddCurrentTaskToDelayedList():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3070
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
80002a2c:	fe010113          	addi	sp,sp,-32
80002a30:	00112e23          	sw	ra,28(sp)
80002a34:	00812c23          	sw	s0,24(sp)
80002a38:	02010413          	addi	s0,sp,32
80002a3c:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3072
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
80002a40:	92c1a783          	lw	a5,-1748(gp) # 8000774c <pxCurrentTCB>
80002a44:	fec42703          	lw	a4,-20(s0)
80002a48:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3074

	if( xTimeToWake < xTickCount )
80002a4c:	9401a783          	lw	a5,-1728(gp) # 80007760 <xTickCount>
80002a50:	fec42703          	lw	a4,-20(s0)
80002a54:	02f77063          	bleu	a5,a4,80002a74 <prvAddCurrentTaskToDelayedList+0x48>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3077
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80002a58:	9341a703          	lw	a4,-1740(gp) # 80007754 <pxOverflowDelayedTaskList>
80002a5c:	92c1a783          	lw	a5,-1748(gp) # 8000774c <pxCurrentTCB>
80002a60:	00478793          	addi	a5,a5,4
80002a64:	00078593          	mv	a1,a5
80002a68:	00070513          	mv	a0,a4
80002a6c:	9acff0ef          	jal	ra,80001c18 <vListInsert>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
80002a70:	0300006f          	j	80002aa0 <prvAddCurrentTaskToDelayedList+0x74>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3082
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80002a74:	9301a703          	lw	a4,-1744(gp) # 80007750 <pxDelayedTaskList>
80002a78:	92c1a783          	lw	a5,-1748(gp) # 8000774c <pxCurrentTCB>
80002a7c:	00478793          	addi	a5,a5,4
80002a80:	00078593          	mv	a1,a5
80002a84:	00070513          	mv	a0,a4
80002a88:	990ff0ef          	jal	ra,80001c18 <vListInsert>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3087
		if( xTimeToWake < xNextTaskUnblockTime )
80002a8c:	95c1a783          	lw	a5,-1700(gp) # 8000777c <xNextTaskUnblockTime>
80002a90:	fec42703          	lw	a4,-20(s0)
80002a94:	00f77663          	bleu	a5,a4,80002aa0 <prvAddCurrentTaskToDelayedList+0x74>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3089
			xNextTaskUnblockTime = xTimeToWake;
80002a98:	fec42703          	lw	a4,-20(s0)
80002a9c:	94e1ae23          	sw	a4,-1700(gp) # 8000777c <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
}
80002aa0:	00000013          	nop
80002aa4:	01c12083          	lw	ra,28(sp)
80002aa8:	01812403          	lw	s0,24(sp)
80002aac:	02010113          	addi	sp,sp,32
80002ab0:	00008067          	ret

80002ab4 <prvAllocateTCBAndStack>:
prvAllocateTCBAndStack():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3100
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
80002ab4:	fd010113          	addi	sp,sp,-48
80002ab8:	02112623          	sw	ra,44(sp)
80002abc:	02812423          	sw	s0,40(sp)
80002ac0:	03010413          	addi	s0,sp,48
80002ac4:	00050793          	mv	a5,a0
80002ac8:	fcb42c23          	sw	a1,-40(s0)
80002acc:	fcf41f23          	sh	a5,-34(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80002ad0:	fd842783          	lw	a5,-40(s0)
80002ad4:	00079e63          	bnez	a5,80002af0 <prvAllocateTCBAndStack+0x3c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 1)
80002ad8:	fde45783          	lhu	a5,-34(s0)
80002adc:	00279793          	slli	a5,a5,0x2
80002ae0:	00078513          	mv	a0,a5
80002ae4:	fc0fe0ef          	jal	ra,800012a4 <pvPortMalloc>
80002ae8:	00050793          	mv	a5,a0
80002aec:	0080006f          	j	80002af4 <prvAllocateTCBAndStack+0x40>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 2)
80002af0:	fd842783          	lw	a5,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 4)
80002af4:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3134 (discriminator 4)

		if( pxStack != NULL )
80002af8:	fe842783          	lw	a5,-24(s0)
80002afc:	02078a63          	beqz	a5,80002b30 <prvAllocateTCBAndStack+0x7c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3138
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
80002b00:	06000513          	li	a0,96
80002b04:	fa0fe0ef          	jal	ra,800012a4 <pvPortMalloc>
80002b08:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3140

			if( pxNewTCB != NULL )
80002b0c:	fec42783          	lw	a5,-20(s0)
80002b10:	00078a63          	beqz	a5,80002b24 <prvAllocateTCBAndStack+0x70>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3143
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
80002b14:	fec42783          	lw	a5,-20(s0)
80002b18:	fe842703          	lw	a4,-24(s0)
80002b1c:	02e7a823          	sw	a4,48(a5)
80002b20:	0140006f          	j	80002b34 <prvAllocateTCBAndStack+0x80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3149
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
80002b24:	fe842503          	lw	a0,-24(s0)
80002b28:	959fe0ef          	jal	ra,80001480 <vPortFree>
80002b2c:	0080006f          	j	80002b34 <prvAllocateTCBAndStack+0x80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3154
			}
		}
		else
		{
			pxNewTCB = NULL;
80002b30:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3159
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
80002b34:	fec42783          	lw	a5,-20(s0)
80002b38:	02078263          	beqz	a5,80002b5c <prvAllocateTCBAndStack+0xa8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3165
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
80002b3c:	fec42783          	lw	a5,-20(s0)
80002b40:	0307a703          	lw	a4,48(a5)
80002b44:	fde45783          	lhu	a5,-34(s0)
80002b48:	00279793          	slli	a5,a5,0x2
80002b4c:	00078613          	mv	a2,a5
80002b50:	0a500593          	li	a1,165
80002b54:	00070513          	mv	a0,a4
80002b58:	a2cff0ef          	jal	ra,80001d84 <memset>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3170
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
80002b5c:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3171
}
80002b60:	00078513          	mv	a0,a5
80002b64:	02c12083          	lw	ra,44(sp)
80002b68:	02812403          	lw	s0,40(sp)
80002b6c:	03010113          	addi	sp,sp,48
80002b70:	00008067          	ret

80002b74 <prvDeleteTCB>:
prvDeleteTCB():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3310
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
80002b74:	fe010113          	addi	sp,sp,-32
80002b78:	00112e23          	sw	ra,28(sp)
80002b7c:	00812c23          	sw	s0,24(sp)
80002b80:	02010413          	addi	s0,sp,32
80002b84:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3335
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
80002b88:	fec42783          	lw	a5,-20(s0)
80002b8c:	0307a783          	lw	a5,48(a5)
80002b90:	00078513          	mv	a0,a5
80002b94:	8edfe0ef          	jal	ra,80001480 <vPortFree>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3339
		}
		#endif

		vPortFree( pxTCB );
80002b98:	fec42503          	lw	a0,-20(s0)
80002b9c:	8e5fe0ef          	jal	ra,80001480 <vPortFree>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3340
	}
80002ba0:	00000013          	nop
80002ba4:	01c12083          	lw	ra,28(sp)
80002ba8:	01812403          	lw	s0,24(sp)
80002bac:	02010113          	addi	sp,sp,32
80002bb0:	00008067          	ret

80002bb4 <prvResetNextTaskUnblockTime>:
prvResetNextTaskUnblockTime():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3346

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
80002bb4:	fe010113          	addi	sp,sp,-32
80002bb8:	00812e23          	sw	s0,28(sp)
80002bbc:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80002bc0:	9301a783          	lw	a5,-1744(gp) # 80007750 <pxDelayedTaskList>
80002bc4:	0007a783          	lw	a5,0(a5)
80002bc8:	00079663          	bnez	a5,80002bd4 <prvResetNextTaskUnblockTime+0x20>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 1)
80002bcc:	00100793          	li	a5,1
80002bd0:	0080006f          	j	80002bd8 <prvResetNextTaskUnblockTime+0x24>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 2)
80002bd4:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 4)
80002bd8:	00078863          	beqz	a5,80002be8 <prvResetNextTaskUnblockTime+0x34>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3355
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
80002bdc:	fff00713          	li	a4,-1
80002be0:	94e1ae23          	sw	a4,-1700(gp) # 8000777c <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
80002be4:	0200006f          	j	80002c04 <prvResetNextTaskUnblockTime+0x50>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3363
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80002be8:	9301a783          	lw	a5,-1744(gp) # 80007750 <pxDelayedTaskList>
80002bec:	00c7a783          	lw	a5,12(a5)
80002bf0:	00c7a783          	lw	a5,12(a5)
80002bf4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3364
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
80002bf8:	fec42783          	lw	a5,-20(s0)
80002bfc:	0047a703          	lw	a4,4(a5)
80002c00:	94e1ae23          	sw	a4,-1700(gp) # 8000777c <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
}
80002c04:	00000013          	nop
80002c08:	01c12403          	lw	s0,28(sp)
80002c0c:	02010113          	addi	sp,sp,32
80002c10:	00008067          	ret

80002c14 <xTaskGetCurrentTaskHandle>:
xTaskGetCurrentTaskHandle():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3372
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
80002c14:	fe010113          	addi	sp,sp,-32
80002c18:	00812e23          	sw	s0,28(sp)
80002c1c:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3378
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
80002c20:	92c1a783          	lw	a5,-1748(gp) # 8000774c <pxCurrentTCB>
80002c24:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3380

		return xReturn;
80002c28:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3381
	}
80002c2c:	00078513          	mv	a0,a5
80002c30:	01c12403          	lw	s0,28(sp)
80002c34:	02010113          	addi	sp,sp,32
80002c38:	00008067          	ret

80002c3c <PLIC_EnableIRQ>:
PLIC_EnableIRQ():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:154
{
80002c3c:	fd010113          	addi	sp,sp,-48
80002c40:	02812623          	sw	s0,44(sp)
80002c44:	03010413          	addi	s0,sp,48
80002c48:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:155
    unsigned long hart_id = read_csr(mhartid);
80002c4c:	f14027f3          	csrr	a5,mhartid
80002c50:	fef42623          	sw	a5,-20(s0)
80002c54:	fec42783          	lw	a5,-20(s0)
80002c58:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:156
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80002c5c:	40000737          	lui	a4,0x40000
80002c60:	fdc42783          	lw	a5,-36(s0)
80002c64:	0057d793          	srli	a5,a5,0x5
80002c68:	fe842683          	lw	a3,-24(s0)
80002c6c:	00569693          	slli	a3,a3,0x5
80002c70:	00f686b3          	add	a3,a3,a5
80002c74:	000017b7          	lui	a5,0x1
80002c78:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80002c7c:	00f687b3          	add	a5,a3,a5
80002c80:	00279793          	slli	a5,a5,0x2
80002c84:	00f707b3          	add	a5,a4,a5
80002c88:	0007a783          	lw	a5,0(a5)
80002c8c:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:157
    current |= (uint32_t)1 << (IRQn % 32);
80002c90:	fdc42783          	lw	a5,-36(s0)
80002c94:	01f7f793          	andi	a5,a5,31
80002c98:	00100713          	li	a4,1
80002c9c:	00f717b3          	sll	a5,a4,a5
80002ca0:	fe442703          	lw	a4,-28(s0)
80002ca4:	00f767b3          	or	a5,a4,a5
80002ca8:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:158
    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
80002cac:	40000737          	lui	a4,0x40000
80002cb0:	fdc42783          	lw	a5,-36(s0)
80002cb4:	0057d793          	srli	a5,a5,0x5
80002cb8:	fe842683          	lw	a3,-24(s0)
80002cbc:	00569693          	slli	a3,a3,0x5
80002cc0:	00f686b3          	add	a3,a3,a5
80002cc4:	000017b7          	lui	a5,0x1
80002cc8:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80002ccc:	00f687b3          	add	a5,a3,a5
80002cd0:	00279793          	slli	a5,a5,0x2
80002cd4:	00f707b3          	add	a5,a4,a5
80002cd8:	fe442703          	lw	a4,-28(s0)
80002cdc:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:159
}
80002ce0:	00000013          	nop
80002ce4:	02c12403          	lw	s0,44(sp)
80002ce8:	03010113          	addi	sp,sp,48
80002cec:	00008067          	ret

80002cf0 <PLIC_SetPriority>:
PLIC_SetPriority():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:188
{
80002cf0:	fe010113          	addi	sp,sp,-32
80002cf4:	00812e23          	sw	s0,28(sp)
80002cf8:	02010413          	addi	s0,sp,32
80002cfc:	fea42623          	sw	a0,-20(s0)
80002d00:	feb42423          	sw	a1,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:189
    PLIC->SOURCE_PRIORITY[IRQn] = priority;
80002d04:	40000737          	lui	a4,0x40000
80002d08:	fec42783          	lw	a5,-20(s0)
80002d0c:	00279793          	slli	a5,a5,0x2
80002d10:	00f707b3          	add	a5,a4,a5
80002d14:	fe842703          	lw	a4,-24(s0)
80002d18:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:190
}
80002d1c:	00000013          	nop
80002d20:	01c12403          	lw	s0,28(sp)
80002d24:	02010113          	addi	sp,sp,32
80002d28:	00008067          	ret

80002d2c <Chronos_init>:
Chronos_init():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:29

volatile unsigned int NI_IRCount;

////////////////////////////////////////////////////////////
// Initialize Chronos stuff
void Chronos_init(){
80002d2c:	ff010113          	addi	sp,sp,-16
80002d30:	00112623          	sw	ra,12(sp)
80002d34:	00812423          	sw	s0,8(sp)
80002d38:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:31
    //Informs the Router this tile ID, that is provided by Harness
    HW_set_32bit_reg(ROUTER_BASE, HW_get_32bit_reg(MY_ID)); 
80002d3c:	900007b7          	lui	a5,0x90000
80002d40:	ffc78513          	addi	a0,a5,-4 # 8ffffffc <__stack_top+0xffbe1ec>
80002d44:	a14fe0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
80002d48:	00050793          	mv	a5,a0
80002d4c:	00078593          	mv	a1,a5
80002d50:	50000537          	lui	a0,0x50000
80002d54:	9fcfe0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:34
    
    // Reads this processor address, calculated by the router
    ProcessorAddr = HW_get_32bit_reg(ROUTER_BASE);
80002d58:	50000537          	lui	a0,0x50000
80002d5c:	9fcfe0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
80002d60:	00050713          	mv	a4,a0
80002d64:	800227b7          	lui	a5,0x80022
80002d68:	e0e7a623          	sw	a4,-500(a5) # 80021e0c <__stack_top+0xfffdfffc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:37

    // Informs the PRINTER this tile address
    HW_set_32bit_reg(PRINTER_CHAR, getXpos(ProcessorAddr));
80002d6c:	800227b7          	lui	a5,0x80022
80002d70:	e0c7a783          	lw	a5,-500(a5) # 80021e0c <__stack_top+0xfffdfffc>
80002d74:	00078513          	mv	a0,a5
80002d78:	1e4000ef          	jal	ra,80002f5c <getXpos>
80002d7c:	00050793          	mv	a5,a0
80002d80:	00078593          	mv	a1,a5
80002d84:	500007b7          	lui	a5,0x50000
80002d88:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002d8c:	9c4fe0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:38
    HW_set_32bit_reg(PRINTER_CHAR, getYpos(ProcessorAddr));
80002d90:	800227b7          	lui	a5,0x80022
80002d94:	e0c7a783          	lw	a5,-500(a5) # 80021e0c <__stack_top+0xfffdfffc>
80002d98:	00078513          	mv	a0,a5
80002d9c:	1ec000ef          	jal	ra,80002f88 <getYpos>
80002da0:	00050793          	mv	a5,a0
80002da4:	00078593          	mv	a1,a5
80002da8:	500007b7          	lui	a5,0x50000
80002dac:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002db0:	9a0fe0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:46
    //NI_enable_irq(TX_RX);
    //NI_IRCount = 0;
    //NI_enable_irq(RX);

    // Informs the NI the address to store incoming packets
    HW_set_32bit_reg(NI_ADDR, (unsigned int)&incommingPacket.header);
80002db4:	800217b7          	lui	a5,0x80021
80002db8:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80002dbc:	00078593          	mv	a1,a5
80002dc0:	500007b7          	lui	a5,0x50000
80002dc4:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
80002dc8:	988fe0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:49
    
    // Initialize the TaskList
    API_TaskListInit();
80002dcc:	169020ef          	jal	ra,80005734 <API_TaskListInit>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:52

    // Initialize the Message & Service PIPE
    API_PipeInitialization();
80002dd0:	14c030ef          	jal	ra,80005f1c <API_PipeInitialization>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:53
    SendingQueue_front = 0;
80002dd4:	800217b7          	lui	a5,0x80021
80002dd8:	9a07ae23          	sw	zero,-1604(a5) # 800209bc <__stack_top+0xfffdebac>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:54
    SendingQueue_tail = 0;
80002ddc:	800217b7          	lui	a5,0x80021
80002de0:	9a07a223          	sw	zero,-1628(a5) # 800209a4 <__stack_top+0xfffdeb94>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:56

    return;
80002de4:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:57
}
80002de8:	00c12083          	lw	ra,12(sp)
80002dec:	00812403          	lw	s0,8(sp)
80002df0:	01010113          	addi	sp,sp,16
80002df4:	00008067          	ret

80002df8 <prints>:
prints():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:61

////////////////////////////////////////////////////////////
// Prints a string
void prints(char *text) {
80002df8:	fd010113          	addi	sp,sp,-48
80002dfc:	02112623          	sw	ra,44(sp)
80002e00:	02812423          	sw	s0,40(sp)
80002e04:	03010413          	addi	s0,sp,48
80002e08:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:62
    int i = 0;
80002e0c:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:64 (discriminator 1)
    do {
        HW_set_32bit_reg(PRINTER_CHAR, text[i]);
80002e10:	fec42783          	lw	a5,-20(s0)
80002e14:	fdc42703          	lw	a4,-36(s0)
80002e18:	00f707b3          	add	a5,a4,a5
80002e1c:	00078783          	lb	a5,0(a5)
80002e20:	00078593          	mv	a1,a5
80002e24:	500007b7          	lui	a5,0x50000
80002e28:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002e2c:	924fe0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:65 (discriminator 1)
        i++;
80002e30:	fec42783          	lw	a5,-20(s0)
80002e34:	00178793          	addi	a5,a5,1
80002e38:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:66 (discriminator 1)
    } while (text[i - 1] != '\0');
80002e3c:	fec42783          	lw	a5,-20(s0)
80002e40:	fff78793          	addi	a5,a5,-1
80002e44:	fdc42703          	lw	a4,-36(s0)
80002e48:	00f707b3          	add	a5,a4,a5
80002e4c:	00078783          	lb	a5,0(a5)
80002e50:	fc0790e3          	bnez	a5,80002e10 <prints+0x18>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:67
    return;
80002e54:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:68
}
80002e58:	02c12083          	lw	ra,44(sp)
80002e5c:	02812403          	lw	s0,40(sp)
80002e60:	03010113          	addi	sp,sp,48
80002e64:	00008067          	ret

80002e68 <printi>:
printi():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:72

////////////////////////////////////////////////////////////
// Prints an integer
void printi(int value) {
80002e68:	fe010113          	addi	sp,sp,-32
80002e6c:	00112e23          	sw	ra,28(sp)
80002e70:	00812c23          	sw	s0,24(sp)
80002e74:	02010413          	addi	s0,sp,32
80002e78:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:73
    HW_set_32bit_reg(PRINTER_INT, value);
80002e7c:	fec42783          	lw	a5,-20(s0)
80002e80:	00078593          	mv	a1,a5
80002e84:	500007b7          	lui	a5,0x50000
80002e88:	02478513          	addi	a0,a5,36 # 50000024 <RAM_SIZE+0x4ff80024>
80002e8c:	8c4fe0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:74
    return;
80002e90:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:75
}
80002e94:	01c12083          	lw	ra,28(sp)
80002e98:	01812403          	lw	s0,24(sp)
80002e9c:	02010113          	addi	sp,sp,32
80002ea0:	00008067          	ret

80002ea4 <printsv>:
printsv():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:79

////////////////////////////////////////////////////////////
// Prints a string followed by a integer
void printsv(char *text1, int value1) {
80002ea4:	fe010113          	addi	sp,sp,-32
80002ea8:	00112e23          	sw	ra,28(sp)
80002eac:	00812c23          	sw	s0,24(sp)
80002eb0:	02010413          	addi	s0,sp,32
80002eb4:	fea42623          	sw	a0,-20(s0)
80002eb8:	feb42423          	sw	a1,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:80
    vPortEnterCritical();
80002ebc:	f50fe0ef          	jal	ra,8000160c <vPortEnterCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:81
    prints(text1);
80002ec0:	fec42503          	lw	a0,-20(s0)
80002ec4:	f35ff0ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:82
    printi(value1);
80002ec8:	fe842503          	lw	a0,-24(s0)
80002ecc:	f9dff0ef          	jal	ra,80002e68 <printi>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:83
    prints("\n");
80002ed0:	800077b7          	lui	a5,0x80007
80002ed4:	f9078513          	addi	a0,a5,-112 # 80006f90 <__stack_top+0xfffc5180>
80002ed8:	f21ff0ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:84
    vPortExitCritical();
80002edc:	f64fe0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:85
    return;
80002ee0:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:86
}
80002ee4:	01c12083          	lw	ra,28(sp)
80002ee8:	01812403          	lw	s0,24(sp)
80002eec:	02010113          	addi	sp,sp,32
80002ef0:	00008067          	ret

80002ef4 <printsvsv>:
printsvsv():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:90

////////////////////////////////////////////////////////////
// Prints two strings and two integers interspersed
void printsvsv(char *text1, int value1, char *text2, int value2) {
80002ef4:	fe010113          	addi	sp,sp,-32
80002ef8:	00112e23          	sw	ra,28(sp)
80002efc:	00812c23          	sw	s0,24(sp)
80002f00:	02010413          	addi	s0,sp,32
80002f04:	fea42623          	sw	a0,-20(s0)
80002f08:	feb42423          	sw	a1,-24(s0)
80002f0c:	fec42223          	sw	a2,-28(s0)
80002f10:	fed42023          	sw	a3,-32(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:91
    vPortEnterCritical();
80002f14:	ef8fe0ef          	jal	ra,8000160c <vPortEnterCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:92
    prints(text1);
80002f18:	fec42503          	lw	a0,-20(s0)
80002f1c:	eddff0ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:93
    printi(value1);
80002f20:	fe842503          	lw	a0,-24(s0)
80002f24:	f45ff0ef          	jal	ra,80002e68 <printi>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:94
    prints(text2);
80002f28:	fe442503          	lw	a0,-28(s0)
80002f2c:	ecdff0ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:95
    printi(value2);
80002f30:	fe042503          	lw	a0,-32(s0)
80002f34:	f35ff0ef          	jal	ra,80002e68 <printi>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:96
    prints("\n");
80002f38:	800077b7          	lui	a5,0x80007
80002f3c:	f9078513          	addi	a0,a5,-112 # 80006f90 <__stack_top+0xfffc5180>
80002f40:	eb9ff0ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:97
    vPortExitCritical();
80002f44:	efcfe0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:98
    return;
80002f48:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:99
}
80002f4c:	01c12083          	lw	ra,28(sp)
80002f50:	01812403          	lw	s0,24(sp)
80002f54:	02010113          	addi	sp,sp,32
80002f58:	00008067          	ret

80002f5c <getXpos>:
getXpos():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:103

////////////////////////////////////////////////////////////
// Gets the X coordinate from the address
unsigned int getXpos(unsigned int addr) { return ((addr & 0x0000FF00) >> 8); }
80002f5c:	fe010113          	addi	sp,sp,-32
80002f60:	00812e23          	sw	s0,28(sp)
80002f64:	02010413          	addi	s0,sp,32
80002f68:	fea42623          	sw	a0,-20(s0)
80002f6c:	fec42783          	lw	a5,-20(s0)
80002f70:	0087d793          	srli	a5,a5,0x8
80002f74:	0ff7f793          	andi	a5,a5,255
80002f78:	00078513          	mv	a0,a5
80002f7c:	01c12403          	lw	s0,28(sp)
80002f80:	02010113          	addi	sp,sp,32
80002f84:	00008067          	ret

80002f88 <getYpos>:
getYpos():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:107

////////////////////////////////////////////////////////////
// Gets the Y coordinate from the address
unsigned int getYpos(unsigned int addr) { return (addr & 0x000000FF); }
80002f88:	fe010113          	addi	sp,sp,-32
80002f8c:	00812e23          	sw	s0,28(sp)
80002f90:	02010413          	addi	s0,sp,32
80002f94:	fea42623          	sw	a0,-20(s0)
80002f98:	fec42783          	lw	a5,-20(s0)
80002f9c:	0ff7f793          	andi	a5,a5,255
80002fa0:	00078513          	mv	a0,a5
80002fa4:	01c12403          	lw	s0,28(sp)
80002fa8:	02010113          	addi	sp,sp,32
80002fac:	00008067          	ret

80002fb0 <SendRaw>:
SendRaw():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:111

///////////////////////////////////////////////////////////////////
// Configure the NI to transmitt a given packet
void SendRaw(unsigned int addr) {
80002fb0:	fe010113          	addi	sp,sp,-32
80002fb4:	00112e23          	sw	ra,28(sp)
80002fb8:	00812c23          	sw	s0,24(sp)
80002fbc:	02010413          	addi	s0,sp,32
80002fc0:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:112
    HW_set_32bit_reg(NI_ADDR, addr);
80002fc4:	fec42583          	lw	a1,-20(s0)
80002fc8:	500007b7          	lui	a5,0x50000
80002fcc:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
80002fd0:	f81fd0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:113
    HW_set_32bit_reg(NI_TX, TX);
80002fd4:	000027b7          	lui	a5,0x2
80002fd8:	22278593          	addi	a1,a5,546 # 2222 <HEAP_SIZE-0xddde>
80002fdc:	500007b7          	lui	a5,0x50000
80002fe0:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80002fe4:	f6dfd0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:114
    return;
80002fe8:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:115
}
80002fec:	01c12083          	lw	ra,28(sp)
80002ff0:	01812403          	lw	s0,24(sp)
80002ff4:	02010113          	addi	sp,sp,32
80002ff8:	00008067          	ret

80002ffc <NI_enable_irq>:
NI_enable_irq():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:119

////////////////////////////////////////////////////////////
// Enables interruptions incomming from NI
void NI_enable_irq(int which){
80002ffc:	fe010113          	addi	sp,sp,-32
80003000:	00112e23          	sw	ra,28(sp)
80003004:	00812c23          	sw	s0,24(sp)
80003008:	02010413          	addi	s0,sp,32
8000300c:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:120
	if (which == TX || which == TX_RX){
80003010:	fec42703          	lw	a4,-20(s0)
80003014:	000027b7          	lui	a5,0x2
80003018:	22278793          	addi	a5,a5,546 # 2222 <HEAP_SIZE-0xddde>
8000301c:	00f70a63          	beq	a4,a5,80003030 <NI_enable_irq+0x34>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:120 (discriminator 1)
80003020:	fec42703          	lw	a4,-20(s0)
80003024:	000077b7          	lui	a5,0x7
80003028:	77778793          	addi	a5,a5,1911 # 7777 <HEAP_SIZE-0x8889>
8000302c:	00f71c63          	bne	a4,a5,80003044 <NI_enable_irq+0x48>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:121
        PLIC_EnableIRQ(NI_TX_IRQn);
80003030:	00100513          	li	a0,1
80003034:	c09ff0ef          	jal	ra,80002c3c <PLIC_EnableIRQ>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:122
        PLIC_SetPriority(NI_TX_IRQn, 1);
80003038:	00100593          	li	a1,1
8000303c:	00100513          	li	a0,1
80003040:	cb1ff0ef          	jal	ra,80002cf0 <PLIC_SetPriority>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:124
    }
    if (which == RX || which == TX_RX){
80003044:	fec42703          	lw	a4,-20(s0)
80003048:	000037b7          	lui	a5,0x3
8000304c:	33378793          	addi	a5,a5,819 # 3333 <HEAP_SIZE-0xcccd>
80003050:	00f70a63          	beq	a4,a5,80003064 <NI_enable_irq+0x68>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:124 (discriminator 1)
80003054:	fec42703          	lw	a4,-20(s0)
80003058:	000077b7          	lui	a5,0x7
8000305c:	77778793          	addi	a5,a5,1911 # 7777 <HEAP_SIZE-0x8889>
80003060:	00f71e63          	bne	a4,a5,8000307c <NI_enable_irq+0x80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:125
        PLIC_EnableIRQ(NI_RX_IRQn);
80003064:	00200513          	li	a0,2
80003068:	bd5ff0ef          	jal	ra,80002c3c <PLIC_EnableIRQ>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:126
        PLIC_SetPriority(NI_RX_IRQn, 2);
8000306c:	00200593          	li	a1,2
80003070:	00200513          	li	a0,2
80003074:	c7dff0ef          	jal	ra,80002cf0 <PLIC_SetPriority>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:128
    }
    return;
80003078:	00000013          	nop
8000307c:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:129
}
80003080:	01c12083          	lw	ra,28(sp)
80003084:	01812403          	lw	s0,24(sp)
80003088:	02010113          	addi	sp,sp,32
8000308c:	00008067          	ret

80003090 <External_1_IRQHandler>:
External_1_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:141
    return;
}

////////////////////////////////////////////////////////////
// Interruptions handler for TX
uint8_t External_1_IRQHandler(void){ 
80003090:	ff010113          	addi	sp,sp,-16
80003094:	00812623          	sw	s0,12(sp)
80003098:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:146
    /*prints("INTERRUPTION TX\n");
    API_ClearPipeSlot(SendingSlot);
    HW_set_32bit_reg(NI_TX, DONE);
    API_Try2Send();*/
    return 0;
8000309c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:147
}
800030a0:	00078513          	mv	a0,a5
800030a4:	00c12403          	lw	s0,12(sp)
800030a8:	01010113          	addi	sp,sp,16
800030ac:	00008067          	ret

800030b0 <External_2_IRQHandler>:
External_2_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:151

////////////////////////////////////////////////////////////
// Interruptions handler for RX
uint8_t External_2_IRQHandler(void){
800030b0:	ff010113          	addi	sp,sp,-16
800030b4:	00112623          	sw	ra,12(sp)
800030b8:	00812423          	sw	s0,8(sp)
800030bc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:152
    NI_IRCount++;
800030c0:	800227b7          	lui	a5,0x80022
800030c4:	d907a783          	lw	a5,-624(a5) # 80021d90 <__stack_top+0xfffdff80>
800030c8:	00178713          	addi	a4,a5,1
800030cc:	800227b7          	lui	a5,0x80022
800030d0:	d8e7a823          	sw	a4,-624(a5) # 80021d90 <__stack_top+0xfffdff80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:285
    //             break;
    //     }
    //     HW_set_32bit_reg(NI_RX, DONE);
    // }
    // prints("==========================\n");
    HW_set_32bit_reg(NI_RX, INTERRUPTION_ACK);
800030d4:	000017b7          	lui	a5,0x1
800030d8:	23478593          	addi	a1,a5,564 # 1234 <HEAP_SIZE-0xedcc>
800030dc:	500007b7          	lui	a5,0x50000
800030e0:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800030e4:	e6dfd0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:286
    return 0;
800030e8:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:287
}
800030ec:	00078513          	mv	a0,a5
800030f0:	00c12083          	lw	ra,12(sp)
800030f4:	00812403          	lw	s0,8(sp)
800030f8:	01010113          	addi	sp,sp,16
800030fc:	00008067          	ret

80003100 <mySwap>:
mySwap():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:292

////////////////////////////////////////////////////////////
// https://www.techiedelight.com/implement-itoa-function-in-c/
// Function to swap two numbers
void mySwap(char *x, char *y) {
80003100:	fd010113          	addi	sp,sp,-48
80003104:	02812623          	sw	s0,44(sp)
80003108:	03010413          	addi	s0,sp,48
8000310c:	fca42e23          	sw	a0,-36(s0)
80003110:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:293
    char t = *x; *x = *y; *y = t;
80003114:	fdc42783          	lw	a5,-36(s0)
80003118:	0007c783          	lbu	a5,0(a5)
8000311c:	fef407a3          	sb	a5,-17(s0)
80003120:	fd842783          	lw	a5,-40(s0)
80003124:	00078703          	lb	a4,0(a5)
80003128:	fdc42783          	lw	a5,-36(s0)
8000312c:	00e78023          	sb	a4,0(a5)
80003130:	fd842783          	lw	a5,-40(s0)
80003134:	fef44703          	lbu	a4,-17(s0)
80003138:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:294
}
8000313c:	00000013          	nop
80003140:	02c12403          	lw	s0,44(sp)
80003144:	03010113          	addi	sp,sp,48
80003148:	00008067          	ret

8000314c <reverse>:
reverse():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:296
// Function to reverse `buffer[i…j]`
char* reverse(char *buffer, int i, int j){
8000314c:	fe010113          	addi	sp,sp,-32
80003150:	00112e23          	sw	ra,28(sp)
80003154:	00812c23          	sw	s0,24(sp)
80003158:	02010413          	addi	s0,sp,32
8000315c:	fea42623          	sw	a0,-20(s0)
80003160:	feb42423          	sw	a1,-24(s0)
80003164:	fec42223          	sw	a2,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:297
    while (i < j) {
80003168:	0400006f          	j	800031a8 <reverse+0x5c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:298
        mySwap(&buffer[i++], &buffer[j--]);
8000316c:	fe842783          	lw	a5,-24(s0)
80003170:	00178713          	addi	a4,a5,1
80003174:	fee42423          	sw	a4,-24(s0)
80003178:	00078713          	mv	a4,a5
8000317c:	fec42783          	lw	a5,-20(s0)
80003180:	00e786b3          	add	a3,a5,a4
80003184:	fe442783          	lw	a5,-28(s0)
80003188:	fff78713          	addi	a4,a5,-1
8000318c:	fee42223          	sw	a4,-28(s0)
80003190:	00078713          	mv	a4,a5
80003194:	fec42783          	lw	a5,-20(s0)
80003198:	00e787b3          	add	a5,a5,a4
8000319c:	00078593          	mv	a1,a5
800031a0:	00068513          	mv	a0,a3
800031a4:	f5dff0ef          	jal	ra,80003100 <mySwap>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:297
    while (i < j) {
800031a8:	fe842703          	lw	a4,-24(s0)
800031ac:	fe442783          	lw	a5,-28(s0)
800031b0:	faf74ee3          	blt	a4,a5,8000316c <reverse+0x20>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:301
    }
 
    return buffer;
800031b4:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:302
}
800031b8:	00078513          	mv	a0,a5
800031bc:	01c12083          	lw	ra,28(sp)
800031c0:	01812403          	lw	s0,24(sp)
800031c4:	02010113          	addi	sp,sp,32
800031c8:	00008067          	ret

800031cc <myItoa>:
myItoa():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:304
// Iterative function to implement `itoa()` function in C
char* myItoa(int value, char* buffer, int base){
800031cc:	fd010113          	addi	sp,sp,-48
800031d0:	02112623          	sw	ra,44(sp)
800031d4:	02812423          	sw	s0,40(sp)
800031d8:	03010413          	addi	s0,sp,48
800031dc:	fca42e23          	sw	a0,-36(s0)
800031e0:	fcb42c23          	sw	a1,-40(s0)
800031e4:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:306
    // invalid input
    if (base < 2 || base > 32) {
800031e8:	fd442703          	lw	a4,-44(s0)
800031ec:	00100793          	li	a5,1
800031f0:	00e7d863          	ble	a4,a5,80003200 <myItoa+0x34>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:306 (discriminator 1)
800031f4:	fd442703          	lw	a4,-44(s0)
800031f8:	02000793          	li	a5,32
800031fc:	00e7d663          	ble	a4,a5,80003208 <myItoa+0x3c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:307
        return buffer;
80003200:	fd842783          	lw	a5,-40(s0)
80003204:	1540006f          	j	80003358 <myItoa+0x18c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:311
    }
    // consider the absolute value of the number
    int n;
    if (value < 0)
80003208:	fdc42783          	lw	a5,-36(s0)
8000320c:	0007da63          	bgez	a5,80003220 <myItoa+0x54>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:312
        n = value * -1;
80003210:	fdc42783          	lw	a5,-36(s0)
80003214:	40f007b3          	neg	a5,a5
80003218:	fef42623          	sw	a5,-20(s0)
8000321c:	00c0006f          	j	80003228 <myItoa+0x5c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:314
    else 
        n = value;
80003220:	fdc42783          	lw	a5,-36(s0)
80003224:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:316

    int i = 0;
80003228:	fe042423          	sw	zero,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:317
    while (n){
8000322c:	09c0006f          	j	800032c8 <myItoa+0xfc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:318
        int r = n % base;
80003230:	fec42703          	lw	a4,-20(s0)
80003234:	fd442783          	lw	a5,-44(s0)
80003238:	02f767b3          	rem	a5,a4,a5
8000323c:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:320
 
        if (r >= 10) {
80003240:	fe442703          	lw	a4,-28(s0)
80003244:	00900793          	li	a5,9
80003248:	02e7de63          	ble	a4,a5,80003284 <myItoa+0xb8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:321
            buffer[i++] = 65 + (r - 10);
8000324c:	fe442783          	lw	a5,-28(s0)
80003250:	0ff7f793          	andi	a5,a5,255
80003254:	03778793          	addi	a5,a5,55
80003258:	0ff7f693          	andi	a3,a5,255
8000325c:	fe842783          	lw	a5,-24(s0)
80003260:	00178713          	addi	a4,a5,1
80003264:	fee42423          	sw	a4,-24(s0)
80003268:	00078713          	mv	a4,a5
8000326c:	fd842783          	lw	a5,-40(s0)
80003270:	00e787b3          	add	a5,a5,a4
80003274:	01869713          	slli	a4,a3,0x18
80003278:	41875713          	srai	a4,a4,0x18
8000327c:	00e78023          	sb	a4,0(a5)
80003280:	0380006f          	j	800032b8 <myItoa+0xec>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:324
        }
        else {
            buffer[i++] = 48 + r;
80003284:	fe442783          	lw	a5,-28(s0)
80003288:	0ff7f793          	andi	a5,a5,255
8000328c:	03078793          	addi	a5,a5,48
80003290:	0ff7f693          	andi	a3,a5,255
80003294:	fe842783          	lw	a5,-24(s0)
80003298:	00178713          	addi	a4,a5,1
8000329c:	fee42423          	sw	a4,-24(s0)
800032a0:	00078713          	mv	a4,a5
800032a4:	fd842783          	lw	a5,-40(s0)
800032a8:	00e787b3          	add	a5,a5,a4
800032ac:	01869713          	slli	a4,a3,0x18
800032b0:	41875713          	srai	a4,a4,0x18
800032b4:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:327
        }
 
        n = n / base;
800032b8:	fec42703          	lw	a4,-20(s0)
800032bc:	fd442783          	lw	a5,-44(s0)
800032c0:	02f747b3          	div	a5,a4,a5
800032c4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:317
    while (n){
800032c8:	fec42783          	lw	a5,-20(s0)
800032cc:	f60792e3          	bnez	a5,80003230 <myItoa+0x64>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:330
    }
    // if the number is 0
    if (i == 0) {
800032d0:	fe842783          	lw	a5,-24(s0)
800032d4:	02079263          	bnez	a5,800032f8 <myItoa+0x12c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:331
        buffer[i++] = '0';
800032d8:	fe842783          	lw	a5,-24(s0)
800032dc:	00178713          	addi	a4,a5,1
800032e0:	fee42423          	sw	a4,-24(s0)
800032e4:	00078713          	mv	a4,a5
800032e8:	fd842783          	lw	a5,-40(s0)
800032ec:	00e787b3          	add	a5,a5,a4
800032f0:	03000713          	li	a4,48
800032f4:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:336
    }
    // If the base is 10 and the value is negative, the resulting string
    // is preceded with a minus sign (-)
    // With any other base, value is always considered unsigned
    if (value < 0 && base == 10) {
800032f8:	fdc42783          	lw	a5,-36(s0)
800032fc:	0207d863          	bgez	a5,8000332c <myItoa+0x160>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:336 (discriminator 1)
80003300:	fd442703          	lw	a4,-44(s0)
80003304:	00a00793          	li	a5,10
80003308:	02f71263          	bne	a4,a5,8000332c <myItoa+0x160>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:337
        buffer[i++] = '-';
8000330c:	fe842783          	lw	a5,-24(s0)
80003310:	00178713          	addi	a4,a5,1
80003314:	fee42423          	sw	a4,-24(s0)
80003318:	00078713          	mv	a4,a5
8000331c:	fd842783          	lw	a5,-40(s0)
80003320:	00e787b3          	add	a5,a5,a4
80003324:	02d00713          	li	a4,45
80003328:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:339
    }
    buffer[i] = '\0'; // null terminate string
8000332c:	fe842783          	lw	a5,-24(s0)
80003330:	fd842703          	lw	a4,-40(s0)
80003334:	00f707b3          	add	a5,a4,a5
80003338:	00078023          	sb	zero,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:341
    // reverse the string and return it
    return reverse(buffer, 0, i - 1);
8000333c:	fe842783          	lw	a5,-24(s0)
80003340:	fff78793          	addi	a5,a5,-1
80003344:	00078613          	mv	a2,a5
80003348:	00000593          	li	a1,0
8000334c:	fd842503          	lw	a0,-40(s0)
80003350:	dfdff0ef          	jal	ra,8000314c <reverse>
80003354:	00050793          	mv	a5,a0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:342
}
80003358:	00078513          	mv	a0,a5
8000335c:	02c12083          	lw	ra,44(sp)
80003360:	02812403          	lw	s0,40(sp)
80003364:	03010113          	addi	sp,sp,48
80003368:	00008067          	ret

8000336c <makeAddress>:
makeAddress():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:356
    return;
}

////////////////////////////////////////////////////////////
// Returns the PE address for a giver pair of coords
unsigned int makeAddress(unsigned int x, unsigned int y) {
8000336c:	fd010113          	addi	sp,sp,-48
80003370:	02812623          	sw	s0,44(sp)
80003374:	03010413          	addi	s0,sp,48
80003378:	fca42e23          	sw	a0,-36(s0)
8000337c:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:357
    unsigned int address = 0x00000000;
80003380:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:358
    return (address | (x << 8) | y);
80003384:	fdc42783          	lw	a5,-36(s0)
80003388:	00879713          	slli	a4,a5,0x8
8000338c:	fec42783          	lw	a5,-20(s0)
80003390:	00f76733          	or	a4,a4,a5
80003394:	fd842783          	lw	a5,-40(s0)
80003398:	00f767b3          	or	a5,a4,a5
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:359
}
8000339c:	00078513          	mv	a0,a5
800033a0:	02c12403          	lw	s0,44(sp)
800033a4:	03010113          	addi	sp,sp,48
800033a8:	00008067          	ret

800033ac <API_PushSendQueue>:
API_PushSendQueue():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:363

////////////////////////////////////////////////////////////
// Pushes one slot to the sending queue
void API_PushSendQueue(unsigned int type, unsigned int slot){
800033ac:	fe010113          	addi	sp,sp,-32
800033b0:	00112e23          	sw	ra,28(sp)
800033b4:	00812c23          	sw	s0,24(sp)
800033b8:	02010413          	addi	s0,sp,32
800033bc:	fea42623          	sw	a0,-20(s0)
800033c0:	feb42423          	sw	a1,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:364
    SendingQueue[SendingQueue_front] = type | slot;
800033c4:	800217b7          	lui	a5,0x80021
800033c8:	9bc7a683          	lw	a3,-1604(a5) # 800209bc <__stack_top+0xfffdebac>
800033cc:	fec42703          	lw	a4,-20(s0)
800033d0:	fe842783          	lw	a5,-24(s0)
800033d4:	00f76733          	or	a4,a4,a5
800033d8:	800217b7          	lui	a5,0x80021
800033dc:	00269693          	slli	a3,a3,0x2
800033e0:	98478793          	addi	a5,a5,-1660 # 80020984 <__stack_top+0xfffdeb74>
800033e4:	00f687b3          	add	a5,a3,a5
800033e8:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:365
    printsv("SendingQueue_front: ", SendingQueue_front);
800033ec:	800217b7          	lui	a5,0x80021
800033f0:	9bc7a783          	lw	a5,-1604(a5) # 800209bc <__stack_top+0xfffdebac>
800033f4:	00078593          	mv	a1,a5
800033f8:	800077b7          	lui	a5,0x80007
800033fc:	fbc78513          	addi	a0,a5,-68 # 80006fbc <__stack_top+0xfffc51ac>
80003400:	aa5ff0ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:366
    if(SendingQueue_front == (PIPE_SIZE*2)-1){
80003404:	800217b7          	lui	a5,0x80021
80003408:	9bc7a703          	lw	a4,-1604(a5) # 800209bc <__stack_top+0xfffdebac>
8000340c:	00700793          	li	a5,7
80003410:	00f71863          	bne	a4,a5,80003420 <API_PushSendQueue+0x74>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:367
        SendingQueue_front = 0;
80003414:	800217b7          	lui	a5,0x80021
80003418:	9a07ae23          	sw	zero,-1604(a5) # 800209bc <__stack_top+0xfffdebac>
8000341c:	0180006f          	j	80003434 <API_PushSendQueue+0x88>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:369
    } else {
        SendingQueue_front++;
80003420:	800217b7          	lui	a5,0x80021
80003424:	9bc7a783          	lw	a5,-1604(a5) # 800209bc <__stack_top+0xfffdebac>
80003428:	00178713          	addi	a4,a5,1
8000342c:	800217b7          	lui	a5,0x80021
80003430:	9ae7ae23          	sw	a4,-1604(a5) # 800209bc <__stack_top+0xfffdebac>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:371
    }
    API_Try2Send();
80003434:	0a4000ef          	jal	ra,800034d8 <API_Try2Send>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:372
    return;
80003438:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:373
}
8000343c:	01c12083          	lw	ra,28(sp)
80003440:	01812403          	lw	s0,24(sp)
80003444:	02010113          	addi	sp,sp,32
80003448:	00008067          	ret

8000344c <API_PopSendQueue>:
API_PopSendQueue():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:377

////////////////////////////////////////////////////////////
// Pushes one slot to the sending queue
unsigned int API_PopSendQueue(){
8000344c:	fe010113          	addi	sp,sp,-32
80003450:	00812e23          	sw	s0,28(sp)
80003454:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:379
    unsigned int element;
    if (SendingQueue_front == SendingQueue_tail){
80003458:	800217b7          	lui	a5,0x80021
8000345c:	9bc7a703          	lw	a4,-1604(a5) # 800209bc <__stack_top+0xfffdebac>
80003460:	800217b7          	lui	a5,0x80021
80003464:	9a47a783          	lw	a5,-1628(a5) # 800209a4 <__stack_top+0xfffdeb94>
80003468:	00f71663          	bne	a4,a5,80003474 <API_PopSendQueue+0x28>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:380
        return EMPTY;
8000346c:	303007b7          	lui	a5,0x30300
80003470:	0580006f          	j	800034c8 <API_PopSendQueue+0x7c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:382
    } else {
        element = SendingQueue[SendingQueue_tail];
80003474:	800217b7          	lui	a5,0x80021
80003478:	9a47a703          	lw	a4,-1628(a5) # 800209a4 <__stack_top+0xfffdeb94>
8000347c:	800217b7          	lui	a5,0x80021
80003480:	00271713          	slli	a4,a4,0x2
80003484:	98478793          	addi	a5,a5,-1660 # 80020984 <__stack_top+0xfffdeb74>
80003488:	00f707b3          	add	a5,a4,a5
8000348c:	0007a783          	lw	a5,0(a5)
80003490:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:383
        if (SendingQueue_tail == (PIPE_SIZE*2)-1){
80003494:	800217b7          	lui	a5,0x80021
80003498:	9a47a703          	lw	a4,-1628(a5) # 800209a4 <__stack_top+0xfffdeb94>
8000349c:	00700793          	li	a5,7
800034a0:	00f71863          	bne	a4,a5,800034b0 <API_PopSendQueue+0x64>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:384
            SendingQueue_tail = 0;
800034a4:	800217b7          	lui	a5,0x80021
800034a8:	9a07a223          	sw	zero,-1628(a5) # 800209a4 <__stack_top+0xfffdeb94>
800034ac:	0180006f          	j	800034c4 <API_PopSendQueue+0x78>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:386
        } else {
            SendingQueue_tail++;
800034b0:	800217b7          	lui	a5,0x80021
800034b4:	9a47a783          	lw	a5,-1628(a5) # 800209a4 <__stack_top+0xfffdeb94>
800034b8:	00178713          	addi	a4,a5,1
800034bc:	800217b7          	lui	a5,0x80021
800034c0:	9ae7a223          	sw	a4,-1628(a5) # 800209a4 <__stack_top+0xfffdeb94>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:388
        }
        return element;
800034c4:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:390
    }
}
800034c8:	00078513          	mv	a0,a5
800034cc:	01c12403          	lw	s0,28(sp)
800034d0:	02010113          	addi	sp,sp,32
800034d4:	00008067          	ret

800034d8 <API_Try2Send>:
API_Try2Send():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:394

////////////////////////////////////////////////////////////
// Try to send some packet! 
void API_Try2Send(){
800034d8:	fe010113          	addi	sp,sp,-32
800034dc:	00112e23          	sw	ra,28(sp)
800034e0:	00812c23          	sw	s0,24(sp)
800034e4:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:398
    unsigned int toSend;
    // Try to send the packet to NI if it's available
    // Checks if the NI is available to transmitt something
    vPortEnterCritical();
800034e8:	924fe0ef          	jal	ra,8000160c <vPortEnterCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:399
    if (HW_get_32bit_reg(NI_TX) == NI_STATUS_OFF){
800034ec:	500007b7          	lui	a5,0x50000
800034f0:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
800034f4:	a65fd0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
800034f8:	00050713          	mv	a4,a0
800034fc:	0ff00793          	li	a5,255
80003500:	0ef71663          	bne	a4,a5,800035ec <API_Try2Send+0x114>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:400
        toSend = API_PopSendQueue();
80003504:	f49ff0ef          	jal	ra,8000344c <API_PopSendQueue>
80003508:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:401
        if (toSend != EMPTY){
8000350c:	fec42703          	lw	a4,-20(s0)
80003510:	303007b7          	lui	a5,0x30300
80003514:	0af70a63          	beq	a4,a5,800035c8 <API_Try2Send+0xf0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:402
            SendingSlot = toSend;
80003518:	800217b7          	lui	a5,0x80021
8000351c:	fec42703          	lw	a4,-20(s0)
80003520:	84e7ac23          	sw	a4,-1960(a5) # 80020858 <__stack_top+0xfffdea48>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:403
            if((toSend & 0xFFFF0000) ==  SERVICE){
80003524:	fec42703          	lw	a4,-20(s0)
80003528:	ffff07b7          	lui	a5,0xffff0
8000352c:	00f77733          	and	a4,a4,a5
80003530:	101007b7          	lui	a5,0x10100
80003534:	04f71063          	bne	a4,a5,80003574 <API_Try2Send+0x9c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:404
                SendRaw((unsigned int)&ServicePipe[toSend & 0x0000FFFF].header);
80003538:	fec42703          	lw	a4,-20(s0)
8000353c:	000107b7          	lui	a5,0x10
80003540:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80003544:	00f77733          	and	a4,a4,a5
80003548:	00070793          	mv	a5,a4
8000354c:	00479793          	slli	a5,a5,0x4
80003550:	40e787b3          	sub	a5,a5,a4
80003554:	00279793          	slli	a5,a5,0x2
80003558:	80021737          	lui	a4,0x80021
8000355c:	85c70713          	addi	a4,a4,-1956 # 8002085c <__stack_top+0xfffdea4c>
80003560:	00e787b3          	add	a5,a5,a4
80003564:	00878793          	addi	a5,a5,8
80003568:	00078513          	mv	a0,a5
8000356c:	a45ff0ef          	jal	ra,80002fb0 <SendRaw>
80003570:	0480006f          	j	800035b8 <API_Try2Send+0xe0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:406
            }
            else if((toSend & 0xFFFF0000) ==  MESSAGE){
80003574:	fec42703          	lw	a4,-20(s0)
80003578:	ffff07b7          	lui	a5,0xffff0
8000357c:	00f77733          	and	a4,a4,a5
80003580:	202007b7          	lui	a5,0x20200
80003584:	02f71a63          	bne	a4,a5,800035b8 <API_Try2Send+0xe0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:407
                SendRaw((unsigned int)&MessagePipe[toSend & 0x0000FFFF].header);
80003588:	fec42703          	lw	a4,-20(s0)
8000358c:	000107b7          	lui	a5,0x10
80003590:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80003594:	00f77733          	and	a4,a4,a5
80003598:	24400793          	li	a5,580
8000359c:	02f70733          	mul	a4,a4,a5
800035a0:	800217b7          	lui	a5,0x80021
800035a4:	9c078793          	addi	a5,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
800035a8:	00f707b3          	add	a5,a4,a5
800035ac:	00c78793          	addi	a5,a5,12
800035b0:	00078513          	mv	a0,a5
800035b4:	9fdff0ef          	jal	ra,80002fb0 <SendRaw>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:409
            }
            prints("API_Try2Send success!\n");
800035b8:	800077b7          	lui	a5,0x80007
800035bc:	fd478513          	addi	a0,a5,-44 # 80006fd4 <__stack_top+0xfffc51c4>
800035c0:	839ff0ef          	jal	ra,80002df8 <prints>
800035c4:	0340006f          	j	800035f8 <API_Try2Send+0x120>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:411
        } else {
            HW_set_32bit_reg(NI_TX, RESET);
800035c8:	000097b7          	lui	a5,0x9
800035cc:	88878593          	addi	a1,a5,-1912 # 8888 <HEAP_SIZE-0x7778>
800035d0:	500007b7          	lui	a5,0x50000
800035d4:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
800035d8:	979fd0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:412
            prints("API_Try2Send failed - empty SendQueue!\n");
800035dc:	800077b7          	lui	a5,0x80007
800035e0:	fec78513          	addi	a0,a5,-20 # 80006fec <__stack_top+0xfffc51dc>
800035e4:	815ff0ef          	jal	ra,80002df8 <prints>
800035e8:	0100006f          	j	800035f8 <API_Try2Send+0x120>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:415
        }
    } else {
        prints("API_Try2Send failed - NI_TX occupied!\n");
800035ec:	800077b7          	lui	a5,0x80007
800035f0:	01478513          	addi	a0,a5,20 # 80007014 <__stack_top+0xfffc5204>
800035f4:	805ff0ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:417
    }
    vPortExitCritical();
800035f8:	848fe0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:418
    return;
800035fc:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:419
}
80003600:	01c12083          	lw	ra,28(sp)
80003604:	01812403          	lw	s0,24(sp)
80003608:	02010113          	addi	sp,sp,32
8000360c:	00008067          	ret

80003610 <API_AckTaskAllocation>:
API_AckTaskAllocation():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:421

void API_AckTaskAllocation(unsigned int task_id, unsigned int app_id){
80003610:	fd010113          	addi	sp,sp,-48
80003614:	02112623          	sw	ra,44(sp)
80003618:	02812423          	sw	s0,40(sp)
8000361c:	03010413          	addi	s0,sp,48
80003620:	fca42e23          	sw	a0,-36(s0)
80003624:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:424
    unsigned int mySlot;
    do{
        vPortEnterCritical();
80003628:	fe5fd0ef          	jal	ra,8000160c <vPortEnterCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:425
        mySlot = API_GetServiceSlot();
8000362c:	2e5020ef          	jal	ra,80006110 <API_GetServiceSlot>
80003630:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:426
        if(mySlot == PIPE_FULL){
80003634:	fec42703          	lw	a4,-20(s0)
80003638:	fdfe07b7          	lui	a5,0xfdfe0
8000363c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9dfed>
80003640:	00f71463          	bne	a4,a5,80003648 <API_AckTaskAllocation+0x38>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:427
            vPortExitCritical();
80003644:	ffdfd0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:438
            //     API_Try2Send();
            // }
            // vPortExitCritical();
            //asm("wfi");
        }
    }while(mySlot == PIPE_FULL);
80003648:	fec42703          	lw	a4,-20(s0)
8000364c:	fdfe07b7          	lui	a5,0xfdfe0
80003650:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9dfed>
80003654:	fcf70ae3          	beq	a4,a5,80003628 <API_AckTaskAllocation+0x18>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:440

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80003658:	800217b7          	lui	a5,0x80021
8000365c:	fec42703          	lw	a4,-20(s0)
80003660:	85c78693          	addi	a3,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
80003664:	00070793          	mv	a5,a4
80003668:	00479793          	slli	a5,a5,0x4
8000366c:	40e787b3          	sub	a5,a5,a4
80003670:	00279793          	slli	a5,a5,0x2
80003674:	00f687b3          	add	a5,a3,a5
80003678:	feff0737          	lui	a4,0xfeff0
8000367c:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efae0ee>
80003680:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:442

    ServicePipe[mySlot].header.header           = makeAddress(0, 0);
80003684:	00000593          	li	a1,0
80003688:	00000513          	li	a0,0
8000368c:	ce1ff0ef          	jal	ra,8000336c <makeAddress>
80003690:	00050613          	mv	a2,a0
80003694:	800217b7          	lui	a5,0x80021
80003698:	fec42703          	lw	a4,-20(s0)
8000369c:	85c78693          	addi	a3,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
800036a0:	00070793          	mv	a5,a4
800036a4:	00479793          	slli	a5,a5,0x4
800036a8:	40e787b3          	sub	a5,a5,a4
800036ac:	00279793          	slli	a5,a5,0x2
800036b0:	00f687b3          	add	a5,a3,a5
800036b4:	00c7a423          	sw	a2,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:443
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
800036b8:	800217b7          	lui	a5,0x80021
800036bc:	fec42703          	lw	a4,-20(s0)
800036c0:	85c78693          	addi	a3,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
800036c4:	00070793          	mv	a5,a4
800036c8:	00479793          	slli	a5,a5,0x4
800036cc:	40e787b3          	sub	a5,a5,a4
800036d0:	00279793          	slli	a5,a5,0x2
800036d4:	00f687b3          	add	a5,a3,a5
800036d8:	00b00713          	li	a4,11
800036dc:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:444
    ServicePipe[mySlot].header.service          = TASK_ALLOCATION_SUCCESS;
800036e0:	800217b7          	lui	a5,0x80021
800036e4:	fec42703          	lw	a4,-20(s0)
800036e8:	85c78693          	addi	a3,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
800036ec:	00070793          	mv	a5,a4
800036f0:	00479793          	slli	a5,a5,0x4
800036f4:	40e787b3          	sub	a5,a5,a4
800036f8:	00279793          	slli	a5,a5,0x2
800036fc:	00f687b3          	add	a5,a3,a5
80003700:	03500713          	li	a4,53
80003704:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:445
    ServicePipe[mySlot].header.task_id          = task_id;
80003708:	800217b7          	lui	a5,0x80021
8000370c:	fec42703          	lw	a4,-20(s0)
80003710:	85c78693          	addi	a3,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
80003714:	00070793          	mv	a5,a4
80003718:	00479793          	slli	a5,a5,0x4
8000371c:	40e787b3          	sub	a5,a5,a4
80003720:	00279793          	slli	a5,a5,0x2
80003724:	00f687b3          	add	a5,a3,a5
80003728:	fdc42703          	lw	a4,-36(s0)
8000372c:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:446
    ServicePipe[mySlot].header.task_app_id      = app_id;
80003730:	800217b7          	lui	a5,0x80021
80003734:	fec42703          	lw	a4,-20(s0)
80003738:	85c78693          	addi	a3,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
8000373c:	00070793          	mv	a5,a4
80003740:	00479793          	slli	a5,a5,0x4
80003744:	40e787b3          	sub	a5,a5,a4
80003748:	00279793          	slli	a5,a5,0x2
8000374c:	00f687b3          	add	a5,a3,a5
80003750:	fd842703          	lw	a4,-40(s0)
80003754:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:448

    API_PushSendQueue(SERVICE, mySlot);
80003758:	fec42583          	lw	a1,-20(s0)
8000375c:	10100537          	lui	a0,0x10100
80003760:	c4dff0ef          	jal	ra,800033ac <API_PushSendQueue>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:449
    vPortExitCritical();
80003764:	eddfd0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:450
    return;    
80003768:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:451
}
8000376c:	02c12083          	lw	ra,44(sp)
80003770:	02812403          	lw	s0,40(sp)
80003774:	03010113          	addi	sp,sp,48
80003778:	00008067          	ret

8000377c <API_SendMessage>:
API_SendMessage():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:453

void API_SendMessage(unsigned int addr, unsigned int taskID){
8000377c:	fd010113          	addi	sp,sp,-48
80003780:	02112623          	sw	ra,44(sp)
80003784:	02812423          	sw	s0,40(sp)
80003788:	03010413          	addi	s0,sp,48
8000378c:	fca42e23          	sw	a0,-36(s0)
80003790:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:459
    unsigned int mySlot;
    unsigned int taskSlot;
    unsigned int i;
    Message *theMessage;
    do{
        vPortEnterCritical();
80003794:	e79fd0ef          	jal	ra,8000160c <vPortEnterCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:460
        mySlot = API_GetMessageSlot();
80003798:	02d020ef          	jal	ra,80005fc4 <API_GetMessageSlot>
8000379c:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:461
        if(mySlot == PIPE_FULL){
800037a0:	fe842703          	lw	a4,-24(s0)
800037a4:	fdfe07b7          	lui	a5,0xfdfe0
800037a8:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9dfed>
800037ac:	00f71463          	bne	a4,a5,800037b4 <API_SendMessage+0x38>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:462
            vPortExitCritical();
800037b0:	e91fd0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:473
            //     API_Try2Send();
            // }
            // vPortExitCritical();
            //asm("wfi");
        }
    }while(mySlot == PIPE_FULL);
800037b4:	fe842703          	lw	a4,-24(s0)
800037b8:	fdfe07b7          	lui	a5,0xfdfe0
800037bc:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9dfed>
800037c0:	fcf70ae3          	beq	a4,a5,80003794 <API_SendMessage+0x18>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:475
    
    theMessage = addr;
800037c4:	fdc42783          	lw	a5,-36(s0)
800037c8:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:477

    taskSlot = API_GetCurrentTaskSlot();
800037cc:	018020ef          	jal	ra,800057e4 <API_GetCurrentTaskSlot>
800037d0:	fea42023          	sw	a0,-32(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:478
    printsvsv("Adding a msg to task ", taskID, " in the PIPE slot ", mySlot);
800037d4:	fd842703          	lw	a4,-40(s0)
800037d8:	fe842783          	lw	a5,-24(s0)
800037dc:	00078693          	mv	a3,a5
800037e0:	800077b7          	lui	a5,0x80007
800037e4:	03c78613          	addi	a2,a5,60 # 8000703c <__stack_top+0xfffc522c>
800037e8:	00070593          	mv	a1,a4
800037ec:	800077b7          	lui	a5,0x80007
800037f0:	05078513          	addi	a0,a5,80 # 80007050 <__stack_top+0xfffc5240>
800037f4:	f00ff0ef          	jal	ra,80002ef4 <printsvsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:479
    MessagePipe[mySlot].holder = taskSlot;
800037f8:	800217b7          	lui	a5,0x80021
800037fc:	fe842683          	lw	a3,-24(s0)
80003800:	9c078713          	addi	a4,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
80003804:	24400793          	li	a5,580
80003808:	02f687b3          	mul	a5,a3,a5
8000380c:	00f707b3          	add	a5,a4,a5
80003810:	fe042703          	lw	a4,-32(s0)
80003814:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:481

    MessagePipe[mySlot].header.header           = TaskList[taskSlot].TasksMap[taskID];
80003818:	800226b7          	lui	a3,0x80022
8000381c:	fe042703          	lw	a4,-32(s0)
80003820:	00070793          	mv	a5,a4
80003824:	00579793          	slli	a5,a5,0x5
80003828:	00e787b3          	add	a5,a5,a4
8000382c:	fd842703          	lw	a4,-40(s0)
80003830:	00e787b3          	add	a5,a5,a4
80003834:	01478793          	addi	a5,a5,20
80003838:	a7868713          	addi	a4,a3,-1416 # 80021a78 <__stack_top+0xfffdfc68>
8000383c:	00279793          	slli	a5,a5,0x2
80003840:	00f707b3          	add	a5,a4,a5
80003844:	00c7a703          	lw	a4,12(a5)
80003848:	800217b7          	lui	a5,0x80021
8000384c:	fe842603          	lw	a2,-24(s0)
80003850:	9c078693          	addi	a3,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
80003854:	24400793          	li	a5,580
80003858:	02f607b3          	mul	a5,a2,a5
8000385c:	00f687b3          	add	a5,a3,a5
80003860:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:482
    MessagePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE + theMessage->length + 1;
80003864:	fe442783          	lw	a5,-28(s0)
80003868:	0007a783          	lw	a5,0(a5)
8000386c:	00c78713          	addi	a4,a5,12
80003870:	800217b7          	lui	a5,0x80021
80003874:	fe842603          	lw	a2,-24(s0)
80003878:	9c078693          	addi	a3,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
8000387c:	24400793          	li	a5,580
80003880:	02f607b3          	mul	a5,a2,a5
80003884:	00f687b3          	add	a5,a3,a5
80003888:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:483
    MessagePipe[mySlot].header.service          = MESSAGE_DELIVERY;
8000388c:	800217b7          	lui	a5,0x80021
80003890:	fe842683          	lw	a3,-24(s0)
80003894:	9c078713          	addi	a4,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
80003898:	24400793          	li	a5,580
8000389c:	02f687b3          	mul	a5,a3,a5
800038a0:	00f707b3          	add	a5,a4,a5
800038a4:	02000713          	li	a4,32
800038a8:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:484
    MessagePipe[mySlot].header.application_id   = TaskList[taskSlot].AppID;
800038ac:	800227b7          	lui	a5,0x80022
800038b0:	fe042703          	lw	a4,-32(s0)
800038b4:	a7878693          	addi	a3,a5,-1416 # 80021a78 <__stack_top+0xfffdfc68>
800038b8:	00070793          	mv	a5,a4
800038bc:	00579793          	slli	a5,a5,0x5
800038c0:	00e787b3          	add	a5,a5,a4
800038c4:	00279793          	slli	a5,a5,0x2
800038c8:	00f687b3          	add	a5,a3,a5
800038cc:	0147a703          	lw	a4,20(a5)
800038d0:	800217b7          	lui	a5,0x80021
800038d4:	fe842603          	lw	a2,-24(s0)
800038d8:	9c078693          	addi	a3,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
800038dc:	24400793          	li	a5,580
800038e0:	02f607b3          	mul	a5,a2,a5
800038e4:	00f687b3          	add	a5,a3,a5
800038e8:	00e7ac23          	sw	a4,24(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:485
    MessagePipe[mySlot].header.producer_task    = TaskList[taskSlot].TaskID;
800038ec:	800226b7          	lui	a3,0x80022
800038f0:	fe042703          	lw	a4,-32(s0)
800038f4:	00070793          	mv	a5,a4
800038f8:	00579793          	slli	a5,a5,0x5
800038fc:	00e787b3          	add	a5,a5,a4
80003900:	00279793          	slli	a5,a5,0x2
80003904:	a7868713          	addi	a4,a3,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80003908:	00e787b3          	add	a5,a5,a4
8000390c:	0107a703          	lw	a4,16(a5)
80003910:	800217b7          	lui	a5,0x80021
80003914:	fe842603          	lw	a2,-24(s0)
80003918:	9c078693          	addi	a3,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
8000391c:	24400793          	li	a5,580
80003920:	02f607b3          	mul	a5,a2,a5
80003924:	00f687b3          	add	a5,a3,a5
80003928:	00e7ae23          	sw	a4,28(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:486
    MessagePipe[mySlot].header.destination_task = taskID;
8000392c:	800217b7          	lui	a5,0x80021
80003930:	fe842683          	lw	a3,-24(s0)
80003934:	9c078713          	addi	a4,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
80003938:	24400793          	li	a5,580
8000393c:	02f687b3          	mul	a5,a3,a5
80003940:	00f707b3          	add	a5,a4,a5
80003944:	fd842703          	lw	a4,-40(s0)
80003948:	02e7a023          	sw	a4,32(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:487
    MessagePipe[mySlot].msg.length              = theMessage->length;
8000394c:	fe442783          	lw	a5,-28(s0)
80003950:	0007a703          	lw	a4,0(a5)
80003954:	800217b7          	lui	a5,0x80021
80003958:	fe842603          	lw	a2,-24(s0)
8000395c:	24400693          	li	a3,580
80003960:	02d606b3          	mul	a3,a2,a3
80003964:	9c078793          	addi	a5,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
80003968:	00f687b3          	add	a5,a3,a5
8000396c:	04e7a023          	sw	a4,64(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:488
    for (i = 0; i < theMessage->length; i++){
80003970:	fe042623          	sw	zero,-20(s0)
80003974:	05c0006f          	j	800039d0 <API_SendMessage+0x254>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:489 (discriminator 3)
        MessagePipe[mySlot].msg.msg[i]          = theMessage->msg[i];
80003978:	fe442703          	lw	a4,-28(s0)
8000397c:	fec42783          	lw	a5,-20(s0)
80003980:	00279793          	slli	a5,a5,0x2
80003984:	00f707b3          	add	a5,a4,a5
80003988:	0047a683          	lw	a3,4(a5)
8000398c:	80021637          	lui	a2,0x80021
80003990:	fe842703          	lw	a4,-24(s0)
80003994:	00070793          	mv	a5,a4
80003998:	00379793          	slli	a5,a5,0x3
8000399c:	00e787b3          	add	a5,a5,a4
800039a0:	00479793          	slli	a5,a5,0x4
800039a4:	00e787b3          	add	a5,a5,a4
800039a8:	fec42703          	lw	a4,-20(s0)
800039ac:	00e787b3          	add	a5,a5,a4
800039b0:	01078793          	addi	a5,a5,16
800039b4:	9c060713          	addi	a4,a2,-1600 # 800209c0 <__stack_top+0xfffdebb0>
800039b8:	00279793          	slli	a5,a5,0x2
800039bc:	00f707b3          	add	a5,a4,a5
800039c0:	00d7a223          	sw	a3,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:488 (discriminator 3)
    for (i = 0; i < theMessage->length; i++){
800039c4:	fec42783          	lw	a5,-20(s0)
800039c8:	00178793          	addi	a5,a5,1
800039cc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:488 (discriminator 1)
800039d0:	fe442783          	lw	a5,-28(s0)
800039d4:	0007a783          	lw	a5,0(a5)
800039d8:	fec42703          	lw	a4,-20(s0)
800039dc:	f8f76ee3          	bltu	a4,a5,80003978 <API_SendMessage+0x1fc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:492
    }
    
    if (TaskList[taskSlot].PendingReq[taskID] == TRUE){
800039e0:	800226b7          	lui	a3,0x80022
800039e4:	fe042703          	lw	a4,-32(s0)
800039e8:	00070793          	mv	a5,a4
800039ec:	00579793          	slli	a5,a5,0x5
800039f0:	00e787b3          	add	a5,a5,a4
800039f4:	fd842703          	lw	a4,-40(s0)
800039f8:	00e787b3          	add	a5,a5,a4
800039fc:	00c78793          	addi	a5,a5,12
80003a00:	00279713          	slli	a4,a5,0x2
80003a04:	a7868793          	addi	a5,a3,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80003a08:	00f707b3          	add	a5,a4,a5
80003a0c:	0007a703          	lw	a4,0(a5)
80003a10:	00100793          	li	a5,1
80003a14:	04f71663          	bne	a4,a5,80003a60 <API_SendMessage+0x2e4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:493
        prints(">>>>>Achei aqui no pending!\n");
80003a18:	800077b7          	lui	a5,0x80007
80003a1c:	06878513          	addi	a0,a5,104 # 80007068 <__stack_top+0xfffc5258>
80003a20:	bd8ff0ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:494
        API_PushSendQueue(MESSAGE, mySlot);
80003a24:	fe842583          	lw	a1,-24(s0)
80003a28:	20200537          	lui	a0,0x20200
80003a2c:	981ff0ef          	jal	ra,800033ac <API_PushSendQueue>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:495
        TaskList[taskSlot].PendingReq[taskID] = FALSE;
80003a30:	800226b7          	lui	a3,0x80022
80003a34:	fe042703          	lw	a4,-32(s0)
80003a38:	00070793          	mv	a5,a4
80003a3c:	00579793          	slli	a5,a5,0x5
80003a40:	00e787b3          	add	a5,a5,a4
80003a44:	fd842703          	lw	a4,-40(s0)
80003a48:	00e787b3          	add	a5,a5,a4
80003a4c:	00c78793          	addi	a5,a5,12
80003a50:	00279713          	slli	a4,a5,0x2
80003a54:	a7868793          	addi	a5,a3,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80003a58:	00f707b3          	add	a5,a4,a5
80003a5c:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:497
    }
    vPortExitCritical();
80003a60:	be1fd0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:498
    return;
80003a64:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:499
}
80003a68:	02c12083          	lw	ra,44(sp)
80003a6c:	02812403          	lw	s0,40(sp)
80003a70:	03010113          	addi	sp,sp,48
80003a74:	00008067          	ret

80003a78 <API_SendFinishTask>:
API_SendFinishTask():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:501

void API_SendFinishTask(unsigned int task_id, unsigned int app_id){
80003a78:	fd010113          	addi	sp,sp,-48
80003a7c:	02112623          	sw	ra,44(sp)
80003a80:	02812423          	sw	s0,40(sp)
80003a84:	03010413          	addi	s0,sp,48
80003a88:	fca42e23          	sw	a0,-36(s0)
80003a8c:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:504
    unsigned int mySlot;
    do{
        vPortEnterCritical();
80003a90:	b7dfd0ef          	jal	ra,8000160c <vPortEnterCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:505
        mySlot = API_GetServiceSlot();
80003a94:	67c020ef          	jal	ra,80006110 <API_GetServiceSlot>
80003a98:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:506
        if(mySlot == PIPE_FULL){
80003a9c:	fec42703          	lw	a4,-20(s0)
80003aa0:	fdfe07b7          	lui	a5,0xfdfe0
80003aa4:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9dfed>
80003aa8:	00f71463          	bne	a4,a5,80003ab0 <API_SendFinishTask+0x38>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:507
            vPortExitCritical();
80003aac:	b95fd0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:518
            //     API_Try2Send();
            // }
            // vPortExitCritical();
            //asm("wfi");
        }
    }while(mySlot == PIPE_FULL);
80003ab0:	fec42703          	lw	a4,-20(s0)
80003ab4:	fdfe07b7          	lui	a5,0xfdfe0
80003ab8:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9dfed>
80003abc:	fcf70ae3          	beq	a4,a5,80003a90 <API_SendFinishTask+0x18>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:520

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80003ac0:	800217b7          	lui	a5,0x80021
80003ac4:	fec42703          	lw	a4,-20(s0)
80003ac8:	85c78693          	addi	a3,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
80003acc:	00070793          	mv	a5,a4
80003ad0:	00479793          	slli	a5,a5,0x4
80003ad4:	40e787b3          	sub	a5,a5,a4
80003ad8:	00279793          	slli	a5,a5,0x2
80003adc:	00f687b3          	add	a5,a3,a5
80003ae0:	feff0737          	lui	a4,0xfeff0
80003ae4:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efae0ee>
80003ae8:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:522

    ServicePipe[mySlot].header.header           = makeAddress(0, 0);
80003aec:	00000593          	li	a1,0
80003af0:	00000513          	li	a0,0
80003af4:	879ff0ef          	jal	ra,8000336c <makeAddress>
80003af8:	00050613          	mv	a2,a0
80003afc:	800217b7          	lui	a5,0x80021
80003b00:	fec42703          	lw	a4,-20(s0)
80003b04:	85c78693          	addi	a3,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
80003b08:	00070793          	mv	a5,a4
80003b0c:	00479793          	slli	a5,a5,0x4
80003b10:	40e787b3          	sub	a5,a5,a4
80003b14:	00279793          	slli	a5,a5,0x2
80003b18:	00f687b3          	add	a5,a3,a5
80003b1c:	00c7a423          	sw	a2,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:523
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80003b20:	800217b7          	lui	a5,0x80021
80003b24:	fec42703          	lw	a4,-20(s0)
80003b28:	85c78693          	addi	a3,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
80003b2c:	00070793          	mv	a5,a4
80003b30:	00479793          	slli	a5,a5,0x4
80003b34:	40e787b3          	sub	a5,a5,a4
80003b38:	00279793          	slli	a5,a5,0x2
80003b3c:	00f687b3          	add	a5,a3,a5
80003b40:	00b00713          	li	a4,11
80003b44:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:524
    ServicePipe[mySlot].header.service          = TASK_FINISH;
80003b48:	800217b7          	lui	a5,0x80021
80003b4c:	fec42703          	lw	a4,-20(s0)
80003b50:	85c78693          	addi	a3,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
80003b54:	00070793          	mv	a5,a4
80003b58:	00479793          	slli	a5,a5,0x4
80003b5c:	40e787b3          	sub	a5,a5,a4
80003b60:	00279793          	slli	a5,a5,0x2
80003b64:	00f687b3          	add	a5,a3,a5
80003b68:	50000713          	li	a4,1280
80003b6c:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:525
    ServicePipe[mySlot].header.task_id          = task_id;
80003b70:	800217b7          	lui	a5,0x80021
80003b74:	fec42703          	lw	a4,-20(s0)
80003b78:	85c78693          	addi	a3,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
80003b7c:	00070793          	mv	a5,a4
80003b80:	00479793          	slli	a5,a5,0x4
80003b84:	40e787b3          	sub	a5,a5,a4
80003b88:	00279793          	slli	a5,a5,0x2
80003b8c:	00f687b3          	add	a5,a3,a5
80003b90:	fdc42703          	lw	a4,-36(s0)
80003b94:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:526
    ServicePipe[mySlot].header.task_app_id      = app_id;
80003b98:	800217b7          	lui	a5,0x80021
80003b9c:	fec42703          	lw	a4,-20(s0)
80003ba0:	85c78693          	addi	a3,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
80003ba4:	00070793          	mv	a5,a4
80003ba8:	00479793          	slli	a5,a5,0x4
80003bac:	40e787b3          	sub	a5,a5,a4
80003bb0:	00279793          	slli	a5,a5,0x2
80003bb4:	00f687b3          	add	a5,a3,a5
80003bb8:	fd842703          	lw	a4,-40(s0)
80003bbc:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:527
    ServicePipe[mySlot].header.task_dest_addr   = ProcessorAddr;
80003bc0:	800227b7          	lui	a5,0x80022
80003bc4:	e0c7a683          	lw	a3,-500(a5) # 80021e0c <__stack_top+0xfffdfffc>
80003bc8:	800217b7          	lui	a5,0x80021
80003bcc:	fec42703          	lw	a4,-20(s0)
80003bd0:	85c78613          	addi	a2,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
80003bd4:	00070793          	mv	a5,a4
80003bd8:	00479793          	slli	a5,a5,0x4
80003bdc:	40e787b3          	sub	a5,a5,a4
80003be0:	00279793          	slli	a5,a5,0x2
80003be4:	00f607b3          	add	a5,a2,a5
80003be8:	02d7ac23          	sw	a3,56(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:528
    API_PushSendQueue(SERVICE, mySlot);
80003bec:	fec42583          	lw	a1,-20(s0)
80003bf0:	10100537          	lui	a0,0x10100
80003bf4:	fb8ff0ef          	jal	ra,800033ac <API_PushSendQueue>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:529
    vPortExitCritical();
80003bf8:	a49fd0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:530
    return;    
80003bfc:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:531
}
80003c00:	02c12083          	lw	ra,44(sp)
80003c04:	02812403          	lw	s0,40(sp)
80003c08:	03010113          	addi	sp,sp,48
80003c0c:	00008067          	ret

80003c10 <API_SendMessageReq>:
API_SendMessageReq():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:533

void API_SendMessageReq(unsigned int addr, unsigned int taskID){
80003c10:	fd010113          	addi	sp,sp,-48
80003c14:	02112623          	sw	ra,44(sp)
80003c18:	02812423          	sw	s0,40(sp)
80003c1c:	03010413          	addi	s0,sp,48
80003c20:	fca42e23          	sw	a0,-36(s0)
80003c24:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:538
    unsigned int taskSlot;
    unsigned int mySlot;

    // Update task info
    taskSlot = API_GetCurrentTaskSlot();
80003c28:	3bd010ef          	jal	ra,800057e4 <API_GetCurrentTaskSlot>
80003c2c:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:539
    TaskList[taskSlot].waitingMsg = TRUE;
80003c30:	800227b7          	lui	a5,0x80022
80003c34:	fec42703          	lw	a4,-20(s0)
80003c38:	a7878693          	addi	a3,a5,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80003c3c:	00070793          	mv	a5,a4
80003c40:	00579793          	slli	a5,a5,0x5
80003c44:	00e787b3          	add	a5,a5,a4
80003c48:	00279793          	slli	a5,a5,0x2
80003c4c:	00f687b3          	add	a5,a3,a5
80003c50:	00100713          	li	a4,1
80003c54:	00e7ae23          	sw	a4,28(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:540
    TaskList[taskSlot].MsgToReceive = addr;
80003c58:	800226b7          	lui	a3,0x80022
80003c5c:	fec42703          	lw	a4,-20(s0)
80003c60:	00070793          	mv	a5,a4
80003c64:	00579793          	slli	a5,a5,0x5
80003c68:	00e787b3          	add	a5,a5,a4
80003c6c:	00279793          	slli	a5,a5,0x2
80003c70:	a7868713          	addi	a4,a3,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80003c74:	00e787b3          	add	a5,a5,a4
80003c78:	fdc42703          	lw	a4,-36(s0)
80003c7c:	02e7a023          	sw	a4,32(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:545
    //printsv("API_SendMessageReq addr: ", addr);

    // Sends the message request
    do{
        vPortEnterCritical();
80003c80:	98dfd0ef          	jal	ra,8000160c <vPortEnterCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:546
        mySlot = API_GetServiceSlot();
80003c84:	48c020ef          	jal	ra,80006110 <API_GetServiceSlot>
80003c88:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:547
        if(mySlot == PIPE_FULL){
80003c8c:	fe842703          	lw	a4,-24(s0)
80003c90:	fdfe07b7          	lui	a5,0xfdfe0
80003c94:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9dfed>
80003c98:	00f71463          	bne	a4,a5,80003ca0 <API_SendMessageReq+0x90>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:548
            vPortExitCritical();
80003c9c:	9a5fd0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:559
            //     API_Try2Send();
            // }
            // vPortExitCritical();
            //asm("wfi");
        }
    }while(mySlot == PIPE_FULL);
80003ca0:	fe842703          	lw	a4,-24(s0)
80003ca4:	fdfe07b7          	lui	a5,0xfdfe0
80003ca8:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9dfed>
80003cac:	fcf70ae3          	beq	a4,a5,80003c80 <API_SendMessageReq+0x70>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:561

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80003cb0:	800217b7          	lui	a5,0x80021
80003cb4:	fe842703          	lw	a4,-24(s0)
80003cb8:	85c78693          	addi	a3,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
80003cbc:	00070793          	mv	a5,a4
80003cc0:	00479793          	slli	a5,a5,0x4
80003cc4:	40e787b3          	sub	a5,a5,a4
80003cc8:	00279793          	slli	a5,a5,0x2
80003ccc:	00f687b3          	add	a5,a3,a5
80003cd0:	feff0737          	lui	a4,0xfeff0
80003cd4:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efae0ee>
80003cd8:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:563

    ServicePipe[mySlot].header.header           = TaskList[taskSlot].TasksMap[taskID];
80003cdc:	800226b7          	lui	a3,0x80022
80003ce0:	fec42703          	lw	a4,-20(s0)
80003ce4:	00070793          	mv	a5,a4
80003ce8:	00579793          	slli	a5,a5,0x5
80003cec:	00e787b3          	add	a5,a5,a4
80003cf0:	fd842703          	lw	a4,-40(s0)
80003cf4:	00e787b3          	add	a5,a5,a4
80003cf8:	01478793          	addi	a5,a5,20
80003cfc:	a7868713          	addi	a4,a3,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80003d00:	00279793          	slli	a5,a5,0x2
80003d04:	00f707b3          	add	a5,a4,a5
80003d08:	00c7a683          	lw	a3,12(a5)
80003d0c:	800217b7          	lui	a5,0x80021
80003d10:	fe842703          	lw	a4,-24(s0)
80003d14:	85c78613          	addi	a2,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
80003d18:	00070793          	mv	a5,a4
80003d1c:	00479793          	slli	a5,a5,0x4
80003d20:	40e787b3          	sub	a5,a5,a4
80003d24:	00279793          	slli	a5,a5,0x2
80003d28:	00f607b3          	add	a5,a2,a5
80003d2c:	00d7a423          	sw	a3,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:564
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80003d30:	800217b7          	lui	a5,0x80021
80003d34:	fe842703          	lw	a4,-24(s0)
80003d38:	85c78693          	addi	a3,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
80003d3c:	00070793          	mv	a5,a4
80003d40:	00479793          	slli	a5,a5,0x4
80003d44:	40e787b3          	sub	a5,a5,a4
80003d48:	00279793          	slli	a5,a5,0x2
80003d4c:	00f687b3          	add	a5,a3,a5
80003d50:	00b00713          	li	a4,11
80003d54:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:565
    ServicePipe[mySlot].header.service          = MESSAGE_REQUEST;
80003d58:	800217b7          	lui	a5,0x80021
80003d5c:	fe842703          	lw	a4,-24(s0)
80003d60:	85c78693          	addi	a3,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
80003d64:	00070793          	mv	a5,a4
80003d68:	00479793          	slli	a5,a5,0x4
80003d6c:	40e787b3          	sub	a5,a5,a4
80003d70:	00279793          	slli	a5,a5,0x2
80003d74:	00f687b3          	add	a5,a3,a5
80003d78:	01000713          	li	a4,16
80003d7c:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:566
    ServicePipe[mySlot].header.task_id          = TaskList[taskSlot].TaskID;
80003d80:	800226b7          	lui	a3,0x80022
80003d84:	fec42703          	lw	a4,-20(s0)
80003d88:	00070793          	mv	a5,a4
80003d8c:	00579793          	slli	a5,a5,0x5
80003d90:	00e787b3          	add	a5,a5,a4
80003d94:	00279793          	slli	a5,a5,0x2
80003d98:	a7868713          	addi	a4,a3,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80003d9c:	00e787b3          	add	a5,a5,a4
80003da0:	0107a683          	lw	a3,16(a5)
80003da4:	800217b7          	lui	a5,0x80021
80003da8:	fe842703          	lw	a4,-24(s0)
80003dac:	85c78613          	addi	a2,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
80003db0:	00070793          	mv	a5,a4
80003db4:	00479793          	slli	a5,a5,0x4
80003db8:	40e787b3          	sub	a5,a5,a4
80003dbc:	00279793          	slli	a5,a5,0x2
80003dc0:	00f607b3          	add	a5,a2,a5
80003dc4:	00d7aa23          	sw	a3,20(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:567
    ServicePipe[mySlot].header.task_app_id      = TaskList[taskSlot].AppID;
80003dc8:	800227b7          	lui	a5,0x80022
80003dcc:	fec42703          	lw	a4,-20(s0)
80003dd0:	a7878693          	addi	a3,a5,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80003dd4:	00070793          	mv	a5,a4
80003dd8:	00579793          	slli	a5,a5,0x5
80003ddc:	00e787b3          	add	a5,a5,a4
80003de0:	00279793          	slli	a5,a5,0x2
80003de4:	00f687b3          	add	a5,a3,a5
80003de8:	0147a683          	lw	a3,20(a5)
80003dec:	800217b7          	lui	a5,0x80021
80003df0:	fe842703          	lw	a4,-24(s0)
80003df4:	85c78613          	addi	a2,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
80003df8:	00070793          	mv	a5,a4
80003dfc:	00479793          	slli	a5,a5,0x4
80003e00:	40e787b3          	sub	a5,a5,a4
80003e04:	00279793          	slli	a5,a5,0x2
80003e08:	00f607b3          	add	a5,a2,a5
80003e0c:	02d7a223          	sw	a3,36(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:568
    ServicePipe[mySlot].header.producer_task_id = taskID;
80003e10:	800217b7          	lui	a5,0x80021
80003e14:	fe842703          	lw	a4,-24(s0)
80003e18:	85c78693          	addi	a3,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
80003e1c:	00070793          	mv	a5,a4
80003e20:	00479793          	slli	a5,a5,0x4
80003e24:	40e787b3          	sub	a5,a5,a4
80003e28:	00279793          	slli	a5,a5,0x2
80003e2c:	00f687b3          	add	a5,a3,a5
80003e30:	fd842703          	lw	a4,-40(s0)
80003e34:	00e7ae23          	sw	a4,28(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:570

    API_PushSendQueue(SERVICE, mySlot);
80003e38:	fe842583          	lw	a1,-24(s0)
80003e3c:	10100537          	lui	a0,0x10100
80003e40:	d6cff0ef          	jal	ra,800033ac <API_PushSendQueue>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:571
    vPortExitCritical();
80003e44:	ffcfd0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:572
    prints("Esperando Mensagem!\n");
80003e48:	800077b7          	lui	a5,0x80007
80003e4c:	08878513          	addi	a0,a5,136 # 80007088 <__stack_top+0xfffc5278>
80003e50:	fa9fe0ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:574
    // Bloquear a tarefa!
    while(TaskList[taskSlot].waitingMsg == TRUE){ 
80003e54:	02c0006f          	j	80003e80 <API_SendMessageReq+0x270>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:575
        printsvsv("taskslot ", taskSlot, " esperando mensagem ", 0);
80003e58:	fec42703          	lw	a4,-20(s0)
80003e5c:	00000693          	li	a3,0
80003e60:	800077b7          	lui	a5,0x80007
80003e64:	0a078613          	addi	a2,a5,160 # 800070a0 <__stack_top+0xfffc5290>
80003e68:	00070593          	mv	a1,a4
80003e6c:	800077b7          	lui	a5,0x80007
80003e70:	0b878513          	addi	a0,a5,184 # 800070b8 <__stack_top+0xfffc52a8>
80003e74:	880ff0ef          	jal	ra,80002ef4 <printsvsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:576
        vTaskDelay(1); 
80003e78:	00100513          	li	a0,1
80003e7c:	b38fe0ef          	jal	ra,800021b4 <vTaskDelay>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:574
    while(TaskList[taskSlot].waitingMsg == TRUE){ 
80003e80:	800227b7          	lui	a5,0x80022
80003e84:	fec42703          	lw	a4,-20(s0)
80003e88:	a7878693          	addi	a3,a5,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80003e8c:	00070793          	mv	a5,a4
80003e90:	00579793          	slli	a5,a5,0x5
80003e94:	00e787b3          	add	a5,a5,a4
80003e98:	00279793          	slli	a5,a5,0x2
80003e9c:	00f687b3          	add	a5,a3,a5
80003ea0:	01c7a703          	lw	a4,28(a5)
80003ea4:	00100793          	li	a5,1
80003ea8:	faf708e3          	beq	a4,a5,80003e58 <API_SendMessageReq+0x248>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:578
    }
    prints("Mensagem Recebida!\n");
80003eac:	800077b7          	lui	a5,0x80007
80003eb0:	0c478513          	addi	a0,a5,196 # 800070c4 <__stack_top+0xfffc52b4>
80003eb4:	f45fe0ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:579
    return;
80003eb8:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:580
}
80003ebc:	02c12083          	lw	ra,44(sp)
80003ec0:	02812403          	lw	s0,40(sp)
80003ec4:	03010113          	addi	sp,sp,48
80003ec8:	00008067          	ret

80003ecc <API_CheckMessagePipe>:
API_CheckMessagePipe():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:582

unsigned int API_CheckMessagePipe(unsigned int requester_task_id, unsigned int task_app_id){
80003ecc:	fd010113          	addi	sp,sp,-48
80003ed0:	02812623          	sw	s0,44(sp)
80003ed4:	03010413          	addi	s0,sp,48
80003ed8:	fca42e23          	sw	a0,-36(s0)
80003edc:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:584
    unsigned int i;
    unsigned int sel = ERRO;
80003ee0:	fff00793          	li	a5,-1
80003ee4:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:585
    unsigned int smallID = 268435455;
80003ee8:	100007b7          	lui	a5,0x10000
80003eec:	fff78793          	addi	a5,a5,-1 # fffffff <RAM_SIZE+0xff7ffff>
80003ef0:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:586
    for (i = 0; i < PIPE_SIZE; i++){
80003ef4:	fe042623          	sw	zero,-20(s0)
80003ef8:	0c80006f          	j	80003fc0 <API_CheckMessagePipe+0xf4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:587
        if(MessagePipe[i].status == PIPE_OCCUPIED){
80003efc:	800217b7          	lui	a5,0x80021
80003f00:	fec42683          	lw	a3,-20(s0)
80003f04:	24400713          	li	a4,580
80003f08:	02e68733          	mul	a4,a3,a4
80003f0c:	9c078793          	addi	a5,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
80003f10:	00f707b3          	add	a5,a4,a5
80003f14:	0007a703          	lw	a4,0(a5)
80003f18:	00100793          	li	a5,1
80003f1c:	08f71c63          	bne	a4,a5,80003fb4 <API_CheckMessagePipe+0xe8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:588
            if(MessagePipe[i].header.application_id == task_app_id){
80003f20:	800217b7          	lui	a5,0x80021
80003f24:	fec42683          	lw	a3,-20(s0)
80003f28:	9c078713          	addi	a4,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
80003f2c:	24400793          	li	a5,580
80003f30:	02f687b3          	mul	a5,a3,a5
80003f34:	00f707b3          	add	a5,a4,a5
80003f38:	0187a783          	lw	a5,24(a5)
80003f3c:	fd842703          	lw	a4,-40(s0)
80003f40:	06f71a63          	bne	a4,a5,80003fb4 <API_CheckMessagePipe+0xe8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:589
                if(MessagePipe[i].header.destination_task == requester_task_id){
80003f44:	800217b7          	lui	a5,0x80021
80003f48:	fec42683          	lw	a3,-20(s0)
80003f4c:	9c078713          	addi	a4,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
80003f50:	24400793          	li	a5,580
80003f54:	02f687b3          	mul	a5,a3,a5
80003f58:	00f707b3          	add	a5,a4,a5
80003f5c:	0207a783          	lw	a5,32(a5)
80003f60:	fdc42703          	lw	a4,-36(s0)
80003f64:	04f71863          	bne	a4,a5,80003fb4 <API_CheckMessagePipe+0xe8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:590
                    if(MessagePipe[i].msgID < smallID){
80003f68:	800217b7          	lui	a5,0x80021
80003f6c:	fec42683          	lw	a3,-20(s0)
80003f70:	9c078713          	addi	a4,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
80003f74:	24400793          	li	a5,580
80003f78:	02f687b3          	mul	a5,a3,a5
80003f7c:	00f707b3          	add	a5,a4,a5
80003f80:	0087a783          	lw	a5,8(a5)
80003f84:	fe442703          	lw	a4,-28(s0)
80003f88:	02e7f663          	bleu	a4,a5,80003fb4 <API_CheckMessagePipe+0xe8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:591
                        smallID = MessagePipe[i].msgID;
80003f8c:	800217b7          	lui	a5,0x80021
80003f90:	fec42683          	lw	a3,-20(s0)
80003f94:	9c078713          	addi	a4,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
80003f98:	24400793          	li	a5,580
80003f9c:	02f687b3          	mul	a5,a3,a5
80003fa0:	00f707b3          	add	a5,a4,a5
80003fa4:	0087a783          	lw	a5,8(a5)
80003fa8:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:592
                        sel = i;
80003fac:	fec42783          	lw	a5,-20(s0)
80003fb0:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:586 (discriminator 2)
    for (i = 0; i < PIPE_SIZE; i++){
80003fb4:	fec42783          	lw	a5,-20(s0)
80003fb8:	00178793          	addi	a5,a5,1
80003fbc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:586 (discriminator 1)
80003fc0:	fec42703          	lw	a4,-20(s0)
80003fc4:	00300793          	li	a5,3
80003fc8:	f2e7fae3          	bleu	a4,a5,80003efc <API_CheckMessagePipe+0x30>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:598
                    }
                }
            }
        }
    }
    if(sel != ERRO){
80003fcc:	fe842703          	lw	a4,-24(s0)
80003fd0:	fff00793          	li	a5,-1
80003fd4:	02f70063          	beq	a4,a5,80003ff4 <API_CheckMessagePipe+0x128>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:599
        MessagePipe[sel].status == PIPE_TRANSMITTING;
80003fd8:	800217b7          	lui	a5,0x80021
80003fdc:	fe842683          	lw	a3,-24(s0)
80003fe0:	24400713          	li	a4,580
80003fe4:	02e68733          	mul	a4,a3,a4
80003fe8:	9c078793          	addi	a5,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
80003fec:	00f707b3          	add	a5,a4,a5
80003ff0:	0007a783          	lw	a5,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:602
    }
    //printsv("returning sel: ", sel);
    return sel;
80003ff4:	fe842783          	lw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:603
}
80003ff8:	00078513          	mv	a0,a5
80003ffc:	02c12403          	lw	s0,44(sp)
80004000:	03010113          	addi	sp,sp,48
80004004:	00008067          	ret

80004008 <API_AddPendingReq>:
API_AddPendingReq():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:605

void API_AddPendingReq(unsigned int requester_task_id, unsigned int task_app_id, unsigned int producer_task_id){
80004008:	fd010113          	addi	sp,sp,-48
8000400c:	02112623          	sw	ra,44(sp)
80004010:	02812423          	sw	s0,40(sp)
80004014:	03010413          	addi	s0,sp,48
80004018:	fca42e23          	sw	a0,-36(s0)
8000401c:	fcb42c23          	sw	a1,-40(s0)
80004020:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:606
    unsigned int slot = API_GetTaskSlot(producer_task_id, task_app_id);
80004024:	fd842583          	lw	a1,-40(s0)
80004028:	fd442503          	lw	a0,-44(s0)
8000402c:	3a9010ef          	jal	ra,80005bd4 <API_GetTaskSlot>
80004030:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:607
    TaskList[slot].PendingReq[requester_task_id] = TRUE;
80004034:	800226b7          	lui	a3,0x80022
80004038:	fec42703          	lw	a4,-20(s0)
8000403c:	00070793          	mv	a5,a4
80004040:	00579793          	slli	a5,a5,0x5
80004044:	00e787b3          	add	a5,a5,a4
80004048:	fdc42703          	lw	a4,-36(s0)
8000404c:	00e787b3          	add	a5,a5,a4
80004050:	00c78793          	addi	a5,a5,12
80004054:	00279713          	slli	a4,a5,0x2
80004058:	a7868793          	addi	a5,a3,-1416 # 80021a78 <__stack_top+0xfffdfc68>
8000405c:	00f707b3          	add	a5,a4,a5
80004060:	00100713          	li	a4,1
80004064:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:608
    return;
80004068:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:609
}
8000406c:	02c12083          	lw	ra,44(sp)
80004070:	02812403          	lw	s0,40(sp)
80004074:	03010113          	addi	sp,sp,48
80004078:	00008067          	ret

8000407c <API_RepositoryWakeUp>:
API_RepositoryWakeUp():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:10
#include "packet.h"
#include "services.h"

////////////////////////////////////////////////////////////
// Informs the Repository that the GLOBALMASTER is ready to receive the application info
void API_RepositoryWakeUp(){
8000407c:	fe010113          	addi	sp,sp,-32
80004080:	00112e23          	sw	ra,28(sp)
80004084:	00812c23          	sw	s0,24(sp)
80004088:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:13
    unsigned int mySlot;
    do{
        vPortEnterCritical();
8000408c:	d80fd0ef          	jal	ra,8000160c <vPortEnterCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:14
        mySlot = API_GetServiceSlot();
80004090:	080020ef          	jal	ra,80006110 <API_GetServiceSlot>
80004094:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:15
        if(mySlot == PIPE_FULL){
80004098:	fec42703          	lw	a4,-20(s0)
8000409c:	fdfe07b7          	lui	a5,0xfdfe0
800040a0:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9dfed>
800040a4:	04f71663          	bne	a4,a5,800040f0 <API_RepositoryWakeUp+0x74>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:19
            // vPortExitCritical();
            // while(HW_get_32bit_reg(NI_TX) == NI_STATUS_ON){ /* pooling */}
            // vPortEnterCritical();
            if (HW_get_32bit_reg(NI_TX) == NI_STATUS_INTER){
800040a8:	500007b7          	lui	a5,0x50000
800040ac:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
800040b0:	ea9fc0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
800040b4:	00050713          	mv	a4,a0
800040b8:	000017b7          	lui	a5,0x1
800040bc:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
800040c0:	02f71663          	bne	a4,a5,800040ec <API_RepositoryWakeUp+0x70>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:20
                API_ClearPipeSlot(SendingSlot);
800040c4:	800217b7          	lui	a5,0x80021
800040c8:	8587a783          	lw	a5,-1960(a5) # 80020858 <__stack_top+0xfffdea48>
800040cc:	00078513          	mv	a0,a5
800040d0:	0e0020ef          	jal	ra,800061b0 <API_ClearPipeSlot>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:21
                HW_set_32bit_reg(NI_TX, DONE);
800040d4:	000057b7          	lui	a5,0x5
800040d8:	55578593          	addi	a1,a5,1365 # 5555 <HEAP_SIZE-0xaaab>
800040dc:	500007b7          	lui	a5,0x50000
800040e0:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
800040e4:	e6dfc0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:22
                API_Try2Send();
800040e8:	bf0ff0ef          	jal	ra,800034d8 <API_Try2Send>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:24
            }
            vPortExitCritical();
800040ec:	d54fd0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:27
            //asm("wfi");
        }
    }while(mySlot == PIPE_FULL);
800040f0:	fec42703          	lw	a4,-20(s0)
800040f4:	fdfe07b7          	lui	a5,0xfdfe0
800040f8:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9dfed>
800040fc:	f8f708e3          	beq	a4,a5,8000408c <API_RepositoryWakeUp+0x10>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:30
    //printsv("I got a free service slot!! -> ", mySlot);

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80004100:	800217b7          	lui	a5,0x80021
80004104:	fec42703          	lw	a4,-20(s0)
80004108:	85c78693          	addi	a3,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
8000410c:	00070793          	mv	a5,a4
80004110:	00479793          	slli	a5,a5,0x4
80004114:	40e787b3          	sub	a5,a5,a4
80004118:	00279793          	slli	a5,a5,0x2
8000411c:	00f687b3          	add	a5,a3,a5
80004120:	feff0737          	lui	a4,0xfeff0
80004124:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efae0ee>
80004128:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:32

    ServicePipe[mySlot].header.header       = makeAddress(0, 0) | PERIPH_SOUTH;
8000412c:	00000593          	li	a1,0
80004130:	00000513          	li	a0,0
80004134:	a38ff0ef          	jal	ra,8000336c <makeAddress>
80004138:	00050713          	mv	a4,a0
8000413c:	000407b7          	lui	a5,0x40
80004140:	00f766b3          	or	a3,a4,a5
80004144:	800217b7          	lui	a5,0x80021
80004148:	fec42703          	lw	a4,-20(s0)
8000414c:	85c78613          	addi	a2,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
80004150:	00070793          	mv	a5,a4
80004154:	00479793          	slli	a5,a5,0x4
80004158:	40e787b3          	sub	a5,a5,a4
8000415c:	00279793          	slli	a5,a5,0x2
80004160:	00f607b3          	add	a5,a2,a5
80004164:	00d7a423          	sw	a3,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:33
    ServicePipe[mySlot].header.payload_size = PKT_SERVICE_SIZE;
80004168:	800217b7          	lui	a5,0x80021
8000416c:	fec42703          	lw	a4,-20(s0)
80004170:	85c78693          	addi	a3,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
80004174:	00070793          	mv	a5,a4
80004178:	00479793          	slli	a5,a5,0x4
8000417c:	40e787b3          	sub	a5,a5,a4
80004180:	00279793          	slli	a5,a5,0x2
80004184:	00f687b3          	add	a5,a3,a5
80004188:	00b00713          	li	a4,11
8000418c:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:34
    ServicePipe[mySlot].header.service      = REPOSITORY_WAKEUP;
80004190:	800217b7          	lui	a5,0x80021
80004194:	fec42703          	lw	a4,-20(s0)
80004198:	85c78693          	addi	a3,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
8000419c:	00070793          	mv	a5,a4
800041a0:	00479793          	slli	a5,a5,0x4
800041a4:	40e787b3          	sub	a5,a5,a4
800041a8:	00279793          	slli	a5,a5,0x2
800041ac:	00f687b3          	add	a5,a3,a5
800041b0:	10000713          	li	a4,256
800041b4:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:36

    API_PushSendQueue(SERVICE, mySlot);
800041b8:	fec42583          	lw	a1,-20(s0)
800041bc:	10100537          	lui	a0,0x10100
800041c0:	9ecff0ef          	jal	ra,800033ac <API_PushSendQueue>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:37
    vPortExitCritical();
800041c4:	c7cfd0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:38
    return;    
800041c8:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:39
}
800041cc:	01c12083          	lw	ra,28(sp)
800041d0:	01812403          	lw	s0,24(sp)
800041d4:	02010113          	addi	sp,sp,32
800041d8:	00008067          	ret

800041dc <API_AddApplication>:
API_AddApplication():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:43

////////////////////////////////////////////////////////////
// Add one Application in the Execution Queue
void API_AddApplication(unsigned int appID, unsigned int appPeriod, unsigned int appExec, unsigned int appNTasks){
800041dc:	fd010113          	addi	sp,sp,-48
800041e0:	02112623          	sw	ra,44(sp)
800041e4:	02812423          	sw	s0,40(sp)
800041e8:	03010413          	addi	s0,sp,48
800041ec:	fca42e23          	sw	a0,-36(s0)
800041f0:	fcb42c23          	sw	a1,-40(s0)
800041f4:	fcc42a23          	sw	a2,-44(s0)
800041f8:	fcd42823          	sw	a3,-48(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:44
    int slot = API_GetApplicationFreeSlot();
800041fc:	1c4000ef          	jal	ra,800043c0 <API_GetApplicationFreeSlot>
80004200:	00050793          	mv	a5,a0
80004204:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:45
    applications[slot].occupied = TRUE;
80004208:	800216b7          	lui	a3,0x80021
8000420c:	fec42703          	lw	a4,-20(s0)
80004210:	00070793          	mv	a5,a4
80004214:	00279793          	slli	a5,a5,0x2
80004218:	00e787b3          	add	a5,a5,a4
8000421c:	00579793          	slli	a5,a5,0x5
80004220:	2f868713          	addi	a4,a3,760 # 800212f8 <__stack_top+0xfffdf4e8>
80004224:	00e787b3          	add	a5,a5,a4
80004228:	00100713          	li	a4,1
8000422c:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:46
    applications[slot].appID = appID;
80004230:	800217b7          	lui	a5,0x80021
80004234:	fec42703          	lw	a4,-20(s0)
80004238:	2f878693          	addi	a3,a5,760 # 800212f8 <__stack_top+0xfffdf4e8>
8000423c:	00070793          	mv	a5,a4
80004240:	00279793          	slli	a5,a5,0x2
80004244:	00e787b3          	add	a5,a5,a4
80004248:	00579793          	slli	a5,a5,0x5
8000424c:	00f687b3          	add	a5,a3,a5
80004250:	fdc42703          	lw	a4,-36(s0)
80004254:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:47
    applications[slot].appPeriod = appPeriod;
80004258:	800217b7          	lui	a5,0x80021
8000425c:	fec42703          	lw	a4,-20(s0)
80004260:	2f878693          	addi	a3,a5,760 # 800212f8 <__stack_top+0xfffdf4e8>
80004264:	00070793          	mv	a5,a4
80004268:	00279793          	slli	a5,a5,0x2
8000426c:	00e787b3          	add	a5,a5,a4
80004270:	00579793          	slli	a5,a5,0x5
80004274:	00f687b3          	add	a5,a3,a5
80004278:	fd842703          	lw	a4,-40(s0)
8000427c:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:48
    applications[slot].appExec = appExec;
80004280:	800217b7          	lui	a5,0x80021
80004284:	fec42703          	lw	a4,-20(s0)
80004288:	2f878693          	addi	a3,a5,760 # 800212f8 <__stack_top+0xfffdf4e8>
8000428c:	00070793          	mv	a5,a4
80004290:	00279793          	slli	a5,a5,0x2
80004294:	00e787b3          	add	a5,a5,a4
80004298:	00579793          	slli	a5,a5,0x5
8000429c:	00f687b3          	add	a5,a3,a5
800042a0:	fd442703          	lw	a4,-44(s0)
800042a4:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:49
    applications[slot].numTasks = appNTasks;
800042a8:	800216b7          	lui	a3,0x80021
800042ac:	fec42703          	lw	a4,-20(s0)
800042b0:	00070793          	mv	a5,a4
800042b4:	00279793          	slli	a5,a5,0x2
800042b8:	00e787b3          	add	a5,a5,a4
800042bc:	00579793          	slli	a5,a5,0x5
800042c0:	2f868713          	addi	a4,a3,760 # 800212f8 <__stack_top+0xfffdf4e8>
800042c4:	00e787b3          	add	a5,a5,a4
800042c8:	fd042703          	lw	a4,-48(s0)
800042cc:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:50
    applications[slot].nextRun = xTaskGetTickCount() + appPeriod;
800042d0:	980fe0ef          	jal	ra,80002450 <xTaskGetTickCount>
800042d4:	00050713          	mv	a4,a0
800042d8:	fd842783          	lw	a5,-40(s0)
800042dc:	00f706b3          	add	a3,a4,a5
800042e0:	800217b7          	lui	a5,0x80021
800042e4:	fec42703          	lw	a4,-20(s0)
800042e8:	2f878613          	addi	a2,a5,760 # 800212f8 <__stack_top+0xfffdf4e8>
800042ec:	00070793          	mv	a5,a4
800042f0:	00279793          	slli	a5,a5,0x2
800042f4:	00e787b3          	add	a5,a5,a4
800042f8:	00579793          	slli	a5,a5,0x5
800042fc:	00f607b3          	add	a5,a2,a5
80004300:	08d7a623          	sw	a3,140(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:51
    applications[slot].executed = 0;
80004304:	800216b7          	lui	a3,0x80021
80004308:	fec42703          	lw	a4,-20(s0)
8000430c:	00070793          	mv	a5,a4
80004310:	00279793          	slli	a5,a5,0x2
80004314:	00e787b3          	add	a5,a5,a4
80004318:	00579793          	slli	a5,a5,0x5
8000431c:	2f868713          	addi	a4,a3,760 # 800212f8 <__stack_top+0xfffdf4e8>
80004320:	00e787b3          	add	a5,a5,a4
80004324:	0807a823          	sw	zero,144(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:52
    applications[slot].lastStart = -1;
80004328:	800217b7          	lui	a5,0x80021
8000432c:	fec42703          	lw	a4,-20(s0)
80004330:	2f878693          	addi	a3,a5,760 # 800212f8 <__stack_top+0xfffdf4e8>
80004334:	00070793          	mv	a5,a4
80004338:	00279793          	slli	a5,a5,0x2
8000433c:	00e787b3          	add	a5,a5,a4
80004340:	00579793          	slli	a5,a5,0x5
80004344:	00f687b3          	add	a5,a3,a5
80004348:	fff00713          	li	a4,-1
8000434c:	08e7aa23          	sw	a4,148(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:53
    applications[slot].finishedTasks = 0;
80004350:	800217b7          	lui	a5,0x80021
80004354:	fec42703          	lw	a4,-20(s0)
80004358:	2f878693          	addi	a3,a5,760 # 800212f8 <__stack_top+0xfffdf4e8>
8000435c:	00070793          	mv	a5,a4
80004360:	00279793          	slli	a5,a5,0x2
80004364:	00e787b3          	add	a5,a5,a4
80004368:	00579793          	slli	a5,a5,0x5
8000436c:	00f687b3          	add	a5,a3,a5
80004370:	0807ac23          	sw	zero,152(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:54
    applications[slot].lastFinish = 0;
80004374:	800217b7          	lui	a5,0x80021
80004378:	fec42703          	lw	a4,-20(s0)
8000437c:	2f878693          	addi	a3,a5,760 # 800212f8 <__stack_top+0xfffdf4e8>
80004380:	00070793          	mv	a5,a4
80004384:	00279793          	slli	a5,a5,0x2
80004388:	00e787b3          	add	a5,a5,a4
8000438c:	00579793          	slli	a5,a5,0x5
80004390:	00f687b3          	add	a5,a3,a5
80004394:	0807ae23          	sw	zero,156(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:55
    printsv("New application registered - ID: ", appID);
80004398:	fdc42783          	lw	a5,-36(s0)
8000439c:	00078593          	mv	a1,a5
800043a0:	800077b7          	lui	a5,0x80007
800043a4:	0d878513          	addi	a0,a5,216 # 800070d8 <__stack_top+0xfffc52c8>
800043a8:	afdfe0ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:56
    return;
800043ac:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:57
}
800043b0:	02c12083          	lw	ra,44(sp)
800043b4:	02812403          	lw	s0,40(sp)
800043b8:	03010113          	addi	sp,sp,48
800043bc:	00008067          	ret

800043c0 <API_GetApplicationFreeSlot>:
API_GetApplicationFreeSlot():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:75
}


////////////////////////////////////////////////////////////
// Gets an application slot that is free
unsigned int API_GetApplicationFreeSlot(){
800043c0:	fe010113          	addi	sp,sp,-32
800043c4:	00112e23          	sw	ra,28(sp)
800043c8:	00812c23          	sw	s0,24(sp)
800043cc:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:77
    int i;
    for (i = 0; i < NUM_MAX_APPS; i++){
800043d0:	fe042623          	sw	zero,-20(s0)
800043d4:	0400006f          	j	80004414 <API_GetApplicationFreeSlot+0x54>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:78
        if (applications[i].occupied == FALSE){
800043d8:	800216b7          	lui	a3,0x80021
800043dc:	fec42703          	lw	a4,-20(s0)
800043e0:	00070793          	mv	a5,a4
800043e4:	00279793          	slli	a5,a5,0x2
800043e8:	00e787b3          	add	a5,a5,a4
800043ec:	00579793          	slli	a5,a5,0x5
800043f0:	2f868713          	addi	a4,a3,760 # 800212f8 <__stack_top+0xfffdf4e8>
800043f4:	00e787b3          	add	a5,a5,a4
800043f8:	0007a783          	lw	a5,0(a5)
800043fc:	00079663          	bnez	a5,80004408 <API_GetApplicationFreeSlot+0x48>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:79
            return i;
80004400:	fec42783          	lw	a5,-20(s0)
80004404:	02c0006f          	j	80004430 <API_GetApplicationFreeSlot+0x70>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:77 (discriminator 2)
    for (i = 0; i < NUM_MAX_APPS; i++){
80004408:	fec42783          	lw	a5,-20(s0)
8000440c:	00178793          	addi	a5,a5,1
80004410:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:77 (discriminator 1)
80004414:	fec42703          	lw	a4,-20(s0)
80004418:	00b00793          	li	a5,11
8000441c:	fae7dee3          	ble	a4,a5,800043d8 <API_GetApplicationFreeSlot+0x18>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:82
        }
    }
    prints("returning erro4\n");
80004420:	800077b7          	lui	a5,0x80007
80004424:	11078513          	addi	a0,a5,272 # 80007110 <__stack_top+0xfffc5300>
80004428:	9d1fe0ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:83
    return ERRO;
8000442c:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:84
}
80004430:	00078513          	mv	a0,a5
80004434:	01c12083          	lw	ra,28(sp)
80004438:	01812403          	lw	s0,24(sp)
8000443c:	02010113          	addi	sp,sp,32
80004440:	00008067          	ret

80004444 <API_ApplicationsReset>:
API_ApplicationsReset():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:88

////////////////////////////////////////////////////////////
// Reset applications vector
void API_ApplicationsReset(){
80004444:	fe010113          	addi	sp,sp,-32
80004448:	00812e23          	sw	s0,28(sp)
8000444c:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90
    int i;
    for (i = 0; i < NUM_MAX_APPS; i++){
80004450:	fe042623          	sw	zero,-20(s0)
80004454:	0340006f          	j	80004488 <API_ApplicationsReset+0x44>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:91 (discriminator 3)
        applications[i].occupied = FALSE;
80004458:	800216b7          	lui	a3,0x80021
8000445c:	fec42703          	lw	a4,-20(s0)
80004460:	00070793          	mv	a5,a4
80004464:	00279793          	slli	a5,a5,0x2
80004468:	00e787b3          	add	a5,a5,a4
8000446c:	00579793          	slli	a5,a5,0x5
80004470:	2f868713          	addi	a4,a3,760 # 800212f8 <__stack_top+0xfffdf4e8>
80004474:	00e787b3          	add	a5,a5,a4
80004478:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90 (discriminator 3)
    for (i = 0; i < NUM_MAX_APPS; i++){
8000447c:	fec42783          	lw	a5,-20(s0)
80004480:	00178793          	addi	a5,a5,1
80004484:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90 (discriminator 1)
80004488:	fec42703          	lw	a4,-20(s0)
8000448c:	00b00793          	li	a5,11
80004490:	fce7d4e3          	ble	a4,a5,80004458 <API_ApplicationsReset+0x14>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:93
    }
    return;
80004494:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:94
}
80004498:	01c12403          	lw	s0,28(sp)
8000449c:	02010113          	addi	sp,sp,32
800044a0:	00008067          	ret

800044a4 <API_TilesReset>:
API_TilesReset():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:98

////////////////////////////////////////////////////////////
// Initialize the Tiles Info
void API_TilesReset(){
800044a4:	fe010113          	addi	sp,sp,-32
800044a8:	00812e23          	sw	s0,28(sp)
800044ac:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:100
    int i, m, n;
    for (m = 0; m < DIM_X; m++){
800044b0:	fe042623          	sw	zero,-20(s0)
800044b4:	0fc0006f          	j	800045b0 <API_TilesReset+0x10c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:101
        for (n = 0; n < DIM_Y; n++){
800044b8:	fe042423          	sw	zero,-24(s0)
800044bc:	0dc0006f          	j	80004598 <API_TilesReset+0xf4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:102 (discriminator 3)
            Tiles[m][n].temperature = 273;
800044c0:	80022637          	lui	a2,0x80022
800044c4:	fe842783          	lw	a5,-24(s0)
800044c8:	fec42683          	lw	a3,-20(s0)
800044cc:	00078713          	mv	a4,a5
800044d0:	00171713          	slli	a4,a4,0x1
800044d4:	00f70733          	add	a4,a4,a5
800044d8:	00271793          	slli	a5,a4,0x2
800044dc:	00078713          	mv	a4,a5
800044e0:	00068793          	mv	a5,a3
800044e4:	00379793          	slli	a5,a5,0x3
800044e8:	00d787b3          	add	a5,a5,a3
800044ec:	00279793          	slli	a5,a5,0x2
800044f0:	00f70733          	add	a4,a4,a5
800044f4:	d9860793          	addi	a5,a2,-616 # 80021d98 <__stack_top+0xfffdff88>
800044f8:	00f707b3          	add	a5,a4,a5
800044fc:	11100713          	li	a4,273
80004500:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:103 (discriminator 3)
            Tiles[m][n].frequency = 1000;
80004504:	80022737          	lui	a4,0x80022
80004508:	fe842783          	lw	a5,-24(s0)
8000450c:	fec42683          	lw	a3,-20(s0)
80004510:	d9870613          	addi	a2,a4,-616 # 80021d98 <__stack_top+0xfffdff88>
80004514:	00078713          	mv	a4,a5
80004518:	00171713          	slli	a4,a4,0x1
8000451c:	00f70733          	add	a4,a4,a5
80004520:	00271793          	slli	a5,a4,0x2
80004524:	00078713          	mv	a4,a5
80004528:	00068793          	mv	a5,a3
8000452c:	00379793          	slli	a5,a5,0x3
80004530:	00d787b3          	add	a5,a5,a3
80004534:	00279793          	slli	a5,a5,0x2
80004538:	00f707b3          	add	a5,a4,a5
8000453c:	00f607b3          	add	a5,a2,a5
80004540:	3e800713          	li	a4,1000
80004544:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:104 (discriminator 3)
            Tiles[m][n].taskSlots = NUM_MAX_TASKS;
80004548:	80022737          	lui	a4,0x80022
8000454c:	fe842783          	lw	a5,-24(s0)
80004550:	fec42683          	lw	a3,-20(s0)
80004554:	d9870613          	addi	a2,a4,-616 # 80021d98 <__stack_top+0xfffdff88>
80004558:	00078713          	mv	a4,a5
8000455c:	00171713          	slli	a4,a4,0x1
80004560:	00f70733          	add	a4,a4,a5
80004564:	00271793          	slli	a5,a4,0x2
80004568:	00078713          	mv	a4,a5
8000456c:	00068793          	mv	a5,a3
80004570:	00379793          	slli	a5,a5,0x3
80004574:	00d787b3          	add	a5,a5,a3
80004578:	00279793          	slli	a5,a5,0x2
8000457c:	00f707b3          	add	a5,a4,a5
80004580:	00f607b3          	add	a5,a2,a5
80004584:	00600713          	li	a4,6
80004588:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:101 (discriminator 3)
        for (n = 0; n < DIM_Y; n++){
8000458c:	fe842783          	lw	a5,-24(s0)
80004590:	00178793          	addi	a5,a5,1
80004594:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:101 (discriminator 1)
80004598:	fe842703          	lw	a4,-24(s0)
8000459c:	00200793          	li	a5,2
800045a0:	f2e7d0e3          	ble	a4,a5,800044c0 <API_TilesReset+0x1c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:100 (discriminator 2)
    for (m = 0; m < DIM_X; m++){
800045a4:	fec42783          	lw	a5,-20(s0)
800045a8:	00178793          	addi	a5,a5,1
800045ac:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:100 (discriminator 1)
800045b0:	fec42703          	lw	a4,-20(s0)
800045b4:	00200793          	li	a5,2
800045b8:	f0e7d0e3          	ble	a4,a5,800044b8 <API_TilesReset+0x14>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:110
            /*for(i = 0; i < NUM_MAX_TASKS; i++){
                Tiles[m][n].AppTask[i] = NONE;
            }*/
        }
    }    
    return;
800045bc:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:111
}
800045c0:	01c12403          	lw	s0,28(sp)
800045c4:	02010113          	addi	sp,sp,32
800045c8:	00008067          	ret

800045cc <GeneratePatternMatrix>:
GeneratePatternMatrix():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:114

// Generates the Pattern Matrix for Pattern mapping
void GeneratePatternMatrix(){
800045cc:	fe010113          	addi	sp,sp,-32
800045d0:	00812e23          	sw	s0,28(sp)
800045d4:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:116
    int i, aux;
    aux = 0;
800045d8:	fe042423          	sw	zero,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:117
    priorityPointer = 0;
800045dc:	800227b7          	lui	a5,0x80022
800045e0:	d807aa23          	sw	zero,-620(a5) # 80021d94 <__stack_top+0xfffdff84>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:119
    //prints("Testando Pattern: \n");
    for(i=0; i<(DIM_X*DIM_Y); i++){
800045e4:	fe042623          	sw	zero,-20(s0)
800045e8:	0700006f          	j	80004658 <GeneratePatternMatrix+0x8c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:121
        //printi(i); prints(": "); printi(aux); prints("\n");
        priorityMatrix[i] = (aux / DIM_X << 8) | aux % DIM_X;
800045ec:	fe842703          	lw	a4,-24(s0)
800045f0:	00300793          	li	a5,3
800045f4:	02f747b3          	div	a5,a4,a5
800045f8:	00879713          	slli	a4,a5,0x8
800045fc:	fe842683          	lw	a3,-24(s0)
80004600:	00300793          	li	a5,3
80004604:	02f6e7b3          	rem	a5,a3,a5
80004608:	00f767b3          	or	a5,a4,a5
8000460c:	00078693          	mv	a3,a5
80004610:	800217b7          	lui	a5,0x80021
80004614:	fec42703          	lw	a4,-20(s0)
80004618:	00271713          	slli	a4,a4,0x2
8000461c:	2d478793          	addi	a5,a5,724 # 800212d4 <__stack_top+0xfffdf4c4>
80004620:	00f707b3          	add	a5,a4,a5
80004624:	00d7a023          	sw	a3,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:140
            else{
                aux = 1;
            }
        } 
        else{
            if(aux<=((DIM_X*DIM_Y)-3))
80004628:	fe842703          	lw	a4,-24(s0)
8000462c:	00600793          	li	a5,6
80004630:	00e7ca63          	blt	a5,a4,80004644 <GeneratePatternMatrix+0x78>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:141
                aux += 2;
80004634:	fe842783          	lw	a5,-24(s0)
80004638:	00278793          	addi	a5,a5,2
8000463c:	fef42423          	sw	a5,-24(s0)
80004640:	00c0006f          	j	8000464c <GeneratePatternMatrix+0x80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:143
            else
                aux = 1;
80004644:	00100793          	li	a5,1
80004648:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:119 (discriminator 2)
    for(i=0; i<(DIM_X*DIM_Y); i++){
8000464c:	fec42783          	lw	a5,-20(s0)
80004650:	00178793          	addi	a5,a5,1
80004654:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:119 (discriminator 1)
80004658:	fec42703          	lw	a4,-20(s0)
8000465c:	00800793          	li	a5,8
80004660:	f8e7d6e3          	ble	a4,a5,800045ec <GeneratePatternMatrix+0x20>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:146
        }    
    }
    return;
80004664:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:147
}
80004668:	01c12403          	lw	s0,28(sp)
8000466c:	02010113          	addi	sp,sp,32
80004670:	00008067          	ret

80004674 <API_AllocateTasks>:
API_AllocateTasks():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:150

// Checks if there is some task to allocate...
void API_AllocateTasks(unsigned int tick){
80004674:	fd010113          	addi	sp,sp,-48
80004678:	02112623          	sw	ra,44(sp)
8000467c:	02812423          	sw	s0,40(sp)
80004680:	02912223          	sw	s1,36(sp)
80004684:	03010413          	addi	s0,sp,48
80004688:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:154
    int i, j;
    int addr, slot;
    // Iterate around every possible application
    for (i = 0; i < NUM_MAX_APPS; i++){
8000468c:	fe042623          	sw	zero,-20(s0)
80004690:	2980006f          	j	80004928 <API_AllocateTasks+0x2b4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:156
        // If the application is valid
        if (applications[i].occupied == TRUE){
80004694:	800216b7          	lui	a3,0x80021
80004698:	fec42703          	lw	a4,-20(s0)
8000469c:	00070793          	mv	a5,a4
800046a0:	00279793          	slli	a5,a5,0x2
800046a4:	00e787b3          	add	a5,a5,a4
800046a8:	00579793          	slli	a5,a5,0x5
800046ac:	2f868713          	addi	a4,a3,760 # 800212f8 <__stack_top+0xfffdf4e8>
800046b0:	00e787b3          	add	a5,a5,a4
800046b4:	0007a703          	lw	a4,0(a5)
800046b8:	00100793          	li	a5,1
800046bc:	26f71063          	bne	a4,a5,8000491c <API_AllocateTasks+0x2a8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:159

            // If the nextRun of this application is right now, then release each task!
            if(applications[i].nextRun <= tick && applications[i].nextRun != applications[i].lastStart){
800046c0:	800217b7          	lui	a5,0x80021
800046c4:	fec42703          	lw	a4,-20(s0)
800046c8:	2f878693          	addi	a3,a5,760 # 800212f8 <__stack_top+0xfffdf4e8>
800046cc:	00070793          	mv	a5,a4
800046d0:	00279793          	slli	a5,a5,0x2
800046d4:	00e787b3          	add	a5,a5,a4
800046d8:	00579793          	slli	a5,a5,0x5
800046dc:	00f687b3          	add	a5,a3,a5
800046e0:	08c7a783          	lw	a5,140(a5)
800046e4:	fdc42703          	lw	a4,-36(s0)
800046e8:	22f76a63          	bltu	a4,a5,8000491c <API_AllocateTasks+0x2a8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:159 (discriminator 1)
800046ec:	800217b7          	lui	a5,0x80021
800046f0:	fec42703          	lw	a4,-20(s0)
800046f4:	2f878693          	addi	a3,a5,760 # 800212f8 <__stack_top+0xfffdf4e8>
800046f8:	00070793          	mv	a5,a4
800046fc:	00279793          	slli	a5,a5,0x2
80004700:	00e787b3          	add	a5,a5,a4
80004704:	00579793          	slli	a5,a5,0x5
80004708:	00f687b3          	add	a5,a3,a5
8000470c:	08c7a683          	lw	a3,140(a5)
80004710:	800217b7          	lui	a5,0x80021
80004714:	fec42703          	lw	a4,-20(s0)
80004718:	2f878613          	addi	a2,a5,760 # 800212f8 <__stack_top+0xfffdf4e8>
8000471c:	00070793          	mv	a5,a4
80004720:	00279793          	slli	a5,a5,0x2
80004724:	00e787b3          	add	a5,a5,a4
80004728:	00579793          	slli	a5,a5,0x5
8000472c:	00f607b3          	add	a5,a2,a5
80004730:	0947a783          	lw	a5,148(a5)
80004734:	1ef68463          	beq	a3,a5,8000491c <API_AllocateTasks+0x2a8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:162

                // If the system has space to accept every task
                if(applications[i].numTasks <= API_GetSystemTasksSlots()){
80004738:	800216b7          	lui	a3,0x80021
8000473c:	fec42703          	lw	a4,-20(s0)
80004740:	00070793          	mv	a5,a4
80004744:	00279793          	slli	a5,a5,0x2
80004748:	00e787b3          	add	a5,a5,a4
8000474c:	00579793          	slli	a5,a5,0x5
80004750:	2f868713          	addi	a4,a3,760 # 800212f8 <__stack_top+0xfffdf4e8>
80004754:	00e787b3          	add	a5,a5,a4
80004758:	0107a483          	lw	s1,16(a5)
8000475c:	0c5000ef          	jal	ra,80005020 <API_GetSystemTasksSlots>
80004760:	00050793          	mv	a5,a0
80004764:	1a97ec63          	bltu	a5,s1,8000491c <API_AllocateTasks+0x2a8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:165
                    
                    // Iterates around each task of this application
                    for(j = 0; j < applications[i].numTasks; j++){
80004768:	fe042423          	sw	zero,-24(s0)
8000476c:	13c0006f          	j	800048a8 <API_AllocateTasks+0x234>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:168

                        for(;;){
                            addr = getNextPriorityAddr();
80004770:	4e0000ef          	jal	ra,80004c50 <getNextPriorityAddr>
80004774:	00050793          	mv	a5,a0
80004778:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:169
                            slot = API_GetTaskSlotFromTile(addr, i, j);
8000477c:	fe442783          	lw	a5,-28(s0)
80004780:	fec42703          	lw	a4,-20(s0)
80004784:	fe842683          	lw	a3,-24(s0)
80004788:	00068613          	mv	a2,a3
8000478c:	00070593          	mv	a1,a4
80004790:	00078513          	mv	a0,a5
80004794:	5f0000ef          	jal	ra,80004d84 <API_GetTaskSlotFromTile>
80004798:	00050793          	mv	a5,a0
8000479c:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:170
                            if (slot != ERRO)
800047a0:	fe042703          	lw	a4,-32(s0)
800047a4:	fff00793          	li	a5,-1
800047a8:	00f71463          	bne	a4,a5,800047b0 <API_AllocateTasks+0x13c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:168
                            addr = getNextPriorityAddr();
800047ac:	fc5ff06f          	j	80004770 <API_AllocateTasks+0xfc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:171
                                break;
800047b0:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:173
                        }
                        applications[i].tasks[j].status = TASK_ALLOCATING;
800047b4:	80021737          	lui	a4,0x80021
800047b8:	fe842783          	lw	a5,-24(s0)
800047bc:	fec42683          	lw	a3,-20(s0)
800047c0:	2f870613          	addi	a2,a4,760 # 800212f8 <__stack_top+0xfffdf4e8>
800047c4:	00078713          	mv	a4,a5
800047c8:	00171713          	slli	a4,a4,0x1
800047cc:	00f70733          	add	a4,a4,a5
800047d0:	00271793          	slli	a5,a4,0x2
800047d4:	00078713          	mv	a4,a5
800047d8:	00068793          	mv	a5,a3
800047dc:	00279793          	slli	a5,a5,0x2
800047e0:	00d787b3          	add	a5,a5,a3
800047e4:	00579793          	slli	a5,a5,0x5
800047e8:	00f707b3          	add	a5,a4,a5
800047ec:	00f607b3          	add	a5,a2,a5
800047f0:	00300713          	li	a4,3
800047f4:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:174
                        applications[i].tasks[j].addr = addr;
800047f8:	fe442603          	lw	a2,-28(s0)
800047fc:	80021737          	lui	a4,0x80021
80004800:	fe842783          	lw	a5,-24(s0)
80004804:	fec42683          	lw	a3,-20(s0)
80004808:	2f870593          	addi	a1,a4,760 # 800212f8 <__stack_top+0xfffdf4e8>
8000480c:	00078713          	mv	a4,a5
80004810:	00171713          	slli	a4,a4,0x1
80004814:	00f70733          	add	a4,a4,a5
80004818:	00271793          	slli	a5,a4,0x2
8000481c:	00078713          	mv	a4,a5
80004820:	00068793          	mv	a5,a3
80004824:	00279793          	slli	a5,a5,0x2
80004828:	00d787b3          	add	a5,a5,a3
8000482c:	00579793          	slli	a5,a5,0x5
80004830:	00f707b3          	add	a5,a4,a5
80004834:	00f587b3          	add	a5,a1,a5
80004838:	00c7ac23          	sw	a2,24(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:175
                        applications[i].tasks[j].slot = slot;
8000483c:	fe042603          	lw	a2,-32(s0)
80004840:	80021737          	lui	a4,0x80021
80004844:	fe842783          	lw	a5,-24(s0)
80004848:	fec42683          	lw	a3,-20(s0)
8000484c:	2f870593          	addi	a1,a4,760 # 800212f8 <__stack_top+0xfffdf4e8>
80004850:	00078713          	mv	a4,a5
80004854:	00171713          	slli	a4,a4,0x1
80004858:	00f70733          	add	a4,a4,a5
8000485c:	00271793          	slli	a5,a4,0x2
80004860:	00078713          	mv	a4,a5
80004864:	00068793          	mv	a5,a3
80004868:	00279793          	slli	a5,a5,0x2
8000486c:	00d787b3          	add	a5,a5,a3
80004870:	00579793          	slli	a5,a5,0x5
80004874:	00f707b3          	add	a5,a4,a5
80004878:	00f587b3          	add	a5,a1,a5
8000487c:	00c7ae23          	sw	a2,28(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:176
                        API_RepositoryAllocation(i, j, addr);
80004880:	fec42783          	lw	a5,-20(s0)
80004884:	fe842703          	lw	a4,-24(s0)
80004888:	fe442683          	lw	a3,-28(s0)
8000488c:	00068613          	mv	a2,a3
80004890:	00070593          	mv	a1,a4
80004894:	00078513          	mv	a0,a5
80004898:	075000ef          	jal	ra,8000510c <API_RepositoryAllocation>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:165
                    for(j = 0; j < applications[i].numTasks; j++){
8000489c:	fe842783          	lw	a5,-24(s0)
800048a0:	00178793          	addi	a5,a5,1
800048a4:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:165 (discriminator 1)
800048a8:	800216b7          	lui	a3,0x80021
800048ac:	fec42703          	lw	a4,-20(s0)
800048b0:	00070793          	mv	a5,a4
800048b4:	00279793          	slli	a5,a5,0x2
800048b8:	00e787b3          	add	a5,a5,a4
800048bc:	00579793          	slli	a5,a5,0x5
800048c0:	2f868713          	addi	a4,a3,760 # 800212f8 <__stack_top+0xfffdf4e8>
800048c4:	00e787b3          	add	a5,a5,a4
800048c8:	0107a703          	lw	a4,16(a5)
800048cc:	fe842783          	lw	a5,-24(s0)
800048d0:	eae7e0e3          	bltu	a5,a4,80004770 <API_AllocateTasks+0xfc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:180
                    }

                    // Resets the lastStart
                    applications[i].lastStart = applications[i].nextRun;
800048d4:	800217b7          	lui	a5,0x80021
800048d8:	fec42703          	lw	a4,-20(s0)
800048dc:	2f878693          	addi	a3,a5,760 # 800212f8 <__stack_top+0xfffdf4e8>
800048e0:	00070793          	mv	a5,a4
800048e4:	00279793          	slli	a5,a5,0x2
800048e8:	00e787b3          	add	a5,a5,a4
800048ec:	00579793          	slli	a5,a5,0x5
800048f0:	00f687b3          	add	a5,a3,a5
800048f4:	08c7a683          	lw	a3,140(a5)
800048f8:	800217b7          	lui	a5,0x80021
800048fc:	fec42703          	lw	a4,-20(s0)
80004900:	2f878613          	addi	a2,a5,760 # 800212f8 <__stack_top+0xfffdf4e8>
80004904:	00070793          	mv	a5,a4
80004908:	00279793          	slli	a5,a5,0x2
8000490c:	00e787b3          	add	a5,a5,a4
80004910:	00579793          	slli	a5,a5,0x5
80004914:	00f607b3          	add	a5,a2,a5
80004918:	08d7aa23          	sw	a3,148(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:154 (discriminator 2)
    for (i = 0; i < NUM_MAX_APPS; i++){
8000491c:	fec42783          	lw	a5,-20(s0)
80004920:	00178793          	addi	a5,a5,1
80004924:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:154 (discriminator 1)
80004928:	fec42703          	lw	a4,-20(s0)
8000492c:	00b00793          	li	a5,11
80004930:	d6e7d2e3          	ble	a4,a5,80004694 <API_AllocateTasks+0x20>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:186
                }
            }
        }
    }

    return;
80004934:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:187
}
80004938:	02c12083          	lw	ra,44(sp)
8000493c:	02812403          	lw	s0,40(sp)
80004940:	02412483          	lw	s1,36(sp)
80004944:	03010113          	addi	sp,sp,48
80004948:	00008067          	ret

8000494c <API_DealocateTask>:
API_DealocateTask():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:189

void API_DealocateTask(unsigned int task_id, unsigned int app_id){
8000494c:	fd010113          	addi	sp,sp,-48
80004950:	02112623          	sw	ra,44(sp)
80004954:	02812423          	sw	s0,40(sp)
80004958:	03010413          	addi	s0,sp,48
8000495c:	fca42e23          	sw	a0,-36(s0)
80004960:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:191
    unsigned int i, flag, tick;
    applications[app_id].tasks[task_id].status = TASK_FINISHED;
80004964:	80021737          	lui	a4,0x80021
80004968:	fdc42783          	lw	a5,-36(s0)
8000496c:	fd842683          	lw	a3,-40(s0)
80004970:	2f870613          	addi	a2,a4,760 # 800212f8 <__stack_top+0xfffdf4e8>
80004974:	00078713          	mv	a4,a5
80004978:	00171713          	slli	a4,a4,0x1
8000497c:	00f70733          	add	a4,a4,a5
80004980:	00271793          	slli	a5,a4,0x2
80004984:	00078713          	mv	a4,a5
80004988:	00068793          	mv	a5,a3
8000498c:	00279793          	slli	a5,a5,0x2
80004990:	00d787b3          	add	a5,a5,a3
80004994:	00579793          	slli	a5,a5,0x5
80004998:	00f707b3          	add	a5,a4,a5
8000499c:	00f607b3          	add	a5,a2,a5
800049a0:	00200713          	li	a4,2
800049a4:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:193
    // verify if every task has finished
    flag = 1;
800049a8:	00100793          	li	a5,1
800049ac:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:194
    for (i = 0; i < applications[app_id].numTasks; i++){
800049b0:	fe042623          	sw	zero,-20(s0)
800049b4:	0600006f          	j	80004a14 <API_DealocateTask+0xc8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:196
        //printsvsv("checking ", i, "task is: ", applications[app_id].tasks[i].status);
        if(applications[app_id].tasks[i].status != TASK_FINISHED){
800049b8:	80021737          	lui	a4,0x80021
800049bc:	fec42783          	lw	a5,-20(s0)
800049c0:	fd842683          	lw	a3,-40(s0)
800049c4:	2f870613          	addi	a2,a4,760 # 800212f8 <__stack_top+0xfffdf4e8>
800049c8:	00078713          	mv	a4,a5
800049cc:	00171713          	slli	a4,a4,0x1
800049d0:	00f70733          	add	a4,a4,a5
800049d4:	00271793          	slli	a5,a4,0x2
800049d8:	00078713          	mv	a4,a5
800049dc:	00068793          	mv	a5,a3
800049e0:	00279793          	slli	a5,a5,0x2
800049e4:	00d787b3          	add	a5,a5,a3
800049e8:	00579793          	slli	a5,a5,0x5
800049ec:	00f707b3          	add	a5,a4,a5
800049f0:	00f607b3          	add	a5,a2,a5
800049f4:	0147a703          	lw	a4,20(a5)
800049f8:	00200793          	li	a5,2
800049fc:	00f70663          	beq	a4,a5,80004a08 <API_DealocateTask+0xbc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:197
            flag = 0;
80004a00:	fe042423          	sw	zero,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:198
            break;
80004a04:	03c0006f          	j	80004a40 <API_DealocateTask+0xf4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:194 (discriminator 2)
    for (i = 0; i < applications[app_id].numTasks; i++){
80004a08:	fec42783          	lw	a5,-20(s0)
80004a0c:	00178793          	addi	a5,a5,1
80004a10:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:194 (discriminator 1)
80004a14:	800216b7          	lui	a3,0x80021
80004a18:	fd842703          	lw	a4,-40(s0)
80004a1c:	00070793          	mv	a5,a4
80004a20:	00279793          	slli	a5,a5,0x2
80004a24:	00e787b3          	add	a5,a5,a4
80004a28:	00579793          	slli	a5,a5,0x5
80004a2c:	2f868713          	addi	a4,a3,760 # 800212f8 <__stack_top+0xfffdf4e8>
80004a30:	00e787b3          	add	a5,a5,a4
80004a34:	0107a783          	lw	a5,16(a5)
80004a38:	fec42703          	lw	a4,-20(s0)
80004a3c:	f6f76ee3          	bltu	a4,a5,800049b8 <API_DealocateTask+0x6c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:202
        }
    }
    // in positive case
    if(flag){
80004a40:	fe842783          	lw	a5,-24(s0)
80004a44:	1e078c63          	beqz	a5,80004c3c <API_DealocateTask+0x2f0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:204
        // register that the application has executed another time
        tick = xTaskGetTickCount();
80004a48:	a09fd0ef          	jal	ra,80002450 <xTaskGetTickCount>
80004a4c:	fea42223          	sw	a0,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:205
        applications[app_id].executed++;
80004a50:	800216b7          	lui	a3,0x80021
80004a54:	fd842703          	lw	a4,-40(s0)
80004a58:	00070793          	mv	a5,a4
80004a5c:	00279793          	slli	a5,a5,0x2
80004a60:	00e787b3          	add	a5,a5,a4
80004a64:	00579793          	slli	a5,a5,0x5
80004a68:	2f868713          	addi	a4,a3,760 # 800212f8 <__stack_top+0xfffdf4e8>
80004a6c:	00e787b3          	add	a5,a5,a4
80004a70:	0907a783          	lw	a5,144(a5)
80004a74:	00178693          	addi	a3,a5,1
80004a78:	80021637          	lui	a2,0x80021
80004a7c:	fd842703          	lw	a4,-40(s0)
80004a80:	00070793          	mv	a5,a4
80004a84:	00279793          	slli	a5,a5,0x2
80004a88:	00e787b3          	add	a5,a5,a4
80004a8c:	00579793          	slli	a5,a5,0x5
80004a90:	2f860713          	addi	a4,a2,760 # 800212f8 <__stack_top+0xfffdf4e8>
80004a94:	00e787b3          	add	a5,a5,a4
80004a98:	08d7a823          	sw	a3,144(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:206
        printsvsv("Application ", app_id, "was executed in ", (tick - applications[app_id].lastStart));
80004a9c:	fd842583          	lw	a1,-40(s0)
80004aa0:	800217b7          	lui	a5,0x80021
80004aa4:	fd842703          	lw	a4,-40(s0)
80004aa8:	2f878693          	addi	a3,a5,760 # 800212f8 <__stack_top+0xfffdf4e8>
80004aac:	00070793          	mv	a5,a4
80004ab0:	00279793          	slli	a5,a5,0x2
80004ab4:	00e787b3          	add	a5,a5,a4
80004ab8:	00579793          	slli	a5,a5,0x5
80004abc:	00f687b3          	add	a5,a3,a5
80004ac0:	0947a783          	lw	a5,148(a5)
80004ac4:	fe442703          	lw	a4,-28(s0)
80004ac8:	40f707b3          	sub	a5,a4,a5
80004acc:	00078693          	mv	a3,a5
80004ad0:	800077b7          	lui	a5,0x80007
80004ad4:	12478613          	addi	a2,a5,292 # 80007124 <__stack_top+0xfffc5314>
80004ad8:	800077b7          	lui	a5,0x80007
80004adc:	13878513          	addi	a0,a5,312 # 80007138 <__stack_top+0xfffc5328>
80004ae0:	c14fe0ef          	jal	ra,80002ef4 <printsvsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:207
        applications[app_id].lastFinish = tick;
80004ae4:	800217b7          	lui	a5,0x80021
80004ae8:	fd842703          	lw	a4,-40(s0)
80004aec:	2f878693          	addi	a3,a5,760 # 800212f8 <__stack_top+0xfffdf4e8>
80004af0:	00070793          	mv	a5,a4
80004af4:	00279793          	slli	a5,a5,0x2
80004af8:	00e787b3          	add	a5,a5,a4
80004afc:	00579793          	slli	a5,a5,0x5
80004b00:	00f687b3          	add	a5,a3,a5
80004b04:	fe442703          	lw	a4,-28(s0)
80004b08:	08e7ae23          	sw	a4,156(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:209
        // if the application must run another time
        if(applications[app_id].appExec > applications[app_id].executed){
80004b0c:	800217b7          	lui	a5,0x80021
80004b10:	fd842703          	lw	a4,-40(s0)
80004b14:	2f878693          	addi	a3,a5,760 # 800212f8 <__stack_top+0xfffdf4e8>
80004b18:	00070793          	mv	a5,a4
80004b1c:	00279793          	slli	a5,a5,0x2
80004b20:	00e787b3          	add	a5,a5,a4
80004b24:	00579793          	slli	a5,a5,0x5
80004b28:	00f687b3          	add	a5,a3,a5
80004b2c:	00c7a683          	lw	a3,12(a5)
80004b30:	80021637          	lui	a2,0x80021
80004b34:	fd842703          	lw	a4,-40(s0)
80004b38:	00070793          	mv	a5,a4
80004b3c:	00279793          	slli	a5,a5,0x2
80004b40:	00e787b3          	add	a5,a5,a4
80004b44:	00579793          	slli	a5,a5,0x5
80004b48:	2f860713          	addi	a4,a2,760 # 800212f8 <__stack_top+0xfffdf4e8>
80004b4c:	00e787b3          	add	a5,a5,a4
80004b50:	0907a783          	lw	a5,144(a5)
80004b54:	0ad7fa63          	bleu	a3,a5,80004c08 <API_DealocateTask+0x2bc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:210
            printsv("\t\tThis application still need to run: ", (applications[app_id].appExec - applications[app_id].executed));
80004b58:	800217b7          	lui	a5,0x80021
80004b5c:	fd842703          	lw	a4,-40(s0)
80004b60:	2f878693          	addi	a3,a5,760 # 800212f8 <__stack_top+0xfffdf4e8>
80004b64:	00070793          	mv	a5,a4
80004b68:	00279793          	slli	a5,a5,0x2
80004b6c:	00e787b3          	add	a5,a5,a4
80004b70:	00579793          	slli	a5,a5,0x5
80004b74:	00f687b3          	add	a5,a3,a5
80004b78:	00c7a683          	lw	a3,12(a5)
80004b7c:	80021637          	lui	a2,0x80021
80004b80:	fd842703          	lw	a4,-40(s0)
80004b84:	00070793          	mv	a5,a4
80004b88:	00279793          	slli	a5,a5,0x2
80004b8c:	00e787b3          	add	a5,a5,a4
80004b90:	00579793          	slli	a5,a5,0x5
80004b94:	2f860713          	addi	a4,a2,760 # 800212f8 <__stack_top+0xfffdf4e8>
80004b98:	00e787b3          	add	a5,a5,a4
80004b9c:	0907a783          	lw	a5,144(a5)
80004ba0:	40f687b3          	sub	a5,a3,a5
80004ba4:	00078593          	mv	a1,a5
80004ba8:	800077b7          	lui	a5,0x80007
80004bac:	14878513          	addi	a0,a5,328 # 80007148 <__stack_top+0xfffc5338>
80004bb0:	af4fe0ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:211
            applications[app_id].nextRun = tick + applications[app_id].appPeriod;
80004bb4:	800217b7          	lui	a5,0x80021
80004bb8:	fd842703          	lw	a4,-40(s0)
80004bbc:	2f878693          	addi	a3,a5,760 # 800212f8 <__stack_top+0xfffdf4e8>
80004bc0:	00070793          	mv	a5,a4
80004bc4:	00279793          	slli	a5,a5,0x2
80004bc8:	00e787b3          	add	a5,a5,a4
80004bcc:	00579793          	slli	a5,a5,0x5
80004bd0:	00f687b3          	add	a5,a3,a5
80004bd4:	0087a703          	lw	a4,8(a5)
80004bd8:	fe442783          	lw	a5,-28(s0)
80004bdc:	00f706b3          	add	a3,a4,a5
80004be0:	800217b7          	lui	a5,0x80021
80004be4:	fd842703          	lw	a4,-40(s0)
80004be8:	2f878613          	addi	a2,a5,760 # 800212f8 <__stack_top+0xfffdf4e8>
80004bec:	00070793          	mv	a5,a4
80004bf0:	00279793          	slli	a5,a5,0x2
80004bf4:	00e787b3          	add	a5,a5,a4
80004bf8:	00579793          	slli	a5,a5,0x5
80004bfc:	00f607b3          	add	a5,a2,a5
80004c00:	08d7a623          	sw	a3,140(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:217
        } else { // if the application has finished its runs
            prints("\t\tThis application is DONE!\n");
            applications[app_id].occupied = FALSE;
        }        
    }
    return;
80004c04:	0380006f          	j	80004c3c <API_DealocateTask+0x2f0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:213
            prints("\t\tThis application is DONE!\n");
80004c08:	800077b7          	lui	a5,0x80007
80004c0c:	17078513          	addi	a0,a5,368 # 80007170 <__stack_top+0xfffc5360>
80004c10:	9e8fe0ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:214
            applications[app_id].occupied = FALSE;
80004c14:	800216b7          	lui	a3,0x80021
80004c18:	fd842703          	lw	a4,-40(s0)
80004c1c:	00070793          	mv	a5,a4
80004c20:	00279793          	slli	a5,a5,0x2
80004c24:	00e787b3          	add	a5,a5,a4
80004c28:	00579793          	slli	a5,a5,0x5
80004c2c:	2f868713          	addi	a4,a3,760 # 800212f8 <__stack_top+0xfffdf4e8>
80004c30:	00e787b3          	add	a5,a5,a4
80004c34:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:217
    return;
80004c38:	00000013          	nop
80004c3c:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:218
}
80004c40:	02c12083          	lw	ra,44(sp)
80004c44:	02812403          	lw	s0,40(sp)
80004c48:	03010113          	addi	sp,sp,48
80004c4c:	00008067          	ret

80004c50 <getNextPriorityAddr>:
getNextPriorityAddr():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:221

// Gets the address of the next tile in the priority list 
unsigned int getNextPriorityAddr(){
80004c50:	fe010113          	addi	sp,sp,-32
80004c54:	00112e23          	sw	ra,28(sp)
80004c58:	00812c23          	sw	s0,24(sp)
80004c5c:	00912a23          	sw	s1,20(sp)
80004c60:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:223
    int i;
    unsigned int addr = makeAddress(0,0);
80004c64:	00000593          	li	a1,0
80004c68:	00000513          	li	a0,0
80004c6c:	f00fe0ef          	jal	ra,8000336c <makeAddress>
80004c70:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:226
    for(;;){
        // Checks if it's a valid address
        if (priorityMatrix[priorityPointer] != makeAddress(0,0)){
80004c74:	800227b7          	lui	a5,0x80022
80004c78:	d947a703          	lw	a4,-620(a5) # 80021d94 <__stack_top+0xfffdff84>
80004c7c:	800217b7          	lui	a5,0x80021
80004c80:	00271713          	slli	a4,a4,0x2
80004c84:	2d478793          	addi	a5,a5,724 # 800212d4 <__stack_top+0xfffdf4c4>
80004c88:	00f707b3          	add	a5,a4,a5
80004c8c:	0007a483          	lw	s1,0(a5)
80004c90:	00000593          	li	a1,0
80004c94:	00000513          	li	a0,0
80004c98:	ed4fe0ef          	jal	ra,8000336c <makeAddress>
80004c9c:	00050793          	mv	a5,a0
80004ca0:	06f48e63          	beq	s1,a5,80004d1c <getNextPriorityAddr+0xcc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:227
            if (Tiles[getXpos(addr)][getYpos(addr)].taskSlots > 0){
80004ca4:	fec42503          	lw	a0,-20(s0)
80004ca8:	ab4fe0ef          	jal	ra,80002f5c <getXpos>
80004cac:	00050493          	mv	s1,a0
80004cb0:	fec42503          	lw	a0,-20(s0)
80004cb4:	ad4fe0ef          	jal	ra,80002f88 <getYpos>
80004cb8:	00050613          	mv	a2,a0
80004cbc:	800227b7          	lui	a5,0x80022
80004cc0:	d9878693          	addi	a3,a5,-616 # 80021d98 <__stack_top+0xfffdff88>
80004cc4:	00060713          	mv	a4,a2
80004cc8:	00171793          	slli	a5,a4,0x1
80004ccc:	00078713          	mv	a4,a5
80004cd0:	00c70733          	add	a4,a4,a2
80004cd4:	00271793          	slli	a5,a4,0x2
80004cd8:	00078713          	mv	a4,a5
80004cdc:	00048793          	mv	a5,s1
80004ce0:	00379793          	slli	a5,a5,0x3
80004ce4:	009787b3          	add	a5,a5,s1
80004ce8:	00279793          	slli	a5,a5,0x2
80004cec:	00f707b3          	add	a5,a4,a5
80004cf0:	00f687b3          	add	a5,a3,a5
80004cf4:	0087a783          	lw	a5,8(a5)
80004cf8:	02078263          	beqz	a5,80004d1c <getNextPriorityAddr+0xcc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:230
            //for(i = 0; i < NUM_MAX_TASKS; i++){
                //if (Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] == NONE)
                    addr = priorityMatrix[priorityPointer];
80004cfc:	800227b7          	lui	a5,0x80022
80004d00:	d947a703          	lw	a4,-620(a5) # 80021d94 <__stack_top+0xfffdff84>
80004d04:	800217b7          	lui	a5,0x80021
80004d08:	00271713          	slli	a4,a4,0x2
80004d0c:	2d478793          	addi	a5,a5,724 # 800212d4 <__stack_top+0xfffdf4c4>
80004d10:	00f707b3          	add	a5,a4,a5
80004d14:	0007a783          	lw	a5,0(a5)
80004d18:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:236
            //}
            }
        }

        // Increments the priorityPointer
        priorityPointer++;
80004d1c:	800227b7          	lui	a5,0x80022
80004d20:	d947a783          	lw	a5,-620(a5) # 80021d94 <__stack_top+0xfffdff84>
80004d24:	00178713          	addi	a4,a5,1
80004d28:	800227b7          	lui	a5,0x80022
80004d2c:	d8e7aa23          	sw	a4,-620(a5) # 80021d94 <__stack_top+0xfffdff84>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:237
        if (priorityPointer == DIM_X*DIM_Y)
80004d30:	800227b7          	lui	a5,0x80022
80004d34:	d947a703          	lw	a4,-620(a5) # 80021d94 <__stack_top+0xfffdff84>
80004d38:	00900793          	li	a5,9
80004d3c:	00f71663          	bne	a4,a5,80004d48 <getNextPriorityAddr+0xf8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:238
            priorityPointer = 0;
80004d40:	800227b7          	lui	a5,0x80022
80004d44:	d807aa23          	sw	zero,-620(a5) # 80021d94 <__stack_top+0xfffdff84>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:241

        // If we found a new valid address, return
        if( addr != makeAddress(0,0))
80004d48:	00000593          	li	a1,0
80004d4c:	00000513          	li	a0,0
80004d50:	e1cfe0ef          	jal	ra,8000336c <makeAddress>
80004d54:	00050713          	mv	a4,a0
80004d58:	fec42783          	lw	a5,-20(s0)
80004d5c:	00e79463          	bne	a5,a4,80004d64 <getNextPriorityAddr+0x114>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:226
        if (priorityMatrix[priorityPointer] != makeAddress(0,0)){
80004d60:	f15ff06f          	j	80004c74 <getNextPriorityAddr+0x24>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:242
            break;
80004d64:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:244
    }
    return addr;
80004d68:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:246
    //return 0x101;
}
80004d6c:	00078513          	mv	a0,a5
80004d70:	01c12083          	lw	ra,28(sp)
80004d74:	01812403          	lw	s0,24(sp)
80004d78:	01412483          	lw	s1,20(sp)
80004d7c:	02010113          	addi	sp,sp,32
80004d80:	00008067          	ret

80004d84 <API_GetTaskSlotFromTile>:
API_GetTaskSlotFromTile():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:249

// Gets a free slot from one given tile
unsigned int API_GetTaskSlotFromTile(unsigned int addr, unsigned int app, unsigned int task){
80004d84:	fe010113          	addi	sp,sp,-32
80004d88:	00112e23          	sw	ra,28(sp)
80004d8c:	00812c23          	sw	s0,24(sp)
80004d90:	00912a23          	sw	s1,20(sp)
80004d94:	01212823          	sw	s2,16(sp)
80004d98:	02010413          	addi	s0,sp,32
80004d9c:	fea42623          	sw	a0,-20(s0)
80004da0:	feb42423          	sw	a1,-24(s0)
80004da4:	fec42223          	sw	a2,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:259
            printsv("\t achei!! > ", i);
            Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] = (app << 16) | task;
            return i;
        }
    }*/
    if(Tiles[getXpos(addr)][getYpos(addr)].taskSlots > 0){
80004da8:	fec42503          	lw	a0,-20(s0)
80004dac:	9b0fe0ef          	jal	ra,80002f5c <getXpos>
80004db0:	00050493          	mv	s1,a0
80004db4:	fec42503          	lw	a0,-20(s0)
80004db8:	9d0fe0ef          	jal	ra,80002f88 <getYpos>
80004dbc:	00050613          	mv	a2,a0
80004dc0:	800227b7          	lui	a5,0x80022
80004dc4:	d9878693          	addi	a3,a5,-616 # 80021d98 <__stack_top+0xfffdff88>
80004dc8:	00060713          	mv	a4,a2
80004dcc:	00171793          	slli	a5,a4,0x1
80004dd0:	00078713          	mv	a4,a5
80004dd4:	00c70733          	add	a4,a4,a2
80004dd8:	00271793          	slli	a5,a4,0x2
80004ddc:	00078713          	mv	a4,a5
80004de0:	00048793          	mv	a5,s1
80004de4:	00379793          	slli	a5,a5,0x3
80004de8:	009787b3          	add	a5,a5,s1
80004dec:	00279793          	slli	a5,a5,0x2
80004df0:	00f707b3          	add	a5,a4,a5
80004df4:	00f687b3          	add	a5,a3,a5
80004df8:	0087a783          	lw	a5,8(a5)
80004dfc:	0a078c63          	beqz	a5,80004eb4 <API_GetTaskSlotFromTile+0x130>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:260
        Tiles[getXpos(addr)][getYpos(addr)].taskSlots = Tiles[getXpos(addr)][getYpos(addr)].taskSlots - 1;
80004e00:	fec42503          	lw	a0,-20(s0)
80004e04:	958fe0ef          	jal	ra,80002f5c <getXpos>
80004e08:	00050493          	mv	s1,a0
80004e0c:	fec42503          	lw	a0,-20(s0)
80004e10:	978fe0ef          	jal	ra,80002f88 <getYpos>
80004e14:	00050613          	mv	a2,a0
80004e18:	800227b7          	lui	a5,0x80022
80004e1c:	d9878693          	addi	a3,a5,-616 # 80021d98 <__stack_top+0xfffdff88>
80004e20:	00060713          	mv	a4,a2
80004e24:	00171793          	slli	a5,a4,0x1
80004e28:	00078713          	mv	a4,a5
80004e2c:	00c70733          	add	a4,a4,a2
80004e30:	00271793          	slli	a5,a4,0x2
80004e34:	00078713          	mv	a4,a5
80004e38:	00048793          	mv	a5,s1
80004e3c:	00379793          	slli	a5,a5,0x3
80004e40:	009787b3          	add	a5,a5,s1
80004e44:	00279793          	slli	a5,a5,0x2
80004e48:	00f707b3          	add	a5,a4,a5
80004e4c:	00f687b3          	add	a5,a3,a5
80004e50:	0087a483          	lw	s1,8(a5)
80004e54:	fec42503          	lw	a0,-20(s0)
80004e58:	904fe0ef          	jal	ra,80002f5c <getXpos>
80004e5c:	00050913          	mv	s2,a0
80004e60:	fec42503          	lw	a0,-20(s0)
80004e64:	924fe0ef          	jal	ra,80002f88 <getYpos>
80004e68:	00050593          	mv	a1,a0
80004e6c:	fff48693          	addi	a3,s1,-1
80004e70:	800227b7          	lui	a5,0x80022
80004e74:	d9878613          	addi	a2,a5,-616 # 80021d98 <__stack_top+0xfffdff88>
80004e78:	00058713          	mv	a4,a1
80004e7c:	00171793          	slli	a5,a4,0x1
80004e80:	00078713          	mv	a4,a5
80004e84:	00b70733          	add	a4,a4,a1
80004e88:	00271793          	slli	a5,a4,0x2
80004e8c:	00078713          	mv	a4,a5
80004e90:	00090793          	mv	a5,s2
80004e94:	00379793          	slli	a5,a5,0x3
80004e98:	012787b3          	add	a5,a5,s2
80004e9c:	00279793          	slli	a5,a5,0x2
80004ea0:	00f707b3          	add	a5,a4,a5
80004ea4:	00f607b3          	add	a5,a2,a5
80004ea8:	00d7a423          	sw	a3,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:261
        return 1;
80004eac:	00100793          	li	a5,1
80004eb0:	0140006f          	j	80004ec4 <API_GetTaskSlotFromTile+0x140>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:263
    }else {
        prints("returning erro5\n");
80004eb4:	800077b7          	lui	a5,0x80007
80004eb8:	19078513          	addi	a0,a5,400 # 80007190 <__stack_top+0xfffc5380>
80004ebc:	f3dfd0ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:264
        return ERRO;
80004ec0:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:266
    }
}
80004ec4:	00078513          	mv	a0,a5
80004ec8:	01c12083          	lw	ra,28(sp)
80004ecc:	01812403          	lw	s0,24(sp)
80004ed0:	01412483          	lw	s1,20(sp)
80004ed4:	01012903          	lw	s2,16(sp)
80004ed8:	02010113          	addi	sp,sp,32
80004edc:	00008067          	ret

80004ee0 <API_ClearTaskSlotFromTile>:
API_ClearTaskSlotFromTile():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:269

// Clear a slot occupied by a given task
unsigned int API_ClearTaskSlotFromTile(unsigned int addr, unsigned int app, unsigned int task){
80004ee0:	fe010113          	addi	sp,sp,-32
80004ee4:	00112e23          	sw	ra,28(sp)
80004ee8:	00812c23          	sw	s0,24(sp)
80004eec:	00912a23          	sw	s1,20(sp)
80004ef0:	02010413          	addi	s0,sp,32
80004ef4:	fea42623          	sw	a0,-20(s0)
80004ef8:	feb42423          	sw	a1,-24(s0)
80004efc:	fec42223          	sw	a2,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:270
    Tiles[getXpos(addr)][getYpos(addr)].taskSlots++;
80004f00:	fec42503          	lw	a0,-20(s0)
80004f04:	858fe0ef          	jal	ra,80002f5c <getXpos>
80004f08:	00050493          	mv	s1,a0
80004f0c:	fec42503          	lw	a0,-20(s0)
80004f10:	878fe0ef          	jal	ra,80002f88 <getYpos>
80004f14:	00050693          	mv	a3,a0
80004f18:	800227b7          	lui	a5,0x80022
80004f1c:	d9878613          	addi	a2,a5,-616 # 80021d98 <__stack_top+0xfffdff88>
80004f20:	00068713          	mv	a4,a3
80004f24:	00171793          	slli	a5,a4,0x1
80004f28:	00078713          	mv	a4,a5
80004f2c:	00d70733          	add	a4,a4,a3
80004f30:	00271793          	slli	a5,a4,0x2
80004f34:	00078713          	mv	a4,a5
80004f38:	00048793          	mv	a5,s1
80004f3c:	00379793          	slli	a5,a5,0x3
80004f40:	009787b3          	add	a5,a5,s1
80004f44:	00279793          	slli	a5,a5,0x2
80004f48:	00f707b3          	add	a5,a4,a5
80004f4c:	00f607b3          	add	a5,a2,a5
80004f50:	0087a783          	lw	a5,8(a5)
80004f54:	00178613          	addi	a2,a5,1
80004f58:	800227b7          	lui	a5,0x80022
80004f5c:	d9878593          	addi	a1,a5,-616 # 80021d98 <__stack_top+0xfffdff88>
80004f60:	00068713          	mv	a4,a3
80004f64:	00171793          	slli	a5,a4,0x1
80004f68:	00078713          	mv	a4,a5
80004f6c:	00d70733          	add	a4,a4,a3
80004f70:	00271793          	slli	a5,a4,0x2
80004f74:	00078713          	mv	a4,a5
80004f78:	00048793          	mv	a5,s1
80004f7c:	00379793          	slli	a5,a5,0x3
80004f80:	009787b3          	add	a5,a5,s1
80004f84:	00279793          	slli	a5,a5,0x2
80004f88:	00f707b3          	add	a5,a4,a5
80004f8c:	00f587b3          	add	a5,a1,a5
80004f90:	00c7a423          	sw	a2,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:271
    if(Tiles[getXpos(addr)][getYpos(addr)].taskSlots >= NUM_MAX_TASKS){
80004f94:	fec42503          	lw	a0,-20(s0)
80004f98:	fc5fd0ef          	jal	ra,80002f5c <getXpos>
80004f9c:	00050493          	mv	s1,a0
80004fa0:	fec42503          	lw	a0,-20(s0)
80004fa4:	fe5fd0ef          	jal	ra,80002f88 <getYpos>
80004fa8:	00050613          	mv	a2,a0
80004fac:	800227b7          	lui	a5,0x80022
80004fb0:	d9878693          	addi	a3,a5,-616 # 80021d98 <__stack_top+0xfffdff88>
80004fb4:	00060713          	mv	a4,a2
80004fb8:	00171793          	slli	a5,a4,0x1
80004fbc:	00078713          	mv	a4,a5
80004fc0:	00c70733          	add	a4,a4,a2
80004fc4:	00271793          	slli	a5,a4,0x2
80004fc8:	00078713          	mv	a4,a5
80004fcc:	00048793          	mv	a5,s1
80004fd0:	00379793          	slli	a5,a5,0x3
80004fd4:	009787b3          	add	a5,a5,s1
80004fd8:	00279793          	slli	a5,a5,0x2
80004fdc:	00f707b3          	add	a5,a4,a5
80004fe0:	00f687b3          	add	a5,a3,a5
80004fe4:	0087a703          	lw	a4,8(a5)
80004fe8:	00500793          	li	a5,5
80004fec:	00e7fc63          	bleu	a4,a5,80005004 <API_ClearTaskSlotFromTile+0x124>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:272
        prints("returning erro6\n");
80004ff0:	800077b7          	lui	a5,0x80007
80004ff4:	1a478513          	addi	a0,a5,420 # 800071a4 <__stack_top+0xfffc5394>
80004ff8:	e01fd0ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:273
        return ERRO;
80004ffc:	fff00793          	li	a5,-1
80005000:	0080006f          	j	80005008 <API_ClearTaskSlotFromTile+0x128>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:276
    }
    else{
        return 1;
80005004:	00100793          	li	a5,1
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:280
    }
    prints("returning erro7\n");
    return ERRO;
}
80005008:	00078513          	mv	a0,a5
8000500c:	01c12083          	lw	ra,28(sp)
80005010:	01812403          	lw	s0,24(sp)
80005014:	01412483          	lw	s1,20(sp)
80005018:	02010113          	addi	sp,sp,32
8000501c:	00008067          	ret

80005020 <API_GetSystemTasksSlots>:
API_GetSystemTasksSlots():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:283

// Iterates around the system tiles to sum the amount of tasks slots available
unsigned int API_GetSystemTasksSlots(){
80005020:	fe010113          	addi	sp,sp,-32
80005024:	00112e23          	sw	ra,28(sp)
80005028:	00812c23          	sw	s0,24(sp)
8000502c:	00912a23          	sw	s1,20(sp)
80005030:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:285
    int m, n, i, sum;
    sum = 0;
80005034:	fe042223          	sw	zero,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:286
    for(m = 0; m < DIM_X; m++){
80005038:	fe042623          	sw	zero,-20(s0)
8000503c:	0a80006f          	j	800050e4 <API_GetSystemTasksSlots+0xc4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:287
        for(n = 0; n < DIM_Y; n++){
80005040:	fe042423          	sw	zero,-24(s0)
80005044:	0880006f          	j	800050cc <API_GetSystemTasksSlots+0xac>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:288
            if(makeAddress(m,n) != makeAddress(0,0)){
80005048:	fec42783          	lw	a5,-20(s0)
8000504c:	fe842703          	lw	a4,-24(s0)
80005050:	00070593          	mv	a1,a4
80005054:	00078513          	mv	a0,a5
80005058:	b14fe0ef          	jal	ra,8000336c <makeAddress>
8000505c:	00050493          	mv	s1,a0
80005060:	00000593          	li	a1,0
80005064:	00000513          	li	a0,0
80005068:	b04fe0ef          	jal	ra,8000336c <makeAddress>
8000506c:	00050793          	mv	a5,a0
80005070:	04f48863          	beq	s1,a5,800050c0 <API_GetSystemTasksSlots+0xa0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:289
                sum += Tiles[m][n].taskSlots;
80005074:	80022737          	lui	a4,0x80022
80005078:	fe842783          	lw	a5,-24(s0)
8000507c:	fec42683          	lw	a3,-20(s0)
80005080:	d9870613          	addi	a2,a4,-616 # 80021d98 <__stack_top+0xfffdff88>
80005084:	00078713          	mv	a4,a5
80005088:	00171713          	slli	a4,a4,0x1
8000508c:	00f70733          	add	a4,a4,a5
80005090:	00271793          	slli	a5,a4,0x2
80005094:	00078713          	mv	a4,a5
80005098:	00068793          	mv	a5,a3
8000509c:	00379793          	slli	a5,a5,0x3
800050a0:	00d787b3          	add	a5,a5,a3
800050a4:	00279793          	slli	a5,a5,0x2
800050a8:	00f707b3          	add	a5,a4,a5
800050ac:	00f607b3          	add	a5,a2,a5
800050b0:	0087a703          	lw	a4,8(a5)
800050b4:	fe442783          	lw	a5,-28(s0)
800050b8:	00f707b3          	add	a5,a4,a5
800050bc:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:287 (discriminator 2)
        for(n = 0; n < DIM_Y; n++){
800050c0:	fe842783          	lw	a5,-24(s0)
800050c4:	00178793          	addi	a5,a5,1
800050c8:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:287 (discriminator 1)
800050cc:	fe842703          	lw	a4,-24(s0)
800050d0:	00200793          	li	a5,2
800050d4:	f6e7dae3          	ble	a4,a5,80005048 <API_GetSystemTasksSlots+0x28>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:286 (discriminator 2)
    for(m = 0; m < DIM_X; m++){
800050d8:	fec42783          	lw	a5,-20(s0)
800050dc:	00178793          	addi	a5,a5,1
800050e0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:286 (discriminator 1)
800050e4:	fec42703          	lw	a4,-20(s0)
800050e8:	00200793          	li	a5,2
800050ec:	f4e7dae3          	ble	a4,a5,80005040 <API_GetSystemTasksSlots+0x20>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:293
            }
        }
    }
    return sum;
800050f0:	fe442783          	lw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:294
}
800050f4:	00078513          	mv	a0,a5
800050f8:	01c12083          	lw	ra,28(sp)
800050fc:	01812403          	lw	s0,24(sp)
80005100:	01412483          	lw	s1,20(sp)
80005104:	02010113          	addi	sp,sp,32
80005108:	00008067          	ret

8000510c <API_RepositoryAllocation>:
API_RepositoryAllocation():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:296

void API_RepositoryAllocation(unsigned int app, unsigned int task, unsigned int dest_addr){
8000510c:	fd010113          	addi	sp,sp,-48
80005110:	02112623          	sw	ra,44(sp)
80005114:	02812423          	sw	s0,40(sp)
80005118:	03010413          	addi	s0,sp,48
8000511c:	fca42e23          	sw	a0,-36(s0)
80005120:	fcb42c23          	sw	a1,-40(s0)
80005124:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:299
    unsigned int mySlot;
    do{
        vPortEnterCritical();
80005128:	ce4fc0ef          	jal	ra,8000160c <vPortEnterCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:300
        mySlot = API_GetServiceSlot();
8000512c:	7e5000ef          	jal	ra,80006110 <API_GetServiceSlot>
80005130:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:301
        if(mySlot == PIPE_FULL){
80005134:	fec42703          	lw	a4,-20(s0)
80005138:	fdfe07b7          	lui	a5,0xfdfe0
8000513c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9dfed>
80005140:	04f71663          	bne	a4,a5,8000518c <API_RepositoryAllocation+0x80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:305
            //vPortExitCritical();
            // while(HW_get_32bit_reg(NI_TX) == NI_STATUS_ON){ /* pooling */}
            // vPortEnterCritical();
            if (HW_get_32bit_reg(NI_TX) == NI_STATUS_INTER){
80005144:	500007b7          	lui	a5,0x50000
80005148:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
8000514c:	e0dfb0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
80005150:	00050713          	mv	a4,a0
80005154:	000017b7          	lui	a5,0x1
80005158:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
8000515c:	02f71663          	bne	a4,a5,80005188 <API_RepositoryAllocation+0x7c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:306
                API_ClearPipeSlot(SendingSlot);
80005160:	800217b7          	lui	a5,0x80021
80005164:	8587a783          	lw	a5,-1960(a5) # 80020858 <__stack_top+0xfffdea48>
80005168:	00078513          	mv	a0,a5
8000516c:	044010ef          	jal	ra,800061b0 <API_ClearPipeSlot>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:307
                HW_set_32bit_reg(NI_TX, DONE);
80005170:	000057b7          	lui	a5,0x5
80005174:	55578593          	addi	a1,a5,1365 # 5555 <HEAP_SIZE-0xaaab>
80005178:	500007b7          	lui	a5,0x50000
8000517c:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80005180:	dd1fb0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:308
                API_Try2Send();
80005184:	b54fe0ef          	jal	ra,800034d8 <API_Try2Send>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:310
            }
            vPortExitCritical();
80005188:	cb8fc0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:313
            //asm("wfi");
        }
    }while(mySlot == PIPE_FULL);
8000518c:	fec42703          	lw	a4,-20(s0)
80005190:	fdfe07b7          	lui	a5,0xfdfe0
80005194:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9dfed>
80005198:	f8f708e3          	beq	a4,a5,80005128 <API_RepositoryAllocation+0x1c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:314
    printsv("I got a free service slot!! -> ", mySlot);
8000519c:	fec42783          	lw	a5,-20(s0)
800051a0:	00078593          	mv	a1,a5
800051a4:	800077b7          	lui	a5,0x80007
800051a8:	1b878513          	addi	a0,a5,440 # 800071b8 <__stack_top+0xfffc53a8>
800051ac:	cf9fd0ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:316

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
800051b0:	800217b7          	lui	a5,0x80021
800051b4:	fec42703          	lw	a4,-20(s0)
800051b8:	85c78693          	addi	a3,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
800051bc:	00070793          	mv	a5,a4
800051c0:	00479793          	slli	a5,a5,0x4
800051c4:	40e787b3          	sub	a5,a5,a4
800051c8:	00279793          	slli	a5,a5,0x2
800051cc:	00f687b3          	add	a5,a3,a5
800051d0:	feff0737          	lui	a4,0xfeff0
800051d4:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efae0ee>
800051d8:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:318

    ServicePipe[mySlot].header.header           = makeAddress(0, 0) | PERIPH_SOUTH;
800051dc:	00000593          	li	a1,0
800051e0:	00000513          	li	a0,0
800051e4:	988fe0ef          	jal	ra,8000336c <makeAddress>
800051e8:	00050713          	mv	a4,a0
800051ec:	000407b7          	lui	a5,0x40
800051f0:	00f766b3          	or	a3,a4,a5
800051f4:	800217b7          	lui	a5,0x80021
800051f8:	fec42703          	lw	a4,-20(s0)
800051fc:	85c78613          	addi	a2,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
80005200:	00070793          	mv	a5,a4
80005204:	00479793          	slli	a5,a5,0x4
80005208:	40e787b3          	sub	a5,a5,a4
8000520c:	00279793          	slli	a5,a5,0x2
80005210:	00f607b3          	add	a5,a2,a5
80005214:	00d7a423          	sw	a3,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:319
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80005218:	800217b7          	lui	a5,0x80021
8000521c:	fec42703          	lw	a4,-20(s0)
80005220:	85c78693          	addi	a3,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
80005224:	00070793          	mv	a5,a4
80005228:	00479793          	slli	a5,a5,0x4
8000522c:	40e787b3          	sub	a5,a5,a4
80005230:	00279793          	slli	a5,a5,0x2
80005234:	00f687b3          	add	a5,a3,a5
80005238:	00b00713          	li	a4,11
8000523c:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:320
    ServicePipe[mySlot].header.service          = TASK_ALLOCATION_SEND;
80005240:	800217b7          	lui	a5,0x80021
80005244:	fec42703          	lw	a4,-20(s0)
80005248:	85c78693          	addi	a3,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
8000524c:	00070793          	mv	a5,a4
80005250:	00479793          	slli	a5,a5,0x4
80005254:	40e787b3          	sub	a5,a5,a4
80005258:	00279793          	slli	a5,a5,0x2
8000525c:	00f687b3          	add	a5,a3,a5
80005260:	03000713          	li	a4,48
80005264:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:321
    ServicePipe[mySlot].header.task_id          = task;
80005268:	800217b7          	lui	a5,0x80021
8000526c:	fec42703          	lw	a4,-20(s0)
80005270:	85c78693          	addi	a3,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
80005274:	00070793          	mv	a5,a4
80005278:	00479793          	slli	a5,a5,0x4
8000527c:	40e787b3          	sub	a5,a5,a4
80005280:	00279793          	slli	a5,a5,0x2
80005284:	00f687b3          	add	a5,a3,a5
80005288:	fd842703          	lw	a4,-40(s0)
8000528c:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:322
    ServicePipe[mySlot].header.task_app_id      = app;
80005290:	800217b7          	lui	a5,0x80021
80005294:	fec42703          	lw	a4,-20(s0)
80005298:	85c78693          	addi	a3,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
8000529c:	00070793          	mv	a5,a4
800052a0:	00479793          	slli	a5,a5,0x4
800052a4:	40e787b3          	sub	a5,a5,a4
800052a8:	00279793          	slli	a5,a5,0x2
800052ac:	00f687b3          	add	a5,a3,a5
800052b0:	fdc42703          	lw	a4,-36(s0)
800052b4:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:323
    ServicePipe[mySlot].header.task_dest_addr   = dest_addr;
800052b8:	800217b7          	lui	a5,0x80021
800052bc:	fec42703          	lw	a4,-20(s0)
800052c0:	85c78693          	addi	a3,a5,-1956 # 8002085c <__stack_top+0xfffdea4c>
800052c4:	00070793          	mv	a5,a4
800052c8:	00479793          	slli	a5,a5,0x4
800052cc:	40e787b3          	sub	a5,a5,a4
800052d0:	00279793          	slli	a5,a5,0x2
800052d4:	00f687b3          	add	a5,a3,a5
800052d8:	fd442703          	lw	a4,-44(s0)
800052dc:	02e7ac23          	sw	a4,56(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:325

    API_PushSendQueue(SERVICE, mySlot);
800052e0:	fec42583          	lw	a1,-20(s0)
800052e4:	10100537          	lui	a0,0x10100
800052e8:	8c4fe0ef          	jal	ra,800033ac <API_PushSendQueue>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:326
    vPortExitCritical();
800052ec:	b54fc0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:327
    return;    
800052f0:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:328
}
800052f4:	02c12083          	lw	ra,44(sp)
800052f8:	02812403          	lw	s0,40(sp)
800052fc:	03010113          	addi	sp,sp,48
80005300:	00008067          	ret

80005304 <API_TaskAllocated>:
API_TaskAllocated():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:330

void API_TaskAllocated(unsigned int task_id, unsigned int app_id){
80005304:	fd010113          	addi	sp,sp,-48
80005308:	02112623          	sw	ra,44(sp)
8000530c:	02812423          	sw	s0,40(sp)
80005310:	03010413          	addi	s0,sp,48
80005314:	fca42e23          	sw	a0,-36(s0)
80005318:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:332
    unsigned int i;
    applications[app_id].tasks[task_id].status = TASK_ALLOCATED;
8000531c:	80021737          	lui	a4,0x80021
80005320:	fdc42783          	lw	a5,-36(s0)
80005324:	fd842683          	lw	a3,-40(s0)
80005328:	2f870613          	addi	a2,a4,760 # 800212f8 <__stack_top+0xfffdf4e8>
8000532c:	00078713          	mv	a4,a5
80005330:	00171713          	slli	a4,a4,0x1
80005334:	00f70733          	add	a4,a4,a5
80005338:	00271793          	slli	a5,a4,0x2
8000533c:	00078713          	mv	a4,a5
80005340:	00068793          	mv	a5,a3
80005344:	00279793          	slli	a5,a5,0x2
80005348:	00d787b3          	add	a5,a5,a3
8000534c:	00579793          	slli	a5,a5,0x5
80005350:	00f707b3          	add	a5,a4,a5
80005354:	00f607b3          	add	a5,a2,a5
80005358:	00400713          	li	a4,4
8000535c:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:334

    for(i = 0; i < applications[app_id].numTasks; i++){
80005360:	fe042623          	sw	zero,-20(s0)
80005364:	0580006f          	j	800053bc <API_TaskAllocated+0xb8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:335
        if(applications[app_id].tasks[i].status != TASK_ALLOCATED){
80005368:	80021737          	lui	a4,0x80021
8000536c:	fec42783          	lw	a5,-20(s0)
80005370:	fd842683          	lw	a3,-40(s0)
80005374:	2f870613          	addi	a2,a4,760 # 800212f8 <__stack_top+0xfffdf4e8>
80005378:	00078713          	mv	a4,a5
8000537c:	00171713          	slli	a4,a4,0x1
80005380:	00f70733          	add	a4,a4,a5
80005384:	00271793          	slli	a5,a4,0x2
80005388:	00078713          	mv	a4,a5
8000538c:	00068793          	mv	a5,a3
80005390:	00279793          	slli	a5,a5,0x2
80005394:	00d787b3          	add	a5,a5,a3
80005398:	00579793          	slli	a5,a5,0x5
8000539c:	00f707b3          	add	a5,a4,a5
800053a0:	00f607b3          	add	a5,a2,a5
800053a4:	0147a703          	lw	a4,20(a5)
800053a8:	00400793          	li	a5,4
800053ac:	06f71663          	bne	a4,a5,80005418 <API_TaskAllocated+0x114>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:334 (discriminator 2)
    for(i = 0; i < applications[app_id].numTasks; i++){
800053b0:	fec42783          	lw	a5,-20(s0)
800053b4:	00178793          	addi	a5,a5,1
800053b8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:334 (discriminator 1)
800053bc:	800216b7          	lui	a3,0x80021
800053c0:	fd842703          	lw	a4,-40(s0)
800053c4:	00070793          	mv	a5,a4
800053c8:	00279793          	slli	a5,a5,0x2
800053cc:	00e787b3          	add	a5,a5,a4
800053d0:	00579793          	slli	a5,a5,0x5
800053d4:	2f868713          	addi	a4,a3,760 # 800212f8 <__stack_top+0xfffdf4e8>
800053d8:	00e787b3          	add	a5,a5,a4
800053dc:	0107a783          	lw	a5,16(a5)
800053e0:	fec42703          	lw	a4,-20(s0)
800053e4:	f8f762e3          	bltu	a4,a5,80005368 <API_TaskAllocated+0x64>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:340
            //printi(i);
            return;
        }
    }
    printsv("Application allocated: ", app_id);
800053e8:	fd842783          	lw	a5,-40(s0)
800053ec:	00078593          	mv	a1,a5
800053f0:	800077b7          	lui	a5,0x80007
800053f4:	1d878513          	addi	a0,a5,472 # 800071d8 <__stack_top+0xfffc53c8>
800053f8:	aadfd0ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:341
    API_ApplicationStart(app_id);
800053fc:	fd842503          	lw	a0,-40(s0)
80005400:	02c000ef          	jal	ra,8000542c <API_ApplicationStart>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:342
    prints("\tStart command sent to every task.\n");
80005404:	800077b7          	lui	a5,0x80007
80005408:	1f078513          	addi	a0,a5,496 # 800071f0 <__stack_top+0xfffc53e0>
8000540c:	9edfd0ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:343
    return;
80005410:	00000013          	nop
80005414:	0080006f          	j	8000541c <API_TaskAllocated+0x118>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:337
            return;
80005418:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:344
}
8000541c:	02c12083          	lw	ra,44(sp)
80005420:	02812403          	lw	s0,40(sp)
80005424:	03010113          	addi	sp,sp,48
80005428:	00008067          	ret

8000542c <API_ApplicationStart>:
API_ApplicationStart():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:346

void API_ApplicationStart(unsigned int app_id){
8000542c:	fd010113          	addi	sp,sp,-48
80005430:	02112623          	sw	ra,44(sp)
80005434:	02812423          	sw	s0,40(sp)
80005438:	03010413          	addi	s0,sp,48
8000543c:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:349
    unsigned int i, j;
    unsigned int mySlot;
    for(i = 0; i < applications[app_id].numTasks; i++){
80005440:	fe042623          	sw	zero,-20(s0)
80005444:	2b00006f          	j	800056f4 <API_ApplicationStart+0x2c8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:351
        do{
            vPortEnterCritical();
80005448:	9c4fc0ef          	jal	ra,8000160c <vPortEnterCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:352
            mySlot = API_GetMessageSlot();
8000544c:	379000ef          	jal	ra,80005fc4 <API_GetMessageSlot>
80005450:	fea42223          	sw	a0,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:353
            if(mySlot == PIPE_FULL){
80005454:	fe442703          	lw	a4,-28(s0)
80005458:	fdfe07b7          	lui	a5,0xfdfe0
8000545c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9dfed>
80005460:	04f71663          	bne	a4,a5,800054ac <API_ApplicationStart+0x80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:357
                //vPortExitCritical();
                // while(HW_get_32bit_reg(NI_TX) == NI_STATUS_ON){ /* pooling */}
                // vPortEnterCritical();
                if (HW_get_32bit_reg(NI_TX) == NI_STATUS_INTER){
80005464:	500007b7          	lui	a5,0x50000
80005468:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
8000546c:	aedfb0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
80005470:	00050713          	mv	a4,a0
80005474:	000017b7          	lui	a5,0x1
80005478:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
8000547c:	02f71663          	bne	a4,a5,800054a8 <API_ApplicationStart+0x7c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:358
                    API_ClearPipeSlot(SendingSlot);
80005480:	800217b7          	lui	a5,0x80021
80005484:	8587a783          	lw	a5,-1960(a5) # 80020858 <__stack_top+0xfffdea48>
80005488:	00078513          	mv	a0,a5
8000548c:	525000ef          	jal	ra,800061b0 <API_ClearPipeSlot>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:359
                    HW_set_32bit_reg(NI_TX, DONE);
80005490:	000057b7          	lui	a5,0x5
80005494:	55578593          	addi	a1,a5,1365 # 5555 <HEAP_SIZE-0xaaab>
80005498:	500007b7          	lui	a5,0x50000
8000549c:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
800054a0:	ab1fb0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:360
                    API_Try2Send();
800054a4:	834fe0ef          	jal	ra,800034d8 <API_Try2Send>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:362
                }
                vPortExitCritical();
800054a8:	998fc0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:365
                //asm("wfi");
            }
        }while(mySlot == PIPE_FULL);
800054ac:	fe442703          	lw	a4,-28(s0)
800054b0:	fdfe07b7          	lui	a5,0xfdfe0
800054b4:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9dfed>
800054b8:	f8f708e3          	beq	a4,a5,80005448 <API_ApplicationStart+0x1c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:367

        MessagePipe[mySlot].holder = PIPE_SYS_HOLDER;
800054bc:	800217b7          	lui	a5,0x80021
800054c0:	fe442683          	lw	a3,-28(s0)
800054c4:	9c078713          	addi	a4,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
800054c8:	24400793          	li	a5,580
800054cc:	02f687b3          	mul	a5,a3,a5
800054d0:	00f707b3          	add	a5,a4,a5
800054d4:	feff0737          	lui	a4,0xfeff0
800054d8:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efae0ee>
800054dc:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:369

        MessagePipe[mySlot].header.header           = applications[app_id].tasks[i].addr;
800054e0:	80021737          	lui	a4,0x80021
800054e4:	fec42783          	lw	a5,-20(s0)
800054e8:	fdc42683          	lw	a3,-36(s0)
800054ec:	2f870613          	addi	a2,a4,760 # 800212f8 <__stack_top+0xfffdf4e8>
800054f0:	00078713          	mv	a4,a5
800054f4:	00171713          	slli	a4,a4,0x1
800054f8:	00f70733          	add	a4,a4,a5
800054fc:	00271793          	slli	a5,a4,0x2
80005500:	00078713          	mv	a4,a5
80005504:	00068793          	mv	a5,a3
80005508:	00279793          	slli	a5,a5,0x2
8000550c:	00d787b3          	add	a5,a5,a3
80005510:	00579793          	slli	a5,a5,0x5
80005514:	00f707b3          	add	a5,a4,a5
80005518:	00f607b3          	add	a5,a2,a5
8000551c:	0187a703          	lw	a4,24(a5)
80005520:	800217b7          	lui	a5,0x80021
80005524:	fe442603          	lw	a2,-28(s0)
80005528:	9c078693          	addi	a3,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
8000552c:	24400793          	li	a5,580
80005530:	02f607b3          	mul	a5,a2,a5
80005534:	00f687b3          	add	a5,a3,a5
80005538:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:370
        MessagePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE + applications[app_id].numTasks + 1;
8000553c:	800216b7          	lui	a3,0x80021
80005540:	fdc42703          	lw	a4,-36(s0)
80005544:	00070793          	mv	a5,a4
80005548:	00279793          	slli	a5,a5,0x2
8000554c:	00e787b3          	add	a5,a5,a4
80005550:	00579793          	slli	a5,a5,0x5
80005554:	2f868713          	addi	a4,a3,760 # 800212f8 <__stack_top+0xfffdf4e8>
80005558:	00e787b3          	add	a5,a5,a4
8000555c:	0107a783          	lw	a5,16(a5)
80005560:	00c78713          	addi	a4,a5,12
80005564:	800217b7          	lui	a5,0x80021
80005568:	fe442603          	lw	a2,-28(s0)
8000556c:	9c078693          	addi	a3,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
80005570:	24400793          	li	a5,580
80005574:	02f607b3          	mul	a5,a2,a5
80005578:	00f687b3          	add	a5,a3,a5
8000557c:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:371
        MessagePipe[mySlot].header.service          = TASK_START;
80005580:	800217b7          	lui	a5,0x80021
80005584:	fe442683          	lw	a3,-28(s0)
80005588:	9c078713          	addi	a4,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
8000558c:	24400793          	li	a5,580
80005590:	02f687b3          	mul	a5,a3,a5
80005594:	00f707b3          	add	a5,a4,a5
80005598:	40000713          	li	a4,1024
8000559c:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:372
        MessagePipe[mySlot].header.task_id          = i;
800055a0:	800217b7          	lui	a5,0x80021
800055a4:	fe442683          	lw	a3,-28(s0)
800055a8:	9c078713          	addi	a4,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
800055ac:	24400793          	li	a5,580
800055b0:	02f687b3          	mul	a5,a3,a5
800055b4:	00f707b3          	add	a5,a4,a5
800055b8:	fec42703          	lw	a4,-20(s0)
800055bc:	00e7ac23          	sw	a4,24(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:373
        MessagePipe[mySlot].header.task_app_id      = app_id;
800055c0:	800217b7          	lui	a5,0x80021
800055c4:	fe442683          	lw	a3,-28(s0)
800055c8:	9c078713          	addi	a4,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
800055cc:	24400793          	li	a5,580
800055d0:	02f687b3          	mul	a5,a3,a5
800055d4:	00f707b3          	add	a5,a4,a5
800055d8:	fdc42703          	lw	a4,-36(s0)
800055dc:	02e7a423          	sw	a4,40(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:374
        MessagePipe[mySlot].msg.length              = applications[app_id].numTasks;
800055e0:	800216b7          	lui	a3,0x80021
800055e4:	fdc42703          	lw	a4,-36(s0)
800055e8:	00070793          	mv	a5,a4
800055ec:	00279793          	slli	a5,a5,0x2
800055f0:	00e787b3          	add	a5,a5,a4
800055f4:	00579793          	slli	a5,a5,0x5
800055f8:	2f868713          	addi	a4,a3,760 # 800212f8 <__stack_top+0xfffdf4e8>
800055fc:	00e787b3          	add	a5,a5,a4
80005600:	0107a703          	lw	a4,16(a5)
80005604:	800217b7          	lui	a5,0x80021
80005608:	fe442603          	lw	a2,-28(s0)
8000560c:	24400693          	li	a3,580
80005610:	02d606b3          	mul	a3,a2,a3
80005614:	9c078793          	addi	a5,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
80005618:	00f687b3          	add	a5,a3,a5
8000561c:	04e7a023          	sw	a4,64(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:375
        for(j = 0; j < applications[app_id].numTasks; j++){
80005620:	fe042423          	sw	zero,-24(s0)
80005624:	0880006f          	j	800056ac <API_ApplicationStart+0x280>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:376 (discriminator 3)
            MessagePipe[mySlot].msg.msg[j]          = applications[app_id].tasks[j].addr;
80005628:	80021737          	lui	a4,0x80021
8000562c:	fe842783          	lw	a5,-24(s0)
80005630:	fdc42683          	lw	a3,-36(s0)
80005634:	2f870613          	addi	a2,a4,760 # 800212f8 <__stack_top+0xfffdf4e8>
80005638:	00078713          	mv	a4,a5
8000563c:	00171713          	slli	a4,a4,0x1
80005640:	00f70733          	add	a4,a4,a5
80005644:	00271793          	slli	a5,a4,0x2
80005648:	00078713          	mv	a4,a5
8000564c:	00068793          	mv	a5,a3
80005650:	00279793          	slli	a5,a5,0x2
80005654:	00d787b3          	add	a5,a5,a3
80005658:	00579793          	slli	a5,a5,0x5
8000565c:	00f707b3          	add	a5,a4,a5
80005660:	00f607b3          	add	a5,a2,a5
80005664:	0187a683          	lw	a3,24(a5)
80005668:	80021637          	lui	a2,0x80021
8000566c:	fe442703          	lw	a4,-28(s0)
80005670:	00070793          	mv	a5,a4
80005674:	00379793          	slli	a5,a5,0x3
80005678:	00e787b3          	add	a5,a5,a4
8000567c:	00479793          	slli	a5,a5,0x4
80005680:	00e787b3          	add	a5,a5,a4
80005684:	fe842703          	lw	a4,-24(s0)
80005688:	00e787b3          	add	a5,a5,a4
8000568c:	01078793          	addi	a5,a5,16
80005690:	9c060713          	addi	a4,a2,-1600 # 800209c0 <__stack_top+0xfffdebb0>
80005694:	00279793          	slli	a5,a5,0x2
80005698:	00f707b3          	add	a5,a4,a5
8000569c:	00d7a223          	sw	a3,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:375 (discriminator 3)
        for(j = 0; j < applications[app_id].numTasks; j++){
800056a0:	fe842783          	lw	a5,-24(s0)
800056a4:	00178793          	addi	a5,a5,1
800056a8:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:375 (discriminator 1)
800056ac:	800216b7          	lui	a3,0x80021
800056b0:	fdc42703          	lw	a4,-36(s0)
800056b4:	00070793          	mv	a5,a4
800056b8:	00279793          	slli	a5,a5,0x2
800056bc:	00e787b3          	add	a5,a5,a4
800056c0:	00579793          	slli	a5,a5,0x5
800056c4:	2f868713          	addi	a4,a3,760 # 800212f8 <__stack_top+0xfffdf4e8>
800056c8:	00e787b3          	add	a5,a5,a4
800056cc:	0107a783          	lw	a5,16(a5)
800056d0:	fe842703          	lw	a4,-24(s0)
800056d4:	f4f76ae3          	bltu	a4,a5,80005628 <API_ApplicationStart+0x1fc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:378 (discriminator 2)
        }
        API_PushSendQueue(MESSAGE, mySlot);
800056d8:	fe442583          	lw	a1,-28(s0)
800056dc:	20200537          	lui	a0,0x20200
800056e0:	ccdfd0ef          	jal	ra,800033ac <API_PushSendQueue>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:379 (discriminator 2)
        vPortExitCritical();
800056e4:	f5dfb0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:349 (discriminator 2)
    for(i = 0; i < applications[app_id].numTasks; i++){
800056e8:	fec42783          	lw	a5,-20(s0)
800056ec:	00178793          	addi	a5,a5,1
800056f0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:349 (discriminator 1)
800056f4:	800216b7          	lui	a3,0x80021
800056f8:	fdc42703          	lw	a4,-36(s0)
800056fc:	00070793          	mv	a5,a4
80005700:	00279793          	slli	a5,a5,0x2
80005704:	00e787b3          	add	a5,a5,a4
80005708:	00579793          	slli	a5,a5,0x5
8000570c:	2f868713          	addi	a4,a3,760 # 800212f8 <__stack_top+0xfffdf4e8>
80005710:	00e787b3          	add	a5,a5,a4
80005714:	0107a783          	lw	a5,16(a5)
80005718:	fec42703          	lw	a4,-20(s0)
8000571c:	d2f766e3          	bltu	a4,a5,80005448 <API_ApplicationStart+0x1c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:381
    }
    return;
80005720:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:382
}
80005724:	02c12083          	lw	ra,44(sp)
80005728:	02812403          	lw	s0,40(sp)
8000572c:	03010113          	addi	sp,sp,48
80005730:	00008067          	ret

80005734 <API_TaskListInit>:
API_TaskListInit():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:13
#include "chronos.h"

// Stores information about each running task
//extern volatile Task TaskList[ NUM_MAX_TASKS ];

void API_TaskListInit(){
80005734:	fe010113          	addi	sp,sp,-32
80005738:	00812e23          	sw	s0,28(sp)
8000573c:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:15
    unsigned int i, j;
    for (i = 0; i < NUM_MAX_TASKS; i++){
80005740:	fe042623          	sw	zero,-20(s0)
80005744:	0840006f          	j	800057c8 <API_TaskListInit+0x94>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:16
        TaskList[i].status = TASK_SLOT_EMPTY;
80005748:	800226b7          	lui	a3,0x80022
8000574c:	fec42703          	lw	a4,-20(s0)
80005750:	00070793          	mv	a5,a4
80005754:	00579793          	slli	a5,a5,0x5
80005758:	00e787b3          	add	a5,a5,a4
8000575c:	00279793          	slli	a5,a5,0x2
80005760:	a7868713          	addi	a4,a3,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80005764:	00e787b3          	add	a5,a5,a4
80005768:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:17
        for (j = 0; j < NUM_MAX_APP_TASKS; j++){
8000576c:	fe042423          	sw	zero,-24(s0)
80005770:	0400006f          	j	800057b0 <API_TaskListInit+0x7c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:18 (discriminator 3)
            TaskList[i].PendingReq[j] = FALSE;
80005774:	800226b7          	lui	a3,0x80022
80005778:	fec42703          	lw	a4,-20(s0)
8000577c:	00070793          	mv	a5,a4
80005780:	00579793          	slli	a5,a5,0x5
80005784:	00e787b3          	add	a5,a5,a4
80005788:	fe842703          	lw	a4,-24(s0)
8000578c:	00e787b3          	add	a5,a5,a4
80005790:	00c78793          	addi	a5,a5,12
80005794:	00279713          	slli	a4,a5,0x2
80005798:	a7868793          	addi	a5,a3,-1416 # 80021a78 <__stack_top+0xfffdfc68>
8000579c:	00f707b3          	add	a5,a4,a5
800057a0:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:17 (discriminator 3)
        for (j = 0; j < NUM_MAX_APP_TASKS; j++){
800057a4:	fe842783          	lw	a5,-24(s0)
800057a8:	00178793          	addi	a5,a5,1
800057ac:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:17 (discriminator 1)
800057b0:	fe842703          	lw	a4,-24(s0)
800057b4:	00900793          	li	a5,9
800057b8:	fae7fee3          	bleu	a4,a5,80005774 <API_TaskListInit+0x40>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 2)
    for (i = 0; i < NUM_MAX_TASKS; i++){
800057bc:	fec42783          	lw	a5,-20(s0)
800057c0:	00178793          	addi	a5,a5,1
800057c4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 1)
800057c8:	fec42703          	lw	a4,-20(s0)
800057cc:	00500793          	li	a5,5
800057d0:	f6e7fce3          	bleu	a4,a5,80005748 <API_TaskListInit+0x14>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:21
        }
    }
    return;
800057d4:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:22
}
800057d8:	01c12403          	lw	s0,28(sp)
800057dc:	02010113          	addi	sp,sp,32
800057e0:	00008067          	ret

800057e4 <API_GetCurrentTaskSlot>:
API_GetCurrentTaskSlot():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:24

unsigned int API_GetCurrentTaskSlot(){
800057e4:	fe010113          	addi	sp,sp,-32
800057e8:	00112e23          	sw	ra,28(sp)
800057ec:	00812c23          	sw	s0,24(sp)
800057f0:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:26
    // The handle of the currently running ( calling ) task on the kernel.
    TaskHandle_t xHandle = xTaskGetCurrentTaskHandle();
800057f4:	c20fd0ef          	jal	ra,80002c14 <xTaskGetCurrentTaskHandle>
800057f8:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:27
    unsigned int i = 0;
800057fc:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:28
    for ( i = 0 ; i < NUM_MAX_TASKS ; i++ ) {
80005800:	fe042623          	sw	zero,-20(s0)
80005804:	0440006f          	j	80005848 <API_GetCurrentTaskSlot+0x64>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:29
        if ( TaskList[ i ].TaskHandler == xHandle ) {
80005808:	800227b7          	lui	a5,0x80022
8000580c:	fec42703          	lw	a4,-20(s0)
80005810:	a7878693          	addi	a3,a5,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80005814:	00070793          	mv	a5,a4
80005818:	00579793          	slli	a5,a5,0x5
8000581c:	00e787b3          	add	a5,a5,a4
80005820:	00279793          	slli	a5,a5,0x2
80005824:	00f687b3          	add	a5,a3,a5
80005828:	0187a783          	lw	a5,24(a5)
8000582c:	fe842703          	lw	a4,-24(s0)
80005830:	00f71663          	bne	a4,a5,8000583c <API_GetCurrentTaskSlot+0x58>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:30
            return( i );
80005834:	fec42783          	lw	a5,-20(s0)
80005838:	02c0006f          	j	80005864 <API_GetCurrentTaskSlot+0x80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:28 (discriminator 2)
    for ( i = 0 ; i < NUM_MAX_TASKS ; i++ ) {
8000583c:	fec42783          	lw	a5,-20(s0)
80005840:	00178793          	addi	a5,a5,1
80005844:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:28 (discriminator 1)
80005848:	fec42703          	lw	a4,-20(s0)
8000584c:	00500793          	li	a5,5
80005850:	fae7fce3          	bleu	a4,a5,80005808 <API_GetCurrentTaskSlot+0x24>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:33
        }
    }
    prints("returning erro0\n");
80005854:	800077b7          	lui	a5,0x80007
80005858:	21478513          	addi	a0,a5,532 # 80007214 <__stack_top+0xfffc5404>
8000585c:	d9cfd0ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:34
    return ERRO;
80005860:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:35
}
80005864:	00078513          	mv	a0,a5
80005868:	01c12083          	lw	ra,28(sp)
8000586c:	01812403          	lw	s0,24(sp)
80005870:	02010113          	addi	sp,sp,32
80005874:	00008067          	ret

80005878 <API_GetFreeTaskSlot>:
API_GetFreeTaskSlot():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:37

unsigned int API_GetFreeTaskSlot(){
80005878:	fe010113          	addi	sp,sp,-32
8000587c:	00112e23          	sw	ra,28(sp)
80005880:	00812c23          	sw	s0,24(sp)
80005884:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:39
    unsigned int i;
    for (i = 0; i < NUM_MAX_TASKS; i++){
80005888:	fe042623          	sw	zero,-20(s0)
8000588c:	0400006f          	j	800058cc <API_GetFreeTaskSlot+0x54>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:40
        if (TaskList[i].status == TASK_SLOT_EMPTY){
80005890:	800226b7          	lui	a3,0x80022
80005894:	fec42703          	lw	a4,-20(s0)
80005898:	00070793          	mv	a5,a4
8000589c:	00579793          	slli	a5,a5,0x5
800058a0:	00e787b3          	add	a5,a5,a4
800058a4:	00279793          	slli	a5,a5,0x2
800058a8:	a7868713          	addi	a4,a3,-1416 # 80021a78 <__stack_top+0xfffdfc68>
800058ac:	00e787b3          	add	a5,a5,a4
800058b0:	0007a783          	lw	a5,0(a5)
800058b4:	00079663          	bnez	a5,800058c0 <API_GetFreeTaskSlot+0x48>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:41
            return i;
800058b8:	fec42783          	lw	a5,-20(s0)
800058bc:	02c0006f          	j	800058e8 <API_GetFreeTaskSlot+0x70>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:39 (discriminator 2)
    for (i = 0; i < NUM_MAX_TASKS; i++){
800058c0:	fec42783          	lw	a5,-20(s0)
800058c4:	00178793          	addi	a5,a5,1
800058c8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:39 (discriminator 1)
800058cc:	fec42703          	lw	a4,-20(s0)
800058d0:	00500793          	li	a5,5
800058d4:	fae7fee3          	bleu	a4,a5,80005890 <API_GetFreeTaskSlot+0x18>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:44
        }
    }
    prints("returning erro1\n");
800058d8:	800077b7          	lui	a5,0x80007
800058dc:	22878513          	addi	a0,a5,552 # 80007228 <__stack_top+0xfffc5418>
800058e0:	d18fd0ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:45
    return ERRO;
800058e4:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:46
}
800058e8:	00078513          	mv	a0,a5
800058ec:	01c12083          	lw	ra,28(sp)
800058f0:	01812403          	lw	s0,24(sp)
800058f4:	02010113          	addi	sp,sp,32
800058f8:	00008067          	ret

800058fc <API_TaskAllocation>:
API_TaskAllocation():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:48

unsigned int API_TaskAllocation(unsigned int task_id, unsigned int txt_size, unsigned int bss_size, unsigned int start_point, unsigned int task_app_id){
800058fc:	fc010113          	addi	sp,sp,-64
80005900:	02112e23          	sw	ra,60(sp)
80005904:	02812c23          	sw	s0,56(sp)
80005908:	04010413          	addi	s0,sp,64
8000590c:	fca42e23          	sw	a0,-36(s0)
80005910:	fcb42c23          	sw	a1,-40(s0)
80005914:	fcc42a23          	sw	a2,-44(s0)
80005918:	fcd42823          	sw	a3,-48(s0)
8000591c:	fce42623          	sw	a4,-52(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:49
    unsigned int tslot = API_GetFreeTaskSlot();
80005920:	f59ff0ef          	jal	ra,80005878 <API_GetFreeTaskSlot>
80005924:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:51
    int i;
    if(tslot == ERRO){
80005928:	fe842703          	lw	a4,-24(s0)
8000592c:	fff00793          	li	a5,-1
80005930:	00f71863          	bne	a4,a5,80005940 <API_TaskAllocation+0x44>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:52
        prints("DEU RUIM NO API_GetFreeTaskSlot()\n");
80005934:	800077b7          	lui	a5,0x80007
80005938:	23c78513          	addi	a0,a5,572 # 8000723c <__stack_top+0xfffc542c>
8000593c:	cbcfd0ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:54
    }
    printsv("Got slot: ", tslot);
80005940:	fe842783          	lw	a5,-24(s0)
80005944:	00078593          	mv	a1,a5
80005948:	800077b7          	lui	a5,0x80007
8000594c:	26078513          	addi	a0,a5,608 # 80007260 <__stack_top+0xfffc5450>
80005950:	d54fd0ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:55
    TaskList[tslot].status = TASK_SLOT_WAITING_START;
80005954:	800226b7          	lui	a3,0x80022
80005958:	fe842703          	lw	a4,-24(s0)
8000595c:	00070793          	mv	a5,a4
80005960:	00579793          	slli	a5,a5,0x5
80005964:	00e787b3          	add	a5,a5,a4
80005968:	00279793          	slli	a5,a5,0x2
8000596c:	a7868713          	addi	a4,a3,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80005970:	00e787b3          	add	a5,a5,a4
80005974:	00200713          	li	a4,2
80005978:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:56
    TaskList[tslot].waitingMsg = FALSE;
8000597c:	800227b7          	lui	a5,0x80022
80005980:	fe842703          	lw	a4,-24(s0)
80005984:	a7878693          	addi	a3,a5,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80005988:	00070793          	mv	a5,a4
8000598c:	00579793          	slli	a5,a5,0x5
80005990:	00e787b3          	add	a5,a5,a4
80005994:	00279793          	slli	a5,a5,0x2
80005998:	00f687b3          	add	a5,a3,a5
8000599c:	0007ae23          	sw	zero,28(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:57
    TaskList[tslot].TaskID = task_id;
800059a0:	800226b7          	lui	a3,0x80022
800059a4:	fe842703          	lw	a4,-24(s0)
800059a8:	00070793          	mv	a5,a4
800059ac:	00579793          	slli	a5,a5,0x5
800059b0:	00e787b3          	add	a5,a5,a4
800059b4:	00279793          	slli	a5,a5,0x2
800059b8:	a7868713          	addi	a4,a3,-1416 # 80021a78 <__stack_top+0xfffdfc68>
800059bc:	00e787b3          	add	a5,a5,a4
800059c0:	fdc42703          	lw	a4,-36(s0)
800059c4:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:58
    TaskList[tslot].AppID = task_app_id;
800059c8:	800227b7          	lui	a5,0x80022
800059cc:	fe842703          	lw	a4,-24(s0)
800059d0:	a7878693          	addi	a3,a5,-1416 # 80021a78 <__stack_top+0xfffdfc68>
800059d4:	00070793          	mv	a5,a4
800059d8:	00579793          	slli	a5,a5,0x5
800059dc:	00e787b3          	add	a5,a5,a4
800059e0:	00279793          	slli	a5,a5,0x2
800059e4:	00f687b3          	add	a5,a3,a5
800059e8:	fcc42703          	lw	a4,-52(s0)
800059ec:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:59
    TaskList[tslot].taskSize = 4 * (txt_size + bss_size); // it multiply by four because each word has 32 bits and the memory is addressed by byte - so each word is composed by 4 addresses
800059f0:	fd842703          	lw	a4,-40(s0)
800059f4:	fd442783          	lw	a5,-44(s0)
800059f8:	00f707b3          	add	a5,a4,a5
800059fc:	00279693          	slli	a3,a5,0x2
80005a00:	800227b7          	lui	a5,0x80022
80005a04:	fe842703          	lw	a4,-24(s0)
80005a08:	a7878613          	addi	a2,a5,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80005a0c:	00070793          	mv	a5,a4
80005a10:	00579793          	slli	a5,a5,0x5
80005a14:	00e787b3          	add	a5,a5,a4
80005a18:	00279793          	slli	a5,a5,0x2
80005a1c:	00f607b3          	add	a5,a2,a5
80005a20:	02d7a223          	sw	a3,36(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:60
    printsv("Task total size (txt+bss): ", TaskList[tslot].taskSize);
80005a24:	800227b7          	lui	a5,0x80022
80005a28:	fe842703          	lw	a4,-24(s0)
80005a2c:	a7878693          	addi	a3,a5,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80005a30:	00070793          	mv	a5,a4
80005a34:	00579793          	slli	a5,a5,0x5
80005a38:	00e787b3          	add	a5,a5,a4
80005a3c:	00279793          	slli	a5,a5,0x2
80005a40:	00f687b3          	add	a5,a3,a5
80005a44:	0247a783          	lw	a5,36(a5)
80005a48:	00078593          	mv	a1,a5
80005a4c:	800077b7          	lui	a5,0x80007
80005a50:	26c78513          	addi	a0,a5,620 # 8000726c <__stack_top+0xfffc545c>
80005a54:	c50fd0ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:61
    TaskList[tslot].taskAddr = (unsigned int)pvPortMalloc(TaskList[tslot].taskSize+64);
80005a58:	800227b7          	lui	a5,0x80022
80005a5c:	fe842703          	lw	a4,-24(s0)
80005a60:	a7878693          	addi	a3,a5,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80005a64:	00070793          	mv	a5,a4
80005a68:	00579793          	slli	a5,a5,0x5
80005a6c:	00e787b3          	add	a5,a5,a4
80005a70:	00279793          	slli	a5,a5,0x2
80005a74:	00f687b3          	add	a5,a3,a5
80005a78:	0247a783          	lw	a5,36(a5)
80005a7c:	04078793          	addi	a5,a5,64
80005a80:	00078513          	mv	a0,a5
80005a84:	821fb0ef          	jal	ra,800012a4 <pvPortMalloc>
80005a88:	00050793          	mv	a5,a0
80005a8c:	00078613          	mv	a2,a5
80005a90:	800227b7          	lui	a5,0x80022
80005a94:	fe842703          	lw	a4,-24(s0)
80005a98:	a7878693          	addi	a3,a5,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80005a9c:	00070793          	mv	a5,a4
80005aa0:	00579793          	slli	a5,a5,0x5
80005aa4:	00e787b3          	add	a5,a5,a4
80005aa8:	00279793          	slli	a5,a5,0x2
80005aac:	00f687b3          	add	a5,a3,a5
80005ab0:	02c7a423          	sw	a2,40(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:62
    printsv("Task addr: ", TaskList[tslot].taskAddr);
80005ab4:	800227b7          	lui	a5,0x80022
80005ab8:	fe842703          	lw	a4,-24(s0)
80005abc:	a7878693          	addi	a3,a5,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80005ac0:	00070793          	mv	a5,a4
80005ac4:	00579793          	slli	a5,a5,0x5
80005ac8:	00e787b3          	add	a5,a5,a4
80005acc:	00279793          	slli	a5,a5,0x2
80005ad0:	00f687b3          	add	a5,a3,a5
80005ad4:	0287a783          	lw	a5,40(a5)
80005ad8:	00078593          	mv	a1,a5
80005adc:	800077b7          	lui	a5,0x80007
80005ae0:	28878513          	addi	a0,a5,648 # 80007288 <__stack_top+0xfffc5478>
80005ae4:	bc0fd0ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:63
    TaskList[tslot].mainAddr =  TaskList[tslot].taskAddr + (4 * start_point);
80005ae8:	800227b7          	lui	a5,0x80022
80005aec:	fe842703          	lw	a4,-24(s0)
80005af0:	a7878693          	addi	a3,a5,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80005af4:	00070793          	mv	a5,a4
80005af8:	00579793          	slli	a5,a5,0x5
80005afc:	00e787b3          	add	a5,a5,a4
80005b00:	00279793          	slli	a5,a5,0x2
80005b04:	00f687b3          	add	a5,a3,a5
80005b08:	0287a703          	lw	a4,40(a5)
80005b0c:	fd042783          	lw	a5,-48(s0)
80005b10:	00279793          	slli	a5,a5,0x2
80005b14:	00f706b3          	add	a3,a4,a5
80005b18:	800227b7          	lui	a5,0x80022
80005b1c:	fe842703          	lw	a4,-24(s0)
80005b20:	a7878613          	addi	a2,a5,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80005b24:	00070793          	mv	a5,a4
80005b28:	00579793          	slli	a5,a5,0x5
80005b2c:	00e787b3          	add	a5,a5,a4
80005b30:	00279793          	slli	a5,a5,0x2
80005b34:	00f607b3          	add	a5,a2,a5
80005b38:	02d7a623          	sw	a3,44(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:69

    // filling the MemoryRegion_t struct
    //TaskList[tslot].memRegion.ulLengthInBytes = 0;// TaskList[tslot].taskSize;
    //TaskList[tslot].memRegion.pvBaseAddress = 0;//TaskList[tslot].taskAddr;

    for(i=0;i<NUM_MAX_APP_TASKS;i++){
80005b3c:	fe042623          	sw	zero,-20(s0)
80005b40:	0700006f          	j	80005bb0 <API_TaskAllocation+0x2b4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:70 (discriminator 3)
        TaskList[tslot].PendingReq[i] = FALSE;
80005b44:	800226b7          	lui	a3,0x80022
80005b48:	fe842703          	lw	a4,-24(s0)
80005b4c:	00070793          	mv	a5,a4
80005b50:	00579793          	slli	a5,a5,0x5
80005b54:	00e787b3          	add	a5,a5,a4
80005b58:	fec42703          	lw	a4,-20(s0)
80005b5c:	00e787b3          	add	a5,a5,a4
80005b60:	00c78793          	addi	a5,a5,12
80005b64:	00279713          	slli	a4,a5,0x2
80005b68:	a7868793          	addi	a5,a3,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80005b6c:	00f707b3          	add	a5,a4,a5
80005b70:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:71 (discriminator 3)
        TaskList[tslot].TasksMap[i] = 0;
80005b74:	800226b7          	lui	a3,0x80022
80005b78:	fe842703          	lw	a4,-24(s0)
80005b7c:	00070793          	mv	a5,a4
80005b80:	00579793          	slli	a5,a5,0x5
80005b84:	00e787b3          	add	a5,a5,a4
80005b88:	fec42703          	lw	a4,-20(s0)
80005b8c:	00e787b3          	add	a5,a5,a4
80005b90:	01478793          	addi	a5,a5,20
80005b94:	a7868713          	addi	a4,a3,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80005b98:	00279793          	slli	a5,a5,0x2
80005b9c:	00f707b3          	add	a5,a4,a5
80005ba0:	0007a623          	sw	zero,12(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:69 (discriminator 3)
    for(i=0;i<NUM_MAX_APP_TASKS;i++){
80005ba4:	fec42783          	lw	a5,-20(s0)
80005ba8:	00178793          	addi	a5,a5,1
80005bac:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:69 (discriminator 1)
80005bb0:	fec42703          	lw	a4,-20(s0)
80005bb4:	00900793          	li	a5,9
80005bb8:	f8e7d6e3          	ble	a4,a5,80005b44 <API_TaskAllocation+0x248>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:74
    }

    return tslot;
80005bbc:	fe842783          	lw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:75
}
80005bc0:	00078513          	mv	a0,a5
80005bc4:	03c12083          	lw	ra,60(sp)
80005bc8:	03812403          	lw	s0,56(sp)
80005bcc:	04010113          	addi	sp,sp,64
80005bd0:	00008067          	ret

80005bd4 <API_GetTaskSlot>:
API_GetTaskSlot():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:77

unsigned int API_GetTaskSlot(unsigned int task_id, unsigned int app_id){
80005bd4:	fd010113          	addi	sp,sp,-48
80005bd8:	02112623          	sw	ra,44(sp)
80005bdc:	02812423          	sw	s0,40(sp)
80005be0:	03010413          	addi	s0,sp,48
80005be4:	fca42e23          	sw	a0,-36(s0)
80005be8:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:79
    unsigned int i;
    for( i = 0; i < NUM_MAX_APP_TASKS; i++){
80005bec:	fe042623          	sw	zero,-20(s0)
80005bf0:	0980006f          	j	80005c88 <API_GetTaskSlot+0xb4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:80
        if(task_id == TaskList[i].TaskID && app_id == TaskList[i].AppID && TaskList[i].status != TASK_SLOT_EMPTY)
80005bf4:	800226b7          	lui	a3,0x80022
80005bf8:	fec42703          	lw	a4,-20(s0)
80005bfc:	00070793          	mv	a5,a4
80005c00:	00579793          	slli	a5,a5,0x5
80005c04:	00e787b3          	add	a5,a5,a4
80005c08:	00279793          	slli	a5,a5,0x2
80005c0c:	a7868713          	addi	a4,a3,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80005c10:	00e787b3          	add	a5,a5,a4
80005c14:	0107a783          	lw	a5,16(a5)
80005c18:	fdc42703          	lw	a4,-36(s0)
80005c1c:	06f71063          	bne	a4,a5,80005c7c <API_GetTaskSlot+0xa8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:80 (discriminator 1)
80005c20:	800227b7          	lui	a5,0x80022
80005c24:	fec42703          	lw	a4,-20(s0)
80005c28:	a7878693          	addi	a3,a5,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80005c2c:	00070793          	mv	a5,a4
80005c30:	00579793          	slli	a5,a5,0x5
80005c34:	00e787b3          	add	a5,a5,a4
80005c38:	00279793          	slli	a5,a5,0x2
80005c3c:	00f687b3          	add	a5,a3,a5
80005c40:	0147a783          	lw	a5,20(a5)
80005c44:	fd842703          	lw	a4,-40(s0)
80005c48:	02f71a63          	bne	a4,a5,80005c7c <API_GetTaskSlot+0xa8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:80 (discriminator 2)
80005c4c:	800226b7          	lui	a3,0x80022
80005c50:	fec42703          	lw	a4,-20(s0)
80005c54:	00070793          	mv	a5,a4
80005c58:	00579793          	slli	a5,a5,0x5
80005c5c:	00e787b3          	add	a5,a5,a4
80005c60:	00279793          	slli	a5,a5,0x2
80005c64:	a7868713          	addi	a4,a3,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80005c68:	00e787b3          	add	a5,a5,a4
80005c6c:	0007a783          	lw	a5,0(a5)
80005c70:	00078663          	beqz	a5,80005c7c <API_GetTaskSlot+0xa8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:81
            return i;
80005c74:	fec42783          	lw	a5,-20(s0)
80005c78:	02c0006f          	j	80005ca4 <API_GetTaskSlot+0xd0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:79 (discriminator 2)
    for( i = 0; i < NUM_MAX_APP_TASKS; i++){
80005c7c:	fec42783          	lw	a5,-20(s0)
80005c80:	00178793          	addi	a5,a5,1
80005c84:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:79 (discriminator 1)
80005c88:	fec42703          	lw	a4,-20(s0)
80005c8c:	00900793          	li	a5,9
80005c90:	f6e7f2e3          	bleu	a4,a5,80005bf4 <API_GetTaskSlot+0x20>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:83
    }
    prints("returning erro2\n");
80005c94:	800077b7          	lui	a5,0x80007
80005c98:	29478513          	addi	a0,a5,660 # 80007294 <__stack_top+0xfffc5484>
80005c9c:	95cfd0ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:84
    return ERRO;
80005ca0:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:85
}
80005ca4:	00078513          	mv	a0,a5
80005ca8:	02c12083          	lw	ra,44(sp)
80005cac:	02812403          	lw	s0,40(sp)
80005cb0:	03010113          	addi	sp,sp,48
80005cb4:	00008067          	ret

80005cb8 <API_TaskStart>:
API_TaskStart():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:87

void API_TaskStart(unsigned int slot){
80005cb8:	fd010113          	addi	sp,sp,-48
80005cbc:	02112623          	sw	ra,44(sp)
80005cc0:	02812423          	sw	s0,40(sp)
80005cc4:	03010413          	addi	s0,sp,48
80005cc8:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:89
    BaseType_t xReturned;
    TaskList[slot].status = TASK_SLOT_RUNNING;
80005ccc:	800226b7          	lui	a3,0x80022
80005cd0:	fdc42703          	lw	a4,-36(s0)
80005cd4:	00070793          	mv	a5,a4
80005cd8:	00579793          	slli	a5,a5,0x5
80005cdc:	00e787b3          	add	a5,a5,a4
80005ce0:	00279793          	slli	a5,a5,0x2
80005ce4:	a7868713          	addi	a4,a3,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80005ce8:	00e787b3          	add	a5,a5,a4
80005cec:	00100713          	li	a4,1
80005cf0:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:100
                                    tskIDLE_PRIORITY+1,         //uxPriority
                                    &TaskList[slot].TaskHandler,// pxCreatedTask
                                    NULL,                       // puxStackBuffer
                                    &TaskList[slot].memRegion );//xRegions*/
    
    xReturned = xTaskCreate(TaskList[slot].mainAddr,
80005cf4:	800227b7          	lui	a5,0x80022
80005cf8:	fdc42703          	lw	a4,-36(s0)
80005cfc:	a7878693          	addi	a3,a5,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80005d00:	00070793          	mv	a5,a4
80005d04:	00579793          	slli	a5,a5,0x5
80005d08:	00e787b3          	add	a5,a5,a4
80005d0c:	00279793          	slli	a5,a5,0x2
80005d10:	00f687b3          	add	a5,a3,a5
80005d14:	02c7a783          	lw	a5,44(a5)
80005d18:	00078513          	mv	a0,a5
80005d1c:	fdc42703          	lw	a4,-36(s0)
80005d20:	00070793          	mv	a5,a4
80005d24:	00579793          	slli	a5,a5,0x5
80005d28:	00e787b3          	add	a5,a5,a4
80005d2c:	00279793          	slli	a5,a5,0x2
80005d30:	01078713          	addi	a4,a5,16
80005d34:	800227b7          	lui	a5,0x80022
80005d38:	a7878793          	addi	a5,a5,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80005d3c:	00f707b3          	add	a5,a4,a5
80005d40:	00878793          	addi	a5,a5,8
80005d44:	00000893          	li	a7,0
80005d48:	00000813          	li	a6,0
80005d4c:	00100713          	li	a4,1
80005d50:	00000693          	li	a3,0
80005d54:	00002637          	lui	a2,0x2
80005d58:	3e860613          	addi	a2,a2,1000 # 23e8 <HEAP_SIZE-0xdc18>
80005d5c:	800075b7          	lui	a1,0x80007
80005d60:	2a858593          	addi	a1,a1,680 # 800072a8 <__stack_top+0xfffc5498>
80005d64:	958fc0ef          	jal	ra,80001ebc <xTaskGenericCreate>
80005d68:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:106
                            "LaTask",
                            9192,//8192,//4096,//16384,
                            NULL,
                            tskIDLE_PRIORITY+1,
                            &TaskList[slot].TaskHandler);
    if( xReturned != pdPASS ){
80005d6c:	fec42703          	lw	a4,-20(s0)
80005d70:	00100793          	li	a5,1
80005d74:	00f70a63          	beq	a4,a5,80005d88 <API_TaskStart+0xd0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:107
        prints("ERROR - API_TaskStart!!!\n");
80005d78:	800077b7          	lui	a5,0x80007
80005d7c:	2b078513          	addi	a0,a5,688 # 800072b0 <__stack_top+0xfffc54a0>
80005d80:	878fd0ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:109
    }
    return;
80005d84:	00000013          	nop
80005d88:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:110
}
80005d8c:	02c12083          	lw	ra,44(sp)
80005d90:	02812403          	lw	s0,40(sp)
80005d94:	03010113          	addi	sp,sp,48
80005d98:	00008067          	ret

80005d9c <API_FinishRunningTask>:
API_FinishRunningTask():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:113


void API_FinishRunningTask(){
80005d9c:	fe010113          	addi	sp,sp,-32
80005da0:	00112e23          	sw	ra,28(sp)
80005da4:	00812c23          	sw	s0,24(sp)
80005da8:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:114
    unsigned int slot = API_GetCurrentTaskSlot();
80005dac:	a39ff0ef          	jal	ra,800057e4 <API_GetCurrentTaskSlot>
80005db0:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:115
    while(API_checkPipe(slot) == 1){
80005db4:	00c0006f          	j	80005dc0 <API_FinishRunningTask+0x24>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:116
        vTaskDelay(1);
80005db8:	00100513          	li	a0,1
80005dbc:	bf8fc0ef          	jal	ra,800021b4 <vTaskDelay>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:115
    while(API_checkPipe(slot) == 1){
80005dc0:	fec42503          	lw	a0,-20(s0)
80005dc4:	488000ef          	jal	ra,8000624c <API_checkPipe>
80005dc8:	00050713          	mv	a4,a0
80005dcc:	00100793          	li	a5,1
80005dd0:	fef704e3          	beq	a4,a5,80005db8 <API_FinishRunningTask+0x1c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:118
    }
    vPortFree(TaskList[slot].taskAddr);
80005dd4:	800227b7          	lui	a5,0x80022
80005dd8:	fec42703          	lw	a4,-20(s0)
80005ddc:	a7878693          	addi	a3,a5,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80005de0:	00070793          	mv	a5,a4
80005de4:	00579793          	slli	a5,a5,0x5
80005de8:	00e787b3          	add	a5,a5,a4
80005dec:	00279793          	slli	a5,a5,0x2
80005df0:	00f687b3          	add	a5,a3,a5
80005df4:	0287a783          	lw	a5,40(a5)
80005df8:	00078513          	mv	a0,a5
80005dfc:	e84fb0ef          	jal	ra,80001480 <vPortFree>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:119
    API_SendFinishTask(TaskList[slot].TaskID, TaskList[slot].AppID);
80005e00:	800226b7          	lui	a3,0x80022
80005e04:	fec42703          	lw	a4,-20(s0)
80005e08:	00070793          	mv	a5,a4
80005e0c:	00579793          	slli	a5,a5,0x5
80005e10:	00e787b3          	add	a5,a5,a4
80005e14:	00279793          	slli	a5,a5,0x2
80005e18:	a7868713          	addi	a4,a3,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80005e1c:	00e787b3          	add	a5,a5,a4
80005e20:	0107a603          	lw	a2,16(a5)
80005e24:	800227b7          	lui	a5,0x80022
80005e28:	fec42703          	lw	a4,-20(s0)
80005e2c:	a7878693          	addi	a3,a5,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80005e30:	00070793          	mv	a5,a4
80005e34:	00579793          	slli	a5,a5,0x5
80005e38:	00e787b3          	add	a5,a5,a4
80005e3c:	00279793          	slli	a5,a5,0x2
80005e40:	00f687b3          	add	a5,a3,a5
80005e44:	0147a783          	lw	a5,20(a5)
80005e48:	00078593          	mv	a1,a5
80005e4c:	00060513          	mv	a0,a2
80005e50:	c29fd0ef          	jal	ra,80003a78 <API_SendFinishTask>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:120
    printsvsv("Task ", TaskList[slot].TaskID, "deleted with sucsess! From application ", TaskList[slot].AppID);
80005e54:	800226b7          	lui	a3,0x80022
80005e58:	fec42703          	lw	a4,-20(s0)
80005e5c:	00070793          	mv	a5,a4
80005e60:	00579793          	slli	a5,a5,0x5
80005e64:	00e787b3          	add	a5,a5,a4
80005e68:	00279793          	slli	a5,a5,0x2
80005e6c:	a7868713          	addi	a4,a3,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80005e70:	00e787b3          	add	a5,a5,a4
80005e74:	0107a783          	lw	a5,16(a5)
80005e78:	00078593          	mv	a1,a5
80005e7c:	800227b7          	lui	a5,0x80022
80005e80:	fec42703          	lw	a4,-20(s0)
80005e84:	a7878693          	addi	a3,a5,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80005e88:	00070793          	mv	a5,a4
80005e8c:	00579793          	slli	a5,a5,0x5
80005e90:	00e787b3          	add	a5,a5,a4
80005e94:	00279793          	slli	a5,a5,0x2
80005e98:	00f687b3          	add	a5,a3,a5
80005e9c:	0147a783          	lw	a5,20(a5)
80005ea0:	00078693          	mv	a3,a5
80005ea4:	800077b7          	lui	a5,0x80007
80005ea8:	2cc78613          	addi	a2,a5,716 # 800072cc <__stack_top+0xfffc54bc>
80005eac:	800077b7          	lui	a5,0x80007
80005eb0:	2f478513          	addi	a0,a5,756 # 800072f4 <__stack_top+0xfffc54e4>
80005eb4:	840fd0ef          	jal	ra,80002ef4 <printsvsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:121
    TaskList[slot].status = TASK_SLOT_EMPTY;
80005eb8:	800226b7          	lui	a3,0x80022
80005ebc:	fec42703          	lw	a4,-20(s0)
80005ec0:	00070793          	mv	a5,a4
80005ec4:	00579793          	slli	a5,a5,0x5
80005ec8:	00e787b3          	add	a5,a5,a4
80005ecc:	00279793          	slli	a5,a5,0x2
80005ed0:	a7868713          	addi	a4,a3,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80005ed4:	00e787b3          	add	a5,a5,a4
80005ed8:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:122
    vTaskDelete(TaskList[slot].TaskHandler);
80005edc:	800227b7          	lui	a5,0x80022
80005ee0:	fec42703          	lw	a4,-20(s0)
80005ee4:	a7878693          	addi	a3,a5,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80005ee8:	00070793          	mv	a5,a4
80005eec:	00579793          	slli	a5,a5,0x5
80005ef0:	00e787b3          	add	a5,a5,a4
80005ef4:	00279793          	slli	a5,a5,0x2
80005ef8:	00f687b3          	add	a5,a3,a5
80005efc:	0187a783          	lw	a5,24(a5)
80005f00:	00078513          	mv	a0,a5
80005f04:	9d4fc0ef          	jal	ra,800020d8 <vTaskDelete>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:123
    return;
80005f08:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:124
}
80005f0c:	01c12083          	lw	ra,28(sp)
80005f10:	01812403          	lw	s0,24(sp)
80005f14:	02010113          	addi	sp,sp,32
80005f18:	00008067          	ret

80005f1c <API_PipeInitialization>:
API_PipeInitialization():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:11
extern volatile ServicePacket ServicePipe[PIPE_SIZE];
extern unsigned int messageID;

////////////////////////////////////////////////////////////
// Initialize the PIPE, setting the status of each slot to FREE
void API_PipeInitialization(){
80005f1c:	fe010113          	addi	sp,sp,-32
80005f20:	00812e23          	sw	s0,28(sp)
80005f24:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:13
    int i;
    messageID = 0;
80005f28:	800217b7          	lui	a5,0x80021
80005f2c:	9407a623          	sw	zero,-1716(a5) # 8002094c <__stack_top+0xfffdeb3c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:14
    for( i = 0; i < PIPE_SIZE; i++ ){
80005f30:	fe042623          	sw	zero,-20(s0)
80005f34:	0740006f          	j	80005fa8 <API_PipeInitialization+0x8c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:15 (discriminator 3)
        MessagePipe[i].status = PIPE_FREE;
80005f38:	800217b7          	lui	a5,0x80021
80005f3c:	fec42683          	lw	a3,-20(s0)
80005f40:	24400713          	li	a4,580
80005f44:	02e68733          	mul	a4,a3,a4
80005f48:	9c078793          	addi	a5,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
80005f4c:	00f707b3          	add	a5,a4,a5
80005f50:	fff00713          	li	a4,-1
80005f54:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:16 (discriminator 3)
        MessagePipe[i].msgID  = 0;
80005f58:	800217b7          	lui	a5,0x80021
80005f5c:	fec42683          	lw	a3,-20(s0)
80005f60:	9c078713          	addi	a4,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
80005f64:	24400793          	li	a5,580
80005f68:	02f687b3          	mul	a5,a3,a5
80005f6c:	00f707b3          	add	a5,a4,a5
80005f70:	0007a423          	sw	zero,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:17 (discriminator 3)
        ServicePipe[i].status = PIPE_FREE;
80005f74:	800216b7          	lui	a3,0x80021
80005f78:	fec42703          	lw	a4,-20(s0)
80005f7c:	00070793          	mv	a5,a4
80005f80:	00479793          	slli	a5,a5,0x4
80005f84:	40e787b3          	sub	a5,a5,a4
80005f88:	00279793          	slli	a5,a5,0x2
80005f8c:	85c68713          	addi	a4,a3,-1956 # 8002085c <__stack_top+0xfffdea4c>
80005f90:	00e787b3          	add	a5,a5,a4
80005f94:	fff00713          	li	a4,-1
80005f98:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:14 (discriminator 3)
    for( i = 0; i < PIPE_SIZE; i++ ){
80005f9c:	fec42783          	lw	a5,-20(s0)
80005fa0:	00178793          	addi	a5,a5,1
80005fa4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:14 (discriminator 1)
80005fa8:	fec42703          	lw	a4,-20(s0)
80005fac:	00300793          	li	a5,3
80005fb0:	f8e7d4e3          	ble	a4,a5,80005f38 <API_PipeInitialization+0x1c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:19
    }
    return;
80005fb4:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:20
}
80005fb8:	01c12403          	lw	s0,28(sp)
80005fbc:	02010113          	addi	sp,sp,32
80005fc0:	00008067          	ret

80005fc4 <API_GetMessageSlot>:
API_GetMessageSlot():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:24

////////////////////////////////////////////////////////////
// Returns a free Message slot 
unsigned int API_GetMessageSlot(){
80005fc4:	fe010113          	addi	sp,sp,-32
80005fc8:	00812e23          	sw	s0,28(sp)
80005fcc:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:26
    int i;
    unsigned int sel = PIPE_FULL;
80005fd0:	fdfe07b7          	lui	a5,0xfdfe0
80005fd4:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9dfed>
80005fd8:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:27
    for( i = 0; i < PIPE_SIZE; i++ ){
80005fdc:	fe042623          	sw	zero,-20(s0)
80005fe0:	0980006f          	j	80006078 <API_GetMessageSlot+0xb4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:28
        if (MessagePipe[i].status == PIPE_FREE){
80005fe4:	800217b7          	lui	a5,0x80021
80005fe8:	fec42683          	lw	a3,-20(s0)
80005fec:	24400713          	li	a4,580
80005ff0:	02e68733          	mul	a4,a3,a4
80005ff4:	9c078793          	addi	a5,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
80005ff8:	00f707b3          	add	a5,a4,a5
80005ffc:	0007a703          	lw	a4,0(a5)
80006000:	fff00793          	li	a5,-1
80006004:	06f71463          	bne	a4,a5,8000606c <API_GetMessageSlot+0xa8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:29
            MessagePipe[i].status = PIPE_OCCUPIED;
80006008:	800217b7          	lui	a5,0x80021
8000600c:	fec42683          	lw	a3,-20(s0)
80006010:	24400713          	li	a4,580
80006014:	02e68733          	mul	a4,a3,a4
80006018:	9c078793          	addi	a5,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
8000601c:	00f707b3          	add	a5,a4,a5
80006020:	00100713          	li	a4,1
80006024:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:30
            MessagePipe[i].msgID = messageID;
80006028:	800217b7          	lui	a5,0x80021
8000602c:	94c7a703          	lw	a4,-1716(a5) # 8002094c <__stack_top+0xfffdeb3c>
80006030:	800217b7          	lui	a5,0x80021
80006034:	fec42603          	lw	a2,-20(s0)
80006038:	9c078693          	addi	a3,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
8000603c:	24400793          	li	a5,580
80006040:	02f607b3          	mul	a5,a2,a5
80006044:	00f687b3          	add	a5,a3,a5
80006048:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:31
            messageID++;
8000604c:	800217b7          	lui	a5,0x80021
80006050:	94c7a783          	lw	a5,-1716(a5) # 8002094c <__stack_top+0xfffdeb3c>
80006054:	00178713          	addi	a4,a5,1
80006058:	800217b7          	lui	a5,0x80021
8000605c:	94e7a623          	sw	a4,-1716(a5) # 8002094c <__stack_top+0xfffdeb3c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:32
            sel = i;
80006060:	fec42783          	lw	a5,-20(s0)
80006064:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:33
            break;
80006068:	01c0006f          	j	80006084 <API_GetMessageSlot+0xc0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:27 (discriminator 2)
    for( i = 0; i < PIPE_SIZE; i++ ){
8000606c:	fec42783          	lw	a5,-20(s0)
80006070:	00178793          	addi	a5,a5,1
80006074:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:27 (discriminator 1)
80006078:	fec42703          	lw	a4,-20(s0)
8000607c:	00300793          	li	a5,3
80006080:	f6e7d2e3          	ble	a4,a5,80005fe4 <API_GetMessageSlot+0x20>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:36
        }
    }
    if(messageID > 16777215){
80006084:	800217b7          	lui	a5,0x80021
80006088:	94c7a703          	lw	a4,-1716(a5) # 8002094c <__stack_top+0xfffdeb3c>
8000608c:	010007b7          	lui	a5,0x1000
80006090:	06f76663          	bltu	a4,a5,800060fc <API_GetMessageSlot+0x138>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:37
        messageID = 256;
80006094:	800217b7          	lui	a5,0x80021
80006098:	10000713          	li	a4,256
8000609c:	94e7a623          	sw	a4,-1716(a5) # 8002094c <__stack_top+0xfffdeb3c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:38
        for( i = 0; i < PIPE_SIZE; i++ ){
800060a0:	fe042623          	sw	zero,-20(s0)
800060a4:	04c0006f          	j	800060f0 <API_GetMessageSlot+0x12c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:39 (discriminator 3)
            MessagePipe[i].msgID = (MessagePipe[i].msgID & 0x000000FF);
800060a8:	800217b7          	lui	a5,0x80021
800060ac:	fec42683          	lw	a3,-20(s0)
800060b0:	9c078713          	addi	a4,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
800060b4:	24400793          	li	a5,580
800060b8:	02f687b3          	mul	a5,a3,a5
800060bc:	00f707b3          	add	a5,a4,a5
800060c0:	0087a783          	lw	a5,8(a5)
800060c4:	0ff7f713          	andi	a4,a5,255
800060c8:	800217b7          	lui	a5,0x80021
800060cc:	fec42603          	lw	a2,-20(s0)
800060d0:	9c078693          	addi	a3,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
800060d4:	24400793          	li	a5,580
800060d8:	02f607b3          	mul	a5,a2,a5
800060dc:	00f687b3          	add	a5,a3,a5
800060e0:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:38 (discriminator 3)
        for( i = 0; i < PIPE_SIZE; i++ ){
800060e4:	fec42783          	lw	a5,-20(s0)
800060e8:	00178793          	addi	a5,a5,1
800060ec:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:38 (discriminator 1)
800060f0:	fec42703          	lw	a4,-20(s0)
800060f4:	00300793          	li	a5,3
800060f8:	fae7d8e3          	ble	a4,a5,800060a8 <API_GetMessageSlot+0xe4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:42
        }
    }
    return sel;
800060fc:	fe842783          	lw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:43
}
80006100:	00078513          	mv	a0,a5
80006104:	01c12403          	lw	s0,28(sp)
80006108:	02010113          	addi	sp,sp,32
8000610c:	00008067          	ret

80006110 <API_GetServiceSlot>:
API_GetServiceSlot():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:47

////////////////////////////////////////////////////////////
// Returns a free Service slot
unsigned int API_GetServiceSlot(){
80006110:	fe010113          	addi	sp,sp,-32
80006114:	00812e23          	sw	s0,28(sp)
80006118:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:49
    int i;
    for( i = 0; i < PIPE_SIZE; i++ ){
8000611c:	fe042623          	sw	zero,-20(s0)
80006120:	06c0006f          	j	8000618c <API_GetServiceSlot+0x7c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:50
        if (ServicePipe[i].status == PIPE_FREE){
80006124:	800216b7          	lui	a3,0x80021
80006128:	fec42703          	lw	a4,-20(s0)
8000612c:	00070793          	mv	a5,a4
80006130:	00479793          	slli	a5,a5,0x4
80006134:	40e787b3          	sub	a5,a5,a4
80006138:	00279793          	slli	a5,a5,0x2
8000613c:	85c68713          	addi	a4,a3,-1956 # 8002085c <__stack_top+0xfffdea4c>
80006140:	00e787b3          	add	a5,a5,a4
80006144:	0007a703          	lw	a4,0(a5)
80006148:	fff00793          	li	a5,-1
8000614c:	02f71a63          	bne	a4,a5,80006180 <API_GetServiceSlot+0x70>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:51
            ServicePipe[i].status = PIPE_OCCUPIED;
80006150:	800216b7          	lui	a3,0x80021
80006154:	fec42703          	lw	a4,-20(s0)
80006158:	00070793          	mv	a5,a4
8000615c:	00479793          	slli	a5,a5,0x4
80006160:	40e787b3          	sub	a5,a5,a4
80006164:	00279793          	slli	a5,a5,0x2
80006168:	85c68713          	addi	a4,a3,-1956 # 8002085c <__stack_top+0xfffdea4c>
8000616c:	00e787b3          	add	a5,a5,a4
80006170:	00100713          	li	a4,1
80006174:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:52
            return i;
80006178:	fec42783          	lw	a5,-20(s0)
8000617c:	0240006f          	j	800061a0 <API_GetServiceSlot+0x90>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:49 (discriminator 2)
    for( i = 0; i < PIPE_SIZE; i++ ){
80006180:	fec42783          	lw	a5,-20(s0)
80006184:	00178793          	addi	a5,a5,1
80006188:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:49 (discriminator 1)
8000618c:	fec42703          	lw	a4,-20(s0)
80006190:	00300793          	li	a5,3
80006194:	f8e7d8e3          	ble	a4,a5,80006124 <API_GetServiceSlot+0x14>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:55
        }
    }
    return PIPE_FULL;
80006198:	fdfe07b7          	lui	a5,0xfdfe0
8000619c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9dfed>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:56
}
800061a0:	00078513          	mv	a0,a5
800061a4:	01c12403          	lw	s0,28(sp)
800061a8:	02010113          	addi	sp,sp,32
800061ac:	00008067          	ret

800061b0 <API_ClearPipeSlot>:
API_ClearPipeSlot():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:60

////////////////////////////////////////////////////////////
// Clear one PipeSlot after send it
void API_ClearPipeSlot(unsigned int typeSlot){
800061b0:	fd010113          	addi	sp,sp,-48
800061b4:	02812623          	sw	s0,44(sp)
800061b8:	03010413          	addi	s0,sp,48
800061bc:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:61
    unsigned type = typeSlot & 0xFFFF0000;
800061c0:	fdc42703          	lw	a4,-36(s0)
800061c4:	ffff07b7          	lui	a5,0xffff0
800061c8:	00f777b3          	and	a5,a4,a5
800061cc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:62
    unsigned slot = typeSlot & 0x0000FFFF;
800061d0:	fdc42703          	lw	a4,-36(s0)
800061d4:	000107b7          	lui	a5,0x10
800061d8:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
800061dc:	00f777b3          	and	a5,a4,a5
800061e0:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:64
    
    if (type == SERVICE){
800061e4:	fec42703          	lw	a4,-20(s0)
800061e8:	101007b7          	lui	a5,0x10100
800061ec:	02f71863          	bne	a4,a5,8000621c <API_ClearPipeSlot+0x6c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:65
        ServicePipe[slot].status = PIPE_FREE;
800061f0:	800216b7          	lui	a3,0x80021
800061f4:	fe842703          	lw	a4,-24(s0)
800061f8:	00070793          	mv	a5,a4
800061fc:	00479793          	slli	a5,a5,0x4
80006200:	40e787b3          	sub	a5,a5,a4
80006204:	00279793          	slli	a5,a5,0x2
80006208:	85c68713          	addi	a4,a3,-1956 # 8002085c <__stack_top+0xfffdea4c>
8000620c:	00e787b3          	add	a5,a5,a4
80006210:	fff00713          	li	a4,-1
80006214:	00e7a023          	sw	a4,0(a5) # 10100000 <RAM_SIZE+0x10080000>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:70
    } else { // type == MESSAGE
        //printsv("cleaning message pipe slot: ", slot);
        MessagePipe[slot].status = PIPE_FREE;
    }
    return;
80006218:	0280006f          	j	80006240 <API_ClearPipeSlot+0x90>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:68
        MessagePipe[slot].status = PIPE_FREE;
8000621c:	800217b7          	lui	a5,0x80021
80006220:	fe842683          	lw	a3,-24(s0)
80006224:	24400713          	li	a4,580
80006228:	02e68733          	mul	a4,a3,a4
8000622c:	9c078793          	addi	a5,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
80006230:	00f707b3          	add	a5,a4,a5
80006234:	fff00713          	li	a4,-1
80006238:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:70
    return;
8000623c:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:71
}
80006240:	02c12403          	lw	s0,44(sp)
80006244:	03010113          	addi	sp,sp,48
80006248:	00008067          	ret

8000624c <API_checkPipe>:
API_checkPipe():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:73

unsigned int API_checkPipe(unsigned int taskSlot){
8000624c:	fd010113          	addi	sp,sp,-48
80006250:	02812623          	sw	s0,44(sp)
80006254:	03010413          	addi	s0,sp,48
80006258:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:75
    unsigned int i;
    for(i = 0; i < PIPE_SIZE; i++){
8000625c:	fe042623          	sw	zero,-20(s0)
80006260:	0600006f          	j	800062c0 <API_checkPipe+0x74>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:80
        // printsv("i: ", i);
        // printsv("status: ", MessagePipe[i].status);
        // printsv("holder: ", MessagePipe[i].holder);
        // prints("---\n");
        if(MessagePipe[i].status == PIPE_OCCUPIED){
80006264:	800217b7          	lui	a5,0x80021
80006268:	fec42683          	lw	a3,-20(s0)
8000626c:	24400713          	li	a4,580
80006270:	02e68733          	mul	a4,a3,a4
80006274:	9c078793          	addi	a5,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
80006278:	00f707b3          	add	a5,a4,a5
8000627c:	0007a703          	lw	a4,0(a5)
80006280:	00100793          	li	a5,1
80006284:	02f71863          	bne	a4,a5,800062b4 <API_checkPipe+0x68>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:81
            if(MessagePipe[i].holder == taskSlot){
80006288:	800217b7          	lui	a5,0x80021
8000628c:	fec42683          	lw	a3,-20(s0)
80006290:	9c078713          	addi	a4,a5,-1600 # 800209c0 <__stack_top+0xfffdebb0>
80006294:	24400793          	li	a5,580
80006298:	02f687b3          	mul	a5,a3,a5
8000629c:	00f707b3          	add	a5,a4,a5
800062a0:	0047a783          	lw	a5,4(a5)
800062a4:	fdc42703          	lw	a4,-36(s0)
800062a8:	00f71663          	bne	a4,a5,800062b4 <API_checkPipe+0x68>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:82
                return 1;
800062ac:	00100793          	li	a5,1
800062b0:	0200006f          	j	800062d0 <API_checkPipe+0x84>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:75 (discriminator 2)
    for(i = 0; i < PIPE_SIZE; i++){
800062b4:	fec42783          	lw	a5,-20(s0)
800062b8:	00178793          	addi	a5,a5,1
800062bc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:75 (discriminator 1)
800062c0:	fec42703          	lw	a4,-20(s0)
800062c4:	00300793          	li	a5,3
800062c8:	f8e7fee3          	bleu	a4,a5,80006264 <API_checkPipe+0x18>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:86
            }
        }
    }
    return 0;
800062cc:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:87
}
800062d0:	00078513          	mv	a0,a5
800062d4:	02c12403          	lw	s0,44(sp)
800062d8:	03010113          	addi	sp,sp,48
800062dc:	00008067          	ret

800062e0 <PLIC_init>:
PLIC_init():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:124
{
800062e0:	fe010113          	addi	sp,sp,-32
800062e4:	00812e23          	sw	s0,28(sp)
800062e8:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:126
    unsigned long hart_id = read_csr(mhartid);
800062ec:	f14027f3          	csrr	a5,mhartid
800062f0:	fef42423          	sw	a5,-24(s0)
800062f4:	fe842783          	lw	a5,-24(s0)
800062f8:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
800062fc:	fe042623          	sw	zero,-20(s0)
80006300:	03c0006f          	j	8000633c <PLIC_init+0x5c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:131 (discriminator 3)
        PLIC->TARGET_ENABLES[hart_id].ENABLES[inc] = 0;
80006304:	40000737          	lui	a4,0x40000
80006308:	fe442783          	lw	a5,-28(s0)
8000630c:	00579693          	slli	a3,a5,0x5
80006310:	fec42783          	lw	a5,-20(s0)
80006314:	00f686b3          	add	a3,a3,a5
80006318:	000017b7          	lui	a5,0x1
8000631c:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80006320:	00f687b3          	add	a5,a3,a5
80006324:	00279793          	slli	a5,a5,0x2
80006328:	00f707b3          	add	a5,a4,a5
8000632c:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 3)
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
80006330:	fec42783          	lw	a5,-20(s0)
80006334:	00178793          	addi	a5,a5,1
80006338:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 1)
8000633c:	fec42783          	lw	a5,-20(s0)
80006340:	fc0782e3          	beqz	a5,80006304 <PLIC_init+0x24>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
80006344:	fe042623          	sw	zero,-20(s0)
80006348:	0240006f          	j	8000636c <PLIC_init+0x8c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:139 (discriminator 3)
        PLIC->SOURCE_PRIORITY[inc] = 0;
8000634c:	40000737          	lui	a4,0x40000
80006350:	fec42783          	lw	a5,-20(s0)
80006354:	00279793          	slli	a5,a5,0x2
80006358:	00f707b3          	add	a5,a4,a5
8000635c:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 3)
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
80006360:	fec42783          	lw	a5,-20(s0)
80006364:	00178793          	addi	a5,a5,1
80006368:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 1)
8000636c:	fec42703          	lw	a4,-20(s0)
80006370:	01e00793          	li	a5,30
80006374:	fce7fce3          	bleu	a4,a5,8000634c <PLIC_init+0x6c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:143
    PLIC->TARGET[hart_id].PRIORITY_THRESHOLD = 0;
80006378:	40000737          	lui	a4,0x40000
8000637c:	fe442783          	lw	a5,-28(s0)
80006380:	20078793          	addi	a5,a5,512
80006384:	00c79793          	slli	a5,a5,0xc
80006388:	00f707b3          	add	a5,a4,a5
8000638c:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:146
    set_csr(mie, MIP_MEIP);
80006390:	000017b7          	lui	a5,0x1
80006394:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80006398:	3047a7f3          	csrrs	a5,mie,a5
8000639c:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:147
}
800063a0:	00000013          	nop
800063a4:	01c12403          	lw	s0,28(sp)
800063a8:	02010113          	addi	sp,sp,32
800063ac:	00008067          	ret

800063b0 <main>:
main():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:58
extern volatile unsigned int NI_IRCount;

/*-----------------------------------------------------------*/

int main( void )
{
800063b0:	fd010113          	addi	sp,sp,-48
800063b4:	02112623          	sw	ra,44(sp)
800063b8:	02812423          	sw	s0,40(sp)
800063bc:	03010413          	addi	s0,sp,48
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:60
	char str[20];
    PLIC_init();
800063c0:	f21ff0ef          	jal	ra,800062e0 <PLIC_init>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:66

    /**************************************************************************
    * Initialize CoreUART with its base address, baud value, and line
    * configuration.
    *************************************************************************/
    UART_init(&g_uart, COREUARTAPB0_BASE_ADDR, BAUD_VALUE_115200,
800063c4:	00100693          	li	a3,1
800063c8:	02c00613          	li	a2,44
800063cc:	700015b7          	lui	a1,0x70001
800063d0:	800227b7          	lui	a5,0x80022
800063d4:	e0478513          	addi	a0,a5,-508 # 80021e04 <__stack_top+0xfffdfff4>
800063d8:	c51fa0ef          	jal	ra,80001028 <UART_init>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:72
             (DATA_8_BITS | NO_PARITY) );
    
	/**************************************************************************
    * Initialize the Chronos platform stuff
    *************************************************************************/
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n Chronos platform initializing... \n" );
800063dc:	800077b7          	lui	a5,0x80007
800063e0:	31478593          	addi	a1,a5,788 # 80007314 <__stack_top+0xfffc5504>
800063e4:	800227b7          	lui	a5,0x80022
800063e8:	e0478513          	addi	a0,a5,-508 # 80021e04 <__stack_top+0xfffdfff4>
800063ec:	e09fa0ef          	jal	ra,800011f4 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:73
	Chronos_init();
800063f0:	93dfc0ef          	jal	ra,80002d2c <Chronos_init>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:74
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This terminal belongs to the address: " );
800063f4:	800077b7          	lui	a5,0x80007
800063f8:	33c78593          	addi	a1,a5,828 # 8000733c <__stack_top+0xfffc552c>
800063fc:	800227b7          	lui	a5,0x80022
80006400:	e0478513          	addi	a0,a5,-508 # 80021e04 <__stack_top+0xfffdfff4>
80006404:	df1fa0ef          	jal	ra,800011f4 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:75
	myItoa(ProcessorAddr, str, 16);
80006408:	800227b7          	lui	a5,0x80022
8000640c:	e0c7a783          	lw	a5,-500(a5) # 80021e0c <__stack_top+0xfffdfffc>
80006410:	00078713          	mv	a4,a5
80006414:	fdc40793          	addi	a5,s0,-36
80006418:	01000613          	li	a2,16
8000641c:	00078593          	mv	a1,a5
80006420:	00070513          	mv	a0,a4
80006424:	da9fc0ef          	jal	ra,800031cc <myItoa>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:76
    UART_polled_tx_string( &g_uart, (const uint8_t *)str); UART_polled_tx_string( &g_uart, (const uint8_t *)"\n");
80006428:	fdc40793          	addi	a5,s0,-36
8000642c:	00078593          	mv	a1,a5
80006430:	800227b7          	lui	a5,0x80022
80006434:	e0478513          	addi	a0,a5,-508 # 80021e04 <__stack_top+0xfffdfff4>
80006438:	dbdfa0ef          	jal	ra,800011f4 <UART_polled_tx_string>
8000643c:	800077b7          	lui	a5,0x80007
80006440:	36878593          	addi	a1,a5,872 # 80007368 <__stack_top+0xfffc5558>
80006444:	800227b7          	lui	a5,0x80022
80006448:	e0478513          	addi	a0,a5,-508 # 80021e04 <__stack_top+0xfffdfff4>
8000644c:	da9fa0ef          	jal	ra,800011f4 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:79
	
	//xTaskCreate( NI_TX_Handler, "TXHandler", 1024*4, NULL, (tskIDLE_PRIORITY + 1), NULL);
	xTaskCreate( NI_RX_Handler, "RXHandler", 1024*3, NULL, (tskIDLE_PRIORITY + 1), NULL);
80006450:	00000893          	li	a7,0
80006454:	00000813          	li	a6,0
80006458:	00000793          	li	a5,0
8000645c:	00100713          	li	a4,1
80006460:	00000693          	li	a3,0
80006464:	00001637          	lui	a2,0x1
80006468:	c0060613          	addi	a2,a2,-1024 # c00 <HEAP_SIZE-0xf400>
8000646c:	800075b7          	lui	a1,0x80007
80006470:	36c58593          	addi	a1,a1,876 # 8000736c <__stack_top+0xfffc555c>
80006474:	80006537          	lui	a0,0x80006
80006478:	6e050513          	addi	a0,a0,1760 # 800066e0 <__stack_top+0xfffc48d0>
8000647c:	a41fb0ef          	jal	ra,80001ebc <xTaskGenericCreate>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:81

	if (ProcessorAddr == 0x0000){
80006480:	800227b7          	lui	a5,0x80022
80006484:	e0c7a783          	lw	a5,-500(a5) # 80021e0c <__stack_top+0xfffdfffc>
80006488:	04079663          	bnez	a5,800064d4 <main+0x124>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:82
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is the Global Master: \n" );
8000648c:	800077b7          	lui	a5,0x80007
80006490:	37878593          	addi	a1,a5,888 # 80007378 <__stack_top+0xfffc5568>
80006494:	800227b7          	lui	a5,0x80022
80006498:	e0478513          	addi	a0,a5,-508 # 80021e04 <__stack_top+0xfffdfff4>
8000649c:	d59fa0ef          	jal	ra,800011f4 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:84
		/* Create the GlobalManager task */
		xTaskCreate( GlobalManagerTask, "GlobalMaster", 1024*6, NULL, (tskIDLE_PRIORITY + 1), NULL );
800064a0:	00000893          	li	a7,0
800064a4:	00000813          	li	a6,0
800064a8:	00000793          	li	a5,0
800064ac:	00100713          	li	a4,1
800064b0:	00000693          	li	a3,0
800064b4:	00002637          	lui	a2,0x2
800064b8:	80060613          	addi	a2,a2,-2048 # 1800 <HEAP_SIZE-0xe800>
800064bc:	800075b7          	lui	a1,0x80007
800064c0:	3a458593          	addi	a1,a1,932 # 800073a4 <__stack_top+0xfffc5594>
800064c4:	80006537          	lui	a0,0x80006
800064c8:	64c50513          	addi	a0,a0,1612 # 8000664c <__stack_top+0xfffc483c>
800064cc:	9f1fb0ef          	jal	ra,80001ebc <xTaskGenericCreate>
800064d0:	0480006f          	j	80006518 <main+0x168>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:86
	} else {
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is a Slave: \n" );
800064d4:	800077b7          	lui	a5,0x80007
800064d8:	3b478593          	addi	a1,a5,948 # 800073b4 <__stack_top+0xfffc55a4>
800064dc:	800227b7          	lui	a5,0x80022
800064e0:	e0478513          	addi	a0,a5,-508 # 80021e04 <__stack_top+0xfffdfff4>
800064e4:	d11fa0ef          	jal	ra,800011f4 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:89
		
		/* Create the two test tasks. */
		xTaskCreate( vUartAliveTask, "Alive", 1024*3, NULL, (tskIDLE_PRIORITY + 1), NULL );
800064e8:	00000893          	li	a7,0
800064ec:	00000813          	li	a6,0
800064f0:	00000793          	li	a5,0
800064f4:	00100713          	li	a4,1
800064f8:	00000693          	li	a3,0
800064fc:	00001637          	lui	a2,0x1
80006500:	c0060613          	addi	a2,a2,-1024 # c00 <HEAP_SIZE-0xf400>
80006504:	800075b7          	lui	a1,0x80007
80006508:	3d458593          	addi	a1,a1,980 # 800073d4 <__stack_top+0xfffc55c4>
8000650c:	80006537          	lui	a0,0x80006
80006510:	56450513          	addi	a0,a0,1380 # 80006564 <__stack_top+0xfffc4754>
80006514:	9a9fb0ef          	jal	ra,80001ebc <xTaskGenericCreate>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:93
	}	

	/* Start the kernel.  From here on, only tasks and interrupts will run. */
	vTaskStartScheduler();
80006518:	d21fb0ef          	jal	ra,80002238 <vTaskStartScheduler>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:96

	/* Exit FreeRTOS */
	return 0;
8000651c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:97
}
80006520:	00078513          	mv	a0,a5
80006524:	02c12083          	lw	ra,44(sp)
80006528:	02812403          	lw	s0,40(sp)
8000652c:	03010113          	addi	sp,sp,48
80006530:	00008067          	ret

80006534 <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:102

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
80006534:	ff010113          	addi	sp,sp,-16
80006538:	00812623          	sw	s0,12(sp)
8000653c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:113
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
80006540:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:114 (discriminator 1)
	for( ;; );
80006544:	0000006f          	j	80006544 <vApplicationMallocFailedHook+0x10>

80006548 <vApplicationIdleHook>:
vApplicationIdleHook():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:119
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
80006548:	ff010113          	addi	sp,sp,-16
8000654c:	00812623          	sw	s0,12(sp)
80006550:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:129
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
80006554:	00000013          	nop
80006558:	00c12403          	lw	s0,12(sp)
8000655c:	01010113          	addi	sp,sp,16
80006560:	00008067          	ret

80006564 <vUartAliveTask>:
vUartAliveTask():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:146
	for( ;; );
}
/*-----------------------------------------------------------*/

static void vUartAliveTask( void *pvParameters )
{
80006564:	fc010113          	addi	sp,sp,-64
80006568:	02112e23          	sw	ra,60(sp)
8000656c:	02812c23          	sw	s0,56(sp)
80006570:	04010413          	addi	s0,sp,64
80006574:	fca42623          	sw	a0,-52(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:155
	/*register long sp1 asm("s2") = 0;
	register long sp2 asm("s3") = 0;
	asm("addi	s2, sp, 0");
	printsv("meu sp1: ", sp1);*/

	for( i = 0 ;; i++ ){
80006578:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:159
		/*asm("addi	s3, sp, 0");
		printsvsv("meu sp2: ", sp2, " dif: ", sp2-sp1);*/
		// Start every task that is ready!
		for(j = 0; j < NUM_MAX_TASKS; j++){
8000657c:	fe042423          	sw	zero,-24(s0)
80006580:	0a80006f          	j	80006628 <vUartAliveTask+0xc4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:160
			if(TaskList[j].status == TASK_SLOT_READY){
80006584:	800226b7          	lui	a3,0x80022
80006588:	fe842703          	lw	a4,-24(s0)
8000658c:	00070793          	mv	a5,a4
80006590:	00579793          	slli	a5,a5,0x5
80006594:	00e787b3          	add	a5,a5,a4
80006598:	00279793          	slli	a5,a5,0x2
8000659c:	a7868713          	addi	a4,a3,-1416 # 80021a78 <__stack_top+0xfffdfc68>
800065a0:	00e787b3          	add	a5,a5,a4
800065a4:	0007a703          	lw	a4,0(a5)
800065a8:	00300793          	li	a5,3
800065ac:	06f71863          	bne	a4,a5,8000661c <vUartAliveTask+0xb8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:161
				printsvsv("Starting Task ", TaskList[j].TaskID, " from app ", TaskList[j].AppID);
800065b0:	800226b7          	lui	a3,0x80022
800065b4:	fe842703          	lw	a4,-24(s0)
800065b8:	00070793          	mv	a5,a4
800065bc:	00579793          	slli	a5,a5,0x5
800065c0:	00e787b3          	add	a5,a5,a4
800065c4:	00279793          	slli	a5,a5,0x2
800065c8:	a7868713          	addi	a4,a3,-1416 # 80021a78 <__stack_top+0xfffdfc68>
800065cc:	00e787b3          	add	a5,a5,a4
800065d0:	0107a783          	lw	a5,16(a5)
800065d4:	00078593          	mv	a1,a5
800065d8:	800227b7          	lui	a5,0x80022
800065dc:	fe842703          	lw	a4,-24(s0)
800065e0:	a7878693          	addi	a3,a5,-1416 # 80021a78 <__stack_top+0xfffdfc68>
800065e4:	00070793          	mv	a5,a4
800065e8:	00579793          	slli	a5,a5,0x5
800065ec:	00e787b3          	add	a5,a5,a4
800065f0:	00279793          	slli	a5,a5,0x2
800065f4:	00f687b3          	add	a5,a3,a5
800065f8:	0147a783          	lw	a5,20(a5)
800065fc:	00078693          	mv	a3,a5
80006600:	800077b7          	lui	a5,0x80007
80006604:	3dc78613          	addi	a2,a5,988 # 800073dc <__stack_top+0xfffc55cc>
80006608:	800077b7          	lui	a5,0x80007
8000660c:	3e878513          	addi	a0,a5,1000 # 800073e8 <__stack_top+0xfffc55d8>
80006610:	8e5fc0ef          	jal	ra,80002ef4 <printsvsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:162
				API_TaskStart(j);
80006614:	fe842503          	lw	a0,-24(s0)
80006618:	ea0ff0ef          	jal	ra,80005cb8 <API_TaskStart>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:159 (discriminator 2)
		for(j = 0; j < NUM_MAX_TASKS; j++){
8000661c:	fe842783          	lw	a5,-24(s0)
80006620:	00178793          	addi	a5,a5,1
80006624:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:159 (discriminator 1)
80006628:	fe842703          	lw	a4,-24(s0)
8000662c:	00500793          	li	a5,5
80006630:	f4e7fae3          	bleu	a4,a5,80006584 <vUartAliveTask+0x20>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:173
		UART_polled_tx_string( &g_uart, (const uint8_t *)" PE is alive - " );
		myItoa(i, str, 10);
		UART_polled_tx_string( &g_uart, (const uint8_t *)str);
		UART_polled_tx_string( &g_uart, (const uint8_t *)" -\r\n" );*/
	    //asm("wfi");
		vTaskDelay(1);
80006634:	00100513          	li	a0,1
80006638:	b7dfb0ef          	jal	ra,800021b4 <vTaskDelay>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:155
	for( i = 0 ;; i++ ){
8000663c:	fec42783          	lw	a5,-20(s0)
80006640:	00178793          	addi	a5,a5,1
80006644:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:159
		for(j = 0; j < NUM_MAX_TASKS; j++){
80006648:	f35ff06f          	j	8000657c <vUartAliveTask+0x18>

8000664c <GlobalManagerTask>:
GlobalManagerTask():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:179
	}
}

/*-----------------------------------------------------------*/

static void GlobalManagerTask( void *pvParameters ){
8000664c:	fc010113          	addi	sp,sp,-64
80006650:	02112e23          	sw	ra,60(sp)
80006654:	02812c23          	sw	s0,56(sp)
80006658:	04010413          	addi	s0,sp,64
8000665c:	fca42623          	sw	a0,-52(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:185
	( void ) pvParameters;
	int tick;
	char str[20];

	// Initialize the priority vector with the pattern policy
	GeneratePatternMatrix();
80006660:	f6dfd0ef          	jal	ra,800045cc <GeneratePatternMatrix>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:188

	// Initialize the System Tiles Info
	API_TilesReset();
80006664:	e41fd0ef          	jal	ra,800044a4 <API_TilesReset>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:191

	// Initialize the applications vector
    API_ApplicationsReset();
80006668:	dddfd0ef          	jal	ra,80004444 <API_ApplicationsReset>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:194

	// Informs the Repository that the GLOBALMASTER is ready to receive the application info
	API_RepositoryWakeUp();
8000666c:	a11fd0ef          	jal	ra,8000407c <API_RepositoryWakeUp>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:197 (discriminator 1)

	for(;;){
		tick = xTaskGetTickCount();
80006670:	de1fb0ef          	jal	ra,80002450 <xTaskGetTickCount>
80006674:	00050793          	mv	a5,a0
80006678:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:198 (discriminator 1)
		myItoa(tick, str, 10);
8000667c:	fd840793          	addi	a5,s0,-40
80006680:	00a00613          	li	a2,10
80006684:	00078593          	mv	a1,a5
80006688:	fec42503          	lw	a0,-20(s0)
8000668c:	b41fc0ef          	jal	ra,800031cc <myItoa>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:199 (discriminator 1)
		UART_polled_tx_string( &g_uart, (const uint8_t *)str);
80006690:	fd840793          	addi	a5,s0,-40
80006694:	00078593          	mv	a1,a5
80006698:	800227b7          	lui	a5,0x80022
8000669c:	e0478513          	addi	a0,a5,-508 # 80021e04 <__stack_top+0xfffdfff4>
800066a0:	b55fa0ef          	jal	ra,800011f4 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:200 (discriminator 1)
		printsv("GlobalMasterActive", tick);
800066a4:	fec42583          	lw	a1,-20(s0)
800066a8:	800077b7          	lui	a5,0x80007
800066ac:	3f878513          	addi	a0,a5,1016 # 800073f8 <__stack_top+0xfffc55e8>
800066b0:	ff4fc0ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:201 (discriminator 1)
		UART_polled_tx_string( &g_uart, (const uint8_t *)" GlobalMasterRoutine...\r\n" );
800066b4:	800077b7          	lui	a5,0x80007
800066b8:	40c78593          	addi	a1,a5,1036 # 8000740c <__stack_top+0xfffc55fc>
800066bc:	800227b7          	lui	a5,0x80022
800066c0:	e0478513          	addi	a0,a5,-508 # 80021e04 <__stack_top+0xfffdfff4>
800066c4:	b31fa0ef          	jal	ra,800011f4 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:204 (discriminator 1)

		// Checks if there is some task to allocate...
		API_AllocateTasks(tick);
800066c8:	fec42783          	lw	a5,-20(s0)
800066cc:	00078513          	mv	a0,a5
800066d0:	fa5fd0ef          	jal	ra,80004674 <API_AllocateTasks>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:206 (discriminator 1)

		vTaskDelay(1);
800066d4:	00100513          	li	a0,1
800066d8:	addfb0ef          	jal	ra,800021b4 <vTaskDelay>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:197 (discriminator 1)
		tick = xTaskGetTickCount();
800066dc:	f95ff06f          	j	80006670 <GlobalManagerTask+0x24>

800066e0 <NI_RX_Handler>:
NI_RX_Handler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:231
		//HW_set_32bit_reg(NI_TX, RESET);
		asm("wfi");
	}
}*/

static void NI_RX_Handler( void *pvParameters ){
800066e0:	fd010113          	addi	sp,sp,-48
800066e4:	02112623          	sw	ra,44(sp)
800066e8:	02812423          	sw	s0,40(sp)
800066ec:	03010413          	addi	s0,sp,48
800066f0:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:233
	unsigned int aux;
	NI_IRCount = 0;
800066f4:	800227b7          	lui	a5,0x80022
800066f8:	d807a823          	sw	zero,-624(a5) # 80021d90 <__stack_top+0xfffdff80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:235
	// Enables interruption from NI
    NI_enable_irq(TX_RX);
800066fc:	000077b7          	lui	a5,0x7
80006700:	77778513          	addi	a0,a5,1911 # 7777 <HEAP_SIZE-0x8889>
80006704:	8f9fc0ef          	jal	ra,80002ffc <NI_enable_irq>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:238
	for(;;){

		vPortEnterCritical();
80006708:	f05fa0ef          	jal	ra,8000160c <vPortEnterCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:239
		while(HW_get_32bit_reg(NI_TX) == NI_STATUS_INTER){
8000670c:	0440006f          	j	80006750 <NI_RX_Handler+0x70>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:240
			printsv("TX interruption catched - ", NI_IRCount);
80006710:	800227b7          	lui	a5,0x80022
80006714:	d907a783          	lw	a5,-624(a5) # 80021d90 <__stack_top+0xfffdff80>
80006718:	00078593          	mv	a1,a5
8000671c:	800077b7          	lui	a5,0x80007
80006720:	42878513          	addi	a0,a5,1064 # 80007428 <__stack_top+0xfffc5618>
80006724:	f80fc0ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:241
			API_ClearPipeSlot(SendingSlot); // clear the pipe slot that was transmitted
80006728:	800217b7          	lui	a5,0x80021
8000672c:	8587a783          	lw	a5,-1960(a5) # 80020858 <__stack_top+0xfffdea48>
80006730:	00078513          	mv	a0,a5
80006734:	a7dff0ef          	jal	ra,800061b0 <API_ClearPipeSlot>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:242
			HW_set_32bit_reg(NI_TX, DONE);  // releases the interruption
80006738:	000057b7          	lui	a5,0x5
8000673c:	55578593          	addi	a1,a5,1365 # 5555 <HEAP_SIZE-0xaaab>
80006740:	500007b7          	lui	a5,0x50000
80006744:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80006748:	809fa0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:243
			API_Try2Send();                 // tries to send another packet (if available)
8000674c:	d8dfc0ef          	jal	ra,800034d8 <API_Try2Send>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:239
		while(HW_get_32bit_reg(NI_TX) == NI_STATUS_INTER){
80006750:	500007b7          	lui	a5,0x50000
80006754:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80006758:	801fa0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
8000675c:	00050713          	mv	a4,a0
80006760:	000017b7          	lui	a5,0x1
80006764:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
80006768:	faf704e3          	beq	a4,a5,80006710 <NI_RX_Handler+0x30>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:246
		}

		while(HW_get_32bit_reg(NI_RX) == NI_STATUS_INTER || HW_get_32bit_reg(NI_RX) == NI_STATUS_WAITING){
8000676c:	5b80006f          	j	80006d24 <NI_RX_Handler+0x644>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:247
			printsv("RX interruption catched - ", NI_IRCount);
80006770:	800227b7          	lui	a5,0x80022
80006774:	d907a783          	lw	a5,-624(a5) # 80021d90 <__stack_top+0xfffdff80>
80006778:	00078593          	mv	a1,a5
8000677c:	800077b7          	lui	a5,0x80007
80006780:	44478513          	addi	a0,a5,1092 # 80007444 <__stack_top+0xfffc5634>
80006784:	f20fc0ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:248
			switch (incommingPacket.service){
80006788:	800217b7          	lui	a5,0x80021
8000678c:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006790:	0087a783          	lw	a5,8(a5)
80006794:	03300713          	li	a4,51
80006798:	22e78663          	beq	a5,a4,800069c4 <NI_RX_Handler+0x2e4>
8000679c:	03300713          	li	a4,51
800067a0:	02f76a63          	bltu	a4,a5,800067d4 <NI_RX_Handler+0xf4>
800067a4:	02000713          	li	a4,32
800067a8:	46e78e63          	beq	a5,a4,80006c24 <NI_RX_Handler+0x544>
800067ac:	02000713          	li	a4,32
800067b0:	00f76863          	bltu	a4,a5,800067c0 <NI_RX_Handler+0xe0>
800067b4:	01000713          	li	a4,16
800067b8:	3ae78063          	beq	a5,a4,80006b58 <NI_RX_Handler+0x478>
800067bc:	5340006f          	j	80006cf0 <NI_RX_Handler+0x610>
800067c0:	02100713          	li	a4,33
800067c4:	4ce78e63          	beq	a5,a4,80006ca0 <NI_RX_Handler+0x5c0>
800067c8:	03000713          	li	a4,48
800067cc:	08e78063          	beq	a5,a4,8000684c <NI_RX_Handler+0x16c>
800067d0:	5200006f          	j	80006cf0 <NI_RX_Handler+0x610>
800067d4:	40000713          	li	a4,1024
800067d8:	24e78a63          	beq	a5,a4,80006a2c <NI_RX_Handler+0x34c>
800067dc:	40000713          	li	a4,1024
800067e0:	00f76c63          	bltu	a4,a5,800067f8 <NI_RX_Handler+0x118>
800067e4:	03500713          	li	a4,53
800067e8:	20e78863          	beq	a5,a4,800069f8 <NI_RX_Handler+0x318>
800067ec:	20000713          	li	a4,512
800067f0:	00e78e63          	beq	a5,a4,8000680c <NI_RX_Handler+0x12c>
800067f4:	4fc0006f          	j	80006cf0 <NI_RX_Handler+0x610>
800067f8:	40100713          	li	a4,1025
800067fc:	2ae78863          	beq	a5,a4,80006aac <NI_RX_Handler+0x3cc>
80006800:	50000713          	li	a4,1280
80006804:	12e78663          	beq	a5,a4,80006930 <NI_RX_Handler+0x250>
80006808:	4e80006f          	j	80006cf0 <NI_RX_Handler+0x610>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:252

				case REPOSITORY_APP_INFO: // When the repository informs the GM that exist a new Application available:
					//prints("REPOSITORY_APP_INFO\n");
					API_AddApplication(incommingPacket.application_id,
8000680c:	800217b7          	lui	a5,0x80021
80006810:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006814:	00c7a703          	lw	a4,12(a5)
80006818:	800217b7          	lui	a5,0x80021
8000681c:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006820:	0107a583          	lw	a1,16(a5)
80006824:	800217b7          	lui	a5,0x80021
80006828:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
8000682c:	0147a603          	lw	a2,20(a5)
80006830:	800217b7          	lui	a5,0x80021
80006834:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006838:	0187a783          	lw	a5,24(a5)
8000683c:	00078693          	mv	a3,a5
80006840:	00070513          	mv	a0,a4
80006844:	999fd0ef          	jal	ra,800041dc <API_AddApplication>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:256
									incommingPacket.aplication_period, 
									incommingPacket.application_executions, 
									incommingPacket.application_n_tasks);
					break;
80006848:	4c80006f          	j	80006d10 <NI_RX_Handler+0x630>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:259
				
				case TASK_ALLOCATION_SEND: // When the GM asks one Slave to allocate one task
					prints("TASK_ALLOCATION_SEND\n");
8000684c:	800077b7          	lui	a5,0x80007
80006850:	46078513          	addi	a0,a5,1120 # 80007460 <__stack_top+0xfffc5650>
80006854:	da4fc0ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:260
					aux = API_TaskAllocation(incommingPacket.task_id,
80006858:	800217b7          	lui	a5,0x80021
8000685c:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006860:	00c7a503          	lw	a0,12(a5)
80006864:	800217b7          	lui	a5,0x80021
80006868:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
8000686c:	0107a583          	lw	a1,16(a5)
80006870:	800217b7          	lui	a5,0x80021
80006874:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006878:	0147a603          	lw	a2,20(a5)
8000687c:	800217b7          	lui	a5,0x80021
80006880:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006884:	0187a683          	lw	a3,24(a5)
80006888:	800217b7          	lui	a5,0x80021
8000688c:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006890:	01c7a783          	lw	a5,28(a5)
80006894:	00078713          	mv	a4,a5
80006898:	864ff0ef          	jal	ra,800058fc <API_TaskAllocation>
8000689c:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:265
											incommingPacket.task_txt_size,
											incommingPacket.task_bss_size,
											incommingPacket.task_start_point,
											incommingPacket.task_app_id);
					printsv("Task slot: ", aux);
800068a0:	fec42783          	lw	a5,-20(s0)
800068a4:	00078593          	mv	a1,a5
800068a8:	800077b7          	lui	a5,0x80007
800068ac:	47878513          	addi	a0,a5,1144 # 80007478 <__stack_top+0xfffc5668>
800068b0:	df4fc0ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:266
					printsv("Task slot TaskAddr: ", TaskList[aux].taskAddr);
800068b4:	800227b7          	lui	a5,0x80022
800068b8:	fec42703          	lw	a4,-20(s0)
800068bc:	a7878693          	addi	a3,a5,-1416 # 80021a78 <__stack_top+0xfffdfc68>
800068c0:	00070793          	mv	a5,a4
800068c4:	00579793          	slli	a5,a5,0x5
800068c8:	00e787b3          	add	a5,a5,a4
800068cc:	00279793          	slli	a5,a5,0x2
800068d0:	00f687b3          	add	a5,a3,a5
800068d4:	0287a783          	lw	a5,40(a5)
800068d8:	00078593          	mv	a1,a5
800068dc:	800077b7          	lui	a5,0x80007
800068e0:	48478513          	addi	a0,a5,1156 # 80007484 <__stack_top+0xfffc5674>
800068e4:	dc0fc0ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:268
					// Informs the NI were to write the application
					incommingPacket.service = TASK_ALLOCATION_FINISHED;
800068e8:	800217b7          	lui	a5,0x80021
800068ec:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
800068f0:	03300713          	li	a4,51
800068f4:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:269
					HW_set_32bit_reg(NI_RX, TaskList[aux].taskAddr);
800068f8:	800227b7          	lui	a5,0x80022
800068fc:	fec42703          	lw	a4,-20(s0)
80006900:	a7878693          	addi	a3,a5,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80006904:	00070793          	mv	a5,a4
80006908:	00579793          	slli	a5,a5,0x5
8000690c:	00e787b3          	add	a5,a5,a4
80006910:	00279793          	slli	a5,a5,0x2
80006914:	00f687b3          	add	a5,a3,a5
80006918:	0287a783          	lw	a5,40(a5)
8000691c:	00078593          	mv	a1,a5
80006920:	500007b7          	lui	a5,0x50000
80006924:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80006928:	e28fa0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:270
					break;
8000692c:	3e40006f          	j	80006d10 <NI_RX_Handler+0x630>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:273
				
				case TASK_FINISH:
					printsvsv("FINISHED: Task ", incommingPacket.task_id, "from application ", incommingPacket.task_app_id);
80006930:	800217b7          	lui	a5,0x80021
80006934:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006938:	00c7a783          	lw	a5,12(a5)
8000693c:	00078713          	mv	a4,a5
80006940:	800217b7          	lui	a5,0x80021
80006944:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006948:	01c7a783          	lw	a5,28(a5)
8000694c:	00078693          	mv	a3,a5
80006950:	800077b7          	lui	a5,0x80007
80006954:	49c78613          	addi	a2,a5,1180 # 8000749c <__stack_top+0xfffc568c>
80006958:	00070593          	mv	a1,a4
8000695c:	800077b7          	lui	a5,0x80007
80006960:	4b078513          	addi	a0,a5,1200 # 800074b0 <__stack_top+0xfffc56a0>
80006964:	d90fc0ef          	jal	ra,80002ef4 <printsvsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:274
					API_ClearTaskSlotFromTile(incommingPacket.task_dest_addr, incommingPacket.task_app_id, incommingPacket.task_id);
80006968:	800217b7          	lui	a5,0x80021
8000696c:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006970:	0307a703          	lw	a4,48(a5)
80006974:	800217b7          	lui	a5,0x80021
80006978:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
8000697c:	01c7a683          	lw	a3,28(a5)
80006980:	800217b7          	lui	a5,0x80021
80006984:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006988:	00c7a783          	lw	a5,12(a5)
8000698c:	00078613          	mv	a2,a5
80006990:	00068593          	mv	a1,a3
80006994:	00070513          	mv	a0,a4
80006998:	d48fe0ef          	jal	ra,80004ee0 <API_ClearTaskSlotFromTile>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:275
					API_DealocateTask(incommingPacket.task_id, incommingPacket.task_app_id);
8000699c:	800217b7          	lui	a5,0x80021
800069a0:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
800069a4:	00c7a703          	lw	a4,12(a5)
800069a8:	800217b7          	lui	a5,0x80021
800069ac:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
800069b0:	01c7a783          	lw	a5,28(a5)
800069b4:	00078593          	mv	a1,a5
800069b8:	00070513          	mv	a0,a4
800069bc:	f91fd0ef          	jal	ra,8000494c <API_DealocateTask>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:276
					break;
800069c0:	3500006f          	j	80006d10 <NI_RX_Handler+0x630>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:279

				case TASK_ALLOCATION_FINISHED:
					prints("TASK_ALLOCATION_FINISHED\n");
800069c4:	800077b7          	lui	a5,0x80007
800069c8:	4c078513          	addi	a0,a5,1216 # 800074c0 <__stack_top+0xfffc56b0>
800069cc:	c2cfc0ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:280
					API_AckTaskAllocation(incommingPacket.task_id, incommingPacket.task_app_id);
800069d0:	800217b7          	lui	a5,0x80021
800069d4:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
800069d8:	00c7a703          	lw	a4,12(a5)
800069dc:	800217b7          	lui	a5,0x80021
800069e0:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
800069e4:	01c7a783          	lw	a5,28(a5)
800069e8:	00078593          	mv	a1,a5
800069ec:	00070513          	mv	a0,a4
800069f0:	c21fc0ef          	jal	ra,80003610 <API_AckTaskAllocation>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:290
						printsv("taskSize: ", TaskList[aux].taskSize);
						printsv("taskAddr: ", TaskList[aux].taskAddr);
						printsv("mainAddr: ", TaskList[aux].mainAddr);
						printsv("taskHandler: ", (unsigned int)TaskList[aux].TaskHandler);
					}*/
					break;
800069f4:	31c0006f          	j	80006d10 <NI_RX_Handler+0x630>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:293

				case TASK_ALLOCATION_SUCCESS:
					prints("TASK_ALLOCATION_SUCCESS\n");
800069f8:	800077b7          	lui	a5,0x80007
800069fc:	4dc78513          	addi	a0,a5,1244 # 800074dc <__stack_top+0xfffc56cc>
80006a00:	bf8fc0ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:295
					//printi(incommingPacket.task_id);
					API_TaskAllocated(incommingPacket.task_id, incommingPacket.task_app_id);
80006a04:	800217b7          	lui	a5,0x80021
80006a08:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006a0c:	00c7a703          	lw	a4,12(a5)
80006a10:	800217b7          	lui	a5,0x80021
80006a14:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006a18:	01c7a783          	lw	a5,28(a5)
80006a1c:	00078593          	mv	a1,a5
80006a20:	00070513          	mv	a0,a4
80006a24:	8e1fe0ef          	jal	ra,80005304 <API_TaskAllocated>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:296
					break;
80006a28:	2e80006f          	j	80006d10 <NI_RX_Handler+0x630>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:299

				case TASK_START:
					prints("Chegou um TASK_START!\n");
80006a2c:	800077b7          	lui	a5,0x80007
80006a30:	4f878513          	addi	a0,a5,1272 # 800074f8 <__stack_top+0xfffc56e8>
80006a34:	bc4fc0ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:300
					aux = API_GetTaskSlot(incommingPacket.task_id, incommingPacket.task_app_id);
80006a38:	800217b7          	lui	a5,0x80021
80006a3c:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006a40:	00c7a703          	lw	a4,12(a5)
80006a44:	800217b7          	lui	a5,0x80021
80006a48:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006a4c:	01c7a783          	lw	a5,28(a5)
80006a50:	00078593          	mv	a1,a5
80006a54:	00070513          	mv	a0,a4
80006a58:	97cff0ef          	jal	ra,80005bd4 <API_GetTaskSlot>
80006a5c:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:302
					// Informs the NI were to write the application
					incommingPacket.service = TASK_RUN;
80006a60:	800217b7          	lui	a5,0x80021
80006a64:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006a68:	40100713          	li	a4,1025
80006a6c:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:303
					HW_set_32bit_reg(NI_RX, (unsigned int)&TaskList[aux].appNumTasks);
80006a70:	fec42703          	lw	a4,-20(s0)
80006a74:	00070793          	mv	a5,a4
80006a78:	00579793          	slli	a5,a5,0x5
80006a7c:	00e787b3          	add	a5,a5,a4
80006a80:	00279793          	slli	a5,a5,0x2
80006a84:	05078713          	addi	a4,a5,80
80006a88:	800227b7          	lui	a5,0x80022
80006a8c:	a7878793          	addi	a5,a5,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80006a90:	00f707b3          	add	a5,a4,a5
80006a94:	00878793          	addi	a5,a5,8
80006a98:	00078593          	mv	a1,a5
80006a9c:	500007b7          	lui	a5,0x50000
80006aa0:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80006aa4:	cacfa0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:304
					break;
80006aa8:	2680006f          	j	80006d10 <NI_RX_Handler+0x630>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:307
				
				case TASK_RUN:
					prints("Chegou um TASK_RUN!\n");
80006aac:	800077b7          	lui	a5,0x80007
80006ab0:	51078513          	addi	a0,a5,1296 # 80007510 <__stack_top+0xfffc5700>
80006ab4:	b44fc0ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:308
					aux = API_GetTaskSlot(incommingPacket.task_id, incommingPacket.task_app_id);
80006ab8:	800217b7          	lui	a5,0x80021
80006abc:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006ac0:	00c7a703          	lw	a4,12(a5)
80006ac4:	800217b7          	lui	a5,0x80021
80006ac8:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006acc:	01c7a783          	lw	a5,28(a5)
80006ad0:	00078593          	mv	a1,a5
80006ad4:	00070513          	mv	a0,a4
80006ad8:	8fcff0ef          	jal	ra,80005bd4 <API_GetTaskSlot>
80006adc:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:309
					TaskList[aux].status = TASK_SLOT_READY;
80006ae0:	800226b7          	lui	a3,0x80022
80006ae4:	fec42703          	lw	a4,-20(s0)
80006ae8:	00070793          	mv	a5,a4
80006aec:	00579793          	slli	a5,a5,0x5
80006af0:	00e787b3          	add	a5,a5,a4
80006af4:	00279793          	slli	a5,a5,0x2
80006af8:	a7868713          	addi	a4,a3,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80006afc:	00e787b3          	add	a5,a5,a4
80006b00:	00300713          	li	a4,3
80006b04:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:310
					printsvsv("Enabling Task: ", incommingPacket.task_id, "from app: ", incommingPacket.task_app_id);
80006b08:	800217b7          	lui	a5,0x80021
80006b0c:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006b10:	00c7a783          	lw	a5,12(a5)
80006b14:	00078713          	mv	a4,a5
80006b18:	800217b7          	lui	a5,0x80021
80006b1c:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006b20:	01c7a783          	lw	a5,28(a5)
80006b24:	00078693          	mv	a3,a5
80006b28:	800077b7          	lui	a5,0x80007
80006b2c:	52878613          	addi	a2,a5,1320 # 80007528 <__stack_top+0xfffc5718>
80006b30:	00070593          	mv	a1,a4
80006b34:	800077b7          	lui	a5,0x80007
80006b38:	53478513          	addi	a0,a5,1332 # 80007534 <__stack_top+0xfffc5724>
80006b3c:	bb8fc0ef          	jal	ra,80002ef4 <printsvsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:311
					printsv("Slot: ", aux);
80006b40:	fec42783          	lw	a5,-20(s0)
80006b44:	00078593          	mv	a1,a5
80006b48:	800077b7          	lui	a5,0x80007
80006b4c:	54478513          	addi	a0,a5,1348 # 80007544 <__stack_top+0xfffc5734>
80006b50:	b54fc0ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:312
					break;
80006b54:	1bc0006f          	j	80006d10 <NI_RX_Handler+0x630>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:316

				case MESSAGE_REQUEST:
					// check the pipe
					printsvsv("Chegou um message request! App: ", incommingPacket.task_app_id, "Task: ", incommingPacket.task_id);
80006b58:	800217b7          	lui	a5,0x80021
80006b5c:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006b60:	01c7a783          	lw	a5,28(a5)
80006b64:	00078713          	mv	a4,a5
80006b68:	800217b7          	lui	a5,0x80021
80006b6c:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006b70:	00c7a783          	lw	a5,12(a5)
80006b74:	00078693          	mv	a3,a5
80006b78:	800077b7          	lui	a5,0x80007
80006b7c:	54c78613          	addi	a2,a5,1356 # 8000754c <__stack_top+0xfffc573c>
80006b80:	00070593          	mv	a1,a4
80006b84:	800077b7          	lui	a5,0x80007
80006b88:	55478513          	addi	a0,a5,1364 # 80007554 <__stack_top+0xfffc5744>
80006b8c:	b68fc0ef          	jal	ra,80002ef4 <printsvsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:317
					aux = API_CheckMessagePipe(incommingPacket.task_id, incommingPacket.task_app_id);
80006b90:	800217b7          	lui	a5,0x80021
80006b94:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006b98:	00c7a703          	lw	a4,12(a5)
80006b9c:	800217b7          	lui	a5,0x80021
80006ba0:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006ba4:	01c7a783          	lw	a5,28(a5)
80006ba8:	00078593          	mv	a1,a5
80006bac:	00070513          	mv	a0,a4
80006bb0:	b1cfd0ef          	jal	ra,80003ecc <API_CheckMessagePipe>
80006bb4:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:318
					if (aux == ERRO){
80006bb8:	fec42703          	lw	a4,-20(s0)
80006bbc:	fff00793          	li	a5,-1
80006bc0:	04f71463          	bne	a4,a5,80006c08 <NI_RX_Handler+0x528>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:320
						// register an messagerequest
						prints("Mensagem não encontrada, adicionando ao PendingReq!\n");
80006bc4:	800077b7          	lui	a5,0x80007
80006bc8:	57878513          	addi	a0,a5,1400 # 80007578 <__stack_top+0xfffc5768>
80006bcc:	a2cfc0ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:321
						API_AddPendingReq(incommingPacket.task_id, incommingPacket.task_app_id, incommingPacket.producer_task_id);
80006bd0:	800217b7          	lui	a5,0x80021
80006bd4:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006bd8:	00c7a703          	lw	a4,12(a5)
80006bdc:	800217b7          	lui	a5,0x80021
80006be0:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006be4:	01c7a683          	lw	a3,28(a5)
80006be8:	800217b7          	lui	a5,0x80021
80006bec:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006bf0:	0147a783          	lw	a5,20(a5)
80006bf4:	00078613          	mv	a2,a5
80006bf8:	00068593          	mv	a1,a3
80006bfc:	00070513          	mv	a0,a4
80006c00:	c08fd0ef          	jal	ra,80004008 <API_AddPendingReq>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:327
					} else {
						prints("Mensagem encontrada no pipe!\n");
						API_PushSendQueue(MESSAGE, aux);
						// API_Try2Send();
					}
					break;
80006c04:	10c0006f          	j	80006d10 <NI_RX_Handler+0x630>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:323
						prints("Mensagem encontrada no pipe!\n");
80006c08:	800077b7          	lui	a5,0x80007
80006c0c:	5b078513          	addi	a0,a5,1456 # 800075b0 <__stack_top+0xfffc57a0>
80006c10:	9e8fc0ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:324
						API_PushSendQueue(MESSAGE, aux);
80006c14:	fec42583          	lw	a1,-20(s0)
80006c18:	20200537          	lui	a0,0x20200
80006c1c:	f90fc0ef          	jal	ra,800033ac <API_PushSendQueue>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:327
					break;
80006c20:	0f00006f          	j	80006d10 <NI_RX_Handler+0x630>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:330
				
				case MESSAGE_DELIVERY:
					prints("Tem uma mensagem chegando...\n");
80006c24:	800077b7          	lui	a5,0x80007
80006c28:	5d078513          	addi	a0,a5,1488 # 800075d0 <__stack_top+0xfffc57c0>
80006c2c:	9ccfc0ef          	jal	ra,80002df8 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:331
					aux = API_GetTaskSlot(incommingPacket.destination_task, incommingPacket.application_id);
80006c30:	800217b7          	lui	a5,0x80021
80006c34:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006c38:	0147a703          	lw	a4,20(a5)
80006c3c:	800217b7          	lui	a5,0x80021
80006c40:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006c44:	00c7a783          	lw	a5,12(a5)
80006c48:	00078593          	mv	a1,a5
80006c4c:	00070513          	mv	a0,a4
80006c50:	f85fe0ef          	jal	ra,80005bd4 <API_GetTaskSlot>
80006c54:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:332
					incommingPacket.service = MESSAGE_DELIVERY_FINISH;
80006c58:	800217b7          	lui	a5,0x80021
80006c5c:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006c60:	02100713          	li	a4,33
80006c64:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:334
					//printsv("MESSAGE_DELIVERY addr: ", TaskList[aux].MsgToReceive);
					HW_set_32bit_reg(NI_RX, TaskList[aux].MsgToReceive);
80006c68:	800226b7          	lui	a3,0x80022
80006c6c:	fec42703          	lw	a4,-20(s0)
80006c70:	00070793          	mv	a5,a4
80006c74:	00579793          	slli	a5,a5,0x5
80006c78:	00e787b3          	add	a5,a5,a4
80006c7c:	00279793          	slli	a5,a5,0x2
80006c80:	a7868713          	addi	a4,a3,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80006c84:	00e787b3          	add	a5,a5,a4
80006c88:	0207a783          	lw	a5,32(a5)
80006c8c:	00078593          	mv	a1,a5
80006c90:	500007b7          	lui	a5,0x50000
80006c94:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80006c98:	ab8fa0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:336
					//prints("done...\n----------\n");
					break;
80006c9c:	0740006f          	j	80006d10 <NI_RX_Handler+0x630>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:340
				
				case MESSAGE_DELIVERY_FINISH:
					//prints("Terminou de entregar a mensagem!!\n");
					aux = API_GetTaskSlot(incommingPacket.destination_task, incommingPacket.application_id);
80006ca0:	800217b7          	lui	a5,0x80021
80006ca4:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006ca8:	0147a703          	lw	a4,20(a5)
80006cac:	800217b7          	lui	a5,0x80021
80006cb0:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006cb4:	00c7a783          	lw	a5,12(a5)
80006cb8:	00078593          	mv	a1,a5
80006cbc:	00070513          	mv	a0,a4
80006cc0:	f15fe0ef          	jal	ra,80005bd4 <API_GetTaskSlot>
80006cc4:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:341
					TaskList[aux].waitingMsg = FALSE;
80006cc8:	800227b7          	lui	a5,0x80022
80006ccc:	fec42703          	lw	a4,-20(s0)
80006cd0:	a7878693          	addi	a3,a5,-1416 # 80021a78 <__stack_top+0xfffdfc68>
80006cd4:	00070793          	mv	a5,a4
80006cd8:	00579793          	slli	a5,a5,0x5
80006cdc:	00e787b3          	add	a5,a5,a4
80006ce0:	00279793          	slli	a5,a5,0x2
80006ce4:	00f687b3          	add	a5,a3,a5
80006ce8:	0007ae23          	sw	zero,28(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:342
					break;
80006cec:	0240006f          	j	80006d10 <NI_RX_Handler+0x630>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:345
					
				default:
					printsv("ERROR External_2_IRQHandler Unknown-Service ", incommingPacket.service);
80006cf0:	800217b7          	lui	a5,0x80021
80006cf4:	95078793          	addi	a5,a5,-1712 # 80020950 <__stack_top+0xfffdeb40>
80006cf8:	0087a783          	lw	a5,8(a5)
80006cfc:	00078593          	mv	a1,a5
80006d00:	800077b7          	lui	a5,0x80007
80006d04:	5f078513          	addi	a0,a5,1520 # 800075f0 <__stack_top+0xfffc57e0>
80006d08:	99cfc0ef          	jal	ra,80002ea4 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:346
					break;
80006d0c:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:348
			}
			HW_set_32bit_reg(NI_RX, DONE);
80006d10:	000057b7          	lui	a5,0x5
80006d14:	55578593          	addi	a1,a5,1365 # 5555 <HEAP_SIZE-0xaaab>
80006d18:	500007b7          	lui	a5,0x50000
80006d1c:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80006d20:	a30fa0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:246
		while(HW_get_32bit_reg(NI_RX) == NI_STATUS_INTER || HW_get_32bit_reg(NI_RX) == NI_STATUS_WAITING){
80006d24:	500007b7          	lui	a5,0x50000
80006d28:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80006d2c:	a2cfa0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
80006d30:	00050713          	mv	a4,a0
80006d34:	000017b7          	lui	a5,0x1
80006d38:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
80006d3c:	a2f70ae3          	beq	a4,a5,80006770 <NI_RX_Handler+0x90>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:246 (discriminator 1)
80006d40:	500007b7          	lui	a5,0x50000
80006d44:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80006d48:	a10fa0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
80006d4c:	00050713          	mv	a4,a0
80006d50:	02200793          	li	a5,34
80006d54:	a0f70ee3          	beq	a4,a5,80006770 <NI_RX_Handler+0x90>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:350
		}
		vPortExitCritical();
80006d58:	8e9fa0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:351
		asm("wfi");
80006d5c:	10500073          	wfi
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:238
		vPortEnterCritical();
80006d60:	9a9ff06f          	j	80006708 <NI_RX_Handler+0x28>

80006d64 <write>:
write():
80006d64:	00001797          	auipc	a5,0x1
80006d68:	8cc78793          	addi	a5,a5,-1844 # 80007630 <_impure_ptr>
80006d6c:	00060693          	mv	a3,a2
80006d70:	00058613          	mv	a2,a1
80006d74:	00050593          	mv	a1,a0
80006d78:	0007a503          	lw	a0,0(a5)
80006d7c:	0040006f          	j	80006d80 <_write_r>

80006d80 <_write_r>:
_write_r():
80006d80:	ff010113          	addi	sp,sp,-16
80006d84:	00812423          	sw	s0,8(sp)
80006d88:	00050413          	mv	s0,a0
80006d8c:	00058513          	mv	a0,a1
80006d90:	00060593          	mv	a1,a2
80006d94:	00068613          	mv	a2,a3
80006d98:	0001a797          	auipc	a5,0x1a
80006d9c:	5207ac23          	sw	zero,1336(a5) # 800212d0 <errno>
80006da0:	00112623          	sw	ra,12(sp)
80006da4:	8c4fa0ef          	jal	ra,80000e68 <_write>
80006da8:	fff00793          	li	a5,-1
80006dac:	00f51c63          	bne	a0,a5,80006dc4 <_write_r+0x44>
80006db0:	0001a797          	auipc	a5,0x1a
80006db4:	52078793          	addi	a5,a5,1312 # 800212d0 <errno>
80006db8:	0007a783          	lw	a5,0(a5)
80006dbc:	00078463          	beqz	a5,80006dc4 <_write_r+0x44>
80006dc0:	00f42023          	sw	a5,0(s0)
80006dc4:	00c12083          	lw	ra,12(sp)
80006dc8:	00812403          	lw	s0,8(sp)
80006dcc:	01010113          	addi	sp,sp,16
80006dd0:	00008067          	ret
	...
80006de0:	6568                	flw	fa0,76(a0)
80006de2:	6c6c                	flw	fa1,92(s0)
80006de4:	0000006f          	j	80006de4 <_write_r+0x64>
80006de8:	6544                	flw	fs1,12(a0)
80006dea:	6574                	flw	fa3,76(a0)
80006dec:	69657463          	bleu	s6,a0,80007474 <_write_r+0x6f4>
80006df0:	7520                	flw	fs0,104(a0)
80006df2:	616d                	addi	sp,sp,240
80006df4:	6320                	flw	fs0,64(a4)
80006df6:	6168                	flw	fa0,68(a0)
80006df8:	616d                	addi	sp,sp,240
80006dfa:	6164                	flw	fs1,68(a0)
80006dfc:	5420                	lw	s0,104(s0)
80006dfe:	5345                	li	t1,-15
80006e00:	4554                	lw	a3,12(a0)
80006e02:	6420                	flw	fs0,72(s0)
80006e04:	2065                	jal	80006eac <_write_r+0x12c>
80006e06:	74736973          	csrrsi	s2,0x747,6
80006e0a:	6d65                	lui	s10,0x19
80006e0c:	2161                	jal	80007294 <_write_r+0x514>
80006e0e:	000a                	c.slli	zero,0x2
80006e10:	7261                	lui	tp,0xffff8
80006e12:	00203067          	0x203067
80006e16:	0000                	unimp
80006e18:	7261                	lui	tp,0xffff8
80006e1a:	00203167          	0x203167
80006e1e:	0000                	unimp
80006e20:	7261                	lui	tp,0xffff8
80006e22:	00203267          	0x203267
80006e26:	0000                	unimp
80006e28:	7261                	lui	tp,0xffff8
80006e2a:	00203367          	0x203367
80006e2e:	0000                	unimp
80006e30:	7261                	lui	tp,0xffff8
80006e32:	00203467          	0x203467
80006e36:	0000                	unimp
80006e38:	7974                	flw	fa3,116(a0)
80006e3a:	6570                	flw	fa2,76(a0)
80006e3c:	0020                	addi	s0,sp,8
80006e3e:	0000                	unimp
80006e40:	74737953          	0x74737953
80006e44:	6d65                	lui	s10,0x19
80006e46:	6c6c6163          	bltu	s8,t1,80007508 <_write_r+0x788>
80006e4a:	6e20                	flw	fs0,88(a2)
80006e4c:	206fa3c3          	fmadd.s	ft7,ft11,ft6,ft4,rdn
80006e50:	6469                	lui	s0,0x1a
80006e52:	6e65                	lui	t3,0x19
80006e54:	6974                	flw	fa3,84(a0)
80006e56:	6966                	flw	fs2,88(sp)
80006e58:	61646163          	bltu	s0,s6,8000745a <_write_r+0x6da>
80006e5c:	0a21                	addi	s4,s4,8
80006e5e:	0000                	unimp
80006e60:	7274                	flw	fa3,100(a2)
80006e62:	7061                	c.lui	zero,0xffff8
80006e64:	000a                	c.slli	zero,0x2
80006e66:	0000                	unimp
80006e68:	7065                	c.lui	zero,0xffff9
80006e6a:	00203a63          	0x203a63
80006e6e:	0000                	unimp
80006e70:	636d                	lui	t1,0x1b
80006e72:	7561                	lui	a0,0xffff8
80006e74:	203a6573          	csrrsi	a0,hideleg,20
80006e78:	0000                	unimp
80006e7a:	0000                	unimp
80006e7c:	06e0                	addi	s0,sp,844
80006e7e:	8000                	0x8000
80006e80:	06e8                	addi	a0,sp,844
80006e82:	8000                	0x8000
80006e84:	06e8                	addi	a0,sp,844
80006e86:	8000                	0x8000
80006e88:	06e8                	addi	a0,sp,844
80006e8a:	8000                	0x8000
80006e8c:	06e8                	addi	a0,sp,844
80006e8e:	8000                	0x8000
80006e90:	06e8                	addi	a0,sp,844
80006e92:	8000                	0x8000
80006e94:	06e8                	addi	a0,sp,844
80006e96:	8000                	0x8000
80006e98:	06e8                	addi	a0,sp,844
80006e9a:	8000                	0x8000
80006e9c:	06e8                	addi	a0,sp,844
80006e9e:	8000                	0x8000
80006ea0:	06e8                	addi	a0,sp,844
80006ea2:	8000                	0x8000
80006ea4:	06c0                	addi	s0,sp,836
80006ea6:	8000                	0x8000
80006ea8:	06e8                	addi	a0,sp,844
80006eaa:	8000                	0x8000
80006eac:	06e8                	addi	a0,sp,844
80006eae:	8000                	0x8000
80006eb0:	06e8                	addi	a0,sp,844
80006eb2:	8000                	0x8000
80006eb4:	06e8                	addi	a0,sp,844
80006eb6:	8000                	0x8000
80006eb8:	06e8                	addi	a0,sp,844
80006eba:	8000                	0x8000
80006ebc:	06e8                	addi	a0,sp,844
80006ebe:	8000                	0x8000
80006ec0:	06e8                	addi	a0,sp,844
80006ec2:	8000                	0x8000
80006ec4:	06e8                	addi	a0,sp,844
80006ec6:	8000                	0x8000
80006ec8:	06e8                	addi	a0,sp,844
80006eca:	8000                	0x8000
80006ecc:	06d0                	addi	a2,sp,836
80006ece:	8000                	0x8000
80006ed0:	06e8                	addi	a0,sp,844
80006ed2:	8000                	0x8000
80006ed4:	06e8                	addi	a0,sp,844
80006ed6:	8000                	0x8000
80006ed8:	06e8                	addi	a0,sp,844
80006eda:	8000                	0x8000
80006edc:	06e8                	addi	a0,sp,844
80006ede:	8000                	0x8000
80006ee0:	06e8                	addi	a0,sp,844
80006ee2:	8000                	0x8000
80006ee4:	06e8                	addi	a0,sp,844
80006ee6:	8000                	0x8000
80006ee8:	06e8                	addi	a0,sp,844
80006eea:	8000                	0x8000
80006eec:	06e8                	addi	a0,sp,844
80006eee:	8000                	0x8000
80006ef0:	06e8                	addi	a0,sp,844
80006ef2:	8000                	0x8000
80006ef4:	0684                	addi	s1,sp,832
80006ef6:	8000                	0x8000
80006ef8:	06e8                	addi	a0,sp,844
80006efa:	8000                	0x8000
80006efc:	06e8                	addi	a0,sp,844
80006efe:	8000                	0x8000
80006f00:	06e8                	addi	a0,sp,844
80006f02:	8000                	0x8000
80006f04:	06e8                	addi	a0,sp,844
80006f06:	8000                	0x8000
80006f08:	06e8                	addi	a0,sp,844
80006f0a:	8000                	0x8000
80006f0c:	06e8                	addi	a0,sp,844
80006f0e:	8000                	0x8000
80006f10:	06e8                	addi	a0,sp,844
80006f12:	8000                	0x8000
80006f14:	06e8                	addi	a0,sp,844
80006f16:	8000                	0x8000
80006f18:	06e8                	addi	a0,sp,844
80006f1a:	8000                	0x8000
80006f1c:	0660                	addi	s0,sp,780
80006f1e:	8000                	0x8000
80006f20:	06e8                	addi	a0,sp,844
80006f22:	8000                	0x8000
80006f24:	06e8                	addi	a0,sp,844
80006f26:	8000                	0x8000
80006f28:	06e8                	addi	a0,sp,844
80006f2a:	8000                	0x8000
80006f2c:	06e8                	addi	a0,sp,844
80006f2e:	8000                	0x8000
80006f30:	06e8                	addi	a0,sp,844
80006f32:	8000                	0x8000
80006f34:	06e8                	addi	a0,sp,844
80006f36:	8000                	0x8000
80006f38:	06e8                	addi	a0,sp,844
80006f3a:	8000                	0x8000
80006f3c:	06e8                	addi	a0,sp,844
80006f3e:	8000                	0x8000
80006f40:	06e8                	addi	a0,sp,844
80006f42:	8000                	0x8000
80006f44:	06e8                	addi	a0,sp,844
80006f46:	8000                	0x8000
80006f48:	06e8                	addi	a0,sp,844
80006f4a:	8000                	0x8000
80006f4c:	06e8                	addi	a0,sp,844
80006f4e:	8000                	0x8000
80006f50:	06e8                	addi	a0,sp,844
80006f52:	8000                	0x8000
80006f54:	06e8                	addi	a0,sp,844
80006f56:	8000                	0x8000
80006f58:	06e8                	addi	a0,sp,844
80006f5a:	8000                	0x8000
80006f5c:	05d8                	addi	a4,sp,708
80006f5e:	8000                	0x8000
80006f60:	7830                	flw	fa2,112(s0)
80006f62:	0000                	unimp
80006f64:	500a                	0x500a
80006f66:	6f72                	flw	ft10,28(sp)
80006f68:	206d6167          	0x206d6167
80006f6c:	6168                	flw	fa0,68(a0)
80006f6e:	78652073          	csrs	0x786,a0
80006f72:	7469                	lui	s0,0xffffa
80006f74:	6465                	lui	s0,0x19
80006f76:	7720                	flw	fs0,104(a4)
80006f78:	7469                	lui	s0,0xffffa
80006f7a:	2068                	fld	fa0,192(s0)
80006f7c:	65646f63          	bltu	s0,s6,800075da <_write_r+0x85a>
80006f80:	003a                	c.slli	zero,0xe
80006f82:	0000                	unimp
80006f84:	000d                	c.nop	3
80006f86:	0000                	unimp
80006f88:	4449                	li	s0,18
80006f8a:	454c                	lw	a1,12(a0)
80006f8c:	0000                	unimp
80006f8e:	0000                	unimp
80006f90:	000a                	c.slli	zero,0x2
80006f92:	0000                	unimp
80006f94:	7266                	flw	ft4,120(sp)
80006f96:	203a6d6f          	jal	s10,800ad998 <__stack_top+0x6bb88>
80006f9a:	0000                	unimp
80006f9c:	736d                	lui	t1,0xffffb
80006f9e:	6f702067          	0x6f702067
80006fa2:	6e69                	lui	t3,0x1a
80006fa4:	6574                	flw	fa3,76(a0)
80006fa6:	3a72                	fld	fs4,312(sp)
80006fa8:	0020                	addi	s0,sp,8
80006faa:	0000                	unimp
80006fac:	694d                	lui	s2,0x13
80006fae:	686e                	flw	fa6,216(sp)
80006fb0:	2061                	jal	80007038 <_write_r+0x2b8>
80006fb2:	6174                	flw	fa3,68(a0)
80006fb4:	49206b73          	csrrsi	s6,0x492,0
80006fb8:	3a44                	fld	fs1,176(a2)
80006fba:	0020                	addi	s0,sp,8
80006fbc:	646e6553          	0x646e6553
80006fc0:	6e69                	lui	t3,0x1a
80006fc2:	65755167          	0x65755167
80006fc6:	6575                	lui	a0,0x1d
80006fc8:	665f 6f72 746e      	0x746e6f72665f
80006fce:	203a                	fld	ft0,392(sp)
80006fd0:	0000                	unimp
80006fd2:	0000                	unimp
80006fd4:	5041                	c.li	zero,-16
80006fd6:	5f49                	li	t5,-14
80006fd8:	7254                	flw	fa3,36(a2)
80006fda:	3279                	jal	80006968 <NI_RX_Handler+0x288>
80006fdc:	646e6553          	0x646e6553
80006fe0:	7320                	flw	fs0,96(a4)
80006fe2:	6375                	lui	t1,0x1d
80006fe4:	73736563          	bltu	t1,s7,8000770e <impure_data+0x4e>
80006fe8:	0a21                	addi	s4,s4,8
80006fea:	0000                	unimp
80006fec:	5041                	c.li	zero,-16
80006fee:	5f49                	li	t5,-14
80006ff0:	7254                	flw	fa3,36(a2)
80006ff2:	3279                	jal	80006980 <NI_RX_Handler+0x2a0>
80006ff4:	646e6553          	0x646e6553
80006ff8:	6620                	flw	fs0,72(a2)
80006ffa:	6961                	lui	s2,0x18
80006ffc:	656c                	flw	fa1,76(a0)
80006ffe:	2064                	fld	fs1,192(s0)
80007000:	202d                	jal	8000702a <_write_r+0x2aa>
80007002:	6d65                	lui	s10,0x19
80007004:	7470                	flw	fa2,108(s0)
80007006:	2079                	jal	80007094 <_write_r+0x314>
80007008:	646e6553          	0x646e6553
8000700c:	7551                	lui	a0,0xffff4
8000700e:	7565                	lui	a0,0xffff9
80007010:	2165                	jal	800074b8 <_write_r+0x738>
80007012:	000a                	c.slli	zero,0x2
80007014:	5041                	c.li	zero,-16
80007016:	5f49                	li	t5,-14
80007018:	7254                	flw	fa3,36(a2)
8000701a:	3279                	jal	800069a8 <NI_RX_Handler+0x2c8>
8000701c:	646e6553          	0x646e6553
80007020:	6620                	flw	fs0,72(a2)
80007022:	6961                	lui	s2,0x18
80007024:	656c                	flw	fa1,76(a0)
80007026:	2064                	fld	fs1,192(s0)
80007028:	202d                	jal	80007052 <_write_r+0x2d2>
8000702a:	494e                	lw	s2,208(sp)
8000702c:	545f 2058 636f      	0x636f2058545f
80007032:	69707563          	bleu	s7,zero,800076bc <__data_load+0x7c>
80007036:	6465                	lui	s0,0x19
80007038:	0a21                	addi	s4,s4,8
8000703a:	0000                	unimp
8000703c:	6920                	flw	fs0,80(a0)
8000703e:	206e                	fld	ft0,216(sp)
80007040:	6874                	flw	fa3,84(s0)
80007042:	2065                	jal	800070ea <_write_r+0x36a>
80007044:	4950                	lw	a2,20(a0)
80007046:	4550                	lw	a2,12(a0)
80007048:	7320                	flw	fs0,96(a4)
8000704a:	6f6c                	flw	fa1,92(a4)
8000704c:	2074                	fld	fa3,192(s0)
8000704e:	0000                	unimp
80007050:	6441                	lui	s0,0x10
80007052:	6964                	flw	fs1,84(a0)
80007054:	676e                	flw	fa4,216(sp)
80007056:	6120                	flw	fs0,64(a0)
80007058:	6d20                	flw	fs0,88(a0)
8000705a:	74206773          	csrrsi	a4,0x742,0
8000705e:	6174206f          	j	80049e74 <__stack_top+0x8064>
80007062:	00206b73          	csrrsi	s6,frm,0
80007066:	0000                	unimp
80007068:	3e3e                	fld	ft8,488(sp)
8000706a:	3e3e                	fld	ft8,488(sp)
8000706c:	413e                	lw	sp,204(sp)
8000706e:	69656863          	bltu	a0,s6,800076fe <impure_data+0x3e>
80007072:	6120                	flw	fs0,64(a0)
80007074:	7571                	lui	a0,0xffffc
80007076:	2069                	jal	80007100 <_write_r+0x380>
80007078:	6f6e                	flw	ft10,216(sp)
8000707a:	7020                	flw	fs0,96(s0)
8000707c:	6e65                	lui	t3,0x19
8000707e:	6964                	flw	fs1,84(a0)
80007080:	676e                	flw	fa4,216(sp)
80007082:	0a21                	addi	s4,s4,8
80007084:	0000                	unimp
80007086:	0000                	unimp
80007088:	7345                	lui	t1,0xffff1
8000708a:	6570                	flw	fa2,76(a0)
8000708c:	6172                	flw	ft2,28(sp)
8000708e:	646e                	flw	fs0,216(sp)
80007090:	654d206f          	j	800d96e4 <__stack_top+0x978d4>
80007094:	736e                	flw	ft6,248(sp)
80007096:	6761                	lui	a4,0x18
80007098:	6d65                	lui	s10,0x19
8000709a:	0a21                	addi	s4,s4,8
8000709c:	0000                	unimp
8000709e:	0000                	unimp
800070a0:	6520                	flw	fs0,72(a0)
800070a2:	72657073          	csrci	0x726,10
800070a6:	6e61                	lui	t3,0x18
800070a8:	6f64                	flw	fs1,92(a4)
800070aa:	6d20                	flw	fs0,88(a0)
800070ac:	6e65                	lui	t3,0x19
800070ae:	65676173          	csrrsi	sp,0x656,14
800070b2:	206d                	jal	8000715c <_write_r+0x3dc>
800070b4:	0000                	unimp
800070b6:	0000                	unimp
800070b8:	6174                	flw	fa3,68(a0)
800070ba:	6c736b73          	csrrsi	s6,0x6c7,6
800070be:	0020746f          	jal	s0,8000e0c0 <__global_pointer$+0x62a0>
800070c2:	0000                	unimp
800070c4:	654d                	lui	a0,0x13
800070c6:	736e                	flw	ft6,248(sp)
800070c8:	6761                	lui	a4,0x18
800070ca:	6d65                	lui	s10,0x19
800070cc:	5220                	lw	s0,96(a2)
800070ce:	6365                	lui	t1,0x19
800070d0:	6265                	lui	tp,0x19
800070d2:	6469                	lui	s0,0x1a
800070d4:	2161                	jal	8000755c <_write_r+0x7dc>
800070d6:	000a                	c.slli	zero,0x2
800070d8:	654e                	flw	fa0,208(sp)
800070da:	70612077          	0x70612077
800070de:	6c70                	flw	fa2,92(s0)
800070e0:	6369                	lui	t1,0x1a
800070e2:	7461                	lui	s0,0xffff8
800070e4:	6f69                	lui	t5,0x1a
800070e6:	206e                	fld	ft0,216(sp)
800070e8:	6572                	flw	fa0,28(sp)
800070ea:	74736967          	0x74736967
800070ee:	7265                	lui	tp,0xffff9
800070f0:	6465                	lui	s0,0x19
800070f2:	2d20                	fld	fs0,88(a0)
800070f4:	4920                	lw	s0,80(a0)
800070f6:	3a44                	fld	fs1,176(a2)
800070f8:	0020                	addi	s0,sp,8
800070fa:	0000                	unimp
800070fc:	6572                	flw	fa0,28(sp)
800070fe:	7574                	flw	fa3,108(a0)
80007100:	6e72                	flw	ft8,28(sp)
80007102:	6e69                	lui	t3,0x1a
80007104:	72652067          	0x72652067
80007108:	6f72                	flw	ft10,28(sp)
8000710a:	00000a33          	add	s4,zero,zero
8000710e:	0000                	unimp
80007110:	6572                	flw	fa0,28(sp)
80007112:	7574                	flw	fa3,108(a0)
80007114:	6e72                	flw	ft8,28(sp)
80007116:	6e69                	lui	t3,0x1a
80007118:	72652067          	0x72652067
8000711c:	6f72                	flw	ft10,28(sp)
8000711e:	0a34                	addi	a3,sp,280
80007120:	0000                	unimp
80007122:	0000                	unimp
80007124:	20736177          	0x20736177
80007128:	7865                	lui	a6,0xffff9
8000712a:	6365                	lui	t1,0x19
8000712c:	7475                	lui	s0,0xffffd
8000712e:	6465                	lui	s0,0x19
80007130:	6920                	flw	fs0,80(a0)
80007132:	206e                	fld	ft0,216(sp)
80007134:	0000                	unimp
80007136:	0000                	unimp
80007138:	7041                	c.lui	zero,0xffff0
8000713a:	6c70                	flw	fa2,92(s0)
8000713c:	6369                	lui	t1,0x1a
8000713e:	7461                	lui	s0,0xffff8
80007140:	6f69                	lui	t5,0x1a
80007142:	206e                	fld	ft0,216(sp)
80007144:	0000                	unimp
80007146:	0000                	unimp
80007148:	0909                	addi	s2,s2,2
8000714a:	6854                	flw	fa3,20(s0)
8000714c:	7369                	lui	t1,0xffffa
8000714e:	6120                	flw	fs0,64(a0)
80007150:	7070                	flw	fa2,100(s0)
80007152:	696c                	flw	fa1,84(a0)
80007154:	69746163          	bltu	s0,s7,800077d6 <__sbss_end+0x46>
80007158:	73206e6f          	jal	t3,8000d88a <__global_pointer$+0x5a6a>
8000715c:	6974                	flw	fa3,84(a0)
8000715e:	6c6c                	flw	fa1,92(s0)
80007160:	6e20                	flw	fs0,88(a2)
80007162:	6565                	lui	a0,0x19
80007164:	2064                	fld	fs1,192(s0)
80007166:	6f74                	flw	fa3,92(a4)
80007168:	7220                	flw	fs0,96(a2)
8000716a:	6e75                	lui	t3,0x1d
8000716c:	203a                	fld	ft0,392(sp)
8000716e:	0000                	unimp
80007170:	0909                	addi	s2,s2,2
80007172:	6854                	flw	fa3,20(s0)
80007174:	7369                	lui	t1,0xffffa
80007176:	6120                	flw	fs0,64(a0)
80007178:	7070                	flw	fa2,100(s0)
8000717a:	696c                	flw	fa1,84(a0)
8000717c:	69746163          	bltu	s0,s7,800077fe <__sbss_end+0x6e>
80007180:	69206e6f          	jal	t3,8000d812 <__global_pointer$+0x59f2>
80007184:	4f442073          	csrs	0x4f4,s0
80007188:	454e                	lw	a0,208(sp)
8000718a:	0a21                	addi	s4,s4,8
8000718c:	0000                	unimp
8000718e:	0000                	unimp
80007190:	6572                	flw	fa0,28(sp)
80007192:	7574                	flw	fa3,108(a0)
80007194:	6e72                	flw	ft8,28(sp)
80007196:	6e69                	lui	t3,0x1a
80007198:	72652067          	0x72652067
8000719c:	6f72                	flw	ft10,28(sp)
8000719e:	0a35                	addi	s4,s4,13
800071a0:	0000                	unimp
800071a2:	0000                	unimp
800071a4:	6572                	flw	fa0,28(sp)
800071a6:	7574                	flw	fa3,108(a0)
800071a8:	6e72                	flw	ft8,28(sp)
800071aa:	6e69                	lui	t3,0x1a
800071ac:	72652067          	0x72652067
800071b0:	6f72                	flw	ft10,28(sp)
800071b2:	0a36                	slli	s4,s4,0xd
800071b4:	0000                	unimp
800071b6:	0000                	unimp
800071b8:	2049                	jal	8000723a <_write_r+0x4ba>
800071ba:	20746f67          	0x20746f67
800071be:	2061                	jal	80007246 <_write_r+0x4c6>
800071c0:	7266                	flw	ft4,120(sp)
800071c2:	6565                	lui	a0,0x19
800071c4:	7320                	flw	fs0,96(a4)
800071c6:	7265                	lui	tp,0xffff9
800071c8:	6976                	flw	fs2,92(sp)
800071ca:	73206563          	bltu	zero,s2,800078f4 <__sbss_end+0x164>
800071ce:	6f6c                	flw	fa1,92(a4)
800071d0:	2174                	fld	fa3,192(a0)
800071d2:	2021                	jal	800071da <_write_r+0x45a>
800071d4:	3e2d                	jal	80006d0e <NI_RX_Handler+0x62e>
800071d6:	0020                	addi	s0,sp,8
800071d8:	7041                	c.lui	zero,0xffff0
800071da:	6c70                	flw	fa2,92(s0)
800071dc:	6369                	lui	t1,0x1a
800071de:	7461                	lui	s0,0xffff8
800071e0:	6f69                	lui	t5,0x1a
800071e2:	206e                	fld	ft0,216(sp)
800071e4:	6c61                	lui	s8,0x18
800071e6:	6f6c                	flw	fa1,92(a4)
800071e8:	65746163          	bltu	s0,s7,8000782a <__sbss_end+0x9a>
800071ec:	3a64                	fld	fs1,240(a2)
800071ee:	0020                	addi	s0,sp,8
800071f0:	5309                	li	t1,-30
800071f2:	6174                	flw	fa3,68(a0)
800071f4:	7472                	flw	fs0,60(sp)
800071f6:	6320                	flw	fs0,64(a4)
800071f8:	616d6d6f          	jal	s10,800dd80e <__stack_top+0x9b9fe>
800071fc:	646e                	flw	fs0,216(sp)
800071fe:	7320                	flw	fs0,96(a4)
80007200:	6e65                	lui	t3,0x19
80007202:	2074                	fld	fa3,192(s0)
80007204:	6f74                	flw	fa3,92(a4)
80007206:	6520                	flw	fs0,72(a0)
80007208:	6576                	flw	fa0,92(sp)
8000720a:	7972                	flw	fs2,60(sp)
8000720c:	7420                	flw	fs0,104(s0)
8000720e:	7361                	lui	t1,0xffff8
80007210:	000a2e6b          	0xa2e6b
80007214:	6572                	flw	fa0,28(sp)
80007216:	7574                	flw	fa3,108(a0)
80007218:	6e72                	flw	ft8,28(sp)
8000721a:	6e69                	lui	t3,0x1a
8000721c:	72652067          	0x72652067
80007220:	6f72                	flw	ft10,28(sp)
80007222:	0a30                	addi	a2,sp,280
80007224:	0000                	unimp
80007226:	0000                	unimp
80007228:	6572                	flw	fa0,28(sp)
8000722a:	7574                	flw	fa3,108(a0)
8000722c:	6e72                	flw	ft8,28(sp)
8000722e:	6e69                	lui	t3,0x1a
80007230:	72652067          	0x72652067
80007234:	6f72                	flw	ft10,28(sp)
80007236:	0a31                	addi	s4,s4,12
80007238:	0000                	unimp
8000723a:	0000                	unimp
8000723c:	4544                	lw	s1,12(a0)
8000723e:	2055                	jal	800072e2 <_write_r+0x562>
80007240:	5552                	lw	a0,52(sp)
80007242:	4d49                	li	s10,18
80007244:	4e20                	lw	s0,88(a2)
80007246:	5041204f          	fnmadd.s	ft0,ft2,ft4,fa0,rdn
8000724a:	5f49                	li	t5,-14
8000724c:	46746547          	fmsub.q	fa0,fs0,ft7,fs0,unknown
80007250:	6572                	flw	fa0,28(sp)
80007252:	5465                	li	s0,-7
80007254:	7361                	lui	t1,0xffff8
80007256:	6f6c536b          	0x6f6c536b
8000725a:	2874                	fld	fa3,208(s0)
8000725c:	0a29                	addi	s4,s4,10
8000725e:	0000                	unimp
80007260:	20746f47          	fmsub.s	ft10,fs0,ft7,ft4,unknown
80007264:	746f6c73          	csrrsi	s8,0x746,30
80007268:	203a                	fld	ft0,392(sp)
8000726a:	0000                	unimp
8000726c:	6154                	flw	fa3,4(a0)
8000726e:	74206b73          	csrrsi	s6,0x742,0
80007272:	6c61746f          	jal	s0,8001e938 <__global_pointer$+0x16b18>
80007276:	7320                	flw	fs0,96(a4)
80007278:	7a69                	lui	s4,0xffffa
8000727a:	2065                	jal	80007322 <_write_r+0x5a2>
8000727c:	7428                	flw	fa0,104(s0)
8000727e:	7478                	flw	fa4,108(s0)
80007280:	7373622b          	0x7373622b
80007284:	3a29                	jal	80006b9e <NI_RX_Handler+0x4be>
80007286:	0020                	addi	s0,sp,8
80007288:	6154                	flw	fa3,4(a0)
8000728a:	61206b73          	csrrsi	s6,0x612,0
8000728e:	6464                	flw	fs1,76(s0)
80007290:	3a72                	fld	fs4,312(sp)
80007292:	0020                	addi	s0,sp,8
80007294:	6572                	flw	fa0,28(sp)
80007296:	7574                	flw	fa3,108(a0)
80007298:	6e72                	flw	ft8,28(sp)
8000729a:	6e69                	lui	t3,0x1a
8000729c:	72652067          	0x72652067
800072a0:	6f72                	flw	ft10,28(sp)
800072a2:	0a32                	slli	s4,s4,0xc
800072a4:	0000                	unimp
800072a6:	0000                	unimp
800072a8:	614c                	flw	fa1,4(a0)
800072aa:	6154                	flw	fa3,4(a0)
800072ac:	00006b73          	csrrsi	s6,ustatus,0
800072b0:	5245                	li	tp,-15
800072b2:	4f52                	lw	t5,20(sp)
800072b4:	2052                	fld	ft0,272(sp)
800072b6:	202d                	jal	800072e0 <_write_r+0x560>
800072b8:	5041                	c.li	zero,-16
800072ba:	5f49                	li	t5,-14
800072bc:	6154                	flw	fa3,4(a0)
800072be:	74536b73          	csrrsi	s6,0x745,6
800072c2:	7261                	lui	tp,0xffff8
800072c4:	2174                	fld	fa3,192(a0)
800072c6:	2121                	jal	800076ce <impure_data+0xe>
800072c8:	000a                	c.slli	zero,0x2
800072ca:	0000                	unimp
800072cc:	6564                	flw	fs1,76(a0)
800072ce:	656c                	flw	fa1,76(a0)
800072d0:	6574                	flw	fa3,76(a0)
800072d2:	2064                	fld	fs1,192(s0)
800072d4:	68746977          	0x68746977
800072d8:	7320                	flw	fs0,96(a4)
800072da:	6375                	lui	t1,0x1d
800072dc:	73736573          	csrrsi	a0,0x737,6
800072e0:	2021                	jal	800072e8 <_write_r+0x568>
800072e2:	7246                	flw	ft4,112(sp)
800072e4:	61206d6f          	jal	s10,8000d8f6 <__global_pointer$+0x5ad6>
800072e8:	7070                	flw	fa2,100(s0)
800072ea:	696c                	flw	fa1,84(a0)
800072ec:	69746163          	bltu	s0,s7,8000796e <__sbss_end+0x1de>
800072f0:	00206e6f          	jal	t3,8000d2f2 <__global_pointer$+0x54d2>
800072f4:	6154                	flw	fa3,4(a0)
800072f6:	00206b73          	csrrsi	s6,frm,0
800072fa:	0000                	unimp
800072fc:	0a0d                	addi	s4,s4,3
800072fe:	7246                	flw	ft4,112(sp)
80007300:	6565                	lui	a0,0x19
80007302:	5452                	lw	s0,52(sp)
80007304:	4520534f          	0x4520534f
80007308:	6178                	flw	fa4,68(a0)
8000730a:	706d                	c.lui	zero,0xffffb
8000730c:	656c                	flw	fa1,76(a0)
8000730e:	0a0d                	addi	s4,s4,3
80007310:	0000                	unimp
80007312:	0000                	unimp
80007314:	200a                	fld	ft0,128(sp)
80007316:	6f726843          	fmadd.q	fa6,ft4,fs7,fa3,unknown
8000731a:	6f6e                	flw	ft10,216(sp)
8000731c:	6c702073          	csrr	zero,0x6c7
80007320:	7461                	lui	s0,0xffff8
80007322:	6f66                	flw	ft10,88(sp)
80007324:	6d72                	flw	fs10,28(sp)
80007326:	6920                	flw	fs0,80(a0)
80007328:	696e                	flw	fs2,216(sp)
8000732a:	6974                	flw	fa3,84(a0)
8000732c:	6c61                	lui	s8,0x18
8000732e:	7a69                	lui	s4,0xffffa
80007330:	6e69                	lui	t3,0x1a
80007332:	2e2e2e67          	0x2e2e2e67
80007336:	0a20                	addi	s0,sp,280
80007338:	0000                	unimp
8000733a:	0000                	unimp
8000733c:	200a                	fld	ft0,128(sp)
8000733e:	6854                	flw	fa3,20(s0)
80007340:	7369                	lui	t1,0xffffa
80007342:	7420                	flw	fs0,104(s0)
80007344:	7265                	lui	tp,0xffff9
80007346:	696d                	lui	s2,0x1b
80007348:	616e                	flw	ft2,216(sp)
8000734a:	206c                	fld	fa1,192(s0)
8000734c:	6562                	flw	fa0,24(sp)
8000734e:	6f6c                	flw	fa1,92(a4)
80007350:	676e                	flw	fa4,216(sp)
80007352:	6f742073          	csrs	0x6f7,s0
80007356:	7420                	flw	fs0,104(s0)
80007358:	6568                	flw	fa0,76(a0)
8000735a:	6120                	flw	fs0,64(a0)
8000735c:	6464                	flw	fs1,76(s0)
8000735e:	6572                	flw	fa0,28(sp)
80007360:	203a7373          	csrrci	t1,hideleg,20
80007364:	0000                	unimp
80007366:	0000                	unimp
80007368:	000a                	c.slli	zero,0x2
8000736a:	0000                	unimp
8000736c:	5852                	lw	a6,52(sp)
8000736e:	6148                	flw	fa0,4(a0)
80007370:	646e                	flw	fs0,216(sp)
80007372:	656c                	flw	fa1,76(a0)
80007374:	0072                	c.slli	zero,0x1c
80007376:	0000                	unimp
80007378:	200a                	fld	ft0,128(sp)
8000737a:	6854                	flw	fa3,20(s0)
8000737c:	7369                	lui	t1,0xffffa
8000737e:	7020                	flw	fs0,96(s0)
80007380:	6f72                	flw	ft10,28(sp)
80007382:	73736563          	bltu	t1,s7,80007aac <__sbss_end+0x31c>
80007386:	6920726f          	jal	tp,8000ea18 <__global_pointer$+0x6bf8>
8000738a:	68742073          	csrs	0x687,s0
8000738e:	2065                	jal	80007436 <_write_r+0x6b6>
80007390:	626f6c47          	fmsub.d	fs8,ft10,ft6,fa2,unknown
80007394:	6c61                	lui	s8,0x18
80007396:	4d20                	lw	s0,88(a0)
80007398:	7361                	lui	t1,0xffff8
8000739a:	6574                	flw	fa3,76(a0)
8000739c:	3a72                	fld	fs4,312(sp)
8000739e:	0a20                	addi	s0,sp,280
800073a0:	0000                	unimp
800073a2:	0000                	unimp
800073a4:	626f6c47          	fmsub.d	fs8,ft10,ft6,fa2,unknown
800073a8:	6c61                	lui	s8,0x18
800073aa:	614d                	addi	sp,sp,176
800073ac:	72657473          	csrrci	s0,0x726,10
800073b0:	0000                	unimp
800073b2:	0000                	unimp
800073b4:	200a                	fld	ft0,128(sp)
800073b6:	6854                	flw	fa3,20(s0)
800073b8:	7369                	lui	t1,0xffffa
800073ba:	7020                	flw	fs0,96(s0)
800073bc:	6f72                	flw	ft10,28(sp)
800073be:	73736563          	bltu	t1,s7,80007ae8 <__sbss_end+0x358>
800073c2:	6920726f          	jal	tp,8000ea54 <__global_pointer$+0x6c34>
800073c6:	20612073          	csrs	0x206,sp
800073ca:	76616c53          	0x76616c53
800073ce:	3a65                	jal	80006d86 <_write_r+0x6>
800073d0:	0a20                	addi	s0,sp,280
800073d2:	0000                	unimp
800073d4:	6c41                	lui	s8,0x10
800073d6:	7669                	lui	a2,0xffffa
800073d8:	0065                	c.nop	25
800073da:	0000                	unimp
800073dc:	6620                	flw	fs0,72(a2)
800073de:	6f72                	flw	ft10,28(sp)
800073e0:	206d                	jal	8000748a <_write_r+0x70a>
800073e2:	7061                	c.lui	zero,0xffff8
800073e4:	2070                	fld	fa2,192(s0)
800073e6:	0000                	unimp
800073e8:	72617453          	0x72617453
800073ec:	6974                	flw	fa3,84(a0)
800073ee:	676e                	flw	fa4,216(sp)
800073f0:	5420                	lw	s0,104(s0)
800073f2:	7361                	lui	t1,0xffff8
800073f4:	0000206b          	0x206b
800073f8:	626f6c47          	fmsub.d	fs8,ft10,ft6,fa2,unknown
800073fc:	6c61                	lui	s8,0x18
800073fe:	614d                	addi	sp,sp,176
80007400:	72657473          	csrrci	s0,0x726,10
80007404:	6341                	lui	t1,0x10
80007406:	6974                	flw	fa3,84(a0)
80007408:	6576                	flw	fa0,92(sp)
8000740a:	0000                	unimp
8000740c:	4720                	lw	s0,72(a4)
8000740e:	6f6c                	flw	fa1,92(a4)
80007410:	6162                	flw	ft2,24(sp)
80007412:	4d6c                	lw	a1,92(a0)
80007414:	7361                	lui	t1,0xffff8
80007416:	6574                	flw	fa3,76(a0)
80007418:	5272                	lw	tp,60(sp)
8000741a:	6974756f          	jal	a0,8004f2b0 <__stack_top+0xd4a0>
8000741e:	656e                	flw	fa0,216(sp)
80007420:	2e2e                	fld	ft8,200(sp)
80007422:	0d2e                	slli	s10,s10,0xb
80007424:	000a                	c.slli	zero,0x2
80007426:	0000                	unimp
80007428:	5854                	lw	a3,52(s0)
8000742a:	6920                	flw	fs0,80(a0)
8000742c:	746e                	flw	fs0,248(sp)
8000742e:	7265                	lui	tp,0xffff9
80007430:	7572                	flw	fa0,60(sp)
80007432:	7470                	flw	fa2,108(s0)
80007434:	6f69                	lui	t5,0x1a
80007436:	206e                	fld	ft0,216(sp)
80007438:	63746163          	bltu	s0,s7,80007a5a <__sbss_end+0x2ca>
8000743c:	6568                	flw	fa0,76(a0)
8000743e:	2064                	fld	fs1,192(s0)
80007440:	202d                	jal	8000746a <_write_r+0x6ea>
80007442:	0000                	unimp
80007444:	5852                	lw	a6,52(sp)
80007446:	6920                	flw	fs0,80(a0)
80007448:	746e                	flw	fs0,248(sp)
8000744a:	7265                	lui	tp,0xffff9
8000744c:	7572                	flw	fa0,60(sp)
8000744e:	7470                	flw	fa2,108(s0)
80007450:	6f69                	lui	t5,0x1a
80007452:	206e                	fld	ft0,216(sp)
80007454:	63746163          	bltu	s0,s7,80007a76 <__sbss_end+0x2e6>
80007458:	6568                	flw	fa0,76(a0)
8000745a:	2064                	fld	fs1,192(s0)
8000745c:	202d                	jal	80007486 <_write_r+0x706>
8000745e:	0000                	unimp
80007460:	4154                	lw	a3,4(a0)
80007462:	415f4b53          	0x415f4b53
80007466:	4c4c                	lw	a1,28(s0)
80007468:	5441434f          	0x5441434f
8000746c:	4f49                	li	t5,18
8000746e:	5f4e                	lw	t5,240(sp)
80007470:	444e4553          	0x444e4553
80007474:	000a                	c.slli	zero,0x2
80007476:	0000                	unimp
80007478:	6154                	flw	fa3,4(a0)
8000747a:	73206b73          	csrrsi	s6,0x732,0
8000747e:	6f6c                	flw	fa1,92(a4)
80007480:	3a74                	fld	fa3,240(a2)
80007482:	0020                	addi	s0,sp,8
80007484:	6154                	flw	fa3,4(a0)
80007486:	73206b73          	csrrsi	s6,0x732,0
8000748a:	6f6c                	flw	fa1,92(a4)
8000748c:	2074                	fld	fa3,192(s0)
8000748e:	6154                	flw	fa3,4(a0)
80007490:	64416b73          	csrrsi	s6,0x644,2
80007494:	7264                	flw	fs1,100(a2)
80007496:	203a                	fld	ft0,392(sp)
80007498:	0000                	unimp
8000749a:	0000                	unimp
8000749c:	7266                	flw	ft4,120(sp)
8000749e:	61206d6f          	jal	s10,8000dab0 <__global_pointer$+0x5c90>
800074a2:	7070                	flw	fa2,100(s0)
800074a4:	696c                	flw	fa1,84(a0)
800074a6:	69746163          	bltu	s0,s7,80007b28 <__sbss_end+0x398>
800074aa:	00206e6f          	jal	t3,8000d4ac <__global_pointer$+0x568c>
800074ae:	0000                	unimp
800074b0:	4946                	lw	s2,80(sp)
800074b2:	494e                	lw	s2,208(sp)
800074b4:	44454853          	0x44454853
800074b8:	203a                	fld	ft0,392(sp)
800074ba:	6154                	flw	fa3,4(a0)
800074bc:	00206b73          	csrrsi	s6,frm,0
800074c0:	4154                	lw	a3,4(a0)
800074c2:	415f4b53          	0x415f4b53
800074c6:	4c4c                	lw	a1,28(s0)
800074c8:	5441434f          	0x5441434f
800074cc:	4f49                	li	t5,18
800074ce:	5f4e                	lw	t5,240(sp)
800074d0:	4946                	lw	s2,80(sp)
800074d2:	494e                	lw	s2,208(sp)
800074d4:	44454853          	0x44454853
800074d8:	000a                	c.slli	zero,0x2
800074da:	0000                	unimp
800074dc:	4154                	lw	a3,4(a0)
800074de:	415f4b53          	0x415f4b53
800074e2:	4c4c                	lw	a1,28(s0)
800074e4:	5441434f          	0x5441434f
800074e8:	4f49                	li	t5,18
800074ea:	5f4e                	lw	t5,240(sp)
800074ec:	43435553          	0x43435553
800074f0:	5345                	li	t1,-15
800074f2:	00000a53          	fadd.s	fs4,ft0,ft0,rne
800074f6:	0000                	unimp
800074f8:	67656843          	fmadd.q	fa6,fa0,fs6,fa2,unknown
800074fc:	7520756f          	jal	a0,8000ec4e <__global_pointer$+0x6e2e>
80007500:	206d                	jal	800075aa <_write_r+0x82a>
80007502:	4154                	lw	a3,4(a0)
80007504:	535f4b53          	0x535f4b53
80007508:	4154                	lw	a3,4(a0)
8000750a:	5452                	lw	s0,52(sp)
8000750c:	0a21                	addi	s4,s4,8
8000750e:	0000                	unimp
80007510:	67656843          	fmadd.q	fa6,fa0,fs6,fa2,unknown
80007514:	7520756f          	jal	a0,8000ec66 <__global_pointer$+0x6e46>
80007518:	206d                	jal	800075c2 <_write_r+0x842>
8000751a:	4154                	lw	a3,4(a0)
8000751c:	525f4b53          	0x525f4b53
80007520:	4e55                	li	t3,21
80007522:	0a21                	addi	s4,s4,8
80007524:	0000                	unimp
80007526:	0000                	unimp
80007528:	7266                	flw	ft4,120(sp)
8000752a:	61206d6f          	jal	s10,8000db3c <__global_pointer$+0x5d1c>
8000752e:	7070                	flw	fa2,100(s0)
80007530:	203a                	fld	ft0,392(sp)
80007532:	0000                	unimp
80007534:	6e45                	lui	t3,0x11
80007536:	6261                	lui	tp,0x18
80007538:	696c                	flw	fa1,84(a0)
8000753a:	676e                	flw	fa4,216(sp)
8000753c:	5420                	lw	s0,104(s0)
8000753e:	7361                	lui	t1,0xffff8
80007540:	00203a6b          	0x203a6b
80007544:	746f6c53          	0x746f6c53
80007548:	203a                	fld	ft0,392(sp)
8000754a:	0000                	unimp
8000754c:	6154                	flw	fa3,4(a0)
8000754e:	203a6b73          	csrrsi	s6,hideleg,20
80007552:	0000                	unimp
80007554:	67656843          	fmadd.q	fa6,fa0,fs6,fa2,unknown
80007558:	7520756f          	jal	a0,8000ecaa <__global_pointer$+0x6e8a>
8000755c:	206d                	jal	80007606 <_write_r+0x886>
8000755e:	656d                	lui	a0,0x1b
80007560:	67617373          	csrrci	t1,0x676,2
80007564:	2065                	jal	8000760c <_write_r+0x88c>
80007566:	6572                	flw	fa0,28(sp)
80007568:	7571                	lui	a0,0xffffc
8000756a:	7365                	lui	t1,0xffff9
8000756c:	2174                	fld	fa3,192(a0)
8000756e:	4120                	lw	s0,64(a0)
80007570:	7070                	flw	fa2,100(s0)
80007572:	203a                	fld	ft0,392(sp)
80007574:	0000                	unimp
80007576:	0000                	unimp
80007578:	654d                	lui	a0,0x13
8000757a:	736e                	flw	ft6,248(sp)
8000757c:	6761                	lui	a4,0x18
8000757e:	6d65                	lui	s10,0x19
80007580:	6e20                	flw	fs0,88(a2)
80007582:	206fa3c3          	fmadd.s	ft7,ft11,ft6,ft4,rdn
80007586:	6e65                	lui	t3,0x19
80007588:	746e6f63          	bltu	t3,t1,80007ce6 <__sbss_end+0x556>
8000758c:	6172                	flw	ft2,28(sp)
8000758e:	6164                	flw	fs1,68(a0)
80007590:	202c                	fld	fa1,64(s0)
80007592:	6461                	lui	s0,0x18
80007594:	6369                	lui	t1,0x1a
80007596:	6f69                	lui	t5,0x1a
80007598:	616e                	flw	ft2,216(sp)
8000759a:	646e                	flw	fs0,216(sp)
8000759c:	6f61206f          	j	80019c92 <__global_pointer$+0x11e72>
800075a0:	5020                	lw	s0,96(s0)
800075a2:	6e65                	lui	t3,0x19
800075a4:	6964                	flw	fs1,84(a0)
800075a6:	676e                	flw	fa4,216(sp)
800075a8:	6552                	flw	fa0,20(sp)
800075aa:	2171                	jal	80007a36 <__sbss_end+0x2a6>
800075ac:	000a                	c.slli	zero,0x2
800075ae:	0000                	unimp
800075b0:	654d                	lui	a0,0x13
800075b2:	736e                	flw	ft6,248(sp)
800075b4:	6761                	lui	a4,0x18
800075b6:	6d65                	lui	s10,0x19
800075b8:	6520                	flw	fs0,72(a0)
800075ba:	636e                	flw	ft6,216(sp)
800075bc:	72746e6f          	jal	t3,8004e4e2 <__stack_top+0xc6d2>
800075c0:	6461                	lui	s0,0x18
800075c2:	2061                	jal	8000764a <__data_load+0xa>
800075c4:	6f6e                	flw	ft10,216(sp)
800075c6:	7020                	flw	fs0,96(s0)
800075c8:	7069                	c.lui	zero,0xffffa
800075ca:	2165                	jal	80007a72 <__sbss_end+0x2e2>
800075cc:	000a                	c.slli	zero,0x2
800075ce:	0000                	unimp
800075d0:	6554                	flw	fa3,12(a0)
800075d2:	206d                	jal	8000767c <__data_load+0x3c>
800075d4:	6d75                	lui	s10,0x1d
800075d6:	2061                	jal	8000765e <__data_load+0x1e>
800075d8:	656d                	lui	a0,0x1b
800075da:	736e                	flw	ft6,248(sp)
800075dc:	6761                	lui	a4,0x18
800075de:	6d65                	lui	s10,0x19
800075e0:	6320                	flw	fs0,64(a4)
800075e2:	6568                	flw	fa0,76(a0)
800075e4:	646e6167          	0x646e6167
800075e8:	2e2e2e6f          	jal	t3,800e98ca <__stack_top+0xa7aba>
800075ec:	000a                	c.slli	zero,0x2
800075ee:	0000                	unimp
800075f0:	5245                	li	tp,-15
800075f2:	4f52                	lw	t5,20(sp)
800075f4:	2052                	fld	ft0,272(sp)
800075f6:	7845                	lui	a6,0xffff1
800075f8:	6574                	flw	fa3,76(a0)
800075fa:	6e72                	flw	ft8,28(sp)
800075fc:	6c61                	lui	s8,0x18
800075fe:	325f 495f 5152      	0x5152495f325f
80007604:	6148                	flw	fa0,4(a0)
80007606:	646e                	flw	fs0,216(sp)
80007608:	656c                	flw	fa1,76(a0)
8000760a:	2072                	fld	ft0,280(sp)
8000760c:	6e55                	lui	t3,0x15
8000760e:	776f6e6b          	0x776f6e6b
80007612:	2d6e                	fld	fs10,216(sp)
80007614:	76726553          	0x76726553
80007618:	6369                	lui	t1,0x1a
8000761a:	2065                	jal	800076c2 <impure_data+0x2>
8000761c:	0000                	unimp
	...
