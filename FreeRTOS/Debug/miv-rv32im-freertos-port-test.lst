
miv-rv32im-freertos-port-test.elf:     file format elf32-littleriscv
miv-rv32im-freertos-port-test.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000000

Program Header:
    LOAD off    0x00001000 vaddr 0x80000000 paddr 0x80000000 align 2**12
         filesz 0x00003990 memsz 0x0003cfe0 flags rwx

Sections:
Idx Name           Size      VMA       LMA       File off  Algn  Flags
  0 .text          00003890  80000000  80000000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sdata         00000020  80003890  80003890  00004890  2**4  CONTENTS, ALLOC, LOAD, DATA
  2 .data          000000e0  800038b0  800038b0  000048b0  2**4  CONTENTS, ALLOC, LOAD, DATA
  3 .sbss          00000070  80003990  80003990  00004990  2**4  ALLOC
  4 .bss           000195e0  80003a00  80003a00  00004990  2**4  ALLOC
  5 .heap          00010000  8001cfe0  8001cfe0  00004990  2**4  ALLOC
  6 .stack         00010000  8002cfe0  8002cfe0  00004990  2**4  ALLOC
  7 .debug_line    00008e18  00000000  00000000  00004990  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_info    0000c36a  00000000  00000000  0000d7a8  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev  00002523  00000000  00000000  00019b12  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000007c8  00000000  00000000  0001c038  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_str     00012286  00000000  00000000  0001c800  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges  000006a8  00000000  00000000  0002ea86  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro   000055b7  00000000  00000000  0002f12e  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment       00000039  00000000  00000000  000346e5  2**0  CONTENTS, READONLY
 15 .debug_frame   00001c00  00000000  00000000  00034720  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
80000000 l    d  .text	00000000 .text
80003890 l    d  .sdata	00000000 .sdata
800038b0 l    d  .data	00000000 .data
80003990 l    d  .sbss	00000000 .sbss
80003a00 l    d  .bss	00000000 .bss
8001cfe0 l    d  .heap	00000000 .heap
8002cfe0 l    d  .stack	00000000 .stack
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./riscv_hal/entry.o
8000000c l       .text	00000000 handle_reset
80000004 l       .text	00000000 nmi_vector
80000008 l       .text	00000000 trap_vector
80000030 l       .text	00000000 trap_entry
00000000 l    df *ABS*	00000000 init.c
80000160 l     F .text	00000050 zero_section
00000000 l    df *ABS*	00000000 riscv_hal.c
80000238 l     F .text	000000b8 PLIC_DisableIRQ
800002f0 l     F .text	00000044 PLIC_ClaimIRQ
80000334 l     F .text	0000004c PLIC_CompleteIRQ
80003990 l     O .sbss	00000008 g_systick_increment
00000000 l    df *ABS*	00000000 riscv_hal_stubs.c
00000000 l    df *ABS*	00000000 syscall.c
80003998 l     O .sbss	00000008 g_stdio_uart
800039a0 l     O .sbss	00000004 g_stdio_uart_init_done
80000c58 l     F .text	00000030 stub
00000000 l    df *ABS*	00000000 core_uart_apb.c
00000000 l    df *ABS*	00000000 heap_2.c
80003a00 l     O .bss	00019000 ucHeap
800039a4 l     O .sbss	00000008 xStart
800039ac l     O .sbss	00000008 xEnd
80003890 l     O .sdata	00000004 xFreeBytesRemaining
800039b4 l     O .sbss	00000004 xHeapHasBeenInitialised.2777
8000136c l     F .text	00000074 prvHeapInit
00000000 l    df *ABS*	00000000 port.c
800013e0 l     F .text	0000004c raise_soft_interrupt
80003894 l     O .sdata	00000004 uxCriticalNesting
80003898 l     O .sdata	00000004 mtime
8000389c l     O .sdata	00000004 mtimecmp
800014a0 l     F .text	000000cc prvSetNextTimerInterrupt
80001638 l     F .text	0000002c prvTaskExitError
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 tasks.c
8001ca00 l     O .bss	00000064 pxReadyTasksLists
8001ca64 l     O .bss	00000014 xDelayedTaskList1
8001ca78 l     O .bss	00000014 xDelayedTaskList2
800039c0 l     O .sbss	00000004 pxDelayedTaskList
800039c4 l     O .sbss	00000004 pxOverflowDelayedTaskList
8001ca8c l     O .bss	00000014 xPendingReadyList
8001caa0 l     O .bss	00000014 xTasksWaitingTermination
800039c8 l     O .sbss	00000004 uxTasksDeleted
8001cab4 l     O .bss	00000014 xSuspendedTaskList
800039cc l     O .sbss	00000004 uxCurrentNumberOfTasks
800039d0 l     O .sbss	00000004 xTickCount
800039d4 l     O .sbss	00000004 uxTopReadyPriority
800039d8 l     O .sbss	00000004 xSchedulerRunning
800039dc l     O .sbss	00000004 uxPendedTicks
800039e0 l     O .sbss	00000004 xYieldPending
800039e4 l     O .sbss	00000004 xNumOfOverflows
800039e8 l     O .sbss	00000004 uxTaskNumber
800039ec l     O .sbss	00000004 xNextTaskUnblockTime
800039f0 l     O .sbss	00000004 uxSchedulerSuspended
800027a8 l     F .text	000000c0 prvAllocateTCBAndStack
80002488 l     F .text	00000138 prvInitialiseTCBVariables
800025c0 l     F .text	000000c0 prvInitialiseTaskLists
800028a8 l     F .text	00000060 prvResetNextTaskUnblockTime
80002720 l     F .text	00000088 prvAddCurrentTaskToDelayedList
80002454 l     F .text	00000034 prvIdleTask
80002680 l     F .text	000000a0 prvCheckTasksWaitingTermination
80002868 l     F .text	00000040 prvDeleteTCB
00000000 l    df *ABS*	00000000 chronos.c
80002908 l     F .text	000000b4 PLIC_EnableIRQ
800029bc l     F .text	0000003c PLIC_SetPriority
00000000 l    df *ABS*	00000000 applications.c
00000000 l    df *ABS*	00000000 system_call.c
800030e8 l     F .text	00000040 __syscall_error
80003128 l     F .text	0000005c __internal_syscall
80003184 l     F .text	00000080 syscall_errno
00000000 l    df *ABS*	00000000 main.c
800032a4 l     F .text	000000d0 PLIC_init
800034f0 l     F .text	00000050 vUartTestTask1
80003540 l     F .text	00000034 vUartTestTask2
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 syswrite.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 impure.c
80003930 l     O .data	00000060 impure_data
80001460 g     F .text	00000040 vPortExitCritical
00010000 g       *ABS*	00000000 STACK_SIZE
80000830  w    F .text	00000020 External_11_IRQHandler
80004090 g       .sdata	00000000 __global_pointer$
80002b6c g     F .text	00000048 printsv
800038b0 g       *ABS*	00000000 __data_load
800016f8 g     F .text	000000cc SysTick_Handler
80000770  w    F .text	00000020 External_5_IRQHandler
80000e38 g       .text	00000000 HW_get_8bit_reg_field
80002dd8 g     F .text	00000080 reverse
80003574 g     F .text	00000010 __errno
800039bc g     O .sbss	00000004 pxCurrentTCB
80003990 g       .sbss	00000000 __sbss_start
800029f8 g     F .text	000000c8 Chronos_init
8001cefc g     O .bss	00000004 errno
80000d70 g       .text	00000000 HW_set_32bit_reg
80000950  w    F .text	00000020 External_20_IRQHandler
800017c4 g     F .text	00000044 xPortStartScheduler
80000380 g     F .text	00000024 __enable_irq
80001cc4 g     F .text	0000021c xTaskGenericCreate
80003890 g       .sdata	00000000 __sdata_start
800012a0 g     F .text	000000cc vPortFree
8001cf00 g     O .bss	00000008 g_uart
80000e10 g       .text	00000000 HW_set_8bit_reg_field
80000a10  w    F .text	00000020 External_26_IRQHandler
800004ec g     F .text	00000224 handle_trap
80001998 g     F .text	00000088 vListInsertEnd
00080000 g       *ABS*	00000000 RAM_SIZE
80000810  w    F .text	00000020 External_10_IRQHandler
80002b30 g     F .text	0000003c printi
80001970 g     F .text	00000028 vListInitialiseItem
80000a90  w    F .text	00000020 External_30_IRQHandler
800008f0  w    F .text	00000020 External_17_IRQHandler
8002cfe0 g       .heap	00000000 _heap_end
80003204 g     F .text	00000064 sys_Testing
80000c08 g     F .text	00000050 _isatty
8001cfe0 g       .bss	00000000 __bss_end
80003268 g     F .text	0000003c handle_syscall
800010c4 g     F .text	000001dc pvPortMalloc
800001b0 g     F .text	0000006c _init
8000190c g     F .text	00000064 vListInitialise
80000e00 g       .text	00000000 HW_set_8bit_reg
80000e08 g       .text	00000000 HW_get_8bit_reg
80002ff8 g     F .text	000000f0 API_TaskListInit
80003a00 g       .sbss	00000000 __sbss_end
80000d80 g       .text	00000000 HW_set_32bit_reg_field
80003584 g     F .text	0000001c write
800034c0 g     F .text	00000014 vApplicationMallocFailedHook
800009f0  w    F .text	00000020 External_25_IRQHandler
8003cfe0 g       .stack	00000000 __stack_top
80000a70  w    F .text	00000020 External_29_IRQHandler
8001cac8 g     O .bss	00000434 incommingPacket
80001014 g     F .text	000000b0 UART_polled_tx_string
80000ad0 g     F .text	000000e8 write_hex
80000870  w    F .text	00000020 External_13_IRQHandler
80002d44 g     F .text	00000048 External_2_IRQHandler
00010000 g       *ABS*	00000000 HEAP_SIZE
80000850  w    F .text	00000020 External_12_IRQHandler
80000f60 g     F .text	000000b4 UART_send
80000000 g       .text	00000000 _start
80001ff4 g     F .text	00000028 vTaskSuspendAll
800003a4 g     F .text	000000a8 handle_m_timer_interrupt
80002ac0 g     F .text	00000070 prints
80001af4 g     F .text	00000098 uxListRemove
80002c68 g     F .text	00000094 NI_enable_irq
80003890 g       *ABS*	00000000 __sdata_load
80003990 g       .data	00000000 __data_end
80002368 g     F .text	000000ec vTaskSwitchContext
80000910  w    F .text	00000020 External_18_IRQHandler
80000da8 g       .text	00000000 HW_get_32bit_reg_field
80002e58 g     F .text	000001a0 myItoa
80000990  w    F .text	00000020 External_22_IRQHandler
800008b0  w    F .text	00000020 External_15_IRQHandler
800018e4 g     F .text	00000028 vPortYield
80000000 g       *ABS*	00000000 RAM_START_ADDRESS
80003a00 g       .bss	00000000 __bss_start
8001cf08 g     O .bss	000000c8 TaskList
800008d0  w    F .text	00000020 External_16_IRQHandler
80001b8c g     F .text	000000e8 memset
80003374 g     F .text	0000014c main
80002d8c g     F .text	0000004c mySwap
80001a20 g     F .text	000000d4 vListInsert
80000a50  w    F .text	00000020 External_28_IRQHandler
80000dc0 g       .text	00000000 HW_get_16bit_reg
800038b0 g       .sdata	00000000 __sdata_end
8002cfe0 g       .heap	00000000 __heap_end
80000890  w    F .text	00000020 External_14_IRQHandler
8000021c g     F .text	0000001c _fini
8000201c g     F .text	00000160 xTaskResumeAll
80001f64 g     F .text	00000090 vTaskStartScheduler
800038b0 g     O .data	00000080 ext_irq_handler_table
800035a0 g     F .text	00000054 _write_r
80000dc8 g       .text	00000000 HW_set_16bit_reg_field
800038a0 g     O .sdata	00000004 _impure_ptr
8002cfe0 g       .stack	00000000 __stack_bottom
80001808 g     F .text	000000dc Software_IRQHandler
80000a30  w    F .text	00000020 External_27_IRQHandler
800007d0  w    F .text	00000020 External_8_IRQHandler
800007f0  w    F .text	00000020 External_9_IRQHandler
8001cfe0 g       .heap	00000000 __heap_start
80000710  w    F .text	00000020 Invalid_IRQHandler
80000730  w    F .text	00000020 External_3_IRQHandler
8000217c g     F .text	000001ec xTaskIncrementTick
800039b8 g     O .sbss	00000004 g_startscheduler
80002c40 g     F .text	00000028 getYpos
80000930  w    F .text	00000020 External_19_IRQHandler
80000c88 g     F .text	000000e8 _write
80002c14 g     F .text	0000002c getXpos
8001cfe0 g       .bss	00000000 _end
8000156c g     F .text	000000cc vPortSetupTimer
80002bb4 g     F .text	00000060 printsvsv
80001ee0 g     F .text	00000084 vTaskDelay
80000e48 g     F .text	00000118 UART_init
80000d78 g       .text	00000000 HW_get_32bit_reg
80000bb8 g     F .text	00000050 _exit
80000db8 g       .text	00000000 HW_set_16bit_reg
80001c74 g     F .text	00000050 strlen
80001664 g     F .text	00000094 pxPortInitialiseStack
80002cfc g     F .text	00000048 External_1_IRQHandler
80000790  w    F .text	00000020 External_6_IRQHandler
80000ab0  w    F .text	00000020 External_31_IRQHandler
8000142c g     F .text	00000034 vPortEnterCritical
800038b0 g       .data	00000000 __data_start
8001cfd0 g     O .bss	00000004 ProcessorAddr
80000970  w    F .text	00000020 External_21_IRQHandler
800004bc g     F .text	00000030 handle_m_soft_interrupt
8000044c g     F .text	00000070 handle_m_ext_interrupt
80000df0 g       .text	00000000 HW_get_16bit_reg_field
800009b0  w    F .text	00000020 External_23_IRQHandler
800009d0  w    F .text	00000020 External_24_IRQHandler
80000750  w    F .text	00000020 External_4_IRQHandler
800007b0  w    F .text	00000020 External_7_IRQHandler
800034d4 g     F .text	0000001c vApplicationIdleHook



Disassembly of section .text:

80000000 <_start>:
_start():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:30

  .section      .text.entry
  .globl _start

_start:
  j handle_reset
80000000:	00c0006f          	j	8000000c <handle_reset>

80000004 <nmi_vector>:
nmi_vector():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:33

nmi_vector:
  j nmi_vector
80000004:	0000006f          	j	80000004 <nmi_vector>

80000008 <trap_vector>:
trap_vector():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:36

trap_vector:
  j trap_entry
80000008:	0280006f          	j	80000030 <trap_entry>

8000000c <handle_reset>:
handle_reset():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:39

handle_reset:
  la t0, trap_entry
8000000c:	00000297          	auipc	t0,0x0
80000010:	02428293          	addi	t0,t0,36 # 80000030 <trap_entry>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:40
  csrw mtvec, t0
80000014:	30529073          	csrw	mtvec,t0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:41
  csrwi mstatus, 0
80000018:	30005073          	csrwi	mstatus,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:42
  csrwi mie, 0
8000001c:	30405073          	csrwi	mie,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:60
  lui t0, 0x0
  fscsr t0
#endif

  # initialize global pointer
  la gp, __global_pointer$
80000020:	00018193          	mv	gp,gp
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:63

  # initialize stack pointer
  la sp, __stack_top
80000024:	0003d117          	auipc	sp,0x3d
80000028:	fbc10113          	addi	sp,sp,-68 # 8003cfe0 <__stack_top>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:66

  # perform the rest of initialization in C
  j _init
8000002c:	1840006f          	j	800001b0 <_init>

80000030 <trap_entry>:
trap_entry():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:70


trap_entry:
  addi sp, sp, -32*REGBYTES
80000030:	f8010113          	addi	sp,sp,-128
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:72

  SREG x1, 0 * REGBYTES(sp)
80000034:	00112023          	sw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:73
  SREG x2, 1 * REGBYTES(sp)
80000038:	00212223          	sw	sp,4(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:74
  SREG x3, 2 * REGBYTES(sp)
8000003c:	00312423          	sw	gp,8(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:75
  SREG x4, 3 * REGBYTES(sp)
80000040:	00412623          	sw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:76
  SREG x5, 4 * REGBYTES(sp)
80000044:	00512823          	sw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:77
  SREG x6, 5 * REGBYTES(sp)
80000048:	00612a23          	sw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:78
  SREG x7, 6 * REGBYTES(sp)
8000004c:	00712c23          	sw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:79
  SREG x8, 7 * REGBYTES(sp)
80000050:	00812e23          	sw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:80
  SREG x9, 8 * REGBYTES(sp)
80000054:	02912023          	sw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:81
  SREG x10, 9 * REGBYTES(sp)
80000058:	02a12223          	sw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:82
  SREG x11, 10 * REGBYTES(sp)
8000005c:	02b12423          	sw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:83
  SREG x12, 11 * REGBYTES(sp)
80000060:	02c12623          	sw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:84
  SREG x13, 12 * REGBYTES(sp)
80000064:	02d12823          	sw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:85
  SREG x14, 13 * REGBYTES(sp)
80000068:	02e12a23          	sw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:86
  SREG x15, 14 * REGBYTES(sp)
8000006c:	02f12c23          	sw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:87
  SREG x16, 15 * REGBYTES(sp)
80000070:	03012e23          	sw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:88
  SREG x17, 16 * REGBYTES(sp)
80000074:	05112023          	sw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:89
  SREG x18, 17 * REGBYTES(sp)
80000078:	05212223          	sw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:90
  SREG x19, 18 * REGBYTES(sp)
8000007c:	05312423          	sw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:91
  SREG x20, 19 * REGBYTES(sp)
80000080:	05412623          	sw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:92
  SREG x21, 20 * REGBYTES(sp)
80000084:	05512823          	sw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:93
  SREG x22, 21 * REGBYTES(sp)
80000088:	05612a23          	sw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:94
  SREG x23, 22 * REGBYTES(sp)
8000008c:	05712c23          	sw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:95
  SREG x24, 23 * REGBYTES(sp)
80000090:	05812e23          	sw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:96
  SREG x25, 24 * REGBYTES(sp)
80000094:	07912023          	sw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:97
  SREG x26, 25 * REGBYTES(sp)
80000098:	07a12223          	sw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:98
  SREG x27, 26 * REGBYTES(sp)
8000009c:	07b12423          	sw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:99
  SREG x28, 27 * REGBYTES(sp)
800000a0:	07c12623          	sw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:100
  SREG x29, 28 * REGBYTES(sp)
800000a4:	07d12823          	sw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:101
  SREG x30, 29 * REGBYTES(sp)
800000a8:	07e12a23          	sw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:102
  SREG x31, 30 * REGBYTES(sp)
800000ac:	07f12c23          	sw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:105


  csrr t0, mepc
800000b0:	341022f3          	csrr	t0,mepc
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:106
  SREG t0, 31 * REGBYTES(sp)
800000b4:	06512e23          	sw	t0,124(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:108

  csrr a0, mcause
800000b8:	34202573          	csrr	a0,mcause
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:109
  csrr a1, mepc
800000bc:	341025f3          	csrr	a1,mepc
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:110
  mv a2, sp
800000c0:	00010613          	mv	a2,sp
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:111
  jal handle_trap
800000c4:	428000ef          	jal	ra,800004ec <handle_trap>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:112
  csrw mepc, a0
800000c8:	34151073          	csrw	mepc,a0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:115

  # Remain in M-mode after mret
  li t0, MSTATUS_MPP
800000cc:	000022b7          	lui	t0,0x2
800000d0:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:116
  csrs mstatus, t0
800000d4:	3002a073          	csrs	mstatus,t0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:118

  LREG x1, 0 * REGBYTES(sp)
800000d8:	00012083          	lw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:119
  LREG x2, 1 * REGBYTES(sp)
800000dc:	00412103          	lw	sp,4(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:120
  LREG x3, 2 * REGBYTES(sp)
800000e0:	00812183          	lw	gp,8(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:121
  LREG x4, 3 * REGBYTES(sp)
800000e4:	00c12203          	lw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:122
  LREG x5, 4 * REGBYTES(sp)
800000e8:	01012283          	lw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:123
  LREG x6, 5 * REGBYTES(sp)
800000ec:	01412303          	lw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:124
  LREG x7, 6 * REGBYTES(sp)
800000f0:	01812383          	lw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:125
  LREG x8, 7 * REGBYTES(sp)
800000f4:	01c12403          	lw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:126
  LREG x9, 8 * REGBYTES(sp)
800000f8:	02012483          	lw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:127
  LREG x10, 9 * REGBYTES(sp)
800000fc:	02412503          	lw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:128
  LREG x11, 10 * REGBYTES(sp)
80000100:	02812583          	lw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:129
  LREG x12, 11 * REGBYTES(sp)
80000104:	02c12603          	lw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:130
  LREG x13, 12 * REGBYTES(sp)
80000108:	03012683          	lw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:131
  LREG x14, 13 * REGBYTES(sp)
8000010c:	03412703          	lw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:132
  LREG x15, 14 * REGBYTES(sp)
80000110:	03812783          	lw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:133
  LREG x16, 15 * REGBYTES(sp)
80000114:	03c12803          	lw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:134
  LREG x17, 16 * REGBYTES(sp)
80000118:	04012883          	lw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:135
  LREG x18, 17 * REGBYTES(sp)
8000011c:	04412903          	lw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:136
  LREG x19, 18 * REGBYTES(sp)
80000120:	04812983          	lw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:137
  LREG x20, 19 * REGBYTES(sp)
80000124:	04c12a03          	lw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:138
  LREG x21, 20 * REGBYTES(sp)
80000128:	05012a83          	lw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:139
  LREG x22, 21 * REGBYTES(sp)
8000012c:	05412b03          	lw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:140
  LREG x23, 22 * REGBYTES(sp)
80000130:	05812b83          	lw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:141
  LREG x24, 23 * REGBYTES(sp)
80000134:	05c12c03          	lw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:142
  LREG x25, 24 * REGBYTES(sp)
80000138:	06012c83          	lw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:143
  LREG x26, 25 * REGBYTES(sp)
8000013c:	06412d03          	lw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:144
  LREG x27, 26 * REGBYTES(sp)
80000140:	06812d83          	lw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:145
  LREG x28, 27 * REGBYTES(sp)
80000144:	06c12e03          	lw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:146
  LREG x29, 28 * REGBYTES(sp)
80000148:	07012e83          	lw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:147
  LREG x30, 29 * REGBYTES(sp)
8000014c:	07412f03          	lw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:148
  LREG x31, 30 * REGBYTES(sp)
80000150:	07812f83          	lw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:150

  addi sp, sp, 32*REGBYTES
80000154:	08010113          	addi	sp,sp,128
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:151
  mret
80000158:	30200073          	mret
8000015c:	0000                	unimp
	...

80000160 <zero_section>:
zero_section():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:47
        ++p_vma;
    }
}

static void zero_section(uint32_t * start, uint32_t * end)
{
80000160:	fd010113          	addi	sp,sp,-48
80000164:	02812623          	sw	s0,44(sp)
80000168:	03010413          	addi	s0,sp,48
8000016c:	fca42e23          	sw	a0,-36(s0)
80000170:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:48
    uint32_t * p_zero = start;
80000174:	fdc42783          	lw	a5,-36(s0)
80000178:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:50
    
    while(p_zero <= end)
8000017c:	0180006f          	j	80000194 <zero_section+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:52
    {
        *p_zero = 0;
80000180:	fec42783          	lw	a5,-20(s0)
80000184:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:53
        ++p_zero;
80000188:	fec42783          	lw	a5,-20(s0)
8000018c:	00478793          	addi	a5,a5,4
80000190:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:50
    while(p_zero <= end)
80000194:	fec42703          	lw	a4,-20(s0)
80000198:	fd842783          	lw	a5,-40(s0)
8000019c:	fee7f2e3          	bleu	a4,a5,80000180 <zero_section+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:55
    }
}
800001a0:	00000013          	nop
800001a4:	02c12403          	lw	s0,44(sp)
800001a8:	03010113          	addi	sp,sp,48
800001ac:	00008067          	ret

800001b0 <_init>:
_init():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:58

void _init(void)
{
800001b0:	fe010113          	addi	sp,sp,-32
800001b4:	00112e23          	sw	ra,28(sp)
800001b8:	00812c23          	sw	s0,24(sp)
800001bc:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:60
    extern int main(int, char**);
    const char *argv0 = "hello";
800001c0:	800037b7          	lui	a5,0x80003
800001c4:	60078793          	addi	a5,a5,1536 # 80003600 <__stack_top+0xfffc6620>
800001c8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:61
    char *argv[] = {(char *)argv0, NULL, NULL};
800001cc:	fec42783          	lw	a5,-20(s0)
800001d0:	fef42023          	sw	a5,-32(s0)
800001d4:	fe042223          	sw	zero,-28(s0)
800001d8:	fe042423          	sw	zero,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:66

// Imperas - this is loaded directly by simulator so must not be copied
//    copy_section(&__sdata_load, &__sdata_start, &__sdata_end);
//    copy_section(&__data_load, &__data_start, &__data_end);
    zero_section(&__sbss_start, &__sbss_end);
800001dc:	97018593          	addi	a1,gp,-1680 # 80003a00 <__sbss_end>
800001e0:	90018513          	addi	a0,gp,-1792 # 80003990 <__data_end>
800001e4:	f7dff0ef          	jal	ra,80000160 <zero_section>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:67
    zero_section(&__bss_start, &__bss_end);
800001e8:	8001d7b7          	lui	a5,0x8001d
800001ec:	fe078593          	addi	a1,a5,-32 # 8001cfe0 <__stack_top+0xfffe0000>
800001f0:	97018513          	addi	a0,gp,-1680 # 80003a00 <__sbss_end>
800001f4:	f6dff0ef          	jal	ra,80000160 <zero_section>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:69
    
    main(1, argv);
800001f8:	fe040793          	addi	a5,s0,-32
800001fc:	00078593          	mv	a1,a5
80000200:	00100513          	li	a0,1
80000204:	170030ef          	jal	ra,80003374 <main>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:70
}
80000208:	00000013          	nop
8000020c:	01c12083          	lw	ra,28(sp)
80000210:	01812403          	lw	s0,24(sp)
80000214:	02010113          	addi	sp,sp,32
80000218:	00008067          	ret

8000021c <_fini>:
_fini():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:75

/* Function called after main() finishes */
void
_fini()
{
8000021c:	ff010113          	addi	sp,sp,-16
80000220:	00812623          	sw	s0,12(sp)
80000224:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:76
}
80000228:	00000013          	nop
8000022c:	00c12403          	lw	s0,12(sp)
80000230:	01010113          	addi	sp,sp,16
80000234:	00008067          	ret

80000238 <PLIC_DisableIRQ>:
PLIC_DisableIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:174
 * 	If you wish to disable the external interrupt while the interrupt handler
 * 	for that external interrupt is executing then you must use the return value
 * 	EXT_IRQ_DISABLE to return from the extern interrupt handler.
 */
static inline void PLIC_DisableIRQ(IRQn_Type IRQn)
{
80000238:	fd010113          	addi	sp,sp,-48
8000023c:	02812623          	sw	s0,44(sp)
80000240:	03010413          	addi	s0,sp,48
80000244:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:175
    unsigned long hart_id = read_csr(mhartid);
80000248:	f14027f3          	csrr	a5,mhartid
8000024c:	fef42623          	sw	a5,-20(s0)
80000250:	fec42783          	lw	a5,-20(s0)
80000254:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:176
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80000258:	40000737          	lui	a4,0x40000
8000025c:	fdc42783          	lw	a5,-36(s0)
80000260:	0057d793          	srli	a5,a5,0x5
80000264:	fe842683          	lw	a3,-24(s0)
80000268:	00569693          	slli	a3,a3,0x5
8000026c:	00f686b3          	add	a3,a3,a5
80000270:	000017b7          	lui	a5,0x1
80000274:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80000278:	00f687b3          	add	a5,a3,a5
8000027c:	00279793          	slli	a5,a5,0x2
80000280:	00f707b3          	add	a5,a4,a5
80000284:	0007a783          	lw	a5,0(a5)
80000288:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:178

    current &= ~((uint32_t)1 << (IRQn % 32));
8000028c:	fdc42783          	lw	a5,-36(s0)
80000290:	01f7f793          	andi	a5,a5,31
80000294:	00100713          	li	a4,1
80000298:	00f717b3          	sll	a5,a4,a5
8000029c:	fff7c793          	not	a5,a5
800002a0:	fe442703          	lw	a4,-28(s0)
800002a4:	00f777b3          	and	a5,a4,a5
800002a8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:180

    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
800002ac:	40000737          	lui	a4,0x40000
800002b0:	fdc42783          	lw	a5,-36(s0)
800002b4:	0057d793          	srli	a5,a5,0x5
800002b8:	fe842683          	lw	a3,-24(s0)
800002bc:	00569693          	slli	a3,a3,0x5
800002c0:	00f686b3          	add	a3,a3,a5
800002c4:	000017b7          	lui	a5,0x1
800002c8:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
800002cc:	00f687b3          	add	a5,a3,a5
800002d0:	00279793          	slli	a5,a5,0x2
800002d4:	00f707b3          	add	a5,a4,a5
800002d8:	fe442703          	lw	a4,-28(s0)
800002dc:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:181
}
800002e0:	00000013          	nop
800002e4:	02c12403          	lw	s0,44(sp)
800002e8:	03010113          	addi	sp,sp,48
800002ec:	00008067          	ret

800002f0 <PLIC_ClaimIRQ>:
PLIC_ClaimIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:205

/*==============================================================================
 * The function PLIC_ClaimIRQ() claims the interrupt from the PLIC controller.
 */
static inline uint32_t PLIC_ClaimIRQ(void)
{
800002f0:	fe010113          	addi	sp,sp,-32
800002f4:	00812e23          	sw	s0,28(sp)
800002f8:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:206
    unsigned long hart_id = read_csr(mhartid);
800002fc:	f14027f3          	csrr	a5,mhartid
80000300:	fef42623          	sw	a5,-20(s0)
80000304:	fec42783          	lw	a5,-20(s0)
80000308:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:208

    return PLIC->TARGET[hart_id].CLAIM_COMPLETE;
8000030c:	40000737          	lui	a4,0x40000
80000310:	fe842783          	lw	a5,-24(s0)
80000314:	20078793          	addi	a5,a5,512
80000318:	00c79793          	slli	a5,a5,0xc
8000031c:	00f707b3          	add	a5,a4,a5
80000320:	0047a783          	lw	a5,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:209
}
80000324:	00078513          	mv	a0,a5
80000328:	01c12403          	lw	s0,28(sp)
8000032c:	02010113          	addi	sp,sp,32
80000330:	00008067          	ret

80000334 <PLIC_CompleteIRQ>:
PLIC_CompleteIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:216
/*==============================================================================
 * The function PLIC_CompleteIRQ() indicates to the PLIC controller the interrupt
 * is processed and claim is complete.
 */
static inline void PLIC_CompleteIRQ(uint32_t source)
{
80000334:	fd010113          	addi	sp,sp,-48
80000338:	02812623          	sw	s0,44(sp)
8000033c:	03010413          	addi	s0,sp,48
80000340:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:217
    unsigned long hart_id = read_csr(mhartid);
80000344:	f14027f3          	csrr	a5,mhartid
80000348:	fef42623          	sw	a5,-20(s0)
8000034c:	fec42783          	lw	a5,-20(s0)
80000350:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:219

    PLIC->TARGET[hart_id].CLAIM_COMPLETE = source;
80000354:	40000737          	lui	a4,0x40000
80000358:	fe842783          	lw	a5,-24(s0)
8000035c:	20078793          	addi	a5,a5,512
80000360:	00c79793          	slli	a5,a5,0xc
80000364:	00f707b3          	add	a5,a4,a5
80000368:	fdc42703          	lw	a4,-36(s0)
8000036c:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:220
}
80000370:	00000013          	nop
80000374:	02c12403          	lw	s0,44(sp)
80000378:	03010113          	addi	sp,sp,48
8000037c:	00008067          	ret

80000380 <__enable_irq>:
__enable_irq():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:91

/*------------------------------------------------------------------------------
 * Enabler all interrupts.
 */
void __enable_irq(void)
{
80000380:	fe010113          	addi	sp,sp,-32
80000384:	00812e23          	sw	s0,28(sp)
80000388:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:92
    set_csr(mstatus, MSTATUS_MIE);
8000038c:	300467f3          	csrrsi	a5,mstatus,8
80000390:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:93
}
80000394:	00000013          	nop
80000398:	01c12403          	lw	s0,28(sp)
8000039c:	02010113          	addi	sp,sp,32
800003a0:	00008067          	ret

800003a4 <handle_m_timer_interrupt>:
handle_m_timer_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:123

/*------------------------------------------------------------------------------
 * RISC-V interrupt handler for machine timer interrupts.
 */
void handle_m_timer_interrupt()
{
800003a4:	fe010113          	addi	sp,sp,-32
800003a8:	00112e23          	sw	ra,28(sp)
800003ac:	00812c23          	sw	s0,24(sp)
800003b0:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:124
    clear_csr(mie, MIP_MTIP);
800003b4:	08000793          	li	a5,128
800003b8:	3047b7f3          	csrrc	a5,mie,a5
800003bc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:126

    SysTick_Handler();
800003c0:	338010ef          	jal	ra,800016f8 <SysTick_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:128

    PRCI->MTIMECMP[read_csr(mhartid)] = PRCI->MTIME + g_systick_increment;
800003c4:	44000737          	lui	a4,0x44000
800003c8:	0000c7b7          	lui	a5,0xc
800003cc:	00f707b3          	add	a5,a4,a5
800003d0:	ffc7a803          	lw	a6,-4(a5) # bffc <HEAP_SIZE-0x4004>
800003d4:	ff87a783          	lw	a5,-8(a5)
800003d8:	9001a583          	lw	a1,-1792(gp) # 80003990 <__data_end>
800003dc:	9041a603          	lw	a2,-1788(gp) # 80003994 <__data_end+0x4>
800003e0:	44000537          	lui	a0,0x44000
800003e4:	f1402773          	csrr	a4,mhartid
800003e8:	fee42423          	sw	a4,-24(s0)
800003ec:	fe842883          	lw	a7,-24(s0)
800003f0:	00b786b3          	add	a3,a5,a1
800003f4:	00068313          	mv	t1,a3
800003f8:	00f33333          	sltu	t1,t1,a5
800003fc:	00c80733          	add	a4,a6,a2
80000400:	00e307b3          	add	a5,t1,a4
80000404:	00078713          	mv	a4,a5
80000408:	00068793          	mv	a5,a3
8000040c:	00070813          	mv	a6,a4
80000410:	00001737          	lui	a4,0x1
80000414:	80070713          	addi	a4,a4,-2048 # 800 <HEAP_SIZE-0xf800>
80000418:	00e88733          	add	a4,a7,a4
8000041c:	00371713          	slli	a4,a4,0x3
80000420:	00e50733          	add	a4,a0,a4
80000424:	00f72023          	sw	a5,0(a4)
80000428:	01072223          	sw	a6,4(a4)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:130

    set_csr(mie, MIP_MTIP);
8000042c:	08000793          	li	a5,128
80000430:	3047a7f3          	csrrs	a5,mie,a5
80000434:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:131
}
80000438:	00000013          	nop
8000043c:	01c12083          	lw	ra,28(sp)
80000440:	01812403          	lw	s0,24(sp)
80000444:	02010113          	addi	sp,sp,32
80000448:	00008067          	ret

8000044c <handle_m_ext_interrupt>:
handle_m_ext_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:176

/*------------------------------------------------------------------------------
 * 
 */
void handle_m_ext_interrupt()
{
8000044c:	fe010113          	addi	sp,sp,-32
80000450:	00112e23          	sw	ra,28(sp)
80000454:	00812c23          	sw	s0,24(sp)
80000458:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:177
    uint32_t int_num  = PLIC_ClaimIRQ();
8000045c:	e95ff0ef          	jal	ra,800002f0 <PLIC_ClaimIRQ>
80000460:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:178
    uint8_t disable = EXT_IRQ_KEEP_ENABLED;
80000464:	fe0405a3          	sb	zero,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:180

    disable = ext_irq_handler_table[int_num]();
80000468:	800047b7          	lui	a5,0x80004
8000046c:	fec42703          	lw	a4,-20(s0)
80000470:	00271713          	slli	a4,a4,0x2
80000474:	8b078793          	addi	a5,a5,-1872 # 800038b0 <__stack_top+0xfffc68d0>
80000478:	00f707b3          	add	a5,a4,a5
8000047c:	0007a783          	lw	a5,0(a5)
80000480:	000780e7          	jalr	a5
80000484:	00050793          	mv	a5,a0
80000488:	fef405a3          	sb	a5,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:182

    PLIC_CompleteIRQ(int_num);
8000048c:	fec42503          	lw	a0,-20(s0)
80000490:	ea5ff0ef          	jal	ra,80000334 <PLIC_CompleteIRQ>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:184

    if(EXT_IRQ_DISABLE == disable)
80000494:	feb44703          	lbu	a4,-21(s0)
80000498:	00100793          	li	a5,1
8000049c:	00f71663          	bne	a4,a5,800004a8 <handle_m_ext_interrupt+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:186
    {
        PLIC_DisableIRQ((IRQn_Type)int_num);
800004a0:	fec42503          	lw	a0,-20(s0)
800004a4:	d95ff0ef          	jal	ra,80000238 <PLIC_DisableIRQ>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:188
    }
}
800004a8:	00000013          	nop
800004ac:	01c12083          	lw	ra,28(sp)
800004b0:	01812403          	lw	s0,24(sp)
800004b4:	02010113          	addi	sp,sp,32
800004b8:	00008067          	ret

800004bc <handle_m_soft_interrupt>:
handle_m_soft_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:191

void handle_m_soft_interrupt()
{
800004bc:	ff010113          	addi	sp,sp,-16
800004c0:	00112623          	sw	ra,12(sp)
800004c4:	00812423          	sw	s0,8(sp)
800004c8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:192
    Software_IRQHandler();
800004cc:	33c010ef          	jal	ra,80001808 <Software_IRQHandler>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:195

    /*Clear software interrupt*/
    PRCI->MSIP[0] = 0x00;
800004d0:	440007b7          	lui	a5,0x44000
800004d4:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:196
}
800004d8:	00000013          	nop
800004dc:	00c12083          	lw	ra,12(sp)
800004e0:	00812403          	lw	s0,8(sp)
800004e4:	01010113          	addi	sp,sp,16
800004e8:	00008067          	ret

800004ec <handle_trap>:
handle_trap():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:205

/*------------------------------------------------------------------------------
 * Trap/Interrupt handler
 */
uintptr_t handle_trap(uintptr_t mcause, uintptr_t epc, unsigned int *svc_args)
{
800004ec:	fc010113          	addi	sp,sp,-64
800004f0:	02112e23          	sw	ra,60(sp)
800004f4:	02812c23          	sw	s0,56(sp)
800004f8:	04010413          	addi	s0,sp,64
800004fc:	fca42623          	sw	a0,-52(s0)
80000500:	fcb42423          	sw	a1,-56(s0)
80000504:	fcc42223          	sw	a2,-60(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:207
    unsigned int arg0, arg1, arg2, arg3, arg4, arg5, arg7;
    arg0 = svc_args[0];
80000508:	fc442783          	lw	a5,-60(s0)
8000050c:	0007a783          	lw	a5,0(a5)
80000510:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:208
    arg1 = svc_args[1];
80000514:	fc442783          	lw	a5,-60(s0)
80000518:	0047a783          	lw	a5,4(a5)
8000051c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:209
    arg2 = svc_args[2];
80000520:	fc442783          	lw	a5,-60(s0)
80000524:	0087a783          	lw	a5,8(a5)
80000528:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:210
    arg3 = svc_args[3];    
8000052c:	fc442783          	lw	a5,-60(s0)
80000530:	00c7a783          	lw	a5,12(a5)
80000534:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:211
    arg4 = svc_args[4];
80000538:	fc442783          	lw	a5,-60(s0)
8000053c:	0107a783          	lw	a5,16(a5)
80000540:	fcf42e23          	sw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:212
    arg5 = svc_args[5];
80000544:	fc442783          	lw	a5,-60(s0)
80000548:	0147a783          	lw	a5,20(a5)
8000054c:	fcf42c23          	sw	a5,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:213
    arg7 = svc_args[7];
80000550:	fc442783          	lw	a5,-60(s0)
80000554:	01c7a783          	lw	a5,28(a5)
80000558:	fcf42a23          	sw	a5,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:214
    printsv("arg0-", arg0);
8000055c:	fec42783          	lw	a5,-20(s0)
80000560:	00078593          	mv	a1,a5
80000564:	800037b7          	lui	a5,0x80003
80000568:	60878513          	addi	a0,a5,1544 # 80003608 <__stack_top+0xfffc6628>
8000056c:	600020ef          	jal	ra,80002b6c <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:215
    printsv("arg1-", arg1);
80000570:	fe842783          	lw	a5,-24(s0)
80000574:	00078593          	mv	a1,a5
80000578:	800037b7          	lui	a5,0x80003
8000057c:	61078513          	addi	a0,a5,1552 # 80003610 <__stack_top+0xfffc6630>
80000580:	5ec020ef          	jal	ra,80002b6c <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:216
    printsv("arg2-", arg2);
80000584:	fe442783          	lw	a5,-28(s0)
80000588:	00078593          	mv	a1,a5
8000058c:	800037b7          	lui	a5,0x80003
80000590:	61878513          	addi	a0,a5,1560 # 80003618 <__stack_top+0xfffc6638>
80000594:	5d8020ef          	jal	ra,80002b6c <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:217
    printsv("arg3-", arg3);
80000598:	fe042783          	lw	a5,-32(s0)
8000059c:	00078593          	mv	a1,a5
800005a0:	800037b7          	lui	a5,0x80003
800005a4:	62078513          	addi	a0,a5,1568 # 80003620 <__stack_top+0xfffc6640>
800005a8:	5c4020ef          	jal	ra,80002b6c <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:218
    printsv("arg4-", arg4);
800005ac:	fdc42783          	lw	a5,-36(s0)
800005b0:	00078593          	mv	a1,a5
800005b4:	800037b7          	lui	a5,0x80003
800005b8:	62878513          	addi	a0,a5,1576 # 80003628 <__stack_top+0xfffc6648>
800005bc:	5b0020ef          	jal	ra,80002b6c <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:219
    printsv("arg5-", arg5);
800005c0:	fd842783          	lw	a5,-40(s0)
800005c4:	00078593          	mv	a1,a5
800005c8:	800037b7          	lui	a5,0x80003
800005cc:	63078513          	addi	a0,a5,1584 # 80003630 <__stack_top+0xfffc6650>
800005d0:	59c020ef          	jal	ra,80002b6c <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:220
    printsv("arg7-", arg7);
800005d4:	fd442783          	lw	a5,-44(s0)
800005d8:	00078593          	mv	a1,a5
800005dc:	800037b7          	lui	a5,0x80003
800005e0:	63878513          	addi	a0,a5,1592 # 80003638 <__stack_top+0xfffc6658>
800005e4:	588020ef          	jal	ra,80002b6c <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:221
    prints("Entrei em handle_trap\n");
800005e8:	800037b7          	lui	a5,0x80003
800005ec:	64078513          	addi	a0,a5,1600 # 80003640 <__stack_top+0xfffc6660>
800005f0:	4d0020ef          	jal	ra,80002ac0 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:222
    printsvsv("mcause ", mcause, "epc ", epc);
800005f4:	fcc42703          	lw	a4,-52(s0)
800005f8:	fc842783          	lw	a5,-56(s0)
800005fc:	00078693          	mv	a3,a5
80000600:	800037b7          	lui	a5,0x80003
80000604:	65878613          	addi	a2,a5,1624 # 80003658 <__stack_top+0xfffc6678>
80000608:	00070593          	mv	a1,a4
8000060c:	800037b7          	lui	a5,0x80003
80000610:	66078513          	addi	a0,a5,1632 # 80003660 <__stack_top+0xfffc6680>
80000614:	5a0020ef          	jal	ra,80002bb4 <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:223
    if (mcause == ENV_CALL_M || mcause == ENV_CALL_H || mcause == ENV_CALL_S || mcause == ENV_CALL_U){
80000618:	fcc42703          	lw	a4,-52(s0)
8000061c:	00b00793          	li	a5,11
80000620:	02f70463          	beq	a4,a5,80000648 <handle_trap+0x15c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:223 (discriminator 1)
80000624:	fcc42703          	lw	a4,-52(s0)
80000628:	00a00793          	li	a5,10
8000062c:	00f70e63          	beq	a4,a5,80000648 <handle_trap+0x15c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:223 (discriminator 2)
80000630:	fcc42703          	lw	a4,-52(s0)
80000634:	00900793          	li	a5,9
80000638:	00f70863          	beq	a4,a5,80000648 <handle_trap+0x15c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:223 (discriminator 3)
8000063c:	fcc42703          	lw	a4,-52(s0)
80000640:	00800793          	li	a5,8
80000644:	00f71c63          	bne	a4,a5,8000065c <handle_trap+0x170>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:224
        prints("identifiquei uma chamada de sistema\n");
80000648:	800037b7          	lui	a5,0x80003
8000064c:	66878513          	addi	a0,a5,1640 # 80003668 <__stack_top+0xfffc6688>
80000650:	470020ef          	jal	ra,80002ac0 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:225
        handle_syscall();
80000654:	415020ef          	jal	ra,80003268 <handle_syscall>
80000658:	0a00006f          	j	800006f8 <handle_trap+0x20c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:227
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_EXT))
8000065c:	fcc42783          	lw	a5,-52(s0)
80000660:	0207d263          	bgez	a5,80000684 <handle_trap+0x198>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:227 (discriminator 1)
80000664:	fcc42703          	lw	a4,-52(s0)
80000668:	800007b7          	lui	a5,0x80000
8000066c:	fff7c793          	not	a5,a5
80000670:	00f77733          	and	a4,a4,a5
80000674:	00b00793          	li	a5,11
80000678:	00f71663          	bne	a4,a5,80000684 <handle_trap+0x198>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:229
    {
        handle_m_ext_interrupt();
8000067c:	dd1ff0ef          	jal	ra,8000044c <handle_m_ext_interrupt>
80000680:	0780006f          	j	800006f8 <handle_trap+0x20c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:231
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_TIMER))
80000684:	fcc42783          	lw	a5,-52(s0)
80000688:	0207d263          	bgez	a5,800006ac <handle_trap+0x1c0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:231 (discriminator 1)
8000068c:	fcc42703          	lw	a4,-52(s0)
80000690:	800007b7          	lui	a5,0x80000
80000694:	fff7c793          	not	a5,a5
80000698:	00f77733          	and	a4,a4,a5
8000069c:	00700793          	li	a5,7
800006a0:	00f71663          	bne	a4,a5,800006ac <handle_trap+0x1c0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:233
    {
        handle_m_timer_interrupt();
800006a4:	d01ff0ef          	jal	ra,800003a4 <handle_m_timer_interrupt>
800006a8:	0500006f          	j	800006f8 <handle_trap+0x20c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:235
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_SOFT))
800006ac:	fcc42783          	lw	a5,-52(s0)
800006b0:	0207d263          	bgez	a5,800006d4 <handle_trap+0x1e8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:235 (discriminator 1)
800006b4:	fcc42703          	lw	a4,-52(s0)
800006b8:	800007b7          	lui	a5,0x80000
800006bc:	fff7c793          	not	a5,a5
800006c0:	00f77733          	and	a4,a4,a5
800006c4:	00300793          	li	a5,3
800006c8:	00f71663          	bne	a4,a5,800006d4 <handle_trap+0x1e8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:237
    {
        handle_m_soft_interrupt();
800006cc:	df1ff0ef          	jal	ra,800004bc <handle_m_soft_interrupt>
800006d0:	0280006f          	j	800006f8 <handle_trap+0x20c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:241
    }
    else
    {
        write(1, "trap\n", 5);
800006d4:	00500613          	li	a2,5
800006d8:	800037b7          	lui	a5,0x80003
800006dc:	69078593          	addi	a1,a5,1680 # 80003690 <__stack_top+0xfffc66b0>
800006e0:	00100513          	li	a0,1
800006e4:	6a1020ef          	jal	ra,80003584 <write>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:242
        _exit(1 + mcause);
800006e8:	fcc42783          	lw	a5,-52(s0)
800006ec:	00178793          	addi	a5,a5,1
800006f0:	00078513          	mv	a0,a5
800006f4:	4c4000ef          	jal	ra,80000bb8 <_exit>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:244
    }
    return epc;
800006f8:	fc842783          	lw	a5,-56(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:245
}
800006fc:	00078513          	mv	a0,a5
80000700:	03c12083          	lw	ra,60(sp)
80000704:	03812403          	lw	s0,56(sp)
80000708:	04010113          	addi	sp,sp,64
8000070c:	00008067          	ret

80000710 <Invalid_IRQHandler>:
Invalid_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:37
{
    ;
}

__attribute__((weak))  uint8_t Invalid_IRQHandler(void)
{
80000710:	ff010113          	addi	sp,sp,-16
80000714:	00812623          	sw	s0,12(sp)
80000718:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:38
    return(0);
8000071c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:39
}
80000720:	00078513          	mv	a0,a5
80000724:	00c12403          	lw	s0,12(sp)
80000728:	01010113          	addi	sp,sp,16
8000072c:	00008067          	ret

80000730 <External_3_IRQHandler>:
External_3_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:52
{
    return(0);
}

__attribute__((weak))  uint8_t External_3_IRQHandler(void)
{
80000730:	ff010113          	addi	sp,sp,-16
80000734:	00812623          	sw	s0,12(sp)
80000738:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:53
    return(0);
8000073c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:54
}
80000740:	00078513          	mv	a0,a5
80000744:	00c12403          	lw	s0,12(sp)
80000748:	01010113          	addi	sp,sp,16
8000074c:	00008067          	ret

80000750 <External_4_IRQHandler>:
External_4_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:57

__attribute__((weak))  uint8_t External_4_IRQHandler(void)
{
80000750:	ff010113          	addi	sp,sp,-16
80000754:	00812623          	sw	s0,12(sp)
80000758:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:58
    return(0);
8000075c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:59
}
80000760:	00078513          	mv	a0,a5
80000764:	00c12403          	lw	s0,12(sp)
80000768:	01010113          	addi	sp,sp,16
8000076c:	00008067          	ret

80000770 <External_5_IRQHandler>:
External_5_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:62

__attribute__((weak))  uint8_t External_5_IRQHandler(void)
{
80000770:	ff010113          	addi	sp,sp,-16
80000774:	00812623          	sw	s0,12(sp)
80000778:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:63
    return(0);
8000077c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:64
}
80000780:	00078513          	mv	a0,a5
80000784:	00c12403          	lw	s0,12(sp)
80000788:	01010113          	addi	sp,sp,16
8000078c:	00008067          	ret

80000790 <External_6_IRQHandler>:
External_6_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:67

__attribute__((weak))  uint8_t External_6_IRQHandler(void)
{
80000790:	ff010113          	addi	sp,sp,-16
80000794:	00812623          	sw	s0,12(sp)
80000798:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:68
    return(0);
8000079c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:69
}
800007a0:	00078513          	mv	a0,a5
800007a4:	00c12403          	lw	s0,12(sp)
800007a8:	01010113          	addi	sp,sp,16
800007ac:	00008067          	ret

800007b0 <External_7_IRQHandler>:
External_7_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:72

__attribute__((weak))  uint8_t External_7_IRQHandler(void)
{
800007b0:	ff010113          	addi	sp,sp,-16
800007b4:	00812623          	sw	s0,12(sp)
800007b8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:73
    return(0);
800007bc:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:74
}
800007c0:	00078513          	mv	a0,a5
800007c4:	00c12403          	lw	s0,12(sp)
800007c8:	01010113          	addi	sp,sp,16
800007cc:	00008067          	ret

800007d0 <External_8_IRQHandler>:
External_8_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:77

__attribute__((weak))  uint8_t External_8_IRQHandler(void)
{
800007d0:	ff010113          	addi	sp,sp,-16
800007d4:	00812623          	sw	s0,12(sp)
800007d8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:78
    return(0);
800007dc:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:79
}
800007e0:	00078513          	mv	a0,a5
800007e4:	00c12403          	lw	s0,12(sp)
800007e8:	01010113          	addi	sp,sp,16
800007ec:	00008067          	ret

800007f0 <External_9_IRQHandler>:
External_9_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:82

__attribute__((weak))  uint8_t External_9_IRQHandler(void)
{
800007f0:	ff010113          	addi	sp,sp,-16
800007f4:	00812623          	sw	s0,12(sp)
800007f8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:83
    return(0);
800007fc:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:84
}
80000800:	00078513          	mv	a0,a5
80000804:	00c12403          	lw	s0,12(sp)
80000808:	01010113          	addi	sp,sp,16
8000080c:	00008067          	ret

80000810 <External_10_IRQHandler>:
External_10_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:87

__attribute__((weak))  uint8_t External_10_IRQHandler(void)
{
80000810:	ff010113          	addi	sp,sp,-16
80000814:	00812623          	sw	s0,12(sp)
80000818:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:88
    return(0);
8000081c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:89
}
80000820:	00078513          	mv	a0,a5
80000824:	00c12403          	lw	s0,12(sp)
80000828:	01010113          	addi	sp,sp,16
8000082c:	00008067          	ret

80000830 <External_11_IRQHandler>:
External_11_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:92

__attribute__((weak))  uint8_t External_11_IRQHandler(void)
{
80000830:	ff010113          	addi	sp,sp,-16
80000834:	00812623          	sw	s0,12(sp)
80000838:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:93
    return(0);
8000083c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:94
}
80000840:	00078513          	mv	a0,a5
80000844:	00c12403          	lw	s0,12(sp)
80000848:	01010113          	addi	sp,sp,16
8000084c:	00008067          	ret

80000850 <External_12_IRQHandler>:
External_12_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:97

__attribute__((weak))  uint8_t External_12_IRQHandler(void)
{
80000850:	ff010113          	addi	sp,sp,-16
80000854:	00812623          	sw	s0,12(sp)
80000858:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:98
    return(0);
8000085c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:99
}
80000860:	00078513          	mv	a0,a5
80000864:	00c12403          	lw	s0,12(sp)
80000868:	01010113          	addi	sp,sp,16
8000086c:	00008067          	ret

80000870 <External_13_IRQHandler>:
External_13_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:102

__attribute__((weak))  uint8_t External_13_IRQHandler(void)
{
80000870:	ff010113          	addi	sp,sp,-16
80000874:	00812623          	sw	s0,12(sp)
80000878:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:103
    return(0);
8000087c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:104
}
80000880:	00078513          	mv	a0,a5
80000884:	00c12403          	lw	s0,12(sp)
80000888:	01010113          	addi	sp,sp,16
8000088c:	00008067          	ret

80000890 <External_14_IRQHandler>:
External_14_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:107

__attribute__((weak))  uint8_t External_14_IRQHandler(void)
{
80000890:	ff010113          	addi	sp,sp,-16
80000894:	00812623          	sw	s0,12(sp)
80000898:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:108
    return(0);
8000089c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:109
}
800008a0:	00078513          	mv	a0,a5
800008a4:	00c12403          	lw	s0,12(sp)
800008a8:	01010113          	addi	sp,sp,16
800008ac:	00008067          	ret

800008b0 <External_15_IRQHandler>:
External_15_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:112

__attribute__((weak))  uint8_t External_15_IRQHandler(void)
{
800008b0:	ff010113          	addi	sp,sp,-16
800008b4:	00812623          	sw	s0,12(sp)
800008b8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:113
    return(0);
800008bc:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:114
}
800008c0:	00078513          	mv	a0,a5
800008c4:	00c12403          	lw	s0,12(sp)
800008c8:	01010113          	addi	sp,sp,16
800008cc:	00008067          	ret

800008d0 <External_16_IRQHandler>:
External_16_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:117

__attribute__((weak))  uint8_t External_16_IRQHandler(void)
{
800008d0:	ff010113          	addi	sp,sp,-16
800008d4:	00812623          	sw	s0,12(sp)
800008d8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:118
    return(0);
800008dc:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:119
}
800008e0:	00078513          	mv	a0,a5
800008e4:	00c12403          	lw	s0,12(sp)
800008e8:	01010113          	addi	sp,sp,16
800008ec:	00008067          	ret

800008f0 <External_17_IRQHandler>:
External_17_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:122

__attribute__((weak))  uint8_t External_17_IRQHandler(void)
{
800008f0:	ff010113          	addi	sp,sp,-16
800008f4:	00812623          	sw	s0,12(sp)
800008f8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:123
    return(0);
800008fc:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:124
}
80000900:	00078513          	mv	a0,a5
80000904:	00c12403          	lw	s0,12(sp)
80000908:	01010113          	addi	sp,sp,16
8000090c:	00008067          	ret

80000910 <External_18_IRQHandler>:
External_18_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:127

__attribute__((weak))  uint8_t External_18_IRQHandler(void)
{
80000910:	ff010113          	addi	sp,sp,-16
80000914:	00812623          	sw	s0,12(sp)
80000918:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:128
    return(0);
8000091c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:129
}
80000920:	00078513          	mv	a0,a5
80000924:	00c12403          	lw	s0,12(sp)
80000928:	01010113          	addi	sp,sp,16
8000092c:	00008067          	ret

80000930 <External_19_IRQHandler>:
External_19_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:132

__attribute__((weak))  uint8_t External_19_IRQHandler(void)
{
80000930:	ff010113          	addi	sp,sp,-16
80000934:	00812623          	sw	s0,12(sp)
80000938:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:133
    return(0);
8000093c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:134
}
80000940:	00078513          	mv	a0,a5
80000944:	00c12403          	lw	s0,12(sp)
80000948:	01010113          	addi	sp,sp,16
8000094c:	00008067          	ret

80000950 <External_20_IRQHandler>:
External_20_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:137

__attribute__((weak))  uint8_t External_20_IRQHandler(void)
{
80000950:	ff010113          	addi	sp,sp,-16
80000954:	00812623          	sw	s0,12(sp)
80000958:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:138
    return(0);
8000095c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:139
}
80000960:	00078513          	mv	a0,a5
80000964:	00c12403          	lw	s0,12(sp)
80000968:	01010113          	addi	sp,sp,16
8000096c:	00008067          	ret

80000970 <External_21_IRQHandler>:
External_21_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:142

__attribute__((weak))  uint8_t External_21_IRQHandler(void)
{
80000970:	ff010113          	addi	sp,sp,-16
80000974:	00812623          	sw	s0,12(sp)
80000978:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:143
    return(0);
8000097c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:144
}
80000980:	00078513          	mv	a0,a5
80000984:	00c12403          	lw	s0,12(sp)
80000988:	01010113          	addi	sp,sp,16
8000098c:	00008067          	ret

80000990 <External_22_IRQHandler>:
External_22_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:147

__attribute__((weak))  uint8_t External_22_IRQHandler(void)
{
80000990:	ff010113          	addi	sp,sp,-16
80000994:	00812623          	sw	s0,12(sp)
80000998:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:148
    return(0);
8000099c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:149
}
800009a0:	00078513          	mv	a0,a5
800009a4:	00c12403          	lw	s0,12(sp)
800009a8:	01010113          	addi	sp,sp,16
800009ac:	00008067          	ret

800009b0 <External_23_IRQHandler>:
External_23_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:152

__attribute__((weak))  uint8_t External_23_IRQHandler(void)
{
800009b0:	ff010113          	addi	sp,sp,-16
800009b4:	00812623          	sw	s0,12(sp)
800009b8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:153
    return(0);
800009bc:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:154
}
800009c0:	00078513          	mv	a0,a5
800009c4:	00c12403          	lw	s0,12(sp)
800009c8:	01010113          	addi	sp,sp,16
800009cc:	00008067          	ret

800009d0 <External_24_IRQHandler>:
External_24_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:157

__attribute__((weak))  uint8_t External_24_IRQHandler(void)
{
800009d0:	ff010113          	addi	sp,sp,-16
800009d4:	00812623          	sw	s0,12(sp)
800009d8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:158
    return(0);
800009dc:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:159
}
800009e0:	00078513          	mv	a0,a5
800009e4:	00c12403          	lw	s0,12(sp)
800009e8:	01010113          	addi	sp,sp,16
800009ec:	00008067          	ret

800009f0 <External_25_IRQHandler>:
External_25_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:162

__attribute__((weak))  uint8_t External_25_IRQHandler(void)
{
800009f0:	ff010113          	addi	sp,sp,-16
800009f4:	00812623          	sw	s0,12(sp)
800009f8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:163
    return(0);
800009fc:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:164
}
80000a00:	00078513          	mv	a0,a5
80000a04:	00c12403          	lw	s0,12(sp)
80000a08:	01010113          	addi	sp,sp,16
80000a0c:	00008067          	ret

80000a10 <External_26_IRQHandler>:
External_26_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:167

__attribute__((weak))  uint8_t External_26_IRQHandler(void)
{
80000a10:	ff010113          	addi	sp,sp,-16
80000a14:	00812623          	sw	s0,12(sp)
80000a18:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:168
    return(0);
80000a1c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:169
}
80000a20:	00078513          	mv	a0,a5
80000a24:	00c12403          	lw	s0,12(sp)
80000a28:	01010113          	addi	sp,sp,16
80000a2c:	00008067          	ret

80000a30 <External_27_IRQHandler>:
External_27_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:172

__attribute__((weak))  uint8_t External_27_IRQHandler(void)
{
80000a30:	ff010113          	addi	sp,sp,-16
80000a34:	00812623          	sw	s0,12(sp)
80000a38:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:173
    return(0);
80000a3c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:174
}
80000a40:	00078513          	mv	a0,a5
80000a44:	00c12403          	lw	s0,12(sp)
80000a48:	01010113          	addi	sp,sp,16
80000a4c:	00008067          	ret

80000a50 <External_28_IRQHandler>:
External_28_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:177

__attribute__((weak))  uint8_t External_28_IRQHandler(void)
{
80000a50:	ff010113          	addi	sp,sp,-16
80000a54:	00812623          	sw	s0,12(sp)
80000a58:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:178
    return(0);
80000a5c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:179
}
80000a60:	00078513          	mv	a0,a5
80000a64:	00c12403          	lw	s0,12(sp)
80000a68:	01010113          	addi	sp,sp,16
80000a6c:	00008067          	ret

80000a70 <External_29_IRQHandler>:
External_29_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:182

__attribute__((weak))  uint8_t External_29_IRQHandler(void)
{
80000a70:	ff010113          	addi	sp,sp,-16
80000a74:	00812623          	sw	s0,12(sp)
80000a78:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:183
    return(0);
80000a7c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:184
}
80000a80:	00078513          	mv	a0,a5
80000a84:	00c12403          	lw	s0,12(sp)
80000a88:	01010113          	addi	sp,sp,16
80000a8c:	00008067          	ret

80000a90 <External_30_IRQHandler>:
External_30_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:187

__attribute__((weak))  uint8_t External_30_IRQHandler(void)
{
80000a90:	ff010113          	addi	sp,sp,-16
80000a94:	00812623          	sw	s0,12(sp)
80000a98:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:188
    return(0);
80000a9c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:189
}
80000aa0:	00078513          	mv	a0,a5
80000aa4:	00c12403          	lw	s0,12(sp)
80000aa8:	01010113          	addi	sp,sp,16
80000aac:	00008067          	ret

80000ab0 <External_31_IRQHandler>:
External_31_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:192

__attribute__((weak))  uint8_t External_31_IRQHandler(void)
{
80000ab0:	ff010113          	addi	sp,sp,-16
80000ab4:	00812623          	sw	s0,12(sp)
80000ab8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:193
    return(0);
80000abc:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:194
}
80000ac0:	00078513          	mv	a0,a5
80000ac4:	00c12403          	lw	s0,12(sp)
80000ac8:	01010113          	addi	sp,sp,16
80000acc:	00008067          	ret

80000ad0 <write_hex>:
write_hex():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:55

char *__env[1] = { 0 };
char **environ = __env;

void write_hex(int fd, uint32_t hex)
{
80000ad0:	fd010113          	addi	sp,sp,-48
80000ad4:	02112623          	sw	ra,44(sp)
80000ad8:	02812423          	sw	s0,40(sp)
80000adc:	03010413          	addi	s0,sp,48
80000ae0:	fca42e23          	sw	a0,-36(s0)
80000ae4:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:61
    uint8_t ii;
    uint8_t jj;
    char towrite;
    uint8_t digit;

    write( fd , "0x", 2 );
80000ae8:	00200613          	li	a2,2
80000aec:	800037b7          	lui	a5,0x80003
80000af0:	69878593          	addi	a1,a5,1688 # 80003698 <__stack_top+0xfffc66b8>
80000af4:	fdc42503          	lw	a0,-36(s0)
80000af8:	28d020ef          	jal	ra,80003584 <write>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:63

    for (ii = 8 ; ii > 0; ii--)
80000afc:	00800793          	li	a5,8
80000b00:	fef407a3          	sb	a5,-17(s0)
80000b04:	0980006f          	j	80000b9c <write_hex+0xcc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:65
    {
        jj = ii-1;
80000b08:	fef44783          	lbu	a5,-17(s0)
80000b0c:	fff78793          	addi	a5,a5,-1
80000b10:	fef40723          	sb	a5,-18(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:66
        digit = ((hex & (0xF << (jj*4))) >> (jj*4));
80000b14:	fee44783          	lbu	a5,-18(s0)
80000b18:	00279793          	slli	a5,a5,0x2
80000b1c:	00f00713          	li	a4,15
80000b20:	00f717b3          	sll	a5,a4,a5
80000b24:	00078713          	mv	a4,a5
80000b28:	fd842783          	lw	a5,-40(s0)
80000b2c:	00f77733          	and	a4,a4,a5
80000b30:	fee44783          	lbu	a5,-18(s0)
80000b34:	00279793          	slli	a5,a5,0x2
80000b38:	00f757b3          	srl	a5,a4,a5
80000b3c:	fef406a3          	sb	a5,-19(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:67
        towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
80000b40:	fed44703          	lbu	a4,-19(s0)
80000b44:	00900793          	li	a5,9
80000b48:	00e7ee63          	bltu	a5,a4,80000b64 <write_hex+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 1)
80000b4c:	fed44783          	lbu	a5,-19(s0)
80000b50:	03078793          	addi	a5,a5,48
80000b54:	0ff7f793          	andi	a5,a5,255
80000b58:	01879793          	slli	a5,a5,0x18
80000b5c:	4187d793          	srai	a5,a5,0x18
80000b60:	0180006f          	j	80000b78 <write_hex+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 2)
80000b64:	fed44783          	lbu	a5,-19(s0)
80000b68:	03778793          	addi	a5,a5,55
80000b6c:	0ff7f793          	andi	a5,a5,255
80000b70:	01879793          	slli	a5,a5,0x18
80000b74:	4187d793          	srai	a5,a5,0x18
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 4)
80000b78:	fef40623          	sb	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:68 (discriminator 4)
        write( fd, &towrite, 1);
80000b7c:	fec40793          	addi	a5,s0,-20
80000b80:	00100613          	li	a2,1
80000b84:	00078593          	mv	a1,a5
80000b88:	fdc42503          	lw	a0,-36(s0)
80000b8c:	1f9020ef          	jal	ra,80003584 <write>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 4)
    for (ii = 8 ; ii > 0; ii--)
80000b90:	fef44783          	lbu	a5,-17(s0)
80000b94:	fff78793          	addi	a5,a5,-1
80000b98:	fef407a3          	sb	a5,-17(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 2)
80000b9c:	fef44783          	lbu	a5,-17(s0)
80000ba0:	f60794e3          	bnez	a5,80000b08 <write_hex+0x38>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:70
    }
}
80000ba4:	00000013          	nop
80000ba8:	02c12083          	lw	ra,44(sp)
80000bac:	02812403          	lw	s0,40(sp)
80000bb0:	03010113          	addi	sp,sp,48
80000bb4:	00008067          	ret

80000bb8 <_exit>:
_exit():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:74

               
void _exit(int code)
{
80000bb8:	fd010113          	addi	sp,sp,-48
80000bbc:	02112623          	sw	ra,44(sp)
80000bc0:	02812423          	sw	s0,40(sp)
80000bc4:	03010413          	addi	s0,sp,48
80000bc8:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:76
#ifdef MSCC_STDIO_THRU_CORE_UART_APB
    const char * message = "\nProgam has exited with code:";
80000bcc:	800037b7          	lui	a5,0x80003
80000bd0:	69c78793          	addi	a5,a5,1692 # 8000369c <__stack_top+0xfffc66bc>
80000bd4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:78

    write(STDERR_FILENO, message, strlen(message));
80000bd8:	fec42503          	lw	a0,-20(s0)
80000bdc:	098010ef          	jal	ra,80001c74 <strlen>
80000be0:	00050793          	mv	a5,a0
80000be4:	00078613          	mv	a2,a5
80000be8:	fec42583          	lw	a1,-20(s0)
80000bec:	00200513          	li	a0,2
80000bf0:	195020ef          	jal	ra,80003584 <write>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:79
    write_hex(STDERR_FILENO, code);
80000bf4:	fdc42783          	lw	a5,-36(s0)
80000bf8:	00078593          	mv	a1,a5
80000bfc:	00200513          	li	a0,2
80000c00:	ed1ff0ef          	jal	ra,80000ad0 <write_hex>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:82 (discriminator 1)
#endif

    while (1);
80000c04:	0000006f          	j	80000c04 <_exit+0x4c>

80000c08 <_isatty>:
_isatty():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:101
    curbrk += incr;
    return curbrk - incr;
}

int _isatty(int fd)
{
80000c08:	fe010113          	addi	sp,sp,-32
80000c0c:	00812e23          	sw	s0,28(sp)
80000c10:	02010413          	addi	s0,sp,32
80000c14:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:102
    if (fd == STDOUT_FILENO || fd == STDERR_FILENO)
80000c18:	fec42703          	lw	a4,-20(s0)
80000c1c:	00100793          	li	a5,1
80000c20:	00f70863          	beq	a4,a5,80000c30 <_isatty+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:102 (discriminator 1)
80000c24:	fec42703          	lw	a4,-20(s0)
80000c28:	00200793          	li	a5,2
80000c2c:	00f71663          	bne	a4,a5,80000c38 <_isatty+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:104
    {
        return 1;
80000c30:	00100793          	li	a5,1
80000c34:	0140006f          	j	80000c48 <_isatty+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:107
    }

    errno = EBADF;
80000c38:	8001d7b7          	lui	a5,0x8001d
80000c3c:	00900713          	li	a4,9
80000c40:	eee7ae23          	sw	a4,-260(a5) # 8001cefc <__stack_top+0xfffdff1c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:108
    return 0;
80000c44:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:109
}
80000c48:	00078513          	mv	a0,a5
80000c4c:	01c12403          	lw	s0,28(sp)
80000c50:	02010113          	addi	sp,sp,32
80000c54:	00008067          	ret

80000c58 <stub>:
stub():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:112

static int stub(int err)
{
80000c58:	fe010113          	addi	sp,sp,-32
80000c5c:	00812e23          	sw	s0,28(sp)
80000c60:	02010413          	addi	s0,sp,32
80000c64:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:113
    errno = err;
80000c68:	8001d7b7          	lui	a5,0x8001d
80000c6c:	fec42703          	lw	a4,-20(s0)
80000c70:	eee7ae23          	sw	a4,-260(a5) # 8001cefc <__stack_top+0xfffdff1c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:114
    return -1;
80000c74:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:115
}
80000c78:	00078513          	mv	a0,a5
80000c7c:	01c12403          	lw	s0,28(sp)
80000c80:	02010113          	addi	sp,sp,32
80000c84:	00008067          	ret

80000c88 <_write>:
_write():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:226
{
    return stub(ECHILD);
}

ssize_t _write(int fd, const void* ptr, size_t len)
{
80000c88:	fd010113          	addi	sp,sp,-48
80000c8c:	02112623          	sw	ra,44(sp)
80000c90:	02812423          	sw	s0,40(sp)
80000c94:	03010413          	addi	s0,sp,48
80000c98:	fca42e23          	sw	a0,-36(s0)
80000c9c:	fcb42c23          	sw	a1,-40(s0)
80000ca0:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:229

#ifdef MSCC_STDIO_THRU_CORE_UART_APB
  const uint8_t * current = (const uint8_t *) ptr;
80000ca4:	fd842783          	lw	a5,-40(s0)
80000ca8:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:232
  size_t jj;

  if (_isatty(fd))
80000cac:	fdc42503          	lw	a0,-36(s0)
80000cb0:	f59ff0ef          	jal	ra,80000c08 <_isatty>
80000cb4:	00050793          	mv	a5,a0
80000cb8:	08078c63          	beqz	a5,80000d50 <_write+0xc8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:238
  {
        /*--------------------------------------------------------------------------
        * Initialize the UART driver if it is the first time this function is
        * called.
        */
        if ( !g_stdio_uart_init_done )
80000cbc:	9101a783          	lw	a5,-1776(gp) # 800039a0 <g_stdio_uart_init_done>
80000cc0:	02079063          	bnez	a5,80000ce0 <_write+0x58>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:245
            /******************************************************************************
            * Baud value:
            * This value is calculated using the following equation:
            *      BAUD_VALUE = (CLOCK / (16 * BAUD_RATE)) - 1
            *****************************************************************************/
            UART_init( &g_stdio_uart, MSCC_STDIO_UART_BASE_ADDR, ((SYS_CLK_FREQ/(16 * MSCC_STDIO_BAUD_VALUE))-1), (DATA_8_BITS | NO_PARITY));
80000cc4:	00100693          	li	a3,1
80000cc8:	02c00613          	li	a2,44
80000ccc:	700015b7          	lui	a1,0x70001
80000cd0:	90818513          	addi	a0,gp,-1784 # 80003998 <g_stdio_uart>
80000cd4:	174000ef          	jal	ra,80000e48 <UART_init>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:246
            g_stdio_uart_init_done = 1;
80000cd8:	00100713          	li	a4,1
80000cdc:	90e1a823          	sw	a4,-1776(gp) # 800039a0 <g_stdio_uart_init_done>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:249
        }

    for (jj = 0; jj < len; jj++)
80000ce0:	fe042623          	sw	zero,-20(s0)
80000ce4:	0580006f          	j	80000d3c <_write+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:251
    {
        UART_send(&g_stdio_uart, current + jj, 1);
80000ce8:	fe842703          	lw	a4,-24(s0)
80000cec:	fec42783          	lw	a5,-20(s0)
80000cf0:	00f707b3          	add	a5,a4,a5
80000cf4:	00100613          	li	a2,1
80000cf8:	00078593          	mv	a1,a5
80000cfc:	90818513          	addi	a0,gp,-1784 # 80003998 <g_stdio_uart>
80000d00:	260000ef          	jal	ra,80000f60 <UART_send>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:252
        if (current[jj] == '\n')
80000d04:	fe842703          	lw	a4,-24(s0)
80000d08:	fec42783          	lw	a5,-20(s0)
80000d0c:	00f707b3          	add	a5,a4,a5
80000d10:	0007c703          	lbu	a4,0(a5)
80000d14:	00a00793          	li	a5,10
80000d18:	00f71c63          	bne	a4,a5,80000d30 <_write+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:254
        {
            UART_send(&g_stdio_uart, (const uint8_t *)"\r", 1);
80000d1c:	00100613          	li	a2,1
80000d20:	800037b7          	lui	a5,0x80003
80000d24:	6bc78593          	addi	a1,a5,1724 # 800036bc <__stack_top+0xfffc66dc>
80000d28:	90818513          	addi	a0,gp,-1784 # 80003998 <g_stdio_uart>
80000d2c:	234000ef          	jal	ra,80000f60 <UART_send>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 2)
    for (jj = 0; jj < len; jj++)
80000d30:	fec42783          	lw	a5,-20(s0)
80000d34:	00178793          	addi	a5,a5,1
80000d38:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 1)
80000d3c:	fec42703          	lw	a4,-20(s0)
80000d40:	fd442783          	lw	a5,-44(s0)
80000d44:	faf762e3          	bltu	a4,a5,80000ce8 <_write+0x60>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:257
        }
    }
    return len;
80000d48:	fd442783          	lw	a5,-44(s0)
80000d4c:	0100006f          	j	80000d5c <_write+0xd4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:261
  }
#endif

  return stub(EBADF);
80000d50:	00900513          	li	a0,9
80000d54:	f05ff0ef          	jal	ra,80000c58 <stub>
80000d58:	00050793          	mv	a5,a0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:262
}
80000d5c:	00078513          	mv	a0,a5
80000d60:	02c12083          	lw	ra,44(sp)
80000d64:	02812403          	lw	s0,40(sp)
80000d68:	03010113          	addi	sp,sp,48
80000d6c:	00008067          	ret

80000d70 <HW_set_32bit_reg>:
HW_set_32bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:36
 *
 * a0:   addr_t reg_addr
 * a1:   uint32_t value
 */
HW_set_32bit_reg:
    sw a1, 0(a0)
80000d70:	00b52023          	sw	a1,0(a0) # 44000000 <RAM_SIZE+0x43f80000>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:37
    ret
80000d74:	00008067          	ret

80000d78 <HW_get_32bit_reg>:
HW_get_32bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:47
 *
 * R0:   addr_t reg_addr
 * @return          32 bits value read from the peripheral register.
 */
HW_get_32bit_reg:
    lw a0, 0(a0)
80000d78:	00052503          	lw	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:48
    ret
80000d7c:	00008067          	ret

80000d80 <HW_set_32bit_reg_field>:
HW_set_32bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:60
 * a1:   int_fast8_t shift
 * a2:   uint32_t mask
 * a3:   uint32_t value
 */
HW_set_32bit_reg_field:
    mv t3, a3
80000d80:	00068e13          	mv	t3,a3
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:61
    sll t3, t3, a1
80000d84:	00be1e33          	sll	t3,t3,a1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:62
    and  t3, t3, a2
80000d88:	00ce7e33          	and	t3,t3,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:63
    lw t1, 0(a0)
80000d8c:	00052303          	lw	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:64
    mv t2, a2
80000d90:	00060393          	mv	t2,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:65
    not t2, t2
80000d94:	fff3c393          	not	t2,t2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:66
    and t1, t1, t2
80000d98:	00737333          	and	t1,t1,t2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:67
    or t1, t1, t3
80000d9c:	01c36333          	or	t1,t1,t3
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:68
    sw t1, 0(a0)
80000da0:	00652023          	sw	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:69
    ret
80000da4:	00008067          	ret

80000da8 <HW_get_32bit_reg_field>:
HW_get_32bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:83
 *
 * @return          32 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_32bit_reg_field:
    lw a0, 0(a0)
80000da8:	00052503          	lw	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:84
    and a0, a0, a2
80000dac:	00c57533          	and	a0,a0,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:85
    srl a0, a0, a1
80000db0:	00b55533          	srl	a0,a0,a1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:86
    ret
80000db4:	00008067          	ret

80000db8 <HW_set_16bit_reg>:
HW_set_16bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:96
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast16_t value
 */
HW_set_16bit_reg:
    sh a1, 0(a0)
80000db8:	00b51023          	sh	a1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:97
    ret
80000dbc:	00008067          	ret

80000dc0 <HW_get_16bit_reg>:
HW_get_16bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:107
 *
 * a0:   addr_t reg_addr
 * @return          16 bits value read from the peripheral register.
 */
HW_get_16bit_reg:
    lh a0, (a0)
80000dc0:	00051503          	lh	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:108
    ret
80000dc4:	00008067          	ret

80000dc8 <HW_set_16bit_reg_field>:
HW_set_16bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:121
 * a2:   uint_fast16_t mask
 * a3:   uint_fast16_t value
 * @param value     Value to be written in the specified field.
 */
HW_set_16bit_reg_field:
    mv t3, a3
80000dc8:	00068e13          	mv	t3,a3
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:122
    sll t3, t3, a1
80000dcc:	00be1e33          	sll	t3,t3,a1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:123
    and  t3, t3, a2
80000dd0:	00ce7e33          	and	t3,t3,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:124
    lh t1, 0(a0)
80000dd4:	00051303          	lh	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:125
    mv t2, a2
80000dd8:	00060393          	mv	t2,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:126
    not t2, t2
80000ddc:	fff3c393          	not	t2,t2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:127
    and t1, t1, t2
80000de0:	00737333          	and	t1,t1,t2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:128
    or t1, t1, t3
80000de4:	01c36333          	or	t1,t1,t3
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:129
    sh t1, 0(a0)
80000de8:	00651023          	sh	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:130
    ret
80000dec:	00008067          	ret

80000df0 <HW_get_16bit_reg_field>:
HW_get_16bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:144
 *
 * @return          16 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_16bit_reg_field:
    lh a0, 0(a0)
80000df0:	00051503          	lh	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:145
    and a0, a0, a2
80000df4:	00c57533          	and	a0,a0,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:146
    srl a0, a0, a1
80000df8:	00b55533          	srl	a0,a0,a1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:147
    ret
80000dfc:	00008067          	ret

80000e00 <HW_set_8bit_reg>:
HW_set_8bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:157
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast8_t value
 */
HW_set_8bit_reg:
    sb a1, 0(a0)
80000e00:	00b50023          	sb	a1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:158
    ret
80000e04:	00008067          	ret

80000e08 <HW_get_8bit_reg>:
HW_get_8bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:168
 *
 * a0:   addr_t reg_addr
 * @return          8 bits value read from the peripheral register.
 */
HW_get_8bit_reg:
    lb a0, 0(a0)
80000e08:	00050503          	lb	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:169
    ret
80000e0c:	00008067          	ret

80000e10 <HW_set_8bit_reg_field>:
HW_set_8bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:181
 * a1:   int_fast8_t shift
 * a2:   uint_fast8_t mask
 * a3:   uint_fast8_t value
 */
HW_set_8bit_reg_field:
    mv t3, a3
80000e10:	00068e13          	mv	t3,a3
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:182
    sll t3, t3, a1
80000e14:	00be1e33          	sll	t3,t3,a1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:183
    and  t3, t3, a2
80000e18:	00ce7e33          	and	t3,t3,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:184
    lb t1, 0(a0)
80000e1c:	00050303          	lb	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:185
    mv t2, a2
80000e20:	00060393          	mv	t2,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:186
    not t2, t2
80000e24:	fff3c393          	not	t2,t2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:187
    and t1, t1, t2
80000e28:	00737333          	and	t1,t1,t2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:188
    or t1, t1, t3
80000e2c:	01c36333          	or	t1,t1,t3
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:189
    sb t1, 0(a0)
80000e30:	00650023          	sb	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:190
    ret
80000e34:	00008067          	ret

80000e38 <HW_get_8bit_reg_field>:
HW_get_8bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:204
 *
 * @return          8 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_8bit_reg_field:
    lb a0, 0(a0)
80000e38:	00050503          	lb	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:205
    and a0, a0, a2
80000e3c:	00c57533          	and	a0,a0,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:206
    srl a0, a0, a1
80000e40:	00b55533          	srl	a0,a0,a1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:207
    ret
80000e44:	00008067          	ret

80000e48 <UART_init>:
UART_init():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:46
    UART_instance_t * this_uart,
    addr_t base_addr,
    uint16_t baud_value,
    uint8_t line_config
)
{
80000e48:	fd010113          	addi	sp,sp,-48
80000e4c:	02112623          	sw	ra,44(sp)
80000e50:	02812423          	sw	s0,40(sp)
80000e54:	03010413          	addi	s0,sp,48
80000e58:	fca42e23          	sw	a0,-36(s0)
80000e5c:	fcb42c23          	sw	a1,-40(s0)
80000e60:	00060793          	mv	a5,a2
80000e64:	00068713          	mv	a4,a3
80000e68:	fcf41b23          	sh	a5,-42(s0)
80000e6c:	00070793          	mv	a5,a4
80000e70:	fcf40aa3          	sb	a5,-43(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53
    
    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( line_config <= MAX_LINE_CONFIG )
    HAL_ASSERT( baud_value <= MAX_BAUD_VALUE )

    if( ( this_uart != NULL_INSTANCE ) &&
80000e74:	fdc42783          	lw	a5,-36(s0)
80000e78:	0c078a63          	beqz	a5,80000f4c <UART_init+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53 (discriminator 1)
80000e7c:	fd544703          	lbu	a4,-43(s0)
80000e80:	00700793          	li	a5,7
80000e84:	0ce7e463          	bltu	a5,a4,80000f4c <UART_init+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:54
        ( line_config <= MAX_LINE_CONFIG ) &&
80000e88:	fd645703          	lhu	a4,-42(s0)
80000e8c:	000027b7          	lui	a5,0x2
80000e90:	0af77e63          	bleu	a5,a4,80000f4c <UART_init+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:60
        ( baud_value <= MAX_BAUD_VALUE ) )
    {
        /*
         * Store lower 8-bits of baud value in CTRL1.
         */
        HAL_set_8bit_reg( base_addr, CTRL1, (uint_fast8_t)(baud_value &
80000e94:	fd842783          	lw	a5,-40(s0)
80000e98:	00878713          	addi	a4,a5,8 # 2008 <HEAP_SIZE-0xdff8>
80000e9c:	fd645783          	lhu	a5,-42(s0)
80000ea0:	0ff7f793          	andi	a5,a5,255
80000ea4:	00078593          	mv	a1,a5
80000ea8:	00070513          	mv	a0,a4
80000eac:	f55ff0ef          	jal	ra,80000e00 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:67
    
        /*
         * Extract higher 5-bits of baud value and store in higher 5-bits 
         * of CTRL2, along with line configuration in lower 3 three bits.
         */
        HAL_set_8bit_reg( base_addr, CTRL2, (uint_fast8_t)line_config | 
80000eb0:	fd842783          	lw	a5,-40(s0)
80000eb4:	00c78693          	addi	a3,a5,12
80000eb8:	fd544703          	lbu	a4,-43(s0)
80000ebc:	fd645783          	lhu	a5,-42(s0)
80000ec0:	4057d793          	srai	a5,a5,0x5
80000ec4:	7f87f793          	andi	a5,a5,2040
80000ec8:	00f767b3          	or	a5,a4,a5
80000ecc:	00078593          	mv	a1,a5
80000ed0:	00068513          	mv	a0,a3
80000ed4:	f2dff0ef          	jal	ra,80000e00 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:71
                                           (uint_fast8_t)((baud_value &
                                   BAUDVALUE_MSB) >> BAUDVALUE_SHIFT ) );
    
        this_uart->base_address = base_addr;
80000ed8:	fdc42783          	lw	a5,-36(s0)
80000edc:	fd842703          	lw	a4,-40(s0)
80000ee0:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:94
        
        /*
         * Flush the receive FIFO of data that may have been received before the
         * driver was initialized.
         */
        rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80000ee4:	fdc42783          	lw	a5,-36(s0)
80000ee8:	0007a783          	lw	a5,0(a5)
80000eec:	01078793          	addi	a5,a5,16
80000ef0:	00078513          	mv	a0,a5
80000ef4:	f15ff0ef          	jal	ra,80000e08 <HW_get_8bit_reg>
80000ef8:	00050793          	mv	a5,a0
80000efc:	0027f793          	andi	a5,a5,2
80000f00:	fef407a3          	sb	a5,-17(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
                                                    STATUS_RXFULL_MASK;
        while ( rx_full )
80000f04:	0380006f          	j	80000f3c <UART_init+0xf4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:98
        {
            HAL_get_8bit_reg( this_uart->base_address, RXDATA );
80000f08:	fdc42783          	lw	a5,-36(s0)
80000f0c:	0007a783          	lw	a5,0(a5)
80000f10:	00478793          	addi	a5,a5,4
80000f14:	00078513          	mv	a0,a5
80000f18:	ef1ff0ef          	jal	ra,80000e08 <HW_get_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:99
            rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80000f1c:	fdc42783          	lw	a5,-36(s0)
80000f20:	0007a783          	lw	a5,0(a5)
80000f24:	01078793          	addi	a5,a5,16
80000f28:	00078513          	mv	a0,a5
80000f2c:	eddff0ef          	jal	ra,80000e08 <HW_get_8bit_reg>
80000f30:	00050793          	mv	a5,a0
80000f34:	0027f793          	andi	a5,a5,2
80000f38:	fef407a3          	sb	a5,-17(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
        while ( rx_full )
80000f3c:	fef44783          	lbu	a5,-17(s0)
80000f40:	fc0794e3          	bnez	a5,80000f08 <UART_init+0xc0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:106
        }

        /*
         * Clear status of the UART instance.
         */
        this_uart->status = (uint8_t)0;
80000f44:	fdc42783          	lw	a5,-36(s0)
80000f48:	00078223          	sb	zero,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:108
    }
}
80000f4c:	00000013          	nop
80000f50:	02c12083          	lw	ra,44(sp)
80000f54:	02812403          	lw	s0,40(sp)
80000f58:	03010113          	addi	sp,sp,48
80000f5c:	00008067          	ret

80000f60 <UART_send>:
UART_send():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:121
(
    UART_instance_t * this_uart,
    const uint8_t * tx_buffer,
    size_t tx_size
)
{
80000f60:	fd010113          	addi	sp,sp,-48
80000f64:	02112623          	sw	ra,44(sp)
80000f68:	02812423          	sw	s0,40(sp)
80000f6c:	03010413          	addi	s0,sp,48
80000f70:	fca42e23          	sw	a0,-36(s0)
80000f74:	fcb42c23          	sw	a1,-40(s0)
80000f78:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( tx_buffer != NULL_BUFFER )
    HAL_ASSERT( tx_size > 0 )
      
    if( (this_uart != NULL_INSTANCE) &&
80000f7c:	fdc42783          	lw	a5,-36(s0)
80000f80:	08078063          	beqz	a5,80001000 <UART_send+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129 (discriminator 1)
80000f84:	fd842783          	lw	a5,-40(s0)
80000f88:	06078c63          	beqz	a5,80001000 <UART_send+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:130
        (tx_buffer != NULL_BUFFER)   &&
80000f8c:	fd442783          	lw	a5,-44(s0)
80000f90:	06078863          	beqz	a5,80001000 <UART_send+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133
        (tx_size > (size_t)0) )
    {
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
80000f94:	fe042623          	sw	zero,-20(s0)
80000f98:	05c0006f          	j	80000ff4 <UART_send+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:137 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80000f9c:	fdc42783          	lw	a5,-36(s0)
80000fa0:	0007a783          	lw	a5,0(a5)
80000fa4:	01078793          	addi	a5,a5,16
80000fa8:	00078513          	mv	a0,a5
80000fac:	e5dff0ef          	jal	ra,80000e08 <HW_get_8bit_reg>
80000fb0:	00050793          	mv	a5,a0
80000fb4:	0017f793          	andi	a5,a5,1
80000fb8:	fef405a3          	sb	a5,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:139 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
80000fbc:	feb44783          	lbu	a5,-21(s0)
80000fc0:	fc078ee3          	beqz	a5,80000f9c <UART_send+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:141 (discriminator 2)
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
80000fc4:	fdc42783          	lw	a5,-36(s0)
80000fc8:	0007a683          	lw	a3,0(a5)
80000fcc:	fd842703          	lw	a4,-40(s0)
80000fd0:	fec42783          	lw	a5,-20(s0)
80000fd4:	00f707b3          	add	a5,a4,a5
80000fd8:	0007c783          	lbu	a5,0(a5)
80000fdc:	00078593          	mv	a1,a5
80000fe0:	00068513          	mv	a0,a3
80000fe4:	e1dff0ef          	jal	ra,80000e00 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 2)
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
80000fe8:	fec42783          	lw	a5,-20(s0)
80000fec:	00178793          	addi	a5,a5,1
80000ff0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 1)
80000ff4:	fec42703          	lw	a4,-20(s0)
80000ff8:	fd442783          	lw	a5,-44(s0)
80000ffc:	faf760e3          	bltu	a4,a5,80000f9c <UART_send+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:145
                              (uint_fast8_t)tx_buffer[char_idx] );
        }
    }
}
80001000:	00000013          	nop
80001004:	02c12083          	lw	ra,44(sp)
80001008:	02812403          	lw	s0,40(sp)
8000100c:	03010113          	addi	sp,sp,48
80001010:	00008067          	ret

80001014 <UART_polled_tx_string>:
UART_polled_tx_string():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:239
UART_polled_tx_string
( 
    UART_instance_t * this_uart, 
    const uint8_t * p_sz_string
)
{
80001014:	fd010113          	addi	sp,sp,-48
80001018:	02112623          	sw	ra,44(sp)
8000101c:	02812423          	sw	s0,40(sp)
80001020:	03010413          	addi	s0,sp,48
80001024:	fca42e23          	sw	a0,-36(s0)
80001028:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246
    uint8_t tx_ready;

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( p_sz_string != NULL_BUFFER )
    
    if( ( this_uart != NULL_INSTANCE ) && ( p_sz_string != NULL_BUFFER ) )
8000102c:	fdc42783          	lw	a5,-36(s0)
80001030:	08078063          	beqz	a5,800010b0 <UART_polled_tx_string+0x9c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246 (discriminator 1)
80001034:	fd842783          	lw	a5,-40(s0)
80001038:	06078c63          	beqz	a5,800010b0 <UART_polled_tx_string+0x9c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:248
    {
        char_idx = 0U;
8000103c:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
80001040:	05c0006f          	j	8000109c <UART_polled_tx_string+0x88>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:253 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001044:	fdc42783          	lw	a5,-36(s0)
80001048:	0007a783          	lw	a5,0(a5)
8000104c:	01078793          	addi	a5,a5,16
80001050:	00078513          	mv	a0,a5
80001054:	db5ff0ef          	jal	ra,80000e08 <HW_get_8bit_reg>
80001058:	00050793          	mv	a5,a0
8000105c:	0017f793          	andi	a5,a5,1
80001060:	fef405a3          	sb	a5,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:255 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
80001064:	feb44783          	lbu	a5,-21(s0)
80001068:	fc078ee3          	beqz	a5,80001044 <UART_polled_tx_string+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:257
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
8000106c:	fdc42783          	lw	a5,-36(s0)
80001070:	0007a683          	lw	a3,0(a5)
80001074:	fd842703          	lw	a4,-40(s0)
80001078:	fec42783          	lw	a5,-20(s0)
8000107c:	00f707b3          	add	a5,a4,a5
80001080:	0007c783          	lbu	a5,0(a5)
80001084:	00078593          	mv	a1,a5
80001088:	00068513          	mv	a0,a3
8000108c:	d75ff0ef          	jal	ra,80000e00 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:259
                              (uint_fast8_t)p_sz_string[char_idx] );
            char_idx++;
80001090:	fec42783          	lw	a5,-20(s0)
80001094:	00178793          	addi	a5,a5,1
80001098:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
8000109c:	fd842703          	lw	a4,-40(s0)
800010a0:	fec42783          	lw	a5,-20(s0)
800010a4:	00f707b3          	add	a5,a4,a5
800010a8:	0007c783          	lbu	a5,0(a5)
800010ac:	f8079ce3          	bnez	a5,80001044 <UART_polled_tx_string+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:262
        }
    }
}
800010b0:	00000013          	nop
800010b4:	02c12083          	lw	ra,44(sp)
800010b8:	02812403          	lw	s0,40(sp)
800010bc:	03010113          	addi	sp,sp,48
800010c0:	00008067          	ret

800010c4 <pvPortMalloc>:
pvPortMalloc():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:151
}
/*-----------------------------------------------------------*/


void *pvPortMalloc( size_t xWantedSize )
{
800010c4:	fc010113          	addi	sp,sp,-64
800010c8:	02112e23          	sw	ra,60(sp)
800010cc:	02812c23          	sw	s0,56(sp)
800010d0:	04010413          	addi	s0,sp,64
800010d4:	fca42623          	sw	a0,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:154
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
800010d8:	fe042223          	sw	zero,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:156

	vTaskSuspendAll();
800010dc:	719000ef          	jal	ra,80001ff4 <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:160
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
800010e0:	9241a783          	lw	a5,-1756(gp) # 800039b4 <xHeapHasBeenInitialised.2777>
800010e4:	00079863          	bnez	a5,800010f4 <pvPortMalloc+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:162
		{
			prvHeapInit();
800010e8:	284000ef          	jal	ra,8000136c <prvHeapInit>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:163
			xHeapHasBeenInitialised = pdTRUE;
800010ec:	00100713          	li	a4,1
800010f0:	92e1a223          	sw	a4,-1756(gp) # 800039b4 <xHeapHasBeenInitialised.2777>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:168
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
800010f4:	fcc42783          	lw	a5,-52(s0)
800010f8:	02078a63          	beqz	a5,8000112c <pvPortMalloc+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:170
		{
			xWantedSize += heapSTRUCT_SIZE;
800010fc:	00800793          	li	a5,8
80001100:	00078713          	mv	a4,a5
80001104:	fcc42783          	lw	a5,-52(s0)
80001108:	00e787b3          	add	a5,a5,a4
8000110c:	fcf42623          	sw	a5,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:173

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
80001110:	fcc42783          	lw	a5,-52(s0)
80001114:	0037f793          	andi	a5,a5,3
80001118:	00078a63          	beqz	a5,8000112c <pvPortMalloc+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:176
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
8000111c:	fcc42783          	lw	a5,-52(s0)
80001120:	ffc7f793          	andi	a5,a5,-4
80001124:	00478793          	addi	a5,a5,4
80001128:	fcf42623          	sw	a5,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
8000112c:	fcc42783          	lw	a5,-52(s0)
80001130:	14078463          	beqz	a5,80001278 <pvPortMalloc+0x1b4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180 (discriminator 1)
80001134:	fcc42703          	lw	a4,-52(s0)
80001138:	000197b7          	lui	a5,0x19
8000113c:	ffb78793          	addi	a5,a5,-5 # 18ffb <HEAP_SIZE+0x8ffb>
80001140:	12e7ec63          	bltu	a5,a4,80001278 <pvPortMalloc+0x1b4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:184
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
80001144:	91418793          	addi	a5,gp,-1772 # 800039a4 <xStart>
80001148:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:185
			pxBlock = xStart.pxNextFreeBlock;
8000114c:	9141a783          	lw	a5,-1772(gp) # 800039a4 <xStart>
80001150:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
80001154:	0180006f          	j	8000116c <pvPortMalloc+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:188
			{
				pxPreviousBlock = pxBlock;
80001158:	fec42783          	lw	a5,-20(s0)
8000115c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:189
				pxBlock = pxBlock->pxNextFreeBlock;
80001160:	fec42783          	lw	a5,-20(s0)
80001164:	0007a783          	lw	a5,0(a5)
80001168:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
8000116c:	fec42783          	lw	a5,-20(s0)
80001170:	0047a783          	lw	a5,4(a5)
80001174:	fcc42703          	lw	a4,-52(s0)
80001178:	00e7f863          	bleu	a4,a5,80001188 <pvPortMalloc+0xc4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186 (discriminator 1)
8000117c:	fec42783          	lw	a5,-20(s0)
80001180:	0007a783          	lw	a5,0(a5)
80001184:	fc079ae3          	bnez	a5,80001158 <pvPortMalloc+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:193
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
80001188:	fec42703          	lw	a4,-20(s0)
8000118c:	91c18793          	addi	a5,gp,-1764 # 800039ac <xEnd>
80001190:	0ef70463          	beq	a4,a5,80001278 <pvPortMalloc+0x1b4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:197
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
80001194:	fe842783          	lw	a5,-24(s0)
80001198:	0007a783          	lw	a5,0(a5)
8000119c:	00800713          	li	a4,8
800011a0:	00e787b3          	add	a5,a5,a4
800011a4:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:201

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
800011a8:	fec42783          	lw	a5,-20(s0)
800011ac:	0007a703          	lw	a4,0(a5)
800011b0:	fe842783          	lw	a5,-24(s0)
800011b4:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:204

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
800011b8:	fec42783          	lw	a5,-20(s0)
800011bc:	0047a703          	lw	a4,4(a5)
800011c0:	fcc42783          	lw	a5,-52(s0)
800011c4:	40f707b3          	sub	a5,a4,a5
800011c8:	00800713          	li	a4,8
800011cc:	00171713          	slli	a4,a4,0x1
800011d0:	08f77663          	bleu	a5,a4,8000125c <pvPortMalloc+0x198>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:209
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
800011d4:	fec42703          	lw	a4,-20(s0)
800011d8:	fcc42783          	lw	a5,-52(s0)
800011dc:	00f707b3          	add	a5,a4,a5
800011e0:	fcf42e23          	sw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:213

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
800011e4:	fec42783          	lw	a5,-20(s0)
800011e8:	0047a703          	lw	a4,4(a5)
800011ec:	fcc42783          	lw	a5,-52(s0)
800011f0:	40f70733          	sub	a4,a4,a5
800011f4:	fdc42783          	lw	a5,-36(s0)
800011f8:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:214
					pxBlock->xBlockSize = xWantedSize;
800011fc:	fec42783          	lw	a5,-20(s0)
80001200:	fcc42703          	lw	a4,-52(s0)
80001204:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
80001208:	fdc42783          	lw	a5,-36(s0)
8000120c:	0047a783          	lw	a5,4(a5)
80001210:	fcf42c23          	sw	a5,-40(s0)
80001214:	91418793          	addi	a5,gp,-1772 # 800039a4 <xStart>
80001218:	fef42023          	sw	a5,-32(s0)
8000121c:	0100006f          	j	8000122c <pvPortMalloc+0x168>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 3)
80001220:	fe042783          	lw	a5,-32(s0)
80001224:	0007a783          	lw	a5,0(a5)
80001228:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 1)
8000122c:	fe042783          	lw	a5,-32(s0)
80001230:	0007a783          	lw	a5,0(a5)
80001234:	0047a783          	lw	a5,4(a5)
80001238:	fd842703          	lw	a4,-40(s0)
8000123c:	fee7e2e3          	bltu	a5,a4,80001220 <pvPortMalloc+0x15c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 4)
80001240:	fe042783          	lw	a5,-32(s0)
80001244:	0007a703          	lw	a4,0(a5)
80001248:	fdc42783          	lw	a5,-36(s0)
8000124c:	00e7a023          	sw	a4,0(a5)
80001250:	fe042783          	lw	a5,-32(s0)
80001254:	fdc42703          	lw	a4,-36(s0)
80001258:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:220
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
8000125c:	800047b7          	lui	a5,0x80004
80001260:	8907a703          	lw	a4,-1904(a5) # 80003890 <__stack_top+0xfffc68b0>
80001264:	fec42783          	lw	a5,-20(s0)
80001268:	0047a783          	lw	a5,4(a5)
8000126c:	40f70733          	sub	a4,a4,a5
80001270:	800047b7          	lui	a5,0x80004
80001274:	88e7a823          	sw	a4,-1904(a5) # 80003890 <__stack_top+0xfffc68b0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:226
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
80001278:	5a5000ef          	jal	ra,8000201c <xTaskResumeAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:230

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
8000127c:	fe442783          	lw	a5,-28(s0)
80001280:	00079463          	bnez	a5,80001288 <pvPortMalloc+0x1c4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:233
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
80001284:	23c020ef          	jal	ra,800034c0 <vApplicationMallocFailedHook>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:238
		}
	}
	#endif

	return pvReturn;
80001288:	fe442783          	lw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:239
}
8000128c:	00078513          	mv	a0,a5
80001290:	03c12083          	lw	ra,60(sp)
80001294:	03812403          	lw	s0,56(sp)
80001298:	04010113          	addi	sp,sp,64
8000129c:	00008067          	ret

800012a0 <vPortFree>:
vPortFree():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:243
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
800012a0:	fd010113          	addi	sp,sp,-48
800012a4:	02112623          	sw	ra,44(sp)
800012a8:	02812423          	sw	s0,40(sp)
800012ac:	03010413          	addi	s0,sp,48
800012b0:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:244
uint8_t *puc = ( uint8_t * ) pv;
800012b4:	fdc42783          	lw	a5,-36(s0)
800012b8:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:247
BlockLink_t *pxLink;

	if( pv != NULL )
800012bc:	fdc42783          	lw	a5,-36(s0)
800012c0:	08078c63          	beqz	a5,80001358 <vPortFree+0xb8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:251
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
800012c4:	00800793          	li	a5,8
800012c8:	40f007b3          	neg	a5,a5
800012cc:	fe842703          	lw	a4,-24(s0)
800012d0:	00f707b3          	add	a5,a4,a5
800012d4:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:255

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
800012d8:	fe842783          	lw	a5,-24(s0)
800012dc:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:257

		vTaskSuspendAll();
800012e0:	515000ef          	jal	ra,80001ff4 <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
800012e4:	fe442783          	lw	a5,-28(s0)
800012e8:	0047a783          	lw	a5,4(a5)
800012ec:	fef42023          	sw	a5,-32(s0)
800012f0:	91418793          	addi	a5,gp,-1772 # 800039a4 <xStart>
800012f4:	fef42623          	sw	a5,-20(s0)
800012f8:	0100006f          	j	80001308 <vPortFree+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 3)
800012fc:	fec42783          	lw	a5,-20(s0)
80001300:	0007a783          	lw	a5,0(a5)
80001304:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 1)
80001308:	fec42783          	lw	a5,-20(s0)
8000130c:	0007a783          	lw	a5,0(a5)
80001310:	0047a783          	lw	a5,4(a5)
80001314:	fe042703          	lw	a4,-32(s0)
80001318:	fee7e2e3          	bltu	a5,a4,800012fc <vPortFree+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 4)
8000131c:	fec42783          	lw	a5,-20(s0)
80001320:	0007a703          	lw	a4,0(a5)
80001324:	fe442783          	lw	a5,-28(s0)
80001328:	00e7a023          	sw	a4,0(a5)
8000132c:	fec42783          	lw	a5,-20(s0)
80001330:	fe442703          	lw	a4,-28(s0)
80001334:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:261 (discriminator 4)
			xFreeBytesRemaining += pxLink->xBlockSize;
80001338:	fe442783          	lw	a5,-28(s0)
8000133c:	0047a703          	lw	a4,4(a5)
80001340:	800047b7          	lui	a5,0x80004
80001344:	8907a783          	lw	a5,-1904(a5) # 80003890 <__stack_top+0xfffc68b0>
80001348:	00f70733          	add	a4,a4,a5
8000134c:	800047b7          	lui	a5,0x80004
80001350:	88e7a823          	sw	a4,-1904(a5) # 80003890 <__stack_top+0xfffc68b0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:264 (discriminator 4)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
80001354:	4c9000ef          	jal	ra,8000201c <xTaskResumeAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:266
	}
}
80001358:	00000013          	nop
8000135c:	02c12083          	lw	ra,44(sp)
80001360:	02812403          	lw	s0,40(sp)
80001364:	03010113          	addi	sp,sp,48
80001368:	00008067          	ret

8000136c <prvHeapInit>:
prvHeapInit():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:282
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
8000136c:	fe010113          	addi	sp,sp,-32
80001370:	00812e23          	sw	s0,28(sp)
80001374:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:287
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
80001378:	800047b7          	lui	a5,0x80004
8000137c:	a0478793          	addi	a5,a5,-1532 # 80003a04 <__stack_top+0xfffc6a24>
80001380:	ffc7f793          	andi	a5,a5,-4
80001384:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:291

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
80001388:	fec42703          	lw	a4,-20(s0)
8000138c:	90e1aa23          	sw	a4,-1772(gp) # 800039a4 <xStart>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:292
	xStart.xBlockSize = ( size_t ) 0;
80001390:	91418793          	addi	a5,gp,-1772 # 800039a4 <xStart>
80001394:	0007a223          	sw	zero,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:295

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
80001398:	91c18793          	addi	a5,gp,-1764 # 800039ac <xEnd>
8000139c:	00019737          	lui	a4,0x19
800013a0:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
800013a4:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:296
	xEnd.pxNextFreeBlock = NULL;
800013a8:	9001ae23          	sw	zero,-1764(gp) # 800039ac <xEnd>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:300

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
800013ac:	fec42783          	lw	a5,-20(s0)
800013b0:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:301
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
800013b4:	fe842783          	lw	a5,-24(s0)
800013b8:	00019737          	lui	a4,0x19
800013bc:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
800013c0:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:302
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
800013c4:	fe842783          	lw	a5,-24(s0)
800013c8:	91c18713          	addi	a4,gp,-1764 # 800039ac <xEnd>
800013cc:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:303
}
800013d0:	00000013          	nop
800013d4:	01c12403          	lw	s0,28(sp)
800013d8:	02010113          	addi	sp,sp,32
800013dc:	00008067          	ret

800013e0 <raise_soft_interrupt>:
raise_soft_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:227
/*==============================================================================
 * The function raise_soft_interrupt() raises a synchronous software interrupt by
 * writing into the MSIP register.
 */
static inline void raise_soft_interrupt()
{
800013e0:	fe010113          	addi	sp,sp,-32
800013e4:	00812e23          	sw	s0,28(sp)
800013e8:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:228
    unsigned long hart_id = read_csr(mhartid);
800013ec:	f14027f3          	csrr	a5,mhartid
800013f0:	fef42623          	sw	a5,-20(s0)
800013f4:	fec42783          	lw	a5,-20(s0)
800013f8:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:231

    /*You need to make sure that the global interrupt is enabled*/
    set_csr(mie, MIP_MSIP);       /*Enable software interrupt bit */
800013fc:	304467f3          	csrrsi	a5,mie,8
80001400:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:232
    PRCI->MSIP[hart_id] = 0x01;   /*raise soft interrupt for hart0*/
80001404:	44000737          	lui	a4,0x44000
80001408:	fe842783          	lw	a5,-24(s0)
8000140c:	00279793          	slli	a5,a5,0x2
80001410:	00f707b3          	add	a5,a4,a5
80001414:	00100713          	li	a4,1
80001418:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:233
}
8000141c:	00000013          	nop
80001420:	01c12403          	lw	s0,28(sp)
80001424:	02010113          	addi	sp,sp,32
80001428:	00008067          	ret

8000142c <vPortEnterCritical>:
vPortEnterCritical():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:132
 * Used to catch tasks that attempt to return from their implementing function.
 */
static void prvTaskExitError( void );

void vPortEnterCritical( void )
{
8000142c:	ff010113          	addi	sp,sp,-16
80001430:	00812623          	sw	s0,12(sp)
80001434:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:133
	portDISABLE_INTERRUPTS();
80001438:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:134
	uxCriticalNesting++;
8000143c:	800047b7          	lui	a5,0x80004
80001440:	8947a783          	lw	a5,-1900(a5) # 80003894 <__stack_top+0xfffc68b4>
80001444:	00178713          	addi	a4,a5,1
80001448:	800047b7          	lui	a5,0x80004
8000144c:	88e7aa23          	sw	a4,-1900(a5) # 80003894 <__stack_top+0xfffc68b4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:135
}
80001450:	00000013          	nop
80001454:	00c12403          	lw	s0,12(sp)
80001458:	01010113          	addi	sp,sp,16
8000145c:	00008067          	ret

80001460 <vPortExitCritical>:
vPortExitCritical():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:139
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
80001460:	ff010113          	addi	sp,sp,-16
80001464:	00812623          	sw	s0,12(sp)
80001468:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:140
	uxCriticalNesting--;
8000146c:	800047b7          	lui	a5,0x80004
80001470:	8947a783          	lw	a5,-1900(a5) # 80003894 <__stack_top+0xfffc68b4>
80001474:	fff78713          	addi	a4,a5,-1
80001478:	800047b7          	lui	a5,0x80004
8000147c:	88e7aa23          	sw	a4,-1900(a5) # 80003894 <__stack_top+0xfffc68b4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:141
	if( uxCriticalNesting == 0 )
80001480:	800047b7          	lui	a5,0x80004
80001484:	8947a783          	lw	a5,-1900(a5) # 80003894 <__stack_top+0xfffc68b4>
80001488:	00079463          	bnez	a5,80001490 <vPortExitCritical+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:143
	{
		portENABLE_INTERRUPTS();
8000148c:	30046073          	csrsi	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:145
	}
}
80001490:	00000013          	nop
80001494:	00c12403          	lw	s0,12(sp)
80001498:	01010113          	addi	sp,sp,16
8000149c:	00008067          	ret

800014a0 <prvSetNextTimerInterrupt>:
prvSetNextTimerInterrupt():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:151
/*-----------------------------------------------------------*/

/* Sets the next timer interrupt
 * Reads previous timer compare register, and adds tickrate */
static void prvSetNextTimerInterrupt(void)
{
800014a0:	fe010113          	addi	sp,sp,-32
800014a4:	00812e23          	sw	s0,28(sp)
800014a8:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:154
	uint64_t time;

	time = mtime->val_low;
800014ac:	80004637          	lui	a2,0x80004
800014b0:	89862603          	lw	a2,-1896(a2) # 80003898 <__stack_top+0xfffc68b8>
800014b4:	00062603          	lw	a2,0(a2)
800014b8:	fec42423          	sw	a2,-24(s0)
800014bc:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:155
	time |= ((uint64_t)mtime->val_high << 32);
800014c0:	80004637          	lui	a2,0x80004
800014c4:	89862603          	lw	a2,-1896(a2) # 80003898 <__stack_top+0xfffc68b8>
800014c8:	00462603          	lw	a2,4(a2)
800014cc:	00060693          	mv	a3,a2
800014d0:	00000713          	li	a4,0
800014d4:	00069813          	slli	a6,a3,0x0
800014d8:	00000793          	li	a5,0
800014dc:	fe842703          	lw	a4,-24(s0)
800014e0:	00f76733          	or	a4,a4,a5
800014e4:	fee42423          	sw	a4,-24(s0)
800014e8:	fec42703          	lw	a4,-20(s0)
800014ec:	010767b3          	or	a5,a4,a6
800014f0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:157

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
800014f4:	fe842683          	lw	a3,-24(s0)
800014f8:	fec42703          	lw	a4,-20(s0)
800014fc:	000145b7          	lui	a1,0x14
80001500:	43858593          	addi	a1,a1,1080 # 14438 <HEAP_SIZE+0x4438>
80001504:	00000613          	li	a2,0
80001508:	00b687b3          	add	a5,a3,a1
8000150c:	00078513          	mv	a0,a5
80001510:	00d53533          	sltu	a0,a0,a3
80001514:	00c70833          	add	a6,a4,a2
80001518:	01050733          	add	a4,a0,a6
8000151c:	00070813          	mv	a6,a4
80001520:	fef42423          	sw	a5,-24(s0)
80001524:	ff042623          	sw	a6,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:159

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
80001528:	800047b7          	lui	a5,0x80004
8000152c:	89c7a783          	lw	a5,-1892(a5) # 8000389c <__stack_top+0xfffc68bc>
80001530:	fe842703          	lw	a4,-24(s0)
80001534:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:160
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
80001538:	fec42783          	lw	a5,-20(s0)
8000153c:	0007d313          	srli	t1,a5,0x0
80001540:	00000393          	li	t2,0
80001544:	800047b7          	lui	a5,0x80004
80001548:	89c7a783          	lw	a5,-1892(a5) # 8000389c <__stack_top+0xfffc68bc>
8000154c:	00030713          	mv	a4,t1
80001550:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:163

	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
80001554:	08000793          	li	a5,128
80001558:	3047a073          	csrs	mie,a5
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:164
}
8000155c:	00000013          	nop
80001560:	01c12403          	lw	s0,28(sp)
80001564:	02010113          	addi	sp,sp,32
80001568:	00008067          	ret

8000156c <vPortSetupTimer>:
vPortSetupTimer():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:169
/*-----------------------------------------------------------*/

/* Sets and enable the timer interrupt */
void vPortSetupTimer(void)
{
8000156c:	fe010113          	addi	sp,sp,-32
80001570:	00812e23          	sw	s0,28(sp)
80001574:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:172
	uint64_t time;

	time = mtime->val_low;
80001578:	80004637          	lui	a2,0x80004
8000157c:	89862603          	lw	a2,-1896(a2) # 80003898 <__stack_top+0xfffc68b8>
80001580:	00062603          	lw	a2,0(a2)
80001584:	fec42423          	sw	a2,-24(s0)
80001588:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:173
	time |= ((uint64_t)mtime->val_high << 32);
8000158c:	80004637          	lui	a2,0x80004
80001590:	89862603          	lw	a2,-1896(a2) # 80003898 <__stack_top+0xfffc68b8>
80001594:	00462603          	lw	a2,4(a2)
80001598:	00060693          	mv	a3,a2
8000159c:	00000713          	li	a4,0
800015a0:	00069813          	slli	a6,a3,0x0
800015a4:	00000793          	li	a5,0
800015a8:	fe842703          	lw	a4,-24(s0)
800015ac:	00f76733          	or	a4,a4,a5
800015b0:	fee42423          	sw	a4,-24(s0)
800015b4:	fec42703          	lw	a4,-20(s0)
800015b8:	010767b3          	or	a5,a4,a6
800015bc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:175

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
800015c0:	fe842683          	lw	a3,-24(s0)
800015c4:	fec42703          	lw	a4,-20(s0)
800015c8:	000145b7          	lui	a1,0x14
800015cc:	43858593          	addi	a1,a1,1080 # 14438 <HEAP_SIZE+0x4438>
800015d0:	00000613          	li	a2,0
800015d4:	00b687b3          	add	a5,a3,a1
800015d8:	00078513          	mv	a0,a5
800015dc:	00d53533          	sltu	a0,a0,a3
800015e0:	00c70833          	add	a6,a4,a2
800015e4:	01050733          	add	a4,a0,a6
800015e8:	00070813          	mv	a6,a4
800015ec:	fef42423          	sw	a5,-24(s0)
800015f0:	ff042623          	sw	a6,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:177

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
800015f4:	800047b7          	lui	a5,0x80004
800015f8:	89c7a783          	lw	a5,-1892(a5) # 8000389c <__stack_top+0xfffc68bc>
800015fc:	fe842703          	lw	a4,-24(s0)
80001600:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:178
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
80001604:	fec42783          	lw	a5,-20(s0)
80001608:	0007d313          	srli	t1,a5,0x0
8000160c:	00000393          	li	t2,0
80001610:	800047b7          	lui	a5,0x80004
80001614:	89c7a783          	lw	a5,-1892(a5) # 8000389c <__stack_top+0xfffc68bc>
80001618:	00030713          	mv	a4,t1
8000161c:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:182


	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
80001620:	08000793          	li	a5,128
80001624:	3047a073          	csrs	mie,a5
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:183
}
80001628:	00000013          	nop
8000162c:	01c12403          	lw	s0,28(sp)
80001630:	02010113          	addi	sp,sp,32
80001634:	00008067          	ret

80001638 <prvTaskExitError>:
prvTaskExitError():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:187
/*-----------------------------------------------------------*/

void prvTaskExitError( void )
{
80001638:	ff010113          	addi	sp,sp,-16
8000163c:	00812623          	sw	s0,12(sp)
80001640:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
80001644:	800047b7          	lui	a5,0x80004
80001648:	8947a703          	lw	a4,-1900(a5) # 80003894 <__stack_top+0xfffc68b4>
8000164c:	fff00793          	li	a5,-1
80001650:	00f70663          	beq	a4,a5,8000165c <prvTaskExitError+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194 (discriminator 1)
80001654:	30047073          	csrci	mstatus,8
80001658:	0000006f          	j	80001658 <prvTaskExitError+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:195
	portDISABLE_INTERRUPTS();
8000165c:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:196 (discriminator 2)
	for( ;; );
80001660:	0000006f          	j	80001660 <prvTaskExitError+0x28>

80001664 <pxPortInitialiseStack>:
pxPortInitialiseStack():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:220

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
80001664:	fe010113          	addi	sp,sp,-32
80001668:	00812e23          	sw	s0,28(sp)
8000166c:	02010413          	addi	s0,sp,32
80001670:	fea42623          	sw	a0,-20(s0)
80001674:	feb42423          	sw	a1,-24(s0)
80001678:	fec42223          	sw	a2,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:224
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	register int *tp asm("x3");
	pxTopOfStack--;
8000167c:	fec42783          	lw	a5,-20(s0)
80001680:	ffc78793          	addi	a5,a5,-4
80001684:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:225
	*pxTopOfStack = (portSTACK_TYPE)pxCode;			/* Start address */
80001688:	fe842703          	lw	a4,-24(s0)
8000168c:	fec42783          	lw	a5,-20(s0)
80001690:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:226
	pxTopOfStack -= 22;
80001694:	fec42783          	lw	a5,-20(s0)
80001698:	fa878793          	addi	a5,a5,-88
8000169c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:227
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;	/* Register a0 */
800016a0:	fe442703          	lw	a4,-28(s0)
800016a4:	fec42783          	lw	a5,-20(s0)
800016a8:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:228
	pxTopOfStack -= 6;
800016ac:	fec42783          	lw	a5,-20(s0)
800016b0:	fe878793          	addi	a5,a5,-24
800016b4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:229
	*pxTopOfStack = (portSTACK_TYPE)tp; /* Register thread pointer */
800016b8:	00018793          	mv	a5,gp
800016bc:	00078713          	mv	a4,a5
800016c0:	fec42783          	lw	a5,-20(s0)
800016c4:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:230
	pxTopOfStack -= 3;
800016c8:	fec42783          	lw	a5,-20(s0)
800016cc:	ff478793          	addi	a5,a5,-12
800016d0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:231
	*pxTopOfStack = (portSTACK_TYPE)prvTaskExitError; /* Register ra */
800016d4:	800017b7          	lui	a5,0x80001
800016d8:	63878713          	addi	a4,a5,1592 # 80001638 <__stack_top+0xfffc4658>
800016dc:	fec42783          	lw	a5,-20(s0)
800016e0:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:233

	return pxTopOfStack;
800016e4:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:234
}
800016e8:	00078513          	mv	a0,a5
800016ec:	01c12403          	lw	s0,28(sp)
800016f0:	02010113          	addi	sp,sp,32
800016f4:	00008067          	ret

800016f8 <SysTick_Handler>:
SysTick_Handler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:238
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void )
{
800016f8:	ff010113          	addi	sp,sp,-16
800016fc:	00112623          	sw	ra,12(sp)
80001700:	00812423          	sw	s0,8(sp)
80001704:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:241
	/*Save Context*/
	{
		__asm volatile("lw	t0, pxCurrentTCB");
80001708:	92c1a283          	lw	t0,-1748(gp) # 800039bc <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:242
		__asm volatile("sw	a2, 0x0(t0)");
8000170c:	00c2a023          	sw	a2,0(t0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:246
	}

	/* Increment the RTOS tick. */
	prvSetNextTimerInterrupt();
80001710:	d91ff0ef          	jal	ra,800014a0 <prvSetNextTimerInterrupt>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:249

	/*Switch task */
	if( xTaskIncrementTick() != pdFALSE )
80001714:	269000ef          	jal	ra,8000217c <xTaskIncrementTick>
80001718:	00050793          	mv	a5,a0
8000171c:	00078463          	beqz	a5,80001724 <SysTick_Handler+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:251
	{
		vTaskSwitchContext();
80001720:	449000ef          	jal	ra,80002368 <vTaskSwitchContext>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:256
	}

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
80001724:	92c1a103          	lw	sp,-1748(gp) # 800039bc <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:257
		__asm volatile("lw	sp, 0x0(sp)");
80001728:	00012103          	lw	sp,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:259

		__asm volatile("lw	t0, 31 * 4(sp)");
8000172c:	07c12283          	lw	t0,124(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:260
		__asm volatile("csrw	mepc, t0");
80001730:	34129073          	csrw	mepc,t0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:262

		__asm volatile("lw	x1, 0x0(sp)");
80001734:	00012083          	lw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:263
		__asm volatile("lw   x4, 3 * 4(sp)");
80001738:	00c12203          	lw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:264
		__asm volatile("lw   x5, 4 * 4(sp)");
8000173c:	01012283          	lw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:265
		__asm volatile("lw   x6, 5 * 4(sp)");
80001740:	01412303          	lw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:266
		__asm volatile("lw   x7, 6 * 4(sp)");
80001744:	01812383          	lw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:267
		__asm volatile("lw   x8, 7 * 4(sp)");
80001748:	01c12403          	lw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:268
		__asm volatile("lw   x9, 8 * 4(sp)");
8000174c:	02012483          	lw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:269
		__asm volatile("lw   x10, 9 * 4(sp)");
80001750:	02412503          	lw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:270
		__asm volatile("lw   x11, 10 * 4(sp)");
80001754:	02812583          	lw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:271
		__asm volatile("lw   x12, 11 * 4(sp)");
80001758:	02c12603          	lw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:272
		__asm volatile("lw   x13, 12 * 4(sp)");
8000175c:	03012683          	lw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:273
		__asm volatile("lw   x14, 13 * 4(sp)");
80001760:	03412703          	lw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:274
		__asm volatile("lw   x15, 14 * 4(sp)");
80001764:	03812783          	lw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:275
		__asm volatile("lw   x16, 15 * 4(sp)");
80001768:	03c12803          	lw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:276
		__asm volatile("lw   x17, 16 * 4(sp)");
8000176c:	04012883          	lw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:277
		__asm volatile("lw   x18, 17 * 4(sp)");
80001770:	04412903          	lw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:278
		__asm volatile("lw   x19, 18 * 4(sp)");
80001774:	04812983          	lw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:279
		__asm volatile("lw   x20, 19 * 4(sp)");
80001778:	04c12a03          	lw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:280
		__asm volatile("lw   x21, 20 * 4(sp)");
8000177c:	05012a83          	lw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:281
		__asm volatile("lw   x22, 21 * 4(sp)");
80001780:	05412b03          	lw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:282
		__asm volatile("lw   x23, 22 * 4(sp)");
80001784:	05812b83          	lw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:283
		__asm volatile("lw   x24, 23 * 4(sp)");
80001788:	05c12c03          	lw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:284
		__asm volatile("lw   x25, 24 * 4(sp)");
8000178c:	06012c83          	lw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:285
		__asm volatile("lw   x26, 25 * 4(sp)");
80001790:	06412d03          	lw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:286
		__asm volatile("lw   x27, 26 * 4(sp)");
80001794:	06812d83          	lw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:287
		__asm volatile("lw   x28, 27 * 4(sp)");
80001798:	06c12e03          	lw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:288
		__asm volatile("lw   x29, 28 * 4(sp)");
8000179c:	07012e83          	lw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:289
		__asm volatile("lw   x30, 29 * 4(sp)");
800017a0:	07412f03          	lw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:290
		__asm volatile("lw   x31, 30 * 4(sp)");
800017a4:	07812f83          	lw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:292

		__asm volatile("addi	sp, sp, 4 * 32");
800017a8:	08010113          	addi	sp,sp,128
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:294

		__asm volatile("mret");
800017ac:	30200073          	mret
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:296
	}
}
800017b0:	00000013          	nop
800017b4:	00c12083          	lw	ra,12(sp)
800017b8:	00812403          	lw	s0,8(sp)
800017bc:	01010113          	addi	sp,sp,16
800017c0:	00008067          	ret

800017c4 <xPortStartScheduler>:
xPortStartScheduler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:299
uint32_t g_startscheduler = 0;
BaseType_t xPortStartScheduler( void )
{
800017c4:	ff010113          	addi	sp,sp,-16
800017c8:	00112623          	sw	ra,12(sp)
800017cc:	00812423          	sw	s0,8(sp)
800017d0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:300
	vPortSetupTimer();
800017d4:	d99ff0ef          	jal	ra,8000156c <vPortSetupTimer>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:301
	uxCriticalNesting = 0;
800017d8:	800047b7          	lui	a5,0x80004
800017dc:	8807aa23          	sw	zero,-1900(a5) # 80003894 <__stack_top+0xfffc68b4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:302
	g_startscheduler = 1;
800017e0:	00100713          	li	a4,1
800017e4:	92e1a423          	sw	a4,-1752(gp) # 800039b8 <g_startscheduler>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:303
	__enable_irq();
800017e8:	b99fe0ef          	jal	ra,80000380 <__enable_irq>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:305

	raise_soft_interrupt();
800017ec:	bf5ff0ef          	jal	ra,800013e0 <raise_soft_interrupt>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:308

	/*Should not get here*/
	return pdFALSE;
800017f0:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:309
}
800017f4:	00078513          	mv	a0,a5
800017f8:	00c12083          	lw	ra,12(sp)
800017fc:	00812403          	lw	s0,8(sp)
80001800:	01010113          	addi	sp,sp,16
80001804:	00008067          	ret

80001808 <Software_IRQHandler>:
Software_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:312

void Software_IRQHandler(void)
{
80001808:	ff010113          	addi	sp,sp,-16
8000180c:	00112623          	sw	ra,12(sp)
80001810:	00812423          	sw	s0,8(sp)
80001814:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:313
	if(1 == g_startscheduler)
80001818:	9281a703          	lw	a4,-1752(gp) # 800039b8 <g_startscheduler>
8000181c:	00100793          	li	a5,1
80001820:	00f71863          	bne	a4,a5,80001830 <Software_IRQHandler+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:315
	{
		g_startscheduler = 2; //skip the save n switch context first time when scheduler is starting.
80001824:	00200713          	li	a4,2
80001828:	92e1a423          	sw	a4,-1752(gp) # 800039b8 <g_startscheduler>
8000182c:	0100006f          	j	8000183c <Software_IRQHandler+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:321
	}
	else
	{
		/*Save Context*/
		{
			__asm volatile("lw	t0, pxCurrentTCB");
80001830:	92c1a283          	lw	t0,-1748(gp) # 800039bc <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:322
			__asm volatile("sw	a2, 0x0(t0)");
80001834:	00c2a023          	sw	a2,0(t0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:325
		}

		vTaskSwitchContext();
80001838:	331000ef          	jal	ra,80002368 <vTaskSwitchContext>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:329
	}

	// Moved by Imperas (was previously causing corruption of a5)
	PRCI->MSIP[0] = 0x00;
8000183c:	440007b7          	lui	a5,0x44000
80001840:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:333

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
80001844:	92c1a103          	lw	sp,-1748(gp) # 800039bc <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:334
		__asm volatile("lw	sp, 0x0(sp)");
80001848:	00012103          	lw	sp,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:336

		__asm volatile("lw	t0, 31 * 4(sp)");
8000184c:	07c12283          	lw	t0,124(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:337
		__asm volatile("csrw	mepc, t0");
80001850:	34129073          	csrw	mepc,t0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:339

		__asm volatile("lw	x1, 0x0(sp)");
80001854:	00012083          	lw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:340
		__asm volatile("lw   x4, 3 * 4(sp)");
80001858:	00c12203          	lw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:341
		__asm volatile("lw   x5, 4 * 4(sp)");
8000185c:	01012283          	lw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:342
		__asm volatile("lw   x6, 5 * 4(sp)");
80001860:	01412303          	lw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:343
		__asm volatile("lw   x7, 6 * 4(sp)");
80001864:	01812383          	lw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:344
		__asm volatile("lw   x8, 7 * 4(sp)");
80001868:	01c12403          	lw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:345
		__asm volatile("lw   x9, 8 * 4(sp)");
8000186c:	02012483          	lw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:346
		__asm volatile("lw   x10, 9 * 4(sp)");
80001870:	02412503          	lw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:347
		__asm volatile("lw   x11, 10 * 4(sp)");
80001874:	02812583          	lw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:348
		__asm volatile("lw   x12, 11 * 4(sp)");
80001878:	02c12603          	lw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:349
		__asm volatile("lw   x13, 12 * 4(sp)");
8000187c:	03012683          	lw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:350
		__asm volatile("lw   x14, 13 * 4(sp)");
80001880:	03412703          	lw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:351
		__asm volatile("lw   x15, 14 * 4(sp)");
80001884:	03812783          	lw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:352
		__asm volatile("lw   x16, 15 * 4(sp)");
80001888:	03c12803          	lw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:353
		__asm volatile("lw   x17, 16 * 4(sp)");
8000188c:	04012883          	lw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:354
		__asm volatile("lw   x18, 17 * 4(sp)");
80001890:	04412903          	lw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:355
		__asm volatile("lw   x19, 18 * 4(sp)");
80001894:	04812983          	lw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:356
		__asm volatile("lw   x20, 19 * 4(sp)");
80001898:	04c12a03          	lw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:357
		__asm volatile("lw   x21, 20 * 4(sp)");
8000189c:	05012a83          	lw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:358
		__asm volatile("lw   x22, 21 * 4(sp)");
800018a0:	05412b03          	lw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:359
		__asm volatile("lw   x23, 22 * 4(sp)");
800018a4:	05812b83          	lw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:360
		__asm volatile("lw   x24, 23 * 4(sp)");
800018a8:	05c12c03          	lw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:361
		__asm volatile("lw   x25, 24 * 4(sp)");
800018ac:	06012c83          	lw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:362
		__asm volatile("lw   x26, 25 * 4(sp)");
800018b0:	06412d03          	lw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:363
		__asm volatile("lw   x27, 26 * 4(sp)");
800018b4:	06812d83          	lw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:364
		__asm volatile("lw   x28, 27 * 4(sp)");
800018b8:	06c12e03          	lw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:365
		__asm volatile("lw   x29, 28 * 4(sp)");
800018bc:	07012e83          	lw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:366
		__asm volatile("lw   x30, 29 * 4(sp)");
800018c0:	07412f03          	lw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:367
		__asm volatile("lw   x31, 30 * 4(sp)");
800018c4:	07812f83          	lw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:369

		__asm volatile("addi	sp, sp, 4 * 32");
800018c8:	08010113          	addi	sp,sp,128
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:374

	    // Moved by Imperas (causing corruption of a5 at this position)
		//PRCI->MSIP[0] = 0x00;

		__asm volatile("mret");
800018cc:	30200073          	mret
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:376
	}
}
800018d0:	00000013          	nop
800018d4:	00c12083          	lw	ra,12(sp)
800018d8:	00812403          	lw	s0,8(sp)
800018dc:	01010113          	addi	sp,sp,16
800018e0:	00008067          	ret

800018e4 <vPortYield>:
vPortYield():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:379

void vPortYield( void )
{
800018e4:	ff010113          	addi	sp,sp,-16
800018e8:	00112623          	sw	ra,12(sp)
800018ec:	00812423          	sw	s0,8(sp)
800018f0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:380
	raise_soft_interrupt();
800018f4:	aedff0ef          	jal	ra,800013e0 <raise_soft_interrupt>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:381
}
800018f8:	00000013          	nop
800018fc:	00c12083          	lw	ra,12(sp)
80001900:	00812403          	lw	s0,8(sp)
80001904:	01010113          	addi	sp,sp,16
80001908:	00008067          	ret

8000190c <vListInitialise>:
vListInitialise():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:80
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
8000190c:	fe010113          	addi	sp,sp,-32
80001910:	00812e23          	sw	s0,28(sp)
80001914:	02010413          	addi	s0,sp,32
80001918:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:84
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
8000191c:	fec42783          	lw	a5,-20(s0)
80001920:	00878713          	addi	a4,a5,8
80001924:	fec42783          	lw	a5,-20(s0)
80001928:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:88

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
8000192c:	fec42783          	lw	a5,-20(s0)
80001930:	fff00713          	li	a4,-1
80001934:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:92

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001938:	fec42783          	lw	a5,-20(s0)
8000193c:	00878713          	addi	a4,a5,8
80001940:	fec42783          	lw	a5,-20(s0)
80001944:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:93
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001948:	fec42783          	lw	a5,-20(s0)
8000194c:	00878713          	addi	a4,a5,8
80001950:	fec42783          	lw	a5,-20(s0)
80001954:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:95

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
80001958:	fec42783          	lw	a5,-20(s0)
8000195c:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:101

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
80001960:	00000013          	nop
80001964:	01c12403          	lw	s0,28(sp)
80001968:	02010113          	addi	sp,sp,32
8000196c:	00008067          	ret

80001970 <vListInitialiseItem>:
vListInitialiseItem():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:105
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
80001970:	fe010113          	addi	sp,sp,-32
80001974:	00812e23          	sw	s0,28(sp)
80001978:	02010413          	addi	s0,sp,32
8000197c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:107
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80001980:	fec42783          	lw	a5,-20(s0)
80001984:	0007a823          	sw	zero,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:113

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
80001988:	00000013          	nop
8000198c:	01c12403          	lw	s0,28(sp)
80001990:	02010113          	addi	sp,sp,32
80001994:	00008067          	ret

80001998 <vListInsertEnd>:
vListInsertEnd():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:117
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001998:	fd010113          	addi	sp,sp,-48
8000199c:	02812623          	sw	s0,44(sp)
800019a0:	03010413          	addi	s0,sp,48
800019a4:	fca42e23          	sw	a0,-36(s0)
800019a8:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:118
ListItem_t * const pxIndex = pxList->pxIndex;
800019ac:	fdc42783          	lw	a5,-36(s0)
800019b0:	0047a783          	lw	a5,4(a5)
800019b4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:129
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
800019b8:	fd842783          	lw	a5,-40(s0)
800019bc:	fec42703          	lw	a4,-20(s0)
800019c0:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:130
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
800019c4:	fec42783          	lw	a5,-20(s0)
800019c8:	0087a703          	lw	a4,8(a5)
800019cc:	fd842783          	lw	a5,-40(s0)
800019d0:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:135

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
800019d4:	fec42783          	lw	a5,-20(s0)
800019d8:	0087a783          	lw	a5,8(a5)
800019dc:	fd842703          	lw	a4,-40(s0)
800019e0:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:136
	pxIndex->pxPrevious = pxNewListItem;
800019e4:	fec42783          	lw	a5,-20(s0)
800019e8:	fd842703          	lw	a4,-40(s0)
800019ec:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:139

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
800019f0:	fd842783          	lw	a5,-40(s0)
800019f4:	fdc42703          	lw	a4,-36(s0)
800019f8:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:141

	( pxList->uxNumberOfItems )++;
800019fc:	fdc42783          	lw	a5,-36(s0)
80001a00:	0007a783          	lw	a5,0(a5)
80001a04:	00178713          	addi	a4,a5,1
80001a08:	fdc42783          	lw	a5,-36(s0)
80001a0c:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:142
}
80001a10:	00000013          	nop
80001a14:	02c12403          	lw	s0,44(sp)
80001a18:	03010113          	addi	sp,sp,48
80001a1c:	00008067          	ret

80001a20 <vListInsert>:
vListInsert():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:146
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001a20:	fd010113          	addi	sp,sp,-48
80001a24:	02812623          	sw	s0,44(sp)
80001a28:	03010413          	addi	s0,sp,48
80001a2c:	fca42e23          	sw	a0,-36(s0)
80001a30:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:148
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
80001a34:	fd842783          	lw	a5,-40(s0)
80001a38:	0007a783          	lw	a5,0(a5)
80001a3c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:164
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
80001a40:	fe842703          	lw	a4,-24(s0)
80001a44:	fff00793          	li	a5,-1
80001a48:	00f71a63          	bne	a4,a5,80001a5c <vListInsert+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:166
	{
		pxIterator = pxList->xListEnd.pxPrevious;
80001a4c:	fdc42783          	lw	a5,-36(s0)
80001a50:	0107a783          	lw	a5,16(a5)
80001a54:	fef42623          	sw	a5,-20(s0)
80001a58:	0340006f          	j	80001a8c <vListInsert+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:192
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001a5c:	fdc42783          	lw	a5,-36(s0)
80001a60:	00878793          	addi	a5,a5,8
80001a64:	fef42623          	sw	a5,-20(s0)
80001a68:	0100006f          	j	80001a78 <vListInsert+0x58>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 3)
80001a6c:	fec42783          	lw	a5,-20(s0)
80001a70:	0047a783          	lw	a5,4(a5)
80001a74:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 1)
80001a78:	fec42783          	lw	a5,-20(s0)
80001a7c:	0047a783          	lw	a5,4(a5)
80001a80:	0007a783          	lw	a5,0(a5)
80001a84:	fe842703          	lw	a4,-24(s0)
80001a88:	fef772e3          	bleu	a5,a4,80001a6c <vListInsert+0x4c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:199
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
80001a8c:	fec42783          	lw	a5,-20(s0)
80001a90:	0047a703          	lw	a4,4(a5)
80001a94:	fd842783          	lw	a5,-40(s0)
80001a98:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:200
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
80001a9c:	fd842783          	lw	a5,-40(s0)
80001aa0:	0047a783          	lw	a5,4(a5)
80001aa4:	fd842703          	lw	a4,-40(s0)
80001aa8:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:201
	pxNewListItem->pxPrevious = pxIterator;
80001aac:	fd842783          	lw	a5,-40(s0)
80001ab0:	fec42703          	lw	a4,-20(s0)
80001ab4:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:202
	pxIterator->pxNext = pxNewListItem;
80001ab8:	fec42783          	lw	a5,-20(s0)
80001abc:	fd842703          	lw	a4,-40(s0)
80001ac0:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:206

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001ac4:	fd842783          	lw	a5,-40(s0)
80001ac8:	fdc42703          	lw	a4,-36(s0)
80001acc:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:208

	( pxList->uxNumberOfItems )++;
80001ad0:	fdc42783          	lw	a5,-36(s0)
80001ad4:	0007a783          	lw	a5,0(a5)
80001ad8:	00178713          	addi	a4,a5,1
80001adc:	fdc42783          	lw	a5,-36(s0)
80001ae0:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:209
}
80001ae4:	00000013          	nop
80001ae8:	02c12403          	lw	s0,44(sp)
80001aec:	03010113          	addi	sp,sp,48
80001af0:	00008067          	ret

80001af4 <uxListRemove>:
uxListRemove():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:213
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
80001af4:	fd010113          	addi	sp,sp,-48
80001af8:	02812623          	sw	s0,44(sp)
80001afc:	03010413          	addi	s0,sp,48
80001b00:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:216
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
80001b04:	fdc42783          	lw	a5,-36(s0)
80001b08:	0107a783          	lw	a5,16(a5)
80001b0c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:218

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
80001b10:	fdc42783          	lw	a5,-36(s0)
80001b14:	0047a783          	lw	a5,4(a5)
80001b18:	fdc42703          	lw	a4,-36(s0)
80001b1c:	00872703          	lw	a4,8(a4) # 44000008 <RAM_SIZE+0x43f80008>
80001b20:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:219
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
80001b24:	fdc42783          	lw	a5,-36(s0)
80001b28:	0087a783          	lw	a5,8(a5)
80001b2c:	fdc42703          	lw	a4,-36(s0)
80001b30:	00472703          	lw	a4,4(a4)
80001b34:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:225

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
80001b38:	fec42783          	lw	a5,-20(s0)
80001b3c:	0047a783          	lw	a5,4(a5)
80001b40:	fdc42703          	lw	a4,-36(s0)
80001b44:	00f71a63          	bne	a4,a5,80001b58 <uxListRemove+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:227
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
80001b48:	fdc42783          	lw	a5,-36(s0)
80001b4c:	0087a703          	lw	a4,8(a5)
80001b50:	fec42783          	lw	a5,-20(s0)
80001b54:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:234
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
80001b58:	fdc42783          	lw	a5,-36(s0)
80001b5c:	0007a823          	sw	zero,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:235
	( pxList->uxNumberOfItems )--;
80001b60:	fec42783          	lw	a5,-20(s0)
80001b64:	0007a783          	lw	a5,0(a5)
80001b68:	fff78713          	addi	a4,a5,-1
80001b6c:	fec42783          	lw	a5,-20(s0)
80001b70:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:237

	return pxList->uxNumberOfItems;
80001b74:	fec42783          	lw	a5,-20(s0)
80001b78:	0007a783          	lw	a5,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:238
}
80001b7c:	00078513          	mv	a0,a5
80001b80:	02c12403          	lw	s0,44(sp)
80001b84:	03010113          	addi	sp,sp,48
80001b88:	00008067          	ret

80001b8c <memset>:
memset():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:25

  return dest;
}

void* memset(void* dest, int byte, size_t len)
{
80001b8c:	fd010113          	addi	sp,sp,-48
80001b90:	02812623          	sw	s0,44(sp)
80001b94:	03010413          	addi	s0,sp,48
80001b98:	fca42e23          	sw	a0,-36(s0)
80001b9c:	fcb42c23          	sw	a1,-40(s0)
80001ba0:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:26
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
80001ba4:	fdc42703          	lw	a4,-36(s0)
80001ba8:	fd442783          	lw	a5,-44(s0)
80001bac:	00f767b3          	or	a5,a4,a5
80001bb0:	0037f793          	andi	a5,a5,3
80001bb4:	06079863          	bnez	a5,80001c24 <memset+0x98>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:27
    uintptr_t word = byte & 0xFF;
80001bb8:	fd842783          	lw	a5,-40(s0)
80001bbc:	0ff7f793          	andi	a5,a5,255
80001bc0:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:28
    word |= word << 8;
80001bc4:	fe442783          	lw	a5,-28(s0)
80001bc8:	00879793          	slli	a5,a5,0x8
80001bcc:	fe442703          	lw	a4,-28(s0)
80001bd0:	00f767b3          	or	a5,a4,a5
80001bd4:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:29
    word |= word << 16;
80001bd8:	fe442783          	lw	a5,-28(s0)
80001bdc:	01079793          	slli	a5,a5,0x10
80001be0:	fe442703          	lw	a4,-28(s0)
80001be4:	00f767b3          	or	a5,a4,a5
80001be8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:32
    word |= word << 16 << 16;

    uintptr_t *d = dest;
80001bec:	fdc42783          	lw	a5,-36(s0)
80001bf0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001bf4:	0180006f          	j	80001c0c <memset+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:34
      *d++ = word;
80001bf8:	fec42783          	lw	a5,-20(s0)
80001bfc:	00478713          	addi	a4,a5,4
80001c00:	fee42623          	sw	a4,-20(s0)
80001c04:	fe442703          	lw	a4,-28(s0)
80001c08:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001c0c:	fdc42703          	lw	a4,-36(s0)
80001c10:	fd442783          	lw	a5,-44(s0)
80001c14:	00f707b3          	add	a5,a4,a5
80001c18:	fec42703          	lw	a4,-20(s0)
80001c1c:	fcf76ee3          	bltu	a4,a5,80001bf8 <memset+0x6c>
80001c20:	0400006f          	j	80001c60 <memset+0xd4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:36
  } else {
    char *d = dest;
80001c24:	fdc42783          	lw	a5,-36(s0)
80001c28:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001c2c:	0200006f          	j	80001c4c <memset+0xc0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:38
      *d++ = byte;
80001c30:	fe842783          	lw	a5,-24(s0)
80001c34:	00178713          	addi	a4,a5,1
80001c38:	fee42423          	sw	a4,-24(s0)
80001c3c:	fd842703          	lw	a4,-40(s0)
80001c40:	01871713          	slli	a4,a4,0x18
80001c44:	41875713          	srai	a4,a4,0x18
80001c48:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001c4c:	fdc42703          	lw	a4,-36(s0)
80001c50:	fd442783          	lw	a5,-44(s0)
80001c54:	00f707b3          	add	a5,a4,a5
80001c58:	fe842703          	lw	a4,-24(s0)
80001c5c:	fcf76ae3          	bltu	a4,a5,80001c30 <memset+0xa4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:40
  }
  return dest;
80001c60:	fdc42783          	lw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:41
}
80001c64:	00078513          	mv	a0,a5
80001c68:	02c12403          	lw	s0,44(sp)
80001c6c:	03010113          	addi	sp,sp,48
80001c70:	00008067          	ret

80001c74 <strlen>:
strlen():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:44

size_t strlen(const char *s)
{
80001c74:	fd010113          	addi	sp,sp,-48
80001c78:	02812623          	sw	s0,44(sp)
80001c7c:	03010413          	addi	s0,sp,48
80001c80:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:45
  const char *p = s;
80001c84:	fdc42783          	lw	a5,-36(s0)
80001c88:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001c8c:	0100006f          	j	80001c9c <strlen+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:47
    p++;
80001c90:	fec42783          	lw	a5,-20(s0)
80001c94:	00178793          	addi	a5,a5,1
80001c98:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001c9c:	fec42783          	lw	a5,-20(s0)
80001ca0:	00078783          	lb	a5,0(a5)
80001ca4:	fe0796e3          	bnez	a5,80001c90 <strlen+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:48
  return p - s;
80001ca8:	fec42703          	lw	a4,-20(s0)
80001cac:	fdc42783          	lw	a5,-36(s0)
80001cb0:	40f707b3          	sub	a5,a4,a5
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:49
}
80001cb4:	00078513          	mv	a0,a5
80001cb8:	02c12403          	lw	s0,44(sp)
80001cbc:	03010113          	addi	sp,sp,48
80001cc0:	00008067          	ret

80001cc4 <xTaskGenericCreate>:
xTaskGenericCreate():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:551

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80001cc4:	fc010113          	addi	sp,sp,-64
80001cc8:	02112e23          	sw	ra,60(sp)
80001ccc:	02812c23          	sw	s0,56(sp)
80001cd0:	04010413          	addi	s0,sp,64
80001cd4:	fca42e23          	sw	a0,-36(s0)
80001cd8:	fcb42c23          	sw	a1,-40(s0)
80001cdc:	fcd42823          	sw	a3,-48(s0)
80001ce0:	fce42623          	sw	a4,-52(s0)
80001ce4:	fcf42423          	sw	a5,-56(s0)
80001ce8:	fd042223          	sw	a6,-60(s0)
80001cec:	fd142023          	sw	a7,-64(s0)
80001cf0:	00060793          	mv	a5,a2
80001cf4:	fcf41b23          	sh	a5,-42(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:556
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
80001cf8:	fdc42783          	lw	a5,-36(s0)
80001cfc:	00079663          	bnez	a5,80001d08 <xTaskGenericCreate+0x44>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:556 (discriminator 1)
80001d00:	30047073          	csrci	mstatus,8
80001d04:	0000006f          	j	80001d04 <xTaskGenericCreate+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:557
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
80001d08:	fcc42703          	lw	a4,-52(s0)
80001d0c:	00400793          	li	a5,4
80001d10:	00e7f663          	bleu	a4,a5,80001d1c <xTaskGenericCreate+0x58>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 1)
80001d14:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 2)
80001d18:	0000006f          	j	80001d18 <xTaskGenericCreate+0x54>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:561

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
80001d1c:	fd645783          	lhu	a5,-42(s0)
80001d20:	fc442583          	lw	a1,-60(s0)
80001d24:	00078513          	mv	a0,a5
80001d28:	281000ef          	jal	ra,800027a8 <prvAllocateTCBAndStack>
80001d2c:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:562
	if( pxNewTCB != NULL )
80001d30:	fe842783          	lw	a5,-24(s0)
80001d34:	16078263          	beqz	a5,80001e98 <xTaskGenericCreate+0x1d4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:598
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
80001d38:	fe842783          	lw	a5,-24(s0)
80001d3c:	0307a703          	lw	a4,48(a5)
80001d40:	fd645683          	lhu	a3,-42(s0)
80001d44:	400007b7          	lui	a5,0x40000
80001d48:	fff78793          	addi	a5,a5,-1 # 3fffffff <RAM_SIZE+0x3ff7ffff>
80001d4c:	00f687b3          	add	a5,a3,a5
80001d50:	00279793          	slli	a5,a5,0x2
80001d54:	00f707b3          	add	a5,a4,a5
80001d58:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:599
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
80001d5c:	fe442783          	lw	a5,-28(s0)
80001d60:	ffc7f793          	andi	a5,a5,-4
80001d64:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:602

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
80001d68:	fe442783          	lw	a5,-28(s0)
80001d6c:	0037f793          	andi	a5,a5,3
80001d70:	00078663          	beqz	a5,80001d7c <xTaskGenericCreate+0xb8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 1)
80001d74:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 3)
80001d78:	0000006f          	j	80001d78 <xTaskGenericCreate+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:619
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
80001d7c:	fd645783          	lhu	a5,-42(s0)
80001d80:	00078713          	mv	a4,a5
80001d84:	fc042683          	lw	a3,-64(s0)
80001d88:	fcc42603          	lw	a2,-52(s0)
80001d8c:	fd842583          	lw	a1,-40(s0)
80001d90:	fe842503          	lw	a0,-24(s0)
80001d94:	6f4000ef          	jal	ra,80002488 <prvInitialiseTCBVariables>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:631
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
80001d98:	fd042603          	lw	a2,-48(s0)
80001d9c:	fdc42583          	lw	a1,-36(s0)
80001da0:	fe442503          	lw	a0,-28(s0)
80001da4:	8c1ff0ef          	jal	ra,80001664 <pxPortInitialiseStack>
80001da8:	00050713          	mv	a4,a0
80001dac:	fe842783          	lw	a5,-24(s0)
80001db0:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:635
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
80001db4:	fc842783          	lw	a5,-56(s0)
80001db8:	00078863          	beqz	a5,80001dc8 <xTaskGenericCreate+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:640
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
80001dbc:	fc842783          	lw	a5,-56(s0)
80001dc0:	fe842703          	lw	a4,-24(s0)
80001dc4:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:649
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
80001dc8:	e64ff0ef          	jal	ra,8000142c <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:651
		{
			uxCurrentNumberOfTasks++;
80001dcc:	93c1a783          	lw	a5,-1732(gp) # 800039cc <uxCurrentNumberOfTasks>
80001dd0:	00178713          	addi	a4,a5,1
80001dd4:	92e1ae23          	sw	a4,-1732(gp) # 800039cc <uxCurrentNumberOfTasks>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:652
			if( pxCurrentTCB == NULL )
80001dd8:	92c1a783          	lw	a5,-1748(gp) # 800039bc <pxCurrentTCB>
80001ddc:	02079063          	bnez	a5,80001dfc <xTaskGenericCreate+0x138>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:656
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
80001de0:	fe842703          	lw	a4,-24(s0)
80001de4:	92e1a623          	sw	a4,-1748(gp) # 800039bc <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:658

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
80001de8:	93c1a703          	lw	a4,-1732(gp) # 800039cc <uxCurrentNumberOfTasks>
80001dec:	00100793          	li	a5,1
80001df0:	02f71663          	bne	a4,a5,80001e1c <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:663
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
80001df4:	7cc000ef          	jal	ra,800025c0 <prvInitialiseTaskLists>
80001df8:	0240006f          	j	80001e1c <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:675
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
80001dfc:	9481a783          	lw	a5,-1720(gp) # 800039d8 <xSchedulerRunning>
80001e00:	00079e63          	bnez	a5,80001e1c <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:677
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
80001e04:	92c1a783          	lw	a5,-1748(gp) # 800039bc <pxCurrentTCB>
80001e08:	02c7a783          	lw	a5,44(a5)
80001e0c:	fcc42703          	lw	a4,-52(s0)
80001e10:	00f76663          	bltu	a4,a5,80001e1c <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:679
					{
						pxCurrentTCB = pxNewTCB;
80001e14:	fe842703          	lw	a4,-24(s0)
80001e18:	92e1a623          	sw	a4,-1748(gp) # 800039bc <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:692
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
80001e1c:	9581a783          	lw	a5,-1704(gp) # 800039e8 <uxTaskNumber>
80001e20:	00178713          	addi	a4,a5,1
80001e24:	94e1ac23          	sw	a4,-1704(gp) # 800039e8 <uxTaskNumber>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:697

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
80001e28:	9581a703          	lw	a4,-1704(gp) # 800039e8 <uxTaskNumber>
80001e2c:	fe842783          	lw	a5,-24(s0)
80001e30:	04e7a423          	sw	a4,72(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:702
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
80001e34:	fe842783          	lw	a5,-24(s0)
80001e38:	02c7a703          	lw	a4,44(a5)
80001e3c:	9441a783          	lw	a5,-1724(gp) # 800039d4 <uxTopReadyPriority>
80001e40:	00e7f863          	bleu	a4,a5,80001e50 <xTaskGenericCreate+0x18c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 1)
80001e44:	fe842783          	lw	a5,-24(s0)
80001e48:	02c7a703          	lw	a4,44(a5)
80001e4c:	94e1a223          	sw	a4,-1724(gp) # 800039d4 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 3)
80001e50:	fe842783          	lw	a5,-24(s0)
80001e54:	02c7a703          	lw	a4,44(a5)
80001e58:	00070793          	mv	a5,a4
80001e5c:	00279793          	slli	a5,a5,0x2
80001e60:	00e787b3          	add	a5,a5,a4
80001e64:	00279793          	slli	a5,a5,0x2
80001e68:	8001d737          	lui	a4,0x8001d
80001e6c:	a0070713          	addi	a4,a4,-1536 # 8001ca00 <__stack_top+0xfffdfa20>
80001e70:	00e78733          	add	a4,a5,a4
80001e74:	fe842783          	lw	a5,-24(s0)
80001e78:	00478793          	addi	a5,a5,4
80001e7c:	00078593          	mv	a1,a5
80001e80:	00070513          	mv	a0,a4
80001e84:	b15ff0ef          	jal	ra,80001998 <vListInsertEnd>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:704 (discriminator 3)

			xReturn = pdPASS;
80001e88:	00100793          	li	a5,1
80001e8c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:707 (discriminator 3)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
80001e90:	dd0ff0ef          	jal	ra,80001460 <vPortExitCritical>
80001e94:	00c0006f          	j	80001ea0 <xTaskGenericCreate+0x1dc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:711
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
80001e98:	fff00793          	li	a5,-1
80001e9c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:715
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
80001ea0:	fec42703          	lw	a4,-20(s0)
80001ea4:	00100793          	li	a5,1
80001ea8:	02f71063          	bne	a4,a5,80001ec8 <xTaskGenericCreate+0x204>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:717
	{
		if( xSchedulerRunning != pdFALSE )
80001eac:	9481a783          	lw	a5,-1720(gp) # 800039d8 <xSchedulerRunning>
80001eb0:	00078c63          	beqz	a5,80001ec8 <xTaskGenericCreate+0x204>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:721
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
80001eb4:	92c1a783          	lw	a5,-1748(gp) # 800039bc <pxCurrentTCB>
80001eb8:	02c7a783          	lw	a5,44(a5)
80001ebc:	fcc42703          	lw	a4,-52(s0)
80001ec0:	00e7f463          	bleu	a4,a5,80001ec8 <xTaskGenericCreate+0x204>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:723
			{
				taskYIELD_IF_USING_PREEMPTION();
80001ec4:	a21ff0ef          	jal	ra,800018e4 <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:736
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
80001ec8:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:737
}
80001ecc:	00078513          	mv	a0,a5
80001ed0:	03c12083          	lw	ra,60(sp)
80001ed4:	03812403          	lw	s0,56(sp)
80001ed8:	04010113          	addi	sp,sp,64
80001edc:	00008067          	ret

80001ee0 <vTaskDelay>:
vTaskDelay():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:921
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
80001ee0:	fd010113          	addi	sp,sp,-48
80001ee4:	02112623          	sw	ra,44(sp)
80001ee8:	02812423          	sw	s0,40(sp)
80001eec:	03010413          	addi	s0,sp,48
80001ef0:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:923
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
80001ef4:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:927


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
80001ef8:	fdc42783          	lw	a5,-36(s0)
80001efc:	04078463          	beqz	a5,80001f44 <vTaskDelay+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:929
		{
			configASSERT( uxSchedulerSuspended == 0 );
80001f00:	9601a783          	lw	a5,-1696(gp) # 800039f0 <uxSchedulerSuspended>
80001f04:	00078663          	beqz	a5,80001f10 <vTaskDelay+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:929 (discriminator 1)
80001f08:	30047073          	csrci	mstatus,8
80001f0c:	0000006f          	j	80001f0c <vTaskDelay+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:930
			vTaskSuspendAll();
80001f10:	0e4000ef          	jal	ra,80001ff4 <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:944
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
80001f14:	9401a783          	lw	a5,-1728(gp) # 800039d0 <xTickCount>
80001f18:	fdc42703          	lw	a4,-36(s0)
80001f1c:	00f707b3          	add	a5,a4,a5
80001f20:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:949

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80001f24:	92c1a783          	lw	a5,-1748(gp) # 800039bc <pxCurrentTCB>
80001f28:	00478793          	addi	a5,a5,4
80001f2c:	00078513          	mv	a0,a5
80001f30:	bc5ff0ef          	jal	ra,80001af4 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:960
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
80001f34:	fe842503          	lw	a0,-24(s0)
80001f38:	7e8000ef          	jal	ra,80002720 <prvAddCurrentTaskToDelayedList>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:962
			}
			xAlreadyYielded = xTaskResumeAll();
80001f3c:	0e0000ef          	jal	ra,8000201c <xTaskResumeAll>
80001f40:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:971
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
80001f44:	fec42783          	lw	a5,-20(s0)
80001f48:	00079463          	bnez	a5,80001f50 <vTaskDelay+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:973
		{
			portYIELD_WITHIN_API();
80001f4c:	999ff0ef          	jal	ra,800018e4 <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:979
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80001f50:	00000013          	nop
80001f54:	02c12083          	lw	ra,44(sp)
80001f58:	02812403          	lw	s0,40(sp)
80001f5c:	03010113          	addi	sp,sp,48
80001f60:	00008067          	ret

80001f64 <vTaskStartScheduler>:
vTaskStartScheduler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1542

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
80001f64:	fe010113          	addi	sp,sp,-32
80001f68:	00112e23          	sw	ra,28(sp)
80001f6c:	00812c23          	sw	s0,24(sp)
80001f70:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1555
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
80001f74:	00000893          	li	a7,0
80001f78:	00000813          	li	a6,0
80001f7c:	00000793          	li	a5,0
80001f80:	00000713          	li	a4,0
80001f84:	00000693          	li	a3,0
80001f88:	40000613          	li	a2,1024
80001f8c:	800035b7          	lui	a1,0x80003
80001f90:	6c058593          	addi	a1,a1,1728 # 800036c0 <__stack_top+0xfffc66e0>
80001f94:	80002537          	lui	a0,0x80002
80001f98:	45450513          	addi	a0,a0,1108 # 80002454 <__stack_top+0xfffc5474>
80001f9c:	d29ff0ef          	jal	ra,80001cc4 <xTaskGenericCreate>
80001fa0:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1572
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
80001fa4:	fec42703          	lw	a4,-20(s0)
80001fa8:	00100793          	li	a5,1
80001fac:	02f71263          	bne	a4,a5,80001fd0 <vTaskStartScheduler+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1579
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
80001fb0:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1589
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
80001fb4:	fff00713          	li	a4,-1
80001fb8:	94e1ae23          	sw	a4,-1700(gp) # 800039ec <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1590
		xSchedulerRunning = pdTRUE;
80001fbc:	00100713          	li	a4,1
80001fc0:	94e1a423          	sw	a4,-1720(gp) # 800039d8 <xSchedulerRunning>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1591
		xTickCount = ( TickType_t ) 0U;
80001fc4:	9401a023          	sw	zero,-1728(gp) # 800039d0 <xTickCount>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1600
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
80001fc8:	ffcff0ef          	jal	ra,800017c4 <xPortStartScheduler>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
80001fcc:	0140006f          	j	80001fe0 <vTaskStartScheduler+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615
		configASSERT( xReturn );
80001fd0:	fec42783          	lw	a5,-20(s0)
80001fd4:	00079663          	bnez	a5,80001fe0 <vTaskStartScheduler+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 1)
80001fd8:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 2)
80001fdc:	0000006f          	j	80001fdc <vTaskStartScheduler+0x78>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
}
80001fe0:	00000013          	nop
80001fe4:	01c12083          	lw	ra,28(sp)
80001fe8:	01812403          	lw	s0,24(sp)
80001fec:	02010113          	addi	sp,sp,32
80001ff0:	00008067          	ret

80001ff4 <vTaskSuspendAll>:
vTaskSuspendAll():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1632
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
80001ff4:	ff010113          	addi	sp,sp,-16
80001ff8:	00812623          	sw	s0,12(sp)
80001ffc:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1637
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
80002000:	9601a783          	lw	a5,-1696(gp) # 800039f0 <uxSchedulerSuspended>
80002004:	00178713          	addi	a4,a5,1
80002008:	96e1a023          	sw	a4,-1696(gp) # 800039f0 <uxSchedulerSuspended>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1638
}
8000200c:	00000013          	nop
80002010:	00c12403          	lw	s0,12(sp)
80002014:	01010113          	addi	sp,sp,16
80002018:	00008067          	ret

8000201c <xTaskResumeAll>:
xTaskResumeAll():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1670

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
8000201c:	fe010113          	addi	sp,sp,-32
80002020:	00112e23          	sw	ra,28(sp)
80002024:	00812c23          	sw	s0,24(sp)
80002028:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1672
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
8000202c:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
80002030:	9601a783          	lw	a5,-1696(gp) # 800039f0 <uxSchedulerSuspended>
80002034:	00079663          	bnez	a5,80002040 <xTaskResumeAll+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676 (discriminator 1)
80002038:	30047073          	csrci	mstatus,8
8000203c:	0000006f          	j	8000203c <xTaskResumeAll+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1683
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
80002040:	becff0ef          	jal	ra,8000142c <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1685
	{
		--uxSchedulerSuspended;
80002044:	9601a783          	lw	a5,-1696(gp) # 800039f0 <uxSchedulerSuspended>
80002048:	fff78713          	addi	a4,a5,-1
8000204c:	96e1a023          	sw	a4,-1696(gp) # 800039f0 <uxSchedulerSuspended>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1687

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80002050:	9601a783          	lw	a5,-1696(gp) # 800039f0 <uxSchedulerSuspended>
80002054:	10079663          	bnez	a5,80002160 <xTaskResumeAll+0x144>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1689
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
80002058:	93c1a783          	lw	a5,-1732(gp) # 800039cc <uxCurrentNumberOfTasks>
8000205c:	10078263          	beqz	a5,80002160 <xTaskResumeAll+0x144>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
80002060:	0a80006f          	j	80002108 <xTaskResumeAll+0xec>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1695
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
80002064:	8001d7b7          	lui	a5,0x8001d
80002068:	a8c78793          	addi	a5,a5,-1396 # 8001ca8c <__stack_top+0xfffdfaac>
8000206c:	00c7a783          	lw	a5,12(a5)
80002070:	00c7a783          	lw	a5,12(a5)
80002074:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1696
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002078:	fe842783          	lw	a5,-24(s0)
8000207c:	01878793          	addi	a5,a5,24
80002080:	00078513          	mv	a0,a5
80002084:	a71ff0ef          	jal	ra,80001af4 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1697
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80002088:	fe842783          	lw	a5,-24(s0)
8000208c:	00478793          	addi	a5,a5,4
80002090:	00078513          	mv	a0,a5
80002094:	a61ff0ef          	jal	ra,80001af4 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698
					prvAddTaskToReadyList( pxTCB );
80002098:	fe842783          	lw	a5,-24(s0)
8000209c:	02c7a703          	lw	a4,44(a5)
800020a0:	9441a783          	lw	a5,-1724(gp) # 800039d4 <uxTopReadyPriority>
800020a4:	00e7f863          	bleu	a4,a5,800020b4 <xTaskResumeAll+0x98>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 1)
800020a8:	fe842783          	lw	a5,-24(s0)
800020ac:	02c7a703          	lw	a4,44(a5)
800020b0:	94e1a223          	sw	a4,-1724(gp) # 800039d4 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 3)
800020b4:	fe842783          	lw	a5,-24(s0)
800020b8:	02c7a703          	lw	a4,44(a5)
800020bc:	00070793          	mv	a5,a4
800020c0:	00279793          	slli	a5,a5,0x2
800020c4:	00e787b3          	add	a5,a5,a4
800020c8:	00279793          	slli	a5,a5,0x2
800020cc:	8001d737          	lui	a4,0x8001d
800020d0:	a0070713          	addi	a4,a4,-1536 # 8001ca00 <__stack_top+0xfffdfa20>
800020d4:	00e78733          	add	a4,a5,a4
800020d8:	fe842783          	lw	a5,-24(s0)
800020dc:	00478793          	addi	a5,a5,4
800020e0:	00078593          	mv	a1,a5
800020e4:	00070513          	mv	a0,a4
800020e8:	8b1ff0ef          	jal	ra,80001998 <vListInsertEnd>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1702 (discriminator 3)

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
800020ec:	fe842783          	lw	a5,-24(s0)
800020f0:	02c7a703          	lw	a4,44(a5)
800020f4:	92c1a783          	lw	a5,-1748(gp) # 800039bc <pxCurrentTCB>
800020f8:	02c7a783          	lw	a5,44(a5)
800020fc:	00f76663          	bltu	a4,a5,80002108 <xTaskResumeAll+0xec>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1704
					{
						xYieldPending = pdTRUE;
80002100:	00100713          	li	a4,1
80002104:	94e1a823          	sw	a4,-1712(gp) # 800039e0 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
80002108:	8001d7b7          	lui	a5,0x8001d
8000210c:	a8c7a783          	lw	a5,-1396(a5) # 8001ca8c <__stack_top+0xfffdfaac>
80002110:	f4079ae3          	bnez	a5,80002064 <xTaskResumeAll+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1716

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
80002114:	94c1a783          	lw	a5,-1716(gp) # 800039dc <uxPendedTicks>
80002118:	02078863          	beqz	a5,80002148 <xTaskResumeAll+0x12c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
8000211c:	0240006f          	j	80002140 <xTaskResumeAll+0x124>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1720
					{
						if( xTaskIncrementTick() != pdFALSE )
80002120:	05c000ef          	jal	ra,8000217c <xTaskIncrementTick>
80002124:	00050793          	mv	a5,a0
80002128:	00078663          	beqz	a5,80002134 <xTaskResumeAll+0x118>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1722
						{
							xYieldPending = pdTRUE;
8000212c:	00100713          	li	a4,1
80002130:	94e1a823          	sw	a4,-1712(gp) # 800039e0 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1728
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
80002134:	94c1a783          	lw	a5,-1716(gp) # 800039dc <uxPendedTicks>
80002138:	fff78713          	addi	a4,a5,-1
8000213c:	94e1a623          	sw	a4,-1716(gp) # 800039dc <uxPendedTicks>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
					while( uxPendedTicks > ( UBaseType_t ) 0U )
80002140:	94c1a783          	lw	a5,-1716(gp) # 800039dc <uxPendedTicks>
80002144:	fc079ee3          	bnez	a5,80002120 <xTaskResumeAll+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1736
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
80002148:	9501a703          	lw	a4,-1712(gp) # 800039e0 <xYieldPending>
8000214c:	00100793          	li	a5,1
80002150:	00f71863          	bne	a4,a5,80002160 <xTaskResumeAll+0x144>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1740
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
80002154:	00100793          	li	a5,1
80002158:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1743
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
8000215c:	f88ff0ef          	jal	ra,800018e4 <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1756
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
80002160:	b00ff0ef          	jal	ra,80001460 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1758

	return xAlreadyYielded;
80002164:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1759
}
80002168:	00078513          	mv	a0,a5
8000216c:	01c12083          	lw	ra,28(sp)
80002170:	01812403          	lw	s0,24(sp)
80002174:	02010113          	addi	sp,sp,32
80002178:	00008067          	ret

8000217c <xTaskIncrementTick>:
xTaskIncrementTick():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1938

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
8000217c:	fd010113          	addi	sp,sp,-48
80002180:	02112623          	sw	ra,44(sp)
80002184:	02812423          	sw	s0,40(sp)
80002188:	03010413          	addi	s0,sp,48
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1941
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
8000218c:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1947

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80002190:	9601a783          	lw	a5,-1696(gp) # 800039f0 <uxSchedulerSuspended>
80002194:	1a079063          	bnez	a5,80002334 <xTaskIncrementTick+0x1b8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1951
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
80002198:	9401a783          	lw	a5,-1728(gp) # 800039d0 <xTickCount>
8000219c:	00178713          	addi	a4,a5,1
800021a0:	94e1a023          	sw	a4,-1728(gp) # 800039d0 <xTickCount>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1956

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
800021a4:	9401a783          	lw	a5,-1728(gp) # 800039d0 <xTickCount>
800021a8:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1958

			if( xConstTickCount == ( TickType_t ) 0U )
800021ac:	fe842783          	lw	a5,-24(s0)
800021b0:	04079063          	bnez	a5,800021f0 <xTaskIncrementTick+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960
			{
				taskSWITCH_DELAYED_LISTS();
800021b4:	9301a783          	lw	a5,-1744(gp) # 800039c0 <pxDelayedTaskList>
800021b8:	0007a783          	lw	a5,0(a5)
800021bc:	00078663          	beqz	a5,800021c8 <xTaskIncrementTick+0x4c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 1)
800021c0:	30047073          	csrci	mstatus,8
800021c4:	0000006f          	j	800021c4 <xTaskIncrementTick+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 2)
800021c8:	9301a783          	lw	a5,-1744(gp) # 800039c0 <pxDelayedTaskList>
800021cc:	fef42223          	sw	a5,-28(s0)
800021d0:	9341a703          	lw	a4,-1740(gp) # 800039c4 <pxOverflowDelayedTaskList>
800021d4:	92e1a823          	sw	a4,-1744(gp) # 800039c0 <pxDelayedTaskList>
800021d8:	fe442703          	lw	a4,-28(s0)
800021dc:	92e1aa23          	sw	a4,-1740(gp) # 800039c4 <pxOverflowDelayedTaskList>
800021e0:	9541a783          	lw	a5,-1708(gp) # 800039e4 <xNumOfOverflows>
800021e4:	00178713          	addi	a4,a5,1
800021e8:	94e1aa23          	sw	a4,-1708(gp) # 800039e4 <xNumOfOverflows>
800021ec:	6bc000ef          	jal	ra,800028a8 <prvResetNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1971

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
800021f0:	95c1a783          	lw	a5,-1700(gp) # 800039ec <xNextTaskUnblockTime>
800021f4:	fe842703          	lw	a4,-24(s0)
800021f8:	10f76063          	bltu	a4,a5,800022f8 <xTaskIncrementTick+0x17c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
800021fc:	9301a783          	lw	a5,-1744(gp) # 800039c0 <pxDelayedTaskList>
80002200:	0007a783          	lw	a5,0(a5)
80002204:	00079663          	bnez	a5,80002210 <xTaskIncrementTick+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 1)
80002208:	00100793          	li	a5,1
8000220c:	0080006f          	j	80002214 <xTaskIncrementTick+0x98>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 2)
80002210:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 4)
80002214:	00078863          	beqz	a5,80002224 <xTaskIncrementTick+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1982
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
80002218:	fff00713          	li	a4,-1
8000221c:	94e1ae23          	sw	a4,-1700(gp) # 800039ec <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1983
						break;
80002220:	0d80006f          	j	800022f8 <xTaskIncrementTick+0x17c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1991
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80002224:	9301a783          	lw	a5,-1744(gp) # 800039c0 <pxDelayedTaskList>
80002228:	00c7a783          	lw	a5,12(a5)
8000222c:	00c7a783          	lw	a5,12(a5)
80002230:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1992
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
80002234:	fe042783          	lw	a5,-32(s0)
80002238:	0047a783          	lw	a5,4(a5)
8000223c:	fcf42e23          	sw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1994

						if( xConstTickCount < xItemValue )
80002240:	fe842703          	lw	a4,-24(s0)
80002244:	fdc42783          	lw	a5,-36(s0)
80002248:	00f77863          	bleu	a5,a4,80002258 <xTaskIncrementTick+0xdc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2001
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
8000224c:	fdc42703          	lw	a4,-36(s0)
80002250:	94e1ae23          	sw	a4,-1700(gp) # 800039ec <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2002
							break;
80002254:	0a40006f          	j	800022f8 <xTaskIncrementTick+0x17c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2010
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80002258:	fe042783          	lw	a5,-32(s0)
8000225c:	00478793          	addi	a5,a5,4
80002260:	00078513          	mv	a0,a5
80002264:	891ff0ef          	jal	ra,80001af4 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2014

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
80002268:	fe042783          	lw	a5,-32(s0)
8000226c:	0287a783          	lw	a5,40(a5)
80002270:	00078a63          	beqz	a5,80002284 <xTaskIncrementTick+0x108>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2016
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002274:	fe042783          	lw	a5,-32(s0)
80002278:	01878793          	addi	a5,a5,24
8000227c:	00078513          	mv	a0,a5
80002280:	875ff0ef          	jal	ra,80001af4 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
80002284:	fe042783          	lw	a5,-32(s0)
80002288:	02c7a703          	lw	a4,44(a5)
8000228c:	9441a783          	lw	a5,-1724(gp) # 800039d4 <uxTopReadyPriority>
80002290:	00e7f863          	bleu	a4,a5,800022a0 <xTaskIncrementTick+0x124>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 1)
80002294:	fe042783          	lw	a5,-32(s0)
80002298:	02c7a703          	lw	a4,44(a5)
8000229c:	94e1a223          	sw	a4,-1724(gp) # 800039d4 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 3)
800022a0:	fe042783          	lw	a5,-32(s0)
800022a4:	02c7a703          	lw	a4,44(a5)
800022a8:	00070793          	mv	a5,a4
800022ac:	00279793          	slli	a5,a5,0x2
800022b0:	00e787b3          	add	a5,a5,a4
800022b4:	00279793          	slli	a5,a5,0x2
800022b8:	8001d737          	lui	a4,0x8001d
800022bc:	a0070713          	addi	a4,a4,-1536 # 8001ca00 <__stack_top+0xfffdfa20>
800022c0:	00e78733          	add	a4,a5,a4
800022c4:	fe042783          	lw	a5,-32(s0)
800022c8:	00478793          	addi	a5,a5,4
800022cc:	00078593          	mv	a1,a5
800022d0:	00070513          	mv	a0,a4
800022d4:	ec4ff0ef          	jal	ra,80001998 <vListInsertEnd>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2035 (discriminator 3)
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
800022d8:	fe042783          	lw	a5,-32(s0)
800022dc:	02c7a703          	lw	a4,44(a5)
800022e0:	92c1a783          	lw	a5,-1748(gp) # 800039bc <pxCurrentTCB>
800022e4:	02c7a783          	lw	a5,44(a5)
800022e8:	f0f76ae3          	bltu	a4,a5,800021fc <xTaskIncrementTick+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2037
							{
								xSwitchRequired = pdTRUE;
800022ec:	00100793          	li	a5,1
800022f0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
800022f4:	f09ff06f          	j	800021fc <xTaskIncrementTick+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2055
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
800022f8:	92c1a783          	lw	a5,-1748(gp) # 800039bc <pxCurrentTCB>
800022fc:	02c7a703          	lw	a4,44(a5)
80002300:	8001d6b7          	lui	a3,0x8001d
80002304:	00070793          	mv	a5,a4
80002308:	00279793          	slli	a5,a5,0x2
8000230c:	00e787b3          	add	a5,a5,a4
80002310:	00279793          	slli	a5,a5,0x2
80002314:	a0068713          	addi	a4,a3,-1536 # 8001ca00 <__stack_top+0xfffdfa20>
80002318:	00e787b3          	add	a5,a5,a4
8000231c:	0007a703          	lw	a4,0(a5)
80002320:	00100793          	li	a5,1
80002324:	00e7fe63          	bleu	a4,a5,80002340 <xTaskIncrementTick+0x1c4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2057
			{
				xSwitchRequired = pdTRUE;
80002328:	00100793          	li	a5,1
8000232c:	fef42623          	sw	a5,-20(s0)
80002330:	0100006f          	j	80002340 <xTaskIncrementTick+0x1c4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2083
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
80002334:	94c1a783          	lw	a5,-1716(gp) # 800039dc <uxPendedTicks>
80002338:	00178713          	addi	a4,a5,1
8000233c:	94e1a623          	sw	a4,-1716(gp) # 800039dc <uxPendedTicks>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2096
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
80002340:	9501a783          	lw	a5,-1712(gp) # 800039e0 <xYieldPending>
80002344:	00078663          	beqz	a5,80002350 <xTaskIncrementTick+0x1d4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2098
		{
			xSwitchRequired = pdTRUE;
80002348:	00100793          	li	a5,1
8000234c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2107
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
80002350:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2108
}
80002354:	00078513          	mv	a0,a5
80002358:	02c12083          	lw	ra,44(sp)
8000235c:	02812403          	lw	s0,40(sp)
80002360:	03010113          	addi	sp,sp,48
80002364:	00008067          	ret

80002368 <vTaskSwitchContext>:
vTaskSwitchContext():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2202

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
80002368:	fe010113          	addi	sp,sp,-32
8000236c:	00812e23          	sw	s0,28(sp)
80002370:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2203
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
80002374:	9601a783          	lw	a5,-1696(gp) # 800039f0 <uxSchedulerSuspended>
80002378:	00078863          	beqz	a5,80002388 <vTaskSwitchContext+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2207
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
8000237c:	00100713          	li	a4,1
80002380:	94e1a823          	sw	a4,-1712(gp) # 800039e0 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
80002384:	0c00006f          	j	80002444 <vTaskSwitchContext+0xdc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2211
		xYieldPending = pdFALSE;
80002388:	9401a823          	sw	zero,-1712(gp) # 800039e0 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246
		taskSELECT_HIGHEST_PRIORITY_TASK();
8000238c:	0200006f          	j	800023ac <vTaskSwitchContext+0x44>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 4)
80002390:	9441a783          	lw	a5,-1724(gp) # 800039d4 <uxTopReadyPriority>
80002394:	00079663          	bnez	a5,800023a0 <vTaskSwitchContext+0x38>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 1)
80002398:	30047073          	csrci	mstatus,8
8000239c:	0000006f          	j	8000239c <vTaskSwitchContext+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 2)
800023a0:	9441a783          	lw	a5,-1724(gp) # 800039d4 <uxTopReadyPriority>
800023a4:	fff78713          	addi	a4,a5,-1
800023a8:	94e1a223          	sw	a4,-1724(gp) # 800039d4 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 3)
800023ac:	9441a703          	lw	a4,-1724(gp) # 800039d4 <uxTopReadyPriority>
800023b0:	8001d6b7          	lui	a3,0x8001d
800023b4:	00070793          	mv	a5,a4
800023b8:	00279793          	slli	a5,a5,0x2
800023bc:	00e787b3          	add	a5,a5,a4
800023c0:	00279793          	slli	a5,a5,0x2
800023c4:	a0068713          	addi	a4,a3,-1536 # 8001ca00 <__stack_top+0xfffdfa20>
800023c8:	00e787b3          	add	a5,a5,a4
800023cc:	0007a783          	lw	a5,0(a5)
800023d0:	fc0780e3          	beqz	a5,80002390 <vTaskSwitchContext+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 5)
800023d4:	9441a703          	lw	a4,-1724(gp) # 800039d4 <uxTopReadyPriority>
800023d8:	00070793          	mv	a5,a4
800023dc:	00279793          	slli	a5,a5,0x2
800023e0:	00e787b3          	add	a5,a5,a4
800023e4:	00279793          	slli	a5,a5,0x2
800023e8:	8001d737          	lui	a4,0x8001d
800023ec:	a0070713          	addi	a4,a4,-1536 # 8001ca00 <__stack_top+0xfffdfa20>
800023f0:	00e787b3          	add	a5,a5,a4
800023f4:	fef42623          	sw	a5,-20(s0)
800023f8:	fec42783          	lw	a5,-20(s0)
800023fc:	0047a783          	lw	a5,4(a5)
80002400:	0047a703          	lw	a4,4(a5)
80002404:	fec42783          	lw	a5,-20(s0)
80002408:	00e7a223          	sw	a4,4(a5)
8000240c:	fec42783          	lw	a5,-20(s0)
80002410:	0047a703          	lw	a4,4(a5)
80002414:	fec42783          	lw	a5,-20(s0)
80002418:	00878793          	addi	a5,a5,8
8000241c:	00f71c63          	bne	a4,a5,80002434 <vTaskSwitchContext+0xcc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 6)
80002420:	fec42783          	lw	a5,-20(s0)
80002424:	0047a783          	lw	a5,4(a5)
80002428:	0047a703          	lw	a4,4(a5)
8000242c:	fec42783          	lw	a5,-20(s0)
80002430:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 8)
80002434:	fec42783          	lw	a5,-20(s0)
80002438:	0047a783          	lw	a5,4(a5)
8000243c:	00c7a703          	lw	a4,12(a5)
80002440:	92e1a623          	sw	a4,-1748(gp) # 800039bc <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
}
80002444:	00000013          	nop
80002448:	01c12403          	lw	s0,28(sp)
8000244c:	02010113          	addi	sp,sp,32
80002450:	00008067          	ret

80002454 <prvIdleTask>:
prvIdleTask():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2689
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
80002454:	fe010113          	addi	sp,sp,-32
80002458:	00112e23          	sw	ra,28(sp)
8000245c:	00812c23          	sw	s0,24(sp)
80002460:	02010413          	addi	s0,sp,32
80002464:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
80002468:	218000ef          	jal	ra,80002680 <prvCheckTasksWaitingTermination>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2719

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
8000246c:	8001d7b7          	lui	a5,0x8001d
80002470:	a007a703          	lw	a4,-1536(a5) # 8001ca00 <__stack_top+0xfffdfa20>
80002474:	00100793          	li	a5,1
80002478:	00e7f463          	bleu	a4,a5,80002480 <prvIdleTask+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2721
			{
				taskYIELD();
8000247c:	c68ff0ef          	jal	ra,800018e4 <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2739
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
80002480:	054010ef          	jal	ra,800034d4 <vApplicationIdleHook>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
		prvCheckTasksWaitingTermination();
80002484:	fe5ff06f          	j	80002468 <prvIdleTask+0x14>

80002488 <prvInitialiseTCBVariables>:
prvInitialiseTCBVariables():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2832

#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80002488:	fc010113          	addi	sp,sp,-64
8000248c:	02112e23          	sw	ra,60(sp)
80002490:	02812c23          	sw	s0,56(sp)
80002494:	04010413          	addi	s0,sp,64
80002498:	fca42e23          	sw	a0,-36(s0)
8000249c:	fcb42c23          	sw	a1,-40(s0)
800024a0:	fcc42a23          	sw	a2,-44(s0)
800024a4:	fcd42823          	sw	a3,-48(s0)
800024a8:	00070793          	mv	a5,a4
800024ac:	fcf41723          	sh	a5,-50(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
800024b0:	fe042623          	sw	zero,-20(s0)
800024b4:	0440006f          	j	800024f8 <prvInitialiseTCBVariables+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2838
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
800024b8:	fd842703          	lw	a4,-40(s0)
800024bc:	fec42783          	lw	a5,-20(s0)
800024c0:	00f707b3          	add	a5,a4,a5
800024c4:	00078703          	lb	a4,0(a5)
800024c8:	fdc42683          	lw	a3,-36(s0)
800024cc:	fec42783          	lw	a5,-20(s0)
800024d0:	00f687b3          	add	a5,a3,a5
800024d4:	02e78a23          	sb	a4,52(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2843

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
800024d8:	fd842703          	lw	a4,-40(s0)
800024dc:	fec42783          	lw	a5,-20(s0)
800024e0:	00f707b3          	add	a5,a4,a5
800024e4:	00078783          	lb	a5,0(a5)
800024e8:	02078063          	beqz	a5,80002508 <prvInitialiseTCBVariables+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 2)
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
800024ec:	fec42783          	lw	a5,-20(s0)
800024f0:	00178793          	addi	a5,a5,1
800024f4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 1)
800024f8:	fec42703          	lw	a4,-20(s0)
800024fc:	00f00793          	li	a5,15
80002500:	fae7fce3          	bleu	a4,a5,800024b8 <prvInitialiseTCBVariables+0x30>
80002504:	0080006f          	j	8000250c <prvInitialiseTCBVariables+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2845
		{
			break;
80002508:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2855
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
8000250c:	fdc42783          	lw	a5,-36(s0)
80002510:	040781a3          	sb	zero,67(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2859

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
80002514:	fd442703          	lw	a4,-44(s0)
80002518:	00400793          	li	a5,4
8000251c:	00e7f663          	bleu	a4,a5,80002528 <prvInitialiseTCBVariables+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2861
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
80002520:	00400793          	li	a5,4
80002524:	fcf42a23          	sw	a5,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2868
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
80002528:	fdc42783          	lw	a5,-36(s0)
8000252c:	fd442703          	lw	a4,-44(s0)
80002530:	02e7a623          	sw	a4,44(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2871
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
80002534:	fdc42783          	lw	a5,-36(s0)
80002538:	fd442703          	lw	a4,-44(s0)
8000253c:	04e7a823          	sw	a4,80(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2872
		pxTCB->uxMutexesHeld = 0;
80002540:	fdc42783          	lw	a5,-36(s0)
80002544:	0407aa23          	sw	zero,84(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2876
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
80002548:	fdc42783          	lw	a5,-36(s0)
8000254c:	00478793          	addi	a5,a5,4
80002550:	00078513          	mv	a0,a5
80002554:	c1cff0ef          	jal	ra,80001970 <vListInitialiseItem>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2877
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
80002558:	fdc42783          	lw	a5,-36(s0)
8000255c:	01878793          	addi	a5,a5,24
80002560:	00078513          	mv	a0,a5
80002564:	c0cff0ef          	jal	ra,80001970 <vListInitialiseItem>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2881

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
80002568:	fdc42783          	lw	a5,-36(s0)
8000256c:	fdc42703          	lw	a4,-36(s0)
80002570:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2884

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80002574:	00500713          	li	a4,5
80002578:	fd442783          	lw	a5,-44(s0)
8000257c:	40f70733          	sub	a4,a4,a5
80002580:	fdc42783          	lw	a5,-36(s0)
80002584:	00e7ac23          	sw	a4,24(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2885
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
80002588:	fdc42783          	lw	a5,-36(s0)
8000258c:	fdc42703          	lw	a4,-36(s0)
80002590:	02e7a223          	sw	a4,36(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2889

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
80002594:	fdc42783          	lw	a5,-36(s0)
80002598:	0407a223          	sw	zero,68(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2927
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
8000259c:	fdc42783          	lw	a5,-36(s0)
800025a0:	0407ac23          	sw	zero,88(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2928
		pxTCB->eNotifyState = eNotWaitingNotification;
800025a4:	fdc42783          	lw	a5,-36(s0)
800025a8:	0407ae23          	sw	zero,92(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2938
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
800025ac:	00000013          	nop
800025b0:	03c12083          	lw	ra,60(sp)
800025b4:	03812403          	lw	s0,56(sp)
800025b8:	04010113          	addi	sp,sp,64
800025bc:	00008067          	ret

800025c0 <prvInitialiseTaskLists>:
prvInitialiseTaskLists():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2997

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
800025c0:	fe010113          	addi	sp,sp,-32
800025c4:	00112e23          	sw	ra,28(sp)
800025c8:	00812c23          	sw	s0,24(sp)
800025cc:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
800025d0:	fe042623          	sw	zero,-20(s0)
800025d4:	0380006f          	j	8000260c <prvInitialiseTaskLists+0x4c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3002 (discriminator 3)
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
800025d8:	fec42703          	lw	a4,-20(s0)
800025dc:	00070793          	mv	a5,a4
800025e0:	00279793          	slli	a5,a5,0x2
800025e4:	00e787b3          	add	a5,a5,a4
800025e8:	00279793          	slli	a5,a5,0x2
800025ec:	8001d737          	lui	a4,0x8001d
800025f0:	a0070713          	addi	a4,a4,-1536 # 8001ca00 <__stack_top+0xfffdfa20>
800025f4:	00e787b3          	add	a5,a5,a4
800025f8:	00078513          	mv	a0,a5
800025fc:	b10ff0ef          	jal	ra,8000190c <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 3)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
80002600:	fec42783          	lw	a5,-20(s0)
80002604:	00178793          	addi	a5,a5,1
80002608:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 1)
8000260c:	fec42703          	lw	a4,-20(s0)
80002610:	00400793          	li	a5,4
80002614:	fce7f2e3          	bleu	a4,a5,800025d8 <prvInitialiseTaskLists+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3005
	}

	vListInitialise( &xDelayedTaskList1 );
80002618:	8001d7b7          	lui	a5,0x8001d
8000261c:	a6478513          	addi	a0,a5,-1436 # 8001ca64 <__stack_top+0xfffdfa84>
80002620:	aecff0ef          	jal	ra,8000190c <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3006
	vListInitialise( &xDelayedTaskList2 );
80002624:	8001d7b7          	lui	a5,0x8001d
80002628:	a7878513          	addi	a0,a5,-1416 # 8001ca78 <__stack_top+0xfffdfa98>
8000262c:	ae0ff0ef          	jal	ra,8000190c <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3007
	vListInitialise( &xPendingReadyList );
80002630:	8001d7b7          	lui	a5,0x8001d
80002634:	a8c78513          	addi	a0,a5,-1396 # 8001ca8c <__stack_top+0xfffdfaac>
80002638:	ad4ff0ef          	jal	ra,8000190c <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3011

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
8000263c:	8001d7b7          	lui	a5,0x8001d
80002640:	aa078513          	addi	a0,a5,-1376 # 8001caa0 <__stack_top+0xfffdfac0>
80002644:	ac8ff0ef          	jal	ra,8000190c <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3017
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
80002648:	8001d7b7          	lui	a5,0x8001d
8000264c:	ab478513          	addi	a0,a5,-1356 # 8001cab4 <__stack_top+0xfffdfad4>
80002650:	abcff0ef          	jal	ra,8000190c <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3023
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
80002654:	8001d737          	lui	a4,0x8001d
80002658:	a6470713          	addi	a4,a4,-1436 # 8001ca64 <__stack_top+0xfffdfa84>
8000265c:	92e1a823          	sw	a4,-1744(gp) # 800039c0 <pxDelayedTaskList>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3024
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
80002660:	8001d737          	lui	a4,0x8001d
80002664:	a7870713          	addi	a4,a4,-1416 # 8001ca78 <__stack_top+0xfffdfa98>
80002668:	92e1aa23          	sw	a4,-1740(gp) # 800039c4 <pxOverflowDelayedTaskList>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3025
}
8000266c:	00000013          	nop
80002670:	01c12083          	lw	ra,28(sp)
80002674:	01812403          	lw	s0,24(sp)
80002678:	02010113          	addi	sp,sp,32
8000267c:	00008067          	ret

80002680 <prvCheckTasksWaitingTermination>:
prvCheckTasksWaitingTermination():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3029
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
80002680:	fe010113          	addi	sp,sp,-32
80002684:	00112e23          	sw	ra,28(sp)
80002688:	00812c23          	sw	s0,24(sp)
8000268c:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
80002690:	0740006f          	j	80002704 <prvCheckTasksWaitingTermination+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3038
		{
			vTaskSuspendAll();
80002694:	961ff0ef          	jal	ra,80001ff4 <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3040
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
80002698:	8001d7b7          	lui	a5,0x8001d
8000269c:	aa07a783          	lw	a5,-1376(a5) # 8001caa0 <__stack_top+0xfffdfac0>
800026a0:	0017b793          	seqz	a5,a5
800026a4:	0ff7f793          	andi	a5,a5,255
800026a8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3042
			}
			( void ) xTaskResumeAll();
800026ac:	971ff0ef          	jal	ra,8000201c <xTaskResumeAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3044

			if( xListIsEmpty == pdFALSE )
800026b0:	fec42783          	lw	a5,-20(s0)
800026b4:	04079863          	bnez	a5,80002704 <prvCheckTasksWaitingTermination+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3048
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
800026b8:	d75fe0ef          	jal	ra,8000142c <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3050
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
800026bc:	8001d7b7          	lui	a5,0x8001d
800026c0:	aa078793          	addi	a5,a5,-1376 # 8001caa0 <__stack_top+0xfffdfac0>
800026c4:	00c7a783          	lw	a5,12(a5)
800026c8:	00c7a783          	lw	a5,12(a5)
800026cc:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3051
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
800026d0:	fe842783          	lw	a5,-24(s0)
800026d4:	00478793          	addi	a5,a5,4
800026d8:	00078513          	mv	a0,a5
800026dc:	c18ff0ef          	jal	ra,80001af4 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3052
					--uxCurrentNumberOfTasks;
800026e0:	93c1a783          	lw	a5,-1732(gp) # 800039cc <uxCurrentNumberOfTasks>
800026e4:	fff78713          	addi	a4,a5,-1
800026e8:	92e1ae23          	sw	a4,-1732(gp) # 800039cc <uxCurrentNumberOfTasks>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3053
					--uxTasksDeleted;
800026ec:	9381a783          	lw	a5,-1736(gp) # 800039c8 <uxTasksDeleted>
800026f0:	fff78713          	addi	a4,a5,-1
800026f4:	92e1ac23          	sw	a4,-1736(gp) # 800039c8 <uxTasksDeleted>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3055
				}
				taskEXIT_CRITICAL();
800026f8:	d69fe0ef          	jal	ra,80001460 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3057

				prvDeleteTCB( pxTCB );
800026fc:	fe842503          	lw	a0,-24(s0)
80002700:	168000ef          	jal	ra,80002868 <prvDeleteTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
80002704:	9381a783          	lw	a5,-1736(gp) # 800039c8 <uxTasksDeleted>
80002708:	f80796e3          	bnez	a5,80002694 <prvCheckTasksWaitingTermination+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3066
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
8000270c:	00000013          	nop
80002710:	01c12083          	lw	ra,28(sp)
80002714:	01812403          	lw	s0,24(sp)
80002718:	02010113          	addi	sp,sp,32
8000271c:	00008067          	ret

80002720 <prvAddCurrentTaskToDelayedList>:
prvAddCurrentTaskToDelayedList():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3070
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
80002720:	fe010113          	addi	sp,sp,-32
80002724:	00112e23          	sw	ra,28(sp)
80002728:	00812c23          	sw	s0,24(sp)
8000272c:	02010413          	addi	s0,sp,32
80002730:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3072
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
80002734:	92c1a783          	lw	a5,-1748(gp) # 800039bc <pxCurrentTCB>
80002738:	fec42703          	lw	a4,-20(s0)
8000273c:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3074

	if( xTimeToWake < xTickCount )
80002740:	9401a783          	lw	a5,-1728(gp) # 800039d0 <xTickCount>
80002744:	fec42703          	lw	a4,-20(s0)
80002748:	02f77063          	bleu	a5,a4,80002768 <prvAddCurrentTaskToDelayedList+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3077
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
8000274c:	9341a703          	lw	a4,-1740(gp) # 800039c4 <pxOverflowDelayedTaskList>
80002750:	92c1a783          	lw	a5,-1748(gp) # 800039bc <pxCurrentTCB>
80002754:	00478793          	addi	a5,a5,4
80002758:	00078593          	mv	a1,a5
8000275c:	00070513          	mv	a0,a4
80002760:	ac0ff0ef          	jal	ra,80001a20 <vListInsert>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
80002764:	0300006f          	j	80002794 <prvAddCurrentTaskToDelayedList+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3082
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80002768:	9301a703          	lw	a4,-1744(gp) # 800039c0 <pxDelayedTaskList>
8000276c:	92c1a783          	lw	a5,-1748(gp) # 800039bc <pxCurrentTCB>
80002770:	00478793          	addi	a5,a5,4
80002774:	00078593          	mv	a1,a5
80002778:	00070513          	mv	a0,a4
8000277c:	aa4ff0ef          	jal	ra,80001a20 <vListInsert>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3087
		if( xTimeToWake < xNextTaskUnblockTime )
80002780:	95c1a783          	lw	a5,-1700(gp) # 800039ec <xNextTaskUnblockTime>
80002784:	fec42703          	lw	a4,-20(s0)
80002788:	00f77663          	bleu	a5,a4,80002794 <prvAddCurrentTaskToDelayedList+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3089
			xNextTaskUnblockTime = xTimeToWake;
8000278c:	fec42703          	lw	a4,-20(s0)
80002790:	94e1ae23          	sw	a4,-1700(gp) # 800039ec <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
}
80002794:	00000013          	nop
80002798:	01c12083          	lw	ra,28(sp)
8000279c:	01812403          	lw	s0,24(sp)
800027a0:	02010113          	addi	sp,sp,32
800027a4:	00008067          	ret

800027a8 <prvAllocateTCBAndStack>:
prvAllocateTCBAndStack():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3100
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
800027a8:	fd010113          	addi	sp,sp,-48
800027ac:	02112623          	sw	ra,44(sp)
800027b0:	02812423          	sw	s0,40(sp)
800027b4:	03010413          	addi	s0,sp,48
800027b8:	00050793          	mv	a5,a0
800027bc:	fcb42c23          	sw	a1,-40(s0)
800027c0:	fcf41f23          	sh	a5,-34(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
800027c4:	fd842783          	lw	a5,-40(s0)
800027c8:	00079e63          	bnez	a5,800027e4 <prvAllocateTCBAndStack+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 1)
800027cc:	fde45783          	lhu	a5,-34(s0)
800027d0:	00279793          	slli	a5,a5,0x2
800027d4:	00078513          	mv	a0,a5
800027d8:	8edfe0ef          	jal	ra,800010c4 <pvPortMalloc>
800027dc:	00050793          	mv	a5,a0
800027e0:	0080006f          	j	800027e8 <prvAllocateTCBAndStack+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 2)
800027e4:	fd842783          	lw	a5,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 4)
800027e8:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3134 (discriminator 4)

		if( pxStack != NULL )
800027ec:	fe842783          	lw	a5,-24(s0)
800027f0:	02078a63          	beqz	a5,80002824 <prvAllocateTCBAndStack+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3138
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
800027f4:	06000513          	li	a0,96
800027f8:	8cdfe0ef          	jal	ra,800010c4 <pvPortMalloc>
800027fc:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3140

			if( pxNewTCB != NULL )
80002800:	fec42783          	lw	a5,-20(s0)
80002804:	00078a63          	beqz	a5,80002818 <prvAllocateTCBAndStack+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3143
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
80002808:	fec42783          	lw	a5,-20(s0)
8000280c:	fe842703          	lw	a4,-24(s0)
80002810:	02e7a823          	sw	a4,48(a5)
80002814:	0140006f          	j	80002828 <prvAllocateTCBAndStack+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3149
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
80002818:	fe842503          	lw	a0,-24(s0)
8000281c:	a85fe0ef          	jal	ra,800012a0 <vPortFree>
80002820:	0080006f          	j	80002828 <prvAllocateTCBAndStack+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3154
			}
		}
		else
		{
			pxNewTCB = NULL;
80002824:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3159
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
80002828:	fec42783          	lw	a5,-20(s0)
8000282c:	02078263          	beqz	a5,80002850 <prvAllocateTCBAndStack+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3165
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
80002830:	fec42783          	lw	a5,-20(s0)
80002834:	0307a703          	lw	a4,48(a5)
80002838:	fde45783          	lhu	a5,-34(s0)
8000283c:	00279793          	slli	a5,a5,0x2
80002840:	00078613          	mv	a2,a5
80002844:	0a500593          	li	a1,165
80002848:	00070513          	mv	a0,a4
8000284c:	b40ff0ef          	jal	ra,80001b8c <memset>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3170
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
80002850:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3171
}
80002854:	00078513          	mv	a0,a5
80002858:	02c12083          	lw	ra,44(sp)
8000285c:	02812403          	lw	s0,40(sp)
80002860:	03010113          	addi	sp,sp,48
80002864:	00008067          	ret

80002868 <prvDeleteTCB>:
prvDeleteTCB():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3310
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
80002868:	fe010113          	addi	sp,sp,-32
8000286c:	00112e23          	sw	ra,28(sp)
80002870:	00812c23          	sw	s0,24(sp)
80002874:	02010413          	addi	s0,sp,32
80002878:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3335
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
8000287c:	fec42783          	lw	a5,-20(s0)
80002880:	0307a783          	lw	a5,48(a5)
80002884:	00078513          	mv	a0,a5
80002888:	a19fe0ef          	jal	ra,800012a0 <vPortFree>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3339
		}
		#endif

		vPortFree( pxTCB );
8000288c:	fec42503          	lw	a0,-20(s0)
80002890:	a11fe0ef          	jal	ra,800012a0 <vPortFree>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3340
	}
80002894:	00000013          	nop
80002898:	01c12083          	lw	ra,28(sp)
8000289c:	01812403          	lw	s0,24(sp)
800028a0:	02010113          	addi	sp,sp,32
800028a4:	00008067          	ret

800028a8 <prvResetNextTaskUnblockTime>:
prvResetNextTaskUnblockTime():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3346

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
800028a8:	fe010113          	addi	sp,sp,-32
800028ac:	00812e23          	sw	s0,28(sp)
800028b0:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
800028b4:	9301a783          	lw	a5,-1744(gp) # 800039c0 <pxDelayedTaskList>
800028b8:	0007a783          	lw	a5,0(a5)
800028bc:	00079663          	bnez	a5,800028c8 <prvResetNextTaskUnblockTime+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 1)
800028c0:	00100793          	li	a5,1
800028c4:	0080006f          	j	800028cc <prvResetNextTaskUnblockTime+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 2)
800028c8:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 4)
800028cc:	00078863          	beqz	a5,800028dc <prvResetNextTaskUnblockTime+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3355
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
800028d0:	fff00713          	li	a4,-1
800028d4:	94e1ae23          	sw	a4,-1700(gp) # 800039ec <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
800028d8:	0200006f          	j	800028f8 <prvResetNextTaskUnblockTime+0x50>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3363
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
800028dc:	9301a783          	lw	a5,-1744(gp) # 800039c0 <pxDelayedTaskList>
800028e0:	00c7a783          	lw	a5,12(a5)
800028e4:	00c7a783          	lw	a5,12(a5)
800028e8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3364
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
800028ec:	fec42783          	lw	a5,-20(s0)
800028f0:	0047a703          	lw	a4,4(a5)
800028f4:	94e1ae23          	sw	a4,-1700(gp) # 800039ec <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
}
800028f8:	00000013          	nop
800028fc:	01c12403          	lw	s0,28(sp)
80002900:	02010113          	addi	sp,sp,32
80002904:	00008067          	ret

80002908 <PLIC_EnableIRQ>:
PLIC_EnableIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:154
{
80002908:	fd010113          	addi	sp,sp,-48
8000290c:	02812623          	sw	s0,44(sp)
80002910:	03010413          	addi	s0,sp,48
80002914:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:155
    unsigned long hart_id = read_csr(mhartid);
80002918:	f14027f3          	csrr	a5,mhartid
8000291c:	fef42623          	sw	a5,-20(s0)
80002920:	fec42783          	lw	a5,-20(s0)
80002924:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:156
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80002928:	40000737          	lui	a4,0x40000
8000292c:	fdc42783          	lw	a5,-36(s0)
80002930:	0057d793          	srli	a5,a5,0x5
80002934:	fe842683          	lw	a3,-24(s0)
80002938:	00569693          	slli	a3,a3,0x5
8000293c:	00f686b3          	add	a3,a3,a5
80002940:	000017b7          	lui	a5,0x1
80002944:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80002948:	00f687b3          	add	a5,a3,a5
8000294c:	00279793          	slli	a5,a5,0x2
80002950:	00f707b3          	add	a5,a4,a5
80002954:	0007a783          	lw	a5,0(a5)
80002958:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:157
    current |= (uint32_t)1 << (IRQn % 32);
8000295c:	fdc42783          	lw	a5,-36(s0)
80002960:	01f7f793          	andi	a5,a5,31
80002964:	00100713          	li	a4,1
80002968:	00f717b3          	sll	a5,a4,a5
8000296c:	fe442703          	lw	a4,-28(s0)
80002970:	00f767b3          	or	a5,a4,a5
80002974:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:158
    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
80002978:	40000737          	lui	a4,0x40000
8000297c:	fdc42783          	lw	a5,-36(s0)
80002980:	0057d793          	srli	a5,a5,0x5
80002984:	fe842683          	lw	a3,-24(s0)
80002988:	00569693          	slli	a3,a3,0x5
8000298c:	00f686b3          	add	a3,a3,a5
80002990:	000017b7          	lui	a5,0x1
80002994:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80002998:	00f687b3          	add	a5,a3,a5
8000299c:	00279793          	slli	a5,a5,0x2
800029a0:	00f707b3          	add	a5,a4,a5
800029a4:	fe442703          	lw	a4,-28(s0)
800029a8:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:159
}
800029ac:	00000013          	nop
800029b0:	02c12403          	lw	s0,44(sp)
800029b4:	03010113          	addi	sp,sp,48
800029b8:	00008067          	ret

800029bc <PLIC_SetPriority>:
PLIC_SetPriority():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:188
{
800029bc:	fe010113          	addi	sp,sp,-32
800029c0:	00812e23          	sw	s0,28(sp)
800029c4:	02010413          	addi	s0,sp,32
800029c8:	fea42623          	sw	a0,-20(s0)
800029cc:	feb42423          	sw	a1,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:189
    PLIC->SOURCE_PRIORITY[IRQn] = priority;
800029d0:	40000737          	lui	a4,0x40000
800029d4:	fec42783          	lw	a5,-20(s0)
800029d8:	00279793          	slli	a5,a5,0x2
800029dc:	00f707b3          	add	a5,a4,a5
800029e0:	fe842703          	lw	a4,-24(s0)
800029e4:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:190
}
800029e8:	00000013          	nop
800029ec:	01c12403          	lw	s0,28(sp)
800029f0:	02010113          	addi	sp,sp,32
800029f4:	00008067          	ret

800029f8 <Chronos_init>:
Chronos_init():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:22
// Stores information about each running task
extern Task TaskList[ MAX_LOCAL_TASKS ];

////////////////////////////////////////////////////////////
// Initialize Chronos stuff
void Chronos_init(){
800029f8:	ff010113          	addi	sp,sp,-16
800029fc:	00112623          	sw	ra,12(sp)
80002a00:	00812423          	sw	s0,8(sp)
80002a04:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:24
    //Informs the Router this tile ID, that is provided by Harness
    HW_set_32bit_reg(ROUTER_BASE, HW_get_32bit_reg(MY_ID)); 
80002a08:	900007b7          	lui	a5,0x90000
80002a0c:	ffc78513          	addi	a0,a5,-4 # 8ffffffc <__stack_top+0xffc301c>
80002a10:	b68fe0ef          	jal	ra,80000d78 <HW_get_32bit_reg>
80002a14:	00050793          	mv	a5,a0
80002a18:	00078593          	mv	a1,a5
80002a1c:	50000537          	lui	a0,0x50000
80002a20:	b50fe0ef          	jal	ra,80000d70 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:27
    
    // Reads this processor address, calculated by the router
    ProcessorAddr = HW_get_32bit_reg(ROUTER_BASE);
80002a24:	50000537          	lui	a0,0x50000
80002a28:	b50fe0ef          	jal	ra,80000d78 <HW_get_32bit_reg>
80002a2c:	00050713          	mv	a4,a0
80002a30:	8001d7b7          	lui	a5,0x8001d
80002a34:	fce7a823          	sw	a4,-48(a5) # 8001cfd0 <__stack_top+0xfffdfff0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:30

    // Informs the PRINTER this tile address
    HW_set_32bit_reg(PRINTER_CHAR, getXpos(ProcessorAddr));
80002a38:	8001d7b7          	lui	a5,0x8001d
80002a3c:	fd07a783          	lw	a5,-48(a5) # 8001cfd0 <__stack_top+0xfffdfff0>
80002a40:	00078513          	mv	a0,a5
80002a44:	1d0000ef          	jal	ra,80002c14 <getXpos>
80002a48:	00050793          	mv	a5,a0
80002a4c:	00078593          	mv	a1,a5
80002a50:	500007b7          	lui	a5,0x50000
80002a54:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002a58:	b18fe0ef          	jal	ra,80000d70 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:31
    HW_set_32bit_reg(PRINTER_CHAR, getYpos(ProcessorAddr));
80002a5c:	8001d7b7          	lui	a5,0x8001d
80002a60:	fd07a783          	lw	a5,-48(a5) # 8001cfd0 <__stack_top+0xfffdfff0>
80002a64:	00078513          	mv	a0,a5
80002a68:	1d8000ef          	jal	ra,80002c40 <getYpos>
80002a6c:	00050793          	mv	a5,a0
80002a70:	00078593          	mv	a1,a5
80002a74:	500007b7          	lui	a5,0x50000
80002a78:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002a7c:	af4fe0ef          	jal	ra,80000d70 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:34

    // Enables interruption from NI
    NI_enable_irq(TX_RX);
80002a80:	000077b7          	lui	a5,0x7
80002a84:	77778513          	addi	a0,a5,1911 # 7777 <HEAP_SIZE-0x8889>
80002a88:	1e0000ef          	jal	ra,80002c68 <NI_enable_irq>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:37

    // Informs the NI the address to store incoming packets
    HW_set_32bit_reg(NI_ADDR, (unsigned int)&incommingPacket);
80002a8c:	8001d7b7          	lui	a5,0x8001d
80002a90:	ac878793          	addi	a5,a5,-1336 # 8001cac8 <__stack_top+0xfffdfae8>
80002a94:	00078593          	mv	a1,a5
80002a98:	500007b7          	lui	a5,0x50000
80002a9c:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
80002aa0:	ad0fe0ef          	jal	ra,80000d70 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:40
    
    // Initialize the TaskList
    API_TaskListInit(MAX_LOCAL_TASKS);
80002aa4:	00a00513          	li	a0,10
80002aa8:	550000ef          	jal	ra,80002ff8 <API_TaskListInit>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:42

    return;
80002aac:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:43
}
80002ab0:	00c12083          	lw	ra,12(sp)
80002ab4:	00812403          	lw	s0,8(sp)
80002ab8:	01010113          	addi	sp,sp,16
80002abc:	00008067          	ret

80002ac0 <prints>:
prints():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:47

////////////////////////////////////////////////////////////
// Prints a string
void prints(char *text) {
80002ac0:	fd010113          	addi	sp,sp,-48
80002ac4:	02112623          	sw	ra,44(sp)
80002ac8:	02812423          	sw	s0,40(sp)
80002acc:	03010413          	addi	s0,sp,48
80002ad0:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:48
    int i = 0;
80002ad4:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:50 (discriminator 1)
    do {
        HW_set_32bit_reg(PRINTER_CHAR, text[i]);
80002ad8:	fec42783          	lw	a5,-20(s0)
80002adc:	fdc42703          	lw	a4,-36(s0)
80002ae0:	00f707b3          	add	a5,a4,a5
80002ae4:	00078783          	lb	a5,0(a5)
80002ae8:	00078593          	mv	a1,a5
80002aec:	500007b7          	lui	a5,0x50000
80002af0:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002af4:	a7cfe0ef          	jal	ra,80000d70 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:51 (discriminator 1)
        i++;
80002af8:	fec42783          	lw	a5,-20(s0)
80002afc:	00178793          	addi	a5,a5,1
80002b00:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:52 (discriminator 1)
    } while (text[i - 1] != '\0');
80002b04:	fec42783          	lw	a5,-20(s0)
80002b08:	fff78793          	addi	a5,a5,-1
80002b0c:	fdc42703          	lw	a4,-36(s0)
80002b10:	00f707b3          	add	a5,a4,a5
80002b14:	00078783          	lb	a5,0(a5)
80002b18:	fc0790e3          	bnez	a5,80002ad8 <prints+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:53
    return;
80002b1c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:54
}
80002b20:	02c12083          	lw	ra,44(sp)
80002b24:	02812403          	lw	s0,40(sp)
80002b28:	03010113          	addi	sp,sp,48
80002b2c:	00008067          	ret

80002b30 <printi>:
printi():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:58

////////////////////////////////////////////////////////////
// Prints an integer
void printi(int value) {
80002b30:	fe010113          	addi	sp,sp,-32
80002b34:	00112e23          	sw	ra,28(sp)
80002b38:	00812c23          	sw	s0,24(sp)
80002b3c:	02010413          	addi	s0,sp,32
80002b40:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:59
    HW_set_32bit_reg(PRINTER_INT, value);
80002b44:	fec42783          	lw	a5,-20(s0)
80002b48:	00078593          	mv	a1,a5
80002b4c:	500007b7          	lui	a5,0x50000
80002b50:	02478513          	addi	a0,a5,36 # 50000024 <RAM_SIZE+0x4ff80024>
80002b54:	a1cfe0ef          	jal	ra,80000d70 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:60
    return;
80002b58:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:61
}
80002b5c:	01c12083          	lw	ra,28(sp)
80002b60:	01812403          	lw	s0,24(sp)
80002b64:	02010113          	addi	sp,sp,32
80002b68:	00008067          	ret

80002b6c <printsv>:
printsv():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:65

////////////////////////////////////////////////////////////
// Prints a string followed by a integer
void printsv(char *text1, int value1) {
80002b6c:	fe010113          	addi	sp,sp,-32
80002b70:	00112e23          	sw	ra,28(sp)
80002b74:	00812c23          	sw	s0,24(sp)
80002b78:	02010413          	addi	s0,sp,32
80002b7c:	fea42623          	sw	a0,-20(s0)
80002b80:	feb42423          	sw	a1,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:66
    prints(text1);
80002b84:	fec42503          	lw	a0,-20(s0)
80002b88:	f39ff0ef          	jal	ra,80002ac0 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:67
    printi(value1);
80002b8c:	fe842503          	lw	a0,-24(s0)
80002b90:	fa1ff0ef          	jal	ra,80002b30 <printi>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:68
    prints("\n");
80002b94:	800037b7          	lui	a5,0x80003
80002b98:	6c878513          	addi	a0,a5,1736 # 800036c8 <__stack_top+0xfffc66e8>
80002b9c:	f25ff0ef          	jal	ra,80002ac0 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:69
    return;
80002ba0:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:70
}
80002ba4:	01c12083          	lw	ra,28(sp)
80002ba8:	01812403          	lw	s0,24(sp)
80002bac:	02010113          	addi	sp,sp,32
80002bb0:	00008067          	ret

80002bb4 <printsvsv>:
printsvsv():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:74

////////////////////////////////////////////////////////////
// Prints two strings and two integers interspersed
void printsvsv(char *text1, int value1, char *text2, int value2) {
80002bb4:	fe010113          	addi	sp,sp,-32
80002bb8:	00112e23          	sw	ra,28(sp)
80002bbc:	00812c23          	sw	s0,24(sp)
80002bc0:	02010413          	addi	s0,sp,32
80002bc4:	fea42623          	sw	a0,-20(s0)
80002bc8:	feb42423          	sw	a1,-24(s0)
80002bcc:	fec42223          	sw	a2,-28(s0)
80002bd0:	fed42023          	sw	a3,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:75
    prints(text1);
80002bd4:	fec42503          	lw	a0,-20(s0)
80002bd8:	ee9ff0ef          	jal	ra,80002ac0 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:76
    printi(value1);
80002bdc:	fe842503          	lw	a0,-24(s0)
80002be0:	f51ff0ef          	jal	ra,80002b30 <printi>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:77
    prints(text2);
80002be4:	fe442503          	lw	a0,-28(s0)
80002be8:	ed9ff0ef          	jal	ra,80002ac0 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:78
    printi(value2);
80002bec:	fe042503          	lw	a0,-32(s0)
80002bf0:	f41ff0ef          	jal	ra,80002b30 <printi>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:79
    prints("\n");
80002bf4:	800037b7          	lui	a5,0x80003
80002bf8:	6c878513          	addi	a0,a5,1736 # 800036c8 <__stack_top+0xfffc66e8>
80002bfc:	ec5ff0ef          	jal	ra,80002ac0 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:80
    return;
80002c00:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:81
}
80002c04:	01c12083          	lw	ra,28(sp)
80002c08:	01812403          	lw	s0,24(sp)
80002c0c:	02010113          	addi	sp,sp,32
80002c10:	00008067          	ret

80002c14 <getXpos>:
getXpos():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:85

////////////////////////////////////////////////////////////
// Gets the X coordinate from the address
unsigned int getXpos(unsigned int addr) { return ((addr & 0x0000FF00) >> 8); }
80002c14:	fe010113          	addi	sp,sp,-32
80002c18:	00812e23          	sw	s0,28(sp)
80002c1c:	02010413          	addi	s0,sp,32
80002c20:	fea42623          	sw	a0,-20(s0)
80002c24:	fec42783          	lw	a5,-20(s0)
80002c28:	0087d793          	srli	a5,a5,0x8
80002c2c:	0ff7f793          	andi	a5,a5,255
80002c30:	00078513          	mv	a0,a5
80002c34:	01c12403          	lw	s0,28(sp)
80002c38:	02010113          	addi	sp,sp,32
80002c3c:	00008067          	ret

80002c40 <getYpos>:
getYpos():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:89

////////////////////////////////////////////////////////////
// Gets the Y coordinate from the address
unsigned int getYpos(unsigned int addr) { return (addr & 0x000000FF); }
80002c40:	fe010113          	addi	sp,sp,-32
80002c44:	00812e23          	sw	s0,28(sp)
80002c48:	02010413          	addi	s0,sp,32
80002c4c:	fea42623          	sw	a0,-20(s0)
80002c50:	fec42783          	lw	a5,-20(s0)
80002c54:	0ff7f793          	andi	a5,a5,255
80002c58:	00078513          	mv	a0,a5
80002c5c:	01c12403          	lw	s0,28(sp)
80002c60:	02010113          	addi	sp,sp,32
80002c64:	00008067          	ret

80002c68 <NI_enable_irq>:
NI_enable_irq():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:102
    return;
}

////////////////////////////////////////////////////////////
// Enables interruptions incomming from NI
void NI_enable_irq(int which){
80002c68:	fe010113          	addi	sp,sp,-32
80002c6c:	00112e23          	sw	ra,28(sp)
80002c70:	00812c23          	sw	s0,24(sp)
80002c74:	02010413          	addi	s0,sp,32
80002c78:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:103
	if (which == TX || which == TX_RX){
80002c7c:	fec42703          	lw	a4,-20(s0)
80002c80:	000027b7          	lui	a5,0x2
80002c84:	22278793          	addi	a5,a5,546 # 2222 <HEAP_SIZE-0xddde>
80002c88:	00f70a63          	beq	a4,a5,80002c9c <NI_enable_irq+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:103 (discriminator 1)
80002c8c:	fec42703          	lw	a4,-20(s0)
80002c90:	000077b7          	lui	a5,0x7
80002c94:	77778793          	addi	a5,a5,1911 # 7777 <HEAP_SIZE-0x8889>
80002c98:	00f71c63          	bne	a4,a5,80002cb0 <NI_enable_irq+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:104
        PLIC_EnableIRQ(NI_TX_IRQn);
80002c9c:	00100513          	li	a0,1
80002ca0:	c69ff0ef          	jal	ra,80002908 <PLIC_EnableIRQ>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:105
        PLIC_SetPriority(NI_TX_IRQn, 1);
80002ca4:	00100593          	li	a1,1
80002ca8:	00100513          	li	a0,1
80002cac:	d11ff0ef          	jal	ra,800029bc <PLIC_SetPriority>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:107
    }
    if (which == RX || which == TX_RX){
80002cb0:	fec42703          	lw	a4,-20(s0)
80002cb4:	000037b7          	lui	a5,0x3
80002cb8:	33378793          	addi	a5,a5,819 # 3333 <HEAP_SIZE-0xcccd>
80002cbc:	00f70a63          	beq	a4,a5,80002cd0 <NI_enable_irq+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:107 (discriminator 1)
80002cc0:	fec42703          	lw	a4,-20(s0)
80002cc4:	000077b7          	lui	a5,0x7
80002cc8:	77778793          	addi	a5,a5,1911 # 7777 <HEAP_SIZE-0x8889>
80002ccc:	00f71e63          	bne	a4,a5,80002ce8 <NI_enable_irq+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:108
        PLIC_EnableIRQ(NI_RX_IRQn);
80002cd0:	00200513          	li	a0,2
80002cd4:	c35ff0ef          	jal	ra,80002908 <PLIC_EnableIRQ>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:109
        PLIC_SetPriority(NI_RX_IRQn, 1);
80002cd8:	00100593          	li	a1,1
80002cdc:	00200513          	li	a0,2
80002ce0:	cddff0ef          	jal	ra,800029bc <PLIC_SetPriority>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:111
    }
    return;
80002ce4:	00000013          	nop
80002ce8:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:112
}
80002cec:	01c12083          	lw	ra,28(sp)
80002cf0:	01812403          	lw	s0,24(sp)
80002cf4:	02010113          	addi	sp,sp,32
80002cf8:	00008067          	ret

80002cfc <External_1_IRQHandler>:
External_1_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:124
    return;
}

////////////////////////////////////////////////////////////
// Interruptions handler for TX
uint8_t External_1_IRQHandler(void){ 
80002cfc:	ff010113          	addi	sp,sp,-16
80002d00:	00112623          	sw	ra,12(sp)
80002d04:	00812423          	sw	s0,8(sp)
80002d08:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:125
    prints("INTERRUPTION TX\n");
80002d0c:	800037b7          	lui	a5,0x80003
80002d10:	6e078513          	addi	a0,a5,1760 # 800036e0 <__stack_top+0xfffc6700>
80002d14:	dadff0ef          	jal	ra,80002ac0 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:126
    HW_set_32bit_reg(NI_TX, DONE);
80002d18:	000057b7          	lui	a5,0x5
80002d1c:	55578593          	addi	a1,a5,1365 # 5555 <HEAP_SIZE-0xaaab>
80002d20:	500007b7          	lui	a5,0x50000
80002d24:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80002d28:	848fe0ef          	jal	ra,80000d70 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:127
    return 0;
80002d2c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:128
}
80002d30:	00078513          	mv	a0,a5
80002d34:	00c12083          	lw	ra,12(sp)
80002d38:	00812403          	lw	s0,8(sp)
80002d3c:	01010113          	addi	sp,sp,16
80002d40:	00008067          	ret

80002d44 <External_2_IRQHandler>:
External_2_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:132

////////////////////////////////////////////////////////////
// Interruptions handler for RX
uint8_t External_2_IRQHandler(void){ 
80002d44:	ff010113          	addi	sp,sp,-16
80002d48:	00112623          	sw	ra,12(sp)
80002d4c:	00812423          	sw	s0,8(sp)
80002d50:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:133
    prints("INTERRUPTION RX\n");
80002d54:	800037b7          	lui	a5,0x80003
80002d58:	6f478513          	addi	a0,a5,1780 # 800036f4 <__stack_top+0xfffc6714>
80002d5c:	d65ff0ef          	jal	ra,80002ac0 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:134
    HW_set_32bit_reg(NI_RX, DONE);
80002d60:	000057b7          	lui	a5,0x5
80002d64:	55578593          	addi	a1,a5,1365 # 5555 <HEAP_SIZE-0xaaab>
80002d68:	500007b7          	lui	a5,0x50000
80002d6c:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80002d70:	800fe0ef          	jal	ra,80000d70 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:135
    return 0;
80002d74:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:136
}
80002d78:	00078513          	mv	a0,a5
80002d7c:	00c12083          	lw	ra,12(sp)
80002d80:	00812403          	lw	s0,8(sp)
80002d84:	01010113          	addi	sp,sp,16
80002d88:	00008067          	ret

80002d8c <mySwap>:
mySwap():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:141

////////////////////////////////////////////////////////////
// https://www.techiedelight.com/implement-itoa-function-in-c/
// Function to swap two numbers
void mySwap(char *x, char *y) {
80002d8c:	fd010113          	addi	sp,sp,-48
80002d90:	02812623          	sw	s0,44(sp)
80002d94:	03010413          	addi	s0,sp,48
80002d98:	fca42e23          	sw	a0,-36(s0)
80002d9c:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:142
    char t = *x; *x = *y; *y = t;
80002da0:	fdc42783          	lw	a5,-36(s0)
80002da4:	0007c783          	lbu	a5,0(a5)
80002da8:	fef407a3          	sb	a5,-17(s0)
80002dac:	fd842783          	lw	a5,-40(s0)
80002db0:	00078703          	lb	a4,0(a5)
80002db4:	fdc42783          	lw	a5,-36(s0)
80002db8:	00e78023          	sb	a4,0(a5)
80002dbc:	fd842783          	lw	a5,-40(s0)
80002dc0:	fef44703          	lbu	a4,-17(s0)
80002dc4:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:143
}
80002dc8:	00000013          	nop
80002dcc:	02c12403          	lw	s0,44(sp)
80002dd0:	03010113          	addi	sp,sp,48
80002dd4:	00008067          	ret

80002dd8 <reverse>:
reverse():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:145
// Function to reverse `buffer[i…j]`
char* reverse(char *buffer, int i, int j){
80002dd8:	fe010113          	addi	sp,sp,-32
80002ddc:	00112e23          	sw	ra,28(sp)
80002de0:	00812c23          	sw	s0,24(sp)
80002de4:	02010413          	addi	s0,sp,32
80002de8:	fea42623          	sw	a0,-20(s0)
80002dec:	feb42423          	sw	a1,-24(s0)
80002df0:	fec42223          	sw	a2,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:146
    while (i < j) {
80002df4:	0400006f          	j	80002e34 <reverse+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:147
        mySwap(&buffer[i++], &buffer[j--]);
80002df8:	fe842783          	lw	a5,-24(s0)
80002dfc:	00178713          	addi	a4,a5,1
80002e00:	fee42423          	sw	a4,-24(s0)
80002e04:	00078713          	mv	a4,a5
80002e08:	fec42783          	lw	a5,-20(s0)
80002e0c:	00e786b3          	add	a3,a5,a4
80002e10:	fe442783          	lw	a5,-28(s0)
80002e14:	fff78713          	addi	a4,a5,-1
80002e18:	fee42223          	sw	a4,-28(s0)
80002e1c:	00078713          	mv	a4,a5
80002e20:	fec42783          	lw	a5,-20(s0)
80002e24:	00e787b3          	add	a5,a5,a4
80002e28:	00078593          	mv	a1,a5
80002e2c:	00068513          	mv	a0,a3
80002e30:	f5dff0ef          	jal	ra,80002d8c <mySwap>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:146
    while (i < j) {
80002e34:	fe842703          	lw	a4,-24(s0)
80002e38:	fe442783          	lw	a5,-28(s0)
80002e3c:	faf74ee3          	blt	a4,a5,80002df8 <reverse+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:150
    }
 
    return buffer;
80002e40:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:151
}
80002e44:	00078513          	mv	a0,a5
80002e48:	01c12083          	lw	ra,28(sp)
80002e4c:	01812403          	lw	s0,24(sp)
80002e50:	02010113          	addi	sp,sp,32
80002e54:	00008067          	ret

80002e58 <myItoa>:
myItoa():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:153
// Iterative function to implement `itoa()` function in C
char* myItoa(int value, char* buffer, int base){
80002e58:	fd010113          	addi	sp,sp,-48
80002e5c:	02112623          	sw	ra,44(sp)
80002e60:	02812423          	sw	s0,40(sp)
80002e64:	03010413          	addi	s0,sp,48
80002e68:	fca42e23          	sw	a0,-36(s0)
80002e6c:	fcb42c23          	sw	a1,-40(s0)
80002e70:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:155
    // invalid input
    if (base < 2 || base > 32) {
80002e74:	fd442703          	lw	a4,-44(s0)
80002e78:	00100793          	li	a5,1
80002e7c:	00e7d863          	ble	a4,a5,80002e8c <myItoa+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:155 (discriminator 1)
80002e80:	fd442703          	lw	a4,-44(s0)
80002e84:	02000793          	li	a5,32
80002e88:	00e7d663          	ble	a4,a5,80002e94 <myItoa+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:156
        return buffer;
80002e8c:	fd842783          	lw	a5,-40(s0)
80002e90:	1540006f          	j	80002fe4 <myItoa+0x18c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:160
    }
    // consider the absolute value of the number
    int n;
    if (value < 0)
80002e94:	fdc42783          	lw	a5,-36(s0)
80002e98:	0007da63          	bgez	a5,80002eac <myItoa+0x54>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:161
        n = value * -1;
80002e9c:	fdc42783          	lw	a5,-36(s0)
80002ea0:	40f007b3          	neg	a5,a5
80002ea4:	fef42623          	sw	a5,-20(s0)
80002ea8:	00c0006f          	j	80002eb4 <myItoa+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:163
    else 
        n = value;
80002eac:	fdc42783          	lw	a5,-36(s0)
80002eb0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:165

    int i = 0;
80002eb4:	fe042423          	sw	zero,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:166
    while (n){
80002eb8:	09c0006f          	j	80002f54 <myItoa+0xfc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:167
        int r = n % base;
80002ebc:	fec42703          	lw	a4,-20(s0)
80002ec0:	fd442783          	lw	a5,-44(s0)
80002ec4:	02f767b3          	rem	a5,a4,a5
80002ec8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:169
 
        if (r >= 10) {
80002ecc:	fe442703          	lw	a4,-28(s0)
80002ed0:	00900793          	li	a5,9
80002ed4:	02e7de63          	ble	a4,a5,80002f10 <myItoa+0xb8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:170
            buffer[i++] = 65 + (r - 10);
80002ed8:	fe442783          	lw	a5,-28(s0)
80002edc:	0ff7f793          	andi	a5,a5,255
80002ee0:	03778793          	addi	a5,a5,55
80002ee4:	0ff7f693          	andi	a3,a5,255
80002ee8:	fe842783          	lw	a5,-24(s0)
80002eec:	00178713          	addi	a4,a5,1
80002ef0:	fee42423          	sw	a4,-24(s0)
80002ef4:	00078713          	mv	a4,a5
80002ef8:	fd842783          	lw	a5,-40(s0)
80002efc:	00e787b3          	add	a5,a5,a4
80002f00:	01869713          	slli	a4,a3,0x18
80002f04:	41875713          	srai	a4,a4,0x18
80002f08:	00e78023          	sb	a4,0(a5)
80002f0c:	0380006f          	j	80002f44 <myItoa+0xec>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:173
        }
        else {
            buffer[i++] = 48 + r;
80002f10:	fe442783          	lw	a5,-28(s0)
80002f14:	0ff7f793          	andi	a5,a5,255
80002f18:	03078793          	addi	a5,a5,48
80002f1c:	0ff7f693          	andi	a3,a5,255
80002f20:	fe842783          	lw	a5,-24(s0)
80002f24:	00178713          	addi	a4,a5,1
80002f28:	fee42423          	sw	a4,-24(s0)
80002f2c:	00078713          	mv	a4,a5
80002f30:	fd842783          	lw	a5,-40(s0)
80002f34:	00e787b3          	add	a5,a5,a4
80002f38:	01869713          	slli	a4,a3,0x18
80002f3c:	41875713          	srai	a4,a4,0x18
80002f40:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:176
        }
 
        n = n / base;
80002f44:	fec42703          	lw	a4,-20(s0)
80002f48:	fd442783          	lw	a5,-44(s0)
80002f4c:	02f747b3          	div	a5,a4,a5
80002f50:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:166
    while (n){
80002f54:	fec42783          	lw	a5,-20(s0)
80002f58:	f60792e3          	bnez	a5,80002ebc <myItoa+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:179
    }
    // if the number is 0
    if (i == 0) {
80002f5c:	fe842783          	lw	a5,-24(s0)
80002f60:	02079263          	bnez	a5,80002f84 <myItoa+0x12c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:180
        buffer[i++] = '0';
80002f64:	fe842783          	lw	a5,-24(s0)
80002f68:	00178713          	addi	a4,a5,1
80002f6c:	fee42423          	sw	a4,-24(s0)
80002f70:	00078713          	mv	a4,a5
80002f74:	fd842783          	lw	a5,-40(s0)
80002f78:	00e787b3          	add	a5,a5,a4
80002f7c:	03000713          	li	a4,48
80002f80:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:185
    }
    // If the base is 10 and the value is negative, the resulting string
    // is preceded with a minus sign (-)
    // With any other base, value is always considered unsigned
    if (value < 0 && base == 10) {
80002f84:	fdc42783          	lw	a5,-36(s0)
80002f88:	0207d863          	bgez	a5,80002fb8 <myItoa+0x160>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:185 (discriminator 1)
80002f8c:	fd442703          	lw	a4,-44(s0)
80002f90:	00a00793          	li	a5,10
80002f94:	02f71263          	bne	a4,a5,80002fb8 <myItoa+0x160>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:186
        buffer[i++] = '-';
80002f98:	fe842783          	lw	a5,-24(s0)
80002f9c:	00178713          	addi	a4,a5,1
80002fa0:	fee42423          	sw	a4,-24(s0)
80002fa4:	00078713          	mv	a4,a5
80002fa8:	fd842783          	lw	a5,-40(s0)
80002fac:	00e787b3          	add	a5,a5,a4
80002fb0:	02d00713          	li	a4,45
80002fb4:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:188
    }
    buffer[i] = '\0'; // null terminate string
80002fb8:	fe842783          	lw	a5,-24(s0)
80002fbc:	fd842703          	lw	a4,-40(s0)
80002fc0:	00f707b3          	add	a5,a4,a5
80002fc4:	00078023          	sb	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:190
    // reverse the string and return it
    return reverse(buffer, 0, i - 1);
80002fc8:	fe842783          	lw	a5,-24(s0)
80002fcc:	fff78793          	addi	a5,a5,-1
80002fd0:	00078613          	mv	a2,a5
80002fd4:	00000593          	li	a1,0
80002fd8:	fd842503          	lw	a0,-40(s0)
80002fdc:	dfdff0ef          	jal	ra,80002dd8 <reverse>
80002fe0:	00050793          	mv	a5,a0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:191
}
80002fe4:	00078513          	mv	a0,a5
80002fe8:	02c12083          	lw	ra,44(sp)
80002fec:	02812403          	lw	s0,40(sp)
80002ff0:	03010113          	addi	sp,sp,48
80002ff4:	00008067          	ret

80002ff8 <API_TaskListInit>:
API_TaskListInit():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:13
#include "chronos.h"

// Stores information about each running task
extern Task TaskList[ MAX_LOCAL_TASKS ];

void API_TaskListInit(){
80002ff8:	fe010113          	addi	sp,sp,-32
80002ffc:	00812e23          	sw	s0,28(sp)
80003000:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:15
    unsigned int i;
    for (i = 0; i < MAX_LOCAL_TASKS; i++){
80003004:	fe042623          	sw	zero,-20(s0)
80003008:	0c40006f          	j	800030cc <API_TaskListInit+0xd4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:16 (discriminator 3)
        TaskList[ i ].TaskID = (unsigned int)NULL;
8000300c:	8001d6b7          	lui	a3,0x8001d
80003010:	fec42703          	lw	a4,-20(s0)
80003014:	00070793          	mv	a5,a4
80003018:	00279793          	slli	a5,a5,0x2
8000301c:	00e787b3          	add	a5,a5,a4
80003020:	00279793          	slli	a5,a5,0x2
80003024:	f0868713          	addi	a4,a3,-248 # 8001cf08 <__stack_top+0xfffdff28>
80003028:	00e787b3          	add	a5,a5,a4
8000302c:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:17 (discriminator 3)
        TaskList[ i ].AppID = (unsigned int)NULL;
80003030:	8001d7b7          	lui	a5,0x8001d
80003034:	fec42703          	lw	a4,-20(s0)
80003038:	f0878693          	addi	a3,a5,-248 # 8001cf08 <__stack_top+0xfffdff28>
8000303c:	00070793          	mv	a5,a4
80003040:	00279793          	slli	a5,a5,0x2
80003044:	00e787b3          	add	a5,a5,a4
80003048:	00279793          	slli	a5,a5,0x2
8000304c:	00f687b3          	add	a5,a3,a5
80003050:	0007a223          	sw	zero,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:18 (discriminator 3)
        TaskList[ i ].TaskHandler = NULL;
80003054:	8001d7b7          	lui	a5,0x8001d
80003058:	fec42703          	lw	a4,-20(s0)
8000305c:	f0878693          	addi	a3,a5,-248 # 8001cf08 <__stack_top+0xfffdff28>
80003060:	00070793          	mv	a5,a4
80003064:	00279793          	slli	a5,a5,0x2
80003068:	00e787b3          	add	a5,a5,a4
8000306c:	00279793          	slli	a5,a5,0x2
80003070:	00f687b3          	add	a5,a3,a5
80003074:	0007a423          	sw	zero,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:19 (discriminator 3)
        TaskList[ i ].MsgToReceive = NULL;
80003078:	8001d6b7          	lui	a3,0x8001d
8000307c:	fec42703          	lw	a4,-20(s0)
80003080:	00070793          	mv	a5,a4
80003084:	00279793          	slli	a5,a5,0x2
80003088:	00e787b3          	add	a5,a5,a4
8000308c:	00279793          	slli	a5,a5,0x2
80003090:	f0868713          	addi	a4,a3,-248 # 8001cf08 <__stack_top+0xfffdff28>
80003094:	00e787b3          	add	a5,a5,a4
80003098:	0007a823          	sw	zero,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:20 (discriminator 3)
        TaskList[ i ].waitingMsg = FALSE;
8000309c:	8001d7b7          	lui	a5,0x8001d
800030a0:	fec42703          	lw	a4,-20(s0)
800030a4:	f0878693          	addi	a3,a5,-248 # 8001cf08 <__stack_top+0xfffdff28>
800030a8:	00070793          	mv	a5,a4
800030ac:	00279793          	slli	a5,a5,0x2
800030b0:	00e787b3          	add	a5,a5,a4
800030b4:	00279793          	slli	a5,a5,0x2
800030b8:	00f687b3          	add	a5,a3,a5
800030bc:	0007a623          	sw	zero,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 3)
    for (i = 0; i < MAX_LOCAL_TASKS; i++){
800030c0:	fec42783          	lw	a5,-20(s0)
800030c4:	00178793          	addi	a5,a5,1
800030c8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 1)
800030cc:	fec42703          	lw	a4,-20(s0)
800030d0:	00900793          	li	a5,9
800030d4:	f2e7fce3          	bleu	a4,a5,8000300c <API_TaskListInit+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:22
    }
    return;
800030d8:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:23
}
800030dc:	01c12403          	lw	s0,28(sp)
800030e0:	02010113          	addi	sp,sp,32
800030e4:	00008067          	ret

800030e8 <__syscall_error>:
__syscall_error():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/system_call.h:34
#define SYS_RECV_MSG        ( 30 )
#define SYS_PRINTI          ( 40 )
#define SYS_PRINTS          ( 50 )
#define SYS_TESTING         ( 66 )

static inline long __syscall_error(long a0) {
800030e8:	fe010113          	addi	sp,sp,-32
800030ec:	00112e23          	sw	ra,28(sp)
800030f0:	00812c23          	sw	s0,24(sp)
800030f4:	02010413          	addi	s0,sp,32
800030f8:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/system_call.h:35
  errno = -a0;
800030fc:	478000ef          	jal	ra,80003574 <__errno>
80003100:	00050713          	mv	a4,a0
80003104:	fec42783          	lw	a5,-20(s0)
80003108:	40f007b3          	neg	a5,a5
8000310c:	00f72023          	sw	a5,0(a4) # 40000000 <RAM_SIZE+0x3ff80000>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/system_call.h:36
  return -1;
80003110:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/system_call.h:37
}
80003114:	00078513          	mv	a0,a5
80003118:	01c12083          	lw	ra,28(sp)
8000311c:	01812403          	lw	s0,24(sp)
80003120:	02010113          	addi	sp,sp,32
80003124:	00008067          	ret

80003128 <__internal_syscall>:
__internal_syscall():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/system_call.h:39

static inline long __internal_syscall(long n, long _a0, long _a1, long _a2, long _a3, long _a4, long _a5) {
80003128:	fd010113          	addi	sp,sp,-48
8000312c:	02812623          	sw	s0,44(sp)
80003130:	03010413          	addi	s0,sp,48
80003134:	fea42623          	sw	a0,-20(s0)
80003138:	feb42423          	sw	a1,-24(s0)
8000313c:	fec42223          	sw	a2,-28(s0)
80003140:	fed42023          	sw	a3,-32(s0)
80003144:	fce42e23          	sw	a4,-36(s0)
80003148:	fcf42c23          	sw	a5,-40(s0)
8000314c:	fd042a23          	sw	a6,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/system_call.h:40
  register long a0 asm("a0") = _a0;
80003150:	fe842503          	lw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/system_call.h:41
  register long a1 asm("a1") = _a1;
80003154:	fe442583          	lw	a1,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/system_call.h:42
  register long a2 asm("a2") = _a2;
80003158:	fe042603          	lw	a2,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/system_call.h:43
  register long a3 asm("a3") = _a3;
8000315c:	fdc42683          	lw	a3,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/system_call.h:44
  register long a4 asm("a4") = _a4;
80003160:	fd842703          	lw	a4,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/system_call.h:45
  register long a5 asm("a5") = _a5;
80003164:	fd442783          	lw	a5,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/system_call.h:46
  register long syscall_id asm("a7") = n;
80003168:	fec42883          	lw	a7,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/system_call.h:48

  asm volatile ("ecall"
8000316c:	00000073          	ecall
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/system_call.h:51
		: "+r"(a0) : "r"(a1), "r"(a2), "r"(a3), "r"(a4), "r"(a5), "r"(syscall_id));

  return a0;
80003170:	00050793          	mv	a5,a0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/system_call.h:52
}
80003174:	00078513          	mv	a0,a5
80003178:	02c12403          	lw	s0,44(sp)
8000317c:	03010113          	addi	sp,sp,48
80003180:	00008067          	ret

80003184 <syscall_errno>:
syscall_errno():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/system_call.h:54

static inline long syscall_errno(long n, long _a0, long _a1, long _a2, long _a3, long _a4, long _a5) {
80003184:	fc010113          	addi	sp,sp,-64
80003188:	02112e23          	sw	ra,60(sp)
8000318c:	02812c23          	sw	s0,56(sp)
80003190:	04010413          	addi	s0,sp,64
80003194:	fca42e23          	sw	a0,-36(s0)
80003198:	fcb42c23          	sw	a1,-40(s0)
8000319c:	fcc42a23          	sw	a2,-44(s0)
800031a0:	fcd42823          	sw	a3,-48(s0)
800031a4:	fce42623          	sw	a4,-52(s0)
800031a8:	fcf42423          	sw	a5,-56(s0)
800031ac:	fd042223          	sw	a6,-60(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/system_call.h:55
  long a0 = __internal_syscall(n, _a0, _a1, _a2, _a3, _a4, _a5);
800031b0:	fc442803          	lw	a6,-60(s0)
800031b4:	fc842783          	lw	a5,-56(s0)
800031b8:	fcc42703          	lw	a4,-52(s0)
800031bc:	fd042683          	lw	a3,-48(s0)
800031c0:	fd442603          	lw	a2,-44(s0)
800031c4:	fd842583          	lw	a1,-40(s0)
800031c8:	fdc42503          	lw	a0,-36(s0)
800031cc:	f5dff0ef          	jal	ra,80003128 <__internal_syscall>
800031d0:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/system_call.h:57

  if (a0 < 0)
800031d4:	fec42783          	lw	a5,-20(s0)
800031d8:	0007da63          	bgez	a5,800031ec <syscall_errno+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/system_call.h:58
    return __syscall_error (a0);
800031dc:	fec42503          	lw	a0,-20(s0)
800031e0:	f09ff0ef          	jal	ra,800030e8 <__syscall_error>
800031e4:	00050793          	mv	a5,a0
800031e8:	0080006f          	j	800031f0 <syscall_errno+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/system_call.h:60
  else
    return a0;
800031ec:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/system_call.h:61
}
800031f0:	00078513          	mv	a0,a5
800031f4:	03c12083          	lw	ra,60(sp)
800031f8:	03812403          	lw	s0,56(sp)
800031fc:	04010113          	addi	sp,sp,64
80003200:	00008067          	ret

80003204 <sys_Testing>:
sys_Testing():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/system_call.c:38
/* Prints a string using the printer peripheral */
int sys_Prints(unsigned int addr){
	return syscall_errno(SYS_PRINTS, addr, 0, 0, 0, 0, 0);
}

int sys_Testing(unsigned int arg0, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4, unsigned int arg5){
80003204:	fd010113          	addi	sp,sp,-48
80003208:	02112623          	sw	ra,44(sp)
8000320c:	02812423          	sw	s0,40(sp)
80003210:	03010413          	addi	s0,sp,48
80003214:	fea42623          	sw	a0,-20(s0)
80003218:	feb42423          	sw	a1,-24(s0)
8000321c:	fec42223          	sw	a2,-28(s0)
80003220:	fed42023          	sw	a3,-32(s0)
80003224:	fce42e23          	sw	a4,-36(s0)
80003228:	fcf42c23          	sw	a5,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/system_call.c:39
    return syscall_errno(SYS_TESTING, arg0, arg1, arg2, arg3, arg4, arg5);
8000322c:	fec42583          	lw	a1,-20(s0)
80003230:	fe842603          	lw	a2,-24(s0)
80003234:	fe442683          	lw	a3,-28(s0)
80003238:	fe042703          	lw	a4,-32(s0)
8000323c:	fdc42783          	lw	a5,-36(s0)
80003240:	fd842503          	lw	a0,-40(s0)
80003244:	00050813          	mv	a6,a0
80003248:	04200513          	li	a0,66
8000324c:	f39ff0ef          	jal	ra,80003184 <syscall_errno>
80003250:	00050793          	mv	a5,a0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/system_call.c:40
}
80003254:	00078513          	mv	a0,a5
80003258:	02c12083          	lw	ra,44(sp)
8000325c:	02812403          	lw	s0,40(sp)
80003260:	03010113          	addi	sp,sp,48
80003264:	00008067          	ret

80003268 <handle_syscall>:
handle_syscall():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/system_call.c:43

/* Syscall Handler */
void handle_syscall(unsigned int *svc_args){
80003268:	fe010113          	addi	sp,sp,-32
8000326c:	00112e23          	sw	ra,28(sp)
80003270:	00812c23          	sw	s0,24(sp)
80003274:	02010413          	addi	s0,sp,32
80003278:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/system_call.c:45
    
    vPortEnterCritical();
8000327c:	9b0fe0ef          	jal	ra,8000142c <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/system_call.c:46
    prints("Cheguei aqui!!!!!!! sucessooo :D\n");
80003280:	800037b7          	lui	a5,0x80003
80003284:	78078513          	addi	a0,a5,1920 # 80003780 <__stack_top+0xfffc67a0>
80003288:	839ff0ef          	jal	ra,80002ac0 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/system_call.c:47
    vPortExitCritical();
8000328c:	9d4fe0ef          	jal	ra,80001460 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/system_call.c:48
    return;
80003290:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/system_call.c:49
80003294:	01c12083          	lw	ra,28(sp)
80003298:	01812403          	lw	s0,24(sp)
8000329c:	02010113          	addi	sp,sp,32
800032a0:	00008067          	ret

800032a4 <PLIC_init>:
PLIC_init():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:124
{
800032a4:	fe010113          	addi	sp,sp,-32
800032a8:	00812e23          	sw	s0,28(sp)
800032ac:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:126
    unsigned long hart_id = read_csr(mhartid);
800032b0:	f14027f3          	csrr	a5,mhartid
800032b4:	fef42423          	sw	a5,-24(s0)
800032b8:	fe842783          	lw	a5,-24(s0)
800032bc:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
800032c0:	fe042623          	sw	zero,-20(s0)
800032c4:	03c0006f          	j	80003300 <PLIC_init+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:131 (discriminator 3)
        PLIC->TARGET_ENABLES[hart_id].ENABLES[inc] = 0;
800032c8:	40000737          	lui	a4,0x40000
800032cc:	fe442783          	lw	a5,-28(s0)
800032d0:	00579693          	slli	a3,a5,0x5
800032d4:	fec42783          	lw	a5,-20(s0)
800032d8:	00f686b3          	add	a3,a3,a5
800032dc:	000017b7          	lui	a5,0x1
800032e0:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
800032e4:	00f687b3          	add	a5,a3,a5
800032e8:	00279793          	slli	a5,a5,0x2
800032ec:	00f707b3          	add	a5,a4,a5
800032f0:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 3)
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
800032f4:	fec42783          	lw	a5,-20(s0)
800032f8:	00178793          	addi	a5,a5,1
800032fc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 1)
80003300:	fec42783          	lw	a5,-20(s0)
80003304:	fc0782e3          	beqz	a5,800032c8 <PLIC_init+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
80003308:	fe042623          	sw	zero,-20(s0)
8000330c:	0240006f          	j	80003330 <PLIC_init+0x8c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:139 (discriminator 3)
        PLIC->SOURCE_PRIORITY[inc] = 0;
80003310:	40000737          	lui	a4,0x40000
80003314:	fec42783          	lw	a5,-20(s0)
80003318:	00279793          	slli	a5,a5,0x2
8000331c:	00f707b3          	add	a5,a4,a5
80003320:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 3)
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
80003324:	fec42783          	lw	a5,-20(s0)
80003328:	00178793          	addi	a5,a5,1
8000332c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 1)
80003330:	fec42703          	lw	a4,-20(s0)
80003334:	01e00793          	li	a5,30
80003338:	fce7fce3          	bleu	a4,a5,80003310 <PLIC_init+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:143
    PLIC->TARGET[hart_id].PRIORITY_THRESHOLD = 0;
8000333c:	40000737          	lui	a4,0x40000
80003340:	fe442783          	lw	a5,-28(s0)
80003344:	20078793          	addi	a5,a5,512
80003348:	00c79793          	slli	a5,a5,0xc
8000334c:	00f707b3          	add	a5,a4,a5
80003350:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:146
    set_csr(mie, MIP_MEIP);
80003354:	000017b7          	lui	a5,0x1
80003358:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
8000335c:	3047a7f3          	csrrs	a5,mie,a5
80003360:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:147
}
80003364:	00000013          	nop
80003368:	01c12403          	lw	s0,28(sp)
8000336c:	02010113          	addi	sp,sp,32
80003370:	00008067          	ret

80003374 <main>:
main():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:53
Task TaskList[ MAX_LOCAL_TASKS ];

/*-----------------------------------------------------------*/

int main( void )
{
80003374:	fd010113          	addi	sp,sp,-48
80003378:	02112623          	sw	ra,44(sp)
8000337c:	02812423          	sw	s0,40(sp)
80003380:	03010413          	addi	s0,sp,48
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:55
	char str[20];
    PLIC_init();
80003384:	f21ff0ef          	jal	ra,800032a4 <PLIC_init>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:61

    /**************************************************************************
    * Initialize CoreUART with its base address, baud value, and line
    * configuration.
    *************************************************************************/
    UART_init(&g_uart, COREUARTAPB0_BASE_ADDR, BAUD_VALUE_115200,
80003388:	00100693          	li	a3,1
8000338c:	02c00613          	li	a2,44
80003390:	700015b7          	lui	a1,0x70001
80003394:	8001d7b7          	lui	a5,0x8001d
80003398:	f0078513          	addi	a0,a5,-256 # 8001cf00 <__stack_top+0xfffdff20>
8000339c:	aadfd0ef          	jal	ra,80000e48 <UART_init>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:67
             (DATA_8_BITS | NO_PARITY) );
    
	/**************************************************************************
    * Initialize the Chronos platform stuff
    *************************************************************************/
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n Chronos platform initializing... \n" );
800033a0:	800037b7          	lui	a5,0x80003
800033a4:	7bc78593          	addi	a1,a5,1980 # 800037bc <__stack_top+0xfffc67dc>
800033a8:	8001d7b7          	lui	a5,0x8001d
800033ac:	f0078513          	addi	a0,a5,-256 # 8001cf00 <__stack_top+0xfffdff20>
800033b0:	c65fd0ef          	jal	ra,80001014 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:68
	Chronos_init();
800033b4:	e44ff0ef          	jal	ra,800029f8 <Chronos_init>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:69
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This terminal belongs to the address: " );
800033b8:	800037b7          	lui	a5,0x80003
800033bc:	7e478593          	addi	a1,a5,2020 # 800037e4 <__stack_top+0xfffc6804>
800033c0:	8001d7b7          	lui	a5,0x8001d
800033c4:	f0078513          	addi	a0,a5,-256 # 8001cf00 <__stack_top+0xfffdff20>
800033c8:	c4dfd0ef          	jal	ra,80001014 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:70
	myItoa(ProcessorAddr, str, 16);
800033cc:	8001d7b7          	lui	a5,0x8001d
800033d0:	fd07a783          	lw	a5,-48(a5) # 8001cfd0 <__stack_top+0xfffdfff0>
800033d4:	00078713          	mv	a4,a5
800033d8:	fdc40793          	addi	a5,s0,-36
800033dc:	01000613          	li	a2,16
800033e0:	00078593          	mv	a1,a5
800033e4:	00070513          	mv	a0,a4
800033e8:	a71ff0ef          	jal	ra,80002e58 <myItoa>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:71
    UART_polled_tx_string( &g_uart, (const uint8_t *)str); UART_polled_tx_string( &g_uart, (const uint8_t *)"\n");
800033ec:	fdc40793          	addi	a5,s0,-36
800033f0:	00078593          	mv	a1,a5
800033f4:	8001d7b7          	lui	a5,0x8001d
800033f8:	f0078513          	addi	a0,a5,-256 # 8001cf00 <__stack_top+0xfffdff20>
800033fc:	c19fd0ef          	jal	ra,80001014 <UART_polled_tx_string>
80003400:	800047b7          	lui	a5,0x80004
80003404:	81078593          	addi	a1,a5,-2032 # 80003810 <__stack_top+0xfffc6830>
80003408:	8001d7b7          	lui	a5,0x8001d
8000340c:	f0078513          	addi	a0,a5,-256 # 8001cf00 <__stack_top+0xfffdff20>
80003410:	c05fd0ef          	jal	ra,80001014 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:75
	
	//AppsToMap = 0;
	
	if (ProcessorAddr == 0x0000){
80003414:	8001d7b7          	lui	a5,0x8001d
80003418:	fd07a783          	lw	a5,-48(a5) # 8001cfd0 <__stack_top+0xfffdfff0>
8000341c:	00079e63          	bnez	a5,80003438 <main+0xc4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:76
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is the Global Master: \n" );
80003420:	800047b7          	lui	a5,0x80004
80003424:	81478593          	addi	a1,a5,-2028 # 80003814 <__stack_top+0xfffc6834>
80003428:	8001d7b7          	lui	a5,0x8001d
8000342c:	f0078513          	addi	a0,a5,-256 # 8001cf00 <__stack_top+0xfffdff20>
80003430:	be5fd0ef          	jal	ra,80001014 <UART_polled_tx_string>
80003434:	0180006f          	j	8000344c <main+0xd8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:78
	} else {
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is a Slave: \n" );
80003438:	800047b7          	lui	a5,0x80004
8000343c:	84078593          	addi	a1,a5,-1984 # 80003840 <__stack_top+0xfffc6860>
80003440:	8001d7b7          	lui	a5,0x8001d
80003444:	f0078513          	addi	a0,a5,-256 # 8001cf00 <__stack_top+0xfffdff20>
80003448:	bcdfd0ef          	jal	ra,80001014 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:82
	}

	/* Create the two test tasks. */
	xTaskCreate( vUartTestTask1, "UArt1", 1000, NULL, uartPRIMARY_PRIORITY, NULL );
8000344c:	00000893          	li	a7,0
80003450:	00000813          	li	a6,0
80003454:	00000793          	li	a5,0
80003458:	00200713          	li	a4,2
8000345c:	00000693          	li	a3,0
80003460:	3e800613          	li	a2,1000
80003464:	800045b7          	lui	a1,0x80004
80003468:	86058593          	addi	a1,a1,-1952 # 80003860 <__stack_top+0xfffc6880>
8000346c:	80003537          	lui	a0,0x80003
80003470:	4f050513          	addi	a0,a0,1264 # 800034f0 <__stack_top+0xfffc6510>
80003474:	851fe0ef          	jal	ra,80001cc4 <xTaskGenericCreate>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:84
	//API_CreateTask();
	xTaskCreate( vUartTestTask2, "UArt2", 1000, NULL, uartPRIMARY_PRIORITY, NULL );
80003478:	00000893          	li	a7,0
8000347c:	00000813          	li	a6,0
80003480:	00000793          	li	a5,0
80003484:	00200713          	li	a4,2
80003488:	00000693          	li	a3,0
8000348c:	3e800613          	li	a2,1000
80003490:	800045b7          	lui	a1,0x80004
80003494:	86858593          	addi	a1,a1,-1944 # 80003868 <__stack_top+0xfffc6888>
80003498:	80003537          	lui	a0,0x80003
8000349c:	54050513          	addi	a0,a0,1344 # 80003540 <__stack_top+0xfffc6560>
800034a0:	825fe0ef          	jal	ra,80001cc4 <xTaskGenericCreate>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:87

	/* Start the kernel.  From here on, only tasks and interrupts will run. */
	vTaskStartScheduler();
800034a4:	ac1fe0ef          	jal	ra,80001f64 <vTaskStartScheduler>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:90

	/* Exit FreeRTOS */
	return 0;
800034a8:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:91
}
800034ac:	00078513          	mv	a0,a5
800034b0:	02c12083          	lw	ra,44(sp)
800034b4:	02812403          	lw	s0,40(sp)
800034b8:	03010113          	addi	sp,sp,48
800034bc:	00008067          	ret

800034c0 <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:96

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
800034c0:	ff010113          	addi	sp,sp,-16
800034c4:	00812623          	sw	s0,12(sp)
800034c8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:107
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
800034cc:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:108 (discriminator 1)
	for( ;; );
800034d0:	0000006f          	j	800034d0 <vApplicationMallocFailedHook+0x10>

800034d4 <vApplicationIdleHook>:
vApplicationIdleHook():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:113
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
800034d4:	ff010113          	addi	sp,sp,-16
800034d8:	00812623          	sw	s0,12(sp)
800034dc:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:123
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
800034e0:	00000013          	nop
800034e4:	00c12403          	lw	s0,12(sp)
800034e8:	01010113          	addi	sp,sp,16
800034ec:	00008067          	ret

800034f0 <vUartTestTask1>:
vUartTestTask1():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:140
	for( ;; );
}
/*-----------------------------------------------------------*/

static void vUartTestTask1( void *pvParameters )
{
800034f0:	bd010113          	addi	sp,sp,-1072
800034f4:	42112623          	sw	ra,1068(sp)
800034f8:	42812423          	sw	s0,1064(sp)
800034fc:	43010413          	addi	s0,sp,1072
80003500:	bca42e23          	sw	a0,-1060(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:143
	( void ) pvParameters;
	Message msg1;
	sys_Testing(101, 202, 303, 404, 505, 606);
80003504:	25e00793          	li	a5,606
80003508:	1f900713          	li	a4,505
8000350c:	19400693          	li	a3,404
80003510:	12f00613          	li	a2,303
80003514:	0ca00593          	li	a1,202
80003518:	06500513          	li	a0,101
8000351c:	ce9ff0ef          	jal	ra,80003204 <sys_Testing>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:146 (discriminator 1)
	for( ;; )
	{
		UART_polled_tx_string( &g_uart, (const uint8_t *)"Task - 1\r\n" );
80003520:	800047b7          	lui	a5,0x80004
80003524:	87078593          	addi	a1,a5,-1936 # 80003870 <__stack_top+0xfffc6890>
80003528:	8001d7b7          	lui	a5,0x8001d
8000352c:	f0078513          	addi	a0,a5,-256 # 8001cf00 <__stack_top+0xfffdff20>
80003530:	ae5fd0ef          	jal	ra,80001014 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:147 (discriminator 1)
	    vTaskDelay(2);
80003534:	00200513          	li	a0,2
80003538:	9a9fe0ef          	jal	ra,80001ee0 <vTaskDelay>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:146 (discriminator 1)
		UART_polled_tx_string( &g_uart, (const uint8_t *)"Task - 1\r\n" );
8000353c:	fe5ff06f          	j	80003520 <vUartTestTask1+0x30>

80003540 <vUartTestTask2>:
vUartTestTask2():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:155


/*-----------------------------------------------------------*/

static void vUartTestTask2( void *pvParameters )
{
80003540:	fe010113          	addi	sp,sp,-32
80003544:	00112e23          	sw	ra,28(sp)
80003548:	00812c23          	sw	s0,24(sp)
8000354c:	02010413          	addi	s0,sp,32
80003550:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:161 (discriminator 1)
	( void ) pvParameters;
	//Message msg2;
	//sys_Receive(&msg2, 2);
	for( ;; )
	{
		UART_polled_tx_string( &g_uart, (const uint8_t *)"Task - 2\r\n" );
80003554:	800047b7          	lui	a5,0x80004
80003558:	87c78593          	addi	a1,a5,-1924 # 8000387c <__stack_top+0xfffc689c>
8000355c:	8001d7b7          	lui	a5,0x8001d
80003560:	f0078513          	addi	a0,a5,-256 # 8001cf00 <__stack_top+0xfffdff20>
80003564:	ab1fd0ef          	jal	ra,80001014 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:162 (discriminator 1)
	    vTaskDelay(5);
80003568:	00500513          	li	a0,5
8000356c:	975fe0ef          	jal	ra,80001ee0 <vTaskDelay>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:161 (discriminator 1)
		UART_polled_tx_string( &g_uart, (const uint8_t *)"Task - 2\r\n" );
80003570:	fe5ff06f          	j	80003554 <vUartTestTask2+0x14>

80003574 <__errno>:
__errno():
80003574:	00000797          	auipc	a5,0x0
80003578:	32c78793          	addi	a5,a5,812 # 800038a0 <_impure_ptr>
8000357c:	0007a503          	lw	a0,0(a5)
80003580:	00008067          	ret

80003584 <write>:
write():
80003584:	00000797          	auipc	a5,0x0
80003588:	31c78793          	addi	a5,a5,796 # 800038a0 <_impure_ptr>
8000358c:	00060693          	mv	a3,a2
80003590:	00058613          	mv	a2,a1
80003594:	00050593          	mv	a1,a0
80003598:	0007a503          	lw	a0,0(a5)
8000359c:	0040006f          	j	800035a0 <_write_r>

800035a0 <_write_r>:
_write_r():
800035a0:	ff010113          	addi	sp,sp,-16
800035a4:	00812423          	sw	s0,8(sp)
800035a8:	00050413          	mv	s0,a0
800035ac:	00058513          	mv	a0,a1
800035b0:	00060593          	mv	a1,a2
800035b4:	00068613          	mv	a2,a3
800035b8:	0001a797          	auipc	a5,0x1a
800035bc:	9407a223          	sw	zero,-1724(a5) # 8001cefc <errno>
800035c0:	00112623          	sw	ra,12(sp)
800035c4:	ec4fd0ef          	jal	ra,80000c88 <_write>
800035c8:	fff00793          	li	a5,-1
800035cc:	00f51c63          	bne	a0,a5,800035e4 <_write_r+0x44>
800035d0:	0001a797          	auipc	a5,0x1a
800035d4:	92c78793          	addi	a5,a5,-1748 # 8001cefc <errno>
800035d8:	0007a783          	lw	a5,0(a5)
800035dc:	00078463          	beqz	a5,800035e4 <_write_r+0x44>
800035e0:	00f42023          	sw	a5,0(s0)
800035e4:	00c12083          	lw	ra,12(sp)
800035e8:	00812403          	lw	s0,8(sp)
800035ec:	01010113          	addi	sp,sp,16
800035f0:	00008067          	ret
	...
80003600:	6568                	flw	fa0,76(a0)
80003602:	6c6c                	flw	fa1,92(s0)
80003604:	0000006f          	j	80003604 <_write_r+0x64>
80003608:	7261                	lui	tp,0xffff8
8000360a:	002d3067          	0x2d3067
8000360e:	0000                	unimp
80003610:	7261                	lui	tp,0xffff8
80003612:	002d3167          	0x2d3167
80003616:	0000                	unimp
80003618:	7261                	lui	tp,0xffff8
8000361a:	002d3267          	0x2d3267
8000361e:	0000                	unimp
80003620:	7261                	lui	tp,0xffff8
80003622:	002d3367          	0x2d3367
80003626:	0000                	unimp
80003628:	7261                	lui	tp,0xffff8
8000362a:	002d3467          	0x2d3467
8000362e:	0000                	unimp
80003630:	7261                	lui	tp,0xffff8
80003632:	002d3567          	0x2d3567
80003636:	0000                	unimp
80003638:	7261                	lui	tp,0xffff8
8000363a:	002d3767          	0x2d3767
8000363e:	0000                	unimp
80003640:	6e45                	lui	t3,0x11
80003642:	7274                	flw	fa3,100(a2)
80003644:	6965                	lui	s2,0x19
80003646:	6520                	flw	fs0,72(a0)
80003648:	206d                	jal	800036f2 <_write_r+0x152>
8000364a:	6168                	flw	fa0,68(a0)
8000364c:	646e                	flw	fs0,216(sp)
8000364e:	656c                	flw	fa1,76(a0)
80003650:	745f 6172 0a70      	0xa706172745f
80003656:	0000                	unimp
80003658:	7065                	c.lui	zero,0xffff9
8000365a:	00002063          	0x2063
8000365e:	0000                	unimp
80003660:	636d                	lui	t1,0x1b
80003662:	7561                	lui	a0,0xffff8
80003664:	00206573          	csrrsi	a0,frm,0
80003668:	6469                	lui	s0,0x1a
8000366a:	6e65                	lui	t3,0x19
8000366c:	6974                	flw	fa3,84(a0)
8000366e:	6966                	flw	fs2,88(sp)
80003670:	7571                	lui	a0,0xffffc
80003672:	6965                	lui	s2,0x19
80003674:	7520                	flw	fs0,104(a0)
80003676:	616d                	addi	sp,sp,240
80003678:	6320                	flw	fs0,64(a4)
8000367a:	6168                	flw	fa0,68(a0)
8000367c:	616d                	addi	sp,sp,240
8000367e:	6164                	flw	fs1,68(a0)
80003680:	6420                	flw	fs0,72(s0)
80003682:	2065                	jal	8000372a <_write_r+0x18a>
80003684:	74736973          	csrrsi	s2,0x747,6
80003688:	6d65                	lui	s10,0x19
8000368a:	0a61                	addi	s4,s4,24
8000368c:	0000                	unimp
8000368e:	0000                	unimp
80003690:	7274                	flw	fa3,100(a2)
80003692:	7061                	c.lui	zero,0xffff8
80003694:	000a                	c.slli	zero,0x2
80003696:	0000                	unimp
80003698:	7830                	flw	fa2,112(s0)
8000369a:	0000                	unimp
8000369c:	500a                	0x500a
8000369e:	6f72                	flw	ft10,28(sp)
800036a0:	206d6167          	0x206d6167
800036a4:	6168                	flw	fa0,68(a0)
800036a6:	78652073          	csrs	0x786,a0
800036aa:	7469                	lui	s0,0xffffa
800036ac:	6465                	lui	s0,0x19
800036ae:	7720                	flw	fs0,104(a4)
800036b0:	7469                	lui	s0,0xffffa
800036b2:	2068                	fld	fa0,192(s0)
800036b4:	65646f63          	bltu	s0,s6,80003d12 <__sbss_end+0x312>
800036b8:	003a                	c.slli	zero,0xe
800036ba:	0000                	unimp
800036bc:	000d                	c.nop	3
800036be:	0000                	unimp
800036c0:	4449                	li	s0,18
800036c2:	454c                	lw	a1,12(a0)
800036c4:	0000                	unimp
800036c6:	0000                	unimp
800036c8:	000a                	c.slli	zero,0x2
800036ca:	0000                	unimp
800036cc:	654d                	lui	a0,0x13
800036ce:	736e                	flw	ft6,248(sp)
800036d0:	6761                	lui	a4,0x18
800036d2:	6d65                	lui	s10,0x19
800036d4:	6520                	flw	fs0,72(a0)
800036d6:	766e                	flw	fa2,248(sp)
800036d8:	6169                	addi	sp,sp,208
800036da:	6164                	flw	fs1,68(a0)
800036dc:	0021                	c.nop	8
800036de:	0000                	unimp
800036e0:	4e49                	li	t3,18
800036e2:	4554                	lw	a3,12(a0)
800036e4:	5252                	lw	tp,52(sp)
800036e6:	5055                	c.li	zero,-11
800036e8:	4954                	lw	a3,20(a0)
800036ea:	54204e4f          	0x54204e4f
800036ee:	0a58                	addi	a4,sp,276
800036f0:	0000                	unimp
800036f2:	0000                	unimp
800036f4:	4e49                	li	t3,18
800036f6:	4554                	lw	a3,12(a0)
800036f8:	5252                	lw	tp,52(sp)
800036fa:	5055                	c.li	zero,-11
800036fc:	4954                	lw	a3,20(a0)
800036fe:	52204e4f          	fnmadd.d	ft8,ft0,ft2,fa0,rmm
80003702:	0a58                	addi	a4,sp,276
80003704:	0000                	unimp
80003706:	0000                	unimp
80003708:	7266                	flw	ft4,120(sp)
8000370a:	203a6d6f          	jal	s10,800aa10c <__stack_top+0x6d12c>
8000370e:	0000                	unimp
80003710:	736d                	lui	t1,0xffffb
80003712:	6f702067          	0x6f702067
80003716:	6e69                	lui	t3,0x1a
80003718:	6574                	flw	fa3,76(a0)
8000371a:	3a72                	fld	fs4,312(sp)
8000371c:	0020                	addi	s0,sp,8
8000371e:	0000                	unimp
80003720:	694d                	lui	s2,0x13
80003722:	686e                	flw	fa6,216(sp)
80003724:	2061                	jal	800037ac <_write_r+0x20c>
80003726:	6174                	flw	fa3,68(a0)
80003728:	49206b73          	csrrsi	s6,0x492,0
8000372c:	3a44                	fld	fs1,176(a2)
8000372e:	0020                	addi	s0,sp,8
80003730:	2031                	jal	8000373c <_write_r+0x19c>
80003732:	6574                	flw	fa3,76(a0)
80003734:	6e617473          	csrrci	s0,0x6e6,2
80003738:	6f64                	flw	fs1,92(a4)
8000373a:	7220                	flw	fs0,96(a2)
8000373c:	6365                	lui	t1,0x19
8000373e:	6965                	lui	s2,0x19
80003740:	6576                	flw	fa0,92(sp)
80003742:	0a21                	addi	s4,s4,8
80003744:	0000                	unimp
80003746:	0000                	unimp
80003748:	5f535953          	0x5f535953
8000374c:	4552                	lw	a0,20(sp)
8000374e:	4d5f5643          	0x4d5f5643
80003752:	00204753          	fadd.s	fa4,ft0,ft2,rmm
80003756:	0000                	unimp
80003758:	6461                	lui	s0,0x18
8000375a:	7264                	flw	fs1,100(a2)
8000375c:	0020                	addi	s0,sp,8
8000375e:	0000                	unimp
80003760:	7266                	flw	ft4,120(sp)
80003762:	00206d6f          	jal	s10,80009764 <__global_pointer$+0x56d4>
80003766:	0000                	unimp
80003768:	2032                	fld	ft0,264(sp)
8000376a:	6574                	flw	fa3,76(a0)
8000376c:	6e617473          	csrrci	s0,0x6e6,2
80003770:	6f64                	flw	fs1,92(a4)
80003772:	7220                	flw	fs0,96(a2)
80003774:	6365                	lui	t1,0x19
80003776:	6965                	lui	s2,0x19
80003778:	6576                	flw	fa0,92(sp)
8000377a:	0a21                	addi	s4,s4,8
8000377c:	0000                	unimp
8000377e:	0000                	unimp
80003780:	67656843          	fmadd.q	fa6,fa0,fs6,fa2,unknown
80003784:	6575                	lui	a0,0x1d
80003786:	2069                	jal	80003810 <_write_r+0x270>
80003788:	7161                	addi	sp,sp,-432
8000378a:	6975                	lui	s2,0x1d
8000378c:	2121                	jal	80003b94 <__sbss_end+0x194>
8000378e:	2121                	jal	80003b96 <__sbss_end+0x196>
80003790:	2121                	jal	80003b98 <__sbss_end+0x198>
80003792:	2021                	jal	8000379a <_write_r+0x1fa>
80003794:	65637573          	csrrci	a0,0x656,6
80003798:	6f6f7373          	csrrci	t1,0x6f6,30
8000379c:	443a206f          	j	800a63de <__stack_top+0x693fe>
800037a0:	000a                	c.slli	zero,0x2
800037a2:	0000                	unimp
800037a4:	0a0d                	addi	s4,s4,3
800037a6:	7246                	flw	ft4,112(sp)
800037a8:	6565                	lui	a0,0x19
800037aa:	5452                	lw	s0,52(sp)
800037ac:	4520534f          	0x4520534f
800037b0:	6178                	flw	fa4,68(a0)
800037b2:	706d                	c.lui	zero,0xffffb
800037b4:	656c                	flw	fa1,76(a0)
800037b6:	0a0d                	addi	s4,s4,3
800037b8:	0000                	unimp
800037ba:	0000                	unimp
800037bc:	200a                	fld	ft0,128(sp)
800037be:	6f726843          	fmadd.q	fa6,ft4,fs7,fa3,unknown
800037c2:	6f6e                	flw	ft10,216(sp)
800037c4:	6c702073          	csrr	zero,0x6c7
800037c8:	7461                	lui	s0,0xffff8
800037ca:	6f66                	flw	ft10,88(sp)
800037cc:	6d72                	flw	fs10,28(sp)
800037ce:	6920                	flw	fs0,80(a0)
800037d0:	696e                	flw	fs2,216(sp)
800037d2:	6974                	flw	fa3,84(a0)
800037d4:	6c61                	lui	s8,0x18
800037d6:	7a69                	lui	s4,0xffffa
800037d8:	6e69                	lui	t3,0x1a
800037da:	2e2e2e67          	0x2e2e2e67
800037de:	0a20                	addi	s0,sp,280
800037e0:	0000                	unimp
800037e2:	0000                	unimp
800037e4:	200a                	fld	ft0,128(sp)
800037e6:	6854                	flw	fa3,20(s0)
800037e8:	7369                	lui	t1,0xffffa
800037ea:	7420                	flw	fs0,104(s0)
800037ec:	7265                	lui	tp,0xffff9
800037ee:	696d                	lui	s2,0x1b
800037f0:	616e                	flw	ft2,216(sp)
800037f2:	206c                	fld	fa1,192(s0)
800037f4:	6562                	flw	fa0,24(sp)
800037f6:	6f6c                	flw	fa1,92(a4)
800037f8:	676e                	flw	fa4,216(sp)
800037fa:	6f742073          	csrs	0x6f7,s0
800037fe:	7420                	flw	fs0,104(s0)
80003800:	6568                	flw	fa0,76(a0)
80003802:	6120                	flw	fs0,64(a0)
80003804:	6464                	flw	fs1,76(s0)
80003806:	6572                	flw	fa0,28(sp)
80003808:	203a7373          	csrrci	t1,hideleg,20
8000380c:	0000                	unimp
8000380e:	0000                	unimp
80003810:	000a                	c.slli	zero,0x2
80003812:	0000                	unimp
80003814:	200a                	fld	ft0,128(sp)
80003816:	6854                	flw	fa3,20(s0)
80003818:	7369                	lui	t1,0xffffa
8000381a:	7020                	flw	fs0,96(s0)
8000381c:	6f72                	flw	ft10,28(sp)
8000381e:	73736563          	bltu	t1,s7,80003f48 <__sbss_end+0x548>
80003822:	6920726f          	jal	tp,8000aeb4 <__global_pointer$+0x6e24>
80003826:	68742073          	csrs	0x687,s0
8000382a:	2065                	jal	800038d2 <__data_load+0x22>
8000382c:	626f6c47          	fmsub.d	fs8,ft10,ft6,fa2,unknown
80003830:	6c61                	lui	s8,0x18
80003832:	4d20                	lw	s0,88(a0)
80003834:	7361                	lui	t1,0xffff8
80003836:	6574                	flw	fa3,76(a0)
80003838:	3a72                	fld	fs4,312(sp)
8000383a:	0a20                	addi	s0,sp,280
8000383c:	0000                	unimp
8000383e:	0000                	unimp
80003840:	200a                	fld	ft0,128(sp)
80003842:	6854                	flw	fa3,20(s0)
80003844:	7369                	lui	t1,0xffffa
80003846:	7020                	flw	fs0,96(s0)
80003848:	6f72                	flw	ft10,28(sp)
8000384a:	73736563          	bltu	t1,s7,80003f74 <__sbss_end+0x574>
8000384e:	6920726f          	jal	tp,8000aee0 <__global_pointer$+0x6e50>
80003852:	20612073          	csrs	0x206,sp
80003856:	76616c53          	0x76616c53
8000385a:	3a65                	jal	80003212 <sys_Testing+0xe>
8000385c:	0a20                	addi	s0,sp,280
8000385e:	0000                	unimp
80003860:	4155                	li	sp,21
80003862:	7472                	flw	fs0,60(sp)
80003864:	0031                	c.nop	12
80003866:	0000                	unimp
80003868:	4155                	li	sp,21
8000386a:	7472                	flw	fs0,60(sp)
8000386c:	0032                	c.slli	zero,0xc
8000386e:	0000                	unimp
80003870:	6154                	flw	fa3,4(a0)
80003872:	2d206b73          	csrrsi	s6,0x2d2,0
80003876:	3120                	fld	fs0,96(a0)
80003878:	0a0d                	addi	s4,s4,3
8000387a:	0000                	unimp
8000387c:	6154                	flw	fa3,4(a0)
8000387e:	2d206b73          	csrrsi	s6,0x2d2,0
80003882:	3220                	fld	fs0,96(a2)
80003884:	0a0d                	addi	s4,s4,3
	...
