
miv-rv32im-freertos-port-test.elf:     file format elf32-littleriscv
miv-rv32im-freertos-port-test.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000000

Program Header:
    LOAD off    0x00001000 vaddr 0x80000000 paddr 0x80000000 align 2**12
         filesz 0x00007b70 memsz 0x00042260 flags rwx

Sections:
Idx Name           Size      VMA       LMA       File off  Algn  Flags
  0 .text          00007a70  80000000  80000000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sdata         00000020  80007a70  80007a70  00008a70  2**4  CONTENTS, ALLOC, LOAD, DATA
  2 .data          000000e0  80007a90  80007a90  00008a90  2**4  CONTENTS, ALLOC, LOAD, DATA
  3 .sbss          00000070  80007b70  80007b70  00008b70  2**4  ALLOC
  4 .bss           0001a680  80007be0  80007be0  00008b70  2**4  ALLOC
  5 .heap          00010000  80022260  80022260  00008b70  2**4  ALLOC
  6 .stack         00010000  80032260  80032260  00008b70  2**4  ALLOC
  7 .debug_line    0000b8b3  00000000  00000000  00008b70  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_info    0000f7de  00000000  00000000  00014423  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev  00002c5e  00000000  00000000  00023c01  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000988  00000000  00000000  00026860  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_str     00012e41  00000000  00000000  000271e8  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges  00000850  00000000  00000000  0003a029  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro   00005991  00000000  00000000  0003a879  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment       00000039  00000000  00000000  0004020a  2**0  CONTENTS, READONLY
 15 .debug_frame   000022f0  00000000  00000000  00040244  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
80000000 l    d  .text	00000000 .text
80007a70 l    d  .sdata	00000000 .sdata
80007a90 l    d  .data	00000000 .data
80007b70 l    d  .sbss	00000000 .sbss
80007be0 l    d  .bss	00000000 .bss
80022260 l    d  .heap	00000000 .heap
80032260 l    d  .stack	00000000 .stack
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./riscv_hal/entry.o
8000000c l       .text	00000000 handle_reset
80000004 l       .text	00000000 nmi_vector
80000008 l       .text	00000000 trap_vector
80000030 l       .text	00000000 trap_entry
00000000 l    df *ABS*	00000000 init.c
80000180 l     F .text	00000050 zero_section
00000000 l    df *ABS*	00000000 riscv_hal.c
80000258 l     F .text	000000b8 PLIC_DisableIRQ
80000310 l     F .text	00000044 PLIC_ClaimIRQ
80000354 l     F .text	0000004c PLIC_CompleteIRQ
80007b70 l     O .sbss	00000008 g_systick_increment
00000000 l    df *ABS*	00000000 riscv_hal_stubs.c
00000000 l    df *ABS*	00000000 syscall.c
80007b78 l     O .sbss	00000008 g_stdio_uart
80007b80 l     O .sbss	00000004 g_stdio_uart_init_done
80000e38 l     F .text	00000030 stub
00000000 l    df *ABS*	00000000 core_uart_apb.c
00000000 l    df *ABS*	00000000 heap_2.c
80007be0 l     O .bss	00019000 ucHeap
80007b84 l     O .sbss	00000008 xStart
80007b8c l     O .sbss	00000008 xEnd
80007a70 l     O .sdata	00000004 xFreeBytesRemaining
80007b94 l     O .sbss	00000004 xHeapHasBeenInitialised.2777
8000154c l     F .text	00000074 prvHeapInit
00000000 l    df *ABS*	00000000 port.c
800015c0 l     F .text	0000004c raise_soft_interrupt
80007a74 l     O .sdata	00000004 uxCriticalNesting
80007a78 l     O .sdata	00000004 mtime
80007a7c l     O .sdata	00000004 mtimecmp
80001680 l     F .text	000000cc prvSetNextTimerInterrupt
80001818 l     F .text	0000002c prvTaskExitError
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 tasks.c
80020be0 l     O .bss	00000064 pxReadyTasksLists
80020c44 l     O .bss	00000014 xDelayedTaskList1
80020c58 l     O .bss	00000014 xDelayedTaskList2
80007ba0 l     O .sbss	00000004 pxDelayedTaskList
80007ba4 l     O .sbss	00000004 pxOverflowDelayedTaskList
80020c6c l     O .bss	00000014 xPendingReadyList
80020c80 l     O .bss	00000014 xTasksWaitingTermination
80007ba8 l     O .sbss	00000004 uxTasksDeleted
80020c94 l     O .bss	00000014 xSuspendedTaskList
80007bac l     O .sbss	00000004 uxCurrentNumberOfTasks
80007bb0 l     O .sbss	00000004 xTickCount
80007bb4 l     O .sbss	00000004 uxTopReadyPriority
80007bb8 l     O .sbss	00000004 xSchedulerRunning
80007bbc l     O .sbss	00000004 uxPendedTicks
80007bc0 l     O .sbss	00000004 xYieldPending
80007bc4 l     O .sbss	00000004 xNumOfOverflows
80007bc8 l     O .sbss	00000004 uxTaskNumber
80007bcc l     O .sbss	00000004 xNextTaskUnblockTime
80007bd0 l     O .sbss	00000004 uxSchedulerSuspended
80002acc l     F .text	000000c0 prvAllocateTCBAndStack
800027ac l     F .text	00000138 prvInitialiseTCBVariables
800028e4 l     F .text	000000c0 prvInitialiseTaskLists
80002bcc l     F .text	00000060 prvResetNextTaskUnblockTime
80002a44 l     F .text	00000088 prvAddCurrentTaskToDelayedList
80002778 l     F .text	00000034 prvIdleTask
800029a4 l     F .text	000000a0 prvCheckTasksWaitingTermination
80002b8c l     F .text	00000040 prvDeleteTCB
00000000 l    df *ABS*	00000000 chronos.c
80002c54 l     F .text	000000b4 PLIC_EnableIRQ
80002d08 l     F .text	0000003c PLIC_SetPriority
00000000 l    df *ABS*	00000000 globalMaster.c
00000000 l    df *ABS*	00000000 applications.c
00000000 l    df *ABS*	00000000 packet.c
00000000 l    df *ABS*	00000000 dvfs.c
00000000 l    df *ABS*	00000000 thermal.c
00000000 l    df *ABS*	00000000 main.c
80006e24 l     F .text	000000d0 PLIC_init
80007048 l     F .text	00000094 GlobalManagerTask
00000000 l    df *ABS*	00000000 syswrite.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 impure.c
80007b10 l     O .data	00000060 impure_data
80001640 g     F .text	00000040 vPortExitCritical
00010000 g       *ABS*	00000000 STACK_SIZE
80020ca8 g     O .bss	00000004 SendingSlot
80000a10  w    F .text	00000020 External_11_IRQHandler
80008270 g       .sdata	00000000 __global_pointer$
80002ee0 g     F .text	00000048 printsv
80007a90 g       *ABS*	00000000 __data_load
800018d8 g     F .text	000000e4 SysTick_Handler
80000950  w    F .text	00000020 External_5_IRQHandler
80006778 g     F .text	000000a8 API_PipeInitialization
80004c58 g     F .text	00000128 API_TilesReset
80001018 g       .text	00000000 HW_get_8bit_reg_field
80003190 g     F .text	00000080 reverse
80004028 g     F .text	00000074 API_AddPendingReq
80021724 g     O .bss	00000024 priorityMatrix
80006aa8 g     F .text	00000094 API_checkPipe
80007b9c g     O .sbss	00000004 pxCurrentTCB
80007b70 g       .sbss	00000000 __sbss_start
80002d44 g     F .text	000000f0 Chronos_init
80006b7c g     F .text	00000030 API_setFreqScale
80021720 g     O .bss	00000004 errno
80020cac g     O .bss	000000f0 ServicePipe
80000f50 g       .text	00000000 HW_set_32bit_reg
80000b30  w    F .text	00000020 External_20_IRQHandler
800019bc g     F .text	00000044 xPortStartScheduler
800003a0 g     F .text	00000024 __enable_irq
80001ed4 g     F .text	0000021c xTaskGenericCreate
8000696c g     F .text	000000a0 API_GetServiceSlot
80007a70 g       .sdata	00000000 __sdata_start
80001480 g     F .text	000000cc vPortFree
80020d9c g     O .bss	00000004 messageID
800033f0 g     F .text	000000a0 API_PushSendQueue
80022250 g     O .bss	00000008 g_uart
80000ff0 g       .text	00000000 HW_set_8bit_reg_field
80000bf0  w    F .text	00000020 External_26_IRQHandler
800007a4 g     F .text	0000016c handle_trap
80004b74 g     F .text	00000084 API_GetApplicationFreeSlot
80001ba8 g     F .text	00000088 vListInsertEnd
00080000 g       *ABS*	00000000 RAM_SIZE
800009f0  w    F .text	00000020 External_10_IRQHandler
80021748 g     O .bss	00000780 applications
80002ea4 g     F .text	0000003c printi
80001b80 g     F .text	00000028 vListInitialiseItem
8000409c g     F .text	000007e0 API_NI_Handler
80000c70  w    F .text	00000020 External_30_IRQHandler
80000ad0  w    F .text	00000020 External_17_IRQHandler
80032260 g       .heap	00000000 _heap_end
80000de8 g     F .text	00000050 _isatty
80022260 g       .bss	00000000 __bss_end
80000510 g     F .text	00000294 handle_syscall
80004990 g     F .text	000001e4 API_AddApplication
800012a4 g     F .text	000001dc pvPortMalloc
80006820 g     F .text	0000014c API_GetMessageSlot
80005100 g     F .text	00000360 API_DealocateTask
800001d0 g     F .text	0000006c _init
80001b1c g     F .text	00000064 vListInitialise
80000fe0 g       .text	00000000 HW_set_8bit_reg
80000fe8 g       .text	00000000 HW_get_8bit_reg
80002468 g     F .text	00000038 xTaskGetTickCount
80004e28 g     F .text	000002d8 API_AllocateTasks
80005eac g     F .text	000000b0 API_TaskListInit
80006074 g     F .text	000002d8 API_TaskAllocation
800056f0 g     F .text	00000140 API_ClearTaskSlotFromTile
80005ff0 g     F .text	00000084 API_GetFreeTaskSlot
80006d50 g     F .text	000000d4 resetExecutedInstructions
80007be0 g       .sbss	00000000 __sbss_end
80006430 g     F .text	000000e4 API_TaskStart
80000f60 g       .text	00000000 HW_set_32bit_reg_field
800070dc g     F .text	00000018 write
80005ac8 g     F .text	00000128 API_TaskAllocated
80007018 g     F .text	00000014 vApplicationMallocFailedHook
80000bd0  w    F .text	00000020 External_25_IRQHandler
80042260 g       .stack	00000000 __stack_top
80000c50  w    F .text	00000020 External_29_IRQHandler
80020da0 g     O .bss	00000034 incommingPacket
800020f0 g     F .text	000000dc vTaskDelete
800011f4 g     F .text	000000b0 UART_polled_tx_string
80000cb0 g     F .text	000000e8 write_hex
80000a50  w    F .text	00000020 External_13_IRQHandler
800030dc g     F .text	0000002c External_2_IRQHandler
00010000 g       *ABS*	00000000 HEAP_SIZE
80000a30  w    F .text	00000020 External_12_IRQHandler
800033b0 g     F .text	00000040 makeAddress
80001140 g     F .text	000000b4 UART_send
80002fdc g     F .text	0000004c SendRaw
80000000 g       .text	00000000 _start
80006b3c g     F .text	00000040 API_setFreqIdle
800022e0 g     F .text	00000028 vTaskSuspendAll
80003490 g     F .text	0000008c API_PopSendQueue
800003c4 g     F .text	000000a8 handle_m_timer_interrupt
80002e34 g     F .text	00000070 prints
80006bac g     F .text	000001a4 printExecutedInstructions
80001d04 g     F .text	00000098 uxListRemove
80005bf0 g     F .text	000002bc API_ApplicationStart
80003028 g     F .text	00000094 NI_enable_irq
80007a70 g       *ABS*	00000000 __sdata_load
80007b70 g       .data	00000000 __data_end
8000268c g     F .text	000000ec vTaskSwitchContext
80000af0  w    F .text	00000020 External_18_IRQHandler
80000f88 g       .text	00000000 HW_get_32bit_reg_field
80003210 g     F .text	000001a0 myItoa
80000b70  w    F .text	00000020 External_22_IRQHandler
80000a90  w    F .text	00000020 External_15_IRQHandler
80001af4 g     F .text	00000028 vPortYield
80005f5c g     F .text	00000094 API_GetCurrentTaskSlot
80000000 g       *ABS*	00000000 RAM_START_ADDRESS
80007be0 g       .bss	00000000 __bss_start
80021ec8 g     O .bss	00000318 TaskList
80000ab0  w    F .text	00000020 External_16_IRQHandler
80001d9c g     F .text	000000e8 memset
80006ef4 g     F .text	00000124 main
80003144 g     F .text	0000004c mySwap
80001c30 g     F .text	000000d4 vListInsert
80000c30  w    F .text	00000020 External_28_IRQHandler
80003eec g     F .text	0000013c API_CheckMessagePipe
80004bf8 g     F .text	00000060 API_ApplicationsReset
80002c2c g     F .text	00000028 xTaskGetCurrentTaskHandle
80000fa0 g       .text	00000000 HW_get_16bit_reg
80007a90 g       .sdata	00000000 __sdata_end
80006514 g     F .text	00000264 API_FinishRunningTask
80032260 g       .heap	00000000 __heap_end
80000a70  w    F .text	00000020 External_14_IRQHandler
80005594 g     F .text	0000015c API_GetTaskSlotFromTile
80005460 g     F .text	00000134 getNextPriorityAddr
8000591c g     F .text	000001ac API_RepositoryAllocation
8000023c g     F .text	0000001c _fini
80002308 g     F .text	00000160 xTaskResumeAll
80002250 g     F .text	00000090 vTaskStartScheduler
800037b0 g     F .text	000002f8 API_SendMessage
80007a90 g     O .data	00000080 ext_irq_handler_table
80020dd4 g     O .bss	00000020 SendingQueue
800070f4 g     F .text	00000054 _write_r
80000fa8 g       .text	00000000 HW_set_16bit_reg_field
8000364c g     F .text	00000164 API_AckTaskAllocation
80020df4 g     O .bss	00000004 SendingQueue_tail
80007a84 g     O .sdata	00000004 _impure_ptr
80032260 g       .stack	00000000 __stack_bottom
80001a00 g     F .text	000000f4 Software_IRQHandler
80006a0c g     F .text	0000009c API_ClearPipeSlot
80000c10  w    F .text	00000020 External_27_IRQHandler
80007a80 g     O .sdata	00000004 frequencyScale
800009b0  w    F .text	00000020 External_8_IRQHandler
800009d0  w    F .text	00000020 External_9_IRQHandler
80022260 g       .heap	00000000 __heap_start
80000910  w    F .text	00000020 Invalid_IRQHandler
8000351c g     F .text	00000130 API_Try2Send
80003108 g     F .text	0000003c External_3_IRQHandler
800024a0 g     F .text	000001ec xTaskIncrementTick
8000634c g     F .text	000000e4 API_GetTaskSlot
80007b98 g     O .sbss	00000004 g_startscheduler
80002fb4 g     F .text	00000028 getYpos
80000b10  w    F .text	00000020 External_19_IRQHandler
80000e68 g     F .text	000000e8 _write
80002f88 g     F .text	0000002c getXpos
80022260 g       .bss	00000000 _end
8000174c g     F .text	000000cc vPortSetupTimer
80020df8 g     O .bss	00000014 str
80020e0c g     O .bss	00000004 SendingQueue_front
8000487c g     F .text	00000114 API_RepositoryWakeUp
80002f28 g     F .text	00000060 printsvsv
800021cc g     F .text	00000084 vTaskDelay
80001028 g     F .text	00000118 UART_init
80000f58 g       .text	00000000 HW_get_32bit_reg
80000d98 g     F .text	00000050 _exit
80000f98 g       .text	00000000 HW_set_16bit_reg
80003c38 g     F .text	000002b4 API_SendMessageReq
80001e84 g     F .text	00000050 strlen
80001844 g     F .text	00000094 pxPortInitialiseStack
800030bc g     F .text	00000020 External_1_IRQHandler
80003aa8 g     F .text	00000190 API_SendFinishTask
80000970  w    F .text	00000020 External_6_IRQHandler
80000c90  w    F .text	00000020 External_31_IRQHandler
80005830 g     F .text	000000ec API_GetSystemTasksSlots
8000160c g     F .text	00000034 vPortEnterCritical
80007a90 g       .data	00000000 __data_start
80022258 g     O .bss	00000004 ProcessorAddr
800221e0 g     O .bss	00000004 priorityPointer
80000b50  w    F .text	00000020 External_21_IRQHandler
800221e4 g     O .bss	0000006c Tiles
800004e0 g     F .text	00000030 handle_m_soft_interrupt
8000046c g     F .text	00000074 handle_m_ext_interrupt
80000fd0 g       .text	00000000 HW_get_16bit_reg_field
80000b90  w    F .text	00000020 External_23_IRQHandler
80000bb0  w    F .text	00000020 External_24_IRQHandler
80000930  w    F .text	00000020 External_4_IRQHandler
80020e10 g     O .bss	00000910 MessagePipe
80004d80 g     F .text	000000a8 GeneratePatternMatrix
80000990  w    F .text	00000020 External_7_IRQHandler
8000702c g     F .text	0000001c vApplicationIdleHook



Disassembly of section .text:

80000000 <_start>:
_start():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:30

  .section      .text.entry
  .globl _start

_start:
  j handle_reset
80000000:	00c0006f          	j	8000000c <handle_reset>

80000004 <nmi_vector>:
nmi_vector():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:33

nmi_vector:
  j nmi_vector
80000004:	0000006f          	j	80000004 <nmi_vector>

80000008 <trap_vector>:
trap_vector():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:36

trap_vector:
  j trap_entry
80000008:	0280006f          	j	80000030 <trap_entry>

8000000c <handle_reset>:
handle_reset():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:39

handle_reset:
  la t0, trap_entry
8000000c:	00000297          	auipc	t0,0x0
80000010:	02428293          	addi	t0,t0,36 # 80000030 <trap_entry>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:40
  csrw mtvec, t0
80000014:	30529073          	csrw	mtvec,t0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:41
  csrwi mstatus, 0
80000018:	30005073          	csrwi	mstatus,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:42
  csrwi mie, 0
8000001c:	30405073          	csrwi	mie,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:60
  lui t0, 0x0
  fscsr t0
#endif

  # initialize global pointer
  la gp, __global_pointer$
80000020:	00018193          	mv	gp,gp
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:63

  # initialize stack pointer
  la sp, __stack_top
80000024:	00042117          	auipc	sp,0x42
80000028:	23c10113          	addi	sp,sp,572 # 80042260 <__stack_top>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:66

  # perform the rest of initialization in C
  j _init
8000002c:	1a40006f          	j	800001d0 <_init>

80000030 <trap_entry>:
trap_entry():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:70


trap_entry:
  addi sp, sp, -33*REGBYTES
80000030:	f7c10113          	addi	sp,sp,-132
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:72

  SREG x1, 0 * REGBYTES(sp)
80000034:	00112023          	sw	ra,0(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:73
  SREG x2, 1 * REGBYTES(sp)
80000038:	00212223          	sw	sp,4(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:74
  SREG x3, 2 * REGBYTES(sp)
8000003c:	00312423          	sw	gp,8(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:75
  SREG x4, 3 * REGBYTES(sp)
80000040:	00412623          	sw	tp,12(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:76
  SREG x5, 4 * REGBYTES(sp)
80000044:	00512823          	sw	t0,16(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:77
  SREG x6, 5 * REGBYTES(sp)
80000048:	00612a23          	sw	t1,20(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:78
  SREG x7, 6 * REGBYTES(sp)
8000004c:	00712c23          	sw	t2,24(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:79
  SREG x8, 7 * REGBYTES(sp)
80000050:	00812e23          	sw	s0,28(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:80
  SREG x9, 8 * REGBYTES(sp)
80000054:	02912023          	sw	s1,32(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:81
  SREG x10, 9 * REGBYTES(sp)
80000058:	02a12223          	sw	a0,36(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:82
  SREG x11, 10 * REGBYTES(sp)
8000005c:	02b12423          	sw	a1,40(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:83
  SREG x12, 11 * REGBYTES(sp)
80000060:	02c12623          	sw	a2,44(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:84
  SREG x13, 12 * REGBYTES(sp)
80000064:	02d12823          	sw	a3,48(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:85
  SREG x14, 13 * REGBYTES(sp)
80000068:	02e12a23          	sw	a4,52(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:86
  SREG x15, 14 * REGBYTES(sp)
8000006c:	02f12c23          	sw	a5,56(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:87
  SREG x16, 15 * REGBYTES(sp)
80000070:	03012e23          	sw	a6,60(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:88
  SREG x17, 16 * REGBYTES(sp)
80000074:	05112023          	sw	a7,64(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:89
  SREG x18, 17 * REGBYTES(sp)
80000078:	05212223          	sw	s2,68(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:90
  SREG x19, 18 * REGBYTES(sp)
8000007c:	05312423          	sw	s3,72(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:91
  SREG x20, 19 * REGBYTES(sp)
80000080:	05412623          	sw	s4,76(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:92
  SREG x21, 20 * REGBYTES(sp)
80000084:	05512823          	sw	s5,80(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:93
  SREG x22, 21 * REGBYTES(sp)
80000088:	05612a23          	sw	s6,84(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:94
  SREG x23, 22 * REGBYTES(sp)
8000008c:	05712c23          	sw	s7,88(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:95
  SREG x24, 23 * REGBYTES(sp)
80000090:	05812e23          	sw	s8,92(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:96
  SREG x25, 24 * REGBYTES(sp)
80000094:	07912023          	sw	s9,96(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:97
  SREG x26, 25 * REGBYTES(sp)
80000098:	07a12223          	sw	s10,100(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:98
  SREG x27, 26 * REGBYTES(sp)
8000009c:	07b12423          	sw	s11,104(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:99
  SREG x28, 27 * REGBYTES(sp)
800000a0:	07c12623          	sw	t3,108(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:100
  SREG x29, 28 * REGBYTES(sp)
800000a4:	07d12823          	sw	t4,112(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:101
  SREG x30, 29 * REGBYTES(sp)
800000a8:	07e12a23          	sw	t5,116(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:102
  SREG x31, 30 * REGBYTES(sp)
800000ac:	07f12c23          	sw	t6,120(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:105

  # Stores the return addr in the stack
  csrr t0, mepc
800000b0:	341022f3          	csrr	t0,mepc
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:106
  SREG t0, 31 * REGBYTES(sp)
800000b4:	06512e23          	sw	t0,124(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:109

  # store the MIE value in the stack
  li t0, MSTATUS_MIE
800000b8:	00800293          	li	t0,8
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:110
  csrrc t0, mstatus, t0 
800000bc:	3002b2f3          	csrrc	t0,mstatus,t0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:111
  SREG t0, 32 * REGBYTES(sp) 
800000c0:	08512023          	sw	t0,128(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:113

  csrr a0, mcause
800000c4:	34202573          	csrr	a0,mcause
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:114
  csrr a1, mepc
800000c8:	341025f3          	csrr	a1,mepc
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:115
  mv a2, sp
800000cc:	00010613          	mv	a2,sp
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:116
  call handle_trap
800000d0:	6d4000ef          	jal	ra,800007a4 <handle_trap>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:117
  csrw mepc, a0
800000d4:	34151073          	csrw	mepc,a0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:120

  # Remain in M-mode after mret
  li t0, MSTATUS_MPP
800000d8:	000022b7          	lui	t0,0x2
800000dc:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:121
  csrs mstatus, t0
800000e0:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:126
  #li t0, MSTATUS_MPIE
  #csrs mstatus, t0

  # Restore the interruption status after MRET
  LREG x5, 32 * REGBYTES(sp)  # load the old MIE value to t0
800000e4:	08012283          	lw	t0,128(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:127
  slli t0, t0, 4              # shifts it to the MPIE position
800000e8:	00429293          	slli	t0,t0,0x4
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:128
  csrs mstatus, t0            # restore the MIE value into the MPIE
800000ec:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:130
  
  LREG x1, 0 * REGBYTES(sp)
800000f0:	00012083          	lw	ra,0(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:131
  LREG x2, 1 * REGBYTES(sp)
800000f4:	00412103          	lw	sp,4(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:132
  LREG x3, 2 * REGBYTES(sp)
800000f8:	00812183          	lw	gp,8(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:133
  LREG x4, 3 * REGBYTES(sp)
800000fc:	00c12203          	lw	tp,12(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:134
  LREG x5, 4 * REGBYTES(sp)
80000100:	01012283          	lw	t0,16(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:135
  LREG x6, 5 * REGBYTES(sp)
80000104:	01412303          	lw	t1,20(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:136
  LREG x7, 6 * REGBYTES(sp)
80000108:	01812383          	lw	t2,24(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:137
  LREG x8, 7 * REGBYTES(sp)
8000010c:	01c12403          	lw	s0,28(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:138
  LREG x9, 8 * REGBYTES(sp)
80000110:	02012483          	lw	s1,32(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:139
  LREG x10, 9 * REGBYTES(sp)
80000114:	02412503          	lw	a0,36(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:140
  LREG x11, 10 * REGBYTES(sp)
80000118:	02812583          	lw	a1,40(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:141
  LREG x12, 11 * REGBYTES(sp)
8000011c:	02c12603          	lw	a2,44(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:142
  LREG x13, 12 * REGBYTES(sp)
80000120:	03012683          	lw	a3,48(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:143
  LREG x14, 13 * REGBYTES(sp)
80000124:	03412703          	lw	a4,52(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:144
  LREG x15, 14 * REGBYTES(sp)
80000128:	03812783          	lw	a5,56(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:145
  LREG x16, 15 * REGBYTES(sp)
8000012c:	03c12803          	lw	a6,60(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:146
  LREG x17, 16 * REGBYTES(sp)
80000130:	04012883          	lw	a7,64(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:147
  LREG x18, 17 * REGBYTES(sp)
80000134:	04412903          	lw	s2,68(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:148
  LREG x19, 18 * REGBYTES(sp)
80000138:	04812983          	lw	s3,72(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:149
  LREG x20, 19 * REGBYTES(sp)
8000013c:	04c12a03          	lw	s4,76(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:150
  LREG x21, 20 * REGBYTES(sp)
80000140:	05012a83          	lw	s5,80(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:151
  LREG x22, 21 * REGBYTES(sp)
80000144:	05412b03          	lw	s6,84(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:152
  LREG x23, 22 * REGBYTES(sp)
80000148:	05812b83          	lw	s7,88(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:153
  LREG x24, 23 * REGBYTES(sp)
8000014c:	05c12c03          	lw	s8,92(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:154
  LREG x25, 24 * REGBYTES(sp)
80000150:	06012c83          	lw	s9,96(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:155
  LREG x26, 25 * REGBYTES(sp)
80000154:	06412d03          	lw	s10,100(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:156
  LREG x27, 26 * REGBYTES(sp)
80000158:	06812d83          	lw	s11,104(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:157
  LREG x28, 27 * REGBYTES(sp)
8000015c:	06c12e03          	lw	t3,108(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:158
  LREG x29, 28 * REGBYTES(sp)
80000160:	07012e83          	lw	t4,112(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:159
  LREG x30, 29 * REGBYTES(sp)
80000164:	07412f03          	lw	t5,116(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:160
  LREG x31, 30 * REGBYTES(sp)
80000168:	07812f83          	lw	t6,120(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:162

  addi sp, sp, 33*REGBYTES
8000016c:	08410113          	addi	sp,sp,132
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/entry.S:163
  mret
80000170:	30200073          	mret
	...

80000180 <zero_section>:
zero_section():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:47
        ++p_vma;
    }
}

static void zero_section(uint32_t * start, uint32_t * end)
{
80000180:	fd010113          	addi	sp,sp,-48
80000184:	02812623          	sw	s0,44(sp)
80000188:	03010413          	addi	s0,sp,48
8000018c:	fca42e23          	sw	a0,-36(s0)
80000190:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:48
    uint32_t * p_zero = start;
80000194:	fdc42783          	lw	a5,-36(s0)
80000198:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:50
    
    while(p_zero <= end)
8000019c:	0180006f          	j	800001b4 <zero_section+0x34>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:52
    {
        *p_zero = 0;
800001a0:	fec42783          	lw	a5,-20(s0)
800001a4:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:53
        ++p_zero;
800001a8:	fec42783          	lw	a5,-20(s0)
800001ac:	00478793          	addi	a5,a5,4
800001b0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:50
    while(p_zero <= end)
800001b4:	fec42703          	lw	a4,-20(s0)
800001b8:	fd842783          	lw	a5,-40(s0)
800001bc:	fee7f2e3          	bleu	a4,a5,800001a0 <zero_section+0x20>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:55
    }
}
800001c0:	00000013          	nop
800001c4:	02c12403          	lw	s0,44(sp)
800001c8:	03010113          	addi	sp,sp,48
800001cc:	00008067          	ret

800001d0 <_init>:
_init():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:58

void _init(void)
{
800001d0:	fe010113          	addi	sp,sp,-32
800001d4:	00112e23          	sw	ra,28(sp)
800001d8:	00812c23          	sw	s0,24(sp)
800001dc:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:60
    extern int main(int, char**);
    const char *argv0 = "hello";
800001e0:	800077b7          	lui	a5,0x80007
800001e4:	15078793          	addi	a5,a5,336 # 80007150 <__stack_top+0xfffc4ef0>
800001e8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:61
    char *argv[] = {(char *)argv0, NULL, NULL};
800001ec:	fec42783          	lw	a5,-20(s0)
800001f0:	fef42023          	sw	a5,-32(s0)
800001f4:	fe042223          	sw	zero,-28(s0)
800001f8:	fe042423          	sw	zero,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:66

// Imperas - this is loaded directly by simulator so must not be copied
//    copy_section(&__sdata_load, &__sdata_start, &__sdata_end);
//    copy_section(&__data_load, &__data_start, &__data_end);
    zero_section(&__sbss_start, &__sbss_end);
800001fc:	97018593          	addi	a1,gp,-1680 # 80007be0 <__sbss_end>
80000200:	90018513          	addi	a0,gp,-1792 # 80007b70 <__data_end>
80000204:	f7dff0ef          	jal	ra,80000180 <zero_section>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:67
    zero_section(&__bss_start, &__bss_end);
80000208:	800227b7          	lui	a5,0x80022
8000020c:	26078593          	addi	a1,a5,608 # 80022260 <__stack_top+0xfffe0000>
80000210:	97018513          	addi	a0,gp,-1680 # 80007be0 <__sbss_end>
80000214:	f6dff0ef          	jal	ra,80000180 <zero_section>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:69
    
    main(1, argv);
80000218:	fe040793          	addi	a5,s0,-32
8000021c:	00078593          	mv	a1,a5
80000220:	00100513          	li	a0,1
80000224:	4d1060ef          	jal	ra,80006ef4 <main>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:70
}
80000228:	00000013          	nop
8000022c:	01c12083          	lw	ra,28(sp)
80000230:	01812403          	lw	s0,24(sp)
80000234:	02010113          	addi	sp,sp,32
80000238:	00008067          	ret

8000023c <_fini>:
_fini():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:75

/* Function called after main() finishes */
void
_fini()
{
8000023c:	ff010113          	addi	sp,sp,-16
80000240:	00812623          	sw	s0,12(sp)
80000244:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/init.c:76
}
80000248:	00000013          	nop
8000024c:	00c12403          	lw	s0,12(sp)
80000250:	01010113          	addi	sp,sp,16
80000254:	00008067          	ret

80000258 <PLIC_DisableIRQ>:
PLIC_DisableIRQ():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:174
 * 	If you wish to disable the external interrupt while the interrupt handler
 * 	for that external interrupt is executing then you must use the return value
 * 	EXT_IRQ_DISABLE to return from the extern interrupt handler.
 */
static inline void PLIC_DisableIRQ(IRQn_Type IRQn)
{
80000258:	fd010113          	addi	sp,sp,-48
8000025c:	02812623          	sw	s0,44(sp)
80000260:	03010413          	addi	s0,sp,48
80000264:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:175
    unsigned long hart_id = read_csr(mhartid);
80000268:	f14027f3          	csrr	a5,mhartid
8000026c:	fef42623          	sw	a5,-20(s0)
80000270:	fec42783          	lw	a5,-20(s0)
80000274:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:176
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80000278:	40000737          	lui	a4,0x40000
8000027c:	fdc42783          	lw	a5,-36(s0)
80000280:	0057d793          	srli	a5,a5,0x5
80000284:	fe842683          	lw	a3,-24(s0)
80000288:	00569693          	slli	a3,a3,0x5
8000028c:	00f686b3          	add	a3,a3,a5
80000290:	000017b7          	lui	a5,0x1
80000294:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80000298:	00f687b3          	add	a5,a3,a5
8000029c:	00279793          	slli	a5,a5,0x2
800002a0:	00f707b3          	add	a5,a4,a5
800002a4:	0007a783          	lw	a5,0(a5)
800002a8:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:178

    current &= ~((uint32_t)1 << (IRQn % 32));
800002ac:	fdc42783          	lw	a5,-36(s0)
800002b0:	01f7f793          	andi	a5,a5,31
800002b4:	00100713          	li	a4,1
800002b8:	00f717b3          	sll	a5,a4,a5
800002bc:	fff7c793          	not	a5,a5
800002c0:	fe442703          	lw	a4,-28(s0)
800002c4:	00f777b3          	and	a5,a4,a5
800002c8:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:180

    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
800002cc:	40000737          	lui	a4,0x40000
800002d0:	fdc42783          	lw	a5,-36(s0)
800002d4:	0057d793          	srli	a5,a5,0x5
800002d8:	fe842683          	lw	a3,-24(s0)
800002dc:	00569693          	slli	a3,a3,0x5
800002e0:	00f686b3          	add	a3,a3,a5
800002e4:	000017b7          	lui	a5,0x1
800002e8:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
800002ec:	00f687b3          	add	a5,a3,a5
800002f0:	00279793          	slli	a5,a5,0x2
800002f4:	00f707b3          	add	a5,a4,a5
800002f8:	fe442703          	lw	a4,-28(s0)
800002fc:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:181
}
80000300:	00000013          	nop
80000304:	02c12403          	lw	s0,44(sp)
80000308:	03010113          	addi	sp,sp,48
8000030c:	00008067          	ret

80000310 <PLIC_ClaimIRQ>:
PLIC_ClaimIRQ():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:205

/*==============================================================================
 * The function PLIC_ClaimIRQ() claims the interrupt from the PLIC controller.
 */
static inline uint32_t PLIC_ClaimIRQ(void)
{
80000310:	fe010113          	addi	sp,sp,-32
80000314:	00812e23          	sw	s0,28(sp)
80000318:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:206
    unsigned long hart_id = read_csr(mhartid);
8000031c:	f14027f3          	csrr	a5,mhartid
80000320:	fef42623          	sw	a5,-20(s0)
80000324:	fec42783          	lw	a5,-20(s0)
80000328:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:208

    return PLIC->TARGET[hart_id].CLAIM_COMPLETE;
8000032c:	40000737          	lui	a4,0x40000
80000330:	fe842783          	lw	a5,-24(s0)
80000334:	20078793          	addi	a5,a5,512
80000338:	00c79793          	slli	a5,a5,0xc
8000033c:	00f707b3          	add	a5,a4,a5
80000340:	0047a783          	lw	a5,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:209
}
80000344:	00078513          	mv	a0,a5
80000348:	01c12403          	lw	s0,28(sp)
8000034c:	02010113          	addi	sp,sp,32
80000350:	00008067          	ret

80000354 <PLIC_CompleteIRQ>:
PLIC_CompleteIRQ():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:216
/*==============================================================================
 * The function PLIC_CompleteIRQ() indicates to the PLIC controller the interrupt
 * is processed and claim is complete.
 */
static inline void PLIC_CompleteIRQ(uint32_t source)
{
80000354:	fd010113          	addi	sp,sp,-48
80000358:	02812623          	sw	s0,44(sp)
8000035c:	03010413          	addi	s0,sp,48
80000360:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:217
    unsigned long hart_id = read_csr(mhartid);
80000364:	f14027f3          	csrr	a5,mhartid
80000368:	fef42623          	sw	a5,-20(s0)
8000036c:	fec42783          	lw	a5,-20(s0)
80000370:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:219

    PLIC->TARGET[hart_id].CLAIM_COMPLETE = source;
80000374:	40000737          	lui	a4,0x40000
80000378:	fe842783          	lw	a5,-24(s0)
8000037c:	20078793          	addi	a5,a5,512
80000380:	00c79793          	slli	a5,a5,0xc
80000384:	00f707b3          	add	a5,a4,a5
80000388:	fdc42703          	lw	a4,-36(s0)
8000038c:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:220
}
80000390:	00000013          	nop
80000394:	02c12403          	lw	s0,44(sp)
80000398:	03010113          	addi	sp,sp,48
8000039c:	00008067          	ret

800003a0 <__enable_irq>:
__enable_irq():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:96

/*------------------------------------------------------------------------------
 * Enabler all interrupts.
 */
void __enable_irq(void)
{
800003a0:	fe010113          	addi	sp,sp,-32
800003a4:	00812e23          	sw	s0,28(sp)
800003a8:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:97
    set_csr(mstatus, MSTATUS_MIE);
800003ac:	300467f3          	csrrsi	a5,mstatus,8
800003b0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:98
}
800003b4:	00000013          	nop
800003b8:	01c12403          	lw	s0,28(sp)
800003bc:	02010113          	addi	sp,sp,32
800003c0:	00008067          	ret

800003c4 <handle_m_timer_interrupt>:
handle_m_timer_interrupt():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:128

/*------------------------------------------------------------------------------
 * RISC-V interrupt handler for machine timer interrupts.
 */
void handle_m_timer_interrupt()
{
800003c4:	fe010113          	addi	sp,sp,-32
800003c8:	00112e23          	sw	ra,28(sp)
800003cc:	00812c23          	sw	s0,24(sp)
800003d0:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:129
    clear_csr(mie, MIP_MTIP);
800003d4:	08000793          	li	a5,128
800003d8:	3047b7f3          	csrrc	a5,mie,a5
800003dc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:131

    SysTick_Handler();
800003e0:	4f8010ef          	jal	ra,800018d8 <SysTick_Handler>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:133

    PRCI->MTIMECMP[read_csr(mhartid)] = PRCI->MTIME + g_systick_increment;
800003e4:	44000737          	lui	a4,0x44000
800003e8:	0000c7b7          	lui	a5,0xc
800003ec:	00f707b3          	add	a5,a4,a5
800003f0:	ffc7a803          	lw	a6,-4(a5) # bffc <HEAP_SIZE-0x4004>
800003f4:	ff87a783          	lw	a5,-8(a5)
800003f8:	9001a583          	lw	a1,-1792(gp) # 80007b70 <__data_end>
800003fc:	9041a603          	lw	a2,-1788(gp) # 80007b74 <__data_end+0x4>
80000400:	44000537          	lui	a0,0x44000
80000404:	f1402773          	csrr	a4,mhartid
80000408:	fee42423          	sw	a4,-24(s0)
8000040c:	fe842883          	lw	a7,-24(s0)
80000410:	00b786b3          	add	a3,a5,a1
80000414:	00068313          	mv	t1,a3
80000418:	00f33333          	sltu	t1,t1,a5
8000041c:	00c80733          	add	a4,a6,a2
80000420:	00e307b3          	add	a5,t1,a4
80000424:	00078713          	mv	a4,a5
80000428:	00068793          	mv	a5,a3
8000042c:	00070813          	mv	a6,a4
80000430:	00001737          	lui	a4,0x1
80000434:	80070713          	addi	a4,a4,-2048 # 800 <HEAP_SIZE-0xf800>
80000438:	00e88733          	add	a4,a7,a4
8000043c:	00371713          	slli	a4,a4,0x3
80000440:	00e50733          	add	a4,a0,a4
80000444:	00f72023          	sw	a5,0(a4)
80000448:	01072223          	sw	a6,4(a4)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:135

    set_csr(mie, MIP_MTIP);
8000044c:	08000793          	li	a5,128
80000450:	3047a7f3          	csrrs	a5,mie,a5
80000454:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:136
    return;
80000458:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:137
}
8000045c:	01c12083          	lw	ra,28(sp)
80000460:	01812403          	lw	s0,24(sp)
80000464:	02010113          	addi	sp,sp,32
80000468:	00008067          	ret

8000046c <handle_m_ext_interrupt>:
handle_m_ext_interrupt():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:182

/*------------------------------------------------------------------------------
 * 
 */
void handle_m_ext_interrupt()
{
8000046c:	fe010113          	addi	sp,sp,-32
80000470:	00112e23          	sw	ra,28(sp)
80000474:	00812c23          	sw	s0,24(sp)
80000478:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:183
    uint32_t int_num  = PLIC_ClaimIRQ();
8000047c:	e95ff0ef          	jal	ra,80000310 <PLIC_ClaimIRQ>
80000480:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:184
    uint8_t disable = EXT_IRQ_KEEP_ENABLED;
80000484:	fe0405a3          	sb	zero,-21(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:186

    disable = ext_irq_handler_table[int_num]();
80000488:	800087b7          	lui	a5,0x80008
8000048c:	fec42703          	lw	a4,-20(s0)
80000490:	00271713          	slli	a4,a4,0x2
80000494:	a9078793          	addi	a5,a5,-1392 # 80007a90 <__stack_top+0xfffc5830>
80000498:	00f707b3          	add	a5,a4,a5
8000049c:	0007a783          	lw	a5,0(a5)
800004a0:	000780e7          	jalr	a5
800004a4:	00050793          	mv	a5,a0
800004a8:	fef405a3          	sb	a5,-21(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:188

    PLIC_CompleteIRQ(int_num);
800004ac:	fec42503          	lw	a0,-20(s0)
800004b0:	ea5ff0ef          	jal	ra,80000354 <PLIC_CompleteIRQ>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:190

    if(EXT_IRQ_DISABLE == disable)
800004b4:	feb44703          	lbu	a4,-21(s0)
800004b8:	00100793          	li	a5,1
800004bc:	00f71863          	bne	a4,a5,800004cc <handle_m_ext_interrupt+0x60>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:192
    {
        PLIC_DisableIRQ((IRQn_Type)int_num);
800004c0:	fec42503          	lw	a0,-20(s0)
800004c4:	d95ff0ef          	jal	ra,80000258 <PLIC_DisableIRQ>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:194
    }
    return;
800004c8:	00000013          	nop
800004cc:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:195
}
800004d0:	01c12083          	lw	ra,28(sp)
800004d4:	01812403          	lw	s0,24(sp)
800004d8:	02010113          	addi	sp,sp,32
800004dc:	00008067          	ret

800004e0 <handle_m_soft_interrupt>:
handle_m_soft_interrupt():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:198

void handle_m_soft_interrupt()
{
800004e0:	ff010113          	addi	sp,sp,-16
800004e4:	00112623          	sw	ra,12(sp)
800004e8:	00812423          	sw	s0,8(sp)
800004ec:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:199
    Software_IRQHandler();
800004f0:	510010ef          	jal	ra,80001a00 <Software_IRQHandler>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:202

    /*Clear software interrupt*/
    PRCI->MSIP[0] = 0x00;
800004f4:	440007b7          	lui	a5,0x44000
800004f8:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:203
    return;
800004fc:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:204
}
80000500:	00c12083          	lw	ra,12(sp)
80000504:	00812403          	lw	s0,8(sp)
80000508:	01010113          	addi	sp,sp,16
8000050c:	00008067          	ret

80000510 <handle_syscall>:
handle_syscall():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:207

/* syscall funcion defined at system_call.c */
void handle_syscall(){
80000510:	fd010113          	addi	sp,sp,-48
80000514:	02112623          	sw	ra,44(sp)
80000518:	02812423          	sw	s0,40(sp)
8000051c:	03010413          	addi	s0,sp,48
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:210
	unsigned int arg0, arg1, arg2, arg3, arg4, arg5, type;
	unsigned int *pointer;
	register long temp asm("t0") = 0;
80000520:	00000293          	li	t0,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:211
	asm("addi	t0, sp, 0");
80000524:	00010293          	mv	t0,sp
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:213
	
	pointer = (unsigned int *)(temp + (29*4));
80000528:	00028793          	mv	a5,t0
8000052c:	07478793          	addi	a5,a5,116
80000530:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:214
	arg0 =  *pointer;
80000534:	fec42783          	lw	a5,-20(s0)
80000538:	0007a783          	lw	a5,0(a5)
8000053c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:216

	pointer = (unsigned int *)(temp + (30*4));
80000540:	00028793          	mv	a5,t0
80000544:	07878793          	addi	a5,a5,120
80000548:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:217
	arg1 = *pointer;
8000054c:	fec42783          	lw	a5,-20(s0)
80000550:	0007a783          	lw	a5,0(a5)
80000554:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:219
	
	pointer = (unsigned int *)(temp + (31*4));
80000558:	00028793          	mv	a5,t0
8000055c:	07c78793          	addi	a5,a5,124
80000560:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:220
	arg2 = *pointer;
80000564:	fec42783          	lw	a5,-20(s0)
80000568:	0007a783          	lw	a5,0(a5)
8000056c:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:222

	pointer = (unsigned int *)(temp + (32*4));
80000570:	00028793          	mv	a5,t0
80000574:	08078793          	addi	a5,a5,128
80000578:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:223
	arg3 = *pointer;
8000057c:	fec42783          	lw	a5,-20(s0)
80000580:	0007a783          	lw	a5,0(a5)
80000584:	fcf42e23          	sw	a5,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:225

	pointer = (unsigned int *)(temp + (33*4));
80000588:	00028793          	mv	a5,t0
8000058c:	08478793          	addi	a5,a5,132
80000590:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:226
	arg4 = *pointer;
80000594:	fec42783          	lw	a5,-20(s0)
80000598:	0007a783          	lw	a5,0(a5)
8000059c:	fcf42c23          	sw	a5,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:228

	pointer = (unsigned int *)(temp + (34*4));
800005a0:	00028793          	mv	a5,t0
800005a4:	08878793          	addi	a5,a5,136
800005a8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:229
	arg4 = *pointer;
800005ac:	fec42783          	lw	a5,-20(s0)
800005b0:	0007a783          	lw	a5,0(a5)
800005b4:	fcf42c23          	sw	a5,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:231

	pointer = (unsigned int *)(temp + (36*4));
800005b8:	00028793          	mv	a5,t0
800005bc:	09078793          	addi	a5,a5,144
800005c0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:232
	type = *pointer;
800005c4:	fec42783          	lw	a5,-20(s0)
800005c8:	0007a783          	lw	a5,0(a5)
800005cc:	fcf42a23          	sw	a5,-44(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:243
		p = (temp + (i*4));
		value = *p;
		printsvsv("i: ", i, " value: ", value);
	}*/
	
	switch (type){
800005d0:	fd442783          	lw	a5,-44(s0)
800005d4:	ff678793          	addi	a5,a5,-10
800005d8:	03800713          	li	a4,56
800005dc:	12f76663          	bltu	a4,a5,80000708 <handle_syscall+0x1f8>
800005e0:	00279713          	slli	a4,a5,0x2
800005e4:	800077b7          	lui	a5,0x80007
800005e8:	1ec78793          	addi	a5,a5,492 # 800071ec <__stack_top+0xfffc4f8c>
800005ec:	00f707b3          	add	a5,a4,a5
800005f0:	0007a783          	lw	a5,0(a5)
800005f4:	00078067          	jr	a5
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:246

		case SYS_TESTING:
			prints("Detectei uma chamada TESTE de sistema!\n");
800005f8:	800077b7          	lui	a5,0x80007
800005fc:	15878513          	addi	a0,a5,344 # 80007158 <__stack_top+0xfffc4ef8>
80000600:	035020ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:247
			printsv("arg0 ", arg0);
80000604:	fe842783          	lw	a5,-24(s0)
80000608:	00078593          	mv	a1,a5
8000060c:	800077b7          	lui	a5,0x80007
80000610:	18078513          	addi	a0,a5,384 # 80007180 <__stack_top+0xfffc4f20>
80000614:	0cd020ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:248
			printsv("arg1 ", arg1);
80000618:	fe442783          	lw	a5,-28(s0)
8000061c:	00078593          	mv	a1,a5
80000620:	800077b7          	lui	a5,0x80007
80000624:	18878513          	addi	a0,a5,392 # 80007188 <__stack_top+0xfffc4f28>
80000628:	0b9020ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:249
			printsv("arg2 ", arg2);
8000062c:	fe042783          	lw	a5,-32(s0)
80000630:	00078593          	mv	a1,a5
80000634:	800077b7          	lui	a5,0x80007
80000638:	19078513          	addi	a0,a5,400 # 80007190 <__stack_top+0xfffc4f30>
8000063c:	0a5020ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:250
			printsv("arg3 ", arg3);
80000640:	fdc42783          	lw	a5,-36(s0)
80000644:	00078593          	mv	a1,a5
80000648:	800077b7          	lui	a5,0x80007
8000064c:	19878513          	addi	a0,a5,408 # 80007198 <__stack_top+0xfffc4f38>
80000650:	091020ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:251
			printsv("arg4 ", arg4);
80000654:	fd842783          	lw	a5,-40(s0)
80000658:	00078593          	mv	a1,a5
8000065c:	800077b7          	lui	a5,0x80007
80000660:	1a078513          	addi	a0,a5,416 # 800071a0 <__stack_top+0xfffc4f40>
80000664:	07d020ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:252
			printsv("type ", type);
80000668:	fd442783          	lw	a5,-44(s0)
8000066c:	00078593          	mv	a1,a5
80000670:	800077b7          	lui	a5,0x80007
80000674:	1a878513          	addi	a0,a5,424 # 800071a8 <__stack_top+0xfffc4f48>
80000678:	069020ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:253
			break;
8000067c:	1140006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:256

        case SYS_PRINTS:
            prints(arg0);
80000680:	fe842783          	lw	a5,-24(s0)
80000684:	00078513          	mv	a0,a5
80000688:	7ac020ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:257
            UART_polled_tx_string( &g_uart, arg0 );
8000068c:	fe842783          	lw	a5,-24(s0)
80000690:	00078593          	mv	a1,a5
80000694:	800227b7          	lui	a5,0x80022
80000698:	25078513          	addi	a0,a5,592 # 80022250 <__stack_top+0xfffdfff0>
8000069c:	359000ef          	jal	ra,800011f4 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:258
            break;
800006a0:	0f00006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:261
        
        case SYS_PRINTI:
            printi(arg0);
800006a4:	fe842783          	lw	a5,-24(s0)
800006a8:	00078513          	mv	a0,a5
800006ac:	7f8020ef          	jal	ra,80002ea4 <printi>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:262
            myItoa(arg0, str, 10);
800006b0:	fe842703          	lw	a4,-24(s0)
800006b4:	00a00613          	li	a2,10
800006b8:	800217b7          	lui	a5,0x80021
800006bc:	df878593          	addi	a1,a5,-520 # 80020df8 <__stack_top+0xfffdeb98>
800006c0:	00070513          	mv	a0,a4
800006c4:	34d020ef          	jal	ra,80003210 <myItoa>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:263
            UART_polled_tx_string( &g_uart, (const uint8_t *)str );
800006c8:	800217b7          	lui	a5,0x80021
800006cc:	df878593          	addi	a1,a5,-520 # 80020df8 <__stack_top+0xfffdeb98>
800006d0:	800227b7          	lui	a5,0x80022
800006d4:	25078513          	addi	a0,a5,592 # 80022250 <__stack_top+0xfffdfff0>
800006d8:	31d000ef          	jal	ra,800011f4 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:264
            break;
800006dc:	0b40006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:268
        
        case SYS_SEND_MSG:
            //              addr, task
            API_SendMessage(arg0, arg1);
800006e0:	fe442583          	lw	a1,-28(s0)
800006e4:	fe842503          	lw	a0,-24(s0)
800006e8:	0c8030ef          	jal	ra,800037b0 <API_SendMessage>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:269
            break;
800006ec:	0a40006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:273
        
        case SYS_RECV_MSG:
            //                 addr, task
            API_SendMessageReq(arg0, arg1);
800006f0:	fe442583          	lw	a1,-28(s0)
800006f4:	fe842503          	lw	a0,-24(s0)
800006f8:	540030ef          	jal	ra,80003c38 <API_SendMessageReq>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:274
            break;
800006fc:	0940006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:277
        
        case SYS_END_TASK:
            API_FinishRunningTask();
80000700:	615050ef          	jal	ra,80006514 <API_FinishRunningTask>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:278
            break;
80000704:	08c0006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:281

		default:
			prints("Systemcall não identificada!\n");
80000708:	800077b7          	lui	a5,0x80007
8000070c:	1b078513          	addi	a0,a5,432 # 800071b0 <__stack_top+0xfffc4f50>
80000710:	724020ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:282
			printsv("arg0 ", arg0);
80000714:	fe842783          	lw	a5,-24(s0)
80000718:	00078593          	mv	a1,a5
8000071c:	800077b7          	lui	a5,0x80007
80000720:	18078513          	addi	a0,a5,384 # 80007180 <__stack_top+0xfffc4f20>
80000724:	7bc020ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:283
			printsv("arg1 ", arg1);
80000728:	fe442783          	lw	a5,-28(s0)
8000072c:	00078593          	mv	a1,a5
80000730:	800077b7          	lui	a5,0x80007
80000734:	18878513          	addi	a0,a5,392 # 80007188 <__stack_top+0xfffc4f28>
80000738:	7a8020ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:284
			printsv("arg2 ", arg2);
8000073c:	fe042783          	lw	a5,-32(s0)
80000740:	00078593          	mv	a1,a5
80000744:	800077b7          	lui	a5,0x80007
80000748:	19078513          	addi	a0,a5,400 # 80007190 <__stack_top+0xfffc4f30>
8000074c:	794020ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:285
			printsv("arg3 ", arg3);
80000750:	fdc42783          	lw	a5,-36(s0)
80000754:	00078593          	mv	a1,a5
80000758:	800077b7          	lui	a5,0x80007
8000075c:	19878513          	addi	a0,a5,408 # 80007198 <__stack_top+0xfffc4f38>
80000760:	780020ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:286
			printsv("arg4 ", arg4);
80000764:	fd842783          	lw	a5,-40(s0)
80000768:	00078593          	mv	a1,a5
8000076c:	800077b7          	lui	a5,0x80007
80000770:	1a078513          	addi	a0,a5,416 # 800071a0 <__stack_top+0xfffc4f40>
80000774:	76c020ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:287
			printsv("type ", type);
80000778:	fd442783          	lw	a5,-44(s0)
8000077c:	00078593          	mv	a1,a5
80000780:	800077b7          	lui	a5,0x80007
80000784:	1a878513          	addi	a0,a5,424 # 800071a8 <__stack_top+0xfffc4f48>
80000788:	758020ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:288
			break;
8000078c:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:290
	}
	return;
80000790:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:305
	// 	value = *p;
	// 	printsvsv("i: ", i, " value: ", value);
	// }
    // prints("Cheguei aqui!!!!!!! sucessooo :D\n");
	////////////////////////////////////////////////////
}
80000794:	02c12083          	lw	ra,44(sp)
80000798:	02812403          	lw	s0,40(sp)
8000079c:	03010113          	addi	sp,sp,48
800007a0:	00008067          	ret

800007a4 <handle_trap>:
handle_trap():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:311

/*------------------------------------------------------------------------------
 * Trap/Interrupt handler
 */
uintptr_t handle_trap(uintptr_t mcause, uintptr_t epc)
{
800007a4:	fe010113          	addi	sp,sp,-32
800007a8:	00112e23          	sw	ra,28(sp)
800007ac:	00812c23          	sw	s0,24(sp)
800007b0:	02010413          	addi	s0,sp,32
800007b4:	fea42623          	sw	a0,-20(s0)
800007b8:	feb42423          	sw	a1,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:312
    if (!(mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE) == ENV_CALL_M || (mcause & MCAUSE_CAUSE) == ENV_CALL_H || (mcause & MCAUSE_CAUSE) == ENV_CALL_S || (mcause & MCAUSE_CAUSE) == ENV_CALL_U)){
800007bc:	fec42783          	lw	a5,-20(s0)
800007c0:	0607cc63          	bltz	a5,80000838 <handle_trap+0x94>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:312 (discriminator 1)
800007c4:	fec42703          	lw	a4,-20(s0)
800007c8:	800007b7          	lui	a5,0x80000
800007cc:	fff7c793          	not	a5,a5
800007d0:	00f77733          	and	a4,a4,a5
800007d4:	00b00793          	li	a5,11
800007d8:	04f70663          	beq	a4,a5,80000824 <handle_trap+0x80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:312 (discriminator 2)
800007dc:	fec42703          	lw	a4,-20(s0)
800007e0:	800007b7          	lui	a5,0x80000
800007e4:	fff7c793          	not	a5,a5
800007e8:	00f77733          	and	a4,a4,a5
800007ec:	00a00793          	li	a5,10
800007f0:	02f70a63          	beq	a4,a5,80000824 <handle_trap+0x80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:312 (discriminator 3)
800007f4:	fec42703          	lw	a4,-20(s0)
800007f8:	800007b7          	lui	a5,0x80000
800007fc:	fff7c793          	not	a5,a5
80000800:	00f77733          	and	a4,a4,a5
80000804:	00900793          	li	a5,9
80000808:	00f70e63          	beq	a4,a5,80000824 <handle_trap+0x80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:312 (discriminator 4)
8000080c:	fec42703          	lw	a4,-20(s0)
80000810:	800007b7          	lui	a5,0x80000
80000814:	fff7c793          	not	a5,a5
80000818:	00f77733          	and	a4,a4,a5
8000081c:	00800793          	li	a5,8
80000820:	00f71c63          	bne	a4,a5,80000838 <handle_trap+0x94>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:313
        handle_syscall();
80000824:	cedff0ef          	jal	ra,80000510 <handle_syscall>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:314
        epc = (uintptr_t) (epc + 4);
80000828:	fe842783          	lw	a5,-24(s0)
8000082c:	00478793          	addi	a5,a5,4 # 80000004 <__stack_top+0xfffbdda4>
80000830:	fef42423          	sw	a5,-24(s0)
80000834:	0c40006f          	j	800008f8 <handle_trap+0x154>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:316
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_EXT)){
80000838:	fec42783          	lw	a5,-20(s0)
8000083c:	0207d263          	bgez	a5,80000860 <handle_trap+0xbc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:316 (discriminator 1)
80000840:	fec42703          	lw	a4,-20(s0)
80000844:	800007b7          	lui	a5,0x80000
80000848:	fff7c793          	not	a5,a5
8000084c:	00f77733          	and	a4,a4,a5
80000850:	00b00793          	li	a5,11
80000854:	00f71663          	bne	a4,a5,80000860 <handle_trap+0xbc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:317
        handle_m_ext_interrupt();
80000858:	c15ff0ef          	jal	ra,8000046c <handle_m_ext_interrupt>
8000085c:	09c0006f          	j	800008f8 <handle_trap+0x154>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:319
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_TIMER)){
80000860:	fec42783          	lw	a5,-20(s0)
80000864:	0207d263          	bgez	a5,80000888 <handle_trap+0xe4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:319 (discriminator 1)
80000868:	fec42703          	lw	a4,-20(s0)
8000086c:	800007b7          	lui	a5,0x80000
80000870:	fff7c793          	not	a5,a5
80000874:	00f77733          	and	a4,a4,a5
80000878:	00700793          	li	a5,7
8000087c:	00f71663          	bne	a4,a5,80000888 <handle_trap+0xe4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:320
        handle_m_timer_interrupt();
80000880:	b45ff0ef          	jal	ra,800003c4 <handle_m_timer_interrupt>
80000884:	0740006f          	j	800008f8 <handle_trap+0x154>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:322
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_SOFT)){
80000888:	fec42783          	lw	a5,-20(s0)
8000088c:	0207d263          	bgez	a5,800008b0 <handle_trap+0x10c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:322 (discriminator 1)
80000890:	fec42703          	lw	a4,-20(s0)
80000894:	800007b7          	lui	a5,0x80000
80000898:	fff7c793          	not	a5,a5
8000089c:	00f77733          	and	a4,a4,a5
800008a0:	00300793          	li	a5,3
800008a4:	00f71663          	bne	a4,a5,800008b0 <handle_trap+0x10c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:323
        handle_m_soft_interrupt();
800008a8:	c39ff0ef          	jal	ra,800004e0 <handle_m_soft_interrupt>
800008ac:	04c0006f          	j	800008f8 <handle_trap+0x154>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:326
    }
    else{
        write(1, "trap\n", 5);
800008b0:	00500613          	li	a2,5
800008b4:	800077b7          	lui	a5,0x80007
800008b8:	1d078593          	addi	a1,a5,464 # 800071d0 <__stack_top+0xfffc4f70>
800008bc:	00100513          	li	a0,1
800008c0:	01d060ef          	jal	ra,800070dc <write>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:327
        printsv("epc: ", epc);
800008c4:	fe842783          	lw	a5,-24(s0)
800008c8:	00078593          	mv	a1,a5
800008cc:	800077b7          	lui	a5,0x80007
800008d0:	1d878513          	addi	a0,a5,472 # 800071d8 <__stack_top+0xfffc4f78>
800008d4:	60c020ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:328
        printsv("mcause: ", mcause);
800008d8:	fec42783          	lw	a5,-20(s0)
800008dc:	00078593          	mv	a1,a5
800008e0:	800077b7          	lui	a5,0x80007
800008e4:	1e078513          	addi	a0,a5,480 # 800071e0 <__stack_top+0xfffc4f80>
800008e8:	5f8020ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:329
        _exit(mcause);
800008ec:	fec42783          	lw	a5,-20(s0)
800008f0:	00078513          	mv	a0,a5
800008f4:	4a4000ef          	jal	ra,80000d98 <_exit>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:332
    }
    //printsv("handle_trap returns: ", epc);
    return epc;
800008f8:	fe842783          	lw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:333
}
800008fc:	00078513          	mv	a0,a5
80000900:	01c12083          	lw	ra,28(sp)
80000904:	01812403          	lw	s0,24(sp)
80000908:	02010113          	addi	sp,sp,32
8000090c:	00008067          	ret

80000910 <Invalid_IRQHandler>:
Invalid_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:37
{
    ;
}

__attribute__((weak))  uint8_t Invalid_IRQHandler(void)
{
80000910:	ff010113          	addi	sp,sp,-16
80000914:	00812623          	sw	s0,12(sp)
80000918:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:38
    return(0);
8000091c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:39
}
80000920:	00078513          	mv	a0,a5
80000924:	00c12403          	lw	s0,12(sp)
80000928:	01010113          	addi	sp,sp,16
8000092c:	00008067          	ret

80000930 <External_4_IRQHandler>:
External_4_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:57
{
    return(0);
}

__attribute__((weak))  uint8_t External_4_IRQHandler(void)
{
80000930:	ff010113          	addi	sp,sp,-16
80000934:	00812623          	sw	s0,12(sp)
80000938:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:58
    return(0);
8000093c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:59
}
80000940:	00078513          	mv	a0,a5
80000944:	00c12403          	lw	s0,12(sp)
80000948:	01010113          	addi	sp,sp,16
8000094c:	00008067          	ret

80000950 <External_5_IRQHandler>:
External_5_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:62

__attribute__((weak))  uint8_t External_5_IRQHandler(void)
{
80000950:	ff010113          	addi	sp,sp,-16
80000954:	00812623          	sw	s0,12(sp)
80000958:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:63
    return(0);
8000095c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:64
}
80000960:	00078513          	mv	a0,a5
80000964:	00c12403          	lw	s0,12(sp)
80000968:	01010113          	addi	sp,sp,16
8000096c:	00008067          	ret

80000970 <External_6_IRQHandler>:
External_6_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:67

__attribute__((weak))  uint8_t External_6_IRQHandler(void)
{
80000970:	ff010113          	addi	sp,sp,-16
80000974:	00812623          	sw	s0,12(sp)
80000978:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:68
    return(0);
8000097c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:69
}
80000980:	00078513          	mv	a0,a5
80000984:	00c12403          	lw	s0,12(sp)
80000988:	01010113          	addi	sp,sp,16
8000098c:	00008067          	ret

80000990 <External_7_IRQHandler>:
External_7_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:72

__attribute__((weak))  uint8_t External_7_IRQHandler(void)
{
80000990:	ff010113          	addi	sp,sp,-16
80000994:	00812623          	sw	s0,12(sp)
80000998:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:73
    return(0);
8000099c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:74
}
800009a0:	00078513          	mv	a0,a5
800009a4:	00c12403          	lw	s0,12(sp)
800009a8:	01010113          	addi	sp,sp,16
800009ac:	00008067          	ret

800009b0 <External_8_IRQHandler>:
External_8_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:77

__attribute__((weak))  uint8_t External_8_IRQHandler(void)
{
800009b0:	ff010113          	addi	sp,sp,-16
800009b4:	00812623          	sw	s0,12(sp)
800009b8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:78
    return(0);
800009bc:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:79
}
800009c0:	00078513          	mv	a0,a5
800009c4:	00c12403          	lw	s0,12(sp)
800009c8:	01010113          	addi	sp,sp,16
800009cc:	00008067          	ret

800009d0 <External_9_IRQHandler>:
External_9_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:82

__attribute__((weak))  uint8_t External_9_IRQHandler(void)
{
800009d0:	ff010113          	addi	sp,sp,-16
800009d4:	00812623          	sw	s0,12(sp)
800009d8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:83
    return(0);
800009dc:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:84
}
800009e0:	00078513          	mv	a0,a5
800009e4:	00c12403          	lw	s0,12(sp)
800009e8:	01010113          	addi	sp,sp,16
800009ec:	00008067          	ret

800009f0 <External_10_IRQHandler>:
External_10_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:87

__attribute__((weak))  uint8_t External_10_IRQHandler(void)
{
800009f0:	ff010113          	addi	sp,sp,-16
800009f4:	00812623          	sw	s0,12(sp)
800009f8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:88
    return(0);
800009fc:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:89
}
80000a00:	00078513          	mv	a0,a5
80000a04:	00c12403          	lw	s0,12(sp)
80000a08:	01010113          	addi	sp,sp,16
80000a0c:	00008067          	ret

80000a10 <External_11_IRQHandler>:
External_11_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:92

__attribute__((weak))  uint8_t External_11_IRQHandler(void)
{
80000a10:	ff010113          	addi	sp,sp,-16
80000a14:	00812623          	sw	s0,12(sp)
80000a18:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:93
    return(0);
80000a1c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:94
}
80000a20:	00078513          	mv	a0,a5
80000a24:	00c12403          	lw	s0,12(sp)
80000a28:	01010113          	addi	sp,sp,16
80000a2c:	00008067          	ret

80000a30 <External_12_IRQHandler>:
External_12_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:97

__attribute__((weak))  uint8_t External_12_IRQHandler(void)
{
80000a30:	ff010113          	addi	sp,sp,-16
80000a34:	00812623          	sw	s0,12(sp)
80000a38:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:98
    return(0);
80000a3c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:99
}
80000a40:	00078513          	mv	a0,a5
80000a44:	00c12403          	lw	s0,12(sp)
80000a48:	01010113          	addi	sp,sp,16
80000a4c:	00008067          	ret

80000a50 <External_13_IRQHandler>:
External_13_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:102

__attribute__((weak))  uint8_t External_13_IRQHandler(void)
{
80000a50:	ff010113          	addi	sp,sp,-16
80000a54:	00812623          	sw	s0,12(sp)
80000a58:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:103
    return(0);
80000a5c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:104
}
80000a60:	00078513          	mv	a0,a5
80000a64:	00c12403          	lw	s0,12(sp)
80000a68:	01010113          	addi	sp,sp,16
80000a6c:	00008067          	ret

80000a70 <External_14_IRQHandler>:
External_14_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:107

__attribute__((weak))  uint8_t External_14_IRQHandler(void)
{
80000a70:	ff010113          	addi	sp,sp,-16
80000a74:	00812623          	sw	s0,12(sp)
80000a78:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:108
    return(0);
80000a7c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:109
}
80000a80:	00078513          	mv	a0,a5
80000a84:	00c12403          	lw	s0,12(sp)
80000a88:	01010113          	addi	sp,sp,16
80000a8c:	00008067          	ret

80000a90 <External_15_IRQHandler>:
External_15_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:112

__attribute__((weak))  uint8_t External_15_IRQHandler(void)
{
80000a90:	ff010113          	addi	sp,sp,-16
80000a94:	00812623          	sw	s0,12(sp)
80000a98:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:113
    return(0);
80000a9c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:114
}
80000aa0:	00078513          	mv	a0,a5
80000aa4:	00c12403          	lw	s0,12(sp)
80000aa8:	01010113          	addi	sp,sp,16
80000aac:	00008067          	ret

80000ab0 <External_16_IRQHandler>:
External_16_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:117

__attribute__((weak))  uint8_t External_16_IRQHandler(void)
{
80000ab0:	ff010113          	addi	sp,sp,-16
80000ab4:	00812623          	sw	s0,12(sp)
80000ab8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:118
    return(0);
80000abc:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:119
}
80000ac0:	00078513          	mv	a0,a5
80000ac4:	00c12403          	lw	s0,12(sp)
80000ac8:	01010113          	addi	sp,sp,16
80000acc:	00008067          	ret

80000ad0 <External_17_IRQHandler>:
External_17_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:122

__attribute__((weak))  uint8_t External_17_IRQHandler(void)
{
80000ad0:	ff010113          	addi	sp,sp,-16
80000ad4:	00812623          	sw	s0,12(sp)
80000ad8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:123
    return(0);
80000adc:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:124
}
80000ae0:	00078513          	mv	a0,a5
80000ae4:	00c12403          	lw	s0,12(sp)
80000ae8:	01010113          	addi	sp,sp,16
80000aec:	00008067          	ret

80000af0 <External_18_IRQHandler>:
External_18_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:127

__attribute__((weak))  uint8_t External_18_IRQHandler(void)
{
80000af0:	ff010113          	addi	sp,sp,-16
80000af4:	00812623          	sw	s0,12(sp)
80000af8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:128
    return(0);
80000afc:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:129
}
80000b00:	00078513          	mv	a0,a5
80000b04:	00c12403          	lw	s0,12(sp)
80000b08:	01010113          	addi	sp,sp,16
80000b0c:	00008067          	ret

80000b10 <External_19_IRQHandler>:
External_19_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:132

__attribute__((weak))  uint8_t External_19_IRQHandler(void)
{
80000b10:	ff010113          	addi	sp,sp,-16
80000b14:	00812623          	sw	s0,12(sp)
80000b18:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:133
    return(0);
80000b1c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:134
}
80000b20:	00078513          	mv	a0,a5
80000b24:	00c12403          	lw	s0,12(sp)
80000b28:	01010113          	addi	sp,sp,16
80000b2c:	00008067          	ret

80000b30 <External_20_IRQHandler>:
External_20_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:137

__attribute__((weak))  uint8_t External_20_IRQHandler(void)
{
80000b30:	ff010113          	addi	sp,sp,-16
80000b34:	00812623          	sw	s0,12(sp)
80000b38:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:138
    return(0);
80000b3c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:139
}
80000b40:	00078513          	mv	a0,a5
80000b44:	00c12403          	lw	s0,12(sp)
80000b48:	01010113          	addi	sp,sp,16
80000b4c:	00008067          	ret

80000b50 <External_21_IRQHandler>:
External_21_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:142

__attribute__((weak))  uint8_t External_21_IRQHandler(void)
{
80000b50:	ff010113          	addi	sp,sp,-16
80000b54:	00812623          	sw	s0,12(sp)
80000b58:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:143
    return(0);
80000b5c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:144
}
80000b60:	00078513          	mv	a0,a5
80000b64:	00c12403          	lw	s0,12(sp)
80000b68:	01010113          	addi	sp,sp,16
80000b6c:	00008067          	ret

80000b70 <External_22_IRQHandler>:
External_22_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:147

__attribute__((weak))  uint8_t External_22_IRQHandler(void)
{
80000b70:	ff010113          	addi	sp,sp,-16
80000b74:	00812623          	sw	s0,12(sp)
80000b78:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:148
    return(0);
80000b7c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:149
}
80000b80:	00078513          	mv	a0,a5
80000b84:	00c12403          	lw	s0,12(sp)
80000b88:	01010113          	addi	sp,sp,16
80000b8c:	00008067          	ret

80000b90 <External_23_IRQHandler>:
External_23_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:152

__attribute__((weak))  uint8_t External_23_IRQHandler(void)
{
80000b90:	ff010113          	addi	sp,sp,-16
80000b94:	00812623          	sw	s0,12(sp)
80000b98:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:153
    return(0);
80000b9c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:154
}
80000ba0:	00078513          	mv	a0,a5
80000ba4:	00c12403          	lw	s0,12(sp)
80000ba8:	01010113          	addi	sp,sp,16
80000bac:	00008067          	ret

80000bb0 <External_24_IRQHandler>:
External_24_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:157

__attribute__((weak))  uint8_t External_24_IRQHandler(void)
{
80000bb0:	ff010113          	addi	sp,sp,-16
80000bb4:	00812623          	sw	s0,12(sp)
80000bb8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:158
    return(0);
80000bbc:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:159
}
80000bc0:	00078513          	mv	a0,a5
80000bc4:	00c12403          	lw	s0,12(sp)
80000bc8:	01010113          	addi	sp,sp,16
80000bcc:	00008067          	ret

80000bd0 <External_25_IRQHandler>:
External_25_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:162

__attribute__((weak))  uint8_t External_25_IRQHandler(void)
{
80000bd0:	ff010113          	addi	sp,sp,-16
80000bd4:	00812623          	sw	s0,12(sp)
80000bd8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:163
    return(0);
80000bdc:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:164
}
80000be0:	00078513          	mv	a0,a5
80000be4:	00c12403          	lw	s0,12(sp)
80000be8:	01010113          	addi	sp,sp,16
80000bec:	00008067          	ret

80000bf0 <External_26_IRQHandler>:
External_26_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:167

__attribute__((weak))  uint8_t External_26_IRQHandler(void)
{
80000bf0:	ff010113          	addi	sp,sp,-16
80000bf4:	00812623          	sw	s0,12(sp)
80000bf8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:168
    return(0);
80000bfc:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:169
}
80000c00:	00078513          	mv	a0,a5
80000c04:	00c12403          	lw	s0,12(sp)
80000c08:	01010113          	addi	sp,sp,16
80000c0c:	00008067          	ret

80000c10 <External_27_IRQHandler>:
External_27_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:172

__attribute__((weak))  uint8_t External_27_IRQHandler(void)
{
80000c10:	ff010113          	addi	sp,sp,-16
80000c14:	00812623          	sw	s0,12(sp)
80000c18:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:173
    return(0);
80000c1c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:174
}
80000c20:	00078513          	mv	a0,a5
80000c24:	00c12403          	lw	s0,12(sp)
80000c28:	01010113          	addi	sp,sp,16
80000c2c:	00008067          	ret

80000c30 <External_28_IRQHandler>:
External_28_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:177

__attribute__((weak))  uint8_t External_28_IRQHandler(void)
{
80000c30:	ff010113          	addi	sp,sp,-16
80000c34:	00812623          	sw	s0,12(sp)
80000c38:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:178
    return(0);
80000c3c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:179
}
80000c40:	00078513          	mv	a0,a5
80000c44:	00c12403          	lw	s0,12(sp)
80000c48:	01010113          	addi	sp,sp,16
80000c4c:	00008067          	ret

80000c50 <External_29_IRQHandler>:
External_29_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:182

__attribute__((weak))  uint8_t External_29_IRQHandler(void)
{
80000c50:	ff010113          	addi	sp,sp,-16
80000c54:	00812623          	sw	s0,12(sp)
80000c58:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:183
    return(0);
80000c5c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:184
}
80000c60:	00078513          	mv	a0,a5
80000c64:	00c12403          	lw	s0,12(sp)
80000c68:	01010113          	addi	sp,sp,16
80000c6c:	00008067          	ret

80000c70 <External_30_IRQHandler>:
External_30_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:187

__attribute__((weak))  uint8_t External_30_IRQHandler(void)
{
80000c70:	ff010113          	addi	sp,sp,-16
80000c74:	00812623          	sw	s0,12(sp)
80000c78:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:188
    return(0);
80000c7c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:189
}
80000c80:	00078513          	mv	a0,a5
80000c84:	00c12403          	lw	s0,12(sp)
80000c88:	01010113          	addi	sp,sp,16
80000c8c:	00008067          	ret

80000c90 <External_31_IRQHandler>:
External_31_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:192

__attribute__((weak))  uint8_t External_31_IRQHandler(void)
{
80000c90:	ff010113          	addi	sp,sp,-16
80000c94:	00812623          	sw	s0,12(sp)
80000c98:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:193
    return(0);
80000c9c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:194
}
80000ca0:	00078513          	mv	a0,a5
80000ca4:	00c12403          	lw	s0,12(sp)
80000ca8:	01010113          	addi	sp,sp,16
80000cac:	00008067          	ret

80000cb0 <write_hex>:
write_hex():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:55

char *__env[1] = { 0 };
char **environ = __env;

void write_hex(int fd, uint32_t hex)
{
80000cb0:	fd010113          	addi	sp,sp,-48
80000cb4:	02112623          	sw	ra,44(sp)
80000cb8:	02812423          	sw	s0,40(sp)
80000cbc:	03010413          	addi	s0,sp,48
80000cc0:	fca42e23          	sw	a0,-36(s0)
80000cc4:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:61
    uint8_t ii;
    uint8_t jj;
    char towrite;
    uint8_t digit;

    write( fd , "0x", 2 );
80000cc8:	00200613          	li	a2,2
80000ccc:	800077b7          	lui	a5,0x80007
80000cd0:	2d078593          	addi	a1,a5,720 # 800072d0 <__stack_top+0xfffc5070>
80000cd4:	fdc42503          	lw	a0,-36(s0)
80000cd8:	404060ef          	jal	ra,800070dc <write>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:63

    for (ii = 8 ; ii > 0; ii--)
80000cdc:	00800793          	li	a5,8
80000ce0:	fef407a3          	sb	a5,-17(s0)
80000ce4:	0980006f          	j	80000d7c <write_hex+0xcc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:65
    {
        jj = ii-1;
80000ce8:	fef44783          	lbu	a5,-17(s0)
80000cec:	fff78793          	addi	a5,a5,-1
80000cf0:	fef40723          	sb	a5,-18(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:66
        digit = ((hex & (0xF << (jj*4))) >> (jj*4));
80000cf4:	fee44783          	lbu	a5,-18(s0)
80000cf8:	00279793          	slli	a5,a5,0x2
80000cfc:	00f00713          	li	a4,15
80000d00:	00f717b3          	sll	a5,a4,a5
80000d04:	00078713          	mv	a4,a5
80000d08:	fd842783          	lw	a5,-40(s0)
80000d0c:	00f77733          	and	a4,a4,a5
80000d10:	fee44783          	lbu	a5,-18(s0)
80000d14:	00279793          	slli	a5,a5,0x2
80000d18:	00f757b3          	srl	a5,a4,a5
80000d1c:	fef406a3          	sb	a5,-19(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:67
        towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
80000d20:	fed44703          	lbu	a4,-19(s0)
80000d24:	00900793          	li	a5,9
80000d28:	00e7ee63          	bltu	a5,a4,80000d44 <write_hex+0x94>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 1)
80000d2c:	fed44783          	lbu	a5,-19(s0)
80000d30:	03078793          	addi	a5,a5,48
80000d34:	0ff7f793          	andi	a5,a5,255
80000d38:	01879793          	slli	a5,a5,0x18
80000d3c:	4187d793          	srai	a5,a5,0x18
80000d40:	0180006f          	j	80000d58 <write_hex+0xa8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 2)
80000d44:	fed44783          	lbu	a5,-19(s0)
80000d48:	03778793          	addi	a5,a5,55
80000d4c:	0ff7f793          	andi	a5,a5,255
80000d50:	01879793          	slli	a5,a5,0x18
80000d54:	4187d793          	srai	a5,a5,0x18
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 4)
80000d58:	fef40623          	sb	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:68 (discriminator 4)
        write( fd, &towrite, 1);
80000d5c:	fec40793          	addi	a5,s0,-20
80000d60:	00100613          	li	a2,1
80000d64:	00078593          	mv	a1,a5
80000d68:	fdc42503          	lw	a0,-36(s0)
80000d6c:	370060ef          	jal	ra,800070dc <write>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 4)
    for (ii = 8 ; ii > 0; ii--)
80000d70:	fef44783          	lbu	a5,-17(s0)
80000d74:	fff78793          	addi	a5,a5,-1
80000d78:	fef407a3          	sb	a5,-17(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 2)
80000d7c:	fef44783          	lbu	a5,-17(s0)
80000d80:	f60794e3          	bnez	a5,80000ce8 <write_hex+0x38>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:70
    }
}
80000d84:	00000013          	nop
80000d88:	02c12083          	lw	ra,44(sp)
80000d8c:	02812403          	lw	s0,40(sp)
80000d90:	03010113          	addi	sp,sp,48
80000d94:	00008067          	ret

80000d98 <_exit>:
_exit():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:74

               
void _exit(int code)
{
80000d98:	fd010113          	addi	sp,sp,-48
80000d9c:	02112623          	sw	ra,44(sp)
80000da0:	02812423          	sw	s0,40(sp)
80000da4:	03010413          	addi	s0,sp,48
80000da8:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:76
#ifdef MSCC_STDIO_THRU_CORE_UART_APB
    const char * message = "\nProgam has exited with code:";
80000dac:	800077b7          	lui	a5,0x80007
80000db0:	2d478793          	addi	a5,a5,724 # 800072d4 <__stack_top+0xfffc5074>
80000db4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:78

    write(STDERR_FILENO, message, strlen(message));
80000db8:	fec42503          	lw	a0,-20(s0)
80000dbc:	0c8010ef          	jal	ra,80001e84 <strlen>
80000dc0:	00050793          	mv	a5,a0
80000dc4:	00078613          	mv	a2,a5
80000dc8:	fec42583          	lw	a1,-20(s0)
80000dcc:	00200513          	li	a0,2
80000dd0:	30c060ef          	jal	ra,800070dc <write>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:79
    write_hex(STDERR_FILENO, code);
80000dd4:	fdc42783          	lw	a5,-36(s0)
80000dd8:	00078593          	mv	a1,a5
80000ddc:	00200513          	li	a0,2
80000de0:	ed1ff0ef          	jal	ra,80000cb0 <write_hex>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:82 (discriminator 1)
#endif

    while (1);
80000de4:	0000006f          	j	80000de4 <_exit+0x4c>

80000de8 <_isatty>:
_isatty():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:101
    curbrk += incr;
    return curbrk - incr;
}

int _isatty(int fd)
{
80000de8:	fe010113          	addi	sp,sp,-32
80000dec:	00812e23          	sw	s0,28(sp)
80000df0:	02010413          	addi	s0,sp,32
80000df4:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:102
    if (fd == STDOUT_FILENO || fd == STDERR_FILENO)
80000df8:	fec42703          	lw	a4,-20(s0)
80000dfc:	00100793          	li	a5,1
80000e00:	00f70863          	beq	a4,a5,80000e10 <_isatty+0x28>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:102 (discriminator 1)
80000e04:	fec42703          	lw	a4,-20(s0)
80000e08:	00200793          	li	a5,2
80000e0c:	00f71663          	bne	a4,a5,80000e18 <_isatty+0x30>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:104
    {
        return 1;
80000e10:	00100793          	li	a5,1
80000e14:	0140006f          	j	80000e28 <_isatty+0x40>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:107
    }

    errno = EBADF;
80000e18:	800217b7          	lui	a5,0x80021
80000e1c:	00900713          	li	a4,9
80000e20:	72e7a023          	sw	a4,1824(a5) # 80021720 <__stack_top+0xfffdf4c0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:108
    return 0;
80000e24:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:109
}
80000e28:	00078513          	mv	a0,a5
80000e2c:	01c12403          	lw	s0,28(sp)
80000e30:	02010113          	addi	sp,sp,32
80000e34:	00008067          	ret

80000e38 <stub>:
stub():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:112

static int stub(int err)
{
80000e38:	fe010113          	addi	sp,sp,-32
80000e3c:	00812e23          	sw	s0,28(sp)
80000e40:	02010413          	addi	s0,sp,32
80000e44:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:113
    errno = err;
80000e48:	800217b7          	lui	a5,0x80021
80000e4c:	fec42703          	lw	a4,-20(s0)
80000e50:	72e7a023          	sw	a4,1824(a5) # 80021720 <__stack_top+0xfffdf4c0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:114
    return -1;
80000e54:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:115
}
80000e58:	00078513          	mv	a0,a5
80000e5c:	01c12403          	lw	s0,28(sp)
80000e60:	02010113          	addi	sp,sp,32
80000e64:	00008067          	ret

80000e68 <_write>:
_write():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:226
{
    return stub(ECHILD);
}

ssize_t _write(int fd, const void* ptr, size_t len)
{
80000e68:	fd010113          	addi	sp,sp,-48
80000e6c:	02112623          	sw	ra,44(sp)
80000e70:	02812423          	sw	s0,40(sp)
80000e74:	03010413          	addi	s0,sp,48
80000e78:	fca42e23          	sw	a0,-36(s0)
80000e7c:	fcb42c23          	sw	a1,-40(s0)
80000e80:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:229

#ifdef MSCC_STDIO_THRU_CORE_UART_APB
  const uint8_t * current = (const uint8_t *) ptr;
80000e84:	fd842783          	lw	a5,-40(s0)
80000e88:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:232
  size_t jj;

  if (_isatty(fd))
80000e8c:	fdc42503          	lw	a0,-36(s0)
80000e90:	f59ff0ef          	jal	ra,80000de8 <_isatty>
80000e94:	00050793          	mv	a5,a0
80000e98:	08078c63          	beqz	a5,80000f30 <_write+0xc8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:238
  {
        /*--------------------------------------------------------------------------
        * Initialize the UART driver if it is the first time this function is
        * called.
        */
        if ( !g_stdio_uart_init_done )
80000e9c:	9101a783          	lw	a5,-1776(gp) # 80007b80 <g_stdio_uart_init_done>
80000ea0:	02079063          	bnez	a5,80000ec0 <_write+0x58>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:245
            /******************************************************************************
            * Baud value:
            * This value is calculated using the following equation:
            *      BAUD_VALUE = (CLOCK / (16 * BAUD_RATE)) - 1
            *****************************************************************************/
            UART_init( &g_stdio_uart, MSCC_STDIO_UART_BASE_ADDR, ((SYS_CLK_FREQ/(16 * MSCC_STDIO_BAUD_VALUE))-1), (DATA_8_BITS | NO_PARITY));
80000ea4:	00100693          	li	a3,1
80000ea8:	02c00613          	li	a2,44
80000eac:	700015b7          	lui	a1,0x70001
80000eb0:	90818513          	addi	a0,gp,-1784 # 80007b78 <g_stdio_uart>
80000eb4:	174000ef          	jal	ra,80001028 <UART_init>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:246
            g_stdio_uart_init_done = 1;
80000eb8:	00100713          	li	a4,1
80000ebc:	90e1a823          	sw	a4,-1776(gp) # 80007b80 <g_stdio_uart_init_done>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:249
        }

    for (jj = 0; jj < len; jj++)
80000ec0:	fe042623          	sw	zero,-20(s0)
80000ec4:	0580006f          	j	80000f1c <_write+0xb4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:251
    {
        UART_send(&g_stdio_uart, current + jj, 1);
80000ec8:	fe842703          	lw	a4,-24(s0)
80000ecc:	fec42783          	lw	a5,-20(s0)
80000ed0:	00f707b3          	add	a5,a4,a5
80000ed4:	00100613          	li	a2,1
80000ed8:	00078593          	mv	a1,a5
80000edc:	90818513          	addi	a0,gp,-1784 # 80007b78 <g_stdio_uart>
80000ee0:	260000ef          	jal	ra,80001140 <UART_send>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:252
        if (current[jj] == '\n')
80000ee4:	fe842703          	lw	a4,-24(s0)
80000ee8:	fec42783          	lw	a5,-20(s0)
80000eec:	00f707b3          	add	a5,a4,a5
80000ef0:	0007c703          	lbu	a4,0(a5)
80000ef4:	00a00793          	li	a5,10
80000ef8:	00f71c63          	bne	a4,a5,80000f10 <_write+0xa8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:254
        {
            UART_send(&g_stdio_uart, (const uint8_t *)"\r", 1);
80000efc:	00100613          	li	a2,1
80000f00:	800077b7          	lui	a5,0x80007
80000f04:	2f478593          	addi	a1,a5,756 # 800072f4 <__stack_top+0xfffc5094>
80000f08:	90818513          	addi	a0,gp,-1784 # 80007b78 <g_stdio_uart>
80000f0c:	234000ef          	jal	ra,80001140 <UART_send>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 2)
    for (jj = 0; jj < len; jj++)
80000f10:	fec42783          	lw	a5,-20(s0)
80000f14:	00178793          	addi	a5,a5,1
80000f18:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 1)
80000f1c:	fec42703          	lw	a4,-20(s0)
80000f20:	fd442783          	lw	a5,-44(s0)
80000f24:	faf762e3          	bltu	a4,a5,80000ec8 <_write+0x60>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:257
        }
    }
    return len;
80000f28:	fd442783          	lw	a5,-44(s0)
80000f2c:	0100006f          	j	80000f3c <_write+0xd4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:261
  }
#endif

  return stub(EBADF);
80000f30:	00900513          	li	a0,9
80000f34:	f05ff0ef          	jal	ra,80000e38 <stub>
80000f38:	00050793          	mv	a5,a0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/syscall.c:262
}
80000f3c:	00078513          	mv	a0,a5
80000f40:	02c12083          	lw	ra,44(sp)
80000f44:	02812403          	lw	s0,40(sp)
80000f48:	03010113          	addi	sp,sp,48
80000f4c:	00008067          	ret

80000f50 <HW_set_32bit_reg>:
HW_set_32bit_reg():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:36
 *
 * a0:   addr_t reg_addr
 * a1:   uint32_t value
 */
HW_set_32bit_reg:
    sw a1, 0(a0)
80000f50:	00b52023          	sw	a1,0(a0) # 44000000 <RAM_SIZE+0x43f80000>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:37
    ret
80000f54:	00008067          	ret

80000f58 <HW_get_32bit_reg>:
HW_get_32bit_reg():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:47
 *
 * R0:   addr_t reg_addr
 * @return          32 bits value read from the peripheral register.
 */
HW_get_32bit_reg:
    lw a0, 0(a0)
80000f58:	00052503          	lw	a0,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:48
    ret
80000f5c:	00008067          	ret

80000f60 <HW_set_32bit_reg_field>:
HW_set_32bit_reg_field():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:60
 * a1:   int_fast8_t shift
 * a2:   uint32_t mask
 * a3:   uint32_t value
 */
HW_set_32bit_reg_field:
    mv t3, a3
80000f60:	00068e13          	mv	t3,a3
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:61
    sll t3, t3, a1
80000f64:	00be1e33          	sll	t3,t3,a1
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:62
    and  t3, t3, a2
80000f68:	00ce7e33          	and	t3,t3,a2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:63
    lw t1, 0(a0)
80000f6c:	00052303          	lw	t1,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:64
    mv t2, a2
80000f70:	00060393          	mv	t2,a2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:65
    not t2, t2
80000f74:	fff3c393          	not	t2,t2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:66
    and t1, t1, t2
80000f78:	00737333          	and	t1,t1,t2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:67
    or t1, t1, t3
80000f7c:	01c36333          	or	t1,t1,t3
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:68
    sw t1, 0(a0)
80000f80:	00652023          	sw	t1,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:69
    ret
80000f84:	00008067          	ret

80000f88 <HW_get_32bit_reg_field>:
HW_get_32bit_reg_field():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:83
 *
 * @return          32 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_32bit_reg_field:
    lw a0, 0(a0)
80000f88:	00052503          	lw	a0,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:84
    and a0, a0, a2
80000f8c:	00c57533          	and	a0,a0,a2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:85
    srl a0, a0, a1
80000f90:	00b55533          	srl	a0,a0,a1
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:86
    ret
80000f94:	00008067          	ret

80000f98 <HW_set_16bit_reg>:
HW_set_16bit_reg():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:96
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast16_t value
 */
HW_set_16bit_reg:
    sh a1, 0(a0)
80000f98:	00b51023          	sh	a1,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:97
    ret
80000f9c:	00008067          	ret

80000fa0 <HW_get_16bit_reg>:
HW_get_16bit_reg():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:107
 *
 * a0:   addr_t reg_addr
 * @return          16 bits value read from the peripheral register.
 */
HW_get_16bit_reg:
    lh a0, (a0)
80000fa0:	00051503          	lh	a0,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:108
    ret
80000fa4:	00008067          	ret

80000fa8 <HW_set_16bit_reg_field>:
HW_set_16bit_reg_field():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:121
 * a2:   uint_fast16_t mask
 * a3:   uint_fast16_t value
 * @param value     Value to be written in the specified field.
 */
HW_set_16bit_reg_field:
    mv t3, a3
80000fa8:	00068e13          	mv	t3,a3
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:122
    sll t3, t3, a1
80000fac:	00be1e33          	sll	t3,t3,a1
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:123
    and  t3, t3, a2
80000fb0:	00ce7e33          	and	t3,t3,a2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:124
    lh t1, 0(a0)
80000fb4:	00051303          	lh	t1,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:125
    mv t2, a2
80000fb8:	00060393          	mv	t2,a2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:126
    not t2, t2
80000fbc:	fff3c393          	not	t2,t2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:127
    and t1, t1, t2
80000fc0:	00737333          	and	t1,t1,t2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:128
    or t1, t1, t3
80000fc4:	01c36333          	or	t1,t1,t3
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:129
    sh t1, 0(a0)
80000fc8:	00651023          	sh	t1,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:130
    ret
80000fcc:	00008067          	ret

80000fd0 <HW_get_16bit_reg_field>:
HW_get_16bit_reg_field():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:144
 *
 * @return          16 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_16bit_reg_field:
    lh a0, 0(a0)
80000fd0:	00051503          	lh	a0,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:145
    and a0, a0, a2
80000fd4:	00c57533          	and	a0,a0,a2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:146
    srl a0, a0, a1
80000fd8:	00b55533          	srl	a0,a0,a1
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:147
    ret
80000fdc:	00008067          	ret

80000fe0 <HW_set_8bit_reg>:
HW_set_8bit_reg():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:157
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast8_t value
 */
HW_set_8bit_reg:
    sb a1, 0(a0)
80000fe0:	00b50023          	sb	a1,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:158
    ret
80000fe4:	00008067          	ret

80000fe8 <HW_get_8bit_reg>:
HW_get_8bit_reg():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:168
 *
 * a0:   addr_t reg_addr
 * @return          8 bits value read from the peripheral register.
 */
HW_get_8bit_reg:
    lb a0, 0(a0)
80000fe8:	00050503          	lb	a0,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:169
    ret
80000fec:	00008067          	ret

80000ff0 <HW_set_8bit_reg_field>:
HW_set_8bit_reg_field():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:181
 * a1:   int_fast8_t shift
 * a2:   uint_fast8_t mask
 * a3:   uint_fast8_t value
 */
HW_set_8bit_reg_field:
    mv t3, a3
80000ff0:	00068e13          	mv	t3,a3
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:182
    sll t3, t3, a1
80000ff4:	00be1e33          	sll	t3,t3,a1
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:183
    and  t3, t3, a2
80000ff8:	00ce7e33          	and	t3,t3,a2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:184
    lb t1, 0(a0)
80000ffc:	00050303          	lb	t1,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:185
    mv t2, a2
80001000:	00060393          	mv	t2,a2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:186
    not t2, t2
80001004:	fff3c393          	not	t2,t2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:187
    and t1, t1, t2
80001008:	00737333          	and	t1,t1,t2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:188
    or t1, t1, t3
8000100c:	01c36333          	or	t1,t1,t3
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:189
    sb t1, 0(a0)
80001010:	00650023          	sb	t1,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:190
    ret
80001014:	00008067          	ret

80001018 <HW_get_8bit_reg_field>:
HW_get_8bit_reg_field():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:204
 *
 * @return          8 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_8bit_reg_field:
    lb a0, 0(a0)
80001018:	00050503          	lb	a0,0(a0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:205
    and a0, a0, a2
8000101c:	00c57533          	and	a0,a0,a2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:206
    srl a0, a0, a1
80001020:	00b55533          	srl	a0,a0,a1
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../hal/hw_reg_access.S:207
    ret
80001024:	00008067          	ret

80001028 <UART_init>:
UART_init():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:46
    UART_instance_t * this_uart,
    addr_t base_addr,
    uint16_t baud_value,
    uint8_t line_config
)
{
80001028:	fd010113          	addi	sp,sp,-48
8000102c:	02112623          	sw	ra,44(sp)
80001030:	02812423          	sw	s0,40(sp)
80001034:	03010413          	addi	s0,sp,48
80001038:	fca42e23          	sw	a0,-36(s0)
8000103c:	fcb42c23          	sw	a1,-40(s0)
80001040:	00060793          	mv	a5,a2
80001044:	00068713          	mv	a4,a3
80001048:	fcf41b23          	sh	a5,-42(s0)
8000104c:	00070793          	mv	a5,a4
80001050:	fcf40aa3          	sb	a5,-43(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53
    
    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( line_config <= MAX_LINE_CONFIG )
    HAL_ASSERT( baud_value <= MAX_BAUD_VALUE )

    if( ( this_uart != NULL_INSTANCE ) &&
80001054:	fdc42783          	lw	a5,-36(s0)
80001058:	0c078a63          	beqz	a5,8000112c <UART_init+0x104>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53 (discriminator 1)
8000105c:	fd544703          	lbu	a4,-43(s0)
80001060:	00700793          	li	a5,7
80001064:	0ce7e463          	bltu	a5,a4,8000112c <UART_init+0x104>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:54
        ( line_config <= MAX_LINE_CONFIG ) &&
80001068:	fd645703          	lhu	a4,-42(s0)
8000106c:	000027b7          	lui	a5,0x2
80001070:	0af77e63          	bleu	a5,a4,8000112c <UART_init+0x104>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:60
        ( baud_value <= MAX_BAUD_VALUE ) )
    {
        /*
         * Store lower 8-bits of baud value in CTRL1.
         */
        HAL_set_8bit_reg( base_addr, CTRL1, (uint_fast8_t)(baud_value &
80001074:	fd842783          	lw	a5,-40(s0)
80001078:	00878713          	addi	a4,a5,8 # 2008 <HEAP_SIZE-0xdff8>
8000107c:	fd645783          	lhu	a5,-42(s0)
80001080:	0ff7f793          	andi	a5,a5,255
80001084:	00078593          	mv	a1,a5
80001088:	00070513          	mv	a0,a4
8000108c:	f55ff0ef          	jal	ra,80000fe0 <HW_set_8bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:67
    
        /*
         * Extract higher 5-bits of baud value and store in higher 5-bits 
         * of CTRL2, along with line configuration in lower 3 three bits.
         */
        HAL_set_8bit_reg( base_addr, CTRL2, (uint_fast8_t)line_config | 
80001090:	fd842783          	lw	a5,-40(s0)
80001094:	00c78693          	addi	a3,a5,12
80001098:	fd544703          	lbu	a4,-43(s0)
8000109c:	fd645783          	lhu	a5,-42(s0)
800010a0:	4057d793          	srai	a5,a5,0x5
800010a4:	7f87f793          	andi	a5,a5,2040
800010a8:	00f767b3          	or	a5,a4,a5
800010ac:	00078593          	mv	a1,a5
800010b0:	00068513          	mv	a0,a3
800010b4:	f2dff0ef          	jal	ra,80000fe0 <HW_set_8bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:71
                                           (uint_fast8_t)((baud_value &
                                   BAUDVALUE_MSB) >> BAUDVALUE_SHIFT ) );
    
        this_uart->base_address = base_addr;
800010b8:	fdc42783          	lw	a5,-36(s0)
800010bc:	fd842703          	lw	a4,-40(s0)
800010c0:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:94
        
        /*
         * Flush the receive FIFO of data that may have been received before the
         * driver was initialized.
         */
        rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
800010c4:	fdc42783          	lw	a5,-36(s0)
800010c8:	0007a783          	lw	a5,0(a5)
800010cc:	01078793          	addi	a5,a5,16
800010d0:	00078513          	mv	a0,a5
800010d4:	f15ff0ef          	jal	ra,80000fe8 <HW_get_8bit_reg>
800010d8:	00050793          	mv	a5,a0
800010dc:	0027f793          	andi	a5,a5,2
800010e0:	fef407a3          	sb	a5,-17(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
                                                    STATUS_RXFULL_MASK;
        while ( rx_full )
800010e4:	0380006f          	j	8000111c <UART_init+0xf4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:98
        {
            HAL_get_8bit_reg( this_uart->base_address, RXDATA );
800010e8:	fdc42783          	lw	a5,-36(s0)
800010ec:	0007a783          	lw	a5,0(a5)
800010f0:	00478793          	addi	a5,a5,4
800010f4:	00078513          	mv	a0,a5
800010f8:	ef1ff0ef          	jal	ra,80000fe8 <HW_get_8bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:99
            rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
800010fc:	fdc42783          	lw	a5,-36(s0)
80001100:	0007a783          	lw	a5,0(a5)
80001104:	01078793          	addi	a5,a5,16
80001108:	00078513          	mv	a0,a5
8000110c:	eddff0ef          	jal	ra,80000fe8 <HW_get_8bit_reg>
80001110:	00050793          	mv	a5,a0
80001114:	0027f793          	andi	a5,a5,2
80001118:	fef407a3          	sb	a5,-17(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
        while ( rx_full )
8000111c:	fef44783          	lbu	a5,-17(s0)
80001120:	fc0794e3          	bnez	a5,800010e8 <UART_init+0xc0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:106
        }

        /*
         * Clear status of the UART instance.
         */
        this_uart->status = (uint8_t)0;
80001124:	fdc42783          	lw	a5,-36(s0)
80001128:	00078223          	sb	zero,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:108
    }
}
8000112c:	00000013          	nop
80001130:	02c12083          	lw	ra,44(sp)
80001134:	02812403          	lw	s0,40(sp)
80001138:	03010113          	addi	sp,sp,48
8000113c:	00008067          	ret

80001140 <UART_send>:
UART_send():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:121
(
    UART_instance_t * this_uart,
    const uint8_t * tx_buffer,
    size_t tx_size
)
{
80001140:	fd010113          	addi	sp,sp,-48
80001144:	02112623          	sw	ra,44(sp)
80001148:	02812423          	sw	s0,40(sp)
8000114c:	03010413          	addi	s0,sp,48
80001150:	fca42e23          	sw	a0,-36(s0)
80001154:	fcb42c23          	sw	a1,-40(s0)
80001158:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( tx_buffer != NULL_BUFFER )
    HAL_ASSERT( tx_size > 0 )
      
    if( (this_uart != NULL_INSTANCE) &&
8000115c:	fdc42783          	lw	a5,-36(s0)
80001160:	08078063          	beqz	a5,800011e0 <UART_send+0xa0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129 (discriminator 1)
80001164:	fd842783          	lw	a5,-40(s0)
80001168:	06078c63          	beqz	a5,800011e0 <UART_send+0xa0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:130
        (tx_buffer != NULL_BUFFER)   &&
8000116c:	fd442783          	lw	a5,-44(s0)
80001170:	06078863          	beqz	a5,800011e0 <UART_send+0xa0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133
        (tx_size > (size_t)0) )
    {
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
80001174:	fe042623          	sw	zero,-20(s0)
80001178:	05c0006f          	j	800011d4 <UART_send+0x94>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:137 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
8000117c:	fdc42783          	lw	a5,-36(s0)
80001180:	0007a783          	lw	a5,0(a5)
80001184:	01078793          	addi	a5,a5,16
80001188:	00078513          	mv	a0,a5
8000118c:	e5dff0ef          	jal	ra,80000fe8 <HW_get_8bit_reg>
80001190:	00050793          	mv	a5,a0
80001194:	0017f793          	andi	a5,a5,1
80001198:	fef405a3          	sb	a5,-21(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:139 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
8000119c:	feb44783          	lbu	a5,-21(s0)
800011a0:	fc078ee3          	beqz	a5,8000117c <UART_send+0x3c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:141 (discriminator 2)
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
800011a4:	fdc42783          	lw	a5,-36(s0)
800011a8:	0007a683          	lw	a3,0(a5)
800011ac:	fd842703          	lw	a4,-40(s0)
800011b0:	fec42783          	lw	a5,-20(s0)
800011b4:	00f707b3          	add	a5,a4,a5
800011b8:	0007c783          	lbu	a5,0(a5)
800011bc:	00078593          	mv	a1,a5
800011c0:	00068513          	mv	a0,a3
800011c4:	e1dff0ef          	jal	ra,80000fe0 <HW_set_8bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 2)
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
800011c8:	fec42783          	lw	a5,-20(s0)
800011cc:	00178793          	addi	a5,a5,1
800011d0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 1)
800011d4:	fec42703          	lw	a4,-20(s0)
800011d8:	fd442783          	lw	a5,-44(s0)
800011dc:	faf760e3          	bltu	a4,a5,8000117c <UART_send+0x3c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:145
                              (uint_fast8_t)tx_buffer[char_idx] );
        }
    }
}
800011e0:	00000013          	nop
800011e4:	02c12083          	lw	ra,44(sp)
800011e8:	02812403          	lw	s0,40(sp)
800011ec:	03010113          	addi	sp,sp,48
800011f0:	00008067          	ret

800011f4 <UART_polled_tx_string>:
UART_polled_tx_string():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:239
UART_polled_tx_string
( 
    UART_instance_t * this_uart, 
    const uint8_t * p_sz_string
)
{
800011f4:	fd010113          	addi	sp,sp,-48
800011f8:	02112623          	sw	ra,44(sp)
800011fc:	02812423          	sw	s0,40(sp)
80001200:	03010413          	addi	s0,sp,48
80001204:	fca42e23          	sw	a0,-36(s0)
80001208:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246
    uint8_t tx_ready;

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( p_sz_string != NULL_BUFFER )
    
    if( ( this_uart != NULL_INSTANCE ) && ( p_sz_string != NULL_BUFFER ) )
8000120c:	fdc42783          	lw	a5,-36(s0)
80001210:	08078063          	beqz	a5,80001290 <UART_polled_tx_string+0x9c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246 (discriminator 1)
80001214:	fd842783          	lw	a5,-40(s0)
80001218:	06078c63          	beqz	a5,80001290 <UART_polled_tx_string+0x9c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:248
    {
        char_idx = 0U;
8000121c:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
80001220:	05c0006f          	j	8000127c <UART_polled_tx_string+0x88>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:253 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001224:	fdc42783          	lw	a5,-36(s0)
80001228:	0007a783          	lw	a5,0(a5)
8000122c:	01078793          	addi	a5,a5,16
80001230:	00078513          	mv	a0,a5
80001234:	db5ff0ef          	jal	ra,80000fe8 <HW_get_8bit_reg>
80001238:	00050793          	mv	a5,a0
8000123c:	0017f793          	andi	a5,a5,1
80001240:	fef405a3          	sb	a5,-21(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:255 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
80001244:	feb44783          	lbu	a5,-21(s0)
80001248:	fc078ee3          	beqz	a5,80001224 <UART_polled_tx_string+0x30>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:257
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
8000124c:	fdc42783          	lw	a5,-36(s0)
80001250:	0007a683          	lw	a3,0(a5)
80001254:	fd842703          	lw	a4,-40(s0)
80001258:	fec42783          	lw	a5,-20(s0)
8000125c:	00f707b3          	add	a5,a4,a5
80001260:	0007c783          	lbu	a5,0(a5)
80001264:	00078593          	mv	a1,a5
80001268:	00068513          	mv	a0,a3
8000126c:	d75ff0ef          	jal	ra,80000fe0 <HW_set_8bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:259
                              (uint_fast8_t)p_sz_string[char_idx] );
            char_idx++;
80001270:	fec42783          	lw	a5,-20(s0)
80001274:	00178793          	addi	a5,a5,1
80001278:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
8000127c:	fd842703          	lw	a4,-40(s0)
80001280:	fec42783          	lw	a5,-20(s0)
80001284:	00f707b3          	add	a5,a4,a5
80001288:	0007c783          	lbu	a5,0(a5)
8000128c:	f8079ce3          	bnez	a5,80001224 <UART_polled_tx_string+0x30>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:262
        }
    }
}
80001290:	00000013          	nop
80001294:	02c12083          	lw	ra,44(sp)
80001298:	02812403          	lw	s0,40(sp)
8000129c:	03010113          	addi	sp,sp,48
800012a0:	00008067          	ret

800012a4 <pvPortMalloc>:
pvPortMalloc():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:151
}
/*-----------------------------------------------------------*/


void *pvPortMalloc( size_t xWantedSize )
{
800012a4:	fc010113          	addi	sp,sp,-64
800012a8:	02112e23          	sw	ra,60(sp)
800012ac:	02812c23          	sw	s0,56(sp)
800012b0:	04010413          	addi	s0,sp,64
800012b4:	fca42623          	sw	a0,-52(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:154
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
800012b8:	fe042223          	sw	zero,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:156

	vTaskSuspendAll();
800012bc:	024010ef          	jal	ra,800022e0 <vTaskSuspendAll>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:160
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
800012c0:	9241a783          	lw	a5,-1756(gp) # 80007b94 <xHeapHasBeenInitialised.2777>
800012c4:	00079863          	bnez	a5,800012d4 <pvPortMalloc+0x30>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:162
		{
			prvHeapInit();
800012c8:	284000ef          	jal	ra,8000154c <prvHeapInit>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:163
			xHeapHasBeenInitialised = pdTRUE;
800012cc:	00100713          	li	a4,1
800012d0:	92e1a223          	sw	a4,-1756(gp) # 80007b94 <xHeapHasBeenInitialised.2777>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:168
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
800012d4:	fcc42783          	lw	a5,-52(s0)
800012d8:	02078a63          	beqz	a5,8000130c <pvPortMalloc+0x68>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:170
		{
			xWantedSize += heapSTRUCT_SIZE;
800012dc:	00800793          	li	a5,8
800012e0:	00078713          	mv	a4,a5
800012e4:	fcc42783          	lw	a5,-52(s0)
800012e8:	00e787b3          	add	a5,a5,a4
800012ec:	fcf42623          	sw	a5,-52(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:173

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
800012f0:	fcc42783          	lw	a5,-52(s0)
800012f4:	0037f793          	andi	a5,a5,3
800012f8:	00078a63          	beqz	a5,8000130c <pvPortMalloc+0x68>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:176
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
800012fc:	fcc42783          	lw	a5,-52(s0)
80001300:	ffc7f793          	andi	a5,a5,-4
80001304:	00478793          	addi	a5,a5,4
80001308:	fcf42623          	sw	a5,-52(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
8000130c:	fcc42783          	lw	a5,-52(s0)
80001310:	14078463          	beqz	a5,80001458 <pvPortMalloc+0x1b4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180 (discriminator 1)
80001314:	fcc42703          	lw	a4,-52(s0)
80001318:	000197b7          	lui	a5,0x19
8000131c:	ffb78793          	addi	a5,a5,-5 # 18ffb <HEAP_SIZE+0x8ffb>
80001320:	12e7ec63          	bltu	a5,a4,80001458 <pvPortMalloc+0x1b4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:184
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
80001324:	91418793          	addi	a5,gp,-1772 # 80007b84 <xStart>
80001328:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:185
			pxBlock = xStart.pxNextFreeBlock;
8000132c:	9141a783          	lw	a5,-1772(gp) # 80007b84 <xStart>
80001330:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
80001334:	0180006f          	j	8000134c <pvPortMalloc+0xa8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:188
			{
				pxPreviousBlock = pxBlock;
80001338:	fec42783          	lw	a5,-20(s0)
8000133c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:189
				pxBlock = pxBlock->pxNextFreeBlock;
80001340:	fec42783          	lw	a5,-20(s0)
80001344:	0007a783          	lw	a5,0(a5)
80001348:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
8000134c:	fec42783          	lw	a5,-20(s0)
80001350:	0047a783          	lw	a5,4(a5)
80001354:	fcc42703          	lw	a4,-52(s0)
80001358:	00e7f863          	bleu	a4,a5,80001368 <pvPortMalloc+0xc4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186 (discriminator 1)
8000135c:	fec42783          	lw	a5,-20(s0)
80001360:	0007a783          	lw	a5,0(a5)
80001364:	fc079ae3          	bnez	a5,80001338 <pvPortMalloc+0x94>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:193
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
80001368:	fec42703          	lw	a4,-20(s0)
8000136c:	91c18793          	addi	a5,gp,-1764 # 80007b8c <xEnd>
80001370:	0ef70463          	beq	a4,a5,80001458 <pvPortMalloc+0x1b4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:197
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
80001374:	fe842783          	lw	a5,-24(s0)
80001378:	0007a783          	lw	a5,0(a5)
8000137c:	00800713          	li	a4,8
80001380:	00e787b3          	add	a5,a5,a4
80001384:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:201

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
80001388:	fec42783          	lw	a5,-20(s0)
8000138c:	0007a703          	lw	a4,0(a5)
80001390:	fe842783          	lw	a5,-24(s0)
80001394:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:204

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
80001398:	fec42783          	lw	a5,-20(s0)
8000139c:	0047a703          	lw	a4,4(a5)
800013a0:	fcc42783          	lw	a5,-52(s0)
800013a4:	40f707b3          	sub	a5,a4,a5
800013a8:	00800713          	li	a4,8
800013ac:	00171713          	slli	a4,a4,0x1
800013b0:	08f77663          	bleu	a5,a4,8000143c <pvPortMalloc+0x198>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:209
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
800013b4:	fec42703          	lw	a4,-20(s0)
800013b8:	fcc42783          	lw	a5,-52(s0)
800013bc:	00f707b3          	add	a5,a4,a5
800013c0:	fcf42e23          	sw	a5,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:213

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
800013c4:	fec42783          	lw	a5,-20(s0)
800013c8:	0047a703          	lw	a4,4(a5)
800013cc:	fcc42783          	lw	a5,-52(s0)
800013d0:	40f70733          	sub	a4,a4,a5
800013d4:	fdc42783          	lw	a5,-36(s0)
800013d8:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:214
					pxBlock->xBlockSize = xWantedSize;
800013dc:	fec42783          	lw	a5,-20(s0)
800013e0:	fcc42703          	lw	a4,-52(s0)
800013e4:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
800013e8:	fdc42783          	lw	a5,-36(s0)
800013ec:	0047a783          	lw	a5,4(a5)
800013f0:	fcf42c23          	sw	a5,-40(s0)
800013f4:	91418793          	addi	a5,gp,-1772 # 80007b84 <xStart>
800013f8:	fef42023          	sw	a5,-32(s0)
800013fc:	0100006f          	j	8000140c <pvPortMalloc+0x168>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 3)
80001400:	fe042783          	lw	a5,-32(s0)
80001404:	0007a783          	lw	a5,0(a5)
80001408:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 1)
8000140c:	fe042783          	lw	a5,-32(s0)
80001410:	0007a783          	lw	a5,0(a5)
80001414:	0047a783          	lw	a5,4(a5)
80001418:	fd842703          	lw	a4,-40(s0)
8000141c:	fee7e2e3          	bltu	a5,a4,80001400 <pvPortMalloc+0x15c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 4)
80001420:	fe042783          	lw	a5,-32(s0)
80001424:	0007a703          	lw	a4,0(a5)
80001428:	fdc42783          	lw	a5,-36(s0)
8000142c:	00e7a023          	sw	a4,0(a5)
80001430:	fe042783          	lw	a5,-32(s0)
80001434:	fdc42703          	lw	a4,-36(s0)
80001438:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:220
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
8000143c:	800087b7          	lui	a5,0x80008
80001440:	a707a703          	lw	a4,-1424(a5) # 80007a70 <__stack_top+0xfffc5810>
80001444:	fec42783          	lw	a5,-20(s0)
80001448:	0047a783          	lw	a5,4(a5)
8000144c:	40f70733          	sub	a4,a4,a5
80001450:	800087b7          	lui	a5,0x80008
80001454:	a6e7a823          	sw	a4,-1424(a5) # 80007a70 <__stack_top+0xfffc5810>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:226
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
80001458:	6b1000ef          	jal	ra,80002308 <xTaskResumeAll>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:230

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
8000145c:	fe442783          	lw	a5,-28(s0)
80001460:	00079463          	bnez	a5,80001468 <pvPortMalloc+0x1c4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:233
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
80001464:	3b5050ef          	jal	ra,80007018 <vApplicationMallocFailedHook>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:238
		}
	}
	#endif

	return pvReturn;
80001468:	fe442783          	lw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:239
}
8000146c:	00078513          	mv	a0,a5
80001470:	03c12083          	lw	ra,60(sp)
80001474:	03812403          	lw	s0,56(sp)
80001478:	04010113          	addi	sp,sp,64
8000147c:	00008067          	ret

80001480 <vPortFree>:
vPortFree():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:243
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
80001480:	fd010113          	addi	sp,sp,-48
80001484:	02112623          	sw	ra,44(sp)
80001488:	02812423          	sw	s0,40(sp)
8000148c:	03010413          	addi	s0,sp,48
80001490:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:244
uint8_t *puc = ( uint8_t * ) pv;
80001494:	fdc42783          	lw	a5,-36(s0)
80001498:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:247
BlockLink_t *pxLink;

	if( pv != NULL )
8000149c:	fdc42783          	lw	a5,-36(s0)
800014a0:	08078c63          	beqz	a5,80001538 <vPortFree+0xb8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:251
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
800014a4:	00800793          	li	a5,8
800014a8:	40f007b3          	neg	a5,a5
800014ac:	fe842703          	lw	a4,-24(s0)
800014b0:	00f707b3          	add	a5,a4,a5
800014b4:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:255

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
800014b8:	fe842783          	lw	a5,-24(s0)
800014bc:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:257

		vTaskSuspendAll();
800014c0:	621000ef          	jal	ra,800022e0 <vTaskSuspendAll>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
800014c4:	fe442783          	lw	a5,-28(s0)
800014c8:	0047a783          	lw	a5,4(a5)
800014cc:	fef42023          	sw	a5,-32(s0)
800014d0:	91418793          	addi	a5,gp,-1772 # 80007b84 <xStart>
800014d4:	fef42623          	sw	a5,-20(s0)
800014d8:	0100006f          	j	800014e8 <vPortFree+0x68>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 3)
800014dc:	fec42783          	lw	a5,-20(s0)
800014e0:	0007a783          	lw	a5,0(a5)
800014e4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 1)
800014e8:	fec42783          	lw	a5,-20(s0)
800014ec:	0007a783          	lw	a5,0(a5)
800014f0:	0047a783          	lw	a5,4(a5)
800014f4:	fe042703          	lw	a4,-32(s0)
800014f8:	fee7e2e3          	bltu	a5,a4,800014dc <vPortFree+0x5c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 4)
800014fc:	fec42783          	lw	a5,-20(s0)
80001500:	0007a703          	lw	a4,0(a5)
80001504:	fe442783          	lw	a5,-28(s0)
80001508:	00e7a023          	sw	a4,0(a5)
8000150c:	fec42783          	lw	a5,-20(s0)
80001510:	fe442703          	lw	a4,-28(s0)
80001514:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:261 (discriminator 4)
			xFreeBytesRemaining += pxLink->xBlockSize;
80001518:	fe442783          	lw	a5,-28(s0)
8000151c:	0047a703          	lw	a4,4(a5)
80001520:	800087b7          	lui	a5,0x80008
80001524:	a707a783          	lw	a5,-1424(a5) # 80007a70 <__stack_top+0xfffc5810>
80001528:	00f70733          	add	a4,a4,a5
8000152c:	800087b7          	lui	a5,0x80008
80001530:	a6e7a823          	sw	a4,-1424(a5) # 80007a70 <__stack_top+0xfffc5810>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:264 (discriminator 4)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
80001534:	5d5000ef          	jal	ra,80002308 <xTaskResumeAll>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:266
	}
}
80001538:	00000013          	nop
8000153c:	02c12083          	lw	ra,44(sp)
80001540:	02812403          	lw	s0,40(sp)
80001544:	03010113          	addi	sp,sp,48
80001548:	00008067          	ret

8000154c <prvHeapInit>:
prvHeapInit():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:282
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
8000154c:	fe010113          	addi	sp,sp,-32
80001550:	00812e23          	sw	s0,28(sp)
80001554:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:287
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
80001558:	800087b7          	lui	a5,0x80008
8000155c:	be478793          	addi	a5,a5,-1052 # 80007be4 <__stack_top+0xfffc5984>
80001560:	ffc7f793          	andi	a5,a5,-4
80001564:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:291

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
80001568:	fec42703          	lw	a4,-20(s0)
8000156c:	90e1aa23          	sw	a4,-1772(gp) # 80007b84 <xStart>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:292
	xStart.xBlockSize = ( size_t ) 0;
80001570:	91418793          	addi	a5,gp,-1772 # 80007b84 <xStart>
80001574:	0007a223          	sw	zero,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:295

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
80001578:	91c18793          	addi	a5,gp,-1764 # 80007b8c <xEnd>
8000157c:	00019737          	lui	a4,0x19
80001580:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
80001584:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:296
	xEnd.pxNextFreeBlock = NULL;
80001588:	9001ae23          	sw	zero,-1764(gp) # 80007b8c <xEnd>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:300

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
8000158c:	fec42783          	lw	a5,-20(s0)
80001590:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:301
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
80001594:	fe842783          	lw	a5,-24(s0)
80001598:	00019737          	lui	a4,0x19
8000159c:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
800015a0:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:302
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
800015a4:	fe842783          	lw	a5,-24(s0)
800015a8:	91c18713          	addi	a4,gp,-1764 # 80007b8c <xEnd>
800015ac:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:303
}
800015b0:	00000013          	nop
800015b4:	01c12403          	lw	s0,28(sp)
800015b8:	02010113          	addi	sp,sp,32
800015bc:	00008067          	ret

800015c0 <raise_soft_interrupt>:
raise_soft_interrupt():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:227
/*==============================================================================
 * The function raise_soft_interrupt() raises a synchronous software interrupt by
 * writing into the MSIP register.
 */
static inline void raise_soft_interrupt()
{
800015c0:	fe010113          	addi	sp,sp,-32
800015c4:	00812e23          	sw	s0,28(sp)
800015c8:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:228
    unsigned long hart_id = read_csr(mhartid);
800015cc:	f14027f3          	csrr	a5,mhartid
800015d0:	fef42623          	sw	a5,-20(s0)
800015d4:	fec42783          	lw	a5,-20(s0)
800015d8:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:231

    /*You need to make sure that the global interrupt is enabled*/
    set_csr(mie, MIP_MSIP);       /*Enable software interrupt bit */
800015dc:	304467f3          	csrrsi	a5,mie,8
800015e0:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:232
    PRCI->MSIP[hart_id] = 0x01;   /*raise soft interrupt for hart0*/
800015e4:	44000737          	lui	a4,0x44000
800015e8:	fe842783          	lw	a5,-24(s0)
800015ec:	00279793          	slli	a5,a5,0x2
800015f0:	00f707b3          	add	a5,a4,a5
800015f4:	00100713          	li	a4,1
800015f8:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:233
}
800015fc:	00000013          	nop
80001600:	01c12403          	lw	s0,28(sp)
80001604:	02010113          	addi	sp,sp,32
80001608:	00008067          	ret

8000160c <vPortEnterCritical>:
vPortEnterCritical():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:132
 * Used to catch tasks that attempt to return from their implementing function.
 */
static void prvTaskExitError( void );

void vPortEnterCritical( void )
{
8000160c:	ff010113          	addi	sp,sp,-16
80001610:	00812623          	sw	s0,12(sp)
80001614:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:133
	portDISABLE_INTERRUPTS();
80001618:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:134
	uxCriticalNesting++;
8000161c:	800087b7          	lui	a5,0x80008
80001620:	a747a783          	lw	a5,-1420(a5) # 80007a74 <__stack_top+0xfffc5814>
80001624:	00178713          	addi	a4,a5,1
80001628:	800087b7          	lui	a5,0x80008
8000162c:	a6e7aa23          	sw	a4,-1420(a5) # 80007a74 <__stack_top+0xfffc5814>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:135
}
80001630:	00000013          	nop
80001634:	00c12403          	lw	s0,12(sp)
80001638:	01010113          	addi	sp,sp,16
8000163c:	00008067          	ret

80001640 <vPortExitCritical>:
vPortExitCritical():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:139
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
80001640:	ff010113          	addi	sp,sp,-16
80001644:	00812623          	sw	s0,12(sp)
80001648:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:140
	uxCriticalNesting--;
8000164c:	800087b7          	lui	a5,0x80008
80001650:	a747a783          	lw	a5,-1420(a5) # 80007a74 <__stack_top+0xfffc5814>
80001654:	fff78713          	addi	a4,a5,-1
80001658:	800087b7          	lui	a5,0x80008
8000165c:	a6e7aa23          	sw	a4,-1420(a5) # 80007a74 <__stack_top+0xfffc5814>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:141
	if( uxCriticalNesting == 0 )
80001660:	800087b7          	lui	a5,0x80008
80001664:	a747a783          	lw	a5,-1420(a5) # 80007a74 <__stack_top+0xfffc5814>
80001668:	00079463          	bnez	a5,80001670 <vPortExitCritical+0x30>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:143
	{
		portENABLE_INTERRUPTS();
8000166c:	30046073          	csrsi	mstatus,8
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:145
	}
}
80001670:	00000013          	nop
80001674:	00c12403          	lw	s0,12(sp)
80001678:	01010113          	addi	sp,sp,16
8000167c:	00008067          	ret

80001680 <prvSetNextTimerInterrupt>:
prvSetNextTimerInterrupt():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:151
/*-----------------------------------------------------------*/

/* Sets the next timer interrupt
 * Reads previous timer compare register, and adds tickrate */
static void prvSetNextTimerInterrupt(void)
{
80001680:	fe010113          	addi	sp,sp,-32
80001684:	00812e23          	sw	s0,28(sp)
80001688:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:154
	uint64_t time;

	time = mtime->val_low;
8000168c:	80008637          	lui	a2,0x80008
80001690:	a7862603          	lw	a2,-1416(a2) # 80007a78 <__stack_top+0xfffc5818>
80001694:	00062603          	lw	a2,0(a2)
80001698:	fec42423          	sw	a2,-24(s0)
8000169c:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:155
	time |= ((uint64_t)mtime->val_high << 32);
800016a0:	80008637          	lui	a2,0x80008
800016a4:	a7862603          	lw	a2,-1416(a2) # 80007a78 <__stack_top+0xfffc5818>
800016a8:	00462603          	lw	a2,4(a2)
800016ac:	00060693          	mv	a3,a2
800016b0:	00000713          	li	a4,0
800016b4:	00069813          	slli	a6,a3,0x0
800016b8:	00000793          	li	a5,0
800016bc:	fe842703          	lw	a4,-24(s0)
800016c0:	00f76733          	or	a4,a4,a5
800016c4:	fee42423          	sw	a4,-24(s0)
800016c8:	fec42703          	lw	a4,-20(s0)
800016cc:	010767b3          	or	a5,a4,a6
800016d0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:157

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
800016d4:	fe842683          	lw	a3,-24(s0)
800016d8:	fec42703          	lw	a4,-20(s0)
800016dc:	000f45b7          	lui	a1,0xf4
800016e0:	24058593          	addi	a1,a1,576 # f4240 <RAM_SIZE+0x74240>
800016e4:	00000613          	li	a2,0
800016e8:	00b687b3          	add	a5,a3,a1
800016ec:	00078513          	mv	a0,a5
800016f0:	00d53533          	sltu	a0,a0,a3
800016f4:	00c70833          	add	a6,a4,a2
800016f8:	01050733          	add	a4,a0,a6
800016fc:	00070813          	mv	a6,a4
80001700:	fef42423          	sw	a5,-24(s0)
80001704:	ff042623          	sw	a6,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:159

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
80001708:	800087b7          	lui	a5,0x80008
8000170c:	a7c7a783          	lw	a5,-1412(a5) # 80007a7c <__stack_top+0xfffc581c>
80001710:	fe842703          	lw	a4,-24(s0)
80001714:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:160
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
80001718:	fec42783          	lw	a5,-20(s0)
8000171c:	0007d313          	srli	t1,a5,0x0
80001720:	00000393          	li	t2,0
80001724:	800087b7          	lui	a5,0x80008
80001728:	a7c7a783          	lw	a5,-1412(a5) # 80007a7c <__stack_top+0xfffc581c>
8000172c:	00030713          	mv	a4,t1
80001730:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:163

	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
80001734:	08000793          	li	a5,128
80001738:	3047a073          	csrs	mie,a5
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:164
}
8000173c:	00000013          	nop
80001740:	01c12403          	lw	s0,28(sp)
80001744:	02010113          	addi	sp,sp,32
80001748:	00008067          	ret

8000174c <vPortSetupTimer>:
vPortSetupTimer():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:169
/*-----------------------------------------------------------*/

/* Sets and enable the timer interrupt */
void vPortSetupTimer(void)
{
8000174c:	fe010113          	addi	sp,sp,-32
80001750:	00812e23          	sw	s0,28(sp)
80001754:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:172
	uint64_t time;

	time = mtime->val_low;
80001758:	80008637          	lui	a2,0x80008
8000175c:	a7862603          	lw	a2,-1416(a2) # 80007a78 <__stack_top+0xfffc5818>
80001760:	00062603          	lw	a2,0(a2)
80001764:	fec42423          	sw	a2,-24(s0)
80001768:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:173
	time |= ((uint64_t)mtime->val_high << 32);
8000176c:	80008637          	lui	a2,0x80008
80001770:	a7862603          	lw	a2,-1416(a2) # 80007a78 <__stack_top+0xfffc5818>
80001774:	00462603          	lw	a2,4(a2)
80001778:	00060693          	mv	a3,a2
8000177c:	00000713          	li	a4,0
80001780:	00069813          	slli	a6,a3,0x0
80001784:	00000793          	li	a5,0
80001788:	fe842703          	lw	a4,-24(s0)
8000178c:	00f76733          	or	a4,a4,a5
80001790:	fee42423          	sw	a4,-24(s0)
80001794:	fec42703          	lw	a4,-20(s0)
80001798:	010767b3          	or	a5,a4,a6
8000179c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:175

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
800017a0:	fe842683          	lw	a3,-24(s0)
800017a4:	fec42703          	lw	a4,-20(s0)
800017a8:	000f45b7          	lui	a1,0xf4
800017ac:	24058593          	addi	a1,a1,576 # f4240 <RAM_SIZE+0x74240>
800017b0:	00000613          	li	a2,0
800017b4:	00b687b3          	add	a5,a3,a1
800017b8:	00078513          	mv	a0,a5
800017bc:	00d53533          	sltu	a0,a0,a3
800017c0:	00c70833          	add	a6,a4,a2
800017c4:	01050733          	add	a4,a0,a6
800017c8:	00070813          	mv	a6,a4
800017cc:	fef42423          	sw	a5,-24(s0)
800017d0:	ff042623          	sw	a6,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:177

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
800017d4:	800087b7          	lui	a5,0x80008
800017d8:	a7c7a783          	lw	a5,-1412(a5) # 80007a7c <__stack_top+0xfffc581c>
800017dc:	fe842703          	lw	a4,-24(s0)
800017e0:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:178
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
800017e4:	fec42783          	lw	a5,-20(s0)
800017e8:	0007d313          	srli	t1,a5,0x0
800017ec:	00000393          	li	t2,0
800017f0:	800087b7          	lui	a5,0x80008
800017f4:	a7c7a783          	lw	a5,-1412(a5) # 80007a7c <__stack_top+0xfffc581c>
800017f8:	00030713          	mv	a4,t1
800017fc:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:182


	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
80001800:	08000793          	li	a5,128
80001804:	3047a073          	csrs	mie,a5
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:183
}
80001808:	00000013          	nop
8000180c:	01c12403          	lw	s0,28(sp)
80001810:	02010113          	addi	sp,sp,32
80001814:	00008067          	ret

80001818 <prvTaskExitError>:
prvTaskExitError():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:187
/*-----------------------------------------------------------*/

void prvTaskExitError( void )
{
80001818:	ff010113          	addi	sp,sp,-16
8000181c:	00812623          	sw	s0,12(sp)
80001820:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
80001824:	800087b7          	lui	a5,0x80008
80001828:	a747a703          	lw	a4,-1420(a5) # 80007a74 <__stack_top+0xfffc5814>
8000182c:	fff00793          	li	a5,-1
80001830:	00f70663          	beq	a4,a5,8000183c <prvTaskExitError+0x24>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194 (discriminator 1)
80001834:	30047073          	csrci	mstatus,8
80001838:	0000006f          	j	80001838 <prvTaskExitError+0x20>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:195
	portDISABLE_INTERRUPTS();
8000183c:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:196 (discriminator 2)
	for( ;; );
80001840:	0000006f          	j	80001840 <prvTaskExitError+0x28>

80001844 <pxPortInitialiseStack>:
pxPortInitialiseStack():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:220

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
80001844:	fe010113          	addi	sp,sp,-32
80001848:	00812e23          	sw	s0,28(sp)
8000184c:	02010413          	addi	s0,sp,32
80001850:	fea42623          	sw	a0,-20(s0)
80001854:	feb42423          	sw	a1,-24(s0)
80001858:	fec42223          	sw	a2,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:224
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	register int *tp asm("x3");
	pxTopOfStack--;
8000185c:	fec42783          	lw	a5,-20(s0)
80001860:	ffc78793          	addi	a5,a5,-4
80001864:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:225
	*pxTopOfStack = (portSTACK_TYPE)pxCode;			/* Start address */
80001868:	fe842703          	lw	a4,-24(s0)
8000186c:	fec42783          	lw	a5,-20(s0)
80001870:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:226
	pxTopOfStack -= 22;
80001874:	fec42783          	lw	a5,-20(s0)
80001878:	fa878793          	addi	a5,a5,-88
8000187c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:227
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;	/* Register a0 */
80001880:	fe442703          	lw	a4,-28(s0)
80001884:	fec42783          	lw	a5,-20(s0)
80001888:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:228
	pxTopOfStack -= 6;
8000188c:	fec42783          	lw	a5,-20(s0)
80001890:	fe878793          	addi	a5,a5,-24
80001894:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:229
	*pxTopOfStack = (portSTACK_TYPE)tp; /* Register thread pointer */
80001898:	00018793          	mv	a5,gp
8000189c:	00078713          	mv	a4,a5
800018a0:	fec42783          	lw	a5,-20(s0)
800018a4:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:230
	pxTopOfStack -= 3;
800018a8:	fec42783          	lw	a5,-20(s0)
800018ac:	ff478793          	addi	a5,a5,-12
800018b0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:231
	*pxTopOfStack = (portSTACK_TYPE)prvTaskExitError; /* Register ra */
800018b4:	800027b7          	lui	a5,0x80002
800018b8:	81878713          	addi	a4,a5,-2024 # 80001818 <__stack_top+0xfffbf5b8>
800018bc:	fec42783          	lw	a5,-20(s0)
800018c0:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:233

	return pxTopOfStack;
800018c4:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:234
}
800018c8:	00078513          	mv	a0,a5
800018cc:	01c12403          	lw	s0,28(sp)
800018d0:	02010113          	addi	sp,sp,32
800018d4:	00008067          	ret

800018d8 <SysTick_Handler>:
SysTick_Handler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:238
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void )
{
800018d8:	ff010113          	addi	sp,sp,-16
800018dc:	00112623          	sw	ra,12(sp)
800018e0:	00812423          	sw	s0,8(sp)
800018e4:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:241
	/*Save Context*/
	{
		__asm volatile("lw	t0, pxCurrentTCB");
800018e8:	92c1a283          	lw	t0,-1748(gp) # 80007b9c <pxCurrentTCB>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:242
		__asm volatile("sw	a2, 0x0(t0)");
800018ec:	00c2a023          	sw	a2,0(t0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:246
	}

	/* Increment the RTOS tick. */
	prvSetNextTimerInterrupt();
800018f0:	d91ff0ef          	jal	ra,80001680 <prvSetNextTimerInterrupt>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:249

	/*Switch task */
	if( xTaskIncrementTick() != pdFALSE )
800018f4:	3ad000ef          	jal	ra,800024a0 <xTaskIncrementTick>
800018f8:	00050793          	mv	a5,a0
800018fc:	00078463          	beqz	a5,80001904 <SysTick_Handler+0x2c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:251
	{
		vTaskSwitchContext();
80001900:	58d000ef          	jal	ra,8000268c <vTaskSwitchContext>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:256
	}

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
80001904:	92c1a103          	lw	sp,-1748(gp) # 80007b9c <pxCurrentTCB>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:257
		__asm volatile("lw	sp, 0x0(sp)");
80001908:	00012103          	lw	sp,0(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:259

		__asm volatile("lw	t0, 31 * 4(sp)");
8000190c:	07c12283          	lw	t0,124(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:260
		__asm volatile("csrw	mepc, t0");
80001910:	34129073          	csrw	mepc,t0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:263

		// Added by Iaçanã
		__asm volatile("lui	t0, 0x2");
80001914:	000022b7          	lui	t0,0x2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:264
  		__asm volatile("addi t0,t0,-2048");
80001918:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:265
		__asm volatile("csrs mstatus,t0");
8000191c:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:267

		__asm volatile("lw	t0, 32 * 4(sp)");
80001920:	08012283          	lw	t0,128(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:268
		__asm volatile("slli t0, t0, 0x4");
80001924:	00429293          	slli	t0,t0,0x4
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:269
		__asm volatile("csrs mstatus, t0");
80001928:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:271

		__asm volatile("lw	x1, 0x0(sp)");
8000192c:	00012083          	lw	ra,0(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:272
		__asm volatile("lw   x4, 3 * 4(sp)");
80001930:	00c12203          	lw	tp,12(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:273
		__asm volatile("lw   x5, 4 * 4(sp)");
80001934:	01012283          	lw	t0,16(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:274
		__asm volatile("lw   x6, 5 * 4(sp)");
80001938:	01412303          	lw	t1,20(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:275
		__asm volatile("lw   x7, 6 * 4(sp)");
8000193c:	01812383          	lw	t2,24(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:276
		__asm volatile("lw   x8, 7 * 4(sp)");
80001940:	01c12403          	lw	s0,28(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:277
		__asm volatile("lw   x9, 8 * 4(sp)");
80001944:	02012483          	lw	s1,32(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:278
		__asm volatile("lw   x10, 9 * 4(sp)");
80001948:	02412503          	lw	a0,36(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:279
		__asm volatile("lw   x11, 10 * 4(sp)");
8000194c:	02812583          	lw	a1,40(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:280
		__asm volatile("lw   x12, 11 * 4(sp)");
80001950:	02c12603          	lw	a2,44(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:281
		__asm volatile("lw   x13, 12 * 4(sp)");
80001954:	03012683          	lw	a3,48(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:282
		__asm volatile("lw   x14, 13 * 4(sp)");
80001958:	03412703          	lw	a4,52(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:283
		__asm volatile("lw   x15, 14 * 4(sp)");
8000195c:	03812783          	lw	a5,56(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:284
		__asm volatile("lw   x16, 15 * 4(sp)");
80001960:	03c12803          	lw	a6,60(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:285
		__asm volatile("lw   x17, 16 * 4(sp)");
80001964:	04012883          	lw	a7,64(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:286
		__asm volatile("lw   x18, 17 * 4(sp)");
80001968:	04412903          	lw	s2,68(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:287
		__asm volatile("lw   x19, 18 * 4(sp)");
8000196c:	04812983          	lw	s3,72(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:288
		__asm volatile("lw   x20, 19 * 4(sp)");
80001970:	04c12a03          	lw	s4,76(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:289
		__asm volatile("lw   x21, 20 * 4(sp)");
80001974:	05012a83          	lw	s5,80(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:290
		__asm volatile("lw   x22, 21 * 4(sp)");
80001978:	05412b03          	lw	s6,84(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:291
		__asm volatile("lw   x23, 22 * 4(sp)");
8000197c:	05812b83          	lw	s7,88(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:292
		__asm volatile("lw   x24, 23 * 4(sp)");
80001980:	05c12c03          	lw	s8,92(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:293
		__asm volatile("lw   x25, 24 * 4(sp)");
80001984:	06012c83          	lw	s9,96(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:294
		__asm volatile("lw   x26, 25 * 4(sp)");
80001988:	06412d03          	lw	s10,100(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:295
		__asm volatile("lw   x27, 26 * 4(sp)");
8000198c:	06812d83          	lw	s11,104(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:296
		__asm volatile("lw   x28, 27 * 4(sp)");
80001990:	06c12e03          	lw	t3,108(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:297
		__asm volatile("lw   x29, 28 * 4(sp)");
80001994:	07012e83          	lw	t4,112(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:298
		__asm volatile("lw   x30, 29 * 4(sp)");
80001998:	07412f03          	lw	t5,116(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:299
		__asm volatile("lw   x31, 30 * 4(sp)");
8000199c:	07812f83          	lw	t6,120(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:301

		__asm volatile("addi	sp, sp, 4 * 33");
800019a0:	08410113          	addi	sp,sp,132
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:303

		__asm volatile("mret");
800019a4:	30200073          	mret
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:305
	}
}
800019a8:	00000013          	nop
800019ac:	00c12083          	lw	ra,12(sp)
800019b0:	00812403          	lw	s0,8(sp)
800019b4:	01010113          	addi	sp,sp,16
800019b8:	00008067          	ret

800019bc <xPortStartScheduler>:
xPortStartScheduler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:308
uint32_t g_startscheduler = 0;
BaseType_t xPortStartScheduler( void )
{
800019bc:	ff010113          	addi	sp,sp,-16
800019c0:	00112623          	sw	ra,12(sp)
800019c4:	00812423          	sw	s0,8(sp)
800019c8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:309
	vPortSetupTimer();
800019cc:	d81ff0ef          	jal	ra,8000174c <vPortSetupTimer>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:310
	uxCriticalNesting = 0;
800019d0:	800087b7          	lui	a5,0x80008
800019d4:	a607aa23          	sw	zero,-1420(a5) # 80007a74 <__stack_top+0xfffc5814>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:311
	g_startscheduler = 1;
800019d8:	00100713          	li	a4,1
800019dc:	92e1a423          	sw	a4,-1752(gp) # 80007b98 <g_startscheduler>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:312
	__enable_irq();
800019e0:	9c1fe0ef          	jal	ra,800003a0 <__enable_irq>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:314

	raise_soft_interrupt();
800019e4:	bddff0ef          	jal	ra,800015c0 <raise_soft_interrupt>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:317

	/*Should not get here*/
	return pdFALSE;
800019e8:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:318
}
800019ec:	00078513          	mv	a0,a5
800019f0:	00c12083          	lw	ra,12(sp)
800019f4:	00812403          	lw	s0,8(sp)
800019f8:	01010113          	addi	sp,sp,16
800019fc:	00008067          	ret

80001a00 <Software_IRQHandler>:
Software_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:321

void Software_IRQHandler(void)
{
80001a00:	ff010113          	addi	sp,sp,-16
80001a04:	00112623          	sw	ra,12(sp)
80001a08:	00812423          	sw	s0,8(sp)
80001a0c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:322
	if(1 == g_startscheduler)
80001a10:	9281a703          	lw	a4,-1752(gp) # 80007b98 <g_startscheduler>
80001a14:	00100793          	li	a5,1
80001a18:	00f71863          	bne	a4,a5,80001a28 <Software_IRQHandler+0x28>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:324
	{
		g_startscheduler = 2; //skip the save n switch context first time when scheduler is starting.
80001a1c:	00200713          	li	a4,2
80001a20:	92e1a423          	sw	a4,-1752(gp) # 80007b98 <g_startscheduler>
80001a24:	0100006f          	j	80001a34 <Software_IRQHandler+0x34>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:330
	}
	else
	{
		/*Save Context*/
		{
			__asm volatile("lw	t0, pxCurrentTCB");
80001a28:	92c1a283          	lw	t0,-1748(gp) # 80007b9c <pxCurrentTCB>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:331
			__asm volatile("sw	a2, 0x0(t0)");
80001a2c:	00c2a023          	sw	a2,0(t0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:334
		}

		vTaskSwitchContext();
80001a30:	45d000ef          	jal	ra,8000268c <vTaskSwitchContext>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:338
	}

	// Moved by Imperas (was previously causing corruption of a5)
	PRCI->MSIP[0] = 0x00;
80001a34:	440007b7          	lui	a5,0x44000
80001a38:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:342

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
80001a3c:	92c1a103          	lw	sp,-1748(gp) # 80007b9c <pxCurrentTCB>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:343
		__asm volatile("lw	sp, 0x0(sp)");
80001a40:	00012103          	lw	sp,0(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:345

		__asm volatile("lw	t0, 31 * 4(sp)");
80001a44:	07c12283          	lw	t0,124(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:346
		__asm volatile("csrw	mepc, t0");
80001a48:	34129073          	csrw	mepc,t0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:349

		// Added by Iaçanã
		__asm volatile("lui	t0, 0x2");
80001a4c:	000022b7          	lui	t0,0x2
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:350
  		__asm volatile("addi t0,t0,-2048");
80001a50:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:351
		__asm volatile("csrs mstatus,t0");
80001a54:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:353

		__asm volatile("lw	t0, 32 * 4(sp)");
80001a58:	08012283          	lw	t0,128(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:354
		__asm volatile("slli t0, t0, 0x4");
80001a5c:	00429293          	slli	t0,t0,0x4
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:355
		__asm volatile("csrs mstatus, t0");
80001a60:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:357

		__asm volatile("lw	x1, 0x0(sp)");
80001a64:	00012083          	lw	ra,0(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:358
		__asm volatile("lw   x4, 3 * 4(sp)");
80001a68:	00c12203          	lw	tp,12(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:359
		__asm volatile("lw   x5, 4 * 4(sp)");
80001a6c:	01012283          	lw	t0,16(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:360
		__asm volatile("lw   x6, 5 * 4(sp)");
80001a70:	01412303          	lw	t1,20(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:361
		__asm volatile("lw   x7, 6 * 4(sp)");
80001a74:	01812383          	lw	t2,24(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:362
		__asm volatile("lw   x8, 7 * 4(sp)");
80001a78:	01c12403          	lw	s0,28(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:363
		__asm volatile("lw   x9, 8 * 4(sp)");
80001a7c:	02012483          	lw	s1,32(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:364
		__asm volatile("lw   x10, 9 * 4(sp)");
80001a80:	02412503          	lw	a0,36(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:365
		__asm volatile("lw   x11, 10 * 4(sp)");
80001a84:	02812583          	lw	a1,40(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:366
		__asm volatile("lw   x12, 11 * 4(sp)");
80001a88:	02c12603          	lw	a2,44(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:367
		__asm volatile("lw   x13, 12 * 4(sp)");
80001a8c:	03012683          	lw	a3,48(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:368
		__asm volatile("lw   x14, 13 * 4(sp)");
80001a90:	03412703          	lw	a4,52(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:369
		__asm volatile("lw   x15, 14 * 4(sp)");
80001a94:	03812783          	lw	a5,56(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:370
		__asm volatile("lw   x16, 15 * 4(sp)");
80001a98:	03c12803          	lw	a6,60(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:371
		__asm volatile("lw   x17, 16 * 4(sp)");
80001a9c:	04012883          	lw	a7,64(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:372
		__asm volatile("lw   x18, 17 * 4(sp)");
80001aa0:	04412903          	lw	s2,68(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:373
		__asm volatile("lw   x19, 18 * 4(sp)");
80001aa4:	04812983          	lw	s3,72(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:374
		__asm volatile("lw   x20, 19 * 4(sp)");
80001aa8:	04c12a03          	lw	s4,76(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:375
		__asm volatile("lw   x21, 20 * 4(sp)");
80001aac:	05012a83          	lw	s5,80(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:376
		__asm volatile("lw   x22, 21 * 4(sp)");
80001ab0:	05412b03          	lw	s6,84(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:377
		__asm volatile("lw   x23, 22 * 4(sp)");
80001ab4:	05812b83          	lw	s7,88(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:378
		__asm volatile("lw   x24, 23 * 4(sp)");
80001ab8:	05c12c03          	lw	s8,92(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:379
		__asm volatile("lw   x25, 24 * 4(sp)");
80001abc:	06012c83          	lw	s9,96(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:380
		__asm volatile("lw   x26, 25 * 4(sp)");
80001ac0:	06412d03          	lw	s10,100(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:381
		__asm volatile("lw   x27, 26 * 4(sp)");
80001ac4:	06812d83          	lw	s11,104(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:382
		__asm volatile("lw   x28, 27 * 4(sp)");
80001ac8:	06c12e03          	lw	t3,108(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:383
		__asm volatile("lw   x29, 28 * 4(sp)");
80001acc:	07012e83          	lw	t4,112(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:384
		__asm volatile("lw   x30, 29 * 4(sp)");
80001ad0:	07412f03          	lw	t5,116(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:385
		__asm volatile("lw   x31, 30 * 4(sp)");
80001ad4:	07812f83          	lw	t6,120(sp)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:387

		__asm volatile("addi	sp, sp, 4 * 33");
80001ad8:	08410113          	addi	sp,sp,132
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:392

	    // Moved by Imperas (causing corruption of a5 at this position)
		//PRCI->MSIP[0] = 0x00;

		__asm volatile("mret");
80001adc:	30200073          	mret
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:394
	}
}
80001ae0:	00000013          	nop
80001ae4:	00c12083          	lw	ra,12(sp)
80001ae8:	00812403          	lw	s0,8(sp)
80001aec:	01010113          	addi	sp,sp,16
80001af0:	00008067          	ret

80001af4 <vPortYield>:
vPortYield():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:397

void vPortYield( void )
{
80001af4:	ff010113          	addi	sp,sp,-16
80001af8:	00112623          	sw	ra,12(sp)
80001afc:	00812423          	sw	s0,8(sp)
80001b00:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:398
	raise_soft_interrupt();
80001b04:	abdff0ef          	jal	ra,800015c0 <raise_soft_interrupt>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:399
}
80001b08:	00000013          	nop
80001b0c:	00c12083          	lw	ra,12(sp)
80001b10:	00812403          	lw	s0,8(sp)
80001b14:	01010113          	addi	sp,sp,16
80001b18:	00008067          	ret

80001b1c <vListInitialise>:
vListInitialise():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:80
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
80001b1c:	fe010113          	addi	sp,sp,-32
80001b20:	00812e23          	sw	s0,28(sp)
80001b24:	02010413          	addi	s0,sp,32
80001b28:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:84
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001b2c:	fec42783          	lw	a5,-20(s0)
80001b30:	00878713          	addi	a4,a5,8
80001b34:	fec42783          	lw	a5,-20(s0)
80001b38:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:88

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
80001b3c:	fec42783          	lw	a5,-20(s0)
80001b40:	fff00713          	li	a4,-1
80001b44:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:92

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001b48:	fec42783          	lw	a5,-20(s0)
80001b4c:	00878713          	addi	a4,a5,8
80001b50:	fec42783          	lw	a5,-20(s0)
80001b54:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:93
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001b58:	fec42783          	lw	a5,-20(s0)
80001b5c:	00878713          	addi	a4,a5,8
80001b60:	fec42783          	lw	a5,-20(s0)
80001b64:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:95

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
80001b68:	fec42783          	lw	a5,-20(s0)
80001b6c:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:101

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
80001b70:	00000013          	nop
80001b74:	01c12403          	lw	s0,28(sp)
80001b78:	02010113          	addi	sp,sp,32
80001b7c:	00008067          	ret

80001b80 <vListInitialiseItem>:
vListInitialiseItem():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:105
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
80001b80:	fe010113          	addi	sp,sp,-32
80001b84:	00812e23          	sw	s0,28(sp)
80001b88:	02010413          	addi	s0,sp,32
80001b8c:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:107
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80001b90:	fec42783          	lw	a5,-20(s0)
80001b94:	0007a823          	sw	zero,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:113

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
80001b98:	00000013          	nop
80001b9c:	01c12403          	lw	s0,28(sp)
80001ba0:	02010113          	addi	sp,sp,32
80001ba4:	00008067          	ret

80001ba8 <vListInsertEnd>:
vListInsertEnd():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:117
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001ba8:	fd010113          	addi	sp,sp,-48
80001bac:	02812623          	sw	s0,44(sp)
80001bb0:	03010413          	addi	s0,sp,48
80001bb4:	fca42e23          	sw	a0,-36(s0)
80001bb8:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:118
ListItem_t * const pxIndex = pxList->pxIndex;
80001bbc:	fdc42783          	lw	a5,-36(s0)
80001bc0:	0047a783          	lw	a5,4(a5)
80001bc4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:129
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
80001bc8:	fd842783          	lw	a5,-40(s0)
80001bcc:	fec42703          	lw	a4,-20(s0)
80001bd0:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:130
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
80001bd4:	fec42783          	lw	a5,-20(s0)
80001bd8:	0087a703          	lw	a4,8(a5)
80001bdc:	fd842783          	lw	a5,-40(s0)
80001be0:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:135

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
80001be4:	fec42783          	lw	a5,-20(s0)
80001be8:	0087a783          	lw	a5,8(a5)
80001bec:	fd842703          	lw	a4,-40(s0)
80001bf0:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:136
	pxIndex->pxPrevious = pxNewListItem;
80001bf4:	fec42783          	lw	a5,-20(s0)
80001bf8:	fd842703          	lw	a4,-40(s0)
80001bfc:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:139

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001c00:	fd842783          	lw	a5,-40(s0)
80001c04:	fdc42703          	lw	a4,-36(s0)
80001c08:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:141

	( pxList->uxNumberOfItems )++;
80001c0c:	fdc42783          	lw	a5,-36(s0)
80001c10:	0007a783          	lw	a5,0(a5)
80001c14:	00178713          	addi	a4,a5,1
80001c18:	fdc42783          	lw	a5,-36(s0)
80001c1c:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:142
}
80001c20:	00000013          	nop
80001c24:	02c12403          	lw	s0,44(sp)
80001c28:	03010113          	addi	sp,sp,48
80001c2c:	00008067          	ret

80001c30 <vListInsert>:
vListInsert():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:146
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001c30:	fd010113          	addi	sp,sp,-48
80001c34:	02812623          	sw	s0,44(sp)
80001c38:	03010413          	addi	s0,sp,48
80001c3c:	fca42e23          	sw	a0,-36(s0)
80001c40:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:148
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
80001c44:	fd842783          	lw	a5,-40(s0)
80001c48:	0007a783          	lw	a5,0(a5)
80001c4c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:164
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
80001c50:	fe842703          	lw	a4,-24(s0)
80001c54:	fff00793          	li	a5,-1
80001c58:	00f71a63          	bne	a4,a5,80001c6c <vListInsert+0x3c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:166
	{
		pxIterator = pxList->xListEnd.pxPrevious;
80001c5c:	fdc42783          	lw	a5,-36(s0)
80001c60:	0107a783          	lw	a5,16(a5)
80001c64:	fef42623          	sw	a5,-20(s0)
80001c68:	0340006f          	j	80001c9c <vListInsert+0x6c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:192
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001c6c:	fdc42783          	lw	a5,-36(s0)
80001c70:	00878793          	addi	a5,a5,8
80001c74:	fef42623          	sw	a5,-20(s0)
80001c78:	0100006f          	j	80001c88 <vListInsert+0x58>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 3)
80001c7c:	fec42783          	lw	a5,-20(s0)
80001c80:	0047a783          	lw	a5,4(a5)
80001c84:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 1)
80001c88:	fec42783          	lw	a5,-20(s0)
80001c8c:	0047a783          	lw	a5,4(a5)
80001c90:	0007a783          	lw	a5,0(a5)
80001c94:	fe842703          	lw	a4,-24(s0)
80001c98:	fef772e3          	bleu	a5,a4,80001c7c <vListInsert+0x4c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:199
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
80001c9c:	fec42783          	lw	a5,-20(s0)
80001ca0:	0047a703          	lw	a4,4(a5)
80001ca4:	fd842783          	lw	a5,-40(s0)
80001ca8:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:200
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
80001cac:	fd842783          	lw	a5,-40(s0)
80001cb0:	0047a783          	lw	a5,4(a5)
80001cb4:	fd842703          	lw	a4,-40(s0)
80001cb8:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:201
	pxNewListItem->pxPrevious = pxIterator;
80001cbc:	fd842783          	lw	a5,-40(s0)
80001cc0:	fec42703          	lw	a4,-20(s0)
80001cc4:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:202
	pxIterator->pxNext = pxNewListItem;
80001cc8:	fec42783          	lw	a5,-20(s0)
80001ccc:	fd842703          	lw	a4,-40(s0)
80001cd0:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:206

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001cd4:	fd842783          	lw	a5,-40(s0)
80001cd8:	fdc42703          	lw	a4,-36(s0)
80001cdc:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:208

	( pxList->uxNumberOfItems )++;
80001ce0:	fdc42783          	lw	a5,-36(s0)
80001ce4:	0007a783          	lw	a5,0(a5)
80001ce8:	00178713          	addi	a4,a5,1
80001cec:	fdc42783          	lw	a5,-36(s0)
80001cf0:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:209
}
80001cf4:	00000013          	nop
80001cf8:	02c12403          	lw	s0,44(sp)
80001cfc:	03010113          	addi	sp,sp,48
80001d00:	00008067          	ret

80001d04 <uxListRemove>:
uxListRemove():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:213
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
80001d04:	fd010113          	addi	sp,sp,-48
80001d08:	02812623          	sw	s0,44(sp)
80001d0c:	03010413          	addi	s0,sp,48
80001d10:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:216
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
80001d14:	fdc42783          	lw	a5,-36(s0)
80001d18:	0107a783          	lw	a5,16(a5)
80001d1c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:218

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
80001d20:	fdc42783          	lw	a5,-36(s0)
80001d24:	0047a783          	lw	a5,4(a5)
80001d28:	fdc42703          	lw	a4,-36(s0)
80001d2c:	00872703          	lw	a4,8(a4) # 44000008 <RAM_SIZE+0x43f80008>
80001d30:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:219
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
80001d34:	fdc42783          	lw	a5,-36(s0)
80001d38:	0087a783          	lw	a5,8(a5)
80001d3c:	fdc42703          	lw	a4,-36(s0)
80001d40:	00472703          	lw	a4,4(a4)
80001d44:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:225

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
80001d48:	fec42783          	lw	a5,-20(s0)
80001d4c:	0047a783          	lw	a5,4(a5)
80001d50:	fdc42703          	lw	a4,-36(s0)
80001d54:	00f71a63          	bne	a4,a5,80001d68 <uxListRemove+0x64>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:227
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
80001d58:	fdc42783          	lw	a5,-36(s0)
80001d5c:	0087a703          	lw	a4,8(a5)
80001d60:	fec42783          	lw	a5,-20(s0)
80001d64:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:234
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
80001d68:	fdc42783          	lw	a5,-36(s0)
80001d6c:	0007a823          	sw	zero,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:235
	( pxList->uxNumberOfItems )--;
80001d70:	fec42783          	lw	a5,-20(s0)
80001d74:	0007a783          	lw	a5,0(a5)
80001d78:	fff78713          	addi	a4,a5,-1
80001d7c:	fec42783          	lw	a5,-20(s0)
80001d80:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:237

	return pxList->uxNumberOfItems;
80001d84:	fec42783          	lw	a5,-20(s0)
80001d88:	0007a783          	lw	a5,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/list.c:238
}
80001d8c:	00078513          	mv	a0,a5
80001d90:	02c12403          	lw	s0,44(sp)
80001d94:	03010113          	addi	sp,sp,48
80001d98:	00008067          	ret

80001d9c <memset>:
memset():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:25

  return dest;
}

void* memset(void* dest, int byte, size_t len)
{
80001d9c:	fd010113          	addi	sp,sp,-48
80001da0:	02812623          	sw	s0,44(sp)
80001da4:	03010413          	addi	s0,sp,48
80001da8:	fca42e23          	sw	a0,-36(s0)
80001dac:	fcb42c23          	sw	a1,-40(s0)
80001db0:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:26
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
80001db4:	fdc42703          	lw	a4,-36(s0)
80001db8:	fd442783          	lw	a5,-44(s0)
80001dbc:	00f767b3          	or	a5,a4,a5
80001dc0:	0037f793          	andi	a5,a5,3
80001dc4:	06079863          	bnez	a5,80001e34 <memset+0x98>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:27
    uintptr_t word = byte & 0xFF;
80001dc8:	fd842783          	lw	a5,-40(s0)
80001dcc:	0ff7f793          	andi	a5,a5,255
80001dd0:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:28
    word |= word << 8;
80001dd4:	fe442783          	lw	a5,-28(s0)
80001dd8:	00879793          	slli	a5,a5,0x8
80001ddc:	fe442703          	lw	a4,-28(s0)
80001de0:	00f767b3          	or	a5,a4,a5
80001de4:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:29
    word |= word << 16;
80001de8:	fe442783          	lw	a5,-28(s0)
80001dec:	01079793          	slli	a5,a5,0x10
80001df0:	fe442703          	lw	a4,-28(s0)
80001df4:	00f767b3          	or	a5,a4,a5
80001df8:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:32
    word |= word << 16 << 16;

    uintptr_t *d = dest;
80001dfc:	fdc42783          	lw	a5,-36(s0)
80001e00:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001e04:	0180006f          	j	80001e1c <memset+0x80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:34
      *d++ = word;
80001e08:	fec42783          	lw	a5,-20(s0)
80001e0c:	00478713          	addi	a4,a5,4
80001e10:	fee42623          	sw	a4,-20(s0)
80001e14:	fe442703          	lw	a4,-28(s0)
80001e18:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001e1c:	fdc42703          	lw	a4,-36(s0)
80001e20:	fd442783          	lw	a5,-44(s0)
80001e24:	00f707b3          	add	a5,a4,a5
80001e28:	fec42703          	lw	a4,-20(s0)
80001e2c:	fcf76ee3          	bltu	a4,a5,80001e08 <memset+0x6c>
80001e30:	0400006f          	j	80001e70 <memset+0xd4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:36
  } else {
    char *d = dest;
80001e34:	fdc42783          	lw	a5,-36(s0)
80001e38:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001e3c:	0200006f          	j	80001e5c <memset+0xc0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:38
      *d++ = byte;
80001e40:	fe842783          	lw	a5,-24(s0)
80001e44:	00178713          	addi	a4,a5,1
80001e48:	fee42423          	sw	a4,-24(s0)
80001e4c:	fd842703          	lw	a4,-40(s0)
80001e50:	01871713          	slli	a4,a4,0x18
80001e54:	41875713          	srai	a4,a4,0x18
80001e58:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001e5c:	fdc42703          	lw	a4,-36(s0)
80001e60:	fd442783          	lw	a5,-44(s0)
80001e64:	00f707b3          	add	a5,a4,a5
80001e68:	fe842703          	lw	a4,-24(s0)
80001e6c:	fcf76ae3          	bltu	a4,a5,80001e40 <memset+0xa4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:40
  }
  return dest;
80001e70:	fdc42783          	lw	a5,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:41
}
80001e74:	00078513          	mv	a0,a5
80001e78:	02c12403          	lw	s0,44(sp)
80001e7c:	03010113          	addi	sp,sp,48
80001e80:	00008067          	ret

80001e84 <strlen>:
strlen():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:44

size_t strlen(const char *s)
{
80001e84:	fd010113          	addi	sp,sp,-48
80001e88:	02812623          	sw	s0,44(sp)
80001e8c:	03010413          	addi	s0,sp,48
80001e90:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:45
  const char *p = s;
80001e94:	fdc42783          	lw	a5,-36(s0)
80001e98:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001e9c:	0100006f          	j	80001eac <strlen+0x28>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:47
    p++;
80001ea0:	fec42783          	lw	a5,-20(s0)
80001ea4:	00178793          	addi	a5,a5,1
80001ea8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001eac:	fec42783          	lw	a5,-20(s0)
80001eb0:	00078783          	lb	a5,0(a5)
80001eb4:	fe0796e3          	bnez	a5,80001ea0 <strlen+0x1c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:48
  return p - s;
80001eb8:	fec42703          	lw	a4,-20(s0)
80001ebc:	fdc42783          	lw	a5,-36(s0)
80001ec0:	40f707b3          	sub	a5,a4,a5
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/string.c:49
}
80001ec4:	00078513          	mv	a0,a5
80001ec8:	02c12403          	lw	s0,44(sp)
80001ecc:	03010113          	addi	sp,sp,48
80001ed0:	00008067          	ret

80001ed4 <xTaskGenericCreate>:
xTaskGenericCreate():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:551

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80001ed4:	fc010113          	addi	sp,sp,-64
80001ed8:	02112e23          	sw	ra,60(sp)
80001edc:	02812c23          	sw	s0,56(sp)
80001ee0:	04010413          	addi	s0,sp,64
80001ee4:	fca42e23          	sw	a0,-36(s0)
80001ee8:	fcb42c23          	sw	a1,-40(s0)
80001eec:	fcd42823          	sw	a3,-48(s0)
80001ef0:	fce42623          	sw	a4,-52(s0)
80001ef4:	fcf42423          	sw	a5,-56(s0)
80001ef8:	fd042223          	sw	a6,-60(s0)
80001efc:	fd142023          	sw	a7,-64(s0)
80001f00:	00060793          	mv	a5,a2
80001f04:	fcf41b23          	sh	a5,-42(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:556
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
80001f08:	fdc42783          	lw	a5,-36(s0)
80001f0c:	00079663          	bnez	a5,80001f18 <xTaskGenericCreate+0x44>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:556 (discriminator 1)
80001f10:	30047073          	csrci	mstatus,8
80001f14:	0000006f          	j	80001f14 <xTaskGenericCreate+0x40>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:557
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
80001f18:	fcc42703          	lw	a4,-52(s0)
80001f1c:	00400793          	li	a5,4
80001f20:	00e7f663          	bleu	a4,a5,80001f2c <xTaskGenericCreate+0x58>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 1)
80001f24:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 2)
80001f28:	0000006f          	j	80001f28 <xTaskGenericCreate+0x54>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:561

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
80001f2c:	fd645783          	lhu	a5,-42(s0)
80001f30:	fc442583          	lw	a1,-60(s0)
80001f34:	00078513          	mv	a0,a5
80001f38:	395000ef          	jal	ra,80002acc <prvAllocateTCBAndStack>
80001f3c:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:562
	if( pxNewTCB != NULL )
80001f40:	fe842783          	lw	a5,-24(s0)
80001f44:	16078263          	beqz	a5,800020a8 <xTaskGenericCreate+0x1d4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:598
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
80001f48:	fe842783          	lw	a5,-24(s0)
80001f4c:	0307a703          	lw	a4,48(a5)
80001f50:	fd645683          	lhu	a3,-42(s0)
80001f54:	400007b7          	lui	a5,0x40000
80001f58:	fff78793          	addi	a5,a5,-1 # 3fffffff <RAM_SIZE+0x3ff7ffff>
80001f5c:	00f687b3          	add	a5,a3,a5
80001f60:	00279793          	slli	a5,a5,0x2
80001f64:	00f707b3          	add	a5,a4,a5
80001f68:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:599
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
80001f6c:	fe442783          	lw	a5,-28(s0)
80001f70:	ffc7f793          	andi	a5,a5,-4
80001f74:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:602

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
80001f78:	fe442783          	lw	a5,-28(s0)
80001f7c:	0037f793          	andi	a5,a5,3
80001f80:	00078663          	beqz	a5,80001f8c <xTaskGenericCreate+0xb8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 1)
80001f84:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 3)
80001f88:	0000006f          	j	80001f88 <xTaskGenericCreate+0xb4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:619
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
80001f8c:	fd645783          	lhu	a5,-42(s0)
80001f90:	00078713          	mv	a4,a5
80001f94:	fc042683          	lw	a3,-64(s0)
80001f98:	fcc42603          	lw	a2,-52(s0)
80001f9c:	fd842583          	lw	a1,-40(s0)
80001fa0:	fe842503          	lw	a0,-24(s0)
80001fa4:	009000ef          	jal	ra,800027ac <prvInitialiseTCBVariables>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:631
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
80001fa8:	fd042603          	lw	a2,-48(s0)
80001fac:	fdc42583          	lw	a1,-36(s0)
80001fb0:	fe442503          	lw	a0,-28(s0)
80001fb4:	891ff0ef          	jal	ra,80001844 <pxPortInitialiseStack>
80001fb8:	00050713          	mv	a4,a0
80001fbc:	fe842783          	lw	a5,-24(s0)
80001fc0:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:635
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
80001fc4:	fc842783          	lw	a5,-56(s0)
80001fc8:	00078863          	beqz	a5,80001fd8 <xTaskGenericCreate+0x104>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:640
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
80001fcc:	fc842783          	lw	a5,-56(s0)
80001fd0:	fe842703          	lw	a4,-24(s0)
80001fd4:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:649
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
80001fd8:	e34ff0ef          	jal	ra,8000160c <vPortEnterCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:651
		{
			uxCurrentNumberOfTasks++;
80001fdc:	93c1a783          	lw	a5,-1732(gp) # 80007bac <uxCurrentNumberOfTasks>
80001fe0:	00178713          	addi	a4,a5,1
80001fe4:	92e1ae23          	sw	a4,-1732(gp) # 80007bac <uxCurrentNumberOfTasks>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:652
			if( pxCurrentTCB == NULL )
80001fe8:	92c1a783          	lw	a5,-1748(gp) # 80007b9c <pxCurrentTCB>
80001fec:	02079063          	bnez	a5,8000200c <xTaskGenericCreate+0x138>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:656
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
80001ff0:	fe842703          	lw	a4,-24(s0)
80001ff4:	92e1a623          	sw	a4,-1748(gp) # 80007b9c <pxCurrentTCB>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:658

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
80001ff8:	93c1a703          	lw	a4,-1732(gp) # 80007bac <uxCurrentNumberOfTasks>
80001ffc:	00100793          	li	a5,1
80002000:	02f71663          	bne	a4,a5,8000202c <xTaskGenericCreate+0x158>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:663
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
80002004:	0e1000ef          	jal	ra,800028e4 <prvInitialiseTaskLists>
80002008:	0240006f          	j	8000202c <xTaskGenericCreate+0x158>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:675
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
8000200c:	9481a783          	lw	a5,-1720(gp) # 80007bb8 <xSchedulerRunning>
80002010:	00079e63          	bnez	a5,8000202c <xTaskGenericCreate+0x158>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:677
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
80002014:	92c1a783          	lw	a5,-1748(gp) # 80007b9c <pxCurrentTCB>
80002018:	02c7a783          	lw	a5,44(a5)
8000201c:	fcc42703          	lw	a4,-52(s0)
80002020:	00f76663          	bltu	a4,a5,8000202c <xTaskGenericCreate+0x158>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:679
					{
						pxCurrentTCB = pxNewTCB;
80002024:	fe842703          	lw	a4,-24(s0)
80002028:	92e1a623          	sw	a4,-1748(gp) # 80007b9c <pxCurrentTCB>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:692
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
8000202c:	9581a783          	lw	a5,-1704(gp) # 80007bc8 <uxTaskNumber>
80002030:	00178713          	addi	a4,a5,1
80002034:	94e1ac23          	sw	a4,-1704(gp) # 80007bc8 <uxTaskNumber>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:697

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
80002038:	9581a703          	lw	a4,-1704(gp) # 80007bc8 <uxTaskNumber>
8000203c:	fe842783          	lw	a5,-24(s0)
80002040:	04e7a423          	sw	a4,72(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:702
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
80002044:	fe842783          	lw	a5,-24(s0)
80002048:	02c7a703          	lw	a4,44(a5)
8000204c:	9441a783          	lw	a5,-1724(gp) # 80007bb4 <uxTopReadyPriority>
80002050:	00e7f863          	bleu	a4,a5,80002060 <xTaskGenericCreate+0x18c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 1)
80002054:	fe842783          	lw	a5,-24(s0)
80002058:	02c7a703          	lw	a4,44(a5)
8000205c:	94e1a223          	sw	a4,-1724(gp) # 80007bb4 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 3)
80002060:	fe842783          	lw	a5,-24(s0)
80002064:	02c7a703          	lw	a4,44(a5)
80002068:	00070793          	mv	a5,a4
8000206c:	00279793          	slli	a5,a5,0x2
80002070:	00e787b3          	add	a5,a5,a4
80002074:	00279793          	slli	a5,a5,0x2
80002078:	80021737          	lui	a4,0x80021
8000207c:	be070713          	addi	a4,a4,-1056 # 80020be0 <__stack_top+0xfffde980>
80002080:	00e78733          	add	a4,a5,a4
80002084:	fe842783          	lw	a5,-24(s0)
80002088:	00478793          	addi	a5,a5,4
8000208c:	00078593          	mv	a1,a5
80002090:	00070513          	mv	a0,a4
80002094:	b15ff0ef          	jal	ra,80001ba8 <vListInsertEnd>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:704 (discriminator 3)

			xReturn = pdPASS;
80002098:	00100793          	li	a5,1
8000209c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:707 (discriminator 3)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
800020a0:	da0ff0ef          	jal	ra,80001640 <vPortExitCritical>
800020a4:	00c0006f          	j	800020b0 <xTaskGenericCreate+0x1dc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:711
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
800020a8:	fff00793          	li	a5,-1
800020ac:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:715
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
800020b0:	fec42703          	lw	a4,-20(s0)
800020b4:	00100793          	li	a5,1
800020b8:	02f71063          	bne	a4,a5,800020d8 <xTaskGenericCreate+0x204>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:717
	{
		if( xSchedulerRunning != pdFALSE )
800020bc:	9481a783          	lw	a5,-1720(gp) # 80007bb8 <xSchedulerRunning>
800020c0:	00078c63          	beqz	a5,800020d8 <xTaskGenericCreate+0x204>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:721
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
800020c4:	92c1a783          	lw	a5,-1748(gp) # 80007b9c <pxCurrentTCB>
800020c8:	02c7a783          	lw	a5,44(a5)
800020cc:	fcc42703          	lw	a4,-52(s0)
800020d0:	00e7f463          	bleu	a4,a5,800020d8 <xTaskGenericCreate+0x204>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:723
			{
				taskYIELD_IF_USING_PREEMPTION();
800020d4:	a21ff0ef          	jal	ra,80001af4 <vPortYield>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:736
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
800020d8:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:737
}
800020dc:	00078513          	mv	a0,a5
800020e0:	03c12083          	lw	ra,60(sp)
800020e4:	03812403          	lw	s0,56(sp)
800020e8:	04010113          	addi	sp,sp,64
800020ec:	00008067          	ret

800020f0 <vTaskDelete>:
vTaskDelete():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:743
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
800020f0:	fd010113          	addi	sp,sp,-48
800020f4:	02112623          	sw	ra,44(sp)
800020f8:	02812423          	sw	s0,40(sp)
800020fc:	03010413          	addi	s0,sp,48
80002100:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:746
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
80002104:	d08ff0ef          	jal	ra,8000160c <vPortEnterCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:750
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
80002108:	fdc42783          	lw	a5,-36(s0)
8000210c:	00079663          	bnez	a5,80002118 <vTaskDelete+0x28>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 1)
80002110:	92c1a783          	lw	a5,-1748(gp) # 80007b9c <pxCurrentTCB>
80002114:	0080006f          	j	8000211c <vTaskDelete+0x2c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 2)
80002118:	fdc42783          	lw	a5,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 4)
8000211c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:756 (discriminator 4)

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80002120:	fec42783          	lw	a5,-20(s0)
80002124:	00478793          	addi	a5,a5,4
80002128:	00078513          	mv	a0,a5
8000212c:	bd9ff0ef          	jal	ra,80001d04 <uxListRemove>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:766 (discriminator 4)
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
80002130:	fec42783          	lw	a5,-20(s0)
80002134:	0287a783          	lw	a5,40(a5)
80002138:	00078a63          	beqz	a5,8000214c <vTaskDelete+0x5c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:768
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
8000213c:	fec42783          	lw	a5,-20(s0)
80002140:	01878793          	addi	a5,a5,24
80002144:	00078513          	mv	a0,a5
80002148:	bbdff0ef          	jal	ra,80001d04 <uxListRemove>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:775
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
8000214c:	fec42783          	lw	a5,-20(s0)
80002150:	00478793          	addi	a5,a5,4
80002154:	00078593          	mv	a1,a5
80002158:	800217b7          	lui	a5,0x80021
8000215c:	c8078513          	addi	a0,a5,-896 # 80020c80 <__stack_top+0xfffdea20>
80002160:	a49ff0ef          	jal	ra,80001ba8 <vListInsertEnd>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:780

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
80002164:	9381a783          	lw	a5,-1736(gp) # 80007ba8 <uxTasksDeleted>
80002168:	00178713          	addi	a4,a5,1
8000216c:	92e1ac23          	sw	a4,-1736(gp) # 80007ba8 <uxTasksDeleted>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:784

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
80002170:	9581a783          	lw	a5,-1704(gp) # 80007bc8 <uxTaskNumber>
80002174:	00178713          	addi	a4,a5,1
80002178:	94e1ac23          	sw	a4,-1704(gp) # 80007bc8 <uxTaskNumber>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:788

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
8000217c:	cc4ff0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:792

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
80002180:	9481a783          	lw	a5,-1720(gp) # 80007bb8 <xSchedulerRunning>
80002184:	02078a63          	beqz	a5,800021b8 <vTaskDelete+0xc8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:794
		{
			if( pxTCB == pxCurrentTCB )
80002188:	92c1a783          	lw	a5,-1748(gp) # 80007b9c <pxCurrentTCB>
8000218c:	fec42703          	lw	a4,-20(s0)
80002190:	00f71e63          	bne	a4,a5,800021ac <vTaskDelete+0xbc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:796
			{
				configASSERT( uxSchedulerSuspended == 0 );
80002194:	9601a783          	lw	a5,-1696(gp) # 80007bd0 <uxSchedulerSuspended>
80002198:	00078663          	beqz	a5,800021a4 <vTaskDelete+0xb4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:796 (discriminator 1)
8000219c:	30047073          	csrci	mstatus,8
800021a0:	0000006f          	j	800021a0 <vTaskDelete+0xb0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:804
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
800021a4:	951ff0ef          	jal	ra,80001af4 <vPortYield>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:817
					prvResetNextTaskUnblockTime();
				}
				taskEXIT_CRITICAL();
			}
		}
	}
800021a8:	0100006f          	j	800021b8 <vTaskDelete+0xc8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:810
				taskENTER_CRITICAL();
800021ac:	c60ff0ef          	jal	ra,8000160c <vPortEnterCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:812
					prvResetNextTaskUnblockTime();
800021b0:	21d000ef          	jal	ra,80002bcc <prvResetNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:814
				taskEXIT_CRITICAL();
800021b4:	c8cff0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:817
	}
800021b8:	00000013          	nop
800021bc:	02c12083          	lw	ra,44(sp)
800021c0:	02812403          	lw	s0,40(sp)
800021c4:	03010113          	addi	sp,sp,48
800021c8:	00008067          	ret

800021cc <vTaskDelay>:
vTaskDelay():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:921
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
800021cc:	fd010113          	addi	sp,sp,-48
800021d0:	02112623          	sw	ra,44(sp)
800021d4:	02812423          	sw	s0,40(sp)
800021d8:	03010413          	addi	s0,sp,48
800021dc:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:923
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
800021e0:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:927


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
800021e4:	fdc42783          	lw	a5,-36(s0)
800021e8:	04078463          	beqz	a5,80002230 <vTaskDelay+0x64>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:929
		{
			configASSERT( uxSchedulerSuspended == 0 );
800021ec:	9601a783          	lw	a5,-1696(gp) # 80007bd0 <uxSchedulerSuspended>
800021f0:	00078663          	beqz	a5,800021fc <vTaskDelay+0x30>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:929 (discriminator 1)
800021f4:	30047073          	csrci	mstatus,8
800021f8:	0000006f          	j	800021f8 <vTaskDelay+0x2c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:930
			vTaskSuspendAll();
800021fc:	0e4000ef          	jal	ra,800022e0 <vTaskSuspendAll>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:944
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
80002200:	9401a783          	lw	a5,-1728(gp) # 80007bb0 <xTickCount>
80002204:	fdc42703          	lw	a4,-36(s0)
80002208:	00f707b3          	add	a5,a4,a5
8000220c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:949

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80002210:	92c1a783          	lw	a5,-1748(gp) # 80007b9c <pxCurrentTCB>
80002214:	00478793          	addi	a5,a5,4
80002218:	00078513          	mv	a0,a5
8000221c:	ae9ff0ef          	jal	ra,80001d04 <uxListRemove>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:960
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
80002220:	fe842503          	lw	a0,-24(s0)
80002224:	021000ef          	jal	ra,80002a44 <prvAddCurrentTaskToDelayedList>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:962
			}
			xAlreadyYielded = xTaskResumeAll();
80002228:	0e0000ef          	jal	ra,80002308 <xTaskResumeAll>
8000222c:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:971
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
80002230:	fec42783          	lw	a5,-20(s0)
80002234:	00079463          	bnez	a5,8000223c <vTaskDelay+0x70>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:973
		{
			portYIELD_WITHIN_API();
80002238:	8bdff0ef          	jal	ra,80001af4 <vPortYield>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:979
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
8000223c:	00000013          	nop
80002240:	02c12083          	lw	ra,44(sp)
80002244:	02812403          	lw	s0,40(sp)
80002248:	03010113          	addi	sp,sp,48
8000224c:	00008067          	ret

80002250 <vTaskStartScheduler>:
vTaskStartScheduler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1542

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
80002250:	fe010113          	addi	sp,sp,-32
80002254:	00112e23          	sw	ra,28(sp)
80002258:	00812c23          	sw	s0,24(sp)
8000225c:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1555
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
80002260:	00000893          	li	a7,0
80002264:	00000813          	li	a6,0
80002268:	00000793          	li	a5,0
8000226c:	00000713          	li	a4,0
80002270:	00000693          	li	a3,0
80002274:	40000613          	li	a2,1024
80002278:	800075b7          	lui	a1,0x80007
8000227c:	2f858593          	addi	a1,a1,760 # 800072f8 <__stack_top+0xfffc5098>
80002280:	80002537          	lui	a0,0x80002
80002284:	77850513          	addi	a0,a0,1912 # 80002778 <__stack_top+0xfffc0518>
80002288:	c4dff0ef          	jal	ra,80001ed4 <xTaskGenericCreate>
8000228c:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1572
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
80002290:	fec42703          	lw	a4,-20(s0)
80002294:	00100793          	li	a5,1
80002298:	02f71263          	bne	a4,a5,800022bc <vTaskStartScheduler+0x6c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1579
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
8000229c:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1589
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
800022a0:	fff00713          	li	a4,-1
800022a4:	94e1ae23          	sw	a4,-1700(gp) # 80007bcc <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1590
		xSchedulerRunning = pdTRUE;
800022a8:	00100713          	li	a4,1
800022ac:	94e1a423          	sw	a4,-1720(gp) # 80007bb8 <xSchedulerRunning>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1591
		xTickCount = ( TickType_t ) 0U;
800022b0:	9401a023          	sw	zero,-1728(gp) # 80007bb0 <xTickCount>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1600
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
800022b4:	f08ff0ef          	jal	ra,800019bc <xPortStartScheduler>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
800022b8:	0140006f          	j	800022cc <vTaskStartScheduler+0x7c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615
		configASSERT( xReturn );
800022bc:	fec42783          	lw	a5,-20(s0)
800022c0:	00079663          	bnez	a5,800022cc <vTaskStartScheduler+0x7c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 1)
800022c4:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 2)
800022c8:	0000006f          	j	800022c8 <vTaskStartScheduler+0x78>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
}
800022cc:	00000013          	nop
800022d0:	01c12083          	lw	ra,28(sp)
800022d4:	01812403          	lw	s0,24(sp)
800022d8:	02010113          	addi	sp,sp,32
800022dc:	00008067          	ret

800022e0 <vTaskSuspendAll>:
vTaskSuspendAll():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1632
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
800022e0:	ff010113          	addi	sp,sp,-16
800022e4:	00812623          	sw	s0,12(sp)
800022e8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1637
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
800022ec:	9601a783          	lw	a5,-1696(gp) # 80007bd0 <uxSchedulerSuspended>
800022f0:	00178713          	addi	a4,a5,1
800022f4:	96e1a023          	sw	a4,-1696(gp) # 80007bd0 <uxSchedulerSuspended>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1638
}
800022f8:	00000013          	nop
800022fc:	00c12403          	lw	s0,12(sp)
80002300:	01010113          	addi	sp,sp,16
80002304:	00008067          	ret

80002308 <xTaskResumeAll>:
xTaskResumeAll():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1670

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
80002308:	fe010113          	addi	sp,sp,-32
8000230c:	00112e23          	sw	ra,28(sp)
80002310:	00812c23          	sw	s0,24(sp)
80002314:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1672
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
80002318:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
8000231c:	9601a783          	lw	a5,-1696(gp) # 80007bd0 <uxSchedulerSuspended>
80002320:	00079663          	bnez	a5,8000232c <xTaskResumeAll+0x24>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676 (discriminator 1)
80002324:	30047073          	csrci	mstatus,8
80002328:	0000006f          	j	80002328 <xTaskResumeAll+0x20>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1683
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
8000232c:	ae0ff0ef          	jal	ra,8000160c <vPortEnterCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1685
	{
		--uxSchedulerSuspended;
80002330:	9601a783          	lw	a5,-1696(gp) # 80007bd0 <uxSchedulerSuspended>
80002334:	fff78713          	addi	a4,a5,-1
80002338:	96e1a023          	sw	a4,-1696(gp) # 80007bd0 <uxSchedulerSuspended>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1687

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
8000233c:	9601a783          	lw	a5,-1696(gp) # 80007bd0 <uxSchedulerSuspended>
80002340:	10079663          	bnez	a5,8000244c <xTaskResumeAll+0x144>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1689
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
80002344:	93c1a783          	lw	a5,-1732(gp) # 80007bac <uxCurrentNumberOfTasks>
80002348:	10078263          	beqz	a5,8000244c <xTaskResumeAll+0x144>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
8000234c:	0a80006f          	j	800023f4 <xTaskResumeAll+0xec>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1695
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
80002350:	800217b7          	lui	a5,0x80021
80002354:	c6c78793          	addi	a5,a5,-916 # 80020c6c <__stack_top+0xfffdea0c>
80002358:	00c7a783          	lw	a5,12(a5)
8000235c:	00c7a783          	lw	a5,12(a5)
80002360:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1696
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002364:	fe842783          	lw	a5,-24(s0)
80002368:	01878793          	addi	a5,a5,24
8000236c:	00078513          	mv	a0,a5
80002370:	995ff0ef          	jal	ra,80001d04 <uxListRemove>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1697
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80002374:	fe842783          	lw	a5,-24(s0)
80002378:	00478793          	addi	a5,a5,4
8000237c:	00078513          	mv	a0,a5
80002380:	985ff0ef          	jal	ra,80001d04 <uxListRemove>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698
					prvAddTaskToReadyList( pxTCB );
80002384:	fe842783          	lw	a5,-24(s0)
80002388:	02c7a703          	lw	a4,44(a5)
8000238c:	9441a783          	lw	a5,-1724(gp) # 80007bb4 <uxTopReadyPriority>
80002390:	00e7f863          	bleu	a4,a5,800023a0 <xTaskResumeAll+0x98>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 1)
80002394:	fe842783          	lw	a5,-24(s0)
80002398:	02c7a703          	lw	a4,44(a5)
8000239c:	94e1a223          	sw	a4,-1724(gp) # 80007bb4 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 3)
800023a0:	fe842783          	lw	a5,-24(s0)
800023a4:	02c7a703          	lw	a4,44(a5)
800023a8:	00070793          	mv	a5,a4
800023ac:	00279793          	slli	a5,a5,0x2
800023b0:	00e787b3          	add	a5,a5,a4
800023b4:	00279793          	slli	a5,a5,0x2
800023b8:	80021737          	lui	a4,0x80021
800023bc:	be070713          	addi	a4,a4,-1056 # 80020be0 <__stack_top+0xfffde980>
800023c0:	00e78733          	add	a4,a5,a4
800023c4:	fe842783          	lw	a5,-24(s0)
800023c8:	00478793          	addi	a5,a5,4
800023cc:	00078593          	mv	a1,a5
800023d0:	00070513          	mv	a0,a4
800023d4:	fd4ff0ef          	jal	ra,80001ba8 <vListInsertEnd>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1702 (discriminator 3)

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
800023d8:	fe842783          	lw	a5,-24(s0)
800023dc:	02c7a703          	lw	a4,44(a5)
800023e0:	92c1a783          	lw	a5,-1748(gp) # 80007b9c <pxCurrentTCB>
800023e4:	02c7a783          	lw	a5,44(a5)
800023e8:	00f76663          	bltu	a4,a5,800023f4 <xTaskResumeAll+0xec>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1704
					{
						xYieldPending = pdTRUE;
800023ec:	00100713          	li	a4,1
800023f0:	94e1a823          	sw	a4,-1712(gp) # 80007bc0 <xYieldPending>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
800023f4:	800217b7          	lui	a5,0x80021
800023f8:	c6c7a783          	lw	a5,-916(a5) # 80020c6c <__stack_top+0xfffdea0c>
800023fc:	f4079ae3          	bnez	a5,80002350 <xTaskResumeAll+0x48>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1716

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
80002400:	94c1a783          	lw	a5,-1716(gp) # 80007bbc <uxPendedTicks>
80002404:	02078863          	beqz	a5,80002434 <xTaskResumeAll+0x12c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
80002408:	0240006f          	j	8000242c <xTaskResumeAll+0x124>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1720
					{
						if( xTaskIncrementTick() != pdFALSE )
8000240c:	094000ef          	jal	ra,800024a0 <xTaskIncrementTick>
80002410:	00050793          	mv	a5,a0
80002414:	00078663          	beqz	a5,80002420 <xTaskResumeAll+0x118>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1722
						{
							xYieldPending = pdTRUE;
80002418:	00100713          	li	a4,1
8000241c:	94e1a823          	sw	a4,-1712(gp) # 80007bc0 <xYieldPending>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1728
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
80002420:	94c1a783          	lw	a5,-1716(gp) # 80007bbc <uxPendedTicks>
80002424:	fff78713          	addi	a4,a5,-1
80002428:	94e1a623          	sw	a4,-1716(gp) # 80007bbc <uxPendedTicks>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
					while( uxPendedTicks > ( UBaseType_t ) 0U )
8000242c:	94c1a783          	lw	a5,-1716(gp) # 80007bbc <uxPendedTicks>
80002430:	fc079ee3          	bnez	a5,8000240c <xTaskResumeAll+0x104>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1736
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
80002434:	9501a703          	lw	a4,-1712(gp) # 80007bc0 <xYieldPending>
80002438:	00100793          	li	a5,1
8000243c:	00f71863          	bne	a4,a5,8000244c <xTaskResumeAll+0x144>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1740
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
80002440:	00100793          	li	a5,1
80002444:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1743
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
80002448:	eacff0ef          	jal	ra,80001af4 <vPortYield>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1756
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
8000244c:	9f4ff0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1758

	return xAlreadyYielded;
80002450:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1759
}
80002454:	00078513          	mv	a0,a5
80002458:	01c12083          	lw	ra,28(sp)
8000245c:	01812403          	lw	s0,24(sp)
80002460:	02010113          	addi	sp,sp,32
80002464:	00008067          	ret

80002468 <xTaskGetTickCount>:
xTaskGetTickCount():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1763
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
80002468:	fe010113          	addi	sp,sp,-32
8000246c:	00112e23          	sw	ra,28(sp)
80002470:	00812c23          	sw	s0,24(sp)
80002474:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1767
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
80002478:	994ff0ef          	jal	ra,8000160c <vPortEnterCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1769
	{
		xTicks = xTickCount;
8000247c:	9401a783          	lw	a5,-1728(gp) # 80007bb0 <xTickCount>
80002480:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1771
	}
	portTICK_TYPE_EXIT_CRITICAL();
80002484:	9bcff0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1773

	return xTicks;
80002488:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1774
}
8000248c:	00078513          	mv	a0,a5
80002490:	01c12083          	lw	ra,28(sp)
80002494:	01812403          	lw	s0,24(sp)
80002498:	02010113          	addi	sp,sp,32
8000249c:	00008067          	ret

800024a0 <xTaskIncrementTick>:
xTaskIncrementTick():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1938

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
800024a0:	fd010113          	addi	sp,sp,-48
800024a4:	02112623          	sw	ra,44(sp)
800024a8:	02812423          	sw	s0,40(sp)
800024ac:	03010413          	addi	s0,sp,48
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1941
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
800024b0:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1947

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
800024b4:	9601a783          	lw	a5,-1696(gp) # 80007bd0 <uxSchedulerSuspended>
800024b8:	1a079063          	bnez	a5,80002658 <xTaskIncrementTick+0x1b8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1951
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
800024bc:	9401a783          	lw	a5,-1728(gp) # 80007bb0 <xTickCount>
800024c0:	00178713          	addi	a4,a5,1
800024c4:	94e1a023          	sw	a4,-1728(gp) # 80007bb0 <xTickCount>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1956

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
800024c8:	9401a783          	lw	a5,-1728(gp) # 80007bb0 <xTickCount>
800024cc:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1958

			if( xConstTickCount == ( TickType_t ) 0U )
800024d0:	fe842783          	lw	a5,-24(s0)
800024d4:	04079063          	bnez	a5,80002514 <xTaskIncrementTick+0x74>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960
			{
				taskSWITCH_DELAYED_LISTS();
800024d8:	9301a783          	lw	a5,-1744(gp) # 80007ba0 <pxDelayedTaskList>
800024dc:	0007a783          	lw	a5,0(a5)
800024e0:	00078663          	beqz	a5,800024ec <xTaskIncrementTick+0x4c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 1)
800024e4:	30047073          	csrci	mstatus,8
800024e8:	0000006f          	j	800024e8 <xTaskIncrementTick+0x48>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 2)
800024ec:	9301a783          	lw	a5,-1744(gp) # 80007ba0 <pxDelayedTaskList>
800024f0:	fef42223          	sw	a5,-28(s0)
800024f4:	9341a703          	lw	a4,-1740(gp) # 80007ba4 <pxOverflowDelayedTaskList>
800024f8:	92e1a823          	sw	a4,-1744(gp) # 80007ba0 <pxDelayedTaskList>
800024fc:	fe442703          	lw	a4,-28(s0)
80002500:	92e1aa23          	sw	a4,-1740(gp) # 80007ba4 <pxOverflowDelayedTaskList>
80002504:	9541a783          	lw	a5,-1708(gp) # 80007bc4 <xNumOfOverflows>
80002508:	00178713          	addi	a4,a5,1
8000250c:	94e1aa23          	sw	a4,-1708(gp) # 80007bc4 <xNumOfOverflows>
80002510:	6bc000ef          	jal	ra,80002bcc <prvResetNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1971

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
80002514:	95c1a783          	lw	a5,-1700(gp) # 80007bcc <xNextTaskUnblockTime>
80002518:	fe842703          	lw	a4,-24(s0)
8000251c:	10f76063          	bltu	a4,a5,8000261c <xTaskIncrementTick+0x17c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80002520:	9301a783          	lw	a5,-1744(gp) # 80007ba0 <pxDelayedTaskList>
80002524:	0007a783          	lw	a5,0(a5)
80002528:	00079663          	bnez	a5,80002534 <xTaskIncrementTick+0x94>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 1)
8000252c:	00100793          	li	a5,1
80002530:	0080006f          	j	80002538 <xTaskIncrementTick+0x98>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 2)
80002534:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 4)
80002538:	00078863          	beqz	a5,80002548 <xTaskIncrementTick+0xa8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1982
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
8000253c:	fff00713          	li	a4,-1
80002540:	94e1ae23          	sw	a4,-1700(gp) # 80007bcc <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1983
						break;
80002544:	0d80006f          	j	8000261c <xTaskIncrementTick+0x17c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1991
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80002548:	9301a783          	lw	a5,-1744(gp) # 80007ba0 <pxDelayedTaskList>
8000254c:	00c7a783          	lw	a5,12(a5)
80002550:	00c7a783          	lw	a5,12(a5)
80002554:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1992
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
80002558:	fe042783          	lw	a5,-32(s0)
8000255c:	0047a783          	lw	a5,4(a5)
80002560:	fcf42e23          	sw	a5,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1994

						if( xConstTickCount < xItemValue )
80002564:	fe842703          	lw	a4,-24(s0)
80002568:	fdc42783          	lw	a5,-36(s0)
8000256c:	00f77863          	bleu	a5,a4,8000257c <xTaskIncrementTick+0xdc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2001
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
80002570:	fdc42703          	lw	a4,-36(s0)
80002574:	94e1ae23          	sw	a4,-1700(gp) # 80007bcc <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2002
							break;
80002578:	0a40006f          	j	8000261c <xTaskIncrementTick+0x17c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2010
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
8000257c:	fe042783          	lw	a5,-32(s0)
80002580:	00478793          	addi	a5,a5,4
80002584:	00078513          	mv	a0,a5
80002588:	f7cff0ef          	jal	ra,80001d04 <uxListRemove>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2014

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
8000258c:	fe042783          	lw	a5,-32(s0)
80002590:	0287a783          	lw	a5,40(a5)
80002594:	00078a63          	beqz	a5,800025a8 <xTaskIncrementTick+0x108>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2016
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002598:	fe042783          	lw	a5,-32(s0)
8000259c:	01878793          	addi	a5,a5,24
800025a0:	00078513          	mv	a0,a5
800025a4:	f60ff0ef          	jal	ra,80001d04 <uxListRemove>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
800025a8:	fe042783          	lw	a5,-32(s0)
800025ac:	02c7a703          	lw	a4,44(a5)
800025b0:	9441a783          	lw	a5,-1724(gp) # 80007bb4 <uxTopReadyPriority>
800025b4:	00e7f863          	bleu	a4,a5,800025c4 <xTaskIncrementTick+0x124>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 1)
800025b8:	fe042783          	lw	a5,-32(s0)
800025bc:	02c7a703          	lw	a4,44(a5)
800025c0:	94e1a223          	sw	a4,-1724(gp) # 80007bb4 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 3)
800025c4:	fe042783          	lw	a5,-32(s0)
800025c8:	02c7a703          	lw	a4,44(a5)
800025cc:	00070793          	mv	a5,a4
800025d0:	00279793          	slli	a5,a5,0x2
800025d4:	00e787b3          	add	a5,a5,a4
800025d8:	00279793          	slli	a5,a5,0x2
800025dc:	80021737          	lui	a4,0x80021
800025e0:	be070713          	addi	a4,a4,-1056 # 80020be0 <__stack_top+0xfffde980>
800025e4:	00e78733          	add	a4,a5,a4
800025e8:	fe042783          	lw	a5,-32(s0)
800025ec:	00478793          	addi	a5,a5,4
800025f0:	00078593          	mv	a1,a5
800025f4:	00070513          	mv	a0,a4
800025f8:	db0ff0ef          	jal	ra,80001ba8 <vListInsertEnd>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2035 (discriminator 3)
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
800025fc:	fe042783          	lw	a5,-32(s0)
80002600:	02c7a703          	lw	a4,44(a5)
80002604:	92c1a783          	lw	a5,-1748(gp) # 80007b9c <pxCurrentTCB>
80002608:	02c7a783          	lw	a5,44(a5)
8000260c:	f0f76ae3          	bltu	a4,a5,80002520 <xTaskIncrementTick+0x80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2037
							{
								xSwitchRequired = pdTRUE;
80002610:	00100793          	li	a5,1
80002614:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80002618:	f09ff06f          	j	80002520 <xTaskIncrementTick+0x80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2055
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
8000261c:	92c1a783          	lw	a5,-1748(gp) # 80007b9c <pxCurrentTCB>
80002620:	02c7a703          	lw	a4,44(a5)
80002624:	800216b7          	lui	a3,0x80021
80002628:	00070793          	mv	a5,a4
8000262c:	00279793          	slli	a5,a5,0x2
80002630:	00e787b3          	add	a5,a5,a4
80002634:	00279793          	slli	a5,a5,0x2
80002638:	be068713          	addi	a4,a3,-1056 # 80020be0 <__stack_top+0xfffde980>
8000263c:	00e787b3          	add	a5,a5,a4
80002640:	0007a703          	lw	a4,0(a5)
80002644:	00100793          	li	a5,1
80002648:	00e7fe63          	bleu	a4,a5,80002664 <xTaskIncrementTick+0x1c4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2057
			{
				xSwitchRequired = pdTRUE;
8000264c:	00100793          	li	a5,1
80002650:	fef42623          	sw	a5,-20(s0)
80002654:	0100006f          	j	80002664 <xTaskIncrementTick+0x1c4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2083
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
80002658:	94c1a783          	lw	a5,-1716(gp) # 80007bbc <uxPendedTicks>
8000265c:	00178713          	addi	a4,a5,1
80002660:	94e1a623          	sw	a4,-1716(gp) # 80007bbc <uxPendedTicks>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2096
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
80002664:	9501a783          	lw	a5,-1712(gp) # 80007bc0 <xYieldPending>
80002668:	00078663          	beqz	a5,80002674 <xTaskIncrementTick+0x1d4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2098
		{
			xSwitchRequired = pdTRUE;
8000266c:	00100793          	li	a5,1
80002670:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2107
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
80002674:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2108
}
80002678:	00078513          	mv	a0,a5
8000267c:	02c12083          	lw	ra,44(sp)
80002680:	02812403          	lw	s0,40(sp)
80002684:	03010113          	addi	sp,sp,48
80002688:	00008067          	ret

8000268c <vTaskSwitchContext>:
vTaskSwitchContext():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2202

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
8000268c:	fe010113          	addi	sp,sp,-32
80002690:	00812e23          	sw	s0,28(sp)
80002694:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2203
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
80002698:	9601a783          	lw	a5,-1696(gp) # 80007bd0 <uxSchedulerSuspended>
8000269c:	00078863          	beqz	a5,800026ac <vTaskSwitchContext+0x20>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2207
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
800026a0:	00100713          	li	a4,1
800026a4:	94e1a823          	sw	a4,-1712(gp) # 80007bc0 <xYieldPending>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
800026a8:	0c00006f          	j	80002768 <vTaskSwitchContext+0xdc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2211
		xYieldPending = pdFALSE;
800026ac:	9401a823          	sw	zero,-1712(gp) # 80007bc0 <xYieldPending>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246
		taskSELECT_HIGHEST_PRIORITY_TASK();
800026b0:	0200006f          	j	800026d0 <vTaskSwitchContext+0x44>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 4)
800026b4:	9441a783          	lw	a5,-1724(gp) # 80007bb4 <uxTopReadyPriority>
800026b8:	00079663          	bnez	a5,800026c4 <vTaskSwitchContext+0x38>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 1)
800026bc:	30047073          	csrci	mstatus,8
800026c0:	0000006f          	j	800026c0 <vTaskSwitchContext+0x34>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 2)
800026c4:	9441a783          	lw	a5,-1724(gp) # 80007bb4 <uxTopReadyPriority>
800026c8:	fff78713          	addi	a4,a5,-1
800026cc:	94e1a223          	sw	a4,-1724(gp) # 80007bb4 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 3)
800026d0:	9441a703          	lw	a4,-1724(gp) # 80007bb4 <uxTopReadyPriority>
800026d4:	800216b7          	lui	a3,0x80021
800026d8:	00070793          	mv	a5,a4
800026dc:	00279793          	slli	a5,a5,0x2
800026e0:	00e787b3          	add	a5,a5,a4
800026e4:	00279793          	slli	a5,a5,0x2
800026e8:	be068713          	addi	a4,a3,-1056 # 80020be0 <__stack_top+0xfffde980>
800026ec:	00e787b3          	add	a5,a5,a4
800026f0:	0007a783          	lw	a5,0(a5)
800026f4:	fc0780e3          	beqz	a5,800026b4 <vTaskSwitchContext+0x28>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 5)
800026f8:	9441a703          	lw	a4,-1724(gp) # 80007bb4 <uxTopReadyPriority>
800026fc:	00070793          	mv	a5,a4
80002700:	00279793          	slli	a5,a5,0x2
80002704:	00e787b3          	add	a5,a5,a4
80002708:	00279793          	slli	a5,a5,0x2
8000270c:	80021737          	lui	a4,0x80021
80002710:	be070713          	addi	a4,a4,-1056 # 80020be0 <__stack_top+0xfffde980>
80002714:	00e787b3          	add	a5,a5,a4
80002718:	fef42623          	sw	a5,-20(s0)
8000271c:	fec42783          	lw	a5,-20(s0)
80002720:	0047a783          	lw	a5,4(a5)
80002724:	0047a703          	lw	a4,4(a5)
80002728:	fec42783          	lw	a5,-20(s0)
8000272c:	00e7a223          	sw	a4,4(a5)
80002730:	fec42783          	lw	a5,-20(s0)
80002734:	0047a703          	lw	a4,4(a5)
80002738:	fec42783          	lw	a5,-20(s0)
8000273c:	00878793          	addi	a5,a5,8
80002740:	00f71c63          	bne	a4,a5,80002758 <vTaskSwitchContext+0xcc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 6)
80002744:	fec42783          	lw	a5,-20(s0)
80002748:	0047a783          	lw	a5,4(a5)
8000274c:	0047a703          	lw	a4,4(a5)
80002750:	fec42783          	lw	a5,-20(s0)
80002754:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 8)
80002758:	fec42783          	lw	a5,-20(s0)
8000275c:	0047a783          	lw	a5,4(a5)
80002760:	00c7a703          	lw	a4,12(a5)
80002764:	92e1a623          	sw	a4,-1748(gp) # 80007b9c <pxCurrentTCB>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
}
80002768:	00000013          	nop
8000276c:	01c12403          	lw	s0,28(sp)
80002770:	02010113          	addi	sp,sp,32
80002774:	00008067          	ret

80002778 <prvIdleTask>:
prvIdleTask():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2689
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
80002778:	fe010113          	addi	sp,sp,-32
8000277c:	00112e23          	sw	ra,28(sp)
80002780:	00812c23          	sw	s0,24(sp)
80002784:	02010413          	addi	s0,sp,32
80002788:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
8000278c:	218000ef          	jal	ra,800029a4 <prvCheckTasksWaitingTermination>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2719

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
80002790:	800217b7          	lui	a5,0x80021
80002794:	be07a703          	lw	a4,-1056(a5) # 80020be0 <__stack_top+0xfffde980>
80002798:	00100793          	li	a5,1
8000279c:	00e7f463          	bleu	a4,a5,800027a4 <prvIdleTask+0x2c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2721
			{
				taskYIELD();
800027a0:	b54ff0ef          	jal	ra,80001af4 <vPortYield>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2739
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
800027a4:	089040ef          	jal	ra,8000702c <vApplicationIdleHook>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
		prvCheckTasksWaitingTermination();
800027a8:	fe5ff06f          	j	8000278c <prvIdleTask+0x14>

800027ac <prvInitialiseTCBVariables>:
prvInitialiseTCBVariables():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2832

#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
800027ac:	fc010113          	addi	sp,sp,-64
800027b0:	02112e23          	sw	ra,60(sp)
800027b4:	02812c23          	sw	s0,56(sp)
800027b8:	04010413          	addi	s0,sp,64
800027bc:	fca42e23          	sw	a0,-36(s0)
800027c0:	fcb42c23          	sw	a1,-40(s0)
800027c4:	fcc42a23          	sw	a2,-44(s0)
800027c8:	fcd42823          	sw	a3,-48(s0)
800027cc:	00070793          	mv	a5,a4
800027d0:	fcf41723          	sh	a5,-50(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
800027d4:	fe042623          	sw	zero,-20(s0)
800027d8:	0440006f          	j	8000281c <prvInitialiseTCBVariables+0x70>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2838
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
800027dc:	fd842703          	lw	a4,-40(s0)
800027e0:	fec42783          	lw	a5,-20(s0)
800027e4:	00f707b3          	add	a5,a4,a5
800027e8:	00078703          	lb	a4,0(a5)
800027ec:	fdc42683          	lw	a3,-36(s0)
800027f0:	fec42783          	lw	a5,-20(s0)
800027f4:	00f687b3          	add	a5,a3,a5
800027f8:	02e78a23          	sb	a4,52(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2843

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
800027fc:	fd842703          	lw	a4,-40(s0)
80002800:	fec42783          	lw	a5,-20(s0)
80002804:	00f707b3          	add	a5,a4,a5
80002808:	00078783          	lb	a5,0(a5)
8000280c:	02078063          	beqz	a5,8000282c <prvInitialiseTCBVariables+0x80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 2)
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
80002810:	fec42783          	lw	a5,-20(s0)
80002814:	00178793          	addi	a5,a5,1
80002818:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 1)
8000281c:	fec42703          	lw	a4,-20(s0)
80002820:	00f00793          	li	a5,15
80002824:	fae7fce3          	bleu	a4,a5,800027dc <prvInitialiseTCBVariables+0x30>
80002828:	0080006f          	j	80002830 <prvInitialiseTCBVariables+0x84>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2845
		{
			break;
8000282c:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2855
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
80002830:	fdc42783          	lw	a5,-36(s0)
80002834:	040781a3          	sb	zero,67(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2859

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
80002838:	fd442703          	lw	a4,-44(s0)
8000283c:	00400793          	li	a5,4
80002840:	00e7f663          	bleu	a4,a5,8000284c <prvInitialiseTCBVariables+0xa0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2861
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
80002844:	00400793          	li	a5,4
80002848:	fcf42a23          	sw	a5,-44(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2868
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
8000284c:	fdc42783          	lw	a5,-36(s0)
80002850:	fd442703          	lw	a4,-44(s0)
80002854:	02e7a623          	sw	a4,44(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2871
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
80002858:	fdc42783          	lw	a5,-36(s0)
8000285c:	fd442703          	lw	a4,-44(s0)
80002860:	04e7a823          	sw	a4,80(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2872
		pxTCB->uxMutexesHeld = 0;
80002864:	fdc42783          	lw	a5,-36(s0)
80002868:	0407aa23          	sw	zero,84(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2876
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
8000286c:	fdc42783          	lw	a5,-36(s0)
80002870:	00478793          	addi	a5,a5,4
80002874:	00078513          	mv	a0,a5
80002878:	b08ff0ef          	jal	ra,80001b80 <vListInitialiseItem>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2877
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
8000287c:	fdc42783          	lw	a5,-36(s0)
80002880:	01878793          	addi	a5,a5,24
80002884:	00078513          	mv	a0,a5
80002888:	af8ff0ef          	jal	ra,80001b80 <vListInitialiseItem>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2881

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
8000288c:	fdc42783          	lw	a5,-36(s0)
80002890:	fdc42703          	lw	a4,-36(s0)
80002894:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2884

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80002898:	00500713          	li	a4,5
8000289c:	fd442783          	lw	a5,-44(s0)
800028a0:	40f70733          	sub	a4,a4,a5
800028a4:	fdc42783          	lw	a5,-36(s0)
800028a8:	00e7ac23          	sw	a4,24(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2885
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
800028ac:	fdc42783          	lw	a5,-36(s0)
800028b0:	fdc42703          	lw	a4,-36(s0)
800028b4:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2889

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
800028b8:	fdc42783          	lw	a5,-36(s0)
800028bc:	0407a223          	sw	zero,68(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2927
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
800028c0:	fdc42783          	lw	a5,-36(s0)
800028c4:	0407ac23          	sw	zero,88(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2928
		pxTCB->eNotifyState = eNotWaitingNotification;
800028c8:	fdc42783          	lw	a5,-36(s0)
800028cc:	0407ae23          	sw	zero,92(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2938
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
800028d0:	00000013          	nop
800028d4:	03c12083          	lw	ra,60(sp)
800028d8:	03812403          	lw	s0,56(sp)
800028dc:	04010113          	addi	sp,sp,64
800028e0:	00008067          	ret

800028e4 <prvInitialiseTaskLists>:
prvInitialiseTaskLists():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:2997

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
800028e4:	fe010113          	addi	sp,sp,-32
800028e8:	00112e23          	sw	ra,28(sp)
800028ec:	00812c23          	sw	s0,24(sp)
800028f0:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
800028f4:	fe042623          	sw	zero,-20(s0)
800028f8:	0380006f          	j	80002930 <prvInitialiseTaskLists+0x4c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3002 (discriminator 3)
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
800028fc:	fec42703          	lw	a4,-20(s0)
80002900:	00070793          	mv	a5,a4
80002904:	00279793          	slli	a5,a5,0x2
80002908:	00e787b3          	add	a5,a5,a4
8000290c:	00279793          	slli	a5,a5,0x2
80002910:	80021737          	lui	a4,0x80021
80002914:	be070713          	addi	a4,a4,-1056 # 80020be0 <__stack_top+0xfffde980>
80002918:	00e787b3          	add	a5,a5,a4
8000291c:	00078513          	mv	a0,a5
80002920:	9fcff0ef          	jal	ra,80001b1c <vListInitialise>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 3)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
80002924:	fec42783          	lw	a5,-20(s0)
80002928:	00178793          	addi	a5,a5,1
8000292c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 1)
80002930:	fec42703          	lw	a4,-20(s0)
80002934:	00400793          	li	a5,4
80002938:	fce7f2e3          	bleu	a4,a5,800028fc <prvInitialiseTaskLists+0x18>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3005
	}

	vListInitialise( &xDelayedTaskList1 );
8000293c:	800217b7          	lui	a5,0x80021
80002940:	c4478513          	addi	a0,a5,-956 # 80020c44 <__stack_top+0xfffde9e4>
80002944:	9d8ff0ef          	jal	ra,80001b1c <vListInitialise>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3006
	vListInitialise( &xDelayedTaskList2 );
80002948:	800217b7          	lui	a5,0x80021
8000294c:	c5878513          	addi	a0,a5,-936 # 80020c58 <__stack_top+0xfffde9f8>
80002950:	9ccff0ef          	jal	ra,80001b1c <vListInitialise>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3007
	vListInitialise( &xPendingReadyList );
80002954:	800217b7          	lui	a5,0x80021
80002958:	c6c78513          	addi	a0,a5,-916 # 80020c6c <__stack_top+0xfffdea0c>
8000295c:	9c0ff0ef          	jal	ra,80001b1c <vListInitialise>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3011

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
80002960:	800217b7          	lui	a5,0x80021
80002964:	c8078513          	addi	a0,a5,-896 # 80020c80 <__stack_top+0xfffdea20>
80002968:	9b4ff0ef          	jal	ra,80001b1c <vListInitialise>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3017
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
8000296c:	800217b7          	lui	a5,0x80021
80002970:	c9478513          	addi	a0,a5,-876 # 80020c94 <__stack_top+0xfffdea34>
80002974:	9a8ff0ef          	jal	ra,80001b1c <vListInitialise>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3023
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
80002978:	80021737          	lui	a4,0x80021
8000297c:	c4470713          	addi	a4,a4,-956 # 80020c44 <__stack_top+0xfffde9e4>
80002980:	92e1a823          	sw	a4,-1744(gp) # 80007ba0 <pxDelayedTaskList>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3024
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
80002984:	80021737          	lui	a4,0x80021
80002988:	c5870713          	addi	a4,a4,-936 # 80020c58 <__stack_top+0xfffde9f8>
8000298c:	92e1aa23          	sw	a4,-1740(gp) # 80007ba4 <pxOverflowDelayedTaskList>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3025
}
80002990:	00000013          	nop
80002994:	01c12083          	lw	ra,28(sp)
80002998:	01812403          	lw	s0,24(sp)
8000299c:	02010113          	addi	sp,sp,32
800029a0:	00008067          	ret

800029a4 <prvCheckTasksWaitingTermination>:
prvCheckTasksWaitingTermination():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3029
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
800029a4:	fe010113          	addi	sp,sp,-32
800029a8:	00112e23          	sw	ra,28(sp)
800029ac:	00812c23          	sw	s0,24(sp)
800029b0:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
800029b4:	0740006f          	j	80002a28 <prvCheckTasksWaitingTermination+0x84>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3038
		{
			vTaskSuspendAll();
800029b8:	929ff0ef          	jal	ra,800022e0 <vTaskSuspendAll>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3040
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
800029bc:	800217b7          	lui	a5,0x80021
800029c0:	c807a783          	lw	a5,-896(a5) # 80020c80 <__stack_top+0xfffdea20>
800029c4:	0017b793          	seqz	a5,a5
800029c8:	0ff7f793          	andi	a5,a5,255
800029cc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3042
			}
			( void ) xTaskResumeAll();
800029d0:	939ff0ef          	jal	ra,80002308 <xTaskResumeAll>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3044

			if( xListIsEmpty == pdFALSE )
800029d4:	fec42783          	lw	a5,-20(s0)
800029d8:	04079863          	bnez	a5,80002a28 <prvCheckTasksWaitingTermination+0x84>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3048
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
800029dc:	c31fe0ef          	jal	ra,8000160c <vPortEnterCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3050
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
800029e0:	800217b7          	lui	a5,0x80021
800029e4:	c8078793          	addi	a5,a5,-896 # 80020c80 <__stack_top+0xfffdea20>
800029e8:	00c7a783          	lw	a5,12(a5)
800029ec:	00c7a783          	lw	a5,12(a5)
800029f0:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3051
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
800029f4:	fe842783          	lw	a5,-24(s0)
800029f8:	00478793          	addi	a5,a5,4
800029fc:	00078513          	mv	a0,a5
80002a00:	b04ff0ef          	jal	ra,80001d04 <uxListRemove>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3052
					--uxCurrentNumberOfTasks;
80002a04:	93c1a783          	lw	a5,-1732(gp) # 80007bac <uxCurrentNumberOfTasks>
80002a08:	fff78713          	addi	a4,a5,-1
80002a0c:	92e1ae23          	sw	a4,-1732(gp) # 80007bac <uxCurrentNumberOfTasks>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3053
					--uxTasksDeleted;
80002a10:	9381a783          	lw	a5,-1736(gp) # 80007ba8 <uxTasksDeleted>
80002a14:	fff78713          	addi	a4,a5,-1
80002a18:	92e1ac23          	sw	a4,-1736(gp) # 80007ba8 <uxTasksDeleted>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3055
				}
				taskEXIT_CRITICAL();
80002a1c:	c25fe0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3057

				prvDeleteTCB( pxTCB );
80002a20:	fe842503          	lw	a0,-24(s0)
80002a24:	168000ef          	jal	ra,80002b8c <prvDeleteTCB>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
80002a28:	9381a783          	lw	a5,-1736(gp) # 80007ba8 <uxTasksDeleted>
80002a2c:	f80796e3          	bnez	a5,800029b8 <prvCheckTasksWaitingTermination+0x14>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3066
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
80002a30:	00000013          	nop
80002a34:	01c12083          	lw	ra,28(sp)
80002a38:	01812403          	lw	s0,24(sp)
80002a3c:	02010113          	addi	sp,sp,32
80002a40:	00008067          	ret

80002a44 <prvAddCurrentTaskToDelayedList>:
prvAddCurrentTaskToDelayedList():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3070
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
80002a44:	fe010113          	addi	sp,sp,-32
80002a48:	00112e23          	sw	ra,28(sp)
80002a4c:	00812c23          	sw	s0,24(sp)
80002a50:	02010413          	addi	s0,sp,32
80002a54:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3072
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
80002a58:	92c1a783          	lw	a5,-1748(gp) # 80007b9c <pxCurrentTCB>
80002a5c:	fec42703          	lw	a4,-20(s0)
80002a60:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3074

	if( xTimeToWake < xTickCount )
80002a64:	9401a783          	lw	a5,-1728(gp) # 80007bb0 <xTickCount>
80002a68:	fec42703          	lw	a4,-20(s0)
80002a6c:	02f77063          	bleu	a5,a4,80002a8c <prvAddCurrentTaskToDelayedList+0x48>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3077
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80002a70:	9341a703          	lw	a4,-1740(gp) # 80007ba4 <pxOverflowDelayedTaskList>
80002a74:	92c1a783          	lw	a5,-1748(gp) # 80007b9c <pxCurrentTCB>
80002a78:	00478793          	addi	a5,a5,4
80002a7c:	00078593          	mv	a1,a5
80002a80:	00070513          	mv	a0,a4
80002a84:	9acff0ef          	jal	ra,80001c30 <vListInsert>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
80002a88:	0300006f          	j	80002ab8 <prvAddCurrentTaskToDelayedList+0x74>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3082
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80002a8c:	9301a703          	lw	a4,-1744(gp) # 80007ba0 <pxDelayedTaskList>
80002a90:	92c1a783          	lw	a5,-1748(gp) # 80007b9c <pxCurrentTCB>
80002a94:	00478793          	addi	a5,a5,4
80002a98:	00078593          	mv	a1,a5
80002a9c:	00070513          	mv	a0,a4
80002aa0:	990ff0ef          	jal	ra,80001c30 <vListInsert>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3087
		if( xTimeToWake < xNextTaskUnblockTime )
80002aa4:	95c1a783          	lw	a5,-1700(gp) # 80007bcc <xNextTaskUnblockTime>
80002aa8:	fec42703          	lw	a4,-20(s0)
80002aac:	00f77663          	bleu	a5,a4,80002ab8 <prvAddCurrentTaskToDelayedList+0x74>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3089
			xNextTaskUnblockTime = xTimeToWake;
80002ab0:	fec42703          	lw	a4,-20(s0)
80002ab4:	94e1ae23          	sw	a4,-1700(gp) # 80007bcc <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
}
80002ab8:	00000013          	nop
80002abc:	01c12083          	lw	ra,28(sp)
80002ac0:	01812403          	lw	s0,24(sp)
80002ac4:	02010113          	addi	sp,sp,32
80002ac8:	00008067          	ret

80002acc <prvAllocateTCBAndStack>:
prvAllocateTCBAndStack():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3100
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
80002acc:	fd010113          	addi	sp,sp,-48
80002ad0:	02112623          	sw	ra,44(sp)
80002ad4:	02812423          	sw	s0,40(sp)
80002ad8:	03010413          	addi	s0,sp,48
80002adc:	00050793          	mv	a5,a0
80002ae0:	fcb42c23          	sw	a1,-40(s0)
80002ae4:	fcf41f23          	sh	a5,-34(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80002ae8:	fd842783          	lw	a5,-40(s0)
80002aec:	00079e63          	bnez	a5,80002b08 <prvAllocateTCBAndStack+0x3c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 1)
80002af0:	fde45783          	lhu	a5,-34(s0)
80002af4:	00279793          	slli	a5,a5,0x2
80002af8:	00078513          	mv	a0,a5
80002afc:	fa8fe0ef          	jal	ra,800012a4 <pvPortMalloc>
80002b00:	00050793          	mv	a5,a0
80002b04:	0080006f          	j	80002b0c <prvAllocateTCBAndStack+0x40>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 2)
80002b08:	fd842783          	lw	a5,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 4)
80002b0c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3134 (discriminator 4)

		if( pxStack != NULL )
80002b10:	fe842783          	lw	a5,-24(s0)
80002b14:	02078a63          	beqz	a5,80002b48 <prvAllocateTCBAndStack+0x7c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3138
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
80002b18:	06000513          	li	a0,96
80002b1c:	f88fe0ef          	jal	ra,800012a4 <pvPortMalloc>
80002b20:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3140

			if( pxNewTCB != NULL )
80002b24:	fec42783          	lw	a5,-20(s0)
80002b28:	00078a63          	beqz	a5,80002b3c <prvAllocateTCBAndStack+0x70>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3143
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
80002b2c:	fec42783          	lw	a5,-20(s0)
80002b30:	fe842703          	lw	a4,-24(s0)
80002b34:	02e7a823          	sw	a4,48(a5)
80002b38:	0140006f          	j	80002b4c <prvAllocateTCBAndStack+0x80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3149
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
80002b3c:	fe842503          	lw	a0,-24(s0)
80002b40:	941fe0ef          	jal	ra,80001480 <vPortFree>
80002b44:	0080006f          	j	80002b4c <prvAllocateTCBAndStack+0x80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3154
			}
		}
		else
		{
			pxNewTCB = NULL;
80002b48:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3159
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
80002b4c:	fec42783          	lw	a5,-20(s0)
80002b50:	02078263          	beqz	a5,80002b74 <prvAllocateTCBAndStack+0xa8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3165
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
80002b54:	fec42783          	lw	a5,-20(s0)
80002b58:	0307a703          	lw	a4,48(a5)
80002b5c:	fde45783          	lhu	a5,-34(s0)
80002b60:	00279793          	slli	a5,a5,0x2
80002b64:	00078613          	mv	a2,a5
80002b68:	0a500593          	li	a1,165
80002b6c:	00070513          	mv	a0,a4
80002b70:	a2cff0ef          	jal	ra,80001d9c <memset>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3170
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
80002b74:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3171
}
80002b78:	00078513          	mv	a0,a5
80002b7c:	02c12083          	lw	ra,44(sp)
80002b80:	02812403          	lw	s0,40(sp)
80002b84:	03010113          	addi	sp,sp,48
80002b88:	00008067          	ret

80002b8c <prvDeleteTCB>:
prvDeleteTCB():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3310
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
80002b8c:	fe010113          	addi	sp,sp,-32
80002b90:	00112e23          	sw	ra,28(sp)
80002b94:	00812c23          	sw	s0,24(sp)
80002b98:	02010413          	addi	s0,sp,32
80002b9c:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3335
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
80002ba0:	fec42783          	lw	a5,-20(s0)
80002ba4:	0307a783          	lw	a5,48(a5)
80002ba8:	00078513          	mv	a0,a5
80002bac:	8d5fe0ef          	jal	ra,80001480 <vPortFree>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3339
		}
		#endif

		vPortFree( pxTCB );
80002bb0:	fec42503          	lw	a0,-20(s0)
80002bb4:	8cdfe0ef          	jal	ra,80001480 <vPortFree>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3340
	}
80002bb8:	00000013          	nop
80002bbc:	01c12083          	lw	ra,28(sp)
80002bc0:	01812403          	lw	s0,24(sp)
80002bc4:	02010113          	addi	sp,sp,32
80002bc8:	00008067          	ret

80002bcc <prvResetNextTaskUnblockTime>:
prvResetNextTaskUnblockTime():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3346

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
80002bcc:	fe010113          	addi	sp,sp,-32
80002bd0:	00812e23          	sw	s0,28(sp)
80002bd4:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80002bd8:	9301a783          	lw	a5,-1744(gp) # 80007ba0 <pxDelayedTaskList>
80002bdc:	0007a783          	lw	a5,0(a5)
80002be0:	00079663          	bnez	a5,80002bec <prvResetNextTaskUnblockTime+0x20>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 1)
80002be4:	00100793          	li	a5,1
80002be8:	0080006f          	j	80002bf0 <prvResetNextTaskUnblockTime+0x24>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 2)
80002bec:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 4)
80002bf0:	00078863          	beqz	a5,80002c00 <prvResetNextTaskUnblockTime+0x34>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3355
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
80002bf4:	fff00713          	li	a4,-1
80002bf8:	94e1ae23          	sw	a4,-1700(gp) # 80007bcc <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
80002bfc:	0200006f          	j	80002c1c <prvResetNextTaskUnblockTime+0x50>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3363
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80002c00:	9301a783          	lw	a5,-1744(gp) # 80007ba0 <pxDelayedTaskList>
80002c04:	00c7a783          	lw	a5,12(a5)
80002c08:	00c7a783          	lw	a5,12(a5)
80002c0c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3364
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
80002c10:	fec42783          	lw	a5,-20(s0)
80002c14:	0047a703          	lw	a4,4(a5)
80002c18:	94e1ae23          	sw	a4,-1700(gp) # 80007bcc <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
}
80002c1c:	00000013          	nop
80002c20:	01c12403          	lw	s0,28(sp)
80002c24:	02010113          	addi	sp,sp,32
80002c28:	00008067          	ret

80002c2c <xTaskGetCurrentTaskHandle>:
xTaskGetCurrentTaskHandle():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3372
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
80002c2c:	fe010113          	addi	sp,sp,-32
80002c30:	00812e23          	sw	s0,28(sp)
80002c34:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3378
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
80002c38:	92c1a783          	lw	a5,-1748(gp) # 80007b9c <pxCurrentTCB>
80002c3c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3380

		return xReturn;
80002c40:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/tasks.c:3381
	}
80002c44:	00078513          	mv	a0,a5
80002c48:	01c12403          	lw	s0,28(sp)
80002c4c:	02010113          	addi	sp,sp,32
80002c50:	00008067          	ret

80002c54 <PLIC_EnableIRQ>:
PLIC_EnableIRQ():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:154
{
80002c54:	fd010113          	addi	sp,sp,-48
80002c58:	02812623          	sw	s0,44(sp)
80002c5c:	03010413          	addi	s0,sp,48
80002c60:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:155
    unsigned long hart_id = read_csr(mhartid);
80002c64:	f14027f3          	csrr	a5,mhartid
80002c68:	fef42623          	sw	a5,-20(s0)
80002c6c:	fec42783          	lw	a5,-20(s0)
80002c70:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:156
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80002c74:	40000737          	lui	a4,0x40000
80002c78:	fdc42783          	lw	a5,-36(s0)
80002c7c:	0057d793          	srli	a5,a5,0x5
80002c80:	fe842683          	lw	a3,-24(s0)
80002c84:	00569693          	slli	a3,a3,0x5
80002c88:	00f686b3          	add	a3,a3,a5
80002c8c:	000017b7          	lui	a5,0x1
80002c90:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80002c94:	00f687b3          	add	a5,a3,a5
80002c98:	00279793          	slli	a5,a5,0x2
80002c9c:	00f707b3          	add	a5,a4,a5
80002ca0:	0007a783          	lw	a5,0(a5)
80002ca4:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:157
    current |= (uint32_t)1 << (IRQn % 32);
80002ca8:	fdc42783          	lw	a5,-36(s0)
80002cac:	01f7f793          	andi	a5,a5,31
80002cb0:	00100713          	li	a4,1
80002cb4:	00f717b3          	sll	a5,a4,a5
80002cb8:	fe442703          	lw	a4,-28(s0)
80002cbc:	00f767b3          	or	a5,a4,a5
80002cc0:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:158
    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
80002cc4:	40000737          	lui	a4,0x40000
80002cc8:	fdc42783          	lw	a5,-36(s0)
80002ccc:	0057d793          	srli	a5,a5,0x5
80002cd0:	fe842683          	lw	a3,-24(s0)
80002cd4:	00569693          	slli	a3,a3,0x5
80002cd8:	00f686b3          	add	a3,a3,a5
80002cdc:	000017b7          	lui	a5,0x1
80002ce0:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80002ce4:	00f687b3          	add	a5,a3,a5
80002ce8:	00279793          	slli	a5,a5,0x2
80002cec:	00f707b3          	add	a5,a4,a5
80002cf0:	fe442703          	lw	a4,-28(s0)
80002cf4:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:159
}
80002cf8:	00000013          	nop
80002cfc:	02c12403          	lw	s0,44(sp)
80002d00:	03010113          	addi	sp,sp,48
80002d04:	00008067          	ret

80002d08 <PLIC_SetPriority>:
PLIC_SetPriority():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:188
{
80002d08:	fe010113          	addi	sp,sp,-32
80002d0c:	00812e23          	sw	s0,28(sp)
80002d10:	02010413          	addi	s0,sp,32
80002d14:	fea42623          	sw	a0,-20(s0)
80002d18:	feb42423          	sw	a1,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:189
    PLIC->SOURCE_PRIORITY[IRQn] = priority;
80002d1c:	40000737          	lui	a4,0x40000
80002d20:	fec42783          	lw	a5,-20(s0)
80002d24:	00279793          	slli	a5,a5,0x2
80002d28:	00f707b3          	add	a5,a4,a5
80002d2c:	fe842703          	lw	a4,-24(s0)
80002d30:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:190
}
80002d34:	00000013          	nop
80002d38:	01c12403          	lw	s0,28(sp)
80002d3c:	02010113          	addi	sp,sp,32
80002d40:	00008067          	ret

80002d44 <Chronos_init>:
Chronos_init():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:29

//volatile unsigned int NI_IRCount;

////////////////////////////////////////////////////////////
// Initialize Chronos stuff
void Chronos_init(){
80002d44:	ff010113          	addi	sp,sp,-16
80002d48:	00112623          	sw	ra,12(sp)
80002d4c:	00812423          	sw	s0,8(sp)
80002d50:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:31
    // Resets the amount of each executed instruction
    resetExecutedInstructions();
80002d54:	7fd030ef          	jal	ra,80006d50 <resetExecutedInstructions>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:34

    //Informs the Router this tile ID, that is provided by Harness
    HW_set_32bit_reg(ROUTER_BASE, HW_get_32bit_reg(MY_ID)); 
80002d58:	900007b7          	lui	a5,0x90000
80002d5c:	ffc78513          	addi	a0,a5,-4 # 8ffffffc <__stack_top+0xffbdd9c>
80002d60:	9f8fe0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
80002d64:	00050793          	mv	a5,a0
80002d68:	00078593          	mv	a1,a5
80002d6c:	50000537          	lui	a0,0x50000
80002d70:	9e0fe0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:37
    
    // Reads this processor address, calculated by the router
    ProcessorAddr = HW_get_32bit_reg(ROUTER_BASE);
80002d74:	50000537          	lui	a0,0x50000
80002d78:	9e0fe0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
80002d7c:	00050713          	mv	a4,a0
80002d80:	800227b7          	lui	a5,0x80022
80002d84:	24e7ac23          	sw	a4,600(a5) # 80022258 <__stack_top+0xfffdfff8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:40

    // Informs the PRINTER this tile address
    HW_set_32bit_reg(PRINTER_CHAR, getXpos(ProcessorAddr));
80002d88:	800227b7          	lui	a5,0x80022
80002d8c:	2587a783          	lw	a5,600(a5) # 80022258 <__stack_top+0xfffdfff8>
80002d90:	00078513          	mv	a0,a5
80002d94:	1f4000ef          	jal	ra,80002f88 <getXpos>
80002d98:	00050793          	mv	a5,a0
80002d9c:	00078593          	mv	a1,a5
80002da0:	500007b7          	lui	a5,0x50000
80002da4:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002da8:	9a8fe0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:41
    HW_set_32bit_reg(PRINTER_CHAR, getYpos(ProcessorAddr));
80002dac:	800227b7          	lui	a5,0x80022
80002db0:	2587a783          	lw	a5,600(a5) # 80022258 <__stack_top+0xfffdfff8>
80002db4:	00078513          	mv	a0,a5
80002db8:	1fc000ef          	jal	ra,80002fb4 <getYpos>
80002dbc:	00050793          	mv	a5,a0
80002dc0:	00078593          	mv	a1,a5
80002dc4:	500007b7          	lui	a5,0x50000
80002dc8:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002dcc:	984fe0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:44

    // Enables interruption from NI
    NI_enable_irq(TX_RX);
80002dd0:	000077b7          	lui	a5,0x7
80002dd4:	77778513          	addi	a0,a5,1911 # 7777 <HEAP_SIZE-0x8889>
80002dd8:	250000ef          	jal	ra,80003028 <NI_enable_irq>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:49
    //NI_IRCount = 0;
    //NI_enable_irq(RX);

    // Configures the timer to interrupt at each ms
    HW_set_32bit_reg(TIMER_BASE, 1000);
80002ddc:	3e800593          	li	a1,1000
80002de0:	500007b7          	lui	a5,0x50000
80002de4:	01c78513          	addi	a0,a5,28 # 5000001c <RAM_SIZE+0x4ff8001c>
80002de8:	968fe0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:52

    // Informs the NI the address to store incoming packets
    HW_set_32bit_reg(NI_ADDR, (unsigned int)&incommingPacket.header);
80002dec:	800217b7          	lui	a5,0x80021
80002df0:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
80002df4:	00078593          	mv	a1,a5
80002df8:	500007b7          	lui	a5,0x50000
80002dfc:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
80002e00:	950fe0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:55
    
    // Initialize the TaskList
    API_TaskListInit();
80002e04:	0a8030ef          	jal	ra,80005eac <API_TaskListInit>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:58
    
    // Initialize the Message & Service PIPE
    API_PipeInitialization();
80002e08:	171030ef          	jal	ra,80006778 <API_PipeInitialization>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:59
    SendingQueue_front = 0;
80002e0c:	800217b7          	lui	a5,0x80021
80002e10:	e007a623          	sw	zero,-500(a5) # 80020e0c <__stack_top+0xfffdebac>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:60
    SendingQueue_tail = 0;
80002e14:	800217b7          	lui	a5,0x80021
80002e18:	de07aa23          	sw	zero,-524(a5) # 80020df4 <__stack_top+0xfffdeb94>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:63

    // Set the system to Idle
    API_setFreqIdle();
80002e1c:	521030ef          	jal	ra,80006b3c <API_setFreqIdle>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:65

    return;
80002e20:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:66
}
80002e24:	00c12083          	lw	ra,12(sp)
80002e28:	00812403          	lw	s0,8(sp)
80002e2c:	01010113          	addi	sp,sp,16
80002e30:	00008067          	ret

80002e34 <prints>:
prints():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:70

////////////////////////////////////////////////////////////
// Prints a string
void prints(char *text) {
80002e34:	fd010113          	addi	sp,sp,-48
80002e38:	02112623          	sw	ra,44(sp)
80002e3c:	02812423          	sw	s0,40(sp)
80002e40:	03010413          	addi	s0,sp,48
80002e44:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:71
    int i = 0;
80002e48:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:73 (discriminator 1)
    do {
        HW_set_32bit_reg(PRINTER_CHAR, text[i]);
80002e4c:	fec42783          	lw	a5,-20(s0)
80002e50:	fdc42703          	lw	a4,-36(s0)
80002e54:	00f707b3          	add	a5,a4,a5
80002e58:	00078783          	lb	a5,0(a5)
80002e5c:	00078593          	mv	a1,a5
80002e60:	500007b7          	lui	a5,0x50000
80002e64:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002e68:	8e8fe0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:74 (discriminator 1)
        i++;
80002e6c:	fec42783          	lw	a5,-20(s0)
80002e70:	00178793          	addi	a5,a5,1
80002e74:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:75 (discriminator 1)
    } while (text[i - 1] != '\0');
80002e78:	fec42783          	lw	a5,-20(s0)
80002e7c:	fff78793          	addi	a5,a5,-1
80002e80:	fdc42703          	lw	a4,-36(s0)
80002e84:	00f707b3          	add	a5,a4,a5
80002e88:	00078783          	lb	a5,0(a5)
80002e8c:	fc0790e3          	bnez	a5,80002e4c <prints+0x18>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:76
    return;
80002e90:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:77
}
80002e94:	02c12083          	lw	ra,44(sp)
80002e98:	02812403          	lw	s0,40(sp)
80002e9c:	03010113          	addi	sp,sp,48
80002ea0:	00008067          	ret

80002ea4 <printi>:
printi():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:81

////////////////////////////////////////////////////////////
// Prints an integer
void printi(int value) {
80002ea4:	fe010113          	addi	sp,sp,-32
80002ea8:	00112e23          	sw	ra,28(sp)
80002eac:	00812c23          	sw	s0,24(sp)
80002eb0:	02010413          	addi	s0,sp,32
80002eb4:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:82
    HW_set_32bit_reg(PRINTER_INT, value);
80002eb8:	fec42783          	lw	a5,-20(s0)
80002ebc:	00078593          	mv	a1,a5
80002ec0:	500007b7          	lui	a5,0x50000
80002ec4:	02478513          	addi	a0,a5,36 # 50000024 <RAM_SIZE+0x4ff80024>
80002ec8:	888fe0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:83
    return;
80002ecc:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:84
}
80002ed0:	01c12083          	lw	ra,28(sp)
80002ed4:	01812403          	lw	s0,24(sp)
80002ed8:	02010113          	addi	sp,sp,32
80002edc:	00008067          	ret

80002ee0 <printsv>:
printsv():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:88

////////////////////////////////////////////////////////////
// Prints a string followed by a integer
void printsv(char *text1, int value1) {
80002ee0:	fe010113          	addi	sp,sp,-32
80002ee4:	00112e23          	sw	ra,28(sp)
80002ee8:	00812c23          	sw	s0,24(sp)
80002eec:	02010413          	addi	s0,sp,32
80002ef0:	fea42623          	sw	a0,-20(s0)
80002ef4:	feb42423          	sw	a1,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:90
    //vPortEnterCritical();
    prints(text1);
80002ef8:	fec42503          	lw	a0,-20(s0)
80002efc:	f39ff0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:91
    printi(value1);
80002f00:	fe842503          	lw	a0,-24(s0)
80002f04:	fa1ff0ef          	jal	ra,80002ea4 <printi>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:92
    prints("\n");
80002f08:	800077b7          	lui	a5,0x80007
80002f0c:	30078513          	addi	a0,a5,768 # 80007300 <__stack_top+0xfffc50a0>
80002f10:	f25ff0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:94
    //vPortExitCritical();
    return;
80002f14:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:95
}
80002f18:	01c12083          	lw	ra,28(sp)
80002f1c:	01812403          	lw	s0,24(sp)
80002f20:	02010113          	addi	sp,sp,32
80002f24:	00008067          	ret

80002f28 <printsvsv>:
printsvsv():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:99

////////////////////////////////////////////////////////////
// Prints two strings and two integers interspersed
void printsvsv(char *text1, int value1, char *text2, int value2) {
80002f28:	fe010113          	addi	sp,sp,-32
80002f2c:	00112e23          	sw	ra,28(sp)
80002f30:	00812c23          	sw	s0,24(sp)
80002f34:	02010413          	addi	s0,sp,32
80002f38:	fea42623          	sw	a0,-20(s0)
80002f3c:	feb42423          	sw	a1,-24(s0)
80002f40:	fec42223          	sw	a2,-28(s0)
80002f44:	fed42023          	sw	a3,-32(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:101
    //vPortEnterCritical();
    prints(text1);
80002f48:	fec42503          	lw	a0,-20(s0)
80002f4c:	ee9ff0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:102
    printi(value1);
80002f50:	fe842503          	lw	a0,-24(s0)
80002f54:	f51ff0ef          	jal	ra,80002ea4 <printi>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:103
    prints(text2);
80002f58:	fe442503          	lw	a0,-28(s0)
80002f5c:	ed9ff0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:104
    printi(value2);
80002f60:	fe042503          	lw	a0,-32(s0)
80002f64:	f41ff0ef          	jal	ra,80002ea4 <printi>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:105
    prints("\n");
80002f68:	800077b7          	lui	a5,0x80007
80002f6c:	30078513          	addi	a0,a5,768 # 80007300 <__stack_top+0xfffc50a0>
80002f70:	ec5ff0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:107
    //vPortExitCritical();
    return;
80002f74:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:108
}
80002f78:	01c12083          	lw	ra,28(sp)
80002f7c:	01812403          	lw	s0,24(sp)
80002f80:	02010113          	addi	sp,sp,32
80002f84:	00008067          	ret

80002f88 <getXpos>:
getXpos():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:112

////////////////////////////////////////////////////////////
// Gets the X coordinate from the address
unsigned int getXpos(unsigned int addr) { return ((addr & 0x0000FF00) >> 8); }
80002f88:	fe010113          	addi	sp,sp,-32
80002f8c:	00812e23          	sw	s0,28(sp)
80002f90:	02010413          	addi	s0,sp,32
80002f94:	fea42623          	sw	a0,-20(s0)
80002f98:	fec42783          	lw	a5,-20(s0)
80002f9c:	0087d793          	srli	a5,a5,0x8
80002fa0:	0ff7f793          	andi	a5,a5,255
80002fa4:	00078513          	mv	a0,a5
80002fa8:	01c12403          	lw	s0,28(sp)
80002fac:	02010113          	addi	sp,sp,32
80002fb0:	00008067          	ret

80002fb4 <getYpos>:
getYpos():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:116

////////////////////////////////////////////////////////////
// Gets the Y coordinate from the address
unsigned int getYpos(unsigned int addr) { return (addr & 0x000000FF); }
80002fb4:	fe010113          	addi	sp,sp,-32
80002fb8:	00812e23          	sw	s0,28(sp)
80002fbc:	02010413          	addi	s0,sp,32
80002fc0:	fea42623          	sw	a0,-20(s0)
80002fc4:	fec42783          	lw	a5,-20(s0)
80002fc8:	0ff7f793          	andi	a5,a5,255
80002fcc:	00078513          	mv	a0,a5
80002fd0:	01c12403          	lw	s0,28(sp)
80002fd4:	02010113          	addi	sp,sp,32
80002fd8:	00008067          	ret

80002fdc <SendRaw>:
SendRaw():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:120

///////////////////////////////////////////////////////////////////
// Configure the NI to transmitt a given packet
void SendRaw(unsigned int addr) {
80002fdc:	fe010113          	addi	sp,sp,-32
80002fe0:	00112e23          	sw	ra,28(sp)
80002fe4:	00812c23          	sw	s0,24(sp)
80002fe8:	02010413          	addi	s0,sp,32
80002fec:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:121
    HW_set_32bit_reg(NI_ADDR, addr);
80002ff0:	fec42583          	lw	a1,-20(s0)
80002ff4:	500007b7          	lui	a5,0x50000
80002ff8:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
80002ffc:	f55fd0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:122
    HW_set_32bit_reg(NI_TX, TX);
80003000:	000027b7          	lui	a5,0x2
80003004:	22278593          	addi	a1,a5,546 # 2222 <HEAP_SIZE-0xddde>
80003008:	500007b7          	lui	a5,0x50000
8000300c:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80003010:	f41fd0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:123
    return;
80003014:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:124
}
80003018:	01c12083          	lw	ra,28(sp)
8000301c:	01812403          	lw	s0,24(sp)
80003020:	02010113          	addi	sp,sp,32
80003024:	00008067          	ret

80003028 <NI_enable_irq>:
NI_enable_irq():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:128

////////////////////////////////////////////////////////////
// Enables interruptions incomming from NI
void NI_enable_irq(int which){
80003028:	fe010113          	addi	sp,sp,-32
8000302c:	00112e23          	sw	ra,28(sp)
80003030:	00812c23          	sw	s0,24(sp)
80003034:	02010413          	addi	s0,sp,32
80003038:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:129
	if (which == TX || which == TX_RX){
8000303c:	fec42703          	lw	a4,-20(s0)
80003040:	000027b7          	lui	a5,0x2
80003044:	22278793          	addi	a5,a5,546 # 2222 <HEAP_SIZE-0xddde>
80003048:	00f70a63          	beq	a4,a5,8000305c <NI_enable_irq+0x34>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:129 (discriminator 1)
8000304c:	fec42703          	lw	a4,-20(s0)
80003050:	000077b7          	lui	a5,0x7
80003054:	77778793          	addi	a5,a5,1911 # 7777 <HEAP_SIZE-0x8889>
80003058:	00f71c63          	bne	a4,a5,80003070 <NI_enable_irq+0x48>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:130
        PLIC_EnableIRQ(NI_TX_IRQn);
8000305c:	00100513          	li	a0,1
80003060:	bf5ff0ef          	jal	ra,80002c54 <PLIC_EnableIRQ>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:131
        PLIC_SetPriority(NI_TX_IRQn, 1);
80003064:	00100593          	li	a1,1
80003068:	00100513          	li	a0,1
8000306c:	c9dff0ef          	jal	ra,80002d08 <PLIC_SetPriority>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:133
    }
    if (which == RX || which == TX_RX){
80003070:	fec42703          	lw	a4,-20(s0)
80003074:	000037b7          	lui	a5,0x3
80003078:	33378793          	addi	a5,a5,819 # 3333 <HEAP_SIZE-0xcccd>
8000307c:	00f70a63          	beq	a4,a5,80003090 <NI_enable_irq+0x68>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:133 (discriminator 1)
80003080:	fec42703          	lw	a4,-20(s0)
80003084:	000077b7          	lui	a5,0x7
80003088:	77778793          	addi	a5,a5,1911 # 7777 <HEAP_SIZE-0x8889>
8000308c:	00f71e63          	bne	a4,a5,800030a8 <NI_enable_irq+0x80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:134
        PLIC_EnableIRQ(NI_RX_IRQn);
80003090:	00200513          	li	a0,2
80003094:	bc1ff0ef          	jal	ra,80002c54 <PLIC_EnableIRQ>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:135
        PLIC_SetPriority(NI_RX_IRQn, 2);
80003098:	00200593          	li	a1,2
8000309c:	00200513          	li	a0,2
800030a0:	c69ff0ef          	jal	ra,80002d08 <PLIC_SetPriority>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:137
    }
    return;
800030a4:	00000013          	nop
800030a8:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:138
}
800030ac:	01c12083          	lw	ra,28(sp)
800030b0:	01812403          	lw	s0,24(sp)
800030b4:	02010113          	addi	sp,sp,32
800030b8:	00008067          	ret

800030bc <External_1_IRQHandler>:
External_1_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:150
    return;
}

////////////////////////////////////////////////////////////
// Interruptions handler for TX
uint8_t External_1_IRQHandler(void){ 
800030bc:	ff010113          	addi	sp,sp,-16
800030c0:	00812623          	sw	s0,12(sp)
800030c4:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:155
    /*prints("INTERRUPTION TX\n");
    API_ClearPipeSlot(SendingSlot);
    HW_set_32bit_reg(NI_TX, DONE);
    API_Try2Send();*/
    return 0;
800030c8:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:156
}
800030cc:	00078513          	mv	a0,a5
800030d0:	00c12403          	lw	s0,12(sp)
800030d4:	01010113          	addi	sp,sp,16
800030d8:	00008067          	ret

800030dc <External_2_IRQHandler>:
External_2_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:160

////////////////////////////////////////////////////////////
// Interruptions handler for RX
uint8_t External_2_IRQHandler(void){
800030dc:	ff010113          	addi	sp,sp,-16
800030e0:	00112623          	sw	ra,12(sp)
800030e4:	00812423          	sw	s0,8(sp)
800030e8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:164
    unsigned int aux;
    //NI_IRCount++;
    
    API_NI_Handler();
800030ec:	7b1000ef          	jal	ra,8000409c <API_NI_Handler>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:166

    return 0;
800030f0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:167
}
800030f4:	00078513          	mv	a0,a5
800030f8:	00c12083          	lw	ra,12(sp)
800030fc:	00812403          	lw	s0,8(sp)
80003100:	01010113          	addi	sp,sp,16
80003104:	00008067          	ret

80003108 <External_3_IRQHandler>:
External_3_IRQHandler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:169

uint8_t External_3_IRQHandler(void){
80003108:	ff010113          	addi	sp,sp,-16
8000310c:	00112623          	sw	ra,12(sp)
80003110:	00812423          	sw	s0,8(sp)
80003114:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:172
    

    printExecutedInstructions();
80003118:	295030ef          	jal	ra,80006bac <printExecutedInstructions>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:175

    // releases the interruption
    HW_set_32bit_reg(TIMER_BASE, 0xFFFFFFFF);
8000311c:	fff00593          	li	a1,-1
80003120:	500007b7          	lui	a5,0x50000
80003124:	01c78513          	addi	a0,a5,28 # 5000001c <RAM_SIZE+0x4ff8001c>
80003128:	e29fd0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:177
    
    return 0;
8000312c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:178
}
80003130:	00078513          	mv	a0,a5
80003134:	00c12083          	lw	ra,12(sp)
80003138:	00812403          	lw	s0,8(sp)
8000313c:	01010113          	addi	sp,sp,16
80003140:	00008067          	ret

80003144 <mySwap>:
mySwap():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:184


////////////////////////////////////////////////////////////
// https://www.techiedelight.com/implement-itoa-function-in-c/
// Function to swap two numbers
void mySwap(char *x, char *y) {
80003144:	fd010113          	addi	sp,sp,-48
80003148:	02812623          	sw	s0,44(sp)
8000314c:	03010413          	addi	s0,sp,48
80003150:	fca42e23          	sw	a0,-36(s0)
80003154:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:185
    char t = *x; *x = *y; *y = t;
80003158:	fdc42783          	lw	a5,-36(s0)
8000315c:	0007c783          	lbu	a5,0(a5)
80003160:	fef407a3          	sb	a5,-17(s0)
80003164:	fd842783          	lw	a5,-40(s0)
80003168:	00078703          	lb	a4,0(a5)
8000316c:	fdc42783          	lw	a5,-36(s0)
80003170:	00e78023          	sb	a4,0(a5)
80003174:	fd842783          	lw	a5,-40(s0)
80003178:	fef44703          	lbu	a4,-17(s0)
8000317c:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:186
}
80003180:	00000013          	nop
80003184:	02c12403          	lw	s0,44(sp)
80003188:	03010113          	addi	sp,sp,48
8000318c:	00008067          	ret

80003190 <reverse>:
reverse():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:188
// Function to reverse `buffer[i…j]`
char* reverse(char *buffer, int i, int j){
80003190:	fe010113          	addi	sp,sp,-32
80003194:	00112e23          	sw	ra,28(sp)
80003198:	00812c23          	sw	s0,24(sp)
8000319c:	02010413          	addi	s0,sp,32
800031a0:	fea42623          	sw	a0,-20(s0)
800031a4:	feb42423          	sw	a1,-24(s0)
800031a8:	fec42223          	sw	a2,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:189
    while (i < j) {
800031ac:	0400006f          	j	800031ec <reverse+0x5c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:190
        mySwap(&buffer[i++], &buffer[j--]);
800031b0:	fe842783          	lw	a5,-24(s0)
800031b4:	00178713          	addi	a4,a5,1
800031b8:	fee42423          	sw	a4,-24(s0)
800031bc:	00078713          	mv	a4,a5
800031c0:	fec42783          	lw	a5,-20(s0)
800031c4:	00e786b3          	add	a3,a5,a4
800031c8:	fe442783          	lw	a5,-28(s0)
800031cc:	fff78713          	addi	a4,a5,-1
800031d0:	fee42223          	sw	a4,-28(s0)
800031d4:	00078713          	mv	a4,a5
800031d8:	fec42783          	lw	a5,-20(s0)
800031dc:	00e787b3          	add	a5,a5,a4
800031e0:	00078593          	mv	a1,a5
800031e4:	00068513          	mv	a0,a3
800031e8:	f5dff0ef          	jal	ra,80003144 <mySwap>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:189
    while (i < j) {
800031ec:	fe842703          	lw	a4,-24(s0)
800031f0:	fe442783          	lw	a5,-28(s0)
800031f4:	faf74ee3          	blt	a4,a5,800031b0 <reverse+0x20>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:193
    }
 
    return buffer;
800031f8:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:194
}
800031fc:	00078513          	mv	a0,a5
80003200:	01c12083          	lw	ra,28(sp)
80003204:	01812403          	lw	s0,24(sp)
80003208:	02010113          	addi	sp,sp,32
8000320c:	00008067          	ret

80003210 <myItoa>:
myItoa():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:196
// Iterative function to implement `itoa()` function in C
char* myItoa(int value, char* buffer, int base){
80003210:	fd010113          	addi	sp,sp,-48
80003214:	02112623          	sw	ra,44(sp)
80003218:	02812423          	sw	s0,40(sp)
8000321c:	03010413          	addi	s0,sp,48
80003220:	fca42e23          	sw	a0,-36(s0)
80003224:	fcb42c23          	sw	a1,-40(s0)
80003228:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:198
    // invalid input
    if (base < 2 || base > 32) {
8000322c:	fd442703          	lw	a4,-44(s0)
80003230:	00100793          	li	a5,1
80003234:	00e7d863          	ble	a4,a5,80003244 <myItoa+0x34>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:198 (discriminator 1)
80003238:	fd442703          	lw	a4,-44(s0)
8000323c:	02000793          	li	a5,32
80003240:	00e7d663          	ble	a4,a5,8000324c <myItoa+0x3c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:199
        return buffer;
80003244:	fd842783          	lw	a5,-40(s0)
80003248:	1540006f          	j	8000339c <myItoa+0x18c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:203
    }
    // consider the absolute value of the number
    int n;
    if (value < 0)
8000324c:	fdc42783          	lw	a5,-36(s0)
80003250:	0007da63          	bgez	a5,80003264 <myItoa+0x54>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:204
        n = value * -1;
80003254:	fdc42783          	lw	a5,-36(s0)
80003258:	40f007b3          	neg	a5,a5
8000325c:	fef42623          	sw	a5,-20(s0)
80003260:	00c0006f          	j	8000326c <myItoa+0x5c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:206
    else 
        n = value;
80003264:	fdc42783          	lw	a5,-36(s0)
80003268:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:208

    int i = 0;
8000326c:	fe042423          	sw	zero,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:209
    while (n){
80003270:	09c0006f          	j	8000330c <myItoa+0xfc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:210
        int r = n % base;
80003274:	fec42703          	lw	a4,-20(s0)
80003278:	fd442783          	lw	a5,-44(s0)
8000327c:	02f767b3          	rem	a5,a4,a5
80003280:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:212
 
        if (r >= 10) {
80003284:	fe442703          	lw	a4,-28(s0)
80003288:	00900793          	li	a5,9
8000328c:	02e7de63          	ble	a4,a5,800032c8 <myItoa+0xb8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:213
            buffer[i++] = 65 + (r - 10);
80003290:	fe442783          	lw	a5,-28(s0)
80003294:	0ff7f793          	andi	a5,a5,255
80003298:	03778793          	addi	a5,a5,55
8000329c:	0ff7f693          	andi	a3,a5,255
800032a0:	fe842783          	lw	a5,-24(s0)
800032a4:	00178713          	addi	a4,a5,1
800032a8:	fee42423          	sw	a4,-24(s0)
800032ac:	00078713          	mv	a4,a5
800032b0:	fd842783          	lw	a5,-40(s0)
800032b4:	00e787b3          	add	a5,a5,a4
800032b8:	01869713          	slli	a4,a3,0x18
800032bc:	41875713          	srai	a4,a4,0x18
800032c0:	00e78023          	sb	a4,0(a5)
800032c4:	0380006f          	j	800032fc <myItoa+0xec>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:216
        }
        else {
            buffer[i++] = 48 + r;
800032c8:	fe442783          	lw	a5,-28(s0)
800032cc:	0ff7f793          	andi	a5,a5,255
800032d0:	03078793          	addi	a5,a5,48
800032d4:	0ff7f693          	andi	a3,a5,255
800032d8:	fe842783          	lw	a5,-24(s0)
800032dc:	00178713          	addi	a4,a5,1
800032e0:	fee42423          	sw	a4,-24(s0)
800032e4:	00078713          	mv	a4,a5
800032e8:	fd842783          	lw	a5,-40(s0)
800032ec:	00e787b3          	add	a5,a5,a4
800032f0:	01869713          	slli	a4,a3,0x18
800032f4:	41875713          	srai	a4,a4,0x18
800032f8:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:219
        }
 
        n = n / base;
800032fc:	fec42703          	lw	a4,-20(s0)
80003300:	fd442783          	lw	a5,-44(s0)
80003304:	02f747b3          	div	a5,a4,a5
80003308:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:209
    while (n){
8000330c:	fec42783          	lw	a5,-20(s0)
80003310:	f60792e3          	bnez	a5,80003274 <myItoa+0x64>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:222
    }
    // if the number is 0
    if (i == 0) {
80003314:	fe842783          	lw	a5,-24(s0)
80003318:	02079263          	bnez	a5,8000333c <myItoa+0x12c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:223
        buffer[i++] = '0';
8000331c:	fe842783          	lw	a5,-24(s0)
80003320:	00178713          	addi	a4,a5,1
80003324:	fee42423          	sw	a4,-24(s0)
80003328:	00078713          	mv	a4,a5
8000332c:	fd842783          	lw	a5,-40(s0)
80003330:	00e787b3          	add	a5,a5,a4
80003334:	03000713          	li	a4,48
80003338:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:228
    }
    // If the base is 10 and the value is negative, the resulting string
    // is preceded with a minus sign (-)
    // With any other base, value is always considered unsigned
    if (value < 0 && base == 10) {
8000333c:	fdc42783          	lw	a5,-36(s0)
80003340:	0207d863          	bgez	a5,80003370 <myItoa+0x160>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:228 (discriminator 1)
80003344:	fd442703          	lw	a4,-44(s0)
80003348:	00a00793          	li	a5,10
8000334c:	02f71263          	bne	a4,a5,80003370 <myItoa+0x160>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:229
        buffer[i++] = '-';
80003350:	fe842783          	lw	a5,-24(s0)
80003354:	00178713          	addi	a4,a5,1
80003358:	fee42423          	sw	a4,-24(s0)
8000335c:	00078713          	mv	a4,a5
80003360:	fd842783          	lw	a5,-40(s0)
80003364:	00e787b3          	add	a5,a5,a4
80003368:	02d00713          	li	a4,45
8000336c:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:231
    }
    buffer[i] = '\0'; // null terminate string
80003370:	fe842783          	lw	a5,-24(s0)
80003374:	fd842703          	lw	a4,-40(s0)
80003378:	00f707b3          	add	a5,a4,a5
8000337c:	00078023          	sb	zero,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:233
    // reverse the string and return it
    return reverse(buffer, 0, i - 1);
80003380:	fe842783          	lw	a5,-24(s0)
80003384:	fff78793          	addi	a5,a5,-1
80003388:	00078613          	mv	a2,a5
8000338c:	00000593          	li	a1,0
80003390:	fd842503          	lw	a0,-40(s0)
80003394:	dfdff0ef          	jal	ra,80003190 <reverse>
80003398:	00050793          	mv	a5,a0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:234
}
8000339c:	00078513          	mv	a0,a5
800033a0:	02c12083          	lw	ra,44(sp)
800033a4:	02812403          	lw	s0,40(sp)
800033a8:	03010113          	addi	sp,sp,48
800033ac:	00008067          	ret

800033b0 <makeAddress>:
makeAddress():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:248
    return;
}

////////////////////////////////////////////////////////////
// Returns the PE address for a giver pair of coords
unsigned int makeAddress(unsigned int x, unsigned int y) {
800033b0:	fd010113          	addi	sp,sp,-48
800033b4:	02812623          	sw	s0,44(sp)
800033b8:	03010413          	addi	s0,sp,48
800033bc:	fca42e23          	sw	a0,-36(s0)
800033c0:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:249
    unsigned int address = 0x00000000;
800033c4:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:250
    return (address | (x << 8) | y);
800033c8:	fdc42783          	lw	a5,-36(s0)
800033cc:	00879713          	slli	a4,a5,0x8
800033d0:	fec42783          	lw	a5,-20(s0)
800033d4:	00f76733          	or	a4,a4,a5
800033d8:	fd842783          	lw	a5,-40(s0)
800033dc:	00f767b3          	or	a5,a4,a5
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:251
}
800033e0:	00078513          	mv	a0,a5
800033e4:	02c12403          	lw	s0,44(sp)
800033e8:	03010113          	addi	sp,sp,48
800033ec:	00008067          	ret

800033f0 <API_PushSendQueue>:
API_PushSendQueue():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:255

////////////////////////////////////////////////////////////
// Pushes one slot to the sending queue
void API_PushSendQueue(unsigned int type, unsigned int slot){
800033f0:	fe010113          	addi	sp,sp,-32
800033f4:	00112e23          	sw	ra,28(sp)
800033f8:	00812c23          	sw	s0,24(sp)
800033fc:	02010413          	addi	s0,sp,32
80003400:	fea42623          	sw	a0,-20(s0)
80003404:	feb42423          	sw	a1,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:256
    SendingQueue[SendingQueue_front] = type | slot;
80003408:	800217b7          	lui	a5,0x80021
8000340c:	e0c7a683          	lw	a3,-500(a5) # 80020e0c <__stack_top+0xfffdebac>
80003410:	fec42703          	lw	a4,-20(s0)
80003414:	fe842783          	lw	a5,-24(s0)
80003418:	00f76733          	or	a4,a4,a5
8000341c:	800217b7          	lui	a5,0x80021
80003420:	00269693          	slli	a3,a3,0x2
80003424:	dd478793          	addi	a5,a5,-556 # 80020dd4 <__stack_top+0xfffdeb74>
80003428:	00f687b3          	add	a5,a3,a5
8000342c:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:257
    printsv("SendingQueue_front: ", SendingQueue_front);
80003430:	800217b7          	lui	a5,0x80021
80003434:	e0c7a783          	lw	a5,-500(a5) # 80020e0c <__stack_top+0xfffdebac>
80003438:	00078593          	mv	a1,a5
8000343c:	800077b7          	lui	a5,0x80007
80003440:	32c78513          	addi	a0,a5,812 # 8000732c <__stack_top+0xfffc50cc>
80003444:	a9dff0ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:258
    if(SendingQueue_front == (PIPE_SIZE*2)-1){
80003448:	800217b7          	lui	a5,0x80021
8000344c:	e0c7a703          	lw	a4,-500(a5) # 80020e0c <__stack_top+0xfffdebac>
80003450:	00700793          	li	a5,7
80003454:	00f71863          	bne	a4,a5,80003464 <API_PushSendQueue+0x74>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:259
        SendingQueue_front = 0;
80003458:	800217b7          	lui	a5,0x80021
8000345c:	e007a623          	sw	zero,-500(a5) # 80020e0c <__stack_top+0xfffdebac>
80003460:	0180006f          	j	80003478 <API_PushSendQueue+0x88>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:261
    } else {
        SendingQueue_front++;
80003464:	800217b7          	lui	a5,0x80021
80003468:	e0c7a783          	lw	a5,-500(a5) # 80020e0c <__stack_top+0xfffdebac>
8000346c:	00178713          	addi	a4,a5,1
80003470:	800217b7          	lui	a5,0x80021
80003474:	e0e7a623          	sw	a4,-500(a5) # 80020e0c <__stack_top+0xfffdebac>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:263
    }
    API_Try2Send();
80003478:	0a4000ef          	jal	ra,8000351c <API_Try2Send>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:264
    return;
8000347c:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:265
}
80003480:	01c12083          	lw	ra,28(sp)
80003484:	01812403          	lw	s0,24(sp)
80003488:	02010113          	addi	sp,sp,32
8000348c:	00008067          	ret

80003490 <API_PopSendQueue>:
API_PopSendQueue():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:269

////////////////////////////////////////////////////////////
// Pushes one slot to the sending queue
unsigned int API_PopSendQueue(){
80003490:	fe010113          	addi	sp,sp,-32
80003494:	00812e23          	sw	s0,28(sp)
80003498:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:271
    unsigned int element;
    if (SendingQueue_front == SendingQueue_tail){
8000349c:	800217b7          	lui	a5,0x80021
800034a0:	e0c7a703          	lw	a4,-500(a5) # 80020e0c <__stack_top+0xfffdebac>
800034a4:	800217b7          	lui	a5,0x80021
800034a8:	df47a783          	lw	a5,-524(a5) # 80020df4 <__stack_top+0xfffdeb94>
800034ac:	00f71663          	bne	a4,a5,800034b8 <API_PopSendQueue+0x28>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:272
        return EMPTY;
800034b0:	303007b7          	lui	a5,0x30300
800034b4:	0580006f          	j	8000350c <API_PopSendQueue+0x7c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:274
    } else {
        element = SendingQueue[SendingQueue_tail];
800034b8:	800217b7          	lui	a5,0x80021
800034bc:	df47a703          	lw	a4,-524(a5) # 80020df4 <__stack_top+0xfffdeb94>
800034c0:	800217b7          	lui	a5,0x80021
800034c4:	00271713          	slli	a4,a4,0x2
800034c8:	dd478793          	addi	a5,a5,-556 # 80020dd4 <__stack_top+0xfffdeb74>
800034cc:	00f707b3          	add	a5,a4,a5
800034d0:	0007a783          	lw	a5,0(a5)
800034d4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:275
        if (SendingQueue_tail == (PIPE_SIZE*2)-1){
800034d8:	800217b7          	lui	a5,0x80021
800034dc:	df47a703          	lw	a4,-524(a5) # 80020df4 <__stack_top+0xfffdeb94>
800034e0:	00700793          	li	a5,7
800034e4:	00f71863          	bne	a4,a5,800034f4 <API_PopSendQueue+0x64>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:276
            SendingQueue_tail = 0;
800034e8:	800217b7          	lui	a5,0x80021
800034ec:	de07aa23          	sw	zero,-524(a5) # 80020df4 <__stack_top+0xfffdeb94>
800034f0:	0180006f          	j	80003508 <API_PopSendQueue+0x78>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:278
        } else {
            SendingQueue_tail++;
800034f4:	800217b7          	lui	a5,0x80021
800034f8:	df47a783          	lw	a5,-524(a5) # 80020df4 <__stack_top+0xfffdeb94>
800034fc:	00178713          	addi	a4,a5,1
80003500:	800217b7          	lui	a5,0x80021
80003504:	dee7aa23          	sw	a4,-524(a5) # 80020df4 <__stack_top+0xfffdeb94>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:280
        }
        return element;
80003508:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:282
    }
}
8000350c:	00078513          	mv	a0,a5
80003510:	01c12403          	lw	s0,28(sp)
80003514:	02010113          	addi	sp,sp,32
80003518:	00008067          	ret

8000351c <API_Try2Send>:
API_Try2Send():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:286

////////////////////////////////////////////////////////////
// Try to send some packet! 
void API_Try2Send(){
8000351c:	fe010113          	addi	sp,sp,-32
80003520:	00112e23          	sw	ra,28(sp)
80003524:	00812c23          	sw	s0,24(sp)
80003528:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:291
    unsigned int toSend;
    // Try to send the packet to NI if it's available
    // Checks if the NI is available to transmitt something
    //vPortEnterCritical();
    if (HW_get_32bit_reg(NI_TX) == NI_STATUS_OFF){
8000352c:	500007b7          	lui	a5,0x50000
80003530:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80003534:	a25fd0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
80003538:	00050713          	mv	a4,a0
8000353c:	0ff00793          	li	a5,255
80003540:	0ef71663          	bne	a4,a5,8000362c <API_Try2Send+0x110>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:292
        toSend = API_PopSendQueue();
80003544:	f4dff0ef          	jal	ra,80003490 <API_PopSendQueue>
80003548:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:293
        if (toSend != EMPTY){
8000354c:	fec42703          	lw	a4,-20(s0)
80003550:	303007b7          	lui	a5,0x30300
80003554:	0af70a63          	beq	a4,a5,80003608 <API_Try2Send+0xec>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:294
            SendingSlot = toSend;
80003558:	800217b7          	lui	a5,0x80021
8000355c:	fec42703          	lw	a4,-20(s0)
80003560:	cae7a423          	sw	a4,-856(a5) # 80020ca8 <__stack_top+0xfffdea48>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:295
            if((toSend & 0xFFFF0000) ==  SERVICE){
80003564:	fec42703          	lw	a4,-20(s0)
80003568:	ffff07b7          	lui	a5,0xffff0
8000356c:	00f77733          	and	a4,a4,a5
80003570:	101007b7          	lui	a5,0x10100
80003574:	04f71063          	bne	a4,a5,800035b4 <API_Try2Send+0x98>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:296
                SendRaw((unsigned int)&ServicePipe[toSend & 0x0000FFFF].header);
80003578:	fec42703          	lw	a4,-20(s0)
8000357c:	000107b7          	lui	a5,0x10
80003580:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80003584:	00f77733          	and	a4,a4,a5
80003588:	00070793          	mv	a5,a4
8000358c:	00479793          	slli	a5,a5,0x4
80003590:	40e787b3          	sub	a5,a5,a4
80003594:	00279793          	slli	a5,a5,0x2
80003598:	80021737          	lui	a4,0x80021
8000359c:	cac70713          	addi	a4,a4,-852 # 80020cac <__stack_top+0xfffdea4c>
800035a0:	00e787b3          	add	a5,a5,a4
800035a4:	00878793          	addi	a5,a5,8
800035a8:	00078513          	mv	a0,a5
800035ac:	a31ff0ef          	jal	ra,80002fdc <SendRaw>
800035b0:	0480006f          	j	800035f8 <API_Try2Send+0xdc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:298
            }
            else if((toSend & 0xFFFF0000) ==  MESSAGE){
800035b4:	fec42703          	lw	a4,-20(s0)
800035b8:	ffff07b7          	lui	a5,0xffff0
800035bc:	00f77733          	and	a4,a4,a5
800035c0:	202007b7          	lui	a5,0x20200
800035c4:	02f71a63          	bne	a4,a5,800035f8 <API_Try2Send+0xdc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:299
                SendRaw((unsigned int)&MessagePipe[toSend & 0x0000FFFF].header);
800035c8:	fec42703          	lw	a4,-20(s0)
800035cc:	000107b7          	lui	a5,0x10
800035d0:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
800035d4:	00f77733          	and	a4,a4,a5
800035d8:	24400793          	li	a5,580
800035dc:	02f70733          	mul	a4,a4,a5
800035e0:	800217b7          	lui	a5,0x80021
800035e4:	e1078793          	addi	a5,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
800035e8:	00f707b3          	add	a5,a4,a5
800035ec:	00c78793          	addi	a5,a5,12
800035f0:	00078513          	mv	a0,a5
800035f4:	9e9ff0ef          	jal	ra,80002fdc <SendRaw>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:301
            }
            prints("API_Try2Send success!\n");
800035f8:	800077b7          	lui	a5,0x80007
800035fc:	34478513          	addi	a0,a5,836 # 80007344 <__stack_top+0xfffc50e4>
80003600:	835ff0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:310
        }
    } else {
        prints("API_Try2Send failed - NI_TX occupied!\n");
    }
    //vPortExitCritical();
    return;
80003604:	0380006f          	j	8000363c <API_Try2Send+0x120>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:303
            HW_set_32bit_reg(NI_TX, RESET);
80003608:	000097b7          	lui	a5,0x9
8000360c:	88878593          	addi	a1,a5,-1912 # 8888 <HEAP_SIZE-0x7778>
80003610:	500007b7          	lui	a5,0x50000
80003614:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80003618:	939fd0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:304
            prints("API_Try2Send failed - empty SendQueue!\n");
8000361c:	800077b7          	lui	a5,0x80007
80003620:	35c78513          	addi	a0,a5,860 # 8000735c <__stack_top+0xfffc50fc>
80003624:	811ff0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:310
    return;
80003628:	0140006f          	j	8000363c <API_Try2Send+0x120>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:307
        prints("API_Try2Send failed - NI_TX occupied!\n");
8000362c:	800077b7          	lui	a5,0x80007
80003630:	38478513          	addi	a0,a5,900 # 80007384 <__stack_top+0xfffc5124>
80003634:	801ff0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:310
    return;
80003638:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:311
}
8000363c:	01c12083          	lw	ra,28(sp)
80003640:	01812403          	lw	s0,24(sp)
80003644:	02010113          	addi	sp,sp,32
80003648:	00008067          	ret

8000364c <API_AckTaskAllocation>:
API_AckTaskAllocation():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:313

void API_AckTaskAllocation(unsigned int task_id, unsigned int app_id){
8000364c:	fd010113          	addi	sp,sp,-48
80003650:	02112623          	sw	ra,44(sp)
80003654:	02812423          	sw	s0,40(sp)
80003658:	03010413          	addi	s0,sp,48
8000365c:	fca42e23          	sw	a0,-36(s0)
80003660:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:316
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80003664:	308030ef          	jal	ra,8000696c <API_GetServiceSlot>
80003668:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:317
        if(mySlot == PIPE_FULL){
8000366c:	fec42703          	lw	a4,-20(s0)
80003670:	fdfe07b7          	lui	a5,0xfdfe0
80003674:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9db9d>
80003678:	00f71463          	bne	a4,a5,80003680 <API_AckTaskAllocation+0x34>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:319
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
8000367c:	221000ef          	jal	ra,8000409c <API_NI_Handler>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:321
        }
    }while(mySlot == PIPE_FULL);
80003680:	fec42703          	lw	a4,-20(s0)
80003684:	fdfe07b7          	lui	a5,0xfdfe0
80003688:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9db9d>
8000368c:	fcf70ce3          	beq	a4,a5,80003664 <API_AckTaskAllocation+0x18>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:323

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80003690:	800217b7          	lui	a5,0x80021
80003694:	fec42703          	lw	a4,-20(s0)
80003698:	cac78693          	addi	a3,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
8000369c:	00070793          	mv	a5,a4
800036a0:	00479793          	slli	a5,a5,0x4
800036a4:	40e787b3          	sub	a5,a5,a4
800036a8:	00279793          	slli	a5,a5,0x2
800036ac:	00f687b3          	add	a5,a3,a5
800036b0:	feff0737          	lui	a4,0xfeff0
800036b4:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efadc9e>
800036b8:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:325

    ServicePipe[mySlot].header.header           = makeAddress(0, 0);
800036bc:	00000593          	li	a1,0
800036c0:	00000513          	li	a0,0
800036c4:	cedff0ef          	jal	ra,800033b0 <makeAddress>
800036c8:	00050613          	mv	a2,a0
800036cc:	800217b7          	lui	a5,0x80021
800036d0:	fec42703          	lw	a4,-20(s0)
800036d4:	cac78693          	addi	a3,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
800036d8:	00070793          	mv	a5,a4
800036dc:	00479793          	slli	a5,a5,0x4
800036e0:	40e787b3          	sub	a5,a5,a4
800036e4:	00279793          	slli	a5,a5,0x2
800036e8:	00f687b3          	add	a5,a3,a5
800036ec:	00c7a423          	sw	a2,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:326
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
800036f0:	800217b7          	lui	a5,0x80021
800036f4:	fec42703          	lw	a4,-20(s0)
800036f8:	cac78693          	addi	a3,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
800036fc:	00070793          	mv	a5,a4
80003700:	00479793          	slli	a5,a5,0x4
80003704:	40e787b3          	sub	a5,a5,a4
80003708:	00279793          	slli	a5,a5,0x2
8000370c:	00f687b3          	add	a5,a3,a5
80003710:	00b00713          	li	a4,11
80003714:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:327
    ServicePipe[mySlot].header.service          = TASK_ALLOCATION_SUCCESS;
80003718:	800217b7          	lui	a5,0x80021
8000371c:	fec42703          	lw	a4,-20(s0)
80003720:	cac78693          	addi	a3,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
80003724:	00070793          	mv	a5,a4
80003728:	00479793          	slli	a5,a5,0x4
8000372c:	40e787b3          	sub	a5,a5,a4
80003730:	00279793          	slli	a5,a5,0x2
80003734:	00f687b3          	add	a5,a3,a5
80003738:	03500713          	li	a4,53
8000373c:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:328
    ServicePipe[mySlot].header.task_id          = task_id;
80003740:	800217b7          	lui	a5,0x80021
80003744:	fec42703          	lw	a4,-20(s0)
80003748:	cac78693          	addi	a3,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
8000374c:	00070793          	mv	a5,a4
80003750:	00479793          	slli	a5,a5,0x4
80003754:	40e787b3          	sub	a5,a5,a4
80003758:	00279793          	slli	a5,a5,0x2
8000375c:	00f687b3          	add	a5,a3,a5
80003760:	fdc42703          	lw	a4,-36(s0)
80003764:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:329
    ServicePipe[mySlot].header.task_app_id      = app_id;
80003768:	800217b7          	lui	a5,0x80021
8000376c:	fec42703          	lw	a4,-20(s0)
80003770:	cac78693          	addi	a3,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
80003774:	00070793          	mv	a5,a4
80003778:	00479793          	slli	a5,a5,0x4
8000377c:	40e787b3          	sub	a5,a5,a4
80003780:	00279793          	slli	a5,a5,0x2
80003784:	00f687b3          	add	a5,a3,a5
80003788:	fd842703          	lw	a4,-40(s0)
8000378c:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:331

    API_PushSendQueue(SERVICE, mySlot);
80003790:	fec42583          	lw	a1,-20(s0)
80003794:	10100537          	lui	a0,0x10100
80003798:	c59ff0ef          	jal	ra,800033f0 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:332
    return;    
8000379c:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:333
}
800037a0:	02c12083          	lw	ra,44(sp)
800037a4:	02812403          	lw	s0,40(sp)
800037a8:	03010113          	addi	sp,sp,48
800037ac:	00008067          	ret

800037b0 <API_SendMessage>:
API_SendMessage():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:335

void API_SendMessage(unsigned int addr, unsigned int taskID){
800037b0:	fd010113          	addi	sp,sp,-48
800037b4:	02112623          	sw	ra,44(sp)
800037b8:	02812423          	sw	s0,40(sp)
800037bc:	03010413          	addi	s0,sp,48
800037c0:	fca42e23          	sw	a0,-36(s0)
800037c4:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:341
    unsigned int mySlot;
    unsigned int taskSlot;
    unsigned int i;
    Message *theMessage;
    do{
        mySlot = API_GetMessageSlot();
800037c8:	058030ef          	jal	ra,80006820 <API_GetMessageSlot>
800037cc:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:342
        if(mySlot == PIPE_FULL){
800037d0:	fe842703          	lw	a4,-24(s0)
800037d4:	fdfe07b7          	lui	a5,0xfdfe0
800037d8:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9db9d>
800037dc:	00f71463          	bne	a4,a5,800037e4 <API_SendMessage+0x34>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:344
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
800037e0:	0bd000ef          	jal	ra,8000409c <API_NI_Handler>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:346
        }
    }while(mySlot == PIPE_FULL);
800037e4:	fe842703          	lw	a4,-24(s0)
800037e8:	fdfe07b7          	lui	a5,0xfdfe0
800037ec:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9db9d>
800037f0:	fcf70ce3          	beq	a4,a5,800037c8 <API_SendMessage+0x18>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:348
    
    theMessage = addr;
800037f4:	fdc42783          	lw	a5,-36(s0)
800037f8:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:350

    taskSlot = API_GetCurrentTaskSlot();
800037fc:	760020ef          	jal	ra,80005f5c <API_GetCurrentTaskSlot>
80003800:	fea42023          	sw	a0,-32(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:351
    printsvsv("Adding a msg to task ", taskID, " in the PIPE slot ", mySlot);
80003804:	fd842703          	lw	a4,-40(s0)
80003808:	fe842783          	lw	a5,-24(s0)
8000380c:	00078693          	mv	a3,a5
80003810:	800077b7          	lui	a5,0x80007
80003814:	3ac78613          	addi	a2,a5,940 # 800073ac <__stack_top+0xfffc514c>
80003818:	00070593          	mv	a1,a4
8000381c:	800077b7          	lui	a5,0x80007
80003820:	3c078513          	addi	a0,a5,960 # 800073c0 <__stack_top+0xfffc5160>
80003824:	f04ff0ef          	jal	ra,80002f28 <printsvsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:352
    MessagePipe[mySlot].holder = taskSlot;
80003828:	800217b7          	lui	a5,0x80021
8000382c:	fe842683          	lw	a3,-24(s0)
80003830:	e1078713          	addi	a4,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
80003834:	24400793          	li	a5,580
80003838:	02f687b3          	mul	a5,a3,a5
8000383c:	00f707b3          	add	a5,a4,a5
80003840:	fe042703          	lw	a4,-32(s0)
80003844:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:354

    MessagePipe[mySlot].header.header           = TaskList[taskSlot].TasksMap[taskID];
80003848:	800226b7          	lui	a3,0x80022
8000384c:	fe042703          	lw	a4,-32(s0)
80003850:	00070793          	mv	a5,a4
80003854:	00579793          	slli	a5,a5,0x5
80003858:	00e787b3          	add	a5,a5,a4
8000385c:	fd842703          	lw	a4,-40(s0)
80003860:	00e787b3          	add	a5,a5,a4
80003864:	01478793          	addi	a5,a5,20
80003868:	ec868713          	addi	a4,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
8000386c:	00279793          	slli	a5,a5,0x2
80003870:	00f707b3          	add	a5,a4,a5
80003874:	00c7a703          	lw	a4,12(a5)
80003878:	800217b7          	lui	a5,0x80021
8000387c:	fe842603          	lw	a2,-24(s0)
80003880:	e1078693          	addi	a3,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
80003884:	24400793          	li	a5,580
80003888:	02f607b3          	mul	a5,a2,a5
8000388c:	00f687b3          	add	a5,a3,a5
80003890:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:355
    MessagePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE + theMessage->length + 1;
80003894:	fe442783          	lw	a5,-28(s0)
80003898:	0007a783          	lw	a5,0(a5)
8000389c:	00c78713          	addi	a4,a5,12
800038a0:	800217b7          	lui	a5,0x80021
800038a4:	fe842603          	lw	a2,-24(s0)
800038a8:	e1078693          	addi	a3,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
800038ac:	24400793          	li	a5,580
800038b0:	02f607b3          	mul	a5,a2,a5
800038b4:	00f687b3          	add	a5,a3,a5
800038b8:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:356
    MessagePipe[mySlot].header.service          = MESSAGE_DELIVERY;
800038bc:	800217b7          	lui	a5,0x80021
800038c0:	fe842683          	lw	a3,-24(s0)
800038c4:	e1078713          	addi	a4,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
800038c8:	24400793          	li	a5,580
800038cc:	02f687b3          	mul	a5,a3,a5
800038d0:	00f707b3          	add	a5,a4,a5
800038d4:	02000713          	li	a4,32
800038d8:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:357
    MessagePipe[mySlot].header.application_id   = TaskList[taskSlot].AppID;
800038dc:	800227b7          	lui	a5,0x80022
800038e0:	fe042703          	lw	a4,-32(s0)
800038e4:	ec878693          	addi	a3,a5,-312 # 80021ec8 <__stack_top+0xfffdfc68>
800038e8:	00070793          	mv	a5,a4
800038ec:	00579793          	slli	a5,a5,0x5
800038f0:	00e787b3          	add	a5,a5,a4
800038f4:	00279793          	slli	a5,a5,0x2
800038f8:	00f687b3          	add	a5,a3,a5
800038fc:	0147a703          	lw	a4,20(a5)
80003900:	800217b7          	lui	a5,0x80021
80003904:	fe842603          	lw	a2,-24(s0)
80003908:	e1078693          	addi	a3,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
8000390c:	24400793          	li	a5,580
80003910:	02f607b3          	mul	a5,a2,a5
80003914:	00f687b3          	add	a5,a3,a5
80003918:	00e7ac23          	sw	a4,24(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:358
    MessagePipe[mySlot].header.producer_task    = TaskList[taskSlot].TaskID;
8000391c:	800226b7          	lui	a3,0x80022
80003920:	fe042703          	lw	a4,-32(s0)
80003924:	00070793          	mv	a5,a4
80003928:	00579793          	slli	a5,a5,0x5
8000392c:	00e787b3          	add	a5,a5,a4
80003930:	00279793          	slli	a5,a5,0x2
80003934:	ec868713          	addi	a4,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80003938:	00e787b3          	add	a5,a5,a4
8000393c:	0107a703          	lw	a4,16(a5)
80003940:	800217b7          	lui	a5,0x80021
80003944:	fe842603          	lw	a2,-24(s0)
80003948:	e1078693          	addi	a3,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
8000394c:	24400793          	li	a5,580
80003950:	02f607b3          	mul	a5,a2,a5
80003954:	00f687b3          	add	a5,a3,a5
80003958:	00e7ae23          	sw	a4,28(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:359
    MessagePipe[mySlot].header.destination_task = taskID;
8000395c:	800217b7          	lui	a5,0x80021
80003960:	fe842683          	lw	a3,-24(s0)
80003964:	e1078713          	addi	a4,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
80003968:	24400793          	li	a5,580
8000396c:	02f687b3          	mul	a5,a3,a5
80003970:	00f707b3          	add	a5,a4,a5
80003974:	fd842703          	lw	a4,-40(s0)
80003978:	02e7a023          	sw	a4,32(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:360
    MessagePipe[mySlot].msg.length              = theMessage->length;
8000397c:	fe442783          	lw	a5,-28(s0)
80003980:	0007a703          	lw	a4,0(a5)
80003984:	800217b7          	lui	a5,0x80021
80003988:	fe842603          	lw	a2,-24(s0)
8000398c:	24400693          	li	a3,580
80003990:	02d606b3          	mul	a3,a2,a3
80003994:	e1078793          	addi	a5,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
80003998:	00f687b3          	add	a5,a3,a5
8000399c:	04e7a023          	sw	a4,64(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:361
    for (i = 0; i < theMessage->length; i++){
800039a0:	fe042623          	sw	zero,-20(s0)
800039a4:	05c0006f          	j	80003a00 <API_SendMessage+0x250>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:362 (discriminator 3)
        MessagePipe[mySlot].msg.msg[i]          = theMessage->msg[i];
800039a8:	fe442703          	lw	a4,-28(s0)
800039ac:	fec42783          	lw	a5,-20(s0)
800039b0:	00279793          	slli	a5,a5,0x2
800039b4:	00f707b3          	add	a5,a4,a5
800039b8:	0047a683          	lw	a3,4(a5)
800039bc:	80021637          	lui	a2,0x80021
800039c0:	fe842703          	lw	a4,-24(s0)
800039c4:	00070793          	mv	a5,a4
800039c8:	00379793          	slli	a5,a5,0x3
800039cc:	00e787b3          	add	a5,a5,a4
800039d0:	00479793          	slli	a5,a5,0x4
800039d4:	00e787b3          	add	a5,a5,a4
800039d8:	fec42703          	lw	a4,-20(s0)
800039dc:	00e787b3          	add	a5,a5,a4
800039e0:	01078793          	addi	a5,a5,16
800039e4:	e1060713          	addi	a4,a2,-496 # 80020e10 <__stack_top+0xfffdebb0>
800039e8:	00279793          	slli	a5,a5,0x2
800039ec:	00f707b3          	add	a5,a4,a5
800039f0:	00d7a223          	sw	a3,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:361 (discriminator 3)
    for (i = 0; i < theMessage->length; i++){
800039f4:	fec42783          	lw	a5,-20(s0)
800039f8:	00178793          	addi	a5,a5,1
800039fc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:361 (discriminator 1)
80003a00:	fe442783          	lw	a5,-28(s0)
80003a04:	0007a783          	lw	a5,0(a5)
80003a08:	fec42703          	lw	a4,-20(s0)
80003a0c:	f8f76ee3          	bltu	a4,a5,800039a8 <API_SendMessage+0x1f8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:365
    }
    
    if (TaskList[taskSlot].PendingReq[taskID] == TRUE){
80003a10:	800226b7          	lui	a3,0x80022
80003a14:	fe042703          	lw	a4,-32(s0)
80003a18:	00070793          	mv	a5,a4
80003a1c:	00579793          	slli	a5,a5,0x5
80003a20:	00e787b3          	add	a5,a5,a4
80003a24:	fd842703          	lw	a4,-40(s0)
80003a28:	00e787b3          	add	a5,a5,a4
80003a2c:	00c78793          	addi	a5,a5,12
80003a30:	00279713          	slli	a4,a5,0x2
80003a34:	ec868793          	addi	a5,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80003a38:	00f707b3          	add	a5,a4,a5
80003a3c:	0007a703          	lw	a4,0(a5)
80003a40:	00100793          	li	a5,1
80003a44:	04f71863          	bne	a4,a5,80003a94 <API_SendMessage+0x2e4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:366
        prints(">>>>>Achei aqui no pending!\n");
80003a48:	800077b7          	lui	a5,0x80007
80003a4c:	3d878513          	addi	a0,a5,984 # 800073d8 <__stack_top+0xfffc5178>
80003a50:	be4ff0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:367
        API_PushSendQueue(MESSAGE, mySlot);
80003a54:	fe842583          	lw	a1,-24(s0)
80003a58:	20200537          	lui	a0,0x20200
80003a5c:	995ff0ef          	jal	ra,800033f0 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:368
        TaskList[taskSlot].PendingReq[taskID] = FALSE;
80003a60:	800226b7          	lui	a3,0x80022
80003a64:	fe042703          	lw	a4,-32(s0)
80003a68:	00070793          	mv	a5,a4
80003a6c:	00579793          	slli	a5,a5,0x5
80003a70:	00e787b3          	add	a5,a5,a4
80003a74:	fd842703          	lw	a4,-40(s0)
80003a78:	00e787b3          	add	a5,a5,a4
80003a7c:	00c78793          	addi	a5,a5,12
80003a80:	00279713          	slli	a4,a5,0x2
80003a84:	ec868793          	addi	a5,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80003a88:	00f707b3          	add	a5,a4,a5
80003a8c:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:370
    }
    return;
80003a90:	00000013          	nop
80003a94:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:371
}
80003a98:	02c12083          	lw	ra,44(sp)
80003a9c:	02812403          	lw	s0,40(sp)
80003aa0:	03010113          	addi	sp,sp,48
80003aa4:	00008067          	ret

80003aa8 <API_SendFinishTask>:
API_SendFinishTask():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:373

void API_SendFinishTask(unsigned int task_id, unsigned int app_id){
80003aa8:	fd010113          	addi	sp,sp,-48
80003aac:	02112623          	sw	ra,44(sp)
80003ab0:	02812423          	sw	s0,40(sp)
80003ab4:	03010413          	addi	s0,sp,48
80003ab8:	fca42e23          	sw	a0,-36(s0)
80003abc:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:376
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80003ac0:	6ad020ef          	jal	ra,8000696c <API_GetServiceSlot>
80003ac4:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:377
        if(mySlot == PIPE_FULL){
80003ac8:	fec42703          	lw	a4,-20(s0)
80003acc:	fdfe07b7          	lui	a5,0xfdfe0
80003ad0:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9db9d>
80003ad4:	00f71463          	bne	a4,a5,80003adc <API_SendFinishTask+0x34>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:379
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80003ad8:	5c4000ef          	jal	ra,8000409c <API_NI_Handler>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:381
        }
    }while(mySlot == PIPE_FULL);
80003adc:	fec42703          	lw	a4,-20(s0)
80003ae0:	fdfe07b7          	lui	a5,0xfdfe0
80003ae4:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9db9d>
80003ae8:	fcf70ce3          	beq	a4,a5,80003ac0 <API_SendFinishTask+0x18>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:383

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80003aec:	800217b7          	lui	a5,0x80021
80003af0:	fec42703          	lw	a4,-20(s0)
80003af4:	cac78693          	addi	a3,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
80003af8:	00070793          	mv	a5,a4
80003afc:	00479793          	slli	a5,a5,0x4
80003b00:	40e787b3          	sub	a5,a5,a4
80003b04:	00279793          	slli	a5,a5,0x2
80003b08:	00f687b3          	add	a5,a3,a5
80003b0c:	feff0737          	lui	a4,0xfeff0
80003b10:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efadc9e>
80003b14:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:385

    ServicePipe[mySlot].header.header           = makeAddress(0, 0);
80003b18:	00000593          	li	a1,0
80003b1c:	00000513          	li	a0,0
80003b20:	891ff0ef          	jal	ra,800033b0 <makeAddress>
80003b24:	00050613          	mv	a2,a0
80003b28:	800217b7          	lui	a5,0x80021
80003b2c:	fec42703          	lw	a4,-20(s0)
80003b30:	cac78693          	addi	a3,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
80003b34:	00070793          	mv	a5,a4
80003b38:	00479793          	slli	a5,a5,0x4
80003b3c:	40e787b3          	sub	a5,a5,a4
80003b40:	00279793          	slli	a5,a5,0x2
80003b44:	00f687b3          	add	a5,a3,a5
80003b48:	00c7a423          	sw	a2,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:386
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80003b4c:	800217b7          	lui	a5,0x80021
80003b50:	fec42703          	lw	a4,-20(s0)
80003b54:	cac78693          	addi	a3,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
80003b58:	00070793          	mv	a5,a4
80003b5c:	00479793          	slli	a5,a5,0x4
80003b60:	40e787b3          	sub	a5,a5,a4
80003b64:	00279793          	slli	a5,a5,0x2
80003b68:	00f687b3          	add	a5,a3,a5
80003b6c:	00b00713          	li	a4,11
80003b70:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:387
    ServicePipe[mySlot].header.service          = TASK_FINISH;
80003b74:	800217b7          	lui	a5,0x80021
80003b78:	fec42703          	lw	a4,-20(s0)
80003b7c:	cac78693          	addi	a3,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
80003b80:	00070793          	mv	a5,a4
80003b84:	00479793          	slli	a5,a5,0x4
80003b88:	40e787b3          	sub	a5,a5,a4
80003b8c:	00279793          	slli	a5,a5,0x2
80003b90:	00f687b3          	add	a5,a3,a5
80003b94:	50000713          	li	a4,1280
80003b98:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:388
    ServicePipe[mySlot].header.task_id          = task_id;
80003b9c:	800217b7          	lui	a5,0x80021
80003ba0:	fec42703          	lw	a4,-20(s0)
80003ba4:	cac78693          	addi	a3,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
80003ba8:	00070793          	mv	a5,a4
80003bac:	00479793          	slli	a5,a5,0x4
80003bb0:	40e787b3          	sub	a5,a5,a4
80003bb4:	00279793          	slli	a5,a5,0x2
80003bb8:	00f687b3          	add	a5,a3,a5
80003bbc:	fdc42703          	lw	a4,-36(s0)
80003bc0:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:389
    ServicePipe[mySlot].header.task_app_id      = app_id;
80003bc4:	800217b7          	lui	a5,0x80021
80003bc8:	fec42703          	lw	a4,-20(s0)
80003bcc:	cac78693          	addi	a3,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
80003bd0:	00070793          	mv	a5,a4
80003bd4:	00479793          	slli	a5,a5,0x4
80003bd8:	40e787b3          	sub	a5,a5,a4
80003bdc:	00279793          	slli	a5,a5,0x2
80003be0:	00f687b3          	add	a5,a3,a5
80003be4:	fd842703          	lw	a4,-40(s0)
80003be8:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:390
    ServicePipe[mySlot].header.task_dest_addr   = ProcessorAddr;
80003bec:	800227b7          	lui	a5,0x80022
80003bf0:	2587a683          	lw	a3,600(a5) # 80022258 <__stack_top+0xfffdfff8>
80003bf4:	800217b7          	lui	a5,0x80021
80003bf8:	fec42703          	lw	a4,-20(s0)
80003bfc:	cac78613          	addi	a2,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
80003c00:	00070793          	mv	a5,a4
80003c04:	00479793          	slli	a5,a5,0x4
80003c08:	40e787b3          	sub	a5,a5,a4
80003c0c:	00279793          	slli	a5,a5,0x2
80003c10:	00f607b3          	add	a5,a2,a5
80003c14:	02d7ac23          	sw	a3,56(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:391
    API_PushSendQueue(SERVICE, mySlot);
80003c18:	fec42583          	lw	a1,-20(s0)
80003c1c:	10100537          	lui	a0,0x10100
80003c20:	fd0ff0ef          	jal	ra,800033f0 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:392
    return;    
80003c24:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:393
}
80003c28:	02c12083          	lw	ra,44(sp)
80003c2c:	02812403          	lw	s0,40(sp)
80003c30:	03010113          	addi	sp,sp,48
80003c34:	00008067          	ret

80003c38 <API_SendMessageReq>:
API_SendMessageReq():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:395

void API_SendMessageReq(unsigned int addr, unsigned int taskID){
80003c38:	fd010113          	addi	sp,sp,-48
80003c3c:	02112623          	sw	ra,44(sp)
80003c40:	02812423          	sw	s0,40(sp)
80003c44:	03010413          	addi	s0,sp,48
80003c48:	fca42e23          	sw	a0,-36(s0)
80003c4c:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:400
    unsigned int taskSlot;
    unsigned int mySlot;

    // Update task info
    taskSlot = API_GetCurrentTaskSlot();
80003c50:	30c020ef          	jal	ra,80005f5c <API_GetCurrentTaskSlot>
80003c54:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:401
    TaskList[taskSlot].waitingMsg = TRUE;
80003c58:	800227b7          	lui	a5,0x80022
80003c5c:	fec42703          	lw	a4,-20(s0)
80003c60:	ec878693          	addi	a3,a5,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80003c64:	00070793          	mv	a5,a4
80003c68:	00579793          	slli	a5,a5,0x5
80003c6c:	00e787b3          	add	a5,a5,a4
80003c70:	00279793          	slli	a5,a5,0x2
80003c74:	00f687b3          	add	a5,a3,a5
80003c78:	00100713          	li	a4,1
80003c7c:	00e7ae23          	sw	a4,28(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:402
    TaskList[taskSlot].MsgToReceive = addr;
80003c80:	800226b7          	lui	a3,0x80022
80003c84:	fec42703          	lw	a4,-20(s0)
80003c88:	00070793          	mv	a5,a4
80003c8c:	00579793          	slli	a5,a5,0x5
80003c90:	00e787b3          	add	a5,a5,a4
80003c94:	00279793          	slli	a5,a5,0x2
80003c98:	ec868713          	addi	a4,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80003c9c:	00e787b3          	add	a5,a5,a4
80003ca0:	fdc42703          	lw	a4,-36(s0)
80003ca4:	02e7a023          	sw	a4,32(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:407
    //printsv("API_SendMessageReq addr: ", addr);

    // Sends the message request
    do{
        mySlot = API_GetServiceSlot();
80003ca8:	4c5020ef          	jal	ra,8000696c <API_GetServiceSlot>
80003cac:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:408
        if(mySlot == PIPE_FULL){
80003cb0:	fe842703          	lw	a4,-24(s0)
80003cb4:	fdfe07b7          	lui	a5,0xfdfe0
80003cb8:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9db9d>
80003cbc:	00f71463          	bne	a4,a5,80003cc4 <API_SendMessageReq+0x8c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:410
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80003cc0:	3dc000ef          	jal	ra,8000409c <API_NI_Handler>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:412
        }
    }while(mySlot == PIPE_FULL);
80003cc4:	fe842703          	lw	a4,-24(s0)
80003cc8:	fdfe07b7          	lui	a5,0xfdfe0
80003ccc:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9db9d>
80003cd0:	fcf70ce3          	beq	a4,a5,80003ca8 <API_SendMessageReq+0x70>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:414

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80003cd4:	800217b7          	lui	a5,0x80021
80003cd8:	fe842703          	lw	a4,-24(s0)
80003cdc:	cac78693          	addi	a3,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
80003ce0:	00070793          	mv	a5,a4
80003ce4:	00479793          	slli	a5,a5,0x4
80003ce8:	40e787b3          	sub	a5,a5,a4
80003cec:	00279793          	slli	a5,a5,0x2
80003cf0:	00f687b3          	add	a5,a3,a5
80003cf4:	feff0737          	lui	a4,0xfeff0
80003cf8:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efadc9e>
80003cfc:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:416

    ServicePipe[mySlot].header.header           = TaskList[taskSlot].TasksMap[taskID];
80003d00:	800226b7          	lui	a3,0x80022
80003d04:	fec42703          	lw	a4,-20(s0)
80003d08:	00070793          	mv	a5,a4
80003d0c:	00579793          	slli	a5,a5,0x5
80003d10:	00e787b3          	add	a5,a5,a4
80003d14:	fd842703          	lw	a4,-40(s0)
80003d18:	00e787b3          	add	a5,a5,a4
80003d1c:	01478793          	addi	a5,a5,20
80003d20:	ec868713          	addi	a4,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80003d24:	00279793          	slli	a5,a5,0x2
80003d28:	00f707b3          	add	a5,a4,a5
80003d2c:	00c7a683          	lw	a3,12(a5)
80003d30:	800217b7          	lui	a5,0x80021
80003d34:	fe842703          	lw	a4,-24(s0)
80003d38:	cac78613          	addi	a2,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
80003d3c:	00070793          	mv	a5,a4
80003d40:	00479793          	slli	a5,a5,0x4
80003d44:	40e787b3          	sub	a5,a5,a4
80003d48:	00279793          	slli	a5,a5,0x2
80003d4c:	00f607b3          	add	a5,a2,a5
80003d50:	00d7a423          	sw	a3,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:417
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80003d54:	800217b7          	lui	a5,0x80021
80003d58:	fe842703          	lw	a4,-24(s0)
80003d5c:	cac78693          	addi	a3,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
80003d60:	00070793          	mv	a5,a4
80003d64:	00479793          	slli	a5,a5,0x4
80003d68:	40e787b3          	sub	a5,a5,a4
80003d6c:	00279793          	slli	a5,a5,0x2
80003d70:	00f687b3          	add	a5,a3,a5
80003d74:	00b00713          	li	a4,11
80003d78:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:418
    ServicePipe[mySlot].header.service          = MESSAGE_REQUEST;
80003d7c:	800217b7          	lui	a5,0x80021
80003d80:	fe842703          	lw	a4,-24(s0)
80003d84:	cac78693          	addi	a3,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
80003d88:	00070793          	mv	a5,a4
80003d8c:	00479793          	slli	a5,a5,0x4
80003d90:	40e787b3          	sub	a5,a5,a4
80003d94:	00279793          	slli	a5,a5,0x2
80003d98:	00f687b3          	add	a5,a3,a5
80003d9c:	01000713          	li	a4,16
80003da0:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:419
    ServicePipe[mySlot].header.task_id          = TaskList[taskSlot].TaskID;
80003da4:	800226b7          	lui	a3,0x80022
80003da8:	fec42703          	lw	a4,-20(s0)
80003dac:	00070793          	mv	a5,a4
80003db0:	00579793          	slli	a5,a5,0x5
80003db4:	00e787b3          	add	a5,a5,a4
80003db8:	00279793          	slli	a5,a5,0x2
80003dbc:	ec868713          	addi	a4,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80003dc0:	00e787b3          	add	a5,a5,a4
80003dc4:	0107a683          	lw	a3,16(a5)
80003dc8:	800217b7          	lui	a5,0x80021
80003dcc:	fe842703          	lw	a4,-24(s0)
80003dd0:	cac78613          	addi	a2,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
80003dd4:	00070793          	mv	a5,a4
80003dd8:	00479793          	slli	a5,a5,0x4
80003ddc:	40e787b3          	sub	a5,a5,a4
80003de0:	00279793          	slli	a5,a5,0x2
80003de4:	00f607b3          	add	a5,a2,a5
80003de8:	00d7aa23          	sw	a3,20(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:420
    ServicePipe[mySlot].header.task_app_id      = TaskList[taskSlot].AppID;
80003dec:	800227b7          	lui	a5,0x80022
80003df0:	fec42703          	lw	a4,-20(s0)
80003df4:	ec878693          	addi	a3,a5,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80003df8:	00070793          	mv	a5,a4
80003dfc:	00579793          	slli	a5,a5,0x5
80003e00:	00e787b3          	add	a5,a5,a4
80003e04:	00279793          	slli	a5,a5,0x2
80003e08:	00f687b3          	add	a5,a3,a5
80003e0c:	0147a683          	lw	a3,20(a5)
80003e10:	800217b7          	lui	a5,0x80021
80003e14:	fe842703          	lw	a4,-24(s0)
80003e18:	cac78613          	addi	a2,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
80003e1c:	00070793          	mv	a5,a4
80003e20:	00479793          	slli	a5,a5,0x4
80003e24:	40e787b3          	sub	a5,a5,a4
80003e28:	00279793          	slli	a5,a5,0x2
80003e2c:	00f607b3          	add	a5,a2,a5
80003e30:	02d7a223          	sw	a3,36(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:421
    ServicePipe[mySlot].header.producer_task_id = taskID;
80003e34:	800217b7          	lui	a5,0x80021
80003e38:	fe842703          	lw	a4,-24(s0)
80003e3c:	cac78693          	addi	a3,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
80003e40:	00070793          	mv	a5,a4
80003e44:	00479793          	slli	a5,a5,0x4
80003e48:	40e787b3          	sub	a5,a5,a4
80003e4c:	00279793          	slli	a5,a5,0x2
80003e50:	00f687b3          	add	a5,a3,a5
80003e54:	fd842703          	lw	a4,-40(s0)
80003e58:	00e7ae23          	sw	a4,28(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:423

    API_PushSendQueue(SERVICE, mySlot);
80003e5c:	fe842583          	lw	a1,-24(s0)
80003e60:	10100537          	lui	a0,0x10100
80003e64:	d8cff0ef          	jal	ra,800033f0 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:425

    prints("Esperando Mensagem!\n");
80003e68:	800077b7          	lui	a5,0x80007
80003e6c:	3f878513          	addi	a0,a5,1016 # 800073f8 <__stack_top+0xfffc5198>
80003e70:	fc5fe0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:427
    // Bloquear a tarefa!
    while(TaskList[taskSlot].waitingMsg == TRUE){ 
80003e74:	02c0006f          	j	80003ea0 <API_SendMessageReq+0x268>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:428
        printsvsv("taskslot ", taskSlot, " esperando mensagem ", 0);
80003e78:	fec42703          	lw	a4,-20(s0)
80003e7c:	00000693          	li	a3,0
80003e80:	800077b7          	lui	a5,0x80007
80003e84:	41078613          	addi	a2,a5,1040 # 80007410 <__stack_top+0xfffc51b0>
80003e88:	00070593          	mv	a1,a4
80003e8c:	800077b7          	lui	a5,0x80007
80003e90:	42878513          	addi	a0,a5,1064 # 80007428 <__stack_top+0xfffc51c8>
80003e94:	894ff0ef          	jal	ra,80002f28 <printsvsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:429
        vTaskDelay(1); 
80003e98:	00100513          	li	a0,1
80003e9c:	b30fe0ef          	jal	ra,800021cc <vTaskDelay>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:427
    while(TaskList[taskSlot].waitingMsg == TRUE){ 
80003ea0:	800227b7          	lui	a5,0x80022
80003ea4:	fec42703          	lw	a4,-20(s0)
80003ea8:	ec878693          	addi	a3,a5,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80003eac:	00070793          	mv	a5,a4
80003eb0:	00579793          	slli	a5,a5,0x5
80003eb4:	00e787b3          	add	a5,a5,a4
80003eb8:	00279793          	slli	a5,a5,0x2
80003ebc:	00f687b3          	add	a5,a3,a5
80003ec0:	01c7a703          	lw	a4,28(a5)
80003ec4:	00100793          	li	a5,1
80003ec8:	faf708e3          	beq	a4,a5,80003e78 <API_SendMessageReq+0x240>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:431
    }
    prints("Mensagem Recebida!\n");
80003ecc:	800077b7          	lui	a5,0x80007
80003ed0:	43478513          	addi	a0,a5,1076 # 80007434 <__stack_top+0xfffc51d4>
80003ed4:	f61fe0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:432
    return;
80003ed8:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:433
}
80003edc:	02c12083          	lw	ra,44(sp)
80003ee0:	02812403          	lw	s0,40(sp)
80003ee4:	03010113          	addi	sp,sp,48
80003ee8:	00008067          	ret

80003eec <API_CheckMessagePipe>:
API_CheckMessagePipe():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:435

unsigned int API_CheckMessagePipe(unsigned int requester_task_id, unsigned int task_app_id){
80003eec:	fd010113          	addi	sp,sp,-48
80003ef0:	02812623          	sw	s0,44(sp)
80003ef4:	03010413          	addi	s0,sp,48
80003ef8:	fca42e23          	sw	a0,-36(s0)
80003efc:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:437
    unsigned int i;
    unsigned int sel = ERRO;
80003f00:	fff00793          	li	a5,-1
80003f04:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:438
    unsigned int smallID = 268435455;
80003f08:	100007b7          	lui	a5,0x10000
80003f0c:	fff78793          	addi	a5,a5,-1 # fffffff <RAM_SIZE+0xff7ffff>
80003f10:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:439
    for (i = 0; i < PIPE_SIZE; i++){
80003f14:	fe042623          	sw	zero,-20(s0)
80003f18:	0c80006f          	j	80003fe0 <API_CheckMessagePipe+0xf4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:440
        if(MessagePipe[i].status == PIPE_OCCUPIED){
80003f1c:	800217b7          	lui	a5,0x80021
80003f20:	fec42683          	lw	a3,-20(s0)
80003f24:	24400713          	li	a4,580
80003f28:	02e68733          	mul	a4,a3,a4
80003f2c:	e1078793          	addi	a5,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
80003f30:	00f707b3          	add	a5,a4,a5
80003f34:	0007a703          	lw	a4,0(a5)
80003f38:	00100793          	li	a5,1
80003f3c:	08f71c63          	bne	a4,a5,80003fd4 <API_CheckMessagePipe+0xe8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:441
            if(MessagePipe[i].header.application_id == task_app_id){
80003f40:	800217b7          	lui	a5,0x80021
80003f44:	fec42683          	lw	a3,-20(s0)
80003f48:	e1078713          	addi	a4,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
80003f4c:	24400793          	li	a5,580
80003f50:	02f687b3          	mul	a5,a3,a5
80003f54:	00f707b3          	add	a5,a4,a5
80003f58:	0187a783          	lw	a5,24(a5)
80003f5c:	fd842703          	lw	a4,-40(s0)
80003f60:	06f71a63          	bne	a4,a5,80003fd4 <API_CheckMessagePipe+0xe8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:442
                if(MessagePipe[i].header.destination_task == requester_task_id){
80003f64:	800217b7          	lui	a5,0x80021
80003f68:	fec42683          	lw	a3,-20(s0)
80003f6c:	e1078713          	addi	a4,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
80003f70:	24400793          	li	a5,580
80003f74:	02f687b3          	mul	a5,a3,a5
80003f78:	00f707b3          	add	a5,a4,a5
80003f7c:	0207a783          	lw	a5,32(a5)
80003f80:	fdc42703          	lw	a4,-36(s0)
80003f84:	04f71863          	bne	a4,a5,80003fd4 <API_CheckMessagePipe+0xe8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:443
                    if(MessagePipe[i].msgID < smallID){
80003f88:	800217b7          	lui	a5,0x80021
80003f8c:	fec42683          	lw	a3,-20(s0)
80003f90:	e1078713          	addi	a4,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
80003f94:	24400793          	li	a5,580
80003f98:	02f687b3          	mul	a5,a3,a5
80003f9c:	00f707b3          	add	a5,a4,a5
80003fa0:	0087a783          	lw	a5,8(a5)
80003fa4:	fe442703          	lw	a4,-28(s0)
80003fa8:	02e7f663          	bleu	a4,a5,80003fd4 <API_CheckMessagePipe+0xe8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:444
                        smallID = MessagePipe[i].msgID;
80003fac:	800217b7          	lui	a5,0x80021
80003fb0:	fec42683          	lw	a3,-20(s0)
80003fb4:	e1078713          	addi	a4,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
80003fb8:	24400793          	li	a5,580
80003fbc:	02f687b3          	mul	a5,a3,a5
80003fc0:	00f707b3          	add	a5,a4,a5
80003fc4:	0087a783          	lw	a5,8(a5)
80003fc8:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:445
                        sel = i;
80003fcc:	fec42783          	lw	a5,-20(s0)
80003fd0:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:439 (discriminator 2)
    for (i = 0; i < PIPE_SIZE; i++){
80003fd4:	fec42783          	lw	a5,-20(s0)
80003fd8:	00178793          	addi	a5,a5,1
80003fdc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:439 (discriminator 1)
80003fe0:	fec42703          	lw	a4,-20(s0)
80003fe4:	00300793          	li	a5,3
80003fe8:	f2e7fae3          	bleu	a4,a5,80003f1c <API_CheckMessagePipe+0x30>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:451
                    }
                }
            }
        }
    }
    if(sel != ERRO){
80003fec:	fe842703          	lw	a4,-24(s0)
80003ff0:	fff00793          	li	a5,-1
80003ff4:	02f70063          	beq	a4,a5,80004014 <API_CheckMessagePipe+0x128>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:452
        MessagePipe[sel].status == PIPE_TRANSMITTING;
80003ff8:	800217b7          	lui	a5,0x80021
80003ffc:	fe842683          	lw	a3,-24(s0)
80004000:	24400713          	li	a4,580
80004004:	02e68733          	mul	a4,a3,a4
80004008:	e1078793          	addi	a5,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
8000400c:	00f707b3          	add	a5,a4,a5
80004010:	0007a783          	lw	a5,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:455
    }
    //printsv("returning sel: ", sel);
    return sel;
80004014:	fe842783          	lw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:456
}
80004018:	00078513          	mv	a0,a5
8000401c:	02c12403          	lw	s0,44(sp)
80004020:	03010113          	addi	sp,sp,48
80004024:	00008067          	ret

80004028 <API_AddPendingReq>:
API_AddPendingReq():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:458

void API_AddPendingReq(unsigned int requester_task_id, unsigned int task_app_id, unsigned int producer_task_id){
80004028:	fd010113          	addi	sp,sp,-48
8000402c:	02112623          	sw	ra,44(sp)
80004030:	02812423          	sw	s0,40(sp)
80004034:	03010413          	addi	s0,sp,48
80004038:	fca42e23          	sw	a0,-36(s0)
8000403c:	fcb42c23          	sw	a1,-40(s0)
80004040:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:459
    unsigned int slot = API_GetTaskSlot(producer_task_id, task_app_id);
80004044:	fd842583          	lw	a1,-40(s0)
80004048:	fd442503          	lw	a0,-44(s0)
8000404c:	300020ef          	jal	ra,8000634c <API_GetTaskSlot>
80004050:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:460
    TaskList[slot].PendingReq[requester_task_id] = TRUE;
80004054:	800226b7          	lui	a3,0x80022
80004058:	fec42703          	lw	a4,-20(s0)
8000405c:	00070793          	mv	a5,a4
80004060:	00579793          	slli	a5,a5,0x5
80004064:	00e787b3          	add	a5,a5,a4
80004068:	fdc42703          	lw	a4,-36(s0)
8000406c:	00e787b3          	add	a5,a5,a4
80004070:	00c78793          	addi	a5,a5,12
80004074:	00279713          	slli	a4,a5,0x2
80004078:	ec868793          	addi	a5,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
8000407c:	00f707b3          	add	a5,a4,a5
80004080:	00100713          	li	a4,1
80004084:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:461
    return;
80004088:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:462
}
8000408c:	02c12083          	lw	ra,44(sp)
80004090:	02812403          	lw	s0,40(sp)
80004094:	03010113          	addi	sp,sp,48
80004098:	00008067          	ret

8000409c <API_NI_Handler>:
API_NI_Handler():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:465


unsigned int API_NI_Handler(){
8000409c:	fe010113          	addi	sp,sp,-32
800040a0:	00112e23          	sw	ra,28(sp)
800040a4:	00812c23          	sw	s0,24(sp)
800040a8:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:468
    unsigned int aux;
    unsigned int service;
    unsigned int count = 0;
800040ac:	fe042423          	sw	zero,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:472
    do{
        //HW_set_32bit_reg(NI_RX, INTERRUPTION_ACK);

        if (HW_get_32bit_reg(NI_TX) == NI_STATUS_INTER){
800040b0:	500007b7          	lui	a5,0x50000
800040b4:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
800040b8:	ea1fc0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
800040bc:	00050713          	mv	a4,a0
800040c0:	000017b7          	lui	a5,0x1
800040c4:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
800040c8:	04f71263          	bne	a4,a5,8000410c <API_NI_Handler+0x70>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:473
            prints("TX interruption catched\n"); // - ", NI_IRCount);
800040cc:	800077b7          	lui	a5,0x80007
800040d0:	44878513          	addi	a0,a5,1096 # 80007448 <__stack_top+0xfffc51e8>
800040d4:	d61fe0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:474
            API_ClearPipeSlot(SendingSlot); // clear the pipe slot that was transmitted
800040d8:	800217b7          	lui	a5,0x80021
800040dc:	ca87a783          	lw	a5,-856(a5) # 80020ca8 <__stack_top+0xfffdea48>
800040e0:	00078513          	mv	a0,a5
800040e4:	129020ef          	jal	ra,80006a0c <API_ClearPipeSlot>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:475
            HW_set_32bit_reg(NI_TX, DONE);  // releases the interruption
800040e8:	000057b7          	lui	a5,0x5
800040ec:	55578593          	addi	a1,a5,1365 # 5555 <HEAP_SIZE-0xaaab>
800040f0:	500007b7          	lui	a5,0x50000
800040f4:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
800040f8:	e59fc0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:476
            API_Try2Send();                 // tries to send another packet (if available)
800040fc:	c20ff0ef          	jal	ra,8000351c <API_Try2Send>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:477
            count++;
80004100:	fe842783          	lw	a5,-24(s0)
80004104:	00178793          	addi	a5,a5,1
80004108:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:479
        }
        if(HW_get_32bit_reg(NI_RX) == NI_STATUS_INTER || HW_get_32bit_reg(NI_RX) == NI_STATUS_WAITING) {
8000410c:	500007b7          	lui	a5,0x50000
80004110:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80004114:	e45fc0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
80004118:	00050713          	mv	a4,a0
8000411c:	000017b7          	lui	a5,0x1
80004120:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
80004124:	00f70e63          	beq	a4,a5,80004140 <API_NI_Handler+0xa4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:479 (discriminator 1)
80004128:	500007b7          	lui	a5,0x50000
8000412c:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80004130:	e29fc0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
80004134:	00050713          	mv	a4,a0
80004138:	02200793          	li	a5,34
8000413c:	60f71c63          	bne	a4,a5,80004754 <API_NI_Handler+0x6b8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:480
            prints("RX interruption catched\n"); // - ", NI_IRCount);
80004140:	800077b7          	lui	a5,0x80007
80004144:	46478513          	addi	a0,a5,1124 # 80007464 <__stack_top+0xfffc5204>
80004148:	cedfe0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:481
            service = incommingPacket.service;
8000414c:	800217b7          	lui	a5,0x80021
80004150:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
80004154:	0087a783          	lw	a5,8(a5)
80004158:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:482
            incommingPacket.service = SOLVED;
8000415c:	800217b7          	lui	a5,0x80021
80004160:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
80004164:	00010737          	lui	a4,0x10
80004168:	fff70713          	addi	a4,a4,-1 # ffff <HEAP_SIZE-0x1>
8000416c:	00e7a423          	sw	a4,8(a5)
80004170:	fe442703          	lw	a4,-28(s0)
80004174:	03500793          	li	a5,53
80004178:	2af70063          	beq	a4,a5,80004418 <API_NI_Handler+0x37c>
8000417c:	fe442703          	lw	a4,-28(s0)
80004180:	03500793          	li	a5,53
80004184:	04e7ea63          	bltu	a5,a4,800041d8 <API_NI_Handler+0x13c>
80004188:	fe442703          	lw	a4,-28(s0)
8000418c:	02100793          	li	a5,33
80004190:	52f70863          	beq	a4,a5,800046c0 <API_NI_Handler+0x624>
80004194:	fe442703          	lw	a4,-28(s0)
80004198:	02100793          	li	a5,33
8000419c:	02e7e063          	bltu	a5,a4,800041bc <API_NI_Handler+0x120>
800041a0:	fe442703          	lw	a4,-28(s0)
800041a4:	01000793          	li	a5,16
800041a8:	3cf70863          	beq	a4,a5,80004578 <API_NI_Handler+0x4dc>
800041ac:	fe442703          	lw	a4,-28(s0)
800041b0:	02000793          	li	a5,32
800041b4:	48f70863          	beq	a4,a5,80004644 <API_NI_Handler+0x5a8>
800041b8:	5580006f          	j	80004710 <API_NI_Handler+0x674>
800041bc:	fe442703          	lw	a4,-28(s0)
800041c0:	03000793          	li	a5,48
800041c4:	0af70463          	beq	a4,a5,8000426c <API_NI_Handler+0x1d0>
800041c8:	fe442703          	lw	a4,-28(s0)
800041cc:	03300793          	li	a5,51
800041d0:	20f70a63          	beq	a4,a5,800043e4 <API_NI_Handler+0x348>
800041d4:	53c0006f          	j	80004710 <API_NI_Handler+0x674>
800041d8:	fe442703          	lw	a4,-28(s0)
800041dc:	40100793          	li	a5,1025
800041e0:	2ef70663          	beq	a4,a5,800044cc <API_NI_Handler+0x430>
800041e4:	fe442703          	lw	a4,-28(s0)
800041e8:	40100793          	li	a5,1025
800041ec:	02e7e063          	bltu	a5,a4,8000420c <API_NI_Handler+0x170>
800041f0:	fe442703          	lw	a4,-28(s0)
800041f4:	20000793          	li	a5,512
800041f8:	02f70a63          	beq	a4,a5,8000422c <API_NI_Handler+0x190>
800041fc:	fe442703          	lw	a4,-28(s0)
80004200:	40000793          	li	a5,1024
80004204:	24f70463          	beq	a4,a5,8000444c <API_NI_Handler+0x3b0>
80004208:	5080006f          	j	80004710 <API_NI_Handler+0x674>
8000420c:	fe442703          	lw	a4,-28(s0)
80004210:	50000793          	li	a5,1280
80004214:	12f70e63          	beq	a4,a5,80004350 <API_NI_Handler+0x2b4>
80004218:	fe442703          	lw	a4,-28(s0)
8000421c:	000107b7          	lui	a5,0x10
80004220:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80004224:	50f70663          	beq	a4,a5,80004730 <API_NI_Handler+0x694>
80004228:	4e80006f          	j	80004710 <API_NI_Handler+0x674>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:486
            switch (service){
                case REPOSITORY_APP_INFO: // When the repository informs the GM that exist a new Application available:
                    //prints("REPOSITORY_APP_INFO\n");
                    API_AddApplication(incommingPacket.application_id,
8000422c:	800217b7          	lui	a5,0x80021
80004230:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
80004234:	00c7a703          	lw	a4,12(a5)
80004238:	800217b7          	lui	a5,0x80021
8000423c:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
80004240:	0107a583          	lw	a1,16(a5)
80004244:	800217b7          	lui	a5,0x80021
80004248:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
8000424c:	0147a603          	lw	a2,20(a5)
80004250:	800217b7          	lui	a5,0x80021
80004254:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
80004258:	0187a783          	lw	a5,24(a5)
8000425c:	00078693          	mv	a3,a5
80004260:	00070513          	mv	a0,a4
80004264:	72c000ef          	jal	ra,80004990 <API_AddApplication>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:490
                                    incommingPacket.aplication_period, 
                                    incommingPacket.application_executions, 
                                    incommingPacket.application_n_tasks);
                    break;
80004268:	4cc0006f          	j	80004734 <API_NI_Handler+0x698>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:493
                
                case TASK_ALLOCATION_SEND: // When the GM asks one Slave to allocate one task
                    prints("TASK_ALLOCATION_SEND\n");
8000426c:	800077b7          	lui	a5,0x80007
80004270:	48078513          	addi	a0,a5,1152 # 80007480 <__stack_top+0xfffc5220>
80004274:	bc1fe0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:494
                    aux = API_TaskAllocation(incommingPacket.task_id,
80004278:	800217b7          	lui	a5,0x80021
8000427c:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
80004280:	00c7a503          	lw	a0,12(a5)
80004284:	800217b7          	lui	a5,0x80021
80004288:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
8000428c:	0107a583          	lw	a1,16(a5)
80004290:	800217b7          	lui	a5,0x80021
80004294:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
80004298:	0147a603          	lw	a2,20(a5)
8000429c:	800217b7          	lui	a5,0x80021
800042a0:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
800042a4:	0187a683          	lw	a3,24(a5)
800042a8:	800217b7          	lui	a5,0x80021
800042ac:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
800042b0:	01c7a783          	lw	a5,28(a5)
800042b4:	00078713          	mv	a4,a5
800042b8:	5bd010ef          	jal	ra,80006074 <API_TaskAllocation>
800042bc:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:499
                                            incommingPacket.task_txt_size,
                                            incommingPacket.task_bss_size,
                                            incommingPacket.task_start_point,
                                            incommingPacket.task_app_id);
                    printsv("Task slot: ", aux);
800042c0:	fec42783          	lw	a5,-20(s0)
800042c4:	00078593          	mv	a1,a5
800042c8:	800077b7          	lui	a5,0x80007
800042cc:	49878513          	addi	a0,a5,1176 # 80007498 <__stack_top+0xfffc5238>
800042d0:	c11fe0ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:500
                    printsv("Task slot TaskAddr: ", TaskList[aux].taskAddr);
800042d4:	800227b7          	lui	a5,0x80022
800042d8:	fec42703          	lw	a4,-20(s0)
800042dc:	ec878693          	addi	a3,a5,-312 # 80021ec8 <__stack_top+0xfffdfc68>
800042e0:	00070793          	mv	a5,a4
800042e4:	00579793          	slli	a5,a5,0x5
800042e8:	00e787b3          	add	a5,a5,a4
800042ec:	00279793          	slli	a5,a5,0x2
800042f0:	00f687b3          	add	a5,a3,a5
800042f4:	0287a783          	lw	a5,40(a5)
800042f8:	00078593          	mv	a1,a5
800042fc:	800077b7          	lui	a5,0x80007
80004300:	4a478513          	addi	a0,a5,1188 # 800074a4 <__stack_top+0xfffc5244>
80004304:	bddfe0ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:502
                    // Informs the NI were to write the application
                    HW_set_32bit_reg(NI_RX, TaskList[aux].taskAddr);
80004308:	800227b7          	lui	a5,0x80022
8000430c:	fec42703          	lw	a4,-20(s0)
80004310:	ec878693          	addi	a3,a5,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80004314:	00070793          	mv	a5,a4
80004318:	00579793          	slli	a5,a5,0x5
8000431c:	00e787b3          	add	a5,a5,a4
80004320:	00279793          	slli	a5,a5,0x2
80004324:	00f687b3          	add	a5,a3,a5
80004328:	0287a783          	lw	a5,40(a5)
8000432c:	00078593          	mv	a1,a5
80004330:	500007b7          	lui	a5,0x50000
80004334:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80004338:	c19fc0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:503
                    incommingPacket.service = TASK_ALLOCATION_FINISHED;
8000433c:	800217b7          	lui	a5,0x80021
80004340:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
80004344:	03300713          	li	a4,51
80004348:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:504
                    break;
8000434c:	3e80006f          	j	80004734 <API_NI_Handler+0x698>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:507
                
                case TASK_FINISH:
                    printsvsv("FINISHED: Task ", incommingPacket.task_id, "from application ", incommingPacket.task_app_id);
80004350:	800217b7          	lui	a5,0x80021
80004354:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
80004358:	00c7a783          	lw	a5,12(a5)
8000435c:	00078713          	mv	a4,a5
80004360:	800217b7          	lui	a5,0x80021
80004364:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
80004368:	01c7a783          	lw	a5,28(a5)
8000436c:	00078693          	mv	a3,a5
80004370:	800077b7          	lui	a5,0x80007
80004374:	4bc78613          	addi	a2,a5,1212 # 800074bc <__stack_top+0xfffc525c>
80004378:	00070593          	mv	a1,a4
8000437c:	800077b7          	lui	a5,0x80007
80004380:	4d078513          	addi	a0,a5,1232 # 800074d0 <__stack_top+0xfffc5270>
80004384:	ba5fe0ef          	jal	ra,80002f28 <printsvsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:508
                    API_ClearTaskSlotFromTile(incommingPacket.task_dest_addr, incommingPacket.task_app_id, incommingPacket.task_id);
80004388:	800217b7          	lui	a5,0x80021
8000438c:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
80004390:	0307a703          	lw	a4,48(a5)
80004394:	800217b7          	lui	a5,0x80021
80004398:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
8000439c:	01c7a683          	lw	a3,28(a5)
800043a0:	800217b7          	lui	a5,0x80021
800043a4:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
800043a8:	00c7a783          	lw	a5,12(a5)
800043ac:	00078613          	mv	a2,a5
800043b0:	00068593          	mv	a1,a3
800043b4:	00070513          	mv	a0,a4
800043b8:	338010ef          	jal	ra,800056f0 <API_ClearTaskSlotFromTile>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:509
                    API_DealocateTask(incommingPacket.task_id, incommingPacket.task_app_id);
800043bc:	800217b7          	lui	a5,0x80021
800043c0:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
800043c4:	00c7a703          	lw	a4,12(a5)
800043c8:	800217b7          	lui	a5,0x80021
800043cc:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
800043d0:	01c7a783          	lw	a5,28(a5)
800043d4:	00078593          	mv	a1,a5
800043d8:	00070513          	mv	a0,a4
800043dc:	525000ef          	jal	ra,80005100 <API_DealocateTask>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:510
                    break;
800043e0:	3540006f          	j	80004734 <API_NI_Handler+0x698>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:513

                case TASK_ALLOCATION_FINISHED:
                    prints("TASK_ALLOCATION_FINISHED\n");
800043e4:	800077b7          	lui	a5,0x80007
800043e8:	4e078513          	addi	a0,a5,1248 # 800074e0 <__stack_top+0xfffc5280>
800043ec:	a49fe0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:514
                    API_AckTaskAllocation(incommingPacket.task_id, incommingPacket.task_app_id);
800043f0:	800217b7          	lui	a5,0x80021
800043f4:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
800043f8:	00c7a703          	lw	a4,12(a5)
800043fc:	800217b7          	lui	a5,0x80021
80004400:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
80004404:	01c7a783          	lw	a5,28(a5)
80004408:	00078593          	mv	a1,a5
8000440c:	00070513          	mv	a0,a4
80004410:	a3cff0ef          	jal	ra,8000364c <API_AckTaskAllocation>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:524
                        printsv("taskSize: ", TaskList[aux].taskSize);
                        printsv("taskAddr: ", TaskList[aux].taskAddr);
                        printsv("mainAddr: ", TaskList[aux].mainAddr);
                        printsv("taskHandler: ", (unsigned int)TaskList[aux].TaskHandler);
                    }*/
                    break;
80004414:	3200006f          	j	80004734 <API_NI_Handler+0x698>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:527

                case TASK_ALLOCATION_SUCCESS:
                    prints("TASK_ALLOCATION_SUCCESS\n");
80004418:	800077b7          	lui	a5,0x80007
8000441c:	4fc78513          	addi	a0,a5,1276 # 800074fc <__stack_top+0xfffc529c>
80004420:	a15fe0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:529
                    //printi(incommingPacket.task_id);
                    API_TaskAllocated(incommingPacket.task_id, incommingPacket.task_app_id);
80004424:	800217b7          	lui	a5,0x80021
80004428:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
8000442c:	00c7a703          	lw	a4,12(a5)
80004430:	800217b7          	lui	a5,0x80021
80004434:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
80004438:	01c7a783          	lw	a5,28(a5)
8000443c:	00078593          	mv	a1,a5
80004440:	00070513          	mv	a0,a4
80004444:	684010ef          	jal	ra,80005ac8 <API_TaskAllocated>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:530
                    break;
80004448:	2ec0006f          	j	80004734 <API_NI_Handler+0x698>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:533

                case TASK_START:
                    prints("Chegou um TASK_START!\n");
8000444c:	800077b7          	lui	a5,0x80007
80004450:	51878513          	addi	a0,a5,1304 # 80007518 <__stack_top+0xfffc52b8>
80004454:	9e1fe0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:534
                    aux = API_GetTaskSlot(incommingPacket.task_id, incommingPacket.task_app_id);
80004458:	800217b7          	lui	a5,0x80021
8000445c:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
80004460:	00c7a703          	lw	a4,12(a5)
80004464:	800217b7          	lui	a5,0x80021
80004468:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
8000446c:	01c7a783          	lw	a5,28(a5)
80004470:	00078593          	mv	a1,a5
80004474:	00070513          	mv	a0,a4
80004478:	6d5010ef          	jal	ra,8000634c <API_GetTaskSlot>
8000447c:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:536
                    // Informs the NI were to write the application
                    HW_set_32bit_reg(NI_RX, (unsigned int)&TaskList[aux].appNumTasks);
80004480:	fec42703          	lw	a4,-20(s0)
80004484:	00070793          	mv	a5,a4
80004488:	00579793          	slli	a5,a5,0x5
8000448c:	00e787b3          	add	a5,a5,a4
80004490:	00279793          	slli	a5,a5,0x2
80004494:	05078713          	addi	a4,a5,80
80004498:	800227b7          	lui	a5,0x80022
8000449c:	ec878793          	addi	a5,a5,-312 # 80021ec8 <__stack_top+0xfffdfc68>
800044a0:	00f707b3          	add	a5,a4,a5
800044a4:	00878793          	addi	a5,a5,8
800044a8:	00078593          	mv	a1,a5
800044ac:	500007b7          	lui	a5,0x50000
800044b0:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800044b4:	a9dfc0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:537
                    incommingPacket.service = TASK_RUN;
800044b8:	800217b7          	lui	a5,0x80021
800044bc:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
800044c0:	40100713          	li	a4,1025
800044c4:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:538
                    break;
800044c8:	26c0006f          	j	80004734 <API_NI_Handler+0x698>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:541
                
                case TASK_RUN:
                    prints("Chegou um TASK_RUN!\n");
800044cc:	800077b7          	lui	a5,0x80007
800044d0:	53078513          	addi	a0,a5,1328 # 80007530 <__stack_top+0xfffc52d0>
800044d4:	961fe0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:542
                    aux = API_GetTaskSlot(incommingPacket.task_id, incommingPacket.task_app_id);
800044d8:	800217b7          	lui	a5,0x80021
800044dc:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
800044e0:	00c7a703          	lw	a4,12(a5)
800044e4:	800217b7          	lui	a5,0x80021
800044e8:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
800044ec:	01c7a783          	lw	a5,28(a5)
800044f0:	00078593          	mv	a1,a5
800044f4:	00070513          	mv	a0,a4
800044f8:	655010ef          	jal	ra,8000634c <API_GetTaskSlot>
800044fc:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:543
                    TaskList[aux].status = TASK_SLOT_READY;
80004500:	800226b7          	lui	a3,0x80022
80004504:	fec42703          	lw	a4,-20(s0)
80004508:	00070793          	mv	a5,a4
8000450c:	00579793          	slli	a5,a5,0x5
80004510:	00e787b3          	add	a5,a5,a4
80004514:	00279793          	slli	a5,a5,0x2
80004518:	ec868713          	addi	a4,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
8000451c:	00e787b3          	add	a5,a5,a4
80004520:	00300713          	li	a4,3
80004524:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:544
                    printsvsv("Enabling Task: ", incommingPacket.task_id, "from app: ", incommingPacket.task_app_id);
80004528:	800217b7          	lui	a5,0x80021
8000452c:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
80004530:	00c7a783          	lw	a5,12(a5)
80004534:	00078713          	mv	a4,a5
80004538:	800217b7          	lui	a5,0x80021
8000453c:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
80004540:	01c7a783          	lw	a5,28(a5)
80004544:	00078693          	mv	a3,a5
80004548:	800077b7          	lui	a5,0x80007
8000454c:	54878613          	addi	a2,a5,1352 # 80007548 <__stack_top+0xfffc52e8>
80004550:	00070593          	mv	a1,a4
80004554:	800077b7          	lui	a5,0x80007
80004558:	55478513          	addi	a0,a5,1364 # 80007554 <__stack_top+0xfffc52f4>
8000455c:	9cdfe0ef          	jal	ra,80002f28 <printsvsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:545
                    printsv("Slot: ", aux);
80004560:	fec42783          	lw	a5,-20(s0)
80004564:	00078593          	mv	a1,a5
80004568:	800077b7          	lui	a5,0x80007
8000456c:	56478513          	addi	a0,a5,1380 # 80007564 <__stack_top+0xfffc5304>
80004570:	971fe0ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:546
                    break;
80004574:	1c00006f          	j	80004734 <API_NI_Handler+0x698>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:550

                case MESSAGE_REQUEST:
                    // check the pipe
                    printsvsv("Chegou um message request! App: ", incommingPacket.task_app_id, "Task: ", incommingPacket.task_id);
80004578:	800217b7          	lui	a5,0x80021
8000457c:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
80004580:	01c7a783          	lw	a5,28(a5)
80004584:	00078713          	mv	a4,a5
80004588:	800217b7          	lui	a5,0x80021
8000458c:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
80004590:	00c7a783          	lw	a5,12(a5)
80004594:	00078693          	mv	a3,a5
80004598:	800077b7          	lui	a5,0x80007
8000459c:	56c78613          	addi	a2,a5,1388 # 8000756c <__stack_top+0xfffc530c>
800045a0:	00070593          	mv	a1,a4
800045a4:	800077b7          	lui	a5,0x80007
800045a8:	57478513          	addi	a0,a5,1396 # 80007574 <__stack_top+0xfffc5314>
800045ac:	97dfe0ef          	jal	ra,80002f28 <printsvsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:551
                    aux = API_CheckMessagePipe(incommingPacket.task_id, incommingPacket.task_app_id);
800045b0:	800217b7          	lui	a5,0x80021
800045b4:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
800045b8:	00c7a703          	lw	a4,12(a5)
800045bc:	800217b7          	lui	a5,0x80021
800045c0:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
800045c4:	01c7a783          	lw	a5,28(a5)
800045c8:	00078593          	mv	a1,a5
800045cc:	00070513          	mv	a0,a4
800045d0:	91dff0ef          	jal	ra,80003eec <API_CheckMessagePipe>
800045d4:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:552
                    if (aux == ERRO){
800045d8:	fec42703          	lw	a4,-20(s0)
800045dc:	fff00793          	li	a5,-1
800045e0:	04f71463          	bne	a4,a5,80004628 <API_NI_Handler+0x58c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:554
                        // register an messagerequest
                        prints("Mensagem não encontrada, adicionando ao PendingReq!\n");
800045e4:	800077b7          	lui	a5,0x80007
800045e8:	59878513          	addi	a0,a5,1432 # 80007598 <__stack_top+0xfffc5338>
800045ec:	849fe0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:555
                        API_AddPendingReq(incommingPacket.task_id, incommingPacket.task_app_id, incommingPacket.producer_task_id);
800045f0:	800217b7          	lui	a5,0x80021
800045f4:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
800045f8:	00c7a703          	lw	a4,12(a5)
800045fc:	800217b7          	lui	a5,0x80021
80004600:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
80004604:	01c7a683          	lw	a3,28(a5)
80004608:	800217b7          	lui	a5,0x80021
8000460c:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
80004610:	0147a783          	lw	a5,20(a5)
80004614:	00078613          	mv	a2,a5
80004618:	00068593          	mv	a1,a3
8000461c:	00070513          	mv	a0,a4
80004620:	a09ff0ef          	jal	ra,80004028 <API_AddPendingReq>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:561
                    } else {
                        prints("Mensagem encontrada no pipe!\n");
                        API_PushSendQueue(MESSAGE, aux);
                        // API_Try2Send();
                    }
                    break;
80004624:	1100006f          	j	80004734 <API_NI_Handler+0x698>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:557
                        prints("Mensagem encontrada no pipe!\n");
80004628:	800077b7          	lui	a5,0x80007
8000462c:	5d078513          	addi	a0,a5,1488 # 800075d0 <__stack_top+0xfffc5370>
80004630:	805fe0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:558
                        API_PushSendQueue(MESSAGE, aux);
80004634:	fec42583          	lw	a1,-20(s0)
80004638:	20200537          	lui	a0,0x20200
8000463c:	db5fe0ef          	jal	ra,800033f0 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:561
                    break;
80004640:	0f40006f          	j	80004734 <API_NI_Handler+0x698>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:564
                
                case MESSAGE_DELIVERY:
                    prints("Tem uma mensagem chegando...\n");
80004644:	800077b7          	lui	a5,0x80007
80004648:	5f078513          	addi	a0,a5,1520 # 800075f0 <__stack_top+0xfffc5390>
8000464c:	fe8fe0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:565
                    aux = API_GetTaskSlot(incommingPacket.destination_task, incommingPacket.application_id);
80004650:	800217b7          	lui	a5,0x80021
80004654:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
80004658:	0147a703          	lw	a4,20(a5)
8000465c:	800217b7          	lui	a5,0x80021
80004660:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
80004664:	00c7a783          	lw	a5,12(a5)
80004668:	00078593          	mv	a1,a5
8000466c:	00070513          	mv	a0,a4
80004670:	4dd010ef          	jal	ra,8000634c <API_GetTaskSlot>
80004674:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:567
                    //printsv("MESSAGE_DELIVERY addr: ", TaskList[aux].MsgToReceive);
                    HW_set_32bit_reg(NI_RX, TaskList[aux].MsgToReceive);
80004678:	800226b7          	lui	a3,0x80022
8000467c:	fec42703          	lw	a4,-20(s0)
80004680:	00070793          	mv	a5,a4
80004684:	00579793          	slli	a5,a5,0x5
80004688:	00e787b3          	add	a5,a5,a4
8000468c:	00279793          	slli	a5,a5,0x2
80004690:	ec868713          	addi	a4,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80004694:	00e787b3          	add	a5,a5,a4
80004698:	0207a783          	lw	a5,32(a5)
8000469c:	00078593          	mv	a1,a5
800046a0:	500007b7          	lui	a5,0x50000
800046a4:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800046a8:	8a9fc0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:568
                    incommingPacket.service = MESSAGE_DELIVERY_FINISH;
800046ac:	800217b7          	lui	a5,0x80021
800046b0:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
800046b4:	02100713          	li	a4,33
800046b8:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:570
                    //prints("done...\n----------\n");
                    break;
800046bc:	0780006f          	j	80004734 <API_NI_Handler+0x698>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:574
                
                case MESSAGE_DELIVERY_FINISH:
                    //prints("Terminou de entregar a mensagem!!\n");
                    aux = API_GetTaskSlot(incommingPacket.destination_task, incommingPacket.application_id);
800046c0:	800217b7          	lui	a5,0x80021
800046c4:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
800046c8:	0147a703          	lw	a4,20(a5)
800046cc:	800217b7          	lui	a5,0x80021
800046d0:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
800046d4:	00c7a783          	lw	a5,12(a5)
800046d8:	00078593          	mv	a1,a5
800046dc:	00070513          	mv	a0,a4
800046e0:	46d010ef          	jal	ra,8000634c <API_GetTaskSlot>
800046e4:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:575
                    TaskList[aux].waitingMsg = FALSE;
800046e8:	800227b7          	lui	a5,0x80022
800046ec:	fec42703          	lw	a4,-20(s0)
800046f0:	ec878693          	addi	a3,a5,-312 # 80021ec8 <__stack_top+0xfffdfc68>
800046f4:	00070793          	mv	a5,a4
800046f8:	00579793          	slli	a5,a5,0x5
800046fc:	00e787b3          	add	a5,a5,a4
80004700:	00279793          	slli	a5,a5,0x2
80004704:	00f687b3          	add	a5,a3,a5
80004708:	0007ae23          	sw	zero,28(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:576
                    break;
8000470c:	0280006f          	j	80004734 <API_NI_Handler+0x698>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:582

                case SOLVED:
                    break;
                    
                default:
                    printsv("ERROR External_2_IRQHandler Unknown-Service ", incommingPacket.service);
80004710:	800217b7          	lui	a5,0x80021
80004714:	da078793          	addi	a5,a5,-608 # 80020da0 <__stack_top+0xfffdeb40>
80004718:	0087a783          	lw	a5,8(a5)
8000471c:	00078593          	mv	a1,a5
80004720:	800077b7          	lui	a5,0x80007
80004724:	61078513          	addi	a0,a5,1552 # 80007610 <__stack_top+0xfffc53b0>
80004728:	fb8fe0ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:583
                    break;
8000472c:	0080006f          	j	80004734 <API_NI_Handler+0x698>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:579
                    break;
80004730:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:585
            }
            HW_set_32bit_reg(NI_RX, DONE);
80004734:	000057b7          	lui	a5,0x5
80004738:	55578593          	addi	a1,a5,1365 # 5555 <HEAP_SIZE-0xaaab>
8000473c:	500007b7          	lui	a5,0x50000
80004740:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80004744:	80dfc0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:586
            count++;
80004748:	fe842783          	lw	a5,-24(s0)
8000474c:	00178793          	addi	a5,a5,1
80004750:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:588
        }
    }while(HW_get_32bit_reg(NI_RX) == NI_STATUS_INTER || HW_get_32bit_reg(NI_RX) == NI_STATUS_WAITING || HW_get_32bit_reg(NI_TX) == NI_STATUS_INTER);
80004754:	500007b7          	lui	a5,0x50000
80004758:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
8000475c:	ffcfc0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
80004760:	00050713          	mv	a4,a0
80004764:	000017b7          	lui	a5,0x1
80004768:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
8000476c:	94f702e3          	beq	a4,a5,800040b0 <API_NI_Handler+0x14>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:588 (discriminator 1)
80004770:	500007b7          	lui	a5,0x50000
80004774:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80004778:	fe0fc0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
8000477c:	00050713          	mv	a4,a0
80004780:	02200793          	li	a5,34
80004784:	92f706e3          	beq	a4,a5,800040b0 <API_NI_Handler+0x14>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:588 (discriminator 2)
80004788:	500007b7          	lui	a5,0x50000
8000478c:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80004790:	fc8fc0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
80004794:	00050713          	mv	a4,a0
80004798:	000017b7          	lui	a5,0x1
8000479c:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
800047a0:	90f708e3          	beq	a4,a5,800040b0 <API_NI_Handler+0x14>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:590
    
    for(aux = 0; aux < NUM_MAX_TASKS; aux++){
800047a4:	fe042623          	sw	zero,-20(s0)
800047a8:	0b00006f          	j	80004858 <API_NI_Handler+0x7bc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:591
        if(TaskList[aux].status == TASK_SLOT_READY){
800047ac:	800226b7          	lui	a3,0x80022
800047b0:	fec42703          	lw	a4,-20(s0)
800047b4:	00070793          	mv	a5,a4
800047b8:	00579793          	slli	a5,a5,0x5
800047bc:	00e787b3          	add	a5,a5,a4
800047c0:	00279793          	slli	a5,a5,0x2
800047c4:	ec868713          	addi	a4,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
800047c8:	00e787b3          	add	a5,a5,a4
800047cc:	0007a703          	lw	a4,0(a5)
800047d0:	00300793          	li	a5,3
800047d4:	06f71c63          	bne	a4,a5,8000484c <API_NI_Handler+0x7b0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:592
            printsvsv("Starting Task ", TaskList[aux].TaskID, " from app ", TaskList[aux].AppID);
800047d8:	800226b7          	lui	a3,0x80022
800047dc:	fec42703          	lw	a4,-20(s0)
800047e0:	00070793          	mv	a5,a4
800047e4:	00579793          	slli	a5,a5,0x5
800047e8:	00e787b3          	add	a5,a5,a4
800047ec:	00279793          	slli	a5,a5,0x2
800047f0:	ec868713          	addi	a4,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
800047f4:	00e787b3          	add	a5,a5,a4
800047f8:	0107a783          	lw	a5,16(a5)
800047fc:	00078593          	mv	a1,a5
80004800:	800227b7          	lui	a5,0x80022
80004804:	fec42703          	lw	a4,-20(s0)
80004808:	ec878693          	addi	a3,a5,-312 # 80021ec8 <__stack_top+0xfffdfc68>
8000480c:	00070793          	mv	a5,a4
80004810:	00579793          	slli	a5,a5,0x5
80004814:	00e787b3          	add	a5,a5,a4
80004818:	00279793          	slli	a5,a5,0x2
8000481c:	00f687b3          	add	a5,a3,a5
80004820:	0147a783          	lw	a5,20(a5)
80004824:	00078693          	mv	a3,a5
80004828:	800077b7          	lui	a5,0x80007
8000482c:	64078613          	addi	a2,a5,1600 # 80007640 <__stack_top+0xfffc53e0>
80004830:	800077b7          	lui	a5,0x80007
80004834:	64c78513          	addi	a0,a5,1612 # 8000764c <__stack_top+0xfffc53ec>
80004838:	ef0fe0ef          	jal	ra,80002f28 <printsvsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:593
            API_setFreqScale(1000);
8000483c:	3e800513          	li	a0,1000
80004840:	33c020ef          	jal	ra,80006b7c <API_setFreqScale>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:594
            API_TaskStart(aux);
80004844:	fec42503          	lw	a0,-20(s0)
80004848:	3e9010ef          	jal	ra,80006430 <API_TaskStart>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:590 (discriminator 2)
    for(aux = 0; aux < NUM_MAX_TASKS; aux++){
8000484c:	fec42783          	lw	a5,-20(s0)
80004850:	00178793          	addi	a5,a5,1
80004854:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:590 (discriminator 1)
80004858:	fec42703          	lw	a4,-20(s0)
8000485c:	00500793          	li	a5,5
80004860:	f4e7f6e3          	bleu	a4,a5,800047ac <API_NI_Handler+0x710>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:599
        }
    }
    //printExecutedInstructions();

    return count;
80004864:	fe842783          	lw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/chronos.c:600
80004868:	00078513          	mv	a0,a5
8000486c:	01c12083          	lw	ra,28(sp)
80004870:	01812403          	lw	s0,24(sp)
80004874:	02010113          	addi	sp,sp,32
80004878:	00008067          	ret

8000487c <API_RepositoryWakeUp>:
API_RepositoryWakeUp():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:10
#include "packet.h"
#include "services.h"

////////////////////////////////////////////////////////////
// Informs the Repository that the GLOBALMASTER is ready to receive the application info
void API_RepositoryWakeUp(){
8000487c:	fe010113          	addi	sp,sp,-32
80004880:	00112e23          	sw	ra,28(sp)
80004884:	00812c23          	sw	s0,24(sp)
80004888:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:13
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
8000488c:	0e0020ef          	jal	ra,8000696c <API_GetServiceSlot>
80004890:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:14
        if(mySlot == PIPE_FULL){
80004894:	fec42703          	lw	a4,-20(s0)
80004898:	fdfe07b7          	lui	a5,0xfdfe0
8000489c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9db9d>
800048a0:	00f71463          	bne	a4,a5,800048a8 <API_RepositoryWakeUp+0x2c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:16
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
800048a4:	ff8ff0ef          	jal	ra,8000409c <API_NI_Handler>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:18
        }
    }while(mySlot == PIPE_FULL);
800048a8:	fec42703          	lw	a4,-20(s0)
800048ac:	fdfe07b7          	lui	a5,0xfdfe0
800048b0:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9db9d>
800048b4:	fcf70ce3          	beq	a4,a5,8000488c <API_RepositoryWakeUp+0x10>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:21
    //printsv("I got a free service slot!! -> ", mySlot);

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
800048b8:	800217b7          	lui	a5,0x80021
800048bc:	fec42703          	lw	a4,-20(s0)
800048c0:	cac78693          	addi	a3,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
800048c4:	00070793          	mv	a5,a4
800048c8:	00479793          	slli	a5,a5,0x4
800048cc:	40e787b3          	sub	a5,a5,a4
800048d0:	00279793          	slli	a5,a5,0x2
800048d4:	00f687b3          	add	a5,a3,a5
800048d8:	feff0737          	lui	a4,0xfeff0
800048dc:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efadc9e>
800048e0:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:23

    ServicePipe[mySlot].header.header       = makeAddress(0, 0) | PERIPH_SOUTH;
800048e4:	00000593          	li	a1,0
800048e8:	00000513          	li	a0,0
800048ec:	ac5fe0ef          	jal	ra,800033b0 <makeAddress>
800048f0:	00050713          	mv	a4,a0
800048f4:	000407b7          	lui	a5,0x40
800048f8:	00f766b3          	or	a3,a4,a5
800048fc:	800217b7          	lui	a5,0x80021
80004900:	fec42703          	lw	a4,-20(s0)
80004904:	cac78613          	addi	a2,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
80004908:	00070793          	mv	a5,a4
8000490c:	00479793          	slli	a5,a5,0x4
80004910:	40e787b3          	sub	a5,a5,a4
80004914:	00279793          	slli	a5,a5,0x2
80004918:	00f607b3          	add	a5,a2,a5
8000491c:	00d7a423          	sw	a3,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:24
    ServicePipe[mySlot].header.payload_size = PKT_SERVICE_SIZE;
80004920:	800217b7          	lui	a5,0x80021
80004924:	fec42703          	lw	a4,-20(s0)
80004928:	cac78693          	addi	a3,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
8000492c:	00070793          	mv	a5,a4
80004930:	00479793          	slli	a5,a5,0x4
80004934:	40e787b3          	sub	a5,a5,a4
80004938:	00279793          	slli	a5,a5,0x2
8000493c:	00f687b3          	add	a5,a3,a5
80004940:	00b00713          	li	a4,11
80004944:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:25
    ServicePipe[mySlot].header.service      = REPOSITORY_WAKEUP;
80004948:	800217b7          	lui	a5,0x80021
8000494c:	fec42703          	lw	a4,-20(s0)
80004950:	cac78693          	addi	a3,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
80004954:	00070793          	mv	a5,a4
80004958:	00479793          	slli	a5,a5,0x4
8000495c:	40e787b3          	sub	a5,a5,a4
80004960:	00279793          	slli	a5,a5,0x2
80004964:	00f687b3          	add	a5,a3,a5
80004968:	10000713          	li	a4,256
8000496c:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:27

    API_PushSendQueue(SERVICE, mySlot);
80004970:	fec42583          	lw	a1,-20(s0)
80004974:	10100537          	lui	a0,0x10100
80004978:	a79fe0ef          	jal	ra,800033f0 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:28
    return;    
8000497c:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:29
}
80004980:	01c12083          	lw	ra,28(sp)
80004984:	01812403          	lw	s0,24(sp)
80004988:	02010113          	addi	sp,sp,32
8000498c:	00008067          	ret

80004990 <API_AddApplication>:
API_AddApplication():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:33

////////////////////////////////////////////////////////////
// Add one Application in the Execution Queue
void API_AddApplication(unsigned int appID, unsigned int appPeriod, unsigned int appExec, unsigned int appNTasks){
80004990:	fd010113          	addi	sp,sp,-48
80004994:	02112623          	sw	ra,44(sp)
80004998:	02812423          	sw	s0,40(sp)
8000499c:	03010413          	addi	s0,sp,48
800049a0:	fca42e23          	sw	a0,-36(s0)
800049a4:	fcb42c23          	sw	a1,-40(s0)
800049a8:	fcc42a23          	sw	a2,-44(s0)
800049ac:	fcd42823          	sw	a3,-48(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:34
    int slot = API_GetApplicationFreeSlot();
800049b0:	1c4000ef          	jal	ra,80004b74 <API_GetApplicationFreeSlot>
800049b4:	00050793          	mv	a5,a0
800049b8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:35
    applications[slot].occupied = TRUE;
800049bc:	800216b7          	lui	a3,0x80021
800049c0:	fec42703          	lw	a4,-20(s0)
800049c4:	00070793          	mv	a5,a4
800049c8:	00279793          	slli	a5,a5,0x2
800049cc:	00e787b3          	add	a5,a5,a4
800049d0:	00579793          	slli	a5,a5,0x5
800049d4:	74868713          	addi	a4,a3,1864 # 80021748 <__stack_top+0xfffdf4e8>
800049d8:	00e787b3          	add	a5,a5,a4
800049dc:	00100713          	li	a4,1
800049e0:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:36
    applications[slot].appID = appID;
800049e4:	800217b7          	lui	a5,0x80021
800049e8:	fec42703          	lw	a4,-20(s0)
800049ec:	74878693          	addi	a3,a5,1864 # 80021748 <__stack_top+0xfffdf4e8>
800049f0:	00070793          	mv	a5,a4
800049f4:	00279793          	slli	a5,a5,0x2
800049f8:	00e787b3          	add	a5,a5,a4
800049fc:	00579793          	slli	a5,a5,0x5
80004a00:	00f687b3          	add	a5,a3,a5
80004a04:	fdc42703          	lw	a4,-36(s0)
80004a08:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:37
    applications[slot].appPeriod = appPeriod;
80004a0c:	800217b7          	lui	a5,0x80021
80004a10:	fec42703          	lw	a4,-20(s0)
80004a14:	74878693          	addi	a3,a5,1864 # 80021748 <__stack_top+0xfffdf4e8>
80004a18:	00070793          	mv	a5,a4
80004a1c:	00279793          	slli	a5,a5,0x2
80004a20:	00e787b3          	add	a5,a5,a4
80004a24:	00579793          	slli	a5,a5,0x5
80004a28:	00f687b3          	add	a5,a3,a5
80004a2c:	fd842703          	lw	a4,-40(s0)
80004a30:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:38
    applications[slot].appExec = appExec;
80004a34:	800217b7          	lui	a5,0x80021
80004a38:	fec42703          	lw	a4,-20(s0)
80004a3c:	74878693          	addi	a3,a5,1864 # 80021748 <__stack_top+0xfffdf4e8>
80004a40:	00070793          	mv	a5,a4
80004a44:	00279793          	slli	a5,a5,0x2
80004a48:	00e787b3          	add	a5,a5,a4
80004a4c:	00579793          	slli	a5,a5,0x5
80004a50:	00f687b3          	add	a5,a3,a5
80004a54:	fd442703          	lw	a4,-44(s0)
80004a58:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:39
    applications[slot].numTasks = appNTasks;
80004a5c:	800216b7          	lui	a3,0x80021
80004a60:	fec42703          	lw	a4,-20(s0)
80004a64:	00070793          	mv	a5,a4
80004a68:	00279793          	slli	a5,a5,0x2
80004a6c:	00e787b3          	add	a5,a5,a4
80004a70:	00579793          	slli	a5,a5,0x5
80004a74:	74868713          	addi	a4,a3,1864 # 80021748 <__stack_top+0xfffdf4e8>
80004a78:	00e787b3          	add	a5,a5,a4
80004a7c:	fd042703          	lw	a4,-48(s0)
80004a80:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:40
    applications[slot].nextRun = xTaskGetTickCount() + appPeriod;
80004a84:	9e5fd0ef          	jal	ra,80002468 <xTaskGetTickCount>
80004a88:	00050713          	mv	a4,a0
80004a8c:	fd842783          	lw	a5,-40(s0)
80004a90:	00f706b3          	add	a3,a4,a5
80004a94:	800217b7          	lui	a5,0x80021
80004a98:	fec42703          	lw	a4,-20(s0)
80004a9c:	74878613          	addi	a2,a5,1864 # 80021748 <__stack_top+0xfffdf4e8>
80004aa0:	00070793          	mv	a5,a4
80004aa4:	00279793          	slli	a5,a5,0x2
80004aa8:	00e787b3          	add	a5,a5,a4
80004aac:	00579793          	slli	a5,a5,0x5
80004ab0:	00f607b3          	add	a5,a2,a5
80004ab4:	08d7a623          	sw	a3,140(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:41
    applications[slot].executed = 0;
80004ab8:	800216b7          	lui	a3,0x80021
80004abc:	fec42703          	lw	a4,-20(s0)
80004ac0:	00070793          	mv	a5,a4
80004ac4:	00279793          	slli	a5,a5,0x2
80004ac8:	00e787b3          	add	a5,a5,a4
80004acc:	00579793          	slli	a5,a5,0x5
80004ad0:	74868713          	addi	a4,a3,1864 # 80021748 <__stack_top+0xfffdf4e8>
80004ad4:	00e787b3          	add	a5,a5,a4
80004ad8:	0807a823          	sw	zero,144(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:42
    applications[slot].lastStart = -1;
80004adc:	800217b7          	lui	a5,0x80021
80004ae0:	fec42703          	lw	a4,-20(s0)
80004ae4:	74878693          	addi	a3,a5,1864 # 80021748 <__stack_top+0xfffdf4e8>
80004ae8:	00070793          	mv	a5,a4
80004aec:	00279793          	slli	a5,a5,0x2
80004af0:	00e787b3          	add	a5,a5,a4
80004af4:	00579793          	slli	a5,a5,0x5
80004af8:	00f687b3          	add	a5,a3,a5
80004afc:	fff00713          	li	a4,-1
80004b00:	08e7aa23          	sw	a4,148(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:43
    applications[slot].finishedTasks = 0;
80004b04:	800217b7          	lui	a5,0x80021
80004b08:	fec42703          	lw	a4,-20(s0)
80004b0c:	74878693          	addi	a3,a5,1864 # 80021748 <__stack_top+0xfffdf4e8>
80004b10:	00070793          	mv	a5,a4
80004b14:	00279793          	slli	a5,a5,0x2
80004b18:	00e787b3          	add	a5,a5,a4
80004b1c:	00579793          	slli	a5,a5,0x5
80004b20:	00f687b3          	add	a5,a3,a5
80004b24:	0807ac23          	sw	zero,152(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:44
    applications[slot].lastFinish = 0;
80004b28:	800217b7          	lui	a5,0x80021
80004b2c:	fec42703          	lw	a4,-20(s0)
80004b30:	74878693          	addi	a3,a5,1864 # 80021748 <__stack_top+0xfffdf4e8>
80004b34:	00070793          	mv	a5,a4
80004b38:	00279793          	slli	a5,a5,0x2
80004b3c:	00e787b3          	add	a5,a5,a4
80004b40:	00579793          	slli	a5,a5,0x5
80004b44:	00f687b3          	add	a5,a3,a5
80004b48:	0807ae23          	sw	zero,156(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:45
    printsv("New application registered - ID: ", appID);
80004b4c:	fdc42783          	lw	a5,-36(s0)
80004b50:	00078593          	mv	a1,a5
80004b54:	800077b7          	lui	a5,0x80007
80004b58:	65c78513          	addi	a0,a5,1628 # 8000765c <__stack_top+0xfffc53fc>
80004b5c:	b84fe0ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:46
    return;
80004b60:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:47
}
80004b64:	02c12083          	lw	ra,44(sp)
80004b68:	02812403          	lw	s0,40(sp)
80004b6c:	03010113          	addi	sp,sp,48
80004b70:	00008067          	ret

80004b74 <API_GetApplicationFreeSlot>:
API_GetApplicationFreeSlot():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:65
}


////////////////////////////////////////////////////////////
// Gets an application slot that is free
unsigned int API_GetApplicationFreeSlot(){
80004b74:	fe010113          	addi	sp,sp,-32
80004b78:	00112e23          	sw	ra,28(sp)
80004b7c:	00812c23          	sw	s0,24(sp)
80004b80:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:67
    int i;
    for (i = 0; i < NUM_MAX_APPS; i++){
80004b84:	fe042623          	sw	zero,-20(s0)
80004b88:	0400006f          	j	80004bc8 <API_GetApplicationFreeSlot+0x54>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:68
        if (applications[i].occupied == FALSE){
80004b8c:	800216b7          	lui	a3,0x80021
80004b90:	fec42703          	lw	a4,-20(s0)
80004b94:	00070793          	mv	a5,a4
80004b98:	00279793          	slli	a5,a5,0x2
80004b9c:	00e787b3          	add	a5,a5,a4
80004ba0:	00579793          	slli	a5,a5,0x5
80004ba4:	74868713          	addi	a4,a3,1864 # 80021748 <__stack_top+0xfffdf4e8>
80004ba8:	00e787b3          	add	a5,a5,a4
80004bac:	0007a783          	lw	a5,0(a5)
80004bb0:	00079663          	bnez	a5,80004bbc <API_GetApplicationFreeSlot+0x48>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:69
            return i;
80004bb4:	fec42783          	lw	a5,-20(s0)
80004bb8:	02c0006f          	j	80004be4 <API_GetApplicationFreeSlot+0x70>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:67 (discriminator 2)
    for (i = 0; i < NUM_MAX_APPS; i++){
80004bbc:	fec42783          	lw	a5,-20(s0)
80004bc0:	00178793          	addi	a5,a5,1
80004bc4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:67 (discriminator 1)
80004bc8:	fec42703          	lw	a4,-20(s0)
80004bcc:	00b00793          	li	a5,11
80004bd0:	fae7dee3          	ble	a4,a5,80004b8c <API_GetApplicationFreeSlot+0x18>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:72
        }
    }
    prints("returning erro4\n");
80004bd4:	800077b7          	lui	a5,0x80007
80004bd8:	69478513          	addi	a0,a5,1684 # 80007694 <__stack_top+0xfffc5434>
80004bdc:	a58fe0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:73
    return ERRO;
80004be0:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:74
}
80004be4:	00078513          	mv	a0,a5
80004be8:	01c12083          	lw	ra,28(sp)
80004bec:	01812403          	lw	s0,24(sp)
80004bf0:	02010113          	addi	sp,sp,32
80004bf4:	00008067          	ret

80004bf8 <API_ApplicationsReset>:
API_ApplicationsReset():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:78

////////////////////////////////////////////////////////////
// Reset applications vector
void API_ApplicationsReset(){
80004bf8:	fe010113          	addi	sp,sp,-32
80004bfc:	00812e23          	sw	s0,28(sp)
80004c00:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:80
    int i;
    for (i = 0; i < NUM_MAX_APPS; i++){
80004c04:	fe042623          	sw	zero,-20(s0)
80004c08:	0340006f          	j	80004c3c <API_ApplicationsReset+0x44>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:81 (discriminator 3)
        applications[i].occupied = FALSE;
80004c0c:	800216b7          	lui	a3,0x80021
80004c10:	fec42703          	lw	a4,-20(s0)
80004c14:	00070793          	mv	a5,a4
80004c18:	00279793          	slli	a5,a5,0x2
80004c1c:	00e787b3          	add	a5,a5,a4
80004c20:	00579793          	slli	a5,a5,0x5
80004c24:	74868713          	addi	a4,a3,1864 # 80021748 <__stack_top+0xfffdf4e8>
80004c28:	00e787b3          	add	a5,a5,a4
80004c2c:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:80 (discriminator 3)
    for (i = 0; i < NUM_MAX_APPS; i++){
80004c30:	fec42783          	lw	a5,-20(s0)
80004c34:	00178793          	addi	a5,a5,1
80004c38:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:80 (discriminator 1)
80004c3c:	fec42703          	lw	a4,-20(s0)
80004c40:	00b00793          	li	a5,11
80004c44:	fce7d4e3          	ble	a4,a5,80004c0c <API_ApplicationsReset+0x14>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:83
    }
    return;
80004c48:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:84
}
80004c4c:	01c12403          	lw	s0,28(sp)
80004c50:	02010113          	addi	sp,sp,32
80004c54:	00008067          	ret

80004c58 <API_TilesReset>:
API_TilesReset():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:88

////////////////////////////////////////////////////////////
// Initialize the Tiles Info
void API_TilesReset(){
80004c58:	fe010113          	addi	sp,sp,-32
80004c5c:	00812e23          	sw	s0,28(sp)
80004c60:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90
    int i, m, n;
    for (m = 0; m < DIM_X; m++){
80004c64:	fe042623          	sw	zero,-20(s0)
80004c68:	0fc0006f          	j	80004d64 <API_TilesReset+0x10c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:91
        for (n = 0; n < DIM_Y; n++){
80004c6c:	fe042423          	sw	zero,-24(s0)
80004c70:	0dc0006f          	j	80004d4c <API_TilesReset+0xf4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:92 (discriminator 3)
            Tiles[m][n].temperature = 273;
80004c74:	80022637          	lui	a2,0x80022
80004c78:	fe842783          	lw	a5,-24(s0)
80004c7c:	fec42683          	lw	a3,-20(s0)
80004c80:	00078713          	mv	a4,a5
80004c84:	00171713          	slli	a4,a4,0x1
80004c88:	00f70733          	add	a4,a4,a5
80004c8c:	00271793          	slli	a5,a4,0x2
80004c90:	00078713          	mv	a4,a5
80004c94:	00068793          	mv	a5,a3
80004c98:	00379793          	slli	a5,a5,0x3
80004c9c:	00d787b3          	add	a5,a5,a3
80004ca0:	00279793          	slli	a5,a5,0x2
80004ca4:	00f70733          	add	a4,a4,a5
80004ca8:	1e460793          	addi	a5,a2,484 # 800221e4 <__stack_top+0xfffdff84>
80004cac:	00f707b3          	add	a5,a4,a5
80004cb0:	11100713          	li	a4,273
80004cb4:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:93 (discriminator 3)
            Tiles[m][n].frequency = 1000;
80004cb8:	80022737          	lui	a4,0x80022
80004cbc:	fe842783          	lw	a5,-24(s0)
80004cc0:	fec42683          	lw	a3,-20(s0)
80004cc4:	1e470613          	addi	a2,a4,484 # 800221e4 <__stack_top+0xfffdff84>
80004cc8:	00078713          	mv	a4,a5
80004ccc:	00171713          	slli	a4,a4,0x1
80004cd0:	00f70733          	add	a4,a4,a5
80004cd4:	00271793          	slli	a5,a4,0x2
80004cd8:	00078713          	mv	a4,a5
80004cdc:	00068793          	mv	a5,a3
80004ce0:	00379793          	slli	a5,a5,0x3
80004ce4:	00d787b3          	add	a5,a5,a3
80004ce8:	00279793          	slli	a5,a5,0x2
80004cec:	00f707b3          	add	a5,a4,a5
80004cf0:	00f607b3          	add	a5,a2,a5
80004cf4:	3e800713          	li	a4,1000
80004cf8:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:94 (discriminator 3)
            Tiles[m][n].taskSlots = NUM_MAX_TASKS;
80004cfc:	80022737          	lui	a4,0x80022
80004d00:	fe842783          	lw	a5,-24(s0)
80004d04:	fec42683          	lw	a3,-20(s0)
80004d08:	1e470613          	addi	a2,a4,484 # 800221e4 <__stack_top+0xfffdff84>
80004d0c:	00078713          	mv	a4,a5
80004d10:	00171713          	slli	a4,a4,0x1
80004d14:	00f70733          	add	a4,a4,a5
80004d18:	00271793          	slli	a5,a4,0x2
80004d1c:	00078713          	mv	a4,a5
80004d20:	00068793          	mv	a5,a3
80004d24:	00379793          	slli	a5,a5,0x3
80004d28:	00d787b3          	add	a5,a5,a3
80004d2c:	00279793          	slli	a5,a5,0x2
80004d30:	00f707b3          	add	a5,a4,a5
80004d34:	00f607b3          	add	a5,a2,a5
80004d38:	00600713          	li	a4,6
80004d3c:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:91 (discriminator 3)
        for (n = 0; n < DIM_Y; n++){
80004d40:	fe842783          	lw	a5,-24(s0)
80004d44:	00178793          	addi	a5,a5,1
80004d48:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:91 (discriminator 1)
80004d4c:	fe842703          	lw	a4,-24(s0)
80004d50:	00200793          	li	a5,2
80004d54:	f2e7d0e3          	ble	a4,a5,80004c74 <API_TilesReset+0x1c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90 (discriminator 2)
    for (m = 0; m < DIM_X; m++){
80004d58:	fec42783          	lw	a5,-20(s0)
80004d5c:	00178793          	addi	a5,a5,1
80004d60:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90 (discriminator 1)
80004d64:	fec42703          	lw	a4,-20(s0)
80004d68:	00200793          	li	a5,2
80004d6c:	f0e7d0e3          	ble	a4,a5,80004c6c <API_TilesReset+0x14>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:100
            /*for(i = 0; i < NUM_MAX_TASKS; i++){
                Tiles[m][n].AppTask[i] = NONE;
            }*/
        }
    }    
    return;
80004d70:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:101
}
80004d74:	01c12403          	lw	s0,28(sp)
80004d78:	02010113          	addi	sp,sp,32
80004d7c:	00008067          	ret

80004d80 <GeneratePatternMatrix>:
GeneratePatternMatrix():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:104

// Generates the Pattern Matrix for Pattern mapping
void GeneratePatternMatrix(){
80004d80:	fe010113          	addi	sp,sp,-32
80004d84:	00812e23          	sw	s0,28(sp)
80004d88:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:106
    int i, aux;
    aux = 0;
80004d8c:	fe042423          	sw	zero,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:107
    priorityPointer = 0;
80004d90:	800227b7          	lui	a5,0x80022
80004d94:	1e07a023          	sw	zero,480(a5) # 800221e0 <__stack_top+0xfffdff80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:109
    //prints("Testando Pattern: \n");
    for(i=0; i<(DIM_X*DIM_Y); i++){
80004d98:	fe042623          	sw	zero,-20(s0)
80004d9c:	0700006f          	j	80004e0c <GeneratePatternMatrix+0x8c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:111
        //printi(i); prints(": "); printi(aux); prints("\n");
        priorityMatrix[i] = (aux / DIM_X << 8) | aux % DIM_X;
80004da0:	fe842703          	lw	a4,-24(s0)
80004da4:	00300793          	li	a5,3
80004da8:	02f747b3          	div	a5,a4,a5
80004dac:	00879713          	slli	a4,a5,0x8
80004db0:	fe842683          	lw	a3,-24(s0)
80004db4:	00300793          	li	a5,3
80004db8:	02f6e7b3          	rem	a5,a3,a5
80004dbc:	00f767b3          	or	a5,a4,a5
80004dc0:	00078693          	mv	a3,a5
80004dc4:	800217b7          	lui	a5,0x80021
80004dc8:	fec42703          	lw	a4,-20(s0)
80004dcc:	00271713          	slli	a4,a4,0x2
80004dd0:	72478793          	addi	a5,a5,1828 # 80021724 <__stack_top+0xfffdf4c4>
80004dd4:	00f707b3          	add	a5,a4,a5
80004dd8:	00d7a023          	sw	a3,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:130
            else{
                aux = 1;
            }
        } 
        else{
            if(aux<=((DIM_X*DIM_Y)-3))
80004ddc:	fe842703          	lw	a4,-24(s0)
80004de0:	00600793          	li	a5,6
80004de4:	00e7ca63          	blt	a5,a4,80004df8 <GeneratePatternMatrix+0x78>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:131
                aux += 2;
80004de8:	fe842783          	lw	a5,-24(s0)
80004dec:	00278793          	addi	a5,a5,2
80004df0:	fef42423          	sw	a5,-24(s0)
80004df4:	00c0006f          	j	80004e00 <GeneratePatternMatrix+0x80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:133
            else
                aux = 1;
80004df8:	00100793          	li	a5,1
80004dfc:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:109 (discriminator 2)
    for(i=0; i<(DIM_X*DIM_Y); i++){
80004e00:	fec42783          	lw	a5,-20(s0)
80004e04:	00178793          	addi	a5,a5,1
80004e08:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:109 (discriminator 1)
80004e0c:	fec42703          	lw	a4,-20(s0)
80004e10:	00800793          	li	a5,8
80004e14:	f8e7d6e3          	ble	a4,a5,80004da0 <GeneratePatternMatrix+0x20>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:136
        }    
    }
    return;
80004e18:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:137
}
80004e1c:	01c12403          	lw	s0,28(sp)
80004e20:	02010113          	addi	sp,sp,32
80004e24:	00008067          	ret

80004e28 <API_AllocateTasks>:
API_AllocateTasks():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:140

// Checks if there is some task to allocate...
void API_AllocateTasks(unsigned int tick){
80004e28:	fd010113          	addi	sp,sp,-48
80004e2c:	02112623          	sw	ra,44(sp)
80004e30:	02812423          	sw	s0,40(sp)
80004e34:	02912223          	sw	s1,36(sp)
80004e38:	03010413          	addi	s0,sp,48
80004e3c:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:144
    int i, j;
    int addr, slot;
    // Iterate around every possible application
    for (i = 0; i < NUM_MAX_APPS; i++){
80004e40:	fe042623          	sw	zero,-20(s0)
80004e44:	2980006f          	j	800050dc <API_AllocateTasks+0x2b4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:146
        // If the application is valid
        if (applications[i].occupied == TRUE){
80004e48:	800216b7          	lui	a3,0x80021
80004e4c:	fec42703          	lw	a4,-20(s0)
80004e50:	00070793          	mv	a5,a4
80004e54:	00279793          	slli	a5,a5,0x2
80004e58:	00e787b3          	add	a5,a5,a4
80004e5c:	00579793          	slli	a5,a5,0x5
80004e60:	74868713          	addi	a4,a3,1864 # 80021748 <__stack_top+0xfffdf4e8>
80004e64:	00e787b3          	add	a5,a5,a4
80004e68:	0007a703          	lw	a4,0(a5)
80004e6c:	00100793          	li	a5,1
80004e70:	26f71063          	bne	a4,a5,800050d0 <API_AllocateTasks+0x2a8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:149

            // If the nextRun of this application is right now, then release each task!
            if(applications[i].nextRun <= tick && applications[i].nextRun != applications[i].lastStart){
80004e74:	800217b7          	lui	a5,0x80021
80004e78:	fec42703          	lw	a4,-20(s0)
80004e7c:	74878693          	addi	a3,a5,1864 # 80021748 <__stack_top+0xfffdf4e8>
80004e80:	00070793          	mv	a5,a4
80004e84:	00279793          	slli	a5,a5,0x2
80004e88:	00e787b3          	add	a5,a5,a4
80004e8c:	00579793          	slli	a5,a5,0x5
80004e90:	00f687b3          	add	a5,a3,a5
80004e94:	08c7a783          	lw	a5,140(a5)
80004e98:	fdc42703          	lw	a4,-36(s0)
80004e9c:	22f76a63          	bltu	a4,a5,800050d0 <API_AllocateTasks+0x2a8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:149 (discriminator 1)
80004ea0:	800217b7          	lui	a5,0x80021
80004ea4:	fec42703          	lw	a4,-20(s0)
80004ea8:	74878693          	addi	a3,a5,1864 # 80021748 <__stack_top+0xfffdf4e8>
80004eac:	00070793          	mv	a5,a4
80004eb0:	00279793          	slli	a5,a5,0x2
80004eb4:	00e787b3          	add	a5,a5,a4
80004eb8:	00579793          	slli	a5,a5,0x5
80004ebc:	00f687b3          	add	a5,a3,a5
80004ec0:	08c7a683          	lw	a3,140(a5)
80004ec4:	800217b7          	lui	a5,0x80021
80004ec8:	fec42703          	lw	a4,-20(s0)
80004ecc:	74878613          	addi	a2,a5,1864 # 80021748 <__stack_top+0xfffdf4e8>
80004ed0:	00070793          	mv	a5,a4
80004ed4:	00279793          	slli	a5,a5,0x2
80004ed8:	00e787b3          	add	a5,a5,a4
80004edc:	00579793          	slli	a5,a5,0x5
80004ee0:	00f607b3          	add	a5,a2,a5
80004ee4:	0947a783          	lw	a5,148(a5)
80004ee8:	1ef68463          	beq	a3,a5,800050d0 <API_AllocateTasks+0x2a8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:152

                // If the system has space to accept every task
                if(applications[i].numTasks <= API_GetSystemTasksSlots()){
80004eec:	800216b7          	lui	a3,0x80021
80004ef0:	fec42703          	lw	a4,-20(s0)
80004ef4:	00070793          	mv	a5,a4
80004ef8:	00279793          	slli	a5,a5,0x2
80004efc:	00e787b3          	add	a5,a5,a4
80004f00:	00579793          	slli	a5,a5,0x5
80004f04:	74868713          	addi	a4,a3,1864 # 80021748 <__stack_top+0xfffdf4e8>
80004f08:	00e787b3          	add	a5,a5,a4
80004f0c:	0107a483          	lw	s1,16(a5)
80004f10:	121000ef          	jal	ra,80005830 <API_GetSystemTasksSlots>
80004f14:	00050793          	mv	a5,a0
80004f18:	1a97ec63          	bltu	a5,s1,800050d0 <API_AllocateTasks+0x2a8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:155
                    
                    // Iterates around each task of this application
                    for(j = 0; j < applications[i].numTasks; j++){
80004f1c:	fe042423          	sw	zero,-24(s0)
80004f20:	13c0006f          	j	8000505c <API_AllocateTasks+0x234>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:158

                        for(;;){
                            addr = getNextPriorityAddr();
80004f24:	53c000ef          	jal	ra,80005460 <getNextPriorityAddr>
80004f28:	00050793          	mv	a5,a0
80004f2c:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:159
                            slot = API_GetTaskSlotFromTile(addr, i, j);
80004f30:	fe442783          	lw	a5,-28(s0)
80004f34:	fec42703          	lw	a4,-20(s0)
80004f38:	fe842683          	lw	a3,-24(s0)
80004f3c:	00068613          	mv	a2,a3
80004f40:	00070593          	mv	a1,a4
80004f44:	00078513          	mv	a0,a5
80004f48:	64c000ef          	jal	ra,80005594 <API_GetTaskSlotFromTile>
80004f4c:	00050793          	mv	a5,a0
80004f50:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:160
                            if (slot != ERRO)
80004f54:	fe042703          	lw	a4,-32(s0)
80004f58:	fff00793          	li	a5,-1
80004f5c:	00f71463          	bne	a4,a5,80004f64 <API_AllocateTasks+0x13c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:158
                            addr = getNextPriorityAddr();
80004f60:	fc5ff06f          	j	80004f24 <API_AllocateTasks+0xfc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:161
                                break;
80004f64:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:163
                        }
                        applications[i].tasks[j].status = TASK_ALLOCATING;
80004f68:	80021737          	lui	a4,0x80021
80004f6c:	fe842783          	lw	a5,-24(s0)
80004f70:	fec42683          	lw	a3,-20(s0)
80004f74:	74870613          	addi	a2,a4,1864 # 80021748 <__stack_top+0xfffdf4e8>
80004f78:	00078713          	mv	a4,a5
80004f7c:	00171713          	slli	a4,a4,0x1
80004f80:	00f70733          	add	a4,a4,a5
80004f84:	00271793          	slli	a5,a4,0x2
80004f88:	00078713          	mv	a4,a5
80004f8c:	00068793          	mv	a5,a3
80004f90:	00279793          	slli	a5,a5,0x2
80004f94:	00d787b3          	add	a5,a5,a3
80004f98:	00579793          	slli	a5,a5,0x5
80004f9c:	00f707b3          	add	a5,a4,a5
80004fa0:	00f607b3          	add	a5,a2,a5
80004fa4:	00300713          	li	a4,3
80004fa8:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:164
                        applications[i].tasks[j].addr = addr;
80004fac:	fe442603          	lw	a2,-28(s0)
80004fb0:	80021737          	lui	a4,0x80021
80004fb4:	fe842783          	lw	a5,-24(s0)
80004fb8:	fec42683          	lw	a3,-20(s0)
80004fbc:	74870593          	addi	a1,a4,1864 # 80021748 <__stack_top+0xfffdf4e8>
80004fc0:	00078713          	mv	a4,a5
80004fc4:	00171713          	slli	a4,a4,0x1
80004fc8:	00f70733          	add	a4,a4,a5
80004fcc:	00271793          	slli	a5,a4,0x2
80004fd0:	00078713          	mv	a4,a5
80004fd4:	00068793          	mv	a5,a3
80004fd8:	00279793          	slli	a5,a5,0x2
80004fdc:	00d787b3          	add	a5,a5,a3
80004fe0:	00579793          	slli	a5,a5,0x5
80004fe4:	00f707b3          	add	a5,a4,a5
80004fe8:	00f587b3          	add	a5,a1,a5
80004fec:	00c7ac23          	sw	a2,24(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:165
                        applications[i].tasks[j].slot = slot;
80004ff0:	fe042603          	lw	a2,-32(s0)
80004ff4:	80021737          	lui	a4,0x80021
80004ff8:	fe842783          	lw	a5,-24(s0)
80004ffc:	fec42683          	lw	a3,-20(s0)
80005000:	74870593          	addi	a1,a4,1864 # 80021748 <__stack_top+0xfffdf4e8>
80005004:	00078713          	mv	a4,a5
80005008:	00171713          	slli	a4,a4,0x1
8000500c:	00f70733          	add	a4,a4,a5
80005010:	00271793          	slli	a5,a4,0x2
80005014:	00078713          	mv	a4,a5
80005018:	00068793          	mv	a5,a3
8000501c:	00279793          	slli	a5,a5,0x2
80005020:	00d787b3          	add	a5,a5,a3
80005024:	00579793          	slli	a5,a5,0x5
80005028:	00f707b3          	add	a5,a4,a5
8000502c:	00f587b3          	add	a5,a1,a5
80005030:	00c7ae23          	sw	a2,28(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:166
                        API_RepositoryAllocation(i, j, addr);
80005034:	fec42783          	lw	a5,-20(s0)
80005038:	fe842703          	lw	a4,-24(s0)
8000503c:	fe442683          	lw	a3,-28(s0)
80005040:	00068613          	mv	a2,a3
80005044:	00070593          	mv	a1,a4
80005048:	00078513          	mv	a0,a5
8000504c:	0d1000ef          	jal	ra,8000591c <API_RepositoryAllocation>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:155
                    for(j = 0; j < applications[i].numTasks; j++){
80005050:	fe842783          	lw	a5,-24(s0)
80005054:	00178793          	addi	a5,a5,1
80005058:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:155 (discriminator 1)
8000505c:	800216b7          	lui	a3,0x80021
80005060:	fec42703          	lw	a4,-20(s0)
80005064:	00070793          	mv	a5,a4
80005068:	00279793          	slli	a5,a5,0x2
8000506c:	00e787b3          	add	a5,a5,a4
80005070:	00579793          	slli	a5,a5,0x5
80005074:	74868713          	addi	a4,a3,1864 # 80021748 <__stack_top+0xfffdf4e8>
80005078:	00e787b3          	add	a5,a5,a4
8000507c:	0107a703          	lw	a4,16(a5)
80005080:	fe842783          	lw	a5,-24(s0)
80005084:	eae7e0e3          	bltu	a5,a4,80004f24 <API_AllocateTasks+0xfc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:170
                    }

                    // Resets the lastStart
                    applications[i].lastStart = applications[i].nextRun;
80005088:	800217b7          	lui	a5,0x80021
8000508c:	fec42703          	lw	a4,-20(s0)
80005090:	74878693          	addi	a3,a5,1864 # 80021748 <__stack_top+0xfffdf4e8>
80005094:	00070793          	mv	a5,a4
80005098:	00279793          	slli	a5,a5,0x2
8000509c:	00e787b3          	add	a5,a5,a4
800050a0:	00579793          	slli	a5,a5,0x5
800050a4:	00f687b3          	add	a5,a3,a5
800050a8:	08c7a683          	lw	a3,140(a5)
800050ac:	800217b7          	lui	a5,0x80021
800050b0:	fec42703          	lw	a4,-20(s0)
800050b4:	74878613          	addi	a2,a5,1864 # 80021748 <__stack_top+0xfffdf4e8>
800050b8:	00070793          	mv	a5,a4
800050bc:	00279793          	slli	a5,a5,0x2
800050c0:	00e787b3          	add	a5,a5,a4
800050c4:	00579793          	slli	a5,a5,0x5
800050c8:	00f607b3          	add	a5,a2,a5
800050cc:	08d7aa23          	sw	a3,148(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:144 (discriminator 2)
    for (i = 0; i < NUM_MAX_APPS; i++){
800050d0:	fec42783          	lw	a5,-20(s0)
800050d4:	00178793          	addi	a5,a5,1
800050d8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:144 (discriminator 1)
800050dc:	fec42703          	lw	a4,-20(s0)
800050e0:	00b00793          	li	a5,11
800050e4:	d6e7d2e3          	ble	a4,a5,80004e48 <API_AllocateTasks+0x20>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:176
                }
            }
        }
    }

    return;
800050e8:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:177
}
800050ec:	02c12083          	lw	ra,44(sp)
800050f0:	02812403          	lw	s0,40(sp)
800050f4:	02412483          	lw	s1,36(sp)
800050f8:	03010113          	addi	sp,sp,48
800050fc:	00008067          	ret

80005100 <API_DealocateTask>:
API_DealocateTask():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:179

void API_DealocateTask(unsigned int task_id, unsigned int app_id){
80005100:	fd010113          	addi	sp,sp,-48
80005104:	02112623          	sw	ra,44(sp)
80005108:	02812423          	sw	s0,40(sp)
8000510c:	03010413          	addi	s0,sp,48
80005110:	fca42e23          	sw	a0,-36(s0)
80005114:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:181
    unsigned int i, flag, tick;
    applications[app_id].tasks[task_id].status = TASK_FINISHED;
80005118:	80021737          	lui	a4,0x80021
8000511c:	fdc42783          	lw	a5,-36(s0)
80005120:	fd842683          	lw	a3,-40(s0)
80005124:	74870613          	addi	a2,a4,1864 # 80021748 <__stack_top+0xfffdf4e8>
80005128:	00078713          	mv	a4,a5
8000512c:	00171713          	slli	a4,a4,0x1
80005130:	00f70733          	add	a4,a4,a5
80005134:	00271793          	slli	a5,a4,0x2
80005138:	00078713          	mv	a4,a5
8000513c:	00068793          	mv	a5,a3
80005140:	00279793          	slli	a5,a5,0x2
80005144:	00d787b3          	add	a5,a5,a3
80005148:	00579793          	slli	a5,a5,0x5
8000514c:	00f707b3          	add	a5,a4,a5
80005150:	00f607b3          	add	a5,a2,a5
80005154:	00200713          	li	a4,2
80005158:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:183
    // verify if every task has finished
    flag = 1;
8000515c:	00100793          	li	a5,1
80005160:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:184
    for (i = 0; i < applications[app_id].numTasks; i++){
80005164:	fe042623          	sw	zero,-20(s0)
80005168:	0600006f          	j	800051c8 <API_DealocateTask+0xc8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:186
        //printsvsv("checking ", i, "task is: ", applications[app_id].tasks[i].status);
        if(applications[app_id].tasks[i].status != TASK_FINISHED){
8000516c:	80021737          	lui	a4,0x80021
80005170:	fec42783          	lw	a5,-20(s0)
80005174:	fd842683          	lw	a3,-40(s0)
80005178:	74870613          	addi	a2,a4,1864 # 80021748 <__stack_top+0xfffdf4e8>
8000517c:	00078713          	mv	a4,a5
80005180:	00171713          	slli	a4,a4,0x1
80005184:	00f70733          	add	a4,a4,a5
80005188:	00271793          	slli	a5,a4,0x2
8000518c:	00078713          	mv	a4,a5
80005190:	00068793          	mv	a5,a3
80005194:	00279793          	slli	a5,a5,0x2
80005198:	00d787b3          	add	a5,a5,a3
8000519c:	00579793          	slli	a5,a5,0x5
800051a0:	00f707b3          	add	a5,a4,a5
800051a4:	00f607b3          	add	a5,a2,a5
800051a8:	0147a703          	lw	a4,20(a5)
800051ac:	00200793          	li	a5,2
800051b0:	00f70663          	beq	a4,a5,800051bc <API_DealocateTask+0xbc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:187
            flag = 0;
800051b4:	fe042423          	sw	zero,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:188
            break;
800051b8:	03c0006f          	j	800051f4 <API_DealocateTask+0xf4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:184 (discriminator 2)
    for (i = 0; i < applications[app_id].numTasks; i++){
800051bc:	fec42783          	lw	a5,-20(s0)
800051c0:	00178793          	addi	a5,a5,1
800051c4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:184 (discriminator 1)
800051c8:	800216b7          	lui	a3,0x80021
800051cc:	fd842703          	lw	a4,-40(s0)
800051d0:	00070793          	mv	a5,a4
800051d4:	00279793          	slli	a5,a5,0x2
800051d8:	00e787b3          	add	a5,a5,a4
800051dc:	00579793          	slli	a5,a5,0x5
800051e0:	74868713          	addi	a4,a3,1864 # 80021748 <__stack_top+0xfffdf4e8>
800051e4:	00e787b3          	add	a5,a5,a4
800051e8:	0107a783          	lw	a5,16(a5)
800051ec:	fec42703          	lw	a4,-20(s0)
800051f0:	f6f76ee3          	bltu	a4,a5,8000516c <API_DealocateTask+0x6c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:192
        }
    }
    // in positive case
    if(flag){
800051f4:	fe842783          	lw	a5,-24(s0)
800051f8:	24078663          	beqz	a5,80005444 <API_DealocateTask+0x344>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:194
        // register that the application has executed another time
        tick = xTaskGetTickCount();
800051fc:	a6cfd0ef          	jal	ra,80002468 <xTaskGetTickCount>
80005200:	fea42223          	sw	a0,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:195
        applications[app_id].executed++;
80005204:	800216b7          	lui	a3,0x80021
80005208:	fd842703          	lw	a4,-40(s0)
8000520c:	00070793          	mv	a5,a4
80005210:	00279793          	slli	a5,a5,0x2
80005214:	00e787b3          	add	a5,a5,a4
80005218:	00579793          	slli	a5,a5,0x5
8000521c:	74868713          	addi	a4,a3,1864 # 80021748 <__stack_top+0xfffdf4e8>
80005220:	00e787b3          	add	a5,a5,a4
80005224:	0907a783          	lw	a5,144(a5)
80005228:	00178693          	addi	a3,a5,1
8000522c:	80021637          	lui	a2,0x80021
80005230:	fd842703          	lw	a4,-40(s0)
80005234:	00070793          	mv	a5,a4
80005238:	00279793          	slli	a5,a5,0x2
8000523c:	00e787b3          	add	a5,a5,a4
80005240:	00579793          	slli	a5,a5,0x5
80005244:	74860713          	addi	a4,a2,1864 # 80021748 <__stack_top+0xfffdf4e8>
80005248:	00e787b3          	add	a5,a5,a4
8000524c:	08d7a823          	sw	a3,144(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:196
        printsvsv("Application ", app_id, "was executed in ", (tick - applications[app_id].lastStart));
80005250:	fd842583          	lw	a1,-40(s0)
80005254:	800217b7          	lui	a5,0x80021
80005258:	fd842703          	lw	a4,-40(s0)
8000525c:	74878693          	addi	a3,a5,1864 # 80021748 <__stack_top+0xfffdf4e8>
80005260:	00070793          	mv	a5,a4
80005264:	00279793          	slli	a5,a5,0x2
80005268:	00e787b3          	add	a5,a5,a4
8000526c:	00579793          	slli	a5,a5,0x5
80005270:	00f687b3          	add	a5,a3,a5
80005274:	0947a783          	lw	a5,148(a5)
80005278:	fe442703          	lw	a4,-28(s0)
8000527c:	40f707b3          	sub	a5,a4,a5
80005280:	00078693          	mv	a3,a5
80005284:	800077b7          	lui	a5,0x80007
80005288:	6a878613          	addi	a2,a5,1704 # 800076a8 <__stack_top+0xfffc5448>
8000528c:	800077b7          	lui	a5,0x80007
80005290:	6bc78513          	addi	a0,a5,1724 # 800076bc <__stack_top+0xfffc545c>
80005294:	c95fd0ef          	jal	ra,80002f28 <printsvsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:197
        applications[app_id].lastFinish = tick;
80005298:	800217b7          	lui	a5,0x80021
8000529c:	fd842703          	lw	a4,-40(s0)
800052a0:	74878693          	addi	a3,a5,1864 # 80021748 <__stack_top+0xfffdf4e8>
800052a4:	00070793          	mv	a5,a4
800052a8:	00279793          	slli	a5,a5,0x2
800052ac:	00e787b3          	add	a5,a5,a4
800052b0:	00579793          	slli	a5,a5,0x5
800052b4:	00f687b3          	add	a5,a3,a5
800052b8:	fe442703          	lw	a4,-28(s0)
800052bc:	08e7ae23          	sw	a4,156(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:199
        // if the application must run another time
        if(applications[app_id].appExec > applications[app_id].executed){
800052c0:	800217b7          	lui	a5,0x80021
800052c4:	fd842703          	lw	a4,-40(s0)
800052c8:	74878693          	addi	a3,a5,1864 # 80021748 <__stack_top+0xfffdf4e8>
800052cc:	00070793          	mv	a5,a4
800052d0:	00279793          	slli	a5,a5,0x2
800052d4:	00e787b3          	add	a5,a5,a4
800052d8:	00579793          	slli	a5,a5,0x5
800052dc:	00f687b3          	add	a5,a3,a5
800052e0:	00c7a683          	lw	a3,12(a5)
800052e4:	80021637          	lui	a2,0x80021
800052e8:	fd842703          	lw	a4,-40(s0)
800052ec:	00070793          	mv	a5,a4
800052f0:	00279793          	slli	a5,a5,0x2
800052f4:	00e787b3          	add	a5,a5,a4
800052f8:	00579793          	slli	a5,a5,0x5
800052fc:	74860713          	addi	a4,a2,1864 # 80021748 <__stack_top+0xfffdf4e8>
80005300:	00e787b3          	add	a5,a5,a4
80005304:	0907a783          	lw	a5,144(a5)
80005308:	0ad7fa63          	bleu	a3,a5,800053bc <API_DealocateTask+0x2bc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:200
            printsv("\t\tThis application still need to run: ", (applications[app_id].appExec - applications[app_id].executed));
8000530c:	800217b7          	lui	a5,0x80021
80005310:	fd842703          	lw	a4,-40(s0)
80005314:	74878693          	addi	a3,a5,1864 # 80021748 <__stack_top+0xfffdf4e8>
80005318:	00070793          	mv	a5,a4
8000531c:	00279793          	slli	a5,a5,0x2
80005320:	00e787b3          	add	a5,a5,a4
80005324:	00579793          	slli	a5,a5,0x5
80005328:	00f687b3          	add	a5,a3,a5
8000532c:	00c7a683          	lw	a3,12(a5)
80005330:	80021637          	lui	a2,0x80021
80005334:	fd842703          	lw	a4,-40(s0)
80005338:	00070793          	mv	a5,a4
8000533c:	00279793          	slli	a5,a5,0x2
80005340:	00e787b3          	add	a5,a5,a4
80005344:	00579793          	slli	a5,a5,0x5
80005348:	74860713          	addi	a4,a2,1864 # 80021748 <__stack_top+0xfffdf4e8>
8000534c:	00e787b3          	add	a5,a5,a4
80005350:	0907a783          	lw	a5,144(a5)
80005354:	40f687b3          	sub	a5,a3,a5
80005358:	00078593          	mv	a1,a5
8000535c:	800077b7          	lui	a5,0x80007
80005360:	6cc78513          	addi	a0,a5,1740 # 800076cc <__stack_top+0xfffc546c>
80005364:	b7dfd0ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:201
            applications[app_id].nextRun = tick + applications[app_id].appPeriod;
80005368:	800217b7          	lui	a5,0x80021
8000536c:	fd842703          	lw	a4,-40(s0)
80005370:	74878693          	addi	a3,a5,1864 # 80021748 <__stack_top+0xfffdf4e8>
80005374:	00070793          	mv	a5,a4
80005378:	00279793          	slli	a5,a5,0x2
8000537c:	00e787b3          	add	a5,a5,a4
80005380:	00579793          	slli	a5,a5,0x5
80005384:	00f687b3          	add	a5,a3,a5
80005388:	0087a703          	lw	a4,8(a5)
8000538c:	fe442783          	lw	a5,-28(s0)
80005390:	00f706b3          	add	a3,a4,a5
80005394:	800217b7          	lui	a5,0x80021
80005398:	fd842703          	lw	a4,-40(s0)
8000539c:	74878613          	addi	a2,a5,1864 # 80021748 <__stack_top+0xfffdf4e8>
800053a0:	00070793          	mv	a5,a4
800053a4:	00279793          	slli	a5,a5,0x2
800053a8:	00e787b3          	add	a5,a5,a4
800053ac:	00579793          	slli	a5,a5,0x5
800053b0:	00f607b3          	add	a5,a2,a5
800053b4:	08d7a623          	sw	a3,140(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:215
                }
            }
            _exit(0xfe10);
        }        
    }
    return;
800053b8:	08c0006f          	j	80005444 <API_DealocateTask+0x344>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:203
            prints("\t\tThis application is DONE!\n");
800053bc:	800077b7          	lui	a5,0x80007
800053c0:	6f478513          	addi	a0,a5,1780 # 800076f4 <__stack_top+0xfffc5494>
800053c4:	a71fd0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:204
            applications[app_id].occupied = FALSE;
800053c8:	800216b7          	lui	a3,0x80021
800053cc:	fd842703          	lw	a4,-40(s0)
800053d0:	00070793          	mv	a5,a4
800053d4:	00279793          	slli	a5,a5,0x2
800053d8:	00e787b3          	add	a5,a5,a4
800053dc:	00579793          	slli	a5,a5,0x5
800053e0:	74868713          	addi	a4,a3,1864 # 80021748 <__stack_top+0xfffdf4e8>
800053e4:	00e787b3          	add	a5,a5,a4
800053e8:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:207
            for(i = 0; i < NUM_MAX_APPS; i++){
800053ec:	fe042623          	sw	zero,-20(s0)
800053f0:	03c0006f          	j	8000542c <API_DealocateTask+0x32c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:208
                if (applications[i].occupied == TRUE){
800053f4:	800216b7          	lui	a3,0x80021
800053f8:	fec42703          	lw	a4,-20(s0)
800053fc:	00070793          	mv	a5,a4
80005400:	00279793          	slli	a5,a5,0x2
80005404:	00e787b3          	add	a5,a5,a4
80005408:	00579793          	slli	a5,a5,0x5
8000540c:	74868713          	addi	a4,a3,1864 # 80021748 <__stack_top+0xfffdf4e8>
80005410:	00e787b3          	add	a5,a5,a4
80005414:	0007a703          	lw	a4,0(a5)
80005418:	00100793          	li	a5,1
8000541c:	02f70863          	beq	a4,a5,8000544c <API_DealocateTask+0x34c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:207 (discriminator 2)
            for(i = 0; i < NUM_MAX_APPS; i++){
80005420:	fec42783          	lw	a5,-20(s0)
80005424:	00178793          	addi	a5,a5,1
80005428:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:207 (discriminator 1)
8000542c:	fec42703          	lw	a4,-20(s0)
80005430:	00b00793          	li	a5,11
80005434:	fce7f0e3          	bleu	a4,a5,800053f4 <API_DealocateTask+0x2f4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:212
            _exit(0xfe10);
80005438:	000107b7          	lui	a5,0x10
8000543c:	e1078513          	addi	a0,a5,-496 # fe10 <HEAP_SIZE-0x1f0>
80005440:	959fb0ef          	jal	ra,80000d98 <_exit>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:215
    return;
80005444:	00000013          	nop
80005448:	0080006f          	j	80005450 <API_DealocateTask+0x350>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:209
                    return;
8000544c:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:216
}
80005450:	02c12083          	lw	ra,44(sp)
80005454:	02812403          	lw	s0,40(sp)
80005458:	03010113          	addi	sp,sp,48
8000545c:	00008067          	ret

80005460 <getNextPriorityAddr>:
getNextPriorityAddr():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:219

// Gets the address of the next tile in the priority list 
unsigned int getNextPriorityAddr(){
80005460:	fe010113          	addi	sp,sp,-32
80005464:	00112e23          	sw	ra,28(sp)
80005468:	00812c23          	sw	s0,24(sp)
8000546c:	00912a23          	sw	s1,20(sp)
80005470:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:221
    int i;
    unsigned int addr = makeAddress(0,0);
80005474:	00000593          	li	a1,0
80005478:	00000513          	li	a0,0
8000547c:	f35fd0ef          	jal	ra,800033b0 <makeAddress>
80005480:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:224
    for(;;){
        // Checks if it's a valid address
        if (priorityMatrix[priorityPointer] != makeAddress(0,0)){
80005484:	800227b7          	lui	a5,0x80022
80005488:	1e07a703          	lw	a4,480(a5) # 800221e0 <__stack_top+0xfffdff80>
8000548c:	800217b7          	lui	a5,0x80021
80005490:	00271713          	slli	a4,a4,0x2
80005494:	72478793          	addi	a5,a5,1828 # 80021724 <__stack_top+0xfffdf4c4>
80005498:	00f707b3          	add	a5,a4,a5
8000549c:	0007a483          	lw	s1,0(a5)
800054a0:	00000593          	li	a1,0
800054a4:	00000513          	li	a0,0
800054a8:	f09fd0ef          	jal	ra,800033b0 <makeAddress>
800054ac:	00050793          	mv	a5,a0
800054b0:	06f48e63          	beq	s1,a5,8000552c <getNextPriorityAddr+0xcc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:225
            if (Tiles[getXpos(addr)][getYpos(addr)].taskSlots > 0){
800054b4:	fec42503          	lw	a0,-20(s0)
800054b8:	ad1fd0ef          	jal	ra,80002f88 <getXpos>
800054bc:	00050493          	mv	s1,a0
800054c0:	fec42503          	lw	a0,-20(s0)
800054c4:	af1fd0ef          	jal	ra,80002fb4 <getYpos>
800054c8:	00050613          	mv	a2,a0
800054cc:	800227b7          	lui	a5,0x80022
800054d0:	1e478693          	addi	a3,a5,484 # 800221e4 <__stack_top+0xfffdff84>
800054d4:	00060713          	mv	a4,a2
800054d8:	00171793          	slli	a5,a4,0x1
800054dc:	00078713          	mv	a4,a5
800054e0:	00c70733          	add	a4,a4,a2
800054e4:	00271793          	slli	a5,a4,0x2
800054e8:	00078713          	mv	a4,a5
800054ec:	00048793          	mv	a5,s1
800054f0:	00379793          	slli	a5,a5,0x3
800054f4:	009787b3          	add	a5,a5,s1
800054f8:	00279793          	slli	a5,a5,0x2
800054fc:	00f707b3          	add	a5,a4,a5
80005500:	00f687b3          	add	a5,a3,a5
80005504:	0087a783          	lw	a5,8(a5)
80005508:	02078263          	beqz	a5,8000552c <getNextPriorityAddr+0xcc>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:228
            //for(i = 0; i < NUM_MAX_TASKS; i++){
                //if (Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] == NONE)
                    addr = priorityMatrix[priorityPointer];
8000550c:	800227b7          	lui	a5,0x80022
80005510:	1e07a703          	lw	a4,480(a5) # 800221e0 <__stack_top+0xfffdff80>
80005514:	800217b7          	lui	a5,0x80021
80005518:	00271713          	slli	a4,a4,0x2
8000551c:	72478793          	addi	a5,a5,1828 # 80021724 <__stack_top+0xfffdf4c4>
80005520:	00f707b3          	add	a5,a4,a5
80005524:	0007a783          	lw	a5,0(a5)
80005528:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:234
            //}
            }
        }

        // Increments the priorityPointer
        priorityPointer++;
8000552c:	800227b7          	lui	a5,0x80022
80005530:	1e07a783          	lw	a5,480(a5) # 800221e0 <__stack_top+0xfffdff80>
80005534:	00178713          	addi	a4,a5,1
80005538:	800227b7          	lui	a5,0x80022
8000553c:	1ee7a023          	sw	a4,480(a5) # 800221e0 <__stack_top+0xfffdff80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:235
        if (priorityPointer == DIM_X*DIM_Y)
80005540:	800227b7          	lui	a5,0x80022
80005544:	1e07a703          	lw	a4,480(a5) # 800221e0 <__stack_top+0xfffdff80>
80005548:	00900793          	li	a5,9
8000554c:	00f71663          	bne	a4,a5,80005558 <getNextPriorityAddr+0xf8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:236
            priorityPointer = 0;
80005550:	800227b7          	lui	a5,0x80022
80005554:	1e07a023          	sw	zero,480(a5) # 800221e0 <__stack_top+0xfffdff80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:239

        // If we found a new valid address, return
        if( addr != makeAddress(0,0))
80005558:	00000593          	li	a1,0
8000555c:	00000513          	li	a0,0
80005560:	e51fd0ef          	jal	ra,800033b0 <makeAddress>
80005564:	00050713          	mv	a4,a0
80005568:	fec42783          	lw	a5,-20(s0)
8000556c:	00e79463          	bne	a5,a4,80005574 <getNextPriorityAddr+0x114>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:224
        if (priorityMatrix[priorityPointer] != makeAddress(0,0)){
80005570:	f15ff06f          	j	80005484 <getNextPriorityAddr+0x24>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:240
            break;
80005574:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:242
    }
    return addr;
80005578:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:244
    //return 0x101;
}
8000557c:	00078513          	mv	a0,a5
80005580:	01c12083          	lw	ra,28(sp)
80005584:	01812403          	lw	s0,24(sp)
80005588:	01412483          	lw	s1,20(sp)
8000558c:	02010113          	addi	sp,sp,32
80005590:	00008067          	ret

80005594 <API_GetTaskSlotFromTile>:
API_GetTaskSlotFromTile():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:247

// Gets a free slot from one given tile
unsigned int API_GetTaskSlotFromTile(unsigned int addr, unsigned int app, unsigned int task){
80005594:	fe010113          	addi	sp,sp,-32
80005598:	00112e23          	sw	ra,28(sp)
8000559c:	00812c23          	sw	s0,24(sp)
800055a0:	00912a23          	sw	s1,20(sp)
800055a4:	01212823          	sw	s2,16(sp)
800055a8:	02010413          	addi	s0,sp,32
800055ac:	fea42623          	sw	a0,-20(s0)
800055b0:	feb42423          	sw	a1,-24(s0)
800055b4:	fec42223          	sw	a2,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:257
            printsv("\t achei!! > ", i);
            Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] = (app << 16) | task;
            return i;
        }
    }*/
    if(Tiles[getXpos(addr)][getYpos(addr)].taskSlots > 0){
800055b8:	fec42503          	lw	a0,-20(s0)
800055bc:	9cdfd0ef          	jal	ra,80002f88 <getXpos>
800055c0:	00050493          	mv	s1,a0
800055c4:	fec42503          	lw	a0,-20(s0)
800055c8:	9edfd0ef          	jal	ra,80002fb4 <getYpos>
800055cc:	00050613          	mv	a2,a0
800055d0:	800227b7          	lui	a5,0x80022
800055d4:	1e478693          	addi	a3,a5,484 # 800221e4 <__stack_top+0xfffdff84>
800055d8:	00060713          	mv	a4,a2
800055dc:	00171793          	slli	a5,a4,0x1
800055e0:	00078713          	mv	a4,a5
800055e4:	00c70733          	add	a4,a4,a2
800055e8:	00271793          	slli	a5,a4,0x2
800055ec:	00078713          	mv	a4,a5
800055f0:	00048793          	mv	a5,s1
800055f4:	00379793          	slli	a5,a5,0x3
800055f8:	009787b3          	add	a5,a5,s1
800055fc:	00279793          	slli	a5,a5,0x2
80005600:	00f707b3          	add	a5,a4,a5
80005604:	00f687b3          	add	a5,a3,a5
80005608:	0087a783          	lw	a5,8(a5)
8000560c:	0a078c63          	beqz	a5,800056c4 <API_GetTaskSlotFromTile+0x130>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:258
        Tiles[getXpos(addr)][getYpos(addr)].taskSlots = Tiles[getXpos(addr)][getYpos(addr)].taskSlots - 1;
80005610:	fec42503          	lw	a0,-20(s0)
80005614:	975fd0ef          	jal	ra,80002f88 <getXpos>
80005618:	00050493          	mv	s1,a0
8000561c:	fec42503          	lw	a0,-20(s0)
80005620:	995fd0ef          	jal	ra,80002fb4 <getYpos>
80005624:	00050613          	mv	a2,a0
80005628:	800227b7          	lui	a5,0x80022
8000562c:	1e478693          	addi	a3,a5,484 # 800221e4 <__stack_top+0xfffdff84>
80005630:	00060713          	mv	a4,a2
80005634:	00171793          	slli	a5,a4,0x1
80005638:	00078713          	mv	a4,a5
8000563c:	00c70733          	add	a4,a4,a2
80005640:	00271793          	slli	a5,a4,0x2
80005644:	00078713          	mv	a4,a5
80005648:	00048793          	mv	a5,s1
8000564c:	00379793          	slli	a5,a5,0x3
80005650:	009787b3          	add	a5,a5,s1
80005654:	00279793          	slli	a5,a5,0x2
80005658:	00f707b3          	add	a5,a4,a5
8000565c:	00f687b3          	add	a5,a3,a5
80005660:	0087a483          	lw	s1,8(a5)
80005664:	fec42503          	lw	a0,-20(s0)
80005668:	921fd0ef          	jal	ra,80002f88 <getXpos>
8000566c:	00050913          	mv	s2,a0
80005670:	fec42503          	lw	a0,-20(s0)
80005674:	941fd0ef          	jal	ra,80002fb4 <getYpos>
80005678:	00050593          	mv	a1,a0
8000567c:	fff48693          	addi	a3,s1,-1
80005680:	800227b7          	lui	a5,0x80022
80005684:	1e478613          	addi	a2,a5,484 # 800221e4 <__stack_top+0xfffdff84>
80005688:	00058713          	mv	a4,a1
8000568c:	00171793          	slli	a5,a4,0x1
80005690:	00078713          	mv	a4,a5
80005694:	00b70733          	add	a4,a4,a1
80005698:	00271793          	slli	a5,a4,0x2
8000569c:	00078713          	mv	a4,a5
800056a0:	00090793          	mv	a5,s2
800056a4:	00379793          	slli	a5,a5,0x3
800056a8:	012787b3          	add	a5,a5,s2
800056ac:	00279793          	slli	a5,a5,0x2
800056b0:	00f707b3          	add	a5,a4,a5
800056b4:	00f607b3          	add	a5,a2,a5
800056b8:	00d7a423          	sw	a3,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:259
        return 1;
800056bc:	00100793          	li	a5,1
800056c0:	0140006f          	j	800056d4 <API_GetTaskSlotFromTile+0x140>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:261
    }else {
        prints("returning erro5\n");
800056c4:	800077b7          	lui	a5,0x80007
800056c8:	71478513          	addi	a0,a5,1812 # 80007714 <__stack_top+0xfffc54b4>
800056cc:	f68fd0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:262
        return ERRO;
800056d0:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:264
    }
}
800056d4:	00078513          	mv	a0,a5
800056d8:	01c12083          	lw	ra,28(sp)
800056dc:	01812403          	lw	s0,24(sp)
800056e0:	01412483          	lw	s1,20(sp)
800056e4:	01012903          	lw	s2,16(sp)
800056e8:	02010113          	addi	sp,sp,32
800056ec:	00008067          	ret

800056f0 <API_ClearTaskSlotFromTile>:
API_ClearTaskSlotFromTile():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:267

// Clear a slot occupied by a given task
unsigned int API_ClearTaskSlotFromTile(unsigned int addr, unsigned int app, unsigned int task){
800056f0:	fe010113          	addi	sp,sp,-32
800056f4:	00112e23          	sw	ra,28(sp)
800056f8:	00812c23          	sw	s0,24(sp)
800056fc:	00912a23          	sw	s1,20(sp)
80005700:	02010413          	addi	s0,sp,32
80005704:	fea42623          	sw	a0,-20(s0)
80005708:	feb42423          	sw	a1,-24(s0)
8000570c:	fec42223          	sw	a2,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:268
    Tiles[getXpos(addr)][getYpos(addr)].taskSlots++;
80005710:	fec42503          	lw	a0,-20(s0)
80005714:	875fd0ef          	jal	ra,80002f88 <getXpos>
80005718:	00050493          	mv	s1,a0
8000571c:	fec42503          	lw	a0,-20(s0)
80005720:	895fd0ef          	jal	ra,80002fb4 <getYpos>
80005724:	00050693          	mv	a3,a0
80005728:	800227b7          	lui	a5,0x80022
8000572c:	1e478613          	addi	a2,a5,484 # 800221e4 <__stack_top+0xfffdff84>
80005730:	00068713          	mv	a4,a3
80005734:	00171793          	slli	a5,a4,0x1
80005738:	00078713          	mv	a4,a5
8000573c:	00d70733          	add	a4,a4,a3
80005740:	00271793          	slli	a5,a4,0x2
80005744:	00078713          	mv	a4,a5
80005748:	00048793          	mv	a5,s1
8000574c:	00379793          	slli	a5,a5,0x3
80005750:	009787b3          	add	a5,a5,s1
80005754:	00279793          	slli	a5,a5,0x2
80005758:	00f707b3          	add	a5,a4,a5
8000575c:	00f607b3          	add	a5,a2,a5
80005760:	0087a783          	lw	a5,8(a5)
80005764:	00178613          	addi	a2,a5,1
80005768:	800227b7          	lui	a5,0x80022
8000576c:	1e478593          	addi	a1,a5,484 # 800221e4 <__stack_top+0xfffdff84>
80005770:	00068713          	mv	a4,a3
80005774:	00171793          	slli	a5,a4,0x1
80005778:	00078713          	mv	a4,a5
8000577c:	00d70733          	add	a4,a4,a3
80005780:	00271793          	slli	a5,a4,0x2
80005784:	00078713          	mv	a4,a5
80005788:	00048793          	mv	a5,s1
8000578c:	00379793          	slli	a5,a5,0x3
80005790:	009787b3          	add	a5,a5,s1
80005794:	00279793          	slli	a5,a5,0x2
80005798:	00f707b3          	add	a5,a4,a5
8000579c:	00f587b3          	add	a5,a1,a5
800057a0:	00c7a423          	sw	a2,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:269
    if(Tiles[getXpos(addr)][getYpos(addr)].taskSlots >= NUM_MAX_TASKS){
800057a4:	fec42503          	lw	a0,-20(s0)
800057a8:	fe0fd0ef          	jal	ra,80002f88 <getXpos>
800057ac:	00050493          	mv	s1,a0
800057b0:	fec42503          	lw	a0,-20(s0)
800057b4:	801fd0ef          	jal	ra,80002fb4 <getYpos>
800057b8:	00050613          	mv	a2,a0
800057bc:	800227b7          	lui	a5,0x80022
800057c0:	1e478693          	addi	a3,a5,484 # 800221e4 <__stack_top+0xfffdff84>
800057c4:	00060713          	mv	a4,a2
800057c8:	00171793          	slli	a5,a4,0x1
800057cc:	00078713          	mv	a4,a5
800057d0:	00c70733          	add	a4,a4,a2
800057d4:	00271793          	slli	a5,a4,0x2
800057d8:	00078713          	mv	a4,a5
800057dc:	00048793          	mv	a5,s1
800057e0:	00379793          	slli	a5,a5,0x3
800057e4:	009787b3          	add	a5,a5,s1
800057e8:	00279793          	slli	a5,a5,0x2
800057ec:	00f707b3          	add	a5,a4,a5
800057f0:	00f687b3          	add	a5,a3,a5
800057f4:	0087a703          	lw	a4,8(a5)
800057f8:	00500793          	li	a5,5
800057fc:	00e7fc63          	bleu	a4,a5,80005814 <API_ClearTaskSlotFromTile+0x124>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:270
        prints("returning erro6\n");
80005800:	800077b7          	lui	a5,0x80007
80005804:	72878513          	addi	a0,a5,1832 # 80007728 <__stack_top+0xfffc54c8>
80005808:	e2cfd0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:271
        return ERRO;
8000580c:	fff00793          	li	a5,-1
80005810:	0080006f          	j	80005818 <API_ClearTaskSlotFromTile+0x128>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:274
    }
    else{
        return 1;
80005814:	00100793          	li	a5,1
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:278
    }
    prints("returning erro7\n");
    return ERRO;
}
80005818:	00078513          	mv	a0,a5
8000581c:	01c12083          	lw	ra,28(sp)
80005820:	01812403          	lw	s0,24(sp)
80005824:	01412483          	lw	s1,20(sp)
80005828:	02010113          	addi	sp,sp,32
8000582c:	00008067          	ret

80005830 <API_GetSystemTasksSlots>:
API_GetSystemTasksSlots():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:281

// Iterates around the system tiles to sum the amount of tasks slots available
unsigned int API_GetSystemTasksSlots(){
80005830:	fe010113          	addi	sp,sp,-32
80005834:	00112e23          	sw	ra,28(sp)
80005838:	00812c23          	sw	s0,24(sp)
8000583c:	00912a23          	sw	s1,20(sp)
80005840:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:283
    int m, n, i, sum;
    sum = 0;
80005844:	fe042223          	sw	zero,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:284
    for(m = 0; m < DIM_X; m++){
80005848:	fe042623          	sw	zero,-20(s0)
8000584c:	0a80006f          	j	800058f4 <API_GetSystemTasksSlots+0xc4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:285
        for(n = 0; n < DIM_Y; n++){
80005850:	fe042423          	sw	zero,-24(s0)
80005854:	0880006f          	j	800058dc <API_GetSystemTasksSlots+0xac>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:286
            if(makeAddress(m,n) != makeAddress(0,0)){
80005858:	fec42783          	lw	a5,-20(s0)
8000585c:	fe842703          	lw	a4,-24(s0)
80005860:	00070593          	mv	a1,a4
80005864:	00078513          	mv	a0,a5
80005868:	b49fd0ef          	jal	ra,800033b0 <makeAddress>
8000586c:	00050493          	mv	s1,a0
80005870:	00000593          	li	a1,0
80005874:	00000513          	li	a0,0
80005878:	b39fd0ef          	jal	ra,800033b0 <makeAddress>
8000587c:	00050793          	mv	a5,a0
80005880:	04f48863          	beq	s1,a5,800058d0 <API_GetSystemTasksSlots+0xa0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:287
                sum += Tiles[m][n].taskSlots;
80005884:	80022737          	lui	a4,0x80022
80005888:	fe842783          	lw	a5,-24(s0)
8000588c:	fec42683          	lw	a3,-20(s0)
80005890:	1e470613          	addi	a2,a4,484 # 800221e4 <__stack_top+0xfffdff84>
80005894:	00078713          	mv	a4,a5
80005898:	00171713          	slli	a4,a4,0x1
8000589c:	00f70733          	add	a4,a4,a5
800058a0:	00271793          	slli	a5,a4,0x2
800058a4:	00078713          	mv	a4,a5
800058a8:	00068793          	mv	a5,a3
800058ac:	00379793          	slli	a5,a5,0x3
800058b0:	00d787b3          	add	a5,a5,a3
800058b4:	00279793          	slli	a5,a5,0x2
800058b8:	00f707b3          	add	a5,a4,a5
800058bc:	00f607b3          	add	a5,a2,a5
800058c0:	0087a703          	lw	a4,8(a5)
800058c4:	fe442783          	lw	a5,-28(s0)
800058c8:	00f707b3          	add	a5,a4,a5
800058cc:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:285 (discriminator 2)
        for(n = 0; n < DIM_Y; n++){
800058d0:	fe842783          	lw	a5,-24(s0)
800058d4:	00178793          	addi	a5,a5,1
800058d8:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:285 (discriminator 1)
800058dc:	fe842703          	lw	a4,-24(s0)
800058e0:	00200793          	li	a5,2
800058e4:	f6e7dae3          	ble	a4,a5,80005858 <API_GetSystemTasksSlots+0x28>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:284 (discriminator 2)
    for(m = 0; m < DIM_X; m++){
800058e8:	fec42783          	lw	a5,-20(s0)
800058ec:	00178793          	addi	a5,a5,1
800058f0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:284 (discriminator 1)
800058f4:	fec42703          	lw	a4,-20(s0)
800058f8:	00200793          	li	a5,2
800058fc:	f4e7dae3          	ble	a4,a5,80005850 <API_GetSystemTasksSlots+0x20>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:291
            }
        }
    }
    return sum;
80005900:	fe442783          	lw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:292
}
80005904:	00078513          	mv	a0,a5
80005908:	01c12083          	lw	ra,28(sp)
8000590c:	01812403          	lw	s0,24(sp)
80005910:	01412483          	lw	s1,20(sp)
80005914:	02010113          	addi	sp,sp,32
80005918:	00008067          	ret

8000591c <API_RepositoryAllocation>:
API_RepositoryAllocation():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:294

void API_RepositoryAllocation(unsigned int app, unsigned int task, unsigned int dest_addr){
8000591c:	fd010113          	addi	sp,sp,-48
80005920:	02112623          	sw	ra,44(sp)
80005924:	02812423          	sw	s0,40(sp)
80005928:	03010413          	addi	s0,sp,48
8000592c:	fca42e23          	sw	a0,-36(s0)
80005930:	fcb42c23          	sw	a1,-40(s0)
80005934:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:297
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80005938:	034010ef          	jal	ra,8000696c <API_GetServiceSlot>
8000593c:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:298
        if(mySlot == PIPE_FULL){
80005940:	fec42703          	lw	a4,-20(s0)
80005944:	fdfe07b7          	lui	a5,0xfdfe0
80005948:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9db9d>
8000594c:	00f71463          	bne	a4,a5,80005954 <API_RepositoryAllocation+0x38>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:300
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80005950:	f4cfe0ef          	jal	ra,8000409c <API_NI_Handler>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:302
        }
    }while(mySlot == PIPE_FULL);
80005954:	fec42703          	lw	a4,-20(s0)
80005958:	fdfe07b7          	lui	a5,0xfdfe0
8000595c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9db9d>
80005960:	fcf70ce3          	beq	a4,a5,80005938 <API_RepositoryAllocation+0x1c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:303
    printsv("I got a free service slot!! -> ", mySlot);
80005964:	fec42783          	lw	a5,-20(s0)
80005968:	00078593          	mv	a1,a5
8000596c:	800077b7          	lui	a5,0x80007
80005970:	73c78513          	addi	a0,a5,1852 # 8000773c <__stack_top+0xfffc54dc>
80005974:	d6cfd0ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:305

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80005978:	800217b7          	lui	a5,0x80021
8000597c:	fec42703          	lw	a4,-20(s0)
80005980:	cac78693          	addi	a3,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
80005984:	00070793          	mv	a5,a4
80005988:	00479793          	slli	a5,a5,0x4
8000598c:	40e787b3          	sub	a5,a5,a4
80005990:	00279793          	slli	a5,a5,0x2
80005994:	00f687b3          	add	a5,a3,a5
80005998:	feff0737          	lui	a4,0xfeff0
8000599c:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efadc9e>
800059a0:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:307

    ServicePipe[mySlot].header.header           = makeAddress(0, 0) | PERIPH_SOUTH;
800059a4:	00000593          	li	a1,0
800059a8:	00000513          	li	a0,0
800059ac:	a05fd0ef          	jal	ra,800033b0 <makeAddress>
800059b0:	00050713          	mv	a4,a0
800059b4:	000407b7          	lui	a5,0x40
800059b8:	00f766b3          	or	a3,a4,a5
800059bc:	800217b7          	lui	a5,0x80021
800059c0:	fec42703          	lw	a4,-20(s0)
800059c4:	cac78613          	addi	a2,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
800059c8:	00070793          	mv	a5,a4
800059cc:	00479793          	slli	a5,a5,0x4
800059d0:	40e787b3          	sub	a5,a5,a4
800059d4:	00279793          	slli	a5,a5,0x2
800059d8:	00f607b3          	add	a5,a2,a5
800059dc:	00d7a423          	sw	a3,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:308
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
800059e0:	800217b7          	lui	a5,0x80021
800059e4:	fec42703          	lw	a4,-20(s0)
800059e8:	cac78693          	addi	a3,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
800059ec:	00070793          	mv	a5,a4
800059f0:	00479793          	slli	a5,a5,0x4
800059f4:	40e787b3          	sub	a5,a5,a4
800059f8:	00279793          	slli	a5,a5,0x2
800059fc:	00f687b3          	add	a5,a3,a5
80005a00:	00b00713          	li	a4,11
80005a04:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:309
    ServicePipe[mySlot].header.service          = TASK_ALLOCATION_SEND;
80005a08:	800217b7          	lui	a5,0x80021
80005a0c:	fec42703          	lw	a4,-20(s0)
80005a10:	cac78693          	addi	a3,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
80005a14:	00070793          	mv	a5,a4
80005a18:	00479793          	slli	a5,a5,0x4
80005a1c:	40e787b3          	sub	a5,a5,a4
80005a20:	00279793          	slli	a5,a5,0x2
80005a24:	00f687b3          	add	a5,a3,a5
80005a28:	03000713          	li	a4,48
80005a2c:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:310
    ServicePipe[mySlot].header.task_id          = task;
80005a30:	800217b7          	lui	a5,0x80021
80005a34:	fec42703          	lw	a4,-20(s0)
80005a38:	cac78693          	addi	a3,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
80005a3c:	00070793          	mv	a5,a4
80005a40:	00479793          	slli	a5,a5,0x4
80005a44:	40e787b3          	sub	a5,a5,a4
80005a48:	00279793          	slli	a5,a5,0x2
80005a4c:	00f687b3          	add	a5,a3,a5
80005a50:	fd842703          	lw	a4,-40(s0)
80005a54:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:311
    ServicePipe[mySlot].header.task_app_id      = app;
80005a58:	800217b7          	lui	a5,0x80021
80005a5c:	fec42703          	lw	a4,-20(s0)
80005a60:	cac78693          	addi	a3,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
80005a64:	00070793          	mv	a5,a4
80005a68:	00479793          	slli	a5,a5,0x4
80005a6c:	40e787b3          	sub	a5,a5,a4
80005a70:	00279793          	slli	a5,a5,0x2
80005a74:	00f687b3          	add	a5,a3,a5
80005a78:	fdc42703          	lw	a4,-36(s0)
80005a7c:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:312
    ServicePipe[mySlot].header.task_dest_addr   = dest_addr;
80005a80:	800217b7          	lui	a5,0x80021
80005a84:	fec42703          	lw	a4,-20(s0)
80005a88:	cac78693          	addi	a3,a5,-852 # 80020cac <__stack_top+0xfffdea4c>
80005a8c:	00070793          	mv	a5,a4
80005a90:	00479793          	slli	a5,a5,0x4
80005a94:	40e787b3          	sub	a5,a5,a4
80005a98:	00279793          	slli	a5,a5,0x2
80005a9c:	00f687b3          	add	a5,a3,a5
80005aa0:	fd442703          	lw	a4,-44(s0)
80005aa4:	02e7ac23          	sw	a4,56(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:314

    API_PushSendQueue(SERVICE, mySlot);
80005aa8:	fec42583          	lw	a1,-20(s0)
80005aac:	10100537          	lui	a0,0x10100
80005ab0:	941fd0ef          	jal	ra,800033f0 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:315
    return;    
80005ab4:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:316
}
80005ab8:	02c12083          	lw	ra,44(sp)
80005abc:	02812403          	lw	s0,40(sp)
80005ac0:	03010113          	addi	sp,sp,48
80005ac4:	00008067          	ret

80005ac8 <API_TaskAllocated>:
API_TaskAllocated():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:318

void API_TaskAllocated(unsigned int task_id, unsigned int app_id){
80005ac8:	fd010113          	addi	sp,sp,-48
80005acc:	02112623          	sw	ra,44(sp)
80005ad0:	02812423          	sw	s0,40(sp)
80005ad4:	03010413          	addi	s0,sp,48
80005ad8:	fca42e23          	sw	a0,-36(s0)
80005adc:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:320
    unsigned int i;
    applications[app_id].tasks[task_id].status = TASK_ALLOCATED;
80005ae0:	80021737          	lui	a4,0x80021
80005ae4:	fdc42783          	lw	a5,-36(s0)
80005ae8:	fd842683          	lw	a3,-40(s0)
80005aec:	74870613          	addi	a2,a4,1864 # 80021748 <__stack_top+0xfffdf4e8>
80005af0:	00078713          	mv	a4,a5
80005af4:	00171713          	slli	a4,a4,0x1
80005af8:	00f70733          	add	a4,a4,a5
80005afc:	00271793          	slli	a5,a4,0x2
80005b00:	00078713          	mv	a4,a5
80005b04:	00068793          	mv	a5,a3
80005b08:	00279793          	slli	a5,a5,0x2
80005b0c:	00d787b3          	add	a5,a5,a3
80005b10:	00579793          	slli	a5,a5,0x5
80005b14:	00f707b3          	add	a5,a4,a5
80005b18:	00f607b3          	add	a5,a2,a5
80005b1c:	00400713          	li	a4,4
80005b20:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:322

    for(i = 0; i < applications[app_id].numTasks; i++){
80005b24:	fe042623          	sw	zero,-20(s0)
80005b28:	0580006f          	j	80005b80 <API_TaskAllocated+0xb8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:323
        if(applications[app_id].tasks[i].status != TASK_ALLOCATED){
80005b2c:	80021737          	lui	a4,0x80021
80005b30:	fec42783          	lw	a5,-20(s0)
80005b34:	fd842683          	lw	a3,-40(s0)
80005b38:	74870613          	addi	a2,a4,1864 # 80021748 <__stack_top+0xfffdf4e8>
80005b3c:	00078713          	mv	a4,a5
80005b40:	00171713          	slli	a4,a4,0x1
80005b44:	00f70733          	add	a4,a4,a5
80005b48:	00271793          	slli	a5,a4,0x2
80005b4c:	00078713          	mv	a4,a5
80005b50:	00068793          	mv	a5,a3
80005b54:	00279793          	slli	a5,a5,0x2
80005b58:	00d787b3          	add	a5,a5,a3
80005b5c:	00579793          	slli	a5,a5,0x5
80005b60:	00f707b3          	add	a5,a4,a5
80005b64:	00f607b3          	add	a5,a2,a5
80005b68:	0147a703          	lw	a4,20(a5)
80005b6c:	00400793          	li	a5,4
80005b70:	06f71663          	bne	a4,a5,80005bdc <API_TaskAllocated+0x114>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:322 (discriminator 2)
    for(i = 0; i < applications[app_id].numTasks; i++){
80005b74:	fec42783          	lw	a5,-20(s0)
80005b78:	00178793          	addi	a5,a5,1
80005b7c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:322 (discriminator 1)
80005b80:	800216b7          	lui	a3,0x80021
80005b84:	fd842703          	lw	a4,-40(s0)
80005b88:	00070793          	mv	a5,a4
80005b8c:	00279793          	slli	a5,a5,0x2
80005b90:	00e787b3          	add	a5,a5,a4
80005b94:	00579793          	slli	a5,a5,0x5
80005b98:	74868713          	addi	a4,a3,1864 # 80021748 <__stack_top+0xfffdf4e8>
80005b9c:	00e787b3          	add	a5,a5,a4
80005ba0:	0107a783          	lw	a5,16(a5)
80005ba4:	fec42703          	lw	a4,-20(s0)
80005ba8:	f8f762e3          	bltu	a4,a5,80005b2c <API_TaskAllocated+0x64>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:328
            //printi(i);
            return;
        }
    }
    printsv("Application allocated: ", app_id);
80005bac:	fd842783          	lw	a5,-40(s0)
80005bb0:	00078593          	mv	a1,a5
80005bb4:	800077b7          	lui	a5,0x80007
80005bb8:	75c78513          	addi	a0,a5,1884 # 8000775c <__stack_top+0xfffc54fc>
80005bbc:	b24fd0ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:329
    API_ApplicationStart(app_id);
80005bc0:	fd842503          	lw	a0,-40(s0)
80005bc4:	02c000ef          	jal	ra,80005bf0 <API_ApplicationStart>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:330
    prints("\tStart command sent to every task.\n");
80005bc8:	800077b7          	lui	a5,0x80007
80005bcc:	77478513          	addi	a0,a5,1908 # 80007774 <__stack_top+0xfffc5514>
80005bd0:	a64fd0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:331
    return;
80005bd4:	00000013          	nop
80005bd8:	0080006f          	j	80005be0 <API_TaskAllocated+0x118>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:325
            return;
80005bdc:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:332
}
80005be0:	02c12083          	lw	ra,44(sp)
80005be4:	02812403          	lw	s0,40(sp)
80005be8:	03010113          	addi	sp,sp,48
80005bec:	00008067          	ret

80005bf0 <API_ApplicationStart>:
API_ApplicationStart():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:334

void API_ApplicationStart(unsigned int app_id){
80005bf0:	fd010113          	addi	sp,sp,-48
80005bf4:	02112623          	sw	ra,44(sp)
80005bf8:	02812423          	sw	s0,40(sp)
80005bfc:	03010413          	addi	s0,sp,48
80005c00:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:337
    unsigned int i, j;
    unsigned int mySlot;
    for(i = 0; i < applications[app_id].numTasks; i++){
80005c04:	fe042623          	sw	zero,-20(s0)
80005c08:	2640006f          	j	80005e6c <API_ApplicationStart+0x27c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:339
        do{
            mySlot = API_GetMessageSlot();
80005c0c:	415000ef          	jal	ra,80006820 <API_GetMessageSlot>
80005c10:	fea42223          	sw	a0,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:340
            if(mySlot == PIPE_FULL){
80005c14:	fe442703          	lw	a4,-28(s0)
80005c18:	fdfe07b7          	lui	a5,0xfdfe0
80005c1c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9db9d>
80005c20:	00f71463          	bne	a4,a5,80005c28 <API_ApplicationStart+0x38>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:342
                // Runs the NI Handler to send/receive packets, opening space in the PIPE
                API_NI_Handler();
80005c24:	c78fe0ef          	jal	ra,8000409c <API_NI_Handler>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:344
            }
        }while(mySlot == PIPE_FULL);
80005c28:	fe442703          	lw	a4,-28(s0)
80005c2c:	fdfe07b7          	lui	a5,0xfdfe0
80005c30:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9db9d>
80005c34:	fcf70ce3          	beq	a4,a5,80005c0c <API_ApplicationStart+0x1c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:346

        MessagePipe[mySlot].holder = PIPE_SYS_HOLDER;
80005c38:	800217b7          	lui	a5,0x80021
80005c3c:	fe442683          	lw	a3,-28(s0)
80005c40:	e1078713          	addi	a4,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
80005c44:	24400793          	li	a5,580
80005c48:	02f687b3          	mul	a5,a3,a5
80005c4c:	00f707b3          	add	a5,a4,a5
80005c50:	feff0737          	lui	a4,0xfeff0
80005c54:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efadc9e>
80005c58:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:348

        MessagePipe[mySlot].header.header           = applications[app_id].tasks[i].addr;
80005c5c:	80021737          	lui	a4,0x80021
80005c60:	fec42783          	lw	a5,-20(s0)
80005c64:	fdc42683          	lw	a3,-36(s0)
80005c68:	74870613          	addi	a2,a4,1864 # 80021748 <__stack_top+0xfffdf4e8>
80005c6c:	00078713          	mv	a4,a5
80005c70:	00171713          	slli	a4,a4,0x1
80005c74:	00f70733          	add	a4,a4,a5
80005c78:	00271793          	slli	a5,a4,0x2
80005c7c:	00078713          	mv	a4,a5
80005c80:	00068793          	mv	a5,a3
80005c84:	00279793          	slli	a5,a5,0x2
80005c88:	00d787b3          	add	a5,a5,a3
80005c8c:	00579793          	slli	a5,a5,0x5
80005c90:	00f707b3          	add	a5,a4,a5
80005c94:	00f607b3          	add	a5,a2,a5
80005c98:	0187a703          	lw	a4,24(a5)
80005c9c:	800217b7          	lui	a5,0x80021
80005ca0:	fe442603          	lw	a2,-28(s0)
80005ca4:	e1078693          	addi	a3,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
80005ca8:	24400793          	li	a5,580
80005cac:	02f607b3          	mul	a5,a2,a5
80005cb0:	00f687b3          	add	a5,a3,a5
80005cb4:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:349
        MessagePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE + applications[app_id].numTasks + 1;
80005cb8:	800216b7          	lui	a3,0x80021
80005cbc:	fdc42703          	lw	a4,-36(s0)
80005cc0:	00070793          	mv	a5,a4
80005cc4:	00279793          	slli	a5,a5,0x2
80005cc8:	00e787b3          	add	a5,a5,a4
80005ccc:	00579793          	slli	a5,a5,0x5
80005cd0:	74868713          	addi	a4,a3,1864 # 80021748 <__stack_top+0xfffdf4e8>
80005cd4:	00e787b3          	add	a5,a5,a4
80005cd8:	0107a783          	lw	a5,16(a5)
80005cdc:	00c78713          	addi	a4,a5,12
80005ce0:	800217b7          	lui	a5,0x80021
80005ce4:	fe442603          	lw	a2,-28(s0)
80005ce8:	e1078693          	addi	a3,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
80005cec:	24400793          	li	a5,580
80005cf0:	02f607b3          	mul	a5,a2,a5
80005cf4:	00f687b3          	add	a5,a3,a5
80005cf8:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:350
        MessagePipe[mySlot].header.service          = TASK_START;
80005cfc:	800217b7          	lui	a5,0x80021
80005d00:	fe442683          	lw	a3,-28(s0)
80005d04:	e1078713          	addi	a4,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
80005d08:	24400793          	li	a5,580
80005d0c:	02f687b3          	mul	a5,a3,a5
80005d10:	00f707b3          	add	a5,a4,a5
80005d14:	40000713          	li	a4,1024
80005d18:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:351
        MessagePipe[mySlot].header.task_id          = i;
80005d1c:	800217b7          	lui	a5,0x80021
80005d20:	fe442683          	lw	a3,-28(s0)
80005d24:	e1078713          	addi	a4,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
80005d28:	24400793          	li	a5,580
80005d2c:	02f687b3          	mul	a5,a3,a5
80005d30:	00f707b3          	add	a5,a4,a5
80005d34:	fec42703          	lw	a4,-20(s0)
80005d38:	00e7ac23          	sw	a4,24(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:352
        MessagePipe[mySlot].header.task_app_id      = app_id;
80005d3c:	800217b7          	lui	a5,0x80021
80005d40:	fe442683          	lw	a3,-28(s0)
80005d44:	e1078713          	addi	a4,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
80005d48:	24400793          	li	a5,580
80005d4c:	02f687b3          	mul	a5,a3,a5
80005d50:	00f707b3          	add	a5,a4,a5
80005d54:	fdc42703          	lw	a4,-36(s0)
80005d58:	02e7a423          	sw	a4,40(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:353
        MessagePipe[mySlot].msg.length              = applications[app_id].numTasks;
80005d5c:	800216b7          	lui	a3,0x80021
80005d60:	fdc42703          	lw	a4,-36(s0)
80005d64:	00070793          	mv	a5,a4
80005d68:	00279793          	slli	a5,a5,0x2
80005d6c:	00e787b3          	add	a5,a5,a4
80005d70:	00579793          	slli	a5,a5,0x5
80005d74:	74868713          	addi	a4,a3,1864 # 80021748 <__stack_top+0xfffdf4e8>
80005d78:	00e787b3          	add	a5,a5,a4
80005d7c:	0107a703          	lw	a4,16(a5)
80005d80:	800217b7          	lui	a5,0x80021
80005d84:	fe442603          	lw	a2,-28(s0)
80005d88:	24400693          	li	a3,580
80005d8c:	02d606b3          	mul	a3,a2,a3
80005d90:	e1078793          	addi	a5,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
80005d94:	00f687b3          	add	a5,a3,a5
80005d98:	04e7a023          	sw	a4,64(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:354
        for(j = 0; j < applications[app_id].numTasks; j++){
80005d9c:	fe042423          	sw	zero,-24(s0)
80005da0:	0880006f          	j	80005e28 <API_ApplicationStart+0x238>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:355 (discriminator 3)
            MessagePipe[mySlot].msg.msg[j]          = applications[app_id].tasks[j].addr;
80005da4:	80021737          	lui	a4,0x80021
80005da8:	fe842783          	lw	a5,-24(s0)
80005dac:	fdc42683          	lw	a3,-36(s0)
80005db0:	74870613          	addi	a2,a4,1864 # 80021748 <__stack_top+0xfffdf4e8>
80005db4:	00078713          	mv	a4,a5
80005db8:	00171713          	slli	a4,a4,0x1
80005dbc:	00f70733          	add	a4,a4,a5
80005dc0:	00271793          	slli	a5,a4,0x2
80005dc4:	00078713          	mv	a4,a5
80005dc8:	00068793          	mv	a5,a3
80005dcc:	00279793          	slli	a5,a5,0x2
80005dd0:	00d787b3          	add	a5,a5,a3
80005dd4:	00579793          	slli	a5,a5,0x5
80005dd8:	00f707b3          	add	a5,a4,a5
80005ddc:	00f607b3          	add	a5,a2,a5
80005de0:	0187a683          	lw	a3,24(a5)
80005de4:	80021637          	lui	a2,0x80021
80005de8:	fe442703          	lw	a4,-28(s0)
80005dec:	00070793          	mv	a5,a4
80005df0:	00379793          	slli	a5,a5,0x3
80005df4:	00e787b3          	add	a5,a5,a4
80005df8:	00479793          	slli	a5,a5,0x4
80005dfc:	00e787b3          	add	a5,a5,a4
80005e00:	fe842703          	lw	a4,-24(s0)
80005e04:	00e787b3          	add	a5,a5,a4
80005e08:	01078793          	addi	a5,a5,16
80005e0c:	e1060713          	addi	a4,a2,-496 # 80020e10 <__stack_top+0xfffdebb0>
80005e10:	00279793          	slli	a5,a5,0x2
80005e14:	00f707b3          	add	a5,a4,a5
80005e18:	00d7a223          	sw	a3,4(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:354 (discriminator 3)
        for(j = 0; j < applications[app_id].numTasks; j++){
80005e1c:	fe842783          	lw	a5,-24(s0)
80005e20:	00178793          	addi	a5,a5,1
80005e24:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:354 (discriminator 1)
80005e28:	800216b7          	lui	a3,0x80021
80005e2c:	fdc42703          	lw	a4,-36(s0)
80005e30:	00070793          	mv	a5,a4
80005e34:	00279793          	slli	a5,a5,0x2
80005e38:	00e787b3          	add	a5,a5,a4
80005e3c:	00579793          	slli	a5,a5,0x5
80005e40:	74868713          	addi	a4,a3,1864 # 80021748 <__stack_top+0xfffdf4e8>
80005e44:	00e787b3          	add	a5,a5,a4
80005e48:	0107a783          	lw	a5,16(a5)
80005e4c:	fe842703          	lw	a4,-24(s0)
80005e50:	f4f76ae3          	bltu	a4,a5,80005da4 <API_ApplicationStart+0x1b4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:357 (discriminator 2)
        }
        API_PushSendQueue(MESSAGE, mySlot);
80005e54:	fe442583          	lw	a1,-28(s0)
80005e58:	20200537          	lui	a0,0x20200
80005e5c:	d94fd0ef          	jal	ra,800033f0 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:337 (discriminator 2)
    for(i = 0; i < applications[app_id].numTasks; i++){
80005e60:	fec42783          	lw	a5,-20(s0)
80005e64:	00178793          	addi	a5,a5,1
80005e68:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:337 (discriminator 1)
80005e6c:	800216b7          	lui	a3,0x80021
80005e70:	fdc42703          	lw	a4,-36(s0)
80005e74:	00070793          	mv	a5,a4
80005e78:	00279793          	slli	a5,a5,0x2
80005e7c:	00e787b3          	add	a5,a5,a4
80005e80:	00579793          	slli	a5,a5,0x5
80005e84:	74868713          	addi	a4,a3,1864 # 80021748 <__stack_top+0xfffdf4e8>
80005e88:	00e787b3          	add	a5,a5,a4
80005e8c:	0107a783          	lw	a5,16(a5)
80005e90:	fec42703          	lw	a4,-20(s0)
80005e94:	d6f76ce3          	bltu	a4,a5,80005c0c <API_ApplicationStart+0x1c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:359
    }
    return;
80005e98:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:360
}
80005e9c:	02c12083          	lw	ra,44(sp)
80005ea0:	02812403          	lw	s0,40(sp)
80005ea4:	03010113          	addi	sp,sp,48
80005ea8:	00008067          	ret

80005eac <API_TaskListInit>:
API_TaskListInit():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:13
#include "chronos.h"

// Stores information about each running task
//extern volatile Task TaskList[ NUM_MAX_TASKS ];

void API_TaskListInit(){
80005eac:	fe010113          	addi	sp,sp,-32
80005eb0:	00812e23          	sw	s0,28(sp)
80005eb4:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:15
    unsigned int i, j;
    for (i = 0; i < NUM_MAX_TASKS; i++){
80005eb8:	fe042623          	sw	zero,-20(s0)
80005ebc:	0840006f          	j	80005f40 <API_TaskListInit+0x94>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:16
        TaskList[i].status = TASK_SLOT_EMPTY;
80005ec0:	800226b7          	lui	a3,0x80022
80005ec4:	fec42703          	lw	a4,-20(s0)
80005ec8:	00070793          	mv	a5,a4
80005ecc:	00579793          	slli	a5,a5,0x5
80005ed0:	00e787b3          	add	a5,a5,a4
80005ed4:	00279793          	slli	a5,a5,0x2
80005ed8:	ec868713          	addi	a4,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80005edc:	00e787b3          	add	a5,a5,a4
80005ee0:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:17
        for (j = 0; j < NUM_MAX_APP_TASKS; j++){
80005ee4:	fe042423          	sw	zero,-24(s0)
80005ee8:	0400006f          	j	80005f28 <API_TaskListInit+0x7c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:18 (discriminator 3)
            TaskList[i].PendingReq[j] = FALSE;
80005eec:	800226b7          	lui	a3,0x80022
80005ef0:	fec42703          	lw	a4,-20(s0)
80005ef4:	00070793          	mv	a5,a4
80005ef8:	00579793          	slli	a5,a5,0x5
80005efc:	00e787b3          	add	a5,a5,a4
80005f00:	fe842703          	lw	a4,-24(s0)
80005f04:	00e787b3          	add	a5,a5,a4
80005f08:	00c78793          	addi	a5,a5,12
80005f0c:	00279713          	slli	a4,a5,0x2
80005f10:	ec868793          	addi	a5,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80005f14:	00f707b3          	add	a5,a4,a5
80005f18:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:17 (discriminator 3)
        for (j = 0; j < NUM_MAX_APP_TASKS; j++){
80005f1c:	fe842783          	lw	a5,-24(s0)
80005f20:	00178793          	addi	a5,a5,1
80005f24:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:17 (discriminator 1)
80005f28:	fe842703          	lw	a4,-24(s0)
80005f2c:	00900793          	li	a5,9
80005f30:	fae7fee3          	bleu	a4,a5,80005eec <API_TaskListInit+0x40>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 2)
    for (i = 0; i < NUM_MAX_TASKS; i++){
80005f34:	fec42783          	lw	a5,-20(s0)
80005f38:	00178793          	addi	a5,a5,1
80005f3c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 1)
80005f40:	fec42703          	lw	a4,-20(s0)
80005f44:	00500793          	li	a5,5
80005f48:	f6e7fce3          	bleu	a4,a5,80005ec0 <API_TaskListInit+0x14>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:21
        }
    }
    return;
80005f4c:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:22
}
80005f50:	01c12403          	lw	s0,28(sp)
80005f54:	02010113          	addi	sp,sp,32
80005f58:	00008067          	ret

80005f5c <API_GetCurrentTaskSlot>:
API_GetCurrentTaskSlot():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:24

unsigned int API_GetCurrentTaskSlot(){
80005f5c:	fe010113          	addi	sp,sp,-32
80005f60:	00112e23          	sw	ra,28(sp)
80005f64:	00812c23          	sw	s0,24(sp)
80005f68:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:26
    // The handle of the currently running ( calling ) task on the kernel.
    TaskHandle_t xHandle = xTaskGetCurrentTaskHandle();
80005f6c:	cc1fc0ef          	jal	ra,80002c2c <xTaskGetCurrentTaskHandle>
80005f70:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:27
    unsigned int i = 0;
80005f74:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:28
    for ( i = 0 ; i < NUM_MAX_TASKS ; i++ ) {
80005f78:	fe042623          	sw	zero,-20(s0)
80005f7c:	0440006f          	j	80005fc0 <API_GetCurrentTaskSlot+0x64>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:29
        if ( TaskList[ i ].TaskHandler == xHandle ) {
80005f80:	800227b7          	lui	a5,0x80022
80005f84:	fec42703          	lw	a4,-20(s0)
80005f88:	ec878693          	addi	a3,a5,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80005f8c:	00070793          	mv	a5,a4
80005f90:	00579793          	slli	a5,a5,0x5
80005f94:	00e787b3          	add	a5,a5,a4
80005f98:	00279793          	slli	a5,a5,0x2
80005f9c:	00f687b3          	add	a5,a3,a5
80005fa0:	0187a783          	lw	a5,24(a5)
80005fa4:	fe842703          	lw	a4,-24(s0)
80005fa8:	00f71663          	bne	a4,a5,80005fb4 <API_GetCurrentTaskSlot+0x58>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:30
            return( i );
80005fac:	fec42783          	lw	a5,-20(s0)
80005fb0:	02c0006f          	j	80005fdc <API_GetCurrentTaskSlot+0x80>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:28 (discriminator 2)
    for ( i = 0 ; i < NUM_MAX_TASKS ; i++ ) {
80005fb4:	fec42783          	lw	a5,-20(s0)
80005fb8:	00178793          	addi	a5,a5,1
80005fbc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:28 (discriminator 1)
80005fc0:	fec42703          	lw	a4,-20(s0)
80005fc4:	00500793          	li	a5,5
80005fc8:	fae7fce3          	bleu	a4,a5,80005f80 <API_GetCurrentTaskSlot+0x24>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:33
        }
    }
    prints("returning erro0\n");
80005fcc:	800077b7          	lui	a5,0x80007
80005fd0:	79878513          	addi	a0,a5,1944 # 80007798 <__stack_top+0xfffc5538>
80005fd4:	e61fc0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:34
    return ERRO;
80005fd8:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:35
}
80005fdc:	00078513          	mv	a0,a5
80005fe0:	01c12083          	lw	ra,28(sp)
80005fe4:	01812403          	lw	s0,24(sp)
80005fe8:	02010113          	addi	sp,sp,32
80005fec:	00008067          	ret

80005ff0 <API_GetFreeTaskSlot>:
API_GetFreeTaskSlot():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:37

unsigned int API_GetFreeTaskSlot(){
80005ff0:	fe010113          	addi	sp,sp,-32
80005ff4:	00112e23          	sw	ra,28(sp)
80005ff8:	00812c23          	sw	s0,24(sp)
80005ffc:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:39
    unsigned int i;
    for (i = 0; i < NUM_MAX_TASKS; i++){
80006000:	fe042623          	sw	zero,-20(s0)
80006004:	0400006f          	j	80006044 <API_GetFreeTaskSlot+0x54>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:40
        if (TaskList[i].status == TASK_SLOT_EMPTY){
80006008:	800226b7          	lui	a3,0x80022
8000600c:	fec42703          	lw	a4,-20(s0)
80006010:	00070793          	mv	a5,a4
80006014:	00579793          	slli	a5,a5,0x5
80006018:	00e787b3          	add	a5,a5,a4
8000601c:	00279793          	slli	a5,a5,0x2
80006020:	ec868713          	addi	a4,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80006024:	00e787b3          	add	a5,a5,a4
80006028:	0007a783          	lw	a5,0(a5)
8000602c:	00079663          	bnez	a5,80006038 <API_GetFreeTaskSlot+0x48>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:41
            return i;
80006030:	fec42783          	lw	a5,-20(s0)
80006034:	02c0006f          	j	80006060 <API_GetFreeTaskSlot+0x70>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:39 (discriminator 2)
    for (i = 0; i < NUM_MAX_TASKS; i++){
80006038:	fec42783          	lw	a5,-20(s0)
8000603c:	00178793          	addi	a5,a5,1
80006040:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:39 (discriminator 1)
80006044:	fec42703          	lw	a4,-20(s0)
80006048:	00500793          	li	a5,5
8000604c:	fae7fee3          	bleu	a4,a5,80006008 <API_GetFreeTaskSlot+0x18>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:44
        }
    }
    prints("returning erro1\n");
80006050:	800077b7          	lui	a5,0x80007
80006054:	7ac78513          	addi	a0,a5,1964 # 800077ac <__stack_top+0xfffc554c>
80006058:	dddfc0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:45
    return ERRO;
8000605c:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:46
}
80006060:	00078513          	mv	a0,a5
80006064:	01c12083          	lw	ra,28(sp)
80006068:	01812403          	lw	s0,24(sp)
8000606c:	02010113          	addi	sp,sp,32
80006070:	00008067          	ret

80006074 <API_TaskAllocation>:
API_TaskAllocation():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:48

unsigned int API_TaskAllocation(unsigned int task_id, unsigned int txt_size, unsigned int bss_size, unsigned int start_point, unsigned int task_app_id){
80006074:	fc010113          	addi	sp,sp,-64
80006078:	02112e23          	sw	ra,60(sp)
8000607c:	02812c23          	sw	s0,56(sp)
80006080:	04010413          	addi	s0,sp,64
80006084:	fca42e23          	sw	a0,-36(s0)
80006088:	fcb42c23          	sw	a1,-40(s0)
8000608c:	fcc42a23          	sw	a2,-44(s0)
80006090:	fcd42823          	sw	a3,-48(s0)
80006094:	fce42623          	sw	a4,-52(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:49
    unsigned int tslot = API_GetFreeTaskSlot();
80006098:	f59ff0ef          	jal	ra,80005ff0 <API_GetFreeTaskSlot>
8000609c:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:51
    int i;
    if(tslot == ERRO){
800060a0:	fe842703          	lw	a4,-24(s0)
800060a4:	fff00793          	li	a5,-1
800060a8:	00f71863          	bne	a4,a5,800060b8 <API_TaskAllocation+0x44>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:52
        prints("DEU RUIM NO API_GetFreeTaskSlot()\n");
800060ac:	800077b7          	lui	a5,0x80007
800060b0:	7c078513          	addi	a0,a5,1984 # 800077c0 <__stack_top+0xfffc5560>
800060b4:	d81fc0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:54
    }
    printsv("Got slot: ", tslot);
800060b8:	fe842783          	lw	a5,-24(s0)
800060bc:	00078593          	mv	a1,a5
800060c0:	800077b7          	lui	a5,0x80007
800060c4:	7e478513          	addi	a0,a5,2020 # 800077e4 <__stack_top+0xfffc5584>
800060c8:	e19fc0ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:55
    TaskList[tslot].status = TASK_SLOT_WAITING_START;
800060cc:	800226b7          	lui	a3,0x80022
800060d0:	fe842703          	lw	a4,-24(s0)
800060d4:	00070793          	mv	a5,a4
800060d8:	00579793          	slli	a5,a5,0x5
800060dc:	00e787b3          	add	a5,a5,a4
800060e0:	00279793          	slli	a5,a5,0x2
800060e4:	ec868713          	addi	a4,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
800060e8:	00e787b3          	add	a5,a5,a4
800060ec:	00200713          	li	a4,2
800060f0:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:56
    TaskList[tslot].waitingMsg = FALSE;
800060f4:	800227b7          	lui	a5,0x80022
800060f8:	fe842703          	lw	a4,-24(s0)
800060fc:	ec878693          	addi	a3,a5,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80006100:	00070793          	mv	a5,a4
80006104:	00579793          	slli	a5,a5,0x5
80006108:	00e787b3          	add	a5,a5,a4
8000610c:	00279793          	slli	a5,a5,0x2
80006110:	00f687b3          	add	a5,a3,a5
80006114:	0007ae23          	sw	zero,28(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:57
    TaskList[tslot].TaskID = task_id;
80006118:	800226b7          	lui	a3,0x80022
8000611c:	fe842703          	lw	a4,-24(s0)
80006120:	00070793          	mv	a5,a4
80006124:	00579793          	slli	a5,a5,0x5
80006128:	00e787b3          	add	a5,a5,a4
8000612c:	00279793          	slli	a5,a5,0x2
80006130:	ec868713          	addi	a4,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80006134:	00e787b3          	add	a5,a5,a4
80006138:	fdc42703          	lw	a4,-36(s0)
8000613c:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:58
    TaskList[tslot].AppID = task_app_id;
80006140:	800227b7          	lui	a5,0x80022
80006144:	fe842703          	lw	a4,-24(s0)
80006148:	ec878693          	addi	a3,a5,-312 # 80021ec8 <__stack_top+0xfffdfc68>
8000614c:	00070793          	mv	a5,a4
80006150:	00579793          	slli	a5,a5,0x5
80006154:	00e787b3          	add	a5,a5,a4
80006158:	00279793          	slli	a5,a5,0x2
8000615c:	00f687b3          	add	a5,a3,a5
80006160:	fcc42703          	lw	a4,-52(s0)
80006164:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:59
    TaskList[tslot].taskSize = 4 * (txt_size + bss_size); // it multiply by four because each word has 32 bits and the memory is addressed by byte - so each word is composed by 4 addresses
80006168:	fd842703          	lw	a4,-40(s0)
8000616c:	fd442783          	lw	a5,-44(s0)
80006170:	00f707b3          	add	a5,a4,a5
80006174:	00279693          	slli	a3,a5,0x2
80006178:	800227b7          	lui	a5,0x80022
8000617c:	fe842703          	lw	a4,-24(s0)
80006180:	ec878613          	addi	a2,a5,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80006184:	00070793          	mv	a5,a4
80006188:	00579793          	slli	a5,a5,0x5
8000618c:	00e787b3          	add	a5,a5,a4
80006190:	00279793          	slli	a5,a5,0x2
80006194:	00f607b3          	add	a5,a2,a5
80006198:	02d7a223          	sw	a3,36(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:60
    printsv("Task total size (txt+bss): ", TaskList[tslot].taskSize);
8000619c:	800227b7          	lui	a5,0x80022
800061a0:	fe842703          	lw	a4,-24(s0)
800061a4:	ec878693          	addi	a3,a5,-312 # 80021ec8 <__stack_top+0xfffdfc68>
800061a8:	00070793          	mv	a5,a4
800061ac:	00579793          	slli	a5,a5,0x5
800061b0:	00e787b3          	add	a5,a5,a4
800061b4:	00279793          	slli	a5,a5,0x2
800061b8:	00f687b3          	add	a5,a3,a5
800061bc:	0247a783          	lw	a5,36(a5)
800061c0:	00078593          	mv	a1,a5
800061c4:	800077b7          	lui	a5,0x80007
800061c8:	7f078513          	addi	a0,a5,2032 # 800077f0 <__stack_top+0xfffc5590>
800061cc:	d15fc0ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:61
    TaskList[tslot].taskAddr = (unsigned int)pvPortMalloc(TaskList[tslot].taskSize+64);
800061d0:	800227b7          	lui	a5,0x80022
800061d4:	fe842703          	lw	a4,-24(s0)
800061d8:	ec878693          	addi	a3,a5,-312 # 80021ec8 <__stack_top+0xfffdfc68>
800061dc:	00070793          	mv	a5,a4
800061e0:	00579793          	slli	a5,a5,0x5
800061e4:	00e787b3          	add	a5,a5,a4
800061e8:	00279793          	slli	a5,a5,0x2
800061ec:	00f687b3          	add	a5,a3,a5
800061f0:	0247a783          	lw	a5,36(a5)
800061f4:	04078793          	addi	a5,a5,64
800061f8:	00078513          	mv	a0,a5
800061fc:	8a8fb0ef          	jal	ra,800012a4 <pvPortMalloc>
80006200:	00050793          	mv	a5,a0
80006204:	00078613          	mv	a2,a5
80006208:	800227b7          	lui	a5,0x80022
8000620c:	fe842703          	lw	a4,-24(s0)
80006210:	ec878693          	addi	a3,a5,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80006214:	00070793          	mv	a5,a4
80006218:	00579793          	slli	a5,a5,0x5
8000621c:	00e787b3          	add	a5,a5,a4
80006220:	00279793          	slli	a5,a5,0x2
80006224:	00f687b3          	add	a5,a3,a5
80006228:	02c7a423          	sw	a2,40(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:62
    printsv("Task addr: ", TaskList[tslot].taskAddr);
8000622c:	800227b7          	lui	a5,0x80022
80006230:	fe842703          	lw	a4,-24(s0)
80006234:	ec878693          	addi	a3,a5,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80006238:	00070793          	mv	a5,a4
8000623c:	00579793          	slli	a5,a5,0x5
80006240:	00e787b3          	add	a5,a5,a4
80006244:	00279793          	slli	a5,a5,0x2
80006248:	00f687b3          	add	a5,a3,a5
8000624c:	0287a783          	lw	a5,40(a5)
80006250:	00078593          	mv	a1,a5
80006254:	800087b7          	lui	a5,0x80008
80006258:	80c78513          	addi	a0,a5,-2036 # 8000780c <__stack_top+0xfffc55ac>
8000625c:	c85fc0ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:63
    TaskList[tslot].mainAddr =  TaskList[tslot].taskAddr + (4 * start_point);
80006260:	800227b7          	lui	a5,0x80022
80006264:	fe842703          	lw	a4,-24(s0)
80006268:	ec878693          	addi	a3,a5,-312 # 80021ec8 <__stack_top+0xfffdfc68>
8000626c:	00070793          	mv	a5,a4
80006270:	00579793          	slli	a5,a5,0x5
80006274:	00e787b3          	add	a5,a5,a4
80006278:	00279793          	slli	a5,a5,0x2
8000627c:	00f687b3          	add	a5,a3,a5
80006280:	0287a703          	lw	a4,40(a5)
80006284:	fd042783          	lw	a5,-48(s0)
80006288:	00279793          	slli	a5,a5,0x2
8000628c:	00f706b3          	add	a3,a4,a5
80006290:	800227b7          	lui	a5,0x80022
80006294:	fe842703          	lw	a4,-24(s0)
80006298:	ec878613          	addi	a2,a5,-312 # 80021ec8 <__stack_top+0xfffdfc68>
8000629c:	00070793          	mv	a5,a4
800062a0:	00579793          	slli	a5,a5,0x5
800062a4:	00e787b3          	add	a5,a5,a4
800062a8:	00279793          	slli	a5,a5,0x2
800062ac:	00f607b3          	add	a5,a2,a5
800062b0:	02d7a623          	sw	a3,44(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:69

    // filling the MemoryRegion_t struct
    //TaskList[tslot].memRegion.ulLengthInBytes = 0;// TaskList[tslot].taskSize;
    //TaskList[tslot].memRegion.pvBaseAddress = 0;//TaskList[tslot].taskAddr;

    for(i=0;i<NUM_MAX_APP_TASKS;i++){
800062b4:	fe042623          	sw	zero,-20(s0)
800062b8:	0700006f          	j	80006328 <API_TaskAllocation+0x2b4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:70 (discriminator 3)
        TaskList[tslot].PendingReq[i] = FALSE;
800062bc:	800226b7          	lui	a3,0x80022
800062c0:	fe842703          	lw	a4,-24(s0)
800062c4:	00070793          	mv	a5,a4
800062c8:	00579793          	slli	a5,a5,0x5
800062cc:	00e787b3          	add	a5,a5,a4
800062d0:	fec42703          	lw	a4,-20(s0)
800062d4:	00e787b3          	add	a5,a5,a4
800062d8:	00c78793          	addi	a5,a5,12
800062dc:	00279713          	slli	a4,a5,0x2
800062e0:	ec868793          	addi	a5,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
800062e4:	00f707b3          	add	a5,a4,a5
800062e8:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:71 (discriminator 3)
        TaskList[tslot].TasksMap[i] = 0;
800062ec:	800226b7          	lui	a3,0x80022
800062f0:	fe842703          	lw	a4,-24(s0)
800062f4:	00070793          	mv	a5,a4
800062f8:	00579793          	slli	a5,a5,0x5
800062fc:	00e787b3          	add	a5,a5,a4
80006300:	fec42703          	lw	a4,-20(s0)
80006304:	00e787b3          	add	a5,a5,a4
80006308:	01478793          	addi	a5,a5,20
8000630c:	ec868713          	addi	a4,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80006310:	00279793          	slli	a5,a5,0x2
80006314:	00f707b3          	add	a5,a4,a5
80006318:	0007a623          	sw	zero,12(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:69 (discriminator 3)
    for(i=0;i<NUM_MAX_APP_TASKS;i++){
8000631c:	fec42783          	lw	a5,-20(s0)
80006320:	00178793          	addi	a5,a5,1
80006324:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:69 (discriminator 1)
80006328:	fec42703          	lw	a4,-20(s0)
8000632c:	00900793          	li	a5,9
80006330:	f8e7d6e3          	ble	a4,a5,800062bc <API_TaskAllocation+0x248>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:74
    }

    return tslot;
80006334:	fe842783          	lw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:75
}
80006338:	00078513          	mv	a0,a5
8000633c:	03c12083          	lw	ra,60(sp)
80006340:	03812403          	lw	s0,56(sp)
80006344:	04010113          	addi	sp,sp,64
80006348:	00008067          	ret

8000634c <API_GetTaskSlot>:
API_GetTaskSlot():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:77

unsigned int API_GetTaskSlot(unsigned int task_id, unsigned int app_id){
8000634c:	fd010113          	addi	sp,sp,-48
80006350:	02112623          	sw	ra,44(sp)
80006354:	02812423          	sw	s0,40(sp)
80006358:	03010413          	addi	s0,sp,48
8000635c:	fca42e23          	sw	a0,-36(s0)
80006360:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:79
    unsigned int i;
    for( i = 0; i < NUM_MAX_APP_TASKS; i++){
80006364:	fe042623          	sw	zero,-20(s0)
80006368:	0980006f          	j	80006400 <API_GetTaskSlot+0xb4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:80
        if(task_id == TaskList[i].TaskID && app_id == TaskList[i].AppID && TaskList[i].status != TASK_SLOT_EMPTY)
8000636c:	800226b7          	lui	a3,0x80022
80006370:	fec42703          	lw	a4,-20(s0)
80006374:	00070793          	mv	a5,a4
80006378:	00579793          	slli	a5,a5,0x5
8000637c:	00e787b3          	add	a5,a5,a4
80006380:	00279793          	slli	a5,a5,0x2
80006384:	ec868713          	addi	a4,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80006388:	00e787b3          	add	a5,a5,a4
8000638c:	0107a783          	lw	a5,16(a5)
80006390:	fdc42703          	lw	a4,-36(s0)
80006394:	06f71063          	bne	a4,a5,800063f4 <API_GetTaskSlot+0xa8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:80 (discriminator 1)
80006398:	800227b7          	lui	a5,0x80022
8000639c:	fec42703          	lw	a4,-20(s0)
800063a0:	ec878693          	addi	a3,a5,-312 # 80021ec8 <__stack_top+0xfffdfc68>
800063a4:	00070793          	mv	a5,a4
800063a8:	00579793          	slli	a5,a5,0x5
800063ac:	00e787b3          	add	a5,a5,a4
800063b0:	00279793          	slli	a5,a5,0x2
800063b4:	00f687b3          	add	a5,a3,a5
800063b8:	0147a783          	lw	a5,20(a5)
800063bc:	fd842703          	lw	a4,-40(s0)
800063c0:	02f71a63          	bne	a4,a5,800063f4 <API_GetTaskSlot+0xa8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:80 (discriminator 2)
800063c4:	800226b7          	lui	a3,0x80022
800063c8:	fec42703          	lw	a4,-20(s0)
800063cc:	00070793          	mv	a5,a4
800063d0:	00579793          	slli	a5,a5,0x5
800063d4:	00e787b3          	add	a5,a5,a4
800063d8:	00279793          	slli	a5,a5,0x2
800063dc:	ec868713          	addi	a4,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
800063e0:	00e787b3          	add	a5,a5,a4
800063e4:	0007a783          	lw	a5,0(a5)
800063e8:	00078663          	beqz	a5,800063f4 <API_GetTaskSlot+0xa8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:81
            return i;
800063ec:	fec42783          	lw	a5,-20(s0)
800063f0:	02c0006f          	j	8000641c <API_GetTaskSlot+0xd0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:79 (discriminator 2)
    for( i = 0; i < NUM_MAX_APP_TASKS; i++){
800063f4:	fec42783          	lw	a5,-20(s0)
800063f8:	00178793          	addi	a5,a5,1
800063fc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:79 (discriminator 1)
80006400:	fec42703          	lw	a4,-20(s0)
80006404:	00900793          	li	a5,9
80006408:	f6e7f2e3          	bleu	a4,a5,8000636c <API_GetTaskSlot+0x20>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:83
    }
    prints("returning erro2\n");
8000640c:	800087b7          	lui	a5,0x80008
80006410:	81878513          	addi	a0,a5,-2024 # 80007818 <__stack_top+0xfffc55b8>
80006414:	a21fc0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:84
    return ERRO;
80006418:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:85
}
8000641c:	00078513          	mv	a0,a5
80006420:	02c12083          	lw	ra,44(sp)
80006424:	02812403          	lw	s0,40(sp)
80006428:	03010113          	addi	sp,sp,48
8000642c:	00008067          	ret

80006430 <API_TaskStart>:
API_TaskStart():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:87

void API_TaskStart(unsigned int slot){
80006430:	fd010113          	addi	sp,sp,-48
80006434:	02112623          	sw	ra,44(sp)
80006438:	02812423          	sw	s0,40(sp)
8000643c:	03010413          	addi	s0,sp,48
80006440:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:89
    BaseType_t xReturned;
    TaskList[slot].status = TASK_SLOT_RUNNING;
80006444:	800226b7          	lui	a3,0x80022
80006448:	fdc42703          	lw	a4,-36(s0)
8000644c:	00070793          	mv	a5,a4
80006450:	00579793          	slli	a5,a5,0x5
80006454:	00e787b3          	add	a5,a5,a4
80006458:	00279793          	slli	a5,a5,0x2
8000645c:	ec868713          	addi	a4,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80006460:	00e787b3          	add	a5,a5,a4
80006464:	00100713          	li	a4,1
80006468:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:100
                                    tskIDLE_PRIORITY+1,         //uxPriority
                                    &TaskList[slot].TaskHandler,// pxCreatedTask
                                    NULL,                       // puxStackBuffer
                                    &TaskList[slot].memRegion );//xRegions*/
    
    xReturned = xTaskCreate(TaskList[slot].mainAddr,
8000646c:	800227b7          	lui	a5,0x80022
80006470:	fdc42703          	lw	a4,-36(s0)
80006474:	ec878693          	addi	a3,a5,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80006478:	00070793          	mv	a5,a4
8000647c:	00579793          	slli	a5,a5,0x5
80006480:	00e787b3          	add	a5,a5,a4
80006484:	00279793          	slli	a5,a5,0x2
80006488:	00f687b3          	add	a5,a3,a5
8000648c:	02c7a783          	lw	a5,44(a5)
80006490:	00078513          	mv	a0,a5
80006494:	fdc42703          	lw	a4,-36(s0)
80006498:	00070793          	mv	a5,a4
8000649c:	00579793          	slli	a5,a5,0x5
800064a0:	00e787b3          	add	a5,a5,a4
800064a4:	00279793          	slli	a5,a5,0x2
800064a8:	01078713          	addi	a4,a5,16
800064ac:	800227b7          	lui	a5,0x80022
800064b0:	ec878793          	addi	a5,a5,-312 # 80021ec8 <__stack_top+0xfffdfc68>
800064b4:	00f707b3          	add	a5,a4,a5
800064b8:	00878793          	addi	a5,a5,8
800064bc:	00000893          	li	a7,0
800064c0:	00000813          	li	a6,0
800064c4:	00100713          	li	a4,1
800064c8:	00000693          	li	a3,0
800064cc:	00002637          	lui	a2,0x2
800064d0:	3e860613          	addi	a2,a2,1000 # 23e8 <HEAP_SIZE-0xdc18>
800064d4:	800085b7          	lui	a1,0x80008
800064d8:	82c58593          	addi	a1,a1,-2004 # 8000782c <__stack_top+0xfffc55cc>
800064dc:	9f9fb0ef          	jal	ra,80001ed4 <xTaskGenericCreate>
800064e0:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:106
                            "LaTask",
                            9192,//8192,//4096,//16384,
                            NULL,
                            tskIDLE_PRIORITY+1,
                            &TaskList[slot].TaskHandler);
    if( xReturned != pdPASS ){
800064e4:	fec42703          	lw	a4,-20(s0)
800064e8:	00100793          	li	a5,1
800064ec:	00f70a63          	beq	a4,a5,80006500 <API_TaskStart+0xd0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:107
        prints("ERROR - API_TaskStart!!!\n");
800064f0:	800087b7          	lui	a5,0x80008
800064f4:	83478513          	addi	a0,a5,-1996 # 80007834 <__stack_top+0xfffc55d4>
800064f8:	93dfc0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:109
    }
    return;
800064fc:	00000013          	nop
80006500:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:110
}
80006504:	02c12083          	lw	ra,44(sp)
80006508:	02812403          	lw	s0,40(sp)
8000650c:	03010113          	addi	sp,sp,48
80006510:	00008067          	ret

80006514 <API_FinishRunningTask>:
API_FinishRunningTask():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:113


void API_FinishRunningTask(){
80006514:	fe010113          	addi	sp,sp,-32
80006518:	00112e23          	sw	ra,28(sp)
8000651c:	00812c23          	sw	s0,24(sp)
80006520:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:115
    int i;
    unsigned int slot = API_GetCurrentTaskSlot();
80006524:	a39ff0ef          	jal	ra,80005f5c <API_GetCurrentTaskSlot>
80006528:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:116
    while(API_checkPipe(slot) == 1){
8000652c:	00c0006f          	j	80006538 <API_FinishRunningTask+0x24>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:117
        vTaskDelay(1);
80006530:	00100513          	li	a0,1
80006534:	c99fb0ef          	jal	ra,800021cc <vTaskDelay>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:116
    while(API_checkPipe(slot) == 1){
80006538:	fe842503          	lw	a0,-24(s0)
8000653c:	56c000ef          	jal	ra,80006aa8 <API_checkPipe>
80006540:	00050713          	mv	a4,a0
80006544:	00100793          	li	a5,1
80006548:	fef704e3          	beq	a4,a5,80006530 <API_FinishRunningTask+0x1c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:119
    }
    vPortFree(TaskList[slot].taskAddr);
8000654c:	800227b7          	lui	a5,0x80022
80006550:	fe842703          	lw	a4,-24(s0)
80006554:	ec878693          	addi	a3,a5,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80006558:	00070793          	mv	a5,a4
8000655c:	00579793          	slli	a5,a5,0x5
80006560:	00e787b3          	add	a5,a5,a4
80006564:	00279793          	slli	a5,a5,0x2
80006568:	00f687b3          	add	a5,a3,a5
8000656c:	0287a783          	lw	a5,40(a5)
80006570:	00078513          	mv	a0,a5
80006574:	f0dfa0ef          	jal	ra,80001480 <vPortFree>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:121
    
    printsvsv("Task ", TaskList[slot].TaskID, "deleted with sucsess! From application ", TaskList[slot].AppID);
80006578:	800226b7          	lui	a3,0x80022
8000657c:	fe842703          	lw	a4,-24(s0)
80006580:	00070793          	mv	a5,a4
80006584:	00579793          	slli	a5,a5,0x5
80006588:	00e787b3          	add	a5,a5,a4
8000658c:	00279793          	slli	a5,a5,0x2
80006590:	ec868713          	addi	a4,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80006594:	00e787b3          	add	a5,a5,a4
80006598:	0107a783          	lw	a5,16(a5)
8000659c:	00078593          	mv	a1,a5
800065a0:	800227b7          	lui	a5,0x80022
800065a4:	fe842703          	lw	a4,-24(s0)
800065a8:	ec878693          	addi	a3,a5,-312 # 80021ec8 <__stack_top+0xfffdfc68>
800065ac:	00070793          	mv	a5,a4
800065b0:	00579793          	slli	a5,a5,0x5
800065b4:	00e787b3          	add	a5,a5,a4
800065b8:	00279793          	slli	a5,a5,0x2
800065bc:	00f687b3          	add	a5,a3,a5
800065c0:	0147a783          	lw	a5,20(a5)
800065c4:	00078693          	mv	a3,a5
800065c8:	800087b7          	lui	a5,0x80008
800065cc:	85078613          	addi	a2,a5,-1968 # 80007850 <__stack_top+0xfffc55f0>
800065d0:	800087b7          	lui	a5,0x80008
800065d4:	87878513          	addi	a0,a5,-1928 # 80007878 <__stack_top+0xfffc5618>
800065d8:	951fc0ef          	jal	ra,80002f28 <printsvsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:122
    TaskList[slot].status = TASK_SLOT_EMPTY;
800065dc:	800226b7          	lui	a3,0x80022
800065e0:	fe842703          	lw	a4,-24(s0)
800065e4:	00070793          	mv	a5,a4
800065e8:	00579793          	slli	a5,a5,0x5
800065ec:	00e787b3          	add	a5,a5,a4
800065f0:	00279793          	slli	a5,a5,0x2
800065f4:	ec868713          	addi	a4,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
800065f8:	00e787b3          	add	a5,a5,a4
800065fc:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:124
    
    for(i = 0; i < NUM_MAX_APP_TASKS; i++){
80006600:	fe042623          	sw	zero,-20(s0)
80006604:	0c40006f          	j	800066c8 <API_FinishRunningTask+0x1b4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:125
        printsvsv("TaskList[", i, "]status: ", TaskList[i].status );
80006608:	800226b7          	lui	a3,0x80022
8000660c:	fec42703          	lw	a4,-20(s0)
80006610:	00070793          	mv	a5,a4
80006614:	00579793          	slli	a5,a5,0x5
80006618:	00e787b3          	add	a5,a5,a4
8000661c:	00279793          	slli	a5,a5,0x2
80006620:	ec868713          	addi	a4,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80006624:	00e787b3          	add	a5,a5,a4
80006628:	0007a783          	lw	a5,0(a5)
8000662c:	00078693          	mv	a3,a5
80006630:	800087b7          	lui	a5,0x80008
80006634:	88078613          	addi	a2,a5,-1920 # 80007880 <__stack_top+0xfffc5620>
80006638:	fec42583          	lw	a1,-20(s0)
8000663c:	800087b7          	lui	a5,0x80008
80006640:	88c78513          	addi	a0,a5,-1908 # 8000788c <__stack_top+0xfffc562c>
80006644:	8e5fc0ef          	jal	ra,80002f28 <printsvsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:126
        if(TaskList[i].status != TASK_SLOT_EMPTY){
80006648:	800226b7          	lui	a3,0x80022
8000664c:	fec42703          	lw	a4,-20(s0)
80006650:	00070793          	mv	a5,a4
80006654:	00579793          	slli	a5,a5,0x5
80006658:	00e787b3          	add	a5,a5,a4
8000665c:	00279793          	slli	a5,a5,0x2
80006660:	ec868713          	addi	a4,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80006664:	00e787b3          	add	a5,a5,a4
80006668:	0007a783          	lw	a5,0(a5)
8000666c:	04078863          	beqz	a5,800066bc <API_FinishRunningTask+0x1a8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:127
            printsvsv("Returning because of: ", i, "TaskList[i].status ", TaskList[i].status);
80006670:	800226b7          	lui	a3,0x80022
80006674:	fec42703          	lw	a4,-20(s0)
80006678:	00070793          	mv	a5,a4
8000667c:	00579793          	slli	a5,a5,0x5
80006680:	00e787b3          	add	a5,a5,a4
80006684:	00279793          	slli	a5,a5,0x2
80006688:	ec868713          	addi	a4,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
8000668c:	00e787b3          	add	a5,a5,a4
80006690:	0007a783          	lw	a5,0(a5)
80006694:	00078693          	mv	a3,a5
80006698:	800087b7          	lui	a5,0x80008
8000669c:	89878613          	addi	a2,a5,-1896 # 80007898 <__stack_top+0xfffc5638>
800066a0:	fec42583          	lw	a1,-20(s0)
800066a4:	800087b7          	lui	a5,0x80008
800066a8:	8ac78513          	addi	a0,a5,-1876 # 800078ac <__stack_top+0xfffc564c>
800066ac:	87dfc0ef          	jal	ra,80002f28 <printsvsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:128
            i = 0xffffffff;
800066b0:	fff00793          	li	a5,-1
800066b4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:129
            break;
800066b8:	01c0006f          	j	800066d4 <API_FinishRunningTask+0x1c0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:124 (discriminator 2)
    for(i = 0; i < NUM_MAX_APP_TASKS; i++){
800066bc:	fec42783          	lw	a5,-20(s0)
800066c0:	00178793          	addi	a5,a5,1
800066c4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:124 (discriminator 1)
800066c8:	fec42703          	lw	a4,-20(s0)
800066cc:	00900793          	li	a5,9
800066d0:	f2e7dce3          	ble	a4,a5,80006608 <API_FinishRunningTask+0xf4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:132
        }
    }
    if(i != 0xffffffff){
800066d4:	fec42703          	lw	a4,-20(s0)
800066d8:	fff00793          	li	a5,-1
800066dc:	00f70463          	beq	a4,a5,800066e4 <API_FinishRunningTask+0x1d0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:133
        API_setFreqIdle();
800066e0:	45c000ef          	jal	ra,80006b3c <API_setFreqIdle>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:135
    }
    API_SendFinishTask(TaskList[slot].TaskID, TaskList[slot].AppID);
800066e4:	800226b7          	lui	a3,0x80022
800066e8:	fe842703          	lw	a4,-24(s0)
800066ec:	00070793          	mv	a5,a4
800066f0:	00579793          	slli	a5,a5,0x5
800066f4:	00e787b3          	add	a5,a5,a4
800066f8:	00279793          	slli	a5,a5,0x2
800066fc:	ec868713          	addi	a4,a3,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80006700:	00e787b3          	add	a5,a5,a4
80006704:	0107a603          	lw	a2,16(a5)
80006708:	800227b7          	lui	a5,0x80022
8000670c:	fe842703          	lw	a4,-24(s0)
80006710:	ec878693          	addi	a3,a5,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80006714:	00070793          	mv	a5,a4
80006718:	00579793          	slli	a5,a5,0x5
8000671c:	00e787b3          	add	a5,a5,a4
80006720:	00279793          	slli	a5,a5,0x2
80006724:	00f687b3          	add	a5,a3,a5
80006728:	0147a783          	lw	a5,20(a5)
8000672c:	00078593          	mv	a1,a5
80006730:	00060513          	mv	a0,a2
80006734:	b74fd0ef          	jal	ra,80003aa8 <API_SendFinishTask>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:136
    vTaskDelete(TaskList[slot].TaskHandler);
80006738:	800227b7          	lui	a5,0x80022
8000673c:	fe842703          	lw	a4,-24(s0)
80006740:	ec878693          	addi	a3,a5,-312 # 80021ec8 <__stack_top+0xfffdfc68>
80006744:	00070793          	mv	a5,a4
80006748:	00579793          	slli	a5,a5,0x5
8000674c:	00e787b3          	add	a5,a5,a4
80006750:	00279793          	slli	a5,a5,0x2
80006754:	00f687b3          	add	a5,a3,a5
80006758:	0187a783          	lw	a5,24(a5)
8000675c:	00078513          	mv	a0,a5
80006760:	991fb0ef          	jal	ra,800020f0 <vTaskDelete>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:137
    return;
80006764:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/applications.c:138
}
80006768:	01c12083          	lw	ra,28(sp)
8000676c:	01812403          	lw	s0,24(sp)
80006770:	02010113          	addi	sp,sp,32
80006774:	00008067          	ret

80006778 <API_PipeInitialization>:
API_PipeInitialization():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:11
extern volatile ServicePacket ServicePipe[PIPE_SIZE];
extern unsigned int messageID;

////////////////////////////////////////////////////////////
// Initialize the PIPE, setting the status of each slot to FREE
void API_PipeInitialization(){
80006778:	fe010113          	addi	sp,sp,-32
8000677c:	00812e23          	sw	s0,28(sp)
80006780:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:13
    int i;
    messageID = 0;
80006784:	800217b7          	lui	a5,0x80021
80006788:	d807ae23          	sw	zero,-612(a5) # 80020d9c <__stack_top+0xfffdeb3c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:14
    for( i = 0; i < PIPE_SIZE; i++ ){
8000678c:	fe042623          	sw	zero,-20(s0)
80006790:	0740006f          	j	80006804 <API_PipeInitialization+0x8c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:15 (discriminator 3)
        MessagePipe[i].status = PIPE_FREE;
80006794:	800217b7          	lui	a5,0x80021
80006798:	fec42683          	lw	a3,-20(s0)
8000679c:	24400713          	li	a4,580
800067a0:	02e68733          	mul	a4,a3,a4
800067a4:	e1078793          	addi	a5,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
800067a8:	00f707b3          	add	a5,a4,a5
800067ac:	fff00713          	li	a4,-1
800067b0:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:16 (discriminator 3)
        MessagePipe[i].msgID  = 0;
800067b4:	800217b7          	lui	a5,0x80021
800067b8:	fec42683          	lw	a3,-20(s0)
800067bc:	e1078713          	addi	a4,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
800067c0:	24400793          	li	a5,580
800067c4:	02f687b3          	mul	a5,a3,a5
800067c8:	00f707b3          	add	a5,a4,a5
800067cc:	0007a423          	sw	zero,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:17 (discriminator 3)
        ServicePipe[i].status = PIPE_FREE;
800067d0:	800216b7          	lui	a3,0x80021
800067d4:	fec42703          	lw	a4,-20(s0)
800067d8:	00070793          	mv	a5,a4
800067dc:	00479793          	slli	a5,a5,0x4
800067e0:	40e787b3          	sub	a5,a5,a4
800067e4:	00279793          	slli	a5,a5,0x2
800067e8:	cac68713          	addi	a4,a3,-852 # 80020cac <__stack_top+0xfffdea4c>
800067ec:	00e787b3          	add	a5,a5,a4
800067f0:	fff00713          	li	a4,-1
800067f4:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:14 (discriminator 3)
    for( i = 0; i < PIPE_SIZE; i++ ){
800067f8:	fec42783          	lw	a5,-20(s0)
800067fc:	00178793          	addi	a5,a5,1
80006800:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:14 (discriminator 1)
80006804:	fec42703          	lw	a4,-20(s0)
80006808:	00300793          	li	a5,3
8000680c:	f8e7d4e3          	ble	a4,a5,80006794 <API_PipeInitialization+0x1c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:19
    }
    return;
80006810:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:20
}
80006814:	01c12403          	lw	s0,28(sp)
80006818:	02010113          	addi	sp,sp,32
8000681c:	00008067          	ret

80006820 <API_GetMessageSlot>:
API_GetMessageSlot():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:24

////////////////////////////////////////////////////////////
// Returns a free Message slot 
unsigned int API_GetMessageSlot(){
80006820:	fe010113          	addi	sp,sp,-32
80006824:	00812e23          	sw	s0,28(sp)
80006828:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:26
    int i;
    unsigned int sel = PIPE_FULL;
8000682c:	fdfe07b7          	lui	a5,0xfdfe0
80006830:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9db9d>
80006834:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:27
    for( i = 0; i < PIPE_SIZE; i++ ){
80006838:	fe042623          	sw	zero,-20(s0)
8000683c:	0980006f          	j	800068d4 <API_GetMessageSlot+0xb4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:28
        if (MessagePipe[i].status == PIPE_FREE){
80006840:	800217b7          	lui	a5,0x80021
80006844:	fec42683          	lw	a3,-20(s0)
80006848:	24400713          	li	a4,580
8000684c:	02e68733          	mul	a4,a3,a4
80006850:	e1078793          	addi	a5,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
80006854:	00f707b3          	add	a5,a4,a5
80006858:	0007a703          	lw	a4,0(a5)
8000685c:	fff00793          	li	a5,-1
80006860:	06f71463          	bne	a4,a5,800068c8 <API_GetMessageSlot+0xa8>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:29
            MessagePipe[i].status = PIPE_OCCUPIED;
80006864:	800217b7          	lui	a5,0x80021
80006868:	fec42683          	lw	a3,-20(s0)
8000686c:	24400713          	li	a4,580
80006870:	02e68733          	mul	a4,a3,a4
80006874:	e1078793          	addi	a5,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
80006878:	00f707b3          	add	a5,a4,a5
8000687c:	00100713          	li	a4,1
80006880:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:30
            MessagePipe[i].msgID = messageID;
80006884:	800217b7          	lui	a5,0x80021
80006888:	d9c7a703          	lw	a4,-612(a5) # 80020d9c <__stack_top+0xfffdeb3c>
8000688c:	800217b7          	lui	a5,0x80021
80006890:	fec42603          	lw	a2,-20(s0)
80006894:	e1078693          	addi	a3,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
80006898:	24400793          	li	a5,580
8000689c:	02f607b3          	mul	a5,a2,a5
800068a0:	00f687b3          	add	a5,a3,a5
800068a4:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:31
            messageID++;
800068a8:	800217b7          	lui	a5,0x80021
800068ac:	d9c7a783          	lw	a5,-612(a5) # 80020d9c <__stack_top+0xfffdeb3c>
800068b0:	00178713          	addi	a4,a5,1
800068b4:	800217b7          	lui	a5,0x80021
800068b8:	d8e7ae23          	sw	a4,-612(a5) # 80020d9c <__stack_top+0xfffdeb3c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:32
            sel = i;
800068bc:	fec42783          	lw	a5,-20(s0)
800068c0:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:33
            break;
800068c4:	01c0006f          	j	800068e0 <API_GetMessageSlot+0xc0>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:27 (discriminator 2)
    for( i = 0; i < PIPE_SIZE; i++ ){
800068c8:	fec42783          	lw	a5,-20(s0)
800068cc:	00178793          	addi	a5,a5,1
800068d0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:27 (discriminator 1)
800068d4:	fec42703          	lw	a4,-20(s0)
800068d8:	00300793          	li	a5,3
800068dc:	f6e7d2e3          	ble	a4,a5,80006840 <API_GetMessageSlot+0x20>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:36
        }
    }
    if(messageID > 16777215){
800068e0:	800217b7          	lui	a5,0x80021
800068e4:	d9c7a703          	lw	a4,-612(a5) # 80020d9c <__stack_top+0xfffdeb3c>
800068e8:	010007b7          	lui	a5,0x1000
800068ec:	06f76663          	bltu	a4,a5,80006958 <API_GetMessageSlot+0x138>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:37
        messageID = 256;
800068f0:	800217b7          	lui	a5,0x80021
800068f4:	10000713          	li	a4,256
800068f8:	d8e7ae23          	sw	a4,-612(a5) # 80020d9c <__stack_top+0xfffdeb3c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:38
        for( i = 0; i < PIPE_SIZE; i++ ){
800068fc:	fe042623          	sw	zero,-20(s0)
80006900:	04c0006f          	j	8000694c <API_GetMessageSlot+0x12c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:39 (discriminator 3)
            MessagePipe[i].msgID = (MessagePipe[i].msgID & 0x000000FF);
80006904:	800217b7          	lui	a5,0x80021
80006908:	fec42683          	lw	a3,-20(s0)
8000690c:	e1078713          	addi	a4,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
80006910:	24400793          	li	a5,580
80006914:	02f687b3          	mul	a5,a3,a5
80006918:	00f707b3          	add	a5,a4,a5
8000691c:	0087a783          	lw	a5,8(a5)
80006920:	0ff7f713          	andi	a4,a5,255
80006924:	800217b7          	lui	a5,0x80021
80006928:	fec42603          	lw	a2,-20(s0)
8000692c:	e1078693          	addi	a3,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
80006930:	24400793          	li	a5,580
80006934:	02f607b3          	mul	a5,a2,a5
80006938:	00f687b3          	add	a5,a3,a5
8000693c:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:38 (discriminator 3)
        for( i = 0; i < PIPE_SIZE; i++ ){
80006940:	fec42783          	lw	a5,-20(s0)
80006944:	00178793          	addi	a5,a5,1
80006948:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:38 (discriminator 1)
8000694c:	fec42703          	lw	a4,-20(s0)
80006950:	00300793          	li	a5,3
80006954:	fae7d8e3          	ble	a4,a5,80006904 <API_GetMessageSlot+0xe4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:42
        }
    }
    return sel;
80006958:	fe842783          	lw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:43
}
8000695c:	00078513          	mv	a0,a5
80006960:	01c12403          	lw	s0,28(sp)
80006964:	02010113          	addi	sp,sp,32
80006968:	00008067          	ret

8000696c <API_GetServiceSlot>:
API_GetServiceSlot():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:47

////////////////////////////////////////////////////////////
// Returns a free Service slot
unsigned int API_GetServiceSlot(){
8000696c:	fe010113          	addi	sp,sp,-32
80006970:	00812e23          	sw	s0,28(sp)
80006974:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:49
    int i;
    for( i = 0; i < PIPE_SIZE; i++ ){
80006978:	fe042623          	sw	zero,-20(s0)
8000697c:	06c0006f          	j	800069e8 <API_GetServiceSlot+0x7c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:50
        if (ServicePipe[i].status == PIPE_FREE){
80006980:	800216b7          	lui	a3,0x80021
80006984:	fec42703          	lw	a4,-20(s0)
80006988:	00070793          	mv	a5,a4
8000698c:	00479793          	slli	a5,a5,0x4
80006990:	40e787b3          	sub	a5,a5,a4
80006994:	00279793          	slli	a5,a5,0x2
80006998:	cac68713          	addi	a4,a3,-852 # 80020cac <__stack_top+0xfffdea4c>
8000699c:	00e787b3          	add	a5,a5,a4
800069a0:	0007a703          	lw	a4,0(a5)
800069a4:	fff00793          	li	a5,-1
800069a8:	02f71a63          	bne	a4,a5,800069dc <API_GetServiceSlot+0x70>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:51
            ServicePipe[i].status = PIPE_OCCUPIED;
800069ac:	800216b7          	lui	a3,0x80021
800069b0:	fec42703          	lw	a4,-20(s0)
800069b4:	00070793          	mv	a5,a4
800069b8:	00479793          	slli	a5,a5,0x4
800069bc:	40e787b3          	sub	a5,a5,a4
800069c0:	00279793          	slli	a5,a5,0x2
800069c4:	cac68713          	addi	a4,a3,-852 # 80020cac <__stack_top+0xfffdea4c>
800069c8:	00e787b3          	add	a5,a5,a4
800069cc:	00100713          	li	a4,1
800069d0:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:52
            return i;
800069d4:	fec42783          	lw	a5,-20(s0)
800069d8:	0240006f          	j	800069fc <API_GetServiceSlot+0x90>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:49 (discriminator 2)
    for( i = 0; i < PIPE_SIZE; i++ ){
800069dc:	fec42783          	lw	a5,-20(s0)
800069e0:	00178793          	addi	a5,a5,1
800069e4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:49 (discriminator 1)
800069e8:	fec42703          	lw	a4,-20(s0)
800069ec:	00300793          	li	a5,3
800069f0:	f8e7d8e3          	ble	a4,a5,80006980 <API_GetServiceSlot+0x14>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:55
        }
    }
    return PIPE_FULL;
800069f4:	fdfe07b7          	lui	a5,0xfdfe0
800069f8:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9db9d>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:56
}
800069fc:	00078513          	mv	a0,a5
80006a00:	01c12403          	lw	s0,28(sp)
80006a04:	02010113          	addi	sp,sp,32
80006a08:	00008067          	ret

80006a0c <API_ClearPipeSlot>:
API_ClearPipeSlot():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:60

////////////////////////////////////////////////////////////
// Clear one PipeSlot after send it
void API_ClearPipeSlot(unsigned int typeSlot){
80006a0c:	fd010113          	addi	sp,sp,-48
80006a10:	02812623          	sw	s0,44(sp)
80006a14:	03010413          	addi	s0,sp,48
80006a18:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:61
    unsigned type = typeSlot & 0xFFFF0000;
80006a1c:	fdc42703          	lw	a4,-36(s0)
80006a20:	ffff07b7          	lui	a5,0xffff0
80006a24:	00f777b3          	and	a5,a4,a5
80006a28:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:62
    unsigned slot = typeSlot & 0x0000FFFF;
80006a2c:	fdc42703          	lw	a4,-36(s0)
80006a30:	000107b7          	lui	a5,0x10
80006a34:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80006a38:	00f777b3          	and	a5,a4,a5
80006a3c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:64
    
    if (type == SERVICE){
80006a40:	fec42703          	lw	a4,-20(s0)
80006a44:	101007b7          	lui	a5,0x10100
80006a48:	02f71863          	bne	a4,a5,80006a78 <API_ClearPipeSlot+0x6c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:65
        ServicePipe[slot].status = PIPE_FREE;
80006a4c:	800216b7          	lui	a3,0x80021
80006a50:	fe842703          	lw	a4,-24(s0)
80006a54:	00070793          	mv	a5,a4
80006a58:	00479793          	slli	a5,a5,0x4
80006a5c:	40e787b3          	sub	a5,a5,a4
80006a60:	00279793          	slli	a5,a5,0x2
80006a64:	cac68713          	addi	a4,a3,-852 # 80020cac <__stack_top+0xfffdea4c>
80006a68:	00e787b3          	add	a5,a5,a4
80006a6c:	fff00713          	li	a4,-1
80006a70:	00e7a023          	sw	a4,0(a5) # 10100000 <RAM_SIZE+0x10080000>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:70
    } else { // type == MESSAGE
        //printsv("cleaning message pipe slot: ", slot);
        MessagePipe[slot].status = PIPE_FREE;
    }
    return;
80006a74:	0280006f          	j	80006a9c <API_ClearPipeSlot+0x90>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:68
        MessagePipe[slot].status = PIPE_FREE;
80006a78:	800217b7          	lui	a5,0x80021
80006a7c:	fe842683          	lw	a3,-24(s0)
80006a80:	24400713          	li	a4,580
80006a84:	02e68733          	mul	a4,a3,a4
80006a88:	e1078793          	addi	a5,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
80006a8c:	00f707b3          	add	a5,a4,a5
80006a90:	fff00713          	li	a4,-1
80006a94:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:70
    return;
80006a98:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:71
}
80006a9c:	02c12403          	lw	s0,44(sp)
80006aa0:	03010113          	addi	sp,sp,48
80006aa4:	00008067          	ret

80006aa8 <API_checkPipe>:
API_checkPipe():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:73

unsigned int API_checkPipe(unsigned int taskSlot){
80006aa8:	fd010113          	addi	sp,sp,-48
80006aac:	02812623          	sw	s0,44(sp)
80006ab0:	03010413          	addi	s0,sp,48
80006ab4:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:75
    unsigned int i;
    for(i = 0; i < PIPE_SIZE; i++){
80006ab8:	fe042623          	sw	zero,-20(s0)
80006abc:	0600006f          	j	80006b1c <API_checkPipe+0x74>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:80
        // printsv("i: ", i);
        // printsv("status: ", MessagePipe[i].status);
        // printsv("holder: ", MessagePipe[i].holder);
        // prints("---\n");
        if(MessagePipe[i].status == PIPE_OCCUPIED){
80006ac0:	800217b7          	lui	a5,0x80021
80006ac4:	fec42683          	lw	a3,-20(s0)
80006ac8:	24400713          	li	a4,580
80006acc:	02e68733          	mul	a4,a3,a4
80006ad0:	e1078793          	addi	a5,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
80006ad4:	00f707b3          	add	a5,a4,a5
80006ad8:	0007a703          	lw	a4,0(a5)
80006adc:	00100793          	li	a5,1
80006ae0:	02f71863          	bne	a4,a5,80006b10 <API_checkPipe+0x68>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:81
            if(MessagePipe[i].holder == taskSlot){
80006ae4:	800217b7          	lui	a5,0x80021
80006ae8:	fec42683          	lw	a3,-20(s0)
80006aec:	e1078713          	addi	a4,a5,-496 # 80020e10 <__stack_top+0xfffdebb0>
80006af0:	24400793          	li	a5,580
80006af4:	02f687b3          	mul	a5,a3,a5
80006af8:	00f707b3          	add	a5,a4,a5
80006afc:	0047a783          	lw	a5,4(a5)
80006b00:	fdc42703          	lw	a4,-36(s0)
80006b04:	00f71663          	bne	a4,a5,80006b10 <API_checkPipe+0x68>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:82
                return 1;
80006b08:	00100793          	li	a5,1
80006b0c:	0200006f          	j	80006b2c <API_checkPipe+0x84>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:75 (discriminator 2)
    for(i = 0; i < PIPE_SIZE; i++){
80006b10:	fec42783          	lw	a5,-20(s0)
80006b14:	00178793          	addi	a5,a5,1
80006b18:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:75 (discriminator 1)
80006b1c:	fec42703          	lw	a4,-20(s0)
80006b20:	00300793          	li	a5,3
80006b24:	f8e7fee3          	bleu	a4,a5,80006ac0 <API_checkPipe+0x18>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:86
            }
        }
    }
    return 0;
80006b28:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/packet.c:87
}
80006b2c:	00078513          	mv	a0,a5
80006b30:	02c12403          	lw	s0,44(sp)
80006b34:	03010113          	addi	sp,sp,48
80006b38:	00008067          	ret

80006b3c <API_setFreqIdle>:
API_setFreqIdle():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/dvfs.c:3
#include "dvfs.h"

void API_setFreqIdle(){
80006b3c:	ff010113          	addi	sp,sp,-16
80006b40:	00112623          	sw	ra,12(sp)
80006b44:	00812423          	sw	s0,8(sp)
80006b48:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/dvfs.c:4
    prints("API_setFreqIdle\n ");
80006b4c:	800087b7          	lui	a5,0x80008
80006b50:	8c478513          	addi	a0,a5,-1852 # 800078c4 <__stack_top+0xfffc5664>
80006b54:	ae0fc0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/dvfs.c:5
    *frequencyScale = FREQ_IDLE;
80006b58:	800087b7          	lui	a5,0x80008
80006b5c:	a807a783          	lw	a5,-1408(a5) # 80007a80 <__stack_top+0xfffc5820>
80006b60:	00a00713          	li	a4,10
80006b64:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/dvfs.c:6
    return;
80006b68:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/dvfs.c:7
}
80006b6c:	00c12083          	lw	ra,12(sp)
80006b70:	00812403          	lw	s0,8(sp)
80006b74:	01010113          	addi	sp,sp,16
80006b78:	00008067          	ret

80006b7c <API_setFreqScale>:
API_setFreqScale():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/dvfs.c:9

void API_setFreqScale(unsigned int scale){
80006b7c:	fe010113          	addi	sp,sp,-32
80006b80:	00812e23          	sw	s0,28(sp)
80006b84:	02010413          	addi	s0,sp,32
80006b88:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/dvfs.c:10
    *frequencyScale = scale;
80006b8c:	800087b7          	lui	a5,0x80008
80006b90:	a807a783          	lw	a5,-1408(a5) # 80007a80 <__stack_top+0xfffc5820>
80006b94:	fec42703          	lw	a4,-20(s0)
80006b98:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/dvfs.c:11
    return;
80006b9c:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/dvfs.c:12
}
80006ba0:	01c12403          	lw	s0,28(sp)
80006ba4:	02010113          	addi	sp,sp,32
80006ba8:	00008067          	ret

80006bac <printExecutedInstructions>:
printExecutedInstructions():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:4
#include "thermal.h"


void printExecutedInstructions(){
80006bac:	ff010113          	addi	sp,sp,-16
80006bb0:	00112623          	sw	ra,12(sp)
80006bb4:	00812423          	sw	s0,8(sp)
80006bb8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:5
    vPortEnterCritical();
80006bbc:	a51fa0ef          	jal	ra,8000160c <vPortEnterCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:6
    prints("--------------------------\n");
80006bc0:	800087b7          	lui	a5,0x80008
80006bc4:	8d878513          	addi	a0,a5,-1832 # 800078d8 <__stack_top+0xfffc5678>
80006bc8:	a6cfc0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:7
    printsv("Branch:\t\t",      HW_get_32bit_reg(BRANCH_INST));
80006bcc:	900007b7          	lui	a5,0x90000
80006bd0:	ff478513          	addi	a0,a5,-12 # 8ffffff4 <__stack_top+0xffbdd94>
80006bd4:	b84fa0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
80006bd8:	00050793          	mv	a5,a0
80006bdc:	00078593          	mv	a1,a5
80006be0:	800087b7          	lui	a5,0x80008
80006be4:	8f478513          	addi	a0,a5,-1804 # 800078f4 <__stack_top+0xfffc5694>
80006be8:	af8fc0ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:8
    printsv("Arithmetic:\t",    HW_get_32bit_reg(ARITH_INST));
80006bec:	900007b7          	lui	a5,0x90000
80006bf0:	ff078513          	addi	a0,a5,-16 # 8ffffff0 <__stack_top+0xffbdd90>
80006bf4:	b64fa0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
80006bf8:	00050793          	mv	a5,a0
80006bfc:	00078593          	mv	a1,a5
80006c00:	800087b7          	lui	a5,0x80008
80006c04:	90078513          	addi	a0,a5,-1792 # 80007900 <__stack_top+0xfffc56a0>
80006c08:	ad8fc0ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:9
    printsv("Jump:\t\t",        HW_get_32bit_reg(JUMP_INST));
80006c0c:	900007b7          	lui	a5,0x90000
80006c10:	fec78513          	addi	a0,a5,-20 # 8fffffec <__stack_top+0xffbdd8c>
80006c14:	b44fa0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
80006c18:	00050793          	mv	a5,a0
80006c1c:	00078593          	mv	a1,a5
80006c20:	800087b7          	lui	a5,0x80008
80006c24:	91078513          	addi	a0,a5,-1776 # 80007910 <__stack_top+0xfffc56b0>
80006c28:	ab8fc0ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:10
    printsv("Move:\t\t",        HW_get_32bit_reg(MOVE_INST));
80006c2c:	900007b7          	lui	a5,0x90000
80006c30:	fe878513          	addi	a0,a5,-24 # 8fffffe8 <__stack_top+0xffbdd88>
80006c34:	b24fa0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
80006c38:	00050793          	mv	a5,a0
80006c3c:	00078593          	mv	a1,a5
80006c40:	800087b7          	lui	a5,0x80008
80006c44:	91878513          	addi	a0,a5,-1768 # 80007918 <__stack_top+0xfffc56b8>
80006c48:	a98fc0ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:11
    printsv("Load:\t\t",        HW_get_32bit_reg(LOAD_INST));
80006c4c:	900007b7          	lui	a5,0x90000
80006c50:	fe478513          	addi	a0,a5,-28 # 8fffffe4 <__stack_top+0xffbdd84>
80006c54:	b04fa0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
80006c58:	00050793          	mv	a5,a0
80006c5c:	00078593          	mv	a1,a5
80006c60:	800087b7          	lui	a5,0x80008
80006c64:	92078513          	addi	a0,a5,-1760 # 80007920 <__stack_top+0xfffc56c0>
80006c68:	a78fc0ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:12
    printsv("Store:\t\t",       HW_get_32bit_reg(STORE_INST));
80006c6c:	900007b7          	lui	a5,0x90000
80006c70:	fe078513          	addi	a0,a5,-32 # 8fffffe0 <__stack_top+0xffbdd80>
80006c74:	ae4fa0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
80006c78:	00050793          	mv	a5,a0
80006c7c:	00078593          	mv	a1,a5
80006c80:	800087b7          	lui	a5,0x80008
80006c84:	92878513          	addi	a0,a5,-1752 # 80007928 <__stack_top+0xfffc56c8>
80006c88:	a58fc0ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:13
    printsv("Shift:\t\t",       HW_get_32bit_reg(SHIFT_INST));
80006c8c:	900007b7          	lui	a5,0x90000
80006c90:	fdc78513          	addi	a0,a5,-36 # 8fffffdc <__stack_top+0xffbdd7c>
80006c94:	ac4fa0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
80006c98:	00050793          	mv	a5,a0
80006c9c:	00078593          	mv	a1,a5
80006ca0:	800087b7          	lui	a5,0x80008
80006ca4:	93478513          	addi	a0,a5,-1740 # 80007934 <__stack_top+0xfffc56d4>
80006ca8:	a38fc0ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:14
    printsv("Nop:\t\t",         HW_get_32bit_reg(NOP_INST));
80006cac:	900007b7          	lui	a5,0x90000
80006cb0:	fd878513          	addi	a0,a5,-40 # 8fffffd8 <__stack_top+0xffbdd78>
80006cb4:	aa4fa0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
80006cb8:	00050793          	mv	a5,a0
80006cbc:	00078593          	mv	a1,a5
80006cc0:	800087b7          	lui	a5,0x80008
80006cc4:	94078513          	addi	a0,a5,-1728 # 80007940 <__stack_top+0xfffc56e0>
80006cc8:	a18fc0ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:15
    printsv("Logical:\t",       HW_get_32bit_reg(LOGICAL_INST));
80006ccc:	900007b7          	lui	a5,0x90000
80006cd0:	fd478513          	addi	a0,a5,-44 # 8fffffd4 <__stack_top+0xffbdd74>
80006cd4:	a84fa0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
80006cd8:	00050793          	mv	a5,a0
80006cdc:	00078593          	mv	a1,a5
80006ce0:	800087b7          	lui	a5,0x80008
80006ce4:	94878513          	addi	a0,a5,-1720 # 80007948 <__stack_top+0xfffc56e8>
80006ce8:	9f8fc0ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:16
    printsv("MultDiv:\t",       HW_get_32bit_reg(MULT_DIV_INST));
80006cec:	900007b7          	lui	a5,0x90000
80006cf0:	fd078513          	addi	a0,a5,-48 # 8fffffd0 <__stack_top+0xffbdd70>
80006cf4:	a64fa0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
80006cf8:	00050793          	mv	a5,a0
80006cfc:	00078593          	mv	a1,a5
80006d00:	800087b7          	lui	a5,0x80008
80006d04:	95478513          	addi	a0,a5,-1708 # 80007954 <__stack_top+0xfffc56f4>
80006d08:	9d8fc0ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:17
    printsv("Weird:\t\t",       HW_get_32bit_reg(WEIRD_INST));
80006d0c:	900007b7          	lui	a5,0x90000
80006d10:	fcc78513          	addi	a0,a5,-52 # 8fffffcc <__stack_top+0xffbdd6c>
80006d14:	a44fa0ef          	jal	ra,80000f58 <HW_get_32bit_reg>
80006d18:	00050793          	mv	a5,a0
80006d1c:	00078593          	mv	a1,a5
80006d20:	800087b7          	lui	a5,0x80008
80006d24:	96078513          	addi	a0,a5,-1696 # 80007960 <__stack_top+0xfffc5700>
80006d28:	9b8fc0ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:18
    prints("--------------------------\n");
80006d2c:	800087b7          	lui	a5,0x80008
80006d30:	8d878513          	addi	a0,a5,-1832 # 800078d8 <__stack_top+0xfffc5678>
80006d34:	900fc0ef          	jal	ra,80002e34 <prints>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:19
    vPortExitCritical();
80006d38:	909fa0ef          	jal	ra,80001640 <vPortExitCritical>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:20
    return;
80006d3c:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:21
}
80006d40:	00c12083          	lw	ra,12(sp)
80006d44:	00812403          	lw	s0,8(sp)
80006d48:	01010113          	addi	sp,sp,16
80006d4c:	00008067          	ret

80006d50 <resetExecutedInstructions>:
resetExecutedInstructions():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:23

void resetExecutedInstructions(){
80006d50:	ff010113          	addi	sp,sp,-16
80006d54:	00112623          	sw	ra,12(sp)
80006d58:	00812423          	sw	s0,8(sp)
80006d5c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:24
    HW_set_32bit_reg(BRANCH_INST, 0);
80006d60:	00000593          	li	a1,0
80006d64:	900007b7          	lui	a5,0x90000
80006d68:	ff478513          	addi	a0,a5,-12 # 8ffffff4 <__stack_top+0xffbdd94>
80006d6c:	9e4fa0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:25
    HW_set_32bit_reg(ARITH_INST, 0);
80006d70:	00000593          	li	a1,0
80006d74:	900007b7          	lui	a5,0x90000
80006d78:	ff078513          	addi	a0,a5,-16 # 8ffffff0 <__stack_top+0xffbdd90>
80006d7c:	9d4fa0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:26
    HW_set_32bit_reg(JUMP_INST, 0);
80006d80:	00000593          	li	a1,0
80006d84:	900007b7          	lui	a5,0x90000
80006d88:	fec78513          	addi	a0,a5,-20 # 8fffffec <__stack_top+0xffbdd8c>
80006d8c:	9c4fa0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:27
    HW_set_32bit_reg(MOVE_INST, 0);
80006d90:	00000593          	li	a1,0
80006d94:	900007b7          	lui	a5,0x90000
80006d98:	fe878513          	addi	a0,a5,-24 # 8fffffe8 <__stack_top+0xffbdd88>
80006d9c:	9b4fa0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:28
    HW_set_32bit_reg(LOAD_INST, 0);
80006da0:	00000593          	li	a1,0
80006da4:	900007b7          	lui	a5,0x90000
80006da8:	fe478513          	addi	a0,a5,-28 # 8fffffe4 <__stack_top+0xffbdd84>
80006dac:	9a4fa0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:29
    HW_set_32bit_reg(STORE_INST, 0);
80006db0:	00000593          	li	a1,0
80006db4:	900007b7          	lui	a5,0x90000
80006db8:	fe078513          	addi	a0,a5,-32 # 8fffffe0 <__stack_top+0xffbdd80>
80006dbc:	994fa0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:30
    HW_set_32bit_reg(SHIFT_INST, 0);
80006dc0:	00000593          	li	a1,0
80006dc4:	900007b7          	lui	a5,0x90000
80006dc8:	fdc78513          	addi	a0,a5,-36 # 8fffffdc <__stack_top+0xffbdd7c>
80006dcc:	984fa0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:31
    HW_set_32bit_reg(NOP_INST, 0);
80006dd0:	00000593          	li	a1,0
80006dd4:	900007b7          	lui	a5,0x90000
80006dd8:	fd878513          	addi	a0,a5,-40 # 8fffffd8 <__stack_top+0xffbdd78>
80006ddc:	974fa0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:32
    HW_set_32bit_reg(LOGICAL_INST, 0);
80006de0:	00000593          	li	a1,0
80006de4:	900007b7          	lui	a5,0x90000
80006de8:	fd478513          	addi	a0,a5,-44 # 8fffffd4 <__stack_top+0xffbdd74>
80006dec:	964fa0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:33
    HW_set_32bit_reg(MULT_DIV_INST, 0);
80006df0:	00000593          	li	a1,0
80006df4:	900007b7          	lui	a5,0x90000
80006df8:	fd078513          	addi	a0,a5,-48 # 8fffffd0 <__stack_top+0xffbdd70>
80006dfc:	954fa0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:34
    HW_set_32bit_reg(WEIRD_INST, 0);
80006e00:	00000593          	li	a1,0
80006e04:	900007b7          	lui	a5,0x90000
80006e08:	fcc78513          	addi	a0,a5,-52 # 8fffffcc <__stack_top+0xffbdd6c>
80006e0c:	944fa0ef          	jal	ra,80000f50 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:35
    return;
80006e10:	00000013          	nop
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../FreeRTOS/thermal.c:36
}
80006e14:	00c12083          	lw	ra,12(sp)
80006e18:	00812403          	lw	s0,8(sp)
80006e1c:	01010113          	addi	sp,sp,16
80006e20:	00008067          	ret

80006e24 <PLIC_init>:
PLIC_init():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:124
{
80006e24:	fe010113          	addi	sp,sp,-32
80006e28:	00812e23          	sw	s0,28(sp)
80006e2c:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:126
    unsigned long hart_id = read_csr(mhartid);
80006e30:	f14027f3          	csrr	a5,mhartid
80006e34:	fef42423          	sw	a5,-24(s0)
80006e38:	fe842783          	lw	a5,-24(s0)
80006e3c:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
80006e40:	fe042623          	sw	zero,-20(s0)
80006e44:	03c0006f          	j	80006e80 <PLIC_init+0x5c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:131 (discriminator 3)
        PLIC->TARGET_ENABLES[hart_id].ENABLES[inc] = 0;
80006e48:	40000737          	lui	a4,0x40000
80006e4c:	fe442783          	lw	a5,-28(s0)
80006e50:	00579693          	slli	a3,a5,0x5
80006e54:	fec42783          	lw	a5,-20(s0)
80006e58:	00f686b3          	add	a3,a3,a5
80006e5c:	000017b7          	lui	a5,0x1
80006e60:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80006e64:	00f687b3          	add	a5,a3,a5
80006e68:	00279793          	slli	a5,a5,0x2
80006e6c:	00f707b3          	add	a5,a4,a5
80006e70:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 3)
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
80006e74:	fec42783          	lw	a5,-20(s0)
80006e78:	00178793          	addi	a5,a5,1
80006e7c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 1)
80006e80:	fec42783          	lw	a5,-20(s0)
80006e84:	fc0782e3          	beqz	a5,80006e48 <PLIC_init+0x24>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
80006e88:	fe042623          	sw	zero,-20(s0)
80006e8c:	0240006f          	j	80006eb0 <PLIC_init+0x8c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:139 (discriminator 3)
        PLIC->SOURCE_PRIORITY[inc] = 0;
80006e90:	40000737          	lui	a4,0x40000
80006e94:	fec42783          	lw	a5,-20(s0)
80006e98:	00279793          	slli	a5,a5,0x2
80006e9c:	00f707b3          	add	a5,a4,a5
80006ea0:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 3)
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
80006ea4:	fec42783          	lw	a5,-20(s0)
80006ea8:	00178793          	addi	a5,a5,1
80006eac:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 1)
80006eb0:	fec42703          	lw	a4,-20(s0)
80006eb4:	01e00793          	li	a5,30
80006eb8:	fce7fce3          	bleu	a4,a5,80006e90 <PLIC_init+0x6c>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:143
    PLIC->TARGET[hart_id].PRIORITY_THRESHOLD = 0;
80006ebc:	40000737          	lui	a4,0x40000
80006ec0:	fe442783          	lw	a5,-28(s0)
80006ec4:	20078793          	addi	a5,a5,512
80006ec8:	00c79793          	slli	a5,a5,0xc
80006ecc:	00f707b3          	add	a5,a4,a5
80006ed0:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:146
    set_csr(mie, MIP_MEIP);
80006ed4:	000017b7          	lui	a5,0x1
80006ed8:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80006edc:	3047a7f3          	csrrs	a5,mie,a5
80006ee0:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:147
}
80006ee4:	00000013          	nop
80006ee8:	01c12403          	lw	s0,28(sp)
80006eec:	02010113          	addi	sp,sp,32
80006ef0:	00008067          	ret

80006ef4 <main>:
main():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:58
extern volatile unsigned int NI_IRCount;

/*-----------------------------------------------------------*/

int main( void )
{
80006ef4:	fd010113          	addi	sp,sp,-48
80006ef8:	02112623          	sw	ra,44(sp)
80006efc:	02812423          	sw	s0,40(sp)
80006f00:	03010413          	addi	s0,sp,48
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:60
	char str[20];
    PLIC_init();
80006f04:	f21ff0ef          	jal	ra,80006e24 <PLIC_init>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:66

    /**************************************************************************
    * Initialize CoreUART with its base address, baud value, and line
    * configuration.
    *************************************************************************/
    UART_init(&g_uart, COREUARTAPB0_BASE_ADDR, BAUD_VALUE_115200,
80006f08:	00100693          	li	a3,1
80006f0c:	02c00613          	li	a2,44
80006f10:	700015b7          	lui	a1,0x70001
80006f14:	800227b7          	lui	a5,0x80022
80006f18:	25078513          	addi	a0,a5,592 # 80022250 <__stack_top+0xfffdfff0>
80006f1c:	90cfa0ef          	jal	ra,80001028 <UART_init>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:72
             (DATA_8_BITS | NO_PARITY) );
    
	/**************************************************************************
    * Initialize the Chronos platform stuff
    *************************************************************************/
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n Chronos platform initializing... \n" );
80006f20:	800087b7          	lui	a5,0x80008
80006f24:	98478593          	addi	a1,a5,-1660 # 80007984 <__stack_top+0xfffc5724>
80006f28:	800227b7          	lui	a5,0x80022
80006f2c:	25078513          	addi	a0,a5,592 # 80022250 <__stack_top+0xfffdfff0>
80006f30:	ac4fa0ef          	jal	ra,800011f4 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:73
	Chronos_init();
80006f34:	e11fb0ef          	jal	ra,80002d44 <Chronos_init>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:74
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This terminal belongs to the address: " );
80006f38:	800087b7          	lui	a5,0x80008
80006f3c:	9ac78593          	addi	a1,a5,-1620 # 800079ac <__stack_top+0xfffc574c>
80006f40:	800227b7          	lui	a5,0x80022
80006f44:	25078513          	addi	a0,a5,592 # 80022250 <__stack_top+0xfffdfff0>
80006f48:	aacfa0ef          	jal	ra,800011f4 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:75
	myItoa(ProcessorAddr, str, 16);
80006f4c:	800227b7          	lui	a5,0x80022
80006f50:	2587a783          	lw	a5,600(a5) # 80022258 <__stack_top+0xfffdfff8>
80006f54:	00078713          	mv	a4,a5
80006f58:	fdc40793          	addi	a5,s0,-36
80006f5c:	01000613          	li	a2,16
80006f60:	00078593          	mv	a1,a5
80006f64:	00070513          	mv	a0,a4
80006f68:	aa8fc0ef          	jal	ra,80003210 <myItoa>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:76
    UART_polled_tx_string( &g_uart, (const uint8_t *)str); UART_polled_tx_string( &g_uart, (const uint8_t *)"\n");
80006f6c:	fdc40793          	addi	a5,s0,-36
80006f70:	00078593          	mv	a1,a5
80006f74:	800227b7          	lui	a5,0x80022
80006f78:	25078513          	addi	a0,a5,592 # 80022250 <__stack_top+0xfffdfff0>
80006f7c:	a78fa0ef          	jal	ra,800011f4 <UART_polled_tx_string>
80006f80:	800087b7          	lui	a5,0x80008
80006f84:	9d878593          	addi	a1,a5,-1576 # 800079d8 <__stack_top+0xfffc5778>
80006f88:	800227b7          	lui	a5,0x80022
80006f8c:	25078513          	addi	a0,a5,592 # 80022250 <__stack_top+0xfffdfff0>
80006f90:	a64fa0ef          	jal	ra,800011f4 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:81
	
	//xTaskCreate( NI_TX_Handler, "TXHandler", 1024*4, NULL, (tskIDLE_PRIORITY + 1), NULL);
	//xTaskCreate( NI_RX_Handler, "RXHandler", 1024*3, NULL, (tskIDLE_PRIORITY + 1), NULL);

	if (ProcessorAddr == 0x0000){
80006f94:	800227b7          	lui	a5,0x80022
80006f98:	2587a783          	lw	a5,600(a5) # 80022258 <__stack_top+0xfffdfff8>
80006f9c:	04079663          	bnez	a5,80006fe8 <main+0xf4>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:82
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is the Global Master: \n" );
80006fa0:	800087b7          	lui	a5,0x80008
80006fa4:	9dc78593          	addi	a1,a5,-1572 # 800079dc <__stack_top+0xfffc577c>
80006fa8:	800227b7          	lui	a5,0x80022
80006fac:	25078513          	addi	a0,a5,592 # 80022250 <__stack_top+0xfffdfff0>
80006fb0:	a44fa0ef          	jal	ra,800011f4 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:84
		/* Create the GlobalManager task */
		xTaskCreate( GlobalManagerTask, "GlobalMaster", 1024*6, NULL, (tskIDLE_PRIORITY + 1), NULL );
80006fb4:	00000893          	li	a7,0
80006fb8:	00000813          	li	a6,0
80006fbc:	00000793          	li	a5,0
80006fc0:	00100713          	li	a4,1
80006fc4:	00000693          	li	a3,0
80006fc8:	00002637          	lui	a2,0x2
80006fcc:	80060613          	addi	a2,a2,-2048 # 1800 <HEAP_SIZE-0xe800>
80006fd0:	800085b7          	lui	a1,0x80008
80006fd4:	a0858593          	addi	a1,a1,-1528 # 80007a08 <__stack_top+0xfffc57a8>
80006fd8:	80007537          	lui	a0,0x80007
80006fdc:	04850513          	addi	a0,a0,72 # 80007048 <__stack_top+0xfffc4de8>
80006fe0:	ef5fa0ef          	jal	ra,80001ed4 <xTaskGenericCreate>
80006fe4:	0180006f          	j	80006ffc <main+0x108>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:86
	} else {
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is a Slave: \n" );
80006fe8:	800087b7          	lui	a5,0x80008
80006fec:	a1878593          	addi	a1,a5,-1512 # 80007a18 <__stack_top+0xfffc57b8>
80006ff0:	800227b7          	lui	a5,0x80022
80006ff4:	25078513          	addi	a0,a5,592 # 80022250 <__stack_top+0xfffdfff0>
80006ff8:	9fcfa0ef          	jal	ra,800011f4 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:93
		/* Create the two test tasks. */
		//xTaskCreate( vUartAliveTask, "Alive", 1024*3, NULL, (tskIDLE_PRIORITY + 1), NULL );
	}	

	/* Start the kernel.  From here on, only tasks and interrupts will run. */
	vTaskStartScheduler();
80006ffc:	a54fb0ef          	jal	ra,80002250 <vTaskStartScheduler>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:96

	/* Exit FreeRTOS */
	return 0;
80007000:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:97
}
80007004:	00078513          	mv	a0,a5
80007008:	02c12083          	lw	ra,44(sp)
8000700c:	02812403          	lw	s0,40(sp)
80007010:	03010113          	addi	sp,sp,48
80007014:	00008067          	ret

80007018 <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:102

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
80007018:	ff010113          	addi	sp,sp,-16
8000701c:	00812623          	sw	s0,12(sp)
80007020:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:113
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
80007024:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:114 (discriminator 1)
	for( ;; );
80007028:	0000006f          	j	80007028 <vApplicationMallocFailedHook+0x10>

8000702c <vApplicationIdleHook>:
vApplicationIdleHook():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:119
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
8000702c:	ff010113          	addi	sp,sp,-16
80007030:	00812623          	sw	s0,12(sp)
80007034:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:129
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
80007038:	00000013          	nop
8000703c:	00c12403          	lw	s0,12(sp)
80007040:	01010113          	addi	sp,sp,16
80007044:	00008067          	ret

80007048 <GlobalManagerTask>:
GlobalManagerTask():
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:180
// 	}
// }

/*-----------------------------------------------------------*/

static void GlobalManagerTask( void *pvParameters ){
80007048:	fc010113          	addi	sp,sp,-64
8000704c:	02112e23          	sw	ra,60(sp)
80007050:	02812c23          	sw	s0,56(sp)
80007054:	04010413          	addi	s0,sp,64
80007058:	fca42623          	sw	a0,-52(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:186
	( void ) pvParameters;
	int tick;
	char str[20];

	// Initialize the priority vector with the pattern policy
	GeneratePatternMatrix();
8000705c:	d25fd0ef          	jal	ra,80004d80 <GeneratePatternMatrix>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:189

	// Initialize the System Tiles Info
	API_TilesReset();
80007060:	bf9fd0ef          	jal	ra,80004c58 <API_TilesReset>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:192

	// Initialize the applications vector
    API_ApplicationsReset();
80007064:	b95fd0ef          	jal	ra,80004bf8 <API_ApplicationsReset>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:195

	// Informs the Repository that the GLOBALMASTER is ready to receive the application info
	API_RepositoryWakeUp();
80007068:	815fd0ef          	jal	ra,8000487c <API_RepositoryWakeUp>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:198 (discriminator 1)

	for(;;){
		tick = xTaskGetTickCount();
8000706c:	bfcfb0ef          	jal	ra,80002468 <xTaskGetTickCount>
80007070:	00050793          	mv	a5,a0
80007074:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:199 (discriminator 1)
		myItoa(tick, str, 10);
80007078:	fd840793          	addi	a5,s0,-40
8000707c:	00a00613          	li	a2,10
80007080:	00078593          	mv	a1,a5
80007084:	fec42503          	lw	a0,-20(s0)
80007088:	988fc0ef          	jal	ra,80003210 <myItoa>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:200 (discriminator 1)
		UART_polled_tx_string( &g_uart, (const uint8_t *)str);
8000708c:	fd840793          	addi	a5,s0,-40
80007090:	00078593          	mv	a1,a5
80007094:	800227b7          	lui	a5,0x80022
80007098:	25078513          	addi	a0,a5,592 # 80022250 <__stack_top+0xfffdfff0>
8000709c:	958fa0ef          	jal	ra,800011f4 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:201 (discriminator 1)
		printsv("GlobalMasterActive", tick);
800070a0:	fec42583          	lw	a1,-20(s0)
800070a4:	800087b7          	lui	a5,0x80008
800070a8:	a3878513          	addi	a0,a5,-1480 # 80007a38 <__stack_top+0xfffc57d8>
800070ac:	e35fb0ef          	jal	ra,80002ee0 <printsv>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:202 (discriminator 1)
		UART_polled_tx_string( &g_uart, (const uint8_t *)" GlobalMasterRoutine...\r\n" );
800070b0:	800087b7          	lui	a5,0x80008
800070b4:	a4c78593          	addi	a1,a5,-1460 # 80007a4c <__stack_top+0xfffc57ec>
800070b8:	800227b7          	lui	a5,0x80022
800070bc:	25078513          	addi	a0,a5,592 # 80022250 <__stack_top+0xfffdfff0>
800070c0:	934fa0ef          	jal	ra,800011f4 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:205 (discriminator 1)

		// Checks if there is some task to allocate...
		API_AllocateTasks(tick);
800070c4:	fec42783          	lw	a5,-20(s0)
800070c8:	00078513          	mv	a0,a5
800070cc:	d5dfd0ef          	jal	ra,80004e28 <API_AllocateTasks>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:207 (discriminator 1)

		vTaskDelay(1);
800070d0:	00100513          	li	a0,1
800070d4:	8f8fb0ef          	jal	ra,800021cc <vTaskDelay>
/casa/workspace/Chronos-RISCV4/FreeRTOS/Debug/../main.c:198 (discriminator 1)
		tick = xTaskGetTickCount();
800070d8:	f95ff06f          	j	8000706c <GlobalManagerTask+0x24>

800070dc <write>:
write():
800070dc:	81418793          	addi	a5,gp,-2028 # 80007a84 <_impure_ptr>
800070e0:	00060693          	mv	a3,a2
800070e4:	00058613          	mv	a2,a1
800070e8:	00050593          	mv	a1,a0
800070ec:	0007a503          	lw	a0,0(a5)
800070f0:	0040006f          	j	800070f4 <_write_r>

800070f4 <_write_r>:
_write_r():
800070f4:	ff010113          	addi	sp,sp,-16
800070f8:	00812423          	sw	s0,8(sp)
800070fc:	00050413          	mv	s0,a0
80007100:	00058513          	mv	a0,a1
80007104:	00060593          	mv	a1,a2
80007108:	00068613          	mv	a2,a3
8000710c:	0001a797          	auipc	a5,0x1a
80007110:	6007aa23          	sw	zero,1556(a5) # 80021720 <errno>
80007114:	00112623          	sw	ra,12(sp)
80007118:	d51f90ef          	jal	ra,80000e68 <_write>
8000711c:	fff00793          	li	a5,-1
80007120:	00f51c63          	bne	a0,a5,80007138 <_write_r+0x44>
80007124:	0001a797          	auipc	a5,0x1a
80007128:	5fc78793          	addi	a5,a5,1532 # 80021720 <errno>
8000712c:	0007a783          	lw	a5,0(a5)
80007130:	00078463          	beqz	a5,80007138 <_write_r+0x44>
80007134:	00f42023          	sw	a5,0(s0)
80007138:	00c12083          	lw	ra,12(sp)
8000713c:	00812403          	lw	s0,8(sp)
80007140:	01010113          	addi	sp,sp,16
80007144:	00008067          	ret
	...
80007150:	6568                	flw	fa0,76(a0)
80007152:	6c6c                	flw	fa1,92(s0)
80007154:	0000006f          	j	80007154 <_write_r+0x60>
80007158:	6544                	flw	fs1,12(a0)
8000715a:	6574                	flw	fa3,76(a0)
8000715c:	69657463          	bleu	s6,a0,800077e4 <_write_r+0x6f0>
80007160:	7520                	flw	fs0,104(a0)
80007162:	616d                	addi	sp,sp,240
80007164:	6320                	flw	fs0,64(a4)
80007166:	6168                	flw	fa0,68(a0)
80007168:	616d                	addi	sp,sp,240
8000716a:	6164                	flw	fs1,68(a0)
8000716c:	5420                	lw	s0,104(s0)
8000716e:	5345                	li	t1,-15
80007170:	4554                	lw	a3,12(a0)
80007172:	6420                	flw	fs0,72(s0)
80007174:	2065                	jal	8000721c <_write_r+0x128>
80007176:	74736973          	csrrsi	s2,0x747,6
8000717a:	6d65                	lui	s10,0x19
8000717c:	2161                	jal	80007604 <_write_r+0x510>
8000717e:	000a                	c.slli	zero,0x2
80007180:	7261                	lui	tp,0xffff8
80007182:	00203067          	0x203067
80007186:	0000                	unimp
80007188:	7261                	lui	tp,0xffff8
8000718a:	00203167          	0x203167
8000718e:	0000                	unimp
80007190:	7261                	lui	tp,0xffff8
80007192:	00203267          	0x203267
80007196:	0000                	unimp
80007198:	7261                	lui	tp,0xffff8
8000719a:	00203367          	0x203367
8000719e:	0000                	unimp
800071a0:	7261                	lui	tp,0xffff8
800071a2:	00203467          	0x203467
800071a6:	0000                	unimp
800071a8:	7974                	flw	fa3,116(a0)
800071aa:	6570                	flw	fa2,76(a0)
800071ac:	0020                	addi	s0,sp,8
800071ae:	0000                	unimp
800071b0:	74737953          	0x74737953
800071b4:	6d65                	lui	s10,0x19
800071b6:	6c6c6163          	bltu	s8,t1,80007878 <_write_r+0x784>
800071ba:	6e20                	flw	fs0,88(a2)
800071bc:	206fa3c3          	fmadd.s	ft7,ft11,ft6,ft4,rdn
800071c0:	6469                	lui	s0,0x1a
800071c2:	6e65                	lui	t3,0x19
800071c4:	6974                	flw	fa3,84(a0)
800071c6:	6966                	flw	fs2,88(sp)
800071c8:	61646163          	bltu	s0,s6,800077ca <_write_r+0x6d6>
800071cc:	0a21                	addi	s4,s4,8
800071ce:	0000                	unimp
800071d0:	7274                	flw	fa3,100(a2)
800071d2:	7061                	c.lui	zero,0xffff8
800071d4:	000a                	c.slli	zero,0x2
800071d6:	0000                	unimp
800071d8:	7065                	c.lui	zero,0xffff9
800071da:	00203a63          	0x203a63
800071de:	0000                	unimp
800071e0:	636d                	lui	t1,0x1b
800071e2:	7561                	lui	a0,0xffff8
800071e4:	203a6573          	csrrsi	a0,hideleg,20
800071e8:	0000                	unimp
800071ea:	0000                	unimp
800071ec:	0700                	addi	s0,sp,896
800071ee:	8000                	0x8000
800071f0:	0708                	addi	a0,sp,896
800071f2:	8000                	0x8000
800071f4:	0708                	addi	a0,sp,896
800071f6:	8000                	0x8000
800071f8:	0708                	addi	a0,sp,896
800071fa:	8000                	0x8000
800071fc:	0708                	addi	a0,sp,896
800071fe:	8000                	0x8000
80007200:	0708                	addi	a0,sp,896
80007202:	8000                	0x8000
80007204:	0708                	addi	a0,sp,896
80007206:	8000                	0x8000
80007208:	0708                	addi	a0,sp,896
8000720a:	8000                	0x8000
8000720c:	0708                	addi	a0,sp,896
8000720e:	8000                	0x8000
80007210:	0708                	addi	a0,sp,896
80007212:	8000                	0x8000
80007214:	06e0                	addi	s0,sp,844
80007216:	8000                	0x8000
80007218:	0708                	addi	a0,sp,896
8000721a:	8000                	0x8000
8000721c:	0708                	addi	a0,sp,896
8000721e:	8000                	0x8000
80007220:	0708                	addi	a0,sp,896
80007222:	8000                	0x8000
80007224:	0708                	addi	a0,sp,896
80007226:	8000                	0x8000
80007228:	0708                	addi	a0,sp,896
8000722a:	8000                	0x8000
8000722c:	0708                	addi	a0,sp,896
8000722e:	8000                	0x8000
80007230:	0708                	addi	a0,sp,896
80007232:	8000                	0x8000
80007234:	0708                	addi	a0,sp,896
80007236:	8000                	0x8000
80007238:	0708                	addi	a0,sp,896
8000723a:	8000                	0x8000
8000723c:	06f0                	addi	a2,sp,844
8000723e:	8000                	0x8000
80007240:	0708                	addi	a0,sp,896
80007242:	8000                	0x8000
80007244:	0708                	addi	a0,sp,896
80007246:	8000                	0x8000
80007248:	0708                	addi	a0,sp,896
8000724a:	8000                	0x8000
8000724c:	0708                	addi	a0,sp,896
8000724e:	8000                	0x8000
80007250:	0708                	addi	a0,sp,896
80007252:	8000                	0x8000
80007254:	0708                	addi	a0,sp,896
80007256:	8000                	0x8000
80007258:	0708                	addi	a0,sp,896
8000725a:	8000                	0x8000
8000725c:	0708                	addi	a0,sp,896
8000725e:	8000                	0x8000
80007260:	0708                	addi	a0,sp,896
80007262:	8000                	0x8000
80007264:	06a4                	addi	s1,sp,840
80007266:	8000                	0x8000
80007268:	0708                	addi	a0,sp,896
8000726a:	8000                	0x8000
8000726c:	0708                	addi	a0,sp,896
8000726e:	8000                	0x8000
80007270:	0708                	addi	a0,sp,896
80007272:	8000                	0x8000
80007274:	0708                	addi	a0,sp,896
80007276:	8000                	0x8000
80007278:	0708                	addi	a0,sp,896
8000727a:	8000                	0x8000
8000727c:	0708                	addi	a0,sp,896
8000727e:	8000                	0x8000
80007280:	0708                	addi	a0,sp,896
80007282:	8000                	0x8000
80007284:	0708                	addi	a0,sp,896
80007286:	8000                	0x8000
80007288:	0708                	addi	a0,sp,896
8000728a:	8000                	0x8000
8000728c:	0680                	addi	s0,sp,832
8000728e:	8000                	0x8000
80007290:	0708                	addi	a0,sp,896
80007292:	8000                	0x8000
80007294:	0708                	addi	a0,sp,896
80007296:	8000                	0x8000
80007298:	0708                	addi	a0,sp,896
8000729a:	8000                	0x8000
8000729c:	0708                	addi	a0,sp,896
8000729e:	8000                	0x8000
800072a0:	0708                	addi	a0,sp,896
800072a2:	8000                	0x8000
800072a4:	0708                	addi	a0,sp,896
800072a6:	8000                	0x8000
800072a8:	0708                	addi	a0,sp,896
800072aa:	8000                	0x8000
800072ac:	0708                	addi	a0,sp,896
800072ae:	8000                	0x8000
800072b0:	0708                	addi	a0,sp,896
800072b2:	8000                	0x8000
800072b4:	0708                	addi	a0,sp,896
800072b6:	8000                	0x8000
800072b8:	0708                	addi	a0,sp,896
800072ba:	8000                	0x8000
800072bc:	0708                	addi	a0,sp,896
800072be:	8000                	0x8000
800072c0:	0708                	addi	a0,sp,896
800072c2:	8000                	0x8000
800072c4:	0708                	addi	a0,sp,896
800072c6:	8000                	0x8000
800072c8:	0708                	addi	a0,sp,896
800072ca:	8000                	0x8000
800072cc:	05f8                	addi	a4,sp,716
800072ce:	8000                	0x8000
800072d0:	7830                	flw	fa2,112(s0)
800072d2:	0000                	unimp
800072d4:	500a                	0x500a
800072d6:	6f72                	flw	ft10,28(sp)
800072d8:	206d6167          	0x206d6167
800072dc:	6168                	flw	fa0,68(a0)
800072de:	78652073          	csrs	0x786,a0
800072e2:	7469                	lui	s0,0xffffa
800072e4:	6465                	lui	s0,0x19
800072e6:	7720                	flw	fs0,104(a4)
800072e8:	7469                	lui	s0,0xffffa
800072ea:	2068                	fld	fa0,192(s0)
800072ec:	65646f63          	bltu	s0,s6,8000794a <_write_r+0x856>
800072f0:	003a                	c.slli	zero,0xe
800072f2:	0000                	unimp
800072f4:	000d                	c.nop	3
800072f6:	0000                	unimp
800072f8:	4449                	li	s0,18
800072fa:	454c                	lw	a1,12(a0)
800072fc:	0000                	unimp
800072fe:	0000                	unimp
80007300:	000a                	c.slli	zero,0x2
80007302:	0000                	unimp
80007304:	7266                	flw	ft4,120(sp)
80007306:	203a6d6f          	jal	s10,800add08 <__stack_top+0x6baa8>
8000730a:	0000                	unimp
8000730c:	736d                	lui	t1,0xffffb
8000730e:	6f702067          	0x6f702067
80007312:	6e69                	lui	t3,0x1a
80007314:	6574                	flw	fa3,76(a0)
80007316:	3a72                	fld	fs4,312(sp)
80007318:	0020                	addi	s0,sp,8
8000731a:	0000                	unimp
8000731c:	694d                	lui	s2,0x13
8000731e:	686e                	flw	fa6,216(sp)
80007320:	2061                	jal	800073a8 <_write_r+0x2b4>
80007322:	6174                	flw	fa3,68(a0)
80007324:	49206b73          	csrrsi	s6,0x492,0
80007328:	3a44                	fld	fs1,176(a2)
8000732a:	0020                	addi	s0,sp,8
8000732c:	646e6553          	0x646e6553
80007330:	6e69                	lui	t3,0x1a
80007332:	65755167          	0x65755167
80007336:	6575                	lui	a0,0x1d
80007338:	665f 6f72 746e      	0x746e6f72665f
8000733e:	203a                	fld	ft0,392(sp)
80007340:	0000                	unimp
80007342:	0000                	unimp
80007344:	5041                	c.li	zero,-16
80007346:	5f49                	li	t5,-14
80007348:	7254                	flw	fa3,36(a2)
8000734a:	3279                	jal	80006cd8 <printExecutedInstructions+0x12c>
8000734c:	646e6553          	0x646e6553
80007350:	7320                	flw	fs0,96(a4)
80007352:	6375                	lui	t1,0x1d
80007354:	73736563          	bltu	t1,s7,80007a7e <mtimecmp+0x2>
80007358:	0a21                	addi	s4,s4,8
8000735a:	0000                	unimp
8000735c:	5041                	c.li	zero,-16
8000735e:	5f49                	li	t5,-14
80007360:	7254                	flw	fa3,36(a2)
80007362:	3279                	jal	80006cf0 <printExecutedInstructions+0x144>
80007364:	646e6553          	0x646e6553
80007368:	6620                	flw	fs0,72(a2)
8000736a:	6961                	lui	s2,0x18
8000736c:	656c                	flw	fa1,76(a0)
8000736e:	2064                	fld	fs1,192(s0)
80007370:	202d                	jal	8000739a <_write_r+0x2a6>
80007372:	6d65                	lui	s10,0x19
80007374:	7470                	flw	fa2,108(s0)
80007376:	2079                	jal	80007404 <_write_r+0x310>
80007378:	646e6553          	0x646e6553
8000737c:	7551                	lui	a0,0xffff4
8000737e:	7565                	lui	a0,0xffff9
80007380:	2165                	jal	80007828 <_write_r+0x734>
80007382:	000a                	c.slli	zero,0x2
80007384:	5041                	c.li	zero,-16
80007386:	5f49                	li	t5,-14
80007388:	7254                	flw	fa3,36(a2)
8000738a:	3279                	jal	80006d18 <printExecutedInstructions+0x16c>
8000738c:	646e6553          	0x646e6553
80007390:	6620                	flw	fs0,72(a2)
80007392:	6961                	lui	s2,0x18
80007394:	656c                	flw	fa1,76(a0)
80007396:	2064                	fld	fs1,192(s0)
80007398:	202d                	jal	800073c2 <_write_r+0x2ce>
8000739a:	494e                	lw	s2,208(sp)
8000739c:	545f 2058 636f      	0x636f2058545f
800073a2:	69707563          	bleu	s7,zero,80007a2c <_write_r+0x938>
800073a6:	6465                	lui	s0,0x19
800073a8:	0a21                	addi	s4,s4,8
800073aa:	0000                	unimp
800073ac:	6920                	flw	fs0,80(a0)
800073ae:	206e                	fld	ft0,216(sp)
800073b0:	6874                	flw	fa3,84(s0)
800073b2:	2065                	jal	8000745a <_write_r+0x366>
800073b4:	4950                	lw	a2,20(a0)
800073b6:	4550                	lw	a2,12(a0)
800073b8:	7320                	flw	fs0,96(a4)
800073ba:	6f6c                	flw	fa1,92(a4)
800073bc:	2074                	fld	fa3,192(s0)
800073be:	0000                	unimp
800073c0:	6441                	lui	s0,0x10
800073c2:	6964                	flw	fs1,84(a0)
800073c4:	676e                	flw	fa4,216(sp)
800073c6:	6120                	flw	fs0,64(a0)
800073c8:	6d20                	flw	fs0,88(a0)
800073ca:	74206773          	csrrsi	a4,0x742,0
800073ce:	6174206f          	j	8004a1e4 <__stack_top+0x7f84>
800073d2:	00206b73          	csrrsi	s6,frm,0
800073d6:	0000                	unimp
800073d8:	3e3e                	fld	ft8,488(sp)
800073da:	3e3e                	fld	ft8,488(sp)
800073dc:	413e                	lw	sp,204(sp)
800073de:	69656863          	bltu	a0,s6,80007a6e <_write_r+0x97a>
800073e2:	6120                	flw	fs0,64(a0)
800073e4:	7571                	lui	a0,0xffffc
800073e6:	2069                	jal	80007470 <_write_r+0x37c>
800073e8:	6f6e                	flw	ft10,216(sp)
800073ea:	7020                	flw	fs0,96(s0)
800073ec:	6e65                	lui	t3,0x19
800073ee:	6964                	flw	fs1,84(a0)
800073f0:	676e                	flw	fa4,216(sp)
800073f2:	0a21                	addi	s4,s4,8
800073f4:	0000                	unimp
800073f6:	0000                	unimp
800073f8:	7345                	lui	t1,0xffff1
800073fa:	6570                	flw	fa2,76(a0)
800073fc:	6172                	flw	ft2,28(sp)
800073fe:	646e                	flw	fs0,216(sp)
80007400:	654d206f          	j	800d9a54 <__stack_top+0x977f4>
80007404:	736e                	flw	ft6,248(sp)
80007406:	6761                	lui	a4,0x18
80007408:	6d65                	lui	s10,0x19
8000740a:	0a21                	addi	s4,s4,8
8000740c:	0000                	unimp
8000740e:	0000                	unimp
80007410:	6520                	flw	fs0,72(a0)
80007412:	72657073          	csrci	0x726,10
80007416:	6e61                	lui	t3,0x18
80007418:	6f64                	flw	fs1,92(a4)
8000741a:	6d20                	flw	fs0,88(a0)
8000741c:	6e65                	lui	t3,0x19
8000741e:	65676173          	csrrsi	sp,0x656,14
80007422:	206d                	jal	800074cc <_write_r+0x3d8>
80007424:	0000                	unimp
80007426:	0000                	unimp
80007428:	6174                	flw	fa3,68(a0)
8000742a:	6c736b73          	csrrsi	s6,0x6c7,6
8000742e:	0020746f          	jal	s0,8000e430 <__global_pointer$+0x61c0>
80007432:	0000                	unimp
80007434:	654d                	lui	a0,0x13
80007436:	736e                	flw	ft6,248(sp)
80007438:	6761                	lui	a4,0x18
8000743a:	6d65                	lui	s10,0x19
8000743c:	5220                	lw	s0,96(a2)
8000743e:	6365                	lui	t1,0x19
80007440:	6265                	lui	tp,0x19
80007442:	6469                	lui	s0,0x1a
80007444:	2161                	jal	800078cc <_write_r+0x7d8>
80007446:	000a                	c.slli	zero,0x2
80007448:	5854                	lw	a3,52(s0)
8000744a:	6920                	flw	fs0,80(a0)
8000744c:	746e                	flw	fs0,248(sp)
8000744e:	7265                	lui	tp,0xffff9
80007450:	7572                	flw	fa0,60(sp)
80007452:	7470                	flw	fa2,108(s0)
80007454:	6f69                	lui	t5,0x1a
80007456:	206e                	fld	ft0,216(sp)
80007458:	63746163          	bltu	s0,s7,80007a7a <mtime+0x2>
8000745c:	6568                	flw	fa0,76(a0)
8000745e:	0a64                	addi	s1,sp,284
80007460:	0000                	unimp
80007462:	0000                	unimp
80007464:	5852                	lw	a6,52(sp)
80007466:	6920                	flw	fs0,80(a0)
80007468:	746e                	flw	fs0,248(sp)
8000746a:	7265                	lui	tp,0xffff9
8000746c:	7572                	flw	fa0,60(sp)
8000746e:	7470                	flw	fa2,108(s0)
80007470:	6f69                	lui	t5,0x1a
80007472:	206e                	fld	ft0,216(sp)
80007474:	63746163          	bltu	s0,s7,80007a96 <__data_load+0x6>
80007478:	6568                	flw	fa0,76(a0)
8000747a:	0a64                	addi	s1,sp,284
8000747c:	0000                	unimp
8000747e:	0000                	unimp
80007480:	4154                	lw	a3,4(a0)
80007482:	415f4b53          	0x415f4b53
80007486:	4c4c                	lw	a1,28(s0)
80007488:	5441434f          	0x5441434f
8000748c:	4f49                	li	t5,18
8000748e:	5f4e                	lw	t5,240(sp)
80007490:	444e4553          	0x444e4553
80007494:	000a                	c.slli	zero,0x2
80007496:	0000                	unimp
80007498:	6154                	flw	fa3,4(a0)
8000749a:	73206b73          	csrrsi	s6,0x732,0
8000749e:	6f6c                	flw	fa1,92(a4)
800074a0:	3a74                	fld	fa3,240(a2)
800074a2:	0020                	addi	s0,sp,8
800074a4:	6154                	flw	fa3,4(a0)
800074a6:	73206b73          	csrrsi	s6,0x732,0
800074aa:	6f6c                	flw	fa1,92(a4)
800074ac:	2074                	fld	fa3,192(s0)
800074ae:	6154                	flw	fa3,4(a0)
800074b0:	64416b73          	csrrsi	s6,0x644,2
800074b4:	7264                	flw	fs1,100(a2)
800074b6:	203a                	fld	ft0,392(sp)
800074b8:	0000                	unimp
800074ba:	0000                	unimp
800074bc:	7266                	flw	ft4,120(sp)
800074be:	61206d6f          	jal	s10,8000dad0 <__global_pointer$+0x5860>
800074c2:	7070                	flw	fa2,100(s0)
800074c4:	696c                	flw	fa1,84(a0)
800074c6:	69746163          	bltu	s0,s7,80007b48 <impure_data+0x38>
800074ca:	00206e6f          	jal	t3,8000d4cc <__global_pointer$+0x525c>
800074ce:	0000                	unimp
800074d0:	4946                	lw	s2,80(sp)
800074d2:	494e                	lw	s2,208(sp)
800074d4:	44454853          	0x44454853
800074d8:	203a                	fld	ft0,392(sp)
800074da:	6154                	flw	fa3,4(a0)
800074dc:	00206b73          	csrrsi	s6,frm,0
800074e0:	4154                	lw	a3,4(a0)
800074e2:	415f4b53          	0x415f4b53
800074e6:	4c4c                	lw	a1,28(s0)
800074e8:	5441434f          	0x5441434f
800074ec:	4f49                	li	t5,18
800074ee:	5f4e                	lw	t5,240(sp)
800074f0:	4946                	lw	s2,80(sp)
800074f2:	494e                	lw	s2,208(sp)
800074f4:	44454853          	0x44454853
800074f8:	000a                	c.slli	zero,0x2
800074fa:	0000                	unimp
800074fc:	4154                	lw	a3,4(a0)
800074fe:	415f4b53          	0x415f4b53
80007502:	4c4c                	lw	a1,28(s0)
80007504:	5441434f          	0x5441434f
80007508:	4f49                	li	t5,18
8000750a:	5f4e                	lw	t5,240(sp)
8000750c:	43435553          	0x43435553
80007510:	5345                	li	t1,-15
80007512:	00000a53          	fadd.s	fs4,ft0,ft0,rne
80007516:	0000                	unimp
80007518:	67656843          	fmadd.q	fa6,fa0,fs6,fa2,unknown
8000751c:	7520756f          	jal	a0,8000ec6e <__global_pointer$+0x69fe>
80007520:	206d                	jal	800075ca <_write_r+0x4d6>
80007522:	4154                	lw	a3,4(a0)
80007524:	535f4b53          	0x535f4b53
80007528:	4154                	lw	a3,4(a0)
8000752a:	5452                	lw	s0,52(sp)
8000752c:	0a21                	addi	s4,s4,8
8000752e:	0000                	unimp
80007530:	67656843          	fmadd.q	fa6,fa0,fs6,fa2,unknown
80007534:	7520756f          	jal	a0,8000ec86 <__global_pointer$+0x6a16>
80007538:	206d                	jal	800075e2 <_write_r+0x4ee>
8000753a:	4154                	lw	a3,4(a0)
8000753c:	525f4b53          	0x525f4b53
80007540:	4e55                	li	t3,21
80007542:	0a21                	addi	s4,s4,8
80007544:	0000                	unimp
80007546:	0000                	unimp
80007548:	7266                	flw	ft4,120(sp)
8000754a:	61206d6f          	jal	s10,8000db5c <__global_pointer$+0x58ec>
8000754e:	7070                	flw	fa2,100(s0)
80007550:	203a                	fld	ft0,392(sp)
80007552:	0000                	unimp
80007554:	6e45                	lui	t3,0x11
80007556:	6261                	lui	tp,0x18
80007558:	696c                	flw	fa1,84(a0)
8000755a:	676e                	flw	fa4,216(sp)
8000755c:	5420                	lw	s0,104(s0)
8000755e:	7361                	lui	t1,0xffff8
80007560:	00203a6b          	0x203a6b
80007564:	746f6c53          	0x746f6c53
80007568:	203a                	fld	ft0,392(sp)
8000756a:	0000                	unimp
8000756c:	6154                	flw	fa3,4(a0)
8000756e:	203a6b73          	csrrsi	s6,hideleg,20
80007572:	0000                	unimp
80007574:	67656843          	fmadd.q	fa6,fa0,fs6,fa2,unknown
80007578:	7520756f          	jal	a0,8000ecca <__global_pointer$+0x6a5a>
8000757c:	206d                	jal	80007626 <_write_r+0x532>
8000757e:	656d                	lui	a0,0x1b
80007580:	67617373          	csrrci	t1,0x676,2
80007584:	2065                	jal	8000762c <_write_r+0x538>
80007586:	6572                	flw	fa0,28(sp)
80007588:	7571                	lui	a0,0xffffc
8000758a:	7365                	lui	t1,0xffff9
8000758c:	2174                	fld	fa3,192(a0)
8000758e:	4120                	lw	s0,64(a0)
80007590:	7070                	flw	fa2,100(s0)
80007592:	203a                	fld	ft0,392(sp)
80007594:	0000                	unimp
80007596:	0000                	unimp
80007598:	654d                	lui	a0,0x13
8000759a:	736e                	flw	ft6,248(sp)
8000759c:	6761                	lui	a4,0x18
8000759e:	6d65                	lui	s10,0x19
800075a0:	6e20                	flw	fs0,88(a2)
800075a2:	206fa3c3          	fmadd.s	ft7,ft11,ft6,ft4,rdn
800075a6:	6e65                	lui	t3,0x19
800075a8:	746e6f63          	bltu	t3,t1,80007d06 <__sbss_end+0x126>
800075ac:	6172                	flw	ft2,28(sp)
800075ae:	6164                	flw	fs1,68(a0)
800075b0:	202c                	fld	fa1,64(s0)
800075b2:	6461                	lui	s0,0x18
800075b4:	6369                	lui	t1,0x1a
800075b6:	6f69                	lui	t5,0x1a
800075b8:	616e                	flw	ft2,216(sp)
800075ba:	646e                	flw	fs0,216(sp)
800075bc:	6f61206f          	j	80019cb2 <__global_pointer$+0x11a42>
800075c0:	5020                	lw	s0,96(s0)
800075c2:	6e65                	lui	t3,0x19
800075c4:	6964                	flw	fs1,84(a0)
800075c6:	676e                	flw	fa4,216(sp)
800075c8:	6552                	flw	fa0,20(sp)
800075ca:	2171                	jal	80007a56 <_write_r+0x962>
800075cc:	000a                	c.slli	zero,0x2
800075ce:	0000                	unimp
800075d0:	654d                	lui	a0,0x13
800075d2:	736e                	flw	ft6,248(sp)
800075d4:	6761                	lui	a4,0x18
800075d6:	6d65                	lui	s10,0x19
800075d8:	6520                	flw	fs0,72(a0)
800075da:	636e                	flw	ft6,216(sp)
800075dc:	72746e6f          	jal	t3,8004e502 <__stack_top+0xc2a2>
800075e0:	6461                	lui	s0,0x18
800075e2:	2061                	jal	8000766a <_write_r+0x576>
800075e4:	6f6e                	flw	ft10,216(sp)
800075e6:	7020                	flw	fs0,96(s0)
800075e8:	7069                	c.lui	zero,0xffffa
800075ea:	2165                	jal	80007a92 <__data_load+0x2>
800075ec:	000a                	c.slli	zero,0x2
800075ee:	0000                	unimp
800075f0:	6554                	flw	fa3,12(a0)
800075f2:	206d                	jal	8000769c <_write_r+0x5a8>
800075f4:	6d75                	lui	s10,0x1d
800075f6:	2061                	jal	8000767e <_write_r+0x58a>
800075f8:	656d                	lui	a0,0x1b
800075fa:	736e                	flw	ft6,248(sp)
800075fc:	6761                	lui	a4,0x18
800075fe:	6d65                	lui	s10,0x19
80007600:	6320                	flw	fs0,64(a4)
80007602:	6568                	flw	fa0,76(a0)
80007604:	646e6167          	0x646e6167
80007608:	2e2e2e6f          	jal	t3,800e98ea <__stack_top+0xa768a>
8000760c:	000a                	c.slli	zero,0x2
8000760e:	0000                	unimp
80007610:	5245                	li	tp,-15
80007612:	4f52                	lw	t5,20(sp)
80007614:	2052                	fld	ft0,272(sp)
80007616:	7845                	lui	a6,0xffff1
80007618:	6574                	flw	fa3,76(a0)
8000761a:	6e72                	flw	ft8,28(sp)
8000761c:	6c61                	lui	s8,0x18
8000761e:	325f 495f 5152      	0x5152495f325f
80007624:	6148                	flw	fa0,4(a0)
80007626:	646e                	flw	fs0,216(sp)
80007628:	656c                	flw	fa1,76(a0)
8000762a:	2072                	fld	ft0,280(sp)
8000762c:	6e55                	lui	t3,0x15
8000762e:	776f6e6b          	0x776f6e6b
80007632:	2d6e                	fld	fs10,216(sp)
80007634:	76726553          	0x76726553
80007638:	6369                	lui	t1,0x1a
8000763a:	2065                	jal	800076e2 <_write_r+0x5ee>
8000763c:	0000                	unimp
8000763e:	0000                	unimp
80007640:	6620                	flw	fs0,72(a2)
80007642:	6f72                	flw	ft10,28(sp)
80007644:	206d                	jal	800076ee <_write_r+0x5fa>
80007646:	7061                	c.lui	zero,0xffff8
80007648:	2070                	fld	fa2,192(s0)
8000764a:	0000                	unimp
8000764c:	72617453          	0x72617453
80007650:	6974                	flw	fa3,84(a0)
80007652:	676e                	flw	fa4,216(sp)
80007654:	5420                	lw	s0,104(s0)
80007656:	7361                	lui	t1,0xffff8
80007658:	0000206b          	0x206b
8000765c:	654e                	flw	fa0,208(sp)
8000765e:	70612077          	0x70612077
80007662:	6c70                	flw	fa2,92(s0)
80007664:	6369                	lui	t1,0x1a
80007666:	7461                	lui	s0,0xffff8
80007668:	6f69                	lui	t5,0x1a
8000766a:	206e                	fld	ft0,216(sp)
8000766c:	6572                	flw	fa0,28(sp)
8000766e:	74736967          	0x74736967
80007672:	7265                	lui	tp,0xffff9
80007674:	6465                	lui	s0,0x19
80007676:	2d20                	fld	fs0,88(a0)
80007678:	4920                	lw	s0,80(a0)
8000767a:	3a44                	fld	fs1,176(a2)
8000767c:	0020                	addi	s0,sp,8
8000767e:	0000                	unimp
80007680:	6572                	flw	fa0,28(sp)
80007682:	7574                	flw	fa3,108(a0)
80007684:	6e72                	flw	ft8,28(sp)
80007686:	6e69                	lui	t3,0x1a
80007688:	72652067          	0x72652067
8000768c:	6f72                	flw	ft10,28(sp)
8000768e:	00000a33          	add	s4,zero,zero
80007692:	0000                	unimp
80007694:	6572                	flw	fa0,28(sp)
80007696:	7574                	flw	fa3,108(a0)
80007698:	6e72                	flw	ft8,28(sp)
8000769a:	6e69                	lui	t3,0x1a
8000769c:	72652067          	0x72652067
800076a0:	6f72                	flw	ft10,28(sp)
800076a2:	0a34                	addi	a3,sp,280
800076a4:	0000                	unimp
800076a6:	0000                	unimp
800076a8:	20736177          	0x20736177
800076ac:	7865                	lui	a6,0xffff9
800076ae:	6365                	lui	t1,0x19
800076b0:	7475                	lui	s0,0xffffd
800076b2:	6465                	lui	s0,0x19
800076b4:	6920                	flw	fs0,80(a0)
800076b6:	206e                	fld	ft0,216(sp)
800076b8:	0000                	unimp
800076ba:	0000                	unimp
800076bc:	7041                	c.lui	zero,0xffff0
800076be:	6c70                	flw	fa2,92(s0)
800076c0:	6369                	lui	t1,0x1a
800076c2:	7461                	lui	s0,0xffff8
800076c4:	6f69                	lui	t5,0x1a
800076c6:	206e                	fld	ft0,216(sp)
800076c8:	0000                	unimp
800076ca:	0000                	unimp
800076cc:	0909                	addi	s2,s2,2
800076ce:	6854                	flw	fa3,20(s0)
800076d0:	7369                	lui	t1,0xffffa
800076d2:	6120                	flw	fs0,64(a0)
800076d4:	7070                	flw	fa2,100(s0)
800076d6:	696c                	flw	fa1,84(a0)
800076d8:	69746163          	bltu	s0,s7,80007d5a <__sbss_end+0x17a>
800076dc:	73206e6f          	jal	t3,8000de0e <__global_pointer$+0x5b9e>
800076e0:	6974                	flw	fa3,84(a0)
800076e2:	6c6c                	flw	fa1,92(s0)
800076e4:	6e20                	flw	fs0,88(a2)
800076e6:	6565                	lui	a0,0x19
800076e8:	2064                	fld	fs1,192(s0)
800076ea:	6f74                	flw	fa3,92(a4)
800076ec:	7220                	flw	fs0,96(a2)
800076ee:	6e75                	lui	t3,0x1d
800076f0:	203a                	fld	ft0,392(sp)
800076f2:	0000                	unimp
800076f4:	0909                	addi	s2,s2,2
800076f6:	6854                	flw	fa3,20(s0)
800076f8:	7369                	lui	t1,0xffffa
800076fa:	6120                	flw	fs0,64(a0)
800076fc:	7070                	flw	fa2,100(s0)
800076fe:	696c                	flw	fa1,84(a0)
80007700:	69746163          	bltu	s0,s7,80007d82 <__sbss_end+0x1a2>
80007704:	69206e6f          	jal	t3,8000dd96 <__global_pointer$+0x5b26>
80007708:	4f442073          	csrs	0x4f4,s0
8000770c:	454e                	lw	a0,208(sp)
8000770e:	0a21                	addi	s4,s4,8
80007710:	0000                	unimp
80007712:	0000                	unimp
80007714:	6572                	flw	fa0,28(sp)
80007716:	7574                	flw	fa3,108(a0)
80007718:	6e72                	flw	ft8,28(sp)
8000771a:	6e69                	lui	t3,0x1a
8000771c:	72652067          	0x72652067
80007720:	6f72                	flw	ft10,28(sp)
80007722:	0a35                	addi	s4,s4,13
80007724:	0000                	unimp
80007726:	0000                	unimp
80007728:	6572                	flw	fa0,28(sp)
8000772a:	7574                	flw	fa3,108(a0)
8000772c:	6e72                	flw	ft8,28(sp)
8000772e:	6e69                	lui	t3,0x1a
80007730:	72652067          	0x72652067
80007734:	6f72                	flw	ft10,28(sp)
80007736:	0a36                	slli	s4,s4,0xd
80007738:	0000                	unimp
8000773a:	0000                	unimp
8000773c:	2049                	jal	800077be <_write_r+0x6ca>
8000773e:	20746f67          	0x20746f67
80007742:	2061                	jal	800077ca <_write_r+0x6d6>
80007744:	7266                	flw	ft4,120(sp)
80007746:	6565                	lui	a0,0x19
80007748:	7320                	flw	fs0,96(a4)
8000774a:	7265                	lui	tp,0xffff9
8000774c:	6976                	flw	fs2,92(sp)
8000774e:	73206563          	bltu	zero,s2,80007e78 <__sbss_end+0x298>
80007752:	6f6c                	flw	fa1,92(a4)
80007754:	2174                	fld	fa3,192(a0)
80007756:	2021                	jal	8000775e <_write_r+0x66a>
80007758:	3e2d                	jal	80007292 <_write_r+0x19e>
8000775a:	0020                	addi	s0,sp,8
8000775c:	7041                	c.lui	zero,0xffff0
8000775e:	6c70                	flw	fa2,92(s0)
80007760:	6369                	lui	t1,0x1a
80007762:	7461                	lui	s0,0xffff8
80007764:	6f69                	lui	t5,0x1a
80007766:	206e                	fld	ft0,216(sp)
80007768:	6c61                	lui	s8,0x18
8000776a:	6f6c                	flw	fa1,92(a4)
8000776c:	65746163          	bltu	s0,s7,80007dae <__sbss_end+0x1ce>
80007770:	3a64                	fld	fs1,240(a2)
80007772:	0020                	addi	s0,sp,8
80007774:	5309                	li	t1,-30
80007776:	6174                	flw	fa3,68(a0)
80007778:	7472                	flw	fs0,60(sp)
8000777a:	6320                	flw	fs0,64(a4)
8000777c:	616d6d6f          	jal	s10,800ddd92 <__stack_top+0x9bb32>
80007780:	646e                	flw	fs0,216(sp)
80007782:	7320                	flw	fs0,96(a4)
80007784:	6e65                	lui	t3,0x19
80007786:	2074                	fld	fa3,192(s0)
80007788:	6f74                	flw	fa3,92(a4)
8000778a:	6520                	flw	fs0,72(a0)
8000778c:	6576                	flw	fa0,92(sp)
8000778e:	7972                	flw	fs2,60(sp)
80007790:	7420                	flw	fs0,104(s0)
80007792:	7361                	lui	t1,0xffff8
80007794:	000a2e6b          	0xa2e6b
80007798:	6572                	flw	fa0,28(sp)
8000779a:	7574                	flw	fa3,108(a0)
8000779c:	6e72                	flw	ft8,28(sp)
8000779e:	6e69                	lui	t3,0x1a
800077a0:	72652067          	0x72652067
800077a4:	6f72                	flw	ft10,28(sp)
800077a6:	0a30                	addi	a2,sp,280
800077a8:	0000                	unimp
800077aa:	0000                	unimp
800077ac:	6572                	flw	fa0,28(sp)
800077ae:	7574                	flw	fa3,108(a0)
800077b0:	6e72                	flw	ft8,28(sp)
800077b2:	6e69                	lui	t3,0x1a
800077b4:	72652067          	0x72652067
800077b8:	6f72                	flw	ft10,28(sp)
800077ba:	0a31                	addi	s4,s4,12
800077bc:	0000                	unimp
800077be:	0000                	unimp
800077c0:	4544                	lw	s1,12(a0)
800077c2:	2055                	jal	80007866 <_write_r+0x772>
800077c4:	5552                	lw	a0,52(sp)
800077c6:	4d49                	li	s10,18
800077c8:	4e20                	lw	s0,88(a2)
800077ca:	5041204f          	fnmadd.s	ft0,ft2,ft4,fa0,rdn
800077ce:	5f49                	li	t5,-14
800077d0:	46746547          	fmsub.q	fa0,fs0,ft7,fs0,unknown
800077d4:	6572                	flw	fa0,28(sp)
800077d6:	5465                	li	s0,-7
800077d8:	7361                	lui	t1,0xffff8
800077da:	6f6c536b          	0x6f6c536b
800077de:	2874                	fld	fa3,208(s0)
800077e0:	0a29                	addi	s4,s4,10
800077e2:	0000                	unimp
800077e4:	20746f47          	fmsub.s	ft10,fs0,ft7,ft4,unknown
800077e8:	746f6c73          	csrrsi	s8,0x746,30
800077ec:	203a                	fld	ft0,392(sp)
800077ee:	0000                	unimp
800077f0:	6154                	flw	fa3,4(a0)
800077f2:	74206b73          	csrrsi	s6,0x742,0
800077f6:	6c61746f          	jal	s0,8001eebc <__global_pointer$+0x16c4c>
800077fa:	7320                	flw	fs0,96(a4)
800077fc:	7a69                	lui	s4,0xffffa
800077fe:	2065                	jal	800078a6 <_write_r+0x7b2>
80007800:	7428                	flw	fa0,104(s0)
80007802:	7478                	flw	fa4,108(s0)
80007804:	7373622b          	0x7373622b
80007808:	3a29                	jal	80007122 <_write_r+0x2e>
8000780a:	0020                	addi	s0,sp,8
8000780c:	6154                	flw	fa3,4(a0)
8000780e:	61206b73          	csrrsi	s6,0x612,0
80007812:	6464                	flw	fs1,76(s0)
80007814:	3a72                	fld	fs4,312(sp)
80007816:	0020                	addi	s0,sp,8
80007818:	6572                	flw	fa0,28(sp)
8000781a:	7574                	flw	fa3,108(a0)
8000781c:	6e72                	flw	ft8,28(sp)
8000781e:	6e69                	lui	t3,0x1a
80007820:	72652067          	0x72652067
80007824:	6f72                	flw	ft10,28(sp)
80007826:	0a32                	slli	s4,s4,0xc
80007828:	0000                	unimp
8000782a:	0000                	unimp
8000782c:	614c                	flw	fa1,4(a0)
8000782e:	6154                	flw	fa3,4(a0)
80007830:	00006b73          	csrrsi	s6,ustatus,0
80007834:	5245                	li	tp,-15
80007836:	4f52                	lw	t5,20(sp)
80007838:	2052                	fld	ft0,272(sp)
8000783a:	202d                	jal	80007864 <_write_r+0x770>
8000783c:	5041                	c.li	zero,-16
8000783e:	5f49                	li	t5,-14
80007840:	6154                	flw	fa3,4(a0)
80007842:	74536b73          	csrrsi	s6,0x745,6
80007846:	7261                	lui	tp,0xffff8
80007848:	2174                	fld	fa3,192(a0)
8000784a:	2121                	jal	80007c52 <__sbss_end+0x72>
8000784c:	000a                	c.slli	zero,0x2
8000784e:	0000                	unimp
80007850:	6564                	flw	fs1,76(a0)
80007852:	656c                	flw	fa1,76(a0)
80007854:	6574                	flw	fa3,76(a0)
80007856:	2064                	fld	fs1,192(s0)
80007858:	68746977          	0x68746977
8000785c:	7320                	flw	fs0,96(a4)
8000785e:	6375                	lui	t1,0x1d
80007860:	73736573          	csrrsi	a0,0x737,6
80007864:	2021                	jal	8000786c <_write_r+0x778>
80007866:	7246                	flw	ft4,112(sp)
80007868:	61206d6f          	jal	s10,8000de7a <__global_pointer$+0x5c0a>
8000786c:	7070                	flw	fa2,100(s0)
8000786e:	696c                	flw	fa1,84(a0)
80007870:	69746163          	bltu	s0,s7,80007ef2 <__sbss_end+0x312>
80007874:	00206e6f          	jal	t3,8000d876 <__global_pointer$+0x5606>
80007878:	6154                	flw	fa3,4(a0)
8000787a:	00206b73          	csrrsi	s6,frm,0
8000787e:	0000                	unimp
80007880:	735d                	lui	t1,0xffff7
80007882:	6174                	flw	fa3,68(a0)
80007884:	7574                	flw	fa3,108(a0)
80007886:	00203a73          	csrrc	s4,frm,zero
8000788a:	0000                	unimp
8000788c:	6154                	flw	fa3,4(a0)
8000788e:	694c6b73          	csrrsi	s6,0x694,24
80007892:	005b7473          	csrrci	s0,utvec,22
80007896:	0000                	unimp
80007898:	6154                	flw	fa3,4(a0)
8000789a:	694c6b73          	csrrsi	s6,0x694,24
8000789e:	695b7473          	csrrci	s0,0x695,22
800078a2:	2e5d                	jal	80007c58 <__sbss_end+0x78>
800078a4:	74617473          	csrrci	s0,0x746,2
800078a8:	7375                	lui	t1,0xffffd
800078aa:	0020                	addi	s0,sp,8
800078ac:	6552                	flw	fa0,20(sp)
800078ae:	7574                	flw	fa3,108(a0)
800078b0:	6e72                	flw	ft8,28(sp)
800078b2:	6e69                	lui	t3,0x1a
800078b4:	65622067          	0x65622067
800078b8:	73756163          	bltu	a0,s7,80007fda <__sbss_end+0x3fa>
800078bc:	2065                	jal	80007964 <_write_r+0x870>
800078be:	203a666f          	jal	a2,800ae2c0 <__stack_top+0x6c060>
800078c2:	0000                	unimp
800078c4:	5041                	c.li	zero,-16
800078c6:	5f49                	li	t5,-14
800078c8:	46746573          	csrrsi	a0,0x467,8
800078cc:	6572                	flw	fa0,28(sp)
800078ce:	4971                	li	s2,28
800078d0:	6c64                	flw	fs1,92(s0)
800078d2:	0a65                	addi	s4,s4,25
800078d4:	0020                	addi	s0,sp,8
800078d6:	0000                	unimp
800078d8:	2d2d                	jal	80007f12 <__sbss_end+0x332>
800078da:	2d2d                	jal	80007f14 <__sbss_end+0x334>
800078dc:	2d2d                	jal	80007f16 <__sbss_end+0x336>
800078de:	2d2d                	jal	80007f18 <__sbss_end+0x338>
800078e0:	2d2d                	jal	80007f1a <__sbss_end+0x33a>
800078e2:	2d2d                	jal	80007f1c <__sbss_end+0x33c>
800078e4:	2d2d                	jal	80007f1e <__sbss_end+0x33e>
800078e6:	2d2d                	jal	80007f20 <__sbss_end+0x340>
800078e8:	2d2d                	jal	80007f22 <__sbss_end+0x342>
800078ea:	2d2d                	jal	80007f24 <__sbss_end+0x344>
800078ec:	2d2d                	jal	80007f26 <__sbss_end+0x346>
800078ee:	2d2d                	jal	80007f28 <__sbss_end+0x348>
800078f0:	2d2d                	jal	80007f2a <__sbss_end+0x34a>
800078f2:	000a                	c.slli	zero,0x2
800078f4:	7242                	flw	ft4,48(sp)
800078f6:	6e61                	lui	t3,0x18
800078f8:	093a6863          	bltu	s4,s3,80007988 <_write_r+0x894>
800078fc:	0009                	c.nop	2
800078fe:	0000                	unimp
80007900:	7241                	lui	tp,0xffff0
80007902:	7469                	lui	s0,0xffffa
80007904:	6d68                	flw	fa0,92(a0)
80007906:	7465                	lui	s0,0xffff9
80007908:	6369                	lui	t1,0x1a
8000790a:	093a                	slli	s2,s2,0xe
8000790c:	0000                	unimp
8000790e:	0000                	unimp
80007910:	754a                	flw	fa0,176(sp)
80007912:	706d                	c.lui	zero,0xffffb
80007914:	093a                	slli	s2,s2,0xe
80007916:	0009                	c.nop	2
80007918:	6f4d                	lui	t5,0x13
8000791a:	6576                	flw	fa0,92(sp)
8000791c:	093a                	slli	s2,s2,0xe
8000791e:	0009                	c.nop	2
80007920:	6f4c                	flw	fa1,28(a4)
80007922:	6461                	lui	s0,0x18
80007924:	093a                	slli	s2,s2,0xe
80007926:	0009                	c.nop	2
80007928:	726f7453          	0x726f7453
8000792c:	3a65                	jal	800072e4 <_write_r+0x1f0>
8000792e:	0909                	addi	s2,s2,2
80007930:	0000                	unimp
80007932:	0000                	unimp
80007934:	66696853          	0x66696853
80007938:	3a74                	fld	fa3,240(a2)
8000793a:	0909                	addi	s2,s2,2
8000793c:	0000                	unimp
8000793e:	0000                	unimp
80007940:	6f4e                	flw	ft10,208(sp)
80007942:	3a70                	fld	fa2,240(a2)
80007944:	0909                	addi	s2,s2,2
80007946:	0000                	unimp
80007948:	6f4c                	flw	fa1,28(a4)
8000794a:	61636967          	0x61636967
8000794e:	3a6c                	fld	fa1,240(a2)
80007950:	0009                	c.nop	2
80007952:	0000                	unimp
80007954:	754d                	lui	a0,0xffff3
80007956:	746c                	flw	fa1,108(s0)
80007958:	6944                	flw	fs1,20(a0)
8000795a:	3a76                	fld	fs4,376(sp)
8000795c:	0009                	c.nop	2
8000795e:	0000                	unimp
80007960:	72696557          	0x72696557
80007964:	3a64                	fld	fs1,240(a2)
80007966:	0909                	addi	s2,s2,2
80007968:	0000                	unimp
8000796a:	0000                	unimp
8000796c:	0a0d                	addi	s4,s4,3
8000796e:	7246                	flw	ft4,112(sp)
80007970:	6565                	lui	a0,0x19
80007972:	5452                	lw	s0,52(sp)
80007974:	4520534f          	0x4520534f
80007978:	6178                	flw	fa4,68(a0)
8000797a:	706d                	c.lui	zero,0xffffb
8000797c:	656c                	flw	fa1,76(a0)
8000797e:	0a0d                	addi	s4,s4,3
80007980:	0000                	unimp
80007982:	0000                	unimp
80007984:	200a                	fld	ft0,128(sp)
80007986:	6f726843          	fmadd.q	fa6,ft4,fs7,fa3,unknown
8000798a:	6f6e                	flw	ft10,216(sp)
8000798c:	6c702073          	csrr	zero,0x6c7
80007990:	7461                	lui	s0,0xffff8
80007992:	6f66                	flw	ft10,88(sp)
80007994:	6d72                	flw	fs10,28(sp)
80007996:	6920                	flw	fs0,80(a0)
80007998:	696e                	flw	fs2,216(sp)
8000799a:	6974                	flw	fa3,84(a0)
8000799c:	6c61                	lui	s8,0x18
8000799e:	7a69                	lui	s4,0xffffa
800079a0:	6e69                	lui	t3,0x1a
800079a2:	2e2e2e67          	0x2e2e2e67
800079a6:	0a20                	addi	s0,sp,280
800079a8:	0000                	unimp
800079aa:	0000                	unimp
800079ac:	200a                	fld	ft0,128(sp)
800079ae:	6854                	flw	fa3,20(s0)
800079b0:	7369                	lui	t1,0xffffa
800079b2:	7420                	flw	fs0,104(s0)
800079b4:	7265                	lui	tp,0xffff9
800079b6:	696d                	lui	s2,0x1b
800079b8:	616e                	flw	ft2,216(sp)
800079ba:	206c                	fld	fa1,192(s0)
800079bc:	6562                	flw	fa0,24(sp)
800079be:	6f6c                	flw	fa1,92(a4)
800079c0:	676e                	flw	fa4,216(sp)
800079c2:	6f742073          	csrs	0x6f7,s0
800079c6:	7420                	flw	fs0,104(s0)
800079c8:	6568                	flw	fa0,76(a0)
800079ca:	6120                	flw	fs0,64(a0)
800079cc:	6464                	flw	fs1,76(s0)
800079ce:	6572                	flw	fa0,28(sp)
800079d0:	203a7373          	csrrci	t1,hideleg,20
800079d4:	0000                	unimp
800079d6:	0000                	unimp
800079d8:	000a                	c.slli	zero,0x2
800079da:	0000                	unimp
800079dc:	200a                	fld	ft0,128(sp)
800079de:	6854                	flw	fa3,20(s0)
800079e0:	7369                	lui	t1,0xffffa
800079e2:	7020                	flw	fs0,96(s0)
800079e4:	6f72                	flw	ft10,28(sp)
800079e6:	73736563          	bltu	t1,s7,80008110 <__sbss_end+0x530>
800079ea:	6920726f          	jal	tp,8000f07c <__global_pointer$+0x6e0c>
800079ee:	68742073          	csrs	0x687,s0
800079f2:	2065                	jal	80007a9a <__data_load+0xa>
800079f4:	626f6c47          	fmsub.d	fs8,ft10,ft6,fa2,unknown
800079f8:	6c61                	lui	s8,0x18
800079fa:	4d20                	lw	s0,88(a0)
800079fc:	7361                	lui	t1,0xffff8
800079fe:	6574                	flw	fa3,76(a0)
80007a00:	3a72                	fld	fs4,312(sp)
80007a02:	0a20                	addi	s0,sp,280
80007a04:	0000                	unimp
80007a06:	0000                	unimp
80007a08:	626f6c47          	fmsub.d	fs8,ft10,ft6,fa2,unknown
80007a0c:	6c61                	lui	s8,0x18
80007a0e:	614d                	addi	sp,sp,176
80007a10:	72657473          	csrrci	s0,0x726,10
80007a14:	0000                	unimp
80007a16:	0000                	unimp
80007a18:	200a                	fld	ft0,128(sp)
80007a1a:	6854                	flw	fa3,20(s0)
80007a1c:	7369                	lui	t1,0xffffa
80007a1e:	7020                	flw	fs0,96(s0)
80007a20:	6f72                	flw	ft10,28(sp)
80007a22:	73736563          	bltu	t1,s7,8000814c <__sbss_end+0x56c>
80007a26:	6920726f          	jal	tp,8000f0b8 <__global_pointer$+0x6e48>
80007a2a:	20612073          	csrs	0x206,sp
80007a2e:	76616c53          	0x76616c53
80007a32:	3a65                	jal	800073ea <_write_r+0x2f6>
80007a34:	0a20                	addi	s0,sp,280
80007a36:	0000                	unimp
80007a38:	626f6c47          	fmsub.d	fs8,ft10,ft6,fa2,unknown
80007a3c:	6c61                	lui	s8,0x18
80007a3e:	614d                	addi	sp,sp,176
80007a40:	72657473          	csrrci	s0,0x726,10
80007a44:	6341                	lui	t1,0x10
80007a46:	6974                	flw	fa3,84(a0)
80007a48:	6576                	flw	fa0,92(sp)
80007a4a:	0000                	unimp
80007a4c:	4720                	lw	s0,72(a4)
80007a4e:	6f6c                	flw	fa1,92(a4)
80007a50:	6162                	flw	ft2,24(sp)
80007a52:	4d6c                	lw	a1,92(a0)
80007a54:	7361                	lui	t1,0xffff8
80007a56:	6574                	flw	fa3,76(a0)
80007a58:	5272                	lw	tp,60(sp)
80007a5a:	6974756f          	jal	a0,8004f8f0 <__stack_top+0xd690>
80007a5e:	656e                	flw	fa0,216(sp)
80007a60:	2e2e                	fld	ft8,200(sp)
80007a62:	0d2e                	slli	s10,s10,0xb
80007a64:	000a                	c.slli	zero,0x2
	...
