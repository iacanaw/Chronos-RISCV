
miv-rv32im-freertos-port-test.elf:     file format elf32-littleriscv
miv-rv32im-freertos-port-test.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000000

Program Header:
    LOAD off    0x00001000 vaddr 0x80000000 paddr 0x80000000 align 2**12
         filesz 0x000076c0 memsz 0x00041db0 flags rwx

Sections:
Idx Name           Size      VMA       LMA       File off  Algn  Flags
  0 .text          000075c0  80000000  80000000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sdata         00000020  800075c0  800075c0  000085c0  2**4  CONTENTS, ALLOC, LOAD, DATA
  2 .data          000000e0  800075e0  800075e0  000085e0  2**4  CONTENTS, ALLOC, LOAD, DATA
  3 .sbss          00000070  800076c0  800076c0  000086c0  2**4  ALLOC
  4 .bss           0001a680  80007730  80007730  000086c0  2**4  ALLOC
  5 .heap          00010000  80021db0  80021db0  000086c0  2**4  ALLOC
  6 .stack         00010000  80031db0  80031db0  000086c0  2**4  ALLOC
  7 .debug_line    0000ada2  00000000  00000000  000086c0  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_info    0000f605  00000000  00000000  00013462  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev  00002a7e  00000000  00000000  00022a67  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000920  00000000  00000000  000254e8  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_str     00012bca  00000000  00000000  00025e08  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges  000007f0  00000000  00000000  000389d2  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro   000058dd  00000000  00000000  000391c2  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment       00000039  00000000  00000000  0003ea9f  2**0  CONTENTS, READONLY
 15 .debug_frame   000021cc  00000000  00000000  0003ead8  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
80000000 l    d  .text	00000000 .text
800075c0 l    d  .sdata	00000000 .sdata
800075e0 l    d  .data	00000000 .data
800076c0 l    d  .sbss	00000000 .sbss
80007730 l    d  .bss	00000000 .bss
80021db0 l    d  .heap	00000000 .heap
80031db0 l    d  .stack	00000000 .stack
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./riscv_hal/entry.o
8000000c l       .text	00000000 handle_reset
80000004 l       .text	00000000 nmi_vector
80000008 l       .text	00000000 trap_vector
80000030 l       .text	00000000 trap_entry
00000000 l    df *ABS*	00000000 init.c
80000180 l     F .text	00000050 zero_section
00000000 l    df *ABS*	00000000 riscv_hal.c
80000258 l     F .text	000000b8 PLIC_DisableIRQ
80000310 l     F .text	00000044 PLIC_ClaimIRQ
80000354 l     F .text	0000004c PLIC_CompleteIRQ
800076c0 l     O .sbss	00000008 g_systick_increment
00000000 l    df *ABS*	00000000 riscv_hal_stubs.c
00000000 l    df *ABS*	00000000 syscall.c
800076c8 l     O .sbss	00000008 g_stdio_uart
800076d0 l     O .sbss	00000004 g_stdio_uart_init_done
80000e58 l     F .text	00000030 stub
00000000 l    df *ABS*	00000000 core_uart_apb.c
00000000 l    df *ABS*	00000000 heap_2.c
80007730 l     O .bss	00019000 ucHeap
800076d4 l     O .sbss	00000008 xStart
800076dc l     O .sbss	00000008 xEnd
800075c0 l     O .sdata	00000004 xFreeBytesRemaining
800076e4 l     O .sbss	00000004 xHeapHasBeenInitialised.2777
8000156c l     F .text	00000074 prvHeapInit
00000000 l    df *ABS*	00000000 port.c
800015e0 l     F .text	0000004c raise_soft_interrupt
800075c4 l     O .sdata	00000004 uxCriticalNesting
800075c8 l     O .sdata	00000004 mtime
800075cc l     O .sdata	00000004 mtimecmp
800016a0 l     F .text	000000cc prvSetNextTimerInterrupt
80001838 l     F .text	0000002c prvTaskExitError
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 tasks.c
80020730 l     O .bss	00000064 pxReadyTasksLists
80020794 l     O .bss	00000014 xDelayedTaskList1
800207a8 l     O .bss	00000014 xDelayedTaskList2
800076f0 l     O .sbss	00000004 pxDelayedTaskList
800076f4 l     O .sbss	00000004 pxOverflowDelayedTaskList
800207bc l     O .bss	00000014 xPendingReadyList
800207d0 l     O .bss	00000014 xTasksWaitingTermination
800076f8 l     O .sbss	00000004 uxTasksDeleted
800207e4 l     O .bss	00000014 xSuspendedTaskList
800076fc l     O .sbss	00000004 uxCurrentNumberOfTasks
80007700 l     O .sbss	00000004 xTickCount
80007704 l     O .sbss	00000004 uxTopReadyPriority
80007708 l     O .sbss	00000004 xSchedulerRunning
8000770c l     O .sbss	00000004 uxPendedTicks
80007710 l     O .sbss	00000004 xYieldPending
80007714 l     O .sbss	00000004 xNumOfOverflows
80007718 l     O .sbss	00000004 uxTaskNumber
8000771c l     O .sbss	00000004 xNextTaskUnblockTime
80007720 l     O .sbss	00000004 uxSchedulerSuspended
80002aec l     F .text	000000c0 prvAllocateTCBAndStack
800027cc l     F .text	00000138 prvInitialiseTCBVariables
80002904 l     F .text	000000c0 prvInitialiseTaskLists
80002bec l     F .text	00000060 prvResetNextTaskUnblockTime
80002a64 l     F .text	00000088 prvAddCurrentTaskToDelayedList
80002798 l     F .text	00000034 prvIdleTask
800029c4 l     F .text	000000a0 prvCheckTasksWaitingTermination
80002bac l     F .text	00000040 prvDeleteTCB
00000000 l    df *ABS*	00000000 chronos.c
80002c74 l     F .text	000000b4 PLIC_EnableIRQ
80002d28 l     F .text	0000003c PLIC_SetPriority
00000000 l    df *ABS*	00000000 globalMaster.c
00000000 l    df *ABS*	00000000 applications.c
00000000 l    df *ABS*	00000000 packet.c
00000000 l    df *ABS*	00000000 main.c
8000693c l     F .text	000000d0 PLIC_init
80006c74 l     F .text	00000094 GlobalManagerTask
80006b90 l     F .text	000000e4 vUartAliveTask
00000000 l    df *ABS*	00000000 syswrite.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 impure.c
80007660 l     O .data	00000060 impure_data
80001660 g     F .text	00000040 vPortExitCritical
00010000 g       *ABS*	00000000 STACK_SIZE
800207f8 g     O .bss	00000004 SendingSlot
80000a30  w    F .text	00000020 External_11_IRQHandler
80007dc0 g       .sdata	00000000 __global_pointer$
80002ef0 g     F .text	00000048 printsv
800075e0 g       *ABS*	00000000 __data_load
800018f8 g     F .text	000000e4 SysTick_Handler
80000970  w    F .text	00000020 External_5_IRQHandler
80006578 g     F .text	000000a8 API_PipeInitialization
80004b98 g     F .text	00000128 API_TilesReset
80001038 g       .text	00000000 HW_get_8bit_reg_field
80003178 g     F .text	00000080 reverse
80004010 g     F .text	00000074 API_AddPendingReq
80021274 g     O .bss	00000024 priorityMatrix
800068a8 g     F .text	00000094 API_checkPipe
800076ec g     O .sbss	00000004 pxCurrentTCB
800076c0 g       .sbss	00000000 __sbss_start
80002d64 g     F .text	000000e0 Chronos_init
80021270 g     O .bss	00000004 errno
800207fc g     O .bss	000000f0 ServicePipe
80000f70 g       .text	00000000 HW_set_32bit_reg
80000b50  w    F .text	00000020 External_20_IRQHandler
800019dc g     F .text	00000044 xPortStartScheduler
800003a0 g     F .text	00000024 __enable_irq
80001ef4 g     F .text	0000021c xTaskGenericCreate
8000676c g     F .text	000000a0 API_GetServiceSlot
800075c0 g       .sdata	00000000 __sdata_start
800014a0 g     F .text	000000cc vPortFree
800208ec g     O .bss	00000004 messageID
800033d8 g     F .text	000000a0 API_PushSendQueue
80021da4 g     O .bss	00000008 g_uart
80001010 g       .text	00000000 HW_set_8bit_reg_field
80000c10  w    F .text	00000020 External_26_IRQHandler
800007a4 g     F .text	0000016c handle_trap
80004ab4 g     F .text	00000084 API_GetApplicationFreeSlot
80001bc8 g     F .text	00000088 vListInsertEnd
00080000 g       *ABS*	00000000 RAM_SIZE
80000a10  w    F .text	00000020 External_10_IRQHandler
80021298 g     O .bss	00000780 applications
80002eb4 g     F .text	0000003c printi
80001ba0 g     F .text	00000028 vListInitialiseItem
80004084 g     F .text	00000738 API_NI_Handler
80000c90  w    F .text	00000020 External_30_IRQHandler
80000af0  w    F .text	00000020 External_17_IRQHandler
80031db0 g       .heap	00000000 _heap_end
80000e08 g     F .text	00000050 _isatty
80021db0 g       .bss	00000000 __bss_end
80000510 g     F .text	00000294 handle_syscall
800048d0 g     F .text	000001e4 API_AddApplication
800012c4 g     F .text	000001dc pvPortMalloc
80006620 g     F .text	0000014c API_GetMessageSlot
80005040 g     F .text	00000304 API_DealocateTask
800001d0 g     F .text	0000006c _init
80001b3c g     F .text	00000064 vListInitialise
80001000 g       .text	00000000 HW_set_8bit_reg
80001008 g       .text	00000000 HW_get_8bit_reg
80002488 g     F .text	00000038 xTaskGetTickCount
80004d68 g     F .text	000002d8 API_AllocateTasks
80005d90 g     F .text	000000b0 API_TaskListInit
80005f58 g     F .text	000002d8 API_TaskAllocation
800055d4 g     F .text	00000140 API_ClearTaskSlotFromTile
80005ed4 g     F .text	00000084 API_GetFreeTaskSlot
80007730 g       .sbss	00000000 __sbss_end
80006314 g     F .text	000000e4 API_TaskStart
80000f80 g       .text	00000000 HW_set_32bit_reg_field
80006d08 g     F .text	0000001c write
800059ac g     F .text	00000128 API_TaskAllocated
80006b60 g     F .text	00000014 vApplicationMallocFailedHook
80000bf0  w    F .text	00000020 External_25_IRQHandler
80041db0 g       .stack	00000000 __stack_top
80000c70  w    F .text	00000020 External_29_IRQHandler
800208f0 g     O .bss	00000034 incommingPacket
80002110 g     F .text	000000dc vTaskDelete
80001214 g     F .text	000000b0 UART_polled_tx_string
80000cd0 g     F .text	000000e8 write_hex
80000a70  w    F .text	00000020 External_13_IRQHandler
800030ec g     F .text	00000040 External_2_IRQHandler
00010000 g       *ABS*	00000000 HEAP_SIZE
80000a50  w    F .text	00000020 External_12_IRQHandler
80003398 g     F .text	00000040 makeAddress
80001160 g     F .text	000000b4 UART_send
80002fec g     F .text	0000004c SendRaw
80000000 g       .text	00000000 _start
80002300 g     F .text	00000028 vTaskSuspendAll
80003478 g     F .text	0000008c API_PopSendQueue
800003c4 g     F .text	000000a8 handle_m_timer_interrupt
80002e44 g     F .text	00000070 prints
80001d24 g     F .text	00000098 uxListRemove
80005ad4 g     F .text	000002bc API_ApplicationStart
80003038 g     F .text	00000094 NI_enable_irq
800075c0 g       *ABS*	00000000 __sdata_load
800076c0 g       .data	00000000 __data_end
800026ac g     F .text	000000ec vTaskSwitchContext
80000b10  w    F .text	00000020 External_18_IRQHandler
80000fa8 g       .text	00000000 HW_get_32bit_reg_field
800031f8 g     F .text	000001a0 myItoa
80000b90  w    F .text	00000020 External_22_IRQHandler
80000ab0  w    F .text	00000020 External_15_IRQHandler
80001b14 g     F .text	00000028 vPortYield
80005e40 g     F .text	00000094 API_GetCurrentTaskSlot
80000000 g       *ABS*	00000000 RAM_START_ADDRESS
80007730 g       .bss	00000000 __bss_start
80021a18 g     O .bss	00000318 TaskList
80000ad0  w    F .text	00000020 External_16_IRQHandler
80001dbc g     F .text	000000e8 memset
80006a0c g     F .text	00000154 main
8000312c g     F .text	0000004c mySwap
80001c50 g     F .text	000000d4 vListInsert
80000c50  w    F .text	00000020 External_28_IRQHandler
80003ed4 g     F .text	0000013c API_CheckMessagePipe
80004b38 g     F .text	00000060 API_ApplicationsReset
80002c4c g     F .text	00000028 xTaskGetCurrentTaskHandle
80000fc0 g       .text	00000000 HW_get_16bit_reg
800075e0 g       .sdata	00000000 __sdata_end
800063f8 g     F .text	00000180 API_FinishRunningTask
80021d30 g     O .bss	00000004 NI_IRCount
80031db0 g       .heap	00000000 __heap_end
80000a90  w    F .text	00000020 External_14_IRQHandler
80005478 g     F .text	0000015c API_GetTaskSlotFromTile
80005344 g     F .text	00000134 getNextPriorityAddr
80005800 g     F .text	000001ac API_RepositoryAllocation
8000023c g     F .text	0000001c _fini
80002328 g     F .text	00000160 xTaskResumeAll
80002270 g     F .text	00000090 vTaskStartScheduler
80003798 g     F .text	000002f8 API_SendMessage
800075e0 g     O .data	00000080 ext_irq_handler_table
80020924 g     O .bss	00000020 SendingQueue
80006d24 g     F .text	00000054 _write_r
80000fc8 g       .text	00000000 HW_set_16bit_reg_field
80003634 g     F .text	00000164 API_AckTaskAllocation
80020944 g     O .bss	00000004 SendingQueue_tail
800075d0 g     O .sdata	00000004 _impure_ptr
80031db0 g       .stack	00000000 __stack_bottom
80001a20 g     F .text	000000f4 Software_IRQHandler
8000680c g     F .text	0000009c API_ClearPipeSlot
80000c30  w    F .text	00000020 External_27_IRQHandler
800009d0  w    F .text	00000020 External_8_IRQHandler
800009f0  w    F .text	00000020 External_9_IRQHandler
80021db0 g       .heap	00000000 __heap_start
80000910  w    F .text	00000020 Invalid_IRQHandler
80003504 g     F .text	00000130 API_Try2Send
80000930  w    F .text	00000020 External_3_IRQHandler
800024c0 g     F .text	000001ec xTaskIncrementTick
80006230 g     F .text	000000e4 API_GetTaskSlot
800076e8 g     O .sbss	00000004 g_startscheduler
80002fc4 g     F .text	00000028 getYpos
80000b30  w    F .text	00000020 External_19_IRQHandler
80000e88 g     F .text	000000e8 _write
80002f98 g     F .text	0000002c getXpos
80021db0 g       .bss	00000000 _end
8000176c g     F .text	000000cc vPortSetupTimer
80020948 g     O .bss	00000014 str
8002095c g     O .bss	00000004 SendingQueue_front
800047bc g     F .text	00000114 API_RepositoryWakeUp
80002f38 g     F .text	00000060 printsvsv
800021ec g     F .text	00000084 vTaskDelay
80001048 g     F .text	00000118 UART_init
80000f78 g       .text	00000000 HW_get_32bit_reg
80000db8 g     F .text	00000050 _exit
80000fb8 g       .text	00000000 HW_set_16bit_reg
80003c20 g     F .text	000002b4 API_SendMessageReq
80001ea4 g     F .text	00000050 strlen
80001864 g     F .text	00000094 pxPortInitialiseStack
800030cc g     F .text	00000020 External_1_IRQHandler
80003a90 g     F .text	00000190 API_SendFinishTask
80000990  w    F .text	00000020 External_6_IRQHandler
80000cb0  w    F .text	00000020 External_31_IRQHandler
80005714 g     F .text	000000ec API_GetSystemTasksSlots
8000162c g     F .text	00000034 vPortEnterCritical
800075e0 g       .data	00000000 __data_start
80021dac g     O .bss	00000004 ProcessorAddr
80021d34 g     O .bss	00000004 priorityPointer
80000b70  w    F .text	00000020 External_21_IRQHandler
80021d38 g     O .bss	0000006c Tiles
800004e0 g     F .text	00000030 handle_m_soft_interrupt
8000046c g     F .text	00000074 handle_m_ext_interrupt
80000ff0 g       .text	00000000 HW_get_16bit_reg_field
80000bb0  w    F .text	00000020 External_23_IRQHandler
80000bd0  w    F .text	00000020 External_24_IRQHandler
80000950  w    F .text	00000020 External_4_IRQHandler
80020960 g     O .bss	00000910 MessagePipe
80004cc0 g     F .text	000000a8 GeneratePatternMatrix
800009b0  w    F .text	00000020 External_7_IRQHandler
80006b74 g     F .text	0000001c vApplicationIdleHook



Disassembly of section .text:

80000000 <_start>:
_start():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:30

  .section      .text.entry
  .globl _start

_start:
  j handle_reset
80000000:	00c0006f          	j	8000000c <handle_reset>

80000004 <nmi_vector>:
nmi_vector():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:33

nmi_vector:
  j nmi_vector
80000004:	0000006f          	j	80000004 <nmi_vector>

80000008 <trap_vector>:
trap_vector():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:36

trap_vector:
  j trap_entry
80000008:	0280006f          	j	80000030 <trap_entry>

8000000c <handle_reset>:
handle_reset():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:39

handle_reset:
  la t0, trap_entry
8000000c:	00000297          	auipc	t0,0x0
80000010:	02428293          	addi	t0,t0,36 # 80000030 <trap_entry>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:40
  csrw mtvec, t0
80000014:	30529073          	csrw	mtvec,t0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:41
  csrwi mstatus, 0
80000018:	30005073          	csrwi	mstatus,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:42
  csrwi mie, 0
8000001c:	30405073          	csrwi	mie,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:60
  lui t0, 0x0
  fscsr t0
#endif

  # initialize global pointer
  la gp, __global_pointer$
80000020:	00018193          	mv	gp,gp
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:63

  # initialize stack pointer
  la sp, __stack_top
80000024:	00042117          	auipc	sp,0x42
80000028:	d8c10113          	addi	sp,sp,-628 # 80041db0 <__stack_top>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:66

  # perform the rest of initialization in C
  j _init
8000002c:	1a40006f          	j	800001d0 <_init>

80000030 <trap_entry>:
trap_entry():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:70


trap_entry:
  addi sp, sp, -33*REGBYTES
80000030:	f7c10113          	addi	sp,sp,-132
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:72

  SREG x1, 0 * REGBYTES(sp)
80000034:	00112023          	sw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:73
  SREG x2, 1 * REGBYTES(sp)
80000038:	00212223          	sw	sp,4(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:74
  SREG x3, 2 * REGBYTES(sp)
8000003c:	00312423          	sw	gp,8(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:75
  SREG x4, 3 * REGBYTES(sp)
80000040:	00412623          	sw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:76
  SREG x5, 4 * REGBYTES(sp)
80000044:	00512823          	sw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:77
  SREG x6, 5 * REGBYTES(sp)
80000048:	00612a23          	sw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:78
  SREG x7, 6 * REGBYTES(sp)
8000004c:	00712c23          	sw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:79
  SREG x8, 7 * REGBYTES(sp)
80000050:	00812e23          	sw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:80
  SREG x9, 8 * REGBYTES(sp)
80000054:	02912023          	sw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:81
  SREG x10, 9 * REGBYTES(sp)
80000058:	02a12223          	sw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:82
  SREG x11, 10 * REGBYTES(sp)
8000005c:	02b12423          	sw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:83
  SREG x12, 11 * REGBYTES(sp)
80000060:	02c12623          	sw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:84
  SREG x13, 12 * REGBYTES(sp)
80000064:	02d12823          	sw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:85
  SREG x14, 13 * REGBYTES(sp)
80000068:	02e12a23          	sw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:86
  SREG x15, 14 * REGBYTES(sp)
8000006c:	02f12c23          	sw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:87
  SREG x16, 15 * REGBYTES(sp)
80000070:	03012e23          	sw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:88
  SREG x17, 16 * REGBYTES(sp)
80000074:	05112023          	sw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:89
  SREG x18, 17 * REGBYTES(sp)
80000078:	05212223          	sw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:90
  SREG x19, 18 * REGBYTES(sp)
8000007c:	05312423          	sw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:91
  SREG x20, 19 * REGBYTES(sp)
80000080:	05412623          	sw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:92
  SREG x21, 20 * REGBYTES(sp)
80000084:	05512823          	sw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:93
  SREG x22, 21 * REGBYTES(sp)
80000088:	05612a23          	sw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:94
  SREG x23, 22 * REGBYTES(sp)
8000008c:	05712c23          	sw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:95
  SREG x24, 23 * REGBYTES(sp)
80000090:	05812e23          	sw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:96
  SREG x25, 24 * REGBYTES(sp)
80000094:	07912023          	sw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:97
  SREG x26, 25 * REGBYTES(sp)
80000098:	07a12223          	sw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:98
  SREG x27, 26 * REGBYTES(sp)
8000009c:	07b12423          	sw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:99
  SREG x28, 27 * REGBYTES(sp)
800000a0:	07c12623          	sw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:100
  SREG x29, 28 * REGBYTES(sp)
800000a4:	07d12823          	sw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:101
  SREG x30, 29 * REGBYTES(sp)
800000a8:	07e12a23          	sw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:102
  SREG x31, 30 * REGBYTES(sp)
800000ac:	07f12c23          	sw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:105

  # Stores the return addr in the stack
  csrr t0, mepc
800000b0:	341022f3          	csrr	t0,mepc
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:106
  SREG t0, 31 * REGBYTES(sp)
800000b4:	06512e23          	sw	t0,124(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:109

  # store the MIE value in the stack
  li t0, MSTATUS_MIE
800000b8:	00800293          	li	t0,8
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:110
  csrrc t0, mstatus, t0 
800000bc:	3002b2f3          	csrrc	t0,mstatus,t0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:111
  SREG t0, 32 * REGBYTES(sp) 
800000c0:	08512023          	sw	t0,128(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:113

  csrr a0, mcause
800000c4:	34202573          	csrr	a0,mcause
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:114
  csrr a1, mepc
800000c8:	341025f3          	csrr	a1,mepc
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:115
  mv a2, sp
800000cc:	00010613          	mv	a2,sp
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:116
  call handle_trap
800000d0:	6d4000ef          	jal	ra,800007a4 <handle_trap>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:117
  csrw mepc, a0
800000d4:	34151073          	csrw	mepc,a0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:120

  # Remain in M-mode after mret
  li t0, MSTATUS_MPP
800000d8:	000022b7          	lui	t0,0x2
800000dc:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:121
  csrs mstatus, t0
800000e0:	3002a073          	csrs	mstatus,t0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:126
  #li t0, MSTATUS_MPIE
  #csrs mstatus, t0

  # Restore the interruption status after MRET
  LREG x5, 32 * REGBYTES(sp)  # load the old MIE value to t0
800000e4:	08012283          	lw	t0,128(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:127
  slli t0, t0, 4              # shifts it to the MPIE position
800000e8:	00429293          	slli	t0,t0,0x4
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:128
  csrs mstatus, t0            # restore the MIE value into the MPIE
800000ec:	3002a073          	csrs	mstatus,t0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:130
  
  LREG x1, 0 * REGBYTES(sp)
800000f0:	00012083          	lw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:131
  LREG x2, 1 * REGBYTES(sp)
800000f4:	00412103          	lw	sp,4(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:132
  LREG x3, 2 * REGBYTES(sp)
800000f8:	00812183          	lw	gp,8(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:133
  LREG x4, 3 * REGBYTES(sp)
800000fc:	00c12203          	lw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:134
  LREG x5, 4 * REGBYTES(sp)
80000100:	01012283          	lw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:135
  LREG x6, 5 * REGBYTES(sp)
80000104:	01412303          	lw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:136
  LREG x7, 6 * REGBYTES(sp)
80000108:	01812383          	lw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:137
  LREG x8, 7 * REGBYTES(sp)
8000010c:	01c12403          	lw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:138
  LREG x9, 8 * REGBYTES(sp)
80000110:	02012483          	lw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:139
  LREG x10, 9 * REGBYTES(sp)
80000114:	02412503          	lw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:140
  LREG x11, 10 * REGBYTES(sp)
80000118:	02812583          	lw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:141
  LREG x12, 11 * REGBYTES(sp)
8000011c:	02c12603          	lw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:142
  LREG x13, 12 * REGBYTES(sp)
80000120:	03012683          	lw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:143
  LREG x14, 13 * REGBYTES(sp)
80000124:	03412703          	lw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:144
  LREG x15, 14 * REGBYTES(sp)
80000128:	03812783          	lw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:145
  LREG x16, 15 * REGBYTES(sp)
8000012c:	03c12803          	lw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:146
  LREG x17, 16 * REGBYTES(sp)
80000130:	04012883          	lw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:147
  LREG x18, 17 * REGBYTES(sp)
80000134:	04412903          	lw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:148
  LREG x19, 18 * REGBYTES(sp)
80000138:	04812983          	lw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:149
  LREG x20, 19 * REGBYTES(sp)
8000013c:	04c12a03          	lw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:150
  LREG x21, 20 * REGBYTES(sp)
80000140:	05012a83          	lw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:151
  LREG x22, 21 * REGBYTES(sp)
80000144:	05412b03          	lw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:152
  LREG x23, 22 * REGBYTES(sp)
80000148:	05812b83          	lw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:153
  LREG x24, 23 * REGBYTES(sp)
8000014c:	05c12c03          	lw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:154
  LREG x25, 24 * REGBYTES(sp)
80000150:	06012c83          	lw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:155
  LREG x26, 25 * REGBYTES(sp)
80000154:	06412d03          	lw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:156
  LREG x27, 26 * REGBYTES(sp)
80000158:	06812d83          	lw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:157
  LREG x28, 27 * REGBYTES(sp)
8000015c:	06c12e03          	lw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:158
  LREG x29, 28 * REGBYTES(sp)
80000160:	07012e83          	lw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:159
  LREG x30, 29 * REGBYTES(sp)
80000164:	07412f03          	lw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:160
  LREG x31, 30 * REGBYTES(sp)
80000168:	07812f83          	lw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:162

  addi sp, sp, 33*REGBYTES
8000016c:	08410113          	addi	sp,sp,132
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/entry.S:163
  mret
80000170:	30200073          	mret
	...

80000180 <zero_section>:
zero_section():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/init.c:47
        ++p_vma;
    }
}

static void zero_section(uint32_t * start, uint32_t * end)
{
80000180:	fd010113          	addi	sp,sp,-48
80000184:	02812623          	sw	s0,44(sp)
80000188:	03010413          	addi	s0,sp,48
8000018c:	fca42e23          	sw	a0,-36(s0)
80000190:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/init.c:48
    uint32_t * p_zero = start;
80000194:	fdc42783          	lw	a5,-36(s0)
80000198:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/init.c:50
    
    while(p_zero <= end)
8000019c:	0180006f          	j	800001b4 <zero_section+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/init.c:52
    {
        *p_zero = 0;
800001a0:	fec42783          	lw	a5,-20(s0)
800001a4:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/init.c:53
        ++p_zero;
800001a8:	fec42783          	lw	a5,-20(s0)
800001ac:	00478793          	addi	a5,a5,4
800001b0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/init.c:50
    while(p_zero <= end)
800001b4:	fec42703          	lw	a4,-20(s0)
800001b8:	fd842783          	lw	a5,-40(s0)
800001bc:	fee7f2e3          	bleu	a4,a5,800001a0 <zero_section+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/init.c:55
    }
}
800001c0:	00000013          	nop
800001c4:	02c12403          	lw	s0,44(sp)
800001c8:	03010113          	addi	sp,sp,48
800001cc:	00008067          	ret

800001d0 <_init>:
_init():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/init.c:58

void _init(void)
{
800001d0:	fe010113          	addi	sp,sp,-32
800001d4:	00112e23          	sw	ra,28(sp)
800001d8:	00812c23          	sw	s0,24(sp)
800001dc:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/init.c:60
    extern int main(int, char**);
    const char *argv0 = "hello";
800001e0:	800077b7          	lui	a5,0x80007
800001e4:	d8078793          	addi	a5,a5,-640 # 80006d80 <__stack_top+0xfffc4fd0>
800001e8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/init.c:61
    char *argv[] = {(char *)argv0, NULL, NULL};
800001ec:	fec42783          	lw	a5,-20(s0)
800001f0:	fef42023          	sw	a5,-32(s0)
800001f4:	fe042223          	sw	zero,-28(s0)
800001f8:	fe042423          	sw	zero,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/init.c:66

// Imperas - this is loaded directly by simulator so must not be copied
//    copy_section(&__sdata_load, &__sdata_start, &__sdata_end);
//    copy_section(&__data_load, &__data_start, &__data_end);
    zero_section(&__sbss_start, &__sbss_end);
800001fc:	97018593          	addi	a1,gp,-1680 # 80007730 <__sbss_end>
80000200:	90018513          	addi	a0,gp,-1792 # 800076c0 <__data_end>
80000204:	f7dff0ef          	jal	ra,80000180 <zero_section>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/init.c:67
    zero_section(&__bss_start, &__bss_end);
80000208:	800227b7          	lui	a5,0x80022
8000020c:	db078593          	addi	a1,a5,-592 # 80021db0 <__stack_top+0xfffe0000>
80000210:	97018513          	addi	a0,gp,-1680 # 80007730 <__sbss_end>
80000214:	f6dff0ef          	jal	ra,80000180 <zero_section>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/init.c:69
    
    main(1, argv);
80000218:	fe040793          	addi	a5,s0,-32
8000021c:	00078593          	mv	a1,a5
80000220:	00100513          	li	a0,1
80000224:	7e8060ef          	jal	ra,80006a0c <main>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/init.c:70
}
80000228:	00000013          	nop
8000022c:	01c12083          	lw	ra,28(sp)
80000230:	01812403          	lw	s0,24(sp)
80000234:	02010113          	addi	sp,sp,32
80000238:	00008067          	ret

8000023c <_fini>:
_fini():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/init.c:75

/* Function called after main() finishes */
void
_fini()
{
8000023c:	ff010113          	addi	sp,sp,-16
80000240:	00812623          	sw	s0,12(sp)
80000244:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/init.c:76
}
80000248:	00000013          	nop
8000024c:	00c12403          	lw	s0,12(sp)
80000250:	01010113          	addi	sp,sp,16
80000254:	00008067          	ret

80000258 <PLIC_DisableIRQ>:
PLIC_DisableIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:174
 * 	If you wish to disable the external interrupt while the interrupt handler
 * 	for that external interrupt is executing then you must use the return value
 * 	EXT_IRQ_DISABLE to return from the extern interrupt handler.
 */
static inline void PLIC_DisableIRQ(IRQn_Type IRQn)
{
80000258:	fd010113          	addi	sp,sp,-48
8000025c:	02812623          	sw	s0,44(sp)
80000260:	03010413          	addi	s0,sp,48
80000264:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:175
    unsigned long hart_id = read_csr(mhartid);
80000268:	f14027f3          	csrr	a5,mhartid
8000026c:	fef42623          	sw	a5,-20(s0)
80000270:	fec42783          	lw	a5,-20(s0)
80000274:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:176
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80000278:	40000737          	lui	a4,0x40000
8000027c:	fdc42783          	lw	a5,-36(s0)
80000280:	0057d793          	srli	a5,a5,0x5
80000284:	fe842683          	lw	a3,-24(s0)
80000288:	00569693          	slli	a3,a3,0x5
8000028c:	00f686b3          	add	a3,a3,a5
80000290:	000017b7          	lui	a5,0x1
80000294:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80000298:	00f687b3          	add	a5,a3,a5
8000029c:	00279793          	slli	a5,a5,0x2
800002a0:	00f707b3          	add	a5,a4,a5
800002a4:	0007a783          	lw	a5,0(a5)
800002a8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:178

    current &= ~((uint32_t)1 << (IRQn % 32));
800002ac:	fdc42783          	lw	a5,-36(s0)
800002b0:	01f7f793          	andi	a5,a5,31
800002b4:	00100713          	li	a4,1
800002b8:	00f717b3          	sll	a5,a4,a5
800002bc:	fff7c793          	not	a5,a5
800002c0:	fe442703          	lw	a4,-28(s0)
800002c4:	00f777b3          	and	a5,a4,a5
800002c8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:180

    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
800002cc:	40000737          	lui	a4,0x40000
800002d0:	fdc42783          	lw	a5,-36(s0)
800002d4:	0057d793          	srli	a5,a5,0x5
800002d8:	fe842683          	lw	a3,-24(s0)
800002dc:	00569693          	slli	a3,a3,0x5
800002e0:	00f686b3          	add	a3,a3,a5
800002e4:	000017b7          	lui	a5,0x1
800002e8:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
800002ec:	00f687b3          	add	a5,a3,a5
800002f0:	00279793          	slli	a5,a5,0x2
800002f4:	00f707b3          	add	a5,a4,a5
800002f8:	fe442703          	lw	a4,-28(s0)
800002fc:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:181
}
80000300:	00000013          	nop
80000304:	02c12403          	lw	s0,44(sp)
80000308:	03010113          	addi	sp,sp,48
8000030c:	00008067          	ret

80000310 <PLIC_ClaimIRQ>:
PLIC_ClaimIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:205

/*==============================================================================
 * The function PLIC_ClaimIRQ() claims the interrupt from the PLIC controller.
 */
static inline uint32_t PLIC_ClaimIRQ(void)
{
80000310:	fe010113          	addi	sp,sp,-32
80000314:	00812e23          	sw	s0,28(sp)
80000318:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:206
    unsigned long hart_id = read_csr(mhartid);
8000031c:	f14027f3          	csrr	a5,mhartid
80000320:	fef42623          	sw	a5,-20(s0)
80000324:	fec42783          	lw	a5,-20(s0)
80000328:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:208

    return PLIC->TARGET[hart_id].CLAIM_COMPLETE;
8000032c:	40000737          	lui	a4,0x40000
80000330:	fe842783          	lw	a5,-24(s0)
80000334:	20078793          	addi	a5,a5,512
80000338:	00c79793          	slli	a5,a5,0xc
8000033c:	00f707b3          	add	a5,a4,a5
80000340:	0047a783          	lw	a5,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:209
}
80000344:	00078513          	mv	a0,a5
80000348:	01c12403          	lw	s0,28(sp)
8000034c:	02010113          	addi	sp,sp,32
80000350:	00008067          	ret

80000354 <PLIC_CompleteIRQ>:
PLIC_CompleteIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:216
/*==============================================================================
 * The function PLIC_CompleteIRQ() indicates to the PLIC controller the interrupt
 * is processed and claim is complete.
 */
static inline void PLIC_CompleteIRQ(uint32_t source)
{
80000354:	fd010113          	addi	sp,sp,-48
80000358:	02812623          	sw	s0,44(sp)
8000035c:	03010413          	addi	s0,sp,48
80000360:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:217
    unsigned long hart_id = read_csr(mhartid);
80000364:	f14027f3          	csrr	a5,mhartid
80000368:	fef42623          	sw	a5,-20(s0)
8000036c:	fec42783          	lw	a5,-20(s0)
80000370:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:219

    PLIC->TARGET[hart_id].CLAIM_COMPLETE = source;
80000374:	40000737          	lui	a4,0x40000
80000378:	fe842783          	lw	a5,-24(s0)
8000037c:	20078793          	addi	a5,a5,512
80000380:	00c79793          	slli	a5,a5,0xc
80000384:	00f707b3          	add	a5,a4,a5
80000388:	fdc42703          	lw	a4,-36(s0)
8000038c:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:220
}
80000390:	00000013          	nop
80000394:	02c12403          	lw	s0,44(sp)
80000398:	03010113          	addi	sp,sp,48
8000039c:	00008067          	ret

800003a0 <__enable_irq>:
__enable_irq():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:96

/*------------------------------------------------------------------------------
 * Enabler all interrupts.
 */
void __enable_irq(void)
{
800003a0:	fe010113          	addi	sp,sp,-32
800003a4:	00812e23          	sw	s0,28(sp)
800003a8:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:97
    set_csr(mstatus, MSTATUS_MIE);
800003ac:	300467f3          	csrrsi	a5,mstatus,8
800003b0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:98
}
800003b4:	00000013          	nop
800003b8:	01c12403          	lw	s0,28(sp)
800003bc:	02010113          	addi	sp,sp,32
800003c0:	00008067          	ret

800003c4 <handle_m_timer_interrupt>:
handle_m_timer_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:128

/*------------------------------------------------------------------------------
 * RISC-V interrupt handler for machine timer interrupts.
 */
void handle_m_timer_interrupt()
{
800003c4:	fe010113          	addi	sp,sp,-32
800003c8:	00112e23          	sw	ra,28(sp)
800003cc:	00812c23          	sw	s0,24(sp)
800003d0:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:129
    clear_csr(mie, MIP_MTIP);
800003d4:	08000793          	li	a5,128
800003d8:	3047b7f3          	csrrc	a5,mie,a5
800003dc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:131

    SysTick_Handler();
800003e0:	518010ef          	jal	ra,800018f8 <SysTick_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:133

    PRCI->MTIMECMP[read_csr(mhartid)] = PRCI->MTIME + g_systick_increment;
800003e4:	44000737          	lui	a4,0x44000
800003e8:	0000c7b7          	lui	a5,0xc
800003ec:	00f707b3          	add	a5,a4,a5
800003f0:	ffc7a803          	lw	a6,-4(a5) # bffc <HEAP_SIZE-0x4004>
800003f4:	ff87a783          	lw	a5,-8(a5)
800003f8:	9001a583          	lw	a1,-1792(gp) # 800076c0 <__data_end>
800003fc:	9041a603          	lw	a2,-1788(gp) # 800076c4 <__data_end+0x4>
80000400:	44000537          	lui	a0,0x44000
80000404:	f1402773          	csrr	a4,mhartid
80000408:	fee42423          	sw	a4,-24(s0)
8000040c:	fe842883          	lw	a7,-24(s0)
80000410:	00b786b3          	add	a3,a5,a1
80000414:	00068313          	mv	t1,a3
80000418:	00f33333          	sltu	t1,t1,a5
8000041c:	00c80733          	add	a4,a6,a2
80000420:	00e307b3          	add	a5,t1,a4
80000424:	00078713          	mv	a4,a5
80000428:	00068793          	mv	a5,a3
8000042c:	00070813          	mv	a6,a4
80000430:	00001737          	lui	a4,0x1
80000434:	80070713          	addi	a4,a4,-2048 # 800 <HEAP_SIZE-0xf800>
80000438:	00e88733          	add	a4,a7,a4
8000043c:	00371713          	slli	a4,a4,0x3
80000440:	00e50733          	add	a4,a0,a4
80000444:	00f72023          	sw	a5,0(a4)
80000448:	01072223          	sw	a6,4(a4)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:135

    set_csr(mie, MIP_MTIP);
8000044c:	08000793          	li	a5,128
80000450:	3047a7f3          	csrrs	a5,mie,a5
80000454:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:136
    return;
80000458:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:137
}
8000045c:	01c12083          	lw	ra,28(sp)
80000460:	01812403          	lw	s0,24(sp)
80000464:	02010113          	addi	sp,sp,32
80000468:	00008067          	ret

8000046c <handle_m_ext_interrupt>:
handle_m_ext_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:182

/*------------------------------------------------------------------------------
 * 
 */
void handle_m_ext_interrupt()
{
8000046c:	fe010113          	addi	sp,sp,-32
80000470:	00112e23          	sw	ra,28(sp)
80000474:	00812c23          	sw	s0,24(sp)
80000478:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:183
    uint32_t int_num  = PLIC_ClaimIRQ();
8000047c:	e95ff0ef          	jal	ra,80000310 <PLIC_ClaimIRQ>
80000480:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:184
    uint8_t disable = EXT_IRQ_KEEP_ENABLED;
80000484:	fe0405a3          	sb	zero,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:186

    disable = ext_irq_handler_table[int_num]();
80000488:	800077b7          	lui	a5,0x80007
8000048c:	fec42703          	lw	a4,-20(s0)
80000490:	00271713          	slli	a4,a4,0x2
80000494:	5e078793          	addi	a5,a5,1504 # 800075e0 <__stack_top+0xfffc5830>
80000498:	00f707b3          	add	a5,a4,a5
8000049c:	0007a783          	lw	a5,0(a5)
800004a0:	000780e7          	jalr	a5
800004a4:	00050793          	mv	a5,a0
800004a8:	fef405a3          	sb	a5,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:188

    PLIC_CompleteIRQ(int_num);
800004ac:	fec42503          	lw	a0,-20(s0)
800004b0:	ea5ff0ef          	jal	ra,80000354 <PLIC_CompleteIRQ>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:190

    if(EXT_IRQ_DISABLE == disable)
800004b4:	feb44703          	lbu	a4,-21(s0)
800004b8:	00100793          	li	a5,1
800004bc:	00f71863          	bne	a4,a5,800004cc <handle_m_ext_interrupt+0x60>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:192
    {
        PLIC_DisableIRQ((IRQn_Type)int_num);
800004c0:	fec42503          	lw	a0,-20(s0)
800004c4:	d95ff0ef          	jal	ra,80000258 <PLIC_DisableIRQ>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:194
    }
    return;
800004c8:	00000013          	nop
800004cc:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:195
}
800004d0:	01c12083          	lw	ra,28(sp)
800004d4:	01812403          	lw	s0,24(sp)
800004d8:	02010113          	addi	sp,sp,32
800004dc:	00008067          	ret

800004e0 <handle_m_soft_interrupt>:
handle_m_soft_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:198

void handle_m_soft_interrupt()
{
800004e0:	ff010113          	addi	sp,sp,-16
800004e4:	00112623          	sw	ra,12(sp)
800004e8:	00812423          	sw	s0,8(sp)
800004ec:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:199
    Software_IRQHandler();
800004f0:	530010ef          	jal	ra,80001a20 <Software_IRQHandler>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:202

    /*Clear software interrupt*/
    PRCI->MSIP[0] = 0x00;
800004f4:	440007b7          	lui	a5,0x44000
800004f8:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:203
    return;
800004fc:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:204
}
80000500:	00c12083          	lw	ra,12(sp)
80000504:	00812403          	lw	s0,8(sp)
80000508:	01010113          	addi	sp,sp,16
8000050c:	00008067          	ret

80000510 <handle_syscall>:
handle_syscall():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:207

/* syscall funcion defined at system_call.c */
void handle_syscall(){
80000510:	fd010113          	addi	sp,sp,-48
80000514:	02112623          	sw	ra,44(sp)
80000518:	02812423          	sw	s0,40(sp)
8000051c:	03010413          	addi	s0,sp,48
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:210
	unsigned int arg0, arg1, arg2, arg3, arg4, arg5, type;
	unsigned int *pointer;
	register long temp asm("t0") = 0;
80000520:	00000293          	li	t0,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:211
	asm("addi	t0, sp, 0");
80000524:	00010293          	mv	t0,sp
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:213
	
	pointer = (unsigned int *)(temp + (29*4));
80000528:	00028793          	mv	a5,t0
8000052c:	07478793          	addi	a5,a5,116
80000530:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:214
	arg0 =  *pointer;
80000534:	fec42783          	lw	a5,-20(s0)
80000538:	0007a783          	lw	a5,0(a5)
8000053c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:216

	pointer = (unsigned int *)(temp + (30*4));
80000540:	00028793          	mv	a5,t0
80000544:	07878793          	addi	a5,a5,120
80000548:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:217
	arg1 = *pointer;
8000054c:	fec42783          	lw	a5,-20(s0)
80000550:	0007a783          	lw	a5,0(a5)
80000554:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:219
	
	pointer = (unsigned int *)(temp + (31*4));
80000558:	00028793          	mv	a5,t0
8000055c:	07c78793          	addi	a5,a5,124
80000560:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:220
	arg2 = *pointer;
80000564:	fec42783          	lw	a5,-20(s0)
80000568:	0007a783          	lw	a5,0(a5)
8000056c:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:222

	pointer = (unsigned int *)(temp + (32*4));
80000570:	00028793          	mv	a5,t0
80000574:	08078793          	addi	a5,a5,128
80000578:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:223
	arg3 = *pointer;
8000057c:	fec42783          	lw	a5,-20(s0)
80000580:	0007a783          	lw	a5,0(a5)
80000584:	fcf42e23          	sw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:225

	pointer = (unsigned int *)(temp + (33*4));
80000588:	00028793          	mv	a5,t0
8000058c:	08478793          	addi	a5,a5,132
80000590:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:226
	arg4 = *pointer;
80000594:	fec42783          	lw	a5,-20(s0)
80000598:	0007a783          	lw	a5,0(a5)
8000059c:	fcf42c23          	sw	a5,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:228

	pointer = (unsigned int *)(temp + (34*4));
800005a0:	00028793          	mv	a5,t0
800005a4:	08878793          	addi	a5,a5,136
800005a8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:229
	arg4 = *pointer;
800005ac:	fec42783          	lw	a5,-20(s0)
800005b0:	0007a783          	lw	a5,0(a5)
800005b4:	fcf42c23          	sw	a5,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:231

	pointer = (unsigned int *)(temp + (36*4));
800005b8:	00028793          	mv	a5,t0
800005bc:	09078793          	addi	a5,a5,144
800005c0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:232
	type = *pointer;
800005c4:	fec42783          	lw	a5,-20(s0)
800005c8:	0007a783          	lw	a5,0(a5)
800005cc:	fcf42a23          	sw	a5,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:243
		p = (temp + (i*4));
		value = *p;
		printsvsv("i: ", i, " value: ", value);
	}*/
	
	switch (type){
800005d0:	fd442783          	lw	a5,-44(s0)
800005d4:	ff678793          	addi	a5,a5,-10
800005d8:	03800713          	li	a4,56
800005dc:	12f76663          	bltu	a4,a5,80000708 <handle_syscall+0x1f8>
800005e0:	00279713          	slli	a4,a5,0x2
800005e4:	800077b7          	lui	a5,0x80007
800005e8:	e1c78793          	addi	a5,a5,-484 # 80006e1c <__stack_top+0xfffc506c>
800005ec:	00f707b3          	add	a5,a4,a5
800005f0:	0007a783          	lw	a5,0(a5)
800005f4:	00078067          	jr	a5
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:246

		case SYS_TESTING:
			prints("Detectei uma chamada TESTE de sistema!\n");
800005f8:	800077b7          	lui	a5,0x80007
800005fc:	d8878513          	addi	a0,a5,-632 # 80006d88 <__stack_top+0xfffc4fd8>
80000600:	045020ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:247
			printsv("arg0 ", arg0);
80000604:	fe842783          	lw	a5,-24(s0)
80000608:	00078593          	mv	a1,a5
8000060c:	800077b7          	lui	a5,0x80007
80000610:	db078513          	addi	a0,a5,-592 # 80006db0 <__stack_top+0xfffc5000>
80000614:	0dd020ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:248
			printsv("arg1 ", arg1);
80000618:	fe442783          	lw	a5,-28(s0)
8000061c:	00078593          	mv	a1,a5
80000620:	800077b7          	lui	a5,0x80007
80000624:	db878513          	addi	a0,a5,-584 # 80006db8 <__stack_top+0xfffc5008>
80000628:	0c9020ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:249
			printsv("arg2 ", arg2);
8000062c:	fe042783          	lw	a5,-32(s0)
80000630:	00078593          	mv	a1,a5
80000634:	800077b7          	lui	a5,0x80007
80000638:	dc078513          	addi	a0,a5,-576 # 80006dc0 <__stack_top+0xfffc5010>
8000063c:	0b5020ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:250
			printsv("arg3 ", arg3);
80000640:	fdc42783          	lw	a5,-36(s0)
80000644:	00078593          	mv	a1,a5
80000648:	800077b7          	lui	a5,0x80007
8000064c:	dc878513          	addi	a0,a5,-568 # 80006dc8 <__stack_top+0xfffc5018>
80000650:	0a1020ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:251
			printsv("arg4 ", arg4);
80000654:	fd842783          	lw	a5,-40(s0)
80000658:	00078593          	mv	a1,a5
8000065c:	800077b7          	lui	a5,0x80007
80000660:	dd078513          	addi	a0,a5,-560 # 80006dd0 <__stack_top+0xfffc5020>
80000664:	08d020ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:252
			printsv("type ", type);
80000668:	fd442783          	lw	a5,-44(s0)
8000066c:	00078593          	mv	a1,a5
80000670:	800077b7          	lui	a5,0x80007
80000674:	dd878513          	addi	a0,a5,-552 # 80006dd8 <__stack_top+0xfffc5028>
80000678:	079020ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:253
			break;
8000067c:	1140006f          	j	80000790 <handle_syscall+0x280>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:256

        case SYS_PRINTS:
            prints(arg0);
80000680:	fe842783          	lw	a5,-24(s0)
80000684:	00078513          	mv	a0,a5
80000688:	7bc020ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:257
            UART_polled_tx_string( &g_uart, arg0 );
8000068c:	fe842783          	lw	a5,-24(s0)
80000690:	00078593          	mv	a1,a5
80000694:	800227b7          	lui	a5,0x80022
80000698:	da478513          	addi	a0,a5,-604 # 80021da4 <__stack_top+0xfffdfff4>
8000069c:	379000ef          	jal	ra,80001214 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:258
            break;
800006a0:	0f00006f          	j	80000790 <handle_syscall+0x280>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:261
        
        case SYS_PRINTI:
            printi(arg0);
800006a4:	fe842783          	lw	a5,-24(s0)
800006a8:	00078513          	mv	a0,a5
800006ac:	009020ef          	jal	ra,80002eb4 <printi>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:262
            myItoa(arg0, str, 10);
800006b0:	fe842703          	lw	a4,-24(s0)
800006b4:	00a00613          	li	a2,10
800006b8:	800217b7          	lui	a5,0x80021
800006bc:	94878593          	addi	a1,a5,-1720 # 80020948 <__stack_top+0xfffdeb98>
800006c0:	00070513          	mv	a0,a4
800006c4:	335020ef          	jal	ra,800031f8 <myItoa>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:263
            UART_polled_tx_string( &g_uart, (const uint8_t *)str );
800006c8:	800217b7          	lui	a5,0x80021
800006cc:	94878593          	addi	a1,a5,-1720 # 80020948 <__stack_top+0xfffdeb98>
800006d0:	800227b7          	lui	a5,0x80022
800006d4:	da478513          	addi	a0,a5,-604 # 80021da4 <__stack_top+0xfffdfff4>
800006d8:	33d000ef          	jal	ra,80001214 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:264
            break;
800006dc:	0b40006f          	j	80000790 <handle_syscall+0x280>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:268
        
        case SYS_SEND_MSG:
            //              addr, task
            API_SendMessage(arg0, arg1);
800006e0:	fe442583          	lw	a1,-28(s0)
800006e4:	fe842503          	lw	a0,-24(s0)
800006e8:	0b0030ef          	jal	ra,80003798 <API_SendMessage>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:269
            break;
800006ec:	0a40006f          	j	80000790 <handle_syscall+0x280>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:273
        
        case SYS_RECV_MSG:
            //                 addr, task
            API_SendMessageReq(arg0, arg1);
800006f0:	fe442583          	lw	a1,-28(s0)
800006f4:	fe842503          	lw	a0,-24(s0)
800006f8:	528030ef          	jal	ra,80003c20 <API_SendMessageReq>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:274
            break;
800006fc:	0940006f          	j	80000790 <handle_syscall+0x280>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:277
        
        case SYS_END_TASK:
            API_FinishRunningTask();
80000700:	4f9050ef          	jal	ra,800063f8 <API_FinishRunningTask>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:278
            break;
80000704:	08c0006f          	j	80000790 <handle_syscall+0x280>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:281

		default:
			prints("Systemcall não identificada!\n");
80000708:	800077b7          	lui	a5,0x80007
8000070c:	de078513          	addi	a0,a5,-544 # 80006de0 <__stack_top+0xfffc5030>
80000710:	734020ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:282
			printsv("arg0 ", arg0);
80000714:	fe842783          	lw	a5,-24(s0)
80000718:	00078593          	mv	a1,a5
8000071c:	800077b7          	lui	a5,0x80007
80000720:	db078513          	addi	a0,a5,-592 # 80006db0 <__stack_top+0xfffc5000>
80000724:	7cc020ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:283
			printsv("arg1 ", arg1);
80000728:	fe442783          	lw	a5,-28(s0)
8000072c:	00078593          	mv	a1,a5
80000730:	800077b7          	lui	a5,0x80007
80000734:	db878513          	addi	a0,a5,-584 # 80006db8 <__stack_top+0xfffc5008>
80000738:	7b8020ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:284
			printsv("arg2 ", arg2);
8000073c:	fe042783          	lw	a5,-32(s0)
80000740:	00078593          	mv	a1,a5
80000744:	800077b7          	lui	a5,0x80007
80000748:	dc078513          	addi	a0,a5,-576 # 80006dc0 <__stack_top+0xfffc5010>
8000074c:	7a4020ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:285
			printsv("arg3 ", arg3);
80000750:	fdc42783          	lw	a5,-36(s0)
80000754:	00078593          	mv	a1,a5
80000758:	800077b7          	lui	a5,0x80007
8000075c:	dc878513          	addi	a0,a5,-568 # 80006dc8 <__stack_top+0xfffc5018>
80000760:	790020ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:286
			printsv("arg4 ", arg4);
80000764:	fd842783          	lw	a5,-40(s0)
80000768:	00078593          	mv	a1,a5
8000076c:	800077b7          	lui	a5,0x80007
80000770:	dd078513          	addi	a0,a5,-560 # 80006dd0 <__stack_top+0xfffc5020>
80000774:	77c020ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:287
			printsv("type ", type);
80000778:	fd442783          	lw	a5,-44(s0)
8000077c:	00078593          	mv	a1,a5
80000780:	800077b7          	lui	a5,0x80007
80000784:	dd878513          	addi	a0,a5,-552 # 80006dd8 <__stack_top+0xfffc5028>
80000788:	768020ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:288
			break;
8000078c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:290
	}
	return;
80000790:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:305
	// 	value = *p;
	// 	printsvsv("i: ", i, " value: ", value);
	// }
    // prints("Cheguei aqui!!!!!!! sucessooo :D\n");
	////////////////////////////////////////////////////
}
80000794:	02c12083          	lw	ra,44(sp)
80000798:	02812403          	lw	s0,40(sp)
8000079c:	03010113          	addi	sp,sp,48
800007a0:	00008067          	ret

800007a4 <handle_trap>:
handle_trap():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:311

/*------------------------------------------------------------------------------
 * Trap/Interrupt handler
 */
uintptr_t handle_trap(uintptr_t mcause, uintptr_t epc)
{
800007a4:	fe010113          	addi	sp,sp,-32
800007a8:	00112e23          	sw	ra,28(sp)
800007ac:	00812c23          	sw	s0,24(sp)
800007b0:	02010413          	addi	s0,sp,32
800007b4:	fea42623          	sw	a0,-20(s0)
800007b8:	feb42423          	sw	a1,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:312
    if (!(mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE) == ENV_CALL_M || (mcause & MCAUSE_CAUSE) == ENV_CALL_H || (mcause & MCAUSE_CAUSE) == ENV_CALL_S || (mcause & MCAUSE_CAUSE) == ENV_CALL_U)){
800007bc:	fec42783          	lw	a5,-20(s0)
800007c0:	0607cc63          	bltz	a5,80000838 <handle_trap+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:312 (discriminator 1)
800007c4:	fec42703          	lw	a4,-20(s0)
800007c8:	800007b7          	lui	a5,0x80000
800007cc:	fff7c793          	not	a5,a5
800007d0:	00f77733          	and	a4,a4,a5
800007d4:	00b00793          	li	a5,11
800007d8:	04f70663          	beq	a4,a5,80000824 <handle_trap+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:312 (discriminator 2)
800007dc:	fec42703          	lw	a4,-20(s0)
800007e0:	800007b7          	lui	a5,0x80000
800007e4:	fff7c793          	not	a5,a5
800007e8:	00f77733          	and	a4,a4,a5
800007ec:	00a00793          	li	a5,10
800007f0:	02f70a63          	beq	a4,a5,80000824 <handle_trap+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:312 (discriminator 3)
800007f4:	fec42703          	lw	a4,-20(s0)
800007f8:	800007b7          	lui	a5,0x80000
800007fc:	fff7c793          	not	a5,a5
80000800:	00f77733          	and	a4,a4,a5
80000804:	00900793          	li	a5,9
80000808:	00f70e63          	beq	a4,a5,80000824 <handle_trap+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:312 (discriminator 4)
8000080c:	fec42703          	lw	a4,-20(s0)
80000810:	800007b7          	lui	a5,0x80000
80000814:	fff7c793          	not	a5,a5
80000818:	00f77733          	and	a4,a4,a5
8000081c:	00800793          	li	a5,8
80000820:	00f71c63          	bne	a4,a5,80000838 <handle_trap+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:313
        handle_syscall();
80000824:	cedff0ef          	jal	ra,80000510 <handle_syscall>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:314
        epc = (uintptr_t) (epc + 4);
80000828:	fe842783          	lw	a5,-24(s0)
8000082c:	00478793          	addi	a5,a5,4 # 80000004 <__stack_top+0xfffbe254>
80000830:	fef42423          	sw	a5,-24(s0)
80000834:	0c40006f          	j	800008f8 <handle_trap+0x154>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:316
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_EXT)){
80000838:	fec42783          	lw	a5,-20(s0)
8000083c:	0207d263          	bgez	a5,80000860 <handle_trap+0xbc>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:316 (discriminator 1)
80000840:	fec42703          	lw	a4,-20(s0)
80000844:	800007b7          	lui	a5,0x80000
80000848:	fff7c793          	not	a5,a5
8000084c:	00f77733          	and	a4,a4,a5
80000850:	00b00793          	li	a5,11
80000854:	00f71663          	bne	a4,a5,80000860 <handle_trap+0xbc>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:317
        handle_m_ext_interrupt();
80000858:	c15ff0ef          	jal	ra,8000046c <handle_m_ext_interrupt>
8000085c:	09c0006f          	j	800008f8 <handle_trap+0x154>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:319
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_TIMER)){
80000860:	fec42783          	lw	a5,-20(s0)
80000864:	0207d263          	bgez	a5,80000888 <handle_trap+0xe4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:319 (discriminator 1)
80000868:	fec42703          	lw	a4,-20(s0)
8000086c:	800007b7          	lui	a5,0x80000
80000870:	fff7c793          	not	a5,a5
80000874:	00f77733          	and	a4,a4,a5
80000878:	00700793          	li	a5,7
8000087c:	00f71663          	bne	a4,a5,80000888 <handle_trap+0xe4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:320
        handle_m_timer_interrupt();
80000880:	b45ff0ef          	jal	ra,800003c4 <handle_m_timer_interrupt>
80000884:	0740006f          	j	800008f8 <handle_trap+0x154>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:322
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_SOFT)){
80000888:	fec42783          	lw	a5,-20(s0)
8000088c:	0207d263          	bgez	a5,800008b0 <handle_trap+0x10c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:322 (discriminator 1)
80000890:	fec42703          	lw	a4,-20(s0)
80000894:	800007b7          	lui	a5,0x80000
80000898:	fff7c793          	not	a5,a5
8000089c:	00f77733          	and	a4,a4,a5
800008a0:	00300793          	li	a5,3
800008a4:	00f71663          	bne	a4,a5,800008b0 <handle_trap+0x10c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:323
        handle_m_soft_interrupt();
800008a8:	c39ff0ef          	jal	ra,800004e0 <handle_m_soft_interrupt>
800008ac:	04c0006f          	j	800008f8 <handle_trap+0x154>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:326
    }
    else{
        write(1, "trap\n", 5);
800008b0:	00500613          	li	a2,5
800008b4:	800077b7          	lui	a5,0x80007
800008b8:	e0078593          	addi	a1,a5,-512 # 80006e00 <__stack_top+0xfffc5050>
800008bc:	00100513          	li	a0,1
800008c0:	448060ef          	jal	ra,80006d08 <write>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:327
        printsv("epc: ", epc);
800008c4:	fe842783          	lw	a5,-24(s0)
800008c8:	00078593          	mv	a1,a5
800008cc:	800077b7          	lui	a5,0x80007
800008d0:	e0878513          	addi	a0,a5,-504 # 80006e08 <__stack_top+0xfffc5058>
800008d4:	61c020ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:328
        printsv("mcause: ", mcause);
800008d8:	fec42783          	lw	a5,-20(s0)
800008dc:	00078593          	mv	a1,a5
800008e0:	800077b7          	lui	a5,0x80007
800008e4:	e1078513          	addi	a0,a5,-496 # 80006e10 <__stack_top+0xfffc5060>
800008e8:	608020ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:329
        _exit(mcause);
800008ec:	fec42783          	lw	a5,-20(s0)
800008f0:	00078513          	mv	a0,a5
800008f4:	4c4000ef          	jal	ra,80000db8 <_exit>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:332
    }
    //printsv("handle_trap returns: ", epc);
    return epc;
800008f8:	fe842783          	lw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:333
}
800008fc:	00078513          	mv	a0,a5
80000900:	01c12083          	lw	ra,28(sp)
80000904:	01812403          	lw	s0,24(sp)
80000908:	02010113          	addi	sp,sp,32
8000090c:	00008067          	ret

80000910 <Invalid_IRQHandler>:
Invalid_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:37
{
    ;
}

__attribute__((weak))  uint8_t Invalid_IRQHandler(void)
{
80000910:	ff010113          	addi	sp,sp,-16
80000914:	00812623          	sw	s0,12(sp)
80000918:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:38
    return(0);
8000091c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:39
}
80000920:	00078513          	mv	a0,a5
80000924:	00c12403          	lw	s0,12(sp)
80000928:	01010113          	addi	sp,sp,16
8000092c:	00008067          	ret

80000930 <External_3_IRQHandler>:
External_3_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:52
{
    return(0);
}

__attribute__((weak))  uint8_t External_3_IRQHandler(void)
{
80000930:	ff010113          	addi	sp,sp,-16
80000934:	00812623          	sw	s0,12(sp)
80000938:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:53
    return(0);
8000093c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:54
}
80000940:	00078513          	mv	a0,a5
80000944:	00c12403          	lw	s0,12(sp)
80000948:	01010113          	addi	sp,sp,16
8000094c:	00008067          	ret

80000950 <External_4_IRQHandler>:
External_4_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:57

__attribute__((weak))  uint8_t External_4_IRQHandler(void)
{
80000950:	ff010113          	addi	sp,sp,-16
80000954:	00812623          	sw	s0,12(sp)
80000958:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:58
    return(0);
8000095c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:59
}
80000960:	00078513          	mv	a0,a5
80000964:	00c12403          	lw	s0,12(sp)
80000968:	01010113          	addi	sp,sp,16
8000096c:	00008067          	ret

80000970 <External_5_IRQHandler>:
External_5_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:62

__attribute__((weak))  uint8_t External_5_IRQHandler(void)
{
80000970:	ff010113          	addi	sp,sp,-16
80000974:	00812623          	sw	s0,12(sp)
80000978:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:63
    return(0);
8000097c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:64
}
80000980:	00078513          	mv	a0,a5
80000984:	00c12403          	lw	s0,12(sp)
80000988:	01010113          	addi	sp,sp,16
8000098c:	00008067          	ret

80000990 <External_6_IRQHandler>:
External_6_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:67

__attribute__((weak))  uint8_t External_6_IRQHandler(void)
{
80000990:	ff010113          	addi	sp,sp,-16
80000994:	00812623          	sw	s0,12(sp)
80000998:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:68
    return(0);
8000099c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:69
}
800009a0:	00078513          	mv	a0,a5
800009a4:	00c12403          	lw	s0,12(sp)
800009a8:	01010113          	addi	sp,sp,16
800009ac:	00008067          	ret

800009b0 <External_7_IRQHandler>:
External_7_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:72

__attribute__((weak))  uint8_t External_7_IRQHandler(void)
{
800009b0:	ff010113          	addi	sp,sp,-16
800009b4:	00812623          	sw	s0,12(sp)
800009b8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:73
    return(0);
800009bc:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:74
}
800009c0:	00078513          	mv	a0,a5
800009c4:	00c12403          	lw	s0,12(sp)
800009c8:	01010113          	addi	sp,sp,16
800009cc:	00008067          	ret

800009d0 <External_8_IRQHandler>:
External_8_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:77

__attribute__((weak))  uint8_t External_8_IRQHandler(void)
{
800009d0:	ff010113          	addi	sp,sp,-16
800009d4:	00812623          	sw	s0,12(sp)
800009d8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:78
    return(0);
800009dc:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:79
}
800009e0:	00078513          	mv	a0,a5
800009e4:	00c12403          	lw	s0,12(sp)
800009e8:	01010113          	addi	sp,sp,16
800009ec:	00008067          	ret

800009f0 <External_9_IRQHandler>:
External_9_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:82

__attribute__((weak))  uint8_t External_9_IRQHandler(void)
{
800009f0:	ff010113          	addi	sp,sp,-16
800009f4:	00812623          	sw	s0,12(sp)
800009f8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:83
    return(0);
800009fc:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:84
}
80000a00:	00078513          	mv	a0,a5
80000a04:	00c12403          	lw	s0,12(sp)
80000a08:	01010113          	addi	sp,sp,16
80000a0c:	00008067          	ret

80000a10 <External_10_IRQHandler>:
External_10_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:87

__attribute__((weak))  uint8_t External_10_IRQHandler(void)
{
80000a10:	ff010113          	addi	sp,sp,-16
80000a14:	00812623          	sw	s0,12(sp)
80000a18:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:88
    return(0);
80000a1c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:89
}
80000a20:	00078513          	mv	a0,a5
80000a24:	00c12403          	lw	s0,12(sp)
80000a28:	01010113          	addi	sp,sp,16
80000a2c:	00008067          	ret

80000a30 <External_11_IRQHandler>:
External_11_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:92

__attribute__((weak))  uint8_t External_11_IRQHandler(void)
{
80000a30:	ff010113          	addi	sp,sp,-16
80000a34:	00812623          	sw	s0,12(sp)
80000a38:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:93
    return(0);
80000a3c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:94
}
80000a40:	00078513          	mv	a0,a5
80000a44:	00c12403          	lw	s0,12(sp)
80000a48:	01010113          	addi	sp,sp,16
80000a4c:	00008067          	ret

80000a50 <External_12_IRQHandler>:
External_12_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:97

__attribute__((weak))  uint8_t External_12_IRQHandler(void)
{
80000a50:	ff010113          	addi	sp,sp,-16
80000a54:	00812623          	sw	s0,12(sp)
80000a58:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:98
    return(0);
80000a5c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:99
}
80000a60:	00078513          	mv	a0,a5
80000a64:	00c12403          	lw	s0,12(sp)
80000a68:	01010113          	addi	sp,sp,16
80000a6c:	00008067          	ret

80000a70 <External_13_IRQHandler>:
External_13_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:102

__attribute__((weak))  uint8_t External_13_IRQHandler(void)
{
80000a70:	ff010113          	addi	sp,sp,-16
80000a74:	00812623          	sw	s0,12(sp)
80000a78:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:103
    return(0);
80000a7c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:104
}
80000a80:	00078513          	mv	a0,a5
80000a84:	00c12403          	lw	s0,12(sp)
80000a88:	01010113          	addi	sp,sp,16
80000a8c:	00008067          	ret

80000a90 <External_14_IRQHandler>:
External_14_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:107

__attribute__((weak))  uint8_t External_14_IRQHandler(void)
{
80000a90:	ff010113          	addi	sp,sp,-16
80000a94:	00812623          	sw	s0,12(sp)
80000a98:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:108
    return(0);
80000a9c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:109
}
80000aa0:	00078513          	mv	a0,a5
80000aa4:	00c12403          	lw	s0,12(sp)
80000aa8:	01010113          	addi	sp,sp,16
80000aac:	00008067          	ret

80000ab0 <External_15_IRQHandler>:
External_15_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:112

__attribute__((weak))  uint8_t External_15_IRQHandler(void)
{
80000ab0:	ff010113          	addi	sp,sp,-16
80000ab4:	00812623          	sw	s0,12(sp)
80000ab8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:113
    return(0);
80000abc:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:114
}
80000ac0:	00078513          	mv	a0,a5
80000ac4:	00c12403          	lw	s0,12(sp)
80000ac8:	01010113          	addi	sp,sp,16
80000acc:	00008067          	ret

80000ad0 <External_16_IRQHandler>:
External_16_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:117

__attribute__((weak))  uint8_t External_16_IRQHandler(void)
{
80000ad0:	ff010113          	addi	sp,sp,-16
80000ad4:	00812623          	sw	s0,12(sp)
80000ad8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:118
    return(0);
80000adc:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:119
}
80000ae0:	00078513          	mv	a0,a5
80000ae4:	00c12403          	lw	s0,12(sp)
80000ae8:	01010113          	addi	sp,sp,16
80000aec:	00008067          	ret

80000af0 <External_17_IRQHandler>:
External_17_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:122

__attribute__((weak))  uint8_t External_17_IRQHandler(void)
{
80000af0:	ff010113          	addi	sp,sp,-16
80000af4:	00812623          	sw	s0,12(sp)
80000af8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:123
    return(0);
80000afc:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:124
}
80000b00:	00078513          	mv	a0,a5
80000b04:	00c12403          	lw	s0,12(sp)
80000b08:	01010113          	addi	sp,sp,16
80000b0c:	00008067          	ret

80000b10 <External_18_IRQHandler>:
External_18_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:127

__attribute__((weak))  uint8_t External_18_IRQHandler(void)
{
80000b10:	ff010113          	addi	sp,sp,-16
80000b14:	00812623          	sw	s0,12(sp)
80000b18:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:128
    return(0);
80000b1c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:129
}
80000b20:	00078513          	mv	a0,a5
80000b24:	00c12403          	lw	s0,12(sp)
80000b28:	01010113          	addi	sp,sp,16
80000b2c:	00008067          	ret

80000b30 <External_19_IRQHandler>:
External_19_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:132

__attribute__((weak))  uint8_t External_19_IRQHandler(void)
{
80000b30:	ff010113          	addi	sp,sp,-16
80000b34:	00812623          	sw	s0,12(sp)
80000b38:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:133
    return(0);
80000b3c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:134
}
80000b40:	00078513          	mv	a0,a5
80000b44:	00c12403          	lw	s0,12(sp)
80000b48:	01010113          	addi	sp,sp,16
80000b4c:	00008067          	ret

80000b50 <External_20_IRQHandler>:
External_20_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:137

__attribute__((weak))  uint8_t External_20_IRQHandler(void)
{
80000b50:	ff010113          	addi	sp,sp,-16
80000b54:	00812623          	sw	s0,12(sp)
80000b58:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:138
    return(0);
80000b5c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:139
}
80000b60:	00078513          	mv	a0,a5
80000b64:	00c12403          	lw	s0,12(sp)
80000b68:	01010113          	addi	sp,sp,16
80000b6c:	00008067          	ret

80000b70 <External_21_IRQHandler>:
External_21_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:142

__attribute__((weak))  uint8_t External_21_IRQHandler(void)
{
80000b70:	ff010113          	addi	sp,sp,-16
80000b74:	00812623          	sw	s0,12(sp)
80000b78:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:143
    return(0);
80000b7c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:144
}
80000b80:	00078513          	mv	a0,a5
80000b84:	00c12403          	lw	s0,12(sp)
80000b88:	01010113          	addi	sp,sp,16
80000b8c:	00008067          	ret

80000b90 <External_22_IRQHandler>:
External_22_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:147

__attribute__((weak))  uint8_t External_22_IRQHandler(void)
{
80000b90:	ff010113          	addi	sp,sp,-16
80000b94:	00812623          	sw	s0,12(sp)
80000b98:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:148
    return(0);
80000b9c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:149
}
80000ba0:	00078513          	mv	a0,a5
80000ba4:	00c12403          	lw	s0,12(sp)
80000ba8:	01010113          	addi	sp,sp,16
80000bac:	00008067          	ret

80000bb0 <External_23_IRQHandler>:
External_23_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:152

__attribute__((weak))  uint8_t External_23_IRQHandler(void)
{
80000bb0:	ff010113          	addi	sp,sp,-16
80000bb4:	00812623          	sw	s0,12(sp)
80000bb8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:153
    return(0);
80000bbc:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:154
}
80000bc0:	00078513          	mv	a0,a5
80000bc4:	00c12403          	lw	s0,12(sp)
80000bc8:	01010113          	addi	sp,sp,16
80000bcc:	00008067          	ret

80000bd0 <External_24_IRQHandler>:
External_24_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:157

__attribute__((weak))  uint8_t External_24_IRQHandler(void)
{
80000bd0:	ff010113          	addi	sp,sp,-16
80000bd4:	00812623          	sw	s0,12(sp)
80000bd8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:158
    return(0);
80000bdc:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:159
}
80000be0:	00078513          	mv	a0,a5
80000be4:	00c12403          	lw	s0,12(sp)
80000be8:	01010113          	addi	sp,sp,16
80000bec:	00008067          	ret

80000bf0 <External_25_IRQHandler>:
External_25_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:162

__attribute__((weak))  uint8_t External_25_IRQHandler(void)
{
80000bf0:	ff010113          	addi	sp,sp,-16
80000bf4:	00812623          	sw	s0,12(sp)
80000bf8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:163
    return(0);
80000bfc:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:164
}
80000c00:	00078513          	mv	a0,a5
80000c04:	00c12403          	lw	s0,12(sp)
80000c08:	01010113          	addi	sp,sp,16
80000c0c:	00008067          	ret

80000c10 <External_26_IRQHandler>:
External_26_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:167

__attribute__((weak))  uint8_t External_26_IRQHandler(void)
{
80000c10:	ff010113          	addi	sp,sp,-16
80000c14:	00812623          	sw	s0,12(sp)
80000c18:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:168
    return(0);
80000c1c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:169
}
80000c20:	00078513          	mv	a0,a5
80000c24:	00c12403          	lw	s0,12(sp)
80000c28:	01010113          	addi	sp,sp,16
80000c2c:	00008067          	ret

80000c30 <External_27_IRQHandler>:
External_27_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:172

__attribute__((weak))  uint8_t External_27_IRQHandler(void)
{
80000c30:	ff010113          	addi	sp,sp,-16
80000c34:	00812623          	sw	s0,12(sp)
80000c38:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:173
    return(0);
80000c3c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:174
}
80000c40:	00078513          	mv	a0,a5
80000c44:	00c12403          	lw	s0,12(sp)
80000c48:	01010113          	addi	sp,sp,16
80000c4c:	00008067          	ret

80000c50 <External_28_IRQHandler>:
External_28_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:177

__attribute__((weak))  uint8_t External_28_IRQHandler(void)
{
80000c50:	ff010113          	addi	sp,sp,-16
80000c54:	00812623          	sw	s0,12(sp)
80000c58:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:178
    return(0);
80000c5c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:179
}
80000c60:	00078513          	mv	a0,a5
80000c64:	00c12403          	lw	s0,12(sp)
80000c68:	01010113          	addi	sp,sp,16
80000c6c:	00008067          	ret

80000c70 <External_29_IRQHandler>:
External_29_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:182

__attribute__((weak))  uint8_t External_29_IRQHandler(void)
{
80000c70:	ff010113          	addi	sp,sp,-16
80000c74:	00812623          	sw	s0,12(sp)
80000c78:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:183
    return(0);
80000c7c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:184
}
80000c80:	00078513          	mv	a0,a5
80000c84:	00c12403          	lw	s0,12(sp)
80000c88:	01010113          	addi	sp,sp,16
80000c8c:	00008067          	ret

80000c90 <External_30_IRQHandler>:
External_30_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:187

__attribute__((weak))  uint8_t External_30_IRQHandler(void)
{
80000c90:	ff010113          	addi	sp,sp,-16
80000c94:	00812623          	sw	s0,12(sp)
80000c98:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:188
    return(0);
80000c9c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:189
}
80000ca0:	00078513          	mv	a0,a5
80000ca4:	00c12403          	lw	s0,12(sp)
80000ca8:	01010113          	addi	sp,sp,16
80000cac:	00008067          	ret

80000cb0 <External_31_IRQHandler>:
External_31_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:192

__attribute__((weak))  uint8_t External_31_IRQHandler(void)
{
80000cb0:	ff010113          	addi	sp,sp,-16
80000cb4:	00812623          	sw	s0,12(sp)
80000cb8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:193
    return(0);
80000cbc:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:194
}
80000cc0:	00078513          	mv	a0,a5
80000cc4:	00c12403          	lw	s0,12(sp)
80000cc8:	01010113          	addi	sp,sp,16
80000ccc:	00008067          	ret

80000cd0 <write_hex>:
write_hex():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:55

char *__env[1] = { 0 };
char **environ = __env;

void write_hex(int fd, uint32_t hex)
{
80000cd0:	fd010113          	addi	sp,sp,-48
80000cd4:	02112623          	sw	ra,44(sp)
80000cd8:	02812423          	sw	s0,40(sp)
80000cdc:	03010413          	addi	s0,sp,48
80000ce0:	fca42e23          	sw	a0,-36(s0)
80000ce4:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:61
    uint8_t ii;
    uint8_t jj;
    char towrite;
    uint8_t digit;

    write( fd , "0x", 2 );
80000ce8:	00200613          	li	a2,2
80000cec:	800077b7          	lui	a5,0x80007
80000cf0:	f0078593          	addi	a1,a5,-256 # 80006f00 <__stack_top+0xfffc5150>
80000cf4:	fdc42503          	lw	a0,-36(s0)
80000cf8:	010060ef          	jal	ra,80006d08 <write>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:63

    for (ii = 8 ; ii > 0; ii--)
80000cfc:	00800793          	li	a5,8
80000d00:	fef407a3          	sb	a5,-17(s0)
80000d04:	0980006f          	j	80000d9c <write_hex+0xcc>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:65
    {
        jj = ii-1;
80000d08:	fef44783          	lbu	a5,-17(s0)
80000d0c:	fff78793          	addi	a5,a5,-1
80000d10:	fef40723          	sb	a5,-18(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:66
        digit = ((hex & (0xF << (jj*4))) >> (jj*4));
80000d14:	fee44783          	lbu	a5,-18(s0)
80000d18:	00279793          	slli	a5,a5,0x2
80000d1c:	00f00713          	li	a4,15
80000d20:	00f717b3          	sll	a5,a4,a5
80000d24:	00078713          	mv	a4,a5
80000d28:	fd842783          	lw	a5,-40(s0)
80000d2c:	00f77733          	and	a4,a4,a5
80000d30:	fee44783          	lbu	a5,-18(s0)
80000d34:	00279793          	slli	a5,a5,0x2
80000d38:	00f757b3          	srl	a5,a4,a5
80000d3c:	fef406a3          	sb	a5,-19(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:67
        towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
80000d40:	fed44703          	lbu	a4,-19(s0)
80000d44:	00900793          	li	a5,9
80000d48:	00e7ee63          	bltu	a5,a4,80000d64 <write_hex+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 1)
80000d4c:	fed44783          	lbu	a5,-19(s0)
80000d50:	03078793          	addi	a5,a5,48
80000d54:	0ff7f793          	andi	a5,a5,255
80000d58:	01879793          	slli	a5,a5,0x18
80000d5c:	4187d793          	srai	a5,a5,0x18
80000d60:	0180006f          	j	80000d78 <write_hex+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 2)
80000d64:	fed44783          	lbu	a5,-19(s0)
80000d68:	03778793          	addi	a5,a5,55
80000d6c:	0ff7f793          	andi	a5,a5,255
80000d70:	01879793          	slli	a5,a5,0x18
80000d74:	4187d793          	srai	a5,a5,0x18
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 4)
80000d78:	fef40623          	sb	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:68 (discriminator 4)
        write( fd, &towrite, 1);
80000d7c:	fec40793          	addi	a5,s0,-20
80000d80:	00100613          	li	a2,1
80000d84:	00078593          	mv	a1,a5
80000d88:	fdc42503          	lw	a0,-36(s0)
80000d8c:	77d050ef          	jal	ra,80006d08 <write>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 4)
    for (ii = 8 ; ii > 0; ii--)
80000d90:	fef44783          	lbu	a5,-17(s0)
80000d94:	fff78793          	addi	a5,a5,-1
80000d98:	fef407a3          	sb	a5,-17(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 2)
80000d9c:	fef44783          	lbu	a5,-17(s0)
80000da0:	f60794e3          	bnez	a5,80000d08 <write_hex+0x38>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:70
    }
}
80000da4:	00000013          	nop
80000da8:	02c12083          	lw	ra,44(sp)
80000dac:	02812403          	lw	s0,40(sp)
80000db0:	03010113          	addi	sp,sp,48
80000db4:	00008067          	ret

80000db8 <_exit>:
_exit():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:74

               
void _exit(int code)
{
80000db8:	fd010113          	addi	sp,sp,-48
80000dbc:	02112623          	sw	ra,44(sp)
80000dc0:	02812423          	sw	s0,40(sp)
80000dc4:	03010413          	addi	s0,sp,48
80000dc8:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:76
#ifdef MSCC_STDIO_THRU_CORE_UART_APB
    const char * message = "\nProgam has exited with code:";
80000dcc:	800077b7          	lui	a5,0x80007
80000dd0:	f0478793          	addi	a5,a5,-252 # 80006f04 <__stack_top+0xfffc5154>
80000dd4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:78

    write(STDERR_FILENO, message, strlen(message));
80000dd8:	fec42503          	lw	a0,-20(s0)
80000ddc:	0c8010ef          	jal	ra,80001ea4 <strlen>
80000de0:	00050793          	mv	a5,a0
80000de4:	00078613          	mv	a2,a5
80000de8:	fec42583          	lw	a1,-20(s0)
80000dec:	00200513          	li	a0,2
80000df0:	719050ef          	jal	ra,80006d08 <write>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:79
    write_hex(STDERR_FILENO, code);
80000df4:	fdc42783          	lw	a5,-36(s0)
80000df8:	00078593          	mv	a1,a5
80000dfc:	00200513          	li	a0,2
80000e00:	ed1ff0ef          	jal	ra,80000cd0 <write_hex>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:82 (discriminator 1)
#endif

    while (1);
80000e04:	0000006f          	j	80000e04 <_exit+0x4c>

80000e08 <_isatty>:
_isatty():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:101
    curbrk += incr;
    return curbrk - incr;
}

int _isatty(int fd)
{
80000e08:	fe010113          	addi	sp,sp,-32
80000e0c:	00812e23          	sw	s0,28(sp)
80000e10:	02010413          	addi	s0,sp,32
80000e14:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:102
    if (fd == STDOUT_FILENO || fd == STDERR_FILENO)
80000e18:	fec42703          	lw	a4,-20(s0)
80000e1c:	00100793          	li	a5,1
80000e20:	00f70863          	beq	a4,a5,80000e30 <_isatty+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:102 (discriminator 1)
80000e24:	fec42703          	lw	a4,-20(s0)
80000e28:	00200793          	li	a5,2
80000e2c:	00f71663          	bne	a4,a5,80000e38 <_isatty+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:104
    {
        return 1;
80000e30:	00100793          	li	a5,1
80000e34:	0140006f          	j	80000e48 <_isatty+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:107
    }

    errno = EBADF;
80000e38:	800217b7          	lui	a5,0x80021
80000e3c:	00900713          	li	a4,9
80000e40:	26e7a823          	sw	a4,624(a5) # 80021270 <__stack_top+0xfffdf4c0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:108
    return 0;
80000e44:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:109
}
80000e48:	00078513          	mv	a0,a5
80000e4c:	01c12403          	lw	s0,28(sp)
80000e50:	02010113          	addi	sp,sp,32
80000e54:	00008067          	ret

80000e58 <stub>:
stub():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:112

static int stub(int err)
{
80000e58:	fe010113          	addi	sp,sp,-32
80000e5c:	00812e23          	sw	s0,28(sp)
80000e60:	02010413          	addi	s0,sp,32
80000e64:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:113
    errno = err;
80000e68:	800217b7          	lui	a5,0x80021
80000e6c:	fec42703          	lw	a4,-20(s0)
80000e70:	26e7a823          	sw	a4,624(a5) # 80021270 <__stack_top+0xfffdf4c0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:114
    return -1;
80000e74:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:115
}
80000e78:	00078513          	mv	a0,a5
80000e7c:	01c12403          	lw	s0,28(sp)
80000e80:	02010113          	addi	sp,sp,32
80000e84:	00008067          	ret

80000e88 <_write>:
_write():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:226
{
    return stub(ECHILD);
}

ssize_t _write(int fd, const void* ptr, size_t len)
{
80000e88:	fd010113          	addi	sp,sp,-48
80000e8c:	02112623          	sw	ra,44(sp)
80000e90:	02812423          	sw	s0,40(sp)
80000e94:	03010413          	addi	s0,sp,48
80000e98:	fca42e23          	sw	a0,-36(s0)
80000e9c:	fcb42c23          	sw	a1,-40(s0)
80000ea0:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:229

#ifdef MSCC_STDIO_THRU_CORE_UART_APB
  const uint8_t * current = (const uint8_t *) ptr;
80000ea4:	fd842783          	lw	a5,-40(s0)
80000ea8:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:232
  size_t jj;

  if (_isatty(fd))
80000eac:	fdc42503          	lw	a0,-36(s0)
80000eb0:	f59ff0ef          	jal	ra,80000e08 <_isatty>
80000eb4:	00050793          	mv	a5,a0
80000eb8:	08078c63          	beqz	a5,80000f50 <_write+0xc8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:238
  {
        /*--------------------------------------------------------------------------
        * Initialize the UART driver if it is the first time this function is
        * called.
        */
        if ( !g_stdio_uart_init_done )
80000ebc:	9101a783          	lw	a5,-1776(gp) # 800076d0 <g_stdio_uart_init_done>
80000ec0:	02079063          	bnez	a5,80000ee0 <_write+0x58>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:245
            /******************************************************************************
            * Baud value:
            * This value is calculated using the following equation:
            *      BAUD_VALUE = (CLOCK / (16 * BAUD_RATE)) - 1
            *****************************************************************************/
            UART_init( &g_stdio_uart, MSCC_STDIO_UART_BASE_ADDR, ((SYS_CLK_FREQ/(16 * MSCC_STDIO_BAUD_VALUE))-1), (DATA_8_BITS | NO_PARITY));
80000ec4:	00100693          	li	a3,1
80000ec8:	02c00613          	li	a2,44
80000ecc:	700015b7          	lui	a1,0x70001
80000ed0:	90818513          	addi	a0,gp,-1784 # 800076c8 <g_stdio_uart>
80000ed4:	174000ef          	jal	ra,80001048 <UART_init>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:246
            g_stdio_uart_init_done = 1;
80000ed8:	00100713          	li	a4,1
80000edc:	90e1a823          	sw	a4,-1776(gp) # 800076d0 <g_stdio_uart_init_done>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:249
        }

    for (jj = 0; jj < len; jj++)
80000ee0:	fe042623          	sw	zero,-20(s0)
80000ee4:	0580006f          	j	80000f3c <_write+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:251
    {
        UART_send(&g_stdio_uart, current + jj, 1);
80000ee8:	fe842703          	lw	a4,-24(s0)
80000eec:	fec42783          	lw	a5,-20(s0)
80000ef0:	00f707b3          	add	a5,a4,a5
80000ef4:	00100613          	li	a2,1
80000ef8:	00078593          	mv	a1,a5
80000efc:	90818513          	addi	a0,gp,-1784 # 800076c8 <g_stdio_uart>
80000f00:	260000ef          	jal	ra,80001160 <UART_send>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:252
        if (current[jj] == '\n')
80000f04:	fe842703          	lw	a4,-24(s0)
80000f08:	fec42783          	lw	a5,-20(s0)
80000f0c:	00f707b3          	add	a5,a4,a5
80000f10:	0007c703          	lbu	a4,0(a5)
80000f14:	00a00793          	li	a5,10
80000f18:	00f71c63          	bne	a4,a5,80000f30 <_write+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:254
        {
            UART_send(&g_stdio_uart, (const uint8_t *)"\r", 1);
80000f1c:	00100613          	li	a2,1
80000f20:	800077b7          	lui	a5,0x80007
80000f24:	f2478593          	addi	a1,a5,-220 # 80006f24 <__stack_top+0xfffc5174>
80000f28:	90818513          	addi	a0,gp,-1784 # 800076c8 <g_stdio_uart>
80000f2c:	234000ef          	jal	ra,80001160 <UART_send>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 2)
    for (jj = 0; jj < len; jj++)
80000f30:	fec42783          	lw	a5,-20(s0)
80000f34:	00178793          	addi	a5,a5,1
80000f38:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 1)
80000f3c:	fec42703          	lw	a4,-20(s0)
80000f40:	fd442783          	lw	a5,-44(s0)
80000f44:	faf762e3          	bltu	a4,a5,80000ee8 <_write+0x60>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:257
        }
    }
    return len;
80000f48:	fd442783          	lw	a5,-44(s0)
80000f4c:	0100006f          	j	80000f5c <_write+0xd4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:261
  }
#endif

  return stub(EBADF);
80000f50:	00900513          	li	a0,9
80000f54:	f05ff0ef          	jal	ra,80000e58 <stub>
80000f58:	00050793          	mv	a5,a0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/syscall.c:262
}
80000f5c:	00078513          	mv	a0,a5
80000f60:	02c12083          	lw	ra,44(sp)
80000f64:	02812403          	lw	s0,40(sp)
80000f68:	03010113          	addi	sp,sp,48
80000f6c:	00008067          	ret

80000f70 <HW_set_32bit_reg>:
HW_set_32bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:36
 *
 * a0:   addr_t reg_addr
 * a1:   uint32_t value
 */
HW_set_32bit_reg:
    sw a1, 0(a0)
80000f70:	00b52023          	sw	a1,0(a0) # 44000000 <RAM_SIZE+0x43f80000>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:37
    ret
80000f74:	00008067          	ret

80000f78 <HW_get_32bit_reg>:
HW_get_32bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:47
 *
 * R0:   addr_t reg_addr
 * @return          32 bits value read from the peripheral register.
 */
HW_get_32bit_reg:
    lw a0, 0(a0)
80000f78:	00052503          	lw	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:48
    ret
80000f7c:	00008067          	ret

80000f80 <HW_set_32bit_reg_field>:
HW_set_32bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:60
 * a1:   int_fast8_t shift
 * a2:   uint32_t mask
 * a3:   uint32_t value
 */
HW_set_32bit_reg_field:
    mv t3, a3
80000f80:	00068e13          	mv	t3,a3
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:61
    sll t3, t3, a1
80000f84:	00be1e33          	sll	t3,t3,a1
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:62
    and  t3, t3, a2
80000f88:	00ce7e33          	and	t3,t3,a2
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:63
    lw t1, 0(a0)
80000f8c:	00052303          	lw	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:64
    mv t2, a2
80000f90:	00060393          	mv	t2,a2
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:65
    not t2, t2
80000f94:	fff3c393          	not	t2,t2
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:66
    and t1, t1, t2
80000f98:	00737333          	and	t1,t1,t2
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:67
    or t1, t1, t3
80000f9c:	01c36333          	or	t1,t1,t3
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:68
    sw t1, 0(a0)
80000fa0:	00652023          	sw	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:69
    ret
80000fa4:	00008067          	ret

80000fa8 <HW_get_32bit_reg_field>:
HW_get_32bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:83
 *
 * @return          32 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_32bit_reg_field:
    lw a0, 0(a0)
80000fa8:	00052503          	lw	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:84
    and a0, a0, a2
80000fac:	00c57533          	and	a0,a0,a2
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:85
    srl a0, a0, a1
80000fb0:	00b55533          	srl	a0,a0,a1
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:86
    ret
80000fb4:	00008067          	ret

80000fb8 <HW_set_16bit_reg>:
HW_set_16bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:96
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast16_t value
 */
HW_set_16bit_reg:
    sh a1, 0(a0)
80000fb8:	00b51023          	sh	a1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:97
    ret
80000fbc:	00008067          	ret

80000fc0 <HW_get_16bit_reg>:
HW_get_16bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:107
 *
 * a0:   addr_t reg_addr
 * @return          16 bits value read from the peripheral register.
 */
HW_get_16bit_reg:
    lh a0, (a0)
80000fc0:	00051503          	lh	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:108
    ret
80000fc4:	00008067          	ret

80000fc8 <HW_set_16bit_reg_field>:
HW_set_16bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:121
 * a2:   uint_fast16_t mask
 * a3:   uint_fast16_t value
 * @param value     Value to be written in the specified field.
 */
HW_set_16bit_reg_field:
    mv t3, a3
80000fc8:	00068e13          	mv	t3,a3
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:122
    sll t3, t3, a1
80000fcc:	00be1e33          	sll	t3,t3,a1
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:123
    and  t3, t3, a2
80000fd0:	00ce7e33          	and	t3,t3,a2
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:124
    lh t1, 0(a0)
80000fd4:	00051303          	lh	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:125
    mv t2, a2
80000fd8:	00060393          	mv	t2,a2
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:126
    not t2, t2
80000fdc:	fff3c393          	not	t2,t2
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:127
    and t1, t1, t2
80000fe0:	00737333          	and	t1,t1,t2
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:128
    or t1, t1, t3
80000fe4:	01c36333          	or	t1,t1,t3
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:129
    sh t1, 0(a0)
80000fe8:	00651023          	sh	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:130
    ret
80000fec:	00008067          	ret

80000ff0 <HW_get_16bit_reg_field>:
HW_get_16bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:144
 *
 * @return          16 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_16bit_reg_field:
    lh a0, 0(a0)
80000ff0:	00051503          	lh	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:145
    and a0, a0, a2
80000ff4:	00c57533          	and	a0,a0,a2
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:146
    srl a0, a0, a1
80000ff8:	00b55533          	srl	a0,a0,a1
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:147
    ret
80000ffc:	00008067          	ret

80001000 <HW_set_8bit_reg>:
HW_set_8bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:157
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast8_t value
 */
HW_set_8bit_reg:
    sb a1, 0(a0)
80001000:	00b50023          	sb	a1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:158
    ret
80001004:	00008067          	ret

80001008 <HW_get_8bit_reg>:
HW_get_8bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:168
 *
 * a0:   addr_t reg_addr
 * @return          8 bits value read from the peripheral register.
 */
HW_get_8bit_reg:
    lb a0, 0(a0)
80001008:	00050503          	lb	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:169
    ret
8000100c:	00008067          	ret

80001010 <HW_set_8bit_reg_field>:
HW_set_8bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:181
 * a1:   int_fast8_t shift
 * a2:   uint_fast8_t mask
 * a3:   uint_fast8_t value
 */
HW_set_8bit_reg_field:
    mv t3, a3
80001010:	00068e13          	mv	t3,a3
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:182
    sll t3, t3, a1
80001014:	00be1e33          	sll	t3,t3,a1
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:183
    and  t3, t3, a2
80001018:	00ce7e33          	and	t3,t3,a2
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:184
    lb t1, 0(a0)
8000101c:	00050303          	lb	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:185
    mv t2, a2
80001020:	00060393          	mv	t2,a2
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:186
    not t2, t2
80001024:	fff3c393          	not	t2,t2
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:187
    and t1, t1, t2
80001028:	00737333          	and	t1,t1,t2
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:188
    or t1, t1, t3
8000102c:	01c36333          	or	t1,t1,t3
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:189
    sb t1, 0(a0)
80001030:	00650023          	sb	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:190
    ret
80001034:	00008067          	ret

80001038 <HW_get_8bit_reg_field>:
HW_get_8bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:204
 *
 * @return          8 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_8bit_reg_field:
    lb a0, 0(a0)
80001038:	00050503          	lb	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:205
    and a0, a0, a2
8000103c:	00c57533          	and	a0,a0,a2
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:206
    srl a0, a0, a1
80001040:	00b55533          	srl	a0,a0,a1
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../hal/hw_reg_access.S:207
    ret
80001044:	00008067          	ret

80001048 <UART_init>:
UART_init():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:46
    UART_instance_t * this_uart,
    addr_t base_addr,
    uint16_t baud_value,
    uint8_t line_config
)
{
80001048:	fd010113          	addi	sp,sp,-48
8000104c:	02112623          	sw	ra,44(sp)
80001050:	02812423          	sw	s0,40(sp)
80001054:	03010413          	addi	s0,sp,48
80001058:	fca42e23          	sw	a0,-36(s0)
8000105c:	fcb42c23          	sw	a1,-40(s0)
80001060:	00060793          	mv	a5,a2
80001064:	00068713          	mv	a4,a3
80001068:	fcf41b23          	sh	a5,-42(s0)
8000106c:	00070793          	mv	a5,a4
80001070:	fcf40aa3          	sb	a5,-43(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53
    
    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( line_config <= MAX_LINE_CONFIG )
    HAL_ASSERT( baud_value <= MAX_BAUD_VALUE )

    if( ( this_uart != NULL_INSTANCE ) &&
80001074:	fdc42783          	lw	a5,-36(s0)
80001078:	0c078a63          	beqz	a5,8000114c <UART_init+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53 (discriminator 1)
8000107c:	fd544703          	lbu	a4,-43(s0)
80001080:	00700793          	li	a5,7
80001084:	0ce7e463          	bltu	a5,a4,8000114c <UART_init+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:54
        ( line_config <= MAX_LINE_CONFIG ) &&
80001088:	fd645703          	lhu	a4,-42(s0)
8000108c:	000027b7          	lui	a5,0x2
80001090:	0af77e63          	bleu	a5,a4,8000114c <UART_init+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:60
        ( baud_value <= MAX_BAUD_VALUE ) )
    {
        /*
         * Store lower 8-bits of baud value in CTRL1.
         */
        HAL_set_8bit_reg( base_addr, CTRL1, (uint_fast8_t)(baud_value &
80001094:	fd842783          	lw	a5,-40(s0)
80001098:	00878713          	addi	a4,a5,8 # 2008 <HEAP_SIZE-0xdff8>
8000109c:	fd645783          	lhu	a5,-42(s0)
800010a0:	0ff7f793          	andi	a5,a5,255
800010a4:	00078593          	mv	a1,a5
800010a8:	00070513          	mv	a0,a4
800010ac:	f55ff0ef          	jal	ra,80001000 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:67
    
        /*
         * Extract higher 5-bits of baud value and store in higher 5-bits 
         * of CTRL2, along with line configuration in lower 3 three bits.
         */
        HAL_set_8bit_reg( base_addr, CTRL2, (uint_fast8_t)line_config | 
800010b0:	fd842783          	lw	a5,-40(s0)
800010b4:	00c78693          	addi	a3,a5,12
800010b8:	fd544703          	lbu	a4,-43(s0)
800010bc:	fd645783          	lhu	a5,-42(s0)
800010c0:	4057d793          	srai	a5,a5,0x5
800010c4:	7f87f793          	andi	a5,a5,2040
800010c8:	00f767b3          	or	a5,a4,a5
800010cc:	00078593          	mv	a1,a5
800010d0:	00068513          	mv	a0,a3
800010d4:	f2dff0ef          	jal	ra,80001000 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:71
                                           (uint_fast8_t)((baud_value &
                                   BAUDVALUE_MSB) >> BAUDVALUE_SHIFT ) );
    
        this_uart->base_address = base_addr;
800010d8:	fdc42783          	lw	a5,-36(s0)
800010dc:	fd842703          	lw	a4,-40(s0)
800010e0:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:94
        
        /*
         * Flush the receive FIFO of data that may have been received before the
         * driver was initialized.
         */
        rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
800010e4:	fdc42783          	lw	a5,-36(s0)
800010e8:	0007a783          	lw	a5,0(a5)
800010ec:	01078793          	addi	a5,a5,16
800010f0:	00078513          	mv	a0,a5
800010f4:	f15ff0ef          	jal	ra,80001008 <HW_get_8bit_reg>
800010f8:	00050793          	mv	a5,a0
800010fc:	0027f793          	andi	a5,a5,2
80001100:	fef407a3          	sb	a5,-17(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
                                                    STATUS_RXFULL_MASK;
        while ( rx_full )
80001104:	0380006f          	j	8000113c <UART_init+0xf4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:98
        {
            HAL_get_8bit_reg( this_uart->base_address, RXDATA );
80001108:	fdc42783          	lw	a5,-36(s0)
8000110c:	0007a783          	lw	a5,0(a5)
80001110:	00478793          	addi	a5,a5,4
80001114:	00078513          	mv	a0,a5
80001118:	ef1ff0ef          	jal	ra,80001008 <HW_get_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:99
            rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
8000111c:	fdc42783          	lw	a5,-36(s0)
80001120:	0007a783          	lw	a5,0(a5)
80001124:	01078793          	addi	a5,a5,16
80001128:	00078513          	mv	a0,a5
8000112c:	eddff0ef          	jal	ra,80001008 <HW_get_8bit_reg>
80001130:	00050793          	mv	a5,a0
80001134:	0027f793          	andi	a5,a5,2
80001138:	fef407a3          	sb	a5,-17(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
        while ( rx_full )
8000113c:	fef44783          	lbu	a5,-17(s0)
80001140:	fc0794e3          	bnez	a5,80001108 <UART_init+0xc0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:106
        }

        /*
         * Clear status of the UART instance.
         */
        this_uart->status = (uint8_t)0;
80001144:	fdc42783          	lw	a5,-36(s0)
80001148:	00078223          	sb	zero,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:108
    }
}
8000114c:	00000013          	nop
80001150:	02c12083          	lw	ra,44(sp)
80001154:	02812403          	lw	s0,40(sp)
80001158:	03010113          	addi	sp,sp,48
8000115c:	00008067          	ret

80001160 <UART_send>:
UART_send():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:121
(
    UART_instance_t * this_uart,
    const uint8_t * tx_buffer,
    size_t tx_size
)
{
80001160:	fd010113          	addi	sp,sp,-48
80001164:	02112623          	sw	ra,44(sp)
80001168:	02812423          	sw	s0,40(sp)
8000116c:	03010413          	addi	s0,sp,48
80001170:	fca42e23          	sw	a0,-36(s0)
80001174:	fcb42c23          	sw	a1,-40(s0)
80001178:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( tx_buffer != NULL_BUFFER )
    HAL_ASSERT( tx_size > 0 )
      
    if( (this_uart != NULL_INSTANCE) &&
8000117c:	fdc42783          	lw	a5,-36(s0)
80001180:	08078063          	beqz	a5,80001200 <UART_send+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129 (discriminator 1)
80001184:	fd842783          	lw	a5,-40(s0)
80001188:	06078c63          	beqz	a5,80001200 <UART_send+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:130
        (tx_buffer != NULL_BUFFER)   &&
8000118c:	fd442783          	lw	a5,-44(s0)
80001190:	06078863          	beqz	a5,80001200 <UART_send+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133
        (tx_size > (size_t)0) )
    {
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
80001194:	fe042623          	sw	zero,-20(s0)
80001198:	05c0006f          	j	800011f4 <UART_send+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:137 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
8000119c:	fdc42783          	lw	a5,-36(s0)
800011a0:	0007a783          	lw	a5,0(a5)
800011a4:	01078793          	addi	a5,a5,16
800011a8:	00078513          	mv	a0,a5
800011ac:	e5dff0ef          	jal	ra,80001008 <HW_get_8bit_reg>
800011b0:	00050793          	mv	a5,a0
800011b4:	0017f793          	andi	a5,a5,1
800011b8:	fef405a3          	sb	a5,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:139 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
800011bc:	feb44783          	lbu	a5,-21(s0)
800011c0:	fc078ee3          	beqz	a5,8000119c <UART_send+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:141 (discriminator 2)
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
800011c4:	fdc42783          	lw	a5,-36(s0)
800011c8:	0007a683          	lw	a3,0(a5)
800011cc:	fd842703          	lw	a4,-40(s0)
800011d0:	fec42783          	lw	a5,-20(s0)
800011d4:	00f707b3          	add	a5,a4,a5
800011d8:	0007c783          	lbu	a5,0(a5)
800011dc:	00078593          	mv	a1,a5
800011e0:	00068513          	mv	a0,a3
800011e4:	e1dff0ef          	jal	ra,80001000 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 2)
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
800011e8:	fec42783          	lw	a5,-20(s0)
800011ec:	00178793          	addi	a5,a5,1
800011f0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 1)
800011f4:	fec42703          	lw	a4,-20(s0)
800011f8:	fd442783          	lw	a5,-44(s0)
800011fc:	faf760e3          	bltu	a4,a5,8000119c <UART_send+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:145
                              (uint_fast8_t)tx_buffer[char_idx] );
        }
    }
}
80001200:	00000013          	nop
80001204:	02c12083          	lw	ra,44(sp)
80001208:	02812403          	lw	s0,40(sp)
8000120c:	03010113          	addi	sp,sp,48
80001210:	00008067          	ret

80001214 <UART_polled_tx_string>:
UART_polled_tx_string():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:239
UART_polled_tx_string
( 
    UART_instance_t * this_uart, 
    const uint8_t * p_sz_string
)
{
80001214:	fd010113          	addi	sp,sp,-48
80001218:	02112623          	sw	ra,44(sp)
8000121c:	02812423          	sw	s0,40(sp)
80001220:	03010413          	addi	s0,sp,48
80001224:	fca42e23          	sw	a0,-36(s0)
80001228:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246
    uint8_t tx_ready;

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( p_sz_string != NULL_BUFFER )
    
    if( ( this_uart != NULL_INSTANCE ) && ( p_sz_string != NULL_BUFFER ) )
8000122c:	fdc42783          	lw	a5,-36(s0)
80001230:	08078063          	beqz	a5,800012b0 <UART_polled_tx_string+0x9c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246 (discriminator 1)
80001234:	fd842783          	lw	a5,-40(s0)
80001238:	06078c63          	beqz	a5,800012b0 <UART_polled_tx_string+0x9c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:248
    {
        char_idx = 0U;
8000123c:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
80001240:	05c0006f          	j	8000129c <UART_polled_tx_string+0x88>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:253 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001244:	fdc42783          	lw	a5,-36(s0)
80001248:	0007a783          	lw	a5,0(a5)
8000124c:	01078793          	addi	a5,a5,16
80001250:	00078513          	mv	a0,a5
80001254:	db5ff0ef          	jal	ra,80001008 <HW_get_8bit_reg>
80001258:	00050793          	mv	a5,a0
8000125c:	0017f793          	andi	a5,a5,1
80001260:	fef405a3          	sb	a5,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:255 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
80001264:	feb44783          	lbu	a5,-21(s0)
80001268:	fc078ee3          	beqz	a5,80001244 <UART_polled_tx_string+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:257
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
8000126c:	fdc42783          	lw	a5,-36(s0)
80001270:	0007a683          	lw	a3,0(a5)
80001274:	fd842703          	lw	a4,-40(s0)
80001278:	fec42783          	lw	a5,-20(s0)
8000127c:	00f707b3          	add	a5,a4,a5
80001280:	0007c783          	lbu	a5,0(a5)
80001284:	00078593          	mv	a1,a5
80001288:	00068513          	mv	a0,a3
8000128c:	d75ff0ef          	jal	ra,80001000 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:259
                              (uint_fast8_t)p_sz_string[char_idx] );
            char_idx++;
80001290:	fec42783          	lw	a5,-20(s0)
80001294:	00178793          	addi	a5,a5,1
80001298:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
8000129c:	fd842703          	lw	a4,-40(s0)
800012a0:	fec42783          	lw	a5,-20(s0)
800012a4:	00f707b3          	add	a5,a4,a5
800012a8:	0007c783          	lbu	a5,0(a5)
800012ac:	f8079ce3          	bnez	a5,80001244 <UART_polled_tx_string+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:262
        }
    }
}
800012b0:	00000013          	nop
800012b4:	02c12083          	lw	ra,44(sp)
800012b8:	02812403          	lw	s0,40(sp)
800012bc:	03010113          	addi	sp,sp,48
800012c0:	00008067          	ret

800012c4 <pvPortMalloc>:
pvPortMalloc():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:151
}
/*-----------------------------------------------------------*/


void *pvPortMalloc( size_t xWantedSize )
{
800012c4:	fc010113          	addi	sp,sp,-64
800012c8:	02112e23          	sw	ra,60(sp)
800012cc:	02812c23          	sw	s0,56(sp)
800012d0:	04010413          	addi	s0,sp,64
800012d4:	fca42623          	sw	a0,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:154
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
800012d8:	fe042223          	sw	zero,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:156

	vTaskSuspendAll();
800012dc:	024010ef          	jal	ra,80002300 <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:160
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
800012e0:	9241a783          	lw	a5,-1756(gp) # 800076e4 <xHeapHasBeenInitialised.2777>
800012e4:	00079863          	bnez	a5,800012f4 <pvPortMalloc+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:162
		{
			prvHeapInit();
800012e8:	284000ef          	jal	ra,8000156c <prvHeapInit>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:163
			xHeapHasBeenInitialised = pdTRUE;
800012ec:	00100713          	li	a4,1
800012f0:	92e1a223          	sw	a4,-1756(gp) # 800076e4 <xHeapHasBeenInitialised.2777>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:168
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
800012f4:	fcc42783          	lw	a5,-52(s0)
800012f8:	02078a63          	beqz	a5,8000132c <pvPortMalloc+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:170
		{
			xWantedSize += heapSTRUCT_SIZE;
800012fc:	00800793          	li	a5,8
80001300:	00078713          	mv	a4,a5
80001304:	fcc42783          	lw	a5,-52(s0)
80001308:	00e787b3          	add	a5,a5,a4
8000130c:	fcf42623          	sw	a5,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:173

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
80001310:	fcc42783          	lw	a5,-52(s0)
80001314:	0037f793          	andi	a5,a5,3
80001318:	00078a63          	beqz	a5,8000132c <pvPortMalloc+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:176
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
8000131c:	fcc42783          	lw	a5,-52(s0)
80001320:	ffc7f793          	andi	a5,a5,-4
80001324:	00478793          	addi	a5,a5,4
80001328:	fcf42623          	sw	a5,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
8000132c:	fcc42783          	lw	a5,-52(s0)
80001330:	14078463          	beqz	a5,80001478 <pvPortMalloc+0x1b4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180 (discriminator 1)
80001334:	fcc42703          	lw	a4,-52(s0)
80001338:	000197b7          	lui	a5,0x19
8000133c:	ffb78793          	addi	a5,a5,-5 # 18ffb <HEAP_SIZE+0x8ffb>
80001340:	12e7ec63          	bltu	a5,a4,80001478 <pvPortMalloc+0x1b4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:184
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
80001344:	91418793          	addi	a5,gp,-1772 # 800076d4 <xStart>
80001348:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:185
			pxBlock = xStart.pxNextFreeBlock;
8000134c:	9141a783          	lw	a5,-1772(gp) # 800076d4 <xStart>
80001350:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
80001354:	0180006f          	j	8000136c <pvPortMalloc+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:188
			{
				pxPreviousBlock = pxBlock;
80001358:	fec42783          	lw	a5,-20(s0)
8000135c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:189
				pxBlock = pxBlock->pxNextFreeBlock;
80001360:	fec42783          	lw	a5,-20(s0)
80001364:	0007a783          	lw	a5,0(a5)
80001368:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
8000136c:	fec42783          	lw	a5,-20(s0)
80001370:	0047a783          	lw	a5,4(a5)
80001374:	fcc42703          	lw	a4,-52(s0)
80001378:	00e7f863          	bleu	a4,a5,80001388 <pvPortMalloc+0xc4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186 (discriminator 1)
8000137c:	fec42783          	lw	a5,-20(s0)
80001380:	0007a783          	lw	a5,0(a5)
80001384:	fc079ae3          	bnez	a5,80001358 <pvPortMalloc+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:193
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
80001388:	fec42703          	lw	a4,-20(s0)
8000138c:	91c18793          	addi	a5,gp,-1764 # 800076dc <xEnd>
80001390:	0ef70463          	beq	a4,a5,80001478 <pvPortMalloc+0x1b4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:197
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
80001394:	fe842783          	lw	a5,-24(s0)
80001398:	0007a783          	lw	a5,0(a5)
8000139c:	00800713          	li	a4,8
800013a0:	00e787b3          	add	a5,a5,a4
800013a4:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:201

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
800013a8:	fec42783          	lw	a5,-20(s0)
800013ac:	0007a703          	lw	a4,0(a5)
800013b0:	fe842783          	lw	a5,-24(s0)
800013b4:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:204

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
800013b8:	fec42783          	lw	a5,-20(s0)
800013bc:	0047a703          	lw	a4,4(a5)
800013c0:	fcc42783          	lw	a5,-52(s0)
800013c4:	40f707b3          	sub	a5,a4,a5
800013c8:	00800713          	li	a4,8
800013cc:	00171713          	slli	a4,a4,0x1
800013d0:	08f77663          	bleu	a5,a4,8000145c <pvPortMalloc+0x198>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:209
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
800013d4:	fec42703          	lw	a4,-20(s0)
800013d8:	fcc42783          	lw	a5,-52(s0)
800013dc:	00f707b3          	add	a5,a4,a5
800013e0:	fcf42e23          	sw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:213

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
800013e4:	fec42783          	lw	a5,-20(s0)
800013e8:	0047a703          	lw	a4,4(a5)
800013ec:	fcc42783          	lw	a5,-52(s0)
800013f0:	40f70733          	sub	a4,a4,a5
800013f4:	fdc42783          	lw	a5,-36(s0)
800013f8:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:214
					pxBlock->xBlockSize = xWantedSize;
800013fc:	fec42783          	lw	a5,-20(s0)
80001400:	fcc42703          	lw	a4,-52(s0)
80001404:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
80001408:	fdc42783          	lw	a5,-36(s0)
8000140c:	0047a783          	lw	a5,4(a5)
80001410:	fcf42c23          	sw	a5,-40(s0)
80001414:	91418793          	addi	a5,gp,-1772 # 800076d4 <xStart>
80001418:	fef42023          	sw	a5,-32(s0)
8000141c:	0100006f          	j	8000142c <pvPortMalloc+0x168>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 3)
80001420:	fe042783          	lw	a5,-32(s0)
80001424:	0007a783          	lw	a5,0(a5)
80001428:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 1)
8000142c:	fe042783          	lw	a5,-32(s0)
80001430:	0007a783          	lw	a5,0(a5)
80001434:	0047a783          	lw	a5,4(a5)
80001438:	fd842703          	lw	a4,-40(s0)
8000143c:	fee7e2e3          	bltu	a5,a4,80001420 <pvPortMalloc+0x15c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 4)
80001440:	fe042783          	lw	a5,-32(s0)
80001444:	0007a703          	lw	a4,0(a5)
80001448:	fdc42783          	lw	a5,-36(s0)
8000144c:	00e7a023          	sw	a4,0(a5)
80001450:	fe042783          	lw	a5,-32(s0)
80001454:	fdc42703          	lw	a4,-36(s0)
80001458:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:220
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
8000145c:	800077b7          	lui	a5,0x80007
80001460:	5c07a703          	lw	a4,1472(a5) # 800075c0 <__stack_top+0xfffc5810>
80001464:	fec42783          	lw	a5,-20(s0)
80001468:	0047a783          	lw	a5,4(a5)
8000146c:	40f70733          	sub	a4,a4,a5
80001470:	800077b7          	lui	a5,0x80007
80001474:	5ce7a023          	sw	a4,1472(a5) # 800075c0 <__stack_top+0xfffc5810>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:226
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
80001478:	6b1000ef          	jal	ra,80002328 <xTaskResumeAll>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:230

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
8000147c:	fe442783          	lw	a5,-28(s0)
80001480:	00079463          	bnez	a5,80001488 <pvPortMalloc+0x1c4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:233
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
80001484:	6dc050ef          	jal	ra,80006b60 <vApplicationMallocFailedHook>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:238
		}
	}
	#endif

	return pvReturn;
80001488:	fe442783          	lw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:239
}
8000148c:	00078513          	mv	a0,a5
80001490:	03c12083          	lw	ra,60(sp)
80001494:	03812403          	lw	s0,56(sp)
80001498:	04010113          	addi	sp,sp,64
8000149c:	00008067          	ret

800014a0 <vPortFree>:
vPortFree():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:243
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
800014a0:	fd010113          	addi	sp,sp,-48
800014a4:	02112623          	sw	ra,44(sp)
800014a8:	02812423          	sw	s0,40(sp)
800014ac:	03010413          	addi	s0,sp,48
800014b0:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:244
uint8_t *puc = ( uint8_t * ) pv;
800014b4:	fdc42783          	lw	a5,-36(s0)
800014b8:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:247
BlockLink_t *pxLink;

	if( pv != NULL )
800014bc:	fdc42783          	lw	a5,-36(s0)
800014c0:	08078c63          	beqz	a5,80001558 <vPortFree+0xb8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:251
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
800014c4:	00800793          	li	a5,8
800014c8:	40f007b3          	neg	a5,a5
800014cc:	fe842703          	lw	a4,-24(s0)
800014d0:	00f707b3          	add	a5,a4,a5
800014d4:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:255

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
800014d8:	fe842783          	lw	a5,-24(s0)
800014dc:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:257

		vTaskSuspendAll();
800014e0:	621000ef          	jal	ra,80002300 <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
800014e4:	fe442783          	lw	a5,-28(s0)
800014e8:	0047a783          	lw	a5,4(a5)
800014ec:	fef42023          	sw	a5,-32(s0)
800014f0:	91418793          	addi	a5,gp,-1772 # 800076d4 <xStart>
800014f4:	fef42623          	sw	a5,-20(s0)
800014f8:	0100006f          	j	80001508 <vPortFree+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 3)
800014fc:	fec42783          	lw	a5,-20(s0)
80001500:	0007a783          	lw	a5,0(a5)
80001504:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 1)
80001508:	fec42783          	lw	a5,-20(s0)
8000150c:	0007a783          	lw	a5,0(a5)
80001510:	0047a783          	lw	a5,4(a5)
80001514:	fe042703          	lw	a4,-32(s0)
80001518:	fee7e2e3          	bltu	a5,a4,800014fc <vPortFree+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 4)
8000151c:	fec42783          	lw	a5,-20(s0)
80001520:	0007a703          	lw	a4,0(a5)
80001524:	fe442783          	lw	a5,-28(s0)
80001528:	00e7a023          	sw	a4,0(a5)
8000152c:	fec42783          	lw	a5,-20(s0)
80001530:	fe442703          	lw	a4,-28(s0)
80001534:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:261 (discriminator 4)
			xFreeBytesRemaining += pxLink->xBlockSize;
80001538:	fe442783          	lw	a5,-28(s0)
8000153c:	0047a703          	lw	a4,4(a5)
80001540:	800077b7          	lui	a5,0x80007
80001544:	5c07a783          	lw	a5,1472(a5) # 800075c0 <__stack_top+0xfffc5810>
80001548:	00f70733          	add	a4,a4,a5
8000154c:	800077b7          	lui	a5,0x80007
80001550:	5ce7a023          	sw	a4,1472(a5) # 800075c0 <__stack_top+0xfffc5810>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:264 (discriminator 4)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
80001554:	5d5000ef          	jal	ra,80002328 <xTaskResumeAll>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:266
	}
}
80001558:	00000013          	nop
8000155c:	02c12083          	lw	ra,44(sp)
80001560:	02812403          	lw	s0,40(sp)
80001564:	03010113          	addi	sp,sp,48
80001568:	00008067          	ret

8000156c <prvHeapInit>:
prvHeapInit():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:282
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
8000156c:	fe010113          	addi	sp,sp,-32
80001570:	00812e23          	sw	s0,28(sp)
80001574:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:287
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
80001578:	800077b7          	lui	a5,0x80007
8000157c:	73478793          	addi	a5,a5,1844 # 80007734 <__stack_top+0xfffc5984>
80001580:	ffc7f793          	andi	a5,a5,-4
80001584:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:291

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
80001588:	fec42703          	lw	a4,-20(s0)
8000158c:	90e1aa23          	sw	a4,-1772(gp) # 800076d4 <xStart>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:292
	xStart.xBlockSize = ( size_t ) 0;
80001590:	91418793          	addi	a5,gp,-1772 # 800076d4 <xStart>
80001594:	0007a223          	sw	zero,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:295

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
80001598:	91c18793          	addi	a5,gp,-1764 # 800076dc <xEnd>
8000159c:	00019737          	lui	a4,0x19
800015a0:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
800015a4:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:296
	xEnd.pxNextFreeBlock = NULL;
800015a8:	9001ae23          	sw	zero,-1764(gp) # 800076dc <xEnd>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:300

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
800015ac:	fec42783          	lw	a5,-20(s0)
800015b0:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:301
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
800015b4:	fe842783          	lw	a5,-24(s0)
800015b8:	00019737          	lui	a4,0x19
800015bc:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
800015c0:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:302
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
800015c4:	fe842783          	lw	a5,-24(s0)
800015c8:	91c18713          	addi	a4,gp,-1764 # 800076dc <xEnd>
800015cc:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:303
}
800015d0:	00000013          	nop
800015d4:	01c12403          	lw	s0,28(sp)
800015d8:	02010113          	addi	sp,sp,32
800015dc:	00008067          	ret

800015e0 <raise_soft_interrupt>:
raise_soft_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:227
/*==============================================================================
 * The function raise_soft_interrupt() raises a synchronous software interrupt by
 * writing into the MSIP register.
 */
static inline void raise_soft_interrupt()
{
800015e0:	fe010113          	addi	sp,sp,-32
800015e4:	00812e23          	sw	s0,28(sp)
800015e8:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:228
    unsigned long hart_id = read_csr(mhartid);
800015ec:	f14027f3          	csrr	a5,mhartid
800015f0:	fef42623          	sw	a5,-20(s0)
800015f4:	fec42783          	lw	a5,-20(s0)
800015f8:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:231

    /*You need to make sure that the global interrupt is enabled*/
    set_csr(mie, MIP_MSIP);       /*Enable software interrupt bit */
800015fc:	304467f3          	csrrsi	a5,mie,8
80001600:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:232
    PRCI->MSIP[hart_id] = 0x01;   /*raise soft interrupt for hart0*/
80001604:	44000737          	lui	a4,0x44000
80001608:	fe842783          	lw	a5,-24(s0)
8000160c:	00279793          	slli	a5,a5,0x2
80001610:	00f707b3          	add	a5,a4,a5
80001614:	00100713          	li	a4,1
80001618:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:233
}
8000161c:	00000013          	nop
80001620:	01c12403          	lw	s0,28(sp)
80001624:	02010113          	addi	sp,sp,32
80001628:	00008067          	ret

8000162c <vPortEnterCritical>:
vPortEnterCritical():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:132
 * Used to catch tasks that attempt to return from their implementing function.
 */
static void prvTaskExitError( void );

void vPortEnterCritical( void )
{
8000162c:	ff010113          	addi	sp,sp,-16
80001630:	00812623          	sw	s0,12(sp)
80001634:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:133
	portDISABLE_INTERRUPTS();
80001638:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:134
	uxCriticalNesting++;
8000163c:	800077b7          	lui	a5,0x80007
80001640:	5c47a783          	lw	a5,1476(a5) # 800075c4 <__stack_top+0xfffc5814>
80001644:	00178713          	addi	a4,a5,1
80001648:	800077b7          	lui	a5,0x80007
8000164c:	5ce7a223          	sw	a4,1476(a5) # 800075c4 <__stack_top+0xfffc5814>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:135
}
80001650:	00000013          	nop
80001654:	00c12403          	lw	s0,12(sp)
80001658:	01010113          	addi	sp,sp,16
8000165c:	00008067          	ret

80001660 <vPortExitCritical>:
vPortExitCritical():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:139
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
80001660:	ff010113          	addi	sp,sp,-16
80001664:	00812623          	sw	s0,12(sp)
80001668:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:140
	uxCriticalNesting--;
8000166c:	800077b7          	lui	a5,0x80007
80001670:	5c47a783          	lw	a5,1476(a5) # 800075c4 <__stack_top+0xfffc5814>
80001674:	fff78713          	addi	a4,a5,-1
80001678:	800077b7          	lui	a5,0x80007
8000167c:	5ce7a223          	sw	a4,1476(a5) # 800075c4 <__stack_top+0xfffc5814>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:141
	if( uxCriticalNesting == 0 )
80001680:	800077b7          	lui	a5,0x80007
80001684:	5c47a783          	lw	a5,1476(a5) # 800075c4 <__stack_top+0xfffc5814>
80001688:	00079463          	bnez	a5,80001690 <vPortExitCritical+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:143
	{
		portENABLE_INTERRUPTS();
8000168c:	30046073          	csrsi	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:145
	}
}
80001690:	00000013          	nop
80001694:	00c12403          	lw	s0,12(sp)
80001698:	01010113          	addi	sp,sp,16
8000169c:	00008067          	ret

800016a0 <prvSetNextTimerInterrupt>:
prvSetNextTimerInterrupt():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:151
/*-----------------------------------------------------------*/

/* Sets the next timer interrupt
 * Reads previous timer compare register, and adds tickrate */
static void prvSetNextTimerInterrupt(void)
{
800016a0:	fe010113          	addi	sp,sp,-32
800016a4:	00812e23          	sw	s0,28(sp)
800016a8:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:154
	uint64_t time;

	time = mtime->val_low;
800016ac:	80007637          	lui	a2,0x80007
800016b0:	5c862603          	lw	a2,1480(a2) # 800075c8 <__stack_top+0xfffc5818>
800016b4:	00062603          	lw	a2,0(a2)
800016b8:	fec42423          	sw	a2,-24(s0)
800016bc:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:155
	time |= ((uint64_t)mtime->val_high << 32);
800016c0:	80007637          	lui	a2,0x80007
800016c4:	5c862603          	lw	a2,1480(a2) # 800075c8 <__stack_top+0xfffc5818>
800016c8:	00462603          	lw	a2,4(a2)
800016cc:	00060693          	mv	a3,a2
800016d0:	00000713          	li	a4,0
800016d4:	00069813          	slli	a6,a3,0x0
800016d8:	00000793          	li	a5,0
800016dc:	fe842703          	lw	a4,-24(s0)
800016e0:	00f76733          	or	a4,a4,a5
800016e4:	fee42423          	sw	a4,-24(s0)
800016e8:	fec42703          	lw	a4,-20(s0)
800016ec:	010767b3          	or	a5,a4,a6
800016f0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:157

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
800016f4:	fe842683          	lw	a3,-24(s0)
800016f8:	fec42703          	lw	a4,-20(s0)
800016fc:	000f45b7          	lui	a1,0xf4
80001700:	24058593          	addi	a1,a1,576 # f4240 <RAM_SIZE+0x74240>
80001704:	00000613          	li	a2,0
80001708:	00b687b3          	add	a5,a3,a1
8000170c:	00078513          	mv	a0,a5
80001710:	00d53533          	sltu	a0,a0,a3
80001714:	00c70833          	add	a6,a4,a2
80001718:	01050733          	add	a4,a0,a6
8000171c:	00070813          	mv	a6,a4
80001720:	fef42423          	sw	a5,-24(s0)
80001724:	ff042623          	sw	a6,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:159

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
80001728:	800077b7          	lui	a5,0x80007
8000172c:	5cc7a783          	lw	a5,1484(a5) # 800075cc <__stack_top+0xfffc581c>
80001730:	fe842703          	lw	a4,-24(s0)
80001734:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:160
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
80001738:	fec42783          	lw	a5,-20(s0)
8000173c:	0007d313          	srli	t1,a5,0x0
80001740:	00000393          	li	t2,0
80001744:	800077b7          	lui	a5,0x80007
80001748:	5cc7a783          	lw	a5,1484(a5) # 800075cc <__stack_top+0xfffc581c>
8000174c:	00030713          	mv	a4,t1
80001750:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:163

	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
80001754:	08000793          	li	a5,128
80001758:	3047a073          	csrs	mie,a5
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:164
}
8000175c:	00000013          	nop
80001760:	01c12403          	lw	s0,28(sp)
80001764:	02010113          	addi	sp,sp,32
80001768:	00008067          	ret

8000176c <vPortSetupTimer>:
vPortSetupTimer():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:169
/*-----------------------------------------------------------*/

/* Sets and enable the timer interrupt */
void vPortSetupTimer(void)
{
8000176c:	fe010113          	addi	sp,sp,-32
80001770:	00812e23          	sw	s0,28(sp)
80001774:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:172
	uint64_t time;

	time = mtime->val_low;
80001778:	80007637          	lui	a2,0x80007
8000177c:	5c862603          	lw	a2,1480(a2) # 800075c8 <__stack_top+0xfffc5818>
80001780:	00062603          	lw	a2,0(a2)
80001784:	fec42423          	sw	a2,-24(s0)
80001788:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:173
	time |= ((uint64_t)mtime->val_high << 32);
8000178c:	80007637          	lui	a2,0x80007
80001790:	5c862603          	lw	a2,1480(a2) # 800075c8 <__stack_top+0xfffc5818>
80001794:	00462603          	lw	a2,4(a2)
80001798:	00060693          	mv	a3,a2
8000179c:	00000713          	li	a4,0
800017a0:	00069813          	slli	a6,a3,0x0
800017a4:	00000793          	li	a5,0
800017a8:	fe842703          	lw	a4,-24(s0)
800017ac:	00f76733          	or	a4,a4,a5
800017b0:	fee42423          	sw	a4,-24(s0)
800017b4:	fec42703          	lw	a4,-20(s0)
800017b8:	010767b3          	or	a5,a4,a6
800017bc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:175

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
800017c0:	fe842683          	lw	a3,-24(s0)
800017c4:	fec42703          	lw	a4,-20(s0)
800017c8:	000f45b7          	lui	a1,0xf4
800017cc:	24058593          	addi	a1,a1,576 # f4240 <RAM_SIZE+0x74240>
800017d0:	00000613          	li	a2,0
800017d4:	00b687b3          	add	a5,a3,a1
800017d8:	00078513          	mv	a0,a5
800017dc:	00d53533          	sltu	a0,a0,a3
800017e0:	00c70833          	add	a6,a4,a2
800017e4:	01050733          	add	a4,a0,a6
800017e8:	00070813          	mv	a6,a4
800017ec:	fef42423          	sw	a5,-24(s0)
800017f0:	ff042623          	sw	a6,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:177

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
800017f4:	800077b7          	lui	a5,0x80007
800017f8:	5cc7a783          	lw	a5,1484(a5) # 800075cc <__stack_top+0xfffc581c>
800017fc:	fe842703          	lw	a4,-24(s0)
80001800:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:178
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
80001804:	fec42783          	lw	a5,-20(s0)
80001808:	0007d313          	srli	t1,a5,0x0
8000180c:	00000393          	li	t2,0
80001810:	800077b7          	lui	a5,0x80007
80001814:	5cc7a783          	lw	a5,1484(a5) # 800075cc <__stack_top+0xfffc581c>
80001818:	00030713          	mv	a4,t1
8000181c:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:182


	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
80001820:	08000793          	li	a5,128
80001824:	3047a073          	csrs	mie,a5
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:183
}
80001828:	00000013          	nop
8000182c:	01c12403          	lw	s0,28(sp)
80001830:	02010113          	addi	sp,sp,32
80001834:	00008067          	ret

80001838 <prvTaskExitError>:
prvTaskExitError():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:187
/*-----------------------------------------------------------*/

void prvTaskExitError( void )
{
80001838:	ff010113          	addi	sp,sp,-16
8000183c:	00812623          	sw	s0,12(sp)
80001840:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
80001844:	800077b7          	lui	a5,0x80007
80001848:	5c47a703          	lw	a4,1476(a5) # 800075c4 <__stack_top+0xfffc5814>
8000184c:	fff00793          	li	a5,-1
80001850:	00f70663          	beq	a4,a5,8000185c <prvTaskExitError+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194 (discriminator 1)
80001854:	30047073          	csrci	mstatus,8
80001858:	0000006f          	j	80001858 <prvTaskExitError+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:195
	portDISABLE_INTERRUPTS();
8000185c:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:196 (discriminator 2)
	for( ;; );
80001860:	0000006f          	j	80001860 <prvTaskExitError+0x28>

80001864 <pxPortInitialiseStack>:
pxPortInitialiseStack():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:220

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
80001864:	fe010113          	addi	sp,sp,-32
80001868:	00812e23          	sw	s0,28(sp)
8000186c:	02010413          	addi	s0,sp,32
80001870:	fea42623          	sw	a0,-20(s0)
80001874:	feb42423          	sw	a1,-24(s0)
80001878:	fec42223          	sw	a2,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:224
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	register int *tp asm("x3");
	pxTopOfStack--;
8000187c:	fec42783          	lw	a5,-20(s0)
80001880:	ffc78793          	addi	a5,a5,-4
80001884:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:225
	*pxTopOfStack = (portSTACK_TYPE)pxCode;			/* Start address */
80001888:	fe842703          	lw	a4,-24(s0)
8000188c:	fec42783          	lw	a5,-20(s0)
80001890:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:226
	pxTopOfStack -= 22;
80001894:	fec42783          	lw	a5,-20(s0)
80001898:	fa878793          	addi	a5,a5,-88
8000189c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:227
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;	/* Register a0 */
800018a0:	fe442703          	lw	a4,-28(s0)
800018a4:	fec42783          	lw	a5,-20(s0)
800018a8:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:228
	pxTopOfStack -= 6;
800018ac:	fec42783          	lw	a5,-20(s0)
800018b0:	fe878793          	addi	a5,a5,-24
800018b4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:229
	*pxTopOfStack = (portSTACK_TYPE)tp; /* Register thread pointer */
800018b8:	00018793          	mv	a5,gp
800018bc:	00078713          	mv	a4,a5
800018c0:	fec42783          	lw	a5,-20(s0)
800018c4:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:230
	pxTopOfStack -= 3;
800018c8:	fec42783          	lw	a5,-20(s0)
800018cc:	ff478793          	addi	a5,a5,-12
800018d0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:231
	*pxTopOfStack = (portSTACK_TYPE)prvTaskExitError; /* Register ra */
800018d4:	800027b7          	lui	a5,0x80002
800018d8:	83878713          	addi	a4,a5,-1992 # 80001838 <__stack_top+0xfffbfa88>
800018dc:	fec42783          	lw	a5,-20(s0)
800018e0:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:233

	return pxTopOfStack;
800018e4:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:234
}
800018e8:	00078513          	mv	a0,a5
800018ec:	01c12403          	lw	s0,28(sp)
800018f0:	02010113          	addi	sp,sp,32
800018f4:	00008067          	ret

800018f8 <SysTick_Handler>:
SysTick_Handler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:238
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void )
{
800018f8:	ff010113          	addi	sp,sp,-16
800018fc:	00112623          	sw	ra,12(sp)
80001900:	00812423          	sw	s0,8(sp)
80001904:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:241
	/*Save Context*/
	{
		__asm volatile("lw	t0, pxCurrentTCB");
80001908:	92c1a283          	lw	t0,-1748(gp) # 800076ec <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:242
		__asm volatile("sw	a2, 0x0(t0)");
8000190c:	00c2a023          	sw	a2,0(t0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:246
	}

	/* Increment the RTOS tick. */
	prvSetNextTimerInterrupt();
80001910:	d91ff0ef          	jal	ra,800016a0 <prvSetNextTimerInterrupt>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:249

	/*Switch task */
	if( xTaskIncrementTick() != pdFALSE )
80001914:	3ad000ef          	jal	ra,800024c0 <xTaskIncrementTick>
80001918:	00050793          	mv	a5,a0
8000191c:	00078463          	beqz	a5,80001924 <SysTick_Handler+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:251
	{
		vTaskSwitchContext();
80001920:	58d000ef          	jal	ra,800026ac <vTaskSwitchContext>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:256
	}

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
80001924:	92c1a103          	lw	sp,-1748(gp) # 800076ec <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:257
		__asm volatile("lw	sp, 0x0(sp)");
80001928:	00012103          	lw	sp,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:259

		__asm volatile("lw	t0, 31 * 4(sp)");
8000192c:	07c12283          	lw	t0,124(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:260
		__asm volatile("csrw	mepc, t0");
80001930:	34129073          	csrw	mepc,t0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:263

		// Added by Iaçanã
		__asm volatile("lui	t0, 0x2");
80001934:	000022b7          	lui	t0,0x2
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:264
  		__asm volatile("addi t0,t0,-2048");
80001938:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:265
		__asm volatile("csrs mstatus,t0");
8000193c:	3002a073          	csrs	mstatus,t0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:267

		__asm volatile("lw	t0, 32 * 4(sp)");
80001940:	08012283          	lw	t0,128(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:268
		__asm volatile("slli t0, t0, 0x4");
80001944:	00429293          	slli	t0,t0,0x4
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:269
		__asm volatile("csrs mstatus, t0");
80001948:	3002a073          	csrs	mstatus,t0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:271

		__asm volatile("lw	x1, 0x0(sp)");
8000194c:	00012083          	lw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:272
		__asm volatile("lw   x4, 3 * 4(sp)");
80001950:	00c12203          	lw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:273
		__asm volatile("lw   x5, 4 * 4(sp)");
80001954:	01012283          	lw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:274
		__asm volatile("lw   x6, 5 * 4(sp)");
80001958:	01412303          	lw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:275
		__asm volatile("lw   x7, 6 * 4(sp)");
8000195c:	01812383          	lw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:276
		__asm volatile("lw   x8, 7 * 4(sp)");
80001960:	01c12403          	lw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:277
		__asm volatile("lw   x9, 8 * 4(sp)");
80001964:	02012483          	lw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:278
		__asm volatile("lw   x10, 9 * 4(sp)");
80001968:	02412503          	lw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:279
		__asm volatile("lw   x11, 10 * 4(sp)");
8000196c:	02812583          	lw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:280
		__asm volatile("lw   x12, 11 * 4(sp)");
80001970:	02c12603          	lw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:281
		__asm volatile("lw   x13, 12 * 4(sp)");
80001974:	03012683          	lw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:282
		__asm volatile("lw   x14, 13 * 4(sp)");
80001978:	03412703          	lw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:283
		__asm volatile("lw   x15, 14 * 4(sp)");
8000197c:	03812783          	lw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:284
		__asm volatile("lw   x16, 15 * 4(sp)");
80001980:	03c12803          	lw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:285
		__asm volatile("lw   x17, 16 * 4(sp)");
80001984:	04012883          	lw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:286
		__asm volatile("lw   x18, 17 * 4(sp)");
80001988:	04412903          	lw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:287
		__asm volatile("lw   x19, 18 * 4(sp)");
8000198c:	04812983          	lw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:288
		__asm volatile("lw   x20, 19 * 4(sp)");
80001990:	04c12a03          	lw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:289
		__asm volatile("lw   x21, 20 * 4(sp)");
80001994:	05012a83          	lw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:290
		__asm volatile("lw   x22, 21 * 4(sp)");
80001998:	05412b03          	lw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:291
		__asm volatile("lw   x23, 22 * 4(sp)");
8000199c:	05812b83          	lw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:292
		__asm volatile("lw   x24, 23 * 4(sp)");
800019a0:	05c12c03          	lw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:293
		__asm volatile("lw   x25, 24 * 4(sp)");
800019a4:	06012c83          	lw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:294
		__asm volatile("lw   x26, 25 * 4(sp)");
800019a8:	06412d03          	lw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:295
		__asm volatile("lw   x27, 26 * 4(sp)");
800019ac:	06812d83          	lw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:296
		__asm volatile("lw   x28, 27 * 4(sp)");
800019b0:	06c12e03          	lw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:297
		__asm volatile("lw   x29, 28 * 4(sp)");
800019b4:	07012e83          	lw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:298
		__asm volatile("lw   x30, 29 * 4(sp)");
800019b8:	07412f03          	lw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:299
		__asm volatile("lw   x31, 30 * 4(sp)");
800019bc:	07812f83          	lw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:301

		__asm volatile("addi	sp, sp, 4 * 33");
800019c0:	08410113          	addi	sp,sp,132
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:303

		__asm volatile("mret");
800019c4:	30200073          	mret
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:305
	}
}
800019c8:	00000013          	nop
800019cc:	00c12083          	lw	ra,12(sp)
800019d0:	00812403          	lw	s0,8(sp)
800019d4:	01010113          	addi	sp,sp,16
800019d8:	00008067          	ret

800019dc <xPortStartScheduler>:
xPortStartScheduler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:308
uint32_t g_startscheduler = 0;
BaseType_t xPortStartScheduler( void )
{
800019dc:	ff010113          	addi	sp,sp,-16
800019e0:	00112623          	sw	ra,12(sp)
800019e4:	00812423          	sw	s0,8(sp)
800019e8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:309
	vPortSetupTimer();
800019ec:	d81ff0ef          	jal	ra,8000176c <vPortSetupTimer>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:310
	uxCriticalNesting = 0;
800019f0:	800077b7          	lui	a5,0x80007
800019f4:	5c07a223          	sw	zero,1476(a5) # 800075c4 <__stack_top+0xfffc5814>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:311
	g_startscheduler = 1;
800019f8:	00100713          	li	a4,1
800019fc:	92e1a423          	sw	a4,-1752(gp) # 800076e8 <g_startscheduler>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:312
	__enable_irq();
80001a00:	9a1fe0ef          	jal	ra,800003a0 <__enable_irq>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:314

	raise_soft_interrupt();
80001a04:	bddff0ef          	jal	ra,800015e0 <raise_soft_interrupt>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:317

	/*Should not get here*/
	return pdFALSE;
80001a08:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:318
}
80001a0c:	00078513          	mv	a0,a5
80001a10:	00c12083          	lw	ra,12(sp)
80001a14:	00812403          	lw	s0,8(sp)
80001a18:	01010113          	addi	sp,sp,16
80001a1c:	00008067          	ret

80001a20 <Software_IRQHandler>:
Software_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:321

void Software_IRQHandler(void)
{
80001a20:	ff010113          	addi	sp,sp,-16
80001a24:	00112623          	sw	ra,12(sp)
80001a28:	00812423          	sw	s0,8(sp)
80001a2c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:322
	if(1 == g_startscheduler)
80001a30:	9281a703          	lw	a4,-1752(gp) # 800076e8 <g_startscheduler>
80001a34:	00100793          	li	a5,1
80001a38:	00f71863          	bne	a4,a5,80001a48 <Software_IRQHandler+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:324
	{
		g_startscheduler = 2; //skip the save n switch context first time when scheduler is starting.
80001a3c:	00200713          	li	a4,2
80001a40:	92e1a423          	sw	a4,-1752(gp) # 800076e8 <g_startscheduler>
80001a44:	0100006f          	j	80001a54 <Software_IRQHandler+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:330
	}
	else
	{
		/*Save Context*/
		{
			__asm volatile("lw	t0, pxCurrentTCB");
80001a48:	92c1a283          	lw	t0,-1748(gp) # 800076ec <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:331
			__asm volatile("sw	a2, 0x0(t0)");
80001a4c:	00c2a023          	sw	a2,0(t0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:334
		}

		vTaskSwitchContext();
80001a50:	45d000ef          	jal	ra,800026ac <vTaskSwitchContext>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:338
	}

	// Moved by Imperas (was previously causing corruption of a5)
	PRCI->MSIP[0] = 0x00;
80001a54:	440007b7          	lui	a5,0x44000
80001a58:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:342

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
80001a5c:	92c1a103          	lw	sp,-1748(gp) # 800076ec <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:343
		__asm volatile("lw	sp, 0x0(sp)");
80001a60:	00012103          	lw	sp,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:345

		__asm volatile("lw	t0, 31 * 4(sp)");
80001a64:	07c12283          	lw	t0,124(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:346
		__asm volatile("csrw	mepc, t0");
80001a68:	34129073          	csrw	mepc,t0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:349

		// Added by Iaçanã
		__asm volatile("lui	t0, 0x2");
80001a6c:	000022b7          	lui	t0,0x2
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:350
  		__asm volatile("addi t0,t0,-2048");
80001a70:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:351
		__asm volatile("csrs mstatus,t0");
80001a74:	3002a073          	csrs	mstatus,t0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:353

		__asm volatile("lw	t0, 32 * 4(sp)");
80001a78:	08012283          	lw	t0,128(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:354
		__asm volatile("slli t0, t0, 0x4");
80001a7c:	00429293          	slli	t0,t0,0x4
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:355
		__asm volatile("csrs mstatus, t0");
80001a80:	3002a073          	csrs	mstatus,t0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:357

		__asm volatile("lw	x1, 0x0(sp)");
80001a84:	00012083          	lw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:358
		__asm volatile("lw   x4, 3 * 4(sp)");
80001a88:	00c12203          	lw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:359
		__asm volatile("lw   x5, 4 * 4(sp)");
80001a8c:	01012283          	lw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:360
		__asm volatile("lw   x6, 5 * 4(sp)");
80001a90:	01412303          	lw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:361
		__asm volatile("lw   x7, 6 * 4(sp)");
80001a94:	01812383          	lw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:362
		__asm volatile("lw   x8, 7 * 4(sp)");
80001a98:	01c12403          	lw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:363
		__asm volatile("lw   x9, 8 * 4(sp)");
80001a9c:	02012483          	lw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:364
		__asm volatile("lw   x10, 9 * 4(sp)");
80001aa0:	02412503          	lw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:365
		__asm volatile("lw   x11, 10 * 4(sp)");
80001aa4:	02812583          	lw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:366
		__asm volatile("lw   x12, 11 * 4(sp)");
80001aa8:	02c12603          	lw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:367
		__asm volatile("lw   x13, 12 * 4(sp)");
80001aac:	03012683          	lw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:368
		__asm volatile("lw   x14, 13 * 4(sp)");
80001ab0:	03412703          	lw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:369
		__asm volatile("lw   x15, 14 * 4(sp)");
80001ab4:	03812783          	lw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:370
		__asm volatile("lw   x16, 15 * 4(sp)");
80001ab8:	03c12803          	lw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:371
		__asm volatile("lw   x17, 16 * 4(sp)");
80001abc:	04012883          	lw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:372
		__asm volatile("lw   x18, 17 * 4(sp)");
80001ac0:	04412903          	lw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:373
		__asm volatile("lw   x19, 18 * 4(sp)");
80001ac4:	04812983          	lw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:374
		__asm volatile("lw   x20, 19 * 4(sp)");
80001ac8:	04c12a03          	lw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:375
		__asm volatile("lw   x21, 20 * 4(sp)");
80001acc:	05012a83          	lw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:376
		__asm volatile("lw   x22, 21 * 4(sp)");
80001ad0:	05412b03          	lw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:377
		__asm volatile("lw   x23, 22 * 4(sp)");
80001ad4:	05812b83          	lw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:378
		__asm volatile("lw   x24, 23 * 4(sp)");
80001ad8:	05c12c03          	lw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:379
		__asm volatile("lw   x25, 24 * 4(sp)");
80001adc:	06012c83          	lw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:380
		__asm volatile("lw   x26, 25 * 4(sp)");
80001ae0:	06412d03          	lw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:381
		__asm volatile("lw   x27, 26 * 4(sp)");
80001ae4:	06812d83          	lw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:382
		__asm volatile("lw   x28, 27 * 4(sp)");
80001ae8:	06c12e03          	lw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:383
		__asm volatile("lw   x29, 28 * 4(sp)");
80001aec:	07012e83          	lw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:384
		__asm volatile("lw   x30, 29 * 4(sp)");
80001af0:	07412f03          	lw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:385
		__asm volatile("lw   x31, 30 * 4(sp)");
80001af4:	07812f83          	lw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:387

		__asm volatile("addi	sp, sp, 4 * 33");
80001af8:	08410113          	addi	sp,sp,132
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:392

	    // Moved by Imperas (causing corruption of a5 at this position)
		//PRCI->MSIP[0] = 0x00;

		__asm volatile("mret");
80001afc:	30200073          	mret
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:394
	}
}
80001b00:	00000013          	nop
80001b04:	00c12083          	lw	ra,12(sp)
80001b08:	00812403          	lw	s0,8(sp)
80001b0c:	01010113          	addi	sp,sp,16
80001b10:	00008067          	ret

80001b14 <vPortYield>:
vPortYield():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:397

void vPortYield( void )
{
80001b14:	ff010113          	addi	sp,sp,-16
80001b18:	00112623          	sw	ra,12(sp)
80001b1c:	00812423          	sw	s0,8(sp)
80001b20:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:398
	raise_soft_interrupt();
80001b24:	abdff0ef          	jal	ra,800015e0 <raise_soft_interrupt>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:399
}
80001b28:	00000013          	nop
80001b2c:	00c12083          	lw	ra,12(sp)
80001b30:	00812403          	lw	s0,8(sp)
80001b34:	01010113          	addi	sp,sp,16
80001b38:	00008067          	ret

80001b3c <vListInitialise>:
vListInitialise():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:80
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
80001b3c:	fe010113          	addi	sp,sp,-32
80001b40:	00812e23          	sw	s0,28(sp)
80001b44:	02010413          	addi	s0,sp,32
80001b48:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:84
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001b4c:	fec42783          	lw	a5,-20(s0)
80001b50:	00878713          	addi	a4,a5,8
80001b54:	fec42783          	lw	a5,-20(s0)
80001b58:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:88

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
80001b5c:	fec42783          	lw	a5,-20(s0)
80001b60:	fff00713          	li	a4,-1
80001b64:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:92

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001b68:	fec42783          	lw	a5,-20(s0)
80001b6c:	00878713          	addi	a4,a5,8
80001b70:	fec42783          	lw	a5,-20(s0)
80001b74:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:93
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001b78:	fec42783          	lw	a5,-20(s0)
80001b7c:	00878713          	addi	a4,a5,8
80001b80:	fec42783          	lw	a5,-20(s0)
80001b84:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:95

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
80001b88:	fec42783          	lw	a5,-20(s0)
80001b8c:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:101

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
80001b90:	00000013          	nop
80001b94:	01c12403          	lw	s0,28(sp)
80001b98:	02010113          	addi	sp,sp,32
80001b9c:	00008067          	ret

80001ba0 <vListInitialiseItem>:
vListInitialiseItem():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:105
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
80001ba0:	fe010113          	addi	sp,sp,-32
80001ba4:	00812e23          	sw	s0,28(sp)
80001ba8:	02010413          	addi	s0,sp,32
80001bac:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:107
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80001bb0:	fec42783          	lw	a5,-20(s0)
80001bb4:	0007a823          	sw	zero,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:113

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
80001bb8:	00000013          	nop
80001bbc:	01c12403          	lw	s0,28(sp)
80001bc0:	02010113          	addi	sp,sp,32
80001bc4:	00008067          	ret

80001bc8 <vListInsertEnd>:
vListInsertEnd():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:117
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001bc8:	fd010113          	addi	sp,sp,-48
80001bcc:	02812623          	sw	s0,44(sp)
80001bd0:	03010413          	addi	s0,sp,48
80001bd4:	fca42e23          	sw	a0,-36(s0)
80001bd8:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:118
ListItem_t * const pxIndex = pxList->pxIndex;
80001bdc:	fdc42783          	lw	a5,-36(s0)
80001be0:	0047a783          	lw	a5,4(a5)
80001be4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:129
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
80001be8:	fd842783          	lw	a5,-40(s0)
80001bec:	fec42703          	lw	a4,-20(s0)
80001bf0:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:130
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
80001bf4:	fec42783          	lw	a5,-20(s0)
80001bf8:	0087a703          	lw	a4,8(a5)
80001bfc:	fd842783          	lw	a5,-40(s0)
80001c00:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:135

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
80001c04:	fec42783          	lw	a5,-20(s0)
80001c08:	0087a783          	lw	a5,8(a5)
80001c0c:	fd842703          	lw	a4,-40(s0)
80001c10:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:136
	pxIndex->pxPrevious = pxNewListItem;
80001c14:	fec42783          	lw	a5,-20(s0)
80001c18:	fd842703          	lw	a4,-40(s0)
80001c1c:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:139

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001c20:	fd842783          	lw	a5,-40(s0)
80001c24:	fdc42703          	lw	a4,-36(s0)
80001c28:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:141

	( pxList->uxNumberOfItems )++;
80001c2c:	fdc42783          	lw	a5,-36(s0)
80001c30:	0007a783          	lw	a5,0(a5)
80001c34:	00178713          	addi	a4,a5,1
80001c38:	fdc42783          	lw	a5,-36(s0)
80001c3c:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:142
}
80001c40:	00000013          	nop
80001c44:	02c12403          	lw	s0,44(sp)
80001c48:	03010113          	addi	sp,sp,48
80001c4c:	00008067          	ret

80001c50 <vListInsert>:
vListInsert():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:146
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001c50:	fd010113          	addi	sp,sp,-48
80001c54:	02812623          	sw	s0,44(sp)
80001c58:	03010413          	addi	s0,sp,48
80001c5c:	fca42e23          	sw	a0,-36(s0)
80001c60:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:148
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
80001c64:	fd842783          	lw	a5,-40(s0)
80001c68:	0007a783          	lw	a5,0(a5)
80001c6c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:164
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
80001c70:	fe842703          	lw	a4,-24(s0)
80001c74:	fff00793          	li	a5,-1
80001c78:	00f71a63          	bne	a4,a5,80001c8c <vListInsert+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:166
	{
		pxIterator = pxList->xListEnd.pxPrevious;
80001c7c:	fdc42783          	lw	a5,-36(s0)
80001c80:	0107a783          	lw	a5,16(a5)
80001c84:	fef42623          	sw	a5,-20(s0)
80001c88:	0340006f          	j	80001cbc <vListInsert+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:192
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001c8c:	fdc42783          	lw	a5,-36(s0)
80001c90:	00878793          	addi	a5,a5,8
80001c94:	fef42623          	sw	a5,-20(s0)
80001c98:	0100006f          	j	80001ca8 <vListInsert+0x58>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 3)
80001c9c:	fec42783          	lw	a5,-20(s0)
80001ca0:	0047a783          	lw	a5,4(a5)
80001ca4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 1)
80001ca8:	fec42783          	lw	a5,-20(s0)
80001cac:	0047a783          	lw	a5,4(a5)
80001cb0:	0007a783          	lw	a5,0(a5)
80001cb4:	fe842703          	lw	a4,-24(s0)
80001cb8:	fef772e3          	bleu	a5,a4,80001c9c <vListInsert+0x4c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:199
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
80001cbc:	fec42783          	lw	a5,-20(s0)
80001cc0:	0047a703          	lw	a4,4(a5)
80001cc4:	fd842783          	lw	a5,-40(s0)
80001cc8:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:200
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
80001ccc:	fd842783          	lw	a5,-40(s0)
80001cd0:	0047a783          	lw	a5,4(a5)
80001cd4:	fd842703          	lw	a4,-40(s0)
80001cd8:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:201
	pxNewListItem->pxPrevious = pxIterator;
80001cdc:	fd842783          	lw	a5,-40(s0)
80001ce0:	fec42703          	lw	a4,-20(s0)
80001ce4:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:202
	pxIterator->pxNext = pxNewListItem;
80001ce8:	fec42783          	lw	a5,-20(s0)
80001cec:	fd842703          	lw	a4,-40(s0)
80001cf0:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:206

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001cf4:	fd842783          	lw	a5,-40(s0)
80001cf8:	fdc42703          	lw	a4,-36(s0)
80001cfc:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:208

	( pxList->uxNumberOfItems )++;
80001d00:	fdc42783          	lw	a5,-36(s0)
80001d04:	0007a783          	lw	a5,0(a5)
80001d08:	00178713          	addi	a4,a5,1
80001d0c:	fdc42783          	lw	a5,-36(s0)
80001d10:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:209
}
80001d14:	00000013          	nop
80001d18:	02c12403          	lw	s0,44(sp)
80001d1c:	03010113          	addi	sp,sp,48
80001d20:	00008067          	ret

80001d24 <uxListRemove>:
uxListRemove():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:213
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
80001d24:	fd010113          	addi	sp,sp,-48
80001d28:	02812623          	sw	s0,44(sp)
80001d2c:	03010413          	addi	s0,sp,48
80001d30:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:216
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
80001d34:	fdc42783          	lw	a5,-36(s0)
80001d38:	0107a783          	lw	a5,16(a5)
80001d3c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:218

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
80001d40:	fdc42783          	lw	a5,-36(s0)
80001d44:	0047a783          	lw	a5,4(a5)
80001d48:	fdc42703          	lw	a4,-36(s0)
80001d4c:	00872703          	lw	a4,8(a4) # 44000008 <RAM_SIZE+0x43f80008>
80001d50:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:219
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
80001d54:	fdc42783          	lw	a5,-36(s0)
80001d58:	0087a783          	lw	a5,8(a5)
80001d5c:	fdc42703          	lw	a4,-36(s0)
80001d60:	00472703          	lw	a4,4(a4)
80001d64:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:225

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
80001d68:	fec42783          	lw	a5,-20(s0)
80001d6c:	0047a783          	lw	a5,4(a5)
80001d70:	fdc42703          	lw	a4,-36(s0)
80001d74:	00f71a63          	bne	a4,a5,80001d88 <uxListRemove+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:227
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
80001d78:	fdc42783          	lw	a5,-36(s0)
80001d7c:	0087a703          	lw	a4,8(a5)
80001d80:	fec42783          	lw	a5,-20(s0)
80001d84:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:234
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
80001d88:	fdc42783          	lw	a5,-36(s0)
80001d8c:	0007a823          	sw	zero,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:235
	( pxList->uxNumberOfItems )--;
80001d90:	fec42783          	lw	a5,-20(s0)
80001d94:	0007a783          	lw	a5,0(a5)
80001d98:	fff78713          	addi	a4,a5,-1
80001d9c:	fec42783          	lw	a5,-20(s0)
80001da0:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:237

	return pxList->uxNumberOfItems;
80001da4:	fec42783          	lw	a5,-20(s0)
80001da8:	0007a783          	lw	a5,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/list.c:238
}
80001dac:	00078513          	mv	a0,a5
80001db0:	02c12403          	lw	s0,44(sp)
80001db4:	03010113          	addi	sp,sp,48
80001db8:	00008067          	ret

80001dbc <memset>:
memset():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/string.c:25

  return dest;
}

void* memset(void* dest, int byte, size_t len)
{
80001dbc:	fd010113          	addi	sp,sp,-48
80001dc0:	02812623          	sw	s0,44(sp)
80001dc4:	03010413          	addi	s0,sp,48
80001dc8:	fca42e23          	sw	a0,-36(s0)
80001dcc:	fcb42c23          	sw	a1,-40(s0)
80001dd0:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/string.c:26
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
80001dd4:	fdc42703          	lw	a4,-36(s0)
80001dd8:	fd442783          	lw	a5,-44(s0)
80001ddc:	00f767b3          	or	a5,a4,a5
80001de0:	0037f793          	andi	a5,a5,3
80001de4:	06079863          	bnez	a5,80001e54 <memset+0x98>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/string.c:27
    uintptr_t word = byte & 0xFF;
80001de8:	fd842783          	lw	a5,-40(s0)
80001dec:	0ff7f793          	andi	a5,a5,255
80001df0:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/string.c:28
    word |= word << 8;
80001df4:	fe442783          	lw	a5,-28(s0)
80001df8:	00879793          	slli	a5,a5,0x8
80001dfc:	fe442703          	lw	a4,-28(s0)
80001e00:	00f767b3          	or	a5,a4,a5
80001e04:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/string.c:29
    word |= word << 16;
80001e08:	fe442783          	lw	a5,-28(s0)
80001e0c:	01079793          	slli	a5,a5,0x10
80001e10:	fe442703          	lw	a4,-28(s0)
80001e14:	00f767b3          	or	a5,a4,a5
80001e18:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/string.c:32
    word |= word << 16 << 16;

    uintptr_t *d = dest;
80001e1c:	fdc42783          	lw	a5,-36(s0)
80001e20:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001e24:	0180006f          	j	80001e3c <memset+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/string.c:34
      *d++ = word;
80001e28:	fec42783          	lw	a5,-20(s0)
80001e2c:	00478713          	addi	a4,a5,4
80001e30:	fee42623          	sw	a4,-20(s0)
80001e34:	fe442703          	lw	a4,-28(s0)
80001e38:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001e3c:	fdc42703          	lw	a4,-36(s0)
80001e40:	fd442783          	lw	a5,-44(s0)
80001e44:	00f707b3          	add	a5,a4,a5
80001e48:	fec42703          	lw	a4,-20(s0)
80001e4c:	fcf76ee3          	bltu	a4,a5,80001e28 <memset+0x6c>
80001e50:	0400006f          	j	80001e90 <memset+0xd4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/string.c:36
  } else {
    char *d = dest;
80001e54:	fdc42783          	lw	a5,-36(s0)
80001e58:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001e5c:	0200006f          	j	80001e7c <memset+0xc0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/string.c:38
      *d++ = byte;
80001e60:	fe842783          	lw	a5,-24(s0)
80001e64:	00178713          	addi	a4,a5,1
80001e68:	fee42423          	sw	a4,-24(s0)
80001e6c:	fd842703          	lw	a4,-40(s0)
80001e70:	01871713          	slli	a4,a4,0x18
80001e74:	41875713          	srai	a4,a4,0x18
80001e78:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001e7c:	fdc42703          	lw	a4,-36(s0)
80001e80:	fd442783          	lw	a5,-44(s0)
80001e84:	00f707b3          	add	a5,a4,a5
80001e88:	fe842703          	lw	a4,-24(s0)
80001e8c:	fcf76ae3          	bltu	a4,a5,80001e60 <memset+0xa4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/string.c:40
  }
  return dest;
80001e90:	fdc42783          	lw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/string.c:41
}
80001e94:	00078513          	mv	a0,a5
80001e98:	02c12403          	lw	s0,44(sp)
80001e9c:	03010113          	addi	sp,sp,48
80001ea0:	00008067          	ret

80001ea4 <strlen>:
strlen():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/string.c:44

size_t strlen(const char *s)
{
80001ea4:	fd010113          	addi	sp,sp,-48
80001ea8:	02812623          	sw	s0,44(sp)
80001eac:	03010413          	addi	s0,sp,48
80001eb0:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/string.c:45
  const char *p = s;
80001eb4:	fdc42783          	lw	a5,-36(s0)
80001eb8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001ebc:	0100006f          	j	80001ecc <strlen+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/string.c:47
    p++;
80001ec0:	fec42783          	lw	a5,-20(s0)
80001ec4:	00178793          	addi	a5,a5,1
80001ec8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001ecc:	fec42783          	lw	a5,-20(s0)
80001ed0:	00078783          	lb	a5,0(a5)
80001ed4:	fe0796e3          	bnez	a5,80001ec0 <strlen+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/string.c:48
  return p - s;
80001ed8:	fec42703          	lw	a4,-20(s0)
80001edc:	fdc42783          	lw	a5,-36(s0)
80001ee0:	40f707b3          	sub	a5,a4,a5
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/string.c:49
}
80001ee4:	00078513          	mv	a0,a5
80001ee8:	02c12403          	lw	s0,44(sp)
80001eec:	03010113          	addi	sp,sp,48
80001ef0:	00008067          	ret

80001ef4 <xTaskGenericCreate>:
xTaskGenericCreate():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:551

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80001ef4:	fc010113          	addi	sp,sp,-64
80001ef8:	02112e23          	sw	ra,60(sp)
80001efc:	02812c23          	sw	s0,56(sp)
80001f00:	04010413          	addi	s0,sp,64
80001f04:	fca42e23          	sw	a0,-36(s0)
80001f08:	fcb42c23          	sw	a1,-40(s0)
80001f0c:	fcd42823          	sw	a3,-48(s0)
80001f10:	fce42623          	sw	a4,-52(s0)
80001f14:	fcf42423          	sw	a5,-56(s0)
80001f18:	fd042223          	sw	a6,-60(s0)
80001f1c:	fd142023          	sw	a7,-64(s0)
80001f20:	00060793          	mv	a5,a2
80001f24:	fcf41b23          	sh	a5,-42(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:556
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
80001f28:	fdc42783          	lw	a5,-36(s0)
80001f2c:	00079663          	bnez	a5,80001f38 <xTaskGenericCreate+0x44>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:556 (discriminator 1)
80001f30:	30047073          	csrci	mstatus,8
80001f34:	0000006f          	j	80001f34 <xTaskGenericCreate+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:557
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
80001f38:	fcc42703          	lw	a4,-52(s0)
80001f3c:	00400793          	li	a5,4
80001f40:	00e7f663          	bleu	a4,a5,80001f4c <xTaskGenericCreate+0x58>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 1)
80001f44:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 2)
80001f48:	0000006f          	j	80001f48 <xTaskGenericCreate+0x54>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:561

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
80001f4c:	fd645783          	lhu	a5,-42(s0)
80001f50:	fc442583          	lw	a1,-60(s0)
80001f54:	00078513          	mv	a0,a5
80001f58:	395000ef          	jal	ra,80002aec <prvAllocateTCBAndStack>
80001f5c:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:562
	if( pxNewTCB != NULL )
80001f60:	fe842783          	lw	a5,-24(s0)
80001f64:	16078263          	beqz	a5,800020c8 <xTaskGenericCreate+0x1d4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:598
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
80001f68:	fe842783          	lw	a5,-24(s0)
80001f6c:	0307a703          	lw	a4,48(a5)
80001f70:	fd645683          	lhu	a3,-42(s0)
80001f74:	400007b7          	lui	a5,0x40000
80001f78:	fff78793          	addi	a5,a5,-1 # 3fffffff <RAM_SIZE+0x3ff7ffff>
80001f7c:	00f687b3          	add	a5,a3,a5
80001f80:	00279793          	slli	a5,a5,0x2
80001f84:	00f707b3          	add	a5,a4,a5
80001f88:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:599
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
80001f8c:	fe442783          	lw	a5,-28(s0)
80001f90:	ffc7f793          	andi	a5,a5,-4
80001f94:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:602

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
80001f98:	fe442783          	lw	a5,-28(s0)
80001f9c:	0037f793          	andi	a5,a5,3
80001fa0:	00078663          	beqz	a5,80001fac <xTaskGenericCreate+0xb8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 1)
80001fa4:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 3)
80001fa8:	0000006f          	j	80001fa8 <xTaskGenericCreate+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:619
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
80001fac:	fd645783          	lhu	a5,-42(s0)
80001fb0:	00078713          	mv	a4,a5
80001fb4:	fc042683          	lw	a3,-64(s0)
80001fb8:	fcc42603          	lw	a2,-52(s0)
80001fbc:	fd842583          	lw	a1,-40(s0)
80001fc0:	fe842503          	lw	a0,-24(s0)
80001fc4:	009000ef          	jal	ra,800027cc <prvInitialiseTCBVariables>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:631
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
80001fc8:	fd042603          	lw	a2,-48(s0)
80001fcc:	fdc42583          	lw	a1,-36(s0)
80001fd0:	fe442503          	lw	a0,-28(s0)
80001fd4:	891ff0ef          	jal	ra,80001864 <pxPortInitialiseStack>
80001fd8:	00050713          	mv	a4,a0
80001fdc:	fe842783          	lw	a5,-24(s0)
80001fe0:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:635
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
80001fe4:	fc842783          	lw	a5,-56(s0)
80001fe8:	00078863          	beqz	a5,80001ff8 <xTaskGenericCreate+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:640
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
80001fec:	fc842783          	lw	a5,-56(s0)
80001ff0:	fe842703          	lw	a4,-24(s0)
80001ff4:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:649
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
80001ff8:	e34ff0ef          	jal	ra,8000162c <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:651
		{
			uxCurrentNumberOfTasks++;
80001ffc:	93c1a783          	lw	a5,-1732(gp) # 800076fc <uxCurrentNumberOfTasks>
80002000:	00178713          	addi	a4,a5,1
80002004:	92e1ae23          	sw	a4,-1732(gp) # 800076fc <uxCurrentNumberOfTasks>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:652
			if( pxCurrentTCB == NULL )
80002008:	92c1a783          	lw	a5,-1748(gp) # 800076ec <pxCurrentTCB>
8000200c:	02079063          	bnez	a5,8000202c <xTaskGenericCreate+0x138>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:656
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
80002010:	fe842703          	lw	a4,-24(s0)
80002014:	92e1a623          	sw	a4,-1748(gp) # 800076ec <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:658

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
80002018:	93c1a703          	lw	a4,-1732(gp) # 800076fc <uxCurrentNumberOfTasks>
8000201c:	00100793          	li	a5,1
80002020:	02f71663          	bne	a4,a5,8000204c <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:663
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
80002024:	0e1000ef          	jal	ra,80002904 <prvInitialiseTaskLists>
80002028:	0240006f          	j	8000204c <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:675
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
8000202c:	9481a783          	lw	a5,-1720(gp) # 80007708 <xSchedulerRunning>
80002030:	00079e63          	bnez	a5,8000204c <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:677
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
80002034:	92c1a783          	lw	a5,-1748(gp) # 800076ec <pxCurrentTCB>
80002038:	02c7a783          	lw	a5,44(a5)
8000203c:	fcc42703          	lw	a4,-52(s0)
80002040:	00f76663          	bltu	a4,a5,8000204c <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:679
					{
						pxCurrentTCB = pxNewTCB;
80002044:	fe842703          	lw	a4,-24(s0)
80002048:	92e1a623          	sw	a4,-1748(gp) # 800076ec <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:692
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
8000204c:	9581a783          	lw	a5,-1704(gp) # 80007718 <uxTaskNumber>
80002050:	00178713          	addi	a4,a5,1
80002054:	94e1ac23          	sw	a4,-1704(gp) # 80007718 <uxTaskNumber>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:697

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
80002058:	9581a703          	lw	a4,-1704(gp) # 80007718 <uxTaskNumber>
8000205c:	fe842783          	lw	a5,-24(s0)
80002060:	04e7a423          	sw	a4,72(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:702
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
80002064:	fe842783          	lw	a5,-24(s0)
80002068:	02c7a703          	lw	a4,44(a5)
8000206c:	9441a783          	lw	a5,-1724(gp) # 80007704 <uxTopReadyPriority>
80002070:	00e7f863          	bleu	a4,a5,80002080 <xTaskGenericCreate+0x18c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 1)
80002074:	fe842783          	lw	a5,-24(s0)
80002078:	02c7a703          	lw	a4,44(a5)
8000207c:	94e1a223          	sw	a4,-1724(gp) # 80007704 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 3)
80002080:	fe842783          	lw	a5,-24(s0)
80002084:	02c7a703          	lw	a4,44(a5)
80002088:	00070793          	mv	a5,a4
8000208c:	00279793          	slli	a5,a5,0x2
80002090:	00e787b3          	add	a5,a5,a4
80002094:	00279793          	slli	a5,a5,0x2
80002098:	80020737          	lui	a4,0x80020
8000209c:	73070713          	addi	a4,a4,1840 # 80020730 <__stack_top+0xfffde980>
800020a0:	00e78733          	add	a4,a5,a4
800020a4:	fe842783          	lw	a5,-24(s0)
800020a8:	00478793          	addi	a5,a5,4
800020ac:	00078593          	mv	a1,a5
800020b0:	00070513          	mv	a0,a4
800020b4:	b15ff0ef          	jal	ra,80001bc8 <vListInsertEnd>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:704 (discriminator 3)

			xReturn = pdPASS;
800020b8:	00100793          	li	a5,1
800020bc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:707 (discriminator 3)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
800020c0:	da0ff0ef          	jal	ra,80001660 <vPortExitCritical>
800020c4:	00c0006f          	j	800020d0 <xTaskGenericCreate+0x1dc>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:711
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
800020c8:	fff00793          	li	a5,-1
800020cc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:715
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
800020d0:	fec42703          	lw	a4,-20(s0)
800020d4:	00100793          	li	a5,1
800020d8:	02f71063          	bne	a4,a5,800020f8 <xTaskGenericCreate+0x204>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:717
	{
		if( xSchedulerRunning != pdFALSE )
800020dc:	9481a783          	lw	a5,-1720(gp) # 80007708 <xSchedulerRunning>
800020e0:	00078c63          	beqz	a5,800020f8 <xTaskGenericCreate+0x204>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:721
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
800020e4:	92c1a783          	lw	a5,-1748(gp) # 800076ec <pxCurrentTCB>
800020e8:	02c7a783          	lw	a5,44(a5)
800020ec:	fcc42703          	lw	a4,-52(s0)
800020f0:	00e7f463          	bleu	a4,a5,800020f8 <xTaskGenericCreate+0x204>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:723
			{
				taskYIELD_IF_USING_PREEMPTION();
800020f4:	a21ff0ef          	jal	ra,80001b14 <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:736
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
800020f8:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:737
}
800020fc:	00078513          	mv	a0,a5
80002100:	03c12083          	lw	ra,60(sp)
80002104:	03812403          	lw	s0,56(sp)
80002108:	04010113          	addi	sp,sp,64
8000210c:	00008067          	ret

80002110 <vTaskDelete>:
vTaskDelete():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:743
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
80002110:	fd010113          	addi	sp,sp,-48
80002114:	02112623          	sw	ra,44(sp)
80002118:	02812423          	sw	s0,40(sp)
8000211c:	03010413          	addi	s0,sp,48
80002120:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:746
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
80002124:	d08ff0ef          	jal	ra,8000162c <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:750
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
80002128:	fdc42783          	lw	a5,-36(s0)
8000212c:	00079663          	bnez	a5,80002138 <vTaskDelete+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 1)
80002130:	92c1a783          	lw	a5,-1748(gp) # 800076ec <pxCurrentTCB>
80002134:	0080006f          	j	8000213c <vTaskDelete+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 2)
80002138:	fdc42783          	lw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 4)
8000213c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:756 (discriminator 4)

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80002140:	fec42783          	lw	a5,-20(s0)
80002144:	00478793          	addi	a5,a5,4
80002148:	00078513          	mv	a0,a5
8000214c:	bd9ff0ef          	jal	ra,80001d24 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:766 (discriminator 4)
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
80002150:	fec42783          	lw	a5,-20(s0)
80002154:	0287a783          	lw	a5,40(a5)
80002158:	00078a63          	beqz	a5,8000216c <vTaskDelete+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:768
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
8000215c:	fec42783          	lw	a5,-20(s0)
80002160:	01878793          	addi	a5,a5,24
80002164:	00078513          	mv	a0,a5
80002168:	bbdff0ef          	jal	ra,80001d24 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:775
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
8000216c:	fec42783          	lw	a5,-20(s0)
80002170:	00478793          	addi	a5,a5,4
80002174:	00078593          	mv	a1,a5
80002178:	800207b7          	lui	a5,0x80020
8000217c:	7d078513          	addi	a0,a5,2000 # 800207d0 <__stack_top+0xfffdea20>
80002180:	a49ff0ef          	jal	ra,80001bc8 <vListInsertEnd>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:780

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
80002184:	9381a783          	lw	a5,-1736(gp) # 800076f8 <uxTasksDeleted>
80002188:	00178713          	addi	a4,a5,1
8000218c:	92e1ac23          	sw	a4,-1736(gp) # 800076f8 <uxTasksDeleted>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:784

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
80002190:	9581a783          	lw	a5,-1704(gp) # 80007718 <uxTaskNumber>
80002194:	00178713          	addi	a4,a5,1
80002198:	94e1ac23          	sw	a4,-1704(gp) # 80007718 <uxTaskNumber>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:788

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
8000219c:	cc4ff0ef          	jal	ra,80001660 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:792

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
800021a0:	9481a783          	lw	a5,-1720(gp) # 80007708 <xSchedulerRunning>
800021a4:	02078a63          	beqz	a5,800021d8 <vTaskDelete+0xc8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:794
		{
			if( pxTCB == pxCurrentTCB )
800021a8:	92c1a783          	lw	a5,-1748(gp) # 800076ec <pxCurrentTCB>
800021ac:	fec42703          	lw	a4,-20(s0)
800021b0:	00f71e63          	bne	a4,a5,800021cc <vTaskDelete+0xbc>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:796
			{
				configASSERT( uxSchedulerSuspended == 0 );
800021b4:	9601a783          	lw	a5,-1696(gp) # 80007720 <uxSchedulerSuspended>
800021b8:	00078663          	beqz	a5,800021c4 <vTaskDelete+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:796 (discriminator 1)
800021bc:	30047073          	csrci	mstatus,8
800021c0:	0000006f          	j	800021c0 <vTaskDelete+0xb0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:804
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
800021c4:	951ff0ef          	jal	ra,80001b14 <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:817
					prvResetNextTaskUnblockTime();
				}
				taskEXIT_CRITICAL();
			}
		}
	}
800021c8:	0100006f          	j	800021d8 <vTaskDelete+0xc8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:810
				taskENTER_CRITICAL();
800021cc:	c60ff0ef          	jal	ra,8000162c <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:812
					prvResetNextTaskUnblockTime();
800021d0:	21d000ef          	jal	ra,80002bec <prvResetNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:814
				taskEXIT_CRITICAL();
800021d4:	c8cff0ef          	jal	ra,80001660 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:817
	}
800021d8:	00000013          	nop
800021dc:	02c12083          	lw	ra,44(sp)
800021e0:	02812403          	lw	s0,40(sp)
800021e4:	03010113          	addi	sp,sp,48
800021e8:	00008067          	ret

800021ec <vTaskDelay>:
vTaskDelay():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:921
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
800021ec:	fd010113          	addi	sp,sp,-48
800021f0:	02112623          	sw	ra,44(sp)
800021f4:	02812423          	sw	s0,40(sp)
800021f8:	03010413          	addi	s0,sp,48
800021fc:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:923
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
80002200:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:927


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
80002204:	fdc42783          	lw	a5,-36(s0)
80002208:	04078463          	beqz	a5,80002250 <vTaskDelay+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:929
		{
			configASSERT( uxSchedulerSuspended == 0 );
8000220c:	9601a783          	lw	a5,-1696(gp) # 80007720 <uxSchedulerSuspended>
80002210:	00078663          	beqz	a5,8000221c <vTaskDelay+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:929 (discriminator 1)
80002214:	30047073          	csrci	mstatus,8
80002218:	0000006f          	j	80002218 <vTaskDelay+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:930
			vTaskSuspendAll();
8000221c:	0e4000ef          	jal	ra,80002300 <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:944
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
80002220:	9401a783          	lw	a5,-1728(gp) # 80007700 <xTickCount>
80002224:	fdc42703          	lw	a4,-36(s0)
80002228:	00f707b3          	add	a5,a4,a5
8000222c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:949

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80002230:	92c1a783          	lw	a5,-1748(gp) # 800076ec <pxCurrentTCB>
80002234:	00478793          	addi	a5,a5,4
80002238:	00078513          	mv	a0,a5
8000223c:	ae9ff0ef          	jal	ra,80001d24 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:960
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
80002240:	fe842503          	lw	a0,-24(s0)
80002244:	021000ef          	jal	ra,80002a64 <prvAddCurrentTaskToDelayedList>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:962
			}
			xAlreadyYielded = xTaskResumeAll();
80002248:	0e0000ef          	jal	ra,80002328 <xTaskResumeAll>
8000224c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:971
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
80002250:	fec42783          	lw	a5,-20(s0)
80002254:	00079463          	bnez	a5,8000225c <vTaskDelay+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:973
		{
			portYIELD_WITHIN_API();
80002258:	8bdff0ef          	jal	ra,80001b14 <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:979
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
8000225c:	00000013          	nop
80002260:	02c12083          	lw	ra,44(sp)
80002264:	02812403          	lw	s0,40(sp)
80002268:	03010113          	addi	sp,sp,48
8000226c:	00008067          	ret

80002270 <vTaskStartScheduler>:
vTaskStartScheduler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1542

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
80002270:	fe010113          	addi	sp,sp,-32
80002274:	00112e23          	sw	ra,28(sp)
80002278:	00812c23          	sw	s0,24(sp)
8000227c:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1555
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
80002280:	00000893          	li	a7,0
80002284:	00000813          	li	a6,0
80002288:	00000793          	li	a5,0
8000228c:	00000713          	li	a4,0
80002290:	00000693          	li	a3,0
80002294:	40000613          	li	a2,1024
80002298:	800075b7          	lui	a1,0x80007
8000229c:	f2858593          	addi	a1,a1,-216 # 80006f28 <__stack_top+0xfffc5178>
800022a0:	80002537          	lui	a0,0x80002
800022a4:	79850513          	addi	a0,a0,1944 # 80002798 <__stack_top+0xfffc09e8>
800022a8:	c4dff0ef          	jal	ra,80001ef4 <xTaskGenericCreate>
800022ac:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1572
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
800022b0:	fec42703          	lw	a4,-20(s0)
800022b4:	00100793          	li	a5,1
800022b8:	02f71263          	bne	a4,a5,800022dc <vTaskStartScheduler+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1579
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
800022bc:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1589
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
800022c0:	fff00713          	li	a4,-1
800022c4:	94e1ae23          	sw	a4,-1700(gp) # 8000771c <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1590
		xSchedulerRunning = pdTRUE;
800022c8:	00100713          	li	a4,1
800022cc:	94e1a423          	sw	a4,-1720(gp) # 80007708 <xSchedulerRunning>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1591
		xTickCount = ( TickType_t ) 0U;
800022d0:	9401a023          	sw	zero,-1728(gp) # 80007700 <xTickCount>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1600
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
800022d4:	f08ff0ef          	jal	ra,800019dc <xPortStartScheduler>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
800022d8:	0140006f          	j	800022ec <vTaskStartScheduler+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615
		configASSERT( xReturn );
800022dc:	fec42783          	lw	a5,-20(s0)
800022e0:	00079663          	bnez	a5,800022ec <vTaskStartScheduler+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 1)
800022e4:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 2)
800022e8:	0000006f          	j	800022e8 <vTaskStartScheduler+0x78>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
}
800022ec:	00000013          	nop
800022f0:	01c12083          	lw	ra,28(sp)
800022f4:	01812403          	lw	s0,24(sp)
800022f8:	02010113          	addi	sp,sp,32
800022fc:	00008067          	ret

80002300 <vTaskSuspendAll>:
vTaskSuspendAll():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1632
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
80002300:	ff010113          	addi	sp,sp,-16
80002304:	00812623          	sw	s0,12(sp)
80002308:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1637
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
8000230c:	9601a783          	lw	a5,-1696(gp) # 80007720 <uxSchedulerSuspended>
80002310:	00178713          	addi	a4,a5,1
80002314:	96e1a023          	sw	a4,-1696(gp) # 80007720 <uxSchedulerSuspended>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1638
}
80002318:	00000013          	nop
8000231c:	00c12403          	lw	s0,12(sp)
80002320:	01010113          	addi	sp,sp,16
80002324:	00008067          	ret

80002328 <xTaskResumeAll>:
xTaskResumeAll():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1670

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
80002328:	fe010113          	addi	sp,sp,-32
8000232c:	00112e23          	sw	ra,28(sp)
80002330:	00812c23          	sw	s0,24(sp)
80002334:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1672
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
80002338:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
8000233c:	9601a783          	lw	a5,-1696(gp) # 80007720 <uxSchedulerSuspended>
80002340:	00079663          	bnez	a5,8000234c <xTaskResumeAll+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676 (discriminator 1)
80002344:	30047073          	csrci	mstatus,8
80002348:	0000006f          	j	80002348 <xTaskResumeAll+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1683
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
8000234c:	ae0ff0ef          	jal	ra,8000162c <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1685
	{
		--uxSchedulerSuspended;
80002350:	9601a783          	lw	a5,-1696(gp) # 80007720 <uxSchedulerSuspended>
80002354:	fff78713          	addi	a4,a5,-1
80002358:	96e1a023          	sw	a4,-1696(gp) # 80007720 <uxSchedulerSuspended>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1687

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
8000235c:	9601a783          	lw	a5,-1696(gp) # 80007720 <uxSchedulerSuspended>
80002360:	10079663          	bnez	a5,8000246c <xTaskResumeAll+0x144>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1689
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
80002364:	93c1a783          	lw	a5,-1732(gp) # 800076fc <uxCurrentNumberOfTasks>
80002368:	10078263          	beqz	a5,8000246c <xTaskResumeAll+0x144>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
8000236c:	0a80006f          	j	80002414 <xTaskResumeAll+0xec>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1695
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
80002370:	800207b7          	lui	a5,0x80020
80002374:	7bc78793          	addi	a5,a5,1980 # 800207bc <__stack_top+0xfffdea0c>
80002378:	00c7a783          	lw	a5,12(a5)
8000237c:	00c7a783          	lw	a5,12(a5)
80002380:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1696
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002384:	fe842783          	lw	a5,-24(s0)
80002388:	01878793          	addi	a5,a5,24
8000238c:	00078513          	mv	a0,a5
80002390:	995ff0ef          	jal	ra,80001d24 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1697
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80002394:	fe842783          	lw	a5,-24(s0)
80002398:	00478793          	addi	a5,a5,4
8000239c:	00078513          	mv	a0,a5
800023a0:	985ff0ef          	jal	ra,80001d24 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698
					prvAddTaskToReadyList( pxTCB );
800023a4:	fe842783          	lw	a5,-24(s0)
800023a8:	02c7a703          	lw	a4,44(a5)
800023ac:	9441a783          	lw	a5,-1724(gp) # 80007704 <uxTopReadyPriority>
800023b0:	00e7f863          	bleu	a4,a5,800023c0 <xTaskResumeAll+0x98>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 1)
800023b4:	fe842783          	lw	a5,-24(s0)
800023b8:	02c7a703          	lw	a4,44(a5)
800023bc:	94e1a223          	sw	a4,-1724(gp) # 80007704 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 3)
800023c0:	fe842783          	lw	a5,-24(s0)
800023c4:	02c7a703          	lw	a4,44(a5)
800023c8:	00070793          	mv	a5,a4
800023cc:	00279793          	slli	a5,a5,0x2
800023d0:	00e787b3          	add	a5,a5,a4
800023d4:	00279793          	slli	a5,a5,0x2
800023d8:	80020737          	lui	a4,0x80020
800023dc:	73070713          	addi	a4,a4,1840 # 80020730 <__stack_top+0xfffde980>
800023e0:	00e78733          	add	a4,a5,a4
800023e4:	fe842783          	lw	a5,-24(s0)
800023e8:	00478793          	addi	a5,a5,4
800023ec:	00078593          	mv	a1,a5
800023f0:	00070513          	mv	a0,a4
800023f4:	fd4ff0ef          	jal	ra,80001bc8 <vListInsertEnd>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1702 (discriminator 3)

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
800023f8:	fe842783          	lw	a5,-24(s0)
800023fc:	02c7a703          	lw	a4,44(a5)
80002400:	92c1a783          	lw	a5,-1748(gp) # 800076ec <pxCurrentTCB>
80002404:	02c7a783          	lw	a5,44(a5)
80002408:	00f76663          	bltu	a4,a5,80002414 <xTaskResumeAll+0xec>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1704
					{
						xYieldPending = pdTRUE;
8000240c:	00100713          	li	a4,1
80002410:	94e1a823          	sw	a4,-1712(gp) # 80007710 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
80002414:	800207b7          	lui	a5,0x80020
80002418:	7bc7a783          	lw	a5,1980(a5) # 800207bc <__stack_top+0xfffdea0c>
8000241c:	f4079ae3          	bnez	a5,80002370 <xTaskResumeAll+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1716

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
80002420:	94c1a783          	lw	a5,-1716(gp) # 8000770c <uxPendedTicks>
80002424:	02078863          	beqz	a5,80002454 <xTaskResumeAll+0x12c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
80002428:	0240006f          	j	8000244c <xTaskResumeAll+0x124>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1720
					{
						if( xTaskIncrementTick() != pdFALSE )
8000242c:	094000ef          	jal	ra,800024c0 <xTaskIncrementTick>
80002430:	00050793          	mv	a5,a0
80002434:	00078663          	beqz	a5,80002440 <xTaskResumeAll+0x118>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1722
						{
							xYieldPending = pdTRUE;
80002438:	00100713          	li	a4,1
8000243c:	94e1a823          	sw	a4,-1712(gp) # 80007710 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1728
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
80002440:	94c1a783          	lw	a5,-1716(gp) # 8000770c <uxPendedTicks>
80002444:	fff78713          	addi	a4,a5,-1
80002448:	94e1a623          	sw	a4,-1716(gp) # 8000770c <uxPendedTicks>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
					while( uxPendedTicks > ( UBaseType_t ) 0U )
8000244c:	94c1a783          	lw	a5,-1716(gp) # 8000770c <uxPendedTicks>
80002450:	fc079ee3          	bnez	a5,8000242c <xTaskResumeAll+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1736
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
80002454:	9501a703          	lw	a4,-1712(gp) # 80007710 <xYieldPending>
80002458:	00100793          	li	a5,1
8000245c:	00f71863          	bne	a4,a5,8000246c <xTaskResumeAll+0x144>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1740
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
80002460:	00100793          	li	a5,1
80002464:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1743
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
80002468:	eacff0ef          	jal	ra,80001b14 <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1756
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
8000246c:	9f4ff0ef          	jal	ra,80001660 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1758

	return xAlreadyYielded;
80002470:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1759
}
80002474:	00078513          	mv	a0,a5
80002478:	01c12083          	lw	ra,28(sp)
8000247c:	01812403          	lw	s0,24(sp)
80002480:	02010113          	addi	sp,sp,32
80002484:	00008067          	ret

80002488 <xTaskGetTickCount>:
xTaskGetTickCount():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1763
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
80002488:	fe010113          	addi	sp,sp,-32
8000248c:	00112e23          	sw	ra,28(sp)
80002490:	00812c23          	sw	s0,24(sp)
80002494:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1767
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
80002498:	994ff0ef          	jal	ra,8000162c <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1769
	{
		xTicks = xTickCount;
8000249c:	9401a783          	lw	a5,-1728(gp) # 80007700 <xTickCount>
800024a0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1771
	}
	portTICK_TYPE_EXIT_CRITICAL();
800024a4:	9bcff0ef          	jal	ra,80001660 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1773

	return xTicks;
800024a8:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1774
}
800024ac:	00078513          	mv	a0,a5
800024b0:	01c12083          	lw	ra,28(sp)
800024b4:	01812403          	lw	s0,24(sp)
800024b8:	02010113          	addi	sp,sp,32
800024bc:	00008067          	ret

800024c0 <xTaskIncrementTick>:
xTaskIncrementTick():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1938

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
800024c0:	fd010113          	addi	sp,sp,-48
800024c4:	02112623          	sw	ra,44(sp)
800024c8:	02812423          	sw	s0,40(sp)
800024cc:	03010413          	addi	s0,sp,48
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1941
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
800024d0:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1947

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
800024d4:	9601a783          	lw	a5,-1696(gp) # 80007720 <uxSchedulerSuspended>
800024d8:	1a079063          	bnez	a5,80002678 <xTaskIncrementTick+0x1b8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1951
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
800024dc:	9401a783          	lw	a5,-1728(gp) # 80007700 <xTickCount>
800024e0:	00178713          	addi	a4,a5,1
800024e4:	94e1a023          	sw	a4,-1728(gp) # 80007700 <xTickCount>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1956

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
800024e8:	9401a783          	lw	a5,-1728(gp) # 80007700 <xTickCount>
800024ec:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1958

			if( xConstTickCount == ( TickType_t ) 0U )
800024f0:	fe842783          	lw	a5,-24(s0)
800024f4:	04079063          	bnez	a5,80002534 <xTaskIncrementTick+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960
			{
				taskSWITCH_DELAYED_LISTS();
800024f8:	9301a783          	lw	a5,-1744(gp) # 800076f0 <pxDelayedTaskList>
800024fc:	0007a783          	lw	a5,0(a5)
80002500:	00078663          	beqz	a5,8000250c <xTaskIncrementTick+0x4c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 1)
80002504:	30047073          	csrci	mstatus,8
80002508:	0000006f          	j	80002508 <xTaskIncrementTick+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 2)
8000250c:	9301a783          	lw	a5,-1744(gp) # 800076f0 <pxDelayedTaskList>
80002510:	fef42223          	sw	a5,-28(s0)
80002514:	9341a703          	lw	a4,-1740(gp) # 800076f4 <pxOverflowDelayedTaskList>
80002518:	92e1a823          	sw	a4,-1744(gp) # 800076f0 <pxDelayedTaskList>
8000251c:	fe442703          	lw	a4,-28(s0)
80002520:	92e1aa23          	sw	a4,-1740(gp) # 800076f4 <pxOverflowDelayedTaskList>
80002524:	9541a783          	lw	a5,-1708(gp) # 80007714 <xNumOfOverflows>
80002528:	00178713          	addi	a4,a5,1
8000252c:	94e1aa23          	sw	a4,-1708(gp) # 80007714 <xNumOfOverflows>
80002530:	6bc000ef          	jal	ra,80002bec <prvResetNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1971

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
80002534:	95c1a783          	lw	a5,-1700(gp) # 8000771c <xNextTaskUnblockTime>
80002538:	fe842703          	lw	a4,-24(s0)
8000253c:	10f76063          	bltu	a4,a5,8000263c <xTaskIncrementTick+0x17c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80002540:	9301a783          	lw	a5,-1744(gp) # 800076f0 <pxDelayedTaskList>
80002544:	0007a783          	lw	a5,0(a5)
80002548:	00079663          	bnez	a5,80002554 <xTaskIncrementTick+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 1)
8000254c:	00100793          	li	a5,1
80002550:	0080006f          	j	80002558 <xTaskIncrementTick+0x98>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 2)
80002554:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 4)
80002558:	00078863          	beqz	a5,80002568 <xTaskIncrementTick+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1982
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
8000255c:	fff00713          	li	a4,-1
80002560:	94e1ae23          	sw	a4,-1700(gp) # 8000771c <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1983
						break;
80002564:	0d80006f          	j	8000263c <xTaskIncrementTick+0x17c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1991
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80002568:	9301a783          	lw	a5,-1744(gp) # 800076f0 <pxDelayedTaskList>
8000256c:	00c7a783          	lw	a5,12(a5)
80002570:	00c7a783          	lw	a5,12(a5)
80002574:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1992
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
80002578:	fe042783          	lw	a5,-32(s0)
8000257c:	0047a783          	lw	a5,4(a5)
80002580:	fcf42e23          	sw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1994

						if( xConstTickCount < xItemValue )
80002584:	fe842703          	lw	a4,-24(s0)
80002588:	fdc42783          	lw	a5,-36(s0)
8000258c:	00f77863          	bleu	a5,a4,8000259c <xTaskIncrementTick+0xdc>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2001
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
80002590:	fdc42703          	lw	a4,-36(s0)
80002594:	94e1ae23          	sw	a4,-1700(gp) # 8000771c <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2002
							break;
80002598:	0a40006f          	j	8000263c <xTaskIncrementTick+0x17c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2010
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
8000259c:	fe042783          	lw	a5,-32(s0)
800025a0:	00478793          	addi	a5,a5,4
800025a4:	00078513          	mv	a0,a5
800025a8:	f7cff0ef          	jal	ra,80001d24 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2014

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
800025ac:	fe042783          	lw	a5,-32(s0)
800025b0:	0287a783          	lw	a5,40(a5)
800025b4:	00078a63          	beqz	a5,800025c8 <xTaskIncrementTick+0x108>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2016
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
800025b8:	fe042783          	lw	a5,-32(s0)
800025bc:	01878793          	addi	a5,a5,24
800025c0:	00078513          	mv	a0,a5
800025c4:	f60ff0ef          	jal	ra,80001d24 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
800025c8:	fe042783          	lw	a5,-32(s0)
800025cc:	02c7a703          	lw	a4,44(a5)
800025d0:	9441a783          	lw	a5,-1724(gp) # 80007704 <uxTopReadyPriority>
800025d4:	00e7f863          	bleu	a4,a5,800025e4 <xTaskIncrementTick+0x124>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 1)
800025d8:	fe042783          	lw	a5,-32(s0)
800025dc:	02c7a703          	lw	a4,44(a5)
800025e0:	94e1a223          	sw	a4,-1724(gp) # 80007704 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 3)
800025e4:	fe042783          	lw	a5,-32(s0)
800025e8:	02c7a703          	lw	a4,44(a5)
800025ec:	00070793          	mv	a5,a4
800025f0:	00279793          	slli	a5,a5,0x2
800025f4:	00e787b3          	add	a5,a5,a4
800025f8:	00279793          	slli	a5,a5,0x2
800025fc:	80020737          	lui	a4,0x80020
80002600:	73070713          	addi	a4,a4,1840 # 80020730 <__stack_top+0xfffde980>
80002604:	00e78733          	add	a4,a5,a4
80002608:	fe042783          	lw	a5,-32(s0)
8000260c:	00478793          	addi	a5,a5,4
80002610:	00078593          	mv	a1,a5
80002614:	00070513          	mv	a0,a4
80002618:	db0ff0ef          	jal	ra,80001bc8 <vListInsertEnd>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2035 (discriminator 3)
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
8000261c:	fe042783          	lw	a5,-32(s0)
80002620:	02c7a703          	lw	a4,44(a5)
80002624:	92c1a783          	lw	a5,-1748(gp) # 800076ec <pxCurrentTCB>
80002628:	02c7a783          	lw	a5,44(a5)
8000262c:	f0f76ae3          	bltu	a4,a5,80002540 <xTaskIncrementTick+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2037
							{
								xSwitchRequired = pdTRUE;
80002630:	00100793          	li	a5,1
80002634:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80002638:	f09ff06f          	j	80002540 <xTaskIncrementTick+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2055
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
8000263c:	92c1a783          	lw	a5,-1748(gp) # 800076ec <pxCurrentTCB>
80002640:	02c7a703          	lw	a4,44(a5)
80002644:	800206b7          	lui	a3,0x80020
80002648:	00070793          	mv	a5,a4
8000264c:	00279793          	slli	a5,a5,0x2
80002650:	00e787b3          	add	a5,a5,a4
80002654:	00279793          	slli	a5,a5,0x2
80002658:	73068713          	addi	a4,a3,1840 # 80020730 <__stack_top+0xfffde980>
8000265c:	00e787b3          	add	a5,a5,a4
80002660:	0007a703          	lw	a4,0(a5)
80002664:	00100793          	li	a5,1
80002668:	00e7fe63          	bleu	a4,a5,80002684 <xTaskIncrementTick+0x1c4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2057
			{
				xSwitchRequired = pdTRUE;
8000266c:	00100793          	li	a5,1
80002670:	fef42623          	sw	a5,-20(s0)
80002674:	0100006f          	j	80002684 <xTaskIncrementTick+0x1c4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2083
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
80002678:	94c1a783          	lw	a5,-1716(gp) # 8000770c <uxPendedTicks>
8000267c:	00178713          	addi	a4,a5,1
80002680:	94e1a623          	sw	a4,-1716(gp) # 8000770c <uxPendedTicks>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2096
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
80002684:	9501a783          	lw	a5,-1712(gp) # 80007710 <xYieldPending>
80002688:	00078663          	beqz	a5,80002694 <xTaskIncrementTick+0x1d4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2098
		{
			xSwitchRequired = pdTRUE;
8000268c:	00100793          	li	a5,1
80002690:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2107
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
80002694:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2108
}
80002698:	00078513          	mv	a0,a5
8000269c:	02c12083          	lw	ra,44(sp)
800026a0:	02812403          	lw	s0,40(sp)
800026a4:	03010113          	addi	sp,sp,48
800026a8:	00008067          	ret

800026ac <vTaskSwitchContext>:
vTaskSwitchContext():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2202

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
800026ac:	fe010113          	addi	sp,sp,-32
800026b0:	00812e23          	sw	s0,28(sp)
800026b4:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2203
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
800026b8:	9601a783          	lw	a5,-1696(gp) # 80007720 <uxSchedulerSuspended>
800026bc:	00078863          	beqz	a5,800026cc <vTaskSwitchContext+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2207
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
800026c0:	00100713          	li	a4,1
800026c4:	94e1a823          	sw	a4,-1712(gp) # 80007710 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
800026c8:	0c00006f          	j	80002788 <vTaskSwitchContext+0xdc>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2211
		xYieldPending = pdFALSE;
800026cc:	9401a823          	sw	zero,-1712(gp) # 80007710 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246
		taskSELECT_HIGHEST_PRIORITY_TASK();
800026d0:	0200006f          	j	800026f0 <vTaskSwitchContext+0x44>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 4)
800026d4:	9441a783          	lw	a5,-1724(gp) # 80007704 <uxTopReadyPriority>
800026d8:	00079663          	bnez	a5,800026e4 <vTaskSwitchContext+0x38>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 1)
800026dc:	30047073          	csrci	mstatus,8
800026e0:	0000006f          	j	800026e0 <vTaskSwitchContext+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 2)
800026e4:	9441a783          	lw	a5,-1724(gp) # 80007704 <uxTopReadyPriority>
800026e8:	fff78713          	addi	a4,a5,-1
800026ec:	94e1a223          	sw	a4,-1724(gp) # 80007704 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 3)
800026f0:	9441a703          	lw	a4,-1724(gp) # 80007704 <uxTopReadyPriority>
800026f4:	800206b7          	lui	a3,0x80020
800026f8:	00070793          	mv	a5,a4
800026fc:	00279793          	slli	a5,a5,0x2
80002700:	00e787b3          	add	a5,a5,a4
80002704:	00279793          	slli	a5,a5,0x2
80002708:	73068713          	addi	a4,a3,1840 # 80020730 <__stack_top+0xfffde980>
8000270c:	00e787b3          	add	a5,a5,a4
80002710:	0007a783          	lw	a5,0(a5)
80002714:	fc0780e3          	beqz	a5,800026d4 <vTaskSwitchContext+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 5)
80002718:	9441a703          	lw	a4,-1724(gp) # 80007704 <uxTopReadyPriority>
8000271c:	00070793          	mv	a5,a4
80002720:	00279793          	slli	a5,a5,0x2
80002724:	00e787b3          	add	a5,a5,a4
80002728:	00279793          	slli	a5,a5,0x2
8000272c:	80020737          	lui	a4,0x80020
80002730:	73070713          	addi	a4,a4,1840 # 80020730 <__stack_top+0xfffde980>
80002734:	00e787b3          	add	a5,a5,a4
80002738:	fef42623          	sw	a5,-20(s0)
8000273c:	fec42783          	lw	a5,-20(s0)
80002740:	0047a783          	lw	a5,4(a5)
80002744:	0047a703          	lw	a4,4(a5)
80002748:	fec42783          	lw	a5,-20(s0)
8000274c:	00e7a223          	sw	a4,4(a5)
80002750:	fec42783          	lw	a5,-20(s0)
80002754:	0047a703          	lw	a4,4(a5)
80002758:	fec42783          	lw	a5,-20(s0)
8000275c:	00878793          	addi	a5,a5,8
80002760:	00f71c63          	bne	a4,a5,80002778 <vTaskSwitchContext+0xcc>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 6)
80002764:	fec42783          	lw	a5,-20(s0)
80002768:	0047a783          	lw	a5,4(a5)
8000276c:	0047a703          	lw	a4,4(a5)
80002770:	fec42783          	lw	a5,-20(s0)
80002774:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 8)
80002778:	fec42783          	lw	a5,-20(s0)
8000277c:	0047a783          	lw	a5,4(a5)
80002780:	00c7a703          	lw	a4,12(a5)
80002784:	92e1a623          	sw	a4,-1748(gp) # 800076ec <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
}
80002788:	00000013          	nop
8000278c:	01c12403          	lw	s0,28(sp)
80002790:	02010113          	addi	sp,sp,32
80002794:	00008067          	ret

80002798 <prvIdleTask>:
prvIdleTask():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2689
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
80002798:	fe010113          	addi	sp,sp,-32
8000279c:	00112e23          	sw	ra,28(sp)
800027a0:	00812c23          	sw	s0,24(sp)
800027a4:	02010413          	addi	s0,sp,32
800027a8:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
800027ac:	218000ef          	jal	ra,800029c4 <prvCheckTasksWaitingTermination>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2719

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
800027b0:	800207b7          	lui	a5,0x80020
800027b4:	7307a703          	lw	a4,1840(a5) # 80020730 <__stack_top+0xfffde980>
800027b8:	00100793          	li	a5,1
800027bc:	00e7f463          	bleu	a4,a5,800027c4 <prvIdleTask+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2721
			{
				taskYIELD();
800027c0:	b54ff0ef          	jal	ra,80001b14 <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2739
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
800027c4:	3b0040ef          	jal	ra,80006b74 <vApplicationIdleHook>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
		prvCheckTasksWaitingTermination();
800027c8:	fe5ff06f          	j	800027ac <prvIdleTask+0x14>

800027cc <prvInitialiseTCBVariables>:
prvInitialiseTCBVariables():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2832

#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
800027cc:	fc010113          	addi	sp,sp,-64
800027d0:	02112e23          	sw	ra,60(sp)
800027d4:	02812c23          	sw	s0,56(sp)
800027d8:	04010413          	addi	s0,sp,64
800027dc:	fca42e23          	sw	a0,-36(s0)
800027e0:	fcb42c23          	sw	a1,-40(s0)
800027e4:	fcc42a23          	sw	a2,-44(s0)
800027e8:	fcd42823          	sw	a3,-48(s0)
800027ec:	00070793          	mv	a5,a4
800027f0:	fcf41723          	sh	a5,-50(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
800027f4:	fe042623          	sw	zero,-20(s0)
800027f8:	0440006f          	j	8000283c <prvInitialiseTCBVariables+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2838
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
800027fc:	fd842703          	lw	a4,-40(s0)
80002800:	fec42783          	lw	a5,-20(s0)
80002804:	00f707b3          	add	a5,a4,a5
80002808:	00078703          	lb	a4,0(a5)
8000280c:	fdc42683          	lw	a3,-36(s0)
80002810:	fec42783          	lw	a5,-20(s0)
80002814:	00f687b3          	add	a5,a3,a5
80002818:	02e78a23          	sb	a4,52(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2843

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
8000281c:	fd842703          	lw	a4,-40(s0)
80002820:	fec42783          	lw	a5,-20(s0)
80002824:	00f707b3          	add	a5,a4,a5
80002828:	00078783          	lb	a5,0(a5)
8000282c:	02078063          	beqz	a5,8000284c <prvInitialiseTCBVariables+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 2)
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
80002830:	fec42783          	lw	a5,-20(s0)
80002834:	00178793          	addi	a5,a5,1
80002838:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 1)
8000283c:	fec42703          	lw	a4,-20(s0)
80002840:	00f00793          	li	a5,15
80002844:	fae7fce3          	bleu	a4,a5,800027fc <prvInitialiseTCBVariables+0x30>
80002848:	0080006f          	j	80002850 <prvInitialiseTCBVariables+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2845
		{
			break;
8000284c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2855
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
80002850:	fdc42783          	lw	a5,-36(s0)
80002854:	040781a3          	sb	zero,67(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2859

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
80002858:	fd442703          	lw	a4,-44(s0)
8000285c:	00400793          	li	a5,4
80002860:	00e7f663          	bleu	a4,a5,8000286c <prvInitialiseTCBVariables+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2861
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
80002864:	00400793          	li	a5,4
80002868:	fcf42a23          	sw	a5,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2868
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
8000286c:	fdc42783          	lw	a5,-36(s0)
80002870:	fd442703          	lw	a4,-44(s0)
80002874:	02e7a623          	sw	a4,44(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2871
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
80002878:	fdc42783          	lw	a5,-36(s0)
8000287c:	fd442703          	lw	a4,-44(s0)
80002880:	04e7a823          	sw	a4,80(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2872
		pxTCB->uxMutexesHeld = 0;
80002884:	fdc42783          	lw	a5,-36(s0)
80002888:	0407aa23          	sw	zero,84(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2876
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
8000288c:	fdc42783          	lw	a5,-36(s0)
80002890:	00478793          	addi	a5,a5,4
80002894:	00078513          	mv	a0,a5
80002898:	b08ff0ef          	jal	ra,80001ba0 <vListInitialiseItem>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2877
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
8000289c:	fdc42783          	lw	a5,-36(s0)
800028a0:	01878793          	addi	a5,a5,24
800028a4:	00078513          	mv	a0,a5
800028a8:	af8ff0ef          	jal	ra,80001ba0 <vListInitialiseItem>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2881

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
800028ac:	fdc42783          	lw	a5,-36(s0)
800028b0:	fdc42703          	lw	a4,-36(s0)
800028b4:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2884

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
800028b8:	00500713          	li	a4,5
800028bc:	fd442783          	lw	a5,-44(s0)
800028c0:	40f70733          	sub	a4,a4,a5
800028c4:	fdc42783          	lw	a5,-36(s0)
800028c8:	00e7ac23          	sw	a4,24(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2885
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
800028cc:	fdc42783          	lw	a5,-36(s0)
800028d0:	fdc42703          	lw	a4,-36(s0)
800028d4:	02e7a223          	sw	a4,36(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2889

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
800028d8:	fdc42783          	lw	a5,-36(s0)
800028dc:	0407a223          	sw	zero,68(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2927
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
800028e0:	fdc42783          	lw	a5,-36(s0)
800028e4:	0407ac23          	sw	zero,88(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2928
		pxTCB->eNotifyState = eNotWaitingNotification;
800028e8:	fdc42783          	lw	a5,-36(s0)
800028ec:	0407ae23          	sw	zero,92(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2938
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
800028f0:	00000013          	nop
800028f4:	03c12083          	lw	ra,60(sp)
800028f8:	03812403          	lw	s0,56(sp)
800028fc:	04010113          	addi	sp,sp,64
80002900:	00008067          	ret

80002904 <prvInitialiseTaskLists>:
prvInitialiseTaskLists():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:2997

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
80002904:	fe010113          	addi	sp,sp,-32
80002908:	00112e23          	sw	ra,28(sp)
8000290c:	00812c23          	sw	s0,24(sp)
80002910:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
80002914:	fe042623          	sw	zero,-20(s0)
80002918:	0380006f          	j	80002950 <prvInitialiseTaskLists+0x4c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3002 (discriminator 3)
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
8000291c:	fec42703          	lw	a4,-20(s0)
80002920:	00070793          	mv	a5,a4
80002924:	00279793          	slli	a5,a5,0x2
80002928:	00e787b3          	add	a5,a5,a4
8000292c:	00279793          	slli	a5,a5,0x2
80002930:	80020737          	lui	a4,0x80020
80002934:	73070713          	addi	a4,a4,1840 # 80020730 <__stack_top+0xfffde980>
80002938:	00e787b3          	add	a5,a5,a4
8000293c:	00078513          	mv	a0,a5
80002940:	9fcff0ef          	jal	ra,80001b3c <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 3)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
80002944:	fec42783          	lw	a5,-20(s0)
80002948:	00178793          	addi	a5,a5,1
8000294c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 1)
80002950:	fec42703          	lw	a4,-20(s0)
80002954:	00400793          	li	a5,4
80002958:	fce7f2e3          	bleu	a4,a5,8000291c <prvInitialiseTaskLists+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3005
	}

	vListInitialise( &xDelayedTaskList1 );
8000295c:	800207b7          	lui	a5,0x80020
80002960:	79478513          	addi	a0,a5,1940 # 80020794 <__stack_top+0xfffde9e4>
80002964:	9d8ff0ef          	jal	ra,80001b3c <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3006
	vListInitialise( &xDelayedTaskList2 );
80002968:	800207b7          	lui	a5,0x80020
8000296c:	7a878513          	addi	a0,a5,1960 # 800207a8 <__stack_top+0xfffde9f8>
80002970:	9ccff0ef          	jal	ra,80001b3c <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3007
	vListInitialise( &xPendingReadyList );
80002974:	800207b7          	lui	a5,0x80020
80002978:	7bc78513          	addi	a0,a5,1980 # 800207bc <__stack_top+0xfffdea0c>
8000297c:	9c0ff0ef          	jal	ra,80001b3c <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3011

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
80002980:	800207b7          	lui	a5,0x80020
80002984:	7d078513          	addi	a0,a5,2000 # 800207d0 <__stack_top+0xfffdea20>
80002988:	9b4ff0ef          	jal	ra,80001b3c <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3017
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
8000298c:	800207b7          	lui	a5,0x80020
80002990:	7e478513          	addi	a0,a5,2020 # 800207e4 <__stack_top+0xfffdea34>
80002994:	9a8ff0ef          	jal	ra,80001b3c <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3023
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
80002998:	80020737          	lui	a4,0x80020
8000299c:	79470713          	addi	a4,a4,1940 # 80020794 <__stack_top+0xfffde9e4>
800029a0:	92e1a823          	sw	a4,-1744(gp) # 800076f0 <pxDelayedTaskList>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3024
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
800029a4:	80020737          	lui	a4,0x80020
800029a8:	7a870713          	addi	a4,a4,1960 # 800207a8 <__stack_top+0xfffde9f8>
800029ac:	92e1aa23          	sw	a4,-1740(gp) # 800076f4 <pxOverflowDelayedTaskList>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3025
}
800029b0:	00000013          	nop
800029b4:	01c12083          	lw	ra,28(sp)
800029b8:	01812403          	lw	s0,24(sp)
800029bc:	02010113          	addi	sp,sp,32
800029c0:	00008067          	ret

800029c4 <prvCheckTasksWaitingTermination>:
prvCheckTasksWaitingTermination():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3029
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
800029c4:	fe010113          	addi	sp,sp,-32
800029c8:	00112e23          	sw	ra,28(sp)
800029cc:	00812c23          	sw	s0,24(sp)
800029d0:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
800029d4:	0740006f          	j	80002a48 <prvCheckTasksWaitingTermination+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3038
		{
			vTaskSuspendAll();
800029d8:	929ff0ef          	jal	ra,80002300 <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3040
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
800029dc:	800207b7          	lui	a5,0x80020
800029e0:	7d07a783          	lw	a5,2000(a5) # 800207d0 <__stack_top+0xfffdea20>
800029e4:	0017b793          	seqz	a5,a5
800029e8:	0ff7f793          	andi	a5,a5,255
800029ec:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3042
			}
			( void ) xTaskResumeAll();
800029f0:	939ff0ef          	jal	ra,80002328 <xTaskResumeAll>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3044

			if( xListIsEmpty == pdFALSE )
800029f4:	fec42783          	lw	a5,-20(s0)
800029f8:	04079863          	bnez	a5,80002a48 <prvCheckTasksWaitingTermination+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3048
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
800029fc:	c31fe0ef          	jal	ra,8000162c <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3050
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
80002a00:	800207b7          	lui	a5,0x80020
80002a04:	7d078793          	addi	a5,a5,2000 # 800207d0 <__stack_top+0xfffdea20>
80002a08:	00c7a783          	lw	a5,12(a5)
80002a0c:	00c7a783          	lw	a5,12(a5)
80002a10:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3051
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80002a14:	fe842783          	lw	a5,-24(s0)
80002a18:	00478793          	addi	a5,a5,4
80002a1c:	00078513          	mv	a0,a5
80002a20:	b04ff0ef          	jal	ra,80001d24 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3052
					--uxCurrentNumberOfTasks;
80002a24:	93c1a783          	lw	a5,-1732(gp) # 800076fc <uxCurrentNumberOfTasks>
80002a28:	fff78713          	addi	a4,a5,-1
80002a2c:	92e1ae23          	sw	a4,-1732(gp) # 800076fc <uxCurrentNumberOfTasks>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3053
					--uxTasksDeleted;
80002a30:	9381a783          	lw	a5,-1736(gp) # 800076f8 <uxTasksDeleted>
80002a34:	fff78713          	addi	a4,a5,-1
80002a38:	92e1ac23          	sw	a4,-1736(gp) # 800076f8 <uxTasksDeleted>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3055
				}
				taskEXIT_CRITICAL();
80002a3c:	c25fe0ef          	jal	ra,80001660 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3057

				prvDeleteTCB( pxTCB );
80002a40:	fe842503          	lw	a0,-24(s0)
80002a44:	168000ef          	jal	ra,80002bac <prvDeleteTCB>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
80002a48:	9381a783          	lw	a5,-1736(gp) # 800076f8 <uxTasksDeleted>
80002a4c:	f80796e3          	bnez	a5,800029d8 <prvCheckTasksWaitingTermination+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3066
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
80002a50:	00000013          	nop
80002a54:	01c12083          	lw	ra,28(sp)
80002a58:	01812403          	lw	s0,24(sp)
80002a5c:	02010113          	addi	sp,sp,32
80002a60:	00008067          	ret

80002a64 <prvAddCurrentTaskToDelayedList>:
prvAddCurrentTaskToDelayedList():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3070
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
80002a64:	fe010113          	addi	sp,sp,-32
80002a68:	00112e23          	sw	ra,28(sp)
80002a6c:	00812c23          	sw	s0,24(sp)
80002a70:	02010413          	addi	s0,sp,32
80002a74:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3072
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
80002a78:	92c1a783          	lw	a5,-1748(gp) # 800076ec <pxCurrentTCB>
80002a7c:	fec42703          	lw	a4,-20(s0)
80002a80:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3074

	if( xTimeToWake < xTickCount )
80002a84:	9401a783          	lw	a5,-1728(gp) # 80007700 <xTickCount>
80002a88:	fec42703          	lw	a4,-20(s0)
80002a8c:	02f77063          	bleu	a5,a4,80002aac <prvAddCurrentTaskToDelayedList+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3077
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80002a90:	9341a703          	lw	a4,-1740(gp) # 800076f4 <pxOverflowDelayedTaskList>
80002a94:	92c1a783          	lw	a5,-1748(gp) # 800076ec <pxCurrentTCB>
80002a98:	00478793          	addi	a5,a5,4
80002a9c:	00078593          	mv	a1,a5
80002aa0:	00070513          	mv	a0,a4
80002aa4:	9acff0ef          	jal	ra,80001c50 <vListInsert>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
80002aa8:	0300006f          	j	80002ad8 <prvAddCurrentTaskToDelayedList+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3082
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80002aac:	9301a703          	lw	a4,-1744(gp) # 800076f0 <pxDelayedTaskList>
80002ab0:	92c1a783          	lw	a5,-1748(gp) # 800076ec <pxCurrentTCB>
80002ab4:	00478793          	addi	a5,a5,4
80002ab8:	00078593          	mv	a1,a5
80002abc:	00070513          	mv	a0,a4
80002ac0:	990ff0ef          	jal	ra,80001c50 <vListInsert>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3087
		if( xTimeToWake < xNextTaskUnblockTime )
80002ac4:	95c1a783          	lw	a5,-1700(gp) # 8000771c <xNextTaskUnblockTime>
80002ac8:	fec42703          	lw	a4,-20(s0)
80002acc:	00f77663          	bleu	a5,a4,80002ad8 <prvAddCurrentTaskToDelayedList+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3089
			xNextTaskUnblockTime = xTimeToWake;
80002ad0:	fec42703          	lw	a4,-20(s0)
80002ad4:	94e1ae23          	sw	a4,-1700(gp) # 8000771c <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
}
80002ad8:	00000013          	nop
80002adc:	01c12083          	lw	ra,28(sp)
80002ae0:	01812403          	lw	s0,24(sp)
80002ae4:	02010113          	addi	sp,sp,32
80002ae8:	00008067          	ret

80002aec <prvAllocateTCBAndStack>:
prvAllocateTCBAndStack():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3100
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
80002aec:	fd010113          	addi	sp,sp,-48
80002af0:	02112623          	sw	ra,44(sp)
80002af4:	02812423          	sw	s0,40(sp)
80002af8:	03010413          	addi	s0,sp,48
80002afc:	00050793          	mv	a5,a0
80002b00:	fcb42c23          	sw	a1,-40(s0)
80002b04:	fcf41f23          	sh	a5,-34(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80002b08:	fd842783          	lw	a5,-40(s0)
80002b0c:	00079e63          	bnez	a5,80002b28 <prvAllocateTCBAndStack+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 1)
80002b10:	fde45783          	lhu	a5,-34(s0)
80002b14:	00279793          	slli	a5,a5,0x2
80002b18:	00078513          	mv	a0,a5
80002b1c:	fa8fe0ef          	jal	ra,800012c4 <pvPortMalloc>
80002b20:	00050793          	mv	a5,a0
80002b24:	0080006f          	j	80002b2c <prvAllocateTCBAndStack+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 2)
80002b28:	fd842783          	lw	a5,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 4)
80002b2c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3134 (discriminator 4)

		if( pxStack != NULL )
80002b30:	fe842783          	lw	a5,-24(s0)
80002b34:	02078a63          	beqz	a5,80002b68 <prvAllocateTCBAndStack+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3138
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
80002b38:	06000513          	li	a0,96
80002b3c:	f88fe0ef          	jal	ra,800012c4 <pvPortMalloc>
80002b40:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3140

			if( pxNewTCB != NULL )
80002b44:	fec42783          	lw	a5,-20(s0)
80002b48:	00078a63          	beqz	a5,80002b5c <prvAllocateTCBAndStack+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3143
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
80002b4c:	fec42783          	lw	a5,-20(s0)
80002b50:	fe842703          	lw	a4,-24(s0)
80002b54:	02e7a823          	sw	a4,48(a5)
80002b58:	0140006f          	j	80002b6c <prvAllocateTCBAndStack+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3149
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
80002b5c:	fe842503          	lw	a0,-24(s0)
80002b60:	941fe0ef          	jal	ra,800014a0 <vPortFree>
80002b64:	0080006f          	j	80002b6c <prvAllocateTCBAndStack+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3154
			}
		}
		else
		{
			pxNewTCB = NULL;
80002b68:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3159
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
80002b6c:	fec42783          	lw	a5,-20(s0)
80002b70:	02078263          	beqz	a5,80002b94 <prvAllocateTCBAndStack+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3165
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
80002b74:	fec42783          	lw	a5,-20(s0)
80002b78:	0307a703          	lw	a4,48(a5)
80002b7c:	fde45783          	lhu	a5,-34(s0)
80002b80:	00279793          	slli	a5,a5,0x2
80002b84:	00078613          	mv	a2,a5
80002b88:	0a500593          	li	a1,165
80002b8c:	00070513          	mv	a0,a4
80002b90:	a2cff0ef          	jal	ra,80001dbc <memset>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3170
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
80002b94:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3171
}
80002b98:	00078513          	mv	a0,a5
80002b9c:	02c12083          	lw	ra,44(sp)
80002ba0:	02812403          	lw	s0,40(sp)
80002ba4:	03010113          	addi	sp,sp,48
80002ba8:	00008067          	ret

80002bac <prvDeleteTCB>:
prvDeleteTCB():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3310
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
80002bac:	fe010113          	addi	sp,sp,-32
80002bb0:	00112e23          	sw	ra,28(sp)
80002bb4:	00812c23          	sw	s0,24(sp)
80002bb8:	02010413          	addi	s0,sp,32
80002bbc:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3335
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
80002bc0:	fec42783          	lw	a5,-20(s0)
80002bc4:	0307a783          	lw	a5,48(a5)
80002bc8:	00078513          	mv	a0,a5
80002bcc:	8d5fe0ef          	jal	ra,800014a0 <vPortFree>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3339
		}
		#endif

		vPortFree( pxTCB );
80002bd0:	fec42503          	lw	a0,-20(s0)
80002bd4:	8cdfe0ef          	jal	ra,800014a0 <vPortFree>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3340
	}
80002bd8:	00000013          	nop
80002bdc:	01c12083          	lw	ra,28(sp)
80002be0:	01812403          	lw	s0,24(sp)
80002be4:	02010113          	addi	sp,sp,32
80002be8:	00008067          	ret

80002bec <prvResetNextTaskUnblockTime>:
prvResetNextTaskUnblockTime():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3346

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
80002bec:	fe010113          	addi	sp,sp,-32
80002bf0:	00812e23          	sw	s0,28(sp)
80002bf4:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80002bf8:	9301a783          	lw	a5,-1744(gp) # 800076f0 <pxDelayedTaskList>
80002bfc:	0007a783          	lw	a5,0(a5)
80002c00:	00079663          	bnez	a5,80002c0c <prvResetNextTaskUnblockTime+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 1)
80002c04:	00100793          	li	a5,1
80002c08:	0080006f          	j	80002c10 <prvResetNextTaskUnblockTime+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 2)
80002c0c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 4)
80002c10:	00078863          	beqz	a5,80002c20 <prvResetNextTaskUnblockTime+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3355
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
80002c14:	fff00713          	li	a4,-1
80002c18:	94e1ae23          	sw	a4,-1700(gp) # 8000771c <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
80002c1c:	0200006f          	j	80002c3c <prvResetNextTaskUnblockTime+0x50>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3363
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80002c20:	9301a783          	lw	a5,-1744(gp) # 800076f0 <pxDelayedTaskList>
80002c24:	00c7a783          	lw	a5,12(a5)
80002c28:	00c7a783          	lw	a5,12(a5)
80002c2c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3364
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
80002c30:	fec42783          	lw	a5,-20(s0)
80002c34:	0047a703          	lw	a4,4(a5)
80002c38:	94e1ae23          	sw	a4,-1700(gp) # 8000771c <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
}
80002c3c:	00000013          	nop
80002c40:	01c12403          	lw	s0,28(sp)
80002c44:	02010113          	addi	sp,sp,32
80002c48:	00008067          	ret

80002c4c <xTaskGetCurrentTaskHandle>:
xTaskGetCurrentTaskHandle():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3372
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
80002c4c:	fe010113          	addi	sp,sp,-32
80002c50:	00812e23          	sw	s0,28(sp)
80002c54:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3378
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
80002c58:	92c1a783          	lw	a5,-1748(gp) # 800076ec <pxCurrentTCB>
80002c5c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3380

		return xReturn;
80002c60:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/tasks.c:3381
	}
80002c64:	00078513          	mv	a0,a5
80002c68:	01c12403          	lw	s0,28(sp)
80002c6c:	02010113          	addi	sp,sp,32
80002c70:	00008067          	ret

80002c74 <PLIC_EnableIRQ>:
PLIC_EnableIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:154
{
80002c74:	fd010113          	addi	sp,sp,-48
80002c78:	02812623          	sw	s0,44(sp)
80002c7c:	03010413          	addi	s0,sp,48
80002c80:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:155
    unsigned long hart_id = read_csr(mhartid);
80002c84:	f14027f3          	csrr	a5,mhartid
80002c88:	fef42623          	sw	a5,-20(s0)
80002c8c:	fec42783          	lw	a5,-20(s0)
80002c90:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:156
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80002c94:	40000737          	lui	a4,0x40000
80002c98:	fdc42783          	lw	a5,-36(s0)
80002c9c:	0057d793          	srli	a5,a5,0x5
80002ca0:	fe842683          	lw	a3,-24(s0)
80002ca4:	00569693          	slli	a3,a3,0x5
80002ca8:	00f686b3          	add	a3,a3,a5
80002cac:	000017b7          	lui	a5,0x1
80002cb0:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80002cb4:	00f687b3          	add	a5,a3,a5
80002cb8:	00279793          	slli	a5,a5,0x2
80002cbc:	00f707b3          	add	a5,a4,a5
80002cc0:	0007a783          	lw	a5,0(a5)
80002cc4:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:157
    current |= (uint32_t)1 << (IRQn % 32);
80002cc8:	fdc42783          	lw	a5,-36(s0)
80002ccc:	01f7f793          	andi	a5,a5,31
80002cd0:	00100713          	li	a4,1
80002cd4:	00f717b3          	sll	a5,a4,a5
80002cd8:	fe442703          	lw	a4,-28(s0)
80002cdc:	00f767b3          	or	a5,a4,a5
80002ce0:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:158
    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
80002ce4:	40000737          	lui	a4,0x40000
80002ce8:	fdc42783          	lw	a5,-36(s0)
80002cec:	0057d793          	srli	a5,a5,0x5
80002cf0:	fe842683          	lw	a3,-24(s0)
80002cf4:	00569693          	slli	a3,a3,0x5
80002cf8:	00f686b3          	add	a3,a3,a5
80002cfc:	000017b7          	lui	a5,0x1
80002d00:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80002d04:	00f687b3          	add	a5,a3,a5
80002d08:	00279793          	slli	a5,a5,0x2
80002d0c:	00f707b3          	add	a5,a4,a5
80002d10:	fe442703          	lw	a4,-28(s0)
80002d14:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:159
}
80002d18:	00000013          	nop
80002d1c:	02c12403          	lw	s0,44(sp)
80002d20:	03010113          	addi	sp,sp,48
80002d24:	00008067          	ret

80002d28 <PLIC_SetPriority>:
PLIC_SetPriority():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:188
{
80002d28:	fe010113          	addi	sp,sp,-32
80002d2c:	00812e23          	sw	s0,28(sp)
80002d30:	02010413          	addi	s0,sp,32
80002d34:	fea42623          	sw	a0,-20(s0)
80002d38:	feb42423          	sw	a1,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:189
    PLIC->SOURCE_PRIORITY[IRQn] = priority;
80002d3c:	40000737          	lui	a4,0x40000
80002d40:	fec42783          	lw	a5,-20(s0)
80002d44:	00279793          	slli	a5,a5,0x2
80002d48:	00f707b3          	add	a5,a4,a5
80002d4c:	fe842703          	lw	a4,-24(s0)
80002d50:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:190
}
80002d54:	00000013          	nop
80002d58:	01c12403          	lw	s0,28(sp)
80002d5c:	02010113          	addi	sp,sp,32
80002d60:	00008067          	ret

80002d64 <Chronos_init>:
Chronos_init():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:29

volatile unsigned int NI_IRCount;

////////////////////////////////////////////////////////////
// Initialize Chronos stuff
void Chronos_init(){
80002d64:	ff010113          	addi	sp,sp,-16
80002d68:	00112623          	sw	ra,12(sp)
80002d6c:	00812423          	sw	s0,8(sp)
80002d70:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:31
    //Informs the Router this tile ID, that is provided by Harness
    HW_set_32bit_reg(ROUTER_BASE, HW_get_32bit_reg(MY_ID)); 
80002d74:	900007b7          	lui	a5,0x90000
80002d78:	ffc78513          	addi	a0,a5,-4 # 8ffffffc <__stack_top+0xffbe24c>
80002d7c:	9fcfe0ef          	jal	ra,80000f78 <HW_get_32bit_reg>
80002d80:	00050793          	mv	a5,a0
80002d84:	00078593          	mv	a1,a5
80002d88:	50000537          	lui	a0,0x50000
80002d8c:	9e4fe0ef          	jal	ra,80000f70 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:34
    
    // Reads this processor address, calculated by the router
    ProcessorAddr = HW_get_32bit_reg(ROUTER_BASE);
80002d90:	50000537          	lui	a0,0x50000
80002d94:	9e4fe0ef          	jal	ra,80000f78 <HW_get_32bit_reg>
80002d98:	00050713          	mv	a4,a0
80002d9c:	800227b7          	lui	a5,0x80022
80002da0:	dae7a623          	sw	a4,-596(a5) # 80021dac <__stack_top+0xfffdfffc>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:37

    // Informs the PRINTER this tile address
    HW_set_32bit_reg(PRINTER_CHAR, getXpos(ProcessorAddr));
80002da4:	800227b7          	lui	a5,0x80022
80002da8:	dac7a783          	lw	a5,-596(a5) # 80021dac <__stack_top+0xfffdfffc>
80002dac:	00078513          	mv	a0,a5
80002db0:	1e8000ef          	jal	ra,80002f98 <getXpos>
80002db4:	00050793          	mv	a5,a0
80002db8:	00078593          	mv	a1,a5
80002dbc:	500007b7          	lui	a5,0x50000
80002dc0:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002dc4:	9acfe0ef          	jal	ra,80000f70 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:38
    HW_set_32bit_reg(PRINTER_CHAR, getYpos(ProcessorAddr));
80002dc8:	800227b7          	lui	a5,0x80022
80002dcc:	dac7a783          	lw	a5,-596(a5) # 80021dac <__stack_top+0xfffdfffc>
80002dd0:	00078513          	mv	a0,a5
80002dd4:	1f0000ef          	jal	ra,80002fc4 <getYpos>
80002dd8:	00050793          	mv	a5,a0
80002ddc:	00078593          	mv	a1,a5
80002de0:	500007b7          	lui	a5,0x50000
80002de4:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002de8:	988fe0ef          	jal	ra,80000f70 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:41

    // Enables interruption from NI
    NI_enable_irq(TX_RX);
80002dec:	000077b7          	lui	a5,0x7
80002df0:	77778513          	addi	a0,a5,1911 # 7777 <HEAP_SIZE-0x8889>
80002df4:	244000ef          	jal	ra,80003038 <NI_enable_irq>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:42
    NI_IRCount = 0;
80002df8:	800227b7          	lui	a5,0x80022
80002dfc:	d207a823          	sw	zero,-720(a5) # 80021d30 <__stack_top+0xfffdff80>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:46
    //NI_enable_irq(RX);

    // Informs the NI the address to store incoming packets
    HW_set_32bit_reg(NI_ADDR, (unsigned int)&incommingPacket.header);
80002e00:	800217b7          	lui	a5,0x80021
80002e04:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
80002e08:	00078593          	mv	a1,a5
80002e0c:	500007b7          	lui	a5,0x50000
80002e10:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
80002e14:	95cfe0ef          	jal	ra,80000f70 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:49
    
    // Initialize the TaskList
    API_TaskListInit();
80002e18:	779020ef          	jal	ra,80005d90 <API_TaskListInit>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:52

    // Initialize the Message & Service PIPE
    API_PipeInitialization();
80002e1c:	75c030ef          	jal	ra,80006578 <API_PipeInitialization>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:53
    SendingQueue_front = 0;
80002e20:	800217b7          	lui	a5,0x80021
80002e24:	9407ae23          	sw	zero,-1700(a5) # 8002095c <__stack_top+0xfffdebac>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:54
    SendingQueue_tail = 0;
80002e28:	800217b7          	lui	a5,0x80021
80002e2c:	9407a223          	sw	zero,-1724(a5) # 80020944 <__stack_top+0xfffdeb94>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:56

    return;
80002e30:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:57
}
80002e34:	00c12083          	lw	ra,12(sp)
80002e38:	00812403          	lw	s0,8(sp)
80002e3c:	01010113          	addi	sp,sp,16
80002e40:	00008067          	ret

80002e44 <prints>:
prints():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:61

////////////////////////////////////////////////////////////
// Prints a string
void prints(char *text) {
80002e44:	fd010113          	addi	sp,sp,-48
80002e48:	02112623          	sw	ra,44(sp)
80002e4c:	02812423          	sw	s0,40(sp)
80002e50:	03010413          	addi	s0,sp,48
80002e54:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:62
    int i = 0;
80002e58:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:64 (discriminator 1)
    do {
        HW_set_32bit_reg(PRINTER_CHAR, text[i]);
80002e5c:	fec42783          	lw	a5,-20(s0)
80002e60:	fdc42703          	lw	a4,-36(s0)
80002e64:	00f707b3          	add	a5,a4,a5
80002e68:	00078783          	lb	a5,0(a5)
80002e6c:	00078593          	mv	a1,a5
80002e70:	500007b7          	lui	a5,0x50000
80002e74:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002e78:	8f8fe0ef          	jal	ra,80000f70 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:65 (discriminator 1)
        i++;
80002e7c:	fec42783          	lw	a5,-20(s0)
80002e80:	00178793          	addi	a5,a5,1
80002e84:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:66 (discriminator 1)
    } while (text[i - 1] != '\0');
80002e88:	fec42783          	lw	a5,-20(s0)
80002e8c:	fff78793          	addi	a5,a5,-1
80002e90:	fdc42703          	lw	a4,-36(s0)
80002e94:	00f707b3          	add	a5,a4,a5
80002e98:	00078783          	lb	a5,0(a5)
80002e9c:	fc0790e3          	bnez	a5,80002e5c <prints+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:67
    return;
80002ea0:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:68
}
80002ea4:	02c12083          	lw	ra,44(sp)
80002ea8:	02812403          	lw	s0,40(sp)
80002eac:	03010113          	addi	sp,sp,48
80002eb0:	00008067          	ret

80002eb4 <printi>:
printi():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:72

////////////////////////////////////////////////////////////
// Prints an integer
void printi(int value) {
80002eb4:	fe010113          	addi	sp,sp,-32
80002eb8:	00112e23          	sw	ra,28(sp)
80002ebc:	00812c23          	sw	s0,24(sp)
80002ec0:	02010413          	addi	s0,sp,32
80002ec4:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:73
    HW_set_32bit_reg(PRINTER_INT, value);
80002ec8:	fec42783          	lw	a5,-20(s0)
80002ecc:	00078593          	mv	a1,a5
80002ed0:	500007b7          	lui	a5,0x50000
80002ed4:	02478513          	addi	a0,a5,36 # 50000024 <RAM_SIZE+0x4ff80024>
80002ed8:	898fe0ef          	jal	ra,80000f70 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:74
    return;
80002edc:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:75
}
80002ee0:	01c12083          	lw	ra,28(sp)
80002ee4:	01812403          	lw	s0,24(sp)
80002ee8:	02010113          	addi	sp,sp,32
80002eec:	00008067          	ret

80002ef0 <printsv>:
printsv():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:79

////////////////////////////////////////////////////////////
// Prints a string followed by a integer
void printsv(char *text1, int value1) {
80002ef0:	fe010113          	addi	sp,sp,-32
80002ef4:	00112e23          	sw	ra,28(sp)
80002ef8:	00812c23          	sw	s0,24(sp)
80002efc:	02010413          	addi	s0,sp,32
80002f00:	fea42623          	sw	a0,-20(s0)
80002f04:	feb42423          	sw	a1,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:81
    //vPortEnterCritical();
    prints(text1);
80002f08:	fec42503          	lw	a0,-20(s0)
80002f0c:	f39ff0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:82
    printi(value1);
80002f10:	fe842503          	lw	a0,-24(s0)
80002f14:	fa1ff0ef          	jal	ra,80002eb4 <printi>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:83
    prints("\n");
80002f18:	800077b7          	lui	a5,0x80007
80002f1c:	f3078513          	addi	a0,a5,-208 # 80006f30 <__stack_top+0xfffc5180>
80002f20:	f25ff0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:85
    //vPortExitCritical();
    return;
80002f24:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:86
}
80002f28:	01c12083          	lw	ra,28(sp)
80002f2c:	01812403          	lw	s0,24(sp)
80002f30:	02010113          	addi	sp,sp,32
80002f34:	00008067          	ret

80002f38 <printsvsv>:
printsvsv():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:90

////////////////////////////////////////////////////////////
// Prints two strings and two integers interspersed
void printsvsv(char *text1, int value1, char *text2, int value2) {
80002f38:	fe010113          	addi	sp,sp,-32
80002f3c:	00112e23          	sw	ra,28(sp)
80002f40:	00812c23          	sw	s0,24(sp)
80002f44:	02010413          	addi	s0,sp,32
80002f48:	fea42623          	sw	a0,-20(s0)
80002f4c:	feb42423          	sw	a1,-24(s0)
80002f50:	fec42223          	sw	a2,-28(s0)
80002f54:	fed42023          	sw	a3,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:92
    //vPortEnterCritical();
    prints(text1);
80002f58:	fec42503          	lw	a0,-20(s0)
80002f5c:	ee9ff0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:93
    printi(value1);
80002f60:	fe842503          	lw	a0,-24(s0)
80002f64:	f51ff0ef          	jal	ra,80002eb4 <printi>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:94
    prints(text2);
80002f68:	fe442503          	lw	a0,-28(s0)
80002f6c:	ed9ff0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:95
    printi(value2);
80002f70:	fe042503          	lw	a0,-32(s0)
80002f74:	f41ff0ef          	jal	ra,80002eb4 <printi>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:96
    prints("\n");
80002f78:	800077b7          	lui	a5,0x80007
80002f7c:	f3078513          	addi	a0,a5,-208 # 80006f30 <__stack_top+0xfffc5180>
80002f80:	ec5ff0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:98
    //vPortExitCritical();
    return;
80002f84:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:99
}
80002f88:	01c12083          	lw	ra,28(sp)
80002f8c:	01812403          	lw	s0,24(sp)
80002f90:	02010113          	addi	sp,sp,32
80002f94:	00008067          	ret

80002f98 <getXpos>:
getXpos():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:103

////////////////////////////////////////////////////////////
// Gets the X coordinate from the address
unsigned int getXpos(unsigned int addr) { return ((addr & 0x0000FF00) >> 8); }
80002f98:	fe010113          	addi	sp,sp,-32
80002f9c:	00812e23          	sw	s0,28(sp)
80002fa0:	02010413          	addi	s0,sp,32
80002fa4:	fea42623          	sw	a0,-20(s0)
80002fa8:	fec42783          	lw	a5,-20(s0)
80002fac:	0087d793          	srli	a5,a5,0x8
80002fb0:	0ff7f793          	andi	a5,a5,255
80002fb4:	00078513          	mv	a0,a5
80002fb8:	01c12403          	lw	s0,28(sp)
80002fbc:	02010113          	addi	sp,sp,32
80002fc0:	00008067          	ret

80002fc4 <getYpos>:
getYpos():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:107

////////////////////////////////////////////////////////////
// Gets the Y coordinate from the address
unsigned int getYpos(unsigned int addr) { return (addr & 0x000000FF); }
80002fc4:	fe010113          	addi	sp,sp,-32
80002fc8:	00812e23          	sw	s0,28(sp)
80002fcc:	02010413          	addi	s0,sp,32
80002fd0:	fea42623          	sw	a0,-20(s0)
80002fd4:	fec42783          	lw	a5,-20(s0)
80002fd8:	0ff7f793          	andi	a5,a5,255
80002fdc:	00078513          	mv	a0,a5
80002fe0:	01c12403          	lw	s0,28(sp)
80002fe4:	02010113          	addi	sp,sp,32
80002fe8:	00008067          	ret

80002fec <SendRaw>:
SendRaw():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:111

///////////////////////////////////////////////////////////////////
// Configure the NI to transmitt a given packet
void SendRaw(unsigned int addr) {
80002fec:	fe010113          	addi	sp,sp,-32
80002ff0:	00112e23          	sw	ra,28(sp)
80002ff4:	00812c23          	sw	s0,24(sp)
80002ff8:	02010413          	addi	s0,sp,32
80002ffc:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:112
    HW_set_32bit_reg(NI_ADDR, addr);
80003000:	fec42583          	lw	a1,-20(s0)
80003004:	500007b7          	lui	a5,0x50000
80003008:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
8000300c:	f65fd0ef          	jal	ra,80000f70 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:113
    HW_set_32bit_reg(NI_TX, TX);
80003010:	000027b7          	lui	a5,0x2
80003014:	22278593          	addi	a1,a5,546 # 2222 <HEAP_SIZE-0xddde>
80003018:	500007b7          	lui	a5,0x50000
8000301c:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80003020:	f51fd0ef          	jal	ra,80000f70 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:114
    return;
80003024:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:115
}
80003028:	01c12083          	lw	ra,28(sp)
8000302c:	01812403          	lw	s0,24(sp)
80003030:	02010113          	addi	sp,sp,32
80003034:	00008067          	ret

80003038 <NI_enable_irq>:
NI_enable_irq():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:119

////////////////////////////////////////////////////////////
// Enables interruptions incomming from NI
void NI_enable_irq(int which){
80003038:	fe010113          	addi	sp,sp,-32
8000303c:	00112e23          	sw	ra,28(sp)
80003040:	00812c23          	sw	s0,24(sp)
80003044:	02010413          	addi	s0,sp,32
80003048:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:120
	if (which == TX || which == TX_RX){
8000304c:	fec42703          	lw	a4,-20(s0)
80003050:	000027b7          	lui	a5,0x2
80003054:	22278793          	addi	a5,a5,546 # 2222 <HEAP_SIZE-0xddde>
80003058:	00f70a63          	beq	a4,a5,8000306c <NI_enable_irq+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:120 (discriminator 1)
8000305c:	fec42703          	lw	a4,-20(s0)
80003060:	000077b7          	lui	a5,0x7
80003064:	77778793          	addi	a5,a5,1911 # 7777 <HEAP_SIZE-0x8889>
80003068:	00f71c63          	bne	a4,a5,80003080 <NI_enable_irq+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:121
        PLIC_EnableIRQ(NI_TX_IRQn);
8000306c:	00100513          	li	a0,1
80003070:	c05ff0ef          	jal	ra,80002c74 <PLIC_EnableIRQ>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:122
        PLIC_SetPriority(NI_TX_IRQn, 1);
80003074:	00100593          	li	a1,1
80003078:	00100513          	li	a0,1
8000307c:	cadff0ef          	jal	ra,80002d28 <PLIC_SetPriority>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:124
    }
    if (which == RX || which == TX_RX){
80003080:	fec42703          	lw	a4,-20(s0)
80003084:	000037b7          	lui	a5,0x3
80003088:	33378793          	addi	a5,a5,819 # 3333 <HEAP_SIZE-0xcccd>
8000308c:	00f70a63          	beq	a4,a5,800030a0 <NI_enable_irq+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:124 (discriminator 1)
80003090:	fec42703          	lw	a4,-20(s0)
80003094:	000077b7          	lui	a5,0x7
80003098:	77778793          	addi	a5,a5,1911 # 7777 <HEAP_SIZE-0x8889>
8000309c:	00f71e63          	bne	a4,a5,800030b8 <NI_enable_irq+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:125
        PLIC_EnableIRQ(NI_RX_IRQn);
800030a0:	00200513          	li	a0,2
800030a4:	bd1ff0ef          	jal	ra,80002c74 <PLIC_EnableIRQ>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:126
        PLIC_SetPriority(NI_RX_IRQn, 2);
800030a8:	00200593          	li	a1,2
800030ac:	00200513          	li	a0,2
800030b0:	c79ff0ef          	jal	ra,80002d28 <PLIC_SetPriority>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:128
    }
    return;
800030b4:	00000013          	nop
800030b8:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:129
}
800030bc:	01c12083          	lw	ra,28(sp)
800030c0:	01812403          	lw	s0,24(sp)
800030c4:	02010113          	addi	sp,sp,32
800030c8:	00008067          	ret

800030cc <External_1_IRQHandler>:
External_1_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:141
    return;
}

////////////////////////////////////////////////////////////
// Interruptions handler for TX
uint8_t External_1_IRQHandler(void){ 
800030cc:	ff010113          	addi	sp,sp,-16
800030d0:	00812623          	sw	s0,12(sp)
800030d4:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:146
    /*prints("INTERRUPTION TX\n");
    API_ClearPipeSlot(SendingSlot);
    HW_set_32bit_reg(NI_TX, DONE);
    API_Try2Send();*/
    return 0;
800030d8:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:147
}
800030dc:	00078513          	mv	a0,a5
800030e0:	00c12403          	lw	s0,12(sp)
800030e4:	01010113          	addi	sp,sp,16
800030e8:	00008067          	ret

800030ec <External_2_IRQHandler>:
External_2_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:151

////////////////////////////////////////////////////////////
// Interruptions handler for RX
uint8_t External_2_IRQHandler(void){
800030ec:	ff010113          	addi	sp,sp,-16
800030f0:	00112623          	sw	ra,12(sp)
800030f4:	00812423          	sw	s0,8(sp)
800030f8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:153
    unsigned int aux;
    NI_IRCount++;
800030fc:	800227b7          	lui	a5,0x80022
80003100:	d307a783          	lw	a5,-720(a5) # 80021d30 <__stack_top+0xfffdff80>
80003104:	00178713          	addi	a4,a5,1
80003108:	800227b7          	lui	a5,0x80022
8000310c:	d2e7a823          	sw	a4,-720(a5) # 80021d30 <__stack_top+0xfffdff80>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:155
    
    API_NI_Handler();
80003110:	775000ef          	jal	ra,80004084 <API_NI_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:157

    return 0;
80003114:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:158
}
80003118:	00078513          	mv	a0,a5
8000311c:	00c12083          	lw	ra,12(sp)
80003120:	00812403          	lw	s0,8(sp)
80003124:	01010113          	addi	sp,sp,16
80003128:	00008067          	ret

8000312c <mySwap>:
mySwap():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:163

////////////////////////////////////////////////////////////
// https://www.techiedelight.com/implement-itoa-function-in-c/
// Function to swap two numbers
void mySwap(char *x, char *y) {
8000312c:	fd010113          	addi	sp,sp,-48
80003130:	02812623          	sw	s0,44(sp)
80003134:	03010413          	addi	s0,sp,48
80003138:	fca42e23          	sw	a0,-36(s0)
8000313c:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:164
    char t = *x; *x = *y; *y = t;
80003140:	fdc42783          	lw	a5,-36(s0)
80003144:	0007c783          	lbu	a5,0(a5)
80003148:	fef407a3          	sb	a5,-17(s0)
8000314c:	fd842783          	lw	a5,-40(s0)
80003150:	00078703          	lb	a4,0(a5)
80003154:	fdc42783          	lw	a5,-36(s0)
80003158:	00e78023          	sb	a4,0(a5)
8000315c:	fd842783          	lw	a5,-40(s0)
80003160:	fef44703          	lbu	a4,-17(s0)
80003164:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:165
}
80003168:	00000013          	nop
8000316c:	02c12403          	lw	s0,44(sp)
80003170:	03010113          	addi	sp,sp,48
80003174:	00008067          	ret

80003178 <reverse>:
reverse():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:167
// Function to reverse `buffer[i…j]`
char* reverse(char *buffer, int i, int j){
80003178:	fe010113          	addi	sp,sp,-32
8000317c:	00112e23          	sw	ra,28(sp)
80003180:	00812c23          	sw	s0,24(sp)
80003184:	02010413          	addi	s0,sp,32
80003188:	fea42623          	sw	a0,-20(s0)
8000318c:	feb42423          	sw	a1,-24(s0)
80003190:	fec42223          	sw	a2,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:168
    while (i < j) {
80003194:	0400006f          	j	800031d4 <reverse+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:169
        mySwap(&buffer[i++], &buffer[j--]);
80003198:	fe842783          	lw	a5,-24(s0)
8000319c:	00178713          	addi	a4,a5,1
800031a0:	fee42423          	sw	a4,-24(s0)
800031a4:	00078713          	mv	a4,a5
800031a8:	fec42783          	lw	a5,-20(s0)
800031ac:	00e786b3          	add	a3,a5,a4
800031b0:	fe442783          	lw	a5,-28(s0)
800031b4:	fff78713          	addi	a4,a5,-1
800031b8:	fee42223          	sw	a4,-28(s0)
800031bc:	00078713          	mv	a4,a5
800031c0:	fec42783          	lw	a5,-20(s0)
800031c4:	00e787b3          	add	a5,a5,a4
800031c8:	00078593          	mv	a1,a5
800031cc:	00068513          	mv	a0,a3
800031d0:	f5dff0ef          	jal	ra,8000312c <mySwap>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:168
    while (i < j) {
800031d4:	fe842703          	lw	a4,-24(s0)
800031d8:	fe442783          	lw	a5,-28(s0)
800031dc:	faf74ee3          	blt	a4,a5,80003198 <reverse+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:172
    }
 
    return buffer;
800031e0:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:173
}
800031e4:	00078513          	mv	a0,a5
800031e8:	01c12083          	lw	ra,28(sp)
800031ec:	01812403          	lw	s0,24(sp)
800031f0:	02010113          	addi	sp,sp,32
800031f4:	00008067          	ret

800031f8 <myItoa>:
myItoa():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:175
// Iterative function to implement `itoa()` function in C
char* myItoa(int value, char* buffer, int base){
800031f8:	fd010113          	addi	sp,sp,-48
800031fc:	02112623          	sw	ra,44(sp)
80003200:	02812423          	sw	s0,40(sp)
80003204:	03010413          	addi	s0,sp,48
80003208:	fca42e23          	sw	a0,-36(s0)
8000320c:	fcb42c23          	sw	a1,-40(s0)
80003210:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:177
    // invalid input
    if (base < 2 || base > 32) {
80003214:	fd442703          	lw	a4,-44(s0)
80003218:	00100793          	li	a5,1
8000321c:	00e7d863          	ble	a4,a5,8000322c <myItoa+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:177 (discriminator 1)
80003220:	fd442703          	lw	a4,-44(s0)
80003224:	02000793          	li	a5,32
80003228:	00e7d663          	ble	a4,a5,80003234 <myItoa+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:178
        return buffer;
8000322c:	fd842783          	lw	a5,-40(s0)
80003230:	1540006f          	j	80003384 <myItoa+0x18c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:182
    }
    // consider the absolute value of the number
    int n;
    if (value < 0)
80003234:	fdc42783          	lw	a5,-36(s0)
80003238:	0007da63          	bgez	a5,8000324c <myItoa+0x54>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:183
        n = value * -1;
8000323c:	fdc42783          	lw	a5,-36(s0)
80003240:	40f007b3          	neg	a5,a5
80003244:	fef42623          	sw	a5,-20(s0)
80003248:	00c0006f          	j	80003254 <myItoa+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:185
    else 
        n = value;
8000324c:	fdc42783          	lw	a5,-36(s0)
80003250:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:187

    int i = 0;
80003254:	fe042423          	sw	zero,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:188
    while (n){
80003258:	09c0006f          	j	800032f4 <myItoa+0xfc>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:189
        int r = n % base;
8000325c:	fec42703          	lw	a4,-20(s0)
80003260:	fd442783          	lw	a5,-44(s0)
80003264:	02f767b3          	rem	a5,a4,a5
80003268:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:191
 
        if (r >= 10) {
8000326c:	fe442703          	lw	a4,-28(s0)
80003270:	00900793          	li	a5,9
80003274:	02e7de63          	ble	a4,a5,800032b0 <myItoa+0xb8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:192
            buffer[i++] = 65 + (r - 10);
80003278:	fe442783          	lw	a5,-28(s0)
8000327c:	0ff7f793          	andi	a5,a5,255
80003280:	03778793          	addi	a5,a5,55
80003284:	0ff7f693          	andi	a3,a5,255
80003288:	fe842783          	lw	a5,-24(s0)
8000328c:	00178713          	addi	a4,a5,1
80003290:	fee42423          	sw	a4,-24(s0)
80003294:	00078713          	mv	a4,a5
80003298:	fd842783          	lw	a5,-40(s0)
8000329c:	00e787b3          	add	a5,a5,a4
800032a0:	01869713          	slli	a4,a3,0x18
800032a4:	41875713          	srai	a4,a4,0x18
800032a8:	00e78023          	sb	a4,0(a5)
800032ac:	0380006f          	j	800032e4 <myItoa+0xec>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:195
        }
        else {
            buffer[i++] = 48 + r;
800032b0:	fe442783          	lw	a5,-28(s0)
800032b4:	0ff7f793          	andi	a5,a5,255
800032b8:	03078793          	addi	a5,a5,48
800032bc:	0ff7f693          	andi	a3,a5,255
800032c0:	fe842783          	lw	a5,-24(s0)
800032c4:	00178713          	addi	a4,a5,1
800032c8:	fee42423          	sw	a4,-24(s0)
800032cc:	00078713          	mv	a4,a5
800032d0:	fd842783          	lw	a5,-40(s0)
800032d4:	00e787b3          	add	a5,a5,a4
800032d8:	01869713          	slli	a4,a3,0x18
800032dc:	41875713          	srai	a4,a4,0x18
800032e0:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:198
        }
 
        n = n / base;
800032e4:	fec42703          	lw	a4,-20(s0)
800032e8:	fd442783          	lw	a5,-44(s0)
800032ec:	02f747b3          	div	a5,a4,a5
800032f0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:188
    while (n){
800032f4:	fec42783          	lw	a5,-20(s0)
800032f8:	f60792e3          	bnez	a5,8000325c <myItoa+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:201
    }
    // if the number is 0
    if (i == 0) {
800032fc:	fe842783          	lw	a5,-24(s0)
80003300:	02079263          	bnez	a5,80003324 <myItoa+0x12c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:202
        buffer[i++] = '0';
80003304:	fe842783          	lw	a5,-24(s0)
80003308:	00178713          	addi	a4,a5,1
8000330c:	fee42423          	sw	a4,-24(s0)
80003310:	00078713          	mv	a4,a5
80003314:	fd842783          	lw	a5,-40(s0)
80003318:	00e787b3          	add	a5,a5,a4
8000331c:	03000713          	li	a4,48
80003320:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:207
    }
    // If the base is 10 and the value is negative, the resulting string
    // is preceded with a minus sign (-)
    // With any other base, value is always considered unsigned
    if (value < 0 && base == 10) {
80003324:	fdc42783          	lw	a5,-36(s0)
80003328:	0207d863          	bgez	a5,80003358 <myItoa+0x160>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:207 (discriminator 1)
8000332c:	fd442703          	lw	a4,-44(s0)
80003330:	00a00793          	li	a5,10
80003334:	02f71263          	bne	a4,a5,80003358 <myItoa+0x160>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:208
        buffer[i++] = '-';
80003338:	fe842783          	lw	a5,-24(s0)
8000333c:	00178713          	addi	a4,a5,1
80003340:	fee42423          	sw	a4,-24(s0)
80003344:	00078713          	mv	a4,a5
80003348:	fd842783          	lw	a5,-40(s0)
8000334c:	00e787b3          	add	a5,a5,a4
80003350:	02d00713          	li	a4,45
80003354:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:210
    }
    buffer[i] = '\0'; // null terminate string
80003358:	fe842783          	lw	a5,-24(s0)
8000335c:	fd842703          	lw	a4,-40(s0)
80003360:	00f707b3          	add	a5,a4,a5
80003364:	00078023          	sb	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:212
    // reverse the string and return it
    return reverse(buffer, 0, i - 1);
80003368:	fe842783          	lw	a5,-24(s0)
8000336c:	fff78793          	addi	a5,a5,-1
80003370:	00078613          	mv	a2,a5
80003374:	00000593          	li	a1,0
80003378:	fd842503          	lw	a0,-40(s0)
8000337c:	dfdff0ef          	jal	ra,80003178 <reverse>
80003380:	00050793          	mv	a5,a0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:213
}
80003384:	00078513          	mv	a0,a5
80003388:	02c12083          	lw	ra,44(sp)
8000338c:	02812403          	lw	s0,40(sp)
80003390:	03010113          	addi	sp,sp,48
80003394:	00008067          	ret

80003398 <makeAddress>:
makeAddress():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:227
    return;
}

////////////////////////////////////////////////////////////
// Returns the PE address for a giver pair of coords
unsigned int makeAddress(unsigned int x, unsigned int y) {
80003398:	fd010113          	addi	sp,sp,-48
8000339c:	02812623          	sw	s0,44(sp)
800033a0:	03010413          	addi	s0,sp,48
800033a4:	fca42e23          	sw	a0,-36(s0)
800033a8:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:228
    unsigned int address = 0x00000000;
800033ac:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:229
    return (address | (x << 8) | y);
800033b0:	fdc42783          	lw	a5,-36(s0)
800033b4:	00879713          	slli	a4,a5,0x8
800033b8:	fec42783          	lw	a5,-20(s0)
800033bc:	00f76733          	or	a4,a4,a5
800033c0:	fd842783          	lw	a5,-40(s0)
800033c4:	00f767b3          	or	a5,a4,a5
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:230
}
800033c8:	00078513          	mv	a0,a5
800033cc:	02c12403          	lw	s0,44(sp)
800033d0:	03010113          	addi	sp,sp,48
800033d4:	00008067          	ret

800033d8 <API_PushSendQueue>:
API_PushSendQueue():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:234

////////////////////////////////////////////////////////////
// Pushes one slot to the sending queue
void API_PushSendQueue(unsigned int type, unsigned int slot){
800033d8:	fe010113          	addi	sp,sp,-32
800033dc:	00112e23          	sw	ra,28(sp)
800033e0:	00812c23          	sw	s0,24(sp)
800033e4:	02010413          	addi	s0,sp,32
800033e8:	fea42623          	sw	a0,-20(s0)
800033ec:	feb42423          	sw	a1,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:235
    SendingQueue[SendingQueue_front] = type | slot;
800033f0:	800217b7          	lui	a5,0x80021
800033f4:	95c7a683          	lw	a3,-1700(a5) # 8002095c <__stack_top+0xfffdebac>
800033f8:	fec42703          	lw	a4,-20(s0)
800033fc:	fe842783          	lw	a5,-24(s0)
80003400:	00f76733          	or	a4,a4,a5
80003404:	800217b7          	lui	a5,0x80021
80003408:	00269693          	slli	a3,a3,0x2
8000340c:	92478793          	addi	a5,a5,-1756 # 80020924 <__stack_top+0xfffdeb74>
80003410:	00f687b3          	add	a5,a3,a5
80003414:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:236
    printsv("SendingQueue_front: ", SendingQueue_front);
80003418:	800217b7          	lui	a5,0x80021
8000341c:	95c7a783          	lw	a5,-1700(a5) # 8002095c <__stack_top+0xfffdebac>
80003420:	00078593          	mv	a1,a5
80003424:	800077b7          	lui	a5,0x80007
80003428:	f5c78513          	addi	a0,a5,-164 # 80006f5c <__stack_top+0xfffc51ac>
8000342c:	ac5ff0ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:237
    if(SendingQueue_front == (PIPE_SIZE*2)-1){
80003430:	800217b7          	lui	a5,0x80021
80003434:	95c7a703          	lw	a4,-1700(a5) # 8002095c <__stack_top+0xfffdebac>
80003438:	00700793          	li	a5,7
8000343c:	00f71863          	bne	a4,a5,8000344c <API_PushSendQueue+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:238
        SendingQueue_front = 0;
80003440:	800217b7          	lui	a5,0x80021
80003444:	9407ae23          	sw	zero,-1700(a5) # 8002095c <__stack_top+0xfffdebac>
80003448:	0180006f          	j	80003460 <API_PushSendQueue+0x88>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:240
    } else {
        SendingQueue_front++;
8000344c:	800217b7          	lui	a5,0x80021
80003450:	95c7a783          	lw	a5,-1700(a5) # 8002095c <__stack_top+0xfffdebac>
80003454:	00178713          	addi	a4,a5,1
80003458:	800217b7          	lui	a5,0x80021
8000345c:	94e7ae23          	sw	a4,-1700(a5) # 8002095c <__stack_top+0xfffdebac>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:242
    }
    API_Try2Send();
80003460:	0a4000ef          	jal	ra,80003504 <API_Try2Send>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:243
    return;
80003464:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:244
}
80003468:	01c12083          	lw	ra,28(sp)
8000346c:	01812403          	lw	s0,24(sp)
80003470:	02010113          	addi	sp,sp,32
80003474:	00008067          	ret

80003478 <API_PopSendQueue>:
API_PopSendQueue():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:248

////////////////////////////////////////////////////////////
// Pushes one slot to the sending queue
unsigned int API_PopSendQueue(){
80003478:	fe010113          	addi	sp,sp,-32
8000347c:	00812e23          	sw	s0,28(sp)
80003480:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:250
    unsigned int element;
    if (SendingQueue_front == SendingQueue_tail){
80003484:	800217b7          	lui	a5,0x80021
80003488:	95c7a703          	lw	a4,-1700(a5) # 8002095c <__stack_top+0xfffdebac>
8000348c:	800217b7          	lui	a5,0x80021
80003490:	9447a783          	lw	a5,-1724(a5) # 80020944 <__stack_top+0xfffdeb94>
80003494:	00f71663          	bne	a4,a5,800034a0 <API_PopSendQueue+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:251
        return EMPTY;
80003498:	303007b7          	lui	a5,0x30300
8000349c:	0580006f          	j	800034f4 <API_PopSendQueue+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:253
    } else {
        element = SendingQueue[SendingQueue_tail];
800034a0:	800217b7          	lui	a5,0x80021
800034a4:	9447a703          	lw	a4,-1724(a5) # 80020944 <__stack_top+0xfffdeb94>
800034a8:	800217b7          	lui	a5,0x80021
800034ac:	00271713          	slli	a4,a4,0x2
800034b0:	92478793          	addi	a5,a5,-1756 # 80020924 <__stack_top+0xfffdeb74>
800034b4:	00f707b3          	add	a5,a4,a5
800034b8:	0007a783          	lw	a5,0(a5)
800034bc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:254
        if (SendingQueue_tail == (PIPE_SIZE*2)-1){
800034c0:	800217b7          	lui	a5,0x80021
800034c4:	9447a703          	lw	a4,-1724(a5) # 80020944 <__stack_top+0xfffdeb94>
800034c8:	00700793          	li	a5,7
800034cc:	00f71863          	bne	a4,a5,800034dc <API_PopSendQueue+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:255
            SendingQueue_tail = 0;
800034d0:	800217b7          	lui	a5,0x80021
800034d4:	9407a223          	sw	zero,-1724(a5) # 80020944 <__stack_top+0xfffdeb94>
800034d8:	0180006f          	j	800034f0 <API_PopSendQueue+0x78>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:257
        } else {
            SendingQueue_tail++;
800034dc:	800217b7          	lui	a5,0x80021
800034e0:	9447a783          	lw	a5,-1724(a5) # 80020944 <__stack_top+0xfffdeb94>
800034e4:	00178713          	addi	a4,a5,1
800034e8:	800217b7          	lui	a5,0x80021
800034ec:	94e7a223          	sw	a4,-1724(a5) # 80020944 <__stack_top+0xfffdeb94>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:259
        }
        return element;
800034f0:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:261
    }
}
800034f4:	00078513          	mv	a0,a5
800034f8:	01c12403          	lw	s0,28(sp)
800034fc:	02010113          	addi	sp,sp,32
80003500:	00008067          	ret

80003504 <API_Try2Send>:
API_Try2Send():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:265

////////////////////////////////////////////////////////////
// Try to send some packet! 
void API_Try2Send(){
80003504:	fe010113          	addi	sp,sp,-32
80003508:	00112e23          	sw	ra,28(sp)
8000350c:	00812c23          	sw	s0,24(sp)
80003510:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:270
    unsigned int toSend;
    // Try to send the packet to NI if it's available
    // Checks if the NI is available to transmitt something
    //vPortEnterCritical();
    if (HW_get_32bit_reg(NI_TX) == NI_STATUS_OFF){
80003514:	500007b7          	lui	a5,0x50000
80003518:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
8000351c:	a5dfd0ef          	jal	ra,80000f78 <HW_get_32bit_reg>
80003520:	00050713          	mv	a4,a0
80003524:	0ff00793          	li	a5,255
80003528:	0ef71663          	bne	a4,a5,80003614 <API_Try2Send+0x110>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:271
        toSend = API_PopSendQueue();
8000352c:	f4dff0ef          	jal	ra,80003478 <API_PopSendQueue>
80003530:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:272
        if (toSend != EMPTY){
80003534:	fec42703          	lw	a4,-20(s0)
80003538:	303007b7          	lui	a5,0x30300
8000353c:	0af70a63          	beq	a4,a5,800035f0 <API_Try2Send+0xec>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:273
            SendingSlot = toSend;
80003540:	800207b7          	lui	a5,0x80020
80003544:	fec42703          	lw	a4,-20(s0)
80003548:	7ee7ac23          	sw	a4,2040(a5) # 800207f8 <__stack_top+0xfffdea48>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:274
            if((toSend & 0xFFFF0000) ==  SERVICE){
8000354c:	fec42703          	lw	a4,-20(s0)
80003550:	ffff07b7          	lui	a5,0xffff0
80003554:	00f77733          	and	a4,a4,a5
80003558:	101007b7          	lui	a5,0x10100
8000355c:	04f71063          	bne	a4,a5,8000359c <API_Try2Send+0x98>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:275
                SendRaw((unsigned int)&ServicePipe[toSend & 0x0000FFFF].header);
80003560:	fec42703          	lw	a4,-20(s0)
80003564:	000107b7          	lui	a5,0x10
80003568:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
8000356c:	00f77733          	and	a4,a4,a5
80003570:	00070793          	mv	a5,a4
80003574:	00479793          	slli	a5,a5,0x4
80003578:	40e787b3          	sub	a5,a5,a4
8000357c:	00279793          	slli	a5,a5,0x2
80003580:	80020737          	lui	a4,0x80020
80003584:	7fc70713          	addi	a4,a4,2044 # 800207fc <__stack_top+0xfffdea4c>
80003588:	00e787b3          	add	a5,a5,a4
8000358c:	00878793          	addi	a5,a5,8
80003590:	00078513          	mv	a0,a5
80003594:	a59ff0ef          	jal	ra,80002fec <SendRaw>
80003598:	0480006f          	j	800035e0 <API_Try2Send+0xdc>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:277
            }
            else if((toSend & 0xFFFF0000) ==  MESSAGE){
8000359c:	fec42703          	lw	a4,-20(s0)
800035a0:	ffff07b7          	lui	a5,0xffff0
800035a4:	00f77733          	and	a4,a4,a5
800035a8:	202007b7          	lui	a5,0x20200
800035ac:	02f71a63          	bne	a4,a5,800035e0 <API_Try2Send+0xdc>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:278
                SendRaw((unsigned int)&MessagePipe[toSend & 0x0000FFFF].header);
800035b0:	fec42703          	lw	a4,-20(s0)
800035b4:	000107b7          	lui	a5,0x10
800035b8:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
800035bc:	00f77733          	and	a4,a4,a5
800035c0:	24400793          	li	a5,580
800035c4:	02f70733          	mul	a4,a4,a5
800035c8:	800217b7          	lui	a5,0x80021
800035cc:	96078793          	addi	a5,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
800035d0:	00f707b3          	add	a5,a4,a5
800035d4:	00c78793          	addi	a5,a5,12
800035d8:	00078513          	mv	a0,a5
800035dc:	a11ff0ef          	jal	ra,80002fec <SendRaw>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:280
            }
            prints("API_Try2Send success!\n");
800035e0:	800077b7          	lui	a5,0x80007
800035e4:	f7478513          	addi	a0,a5,-140 # 80006f74 <__stack_top+0xfffc51c4>
800035e8:	85dff0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:289
        }
    } else {
        prints("API_Try2Send failed - NI_TX occupied!\n");
    }
    //vPortExitCritical();
    return;
800035ec:	0380006f          	j	80003624 <API_Try2Send+0x120>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:282
            HW_set_32bit_reg(NI_TX, RESET);
800035f0:	000097b7          	lui	a5,0x9
800035f4:	88878593          	addi	a1,a5,-1912 # 8888 <HEAP_SIZE-0x7778>
800035f8:	500007b7          	lui	a5,0x50000
800035fc:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80003600:	971fd0ef          	jal	ra,80000f70 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:283
            prints("API_Try2Send failed - empty SendQueue!\n");
80003604:	800077b7          	lui	a5,0x80007
80003608:	f8c78513          	addi	a0,a5,-116 # 80006f8c <__stack_top+0xfffc51dc>
8000360c:	839ff0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:289
    return;
80003610:	0140006f          	j	80003624 <API_Try2Send+0x120>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:286
        prints("API_Try2Send failed - NI_TX occupied!\n");
80003614:	800077b7          	lui	a5,0x80007
80003618:	fb478513          	addi	a0,a5,-76 # 80006fb4 <__stack_top+0xfffc5204>
8000361c:	829ff0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:289
    return;
80003620:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:290
}
80003624:	01c12083          	lw	ra,28(sp)
80003628:	01812403          	lw	s0,24(sp)
8000362c:	02010113          	addi	sp,sp,32
80003630:	00008067          	ret

80003634 <API_AckTaskAllocation>:
API_AckTaskAllocation():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:292

void API_AckTaskAllocation(unsigned int task_id, unsigned int app_id){
80003634:	fd010113          	addi	sp,sp,-48
80003638:	02112623          	sw	ra,44(sp)
8000363c:	02812423          	sw	s0,40(sp)
80003640:	03010413          	addi	s0,sp,48
80003644:	fca42e23          	sw	a0,-36(s0)
80003648:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:295
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
8000364c:	120030ef          	jal	ra,8000676c <API_GetServiceSlot>
80003650:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:296
        if(mySlot == PIPE_FULL){
80003654:	fec42703          	lw	a4,-20(s0)
80003658:	fdfe07b7          	lui	a5,0xfdfe0
8000365c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e04d>
80003660:	00f71463          	bne	a4,a5,80003668 <API_AckTaskAllocation+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:298
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80003664:	221000ef          	jal	ra,80004084 <API_NI_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:300
        }
    }while(mySlot == PIPE_FULL);
80003668:	fec42703          	lw	a4,-20(s0)
8000366c:	fdfe07b7          	lui	a5,0xfdfe0
80003670:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e04d>
80003674:	fcf70ce3          	beq	a4,a5,8000364c <API_AckTaskAllocation+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:302

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80003678:	800207b7          	lui	a5,0x80020
8000367c:	fec42703          	lw	a4,-20(s0)
80003680:	7fc78693          	addi	a3,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
80003684:	00070793          	mv	a5,a4
80003688:	00479793          	slli	a5,a5,0x4
8000368c:	40e787b3          	sub	a5,a5,a4
80003690:	00279793          	slli	a5,a5,0x2
80003694:	00f687b3          	add	a5,a3,a5
80003698:	feff0737          	lui	a4,0xfeff0
8000369c:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efae14e>
800036a0:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:304

    ServicePipe[mySlot].header.header           = makeAddress(0, 0);
800036a4:	00000593          	li	a1,0
800036a8:	00000513          	li	a0,0
800036ac:	cedff0ef          	jal	ra,80003398 <makeAddress>
800036b0:	00050613          	mv	a2,a0
800036b4:	800207b7          	lui	a5,0x80020
800036b8:	fec42703          	lw	a4,-20(s0)
800036bc:	7fc78693          	addi	a3,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
800036c0:	00070793          	mv	a5,a4
800036c4:	00479793          	slli	a5,a5,0x4
800036c8:	40e787b3          	sub	a5,a5,a4
800036cc:	00279793          	slli	a5,a5,0x2
800036d0:	00f687b3          	add	a5,a3,a5
800036d4:	00c7a423          	sw	a2,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:305
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
800036d8:	800207b7          	lui	a5,0x80020
800036dc:	fec42703          	lw	a4,-20(s0)
800036e0:	7fc78693          	addi	a3,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
800036e4:	00070793          	mv	a5,a4
800036e8:	00479793          	slli	a5,a5,0x4
800036ec:	40e787b3          	sub	a5,a5,a4
800036f0:	00279793          	slli	a5,a5,0x2
800036f4:	00f687b3          	add	a5,a3,a5
800036f8:	00b00713          	li	a4,11
800036fc:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:306
    ServicePipe[mySlot].header.service          = TASK_ALLOCATION_SUCCESS;
80003700:	800207b7          	lui	a5,0x80020
80003704:	fec42703          	lw	a4,-20(s0)
80003708:	7fc78693          	addi	a3,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
8000370c:	00070793          	mv	a5,a4
80003710:	00479793          	slli	a5,a5,0x4
80003714:	40e787b3          	sub	a5,a5,a4
80003718:	00279793          	slli	a5,a5,0x2
8000371c:	00f687b3          	add	a5,a3,a5
80003720:	03500713          	li	a4,53
80003724:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:307
    ServicePipe[mySlot].header.task_id          = task_id;
80003728:	800207b7          	lui	a5,0x80020
8000372c:	fec42703          	lw	a4,-20(s0)
80003730:	7fc78693          	addi	a3,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
80003734:	00070793          	mv	a5,a4
80003738:	00479793          	slli	a5,a5,0x4
8000373c:	40e787b3          	sub	a5,a5,a4
80003740:	00279793          	slli	a5,a5,0x2
80003744:	00f687b3          	add	a5,a3,a5
80003748:	fdc42703          	lw	a4,-36(s0)
8000374c:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:308
    ServicePipe[mySlot].header.task_app_id      = app_id;
80003750:	800207b7          	lui	a5,0x80020
80003754:	fec42703          	lw	a4,-20(s0)
80003758:	7fc78693          	addi	a3,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
8000375c:	00070793          	mv	a5,a4
80003760:	00479793          	slli	a5,a5,0x4
80003764:	40e787b3          	sub	a5,a5,a4
80003768:	00279793          	slli	a5,a5,0x2
8000376c:	00f687b3          	add	a5,a3,a5
80003770:	fd842703          	lw	a4,-40(s0)
80003774:	02e7a223          	sw	a4,36(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:310

    API_PushSendQueue(SERVICE, mySlot);
80003778:	fec42583          	lw	a1,-20(s0)
8000377c:	10100537          	lui	a0,0x10100
80003780:	c59ff0ef          	jal	ra,800033d8 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:311
    return;    
80003784:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:312
}
80003788:	02c12083          	lw	ra,44(sp)
8000378c:	02812403          	lw	s0,40(sp)
80003790:	03010113          	addi	sp,sp,48
80003794:	00008067          	ret

80003798 <API_SendMessage>:
API_SendMessage():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:314

void API_SendMessage(unsigned int addr, unsigned int taskID){
80003798:	fd010113          	addi	sp,sp,-48
8000379c:	02112623          	sw	ra,44(sp)
800037a0:	02812423          	sw	s0,40(sp)
800037a4:	03010413          	addi	s0,sp,48
800037a8:	fca42e23          	sw	a0,-36(s0)
800037ac:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:320
    unsigned int mySlot;
    unsigned int taskSlot;
    unsigned int i;
    Message *theMessage;
    do{
        mySlot = API_GetMessageSlot();
800037b0:	671020ef          	jal	ra,80006620 <API_GetMessageSlot>
800037b4:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:321
        if(mySlot == PIPE_FULL){
800037b8:	fe842703          	lw	a4,-24(s0)
800037bc:	fdfe07b7          	lui	a5,0xfdfe0
800037c0:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e04d>
800037c4:	00f71463          	bne	a4,a5,800037cc <API_SendMessage+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:323
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
800037c8:	0bd000ef          	jal	ra,80004084 <API_NI_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:325
        }
    }while(mySlot == PIPE_FULL);
800037cc:	fe842703          	lw	a4,-24(s0)
800037d0:	fdfe07b7          	lui	a5,0xfdfe0
800037d4:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e04d>
800037d8:	fcf70ce3          	beq	a4,a5,800037b0 <API_SendMessage+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:327
    
    theMessage = addr;
800037dc:	fdc42783          	lw	a5,-36(s0)
800037e0:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:329

    taskSlot = API_GetCurrentTaskSlot();
800037e4:	65c020ef          	jal	ra,80005e40 <API_GetCurrentTaskSlot>
800037e8:	fea42023          	sw	a0,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:330
    printsvsv("Adding a msg to task ", taskID, " in the PIPE slot ", mySlot);
800037ec:	fd842703          	lw	a4,-40(s0)
800037f0:	fe842783          	lw	a5,-24(s0)
800037f4:	00078693          	mv	a3,a5
800037f8:	800077b7          	lui	a5,0x80007
800037fc:	fdc78613          	addi	a2,a5,-36 # 80006fdc <__stack_top+0xfffc522c>
80003800:	00070593          	mv	a1,a4
80003804:	800077b7          	lui	a5,0x80007
80003808:	ff078513          	addi	a0,a5,-16 # 80006ff0 <__stack_top+0xfffc5240>
8000380c:	f2cff0ef          	jal	ra,80002f38 <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:331
    MessagePipe[mySlot].holder = taskSlot;
80003810:	800217b7          	lui	a5,0x80021
80003814:	fe842683          	lw	a3,-24(s0)
80003818:	96078713          	addi	a4,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
8000381c:	24400793          	li	a5,580
80003820:	02f687b3          	mul	a5,a3,a5
80003824:	00f707b3          	add	a5,a4,a5
80003828:	fe042703          	lw	a4,-32(s0)
8000382c:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:333

    MessagePipe[mySlot].header.header           = TaskList[taskSlot].TasksMap[taskID];
80003830:	800226b7          	lui	a3,0x80022
80003834:	fe042703          	lw	a4,-32(s0)
80003838:	00070793          	mv	a5,a4
8000383c:	00579793          	slli	a5,a5,0x5
80003840:	00e787b3          	add	a5,a5,a4
80003844:	fd842703          	lw	a4,-40(s0)
80003848:	00e787b3          	add	a5,a5,a4
8000384c:	01478793          	addi	a5,a5,20
80003850:	a1868713          	addi	a4,a3,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80003854:	00279793          	slli	a5,a5,0x2
80003858:	00f707b3          	add	a5,a4,a5
8000385c:	00c7a703          	lw	a4,12(a5)
80003860:	800217b7          	lui	a5,0x80021
80003864:	fe842603          	lw	a2,-24(s0)
80003868:	96078693          	addi	a3,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
8000386c:	24400793          	li	a5,580
80003870:	02f607b3          	mul	a5,a2,a5
80003874:	00f687b3          	add	a5,a3,a5
80003878:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:334
    MessagePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE + theMessage->length + 1;
8000387c:	fe442783          	lw	a5,-28(s0)
80003880:	0007a783          	lw	a5,0(a5)
80003884:	00c78713          	addi	a4,a5,12
80003888:	800217b7          	lui	a5,0x80021
8000388c:	fe842603          	lw	a2,-24(s0)
80003890:	96078693          	addi	a3,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
80003894:	24400793          	li	a5,580
80003898:	02f607b3          	mul	a5,a2,a5
8000389c:	00f687b3          	add	a5,a3,a5
800038a0:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:335
    MessagePipe[mySlot].header.service          = MESSAGE_DELIVERY;
800038a4:	800217b7          	lui	a5,0x80021
800038a8:	fe842683          	lw	a3,-24(s0)
800038ac:	96078713          	addi	a4,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
800038b0:	24400793          	li	a5,580
800038b4:	02f687b3          	mul	a5,a3,a5
800038b8:	00f707b3          	add	a5,a4,a5
800038bc:	02000713          	li	a4,32
800038c0:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:336
    MessagePipe[mySlot].header.application_id   = TaskList[taskSlot].AppID;
800038c4:	800227b7          	lui	a5,0x80022
800038c8:	fe042703          	lw	a4,-32(s0)
800038cc:	a1878693          	addi	a3,a5,-1512 # 80021a18 <__stack_top+0xfffdfc68>
800038d0:	00070793          	mv	a5,a4
800038d4:	00579793          	slli	a5,a5,0x5
800038d8:	00e787b3          	add	a5,a5,a4
800038dc:	00279793          	slli	a5,a5,0x2
800038e0:	00f687b3          	add	a5,a3,a5
800038e4:	0147a703          	lw	a4,20(a5)
800038e8:	800217b7          	lui	a5,0x80021
800038ec:	fe842603          	lw	a2,-24(s0)
800038f0:	96078693          	addi	a3,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
800038f4:	24400793          	li	a5,580
800038f8:	02f607b3          	mul	a5,a2,a5
800038fc:	00f687b3          	add	a5,a3,a5
80003900:	00e7ac23          	sw	a4,24(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:337
    MessagePipe[mySlot].header.producer_task    = TaskList[taskSlot].TaskID;
80003904:	800226b7          	lui	a3,0x80022
80003908:	fe042703          	lw	a4,-32(s0)
8000390c:	00070793          	mv	a5,a4
80003910:	00579793          	slli	a5,a5,0x5
80003914:	00e787b3          	add	a5,a5,a4
80003918:	00279793          	slli	a5,a5,0x2
8000391c:	a1868713          	addi	a4,a3,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80003920:	00e787b3          	add	a5,a5,a4
80003924:	0107a703          	lw	a4,16(a5)
80003928:	800217b7          	lui	a5,0x80021
8000392c:	fe842603          	lw	a2,-24(s0)
80003930:	96078693          	addi	a3,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
80003934:	24400793          	li	a5,580
80003938:	02f607b3          	mul	a5,a2,a5
8000393c:	00f687b3          	add	a5,a3,a5
80003940:	00e7ae23          	sw	a4,28(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:338
    MessagePipe[mySlot].header.destination_task = taskID;
80003944:	800217b7          	lui	a5,0x80021
80003948:	fe842683          	lw	a3,-24(s0)
8000394c:	96078713          	addi	a4,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
80003950:	24400793          	li	a5,580
80003954:	02f687b3          	mul	a5,a3,a5
80003958:	00f707b3          	add	a5,a4,a5
8000395c:	fd842703          	lw	a4,-40(s0)
80003960:	02e7a023          	sw	a4,32(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:339
    MessagePipe[mySlot].msg.length              = theMessage->length;
80003964:	fe442783          	lw	a5,-28(s0)
80003968:	0007a703          	lw	a4,0(a5)
8000396c:	800217b7          	lui	a5,0x80021
80003970:	fe842603          	lw	a2,-24(s0)
80003974:	24400693          	li	a3,580
80003978:	02d606b3          	mul	a3,a2,a3
8000397c:	96078793          	addi	a5,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
80003980:	00f687b3          	add	a5,a3,a5
80003984:	04e7a023          	sw	a4,64(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:340
    for (i = 0; i < theMessage->length; i++){
80003988:	fe042623          	sw	zero,-20(s0)
8000398c:	05c0006f          	j	800039e8 <API_SendMessage+0x250>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:341 (discriminator 3)
        MessagePipe[mySlot].msg.msg[i]          = theMessage->msg[i];
80003990:	fe442703          	lw	a4,-28(s0)
80003994:	fec42783          	lw	a5,-20(s0)
80003998:	00279793          	slli	a5,a5,0x2
8000399c:	00f707b3          	add	a5,a4,a5
800039a0:	0047a683          	lw	a3,4(a5)
800039a4:	80021637          	lui	a2,0x80021
800039a8:	fe842703          	lw	a4,-24(s0)
800039ac:	00070793          	mv	a5,a4
800039b0:	00379793          	slli	a5,a5,0x3
800039b4:	00e787b3          	add	a5,a5,a4
800039b8:	00479793          	slli	a5,a5,0x4
800039bc:	00e787b3          	add	a5,a5,a4
800039c0:	fec42703          	lw	a4,-20(s0)
800039c4:	00e787b3          	add	a5,a5,a4
800039c8:	01078793          	addi	a5,a5,16
800039cc:	96060713          	addi	a4,a2,-1696 # 80020960 <__stack_top+0xfffdebb0>
800039d0:	00279793          	slli	a5,a5,0x2
800039d4:	00f707b3          	add	a5,a4,a5
800039d8:	00d7a223          	sw	a3,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:340 (discriminator 3)
    for (i = 0; i < theMessage->length; i++){
800039dc:	fec42783          	lw	a5,-20(s0)
800039e0:	00178793          	addi	a5,a5,1
800039e4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:340 (discriminator 1)
800039e8:	fe442783          	lw	a5,-28(s0)
800039ec:	0007a783          	lw	a5,0(a5)
800039f0:	fec42703          	lw	a4,-20(s0)
800039f4:	f8f76ee3          	bltu	a4,a5,80003990 <API_SendMessage+0x1f8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:344
    }
    
    if (TaskList[taskSlot].PendingReq[taskID] == TRUE){
800039f8:	800226b7          	lui	a3,0x80022
800039fc:	fe042703          	lw	a4,-32(s0)
80003a00:	00070793          	mv	a5,a4
80003a04:	00579793          	slli	a5,a5,0x5
80003a08:	00e787b3          	add	a5,a5,a4
80003a0c:	fd842703          	lw	a4,-40(s0)
80003a10:	00e787b3          	add	a5,a5,a4
80003a14:	00c78793          	addi	a5,a5,12
80003a18:	00279713          	slli	a4,a5,0x2
80003a1c:	a1868793          	addi	a5,a3,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80003a20:	00f707b3          	add	a5,a4,a5
80003a24:	0007a703          	lw	a4,0(a5)
80003a28:	00100793          	li	a5,1
80003a2c:	04f71863          	bne	a4,a5,80003a7c <API_SendMessage+0x2e4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:345
        prints(">>>>>Achei aqui no pending!\n");
80003a30:	800077b7          	lui	a5,0x80007
80003a34:	00878513          	addi	a0,a5,8 # 80007008 <__stack_top+0xfffc5258>
80003a38:	c0cff0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:346
        API_PushSendQueue(MESSAGE, mySlot);
80003a3c:	fe842583          	lw	a1,-24(s0)
80003a40:	20200537          	lui	a0,0x20200
80003a44:	995ff0ef          	jal	ra,800033d8 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:347
        TaskList[taskSlot].PendingReq[taskID] = FALSE;
80003a48:	800226b7          	lui	a3,0x80022
80003a4c:	fe042703          	lw	a4,-32(s0)
80003a50:	00070793          	mv	a5,a4
80003a54:	00579793          	slli	a5,a5,0x5
80003a58:	00e787b3          	add	a5,a5,a4
80003a5c:	fd842703          	lw	a4,-40(s0)
80003a60:	00e787b3          	add	a5,a5,a4
80003a64:	00c78793          	addi	a5,a5,12
80003a68:	00279713          	slli	a4,a5,0x2
80003a6c:	a1868793          	addi	a5,a3,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80003a70:	00f707b3          	add	a5,a4,a5
80003a74:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:349
    }
    return;
80003a78:	00000013          	nop
80003a7c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:350
}
80003a80:	02c12083          	lw	ra,44(sp)
80003a84:	02812403          	lw	s0,40(sp)
80003a88:	03010113          	addi	sp,sp,48
80003a8c:	00008067          	ret

80003a90 <API_SendFinishTask>:
API_SendFinishTask():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:352

void API_SendFinishTask(unsigned int task_id, unsigned int app_id){
80003a90:	fd010113          	addi	sp,sp,-48
80003a94:	02112623          	sw	ra,44(sp)
80003a98:	02812423          	sw	s0,40(sp)
80003a9c:	03010413          	addi	s0,sp,48
80003aa0:	fca42e23          	sw	a0,-36(s0)
80003aa4:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:355
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80003aa8:	4c5020ef          	jal	ra,8000676c <API_GetServiceSlot>
80003aac:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:356
        if(mySlot == PIPE_FULL){
80003ab0:	fec42703          	lw	a4,-20(s0)
80003ab4:	fdfe07b7          	lui	a5,0xfdfe0
80003ab8:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e04d>
80003abc:	00f71463          	bne	a4,a5,80003ac4 <API_SendFinishTask+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:358
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80003ac0:	5c4000ef          	jal	ra,80004084 <API_NI_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:360
        }
    }while(mySlot == PIPE_FULL);
80003ac4:	fec42703          	lw	a4,-20(s0)
80003ac8:	fdfe07b7          	lui	a5,0xfdfe0
80003acc:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e04d>
80003ad0:	fcf70ce3          	beq	a4,a5,80003aa8 <API_SendFinishTask+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:362

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80003ad4:	800207b7          	lui	a5,0x80020
80003ad8:	fec42703          	lw	a4,-20(s0)
80003adc:	7fc78693          	addi	a3,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
80003ae0:	00070793          	mv	a5,a4
80003ae4:	00479793          	slli	a5,a5,0x4
80003ae8:	40e787b3          	sub	a5,a5,a4
80003aec:	00279793          	slli	a5,a5,0x2
80003af0:	00f687b3          	add	a5,a3,a5
80003af4:	feff0737          	lui	a4,0xfeff0
80003af8:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efae14e>
80003afc:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:364

    ServicePipe[mySlot].header.header           = makeAddress(0, 0);
80003b00:	00000593          	li	a1,0
80003b04:	00000513          	li	a0,0
80003b08:	891ff0ef          	jal	ra,80003398 <makeAddress>
80003b0c:	00050613          	mv	a2,a0
80003b10:	800207b7          	lui	a5,0x80020
80003b14:	fec42703          	lw	a4,-20(s0)
80003b18:	7fc78693          	addi	a3,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
80003b1c:	00070793          	mv	a5,a4
80003b20:	00479793          	slli	a5,a5,0x4
80003b24:	40e787b3          	sub	a5,a5,a4
80003b28:	00279793          	slli	a5,a5,0x2
80003b2c:	00f687b3          	add	a5,a3,a5
80003b30:	00c7a423          	sw	a2,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:365
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80003b34:	800207b7          	lui	a5,0x80020
80003b38:	fec42703          	lw	a4,-20(s0)
80003b3c:	7fc78693          	addi	a3,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
80003b40:	00070793          	mv	a5,a4
80003b44:	00479793          	slli	a5,a5,0x4
80003b48:	40e787b3          	sub	a5,a5,a4
80003b4c:	00279793          	slli	a5,a5,0x2
80003b50:	00f687b3          	add	a5,a3,a5
80003b54:	00b00713          	li	a4,11
80003b58:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:366
    ServicePipe[mySlot].header.service          = TASK_FINISH;
80003b5c:	800207b7          	lui	a5,0x80020
80003b60:	fec42703          	lw	a4,-20(s0)
80003b64:	7fc78693          	addi	a3,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
80003b68:	00070793          	mv	a5,a4
80003b6c:	00479793          	slli	a5,a5,0x4
80003b70:	40e787b3          	sub	a5,a5,a4
80003b74:	00279793          	slli	a5,a5,0x2
80003b78:	00f687b3          	add	a5,a3,a5
80003b7c:	50000713          	li	a4,1280
80003b80:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:367
    ServicePipe[mySlot].header.task_id          = task_id;
80003b84:	800207b7          	lui	a5,0x80020
80003b88:	fec42703          	lw	a4,-20(s0)
80003b8c:	7fc78693          	addi	a3,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
80003b90:	00070793          	mv	a5,a4
80003b94:	00479793          	slli	a5,a5,0x4
80003b98:	40e787b3          	sub	a5,a5,a4
80003b9c:	00279793          	slli	a5,a5,0x2
80003ba0:	00f687b3          	add	a5,a3,a5
80003ba4:	fdc42703          	lw	a4,-36(s0)
80003ba8:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:368
    ServicePipe[mySlot].header.task_app_id      = app_id;
80003bac:	800207b7          	lui	a5,0x80020
80003bb0:	fec42703          	lw	a4,-20(s0)
80003bb4:	7fc78693          	addi	a3,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
80003bb8:	00070793          	mv	a5,a4
80003bbc:	00479793          	slli	a5,a5,0x4
80003bc0:	40e787b3          	sub	a5,a5,a4
80003bc4:	00279793          	slli	a5,a5,0x2
80003bc8:	00f687b3          	add	a5,a3,a5
80003bcc:	fd842703          	lw	a4,-40(s0)
80003bd0:	02e7a223          	sw	a4,36(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:369
    ServicePipe[mySlot].header.task_dest_addr   = ProcessorAddr;
80003bd4:	800227b7          	lui	a5,0x80022
80003bd8:	dac7a683          	lw	a3,-596(a5) # 80021dac <__stack_top+0xfffdfffc>
80003bdc:	800207b7          	lui	a5,0x80020
80003be0:	fec42703          	lw	a4,-20(s0)
80003be4:	7fc78613          	addi	a2,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
80003be8:	00070793          	mv	a5,a4
80003bec:	00479793          	slli	a5,a5,0x4
80003bf0:	40e787b3          	sub	a5,a5,a4
80003bf4:	00279793          	slli	a5,a5,0x2
80003bf8:	00f607b3          	add	a5,a2,a5
80003bfc:	02d7ac23          	sw	a3,56(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:370
    API_PushSendQueue(SERVICE, mySlot);
80003c00:	fec42583          	lw	a1,-20(s0)
80003c04:	10100537          	lui	a0,0x10100
80003c08:	fd0ff0ef          	jal	ra,800033d8 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:371
    return;    
80003c0c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:372
}
80003c10:	02c12083          	lw	ra,44(sp)
80003c14:	02812403          	lw	s0,40(sp)
80003c18:	03010113          	addi	sp,sp,48
80003c1c:	00008067          	ret

80003c20 <API_SendMessageReq>:
API_SendMessageReq():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:374

void API_SendMessageReq(unsigned int addr, unsigned int taskID){
80003c20:	fd010113          	addi	sp,sp,-48
80003c24:	02112623          	sw	ra,44(sp)
80003c28:	02812423          	sw	s0,40(sp)
80003c2c:	03010413          	addi	s0,sp,48
80003c30:	fca42e23          	sw	a0,-36(s0)
80003c34:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:379
    unsigned int taskSlot;
    unsigned int mySlot;

    // Update task info
    taskSlot = API_GetCurrentTaskSlot();
80003c38:	208020ef          	jal	ra,80005e40 <API_GetCurrentTaskSlot>
80003c3c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:380
    TaskList[taskSlot].waitingMsg = TRUE;
80003c40:	800227b7          	lui	a5,0x80022
80003c44:	fec42703          	lw	a4,-20(s0)
80003c48:	a1878693          	addi	a3,a5,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80003c4c:	00070793          	mv	a5,a4
80003c50:	00579793          	slli	a5,a5,0x5
80003c54:	00e787b3          	add	a5,a5,a4
80003c58:	00279793          	slli	a5,a5,0x2
80003c5c:	00f687b3          	add	a5,a3,a5
80003c60:	00100713          	li	a4,1
80003c64:	00e7ae23          	sw	a4,28(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:381
    TaskList[taskSlot].MsgToReceive = addr;
80003c68:	800226b7          	lui	a3,0x80022
80003c6c:	fec42703          	lw	a4,-20(s0)
80003c70:	00070793          	mv	a5,a4
80003c74:	00579793          	slli	a5,a5,0x5
80003c78:	00e787b3          	add	a5,a5,a4
80003c7c:	00279793          	slli	a5,a5,0x2
80003c80:	a1868713          	addi	a4,a3,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80003c84:	00e787b3          	add	a5,a5,a4
80003c88:	fdc42703          	lw	a4,-36(s0)
80003c8c:	02e7a023          	sw	a4,32(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:386
    //printsv("API_SendMessageReq addr: ", addr);

    // Sends the message request
    do{
        mySlot = API_GetServiceSlot();
80003c90:	2dd020ef          	jal	ra,8000676c <API_GetServiceSlot>
80003c94:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:387
        if(mySlot == PIPE_FULL){
80003c98:	fe842703          	lw	a4,-24(s0)
80003c9c:	fdfe07b7          	lui	a5,0xfdfe0
80003ca0:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e04d>
80003ca4:	00f71463          	bne	a4,a5,80003cac <API_SendMessageReq+0x8c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:389
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80003ca8:	3dc000ef          	jal	ra,80004084 <API_NI_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:391
        }
    }while(mySlot == PIPE_FULL);
80003cac:	fe842703          	lw	a4,-24(s0)
80003cb0:	fdfe07b7          	lui	a5,0xfdfe0
80003cb4:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e04d>
80003cb8:	fcf70ce3          	beq	a4,a5,80003c90 <API_SendMessageReq+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:393

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80003cbc:	800207b7          	lui	a5,0x80020
80003cc0:	fe842703          	lw	a4,-24(s0)
80003cc4:	7fc78693          	addi	a3,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
80003cc8:	00070793          	mv	a5,a4
80003ccc:	00479793          	slli	a5,a5,0x4
80003cd0:	40e787b3          	sub	a5,a5,a4
80003cd4:	00279793          	slli	a5,a5,0x2
80003cd8:	00f687b3          	add	a5,a3,a5
80003cdc:	feff0737          	lui	a4,0xfeff0
80003ce0:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efae14e>
80003ce4:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:395

    ServicePipe[mySlot].header.header           = TaskList[taskSlot].TasksMap[taskID];
80003ce8:	800226b7          	lui	a3,0x80022
80003cec:	fec42703          	lw	a4,-20(s0)
80003cf0:	00070793          	mv	a5,a4
80003cf4:	00579793          	slli	a5,a5,0x5
80003cf8:	00e787b3          	add	a5,a5,a4
80003cfc:	fd842703          	lw	a4,-40(s0)
80003d00:	00e787b3          	add	a5,a5,a4
80003d04:	01478793          	addi	a5,a5,20
80003d08:	a1868713          	addi	a4,a3,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80003d0c:	00279793          	slli	a5,a5,0x2
80003d10:	00f707b3          	add	a5,a4,a5
80003d14:	00c7a683          	lw	a3,12(a5)
80003d18:	800207b7          	lui	a5,0x80020
80003d1c:	fe842703          	lw	a4,-24(s0)
80003d20:	7fc78613          	addi	a2,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
80003d24:	00070793          	mv	a5,a4
80003d28:	00479793          	slli	a5,a5,0x4
80003d2c:	40e787b3          	sub	a5,a5,a4
80003d30:	00279793          	slli	a5,a5,0x2
80003d34:	00f607b3          	add	a5,a2,a5
80003d38:	00d7a423          	sw	a3,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:396
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80003d3c:	800207b7          	lui	a5,0x80020
80003d40:	fe842703          	lw	a4,-24(s0)
80003d44:	7fc78693          	addi	a3,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
80003d48:	00070793          	mv	a5,a4
80003d4c:	00479793          	slli	a5,a5,0x4
80003d50:	40e787b3          	sub	a5,a5,a4
80003d54:	00279793          	slli	a5,a5,0x2
80003d58:	00f687b3          	add	a5,a3,a5
80003d5c:	00b00713          	li	a4,11
80003d60:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:397
    ServicePipe[mySlot].header.service          = MESSAGE_REQUEST;
80003d64:	800207b7          	lui	a5,0x80020
80003d68:	fe842703          	lw	a4,-24(s0)
80003d6c:	7fc78693          	addi	a3,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
80003d70:	00070793          	mv	a5,a4
80003d74:	00479793          	slli	a5,a5,0x4
80003d78:	40e787b3          	sub	a5,a5,a4
80003d7c:	00279793          	slli	a5,a5,0x2
80003d80:	00f687b3          	add	a5,a3,a5
80003d84:	01000713          	li	a4,16
80003d88:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:398
    ServicePipe[mySlot].header.task_id          = TaskList[taskSlot].TaskID;
80003d8c:	800226b7          	lui	a3,0x80022
80003d90:	fec42703          	lw	a4,-20(s0)
80003d94:	00070793          	mv	a5,a4
80003d98:	00579793          	slli	a5,a5,0x5
80003d9c:	00e787b3          	add	a5,a5,a4
80003da0:	00279793          	slli	a5,a5,0x2
80003da4:	a1868713          	addi	a4,a3,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80003da8:	00e787b3          	add	a5,a5,a4
80003dac:	0107a683          	lw	a3,16(a5)
80003db0:	800207b7          	lui	a5,0x80020
80003db4:	fe842703          	lw	a4,-24(s0)
80003db8:	7fc78613          	addi	a2,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
80003dbc:	00070793          	mv	a5,a4
80003dc0:	00479793          	slli	a5,a5,0x4
80003dc4:	40e787b3          	sub	a5,a5,a4
80003dc8:	00279793          	slli	a5,a5,0x2
80003dcc:	00f607b3          	add	a5,a2,a5
80003dd0:	00d7aa23          	sw	a3,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:399
    ServicePipe[mySlot].header.task_app_id      = TaskList[taskSlot].AppID;
80003dd4:	800227b7          	lui	a5,0x80022
80003dd8:	fec42703          	lw	a4,-20(s0)
80003ddc:	a1878693          	addi	a3,a5,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80003de0:	00070793          	mv	a5,a4
80003de4:	00579793          	slli	a5,a5,0x5
80003de8:	00e787b3          	add	a5,a5,a4
80003dec:	00279793          	slli	a5,a5,0x2
80003df0:	00f687b3          	add	a5,a3,a5
80003df4:	0147a683          	lw	a3,20(a5)
80003df8:	800207b7          	lui	a5,0x80020
80003dfc:	fe842703          	lw	a4,-24(s0)
80003e00:	7fc78613          	addi	a2,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
80003e04:	00070793          	mv	a5,a4
80003e08:	00479793          	slli	a5,a5,0x4
80003e0c:	40e787b3          	sub	a5,a5,a4
80003e10:	00279793          	slli	a5,a5,0x2
80003e14:	00f607b3          	add	a5,a2,a5
80003e18:	02d7a223          	sw	a3,36(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:400
    ServicePipe[mySlot].header.producer_task_id = taskID;
80003e1c:	800207b7          	lui	a5,0x80020
80003e20:	fe842703          	lw	a4,-24(s0)
80003e24:	7fc78693          	addi	a3,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
80003e28:	00070793          	mv	a5,a4
80003e2c:	00479793          	slli	a5,a5,0x4
80003e30:	40e787b3          	sub	a5,a5,a4
80003e34:	00279793          	slli	a5,a5,0x2
80003e38:	00f687b3          	add	a5,a3,a5
80003e3c:	fd842703          	lw	a4,-40(s0)
80003e40:	00e7ae23          	sw	a4,28(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:402

    API_PushSendQueue(SERVICE, mySlot);
80003e44:	fe842583          	lw	a1,-24(s0)
80003e48:	10100537          	lui	a0,0x10100
80003e4c:	d8cff0ef          	jal	ra,800033d8 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:404

    prints("Esperando Mensagem!\n");
80003e50:	800077b7          	lui	a5,0x80007
80003e54:	02878513          	addi	a0,a5,40 # 80007028 <__stack_top+0xfffc5278>
80003e58:	fedfe0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:406
    // Bloquear a tarefa!
    while(TaskList[taskSlot].waitingMsg == TRUE){ 
80003e5c:	02c0006f          	j	80003e88 <API_SendMessageReq+0x268>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:407
        printsvsv("taskslot ", taskSlot, " esperando mensagem ", 0);
80003e60:	fec42703          	lw	a4,-20(s0)
80003e64:	00000693          	li	a3,0
80003e68:	800077b7          	lui	a5,0x80007
80003e6c:	04078613          	addi	a2,a5,64 # 80007040 <__stack_top+0xfffc5290>
80003e70:	00070593          	mv	a1,a4
80003e74:	800077b7          	lui	a5,0x80007
80003e78:	05878513          	addi	a0,a5,88 # 80007058 <__stack_top+0xfffc52a8>
80003e7c:	8bcff0ef          	jal	ra,80002f38 <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:408
        vTaskDelay(1); 
80003e80:	00100513          	li	a0,1
80003e84:	b68fe0ef          	jal	ra,800021ec <vTaskDelay>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:406
    while(TaskList[taskSlot].waitingMsg == TRUE){ 
80003e88:	800227b7          	lui	a5,0x80022
80003e8c:	fec42703          	lw	a4,-20(s0)
80003e90:	a1878693          	addi	a3,a5,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80003e94:	00070793          	mv	a5,a4
80003e98:	00579793          	slli	a5,a5,0x5
80003e9c:	00e787b3          	add	a5,a5,a4
80003ea0:	00279793          	slli	a5,a5,0x2
80003ea4:	00f687b3          	add	a5,a3,a5
80003ea8:	01c7a703          	lw	a4,28(a5)
80003eac:	00100793          	li	a5,1
80003eb0:	faf708e3          	beq	a4,a5,80003e60 <API_SendMessageReq+0x240>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:410
    }
    prints("Mensagem Recebida!\n");
80003eb4:	800077b7          	lui	a5,0x80007
80003eb8:	06478513          	addi	a0,a5,100 # 80007064 <__stack_top+0xfffc52b4>
80003ebc:	f89fe0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:411
    return;
80003ec0:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:412
}
80003ec4:	02c12083          	lw	ra,44(sp)
80003ec8:	02812403          	lw	s0,40(sp)
80003ecc:	03010113          	addi	sp,sp,48
80003ed0:	00008067          	ret

80003ed4 <API_CheckMessagePipe>:
API_CheckMessagePipe():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:414

unsigned int API_CheckMessagePipe(unsigned int requester_task_id, unsigned int task_app_id){
80003ed4:	fd010113          	addi	sp,sp,-48
80003ed8:	02812623          	sw	s0,44(sp)
80003edc:	03010413          	addi	s0,sp,48
80003ee0:	fca42e23          	sw	a0,-36(s0)
80003ee4:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:416
    unsigned int i;
    unsigned int sel = ERRO;
80003ee8:	fff00793          	li	a5,-1
80003eec:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:417
    unsigned int smallID = 268435455;
80003ef0:	100007b7          	lui	a5,0x10000
80003ef4:	fff78793          	addi	a5,a5,-1 # fffffff <RAM_SIZE+0xff7ffff>
80003ef8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:418
    for (i = 0; i < PIPE_SIZE; i++){
80003efc:	fe042623          	sw	zero,-20(s0)
80003f00:	0c80006f          	j	80003fc8 <API_CheckMessagePipe+0xf4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:419
        if(MessagePipe[i].status == PIPE_OCCUPIED){
80003f04:	800217b7          	lui	a5,0x80021
80003f08:	fec42683          	lw	a3,-20(s0)
80003f0c:	24400713          	li	a4,580
80003f10:	02e68733          	mul	a4,a3,a4
80003f14:	96078793          	addi	a5,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
80003f18:	00f707b3          	add	a5,a4,a5
80003f1c:	0007a703          	lw	a4,0(a5)
80003f20:	00100793          	li	a5,1
80003f24:	08f71c63          	bne	a4,a5,80003fbc <API_CheckMessagePipe+0xe8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:420
            if(MessagePipe[i].header.application_id == task_app_id){
80003f28:	800217b7          	lui	a5,0x80021
80003f2c:	fec42683          	lw	a3,-20(s0)
80003f30:	96078713          	addi	a4,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
80003f34:	24400793          	li	a5,580
80003f38:	02f687b3          	mul	a5,a3,a5
80003f3c:	00f707b3          	add	a5,a4,a5
80003f40:	0187a783          	lw	a5,24(a5)
80003f44:	fd842703          	lw	a4,-40(s0)
80003f48:	06f71a63          	bne	a4,a5,80003fbc <API_CheckMessagePipe+0xe8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:421
                if(MessagePipe[i].header.destination_task == requester_task_id){
80003f4c:	800217b7          	lui	a5,0x80021
80003f50:	fec42683          	lw	a3,-20(s0)
80003f54:	96078713          	addi	a4,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
80003f58:	24400793          	li	a5,580
80003f5c:	02f687b3          	mul	a5,a3,a5
80003f60:	00f707b3          	add	a5,a4,a5
80003f64:	0207a783          	lw	a5,32(a5)
80003f68:	fdc42703          	lw	a4,-36(s0)
80003f6c:	04f71863          	bne	a4,a5,80003fbc <API_CheckMessagePipe+0xe8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:422
                    if(MessagePipe[i].msgID < smallID){
80003f70:	800217b7          	lui	a5,0x80021
80003f74:	fec42683          	lw	a3,-20(s0)
80003f78:	96078713          	addi	a4,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
80003f7c:	24400793          	li	a5,580
80003f80:	02f687b3          	mul	a5,a3,a5
80003f84:	00f707b3          	add	a5,a4,a5
80003f88:	0087a783          	lw	a5,8(a5)
80003f8c:	fe442703          	lw	a4,-28(s0)
80003f90:	02e7f663          	bleu	a4,a5,80003fbc <API_CheckMessagePipe+0xe8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:423
                        smallID = MessagePipe[i].msgID;
80003f94:	800217b7          	lui	a5,0x80021
80003f98:	fec42683          	lw	a3,-20(s0)
80003f9c:	96078713          	addi	a4,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
80003fa0:	24400793          	li	a5,580
80003fa4:	02f687b3          	mul	a5,a3,a5
80003fa8:	00f707b3          	add	a5,a4,a5
80003fac:	0087a783          	lw	a5,8(a5)
80003fb0:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:424
                        sel = i;
80003fb4:	fec42783          	lw	a5,-20(s0)
80003fb8:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:418 (discriminator 2)
    for (i = 0; i < PIPE_SIZE; i++){
80003fbc:	fec42783          	lw	a5,-20(s0)
80003fc0:	00178793          	addi	a5,a5,1
80003fc4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:418 (discriminator 1)
80003fc8:	fec42703          	lw	a4,-20(s0)
80003fcc:	00300793          	li	a5,3
80003fd0:	f2e7fae3          	bleu	a4,a5,80003f04 <API_CheckMessagePipe+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:430
                    }
                }
            }
        }
    }
    if(sel != ERRO){
80003fd4:	fe842703          	lw	a4,-24(s0)
80003fd8:	fff00793          	li	a5,-1
80003fdc:	02f70063          	beq	a4,a5,80003ffc <API_CheckMessagePipe+0x128>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:431
        MessagePipe[sel].status == PIPE_TRANSMITTING;
80003fe0:	800217b7          	lui	a5,0x80021
80003fe4:	fe842683          	lw	a3,-24(s0)
80003fe8:	24400713          	li	a4,580
80003fec:	02e68733          	mul	a4,a3,a4
80003ff0:	96078793          	addi	a5,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
80003ff4:	00f707b3          	add	a5,a4,a5
80003ff8:	0007a783          	lw	a5,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:434
    }
    //printsv("returning sel: ", sel);
    return sel;
80003ffc:	fe842783          	lw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:435
}
80004000:	00078513          	mv	a0,a5
80004004:	02c12403          	lw	s0,44(sp)
80004008:	03010113          	addi	sp,sp,48
8000400c:	00008067          	ret

80004010 <API_AddPendingReq>:
API_AddPendingReq():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:437

void API_AddPendingReq(unsigned int requester_task_id, unsigned int task_app_id, unsigned int producer_task_id){
80004010:	fd010113          	addi	sp,sp,-48
80004014:	02112623          	sw	ra,44(sp)
80004018:	02812423          	sw	s0,40(sp)
8000401c:	03010413          	addi	s0,sp,48
80004020:	fca42e23          	sw	a0,-36(s0)
80004024:	fcb42c23          	sw	a1,-40(s0)
80004028:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:438
    unsigned int slot = API_GetTaskSlot(producer_task_id, task_app_id);
8000402c:	fd842583          	lw	a1,-40(s0)
80004030:	fd442503          	lw	a0,-44(s0)
80004034:	1fc020ef          	jal	ra,80006230 <API_GetTaskSlot>
80004038:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:439
    TaskList[slot].PendingReq[requester_task_id] = TRUE;
8000403c:	800226b7          	lui	a3,0x80022
80004040:	fec42703          	lw	a4,-20(s0)
80004044:	00070793          	mv	a5,a4
80004048:	00579793          	slli	a5,a5,0x5
8000404c:	00e787b3          	add	a5,a5,a4
80004050:	fdc42703          	lw	a4,-36(s0)
80004054:	00e787b3          	add	a5,a5,a4
80004058:	00c78793          	addi	a5,a5,12
8000405c:	00279713          	slli	a4,a5,0x2
80004060:	a1868793          	addi	a5,a3,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80004064:	00f707b3          	add	a5,a4,a5
80004068:	00100713          	li	a4,1
8000406c:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:440
    return;
80004070:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:441
}
80004074:	02c12083          	lw	ra,44(sp)
80004078:	02812403          	lw	s0,40(sp)
8000407c:	03010113          	addi	sp,sp,48
80004080:	00008067          	ret

80004084 <API_NI_Handler>:
API_NI_Handler():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:444


unsigned int API_NI_Handler(){
80004084:	fe010113          	addi	sp,sp,-32
80004088:	00112e23          	sw	ra,28(sp)
8000408c:	00812c23          	sw	s0,24(sp)
80004090:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:447
    unsigned int aux;
    unsigned int service;
    unsigned int count = 0;
80004094:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:451
    do{
        //HW_set_32bit_reg(NI_RX, INTERRUPTION_ACK);

        if (HW_get_32bit_reg(NI_TX) == NI_STATUS_INTER){
80004098:	500007b7          	lui	a5,0x50000
8000409c:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
800040a0:	ed9fc0ef          	jal	ra,80000f78 <HW_get_32bit_reg>
800040a4:	00050713          	mv	a4,a0
800040a8:	000017b7          	lui	a5,0x1
800040ac:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
800040b0:	04f71863          	bne	a4,a5,80004100 <API_NI_Handler+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:452
            printsv("TX interruption catched - ", NI_IRCount);
800040b4:	800227b7          	lui	a5,0x80022
800040b8:	d307a783          	lw	a5,-720(a5) # 80021d30 <__stack_top+0xfffdff80>
800040bc:	00078593          	mv	a1,a5
800040c0:	800077b7          	lui	a5,0x80007
800040c4:	07878513          	addi	a0,a5,120 # 80007078 <__stack_top+0xfffc52c8>
800040c8:	e29fe0ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:453
            API_ClearPipeSlot(SendingSlot); // clear the pipe slot that was transmitted
800040cc:	800207b7          	lui	a5,0x80020
800040d0:	7f87a783          	lw	a5,2040(a5) # 800207f8 <__stack_top+0xfffdea48>
800040d4:	00078513          	mv	a0,a5
800040d8:	734020ef          	jal	ra,8000680c <API_ClearPipeSlot>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:454
            HW_set_32bit_reg(NI_TX, DONE);  // releases the interruption
800040dc:	000057b7          	lui	a5,0x5
800040e0:	55578593          	addi	a1,a5,1365 # 5555 <HEAP_SIZE-0xaaab>
800040e4:	500007b7          	lui	a5,0x50000
800040e8:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
800040ec:	e85fc0ef          	jal	ra,80000f70 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:455
            API_Try2Send();                 // tries to send another packet (if available)
800040f0:	c14ff0ef          	jal	ra,80003504 <API_Try2Send>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:456
            count++;
800040f4:	fec42783          	lw	a5,-20(s0)
800040f8:	00178793          	addi	a5,a5,1
800040fc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:458
        }
        if(HW_get_32bit_reg(NI_RX) == NI_STATUS_INTER || HW_get_32bit_reg(NI_RX) == NI_STATUS_WAITING) {
80004100:	500007b7          	lui	a5,0x50000
80004104:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80004108:	e71fc0ef          	jal	ra,80000f78 <HW_get_32bit_reg>
8000410c:	00050713          	mv	a4,a0
80004110:	000017b7          	lui	a5,0x1
80004114:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
80004118:	00f70e63          	beq	a4,a5,80004134 <API_NI_Handler+0xb0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:458 (discriminator 1)
8000411c:	500007b7          	lui	a5,0x50000
80004120:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80004124:	e55fc0ef          	jal	ra,80000f78 <HW_get_32bit_reg>
80004128:	00050713          	mv	a4,a0
8000412c:	02200793          	li	a5,34
80004130:	62f71263          	bne	a4,a5,80004754 <API_NI_Handler+0x6d0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:459
            printsv("RX interruption catched - ", NI_IRCount);
80004134:	800227b7          	lui	a5,0x80022
80004138:	d307a783          	lw	a5,-720(a5) # 80021d30 <__stack_top+0xfffdff80>
8000413c:	00078593          	mv	a1,a5
80004140:	800077b7          	lui	a5,0x80007
80004144:	09478513          	addi	a0,a5,148 # 80007094 <__stack_top+0xfffc52e4>
80004148:	da9fe0ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:460
            service = incommingPacket.service;
8000414c:	800217b7          	lui	a5,0x80021
80004150:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
80004154:	0087a783          	lw	a5,8(a5)
80004158:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:461
            incommingPacket.service = SOLVED;
8000415c:	800217b7          	lui	a5,0x80021
80004160:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
80004164:	00010737          	lui	a4,0x10
80004168:	fff70713          	addi	a4,a4,-1 # ffff <HEAP_SIZE-0x1>
8000416c:	00e7a423          	sw	a4,8(a5)
80004170:	fe842703          	lw	a4,-24(s0)
80004174:	03500793          	li	a5,53
80004178:	2af70063          	beq	a4,a5,80004418 <API_NI_Handler+0x394>
8000417c:	fe842703          	lw	a4,-24(s0)
80004180:	03500793          	li	a5,53
80004184:	04e7ea63          	bltu	a5,a4,800041d8 <API_NI_Handler+0x154>
80004188:	fe842703          	lw	a4,-24(s0)
8000418c:	02100793          	li	a5,33
80004190:	52f70863          	beq	a4,a5,800046c0 <API_NI_Handler+0x63c>
80004194:	fe842703          	lw	a4,-24(s0)
80004198:	02100793          	li	a5,33
8000419c:	02e7e063          	bltu	a5,a4,800041bc <API_NI_Handler+0x138>
800041a0:	fe842703          	lw	a4,-24(s0)
800041a4:	01000793          	li	a5,16
800041a8:	3cf70863          	beq	a4,a5,80004578 <API_NI_Handler+0x4f4>
800041ac:	fe842703          	lw	a4,-24(s0)
800041b0:	02000793          	li	a5,32
800041b4:	48f70863          	beq	a4,a5,80004644 <API_NI_Handler+0x5c0>
800041b8:	5580006f          	j	80004710 <API_NI_Handler+0x68c>
800041bc:	fe842703          	lw	a4,-24(s0)
800041c0:	03000793          	li	a5,48
800041c4:	0af70463          	beq	a4,a5,8000426c <API_NI_Handler+0x1e8>
800041c8:	fe842703          	lw	a4,-24(s0)
800041cc:	03300793          	li	a5,51
800041d0:	20f70a63          	beq	a4,a5,800043e4 <API_NI_Handler+0x360>
800041d4:	53c0006f          	j	80004710 <API_NI_Handler+0x68c>
800041d8:	fe842703          	lw	a4,-24(s0)
800041dc:	40100793          	li	a5,1025
800041e0:	2ef70663          	beq	a4,a5,800044cc <API_NI_Handler+0x448>
800041e4:	fe842703          	lw	a4,-24(s0)
800041e8:	40100793          	li	a5,1025
800041ec:	02e7e063          	bltu	a5,a4,8000420c <API_NI_Handler+0x188>
800041f0:	fe842703          	lw	a4,-24(s0)
800041f4:	20000793          	li	a5,512
800041f8:	02f70a63          	beq	a4,a5,8000422c <API_NI_Handler+0x1a8>
800041fc:	fe842703          	lw	a4,-24(s0)
80004200:	40000793          	li	a5,1024
80004204:	24f70463          	beq	a4,a5,8000444c <API_NI_Handler+0x3c8>
80004208:	5080006f          	j	80004710 <API_NI_Handler+0x68c>
8000420c:	fe842703          	lw	a4,-24(s0)
80004210:	50000793          	li	a5,1280
80004214:	12f70e63          	beq	a4,a5,80004350 <API_NI_Handler+0x2cc>
80004218:	fe842703          	lw	a4,-24(s0)
8000421c:	000107b7          	lui	a5,0x10
80004220:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80004224:	50f70663          	beq	a4,a5,80004730 <API_NI_Handler+0x6ac>
80004228:	4e80006f          	j	80004710 <API_NI_Handler+0x68c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:465
            switch (service){
                case REPOSITORY_APP_INFO: // When the repository informs the GM that exist a new Application available:
                    //prints("REPOSITORY_APP_INFO\n");
                    API_AddApplication(incommingPacket.application_id,
8000422c:	800217b7          	lui	a5,0x80021
80004230:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
80004234:	00c7a703          	lw	a4,12(a5)
80004238:	800217b7          	lui	a5,0x80021
8000423c:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
80004240:	0107a583          	lw	a1,16(a5)
80004244:	800217b7          	lui	a5,0x80021
80004248:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
8000424c:	0147a603          	lw	a2,20(a5)
80004250:	800217b7          	lui	a5,0x80021
80004254:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
80004258:	0187a783          	lw	a5,24(a5)
8000425c:	00078693          	mv	a3,a5
80004260:	00070513          	mv	a0,a4
80004264:	66c000ef          	jal	ra,800048d0 <API_AddApplication>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:469
                                    incommingPacket.aplication_period, 
                                    incommingPacket.application_executions, 
                                    incommingPacket.application_n_tasks);
                    break;
80004268:	4cc0006f          	j	80004734 <API_NI_Handler+0x6b0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:472
                
                case TASK_ALLOCATION_SEND: // When the GM asks one Slave to allocate one task
                    prints("TASK_ALLOCATION_SEND\n");
8000426c:	800077b7          	lui	a5,0x80007
80004270:	0b078513          	addi	a0,a5,176 # 800070b0 <__stack_top+0xfffc5300>
80004274:	bd1fe0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:473
                    aux = API_TaskAllocation(incommingPacket.task_id,
80004278:	800217b7          	lui	a5,0x80021
8000427c:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
80004280:	00c7a503          	lw	a0,12(a5)
80004284:	800217b7          	lui	a5,0x80021
80004288:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
8000428c:	0107a583          	lw	a1,16(a5)
80004290:	800217b7          	lui	a5,0x80021
80004294:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
80004298:	0147a603          	lw	a2,20(a5)
8000429c:	800217b7          	lui	a5,0x80021
800042a0:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
800042a4:	0187a683          	lw	a3,24(a5)
800042a8:	800217b7          	lui	a5,0x80021
800042ac:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
800042b0:	01c7a783          	lw	a5,28(a5)
800042b4:	00078713          	mv	a4,a5
800042b8:	4a1010ef          	jal	ra,80005f58 <API_TaskAllocation>
800042bc:	fea42223          	sw	a0,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:478
                                            incommingPacket.task_txt_size,
                                            incommingPacket.task_bss_size,
                                            incommingPacket.task_start_point,
                                            incommingPacket.task_app_id);
                    printsv("Task slot: ", aux);
800042c0:	fe442783          	lw	a5,-28(s0)
800042c4:	00078593          	mv	a1,a5
800042c8:	800077b7          	lui	a5,0x80007
800042cc:	0c878513          	addi	a0,a5,200 # 800070c8 <__stack_top+0xfffc5318>
800042d0:	c21fe0ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:479
                    printsv("Task slot TaskAddr: ", TaskList[aux].taskAddr);
800042d4:	800227b7          	lui	a5,0x80022
800042d8:	fe442703          	lw	a4,-28(s0)
800042dc:	a1878693          	addi	a3,a5,-1512 # 80021a18 <__stack_top+0xfffdfc68>
800042e0:	00070793          	mv	a5,a4
800042e4:	00579793          	slli	a5,a5,0x5
800042e8:	00e787b3          	add	a5,a5,a4
800042ec:	00279793          	slli	a5,a5,0x2
800042f0:	00f687b3          	add	a5,a3,a5
800042f4:	0287a783          	lw	a5,40(a5)
800042f8:	00078593          	mv	a1,a5
800042fc:	800077b7          	lui	a5,0x80007
80004300:	0d478513          	addi	a0,a5,212 # 800070d4 <__stack_top+0xfffc5324>
80004304:	bedfe0ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:481
                    // Informs the NI were to write the application
                    HW_set_32bit_reg(NI_RX, TaskList[aux].taskAddr);
80004308:	800227b7          	lui	a5,0x80022
8000430c:	fe442703          	lw	a4,-28(s0)
80004310:	a1878693          	addi	a3,a5,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80004314:	00070793          	mv	a5,a4
80004318:	00579793          	slli	a5,a5,0x5
8000431c:	00e787b3          	add	a5,a5,a4
80004320:	00279793          	slli	a5,a5,0x2
80004324:	00f687b3          	add	a5,a3,a5
80004328:	0287a783          	lw	a5,40(a5)
8000432c:	00078593          	mv	a1,a5
80004330:	500007b7          	lui	a5,0x50000
80004334:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80004338:	c39fc0ef          	jal	ra,80000f70 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:482
                    incommingPacket.service = TASK_ALLOCATION_FINISHED;
8000433c:	800217b7          	lui	a5,0x80021
80004340:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
80004344:	03300713          	li	a4,51
80004348:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:483
                    break;
8000434c:	3e80006f          	j	80004734 <API_NI_Handler+0x6b0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:486
                
                case TASK_FINISH:
                    printsvsv("FINISHED: Task ", incommingPacket.task_id, "from application ", incommingPacket.task_app_id);
80004350:	800217b7          	lui	a5,0x80021
80004354:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
80004358:	00c7a783          	lw	a5,12(a5)
8000435c:	00078713          	mv	a4,a5
80004360:	800217b7          	lui	a5,0x80021
80004364:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
80004368:	01c7a783          	lw	a5,28(a5)
8000436c:	00078693          	mv	a3,a5
80004370:	800077b7          	lui	a5,0x80007
80004374:	0ec78613          	addi	a2,a5,236 # 800070ec <__stack_top+0xfffc533c>
80004378:	00070593          	mv	a1,a4
8000437c:	800077b7          	lui	a5,0x80007
80004380:	10078513          	addi	a0,a5,256 # 80007100 <__stack_top+0xfffc5350>
80004384:	bb5fe0ef          	jal	ra,80002f38 <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:487
                    API_ClearTaskSlotFromTile(incommingPacket.task_dest_addr, incommingPacket.task_app_id, incommingPacket.task_id);
80004388:	800217b7          	lui	a5,0x80021
8000438c:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
80004390:	0307a703          	lw	a4,48(a5)
80004394:	800217b7          	lui	a5,0x80021
80004398:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
8000439c:	01c7a683          	lw	a3,28(a5)
800043a0:	800217b7          	lui	a5,0x80021
800043a4:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
800043a8:	00c7a783          	lw	a5,12(a5)
800043ac:	00078613          	mv	a2,a5
800043b0:	00068593          	mv	a1,a3
800043b4:	00070513          	mv	a0,a4
800043b8:	21c010ef          	jal	ra,800055d4 <API_ClearTaskSlotFromTile>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:488
                    API_DealocateTask(incommingPacket.task_id, incommingPacket.task_app_id);
800043bc:	800217b7          	lui	a5,0x80021
800043c0:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
800043c4:	00c7a703          	lw	a4,12(a5)
800043c8:	800217b7          	lui	a5,0x80021
800043cc:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
800043d0:	01c7a783          	lw	a5,28(a5)
800043d4:	00078593          	mv	a1,a5
800043d8:	00070513          	mv	a0,a4
800043dc:	465000ef          	jal	ra,80005040 <API_DealocateTask>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:489
                    break;
800043e0:	3540006f          	j	80004734 <API_NI_Handler+0x6b0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:492

                case TASK_ALLOCATION_FINISHED:
                    prints("TASK_ALLOCATION_FINISHED\n");
800043e4:	800077b7          	lui	a5,0x80007
800043e8:	11078513          	addi	a0,a5,272 # 80007110 <__stack_top+0xfffc5360>
800043ec:	a59fe0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:493
                    API_AckTaskAllocation(incommingPacket.task_id, incommingPacket.task_app_id);
800043f0:	800217b7          	lui	a5,0x80021
800043f4:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
800043f8:	00c7a703          	lw	a4,12(a5)
800043fc:	800217b7          	lui	a5,0x80021
80004400:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
80004404:	01c7a783          	lw	a5,28(a5)
80004408:	00078593          	mv	a1,a5
8000440c:	00070513          	mv	a0,a4
80004410:	a24ff0ef          	jal	ra,80003634 <API_AckTaskAllocation>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:503
                        printsv("taskSize: ", TaskList[aux].taskSize);
                        printsv("taskAddr: ", TaskList[aux].taskAddr);
                        printsv("mainAddr: ", TaskList[aux].mainAddr);
                        printsv("taskHandler: ", (unsigned int)TaskList[aux].TaskHandler);
                    }*/
                    break;
80004414:	3200006f          	j	80004734 <API_NI_Handler+0x6b0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:506

                case TASK_ALLOCATION_SUCCESS:
                    prints("TASK_ALLOCATION_SUCCESS\n");
80004418:	800077b7          	lui	a5,0x80007
8000441c:	12c78513          	addi	a0,a5,300 # 8000712c <__stack_top+0xfffc537c>
80004420:	a25fe0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:508
                    //printi(incommingPacket.task_id);
                    API_TaskAllocated(incommingPacket.task_id, incommingPacket.task_app_id);
80004424:	800217b7          	lui	a5,0x80021
80004428:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
8000442c:	00c7a703          	lw	a4,12(a5)
80004430:	800217b7          	lui	a5,0x80021
80004434:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
80004438:	01c7a783          	lw	a5,28(a5)
8000443c:	00078593          	mv	a1,a5
80004440:	00070513          	mv	a0,a4
80004444:	568010ef          	jal	ra,800059ac <API_TaskAllocated>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:509
                    break;
80004448:	2ec0006f          	j	80004734 <API_NI_Handler+0x6b0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:512

                case TASK_START:
                    prints("Chegou um TASK_START!\n");
8000444c:	800077b7          	lui	a5,0x80007
80004450:	14878513          	addi	a0,a5,328 # 80007148 <__stack_top+0xfffc5398>
80004454:	9f1fe0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:513
                    aux = API_GetTaskSlot(incommingPacket.task_id, incommingPacket.task_app_id);
80004458:	800217b7          	lui	a5,0x80021
8000445c:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
80004460:	00c7a703          	lw	a4,12(a5)
80004464:	800217b7          	lui	a5,0x80021
80004468:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
8000446c:	01c7a783          	lw	a5,28(a5)
80004470:	00078593          	mv	a1,a5
80004474:	00070513          	mv	a0,a4
80004478:	5b9010ef          	jal	ra,80006230 <API_GetTaskSlot>
8000447c:	fea42223          	sw	a0,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:515
                    // Informs the NI were to write the application
                    HW_set_32bit_reg(NI_RX, (unsigned int)&TaskList[aux].appNumTasks);
80004480:	fe442703          	lw	a4,-28(s0)
80004484:	00070793          	mv	a5,a4
80004488:	00579793          	slli	a5,a5,0x5
8000448c:	00e787b3          	add	a5,a5,a4
80004490:	00279793          	slli	a5,a5,0x2
80004494:	05078713          	addi	a4,a5,80
80004498:	800227b7          	lui	a5,0x80022
8000449c:	a1878793          	addi	a5,a5,-1512 # 80021a18 <__stack_top+0xfffdfc68>
800044a0:	00f707b3          	add	a5,a4,a5
800044a4:	00878793          	addi	a5,a5,8
800044a8:	00078593          	mv	a1,a5
800044ac:	500007b7          	lui	a5,0x50000
800044b0:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800044b4:	abdfc0ef          	jal	ra,80000f70 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:516
                    incommingPacket.service = TASK_RUN;
800044b8:	800217b7          	lui	a5,0x80021
800044bc:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
800044c0:	40100713          	li	a4,1025
800044c4:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:517
                    break;
800044c8:	26c0006f          	j	80004734 <API_NI_Handler+0x6b0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:520
                
                case TASK_RUN:
                    prints("Chegou um TASK_RUN!\n");
800044cc:	800077b7          	lui	a5,0x80007
800044d0:	16078513          	addi	a0,a5,352 # 80007160 <__stack_top+0xfffc53b0>
800044d4:	971fe0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:521
                    aux = API_GetTaskSlot(incommingPacket.task_id, incommingPacket.task_app_id);
800044d8:	800217b7          	lui	a5,0x80021
800044dc:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
800044e0:	00c7a703          	lw	a4,12(a5)
800044e4:	800217b7          	lui	a5,0x80021
800044e8:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
800044ec:	01c7a783          	lw	a5,28(a5)
800044f0:	00078593          	mv	a1,a5
800044f4:	00070513          	mv	a0,a4
800044f8:	539010ef          	jal	ra,80006230 <API_GetTaskSlot>
800044fc:	fea42223          	sw	a0,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:522
                    TaskList[aux].status = TASK_SLOT_READY;
80004500:	800226b7          	lui	a3,0x80022
80004504:	fe442703          	lw	a4,-28(s0)
80004508:	00070793          	mv	a5,a4
8000450c:	00579793          	slli	a5,a5,0x5
80004510:	00e787b3          	add	a5,a5,a4
80004514:	00279793          	slli	a5,a5,0x2
80004518:	a1868713          	addi	a4,a3,-1512 # 80021a18 <__stack_top+0xfffdfc68>
8000451c:	00e787b3          	add	a5,a5,a4
80004520:	00300713          	li	a4,3
80004524:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:523
                    printsvsv("Enabling Task: ", incommingPacket.task_id, "from app: ", incommingPacket.task_app_id);
80004528:	800217b7          	lui	a5,0x80021
8000452c:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
80004530:	00c7a783          	lw	a5,12(a5)
80004534:	00078713          	mv	a4,a5
80004538:	800217b7          	lui	a5,0x80021
8000453c:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
80004540:	01c7a783          	lw	a5,28(a5)
80004544:	00078693          	mv	a3,a5
80004548:	800077b7          	lui	a5,0x80007
8000454c:	17878613          	addi	a2,a5,376 # 80007178 <__stack_top+0xfffc53c8>
80004550:	00070593          	mv	a1,a4
80004554:	800077b7          	lui	a5,0x80007
80004558:	18478513          	addi	a0,a5,388 # 80007184 <__stack_top+0xfffc53d4>
8000455c:	9ddfe0ef          	jal	ra,80002f38 <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:524
                    printsv("Slot: ", aux);
80004560:	fe442783          	lw	a5,-28(s0)
80004564:	00078593          	mv	a1,a5
80004568:	800077b7          	lui	a5,0x80007
8000456c:	19478513          	addi	a0,a5,404 # 80007194 <__stack_top+0xfffc53e4>
80004570:	981fe0ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:525
                    break;
80004574:	1c00006f          	j	80004734 <API_NI_Handler+0x6b0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:529

                case MESSAGE_REQUEST:
                    // check the pipe
                    printsvsv("Chegou um message request! App: ", incommingPacket.task_app_id, "Task: ", incommingPacket.task_id);
80004578:	800217b7          	lui	a5,0x80021
8000457c:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
80004580:	01c7a783          	lw	a5,28(a5)
80004584:	00078713          	mv	a4,a5
80004588:	800217b7          	lui	a5,0x80021
8000458c:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
80004590:	00c7a783          	lw	a5,12(a5)
80004594:	00078693          	mv	a3,a5
80004598:	800077b7          	lui	a5,0x80007
8000459c:	19c78613          	addi	a2,a5,412 # 8000719c <__stack_top+0xfffc53ec>
800045a0:	00070593          	mv	a1,a4
800045a4:	800077b7          	lui	a5,0x80007
800045a8:	1a478513          	addi	a0,a5,420 # 800071a4 <__stack_top+0xfffc53f4>
800045ac:	98dfe0ef          	jal	ra,80002f38 <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:530
                    aux = API_CheckMessagePipe(incommingPacket.task_id, incommingPacket.task_app_id);
800045b0:	800217b7          	lui	a5,0x80021
800045b4:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
800045b8:	00c7a703          	lw	a4,12(a5)
800045bc:	800217b7          	lui	a5,0x80021
800045c0:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
800045c4:	01c7a783          	lw	a5,28(a5)
800045c8:	00078593          	mv	a1,a5
800045cc:	00070513          	mv	a0,a4
800045d0:	905ff0ef          	jal	ra,80003ed4 <API_CheckMessagePipe>
800045d4:	fea42223          	sw	a0,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:531
                    if (aux == ERRO){
800045d8:	fe442703          	lw	a4,-28(s0)
800045dc:	fff00793          	li	a5,-1
800045e0:	04f71463          	bne	a4,a5,80004628 <API_NI_Handler+0x5a4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:533
                        // register an messagerequest
                        prints("Mensagem não encontrada, adicionando ao PendingReq!\n");
800045e4:	800077b7          	lui	a5,0x80007
800045e8:	1c878513          	addi	a0,a5,456 # 800071c8 <__stack_top+0xfffc5418>
800045ec:	859fe0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:534
                        API_AddPendingReq(incommingPacket.task_id, incommingPacket.task_app_id, incommingPacket.producer_task_id);
800045f0:	800217b7          	lui	a5,0x80021
800045f4:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
800045f8:	00c7a703          	lw	a4,12(a5)
800045fc:	800217b7          	lui	a5,0x80021
80004600:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
80004604:	01c7a683          	lw	a3,28(a5)
80004608:	800217b7          	lui	a5,0x80021
8000460c:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
80004610:	0147a783          	lw	a5,20(a5)
80004614:	00078613          	mv	a2,a5
80004618:	00068593          	mv	a1,a3
8000461c:	00070513          	mv	a0,a4
80004620:	9f1ff0ef          	jal	ra,80004010 <API_AddPendingReq>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:540
                    } else {
                        prints("Mensagem encontrada no pipe!\n");
                        API_PushSendQueue(MESSAGE, aux);
                        // API_Try2Send();
                    }
                    break;
80004624:	1100006f          	j	80004734 <API_NI_Handler+0x6b0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:536
                        prints("Mensagem encontrada no pipe!\n");
80004628:	800077b7          	lui	a5,0x80007
8000462c:	20078513          	addi	a0,a5,512 # 80007200 <__stack_top+0xfffc5450>
80004630:	815fe0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:537
                        API_PushSendQueue(MESSAGE, aux);
80004634:	fe442583          	lw	a1,-28(s0)
80004638:	20200537          	lui	a0,0x20200
8000463c:	d9dfe0ef          	jal	ra,800033d8 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:540
                    break;
80004640:	0f40006f          	j	80004734 <API_NI_Handler+0x6b0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:543
                
                case MESSAGE_DELIVERY:
                    prints("Tem uma mensagem chegando...\n");
80004644:	800077b7          	lui	a5,0x80007
80004648:	22078513          	addi	a0,a5,544 # 80007220 <__stack_top+0xfffc5470>
8000464c:	ff8fe0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:544
                    aux = API_GetTaskSlot(incommingPacket.destination_task, incommingPacket.application_id);
80004650:	800217b7          	lui	a5,0x80021
80004654:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
80004658:	0147a703          	lw	a4,20(a5)
8000465c:	800217b7          	lui	a5,0x80021
80004660:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
80004664:	00c7a783          	lw	a5,12(a5)
80004668:	00078593          	mv	a1,a5
8000466c:	00070513          	mv	a0,a4
80004670:	3c1010ef          	jal	ra,80006230 <API_GetTaskSlot>
80004674:	fea42223          	sw	a0,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:546
                    //printsv("MESSAGE_DELIVERY addr: ", TaskList[aux].MsgToReceive);
                    HW_set_32bit_reg(NI_RX, TaskList[aux].MsgToReceive);
80004678:	800226b7          	lui	a3,0x80022
8000467c:	fe442703          	lw	a4,-28(s0)
80004680:	00070793          	mv	a5,a4
80004684:	00579793          	slli	a5,a5,0x5
80004688:	00e787b3          	add	a5,a5,a4
8000468c:	00279793          	slli	a5,a5,0x2
80004690:	a1868713          	addi	a4,a3,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80004694:	00e787b3          	add	a5,a5,a4
80004698:	0207a783          	lw	a5,32(a5)
8000469c:	00078593          	mv	a1,a5
800046a0:	500007b7          	lui	a5,0x50000
800046a4:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800046a8:	8c9fc0ef          	jal	ra,80000f70 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:547
                    incommingPacket.service = MESSAGE_DELIVERY_FINISH;
800046ac:	800217b7          	lui	a5,0x80021
800046b0:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
800046b4:	02100713          	li	a4,33
800046b8:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:549
                    //prints("done...\n----------\n");
                    break;
800046bc:	0780006f          	j	80004734 <API_NI_Handler+0x6b0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:553
                
                case MESSAGE_DELIVERY_FINISH:
                    //prints("Terminou de entregar a mensagem!!\n");
                    aux = API_GetTaskSlot(incommingPacket.destination_task, incommingPacket.application_id);
800046c0:	800217b7          	lui	a5,0x80021
800046c4:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
800046c8:	0147a703          	lw	a4,20(a5)
800046cc:	800217b7          	lui	a5,0x80021
800046d0:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
800046d4:	00c7a783          	lw	a5,12(a5)
800046d8:	00078593          	mv	a1,a5
800046dc:	00070513          	mv	a0,a4
800046e0:	351010ef          	jal	ra,80006230 <API_GetTaskSlot>
800046e4:	fea42223          	sw	a0,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:554
                    TaskList[aux].waitingMsg = FALSE;
800046e8:	800227b7          	lui	a5,0x80022
800046ec:	fe442703          	lw	a4,-28(s0)
800046f0:	a1878693          	addi	a3,a5,-1512 # 80021a18 <__stack_top+0xfffdfc68>
800046f4:	00070793          	mv	a5,a4
800046f8:	00579793          	slli	a5,a5,0x5
800046fc:	00e787b3          	add	a5,a5,a4
80004700:	00279793          	slli	a5,a5,0x2
80004704:	00f687b3          	add	a5,a3,a5
80004708:	0007ae23          	sw	zero,28(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:555
                    break;
8000470c:	0280006f          	j	80004734 <API_NI_Handler+0x6b0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:561

                case SOLVED:
                    break;
                    
                default:
                    printsv("ERROR External_2_IRQHandler Unknown-Service ", incommingPacket.service);
80004710:	800217b7          	lui	a5,0x80021
80004714:	8f078793          	addi	a5,a5,-1808 # 800208f0 <__stack_top+0xfffdeb40>
80004718:	0087a783          	lw	a5,8(a5)
8000471c:	00078593          	mv	a1,a5
80004720:	800077b7          	lui	a5,0x80007
80004724:	24078513          	addi	a0,a5,576 # 80007240 <__stack_top+0xfffc5490>
80004728:	fc8fe0ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:562
                    break;
8000472c:	0080006f          	j	80004734 <API_NI_Handler+0x6b0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:558
                    break;
80004730:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:564
            }
            HW_set_32bit_reg(NI_RX, DONE);
80004734:	000057b7          	lui	a5,0x5
80004738:	55578593          	addi	a1,a5,1365 # 5555 <HEAP_SIZE-0xaaab>
8000473c:	500007b7          	lui	a5,0x50000
80004740:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80004744:	82dfc0ef          	jal	ra,80000f70 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:565
            count++;
80004748:	fec42783          	lw	a5,-20(s0)
8000474c:	00178793          	addi	a5,a5,1
80004750:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:567
        }
    }while(HW_get_32bit_reg(NI_RX) == NI_STATUS_INTER || HW_get_32bit_reg(NI_RX) == NI_STATUS_WAITING || HW_get_32bit_reg(NI_TX) == NI_STATUS_INTER);
80004754:	500007b7          	lui	a5,0x50000
80004758:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
8000475c:	81dfc0ef          	jal	ra,80000f78 <HW_get_32bit_reg>
80004760:	00050713          	mv	a4,a0
80004764:	000017b7          	lui	a5,0x1
80004768:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
8000476c:	92f706e3          	beq	a4,a5,80004098 <API_NI_Handler+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:567 (discriminator 1)
80004770:	500007b7          	lui	a5,0x50000
80004774:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80004778:	801fc0ef          	jal	ra,80000f78 <HW_get_32bit_reg>
8000477c:	00050713          	mv	a4,a0
80004780:	02200793          	li	a5,34
80004784:	90f70ae3          	beq	a4,a5,80004098 <API_NI_Handler+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:567 (discriminator 2)
80004788:	500007b7          	lui	a5,0x50000
8000478c:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80004790:	fe8fc0ef          	jal	ra,80000f78 <HW_get_32bit_reg>
80004794:	00050713          	mv	a4,a0
80004798:	000017b7          	lui	a5,0x1
8000479c:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
800047a0:	8ef70ce3          	beq	a4,a5,80004098 <API_NI_Handler+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:569
    
    return count;
800047a4:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/chronos.c:570
800047a8:	00078513          	mv	a0,a5
800047ac:	01c12083          	lw	ra,28(sp)
800047b0:	01812403          	lw	s0,24(sp)
800047b4:	02010113          	addi	sp,sp,32
800047b8:	00008067          	ret

800047bc <API_RepositoryWakeUp>:
API_RepositoryWakeUp():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:10
#include "packet.h"
#include "services.h"

////////////////////////////////////////////////////////////
// Informs the Repository that the GLOBALMASTER is ready to receive the application info
void API_RepositoryWakeUp(){
800047bc:	fe010113          	addi	sp,sp,-32
800047c0:	00112e23          	sw	ra,28(sp)
800047c4:	00812c23          	sw	s0,24(sp)
800047c8:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:13
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
800047cc:	7a1010ef          	jal	ra,8000676c <API_GetServiceSlot>
800047d0:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:14
        if(mySlot == PIPE_FULL){
800047d4:	fec42703          	lw	a4,-20(s0)
800047d8:	fdfe07b7          	lui	a5,0xfdfe0
800047dc:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e04d>
800047e0:	00f71463          	bne	a4,a5,800047e8 <API_RepositoryWakeUp+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:16
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
800047e4:	8a1ff0ef          	jal	ra,80004084 <API_NI_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:18
        }
    }while(mySlot == PIPE_FULL);
800047e8:	fec42703          	lw	a4,-20(s0)
800047ec:	fdfe07b7          	lui	a5,0xfdfe0
800047f0:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e04d>
800047f4:	fcf70ce3          	beq	a4,a5,800047cc <API_RepositoryWakeUp+0x10>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:21
    //printsv("I got a free service slot!! -> ", mySlot);

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
800047f8:	800207b7          	lui	a5,0x80020
800047fc:	fec42703          	lw	a4,-20(s0)
80004800:	7fc78693          	addi	a3,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
80004804:	00070793          	mv	a5,a4
80004808:	00479793          	slli	a5,a5,0x4
8000480c:	40e787b3          	sub	a5,a5,a4
80004810:	00279793          	slli	a5,a5,0x2
80004814:	00f687b3          	add	a5,a3,a5
80004818:	feff0737          	lui	a4,0xfeff0
8000481c:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efae14e>
80004820:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:23

    ServicePipe[mySlot].header.header       = makeAddress(0, 0) | PERIPH_SOUTH;
80004824:	00000593          	li	a1,0
80004828:	00000513          	li	a0,0
8000482c:	b6dfe0ef          	jal	ra,80003398 <makeAddress>
80004830:	00050713          	mv	a4,a0
80004834:	000407b7          	lui	a5,0x40
80004838:	00f766b3          	or	a3,a4,a5
8000483c:	800207b7          	lui	a5,0x80020
80004840:	fec42703          	lw	a4,-20(s0)
80004844:	7fc78613          	addi	a2,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
80004848:	00070793          	mv	a5,a4
8000484c:	00479793          	slli	a5,a5,0x4
80004850:	40e787b3          	sub	a5,a5,a4
80004854:	00279793          	slli	a5,a5,0x2
80004858:	00f607b3          	add	a5,a2,a5
8000485c:	00d7a423          	sw	a3,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:24
    ServicePipe[mySlot].header.payload_size = PKT_SERVICE_SIZE;
80004860:	800207b7          	lui	a5,0x80020
80004864:	fec42703          	lw	a4,-20(s0)
80004868:	7fc78693          	addi	a3,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
8000486c:	00070793          	mv	a5,a4
80004870:	00479793          	slli	a5,a5,0x4
80004874:	40e787b3          	sub	a5,a5,a4
80004878:	00279793          	slli	a5,a5,0x2
8000487c:	00f687b3          	add	a5,a3,a5
80004880:	00b00713          	li	a4,11
80004884:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:25
    ServicePipe[mySlot].header.service      = REPOSITORY_WAKEUP;
80004888:	800207b7          	lui	a5,0x80020
8000488c:	fec42703          	lw	a4,-20(s0)
80004890:	7fc78693          	addi	a3,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
80004894:	00070793          	mv	a5,a4
80004898:	00479793          	slli	a5,a5,0x4
8000489c:	40e787b3          	sub	a5,a5,a4
800048a0:	00279793          	slli	a5,a5,0x2
800048a4:	00f687b3          	add	a5,a3,a5
800048a8:	10000713          	li	a4,256
800048ac:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:27

    API_PushSendQueue(SERVICE, mySlot);
800048b0:	fec42583          	lw	a1,-20(s0)
800048b4:	10100537          	lui	a0,0x10100
800048b8:	b21fe0ef          	jal	ra,800033d8 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:28
    return;    
800048bc:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:29
}
800048c0:	01c12083          	lw	ra,28(sp)
800048c4:	01812403          	lw	s0,24(sp)
800048c8:	02010113          	addi	sp,sp,32
800048cc:	00008067          	ret

800048d0 <API_AddApplication>:
API_AddApplication():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:33

////////////////////////////////////////////////////////////
// Add one Application in the Execution Queue
void API_AddApplication(unsigned int appID, unsigned int appPeriod, unsigned int appExec, unsigned int appNTasks){
800048d0:	fd010113          	addi	sp,sp,-48
800048d4:	02112623          	sw	ra,44(sp)
800048d8:	02812423          	sw	s0,40(sp)
800048dc:	03010413          	addi	s0,sp,48
800048e0:	fca42e23          	sw	a0,-36(s0)
800048e4:	fcb42c23          	sw	a1,-40(s0)
800048e8:	fcc42a23          	sw	a2,-44(s0)
800048ec:	fcd42823          	sw	a3,-48(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:34
    int slot = API_GetApplicationFreeSlot();
800048f0:	1c4000ef          	jal	ra,80004ab4 <API_GetApplicationFreeSlot>
800048f4:	00050793          	mv	a5,a0
800048f8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:35
    applications[slot].occupied = TRUE;
800048fc:	800216b7          	lui	a3,0x80021
80004900:	fec42703          	lw	a4,-20(s0)
80004904:	00070793          	mv	a5,a4
80004908:	00279793          	slli	a5,a5,0x2
8000490c:	00e787b3          	add	a5,a5,a4
80004910:	00579793          	slli	a5,a5,0x5
80004914:	29868713          	addi	a4,a3,664 # 80021298 <__stack_top+0xfffdf4e8>
80004918:	00e787b3          	add	a5,a5,a4
8000491c:	00100713          	li	a4,1
80004920:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:36
    applications[slot].appID = appID;
80004924:	800217b7          	lui	a5,0x80021
80004928:	fec42703          	lw	a4,-20(s0)
8000492c:	29878693          	addi	a3,a5,664 # 80021298 <__stack_top+0xfffdf4e8>
80004930:	00070793          	mv	a5,a4
80004934:	00279793          	slli	a5,a5,0x2
80004938:	00e787b3          	add	a5,a5,a4
8000493c:	00579793          	slli	a5,a5,0x5
80004940:	00f687b3          	add	a5,a3,a5
80004944:	fdc42703          	lw	a4,-36(s0)
80004948:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:37
    applications[slot].appPeriod = appPeriod;
8000494c:	800217b7          	lui	a5,0x80021
80004950:	fec42703          	lw	a4,-20(s0)
80004954:	29878693          	addi	a3,a5,664 # 80021298 <__stack_top+0xfffdf4e8>
80004958:	00070793          	mv	a5,a4
8000495c:	00279793          	slli	a5,a5,0x2
80004960:	00e787b3          	add	a5,a5,a4
80004964:	00579793          	slli	a5,a5,0x5
80004968:	00f687b3          	add	a5,a3,a5
8000496c:	fd842703          	lw	a4,-40(s0)
80004970:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:38
    applications[slot].appExec = appExec;
80004974:	800217b7          	lui	a5,0x80021
80004978:	fec42703          	lw	a4,-20(s0)
8000497c:	29878693          	addi	a3,a5,664 # 80021298 <__stack_top+0xfffdf4e8>
80004980:	00070793          	mv	a5,a4
80004984:	00279793          	slli	a5,a5,0x2
80004988:	00e787b3          	add	a5,a5,a4
8000498c:	00579793          	slli	a5,a5,0x5
80004990:	00f687b3          	add	a5,a3,a5
80004994:	fd442703          	lw	a4,-44(s0)
80004998:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:39
    applications[slot].numTasks = appNTasks;
8000499c:	800216b7          	lui	a3,0x80021
800049a0:	fec42703          	lw	a4,-20(s0)
800049a4:	00070793          	mv	a5,a4
800049a8:	00279793          	slli	a5,a5,0x2
800049ac:	00e787b3          	add	a5,a5,a4
800049b0:	00579793          	slli	a5,a5,0x5
800049b4:	29868713          	addi	a4,a3,664 # 80021298 <__stack_top+0xfffdf4e8>
800049b8:	00e787b3          	add	a5,a5,a4
800049bc:	fd042703          	lw	a4,-48(s0)
800049c0:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:40
    applications[slot].nextRun = xTaskGetTickCount() + appPeriod;
800049c4:	ac5fd0ef          	jal	ra,80002488 <xTaskGetTickCount>
800049c8:	00050713          	mv	a4,a0
800049cc:	fd842783          	lw	a5,-40(s0)
800049d0:	00f706b3          	add	a3,a4,a5
800049d4:	800217b7          	lui	a5,0x80021
800049d8:	fec42703          	lw	a4,-20(s0)
800049dc:	29878613          	addi	a2,a5,664 # 80021298 <__stack_top+0xfffdf4e8>
800049e0:	00070793          	mv	a5,a4
800049e4:	00279793          	slli	a5,a5,0x2
800049e8:	00e787b3          	add	a5,a5,a4
800049ec:	00579793          	slli	a5,a5,0x5
800049f0:	00f607b3          	add	a5,a2,a5
800049f4:	08d7a623          	sw	a3,140(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:41
    applications[slot].executed = 0;
800049f8:	800216b7          	lui	a3,0x80021
800049fc:	fec42703          	lw	a4,-20(s0)
80004a00:	00070793          	mv	a5,a4
80004a04:	00279793          	slli	a5,a5,0x2
80004a08:	00e787b3          	add	a5,a5,a4
80004a0c:	00579793          	slli	a5,a5,0x5
80004a10:	29868713          	addi	a4,a3,664 # 80021298 <__stack_top+0xfffdf4e8>
80004a14:	00e787b3          	add	a5,a5,a4
80004a18:	0807a823          	sw	zero,144(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:42
    applications[slot].lastStart = -1;
80004a1c:	800217b7          	lui	a5,0x80021
80004a20:	fec42703          	lw	a4,-20(s0)
80004a24:	29878693          	addi	a3,a5,664 # 80021298 <__stack_top+0xfffdf4e8>
80004a28:	00070793          	mv	a5,a4
80004a2c:	00279793          	slli	a5,a5,0x2
80004a30:	00e787b3          	add	a5,a5,a4
80004a34:	00579793          	slli	a5,a5,0x5
80004a38:	00f687b3          	add	a5,a3,a5
80004a3c:	fff00713          	li	a4,-1
80004a40:	08e7aa23          	sw	a4,148(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:43
    applications[slot].finishedTasks = 0;
80004a44:	800217b7          	lui	a5,0x80021
80004a48:	fec42703          	lw	a4,-20(s0)
80004a4c:	29878693          	addi	a3,a5,664 # 80021298 <__stack_top+0xfffdf4e8>
80004a50:	00070793          	mv	a5,a4
80004a54:	00279793          	slli	a5,a5,0x2
80004a58:	00e787b3          	add	a5,a5,a4
80004a5c:	00579793          	slli	a5,a5,0x5
80004a60:	00f687b3          	add	a5,a3,a5
80004a64:	0807ac23          	sw	zero,152(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:44
    applications[slot].lastFinish = 0;
80004a68:	800217b7          	lui	a5,0x80021
80004a6c:	fec42703          	lw	a4,-20(s0)
80004a70:	29878693          	addi	a3,a5,664 # 80021298 <__stack_top+0xfffdf4e8>
80004a74:	00070793          	mv	a5,a4
80004a78:	00279793          	slli	a5,a5,0x2
80004a7c:	00e787b3          	add	a5,a5,a4
80004a80:	00579793          	slli	a5,a5,0x5
80004a84:	00f687b3          	add	a5,a3,a5
80004a88:	0807ae23          	sw	zero,156(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:45
    printsv("New application registered - ID: ", appID);
80004a8c:	fdc42783          	lw	a5,-36(s0)
80004a90:	00078593          	mv	a1,a5
80004a94:	800077b7          	lui	a5,0x80007
80004a98:	27078513          	addi	a0,a5,624 # 80007270 <__stack_top+0xfffc54c0>
80004a9c:	c54fe0ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:46
    return;
80004aa0:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:47
}
80004aa4:	02c12083          	lw	ra,44(sp)
80004aa8:	02812403          	lw	s0,40(sp)
80004aac:	03010113          	addi	sp,sp,48
80004ab0:	00008067          	ret

80004ab4 <API_GetApplicationFreeSlot>:
API_GetApplicationFreeSlot():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:65
}


////////////////////////////////////////////////////////////
// Gets an application slot that is free
unsigned int API_GetApplicationFreeSlot(){
80004ab4:	fe010113          	addi	sp,sp,-32
80004ab8:	00112e23          	sw	ra,28(sp)
80004abc:	00812c23          	sw	s0,24(sp)
80004ac0:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:67
    int i;
    for (i = 0; i < NUM_MAX_APPS; i++){
80004ac4:	fe042623          	sw	zero,-20(s0)
80004ac8:	0400006f          	j	80004b08 <API_GetApplicationFreeSlot+0x54>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:68
        if (applications[i].occupied == FALSE){
80004acc:	800216b7          	lui	a3,0x80021
80004ad0:	fec42703          	lw	a4,-20(s0)
80004ad4:	00070793          	mv	a5,a4
80004ad8:	00279793          	slli	a5,a5,0x2
80004adc:	00e787b3          	add	a5,a5,a4
80004ae0:	00579793          	slli	a5,a5,0x5
80004ae4:	29868713          	addi	a4,a3,664 # 80021298 <__stack_top+0xfffdf4e8>
80004ae8:	00e787b3          	add	a5,a5,a4
80004aec:	0007a783          	lw	a5,0(a5)
80004af0:	00079663          	bnez	a5,80004afc <API_GetApplicationFreeSlot+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:69
            return i;
80004af4:	fec42783          	lw	a5,-20(s0)
80004af8:	02c0006f          	j	80004b24 <API_GetApplicationFreeSlot+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:67 (discriminator 2)
    for (i = 0; i < NUM_MAX_APPS; i++){
80004afc:	fec42783          	lw	a5,-20(s0)
80004b00:	00178793          	addi	a5,a5,1
80004b04:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:67 (discriminator 1)
80004b08:	fec42703          	lw	a4,-20(s0)
80004b0c:	00b00793          	li	a5,11
80004b10:	fae7dee3          	ble	a4,a5,80004acc <API_GetApplicationFreeSlot+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:72
        }
    }
    prints("returning erro4\n");
80004b14:	800077b7          	lui	a5,0x80007
80004b18:	2a878513          	addi	a0,a5,680 # 800072a8 <__stack_top+0xfffc54f8>
80004b1c:	b28fe0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:73
    return ERRO;
80004b20:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:74
}
80004b24:	00078513          	mv	a0,a5
80004b28:	01c12083          	lw	ra,28(sp)
80004b2c:	01812403          	lw	s0,24(sp)
80004b30:	02010113          	addi	sp,sp,32
80004b34:	00008067          	ret

80004b38 <API_ApplicationsReset>:
API_ApplicationsReset():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:78

////////////////////////////////////////////////////////////
// Reset applications vector
void API_ApplicationsReset(){
80004b38:	fe010113          	addi	sp,sp,-32
80004b3c:	00812e23          	sw	s0,28(sp)
80004b40:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:80
    int i;
    for (i = 0; i < NUM_MAX_APPS; i++){
80004b44:	fe042623          	sw	zero,-20(s0)
80004b48:	0340006f          	j	80004b7c <API_ApplicationsReset+0x44>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:81 (discriminator 3)
        applications[i].occupied = FALSE;
80004b4c:	800216b7          	lui	a3,0x80021
80004b50:	fec42703          	lw	a4,-20(s0)
80004b54:	00070793          	mv	a5,a4
80004b58:	00279793          	slli	a5,a5,0x2
80004b5c:	00e787b3          	add	a5,a5,a4
80004b60:	00579793          	slli	a5,a5,0x5
80004b64:	29868713          	addi	a4,a3,664 # 80021298 <__stack_top+0xfffdf4e8>
80004b68:	00e787b3          	add	a5,a5,a4
80004b6c:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:80 (discriminator 3)
    for (i = 0; i < NUM_MAX_APPS; i++){
80004b70:	fec42783          	lw	a5,-20(s0)
80004b74:	00178793          	addi	a5,a5,1
80004b78:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:80 (discriminator 1)
80004b7c:	fec42703          	lw	a4,-20(s0)
80004b80:	00b00793          	li	a5,11
80004b84:	fce7d4e3          	ble	a4,a5,80004b4c <API_ApplicationsReset+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:83
    }
    return;
80004b88:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:84
}
80004b8c:	01c12403          	lw	s0,28(sp)
80004b90:	02010113          	addi	sp,sp,32
80004b94:	00008067          	ret

80004b98 <API_TilesReset>:
API_TilesReset():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:88

////////////////////////////////////////////////////////////
// Initialize the Tiles Info
void API_TilesReset(){
80004b98:	fe010113          	addi	sp,sp,-32
80004b9c:	00812e23          	sw	s0,28(sp)
80004ba0:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90
    int i, m, n;
    for (m = 0; m < DIM_X; m++){
80004ba4:	fe042623          	sw	zero,-20(s0)
80004ba8:	0fc0006f          	j	80004ca4 <API_TilesReset+0x10c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:91
        for (n = 0; n < DIM_Y; n++){
80004bac:	fe042423          	sw	zero,-24(s0)
80004bb0:	0dc0006f          	j	80004c8c <API_TilesReset+0xf4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:92 (discriminator 3)
            Tiles[m][n].temperature = 273;
80004bb4:	80022637          	lui	a2,0x80022
80004bb8:	fe842783          	lw	a5,-24(s0)
80004bbc:	fec42683          	lw	a3,-20(s0)
80004bc0:	00078713          	mv	a4,a5
80004bc4:	00171713          	slli	a4,a4,0x1
80004bc8:	00f70733          	add	a4,a4,a5
80004bcc:	00271793          	slli	a5,a4,0x2
80004bd0:	00078713          	mv	a4,a5
80004bd4:	00068793          	mv	a5,a3
80004bd8:	00379793          	slli	a5,a5,0x3
80004bdc:	00d787b3          	add	a5,a5,a3
80004be0:	00279793          	slli	a5,a5,0x2
80004be4:	00f70733          	add	a4,a4,a5
80004be8:	d3860793          	addi	a5,a2,-712 # 80021d38 <__stack_top+0xfffdff88>
80004bec:	00f707b3          	add	a5,a4,a5
80004bf0:	11100713          	li	a4,273
80004bf4:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:93 (discriminator 3)
            Tiles[m][n].frequency = 1000;
80004bf8:	80022737          	lui	a4,0x80022
80004bfc:	fe842783          	lw	a5,-24(s0)
80004c00:	fec42683          	lw	a3,-20(s0)
80004c04:	d3870613          	addi	a2,a4,-712 # 80021d38 <__stack_top+0xfffdff88>
80004c08:	00078713          	mv	a4,a5
80004c0c:	00171713          	slli	a4,a4,0x1
80004c10:	00f70733          	add	a4,a4,a5
80004c14:	00271793          	slli	a5,a4,0x2
80004c18:	00078713          	mv	a4,a5
80004c1c:	00068793          	mv	a5,a3
80004c20:	00379793          	slli	a5,a5,0x3
80004c24:	00d787b3          	add	a5,a5,a3
80004c28:	00279793          	slli	a5,a5,0x2
80004c2c:	00f707b3          	add	a5,a4,a5
80004c30:	00f607b3          	add	a5,a2,a5
80004c34:	3e800713          	li	a4,1000
80004c38:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:94 (discriminator 3)
            Tiles[m][n].taskSlots = NUM_MAX_TASKS;
80004c3c:	80022737          	lui	a4,0x80022
80004c40:	fe842783          	lw	a5,-24(s0)
80004c44:	fec42683          	lw	a3,-20(s0)
80004c48:	d3870613          	addi	a2,a4,-712 # 80021d38 <__stack_top+0xfffdff88>
80004c4c:	00078713          	mv	a4,a5
80004c50:	00171713          	slli	a4,a4,0x1
80004c54:	00f70733          	add	a4,a4,a5
80004c58:	00271793          	slli	a5,a4,0x2
80004c5c:	00078713          	mv	a4,a5
80004c60:	00068793          	mv	a5,a3
80004c64:	00379793          	slli	a5,a5,0x3
80004c68:	00d787b3          	add	a5,a5,a3
80004c6c:	00279793          	slli	a5,a5,0x2
80004c70:	00f707b3          	add	a5,a4,a5
80004c74:	00f607b3          	add	a5,a2,a5
80004c78:	00600713          	li	a4,6
80004c7c:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:91 (discriminator 3)
        for (n = 0; n < DIM_Y; n++){
80004c80:	fe842783          	lw	a5,-24(s0)
80004c84:	00178793          	addi	a5,a5,1
80004c88:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:91 (discriminator 1)
80004c8c:	fe842703          	lw	a4,-24(s0)
80004c90:	00200793          	li	a5,2
80004c94:	f2e7d0e3          	ble	a4,a5,80004bb4 <API_TilesReset+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90 (discriminator 2)
    for (m = 0; m < DIM_X; m++){
80004c98:	fec42783          	lw	a5,-20(s0)
80004c9c:	00178793          	addi	a5,a5,1
80004ca0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90 (discriminator 1)
80004ca4:	fec42703          	lw	a4,-20(s0)
80004ca8:	00200793          	li	a5,2
80004cac:	f0e7d0e3          	ble	a4,a5,80004bac <API_TilesReset+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:100
            /*for(i = 0; i < NUM_MAX_TASKS; i++){
                Tiles[m][n].AppTask[i] = NONE;
            }*/
        }
    }    
    return;
80004cb0:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:101
}
80004cb4:	01c12403          	lw	s0,28(sp)
80004cb8:	02010113          	addi	sp,sp,32
80004cbc:	00008067          	ret

80004cc0 <GeneratePatternMatrix>:
GeneratePatternMatrix():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:104

// Generates the Pattern Matrix for Pattern mapping
void GeneratePatternMatrix(){
80004cc0:	fe010113          	addi	sp,sp,-32
80004cc4:	00812e23          	sw	s0,28(sp)
80004cc8:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:106
    int i, aux;
    aux = 0;
80004ccc:	fe042423          	sw	zero,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:107
    priorityPointer = 0;
80004cd0:	800227b7          	lui	a5,0x80022
80004cd4:	d207aa23          	sw	zero,-716(a5) # 80021d34 <__stack_top+0xfffdff84>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:109
    //prints("Testando Pattern: \n");
    for(i=0; i<(DIM_X*DIM_Y); i++){
80004cd8:	fe042623          	sw	zero,-20(s0)
80004cdc:	0700006f          	j	80004d4c <GeneratePatternMatrix+0x8c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:111
        //printi(i); prints(": "); printi(aux); prints("\n");
        priorityMatrix[i] = (aux / DIM_X << 8) | aux % DIM_X;
80004ce0:	fe842703          	lw	a4,-24(s0)
80004ce4:	00300793          	li	a5,3
80004ce8:	02f747b3          	div	a5,a4,a5
80004cec:	00879713          	slli	a4,a5,0x8
80004cf0:	fe842683          	lw	a3,-24(s0)
80004cf4:	00300793          	li	a5,3
80004cf8:	02f6e7b3          	rem	a5,a3,a5
80004cfc:	00f767b3          	or	a5,a4,a5
80004d00:	00078693          	mv	a3,a5
80004d04:	800217b7          	lui	a5,0x80021
80004d08:	fec42703          	lw	a4,-20(s0)
80004d0c:	00271713          	slli	a4,a4,0x2
80004d10:	27478793          	addi	a5,a5,628 # 80021274 <__stack_top+0xfffdf4c4>
80004d14:	00f707b3          	add	a5,a4,a5
80004d18:	00d7a023          	sw	a3,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:130
            else{
                aux = 1;
            }
        } 
        else{
            if(aux<=((DIM_X*DIM_Y)-3))
80004d1c:	fe842703          	lw	a4,-24(s0)
80004d20:	00600793          	li	a5,6
80004d24:	00e7ca63          	blt	a5,a4,80004d38 <GeneratePatternMatrix+0x78>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:131
                aux += 2;
80004d28:	fe842783          	lw	a5,-24(s0)
80004d2c:	00278793          	addi	a5,a5,2
80004d30:	fef42423          	sw	a5,-24(s0)
80004d34:	00c0006f          	j	80004d40 <GeneratePatternMatrix+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:133
            else
                aux = 1;
80004d38:	00100793          	li	a5,1
80004d3c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:109 (discriminator 2)
    for(i=0; i<(DIM_X*DIM_Y); i++){
80004d40:	fec42783          	lw	a5,-20(s0)
80004d44:	00178793          	addi	a5,a5,1
80004d48:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:109 (discriminator 1)
80004d4c:	fec42703          	lw	a4,-20(s0)
80004d50:	00800793          	li	a5,8
80004d54:	f8e7d6e3          	ble	a4,a5,80004ce0 <GeneratePatternMatrix+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:136
        }    
    }
    return;
80004d58:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:137
}
80004d5c:	01c12403          	lw	s0,28(sp)
80004d60:	02010113          	addi	sp,sp,32
80004d64:	00008067          	ret

80004d68 <API_AllocateTasks>:
API_AllocateTasks():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:140

// Checks if there is some task to allocate...
void API_AllocateTasks(unsigned int tick){
80004d68:	fd010113          	addi	sp,sp,-48
80004d6c:	02112623          	sw	ra,44(sp)
80004d70:	02812423          	sw	s0,40(sp)
80004d74:	02912223          	sw	s1,36(sp)
80004d78:	03010413          	addi	s0,sp,48
80004d7c:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:144
    int i, j;
    int addr, slot;
    // Iterate around every possible application
    for (i = 0; i < NUM_MAX_APPS; i++){
80004d80:	fe042623          	sw	zero,-20(s0)
80004d84:	2980006f          	j	8000501c <API_AllocateTasks+0x2b4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:146
        // If the application is valid
        if (applications[i].occupied == TRUE){
80004d88:	800216b7          	lui	a3,0x80021
80004d8c:	fec42703          	lw	a4,-20(s0)
80004d90:	00070793          	mv	a5,a4
80004d94:	00279793          	slli	a5,a5,0x2
80004d98:	00e787b3          	add	a5,a5,a4
80004d9c:	00579793          	slli	a5,a5,0x5
80004da0:	29868713          	addi	a4,a3,664 # 80021298 <__stack_top+0xfffdf4e8>
80004da4:	00e787b3          	add	a5,a5,a4
80004da8:	0007a703          	lw	a4,0(a5)
80004dac:	00100793          	li	a5,1
80004db0:	26f71063          	bne	a4,a5,80005010 <API_AllocateTasks+0x2a8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:149

            // If the nextRun of this application is right now, then release each task!
            if(applications[i].nextRun <= tick && applications[i].nextRun != applications[i].lastStart){
80004db4:	800217b7          	lui	a5,0x80021
80004db8:	fec42703          	lw	a4,-20(s0)
80004dbc:	29878693          	addi	a3,a5,664 # 80021298 <__stack_top+0xfffdf4e8>
80004dc0:	00070793          	mv	a5,a4
80004dc4:	00279793          	slli	a5,a5,0x2
80004dc8:	00e787b3          	add	a5,a5,a4
80004dcc:	00579793          	slli	a5,a5,0x5
80004dd0:	00f687b3          	add	a5,a3,a5
80004dd4:	08c7a783          	lw	a5,140(a5)
80004dd8:	fdc42703          	lw	a4,-36(s0)
80004ddc:	22f76a63          	bltu	a4,a5,80005010 <API_AllocateTasks+0x2a8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:149 (discriminator 1)
80004de0:	800217b7          	lui	a5,0x80021
80004de4:	fec42703          	lw	a4,-20(s0)
80004de8:	29878693          	addi	a3,a5,664 # 80021298 <__stack_top+0xfffdf4e8>
80004dec:	00070793          	mv	a5,a4
80004df0:	00279793          	slli	a5,a5,0x2
80004df4:	00e787b3          	add	a5,a5,a4
80004df8:	00579793          	slli	a5,a5,0x5
80004dfc:	00f687b3          	add	a5,a3,a5
80004e00:	08c7a683          	lw	a3,140(a5)
80004e04:	800217b7          	lui	a5,0x80021
80004e08:	fec42703          	lw	a4,-20(s0)
80004e0c:	29878613          	addi	a2,a5,664 # 80021298 <__stack_top+0xfffdf4e8>
80004e10:	00070793          	mv	a5,a4
80004e14:	00279793          	slli	a5,a5,0x2
80004e18:	00e787b3          	add	a5,a5,a4
80004e1c:	00579793          	slli	a5,a5,0x5
80004e20:	00f607b3          	add	a5,a2,a5
80004e24:	0947a783          	lw	a5,148(a5)
80004e28:	1ef68463          	beq	a3,a5,80005010 <API_AllocateTasks+0x2a8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:152

                // If the system has space to accept every task
                if(applications[i].numTasks <= API_GetSystemTasksSlots()){
80004e2c:	800216b7          	lui	a3,0x80021
80004e30:	fec42703          	lw	a4,-20(s0)
80004e34:	00070793          	mv	a5,a4
80004e38:	00279793          	slli	a5,a5,0x2
80004e3c:	00e787b3          	add	a5,a5,a4
80004e40:	00579793          	slli	a5,a5,0x5
80004e44:	29868713          	addi	a4,a3,664 # 80021298 <__stack_top+0xfffdf4e8>
80004e48:	00e787b3          	add	a5,a5,a4
80004e4c:	0107a483          	lw	s1,16(a5)
80004e50:	0c5000ef          	jal	ra,80005714 <API_GetSystemTasksSlots>
80004e54:	00050793          	mv	a5,a0
80004e58:	1a97ec63          	bltu	a5,s1,80005010 <API_AllocateTasks+0x2a8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:155
                    
                    // Iterates around each task of this application
                    for(j = 0; j < applications[i].numTasks; j++){
80004e5c:	fe042423          	sw	zero,-24(s0)
80004e60:	13c0006f          	j	80004f9c <API_AllocateTasks+0x234>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:158

                        for(;;){
                            addr = getNextPriorityAddr();
80004e64:	4e0000ef          	jal	ra,80005344 <getNextPriorityAddr>
80004e68:	00050793          	mv	a5,a0
80004e6c:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:159
                            slot = API_GetTaskSlotFromTile(addr, i, j);
80004e70:	fe442783          	lw	a5,-28(s0)
80004e74:	fec42703          	lw	a4,-20(s0)
80004e78:	fe842683          	lw	a3,-24(s0)
80004e7c:	00068613          	mv	a2,a3
80004e80:	00070593          	mv	a1,a4
80004e84:	00078513          	mv	a0,a5
80004e88:	5f0000ef          	jal	ra,80005478 <API_GetTaskSlotFromTile>
80004e8c:	00050793          	mv	a5,a0
80004e90:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:160
                            if (slot != ERRO)
80004e94:	fe042703          	lw	a4,-32(s0)
80004e98:	fff00793          	li	a5,-1
80004e9c:	00f71463          	bne	a4,a5,80004ea4 <API_AllocateTasks+0x13c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:158
                            addr = getNextPriorityAddr();
80004ea0:	fc5ff06f          	j	80004e64 <API_AllocateTasks+0xfc>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:161
                                break;
80004ea4:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:163
                        }
                        applications[i].tasks[j].status = TASK_ALLOCATING;
80004ea8:	80021737          	lui	a4,0x80021
80004eac:	fe842783          	lw	a5,-24(s0)
80004eb0:	fec42683          	lw	a3,-20(s0)
80004eb4:	29870613          	addi	a2,a4,664 # 80021298 <__stack_top+0xfffdf4e8>
80004eb8:	00078713          	mv	a4,a5
80004ebc:	00171713          	slli	a4,a4,0x1
80004ec0:	00f70733          	add	a4,a4,a5
80004ec4:	00271793          	slli	a5,a4,0x2
80004ec8:	00078713          	mv	a4,a5
80004ecc:	00068793          	mv	a5,a3
80004ed0:	00279793          	slli	a5,a5,0x2
80004ed4:	00d787b3          	add	a5,a5,a3
80004ed8:	00579793          	slli	a5,a5,0x5
80004edc:	00f707b3          	add	a5,a4,a5
80004ee0:	00f607b3          	add	a5,a2,a5
80004ee4:	00300713          	li	a4,3
80004ee8:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:164
                        applications[i].tasks[j].addr = addr;
80004eec:	fe442603          	lw	a2,-28(s0)
80004ef0:	80021737          	lui	a4,0x80021
80004ef4:	fe842783          	lw	a5,-24(s0)
80004ef8:	fec42683          	lw	a3,-20(s0)
80004efc:	29870593          	addi	a1,a4,664 # 80021298 <__stack_top+0xfffdf4e8>
80004f00:	00078713          	mv	a4,a5
80004f04:	00171713          	slli	a4,a4,0x1
80004f08:	00f70733          	add	a4,a4,a5
80004f0c:	00271793          	slli	a5,a4,0x2
80004f10:	00078713          	mv	a4,a5
80004f14:	00068793          	mv	a5,a3
80004f18:	00279793          	slli	a5,a5,0x2
80004f1c:	00d787b3          	add	a5,a5,a3
80004f20:	00579793          	slli	a5,a5,0x5
80004f24:	00f707b3          	add	a5,a4,a5
80004f28:	00f587b3          	add	a5,a1,a5
80004f2c:	00c7ac23          	sw	a2,24(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:165
                        applications[i].tasks[j].slot = slot;
80004f30:	fe042603          	lw	a2,-32(s0)
80004f34:	80021737          	lui	a4,0x80021
80004f38:	fe842783          	lw	a5,-24(s0)
80004f3c:	fec42683          	lw	a3,-20(s0)
80004f40:	29870593          	addi	a1,a4,664 # 80021298 <__stack_top+0xfffdf4e8>
80004f44:	00078713          	mv	a4,a5
80004f48:	00171713          	slli	a4,a4,0x1
80004f4c:	00f70733          	add	a4,a4,a5
80004f50:	00271793          	slli	a5,a4,0x2
80004f54:	00078713          	mv	a4,a5
80004f58:	00068793          	mv	a5,a3
80004f5c:	00279793          	slli	a5,a5,0x2
80004f60:	00d787b3          	add	a5,a5,a3
80004f64:	00579793          	slli	a5,a5,0x5
80004f68:	00f707b3          	add	a5,a4,a5
80004f6c:	00f587b3          	add	a5,a1,a5
80004f70:	00c7ae23          	sw	a2,28(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:166
                        API_RepositoryAllocation(i, j, addr);
80004f74:	fec42783          	lw	a5,-20(s0)
80004f78:	fe842703          	lw	a4,-24(s0)
80004f7c:	fe442683          	lw	a3,-28(s0)
80004f80:	00068613          	mv	a2,a3
80004f84:	00070593          	mv	a1,a4
80004f88:	00078513          	mv	a0,a5
80004f8c:	075000ef          	jal	ra,80005800 <API_RepositoryAllocation>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:155
                    for(j = 0; j < applications[i].numTasks; j++){
80004f90:	fe842783          	lw	a5,-24(s0)
80004f94:	00178793          	addi	a5,a5,1
80004f98:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:155 (discriminator 1)
80004f9c:	800216b7          	lui	a3,0x80021
80004fa0:	fec42703          	lw	a4,-20(s0)
80004fa4:	00070793          	mv	a5,a4
80004fa8:	00279793          	slli	a5,a5,0x2
80004fac:	00e787b3          	add	a5,a5,a4
80004fb0:	00579793          	slli	a5,a5,0x5
80004fb4:	29868713          	addi	a4,a3,664 # 80021298 <__stack_top+0xfffdf4e8>
80004fb8:	00e787b3          	add	a5,a5,a4
80004fbc:	0107a703          	lw	a4,16(a5)
80004fc0:	fe842783          	lw	a5,-24(s0)
80004fc4:	eae7e0e3          	bltu	a5,a4,80004e64 <API_AllocateTasks+0xfc>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:170
                    }

                    // Resets the lastStart
                    applications[i].lastStart = applications[i].nextRun;
80004fc8:	800217b7          	lui	a5,0x80021
80004fcc:	fec42703          	lw	a4,-20(s0)
80004fd0:	29878693          	addi	a3,a5,664 # 80021298 <__stack_top+0xfffdf4e8>
80004fd4:	00070793          	mv	a5,a4
80004fd8:	00279793          	slli	a5,a5,0x2
80004fdc:	00e787b3          	add	a5,a5,a4
80004fe0:	00579793          	slli	a5,a5,0x5
80004fe4:	00f687b3          	add	a5,a3,a5
80004fe8:	08c7a683          	lw	a3,140(a5)
80004fec:	800217b7          	lui	a5,0x80021
80004ff0:	fec42703          	lw	a4,-20(s0)
80004ff4:	29878613          	addi	a2,a5,664 # 80021298 <__stack_top+0xfffdf4e8>
80004ff8:	00070793          	mv	a5,a4
80004ffc:	00279793          	slli	a5,a5,0x2
80005000:	00e787b3          	add	a5,a5,a4
80005004:	00579793          	slli	a5,a5,0x5
80005008:	00f607b3          	add	a5,a2,a5
8000500c:	08d7aa23          	sw	a3,148(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:144 (discriminator 2)
    for (i = 0; i < NUM_MAX_APPS; i++){
80005010:	fec42783          	lw	a5,-20(s0)
80005014:	00178793          	addi	a5,a5,1
80005018:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:144 (discriminator 1)
8000501c:	fec42703          	lw	a4,-20(s0)
80005020:	00b00793          	li	a5,11
80005024:	d6e7d2e3          	ble	a4,a5,80004d88 <API_AllocateTasks+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:176
                }
            }
        }
    }

    return;
80005028:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:177
}
8000502c:	02c12083          	lw	ra,44(sp)
80005030:	02812403          	lw	s0,40(sp)
80005034:	02412483          	lw	s1,36(sp)
80005038:	03010113          	addi	sp,sp,48
8000503c:	00008067          	ret

80005040 <API_DealocateTask>:
API_DealocateTask():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:179

void API_DealocateTask(unsigned int task_id, unsigned int app_id){
80005040:	fd010113          	addi	sp,sp,-48
80005044:	02112623          	sw	ra,44(sp)
80005048:	02812423          	sw	s0,40(sp)
8000504c:	03010413          	addi	s0,sp,48
80005050:	fca42e23          	sw	a0,-36(s0)
80005054:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:181
    unsigned int i, flag, tick;
    applications[app_id].tasks[task_id].status = TASK_FINISHED;
80005058:	80021737          	lui	a4,0x80021
8000505c:	fdc42783          	lw	a5,-36(s0)
80005060:	fd842683          	lw	a3,-40(s0)
80005064:	29870613          	addi	a2,a4,664 # 80021298 <__stack_top+0xfffdf4e8>
80005068:	00078713          	mv	a4,a5
8000506c:	00171713          	slli	a4,a4,0x1
80005070:	00f70733          	add	a4,a4,a5
80005074:	00271793          	slli	a5,a4,0x2
80005078:	00078713          	mv	a4,a5
8000507c:	00068793          	mv	a5,a3
80005080:	00279793          	slli	a5,a5,0x2
80005084:	00d787b3          	add	a5,a5,a3
80005088:	00579793          	slli	a5,a5,0x5
8000508c:	00f707b3          	add	a5,a4,a5
80005090:	00f607b3          	add	a5,a2,a5
80005094:	00200713          	li	a4,2
80005098:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:183
    // verify if every task has finished
    flag = 1;
8000509c:	00100793          	li	a5,1
800050a0:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:184
    for (i = 0; i < applications[app_id].numTasks; i++){
800050a4:	fe042623          	sw	zero,-20(s0)
800050a8:	0600006f          	j	80005108 <API_DealocateTask+0xc8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:186
        //printsvsv("checking ", i, "task is: ", applications[app_id].tasks[i].status);
        if(applications[app_id].tasks[i].status != TASK_FINISHED){
800050ac:	80021737          	lui	a4,0x80021
800050b0:	fec42783          	lw	a5,-20(s0)
800050b4:	fd842683          	lw	a3,-40(s0)
800050b8:	29870613          	addi	a2,a4,664 # 80021298 <__stack_top+0xfffdf4e8>
800050bc:	00078713          	mv	a4,a5
800050c0:	00171713          	slli	a4,a4,0x1
800050c4:	00f70733          	add	a4,a4,a5
800050c8:	00271793          	slli	a5,a4,0x2
800050cc:	00078713          	mv	a4,a5
800050d0:	00068793          	mv	a5,a3
800050d4:	00279793          	slli	a5,a5,0x2
800050d8:	00d787b3          	add	a5,a5,a3
800050dc:	00579793          	slli	a5,a5,0x5
800050e0:	00f707b3          	add	a5,a4,a5
800050e4:	00f607b3          	add	a5,a2,a5
800050e8:	0147a703          	lw	a4,20(a5)
800050ec:	00200793          	li	a5,2
800050f0:	00f70663          	beq	a4,a5,800050fc <API_DealocateTask+0xbc>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:187
            flag = 0;
800050f4:	fe042423          	sw	zero,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:188
            break;
800050f8:	03c0006f          	j	80005134 <API_DealocateTask+0xf4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:184 (discriminator 2)
    for (i = 0; i < applications[app_id].numTasks; i++){
800050fc:	fec42783          	lw	a5,-20(s0)
80005100:	00178793          	addi	a5,a5,1
80005104:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:184 (discriminator 1)
80005108:	800216b7          	lui	a3,0x80021
8000510c:	fd842703          	lw	a4,-40(s0)
80005110:	00070793          	mv	a5,a4
80005114:	00279793          	slli	a5,a5,0x2
80005118:	00e787b3          	add	a5,a5,a4
8000511c:	00579793          	slli	a5,a5,0x5
80005120:	29868713          	addi	a4,a3,664 # 80021298 <__stack_top+0xfffdf4e8>
80005124:	00e787b3          	add	a5,a5,a4
80005128:	0107a783          	lw	a5,16(a5)
8000512c:	fec42703          	lw	a4,-20(s0)
80005130:	f6f76ee3          	bltu	a4,a5,800050ac <API_DealocateTask+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:192
        }
    }
    // in positive case
    if(flag){
80005134:	fe842783          	lw	a5,-24(s0)
80005138:	1e078c63          	beqz	a5,80005330 <API_DealocateTask+0x2f0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:194
        // register that the application has executed another time
        tick = xTaskGetTickCount();
8000513c:	b4cfd0ef          	jal	ra,80002488 <xTaskGetTickCount>
80005140:	fea42223          	sw	a0,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:195
        applications[app_id].executed++;
80005144:	800216b7          	lui	a3,0x80021
80005148:	fd842703          	lw	a4,-40(s0)
8000514c:	00070793          	mv	a5,a4
80005150:	00279793          	slli	a5,a5,0x2
80005154:	00e787b3          	add	a5,a5,a4
80005158:	00579793          	slli	a5,a5,0x5
8000515c:	29868713          	addi	a4,a3,664 # 80021298 <__stack_top+0xfffdf4e8>
80005160:	00e787b3          	add	a5,a5,a4
80005164:	0907a783          	lw	a5,144(a5)
80005168:	00178693          	addi	a3,a5,1
8000516c:	80021637          	lui	a2,0x80021
80005170:	fd842703          	lw	a4,-40(s0)
80005174:	00070793          	mv	a5,a4
80005178:	00279793          	slli	a5,a5,0x2
8000517c:	00e787b3          	add	a5,a5,a4
80005180:	00579793          	slli	a5,a5,0x5
80005184:	29860713          	addi	a4,a2,664 # 80021298 <__stack_top+0xfffdf4e8>
80005188:	00e787b3          	add	a5,a5,a4
8000518c:	08d7a823          	sw	a3,144(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:196
        printsvsv("Application ", app_id, "was executed in ", (tick - applications[app_id].lastStart));
80005190:	fd842583          	lw	a1,-40(s0)
80005194:	800217b7          	lui	a5,0x80021
80005198:	fd842703          	lw	a4,-40(s0)
8000519c:	29878693          	addi	a3,a5,664 # 80021298 <__stack_top+0xfffdf4e8>
800051a0:	00070793          	mv	a5,a4
800051a4:	00279793          	slli	a5,a5,0x2
800051a8:	00e787b3          	add	a5,a5,a4
800051ac:	00579793          	slli	a5,a5,0x5
800051b0:	00f687b3          	add	a5,a3,a5
800051b4:	0947a783          	lw	a5,148(a5)
800051b8:	fe442703          	lw	a4,-28(s0)
800051bc:	40f707b3          	sub	a5,a4,a5
800051c0:	00078693          	mv	a3,a5
800051c4:	800077b7          	lui	a5,0x80007
800051c8:	2bc78613          	addi	a2,a5,700 # 800072bc <__stack_top+0xfffc550c>
800051cc:	800077b7          	lui	a5,0x80007
800051d0:	2d078513          	addi	a0,a5,720 # 800072d0 <__stack_top+0xfffc5520>
800051d4:	d65fd0ef          	jal	ra,80002f38 <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:197
        applications[app_id].lastFinish = tick;
800051d8:	800217b7          	lui	a5,0x80021
800051dc:	fd842703          	lw	a4,-40(s0)
800051e0:	29878693          	addi	a3,a5,664 # 80021298 <__stack_top+0xfffdf4e8>
800051e4:	00070793          	mv	a5,a4
800051e8:	00279793          	slli	a5,a5,0x2
800051ec:	00e787b3          	add	a5,a5,a4
800051f0:	00579793          	slli	a5,a5,0x5
800051f4:	00f687b3          	add	a5,a3,a5
800051f8:	fe442703          	lw	a4,-28(s0)
800051fc:	08e7ae23          	sw	a4,156(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:199
        // if the application must run another time
        if(applications[app_id].appExec > applications[app_id].executed){
80005200:	800217b7          	lui	a5,0x80021
80005204:	fd842703          	lw	a4,-40(s0)
80005208:	29878693          	addi	a3,a5,664 # 80021298 <__stack_top+0xfffdf4e8>
8000520c:	00070793          	mv	a5,a4
80005210:	00279793          	slli	a5,a5,0x2
80005214:	00e787b3          	add	a5,a5,a4
80005218:	00579793          	slli	a5,a5,0x5
8000521c:	00f687b3          	add	a5,a3,a5
80005220:	00c7a683          	lw	a3,12(a5)
80005224:	80021637          	lui	a2,0x80021
80005228:	fd842703          	lw	a4,-40(s0)
8000522c:	00070793          	mv	a5,a4
80005230:	00279793          	slli	a5,a5,0x2
80005234:	00e787b3          	add	a5,a5,a4
80005238:	00579793          	slli	a5,a5,0x5
8000523c:	29860713          	addi	a4,a2,664 # 80021298 <__stack_top+0xfffdf4e8>
80005240:	00e787b3          	add	a5,a5,a4
80005244:	0907a783          	lw	a5,144(a5)
80005248:	0ad7fa63          	bleu	a3,a5,800052fc <API_DealocateTask+0x2bc>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:200
            printsv("\t\tThis application still need to run: ", (applications[app_id].appExec - applications[app_id].executed));
8000524c:	800217b7          	lui	a5,0x80021
80005250:	fd842703          	lw	a4,-40(s0)
80005254:	29878693          	addi	a3,a5,664 # 80021298 <__stack_top+0xfffdf4e8>
80005258:	00070793          	mv	a5,a4
8000525c:	00279793          	slli	a5,a5,0x2
80005260:	00e787b3          	add	a5,a5,a4
80005264:	00579793          	slli	a5,a5,0x5
80005268:	00f687b3          	add	a5,a3,a5
8000526c:	00c7a683          	lw	a3,12(a5)
80005270:	80021637          	lui	a2,0x80021
80005274:	fd842703          	lw	a4,-40(s0)
80005278:	00070793          	mv	a5,a4
8000527c:	00279793          	slli	a5,a5,0x2
80005280:	00e787b3          	add	a5,a5,a4
80005284:	00579793          	slli	a5,a5,0x5
80005288:	29860713          	addi	a4,a2,664 # 80021298 <__stack_top+0xfffdf4e8>
8000528c:	00e787b3          	add	a5,a5,a4
80005290:	0907a783          	lw	a5,144(a5)
80005294:	40f687b3          	sub	a5,a3,a5
80005298:	00078593          	mv	a1,a5
8000529c:	800077b7          	lui	a5,0x80007
800052a0:	2e078513          	addi	a0,a5,736 # 800072e0 <__stack_top+0xfffc5530>
800052a4:	c4dfd0ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:201
            applications[app_id].nextRun = tick + applications[app_id].appPeriod;
800052a8:	800217b7          	lui	a5,0x80021
800052ac:	fd842703          	lw	a4,-40(s0)
800052b0:	29878693          	addi	a3,a5,664 # 80021298 <__stack_top+0xfffdf4e8>
800052b4:	00070793          	mv	a5,a4
800052b8:	00279793          	slli	a5,a5,0x2
800052bc:	00e787b3          	add	a5,a5,a4
800052c0:	00579793          	slli	a5,a5,0x5
800052c4:	00f687b3          	add	a5,a3,a5
800052c8:	0087a703          	lw	a4,8(a5)
800052cc:	fe442783          	lw	a5,-28(s0)
800052d0:	00f706b3          	add	a3,a4,a5
800052d4:	800217b7          	lui	a5,0x80021
800052d8:	fd842703          	lw	a4,-40(s0)
800052dc:	29878613          	addi	a2,a5,664 # 80021298 <__stack_top+0xfffdf4e8>
800052e0:	00070793          	mv	a5,a4
800052e4:	00279793          	slli	a5,a5,0x2
800052e8:	00e787b3          	add	a5,a5,a4
800052ec:	00579793          	slli	a5,a5,0x5
800052f0:	00f607b3          	add	a5,a2,a5
800052f4:	08d7a623          	sw	a3,140(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:207
        } else { // if the application has finished its runs
            prints("\t\tThis application is DONE!\n");
            applications[app_id].occupied = FALSE;
        }        
    }
    return;
800052f8:	0380006f          	j	80005330 <API_DealocateTask+0x2f0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:203
            prints("\t\tThis application is DONE!\n");
800052fc:	800077b7          	lui	a5,0x80007
80005300:	30878513          	addi	a0,a5,776 # 80007308 <__stack_top+0xfffc5558>
80005304:	b41fd0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:204
            applications[app_id].occupied = FALSE;
80005308:	800216b7          	lui	a3,0x80021
8000530c:	fd842703          	lw	a4,-40(s0)
80005310:	00070793          	mv	a5,a4
80005314:	00279793          	slli	a5,a5,0x2
80005318:	00e787b3          	add	a5,a5,a4
8000531c:	00579793          	slli	a5,a5,0x5
80005320:	29868713          	addi	a4,a3,664 # 80021298 <__stack_top+0xfffdf4e8>
80005324:	00e787b3          	add	a5,a5,a4
80005328:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:207
    return;
8000532c:	00000013          	nop
80005330:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:208
}
80005334:	02c12083          	lw	ra,44(sp)
80005338:	02812403          	lw	s0,40(sp)
8000533c:	03010113          	addi	sp,sp,48
80005340:	00008067          	ret

80005344 <getNextPriorityAddr>:
getNextPriorityAddr():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:211

// Gets the address of the next tile in the priority list 
unsigned int getNextPriorityAddr(){
80005344:	fe010113          	addi	sp,sp,-32
80005348:	00112e23          	sw	ra,28(sp)
8000534c:	00812c23          	sw	s0,24(sp)
80005350:	00912a23          	sw	s1,20(sp)
80005354:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:213
    int i;
    unsigned int addr = makeAddress(0,0);
80005358:	00000593          	li	a1,0
8000535c:	00000513          	li	a0,0
80005360:	838fe0ef          	jal	ra,80003398 <makeAddress>
80005364:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:216
    for(;;){
        // Checks if it's a valid address
        if (priorityMatrix[priorityPointer] != makeAddress(0,0)){
80005368:	800227b7          	lui	a5,0x80022
8000536c:	d347a703          	lw	a4,-716(a5) # 80021d34 <__stack_top+0xfffdff84>
80005370:	800217b7          	lui	a5,0x80021
80005374:	00271713          	slli	a4,a4,0x2
80005378:	27478793          	addi	a5,a5,628 # 80021274 <__stack_top+0xfffdf4c4>
8000537c:	00f707b3          	add	a5,a4,a5
80005380:	0007a483          	lw	s1,0(a5)
80005384:	00000593          	li	a1,0
80005388:	00000513          	li	a0,0
8000538c:	80cfe0ef          	jal	ra,80003398 <makeAddress>
80005390:	00050793          	mv	a5,a0
80005394:	06f48e63          	beq	s1,a5,80005410 <getNextPriorityAddr+0xcc>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:217
            if (Tiles[getXpos(addr)][getYpos(addr)].taskSlots > 0){
80005398:	fec42503          	lw	a0,-20(s0)
8000539c:	bfdfd0ef          	jal	ra,80002f98 <getXpos>
800053a0:	00050493          	mv	s1,a0
800053a4:	fec42503          	lw	a0,-20(s0)
800053a8:	c1dfd0ef          	jal	ra,80002fc4 <getYpos>
800053ac:	00050613          	mv	a2,a0
800053b0:	800227b7          	lui	a5,0x80022
800053b4:	d3878693          	addi	a3,a5,-712 # 80021d38 <__stack_top+0xfffdff88>
800053b8:	00060713          	mv	a4,a2
800053bc:	00171793          	slli	a5,a4,0x1
800053c0:	00078713          	mv	a4,a5
800053c4:	00c70733          	add	a4,a4,a2
800053c8:	00271793          	slli	a5,a4,0x2
800053cc:	00078713          	mv	a4,a5
800053d0:	00048793          	mv	a5,s1
800053d4:	00379793          	slli	a5,a5,0x3
800053d8:	009787b3          	add	a5,a5,s1
800053dc:	00279793          	slli	a5,a5,0x2
800053e0:	00f707b3          	add	a5,a4,a5
800053e4:	00f687b3          	add	a5,a3,a5
800053e8:	0087a783          	lw	a5,8(a5)
800053ec:	02078263          	beqz	a5,80005410 <getNextPriorityAddr+0xcc>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:220
            //for(i = 0; i < NUM_MAX_TASKS; i++){
                //if (Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] == NONE)
                    addr = priorityMatrix[priorityPointer];
800053f0:	800227b7          	lui	a5,0x80022
800053f4:	d347a703          	lw	a4,-716(a5) # 80021d34 <__stack_top+0xfffdff84>
800053f8:	800217b7          	lui	a5,0x80021
800053fc:	00271713          	slli	a4,a4,0x2
80005400:	27478793          	addi	a5,a5,628 # 80021274 <__stack_top+0xfffdf4c4>
80005404:	00f707b3          	add	a5,a4,a5
80005408:	0007a783          	lw	a5,0(a5)
8000540c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:226
            //}
            }
        }

        // Increments the priorityPointer
        priorityPointer++;
80005410:	800227b7          	lui	a5,0x80022
80005414:	d347a783          	lw	a5,-716(a5) # 80021d34 <__stack_top+0xfffdff84>
80005418:	00178713          	addi	a4,a5,1
8000541c:	800227b7          	lui	a5,0x80022
80005420:	d2e7aa23          	sw	a4,-716(a5) # 80021d34 <__stack_top+0xfffdff84>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:227
        if (priorityPointer == DIM_X*DIM_Y)
80005424:	800227b7          	lui	a5,0x80022
80005428:	d347a703          	lw	a4,-716(a5) # 80021d34 <__stack_top+0xfffdff84>
8000542c:	00900793          	li	a5,9
80005430:	00f71663          	bne	a4,a5,8000543c <getNextPriorityAddr+0xf8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:228
            priorityPointer = 0;
80005434:	800227b7          	lui	a5,0x80022
80005438:	d207aa23          	sw	zero,-716(a5) # 80021d34 <__stack_top+0xfffdff84>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:231

        // If we found a new valid address, return
        if( addr != makeAddress(0,0))
8000543c:	00000593          	li	a1,0
80005440:	00000513          	li	a0,0
80005444:	f55fd0ef          	jal	ra,80003398 <makeAddress>
80005448:	00050713          	mv	a4,a0
8000544c:	fec42783          	lw	a5,-20(s0)
80005450:	00e79463          	bne	a5,a4,80005458 <getNextPriorityAddr+0x114>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:216
        if (priorityMatrix[priorityPointer] != makeAddress(0,0)){
80005454:	f15ff06f          	j	80005368 <getNextPriorityAddr+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:232
            break;
80005458:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:234
    }
    return addr;
8000545c:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:236
    //return 0x101;
}
80005460:	00078513          	mv	a0,a5
80005464:	01c12083          	lw	ra,28(sp)
80005468:	01812403          	lw	s0,24(sp)
8000546c:	01412483          	lw	s1,20(sp)
80005470:	02010113          	addi	sp,sp,32
80005474:	00008067          	ret

80005478 <API_GetTaskSlotFromTile>:
API_GetTaskSlotFromTile():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:239

// Gets a free slot from one given tile
unsigned int API_GetTaskSlotFromTile(unsigned int addr, unsigned int app, unsigned int task){
80005478:	fe010113          	addi	sp,sp,-32
8000547c:	00112e23          	sw	ra,28(sp)
80005480:	00812c23          	sw	s0,24(sp)
80005484:	00912a23          	sw	s1,20(sp)
80005488:	01212823          	sw	s2,16(sp)
8000548c:	02010413          	addi	s0,sp,32
80005490:	fea42623          	sw	a0,-20(s0)
80005494:	feb42423          	sw	a1,-24(s0)
80005498:	fec42223          	sw	a2,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:249
            printsv("\t achei!! > ", i);
            Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] = (app << 16) | task;
            return i;
        }
    }*/
    if(Tiles[getXpos(addr)][getYpos(addr)].taskSlots > 0){
8000549c:	fec42503          	lw	a0,-20(s0)
800054a0:	af9fd0ef          	jal	ra,80002f98 <getXpos>
800054a4:	00050493          	mv	s1,a0
800054a8:	fec42503          	lw	a0,-20(s0)
800054ac:	b19fd0ef          	jal	ra,80002fc4 <getYpos>
800054b0:	00050613          	mv	a2,a0
800054b4:	800227b7          	lui	a5,0x80022
800054b8:	d3878693          	addi	a3,a5,-712 # 80021d38 <__stack_top+0xfffdff88>
800054bc:	00060713          	mv	a4,a2
800054c0:	00171793          	slli	a5,a4,0x1
800054c4:	00078713          	mv	a4,a5
800054c8:	00c70733          	add	a4,a4,a2
800054cc:	00271793          	slli	a5,a4,0x2
800054d0:	00078713          	mv	a4,a5
800054d4:	00048793          	mv	a5,s1
800054d8:	00379793          	slli	a5,a5,0x3
800054dc:	009787b3          	add	a5,a5,s1
800054e0:	00279793          	slli	a5,a5,0x2
800054e4:	00f707b3          	add	a5,a4,a5
800054e8:	00f687b3          	add	a5,a3,a5
800054ec:	0087a783          	lw	a5,8(a5)
800054f0:	0a078c63          	beqz	a5,800055a8 <API_GetTaskSlotFromTile+0x130>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:250
        Tiles[getXpos(addr)][getYpos(addr)].taskSlots = Tiles[getXpos(addr)][getYpos(addr)].taskSlots - 1;
800054f4:	fec42503          	lw	a0,-20(s0)
800054f8:	aa1fd0ef          	jal	ra,80002f98 <getXpos>
800054fc:	00050493          	mv	s1,a0
80005500:	fec42503          	lw	a0,-20(s0)
80005504:	ac1fd0ef          	jal	ra,80002fc4 <getYpos>
80005508:	00050613          	mv	a2,a0
8000550c:	800227b7          	lui	a5,0x80022
80005510:	d3878693          	addi	a3,a5,-712 # 80021d38 <__stack_top+0xfffdff88>
80005514:	00060713          	mv	a4,a2
80005518:	00171793          	slli	a5,a4,0x1
8000551c:	00078713          	mv	a4,a5
80005520:	00c70733          	add	a4,a4,a2
80005524:	00271793          	slli	a5,a4,0x2
80005528:	00078713          	mv	a4,a5
8000552c:	00048793          	mv	a5,s1
80005530:	00379793          	slli	a5,a5,0x3
80005534:	009787b3          	add	a5,a5,s1
80005538:	00279793          	slli	a5,a5,0x2
8000553c:	00f707b3          	add	a5,a4,a5
80005540:	00f687b3          	add	a5,a3,a5
80005544:	0087a483          	lw	s1,8(a5)
80005548:	fec42503          	lw	a0,-20(s0)
8000554c:	a4dfd0ef          	jal	ra,80002f98 <getXpos>
80005550:	00050913          	mv	s2,a0
80005554:	fec42503          	lw	a0,-20(s0)
80005558:	a6dfd0ef          	jal	ra,80002fc4 <getYpos>
8000555c:	00050593          	mv	a1,a0
80005560:	fff48693          	addi	a3,s1,-1
80005564:	800227b7          	lui	a5,0x80022
80005568:	d3878613          	addi	a2,a5,-712 # 80021d38 <__stack_top+0xfffdff88>
8000556c:	00058713          	mv	a4,a1
80005570:	00171793          	slli	a5,a4,0x1
80005574:	00078713          	mv	a4,a5
80005578:	00b70733          	add	a4,a4,a1
8000557c:	00271793          	slli	a5,a4,0x2
80005580:	00078713          	mv	a4,a5
80005584:	00090793          	mv	a5,s2
80005588:	00379793          	slli	a5,a5,0x3
8000558c:	012787b3          	add	a5,a5,s2
80005590:	00279793          	slli	a5,a5,0x2
80005594:	00f707b3          	add	a5,a4,a5
80005598:	00f607b3          	add	a5,a2,a5
8000559c:	00d7a423          	sw	a3,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:251
        return 1;
800055a0:	00100793          	li	a5,1
800055a4:	0140006f          	j	800055b8 <API_GetTaskSlotFromTile+0x140>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:253
    }else {
        prints("returning erro5\n");
800055a8:	800077b7          	lui	a5,0x80007
800055ac:	32878513          	addi	a0,a5,808 # 80007328 <__stack_top+0xfffc5578>
800055b0:	895fd0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:254
        return ERRO;
800055b4:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:256
    }
}
800055b8:	00078513          	mv	a0,a5
800055bc:	01c12083          	lw	ra,28(sp)
800055c0:	01812403          	lw	s0,24(sp)
800055c4:	01412483          	lw	s1,20(sp)
800055c8:	01012903          	lw	s2,16(sp)
800055cc:	02010113          	addi	sp,sp,32
800055d0:	00008067          	ret

800055d4 <API_ClearTaskSlotFromTile>:
API_ClearTaskSlotFromTile():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:259

// Clear a slot occupied by a given task
unsigned int API_ClearTaskSlotFromTile(unsigned int addr, unsigned int app, unsigned int task){
800055d4:	fe010113          	addi	sp,sp,-32
800055d8:	00112e23          	sw	ra,28(sp)
800055dc:	00812c23          	sw	s0,24(sp)
800055e0:	00912a23          	sw	s1,20(sp)
800055e4:	02010413          	addi	s0,sp,32
800055e8:	fea42623          	sw	a0,-20(s0)
800055ec:	feb42423          	sw	a1,-24(s0)
800055f0:	fec42223          	sw	a2,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:260
    Tiles[getXpos(addr)][getYpos(addr)].taskSlots++;
800055f4:	fec42503          	lw	a0,-20(s0)
800055f8:	9a1fd0ef          	jal	ra,80002f98 <getXpos>
800055fc:	00050493          	mv	s1,a0
80005600:	fec42503          	lw	a0,-20(s0)
80005604:	9c1fd0ef          	jal	ra,80002fc4 <getYpos>
80005608:	00050693          	mv	a3,a0
8000560c:	800227b7          	lui	a5,0x80022
80005610:	d3878613          	addi	a2,a5,-712 # 80021d38 <__stack_top+0xfffdff88>
80005614:	00068713          	mv	a4,a3
80005618:	00171793          	slli	a5,a4,0x1
8000561c:	00078713          	mv	a4,a5
80005620:	00d70733          	add	a4,a4,a3
80005624:	00271793          	slli	a5,a4,0x2
80005628:	00078713          	mv	a4,a5
8000562c:	00048793          	mv	a5,s1
80005630:	00379793          	slli	a5,a5,0x3
80005634:	009787b3          	add	a5,a5,s1
80005638:	00279793          	slli	a5,a5,0x2
8000563c:	00f707b3          	add	a5,a4,a5
80005640:	00f607b3          	add	a5,a2,a5
80005644:	0087a783          	lw	a5,8(a5)
80005648:	00178613          	addi	a2,a5,1
8000564c:	800227b7          	lui	a5,0x80022
80005650:	d3878593          	addi	a1,a5,-712 # 80021d38 <__stack_top+0xfffdff88>
80005654:	00068713          	mv	a4,a3
80005658:	00171793          	slli	a5,a4,0x1
8000565c:	00078713          	mv	a4,a5
80005660:	00d70733          	add	a4,a4,a3
80005664:	00271793          	slli	a5,a4,0x2
80005668:	00078713          	mv	a4,a5
8000566c:	00048793          	mv	a5,s1
80005670:	00379793          	slli	a5,a5,0x3
80005674:	009787b3          	add	a5,a5,s1
80005678:	00279793          	slli	a5,a5,0x2
8000567c:	00f707b3          	add	a5,a4,a5
80005680:	00f587b3          	add	a5,a1,a5
80005684:	00c7a423          	sw	a2,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:261
    if(Tiles[getXpos(addr)][getYpos(addr)].taskSlots >= NUM_MAX_TASKS){
80005688:	fec42503          	lw	a0,-20(s0)
8000568c:	90dfd0ef          	jal	ra,80002f98 <getXpos>
80005690:	00050493          	mv	s1,a0
80005694:	fec42503          	lw	a0,-20(s0)
80005698:	92dfd0ef          	jal	ra,80002fc4 <getYpos>
8000569c:	00050613          	mv	a2,a0
800056a0:	800227b7          	lui	a5,0x80022
800056a4:	d3878693          	addi	a3,a5,-712 # 80021d38 <__stack_top+0xfffdff88>
800056a8:	00060713          	mv	a4,a2
800056ac:	00171793          	slli	a5,a4,0x1
800056b0:	00078713          	mv	a4,a5
800056b4:	00c70733          	add	a4,a4,a2
800056b8:	00271793          	slli	a5,a4,0x2
800056bc:	00078713          	mv	a4,a5
800056c0:	00048793          	mv	a5,s1
800056c4:	00379793          	slli	a5,a5,0x3
800056c8:	009787b3          	add	a5,a5,s1
800056cc:	00279793          	slli	a5,a5,0x2
800056d0:	00f707b3          	add	a5,a4,a5
800056d4:	00f687b3          	add	a5,a3,a5
800056d8:	0087a703          	lw	a4,8(a5)
800056dc:	00500793          	li	a5,5
800056e0:	00e7fc63          	bleu	a4,a5,800056f8 <API_ClearTaskSlotFromTile+0x124>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:262
        prints("returning erro6\n");
800056e4:	800077b7          	lui	a5,0x80007
800056e8:	33c78513          	addi	a0,a5,828 # 8000733c <__stack_top+0xfffc558c>
800056ec:	f58fd0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:263
        return ERRO;
800056f0:	fff00793          	li	a5,-1
800056f4:	0080006f          	j	800056fc <API_ClearTaskSlotFromTile+0x128>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:266
    }
    else{
        return 1;
800056f8:	00100793          	li	a5,1
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:270
    }
    prints("returning erro7\n");
    return ERRO;
}
800056fc:	00078513          	mv	a0,a5
80005700:	01c12083          	lw	ra,28(sp)
80005704:	01812403          	lw	s0,24(sp)
80005708:	01412483          	lw	s1,20(sp)
8000570c:	02010113          	addi	sp,sp,32
80005710:	00008067          	ret

80005714 <API_GetSystemTasksSlots>:
API_GetSystemTasksSlots():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:273

// Iterates around the system tiles to sum the amount of tasks slots available
unsigned int API_GetSystemTasksSlots(){
80005714:	fe010113          	addi	sp,sp,-32
80005718:	00112e23          	sw	ra,28(sp)
8000571c:	00812c23          	sw	s0,24(sp)
80005720:	00912a23          	sw	s1,20(sp)
80005724:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:275
    int m, n, i, sum;
    sum = 0;
80005728:	fe042223          	sw	zero,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:276
    for(m = 0; m < DIM_X; m++){
8000572c:	fe042623          	sw	zero,-20(s0)
80005730:	0a80006f          	j	800057d8 <API_GetSystemTasksSlots+0xc4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:277
        for(n = 0; n < DIM_Y; n++){
80005734:	fe042423          	sw	zero,-24(s0)
80005738:	0880006f          	j	800057c0 <API_GetSystemTasksSlots+0xac>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:278
            if(makeAddress(m,n) != makeAddress(0,0)){
8000573c:	fec42783          	lw	a5,-20(s0)
80005740:	fe842703          	lw	a4,-24(s0)
80005744:	00070593          	mv	a1,a4
80005748:	00078513          	mv	a0,a5
8000574c:	c4dfd0ef          	jal	ra,80003398 <makeAddress>
80005750:	00050493          	mv	s1,a0
80005754:	00000593          	li	a1,0
80005758:	00000513          	li	a0,0
8000575c:	c3dfd0ef          	jal	ra,80003398 <makeAddress>
80005760:	00050793          	mv	a5,a0
80005764:	04f48863          	beq	s1,a5,800057b4 <API_GetSystemTasksSlots+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:279
                sum += Tiles[m][n].taskSlots;
80005768:	80022737          	lui	a4,0x80022
8000576c:	fe842783          	lw	a5,-24(s0)
80005770:	fec42683          	lw	a3,-20(s0)
80005774:	d3870613          	addi	a2,a4,-712 # 80021d38 <__stack_top+0xfffdff88>
80005778:	00078713          	mv	a4,a5
8000577c:	00171713          	slli	a4,a4,0x1
80005780:	00f70733          	add	a4,a4,a5
80005784:	00271793          	slli	a5,a4,0x2
80005788:	00078713          	mv	a4,a5
8000578c:	00068793          	mv	a5,a3
80005790:	00379793          	slli	a5,a5,0x3
80005794:	00d787b3          	add	a5,a5,a3
80005798:	00279793          	slli	a5,a5,0x2
8000579c:	00f707b3          	add	a5,a4,a5
800057a0:	00f607b3          	add	a5,a2,a5
800057a4:	0087a703          	lw	a4,8(a5)
800057a8:	fe442783          	lw	a5,-28(s0)
800057ac:	00f707b3          	add	a5,a4,a5
800057b0:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:277 (discriminator 2)
        for(n = 0; n < DIM_Y; n++){
800057b4:	fe842783          	lw	a5,-24(s0)
800057b8:	00178793          	addi	a5,a5,1
800057bc:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:277 (discriminator 1)
800057c0:	fe842703          	lw	a4,-24(s0)
800057c4:	00200793          	li	a5,2
800057c8:	f6e7dae3          	ble	a4,a5,8000573c <API_GetSystemTasksSlots+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:276 (discriminator 2)
    for(m = 0; m < DIM_X; m++){
800057cc:	fec42783          	lw	a5,-20(s0)
800057d0:	00178793          	addi	a5,a5,1
800057d4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:276 (discriminator 1)
800057d8:	fec42703          	lw	a4,-20(s0)
800057dc:	00200793          	li	a5,2
800057e0:	f4e7dae3          	ble	a4,a5,80005734 <API_GetSystemTasksSlots+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:283
            }
        }
    }
    return sum;
800057e4:	fe442783          	lw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:284
}
800057e8:	00078513          	mv	a0,a5
800057ec:	01c12083          	lw	ra,28(sp)
800057f0:	01812403          	lw	s0,24(sp)
800057f4:	01412483          	lw	s1,20(sp)
800057f8:	02010113          	addi	sp,sp,32
800057fc:	00008067          	ret

80005800 <API_RepositoryAllocation>:
API_RepositoryAllocation():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:286

void API_RepositoryAllocation(unsigned int app, unsigned int task, unsigned int dest_addr){
80005800:	fd010113          	addi	sp,sp,-48
80005804:	02112623          	sw	ra,44(sp)
80005808:	02812423          	sw	s0,40(sp)
8000580c:	03010413          	addi	s0,sp,48
80005810:	fca42e23          	sw	a0,-36(s0)
80005814:	fcb42c23          	sw	a1,-40(s0)
80005818:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:289
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
8000581c:	751000ef          	jal	ra,8000676c <API_GetServiceSlot>
80005820:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:290
        if(mySlot == PIPE_FULL){
80005824:	fec42703          	lw	a4,-20(s0)
80005828:	fdfe07b7          	lui	a5,0xfdfe0
8000582c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e04d>
80005830:	00f71463          	bne	a4,a5,80005838 <API_RepositoryAllocation+0x38>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:292
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80005834:	851fe0ef          	jal	ra,80004084 <API_NI_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:294
        }
    }while(mySlot == PIPE_FULL);
80005838:	fec42703          	lw	a4,-20(s0)
8000583c:	fdfe07b7          	lui	a5,0xfdfe0
80005840:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e04d>
80005844:	fcf70ce3          	beq	a4,a5,8000581c <API_RepositoryAllocation+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:295
    printsv("I got a free service slot!! -> ", mySlot);
80005848:	fec42783          	lw	a5,-20(s0)
8000584c:	00078593          	mv	a1,a5
80005850:	800077b7          	lui	a5,0x80007
80005854:	35078513          	addi	a0,a5,848 # 80007350 <__stack_top+0xfffc55a0>
80005858:	e98fd0ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:297

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
8000585c:	800207b7          	lui	a5,0x80020
80005860:	fec42703          	lw	a4,-20(s0)
80005864:	7fc78693          	addi	a3,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
80005868:	00070793          	mv	a5,a4
8000586c:	00479793          	slli	a5,a5,0x4
80005870:	40e787b3          	sub	a5,a5,a4
80005874:	00279793          	slli	a5,a5,0x2
80005878:	00f687b3          	add	a5,a3,a5
8000587c:	feff0737          	lui	a4,0xfeff0
80005880:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efae14e>
80005884:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:299

    ServicePipe[mySlot].header.header           = makeAddress(0, 0) | PERIPH_SOUTH;
80005888:	00000593          	li	a1,0
8000588c:	00000513          	li	a0,0
80005890:	b09fd0ef          	jal	ra,80003398 <makeAddress>
80005894:	00050713          	mv	a4,a0
80005898:	000407b7          	lui	a5,0x40
8000589c:	00f766b3          	or	a3,a4,a5
800058a0:	800207b7          	lui	a5,0x80020
800058a4:	fec42703          	lw	a4,-20(s0)
800058a8:	7fc78613          	addi	a2,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
800058ac:	00070793          	mv	a5,a4
800058b0:	00479793          	slli	a5,a5,0x4
800058b4:	40e787b3          	sub	a5,a5,a4
800058b8:	00279793          	slli	a5,a5,0x2
800058bc:	00f607b3          	add	a5,a2,a5
800058c0:	00d7a423          	sw	a3,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:300
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
800058c4:	800207b7          	lui	a5,0x80020
800058c8:	fec42703          	lw	a4,-20(s0)
800058cc:	7fc78693          	addi	a3,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
800058d0:	00070793          	mv	a5,a4
800058d4:	00479793          	slli	a5,a5,0x4
800058d8:	40e787b3          	sub	a5,a5,a4
800058dc:	00279793          	slli	a5,a5,0x2
800058e0:	00f687b3          	add	a5,a3,a5
800058e4:	00b00713          	li	a4,11
800058e8:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:301
    ServicePipe[mySlot].header.service          = TASK_ALLOCATION_SEND;
800058ec:	800207b7          	lui	a5,0x80020
800058f0:	fec42703          	lw	a4,-20(s0)
800058f4:	7fc78693          	addi	a3,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
800058f8:	00070793          	mv	a5,a4
800058fc:	00479793          	slli	a5,a5,0x4
80005900:	40e787b3          	sub	a5,a5,a4
80005904:	00279793          	slli	a5,a5,0x2
80005908:	00f687b3          	add	a5,a3,a5
8000590c:	03000713          	li	a4,48
80005910:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:302
    ServicePipe[mySlot].header.task_id          = task;
80005914:	800207b7          	lui	a5,0x80020
80005918:	fec42703          	lw	a4,-20(s0)
8000591c:	7fc78693          	addi	a3,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
80005920:	00070793          	mv	a5,a4
80005924:	00479793          	slli	a5,a5,0x4
80005928:	40e787b3          	sub	a5,a5,a4
8000592c:	00279793          	slli	a5,a5,0x2
80005930:	00f687b3          	add	a5,a3,a5
80005934:	fd842703          	lw	a4,-40(s0)
80005938:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:303
    ServicePipe[mySlot].header.task_app_id      = app;
8000593c:	800207b7          	lui	a5,0x80020
80005940:	fec42703          	lw	a4,-20(s0)
80005944:	7fc78693          	addi	a3,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
80005948:	00070793          	mv	a5,a4
8000594c:	00479793          	slli	a5,a5,0x4
80005950:	40e787b3          	sub	a5,a5,a4
80005954:	00279793          	slli	a5,a5,0x2
80005958:	00f687b3          	add	a5,a3,a5
8000595c:	fdc42703          	lw	a4,-36(s0)
80005960:	02e7a223          	sw	a4,36(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:304
    ServicePipe[mySlot].header.task_dest_addr   = dest_addr;
80005964:	800207b7          	lui	a5,0x80020
80005968:	fec42703          	lw	a4,-20(s0)
8000596c:	7fc78693          	addi	a3,a5,2044 # 800207fc <__stack_top+0xfffdea4c>
80005970:	00070793          	mv	a5,a4
80005974:	00479793          	slli	a5,a5,0x4
80005978:	40e787b3          	sub	a5,a5,a4
8000597c:	00279793          	slli	a5,a5,0x2
80005980:	00f687b3          	add	a5,a3,a5
80005984:	fd442703          	lw	a4,-44(s0)
80005988:	02e7ac23          	sw	a4,56(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:306

    API_PushSendQueue(SERVICE, mySlot);
8000598c:	fec42583          	lw	a1,-20(s0)
80005990:	10100537          	lui	a0,0x10100
80005994:	a45fd0ef          	jal	ra,800033d8 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:307
    return;    
80005998:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:308
}
8000599c:	02c12083          	lw	ra,44(sp)
800059a0:	02812403          	lw	s0,40(sp)
800059a4:	03010113          	addi	sp,sp,48
800059a8:	00008067          	ret

800059ac <API_TaskAllocated>:
API_TaskAllocated():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:310

void API_TaskAllocated(unsigned int task_id, unsigned int app_id){
800059ac:	fd010113          	addi	sp,sp,-48
800059b0:	02112623          	sw	ra,44(sp)
800059b4:	02812423          	sw	s0,40(sp)
800059b8:	03010413          	addi	s0,sp,48
800059bc:	fca42e23          	sw	a0,-36(s0)
800059c0:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:312
    unsigned int i;
    applications[app_id].tasks[task_id].status = TASK_ALLOCATED;
800059c4:	80021737          	lui	a4,0x80021
800059c8:	fdc42783          	lw	a5,-36(s0)
800059cc:	fd842683          	lw	a3,-40(s0)
800059d0:	29870613          	addi	a2,a4,664 # 80021298 <__stack_top+0xfffdf4e8>
800059d4:	00078713          	mv	a4,a5
800059d8:	00171713          	slli	a4,a4,0x1
800059dc:	00f70733          	add	a4,a4,a5
800059e0:	00271793          	slli	a5,a4,0x2
800059e4:	00078713          	mv	a4,a5
800059e8:	00068793          	mv	a5,a3
800059ec:	00279793          	slli	a5,a5,0x2
800059f0:	00d787b3          	add	a5,a5,a3
800059f4:	00579793          	slli	a5,a5,0x5
800059f8:	00f707b3          	add	a5,a4,a5
800059fc:	00f607b3          	add	a5,a2,a5
80005a00:	00400713          	li	a4,4
80005a04:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:314

    for(i = 0; i < applications[app_id].numTasks; i++){
80005a08:	fe042623          	sw	zero,-20(s0)
80005a0c:	0580006f          	j	80005a64 <API_TaskAllocated+0xb8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:315
        if(applications[app_id].tasks[i].status != TASK_ALLOCATED){
80005a10:	80021737          	lui	a4,0x80021
80005a14:	fec42783          	lw	a5,-20(s0)
80005a18:	fd842683          	lw	a3,-40(s0)
80005a1c:	29870613          	addi	a2,a4,664 # 80021298 <__stack_top+0xfffdf4e8>
80005a20:	00078713          	mv	a4,a5
80005a24:	00171713          	slli	a4,a4,0x1
80005a28:	00f70733          	add	a4,a4,a5
80005a2c:	00271793          	slli	a5,a4,0x2
80005a30:	00078713          	mv	a4,a5
80005a34:	00068793          	mv	a5,a3
80005a38:	00279793          	slli	a5,a5,0x2
80005a3c:	00d787b3          	add	a5,a5,a3
80005a40:	00579793          	slli	a5,a5,0x5
80005a44:	00f707b3          	add	a5,a4,a5
80005a48:	00f607b3          	add	a5,a2,a5
80005a4c:	0147a703          	lw	a4,20(a5)
80005a50:	00400793          	li	a5,4
80005a54:	06f71663          	bne	a4,a5,80005ac0 <API_TaskAllocated+0x114>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:314 (discriminator 2)
    for(i = 0; i < applications[app_id].numTasks; i++){
80005a58:	fec42783          	lw	a5,-20(s0)
80005a5c:	00178793          	addi	a5,a5,1
80005a60:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:314 (discriminator 1)
80005a64:	800216b7          	lui	a3,0x80021
80005a68:	fd842703          	lw	a4,-40(s0)
80005a6c:	00070793          	mv	a5,a4
80005a70:	00279793          	slli	a5,a5,0x2
80005a74:	00e787b3          	add	a5,a5,a4
80005a78:	00579793          	slli	a5,a5,0x5
80005a7c:	29868713          	addi	a4,a3,664 # 80021298 <__stack_top+0xfffdf4e8>
80005a80:	00e787b3          	add	a5,a5,a4
80005a84:	0107a783          	lw	a5,16(a5)
80005a88:	fec42703          	lw	a4,-20(s0)
80005a8c:	f8f762e3          	bltu	a4,a5,80005a10 <API_TaskAllocated+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:320
            //printi(i);
            return;
        }
    }
    printsv("Application allocated: ", app_id);
80005a90:	fd842783          	lw	a5,-40(s0)
80005a94:	00078593          	mv	a1,a5
80005a98:	800077b7          	lui	a5,0x80007
80005a9c:	37078513          	addi	a0,a5,880 # 80007370 <__stack_top+0xfffc55c0>
80005aa0:	c50fd0ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:321
    API_ApplicationStart(app_id);
80005aa4:	fd842503          	lw	a0,-40(s0)
80005aa8:	02c000ef          	jal	ra,80005ad4 <API_ApplicationStart>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:322
    prints("\tStart command sent to every task.\n");
80005aac:	800077b7          	lui	a5,0x80007
80005ab0:	38878513          	addi	a0,a5,904 # 80007388 <__stack_top+0xfffc55d8>
80005ab4:	b90fd0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:323
    return;
80005ab8:	00000013          	nop
80005abc:	0080006f          	j	80005ac4 <API_TaskAllocated+0x118>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:317
            return;
80005ac0:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:324
}
80005ac4:	02c12083          	lw	ra,44(sp)
80005ac8:	02812403          	lw	s0,40(sp)
80005acc:	03010113          	addi	sp,sp,48
80005ad0:	00008067          	ret

80005ad4 <API_ApplicationStart>:
API_ApplicationStart():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:326

void API_ApplicationStart(unsigned int app_id){
80005ad4:	fd010113          	addi	sp,sp,-48
80005ad8:	02112623          	sw	ra,44(sp)
80005adc:	02812423          	sw	s0,40(sp)
80005ae0:	03010413          	addi	s0,sp,48
80005ae4:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:329
    unsigned int i, j;
    unsigned int mySlot;
    for(i = 0; i < applications[app_id].numTasks; i++){
80005ae8:	fe042623          	sw	zero,-20(s0)
80005aec:	2640006f          	j	80005d50 <API_ApplicationStart+0x27c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:331
        do{
            mySlot = API_GetMessageSlot();
80005af0:	331000ef          	jal	ra,80006620 <API_GetMessageSlot>
80005af4:	fea42223          	sw	a0,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:332
            if(mySlot == PIPE_FULL){
80005af8:	fe442703          	lw	a4,-28(s0)
80005afc:	fdfe07b7          	lui	a5,0xfdfe0
80005b00:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e04d>
80005b04:	00f71463          	bne	a4,a5,80005b0c <API_ApplicationStart+0x38>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:334
                // Runs the NI Handler to send/receive packets, opening space in the PIPE
                API_NI_Handler();
80005b08:	d7cfe0ef          	jal	ra,80004084 <API_NI_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:336
            }
        }while(mySlot == PIPE_FULL);
80005b0c:	fe442703          	lw	a4,-28(s0)
80005b10:	fdfe07b7          	lui	a5,0xfdfe0
80005b14:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e04d>
80005b18:	fcf70ce3          	beq	a4,a5,80005af0 <API_ApplicationStart+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:338

        MessagePipe[mySlot].holder = PIPE_SYS_HOLDER;
80005b1c:	800217b7          	lui	a5,0x80021
80005b20:	fe442683          	lw	a3,-28(s0)
80005b24:	96078713          	addi	a4,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
80005b28:	24400793          	li	a5,580
80005b2c:	02f687b3          	mul	a5,a3,a5
80005b30:	00f707b3          	add	a5,a4,a5
80005b34:	feff0737          	lui	a4,0xfeff0
80005b38:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efae14e>
80005b3c:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:340

        MessagePipe[mySlot].header.header           = applications[app_id].tasks[i].addr;
80005b40:	80021737          	lui	a4,0x80021
80005b44:	fec42783          	lw	a5,-20(s0)
80005b48:	fdc42683          	lw	a3,-36(s0)
80005b4c:	29870613          	addi	a2,a4,664 # 80021298 <__stack_top+0xfffdf4e8>
80005b50:	00078713          	mv	a4,a5
80005b54:	00171713          	slli	a4,a4,0x1
80005b58:	00f70733          	add	a4,a4,a5
80005b5c:	00271793          	slli	a5,a4,0x2
80005b60:	00078713          	mv	a4,a5
80005b64:	00068793          	mv	a5,a3
80005b68:	00279793          	slli	a5,a5,0x2
80005b6c:	00d787b3          	add	a5,a5,a3
80005b70:	00579793          	slli	a5,a5,0x5
80005b74:	00f707b3          	add	a5,a4,a5
80005b78:	00f607b3          	add	a5,a2,a5
80005b7c:	0187a703          	lw	a4,24(a5)
80005b80:	800217b7          	lui	a5,0x80021
80005b84:	fe442603          	lw	a2,-28(s0)
80005b88:	96078693          	addi	a3,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
80005b8c:	24400793          	li	a5,580
80005b90:	02f607b3          	mul	a5,a2,a5
80005b94:	00f687b3          	add	a5,a3,a5
80005b98:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:341
        MessagePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE + applications[app_id].numTasks + 1;
80005b9c:	800216b7          	lui	a3,0x80021
80005ba0:	fdc42703          	lw	a4,-36(s0)
80005ba4:	00070793          	mv	a5,a4
80005ba8:	00279793          	slli	a5,a5,0x2
80005bac:	00e787b3          	add	a5,a5,a4
80005bb0:	00579793          	slli	a5,a5,0x5
80005bb4:	29868713          	addi	a4,a3,664 # 80021298 <__stack_top+0xfffdf4e8>
80005bb8:	00e787b3          	add	a5,a5,a4
80005bbc:	0107a783          	lw	a5,16(a5)
80005bc0:	00c78713          	addi	a4,a5,12
80005bc4:	800217b7          	lui	a5,0x80021
80005bc8:	fe442603          	lw	a2,-28(s0)
80005bcc:	96078693          	addi	a3,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
80005bd0:	24400793          	li	a5,580
80005bd4:	02f607b3          	mul	a5,a2,a5
80005bd8:	00f687b3          	add	a5,a3,a5
80005bdc:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:342
        MessagePipe[mySlot].header.service          = TASK_START;
80005be0:	800217b7          	lui	a5,0x80021
80005be4:	fe442683          	lw	a3,-28(s0)
80005be8:	96078713          	addi	a4,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
80005bec:	24400793          	li	a5,580
80005bf0:	02f687b3          	mul	a5,a3,a5
80005bf4:	00f707b3          	add	a5,a4,a5
80005bf8:	40000713          	li	a4,1024
80005bfc:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:343
        MessagePipe[mySlot].header.task_id          = i;
80005c00:	800217b7          	lui	a5,0x80021
80005c04:	fe442683          	lw	a3,-28(s0)
80005c08:	96078713          	addi	a4,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
80005c0c:	24400793          	li	a5,580
80005c10:	02f687b3          	mul	a5,a3,a5
80005c14:	00f707b3          	add	a5,a4,a5
80005c18:	fec42703          	lw	a4,-20(s0)
80005c1c:	00e7ac23          	sw	a4,24(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:344
        MessagePipe[mySlot].header.task_app_id      = app_id;
80005c20:	800217b7          	lui	a5,0x80021
80005c24:	fe442683          	lw	a3,-28(s0)
80005c28:	96078713          	addi	a4,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
80005c2c:	24400793          	li	a5,580
80005c30:	02f687b3          	mul	a5,a3,a5
80005c34:	00f707b3          	add	a5,a4,a5
80005c38:	fdc42703          	lw	a4,-36(s0)
80005c3c:	02e7a423          	sw	a4,40(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:345
        MessagePipe[mySlot].msg.length              = applications[app_id].numTasks;
80005c40:	800216b7          	lui	a3,0x80021
80005c44:	fdc42703          	lw	a4,-36(s0)
80005c48:	00070793          	mv	a5,a4
80005c4c:	00279793          	slli	a5,a5,0x2
80005c50:	00e787b3          	add	a5,a5,a4
80005c54:	00579793          	slli	a5,a5,0x5
80005c58:	29868713          	addi	a4,a3,664 # 80021298 <__stack_top+0xfffdf4e8>
80005c5c:	00e787b3          	add	a5,a5,a4
80005c60:	0107a703          	lw	a4,16(a5)
80005c64:	800217b7          	lui	a5,0x80021
80005c68:	fe442603          	lw	a2,-28(s0)
80005c6c:	24400693          	li	a3,580
80005c70:	02d606b3          	mul	a3,a2,a3
80005c74:	96078793          	addi	a5,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
80005c78:	00f687b3          	add	a5,a3,a5
80005c7c:	04e7a023          	sw	a4,64(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:346
        for(j = 0; j < applications[app_id].numTasks; j++){
80005c80:	fe042423          	sw	zero,-24(s0)
80005c84:	0880006f          	j	80005d0c <API_ApplicationStart+0x238>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:347 (discriminator 3)
            MessagePipe[mySlot].msg.msg[j]          = applications[app_id].tasks[j].addr;
80005c88:	80021737          	lui	a4,0x80021
80005c8c:	fe842783          	lw	a5,-24(s0)
80005c90:	fdc42683          	lw	a3,-36(s0)
80005c94:	29870613          	addi	a2,a4,664 # 80021298 <__stack_top+0xfffdf4e8>
80005c98:	00078713          	mv	a4,a5
80005c9c:	00171713          	slli	a4,a4,0x1
80005ca0:	00f70733          	add	a4,a4,a5
80005ca4:	00271793          	slli	a5,a4,0x2
80005ca8:	00078713          	mv	a4,a5
80005cac:	00068793          	mv	a5,a3
80005cb0:	00279793          	slli	a5,a5,0x2
80005cb4:	00d787b3          	add	a5,a5,a3
80005cb8:	00579793          	slli	a5,a5,0x5
80005cbc:	00f707b3          	add	a5,a4,a5
80005cc0:	00f607b3          	add	a5,a2,a5
80005cc4:	0187a683          	lw	a3,24(a5)
80005cc8:	80021637          	lui	a2,0x80021
80005ccc:	fe442703          	lw	a4,-28(s0)
80005cd0:	00070793          	mv	a5,a4
80005cd4:	00379793          	slli	a5,a5,0x3
80005cd8:	00e787b3          	add	a5,a5,a4
80005cdc:	00479793          	slli	a5,a5,0x4
80005ce0:	00e787b3          	add	a5,a5,a4
80005ce4:	fe842703          	lw	a4,-24(s0)
80005ce8:	00e787b3          	add	a5,a5,a4
80005cec:	01078793          	addi	a5,a5,16
80005cf0:	96060713          	addi	a4,a2,-1696 # 80020960 <__stack_top+0xfffdebb0>
80005cf4:	00279793          	slli	a5,a5,0x2
80005cf8:	00f707b3          	add	a5,a4,a5
80005cfc:	00d7a223          	sw	a3,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:346 (discriminator 3)
        for(j = 0; j < applications[app_id].numTasks; j++){
80005d00:	fe842783          	lw	a5,-24(s0)
80005d04:	00178793          	addi	a5,a5,1
80005d08:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:346 (discriminator 1)
80005d0c:	800216b7          	lui	a3,0x80021
80005d10:	fdc42703          	lw	a4,-36(s0)
80005d14:	00070793          	mv	a5,a4
80005d18:	00279793          	slli	a5,a5,0x2
80005d1c:	00e787b3          	add	a5,a5,a4
80005d20:	00579793          	slli	a5,a5,0x5
80005d24:	29868713          	addi	a4,a3,664 # 80021298 <__stack_top+0xfffdf4e8>
80005d28:	00e787b3          	add	a5,a5,a4
80005d2c:	0107a783          	lw	a5,16(a5)
80005d30:	fe842703          	lw	a4,-24(s0)
80005d34:	f4f76ae3          	bltu	a4,a5,80005c88 <API_ApplicationStart+0x1b4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:349 (discriminator 2)
        }
        API_PushSendQueue(MESSAGE, mySlot);
80005d38:	fe442583          	lw	a1,-28(s0)
80005d3c:	20200537          	lui	a0,0x20200
80005d40:	e98fd0ef          	jal	ra,800033d8 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:329 (discriminator 2)
    for(i = 0; i < applications[app_id].numTasks; i++){
80005d44:	fec42783          	lw	a5,-20(s0)
80005d48:	00178793          	addi	a5,a5,1
80005d4c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:329 (discriminator 1)
80005d50:	800216b7          	lui	a3,0x80021
80005d54:	fdc42703          	lw	a4,-36(s0)
80005d58:	00070793          	mv	a5,a4
80005d5c:	00279793          	slli	a5,a5,0x2
80005d60:	00e787b3          	add	a5,a5,a4
80005d64:	00579793          	slli	a5,a5,0x5
80005d68:	29868713          	addi	a4,a3,664 # 80021298 <__stack_top+0xfffdf4e8>
80005d6c:	00e787b3          	add	a5,a5,a4
80005d70:	0107a783          	lw	a5,16(a5)
80005d74:	fec42703          	lw	a4,-20(s0)
80005d78:	d6f76ce3          	bltu	a4,a5,80005af0 <API_ApplicationStart+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:351
    }
    return;
80005d7c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:352
}
80005d80:	02c12083          	lw	ra,44(sp)
80005d84:	02812403          	lw	s0,40(sp)
80005d88:	03010113          	addi	sp,sp,48
80005d8c:	00008067          	ret

80005d90 <API_TaskListInit>:
API_TaskListInit():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:13
#include "chronos.h"

// Stores information about each running task
//extern volatile Task TaskList[ NUM_MAX_TASKS ];

void API_TaskListInit(){
80005d90:	fe010113          	addi	sp,sp,-32
80005d94:	00812e23          	sw	s0,28(sp)
80005d98:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:15
    unsigned int i, j;
    for (i = 0; i < NUM_MAX_TASKS; i++){
80005d9c:	fe042623          	sw	zero,-20(s0)
80005da0:	0840006f          	j	80005e24 <API_TaskListInit+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:16
        TaskList[i].status = TASK_SLOT_EMPTY;
80005da4:	800226b7          	lui	a3,0x80022
80005da8:	fec42703          	lw	a4,-20(s0)
80005dac:	00070793          	mv	a5,a4
80005db0:	00579793          	slli	a5,a5,0x5
80005db4:	00e787b3          	add	a5,a5,a4
80005db8:	00279793          	slli	a5,a5,0x2
80005dbc:	a1868713          	addi	a4,a3,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80005dc0:	00e787b3          	add	a5,a5,a4
80005dc4:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:17
        for (j = 0; j < NUM_MAX_APP_TASKS; j++){
80005dc8:	fe042423          	sw	zero,-24(s0)
80005dcc:	0400006f          	j	80005e0c <API_TaskListInit+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:18 (discriminator 3)
            TaskList[i].PendingReq[j] = FALSE;
80005dd0:	800226b7          	lui	a3,0x80022
80005dd4:	fec42703          	lw	a4,-20(s0)
80005dd8:	00070793          	mv	a5,a4
80005ddc:	00579793          	slli	a5,a5,0x5
80005de0:	00e787b3          	add	a5,a5,a4
80005de4:	fe842703          	lw	a4,-24(s0)
80005de8:	00e787b3          	add	a5,a5,a4
80005dec:	00c78793          	addi	a5,a5,12
80005df0:	00279713          	slli	a4,a5,0x2
80005df4:	a1868793          	addi	a5,a3,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80005df8:	00f707b3          	add	a5,a4,a5
80005dfc:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:17 (discriminator 3)
        for (j = 0; j < NUM_MAX_APP_TASKS; j++){
80005e00:	fe842783          	lw	a5,-24(s0)
80005e04:	00178793          	addi	a5,a5,1
80005e08:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:17 (discriminator 1)
80005e0c:	fe842703          	lw	a4,-24(s0)
80005e10:	00900793          	li	a5,9
80005e14:	fae7fee3          	bleu	a4,a5,80005dd0 <API_TaskListInit+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 2)
    for (i = 0; i < NUM_MAX_TASKS; i++){
80005e18:	fec42783          	lw	a5,-20(s0)
80005e1c:	00178793          	addi	a5,a5,1
80005e20:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 1)
80005e24:	fec42703          	lw	a4,-20(s0)
80005e28:	00500793          	li	a5,5
80005e2c:	f6e7fce3          	bleu	a4,a5,80005da4 <API_TaskListInit+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:21
        }
    }
    return;
80005e30:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:22
}
80005e34:	01c12403          	lw	s0,28(sp)
80005e38:	02010113          	addi	sp,sp,32
80005e3c:	00008067          	ret

80005e40 <API_GetCurrentTaskSlot>:
API_GetCurrentTaskSlot():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:24

unsigned int API_GetCurrentTaskSlot(){
80005e40:	fe010113          	addi	sp,sp,-32
80005e44:	00112e23          	sw	ra,28(sp)
80005e48:	00812c23          	sw	s0,24(sp)
80005e4c:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:26
    // The handle of the currently running ( calling ) task on the kernel.
    TaskHandle_t xHandle = xTaskGetCurrentTaskHandle();
80005e50:	dfdfc0ef          	jal	ra,80002c4c <xTaskGetCurrentTaskHandle>
80005e54:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:27
    unsigned int i = 0;
80005e58:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:28
    for ( i = 0 ; i < NUM_MAX_TASKS ; i++ ) {
80005e5c:	fe042623          	sw	zero,-20(s0)
80005e60:	0440006f          	j	80005ea4 <API_GetCurrentTaskSlot+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:29
        if ( TaskList[ i ].TaskHandler == xHandle ) {
80005e64:	800227b7          	lui	a5,0x80022
80005e68:	fec42703          	lw	a4,-20(s0)
80005e6c:	a1878693          	addi	a3,a5,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80005e70:	00070793          	mv	a5,a4
80005e74:	00579793          	slli	a5,a5,0x5
80005e78:	00e787b3          	add	a5,a5,a4
80005e7c:	00279793          	slli	a5,a5,0x2
80005e80:	00f687b3          	add	a5,a3,a5
80005e84:	0187a783          	lw	a5,24(a5)
80005e88:	fe842703          	lw	a4,-24(s0)
80005e8c:	00f71663          	bne	a4,a5,80005e98 <API_GetCurrentTaskSlot+0x58>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:30
            return( i );
80005e90:	fec42783          	lw	a5,-20(s0)
80005e94:	02c0006f          	j	80005ec0 <API_GetCurrentTaskSlot+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:28 (discriminator 2)
    for ( i = 0 ; i < NUM_MAX_TASKS ; i++ ) {
80005e98:	fec42783          	lw	a5,-20(s0)
80005e9c:	00178793          	addi	a5,a5,1
80005ea0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:28 (discriminator 1)
80005ea4:	fec42703          	lw	a4,-20(s0)
80005ea8:	00500793          	li	a5,5
80005eac:	fae7fce3          	bleu	a4,a5,80005e64 <API_GetCurrentTaskSlot+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:33
        }
    }
    prints("returning erro0\n");
80005eb0:	800077b7          	lui	a5,0x80007
80005eb4:	3ac78513          	addi	a0,a5,940 # 800073ac <__stack_top+0xfffc55fc>
80005eb8:	f8dfc0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:34
    return ERRO;
80005ebc:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:35
}
80005ec0:	00078513          	mv	a0,a5
80005ec4:	01c12083          	lw	ra,28(sp)
80005ec8:	01812403          	lw	s0,24(sp)
80005ecc:	02010113          	addi	sp,sp,32
80005ed0:	00008067          	ret

80005ed4 <API_GetFreeTaskSlot>:
API_GetFreeTaskSlot():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:37

unsigned int API_GetFreeTaskSlot(){
80005ed4:	fe010113          	addi	sp,sp,-32
80005ed8:	00112e23          	sw	ra,28(sp)
80005edc:	00812c23          	sw	s0,24(sp)
80005ee0:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:39
    unsigned int i;
    for (i = 0; i < NUM_MAX_TASKS; i++){
80005ee4:	fe042623          	sw	zero,-20(s0)
80005ee8:	0400006f          	j	80005f28 <API_GetFreeTaskSlot+0x54>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:40
        if (TaskList[i].status == TASK_SLOT_EMPTY){
80005eec:	800226b7          	lui	a3,0x80022
80005ef0:	fec42703          	lw	a4,-20(s0)
80005ef4:	00070793          	mv	a5,a4
80005ef8:	00579793          	slli	a5,a5,0x5
80005efc:	00e787b3          	add	a5,a5,a4
80005f00:	00279793          	slli	a5,a5,0x2
80005f04:	a1868713          	addi	a4,a3,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80005f08:	00e787b3          	add	a5,a5,a4
80005f0c:	0007a783          	lw	a5,0(a5)
80005f10:	00079663          	bnez	a5,80005f1c <API_GetFreeTaskSlot+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:41
            return i;
80005f14:	fec42783          	lw	a5,-20(s0)
80005f18:	02c0006f          	j	80005f44 <API_GetFreeTaskSlot+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:39 (discriminator 2)
    for (i = 0; i < NUM_MAX_TASKS; i++){
80005f1c:	fec42783          	lw	a5,-20(s0)
80005f20:	00178793          	addi	a5,a5,1
80005f24:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:39 (discriminator 1)
80005f28:	fec42703          	lw	a4,-20(s0)
80005f2c:	00500793          	li	a5,5
80005f30:	fae7fee3          	bleu	a4,a5,80005eec <API_GetFreeTaskSlot+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:44
        }
    }
    prints("returning erro1\n");
80005f34:	800077b7          	lui	a5,0x80007
80005f38:	3c078513          	addi	a0,a5,960 # 800073c0 <__stack_top+0xfffc5610>
80005f3c:	f09fc0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:45
    return ERRO;
80005f40:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:46
}
80005f44:	00078513          	mv	a0,a5
80005f48:	01c12083          	lw	ra,28(sp)
80005f4c:	01812403          	lw	s0,24(sp)
80005f50:	02010113          	addi	sp,sp,32
80005f54:	00008067          	ret

80005f58 <API_TaskAllocation>:
API_TaskAllocation():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:48

unsigned int API_TaskAllocation(unsigned int task_id, unsigned int txt_size, unsigned int bss_size, unsigned int start_point, unsigned int task_app_id){
80005f58:	fc010113          	addi	sp,sp,-64
80005f5c:	02112e23          	sw	ra,60(sp)
80005f60:	02812c23          	sw	s0,56(sp)
80005f64:	04010413          	addi	s0,sp,64
80005f68:	fca42e23          	sw	a0,-36(s0)
80005f6c:	fcb42c23          	sw	a1,-40(s0)
80005f70:	fcc42a23          	sw	a2,-44(s0)
80005f74:	fcd42823          	sw	a3,-48(s0)
80005f78:	fce42623          	sw	a4,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:49
    unsigned int tslot = API_GetFreeTaskSlot();
80005f7c:	f59ff0ef          	jal	ra,80005ed4 <API_GetFreeTaskSlot>
80005f80:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:51
    int i;
    if(tslot == ERRO){
80005f84:	fe842703          	lw	a4,-24(s0)
80005f88:	fff00793          	li	a5,-1
80005f8c:	00f71863          	bne	a4,a5,80005f9c <API_TaskAllocation+0x44>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:52
        prints("DEU RUIM NO API_GetFreeTaskSlot()\n");
80005f90:	800077b7          	lui	a5,0x80007
80005f94:	3d478513          	addi	a0,a5,980 # 800073d4 <__stack_top+0xfffc5624>
80005f98:	eadfc0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:54
    }
    printsv("Got slot: ", tslot);
80005f9c:	fe842783          	lw	a5,-24(s0)
80005fa0:	00078593          	mv	a1,a5
80005fa4:	800077b7          	lui	a5,0x80007
80005fa8:	3f878513          	addi	a0,a5,1016 # 800073f8 <__stack_top+0xfffc5648>
80005fac:	f45fc0ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:55
    TaskList[tslot].status = TASK_SLOT_WAITING_START;
80005fb0:	800226b7          	lui	a3,0x80022
80005fb4:	fe842703          	lw	a4,-24(s0)
80005fb8:	00070793          	mv	a5,a4
80005fbc:	00579793          	slli	a5,a5,0x5
80005fc0:	00e787b3          	add	a5,a5,a4
80005fc4:	00279793          	slli	a5,a5,0x2
80005fc8:	a1868713          	addi	a4,a3,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80005fcc:	00e787b3          	add	a5,a5,a4
80005fd0:	00200713          	li	a4,2
80005fd4:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:56
    TaskList[tslot].waitingMsg = FALSE;
80005fd8:	800227b7          	lui	a5,0x80022
80005fdc:	fe842703          	lw	a4,-24(s0)
80005fe0:	a1878693          	addi	a3,a5,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80005fe4:	00070793          	mv	a5,a4
80005fe8:	00579793          	slli	a5,a5,0x5
80005fec:	00e787b3          	add	a5,a5,a4
80005ff0:	00279793          	slli	a5,a5,0x2
80005ff4:	00f687b3          	add	a5,a3,a5
80005ff8:	0007ae23          	sw	zero,28(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:57
    TaskList[tslot].TaskID = task_id;
80005ffc:	800226b7          	lui	a3,0x80022
80006000:	fe842703          	lw	a4,-24(s0)
80006004:	00070793          	mv	a5,a4
80006008:	00579793          	slli	a5,a5,0x5
8000600c:	00e787b3          	add	a5,a5,a4
80006010:	00279793          	slli	a5,a5,0x2
80006014:	a1868713          	addi	a4,a3,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80006018:	00e787b3          	add	a5,a5,a4
8000601c:	fdc42703          	lw	a4,-36(s0)
80006020:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:58
    TaskList[tslot].AppID = task_app_id;
80006024:	800227b7          	lui	a5,0x80022
80006028:	fe842703          	lw	a4,-24(s0)
8000602c:	a1878693          	addi	a3,a5,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80006030:	00070793          	mv	a5,a4
80006034:	00579793          	slli	a5,a5,0x5
80006038:	00e787b3          	add	a5,a5,a4
8000603c:	00279793          	slli	a5,a5,0x2
80006040:	00f687b3          	add	a5,a3,a5
80006044:	fcc42703          	lw	a4,-52(s0)
80006048:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:59
    TaskList[tslot].taskSize = 4 * (txt_size + bss_size); // it multiply by four because each word has 32 bits and the memory is addressed by byte - so each word is composed by 4 addresses
8000604c:	fd842703          	lw	a4,-40(s0)
80006050:	fd442783          	lw	a5,-44(s0)
80006054:	00f707b3          	add	a5,a4,a5
80006058:	00279693          	slli	a3,a5,0x2
8000605c:	800227b7          	lui	a5,0x80022
80006060:	fe842703          	lw	a4,-24(s0)
80006064:	a1878613          	addi	a2,a5,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80006068:	00070793          	mv	a5,a4
8000606c:	00579793          	slli	a5,a5,0x5
80006070:	00e787b3          	add	a5,a5,a4
80006074:	00279793          	slli	a5,a5,0x2
80006078:	00f607b3          	add	a5,a2,a5
8000607c:	02d7a223          	sw	a3,36(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:60
    printsv("Task total size (txt+bss): ", TaskList[tslot].taskSize);
80006080:	800227b7          	lui	a5,0x80022
80006084:	fe842703          	lw	a4,-24(s0)
80006088:	a1878693          	addi	a3,a5,-1512 # 80021a18 <__stack_top+0xfffdfc68>
8000608c:	00070793          	mv	a5,a4
80006090:	00579793          	slli	a5,a5,0x5
80006094:	00e787b3          	add	a5,a5,a4
80006098:	00279793          	slli	a5,a5,0x2
8000609c:	00f687b3          	add	a5,a3,a5
800060a0:	0247a783          	lw	a5,36(a5)
800060a4:	00078593          	mv	a1,a5
800060a8:	800077b7          	lui	a5,0x80007
800060ac:	40478513          	addi	a0,a5,1028 # 80007404 <__stack_top+0xfffc5654>
800060b0:	e41fc0ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:61
    TaskList[tslot].taskAddr = (unsigned int)pvPortMalloc(TaskList[tslot].taskSize+64);
800060b4:	800227b7          	lui	a5,0x80022
800060b8:	fe842703          	lw	a4,-24(s0)
800060bc:	a1878693          	addi	a3,a5,-1512 # 80021a18 <__stack_top+0xfffdfc68>
800060c0:	00070793          	mv	a5,a4
800060c4:	00579793          	slli	a5,a5,0x5
800060c8:	00e787b3          	add	a5,a5,a4
800060cc:	00279793          	slli	a5,a5,0x2
800060d0:	00f687b3          	add	a5,a3,a5
800060d4:	0247a783          	lw	a5,36(a5)
800060d8:	04078793          	addi	a5,a5,64
800060dc:	00078513          	mv	a0,a5
800060e0:	9e4fb0ef          	jal	ra,800012c4 <pvPortMalloc>
800060e4:	00050793          	mv	a5,a0
800060e8:	00078613          	mv	a2,a5
800060ec:	800227b7          	lui	a5,0x80022
800060f0:	fe842703          	lw	a4,-24(s0)
800060f4:	a1878693          	addi	a3,a5,-1512 # 80021a18 <__stack_top+0xfffdfc68>
800060f8:	00070793          	mv	a5,a4
800060fc:	00579793          	slli	a5,a5,0x5
80006100:	00e787b3          	add	a5,a5,a4
80006104:	00279793          	slli	a5,a5,0x2
80006108:	00f687b3          	add	a5,a3,a5
8000610c:	02c7a423          	sw	a2,40(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:62
    printsv("Task addr: ", TaskList[tslot].taskAddr);
80006110:	800227b7          	lui	a5,0x80022
80006114:	fe842703          	lw	a4,-24(s0)
80006118:	a1878693          	addi	a3,a5,-1512 # 80021a18 <__stack_top+0xfffdfc68>
8000611c:	00070793          	mv	a5,a4
80006120:	00579793          	slli	a5,a5,0x5
80006124:	00e787b3          	add	a5,a5,a4
80006128:	00279793          	slli	a5,a5,0x2
8000612c:	00f687b3          	add	a5,a3,a5
80006130:	0287a783          	lw	a5,40(a5)
80006134:	00078593          	mv	a1,a5
80006138:	800077b7          	lui	a5,0x80007
8000613c:	42078513          	addi	a0,a5,1056 # 80007420 <__stack_top+0xfffc5670>
80006140:	db1fc0ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:63
    TaskList[tslot].mainAddr =  TaskList[tslot].taskAddr + (4 * start_point);
80006144:	800227b7          	lui	a5,0x80022
80006148:	fe842703          	lw	a4,-24(s0)
8000614c:	a1878693          	addi	a3,a5,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80006150:	00070793          	mv	a5,a4
80006154:	00579793          	slli	a5,a5,0x5
80006158:	00e787b3          	add	a5,a5,a4
8000615c:	00279793          	slli	a5,a5,0x2
80006160:	00f687b3          	add	a5,a3,a5
80006164:	0287a703          	lw	a4,40(a5)
80006168:	fd042783          	lw	a5,-48(s0)
8000616c:	00279793          	slli	a5,a5,0x2
80006170:	00f706b3          	add	a3,a4,a5
80006174:	800227b7          	lui	a5,0x80022
80006178:	fe842703          	lw	a4,-24(s0)
8000617c:	a1878613          	addi	a2,a5,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80006180:	00070793          	mv	a5,a4
80006184:	00579793          	slli	a5,a5,0x5
80006188:	00e787b3          	add	a5,a5,a4
8000618c:	00279793          	slli	a5,a5,0x2
80006190:	00f607b3          	add	a5,a2,a5
80006194:	02d7a623          	sw	a3,44(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:69

    // filling the MemoryRegion_t struct
    //TaskList[tslot].memRegion.ulLengthInBytes = 0;// TaskList[tslot].taskSize;
    //TaskList[tslot].memRegion.pvBaseAddress = 0;//TaskList[tslot].taskAddr;

    for(i=0;i<NUM_MAX_APP_TASKS;i++){
80006198:	fe042623          	sw	zero,-20(s0)
8000619c:	0700006f          	j	8000620c <API_TaskAllocation+0x2b4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:70 (discriminator 3)
        TaskList[tslot].PendingReq[i] = FALSE;
800061a0:	800226b7          	lui	a3,0x80022
800061a4:	fe842703          	lw	a4,-24(s0)
800061a8:	00070793          	mv	a5,a4
800061ac:	00579793          	slli	a5,a5,0x5
800061b0:	00e787b3          	add	a5,a5,a4
800061b4:	fec42703          	lw	a4,-20(s0)
800061b8:	00e787b3          	add	a5,a5,a4
800061bc:	00c78793          	addi	a5,a5,12
800061c0:	00279713          	slli	a4,a5,0x2
800061c4:	a1868793          	addi	a5,a3,-1512 # 80021a18 <__stack_top+0xfffdfc68>
800061c8:	00f707b3          	add	a5,a4,a5
800061cc:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:71 (discriminator 3)
        TaskList[tslot].TasksMap[i] = 0;
800061d0:	800226b7          	lui	a3,0x80022
800061d4:	fe842703          	lw	a4,-24(s0)
800061d8:	00070793          	mv	a5,a4
800061dc:	00579793          	slli	a5,a5,0x5
800061e0:	00e787b3          	add	a5,a5,a4
800061e4:	fec42703          	lw	a4,-20(s0)
800061e8:	00e787b3          	add	a5,a5,a4
800061ec:	01478793          	addi	a5,a5,20
800061f0:	a1868713          	addi	a4,a3,-1512 # 80021a18 <__stack_top+0xfffdfc68>
800061f4:	00279793          	slli	a5,a5,0x2
800061f8:	00f707b3          	add	a5,a4,a5
800061fc:	0007a623          	sw	zero,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:69 (discriminator 3)
    for(i=0;i<NUM_MAX_APP_TASKS;i++){
80006200:	fec42783          	lw	a5,-20(s0)
80006204:	00178793          	addi	a5,a5,1
80006208:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:69 (discriminator 1)
8000620c:	fec42703          	lw	a4,-20(s0)
80006210:	00900793          	li	a5,9
80006214:	f8e7d6e3          	ble	a4,a5,800061a0 <API_TaskAllocation+0x248>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:74
    }

    return tslot;
80006218:	fe842783          	lw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:75
}
8000621c:	00078513          	mv	a0,a5
80006220:	03c12083          	lw	ra,60(sp)
80006224:	03812403          	lw	s0,56(sp)
80006228:	04010113          	addi	sp,sp,64
8000622c:	00008067          	ret

80006230 <API_GetTaskSlot>:
API_GetTaskSlot():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:77

unsigned int API_GetTaskSlot(unsigned int task_id, unsigned int app_id){
80006230:	fd010113          	addi	sp,sp,-48
80006234:	02112623          	sw	ra,44(sp)
80006238:	02812423          	sw	s0,40(sp)
8000623c:	03010413          	addi	s0,sp,48
80006240:	fca42e23          	sw	a0,-36(s0)
80006244:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:79
    unsigned int i;
    for( i = 0; i < NUM_MAX_APP_TASKS; i++){
80006248:	fe042623          	sw	zero,-20(s0)
8000624c:	0980006f          	j	800062e4 <API_GetTaskSlot+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:80
        if(task_id == TaskList[i].TaskID && app_id == TaskList[i].AppID && TaskList[i].status != TASK_SLOT_EMPTY)
80006250:	800226b7          	lui	a3,0x80022
80006254:	fec42703          	lw	a4,-20(s0)
80006258:	00070793          	mv	a5,a4
8000625c:	00579793          	slli	a5,a5,0x5
80006260:	00e787b3          	add	a5,a5,a4
80006264:	00279793          	slli	a5,a5,0x2
80006268:	a1868713          	addi	a4,a3,-1512 # 80021a18 <__stack_top+0xfffdfc68>
8000626c:	00e787b3          	add	a5,a5,a4
80006270:	0107a783          	lw	a5,16(a5)
80006274:	fdc42703          	lw	a4,-36(s0)
80006278:	06f71063          	bne	a4,a5,800062d8 <API_GetTaskSlot+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:80 (discriminator 1)
8000627c:	800227b7          	lui	a5,0x80022
80006280:	fec42703          	lw	a4,-20(s0)
80006284:	a1878693          	addi	a3,a5,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80006288:	00070793          	mv	a5,a4
8000628c:	00579793          	slli	a5,a5,0x5
80006290:	00e787b3          	add	a5,a5,a4
80006294:	00279793          	slli	a5,a5,0x2
80006298:	00f687b3          	add	a5,a3,a5
8000629c:	0147a783          	lw	a5,20(a5)
800062a0:	fd842703          	lw	a4,-40(s0)
800062a4:	02f71a63          	bne	a4,a5,800062d8 <API_GetTaskSlot+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:80 (discriminator 2)
800062a8:	800226b7          	lui	a3,0x80022
800062ac:	fec42703          	lw	a4,-20(s0)
800062b0:	00070793          	mv	a5,a4
800062b4:	00579793          	slli	a5,a5,0x5
800062b8:	00e787b3          	add	a5,a5,a4
800062bc:	00279793          	slli	a5,a5,0x2
800062c0:	a1868713          	addi	a4,a3,-1512 # 80021a18 <__stack_top+0xfffdfc68>
800062c4:	00e787b3          	add	a5,a5,a4
800062c8:	0007a783          	lw	a5,0(a5)
800062cc:	00078663          	beqz	a5,800062d8 <API_GetTaskSlot+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:81
            return i;
800062d0:	fec42783          	lw	a5,-20(s0)
800062d4:	02c0006f          	j	80006300 <API_GetTaskSlot+0xd0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:79 (discriminator 2)
    for( i = 0; i < NUM_MAX_APP_TASKS; i++){
800062d8:	fec42783          	lw	a5,-20(s0)
800062dc:	00178793          	addi	a5,a5,1
800062e0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:79 (discriminator 1)
800062e4:	fec42703          	lw	a4,-20(s0)
800062e8:	00900793          	li	a5,9
800062ec:	f6e7f2e3          	bleu	a4,a5,80006250 <API_GetTaskSlot+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:83
    }
    prints("returning erro2\n");
800062f0:	800077b7          	lui	a5,0x80007
800062f4:	42c78513          	addi	a0,a5,1068 # 8000742c <__stack_top+0xfffc567c>
800062f8:	b4dfc0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:84
    return ERRO;
800062fc:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:85
}
80006300:	00078513          	mv	a0,a5
80006304:	02c12083          	lw	ra,44(sp)
80006308:	02812403          	lw	s0,40(sp)
8000630c:	03010113          	addi	sp,sp,48
80006310:	00008067          	ret

80006314 <API_TaskStart>:
API_TaskStart():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:87

void API_TaskStart(unsigned int slot){
80006314:	fd010113          	addi	sp,sp,-48
80006318:	02112623          	sw	ra,44(sp)
8000631c:	02812423          	sw	s0,40(sp)
80006320:	03010413          	addi	s0,sp,48
80006324:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:89
    BaseType_t xReturned;
    TaskList[slot].status = TASK_SLOT_RUNNING;
80006328:	800226b7          	lui	a3,0x80022
8000632c:	fdc42703          	lw	a4,-36(s0)
80006330:	00070793          	mv	a5,a4
80006334:	00579793          	slli	a5,a5,0x5
80006338:	00e787b3          	add	a5,a5,a4
8000633c:	00279793          	slli	a5,a5,0x2
80006340:	a1868713          	addi	a4,a3,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80006344:	00e787b3          	add	a5,a5,a4
80006348:	00100713          	li	a4,1
8000634c:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:100
                                    tskIDLE_PRIORITY+1,         //uxPriority
                                    &TaskList[slot].TaskHandler,// pxCreatedTask
                                    NULL,                       // puxStackBuffer
                                    &TaskList[slot].memRegion );//xRegions*/
    
    xReturned = xTaskCreate(TaskList[slot].mainAddr,
80006350:	800227b7          	lui	a5,0x80022
80006354:	fdc42703          	lw	a4,-36(s0)
80006358:	a1878693          	addi	a3,a5,-1512 # 80021a18 <__stack_top+0xfffdfc68>
8000635c:	00070793          	mv	a5,a4
80006360:	00579793          	slli	a5,a5,0x5
80006364:	00e787b3          	add	a5,a5,a4
80006368:	00279793          	slli	a5,a5,0x2
8000636c:	00f687b3          	add	a5,a3,a5
80006370:	02c7a783          	lw	a5,44(a5)
80006374:	00078513          	mv	a0,a5
80006378:	fdc42703          	lw	a4,-36(s0)
8000637c:	00070793          	mv	a5,a4
80006380:	00579793          	slli	a5,a5,0x5
80006384:	00e787b3          	add	a5,a5,a4
80006388:	00279793          	slli	a5,a5,0x2
8000638c:	01078713          	addi	a4,a5,16
80006390:	800227b7          	lui	a5,0x80022
80006394:	a1878793          	addi	a5,a5,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80006398:	00f707b3          	add	a5,a4,a5
8000639c:	00878793          	addi	a5,a5,8
800063a0:	00000893          	li	a7,0
800063a4:	00000813          	li	a6,0
800063a8:	00100713          	li	a4,1
800063ac:	00000693          	li	a3,0
800063b0:	00002637          	lui	a2,0x2
800063b4:	3e860613          	addi	a2,a2,1000 # 23e8 <HEAP_SIZE-0xdc18>
800063b8:	800075b7          	lui	a1,0x80007
800063bc:	44058593          	addi	a1,a1,1088 # 80007440 <__stack_top+0xfffc5690>
800063c0:	b35fb0ef          	jal	ra,80001ef4 <xTaskGenericCreate>
800063c4:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:106
                            "LaTask",
                            9192,//8192,//4096,//16384,
                            NULL,
                            tskIDLE_PRIORITY+1,
                            &TaskList[slot].TaskHandler);
    if( xReturned != pdPASS ){
800063c8:	fec42703          	lw	a4,-20(s0)
800063cc:	00100793          	li	a5,1
800063d0:	00f70a63          	beq	a4,a5,800063e4 <API_TaskStart+0xd0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:107
        prints("ERROR - API_TaskStart!!!\n");
800063d4:	800077b7          	lui	a5,0x80007
800063d8:	44878513          	addi	a0,a5,1096 # 80007448 <__stack_top+0xfffc5698>
800063dc:	a69fc0ef          	jal	ra,80002e44 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:109
    }
    return;
800063e0:	00000013          	nop
800063e4:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:110
}
800063e8:	02c12083          	lw	ra,44(sp)
800063ec:	02812403          	lw	s0,40(sp)
800063f0:	03010113          	addi	sp,sp,48
800063f4:	00008067          	ret

800063f8 <API_FinishRunningTask>:
API_FinishRunningTask():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:113


void API_FinishRunningTask(){
800063f8:	fe010113          	addi	sp,sp,-32
800063fc:	00112e23          	sw	ra,28(sp)
80006400:	00812c23          	sw	s0,24(sp)
80006404:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:114
    unsigned int slot = API_GetCurrentTaskSlot();
80006408:	a39ff0ef          	jal	ra,80005e40 <API_GetCurrentTaskSlot>
8000640c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:115
    while(API_checkPipe(slot) == 1){
80006410:	00c0006f          	j	8000641c <API_FinishRunningTask+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:116
        vTaskDelay(1);
80006414:	00100513          	li	a0,1
80006418:	dd5fb0ef          	jal	ra,800021ec <vTaskDelay>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:115
    while(API_checkPipe(slot) == 1){
8000641c:	fec42503          	lw	a0,-20(s0)
80006420:	488000ef          	jal	ra,800068a8 <API_checkPipe>
80006424:	00050713          	mv	a4,a0
80006428:	00100793          	li	a5,1
8000642c:	fef704e3          	beq	a4,a5,80006414 <API_FinishRunningTask+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:118
    }
    vPortFree(TaskList[slot].taskAddr);
80006430:	800227b7          	lui	a5,0x80022
80006434:	fec42703          	lw	a4,-20(s0)
80006438:	a1878693          	addi	a3,a5,-1512 # 80021a18 <__stack_top+0xfffdfc68>
8000643c:	00070793          	mv	a5,a4
80006440:	00579793          	slli	a5,a5,0x5
80006444:	00e787b3          	add	a5,a5,a4
80006448:	00279793          	slli	a5,a5,0x2
8000644c:	00f687b3          	add	a5,a3,a5
80006450:	0287a783          	lw	a5,40(a5)
80006454:	00078513          	mv	a0,a5
80006458:	848fb0ef          	jal	ra,800014a0 <vPortFree>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:119
    API_SendFinishTask(TaskList[slot].TaskID, TaskList[slot].AppID);
8000645c:	800226b7          	lui	a3,0x80022
80006460:	fec42703          	lw	a4,-20(s0)
80006464:	00070793          	mv	a5,a4
80006468:	00579793          	slli	a5,a5,0x5
8000646c:	00e787b3          	add	a5,a5,a4
80006470:	00279793          	slli	a5,a5,0x2
80006474:	a1868713          	addi	a4,a3,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80006478:	00e787b3          	add	a5,a5,a4
8000647c:	0107a603          	lw	a2,16(a5)
80006480:	800227b7          	lui	a5,0x80022
80006484:	fec42703          	lw	a4,-20(s0)
80006488:	a1878693          	addi	a3,a5,-1512 # 80021a18 <__stack_top+0xfffdfc68>
8000648c:	00070793          	mv	a5,a4
80006490:	00579793          	slli	a5,a5,0x5
80006494:	00e787b3          	add	a5,a5,a4
80006498:	00279793          	slli	a5,a5,0x2
8000649c:	00f687b3          	add	a5,a3,a5
800064a0:	0147a783          	lw	a5,20(a5)
800064a4:	00078593          	mv	a1,a5
800064a8:	00060513          	mv	a0,a2
800064ac:	de4fd0ef          	jal	ra,80003a90 <API_SendFinishTask>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:120
    printsvsv("Task ", TaskList[slot].TaskID, "deleted with sucsess! From application ", TaskList[slot].AppID);
800064b0:	800226b7          	lui	a3,0x80022
800064b4:	fec42703          	lw	a4,-20(s0)
800064b8:	00070793          	mv	a5,a4
800064bc:	00579793          	slli	a5,a5,0x5
800064c0:	00e787b3          	add	a5,a5,a4
800064c4:	00279793          	slli	a5,a5,0x2
800064c8:	a1868713          	addi	a4,a3,-1512 # 80021a18 <__stack_top+0xfffdfc68>
800064cc:	00e787b3          	add	a5,a5,a4
800064d0:	0107a783          	lw	a5,16(a5)
800064d4:	00078593          	mv	a1,a5
800064d8:	800227b7          	lui	a5,0x80022
800064dc:	fec42703          	lw	a4,-20(s0)
800064e0:	a1878693          	addi	a3,a5,-1512 # 80021a18 <__stack_top+0xfffdfc68>
800064e4:	00070793          	mv	a5,a4
800064e8:	00579793          	slli	a5,a5,0x5
800064ec:	00e787b3          	add	a5,a5,a4
800064f0:	00279793          	slli	a5,a5,0x2
800064f4:	00f687b3          	add	a5,a3,a5
800064f8:	0147a783          	lw	a5,20(a5)
800064fc:	00078693          	mv	a3,a5
80006500:	800077b7          	lui	a5,0x80007
80006504:	46478613          	addi	a2,a5,1124 # 80007464 <__stack_top+0xfffc56b4>
80006508:	800077b7          	lui	a5,0x80007
8000650c:	48c78513          	addi	a0,a5,1164 # 8000748c <__stack_top+0xfffc56dc>
80006510:	a29fc0ef          	jal	ra,80002f38 <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:121
    TaskList[slot].status = TASK_SLOT_EMPTY;
80006514:	800226b7          	lui	a3,0x80022
80006518:	fec42703          	lw	a4,-20(s0)
8000651c:	00070793          	mv	a5,a4
80006520:	00579793          	slli	a5,a5,0x5
80006524:	00e787b3          	add	a5,a5,a4
80006528:	00279793          	slli	a5,a5,0x2
8000652c:	a1868713          	addi	a4,a3,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80006530:	00e787b3          	add	a5,a5,a4
80006534:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:122
    vTaskDelete(TaskList[slot].TaskHandler);
80006538:	800227b7          	lui	a5,0x80022
8000653c:	fec42703          	lw	a4,-20(s0)
80006540:	a1878693          	addi	a3,a5,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80006544:	00070793          	mv	a5,a4
80006548:	00579793          	slli	a5,a5,0x5
8000654c:	00e787b3          	add	a5,a5,a4
80006550:	00279793          	slli	a5,a5,0x2
80006554:	00f687b3          	add	a5,a3,a5
80006558:	0187a783          	lw	a5,24(a5)
8000655c:	00078513          	mv	a0,a5
80006560:	bb1fb0ef          	jal	ra,80002110 <vTaskDelete>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:123
    return;
80006564:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/applications.c:124
}
80006568:	01c12083          	lw	ra,28(sp)
8000656c:	01812403          	lw	s0,24(sp)
80006570:	02010113          	addi	sp,sp,32
80006574:	00008067          	ret

80006578 <API_PipeInitialization>:
API_PipeInitialization():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:11
extern volatile ServicePacket ServicePipe[PIPE_SIZE];
extern unsigned int messageID;

////////////////////////////////////////////////////////////
// Initialize the PIPE, setting the status of each slot to FREE
void API_PipeInitialization(){
80006578:	fe010113          	addi	sp,sp,-32
8000657c:	00812e23          	sw	s0,28(sp)
80006580:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:13
    int i;
    messageID = 0;
80006584:	800217b7          	lui	a5,0x80021
80006588:	8e07a623          	sw	zero,-1812(a5) # 800208ec <__stack_top+0xfffdeb3c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:14
    for( i = 0; i < PIPE_SIZE; i++ ){
8000658c:	fe042623          	sw	zero,-20(s0)
80006590:	0740006f          	j	80006604 <API_PipeInitialization+0x8c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:15 (discriminator 3)
        MessagePipe[i].status = PIPE_FREE;
80006594:	800217b7          	lui	a5,0x80021
80006598:	fec42683          	lw	a3,-20(s0)
8000659c:	24400713          	li	a4,580
800065a0:	02e68733          	mul	a4,a3,a4
800065a4:	96078793          	addi	a5,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
800065a8:	00f707b3          	add	a5,a4,a5
800065ac:	fff00713          	li	a4,-1
800065b0:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:16 (discriminator 3)
        MessagePipe[i].msgID  = 0;
800065b4:	800217b7          	lui	a5,0x80021
800065b8:	fec42683          	lw	a3,-20(s0)
800065bc:	96078713          	addi	a4,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
800065c0:	24400793          	li	a5,580
800065c4:	02f687b3          	mul	a5,a3,a5
800065c8:	00f707b3          	add	a5,a4,a5
800065cc:	0007a423          	sw	zero,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:17 (discriminator 3)
        ServicePipe[i].status = PIPE_FREE;
800065d0:	800206b7          	lui	a3,0x80020
800065d4:	fec42703          	lw	a4,-20(s0)
800065d8:	00070793          	mv	a5,a4
800065dc:	00479793          	slli	a5,a5,0x4
800065e0:	40e787b3          	sub	a5,a5,a4
800065e4:	00279793          	slli	a5,a5,0x2
800065e8:	7fc68713          	addi	a4,a3,2044 # 800207fc <__stack_top+0xfffdea4c>
800065ec:	00e787b3          	add	a5,a5,a4
800065f0:	fff00713          	li	a4,-1
800065f4:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:14 (discriminator 3)
    for( i = 0; i < PIPE_SIZE; i++ ){
800065f8:	fec42783          	lw	a5,-20(s0)
800065fc:	00178793          	addi	a5,a5,1
80006600:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:14 (discriminator 1)
80006604:	fec42703          	lw	a4,-20(s0)
80006608:	00300793          	li	a5,3
8000660c:	f8e7d4e3          	ble	a4,a5,80006594 <API_PipeInitialization+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:19
    }
    return;
80006610:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:20
}
80006614:	01c12403          	lw	s0,28(sp)
80006618:	02010113          	addi	sp,sp,32
8000661c:	00008067          	ret

80006620 <API_GetMessageSlot>:
API_GetMessageSlot():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:24

////////////////////////////////////////////////////////////
// Returns a free Message slot 
unsigned int API_GetMessageSlot(){
80006620:	fe010113          	addi	sp,sp,-32
80006624:	00812e23          	sw	s0,28(sp)
80006628:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:26
    int i;
    unsigned int sel = PIPE_FULL;
8000662c:	fdfe07b7          	lui	a5,0xfdfe0
80006630:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e04d>
80006634:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:27
    for( i = 0; i < PIPE_SIZE; i++ ){
80006638:	fe042623          	sw	zero,-20(s0)
8000663c:	0980006f          	j	800066d4 <API_GetMessageSlot+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:28
        if (MessagePipe[i].status == PIPE_FREE){
80006640:	800217b7          	lui	a5,0x80021
80006644:	fec42683          	lw	a3,-20(s0)
80006648:	24400713          	li	a4,580
8000664c:	02e68733          	mul	a4,a3,a4
80006650:	96078793          	addi	a5,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
80006654:	00f707b3          	add	a5,a4,a5
80006658:	0007a703          	lw	a4,0(a5)
8000665c:	fff00793          	li	a5,-1
80006660:	06f71463          	bne	a4,a5,800066c8 <API_GetMessageSlot+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:29
            MessagePipe[i].status = PIPE_OCCUPIED;
80006664:	800217b7          	lui	a5,0x80021
80006668:	fec42683          	lw	a3,-20(s0)
8000666c:	24400713          	li	a4,580
80006670:	02e68733          	mul	a4,a3,a4
80006674:	96078793          	addi	a5,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
80006678:	00f707b3          	add	a5,a4,a5
8000667c:	00100713          	li	a4,1
80006680:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:30
            MessagePipe[i].msgID = messageID;
80006684:	800217b7          	lui	a5,0x80021
80006688:	8ec7a703          	lw	a4,-1812(a5) # 800208ec <__stack_top+0xfffdeb3c>
8000668c:	800217b7          	lui	a5,0x80021
80006690:	fec42603          	lw	a2,-20(s0)
80006694:	96078693          	addi	a3,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
80006698:	24400793          	li	a5,580
8000669c:	02f607b3          	mul	a5,a2,a5
800066a0:	00f687b3          	add	a5,a3,a5
800066a4:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:31
            messageID++;
800066a8:	800217b7          	lui	a5,0x80021
800066ac:	8ec7a783          	lw	a5,-1812(a5) # 800208ec <__stack_top+0xfffdeb3c>
800066b0:	00178713          	addi	a4,a5,1
800066b4:	800217b7          	lui	a5,0x80021
800066b8:	8ee7a623          	sw	a4,-1812(a5) # 800208ec <__stack_top+0xfffdeb3c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:32
            sel = i;
800066bc:	fec42783          	lw	a5,-20(s0)
800066c0:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:33
            break;
800066c4:	01c0006f          	j	800066e0 <API_GetMessageSlot+0xc0>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:27 (discriminator 2)
    for( i = 0; i < PIPE_SIZE; i++ ){
800066c8:	fec42783          	lw	a5,-20(s0)
800066cc:	00178793          	addi	a5,a5,1
800066d0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:27 (discriminator 1)
800066d4:	fec42703          	lw	a4,-20(s0)
800066d8:	00300793          	li	a5,3
800066dc:	f6e7d2e3          	ble	a4,a5,80006640 <API_GetMessageSlot+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:36
        }
    }
    if(messageID > 16777215){
800066e0:	800217b7          	lui	a5,0x80021
800066e4:	8ec7a703          	lw	a4,-1812(a5) # 800208ec <__stack_top+0xfffdeb3c>
800066e8:	010007b7          	lui	a5,0x1000
800066ec:	06f76663          	bltu	a4,a5,80006758 <API_GetMessageSlot+0x138>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:37
        messageID = 256;
800066f0:	800217b7          	lui	a5,0x80021
800066f4:	10000713          	li	a4,256
800066f8:	8ee7a623          	sw	a4,-1812(a5) # 800208ec <__stack_top+0xfffdeb3c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:38
        for( i = 0; i < PIPE_SIZE; i++ ){
800066fc:	fe042623          	sw	zero,-20(s0)
80006700:	04c0006f          	j	8000674c <API_GetMessageSlot+0x12c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:39 (discriminator 3)
            MessagePipe[i].msgID = (MessagePipe[i].msgID & 0x000000FF);
80006704:	800217b7          	lui	a5,0x80021
80006708:	fec42683          	lw	a3,-20(s0)
8000670c:	96078713          	addi	a4,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
80006710:	24400793          	li	a5,580
80006714:	02f687b3          	mul	a5,a3,a5
80006718:	00f707b3          	add	a5,a4,a5
8000671c:	0087a783          	lw	a5,8(a5)
80006720:	0ff7f713          	andi	a4,a5,255
80006724:	800217b7          	lui	a5,0x80021
80006728:	fec42603          	lw	a2,-20(s0)
8000672c:	96078693          	addi	a3,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
80006730:	24400793          	li	a5,580
80006734:	02f607b3          	mul	a5,a2,a5
80006738:	00f687b3          	add	a5,a3,a5
8000673c:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:38 (discriminator 3)
        for( i = 0; i < PIPE_SIZE; i++ ){
80006740:	fec42783          	lw	a5,-20(s0)
80006744:	00178793          	addi	a5,a5,1
80006748:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:38 (discriminator 1)
8000674c:	fec42703          	lw	a4,-20(s0)
80006750:	00300793          	li	a5,3
80006754:	fae7d8e3          	ble	a4,a5,80006704 <API_GetMessageSlot+0xe4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:42
        }
    }
    return sel;
80006758:	fe842783          	lw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:43
}
8000675c:	00078513          	mv	a0,a5
80006760:	01c12403          	lw	s0,28(sp)
80006764:	02010113          	addi	sp,sp,32
80006768:	00008067          	ret

8000676c <API_GetServiceSlot>:
API_GetServiceSlot():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:47

////////////////////////////////////////////////////////////
// Returns a free Service slot
unsigned int API_GetServiceSlot(){
8000676c:	fe010113          	addi	sp,sp,-32
80006770:	00812e23          	sw	s0,28(sp)
80006774:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:49
    int i;
    for( i = 0; i < PIPE_SIZE; i++ ){
80006778:	fe042623          	sw	zero,-20(s0)
8000677c:	06c0006f          	j	800067e8 <API_GetServiceSlot+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:50
        if (ServicePipe[i].status == PIPE_FREE){
80006780:	800206b7          	lui	a3,0x80020
80006784:	fec42703          	lw	a4,-20(s0)
80006788:	00070793          	mv	a5,a4
8000678c:	00479793          	slli	a5,a5,0x4
80006790:	40e787b3          	sub	a5,a5,a4
80006794:	00279793          	slli	a5,a5,0x2
80006798:	7fc68713          	addi	a4,a3,2044 # 800207fc <__stack_top+0xfffdea4c>
8000679c:	00e787b3          	add	a5,a5,a4
800067a0:	0007a703          	lw	a4,0(a5)
800067a4:	fff00793          	li	a5,-1
800067a8:	02f71a63          	bne	a4,a5,800067dc <API_GetServiceSlot+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:51
            ServicePipe[i].status = PIPE_OCCUPIED;
800067ac:	800206b7          	lui	a3,0x80020
800067b0:	fec42703          	lw	a4,-20(s0)
800067b4:	00070793          	mv	a5,a4
800067b8:	00479793          	slli	a5,a5,0x4
800067bc:	40e787b3          	sub	a5,a5,a4
800067c0:	00279793          	slli	a5,a5,0x2
800067c4:	7fc68713          	addi	a4,a3,2044 # 800207fc <__stack_top+0xfffdea4c>
800067c8:	00e787b3          	add	a5,a5,a4
800067cc:	00100713          	li	a4,1
800067d0:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:52
            return i;
800067d4:	fec42783          	lw	a5,-20(s0)
800067d8:	0240006f          	j	800067fc <API_GetServiceSlot+0x90>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:49 (discriminator 2)
    for( i = 0; i < PIPE_SIZE; i++ ){
800067dc:	fec42783          	lw	a5,-20(s0)
800067e0:	00178793          	addi	a5,a5,1
800067e4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:49 (discriminator 1)
800067e8:	fec42703          	lw	a4,-20(s0)
800067ec:	00300793          	li	a5,3
800067f0:	f8e7d8e3          	ble	a4,a5,80006780 <API_GetServiceSlot+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:55
        }
    }
    return PIPE_FULL;
800067f4:	fdfe07b7          	lui	a5,0xfdfe0
800067f8:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e04d>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:56
}
800067fc:	00078513          	mv	a0,a5
80006800:	01c12403          	lw	s0,28(sp)
80006804:	02010113          	addi	sp,sp,32
80006808:	00008067          	ret

8000680c <API_ClearPipeSlot>:
API_ClearPipeSlot():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:60

////////////////////////////////////////////////////////////
// Clear one PipeSlot after send it
void API_ClearPipeSlot(unsigned int typeSlot){
8000680c:	fd010113          	addi	sp,sp,-48
80006810:	02812623          	sw	s0,44(sp)
80006814:	03010413          	addi	s0,sp,48
80006818:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:61
    unsigned type = typeSlot & 0xFFFF0000;
8000681c:	fdc42703          	lw	a4,-36(s0)
80006820:	ffff07b7          	lui	a5,0xffff0
80006824:	00f777b3          	and	a5,a4,a5
80006828:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:62
    unsigned slot = typeSlot & 0x0000FFFF;
8000682c:	fdc42703          	lw	a4,-36(s0)
80006830:	000107b7          	lui	a5,0x10
80006834:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80006838:	00f777b3          	and	a5,a4,a5
8000683c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:64
    
    if (type == SERVICE){
80006840:	fec42703          	lw	a4,-20(s0)
80006844:	101007b7          	lui	a5,0x10100
80006848:	02f71863          	bne	a4,a5,80006878 <API_ClearPipeSlot+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:65
        ServicePipe[slot].status = PIPE_FREE;
8000684c:	800206b7          	lui	a3,0x80020
80006850:	fe842703          	lw	a4,-24(s0)
80006854:	00070793          	mv	a5,a4
80006858:	00479793          	slli	a5,a5,0x4
8000685c:	40e787b3          	sub	a5,a5,a4
80006860:	00279793          	slli	a5,a5,0x2
80006864:	7fc68713          	addi	a4,a3,2044 # 800207fc <__stack_top+0xfffdea4c>
80006868:	00e787b3          	add	a5,a5,a4
8000686c:	fff00713          	li	a4,-1
80006870:	00e7a023          	sw	a4,0(a5) # 10100000 <RAM_SIZE+0x10080000>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:70
    } else { // type == MESSAGE
        //printsv("cleaning message pipe slot: ", slot);
        MessagePipe[slot].status = PIPE_FREE;
    }
    return;
80006874:	0280006f          	j	8000689c <API_ClearPipeSlot+0x90>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:68
        MessagePipe[slot].status = PIPE_FREE;
80006878:	800217b7          	lui	a5,0x80021
8000687c:	fe842683          	lw	a3,-24(s0)
80006880:	24400713          	li	a4,580
80006884:	02e68733          	mul	a4,a3,a4
80006888:	96078793          	addi	a5,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
8000688c:	00f707b3          	add	a5,a4,a5
80006890:	fff00713          	li	a4,-1
80006894:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:70
    return;
80006898:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:71
}
8000689c:	02c12403          	lw	s0,44(sp)
800068a0:	03010113          	addi	sp,sp,48
800068a4:	00008067          	ret

800068a8 <API_checkPipe>:
API_checkPipe():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:73

unsigned int API_checkPipe(unsigned int taskSlot){
800068a8:	fd010113          	addi	sp,sp,-48
800068ac:	02812623          	sw	s0,44(sp)
800068b0:	03010413          	addi	s0,sp,48
800068b4:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:75
    unsigned int i;
    for(i = 0; i < PIPE_SIZE; i++){
800068b8:	fe042623          	sw	zero,-20(s0)
800068bc:	0600006f          	j	8000691c <API_checkPipe+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:80
        // printsv("i: ", i);
        // printsv("status: ", MessagePipe[i].status);
        // printsv("holder: ", MessagePipe[i].holder);
        // prints("---\n");
        if(MessagePipe[i].status == PIPE_OCCUPIED){
800068c0:	800217b7          	lui	a5,0x80021
800068c4:	fec42683          	lw	a3,-20(s0)
800068c8:	24400713          	li	a4,580
800068cc:	02e68733          	mul	a4,a3,a4
800068d0:	96078793          	addi	a5,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
800068d4:	00f707b3          	add	a5,a4,a5
800068d8:	0007a703          	lw	a4,0(a5)
800068dc:	00100793          	li	a5,1
800068e0:	02f71863          	bne	a4,a5,80006910 <API_checkPipe+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:81
            if(MessagePipe[i].holder == taskSlot){
800068e4:	800217b7          	lui	a5,0x80021
800068e8:	fec42683          	lw	a3,-20(s0)
800068ec:	96078713          	addi	a4,a5,-1696 # 80020960 <__stack_top+0xfffdebb0>
800068f0:	24400793          	li	a5,580
800068f4:	02f687b3          	mul	a5,a3,a5
800068f8:	00f707b3          	add	a5,a4,a5
800068fc:	0047a783          	lw	a5,4(a5)
80006900:	fdc42703          	lw	a4,-36(s0)
80006904:	00f71663          	bne	a4,a5,80006910 <API_checkPipe+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:82
                return 1;
80006908:	00100793          	li	a5,1
8000690c:	0200006f          	j	8000692c <API_checkPipe+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:75 (discriminator 2)
    for(i = 0; i < PIPE_SIZE; i++){
80006910:	fec42783          	lw	a5,-20(s0)
80006914:	00178793          	addi	a5,a5,1
80006918:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:75 (discriminator 1)
8000691c:	fec42703          	lw	a4,-20(s0)
80006920:	00300793          	li	a5,3
80006924:	f8e7fee3          	bleu	a4,a5,800068c0 <API_checkPipe+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:86
            }
        }
    }
    return 0;
80006928:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../FreeRTOS/packet.c:87
}
8000692c:	00078513          	mv	a0,a5
80006930:	02c12403          	lw	s0,44(sp)
80006934:	03010113          	addi	sp,sp,48
80006938:	00008067          	ret

8000693c <PLIC_init>:
PLIC_init():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:124
{
8000693c:	fe010113          	addi	sp,sp,-32
80006940:	00812e23          	sw	s0,28(sp)
80006944:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:126
    unsigned long hart_id = read_csr(mhartid);
80006948:	f14027f3          	csrr	a5,mhartid
8000694c:	fef42423          	sw	a5,-24(s0)
80006950:	fe842783          	lw	a5,-24(s0)
80006954:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
80006958:	fe042623          	sw	zero,-20(s0)
8000695c:	03c0006f          	j	80006998 <PLIC_init+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:131 (discriminator 3)
        PLIC->TARGET_ENABLES[hart_id].ENABLES[inc] = 0;
80006960:	40000737          	lui	a4,0x40000
80006964:	fe442783          	lw	a5,-28(s0)
80006968:	00579693          	slli	a3,a5,0x5
8000696c:	fec42783          	lw	a5,-20(s0)
80006970:	00f686b3          	add	a3,a3,a5
80006974:	000017b7          	lui	a5,0x1
80006978:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
8000697c:	00f687b3          	add	a5,a3,a5
80006980:	00279793          	slli	a5,a5,0x2
80006984:	00f707b3          	add	a5,a4,a5
80006988:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 3)
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
8000698c:	fec42783          	lw	a5,-20(s0)
80006990:	00178793          	addi	a5,a5,1
80006994:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 1)
80006998:	fec42783          	lw	a5,-20(s0)
8000699c:	fc0782e3          	beqz	a5,80006960 <PLIC_init+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
800069a0:	fe042623          	sw	zero,-20(s0)
800069a4:	0240006f          	j	800069c8 <PLIC_init+0x8c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:139 (discriminator 3)
        PLIC->SOURCE_PRIORITY[inc] = 0;
800069a8:	40000737          	lui	a4,0x40000
800069ac:	fec42783          	lw	a5,-20(s0)
800069b0:	00279793          	slli	a5,a5,0x2
800069b4:	00f707b3          	add	a5,a4,a5
800069b8:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 3)
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
800069bc:	fec42783          	lw	a5,-20(s0)
800069c0:	00178793          	addi	a5,a5,1
800069c4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 1)
800069c8:	fec42703          	lw	a4,-20(s0)
800069cc:	01e00793          	li	a5,30
800069d0:	fce7fce3          	bleu	a4,a5,800069a8 <PLIC_init+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:143
    PLIC->TARGET[hart_id].PRIORITY_THRESHOLD = 0;
800069d4:	40000737          	lui	a4,0x40000
800069d8:	fe442783          	lw	a5,-28(s0)
800069dc:	20078793          	addi	a5,a5,512
800069e0:	00c79793          	slli	a5,a5,0xc
800069e4:	00f707b3          	add	a5,a4,a5
800069e8:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:146
    set_csr(mie, MIP_MEIP);
800069ec:	000017b7          	lui	a5,0x1
800069f0:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
800069f4:	3047a7f3          	csrrs	a5,mie,a5
800069f8:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:147
}
800069fc:	00000013          	nop
80006a00:	01c12403          	lw	s0,28(sp)
80006a04:	02010113          	addi	sp,sp,32
80006a08:	00008067          	ret

80006a0c <main>:
main():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:58
extern volatile unsigned int NI_IRCount;

/*-----------------------------------------------------------*/

int main( void )
{
80006a0c:	fd010113          	addi	sp,sp,-48
80006a10:	02112623          	sw	ra,44(sp)
80006a14:	02812423          	sw	s0,40(sp)
80006a18:	03010413          	addi	s0,sp,48
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:60
	char str[20];
    PLIC_init();
80006a1c:	f21ff0ef          	jal	ra,8000693c <PLIC_init>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:66

    /**************************************************************************
    * Initialize CoreUART with its base address, baud value, and line
    * configuration.
    *************************************************************************/
    UART_init(&g_uart, COREUARTAPB0_BASE_ADDR, BAUD_VALUE_115200,
80006a20:	00100693          	li	a3,1
80006a24:	02c00613          	li	a2,44
80006a28:	700015b7          	lui	a1,0x70001
80006a2c:	800227b7          	lui	a5,0x80022
80006a30:	da478513          	addi	a0,a5,-604 # 80021da4 <__stack_top+0xfffdfff4>
80006a34:	e14fa0ef          	jal	ra,80001048 <UART_init>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:72
             (DATA_8_BITS | NO_PARITY) );
    
	/**************************************************************************
    * Initialize the Chronos platform stuff
    *************************************************************************/
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n Chronos platform initializing... \n" );
80006a38:	800077b7          	lui	a5,0x80007
80006a3c:	4ac78593          	addi	a1,a5,1196 # 800074ac <__stack_top+0xfffc56fc>
80006a40:	800227b7          	lui	a5,0x80022
80006a44:	da478513          	addi	a0,a5,-604 # 80021da4 <__stack_top+0xfffdfff4>
80006a48:	fccfa0ef          	jal	ra,80001214 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:73
	Chronos_init();
80006a4c:	b18fc0ef          	jal	ra,80002d64 <Chronos_init>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:74
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This terminal belongs to the address: " );
80006a50:	800077b7          	lui	a5,0x80007
80006a54:	4d478593          	addi	a1,a5,1236 # 800074d4 <__stack_top+0xfffc5724>
80006a58:	800227b7          	lui	a5,0x80022
80006a5c:	da478513          	addi	a0,a5,-604 # 80021da4 <__stack_top+0xfffdfff4>
80006a60:	fb4fa0ef          	jal	ra,80001214 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:75
	myItoa(ProcessorAddr, str, 16);
80006a64:	800227b7          	lui	a5,0x80022
80006a68:	dac7a783          	lw	a5,-596(a5) # 80021dac <__stack_top+0xfffdfffc>
80006a6c:	00078713          	mv	a4,a5
80006a70:	fdc40793          	addi	a5,s0,-36
80006a74:	01000613          	li	a2,16
80006a78:	00078593          	mv	a1,a5
80006a7c:	00070513          	mv	a0,a4
80006a80:	f78fc0ef          	jal	ra,800031f8 <myItoa>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:76
    UART_polled_tx_string( &g_uart, (const uint8_t *)str); UART_polled_tx_string( &g_uart, (const uint8_t *)"\n");
80006a84:	fdc40793          	addi	a5,s0,-36
80006a88:	00078593          	mv	a1,a5
80006a8c:	800227b7          	lui	a5,0x80022
80006a90:	da478513          	addi	a0,a5,-604 # 80021da4 <__stack_top+0xfffdfff4>
80006a94:	f80fa0ef          	jal	ra,80001214 <UART_polled_tx_string>
80006a98:	800077b7          	lui	a5,0x80007
80006a9c:	50078593          	addi	a1,a5,1280 # 80007500 <__stack_top+0xfffc5750>
80006aa0:	800227b7          	lui	a5,0x80022
80006aa4:	da478513          	addi	a0,a5,-604 # 80021da4 <__stack_top+0xfffdfff4>
80006aa8:	f6cfa0ef          	jal	ra,80001214 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:81
	
	//xTaskCreate( NI_TX_Handler, "TXHandler", 1024*4, NULL, (tskIDLE_PRIORITY + 1), NULL);
	//xTaskCreate( NI_RX_Handler, "RXHandler", 1024*3, NULL, (tskIDLE_PRIORITY + 1), NULL);

	if (ProcessorAddr == 0x0000){
80006aac:	800227b7          	lui	a5,0x80022
80006ab0:	dac7a783          	lw	a5,-596(a5) # 80021dac <__stack_top+0xfffdfffc>
80006ab4:	04079663          	bnez	a5,80006b00 <main+0xf4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:82
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is the Global Master: \n" );
80006ab8:	800077b7          	lui	a5,0x80007
80006abc:	50478593          	addi	a1,a5,1284 # 80007504 <__stack_top+0xfffc5754>
80006ac0:	800227b7          	lui	a5,0x80022
80006ac4:	da478513          	addi	a0,a5,-604 # 80021da4 <__stack_top+0xfffdfff4>
80006ac8:	f4cfa0ef          	jal	ra,80001214 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:84
		/* Create the GlobalManager task */
		xTaskCreate( GlobalManagerTask, "GlobalMaster", 1024*6, NULL, (tskIDLE_PRIORITY + 1), NULL );
80006acc:	00000893          	li	a7,0
80006ad0:	00000813          	li	a6,0
80006ad4:	00000793          	li	a5,0
80006ad8:	00100713          	li	a4,1
80006adc:	00000693          	li	a3,0
80006ae0:	00002637          	lui	a2,0x2
80006ae4:	80060613          	addi	a2,a2,-2048 # 1800 <HEAP_SIZE-0xe800>
80006ae8:	800075b7          	lui	a1,0x80007
80006aec:	53058593          	addi	a1,a1,1328 # 80007530 <__stack_top+0xfffc5780>
80006af0:	80007537          	lui	a0,0x80007
80006af4:	c7450513          	addi	a0,a0,-908 # 80006c74 <__stack_top+0xfffc4ec4>
80006af8:	bfcfb0ef          	jal	ra,80001ef4 <xTaskGenericCreate>
80006afc:	0480006f          	j	80006b44 <main+0x138>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:86
	} else {
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is a Slave: \n" );
80006b00:	800077b7          	lui	a5,0x80007
80006b04:	54078593          	addi	a1,a5,1344 # 80007540 <__stack_top+0xfffc5790>
80006b08:	800227b7          	lui	a5,0x80022
80006b0c:	da478513          	addi	a0,a5,-604 # 80021da4 <__stack_top+0xfffdfff4>
80006b10:	f04fa0ef          	jal	ra,80001214 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:89
		
		/* Create the two test tasks. */
		xTaskCreate( vUartAliveTask, "Alive", 1024*3, NULL, (tskIDLE_PRIORITY + 1), NULL );
80006b14:	00000893          	li	a7,0
80006b18:	00000813          	li	a6,0
80006b1c:	00000793          	li	a5,0
80006b20:	00100713          	li	a4,1
80006b24:	00000693          	li	a3,0
80006b28:	00001637          	lui	a2,0x1
80006b2c:	c0060613          	addi	a2,a2,-1024 # c00 <HEAP_SIZE-0xf400>
80006b30:	800075b7          	lui	a1,0x80007
80006b34:	56058593          	addi	a1,a1,1376 # 80007560 <__stack_top+0xfffc57b0>
80006b38:	80007537          	lui	a0,0x80007
80006b3c:	b9050513          	addi	a0,a0,-1136 # 80006b90 <__stack_top+0xfffc4de0>
80006b40:	bb4fb0ef          	jal	ra,80001ef4 <xTaskGenericCreate>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:93
	}	

	/* Start the kernel.  From here on, only tasks and interrupts will run. */
	vTaskStartScheduler();
80006b44:	f2cfb0ef          	jal	ra,80002270 <vTaskStartScheduler>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:96

	/* Exit FreeRTOS */
	return 0;
80006b48:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:97
}
80006b4c:	00078513          	mv	a0,a5
80006b50:	02c12083          	lw	ra,44(sp)
80006b54:	02812403          	lw	s0,40(sp)
80006b58:	03010113          	addi	sp,sp,48
80006b5c:	00008067          	ret

80006b60 <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:102

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
80006b60:	ff010113          	addi	sp,sp,-16
80006b64:	00812623          	sw	s0,12(sp)
80006b68:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:113
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
80006b6c:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:114 (discriminator 1)
	for( ;; );
80006b70:	0000006f          	j	80006b70 <vApplicationMallocFailedHook+0x10>

80006b74 <vApplicationIdleHook>:
vApplicationIdleHook():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:119
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
80006b74:	ff010113          	addi	sp,sp,-16
80006b78:	00812623          	sw	s0,12(sp)
80006b7c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:129
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
80006b80:	00000013          	nop
80006b84:	00c12403          	lw	s0,12(sp)
80006b88:	01010113          	addi	sp,sp,16
80006b8c:	00008067          	ret

80006b90 <vUartAliveTask>:
vUartAliveTask():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:146
	for( ;; );
}
/*-----------------------------------------------------------*/

static void vUartAliveTask( void *pvParameters )
{
80006b90:	fc010113          	addi	sp,sp,-64
80006b94:	02112e23          	sw	ra,60(sp)
80006b98:	02812c23          	sw	s0,56(sp)
80006b9c:	04010413          	addi	s0,sp,64
80006ba0:	fca42623          	sw	a0,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:155
	/*register long sp1 asm("s2") = 0;
	register long sp2 asm("s3") = 0;
	asm("addi	s2, sp, 0");
	printsv("meu sp1: ", sp1);*/

	for( i = 0 ;; i++ ){
80006ba4:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:159
		/*asm("addi	s3, sp, 0");
		printsvsv("meu sp2: ", sp2, " dif: ", sp2-sp1);*/
		// Start every task that is ready!
		for(j = 0; j < NUM_MAX_TASKS; j++){
80006ba8:	fe042423          	sw	zero,-24(s0)
80006bac:	0a80006f          	j	80006c54 <vUartAliveTask+0xc4>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:160
			if(TaskList[j].status == TASK_SLOT_READY){
80006bb0:	800226b7          	lui	a3,0x80022
80006bb4:	fe842703          	lw	a4,-24(s0)
80006bb8:	00070793          	mv	a5,a4
80006bbc:	00579793          	slli	a5,a5,0x5
80006bc0:	00e787b3          	add	a5,a5,a4
80006bc4:	00279793          	slli	a5,a5,0x2
80006bc8:	a1868713          	addi	a4,a3,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80006bcc:	00e787b3          	add	a5,a5,a4
80006bd0:	0007a703          	lw	a4,0(a5)
80006bd4:	00300793          	li	a5,3
80006bd8:	06f71863          	bne	a4,a5,80006c48 <vUartAliveTask+0xb8>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:161
				printsvsv("Starting Task ", TaskList[j].TaskID, " from app ", TaskList[j].AppID);
80006bdc:	800226b7          	lui	a3,0x80022
80006be0:	fe842703          	lw	a4,-24(s0)
80006be4:	00070793          	mv	a5,a4
80006be8:	00579793          	slli	a5,a5,0x5
80006bec:	00e787b3          	add	a5,a5,a4
80006bf0:	00279793          	slli	a5,a5,0x2
80006bf4:	a1868713          	addi	a4,a3,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80006bf8:	00e787b3          	add	a5,a5,a4
80006bfc:	0107a783          	lw	a5,16(a5)
80006c00:	00078593          	mv	a1,a5
80006c04:	800227b7          	lui	a5,0x80022
80006c08:	fe842703          	lw	a4,-24(s0)
80006c0c:	a1878693          	addi	a3,a5,-1512 # 80021a18 <__stack_top+0xfffdfc68>
80006c10:	00070793          	mv	a5,a4
80006c14:	00579793          	slli	a5,a5,0x5
80006c18:	00e787b3          	add	a5,a5,a4
80006c1c:	00279793          	slli	a5,a5,0x2
80006c20:	00f687b3          	add	a5,a3,a5
80006c24:	0147a783          	lw	a5,20(a5)
80006c28:	00078693          	mv	a3,a5
80006c2c:	800077b7          	lui	a5,0x80007
80006c30:	56878613          	addi	a2,a5,1384 # 80007568 <__stack_top+0xfffc57b8>
80006c34:	800077b7          	lui	a5,0x80007
80006c38:	57478513          	addi	a0,a5,1396 # 80007574 <__stack_top+0xfffc57c4>
80006c3c:	afcfc0ef          	jal	ra,80002f38 <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:162
				API_TaskStart(j);
80006c40:	fe842503          	lw	a0,-24(s0)
80006c44:	ed0ff0ef          	jal	ra,80006314 <API_TaskStart>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:159 (discriminator 2)
		for(j = 0; j < NUM_MAX_TASKS; j++){
80006c48:	fe842783          	lw	a5,-24(s0)
80006c4c:	00178793          	addi	a5,a5,1
80006c50:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:159 (discriminator 1)
80006c54:	fe842703          	lw	a4,-24(s0)
80006c58:	00500793          	li	a5,5
80006c5c:	f4e7fae3          	bleu	a4,a5,80006bb0 <vUartAliveTask+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:173
		UART_polled_tx_string( &g_uart, (const uint8_t *)" PE is alive - " );
		myItoa(i, str, 10);
		UART_polled_tx_string( &g_uart, (const uint8_t *)str);
		UART_polled_tx_string( &g_uart, (const uint8_t *)" -\r\n" );*/
	    //asm("wfi");
		vPortYield();
80006c60:	eb5fa0ef          	jal	ra,80001b14 <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:155
	for( i = 0 ;; i++ ){
80006c64:	fec42783          	lw	a5,-20(s0)
80006c68:	00178793          	addi	a5,a5,1
80006c6c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:159
		for(j = 0; j < NUM_MAX_TASKS; j++){
80006c70:	f39ff06f          	j	80006ba8 <vUartAliveTask+0x18>

80006c74 <GlobalManagerTask>:
GlobalManagerTask():
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:180
	}
}

/*-----------------------------------------------------------*/

static void GlobalManagerTask( void *pvParameters ){
80006c74:	fc010113          	addi	sp,sp,-64
80006c78:	02112e23          	sw	ra,60(sp)
80006c7c:	02812c23          	sw	s0,56(sp)
80006c80:	04010413          	addi	s0,sp,64
80006c84:	fca42623          	sw	a0,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:186
	( void ) pvParameters;
	int tick;
	char str[20];

	// Initialize the priority vector with the pattern policy
	GeneratePatternMatrix();
80006c88:	838fe0ef          	jal	ra,80004cc0 <GeneratePatternMatrix>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:189

	// Initialize the System Tiles Info
	API_TilesReset();
80006c8c:	f0dfd0ef          	jal	ra,80004b98 <API_TilesReset>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:192

	// Initialize the applications vector
    API_ApplicationsReset();
80006c90:	ea9fd0ef          	jal	ra,80004b38 <API_ApplicationsReset>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:195

	// Informs the Repository that the GLOBALMASTER is ready to receive the application info
	API_RepositoryWakeUp();
80006c94:	b29fd0ef          	jal	ra,800047bc <API_RepositoryWakeUp>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:198 (discriminator 1)

	for(;;){
		tick = xTaskGetTickCount();
80006c98:	ff0fb0ef          	jal	ra,80002488 <xTaskGetTickCount>
80006c9c:	00050793          	mv	a5,a0
80006ca0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:199 (discriminator 1)
		myItoa(tick, str, 10);
80006ca4:	fd840793          	addi	a5,s0,-40
80006ca8:	00a00613          	li	a2,10
80006cac:	00078593          	mv	a1,a5
80006cb0:	fec42503          	lw	a0,-20(s0)
80006cb4:	d44fc0ef          	jal	ra,800031f8 <myItoa>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:200 (discriminator 1)
		UART_polled_tx_string( &g_uart, (const uint8_t *)str);
80006cb8:	fd840793          	addi	a5,s0,-40
80006cbc:	00078593          	mv	a1,a5
80006cc0:	800227b7          	lui	a5,0x80022
80006cc4:	da478513          	addi	a0,a5,-604 # 80021da4 <__stack_top+0xfffdfff4>
80006cc8:	d4cfa0ef          	jal	ra,80001214 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:201 (discriminator 1)
		printsv("GlobalMasterActive", tick);
80006ccc:	fec42583          	lw	a1,-20(s0)
80006cd0:	800077b7          	lui	a5,0x80007
80006cd4:	58478513          	addi	a0,a5,1412 # 80007584 <__stack_top+0xfffc57d4>
80006cd8:	a18fc0ef          	jal	ra,80002ef0 <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:202 (discriminator 1)
		UART_polled_tx_string( &g_uart, (const uint8_t *)" GlobalMasterRoutine...\r\n" );
80006cdc:	800077b7          	lui	a5,0x80007
80006ce0:	59878593          	addi	a1,a5,1432 # 80007598 <__stack_top+0xfffc57e8>
80006ce4:	800227b7          	lui	a5,0x80022
80006ce8:	da478513          	addi	a0,a5,-604 # 80021da4 <__stack_top+0xfffdfff4>
80006cec:	d28fa0ef          	jal	ra,80001214 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:205 (discriminator 1)

		// Checks if there is some task to allocate...
		API_AllocateTasks(tick);
80006cf0:	fec42783          	lw	a5,-20(s0)
80006cf4:	00078513          	mv	a0,a5
80006cf8:	870fe0ef          	jal	ra,80004d68 <API_AllocateTasks>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:207 (discriminator 1)

		vTaskDelay(1);
80006cfc:	00100513          	li	a0,1
80006d00:	cecfb0ef          	jal	ra,800021ec <vTaskDelay>
/home/iacanaw/git_workspace/Chronos-RISCV2/FreeRTOS/Debug/../main.c:198 (discriminator 1)
		tick = xTaskGetTickCount();
80006d04:	f95ff06f          	j	80006c98 <GlobalManagerTask+0x24>

80006d08 <write>:
write():
80006d08:	00001797          	auipc	a5,0x1
80006d0c:	8c878793          	addi	a5,a5,-1848 # 800075d0 <_impure_ptr>
80006d10:	00060693          	mv	a3,a2
80006d14:	00058613          	mv	a2,a1
80006d18:	00050593          	mv	a1,a0
80006d1c:	0007a503          	lw	a0,0(a5)
80006d20:	0040006f          	j	80006d24 <_write_r>

80006d24 <_write_r>:
_write_r():
80006d24:	ff010113          	addi	sp,sp,-16
80006d28:	00812423          	sw	s0,8(sp)
80006d2c:	00050413          	mv	s0,a0
80006d30:	00058513          	mv	a0,a1
80006d34:	00060593          	mv	a1,a2
80006d38:	00068613          	mv	a2,a3
80006d3c:	0001a797          	auipc	a5,0x1a
80006d40:	5207aa23          	sw	zero,1332(a5) # 80021270 <errno>
80006d44:	00112623          	sw	ra,12(sp)
80006d48:	940fa0ef          	jal	ra,80000e88 <_write>
80006d4c:	fff00793          	li	a5,-1
80006d50:	00f51c63          	bne	a0,a5,80006d68 <_write_r+0x44>
80006d54:	0001a797          	auipc	a5,0x1a
80006d58:	51c78793          	addi	a5,a5,1308 # 80021270 <errno>
80006d5c:	0007a783          	lw	a5,0(a5)
80006d60:	00078463          	beqz	a5,80006d68 <_write_r+0x44>
80006d64:	00f42023          	sw	a5,0(s0)
80006d68:	00c12083          	lw	ra,12(sp)
80006d6c:	00812403          	lw	s0,8(sp)
80006d70:	01010113          	addi	sp,sp,16
80006d74:	00008067          	ret
	...
80006d80:	6568                	flw	fa0,76(a0)
80006d82:	6c6c                	flw	fa1,92(s0)
80006d84:	0000006f          	j	80006d84 <_write_r+0x60>
80006d88:	6544                	flw	fs1,12(a0)
80006d8a:	6574                	flw	fa3,76(a0)
80006d8c:	69657463          	bleu	s6,a0,80007414 <_write_r+0x6f0>
80006d90:	7520                	flw	fs0,104(a0)
80006d92:	616d                	addi	sp,sp,240
80006d94:	6320                	flw	fs0,64(a4)
80006d96:	6168                	flw	fa0,68(a0)
80006d98:	616d                	addi	sp,sp,240
80006d9a:	6164                	flw	fs1,68(a0)
80006d9c:	5420                	lw	s0,104(s0)
80006d9e:	5345                	li	t1,-15
80006da0:	4554                	lw	a3,12(a0)
80006da2:	6420                	flw	fs0,72(s0)
80006da4:	2065                	jal	80006e4c <_write_r+0x128>
80006da6:	74736973          	csrrsi	s2,0x747,6
80006daa:	6d65                	lui	s10,0x19
80006dac:	2161                	jal	80007234 <_write_r+0x510>
80006dae:	000a                	c.slli	zero,0x2
80006db0:	7261                	lui	tp,0xffff8
80006db2:	00203067          	0x203067
80006db6:	0000                	unimp
80006db8:	7261                	lui	tp,0xffff8
80006dba:	00203167          	0x203167
80006dbe:	0000                	unimp
80006dc0:	7261                	lui	tp,0xffff8
80006dc2:	00203267          	0x203267
80006dc6:	0000                	unimp
80006dc8:	7261                	lui	tp,0xffff8
80006dca:	00203367          	0x203367
80006dce:	0000                	unimp
80006dd0:	7261                	lui	tp,0xffff8
80006dd2:	00203467          	0x203467
80006dd6:	0000                	unimp
80006dd8:	7974                	flw	fa3,116(a0)
80006dda:	6570                	flw	fa2,76(a0)
80006ddc:	0020                	addi	s0,sp,8
80006dde:	0000                	unimp
80006de0:	74737953          	0x74737953
80006de4:	6d65                	lui	s10,0x19
80006de6:	6c6c6163          	bltu	s8,t1,800074a8 <_write_r+0x784>
80006dea:	6e20                	flw	fs0,88(a2)
80006dec:	206fa3c3          	fmadd.s	ft7,ft11,ft6,ft4,rdn
80006df0:	6469                	lui	s0,0x1a
80006df2:	6e65                	lui	t3,0x19
80006df4:	6974                	flw	fa3,84(a0)
80006df6:	6966                	flw	fs2,88(sp)
80006df8:	61646163          	bltu	s0,s6,800073fa <_write_r+0x6d6>
80006dfc:	0a21                	addi	s4,s4,8
80006dfe:	0000                	unimp
80006e00:	7274                	flw	fa3,100(a2)
80006e02:	7061                	c.lui	zero,0xffff8
80006e04:	000a                	c.slli	zero,0x2
80006e06:	0000                	unimp
80006e08:	7065                	c.lui	zero,0xffff9
80006e0a:	00203a63          	0x203a63
80006e0e:	0000                	unimp
80006e10:	636d                	lui	t1,0x1b
80006e12:	7561                	lui	a0,0xffff8
80006e14:	203a6573          	csrrsi	a0,hideleg,20
80006e18:	0000                	unimp
80006e1a:	0000                	unimp
80006e1c:	0700                	addi	s0,sp,896
80006e1e:	8000                	0x8000
80006e20:	0708                	addi	a0,sp,896
80006e22:	8000                	0x8000
80006e24:	0708                	addi	a0,sp,896
80006e26:	8000                	0x8000
80006e28:	0708                	addi	a0,sp,896
80006e2a:	8000                	0x8000
80006e2c:	0708                	addi	a0,sp,896
80006e2e:	8000                	0x8000
80006e30:	0708                	addi	a0,sp,896
80006e32:	8000                	0x8000
80006e34:	0708                	addi	a0,sp,896
80006e36:	8000                	0x8000
80006e38:	0708                	addi	a0,sp,896
80006e3a:	8000                	0x8000
80006e3c:	0708                	addi	a0,sp,896
80006e3e:	8000                	0x8000
80006e40:	0708                	addi	a0,sp,896
80006e42:	8000                	0x8000
80006e44:	06e0                	addi	s0,sp,844
80006e46:	8000                	0x8000
80006e48:	0708                	addi	a0,sp,896
80006e4a:	8000                	0x8000
80006e4c:	0708                	addi	a0,sp,896
80006e4e:	8000                	0x8000
80006e50:	0708                	addi	a0,sp,896
80006e52:	8000                	0x8000
80006e54:	0708                	addi	a0,sp,896
80006e56:	8000                	0x8000
80006e58:	0708                	addi	a0,sp,896
80006e5a:	8000                	0x8000
80006e5c:	0708                	addi	a0,sp,896
80006e5e:	8000                	0x8000
80006e60:	0708                	addi	a0,sp,896
80006e62:	8000                	0x8000
80006e64:	0708                	addi	a0,sp,896
80006e66:	8000                	0x8000
80006e68:	0708                	addi	a0,sp,896
80006e6a:	8000                	0x8000
80006e6c:	06f0                	addi	a2,sp,844
80006e6e:	8000                	0x8000
80006e70:	0708                	addi	a0,sp,896
80006e72:	8000                	0x8000
80006e74:	0708                	addi	a0,sp,896
80006e76:	8000                	0x8000
80006e78:	0708                	addi	a0,sp,896
80006e7a:	8000                	0x8000
80006e7c:	0708                	addi	a0,sp,896
80006e7e:	8000                	0x8000
80006e80:	0708                	addi	a0,sp,896
80006e82:	8000                	0x8000
80006e84:	0708                	addi	a0,sp,896
80006e86:	8000                	0x8000
80006e88:	0708                	addi	a0,sp,896
80006e8a:	8000                	0x8000
80006e8c:	0708                	addi	a0,sp,896
80006e8e:	8000                	0x8000
80006e90:	0708                	addi	a0,sp,896
80006e92:	8000                	0x8000
80006e94:	06a4                	addi	s1,sp,840
80006e96:	8000                	0x8000
80006e98:	0708                	addi	a0,sp,896
80006e9a:	8000                	0x8000
80006e9c:	0708                	addi	a0,sp,896
80006e9e:	8000                	0x8000
80006ea0:	0708                	addi	a0,sp,896
80006ea2:	8000                	0x8000
80006ea4:	0708                	addi	a0,sp,896
80006ea6:	8000                	0x8000
80006ea8:	0708                	addi	a0,sp,896
80006eaa:	8000                	0x8000
80006eac:	0708                	addi	a0,sp,896
80006eae:	8000                	0x8000
80006eb0:	0708                	addi	a0,sp,896
80006eb2:	8000                	0x8000
80006eb4:	0708                	addi	a0,sp,896
80006eb6:	8000                	0x8000
80006eb8:	0708                	addi	a0,sp,896
80006eba:	8000                	0x8000
80006ebc:	0680                	addi	s0,sp,832
80006ebe:	8000                	0x8000
80006ec0:	0708                	addi	a0,sp,896
80006ec2:	8000                	0x8000
80006ec4:	0708                	addi	a0,sp,896
80006ec6:	8000                	0x8000
80006ec8:	0708                	addi	a0,sp,896
80006eca:	8000                	0x8000
80006ecc:	0708                	addi	a0,sp,896
80006ece:	8000                	0x8000
80006ed0:	0708                	addi	a0,sp,896
80006ed2:	8000                	0x8000
80006ed4:	0708                	addi	a0,sp,896
80006ed6:	8000                	0x8000
80006ed8:	0708                	addi	a0,sp,896
80006eda:	8000                	0x8000
80006edc:	0708                	addi	a0,sp,896
80006ede:	8000                	0x8000
80006ee0:	0708                	addi	a0,sp,896
80006ee2:	8000                	0x8000
80006ee4:	0708                	addi	a0,sp,896
80006ee6:	8000                	0x8000
80006ee8:	0708                	addi	a0,sp,896
80006eea:	8000                	0x8000
80006eec:	0708                	addi	a0,sp,896
80006eee:	8000                	0x8000
80006ef0:	0708                	addi	a0,sp,896
80006ef2:	8000                	0x8000
80006ef4:	0708                	addi	a0,sp,896
80006ef6:	8000                	0x8000
80006ef8:	0708                	addi	a0,sp,896
80006efa:	8000                	0x8000
80006efc:	05f8                	addi	a4,sp,716
80006efe:	8000                	0x8000
80006f00:	7830                	flw	fa2,112(s0)
80006f02:	0000                	unimp
80006f04:	500a                	0x500a
80006f06:	6f72                	flw	ft10,28(sp)
80006f08:	206d6167          	0x206d6167
80006f0c:	6168                	flw	fa0,68(a0)
80006f0e:	78652073          	csrs	0x786,a0
80006f12:	7469                	lui	s0,0xffffa
80006f14:	6465                	lui	s0,0x19
80006f16:	7720                	flw	fs0,104(a4)
80006f18:	7469                	lui	s0,0xffffa
80006f1a:	2068                	fld	fa0,192(s0)
80006f1c:	65646f63          	bltu	s0,s6,8000757a <_write_r+0x856>
80006f20:	003a                	c.slli	zero,0xe
80006f22:	0000                	unimp
80006f24:	000d                	c.nop	3
80006f26:	0000                	unimp
80006f28:	4449                	li	s0,18
80006f2a:	454c                	lw	a1,12(a0)
80006f2c:	0000                	unimp
80006f2e:	0000                	unimp
80006f30:	000a                	c.slli	zero,0x2
80006f32:	0000                	unimp
80006f34:	7266                	flw	ft4,120(sp)
80006f36:	203a6d6f          	jal	s10,800ad938 <__stack_top+0x6bb88>
80006f3a:	0000                	unimp
80006f3c:	736d                	lui	t1,0xffffb
80006f3e:	6f702067          	0x6f702067
80006f42:	6e69                	lui	t3,0x1a
80006f44:	6574                	flw	fa3,76(a0)
80006f46:	3a72                	fld	fs4,312(sp)
80006f48:	0020                	addi	s0,sp,8
80006f4a:	0000                	unimp
80006f4c:	694d                	lui	s2,0x13
80006f4e:	686e                	flw	fa6,216(sp)
80006f50:	2061                	jal	80006fd8 <_write_r+0x2b4>
80006f52:	6174                	flw	fa3,68(a0)
80006f54:	49206b73          	csrrsi	s6,0x492,0
80006f58:	3a44                	fld	fs1,176(a2)
80006f5a:	0020                	addi	s0,sp,8
80006f5c:	646e6553          	0x646e6553
80006f60:	6e69                	lui	t3,0x1a
80006f62:	65755167          	0x65755167
80006f66:	6575                	lui	a0,0x1d
80006f68:	665f 6f72 746e      	0x746e6f72665f
80006f6e:	203a                	fld	ft0,392(sp)
80006f70:	0000                	unimp
80006f72:	0000                	unimp
80006f74:	5041                	c.li	zero,-16
80006f76:	5f49                	li	t5,-14
80006f78:	7254                	flw	fa3,36(a2)
80006f7a:	3279                	jal	80006908 <API_checkPipe+0x60>
80006f7c:	646e6553          	0x646e6553
80006f80:	7320                	flw	fs0,96(a4)
80006f82:	6375                	lui	t1,0x1d
80006f84:	73736563          	bltu	t1,s7,800076ae <impure_data+0x4e>
80006f88:	0a21                	addi	s4,s4,8
80006f8a:	0000                	unimp
80006f8c:	5041                	c.li	zero,-16
80006f8e:	5f49                	li	t5,-14
80006f90:	7254                	flw	fa3,36(a2)
80006f92:	3279                	jal	80006920 <API_checkPipe+0x78>
80006f94:	646e6553          	0x646e6553
80006f98:	6620                	flw	fs0,72(a2)
80006f9a:	6961                	lui	s2,0x18
80006f9c:	656c                	flw	fa1,76(a0)
80006f9e:	2064                	fld	fs1,192(s0)
80006fa0:	202d                	jal	80006fca <_write_r+0x2a6>
80006fa2:	6d65                	lui	s10,0x19
80006fa4:	7470                	flw	fa2,108(s0)
80006fa6:	2079                	jal	80007034 <_write_r+0x310>
80006fa8:	646e6553          	0x646e6553
80006fac:	7551                	lui	a0,0xffff4
80006fae:	7565                	lui	a0,0xffff9
80006fb0:	2165                	jal	80007458 <_write_r+0x734>
80006fb2:	000a                	c.slli	zero,0x2
80006fb4:	5041                	c.li	zero,-16
80006fb6:	5f49                	li	t5,-14
80006fb8:	7254                	flw	fa3,36(a2)
80006fba:	3279                	jal	80006948 <PLIC_init+0xc>
80006fbc:	646e6553          	0x646e6553
80006fc0:	6620                	flw	fs0,72(a2)
80006fc2:	6961                	lui	s2,0x18
80006fc4:	656c                	flw	fa1,76(a0)
80006fc6:	2064                	fld	fs1,192(s0)
80006fc8:	202d                	jal	80006ff2 <_write_r+0x2ce>
80006fca:	494e                	lw	s2,208(sp)
80006fcc:	545f 2058 636f      	0x636f2058545f
80006fd2:	69707563          	bleu	s7,zero,8000765c <__data_load+0x7c>
80006fd6:	6465                	lui	s0,0x19
80006fd8:	0a21                	addi	s4,s4,8
80006fda:	0000                	unimp
80006fdc:	6920                	flw	fs0,80(a0)
80006fde:	206e                	fld	ft0,216(sp)
80006fe0:	6874                	flw	fa3,84(s0)
80006fe2:	2065                	jal	8000708a <_write_r+0x366>
80006fe4:	4950                	lw	a2,20(a0)
80006fe6:	4550                	lw	a2,12(a0)
80006fe8:	7320                	flw	fs0,96(a4)
80006fea:	6f6c                	flw	fa1,92(a4)
80006fec:	2074                	fld	fa3,192(s0)
80006fee:	0000                	unimp
80006ff0:	6441                	lui	s0,0x10
80006ff2:	6964                	flw	fs1,84(a0)
80006ff4:	676e                	flw	fa4,216(sp)
80006ff6:	6120                	flw	fs0,64(a0)
80006ff8:	6d20                	flw	fs0,88(a0)
80006ffa:	74206773          	csrrsi	a4,0x742,0
80006ffe:	6174206f          	j	80049e14 <__stack_top+0x8064>
80007002:	00206b73          	csrrsi	s6,frm,0
80007006:	0000                	unimp
80007008:	3e3e                	fld	ft8,488(sp)
8000700a:	3e3e                	fld	ft8,488(sp)
8000700c:	413e                	lw	sp,204(sp)
8000700e:	69656863          	bltu	a0,s6,8000769e <impure_data+0x3e>
80007012:	6120                	flw	fs0,64(a0)
80007014:	7571                	lui	a0,0xffffc
80007016:	2069                	jal	800070a0 <_write_r+0x37c>
80007018:	6f6e                	flw	ft10,216(sp)
8000701a:	7020                	flw	fs0,96(s0)
8000701c:	6e65                	lui	t3,0x19
8000701e:	6964                	flw	fs1,84(a0)
80007020:	676e                	flw	fa4,216(sp)
80007022:	0a21                	addi	s4,s4,8
80007024:	0000                	unimp
80007026:	0000                	unimp
80007028:	7345                	lui	t1,0xffff1
8000702a:	6570                	flw	fa2,76(a0)
8000702c:	6172                	flw	ft2,28(sp)
8000702e:	646e                	flw	fs0,216(sp)
80007030:	654d206f          	j	800d9684 <__stack_top+0x978d4>
80007034:	736e                	flw	ft6,248(sp)
80007036:	6761                	lui	a4,0x18
80007038:	6d65                	lui	s10,0x19
8000703a:	0a21                	addi	s4,s4,8
8000703c:	0000                	unimp
8000703e:	0000                	unimp
80007040:	6520                	flw	fs0,72(a0)
80007042:	72657073          	csrci	0x726,10
80007046:	6e61                	lui	t3,0x18
80007048:	6f64                	flw	fs1,92(a4)
8000704a:	6d20                	flw	fs0,88(a0)
8000704c:	6e65                	lui	t3,0x19
8000704e:	65676173          	csrrsi	sp,0x656,14
80007052:	206d                	jal	800070fc <_write_r+0x3d8>
80007054:	0000                	unimp
80007056:	0000                	unimp
80007058:	6174                	flw	fa3,68(a0)
8000705a:	6c736b73          	csrrsi	s6,0x6c7,6
8000705e:	0020746f          	jal	s0,8000e060 <__global_pointer$+0x62a0>
80007062:	0000                	unimp
80007064:	654d                	lui	a0,0x13
80007066:	736e                	flw	ft6,248(sp)
80007068:	6761                	lui	a4,0x18
8000706a:	6d65                	lui	s10,0x19
8000706c:	5220                	lw	s0,96(a2)
8000706e:	6365                	lui	t1,0x19
80007070:	6265                	lui	tp,0x19
80007072:	6469                	lui	s0,0x1a
80007074:	2161                	jal	800074fc <_write_r+0x7d8>
80007076:	000a                	c.slli	zero,0x2
80007078:	5854                	lw	a3,52(s0)
8000707a:	6920                	flw	fs0,80(a0)
8000707c:	746e                	flw	fs0,248(sp)
8000707e:	7265                	lui	tp,0xffff9
80007080:	7572                	flw	fa0,60(sp)
80007082:	7470                	flw	fa2,108(s0)
80007084:	6f69                	lui	t5,0x1a
80007086:	206e                	fld	ft0,216(sp)
80007088:	63746163          	bltu	s0,s7,800076aa <impure_data+0x4a>
8000708c:	6568                	flw	fa0,76(a0)
8000708e:	2064                	fld	fs1,192(s0)
80007090:	202d                	jal	800070ba <_write_r+0x396>
80007092:	0000                	unimp
80007094:	5852                	lw	a6,52(sp)
80007096:	6920                	flw	fs0,80(a0)
80007098:	746e                	flw	fs0,248(sp)
8000709a:	7265                	lui	tp,0xffff9
8000709c:	7572                	flw	fa0,60(sp)
8000709e:	7470                	flw	fa2,108(s0)
800070a0:	6f69                	lui	t5,0x1a
800070a2:	206e                	fld	ft0,216(sp)
800070a4:	63746163          	bltu	s0,s7,800076c6 <__data_end+0x6>
800070a8:	6568                	flw	fa0,76(a0)
800070aa:	2064                	fld	fs1,192(s0)
800070ac:	202d                	jal	800070d6 <_write_r+0x3b2>
800070ae:	0000                	unimp
800070b0:	4154                	lw	a3,4(a0)
800070b2:	415f4b53          	0x415f4b53
800070b6:	4c4c                	lw	a1,28(s0)
800070b8:	5441434f          	0x5441434f
800070bc:	4f49                	li	t5,18
800070be:	5f4e                	lw	t5,240(sp)
800070c0:	444e4553          	0x444e4553
800070c4:	000a                	c.slli	zero,0x2
800070c6:	0000                	unimp
800070c8:	6154                	flw	fa3,4(a0)
800070ca:	73206b73          	csrrsi	s6,0x732,0
800070ce:	6f6c                	flw	fa1,92(a4)
800070d0:	3a74                	fld	fa3,240(a2)
800070d2:	0020                	addi	s0,sp,8
800070d4:	6154                	flw	fa3,4(a0)
800070d6:	73206b73          	csrrsi	s6,0x732,0
800070da:	6f6c                	flw	fa1,92(a4)
800070dc:	2074                	fld	fa3,192(s0)
800070de:	6154                	flw	fa3,4(a0)
800070e0:	64416b73          	csrrsi	s6,0x644,2
800070e4:	7264                	flw	fs1,100(a2)
800070e6:	203a                	fld	ft0,392(sp)
800070e8:	0000                	unimp
800070ea:	0000                	unimp
800070ec:	7266                	flw	ft4,120(sp)
800070ee:	61206d6f          	jal	s10,8000d700 <__global_pointer$+0x5940>
800070f2:	7070                	flw	fa2,100(s0)
800070f4:	696c                	flw	fa1,84(a0)
800070f6:	69746163          	bltu	s0,s7,80007778 <__sbss_end+0x48>
800070fa:	00206e6f          	jal	t3,8000d0fc <__global_pointer$+0x533c>
800070fe:	0000                	unimp
80007100:	4946                	lw	s2,80(sp)
80007102:	494e                	lw	s2,208(sp)
80007104:	44454853          	0x44454853
80007108:	203a                	fld	ft0,392(sp)
8000710a:	6154                	flw	fa3,4(a0)
8000710c:	00206b73          	csrrsi	s6,frm,0
80007110:	4154                	lw	a3,4(a0)
80007112:	415f4b53          	0x415f4b53
80007116:	4c4c                	lw	a1,28(s0)
80007118:	5441434f          	0x5441434f
8000711c:	4f49                	li	t5,18
8000711e:	5f4e                	lw	t5,240(sp)
80007120:	4946                	lw	s2,80(sp)
80007122:	494e                	lw	s2,208(sp)
80007124:	44454853          	0x44454853
80007128:	000a                	c.slli	zero,0x2
8000712a:	0000                	unimp
8000712c:	4154                	lw	a3,4(a0)
8000712e:	415f4b53          	0x415f4b53
80007132:	4c4c                	lw	a1,28(s0)
80007134:	5441434f          	0x5441434f
80007138:	4f49                	li	t5,18
8000713a:	5f4e                	lw	t5,240(sp)
8000713c:	43435553          	0x43435553
80007140:	5345                	li	t1,-15
80007142:	00000a53          	fadd.s	fs4,ft0,ft0,rne
80007146:	0000                	unimp
80007148:	67656843          	fmadd.q	fa6,fa0,fs6,fa2,unknown
8000714c:	7520756f          	jal	a0,8000e89e <__global_pointer$+0x6ade>
80007150:	206d                	jal	800071fa <_write_r+0x4d6>
80007152:	4154                	lw	a3,4(a0)
80007154:	535f4b53          	0x535f4b53
80007158:	4154                	lw	a3,4(a0)
8000715a:	5452                	lw	s0,52(sp)
8000715c:	0a21                	addi	s4,s4,8
8000715e:	0000                	unimp
80007160:	67656843          	fmadd.q	fa6,fa0,fs6,fa2,unknown
80007164:	7520756f          	jal	a0,8000e8b6 <__global_pointer$+0x6af6>
80007168:	206d                	jal	80007212 <_write_r+0x4ee>
8000716a:	4154                	lw	a3,4(a0)
8000716c:	525f4b53          	0x525f4b53
80007170:	4e55                	li	t3,21
80007172:	0a21                	addi	s4,s4,8
80007174:	0000                	unimp
80007176:	0000                	unimp
80007178:	7266                	flw	ft4,120(sp)
8000717a:	61206d6f          	jal	s10,8000d78c <__global_pointer$+0x59cc>
8000717e:	7070                	flw	fa2,100(s0)
80007180:	203a                	fld	ft0,392(sp)
80007182:	0000                	unimp
80007184:	6e45                	lui	t3,0x11
80007186:	6261                	lui	tp,0x18
80007188:	696c                	flw	fa1,84(a0)
8000718a:	676e                	flw	fa4,216(sp)
8000718c:	5420                	lw	s0,104(s0)
8000718e:	7361                	lui	t1,0xffff8
80007190:	00203a6b          	0x203a6b
80007194:	746f6c53          	0x746f6c53
80007198:	203a                	fld	ft0,392(sp)
8000719a:	0000                	unimp
8000719c:	6154                	flw	fa3,4(a0)
8000719e:	203a6b73          	csrrsi	s6,hideleg,20
800071a2:	0000                	unimp
800071a4:	67656843          	fmadd.q	fa6,fa0,fs6,fa2,unknown
800071a8:	7520756f          	jal	a0,8000e8fa <__global_pointer$+0x6b3a>
800071ac:	206d                	jal	80007256 <_write_r+0x532>
800071ae:	656d                	lui	a0,0x1b
800071b0:	67617373          	csrrci	t1,0x676,2
800071b4:	2065                	jal	8000725c <_write_r+0x538>
800071b6:	6572                	flw	fa0,28(sp)
800071b8:	7571                	lui	a0,0xffffc
800071ba:	7365                	lui	t1,0xffff9
800071bc:	2174                	fld	fa3,192(a0)
800071be:	4120                	lw	s0,64(a0)
800071c0:	7070                	flw	fa2,100(s0)
800071c2:	203a                	fld	ft0,392(sp)
800071c4:	0000                	unimp
800071c6:	0000                	unimp
800071c8:	654d                	lui	a0,0x13
800071ca:	736e                	flw	ft6,248(sp)
800071cc:	6761                	lui	a4,0x18
800071ce:	6d65                	lui	s10,0x19
800071d0:	6e20                	flw	fs0,88(a2)
800071d2:	206fa3c3          	fmadd.s	ft7,ft11,ft6,ft4,rdn
800071d6:	6e65                	lui	t3,0x19
800071d8:	746e6f63          	bltu	t3,t1,80007936 <__sbss_end+0x206>
800071dc:	6172                	flw	ft2,28(sp)
800071de:	6164                	flw	fs1,68(a0)
800071e0:	202c                	fld	fa1,64(s0)
800071e2:	6461                	lui	s0,0x18
800071e4:	6369                	lui	t1,0x1a
800071e6:	6f69                	lui	t5,0x1a
800071e8:	616e                	flw	ft2,216(sp)
800071ea:	646e                	flw	fs0,216(sp)
800071ec:	6f61206f          	j	800198e2 <__global_pointer$+0x11b22>
800071f0:	5020                	lw	s0,96(s0)
800071f2:	6e65                	lui	t3,0x19
800071f4:	6964                	flw	fs1,84(a0)
800071f6:	676e                	flw	fa4,216(sp)
800071f8:	6552                	flw	fa0,20(sp)
800071fa:	2171                	jal	80007686 <impure_data+0x26>
800071fc:	000a                	c.slli	zero,0x2
800071fe:	0000                	unimp
80007200:	654d                	lui	a0,0x13
80007202:	736e                	flw	ft6,248(sp)
80007204:	6761                	lui	a4,0x18
80007206:	6d65                	lui	s10,0x19
80007208:	6520                	flw	fs0,72(a0)
8000720a:	636e                	flw	ft6,216(sp)
8000720c:	72746e6f          	jal	t3,8004e132 <__stack_top+0xc382>
80007210:	6461                	lui	s0,0x18
80007212:	2061                	jal	8000729a <_write_r+0x576>
80007214:	6f6e                	flw	ft10,216(sp)
80007216:	7020                	flw	fs0,96(s0)
80007218:	7069                	c.lui	zero,0xffffa
8000721a:	2165                	jal	800076c2 <__data_end+0x2>
8000721c:	000a                	c.slli	zero,0x2
8000721e:	0000                	unimp
80007220:	6554                	flw	fa3,12(a0)
80007222:	206d                	jal	800072cc <_write_r+0x5a8>
80007224:	6d75                	lui	s10,0x1d
80007226:	2061                	jal	800072ae <_write_r+0x58a>
80007228:	656d                	lui	a0,0x1b
8000722a:	736e                	flw	ft6,248(sp)
8000722c:	6761                	lui	a4,0x18
8000722e:	6d65                	lui	s10,0x19
80007230:	6320                	flw	fs0,64(a4)
80007232:	6568                	flw	fa0,76(a0)
80007234:	646e6167          	0x646e6167
80007238:	2e2e2e6f          	jal	t3,800e951a <__stack_top+0xa776a>
8000723c:	000a                	c.slli	zero,0x2
8000723e:	0000                	unimp
80007240:	5245                	li	tp,-15
80007242:	4f52                	lw	t5,20(sp)
80007244:	2052                	fld	ft0,272(sp)
80007246:	7845                	lui	a6,0xffff1
80007248:	6574                	flw	fa3,76(a0)
8000724a:	6e72                	flw	ft8,28(sp)
8000724c:	6c61                	lui	s8,0x18
8000724e:	325f 495f 5152      	0x5152495f325f
80007254:	6148                	flw	fa0,4(a0)
80007256:	646e                	flw	fs0,216(sp)
80007258:	656c                	flw	fa1,76(a0)
8000725a:	2072                	fld	ft0,280(sp)
8000725c:	6e55                	lui	t3,0x15
8000725e:	776f6e6b          	0x776f6e6b
80007262:	2d6e                	fld	fs10,216(sp)
80007264:	76726553          	0x76726553
80007268:	6369                	lui	t1,0x1a
8000726a:	2065                	jal	80007312 <_write_r+0x5ee>
8000726c:	0000                	unimp
8000726e:	0000                	unimp
80007270:	654e                	flw	fa0,208(sp)
80007272:	70612077          	0x70612077
80007276:	6c70                	flw	fa2,92(s0)
80007278:	6369                	lui	t1,0x1a
8000727a:	7461                	lui	s0,0xffff8
8000727c:	6f69                	lui	t5,0x1a
8000727e:	206e                	fld	ft0,216(sp)
80007280:	6572                	flw	fa0,28(sp)
80007282:	74736967          	0x74736967
80007286:	7265                	lui	tp,0xffff9
80007288:	6465                	lui	s0,0x19
8000728a:	2d20                	fld	fs0,88(a0)
8000728c:	4920                	lw	s0,80(a0)
8000728e:	3a44                	fld	fs1,176(a2)
80007290:	0020                	addi	s0,sp,8
80007292:	0000                	unimp
80007294:	6572                	flw	fa0,28(sp)
80007296:	7574                	flw	fa3,108(a0)
80007298:	6e72                	flw	ft8,28(sp)
8000729a:	6e69                	lui	t3,0x1a
8000729c:	72652067          	0x72652067
800072a0:	6f72                	flw	ft10,28(sp)
800072a2:	00000a33          	add	s4,zero,zero
800072a6:	0000                	unimp
800072a8:	6572                	flw	fa0,28(sp)
800072aa:	7574                	flw	fa3,108(a0)
800072ac:	6e72                	flw	ft8,28(sp)
800072ae:	6e69                	lui	t3,0x1a
800072b0:	72652067          	0x72652067
800072b4:	6f72                	flw	ft10,28(sp)
800072b6:	0a34                	addi	a3,sp,280
800072b8:	0000                	unimp
800072ba:	0000                	unimp
800072bc:	20736177          	0x20736177
800072c0:	7865                	lui	a6,0xffff9
800072c2:	6365                	lui	t1,0x19
800072c4:	7475                	lui	s0,0xffffd
800072c6:	6465                	lui	s0,0x19
800072c8:	6920                	flw	fs0,80(a0)
800072ca:	206e                	fld	ft0,216(sp)
800072cc:	0000                	unimp
800072ce:	0000                	unimp
800072d0:	7041                	c.lui	zero,0xffff0
800072d2:	6c70                	flw	fa2,92(s0)
800072d4:	6369                	lui	t1,0x1a
800072d6:	7461                	lui	s0,0xffff8
800072d8:	6f69                	lui	t5,0x1a
800072da:	206e                	fld	ft0,216(sp)
800072dc:	0000                	unimp
800072de:	0000                	unimp
800072e0:	0909                	addi	s2,s2,2
800072e2:	6854                	flw	fa3,20(s0)
800072e4:	7369                	lui	t1,0xffffa
800072e6:	6120                	flw	fs0,64(a0)
800072e8:	7070                	flw	fa2,100(s0)
800072ea:	696c                	flw	fa1,84(a0)
800072ec:	69746163          	bltu	s0,s7,8000796e <__sbss_end+0x23e>
800072f0:	73206e6f          	jal	t3,8000da22 <__global_pointer$+0x5c62>
800072f4:	6974                	flw	fa3,84(a0)
800072f6:	6c6c                	flw	fa1,92(s0)
800072f8:	6e20                	flw	fs0,88(a2)
800072fa:	6565                	lui	a0,0x19
800072fc:	2064                	fld	fs1,192(s0)
800072fe:	6f74                	flw	fa3,92(a4)
80007300:	7220                	flw	fs0,96(a2)
80007302:	6e75                	lui	t3,0x1d
80007304:	203a                	fld	ft0,392(sp)
80007306:	0000                	unimp
80007308:	0909                	addi	s2,s2,2
8000730a:	6854                	flw	fa3,20(s0)
8000730c:	7369                	lui	t1,0xffffa
8000730e:	6120                	flw	fs0,64(a0)
80007310:	7070                	flw	fa2,100(s0)
80007312:	696c                	flw	fa1,84(a0)
80007314:	69746163          	bltu	s0,s7,80007996 <__sbss_end+0x266>
80007318:	69206e6f          	jal	t3,8000d9aa <__global_pointer$+0x5bea>
8000731c:	4f442073          	csrs	0x4f4,s0
80007320:	454e                	lw	a0,208(sp)
80007322:	0a21                	addi	s4,s4,8
80007324:	0000                	unimp
80007326:	0000                	unimp
80007328:	6572                	flw	fa0,28(sp)
8000732a:	7574                	flw	fa3,108(a0)
8000732c:	6e72                	flw	ft8,28(sp)
8000732e:	6e69                	lui	t3,0x1a
80007330:	72652067          	0x72652067
80007334:	6f72                	flw	ft10,28(sp)
80007336:	0a35                	addi	s4,s4,13
80007338:	0000                	unimp
8000733a:	0000                	unimp
8000733c:	6572                	flw	fa0,28(sp)
8000733e:	7574                	flw	fa3,108(a0)
80007340:	6e72                	flw	ft8,28(sp)
80007342:	6e69                	lui	t3,0x1a
80007344:	72652067          	0x72652067
80007348:	6f72                	flw	ft10,28(sp)
8000734a:	0a36                	slli	s4,s4,0xd
8000734c:	0000                	unimp
8000734e:	0000                	unimp
80007350:	2049                	jal	800073d2 <_write_r+0x6ae>
80007352:	20746f67          	0x20746f67
80007356:	2061                	jal	800073de <_write_r+0x6ba>
80007358:	7266                	flw	ft4,120(sp)
8000735a:	6565                	lui	a0,0x19
8000735c:	7320                	flw	fs0,96(a4)
8000735e:	7265                	lui	tp,0xffff9
80007360:	6976                	flw	fs2,92(sp)
80007362:	73206563          	bltu	zero,s2,80007a8c <__sbss_end+0x35c>
80007366:	6f6c                	flw	fa1,92(a4)
80007368:	2174                	fld	fa3,192(a0)
8000736a:	2021                	jal	80007372 <_write_r+0x64e>
8000736c:	3e2d                	jal	80006ea6 <_write_r+0x182>
8000736e:	0020                	addi	s0,sp,8
80007370:	7041                	c.lui	zero,0xffff0
80007372:	6c70                	flw	fa2,92(s0)
80007374:	6369                	lui	t1,0x1a
80007376:	7461                	lui	s0,0xffff8
80007378:	6f69                	lui	t5,0x1a
8000737a:	206e                	fld	ft0,216(sp)
8000737c:	6c61                	lui	s8,0x18
8000737e:	6f6c                	flw	fa1,92(a4)
80007380:	65746163          	bltu	s0,s7,800079c2 <__sbss_end+0x292>
80007384:	3a64                	fld	fs1,240(a2)
80007386:	0020                	addi	s0,sp,8
80007388:	5309                	li	t1,-30
8000738a:	6174                	flw	fa3,68(a0)
8000738c:	7472                	flw	fs0,60(sp)
8000738e:	6320                	flw	fs0,64(a4)
80007390:	616d6d6f          	jal	s10,800dd9a6 <__stack_top+0x9bbf6>
80007394:	646e                	flw	fs0,216(sp)
80007396:	7320                	flw	fs0,96(a4)
80007398:	6e65                	lui	t3,0x19
8000739a:	2074                	fld	fa3,192(s0)
8000739c:	6f74                	flw	fa3,92(a4)
8000739e:	6520                	flw	fs0,72(a0)
800073a0:	6576                	flw	fa0,92(sp)
800073a2:	7972                	flw	fs2,60(sp)
800073a4:	7420                	flw	fs0,104(s0)
800073a6:	7361                	lui	t1,0xffff8
800073a8:	000a2e6b          	0xa2e6b
800073ac:	6572                	flw	fa0,28(sp)
800073ae:	7574                	flw	fa3,108(a0)
800073b0:	6e72                	flw	ft8,28(sp)
800073b2:	6e69                	lui	t3,0x1a
800073b4:	72652067          	0x72652067
800073b8:	6f72                	flw	ft10,28(sp)
800073ba:	0a30                	addi	a2,sp,280
800073bc:	0000                	unimp
800073be:	0000                	unimp
800073c0:	6572                	flw	fa0,28(sp)
800073c2:	7574                	flw	fa3,108(a0)
800073c4:	6e72                	flw	ft8,28(sp)
800073c6:	6e69                	lui	t3,0x1a
800073c8:	72652067          	0x72652067
800073cc:	6f72                	flw	ft10,28(sp)
800073ce:	0a31                	addi	s4,s4,12
800073d0:	0000                	unimp
800073d2:	0000                	unimp
800073d4:	4544                	lw	s1,12(a0)
800073d6:	2055                	jal	8000747a <_write_r+0x756>
800073d8:	5552                	lw	a0,52(sp)
800073da:	4d49                	li	s10,18
800073dc:	4e20                	lw	s0,88(a2)
800073de:	5041204f          	fnmadd.s	ft0,ft2,ft4,fa0,rdn
800073e2:	5f49                	li	t5,-14
800073e4:	46746547          	fmsub.q	fa0,fs0,ft7,fs0,unknown
800073e8:	6572                	flw	fa0,28(sp)
800073ea:	5465                	li	s0,-7
800073ec:	7361                	lui	t1,0xffff8
800073ee:	6f6c536b          	0x6f6c536b
800073f2:	2874                	fld	fa3,208(s0)
800073f4:	0a29                	addi	s4,s4,10
800073f6:	0000                	unimp
800073f8:	20746f47          	fmsub.s	ft10,fs0,ft7,ft4,unknown
800073fc:	746f6c73          	csrrsi	s8,0x746,30
80007400:	203a                	fld	ft0,392(sp)
80007402:	0000                	unimp
80007404:	6154                	flw	fa3,4(a0)
80007406:	74206b73          	csrrsi	s6,0x742,0
8000740a:	6c61746f          	jal	s0,8001ead0 <__global_pointer$+0x16d10>
8000740e:	7320                	flw	fs0,96(a4)
80007410:	7a69                	lui	s4,0xffffa
80007412:	2065                	jal	800074ba <_write_r+0x796>
80007414:	7428                	flw	fa0,104(s0)
80007416:	7478                	flw	fa4,108(s0)
80007418:	7373622b          	0x7373622b
8000741c:	3a29                	jal	80006d36 <_write_r+0x12>
8000741e:	0020                	addi	s0,sp,8
80007420:	6154                	flw	fa3,4(a0)
80007422:	61206b73          	csrrsi	s6,0x612,0
80007426:	6464                	flw	fs1,76(s0)
80007428:	3a72                	fld	fs4,312(sp)
8000742a:	0020                	addi	s0,sp,8
8000742c:	6572                	flw	fa0,28(sp)
8000742e:	7574                	flw	fa3,108(a0)
80007430:	6e72                	flw	ft8,28(sp)
80007432:	6e69                	lui	t3,0x1a
80007434:	72652067          	0x72652067
80007438:	6f72                	flw	ft10,28(sp)
8000743a:	0a32                	slli	s4,s4,0xc
8000743c:	0000                	unimp
8000743e:	0000                	unimp
80007440:	614c                	flw	fa1,4(a0)
80007442:	6154                	flw	fa3,4(a0)
80007444:	00006b73          	csrrsi	s6,ustatus,0
80007448:	5245                	li	tp,-15
8000744a:	4f52                	lw	t5,20(sp)
8000744c:	2052                	fld	ft0,272(sp)
8000744e:	202d                	jal	80007478 <_write_r+0x754>
80007450:	5041                	c.li	zero,-16
80007452:	5f49                	li	t5,-14
80007454:	6154                	flw	fa3,4(a0)
80007456:	74536b73          	csrrsi	s6,0x745,6
8000745a:	7261                	lui	tp,0xffff8
8000745c:	2174                	fld	fa3,192(a0)
8000745e:	2121                	jal	80007866 <__sbss_end+0x136>
80007460:	000a                	c.slli	zero,0x2
80007462:	0000                	unimp
80007464:	6564                	flw	fs1,76(a0)
80007466:	656c                	flw	fa1,76(a0)
80007468:	6574                	flw	fa3,76(a0)
8000746a:	2064                	fld	fs1,192(s0)
8000746c:	68746977          	0x68746977
80007470:	7320                	flw	fs0,96(a4)
80007472:	6375                	lui	t1,0x1d
80007474:	73736573          	csrrsi	a0,0x737,6
80007478:	2021                	jal	80007480 <_write_r+0x75c>
8000747a:	7246                	flw	ft4,112(sp)
8000747c:	61206d6f          	jal	s10,8000da8e <__global_pointer$+0x5cce>
80007480:	7070                	flw	fa2,100(s0)
80007482:	696c                	flw	fa1,84(a0)
80007484:	69746163          	bltu	s0,s7,80007b06 <__sbss_end+0x3d6>
80007488:	00206e6f          	jal	t3,8000d48a <__global_pointer$+0x56ca>
8000748c:	6154                	flw	fa3,4(a0)
8000748e:	00206b73          	csrrsi	s6,frm,0
80007492:	0000                	unimp
80007494:	0a0d                	addi	s4,s4,3
80007496:	7246                	flw	ft4,112(sp)
80007498:	6565                	lui	a0,0x19
8000749a:	5452                	lw	s0,52(sp)
8000749c:	4520534f          	0x4520534f
800074a0:	6178                	flw	fa4,68(a0)
800074a2:	706d                	c.lui	zero,0xffffb
800074a4:	656c                	flw	fa1,76(a0)
800074a6:	0a0d                	addi	s4,s4,3
800074a8:	0000                	unimp
800074aa:	0000                	unimp
800074ac:	200a                	fld	ft0,128(sp)
800074ae:	6f726843          	fmadd.q	fa6,ft4,fs7,fa3,unknown
800074b2:	6f6e                	flw	ft10,216(sp)
800074b4:	6c702073          	csrr	zero,0x6c7
800074b8:	7461                	lui	s0,0xffff8
800074ba:	6f66                	flw	ft10,88(sp)
800074bc:	6d72                	flw	fs10,28(sp)
800074be:	6920                	flw	fs0,80(a0)
800074c0:	696e                	flw	fs2,216(sp)
800074c2:	6974                	flw	fa3,84(a0)
800074c4:	6c61                	lui	s8,0x18
800074c6:	7a69                	lui	s4,0xffffa
800074c8:	6e69                	lui	t3,0x1a
800074ca:	2e2e2e67          	0x2e2e2e67
800074ce:	0a20                	addi	s0,sp,280
800074d0:	0000                	unimp
800074d2:	0000                	unimp
800074d4:	200a                	fld	ft0,128(sp)
800074d6:	6854                	flw	fa3,20(s0)
800074d8:	7369                	lui	t1,0xffffa
800074da:	7420                	flw	fs0,104(s0)
800074dc:	7265                	lui	tp,0xffff9
800074de:	696d                	lui	s2,0x1b
800074e0:	616e                	flw	ft2,216(sp)
800074e2:	206c                	fld	fa1,192(s0)
800074e4:	6562                	flw	fa0,24(sp)
800074e6:	6f6c                	flw	fa1,92(a4)
800074e8:	676e                	flw	fa4,216(sp)
800074ea:	6f742073          	csrs	0x6f7,s0
800074ee:	7420                	flw	fs0,104(s0)
800074f0:	6568                	flw	fa0,76(a0)
800074f2:	6120                	flw	fs0,64(a0)
800074f4:	6464                	flw	fs1,76(s0)
800074f6:	6572                	flw	fa0,28(sp)
800074f8:	203a7373          	csrrci	t1,hideleg,20
800074fc:	0000                	unimp
800074fe:	0000                	unimp
80007500:	000a                	c.slli	zero,0x2
80007502:	0000                	unimp
80007504:	200a                	fld	ft0,128(sp)
80007506:	6854                	flw	fa3,20(s0)
80007508:	7369                	lui	t1,0xffffa
8000750a:	7020                	flw	fs0,96(s0)
8000750c:	6f72                	flw	ft10,28(sp)
8000750e:	73736563          	bltu	t1,s7,80007c38 <__sbss_end+0x508>
80007512:	6920726f          	jal	tp,8000eba4 <__global_pointer$+0x6de4>
80007516:	68742073          	csrs	0x687,s0
8000751a:	2065                	jal	800075c2 <__sdata_load+0x2>
8000751c:	626f6c47          	fmsub.d	fs8,ft10,ft6,fa2,unknown
80007520:	6c61                	lui	s8,0x18
80007522:	4d20                	lw	s0,88(a0)
80007524:	7361                	lui	t1,0xffff8
80007526:	6574                	flw	fa3,76(a0)
80007528:	3a72                	fld	fs4,312(sp)
8000752a:	0a20                	addi	s0,sp,280
8000752c:	0000                	unimp
8000752e:	0000                	unimp
80007530:	626f6c47          	fmsub.d	fs8,ft10,ft6,fa2,unknown
80007534:	6c61                	lui	s8,0x18
80007536:	614d                	addi	sp,sp,176
80007538:	72657473          	csrrci	s0,0x726,10
8000753c:	0000                	unimp
8000753e:	0000                	unimp
80007540:	200a                	fld	ft0,128(sp)
80007542:	6854                	flw	fa3,20(s0)
80007544:	7369                	lui	t1,0xffffa
80007546:	7020                	flw	fs0,96(s0)
80007548:	6f72                	flw	ft10,28(sp)
8000754a:	73736563          	bltu	t1,s7,80007c74 <__sbss_end+0x544>
8000754e:	6920726f          	jal	tp,8000ebe0 <__global_pointer$+0x6e20>
80007552:	20612073          	csrs	0x206,sp
80007556:	76616c53          	0x76616c53
8000755a:	3a65                	jal	80006f12 <_write_r+0x1ee>
8000755c:	0a20                	addi	s0,sp,280
8000755e:	0000                	unimp
80007560:	6c41                	lui	s8,0x10
80007562:	7669                	lui	a2,0xffffa
80007564:	0065                	c.nop	25
80007566:	0000                	unimp
80007568:	6620                	flw	fs0,72(a2)
8000756a:	6f72                	flw	ft10,28(sp)
8000756c:	206d                	jal	80007616 <__data_load+0x36>
8000756e:	7061                	c.lui	zero,0xffff8
80007570:	2070                	fld	fa2,192(s0)
80007572:	0000                	unimp
80007574:	72617453          	0x72617453
80007578:	6974                	flw	fa3,84(a0)
8000757a:	676e                	flw	fa4,216(sp)
8000757c:	5420                	lw	s0,104(s0)
8000757e:	7361                	lui	t1,0xffff8
80007580:	0000206b          	0x206b
80007584:	626f6c47          	fmsub.d	fs8,ft10,ft6,fa2,unknown
80007588:	6c61                	lui	s8,0x18
8000758a:	614d                	addi	sp,sp,176
8000758c:	72657473          	csrrci	s0,0x726,10
80007590:	6341                	lui	t1,0x10
80007592:	6974                	flw	fa3,84(a0)
80007594:	6576                	flw	fa0,92(sp)
80007596:	0000                	unimp
80007598:	4720                	lw	s0,72(a4)
8000759a:	6f6c                	flw	fa1,92(a4)
8000759c:	6162                	flw	ft2,24(sp)
8000759e:	4d6c                	lw	a1,92(a0)
800075a0:	7361                	lui	t1,0xffff8
800075a2:	6574                	flw	fa3,76(a0)
800075a4:	5272                	lw	tp,60(sp)
800075a6:	6974756f          	jal	a0,8004f43c <__stack_top+0xd68c>
800075aa:	656e                	flw	fa0,216(sp)
800075ac:	2e2e                	fld	ft8,200(sp)
800075ae:	0d2e                	slli	s10,s10,0xb
800075b0:	000a                	c.slli	zero,0x2
	...
