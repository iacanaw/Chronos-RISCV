
miv-rv32im-freertos-port-test.elf:     file format elf32-littleriscv
miv-rv32im-freertos-port-test.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000000

Program Header:
    LOAD off    0x00001000 vaddr 0x80000000 paddr 0x80000000 align 2**12
         filesz 0x00006370 memsz 0x00040850 flags rwx

Sections:
Idx Name           Size      VMA       LMA       File off  Algn  Flags
  0 .text          00006270  80000000  80000000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sdata         00000020  80006270  80006270  00007270  2**4  CONTENTS, ALLOC, LOAD, DATA
  2 .data          000000e0  80006290  80006290  00007290  2**4  CONTENTS, ALLOC, LOAD, DATA
  3 .sbss          00000070  80006370  80006370  00007370  2**4  ALLOC
  4 .bss           0001a470  800063e0  800063e0  00007370  2**4  ALLOC
  5 .heap          00010000  80020850  80020850  00007370  2**4  ALLOC
  6 .stack         00010000  80030850  80030850  00007370  2**4  ALLOC
  7 .debug_line    0000a333  00000000  00000000  00007370  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_info    0000f166  00000000  00000000  000116a3  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev  00002a89  00000000  00000000  00020809  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000008f8  00000000  00000000  00023298  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_str     00012aad  00000000  00000000  00023b90  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges  000007c8  00000000  00000000  0003663d  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro   000058bc  00000000  00000000  00036e05  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment       00000039  00000000  00000000  0003c6c1  2**0  CONTENTS, READONLY
 15 .debug_frame   000020e8  00000000  00000000  0003c6fc  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
80000000 l    d  .text	00000000 .text
80006270 l    d  .sdata	00000000 .sdata
80006290 l    d  .data	00000000 .data
80006370 l    d  .sbss	00000000 .sbss
800063e0 l    d  .bss	00000000 .bss
80020850 l    d  .heap	00000000 .heap
80030850 l    d  .stack	00000000 .stack
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./riscv_hal/entry.o
8000000c l       .text	00000000 handle_reset
80000004 l       .text	00000000 nmi_vector
80000008 l       .text	00000000 trap_vector
80000030 l       .text	00000000 trap_entry
00000000 l    df *ABS*	00000000 init.c
80000160 l     F .text	00000050 zero_section
00000000 l    df *ABS*	00000000 riscv_hal.c
80000238 l     F .text	000000b8 PLIC_DisableIRQ
800002f0 l     F .text	00000044 PLIC_ClaimIRQ
80000334 l     F .text	0000004c PLIC_CompleteIRQ
80006370 l     O .sbss	00000008 g_systick_increment
00000000 l    df *ABS*	00000000 riscv_hal_stubs.c
00000000 l    df *ABS*	00000000 syscall.c
80006378 l     O .sbss	00000008 g_stdio_uart
80006380 l     O .sbss	00000004 g_stdio_uart_init_done
80000de0 l     F .text	00000030 stub
00000000 l    df *ABS*	00000000 core_uart_apb.c
00000000 l    df *ABS*	00000000 heap_2.c
800063e0 l     O .bss	00019000 ucHeap
80006384 l     O .sbss	00000008 xStart
8000638c l     O .sbss	00000008 xEnd
80006270 l     O .sdata	00000004 xFreeBytesRemaining
80006394 l     O .sbss	00000004 xHeapHasBeenInitialised.2777
800014f4 l     F .text	00000074 prvHeapInit
00000000 l    df *ABS*	00000000 port.c
80001568 l     F .text	0000004c raise_soft_interrupt
80006274 l     O .sdata	00000004 uxCriticalNesting
80006278 l     O .sdata	00000004 mtime
8000627c l     O .sdata	00000004 mtimecmp
80001628 l     F .text	000000cc prvSetNextTimerInterrupt
800017c0 l     F .text	0000002c prvTaskExitError
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 tasks.c
8001f3e0 l     O .bss	00000064 pxReadyTasksLists
8001f444 l     O .bss	00000014 xDelayedTaskList1
8001f458 l     O .bss	00000014 xDelayedTaskList2
800063a0 l     O .sbss	00000004 pxDelayedTaskList
800063a4 l     O .sbss	00000004 pxOverflowDelayedTaskList
8001f46c l     O .bss	00000014 xPendingReadyList
8001f480 l     O .bss	00000014 xTasksWaitingTermination
800063a8 l     O .sbss	00000004 uxTasksDeleted
8001f494 l     O .bss	00000014 xSuspendedTaskList
800063ac l     O .sbss	00000004 uxCurrentNumberOfTasks
800063b0 l     O .sbss	00000004 xTickCount
800063b4 l     O .sbss	00000004 uxTopReadyPriority
800063b8 l     O .sbss	00000004 xSchedulerRunning
800063bc l     O .sbss	00000004 uxPendedTicks
800063c0 l     O .sbss	00000004 xYieldPending
800063c4 l     O .sbss	00000004 xNumOfOverflows
800063c8 l     O .sbss	00000004 uxTaskNumber
800063cc l     O .sbss	00000004 xNextTaskUnblockTime
800063d0 l     O .sbss	00000004 uxSchedulerSuspended
80002968 l     F .text	000000c0 prvAllocateTCBAndStack
80002648 l     F .text	00000138 prvInitialiseTCBVariables
80002780 l     F .text	000000c0 prvInitialiseTaskLists
80002a68 l     F .text	00000060 prvResetNextTaskUnblockTime
800028e0 l     F .text	00000088 prvAddCurrentTaskToDelayedList
80002614 l     F .text	00000034 prvIdleTask
80002840 l     F .text	000000a0 prvCheckTasksWaitingTermination
80002a28 l     F .text	00000040 prvDeleteTCB
00000000 l    df *ABS*	00000000 chronos.c
80002af0 l     F .text	000000b4 PLIC_EnableIRQ
80002ba4 l     F .text	0000003c PLIC_SetPriority
00000000 l    df *ABS*	00000000 globalMaster.c
00000000 l    df *ABS*	00000000 applications.c
00000000 l    df *ABS*	00000000 packet.c
00000000 l    df *ABS*	00000000 main.c
800059fc l     F .text	000000d0 PLIC_init
80005cdc l     F .text	0000006c GlobalManagerTask
80005c74 l     F .text	00000034 vUartTestTask1
80005ca8 l     F .text	00000034 vUartTestTask2
00000000 l    df *ABS*	00000000 syswrite.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 impure.c
80006310 l     O .data	00000060 impure_data
800015e8 g     F .text	00000040 vPortExitCritical
00010000 g       *ABS*	00000000 STACK_SIZE
8001f4a8 g     O .bss	00000004 SendingSlot
800009b8  w    F .text	00000020 External_11_IRQHandler
80006a70 g       .sdata	00000000 __global_pointer$
80002d64 g     F .text	00000048 printsv
80006290 g       *ABS*	00000000 __data_load
80001880 g     F .text	000000cc SysTick_Handler
800008f8  w    F .text	00000020 External_5_IRQHandler
8000578c g     F .text	0000008c API_PipeInitialization
80004468 g     F .text	00000118 API_TilesReset
80000fc0 g       .text	00000000 HW_get_8bit_reg_field
8000341c g     F .text	00000080 reverse
80004024 g     F .text	00000078 API_AddPendingReq
8001ff10 g     O .bss	00000024 priorityMatrix
8000639c g     O .sbss	00000004 pxCurrentTCB
80006370 g       .sbss	00000000 __sbss_start
80002be0 g     F .text	000000d8 Chronos_init
8001ff0c g     O .bss	00000004 errno
8001f4ac g     O .bss	000000f0 ServicePipe
80000ef8 g       .text	00000000 HW_set_32bit_reg
80000ad8  w    F .text	00000020 External_20_IRQHandler
8000194c g     F .text	00000044 xPortStartScheduler
80000380 g     F .text	00000024 __enable_irq
80001e4c g     F .text	0000021c xTaskGenericCreate
800058b8 g     F .text	000000a0 API_GetServiceSlot
80006270 g       .sdata	00000000 __sdata_start
80001428 g     F .text	000000cc vPortFree
8000367c g     F .text	00000088 API_PushSendQueue
80020838 g     O .bss	00000008 g_uart
80000f98 g       .text	00000000 HW_set_8bit_reg_field
80000b98  w    F .text	00000020 External_26_IRQHandler
80000788 g     F .text	00000110 handle_trap
80004398 g     F .text	00000070 API_GetApplicationFreeSlot
80001b20 g     F .text	00000088 vListInsertEnd
00080000 g       *ABS*	00000000 RAM_SIZE
80000998  w    F .text	00000020 External_10_IRQHandler
8001ff34 g     O .bss	00000780 applications
80002d28 g     F .text	0000003c printi
80001af8 g     F .text	00000028 vListInitialiseItem
80000c18  w    F .text	00000020 External_30_IRQHandler
80000a78  w    F .text	00000020 External_17_IRQHandler
80030850 g       .heap	00000000 _heap_end
80000d90 g     F .text	00000050 _isatty
80020850 g       .bss	00000000 __bss_end
800004ec g     F .text	0000029c handle_syscall
800041b4 g     F .text	000001e4 API_AddApplication
8000124c g     F .text	000001dc pvPortMalloc
80005818 g     F .text	000000a0 API_GetMessageSlot
800001b0 g     F .text	0000006c _init
80001a94 g     F .text	00000064 vListInitialise
80000f88 g       .text	00000000 HW_set_8bit_reg
80000f90 g       .text	00000000 HW_get_8bit_reg
80002304 g     F .text	00000038 xTaskGetTickCount
80004628 g     F .text	000002d8 API_AllocateTasks
80005294 g     F .text	000000b4 API_TaskListInit
80005440 g     F .text	000001c0 API_TaskAllocation
800053d0 g     F .text	00000070 API_GetFreeTaskSlot
800063e0 g       .sbss	00000000 __sbss_end
800056d0 g     F .text	000000bc API_TaskStart
80000f08 g       .text	00000000 HW_set_32bit_reg_field
80005d48 g     F .text	0000001c write
80004e1c g     F .text	00000134 API_TaskAllocated
80005c44 g     F .text	00000014 vApplicationMallocFailedHook
80000b78  w    F .text	00000020 External_25_IRQHandler
80040850 g       .stack	00000000 __stack_top
80000bf8  w    F .text	00000020 External_29_IRQHandler
8001f59c g     O .bss	00000034 incommingPacket
8000119c g     F .text	000000b0 UART_polled_tx_string
80000c58 g     F .text	000000e8 write_hex
800009f8  w    F .text	00000020 External_13_IRQHandler
80002f9c g     F .text	00000434 External_2_IRQHandler
00010000 g       *ABS*	00000000 HEAP_SIZE
800009d8  w    F .text	00000020 External_12_IRQHandler
8000363c g     F .text	00000040 makeAddress
800010e8 g     F .text	000000b4 UART_send
80002e60 g     F .text	0000004c SendRaw
80000000 g       .text	00000000 _start
8000217c g     F .text	00000028 vTaskSuspendAll
80003704 g     F .text	0000008c API_PopSendQueue
800003a4 g     F .text	000000a8 handle_m_timer_interrupt
80002cb8 g     F .text	00000070 prints
80001c7c g     F .text	00000098 uxListRemove
80004f50 g     F .text	00000344 API_ApplicationStart
80002eac g     F .text	00000094 NI_enable_irq
80006270 g       *ABS*	00000000 __sdata_load
80006370 g       .data	00000000 __data_end
80002528 g     F .text	000000ec vTaskSwitchContext
80000a98  w    F .text	00000020 External_18_IRQHandler
80000f30 g       .text	00000000 HW_get_32bit_reg_field
8000349c g     F .text	000001a0 myItoa
80000b18  w    F .text	00000020 External_22_IRQHandler
80000a38  w    F .text	00000020 External_15_IRQHandler
80001a6c g     F .text	00000028 vPortYield
80005348 g     F .text	00000088 API_GetCurrentTaskSlot
80000000 g       *ABS*	00000000 RAM_START_ADDRESS
800063e0 g       .bss	00000000 __bss_start
800206b4 g     O .bss	000000f0 TaskList
80000a58  w    F .text	00000020 External_16_IRQHandler
80001d14 g     F .text	000000e8 memset
80005acc g     F .text	00000178 main
800033d0 g     F .text	0000004c mySwap
80001ba8 g     F .text	000000d4 vListInsert
80000bd8  w    F .text	00000020 External_28_IRQHandler
80003f9c g     F .text	00000088 API_CheckMessagePipe
80004408 g     F .text	00000060 API_ApplicationsReset
80002ac8 g     F .text	00000028 xTaskGetCurrentTaskHandle
80000f48 g       .text	00000000 HW_get_16bit_reg
80006290 g       .sdata	00000000 __sdata_end
80030850 g       .heap	00000000 __heap_end
80000a18  w    F .text	00000020 External_14_IRQHandler
80004a4c g     F .text	00000114 API_GetTaskSlotFromTile
80004900 g     F .text	0000014c getNextPriorityAddr
80004c6c g     F .text	000001b0 API_RepositoryAllocation
8000021c g     F .text	0000001c _fini
800021a4 g     F .text	00000160 xTaskResumeAll
800020ec g     F .text	00000090 vTaskStartScheduler
800039f8 g     F .text	000002e8 API_SendMessage
80006290 g     O .data	00000080 ext_irq_handler_table
8001f5d0 g     O .bss	00000020 SendingQueue
80005d64 g     F .text	00000054 _write_r
80000f50 g       .text	00000000 HW_set_16bit_reg_field
80003890 g     F .text	00000168 API_AckTaskAllocation
8001f5f0 g     O .bss	00000004 SendingQueue_tail
80006280 g     O .sdata	00000004 _impure_ptr
80030850 g       .stack	00000000 __stack_bottom
80001990 g     F .text	000000dc Software_IRQHandler
80005958 g     F .text	000000a4 API_ClearPipeSlot
80000bb8  w    F .text	00000020 External_27_IRQHandler
80000958  w    F .text	00000020 External_8_IRQHandler
80000978  w    F .text	00000020 External_9_IRQHandler
80020850 g       .heap	00000000 __heap_start
80000898  w    F .text	00000020 Invalid_IRQHandler
80003790 g     F .text	00000100 API_Try2Send
800008b8  w    F .text	00000020 External_3_IRQHandler
8000233c g     F .text	000001ec xTaskIncrementTick
80005600 g     F .text	000000d0 API_GetTaskSlot
80006398 g     O .sbss	00000004 g_startscheduler
80002e38 g     F .text	00000028 getYpos
80000ab8  w    F .text	00000020 External_19_IRQHandler
80000e10 g     F .text	000000e8 _write
80002e0c g     F .text	0000002c getXpos
80020850 g       .bss	00000000 _end
800016f4 g     F .text	000000cc vPortSetupTimer
8001f5f4 g     O .bss	00000014 str
8001f608 g     O .bss	00000004 SendingQueue_front
8000409c g     F .text	00000118 API_RepositoryWakeUp
80002dac g     F .text	00000060 printsvsv
80002068 g     F .text	00000084 vTaskDelay
80000fd0 g     F .text	00000118 UART_init
80000f00 g       .text	00000000 HW_get_32bit_reg
80000d40 g     F .text	00000050 _exit
80000f40 g       .text	00000000 HW_set_16bit_reg
80003ce0 g     F .text	000002bc API_SendMessageReq
80001dfc g     F .text	00000050 strlen
800017ec g     F .text	00000094 pxPortInitialiseStack
80002f40 g     F .text	0000005c External_1_IRQHandler
80000918  w    F .text	00000020 External_6_IRQHandler
80000c38  w    F .text	00000020 External_31_IRQHandler
80004b60 g     F .text	0000010c API_GetSystemTasksSlots
800015b4 g     F .text	00000034 vPortEnterCritical
80006290 g       .data	00000000 __data_start
80020840 g     O .bss	00000004 ProcessorAddr
800207a4 g     O .bss	00000004 priorityPointer
80000af8  w    F .text	00000020 External_21_IRQHandler
800207a8 g     O .bss	00000090 Tiles
800004bc g     F .text	00000030 handle_m_soft_interrupt
8000044c g     F .text	00000070 handle_m_ext_interrupt
80000f78 g       .text	00000000 HW_get_16bit_reg_field
80000b38  w    F .text	00000020 External_23_IRQHandler
80000b58  w    F .text	00000020 External_24_IRQHandler
800008d8  w    F .text	00000020 External_4_IRQHandler
8001f60c g     O .bss	00000900 MessagePipe
80004580 g     F .text	000000a8 GeneratePatternMatrix
80000938  w    F .text	00000020 External_7_IRQHandler
80005c58 g     F .text	0000001c vApplicationIdleHook



Disassembly of section .text:

80000000 <_start>:
_start():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:30

  .section      .text.entry
  .globl _start

_start:
  j handle_reset
80000000:	00c0006f          	j	8000000c <handle_reset>

80000004 <nmi_vector>:
nmi_vector():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:33

nmi_vector:
  j nmi_vector
80000004:	0000006f          	j	80000004 <nmi_vector>

80000008 <trap_vector>:
trap_vector():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:36

trap_vector:
  j trap_entry
80000008:	0280006f          	j	80000030 <trap_entry>

8000000c <handle_reset>:
handle_reset():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:39

handle_reset:
  la t0, trap_entry
8000000c:	00000297          	auipc	t0,0x0
80000010:	02428293          	addi	t0,t0,36 # 80000030 <trap_entry>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:40
  csrw mtvec, t0
80000014:	30529073          	csrw	mtvec,t0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:41
  csrwi mstatus, 0
80000018:	30005073          	csrwi	mstatus,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:42
  csrwi mie, 0
8000001c:	30405073          	csrwi	mie,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:60
  lui t0, 0x0
  fscsr t0
#endif

  # initialize global pointer
  la gp, __global_pointer$
80000020:	00018193          	mv	gp,gp
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:63

  # initialize stack pointer
  la sp, __stack_top
80000024:	00041117          	auipc	sp,0x41
80000028:	82c10113          	addi	sp,sp,-2004 # 80040850 <__stack_top>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:66

  # perform the rest of initialization in C
  j _init
8000002c:	1840006f          	j	800001b0 <_init>

80000030 <trap_entry>:
trap_entry():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:70


trap_entry:
  addi sp, sp, -32*REGBYTES
80000030:	f8010113          	addi	sp,sp,-128
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:72

  SREG x1, 0 * REGBYTES(sp)
80000034:	00112023          	sw	ra,0(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:73
  SREG x2, 1 * REGBYTES(sp)
80000038:	00212223          	sw	sp,4(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:74
  SREG x3, 2 * REGBYTES(sp)
8000003c:	00312423          	sw	gp,8(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:75
  SREG x4, 3 * REGBYTES(sp)
80000040:	00412623          	sw	tp,12(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:76
  SREG x5, 4 * REGBYTES(sp)
80000044:	00512823          	sw	t0,16(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:77
  SREG x6, 5 * REGBYTES(sp)
80000048:	00612a23          	sw	t1,20(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:78
  SREG x7, 6 * REGBYTES(sp)
8000004c:	00712c23          	sw	t2,24(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:79
  SREG x8, 7 * REGBYTES(sp)
80000050:	00812e23          	sw	s0,28(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:80
  SREG x9, 8 * REGBYTES(sp)
80000054:	02912023          	sw	s1,32(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:81
  SREG x10, 9 * REGBYTES(sp)
80000058:	02a12223          	sw	a0,36(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:82
  SREG x11, 10 * REGBYTES(sp)
8000005c:	02b12423          	sw	a1,40(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:83
  SREG x12, 11 * REGBYTES(sp)
80000060:	02c12623          	sw	a2,44(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:84
  SREG x13, 12 * REGBYTES(sp)
80000064:	02d12823          	sw	a3,48(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:85
  SREG x14, 13 * REGBYTES(sp)
80000068:	02e12a23          	sw	a4,52(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:86
  SREG x15, 14 * REGBYTES(sp)
8000006c:	02f12c23          	sw	a5,56(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:87
  SREG x16, 15 * REGBYTES(sp)
80000070:	03012e23          	sw	a6,60(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:88
  SREG x17, 16 * REGBYTES(sp)
80000074:	05112023          	sw	a7,64(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:89
  SREG x18, 17 * REGBYTES(sp)
80000078:	05212223          	sw	s2,68(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:90
  SREG x19, 18 * REGBYTES(sp)
8000007c:	05312423          	sw	s3,72(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:91
  SREG x20, 19 * REGBYTES(sp)
80000080:	05412623          	sw	s4,76(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:92
  SREG x21, 20 * REGBYTES(sp)
80000084:	05512823          	sw	s5,80(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:93
  SREG x22, 21 * REGBYTES(sp)
80000088:	05612a23          	sw	s6,84(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:94
  SREG x23, 22 * REGBYTES(sp)
8000008c:	05712c23          	sw	s7,88(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:95
  SREG x24, 23 * REGBYTES(sp)
80000090:	05812e23          	sw	s8,92(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:96
  SREG x25, 24 * REGBYTES(sp)
80000094:	07912023          	sw	s9,96(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:97
  SREG x26, 25 * REGBYTES(sp)
80000098:	07a12223          	sw	s10,100(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:98
  SREG x27, 26 * REGBYTES(sp)
8000009c:	07b12423          	sw	s11,104(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:99
  SREG x28, 27 * REGBYTES(sp)
800000a0:	07c12623          	sw	t3,108(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:100
  SREG x29, 28 * REGBYTES(sp)
800000a4:	07d12823          	sw	t4,112(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:101
  SREG x30, 29 * REGBYTES(sp)
800000a8:	07e12a23          	sw	t5,116(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:102
  SREG x31, 30 * REGBYTES(sp)
800000ac:	07f12c23          	sw	t6,120(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:105


  csrr t0, mepc
800000b0:	341022f3          	csrr	t0,mepc
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:106
  SREG t0, 31 * REGBYTES(sp)
800000b4:	06512e23          	sw	t0,124(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:108

  csrr a0, mcause
800000b8:	34202573          	csrr	a0,mcause
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:109
  csrr a1, mepc
800000bc:	341025f3          	csrr	a1,mepc
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:110
  mv a2, sp
800000c0:	00010613          	mv	a2,sp
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:111
  jal handle_trap
800000c4:	6c4000ef          	jal	ra,80000788 <handle_trap>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:112
  csrw mepc, a0
800000c8:	34151073          	csrw	mepc,a0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:115

  # Remain in M-mode after mret
  li t0, MSTATUS_MPP
800000cc:	000022b7          	lui	t0,0x2
800000d0:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:116
  csrs mstatus, t0
800000d4:	3002a073          	csrs	mstatus,t0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:118

  LREG x1, 0 * REGBYTES(sp)
800000d8:	00012083          	lw	ra,0(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:119
  LREG x2, 1 * REGBYTES(sp)
800000dc:	00412103          	lw	sp,4(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:120
  LREG x3, 2 * REGBYTES(sp)
800000e0:	00812183          	lw	gp,8(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:121
  LREG x4, 3 * REGBYTES(sp)
800000e4:	00c12203          	lw	tp,12(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:122
  LREG x5, 4 * REGBYTES(sp)
800000e8:	01012283          	lw	t0,16(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:123
  LREG x6, 5 * REGBYTES(sp)
800000ec:	01412303          	lw	t1,20(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:124
  LREG x7, 6 * REGBYTES(sp)
800000f0:	01812383          	lw	t2,24(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:125
  LREG x8, 7 * REGBYTES(sp)
800000f4:	01c12403          	lw	s0,28(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:126
  LREG x9, 8 * REGBYTES(sp)
800000f8:	02012483          	lw	s1,32(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:127
  LREG x10, 9 * REGBYTES(sp)
800000fc:	02412503          	lw	a0,36(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:128
  LREG x11, 10 * REGBYTES(sp)
80000100:	02812583          	lw	a1,40(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:129
  LREG x12, 11 * REGBYTES(sp)
80000104:	02c12603          	lw	a2,44(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:130
  LREG x13, 12 * REGBYTES(sp)
80000108:	03012683          	lw	a3,48(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:131
  LREG x14, 13 * REGBYTES(sp)
8000010c:	03412703          	lw	a4,52(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:132
  LREG x15, 14 * REGBYTES(sp)
80000110:	03812783          	lw	a5,56(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:133
  LREG x16, 15 * REGBYTES(sp)
80000114:	03c12803          	lw	a6,60(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:134
  LREG x17, 16 * REGBYTES(sp)
80000118:	04012883          	lw	a7,64(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:135
  LREG x18, 17 * REGBYTES(sp)
8000011c:	04412903          	lw	s2,68(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:136
  LREG x19, 18 * REGBYTES(sp)
80000120:	04812983          	lw	s3,72(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:137
  LREG x20, 19 * REGBYTES(sp)
80000124:	04c12a03          	lw	s4,76(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:138
  LREG x21, 20 * REGBYTES(sp)
80000128:	05012a83          	lw	s5,80(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:139
  LREG x22, 21 * REGBYTES(sp)
8000012c:	05412b03          	lw	s6,84(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:140
  LREG x23, 22 * REGBYTES(sp)
80000130:	05812b83          	lw	s7,88(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:141
  LREG x24, 23 * REGBYTES(sp)
80000134:	05c12c03          	lw	s8,92(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:142
  LREG x25, 24 * REGBYTES(sp)
80000138:	06012c83          	lw	s9,96(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:143
  LREG x26, 25 * REGBYTES(sp)
8000013c:	06412d03          	lw	s10,100(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:144
  LREG x27, 26 * REGBYTES(sp)
80000140:	06812d83          	lw	s11,104(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:145
  LREG x28, 27 * REGBYTES(sp)
80000144:	06c12e03          	lw	t3,108(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:146
  LREG x29, 28 * REGBYTES(sp)
80000148:	07012e83          	lw	t4,112(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:147
  LREG x30, 29 * REGBYTES(sp)
8000014c:	07412f03          	lw	t5,116(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:148
  LREG x31, 30 * REGBYTES(sp)
80000150:	07812f83          	lw	t6,120(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:150

  addi sp, sp, 32*REGBYTES
80000154:	08010113          	addi	sp,sp,128
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:151
  mret
80000158:	30200073          	mret
8000015c:	0000                	unimp
	...

80000160 <zero_section>:
zero_section():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:47
        ++p_vma;
    }
}

static void zero_section(uint32_t * start, uint32_t * end)
{
80000160:	fd010113          	addi	sp,sp,-48
80000164:	02812623          	sw	s0,44(sp)
80000168:	03010413          	addi	s0,sp,48
8000016c:	fca42e23          	sw	a0,-36(s0)
80000170:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:48
    uint32_t * p_zero = start;
80000174:	fdc42783          	lw	a5,-36(s0)
80000178:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:50
    
    while(p_zero <= end)
8000017c:	0180006f          	j	80000194 <zero_section+0x34>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:52
    {
        *p_zero = 0;
80000180:	fec42783          	lw	a5,-20(s0)
80000184:	0007a023          	sw	zero,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:53
        ++p_zero;
80000188:	fec42783          	lw	a5,-20(s0)
8000018c:	00478793          	addi	a5,a5,4
80000190:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:50
    while(p_zero <= end)
80000194:	fec42703          	lw	a4,-20(s0)
80000198:	fd842783          	lw	a5,-40(s0)
8000019c:	fee7f2e3          	bleu	a4,a5,80000180 <zero_section+0x20>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:55
    }
}
800001a0:	00000013          	nop
800001a4:	02c12403          	lw	s0,44(sp)
800001a8:	03010113          	addi	sp,sp,48
800001ac:	00008067          	ret

800001b0 <_init>:
_init():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:58

void _init(void)
{
800001b0:	fe010113          	addi	sp,sp,-32
800001b4:	00112e23          	sw	ra,28(sp)
800001b8:	00812c23          	sw	s0,24(sp)
800001bc:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:60
    extern int main(int, char**);
    const char *argv0 = "hello";
800001c0:	800067b7          	lui	a5,0x80006
800001c4:	dc078793          	addi	a5,a5,-576 # 80005dc0 <__stack_top+0xfffc5570>
800001c8:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:61
    char *argv[] = {(char *)argv0, NULL, NULL};
800001cc:	fec42783          	lw	a5,-20(s0)
800001d0:	fef42023          	sw	a5,-32(s0)
800001d4:	fe042223          	sw	zero,-28(s0)
800001d8:	fe042423          	sw	zero,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:66

// Imperas - this is loaded directly by simulator so must not be copied
//    copy_section(&__sdata_load, &__sdata_start, &__sdata_end);
//    copy_section(&__data_load, &__data_start, &__data_end);
    zero_section(&__sbss_start, &__sbss_end);
800001dc:	97018593          	addi	a1,gp,-1680 # 800063e0 <__sbss_end>
800001e0:	90018513          	addi	a0,gp,-1792 # 80006370 <__data_end>
800001e4:	f7dff0ef          	jal	ra,80000160 <zero_section>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:67
    zero_section(&__bss_start, &__bss_end);
800001e8:	800217b7          	lui	a5,0x80021
800001ec:	85078593          	addi	a1,a5,-1968 # 80020850 <__stack_top+0xfffe0000>
800001f0:	97018513          	addi	a0,gp,-1680 # 800063e0 <__sbss_end>
800001f4:	f6dff0ef          	jal	ra,80000160 <zero_section>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:69
    
    main(1, argv);
800001f8:	fe040793          	addi	a5,s0,-32
800001fc:	00078593          	mv	a1,a5
80000200:	00100513          	li	a0,1
80000204:	0c9050ef          	jal	ra,80005acc <main>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:70
}
80000208:	00000013          	nop
8000020c:	01c12083          	lw	ra,28(sp)
80000210:	01812403          	lw	s0,24(sp)
80000214:	02010113          	addi	sp,sp,32
80000218:	00008067          	ret

8000021c <_fini>:
_fini():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:75

/* Function called after main() finishes */
void
_fini()
{
8000021c:	ff010113          	addi	sp,sp,-16
80000220:	00812623          	sw	s0,12(sp)
80000224:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:76
}
80000228:	00000013          	nop
8000022c:	00c12403          	lw	s0,12(sp)
80000230:	01010113          	addi	sp,sp,16
80000234:	00008067          	ret

80000238 <PLIC_DisableIRQ>:
PLIC_DisableIRQ():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:174
 * 	If you wish to disable the external interrupt while the interrupt handler
 * 	for that external interrupt is executing then you must use the return value
 * 	EXT_IRQ_DISABLE to return from the extern interrupt handler.
 */
static inline void PLIC_DisableIRQ(IRQn_Type IRQn)
{
80000238:	fd010113          	addi	sp,sp,-48
8000023c:	02812623          	sw	s0,44(sp)
80000240:	03010413          	addi	s0,sp,48
80000244:	fca42e23          	sw	a0,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:175
    unsigned long hart_id = read_csr(mhartid);
80000248:	f14027f3          	csrr	a5,mhartid
8000024c:	fef42623          	sw	a5,-20(s0)
80000250:	fec42783          	lw	a5,-20(s0)
80000254:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:176
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80000258:	40000737          	lui	a4,0x40000
8000025c:	fdc42783          	lw	a5,-36(s0)
80000260:	0057d793          	srli	a5,a5,0x5
80000264:	fe842683          	lw	a3,-24(s0)
80000268:	00569693          	slli	a3,a3,0x5
8000026c:	00f686b3          	add	a3,a3,a5
80000270:	000017b7          	lui	a5,0x1
80000274:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80000278:	00f687b3          	add	a5,a3,a5
8000027c:	00279793          	slli	a5,a5,0x2
80000280:	00f707b3          	add	a5,a4,a5
80000284:	0007a783          	lw	a5,0(a5)
80000288:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:178

    current &= ~((uint32_t)1 << (IRQn % 32));
8000028c:	fdc42783          	lw	a5,-36(s0)
80000290:	01f7f793          	andi	a5,a5,31
80000294:	00100713          	li	a4,1
80000298:	00f717b3          	sll	a5,a4,a5
8000029c:	fff7c793          	not	a5,a5
800002a0:	fe442703          	lw	a4,-28(s0)
800002a4:	00f777b3          	and	a5,a4,a5
800002a8:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:180

    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
800002ac:	40000737          	lui	a4,0x40000
800002b0:	fdc42783          	lw	a5,-36(s0)
800002b4:	0057d793          	srli	a5,a5,0x5
800002b8:	fe842683          	lw	a3,-24(s0)
800002bc:	00569693          	slli	a3,a3,0x5
800002c0:	00f686b3          	add	a3,a3,a5
800002c4:	000017b7          	lui	a5,0x1
800002c8:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
800002cc:	00f687b3          	add	a5,a3,a5
800002d0:	00279793          	slli	a5,a5,0x2
800002d4:	00f707b3          	add	a5,a4,a5
800002d8:	fe442703          	lw	a4,-28(s0)
800002dc:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:181
}
800002e0:	00000013          	nop
800002e4:	02c12403          	lw	s0,44(sp)
800002e8:	03010113          	addi	sp,sp,48
800002ec:	00008067          	ret

800002f0 <PLIC_ClaimIRQ>:
PLIC_ClaimIRQ():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:205

/*==============================================================================
 * The function PLIC_ClaimIRQ() claims the interrupt from the PLIC controller.
 */
static inline uint32_t PLIC_ClaimIRQ(void)
{
800002f0:	fe010113          	addi	sp,sp,-32
800002f4:	00812e23          	sw	s0,28(sp)
800002f8:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:206
    unsigned long hart_id = read_csr(mhartid);
800002fc:	f14027f3          	csrr	a5,mhartid
80000300:	fef42623          	sw	a5,-20(s0)
80000304:	fec42783          	lw	a5,-20(s0)
80000308:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:208

    return PLIC->TARGET[hart_id].CLAIM_COMPLETE;
8000030c:	40000737          	lui	a4,0x40000
80000310:	fe842783          	lw	a5,-24(s0)
80000314:	20078793          	addi	a5,a5,512
80000318:	00c79793          	slli	a5,a5,0xc
8000031c:	00f707b3          	add	a5,a4,a5
80000320:	0047a783          	lw	a5,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:209
}
80000324:	00078513          	mv	a0,a5
80000328:	01c12403          	lw	s0,28(sp)
8000032c:	02010113          	addi	sp,sp,32
80000330:	00008067          	ret

80000334 <PLIC_CompleteIRQ>:
PLIC_CompleteIRQ():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:216
/*==============================================================================
 * The function PLIC_CompleteIRQ() indicates to the PLIC controller the interrupt
 * is processed and claim is complete.
 */
static inline void PLIC_CompleteIRQ(uint32_t source)
{
80000334:	fd010113          	addi	sp,sp,-48
80000338:	02812623          	sw	s0,44(sp)
8000033c:	03010413          	addi	s0,sp,48
80000340:	fca42e23          	sw	a0,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:217
    unsigned long hart_id = read_csr(mhartid);
80000344:	f14027f3          	csrr	a5,mhartid
80000348:	fef42623          	sw	a5,-20(s0)
8000034c:	fec42783          	lw	a5,-20(s0)
80000350:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:219

    PLIC->TARGET[hart_id].CLAIM_COMPLETE = source;
80000354:	40000737          	lui	a4,0x40000
80000358:	fe842783          	lw	a5,-24(s0)
8000035c:	20078793          	addi	a5,a5,512
80000360:	00c79793          	slli	a5,a5,0xc
80000364:	00f707b3          	add	a5,a4,a5
80000368:	fdc42703          	lw	a4,-36(s0)
8000036c:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:220
}
80000370:	00000013          	nop
80000374:	02c12403          	lw	s0,44(sp)
80000378:	03010113          	addi	sp,sp,48
8000037c:	00008067          	ret

80000380 <__enable_irq>:
__enable_irq():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:96

/*------------------------------------------------------------------------------
 * Enabler all interrupts.
 */
void __enable_irq(void)
{
80000380:	fe010113          	addi	sp,sp,-32
80000384:	00812e23          	sw	s0,28(sp)
80000388:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:97
    set_csr(mstatus, MSTATUS_MIE);
8000038c:	300467f3          	csrrsi	a5,mstatus,8
80000390:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:98
}
80000394:	00000013          	nop
80000398:	01c12403          	lw	s0,28(sp)
8000039c:	02010113          	addi	sp,sp,32
800003a0:	00008067          	ret

800003a4 <handle_m_timer_interrupt>:
handle_m_timer_interrupt():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:128

/*------------------------------------------------------------------------------
 * RISC-V interrupt handler for machine timer interrupts.
 */
void handle_m_timer_interrupt()
{
800003a4:	fe010113          	addi	sp,sp,-32
800003a8:	00112e23          	sw	ra,28(sp)
800003ac:	00812c23          	sw	s0,24(sp)
800003b0:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:129
    clear_csr(mie, MIP_MTIP);
800003b4:	08000793          	li	a5,128
800003b8:	3047b7f3          	csrrc	a5,mie,a5
800003bc:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:131

    SysTick_Handler();
800003c0:	4c0010ef          	jal	ra,80001880 <SysTick_Handler>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:133

    PRCI->MTIMECMP[read_csr(mhartid)] = PRCI->MTIME + g_systick_increment;
800003c4:	44000737          	lui	a4,0x44000
800003c8:	0000c7b7          	lui	a5,0xc
800003cc:	00f707b3          	add	a5,a4,a5
800003d0:	ffc7a803          	lw	a6,-4(a5) # bffc <HEAP_SIZE-0x4004>
800003d4:	ff87a783          	lw	a5,-8(a5)
800003d8:	9001a583          	lw	a1,-1792(gp) # 80006370 <__data_end>
800003dc:	9041a603          	lw	a2,-1788(gp) # 80006374 <__data_end+0x4>
800003e0:	44000537          	lui	a0,0x44000
800003e4:	f1402773          	csrr	a4,mhartid
800003e8:	fee42423          	sw	a4,-24(s0)
800003ec:	fe842883          	lw	a7,-24(s0)
800003f0:	00b786b3          	add	a3,a5,a1
800003f4:	00068313          	mv	t1,a3
800003f8:	00f33333          	sltu	t1,t1,a5
800003fc:	00c80733          	add	a4,a6,a2
80000400:	00e307b3          	add	a5,t1,a4
80000404:	00078713          	mv	a4,a5
80000408:	00068793          	mv	a5,a3
8000040c:	00070813          	mv	a6,a4
80000410:	00001737          	lui	a4,0x1
80000414:	80070713          	addi	a4,a4,-2048 # 800 <HEAP_SIZE-0xf800>
80000418:	00e88733          	add	a4,a7,a4
8000041c:	00371713          	slli	a4,a4,0x3
80000420:	00e50733          	add	a4,a0,a4
80000424:	00f72023          	sw	a5,0(a4)
80000428:	01072223          	sw	a6,4(a4)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:135

    set_csr(mie, MIP_MTIP);
8000042c:	08000793          	li	a5,128
80000430:	3047a7f3          	csrrs	a5,mie,a5
80000434:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:136
}
80000438:	00000013          	nop
8000043c:	01c12083          	lw	ra,28(sp)
80000440:	01812403          	lw	s0,24(sp)
80000444:	02010113          	addi	sp,sp,32
80000448:	00008067          	ret

8000044c <handle_m_ext_interrupt>:
handle_m_ext_interrupt():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:181

/*------------------------------------------------------------------------------
 * 
 */
void handle_m_ext_interrupt()
{
8000044c:	fe010113          	addi	sp,sp,-32
80000450:	00112e23          	sw	ra,28(sp)
80000454:	00812c23          	sw	s0,24(sp)
80000458:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:182
    uint32_t int_num  = PLIC_ClaimIRQ();
8000045c:	e95ff0ef          	jal	ra,800002f0 <PLIC_ClaimIRQ>
80000460:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:183
    uint8_t disable = EXT_IRQ_KEEP_ENABLED;
80000464:	fe0405a3          	sb	zero,-21(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:185

    disable = ext_irq_handler_table[int_num]();
80000468:	800067b7          	lui	a5,0x80006
8000046c:	fec42703          	lw	a4,-20(s0)
80000470:	00271713          	slli	a4,a4,0x2
80000474:	29078793          	addi	a5,a5,656 # 80006290 <__stack_top+0xfffc5a40>
80000478:	00f707b3          	add	a5,a4,a5
8000047c:	0007a783          	lw	a5,0(a5)
80000480:	000780e7          	jalr	a5
80000484:	00050793          	mv	a5,a0
80000488:	fef405a3          	sb	a5,-21(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:187

    PLIC_CompleteIRQ(int_num);
8000048c:	fec42503          	lw	a0,-20(s0)
80000490:	ea5ff0ef          	jal	ra,80000334 <PLIC_CompleteIRQ>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:189

    if(EXT_IRQ_DISABLE == disable)
80000494:	feb44703          	lbu	a4,-21(s0)
80000498:	00100793          	li	a5,1
8000049c:	00f71663          	bne	a4,a5,800004a8 <handle_m_ext_interrupt+0x5c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:191
    {
        PLIC_DisableIRQ((IRQn_Type)int_num);
800004a0:	fec42503          	lw	a0,-20(s0)
800004a4:	d95ff0ef          	jal	ra,80000238 <PLIC_DisableIRQ>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:193
    }
}
800004a8:	00000013          	nop
800004ac:	01c12083          	lw	ra,28(sp)
800004b0:	01812403          	lw	s0,24(sp)
800004b4:	02010113          	addi	sp,sp,32
800004b8:	00008067          	ret

800004bc <handle_m_soft_interrupt>:
handle_m_soft_interrupt():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:196

void handle_m_soft_interrupt()
{
800004bc:	ff010113          	addi	sp,sp,-16
800004c0:	00112623          	sw	ra,12(sp)
800004c4:	00812423          	sw	s0,8(sp)
800004c8:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:197
    Software_IRQHandler();
800004cc:	4c4010ef          	jal	ra,80001990 <Software_IRQHandler>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:200

    /*Clear software interrupt*/
    PRCI->MSIP[0] = 0x00;
800004d0:	440007b7          	lui	a5,0x44000
800004d4:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:201
}
800004d8:	00000013          	nop
800004dc:	00c12083          	lw	ra,12(sp)
800004e0:	00812403          	lw	s0,8(sp)
800004e4:	01010113          	addi	sp,sp,16
800004e8:	00008067          	ret

800004ec <handle_syscall>:
handle_syscall():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:204

/* syscall funcion defined at system_call.c */
unsigned int handle_syscall(){
800004ec:	fd010113          	addi	sp,sp,-48
800004f0:	02112623          	sw	ra,44(sp)
800004f4:	02812423          	sw	s0,40(sp)
800004f8:	03212223          	sw	s2,36(sp)
800004fc:	03010413          	addi	s0,sp,48
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:207
	unsigned int arg0, arg1, arg2, arg3, arg4, arg5, type;
	unsigned int *pointer;
	register long temp asm("s2") = 0;
80000500:	00000913          	li	s2,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:208
	asm("addi	s2, sp, 0");
80000504:	00010913          	mv	s2,sp
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:210
	
	pointer = (unsigned int *)(temp + (29*4));
80000508:	00090793          	mv	a5,s2
8000050c:	07478793          	addi	a5,a5,116
80000510:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:211
	arg0 =  *pointer;
80000514:	fec42783          	lw	a5,-20(s0)
80000518:	0007a783          	lw	a5,0(a5)
8000051c:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:213

	pointer = (unsigned int *)(temp + (30*4));
80000520:	00090793          	mv	a5,s2
80000524:	07878793          	addi	a5,a5,120
80000528:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:214
	arg1 = *pointer;
8000052c:	fec42783          	lw	a5,-20(s0)
80000530:	0007a783          	lw	a5,0(a5)
80000534:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:216
	
	pointer = (unsigned int *)(temp + (31*4));
80000538:	00090793          	mv	a5,s2
8000053c:	07c78793          	addi	a5,a5,124
80000540:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:217
	arg2 = *pointer;
80000544:	fec42783          	lw	a5,-20(s0)
80000548:	0007a783          	lw	a5,0(a5)
8000054c:	fef42023          	sw	a5,-32(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:219

	pointer = (unsigned int *)(temp + (32*4));
80000550:	00090793          	mv	a5,s2
80000554:	08078793          	addi	a5,a5,128
80000558:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:220
	arg3 = *pointer;
8000055c:	fec42783          	lw	a5,-20(s0)
80000560:	0007a783          	lw	a5,0(a5)
80000564:	fcf42e23          	sw	a5,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:222

	pointer = (unsigned int *)(temp + (33*4));
80000568:	00090793          	mv	a5,s2
8000056c:	08478793          	addi	a5,a5,132
80000570:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:223
	arg4 = *pointer;
80000574:	fec42783          	lw	a5,-20(s0)
80000578:	0007a783          	lw	a5,0(a5)
8000057c:	fcf42c23          	sw	a5,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:225

	pointer = (unsigned int *)(temp + (34*4));
80000580:	00090793          	mv	a5,s2
80000584:	08878793          	addi	a5,a5,136
80000588:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:226
	arg4 = *pointer;
8000058c:	fec42783          	lw	a5,-20(s0)
80000590:	0007a783          	lw	a5,0(a5)
80000594:	fcf42c23          	sw	a5,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:228

	pointer = (unsigned int *)(temp + (36*4));
80000598:	00090793          	mv	a5,s2
8000059c:	09078793          	addi	a5,a5,144
800005a0:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:229
	type = *pointer;
800005a4:	fec42783          	lw	a5,-20(s0)
800005a8:	0007a783          	lw	a5,0(a5)
800005ac:	fcf42a23          	sw	a5,-44(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:231
	
	switch (type){
800005b0:	fd442783          	lw	a5,-44(s0)
800005b4:	ff678793          	addi	a5,a5,-10
800005b8:	03800713          	li	a4,56
800005bc:	12f76263          	bltu	a4,a5,800006e0 <handle_syscall+0x1f4>
800005c0:	00279713          	slli	a4,a5,0x2
800005c4:	800067b7          	lui	a5,0x80006
800005c8:	e4878793          	addi	a5,a5,-440 # 80005e48 <__stack_top+0xfffc55f8>
800005cc:	00f707b3          	add	a5,a4,a5
800005d0:	0007a783          	lw	a5,0(a5)
800005d4:	00078067          	jr	a5
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:234

		case SYS_TESTING:
			prints("Detectei uma chamada TESTE de sistema!\n");
800005d8:	800067b7          	lui	a5,0x80006
800005dc:	dc878513          	addi	a0,a5,-568 # 80005dc8 <__stack_top+0xfffc5578>
800005e0:	6d8020ef          	jal	ra,80002cb8 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:235
			printsv("arg0 ", arg0);
800005e4:	fe842783          	lw	a5,-24(s0)
800005e8:	00078593          	mv	a1,a5
800005ec:	800067b7          	lui	a5,0x80006
800005f0:	df078513          	addi	a0,a5,-528 # 80005df0 <__stack_top+0xfffc55a0>
800005f4:	770020ef          	jal	ra,80002d64 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:236
			printsv("arg1 ", arg1);
800005f8:	fe442783          	lw	a5,-28(s0)
800005fc:	00078593          	mv	a1,a5
80000600:	800067b7          	lui	a5,0x80006
80000604:	df878513          	addi	a0,a5,-520 # 80005df8 <__stack_top+0xfffc55a8>
80000608:	75c020ef          	jal	ra,80002d64 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:237
			printsv("arg2 ", arg2);
8000060c:	fe042783          	lw	a5,-32(s0)
80000610:	00078593          	mv	a1,a5
80000614:	800067b7          	lui	a5,0x80006
80000618:	e0078513          	addi	a0,a5,-512 # 80005e00 <__stack_top+0xfffc55b0>
8000061c:	748020ef          	jal	ra,80002d64 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:238
			printsv("arg3 ", arg3);
80000620:	fdc42783          	lw	a5,-36(s0)
80000624:	00078593          	mv	a1,a5
80000628:	800067b7          	lui	a5,0x80006
8000062c:	e0878513          	addi	a0,a5,-504 # 80005e08 <__stack_top+0xfffc55b8>
80000630:	734020ef          	jal	ra,80002d64 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:239
			printsv("arg4 ", arg4);
80000634:	fd842783          	lw	a5,-40(s0)
80000638:	00078593          	mv	a1,a5
8000063c:	800067b7          	lui	a5,0x80006
80000640:	e1078513          	addi	a0,a5,-496 # 80005e10 <__stack_top+0xfffc55c0>
80000644:	720020ef          	jal	ra,80002d64 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:240
			printsv("type ", type);
80000648:	fd442783          	lw	a5,-44(s0)
8000064c:	00078593          	mv	a1,a5
80000650:	800067b7          	lui	a5,0x80006
80000654:	e1878513          	addi	a0,a5,-488 # 80005e18 <__stack_top+0xfffc55c8>
80000658:	70c020ef          	jal	ra,80002d64 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:241
			break;
8000065c:	1100006f          	j	8000076c <handle_syscall+0x280>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:244

        case SYS_PRINTS:
            prints(arg0);
80000660:	fe842783          	lw	a5,-24(s0)
80000664:	00078513          	mv	a0,a5
80000668:	650020ef          	jal	ra,80002cb8 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:245
            UART_polled_tx_string( &g_uart, arg0 );
8000066c:	fe842783          	lw	a5,-24(s0)
80000670:	00078593          	mv	a1,a5
80000674:	800217b7          	lui	a5,0x80021
80000678:	83878513          	addi	a0,a5,-1992 # 80020838 <__stack_top+0xfffdffe8>
8000067c:	321000ef          	jal	ra,8000119c <UART_polled_tx_string>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:246
            break;
80000680:	0ec0006f          	j	8000076c <handle_syscall+0x280>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:249
        
        case SYS_PRINTI:
            printi(arg0);
80000684:	fe842783          	lw	a5,-24(s0)
80000688:	00078513          	mv	a0,a5
8000068c:	69c020ef          	jal	ra,80002d28 <printi>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:250
            myItoa(arg0, str, 10);
80000690:	fe842703          	lw	a4,-24(s0)
80000694:	00a00613          	li	a2,10
80000698:	8001f7b7          	lui	a5,0x8001f
8000069c:	5f478593          	addi	a1,a5,1524 # 8001f5f4 <__stack_top+0xfffdeda4>
800006a0:	00070513          	mv	a0,a4
800006a4:	5f9020ef          	jal	ra,8000349c <myItoa>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:251
            UART_polled_tx_string( &g_uart, (const uint8_t *)str );
800006a8:	8001f7b7          	lui	a5,0x8001f
800006ac:	5f478593          	addi	a1,a5,1524 # 8001f5f4 <__stack_top+0xfffdeda4>
800006b0:	800217b7          	lui	a5,0x80021
800006b4:	83878513          	addi	a0,a5,-1992 # 80020838 <__stack_top+0xfffdffe8>
800006b8:	2e5000ef          	jal	ra,8000119c <UART_polled_tx_string>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:252
            break;
800006bc:	0b00006f          	j	8000076c <handle_syscall+0x280>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:255
        
        case SYS_SEND_MSG:
            API_SendMessage(arg0, arg1);
800006c0:	fe442583          	lw	a1,-28(s0)
800006c4:	fe842503          	lw	a0,-24(s0)
800006c8:	330030ef          	jal	ra,800039f8 <API_SendMessage>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:256
            break;
800006cc:	0a00006f          	j	8000076c <handle_syscall+0x280>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:259
        
        case SYS_RECV_MSG:
            API_SendMessageReq(arg0, arg1);
800006d0:	fe442583          	lw	a1,-28(s0)
800006d4:	fe842503          	lw	a0,-24(s0)
800006d8:	608030ef          	jal	ra,80003ce0 <API_SendMessageReq>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:260
            break;
800006dc:	0900006f          	j	8000076c <handle_syscall+0x280>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:266
        
        case SYS_END_TASK:
            break;

		default:
			prints("Systemcall não identificada!\n");
800006e0:	800067b7          	lui	a5,0x80006
800006e4:	e2078513          	addi	a0,a5,-480 # 80005e20 <__stack_top+0xfffc55d0>
800006e8:	5d0020ef          	jal	ra,80002cb8 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:267
			printsv("arg0 ", arg0);
800006ec:	fe842783          	lw	a5,-24(s0)
800006f0:	00078593          	mv	a1,a5
800006f4:	800067b7          	lui	a5,0x80006
800006f8:	df078513          	addi	a0,a5,-528 # 80005df0 <__stack_top+0xfffc55a0>
800006fc:	668020ef          	jal	ra,80002d64 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:268
			printsv("arg1 ", arg1);
80000700:	fe442783          	lw	a5,-28(s0)
80000704:	00078593          	mv	a1,a5
80000708:	800067b7          	lui	a5,0x80006
8000070c:	df878513          	addi	a0,a5,-520 # 80005df8 <__stack_top+0xfffc55a8>
80000710:	654020ef          	jal	ra,80002d64 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:269
			printsv("arg2 ", arg2);
80000714:	fe042783          	lw	a5,-32(s0)
80000718:	00078593          	mv	a1,a5
8000071c:	800067b7          	lui	a5,0x80006
80000720:	e0078513          	addi	a0,a5,-512 # 80005e00 <__stack_top+0xfffc55b0>
80000724:	640020ef          	jal	ra,80002d64 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:270
			printsv("arg3 ", arg3);
80000728:	fdc42783          	lw	a5,-36(s0)
8000072c:	00078593          	mv	a1,a5
80000730:	800067b7          	lui	a5,0x80006
80000734:	e0878513          	addi	a0,a5,-504 # 80005e08 <__stack_top+0xfffc55b8>
80000738:	62c020ef          	jal	ra,80002d64 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:271
			printsv("arg4 ", arg4);
8000073c:	fd842783          	lw	a5,-40(s0)
80000740:	00078593          	mv	a1,a5
80000744:	800067b7          	lui	a5,0x80006
80000748:	e1078513          	addi	a0,a5,-496 # 80005e10 <__stack_top+0xfffc55c0>
8000074c:	618020ef          	jal	ra,80002d64 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:272
			printsv("type ", type);
80000750:	fd442783          	lw	a5,-44(s0)
80000754:	00078593          	mv	a1,a5
80000758:	800067b7          	lui	a5,0x80006
8000075c:	e1878513          	addi	a0,a5,-488 # 80005e18 <__stack_top+0xfffc55c8>
80000760:	604020ef          	jal	ra,80002d64 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:273
			break;
80000764:	0080006f          	j	8000076c <handle_syscall+0x280>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:263
            break;
80000768:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:275
	}
	return 87;
8000076c:	05700793          	li	a5,87
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:290
	// 	value = *p;
	// 	printsvsv("i: ", i, " value: ", value);
	// }
    // prints("Cheguei aqui!!!!!!! sucessooo :D\n");
	////////////////////////////////////////////////////
}
80000770:	00078513          	mv	a0,a5
80000774:	02c12083          	lw	ra,44(sp)
80000778:	02812403          	lw	s0,40(sp)
8000077c:	02412903          	lw	s2,36(sp)
80000780:	03010113          	addi	sp,sp,48
80000784:	00008067          	ret

80000788 <handle_trap>:
handle_trap():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:296

/*------------------------------------------------------------------------------
 * Trap/Interrupt handler
 */
uintptr_t handle_trap(uintptr_t mcause, uintptr_t epc)
{
80000788:	fe010113          	addi	sp,sp,-32
8000078c:	00112e23          	sw	ra,28(sp)
80000790:	00812c23          	sw	s0,24(sp)
80000794:	02010413          	addi	s0,sp,32
80000798:	fea42623          	sw	a0,-20(s0)
8000079c:	feb42423          	sw	a1,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:297
    if (mcause == ENV_CALL_M || mcause == ENV_CALL_H || mcause == ENV_CALL_S || mcause == ENV_CALL_U){
800007a0:	fec42703          	lw	a4,-20(s0)
800007a4:	00b00793          	li	a5,11
800007a8:	02f70463          	beq	a4,a5,800007d0 <handle_trap+0x48>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:297 (discriminator 1)
800007ac:	fec42703          	lw	a4,-20(s0)
800007b0:	00a00793          	li	a5,10
800007b4:	00f70e63          	beq	a4,a5,800007d0 <handle_trap+0x48>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:297 (discriminator 2)
800007b8:	fec42703          	lw	a4,-20(s0)
800007bc:	00900793          	li	a5,9
800007c0:	00f70863          	beq	a4,a5,800007d0 <handle_trap+0x48>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:297 (discriminator 3)
800007c4:	fec42703          	lw	a4,-20(s0)
800007c8:	00800793          	li	a5,8
800007cc:	00f71c63          	bne	a4,a5,800007e4 <handle_trap+0x5c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:298
        handle_syscall();
800007d0:	d1dff0ef          	jal	ra,800004ec <handle_syscall>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:299
        epc = (uintptr_t) (epc + 4);
800007d4:	fe842783          	lw	a5,-24(s0)
800007d8:	00478793          	addi	a5,a5,4
800007dc:	fef42423          	sw	a5,-24(s0)
800007e0:	0a00006f          	j	80000880 <handle_trap+0xf8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:301
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_EXT)){
800007e4:	fec42783          	lw	a5,-20(s0)
800007e8:	0207d263          	bgez	a5,8000080c <handle_trap+0x84>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:301 (discriminator 1)
800007ec:	fec42703          	lw	a4,-20(s0)
800007f0:	800007b7          	lui	a5,0x80000
800007f4:	fff7c793          	not	a5,a5
800007f8:	00f77733          	and	a4,a4,a5
800007fc:	00b00793          	li	a5,11
80000800:	00f71663          	bne	a4,a5,8000080c <handle_trap+0x84>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:302
        handle_m_ext_interrupt();
80000804:	c49ff0ef          	jal	ra,8000044c <handle_m_ext_interrupt>
80000808:	0780006f          	j	80000880 <handle_trap+0xf8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:304
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_TIMER)){
8000080c:	fec42783          	lw	a5,-20(s0)
80000810:	0207d263          	bgez	a5,80000834 <handle_trap+0xac>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:304 (discriminator 1)
80000814:	fec42703          	lw	a4,-20(s0)
80000818:	800007b7          	lui	a5,0x80000
8000081c:	fff7c793          	not	a5,a5
80000820:	00f77733          	and	a4,a4,a5
80000824:	00700793          	li	a5,7
80000828:	00f71663          	bne	a4,a5,80000834 <handle_trap+0xac>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:305
        handle_m_timer_interrupt();
8000082c:	b79ff0ef          	jal	ra,800003a4 <handle_m_timer_interrupt>
80000830:	0500006f          	j	80000880 <handle_trap+0xf8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:307
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_SOFT)){
80000834:	fec42783          	lw	a5,-20(s0)
80000838:	0207d263          	bgez	a5,8000085c <handle_trap+0xd4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:307 (discriminator 1)
8000083c:	fec42703          	lw	a4,-20(s0)
80000840:	800007b7          	lui	a5,0x80000
80000844:	fff7c793          	not	a5,a5
80000848:	00f77733          	and	a4,a4,a5
8000084c:	00300793          	li	a5,3
80000850:	00f71663          	bne	a4,a5,8000085c <handle_trap+0xd4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:308
        handle_m_soft_interrupt();
80000854:	c69ff0ef          	jal	ra,800004bc <handle_m_soft_interrupt>
80000858:	0280006f          	j	80000880 <handle_trap+0xf8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:311
    }
    else{
        write(1, "trap\n", 5);
8000085c:	00500613          	li	a2,5
80000860:	800067b7          	lui	a5,0x80006
80000864:	e4078593          	addi	a1,a5,-448 # 80005e40 <__stack_top+0xfffc55f0>
80000868:	00100513          	li	a0,1
8000086c:	4dc050ef          	jal	ra,80005d48 <write>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:312
        _exit(1 + mcause);
80000870:	fec42783          	lw	a5,-20(s0)
80000874:	00178793          	addi	a5,a5,1
80000878:	00078513          	mv	a0,a5
8000087c:	4c4000ef          	jal	ra,80000d40 <_exit>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:314
    }
    return epc;
80000880:	fe842783          	lw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:315
}
80000884:	00078513          	mv	a0,a5
80000888:	01c12083          	lw	ra,28(sp)
8000088c:	01812403          	lw	s0,24(sp)
80000890:	02010113          	addi	sp,sp,32
80000894:	00008067          	ret

80000898 <Invalid_IRQHandler>:
Invalid_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:37
{
    ;
}

__attribute__((weak))  uint8_t Invalid_IRQHandler(void)
{
80000898:	ff010113          	addi	sp,sp,-16
8000089c:	00812623          	sw	s0,12(sp)
800008a0:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:38
    return(0);
800008a4:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:39
}
800008a8:	00078513          	mv	a0,a5
800008ac:	00c12403          	lw	s0,12(sp)
800008b0:	01010113          	addi	sp,sp,16
800008b4:	00008067          	ret

800008b8 <External_3_IRQHandler>:
External_3_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:52
{
    return(0);
}

__attribute__((weak))  uint8_t External_3_IRQHandler(void)
{
800008b8:	ff010113          	addi	sp,sp,-16
800008bc:	00812623          	sw	s0,12(sp)
800008c0:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:53
    return(0);
800008c4:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:54
}
800008c8:	00078513          	mv	a0,a5
800008cc:	00c12403          	lw	s0,12(sp)
800008d0:	01010113          	addi	sp,sp,16
800008d4:	00008067          	ret

800008d8 <External_4_IRQHandler>:
External_4_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:57

__attribute__((weak))  uint8_t External_4_IRQHandler(void)
{
800008d8:	ff010113          	addi	sp,sp,-16
800008dc:	00812623          	sw	s0,12(sp)
800008e0:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:58
    return(0);
800008e4:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:59
}
800008e8:	00078513          	mv	a0,a5
800008ec:	00c12403          	lw	s0,12(sp)
800008f0:	01010113          	addi	sp,sp,16
800008f4:	00008067          	ret

800008f8 <External_5_IRQHandler>:
External_5_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:62

__attribute__((weak))  uint8_t External_5_IRQHandler(void)
{
800008f8:	ff010113          	addi	sp,sp,-16
800008fc:	00812623          	sw	s0,12(sp)
80000900:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:63
    return(0);
80000904:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:64
}
80000908:	00078513          	mv	a0,a5
8000090c:	00c12403          	lw	s0,12(sp)
80000910:	01010113          	addi	sp,sp,16
80000914:	00008067          	ret

80000918 <External_6_IRQHandler>:
External_6_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:67

__attribute__((weak))  uint8_t External_6_IRQHandler(void)
{
80000918:	ff010113          	addi	sp,sp,-16
8000091c:	00812623          	sw	s0,12(sp)
80000920:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:68
    return(0);
80000924:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:69
}
80000928:	00078513          	mv	a0,a5
8000092c:	00c12403          	lw	s0,12(sp)
80000930:	01010113          	addi	sp,sp,16
80000934:	00008067          	ret

80000938 <External_7_IRQHandler>:
External_7_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:72

__attribute__((weak))  uint8_t External_7_IRQHandler(void)
{
80000938:	ff010113          	addi	sp,sp,-16
8000093c:	00812623          	sw	s0,12(sp)
80000940:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:73
    return(0);
80000944:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:74
}
80000948:	00078513          	mv	a0,a5
8000094c:	00c12403          	lw	s0,12(sp)
80000950:	01010113          	addi	sp,sp,16
80000954:	00008067          	ret

80000958 <External_8_IRQHandler>:
External_8_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:77

__attribute__((weak))  uint8_t External_8_IRQHandler(void)
{
80000958:	ff010113          	addi	sp,sp,-16
8000095c:	00812623          	sw	s0,12(sp)
80000960:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:78
    return(0);
80000964:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:79
}
80000968:	00078513          	mv	a0,a5
8000096c:	00c12403          	lw	s0,12(sp)
80000970:	01010113          	addi	sp,sp,16
80000974:	00008067          	ret

80000978 <External_9_IRQHandler>:
External_9_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:82

__attribute__((weak))  uint8_t External_9_IRQHandler(void)
{
80000978:	ff010113          	addi	sp,sp,-16
8000097c:	00812623          	sw	s0,12(sp)
80000980:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:83
    return(0);
80000984:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:84
}
80000988:	00078513          	mv	a0,a5
8000098c:	00c12403          	lw	s0,12(sp)
80000990:	01010113          	addi	sp,sp,16
80000994:	00008067          	ret

80000998 <External_10_IRQHandler>:
External_10_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:87

__attribute__((weak))  uint8_t External_10_IRQHandler(void)
{
80000998:	ff010113          	addi	sp,sp,-16
8000099c:	00812623          	sw	s0,12(sp)
800009a0:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:88
    return(0);
800009a4:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:89
}
800009a8:	00078513          	mv	a0,a5
800009ac:	00c12403          	lw	s0,12(sp)
800009b0:	01010113          	addi	sp,sp,16
800009b4:	00008067          	ret

800009b8 <External_11_IRQHandler>:
External_11_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:92

__attribute__((weak))  uint8_t External_11_IRQHandler(void)
{
800009b8:	ff010113          	addi	sp,sp,-16
800009bc:	00812623          	sw	s0,12(sp)
800009c0:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:93
    return(0);
800009c4:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:94
}
800009c8:	00078513          	mv	a0,a5
800009cc:	00c12403          	lw	s0,12(sp)
800009d0:	01010113          	addi	sp,sp,16
800009d4:	00008067          	ret

800009d8 <External_12_IRQHandler>:
External_12_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:97

__attribute__((weak))  uint8_t External_12_IRQHandler(void)
{
800009d8:	ff010113          	addi	sp,sp,-16
800009dc:	00812623          	sw	s0,12(sp)
800009e0:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:98
    return(0);
800009e4:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:99
}
800009e8:	00078513          	mv	a0,a5
800009ec:	00c12403          	lw	s0,12(sp)
800009f0:	01010113          	addi	sp,sp,16
800009f4:	00008067          	ret

800009f8 <External_13_IRQHandler>:
External_13_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:102

__attribute__((weak))  uint8_t External_13_IRQHandler(void)
{
800009f8:	ff010113          	addi	sp,sp,-16
800009fc:	00812623          	sw	s0,12(sp)
80000a00:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:103
    return(0);
80000a04:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:104
}
80000a08:	00078513          	mv	a0,a5
80000a0c:	00c12403          	lw	s0,12(sp)
80000a10:	01010113          	addi	sp,sp,16
80000a14:	00008067          	ret

80000a18 <External_14_IRQHandler>:
External_14_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:107

__attribute__((weak))  uint8_t External_14_IRQHandler(void)
{
80000a18:	ff010113          	addi	sp,sp,-16
80000a1c:	00812623          	sw	s0,12(sp)
80000a20:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:108
    return(0);
80000a24:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:109
}
80000a28:	00078513          	mv	a0,a5
80000a2c:	00c12403          	lw	s0,12(sp)
80000a30:	01010113          	addi	sp,sp,16
80000a34:	00008067          	ret

80000a38 <External_15_IRQHandler>:
External_15_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:112

__attribute__((weak))  uint8_t External_15_IRQHandler(void)
{
80000a38:	ff010113          	addi	sp,sp,-16
80000a3c:	00812623          	sw	s0,12(sp)
80000a40:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:113
    return(0);
80000a44:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:114
}
80000a48:	00078513          	mv	a0,a5
80000a4c:	00c12403          	lw	s0,12(sp)
80000a50:	01010113          	addi	sp,sp,16
80000a54:	00008067          	ret

80000a58 <External_16_IRQHandler>:
External_16_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:117

__attribute__((weak))  uint8_t External_16_IRQHandler(void)
{
80000a58:	ff010113          	addi	sp,sp,-16
80000a5c:	00812623          	sw	s0,12(sp)
80000a60:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:118
    return(0);
80000a64:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:119
}
80000a68:	00078513          	mv	a0,a5
80000a6c:	00c12403          	lw	s0,12(sp)
80000a70:	01010113          	addi	sp,sp,16
80000a74:	00008067          	ret

80000a78 <External_17_IRQHandler>:
External_17_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:122

__attribute__((weak))  uint8_t External_17_IRQHandler(void)
{
80000a78:	ff010113          	addi	sp,sp,-16
80000a7c:	00812623          	sw	s0,12(sp)
80000a80:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:123
    return(0);
80000a84:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:124
}
80000a88:	00078513          	mv	a0,a5
80000a8c:	00c12403          	lw	s0,12(sp)
80000a90:	01010113          	addi	sp,sp,16
80000a94:	00008067          	ret

80000a98 <External_18_IRQHandler>:
External_18_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:127

__attribute__((weak))  uint8_t External_18_IRQHandler(void)
{
80000a98:	ff010113          	addi	sp,sp,-16
80000a9c:	00812623          	sw	s0,12(sp)
80000aa0:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:128
    return(0);
80000aa4:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:129
}
80000aa8:	00078513          	mv	a0,a5
80000aac:	00c12403          	lw	s0,12(sp)
80000ab0:	01010113          	addi	sp,sp,16
80000ab4:	00008067          	ret

80000ab8 <External_19_IRQHandler>:
External_19_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:132

__attribute__((weak))  uint8_t External_19_IRQHandler(void)
{
80000ab8:	ff010113          	addi	sp,sp,-16
80000abc:	00812623          	sw	s0,12(sp)
80000ac0:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:133
    return(0);
80000ac4:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:134
}
80000ac8:	00078513          	mv	a0,a5
80000acc:	00c12403          	lw	s0,12(sp)
80000ad0:	01010113          	addi	sp,sp,16
80000ad4:	00008067          	ret

80000ad8 <External_20_IRQHandler>:
External_20_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:137

__attribute__((weak))  uint8_t External_20_IRQHandler(void)
{
80000ad8:	ff010113          	addi	sp,sp,-16
80000adc:	00812623          	sw	s0,12(sp)
80000ae0:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:138
    return(0);
80000ae4:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:139
}
80000ae8:	00078513          	mv	a0,a5
80000aec:	00c12403          	lw	s0,12(sp)
80000af0:	01010113          	addi	sp,sp,16
80000af4:	00008067          	ret

80000af8 <External_21_IRQHandler>:
External_21_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:142

__attribute__((weak))  uint8_t External_21_IRQHandler(void)
{
80000af8:	ff010113          	addi	sp,sp,-16
80000afc:	00812623          	sw	s0,12(sp)
80000b00:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:143
    return(0);
80000b04:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:144
}
80000b08:	00078513          	mv	a0,a5
80000b0c:	00c12403          	lw	s0,12(sp)
80000b10:	01010113          	addi	sp,sp,16
80000b14:	00008067          	ret

80000b18 <External_22_IRQHandler>:
External_22_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:147

__attribute__((weak))  uint8_t External_22_IRQHandler(void)
{
80000b18:	ff010113          	addi	sp,sp,-16
80000b1c:	00812623          	sw	s0,12(sp)
80000b20:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:148
    return(0);
80000b24:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:149
}
80000b28:	00078513          	mv	a0,a5
80000b2c:	00c12403          	lw	s0,12(sp)
80000b30:	01010113          	addi	sp,sp,16
80000b34:	00008067          	ret

80000b38 <External_23_IRQHandler>:
External_23_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:152

__attribute__((weak))  uint8_t External_23_IRQHandler(void)
{
80000b38:	ff010113          	addi	sp,sp,-16
80000b3c:	00812623          	sw	s0,12(sp)
80000b40:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:153
    return(0);
80000b44:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:154
}
80000b48:	00078513          	mv	a0,a5
80000b4c:	00c12403          	lw	s0,12(sp)
80000b50:	01010113          	addi	sp,sp,16
80000b54:	00008067          	ret

80000b58 <External_24_IRQHandler>:
External_24_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:157

__attribute__((weak))  uint8_t External_24_IRQHandler(void)
{
80000b58:	ff010113          	addi	sp,sp,-16
80000b5c:	00812623          	sw	s0,12(sp)
80000b60:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:158
    return(0);
80000b64:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:159
}
80000b68:	00078513          	mv	a0,a5
80000b6c:	00c12403          	lw	s0,12(sp)
80000b70:	01010113          	addi	sp,sp,16
80000b74:	00008067          	ret

80000b78 <External_25_IRQHandler>:
External_25_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:162

__attribute__((weak))  uint8_t External_25_IRQHandler(void)
{
80000b78:	ff010113          	addi	sp,sp,-16
80000b7c:	00812623          	sw	s0,12(sp)
80000b80:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:163
    return(0);
80000b84:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:164
}
80000b88:	00078513          	mv	a0,a5
80000b8c:	00c12403          	lw	s0,12(sp)
80000b90:	01010113          	addi	sp,sp,16
80000b94:	00008067          	ret

80000b98 <External_26_IRQHandler>:
External_26_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:167

__attribute__((weak))  uint8_t External_26_IRQHandler(void)
{
80000b98:	ff010113          	addi	sp,sp,-16
80000b9c:	00812623          	sw	s0,12(sp)
80000ba0:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:168
    return(0);
80000ba4:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:169
}
80000ba8:	00078513          	mv	a0,a5
80000bac:	00c12403          	lw	s0,12(sp)
80000bb0:	01010113          	addi	sp,sp,16
80000bb4:	00008067          	ret

80000bb8 <External_27_IRQHandler>:
External_27_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:172

__attribute__((weak))  uint8_t External_27_IRQHandler(void)
{
80000bb8:	ff010113          	addi	sp,sp,-16
80000bbc:	00812623          	sw	s0,12(sp)
80000bc0:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:173
    return(0);
80000bc4:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:174
}
80000bc8:	00078513          	mv	a0,a5
80000bcc:	00c12403          	lw	s0,12(sp)
80000bd0:	01010113          	addi	sp,sp,16
80000bd4:	00008067          	ret

80000bd8 <External_28_IRQHandler>:
External_28_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:177

__attribute__((weak))  uint8_t External_28_IRQHandler(void)
{
80000bd8:	ff010113          	addi	sp,sp,-16
80000bdc:	00812623          	sw	s0,12(sp)
80000be0:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:178
    return(0);
80000be4:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:179
}
80000be8:	00078513          	mv	a0,a5
80000bec:	00c12403          	lw	s0,12(sp)
80000bf0:	01010113          	addi	sp,sp,16
80000bf4:	00008067          	ret

80000bf8 <External_29_IRQHandler>:
External_29_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:182

__attribute__((weak))  uint8_t External_29_IRQHandler(void)
{
80000bf8:	ff010113          	addi	sp,sp,-16
80000bfc:	00812623          	sw	s0,12(sp)
80000c00:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:183
    return(0);
80000c04:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:184
}
80000c08:	00078513          	mv	a0,a5
80000c0c:	00c12403          	lw	s0,12(sp)
80000c10:	01010113          	addi	sp,sp,16
80000c14:	00008067          	ret

80000c18 <External_30_IRQHandler>:
External_30_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:187

__attribute__((weak))  uint8_t External_30_IRQHandler(void)
{
80000c18:	ff010113          	addi	sp,sp,-16
80000c1c:	00812623          	sw	s0,12(sp)
80000c20:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:188
    return(0);
80000c24:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:189
}
80000c28:	00078513          	mv	a0,a5
80000c2c:	00c12403          	lw	s0,12(sp)
80000c30:	01010113          	addi	sp,sp,16
80000c34:	00008067          	ret

80000c38 <External_31_IRQHandler>:
External_31_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:192

__attribute__((weak))  uint8_t External_31_IRQHandler(void)
{
80000c38:	ff010113          	addi	sp,sp,-16
80000c3c:	00812623          	sw	s0,12(sp)
80000c40:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:193
    return(0);
80000c44:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:194
}
80000c48:	00078513          	mv	a0,a5
80000c4c:	00c12403          	lw	s0,12(sp)
80000c50:	01010113          	addi	sp,sp,16
80000c54:	00008067          	ret

80000c58 <write_hex>:
write_hex():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:55

char *__env[1] = { 0 };
char **environ = __env;

void write_hex(int fd, uint32_t hex)
{
80000c58:	fd010113          	addi	sp,sp,-48
80000c5c:	02112623          	sw	ra,44(sp)
80000c60:	02812423          	sw	s0,40(sp)
80000c64:	03010413          	addi	s0,sp,48
80000c68:	fca42e23          	sw	a0,-36(s0)
80000c6c:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:61
    uint8_t ii;
    uint8_t jj;
    char towrite;
    uint8_t digit;

    write( fd , "0x", 2 );
80000c70:	00200613          	li	a2,2
80000c74:	800067b7          	lui	a5,0x80006
80000c78:	f2c78593          	addi	a1,a5,-212 # 80005f2c <__stack_top+0xfffc56dc>
80000c7c:	fdc42503          	lw	a0,-36(s0)
80000c80:	0c8050ef          	jal	ra,80005d48 <write>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:63

    for (ii = 8 ; ii > 0; ii--)
80000c84:	00800793          	li	a5,8
80000c88:	fef407a3          	sb	a5,-17(s0)
80000c8c:	0980006f          	j	80000d24 <write_hex+0xcc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:65
    {
        jj = ii-1;
80000c90:	fef44783          	lbu	a5,-17(s0)
80000c94:	fff78793          	addi	a5,a5,-1
80000c98:	fef40723          	sb	a5,-18(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:66
        digit = ((hex & (0xF << (jj*4))) >> (jj*4));
80000c9c:	fee44783          	lbu	a5,-18(s0)
80000ca0:	00279793          	slli	a5,a5,0x2
80000ca4:	00f00713          	li	a4,15
80000ca8:	00f717b3          	sll	a5,a4,a5
80000cac:	00078713          	mv	a4,a5
80000cb0:	fd842783          	lw	a5,-40(s0)
80000cb4:	00f77733          	and	a4,a4,a5
80000cb8:	fee44783          	lbu	a5,-18(s0)
80000cbc:	00279793          	slli	a5,a5,0x2
80000cc0:	00f757b3          	srl	a5,a4,a5
80000cc4:	fef406a3          	sb	a5,-19(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:67
        towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
80000cc8:	fed44703          	lbu	a4,-19(s0)
80000ccc:	00900793          	li	a5,9
80000cd0:	00e7ee63          	bltu	a5,a4,80000cec <write_hex+0x94>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 1)
80000cd4:	fed44783          	lbu	a5,-19(s0)
80000cd8:	03078793          	addi	a5,a5,48
80000cdc:	0ff7f793          	andi	a5,a5,255
80000ce0:	01879793          	slli	a5,a5,0x18
80000ce4:	4187d793          	srai	a5,a5,0x18
80000ce8:	0180006f          	j	80000d00 <write_hex+0xa8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 2)
80000cec:	fed44783          	lbu	a5,-19(s0)
80000cf0:	03778793          	addi	a5,a5,55
80000cf4:	0ff7f793          	andi	a5,a5,255
80000cf8:	01879793          	slli	a5,a5,0x18
80000cfc:	4187d793          	srai	a5,a5,0x18
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 4)
80000d00:	fef40623          	sb	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:68 (discriminator 4)
        write( fd, &towrite, 1);
80000d04:	fec40793          	addi	a5,s0,-20
80000d08:	00100613          	li	a2,1
80000d0c:	00078593          	mv	a1,a5
80000d10:	fdc42503          	lw	a0,-36(s0)
80000d14:	034050ef          	jal	ra,80005d48 <write>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 4)
    for (ii = 8 ; ii > 0; ii--)
80000d18:	fef44783          	lbu	a5,-17(s0)
80000d1c:	fff78793          	addi	a5,a5,-1
80000d20:	fef407a3          	sb	a5,-17(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 2)
80000d24:	fef44783          	lbu	a5,-17(s0)
80000d28:	f60794e3          	bnez	a5,80000c90 <write_hex+0x38>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:70
    }
}
80000d2c:	00000013          	nop
80000d30:	02c12083          	lw	ra,44(sp)
80000d34:	02812403          	lw	s0,40(sp)
80000d38:	03010113          	addi	sp,sp,48
80000d3c:	00008067          	ret

80000d40 <_exit>:
_exit():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:74

               
void _exit(int code)
{
80000d40:	fd010113          	addi	sp,sp,-48
80000d44:	02112623          	sw	ra,44(sp)
80000d48:	02812423          	sw	s0,40(sp)
80000d4c:	03010413          	addi	s0,sp,48
80000d50:	fca42e23          	sw	a0,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:76
#ifdef MSCC_STDIO_THRU_CORE_UART_APB
    const char * message = "\nProgam has exited with code:";
80000d54:	800067b7          	lui	a5,0x80006
80000d58:	f3078793          	addi	a5,a5,-208 # 80005f30 <__stack_top+0xfffc56e0>
80000d5c:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:78

    write(STDERR_FILENO, message, strlen(message));
80000d60:	fec42503          	lw	a0,-20(s0)
80000d64:	098010ef          	jal	ra,80001dfc <strlen>
80000d68:	00050793          	mv	a5,a0
80000d6c:	00078613          	mv	a2,a5
80000d70:	fec42583          	lw	a1,-20(s0)
80000d74:	00200513          	li	a0,2
80000d78:	7d1040ef          	jal	ra,80005d48 <write>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:79
    write_hex(STDERR_FILENO, code);
80000d7c:	fdc42783          	lw	a5,-36(s0)
80000d80:	00078593          	mv	a1,a5
80000d84:	00200513          	li	a0,2
80000d88:	ed1ff0ef          	jal	ra,80000c58 <write_hex>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:82 (discriminator 1)
#endif

    while (1);
80000d8c:	0000006f          	j	80000d8c <_exit+0x4c>

80000d90 <_isatty>:
_isatty():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:101
    curbrk += incr;
    return curbrk - incr;
}

int _isatty(int fd)
{
80000d90:	fe010113          	addi	sp,sp,-32
80000d94:	00812e23          	sw	s0,28(sp)
80000d98:	02010413          	addi	s0,sp,32
80000d9c:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:102
    if (fd == STDOUT_FILENO || fd == STDERR_FILENO)
80000da0:	fec42703          	lw	a4,-20(s0)
80000da4:	00100793          	li	a5,1
80000da8:	00f70863          	beq	a4,a5,80000db8 <_isatty+0x28>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:102 (discriminator 1)
80000dac:	fec42703          	lw	a4,-20(s0)
80000db0:	00200793          	li	a5,2
80000db4:	00f71663          	bne	a4,a5,80000dc0 <_isatty+0x30>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:104
    {
        return 1;
80000db8:	00100793          	li	a5,1
80000dbc:	0140006f          	j	80000dd0 <_isatty+0x40>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:107
    }

    errno = EBADF;
80000dc0:	800207b7          	lui	a5,0x80020
80000dc4:	00900713          	li	a4,9
80000dc8:	f0e7a623          	sw	a4,-244(a5) # 8001ff0c <__stack_top+0xfffdf6bc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:108
    return 0;
80000dcc:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:109
}
80000dd0:	00078513          	mv	a0,a5
80000dd4:	01c12403          	lw	s0,28(sp)
80000dd8:	02010113          	addi	sp,sp,32
80000ddc:	00008067          	ret

80000de0 <stub>:
stub():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:112

static int stub(int err)
{
80000de0:	fe010113          	addi	sp,sp,-32
80000de4:	00812e23          	sw	s0,28(sp)
80000de8:	02010413          	addi	s0,sp,32
80000dec:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:113
    errno = err;
80000df0:	800207b7          	lui	a5,0x80020
80000df4:	fec42703          	lw	a4,-20(s0)
80000df8:	f0e7a623          	sw	a4,-244(a5) # 8001ff0c <__stack_top+0xfffdf6bc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:114
    return -1;
80000dfc:	fff00793          	li	a5,-1
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:115
}
80000e00:	00078513          	mv	a0,a5
80000e04:	01c12403          	lw	s0,28(sp)
80000e08:	02010113          	addi	sp,sp,32
80000e0c:	00008067          	ret

80000e10 <_write>:
_write():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:226
{
    return stub(ECHILD);
}

ssize_t _write(int fd, const void* ptr, size_t len)
{
80000e10:	fd010113          	addi	sp,sp,-48
80000e14:	02112623          	sw	ra,44(sp)
80000e18:	02812423          	sw	s0,40(sp)
80000e1c:	03010413          	addi	s0,sp,48
80000e20:	fca42e23          	sw	a0,-36(s0)
80000e24:	fcb42c23          	sw	a1,-40(s0)
80000e28:	fcc42a23          	sw	a2,-44(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:229

#ifdef MSCC_STDIO_THRU_CORE_UART_APB
  const uint8_t * current = (const uint8_t *) ptr;
80000e2c:	fd842783          	lw	a5,-40(s0)
80000e30:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:232
  size_t jj;

  if (_isatty(fd))
80000e34:	fdc42503          	lw	a0,-36(s0)
80000e38:	f59ff0ef          	jal	ra,80000d90 <_isatty>
80000e3c:	00050793          	mv	a5,a0
80000e40:	08078c63          	beqz	a5,80000ed8 <_write+0xc8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:238
  {
        /*--------------------------------------------------------------------------
        * Initialize the UART driver if it is the first time this function is
        * called.
        */
        if ( !g_stdio_uart_init_done )
80000e44:	9101a783          	lw	a5,-1776(gp) # 80006380 <g_stdio_uart_init_done>
80000e48:	02079063          	bnez	a5,80000e68 <_write+0x58>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:245
            /******************************************************************************
            * Baud value:
            * This value is calculated using the following equation:
            *      BAUD_VALUE = (CLOCK / (16 * BAUD_RATE)) - 1
            *****************************************************************************/
            UART_init( &g_stdio_uart, MSCC_STDIO_UART_BASE_ADDR, ((SYS_CLK_FREQ/(16 * MSCC_STDIO_BAUD_VALUE))-1), (DATA_8_BITS | NO_PARITY));
80000e4c:	00100693          	li	a3,1
80000e50:	02c00613          	li	a2,44
80000e54:	700015b7          	lui	a1,0x70001
80000e58:	90818513          	addi	a0,gp,-1784 # 80006378 <g_stdio_uart>
80000e5c:	174000ef          	jal	ra,80000fd0 <UART_init>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:246
            g_stdio_uart_init_done = 1;
80000e60:	00100713          	li	a4,1
80000e64:	90e1a823          	sw	a4,-1776(gp) # 80006380 <g_stdio_uart_init_done>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:249
        }

    for (jj = 0; jj < len; jj++)
80000e68:	fe042623          	sw	zero,-20(s0)
80000e6c:	0580006f          	j	80000ec4 <_write+0xb4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:251
    {
        UART_send(&g_stdio_uart, current + jj, 1);
80000e70:	fe842703          	lw	a4,-24(s0)
80000e74:	fec42783          	lw	a5,-20(s0)
80000e78:	00f707b3          	add	a5,a4,a5
80000e7c:	00100613          	li	a2,1
80000e80:	00078593          	mv	a1,a5
80000e84:	90818513          	addi	a0,gp,-1784 # 80006378 <g_stdio_uart>
80000e88:	260000ef          	jal	ra,800010e8 <UART_send>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:252
        if (current[jj] == '\n')
80000e8c:	fe842703          	lw	a4,-24(s0)
80000e90:	fec42783          	lw	a5,-20(s0)
80000e94:	00f707b3          	add	a5,a4,a5
80000e98:	0007c703          	lbu	a4,0(a5)
80000e9c:	00a00793          	li	a5,10
80000ea0:	00f71c63          	bne	a4,a5,80000eb8 <_write+0xa8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:254
        {
            UART_send(&g_stdio_uart, (const uint8_t *)"\r", 1);
80000ea4:	00100613          	li	a2,1
80000ea8:	800067b7          	lui	a5,0x80006
80000eac:	f5078593          	addi	a1,a5,-176 # 80005f50 <__stack_top+0xfffc5700>
80000eb0:	90818513          	addi	a0,gp,-1784 # 80006378 <g_stdio_uart>
80000eb4:	234000ef          	jal	ra,800010e8 <UART_send>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 2)
    for (jj = 0; jj < len; jj++)
80000eb8:	fec42783          	lw	a5,-20(s0)
80000ebc:	00178793          	addi	a5,a5,1
80000ec0:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 1)
80000ec4:	fec42703          	lw	a4,-20(s0)
80000ec8:	fd442783          	lw	a5,-44(s0)
80000ecc:	faf762e3          	bltu	a4,a5,80000e70 <_write+0x60>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:257
        }
    }
    return len;
80000ed0:	fd442783          	lw	a5,-44(s0)
80000ed4:	0100006f          	j	80000ee4 <_write+0xd4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:261
  }
#endif

  return stub(EBADF);
80000ed8:	00900513          	li	a0,9
80000edc:	f05ff0ef          	jal	ra,80000de0 <stub>
80000ee0:	00050793          	mv	a5,a0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:262
}
80000ee4:	00078513          	mv	a0,a5
80000ee8:	02c12083          	lw	ra,44(sp)
80000eec:	02812403          	lw	s0,40(sp)
80000ef0:	03010113          	addi	sp,sp,48
80000ef4:	00008067          	ret

80000ef8 <HW_set_32bit_reg>:
HW_set_32bit_reg():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:36
 *
 * a0:   addr_t reg_addr
 * a1:   uint32_t value
 */
HW_set_32bit_reg:
    sw a1, 0(a0)
80000ef8:	00b52023          	sw	a1,0(a0) # 44000000 <RAM_SIZE+0x43f80000>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:37
    ret
80000efc:	00008067          	ret

80000f00 <HW_get_32bit_reg>:
HW_get_32bit_reg():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:47
 *
 * R0:   addr_t reg_addr
 * @return          32 bits value read from the peripheral register.
 */
HW_get_32bit_reg:
    lw a0, 0(a0)
80000f00:	00052503          	lw	a0,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:48
    ret
80000f04:	00008067          	ret

80000f08 <HW_set_32bit_reg_field>:
HW_set_32bit_reg_field():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:60
 * a1:   int_fast8_t shift
 * a2:   uint32_t mask
 * a3:   uint32_t value
 */
HW_set_32bit_reg_field:
    mv t3, a3
80000f08:	00068e13          	mv	t3,a3
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:61
    sll t3, t3, a1
80000f0c:	00be1e33          	sll	t3,t3,a1
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:62
    and  t3, t3, a2
80000f10:	00ce7e33          	and	t3,t3,a2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:63
    lw t1, 0(a0)
80000f14:	00052303          	lw	t1,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:64
    mv t2, a2
80000f18:	00060393          	mv	t2,a2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:65
    not t2, t2
80000f1c:	fff3c393          	not	t2,t2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:66
    and t1, t1, t2
80000f20:	00737333          	and	t1,t1,t2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:67
    or t1, t1, t3
80000f24:	01c36333          	or	t1,t1,t3
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:68
    sw t1, 0(a0)
80000f28:	00652023          	sw	t1,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:69
    ret
80000f2c:	00008067          	ret

80000f30 <HW_get_32bit_reg_field>:
HW_get_32bit_reg_field():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:83
 *
 * @return          32 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_32bit_reg_field:
    lw a0, 0(a0)
80000f30:	00052503          	lw	a0,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:84
    and a0, a0, a2
80000f34:	00c57533          	and	a0,a0,a2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:85
    srl a0, a0, a1
80000f38:	00b55533          	srl	a0,a0,a1
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:86
    ret
80000f3c:	00008067          	ret

80000f40 <HW_set_16bit_reg>:
HW_set_16bit_reg():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:96
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast16_t value
 */
HW_set_16bit_reg:
    sh a1, 0(a0)
80000f40:	00b51023          	sh	a1,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:97
    ret
80000f44:	00008067          	ret

80000f48 <HW_get_16bit_reg>:
HW_get_16bit_reg():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:107
 *
 * a0:   addr_t reg_addr
 * @return          16 bits value read from the peripheral register.
 */
HW_get_16bit_reg:
    lh a0, (a0)
80000f48:	00051503          	lh	a0,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:108
    ret
80000f4c:	00008067          	ret

80000f50 <HW_set_16bit_reg_field>:
HW_set_16bit_reg_field():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:121
 * a2:   uint_fast16_t mask
 * a3:   uint_fast16_t value
 * @param value     Value to be written in the specified field.
 */
HW_set_16bit_reg_field:
    mv t3, a3
80000f50:	00068e13          	mv	t3,a3
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:122
    sll t3, t3, a1
80000f54:	00be1e33          	sll	t3,t3,a1
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:123
    and  t3, t3, a2
80000f58:	00ce7e33          	and	t3,t3,a2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:124
    lh t1, 0(a0)
80000f5c:	00051303          	lh	t1,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:125
    mv t2, a2
80000f60:	00060393          	mv	t2,a2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:126
    not t2, t2
80000f64:	fff3c393          	not	t2,t2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:127
    and t1, t1, t2
80000f68:	00737333          	and	t1,t1,t2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:128
    or t1, t1, t3
80000f6c:	01c36333          	or	t1,t1,t3
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:129
    sh t1, 0(a0)
80000f70:	00651023          	sh	t1,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:130
    ret
80000f74:	00008067          	ret

80000f78 <HW_get_16bit_reg_field>:
HW_get_16bit_reg_field():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:144
 *
 * @return          16 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_16bit_reg_field:
    lh a0, 0(a0)
80000f78:	00051503          	lh	a0,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:145
    and a0, a0, a2
80000f7c:	00c57533          	and	a0,a0,a2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:146
    srl a0, a0, a1
80000f80:	00b55533          	srl	a0,a0,a1
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:147
    ret
80000f84:	00008067          	ret

80000f88 <HW_set_8bit_reg>:
HW_set_8bit_reg():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:157
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast8_t value
 */
HW_set_8bit_reg:
    sb a1, 0(a0)
80000f88:	00b50023          	sb	a1,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:158
    ret
80000f8c:	00008067          	ret

80000f90 <HW_get_8bit_reg>:
HW_get_8bit_reg():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:168
 *
 * a0:   addr_t reg_addr
 * @return          8 bits value read from the peripheral register.
 */
HW_get_8bit_reg:
    lb a0, 0(a0)
80000f90:	00050503          	lb	a0,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:169
    ret
80000f94:	00008067          	ret

80000f98 <HW_set_8bit_reg_field>:
HW_set_8bit_reg_field():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:181
 * a1:   int_fast8_t shift
 * a2:   uint_fast8_t mask
 * a3:   uint_fast8_t value
 */
HW_set_8bit_reg_field:
    mv t3, a3
80000f98:	00068e13          	mv	t3,a3
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:182
    sll t3, t3, a1
80000f9c:	00be1e33          	sll	t3,t3,a1
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:183
    and  t3, t3, a2
80000fa0:	00ce7e33          	and	t3,t3,a2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:184
    lb t1, 0(a0)
80000fa4:	00050303          	lb	t1,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:185
    mv t2, a2
80000fa8:	00060393          	mv	t2,a2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:186
    not t2, t2
80000fac:	fff3c393          	not	t2,t2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:187
    and t1, t1, t2
80000fb0:	00737333          	and	t1,t1,t2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:188
    or t1, t1, t3
80000fb4:	01c36333          	or	t1,t1,t3
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:189
    sb t1, 0(a0)
80000fb8:	00650023          	sb	t1,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:190
    ret
80000fbc:	00008067          	ret

80000fc0 <HW_get_8bit_reg_field>:
HW_get_8bit_reg_field():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:204
 *
 * @return          8 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_8bit_reg_field:
    lb a0, 0(a0)
80000fc0:	00050503          	lb	a0,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:205
    and a0, a0, a2
80000fc4:	00c57533          	and	a0,a0,a2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:206
    srl a0, a0, a1
80000fc8:	00b55533          	srl	a0,a0,a1
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:207
    ret
80000fcc:	00008067          	ret

80000fd0 <UART_init>:
UART_init():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:46
    UART_instance_t * this_uart,
    addr_t base_addr,
    uint16_t baud_value,
    uint8_t line_config
)
{
80000fd0:	fd010113          	addi	sp,sp,-48
80000fd4:	02112623          	sw	ra,44(sp)
80000fd8:	02812423          	sw	s0,40(sp)
80000fdc:	03010413          	addi	s0,sp,48
80000fe0:	fca42e23          	sw	a0,-36(s0)
80000fe4:	fcb42c23          	sw	a1,-40(s0)
80000fe8:	00060793          	mv	a5,a2
80000fec:	00068713          	mv	a4,a3
80000ff0:	fcf41b23          	sh	a5,-42(s0)
80000ff4:	00070793          	mv	a5,a4
80000ff8:	fcf40aa3          	sb	a5,-43(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53
    
    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( line_config <= MAX_LINE_CONFIG )
    HAL_ASSERT( baud_value <= MAX_BAUD_VALUE )

    if( ( this_uart != NULL_INSTANCE ) &&
80000ffc:	fdc42783          	lw	a5,-36(s0)
80001000:	0c078a63          	beqz	a5,800010d4 <UART_init+0x104>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53 (discriminator 1)
80001004:	fd544703          	lbu	a4,-43(s0)
80001008:	00700793          	li	a5,7
8000100c:	0ce7e463          	bltu	a5,a4,800010d4 <UART_init+0x104>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:54
        ( line_config <= MAX_LINE_CONFIG ) &&
80001010:	fd645703          	lhu	a4,-42(s0)
80001014:	000027b7          	lui	a5,0x2
80001018:	0af77e63          	bleu	a5,a4,800010d4 <UART_init+0x104>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:60
        ( baud_value <= MAX_BAUD_VALUE ) )
    {
        /*
         * Store lower 8-bits of baud value in CTRL1.
         */
        HAL_set_8bit_reg( base_addr, CTRL1, (uint_fast8_t)(baud_value &
8000101c:	fd842783          	lw	a5,-40(s0)
80001020:	00878713          	addi	a4,a5,8 # 2008 <HEAP_SIZE-0xdff8>
80001024:	fd645783          	lhu	a5,-42(s0)
80001028:	0ff7f793          	andi	a5,a5,255
8000102c:	00078593          	mv	a1,a5
80001030:	00070513          	mv	a0,a4
80001034:	f55ff0ef          	jal	ra,80000f88 <HW_set_8bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:67
    
        /*
         * Extract higher 5-bits of baud value and store in higher 5-bits 
         * of CTRL2, along with line configuration in lower 3 three bits.
         */
        HAL_set_8bit_reg( base_addr, CTRL2, (uint_fast8_t)line_config | 
80001038:	fd842783          	lw	a5,-40(s0)
8000103c:	00c78693          	addi	a3,a5,12
80001040:	fd544703          	lbu	a4,-43(s0)
80001044:	fd645783          	lhu	a5,-42(s0)
80001048:	4057d793          	srai	a5,a5,0x5
8000104c:	7f87f793          	andi	a5,a5,2040
80001050:	00f767b3          	or	a5,a4,a5
80001054:	00078593          	mv	a1,a5
80001058:	00068513          	mv	a0,a3
8000105c:	f2dff0ef          	jal	ra,80000f88 <HW_set_8bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:71
                                           (uint_fast8_t)((baud_value &
                                   BAUDVALUE_MSB) >> BAUDVALUE_SHIFT ) );
    
        this_uart->base_address = base_addr;
80001060:	fdc42783          	lw	a5,-36(s0)
80001064:	fd842703          	lw	a4,-40(s0)
80001068:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:94
        
        /*
         * Flush the receive FIFO of data that may have been received before the
         * driver was initialized.
         */
        rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
8000106c:	fdc42783          	lw	a5,-36(s0)
80001070:	0007a783          	lw	a5,0(a5)
80001074:	01078793          	addi	a5,a5,16
80001078:	00078513          	mv	a0,a5
8000107c:	f15ff0ef          	jal	ra,80000f90 <HW_get_8bit_reg>
80001080:	00050793          	mv	a5,a0
80001084:	0027f793          	andi	a5,a5,2
80001088:	fef407a3          	sb	a5,-17(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
                                                    STATUS_RXFULL_MASK;
        while ( rx_full )
8000108c:	0380006f          	j	800010c4 <UART_init+0xf4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:98
        {
            HAL_get_8bit_reg( this_uart->base_address, RXDATA );
80001090:	fdc42783          	lw	a5,-36(s0)
80001094:	0007a783          	lw	a5,0(a5)
80001098:	00478793          	addi	a5,a5,4
8000109c:	00078513          	mv	a0,a5
800010a0:	ef1ff0ef          	jal	ra,80000f90 <HW_get_8bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:99
            rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
800010a4:	fdc42783          	lw	a5,-36(s0)
800010a8:	0007a783          	lw	a5,0(a5)
800010ac:	01078793          	addi	a5,a5,16
800010b0:	00078513          	mv	a0,a5
800010b4:	eddff0ef          	jal	ra,80000f90 <HW_get_8bit_reg>
800010b8:	00050793          	mv	a5,a0
800010bc:	0027f793          	andi	a5,a5,2
800010c0:	fef407a3          	sb	a5,-17(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
        while ( rx_full )
800010c4:	fef44783          	lbu	a5,-17(s0)
800010c8:	fc0794e3          	bnez	a5,80001090 <UART_init+0xc0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:106
        }

        /*
         * Clear status of the UART instance.
         */
        this_uart->status = (uint8_t)0;
800010cc:	fdc42783          	lw	a5,-36(s0)
800010d0:	00078223          	sb	zero,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:108
    }
}
800010d4:	00000013          	nop
800010d8:	02c12083          	lw	ra,44(sp)
800010dc:	02812403          	lw	s0,40(sp)
800010e0:	03010113          	addi	sp,sp,48
800010e4:	00008067          	ret

800010e8 <UART_send>:
UART_send():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:121
(
    UART_instance_t * this_uart,
    const uint8_t * tx_buffer,
    size_t tx_size
)
{
800010e8:	fd010113          	addi	sp,sp,-48
800010ec:	02112623          	sw	ra,44(sp)
800010f0:	02812423          	sw	s0,40(sp)
800010f4:	03010413          	addi	s0,sp,48
800010f8:	fca42e23          	sw	a0,-36(s0)
800010fc:	fcb42c23          	sw	a1,-40(s0)
80001100:	fcc42a23          	sw	a2,-44(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( tx_buffer != NULL_BUFFER )
    HAL_ASSERT( tx_size > 0 )
      
    if( (this_uart != NULL_INSTANCE) &&
80001104:	fdc42783          	lw	a5,-36(s0)
80001108:	08078063          	beqz	a5,80001188 <UART_send+0xa0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129 (discriminator 1)
8000110c:	fd842783          	lw	a5,-40(s0)
80001110:	06078c63          	beqz	a5,80001188 <UART_send+0xa0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:130
        (tx_buffer != NULL_BUFFER)   &&
80001114:	fd442783          	lw	a5,-44(s0)
80001118:	06078863          	beqz	a5,80001188 <UART_send+0xa0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133
        (tx_size > (size_t)0) )
    {
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
8000111c:	fe042623          	sw	zero,-20(s0)
80001120:	05c0006f          	j	8000117c <UART_send+0x94>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:137 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001124:	fdc42783          	lw	a5,-36(s0)
80001128:	0007a783          	lw	a5,0(a5)
8000112c:	01078793          	addi	a5,a5,16
80001130:	00078513          	mv	a0,a5
80001134:	e5dff0ef          	jal	ra,80000f90 <HW_get_8bit_reg>
80001138:	00050793          	mv	a5,a0
8000113c:	0017f793          	andi	a5,a5,1
80001140:	fef405a3          	sb	a5,-21(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:139 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
80001144:	feb44783          	lbu	a5,-21(s0)
80001148:	fc078ee3          	beqz	a5,80001124 <UART_send+0x3c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:141 (discriminator 2)
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
8000114c:	fdc42783          	lw	a5,-36(s0)
80001150:	0007a683          	lw	a3,0(a5)
80001154:	fd842703          	lw	a4,-40(s0)
80001158:	fec42783          	lw	a5,-20(s0)
8000115c:	00f707b3          	add	a5,a4,a5
80001160:	0007c783          	lbu	a5,0(a5)
80001164:	00078593          	mv	a1,a5
80001168:	00068513          	mv	a0,a3
8000116c:	e1dff0ef          	jal	ra,80000f88 <HW_set_8bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 2)
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
80001170:	fec42783          	lw	a5,-20(s0)
80001174:	00178793          	addi	a5,a5,1
80001178:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 1)
8000117c:	fec42703          	lw	a4,-20(s0)
80001180:	fd442783          	lw	a5,-44(s0)
80001184:	faf760e3          	bltu	a4,a5,80001124 <UART_send+0x3c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:145
                              (uint_fast8_t)tx_buffer[char_idx] );
        }
    }
}
80001188:	00000013          	nop
8000118c:	02c12083          	lw	ra,44(sp)
80001190:	02812403          	lw	s0,40(sp)
80001194:	03010113          	addi	sp,sp,48
80001198:	00008067          	ret

8000119c <UART_polled_tx_string>:
UART_polled_tx_string():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:239
UART_polled_tx_string
( 
    UART_instance_t * this_uart, 
    const uint8_t * p_sz_string
)
{
8000119c:	fd010113          	addi	sp,sp,-48
800011a0:	02112623          	sw	ra,44(sp)
800011a4:	02812423          	sw	s0,40(sp)
800011a8:	03010413          	addi	s0,sp,48
800011ac:	fca42e23          	sw	a0,-36(s0)
800011b0:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246
    uint8_t tx_ready;

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( p_sz_string != NULL_BUFFER )
    
    if( ( this_uart != NULL_INSTANCE ) && ( p_sz_string != NULL_BUFFER ) )
800011b4:	fdc42783          	lw	a5,-36(s0)
800011b8:	08078063          	beqz	a5,80001238 <UART_polled_tx_string+0x9c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246 (discriminator 1)
800011bc:	fd842783          	lw	a5,-40(s0)
800011c0:	06078c63          	beqz	a5,80001238 <UART_polled_tx_string+0x9c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:248
    {
        char_idx = 0U;
800011c4:	fe042623          	sw	zero,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
800011c8:	05c0006f          	j	80001224 <UART_polled_tx_string+0x88>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:253 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
800011cc:	fdc42783          	lw	a5,-36(s0)
800011d0:	0007a783          	lw	a5,0(a5)
800011d4:	01078793          	addi	a5,a5,16
800011d8:	00078513          	mv	a0,a5
800011dc:	db5ff0ef          	jal	ra,80000f90 <HW_get_8bit_reg>
800011e0:	00050793          	mv	a5,a0
800011e4:	0017f793          	andi	a5,a5,1
800011e8:	fef405a3          	sb	a5,-21(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:255 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
800011ec:	feb44783          	lbu	a5,-21(s0)
800011f0:	fc078ee3          	beqz	a5,800011cc <UART_polled_tx_string+0x30>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:257
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
800011f4:	fdc42783          	lw	a5,-36(s0)
800011f8:	0007a683          	lw	a3,0(a5)
800011fc:	fd842703          	lw	a4,-40(s0)
80001200:	fec42783          	lw	a5,-20(s0)
80001204:	00f707b3          	add	a5,a4,a5
80001208:	0007c783          	lbu	a5,0(a5)
8000120c:	00078593          	mv	a1,a5
80001210:	00068513          	mv	a0,a3
80001214:	d75ff0ef          	jal	ra,80000f88 <HW_set_8bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:259
                              (uint_fast8_t)p_sz_string[char_idx] );
            char_idx++;
80001218:	fec42783          	lw	a5,-20(s0)
8000121c:	00178793          	addi	a5,a5,1
80001220:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
80001224:	fd842703          	lw	a4,-40(s0)
80001228:	fec42783          	lw	a5,-20(s0)
8000122c:	00f707b3          	add	a5,a4,a5
80001230:	0007c783          	lbu	a5,0(a5)
80001234:	f8079ce3          	bnez	a5,800011cc <UART_polled_tx_string+0x30>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:262
        }
    }
}
80001238:	00000013          	nop
8000123c:	02c12083          	lw	ra,44(sp)
80001240:	02812403          	lw	s0,40(sp)
80001244:	03010113          	addi	sp,sp,48
80001248:	00008067          	ret

8000124c <pvPortMalloc>:
pvPortMalloc():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:151
}
/*-----------------------------------------------------------*/


void *pvPortMalloc( size_t xWantedSize )
{
8000124c:	fc010113          	addi	sp,sp,-64
80001250:	02112e23          	sw	ra,60(sp)
80001254:	02812c23          	sw	s0,56(sp)
80001258:	04010413          	addi	s0,sp,64
8000125c:	fca42623          	sw	a0,-52(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:154
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
80001260:	fe042223          	sw	zero,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:156

	vTaskSuspendAll();
80001264:	719000ef          	jal	ra,8000217c <vTaskSuspendAll>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:160
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
80001268:	9241a783          	lw	a5,-1756(gp) # 80006394 <xHeapHasBeenInitialised.2777>
8000126c:	00079863          	bnez	a5,8000127c <pvPortMalloc+0x30>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:162
		{
			prvHeapInit();
80001270:	284000ef          	jal	ra,800014f4 <prvHeapInit>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:163
			xHeapHasBeenInitialised = pdTRUE;
80001274:	00100713          	li	a4,1
80001278:	92e1a223          	sw	a4,-1756(gp) # 80006394 <xHeapHasBeenInitialised.2777>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:168
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
8000127c:	fcc42783          	lw	a5,-52(s0)
80001280:	02078a63          	beqz	a5,800012b4 <pvPortMalloc+0x68>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:170
		{
			xWantedSize += heapSTRUCT_SIZE;
80001284:	00800793          	li	a5,8
80001288:	00078713          	mv	a4,a5
8000128c:	fcc42783          	lw	a5,-52(s0)
80001290:	00e787b3          	add	a5,a5,a4
80001294:	fcf42623          	sw	a5,-52(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:173

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
80001298:	fcc42783          	lw	a5,-52(s0)
8000129c:	0037f793          	andi	a5,a5,3
800012a0:	00078a63          	beqz	a5,800012b4 <pvPortMalloc+0x68>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:176
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
800012a4:	fcc42783          	lw	a5,-52(s0)
800012a8:	ffc7f793          	andi	a5,a5,-4
800012ac:	00478793          	addi	a5,a5,4
800012b0:	fcf42623          	sw	a5,-52(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
800012b4:	fcc42783          	lw	a5,-52(s0)
800012b8:	14078463          	beqz	a5,80001400 <pvPortMalloc+0x1b4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180 (discriminator 1)
800012bc:	fcc42703          	lw	a4,-52(s0)
800012c0:	000197b7          	lui	a5,0x19
800012c4:	ffb78793          	addi	a5,a5,-5 # 18ffb <HEAP_SIZE+0x8ffb>
800012c8:	12e7ec63          	bltu	a5,a4,80001400 <pvPortMalloc+0x1b4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:184
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
800012cc:	91418793          	addi	a5,gp,-1772 # 80006384 <xStart>
800012d0:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:185
			pxBlock = xStart.pxNextFreeBlock;
800012d4:	9141a783          	lw	a5,-1772(gp) # 80006384 <xStart>
800012d8:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
800012dc:	0180006f          	j	800012f4 <pvPortMalloc+0xa8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:188
			{
				pxPreviousBlock = pxBlock;
800012e0:	fec42783          	lw	a5,-20(s0)
800012e4:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:189
				pxBlock = pxBlock->pxNextFreeBlock;
800012e8:	fec42783          	lw	a5,-20(s0)
800012ec:	0007a783          	lw	a5,0(a5)
800012f0:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
800012f4:	fec42783          	lw	a5,-20(s0)
800012f8:	0047a783          	lw	a5,4(a5)
800012fc:	fcc42703          	lw	a4,-52(s0)
80001300:	00e7f863          	bleu	a4,a5,80001310 <pvPortMalloc+0xc4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186 (discriminator 1)
80001304:	fec42783          	lw	a5,-20(s0)
80001308:	0007a783          	lw	a5,0(a5)
8000130c:	fc079ae3          	bnez	a5,800012e0 <pvPortMalloc+0x94>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:193
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
80001310:	fec42703          	lw	a4,-20(s0)
80001314:	91c18793          	addi	a5,gp,-1764 # 8000638c <xEnd>
80001318:	0ef70463          	beq	a4,a5,80001400 <pvPortMalloc+0x1b4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:197
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
8000131c:	fe842783          	lw	a5,-24(s0)
80001320:	0007a783          	lw	a5,0(a5)
80001324:	00800713          	li	a4,8
80001328:	00e787b3          	add	a5,a5,a4
8000132c:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:201

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
80001330:	fec42783          	lw	a5,-20(s0)
80001334:	0007a703          	lw	a4,0(a5)
80001338:	fe842783          	lw	a5,-24(s0)
8000133c:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:204

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
80001340:	fec42783          	lw	a5,-20(s0)
80001344:	0047a703          	lw	a4,4(a5)
80001348:	fcc42783          	lw	a5,-52(s0)
8000134c:	40f707b3          	sub	a5,a4,a5
80001350:	00800713          	li	a4,8
80001354:	00171713          	slli	a4,a4,0x1
80001358:	08f77663          	bleu	a5,a4,800013e4 <pvPortMalloc+0x198>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:209
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
8000135c:	fec42703          	lw	a4,-20(s0)
80001360:	fcc42783          	lw	a5,-52(s0)
80001364:	00f707b3          	add	a5,a4,a5
80001368:	fcf42e23          	sw	a5,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:213

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
8000136c:	fec42783          	lw	a5,-20(s0)
80001370:	0047a703          	lw	a4,4(a5)
80001374:	fcc42783          	lw	a5,-52(s0)
80001378:	40f70733          	sub	a4,a4,a5
8000137c:	fdc42783          	lw	a5,-36(s0)
80001380:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:214
					pxBlock->xBlockSize = xWantedSize;
80001384:	fec42783          	lw	a5,-20(s0)
80001388:	fcc42703          	lw	a4,-52(s0)
8000138c:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
80001390:	fdc42783          	lw	a5,-36(s0)
80001394:	0047a783          	lw	a5,4(a5)
80001398:	fcf42c23          	sw	a5,-40(s0)
8000139c:	91418793          	addi	a5,gp,-1772 # 80006384 <xStart>
800013a0:	fef42023          	sw	a5,-32(s0)
800013a4:	0100006f          	j	800013b4 <pvPortMalloc+0x168>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 3)
800013a8:	fe042783          	lw	a5,-32(s0)
800013ac:	0007a783          	lw	a5,0(a5)
800013b0:	fef42023          	sw	a5,-32(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 1)
800013b4:	fe042783          	lw	a5,-32(s0)
800013b8:	0007a783          	lw	a5,0(a5)
800013bc:	0047a783          	lw	a5,4(a5)
800013c0:	fd842703          	lw	a4,-40(s0)
800013c4:	fee7e2e3          	bltu	a5,a4,800013a8 <pvPortMalloc+0x15c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 4)
800013c8:	fe042783          	lw	a5,-32(s0)
800013cc:	0007a703          	lw	a4,0(a5)
800013d0:	fdc42783          	lw	a5,-36(s0)
800013d4:	00e7a023          	sw	a4,0(a5)
800013d8:	fe042783          	lw	a5,-32(s0)
800013dc:	fdc42703          	lw	a4,-36(s0)
800013e0:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:220
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
800013e4:	800067b7          	lui	a5,0x80006
800013e8:	2707a703          	lw	a4,624(a5) # 80006270 <__stack_top+0xfffc5a20>
800013ec:	fec42783          	lw	a5,-20(s0)
800013f0:	0047a783          	lw	a5,4(a5)
800013f4:	40f70733          	sub	a4,a4,a5
800013f8:	800067b7          	lui	a5,0x80006
800013fc:	26e7a823          	sw	a4,624(a5) # 80006270 <__stack_top+0xfffc5a20>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:226
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
80001400:	5a5000ef          	jal	ra,800021a4 <xTaskResumeAll>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:230

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
80001404:	fe442783          	lw	a5,-28(s0)
80001408:	00079463          	bnez	a5,80001410 <pvPortMalloc+0x1c4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:233
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
8000140c:	039040ef          	jal	ra,80005c44 <vApplicationMallocFailedHook>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:238
		}
	}
	#endif

	return pvReturn;
80001410:	fe442783          	lw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:239
}
80001414:	00078513          	mv	a0,a5
80001418:	03c12083          	lw	ra,60(sp)
8000141c:	03812403          	lw	s0,56(sp)
80001420:	04010113          	addi	sp,sp,64
80001424:	00008067          	ret

80001428 <vPortFree>:
vPortFree():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:243
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
80001428:	fd010113          	addi	sp,sp,-48
8000142c:	02112623          	sw	ra,44(sp)
80001430:	02812423          	sw	s0,40(sp)
80001434:	03010413          	addi	s0,sp,48
80001438:	fca42e23          	sw	a0,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:244
uint8_t *puc = ( uint8_t * ) pv;
8000143c:	fdc42783          	lw	a5,-36(s0)
80001440:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:247
BlockLink_t *pxLink;

	if( pv != NULL )
80001444:	fdc42783          	lw	a5,-36(s0)
80001448:	08078c63          	beqz	a5,800014e0 <vPortFree+0xb8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:251
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
8000144c:	00800793          	li	a5,8
80001450:	40f007b3          	neg	a5,a5
80001454:	fe842703          	lw	a4,-24(s0)
80001458:	00f707b3          	add	a5,a4,a5
8000145c:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:255

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
80001460:	fe842783          	lw	a5,-24(s0)
80001464:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:257

		vTaskSuspendAll();
80001468:	515000ef          	jal	ra,8000217c <vTaskSuspendAll>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
8000146c:	fe442783          	lw	a5,-28(s0)
80001470:	0047a783          	lw	a5,4(a5)
80001474:	fef42023          	sw	a5,-32(s0)
80001478:	91418793          	addi	a5,gp,-1772 # 80006384 <xStart>
8000147c:	fef42623          	sw	a5,-20(s0)
80001480:	0100006f          	j	80001490 <vPortFree+0x68>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 3)
80001484:	fec42783          	lw	a5,-20(s0)
80001488:	0007a783          	lw	a5,0(a5)
8000148c:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 1)
80001490:	fec42783          	lw	a5,-20(s0)
80001494:	0007a783          	lw	a5,0(a5)
80001498:	0047a783          	lw	a5,4(a5)
8000149c:	fe042703          	lw	a4,-32(s0)
800014a0:	fee7e2e3          	bltu	a5,a4,80001484 <vPortFree+0x5c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 4)
800014a4:	fec42783          	lw	a5,-20(s0)
800014a8:	0007a703          	lw	a4,0(a5)
800014ac:	fe442783          	lw	a5,-28(s0)
800014b0:	00e7a023          	sw	a4,0(a5)
800014b4:	fec42783          	lw	a5,-20(s0)
800014b8:	fe442703          	lw	a4,-28(s0)
800014bc:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:261 (discriminator 4)
			xFreeBytesRemaining += pxLink->xBlockSize;
800014c0:	fe442783          	lw	a5,-28(s0)
800014c4:	0047a703          	lw	a4,4(a5)
800014c8:	800067b7          	lui	a5,0x80006
800014cc:	2707a783          	lw	a5,624(a5) # 80006270 <__stack_top+0xfffc5a20>
800014d0:	00f70733          	add	a4,a4,a5
800014d4:	800067b7          	lui	a5,0x80006
800014d8:	26e7a823          	sw	a4,624(a5) # 80006270 <__stack_top+0xfffc5a20>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:264 (discriminator 4)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
800014dc:	4c9000ef          	jal	ra,800021a4 <xTaskResumeAll>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:266
	}
}
800014e0:	00000013          	nop
800014e4:	02c12083          	lw	ra,44(sp)
800014e8:	02812403          	lw	s0,40(sp)
800014ec:	03010113          	addi	sp,sp,48
800014f0:	00008067          	ret

800014f4 <prvHeapInit>:
prvHeapInit():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:282
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
800014f4:	fe010113          	addi	sp,sp,-32
800014f8:	00812e23          	sw	s0,28(sp)
800014fc:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:287
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
80001500:	800067b7          	lui	a5,0x80006
80001504:	3e478793          	addi	a5,a5,996 # 800063e4 <__stack_top+0xfffc5b94>
80001508:	ffc7f793          	andi	a5,a5,-4
8000150c:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:291

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
80001510:	fec42703          	lw	a4,-20(s0)
80001514:	90e1aa23          	sw	a4,-1772(gp) # 80006384 <xStart>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:292
	xStart.xBlockSize = ( size_t ) 0;
80001518:	91418793          	addi	a5,gp,-1772 # 80006384 <xStart>
8000151c:	0007a223          	sw	zero,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:295

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
80001520:	91c18793          	addi	a5,gp,-1764 # 8000638c <xEnd>
80001524:	00019737          	lui	a4,0x19
80001528:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
8000152c:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:296
	xEnd.pxNextFreeBlock = NULL;
80001530:	9001ae23          	sw	zero,-1764(gp) # 8000638c <xEnd>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:300

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
80001534:	fec42783          	lw	a5,-20(s0)
80001538:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:301
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
8000153c:	fe842783          	lw	a5,-24(s0)
80001540:	00019737          	lui	a4,0x19
80001544:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
80001548:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:302
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
8000154c:	fe842783          	lw	a5,-24(s0)
80001550:	91c18713          	addi	a4,gp,-1764 # 8000638c <xEnd>
80001554:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:303
}
80001558:	00000013          	nop
8000155c:	01c12403          	lw	s0,28(sp)
80001560:	02010113          	addi	sp,sp,32
80001564:	00008067          	ret

80001568 <raise_soft_interrupt>:
raise_soft_interrupt():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:227
/*==============================================================================
 * The function raise_soft_interrupt() raises a synchronous software interrupt by
 * writing into the MSIP register.
 */
static inline void raise_soft_interrupt()
{
80001568:	fe010113          	addi	sp,sp,-32
8000156c:	00812e23          	sw	s0,28(sp)
80001570:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:228
    unsigned long hart_id = read_csr(mhartid);
80001574:	f14027f3          	csrr	a5,mhartid
80001578:	fef42623          	sw	a5,-20(s0)
8000157c:	fec42783          	lw	a5,-20(s0)
80001580:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:231

    /*You need to make sure that the global interrupt is enabled*/
    set_csr(mie, MIP_MSIP);       /*Enable software interrupt bit */
80001584:	304467f3          	csrrsi	a5,mie,8
80001588:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:232
    PRCI->MSIP[hart_id] = 0x01;   /*raise soft interrupt for hart0*/
8000158c:	44000737          	lui	a4,0x44000
80001590:	fe842783          	lw	a5,-24(s0)
80001594:	00279793          	slli	a5,a5,0x2
80001598:	00f707b3          	add	a5,a4,a5
8000159c:	00100713          	li	a4,1
800015a0:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:233
}
800015a4:	00000013          	nop
800015a8:	01c12403          	lw	s0,28(sp)
800015ac:	02010113          	addi	sp,sp,32
800015b0:	00008067          	ret

800015b4 <vPortEnterCritical>:
vPortEnterCritical():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:132
 * Used to catch tasks that attempt to return from their implementing function.
 */
static void prvTaskExitError( void );

void vPortEnterCritical( void )
{
800015b4:	ff010113          	addi	sp,sp,-16
800015b8:	00812623          	sw	s0,12(sp)
800015bc:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:133
	portDISABLE_INTERRUPTS();
800015c0:	30047073          	csrci	mstatus,8
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:134
	uxCriticalNesting++;
800015c4:	800067b7          	lui	a5,0x80006
800015c8:	2747a783          	lw	a5,628(a5) # 80006274 <__stack_top+0xfffc5a24>
800015cc:	00178713          	addi	a4,a5,1
800015d0:	800067b7          	lui	a5,0x80006
800015d4:	26e7aa23          	sw	a4,628(a5) # 80006274 <__stack_top+0xfffc5a24>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:135
}
800015d8:	00000013          	nop
800015dc:	00c12403          	lw	s0,12(sp)
800015e0:	01010113          	addi	sp,sp,16
800015e4:	00008067          	ret

800015e8 <vPortExitCritical>:
vPortExitCritical():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:139
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
800015e8:	ff010113          	addi	sp,sp,-16
800015ec:	00812623          	sw	s0,12(sp)
800015f0:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:140
	uxCriticalNesting--;
800015f4:	800067b7          	lui	a5,0x80006
800015f8:	2747a783          	lw	a5,628(a5) # 80006274 <__stack_top+0xfffc5a24>
800015fc:	fff78713          	addi	a4,a5,-1
80001600:	800067b7          	lui	a5,0x80006
80001604:	26e7aa23          	sw	a4,628(a5) # 80006274 <__stack_top+0xfffc5a24>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:141
	if( uxCriticalNesting == 0 )
80001608:	800067b7          	lui	a5,0x80006
8000160c:	2747a783          	lw	a5,628(a5) # 80006274 <__stack_top+0xfffc5a24>
80001610:	00079463          	bnez	a5,80001618 <vPortExitCritical+0x30>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:143
	{
		portENABLE_INTERRUPTS();
80001614:	30046073          	csrsi	mstatus,8
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:145
	}
}
80001618:	00000013          	nop
8000161c:	00c12403          	lw	s0,12(sp)
80001620:	01010113          	addi	sp,sp,16
80001624:	00008067          	ret

80001628 <prvSetNextTimerInterrupt>:
prvSetNextTimerInterrupt():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:151
/*-----------------------------------------------------------*/

/* Sets the next timer interrupt
 * Reads previous timer compare register, and adds tickrate */
static void prvSetNextTimerInterrupt(void)
{
80001628:	fe010113          	addi	sp,sp,-32
8000162c:	00812e23          	sw	s0,28(sp)
80001630:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:154
	uint64_t time;

	time = mtime->val_low;
80001634:	80006637          	lui	a2,0x80006
80001638:	27862603          	lw	a2,632(a2) # 80006278 <__stack_top+0xfffc5a28>
8000163c:	00062603          	lw	a2,0(a2)
80001640:	fec42423          	sw	a2,-24(s0)
80001644:	fe042623          	sw	zero,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:155
	time |= ((uint64_t)mtime->val_high << 32);
80001648:	80006637          	lui	a2,0x80006
8000164c:	27862603          	lw	a2,632(a2) # 80006278 <__stack_top+0xfffc5a28>
80001650:	00462603          	lw	a2,4(a2)
80001654:	00060693          	mv	a3,a2
80001658:	00000713          	li	a4,0
8000165c:	00069813          	slli	a6,a3,0x0
80001660:	00000793          	li	a5,0
80001664:	fe842703          	lw	a4,-24(s0)
80001668:	00f76733          	or	a4,a4,a5
8000166c:	fee42423          	sw	a4,-24(s0)
80001670:	fec42703          	lw	a4,-20(s0)
80001674:	010767b3          	or	a5,a4,a6
80001678:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:157

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
8000167c:	fe842683          	lw	a3,-24(s0)
80001680:	fec42703          	lw	a4,-20(s0)
80001684:	000145b7          	lui	a1,0x14
80001688:	43858593          	addi	a1,a1,1080 # 14438 <HEAP_SIZE+0x4438>
8000168c:	00000613          	li	a2,0
80001690:	00b687b3          	add	a5,a3,a1
80001694:	00078513          	mv	a0,a5
80001698:	00d53533          	sltu	a0,a0,a3
8000169c:	00c70833          	add	a6,a4,a2
800016a0:	01050733          	add	a4,a0,a6
800016a4:	00070813          	mv	a6,a4
800016a8:	fef42423          	sw	a5,-24(s0)
800016ac:	ff042623          	sw	a6,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:159

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
800016b0:	800067b7          	lui	a5,0x80006
800016b4:	27c7a783          	lw	a5,636(a5) # 8000627c <__stack_top+0xfffc5a2c>
800016b8:	fe842703          	lw	a4,-24(s0)
800016bc:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:160
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
800016c0:	fec42783          	lw	a5,-20(s0)
800016c4:	0007d313          	srli	t1,a5,0x0
800016c8:	00000393          	li	t2,0
800016cc:	800067b7          	lui	a5,0x80006
800016d0:	27c7a783          	lw	a5,636(a5) # 8000627c <__stack_top+0xfffc5a2c>
800016d4:	00030713          	mv	a4,t1
800016d8:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:163

	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
800016dc:	08000793          	li	a5,128
800016e0:	3047a073          	csrs	mie,a5
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:164
}
800016e4:	00000013          	nop
800016e8:	01c12403          	lw	s0,28(sp)
800016ec:	02010113          	addi	sp,sp,32
800016f0:	00008067          	ret

800016f4 <vPortSetupTimer>:
vPortSetupTimer():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:169
/*-----------------------------------------------------------*/

/* Sets and enable the timer interrupt */
void vPortSetupTimer(void)
{
800016f4:	fe010113          	addi	sp,sp,-32
800016f8:	00812e23          	sw	s0,28(sp)
800016fc:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:172
	uint64_t time;

	time = mtime->val_low;
80001700:	80006637          	lui	a2,0x80006
80001704:	27862603          	lw	a2,632(a2) # 80006278 <__stack_top+0xfffc5a28>
80001708:	00062603          	lw	a2,0(a2)
8000170c:	fec42423          	sw	a2,-24(s0)
80001710:	fe042623          	sw	zero,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:173
	time |= ((uint64_t)mtime->val_high << 32);
80001714:	80006637          	lui	a2,0x80006
80001718:	27862603          	lw	a2,632(a2) # 80006278 <__stack_top+0xfffc5a28>
8000171c:	00462603          	lw	a2,4(a2)
80001720:	00060693          	mv	a3,a2
80001724:	00000713          	li	a4,0
80001728:	00069813          	slli	a6,a3,0x0
8000172c:	00000793          	li	a5,0
80001730:	fe842703          	lw	a4,-24(s0)
80001734:	00f76733          	or	a4,a4,a5
80001738:	fee42423          	sw	a4,-24(s0)
8000173c:	fec42703          	lw	a4,-20(s0)
80001740:	010767b3          	or	a5,a4,a6
80001744:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:175

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
80001748:	fe842683          	lw	a3,-24(s0)
8000174c:	fec42703          	lw	a4,-20(s0)
80001750:	000145b7          	lui	a1,0x14
80001754:	43858593          	addi	a1,a1,1080 # 14438 <HEAP_SIZE+0x4438>
80001758:	00000613          	li	a2,0
8000175c:	00b687b3          	add	a5,a3,a1
80001760:	00078513          	mv	a0,a5
80001764:	00d53533          	sltu	a0,a0,a3
80001768:	00c70833          	add	a6,a4,a2
8000176c:	01050733          	add	a4,a0,a6
80001770:	00070813          	mv	a6,a4
80001774:	fef42423          	sw	a5,-24(s0)
80001778:	ff042623          	sw	a6,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:177

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
8000177c:	800067b7          	lui	a5,0x80006
80001780:	27c7a783          	lw	a5,636(a5) # 8000627c <__stack_top+0xfffc5a2c>
80001784:	fe842703          	lw	a4,-24(s0)
80001788:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:178
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
8000178c:	fec42783          	lw	a5,-20(s0)
80001790:	0007d313          	srli	t1,a5,0x0
80001794:	00000393          	li	t2,0
80001798:	800067b7          	lui	a5,0x80006
8000179c:	27c7a783          	lw	a5,636(a5) # 8000627c <__stack_top+0xfffc5a2c>
800017a0:	00030713          	mv	a4,t1
800017a4:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:182


	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
800017a8:	08000793          	li	a5,128
800017ac:	3047a073          	csrs	mie,a5
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:183
}
800017b0:	00000013          	nop
800017b4:	01c12403          	lw	s0,28(sp)
800017b8:	02010113          	addi	sp,sp,32
800017bc:	00008067          	ret

800017c0 <prvTaskExitError>:
prvTaskExitError():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:187
/*-----------------------------------------------------------*/

void prvTaskExitError( void )
{
800017c0:	ff010113          	addi	sp,sp,-16
800017c4:	00812623          	sw	s0,12(sp)
800017c8:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
800017cc:	800067b7          	lui	a5,0x80006
800017d0:	2747a703          	lw	a4,628(a5) # 80006274 <__stack_top+0xfffc5a24>
800017d4:	fff00793          	li	a5,-1
800017d8:	00f70663          	beq	a4,a5,800017e4 <prvTaskExitError+0x24>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194 (discriminator 1)
800017dc:	30047073          	csrci	mstatus,8
800017e0:	0000006f          	j	800017e0 <prvTaskExitError+0x20>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:195
	portDISABLE_INTERRUPTS();
800017e4:	30047073          	csrci	mstatus,8
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:196 (discriminator 2)
	for( ;; );
800017e8:	0000006f          	j	800017e8 <prvTaskExitError+0x28>

800017ec <pxPortInitialiseStack>:
pxPortInitialiseStack():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:220

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
800017ec:	fe010113          	addi	sp,sp,-32
800017f0:	00812e23          	sw	s0,28(sp)
800017f4:	02010413          	addi	s0,sp,32
800017f8:	fea42623          	sw	a0,-20(s0)
800017fc:	feb42423          	sw	a1,-24(s0)
80001800:	fec42223          	sw	a2,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:224
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	register int *tp asm("x3");
	pxTopOfStack--;
80001804:	fec42783          	lw	a5,-20(s0)
80001808:	ffc78793          	addi	a5,a5,-4
8000180c:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:225
	*pxTopOfStack = (portSTACK_TYPE)pxCode;			/* Start address */
80001810:	fe842703          	lw	a4,-24(s0)
80001814:	fec42783          	lw	a5,-20(s0)
80001818:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:226
	pxTopOfStack -= 22;
8000181c:	fec42783          	lw	a5,-20(s0)
80001820:	fa878793          	addi	a5,a5,-88
80001824:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:227
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;	/* Register a0 */
80001828:	fe442703          	lw	a4,-28(s0)
8000182c:	fec42783          	lw	a5,-20(s0)
80001830:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:228
	pxTopOfStack -= 6;
80001834:	fec42783          	lw	a5,-20(s0)
80001838:	fe878793          	addi	a5,a5,-24
8000183c:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:229
	*pxTopOfStack = (portSTACK_TYPE)tp; /* Register thread pointer */
80001840:	00018793          	mv	a5,gp
80001844:	00078713          	mv	a4,a5
80001848:	fec42783          	lw	a5,-20(s0)
8000184c:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:230
	pxTopOfStack -= 3;
80001850:	fec42783          	lw	a5,-20(s0)
80001854:	ff478793          	addi	a5,a5,-12
80001858:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:231
	*pxTopOfStack = (portSTACK_TYPE)prvTaskExitError; /* Register ra */
8000185c:	800017b7          	lui	a5,0x80001
80001860:	7c078713          	addi	a4,a5,1984 # 800017c0 <__stack_top+0xfffc0f70>
80001864:	fec42783          	lw	a5,-20(s0)
80001868:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:233

	return pxTopOfStack;
8000186c:	fec42783          	lw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:234
}
80001870:	00078513          	mv	a0,a5
80001874:	01c12403          	lw	s0,28(sp)
80001878:	02010113          	addi	sp,sp,32
8000187c:	00008067          	ret

80001880 <SysTick_Handler>:
SysTick_Handler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:238
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void )
{
80001880:	ff010113          	addi	sp,sp,-16
80001884:	00112623          	sw	ra,12(sp)
80001888:	00812423          	sw	s0,8(sp)
8000188c:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:241
	/*Save Context*/
	{
		__asm volatile("lw	t0, pxCurrentTCB");
80001890:	92c1a283          	lw	t0,-1748(gp) # 8000639c <pxCurrentTCB>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:242
		__asm volatile("sw	a2, 0x0(t0)");
80001894:	00c2a023          	sw	a2,0(t0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:246
	}

	/* Increment the RTOS tick. */
	prvSetNextTimerInterrupt();
80001898:	d91ff0ef          	jal	ra,80001628 <prvSetNextTimerInterrupt>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:249

	/*Switch task */
	if( xTaskIncrementTick() != pdFALSE )
8000189c:	2a1000ef          	jal	ra,8000233c <xTaskIncrementTick>
800018a0:	00050793          	mv	a5,a0
800018a4:	00078463          	beqz	a5,800018ac <SysTick_Handler+0x2c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:251
	{
		vTaskSwitchContext();
800018a8:	481000ef          	jal	ra,80002528 <vTaskSwitchContext>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:256
	}

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
800018ac:	92c1a103          	lw	sp,-1748(gp) # 8000639c <pxCurrentTCB>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:257
		__asm volatile("lw	sp, 0x0(sp)");
800018b0:	00012103          	lw	sp,0(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:259

		__asm volatile("lw	t0, 31 * 4(sp)");
800018b4:	07c12283          	lw	t0,124(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:260
		__asm volatile("csrw	mepc, t0");
800018b8:	34129073          	csrw	mepc,t0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:262

		__asm volatile("lw	x1, 0x0(sp)");
800018bc:	00012083          	lw	ra,0(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:263
		__asm volatile("lw   x4, 3 * 4(sp)");
800018c0:	00c12203          	lw	tp,12(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:264
		__asm volatile("lw   x5, 4 * 4(sp)");
800018c4:	01012283          	lw	t0,16(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:265
		__asm volatile("lw   x6, 5 * 4(sp)");
800018c8:	01412303          	lw	t1,20(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:266
		__asm volatile("lw   x7, 6 * 4(sp)");
800018cc:	01812383          	lw	t2,24(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:267
		__asm volatile("lw   x8, 7 * 4(sp)");
800018d0:	01c12403          	lw	s0,28(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:268
		__asm volatile("lw   x9, 8 * 4(sp)");
800018d4:	02012483          	lw	s1,32(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:269
		__asm volatile("lw   x10, 9 * 4(sp)");
800018d8:	02412503          	lw	a0,36(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:270
		__asm volatile("lw   x11, 10 * 4(sp)");
800018dc:	02812583          	lw	a1,40(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:271
		__asm volatile("lw   x12, 11 * 4(sp)");
800018e0:	02c12603          	lw	a2,44(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:272
		__asm volatile("lw   x13, 12 * 4(sp)");
800018e4:	03012683          	lw	a3,48(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:273
		__asm volatile("lw   x14, 13 * 4(sp)");
800018e8:	03412703          	lw	a4,52(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:274
		__asm volatile("lw   x15, 14 * 4(sp)");
800018ec:	03812783          	lw	a5,56(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:275
		__asm volatile("lw   x16, 15 * 4(sp)");
800018f0:	03c12803          	lw	a6,60(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:276
		__asm volatile("lw   x17, 16 * 4(sp)");
800018f4:	04012883          	lw	a7,64(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:277
		__asm volatile("lw   x18, 17 * 4(sp)");
800018f8:	04412903          	lw	s2,68(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:278
		__asm volatile("lw   x19, 18 * 4(sp)");
800018fc:	04812983          	lw	s3,72(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:279
		__asm volatile("lw   x20, 19 * 4(sp)");
80001900:	04c12a03          	lw	s4,76(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:280
		__asm volatile("lw   x21, 20 * 4(sp)");
80001904:	05012a83          	lw	s5,80(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:281
		__asm volatile("lw   x22, 21 * 4(sp)");
80001908:	05412b03          	lw	s6,84(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:282
		__asm volatile("lw   x23, 22 * 4(sp)");
8000190c:	05812b83          	lw	s7,88(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:283
		__asm volatile("lw   x24, 23 * 4(sp)");
80001910:	05c12c03          	lw	s8,92(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:284
		__asm volatile("lw   x25, 24 * 4(sp)");
80001914:	06012c83          	lw	s9,96(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:285
		__asm volatile("lw   x26, 25 * 4(sp)");
80001918:	06412d03          	lw	s10,100(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:286
		__asm volatile("lw   x27, 26 * 4(sp)");
8000191c:	06812d83          	lw	s11,104(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:287
		__asm volatile("lw   x28, 27 * 4(sp)");
80001920:	06c12e03          	lw	t3,108(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:288
		__asm volatile("lw   x29, 28 * 4(sp)");
80001924:	07012e83          	lw	t4,112(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:289
		__asm volatile("lw   x30, 29 * 4(sp)");
80001928:	07412f03          	lw	t5,116(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:290
		__asm volatile("lw   x31, 30 * 4(sp)");
8000192c:	07812f83          	lw	t6,120(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:292

		__asm volatile("addi	sp, sp, 4 * 32");
80001930:	08010113          	addi	sp,sp,128
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:294

		__asm volatile("mret");
80001934:	30200073          	mret
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:296
	}
}
80001938:	00000013          	nop
8000193c:	00c12083          	lw	ra,12(sp)
80001940:	00812403          	lw	s0,8(sp)
80001944:	01010113          	addi	sp,sp,16
80001948:	00008067          	ret

8000194c <xPortStartScheduler>:
xPortStartScheduler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:299
uint32_t g_startscheduler = 0;
BaseType_t xPortStartScheduler( void )
{
8000194c:	ff010113          	addi	sp,sp,-16
80001950:	00112623          	sw	ra,12(sp)
80001954:	00812423          	sw	s0,8(sp)
80001958:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:300
	vPortSetupTimer();
8000195c:	d99ff0ef          	jal	ra,800016f4 <vPortSetupTimer>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:301
	uxCriticalNesting = 0;
80001960:	800067b7          	lui	a5,0x80006
80001964:	2607aa23          	sw	zero,628(a5) # 80006274 <__stack_top+0xfffc5a24>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:302
	g_startscheduler = 1;
80001968:	00100713          	li	a4,1
8000196c:	92e1a423          	sw	a4,-1752(gp) # 80006398 <g_startscheduler>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:303
	__enable_irq();
80001970:	a11fe0ef          	jal	ra,80000380 <__enable_irq>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:305

	raise_soft_interrupt();
80001974:	bf5ff0ef          	jal	ra,80001568 <raise_soft_interrupt>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:308

	/*Should not get here*/
	return pdFALSE;
80001978:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:309
}
8000197c:	00078513          	mv	a0,a5
80001980:	00c12083          	lw	ra,12(sp)
80001984:	00812403          	lw	s0,8(sp)
80001988:	01010113          	addi	sp,sp,16
8000198c:	00008067          	ret

80001990 <Software_IRQHandler>:
Software_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:312

void Software_IRQHandler(void)
{
80001990:	ff010113          	addi	sp,sp,-16
80001994:	00112623          	sw	ra,12(sp)
80001998:	00812423          	sw	s0,8(sp)
8000199c:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:313
	if(1 == g_startscheduler)
800019a0:	9281a703          	lw	a4,-1752(gp) # 80006398 <g_startscheduler>
800019a4:	00100793          	li	a5,1
800019a8:	00f71863          	bne	a4,a5,800019b8 <Software_IRQHandler+0x28>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:315
	{
		g_startscheduler = 2; //skip the save n switch context first time when scheduler is starting.
800019ac:	00200713          	li	a4,2
800019b0:	92e1a423          	sw	a4,-1752(gp) # 80006398 <g_startscheduler>
800019b4:	0100006f          	j	800019c4 <Software_IRQHandler+0x34>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:321
	}
	else
	{
		/*Save Context*/
		{
			__asm volatile("lw	t0, pxCurrentTCB");
800019b8:	92c1a283          	lw	t0,-1748(gp) # 8000639c <pxCurrentTCB>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:322
			__asm volatile("sw	a2, 0x0(t0)");
800019bc:	00c2a023          	sw	a2,0(t0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:325
		}

		vTaskSwitchContext();
800019c0:	369000ef          	jal	ra,80002528 <vTaskSwitchContext>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:329
	}

	// Moved by Imperas (was previously causing corruption of a5)
	PRCI->MSIP[0] = 0x00;
800019c4:	440007b7          	lui	a5,0x44000
800019c8:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:333

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
800019cc:	92c1a103          	lw	sp,-1748(gp) # 8000639c <pxCurrentTCB>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:334
		__asm volatile("lw	sp, 0x0(sp)");
800019d0:	00012103          	lw	sp,0(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:336

		__asm volatile("lw	t0, 31 * 4(sp)");
800019d4:	07c12283          	lw	t0,124(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:337
		__asm volatile("csrw	mepc, t0");
800019d8:	34129073          	csrw	mepc,t0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:339

		__asm volatile("lw	x1, 0x0(sp)");
800019dc:	00012083          	lw	ra,0(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:340
		__asm volatile("lw   x4, 3 * 4(sp)");
800019e0:	00c12203          	lw	tp,12(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:341
		__asm volatile("lw   x5, 4 * 4(sp)");
800019e4:	01012283          	lw	t0,16(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:342
		__asm volatile("lw   x6, 5 * 4(sp)");
800019e8:	01412303          	lw	t1,20(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:343
		__asm volatile("lw   x7, 6 * 4(sp)");
800019ec:	01812383          	lw	t2,24(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:344
		__asm volatile("lw   x8, 7 * 4(sp)");
800019f0:	01c12403          	lw	s0,28(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:345
		__asm volatile("lw   x9, 8 * 4(sp)");
800019f4:	02012483          	lw	s1,32(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:346
		__asm volatile("lw   x10, 9 * 4(sp)");
800019f8:	02412503          	lw	a0,36(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:347
		__asm volatile("lw   x11, 10 * 4(sp)");
800019fc:	02812583          	lw	a1,40(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:348
		__asm volatile("lw   x12, 11 * 4(sp)");
80001a00:	02c12603          	lw	a2,44(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:349
		__asm volatile("lw   x13, 12 * 4(sp)");
80001a04:	03012683          	lw	a3,48(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:350
		__asm volatile("lw   x14, 13 * 4(sp)");
80001a08:	03412703          	lw	a4,52(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:351
		__asm volatile("lw   x15, 14 * 4(sp)");
80001a0c:	03812783          	lw	a5,56(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:352
		__asm volatile("lw   x16, 15 * 4(sp)");
80001a10:	03c12803          	lw	a6,60(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:353
		__asm volatile("lw   x17, 16 * 4(sp)");
80001a14:	04012883          	lw	a7,64(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:354
		__asm volatile("lw   x18, 17 * 4(sp)");
80001a18:	04412903          	lw	s2,68(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:355
		__asm volatile("lw   x19, 18 * 4(sp)");
80001a1c:	04812983          	lw	s3,72(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:356
		__asm volatile("lw   x20, 19 * 4(sp)");
80001a20:	04c12a03          	lw	s4,76(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:357
		__asm volatile("lw   x21, 20 * 4(sp)");
80001a24:	05012a83          	lw	s5,80(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:358
		__asm volatile("lw   x22, 21 * 4(sp)");
80001a28:	05412b03          	lw	s6,84(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:359
		__asm volatile("lw   x23, 22 * 4(sp)");
80001a2c:	05812b83          	lw	s7,88(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:360
		__asm volatile("lw   x24, 23 * 4(sp)");
80001a30:	05c12c03          	lw	s8,92(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:361
		__asm volatile("lw   x25, 24 * 4(sp)");
80001a34:	06012c83          	lw	s9,96(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:362
		__asm volatile("lw   x26, 25 * 4(sp)");
80001a38:	06412d03          	lw	s10,100(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:363
		__asm volatile("lw   x27, 26 * 4(sp)");
80001a3c:	06812d83          	lw	s11,104(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:364
		__asm volatile("lw   x28, 27 * 4(sp)");
80001a40:	06c12e03          	lw	t3,108(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:365
		__asm volatile("lw   x29, 28 * 4(sp)");
80001a44:	07012e83          	lw	t4,112(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:366
		__asm volatile("lw   x30, 29 * 4(sp)");
80001a48:	07412f03          	lw	t5,116(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:367
		__asm volatile("lw   x31, 30 * 4(sp)");
80001a4c:	07812f83          	lw	t6,120(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:369

		__asm volatile("addi	sp, sp, 4 * 32");
80001a50:	08010113          	addi	sp,sp,128
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:374

	    // Moved by Imperas (causing corruption of a5 at this position)
		//PRCI->MSIP[0] = 0x00;

		__asm volatile("mret");
80001a54:	30200073          	mret
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:376
	}
}
80001a58:	00000013          	nop
80001a5c:	00c12083          	lw	ra,12(sp)
80001a60:	00812403          	lw	s0,8(sp)
80001a64:	01010113          	addi	sp,sp,16
80001a68:	00008067          	ret

80001a6c <vPortYield>:
vPortYield():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:379

void vPortYield( void )
{
80001a6c:	ff010113          	addi	sp,sp,-16
80001a70:	00112623          	sw	ra,12(sp)
80001a74:	00812423          	sw	s0,8(sp)
80001a78:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:380
	raise_soft_interrupt();
80001a7c:	aedff0ef          	jal	ra,80001568 <raise_soft_interrupt>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:381
}
80001a80:	00000013          	nop
80001a84:	00c12083          	lw	ra,12(sp)
80001a88:	00812403          	lw	s0,8(sp)
80001a8c:	01010113          	addi	sp,sp,16
80001a90:	00008067          	ret

80001a94 <vListInitialise>:
vListInitialise():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:80
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
80001a94:	fe010113          	addi	sp,sp,-32
80001a98:	00812e23          	sw	s0,28(sp)
80001a9c:	02010413          	addi	s0,sp,32
80001aa0:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:84
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001aa4:	fec42783          	lw	a5,-20(s0)
80001aa8:	00878713          	addi	a4,a5,8
80001aac:	fec42783          	lw	a5,-20(s0)
80001ab0:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:88

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
80001ab4:	fec42783          	lw	a5,-20(s0)
80001ab8:	fff00713          	li	a4,-1
80001abc:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:92

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001ac0:	fec42783          	lw	a5,-20(s0)
80001ac4:	00878713          	addi	a4,a5,8
80001ac8:	fec42783          	lw	a5,-20(s0)
80001acc:	00e7a623          	sw	a4,12(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:93
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001ad0:	fec42783          	lw	a5,-20(s0)
80001ad4:	00878713          	addi	a4,a5,8
80001ad8:	fec42783          	lw	a5,-20(s0)
80001adc:	00e7a823          	sw	a4,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:95

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
80001ae0:	fec42783          	lw	a5,-20(s0)
80001ae4:	0007a023          	sw	zero,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:101

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
80001ae8:	00000013          	nop
80001aec:	01c12403          	lw	s0,28(sp)
80001af0:	02010113          	addi	sp,sp,32
80001af4:	00008067          	ret

80001af8 <vListInitialiseItem>:
vListInitialiseItem():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:105
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
80001af8:	fe010113          	addi	sp,sp,-32
80001afc:	00812e23          	sw	s0,28(sp)
80001b00:	02010413          	addi	s0,sp,32
80001b04:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:107
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80001b08:	fec42783          	lw	a5,-20(s0)
80001b0c:	0007a823          	sw	zero,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:113

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
80001b10:	00000013          	nop
80001b14:	01c12403          	lw	s0,28(sp)
80001b18:	02010113          	addi	sp,sp,32
80001b1c:	00008067          	ret

80001b20 <vListInsertEnd>:
vListInsertEnd():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:117
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001b20:	fd010113          	addi	sp,sp,-48
80001b24:	02812623          	sw	s0,44(sp)
80001b28:	03010413          	addi	s0,sp,48
80001b2c:	fca42e23          	sw	a0,-36(s0)
80001b30:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:118
ListItem_t * const pxIndex = pxList->pxIndex;
80001b34:	fdc42783          	lw	a5,-36(s0)
80001b38:	0047a783          	lw	a5,4(a5)
80001b3c:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:129
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
80001b40:	fd842783          	lw	a5,-40(s0)
80001b44:	fec42703          	lw	a4,-20(s0)
80001b48:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:130
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
80001b4c:	fec42783          	lw	a5,-20(s0)
80001b50:	0087a703          	lw	a4,8(a5)
80001b54:	fd842783          	lw	a5,-40(s0)
80001b58:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:135

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
80001b5c:	fec42783          	lw	a5,-20(s0)
80001b60:	0087a783          	lw	a5,8(a5)
80001b64:	fd842703          	lw	a4,-40(s0)
80001b68:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:136
	pxIndex->pxPrevious = pxNewListItem;
80001b6c:	fec42783          	lw	a5,-20(s0)
80001b70:	fd842703          	lw	a4,-40(s0)
80001b74:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:139

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001b78:	fd842783          	lw	a5,-40(s0)
80001b7c:	fdc42703          	lw	a4,-36(s0)
80001b80:	00e7a823          	sw	a4,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:141

	( pxList->uxNumberOfItems )++;
80001b84:	fdc42783          	lw	a5,-36(s0)
80001b88:	0007a783          	lw	a5,0(a5)
80001b8c:	00178713          	addi	a4,a5,1
80001b90:	fdc42783          	lw	a5,-36(s0)
80001b94:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:142
}
80001b98:	00000013          	nop
80001b9c:	02c12403          	lw	s0,44(sp)
80001ba0:	03010113          	addi	sp,sp,48
80001ba4:	00008067          	ret

80001ba8 <vListInsert>:
vListInsert():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:146
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001ba8:	fd010113          	addi	sp,sp,-48
80001bac:	02812623          	sw	s0,44(sp)
80001bb0:	03010413          	addi	s0,sp,48
80001bb4:	fca42e23          	sw	a0,-36(s0)
80001bb8:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:148
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
80001bbc:	fd842783          	lw	a5,-40(s0)
80001bc0:	0007a783          	lw	a5,0(a5)
80001bc4:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:164
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
80001bc8:	fe842703          	lw	a4,-24(s0)
80001bcc:	fff00793          	li	a5,-1
80001bd0:	00f71a63          	bne	a4,a5,80001be4 <vListInsert+0x3c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:166
	{
		pxIterator = pxList->xListEnd.pxPrevious;
80001bd4:	fdc42783          	lw	a5,-36(s0)
80001bd8:	0107a783          	lw	a5,16(a5)
80001bdc:	fef42623          	sw	a5,-20(s0)
80001be0:	0340006f          	j	80001c14 <vListInsert+0x6c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:192
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001be4:	fdc42783          	lw	a5,-36(s0)
80001be8:	00878793          	addi	a5,a5,8
80001bec:	fef42623          	sw	a5,-20(s0)
80001bf0:	0100006f          	j	80001c00 <vListInsert+0x58>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 3)
80001bf4:	fec42783          	lw	a5,-20(s0)
80001bf8:	0047a783          	lw	a5,4(a5)
80001bfc:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 1)
80001c00:	fec42783          	lw	a5,-20(s0)
80001c04:	0047a783          	lw	a5,4(a5)
80001c08:	0007a783          	lw	a5,0(a5)
80001c0c:	fe842703          	lw	a4,-24(s0)
80001c10:	fef772e3          	bleu	a5,a4,80001bf4 <vListInsert+0x4c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:199
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
80001c14:	fec42783          	lw	a5,-20(s0)
80001c18:	0047a703          	lw	a4,4(a5)
80001c1c:	fd842783          	lw	a5,-40(s0)
80001c20:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:200
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
80001c24:	fd842783          	lw	a5,-40(s0)
80001c28:	0047a783          	lw	a5,4(a5)
80001c2c:	fd842703          	lw	a4,-40(s0)
80001c30:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:201
	pxNewListItem->pxPrevious = pxIterator;
80001c34:	fd842783          	lw	a5,-40(s0)
80001c38:	fec42703          	lw	a4,-20(s0)
80001c3c:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:202
	pxIterator->pxNext = pxNewListItem;
80001c40:	fec42783          	lw	a5,-20(s0)
80001c44:	fd842703          	lw	a4,-40(s0)
80001c48:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:206

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001c4c:	fd842783          	lw	a5,-40(s0)
80001c50:	fdc42703          	lw	a4,-36(s0)
80001c54:	00e7a823          	sw	a4,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:208

	( pxList->uxNumberOfItems )++;
80001c58:	fdc42783          	lw	a5,-36(s0)
80001c5c:	0007a783          	lw	a5,0(a5)
80001c60:	00178713          	addi	a4,a5,1
80001c64:	fdc42783          	lw	a5,-36(s0)
80001c68:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:209
}
80001c6c:	00000013          	nop
80001c70:	02c12403          	lw	s0,44(sp)
80001c74:	03010113          	addi	sp,sp,48
80001c78:	00008067          	ret

80001c7c <uxListRemove>:
uxListRemove():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:213
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
80001c7c:	fd010113          	addi	sp,sp,-48
80001c80:	02812623          	sw	s0,44(sp)
80001c84:	03010413          	addi	s0,sp,48
80001c88:	fca42e23          	sw	a0,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:216
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
80001c8c:	fdc42783          	lw	a5,-36(s0)
80001c90:	0107a783          	lw	a5,16(a5)
80001c94:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:218

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
80001c98:	fdc42783          	lw	a5,-36(s0)
80001c9c:	0047a783          	lw	a5,4(a5)
80001ca0:	fdc42703          	lw	a4,-36(s0)
80001ca4:	00872703          	lw	a4,8(a4) # 44000008 <RAM_SIZE+0x43f80008>
80001ca8:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:219
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
80001cac:	fdc42783          	lw	a5,-36(s0)
80001cb0:	0087a783          	lw	a5,8(a5)
80001cb4:	fdc42703          	lw	a4,-36(s0)
80001cb8:	00472703          	lw	a4,4(a4)
80001cbc:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:225

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
80001cc0:	fec42783          	lw	a5,-20(s0)
80001cc4:	0047a783          	lw	a5,4(a5)
80001cc8:	fdc42703          	lw	a4,-36(s0)
80001ccc:	00f71a63          	bne	a4,a5,80001ce0 <uxListRemove+0x64>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:227
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
80001cd0:	fdc42783          	lw	a5,-36(s0)
80001cd4:	0087a703          	lw	a4,8(a5)
80001cd8:	fec42783          	lw	a5,-20(s0)
80001cdc:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:234
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
80001ce0:	fdc42783          	lw	a5,-36(s0)
80001ce4:	0007a823          	sw	zero,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:235
	( pxList->uxNumberOfItems )--;
80001ce8:	fec42783          	lw	a5,-20(s0)
80001cec:	0007a783          	lw	a5,0(a5)
80001cf0:	fff78713          	addi	a4,a5,-1
80001cf4:	fec42783          	lw	a5,-20(s0)
80001cf8:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:237

	return pxList->uxNumberOfItems;
80001cfc:	fec42783          	lw	a5,-20(s0)
80001d00:	0007a783          	lw	a5,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:238
}
80001d04:	00078513          	mv	a0,a5
80001d08:	02c12403          	lw	s0,44(sp)
80001d0c:	03010113          	addi	sp,sp,48
80001d10:	00008067          	ret

80001d14 <memset>:
memset():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:25

  return dest;
}

void* memset(void* dest, int byte, size_t len)
{
80001d14:	fd010113          	addi	sp,sp,-48
80001d18:	02812623          	sw	s0,44(sp)
80001d1c:	03010413          	addi	s0,sp,48
80001d20:	fca42e23          	sw	a0,-36(s0)
80001d24:	fcb42c23          	sw	a1,-40(s0)
80001d28:	fcc42a23          	sw	a2,-44(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:26
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
80001d2c:	fdc42703          	lw	a4,-36(s0)
80001d30:	fd442783          	lw	a5,-44(s0)
80001d34:	00f767b3          	or	a5,a4,a5
80001d38:	0037f793          	andi	a5,a5,3
80001d3c:	06079863          	bnez	a5,80001dac <memset+0x98>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:27
    uintptr_t word = byte & 0xFF;
80001d40:	fd842783          	lw	a5,-40(s0)
80001d44:	0ff7f793          	andi	a5,a5,255
80001d48:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:28
    word |= word << 8;
80001d4c:	fe442783          	lw	a5,-28(s0)
80001d50:	00879793          	slli	a5,a5,0x8
80001d54:	fe442703          	lw	a4,-28(s0)
80001d58:	00f767b3          	or	a5,a4,a5
80001d5c:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:29
    word |= word << 16;
80001d60:	fe442783          	lw	a5,-28(s0)
80001d64:	01079793          	slli	a5,a5,0x10
80001d68:	fe442703          	lw	a4,-28(s0)
80001d6c:	00f767b3          	or	a5,a4,a5
80001d70:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:32
    word |= word << 16 << 16;

    uintptr_t *d = dest;
80001d74:	fdc42783          	lw	a5,-36(s0)
80001d78:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001d7c:	0180006f          	j	80001d94 <memset+0x80>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:34
      *d++ = word;
80001d80:	fec42783          	lw	a5,-20(s0)
80001d84:	00478713          	addi	a4,a5,4
80001d88:	fee42623          	sw	a4,-20(s0)
80001d8c:	fe442703          	lw	a4,-28(s0)
80001d90:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001d94:	fdc42703          	lw	a4,-36(s0)
80001d98:	fd442783          	lw	a5,-44(s0)
80001d9c:	00f707b3          	add	a5,a4,a5
80001da0:	fec42703          	lw	a4,-20(s0)
80001da4:	fcf76ee3          	bltu	a4,a5,80001d80 <memset+0x6c>
80001da8:	0400006f          	j	80001de8 <memset+0xd4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:36
  } else {
    char *d = dest;
80001dac:	fdc42783          	lw	a5,-36(s0)
80001db0:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001db4:	0200006f          	j	80001dd4 <memset+0xc0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:38
      *d++ = byte;
80001db8:	fe842783          	lw	a5,-24(s0)
80001dbc:	00178713          	addi	a4,a5,1
80001dc0:	fee42423          	sw	a4,-24(s0)
80001dc4:	fd842703          	lw	a4,-40(s0)
80001dc8:	01871713          	slli	a4,a4,0x18
80001dcc:	41875713          	srai	a4,a4,0x18
80001dd0:	00e78023          	sb	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001dd4:	fdc42703          	lw	a4,-36(s0)
80001dd8:	fd442783          	lw	a5,-44(s0)
80001ddc:	00f707b3          	add	a5,a4,a5
80001de0:	fe842703          	lw	a4,-24(s0)
80001de4:	fcf76ae3          	bltu	a4,a5,80001db8 <memset+0xa4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:40
  }
  return dest;
80001de8:	fdc42783          	lw	a5,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:41
}
80001dec:	00078513          	mv	a0,a5
80001df0:	02c12403          	lw	s0,44(sp)
80001df4:	03010113          	addi	sp,sp,48
80001df8:	00008067          	ret

80001dfc <strlen>:
strlen():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:44

size_t strlen(const char *s)
{
80001dfc:	fd010113          	addi	sp,sp,-48
80001e00:	02812623          	sw	s0,44(sp)
80001e04:	03010413          	addi	s0,sp,48
80001e08:	fca42e23          	sw	a0,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:45
  const char *p = s;
80001e0c:	fdc42783          	lw	a5,-36(s0)
80001e10:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001e14:	0100006f          	j	80001e24 <strlen+0x28>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:47
    p++;
80001e18:	fec42783          	lw	a5,-20(s0)
80001e1c:	00178793          	addi	a5,a5,1
80001e20:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001e24:	fec42783          	lw	a5,-20(s0)
80001e28:	00078783          	lb	a5,0(a5)
80001e2c:	fe0796e3          	bnez	a5,80001e18 <strlen+0x1c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:48
  return p - s;
80001e30:	fec42703          	lw	a4,-20(s0)
80001e34:	fdc42783          	lw	a5,-36(s0)
80001e38:	40f707b3          	sub	a5,a4,a5
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:49
}
80001e3c:	00078513          	mv	a0,a5
80001e40:	02c12403          	lw	s0,44(sp)
80001e44:	03010113          	addi	sp,sp,48
80001e48:	00008067          	ret

80001e4c <xTaskGenericCreate>:
xTaskGenericCreate():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:551

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80001e4c:	fc010113          	addi	sp,sp,-64
80001e50:	02112e23          	sw	ra,60(sp)
80001e54:	02812c23          	sw	s0,56(sp)
80001e58:	04010413          	addi	s0,sp,64
80001e5c:	fca42e23          	sw	a0,-36(s0)
80001e60:	fcb42c23          	sw	a1,-40(s0)
80001e64:	fcd42823          	sw	a3,-48(s0)
80001e68:	fce42623          	sw	a4,-52(s0)
80001e6c:	fcf42423          	sw	a5,-56(s0)
80001e70:	fd042223          	sw	a6,-60(s0)
80001e74:	fd142023          	sw	a7,-64(s0)
80001e78:	00060793          	mv	a5,a2
80001e7c:	fcf41b23          	sh	a5,-42(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:556
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
80001e80:	fdc42783          	lw	a5,-36(s0)
80001e84:	00079663          	bnez	a5,80001e90 <xTaskGenericCreate+0x44>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:556 (discriminator 1)
80001e88:	30047073          	csrci	mstatus,8
80001e8c:	0000006f          	j	80001e8c <xTaskGenericCreate+0x40>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:557
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
80001e90:	fcc42703          	lw	a4,-52(s0)
80001e94:	00400793          	li	a5,4
80001e98:	00e7f663          	bleu	a4,a5,80001ea4 <xTaskGenericCreate+0x58>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 1)
80001e9c:	30047073          	csrci	mstatus,8
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 2)
80001ea0:	0000006f          	j	80001ea0 <xTaskGenericCreate+0x54>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:561

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
80001ea4:	fd645783          	lhu	a5,-42(s0)
80001ea8:	fc442583          	lw	a1,-60(s0)
80001eac:	00078513          	mv	a0,a5
80001eb0:	2b9000ef          	jal	ra,80002968 <prvAllocateTCBAndStack>
80001eb4:	fea42423          	sw	a0,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:562
	if( pxNewTCB != NULL )
80001eb8:	fe842783          	lw	a5,-24(s0)
80001ebc:	16078263          	beqz	a5,80002020 <xTaskGenericCreate+0x1d4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:598
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
80001ec0:	fe842783          	lw	a5,-24(s0)
80001ec4:	0307a703          	lw	a4,48(a5)
80001ec8:	fd645683          	lhu	a3,-42(s0)
80001ecc:	400007b7          	lui	a5,0x40000
80001ed0:	fff78793          	addi	a5,a5,-1 # 3fffffff <RAM_SIZE+0x3ff7ffff>
80001ed4:	00f687b3          	add	a5,a3,a5
80001ed8:	00279793          	slli	a5,a5,0x2
80001edc:	00f707b3          	add	a5,a4,a5
80001ee0:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:599
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
80001ee4:	fe442783          	lw	a5,-28(s0)
80001ee8:	ffc7f793          	andi	a5,a5,-4
80001eec:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:602

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
80001ef0:	fe442783          	lw	a5,-28(s0)
80001ef4:	0037f793          	andi	a5,a5,3
80001ef8:	00078663          	beqz	a5,80001f04 <xTaskGenericCreate+0xb8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 1)
80001efc:	30047073          	csrci	mstatus,8
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 3)
80001f00:	0000006f          	j	80001f00 <xTaskGenericCreate+0xb4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:619
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
80001f04:	fd645783          	lhu	a5,-42(s0)
80001f08:	00078713          	mv	a4,a5
80001f0c:	fc042683          	lw	a3,-64(s0)
80001f10:	fcc42603          	lw	a2,-52(s0)
80001f14:	fd842583          	lw	a1,-40(s0)
80001f18:	fe842503          	lw	a0,-24(s0)
80001f1c:	72c000ef          	jal	ra,80002648 <prvInitialiseTCBVariables>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:631
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
80001f20:	fd042603          	lw	a2,-48(s0)
80001f24:	fdc42583          	lw	a1,-36(s0)
80001f28:	fe442503          	lw	a0,-28(s0)
80001f2c:	8c1ff0ef          	jal	ra,800017ec <pxPortInitialiseStack>
80001f30:	00050713          	mv	a4,a0
80001f34:	fe842783          	lw	a5,-24(s0)
80001f38:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:635
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
80001f3c:	fc842783          	lw	a5,-56(s0)
80001f40:	00078863          	beqz	a5,80001f50 <xTaskGenericCreate+0x104>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:640
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
80001f44:	fc842783          	lw	a5,-56(s0)
80001f48:	fe842703          	lw	a4,-24(s0)
80001f4c:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:649
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
80001f50:	e64ff0ef          	jal	ra,800015b4 <vPortEnterCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:651
		{
			uxCurrentNumberOfTasks++;
80001f54:	93c1a783          	lw	a5,-1732(gp) # 800063ac <uxCurrentNumberOfTasks>
80001f58:	00178713          	addi	a4,a5,1
80001f5c:	92e1ae23          	sw	a4,-1732(gp) # 800063ac <uxCurrentNumberOfTasks>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:652
			if( pxCurrentTCB == NULL )
80001f60:	92c1a783          	lw	a5,-1748(gp) # 8000639c <pxCurrentTCB>
80001f64:	02079063          	bnez	a5,80001f84 <xTaskGenericCreate+0x138>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:656
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
80001f68:	fe842703          	lw	a4,-24(s0)
80001f6c:	92e1a623          	sw	a4,-1748(gp) # 8000639c <pxCurrentTCB>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:658

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
80001f70:	93c1a703          	lw	a4,-1732(gp) # 800063ac <uxCurrentNumberOfTasks>
80001f74:	00100793          	li	a5,1
80001f78:	02f71663          	bne	a4,a5,80001fa4 <xTaskGenericCreate+0x158>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:663
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
80001f7c:	005000ef          	jal	ra,80002780 <prvInitialiseTaskLists>
80001f80:	0240006f          	j	80001fa4 <xTaskGenericCreate+0x158>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:675
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
80001f84:	9481a783          	lw	a5,-1720(gp) # 800063b8 <xSchedulerRunning>
80001f88:	00079e63          	bnez	a5,80001fa4 <xTaskGenericCreate+0x158>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:677
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
80001f8c:	92c1a783          	lw	a5,-1748(gp) # 8000639c <pxCurrentTCB>
80001f90:	02c7a783          	lw	a5,44(a5)
80001f94:	fcc42703          	lw	a4,-52(s0)
80001f98:	00f76663          	bltu	a4,a5,80001fa4 <xTaskGenericCreate+0x158>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:679
					{
						pxCurrentTCB = pxNewTCB;
80001f9c:	fe842703          	lw	a4,-24(s0)
80001fa0:	92e1a623          	sw	a4,-1748(gp) # 8000639c <pxCurrentTCB>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:692
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
80001fa4:	9581a783          	lw	a5,-1704(gp) # 800063c8 <uxTaskNumber>
80001fa8:	00178713          	addi	a4,a5,1
80001fac:	94e1ac23          	sw	a4,-1704(gp) # 800063c8 <uxTaskNumber>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:697

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
80001fb0:	9581a703          	lw	a4,-1704(gp) # 800063c8 <uxTaskNumber>
80001fb4:	fe842783          	lw	a5,-24(s0)
80001fb8:	04e7a423          	sw	a4,72(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:702
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
80001fbc:	fe842783          	lw	a5,-24(s0)
80001fc0:	02c7a703          	lw	a4,44(a5)
80001fc4:	9441a783          	lw	a5,-1724(gp) # 800063b4 <uxTopReadyPriority>
80001fc8:	00e7f863          	bleu	a4,a5,80001fd8 <xTaskGenericCreate+0x18c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 1)
80001fcc:	fe842783          	lw	a5,-24(s0)
80001fd0:	02c7a703          	lw	a4,44(a5)
80001fd4:	94e1a223          	sw	a4,-1724(gp) # 800063b4 <uxTopReadyPriority>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 3)
80001fd8:	fe842783          	lw	a5,-24(s0)
80001fdc:	02c7a703          	lw	a4,44(a5)
80001fe0:	00070793          	mv	a5,a4
80001fe4:	00279793          	slli	a5,a5,0x2
80001fe8:	00e787b3          	add	a5,a5,a4
80001fec:	00279793          	slli	a5,a5,0x2
80001ff0:	8001f737          	lui	a4,0x8001f
80001ff4:	3e070713          	addi	a4,a4,992 # 8001f3e0 <__stack_top+0xfffdeb90>
80001ff8:	00e78733          	add	a4,a5,a4
80001ffc:	fe842783          	lw	a5,-24(s0)
80002000:	00478793          	addi	a5,a5,4
80002004:	00078593          	mv	a1,a5
80002008:	00070513          	mv	a0,a4
8000200c:	b15ff0ef          	jal	ra,80001b20 <vListInsertEnd>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:704 (discriminator 3)

			xReturn = pdPASS;
80002010:	00100793          	li	a5,1
80002014:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:707 (discriminator 3)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
80002018:	dd0ff0ef          	jal	ra,800015e8 <vPortExitCritical>
8000201c:	00c0006f          	j	80002028 <xTaskGenericCreate+0x1dc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:711
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
80002020:	fff00793          	li	a5,-1
80002024:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:715
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
80002028:	fec42703          	lw	a4,-20(s0)
8000202c:	00100793          	li	a5,1
80002030:	02f71063          	bne	a4,a5,80002050 <xTaskGenericCreate+0x204>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:717
	{
		if( xSchedulerRunning != pdFALSE )
80002034:	9481a783          	lw	a5,-1720(gp) # 800063b8 <xSchedulerRunning>
80002038:	00078c63          	beqz	a5,80002050 <xTaskGenericCreate+0x204>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:721
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
8000203c:	92c1a783          	lw	a5,-1748(gp) # 8000639c <pxCurrentTCB>
80002040:	02c7a783          	lw	a5,44(a5)
80002044:	fcc42703          	lw	a4,-52(s0)
80002048:	00e7f463          	bleu	a4,a5,80002050 <xTaskGenericCreate+0x204>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:723
			{
				taskYIELD_IF_USING_PREEMPTION();
8000204c:	a21ff0ef          	jal	ra,80001a6c <vPortYield>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:736
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
80002050:	fec42783          	lw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:737
}
80002054:	00078513          	mv	a0,a5
80002058:	03c12083          	lw	ra,60(sp)
8000205c:	03812403          	lw	s0,56(sp)
80002060:	04010113          	addi	sp,sp,64
80002064:	00008067          	ret

80002068 <vTaskDelay>:
vTaskDelay():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:921
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
80002068:	fd010113          	addi	sp,sp,-48
8000206c:	02112623          	sw	ra,44(sp)
80002070:	02812423          	sw	s0,40(sp)
80002074:	03010413          	addi	s0,sp,48
80002078:	fca42e23          	sw	a0,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:923
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
8000207c:	fe042623          	sw	zero,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:927


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
80002080:	fdc42783          	lw	a5,-36(s0)
80002084:	04078463          	beqz	a5,800020cc <vTaskDelay+0x64>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:929
		{
			configASSERT( uxSchedulerSuspended == 0 );
80002088:	9601a783          	lw	a5,-1696(gp) # 800063d0 <uxSchedulerSuspended>
8000208c:	00078663          	beqz	a5,80002098 <vTaskDelay+0x30>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:929 (discriminator 1)
80002090:	30047073          	csrci	mstatus,8
80002094:	0000006f          	j	80002094 <vTaskDelay+0x2c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:930
			vTaskSuspendAll();
80002098:	0e4000ef          	jal	ra,8000217c <vTaskSuspendAll>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:944
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
8000209c:	9401a783          	lw	a5,-1728(gp) # 800063b0 <xTickCount>
800020a0:	fdc42703          	lw	a4,-36(s0)
800020a4:	00f707b3          	add	a5,a4,a5
800020a8:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:949

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
800020ac:	92c1a783          	lw	a5,-1748(gp) # 8000639c <pxCurrentTCB>
800020b0:	00478793          	addi	a5,a5,4
800020b4:	00078513          	mv	a0,a5
800020b8:	bc5ff0ef          	jal	ra,80001c7c <uxListRemove>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:960
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
800020bc:	fe842503          	lw	a0,-24(s0)
800020c0:	021000ef          	jal	ra,800028e0 <prvAddCurrentTaskToDelayedList>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:962
			}
			xAlreadyYielded = xTaskResumeAll();
800020c4:	0e0000ef          	jal	ra,800021a4 <xTaskResumeAll>
800020c8:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:971
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
800020cc:	fec42783          	lw	a5,-20(s0)
800020d0:	00079463          	bnez	a5,800020d8 <vTaskDelay+0x70>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:973
		{
			portYIELD_WITHIN_API();
800020d4:	999ff0ef          	jal	ra,80001a6c <vPortYield>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:979
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
800020d8:	00000013          	nop
800020dc:	02c12083          	lw	ra,44(sp)
800020e0:	02812403          	lw	s0,40(sp)
800020e4:	03010113          	addi	sp,sp,48
800020e8:	00008067          	ret

800020ec <vTaskStartScheduler>:
vTaskStartScheduler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1542

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
800020ec:	fe010113          	addi	sp,sp,-32
800020f0:	00112e23          	sw	ra,28(sp)
800020f4:	00812c23          	sw	s0,24(sp)
800020f8:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1555
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
800020fc:	00000893          	li	a7,0
80002100:	00000813          	li	a6,0
80002104:	00000793          	li	a5,0
80002108:	00000713          	li	a4,0
8000210c:	00000693          	li	a3,0
80002110:	40000613          	li	a2,1024
80002114:	800065b7          	lui	a1,0x80006
80002118:	f5458593          	addi	a1,a1,-172 # 80005f54 <__stack_top+0xfffc5704>
8000211c:	80002537          	lui	a0,0x80002
80002120:	61450513          	addi	a0,a0,1556 # 80002614 <__stack_top+0xfffc1dc4>
80002124:	d29ff0ef          	jal	ra,80001e4c <xTaskGenericCreate>
80002128:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1572
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
8000212c:	fec42703          	lw	a4,-20(s0)
80002130:	00100793          	li	a5,1
80002134:	02f71263          	bne	a4,a5,80002158 <vTaskStartScheduler+0x6c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1579
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
80002138:	30047073          	csrci	mstatus,8
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1589
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
8000213c:	fff00713          	li	a4,-1
80002140:	94e1ae23          	sw	a4,-1700(gp) # 800063cc <xNextTaskUnblockTime>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1590
		xSchedulerRunning = pdTRUE;
80002144:	00100713          	li	a4,1
80002148:	94e1a423          	sw	a4,-1720(gp) # 800063b8 <xSchedulerRunning>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1591
		xTickCount = ( TickType_t ) 0U;
8000214c:	9401a023          	sw	zero,-1728(gp) # 800063b0 <xTickCount>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1600
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
80002150:	ffcff0ef          	jal	ra,8000194c <xPortStartScheduler>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
80002154:	0140006f          	j	80002168 <vTaskStartScheduler+0x7c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615
		configASSERT( xReturn );
80002158:	fec42783          	lw	a5,-20(s0)
8000215c:	00079663          	bnez	a5,80002168 <vTaskStartScheduler+0x7c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 1)
80002160:	30047073          	csrci	mstatus,8
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 2)
80002164:	0000006f          	j	80002164 <vTaskStartScheduler+0x78>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
}
80002168:	00000013          	nop
8000216c:	01c12083          	lw	ra,28(sp)
80002170:	01812403          	lw	s0,24(sp)
80002174:	02010113          	addi	sp,sp,32
80002178:	00008067          	ret

8000217c <vTaskSuspendAll>:
vTaskSuspendAll():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1632
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
8000217c:	ff010113          	addi	sp,sp,-16
80002180:	00812623          	sw	s0,12(sp)
80002184:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1637
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
80002188:	9601a783          	lw	a5,-1696(gp) # 800063d0 <uxSchedulerSuspended>
8000218c:	00178713          	addi	a4,a5,1
80002190:	96e1a023          	sw	a4,-1696(gp) # 800063d0 <uxSchedulerSuspended>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1638
}
80002194:	00000013          	nop
80002198:	00c12403          	lw	s0,12(sp)
8000219c:	01010113          	addi	sp,sp,16
800021a0:	00008067          	ret

800021a4 <xTaskResumeAll>:
xTaskResumeAll():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1670

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
800021a4:	fe010113          	addi	sp,sp,-32
800021a8:	00112e23          	sw	ra,28(sp)
800021ac:	00812c23          	sw	s0,24(sp)
800021b0:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1672
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
800021b4:	fe042623          	sw	zero,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
800021b8:	9601a783          	lw	a5,-1696(gp) # 800063d0 <uxSchedulerSuspended>
800021bc:	00079663          	bnez	a5,800021c8 <xTaskResumeAll+0x24>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676 (discriminator 1)
800021c0:	30047073          	csrci	mstatus,8
800021c4:	0000006f          	j	800021c4 <xTaskResumeAll+0x20>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1683
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
800021c8:	becff0ef          	jal	ra,800015b4 <vPortEnterCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1685
	{
		--uxSchedulerSuspended;
800021cc:	9601a783          	lw	a5,-1696(gp) # 800063d0 <uxSchedulerSuspended>
800021d0:	fff78713          	addi	a4,a5,-1
800021d4:	96e1a023          	sw	a4,-1696(gp) # 800063d0 <uxSchedulerSuspended>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1687

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
800021d8:	9601a783          	lw	a5,-1696(gp) # 800063d0 <uxSchedulerSuspended>
800021dc:	10079663          	bnez	a5,800022e8 <xTaskResumeAll+0x144>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1689
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
800021e0:	93c1a783          	lw	a5,-1732(gp) # 800063ac <uxCurrentNumberOfTasks>
800021e4:	10078263          	beqz	a5,800022e8 <xTaskResumeAll+0x144>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
800021e8:	0a80006f          	j	80002290 <xTaskResumeAll+0xec>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1695
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
800021ec:	8001f7b7          	lui	a5,0x8001f
800021f0:	46c78793          	addi	a5,a5,1132 # 8001f46c <__stack_top+0xfffdec1c>
800021f4:	00c7a783          	lw	a5,12(a5)
800021f8:	00c7a783          	lw	a5,12(a5)
800021fc:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1696
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002200:	fe842783          	lw	a5,-24(s0)
80002204:	01878793          	addi	a5,a5,24
80002208:	00078513          	mv	a0,a5
8000220c:	a71ff0ef          	jal	ra,80001c7c <uxListRemove>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1697
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80002210:	fe842783          	lw	a5,-24(s0)
80002214:	00478793          	addi	a5,a5,4
80002218:	00078513          	mv	a0,a5
8000221c:	a61ff0ef          	jal	ra,80001c7c <uxListRemove>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698
					prvAddTaskToReadyList( pxTCB );
80002220:	fe842783          	lw	a5,-24(s0)
80002224:	02c7a703          	lw	a4,44(a5)
80002228:	9441a783          	lw	a5,-1724(gp) # 800063b4 <uxTopReadyPriority>
8000222c:	00e7f863          	bleu	a4,a5,8000223c <xTaskResumeAll+0x98>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 1)
80002230:	fe842783          	lw	a5,-24(s0)
80002234:	02c7a703          	lw	a4,44(a5)
80002238:	94e1a223          	sw	a4,-1724(gp) # 800063b4 <uxTopReadyPriority>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 3)
8000223c:	fe842783          	lw	a5,-24(s0)
80002240:	02c7a703          	lw	a4,44(a5)
80002244:	00070793          	mv	a5,a4
80002248:	00279793          	slli	a5,a5,0x2
8000224c:	00e787b3          	add	a5,a5,a4
80002250:	00279793          	slli	a5,a5,0x2
80002254:	8001f737          	lui	a4,0x8001f
80002258:	3e070713          	addi	a4,a4,992 # 8001f3e0 <__stack_top+0xfffdeb90>
8000225c:	00e78733          	add	a4,a5,a4
80002260:	fe842783          	lw	a5,-24(s0)
80002264:	00478793          	addi	a5,a5,4
80002268:	00078593          	mv	a1,a5
8000226c:	00070513          	mv	a0,a4
80002270:	8b1ff0ef          	jal	ra,80001b20 <vListInsertEnd>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1702 (discriminator 3)

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80002274:	fe842783          	lw	a5,-24(s0)
80002278:	02c7a703          	lw	a4,44(a5)
8000227c:	92c1a783          	lw	a5,-1748(gp) # 8000639c <pxCurrentTCB>
80002280:	02c7a783          	lw	a5,44(a5)
80002284:	00f76663          	bltu	a4,a5,80002290 <xTaskResumeAll+0xec>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1704
					{
						xYieldPending = pdTRUE;
80002288:	00100713          	li	a4,1
8000228c:	94e1a823          	sw	a4,-1712(gp) # 800063c0 <xYieldPending>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
80002290:	8001f7b7          	lui	a5,0x8001f
80002294:	46c7a783          	lw	a5,1132(a5) # 8001f46c <__stack_top+0xfffdec1c>
80002298:	f4079ae3          	bnez	a5,800021ec <xTaskResumeAll+0x48>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1716

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
8000229c:	94c1a783          	lw	a5,-1716(gp) # 800063bc <uxPendedTicks>
800022a0:	02078863          	beqz	a5,800022d0 <xTaskResumeAll+0x12c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
800022a4:	0240006f          	j	800022c8 <xTaskResumeAll+0x124>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1720
					{
						if( xTaskIncrementTick() != pdFALSE )
800022a8:	094000ef          	jal	ra,8000233c <xTaskIncrementTick>
800022ac:	00050793          	mv	a5,a0
800022b0:	00078663          	beqz	a5,800022bc <xTaskResumeAll+0x118>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1722
						{
							xYieldPending = pdTRUE;
800022b4:	00100713          	li	a4,1
800022b8:	94e1a823          	sw	a4,-1712(gp) # 800063c0 <xYieldPending>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1728
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
800022bc:	94c1a783          	lw	a5,-1716(gp) # 800063bc <uxPendedTicks>
800022c0:	fff78713          	addi	a4,a5,-1
800022c4:	94e1a623          	sw	a4,-1716(gp) # 800063bc <uxPendedTicks>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
					while( uxPendedTicks > ( UBaseType_t ) 0U )
800022c8:	94c1a783          	lw	a5,-1716(gp) # 800063bc <uxPendedTicks>
800022cc:	fc079ee3          	bnez	a5,800022a8 <xTaskResumeAll+0x104>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1736
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
800022d0:	9501a703          	lw	a4,-1712(gp) # 800063c0 <xYieldPending>
800022d4:	00100793          	li	a5,1
800022d8:	00f71863          	bne	a4,a5,800022e8 <xTaskResumeAll+0x144>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1740
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
800022dc:	00100793          	li	a5,1
800022e0:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1743
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
800022e4:	f88ff0ef          	jal	ra,80001a6c <vPortYield>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1756
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
800022e8:	b00ff0ef          	jal	ra,800015e8 <vPortExitCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1758

	return xAlreadyYielded;
800022ec:	fec42783          	lw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1759
}
800022f0:	00078513          	mv	a0,a5
800022f4:	01c12083          	lw	ra,28(sp)
800022f8:	01812403          	lw	s0,24(sp)
800022fc:	02010113          	addi	sp,sp,32
80002300:	00008067          	ret

80002304 <xTaskGetTickCount>:
xTaskGetTickCount():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1763
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
80002304:	fe010113          	addi	sp,sp,-32
80002308:	00112e23          	sw	ra,28(sp)
8000230c:	00812c23          	sw	s0,24(sp)
80002310:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1767
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
80002314:	aa0ff0ef          	jal	ra,800015b4 <vPortEnterCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1769
	{
		xTicks = xTickCount;
80002318:	9401a783          	lw	a5,-1728(gp) # 800063b0 <xTickCount>
8000231c:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1771
	}
	portTICK_TYPE_EXIT_CRITICAL();
80002320:	ac8ff0ef          	jal	ra,800015e8 <vPortExitCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1773

	return xTicks;
80002324:	fec42783          	lw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1774
}
80002328:	00078513          	mv	a0,a5
8000232c:	01c12083          	lw	ra,28(sp)
80002330:	01812403          	lw	s0,24(sp)
80002334:	02010113          	addi	sp,sp,32
80002338:	00008067          	ret

8000233c <xTaskIncrementTick>:
xTaskIncrementTick():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1938

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
8000233c:	fd010113          	addi	sp,sp,-48
80002340:	02112623          	sw	ra,44(sp)
80002344:	02812423          	sw	s0,40(sp)
80002348:	03010413          	addi	s0,sp,48
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1941
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
8000234c:	fe042623          	sw	zero,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1947

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80002350:	9601a783          	lw	a5,-1696(gp) # 800063d0 <uxSchedulerSuspended>
80002354:	1a079063          	bnez	a5,800024f4 <xTaskIncrementTick+0x1b8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1951
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
80002358:	9401a783          	lw	a5,-1728(gp) # 800063b0 <xTickCount>
8000235c:	00178713          	addi	a4,a5,1
80002360:	94e1a023          	sw	a4,-1728(gp) # 800063b0 <xTickCount>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1956

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
80002364:	9401a783          	lw	a5,-1728(gp) # 800063b0 <xTickCount>
80002368:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1958

			if( xConstTickCount == ( TickType_t ) 0U )
8000236c:	fe842783          	lw	a5,-24(s0)
80002370:	04079063          	bnez	a5,800023b0 <xTaskIncrementTick+0x74>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960
			{
				taskSWITCH_DELAYED_LISTS();
80002374:	9301a783          	lw	a5,-1744(gp) # 800063a0 <pxDelayedTaskList>
80002378:	0007a783          	lw	a5,0(a5)
8000237c:	00078663          	beqz	a5,80002388 <xTaskIncrementTick+0x4c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 1)
80002380:	30047073          	csrci	mstatus,8
80002384:	0000006f          	j	80002384 <xTaskIncrementTick+0x48>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 2)
80002388:	9301a783          	lw	a5,-1744(gp) # 800063a0 <pxDelayedTaskList>
8000238c:	fef42223          	sw	a5,-28(s0)
80002390:	9341a703          	lw	a4,-1740(gp) # 800063a4 <pxOverflowDelayedTaskList>
80002394:	92e1a823          	sw	a4,-1744(gp) # 800063a0 <pxDelayedTaskList>
80002398:	fe442703          	lw	a4,-28(s0)
8000239c:	92e1aa23          	sw	a4,-1740(gp) # 800063a4 <pxOverflowDelayedTaskList>
800023a0:	9541a783          	lw	a5,-1708(gp) # 800063c4 <xNumOfOverflows>
800023a4:	00178713          	addi	a4,a5,1
800023a8:	94e1aa23          	sw	a4,-1708(gp) # 800063c4 <xNumOfOverflows>
800023ac:	6bc000ef          	jal	ra,80002a68 <prvResetNextTaskUnblockTime>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1971

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
800023b0:	95c1a783          	lw	a5,-1700(gp) # 800063cc <xNextTaskUnblockTime>
800023b4:	fe842703          	lw	a4,-24(s0)
800023b8:	10f76063          	bltu	a4,a5,800024b8 <xTaskIncrementTick+0x17c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
800023bc:	9301a783          	lw	a5,-1744(gp) # 800063a0 <pxDelayedTaskList>
800023c0:	0007a783          	lw	a5,0(a5)
800023c4:	00079663          	bnez	a5,800023d0 <xTaskIncrementTick+0x94>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 1)
800023c8:	00100793          	li	a5,1
800023cc:	0080006f          	j	800023d4 <xTaskIncrementTick+0x98>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 2)
800023d0:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 4)
800023d4:	00078863          	beqz	a5,800023e4 <xTaskIncrementTick+0xa8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1982
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
800023d8:	fff00713          	li	a4,-1
800023dc:	94e1ae23          	sw	a4,-1700(gp) # 800063cc <xNextTaskUnblockTime>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1983
						break;
800023e0:	0d80006f          	j	800024b8 <xTaskIncrementTick+0x17c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1991
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
800023e4:	9301a783          	lw	a5,-1744(gp) # 800063a0 <pxDelayedTaskList>
800023e8:	00c7a783          	lw	a5,12(a5)
800023ec:	00c7a783          	lw	a5,12(a5)
800023f0:	fef42023          	sw	a5,-32(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1992
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
800023f4:	fe042783          	lw	a5,-32(s0)
800023f8:	0047a783          	lw	a5,4(a5)
800023fc:	fcf42e23          	sw	a5,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1994

						if( xConstTickCount < xItemValue )
80002400:	fe842703          	lw	a4,-24(s0)
80002404:	fdc42783          	lw	a5,-36(s0)
80002408:	00f77863          	bleu	a5,a4,80002418 <xTaskIncrementTick+0xdc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2001
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
8000240c:	fdc42703          	lw	a4,-36(s0)
80002410:	94e1ae23          	sw	a4,-1700(gp) # 800063cc <xNextTaskUnblockTime>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2002
							break;
80002414:	0a40006f          	j	800024b8 <xTaskIncrementTick+0x17c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2010
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80002418:	fe042783          	lw	a5,-32(s0)
8000241c:	00478793          	addi	a5,a5,4
80002420:	00078513          	mv	a0,a5
80002424:	859ff0ef          	jal	ra,80001c7c <uxListRemove>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2014

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
80002428:	fe042783          	lw	a5,-32(s0)
8000242c:	0287a783          	lw	a5,40(a5)
80002430:	00078a63          	beqz	a5,80002444 <xTaskIncrementTick+0x108>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2016
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002434:	fe042783          	lw	a5,-32(s0)
80002438:	01878793          	addi	a5,a5,24
8000243c:	00078513          	mv	a0,a5
80002440:	83dff0ef          	jal	ra,80001c7c <uxListRemove>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
80002444:	fe042783          	lw	a5,-32(s0)
80002448:	02c7a703          	lw	a4,44(a5)
8000244c:	9441a783          	lw	a5,-1724(gp) # 800063b4 <uxTopReadyPriority>
80002450:	00e7f863          	bleu	a4,a5,80002460 <xTaskIncrementTick+0x124>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 1)
80002454:	fe042783          	lw	a5,-32(s0)
80002458:	02c7a703          	lw	a4,44(a5)
8000245c:	94e1a223          	sw	a4,-1724(gp) # 800063b4 <uxTopReadyPriority>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 3)
80002460:	fe042783          	lw	a5,-32(s0)
80002464:	02c7a703          	lw	a4,44(a5)
80002468:	00070793          	mv	a5,a4
8000246c:	00279793          	slli	a5,a5,0x2
80002470:	00e787b3          	add	a5,a5,a4
80002474:	00279793          	slli	a5,a5,0x2
80002478:	8001f737          	lui	a4,0x8001f
8000247c:	3e070713          	addi	a4,a4,992 # 8001f3e0 <__stack_top+0xfffdeb90>
80002480:	00e78733          	add	a4,a5,a4
80002484:	fe042783          	lw	a5,-32(s0)
80002488:	00478793          	addi	a5,a5,4
8000248c:	00078593          	mv	a1,a5
80002490:	00070513          	mv	a0,a4
80002494:	e8cff0ef          	jal	ra,80001b20 <vListInsertEnd>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2035 (discriminator 3)
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80002498:	fe042783          	lw	a5,-32(s0)
8000249c:	02c7a703          	lw	a4,44(a5)
800024a0:	92c1a783          	lw	a5,-1748(gp) # 8000639c <pxCurrentTCB>
800024a4:	02c7a783          	lw	a5,44(a5)
800024a8:	f0f76ae3          	bltu	a4,a5,800023bc <xTaskIncrementTick+0x80>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2037
							{
								xSwitchRequired = pdTRUE;
800024ac:	00100793          	li	a5,1
800024b0:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
800024b4:	f09ff06f          	j	800023bc <xTaskIncrementTick+0x80>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2055
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
800024b8:	92c1a783          	lw	a5,-1748(gp) # 8000639c <pxCurrentTCB>
800024bc:	02c7a703          	lw	a4,44(a5)
800024c0:	8001f6b7          	lui	a3,0x8001f
800024c4:	00070793          	mv	a5,a4
800024c8:	00279793          	slli	a5,a5,0x2
800024cc:	00e787b3          	add	a5,a5,a4
800024d0:	00279793          	slli	a5,a5,0x2
800024d4:	3e068713          	addi	a4,a3,992 # 8001f3e0 <__stack_top+0xfffdeb90>
800024d8:	00e787b3          	add	a5,a5,a4
800024dc:	0007a703          	lw	a4,0(a5)
800024e0:	00100793          	li	a5,1
800024e4:	00e7fe63          	bleu	a4,a5,80002500 <xTaskIncrementTick+0x1c4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2057
			{
				xSwitchRequired = pdTRUE;
800024e8:	00100793          	li	a5,1
800024ec:	fef42623          	sw	a5,-20(s0)
800024f0:	0100006f          	j	80002500 <xTaskIncrementTick+0x1c4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2083
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
800024f4:	94c1a783          	lw	a5,-1716(gp) # 800063bc <uxPendedTicks>
800024f8:	00178713          	addi	a4,a5,1
800024fc:	94e1a623          	sw	a4,-1716(gp) # 800063bc <uxPendedTicks>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2096
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
80002500:	9501a783          	lw	a5,-1712(gp) # 800063c0 <xYieldPending>
80002504:	00078663          	beqz	a5,80002510 <xTaskIncrementTick+0x1d4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2098
		{
			xSwitchRequired = pdTRUE;
80002508:	00100793          	li	a5,1
8000250c:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2107
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
80002510:	fec42783          	lw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2108
}
80002514:	00078513          	mv	a0,a5
80002518:	02c12083          	lw	ra,44(sp)
8000251c:	02812403          	lw	s0,40(sp)
80002520:	03010113          	addi	sp,sp,48
80002524:	00008067          	ret

80002528 <vTaskSwitchContext>:
vTaskSwitchContext():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2202

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
80002528:	fe010113          	addi	sp,sp,-32
8000252c:	00812e23          	sw	s0,28(sp)
80002530:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2203
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
80002534:	9601a783          	lw	a5,-1696(gp) # 800063d0 <uxSchedulerSuspended>
80002538:	00078863          	beqz	a5,80002548 <vTaskSwitchContext+0x20>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2207
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
8000253c:	00100713          	li	a4,1
80002540:	94e1a823          	sw	a4,-1712(gp) # 800063c0 <xYieldPending>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
80002544:	0c00006f          	j	80002604 <vTaskSwitchContext+0xdc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2211
		xYieldPending = pdFALSE;
80002548:	9401a823          	sw	zero,-1712(gp) # 800063c0 <xYieldPending>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246
		taskSELECT_HIGHEST_PRIORITY_TASK();
8000254c:	0200006f          	j	8000256c <vTaskSwitchContext+0x44>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 4)
80002550:	9441a783          	lw	a5,-1724(gp) # 800063b4 <uxTopReadyPriority>
80002554:	00079663          	bnez	a5,80002560 <vTaskSwitchContext+0x38>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 1)
80002558:	30047073          	csrci	mstatus,8
8000255c:	0000006f          	j	8000255c <vTaskSwitchContext+0x34>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 2)
80002560:	9441a783          	lw	a5,-1724(gp) # 800063b4 <uxTopReadyPriority>
80002564:	fff78713          	addi	a4,a5,-1
80002568:	94e1a223          	sw	a4,-1724(gp) # 800063b4 <uxTopReadyPriority>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 3)
8000256c:	9441a703          	lw	a4,-1724(gp) # 800063b4 <uxTopReadyPriority>
80002570:	8001f6b7          	lui	a3,0x8001f
80002574:	00070793          	mv	a5,a4
80002578:	00279793          	slli	a5,a5,0x2
8000257c:	00e787b3          	add	a5,a5,a4
80002580:	00279793          	slli	a5,a5,0x2
80002584:	3e068713          	addi	a4,a3,992 # 8001f3e0 <__stack_top+0xfffdeb90>
80002588:	00e787b3          	add	a5,a5,a4
8000258c:	0007a783          	lw	a5,0(a5)
80002590:	fc0780e3          	beqz	a5,80002550 <vTaskSwitchContext+0x28>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 5)
80002594:	9441a703          	lw	a4,-1724(gp) # 800063b4 <uxTopReadyPriority>
80002598:	00070793          	mv	a5,a4
8000259c:	00279793          	slli	a5,a5,0x2
800025a0:	00e787b3          	add	a5,a5,a4
800025a4:	00279793          	slli	a5,a5,0x2
800025a8:	8001f737          	lui	a4,0x8001f
800025ac:	3e070713          	addi	a4,a4,992 # 8001f3e0 <__stack_top+0xfffdeb90>
800025b0:	00e787b3          	add	a5,a5,a4
800025b4:	fef42623          	sw	a5,-20(s0)
800025b8:	fec42783          	lw	a5,-20(s0)
800025bc:	0047a783          	lw	a5,4(a5)
800025c0:	0047a703          	lw	a4,4(a5)
800025c4:	fec42783          	lw	a5,-20(s0)
800025c8:	00e7a223          	sw	a4,4(a5)
800025cc:	fec42783          	lw	a5,-20(s0)
800025d0:	0047a703          	lw	a4,4(a5)
800025d4:	fec42783          	lw	a5,-20(s0)
800025d8:	00878793          	addi	a5,a5,8
800025dc:	00f71c63          	bne	a4,a5,800025f4 <vTaskSwitchContext+0xcc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 6)
800025e0:	fec42783          	lw	a5,-20(s0)
800025e4:	0047a783          	lw	a5,4(a5)
800025e8:	0047a703          	lw	a4,4(a5)
800025ec:	fec42783          	lw	a5,-20(s0)
800025f0:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 8)
800025f4:	fec42783          	lw	a5,-20(s0)
800025f8:	0047a783          	lw	a5,4(a5)
800025fc:	00c7a703          	lw	a4,12(a5)
80002600:	92e1a623          	sw	a4,-1748(gp) # 8000639c <pxCurrentTCB>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
}
80002604:	00000013          	nop
80002608:	01c12403          	lw	s0,28(sp)
8000260c:	02010113          	addi	sp,sp,32
80002610:	00008067          	ret

80002614 <prvIdleTask>:
prvIdleTask():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2689
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
80002614:	fe010113          	addi	sp,sp,-32
80002618:	00112e23          	sw	ra,28(sp)
8000261c:	00812c23          	sw	s0,24(sp)
80002620:	02010413          	addi	s0,sp,32
80002624:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
80002628:	218000ef          	jal	ra,80002840 <prvCheckTasksWaitingTermination>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2719

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
8000262c:	8001f7b7          	lui	a5,0x8001f
80002630:	3e07a703          	lw	a4,992(a5) # 8001f3e0 <__stack_top+0xfffdeb90>
80002634:	00100793          	li	a5,1
80002638:	00e7f463          	bleu	a4,a5,80002640 <prvIdleTask+0x2c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2721
			{
				taskYIELD();
8000263c:	c30ff0ef          	jal	ra,80001a6c <vPortYield>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2739
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
80002640:	618030ef          	jal	ra,80005c58 <vApplicationIdleHook>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
		prvCheckTasksWaitingTermination();
80002644:	fe5ff06f          	j	80002628 <prvIdleTask+0x14>

80002648 <prvInitialiseTCBVariables>:
prvInitialiseTCBVariables():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2832

#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80002648:	fc010113          	addi	sp,sp,-64
8000264c:	02112e23          	sw	ra,60(sp)
80002650:	02812c23          	sw	s0,56(sp)
80002654:	04010413          	addi	s0,sp,64
80002658:	fca42e23          	sw	a0,-36(s0)
8000265c:	fcb42c23          	sw	a1,-40(s0)
80002660:	fcc42a23          	sw	a2,-44(s0)
80002664:	fcd42823          	sw	a3,-48(s0)
80002668:	00070793          	mv	a5,a4
8000266c:	fcf41723          	sh	a5,-50(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
80002670:	fe042623          	sw	zero,-20(s0)
80002674:	0440006f          	j	800026b8 <prvInitialiseTCBVariables+0x70>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2838
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
80002678:	fd842703          	lw	a4,-40(s0)
8000267c:	fec42783          	lw	a5,-20(s0)
80002680:	00f707b3          	add	a5,a4,a5
80002684:	00078703          	lb	a4,0(a5)
80002688:	fdc42683          	lw	a3,-36(s0)
8000268c:	fec42783          	lw	a5,-20(s0)
80002690:	00f687b3          	add	a5,a3,a5
80002694:	02e78a23          	sb	a4,52(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2843

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
80002698:	fd842703          	lw	a4,-40(s0)
8000269c:	fec42783          	lw	a5,-20(s0)
800026a0:	00f707b3          	add	a5,a4,a5
800026a4:	00078783          	lb	a5,0(a5)
800026a8:	02078063          	beqz	a5,800026c8 <prvInitialiseTCBVariables+0x80>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 2)
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
800026ac:	fec42783          	lw	a5,-20(s0)
800026b0:	00178793          	addi	a5,a5,1
800026b4:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 1)
800026b8:	fec42703          	lw	a4,-20(s0)
800026bc:	00f00793          	li	a5,15
800026c0:	fae7fce3          	bleu	a4,a5,80002678 <prvInitialiseTCBVariables+0x30>
800026c4:	0080006f          	j	800026cc <prvInitialiseTCBVariables+0x84>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2845
		{
			break;
800026c8:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2855
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
800026cc:	fdc42783          	lw	a5,-36(s0)
800026d0:	040781a3          	sb	zero,67(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2859

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
800026d4:	fd442703          	lw	a4,-44(s0)
800026d8:	00400793          	li	a5,4
800026dc:	00e7f663          	bleu	a4,a5,800026e8 <prvInitialiseTCBVariables+0xa0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2861
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
800026e0:	00400793          	li	a5,4
800026e4:	fcf42a23          	sw	a5,-44(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2868
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
800026e8:	fdc42783          	lw	a5,-36(s0)
800026ec:	fd442703          	lw	a4,-44(s0)
800026f0:	02e7a623          	sw	a4,44(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2871
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
800026f4:	fdc42783          	lw	a5,-36(s0)
800026f8:	fd442703          	lw	a4,-44(s0)
800026fc:	04e7a823          	sw	a4,80(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2872
		pxTCB->uxMutexesHeld = 0;
80002700:	fdc42783          	lw	a5,-36(s0)
80002704:	0407aa23          	sw	zero,84(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2876
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
80002708:	fdc42783          	lw	a5,-36(s0)
8000270c:	00478793          	addi	a5,a5,4
80002710:	00078513          	mv	a0,a5
80002714:	be4ff0ef          	jal	ra,80001af8 <vListInitialiseItem>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2877
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
80002718:	fdc42783          	lw	a5,-36(s0)
8000271c:	01878793          	addi	a5,a5,24
80002720:	00078513          	mv	a0,a5
80002724:	bd4ff0ef          	jal	ra,80001af8 <vListInitialiseItem>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2881

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
80002728:	fdc42783          	lw	a5,-36(s0)
8000272c:	fdc42703          	lw	a4,-36(s0)
80002730:	00e7a823          	sw	a4,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2884

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80002734:	00500713          	li	a4,5
80002738:	fd442783          	lw	a5,-44(s0)
8000273c:	40f70733          	sub	a4,a4,a5
80002740:	fdc42783          	lw	a5,-36(s0)
80002744:	00e7ac23          	sw	a4,24(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2885
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
80002748:	fdc42783          	lw	a5,-36(s0)
8000274c:	fdc42703          	lw	a4,-36(s0)
80002750:	02e7a223          	sw	a4,36(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2889

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
80002754:	fdc42783          	lw	a5,-36(s0)
80002758:	0407a223          	sw	zero,68(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2927
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
8000275c:	fdc42783          	lw	a5,-36(s0)
80002760:	0407ac23          	sw	zero,88(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2928
		pxTCB->eNotifyState = eNotWaitingNotification;
80002764:	fdc42783          	lw	a5,-36(s0)
80002768:	0407ae23          	sw	zero,92(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2938
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
8000276c:	00000013          	nop
80002770:	03c12083          	lw	ra,60(sp)
80002774:	03812403          	lw	s0,56(sp)
80002778:	04010113          	addi	sp,sp,64
8000277c:	00008067          	ret

80002780 <prvInitialiseTaskLists>:
prvInitialiseTaskLists():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2997

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
80002780:	fe010113          	addi	sp,sp,-32
80002784:	00112e23          	sw	ra,28(sp)
80002788:	00812c23          	sw	s0,24(sp)
8000278c:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
80002790:	fe042623          	sw	zero,-20(s0)
80002794:	0380006f          	j	800027cc <prvInitialiseTaskLists+0x4c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3002 (discriminator 3)
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
80002798:	fec42703          	lw	a4,-20(s0)
8000279c:	00070793          	mv	a5,a4
800027a0:	00279793          	slli	a5,a5,0x2
800027a4:	00e787b3          	add	a5,a5,a4
800027a8:	00279793          	slli	a5,a5,0x2
800027ac:	8001f737          	lui	a4,0x8001f
800027b0:	3e070713          	addi	a4,a4,992 # 8001f3e0 <__stack_top+0xfffdeb90>
800027b4:	00e787b3          	add	a5,a5,a4
800027b8:	00078513          	mv	a0,a5
800027bc:	ad8ff0ef          	jal	ra,80001a94 <vListInitialise>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 3)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
800027c0:	fec42783          	lw	a5,-20(s0)
800027c4:	00178793          	addi	a5,a5,1
800027c8:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 1)
800027cc:	fec42703          	lw	a4,-20(s0)
800027d0:	00400793          	li	a5,4
800027d4:	fce7f2e3          	bleu	a4,a5,80002798 <prvInitialiseTaskLists+0x18>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3005
	}

	vListInitialise( &xDelayedTaskList1 );
800027d8:	8001f7b7          	lui	a5,0x8001f
800027dc:	44478513          	addi	a0,a5,1092 # 8001f444 <__stack_top+0xfffdebf4>
800027e0:	ab4ff0ef          	jal	ra,80001a94 <vListInitialise>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3006
	vListInitialise( &xDelayedTaskList2 );
800027e4:	8001f7b7          	lui	a5,0x8001f
800027e8:	45878513          	addi	a0,a5,1112 # 8001f458 <__stack_top+0xfffdec08>
800027ec:	aa8ff0ef          	jal	ra,80001a94 <vListInitialise>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3007
	vListInitialise( &xPendingReadyList );
800027f0:	8001f7b7          	lui	a5,0x8001f
800027f4:	46c78513          	addi	a0,a5,1132 # 8001f46c <__stack_top+0xfffdec1c>
800027f8:	a9cff0ef          	jal	ra,80001a94 <vListInitialise>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3011

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
800027fc:	8001f7b7          	lui	a5,0x8001f
80002800:	48078513          	addi	a0,a5,1152 # 8001f480 <__stack_top+0xfffdec30>
80002804:	a90ff0ef          	jal	ra,80001a94 <vListInitialise>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3017
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
80002808:	8001f7b7          	lui	a5,0x8001f
8000280c:	49478513          	addi	a0,a5,1172 # 8001f494 <__stack_top+0xfffdec44>
80002810:	a84ff0ef          	jal	ra,80001a94 <vListInitialise>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3023
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
80002814:	8001f737          	lui	a4,0x8001f
80002818:	44470713          	addi	a4,a4,1092 # 8001f444 <__stack_top+0xfffdebf4>
8000281c:	92e1a823          	sw	a4,-1744(gp) # 800063a0 <pxDelayedTaskList>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3024
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
80002820:	8001f737          	lui	a4,0x8001f
80002824:	45870713          	addi	a4,a4,1112 # 8001f458 <__stack_top+0xfffdec08>
80002828:	92e1aa23          	sw	a4,-1740(gp) # 800063a4 <pxOverflowDelayedTaskList>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3025
}
8000282c:	00000013          	nop
80002830:	01c12083          	lw	ra,28(sp)
80002834:	01812403          	lw	s0,24(sp)
80002838:	02010113          	addi	sp,sp,32
8000283c:	00008067          	ret

80002840 <prvCheckTasksWaitingTermination>:
prvCheckTasksWaitingTermination():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3029
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
80002840:	fe010113          	addi	sp,sp,-32
80002844:	00112e23          	sw	ra,28(sp)
80002848:	00812c23          	sw	s0,24(sp)
8000284c:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
80002850:	0740006f          	j	800028c4 <prvCheckTasksWaitingTermination+0x84>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3038
		{
			vTaskSuspendAll();
80002854:	929ff0ef          	jal	ra,8000217c <vTaskSuspendAll>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3040
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
80002858:	8001f7b7          	lui	a5,0x8001f
8000285c:	4807a783          	lw	a5,1152(a5) # 8001f480 <__stack_top+0xfffdec30>
80002860:	0017b793          	seqz	a5,a5
80002864:	0ff7f793          	andi	a5,a5,255
80002868:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3042
			}
			( void ) xTaskResumeAll();
8000286c:	939ff0ef          	jal	ra,800021a4 <xTaskResumeAll>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3044

			if( xListIsEmpty == pdFALSE )
80002870:	fec42783          	lw	a5,-20(s0)
80002874:	04079863          	bnez	a5,800028c4 <prvCheckTasksWaitingTermination+0x84>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3048
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
80002878:	d3dfe0ef          	jal	ra,800015b4 <vPortEnterCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3050
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
8000287c:	8001f7b7          	lui	a5,0x8001f
80002880:	48078793          	addi	a5,a5,1152 # 8001f480 <__stack_top+0xfffdec30>
80002884:	00c7a783          	lw	a5,12(a5)
80002888:	00c7a783          	lw	a5,12(a5)
8000288c:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3051
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80002890:	fe842783          	lw	a5,-24(s0)
80002894:	00478793          	addi	a5,a5,4
80002898:	00078513          	mv	a0,a5
8000289c:	be0ff0ef          	jal	ra,80001c7c <uxListRemove>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3052
					--uxCurrentNumberOfTasks;
800028a0:	93c1a783          	lw	a5,-1732(gp) # 800063ac <uxCurrentNumberOfTasks>
800028a4:	fff78713          	addi	a4,a5,-1
800028a8:	92e1ae23          	sw	a4,-1732(gp) # 800063ac <uxCurrentNumberOfTasks>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3053
					--uxTasksDeleted;
800028ac:	9381a783          	lw	a5,-1736(gp) # 800063a8 <uxTasksDeleted>
800028b0:	fff78713          	addi	a4,a5,-1
800028b4:	92e1ac23          	sw	a4,-1736(gp) # 800063a8 <uxTasksDeleted>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3055
				}
				taskEXIT_CRITICAL();
800028b8:	d31fe0ef          	jal	ra,800015e8 <vPortExitCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3057

				prvDeleteTCB( pxTCB );
800028bc:	fe842503          	lw	a0,-24(s0)
800028c0:	168000ef          	jal	ra,80002a28 <prvDeleteTCB>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
800028c4:	9381a783          	lw	a5,-1736(gp) # 800063a8 <uxTasksDeleted>
800028c8:	f80796e3          	bnez	a5,80002854 <prvCheckTasksWaitingTermination+0x14>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3066
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
800028cc:	00000013          	nop
800028d0:	01c12083          	lw	ra,28(sp)
800028d4:	01812403          	lw	s0,24(sp)
800028d8:	02010113          	addi	sp,sp,32
800028dc:	00008067          	ret

800028e0 <prvAddCurrentTaskToDelayedList>:
prvAddCurrentTaskToDelayedList():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3070
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
800028e0:	fe010113          	addi	sp,sp,-32
800028e4:	00112e23          	sw	ra,28(sp)
800028e8:	00812c23          	sw	s0,24(sp)
800028ec:	02010413          	addi	s0,sp,32
800028f0:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3072
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
800028f4:	92c1a783          	lw	a5,-1748(gp) # 8000639c <pxCurrentTCB>
800028f8:	fec42703          	lw	a4,-20(s0)
800028fc:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3074

	if( xTimeToWake < xTickCount )
80002900:	9401a783          	lw	a5,-1728(gp) # 800063b0 <xTickCount>
80002904:	fec42703          	lw	a4,-20(s0)
80002908:	02f77063          	bleu	a5,a4,80002928 <prvAddCurrentTaskToDelayedList+0x48>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3077
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
8000290c:	9341a703          	lw	a4,-1740(gp) # 800063a4 <pxOverflowDelayedTaskList>
80002910:	92c1a783          	lw	a5,-1748(gp) # 8000639c <pxCurrentTCB>
80002914:	00478793          	addi	a5,a5,4
80002918:	00078593          	mv	a1,a5
8000291c:	00070513          	mv	a0,a4
80002920:	a88ff0ef          	jal	ra,80001ba8 <vListInsert>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
80002924:	0300006f          	j	80002954 <prvAddCurrentTaskToDelayedList+0x74>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3082
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80002928:	9301a703          	lw	a4,-1744(gp) # 800063a0 <pxDelayedTaskList>
8000292c:	92c1a783          	lw	a5,-1748(gp) # 8000639c <pxCurrentTCB>
80002930:	00478793          	addi	a5,a5,4
80002934:	00078593          	mv	a1,a5
80002938:	00070513          	mv	a0,a4
8000293c:	a6cff0ef          	jal	ra,80001ba8 <vListInsert>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3087
		if( xTimeToWake < xNextTaskUnblockTime )
80002940:	95c1a783          	lw	a5,-1700(gp) # 800063cc <xNextTaskUnblockTime>
80002944:	fec42703          	lw	a4,-20(s0)
80002948:	00f77663          	bleu	a5,a4,80002954 <prvAddCurrentTaskToDelayedList+0x74>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3089
			xNextTaskUnblockTime = xTimeToWake;
8000294c:	fec42703          	lw	a4,-20(s0)
80002950:	94e1ae23          	sw	a4,-1700(gp) # 800063cc <xNextTaskUnblockTime>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
}
80002954:	00000013          	nop
80002958:	01c12083          	lw	ra,28(sp)
8000295c:	01812403          	lw	s0,24(sp)
80002960:	02010113          	addi	sp,sp,32
80002964:	00008067          	ret

80002968 <prvAllocateTCBAndStack>:
prvAllocateTCBAndStack():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3100
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
80002968:	fd010113          	addi	sp,sp,-48
8000296c:	02112623          	sw	ra,44(sp)
80002970:	02812423          	sw	s0,40(sp)
80002974:	03010413          	addi	s0,sp,48
80002978:	00050793          	mv	a5,a0
8000297c:	fcb42c23          	sw	a1,-40(s0)
80002980:	fcf41f23          	sh	a5,-34(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80002984:	fd842783          	lw	a5,-40(s0)
80002988:	00079e63          	bnez	a5,800029a4 <prvAllocateTCBAndStack+0x3c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 1)
8000298c:	fde45783          	lhu	a5,-34(s0)
80002990:	00279793          	slli	a5,a5,0x2
80002994:	00078513          	mv	a0,a5
80002998:	8b5fe0ef          	jal	ra,8000124c <pvPortMalloc>
8000299c:	00050793          	mv	a5,a0
800029a0:	0080006f          	j	800029a8 <prvAllocateTCBAndStack+0x40>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 2)
800029a4:	fd842783          	lw	a5,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 4)
800029a8:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3134 (discriminator 4)

		if( pxStack != NULL )
800029ac:	fe842783          	lw	a5,-24(s0)
800029b0:	02078a63          	beqz	a5,800029e4 <prvAllocateTCBAndStack+0x7c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3138
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
800029b4:	06000513          	li	a0,96
800029b8:	895fe0ef          	jal	ra,8000124c <pvPortMalloc>
800029bc:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3140

			if( pxNewTCB != NULL )
800029c0:	fec42783          	lw	a5,-20(s0)
800029c4:	00078a63          	beqz	a5,800029d8 <prvAllocateTCBAndStack+0x70>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3143
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
800029c8:	fec42783          	lw	a5,-20(s0)
800029cc:	fe842703          	lw	a4,-24(s0)
800029d0:	02e7a823          	sw	a4,48(a5)
800029d4:	0140006f          	j	800029e8 <prvAllocateTCBAndStack+0x80>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3149
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
800029d8:	fe842503          	lw	a0,-24(s0)
800029dc:	a4dfe0ef          	jal	ra,80001428 <vPortFree>
800029e0:	0080006f          	j	800029e8 <prvAllocateTCBAndStack+0x80>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3154
			}
		}
		else
		{
			pxNewTCB = NULL;
800029e4:	fe042623          	sw	zero,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3159
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
800029e8:	fec42783          	lw	a5,-20(s0)
800029ec:	02078263          	beqz	a5,80002a10 <prvAllocateTCBAndStack+0xa8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3165
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
800029f0:	fec42783          	lw	a5,-20(s0)
800029f4:	0307a703          	lw	a4,48(a5)
800029f8:	fde45783          	lhu	a5,-34(s0)
800029fc:	00279793          	slli	a5,a5,0x2
80002a00:	00078613          	mv	a2,a5
80002a04:	0a500593          	li	a1,165
80002a08:	00070513          	mv	a0,a4
80002a0c:	b08ff0ef          	jal	ra,80001d14 <memset>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3170
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
80002a10:	fec42783          	lw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3171
}
80002a14:	00078513          	mv	a0,a5
80002a18:	02c12083          	lw	ra,44(sp)
80002a1c:	02812403          	lw	s0,40(sp)
80002a20:	03010113          	addi	sp,sp,48
80002a24:	00008067          	ret

80002a28 <prvDeleteTCB>:
prvDeleteTCB():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3310
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
80002a28:	fe010113          	addi	sp,sp,-32
80002a2c:	00112e23          	sw	ra,28(sp)
80002a30:	00812c23          	sw	s0,24(sp)
80002a34:	02010413          	addi	s0,sp,32
80002a38:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3335
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
80002a3c:	fec42783          	lw	a5,-20(s0)
80002a40:	0307a783          	lw	a5,48(a5)
80002a44:	00078513          	mv	a0,a5
80002a48:	9e1fe0ef          	jal	ra,80001428 <vPortFree>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3339
		}
		#endif

		vPortFree( pxTCB );
80002a4c:	fec42503          	lw	a0,-20(s0)
80002a50:	9d9fe0ef          	jal	ra,80001428 <vPortFree>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3340
	}
80002a54:	00000013          	nop
80002a58:	01c12083          	lw	ra,28(sp)
80002a5c:	01812403          	lw	s0,24(sp)
80002a60:	02010113          	addi	sp,sp,32
80002a64:	00008067          	ret

80002a68 <prvResetNextTaskUnblockTime>:
prvResetNextTaskUnblockTime():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3346

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
80002a68:	fe010113          	addi	sp,sp,-32
80002a6c:	00812e23          	sw	s0,28(sp)
80002a70:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80002a74:	9301a783          	lw	a5,-1744(gp) # 800063a0 <pxDelayedTaskList>
80002a78:	0007a783          	lw	a5,0(a5)
80002a7c:	00079663          	bnez	a5,80002a88 <prvResetNextTaskUnblockTime+0x20>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 1)
80002a80:	00100793          	li	a5,1
80002a84:	0080006f          	j	80002a8c <prvResetNextTaskUnblockTime+0x24>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 2)
80002a88:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 4)
80002a8c:	00078863          	beqz	a5,80002a9c <prvResetNextTaskUnblockTime+0x34>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3355
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
80002a90:	fff00713          	li	a4,-1
80002a94:	94e1ae23          	sw	a4,-1700(gp) # 800063cc <xNextTaskUnblockTime>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
80002a98:	0200006f          	j	80002ab8 <prvResetNextTaskUnblockTime+0x50>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3363
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80002a9c:	9301a783          	lw	a5,-1744(gp) # 800063a0 <pxDelayedTaskList>
80002aa0:	00c7a783          	lw	a5,12(a5)
80002aa4:	00c7a783          	lw	a5,12(a5)
80002aa8:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3364
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
80002aac:	fec42783          	lw	a5,-20(s0)
80002ab0:	0047a703          	lw	a4,4(a5)
80002ab4:	94e1ae23          	sw	a4,-1700(gp) # 800063cc <xNextTaskUnblockTime>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
}
80002ab8:	00000013          	nop
80002abc:	01c12403          	lw	s0,28(sp)
80002ac0:	02010113          	addi	sp,sp,32
80002ac4:	00008067          	ret

80002ac8 <xTaskGetCurrentTaskHandle>:
xTaskGetCurrentTaskHandle():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3372
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
80002ac8:	fe010113          	addi	sp,sp,-32
80002acc:	00812e23          	sw	s0,28(sp)
80002ad0:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3378
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
80002ad4:	92c1a783          	lw	a5,-1748(gp) # 8000639c <pxCurrentTCB>
80002ad8:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3380

		return xReturn;
80002adc:	fec42783          	lw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3381
	}
80002ae0:	00078513          	mv	a0,a5
80002ae4:	01c12403          	lw	s0,28(sp)
80002ae8:	02010113          	addi	sp,sp,32
80002aec:	00008067          	ret

80002af0 <PLIC_EnableIRQ>:
PLIC_EnableIRQ():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:154
{
80002af0:	fd010113          	addi	sp,sp,-48
80002af4:	02812623          	sw	s0,44(sp)
80002af8:	03010413          	addi	s0,sp,48
80002afc:	fca42e23          	sw	a0,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:155
    unsigned long hart_id = read_csr(mhartid);
80002b00:	f14027f3          	csrr	a5,mhartid
80002b04:	fef42623          	sw	a5,-20(s0)
80002b08:	fec42783          	lw	a5,-20(s0)
80002b0c:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:156
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80002b10:	40000737          	lui	a4,0x40000
80002b14:	fdc42783          	lw	a5,-36(s0)
80002b18:	0057d793          	srli	a5,a5,0x5
80002b1c:	fe842683          	lw	a3,-24(s0)
80002b20:	00569693          	slli	a3,a3,0x5
80002b24:	00f686b3          	add	a3,a3,a5
80002b28:	000017b7          	lui	a5,0x1
80002b2c:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80002b30:	00f687b3          	add	a5,a3,a5
80002b34:	00279793          	slli	a5,a5,0x2
80002b38:	00f707b3          	add	a5,a4,a5
80002b3c:	0007a783          	lw	a5,0(a5)
80002b40:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:157
    current |= (uint32_t)1 << (IRQn % 32);
80002b44:	fdc42783          	lw	a5,-36(s0)
80002b48:	01f7f793          	andi	a5,a5,31
80002b4c:	00100713          	li	a4,1
80002b50:	00f717b3          	sll	a5,a4,a5
80002b54:	fe442703          	lw	a4,-28(s0)
80002b58:	00f767b3          	or	a5,a4,a5
80002b5c:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:158
    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
80002b60:	40000737          	lui	a4,0x40000
80002b64:	fdc42783          	lw	a5,-36(s0)
80002b68:	0057d793          	srli	a5,a5,0x5
80002b6c:	fe842683          	lw	a3,-24(s0)
80002b70:	00569693          	slli	a3,a3,0x5
80002b74:	00f686b3          	add	a3,a3,a5
80002b78:	000017b7          	lui	a5,0x1
80002b7c:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80002b80:	00f687b3          	add	a5,a3,a5
80002b84:	00279793          	slli	a5,a5,0x2
80002b88:	00f707b3          	add	a5,a4,a5
80002b8c:	fe442703          	lw	a4,-28(s0)
80002b90:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:159
}
80002b94:	00000013          	nop
80002b98:	02c12403          	lw	s0,44(sp)
80002b9c:	03010113          	addi	sp,sp,48
80002ba0:	00008067          	ret

80002ba4 <PLIC_SetPriority>:
PLIC_SetPriority():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:188
{
80002ba4:	fe010113          	addi	sp,sp,-32
80002ba8:	00812e23          	sw	s0,28(sp)
80002bac:	02010413          	addi	s0,sp,32
80002bb0:	fea42623          	sw	a0,-20(s0)
80002bb4:	feb42423          	sw	a1,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:189
    PLIC->SOURCE_PRIORITY[IRQn] = priority;
80002bb8:	40000737          	lui	a4,0x40000
80002bbc:	fec42783          	lw	a5,-20(s0)
80002bc0:	00279793          	slli	a5,a5,0x2
80002bc4:	00f707b3          	add	a5,a4,a5
80002bc8:	fe842703          	lw	a4,-24(s0)
80002bcc:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:190
}
80002bd0:	00000013          	nop
80002bd4:	01c12403          	lw	s0,28(sp)
80002bd8:	02010113          	addi	sp,sp,32
80002bdc:	00008067          	ret

80002be0 <Chronos_init>:
Chronos_init():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:27
extern volatile unsigned int SendingQueue_front;
extern volatile unsigned int SendingQueue_tail;

////////////////////////////////////////////////////////////
// Initialize Chronos stuff
void Chronos_init(){
80002be0:	ff010113          	addi	sp,sp,-16
80002be4:	00112623          	sw	ra,12(sp)
80002be8:	00812423          	sw	s0,8(sp)
80002bec:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:29
    //Informs the Router this tile ID, that is provided by Harness
    HW_set_32bit_reg(ROUTER_BASE, HW_get_32bit_reg(MY_ID)); 
80002bf0:	900007b7          	lui	a5,0x90000
80002bf4:	ffc78513          	addi	a0,a5,-4 # 8ffffffc <__stack_top+0xffbf7ac>
80002bf8:	b08fe0ef          	jal	ra,80000f00 <HW_get_32bit_reg>
80002bfc:	00050793          	mv	a5,a0
80002c00:	00078593          	mv	a1,a5
80002c04:	50000537          	lui	a0,0x50000
80002c08:	af0fe0ef          	jal	ra,80000ef8 <HW_set_32bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:32
    
    // Reads this processor address, calculated by the router
    ProcessorAddr = HW_get_32bit_reg(ROUTER_BASE);
80002c0c:	50000537          	lui	a0,0x50000
80002c10:	af0fe0ef          	jal	ra,80000f00 <HW_get_32bit_reg>
80002c14:	00050713          	mv	a4,a0
80002c18:	800217b7          	lui	a5,0x80021
80002c1c:	84e7a023          	sw	a4,-1984(a5) # 80020840 <__stack_top+0xfffdfff0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:35

    // Informs the PRINTER this tile address
    HW_set_32bit_reg(PRINTER_CHAR, getXpos(ProcessorAddr));
80002c20:	800217b7          	lui	a5,0x80021
80002c24:	8407a783          	lw	a5,-1984(a5) # 80020840 <__stack_top+0xfffdfff0>
80002c28:	00078513          	mv	a0,a5
80002c2c:	1e0000ef          	jal	ra,80002e0c <getXpos>
80002c30:	00050793          	mv	a5,a0
80002c34:	00078593          	mv	a1,a5
80002c38:	500007b7          	lui	a5,0x50000
80002c3c:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002c40:	ab8fe0ef          	jal	ra,80000ef8 <HW_set_32bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:36
    HW_set_32bit_reg(PRINTER_CHAR, getYpos(ProcessorAddr));
80002c44:	800217b7          	lui	a5,0x80021
80002c48:	8407a783          	lw	a5,-1984(a5) # 80020840 <__stack_top+0xfffdfff0>
80002c4c:	00078513          	mv	a0,a5
80002c50:	1e8000ef          	jal	ra,80002e38 <getYpos>
80002c54:	00050793          	mv	a5,a0
80002c58:	00078593          	mv	a1,a5
80002c5c:	500007b7          	lui	a5,0x50000
80002c60:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002c64:	a94fe0ef          	jal	ra,80000ef8 <HW_set_32bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:39

    // Enables interruption from NI
    NI_enable_irq(TX_RX);
80002c68:	000077b7          	lui	a5,0x7
80002c6c:	77778513          	addi	a0,a5,1911 # 7777 <HEAP_SIZE-0x8889>
80002c70:	23c000ef          	jal	ra,80002eac <NI_enable_irq>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:42

    // Informs the NI the address to store incoming packets
    HW_set_32bit_reg(NI_ADDR, (unsigned int)&incommingPacket.header);
80002c74:	8001f7b7          	lui	a5,0x8001f
80002c78:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
80002c7c:	00078593          	mv	a1,a5
80002c80:	500007b7          	lui	a5,0x50000
80002c84:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
80002c88:	a70fe0ef          	jal	ra,80000ef8 <HW_set_32bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:45
    
    // Initialize the TaskList
    API_TaskListInit();
80002c8c:	608020ef          	jal	ra,80005294 <API_TaskListInit>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:48

    // Initialize the Message & Service PIPE
    API_PipeInitialization();
80002c90:	2fd020ef          	jal	ra,8000578c <API_PipeInitialization>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:49
    SendingQueue_front = 0;
80002c94:	8001f7b7          	lui	a5,0x8001f
80002c98:	6007a423          	sw	zero,1544(a5) # 8001f608 <__stack_top+0xfffdedb8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:50
    SendingQueue_tail = 0;
80002c9c:	8001f7b7          	lui	a5,0x8001f
80002ca0:	5e07a823          	sw	zero,1520(a5) # 8001f5f0 <__stack_top+0xfffdeda0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:52

    return;
80002ca4:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:53
}
80002ca8:	00c12083          	lw	ra,12(sp)
80002cac:	00812403          	lw	s0,8(sp)
80002cb0:	01010113          	addi	sp,sp,16
80002cb4:	00008067          	ret

80002cb8 <prints>:
prints():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:57

////////////////////////////////////////////////////////////
// Prints a string
void prints(char *text) {
80002cb8:	fd010113          	addi	sp,sp,-48
80002cbc:	02112623          	sw	ra,44(sp)
80002cc0:	02812423          	sw	s0,40(sp)
80002cc4:	03010413          	addi	s0,sp,48
80002cc8:	fca42e23          	sw	a0,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:58
    int i = 0;
80002ccc:	fe042623          	sw	zero,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:60 (discriminator 1)
    do {
        HW_set_32bit_reg(PRINTER_CHAR, text[i]);
80002cd0:	fec42783          	lw	a5,-20(s0)
80002cd4:	fdc42703          	lw	a4,-36(s0)
80002cd8:	00f707b3          	add	a5,a4,a5
80002cdc:	00078783          	lb	a5,0(a5)
80002ce0:	00078593          	mv	a1,a5
80002ce4:	500007b7          	lui	a5,0x50000
80002ce8:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002cec:	a0cfe0ef          	jal	ra,80000ef8 <HW_set_32bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:61 (discriminator 1)
        i++;
80002cf0:	fec42783          	lw	a5,-20(s0)
80002cf4:	00178793          	addi	a5,a5,1
80002cf8:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:62 (discriminator 1)
    } while (text[i - 1] != '\0');
80002cfc:	fec42783          	lw	a5,-20(s0)
80002d00:	fff78793          	addi	a5,a5,-1
80002d04:	fdc42703          	lw	a4,-36(s0)
80002d08:	00f707b3          	add	a5,a4,a5
80002d0c:	00078783          	lb	a5,0(a5)
80002d10:	fc0790e3          	bnez	a5,80002cd0 <prints+0x18>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:63
    return;
80002d14:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:64
}
80002d18:	02c12083          	lw	ra,44(sp)
80002d1c:	02812403          	lw	s0,40(sp)
80002d20:	03010113          	addi	sp,sp,48
80002d24:	00008067          	ret

80002d28 <printi>:
printi():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:68

////////////////////////////////////////////////////////////
// Prints an integer
void printi(int value) {
80002d28:	fe010113          	addi	sp,sp,-32
80002d2c:	00112e23          	sw	ra,28(sp)
80002d30:	00812c23          	sw	s0,24(sp)
80002d34:	02010413          	addi	s0,sp,32
80002d38:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:69
    HW_set_32bit_reg(PRINTER_INT, value);
80002d3c:	fec42783          	lw	a5,-20(s0)
80002d40:	00078593          	mv	a1,a5
80002d44:	500007b7          	lui	a5,0x50000
80002d48:	02478513          	addi	a0,a5,36 # 50000024 <RAM_SIZE+0x4ff80024>
80002d4c:	9acfe0ef          	jal	ra,80000ef8 <HW_set_32bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:70
    return;
80002d50:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:71
}
80002d54:	01c12083          	lw	ra,28(sp)
80002d58:	01812403          	lw	s0,24(sp)
80002d5c:	02010113          	addi	sp,sp,32
80002d60:	00008067          	ret

80002d64 <printsv>:
printsv():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:75

////////////////////////////////////////////////////////////
// Prints a string followed by a integer
void printsv(char *text1, int value1) {
80002d64:	fe010113          	addi	sp,sp,-32
80002d68:	00112e23          	sw	ra,28(sp)
80002d6c:	00812c23          	sw	s0,24(sp)
80002d70:	02010413          	addi	s0,sp,32
80002d74:	fea42623          	sw	a0,-20(s0)
80002d78:	feb42423          	sw	a1,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:77
    //vPortEnterCritical();
        prints(text1);
80002d7c:	fec42503          	lw	a0,-20(s0)
80002d80:	f39ff0ef          	jal	ra,80002cb8 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:78
        printi(value1);
80002d84:	fe842503          	lw	a0,-24(s0)
80002d88:	fa1ff0ef          	jal	ra,80002d28 <printi>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:79
        prints("\n");
80002d8c:	800067b7          	lui	a5,0x80006
80002d90:	f5c78513          	addi	a0,a5,-164 # 80005f5c <__stack_top+0xfffc570c>
80002d94:	f25ff0ef          	jal	ra,80002cb8 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:81
    //vPortExitCritical();
    return;
80002d98:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:82
}
80002d9c:	01c12083          	lw	ra,28(sp)
80002da0:	01812403          	lw	s0,24(sp)
80002da4:	02010113          	addi	sp,sp,32
80002da8:	00008067          	ret

80002dac <printsvsv>:
printsvsv():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:86

////////////////////////////////////////////////////////////
// Prints two strings and two integers interspersed
void printsvsv(char *text1, int value1, char *text2, int value2) {
80002dac:	fe010113          	addi	sp,sp,-32
80002db0:	00112e23          	sw	ra,28(sp)
80002db4:	00812c23          	sw	s0,24(sp)
80002db8:	02010413          	addi	s0,sp,32
80002dbc:	fea42623          	sw	a0,-20(s0)
80002dc0:	feb42423          	sw	a1,-24(s0)
80002dc4:	fec42223          	sw	a2,-28(s0)
80002dc8:	fed42023          	sw	a3,-32(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:88
    //vPortEnterCritical();
        prints(text1);
80002dcc:	fec42503          	lw	a0,-20(s0)
80002dd0:	ee9ff0ef          	jal	ra,80002cb8 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:89
        printi(value1);
80002dd4:	fe842503          	lw	a0,-24(s0)
80002dd8:	f51ff0ef          	jal	ra,80002d28 <printi>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:90
        prints(text2);
80002ddc:	fe442503          	lw	a0,-28(s0)
80002de0:	ed9ff0ef          	jal	ra,80002cb8 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:91
        printi(value2);
80002de4:	fe042503          	lw	a0,-32(s0)
80002de8:	f41ff0ef          	jal	ra,80002d28 <printi>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:92
        prints("\n");
80002dec:	800067b7          	lui	a5,0x80006
80002df0:	f5c78513          	addi	a0,a5,-164 # 80005f5c <__stack_top+0xfffc570c>
80002df4:	ec5ff0ef          	jal	ra,80002cb8 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:94
    //vPortExitCritical();
    return;
80002df8:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:95
}
80002dfc:	01c12083          	lw	ra,28(sp)
80002e00:	01812403          	lw	s0,24(sp)
80002e04:	02010113          	addi	sp,sp,32
80002e08:	00008067          	ret

80002e0c <getXpos>:
getXpos():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:99

////////////////////////////////////////////////////////////
// Gets the X coordinate from the address
unsigned int getXpos(unsigned int addr) { return ((addr & 0x0000FF00) >> 8); }
80002e0c:	fe010113          	addi	sp,sp,-32
80002e10:	00812e23          	sw	s0,28(sp)
80002e14:	02010413          	addi	s0,sp,32
80002e18:	fea42623          	sw	a0,-20(s0)
80002e1c:	fec42783          	lw	a5,-20(s0)
80002e20:	0087d793          	srli	a5,a5,0x8
80002e24:	0ff7f793          	andi	a5,a5,255
80002e28:	00078513          	mv	a0,a5
80002e2c:	01c12403          	lw	s0,28(sp)
80002e30:	02010113          	addi	sp,sp,32
80002e34:	00008067          	ret

80002e38 <getYpos>:
getYpos():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:103

////////////////////////////////////////////////////////////
// Gets the Y coordinate from the address
unsigned int getYpos(unsigned int addr) { return (addr & 0x000000FF); }
80002e38:	fe010113          	addi	sp,sp,-32
80002e3c:	00812e23          	sw	s0,28(sp)
80002e40:	02010413          	addi	s0,sp,32
80002e44:	fea42623          	sw	a0,-20(s0)
80002e48:	fec42783          	lw	a5,-20(s0)
80002e4c:	0ff7f793          	andi	a5,a5,255
80002e50:	00078513          	mv	a0,a5
80002e54:	01c12403          	lw	s0,28(sp)
80002e58:	02010113          	addi	sp,sp,32
80002e5c:	00008067          	ret

80002e60 <SendRaw>:
SendRaw():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:107

///////////////////////////////////////////////////////////////////
// Configure the NI to transmitt a given packet
void SendRaw(unsigned int addr) {
80002e60:	fe010113          	addi	sp,sp,-32
80002e64:	00112e23          	sw	ra,28(sp)
80002e68:	00812c23          	sw	s0,24(sp)
80002e6c:	02010413          	addi	s0,sp,32
80002e70:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:108
    HW_set_32bit_reg(NI_ADDR, addr);
80002e74:	fec42583          	lw	a1,-20(s0)
80002e78:	500007b7          	lui	a5,0x50000
80002e7c:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
80002e80:	878fe0ef          	jal	ra,80000ef8 <HW_set_32bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:109
    HW_set_32bit_reg(NI_TX, TX);
80002e84:	000027b7          	lui	a5,0x2
80002e88:	22278593          	addi	a1,a5,546 # 2222 <HEAP_SIZE-0xddde>
80002e8c:	500007b7          	lui	a5,0x50000
80002e90:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80002e94:	864fe0ef          	jal	ra,80000ef8 <HW_set_32bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:110
    return;
80002e98:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:111
}
80002e9c:	01c12083          	lw	ra,28(sp)
80002ea0:	01812403          	lw	s0,24(sp)
80002ea4:	02010113          	addi	sp,sp,32
80002ea8:	00008067          	ret

80002eac <NI_enable_irq>:
NI_enable_irq():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:115

////////////////////////////////////////////////////////////
// Enables interruptions incomming from NI
void NI_enable_irq(int which){
80002eac:	fe010113          	addi	sp,sp,-32
80002eb0:	00112e23          	sw	ra,28(sp)
80002eb4:	00812c23          	sw	s0,24(sp)
80002eb8:	02010413          	addi	s0,sp,32
80002ebc:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:116
	if (which == TX || which == TX_RX){
80002ec0:	fec42703          	lw	a4,-20(s0)
80002ec4:	000027b7          	lui	a5,0x2
80002ec8:	22278793          	addi	a5,a5,546 # 2222 <HEAP_SIZE-0xddde>
80002ecc:	00f70a63          	beq	a4,a5,80002ee0 <NI_enable_irq+0x34>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:116 (discriminator 1)
80002ed0:	fec42703          	lw	a4,-20(s0)
80002ed4:	000077b7          	lui	a5,0x7
80002ed8:	77778793          	addi	a5,a5,1911 # 7777 <HEAP_SIZE-0x8889>
80002edc:	00f71c63          	bne	a4,a5,80002ef4 <NI_enable_irq+0x48>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:117
        PLIC_EnableIRQ(NI_TX_IRQn);
80002ee0:	00100513          	li	a0,1
80002ee4:	c0dff0ef          	jal	ra,80002af0 <PLIC_EnableIRQ>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:118
        PLIC_SetPriority(NI_TX_IRQn, 1);
80002ee8:	00100593          	li	a1,1
80002eec:	00100513          	li	a0,1
80002ef0:	cb5ff0ef          	jal	ra,80002ba4 <PLIC_SetPriority>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:120
    }
    if (which == RX || which == TX_RX){
80002ef4:	fec42703          	lw	a4,-20(s0)
80002ef8:	000037b7          	lui	a5,0x3
80002efc:	33378793          	addi	a5,a5,819 # 3333 <HEAP_SIZE-0xcccd>
80002f00:	00f70a63          	beq	a4,a5,80002f14 <NI_enable_irq+0x68>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:120 (discriminator 1)
80002f04:	fec42703          	lw	a4,-20(s0)
80002f08:	000077b7          	lui	a5,0x7
80002f0c:	77778793          	addi	a5,a5,1911 # 7777 <HEAP_SIZE-0x8889>
80002f10:	00f71e63          	bne	a4,a5,80002f2c <NI_enable_irq+0x80>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:121
        PLIC_EnableIRQ(NI_RX_IRQn);
80002f14:	00200513          	li	a0,2
80002f18:	bd9ff0ef          	jal	ra,80002af0 <PLIC_EnableIRQ>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:122
        PLIC_SetPriority(NI_RX_IRQn, 1);
80002f1c:	00100593          	li	a1,1
80002f20:	00200513          	li	a0,2
80002f24:	c81ff0ef          	jal	ra,80002ba4 <PLIC_SetPriority>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:124
    }
    return;
80002f28:	00000013          	nop
80002f2c:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:125
}
80002f30:	01c12083          	lw	ra,28(sp)
80002f34:	01812403          	lw	s0,24(sp)
80002f38:	02010113          	addi	sp,sp,32
80002f3c:	00008067          	ret

80002f40 <External_1_IRQHandler>:
External_1_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:137
    return;
}

////////////////////////////////////////////////////////////
// Interruptions handler for TX
uint8_t External_1_IRQHandler(void){ 
80002f40:	ff010113          	addi	sp,sp,-16
80002f44:	00112623          	sw	ra,12(sp)
80002f48:	00812423          	sw	s0,8(sp)
80002f4c:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:138
    prints("INTERRUPTION TX\n");
80002f50:	800067b7          	lui	a5,0x80006
80002f54:	f6078513          	addi	a0,a5,-160 # 80005f60 <__stack_top+0xfffc5710>
80002f58:	d61ff0ef          	jal	ra,80002cb8 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:139
    API_ClearPipeSlot(SendingSlot);
80002f5c:	8001f7b7          	lui	a5,0x8001f
80002f60:	4a87a783          	lw	a5,1192(a5) # 8001f4a8 <__stack_top+0xfffdec58>
80002f64:	00078513          	mv	a0,a5
80002f68:	1f1020ef          	jal	ra,80005958 <API_ClearPipeSlot>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:140
    API_Try2Send();
80002f6c:	025000ef          	jal	ra,80003790 <API_Try2Send>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:142

    HW_set_32bit_reg(NI_TX, DONE);
80002f70:	000057b7          	lui	a5,0x5
80002f74:	55578593          	addi	a1,a5,1365 # 5555 <HEAP_SIZE-0xaaab>
80002f78:	500007b7          	lui	a5,0x50000
80002f7c:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80002f80:	f79fd0ef          	jal	ra,80000ef8 <HW_set_32bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:143
    return 0;
80002f84:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:144
}
80002f88:	00078513          	mv	a0,a5
80002f8c:	00c12083          	lw	ra,12(sp)
80002f90:	00812403          	lw	s0,8(sp)
80002f94:	01010113          	addi	sp,sp,16
80002f98:	00008067          	ret

80002f9c <External_2_IRQHandler>:
External_2_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:148

////////////////////////////////////////////////////////////
// Interruptions handler for RX
uint8_t External_2_IRQHandler(void){
80002f9c:	fe010113          	addi	sp,sp,-32
80002fa0:	00112e23          	sw	ra,28(sp)
80002fa4:	00812c23          	sw	s0,24(sp)
80002fa8:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:166
    // printsv("Flit 10: ", incommingPacket.flit10);
    // printsv("Flit 11: ", incommingPacket.flit11);
    // printsv("Flit 12: ", incommingPacket.flit12);


    switch (incommingPacket.service){
80002fac:	8001f7b7          	lui	a5,0x8001f
80002fb0:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
80002fb4:	0087a783          	lw	a5,8(a5)
80002fb8:	03300713          	li	a4,51
80002fbc:	12e78e63          	beq	a5,a4,800030f8 <External_2_IRQHandler+0x15c>
80002fc0:	03300713          	li	a4,51
80002fc4:	02f76a63          	bltu	a4,a5,80002ff8 <External_2_IRQHandler+0x5c>
80002fc8:	02000713          	li	a4,32
80002fcc:	2ce78463          	beq	a5,a4,80003294 <External_2_IRQHandler+0x2f8>
80002fd0:	02000713          	li	a4,32
80002fd4:	00f76863          	bltu	a4,a5,80002fe4 <External_2_IRQHandler+0x48>
80002fd8:	01000713          	li	a4,16
80002fdc:	22e78863          	beq	a5,a4,8000320c <External_2_IRQHandler+0x270>
80002fe0:	3a40006f          	j	80003384 <External_2_IRQHandler+0x3e8>
80002fe4:	02100713          	li	a4,33
80002fe8:	32e78663          	beq	a5,a4,80003314 <External_2_IRQHandler+0x378>
80002fec:	03000713          	li	a4,48
80002ff0:	06e78c63          	beq	a5,a4,80003068 <External_2_IRQHandler+0xcc>
80002ff4:	3900006f          	j	80003384 <External_2_IRQHandler+0x3e8>
80002ff8:	20000713          	li	a4,512
80002ffc:	02e78663          	beq	a5,a4,80003028 <External_2_IRQHandler+0x8c>
80003000:	20000713          	li	a4,512
80003004:	00f76863          	bltu	a4,a5,80003014 <External_2_IRQHandler+0x78>
80003008:	03500713          	li	a4,53
8000300c:	10e78a63          	beq	a5,a4,80003120 <External_2_IRQHandler+0x184>
80003010:	3740006f          	j	80003384 <External_2_IRQHandler+0x3e8>
80003014:	40000713          	li	a4,1024
80003018:	12e78863          	beq	a5,a4,80003148 <External_2_IRQHandler+0x1ac>
8000301c:	40100713          	li	a4,1025
80003020:	18e78e63          	beq	a5,a4,800031bc <External_2_IRQHandler+0x220>
80003024:	3600006f          	j	80003384 <External_2_IRQHandler+0x3e8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:170
        unsigned int aux;

        case REPOSITORY_APP_INFO: // When the repository informs the GM that exist a new Application available:
            API_AddApplication(incommingPacket.application_id,
80003028:	8001f7b7          	lui	a5,0x8001f
8000302c:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
80003030:	00c7a703          	lw	a4,12(a5)
80003034:	8001f7b7          	lui	a5,0x8001f
80003038:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
8000303c:	0107a583          	lw	a1,16(a5)
80003040:	8001f7b7          	lui	a5,0x8001f
80003044:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
80003048:	0147a603          	lw	a2,20(a5)
8000304c:	8001f7b7          	lui	a5,0x8001f
80003050:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
80003054:	0187a783          	lw	a5,24(a5)
80003058:	00078693          	mv	a3,a5
8000305c:	00070513          	mv	a0,a4
80003060:	154010ef          	jal	ra,800041b4 <API_AddApplication>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:174
                               incommingPacket.aplication_period, 
                               incommingPacket.application_executions, 
                               incommingPacket.application_n_tasks);
            break;
80003064:	3400006f          	j	800033a4 <External_2_IRQHandler+0x408>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:178
        
        case TASK_ALLOCATION_SEND: // When the GM asks one Slave to allocate one task
            // aux will receive the taskslot 
            aux = API_TaskAllocation(incommingPacket.task_id,
80003068:	8001f7b7          	lui	a5,0x8001f
8000306c:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
80003070:	00c7a503          	lw	a0,12(a5)
80003074:	8001f7b7          	lui	a5,0x8001f
80003078:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
8000307c:	0107a583          	lw	a1,16(a5)
80003080:	8001f7b7          	lui	a5,0x8001f
80003084:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
80003088:	0147a603          	lw	a2,20(a5)
8000308c:	8001f7b7          	lui	a5,0x8001f
80003090:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
80003094:	0187a683          	lw	a3,24(a5)
80003098:	8001f7b7          	lui	a5,0x8001f
8000309c:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
800030a0:	01c7a783          	lw	a5,28(a5)
800030a4:	00078713          	mv	a4,a5
800030a8:	398020ef          	jal	ra,80005440 <API_TaskAllocation>
800030ac:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:185
                                     incommingPacket.task_bss_size,
                                     incommingPacket.task_start_point,
                                     incommingPacket.task_app_id);

            // Informs the NI were to write the application
            HW_set_32bit_reg(NI_ADDR, TaskList[aux].taskAddr);
800030b0:	800207b7          	lui	a5,0x80020
800030b4:	fec42703          	lw	a4,-20(s0)
800030b8:	6b478693          	addi	a3,a5,1716 # 800206b4 <__stack_top+0xfffdfe64>
800030bc:	00070793          	mv	a5,a4
800030c0:	00479793          	slli	a5,a5,0x4
800030c4:	40e787b3          	sub	a5,a5,a4
800030c8:	00379793          	slli	a5,a5,0x3
800030cc:	00f687b3          	add	a5,a3,a5
800030d0:	01c7a783          	lw	a5,28(a5)
800030d4:	00078593          	mv	a1,a5
800030d8:	500007b7          	lui	a5,0x50000
800030dc:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
800030e0:	e19fd0ef          	jal	ra,80000ef8 <HW_set_32bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:186
            incommingPacket.service = TASK_ALLOCATION_FINISHED;
800030e4:	8001f7b7          	lui	a5,0x8001f
800030e8:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
800030ec:	03300713          	li	a4,51
800030f0:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:187
            break;
800030f4:	2b00006f          	j	800033a4 <External_2_IRQHandler+0x408>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:190

        case TASK_ALLOCATION_FINISHED:
            API_AckTaskAllocation(incommingPacket.task_id, incommingPacket.task_app_id);
800030f8:	8001f7b7          	lui	a5,0x8001f
800030fc:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
80003100:	00c7a703          	lw	a4,12(a5)
80003104:	8001f7b7          	lui	a5,0x8001f
80003108:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
8000310c:	01c7a783          	lw	a5,28(a5)
80003110:	00078593          	mv	a1,a5
80003114:	00070513          	mv	a0,a4
80003118:	778000ef          	jal	ra,80003890 <API_AckTaskAllocation>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:191
            break;
8000311c:	2880006f          	j	800033a4 <External_2_IRQHandler+0x408>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:194

        case TASK_ALLOCATION_SUCCESS:
            API_TaskAllocated(incommingPacket.task_id, incommingPacket.task_app_id);
80003120:	8001f7b7          	lui	a5,0x8001f
80003124:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
80003128:	00c7a703          	lw	a4,12(a5)
8000312c:	8001f7b7          	lui	a5,0x8001f
80003130:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
80003134:	01c7a783          	lw	a5,28(a5)
80003138:	00078593          	mv	a1,a5
8000313c:	00070513          	mv	a0,a4
80003140:	4dd010ef          	jal	ra,80004e1c <API_TaskAllocated>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:195
            break;
80003144:	2600006f          	j	800033a4 <External_2_IRQHandler+0x408>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:198

        case TASK_START:
            aux = API_GetTaskSlot(incommingPacket.task_id, incommingPacket.task_app_id);
80003148:	8001f7b7          	lui	a5,0x8001f
8000314c:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
80003150:	00c7a703          	lw	a4,12(a5)
80003154:	8001f7b7          	lui	a5,0x8001f
80003158:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
8000315c:	01c7a783          	lw	a5,28(a5)
80003160:	00078593          	mv	a1,a5
80003164:	00070513          	mv	a0,a4
80003168:	498020ef          	jal	ra,80005600 <API_GetTaskSlot>
8000316c:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:200
            // Informs the NI were to write the application
            HW_set_32bit_reg(NI_ADDR, &TaskList[aux].appNumTasks);
80003170:	fec42703          	lw	a4,-20(s0)
80003174:	00070793          	mv	a5,a4
80003178:	00479793          	slli	a5,a5,0x4
8000317c:	40e787b3          	sub	a5,a5,a4
80003180:	00379793          	slli	a5,a5,0x3
80003184:	04078713          	addi	a4,a5,64
80003188:	800207b7          	lui	a5,0x80020
8000318c:	6b478793          	addi	a5,a5,1716 # 800206b4 <__stack_top+0xfffdfe64>
80003190:	00f707b3          	add	a5,a4,a5
80003194:	00c78793          	addi	a5,a5,12
80003198:	00078593          	mv	a1,a5
8000319c:	500007b7          	lui	a5,0x50000
800031a0:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
800031a4:	d55fd0ef          	jal	ra,80000ef8 <HW_set_32bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:201
            incommingPacket.service = TASK_RUN;
800031a8:	8001f7b7          	lui	a5,0x8001f
800031ac:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
800031b0:	40100713          	li	a4,1025
800031b4:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:202
            break;
800031b8:	1ec0006f          	j	800033a4 <External_2_IRQHandler+0x408>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:205
        
        case TASK_RUN:
            aux = API_GetTaskSlot(incommingPacket.task_id, incommingPacket.task_app_id);
800031bc:	8001f7b7          	lui	a5,0x8001f
800031c0:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
800031c4:	00c7a703          	lw	a4,12(a5)
800031c8:	8001f7b7          	lui	a5,0x8001f
800031cc:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
800031d0:	01c7a783          	lw	a5,28(a5)
800031d4:	00078593          	mv	a1,a5
800031d8:	00070513          	mv	a0,a4
800031dc:	424020ef          	jal	ra,80005600 <API_GetTaskSlot>
800031e0:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:206
            API_TaskStart(aux);
800031e4:	fec42503          	lw	a0,-20(s0)
800031e8:	4e8020ef          	jal	ra,800056d0 <API_TaskStart>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:207
            printsv("Starting Task: ", incommingPacket.task_id);
800031ec:	8001f7b7          	lui	a5,0x8001f
800031f0:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
800031f4:	00c7a783          	lw	a5,12(a5)
800031f8:	00078593          	mv	a1,a5
800031fc:	800067b7          	lui	a5,0x80006
80003200:	f7478513          	addi	a0,a5,-140 # 80005f74 <__stack_top+0xfffc5724>
80003204:	b61ff0ef          	jal	ra,80002d64 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:208
            break;
80003208:	19c0006f          	j	800033a4 <External_2_IRQHandler+0x408>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:212

        case MESSAGE_REQUEST:
            // check the pipe
            prints("Chegou um message request! \n");
8000320c:	800067b7          	lui	a5,0x80006
80003210:	f8478513          	addi	a0,a5,-124 # 80005f84 <__stack_top+0xfffc5734>
80003214:	aa5ff0ef          	jal	ra,80002cb8 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:213
            aux = API_CheckMessagePipe(incommingPacket.application_id, incommingPacket.task_app_id);
80003218:	8001f7b7          	lui	a5,0x8001f
8000321c:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
80003220:	00c7a703          	lw	a4,12(a5)
80003224:	8001f7b7          	lui	a5,0x8001f
80003228:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
8000322c:	01c7a783          	lw	a5,28(a5)
80003230:	00078593          	mv	a1,a5
80003234:	00070513          	mv	a0,a4
80003238:	565000ef          	jal	ra,80003f9c <API_CheckMessagePipe>
8000323c:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:215
            
            if (aux == ERRO){
80003240:	fec42703          	lw	a4,-20(s0)
80003244:	fff00793          	li	a5,-1
80003248:	02f71e63          	bne	a4,a5,80003284 <External_2_IRQHandler+0x2e8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:217
                // register an messagerequest
                API_AddPendingReq(incommingPacket.task_id, incommingPacket.task_app_id, incommingPacket.producer_task_id);
8000324c:	8001f7b7          	lui	a5,0x8001f
80003250:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
80003254:	00c7a703          	lw	a4,12(a5)
80003258:	8001f7b7          	lui	a5,0x8001f
8000325c:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
80003260:	01c7a683          	lw	a3,28(a5)
80003264:	8001f7b7          	lui	a5,0x8001f
80003268:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
8000326c:	0147a783          	lw	a5,20(a5)
80003270:	00078613          	mv	a2,a5
80003274:	00068593          	mv	a1,a3
80003278:	00070513          	mv	a0,a4
8000327c:	5a9000ef          	jal	ra,80004024 <API_AddPendingReq>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:221
            } else {
                API_PushSendQueue(MESSAGE, aux);
            }
            break;
80003280:	1240006f          	j	800033a4 <External_2_IRQHandler+0x408>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:219
                API_PushSendQueue(MESSAGE, aux);
80003284:	fec42583          	lw	a1,-20(s0)
80003288:	20200537          	lui	a0,0x20200
8000328c:	3f0000ef          	jal	ra,8000367c <API_PushSendQueue>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:221
            break;
80003290:	1140006f          	j	800033a4 <External_2_IRQHandler+0x408>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:224
        
        case MESSAGE_DELIVERY:
            prints("Tem uma mensagem chegando...\n");
80003294:	800067b7          	lui	a5,0x80006
80003298:	fa478513          	addi	a0,a5,-92 # 80005fa4 <__stack_top+0xfffc5754>
8000329c:	a1dff0ef          	jal	ra,80002cb8 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:225
            aux = API_GetTaskSlot(incommingPacket.application_id, incommingPacket.destination_task);
800032a0:	8001f7b7          	lui	a5,0x8001f
800032a4:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
800032a8:	00c7a703          	lw	a4,12(a5)
800032ac:	8001f7b7          	lui	a5,0x8001f
800032b0:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
800032b4:	0147a783          	lw	a5,20(a5)
800032b8:	00078593          	mv	a1,a5
800032bc:	00070513          	mv	a0,a4
800032c0:	340020ef          	jal	ra,80005600 <API_GetTaskSlot>
800032c4:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:226
            incommingPacket.service = MESSAGE_DELIVERY_FINISH;
800032c8:	8001f7b7          	lui	a5,0x8001f
800032cc:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
800032d0:	02100713          	li	a4,33
800032d4:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:227
            HW_set_32bit_reg(NI_ADDR, &TaskList[aux].MsgToReceive);
800032d8:	fec42703          	lw	a4,-20(s0)
800032dc:	00070793          	mv	a5,a4
800032e0:	00479793          	slli	a5,a5,0x4
800032e4:	40e787b3          	sub	a5,a5,a4
800032e8:	00379793          	slli	a5,a5,0x3
800032ec:	01078713          	addi	a4,a5,16
800032f0:	800207b7          	lui	a5,0x80020
800032f4:	6b478793          	addi	a5,a5,1716 # 800206b4 <__stack_top+0xfffdfe64>
800032f8:	00f707b3          	add	a5,a4,a5
800032fc:	00478793          	addi	a5,a5,4
80003300:	00078593          	mv	a1,a5
80003304:	500007b7          	lui	a5,0x50000
80003308:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
8000330c:	bedfd0ef          	jal	ra,80000ef8 <HW_set_32bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:228
            break;
80003310:	0940006f          	j	800033a4 <External_2_IRQHandler+0x408>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:231
        
        case MESSAGE_DELIVERY_FINISH:
            prints("Terminou de entregar a mensagem!!\n");
80003314:	800067b7          	lui	a5,0x80006
80003318:	fc478513          	addi	a0,a5,-60 # 80005fc4 <__stack_top+0xfffc5774>
8000331c:	99dff0ef          	jal	ra,80002cb8 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:232
            aux = API_GetTaskSlot(incommingPacket.destination_task, incommingPacket.application_id);
80003320:	8001f7b7          	lui	a5,0x8001f
80003324:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
80003328:	0147a703          	lw	a4,20(a5)
8000332c:	8001f7b7          	lui	a5,0x8001f
80003330:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
80003334:	00c7a783          	lw	a5,12(a5)
80003338:	00078593          	mv	a1,a5
8000333c:	00070513          	mv	a0,a4
80003340:	2c0020ef          	jal	ra,80005600 <API_GetTaskSlot>
80003344:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:233
            printsv("> taskslot: ", aux);
80003348:	fec42783          	lw	a5,-20(s0)
8000334c:	00078593          	mv	a1,a5
80003350:	800067b7          	lui	a5,0x80006
80003354:	fe878513          	addi	a0,a5,-24 # 80005fe8 <__stack_top+0xfffc5798>
80003358:	a0dff0ef          	jal	ra,80002d64 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:234
            TaskList[aux].waitingMsg = FALSE;
8000335c:	800206b7          	lui	a3,0x80020
80003360:	fec42703          	lw	a4,-20(s0)
80003364:	00070793          	mv	a5,a4
80003368:	00479793          	slli	a5,a5,0x4
8000336c:	40e787b3          	sub	a5,a5,a4
80003370:	00379793          	slli	a5,a5,0x3
80003374:	6b468713          	addi	a4,a3,1716 # 800206b4 <__stack_top+0xfffdfe64>
80003378:	00e787b3          	add	a5,a5,a4
8000337c:	0007a823          	sw	zero,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:235
            break;
80003380:	0240006f          	j	800033a4 <External_2_IRQHandler+0x408>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:239
            

        default:
            printsv("ERROR External_2_IRQHandler Unknown-Service", incommingPacket.service);
80003384:	8001f7b7          	lui	a5,0x8001f
80003388:	59c78793          	addi	a5,a5,1436 # 8001f59c <__stack_top+0xfffded4c>
8000338c:	0087a783          	lw	a5,8(a5)
80003390:	00078593          	mv	a1,a5
80003394:	800067b7          	lui	a5,0x80006
80003398:	ff878513          	addi	a0,a5,-8 # 80005ff8 <__stack_top+0xfffc57a8>
8000339c:	9c9ff0ef          	jal	ra,80002d64 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:240
            break;
800033a0:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:243
    }
    // prints("==========================\n");
    HW_set_32bit_reg(NI_RX, DONE);
800033a4:	000057b7          	lui	a5,0x5
800033a8:	55578593          	addi	a1,a5,1365 # 5555 <HEAP_SIZE-0xaaab>
800033ac:	500007b7          	lui	a5,0x50000
800033b0:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800033b4:	b45fd0ef          	jal	ra,80000ef8 <HW_set_32bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:244
    return 0;
800033b8:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:245
}
800033bc:	00078513          	mv	a0,a5
800033c0:	01c12083          	lw	ra,28(sp)
800033c4:	01812403          	lw	s0,24(sp)
800033c8:	02010113          	addi	sp,sp,32
800033cc:	00008067          	ret

800033d0 <mySwap>:
mySwap():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:250

////////////////////////////////////////////////////////////
// https://www.techiedelight.com/implement-itoa-function-in-c/
// Function to swap two numbers
void mySwap(char *x, char *y) {
800033d0:	fd010113          	addi	sp,sp,-48
800033d4:	02812623          	sw	s0,44(sp)
800033d8:	03010413          	addi	s0,sp,48
800033dc:	fca42e23          	sw	a0,-36(s0)
800033e0:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:251
    char t = *x; *x = *y; *y = t;
800033e4:	fdc42783          	lw	a5,-36(s0)
800033e8:	0007c783          	lbu	a5,0(a5)
800033ec:	fef407a3          	sb	a5,-17(s0)
800033f0:	fd842783          	lw	a5,-40(s0)
800033f4:	00078703          	lb	a4,0(a5)
800033f8:	fdc42783          	lw	a5,-36(s0)
800033fc:	00e78023          	sb	a4,0(a5)
80003400:	fd842783          	lw	a5,-40(s0)
80003404:	fef44703          	lbu	a4,-17(s0)
80003408:	00e78023          	sb	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:252
}
8000340c:	00000013          	nop
80003410:	02c12403          	lw	s0,44(sp)
80003414:	03010113          	addi	sp,sp,48
80003418:	00008067          	ret

8000341c <reverse>:
reverse():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:254
// Function to reverse `buffer[i…j]`
char* reverse(char *buffer, int i, int j){
8000341c:	fe010113          	addi	sp,sp,-32
80003420:	00112e23          	sw	ra,28(sp)
80003424:	00812c23          	sw	s0,24(sp)
80003428:	02010413          	addi	s0,sp,32
8000342c:	fea42623          	sw	a0,-20(s0)
80003430:	feb42423          	sw	a1,-24(s0)
80003434:	fec42223          	sw	a2,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:255
    while (i < j) {
80003438:	0400006f          	j	80003478 <reverse+0x5c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:256
        mySwap(&buffer[i++], &buffer[j--]);
8000343c:	fe842783          	lw	a5,-24(s0)
80003440:	00178713          	addi	a4,a5,1
80003444:	fee42423          	sw	a4,-24(s0)
80003448:	00078713          	mv	a4,a5
8000344c:	fec42783          	lw	a5,-20(s0)
80003450:	00e786b3          	add	a3,a5,a4
80003454:	fe442783          	lw	a5,-28(s0)
80003458:	fff78713          	addi	a4,a5,-1
8000345c:	fee42223          	sw	a4,-28(s0)
80003460:	00078713          	mv	a4,a5
80003464:	fec42783          	lw	a5,-20(s0)
80003468:	00e787b3          	add	a5,a5,a4
8000346c:	00078593          	mv	a1,a5
80003470:	00068513          	mv	a0,a3
80003474:	f5dff0ef          	jal	ra,800033d0 <mySwap>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:255
    while (i < j) {
80003478:	fe842703          	lw	a4,-24(s0)
8000347c:	fe442783          	lw	a5,-28(s0)
80003480:	faf74ee3          	blt	a4,a5,8000343c <reverse+0x20>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:259
    }
 
    return buffer;
80003484:	fec42783          	lw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:260
}
80003488:	00078513          	mv	a0,a5
8000348c:	01c12083          	lw	ra,28(sp)
80003490:	01812403          	lw	s0,24(sp)
80003494:	02010113          	addi	sp,sp,32
80003498:	00008067          	ret

8000349c <myItoa>:
myItoa():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:262
// Iterative function to implement `itoa()` function in C
char* myItoa(int value, char* buffer, int base){
8000349c:	fd010113          	addi	sp,sp,-48
800034a0:	02112623          	sw	ra,44(sp)
800034a4:	02812423          	sw	s0,40(sp)
800034a8:	03010413          	addi	s0,sp,48
800034ac:	fca42e23          	sw	a0,-36(s0)
800034b0:	fcb42c23          	sw	a1,-40(s0)
800034b4:	fcc42a23          	sw	a2,-44(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:264
    // invalid input
    if (base < 2 || base > 32) {
800034b8:	fd442703          	lw	a4,-44(s0)
800034bc:	00100793          	li	a5,1
800034c0:	00e7d863          	ble	a4,a5,800034d0 <myItoa+0x34>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:264 (discriminator 1)
800034c4:	fd442703          	lw	a4,-44(s0)
800034c8:	02000793          	li	a5,32
800034cc:	00e7d663          	ble	a4,a5,800034d8 <myItoa+0x3c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:265
        return buffer;
800034d0:	fd842783          	lw	a5,-40(s0)
800034d4:	1540006f          	j	80003628 <myItoa+0x18c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:269
    }
    // consider the absolute value of the number
    int n;
    if (value < 0)
800034d8:	fdc42783          	lw	a5,-36(s0)
800034dc:	0007da63          	bgez	a5,800034f0 <myItoa+0x54>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:270
        n = value * -1;
800034e0:	fdc42783          	lw	a5,-36(s0)
800034e4:	40f007b3          	neg	a5,a5
800034e8:	fef42623          	sw	a5,-20(s0)
800034ec:	00c0006f          	j	800034f8 <myItoa+0x5c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:272
    else 
        n = value;
800034f0:	fdc42783          	lw	a5,-36(s0)
800034f4:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:274

    int i = 0;
800034f8:	fe042423          	sw	zero,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:275
    while (n){
800034fc:	09c0006f          	j	80003598 <myItoa+0xfc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:276
        int r = n % base;
80003500:	fec42703          	lw	a4,-20(s0)
80003504:	fd442783          	lw	a5,-44(s0)
80003508:	02f767b3          	rem	a5,a4,a5
8000350c:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:278
 
        if (r >= 10) {
80003510:	fe442703          	lw	a4,-28(s0)
80003514:	00900793          	li	a5,9
80003518:	02e7de63          	ble	a4,a5,80003554 <myItoa+0xb8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:279
            buffer[i++] = 65 + (r - 10);
8000351c:	fe442783          	lw	a5,-28(s0)
80003520:	0ff7f793          	andi	a5,a5,255
80003524:	03778793          	addi	a5,a5,55
80003528:	0ff7f693          	andi	a3,a5,255
8000352c:	fe842783          	lw	a5,-24(s0)
80003530:	00178713          	addi	a4,a5,1
80003534:	fee42423          	sw	a4,-24(s0)
80003538:	00078713          	mv	a4,a5
8000353c:	fd842783          	lw	a5,-40(s0)
80003540:	00e787b3          	add	a5,a5,a4
80003544:	01869713          	slli	a4,a3,0x18
80003548:	41875713          	srai	a4,a4,0x18
8000354c:	00e78023          	sb	a4,0(a5)
80003550:	0380006f          	j	80003588 <myItoa+0xec>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:282
        }
        else {
            buffer[i++] = 48 + r;
80003554:	fe442783          	lw	a5,-28(s0)
80003558:	0ff7f793          	andi	a5,a5,255
8000355c:	03078793          	addi	a5,a5,48
80003560:	0ff7f693          	andi	a3,a5,255
80003564:	fe842783          	lw	a5,-24(s0)
80003568:	00178713          	addi	a4,a5,1
8000356c:	fee42423          	sw	a4,-24(s0)
80003570:	00078713          	mv	a4,a5
80003574:	fd842783          	lw	a5,-40(s0)
80003578:	00e787b3          	add	a5,a5,a4
8000357c:	01869713          	slli	a4,a3,0x18
80003580:	41875713          	srai	a4,a4,0x18
80003584:	00e78023          	sb	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:285
        }
 
        n = n / base;
80003588:	fec42703          	lw	a4,-20(s0)
8000358c:	fd442783          	lw	a5,-44(s0)
80003590:	02f747b3          	div	a5,a4,a5
80003594:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:275
    while (n){
80003598:	fec42783          	lw	a5,-20(s0)
8000359c:	f60792e3          	bnez	a5,80003500 <myItoa+0x64>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:288
    }
    // if the number is 0
    if (i == 0) {
800035a0:	fe842783          	lw	a5,-24(s0)
800035a4:	02079263          	bnez	a5,800035c8 <myItoa+0x12c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:289
        buffer[i++] = '0';
800035a8:	fe842783          	lw	a5,-24(s0)
800035ac:	00178713          	addi	a4,a5,1
800035b0:	fee42423          	sw	a4,-24(s0)
800035b4:	00078713          	mv	a4,a5
800035b8:	fd842783          	lw	a5,-40(s0)
800035bc:	00e787b3          	add	a5,a5,a4
800035c0:	03000713          	li	a4,48
800035c4:	00e78023          	sb	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:294
    }
    // If the base is 10 and the value is negative, the resulting string
    // is preceded with a minus sign (-)
    // With any other base, value is always considered unsigned
    if (value < 0 && base == 10) {
800035c8:	fdc42783          	lw	a5,-36(s0)
800035cc:	0207d863          	bgez	a5,800035fc <myItoa+0x160>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:294 (discriminator 1)
800035d0:	fd442703          	lw	a4,-44(s0)
800035d4:	00a00793          	li	a5,10
800035d8:	02f71263          	bne	a4,a5,800035fc <myItoa+0x160>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:295
        buffer[i++] = '-';
800035dc:	fe842783          	lw	a5,-24(s0)
800035e0:	00178713          	addi	a4,a5,1
800035e4:	fee42423          	sw	a4,-24(s0)
800035e8:	00078713          	mv	a4,a5
800035ec:	fd842783          	lw	a5,-40(s0)
800035f0:	00e787b3          	add	a5,a5,a4
800035f4:	02d00713          	li	a4,45
800035f8:	00e78023          	sb	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:297
    }
    buffer[i] = '\0'; // null terminate string
800035fc:	fe842783          	lw	a5,-24(s0)
80003600:	fd842703          	lw	a4,-40(s0)
80003604:	00f707b3          	add	a5,a4,a5
80003608:	00078023          	sb	zero,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:299
    // reverse the string and return it
    return reverse(buffer, 0, i - 1);
8000360c:	fe842783          	lw	a5,-24(s0)
80003610:	fff78793          	addi	a5,a5,-1
80003614:	00078613          	mv	a2,a5
80003618:	00000593          	li	a1,0
8000361c:	fd842503          	lw	a0,-40(s0)
80003620:	dfdff0ef          	jal	ra,8000341c <reverse>
80003624:	00050793          	mv	a5,a0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:300
}
80003628:	00078513          	mv	a0,a5
8000362c:	02c12083          	lw	ra,44(sp)
80003630:	02812403          	lw	s0,40(sp)
80003634:	03010113          	addi	sp,sp,48
80003638:	00008067          	ret

8000363c <makeAddress>:
makeAddress():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:314
    return;
}

////////////////////////////////////////////////////////////
// Returns the PE address for a giver pair of coords
unsigned int makeAddress(unsigned int x, unsigned int y) {
8000363c:	fd010113          	addi	sp,sp,-48
80003640:	02812623          	sw	s0,44(sp)
80003644:	03010413          	addi	s0,sp,48
80003648:	fca42e23          	sw	a0,-36(s0)
8000364c:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:315
    unsigned int address = 0x00000000;
80003650:	fe042623          	sw	zero,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:316
    return (address | (x << 8) | y);
80003654:	fdc42783          	lw	a5,-36(s0)
80003658:	00879713          	slli	a4,a5,0x8
8000365c:	fec42783          	lw	a5,-20(s0)
80003660:	00f76733          	or	a4,a4,a5
80003664:	fd842783          	lw	a5,-40(s0)
80003668:	00f767b3          	or	a5,a4,a5
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:317
}
8000366c:	00078513          	mv	a0,a5
80003670:	02c12403          	lw	s0,44(sp)
80003674:	03010113          	addi	sp,sp,48
80003678:	00008067          	ret

8000367c <API_PushSendQueue>:
API_PushSendQueue():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:321

////////////////////////////////////////////////////////////
// Pushes one slot to the sending queue
void API_PushSendQueue(unsigned int type, unsigned int slot){
8000367c:	fe010113          	addi	sp,sp,-32
80003680:	00112e23          	sw	ra,28(sp)
80003684:	00812c23          	sw	s0,24(sp)
80003688:	02010413          	addi	s0,sp,32
8000368c:	fea42623          	sw	a0,-20(s0)
80003690:	feb42423          	sw	a1,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:322
    SendingQueue[SendingQueue_front] = type | slot;
80003694:	8001f7b7          	lui	a5,0x8001f
80003698:	6087a683          	lw	a3,1544(a5) # 8001f608 <__stack_top+0xfffdedb8>
8000369c:	fec42703          	lw	a4,-20(s0)
800036a0:	fe842783          	lw	a5,-24(s0)
800036a4:	00f76733          	or	a4,a4,a5
800036a8:	8001f7b7          	lui	a5,0x8001f
800036ac:	00269693          	slli	a3,a3,0x2
800036b0:	5d078793          	addi	a5,a5,1488 # 8001f5d0 <__stack_top+0xfffded80>
800036b4:	00f687b3          	add	a5,a3,a5
800036b8:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:323
    if(SendingQueue_front == (PIPE_SIZE*2)-1){
800036bc:	8001f7b7          	lui	a5,0x8001f
800036c0:	6087a703          	lw	a4,1544(a5) # 8001f608 <__stack_top+0xfffdedb8>
800036c4:	00700793          	li	a5,7
800036c8:	00f71863          	bne	a4,a5,800036d8 <API_PushSendQueue+0x5c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:324
        SendingQueue_front = 0;
800036cc:	8001f7b7          	lui	a5,0x8001f
800036d0:	6007a423          	sw	zero,1544(a5) # 8001f608 <__stack_top+0xfffdedb8>
800036d4:	0180006f          	j	800036ec <API_PushSendQueue+0x70>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:326
    } else {
        SendingQueue_front++;
800036d8:	8001f7b7          	lui	a5,0x8001f
800036dc:	6087a783          	lw	a5,1544(a5) # 8001f608 <__stack_top+0xfffdedb8>
800036e0:	00178713          	addi	a4,a5,1
800036e4:	8001f7b7          	lui	a5,0x8001f
800036e8:	60e7a423          	sw	a4,1544(a5) # 8001f608 <__stack_top+0xfffdedb8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:328
    }
    API_Try2Send();
800036ec:	0a4000ef          	jal	ra,80003790 <API_Try2Send>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:329
    return;
800036f0:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:330
}
800036f4:	01c12083          	lw	ra,28(sp)
800036f8:	01812403          	lw	s0,24(sp)
800036fc:	02010113          	addi	sp,sp,32
80003700:	00008067          	ret

80003704 <API_PopSendQueue>:
API_PopSendQueue():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:334

////////////////////////////////////////////////////////////
// Pushes one slot to the sending queue
unsigned int API_PopSendQueue(){
80003704:	fe010113          	addi	sp,sp,-32
80003708:	00812e23          	sw	s0,28(sp)
8000370c:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:336
    unsigned int element;
    if (SendingQueue_front == SendingQueue_tail){
80003710:	8001f7b7          	lui	a5,0x8001f
80003714:	6087a703          	lw	a4,1544(a5) # 8001f608 <__stack_top+0xfffdedb8>
80003718:	8001f7b7          	lui	a5,0x8001f
8000371c:	5f07a783          	lw	a5,1520(a5) # 8001f5f0 <__stack_top+0xfffdeda0>
80003720:	00f71663          	bne	a4,a5,8000372c <API_PopSendQueue+0x28>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:337
        return EMPTY;
80003724:	303007b7          	lui	a5,0x30300
80003728:	0580006f          	j	80003780 <API_PopSendQueue+0x7c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:339
    } else {
        element = SendingQueue[SendingQueue_tail];
8000372c:	8001f7b7          	lui	a5,0x8001f
80003730:	5f07a703          	lw	a4,1520(a5) # 8001f5f0 <__stack_top+0xfffdeda0>
80003734:	8001f7b7          	lui	a5,0x8001f
80003738:	00271713          	slli	a4,a4,0x2
8000373c:	5d078793          	addi	a5,a5,1488 # 8001f5d0 <__stack_top+0xfffded80>
80003740:	00f707b3          	add	a5,a4,a5
80003744:	0007a783          	lw	a5,0(a5)
80003748:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:340
        if (SendingQueue_tail == (PIPE_SIZE*2)-1){
8000374c:	8001f7b7          	lui	a5,0x8001f
80003750:	5f07a703          	lw	a4,1520(a5) # 8001f5f0 <__stack_top+0xfffdeda0>
80003754:	00700793          	li	a5,7
80003758:	00f71863          	bne	a4,a5,80003768 <API_PopSendQueue+0x64>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:341
            SendingQueue_tail = 0;
8000375c:	8001f7b7          	lui	a5,0x8001f
80003760:	5e07a823          	sw	zero,1520(a5) # 8001f5f0 <__stack_top+0xfffdeda0>
80003764:	0180006f          	j	8000377c <API_PopSendQueue+0x78>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:343
        } else {
            SendingQueue_tail++;
80003768:	8001f7b7          	lui	a5,0x8001f
8000376c:	5f07a783          	lw	a5,1520(a5) # 8001f5f0 <__stack_top+0xfffdeda0>
80003770:	00178713          	addi	a4,a5,1
80003774:	8001f7b7          	lui	a5,0x8001f
80003778:	5ee7a823          	sw	a4,1520(a5) # 8001f5f0 <__stack_top+0xfffdeda0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:345
        }
        return element;
8000377c:	fec42783          	lw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:347
    }
}
80003780:	00078513          	mv	a0,a5
80003784:	01c12403          	lw	s0,28(sp)
80003788:	02010113          	addi	sp,sp,32
8000378c:	00008067          	ret

80003790 <API_Try2Send>:
API_Try2Send():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:351

////////////////////////////////////////////////////////////
// Try to send some packet! 
void API_Try2Send(){
80003790:	fe010113          	addi	sp,sp,-32
80003794:	00112e23          	sw	ra,28(sp)
80003798:	00812c23          	sw	s0,24(sp)
8000379c:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:355
    unsigned int toSend;
    //prints("API_Try2Send\n");
    // Try to send the packet to NI if it's available
    vPortEnterCritical();
800037a0:	e15fd0ef          	jal	ra,800015b4 <vPortEnterCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:357
        // Checks if the NI is available to transmitt something
        if (HW_get_32bit_reg(NI_TX) == NI_STATUS_OFF){
800037a4:	500007b7          	lui	a5,0x50000
800037a8:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
800037ac:	f54fd0ef          	jal	ra,80000f00 <HW_get_32bit_reg>
800037b0:	00050713          	mv	a4,a0
800037b4:	0ff00793          	li	a5,255
800037b8:	0cf71063          	bne	a4,a5,80003878 <API_Try2Send+0xe8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:358
            toSend = API_PopSendQueue();
800037bc:	f49ff0ef          	jal	ra,80003704 <API_PopSendQueue>
800037c0:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:360
            //printsv("toSend ", toSend);
            if (toSend != EMPTY){
800037c4:	fec42703          	lw	a4,-20(s0)
800037c8:	303007b7          	lui	a5,0x30300
800037cc:	0af70663          	beq	a4,a5,80003878 <API_Try2Send+0xe8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:361
                if((toSend & 0xFFFF0000) ==  SERVICE){
800037d0:	fec42703          	lw	a4,-20(s0)
800037d4:	ffff07b7          	lui	a5,0xffff0
800037d8:	00f77733          	and	a4,a4,a5
800037dc:	101007b7          	lui	a5,0x10100
800037e0:	04f71063          	bne	a4,a5,80003820 <API_Try2Send+0x90>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:362
                    SendRaw((unsigned int)&ServicePipe[toSend & 0x0000FFFF].header);
800037e4:	fec42703          	lw	a4,-20(s0)
800037e8:	000107b7          	lui	a5,0x10
800037ec:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
800037f0:	00f77733          	and	a4,a4,a5
800037f4:	00070793          	mv	a5,a4
800037f8:	00479793          	slli	a5,a5,0x4
800037fc:	40e787b3          	sub	a5,a5,a4
80003800:	00279793          	slli	a5,a5,0x2
80003804:	8001f737          	lui	a4,0x8001f
80003808:	4ac70713          	addi	a4,a4,1196 # 8001f4ac <__stack_top+0xfffdec5c>
8000380c:	00e787b3          	add	a5,a5,a4
80003810:	00878793          	addi	a5,a5,8
80003814:	00078513          	mv	a0,a5
80003818:	e48ff0ef          	jal	ra,80002e60 <SendRaw>
8000381c:	0500006f          	j	8000386c <API_Try2Send+0xdc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:364
                }
                else if((toSend & 0xFFFF0000) ==  MESSAGE){
80003820:	fec42703          	lw	a4,-20(s0)
80003824:	ffff07b7          	lui	a5,0xffff0
80003828:	00f77733          	and	a4,a4,a5
8000382c:	202007b7          	lui	a5,0x20200
80003830:	02f71e63          	bne	a4,a5,8000386c <API_Try2Send+0xdc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:365
                    SendRaw((unsigned int)&MessagePipe[toSend & 0x0000FFFF].header);
80003834:	fec42703          	lw	a4,-20(s0)
80003838:	000107b7          	lui	a5,0x10
8000383c:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80003840:	00f77733          	and	a4,a4,a5
80003844:	00070793          	mv	a5,a4
80003848:	00379793          	slli	a5,a5,0x3
8000384c:	00e787b3          	add	a5,a5,a4
80003850:	00679793          	slli	a5,a5,0x6
80003854:	8001f737          	lui	a4,0x8001f
80003858:	60c70713          	addi	a4,a4,1548 # 8001f60c <__stack_top+0xfffdedbc>
8000385c:	00e787b3          	add	a5,a5,a4
80003860:	00878793          	addi	a5,a5,8
80003864:	00078513          	mv	a0,a5
80003868:	df8ff0ef          	jal	ra,80002e60 <SendRaw>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:367
                }
                SendingSlot = toSend;
8000386c:	8001f7b7          	lui	a5,0x8001f
80003870:	fec42703          	lw	a4,-20(s0)
80003874:	4ae7a423          	sw	a4,1192(a5) # 8001f4a8 <__stack_top+0xfffdec58>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:370
            }
        } 
    vPortExitCritical();
80003878:	d71fd0ef          	jal	ra,800015e8 <vPortExitCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:371
    return;
8000387c:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:372
}
80003880:	01c12083          	lw	ra,28(sp)
80003884:	01812403          	lw	s0,24(sp)
80003888:	02010113          	addi	sp,sp,32
8000388c:	00008067          	ret

80003890 <API_AckTaskAllocation>:
API_AckTaskAllocation():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:374

void API_AckTaskAllocation(unsigned int task_id, unsigned int app_id){
80003890:	fd010113          	addi	sp,sp,-48
80003894:	02112623          	sw	ra,44(sp)
80003898:	02812423          	sw	s0,40(sp)
8000389c:	03010413          	addi	s0,sp,48
800038a0:	fca42e23          	sw	a0,-36(s0)
800038a4:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:377
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
800038a8:	010020ef          	jal	ra,800058b8 <API_GetServiceSlot>
800038ac:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:378
        if(mySlot == PIPE_FULL) vTaskDelay(1);
800038b0:	fec42703          	lw	a4,-20(s0)
800038b4:	fdfe07b7          	lui	a5,0xfdfe0
800038b8:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f5ad>
800038bc:	00f71663          	bne	a4,a5,800038c8 <API_AckTaskAllocation+0x38>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:378 (discriminator 1)
800038c0:	00100513          	li	a0,1
800038c4:	fa4fe0ef          	jal	ra,80002068 <vTaskDelay>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:379
    }while(mySlot == PIPE_FULL);
800038c8:	fec42703          	lw	a4,-20(s0)
800038cc:	fdfe07b7          	lui	a5,0xfdfe0
800038d0:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f5ad>
800038d4:	fcf70ae3          	beq	a4,a5,800038a8 <API_AckTaskAllocation+0x18>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:382
    //printsv("I got a free service slot!! -> ", mySlot);

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
800038d8:	8001f7b7          	lui	a5,0x8001f
800038dc:	fec42703          	lw	a4,-20(s0)
800038e0:	4ac78693          	addi	a3,a5,1196 # 8001f4ac <__stack_top+0xfffdec5c>
800038e4:	00070793          	mv	a5,a4
800038e8:	00479793          	slli	a5,a5,0x4
800038ec:	40e787b3          	sub	a5,a5,a4
800038f0:	00279793          	slli	a5,a5,0x2
800038f4:	00f687b3          	add	a5,a3,a5
800038f8:	feff0737          	lui	a4,0xfeff0
800038fc:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efaf6ae>
80003900:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:384

    ServicePipe[mySlot].header.header           = makeAddress(0, 0);
80003904:	00000593          	li	a1,0
80003908:	00000513          	li	a0,0
8000390c:	d31ff0ef          	jal	ra,8000363c <makeAddress>
80003910:	00050613          	mv	a2,a0
80003914:	8001f7b7          	lui	a5,0x8001f
80003918:	fec42703          	lw	a4,-20(s0)
8000391c:	4ac78693          	addi	a3,a5,1196 # 8001f4ac <__stack_top+0xfffdec5c>
80003920:	00070793          	mv	a5,a4
80003924:	00479793          	slli	a5,a5,0x4
80003928:	40e787b3          	sub	a5,a5,a4
8000392c:	00279793          	slli	a5,a5,0x2
80003930:	00f687b3          	add	a5,a3,a5
80003934:	00c7a423          	sw	a2,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:385
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80003938:	8001f7b7          	lui	a5,0x8001f
8000393c:	fec42703          	lw	a4,-20(s0)
80003940:	4ac78693          	addi	a3,a5,1196 # 8001f4ac <__stack_top+0xfffdec5c>
80003944:	00070793          	mv	a5,a4
80003948:	00479793          	slli	a5,a5,0x4
8000394c:	40e787b3          	sub	a5,a5,a4
80003950:	00279793          	slli	a5,a5,0x2
80003954:	00f687b3          	add	a5,a3,a5
80003958:	00b00713          	li	a4,11
8000395c:	00e7a623          	sw	a4,12(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:386
    ServicePipe[mySlot].header.service          = TASK_ALLOCATION_SUCCESS;
80003960:	8001f7b7          	lui	a5,0x8001f
80003964:	fec42703          	lw	a4,-20(s0)
80003968:	4ac78693          	addi	a3,a5,1196 # 8001f4ac <__stack_top+0xfffdec5c>
8000396c:	00070793          	mv	a5,a4
80003970:	00479793          	slli	a5,a5,0x4
80003974:	40e787b3          	sub	a5,a5,a4
80003978:	00279793          	slli	a5,a5,0x2
8000397c:	00f687b3          	add	a5,a3,a5
80003980:	03500713          	li	a4,53
80003984:	00e7a823          	sw	a4,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:387
    ServicePipe[mySlot].header.task_id          = task_id;
80003988:	8001f7b7          	lui	a5,0x8001f
8000398c:	fec42703          	lw	a4,-20(s0)
80003990:	4ac78693          	addi	a3,a5,1196 # 8001f4ac <__stack_top+0xfffdec5c>
80003994:	00070793          	mv	a5,a4
80003998:	00479793          	slli	a5,a5,0x4
8000399c:	40e787b3          	sub	a5,a5,a4
800039a0:	00279793          	slli	a5,a5,0x2
800039a4:	00f687b3          	add	a5,a3,a5
800039a8:	fdc42703          	lw	a4,-36(s0)
800039ac:	00e7aa23          	sw	a4,20(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:388
    ServicePipe[mySlot].header.task_app_id      = app_id;
800039b0:	8001f7b7          	lui	a5,0x8001f
800039b4:	fec42703          	lw	a4,-20(s0)
800039b8:	4ac78693          	addi	a3,a5,1196 # 8001f4ac <__stack_top+0xfffdec5c>
800039bc:	00070793          	mv	a5,a4
800039c0:	00479793          	slli	a5,a5,0x4
800039c4:	40e787b3          	sub	a5,a5,a4
800039c8:	00279793          	slli	a5,a5,0x2
800039cc:	00f687b3          	add	a5,a3,a5
800039d0:	fd842703          	lw	a4,-40(s0)
800039d4:	02e7a223          	sw	a4,36(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:390

    API_PushSendQueue(SERVICE, mySlot);
800039d8:	fec42583          	lw	a1,-20(s0)
800039dc:	10100537          	lui	a0,0x10100
800039e0:	c9dff0ef          	jal	ra,8000367c <API_PushSendQueue>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:391
    return;    
800039e4:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:392
}
800039e8:	02c12083          	lw	ra,44(sp)
800039ec:	02812403          	lw	s0,40(sp)
800039f0:	03010113          	addi	sp,sp,48
800039f4:	00008067          	ret

800039f8 <API_SendMessage>:
API_SendMessage():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:394

void API_SendMessage(unsigned int addr, unsigned int taskID){
800039f8:	fd010113          	addi	sp,sp,-48
800039fc:	02112623          	sw	ra,44(sp)
80003a00:	02812423          	sw	s0,40(sp)
80003a04:	03010413          	addi	s0,sp,48
80003a08:	fca42e23          	sw	a0,-36(s0)
80003a0c:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:400
    unsigned int mySlot;
    unsigned int taskSlot;
    unsigned int i;
    Message *theMessage;
    do{
        mySlot = API_GetMessageSlot();
80003a10:	609010ef          	jal	ra,80005818 <API_GetMessageSlot>
80003a14:	fea42423          	sw	a0,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:401
        if(mySlot == PIPE_FULL) vTaskDelay(1);
80003a18:	fe842703          	lw	a4,-24(s0)
80003a1c:	fdfe07b7          	lui	a5,0xfdfe0
80003a20:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f5ad>
80003a24:	00f71663          	bne	a4,a5,80003a30 <API_SendMessage+0x38>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:401 (discriminator 1)
80003a28:	00100513          	li	a0,1
80003a2c:	e3cfe0ef          	jal	ra,80002068 <vTaskDelay>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:402
    }while(mySlot == PIPE_FULL);
80003a30:	fe842703          	lw	a4,-24(s0)
80003a34:	fdfe07b7          	lui	a5,0xfdfe0
80003a38:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f5ad>
80003a3c:	fcf70ae3          	beq	a4,a5,80003a10 <API_SendMessage+0x18>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:404
    
    theMessage = addr;
80003a40:	fdc42783          	lw	a5,-36(s0)
80003a44:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:406

    taskSlot = API_GetCurrentTaskSlot();
80003a48:	101010ef          	jal	ra,80005348 <API_GetCurrentTaskSlot>
80003a4c:	fea42023          	sw	a0,-32(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:408
    
    MessagePipe[mySlot].holder = taskSlot;
80003a50:	8001f7b7          	lui	a5,0x8001f
80003a54:	fe842703          	lw	a4,-24(s0)
80003a58:	60c78693          	addi	a3,a5,1548 # 8001f60c <__stack_top+0xfffdedbc>
80003a5c:	00070793          	mv	a5,a4
80003a60:	00379793          	slli	a5,a5,0x3
80003a64:	00e787b3          	add	a5,a5,a4
80003a68:	00679793          	slli	a5,a5,0x6
80003a6c:	00f687b3          	add	a5,a3,a5
80003a70:	fe042703          	lw	a4,-32(s0)
80003a74:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:410

    MessagePipe[mySlot].header.header           = TaskList[taskSlot].TasksMap[taskID];
80003a78:	800206b7          	lui	a3,0x80020
80003a7c:	fe042703          	lw	a4,-32(s0)
80003a80:	00070793          	mv	a5,a4
80003a84:	00479793          	slli	a5,a5,0x4
80003a88:	40e787b3          	sub	a5,a5,a4
80003a8c:	00179793          	slli	a5,a5,0x1
80003a90:	fd842703          	lw	a4,-40(s0)
80003a94:	00e787b3          	add	a5,a5,a4
80003a98:	01478793          	addi	a5,a5,20
80003a9c:	00279713          	slli	a4,a5,0x2
80003aa0:	6b468793          	addi	a5,a3,1716 # 800206b4 <__stack_top+0xfffdfe64>
80003aa4:	00f707b3          	add	a5,a4,a5
80003aa8:	0007a683          	lw	a3,0(a5)
80003aac:	8001f7b7          	lui	a5,0x8001f
80003ab0:	fe842703          	lw	a4,-24(s0)
80003ab4:	60c78613          	addi	a2,a5,1548 # 8001f60c <__stack_top+0xfffdedbc>
80003ab8:	00070793          	mv	a5,a4
80003abc:	00379793          	slli	a5,a5,0x3
80003ac0:	00e787b3          	add	a5,a5,a4
80003ac4:	00679793          	slli	a5,a5,0x6
80003ac8:	00f607b3          	add	a5,a2,a5
80003acc:	00d7a423          	sw	a3,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:411
    MessagePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE + theMessage->length + 1;
80003ad0:	fe442783          	lw	a5,-28(s0)
80003ad4:	0007a783          	lw	a5,0(a5)
80003ad8:	00c78693          	addi	a3,a5,12
80003adc:	8001f7b7          	lui	a5,0x8001f
80003ae0:	fe842703          	lw	a4,-24(s0)
80003ae4:	60c78613          	addi	a2,a5,1548 # 8001f60c <__stack_top+0xfffdedbc>
80003ae8:	00070793          	mv	a5,a4
80003aec:	00379793          	slli	a5,a5,0x3
80003af0:	00e787b3          	add	a5,a5,a4
80003af4:	00679793          	slli	a5,a5,0x6
80003af8:	00f607b3          	add	a5,a2,a5
80003afc:	00d7a623          	sw	a3,12(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:412
    MessagePipe[mySlot].header.service          = MESSAGE_DELIVERY;
80003b00:	8001f7b7          	lui	a5,0x8001f
80003b04:	fe842703          	lw	a4,-24(s0)
80003b08:	60c78693          	addi	a3,a5,1548 # 8001f60c <__stack_top+0xfffdedbc>
80003b0c:	00070793          	mv	a5,a4
80003b10:	00379793          	slli	a5,a5,0x3
80003b14:	00e787b3          	add	a5,a5,a4
80003b18:	00679793          	slli	a5,a5,0x6
80003b1c:	00f687b3          	add	a5,a3,a5
80003b20:	02000713          	li	a4,32
80003b24:	00e7a823          	sw	a4,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:413
    MessagePipe[mySlot].header.application_id   = TaskList[taskSlot].AppID;
80003b28:	800207b7          	lui	a5,0x80020
80003b2c:	fe042703          	lw	a4,-32(s0)
80003b30:	6b478693          	addi	a3,a5,1716 # 800206b4 <__stack_top+0xfffdfe64>
80003b34:	00070793          	mv	a5,a4
80003b38:	00479793          	slli	a5,a5,0x4
80003b3c:	40e787b3          	sub	a5,a5,a4
80003b40:	00379793          	slli	a5,a5,0x3
80003b44:	00f687b3          	add	a5,a3,a5
80003b48:	0087a683          	lw	a3,8(a5)
80003b4c:	8001f7b7          	lui	a5,0x8001f
80003b50:	fe842703          	lw	a4,-24(s0)
80003b54:	60c78613          	addi	a2,a5,1548 # 8001f60c <__stack_top+0xfffdedbc>
80003b58:	00070793          	mv	a5,a4
80003b5c:	00379793          	slli	a5,a5,0x3
80003b60:	00e787b3          	add	a5,a5,a4
80003b64:	00679793          	slli	a5,a5,0x6
80003b68:	00f607b3          	add	a5,a2,a5
80003b6c:	00d7aa23          	sw	a3,20(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:414
    MessagePipe[mySlot].header.producer_task    = TaskList[taskSlot].TaskID;
80003b70:	800207b7          	lui	a5,0x80020
80003b74:	fe042703          	lw	a4,-32(s0)
80003b78:	6b478693          	addi	a3,a5,1716 # 800206b4 <__stack_top+0xfffdfe64>
80003b7c:	00070793          	mv	a5,a4
80003b80:	00479793          	slli	a5,a5,0x4
80003b84:	40e787b3          	sub	a5,a5,a4
80003b88:	00379793          	slli	a5,a5,0x3
80003b8c:	00f687b3          	add	a5,a3,a5
80003b90:	0047a683          	lw	a3,4(a5)
80003b94:	8001f7b7          	lui	a5,0x8001f
80003b98:	fe842703          	lw	a4,-24(s0)
80003b9c:	60c78613          	addi	a2,a5,1548 # 8001f60c <__stack_top+0xfffdedbc>
80003ba0:	00070793          	mv	a5,a4
80003ba4:	00379793          	slli	a5,a5,0x3
80003ba8:	00e787b3          	add	a5,a5,a4
80003bac:	00679793          	slli	a5,a5,0x6
80003bb0:	00f607b3          	add	a5,a2,a5
80003bb4:	00d7ac23          	sw	a3,24(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:415
    MessagePipe[mySlot].header.destination_task = taskID;
80003bb8:	8001f7b7          	lui	a5,0x8001f
80003bbc:	fe842703          	lw	a4,-24(s0)
80003bc0:	60c78693          	addi	a3,a5,1548 # 8001f60c <__stack_top+0xfffdedbc>
80003bc4:	00070793          	mv	a5,a4
80003bc8:	00379793          	slli	a5,a5,0x3
80003bcc:	00e787b3          	add	a5,a5,a4
80003bd0:	00679793          	slli	a5,a5,0x6
80003bd4:	00f687b3          	add	a5,a3,a5
80003bd8:	fd842703          	lw	a4,-40(s0)
80003bdc:	00e7ae23          	sw	a4,28(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:416
    MessagePipe[mySlot].msg.length              = theMessage->length;
80003be0:	fe442783          	lw	a5,-28(s0)
80003be4:	0007a683          	lw	a3,0(a5)
80003be8:	8001f7b7          	lui	a5,0x8001f
80003bec:	fe842703          	lw	a4,-24(s0)
80003bf0:	60c78613          	addi	a2,a5,1548 # 8001f60c <__stack_top+0xfffdedbc>
80003bf4:	00070793          	mv	a5,a4
80003bf8:	00379793          	slli	a5,a5,0x3
80003bfc:	00e787b3          	add	a5,a5,a4
80003c00:	00679793          	slli	a5,a5,0x6
80003c04:	00f607b3          	add	a5,a2,a5
80003c08:	02d7ae23          	sw	a3,60(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:417
    for (i = (PKT_SERVICE_SIZE+1); i < theMessage->length; i++){
80003c0c:	00c00793          	li	a5,12
80003c10:	fef42623          	sw	a5,-20(s0)
80003c14:	05c0006f          	j	80003c70 <API_SendMessage+0x278>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:418 (discriminator 3)
        MessagePipe[mySlot].msg.msg[i]          = theMessage->msg[i-PKT_SERVICE_SIZE-1];
80003c18:	fec42783          	lw	a5,-20(s0)
80003c1c:	ff078793          	addi	a5,a5,-16
80003c20:	fe442703          	lw	a4,-28(s0)
80003c24:	00279793          	slli	a5,a5,0x2
80003c28:	00f707b3          	add	a5,a4,a5
80003c2c:	0047a683          	lw	a3,4(a5)
80003c30:	8001f637          	lui	a2,0x8001f
80003c34:	fe842703          	lw	a4,-24(s0)
80003c38:	00070793          	mv	a5,a4
80003c3c:	00379793          	slli	a5,a5,0x3
80003c40:	00e787b3          	add	a5,a5,a4
80003c44:	00479793          	slli	a5,a5,0x4
80003c48:	fec42703          	lw	a4,-20(s0)
80003c4c:	00e787b3          	add	a5,a5,a4
80003c50:	00c78793          	addi	a5,a5,12
80003c54:	60c60713          	addi	a4,a2,1548 # 8001f60c <__stack_top+0xfffdedbc>
80003c58:	00279793          	slli	a5,a5,0x2
80003c5c:	00f707b3          	add	a5,a4,a5
80003c60:	00d7a823          	sw	a3,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:417 (discriminator 3)
    for (i = (PKT_SERVICE_SIZE+1); i < theMessage->length; i++){
80003c64:	fec42783          	lw	a5,-20(s0)
80003c68:	00178793          	addi	a5,a5,1
80003c6c:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:417 (discriminator 1)
80003c70:	fe442783          	lw	a5,-28(s0)
80003c74:	0007a783          	lw	a5,0(a5)
80003c78:	fec42703          	lw	a4,-20(s0)
80003c7c:	f8f76ee3          	bltu	a4,a5,80003c18 <API_SendMessage+0x220>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:421
    }
    
    if (TaskList[taskSlot].PendingReq[taskID] == TRUE){
80003c80:	800206b7          	lui	a3,0x80020
80003c84:	fe042703          	lw	a4,-32(s0)
80003c88:	00070793          	mv	a5,a4
80003c8c:	00479793          	slli	a5,a5,0x4
80003c90:	40e787b3          	sub	a5,a5,a4
80003c94:	00179793          	slli	a5,a5,0x1
80003c98:	fd842703          	lw	a4,-40(s0)
80003c9c:	00e787b3          	add	a5,a5,a4
80003ca0:	00878793          	addi	a5,a5,8
80003ca4:	6b468713          	addi	a4,a3,1716 # 800206b4 <__stack_top+0xfffdfe64>
80003ca8:	00279793          	slli	a5,a5,0x2
80003cac:	00f707b3          	add	a5,a4,a5
80003cb0:	0047a703          	lw	a4,4(a5)
80003cb4:	00100793          	li	a5,1
80003cb8:	00f71a63          	bne	a4,a5,80003ccc <API_SendMessage+0x2d4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:422
        API_PushSendQueue(MESSAGE, mySlot);
80003cbc:	fe842583          	lw	a1,-24(s0)
80003cc0:	20200537          	lui	a0,0x20200
80003cc4:	9b9ff0ef          	jal	ra,8000367c <API_PushSendQueue>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:425
    }

    return;
80003cc8:	00000013          	nop
80003ccc:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:426
}
80003cd0:	02c12083          	lw	ra,44(sp)
80003cd4:	02812403          	lw	s0,40(sp)
80003cd8:	03010113          	addi	sp,sp,48
80003cdc:	00008067          	ret

80003ce0 <API_SendMessageReq>:
API_SendMessageReq():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:428

void API_SendMessageReq(unsigned int addr, unsigned int taskID){
80003ce0:	fd010113          	addi	sp,sp,-48
80003ce4:	02112623          	sw	ra,44(sp)
80003ce8:	02812423          	sw	s0,40(sp)
80003cec:	03010413          	addi	s0,sp,48
80003cf0:	fca42e23          	sw	a0,-36(s0)
80003cf4:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:433
    unsigned int taskSlot;
    unsigned int mySlot;

    // Update task info
    taskSlot = API_GetCurrentTaskSlot();
80003cf8:	650010ef          	jal	ra,80005348 <API_GetCurrentTaskSlot>
80003cfc:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:434
    TaskList[taskSlot].waitingMsg = TRUE;
80003d00:	800206b7          	lui	a3,0x80020
80003d04:	fec42703          	lw	a4,-20(s0)
80003d08:	00070793          	mv	a5,a4
80003d0c:	00479793          	slli	a5,a5,0x4
80003d10:	40e787b3          	sub	a5,a5,a4
80003d14:	00379793          	slli	a5,a5,0x3
80003d18:	6b468713          	addi	a4,a3,1716 # 800206b4 <__stack_top+0xfffdfe64>
80003d1c:	00e787b3          	add	a5,a5,a4
80003d20:	00100713          	li	a4,1
80003d24:	00e7a823          	sw	a4,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:435
    TaskList[taskSlot].MsgToReceive = addr;
80003d28:	fdc42683          	lw	a3,-36(s0)
80003d2c:	800207b7          	lui	a5,0x80020
80003d30:	fec42703          	lw	a4,-20(s0)
80003d34:	6b478613          	addi	a2,a5,1716 # 800206b4 <__stack_top+0xfffdfe64>
80003d38:	00070793          	mv	a5,a4
80003d3c:	00479793          	slli	a5,a5,0x4
80003d40:	40e787b3          	sub	a5,a5,a4
80003d44:	00379793          	slli	a5,a5,0x3
80003d48:	00f607b3          	add	a5,a2,a5
80003d4c:	00d7aa23          	sw	a3,20(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:439

    // Sends the message request
    do{
        mySlot = API_GetServiceSlot();
80003d50:	369010ef          	jal	ra,800058b8 <API_GetServiceSlot>
80003d54:	fea42423          	sw	a0,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:440
        if(mySlot == PIPE_FULL) vTaskDelay(1);
80003d58:	fe842703          	lw	a4,-24(s0)
80003d5c:	fdfe07b7          	lui	a5,0xfdfe0
80003d60:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f5ad>
80003d64:	00f71663          	bne	a4,a5,80003d70 <API_SendMessageReq+0x90>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:440 (discriminator 1)
80003d68:	00100513          	li	a0,1
80003d6c:	afcfe0ef          	jal	ra,80002068 <vTaskDelay>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:441
    }while(mySlot == PIPE_FULL);
80003d70:	fe842703          	lw	a4,-24(s0)
80003d74:	fdfe07b7          	lui	a5,0xfdfe0
80003d78:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f5ad>
80003d7c:	fcf70ae3          	beq	a4,a5,80003d50 <API_SendMessageReq+0x70>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:443

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80003d80:	8001f7b7          	lui	a5,0x8001f
80003d84:	fe842703          	lw	a4,-24(s0)
80003d88:	4ac78693          	addi	a3,a5,1196 # 8001f4ac <__stack_top+0xfffdec5c>
80003d8c:	00070793          	mv	a5,a4
80003d90:	00479793          	slli	a5,a5,0x4
80003d94:	40e787b3          	sub	a5,a5,a4
80003d98:	00279793          	slli	a5,a5,0x2
80003d9c:	00f687b3          	add	a5,a3,a5
80003da0:	feff0737          	lui	a4,0xfeff0
80003da4:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efaf6ae>
80003da8:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:445

    ServicePipe[mySlot].header.header           = TaskList[taskSlot].TasksMap[taskID];
80003dac:	800206b7          	lui	a3,0x80020
80003db0:	fec42703          	lw	a4,-20(s0)
80003db4:	00070793          	mv	a5,a4
80003db8:	00479793          	slli	a5,a5,0x4
80003dbc:	40e787b3          	sub	a5,a5,a4
80003dc0:	00179793          	slli	a5,a5,0x1
80003dc4:	fd842703          	lw	a4,-40(s0)
80003dc8:	00e787b3          	add	a5,a5,a4
80003dcc:	01478793          	addi	a5,a5,20
80003dd0:	00279713          	slli	a4,a5,0x2
80003dd4:	6b468793          	addi	a5,a3,1716 # 800206b4 <__stack_top+0xfffdfe64>
80003dd8:	00f707b3          	add	a5,a4,a5
80003ddc:	0007a683          	lw	a3,0(a5)
80003de0:	8001f7b7          	lui	a5,0x8001f
80003de4:	fe842703          	lw	a4,-24(s0)
80003de8:	4ac78613          	addi	a2,a5,1196 # 8001f4ac <__stack_top+0xfffdec5c>
80003dec:	00070793          	mv	a5,a4
80003df0:	00479793          	slli	a5,a5,0x4
80003df4:	40e787b3          	sub	a5,a5,a4
80003df8:	00279793          	slli	a5,a5,0x2
80003dfc:	00f607b3          	add	a5,a2,a5
80003e00:	00d7a423          	sw	a3,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:446
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80003e04:	8001f7b7          	lui	a5,0x8001f
80003e08:	fe842703          	lw	a4,-24(s0)
80003e0c:	4ac78693          	addi	a3,a5,1196 # 8001f4ac <__stack_top+0xfffdec5c>
80003e10:	00070793          	mv	a5,a4
80003e14:	00479793          	slli	a5,a5,0x4
80003e18:	40e787b3          	sub	a5,a5,a4
80003e1c:	00279793          	slli	a5,a5,0x2
80003e20:	00f687b3          	add	a5,a3,a5
80003e24:	00b00713          	li	a4,11
80003e28:	00e7a623          	sw	a4,12(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:447
    ServicePipe[mySlot].header.service          = MESSAGE_REQUEST;
80003e2c:	8001f7b7          	lui	a5,0x8001f
80003e30:	fe842703          	lw	a4,-24(s0)
80003e34:	4ac78693          	addi	a3,a5,1196 # 8001f4ac <__stack_top+0xfffdec5c>
80003e38:	00070793          	mv	a5,a4
80003e3c:	00479793          	slli	a5,a5,0x4
80003e40:	40e787b3          	sub	a5,a5,a4
80003e44:	00279793          	slli	a5,a5,0x2
80003e48:	00f687b3          	add	a5,a3,a5
80003e4c:	01000713          	li	a4,16
80003e50:	00e7a823          	sw	a4,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:448
    ServicePipe[mySlot].header.task_id          = TaskList[taskSlot].TaskID;
80003e54:	800207b7          	lui	a5,0x80020
80003e58:	fec42703          	lw	a4,-20(s0)
80003e5c:	6b478693          	addi	a3,a5,1716 # 800206b4 <__stack_top+0xfffdfe64>
80003e60:	00070793          	mv	a5,a4
80003e64:	00479793          	slli	a5,a5,0x4
80003e68:	40e787b3          	sub	a5,a5,a4
80003e6c:	00379793          	slli	a5,a5,0x3
80003e70:	00f687b3          	add	a5,a3,a5
80003e74:	0047a683          	lw	a3,4(a5)
80003e78:	8001f7b7          	lui	a5,0x8001f
80003e7c:	fe842703          	lw	a4,-24(s0)
80003e80:	4ac78613          	addi	a2,a5,1196 # 8001f4ac <__stack_top+0xfffdec5c>
80003e84:	00070793          	mv	a5,a4
80003e88:	00479793          	slli	a5,a5,0x4
80003e8c:	40e787b3          	sub	a5,a5,a4
80003e90:	00279793          	slli	a5,a5,0x2
80003e94:	00f607b3          	add	a5,a2,a5
80003e98:	00d7aa23          	sw	a3,20(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:449
    ServicePipe[mySlot].header.task_app_id      = TaskList[taskSlot].AppID;
80003e9c:	800207b7          	lui	a5,0x80020
80003ea0:	fec42703          	lw	a4,-20(s0)
80003ea4:	6b478693          	addi	a3,a5,1716 # 800206b4 <__stack_top+0xfffdfe64>
80003ea8:	00070793          	mv	a5,a4
80003eac:	00479793          	slli	a5,a5,0x4
80003eb0:	40e787b3          	sub	a5,a5,a4
80003eb4:	00379793          	slli	a5,a5,0x3
80003eb8:	00f687b3          	add	a5,a3,a5
80003ebc:	0087a683          	lw	a3,8(a5)
80003ec0:	8001f7b7          	lui	a5,0x8001f
80003ec4:	fe842703          	lw	a4,-24(s0)
80003ec8:	4ac78613          	addi	a2,a5,1196 # 8001f4ac <__stack_top+0xfffdec5c>
80003ecc:	00070793          	mv	a5,a4
80003ed0:	00479793          	slli	a5,a5,0x4
80003ed4:	40e787b3          	sub	a5,a5,a4
80003ed8:	00279793          	slli	a5,a5,0x2
80003edc:	00f607b3          	add	a5,a2,a5
80003ee0:	02d7a223          	sw	a3,36(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:450
    ServicePipe[mySlot].header.producer_task_id = taskID;
80003ee4:	8001f7b7          	lui	a5,0x8001f
80003ee8:	fe842703          	lw	a4,-24(s0)
80003eec:	4ac78693          	addi	a3,a5,1196 # 8001f4ac <__stack_top+0xfffdec5c>
80003ef0:	00070793          	mv	a5,a4
80003ef4:	00479793          	slli	a5,a5,0x4
80003ef8:	40e787b3          	sub	a5,a5,a4
80003efc:	00279793          	slli	a5,a5,0x2
80003f00:	00f687b3          	add	a5,a3,a5
80003f04:	fd842703          	lw	a4,-40(s0)
80003f08:	00e7ae23          	sw	a4,28(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:452

    API_PushSendQueue(SERVICE, mySlot);
80003f0c:	fe842583          	lw	a1,-24(s0)
80003f10:	10100537          	lui	a0,0x10100
80003f14:	f68ff0ef          	jal	ra,8000367c <API_PushSendQueue>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:453
    prints("Enviando um Message Request!\n");
80003f18:	800067b7          	lui	a5,0x80006
80003f1c:	04c78513          	addi	a0,a5,76 # 8000604c <__stack_top+0xfffc57fc>
80003f20:	d99fe0ef          	jal	ra,80002cb8 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:455
    // Bloquear a tarefa!
    while(TaskList[taskSlot].waitingMsg == TRUE){ 
80003f24:	02c0006f          	j	80003f50 <API_SendMessageReq+0x270>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:456
        printsvsv("taskslot ", taskSlot, " esperando mensgaem ", 0);
80003f28:	fec42703          	lw	a4,-20(s0)
80003f2c:	00000693          	li	a3,0
80003f30:	800067b7          	lui	a5,0x80006
80003f34:	06c78613          	addi	a2,a5,108 # 8000606c <__stack_top+0xfffc581c>
80003f38:	00070593          	mv	a1,a4
80003f3c:	800067b7          	lui	a5,0x80006
80003f40:	08478513          	addi	a0,a5,132 # 80006084 <__stack_top+0xfffc5834>
80003f44:	e69fe0ef          	jal	ra,80002dac <printsvsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:457
        vTaskDelay(1); 
80003f48:	00100513          	li	a0,1
80003f4c:	91cfe0ef          	jal	ra,80002068 <vTaskDelay>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:455
    while(TaskList[taskSlot].waitingMsg == TRUE){ 
80003f50:	800206b7          	lui	a3,0x80020
80003f54:	fec42703          	lw	a4,-20(s0)
80003f58:	00070793          	mv	a5,a4
80003f5c:	00479793          	slli	a5,a5,0x4
80003f60:	40e787b3          	sub	a5,a5,a4
80003f64:	00379793          	slli	a5,a5,0x3
80003f68:	6b468713          	addi	a4,a3,1716 # 800206b4 <__stack_top+0xfffdfe64>
80003f6c:	00e787b3          	add	a5,a5,a4
80003f70:	0107a703          	lw	a4,16(a5)
80003f74:	00100793          	li	a5,1
80003f78:	faf708e3          	beq	a4,a5,80003f28 <API_SendMessageReq+0x248>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:459
    }
    prints("Pacote recebido!\n");
80003f7c:	800067b7          	lui	a5,0x80006
80003f80:	09078513          	addi	a0,a5,144 # 80006090 <__stack_top+0xfffc5840>
80003f84:	d35fe0ef          	jal	ra,80002cb8 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:460
    return;
80003f88:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:461
}
80003f8c:	02c12083          	lw	ra,44(sp)
80003f90:	02812403          	lw	s0,40(sp)
80003f94:	03010113          	addi	sp,sp,48
80003f98:	00008067          	ret

80003f9c <API_CheckMessagePipe>:
API_CheckMessagePipe():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:463

unsigned int API_CheckMessagePipe(unsigned int requester_task_id, unsigned int task_app_id){
80003f9c:	fd010113          	addi	sp,sp,-48
80003fa0:	02812623          	sw	s0,44(sp)
80003fa4:	03010413          	addi	s0,sp,48
80003fa8:	fca42e23          	sw	a0,-36(s0)
80003fac:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:465
    unsigned int i;
    for (i = 0; i < PIPE_SIZE; i++){
80003fb0:	fe042623          	sw	zero,-20(s0)
80003fb4:	0500006f          	j	80004004 <API_CheckMessagePipe+0x68>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:466
        if(MessagePipe->status == PIPE_OCCUPIED){
80003fb8:	8001f7b7          	lui	a5,0x8001f
80003fbc:	60c7a703          	lw	a4,1548(a5) # 8001f60c <__stack_top+0xfffdedbc>
80003fc0:	00100793          	li	a5,1
80003fc4:	02f71a63          	bne	a4,a5,80003ff8 <API_CheckMessagePipe+0x5c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:467
            if(MessagePipe->header.application_id == task_app_id){
80003fc8:	8001f7b7          	lui	a5,0x8001f
80003fcc:	60c78793          	addi	a5,a5,1548 # 8001f60c <__stack_top+0xfffdedbc>
80003fd0:	0147a783          	lw	a5,20(a5)
80003fd4:	fd842703          	lw	a4,-40(s0)
80003fd8:	02f71063          	bne	a4,a5,80003ff8 <API_CheckMessagePipe+0x5c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:468
                if(MessagePipe->header.destination_task == requester_task_id){
80003fdc:	8001f7b7          	lui	a5,0x8001f
80003fe0:	60c78793          	addi	a5,a5,1548 # 8001f60c <__stack_top+0xfffdedbc>
80003fe4:	01c7a783          	lw	a5,28(a5)
80003fe8:	fdc42703          	lw	a4,-36(s0)
80003fec:	00f71663          	bne	a4,a5,80003ff8 <API_CheckMessagePipe+0x5c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:469
                    return i;
80003ff0:	fec42783          	lw	a5,-20(s0)
80003ff4:	0200006f          	j	80004014 <API_CheckMessagePipe+0x78>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:465 (discriminator 2)
    for (i = 0; i < PIPE_SIZE; i++){
80003ff8:	fec42783          	lw	a5,-20(s0)
80003ffc:	00178793          	addi	a5,a5,1
80004000:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:465 (discriminator 1)
80004004:	fec42703          	lw	a4,-20(s0)
80004008:	00300793          	li	a5,3
8000400c:	fae7f6e3          	bleu	a4,a5,80003fb8 <API_CheckMessagePipe+0x1c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:474
                }
            }
        }
    }
    return ERRO;
80004010:	fff00793          	li	a5,-1
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:475
}
80004014:	00078513          	mv	a0,a5
80004018:	02c12403          	lw	s0,44(sp)
8000401c:	03010113          	addi	sp,sp,48
80004020:	00008067          	ret

80004024 <API_AddPendingReq>:
API_AddPendingReq():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:477

void API_AddPendingReq(unsigned int requester_task_id, unsigned int task_app_id, unsigned int producer_task_id){
80004024:	fd010113          	addi	sp,sp,-48
80004028:	02112623          	sw	ra,44(sp)
8000402c:	02812423          	sw	s0,40(sp)
80004030:	03010413          	addi	s0,sp,48
80004034:	fca42e23          	sw	a0,-36(s0)
80004038:	fcb42c23          	sw	a1,-40(s0)
8000403c:	fcc42a23          	sw	a2,-44(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:478
    unsigned int slot = API_GetTaskSlot(producer_task_id, task_app_id);
80004040:	fd842583          	lw	a1,-40(s0)
80004044:	fd442503          	lw	a0,-44(s0)
80004048:	5b8010ef          	jal	ra,80005600 <API_GetTaskSlot>
8000404c:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:479
    TaskList[slot].PendingReq[requester_task_id] = TRUE;
80004050:	800206b7          	lui	a3,0x80020
80004054:	fec42703          	lw	a4,-20(s0)
80004058:	00070793          	mv	a5,a4
8000405c:	00479793          	slli	a5,a5,0x4
80004060:	40e787b3          	sub	a5,a5,a4
80004064:	00179793          	slli	a5,a5,0x1
80004068:	fdc42703          	lw	a4,-36(s0)
8000406c:	00e787b3          	add	a5,a5,a4
80004070:	00878793          	addi	a5,a5,8
80004074:	6b468713          	addi	a4,a3,1716 # 800206b4 <__stack_top+0xfffdfe64>
80004078:	00279793          	slli	a5,a5,0x2
8000407c:	00f707b3          	add	a5,a4,a5
80004080:	00100713          	li	a4,1
80004084:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:480
    return;
80004088:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:481
}
8000408c:	02c12083          	lw	ra,44(sp)
80004090:	02812403          	lw	s0,40(sp)
80004094:	03010113          	addi	sp,sp,48
80004098:	00008067          	ret

8000409c <API_RepositoryWakeUp>:
API_RepositoryWakeUp():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:10
#include "packet.h"
#include "services.h"

////////////////////////////////////////////////////////////
// Informs the Repository that the GLOBALMASTER is ready to receive the application info
void API_RepositoryWakeUp(){
8000409c:	fe010113          	addi	sp,sp,-32
800040a0:	00112e23          	sw	ra,28(sp)
800040a4:	00812c23          	sw	s0,24(sp)
800040a8:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:13
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
800040ac:	00d010ef          	jal	ra,800058b8 <API_GetServiceSlot>
800040b0:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:14
        if(mySlot == PIPE_FULL) vTaskDelay(1);
800040b4:	fec42703          	lw	a4,-20(s0)
800040b8:	fdfe07b7          	lui	a5,0xfdfe0
800040bc:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f5ad>
800040c0:	00f71663          	bne	a4,a5,800040cc <API_RepositoryWakeUp+0x30>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:14 (discriminator 1)
800040c4:	00100513          	li	a0,1
800040c8:	fa1fd0ef          	jal	ra,80002068 <vTaskDelay>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:15
    }while(mySlot == PIPE_FULL);
800040cc:	fec42703          	lw	a4,-20(s0)
800040d0:	fdfe07b7          	lui	a5,0xfdfe0
800040d4:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f5ad>
800040d8:	fcf70ae3          	beq	a4,a5,800040ac <API_RepositoryWakeUp+0x10>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:18
    //printsv("I got a free service slot!! -> ", mySlot);

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
800040dc:	8001f7b7          	lui	a5,0x8001f
800040e0:	fec42703          	lw	a4,-20(s0)
800040e4:	4ac78693          	addi	a3,a5,1196 # 8001f4ac <__stack_top+0xfffdec5c>
800040e8:	00070793          	mv	a5,a4
800040ec:	00479793          	slli	a5,a5,0x4
800040f0:	40e787b3          	sub	a5,a5,a4
800040f4:	00279793          	slli	a5,a5,0x2
800040f8:	00f687b3          	add	a5,a3,a5
800040fc:	feff0737          	lui	a4,0xfeff0
80004100:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efaf6ae>
80004104:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:20

    ServicePipe[mySlot].header.header       = makeAddress(0, 0) | PERIPH_SOUTH;
80004108:	00000593          	li	a1,0
8000410c:	00000513          	li	a0,0
80004110:	d2cff0ef          	jal	ra,8000363c <makeAddress>
80004114:	00050713          	mv	a4,a0
80004118:	000407b7          	lui	a5,0x40
8000411c:	00f766b3          	or	a3,a4,a5
80004120:	8001f7b7          	lui	a5,0x8001f
80004124:	fec42703          	lw	a4,-20(s0)
80004128:	4ac78613          	addi	a2,a5,1196 # 8001f4ac <__stack_top+0xfffdec5c>
8000412c:	00070793          	mv	a5,a4
80004130:	00479793          	slli	a5,a5,0x4
80004134:	40e787b3          	sub	a5,a5,a4
80004138:	00279793          	slli	a5,a5,0x2
8000413c:	00f607b3          	add	a5,a2,a5
80004140:	00d7a423          	sw	a3,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:21
    ServicePipe[mySlot].header.payload_size = PKT_SERVICE_SIZE;
80004144:	8001f7b7          	lui	a5,0x8001f
80004148:	fec42703          	lw	a4,-20(s0)
8000414c:	4ac78693          	addi	a3,a5,1196 # 8001f4ac <__stack_top+0xfffdec5c>
80004150:	00070793          	mv	a5,a4
80004154:	00479793          	slli	a5,a5,0x4
80004158:	40e787b3          	sub	a5,a5,a4
8000415c:	00279793          	slli	a5,a5,0x2
80004160:	00f687b3          	add	a5,a3,a5
80004164:	00b00713          	li	a4,11
80004168:	00e7a623          	sw	a4,12(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:22
    ServicePipe[mySlot].header.service      = REPOSITORY_WAKEUP;
8000416c:	8001f7b7          	lui	a5,0x8001f
80004170:	fec42703          	lw	a4,-20(s0)
80004174:	4ac78693          	addi	a3,a5,1196 # 8001f4ac <__stack_top+0xfffdec5c>
80004178:	00070793          	mv	a5,a4
8000417c:	00479793          	slli	a5,a5,0x4
80004180:	40e787b3          	sub	a5,a5,a4
80004184:	00279793          	slli	a5,a5,0x2
80004188:	00f687b3          	add	a5,a3,a5
8000418c:	10000713          	li	a4,256
80004190:	00e7a823          	sw	a4,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:24

    API_PushSendQueue(SERVICE, mySlot);
80004194:	fec42583          	lw	a1,-20(s0)
80004198:	10100537          	lui	a0,0x10100
8000419c:	ce0ff0ef          	jal	ra,8000367c <API_PushSendQueue>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:25
    return;    
800041a0:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:26
}
800041a4:	01c12083          	lw	ra,28(sp)
800041a8:	01812403          	lw	s0,24(sp)
800041ac:	02010113          	addi	sp,sp,32
800041b0:	00008067          	ret

800041b4 <API_AddApplication>:
API_AddApplication():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:30

////////////////////////////////////////////////////////////
// Add one Application in the Execution Queue
void API_AddApplication(unsigned int appID, unsigned int appPeriod, unsigned int appExec, unsigned int appNTasks){
800041b4:	fd010113          	addi	sp,sp,-48
800041b8:	02112623          	sw	ra,44(sp)
800041bc:	02812423          	sw	s0,40(sp)
800041c0:	03010413          	addi	s0,sp,48
800041c4:	fca42e23          	sw	a0,-36(s0)
800041c8:	fcb42c23          	sw	a1,-40(s0)
800041cc:	fcc42a23          	sw	a2,-44(s0)
800041d0:	fcd42823          	sw	a3,-48(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:31
    int slot = API_GetApplicationFreeSlot();
800041d4:	1c4000ef          	jal	ra,80004398 <API_GetApplicationFreeSlot>
800041d8:	00050793          	mv	a5,a0
800041dc:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:32
    applications[slot].occupied = TRUE;
800041e0:	800206b7          	lui	a3,0x80020
800041e4:	fec42703          	lw	a4,-20(s0)
800041e8:	00070793          	mv	a5,a4
800041ec:	00279793          	slli	a5,a5,0x2
800041f0:	00e787b3          	add	a5,a5,a4
800041f4:	00579793          	slli	a5,a5,0x5
800041f8:	f3468713          	addi	a4,a3,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
800041fc:	00e787b3          	add	a5,a5,a4
80004200:	00100713          	li	a4,1
80004204:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:33
    applications[slot].appID = appID;
80004208:	800207b7          	lui	a5,0x80020
8000420c:	fec42703          	lw	a4,-20(s0)
80004210:	f3478693          	addi	a3,a5,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
80004214:	00070793          	mv	a5,a4
80004218:	00279793          	slli	a5,a5,0x2
8000421c:	00e787b3          	add	a5,a5,a4
80004220:	00579793          	slli	a5,a5,0x5
80004224:	00f687b3          	add	a5,a3,a5
80004228:	fdc42703          	lw	a4,-36(s0)
8000422c:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:34
    applications[slot].appPeriod = appPeriod;
80004230:	800207b7          	lui	a5,0x80020
80004234:	fec42703          	lw	a4,-20(s0)
80004238:	f3478693          	addi	a3,a5,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
8000423c:	00070793          	mv	a5,a4
80004240:	00279793          	slli	a5,a5,0x2
80004244:	00e787b3          	add	a5,a5,a4
80004248:	00579793          	slli	a5,a5,0x5
8000424c:	00f687b3          	add	a5,a3,a5
80004250:	fd842703          	lw	a4,-40(s0)
80004254:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:35
    applications[slot].appExec = appExec;
80004258:	800207b7          	lui	a5,0x80020
8000425c:	fec42703          	lw	a4,-20(s0)
80004260:	f3478693          	addi	a3,a5,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
80004264:	00070793          	mv	a5,a4
80004268:	00279793          	slli	a5,a5,0x2
8000426c:	00e787b3          	add	a5,a5,a4
80004270:	00579793          	slli	a5,a5,0x5
80004274:	00f687b3          	add	a5,a3,a5
80004278:	fd442703          	lw	a4,-44(s0)
8000427c:	00e7a623          	sw	a4,12(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:36
    applications[slot].numTasks = appNTasks;
80004280:	800206b7          	lui	a3,0x80020
80004284:	fec42703          	lw	a4,-20(s0)
80004288:	00070793          	mv	a5,a4
8000428c:	00279793          	slli	a5,a5,0x2
80004290:	00e787b3          	add	a5,a5,a4
80004294:	00579793          	slli	a5,a5,0x5
80004298:	f3468713          	addi	a4,a3,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
8000429c:	00e787b3          	add	a5,a5,a4
800042a0:	fd042703          	lw	a4,-48(s0)
800042a4:	00e7a823          	sw	a4,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:37
    applications[slot].nextRun = xTaskGetTickCount() + appPeriod;
800042a8:	85cfe0ef          	jal	ra,80002304 <xTaskGetTickCount>
800042ac:	00050713          	mv	a4,a0
800042b0:	fd842783          	lw	a5,-40(s0)
800042b4:	00f706b3          	add	a3,a4,a5
800042b8:	800207b7          	lui	a5,0x80020
800042bc:	fec42703          	lw	a4,-20(s0)
800042c0:	f3478613          	addi	a2,a5,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
800042c4:	00070793          	mv	a5,a4
800042c8:	00279793          	slli	a5,a5,0x2
800042cc:	00e787b3          	add	a5,a5,a4
800042d0:	00579793          	slli	a5,a5,0x5
800042d4:	00f607b3          	add	a5,a2,a5
800042d8:	08d7a623          	sw	a3,140(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:38
    applications[slot].executed = 0;
800042dc:	800206b7          	lui	a3,0x80020
800042e0:	fec42703          	lw	a4,-20(s0)
800042e4:	00070793          	mv	a5,a4
800042e8:	00279793          	slli	a5,a5,0x2
800042ec:	00e787b3          	add	a5,a5,a4
800042f0:	00579793          	slli	a5,a5,0x5
800042f4:	f3468713          	addi	a4,a3,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
800042f8:	00e787b3          	add	a5,a5,a4
800042fc:	0807a823          	sw	zero,144(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:39
    applications[slot].lastStart = -1;
80004300:	800207b7          	lui	a5,0x80020
80004304:	fec42703          	lw	a4,-20(s0)
80004308:	f3478693          	addi	a3,a5,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
8000430c:	00070793          	mv	a5,a4
80004310:	00279793          	slli	a5,a5,0x2
80004314:	00e787b3          	add	a5,a5,a4
80004318:	00579793          	slli	a5,a5,0x5
8000431c:	00f687b3          	add	a5,a3,a5
80004320:	fff00713          	li	a4,-1
80004324:	08e7aa23          	sw	a4,148(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:40
    applications[slot].finishedTasks = 0;
80004328:	800207b7          	lui	a5,0x80020
8000432c:	fec42703          	lw	a4,-20(s0)
80004330:	f3478693          	addi	a3,a5,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
80004334:	00070793          	mv	a5,a4
80004338:	00279793          	slli	a5,a5,0x2
8000433c:	00e787b3          	add	a5,a5,a4
80004340:	00579793          	slli	a5,a5,0x5
80004344:	00f687b3          	add	a5,a3,a5
80004348:	0807ac23          	sw	zero,152(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:41
    applications[slot].lastFinish = 0;
8000434c:	800207b7          	lui	a5,0x80020
80004350:	fec42703          	lw	a4,-20(s0)
80004354:	f3478693          	addi	a3,a5,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
80004358:	00070793          	mv	a5,a4
8000435c:	00279793          	slli	a5,a5,0x2
80004360:	00e787b3          	add	a5,a5,a4
80004364:	00579793          	slli	a5,a5,0x5
80004368:	00f687b3          	add	a5,a3,a5
8000436c:	0807ae23          	sw	zero,156(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:42
    printsv("New application registered - ID: ", appID);
80004370:	fdc42783          	lw	a5,-36(s0)
80004374:	00078593          	mv	a1,a5
80004378:	800067b7          	lui	a5,0x80006
8000437c:	0a478513          	addi	a0,a5,164 # 800060a4 <__stack_top+0xfffc5854>
80004380:	9e5fe0ef          	jal	ra,80002d64 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:43
    return;
80004384:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:44
}
80004388:	02c12083          	lw	ra,44(sp)
8000438c:	02812403          	lw	s0,40(sp)
80004390:	03010113          	addi	sp,sp,48
80004394:	00008067          	ret

80004398 <API_GetApplicationFreeSlot>:
API_GetApplicationFreeSlot():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:61
}


////////////////////////////////////////////////////////////
// Gets an application slot that is free
unsigned int API_GetApplicationFreeSlot(){
80004398:	fe010113          	addi	sp,sp,-32
8000439c:	00812e23          	sw	s0,28(sp)
800043a0:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:63
    int i;
    for (i = 0; i < NUM_MAX_APPS; i++){
800043a4:	fe042623          	sw	zero,-20(s0)
800043a8:	0400006f          	j	800043e8 <API_GetApplicationFreeSlot+0x50>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:64
        if (applications[i].occupied == FALSE){
800043ac:	800206b7          	lui	a3,0x80020
800043b0:	fec42703          	lw	a4,-20(s0)
800043b4:	00070793          	mv	a5,a4
800043b8:	00279793          	slli	a5,a5,0x2
800043bc:	00e787b3          	add	a5,a5,a4
800043c0:	00579793          	slli	a5,a5,0x5
800043c4:	f3468713          	addi	a4,a3,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
800043c8:	00e787b3          	add	a5,a5,a4
800043cc:	0007a783          	lw	a5,0(a5)
800043d0:	00079663          	bnez	a5,800043dc <API_GetApplicationFreeSlot+0x44>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:65
            return i;
800043d4:	fec42783          	lw	a5,-20(s0)
800043d8:	0200006f          	j	800043f8 <API_GetApplicationFreeSlot+0x60>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:63 (discriminator 2)
    for (i = 0; i < NUM_MAX_APPS; i++){
800043dc:	fec42783          	lw	a5,-20(s0)
800043e0:	00178793          	addi	a5,a5,1
800043e4:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:63 (discriminator 1)
800043e8:	fec42703          	lw	a4,-20(s0)
800043ec:	00b00793          	li	a5,11
800043f0:	fae7dee3          	ble	a4,a5,800043ac <API_GetApplicationFreeSlot+0x14>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:68
        }
    }
    return ERRO;
800043f4:	fff00793          	li	a5,-1
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:69
}
800043f8:	00078513          	mv	a0,a5
800043fc:	01c12403          	lw	s0,28(sp)
80004400:	02010113          	addi	sp,sp,32
80004404:	00008067          	ret

80004408 <API_ApplicationsReset>:
API_ApplicationsReset():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:73

////////////////////////////////////////////////////////////
// Reset applications vector
void API_ApplicationsReset(){
80004408:	fe010113          	addi	sp,sp,-32
8000440c:	00812e23          	sw	s0,28(sp)
80004410:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:75
    int i;
    for (i = 0; i < NUM_MAX_APPS; i++){
80004414:	fe042623          	sw	zero,-20(s0)
80004418:	0340006f          	j	8000444c <API_ApplicationsReset+0x44>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:76 (discriminator 3)
        applications[i].occupied = FALSE;
8000441c:	800206b7          	lui	a3,0x80020
80004420:	fec42703          	lw	a4,-20(s0)
80004424:	00070793          	mv	a5,a4
80004428:	00279793          	slli	a5,a5,0x2
8000442c:	00e787b3          	add	a5,a5,a4
80004430:	00579793          	slli	a5,a5,0x5
80004434:	f3468713          	addi	a4,a3,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
80004438:	00e787b3          	add	a5,a5,a4
8000443c:	0007a023          	sw	zero,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:75 (discriminator 3)
    for (i = 0; i < NUM_MAX_APPS; i++){
80004440:	fec42783          	lw	a5,-20(s0)
80004444:	00178793          	addi	a5,a5,1
80004448:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:75 (discriminator 1)
8000444c:	fec42703          	lw	a4,-20(s0)
80004450:	00b00793          	li	a5,11
80004454:	fce7d4e3          	ble	a4,a5,8000441c <API_ApplicationsReset+0x14>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:78
    }
    return;
80004458:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:79
}
8000445c:	01c12403          	lw	s0,28(sp)
80004460:	02010113          	addi	sp,sp,32
80004464:	00008067          	ret

80004468 <API_TilesReset>:
API_TilesReset():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:83

////////////////////////////////////////////////////////////
// Initialize the Tiles Info
void API_TilesReset(){
80004468:	fe010113          	addi	sp,sp,-32
8000446c:	00812e23          	sw	s0,28(sp)
80004470:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:85
    int i, m, n;
    for (m = 0; m < DIM_X; m++){
80004474:	fe042423          	sw	zero,-24(s0)
80004478:	0ec0006f          	j	80004564 <API_TilesReset+0xfc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:86
        for (n = 0; n < DIM_Y; n++){
8000447c:	fe042223          	sw	zero,-28(s0)
80004480:	0cc0006f          	j	8000454c <API_TilesReset+0xe4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:87
            Tiles[m][n].temperature = 273;
80004484:	800206b7          	lui	a3,0x80020
80004488:	fe842703          	lw	a4,-24(s0)
8000448c:	00070793          	mv	a5,a4
80004490:	00179793          	slli	a5,a5,0x1
80004494:	00e787b3          	add	a5,a5,a4
80004498:	fe442703          	lw	a4,-28(s0)
8000449c:	00e787b3          	add	a5,a5,a4
800044a0:	00479713          	slli	a4,a5,0x4
800044a4:	7a868793          	addi	a5,a3,1960 # 800207a8 <__stack_top+0xfffdff58>
800044a8:	00f707b3          	add	a5,a4,a5
800044ac:	11100713          	li	a4,273
800044b0:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:88
            Tiles[m][n].frequency = 1000;
800044b4:	800206b7          	lui	a3,0x80020
800044b8:	fe842703          	lw	a4,-24(s0)
800044bc:	00070793          	mv	a5,a4
800044c0:	00179793          	slli	a5,a5,0x1
800044c4:	00e787b3          	add	a5,a5,a4
800044c8:	fe442703          	lw	a4,-28(s0)
800044cc:	00e787b3          	add	a5,a5,a4
800044d0:	7a868713          	addi	a4,a3,1960 # 800207a8 <__stack_top+0xfffdff58>
800044d4:	00479793          	slli	a5,a5,0x4
800044d8:	00f707b3          	add	a5,a4,a5
800044dc:	3e800713          	li	a4,1000
800044e0:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:89
            for(i = 0; i < NUM_MAX_TASKS; i++){
800044e4:	fe042623          	sw	zero,-20(s0)
800044e8:	04c0006f          	j	80004534 <API_TilesReset+0xcc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90 (discriminator 3)
                Tiles[m][n].AppTask[i] = NONE;
800044ec:	800206b7          	lui	a3,0x80020
800044f0:	fe842703          	lw	a4,-24(s0)
800044f4:	00070793          	mv	a5,a4
800044f8:	00179793          	slli	a5,a5,0x1
800044fc:	00e787b3          	add	a5,a5,a4
80004500:	fe442703          	lw	a4,-28(s0)
80004504:	00e787b3          	add	a5,a5,a4
80004508:	00279713          	slli	a4,a5,0x2
8000450c:	fec42783          	lw	a5,-20(s0)
80004510:	00f707b3          	add	a5,a4,a5
80004514:	7a868713          	addi	a4,a3,1960 # 800207a8 <__stack_top+0xfffdff58>
80004518:	00279793          	slli	a5,a5,0x2
8000451c:	00f707b3          	add	a5,a4,a5
80004520:	fff00713          	li	a4,-1
80004524:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:89 (discriminator 3)
            for(i = 0; i < NUM_MAX_TASKS; i++){
80004528:	fec42783          	lw	a5,-20(s0)
8000452c:	00178793          	addi	a5,a5,1
80004530:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:89 (discriminator 1)
80004534:	fec42703          	lw	a4,-20(s0)
80004538:	00100793          	li	a5,1
8000453c:	fae7d8e3          	ble	a4,a5,800044ec <API_TilesReset+0x84>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:86 (discriminator 2)
        for (n = 0; n < DIM_Y; n++){
80004540:	fe442783          	lw	a5,-28(s0)
80004544:	00178793          	addi	a5,a5,1
80004548:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:86 (discriminator 1)
8000454c:	fe442703          	lw	a4,-28(s0)
80004550:	00200793          	li	a5,2
80004554:	f2e7d8e3          	ble	a4,a5,80004484 <API_TilesReset+0x1c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:85 (discriminator 2)
    for (m = 0; m < DIM_X; m++){
80004558:	fe842783          	lw	a5,-24(s0)
8000455c:	00178793          	addi	a5,a5,1
80004560:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:85 (discriminator 1)
80004564:	fe842703          	lw	a4,-24(s0)
80004568:	00200793          	li	a5,2
8000456c:	f0e7d8e3          	ble	a4,a5,8000447c <API_TilesReset+0x14>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:94
            }
        }
    }    
    return;
80004570:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:95
}
80004574:	01c12403          	lw	s0,28(sp)
80004578:	02010113          	addi	sp,sp,32
8000457c:	00008067          	ret

80004580 <GeneratePatternMatrix>:
GeneratePatternMatrix():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:98

// Generates the Pattern Matrix for Pattern mapping
void GeneratePatternMatrix(){
80004580:	fe010113          	addi	sp,sp,-32
80004584:	00812e23          	sw	s0,28(sp)
80004588:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:100
    int i, aux;
    aux = 0;
8000458c:	fe042423          	sw	zero,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:101
    priorityPointer = 0;
80004590:	800207b7          	lui	a5,0x80020
80004594:	7a07a223          	sw	zero,1956(a5) # 800207a4 <__stack_top+0xfffdff54>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:103
    //prints("Testando Pattern: \n");
    for(i=0; i<(DIM_X*DIM_Y); i++){
80004598:	fe042623          	sw	zero,-20(s0)
8000459c:	0700006f          	j	8000460c <GeneratePatternMatrix+0x8c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:105
        //printi(i); prints(": "); printi(aux); prints("\n");
        priorityMatrix[i] = (aux / DIM_X << 8) | aux % DIM_X;
800045a0:	fe842703          	lw	a4,-24(s0)
800045a4:	00300793          	li	a5,3
800045a8:	02f747b3          	div	a5,a4,a5
800045ac:	00879713          	slli	a4,a5,0x8
800045b0:	fe842683          	lw	a3,-24(s0)
800045b4:	00300793          	li	a5,3
800045b8:	02f6e7b3          	rem	a5,a3,a5
800045bc:	00f767b3          	or	a5,a4,a5
800045c0:	00078693          	mv	a3,a5
800045c4:	800207b7          	lui	a5,0x80020
800045c8:	fec42703          	lw	a4,-20(s0)
800045cc:	00271713          	slli	a4,a4,0x2
800045d0:	f1078793          	addi	a5,a5,-240 # 8001ff10 <__stack_top+0xfffdf6c0>
800045d4:	00f707b3          	add	a5,a4,a5
800045d8:	00d7a023          	sw	a3,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:124
            else{
                aux = 1;
            }
        } 
        else{
            if(aux<=((DIM_X*DIM_Y)-3))
800045dc:	fe842703          	lw	a4,-24(s0)
800045e0:	00600793          	li	a5,6
800045e4:	00e7ca63          	blt	a5,a4,800045f8 <GeneratePatternMatrix+0x78>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:125
                aux += 2;
800045e8:	fe842783          	lw	a5,-24(s0)
800045ec:	00278793          	addi	a5,a5,2
800045f0:	fef42423          	sw	a5,-24(s0)
800045f4:	00c0006f          	j	80004600 <GeneratePatternMatrix+0x80>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:127
            else
                aux = 1;
800045f8:	00100793          	li	a5,1
800045fc:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:103 (discriminator 2)
    for(i=0; i<(DIM_X*DIM_Y); i++){
80004600:	fec42783          	lw	a5,-20(s0)
80004604:	00178793          	addi	a5,a5,1
80004608:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:103 (discriminator 1)
8000460c:	fec42703          	lw	a4,-20(s0)
80004610:	00800793          	li	a5,8
80004614:	f8e7d6e3          	ble	a4,a5,800045a0 <GeneratePatternMatrix+0x20>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:130
        }    
    }
    return;
80004618:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:131
}
8000461c:	01c12403          	lw	s0,28(sp)
80004620:	02010113          	addi	sp,sp,32
80004624:	00008067          	ret

80004628 <API_AllocateTasks>:
API_AllocateTasks():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:134

// Checks if there is some task to allocate...
void API_AllocateTasks(unsigned int tick){
80004628:	fd010113          	addi	sp,sp,-48
8000462c:	02112623          	sw	ra,44(sp)
80004630:	02812423          	sw	s0,40(sp)
80004634:	02912223          	sw	s1,36(sp)
80004638:	03010413          	addi	s0,sp,48
8000463c:	fca42e23          	sw	a0,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:138
    int i, j;
    int addr, slot;
    // Iterate around every possible application
    for (i = 0; i < NUM_MAX_APPS; i++){
80004640:	fe042623          	sw	zero,-20(s0)
80004644:	2980006f          	j	800048dc <API_AllocateTasks+0x2b4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:140
        // If the application is valid
        if (applications[i].occupied == TRUE){
80004648:	800206b7          	lui	a3,0x80020
8000464c:	fec42703          	lw	a4,-20(s0)
80004650:	00070793          	mv	a5,a4
80004654:	00279793          	slli	a5,a5,0x2
80004658:	00e787b3          	add	a5,a5,a4
8000465c:	00579793          	slli	a5,a5,0x5
80004660:	f3468713          	addi	a4,a3,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
80004664:	00e787b3          	add	a5,a5,a4
80004668:	0007a703          	lw	a4,0(a5)
8000466c:	00100793          	li	a5,1
80004670:	26f71063          	bne	a4,a5,800048d0 <API_AllocateTasks+0x2a8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:143

            // If the nextRun of this application is right now, then release each task!
            if(applications[i].nextRun <= tick && applications[i].nextRun != applications[i].lastStart){
80004674:	800207b7          	lui	a5,0x80020
80004678:	fec42703          	lw	a4,-20(s0)
8000467c:	f3478693          	addi	a3,a5,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
80004680:	00070793          	mv	a5,a4
80004684:	00279793          	slli	a5,a5,0x2
80004688:	00e787b3          	add	a5,a5,a4
8000468c:	00579793          	slli	a5,a5,0x5
80004690:	00f687b3          	add	a5,a3,a5
80004694:	08c7a783          	lw	a5,140(a5)
80004698:	fdc42703          	lw	a4,-36(s0)
8000469c:	22f76a63          	bltu	a4,a5,800048d0 <API_AllocateTasks+0x2a8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:143 (discriminator 1)
800046a0:	800207b7          	lui	a5,0x80020
800046a4:	fec42703          	lw	a4,-20(s0)
800046a8:	f3478693          	addi	a3,a5,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
800046ac:	00070793          	mv	a5,a4
800046b0:	00279793          	slli	a5,a5,0x2
800046b4:	00e787b3          	add	a5,a5,a4
800046b8:	00579793          	slli	a5,a5,0x5
800046bc:	00f687b3          	add	a5,a3,a5
800046c0:	08c7a683          	lw	a3,140(a5)
800046c4:	800207b7          	lui	a5,0x80020
800046c8:	fec42703          	lw	a4,-20(s0)
800046cc:	f3478613          	addi	a2,a5,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
800046d0:	00070793          	mv	a5,a4
800046d4:	00279793          	slli	a5,a5,0x2
800046d8:	00e787b3          	add	a5,a5,a4
800046dc:	00579793          	slli	a5,a5,0x5
800046e0:	00f607b3          	add	a5,a2,a5
800046e4:	0947a783          	lw	a5,148(a5)
800046e8:	1ef68463          	beq	a3,a5,800048d0 <API_AllocateTasks+0x2a8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:146

                // If the system has space to accept every task
                if(applications[i].numTasks <= API_GetSystemTasksSlots()){
800046ec:	800206b7          	lui	a3,0x80020
800046f0:	fec42703          	lw	a4,-20(s0)
800046f4:	00070793          	mv	a5,a4
800046f8:	00279793          	slli	a5,a5,0x2
800046fc:	00e787b3          	add	a5,a5,a4
80004700:	00579793          	slli	a5,a5,0x5
80004704:	f3468713          	addi	a4,a3,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
80004708:	00e787b3          	add	a5,a5,a4
8000470c:	0107a483          	lw	s1,16(a5)
80004710:	450000ef          	jal	ra,80004b60 <API_GetSystemTasksSlots>
80004714:	00050793          	mv	a5,a0
80004718:	1a97ec63          	bltu	a5,s1,800048d0 <API_AllocateTasks+0x2a8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:149
                    
                    // Iterates around each task of this application
                    for(j = 0; j < applications[i].numTasks; j++){
8000471c:	fe042423          	sw	zero,-24(s0)
80004720:	13c0006f          	j	8000485c <API_AllocateTasks+0x234>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:152

                        for(;;){
                            addr = getNextPriorityAddr();
80004724:	1dc000ef          	jal	ra,80004900 <getNextPriorityAddr>
80004728:	00050793          	mv	a5,a0
8000472c:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:153
                            slot = API_GetTaskSlotFromTile(addr, i, j);
80004730:	fe442783          	lw	a5,-28(s0)
80004734:	fec42703          	lw	a4,-20(s0)
80004738:	fe842683          	lw	a3,-24(s0)
8000473c:	00068613          	mv	a2,a3
80004740:	00070593          	mv	a1,a4
80004744:	00078513          	mv	a0,a5
80004748:	304000ef          	jal	ra,80004a4c <API_GetTaskSlotFromTile>
8000474c:	00050793          	mv	a5,a0
80004750:	fef42023          	sw	a5,-32(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:154
                            if (slot != ERRO)
80004754:	fe042703          	lw	a4,-32(s0)
80004758:	fff00793          	li	a5,-1
8000475c:	00f71463          	bne	a4,a5,80004764 <API_AllocateTasks+0x13c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:152
                            addr = getNextPriorityAddr();
80004760:	fc5ff06f          	j	80004724 <API_AllocateTasks+0xfc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:155
                                break;
80004764:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:157
                        }
                        applications[i].tasks[j].status = TASK_ALLOCATING;
80004768:	80020737          	lui	a4,0x80020
8000476c:	fe842783          	lw	a5,-24(s0)
80004770:	fec42683          	lw	a3,-20(s0)
80004774:	f3470613          	addi	a2,a4,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
80004778:	00078713          	mv	a4,a5
8000477c:	00171713          	slli	a4,a4,0x1
80004780:	00f70733          	add	a4,a4,a5
80004784:	00271793          	slli	a5,a4,0x2
80004788:	00078713          	mv	a4,a5
8000478c:	00068793          	mv	a5,a3
80004790:	00279793          	slli	a5,a5,0x2
80004794:	00d787b3          	add	a5,a5,a3
80004798:	00579793          	slli	a5,a5,0x5
8000479c:	00f707b3          	add	a5,a4,a5
800047a0:	00f607b3          	add	a5,a2,a5
800047a4:	00300713          	li	a4,3
800047a8:	00e7aa23          	sw	a4,20(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:158
                        applications[i].tasks[j].addr = addr;
800047ac:	fe442603          	lw	a2,-28(s0)
800047b0:	80020737          	lui	a4,0x80020
800047b4:	fe842783          	lw	a5,-24(s0)
800047b8:	fec42683          	lw	a3,-20(s0)
800047bc:	f3470593          	addi	a1,a4,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
800047c0:	00078713          	mv	a4,a5
800047c4:	00171713          	slli	a4,a4,0x1
800047c8:	00f70733          	add	a4,a4,a5
800047cc:	00271793          	slli	a5,a4,0x2
800047d0:	00078713          	mv	a4,a5
800047d4:	00068793          	mv	a5,a3
800047d8:	00279793          	slli	a5,a5,0x2
800047dc:	00d787b3          	add	a5,a5,a3
800047e0:	00579793          	slli	a5,a5,0x5
800047e4:	00f707b3          	add	a5,a4,a5
800047e8:	00f587b3          	add	a5,a1,a5
800047ec:	00c7ac23          	sw	a2,24(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:159
                        applications[i].tasks[j].slot = slot;
800047f0:	fe042603          	lw	a2,-32(s0)
800047f4:	80020737          	lui	a4,0x80020
800047f8:	fe842783          	lw	a5,-24(s0)
800047fc:	fec42683          	lw	a3,-20(s0)
80004800:	f3470593          	addi	a1,a4,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
80004804:	00078713          	mv	a4,a5
80004808:	00171713          	slli	a4,a4,0x1
8000480c:	00f70733          	add	a4,a4,a5
80004810:	00271793          	slli	a5,a4,0x2
80004814:	00078713          	mv	a4,a5
80004818:	00068793          	mv	a5,a3
8000481c:	00279793          	slli	a5,a5,0x2
80004820:	00d787b3          	add	a5,a5,a3
80004824:	00579793          	slli	a5,a5,0x5
80004828:	00f707b3          	add	a5,a4,a5
8000482c:	00f587b3          	add	a5,a1,a5
80004830:	00c7ae23          	sw	a2,28(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:160
                        API_RepositoryAllocation(i, j, addr);
80004834:	fec42783          	lw	a5,-20(s0)
80004838:	fe842703          	lw	a4,-24(s0)
8000483c:	fe442683          	lw	a3,-28(s0)
80004840:	00068613          	mv	a2,a3
80004844:	00070593          	mv	a1,a4
80004848:	00078513          	mv	a0,a5
8000484c:	420000ef          	jal	ra,80004c6c <API_RepositoryAllocation>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:149
                    for(j = 0; j < applications[i].numTasks; j++){
80004850:	fe842783          	lw	a5,-24(s0)
80004854:	00178793          	addi	a5,a5,1
80004858:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:149 (discriminator 1)
8000485c:	800206b7          	lui	a3,0x80020
80004860:	fec42703          	lw	a4,-20(s0)
80004864:	00070793          	mv	a5,a4
80004868:	00279793          	slli	a5,a5,0x2
8000486c:	00e787b3          	add	a5,a5,a4
80004870:	00579793          	slli	a5,a5,0x5
80004874:	f3468713          	addi	a4,a3,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
80004878:	00e787b3          	add	a5,a5,a4
8000487c:	0107a703          	lw	a4,16(a5)
80004880:	fe842783          	lw	a5,-24(s0)
80004884:	eae7e0e3          	bltu	a5,a4,80004724 <API_AllocateTasks+0xfc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:164
                    }

                    // Resets the lastStart
                    applications[i].lastStart = applications[i].nextRun;
80004888:	800207b7          	lui	a5,0x80020
8000488c:	fec42703          	lw	a4,-20(s0)
80004890:	f3478693          	addi	a3,a5,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
80004894:	00070793          	mv	a5,a4
80004898:	00279793          	slli	a5,a5,0x2
8000489c:	00e787b3          	add	a5,a5,a4
800048a0:	00579793          	slli	a5,a5,0x5
800048a4:	00f687b3          	add	a5,a3,a5
800048a8:	08c7a683          	lw	a3,140(a5)
800048ac:	800207b7          	lui	a5,0x80020
800048b0:	fec42703          	lw	a4,-20(s0)
800048b4:	f3478613          	addi	a2,a5,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
800048b8:	00070793          	mv	a5,a4
800048bc:	00279793          	slli	a5,a5,0x2
800048c0:	00e787b3          	add	a5,a5,a4
800048c4:	00579793          	slli	a5,a5,0x5
800048c8:	00f607b3          	add	a5,a2,a5
800048cc:	08d7aa23          	sw	a3,148(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:138 (discriminator 2)
    for (i = 0; i < NUM_MAX_APPS; i++){
800048d0:	fec42783          	lw	a5,-20(s0)
800048d4:	00178793          	addi	a5,a5,1
800048d8:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:138 (discriminator 1)
800048dc:	fec42703          	lw	a4,-20(s0)
800048e0:	00b00793          	li	a5,11
800048e4:	d6e7d2e3          	ble	a4,a5,80004648 <API_AllocateTasks+0x20>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:170
                }
            }
        }
    }

    return;
800048e8:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:171
}
800048ec:	02c12083          	lw	ra,44(sp)
800048f0:	02812403          	lw	s0,40(sp)
800048f4:	02412483          	lw	s1,36(sp)
800048f8:	03010113          	addi	sp,sp,48
800048fc:	00008067          	ret

80004900 <getNextPriorityAddr>:
getNextPriorityAddr():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:174

// Gets the address of the next tile in the priority list 
unsigned int getNextPriorityAddr(){
80004900:	fe010113          	addi	sp,sp,-32
80004904:	00112e23          	sw	ra,28(sp)
80004908:	00812c23          	sw	s0,24(sp)
8000490c:	00912a23          	sw	s1,20(sp)
80004910:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:176
    int i;
    unsigned int addr = makeAddress(0,0);
80004914:	00000593          	li	a1,0
80004918:	00000513          	li	a0,0
8000491c:	d21fe0ef          	jal	ra,8000363c <makeAddress>
80004920:	fea42423          	sw	a0,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:179
    for(;;){
        // Checks if it's a valid address
        if (priorityMatrix[priorityPointer] != makeAddress(0,0)){
80004924:	800207b7          	lui	a5,0x80020
80004928:	7a47a703          	lw	a4,1956(a5) # 800207a4 <__stack_top+0xfffdff54>
8000492c:	800207b7          	lui	a5,0x80020
80004930:	00271713          	slli	a4,a4,0x2
80004934:	f1078793          	addi	a5,a5,-240 # 8001ff10 <__stack_top+0xfffdf6c0>
80004938:	00f707b3          	add	a5,a4,a5
8000493c:	0007a483          	lw	s1,0(a5)
80004940:	00000593          	li	a1,0
80004944:	00000513          	li	a0,0
80004948:	cf5fe0ef          	jal	ra,8000363c <makeAddress>
8000494c:	00050793          	mv	a5,a0
80004950:	08f48a63          	beq	s1,a5,800049e4 <getNextPriorityAddr+0xe4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:180
            for(i = 0; i < NUM_MAX_TASKS; i++){
80004954:	fe042623          	sw	zero,-20(s0)
80004958:	0800006f          	j	800049d8 <getNextPriorityAddr+0xd8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:181
                if (Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] == NONE)
8000495c:	fe842503          	lw	a0,-24(s0)
80004960:	cacfe0ef          	jal	ra,80002e0c <getXpos>
80004964:	00050493          	mv	s1,a0
80004968:	fe842503          	lw	a0,-24(s0)
8000496c:	cccfe0ef          	jal	ra,80002e38 <getYpos>
80004970:	00050693          	mv	a3,a0
80004974:	80020737          	lui	a4,0x80020
80004978:	00048793          	mv	a5,s1
8000497c:	00179793          	slli	a5,a5,0x1
80004980:	009787b3          	add	a5,a5,s1
80004984:	00d787b3          	add	a5,a5,a3
80004988:	00279693          	slli	a3,a5,0x2
8000498c:	fec42783          	lw	a5,-20(s0)
80004990:	00f687b3          	add	a5,a3,a5
80004994:	7a870713          	addi	a4,a4,1960 # 800207a8 <__stack_top+0xfffdff58>
80004998:	00279793          	slli	a5,a5,0x2
8000499c:	00f707b3          	add	a5,a4,a5
800049a0:	0087a703          	lw	a4,8(a5)
800049a4:	fff00793          	li	a5,-1
800049a8:	02f71263          	bne	a4,a5,800049cc <getNextPriorityAddr+0xcc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:182
                    addr = priorityMatrix[priorityPointer];
800049ac:	800207b7          	lui	a5,0x80020
800049b0:	7a47a703          	lw	a4,1956(a5) # 800207a4 <__stack_top+0xfffdff54>
800049b4:	800207b7          	lui	a5,0x80020
800049b8:	00271713          	slli	a4,a4,0x2
800049bc:	f1078793          	addi	a5,a5,-240 # 8001ff10 <__stack_top+0xfffdf6c0>
800049c0:	00f707b3          	add	a5,a4,a5
800049c4:	0007a783          	lw	a5,0(a5)
800049c8:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:180 (discriminator 2)
            for(i = 0; i < NUM_MAX_TASKS; i++){
800049cc:	fec42783          	lw	a5,-20(s0)
800049d0:	00178793          	addi	a5,a5,1
800049d4:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:180 (discriminator 1)
800049d8:	fec42703          	lw	a4,-20(s0)
800049dc:	00100793          	li	a5,1
800049e0:	f6e7dee3          	ble	a4,a5,8000495c <getNextPriorityAddr+0x5c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:187
            }
        }

        // Increments the priorityPointer
        priorityPointer++;
800049e4:	800207b7          	lui	a5,0x80020
800049e8:	7a47a783          	lw	a5,1956(a5) # 800207a4 <__stack_top+0xfffdff54>
800049ec:	00178713          	addi	a4,a5,1
800049f0:	800207b7          	lui	a5,0x80020
800049f4:	7ae7a223          	sw	a4,1956(a5) # 800207a4 <__stack_top+0xfffdff54>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:188
        if (priorityPointer == DIM_X*DIM_Y)
800049f8:	800207b7          	lui	a5,0x80020
800049fc:	7a47a703          	lw	a4,1956(a5) # 800207a4 <__stack_top+0xfffdff54>
80004a00:	00900793          	li	a5,9
80004a04:	00f71663          	bne	a4,a5,80004a10 <getNextPriorityAddr+0x110>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:189
            priorityPointer = 0;
80004a08:	800207b7          	lui	a5,0x80020
80004a0c:	7a07a223          	sw	zero,1956(a5) # 800207a4 <__stack_top+0xfffdff54>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:192

        // If we found a new valid address, return
        if( addr != makeAddress(0,0))
80004a10:	00000593          	li	a1,0
80004a14:	00000513          	li	a0,0
80004a18:	c25fe0ef          	jal	ra,8000363c <makeAddress>
80004a1c:	00050713          	mv	a4,a0
80004a20:	fe842783          	lw	a5,-24(s0)
80004a24:	00e79463          	bne	a5,a4,80004a2c <getNextPriorityAddr+0x12c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:179
        if (priorityMatrix[priorityPointer] != makeAddress(0,0)){
80004a28:	efdff06f          	j	80004924 <getNextPriorityAddr+0x24>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:193
            break;
80004a2c:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:195
    }
    return addr;
80004a30:	fe842783          	lw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:196
}
80004a34:	00078513          	mv	a0,a5
80004a38:	01c12083          	lw	ra,28(sp)
80004a3c:	01812403          	lw	s0,24(sp)
80004a40:	01412483          	lw	s1,20(sp)
80004a44:	02010113          	addi	sp,sp,32
80004a48:	00008067          	ret

80004a4c <API_GetTaskSlotFromTile>:
API_GetTaskSlotFromTile():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:199

// Gets a free slot from one given tile
unsigned int API_GetTaskSlotFromTile(unsigned int addr, unsigned int app, unsigned int task){
80004a4c:	fd010113          	addi	sp,sp,-48
80004a50:	02112623          	sw	ra,44(sp)
80004a54:	02812423          	sw	s0,40(sp)
80004a58:	02912223          	sw	s1,36(sp)
80004a5c:	03212023          	sw	s2,32(sp)
80004a60:	03010413          	addi	s0,sp,48
80004a64:	fca42e23          	sw	a0,-36(s0)
80004a68:	fcb42c23          	sw	a1,-40(s0)
80004a6c:	fcc42a23          	sw	a2,-44(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:201
    int i;
    for(i = 0; i < NUM_MAX_TASKS; i++){
80004a70:	fe042623          	sw	zero,-20(s0)
80004a74:	0c00006f          	j	80004b34 <API_GetTaskSlotFromTile+0xe8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:202
        if(Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] == NONE){
80004a78:	fdc42503          	lw	a0,-36(s0)
80004a7c:	b90fe0ef          	jal	ra,80002e0c <getXpos>
80004a80:	00050493          	mv	s1,a0
80004a84:	fdc42503          	lw	a0,-36(s0)
80004a88:	bb0fe0ef          	jal	ra,80002e38 <getYpos>
80004a8c:	00050693          	mv	a3,a0
80004a90:	80020737          	lui	a4,0x80020
80004a94:	00048793          	mv	a5,s1
80004a98:	00179793          	slli	a5,a5,0x1
80004a9c:	009787b3          	add	a5,a5,s1
80004aa0:	00d787b3          	add	a5,a5,a3
80004aa4:	00279693          	slli	a3,a5,0x2
80004aa8:	fec42783          	lw	a5,-20(s0)
80004aac:	00f687b3          	add	a5,a3,a5
80004ab0:	7a870713          	addi	a4,a4,1960 # 800207a8 <__stack_top+0xfffdff58>
80004ab4:	00279793          	slli	a5,a5,0x2
80004ab8:	00f707b3          	add	a5,a4,a5
80004abc:	0087a703          	lw	a4,8(a5)
80004ac0:	fff00793          	li	a5,-1
80004ac4:	06f71263          	bne	a4,a5,80004b28 <API_GetTaskSlotFromTile+0xdc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:203
            Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] = (app << 16) | task;
80004ac8:	fd842783          	lw	a5,-40(s0)
80004acc:	01079493          	slli	s1,a5,0x10
80004ad0:	fdc42503          	lw	a0,-36(s0)
80004ad4:	b38fe0ef          	jal	ra,80002e0c <getXpos>
80004ad8:	00050913          	mv	s2,a0
80004adc:	fdc42503          	lw	a0,-36(s0)
80004ae0:	b58fe0ef          	jal	ra,80002e38 <getYpos>
80004ae4:	00050613          	mv	a2,a0
80004ae8:	fd442783          	lw	a5,-44(s0)
80004aec:	00f4e733          	or	a4,s1,a5
80004af0:	800206b7          	lui	a3,0x80020
80004af4:	00090793          	mv	a5,s2
80004af8:	00179793          	slli	a5,a5,0x1
80004afc:	012787b3          	add	a5,a5,s2
80004b00:	00c787b3          	add	a5,a5,a2
80004b04:	00279613          	slli	a2,a5,0x2
80004b08:	fec42783          	lw	a5,-20(s0)
80004b0c:	00f607b3          	add	a5,a2,a5
80004b10:	7a868693          	addi	a3,a3,1960 # 800207a8 <__stack_top+0xfffdff58>
80004b14:	00279793          	slli	a5,a5,0x2
80004b18:	00f687b3          	add	a5,a3,a5
80004b1c:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:204
            return i;
80004b20:	fec42783          	lw	a5,-20(s0)
80004b24:	0200006f          	j	80004b44 <API_GetTaskSlotFromTile+0xf8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:201 (discriminator 2)
    for(i = 0; i < NUM_MAX_TASKS; i++){
80004b28:	fec42783          	lw	a5,-20(s0)
80004b2c:	00178793          	addi	a5,a5,1
80004b30:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:201 (discriminator 1)
80004b34:	fec42703          	lw	a4,-20(s0)
80004b38:	00100793          	li	a5,1
80004b3c:	f2e7dee3          	ble	a4,a5,80004a78 <API_GetTaskSlotFromTile+0x2c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:207
        }
    }
    return ERRO;
80004b40:	fff00793          	li	a5,-1
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:208
}
80004b44:	00078513          	mv	a0,a5
80004b48:	02c12083          	lw	ra,44(sp)
80004b4c:	02812403          	lw	s0,40(sp)
80004b50:	02412483          	lw	s1,36(sp)
80004b54:	02012903          	lw	s2,32(sp)
80004b58:	03010113          	addi	sp,sp,48
80004b5c:	00008067          	ret

80004b60 <API_GetSystemTasksSlots>:
API_GetSystemTasksSlots():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:212


// Iterates around the system tiles to sum the amount of tasks slots available
unsigned int API_GetSystemTasksSlots(){
80004b60:	fe010113          	addi	sp,sp,-32
80004b64:	00112e23          	sw	ra,28(sp)
80004b68:	00812c23          	sw	s0,24(sp)
80004b6c:	00912a23          	sw	s1,20(sp)
80004b70:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:214
    int m, n, i, sum;
    sum = 0;
80004b74:	fe042023          	sw	zero,-32(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:215
    for(m = 0; m < DIM_X; m++){
80004b78:	fe042623          	sw	zero,-20(s0)
80004b7c:	0c80006f          	j	80004c44 <API_GetSystemTasksSlots+0xe4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:216
        for(n = 0; n < DIM_Y; n++){
80004b80:	fe042423          	sw	zero,-24(s0)
80004b84:	0a80006f          	j	80004c2c <API_GetSystemTasksSlots+0xcc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:217
            if(makeAddress(m,n) != makeAddress(0,0)){
80004b88:	fec42783          	lw	a5,-20(s0)
80004b8c:	fe842703          	lw	a4,-24(s0)
80004b90:	00070593          	mv	a1,a4
80004b94:	00078513          	mv	a0,a5
80004b98:	aa5fe0ef          	jal	ra,8000363c <makeAddress>
80004b9c:	00050493          	mv	s1,a0
80004ba0:	00000593          	li	a1,0
80004ba4:	00000513          	li	a0,0
80004ba8:	a95fe0ef          	jal	ra,8000363c <makeAddress>
80004bac:	00050793          	mv	a5,a0
80004bb0:	06f48863          	beq	s1,a5,80004c20 <API_GetSystemTasksSlots+0xc0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:218
                for(i = 0; i < NUM_MAX_TASKS; i++){
80004bb4:	fe042223          	sw	zero,-28(s0)
80004bb8:	05c0006f          	j	80004c14 <API_GetSystemTasksSlots+0xb4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:219
                    if(Tiles[m][n].AppTask[i] == NONE){
80004bbc:	800206b7          	lui	a3,0x80020
80004bc0:	fec42703          	lw	a4,-20(s0)
80004bc4:	00070793          	mv	a5,a4
80004bc8:	00179793          	slli	a5,a5,0x1
80004bcc:	00e787b3          	add	a5,a5,a4
80004bd0:	fe842703          	lw	a4,-24(s0)
80004bd4:	00e787b3          	add	a5,a5,a4
80004bd8:	00279713          	slli	a4,a5,0x2
80004bdc:	fe442783          	lw	a5,-28(s0)
80004be0:	00f707b3          	add	a5,a4,a5
80004be4:	7a868713          	addi	a4,a3,1960 # 800207a8 <__stack_top+0xfffdff58>
80004be8:	00279793          	slli	a5,a5,0x2
80004bec:	00f707b3          	add	a5,a4,a5
80004bf0:	0087a703          	lw	a4,8(a5)
80004bf4:	fff00793          	li	a5,-1
80004bf8:	00f71863          	bne	a4,a5,80004c08 <API_GetSystemTasksSlots+0xa8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:220
                        sum++;
80004bfc:	fe042783          	lw	a5,-32(s0)
80004c00:	00178793          	addi	a5,a5,1
80004c04:	fef42023          	sw	a5,-32(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:218 (discriminator 2)
                for(i = 0; i < NUM_MAX_TASKS; i++){
80004c08:	fe442783          	lw	a5,-28(s0)
80004c0c:	00178793          	addi	a5,a5,1
80004c10:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:218 (discriminator 1)
80004c14:	fe442703          	lw	a4,-28(s0)
80004c18:	00100793          	li	a5,1
80004c1c:	fae7d0e3          	ble	a4,a5,80004bbc <API_GetSystemTasksSlots+0x5c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:216 (discriminator 2)
        for(n = 0; n < DIM_Y; n++){
80004c20:	fe842783          	lw	a5,-24(s0)
80004c24:	00178793          	addi	a5,a5,1
80004c28:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:216 (discriminator 1)
80004c2c:	fe842703          	lw	a4,-24(s0)
80004c30:	00200793          	li	a5,2
80004c34:	f4e7dae3          	ble	a4,a5,80004b88 <API_GetSystemTasksSlots+0x28>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:215 (discriminator 2)
    for(m = 0; m < DIM_X; m++){
80004c38:	fec42783          	lw	a5,-20(s0)
80004c3c:	00178793          	addi	a5,a5,1
80004c40:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:215 (discriminator 1)
80004c44:	fec42703          	lw	a4,-20(s0)
80004c48:	00200793          	li	a5,2
80004c4c:	f2e7dae3          	ble	a4,a5,80004b80 <API_GetSystemTasksSlots+0x20>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:226
                    }
                }
            }
        }
    }
    return sum;
80004c50:	fe042783          	lw	a5,-32(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:227
}
80004c54:	00078513          	mv	a0,a5
80004c58:	01c12083          	lw	ra,28(sp)
80004c5c:	01812403          	lw	s0,24(sp)
80004c60:	01412483          	lw	s1,20(sp)
80004c64:	02010113          	addi	sp,sp,32
80004c68:	00008067          	ret

80004c6c <API_RepositoryAllocation>:
API_RepositoryAllocation():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:229

void API_RepositoryAllocation(unsigned int app, unsigned int task, unsigned int dest_addr){
80004c6c:	fd010113          	addi	sp,sp,-48
80004c70:	02112623          	sw	ra,44(sp)
80004c74:	02812423          	sw	s0,40(sp)
80004c78:	03010413          	addi	s0,sp,48
80004c7c:	fca42e23          	sw	a0,-36(s0)
80004c80:	fcb42c23          	sw	a1,-40(s0)
80004c84:	fcc42a23          	sw	a2,-44(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:232
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80004c88:	431000ef          	jal	ra,800058b8 <API_GetServiceSlot>
80004c8c:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:233
        if(mySlot == PIPE_FULL) vTaskDelay(1);
80004c90:	fec42703          	lw	a4,-20(s0)
80004c94:	fdfe07b7          	lui	a5,0xfdfe0
80004c98:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f5ad>
80004c9c:	00f71663          	bne	a4,a5,80004ca8 <API_RepositoryAllocation+0x3c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:233 (discriminator 1)
80004ca0:	00100513          	li	a0,1
80004ca4:	bc4fd0ef          	jal	ra,80002068 <vTaskDelay>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:234
    }while(mySlot == PIPE_FULL);
80004ca8:	fec42703          	lw	a4,-20(s0)
80004cac:	fdfe07b7          	lui	a5,0xfdfe0
80004cb0:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f5ad>
80004cb4:	fcf70ae3          	beq	a4,a5,80004c88 <API_RepositoryAllocation+0x1c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:235
    printsv("I got a free service slot!! -> ", mySlot);
80004cb8:	fec42783          	lw	a5,-20(s0)
80004cbc:	00078593          	mv	a1,a5
80004cc0:	800067b7          	lui	a5,0x80006
80004cc4:	0c878513          	addi	a0,a5,200 # 800060c8 <__stack_top+0xfffc5878>
80004cc8:	89cfe0ef          	jal	ra,80002d64 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:237

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80004ccc:	8001f7b7          	lui	a5,0x8001f
80004cd0:	fec42703          	lw	a4,-20(s0)
80004cd4:	4ac78693          	addi	a3,a5,1196 # 8001f4ac <__stack_top+0xfffdec5c>
80004cd8:	00070793          	mv	a5,a4
80004cdc:	00479793          	slli	a5,a5,0x4
80004ce0:	40e787b3          	sub	a5,a5,a4
80004ce4:	00279793          	slli	a5,a5,0x2
80004ce8:	00f687b3          	add	a5,a3,a5
80004cec:	feff0737          	lui	a4,0xfeff0
80004cf0:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efaf6ae>
80004cf4:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:239

    ServicePipe[mySlot].header.header           = makeAddress(0, 0) | PERIPH_SOUTH;
80004cf8:	00000593          	li	a1,0
80004cfc:	00000513          	li	a0,0
80004d00:	93dfe0ef          	jal	ra,8000363c <makeAddress>
80004d04:	00050713          	mv	a4,a0
80004d08:	000407b7          	lui	a5,0x40
80004d0c:	00f766b3          	or	a3,a4,a5
80004d10:	8001f7b7          	lui	a5,0x8001f
80004d14:	fec42703          	lw	a4,-20(s0)
80004d18:	4ac78613          	addi	a2,a5,1196 # 8001f4ac <__stack_top+0xfffdec5c>
80004d1c:	00070793          	mv	a5,a4
80004d20:	00479793          	slli	a5,a5,0x4
80004d24:	40e787b3          	sub	a5,a5,a4
80004d28:	00279793          	slli	a5,a5,0x2
80004d2c:	00f607b3          	add	a5,a2,a5
80004d30:	00d7a423          	sw	a3,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:240
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80004d34:	8001f7b7          	lui	a5,0x8001f
80004d38:	fec42703          	lw	a4,-20(s0)
80004d3c:	4ac78693          	addi	a3,a5,1196 # 8001f4ac <__stack_top+0xfffdec5c>
80004d40:	00070793          	mv	a5,a4
80004d44:	00479793          	slli	a5,a5,0x4
80004d48:	40e787b3          	sub	a5,a5,a4
80004d4c:	00279793          	slli	a5,a5,0x2
80004d50:	00f687b3          	add	a5,a3,a5
80004d54:	00b00713          	li	a4,11
80004d58:	00e7a623          	sw	a4,12(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:241
    ServicePipe[mySlot].header.service          = TASK_ALLOCATION_SEND;
80004d5c:	8001f7b7          	lui	a5,0x8001f
80004d60:	fec42703          	lw	a4,-20(s0)
80004d64:	4ac78693          	addi	a3,a5,1196 # 8001f4ac <__stack_top+0xfffdec5c>
80004d68:	00070793          	mv	a5,a4
80004d6c:	00479793          	slli	a5,a5,0x4
80004d70:	40e787b3          	sub	a5,a5,a4
80004d74:	00279793          	slli	a5,a5,0x2
80004d78:	00f687b3          	add	a5,a3,a5
80004d7c:	03000713          	li	a4,48
80004d80:	00e7a823          	sw	a4,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:242
    ServicePipe[mySlot].header.task_id          = task;
80004d84:	8001f7b7          	lui	a5,0x8001f
80004d88:	fec42703          	lw	a4,-20(s0)
80004d8c:	4ac78693          	addi	a3,a5,1196 # 8001f4ac <__stack_top+0xfffdec5c>
80004d90:	00070793          	mv	a5,a4
80004d94:	00479793          	slli	a5,a5,0x4
80004d98:	40e787b3          	sub	a5,a5,a4
80004d9c:	00279793          	slli	a5,a5,0x2
80004da0:	00f687b3          	add	a5,a3,a5
80004da4:	fd842703          	lw	a4,-40(s0)
80004da8:	00e7aa23          	sw	a4,20(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:243
    ServicePipe[mySlot].header.task_app_id      = app;
80004dac:	8001f7b7          	lui	a5,0x8001f
80004db0:	fec42703          	lw	a4,-20(s0)
80004db4:	4ac78693          	addi	a3,a5,1196 # 8001f4ac <__stack_top+0xfffdec5c>
80004db8:	00070793          	mv	a5,a4
80004dbc:	00479793          	slli	a5,a5,0x4
80004dc0:	40e787b3          	sub	a5,a5,a4
80004dc4:	00279793          	slli	a5,a5,0x2
80004dc8:	00f687b3          	add	a5,a3,a5
80004dcc:	fdc42703          	lw	a4,-36(s0)
80004dd0:	02e7a223          	sw	a4,36(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:244
    ServicePipe[mySlot].header.task_dest_addr   = dest_addr;
80004dd4:	8001f7b7          	lui	a5,0x8001f
80004dd8:	fec42703          	lw	a4,-20(s0)
80004ddc:	4ac78693          	addi	a3,a5,1196 # 8001f4ac <__stack_top+0xfffdec5c>
80004de0:	00070793          	mv	a5,a4
80004de4:	00479793          	slli	a5,a5,0x4
80004de8:	40e787b3          	sub	a5,a5,a4
80004dec:	00279793          	slli	a5,a5,0x2
80004df0:	00f687b3          	add	a5,a3,a5
80004df4:	fd442703          	lw	a4,-44(s0)
80004df8:	02e7ac23          	sw	a4,56(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:246

    API_PushSendQueue(SERVICE, mySlot);
80004dfc:	fec42583          	lw	a1,-20(s0)
80004e00:	10100537          	lui	a0,0x10100
80004e04:	879fe0ef          	jal	ra,8000367c <API_PushSendQueue>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:247
    return;    
80004e08:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:248
}
80004e0c:	02c12083          	lw	ra,44(sp)
80004e10:	02812403          	lw	s0,40(sp)
80004e14:	03010113          	addi	sp,sp,48
80004e18:	00008067          	ret

80004e1c <API_TaskAllocated>:
API_TaskAllocated():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:250

void API_TaskAllocated(unsigned int task_id, unsigned int app_id){
80004e1c:	fd010113          	addi	sp,sp,-48
80004e20:	02112623          	sw	ra,44(sp)
80004e24:	02812423          	sw	s0,40(sp)
80004e28:	03010413          	addi	s0,sp,48
80004e2c:	fca42e23          	sw	a0,-36(s0)
80004e30:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:252
    unsigned int i;
    applications[app_id].tasks[task_id].status = TASK_ALLOCATED;
80004e34:	80020737          	lui	a4,0x80020
80004e38:	fdc42783          	lw	a5,-36(s0)
80004e3c:	fd842683          	lw	a3,-40(s0)
80004e40:	f3470613          	addi	a2,a4,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
80004e44:	00078713          	mv	a4,a5
80004e48:	00171713          	slli	a4,a4,0x1
80004e4c:	00f70733          	add	a4,a4,a5
80004e50:	00271793          	slli	a5,a4,0x2
80004e54:	00078713          	mv	a4,a5
80004e58:	00068793          	mv	a5,a3
80004e5c:	00279793          	slli	a5,a5,0x2
80004e60:	00d787b3          	add	a5,a5,a3
80004e64:	00579793          	slli	a5,a5,0x5
80004e68:	00f707b3          	add	a5,a4,a5
80004e6c:	00f607b3          	add	a5,a2,a5
80004e70:	00400713          	li	a4,4
80004e74:	00e7aa23          	sw	a4,20(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:254

    for(i = 0; i < applications[app_id].numTasks; i++){
80004e78:	fe042623          	sw	zero,-20(s0)
80004e7c:	0580006f          	j	80004ed4 <API_TaskAllocated+0xb8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:255
        if(applications[app_id].tasks[i].status != TASK_ALLOCATED){
80004e80:	80020737          	lui	a4,0x80020
80004e84:	fec42783          	lw	a5,-20(s0)
80004e88:	fd842683          	lw	a3,-40(s0)
80004e8c:	f3470613          	addi	a2,a4,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
80004e90:	00078713          	mv	a4,a5
80004e94:	00171713          	slli	a4,a4,0x1
80004e98:	00f70733          	add	a4,a4,a5
80004e9c:	00271793          	slli	a5,a4,0x2
80004ea0:	00078713          	mv	a4,a5
80004ea4:	00068793          	mv	a5,a3
80004ea8:	00279793          	slli	a5,a5,0x2
80004eac:	00d787b3          	add	a5,a5,a3
80004eb0:	00579793          	slli	a5,a5,0x5
80004eb4:	00f707b3          	add	a5,a4,a5
80004eb8:	00f607b3          	add	a5,a2,a5
80004ebc:	0147a703          	lw	a4,20(a5)
80004ec0:	00400793          	li	a5,4
80004ec4:	06f71c63          	bne	a4,a5,80004f3c <API_TaskAllocated+0x120>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:254 (discriminator 2)
    for(i = 0; i < applications[app_id].numTasks; i++){
80004ec8:	fec42783          	lw	a5,-20(s0)
80004ecc:	00178793          	addi	a5,a5,1
80004ed0:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:254 (discriminator 1)
80004ed4:	800206b7          	lui	a3,0x80020
80004ed8:	fd842703          	lw	a4,-40(s0)
80004edc:	00070793          	mv	a5,a4
80004ee0:	00279793          	slli	a5,a5,0x2
80004ee4:	00e787b3          	add	a5,a5,a4
80004ee8:	00579793          	slli	a5,a5,0x5
80004eec:	f3468713          	addi	a4,a3,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
80004ef0:	00e787b3          	add	a5,a5,a4
80004ef4:	0107a783          	lw	a5,16(a5)
80004ef8:	fec42703          	lw	a4,-20(s0)
80004efc:	f8f762e3          	bltu	a4,a5,80004e80 <API_TaskAllocated+0x64>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:259
            return;
        }
    }
    printsvsv("Application ", app_id, " is allocated!", 1);
80004f00:	fd842703          	lw	a4,-40(s0)
80004f04:	00100693          	li	a3,1
80004f08:	800067b7          	lui	a5,0x80006
80004f0c:	0e878613          	addi	a2,a5,232 # 800060e8 <__stack_top+0xfffc5898>
80004f10:	00070593          	mv	a1,a4
80004f14:	800067b7          	lui	a5,0x80006
80004f18:	0f878513          	addi	a0,a5,248 # 800060f8 <__stack_top+0xfffc58a8>
80004f1c:	e91fd0ef          	jal	ra,80002dac <printsvsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:260
    API_ApplicationStart(app_id);
80004f20:	fd842503          	lw	a0,-40(s0)
80004f24:	02c000ef          	jal	ra,80004f50 <API_ApplicationStart>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:261
    prints("\tStart command sent to every task.\n");
80004f28:	800067b7          	lui	a5,0x80006
80004f2c:	10878513          	addi	a0,a5,264 # 80006108 <__stack_top+0xfffc58b8>
80004f30:	d89fd0ef          	jal	ra,80002cb8 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:262
    return;
80004f34:	00000013          	nop
80004f38:	0080006f          	j	80004f40 <API_TaskAllocated+0x124>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:256
            return;
80004f3c:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:263
}
80004f40:	02c12083          	lw	ra,44(sp)
80004f44:	02812403          	lw	s0,40(sp)
80004f48:	03010113          	addi	sp,sp,48
80004f4c:	00008067          	ret

80004f50 <API_ApplicationStart>:
API_ApplicationStart():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:265

void API_ApplicationStart(unsigned int app_id){
80004f50:	fd010113          	addi	sp,sp,-48
80004f54:	02112623          	sw	ra,44(sp)
80004f58:	02812423          	sw	s0,40(sp)
80004f5c:	03010413          	addi	s0,sp,48
80004f60:	fca42e23          	sw	a0,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:268
    unsigned int i, j;
    unsigned int mySlot;
    for(i = 0; i < applications[app_id].numTasks; i++){
80004f64:	fe042623          	sw	zero,-20(s0)
80004f68:	2ec0006f          	j	80005254 <API_ApplicationStart+0x304>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:270
        do{
            mySlot = API_GetMessageSlot();
80004f6c:	0ad000ef          	jal	ra,80005818 <API_GetMessageSlot>
80004f70:	fea42223          	sw	a0,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:271
            if(mySlot == PIPE_FULL) vTaskDelay(1);
80004f74:	fe442703          	lw	a4,-28(s0)
80004f78:	fdfe07b7          	lui	a5,0xfdfe0
80004f7c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f5ad>
80004f80:	00f71663          	bne	a4,a5,80004f8c <API_ApplicationStart+0x3c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:271 (discriminator 1)
80004f84:	00100513          	li	a0,1
80004f88:	8e0fd0ef          	jal	ra,80002068 <vTaskDelay>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:272
        }while(mySlot == PIPE_FULL);
80004f8c:	fe442703          	lw	a4,-28(s0)
80004f90:	fdfe07b7          	lui	a5,0xfdfe0
80004f94:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f5ad>
80004f98:	fcf70ae3          	beq	a4,a5,80004f6c <API_ApplicationStart+0x1c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:274

        MessagePipe[mySlot].holder = PIPE_SYS_HOLDER;
80004f9c:	8001f7b7          	lui	a5,0x8001f
80004fa0:	fe442703          	lw	a4,-28(s0)
80004fa4:	60c78693          	addi	a3,a5,1548 # 8001f60c <__stack_top+0xfffdedbc>
80004fa8:	00070793          	mv	a5,a4
80004fac:	00379793          	slli	a5,a5,0x3
80004fb0:	00e787b3          	add	a5,a5,a4
80004fb4:	00679793          	slli	a5,a5,0x6
80004fb8:	00f687b3          	add	a5,a3,a5
80004fbc:	feff0737          	lui	a4,0xfeff0
80004fc0:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efaf6ae>
80004fc4:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:276

        MessagePipe[mySlot].header.header           = applications[app_id].tasks[i].addr;
80004fc8:	80020737          	lui	a4,0x80020
80004fcc:	fec42783          	lw	a5,-20(s0)
80004fd0:	fdc42683          	lw	a3,-36(s0)
80004fd4:	f3470613          	addi	a2,a4,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
80004fd8:	00078713          	mv	a4,a5
80004fdc:	00171713          	slli	a4,a4,0x1
80004fe0:	00f70733          	add	a4,a4,a5
80004fe4:	00271793          	slli	a5,a4,0x2
80004fe8:	00078713          	mv	a4,a5
80004fec:	00068793          	mv	a5,a3
80004ff0:	00279793          	slli	a5,a5,0x2
80004ff4:	00d787b3          	add	a5,a5,a3
80004ff8:	00579793          	slli	a5,a5,0x5
80004ffc:	00f707b3          	add	a5,a4,a5
80005000:	00f607b3          	add	a5,a2,a5
80005004:	0187a683          	lw	a3,24(a5)
80005008:	8001f7b7          	lui	a5,0x8001f
8000500c:	fe442703          	lw	a4,-28(s0)
80005010:	60c78613          	addi	a2,a5,1548 # 8001f60c <__stack_top+0xfffdedbc>
80005014:	00070793          	mv	a5,a4
80005018:	00379793          	slli	a5,a5,0x3
8000501c:	00e787b3          	add	a5,a5,a4
80005020:	00679793          	slli	a5,a5,0x6
80005024:	00f607b3          	add	a5,a2,a5
80005028:	00d7a423          	sw	a3,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:277
        MessagePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE + applications[app_id].numTasks + 1;
8000502c:	800206b7          	lui	a3,0x80020
80005030:	fdc42703          	lw	a4,-36(s0)
80005034:	00070793          	mv	a5,a4
80005038:	00279793          	slli	a5,a5,0x2
8000503c:	00e787b3          	add	a5,a5,a4
80005040:	00579793          	slli	a5,a5,0x5
80005044:	f3468713          	addi	a4,a3,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
80005048:	00e787b3          	add	a5,a5,a4
8000504c:	0107a783          	lw	a5,16(a5)
80005050:	00c78693          	addi	a3,a5,12
80005054:	8001f7b7          	lui	a5,0x8001f
80005058:	fe442703          	lw	a4,-28(s0)
8000505c:	60c78613          	addi	a2,a5,1548 # 8001f60c <__stack_top+0xfffdedbc>
80005060:	00070793          	mv	a5,a4
80005064:	00379793          	slli	a5,a5,0x3
80005068:	00e787b3          	add	a5,a5,a4
8000506c:	00679793          	slli	a5,a5,0x6
80005070:	00f607b3          	add	a5,a2,a5
80005074:	00d7a623          	sw	a3,12(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:278
        MessagePipe[mySlot].header.service          = TASK_START;
80005078:	8001f7b7          	lui	a5,0x8001f
8000507c:	fe442703          	lw	a4,-28(s0)
80005080:	60c78693          	addi	a3,a5,1548 # 8001f60c <__stack_top+0xfffdedbc>
80005084:	00070793          	mv	a5,a4
80005088:	00379793          	slli	a5,a5,0x3
8000508c:	00e787b3          	add	a5,a5,a4
80005090:	00679793          	slli	a5,a5,0x6
80005094:	00f687b3          	add	a5,a3,a5
80005098:	40000713          	li	a4,1024
8000509c:	00e7a823          	sw	a4,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:279
        MessagePipe[mySlot].header.task_id          = i;
800050a0:	8001f7b7          	lui	a5,0x8001f
800050a4:	fe442703          	lw	a4,-28(s0)
800050a8:	60c78693          	addi	a3,a5,1548 # 8001f60c <__stack_top+0xfffdedbc>
800050ac:	00070793          	mv	a5,a4
800050b0:	00379793          	slli	a5,a5,0x3
800050b4:	00e787b3          	add	a5,a5,a4
800050b8:	00679793          	slli	a5,a5,0x6
800050bc:	00f687b3          	add	a5,a3,a5
800050c0:	fec42703          	lw	a4,-20(s0)
800050c4:	00e7aa23          	sw	a4,20(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:280
        MessagePipe[mySlot].header.task_app_id      = app_id;
800050c8:	8001f7b7          	lui	a5,0x8001f
800050cc:	fe442703          	lw	a4,-28(s0)
800050d0:	60c78693          	addi	a3,a5,1548 # 8001f60c <__stack_top+0xfffdedbc>
800050d4:	00070793          	mv	a5,a4
800050d8:	00379793          	slli	a5,a5,0x3
800050dc:	00e787b3          	add	a5,a5,a4
800050e0:	00679793          	slli	a5,a5,0x6
800050e4:	00f687b3          	add	a5,a3,a5
800050e8:	fdc42703          	lw	a4,-36(s0)
800050ec:	02e7a223          	sw	a4,36(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:281
        MessagePipe[mySlot].msg.length              = applications[app_id].numTasks;
800050f0:	800206b7          	lui	a3,0x80020
800050f4:	fdc42703          	lw	a4,-36(s0)
800050f8:	00070793          	mv	a5,a4
800050fc:	00279793          	slli	a5,a5,0x2
80005100:	00e787b3          	add	a5,a5,a4
80005104:	00579793          	slli	a5,a5,0x5
80005108:	f3468713          	addi	a4,a3,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
8000510c:	00e787b3          	add	a5,a5,a4
80005110:	0107a683          	lw	a3,16(a5)
80005114:	8001f7b7          	lui	a5,0x8001f
80005118:	fe442703          	lw	a4,-28(s0)
8000511c:	60c78613          	addi	a2,a5,1548 # 8001f60c <__stack_top+0xfffdedbc>
80005120:	00070793          	mv	a5,a4
80005124:	00379793          	slli	a5,a5,0x3
80005128:	00e787b3          	add	a5,a5,a4
8000512c:	00679793          	slli	a5,a5,0x6
80005130:	00f607b3          	add	a5,a2,a5
80005134:	02d7ae23          	sw	a3,60(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:282
        for(j = 0; j < applications[app_id].numTasks; j++){
80005138:	fe042423          	sw	zero,-24(s0)
8000513c:	0d40006f          	j	80005210 <API_ApplicationStart+0x2c0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:283 (discriminator 3)
            MessagePipe[mySlot].msg.msg[j]          = applications[app_id].tasks[j].addr;
80005140:	80020737          	lui	a4,0x80020
80005144:	fe842783          	lw	a5,-24(s0)
80005148:	fdc42683          	lw	a3,-36(s0)
8000514c:	f3470613          	addi	a2,a4,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
80005150:	00078713          	mv	a4,a5
80005154:	00171713          	slli	a4,a4,0x1
80005158:	00f70733          	add	a4,a4,a5
8000515c:	00271793          	slli	a5,a4,0x2
80005160:	00078713          	mv	a4,a5
80005164:	00068793          	mv	a5,a3
80005168:	00279793          	slli	a5,a5,0x2
8000516c:	00d787b3          	add	a5,a5,a3
80005170:	00579793          	slli	a5,a5,0x5
80005174:	00f707b3          	add	a5,a4,a5
80005178:	00f607b3          	add	a5,a2,a5
8000517c:	0187a683          	lw	a3,24(a5)
80005180:	8001f637          	lui	a2,0x8001f
80005184:	fe442703          	lw	a4,-28(s0)
80005188:	00070793          	mv	a5,a4
8000518c:	00379793          	slli	a5,a5,0x3
80005190:	00e787b3          	add	a5,a5,a4
80005194:	00479793          	slli	a5,a5,0x4
80005198:	fe842703          	lw	a4,-24(s0)
8000519c:	00e787b3          	add	a5,a5,a4
800051a0:	00c78793          	addi	a5,a5,12
800051a4:	60c60713          	addi	a4,a2,1548 # 8001f60c <__stack_top+0xfffdedbc>
800051a8:	00279793          	slli	a5,a5,0x2
800051ac:	00f707b3          	add	a5,a4,a5
800051b0:	00d7a823          	sw	a3,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:284 (discriminator 3)
            printsvsv("task ", j, " addr ", MessagePipe[mySlot].msg.msg[j]);
800051b4:	fe842583          	lw	a1,-24(s0)
800051b8:	8001f6b7          	lui	a3,0x8001f
800051bc:	fe442703          	lw	a4,-28(s0)
800051c0:	00070793          	mv	a5,a4
800051c4:	00379793          	slli	a5,a5,0x3
800051c8:	00e787b3          	add	a5,a5,a4
800051cc:	00479793          	slli	a5,a5,0x4
800051d0:	fe842703          	lw	a4,-24(s0)
800051d4:	00e787b3          	add	a5,a5,a4
800051d8:	00c78793          	addi	a5,a5,12
800051dc:	60c68713          	addi	a4,a3,1548 # 8001f60c <__stack_top+0xfffdedbc>
800051e0:	00279793          	slli	a5,a5,0x2
800051e4:	00f707b3          	add	a5,a4,a5
800051e8:	0107a783          	lw	a5,16(a5)
800051ec:	00078693          	mv	a3,a5
800051f0:	800067b7          	lui	a5,0x80006
800051f4:	12c78613          	addi	a2,a5,300 # 8000612c <__stack_top+0xfffc58dc>
800051f8:	800067b7          	lui	a5,0x80006
800051fc:	13478513          	addi	a0,a5,308 # 80006134 <__stack_top+0xfffc58e4>
80005200:	badfd0ef          	jal	ra,80002dac <printsvsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:282 (discriminator 3)
        for(j = 0; j < applications[app_id].numTasks; j++){
80005204:	fe842783          	lw	a5,-24(s0)
80005208:	00178793          	addi	a5,a5,1
8000520c:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:282 (discriminator 1)
80005210:	800206b7          	lui	a3,0x80020
80005214:	fdc42703          	lw	a4,-36(s0)
80005218:	00070793          	mv	a5,a4
8000521c:	00279793          	slli	a5,a5,0x2
80005220:	00e787b3          	add	a5,a5,a4
80005224:	00579793          	slli	a5,a5,0x5
80005228:	f3468713          	addi	a4,a3,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
8000522c:	00e787b3          	add	a5,a5,a4
80005230:	0107a783          	lw	a5,16(a5)
80005234:	fe842703          	lw	a4,-24(s0)
80005238:	f0f764e3          	bltu	a4,a5,80005140 <API_ApplicationStart+0x1f0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:286 (discriminator 2)
        }
        API_PushSendQueue(MESSAGE, mySlot);
8000523c:	fe442583          	lw	a1,-28(s0)
80005240:	20200537          	lui	a0,0x20200
80005244:	c38fe0ef          	jal	ra,8000367c <API_PushSendQueue>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:268 (discriminator 2)
    for(i = 0; i < applications[app_id].numTasks; i++){
80005248:	fec42783          	lw	a5,-20(s0)
8000524c:	00178793          	addi	a5,a5,1
80005250:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:268 (discriminator 1)
80005254:	800206b7          	lui	a3,0x80020
80005258:	fdc42703          	lw	a4,-36(s0)
8000525c:	00070793          	mv	a5,a4
80005260:	00279793          	slli	a5,a5,0x2
80005264:	00e787b3          	add	a5,a5,a4
80005268:	00579793          	slli	a5,a5,0x5
8000526c:	f3468713          	addi	a4,a3,-204 # 8001ff34 <__stack_top+0xfffdf6e4>
80005270:	00e787b3          	add	a5,a5,a4
80005274:	0107a783          	lw	a5,16(a5)
80005278:	fec42703          	lw	a4,-20(s0)
8000527c:	cef768e3          	bltu	a4,a5,80004f6c <API_ApplicationStart+0x1c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:288
    }
}
80005280:	00000013          	nop
80005284:	02c12083          	lw	ra,44(sp)
80005288:	02812403          	lw	s0,40(sp)
8000528c:	03010113          	addi	sp,sp,48
80005290:	00008067          	ret

80005294 <API_TaskListInit>:
API_TaskListInit():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:13
#include "chronos.h"

// Stores information about each running task
//extern volatile Task TaskList[ NUM_MAX_TASKS ];

void API_TaskListInit(){
80005294:	fe010113          	addi	sp,sp,-32
80005298:	00812e23          	sw	s0,28(sp)
8000529c:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:15
    unsigned int i, j;
    for (i = 0; i < NUM_MAX_TASKS; i++){
800052a0:	fe042623          	sw	zero,-20(s0)
800052a4:	0880006f          	j	8000532c <API_TaskListInit+0x98>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:16
        TaskList[i].status = TASK_SLOT_EMPTY;
800052a8:	800206b7          	lui	a3,0x80020
800052ac:	fec42703          	lw	a4,-20(s0)
800052b0:	00070793          	mv	a5,a4
800052b4:	00479793          	slli	a5,a5,0x4
800052b8:	40e787b3          	sub	a5,a5,a4
800052bc:	00379793          	slli	a5,a5,0x3
800052c0:	6b468713          	addi	a4,a3,1716 # 800206b4 <__stack_top+0xfffdfe64>
800052c4:	00e787b3          	add	a5,a5,a4
800052c8:	0007a023          	sw	zero,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:17
        for (j = 0; j < NUM_MAX_APP_TASKS; j++){
800052cc:	fe042423          	sw	zero,-24(s0)
800052d0:	0440006f          	j	80005314 <API_TaskListInit+0x80>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:18 (discriminator 3)
            TaskList[i].PendingReq[j] = FALSE;
800052d4:	800206b7          	lui	a3,0x80020
800052d8:	fec42703          	lw	a4,-20(s0)
800052dc:	00070793          	mv	a5,a4
800052e0:	00479793          	slli	a5,a5,0x4
800052e4:	40e787b3          	sub	a5,a5,a4
800052e8:	00179793          	slli	a5,a5,0x1
800052ec:	fe842703          	lw	a4,-24(s0)
800052f0:	00e787b3          	add	a5,a5,a4
800052f4:	00878793          	addi	a5,a5,8
800052f8:	6b468713          	addi	a4,a3,1716 # 800206b4 <__stack_top+0xfffdfe64>
800052fc:	00279793          	slli	a5,a5,0x2
80005300:	00f707b3          	add	a5,a4,a5
80005304:	0007a223          	sw	zero,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:17 (discriminator 3)
        for (j = 0; j < NUM_MAX_APP_TASKS; j++){
80005308:	fe842783          	lw	a5,-24(s0)
8000530c:	00178793          	addi	a5,a5,1
80005310:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:17 (discriminator 1)
80005314:	fe842703          	lw	a4,-24(s0)
80005318:	00900793          	li	a5,9
8000531c:	fae7fce3          	bleu	a4,a5,800052d4 <API_TaskListInit+0x40>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 2)
    for (i = 0; i < NUM_MAX_TASKS; i++){
80005320:	fec42783          	lw	a5,-20(s0)
80005324:	00178793          	addi	a5,a5,1
80005328:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 1)
8000532c:	fec42703          	lw	a4,-20(s0)
80005330:	00100793          	li	a5,1
80005334:	f6e7fae3          	bleu	a4,a5,800052a8 <API_TaskListInit+0x14>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:21
        }
    }
    return;
80005338:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:22
}
8000533c:	01c12403          	lw	s0,28(sp)
80005340:	02010113          	addi	sp,sp,32
80005344:	00008067          	ret

80005348 <API_GetCurrentTaskSlot>:
API_GetCurrentTaskSlot():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:24

unsigned int API_GetCurrentTaskSlot(){
80005348:	fe010113          	addi	sp,sp,-32
8000534c:	00112e23          	sw	ra,28(sp)
80005350:	00812c23          	sw	s0,24(sp)
80005354:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:26
    // The handle of the currently running ( calling ) task on the kernel.
    TaskHandle_t xHandle = xTaskGetCurrentTaskHandle();
80005358:	f70fd0ef          	jal	ra,80002ac8 <xTaskGetCurrentTaskHandle>
8000535c:	fea42423          	sw	a0,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:27
    unsigned int i = 0;
80005360:	fe042623          	sw	zero,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:28
    for ( i = 0 ; i < NUM_MAX_TASKS ; i++ ) {
80005364:	fe042623          	sw	zero,-20(s0)
80005368:	0440006f          	j	800053ac <API_GetCurrentTaskSlot+0x64>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:29
        if ( TaskList[ i ].TaskHandler == xHandle ) {
8000536c:	800207b7          	lui	a5,0x80020
80005370:	fec42703          	lw	a4,-20(s0)
80005374:	6b478693          	addi	a3,a5,1716 # 800206b4 <__stack_top+0xfffdfe64>
80005378:	00070793          	mv	a5,a4
8000537c:	00479793          	slli	a5,a5,0x4
80005380:	40e787b3          	sub	a5,a5,a4
80005384:	00379793          	slli	a5,a5,0x3
80005388:	00f687b3          	add	a5,a3,a5
8000538c:	00c7a783          	lw	a5,12(a5)
80005390:	fe842703          	lw	a4,-24(s0)
80005394:	00f71663          	bne	a4,a5,800053a0 <API_GetCurrentTaskSlot+0x58>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:30
            return( i );
80005398:	fec42783          	lw	a5,-20(s0)
8000539c:	0200006f          	j	800053bc <API_GetCurrentTaskSlot+0x74>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:28 (discriminator 2)
    for ( i = 0 ; i < NUM_MAX_TASKS ; i++ ) {
800053a0:	fec42783          	lw	a5,-20(s0)
800053a4:	00178793          	addi	a5,a5,1
800053a8:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:28 (discriminator 1)
800053ac:	fec42703          	lw	a4,-20(s0)
800053b0:	00100793          	li	a5,1
800053b4:	fae7fce3          	bleu	a4,a5,8000536c <API_GetCurrentTaskSlot+0x24>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:33
        }
    }
    return ERRO;
800053b8:	fff00793          	li	a5,-1
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:34
}
800053bc:	00078513          	mv	a0,a5
800053c0:	01c12083          	lw	ra,28(sp)
800053c4:	01812403          	lw	s0,24(sp)
800053c8:	02010113          	addi	sp,sp,32
800053cc:	00008067          	ret

800053d0 <API_GetFreeTaskSlot>:
API_GetFreeTaskSlot():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:36

unsigned int API_GetFreeTaskSlot(){
800053d0:	fe010113          	addi	sp,sp,-32
800053d4:	00812e23          	sw	s0,28(sp)
800053d8:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:38
    unsigned int i;
    for (i = 0; i < NUM_MAX_TASKS; i++){
800053dc:	fe042623          	sw	zero,-20(s0)
800053e0:	0400006f          	j	80005420 <API_GetFreeTaskSlot+0x50>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:39
        if (TaskList[i].status == TASK_SLOT_EMPTY){
800053e4:	800206b7          	lui	a3,0x80020
800053e8:	fec42703          	lw	a4,-20(s0)
800053ec:	00070793          	mv	a5,a4
800053f0:	00479793          	slli	a5,a5,0x4
800053f4:	40e787b3          	sub	a5,a5,a4
800053f8:	00379793          	slli	a5,a5,0x3
800053fc:	6b468713          	addi	a4,a3,1716 # 800206b4 <__stack_top+0xfffdfe64>
80005400:	00e787b3          	add	a5,a5,a4
80005404:	0007a783          	lw	a5,0(a5)
80005408:	00079663          	bnez	a5,80005414 <API_GetFreeTaskSlot+0x44>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:40
            return i;
8000540c:	fec42783          	lw	a5,-20(s0)
80005410:	0200006f          	j	80005430 <API_GetFreeTaskSlot+0x60>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:38 (discriminator 2)
    for (i = 0; i < NUM_MAX_TASKS; i++){
80005414:	fec42783          	lw	a5,-20(s0)
80005418:	00178793          	addi	a5,a5,1
8000541c:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:38 (discriminator 1)
80005420:	fec42703          	lw	a4,-20(s0)
80005424:	00100793          	li	a5,1
80005428:	fae7fee3          	bleu	a4,a5,800053e4 <API_GetFreeTaskSlot+0x14>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:43
        }
    }
    return ERRO;
8000542c:	fff00793          	li	a5,-1
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:44
}
80005430:	00078513          	mv	a0,a5
80005434:	01c12403          	lw	s0,28(sp)
80005438:	02010113          	addi	sp,sp,32
8000543c:	00008067          	ret

80005440 <API_TaskAllocation>:
API_TaskAllocation():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:46

unsigned int API_TaskAllocation(unsigned int task_id, unsigned int txt_size, unsigned int bss_size, unsigned int start_point, unsigned int task_app_id){
80005440:	fc010113          	addi	sp,sp,-64
80005444:	02112e23          	sw	ra,60(sp)
80005448:	02812c23          	sw	s0,56(sp)
8000544c:	04010413          	addi	s0,sp,64
80005450:	fca42e23          	sw	a0,-36(s0)
80005454:	fcb42c23          	sw	a1,-40(s0)
80005458:	fcc42a23          	sw	a2,-44(s0)
8000545c:	fcd42823          	sw	a3,-48(s0)
80005460:	fce42623          	sw	a4,-52(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:47
    unsigned int tslot = API_GetFreeTaskSlot();
80005464:	f6dff0ef          	jal	ra,800053d0 <API_GetFreeTaskSlot>
80005468:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:48
    TaskList[tslot].status = TASK_SLOT_WAITING_START;
8000546c:	800206b7          	lui	a3,0x80020
80005470:	fec42703          	lw	a4,-20(s0)
80005474:	00070793          	mv	a5,a4
80005478:	00479793          	slli	a5,a5,0x4
8000547c:	40e787b3          	sub	a5,a5,a4
80005480:	00379793          	slli	a5,a5,0x3
80005484:	6b468713          	addi	a4,a3,1716 # 800206b4 <__stack_top+0xfffdfe64>
80005488:	00e787b3          	add	a5,a5,a4
8000548c:	00200713          	li	a4,2
80005490:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:49
    TaskList[tslot].waitingMsg = FALSE;
80005494:	800206b7          	lui	a3,0x80020
80005498:	fec42703          	lw	a4,-20(s0)
8000549c:	00070793          	mv	a5,a4
800054a0:	00479793          	slli	a5,a5,0x4
800054a4:	40e787b3          	sub	a5,a5,a4
800054a8:	00379793          	slli	a5,a5,0x3
800054ac:	6b468713          	addi	a4,a3,1716 # 800206b4 <__stack_top+0xfffdfe64>
800054b0:	00e787b3          	add	a5,a5,a4
800054b4:	0007a823          	sw	zero,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:50
    TaskList[tslot].TaskID = task_id;
800054b8:	800207b7          	lui	a5,0x80020
800054bc:	fec42703          	lw	a4,-20(s0)
800054c0:	6b478693          	addi	a3,a5,1716 # 800206b4 <__stack_top+0xfffdfe64>
800054c4:	00070793          	mv	a5,a4
800054c8:	00479793          	slli	a5,a5,0x4
800054cc:	40e787b3          	sub	a5,a5,a4
800054d0:	00379793          	slli	a5,a5,0x3
800054d4:	00f687b3          	add	a5,a3,a5
800054d8:	fdc42703          	lw	a4,-36(s0)
800054dc:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:51
    TaskList[tslot].AppID = task_app_id;
800054e0:	800207b7          	lui	a5,0x80020
800054e4:	fec42703          	lw	a4,-20(s0)
800054e8:	6b478693          	addi	a3,a5,1716 # 800206b4 <__stack_top+0xfffdfe64>
800054ec:	00070793          	mv	a5,a4
800054f0:	00479793          	slli	a5,a5,0x4
800054f4:	40e787b3          	sub	a5,a5,a4
800054f8:	00379793          	slli	a5,a5,0x3
800054fc:	00f687b3          	add	a5,a3,a5
80005500:	fcc42703          	lw	a4,-52(s0)
80005504:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:52
    TaskList[tslot].taskSize = 4 * (txt_size + bss_size); // it multiply by four because each word has 32 bits and the memory is addressed by byte - so each word is composed by 4 addresses
80005508:	fd842703          	lw	a4,-40(s0)
8000550c:	fd442783          	lw	a5,-44(s0)
80005510:	00f707b3          	add	a5,a4,a5
80005514:	00279693          	slli	a3,a5,0x2
80005518:	800207b7          	lui	a5,0x80020
8000551c:	fec42703          	lw	a4,-20(s0)
80005520:	6b478613          	addi	a2,a5,1716 # 800206b4 <__stack_top+0xfffdfe64>
80005524:	00070793          	mv	a5,a4
80005528:	00479793          	slli	a5,a5,0x4
8000552c:	40e787b3          	sub	a5,a5,a4
80005530:	00379793          	slli	a5,a5,0x3
80005534:	00f607b3          	add	a5,a2,a5
80005538:	00d7ac23          	sw	a3,24(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:54

    TaskList[tslot].taskAddr = pvPortMalloc(TaskList[tslot].taskSize); //vPortFree(TaskList[tslot].taskAddr);    
8000553c:	800207b7          	lui	a5,0x80020
80005540:	fec42703          	lw	a4,-20(s0)
80005544:	6b478693          	addi	a3,a5,1716 # 800206b4 <__stack_top+0xfffdfe64>
80005548:	00070793          	mv	a5,a4
8000554c:	00479793          	slli	a5,a5,0x4
80005550:	40e787b3          	sub	a5,a5,a4
80005554:	00379793          	slli	a5,a5,0x3
80005558:	00f687b3          	add	a5,a3,a5
8000555c:	0187a783          	lw	a5,24(a5)
80005560:	00078513          	mv	a0,a5
80005564:	ce9fb0ef          	jal	ra,8000124c <pvPortMalloc>
80005568:	00050793          	mv	a5,a0
8000556c:	00078613          	mv	a2,a5
80005570:	800207b7          	lui	a5,0x80020
80005574:	fec42703          	lw	a4,-20(s0)
80005578:	6b478693          	addi	a3,a5,1716 # 800206b4 <__stack_top+0xfffdfe64>
8000557c:	00070793          	mv	a5,a4
80005580:	00479793          	slli	a5,a5,0x4
80005584:	40e787b3          	sub	a5,a5,a4
80005588:	00379793          	slli	a5,a5,0x3
8000558c:	00f687b3          	add	a5,a3,a5
80005590:	00c7ae23          	sw	a2,28(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:55
    TaskList[tslot].mainAddr =  TaskList[tslot].taskAddr + (4 * start_point);
80005594:	800207b7          	lui	a5,0x80020
80005598:	fec42703          	lw	a4,-20(s0)
8000559c:	6b478693          	addi	a3,a5,1716 # 800206b4 <__stack_top+0xfffdfe64>
800055a0:	00070793          	mv	a5,a4
800055a4:	00479793          	slli	a5,a5,0x4
800055a8:	40e787b3          	sub	a5,a5,a4
800055ac:	00379793          	slli	a5,a5,0x3
800055b0:	00f687b3          	add	a5,a3,a5
800055b4:	01c7a703          	lw	a4,28(a5)
800055b8:	fd042783          	lw	a5,-48(s0)
800055bc:	00279793          	slli	a5,a5,0x2
800055c0:	00f706b3          	add	a3,a4,a5
800055c4:	80020637          	lui	a2,0x80020
800055c8:	fec42703          	lw	a4,-20(s0)
800055cc:	00070793          	mv	a5,a4
800055d0:	00479793          	slli	a5,a5,0x4
800055d4:	40e787b3          	sub	a5,a5,a4
800055d8:	00379793          	slli	a5,a5,0x3
800055dc:	6b460713          	addi	a4,a2,1716 # 800206b4 <__stack_top+0xfffdfe64>
800055e0:	00e787b3          	add	a5,a5,a4
800055e4:	02d7a023          	sw	a3,32(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:57

    return tslot;
800055e8:	fec42783          	lw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:58
}
800055ec:	00078513          	mv	a0,a5
800055f0:	03c12083          	lw	ra,60(sp)
800055f4:	03812403          	lw	s0,56(sp)
800055f8:	04010113          	addi	sp,sp,64
800055fc:	00008067          	ret

80005600 <API_GetTaskSlot>:
API_GetTaskSlot():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:60

unsigned int API_GetTaskSlot(unsigned int task_id, unsigned int app_id){
80005600:	fd010113          	addi	sp,sp,-48
80005604:	02812623          	sw	s0,44(sp)
80005608:	03010413          	addi	s0,sp,48
8000560c:	fca42e23          	sw	a0,-36(s0)
80005610:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:62
    unsigned int i;
    for( i = 0; i < NUM_MAX_APP_TASKS; i++){
80005614:	fe042623          	sw	zero,-20(s0)
80005618:	0980006f          	j	800056b0 <API_GetTaskSlot+0xb0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:63
        if(task_id == TaskList[i].TaskID && app_id == TaskList[i].AppID && TaskList[i].status != TASK_SLOT_EMPTY)
8000561c:	800207b7          	lui	a5,0x80020
80005620:	fec42703          	lw	a4,-20(s0)
80005624:	6b478693          	addi	a3,a5,1716 # 800206b4 <__stack_top+0xfffdfe64>
80005628:	00070793          	mv	a5,a4
8000562c:	00479793          	slli	a5,a5,0x4
80005630:	40e787b3          	sub	a5,a5,a4
80005634:	00379793          	slli	a5,a5,0x3
80005638:	00f687b3          	add	a5,a3,a5
8000563c:	0047a783          	lw	a5,4(a5)
80005640:	fdc42703          	lw	a4,-36(s0)
80005644:	06f71063          	bne	a4,a5,800056a4 <API_GetTaskSlot+0xa4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:63 (discriminator 1)
80005648:	800207b7          	lui	a5,0x80020
8000564c:	fec42703          	lw	a4,-20(s0)
80005650:	6b478693          	addi	a3,a5,1716 # 800206b4 <__stack_top+0xfffdfe64>
80005654:	00070793          	mv	a5,a4
80005658:	00479793          	slli	a5,a5,0x4
8000565c:	40e787b3          	sub	a5,a5,a4
80005660:	00379793          	slli	a5,a5,0x3
80005664:	00f687b3          	add	a5,a3,a5
80005668:	0087a783          	lw	a5,8(a5)
8000566c:	fd842703          	lw	a4,-40(s0)
80005670:	02f71a63          	bne	a4,a5,800056a4 <API_GetTaskSlot+0xa4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:63 (discriminator 2)
80005674:	800206b7          	lui	a3,0x80020
80005678:	fec42703          	lw	a4,-20(s0)
8000567c:	00070793          	mv	a5,a4
80005680:	00479793          	slli	a5,a5,0x4
80005684:	40e787b3          	sub	a5,a5,a4
80005688:	00379793          	slli	a5,a5,0x3
8000568c:	6b468713          	addi	a4,a3,1716 # 800206b4 <__stack_top+0xfffdfe64>
80005690:	00e787b3          	add	a5,a5,a4
80005694:	0007a783          	lw	a5,0(a5)
80005698:	00078663          	beqz	a5,800056a4 <API_GetTaskSlot+0xa4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:64
            return i;
8000569c:	fec42783          	lw	a5,-20(s0)
800056a0:	0200006f          	j	800056c0 <API_GetTaskSlot+0xc0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:62 (discriminator 2)
    for( i = 0; i < NUM_MAX_APP_TASKS; i++){
800056a4:	fec42783          	lw	a5,-20(s0)
800056a8:	00178793          	addi	a5,a5,1
800056ac:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:62 (discriminator 1)
800056b0:	fec42703          	lw	a4,-20(s0)
800056b4:	00900793          	li	a5,9
800056b8:	f6e7f2e3          	bleu	a4,a5,8000561c <API_GetTaskSlot+0x1c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:66
    }
    return ERRO;
800056bc:	fff00793          	li	a5,-1
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:67
}
800056c0:	00078513          	mv	a0,a5
800056c4:	02c12403          	lw	s0,44(sp)
800056c8:	03010113          	addi	sp,sp,48
800056cc:	00008067          	ret

800056d0 <API_TaskStart>:
API_TaskStart():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:69

void API_TaskStart(unsigned int slot){
800056d0:	fe010113          	addi	sp,sp,-32
800056d4:	00112e23          	sw	ra,28(sp)
800056d8:	00812c23          	sw	s0,24(sp)
800056dc:	02010413          	addi	s0,sp,32
800056e0:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:70
    TaskList[slot].status = TASK_SLOT_RUNNING;
800056e4:	800206b7          	lui	a3,0x80020
800056e8:	fec42703          	lw	a4,-20(s0)
800056ec:	00070793          	mv	a5,a4
800056f0:	00479793          	slli	a5,a5,0x4
800056f4:	40e787b3          	sub	a5,a5,a4
800056f8:	00379793          	slli	a5,a5,0x3
800056fc:	6b468713          	addi	a4,a3,1716 # 800206b4 <__stack_top+0xfffdfe64>
80005700:	00e787b3          	add	a5,a5,a4
80005704:	00100713          	li	a4,1
80005708:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:71
    xTaskCreate(TaskList[slot].mainAddr,
8000570c:	800206b7          	lui	a3,0x80020
80005710:	fec42703          	lw	a4,-20(s0)
80005714:	00070793          	mv	a5,a4
80005718:	00479793          	slli	a5,a5,0x4
8000571c:	40e787b3          	sub	a5,a5,a4
80005720:	00379793          	slli	a5,a5,0x3
80005724:	6b468713          	addi	a4,a3,1716 # 800206b4 <__stack_top+0xfffdfe64>
80005728:	00e787b3          	add	a5,a5,a4
8000572c:	0207a783          	lw	a5,32(a5)
80005730:	00078513          	mv	a0,a5
80005734:	fec42703          	lw	a4,-20(s0)
80005738:	00070793          	mv	a5,a4
8000573c:	00479793          	slli	a5,a5,0x4
80005740:	40e787b3          	sub	a5,a5,a4
80005744:	00379793          	slli	a5,a5,0x3
80005748:	80020737          	lui	a4,0x80020
8000574c:	6b470713          	addi	a4,a4,1716 # 800206b4 <__stack_top+0xfffdfe64>
80005750:	00e787b3          	add	a5,a5,a4
80005754:	00c78793          	addi	a5,a5,12
80005758:	00000893          	li	a7,0
8000575c:	00000813          	li	a6,0
80005760:	00100713          	li	a4,1
80005764:	00000693          	li	a3,0
80005768:	40000613          	li	a2,1024
8000576c:	800065b7          	lui	a1,0x80006
80005770:	13c58593          	addi	a1,a1,316 # 8000613c <__stack_top+0xfffc58ec>
80005774:	ed8fc0ef          	jal	ra,80001e4c <xTaskGenericCreate>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:77
                "LaTask",
                1024,
                NULL,
                tskIDLE_PRIORITY+1,
                &TaskList[slot].TaskHandler);
    return;
80005778:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:78
}
8000577c:	01c12083          	lw	ra,28(sp)
80005780:	01812403          	lw	s0,24(sp)
80005784:	02010113          	addi	sp,sp,32
80005788:	00008067          	ret

8000578c <API_PipeInitialization>:
API_PipeInitialization():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:10
extern volatile MessagePacket MessagePipe[PIPE_SIZE];
extern volatile ServicePacket ServicePipe[PIPE_SIZE];

////////////////////////////////////////////////////////////
// Initialize the PIPE, setting the status of each slot to FREE
void API_PipeInitialization(){
8000578c:	fe010113          	addi	sp,sp,-32
80005790:	00812e23          	sw	s0,28(sp)
80005794:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:12
    int i;
    for( i = 0; i < PIPE_SIZE; i++ ){
80005798:	fe042623          	sw	zero,-20(s0)
8000579c:	0600006f          	j	800057fc <API_PipeInitialization+0x70>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:13 (discriminator 3)
        MessagePipe[i].status = PIPE_FREE;
800057a0:	8001f6b7          	lui	a3,0x8001f
800057a4:	fec42703          	lw	a4,-20(s0)
800057a8:	00070793          	mv	a5,a4
800057ac:	00379793          	slli	a5,a5,0x3
800057b0:	00e787b3          	add	a5,a5,a4
800057b4:	00679793          	slli	a5,a5,0x6
800057b8:	60c68713          	addi	a4,a3,1548 # 8001f60c <__stack_top+0xfffdedbc>
800057bc:	00e787b3          	add	a5,a5,a4
800057c0:	fff00713          	li	a4,-1
800057c4:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:14 (discriminator 3)
        ServicePipe[i].status = PIPE_FREE;
800057c8:	8001f6b7          	lui	a3,0x8001f
800057cc:	fec42703          	lw	a4,-20(s0)
800057d0:	00070793          	mv	a5,a4
800057d4:	00479793          	slli	a5,a5,0x4
800057d8:	40e787b3          	sub	a5,a5,a4
800057dc:	00279793          	slli	a5,a5,0x2
800057e0:	4ac68713          	addi	a4,a3,1196 # 8001f4ac <__stack_top+0xfffdec5c>
800057e4:	00e787b3          	add	a5,a5,a4
800057e8:	fff00713          	li	a4,-1
800057ec:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:12 (discriminator 3)
    for( i = 0; i < PIPE_SIZE; i++ ){
800057f0:	fec42783          	lw	a5,-20(s0)
800057f4:	00178793          	addi	a5,a5,1
800057f8:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:12 (discriminator 1)
800057fc:	fec42703          	lw	a4,-20(s0)
80005800:	00300793          	li	a5,3
80005804:	f8e7dee3          	ble	a4,a5,800057a0 <API_PipeInitialization+0x14>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:16
    }
    return;
80005808:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:17
}
8000580c:	01c12403          	lw	s0,28(sp)
80005810:	02010113          	addi	sp,sp,32
80005814:	00008067          	ret

80005818 <API_GetMessageSlot>:
API_GetMessageSlot():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:21

////////////////////////////////////////////////////////////
// Returns a free Message slot 
unsigned int API_GetMessageSlot(){
80005818:	fe010113          	addi	sp,sp,-32
8000581c:	00812e23          	sw	s0,28(sp)
80005820:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:23
    int i;
    for( i = 0; i < PIPE_SIZE; i++ ){
80005824:	fe042623          	sw	zero,-20(s0)
80005828:	06c0006f          	j	80005894 <API_GetMessageSlot+0x7c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:24
        if (MessagePipe[i].status == PIPE_FREE){
8000582c:	8001f6b7          	lui	a3,0x8001f
80005830:	fec42703          	lw	a4,-20(s0)
80005834:	00070793          	mv	a5,a4
80005838:	00379793          	slli	a5,a5,0x3
8000583c:	00e787b3          	add	a5,a5,a4
80005840:	00679793          	slli	a5,a5,0x6
80005844:	60c68713          	addi	a4,a3,1548 # 8001f60c <__stack_top+0xfffdedbc>
80005848:	00e787b3          	add	a5,a5,a4
8000584c:	0007a703          	lw	a4,0(a5)
80005850:	fff00793          	li	a5,-1
80005854:	02f71a63          	bne	a4,a5,80005888 <API_GetMessageSlot+0x70>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:25
            MessagePipe[i].status = PIPE_OCCUPIED;
80005858:	8001f6b7          	lui	a3,0x8001f
8000585c:	fec42703          	lw	a4,-20(s0)
80005860:	00070793          	mv	a5,a4
80005864:	00379793          	slli	a5,a5,0x3
80005868:	00e787b3          	add	a5,a5,a4
8000586c:	00679793          	slli	a5,a5,0x6
80005870:	60c68713          	addi	a4,a3,1548 # 8001f60c <__stack_top+0xfffdedbc>
80005874:	00e787b3          	add	a5,a5,a4
80005878:	00100713          	li	a4,1
8000587c:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:26
            return i;
80005880:	fec42783          	lw	a5,-20(s0)
80005884:	0240006f          	j	800058a8 <API_GetMessageSlot+0x90>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:23 (discriminator 2)
    for( i = 0; i < PIPE_SIZE; i++ ){
80005888:	fec42783          	lw	a5,-20(s0)
8000588c:	00178793          	addi	a5,a5,1
80005890:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:23 (discriminator 1)
80005894:	fec42703          	lw	a4,-20(s0)
80005898:	00300793          	li	a5,3
8000589c:	f8e7d8e3          	ble	a4,a5,8000582c <API_GetMessageSlot+0x14>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:29
        }
    }
    return PIPE_FULL;
800058a0:	fdfe07b7          	lui	a5,0xfdfe0
800058a4:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f5ad>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:30
}
800058a8:	00078513          	mv	a0,a5
800058ac:	01c12403          	lw	s0,28(sp)
800058b0:	02010113          	addi	sp,sp,32
800058b4:	00008067          	ret

800058b8 <API_GetServiceSlot>:
API_GetServiceSlot():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:34

////////////////////////////////////////////////////////////
// Returns a free Service slot
unsigned int API_GetServiceSlot(){
800058b8:	fe010113          	addi	sp,sp,-32
800058bc:	00812e23          	sw	s0,28(sp)
800058c0:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:36
    int i;
    for( i = 0; i < PIPE_SIZE; i++ ){
800058c4:	fe042623          	sw	zero,-20(s0)
800058c8:	06c0006f          	j	80005934 <API_GetServiceSlot+0x7c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:37
        if (ServicePipe[i].status == PIPE_FREE){
800058cc:	8001f6b7          	lui	a3,0x8001f
800058d0:	fec42703          	lw	a4,-20(s0)
800058d4:	00070793          	mv	a5,a4
800058d8:	00479793          	slli	a5,a5,0x4
800058dc:	40e787b3          	sub	a5,a5,a4
800058e0:	00279793          	slli	a5,a5,0x2
800058e4:	4ac68713          	addi	a4,a3,1196 # 8001f4ac <__stack_top+0xfffdec5c>
800058e8:	00e787b3          	add	a5,a5,a4
800058ec:	0007a703          	lw	a4,0(a5)
800058f0:	fff00793          	li	a5,-1
800058f4:	02f71a63          	bne	a4,a5,80005928 <API_GetServiceSlot+0x70>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:38
            ServicePipe[i].status = PIPE_OCCUPIED;
800058f8:	8001f6b7          	lui	a3,0x8001f
800058fc:	fec42703          	lw	a4,-20(s0)
80005900:	00070793          	mv	a5,a4
80005904:	00479793          	slli	a5,a5,0x4
80005908:	40e787b3          	sub	a5,a5,a4
8000590c:	00279793          	slli	a5,a5,0x2
80005910:	4ac68713          	addi	a4,a3,1196 # 8001f4ac <__stack_top+0xfffdec5c>
80005914:	00e787b3          	add	a5,a5,a4
80005918:	00100713          	li	a4,1
8000591c:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:39
            return i;
80005920:	fec42783          	lw	a5,-20(s0)
80005924:	0240006f          	j	80005948 <API_GetServiceSlot+0x90>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:36 (discriminator 2)
    for( i = 0; i < PIPE_SIZE; i++ ){
80005928:	fec42783          	lw	a5,-20(s0)
8000592c:	00178793          	addi	a5,a5,1
80005930:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:36 (discriminator 1)
80005934:	fec42703          	lw	a4,-20(s0)
80005938:	00300793          	li	a5,3
8000593c:	f8e7d8e3          	ble	a4,a5,800058cc <API_GetServiceSlot+0x14>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:42
        }
    }
    return PIPE_FULL;
80005940:	fdfe07b7          	lui	a5,0xfdfe0
80005944:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9f5ad>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:43
}
80005948:	00078513          	mv	a0,a5
8000594c:	01c12403          	lw	s0,28(sp)
80005950:	02010113          	addi	sp,sp,32
80005954:	00008067          	ret

80005958 <API_ClearPipeSlot>:
API_ClearPipeSlot():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:47

////////////////////////////////////////////////////////////
// Clear one PipeSlot after send it
void API_ClearPipeSlot(unsigned int typeSlot){
80005958:	fd010113          	addi	sp,sp,-48
8000595c:	02812623          	sw	s0,44(sp)
80005960:	03010413          	addi	s0,sp,48
80005964:	fca42e23          	sw	a0,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:48
    unsigned type = typeSlot & 0xFFFF0000;
80005968:	fdc42703          	lw	a4,-36(s0)
8000596c:	ffff07b7          	lui	a5,0xffff0
80005970:	00f777b3          	and	a5,a4,a5
80005974:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:49
    unsigned slot = typeSlot & 0x0000FFFF;
80005978:	fdc42703          	lw	a4,-36(s0)
8000597c:	000107b7          	lui	a5,0x10
80005980:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80005984:	00f777b3          	and	a5,a4,a5
80005988:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:50
    if (type == SERVICE){
8000598c:	fec42703          	lw	a4,-20(s0)
80005990:	101007b7          	lui	a5,0x10100
80005994:	02f71863          	bne	a4,a5,800059c4 <API_ClearPipeSlot+0x6c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:51
        ServicePipe[slot].status = PIPE_FREE;
80005998:	8001f6b7          	lui	a3,0x8001f
8000599c:	fe842703          	lw	a4,-24(s0)
800059a0:	00070793          	mv	a5,a4
800059a4:	00479793          	slli	a5,a5,0x4
800059a8:	40e787b3          	sub	a5,a5,a4
800059ac:	00279793          	slli	a5,a5,0x2
800059b0:	4ac68713          	addi	a4,a3,1196 # 8001f4ac <__stack_top+0xfffdec5c>
800059b4:	00e787b3          	add	a5,a5,a4
800059b8:	fff00713          	li	a4,-1
800059bc:	00e7a023          	sw	a4,0(a5) # 10100000 <RAM_SIZE+0x10080000>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:55
    } else { // type == MESSAGE
        MessagePipe[slot].status = PIPE_FREE;
    }
    return;
800059c0:	0300006f          	j	800059f0 <API_ClearPipeSlot+0x98>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:53
        MessagePipe[slot].status = PIPE_FREE;
800059c4:	8001f6b7          	lui	a3,0x8001f
800059c8:	fe842703          	lw	a4,-24(s0)
800059cc:	00070793          	mv	a5,a4
800059d0:	00379793          	slli	a5,a5,0x3
800059d4:	00e787b3          	add	a5,a5,a4
800059d8:	00679793          	slli	a5,a5,0x6
800059dc:	60c68713          	addi	a4,a3,1548 # 8001f60c <__stack_top+0xfffdedbc>
800059e0:	00e787b3          	add	a5,a5,a4
800059e4:	fff00713          	li	a4,-1
800059e8:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:55
    return;
800059ec:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:56
}
800059f0:	02c12403          	lw	s0,44(sp)
800059f4:	03010113          	addi	sp,sp,48
800059f8:	00008067          	ret

800059fc <PLIC_init>:
PLIC_init():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:124
{
800059fc:	fe010113          	addi	sp,sp,-32
80005a00:	00812e23          	sw	s0,28(sp)
80005a04:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:126
    unsigned long hart_id = read_csr(mhartid);
80005a08:	f14027f3          	csrr	a5,mhartid
80005a0c:	fef42423          	sw	a5,-24(s0)
80005a10:	fe842783          	lw	a5,-24(s0)
80005a14:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
80005a18:	fe042623          	sw	zero,-20(s0)
80005a1c:	03c0006f          	j	80005a58 <PLIC_init+0x5c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:131 (discriminator 3)
        PLIC->TARGET_ENABLES[hart_id].ENABLES[inc] = 0;
80005a20:	40000737          	lui	a4,0x40000
80005a24:	fe442783          	lw	a5,-28(s0)
80005a28:	00579693          	slli	a3,a5,0x5
80005a2c:	fec42783          	lw	a5,-20(s0)
80005a30:	00f686b3          	add	a3,a3,a5
80005a34:	000017b7          	lui	a5,0x1
80005a38:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80005a3c:	00f687b3          	add	a5,a3,a5
80005a40:	00279793          	slli	a5,a5,0x2
80005a44:	00f707b3          	add	a5,a4,a5
80005a48:	0007a023          	sw	zero,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 3)
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
80005a4c:	fec42783          	lw	a5,-20(s0)
80005a50:	00178793          	addi	a5,a5,1
80005a54:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 1)
80005a58:	fec42783          	lw	a5,-20(s0)
80005a5c:	fc0782e3          	beqz	a5,80005a20 <PLIC_init+0x24>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
80005a60:	fe042623          	sw	zero,-20(s0)
80005a64:	0240006f          	j	80005a88 <PLIC_init+0x8c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:139 (discriminator 3)
        PLIC->SOURCE_PRIORITY[inc] = 0;
80005a68:	40000737          	lui	a4,0x40000
80005a6c:	fec42783          	lw	a5,-20(s0)
80005a70:	00279793          	slli	a5,a5,0x2
80005a74:	00f707b3          	add	a5,a4,a5
80005a78:	0007a023          	sw	zero,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 3)
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
80005a7c:	fec42783          	lw	a5,-20(s0)
80005a80:	00178793          	addi	a5,a5,1
80005a84:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 1)
80005a88:	fec42703          	lw	a4,-20(s0)
80005a8c:	01e00793          	li	a5,30
80005a90:	fce7fce3          	bleu	a4,a5,80005a68 <PLIC_init+0x6c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:143
    PLIC->TARGET[hart_id].PRIORITY_THRESHOLD = 0;
80005a94:	40000737          	lui	a4,0x40000
80005a98:	fe442783          	lw	a5,-28(s0)
80005a9c:	20078793          	addi	a5,a5,512
80005aa0:	00c79793          	slli	a5,a5,0xc
80005aa4:	00f707b3          	add	a5,a4,a5
80005aa8:	0007a023          	sw	zero,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:146
    set_csr(mie, MIP_MEIP);
80005aac:	000017b7          	lui	a5,0x1
80005ab0:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80005ab4:	3047a7f3          	csrrs	a5,mie,a5
80005ab8:	fef42023          	sw	a5,-32(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:147
}
80005abc:	00000013          	nop
80005ac0:	01c12403          	lw	s0,28(sp)
80005ac4:	02010113          	addi	sp,sp,32
80005ac8:	00008067          	ret

80005acc <main>:
main():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:50
unsigned int ProcessorAddr;

/*-----------------------------------------------------------*/

int main( void )
{
80005acc:	fd010113          	addi	sp,sp,-48
80005ad0:	02112623          	sw	ra,44(sp)
80005ad4:	02812423          	sw	s0,40(sp)
80005ad8:	03010413          	addi	s0,sp,48
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:52
	char str[20];
    PLIC_init();
80005adc:	f21ff0ef          	jal	ra,800059fc <PLIC_init>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:58

    /**************************************************************************
    * Initialize CoreUART with its base address, baud value, and line
    * configuration.
    *************************************************************************/
    UART_init(&g_uart, COREUARTAPB0_BASE_ADDR, BAUD_VALUE_115200,
80005ae0:	00100693          	li	a3,1
80005ae4:	02c00613          	li	a2,44
80005ae8:	700015b7          	lui	a1,0x70001
80005aec:	800217b7          	lui	a5,0x80021
80005af0:	83878513          	addi	a0,a5,-1992 # 80020838 <__stack_top+0xfffdffe8>
80005af4:	cdcfb0ef          	jal	ra,80000fd0 <UART_init>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:64
             (DATA_8_BITS | NO_PARITY) );
    
	/**************************************************************************
    * Initialize the Chronos platform stuff
    *************************************************************************/
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n Chronos platform initializing... \n" );
80005af8:	800067b7          	lui	a5,0x80006
80005afc:	15c78593          	addi	a1,a5,348 # 8000615c <__stack_top+0xfffc590c>
80005b00:	800217b7          	lui	a5,0x80021
80005b04:	83878513          	addi	a0,a5,-1992 # 80020838 <__stack_top+0xfffdffe8>
80005b08:	e94fb0ef          	jal	ra,8000119c <UART_polled_tx_string>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:65
	Chronos_init();
80005b0c:	8d4fd0ef          	jal	ra,80002be0 <Chronos_init>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:66
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This terminal belongs to the address: " );
80005b10:	800067b7          	lui	a5,0x80006
80005b14:	18478593          	addi	a1,a5,388 # 80006184 <__stack_top+0xfffc5934>
80005b18:	800217b7          	lui	a5,0x80021
80005b1c:	83878513          	addi	a0,a5,-1992 # 80020838 <__stack_top+0xfffdffe8>
80005b20:	e7cfb0ef          	jal	ra,8000119c <UART_polled_tx_string>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:67
	myItoa(ProcessorAddr, str, 16);
80005b24:	800217b7          	lui	a5,0x80021
80005b28:	8407a783          	lw	a5,-1984(a5) # 80020840 <__stack_top+0xfffdfff0>
80005b2c:	00078713          	mv	a4,a5
80005b30:	fdc40793          	addi	a5,s0,-36
80005b34:	01000613          	li	a2,16
80005b38:	00078593          	mv	a1,a5
80005b3c:	00070513          	mv	a0,a4
80005b40:	95dfd0ef          	jal	ra,8000349c <myItoa>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:68
    UART_polled_tx_string( &g_uart, (const uint8_t *)str); UART_polled_tx_string( &g_uart, (const uint8_t *)"\n");
80005b44:	fdc40793          	addi	a5,s0,-36
80005b48:	00078593          	mv	a1,a5
80005b4c:	800217b7          	lui	a5,0x80021
80005b50:	83878513          	addi	a0,a5,-1992 # 80020838 <__stack_top+0xfffdffe8>
80005b54:	e48fb0ef          	jal	ra,8000119c <UART_polled_tx_string>
80005b58:	800067b7          	lui	a5,0x80006
80005b5c:	1b078593          	addi	a1,a5,432 # 800061b0 <__stack_top+0xfffc5960>
80005b60:	800217b7          	lui	a5,0x80021
80005b64:	83878513          	addi	a0,a5,-1992 # 80020838 <__stack_top+0xfffdffe8>
80005b68:	e34fb0ef          	jal	ra,8000119c <UART_polled_tx_string>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:72
	
	//AppsToMap = 0;
	
	if (ProcessorAddr == 0x0000){
80005b6c:	800217b7          	lui	a5,0x80021
80005b70:	8407a783          	lw	a5,-1984(a5) # 80020840 <__stack_top+0xfffdfff0>
80005b74:	04079463          	bnez	a5,80005bbc <main+0xf0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:73
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is the Global Master: \n" );
80005b78:	800067b7          	lui	a5,0x80006
80005b7c:	1b478593          	addi	a1,a5,436 # 800061b4 <__stack_top+0xfffc5964>
80005b80:	800217b7          	lui	a5,0x80021
80005b84:	83878513          	addi	a0,a5,-1992 # 80020838 <__stack_top+0xfffdffe8>
80005b88:	e14fb0ef          	jal	ra,8000119c <UART_polled_tx_string>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:75
		/* Create the GlobalManager task */
		xTaskCreate( GlobalManagerTask, "GlobalMaster", 1000, NULL, uartPRIMARY_PRIORITY, NULL );
80005b8c:	00000893          	li	a7,0
80005b90:	00000813          	li	a6,0
80005b94:	00000793          	li	a5,0
80005b98:	00200713          	li	a4,2
80005b9c:	00000693          	li	a3,0
80005ba0:	3e800613          	li	a2,1000
80005ba4:	800065b7          	lui	a1,0x80006
80005ba8:	1e058593          	addi	a1,a1,480 # 800061e0 <__stack_top+0xfffc5990>
80005bac:	80006537          	lui	a0,0x80006
80005bb0:	cdc50513          	addi	a0,a0,-804 # 80005cdc <__stack_top+0xfffc548c>
80005bb4:	a98fc0ef          	jal	ra,80001e4c <xTaskGenericCreate>
80005bb8:	0700006f          	j	80005c28 <main+0x15c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:77
	} else {
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is a Slave: \n" );
80005bbc:	800067b7          	lui	a5,0x80006
80005bc0:	1f078593          	addi	a1,a5,496 # 800061f0 <__stack_top+0xfffc59a0>
80005bc4:	800217b7          	lui	a5,0x80021
80005bc8:	83878513          	addi	a0,a5,-1992 # 80020838 <__stack_top+0xfffdffe8>
80005bcc:	dd0fb0ef          	jal	ra,8000119c <UART_polled_tx_string>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:80
		
		/* Create the two test tasks. */
		xTaskCreate( vUartTestTask1, "UArt1", 1000, NULL, uartPRIMARY_PRIORITY, NULL );
80005bd0:	00000893          	li	a7,0
80005bd4:	00000813          	li	a6,0
80005bd8:	00000793          	li	a5,0
80005bdc:	00200713          	li	a4,2
80005be0:	00000693          	li	a3,0
80005be4:	3e800613          	li	a2,1000
80005be8:	800065b7          	lui	a1,0x80006
80005bec:	21058593          	addi	a1,a1,528 # 80006210 <__stack_top+0xfffc59c0>
80005bf0:	80006537          	lui	a0,0x80006
80005bf4:	c7450513          	addi	a0,a0,-908 # 80005c74 <__stack_top+0xfffc5424>
80005bf8:	a54fc0ef          	jal	ra,80001e4c <xTaskGenericCreate>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:82
		//API_CreateTask();
		xTaskCreate( vUartTestTask2, "UArt2", 1000, NULL, uartPRIMARY_PRIORITY, NULL );
80005bfc:	00000893          	li	a7,0
80005c00:	00000813          	li	a6,0
80005c04:	00000793          	li	a5,0
80005c08:	00200713          	li	a4,2
80005c0c:	00000693          	li	a3,0
80005c10:	3e800613          	li	a2,1000
80005c14:	800065b7          	lui	a1,0x80006
80005c18:	21858593          	addi	a1,a1,536 # 80006218 <__stack_top+0xfffc59c8>
80005c1c:	80006537          	lui	a0,0x80006
80005c20:	ca850513          	addi	a0,a0,-856 # 80005ca8 <__stack_top+0xfffc5458>
80005c24:	a28fc0ef          	jal	ra,80001e4c <xTaskGenericCreate>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:86
	}	

	/* Start the kernel.  From here on, only tasks and interrupts will run. */
	vTaskStartScheduler();
80005c28:	cc4fc0ef          	jal	ra,800020ec <vTaskStartScheduler>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:89

	/* Exit FreeRTOS */
	return 0;
80005c2c:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:90
}
80005c30:	00078513          	mv	a0,a5
80005c34:	02c12083          	lw	ra,44(sp)
80005c38:	02812403          	lw	s0,40(sp)
80005c3c:	03010113          	addi	sp,sp,48
80005c40:	00008067          	ret

80005c44 <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:95

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
80005c44:	ff010113          	addi	sp,sp,-16
80005c48:	00812623          	sw	s0,12(sp)
80005c4c:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:106
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
80005c50:	30047073          	csrci	mstatus,8
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:107 (discriminator 1)
	for( ;; );
80005c54:	0000006f          	j	80005c54 <vApplicationMallocFailedHook+0x10>

80005c58 <vApplicationIdleHook>:
vApplicationIdleHook():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:112
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
80005c58:	ff010113          	addi	sp,sp,-16
80005c5c:	00812623          	sw	s0,12(sp)
80005c60:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:122
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
80005c64:	00000013          	nop
80005c68:	00c12403          	lw	s0,12(sp)
80005c6c:	01010113          	addi	sp,sp,16
80005c70:	00008067          	ret

80005c74 <vUartTestTask1>:
vUartTestTask1():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:139
	for( ;; );
}
/*-----------------------------------------------------------*/

static void vUartTestTask1( void *pvParameters )
{
80005c74:	fe010113          	addi	sp,sp,-32
80005c78:	00112e23          	sw	ra,28(sp)
80005c7c:	00812c23          	sw	s0,24(sp)
80005c80:	02010413          	addi	s0,sp,32
80005c84:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:143 (discriminator 1)
	( void ) pvParameters;
	for( ;; )
	{
		UART_polled_tx_string( &g_uart, (const uint8_t *)"Task - 1\r\n" );
80005c88:	800067b7          	lui	a5,0x80006
80005c8c:	22078593          	addi	a1,a5,544 # 80006220 <__stack_top+0xfffc59d0>
80005c90:	800217b7          	lui	a5,0x80021
80005c94:	83878513          	addi	a0,a5,-1992 # 80020838 <__stack_top+0xfffdffe8>
80005c98:	d04fb0ef          	jal	ra,8000119c <UART_polled_tx_string>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:144 (discriminator 1)
	    vTaskDelay(2);
80005c9c:	00200513          	li	a0,2
80005ca0:	bc8fc0ef          	jal	ra,80002068 <vTaskDelay>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:143 (discriminator 1)
		UART_polled_tx_string( &g_uart, (const uint8_t *)"Task - 1\r\n" );
80005ca4:	fe5ff06f          	j	80005c88 <vUartTestTask1+0x14>

80005ca8 <vUartTestTask2>:
vUartTestTask2():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:152


/*-----------------------------------------------------------*/

static void vUartTestTask2( void *pvParameters )
{
80005ca8:	fe010113          	addi	sp,sp,-32
80005cac:	00112e23          	sw	ra,28(sp)
80005cb0:	00812c23          	sw	s0,24(sp)
80005cb4:	02010413          	addi	s0,sp,32
80005cb8:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:156 (discriminator 1)
	( void ) pvParameters;
	for( ;; )
	{
		UART_polled_tx_string( &g_uart, (const uint8_t *)"Task - 2\r\n" );
80005cbc:	800067b7          	lui	a5,0x80006
80005cc0:	22c78593          	addi	a1,a5,556 # 8000622c <__stack_top+0xfffc59dc>
80005cc4:	800217b7          	lui	a5,0x80021
80005cc8:	83878513          	addi	a0,a5,-1992 # 80020838 <__stack_top+0xfffdffe8>
80005ccc:	cd0fb0ef          	jal	ra,8000119c <UART_polled_tx_string>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:157 (discriminator 1)
	    vTaskDelay(5);
80005cd0:	00500513          	li	a0,5
80005cd4:	b94fc0ef          	jal	ra,80002068 <vTaskDelay>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:156 (discriminator 1)
		UART_polled_tx_string( &g_uart, (const uint8_t *)"Task - 2\r\n" );
80005cd8:	fe5ff06f          	j	80005cbc <vUartTestTask2+0x14>

80005cdc <GlobalManagerTask>:
GlobalManagerTask():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:163
	}
}

/*-----------------------------------------------------------*/

static void GlobalManagerTask( void *pvParameters ){
80005cdc:	fd010113          	addi	sp,sp,-48
80005ce0:	02112623          	sw	ra,44(sp)
80005ce4:	02812423          	sw	s0,40(sp)
80005ce8:	03010413          	addi	s0,sp,48
80005cec:	fca42e23          	sw	a0,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:167
	( void ) pvParameters;
	int tick;
	// Initialize the priority vector with the pattern policy
	GeneratePatternMatrix();
80005cf0:	891fe0ef          	jal	ra,80004580 <GeneratePatternMatrix>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:170

	// Initialize the System Tiles Info
	API_TilesReset();
80005cf4:	f74fe0ef          	jal	ra,80004468 <API_TilesReset>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:173

	// Initialize the applications vector
    API_ApplicationsReset();
80005cf8:	f10fe0ef          	jal	ra,80004408 <API_ApplicationsReset>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:176

	// Informs the Repository that the GLOBALMASTER is ready to receive the application info
	API_RepositoryWakeUp();
80005cfc:	ba0fe0ef          	jal	ra,8000409c <API_RepositoryWakeUp>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:179 (discriminator 1)

	for(;;){
		tick = xTaskGetTickCount();
80005d00:	e04fc0ef          	jal	ra,80002304 <xTaskGetTickCount>
80005d04:	00050793          	mv	a5,a0
80005d08:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:180 (discriminator 1)
		printsv("GlobalMasterActive", tick);
80005d0c:	fec42583          	lw	a1,-20(s0)
80005d10:	800067b7          	lui	a5,0x80006
80005d14:	23878513          	addi	a0,a5,568 # 80006238 <__stack_top+0xfffc59e8>
80005d18:	84cfd0ef          	jal	ra,80002d64 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:181 (discriminator 1)
		UART_polled_tx_string( &g_uart, (const uint8_t *)"GlobalMasterRoutine...\r\n" );
80005d1c:	800067b7          	lui	a5,0x80006
80005d20:	24c78593          	addi	a1,a5,588 # 8000624c <__stack_top+0xfffc59fc>
80005d24:	800217b7          	lui	a5,0x80021
80005d28:	83878513          	addi	a0,a5,-1992 # 80020838 <__stack_top+0xfffdffe8>
80005d2c:	c70fb0ef          	jal	ra,8000119c <UART_polled_tx_string>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:184 (discriminator 1)

		// Checks if there is some task to allocate...
		API_AllocateTasks(tick);
80005d30:	fec42783          	lw	a5,-20(s0)
80005d34:	00078513          	mv	a0,a5
80005d38:	8f1fe0ef          	jal	ra,80004628 <API_AllocateTasks>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:189 (discriminator 1)




		vTaskDelay(1);
80005d3c:	00100513          	li	a0,1
80005d40:	b28fc0ef          	jal	ra,80002068 <vTaskDelay>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:179 (discriminator 1)
		tick = xTaskGetTickCount();
80005d44:	fbdff06f          	j	80005d00 <GlobalManagerTask+0x24>

80005d48 <write>:
write():
80005d48:	00000797          	auipc	a5,0x0
80005d4c:	53878793          	addi	a5,a5,1336 # 80006280 <_impure_ptr>
80005d50:	00060693          	mv	a3,a2
80005d54:	00058613          	mv	a2,a1
80005d58:	00050593          	mv	a1,a0
80005d5c:	0007a503          	lw	a0,0(a5)
80005d60:	0040006f          	j	80005d64 <_write_r>

80005d64 <_write_r>:
_write_r():
80005d64:	ff010113          	addi	sp,sp,-16
80005d68:	00812423          	sw	s0,8(sp)
80005d6c:	00050413          	mv	s0,a0
80005d70:	00058513          	mv	a0,a1
80005d74:	00060593          	mv	a1,a2
80005d78:	00068613          	mv	a2,a3
80005d7c:	0001a797          	auipc	a5,0x1a
80005d80:	1807a823          	sw	zero,400(a5) # 8001ff0c <errno>
80005d84:	00112623          	sw	ra,12(sp)
80005d88:	888fb0ef          	jal	ra,80000e10 <_write>
80005d8c:	fff00793          	li	a5,-1
80005d90:	00f51c63          	bne	a0,a5,80005da8 <_write_r+0x44>
80005d94:	0001a797          	auipc	a5,0x1a
80005d98:	17878793          	addi	a5,a5,376 # 8001ff0c <errno>
80005d9c:	0007a783          	lw	a5,0(a5)
80005da0:	00078463          	beqz	a5,80005da8 <_write_r+0x44>
80005da4:	00f42023          	sw	a5,0(s0)
80005da8:	00c12083          	lw	ra,12(sp)
80005dac:	00812403          	lw	s0,8(sp)
80005db0:	01010113          	addi	sp,sp,16
80005db4:	00008067          	ret
	...
80005dc0:	6568                	flw	fa0,76(a0)
80005dc2:	6c6c                	flw	fa1,92(s0)
80005dc4:	0000006f          	j	80005dc4 <_write_r+0x60>
80005dc8:	6544                	flw	fs1,12(a0)
80005dca:	6574                	flw	fa3,76(a0)
80005dcc:	69657463          	bleu	s6,a0,80006454 <__sbss_end+0x74>
80005dd0:	7520                	flw	fs0,104(a0)
80005dd2:	616d                	addi	sp,sp,240
80005dd4:	6320                	flw	fs0,64(a4)
80005dd6:	6168                	flw	fa0,68(a0)
80005dd8:	616d                	addi	sp,sp,240
80005dda:	6164                	flw	fs1,68(a0)
80005ddc:	5420                	lw	s0,104(s0)
80005dde:	5345                	li	t1,-15
80005de0:	4554                	lw	a3,12(a0)
80005de2:	6420                	flw	fs0,72(s0)
80005de4:	2065                	jal	80005e8c <_write_r+0x128>
80005de6:	74736973          	csrrsi	s2,0x747,6
80005dea:	6d65                	lui	s10,0x19
80005dec:	2161                	jal	80006274 <uxCriticalNesting>
80005dee:	000a                	c.slli	zero,0x2
80005df0:	7261                	lui	tp,0xffff8
80005df2:	00203067          	0x203067
80005df6:	0000                	unimp
80005df8:	7261                	lui	tp,0xffff8
80005dfa:	00203167          	0x203167
80005dfe:	0000                	unimp
80005e00:	7261                	lui	tp,0xffff8
80005e02:	00203267          	0x203267
80005e06:	0000                	unimp
80005e08:	7261                	lui	tp,0xffff8
80005e0a:	00203367          	0x203367
80005e0e:	0000                	unimp
80005e10:	7261                	lui	tp,0xffff8
80005e12:	00203467          	0x203467
80005e16:	0000                	unimp
80005e18:	7974                	flw	fa3,116(a0)
80005e1a:	6570                	flw	fa2,76(a0)
80005e1c:	0020                	addi	s0,sp,8
80005e1e:	0000                	unimp
80005e20:	74737953          	0x74737953
80005e24:	6d65                	lui	s10,0x19
80005e26:	6c6c6163          	bltu	s8,t1,800064e8 <__sbss_end+0x108>
80005e2a:	6e20                	flw	fs0,88(a2)
80005e2c:	206fa3c3          	fmadd.s	ft7,ft11,ft6,ft4,rdn
80005e30:	6469                	lui	s0,0x1a
80005e32:	6e65                	lui	t3,0x19
80005e34:	6974                	flw	fa3,84(a0)
80005e36:	6966                	flw	fs2,88(sp)
80005e38:	61646163          	bltu	s0,s6,8000643a <__sbss_end+0x5a>
80005e3c:	0a21                	addi	s4,s4,8
80005e3e:	0000                	unimp
80005e40:	7274                	flw	fa3,100(a2)
80005e42:	7061                	c.lui	zero,0xffff8
80005e44:	000a                	c.slli	zero,0x2
80005e46:	0000                	unimp
80005e48:	0768                	addi	a0,sp,908
80005e4a:	8000                	0x8000
80005e4c:	06e0                	addi	s0,sp,844
80005e4e:	8000                	0x8000
80005e50:	06e0                	addi	s0,sp,844
80005e52:	8000                	0x8000
80005e54:	06e0                	addi	s0,sp,844
80005e56:	8000                	0x8000
80005e58:	06e0                	addi	s0,sp,844
80005e5a:	8000                	0x8000
80005e5c:	06e0                	addi	s0,sp,844
80005e5e:	8000                	0x8000
80005e60:	06e0                	addi	s0,sp,844
80005e62:	8000                	0x8000
80005e64:	06e0                	addi	s0,sp,844
80005e66:	8000                	0x8000
80005e68:	06e0                	addi	s0,sp,844
80005e6a:	8000                	0x8000
80005e6c:	06e0                	addi	s0,sp,844
80005e6e:	8000                	0x8000
80005e70:	06c0                	addi	s0,sp,836
80005e72:	8000                	0x8000
80005e74:	06e0                	addi	s0,sp,844
80005e76:	8000                	0x8000
80005e78:	06e0                	addi	s0,sp,844
80005e7a:	8000                	0x8000
80005e7c:	06e0                	addi	s0,sp,844
80005e7e:	8000                	0x8000
80005e80:	06e0                	addi	s0,sp,844
80005e82:	8000                	0x8000
80005e84:	06e0                	addi	s0,sp,844
80005e86:	8000                	0x8000
80005e88:	06e0                	addi	s0,sp,844
80005e8a:	8000                	0x8000
80005e8c:	06e0                	addi	s0,sp,844
80005e8e:	8000                	0x8000
80005e90:	06e0                	addi	s0,sp,844
80005e92:	8000                	0x8000
80005e94:	06e0                	addi	s0,sp,844
80005e96:	8000                	0x8000
80005e98:	06d0                	addi	a2,sp,836
80005e9a:	8000                	0x8000
80005e9c:	06e0                	addi	s0,sp,844
80005e9e:	8000                	0x8000
80005ea0:	06e0                	addi	s0,sp,844
80005ea2:	8000                	0x8000
80005ea4:	06e0                	addi	s0,sp,844
80005ea6:	8000                	0x8000
80005ea8:	06e0                	addi	s0,sp,844
80005eaa:	8000                	0x8000
80005eac:	06e0                	addi	s0,sp,844
80005eae:	8000                	0x8000
80005eb0:	06e0                	addi	s0,sp,844
80005eb2:	8000                	0x8000
80005eb4:	06e0                	addi	s0,sp,844
80005eb6:	8000                	0x8000
80005eb8:	06e0                	addi	s0,sp,844
80005eba:	8000                	0x8000
80005ebc:	06e0                	addi	s0,sp,844
80005ebe:	8000                	0x8000
80005ec0:	0684                	addi	s1,sp,832
80005ec2:	8000                	0x8000
80005ec4:	06e0                	addi	s0,sp,844
80005ec6:	8000                	0x8000
80005ec8:	06e0                	addi	s0,sp,844
80005eca:	8000                	0x8000
80005ecc:	06e0                	addi	s0,sp,844
80005ece:	8000                	0x8000
80005ed0:	06e0                	addi	s0,sp,844
80005ed2:	8000                	0x8000
80005ed4:	06e0                	addi	s0,sp,844
80005ed6:	8000                	0x8000
80005ed8:	06e0                	addi	s0,sp,844
80005eda:	8000                	0x8000
80005edc:	06e0                	addi	s0,sp,844
80005ede:	8000                	0x8000
80005ee0:	06e0                	addi	s0,sp,844
80005ee2:	8000                	0x8000
80005ee4:	06e0                	addi	s0,sp,844
80005ee6:	8000                	0x8000
80005ee8:	0660                	addi	s0,sp,780
80005eea:	8000                	0x8000
80005eec:	06e0                	addi	s0,sp,844
80005eee:	8000                	0x8000
80005ef0:	06e0                	addi	s0,sp,844
80005ef2:	8000                	0x8000
80005ef4:	06e0                	addi	s0,sp,844
80005ef6:	8000                	0x8000
80005ef8:	06e0                	addi	s0,sp,844
80005efa:	8000                	0x8000
80005efc:	06e0                	addi	s0,sp,844
80005efe:	8000                	0x8000
80005f00:	06e0                	addi	s0,sp,844
80005f02:	8000                	0x8000
80005f04:	06e0                	addi	s0,sp,844
80005f06:	8000                	0x8000
80005f08:	06e0                	addi	s0,sp,844
80005f0a:	8000                	0x8000
80005f0c:	06e0                	addi	s0,sp,844
80005f0e:	8000                	0x8000
80005f10:	06e0                	addi	s0,sp,844
80005f12:	8000                	0x8000
80005f14:	06e0                	addi	s0,sp,844
80005f16:	8000                	0x8000
80005f18:	06e0                	addi	s0,sp,844
80005f1a:	8000                	0x8000
80005f1c:	06e0                	addi	s0,sp,844
80005f1e:	8000                	0x8000
80005f20:	06e0                	addi	s0,sp,844
80005f22:	8000                	0x8000
80005f24:	06e0                	addi	s0,sp,844
80005f26:	8000                	0x8000
80005f28:	05d8                	addi	a4,sp,708
80005f2a:	8000                	0x8000
80005f2c:	7830                	flw	fa2,112(s0)
80005f2e:	0000                	unimp
80005f30:	500a                	0x500a
80005f32:	6f72                	flw	ft10,28(sp)
80005f34:	206d6167          	0x206d6167
80005f38:	6168                	flw	fa0,68(a0)
80005f3a:	78652073          	csrs	0x786,a0
80005f3e:	7469                	lui	s0,0xffffa
80005f40:	6465                	lui	s0,0x19
80005f42:	7720                	flw	fs0,104(a4)
80005f44:	7469                	lui	s0,0xffffa
80005f46:	2068                	fld	fa0,192(s0)
80005f48:	65646f63          	bltu	s0,s6,800065a6 <__sbss_end+0x1c6>
80005f4c:	003a                	c.slli	zero,0xe
80005f4e:	0000                	unimp
80005f50:	000d                	c.nop	3
80005f52:	0000                	unimp
80005f54:	4449                	li	s0,18
80005f56:	454c                	lw	a1,12(a0)
80005f58:	0000                	unimp
80005f5a:	0000                	unimp
80005f5c:	000a                	c.slli	zero,0x2
80005f5e:	0000                	unimp
80005f60:	4e49                	li	t3,18
80005f62:	4554                	lw	a3,12(a0)
80005f64:	5252                	lw	tp,52(sp)
80005f66:	5055                	c.li	zero,-11
80005f68:	4954                	lw	a3,20(a0)
80005f6a:	54204e4f          	0x54204e4f
80005f6e:	0a58                	addi	a4,sp,276
80005f70:	0000                	unimp
80005f72:	0000                	unimp
80005f74:	72617453          	0x72617453
80005f78:	6974                	flw	fa3,84(a0)
80005f7a:	676e                	flw	fa4,216(sp)
80005f7c:	5420                	lw	s0,104(s0)
80005f7e:	7361                	lui	t1,0xffff8
80005f80:	00203a6b          	0x203a6b
80005f84:	67656843          	fmadd.q	fa6,fa0,fs6,fa2,unknown
80005f88:	7520756f          	jal	a0,8000d6da <__global_pointer$+0x6c6a>
80005f8c:	206d                	jal	80006036 <_write_r+0x2d2>
80005f8e:	656d                	lui	a0,0x1b
80005f90:	67617373          	csrrci	t1,0x676,2
80005f94:	2065                	jal	8000603c <_write_r+0x2d8>
80005f96:	6572                	flw	fa0,28(sp)
80005f98:	7571                	lui	a0,0xffffc
80005f9a:	7365                	lui	t1,0xffff9
80005f9c:	2174                	fld	fa3,192(a0)
80005f9e:	0a20                	addi	s0,sp,280
80005fa0:	0000                	unimp
80005fa2:	0000                	unimp
80005fa4:	6554                	flw	fa3,12(a0)
80005fa6:	206d                	jal	80006050 <_write_r+0x2ec>
80005fa8:	6d75                	lui	s10,0x1d
80005faa:	2061                	jal	80006032 <_write_r+0x2ce>
80005fac:	656d                	lui	a0,0x1b
80005fae:	736e                	flw	ft6,248(sp)
80005fb0:	6761                	lui	a4,0x18
80005fb2:	6d65                	lui	s10,0x19
80005fb4:	6320                	flw	fs0,64(a4)
80005fb6:	6568                	flw	fa0,76(a0)
80005fb8:	646e6167          	0x646e6167
80005fbc:	2e2e2e6f          	jal	t3,800e829e <__stack_top+0xa7a4e>
80005fc0:	000a                	c.slli	zero,0x2
80005fc2:	0000                	unimp
80005fc4:	6554                	flw	fa3,12(a0)
80005fc6:	6d72                	flw	fs10,28(sp)
80005fc8:	6e69                	lui	t3,0x1a
80005fca:	6420756f          	jal	a0,8000d60c <__global_pointer$+0x6b9c>
80005fce:	2065                	jal	80006076 <_write_r+0x312>
80005fd0:	6e65                	lui	t3,0x19
80005fd2:	7274                	flw	fa3,100(a2)
80005fd4:	6765                	lui	a4,0x19
80005fd6:	7261                	lui	tp,0xffff8
80005fd8:	6120                	flw	fs0,64(a0)
80005fda:	6d20                	flw	fs0,88(a0)
80005fdc:	6e65                	lui	t3,0x19
80005fde:	65676173          	csrrsi	sp,0x656,14
80005fe2:	216d                	jal	8000648c <__sbss_end+0xac>
80005fe4:	0a21                	addi	s4,s4,8
80005fe6:	0000                	unimp
80005fe8:	203e                	fld	ft0,456(sp)
80005fea:	6174                	flw	fa3,68(a0)
80005fec:	6c736b73          	csrrsi	s6,0x6c7,6
80005ff0:	203a746f          	jal	s0,800ad9f2 <__stack_top+0x6d1a2>
80005ff4:	0000                	unimp
80005ff6:	0000                	unimp
80005ff8:	5245                	li	tp,-15
80005ffa:	4f52                	lw	t5,20(sp)
80005ffc:	2052                	fld	ft0,272(sp)
80005ffe:	7845                	lui	a6,0xffff1
80006000:	6574                	flw	fa3,76(a0)
80006002:	6e72                	flw	ft8,28(sp)
80006004:	6c61                	lui	s8,0x18
80006006:	325f 495f 5152      	0x5152495f325f
8000600c:	6148                	flw	fa0,4(a0)
8000600e:	646e                	flw	fs0,216(sp)
80006010:	656c                	flw	fa1,76(a0)
80006012:	2072                	fld	ft0,280(sp)
80006014:	6e55                	lui	t3,0x15
80006016:	776f6e6b          	0x776f6e6b
8000601a:	2d6e                	fld	fs10,216(sp)
8000601c:	76726553          	0x76726553
80006020:	6369                	lui	t1,0x1a
80006022:	0065                	c.nop	25
80006024:	7266                	flw	ft4,120(sp)
80006026:	203a6d6f          	jal	s10,800aca28 <__stack_top+0x6c1d8>
8000602a:	0000                	unimp
8000602c:	736d                	lui	t1,0xffffb
8000602e:	6f702067          	0x6f702067
80006032:	6e69                	lui	t3,0x1a
80006034:	6574                	flw	fa3,76(a0)
80006036:	3a72                	fld	fs4,312(sp)
80006038:	0020                	addi	s0,sp,8
8000603a:	0000                	unimp
8000603c:	694d                	lui	s2,0x13
8000603e:	686e                	flw	fa6,216(sp)
80006040:	2061                	jal	800060c8 <_write_r+0x364>
80006042:	6174                	flw	fa3,68(a0)
80006044:	49206b73          	csrrsi	s6,0x492,0
80006048:	3a44                	fld	fs1,176(a2)
8000604a:	0020                	addi	s0,sp,8
8000604c:	6e45                	lui	t3,0x11
8000604e:	6976                	flw	fs2,92(sp)
80006050:	6e61                	lui	t3,0x18
80006052:	6f64                	flw	fs1,92(a4)
80006054:	7520                	flw	fs0,104(a0)
80006056:	206d                	jal	80006100 <_write_r+0x39c>
80006058:	654d                	lui	a0,0x13
8000605a:	67617373          	csrrci	t1,0x676,2
8000605e:	2065                	jal	80006106 <_write_r+0x3a2>
80006060:	6552                	flw	fa0,20(sp)
80006062:	7571                	lui	a0,0xffffc
80006064:	7365                	lui	t1,0xffff9
80006066:	2174                	fld	fa3,192(a0)
80006068:	000a                	c.slli	zero,0x2
8000606a:	0000                	unimp
8000606c:	6520                	flw	fs0,72(a0)
8000606e:	72657073          	csrci	0x726,10
80006072:	6e61                	lui	t3,0x18
80006074:	6f64                	flw	fs1,92(a4)
80006076:	6d20                	flw	fs0,88(a0)
80006078:	6e65                	lui	t3,0x19
8000607a:	65616773          	csrrsi	a4,0x656,2
8000607e:	206d                	jal	80006128 <_write_r+0x3c4>
80006080:	0000                	unimp
80006082:	0000                	unimp
80006084:	6174                	flw	fa3,68(a0)
80006086:	6c736b73          	csrrsi	s6,0x6c7,6
8000608a:	0020746f          	jal	s0,8000d08c <__global_pointer$+0x661c>
8000608e:	0000                	unimp
80006090:	6150                	flw	fa2,4(a0)
80006092:	65746f63          	bltu	s0,s7,800066f0 <__sbss_end+0x310>
80006096:	7220                	flw	fs0,96(a2)
80006098:	6365                	lui	t1,0x19
8000609a:	6265                	lui	tp,0x19
8000609c:	6469                	lui	s0,0x1a
8000609e:	000a216f          	jal	sp,800a809e <__stack_top+0x6784e>
800060a2:	0000                	unimp
800060a4:	654e                	flw	fa0,208(sp)
800060a6:	70612077          	0x70612077
800060aa:	6c70                	flw	fa2,92(s0)
800060ac:	6369                	lui	t1,0x1a
800060ae:	7461                	lui	s0,0xffff8
800060b0:	6f69                	lui	t5,0x1a
800060b2:	206e                	fld	ft0,216(sp)
800060b4:	6572                	flw	fa0,28(sp)
800060b6:	74736967          	0x74736967
800060ba:	7265                	lui	tp,0xffff9
800060bc:	6465                	lui	s0,0x19
800060be:	2d20                	fld	fs0,88(a0)
800060c0:	4920                	lw	s0,80(a0)
800060c2:	3a44                	fld	fs1,176(a2)
800060c4:	0020                	addi	s0,sp,8
800060c6:	0000                	unimp
800060c8:	2049                	jal	8000614a <_write_r+0x3e6>
800060ca:	20746f67          	0x20746f67
800060ce:	2061                	jal	80006156 <_write_r+0x3f2>
800060d0:	7266                	flw	ft4,120(sp)
800060d2:	6565                	lui	a0,0x19
800060d4:	7320                	flw	fs0,96(a4)
800060d6:	7265                	lui	tp,0xffff9
800060d8:	6976                	flw	fs2,92(sp)
800060da:	73206563          	bltu	zero,s2,80006804 <__sbss_end+0x424>
800060de:	6f6c                	flw	fa1,92(a4)
800060e0:	2174                	fld	fa3,192(a0)
800060e2:	2021                	jal	800060ea <_write_r+0x386>
800060e4:	3e2d                	jal	80005c1e <main+0x152>
800060e6:	0020                	addi	s0,sp,8
800060e8:	6920                	flw	fs0,80(a0)
800060ea:	6c612073          	csrs	0x6c6,sp
800060ee:	6f6c                	flw	fa1,92(a4)
800060f0:	65746163          	bltu	s0,s7,80006732 <__sbss_end+0x352>
800060f4:	2164                	fld	fs1,192(a0)
800060f6:	0000                	unimp
800060f8:	7041                	c.lui	zero,0xffff0
800060fa:	6c70                	flw	fa2,92(s0)
800060fc:	6369                	lui	t1,0x1a
800060fe:	7461                	lui	s0,0xffff8
80006100:	6f69                	lui	t5,0x1a
80006102:	206e                	fld	ft0,216(sp)
80006104:	0000                	unimp
80006106:	0000                	unimp
80006108:	5309                	li	t1,-30
8000610a:	6174                	flw	fa3,68(a0)
8000610c:	7472                	flw	fs0,60(sp)
8000610e:	6320                	flw	fs0,64(a4)
80006110:	616d6d6f          	jal	s10,800dc726 <__stack_top+0x9bed6>
80006114:	646e                	flw	fs0,216(sp)
80006116:	7320                	flw	fs0,96(a4)
80006118:	6e65                	lui	t3,0x19
8000611a:	2074                	fld	fa3,192(s0)
8000611c:	6f74                	flw	fa3,92(a4)
8000611e:	6520                	flw	fs0,72(a0)
80006120:	6576                	flw	fa0,92(sp)
80006122:	7972                	flw	fs2,60(sp)
80006124:	7420                	flw	fs0,104(s0)
80006126:	7361                	lui	t1,0xffff8
80006128:	000a2e6b          	0xa2e6b
8000612c:	6120                	flw	fs0,64(a0)
8000612e:	6464                	flw	fs1,76(s0)
80006130:	2072                	fld	ft0,280(sp)
80006132:	0000                	unimp
80006134:	6174                	flw	fa3,68(a0)
80006136:	00206b73          	csrrsi	s6,frm,0
8000613a:	0000                	unimp
8000613c:	614c                	flw	fa1,4(a0)
8000613e:	6154                	flw	fa3,4(a0)
80006140:	00006b73          	csrrsi	s6,ustatus,0
80006144:	0a0d                	addi	s4,s4,3
80006146:	7246                	flw	ft4,112(sp)
80006148:	6565                	lui	a0,0x19
8000614a:	5452                	lw	s0,52(sp)
8000614c:	4520534f          	0x4520534f
80006150:	6178                	flw	fa4,68(a0)
80006152:	706d                	c.lui	zero,0xffffb
80006154:	656c                	flw	fa1,76(a0)
80006156:	0a0d                	addi	s4,s4,3
80006158:	0000                	unimp
8000615a:	0000                	unimp
8000615c:	200a                	fld	ft0,128(sp)
8000615e:	6f726843          	fmadd.q	fa6,ft4,fs7,fa3,unknown
80006162:	6f6e                	flw	ft10,216(sp)
80006164:	6c702073          	csrr	zero,0x6c7
80006168:	7461                	lui	s0,0xffff8
8000616a:	6f66                	flw	ft10,88(sp)
8000616c:	6d72                	flw	fs10,28(sp)
8000616e:	6920                	flw	fs0,80(a0)
80006170:	696e                	flw	fs2,216(sp)
80006172:	6974                	flw	fa3,84(a0)
80006174:	6c61                	lui	s8,0x18
80006176:	7a69                	lui	s4,0xffffa
80006178:	6e69                	lui	t3,0x1a
8000617a:	2e2e2e67          	0x2e2e2e67
8000617e:	0a20                	addi	s0,sp,280
80006180:	0000                	unimp
80006182:	0000                	unimp
80006184:	200a                	fld	ft0,128(sp)
80006186:	6854                	flw	fa3,20(s0)
80006188:	7369                	lui	t1,0xffffa
8000618a:	7420                	flw	fs0,104(s0)
8000618c:	7265                	lui	tp,0xffff9
8000618e:	696d                	lui	s2,0x1b
80006190:	616e                	flw	ft2,216(sp)
80006192:	206c                	fld	fa1,192(s0)
80006194:	6562                	flw	fa0,24(sp)
80006196:	6f6c                	flw	fa1,92(a4)
80006198:	676e                	flw	fa4,216(sp)
8000619a:	6f742073          	csrs	0x6f7,s0
8000619e:	7420                	flw	fs0,104(s0)
800061a0:	6568                	flw	fa0,76(a0)
800061a2:	6120                	flw	fs0,64(a0)
800061a4:	6464                	flw	fs1,76(s0)
800061a6:	6572                	flw	fa0,28(sp)
800061a8:	203a7373          	csrrci	t1,hideleg,20
800061ac:	0000                	unimp
800061ae:	0000                	unimp
800061b0:	000a                	c.slli	zero,0x2
800061b2:	0000                	unimp
800061b4:	200a                	fld	ft0,128(sp)
800061b6:	6854                	flw	fa3,20(s0)
800061b8:	7369                	lui	t1,0xffffa
800061ba:	7020                	flw	fs0,96(s0)
800061bc:	6f72                	flw	ft10,28(sp)
800061be:	73736563          	bltu	t1,s7,800068e8 <__sbss_end+0x508>
800061c2:	6920726f          	jal	tp,8000d854 <__global_pointer$+0x6de4>
800061c6:	68742073          	csrs	0x687,s0
800061ca:	2065                	jal	80006272 <__sdata_load+0x2>
800061cc:	626f6c47          	fmsub.d	fs8,ft10,ft6,fa2,unknown
800061d0:	6c61                	lui	s8,0x18
800061d2:	4d20                	lw	s0,88(a0)
800061d4:	7361                	lui	t1,0xffff8
800061d6:	6574                	flw	fa3,76(a0)
800061d8:	3a72                	fld	fs4,312(sp)
800061da:	0a20                	addi	s0,sp,280
800061dc:	0000                	unimp
800061de:	0000                	unimp
800061e0:	626f6c47          	fmsub.d	fs8,ft10,ft6,fa2,unknown
800061e4:	6c61                	lui	s8,0x18
800061e6:	614d                	addi	sp,sp,176
800061e8:	72657473          	csrrci	s0,0x726,10
800061ec:	0000                	unimp
800061ee:	0000                	unimp
800061f0:	200a                	fld	ft0,128(sp)
800061f2:	6854                	flw	fa3,20(s0)
800061f4:	7369                	lui	t1,0xffffa
800061f6:	7020                	flw	fs0,96(s0)
800061f8:	6f72                	flw	ft10,28(sp)
800061fa:	73736563          	bltu	t1,s7,80006924 <__sbss_end+0x544>
800061fe:	6920726f          	jal	tp,8000d890 <__global_pointer$+0x6e20>
80006202:	20612073          	csrs	0x206,sp
80006206:	76616c53          	0x76616c53
8000620a:	3a65                	jal	80005bc2 <main+0xf6>
8000620c:	0a20                	addi	s0,sp,280
8000620e:	0000                	unimp
80006210:	4155                	li	sp,21
80006212:	7472                	flw	fs0,60(sp)
80006214:	0031                	c.nop	12
80006216:	0000                	unimp
80006218:	4155                	li	sp,21
8000621a:	7472                	flw	fs0,60(sp)
8000621c:	0032                	c.slli	zero,0xc
8000621e:	0000                	unimp
80006220:	6154                	flw	fa3,4(a0)
80006222:	2d206b73          	csrrsi	s6,0x2d2,0
80006226:	3120                	fld	fs0,96(a0)
80006228:	0a0d                	addi	s4,s4,3
8000622a:	0000                	unimp
8000622c:	6154                	flw	fa3,4(a0)
8000622e:	2d206b73          	csrrsi	s6,0x2d2,0
80006232:	3220                	fld	fs0,96(a2)
80006234:	0a0d                	addi	s4,s4,3
80006236:	0000                	unimp
80006238:	626f6c47          	fmsub.d	fs8,ft10,ft6,fa2,unknown
8000623c:	6c61                	lui	s8,0x18
8000623e:	614d                	addi	sp,sp,176
80006240:	72657473          	csrrci	s0,0x726,10
80006244:	6341                	lui	t1,0x10
80006246:	6974                	flw	fa3,84(a0)
80006248:	6576                	flw	fa0,92(sp)
8000624a:	0000                	unimp
8000624c:	626f6c47          	fmsub.d	fs8,ft10,ft6,fa2,unknown
80006250:	6c61                	lui	s8,0x18
80006252:	614d                	addi	sp,sp,176
80006254:	72657473          	csrrci	s0,0x726,10
80006258:	6f52                	flw	ft10,20(sp)
8000625a:	7475                	lui	s0,0xffffd
8000625c:	6e69                	lui	t3,0x1a
8000625e:	2e65                	jal	80006616 <__sbss_end+0x236>
80006260:	2e2e                	fld	ft8,200(sp)
80006262:	0a0d                	addi	s4,s4,3
	...
