
miv-rv32im-freertos-port-test.elf:     file format elf32-littleriscv
miv-rv32im-freertos-port-test.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000000

Program Header:
    LOAD off    0x00001000 vaddr 0x80000000 paddr 0x80000000 align 2**12
         filesz 0x00008eb0 memsz 0x00046770 flags rwx

Sections:
Idx Name           Size      VMA       LMA       File off  Algn  Flags
  0 .text          00008db0  80000000  80000000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sdata         00000020  80008db0  80008db0  00009db0  2**4  CONTENTS, ALLOC, LOAD, DATA
  2 .data          000000e0  80008dd0  80008dd0  00009dd0  2**4  CONTENTS, ALLOC, LOAD, DATA
  3 .sbss          000000a0  80008eb0  80008eb0  00009eb0  2**4  ALLOC
  4 .bss           0001d820  80008f50  80008f50  00009eb0  2**4  ALLOC
  5 .heap          00010000  80026770  80026770  00009eb0  2**4  ALLOC
  6 .stack         00010000  80036770  80036770  00009eb0  2**4  ALLOC
  7 .debug_line    0000c463  00000000  00000000  00009eb0  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_info    00010e2e  00000000  00000000  00016313  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev  00002eea  00000000  00000000  00027141  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000009b0  00000000  00000000  0002a030  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_str     00013454  00000000  00000000  0002a9e0  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges  00000878  00000000  00000000  0003de34  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro   00005c61  00000000  00000000  0003e6ac  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment       00000039  00000000  00000000  0004430d  2**0  CONTENTS, READONLY
 15 .debug_frame   000023b8  00000000  00000000  00044348  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
80000000 l    d  .text	00000000 .text
80008db0 l    d  .sdata	00000000 .sdata
80008dd0 l    d  .data	00000000 .data
80008eb0 l    d  .sbss	00000000 .sbss
80008f50 l    d  .bss	00000000 .bss
80026770 l    d  .heap	00000000 .heap
80036770 l    d  .stack	00000000 .stack
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./riscv_hal/entry.o
8000000c l       .text	00000000 handle_reset
80000004 l       .text	00000000 nmi_vector
80000008 l       .text	00000000 trap_vector
80000030 l       .text	00000000 trap_entry
00000000 l    df *ABS*	00000000 init.c
80000180 l     F .text	00000050 zero_section
00000000 l    df *ABS*	00000000 riscv_hal.c
80000258 l     F .text	000000b8 PLIC_DisableIRQ
80000310 l     F .text	00000044 PLIC_ClaimIRQ
80000354 l     F .text	0000004c PLIC_CompleteIRQ
80008eb0 l     O .sbss	00000008 g_systick_increment
00000000 l    df *ABS*	00000000 riscv_hal_stubs.c
00000000 l    df *ABS*	00000000 syscall.c
80008eb8 l     O .sbss	00000008 g_stdio_uart
80008ec0 l     O .sbss	00000004 g_stdio_uart_init_done
80000e7c l     F .text	00000030 stub
00000000 l    df *ABS*	00000000 core_uart_apb.c
00000000 l    df *ABS*	00000000 heap_2.c
80008f50 l     O .bss	00019000 ucHeap
80008ec4 l     O .sbss	00000008 xStart
80008ecc l     O .sbss	00000008 xEnd
80008db0 l     O .sdata	00000004 xFreeBytesRemaining
80008ed4 l     O .sbss	00000004 xHeapHasBeenInitialised.2777
80001590 l     F .text	00000074 prvHeapInit
00000000 l    df *ABS*	00000000 port.c
80001604 l     F .text	0000004c raise_soft_interrupt
80008db4 l     O .sdata	00000004 uxCriticalNesting
80008db8 l     O .sdata	00000004 mtime
80008dbc l     O .sdata	00000004 mtimecmp
800016c4 l     F .text	000000cc prvSetNextTimerInterrupt
8000185c l     F .text	0000002c prvTaskExitError
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 tasks.c
80021f50 l     O .bss	00000064 pxReadyTasksLists
80021fb4 l     O .bss	00000014 xDelayedTaskList1
80021fc8 l     O .bss	00000014 xDelayedTaskList2
80008ee0 l     O .sbss	00000004 pxDelayedTaskList
80008ee4 l     O .sbss	00000004 pxOverflowDelayedTaskList
80021fdc l     O .bss	00000014 xPendingReadyList
80021ff0 l     O .bss	00000014 xTasksWaitingTermination
80008ee8 l     O .sbss	00000004 uxTasksDeleted
80022004 l     O .bss	00000014 xSuspendedTaskList
80008eec l     O .sbss	00000004 uxCurrentNumberOfTasks
80008ef0 l     O .sbss	00000004 xTickCount
80008ef4 l     O .sbss	00000004 uxTopReadyPriority
80008ef8 l     O .sbss	00000004 xSchedulerRunning
80008efc l     O .sbss	00000004 uxPendedTicks
80008f00 l     O .sbss	00000004 xYieldPending
80008f04 l     O .sbss	00000004 xNumOfOverflows
80008f08 l     O .sbss	00000004 uxTaskNumber
80008f0c l     O .sbss	00000004 xNextTaskUnblockTime
80008f10 l     O .sbss	00000004 uxSchedulerSuspended
80002d18 l     F .text	000000c0 prvAllocateTCBAndStack
800029f8 l     F .text	00000138 prvInitialiseTCBVariables
80002b30 l     F .text	000000c0 prvInitialiseTaskLists
80002e18 l     F .text	00000060 prvResetNextTaskUnblockTime
80002c90 l     F .text	00000088 prvAddCurrentTaskToDelayedList
800022e8 l     F .text	0000009c prvTaskIsTaskSuspended
800029c4 l     F .text	00000034 prvIdleTask
80002bf0 l     F .text	000000a0 prvCheckTasksWaitingTermination
80002dd8 l     F .text	00000040 prvDeleteTCB
00000000 l    df *ABS*	00000000 globalMaster.c
00000000 l    df *ABS*	00000000 applications.c
00000000 l    df *ABS*	00000000 packet.c
00000000 l    df *ABS*	00000000 dvfs.c
00000000 l    df *ABS*	00000000 thermal.c
00000000 l    df *ABS*	00000000 chronos.c
80005e48 l     F .text	000000b4 PLIC_EnableIRQ
80005efc l     F .text	0000003c PLIC_SetPriority
00000000 l    df *ABS*	00000000 main.c
80007f10 l     F .text	000000d0 PLIC_init
80008134 l     F .text	000000b4 GlobalManagerTask
00000000 l    df *ABS*	00000000 syswrite.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 impure.c
80008e50 l     O .data	00000060 impure_data
80008f18 g     O .sbss	00000004 eastFlits_last
800018b0 g     F .text	0000002c vPortSetInterruptMask
80008f20 g     O .sbss	00000004 westFlits_last
80008774 g     O .text	0000000c readEnergyMemory
80001684 g     F .text	00000040 vPortExitCritical
00010000 g       *ABS*	00000000 STACK_SIZE
80026760 g     O .bss	00000004 memFlits
80022018 g     O .bss	00000004 SendingSlot
80000a54  w    F .text	00000020 External_11_IRQHandler
800095b0 g       .sdata	00000000 __global_pointer$
800060d8 g     F .text	00000048 printsv
80008f34 g     O .sbss	00000004 southPackets_last
80008dd0 g       *ABS*	00000000 __data_load
80001970 g     F .text	000000e4 SysTick_Handler
80000994  w    F .text	00000020 External_5_IRQHandler
80004f38 g     F .text	0000010c API_PipeInitialization
80003308 g     F .text	00000128 API_TilesReset
8000105c g       .text	00000000 HW_get_8bit_reg_field
80002ea0 g     F .text	0000003c vTaskEnterCritical
800062d4 g     F .text	00000080 reverse
80008798 g     O .text	0000000c loadStoreDyn
800074f8 g     F .text	00000070 API_AddPendingReq
80022608 g     O .bss	00000024 priorityMatrix
80005410 g     F .text	00000110 API_checkPipe
80008edc g     O .sbss	00000004 pxCurrentTCB
80008eb0 g       .sbss	00000000 __sbss_start
80005f38 g     F .text	000000f4 Chronos_init
80005548 g     F .text	0000002c API_setFreqScale
80022604 g     O .bss	00000004 errno
8002201c g     O .bss	000000f0 ServicePipe
80000f94 g       .text	00000000 HW_set_32bit_reg
8000878c g     O .text	0000000c arithDyn
8002210c g     O .bss	00000004 AliveHandler
80000b74  w    F .text	00000020 External_20_IRQHandler
80001a54 g     F .text	00000044 xPortStartScheduler
800003a0 g     F .text	00000024 __enable_irq
80001f6c g     F .text	0000021c xTaskGenericCreate
80005244 g     F .text	000000b4 API_GetServiceSlot
80008db0 g       .sdata	00000000 __sdata_start
800014c4 g     F .text	000000cc vPortFree
80022110 g     O .bss	00000004 messageID
80006534 g     F .text	000000c4 API_PushSendQueue
80026764 g     O .bss	00000008 g_uart
80001034 g       .text	00000000 HW_set_8bit_reg_field
80000c34  w    F .text	00000020 External_26_IRQHandler
800007a4 g     F .text	00000170 handle_trap
80003224 g     F .text	00000084 API_GetApplicationFreeSlot
80001c40 g     F .text	00000088 vListInsertEnd
800057b8 g     F .text	000000a4 getNumberOfPorts
00080000 g       *ABS*	00000000 RAM_SIZE
80000a34  w    F .text	00000020 External_10_IRQHandler
8002262c g     O .bss	00000780 applications
80022114 g     O .bss	00000240 ServiceMessage
80008f40 g     O .sbss	00000004 API_SystemFinish
8000609c g     F .text	0000003c printi
80002384 g     F .text	00000118 xTaskResumeFromISR
80008f1c g     O .sbss	00000004 eastPackets_last
80001c18 g     F .text	00000028 vListInitialiseItem
80007568 g     F .text	000009a8 API_NI_Handler
80001888 g     F .text	00000028 vPortClearInterruptMask
80000cb4  w    F .text	00000020 External_30_IRQHandler
80008f24 g     O .sbss	00000004 westPackets_last
80000b14  w    F .text	00000020 External_17_IRQHandler
80036770 g       .heap	00000000 _heap_end
80000e2c g     F .text	00000050 _isatty
80026770 g       .bss	00000000 __bss_end
80000510 g     F .text	00000294 handle_syscall
80003040 g     F .text	000001e4 API_AddApplication
800012e8 g     F .text	000001dc pvPortMalloc
80005044 g     F .text	00000200 API_GetMessageSlot
800037b0 g     F .text	000003d0 API_DealocateTask
800001d0 g     F .text	0000006c _init
80001bb4 g     F .text	00000064 vListInitialise
80001024 g       .text	00000000 HW_set_8bit_reg
8000102c g       .text	00000000 HW_get_8bit_reg
800026b4 g     F .text	00000038 xTaskGetTickCount
80022dac g     O .bss	00000004 temperatureUpdated
800034d8 g     F .text	000002d8 API_AllocateTasks
80004654 g     F .text	000000a8 API_TaskListInit
80004830 g     F .text	000002a4 API_TaskAllocation
80008f2c g     O .sbss	00000004 northPackets_last
80003e10 g     F .text	00000140 API_ClearTaskSlotFromTile
800047b0 g     F .text	00000080 API_GetFreeTaskSlot
80005764 g     F .text	00000054 resetExecutedInstructions
80008f50 g       .sbss	00000000 __sbss_end
80004bac g     F .text	000000d8 API_TaskStart
80000fa4 g       .text	00000000 HW_set_32bit_reg_field
800081e8 g     F .text	0000001c write
800041e8 g     F .text	00000068 API_TaskAllocated
80008104 g     F .text	00000014 vApplicationMallocFailedHook
80000c14  w    F .text	00000020 External_25_IRQHandler
8000585c g     F .text	0000026c estimateNoCActivity
80046770 g       .stack	00000000 __stack_top
80000c94  w    F .text	00000020 External_29_IRQHandler
80008f28 g     O .sbss	00000004 northFlits_last
80022354 g     O .bss	00000034 incommingPacket
80002188 g     F .text	000000dc vTaskDelete
80001238 g     F .text	000000b0 UART_polled_tx_string
8002675c g     O .bss	00000004 selectedFrequencyScale
80000cf4 g     F .text	000000e8 write_hex
80000a94  w    F .text	00000020 External_13_IRQHandler
8000625c g     F .text	0000002c External_2_IRQHandler
00010000 g       *ABS*	00000000 HEAP_SIZE
80000a74  w    F .text	00000020 External_12_IRQHandler
80008f14 g     O .sbss	00000004 thermalPacket_pending
800064f4 g     F .text	00000040 makeAddress
80001184 g     F .text	000000b4 UART_send
800061d4 g     F .text	0000004c SendRaw
80000000 g       .text	00000000 _start
80005520 g     F .text	00000028 API_setFreqIdle
8000252c g     F .text	00000028 vTaskSuspendAll
800066dc g     F .text	000000a0 API_PopSendQueue
80004494 g     F .text	000001c0 API_StartTasks
800003c4 g     F .text	000000a8 handle_m_timer_interrupt
8000602c g     F .text	00000070 prints
80001d9c g     F .text	00000098 uxListRemove
80004250 g     F .text	00000244 API_ApplicationStart
80006220 g     F .text	0000003c NI_enable_irq
80008db0 g       *ABS*	00000000 __sdata_load
80008eb0 g       .data	00000000 __data_end
800028d8 g     F .text	000000ec vTaskSwitchContext
80000b34  w    F .text	00000020 External_18_IRQHandler
80000fcc g       .text	00000000 HW_get_32bit_reg_field
80008744 g     O .text	0000000c powerAvgBufferIdle
80006354 g     F .text	000001a0 myItoa
80000bb4  w    F .text	00000020 External_22_IRQHandler
80000ad4  w    F .text	00000020 External_15_IRQHandler
80001b8c g     F .text	00000028 vPortYield
800046fc g     F .text	000000b4 API_GetCurrentTaskSlot
80000000 g       *ABS*	00000000 RAM_START_ADDRESS
80008f50 g       .bss	00000000 __bss_start
80022e44 g     O .bss	00003918 TaskList
80000af4  w    F .text	00000020 External_16_IRQHandler
80001e34 g     F .text	000000e8 memset
80007fe0 g     F .text	00000124 main
80006288 g     F .text	0000004c mySwap
800055a8 g     F .text	00000054 API_applyFreqScale
80001cc8 g     F .text	000000d4 vListInsert
80000c74  w    F .text	00000020 External_28_IRQHandler
800072d4 g     F .text	00000224 API_CheckMessagePipe
800065f8 g     F .text	000000e4 API_PrioritySend
800032a8 g     F .text	00000060 API_ApplicationsReset
80002e78 g     F .text	00000028 xTaskGetCurrentTaskHandle
80000fe4 g       .text	00000000 HW_get_16bit_reg
80008dd0 g       .sdata	00000000 __sdata_end
80004c84 g     F .text	000002b4 API_FinishRunningTask
80008768 g     O .text	0000000c powerSwitchControlActive
80036770 g       .heap	00000000 __heap_end
80000ab4  w    F .text	00000020 External_14_IRQHandler
80003cb4 g     F .text	0000015c API_GetTaskSlotFromTile
80003b80 g     F .text	00000134 getNextPriorityAddr
80008f30 g     O .sbss	00000004 southFlits_last
8000403c g     F .text	000001ac API_RepositoryAllocation
8000023c g     F .text	0000001c _fini
80002554 g     F .text	00000160 xTaskResumeAll
8000249c g     F .text	00000090 vTaskStartScheduler
80006ac8 g     F .text	000003ec API_SendMessage
80008dd0 g     O .data	00000080 ext_irq_handler_table
80022388 g     O .bss	00000020 SendingQueue
80008204 g     F .text	00000054 _write_r
80000fec g       .text	00000000 HW_set_16bit_reg_field
80006964 g     F .text	00000164 API_AckTaskAllocation
800223a8 g     O .bss	00000004 SendingQueue_tail
80008dc0 g     O .sdata	00000004 _impure_ptr
80036770 g       .stack	00000000 __stack_bottom
80001a98 g     F .text	000000f4 Software_IRQHandler
800055fc g     F .text	00000168 API_freqStepUp
800052f8 g     F .text	00000118 API_ClearPipeSlot
80000c54  w    F .text	00000020 External_27_IRQHandler
800223ac g     O .bss	00000240 ThermalPacket
800009f4  w    F .text	00000020 External_8_IRQHandler
80000a14  w    F .text	00000020 External_9_IRQHandler
80026770 g       .heap	00000000 __heap_start
80000914  w    F .text	00000020 Invalid_IRQHandler
80008750 g     O .text	0000000c powerSwitchControlIdle
8000677c g     F .text	000001e8 API_Try2Send
80000954  w    F .text	00000020 External_3_IRQHandler
800026ec g     F .text	000001ec xTaskIncrementTick
80008780 g     O .text	0000000c writeEnergyMemory
80004ad4 g     F .text	000000d8 API_GetTaskSlot
80008ed8 g     O .sbss	00000004 g_startscheduler
800061ac g     F .text	00000028 getYpos
80000b54  w    F .text	00000020 External_19_IRQHandler
80000eac g     F .text	000000e8 _write
80006180 g     F .text	0000002c getXpos
80026770 g       .bss	00000000 _end
80001790 g     F .text	000000cc vPortSetupTimer
80022db0 g     O .bss	00000024 SystemTemperature
80005574 g     F .text	00000034 API_getFreqScale
800225ec g     O .bss	00000014 str
80022600 g     O .bss	00000004 SendingQueue_front
80002f2c g     F .text	00000114 API_RepositoryWakeUp
80006120 g     F .text	00000060 printsvsv
80002264 g     F .text	00000084 vTaskDelay
8000106c g     F .text	00000118 UART_init
80000f9c g       .text	00000000 HW_get_32bit_reg
8000875c g     O .text	0000000c powerAvgBufferActive
80000ddc g     F .text	00000050 _exit
80000fdc g       .text	00000000 HW_set_16bit_reg
80007044 g     F .text	00000290 API_SendMessageReq
80002edc g     F .text	00000050 vTaskExitCritical
80001f1c g     F .text	00000050 strlen
800018dc g     F .text	00000094 pxPortInitialiseStack
80000934  w    F .text	00000020 External_1_IRQHandler
80006eb4 g     F .text	00000190 API_SendFinishTask
800009b4  w    F .text	00000020 External_6_IRQHandler
80000cd4  w    F .text	00000020 External_31_IRQHandler
80003f50 g     F .text	000000ec API_GetSystemTasksSlots
80001650 g     F .text	00000034 vPortEnterCritical
80008dd0 g       .data	00000000 __data_start
80005ac8 g     F .text	00000380 powerEstimation
8002676c g     O .bss	00000004 ProcessorAddr
80008f3c g     O .sbss	00000004 localPackets_last
80022dd4 g     O .bss	00000004 priorityPointer
80000b94  w    F .text	00000020 External_21_IRQHandler
80022dd8 g     O .bss	0000006c Tiles
800004e0 g     F .text	00000030 handle_m_soft_interrupt
8000046c g     F .text	00000074 handle_m_ext_interrupt
80001014 g       .text	00000000 HW_get_16bit_reg_field
80000bd4  w    F .text	00000020 External_23_IRQHandler
80000bf4  w    F .text	00000020 External_24_IRQHandler
80008f38 g     O .sbss	00000004 localFlits_last
80000974  w    F .text	00000020 External_4_IRQHandler
80003430 g     F .text	000000a8 GeneratePatternMatrix
800009d4  w    F .text	00000020 External_7_IRQHandler
80008118 g     F .text	0000001c vApplicationIdleHook



Disassembly of section .text:

80000000 <_start>:
_start():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:30

  .section      .text.entry
  .globl _start

_start:
  j handle_reset
80000000:	00c0006f          	j	8000000c <handle_reset>

80000004 <nmi_vector>:
nmi_vector():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:33

nmi_vector:
  j nmi_vector
80000004:	0000006f          	j	80000004 <nmi_vector>

80000008 <trap_vector>:
trap_vector():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:36

trap_vector:
  j trap_entry
80000008:	0280006f          	j	80000030 <trap_entry>

8000000c <handle_reset>:
handle_reset():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:39

handle_reset:
  la t0, trap_entry
8000000c:	00000297          	auipc	t0,0x0
80000010:	02428293          	addi	t0,t0,36 # 80000030 <trap_entry>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:40
  csrw mtvec, t0
80000014:	30529073          	csrw	mtvec,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:41
  csrwi mstatus, 0
80000018:	30005073          	csrwi	mstatus,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:42
  csrwi mie, 0
8000001c:	30405073          	csrwi	mie,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:60
  lui t0, 0x0
  fscsr t0
#endif

  # initialize global pointer
  la gp, __global_pointer$
80000020:	00018193          	mv	gp,gp
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:63

  # initialize stack pointer
  la sp, __stack_top
80000024:	00046117          	auipc	sp,0x46
80000028:	74c10113          	addi	sp,sp,1868 # 80046770 <__stack_top>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:66

  # perform the rest of initialization in C
  j _init
8000002c:	1a40006f          	j	800001d0 <_init>

80000030 <trap_entry>:
trap_entry():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:70


trap_entry:
  addi sp, sp, -33*REGBYTES
80000030:	f7c10113          	addi	sp,sp,-132
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:72

  SREG x1, 0 * REGBYTES(sp)
80000034:	00112023          	sw	ra,0(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:73
  SREG x2, 1 * REGBYTES(sp)
80000038:	00212223          	sw	sp,4(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:74
  SREG x3, 2 * REGBYTES(sp)
8000003c:	00312423          	sw	gp,8(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:75
  SREG x4, 3 * REGBYTES(sp)
80000040:	00412623          	sw	tp,12(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:76
  SREG x5, 4 * REGBYTES(sp)
80000044:	00512823          	sw	t0,16(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:77
  SREG x6, 5 * REGBYTES(sp)
80000048:	00612a23          	sw	t1,20(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:78
  SREG x7, 6 * REGBYTES(sp)
8000004c:	00712c23          	sw	t2,24(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:79
  SREG x8, 7 * REGBYTES(sp)
80000050:	00812e23          	sw	s0,28(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:80
  SREG x9, 8 * REGBYTES(sp)
80000054:	02912023          	sw	s1,32(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:81
  SREG x10, 9 * REGBYTES(sp)
80000058:	02a12223          	sw	a0,36(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:82
  SREG x11, 10 * REGBYTES(sp)
8000005c:	02b12423          	sw	a1,40(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:83
  SREG x12, 11 * REGBYTES(sp)
80000060:	02c12623          	sw	a2,44(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:84
  SREG x13, 12 * REGBYTES(sp)
80000064:	02d12823          	sw	a3,48(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:85
  SREG x14, 13 * REGBYTES(sp)
80000068:	02e12a23          	sw	a4,52(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:86
  SREG x15, 14 * REGBYTES(sp)
8000006c:	02f12c23          	sw	a5,56(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:87
  SREG x16, 15 * REGBYTES(sp)
80000070:	03012e23          	sw	a6,60(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:88
  SREG x17, 16 * REGBYTES(sp)
80000074:	05112023          	sw	a7,64(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:89
  SREG x18, 17 * REGBYTES(sp)
80000078:	05212223          	sw	s2,68(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:90
  SREG x19, 18 * REGBYTES(sp)
8000007c:	05312423          	sw	s3,72(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:91
  SREG x20, 19 * REGBYTES(sp)
80000080:	05412623          	sw	s4,76(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:92
  SREG x21, 20 * REGBYTES(sp)
80000084:	05512823          	sw	s5,80(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:93
  SREG x22, 21 * REGBYTES(sp)
80000088:	05612a23          	sw	s6,84(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:94
  SREG x23, 22 * REGBYTES(sp)
8000008c:	05712c23          	sw	s7,88(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:95
  SREG x24, 23 * REGBYTES(sp)
80000090:	05812e23          	sw	s8,92(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:96
  SREG x25, 24 * REGBYTES(sp)
80000094:	07912023          	sw	s9,96(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:97
  SREG x26, 25 * REGBYTES(sp)
80000098:	07a12223          	sw	s10,100(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:98
  SREG x27, 26 * REGBYTES(sp)
8000009c:	07b12423          	sw	s11,104(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:99
  SREG x28, 27 * REGBYTES(sp)
800000a0:	07c12623          	sw	t3,108(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:100
  SREG x29, 28 * REGBYTES(sp)
800000a4:	07d12823          	sw	t4,112(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:101
  SREG x30, 29 * REGBYTES(sp)
800000a8:	07e12a23          	sw	t5,116(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:102
  SREG x31, 30 * REGBYTES(sp)
800000ac:	07f12c23          	sw	t6,120(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:105

  # Stores the return addr in the stack
  csrr t0, mepc
800000b0:	341022f3          	csrr	t0,mepc
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:106
  SREG t0, 31 * REGBYTES(sp)
800000b4:	06512e23          	sw	t0,124(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:109

  # store the MIE value in the stack
  li t0, MSTATUS_MIE
800000b8:	00800293          	li	t0,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:110
  csrrc t0, mstatus, t0 
800000bc:	3002b2f3          	csrrc	t0,mstatus,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:111
  SREG t0, 32 * REGBYTES(sp) 
800000c0:	08512023          	sw	t0,128(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:113

  csrr a0, mcause
800000c4:	34202573          	csrr	a0,mcause
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:114
  csrr a1, mepc
800000c8:	341025f3          	csrr	a1,mepc
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:115
  mv a2, sp
800000cc:	00010613          	mv	a2,sp
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:116
  call handle_trap
800000d0:	6d4000ef          	jal	ra,800007a4 <handle_trap>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:117
  csrw mepc, a0
800000d4:	34151073          	csrw	mepc,a0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:120

  # Remain in M-mode after mret
  li t0, MSTATUS_MPP
800000d8:	000022b7          	lui	t0,0x2
800000dc:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:121
  csrs mstatus, t0
800000e0:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:126
  #li t0, MSTATUS_MPIE
  #csrs mstatus, t0

  # Restore the interruption status after MRET
  LREG x5, 32 * REGBYTES(sp)  # load the old MIE value to t0
800000e4:	08012283          	lw	t0,128(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:127
  slli t0, t0, 4              # shifts it to the MPIE position
800000e8:	00429293          	slli	t0,t0,0x4
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:128
  csrs mstatus, t0            # restore the MIE value into the MPIE
800000ec:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:130
  
  LREG x1, 0 * REGBYTES(sp)
800000f0:	00012083          	lw	ra,0(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:131
  LREG x2, 1 * REGBYTES(sp)
800000f4:	00412103          	lw	sp,4(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:132
  LREG x3, 2 * REGBYTES(sp)
800000f8:	00812183          	lw	gp,8(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:133
  LREG x4, 3 * REGBYTES(sp)
800000fc:	00c12203          	lw	tp,12(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:134
  LREG x5, 4 * REGBYTES(sp)
80000100:	01012283          	lw	t0,16(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:135
  LREG x6, 5 * REGBYTES(sp)
80000104:	01412303          	lw	t1,20(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:136
  LREG x7, 6 * REGBYTES(sp)
80000108:	01812383          	lw	t2,24(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:137
  LREG x8, 7 * REGBYTES(sp)
8000010c:	01c12403          	lw	s0,28(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:138
  LREG x9, 8 * REGBYTES(sp)
80000110:	02012483          	lw	s1,32(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:139
  LREG x10, 9 * REGBYTES(sp)
80000114:	02412503          	lw	a0,36(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:140
  LREG x11, 10 * REGBYTES(sp)
80000118:	02812583          	lw	a1,40(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:141
  LREG x12, 11 * REGBYTES(sp)
8000011c:	02c12603          	lw	a2,44(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:142
  LREG x13, 12 * REGBYTES(sp)
80000120:	03012683          	lw	a3,48(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:143
  LREG x14, 13 * REGBYTES(sp)
80000124:	03412703          	lw	a4,52(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:144
  LREG x15, 14 * REGBYTES(sp)
80000128:	03812783          	lw	a5,56(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:145
  LREG x16, 15 * REGBYTES(sp)
8000012c:	03c12803          	lw	a6,60(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:146
  LREG x17, 16 * REGBYTES(sp)
80000130:	04012883          	lw	a7,64(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:147
  LREG x18, 17 * REGBYTES(sp)
80000134:	04412903          	lw	s2,68(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:148
  LREG x19, 18 * REGBYTES(sp)
80000138:	04812983          	lw	s3,72(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:149
  LREG x20, 19 * REGBYTES(sp)
8000013c:	04c12a03          	lw	s4,76(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:150
  LREG x21, 20 * REGBYTES(sp)
80000140:	05012a83          	lw	s5,80(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:151
  LREG x22, 21 * REGBYTES(sp)
80000144:	05412b03          	lw	s6,84(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:152
  LREG x23, 22 * REGBYTES(sp)
80000148:	05812b83          	lw	s7,88(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:153
  LREG x24, 23 * REGBYTES(sp)
8000014c:	05c12c03          	lw	s8,92(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:154
  LREG x25, 24 * REGBYTES(sp)
80000150:	06012c83          	lw	s9,96(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:155
  LREG x26, 25 * REGBYTES(sp)
80000154:	06412d03          	lw	s10,100(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:156
  LREG x27, 26 * REGBYTES(sp)
80000158:	06812d83          	lw	s11,104(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:157
  LREG x28, 27 * REGBYTES(sp)
8000015c:	06c12e03          	lw	t3,108(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:158
  LREG x29, 28 * REGBYTES(sp)
80000160:	07012e83          	lw	t4,112(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:159
  LREG x30, 29 * REGBYTES(sp)
80000164:	07412f03          	lw	t5,116(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:160
  LREG x31, 30 * REGBYTES(sp)
80000168:	07812f83          	lw	t6,120(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:162

  addi sp, sp, 33*REGBYTES
8000016c:	08410113          	addi	sp,sp,132
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:163
  mret
80000170:	30200073          	mret
	...

80000180 <zero_section>:
zero_section():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:47
        ++p_vma;
    }
}

static void zero_section(uint32_t * start, uint32_t * end)
{
80000180:	fd010113          	addi	sp,sp,-48
80000184:	02812623          	sw	s0,44(sp)
80000188:	03010413          	addi	s0,sp,48
8000018c:	fca42e23          	sw	a0,-36(s0)
80000190:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:48
    uint32_t * p_zero = start;
80000194:	fdc42783          	lw	a5,-36(s0)
80000198:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:50
    
    while(p_zero <= end)
8000019c:	0180006f          	j	800001b4 <zero_section+0x34>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:52
    {
        *p_zero = 0;
800001a0:	fec42783          	lw	a5,-20(s0)
800001a4:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:53
        ++p_zero;
800001a8:	fec42783          	lw	a5,-20(s0)
800001ac:	00478793          	addi	a5,a5,4
800001b0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:50
    while(p_zero <= end)
800001b4:	fec42703          	lw	a4,-20(s0)
800001b8:	fd842783          	lw	a5,-40(s0)
800001bc:	fee7f2e3          	bleu	a4,a5,800001a0 <zero_section+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:55
    }
}
800001c0:	00000013          	nop
800001c4:	02c12403          	lw	s0,44(sp)
800001c8:	03010113          	addi	sp,sp,48
800001cc:	00008067          	ret

800001d0 <_init>:
_init():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:58

void _init(void)
{
800001d0:	fe010113          	addi	sp,sp,-32
800001d4:	00112e23          	sw	ra,28(sp)
800001d8:	00812c23          	sw	s0,24(sp)
800001dc:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:60
    extern int main(int, char**);
    const char *argv0 = "hello";
800001e0:	800087b7          	lui	a5,0x80008
800001e4:	26078793          	addi	a5,a5,608 # 80008260 <__stack_top+0xfffc1af0>
800001e8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:61
    char *argv[] = {(char *)argv0, NULL, NULL};
800001ec:	fec42783          	lw	a5,-20(s0)
800001f0:	fef42023          	sw	a5,-32(s0)
800001f4:	fe042223          	sw	zero,-28(s0)
800001f8:	fe042423          	sw	zero,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:66

// Imperas - this is loaded directly by simulator so must not be copied
//    copy_section(&__sdata_load, &__sdata_start, &__sdata_end);
//    copy_section(&__data_load, &__data_start, &__data_end);
    zero_section(&__sbss_start, &__sbss_end);
800001fc:	9a018593          	addi	a1,gp,-1632 # 80008f50 <__sbss_end>
80000200:	90018513          	addi	a0,gp,-1792 # 80008eb0 <__data_end>
80000204:	f7dff0ef          	jal	ra,80000180 <zero_section>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:67
    zero_section(&__bss_start, &__bss_end);
80000208:	800267b7          	lui	a5,0x80026
8000020c:	77078593          	addi	a1,a5,1904 # 80026770 <__stack_top+0xfffe0000>
80000210:	9a018513          	addi	a0,gp,-1632 # 80008f50 <__sbss_end>
80000214:	f6dff0ef          	jal	ra,80000180 <zero_section>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:69
    
    main(1, argv);
80000218:	fe040793          	addi	a5,s0,-32
8000021c:	00078593          	mv	a1,a5
80000220:	00100513          	li	a0,1
80000224:	5bd070ef          	jal	ra,80007fe0 <main>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:70
}
80000228:	00000013          	nop
8000022c:	01c12083          	lw	ra,28(sp)
80000230:	01812403          	lw	s0,24(sp)
80000234:	02010113          	addi	sp,sp,32
80000238:	00008067          	ret

8000023c <_fini>:
_fini():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:75

/* Function called after main() finishes */
void
_fini()
{
8000023c:	ff010113          	addi	sp,sp,-16
80000240:	00812623          	sw	s0,12(sp)
80000244:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:76
}
80000248:	00000013          	nop
8000024c:	00c12403          	lw	s0,12(sp)
80000250:	01010113          	addi	sp,sp,16
80000254:	00008067          	ret

80000258 <PLIC_DisableIRQ>:
PLIC_DisableIRQ():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:174
 * 	If you wish to disable the external interrupt while the interrupt handler
 * 	for that external interrupt is executing then you must use the return value
 * 	EXT_IRQ_DISABLE to return from the extern interrupt handler.
 */
static inline void PLIC_DisableIRQ(IRQn_Type IRQn)
{
80000258:	fd010113          	addi	sp,sp,-48
8000025c:	02812623          	sw	s0,44(sp)
80000260:	03010413          	addi	s0,sp,48
80000264:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:175
    unsigned long hart_id = read_csr(mhartid);
80000268:	f14027f3          	csrr	a5,mhartid
8000026c:	fef42623          	sw	a5,-20(s0)
80000270:	fec42783          	lw	a5,-20(s0)
80000274:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:176
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80000278:	40000737          	lui	a4,0x40000
8000027c:	fdc42783          	lw	a5,-36(s0)
80000280:	0057d793          	srli	a5,a5,0x5
80000284:	fe842683          	lw	a3,-24(s0)
80000288:	00569693          	slli	a3,a3,0x5
8000028c:	00f686b3          	add	a3,a3,a5
80000290:	000017b7          	lui	a5,0x1
80000294:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80000298:	00f687b3          	add	a5,a3,a5
8000029c:	00279793          	slli	a5,a5,0x2
800002a0:	00f707b3          	add	a5,a4,a5
800002a4:	0007a783          	lw	a5,0(a5)
800002a8:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:178

    current &= ~((uint32_t)1 << (IRQn % 32));
800002ac:	fdc42783          	lw	a5,-36(s0)
800002b0:	01f7f793          	andi	a5,a5,31
800002b4:	00100713          	li	a4,1
800002b8:	00f717b3          	sll	a5,a4,a5
800002bc:	fff7c793          	not	a5,a5
800002c0:	fe442703          	lw	a4,-28(s0)
800002c4:	00f777b3          	and	a5,a4,a5
800002c8:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:180

    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
800002cc:	40000737          	lui	a4,0x40000
800002d0:	fdc42783          	lw	a5,-36(s0)
800002d4:	0057d793          	srli	a5,a5,0x5
800002d8:	fe842683          	lw	a3,-24(s0)
800002dc:	00569693          	slli	a3,a3,0x5
800002e0:	00f686b3          	add	a3,a3,a5
800002e4:	000017b7          	lui	a5,0x1
800002e8:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
800002ec:	00f687b3          	add	a5,a3,a5
800002f0:	00279793          	slli	a5,a5,0x2
800002f4:	00f707b3          	add	a5,a4,a5
800002f8:	fe442703          	lw	a4,-28(s0)
800002fc:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:181
}
80000300:	00000013          	nop
80000304:	02c12403          	lw	s0,44(sp)
80000308:	03010113          	addi	sp,sp,48
8000030c:	00008067          	ret

80000310 <PLIC_ClaimIRQ>:
PLIC_ClaimIRQ():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:205

/*==============================================================================
 * The function PLIC_ClaimIRQ() claims the interrupt from the PLIC controller.
 */
static inline uint32_t PLIC_ClaimIRQ(void)
{
80000310:	fe010113          	addi	sp,sp,-32
80000314:	00812e23          	sw	s0,28(sp)
80000318:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:206
    unsigned long hart_id = read_csr(mhartid);
8000031c:	f14027f3          	csrr	a5,mhartid
80000320:	fef42623          	sw	a5,-20(s0)
80000324:	fec42783          	lw	a5,-20(s0)
80000328:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:208

    return PLIC->TARGET[hart_id].CLAIM_COMPLETE;
8000032c:	40000737          	lui	a4,0x40000
80000330:	fe842783          	lw	a5,-24(s0)
80000334:	20078793          	addi	a5,a5,512
80000338:	00c79793          	slli	a5,a5,0xc
8000033c:	00f707b3          	add	a5,a4,a5
80000340:	0047a783          	lw	a5,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:209
}
80000344:	00078513          	mv	a0,a5
80000348:	01c12403          	lw	s0,28(sp)
8000034c:	02010113          	addi	sp,sp,32
80000350:	00008067          	ret

80000354 <PLIC_CompleteIRQ>:
PLIC_CompleteIRQ():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:216
/*==============================================================================
 * The function PLIC_CompleteIRQ() indicates to the PLIC controller the interrupt
 * is processed and claim is complete.
 */
static inline void PLIC_CompleteIRQ(uint32_t source)
{
80000354:	fd010113          	addi	sp,sp,-48
80000358:	02812623          	sw	s0,44(sp)
8000035c:	03010413          	addi	s0,sp,48
80000360:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:217
    unsigned long hart_id = read_csr(mhartid);
80000364:	f14027f3          	csrr	a5,mhartid
80000368:	fef42623          	sw	a5,-20(s0)
8000036c:	fec42783          	lw	a5,-20(s0)
80000370:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:219

    PLIC->TARGET[hart_id].CLAIM_COMPLETE = source;
80000374:	40000737          	lui	a4,0x40000
80000378:	fe842783          	lw	a5,-24(s0)
8000037c:	20078793          	addi	a5,a5,512
80000380:	00c79793          	slli	a5,a5,0xc
80000384:	00f707b3          	add	a5,a4,a5
80000388:	fdc42703          	lw	a4,-36(s0)
8000038c:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:220
}
80000390:	00000013          	nop
80000394:	02c12403          	lw	s0,44(sp)
80000398:	03010113          	addi	sp,sp,48
8000039c:	00008067          	ret

800003a0 <__enable_irq>:
__enable_irq():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:96

/*------------------------------------------------------------------------------
 * Enabler all interrupts.
 */
void __enable_irq(void)
{
800003a0:	fe010113          	addi	sp,sp,-32
800003a4:	00812e23          	sw	s0,28(sp)
800003a8:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:97
    set_csr(mstatus, MSTATUS_MIE);
800003ac:	300467f3          	csrrsi	a5,mstatus,8
800003b0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:98
}
800003b4:	00000013          	nop
800003b8:	01c12403          	lw	s0,28(sp)
800003bc:	02010113          	addi	sp,sp,32
800003c0:	00008067          	ret

800003c4 <handle_m_timer_interrupt>:
handle_m_timer_interrupt():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:128

/*------------------------------------------------------------------------------
 * RISC-V interrupt handler for machine timer interrupts.
 */
void handle_m_timer_interrupt()
{
800003c4:	fe010113          	addi	sp,sp,-32
800003c8:	00112e23          	sw	ra,28(sp)
800003cc:	00812c23          	sw	s0,24(sp)
800003d0:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:129
    clear_csr(mie, MIP_MTIP); //  MIP_MTIP (1 << 7)
800003d4:	08000793          	li	a5,128
800003d8:	3047b7f3          	csrrc	a5,mie,a5
800003dc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:131

    SysTick_Handler();
800003e0:	590010ef          	jal	ra,80001970 <SysTick_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:133

    PRCI->MTIMECMP[read_csr(mhartid)] = PRCI->MTIME + g_systick_increment;
800003e4:	44000737          	lui	a4,0x44000
800003e8:	0000c7b7          	lui	a5,0xc
800003ec:	00f707b3          	add	a5,a4,a5
800003f0:	ffc7a803          	lw	a6,-4(a5) # bffc <HEAP_SIZE-0x4004>
800003f4:	ff87a783          	lw	a5,-8(a5)
800003f8:	9001a583          	lw	a1,-1792(gp) # 80008eb0 <__data_end>
800003fc:	9041a603          	lw	a2,-1788(gp) # 80008eb4 <__data_end+0x4>
80000400:	44000537          	lui	a0,0x44000
80000404:	f1402773          	csrr	a4,mhartid
80000408:	fee42423          	sw	a4,-24(s0)
8000040c:	fe842883          	lw	a7,-24(s0)
80000410:	00b786b3          	add	a3,a5,a1
80000414:	00068313          	mv	t1,a3
80000418:	00f33333          	sltu	t1,t1,a5
8000041c:	00c80733          	add	a4,a6,a2
80000420:	00e307b3          	add	a5,t1,a4
80000424:	00078713          	mv	a4,a5
80000428:	00068793          	mv	a5,a3
8000042c:	00070813          	mv	a6,a4
80000430:	00001737          	lui	a4,0x1
80000434:	80070713          	addi	a4,a4,-2048 # 800 <HEAP_SIZE-0xf800>
80000438:	00e88733          	add	a4,a7,a4
8000043c:	00371713          	slli	a4,a4,0x3
80000440:	00e50733          	add	a4,a0,a4
80000444:	00f72023          	sw	a5,0(a4)
80000448:	01072223          	sw	a6,4(a4)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:135

    set_csr(mie, MIP_MTIP);
8000044c:	08000793          	li	a5,128
80000450:	3047a7f3          	csrrs	a5,mie,a5
80000454:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:136
    return;
80000458:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:137
}
8000045c:	01c12083          	lw	ra,28(sp)
80000460:	01812403          	lw	s0,24(sp)
80000464:	02010113          	addi	sp,sp,32
80000468:	00008067          	ret

8000046c <handle_m_ext_interrupt>:
handle_m_ext_interrupt():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:182

/*------------------------------------------------------------------------------
 * 
 */
void handle_m_ext_interrupt()
{
8000046c:	fe010113          	addi	sp,sp,-32
80000470:	00112e23          	sw	ra,28(sp)
80000474:	00812c23          	sw	s0,24(sp)
80000478:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:183
    uint32_t int_num  = PLIC_ClaimIRQ();
8000047c:	e95ff0ef          	jal	ra,80000310 <PLIC_ClaimIRQ>
80000480:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:184
    uint8_t disable = EXT_IRQ_KEEP_ENABLED;
80000484:	fe0405a3          	sb	zero,-21(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:186

    disable = ext_irq_handler_table[int_num]();
80000488:	800097b7          	lui	a5,0x80009
8000048c:	fec42703          	lw	a4,-20(s0)
80000490:	00271713          	slli	a4,a4,0x2
80000494:	dd078793          	addi	a5,a5,-560 # 80008dd0 <__stack_top+0xfffc2660>
80000498:	00f707b3          	add	a5,a4,a5
8000049c:	0007a783          	lw	a5,0(a5)
800004a0:	000780e7          	jalr	a5
800004a4:	00050793          	mv	a5,a0
800004a8:	fef405a3          	sb	a5,-21(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:188

    PLIC_CompleteIRQ(int_num);
800004ac:	fec42503          	lw	a0,-20(s0)
800004b0:	ea5ff0ef          	jal	ra,80000354 <PLIC_CompleteIRQ>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:190

    if(EXT_IRQ_DISABLE == disable)
800004b4:	feb44703          	lbu	a4,-21(s0)
800004b8:	00100793          	li	a5,1
800004bc:	00f71863          	bne	a4,a5,800004cc <handle_m_ext_interrupt+0x60>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:192
    {
        PLIC_DisableIRQ((IRQn_Type)int_num);
800004c0:	fec42503          	lw	a0,-20(s0)
800004c4:	d95ff0ef          	jal	ra,80000258 <PLIC_DisableIRQ>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:194
    }
    return;
800004c8:	00000013          	nop
800004cc:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:195
}
800004d0:	01c12083          	lw	ra,28(sp)
800004d4:	01812403          	lw	s0,24(sp)
800004d8:	02010113          	addi	sp,sp,32
800004dc:	00008067          	ret

800004e0 <handle_m_soft_interrupt>:
handle_m_soft_interrupt():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:198

void handle_m_soft_interrupt()
{
800004e0:	ff010113          	addi	sp,sp,-16
800004e4:	00112623          	sw	ra,12(sp)
800004e8:	00812423          	sw	s0,8(sp)
800004ec:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:199
    Software_IRQHandler();
800004f0:	5a8010ef          	jal	ra,80001a98 <Software_IRQHandler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:202

    /*Clear software interrupt*/
    PRCI->MSIP[0] = 0x00;
800004f4:	440007b7          	lui	a5,0x44000
800004f8:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:203
    return;
800004fc:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:204
}
80000500:	00c12083          	lw	ra,12(sp)
80000504:	00812403          	lw	s0,8(sp)
80000508:	01010113          	addi	sp,sp,16
8000050c:	00008067          	ret

80000510 <handle_syscall>:
handle_syscall():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:207

/* syscall funcion defined at system_call.c */
void handle_syscall(){
80000510:	fd010113          	addi	sp,sp,-48
80000514:	02112623          	sw	ra,44(sp)
80000518:	02812423          	sw	s0,40(sp)
8000051c:	03010413          	addi	s0,sp,48
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:210
	unsigned int arg0, arg1, arg2, arg3, arg4, arg5, type;
	unsigned int *pointer;
	register long temp asm("t0") = 0;
80000520:	00000293          	li	t0,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:211
	asm("addi	t0, sp, 0");
80000524:	00010293          	mv	t0,sp
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:213
	
	pointer = (unsigned int *)(temp + (29*4));
80000528:	00028793          	mv	a5,t0
8000052c:	07478793          	addi	a5,a5,116
80000530:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:214
	arg0 =  *pointer;
80000534:	fec42783          	lw	a5,-20(s0)
80000538:	0007a783          	lw	a5,0(a5)
8000053c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:216

	pointer = (unsigned int *)(temp + (30*4));
80000540:	00028793          	mv	a5,t0
80000544:	07878793          	addi	a5,a5,120
80000548:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:217
	arg1 = *pointer;
8000054c:	fec42783          	lw	a5,-20(s0)
80000550:	0007a783          	lw	a5,0(a5)
80000554:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:219
	
	pointer = (unsigned int *)(temp + (31*4));
80000558:	00028793          	mv	a5,t0
8000055c:	07c78793          	addi	a5,a5,124
80000560:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:220
	arg2 = *pointer;
80000564:	fec42783          	lw	a5,-20(s0)
80000568:	0007a783          	lw	a5,0(a5)
8000056c:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:222

	pointer = (unsigned int *)(temp + (32*4));
80000570:	00028793          	mv	a5,t0
80000574:	08078793          	addi	a5,a5,128
80000578:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:223
	arg3 = *pointer;
8000057c:	fec42783          	lw	a5,-20(s0)
80000580:	0007a783          	lw	a5,0(a5)
80000584:	fcf42e23          	sw	a5,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:225

	pointer = (unsigned int *)(temp + (33*4));
80000588:	00028793          	mv	a5,t0
8000058c:	08478793          	addi	a5,a5,132
80000590:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:226
	arg4 = *pointer;
80000594:	fec42783          	lw	a5,-20(s0)
80000598:	0007a783          	lw	a5,0(a5)
8000059c:	fcf42c23          	sw	a5,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:228

	pointer = (unsigned int *)(temp + (34*4));
800005a0:	00028793          	mv	a5,t0
800005a4:	08878793          	addi	a5,a5,136
800005a8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:229
	arg4 = *pointer;
800005ac:	fec42783          	lw	a5,-20(s0)
800005b0:	0007a783          	lw	a5,0(a5)
800005b4:	fcf42c23          	sw	a5,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:231

	pointer = (unsigned int *)(temp + (36*4));
800005b8:	00028793          	mv	a5,t0
800005bc:	09078793          	addi	a5,a5,144
800005c0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:232
	type = *pointer;
800005c4:	fec42783          	lw	a5,-20(s0)
800005c8:	0007a783          	lw	a5,0(a5)
800005cc:	fcf42a23          	sw	a5,-44(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:234

	switch (type){
800005d0:	fd442783          	lw	a5,-44(s0)
800005d4:	ff678793          	addi	a5,a5,-10
800005d8:	03800713          	li	a4,56
800005dc:	12f76663          	bltu	a4,a5,80000708 <handle_syscall+0x1f8>
800005e0:	00279713          	slli	a4,a5,0x2
800005e4:	800087b7          	lui	a5,0x80008
800005e8:	2fc78793          	addi	a5,a5,764 # 800082fc <__stack_top+0xfffc1b8c>
800005ec:	00f707b3          	add	a5,a4,a5
800005f0:	0007a783          	lw	a5,0(a5)
800005f4:	00078067          	jr	a5
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:237

		case SYS_TESTING:
			prints("Detectei uma chamada TESTE de sistema!\n");
800005f8:	800087b7          	lui	a5,0x80008
800005fc:	26878513          	addi	a0,a5,616 # 80008268 <__stack_top+0xfffc1af8>
80000600:	22d050ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:238
			printsv("arg0 ", arg0);
80000604:	fe842783          	lw	a5,-24(s0)
80000608:	00078593          	mv	a1,a5
8000060c:	800087b7          	lui	a5,0x80008
80000610:	29078513          	addi	a0,a5,656 # 80008290 <__stack_top+0xfffc1b20>
80000614:	2c5050ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:239
			printsv("arg1 ", arg1);
80000618:	fe442783          	lw	a5,-28(s0)
8000061c:	00078593          	mv	a1,a5
80000620:	800087b7          	lui	a5,0x80008
80000624:	29878513          	addi	a0,a5,664 # 80008298 <__stack_top+0xfffc1b28>
80000628:	2b1050ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:240
			printsv("arg2 ", arg2);
8000062c:	fe042783          	lw	a5,-32(s0)
80000630:	00078593          	mv	a1,a5
80000634:	800087b7          	lui	a5,0x80008
80000638:	2a078513          	addi	a0,a5,672 # 800082a0 <__stack_top+0xfffc1b30>
8000063c:	29d050ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:241
			printsv("arg3 ", arg3);
80000640:	fdc42783          	lw	a5,-36(s0)
80000644:	00078593          	mv	a1,a5
80000648:	800087b7          	lui	a5,0x80008
8000064c:	2a878513          	addi	a0,a5,680 # 800082a8 <__stack_top+0xfffc1b38>
80000650:	289050ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:242
			printsv("arg4 ", arg4);
80000654:	fd842783          	lw	a5,-40(s0)
80000658:	00078593          	mv	a1,a5
8000065c:	800087b7          	lui	a5,0x80008
80000660:	2b078513          	addi	a0,a5,688 # 800082b0 <__stack_top+0xfffc1b40>
80000664:	275050ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:243
			printsv("type ", type);
80000668:	fd442783          	lw	a5,-44(s0)
8000066c:	00078593          	mv	a1,a5
80000670:	800087b7          	lui	a5,0x80008
80000674:	2b878513          	addi	a0,a5,696 # 800082b8 <__stack_top+0xfffc1b48>
80000678:	261050ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:244
			break;
8000067c:	1140006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:247

        case SYS_PRINTS:
            prints(arg0);
80000680:	fe842783          	lw	a5,-24(s0)
80000684:	00078513          	mv	a0,a5
80000688:	1a5050ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:248
            UART_polled_tx_string( &g_uart, arg0 );
8000068c:	fe842783          	lw	a5,-24(s0)
80000690:	00078593          	mv	a1,a5
80000694:	800267b7          	lui	a5,0x80026
80000698:	76478513          	addi	a0,a5,1892 # 80026764 <__stack_top+0xfffdfff4>
8000069c:	39d000ef          	jal	ra,80001238 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:249
            break;
800006a0:	0f00006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:252
        
        case SYS_PRINTI:
            printi(arg0);
800006a4:	fe842783          	lw	a5,-24(s0)
800006a8:	00078513          	mv	a0,a5
800006ac:	1f1050ef          	jal	ra,8000609c <printi>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:253
            myItoa(arg0, str, 10);
800006b0:	fe842703          	lw	a4,-24(s0)
800006b4:	00a00613          	li	a2,10
800006b8:	800227b7          	lui	a5,0x80022
800006bc:	5ec78593          	addi	a1,a5,1516 # 800225ec <__stack_top+0xfffdbe7c>
800006c0:	00070513          	mv	a0,a4
800006c4:	491050ef          	jal	ra,80006354 <myItoa>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:254
            UART_polled_tx_string( &g_uart, (const uint8_t *)str );
800006c8:	800227b7          	lui	a5,0x80022
800006cc:	5ec78593          	addi	a1,a5,1516 # 800225ec <__stack_top+0xfffdbe7c>
800006d0:	800267b7          	lui	a5,0x80026
800006d4:	76478513          	addi	a0,a5,1892 # 80026764 <__stack_top+0xfffdfff4>
800006d8:	361000ef          	jal	ra,80001238 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:255
            break;
800006dc:	0b40006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:259
        
        case SYS_SEND_MSG:
            //              addr, task
            API_SendMessage(arg0, arg1);
800006e0:	fe442583          	lw	a1,-28(s0)
800006e4:	fe842503          	lw	a0,-24(s0)
800006e8:	3e0060ef          	jal	ra,80006ac8 <API_SendMessage>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:260
            break;
800006ec:	0a40006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:264
        
        case SYS_RECV_MSG:
            //                 addr, task
            API_SendMessageReq(arg0, arg1);
800006f0:	fe442583          	lw	a1,-28(s0)
800006f4:	fe842503          	lw	a0,-24(s0)
800006f8:	14d060ef          	jal	ra,80007044 <API_SendMessageReq>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:265
            break;
800006fc:	0940006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:268
        
        case SYS_END_TASK:
            API_FinishRunningTask();
80000700:	584040ef          	jal	ra,80004c84 <API_FinishRunningTask>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:269
            break;
80000704:	08c0006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:272

		default:
			prints("Systemcall não identificada!\n");
80000708:	800087b7          	lui	a5,0x80008
8000070c:	2c078513          	addi	a0,a5,704 # 800082c0 <__stack_top+0xfffc1b50>
80000710:	11d050ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:273
			printsv("arg0 ", arg0);
80000714:	fe842783          	lw	a5,-24(s0)
80000718:	00078593          	mv	a1,a5
8000071c:	800087b7          	lui	a5,0x80008
80000720:	29078513          	addi	a0,a5,656 # 80008290 <__stack_top+0xfffc1b20>
80000724:	1b5050ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:274
			printsv("arg1 ", arg1);
80000728:	fe442783          	lw	a5,-28(s0)
8000072c:	00078593          	mv	a1,a5
80000730:	800087b7          	lui	a5,0x80008
80000734:	29878513          	addi	a0,a5,664 # 80008298 <__stack_top+0xfffc1b28>
80000738:	1a1050ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:275
			printsv("arg2 ", arg2);
8000073c:	fe042783          	lw	a5,-32(s0)
80000740:	00078593          	mv	a1,a5
80000744:	800087b7          	lui	a5,0x80008
80000748:	2a078513          	addi	a0,a5,672 # 800082a0 <__stack_top+0xfffc1b30>
8000074c:	18d050ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:276
			printsv("arg3 ", arg3);
80000750:	fdc42783          	lw	a5,-36(s0)
80000754:	00078593          	mv	a1,a5
80000758:	800087b7          	lui	a5,0x80008
8000075c:	2a878513          	addi	a0,a5,680 # 800082a8 <__stack_top+0xfffc1b38>
80000760:	179050ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:277
			printsv("arg4 ", arg4);
80000764:	fd842783          	lw	a5,-40(s0)
80000768:	00078593          	mv	a1,a5
8000076c:	800087b7          	lui	a5,0x80008
80000770:	2b078513          	addi	a0,a5,688 # 800082b0 <__stack_top+0xfffc1b40>
80000774:	165050ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:278
			printsv("type ", type);
80000778:	fd442783          	lw	a5,-44(s0)
8000077c:	00078593          	mv	a1,a5
80000780:	800087b7          	lui	a5,0x80008
80000784:	2b878513          	addi	a0,a5,696 # 800082b8 <__stack_top+0xfffc1b48>
80000788:	151050ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:279
			break;
8000078c:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:281
	}
	return;
80000790:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:296
	// 	value = *p;
	// 	printsvsv("i: ", i, " value: ", value);
	// }
    // prints("Cheguei aqui!!!!!!! sucessooo :D\n");
	////////////////////////////////////////////////////
}
80000794:	02c12083          	lw	ra,44(sp)
80000798:	02812403          	lw	s0,40(sp)
8000079c:	03010113          	addi	sp,sp,48
800007a0:	00008067          	ret

800007a4 <handle_trap>:
handle_trap():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:302

/*------------------------------------------------------------------------------
 * Trap/Interrupt handler
 */
uintptr_t handle_trap(uintptr_t mcause, uintptr_t epc)
{
800007a4:	fe010113          	addi	sp,sp,-32
800007a8:	00112e23          	sw	ra,28(sp)
800007ac:	00812c23          	sw	s0,24(sp)
800007b0:	02010413          	addi	s0,sp,32
800007b4:	fea42623          	sw	a0,-20(s0)
800007b8:	feb42423          	sw	a1,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303
    if (!(mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE) == ENV_CALL_M || (mcause & MCAUSE_CAUSE) == ENV_CALL_H || (mcause & MCAUSE_CAUSE) == ENV_CALL_S || (mcause & MCAUSE_CAUSE) == ENV_CALL_U)){
800007bc:	fec42783          	lw	a5,-20(s0)
800007c0:	0607cc63          	bltz	a5,80000838 <handle_trap+0x94>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303 (discriminator 1)
800007c4:	fec42703          	lw	a4,-20(s0)
800007c8:	800007b7          	lui	a5,0x80000
800007cc:	fff7c793          	not	a5,a5
800007d0:	00f77733          	and	a4,a4,a5
800007d4:	00b00793          	li	a5,11
800007d8:	04f70663          	beq	a4,a5,80000824 <handle_trap+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303 (discriminator 2)
800007dc:	fec42703          	lw	a4,-20(s0)
800007e0:	800007b7          	lui	a5,0x80000
800007e4:	fff7c793          	not	a5,a5
800007e8:	00f77733          	and	a4,a4,a5
800007ec:	00a00793          	li	a5,10
800007f0:	02f70a63          	beq	a4,a5,80000824 <handle_trap+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303 (discriminator 3)
800007f4:	fec42703          	lw	a4,-20(s0)
800007f8:	800007b7          	lui	a5,0x80000
800007fc:	fff7c793          	not	a5,a5
80000800:	00f77733          	and	a4,a4,a5
80000804:	00900793          	li	a5,9
80000808:	00f70e63          	beq	a4,a5,80000824 <handle_trap+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303 (discriminator 4)
8000080c:	fec42703          	lw	a4,-20(s0)
80000810:	800007b7          	lui	a5,0x80000
80000814:	fff7c793          	not	a5,a5
80000818:	00f77733          	and	a4,a4,a5
8000081c:	00800793          	li	a5,8
80000820:	00f71c63          	bne	a4,a5,80000838 <handle_trap+0x94>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:304
        handle_syscall();
80000824:	cedff0ef          	jal	ra,80000510 <handle_syscall>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:305
        epc = (uintptr_t) (epc + 4);
80000828:	fe842783          	lw	a5,-24(s0)
8000082c:	00478793          	addi	a5,a5,4 # 80000004 <__stack_top+0xfffb9894>
80000830:	fef42423          	sw	a5,-24(s0)
80000834:	0c40006f          	j	800008f8 <handle_trap+0x154>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:307
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_EXT)){
80000838:	fec42783          	lw	a5,-20(s0)
8000083c:	0207d263          	bgez	a5,80000860 <handle_trap+0xbc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:307 (discriminator 1)
80000840:	fec42703          	lw	a4,-20(s0)
80000844:	800007b7          	lui	a5,0x80000
80000848:	fff7c793          	not	a5,a5
8000084c:	00f77733          	and	a4,a4,a5
80000850:	00b00793          	li	a5,11
80000854:	00f71663          	bne	a4,a5,80000860 <handle_trap+0xbc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:308
        handle_m_ext_interrupt();
80000858:	c15ff0ef          	jal	ra,8000046c <handle_m_ext_interrupt>
8000085c:	09c0006f          	j	800008f8 <handle_trap+0x154>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:310
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_TIMER)){
80000860:	fec42783          	lw	a5,-20(s0)
80000864:	0207d263          	bgez	a5,80000888 <handle_trap+0xe4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:310 (discriminator 1)
80000868:	fec42703          	lw	a4,-20(s0)
8000086c:	800007b7          	lui	a5,0x80000
80000870:	fff7c793          	not	a5,a5
80000874:	00f77733          	and	a4,a4,a5
80000878:	00700793          	li	a5,7
8000087c:	00f71663          	bne	a4,a5,80000888 <handle_trap+0xe4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:311
        handle_m_timer_interrupt();
80000880:	b45ff0ef          	jal	ra,800003c4 <handle_m_timer_interrupt>
80000884:	0740006f          	j	800008f8 <handle_trap+0x154>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:313
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_SOFT)){
80000888:	fec42783          	lw	a5,-20(s0)
8000088c:	0207d263          	bgez	a5,800008b0 <handle_trap+0x10c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:313 (discriminator 1)
80000890:	fec42703          	lw	a4,-20(s0)
80000894:	800007b7          	lui	a5,0x80000
80000898:	fff7c793          	not	a5,a5
8000089c:	00f77733          	and	a4,a4,a5
800008a0:	00300793          	li	a5,3
800008a4:	00f71663          	bne	a4,a5,800008b0 <handle_trap+0x10c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:314
        handle_m_soft_interrupt();
800008a8:	c39ff0ef          	jal	ra,800004e0 <handle_m_soft_interrupt>
800008ac:	04c0006f          	j	800008f8 <handle_trap+0x154>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:317
    }
    else{
        write(1, "trap\n", 5);
800008b0:	00500613          	li	a2,5
800008b4:	800087b7          	lui	a5,0x80008
800008b8:	2e078593          	addi	a1,a5,736 # 800082e0 <__stack_top+0xfffc1b70>
800008bc:	00100513          	li	a0,1
800008c0:	129070ef          	jal	ra,800081e8 <write>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:318
        printsv("epc: ", epc);
800008c4:	fe842783          	lw	a5,-24(s0)
800008c8:	00078593          	mv	a1,a5
800008cc:	800087b7          	lui	a5,0x80008
800008d0:	2e878513          	addi	a0,a5,744 # 800082e8 <__stack_top+0xfffc1b78>
800008d4:	005050ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:319
        printsv("mcause: ", mcause);
800008d8:	fec42783          	lw	a5,-20(s0)
800008dc:	00078593          	mv	a1,a5
800008e0:	800087b7          	lui	a5,0x80008
800008e4:	2f078513          	addi	a0,a5,752 # 800082f0 <__stack_top+0xfffc1b80>
800008e8:	7f0050ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:320
        _exit(mcause);
800008ec:	fec42783          	lw	a5,-20(s0)
800008f0:	00078513          	mv	a0,a5
800008f4:	4e8000ef          	jal	ra,80000ddc <_exit>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:324
    }
    
    // Added by Iaçanã, solves several interruption problems!
    portDISABLE_INTERRUPTS(); 
800008f8:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:325
    return epc;
800008fc:	fe842783          	lw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:326
}
80000900:	00078513          	mv	a0,a5
80000904:	01c12083          	lw	ra,28(sp)
80000908:	01812403          	lw	s0,24(sp)
8000090c:	02010113          	addi	sp,sp,32
80000910:	00008067          	ret

80000914 <Invalid_IRQHandler>:
Invalid_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:37
{
    ;
}

__attribute__((weak))  uint8_t Invalid_IRQHandler(void)
{
80000914:	ff010113          	addi	sp,sp,-16
80000918:	00812623          	sw	s0,12(sp)
8000091c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:38
    return(0);
80000920:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:39
}
80000924:	00078513          	mv	a0,a5
80000928:	00c12403          	lw	s0,12(sp)
8000092c:	01010113          	addi	sp,sp,16
80000930:	00008067          	ret

80000934 <External_1_IRQHandler>:
External_1_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:42

__attribute__((weak))  uint8_t External_1_IRQHandler(void)
{
80000934:	ff010113          	addi	sp,sp,-16
80000938:	00812623          	sw	s0,12(sp)
8000093c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:43
    return(0);
80000940:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:44
}
80000944:	00078513          	mv	a0,a5
80000948:	00c12403          	lw	s0,12(sp)
8000094c:	01010113          	addi	sp,sp,16
80000950:	00008067          	ret

80000954 <External_3_IRQHandler>:
External_3_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:52
{
    return(0);
}

__attribute__((weak))  uint8_t External_3_IRQHandler(void)
{
80000954:	ff010113          	addi	sp,sp,-16
80000958:	00812623          	sw	s0,12(sp)
8000095c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:53
    return(0);
80000960:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:54
}
80000964:	00078513          	mv	a0,a5
80000968:	00c12403          	lw	s0,12(sp)
8000096c:	01010113          	addi	sp,sp,16
80000970:	00008067          	ret

80000974 <External_4_IRQHandler>:
External_4_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:57

__attribute__((weak))  uint8_t External_4_IRQHandler(void)
{
80000974:	ff010113          	addi	sp,sp,-16
80000978:	00812623          	sw	s0,12(sp)
8000097c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:58
    return(0);
80000980:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:59
}
80000984:	00078513          	mv	a0,a5
80000988:	00c12403          	lw	s0,12(sp)
8000098c:	01010113          	addi	sp,sp,16
80000990:	00008067          	ret

80000994 <External_5_IRQHandler>:
External_5_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:62

__attribute__((weak))  uint8_t External_5_IRQHandler(void)
{
80000994:	ff010113          	addi	sp,sp,-16
80000998:	00812623          	sw	s0,12(sp)
8000099c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:63
    return(0);
800009a0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:64
}
800009a4:	00078513          	mv	a0,a5
800009a8:	00c12403          	lw	s0,12(sp)
800009ac:	01010113          	addi	sp,sp,16
800009b0:	00008067          	ret

800009b4 <External_6_IRQHandler>:
External_6_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:67

__attribute__((weak))  uint8_t External_6_IRQHandler(void)
{
800009b4:	ff010113          	addi	sp,sp,-16
800009b8:	00812623          	sw	s0,12(sp)
800009bc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:68
    return(0);
800009c0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:69
}
800009c4:	00078513          	mv	a0,a5
800009c8:	00c12403          	lw	s0,12(sp)
800009cc:	01010113          	addi	sp,sp,16
800009d0:	00008067          	ret

800009d4 <External_7_IRQHandler>:
External_7_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:72

__attribute__((weak))  uint8_t External_7_IRQHandler(void)
{
800009d4:	ff010113          	addi	sp,sp,-16
800009d8:	00812623          	sw	s0,12(sp)
800009dc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:73
    return(0);
800009e0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:74
}
800009e4:	00078513          	mv	a0,a5
800009e8:	00c12403          	lw	s0,12(sp)
800009ec:	01010113          	addi	sp,sp,16
800009f0:	00008067          	ret

800009f4 <External_8_IRQHandler>:
External_8_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:77

__attribute__((weak))  uint8_t External_8_IRQHandler(void)
{
800009f4:	ff010113          	addi	sp,sp,-16
800009f8:	00812623          	sw	s0,12(sp)
800009fc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:78
    return(0);
80000a00:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:79
}
80000a04:	00078513          	mv	a0,a5
80000a08:	00c12403          	lw	s0,12(sp)
80000a0c:	01010113          	addi	sp,sp,16
80000a10:	00008067          	ret

80000a14 <External_9_IRQHandler>:
External_9_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:82

__attribute__((weak))  uint8_t External_9_IRQHandler(void)
{
80000a14:	ff010113          	addi	sp,sp,-16
80000a18:	00812623          	sw	s0,12(sp)
80000a1c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:83
    return(0);
80000a20:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:84
}
80000a24:	00078513          	mv	a0,a5
80000a28:	00c12403          	lw	s0,12(sp)
80000a2c:	01010113          	addi	sp,sp,16
80000a30:	00008067          	ret

80000a34 <External_10_IRQHandler>:
External_10_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:87

__attribute__((weak))  uint8_t External_10_IRQHandler(void)
{
80000a34:	ff010113          	addi	sp,sp,-16
80000a38:	00812623          	sw	s0,12(sp)
80000a3c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:88
    return(0);
80000a40:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:89
}
80000a44:	00078513          	mv	a0,a5
80000a48:	00c12403          	lw	s0,12(sp)
80000a4c:	01010113          	addi	sp,sp,16
80000a50:	00008067          	ret

80000a54 <External_11_IRQHandler>:
External_11_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:92

__attribute__((weak))  uint8_t External_11_IRQHandler(void)
{
80000a54:	ff010113          	addi	sp,sp,-16
80000a58:	00812623          	sw	s0,12(sp)
80000a5c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:93
    return(0);
80000a60:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:94
}
80000a64:	00078513          	mv	a0,a5
80000a68:	00c12403          	lw	s0,12(sp)
80000a6c:	01010113          	addi	sp,sp,16
80000a70:	00008067          	ret

80000a74 <External_12_IRQHandler>:
External_12_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:97

__attribute__((weak))  uint8_t External_12_IRQHandler(void)
{
80000a74:	ff010113          	addi	sp,sp,-16
80000a78:	00812623          	sw	s0,12(sp)
80000a7c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:98
    return(0);
80000a80:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:99
}
80000a84:	00078513          	mv	a0,a5
80000a88:	00c12403          	lw	s0,12(sp)
80000a8c:	01010113          	addi	sp,sp,16
80000a90:	00008067          	ret

80000a94 <External_13_IRQHandler>:
External_13_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:102

__attribute__((weak))  uint8_t External_13_IRQHandler(void)
{
80000a94:	ff010113          	addi	sp,sp,-16
80000a98:	00812623          	sw	s0,12(sp)
80000a9c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:103
    return(0);
80000aa0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:104
}
80000aa4:	00078513          	mv	a0,a5
80000aa8:	00c12403          	lw	s0,12(sp)
80000aac:	01010113          	addi	sp,sp,16
80000ab0:	00008067          	ret

80000ab4 <External_14_IRQHandler>:
External_14_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:107

__attribute__((weak))  uint8_t External_14_IRQHandler(void)
{
80000ab4:	ff010113          	addi	sp,sp,-16
80000ab8:	00812623          	sw	s0,12(sp)
80000abc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:108
    return(0);
80000ac0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:109
}
80000ac4:	00078513          	mv	a0,a5
80000ac8:	00c12403          	lw	s0,12(sp)
80000acc:	01010113          	addi	sp,sp,16
80000ad0:	00008067          	ret

80000ad4 <External_15_IRQHandler>:
External_15_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:112

__attribute__((weak))  uint8_t External_15_IRQHandler(void)
{
80000ad4:	ff010113          	addi	sp,sp,-16
80000ad8:	00812623          	sw	s0,12(sp)
80000adc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:113
    return(0);
80000ae0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:114
}
80000ae4:	00078513          	mv	a0,a5
80000ae8:	00c12403          	lw	s0,12(sp)
80000aec:	01010113          	addi	sp,sp,16
80000af0:	00008067          	ret

80000af4 <External_16_IRQHandler>:
External_16_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:117

__attribute__((weak))  uint8_t External_16_IRQHandler(void)
{
80000af4:	ff010113          	addi	sp,sp,-16
80000af8:	00812623          	sw	s0,12(sp)
80000afc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:118
    return(0);
80000b00:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:119
}
80000b04:	00078513          	mv	a0,a5
80000b08:	00c12403          	lw	s0,12(sp)
80000b0c:	01010113          	addi	sp,sp,16
80000b10:	00008067          	ret

80000b14 <External_17_IRQHandler>:
External_17_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:122

__attribute__((weak))  uint8_t External_17_IRQHandler(void)
{
80000b14:	ff010113          	addi	sp,sp,-16
80000b18:	00812623          	sw	s0,12(sp)
80000b1c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:123
    return(0);
80000b20:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:124
}
80000b24:	00078513          	mv	a0,a5
80000b28:	00c12403          	lw	s0,12(sp)
80000b2c:	01010113          	addi	sp,sp,16
80000b30:	00008067          	ret

80000b34 <External_18_IRQHandler>:
External_18_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:127

__attribute__((weak))  uint8_t External_18_IRQHandler(void)
{
80000b34:	ff010113          	addi	sp,sp,-16
80000b38:	00812623          	sw	s0,12(sp)
80000b3c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:128
    return(0);
80000b40:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:129
}
80000b44:	00078513          	mv	a0,a5
80000b48:	00c12403          	lw	s0,12(sp)
80000b4c:	01010113          	addi	sp,sp,16
80000b50:	00008067          	ret

80000b54 <External_19_IRQHandler>:
External_19_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:132

__attribute__((weak))  uint8_t External_19_IRQHandler(void)
{
80000b54:	ff010113          	addi	sp,sp,-16
80000b58:	00812623          	sw	s0,12(sp)
80000b5c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:133
    return(0);
80000b60:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:134
}
80000b64:	00078513          	mv	a0,a5
80000b68:	00c12403          	lw	s0,12(sp)
80000b6c:	01010113          	addi	sp,sp,16
80000b70:	00008067          	ret

80000b74 <External_20_IRQHandler>:
External_20_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:137

__attribute__((weak))  uint8_t External_20_IRQHandler(void)
{
80000b74:	ff010113          	addi	sp,sp,-16
80000b78:	00812623          	sw	s0,12(sp)
80000b7c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:138
    return(0);
80000b80:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:139
}
80000b84:	00078513          	mv	a0,a5
80000b88:	00c12403          	lw	s0,12(sp)
80000b8c:	01010113          	addi	sp,sp,16
80000b90:	00008067          	ret

80000b94 <External_21_IRQHandler>:
External_21_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:142

__attribute__((weak))  uint8_t External_21_IRQHandler(void)
{
80000b94:	ff010113          	addi	sp,sp,-16
80000b98:	00812623          	sw	s0,12(sp)
80000b9c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:143
    return(0);
80000ba0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:144
}
80000ba4:	00078513          	mv	a0,a5
80000ba8:	00c12403          	lw	s0,12(sp)
80000bac:	01010113          	addi	sp,sp,16
80000bb0:	00008067          	ret

80000bb4 <External_22_IRQHandler>:
External_22_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:147

__attribute__((weak))  uint8_t External_22_IRQHandler(void)
{
80000bb4:	ff010113          	addi	sp,sp,-16
80000bb8:	00812623          	sw	s0,12(sp)
80000bbc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:148
    return(0);
80000bc0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:149
}
80000bc4:	00078513          	mv	a0,a5
80000bc8:	00c12403          	lw	s0,12(sp)
80000bcc:	01010113          	addi	sp,sp,16
80000bd0:	00008067          	ret

80000bd4 <External_23_IRQHandler>:
External_23_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:152

__attribute__((weak))  uint8_t External_23_IRQHandler(void)
{
80000bd4:	ff010113          	addi	sp,sp,-16
80000bd8:	00812623          	sw	s0,12(sp)
80000bdc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:153
    return(0);
80000be0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:154
}
80000be4:	00078513          	mv	a0,a5
80000be8:	00c12403          	lw	s0,12(sp)
80000bec:	01010113          	addi	sp,sp,16
80000bf0:	00008067          	ret

80000bf4 <External_24_IRQHandler>:
External_24_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:157

__attribute__((weak))  uint8_t External_24_IRQHandler(void)
{
80000bf4:	ff010113          	addi	sp,sp,-16
80000bf8:	00812623          	sw	s0,12(sp)
80000bfc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:158
    return(0);
80000c00:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:159
}
80000c04:	00078513          	mv	a0,a5
80000c08:	00c12403          	lw	s0,12(sp)
80000c0c:	01010113          	addi	sp,sp,16
80000c10:	00008067          	ret

80000c14 <External_25_IRQHandler>:
External_25_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:162

__attribute__((weak))  uint8_t External_25_IRQHandler(void)
{
80000c14:	ff010113          	addi	sp,sp,-16
80000c18:	00812623          	sw	s0,12(sp)
80000c1c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:163
    return(0);
80000c20:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:164
}
80000c24:	00078513          	mv	a0,a5
80000c28:	00c12403          	lw	s0,12(sp)
80000c2c:	01010113          	addi	sp,sp,16
80000c30:	00008067          	ret

80000c34 <External_26_IRQHandler>:
External_26_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:167

__attribute__((weak))  uint8_t External_26_IRQHandler(void)
{
80000c34:	ff010113          	addi	sp,sp,-16
80000c38:	00812623          	sw	s0,12(sp)
80000c3c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:168
    return(0);
80000c40:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:169
}
80000c44:	00078513          	mv	a0,a5
80000c48:	00c12403          	lw	s0,12(sp)
80000c4c:	01010113          	addi	sp,sp,16
80000c50:	00008067          	ret

80000c54 <External_27_IRQHandler>:
External_27_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:172

__attribute__((weak))  uint8_t External_27_IRQHandler(void)
{
80000c54:	ff010113          	addi	sp,sp,-16
80000c58:	00812623          	sw	s0,12(sp)
80000c5c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:173
    return(0);
80000c60:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:174
}
80000c64:	00078513          	mv	a0,a5
80000c68:	00c12403          	lw	s0,12(sp)
80000c6c:	01010113          	addi	sp,sp,16
80000c70:	00008067          	ret

80000c74 <External_28_IRQHandler>:
External_28_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:177

__attribute__((weak))  uint8_t External_28_IRQHandler(void)
{
80000c74:	ff010113          	addi	sp,sp,-16
80000c78:	00812623          	sw	s0,12(sp)
80000c7c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:178
    return(0);
80000c80:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:179
}
80000c84:	00078513          	mv	a0,a5
80000c88:	00c12403          	lw	s0,12(sp)
80000c8c:	01010113          	addi	sp,sp,16
80000c90:	00008067          	ret

80000c94 <External_29_IRQHandler>:
External_29_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:182

__attribute__((weak))  uint8_t External_29_IRQHandler(void)
{
80000c94:	ff010113          	addi	sp,sp,-16
80000c98:	00812623          	sw	s0,12(sp)
80000c9c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:183
    return(0);
80000ca0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:184
}
80000ca4:	00078513          	mv	a0,a5
80000ca8:	00c12403          	lw	s0,12(sp)
80000cac:	01010113          	addi	sp,sp,16
80000cb0:	00008067          	ret

80000cb4 <External_30_IRQHandler>:
External_30_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:187

__attribute__((weak))  uint8_t External_30_IRQHandler(void)
{
80000cb4:	ff010113          	addi	sp,sp,-16
80000cb8:	00812623          	sw	s0,12(sp)
80000cbc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:188
    return(0);
80000cc0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:189
}
80000cc4:	00078513          	mv	a0,a5
80000cc8:	00c12403          	lw	s0,12(sp)
80000ccc:	01010113          	addi	sp,sp,16
80000cd0:	00008067          	ret

80000cd4 <External_31_IRQHandler>:
External_31_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:192

__attribute__((weak))  uint8_t External_31_IRQHandler(void)
{
80000cd4:	ff010113          	addi	sp,sp,-16
80000cd8:	00812623          	sw	s0,12(sp)
80000cdc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:193
    return(0);
80000ce0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:194
}
80000ce4:	00078513          	mv	a0,a5
80000ce8:	00c12403          	lw	s0,12(sp)
80000cec:	01010113          	addi	sp,sp,16
80000cf0:	00008067          	ret

80000cf4 <write_hex>:
write_hex():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:55

char *__env[1] = { 0 };
char **environ = __env;

void write_hex(int fd, uint32_t hex)
{
80000cf4:	fd010113          	addi	sp,sp,-48
80000cf8:	02112623          	sw	ra,44(sp)
80000cfc:	02812423          	sw	s0,40(sp)
80000d00:	03010413          	addi	s0,sp,48
80000d04:	fca42e23          	sw	a0,-36(s0)
80000d08:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:61
    uint8_t ii;
    uint8_t jj;
    char towrite;
    uint8_t digit;

    write( fd , "0x", 2 );
80000d0c:	00200613          	li	a2,2
80000d10:	800087b7          	lui	a5,0x80008
80000d14:	3e078593          	addi	a1,a5,992 # 800083e0 <__stack_top+0xfffc1c70>
80000d18:	fdc42503          	lw	a0,-36(s0)
80000d1c:	4cc070ef          	jal	ra,800081e8 <write>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:63

    for (ii = 8 ; ii > 0; ii--)
80000d20:	00800793          	li	a5,8
80000d24:	fef407a3          	sb	a5,-17(s0)
80000d28:	0980006f          	j	80000dc0 <write_hex+0xcc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:65
    {
        jj = ii-1;
80000d2c:	fef44783          	lbu	a5,-17(s0)
80000d30:	fff78793          	addi	a5,a5,-1
80000d34:	fef40723          	sb	a5,-18(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:66
        digit = ((hex & (0xF << (jj*4))) >> (jj*4));
80000d38:	fee44783          	lbu	a5,-18(s0)
80000d3c:	00279793          	slli	a5,a5,0x2
80000d40:	00f00713          	li	a4,15
80000d44:	00f717b3          	sll	a5,a4,a5
80000d48:	00078713          	mv	a4,a5
80000d4c:	fd842783          	lw	a5,-40(s0)
80000d50:	00f77733          	and	a4,a4,a5
80000d54:	fee44783          	lbu	a5,-18(s0)
80000d58:	00279793          	slli	a5,a5,0x2
80000d5c:	00f757b3          	srl	a5,a4,a5
80000d60:	fef406a3          	sb	a5,-19(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:67
        towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
80000d64:	fed44703          	lbu	a4,-19(s0)
80000d68:	00900793          	li	a5,9
80000d6c:	00e7ee63          	bltu	a5,a4,80000d88 <write_hex+0x94>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 1)
80000d70:	fed44783          	lbu	a5,-19(s0)
80000d74:	03078793          	addi	a5,a5,48
80000d78:	0ff7f793          	andi	a5,a5,255
80000d7c:	01879793          	slli	a5,a5,0x18
80000d80:	4187d793          	srai	a5,a5,0x18
80000d84:	0180006f          	j	80000d9c <write_hex+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 2)
80000d88:	fed44783          	lbu	a5,-19(s0)
80000d8c:	03778793          	addi	a5,a5,55
80000d90:	0ff7f793          	andi	a5,a5,255
80000d94:	01879793          	slli	a5,a5,0x18
80000d98:	4187d793          	srai	a5,a5,0x18
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 4)
80000d9c:	fef40623          	sb	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:68 (discriminator 4)
        write( fd, &towrite, 1);
80000da0:	fec40793          	addi	a5,s0,-20
80000da4:	00100613          	li	a2,1
80000da8:	00078593          	mv	a1,a5
80000dac:	fdc42503          	lw	a0,-36(s0)
80000db0:	438070ef          	jal	ra,800081e8 <write>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 4)
    for (ii = 8 ; ii > 0; ii--)
80000db4:	fef44783          	lbu	a5,-17(s0)
80000db8:	fff78793          	addi	a5,a5,-1
80000dbc:	fef407a3          	sb	a5,-17(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 2)
80000dc0:	fef44783          	lbu	a5,-17(s0)
80000dc4:	f60794e3          	bnez	a5,80000d2c <write_hex+0x38>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:70
    }
}
80000dc8:	00000013          	nop
80000dcc:	02c12083          	lw	ra,44(sp)
80000dd0:	02812403          	lw	s0,40(sp)
80000dd4:	03010113          	addi	sp,sp,48
80000dd8:	00008067          	ret

80000ddc <_exit>:
_exit():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:74

               
void _exit(int code)
{
80000ddc:	fd010113          	addi	sp,sp,-48
80000de0:	02112623          	sw	ra,44(sp)
80000de4:	02812423          	sw	s0,40(sp)
80000de8:	03010413          	addi	s0,sp,48
80000dec:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:76
#ifdef MSCC_STDIO_THRU_CORE_UART_APB
    const char * message = "\nProgam has exited with code:";
80000df0:	800087b7          	lui	a5,0x80008
80000df4:	3e478793          	addi	a5,a5,996 # 800083e4 <__stack_top+0xfffc1c74>
80000df8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:78

    write(STDERR_FILENO, message, strlen(message));
80000dfc:	fec42503          	lw	a0,-20(s0)
80000e00:	11c010ef          	jal	ra,80001f1c <strlen>
80000e04:	00050793          	mv	a5,a0
80000e08:	00078613          	mv	a2,a5
80000e0c:	fec42583          	lw	a1,-20(s0)
80000e10:	00200513          	li	a0,2
80000e14:	3d4070ef          	jal	ra,800081e8 <write>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:79
    write_hex(STDERR_FILENO, code);
80000e18:	fdc42783          	lw	a5,-36(s0)
80000e1c:	00078593          	mv	a1,a5
80000e20:	00200513          	li	a0,2
80000e24:	ed1ff0ef          	jal	ra,80000cf4 <write_hex>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:82 (discriminator 1)
#endif

    while (1);
80000e28:	0000006f          	j	80000e28 <_exit+0x4c>

80000e2c <_isatty>:
_isatty():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:101
    curbrk += incr;
    return curbrk - incr;
}

int _isatty(int fd)
{
80000e2c:	fe010113          	addi	sp,sp,-32
80000e30:	00812e23          	sw	s0,28(sp)
80000e34:	02010413          	addi	s0,sp,32
80000e38:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:102
    if (fd == STDOUT_FILENO || fd == STDERR_FILENO)
80000e3c:	fec42703          	lw	a4,-20(s0)
80000e40:	00100793          	li	a5,1
80000e44:	00f70863          	beq	a4,a5,80000e54 <_isatty+0x28>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:102 (discriminator 1)
80000e48:	fec42703          	lw	a4,-20(s0)
80000e4c:	00200793          	li	a5,2
80000e50:	00f71663          	bne	a4,a5,80000e5c <_isatty+0x30>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:104
    {
        return 1;
80000e54:	00100793          	li	a5,1
80000e58:	0140006f          	j	80000e6c <_isatty+0x40>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:107
    }

    errno = EBADF;
80000e5c:	800227b7          	lui	a5,0x80022
80000e60:	00900713          	li	a4,9
80000e64:	60e7a223          	sw	a4,1540(a5) # 80022604 <__stack_top+0xfffdbe94>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:108
    return 0;
80000e68:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:109
}
80000e6c:	00078513          	mv	a0,a5
80000e70:	01c12403          	lw	s0,28(sp)
80000e74:	02010113          	addi	sp,sp,32
80000e78:	00008067          	ret

80000e7c <stub>:
stub():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:112

static int stub(int err)
{
80000e7c:	fe010113          	addi	sp,sp,-32
80000e80:	00812e23          	sw	s0,28(sp)
80000e84:	02010413          	addi	s0,sp,32
80000e88:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:113
    errno = err;
80000e8c:	800227b7          	lui	a5,0x80022
80000e90:	fec42703          	lw	a4,-20(s0)
80000e94:	60e7a223          	sw	a4,1540(a5) # 80022604 <__stack_top+0xfffdbe94>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:114
    return -1;
80000e98:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:115
}
80000e9c:	00078513          	mv	a0,a5
80000ea0:	01c12403          	lw	s0,28(sp)
80000ea4:	02010113          	addi	sp,sp,32
80000ea8:	00008067          	ret

80000eac <_write>:
_write():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:226
{
    return stub(ECHILD);
}

ssize_t _write(int fd, const void* ptr, size_t len)
{
80000eac:	fd010113          	addi	sp,sp,-48
80000eb0:	02112623          	sw	ra,44(sp)
80000eb4:	02812423          	sw	s0,40(sp)
80000eb8:	03010413          	addi	s0,sp,48
80000ebc:	fca42e23          	sw	a0,-36(s0)
80000ec0:	fcb42c23          	sw	a1,-40(s0)
80000ec4:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:229

#ifdef MSCC_STDIO_THRU_CORE_UART_APB
  const uint8_t * current = (const uint8_t *) ptr;
80000ec8:	fd842783          	lw	a5,-40(s0)
80000ecc:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:232
  size_t jj;

  if (_isatty(fd))
80000ed0:	fdc42503          	lw	a0,-36(s0)
80000ed4:	f59ff0ef          	jal	ra,80000e2c <_isatty>
80000ed8:	00050793          	mv	a5,a0
80000edc:	08078c63          	beqz	a5,80000f74 <_write+0xc8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:238
  {
        /*--------------------------------------------------------------------------
        * Initialize the UART driver if it is the first time this function is
        * called.
        */
        if ( !g_stdio_uart_init_done )
80000ee0:	9101a783          	lw	a5,-1776(gp) # 80008ec0 <g_stdio_uart_init_done>
80000ee4:	02079063          	bnez	a5,80000f04 <_write+0x58>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:245
            /******************************************************************************
            * Baud value:
            * This value is calculated using the following equation:
            *      BAUD_VALUE = (CLOCK / (16 * BAUD_RATE)) - 1
            *****************************************************************************/
            UART_init( &g_stdio_uart, MSCC_STDIO_UART_BASE_ADDR, ((SYS_CLK_FREQ/(16 * MSCC_STDIO_BAUD_VALUE))-1), (DATA_8_BITS | NO_PARITY));
80000ee8:	00100693          	li	a3,1
80000eec:	02c00613          	li	a2,44
80000ef0:	700015b7          	lui	a1,0x70001
80000ef4:	90818513          	addi	a0,gp,-1784 # 80008eb8 <g_stdio_uart>
80000ef8:	174000ef          	jal	ra,8000106c <UART_init>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:246
            g_stdio_uart_init_done = 1;
80000efc:	00100713          	li	a4,1
80000f00:	90e1a823          	sw	a4,-1776(gp) # 80008ec0 <g_stdio_uart_init_done>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:249
        }

    for (jj = 0; jj < len; jj++)
80000f04:	fe042623          	sw	zero,-20(s0)
80000f08:	0580006f          	j	80000f60 <_write+0xb4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:251
    {
        UART_send(&g_stdio_uart, current + jj, 1);
80000f0c:	fe842703          	lw	a4,-24(s0)
80000f10:	fec42783          	lw	a5,-20(s0)
80000f14:	00f707b3          	add	a5,a4,a5
80000f18:	00100613          	li	a2,1
80000f1c:	00078593          	mv	a1,a5
80000f20:	90818513          	addi	a0,gp,-1784 # 80008eb8 <g_stdio_uart>
80000f24:	260000ef          	jal	ra,80001184 <UART_send>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:252
        if (current[jj] == '\n')
80000f28:	fe842703          	lw	a4,-24(s0)
80000f2c:	fec42783          	lw	a5,-20(s0)
80000f30:	00f707b3          	add	a5,a4,a5
80000f34:	0007c703          	lbu	a4,0(a5)
80000f38:	00a00793          	li	a5,10
80000f3c:	00f71c63          	bne	a4,a5,80000f54 <_write+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:254
        {
            UART_send(&g_stdio_uart, (const uint8_t *)"\r", 1);
80000f40:	00100613          	li	a2,1
80000f44:	800087b7          	lui	a5,0x80008
80000f48:	40478593          	addi	a1,a5,1028 # 80008404 <__stack_top+0xfffc1c94>
80000f4c:	90818513          	addi	a0,gp,-1784 # 80008eb8 <g_stdio_uart>
80000f50:	234000ef          	jal	ra,80001184 <UART_send>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 2)
    for (jj = 0; jj < len; jj++)
80000f54:	fec42783          	lw	a5,-20(s0)
80000f58:	00178793          	addi	a5,a5,1
80000f5c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 1)
80000f60:	fec42703          	lw	a4,-20(s0)
80000f64:	fd442783          	lw	a5,-44(s0)
80000f68:	faf762e3          	bltu	a4,a5,80000f0c <_write+0x60>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:257
        }
    }
    return len;
80000f6c:	fd442783          	lw	a5,-44(s0)
80000f70:	0100006f          	j	80000f80 <_write+0xd4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:261
  }
#endif

  return stub(EBADF);
80000f74:	00900513          	li	a0,9
80000f78:	f05ff0ef          	jal	ra,80000e7c <stub>
80000f7c:	00050793          	mv	a5,a0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:262
}
80000f80:	00078513          	mv	a0,a5
80000f84:	02c12083          	lw	ra,44(sp)
80000f88:	02812403          	lw	s0,40(sp)
80000f8c:	03010113          	addi	sp,sp,48
80000f90:	00008067          	ret

80000f94 <HW_set_32bit_reg>:
HW_set_32bit_reg():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:36
 *
 * a0:   addr_t reg_addr
 * a1:   uint32_t value
 */
HW_set_32bit_reg:
    sw a1, 0(a0)
80000f94:	00b52023          	sw	a1,0(a0) # 44000000 <RAM_SIZE+0x43f80000>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:37
    ret
80000f98:	00008067          	ret

80000f9c <HW_get_32bit_reg>:
HW_get_32bit_reg():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:47
 *
 * R0:   addr_t reg_addr
 * @return          32 bits value read from the peripheral register.
 */
HW_get_32bit_reg:
    lw a0, 0(a0)
80000f9c:	00052503          	lw	a0,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:48
    ret
80000fa0:	00008067          	ret

80000fa4 <HW_set_32bit_reg_field>:
HW_set_32bit_reg_field():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:60
 * a1:   int_fast8_t shift
 * a2:   uint32_t mask
 * a3:   uint32_t value
 */
HW_set_32bit_reg_field:
    mv t3, a3
80000fa4:	00068e13          	mv	t3,a3
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:61
    sll t3, t3, a1
80000fa8:	00be1e33          	sll	t3,t3,a1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:62
    and  t3, t3, a2
80000fac:	00ce7e33          	and	t3,t3,a2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:63
    lw t1, 0(a0)
80000fb0:	00052303          	lw	t1,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:64
    mv t2, a2
80000fb4:	00060393          	mv	t2,a2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:65
    not t2, t2
80000fb8:	fff3c393          	not	t2,t2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:66
    and t1, t1, t2
80000fbc:	00737333          	and	t1,t1,t2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:67
    or t1, t1, t3
80000fc0:	01c36333          	or	t1,t1,t3
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:68
    sw t1, 0(a0)
80000fc4:	00652023          	sw	t1,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:69
    ret
80000fc8:	00008067          	ret

80000fcc <HW_get_32bit_reg_field>:
HW_get_32bit_reg_field():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:83
 *
 * @return          32 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_32bit_reg_field:
    lw a0, 0(a0)
80000fcc:	00052503          	lw	a0,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:84
    and a0, a0, a2
80000fd0:	00c57533          	and	a0,a0,a2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:85
    srl a0, a0, a1
80000fd4:	00b55533          	srl	a0,a0,a1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:86
    ret
80000fd8:	00008067          	ret

80000fdc <HW_set_16bit_reg>:
HW_set_16bit_reg():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:96
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast16_t value
 */
HW_set_16bit_reg:
    sh a1, 0(a0)
80000fdc:	00b51023          	sh	a1,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:97
    ret
80000fe0:	00008067          	ret

80000fe4 <HW_get_16bit_reg>:
HW_get_16bit_reg():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:107
 *
 * a0:   addr_t reg_addr
 * @return          16 bits value read from the peripheral register.
 */
HW_get_16bit_reg:
    lh a0, (a0)
80000fe4:	00051503          	lh	a0,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:108
    ret
80000fe8:	00008067          	ret

80000fec <HW_set_16bit_reg_field>:
HW_set_16bit_reg_field():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:121
 * a2:   uint_fast16_t mask
 * a3:   uint_fast16_t value
 * @param value     Value to be written in the specified field.
 */
HW_set_16bit_reg_field:
    mv t3, a3
80000fec:	00068e13          	mv	t3,a3
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:122
    sll t3, t3, a1
80000ff0:	00be1e33          	sll	t3,t3,a1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:123
    and  t3, t3, a2
80000ff4:	00ce7e33          	and	t3,t3,a2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:124
    lh t1, 0(a0)
80000ff8:	00051303          	lh	t1,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:125
    mv t2, a2
80000ffc:	00060393          	mv	t2,a2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:126
    not t2, t2
80001000:	fff3c393          	not	t2,t2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:127
    and t1, t1, t2
80001004:	00737333          	and	t1,t1,t2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:128
    or t1, t1, t3
80001008:	01c36333          	or	t1,t1,t3
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:129
    sh t1, 0(a0)
8000100c:	00651023          	sh	t1,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:130
    ret
80001010:	00008067          	ret

80001014 <HW_get_16bit_reg_field>:
HW_get_16bit_reg_field():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:144
 *
 * @return          16 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_16bit_reg_field:
    lh a0, 0(a0)
80001014:	00051503          	lh	a0,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:145
    and a0, a0, a2
80001018:	00c57533          	and	a0,a0,a2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:146
    srl a0, a0, a1
8000101c:	00b55533          	srl	a0,a0,a1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:147
    ret
80001020:	00008067          	ret

80001024 <HW_set_8bit_reg>:
HW_set_8bit_reg():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:157
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast8_t value
 */
HW_set_8bit_reg:
    sb a1, 0(a0)
80001024:	00b50023          	sb	a1,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:158
    ret
80001028:	00008067          	ret

8000102c <HW_get_8bit_reg>:
HW_get_8bit_reg():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:168
 *
 * a0:   addr_t reg_addr
 * @return          8 bits value read from the peripheral register.
 */
HW_get_8bit_reg:
    lb a0, 0(a0)
8000102c:	00050503          	lb	a0,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:169
    ret
80001030:	00008067          	ret

80001034 <HW_set_8bit_reg_field>:
HW_set_8bit_reg_field():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:181
 * a1:   int_fast8_t shift
 * a2:   uint_fast8_t mask
 * a3:   uint_fast8_t value
 */
HW_set_8bit_reg_field:
    mv t3, a3
80001034:	00068e13          	mv	t3,a3
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:182
    sll t3, t3, a1
80001038:	00be1e33          	sll	t3,t3,a1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:183
    and  t3, t3, a2
8000103c:	00ce7e33          	and	t3,t3,a2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:184
    lb t1, 0(a0)
80001040:	00050303          	lb	t1,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:185
    mv t2, a2
80001044:	00060393          	mv	t2,a2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:186
    not t2, t2
80001048:	fff3c393          	not	t2,t2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:187
    and t1, t1, t2
8000104c:	00737333          	and	t1,t1,t2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:188
    or t1, t1, t3
80001050:	01c36333          	or	t1,t1,t3
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:189
    sb t1, 0(a0)
80001054:	00650023          	sb	t1,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:190
    ret
80001058:	00008067          	ret

8000105c <HW_get_8bit_reg_field>:
HW_get_8bit_reg_field():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:204
 *
 * @return          8 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_8bit_reg_field:
    lb a0, 0(a0)
8000105c:	00050503          	lb	a0,0(a0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:205
    and a0, a0, a2
80001060:	00c57533          	and	a0,a0,a2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:206
    srl a0, a0, a1
80001064:	00b55533          	srl	a0,a0,a1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:207
    ret
80001068:	00008067          	ret

8000106c <UART_init>:
UART_init():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:46
    UART_instance_t * this_uart,
    addr_t base_addr,
    uint16_t baud_value,
    uint8_t line_config
)
{
8000106c:	fd010113          	addi	sp,sp,-48
80001070:	02112623          	sw	ra,44(sp)
80001074:	02812423          	sw	s0,40(sp)
80001078:	03010413          	addi	s0,sp,48
8000107c:	fca42e23          	sw	a0,-36(s0)
80001080:	fcb42c23          	sw	a1,-40(s0)
80001084:	00060793          	mv	a5,a2
80001088:	00068713          	mv	a4,a3
8000108c:	fcf41b23          	sh	a5,-42(s0)
80001090:	00070793          	mv	a5,a4
80001094:	fcf40aa3          	sb	a5,-43(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53
    
    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( line_config <= MAX_LINE_CONFIG )
    HAL_ASSERT( baud_value <= MAX_BAUD_VALUE )

    if( ( this_uart != NULL_INSTANCE ) &&
80001098:	fdc42783          	lw	a5,-36(s0)
8000109c:	0c078a63          	beqz	a5,80001170 <UART_init+0x104>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53 (discriminator 1)
800010a0:	fd544703          	lbu	a4,-43(s0)
800010a4:	00700793          	li	a5,7
800010a8:	0ce7e463          	bltu	a5,a4,80001170 <UART_init+0x104>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:54
        ( line_config <= MAX_LINE_CONFIG ) &&
800010ac:	fd645703          	lhu	a4,-42(s0)
800010b0:	000027b7          	lui	a5,0x2
800010b4:	0af77e63          	bleu	a5,a4,80001170 <UART_init+0x104>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:60
        ( baud_value <= MAX_BAUD_VALUE ) )
    {
        /*
         * Store lower 8-bits of baud value in CTRL1.
         */
        HAL_set_8bit_reg( base_addr, CTRL1, (uint_fast8_t)(baud_value &
800010b8:	fd842783          	lw	a5,-40(s0)
800010bc:	00878713          	addi	a4,a5,8 # 2008 <HEAP_SIZE-0xdff8>
800010c0:	fd645783          	lhu	a5,-42(s0)
800010c4:	0ff7f793          	andi	a5,a5,255
800010c8:	00078593          	mv	a1,a5
800010cc:	00070513          	mv	a0,a4
800010d0:	f55ff0ef          	jal	ra,80001024 <HW_set_8bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:67
    
        /*
         * Extract higher 5-bits of baud value and store in higher 5-bits 
         * of CTRL2, along with line configuration in lower 3 three bits.
         */
        HAL_set_8bit_reg( base_addr, CTRL2, (uint_fast8_t)line_config | 
800010d4:	fd842783          	lw	a5,-40(s0)
800010d8:	00c78693          	addi	a3,a5,12
800010dc:	fd544703          	lbu	a4,-43(s0)
800010e0:	fd645783          	lhu	a5,-42(s0)
800010e4:	4057d793          	srai	a5,a5,0x5
800010e8:	7f87f793          	andi	a5,a5,2040
800010ec:	00f767b3          	or	a5,a4,a5
800010f0:	00078593          	mv	a1,a5
800010f4:	00068513          	mv	a0,a3
800010f8:	f2dff0ef          	jal	ra,80001024 <HW_set_8bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:71
                                           (uint_fast8_t)((baud_value &
                                   BAUDVALUE_MSB) >> BAUDVALUE_SHIFT ) );
    
        this_uart->base_address = base_addr;
800010fc:	fdc42783          	lw	a5,-36(s0)
80001100:	fd842703          	lw	a4,-40(s0)
80001104:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:94
        
        /*
         * Flush the receive FIFO of data that may have been received before the
         * driver was initialized.
         */
        rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001108:	fdc42783          	lw	a5,-36(s0)
8000110c:	0007a783          	lw	a5,0(a5)
80001110:	01078793          	addi	a5,a5,16
80001114:	00078513          	mv	a0,a5
80001118:	f15ff0ef          	jal	ra,8000102c <HW_get_8bit_reg>
8000111c:	00050793          	mv	a5,a0
80001120:	0027f793          	andi	a5,a5,2
80001124:	fef407a3          	sb	a5,-17(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
                                                    STATUS_RXFULL_MASK;
        while ( rx_full )
80001128:	0380006f          	j	80001160 <UART_init+0xf4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:98
        {
            HAL_get_8bit_reg( this_uart->base_address, RXDATA );
8000112c:	fdc42783          	lw	a5,-36(s0)
80001130:	0007a783          	lw	a5,0(a5)
80001134:	00478793          	addi	a5,a5,4
80001138:	00078513          	mv	a0,a5
8000113c:	ef1ff0ef          	jal	ra,8000102c <HW_get_8bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:99
            rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001140:	fdc42783          	lw	a5,-36(s0)
80001144:	0007a783          	lw	a5,0(a5)
80001148:	01078793          	addi	a5,a5,16
8000114c:	00078513          	mv	a0,a5
80001150:	eddff0ef          	jal	ra,8000102c <HW_get_8bit_reg>
80001154:	00050793          	mv	a5,a0
80001158:	0027f793          	andi	a5,a5,2
8000115c:	fef407a3          	sb	a5,-17(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
        while ( rx_full )
80001160:	fef44783          	lbu	a5,-17(s0)
80001164:	fc0794e3          	bnez	a5,8000112c <UART_init+0xc0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:106
        }

        /*
         * Clear status of the UART instance.
         */
        this_uart->status = (uint8_t)0;
80001168:	fdc42783          	lw	a5,-36(s0)
8000116c:	00078223          	sb	zero,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:108
    }
}
80001170:	00000013          	nop
80001174:	02c12083          	lw	ra,44(sp)
80001178:	02812403          	lw	s0,40(sp)
8000117c:	03010113          	addi	sp,sp,48
80001180:	00008067          	ret

80001184 <UART_send>:
UART_send():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:121
(
    UART_instance_t * this_uart,
    const uint8_t * tx_buffer,
    size_t tx_size
)
{
80001184:	fd010113          	addi	sp,sp,-48
80001188:	02112623          	sw	ra,44(sp)
8000118c:	02812423          	sw	s0,40(sp)
80001190:	03010413          	addi	s0,sp,48
80001194:	fca42e23          	sw	a0,-36(s0)
80001198:	fcb42c23          	sw	a1,-40(s0)
8000119c:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( tx_buffer != NULL_BUFFER )
    HAL_ASSERT( tx_size > 0 )
      
    if( (this_uart != NULL_INSTANCE) &&
800011a0:	fdc42783          	lw	a5,-36(s0)
800011a4:	08078063          	beqz	a5,80001224 <UART_send+0xa0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129 (discriminator 1)
800011a8:	fd842783          	lw	a5,-40(s0)
800011ac:	06078c63          	beqz	a5,80001224 <UART_send+0xa0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:130
        (tx_buffer != NULL_BUFFER)   &&
800011b0:	fd442783          	lw	a5,-44(s0)
800011b4:	06078863          	beqz	a5,80001224 <UART_send+0xa0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133
        (tx_size > (size_t)0) )
    {
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
800011b8:	fe042623          	sw	zero,-20(s0)
800011bc:	05c0006f          	j	80001218 <UART_send+0x94>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:137 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
800011c0:	fdc42783          	lw	a5,-36(s0)
800011c4:	0007a783          	lw	a5,0(a5)
800011c8:	01078793          	addi	a5,a5,16
800011cc:	00078513          	mv	a0,a5
800011d0:	e5dff0ef          	jal	ra,8000102c <HW_get_8bit_reg>
800011d4:	00050793          	mv	a5,a0
800011d8:	0017f793          	andi	a5,a5,1
800011dc:	fef405a3          	sb	a5,-21(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:139 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
800011e0:	feb44783          	lbu	a5,-21(s0)
800011e4:	fc078ee3          	beqz	a5,800011c0 <UART_send+0x3c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:141 (discriminator 2)
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
800011e8:	fdc42783          	lw	a5,-36(s0)
800011ec:	0007a683          	lw	a3,0(a5)
800011f0:	fd842703          	lw	a4,-40(s0)
800011f4:	fec42783          	lw	a5,-20(s0)
800011f8:	00f707b3          	add	a5,a4,a5
800011fc:	0007c783          	lbu	a5,0(a5)
80001200:	00078593          	mv	a1,a5
80001204:	00068513          	mv	a0,a3
80001208:	e1dff0ef          	jal	ra,80001024 <HW_set_8bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 2)
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
8000120c:	fec42783          	lw	a5,-20(s0)
80001210:	00178793          	addi	a5,a5,1
80001214:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 1)
80001218:	fec42703          	lw	a4,-20(s0)
8000121c:	fd442783          	lw	a5,-44(s0)
80001220:	faf760e3          	bltu	a4,a5,800011c0 <UART_send+0x3c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:145
                              (uint_fast8_t)tx_buffer[char_idx] );
        }
    }
}
80001224:	00000013          	nop
80001228:	02c12083          	lw	ra,44(sp)
8000122c:	02812403          	lw	s0,40(sp)
80001230:	03010113          	addi	sp,sp,48
80001234:	00008067          	ret

80001238 <UART_polled_tx_string>:
UART_polled_tx_string():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:239
UART_polled_tx_string
( 
    UART_instance_t * this_uart, 
    const uint8_t * p_sz_string
)
{
80001238:	fd010113          	addi	sp,sp,-48
8000123c:	02112623          	sw	ra,44(sp)
80001240:	02812423          	sw	s0,40(sp)
80001244:	03010413          	addi	s0,sp,48
80001248:	fca42e23          	sw	a0,-36(s0)
8000124c:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246
    uint8_t tx_ready;

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( p_sz_string != NULL_BUFFER )
    
    if( ( this_uart != NULL_INSTANCE ) && ( p_sz_string != NULL_BUFFER ) )
80001250:	fdc42783          	lw	a5,-36(s0)
80001254:	08078063          	beqz	a5,800012d4 <UART_polled_tx_string+0x9c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246 (discriminator 1)
80001258:	fd842783          	lw	a5,-40(s0)
8000125c:	06078c63          	beqz	a5,800012d4 <UART_polled_tx_string+0x9c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:248
    {
        char_idx = 0U;
80001260:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
80001264:	05c0006f          	j	800012c0 <UART_polled_tx_string+0x88>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:253 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001268:	fdc42783          	lw	a5,-36(s0)
8000126c:	0007a783          	lw	a5,0(a5)
80001270:	01078793          	addi	a5,a5,16
80001274:	00078513          	mv	a0,a5
80001278:	db5ff0ef          	jal	ra,8000102c <HW_get_8bit_reg>
8000127c:	00050793          	mv	a5,a0
80001280:	0017f793          	andi	a5,a5,1
80001284:	fef405a3          	sb	a5,-21(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:255 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
80001288:	feb44783          	lbu	a5,-21(s0)
8000128c:	fc078ee3          	beqz	a5,80001268 <UART_polled_tx_string+0x30>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:257
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
80001290:	fdc42783          	lw	a5,-36(s0)
80001294:	0007a683          	lw	a3,0(a5)
80001298:	fd842703          	lw	a4,-40(s0)
8000129c:	fec42783          	lw	a5,-20(s0)
800012a0:	00f707b3          	add	a5,a4,a5
800012a4:	0007c783          	lbu	a5,0(a5)
800012a8:	00078593          	mv	a1,a5
800012ac:	00068513          	mv	a0,a3
800012b0:	d75ff0ef          	jal	ra,80001024 <HW_set_8bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:259
                              (uint_fast8_t)p_sz_string[char_idx] );
            char_idx++;
800012b4:	fec42783          	lw	a5,-20(s0)
800012b8:	00178793          	addi	a5,a5,1
800012bc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
800012c0:	fd842703          	lw	a4,-40(s0)
800012c4:	fec42783          	lw	a5,-20(s0)
800012c8:	00f707b3          	add	a5,a4,a5
800012cc:	0007c783          	lbu	a5,0(a5)
800012d0:	f8079ce3          	bnez	a5,80001268 <UART_polled_tx_string+0x30>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:262
        }
    }
}
800012d4:	00000013          	nop
800012d8:	02c12083          	lw	ra,44(sp)
800012dc:	02812403          	lw	s0,40(sp)
800012e0:	03010113          	addi	sp,sp,48
800012e4:	00008067          	ret

800012e8 <pvPortMalloc>:
pvPortMalloc():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:151
}
/*-----------------------------------------------------------*/


void *pvPortMalloc( size_t xWantedSize )
{
800012e8:	fc010113          	addi	sp,sp,-64
800012ec:	02112e23          	sw	ra,60(sp)
800012f0:	02812c23          	sw	s0,56(sp)
800012f4:	04010413          	addi	s0,sp,64
800012f8:	fca42623          	sw	a0,-52(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:154
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
800012fc:	fe042223          	sw	zero,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:156

	vTaskSuspendAll();
80001300:	22c010ef          	jal	ra,8000252c <vTaskSuspendAll>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:160
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
80001304:	9241a783          	lw	a5,-1756(gp) # 80008ed4 <xHeapHasBeenInitialised.2777>
80001308:	00079863          	bnez	a5,80001318 <pvPortMalloc+0x30>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:162
		{
			prvHeapInit();
8000130c:	284000ef          	jal	ra,80001590 <prvHeapInit>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:163
			xHeapHasBeenInitialised = pdTRUE;
80001310:	00100713          	li	a4,1
80001314:	92e1a223          	sw	a4,-1756(gp) # 80008ed4 <xHeapHasBeenInitialised.2777>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:168
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
80001318:	fcc42783          	lw	a5,-52(s0)
8000131c:	02078a63          	beqz	a5,80001350 <pvPortMalloc+0x68>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:170
		{
			xWantedSize += heapSTRUCT_SIZE;
80001320:	00800793          	li	a5,8
80001324:	00078713          	mv	a4,a5
80001328:	fcc42783          	lw	a5,-52(s0)
8000132c:	00e787b3          	add	a5,a5,a4
80001330:	fcf42623          	sw	a5,-52(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:173

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
80001334:	fcc42783          	lw	a5,-52(s0)
80001338:	0037f793          	andi	a5,a5,3
8000133c:	00078a63          	beqz	a5,80001350 <pvPortMalloc+0x68>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:176
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
80001340:	fcc42783          	lw	a5,-52(s0)
80001344:	ffc7f793          	andi	a5,a5,-4
80001348:	00478793          	addi	a5,a5,4
8000134c:	fcf42623          	sw	a5,-52(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
80001350:	fcc42783          	lw	a5,-52(s0)
80001354:	14078463          	beqz	a5,8000149c <pvPortMalloc+0x1b4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180 (discriminator 1)
80001358:	fcc42703          	lw	a4,-52(s0)
8000135c:	000197b7          	lui	a5,0x19
80001360:	ffb78793          	addi	a5,a5,-5 # 18ffb <HEAP_SIZE+0x8ffb>
80001364:	12e7ec63          	bltu	a5,a4,8000149c <pvPortMalloc+0x1b4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:184
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
80001368:	91418793          	addi	a5,gp,-1772 # 80008ec4 <xStart>
8000136c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:185
			pxBlock = xStart.pxNextFreeBlock;
80001370:	9141a783          	lw	a5,-1772(gp) # 80008ec4 <xStart>
80001374:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
80001378:	0180006f          	j	80001390 <pvPortMalloc+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:188
			{
				pxPreviousBlock = pxBlock;
8000137c:	fec42783          	lw	a5,-20(s0)
80001380:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:189
				pxBlock = pxBlock->pxNextFreeBlock;
80001384:	fec42783          	lw	a5,-20(s0)
80001388:	0007a783          	lw	a5,0(a5)
8000138c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
80001390:	fec42783          	lw	a5,-20(s0)
80001394:	0047a783          	lw	a5,4(a5)
80001398:	fcc42703          	lw	a4,-52(s0)
8000139c:	00e7f863          	bleu	a4,a5,800013ac <pvPortMalloc+0xc4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186 (discriminator 1)
800013a0:	fec42783          	lw	a5,-20(s0)
800013a4:	0007a783          	lw	a5,0(a5)
800013a8:	fc079ae3          	bnez	a5,8000137c <pvPortMalloc+0x94>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:193
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
800013ac:	fec42703          	lw	a4,-20(s0)
800013b0:	91c18793          	addi	a5,gp,-1764 # 80008ecc <xEnd>
800013b4:	0ef70463          	beq	a4,a5,8000149c <pvPortMalloc+0x1b4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:197
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
800013b8:	fe842783          	lw	a5,-24(s0)
800013bc:	0007a783          	lw	a5,0(a5)
800013c0:	00800713          	li	a4,8
800013c4:	00e787b3          	add	a5,a5,a4
800013c8:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:201

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
800013cc:	fec42783          	lw	a5,-20(s0)
800013d0:	0007a703          	lw	a4,0(a5)
800013d4:	fe842783          	lw	a5,-24(s0)
800013d8:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:204

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
800013dc:	fec42783          	lw	a5,-20(s0)
800013e0:	0047a703          	lw	a4,4(a5)
800013e4:	fcc42783          	lw	a5,-52(s0)
800013e8:	40f707b3          	sub	a5,a4,a5
800013ec:	00800713          	li	a4,8
800013f0:	00171713          	slli	a4,a4,0x1
800013f4:	08f77663          	bleu	a5,a4,80001480 <pvPortMalloc+0x198>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:209
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
800013f8:	fec42703          	lw	a4,-20(s0)
800013fc:	fcc42783          	lw	a5,-52(s0)
80001400:	00f707b3          	add	a5,a4,a5
80001404:	fcf42e23          	sw	a5,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:213

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
80001408:	fec42783          	lw	a5,-20(s0)
8000140c:	0047a703          	lw	a4,4(a5)
80001410:	fcc42783          	lw	a5,-52(s0)
80001414:	40f70733          	sub	a4,a4,a5
80001418:	fdc42783          	lw	a5,-36(s0)
8000141c:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:214
					pxBlock->xBlockSize = xWantedSize;
80001420:	fec42783          	lw	a5,-20(s0)
80001424:	fcc42703          	lw	a4,-52(s0)
80001428:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
8000142c:	fdc42783          	lw	a5,-36(s0)
80001430:	0047a783          	lw	a5,4(a5)
80001434:	fcf42c23          	sw	a5,-40(s0)
80001438:	91418793          	addi	a5,gp,-1772 # 80008ec4 <xStart>
8000143c:	fef42023          	sw	a5,-32(s0)
80001440:	0100006f          	j	80001450 <pvPortMalloc+0x168>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 3)
80001444:	fe042783          	lw	a5,-32(s0)
80001448:	0007a783          	lw	a5,0(a5)
8000144c:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 1)
80001450:	fe042783          	lw	a5,-32(s0)
80001454:	0007a783          	lw	a5,0(a5)
80001458:	0047a783          	lw	a5,4(a5)
8000145c:	fd842703          	lw	a4,-40(s0)
80001460:	fee7e2e3          	bltu	a5,a4,80001444 <pvPortMalloc+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 4)
80001464:	fe042783          	lw	a5,-32(s0)
80001468:	0007a703          	lw	a4,0(a5)
8000146c:	fdc42783          	lw	a5,-36(s0)
80001470:	00e7a023          	sw	a4,0(a5)
80001474:	fe042783          	lw	a5,-32(s0)
80001478:	fdc42703          	lw	a4,-36(s0)
8000147c:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:220
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
80001480:	800097b7          	lui	a5,0x80009
80001484:	db07a703          	lw	a4,-592(a5) # 80008db0 <__stack_top+0xfffc2640>
80001488:	fec42783          	lw	a5,-20(s0)
8000148c:	0047a783          	lw	a5,4(a5)
80001490:	40f70733          	sub	a4,a4,a5
80001494:	800097b7          	lui	a5,0x80009
80001498:	dae7a823          	sw	a4,-592(a5) # 80008db0 <__stack_top+0xfffc2640>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:226
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
8000149c:	0b8010ef          	jal	ra,80002554 <xTaskResumeAll>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:230

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
800014a0:	fe442783          	lw	a5,-28(s0)
800014a4:	00079463          	bnez	a5,800014ac <pvPortMalloc+0x1c4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:233
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
800014a8:	45d060ef          	jal	ra,80008104 <vApplicationMallocFailedHook>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:238
		}
	}
	#endif

	return pvReturn;
800014ac:	fe442783          	lw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:239
}
800014b0:	00078513          	mv	a0,a5
800014b4:	03c12083          	lw	ra,60(sp)
800014b8:	03812403          	lw	s0,56(sp)
800014bc:	04010113          	addi	sp,sp,64
800014c0:	00008067          	ret

800014c4 <vPortFree>:
vPortFree():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:243
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
800014c4:	fd010113          	addi	sp,sp,-48
800014c8:	02112623          	sw	ra,44(sp)
800014cc:	02812423          	sw	s0,40(sp)
800014d0:	03010413          	addi	s0,sp,48
800014d4:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:244
uint8_t *puc = ( uint8_t * ) pv;
800014d8:	fdc42783          	lw	a5,-36(s0)
800014dc:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:247
BlockLink_t *pxLink;

	if( pv != NULL )
800014e0:	fdc42783          	lw	a5,-36(s0)
800014e4:	08078c63          	beqz	a5,8000157c <vPortFree+0xb8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:251
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
800014e8:	00800793          	li	a5,8
800014ec:	40f007b3          	neg	a5,a5
800014f0:	fe842703          	lw	a4,-24(s0)
800014f4:	00f707b3          	add	a5,a4,a5
800014f8:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:255

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
800014fc:	fe842783          	lw	a5,-24(s0)
80001500:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:257

		vTaskSuspendAll();
80001504:	028010ef          	jal	ra,8000252c <vTaskSuspendAll>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
80001508:	fe442783          	lw	a5,-28(s0)
8000150c:	0047a783          	lw	a5,4(a5)
80001510:	fef42023          	sw	a5,-32(s0)
80001514:	91418793          	addi	a5,gp,-1772 # 80008ec4 <xStart>
80001518:	fef42623          	sw	a5,-20(s0)
8000151c:	0100006f          	j	8000152c <vPortFree+0x68>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 3)
80001520:	fec42783          	lw	a5,-20(s0)
80001524:	0007a783          	lw	a5,0(a5)
80001528:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 1)
8000152c:	fec42783          	lw	a5,-20(s0)
80001530:	0007a783          	lw	a5,0(a5)
80001534:	0047a783          	lw	a5,4(a5)
80001538:	fe042703          	lw	a4,-32(s0)
8000153c:	fee7e2e3          	bltu	a5,a4,80001520 <vPortFree+0x5c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 4)
80001540:	fec42783          	lw	a5,-20(s0)
80001544:	0007a703          	lw	a4,0(a5)
80001548:	fe442783          	lw	a5,-28(s0)
8000154c:	00e7a023          	sw	a4,0(a5)
80001550:	fec42783          	lw	a5,-20(s0)
80001554:	fe442703          	lw	a4,-28(s0)
80001558:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:261 (discriminator 4)
			xFreeBytesRemaining += pxLink->xBlockSize;
8000155c:	fe442783          	lw	a5,-28(s0)
80001560:	0047a703          	lw	a4,4(a5)
80001564:	800097b7          	lui	a5,0x80009
80001568:	db07a783          	lw	a5,-592(a5) # 80008db0 <__stack_top+0xfffc2640>
8000156c:	00f70733          	add	a4,a4,a5
80001570:	800097b7          	lui	a5,0x80009
80001574:	dae7a823          	sw	a4,-592(a5) # 80008db0 <__stack_top+0xfffc2640>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:264 (discriminator 4)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
80001578:	7dd000ef          	jal	ra,80002554 <xTaskResumeAll>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:266
	}
}
8000157c:	00000013          	nop
80001580:	02c12083          	lw	ra,44(sp)
80001584:	02812403          	lw	s0,40(sp)
80001588:	03010113          	addi	sp,sp,48
8000158c:	00008067          	ret

80001590 <prvHeapInit>:
prvHeapInit():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:282
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
80001590:	fe010113          	addi	sp,sp,-32
80001594:	00812e23          	sw	s0,28(sp)
80001598:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:287
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
8000159c:	800097b7          	lui	a5,0x80009
800015a0:	f5478793          	addi	a5,a5,-172 # 80008f54 <__stack_top+0xfffc27e4>
800015a4:	ffc7f793          	andi	a5,a5,-4
800015a8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:291

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
800015ac:	fec42703          	lw	a4,-20(s0)
800015b0:	90e1aa23          	sw	a4,-1772(gp) # 80008ec4 <xStart>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:292
	xStart.xBlockSize = ( size_t ) 0;
800015b4:	91418793          	addi	a5,gp,-1772 # 80008ec4 <xStart>
800015b8:	0007a223          	sw	zero,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:295

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
800015bc:	91c18793          	addi	a5,gp,-1764 # 80008ecc <xEnd>
800015c0:	00019737          	lui	a4,0x19
800015c4:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
800015c8:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:296
	xEnd.pxNextFreeBlock = NULL;
800015cc:	9001ae23          	sw	zero,-1764(gp) # 80008ecc <xEnd>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:300

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
800015d0:	fec42783          	lw	a5,-20(s0)
800015d4:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:301
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
800015d8:	fe842783          	lw	a5,-24(s0)
800015dc:	00019737          	lui	a4,0x19
800015e0:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
800015e4:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:302
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
800015e8:	fe842783          	lw	a5,-24(s0)
800015ec:	91c18713          	addi	a4,gp,-1764 # 80008ecc <xEnd>
800015f0:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:303
}
800015f4:	00000013          	nop
800015f8:	01c12403          	lw	s0,28(sp)
800015fc:	02010113          	addi	sp,sp,32
80001600:	00008067          	ret

80001604 <raise_soft_interrupt>:
raise_soft_interrupt():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:227
/*==============================================================================
 * The function raise_soft_interrupt() raises a synchronous software interrupt by
 * writing into the MSIP register.
 */
static inline void raise_soft_interrupt()
{
80001604:	fe010113          	addi	sp,sp,-32
80001608:	00812e23          	sw	s0,28(sp)
8000160c:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:228
    unsigned long hart_id = read_csr(mhartid);
80001610:	f14027f3          	csrr	a5,mhartid
80001614:	fef42623          	sw	a5,-20(s0)
80001618:	fec42783          	lw	a5,-20(s0)
8000161c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:231

    /*You need to make sure that the global interrupt is enabled*/
    set_csr(mie, MIP_MSIP);       /*Enable software interrupt bit */
80001620:	304467f3          	csrrsi	a5,mie,8
80001624:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:232
    PRCI->MSIP[hart_id] = 0x01;   /*raise soft interrupt for hart0*/
80001628:	44000737          	lui	a4,0x44000
8000162c:	fe842783          	lw	a5,-24(s0)
80001630:	00279793          	slli	a5,a5,0x2
80001634:	00f707b3          	add	a5,a4,a5
80001638:	00100713          	li	a4,1
8000163c:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:233
}
80001640:	00000013          	nop
80001644:	01c12403          	lw	s0,28(sp)
80001648:	02010113          	addi	sp,sp,32
8000164c:	00008067          	ret

80001650 <vPortEnterCritical>:
vPortEnterCritical():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:132
 * Used to catch tasks that attempt to return from their implementing function.
 */
static void prvTaskExitError( void );

void vPortEnterCritical( void )
{
80001650:	ff010113          	addi	sp,sp,-16
80001654:	00812623          	sw	s0,12(sp)
80001658:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:133
	portDISABLE_INTERRUPTS();
8000165c:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:134
	uxCriticalNesting++;
80001660:	800097b7          	lui	a5,0x80009
80001664:	db47a783          	lw	a5,-588(a5) # 80008db4 <__stack_top+0xfffc2644>
80001668:	00178713          	addi	a4,a5,1
8000166c:	800097b7          	lui	a5,0x80009
80001670:	dae7aa23          	sw	a4,-588(a5) # 80008db4 <__stack_top+0xfffc2644>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:135
}
80001674:	00000013          	nop
80001678:	00c12403          	lw	s0,12(sp)
8000167c:	01010113          	addi	sp,sp,16
80001680:	00008067          	ret

80001684 <vPortExitCritical>:
vPortExitCritical():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:139
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
80001684:	ff010113          	addi	sp,sp,-16
80001688:	00812623          	sw	s0,12(sp)
8000168c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:140
	uxCriticalNesting--;
80001690:	800097b7          	lui	a5,0x80009
80001694:	db47a783          	lw	a5,-588(a5) # 80008db4 <__stack_top+0xfffc2644>
80001698:	fff78713          	addi	a4,a5,-1
8000169c:	800097b7          	lui	a5,0x80009
800016a0:	dae7aa23          	sw	a4,-588(a5) # 80008db4 <__stack_top+0xfffc2644>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:141
	if( uxCriticalNesting == 0 )
800016a4:	800097b7          	lui	a5,0x80009
800016a8:	db47a783          	lw	a5,-588(a5) # 80008db4 <__stack_top+0xfffc2644>
800016ac:	00079463          	bnez	a5,800016b4 <vPortExitCritical+0x30>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:143
	{
		portENABLE_INTERRUPTS();
800016b0:	30046073          	csrsi	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:145
	}
}
800016b4:	00000013          	nop
800016b8:	00c12403          	lw	s0,12(sp)
800016bc:	01010113          	addi	sp,sp,16
800016c0:	00008067          	ret

800016c4 <prvSetNextTimerInterrupt>:
prvSetNextTimerInterrupt():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:151
/*-----------------------------------------------------------*/

/* Sets the next timer interrupt
 * Reads previous timer compare register, and adds tickrate */
static void prvSetNextTimerInterrupt(void)
{
800016c4:	fe010113          	addi	sp,sp,-32
800016c8:	00812e23          	sw	s0,28(sp)
800016cc:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:154
	uint64_t time;

	time = mtime->val_low;
800016d0:	80009637          	lui	a2,0x80009
800016d4:	db862603          	lw	a2,-584(a2) # 80008db8 <__stack_top+0xfffc2648>
800016d8:	00062603          	lw	a2,0(a2)
800016dc:	fec42423          	sw	a2,-24(s0)
800016e0:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:155
	time |= ((uint64_t)mtime->val_high << 32);
800016e4:	80009637          	lui	a2,0x80009
800016e8:	db862603          	lw	a2,-584(a2) # 80008db8 <__stack_top+0xfffc2648>
800016ec:	00462603          	lw	a2,4(a2)
800016f0:	00060693          	mv	a3,a2
800016f4:	00000713          	li	a4,0
800016f8:	00069813          	slli	a6,a3,0x0
800016fc:	00000793          	li	a5,0
80001700:	fe842703          	lw	a4,-24(s0)
80001704:	00f76733          	or	a4,a4,a5
80001708:	fee42423          	sw	a4,-24(s0)
8000170c:	fec42703          	lw	a4,-20(s0)
80001710:	010767b3          	or	a5,a4,a6
80001714:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:157

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
80001718:	fe842683          	lw	a3,-24(s0)
8000171c:	fec42703          	lw	a4,-20(s0)
80001720:	000185b7          	lui	a1,0x18
80001724:	6a058593          	addi	a1,a1,1696 # 186a0 <HEAP_SIZE+0x86a0>
80001728:	00000613          	li	a2,0
8000172c:	00b687b3          	add	a5,a3,a1
80001730:	00078513          	mv	a0,a5
80001734:	00d53533          	sltu	a0,a0,a3
80001738:	00c70833          	add	a6,a4,a2
8000173c:	01050733          	add	a4,a0,a6
80001740:	00070813          	mv	a6,a4
80001744:	fef42423          	sw	a5,-24(s0)
80001748:	ff042623          	sw	a6,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:159

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
8000174c:	800097b7          	lui	a5,0x80009
80001750:	dbc7a783          	lw	a5,-580(a5) # 80008dbc <__stack_top+0xfffc264c>
80001754:	fe842703          	lw	a4,-24(s0)
80001758:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:160
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
8000175c:	fec42783          	lw	a5,-20(s0)
80001760:	0007d313          	srli	t1,a5,0x0
80001764:	00000393          	li	t2,0
80001768:	800097b7          	lui	a5,0x80009
8000176c:	dbc7a783          	lw	a5,-580(a5) # 80008dbc <__stack_top+0xfffc264c>
80001770:	00030713          	mv	a4,t1
80001774:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:163

	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
80001778:	08000793          	li	a5,128
8000177c:	3047a073          	csrs	mie,a5
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:164
}
80001780:	00000013          	nop
80001784:	01c12403          	lw	s0,28(sp)
80001788:	02010113          	addi	sp,sp,32
8000178c:	00008067          	ret

80001790 <vPortSetupTimer>:
vPortSetupTimer():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:169
/*-----------------------------------------------------------*/

/* Sets and enable the timer interrupt */
void vPortSetupTimer(void)
{
80001790:	fe010113          	addi	sp,sp,-32
80001794:	00812e23          	sw	s0,28(sp)
80001798:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:172
	uint64_t time;

	time = mtime->val_low;
8000179c:	80009637          	lui	a2,0x80009
800017a0:	db862603          	lw	a2,-584(a2) # 80008db8 <__stack_top+0xfffc2648>
800017a4:	00062603          	lw	a2,0(a2)
800017a8:	fec42423          	sw	a2,-24(s0)
800017ac:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:173
	time |= ((uint64_t)mtime->val_high << 32);
800017b0:	80009637          	lui	a2,0x80009
800017b4:	db862603          	lw	a2,-584(a2) # 80008db8 <__stack_top+0xfffc2648>
800017b8:	00462603          	lw	a2,4(a2)
800017bc:	00060693          	mv	a3,a2
800017c0:	00000713          	li	a4,0
800017c4:	00069813          	slli	a6,a3,0x0
800017c8:	00000793          	li	a5,0
800017cc:	fe842703          	lw	a4,-24(s0)
800017d0:	00f76733          	or	a4,a4,a5
800017d4:	fee42423          	sw	a4,-24(s0)
800017d8:	fec42703          	lw	a4,-20(s0)
800017dc:	010767b3          	or	a5,a4,a6
800017e0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:175

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
800017e4:	fe842683          	lw	a3,-24(s0)
800017e8:	fec42703          	lw	a4,-20(s0)
800017ec:	000185b7          	lui	a1,0x18
800017f0:	6a058593          	addi	a1,a1,1696 # 186a0 <HEAP_SIZE+0x86a0>
800017f4:	00000613          	li	a2,0
800017f8:	00b687b3          	add	a5,a3,a1
800017fc:	00078513          	mv	a0,a5
80001800:	00d53533          	sltu	a0,a0,a3
80001804:	00c70833          	add	a6,a4,a2
80001808:	01050733          	add	a4,a0,a6
8000180c:	00070813          	mv	a6,a4
80001810:	fef42423          	sw	a5,-24(s0)
80001814:	ff042623          	sw	a6,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:177

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
80001818:	800097b7          	lui	a5,0x80009
8000181c:	dbc7a783          	lw	a5,-580(a5) # 80008dbc <__stack_top+0xfffc264c>
80001820:	fe842703          	lw	a4,-24(s0)
80001824:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:178
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
80001828:	fec42783          	lw	a5,-20(s0)
8000182c:	0007d313          	srli	t1,a5,0x0
80001830:	00000393          	li	t2,0
80001834:	800097b7          	lui	a5,0x80009
80001838:	dbc7a783          	lw	a5,-580(a5) # 80008dbc <__stack_top+0xfffc264c>
8000183c:	00030713          	mv	a4,t1
80001840:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:182


	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
80001844:	08000793          	li	a5,128
80001848:	3047a073          	csrs	mie,a5
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:183
}
8000184c:	00000013          	nop
80001850:	01c12403          	lw	s0,28(sp)
80001854:	02010113          	addi	sp,sp,32
80001858:	00008067          	ret

8000185c <prvTaskExitError>:
prvTaskExitError():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:187
/*-----------------------------------------------------------*/

void prvTaskExitError( void )
{
8000185c:	ff010113          	addi	sp,sp,-16
80001860:	00812623          	sw	s0,12(sp)
80001864:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
80001868:	800097b7          	lui	a5,0x80009
8000186c:	db47a703          	lw	a4,-588(a5) # 80008db4 <__stack_top+0xfffc2644>
80001870:	fff00793          	li	a5,-1
80001874:	00f70663          	beq	a4,a5,80001880 <prvTaskExitError+0x24>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194 (discriminator 1)
80001878:	30047073          	csrci	mstatus,8
8000187c:	0000006f          	j	8000187c <prvTaskExitError+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:195
	portDISABLE_INTERRUPTS();
80001880:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:196 (discriminator 2)
	for( ;; );
80001884:	0000006f          	j	80001884 <prvTaskExitError+0x28>

80001888 <vPortClearInterruptMask>:
vPortClearInterruptMask():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:202
}
/*-----------------------------------------------------------*/

/* Clear current interrupt mask and set given mask */
void vPortClearInterruptMask(int mask)
{
80001888:	fe010113          	addi	sp,sp,-32
8000188c:	00812e23          	sw	s0,28(sp)
80001890:	02010413          	addi	s0,sp,32
80001894:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:203
	__asm volatile("csrw mie, %0"::"r"(mask));
80001898:	fec42783          	lw	a5,-20(s0)
8000189c:	30479073          	csrw	mie,a5
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:204
}
800018a0:	00000013          	nop
800018a4:	01c12403          	lw	s0,28(sp)
800018a8:	02010113          	addi	sp,sp,32
800018ac:	00008067          	ret

800018b0 <vPortSetInterruptMask>:
vPortSetInterruptMask():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:209
/*-----------------------------------------------------------*/

/* Set interrupt mask and return current interrupt enable register */
int vPortSetInterruptMask(void)
{
800018b0:	fe010113          	addi	sp,sp,-32
800018b4:	00812e23          	sw	s0,28(sp)
800018b8:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:211
	int ret;
	__asm volatile("csrr %0,mie":"=r"(ret));
800018bc:	304027f3          	csrr	a5,mie
800018c0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:212
	__asm volatile("csrc mie,%0"::"i"(7));
800018c4:	3043f073          	csrci	mie,7
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:213
	return ret;
800018c8:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:214
}
800018cc:	00078513          	mv	a0,a5
800018d0:	01c12403          	lw	s0,28(sp)
800018d4:	02010113          	addi	sp,sp,32
800018d8:	00008067          	ret

800018dc <pxPortInitialiseStack>:
pxPortInitialiseStack():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:220

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
800018dc:	fe010113          	addi	sp,sp,-32
800018e0:	00812e23          	sw	s0,28(sp)
800018e4:	02010413          	addi	s0,sp,32
800018e8:	fea42623          	sw	a0,-20(s0)
800018ec:	feb42423          	sw	a1,-24(s0)
800018f0:	fec42223          	sw	a2,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:224
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	register int *tp asm("x3");
	pxTopOfStack--;
800018f4:	fec42783          	lw	a5,-20(s0)
800018f8:	ffc78793          	addi	a5,a5,-4
800018fc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:225
	*pxTopOfStack = (portSTACK_TYPE)pxCode;			/* Start address */
80001900:	fe842703          	lw	a4,-24(s0)
80001904:	fec42783          	lw	a5,-20(s0)
80001908:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:226
	pxTopOfStack -= 22;
8000190c:	fec42783          	lw	a5,-20(s0)
80001910:	fa878793          	addi	a5,a5,-88
80001914:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:227
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;	/* Register a0 */
80001918:	fe442703          	lw	a4,-28(s0)
8000191c:	fec42783          	lw	a5,-20(s0)
80001920:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:228
	pxTopOfStack -= 6;
80001924:	fec42783          	lw	a5,-20(s0)
80001928:	fe878793          	addi	a5,a5,-24
8000192c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:229
	*pxTopOfStack = (portSTACK_TYPE)tp; /* Register thread pointer */
80001930:	00018793          	mv	a5,gp
80001934:	00078713          	mv	a4,a5
80001938:	fec42783          	lw	a5,-20(s0)
8000193c:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:230
	pxTopOfStack -= 3;
80001940:	fec42783          	lw	a5,-20(s0)
80001944:	ff478793          	addi	a5,a5,-12
80001948:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:231
	*pxTopOfStack = (portSTACK_TYPE)prvTaskExitError; /* Register ra */
8000194c:	800027b7          	lui	a5,0x80002
80001950:	85c78713          	addi	a4,a5,-1956 # 8000185c <__stack_top+0xfffbb0ec>
80001954:	fec42783          	lw	a5,-20(s0)
80001958:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:233

	return pxTopOfStack;
8000195c:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:234
}
80001960:	00078513          	mv	a0,a5
80001964:	01c12403          	lw	s0,28(sp)
80001968:	02010113          	addi	sp,sp,32
8000196c:	00008067          	ret

80001970 <SysTick_Handler>:
SysTick_Handler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:238
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void )
{
80001970:	ff010113          	addi	sp,sp,-16
80001974:	00112623          	sw	ra,12(sp)
80001978:	00812423          	sw	s0,8(sp)
8000197c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:241
	/*Save Context*/
	{
		__asm volatile("lw	t0, pxCurrentTCB");
80001980:	92c1a283          	lw	t0,-1748(gp) # 80008edc <pxCurrentTCB>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:242
		__asm volatile("sw	a2, 0x0(t0)");
80001984:	00c2a023          	sw	a2,0(t0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:246
	}

	/* Increment the RTOS tick. */
	prvSetNextTimerInterrupt();
80001988:	d3dff0ef          	jal	ra,800016c4 <prvSetNextTimerInterrupt>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:249

	/*Switch task */
	if( xTaskIncrementTick() != pdFALSE )
8000198c:	561000ef          	jal	ra,800026ec <xTaskIncrementTick>
80001990:	00050793          	mv	a5,a0
80001994:	00078463          	beqz	a5,8000199c <SysTick_Handler+0x2c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:251
	{
		vTaskSwitchContext();
80001998:	741000ef          	jal	ra,800028d8 <vTaskSwitchContext>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:256
	}

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
8000199c:	92c1a103          	lw	sp,-1748(gp) # 80008edc <pxCurrentTCB>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:257
		__asm volatile("lw	sp, 0x0(sp)");
800019a0:	00012103          	lw	sp,0(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:259

		__asm volatile("lw	t0, 31 * 4(sp)");
800019a4:	07c12283          	lw	t0,124(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:260
		__asm volatile("csrw	mepc, t0");
800019a8:	34129073          	csrw	mepc,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:263

		// Added by Iaçanã
		__asm volatile("lui	t0, 0x2");
800019ac:	000022b7          	lui	t0,0x2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:264
  		__asm volatile("addi t0,t0,-2048");
800019b0:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:265
		__asm volatile("csrs mstatus,t0");
800019b4:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:267

		__asm volatile("lw	t0, 32 * 4(sp)");
800019b8:	08012283          	lw	t0,128(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:268
		__asm volatile("slli t0, t0, 0x4");
800019bc:	00429293          	slli	t0,t0,0x4
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:269
		__asm volatile("csrs mstatus, t0");
800019c0:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:271

		__asm volatile("lw	x1, 0x0(sp)");
800019c4:	00012083          	lw	ra,0(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:272
		__asm volatile("lw   x4, 3 * 4(sp)");
800019c8:	00c12203          	lw	tp,12(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:273
		__asm volatile("lw   x5, 4 * 4(sp)");
800019cc:	01012283          	lw	t0,16(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:274
		__asm volatile("lw   x6, 5 * 4(sp)");
800019d0:	01412303          	lw	t1,20(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:275
		__asm volatile("lw   x7, 6 * 4(sp)");
800019d4:	01812383          	lw	t2,24(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:276
		__asm volatile("lw   x8, 7 * 4(sp)");
800019d8:	01c12403          	lw	s0,28(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:277
		__asm volatile("lw   x9, 8 * 4(sp)");
800019dc:	02012483          	lw	s1,32(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:278
		__asm volatile("lw   x10, 9 * 4(sp)");
800019e0:	02412503          	lw	a0,36(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:279
		__asm volatile("lw   x11, 10 * 4(sp)");
800019e4:	02812583          	lw	a1,40(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:280
		__asm volatile("lw   x12, 11 * 4(sp)");
800019e8:	02c12603          	lw	a2,44(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:281
		__asm volatile("lw   x13, 12 * 4(sp)");
800019ec:	03012683          	lw	a3,48(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:282
		__asm volatile("lw   x14, 13 * 4(sp)");
800019f0:	03412703          	lw	a4,52(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:283
		__asm volatile("lw   x15, 14 * 4(sp)");
800019f4:	03812783          	lw	a5,56(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:284
		__asm volatile("lw   x16, 15 * 4(sp)");
800019f8:	03c12803          	lw	a6,60(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:285
		__asm volatile("lw   x17, 16 * 4(sp)");
800019fc:	04012883          	lw	a7,64(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:286
		__asm volatile("lw   x18, 17 * 4(sp)");
80001a00:	04412903          	lw	s2,68(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:287
		__asm volatile("lw   x19, 18 * 4(sp)");
80001a04:	04812983          	lw	s3,72(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:288
		__asm volatile("lw   x20, 19 * 4(sp)");
80001a08:	04c12a03          	lw	s4,76(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:289
		__asm volatile("lw   x21, 20 * 4(sp)");
80001a0c:	05012a83          	lw	s5,80(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:290
		__asm volatile("lw   x22, 21 * 4(sp)");
80001a10:	05412b03          	lw	s6,84(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:291
		__asm volatile("lw   x23, 22 * 4(sp)");
80001a14:	05812b83          	lw	s7,88(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:292
		__asm volatile("lw   x24, 23 * 4(sp)");
80001a18:	05c12c03          	lw	s8,92(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:293
		__asm volatile("lw   x25, 24 * 4(sp)");
80001a1c:	06012c83          	lw	s9,96(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:294
		__asm volatile("lw   x26, 25 * 4(sp)");
80001a20:	06412d03          	lw	s10,100(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:295
		__asm volatile("lw   x27, 26 * 4(sp)");
80001a24:	06812d83          	lw	s11,104(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:296
		__asm volatile("lw   x28, 27 * 4(sp)");
80001a28:	06c12e03          	lw	t3,108(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:297
		__asm volatile("lw   x29, 28 * 4(sp)");
80001a2c:	07012e83          	lw	t4,112(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:298
		__asm volatile("lw   x30, 29 * 4(sp)");
80001a30:	07412f03          	lw	t5,116(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:299
		__asm volatile("lw   x31, 30 * 4(sp)");
80001a34:	07812f83          	lw	t6,120(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:301

		__asm volatile("addi	sp, sp, 4 * 33");
80001a38:	08410113          	addi	sp,sp,132
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:303

		__asm volatile("mret");
80001a3c:	30200073          	mret
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:305
	}
}
80001a40:	00000013          	nop
80001a44:	00c12083          	lw	ra,12(sp)
80001a48:	00812403          	lw	s0,8(sp)
80001a4c:	01010113          	addi	sp,sp,16
80001a50:	00008067          	ret

80001a54 <xPortStartScheduler>:
xPortStartScheduler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:308
uint32_t g_startscheduler = 0;
BaseType_t xPortStartScheduler( void )
{
80001a54:	ff010113          	addi	sp,sp,-16
80001a58:	00112623          	sw	ra,12(sp)
80001a5c:	00812423          	sw	s0,8(sp)
80001a60:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:309
	vPortSetupTimer();
80001a64:	d2dff0ef          	jal	ra,80001790 <vPortSetupTimer>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:310
	uxCriticalNesting = 0;
80001a68:	800097b7          	lui	a5,0x80009
80001a6c:	da07aa23          	sw	zero,-588(a5) # 80008db4 <__stack_top+0xfffc2644>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:311
	g_startscheduler = 1;
80001a70:	00100713          	li	a4,1
80001a74:	92e1a423          	sw	a4,-1752(gp) # 80008ed8 <g_startscheduler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:312
	__enable_irq();
80001a78:	929fe0ef          	jal	ra,800003a0 <__enable_irq>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:314

	raise_soft_interrupt();
80001a7c:	b89ff0ef          	jal	ra,80001604 <raise_soft_interrupt>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:317

	/*Should not get here*/
	return pdFALSE;
80001a80:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:318
}
80001a84:	00078513          	mv	a0,a5
80001a88:	00c12083          	lw	ra,12(sp)
80001a8c:	00812403          	lw	s0,8(sp)
80001a90:	01010113          	addi	sp,sp,16
80001a94:	00008067          	ret

80001a98 <Software_IRQHandler>:
Software_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:321

void Software_IRQHandler(void)
{
80001a98:	ff010113          	addi	sp,sp,-16
80001a9c:	00112623          	sw	ra,12(sp)
80001aa0:	00812423          	sw	s0,8(sp)
80001aa4:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:322
	if(1 == g_startscheduler)
80001aa8:	9281a703          	lw	a4,-1752(gp) # 80008ed8 <g_startscheduler>
80001aac:	00100793          	li	a5,1
80001ab0:	00f71863          	bne	a4,a5,80001ac0 <Software_IRQHandler+0x28>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:324
	{
		g_startscheduler = 2; //skip the save n switch context first time when scheduler is starting.
80001ab4:	00200713          	li	a4,2
80001ab8:	92e1a423          	sw	a4,-1752(gp) # 80008ed8 <g_startscheduler>
80001abc:	0100006f          	j	80001acc <Software_IRQHandler+0x34>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:330
	}
	else
	{
		/*Save Context*/
		{
			__asm volatile("lw	t0, pxCurrentTCB");
80001ac0:	92c1a283          	lw	t0,-1748(gp) # 80008edc <pxCurrentTCB>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:331
			__asm volatile("sw	a2, 0x0(t0)");
80001ac4:	00c2a023          	sw	a2,0(t0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:334
		}

		vTaskSwitchContext();
80001ac8:	611000ef          	jal	ra,800028d8 <vTaskSwitchContext>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:338
	}

	// Moved by Imperas (was previously causing corruption of a5)
	PRCI->MSIP[0] = 0x00;
80001acc:	440007b7          	lui	a5,0x44000
80001ad0:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:342

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
80001ad4:	92c1a103          	lw	sp,-1748(gp) # 80008edc <pxCurrentTCB>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:343
		__asm volatile("lw	sp, 0x0(sp)");
80001ad8:	00012103          	lw	sp,0(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:345

		__asm volatile("lw	t0, 31 * 4(sp)");
80001adc:	07c12283          	lw	t0,124(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:346
		__asm volatile("csrw	mepc, t0");
80001ae0:	34129073          	csrw	mepc,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:349

		// Added by Iaçanã
		__asm volatile("lui	t0, 0x2");
80001ae4:	000022b7          	lui	t0,0x2
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:350
  		__asm volatile("addi t0,t0,-2048");
80001ae8:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:351
		__asm volatile("csrs mstatus,t0");
80001aec:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:353

		__asm volatile("lw	t0, 32 * 4(sp)");
80001af0:	08012283          	lw	t0,128(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:354
		__asm volatile("slli t0, t0, 0x4");
80001af4:	00429293          	slli	t0,t0,0x4
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:355
		__asm volatile("csrs mstatus, t0");
80001af8:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:357

		__asm volatile("lw	x1, 0x0(sp)");
80001afc:	00012083          	lw	ra,0(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:358
		__asm volatile("lw   x4, 3 * 4(sp)");
80001b00:	00c12203          	lw	tp,12(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:359
		__asm volatile("lw   x5, 4 * 4(sp)");
80001b04:	01012283          	lw	t0,16(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:360
		__asm volatile("lw   x6, 5 * 4(sp)");
80001b08:	01412303          	lw	t1,20(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:361
		__asm volatile("lw   x7, 6 * 4(sp)");
80001b0c:	01812383          	lw	t2,24(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:362
		__asm volatile("lw   x8, 7 * 4(sp)");
80001b10:	01c12403          	lw	s0,28(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:363
		__asm volatile("lw   x9, 8 * 4(sp)");
80001b14:	02012483          	lw	s1,32(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:364
		__asm volatile("lw   x10, 9 * 4(sp)");
80001b18:	02412503          	lw	a0,36(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:365
		__asm volatile("lw   x11, 10 * 4(sp)");
80001b1c:	02812583          	lw	a1,40(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:366
		__asm volatile("lw   x12, 11 * 4(sp)");
80001b20:	02c12603          	lw	a2,44(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:367
		__asm volatile("lw   x13, 12 * 4(sp)");
80001b24:	03012683          	lw	a3,48(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:368
		__asm volatile("lw   x14, 13 * 4(sp)");
80001b28:	03412703          	lw	a4,52(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:369
		__asm volatile("lw   x15, 14 * 4(sp)");
80001b2c:	03812783          	lw	a5,56(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:370
		__asm volatile("lw   x16, 15 * 4(sp)");
80001b30:	03c12803          	lw	a6,60(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:371
		__asm volatile("lw   x17, 16 * 4(sp)");
80001b34:	04012883          	lw	a7,64(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:372
		__asm volatile("lw   x18, 17 * 4(sp)");
80001b38:	04412903          	lw	s2,68(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:373
		__asm volatile("lw   x19, 18 * 4(sp)");
80001b3c:	04812983          	lw	s3,72(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:374
		__asm volatile("lw   x20, 19 * 4(sp)");
80001b40:	04c12a03          	lw	s4,76(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:375
		__asm volatile("lw   x21, 20 * 4(sp)");
80001b44:	05012a83          	lw	s5,80(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:376
		__asm volatile("lw   x22, 21 * 4(sp)");
80001b48:	05412b03          	lw	s6,84(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:377
		__asm volatile("lw   x23, 22 * 4(sp)");
80001b4c:	05812b83          	lw	s7,88(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:378
		__asm volatile("lw   x24, 23 * 4(sp)");
80001b50:	05c12c03          	lw	s8,92(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:379
		__asm volatile("lw   x25, 24 * 4(sp)");
80001b54:	06012c83          	lw	s9,96(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:380
		__asm volatile("lw   x26, 25 * 4(sp)");
80001b58:	06412d03          	lw	s10,100(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:381
		__asm volatile("lw   x27, 26 * 4(sp)");
80001b5c:	06812d83          	lw	s11,104(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:382
		__asm volatile("lw   x28, 27 * 4(sp)");
80001b60:	06c12e03          	lw	t3,108(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:383
		__asm volatile("lw   x29, 28 * 4(sp)");
80001b64:	07012e83          	lw	t4,112(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:384
		__asm volatile("lw   x30, 29 * 4(sp)");
80001b68:	07412f03          	lw	t5,116(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:385
		__asm volatile("lw   x31, 30 * 4(sp)");
80001b6c:	07812f83          	lw	t6,120(sp)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:387

		__asm volatile("addi	sp, sp, 4 * 33");
80001b70:	08410113          	addi	sp,sp,132
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:392

	    // Moved by Imperas (causing corruption of a5 at this position)
		//PRCI->MSIP[0] = 0x00;

		__asm volatile("mret");
80001b74:	30200073          	mret
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:394
	}
}
80001b78:	00000013          	nop
80001b7c:	00c12083          	lw	ra,12(sp)
80001b80:	00812403          	lw	s0,8(sp)
80001b84:	01010113          	addi	sp,sp,16
80001b88:	00008067          	ret

80001b8c <vPortYield>:
vPortYield():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:397

void vPortYield( void )
{
80001b8c:	ff010113          	addi	sp,sp,-16
80001b90:	00112623          	sw	ra,12(sp)
80001b94:	00812423          	sw	s0,8(sp)
80001b98:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:398
	raise_soft_interrupt();
80001b9c:	a69ff0ef          	jal	ra,80001604 <raise_soft_interrupt>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:399
}
80001ba0:	00000013          	nop
80001ba4:	00c12083          	lw	ra,12(sp)
80001ba8:	00812403          	lw	s0,8(sp)
80001bac:	01010113          	addi	sp,sp,16
80001bb0:	00008067          	ret

80001bb4 <vListInitialise>:
vListInitialise():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:80
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
80001bb4:	fe010113          	addi	sp,sp,-32
80001bb8:	00812e23          	sw	s0,28(sp)
80001bbc:	02010413          	addi	s0,sp,32
80001bc0:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:84
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001bc4:	fec42783          	lw	a5,-20(s0)
80001bc8:	00878713          	addi	a4,a5,8
80001bcc:	fec42783          	lw	a5,-20(s0)
80001bd0:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:88

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
80001bd4:	fec42783          	lw	a5,-20(s0)
80001bd8:	fff00713          	li	a4,-1
80001bdc:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:92

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001be0:	fec42783          	lw	a5,-20(s0)
80001be4:	00878713          	addi	a4,a5,8
80001be8:	fec42783          	lw	a5,-20(s0)
80001bec:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:93
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001bf0:	fec42783          	lw	a5,-20(s0)
80001bf4:	00878713          	addi	a4,a5,8
80001bf8:	fec42783          	lw	a5,-20(s0)
80001bfc:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:95

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
80001c00:	fec42783          	lw	a5,-20(s0)
80001c04:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:101

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
80001c08:	00000013          	nop
80001c0c:	01c12403          	lw	s0,28(sp)
80001c10:	02010113          	addi	sp,sp,32
80001c14:	00008067          	ret

80001c18 <vListInitialiseItem>:
vListInitialiseItem():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:105
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
80001c18:	fe010113          	addi	sp,sp,-32
80001c1c:	00812e23          	sw	s0,28(sp)
80001c20:	02010413          	addi	s0,sp,32
80001c24:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:107
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80001c28:	fec42783          	lw	a5,-20(s0)
80001c2c:	0007a823          	sw	zero,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:113

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
80001c30:	00000013          	nop
80001c34:	01c12403          	lw	s0,28(sp)
80001c38:	02010113          	addi	sp,sp,32
80001c3c:	00008067          	ret

80001c40 <vListInsertEnd>:
vListInsertEnd():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:117
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001c40:	fd010113          	addi	sp,sp,-48
80001c44:	02812623          	sw	s0,44(sp)
80001c48:	03010413          	addi	s0,sp,48
80001c4c:	fca42e23          	sw	a0,-36(s0)
80001c50:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:118
ListItem_t * const pxIndex = pxList->pxIndex;
80001c54:	fdc42783          	lw	a5,-36(s0)
80001c58:	0047a783          	lw	a5,4(a5)
80001c5c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:129
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
80001c60:	fd842783          	lw	a5,-40(s0)
80001c64:	fec42703          	lw	a4,-20(s0)
80001c68:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:130
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
80001c6c:	fec42783          	lw	a5,-20(s0)
80001c70:	0087a703          	lw	a4,8(a5)
80001c74:	fd842783          	lw	a5,-40(s0)
80001c78:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:135

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
80001c7c:	fec42783          	lw	a5,-20(s0)
80001c80:	0087a783          	lw	a5,8(a5)
80001c84:	fd842703          	lw	a4,-40(s0)
80001c88:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:136
	pxIndex->pxPrevious = pxNewListItem;
80001c8c:	fec42783          	lw	a5,-20(s0)
80001c90:	fd842703          	lw	a4,-40(s0)
80001c94:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:139

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001c98:	fd842783          	lw	a5,-40(s0)
80001c9c:	fdc42703          	lw	a4,-36(s0)
80001ca0:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:141

	( pxList->uxNumberOfItems )++;
80001ca4:	fdc42783          	lw	a5,-36(s0)
80001ca8:	0007a783          	lw	a5,0(a5)
80001cac:	00178713          	addi	a4,a5,1
80001cb0:	fdc42783          	lw	a5,-36(s0)
80001cb4:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:142
}
80001cb8:	00000013          	nop
80001cbc:	02c12403          	lw	s0,44(sp)
80001cc0:	03010113          	addi	sp,sp,48
80001cc4:	00008067          	ret

80001cc8 <vListInsert>:
vListInsert():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:146
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001cc8:	fd010113          	addi	sp,sp,-48
80001ccc:	02812623          	sw	s0,44(sp)
80001cd0:	03010413          	addi	s0,sp,48
80001cd4:	fca42e23          	sw	a0,-36(s0)
80001cd8:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:148
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
80001cdc:	fd842783          	lw	a5,-40(s0)
80001ce0:	0007a783          	lw	a5,0(a5)
80001ce4:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:164
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
80001ce8:	fe842703          	lw	a4,-24(s0)
80001cec:	fff00793          	li	a5,-1
80001cf0:	00f71a63          	bne	a4,a5,80001d04 <vListInsert+0x3c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:166
	{
		pxIterator = pxList->xListEnd.pxPrevious;
80001cf4:	fdc42783          	lw	a5,-36(s0)
80001cf8:	0107a783          	lw	a5,16(a5)
80001cfc:	fef42623          	sw	a5,-20(s0)
80001d00:	0340006f          	j	80001d34 <vListInsert+0x6c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:192
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001d04:	fdc42783          	lw	a5,-36(s0)
80001d08:	00878793          	addi	a5,a5,8
80001d0c:	fef42623          	sw	a5,-20(s0)
80001d10:	0100006f          	j	80001d20 <vListInsert+0x58>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 3)
80001d14:	fec42783          	lw	a5,-20(s0)
80001d18:	0047a783          	lw	a5,4(a5)
80001d1c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 1)
80001d20:	fec42783          	lw	a5,-20(s0)
80001d24:	0047a783          	lw	a5,4(a5)
80001d28:	0007a783          	lw	a5,0(a5)
80001d2c:	fe842703          	lw	a4,-24(s0)
80001d30:	fef772e3          	bleu	a5,a4,80001d14 <vListInsert+0x4c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:199
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
80001d34:	fec42783          	lw	a5,-20(s0)
80001d38:	0047a703          	lw	a4,4(a5)
80001d3c:	fd842783          	lw	a5,-40(s0)
80001d40:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:200
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
80001d44:	fd842783          	lw	a5,-40(s0)
80001d48:	0047a783          	lw	a5,4(a5)
80001d4c:	fd842703          	lw	a4,-40(s0)
80001d50:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:201
	pxNewListItem->pxPrevious = pxIterator;
80001d54:	fd842783          	lw	a5,-40(s0)
80001d58:	fec42703          	lw	a4,-20(s0)
80001d5c:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:202
	pxIterator->pxNext = pxNewListItem;
80001d60:	fec42783          	lw	a5,-20(s0)
80001d64:	fd842703          	lw	a4,-40(s0)
80001d68:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:206

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001d6c:	fd842783          	lw	a5,-40(s0)
80001d70:	fdc42703          	lw	a4,-36(s0)
80001d74:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:208

	( pxList->uxNumberOfItems )++;
80001d78:	fdc42783          	lw	a5,-36(s0)
80001d7c:	0007a783          	lw	a5,0(a5)
80001d80:	00178713          	addi	a4,a5,1
80001d84:	fdc42783          	lw	a5,-36(s0)
80001d88:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:209
}
80001d8c:	00000013          	nop
80001d90:	02c12403          	lw	s0,44(sp)
80001d94:	03010113          	addi	sp,sp,48
80001d98:	00008067          	ret

80001d9c <uxListRemove>:
uxListRemove():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:213
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
80001d9c:	fd010113          	addi	sp,sp,-48
80001da0:	02812623          	sw	s0,44(sp)
80001da4:	03010413          	addi	s0,sp,48
80001da8:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:216
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
80001dac:	fdc42783          	lw	a5,-36(s0)
80001db0:	0107a783          	lw	a5,16(a5)
80001db4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:218

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
80001db8:	fdc42783          	lw	a5,-36(s0)
80001dbc:	0047a783          	lw	a5,4(a5)
80001dc0:	fdc42703          	lw	a4,-36(s0)
80001dc4:	00872703          	lw	a4,8(a4) # 44000008 <RAM_SIZE+0x43f80008>
80001dc8:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:219
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
80001dcc:	fdc42783          	lw	a5,-36(s0)
80001dd0:	0087a783          	lw	a5,8(a5)
80001dd4:	fdc42703          	lw	a4,-36(s0)
80001dd8:	00472703          	lw	a4,4(a4)
80001ddc:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:225

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
80001de0:	fec42783          	lw	a5,-20(s0)
80001de4:	0047a783          	lw	a5,4(a5)
80001de8:	fdc42703          	lw	a4,-36(s0)
80001dec:	00f71a63          	bne	a4,a5,80001e00 <uxListRemove+0x64>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:227
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
80001df0:	fdc42783          	lw	a5,-36(s0)
80001df4:	0087a703          	lw	a4,8(a5)
80001df8:	fec42783          	lw	a5,-20(s0)
80001dfc:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:234
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
80001e00:	fdc42783          	lw	a5,-36(s0)
80001e04:	0007a823          	sw	zero,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:235
	( pxList->uxNumberOfItems )--;
80001e08:	fec42783          	lw	a5,-20(s0)
80001e0c:	0007a783          	lw	a5,0(a5)
80001e10:	fff78713          	addi	a4,a5,-1
80001e14:	fec42783          	lw	a5,-20(s0)
80001e18:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:237

	return pxList->uxNumberOfItems;
80001e1c:	fec42783          	lw	a5,-20(s0)
80001e20:	0007a783          	lw	a5,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:238
}
80001e24:	00078513          	mv	a0,a5
80001e28:	02c12403          	lw	s0,44(sp)
80001e2c:	03010113          	addi	sp,sp,48
80001e30:	00008067          	ret

80001e34 <memset>:
memset():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:25

  return dest;
}

void* memset(void* dest, int byte, size_t len)
{
80001e34:	fd010113          	addi	sp,sp,-48
80001e38:	02812623          	sw	s0,44(sp)
80001e3c:	03010413          	addi	s0,sp,48
80001e40:	fca42e23          	sw	a0,-36(s0)
80001e44:	fcb42c23          	sw	a1,-40(s0)
80001e48:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:26
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
80001e4c:	fdc42703          	lw	a4,-36(s0)
80001e50:	fd442783          	lw	a5,-44(s0)
80001e54:	00f767b3          	or	a5,a4,a5
80001e58:	0037f793          	andi	a5,a5,3
80001e5c:	06079863          	bnez	a5,80001ecc <memset+0x98>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:27
    uintptr_t word = byte & 0xFF;
80001e60:	fd842783          	lw	a5,-40(s0)
80001e64:	0ff7f793          	andi	a5,a5,255
80001e68:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:28
    word |= word << 8;
80001e6c:	fe442783          	lw	a5,-28(s0)
80001e70:	00879793          	slli	a5,a5,0x8
80001e74:	fe442703          	lw	a4,-28(s0)
80001e78:	00f767b3          	or	a5,a4,a5
80001e7c:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:29
    word |= word << 16;
80001e80:	fe442783          	lw	a5,-28(s0)
80001e84:	01079793          	slli	a5,a5,0x10
80001e88:	fe442703          	lw	a4,-28(s0)
80001e8c:	00f767b3          	or	a5,a4,a5
80001e90:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:32
    word |= word << 16 << 16;

    uintptr_t *d = dest;
80001e94:	fdc42783          	lw	a5,-36(s0)
80001e98:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001e9c:	0180006f          	j	80001eb4 <memset+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:34
      *d++ = word;
80001ea0:	fec42783          	lw	a5,-20(s0)
80001ea4:	00478713          	addi	a4,a5,4
80001ea8:	fee42623          	sw	a4,-20(s0)
80001eac:	fe442703          	lw	a4,-28(s0)
80001eb0:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001eb4:	fdc42703          	lw	a4,-36(s0)
80001eb8:	fd442783          	lw	a5,-44(s0)
80001ebc:	00f707b3          	add	a5,a4,a5
80001ec0:	fec42703          	lw	a4,-20(s0)
80001ec4:	fcf76ee3          	bltu	a4,a5,80001ea0 <memset+0x6c>
80001ec8:	0400006f          	j	80001f08 <memset+0xd4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:36
  } else {
    char *d = dest;
80001ecc:	fdc42783          	lw	a5,-36(s0)
80001ed0:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001ed4:	0200006f          	j	80001ef4 <memset+0xc0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:38
      *d++ = byte;
80001ed8:	fe842783          	lw	a5,-24(s0)
80001edc:	00178713          	addi	a4,a5,1
80001ee0:	fee42423          	sw	a4,-24(s0)
80001ee4:	fd842703          	lw	a4,-40(s0)
80001ee8:	01871713          	slli	a4,a4,0x18
80001eec:	41875713          	srai	a4,a4,0x18
80001ef0:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001ef4:	fdc42703          	lw	a4,-36(s0)
80001ef8:	fd442783          	lw	a5,-44(s0)
80001efc:	00f707b3          	add	a5,a4,a5
80001f00:	fe842703          	lw	a4,-24(s0)
80001f04:	fcf76ae3          	bltu	a4,a5,80001ed8 <memset+0xa4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:40
  }
  return dest;
80001f08:	fdc42783          	lw	a5,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:41
}
80001f0c:	00078513          	mv	a0,a5
80001f10:	02c12403          	lw	s0,44(sp)
80001f14:	03010113          	addi	sp,sp,48
80001f18:	00008067          	ret

80001f1c <strlen>:
strlen():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:44

size_t strlen(const char *s)
{
80001f1c:	fd010113          	addi	sp,sp,-48
80001f20:	02812623          	sw	s0,44(sp)
80001f24:	03010413          	addi	s0,sp,48
80001f28:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:45
  const char *p = s;
80001f2c:	fdc42783          	lw	a5,-36(s0)
80001f30:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001f34:	0100006f          	j	80001f44 <strlen+0x28>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:47
    p++;
80001f38:	fec42783          	lw	a5,-20(s0)
80001f3c:	00178793          	addi	a5,a5,1
80001f40:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001f44:	fec42783          	lw	a5,-20(s0)
80001f48:	00078783          	lb	a5,0(a5)
80001f4c:	fe0796e3          	bnez	a5,80001f38 <strlen+0x1c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:48
  return p - s;
80001f50:	fec42703          	lw	a4,-20(s0)
80001f54:	fdc42783          	lw	a5,-36(s0)
80001f58:	40f707b3          	sub	a5,a4,a5
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:49
}
80001f5c:	00078513          	mv	a0,a5
80001f60:	02c12403          	lw	s0,44(sp)
80001f64:	03010113          	addi	sp,sp,48
80001f68:	00008067          	ret

80001f6c <xTaskGenericCreate>:
xTaskGenericCreate():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:551

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80001f6c:	fc010113          	addi	sp,sp,-64
80001f70:	02112e23          	sw	ra,60(sp)
80001f74:	02812c23          	sw	s0,56(sp)
80001f78:	04010413          	addi	s0,sp,64
80001f7c:	fca42e23          	sw	a0,-36(s0)
80001f80:	fcb42c23          	sw	a1,-40(s0)
80001f84:	fcd42823          	sw	a3,-48(s0)
80001f88:	fce42623          	sw	a4,-52(s0)
80001f8c:	fcf42423          	sw	a5,-56(s0)
80001f90:	fd042223          	sw	a6,-60(s0)
80001f94:	fd142023          	sw	a7,-64(s0)
80001f98:	00060793          	mv	a5,a2
80001f9c:	fcf41b23          	sh	a5,-42(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:556
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
80001fa0:	fdc42783          	lw	a5,-36(s0)
80001fa4:	00079663          	bnez	a5,80001fb0 <xTaskGenericCreate+0x44>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:556 (discriminator 1)
80001fa8:	30047073          	csrci	mstatus,8
80001fac:	0000006f          	j	80001fac <xTaskGenericCreate+0x40>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:557
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
80001fb0:	fcc42703          	lw	a4,-52(s0)
80001fb4:	00400793          	li	a5,4
80001fb8:	00e7f663          	bleu	a4,a5,80001fc4 <xTaskGenericCreate+0x58>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 1)
80001fbc:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 2)
80001fc0:	0000006f          	j	80001fc0 <xTaskGenericCreate+0x54>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:561

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
80001fc4:	fd645783          	lhu	a5,-42(s0)
80001fc8:	fc442583          	lw	a1,-60(s0)
80001fcc:	00078513          	mv	a0,a5
80001fd0:	549000ef          	jal	ra,80002d18 <prvAllocateTCBAndStack>
80001fd4:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:562
	if( pxNewTCB != NULL )
80001fd8:	fe842783          	lw	a5,-24(s0)
80001fdc:	16078263          	beqz	a5,80002140 <xTaskGenericCreate+0x1d4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:598
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
80001fe0:	fe842783          	lw	a5,-24(s0)
80001fe4:	0307a703          	lw	a4,48(a5)
80001fe8:	fd645683          	lhu	a3,-42(s0)
80001fec:	400007b7          	lui	a5,0x40000
80001ff0:	fff78793          	addi	a5,a5,-1 # 3fffffff <RAM_SIZE+0x3ff7ffff>
80001ff4:	00f687b3          	add	a5,a3,a5
80001ff8:	00279793          	slli	a5,a5,0x2
80001ffc:	00f707b3          	add	a5,a4,a5
80002000:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:599
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
80002004:	fe442783          	lw	a5,-28(s0)
80002008:	ffc7f793          	andi	a5,a5,-4
8000200c:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:602

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
80002010:	fe442783          	lw	a5,-28(s0)
80002014:	0037f793          	andi	a5,a5,3
80002018:	00078663          	beqz	a5,80002024 <xTaskGenericCreate+0xb8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 1)
8000201c:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 3)
80002020:	0000006f          	j	80002020 <xTaskGenericCreate+0xb4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:619
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
80002024:	fd645783          	lhu	a5,-42(s0)
80002028:	00078713          	mv	a4,a5
8000202c:	fc042683          	lw	a3,-64(s0)
80002030:	fcc42603          	lw	a2,-52(s0)
80002034:	fd842583          	lw	a1,-40(s0)
80002038:	fe842503          	lw	a0,-24(s0)
8000203c:	1bd000ef          	jal	ra,800029f8 <prvInitialiseTCBVariables>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:631
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
80002040:	fd042603          	lw	a2,-48(s0)
80002044:	fdc42583          	lw	a1,-36(s0)
80002048:	fe442503          	lw	a0,-28(s0)
8000204c:	891ff0ef          	jal	ra,800018dc <pxPortInitialiseStack>
80002050:	00050713          	mv	a4,a0
80002054:	fe842783          	lw	a5,-24(s0)
80002058:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:635
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
8000205c:	fc842783          	lw	a5,-56(s0)
80002060:	00078863          	beqz	a5,80002070 <xTaskGenericCreate+0x104>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:640
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
80002064:	fc842783          	lw	a5,-56(s0)
80002068:	fe842703          	lw	a4,-24(s0)
8000206c:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:649
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
80002070:	de0ff0ef          	jal	ra,80001650 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:651
		{
			uxCurrentNumberOfTasks++;
80002074:	93c1a783          	lw	a5,-1732(gp) # 80008eec <uxCurrentNumberOfTasks>
80002078:	00178713          	addi	a4,a5,1
8000207c:	92e1ae23          	sw	a4,-1732(gp) # 80008eec <uxCurrentNumberOfTasks>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:652
			if( pxCurrentTCB == NULL )
80002080:	92c1a783          	lw	a5,-1748(gp) # 80008edc <pxCurrentTCB>
80002084:	02079063          	bnez	a5,800020a4 <xTaskGenericCreate+0x138>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:656
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
80002088:	fe842703          	lw	a4,-24(s0)
8000208c:	92e1a623          	sw	a4,-1748(gp) # 80008edc <pxCurrentTCB>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:658

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
80002090:	93c1a703          	lw	a4,-1732(gp) # 80008eec <uxCurrentNumberOfTasks>
80002094:	00100793          	li	a5,1
80002098:	02f71663          	bne	a4,a5,800020c4 <xTaskGenericCreate+0x158>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:663
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
8000209c:	295000ef          	jal	ra,80002b30 <prvInitialiseTaskLists>
800020a0:	0240006f          	j	800020c4 <xTaskGenericCreate+0x158>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:675
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
800020a4:	9481a783          	lw	a5,-1720(gp) # 80008ef8 <xSchedulerRunning>
800020a8:	00079e63          	bnez	a5,800020c4 <xTaskGenericCreate+0x158>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:677
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
800020ac:	92c1a783          	lw	a5,-1748(gp) # 80008edc <pxCurrentTCB>
800020b0:	02c7a783          	lw	a5,44(a5)
800020b4:	fcc42703          	lw	a4,-52(s0)
800020b8:	00f76663          	bltu	a4,a5,800020c4 <xTaskGenericCreate+0x158>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:679
					{
						pxCurrentTCB = pxNewTCB;
800020bc:	fe842703          	lw	a4,-24(s0)
800020c0:	92e1a623          	sw	a4,-1748(gp) # 80008edc <pxCurrentTCB>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:692
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
800020c4:	9581a783          	lw	a5,-1704(gp) # 80008f08 <uxTaskNumber>
800020c8:	00178713          	addi	a4,a5,1
800020cc:	94e1ac23          	sw	a4,-1704(gp) # 80008f08 <uxTaskNumber>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:697

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
800020d0:	9581a703          	lw	a4,-1704(gp) # 80008f08 <uxTaskNumber>
800020d4:	fe842783          	lw	a5,-24(s0)
800020d8:	04e7a423          	sw	a4,72(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:702
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
800020dc:	fe842783          	lw	a5,-24(s0)
800020e0:	02c7a703          	lw	a4,44(a5)
800020e4:	9441a783          	lw	a5,-1724(gp) # 80008ef4 <uxTopReadyPriority>
800020e8:	00e7f863          	bleu	a4,a5,800020f8 <xTaskGenericCreate+0x18c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 1)
800020ec:	fe842783          	lw	a5,-24(s0)
800020f0:	02c7a703          	lw	a4,44(a5)
800020f4:	94e1a223          	sw	a4,-1724(gp) # 80008ef4 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 3)
800020f8:	fe842783          	lw	a5,-24(s0)
800020fc:	02c7a703          	lw	a4,44(a5)
80002100:	00070793          	mv	a5,a4
80002104:	00279793          	slli	a5,a5,0x2
80002108:	00e787b3          	add	a5,a5,a4
8000210c:	00279793          	slli	a5,a5,0x2
80002110:	80022737          	lui	a4,0x80022
80002114:	f5070713          	addi	a4,a4,-176 # 80021f50 <__stack_top+0xfffdb7e0>
80002118:	00e78733          	add	a4,a5,a4
8000211c:	fe842783          	lw	a5,-24(s0)
80002120:	00478793          	addi	a5,a5,4
80002124:	00078593          	mv	a1,a5
80002128:	00070513          	mv	a0,a4
8000212c:	b15ff0ef          	jal	ra,80001c40 <vListInsertEnd>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:704 (discriminator 3)

			xReturn = pdPASS;
80002130:	00100793          	li	a5,1
80002134:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:707 (discriminator 3)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
80002138:	d4cff0ef          	jal	ra,80001684 <vPortExitCritical>
8000213c:	00c0006f          	j	80002148 <xTaskGenericCreate+0x1dc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:711
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
80002140:	fff00793          	li	a5,-1
80002144:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:715
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
80002148:	fec42703          	lw	a4,-20(s0)
8000214c:	00100793          	li	a5,1
80002150:	02f71063          	bne	a4,a5,80002170 <xTaskGenericCreate+0x204>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:717
	{
		if( xSchedulerRunning != pdFALSE )
80002154:	9481a783          	lw	a5,-1720(gp) # 80008ef8 <xSchedulerRunning>
80002158:	00078c63          	beqz	a5,80002170 <xTaskGenericCreate+0x204>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:721
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
8000215c:	92c1a783          	lw	a5,-1748(gp) # 80008edc <pxCurrentTCB>
80002160:	02c7a783          	lw	a5,44(a5)
80002164:	fcc42703          	lw	a4,-52(s0)
80002168:	00e7f463          	bleu	a4,a5,80002170 <xTaskGenericCreate+0x204>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:723
			{
				taskYIELD_IF_USING_PREEMPTION();
8000216c:	a21ff0ef          	jal	ra,80001b8c <vPortYield>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:736
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
80002170:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:737
}
80002174:	00078513          	mv	a0,a5
80002178:	03c12083          	lw	ra,60(sp)
8000217c:	03812403          	lw	s0,56(sp)
80002180:	04010113          	addi	sp,sp,64
80002184:	00008067          	ret

80002188 <vTaskDelete>:
vTaskDelete():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:743
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
80002188:	fd010113          	addi	sp,sp,-48
8000218c:	02112623          	sw	ra,44(sp)
80002190:	02812423          	sw	s0,40(sp)
80002194:	03010413          	addi	s0,sp,48
80002198:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:746
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
8000219c:	cb4ff0ef          	jal	ra,80001650 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:750
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
800021a0:	fdc42783          	lw	a5,-36(s0)
800021a4:	00079663          	bnez	a5,800021b0 <vTaskDelete+0x28>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 1)
800021a8:	92c1a783          	lw	a5,-1748(gp) # 80008edc <pxCurrentTCB>
800021ac:	0080006f          	j	800021b4 <vTaskDelete+0x2c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 2)
800021b0:	fdc42783          	lw	a5,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 4)
800021b4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:756 (discriminator 4)

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
800021b8:	fec42783          	lw	a5,-20(s0)
800021bc:	00478793          	addi	a5,a5,4
800021c0:	00078513          	mv	a0,a5
800021c4:	bd9ff0ef          	jal	ra,80001d9c <uxListRemove>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:766 (discriminator 4)
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
800021c8:	fec42783          	lw	a5,-20(s0)
800021cc:	0287a783          	lw	a5,40(a5)
800021d0:	00078a63          	beqz	a5,800021e4 <vTaskDelete+0x5c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:768
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
800021d4:	fec42783          	lw	a5,-20(s0)
800021d8:	01878793          	addi	a5,a5,24
800021dc:	00078513          	mv	a0,a5
800021e0:	bbdff0ef          	jal	ra,80001d9c <uxListRemove>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:775
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
800021e4:	fec42783          	lw	a5,-20(s0)
800021e8:	00478793          	addi	a5,a5,4
800021ec:	00078593          	mv	a1,a5
800021f0:	800227b7          	lui	a5,0x80022
800021f4:	ff078513          	addi	a0,a5,-16 # 80021ff0 <__stack_top+0xfffdb880>
800021f8:	a49ff0ef          	jal	ra,80001c40 <vListInsertEnd>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:780

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
800021fc:	9381a783          	lw	a5,-1736(gp) # 80008ee8 <uxTasksDeleted>
80002200:	00178713          	addi	a4,a5,1
80002204:	92e1ac23          	sw	a4,-1736(gp) # 80008ee8 <uxTasksDeleted>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:784

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
80002208:	9581a783          	lw	a5,-1704(gp) # 80008f08 <uxTaskNumber>
8000220c:	00178713          	addi	a4,a5,1
80002210:	94e1ac23          	sw	a4,-1704(gp) # 80008f08 <uxTaskNumber>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:788

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
80002214:	c70ff0ef          	jal	ra,80001684 <vPortExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:792

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
80002218:	9481a783          	lw	a5,-1720(gp) # 80008ef8 <xSchedulerRunning>
8000221c:	02078a63          	beqz	a5,80002250 <vTaskDelete+0xc8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:794
		{
			if( pxTCB == pxCurrentTCB )
80002220:	92c1a783          	lw	a5,-1748(gp) # 80008edc <pxCurrentTCB>
80002224:	fec42703          	lw	a4,-20(s0)
80002228:	00f71e63          	bne	a4,a5,80002244 <vTaskDelete+0xbc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:796
			{
				configASSERT( uxSchedulerSuspended == 0 );
8000222c:	9601a783          	lw	a5,-1696(gp) # 80008f10 <uxSchedulerSuspended>
80002230:	00078663          	beqz	a5,8000223c <vTaskDelete+0xb4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:796 (discriminator 1)
80002234:	30047073          	csrci	mstatus,8
80002238:	0000006f          	j	80002238 <vTaskDelete+0xb0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:804
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
8000223c:	951ff0ef          	jal	ra,80001b8c <vPortYield>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:817
					prvResetNextTaskUnblockTime();
				}
				taskEXIT_CRITICAL();
			}
		}
	}
80002240:	0100006f          	j	80002250 <vTaskDelete+0xc8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:810
				taskENTER_CRITICAL();
80002244:	c0cff0ef          	jal	ra,80001650 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:812
					prvResetNextTaskUnblockTime();
80002248:	3d1000ef          	jal	ra,80002e18 <prvResetNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:814
				taskEXIT_CRITICAL();
8000224c:	c38ff0ef          	jal	ra,80001684 <vPortExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:817
	}
80002250:	00000013          	nop
80002254:	02c12083          	lw	ra,44(sp)
80002258:	02812403          	lw	s0,40(sp)
8000225c:	03010113          	addi	sp,sp,48
80002260:	00008067          	ret

80002264 <vTaskDelay>:
vTaskDelay():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:921
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
80002264:	fd010113          	addi	sp,sp,-48
80002268:	02112623          	sw	ra,44(sp)
8000226c:	02812423          	sw	s0,40(sp)
80002270:	03010413          	addi	s0,sp,48
80002274:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:923
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
80002278:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:927


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
8000227c:	fdc42783          	lw	a5,-36(s0)
80002280:	04078463          	beqz	a5,800022c8 <vTaskDelay+0x64>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:929
		{
			configASSERT( uxSchedulerSuspended == 0 );
80002284:	9601a783          	lw	a5,-1696(gp) # 80008f10 <uxSchedulerSuspended>
80002288:	00078663          	beqz	a5,80002294 <vTaskDelay+0x30>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:929 (discriminator 1)
8000228c:	30047073          	csrci	mstatus,8
80002290:	0000006f          	j	80002290 <vTaskDelay+0x2c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:930
			vTaskSuspendAll();
80002294:	298000ef          	jal	ra,8000252c <vTaskSuspendAll>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:944
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
80002298:	9401a783          	lw	a5,-1728(gp) # 80008ef0 <xTickCount>
8000229c:	fdc42703          	lw	a4,-36(s0)
800022a0:	00f707b3          	add	a5,a4,a5
800022a4:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:949

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
800022a8:	92c1a783          	lw	a5,-1748(gp) # 80008edc <pxCurrentTCB>
800022ac:	00478793          	addi	a5,a5,4
800022b0:	00078513          	mv	a0,a5
800022b4:	ae9ff0ef          	jal	ra,80001d9c <uxListRemove>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:960
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
800022b8:	fe842503          	lw	a0,-24(s0)
800022bc:	1d5000ef          	jal	ra,80002c90 <prvAddCurrentTaskToDelayedList>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:962
			}
			xAlreadyYielded = xTaskResumeAll();
800022c0:	294000ef          	jal	ra,80002554 <xTaskResumeAll>
800022c4:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:971
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
800022c8:	fec42783          	lw	a5,-20(s0)
800022cc:	00079463          	bnez	a5,800022d4 <vTaskDelay+0x70>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:973
		{
			portYIELD_WITHIN_API();
800022d0:	8bdff0ef          	jal	ra,80001b8c <vPortYield>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:979
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
800022d4:	00000013          	nop
800022d8:	02c12083          	lw	ra,44(sp)
800022dc:	02812403          	lw	s0,40(sp)
800022e0:	03010113          	addi	sp,sp,48
800022e4:	00008067          	ret

800022e8 <prvTaskIsTaskSuspended>:
prvTaskIsTaskSuspended():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1372
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
800022e8:	fd010113          	addi	sp,sp,-48
800022ec:	02812623          	sw	s0,44(sp)
800022f0:	03010413          	addi	s0,sp,48
800022f4:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1373
	BaseType_t xReturn = pdFALSE;
800022f8:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1374
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
800022fc:	fdc42783          	lw	a5,-36(s0)
80002300:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1380

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
80002304:	fdc42783          	lw	a5,-36(s0)
80002308:	00079663          	bnez	a5,80002314 <prvTaskIsTaskSuspended+0x2c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1380 (discriminator 1)
8000230c:	30047073          	csrci	mstatus,8
80002310:	0000006f          	j	80002310 <prvTaskIsTaskSuspended+0x28>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1383

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
80002314:	fe842783          	lw	a5,-24(s0)
80002318:	0147a703          	lw	a4,20(a5)
8000231c:	800227b7          	lui	a5,0x80022
80002320:	00478793          	addi	a5,a5,4 # 80022004 <__stack_top+0xfffdb894>
80002324:	00f71663          	bne	a4,a5,80002330 <prvTaskIsTaskSuspended+0x48>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1383 (discriminator 1)
80002328:	00100793          	li	a5,1
8000232c:	0080006f          	j	80002334 <prvTaskIsTaskSuspended+0x4c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1383 (discriminator 2)
80002330:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1383 (discriminator 4)
80002334:	02078e63          	beqz	a5,80002370 <prvTaskIsTaskSuspended+0x88>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1386
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
80002338:	fe842783          	lw	a5,-24(s0)
8000233c:	0287a703          	lw	a4,40(a5)
80002340:	800227b7          	lui	a5,0x80022
80002344:	fdc78793          	addi	a5,a5,-36 # 80021fdc <__stack_top+0xfffdb86c>
80002348:	02f70463          	beq	a4,a5,80002370 <prvTaskIsTaskSuspended+0x88>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1390
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
8000234c:	fe842783          	lw	a5,-24(s0)
80002350:	0287a783          	lw	a5,40(a5)
80002354:	00079663          	bnez	a5,80002360 <prvTaskIsTaskSuspended+0x78>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1390 (discriminator 1)
80002358:	00100793          	li	a5,1
8000235c:	0080006f          	j	80002364 <prvTaskIsTaskSuspended+0x7c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1390 (discriminator 2)
80002360:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1390 (discriminator 4)
80002364:	00078663          	beqz	a5,80002370 <prvTaskIsTaskSuspended+0x88>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1392
				{
					xReturn = pdTRUE;
80002368:	00100793          	li	a5,1
8000236c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1409
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
80002370:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1410
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
80002374:	00078513          	mv	a0,a5
80002378:	02c12403          	lw	s0,44(sp)
8000237c:	03010113          	addi	sp,sp,48
80002380:	00008067          	ret

80002384 <xTaskResumeFromISR>:
xTaskResumeFromISR():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1472
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
80002384:	fd010113          	addi	sp,sp,-48
80002388:	02112623          	sw	ra,44(sp)
8000238c:	02812423          	sw	s0,40(sp)
80002390:	03010413          	addi	s0,sp,48
80002394:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1473
	BaseType_t xYieldRequired = pdFALSE;
80002398:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1474
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
8000239c:	fdc42783          	lw	a5,-36(s0)
800023a0:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1477
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
800023a4:	fdc42783          	lw	a5,-36(s0)
800023a8:	00079663          	bnez	a5,800023b4 <xTaskResumeFromISR+0x30>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1477 (discriminator 1)
800023ac:	30047073          	csrci	mstatus,8
800023b0:	0000006f          	j	800023b0 <xTaskResumeFromISR+0x2c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1497
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
800023b4:	cfcff0ef          	jal	ra,800018b0 <vPortSetInterruptMask>
800023b8:	00050793          	mv	a5,a0
800023bc:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1499
		{
			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
800023c0:	fe842503          	lw	a0,-24(s0)
800023c4:	f25ff0ef          	jal	ra,800022e8 <prvTaskIsTaskSuspended>
800023c8:	00050713          	mv	a4,a0
800023cc:	00100793          	li	a5,1
800023d0:	0af71463          	bne	a4,a5,80002478 <xTaskResumeFromISR+0xf4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1504
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
800023d4:	9601a783          	lw	a5,-1696(gp) # 80008f10 <uxSchedulerSuspended>
800023d8:	08079463          	bnez	a5,80002460 <xTaskResumeFromISR+0xdc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1508
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
800023dc:	fe842783          	lw	a5,-24(s0)
800023e0:	02c7a703          	lw	a4,44(a5)
800023e4:	92c1a783          	lw	a5,-1748(gp) # 80008edc <pxCurrentTCB>
800023e8:	02c7a783          	lw	a5,44(a5)
800023ec:	00f76663          	bltu	a4,a5,800023f8 <xTaskResumeFromISR+0x74>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1510
					{
						xYieldRequired = pdTRUE;
800023f0:	00100793          	li	a5,1
800023f4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1517
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
800023f8:	fe842783          	lw	a5,-24(s0)
800023fc:	00478793          	addi	a5,a5,4
80002400:	00078513          	mv	a0,a5
80002404:	999ff0ef          	jal	ra,80001d9c <uxListRemove>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1518
					prvAddTaskToReadyList( pxTCB );
80002408:	fe842783          	lw	a5,-24(s0)
8000240c:	02c7a703          	lw	a4,44(a5)
80002410:	9441a783          	lw	a5,-1724(gp) # 80008ef4 <uxTopReadyPriority>
80002414:	00e7f863          	bleu	a4,a5,80002424 <xTaskResumeFromISR+0xa0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1518 (discriminator 1)
80002418:	fe842783          	lw	a5,-24(s0)
8000241c:	02c7a703          	lw	a4,44(a5)
80002420:	94e1a223          	sw	a4,-1724(gp) # 80008ef4 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1518 (discriminator 3)
80002424:	fe842783          	lw	a5,-24(s0)
80002428:	02c7a703          	lw	a4,44(a5)
8000242c:	00070793          	mv	a5,a4
80002430:	00279793          	slli	a5,a5,0x2
80002434:	00e787b3          	add	a5,a5,a4
80002438:	00279793          	slli	a5,a5,0x2
8000243c:	80022737          	lui	a4,0x80022
80002440:	f5070713          	addi	a4,a4,-176 # 80021f50 <__stack_top+0xfffdb7e0>
80002444:	00e78733          	add	a4,a5,a4
80002448:	fe842783          	lw	a5,-24(s0)
8000244c:	00478793          	addi	a5,a5,4
80002450:	00078593          	mv	a1,a5
80002454:	00070513          	mv	a0,a4
80002458:	fe8ff0ef          	jal	ra,80001c40 <vListInsertEnd>
8000245c:	01c0006f          	j	80002478 <xTaskResumeFromISR+0xf4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1525
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
80002460:	fe842783          	lw	a5,-24(s0)
80002464:	01878793          	addi	a5,a5,24
80002468:	00078593          	mv	a1,a5
8000246c:	800227b7          	lui	a5,0x80022
80002470:	fdc78513          	addi	a0,a5,-36 # 80021fdc <__stack_top+0xfffdb86c>
80002474:	fccff0ef          	jal	ra,80001c40 <vListInsertEnd>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1533
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
80002478:	fe442783          	lw	a5,-28(s0)
8000247c:	00078513          	mv	a0,a5
80002480:	c08ff0ef          	jal	ra,80001888 <vPortClearInterruptMask>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1535

		return xYieldRequired;
80002484:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1536
	}
80002488:	00078513          	mv	a0,a5
8000248c:	02c12083          	lw	ra,44(sp)
80002490:	02812403          	lw	s0,40(sp)
80002494:	03010113          	addi	sp,sp,48
80002498:	00008067          	ret

8000249c <vTaskStartScheduler>:
vTaskStartScheduler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1542

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
8000249c:	fe010113          	addi	sp,sp,-32
800024a0:	00112e23          	sw	ra,28(sp)
800024a4:	00812c23          	sw	s0,24(sp)
800024a8:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1555
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
800024ac:	00000893          	li	a7,0
800024b0:	00000813          	li	a6,0
800024b4:	00000793          	li	a5,0
800024b8:	00000713          	li	a4,0
800024bc:	00000693          	li	a3,0
800024c0:	40000613          	li	a2,1024
800024c4:	800085b7          	lui	a1,0x80008
800024c8:	40858593          	addi	a1,a1,1032 # 80008408 <__stack_top+0xfffc1c98>
800024cc:	80003537          	lui	a0,0x80003
800024d0:	9c450513          	addi	a0,a0,-1596 # 800029c4 <__stack_top+0xfffbc254>
800024d4:	a99ff0ef          	jal	ra,80001f6c <xTaskGenericCreate>
800024d8:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1572
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
800024dc:	fec42703          	lw	a4,-20(s0)
800024e0:	00100793          	li	a5,1
800024e4:	02f71263          	bne	a4,a5,80002508 <vTaskStartScheduler+0x6c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1579
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
800024e8:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1589
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
800024ec:	fff00713          	li	a4,-1
800024f0:	94e1ae23          	sw	a4,-1700(gp) # 80008f0c <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1590
		xSchedulerRunning = pdTRUE;
800024f4:	00100713          	li	a4,1
800024f8:	94e1a423          	sw	a4,-1720(gp) # 80008ef8 <xSchedulerRunning>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1591
		xTickCount = ( TickType_t ) 0U;
800024fc:	9401a023          	sw	zero,-1728(gp) # 80008ef0 <xTickCount>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1600
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
80002500:	d54ff0ef          	jal	ra,80001a54 <xPortStartScheduler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
80002504:	0140006f          	j	80002518 <vTaskStartScheduler+0x7c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615
		configASSERT( xReturn );
80002508:	fec42783          	lw	a5,-20(s0)
8000250c:	00079663          	bnez	a5,80002518 <vTaskStartScheduler+0x7c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 1)
80002510:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 2)
80002514:	0000006f          	j	80002514 <vTaskStartScheduler+0x78>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
}
80002518:	00000013          	nop
8000251c:	01c12083          	lw	ra,28(sp)
80002520:	01812403          	lw	s0,24(sp)
80002524:	02010113          	addi	sp,sp,32
80002528:	00008067          	ret

8000252c <vTaskSuspendAll>:
vTaskSuspendAll():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1632
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
8000252c:	ff010113          	addi	sp,sp,-16
80002530:	00812623          	sw	s0,12(sp)
80002534:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1637
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
80002538:	9601a783          	lw	a5,-1696(gp) # 80008f10 <uxSchedulerSuspended>
8000253c:	00178713          	addi	a4,a5,1
80002540:	96e1a023          	sw	a4,-1696(gp) # 80008f10 <uxSchedulerSuspended>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1638
}
80002544:	00000013          	nop
80002548:	00c12403          	lw	s0,12(sp)
8000254c:	01010113          	addi	sp,sp,16
80002550:	00008067          	ret

80002554 <xTaskResumeAll>:
xTaskResumeAll():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1670

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
80002554:	fe010113          	addi	sp,sp,-32
80002558:	00112e23          	sw	ra,28(sp)
8000255c:	00812c23          	sw	s0,24(sp)
80002560:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1672
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
80002564:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
80002568:	9601a783          	lw	a5,-1696(gp) # 80008f10 <uxSchedulerSuspended>
8000256c:	00079663          	bnez	a5,80002578 <xTaskResumeAll+0x24>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676 (discriminator 1)
80002570:	30047073          	csrci	mstatus,8
80002574:	0000006f          	j	80002574 <xTaskResumeAll+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1683
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
80002578:	8d8ff0ef          	jal	ra,80001650 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1685
	{
		--uxSchedulerSuspended;
8000257c:	9601a783          	lw	a5,-1696(gp) # 80008f10 <uxSchedulerSuspended>
80002580:	fff78713          	addi	a4,a5,-1
80002584:	96e1a023          	sw	a4,-1696(gp) # 80008f10 <uxSchedulerSuspended>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1687

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80002588:	9601a783          	lw	a5,-1696(gp) # 80008f10 <uxSchedulerSuspended>
8000258c:	10079663          	bnez	a5,80002698 <xTaskResumeAll+0x144>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1689
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
80002590:	93c1a783          	lw	a5,-1732(gp) # 80008eec <uxCurrentNumberOfTasks>
80002594:	10078263          	beqz	a5,80002698 <xTaskResumeAll+0x144>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
80002598:	0a80006f          	j	80002640 <xTaskResumeAll+0xec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1695
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
8000259c:	800227b7          	lui	a5,0x80022
800025a0:	fdc78793          	addi	a5,a5,-36 # 80021fdc <__stack_top+0xfffdb86c>
800025a4:	00c7a783          	lw	a5,12(a5)
800025a8:	00c7a783          	lw	a5,12(a5)
800025ac:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1696
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
800025b0:	fe842783          	lw	a5,-24(s0)
800025b4:	01878793          	addi	a5,a5,24
800025b8:	00078513          	mv	a0,a5
800025bc:	fe0ff0ef          	jal	ra,80001d9c <uxListRemove>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1697
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
800025c0:	fe842783          	lw	a5,-24(s0)
800025c4:	00478793          	addi	a5,a5,4
800025c8:	00078513          	mv	a0,a5
800025cc:	fd0ff0ef          	jal	ra,80001d9c <uxListRemove>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698
					prvAddTaskToReadyList( pxTCB );
800025d0:	fe842783          	lw	a5,-24(s0)
800025d4:	02c7a703          	lw	a4,44(a5)
800025d8:	9441a783          	lw	a5,-1724(gp) # 80008ef4 <uxTopReadyPriority>
800025dc:	00e7f863          	bleu	a4,a5,800025ec <xTaskResumeAll+0x98>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 1)
800025e0:	fe842783          	lw	a5,-24(s0)
800025e4:	02c7a703          	lw	a4,44(a5)
800025e8:	94e1a223          	sw	a4,-1724(gp) # 80008ef4 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 3)
800025ec:	fe842783          	lw	a5,-24(s0)
800025f0:	02c7a703          	lw	a4,44(a5)
800025f4:	00070793          	mv	a5,a4
800025f8:	00279793          	slli	a5,a5,0x2
800025fc:	00e787b3          	add	a5,a5,a4
80002600:	00279793          	slli	a5,a5,0x2
80002604:	80022737          	lui	a4,0x80022
80002608:	f5070713          	addi	a4,a4,-176 # 80021f50 <__stack_top+0xfffdb7e0>
8000260c:	00e78733          	add	a4,a5,a4
80002610:	fe842783          	lw	a5,-24(s0)
80002614:	00478793          	addi	a5,a5,4
80002618:	00078593          	mv	a1,a5
8000261c:	00070513          	mv	a0,a4
80002620:	e20ff0ef          	jal	ra,80001c40 <vListInsertEnd>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1702 (discriminator 3)

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80002624:	fe842783          	lw	a5,-24(s0)
80002628:	02c7a703          	lw	a4,44(a5)
8000262c:	92c1a783          	lw	a5,-1748(gp) # 80008edc <pxCurrentTCB>
80002630:	02c7a783          	lw	a5,44(a5)
80002634:	00f76663          	bltu	a4,a5,80002640 <xTaskResumeAll+0xec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1704
					{
						xYieldPending = pdTRUE;
80002638:	00100713          	li	a4,1
8000263c:	94e1a823          	sw	a4,-1712(gp) # 80008f00 <xYieldPending>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
80002640:	800227b7          	lui	a5,0x80022
80002644:	fdc7a783          	lw	a5,-36(a5) # 80021fdc <__stack_top+0xfffdb86c>
80002648:	f4079ae3          	bnez	a5,8000259c <xTaskResumeAll+0x48>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1716

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
8000264c:	94c1a783          	lw	a5,-1716(gp) # 80008efc <uxPendedTicks>
80002650:	02078863          	beqz	a5,80002680 <xTaskResumeAll+0x12c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
80002654:	0240006f          	j	80002678 <xTaskResumeAll+0x124>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1720
					{
						if( xTaskIncrementTick() != pdFALSE )
80002658:	094000ef          	jal	ra,800026ec <xTaskIncrementTick>
8000265c:	00050793          	mv	a5,a0
80002660:	00078663          	beqz	a5,8000266c <xTaskResumeAll+0x118>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1722
						{
							xYieldPending = pdTRUE;
80002664:	00100713          	li	a4,1
80002668:	94e1a823          	sw	a4,-1712(gp) # 80008f00 <xYieldPending>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1728
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
8000266c:	94c1a783          	lw	a5,-1716(gp) # 80008efc <uxPendedTicks>
80002670:	fff78713          	addi	a4,a5,-1
80002674:	94e1a623          	sw	a4,-1716(gp) # 80008efc <uxPendedTicks>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
					while( uxPendedTicks > ( UBaseType_t ) 0U )
80002678:	94c1a783          	lw	a5,-1716(gp) # 80008efc <uxPendedTicks>
8000267c:	fc079ee3          	bnez	a5,80002658 <xTaskResumeAll+0x104>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1736
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
80002680:	9501a703          	lw	a4,-1712(gp) # 80008f00 <xYieldPending>
80002684:	00100793          	li	a5,1
80002688:	00f71863          	bne	a4,a5,80002698 <xTaskResumeAll+0x144>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1740
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
8000268c:	00100793          	li	a5,1
80002690:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1743
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
80002694:	cf8ff0ef          	jal	ra,80001b8c <vPortYield>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1756
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
80002698:	fedfe0ef          	jal	ra,80001684 <vPortExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1758

	return xAlreadyYielded;
8000269c:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1759
}
800026a0:	00078513          	mv	a0,a5
800026a4:	01c12083          	lw	ra,28(sp)
800026a8:	01812403          	lw	s0,24(sp)
800026ac:	02010113          	addi	sp,sp,32
800026b0:	00008067          	ret

800026b4 <xTaskGetTickCount>:
xTaskGetTickCount():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1763
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
800026b4:	fe010113          	addi	sp,sp,-32
800026b8:	00112e23          	sw	ra,28(sp)
800026bc:	00812c23          	sw	s0,24(sp)
800026c0:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1767
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
800026c4:	f8dfe0ef          	jal	ra,80001650 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1769
	{
		xTicks = xTickCount;
800026c8:	9401a783          	lw	a5,-1728(gp) # 80008ef0 <xTickCount>
800026cc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1771
	}
	portTICK_TYPE_EXIT_CRITICAL();
800026d0:	fb5fe0ef          	jal	ra,80001684 <vPortExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1773

	return xTicks;
800026d4:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1774
}
800026d8:	00078513          	mv	a0,a5
800026dc:	01c12083          	lw	ra,28(sp)
800026e0:	01812403          	lw	s0,24(sp)
800026e4:	02010113          	addi	sp,sp,32
800026e8:	00008067          	ret

800026ec <xTaskIncrementTick>:
xTaskIncrementTick():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1938

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
800026ec:	fd010113          	addi	sp,sp,-48
800026f0:	02112623          	sw	ra,44(sp)
800026f4:	02812423          	sw	s0,40(sp)
800026f8:	03010413          	addi	s0,sp,48
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1941
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
800026fc:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1947

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80002700:	9601a783          	lw	a5,-1696(gp) # 80008f10 <uxSchedulerSuspended>
80002704:	1a079063          	bnez	a5,800028a4 <xTaskIncrementTick+0x1b8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1951
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
80002708:	9401a783          	lw	a5,-1728(gp) # 80008ef0 <xTickCount>
8000270c:	00178713          	addi	a4,a5,1
80002710:	94e1a023          	sw	a4,-1728(gp) # 80008ef0 <xTickCount>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1956

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
80002714:	9401a783          	lw	a5,-1728(gp) # 80008ef0 <xTickCount>
80002718:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1958

			if( xConstTickCount == ( TickType_t ) 0U )
8000271c:	fe842783          	lw	a5,-24(s0)
80002720:	04079063          	bnez	a5,80002760 <xTaskIncrementTick+0x74>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960
			{
				taskSWITCH_DELAYED_LISTS();
80002724:	9301a783          	lw	a5,-1744(gp) # 80008ee0 <pxDelayedTaskList>
80002728:	0007a783          	lw	a5,0(a5)
8000272c:	00078663          	beqz	a5,80002738 <xTaskIncrementTick+0x4c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 1)
80002730:	30047073          	csrci	mstatus,8
80002734:	0000006f          	j	80002734 <xTaskIncrementTick+0x48>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 2)
80002738:	9301a783          	lw	a5,-1744(gp) # 80008ee0 <pxDelayedTaskList>
8000273c:	fef42223          	sw	a5,-28(s0)
80002740:	9341a703          	lw	a4,-1740(gp) # 80008ee4 <pxOverflowDelayedTaskList>
80002744:	92e1a823          	sw	a4,-1744(gp) # 80008ee0 <pxDelayedTaskList>
80002748:	fe442703          	lw	a4,-28(s0)
8000274c:	92e1aa23          	sw	a4,-1740(gp) # 80008ee4 <pxOverflowDelayedTaskList>
80002750:	9541a783          	lw	a5,-1708(gp) # 80008f04 <xNumOfOverflows>
80002754:	00178713          	addi	a4,a5,1
80002758:	94e1aa23          	sw	a4,-1708(gp) # 80008f04 <xNumOfOverflows>
8000275c:	6bc000ef          	jal	ra,80002e18 <prvResetNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1971

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
80002760:	95c1a783          	lw	a5,-1700(gp) # 80008f0c <xNextTaskUnblockTime>
80002764:	fe842703          	lw	a4,-24(s0)
80002768:	10f76063          	bltu	a4,a5,80002868 <xTaskIncrementTick+0x17c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
8000276c:	9301a783          	lw	a5,-1744(gp) # 80008ee0 <pxDelayedTaskList>
80002770:	0007a783          	lw	a5,0(a5)
80002774:	00079663          	bnez	a5,80002780 <xTaskIncrementTick+0x94>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 1)
80002778:	00100793          	li	a5,1
8000277c:	0080006f          	j	80002784 <xTaskIncrementTick+0x98>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 2)
80002780:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 4)
80002784:	00078863          	beqz	a5,80002794 <xTaskIncrementTick+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1982
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
80002788:	fff00713          	li	a4,-1
8000278c:	94e1ae23          	sw	a4,-1700(gp) # 80008f0c <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1983
						break;
80002790:	0d80006f          	j	80002868 <xTaskIncrementTick+0x17c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1991
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80002794:	9301a783          	lw	a5,-1744(gp) # 80008ee0 <pxDelayedTaskList>
80002798:	00c7a783          	lw	a5,12(a5)
8000279c:	00c7a783          	lw	a5,12(a5)
800027a0:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1992
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
800027a4:	fe042783          	lw	a5,-32(s0)
800027a8:	0047a783          	lw	a5,4(a5)
800027ac:	fcf42e23          	sw	a5,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1994

						if( xConstTickCount < xItemValue )
800027b0:	fe842703          	lw	a4,-24(s0)
800027b4:	fdc42783          	lw	a5,-36(s0)
800027b8:	00f77863          	bleu	a5,a4,800027c8 <xTaskIncrementTick+0xdc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2001
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
800027bc:	fdc42703          	lw	a4,-36(s0)
800027c0:	94e1ae23          	sw	a4,-1700(gp) # 80008f0c <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2002
							break;
800027c4:	0a40006f          	j	80002868 <xTaskIncrementTick+0x17c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2010
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
800027c8:	fe042783          	lw	a5,-32(s0)
800027cc:	00478793          	addi	a5,a5,4
800027d0:	00078513          	mv	a0,a5
800027d4:	dc8ff0ef          	jal	ra,80001d9c <uxListRemove>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2014

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
800027d8:	fe042783          	lw	a5,-32(s0)
800027dc:	0287a783          	lw	a5,40(a5)
800027e0:	00078a63          	beqz	a5,800027f4 <xTaskIncrementTick+0x108>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2016
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
800027e4:	fe042783          	lw	a5,-32(s0)
800027e8:	01878793          	addi	a5,a5,24
800027ec:	00078513          	mv	a0,a5
800027f0:	dacff0ef          	jal	ra,80001d9c <uxListRemove>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
800027f4:	fe042783          	lw	a5,-32(s0)
800027f8:	02c7a703          	lw	a4,44(a5)
800027fc:	9441a783          	lw	a5,-1724(gp) # 80008ef4 <uxTopReadyPriority>
80002800:	00e7f863          	bleu	a4,a5,80002810 <xTaskIncrementTick+0x124>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 1)
80002804:	fe042783          	lw	a5,-32(s0)
80002808:	02c7a703          	lw	a4,44(a5)
8000280c:	94e1a223          	sw	a4,-1724(gp) # 80008ef4 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 3)
80002810:	fe042783          	lw	a5,-32(s0)
80002814:	02c7a703          	lw	a4,44(a5)
80002818:	00070793          	mv	a5,a4
8000281c:	00279793          	slli	a5,a5,0x2
80002820:	00e787b3          	add	a5,a5,a4
80002824:	00279793          	slli	a5,a5,0x2
80002828:	80022737          	lui	a4,0x80022
8000282c:	f5070713          	addi	a4,a4,-176 # 80021f50 <__stack_top+0xfffdb7e0>
80002830:	00e78733          	add	a4,a5,a4
80002834:	fe042783          	lw	a5,-32(s0)
80002838:	00478793          	addi	a5,a5,4
8000283c:	00078593          	mv	a1,a5
80002840:	00070513          	mv	a0,a4
80002844:	bfcff0ef          	jal	ra,80001c40 <vListInsertEnd>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2035 (discriminator 3)
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80002848:	fe042783          	lw	a5,-32(s0)
8000284c:	02c7a703          	lw	a4,44(a5)
80002850:	92c1a783          	lw	a5,-1748(gp) # 80008edc <pxCurrentTCB>
80002854:	02c7a783          	lw	a5,44(a5)
80002858:	f0f76ae3          	bltu	a4,a5,8000276c <xTaskIncrementTick+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2037
							{
								xSwitchRequired = pdTRUE;
8000285c:	00100793          	li	a5,1
80002860:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80002864:	f09ff06f          	j	8000276c <xTaskIncrementTick+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2055
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
80002868:	92c1a783          	lw	a5,-1748(gp) # 80008edc <pxCurrentTCB>
8000286c:	02c7a703          	lw	a4,44(a5)
80002870:	800226b7          	lui	a3,0x80022
80002874:	00070793          	mv	a5,a4
80002878:	00279793          	slli	a5,a5,0x2
8000287c:	00e787b3          	add	a5,a5,a4
80002880:	00279793          	slli	a5,a5,0x2
80002884:	f5068713          	addi	a4,a3,-176 # 80021f50 <__stack_top+0xfffdb7e0>
80002888:	00e787b3          	add	a5,a5,a4
8000288c:	0007a703          	lw	a4,0(a5)
80002890:	00100793          	li	a5,1
80002894:	00e7fe63          	bleu	a4,a5,800028b0 <xTaskIncrementTick+0x1c4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2057
			{
				xSwitchRequired = pdTRUE;
80002898:	00100793          	li	a5,1
8000289c:	fef42623          	sw	a5,-20(s0)
800028a0:	0100006f          	j	800028b0 <xTaskIncrementTick+0x1c4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2083
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
800028a4:	94c1a783          	lw	a5,-1716(gp) # 80008efc <uxPendedTicks>
800028a8:	00178713          	addi	a4,a5,1
800028ac:	94e1a623          	sw	a4,-1716(gp) # 80008efc <uxPendedTicks>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2096
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
800028b0:	9501a783          	lw	a5,-1712(gp) # 80008f00 <xYieldPending>
800028b4:	00078663          	beqz	a5,800028c0 <xTaskIncrementTick+0x1d4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2098
		{
			xSwitchRequired = pdTRUE;
800028b8:	00100793          	li	a5,1
800028bc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2107
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
800028c0:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2108
}
800028c4:	00078513          	mv	a0,a5
800028c8:	02c12083          	lw	ra,44(sp)
800028cc:	02812403          	lw	s0,40(sp)
800028d0:	03010113          	addi	sp,sp,48
800028d4:	00008067          	ret

800028d8 <vTaskSwitchContext>:
vTaskSwitchContext():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2202

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
800028d8:	fe010113          	addi	sp,sp,-32
800028dc:	00812e23          	sw	s0,28(sp)
800028e0:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2203
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
800028e4:	9601a783          	lw	a5,-1696(gp) # 80008f10 <uxSchedulerSuspended>
800028e8:	00078863          	beqz	a5,800028f8 <vTaskSwitchContext+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2207
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
800028ec:	00100713          	li	a4,1
800028f0:	94e1a823          	sw	a4,-1712(gp) # 80008f00 <xYieldPending>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
800028f4:	0c00006f          	j	800029b4 <vTaskSwitchContext+0xdc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2211
		xYieldPending = pdFALSE;
800028f8:	9401a823          	sw	zero,-1712(gp) # 80008f00 <xYieldPending>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246
		taskSELECT_HIGHEST_PRIORITY_TASK();
800028fc:	0200006f          	j	8000291c <vTaskSwitchContext+0x44>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 4)
80002900:	9441a783          	lw	a5,-1724(gp) # 80008ef4 <uxTopReadyPriority>
80002904:	00079663          	bnez	a5,80002910 <vTaskSwitchContext+0x38>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 1)
80002908:	30047073          	csrci	mstatus,8
8000290c:	0000006f          	j	8000290c <vTaskSwitchContext+0x34>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 2)
80002910:	9441a783          	lw	a5,-1724(gp) # 80008ef4 <uxTopReadyPriority>
80002914:	fff78713          	addi	a4,a5,-1
80002918:	94e1a223          	sw	a4,-1724(gp) # 80008ef4 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 3)
8000291c:	9441a703          	lw	a4,-1724(gp) # 80008ef4 <uxTopReadyPriority>
80002920:	800226b7          	lui	a3,0x80022
80002924:	00070793          	mv	a5,a4
80002928:	00279793          	slli	a5,a5,0x2
8000292c:	00e787b3          	add	a5,a5,a4
80002930:	00279793          	slli	a5,a5,0x2
80002934:	f5068713          	addi	a4,a3,-176 # 80021f50 <__stack_top+0xfffdb7e0>
80002938:	00e787b3          	add	a5,a5,a4
8000293c:	0007a783          	lw	a5,0(a5)
80002940:	fc0780e3          	beqz	a5,80002900 <vTaskSwitchContext+0x28>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 5)
80002944:	9441a703          	lw	a4,-1724(gp) # 80008ef4 <uxTopReadyPriority>
80002948:	00070793          	mv	a5,a4
8000294c:	00279793          	slli	a5,a5,0x2
80002950:	00e787b3          	add	a5,a5,a4
80002954:	00279793          	slli	a5,a5,0x2
80002958:	80022737          	lui	a4,0x80022
8000295c:	f5070713          	addi	a4,a4,-176 # 80021f50 <__stack_top+0xfffdb7e0>
80002960:	00e787b3          	add	a5,a5,a4
80002964:	fef42623          	sw	a5,-20(s0)
80002968:	fec42783          	lw	a5,-20(s0)
8000296c:	0047a783          	lw	a5,4(a5)
80002970:	0047a703          	lw	a4,4(a5)
80002974:	fec42783          	lw	a5,-20(s0)
80002978:	00e7a223          	sw	a4,4(a5)
8000297c:	fec42783          	lw	a5,-20(s0)
80002980:	0047a703          	lw	a4,4(a5)
80002984:	fec42783          	lw	a5,-20(s0)
80002988:	00878793          	addi	a5,a5,8
8000298c:	00f71c63          	bne	a4,a5,800029a4 <vTaskSwitchContext+0xcc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 6)
80002990:	fec42783          	lw	a5,-20(s0)
80002994:	0047a783          	lw	a5,4(a5)
80002998:	0047a703          	lw	a4,4(a5)
8000299c:	fec42783          	lw	a5,-20(s0)
800029a0:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 8)
800029a4:	fec42783          	lw	a5,-20(s0)
800029a8:	0047a783          	lw	a5,4(a5)
800029ac:	00c7a703          	lw	a4,12(a5)
800029b0:	92e1a623          	sw	a4,-1748(gp) # 80008edc <pxCurrentTCB>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
}
800029b4:	00000013          	nop
800029b8:	01c12403          	lw	s0,28(sp)
800029bc:	02010113          	addi	sp,sp,32
800029c0:	00008067          	ret

800029c4 <prvIdleTask>:
prvIdleTask():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2689
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
800029c4:	fe010113          	addi	sp,sp,-32
800029c8:	00112e23          	sw	ra,28(sp)
800029cc:	00812c23          	sw	s0,24(sp)
800029d0:	02010413          	addi	s0,sp,32
800029d4:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
800029d8:	218000ef          	jal	ra,80002bf0 <prvCheckTasksWaitingTermination>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2719

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
800029dc:	800227b7          	lui	a5,0x80022
800029e0:	f507a703          	lw	a4,-176(a5) # 80021f50 <__stack_top+0xfffdb7e0>
800029e4:	00100793          	li	a5,1
800029e8:	00e7f463          	bleu	a4,a5,800029f0 <prvIdleTask+0x2c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2721
			{
				taskYIELD();
800029ec:	9a0ff0ef          	jal	ra,80001b8c <vPortYield>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2739
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
800029f0:	728050ef          	jal	ra,80008118 <vApplicationIdleHook>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
		prvCheckTasksWaitingTermination();
800029f4:	fe5ff06f          	j	800029d8 <prvIdleTask+0x14>

800029f8 <prvInitialiseTCBVariables>:
prvInitialiseTCBVariables():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2832

#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
800029f8:	fc010113          	addi	sp,sp,-64
800029fc:	02112e23          	sw	ra,60(sp)
80002a00:	02812c23          	sw	s0,56(sp)
80002a04:	04010413          	addi	s0,sp,64
80002a08:	fca42e23          	sw	a0,-36(s0)
80002a0c:	fcb42c23          	sw	a1,-40(s0)
80002a10:	fcc42a23          	sw	a2,-44(s0)
80002a14:	fcd42823          	sw	a3,-48(s0)
80002a18:	00070793          	mv	a5,a4
80002a1c:	fcf41723          	sh	a5,-50(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
80002a20:	fe042623          	sw	zero,-20(s0)
80002a24:	0440006f          	j	80002a68 <prvInitialiseTCBVariables+0x70>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2838
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
80002a28:	fd842703          	lw	a4,-40(s0)
80002a2c:	fec42783          	lw	a5,-20(s0)
80002a30:	00f707b3          	add	a5,a4,a5
80002a34:	00078703          	lb	a4,0(a5)
80002a38:	fdc42683          	lw	a3,-36(s0)
80002a3c:	fec42783          	lw	a5,-20(s0)
80002a40:	00f687b3          	add	a5,a3,a5
80002a44:	02e78a23          	sb	a4,52(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2843

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
80002a48:	fd842703          	lw	a4,-40(s0)
80002a4c:	fec42783          	lw	a5,-20(s0)
80002a50:	00f707b3          	add	a5,a4,a5
80002a54:	00078783          	lb	a5,0(a5)
80002a58:	02078063          	beqz	a5,80002a78 <prvInitialiseTCBVariables+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 2)
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
80002a5c:	fec42783          	lw	a5,-20(s0)
80002a60:	00178793          	addi	a5,a5,1
80002a64:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 1)
80002a68:	fec42703          	lw	a4,-20(s0)
80002a6c:	00f00793          	li	a5,15
80002a70:	fae7fce3          	bleu	a4,a5,80002a28 <prvInitialiseTCBVariables+0x30>
80002a74:	0080006f          	j	80002a7c <prvInitialiseTCBVariables+0x84>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2845
		{
			break;
80002a78:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2855
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
80002a7c:	fdc42783          	lw	a5,-36(s0)
80002a80:	040781a3          	sb	zero,67(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2859

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
80002a84:	fd442703          	lw	a4,-44(s0)
80002a88:	00400793          	li	a5,4
80002a8c:	00e7f663          	bleu	a4,a5,80002a98 <prvInitialiseTCBVariables+0xa0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2861
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
80002a90:	00400793          	li	a5,4
80002a94:	fcf42a23          	sw	a5,-44(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2868
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
80002a98:	fdc42783          	lw	a5,-36(s0)
80002a9c:	fd442703          	lw	a4,-44(s0)
80002aa0:	02e7a623          	sw	a4,44(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2871
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
80002aa4:	fdc42783          	lw	a5,-36(s0)
80002aa8:	fd442703          	lw	a4,-44(s0)
80002aac:	04e7a823          	sw	a4,80(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2872
		pxTCB->uxMutexesHeld = 0;
80002ab0:	fdc42783          	lw	a5,-36(s0)
80002ab4:	0407aa23          	sw	zero,84(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2876
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
80002ab8:	fdc42783          	lw	a5,-36(s0)
80002abc:	00478793          	addi	a5,a5,4
80002ac0:	00078513          	mv	a0,a5
80002ac4:	954ff0ef          	jal	ra,80001c18 <vListInitialiseItem>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2877
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
80002ac8:	fdc42783          	lw	a5,-36(s0)
80002acc:	01878793          	addi	a5,a5,24
80002ad0:	00078513          	mv	a0,a5
80002ad4:	944ff0ef          	jal	ra,80001c18 <vListInitialiseItem>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2881

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
80002ad8:	fdc42783          	lw	a5,-36(s0)
80002adc:	fdc42703          	lw	a4,-36(s0)
80002ae0:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2884

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80002ae4:	00500713          	li	a4,5
80002ae8:	fd442783          	lw	a5,-44(s0)
80002aec:	40f70733          	sub	a4,a4,a5
80002af0:	fdc42783          	lw	a5,-36(s0)
80002af4:	00e7ac23          	sw	a4,24(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2885
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
80002af8:	fdc42783          	lw	a5,-36(s0)
80002afc:	fdc42703          	lw	a4,-36(s0)
80002b00:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2889

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
80002b04:	fdc42783          	lw	a5,-36(s0)
80002b08:	0407a223          	sw	zero,68(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2927
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
80002b0c:	fdc42783          	lw	a5,-36(s0)
80002b10:	0407ac23          	sw	zero,88(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2928
		pxTCB->eNotifyState = eNotWaitingNotification;
80002b14:	fdc42783          	lw	a5,-36(s0)
80002b18:	0407ae23          	sw	zero,92(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2938
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
80002b1c:	00000013          	nop
80002b20:	03c12083          	lw	ra,60(sp)
80002b24:	03812403          	lw	s0,56(sp)
80002b28:	04010113          	addi	sp,sp,64
80002b2c:	00008067          	ret

80002b30 <prvInitialiseTaskLists>:
prvInitialiseTaskLists():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2997

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
80002b30:	fe010113          	addi	sp,sp,-32
80002b34:	00112e23          	sw	ra,28(sp)
80002b38:	00812c23          	sw	s0,24(sp)
80002b3c:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
80002b40:	fe042623          	sw	zero,-20(s0)
80002b44:	0380006f          	j	80002b7c <prvInitialiseTaskLists+0x4c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3002 (discriminator 3)
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
80002b48:	fec42703          	lw	a4,-20(s0)
80002b4c:	00070793          	mv	a5,a4
80002b50:	00279793          	slli	a5,a5,0x2
80002b54:	00e787b3          	add	a5,a5,a4
80002b58:	00279793          	slli	a5,a5,0x2
80002b5c:	80022737          	lui	a4,0x80022
80002b60:	f5070713          	addi	a4,a4,-176 # 80021f50 <__stack_top+0xfffdb7e0>
80002b64:	00e787b3          	add	a5,a5,a4
80002b68:	00078513          	mv	a0,a5
80002b6c:	848ff0ef          	jal	ra,80001bb4 <vListInitialise>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 3)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
80002b70:	fec42783          	lw	a5,-20(s0)
80002b74:	00178793          	addi	a5,a5,1
80002b78:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 1)
80002b7c:	fec42703          	lw	a4,-20(s0)
80002b80:	00400793          	li	a5,4
80002b84:	fce7f2e3          	bleu	a4,a5,80002b48 <prvInitialiseTaskLists+0x18>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3005
	}

	vListInitialise( &xDelayedTaskList1 );
80002b88:	800227b7          	lui	a5,0x80022
80002b8c:	fb478513          	addi	a0,a5,-76 # 80021fb4 <__stack_top+0xfffdb844>
80002b90:	824ff0ef          	jal	ra,80001bb4 <vListInitialise>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3006
	vListInitialise( &xDelayedTaskList2 );
80002b94:	800227b7          	lui	a5,0x80022
80002b98:	fc878513          	addi	a0,a5,-56 # 80021fc8 <__stack_top+0xfffdb858>
80002b9c:	818ff0ef          	jal	ra,80001bb4 <vListInitialise>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3007
	vListInitialise( &xPendingReadyList );
80002ba0:	800227b7          	lui	a5,0x80022
80002ba4:	fdc78513          	addi	a0,a5,-36 # 80021fdc <__stack_top+0xfffdb86c>
80002ba8:	80cff0ef          	jal	ra,80001bb4 <vListInitialise>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3011

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
80002bac:	800227b7          	lui	a5,0x80022
80002bb0:	ff078513          	addi	a0,a5,-16 # 80021ff0 <__stack_top+0xfffdb880>
80002bb4:	800ff0ef          	jal	ra,80001bb4 <vListInitialise>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3017
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
80002bb8:	800227b7          	lui	a5,0x80022
80002bbc:	00478513          	addi	a0,a5,4 # 80022004 <__stack_top+0xfffdb894>
80002bc0:	ff5fe0ef          	jal	ra,80001bb4 <vListInitialise>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3023
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
80002bc4:	80022737          	lui	a4,0x80022
80002bc8:	fb470713          	addi	a4,a4,-76 # 80021fb4 <__stack_top+0xfffdb844>
80002bcc:	92e1a823          	sw	a4,-1744(gp) # 80008ee0 <pxDelayedTaskList>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3024
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
80002bd0:	80022737          	lui	a4,0x80022
80002bd4:	fc870713          	addi	a4,a4,-56 # 80021fc8 <__stack_top+0xfffdb858>
80002bd8:	92e1aa23          	sw	a4,-1740(gp) # 80008ee4 <pxOverflowDelayedTaskList>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3025
}
80002bdc:	00000013          	nop
80002be0:	01c12083          	lw	ra,28(sp)
80002be4:	01812403          	lw	s0,24(sp)
80002be8:	02010113          	addi	sp,sp,32
80002bec:	00008067          	ret

80002bf0 <prvCheckTasksWaitingTermination>:
prvCheckTasksWaitingTermination():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3029
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
80002bf0:	fe010113          	addi	sp,sp,-32
80002bf4:	00112e23          	sw	ra,28(sp)
80002bf8:	00812c23          	sw	s0,24(sp)
80002bfc:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
80002c00:	0740006f          	j	80002c74 <prvCheckTasksWaitingTermination+0x84>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3038
		{
			vTaskSuspendAll();
80002c04:	929ff0ef          	jal	ra,8000252c <vTaskSuspendAll>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3040
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
80002c08:	800227b7          	lui	a5,0x80022
80002c0c:	ff07a783          	lw	a5,-16(a5) # 80021ff0 <__stack_top+0xfffdb880>
80002c10:	0017b793          	seqz	a5,a5
80002c14:	0ff7f793          	andi	a5,a5,255
80002c18:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3042
			}
			( void ) xTaskResumeAll();
80002c1c:	939ff0ef          	jal	ra,80002554 <xTaskResumeAll>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3044

			if( xListIsEmpty == pdFALSE )
80002c20:	fec42783          	lw	a5,-20(s0)
80002c24:	04079863          	bnez	a5,80002c74 <prvCheckTasksWaitingTermination+0x84>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3048
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
80002c28:	a29fe0ef          	jal	ra,80001650 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3050
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
80002c2c:	800227b7          	lui	a5,0x80022
80002c30:	ff078793          	addi	a5,a5,-16 # 80021ff0 <__stack_top+0xfffdb880>
80002c34:	00c7a783          	lw	a5,12(a5)
80002c38:	00c7a783          	lw	a5,12(a5)
80002c3c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3051
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80002c40:	fe842783          	lw	a5,-24(s0)
80002c44:	00478793          	addi	a5,a5,4
80002c48:	00078513          	mv	a0,a5
80002c4c:	950ff0ef          	jal	ra,80001d9c <uxListRemove>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3052
					--uxCurrentNumberOfTasks;
80002c50:	93c1a783          	lw	a5,-1732(gp) # 80008eec <uxCurrentNumberOfTasks>
80002c54:	fff78713          	addi	a4,a5,-1
80002c58:	92e1ae23          	sw	a4,-1732(gp) # 80008eec <uxCurrentNumberOfTasks>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3053
					--uxTasksDeleted;
80002c5c:	9381a783          	lw	a5,-1736(gp) # 80008ee8 <uxTasksDeleted>
80002c60:	fff78713          	addi	a4,a5,-1
80002c64:	92e1ac23          	sw	a4,-1736(gp) # 80008ee8 <uxTasksDeleted>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3055
				}
				taskEXIT_CRITICAL();
80002c68:	a1dfe0ef          	jal	ra,80001684 <vPortExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3057

				prvDeleteTCB( pxTCB );
80002c6c:	fe842503          	lw	a0,-24(s0)
80002c70:	168000ef          	jal	ra,80002dd8 <prvDeleteTCB>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
80002c74:	9381a783          	lw	a5,-1736(gp) # 80008ee8 <uxTasksDeleted>
80002c78:	f80796e3          	bnez	a5,80002c04 <prvCheckTasksWaitingTermination+0x14>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3066
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
80002c7c:	00000013          	nop
80002c80:	01c12083          	lw	ra,28(sp)
80002c84:	01812403          	lw	s0,24(sp)
80002c88:	02010113          	addi	sp,sp,32
80002c8c:	00008067          	ret

80002c90 <prvAddCurrentTaskToDelayedList>:
prvAddCurrentTaskToDelayedList():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3070
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
80002c90:	fe010113          	addi	sp,sp,-32
80002c94:	00112e23          	sw	ra,28(sp)
80002c98:	00812c23          	sw	s0,24(sp)
80002c9c:	02010413          	addi	s0,sp,32
80002ca0:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3072
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
80002ca4:	92c1a783          	lw	a5,-1748(gp) # 80008edc <pxCurrentTCB>
80002ca8:	fec42703          	lw	a4,-20(s0)
80002cac:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3074

	if( xTimeToWake < xTickCount )
80002cb0:	9401a783          	lw	a5,-1728(gp) # 80008ef0 <xTickCount>
80002cb4:	fec42703          	lw	a4,-20(s0)
80002cb8:	02f77063          	bleu	a5,a4,80002cd8 <prvAddCurrentTaskToDelayedList+0x48>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3077
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80002cbc:	9341a703          	lw	a4,-1740(gp) # 80008ee4 <pxOverflowDelayedTaskList>
80002cc0:	92c1a783          	lw	a5,-1748(gp) # 80008edc <pxCurrentTCB>
80002cc4:	00478793          	addi	a5,a5,4
80002cc8:	00078593          	mv	a1,a5
80002ccc:	00070513          	mv	a0,a4
80002cd0:	ff9fe0ef          	jal	ra,80001cc8 <vListInsert>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
80002cd4:	0300006f          	j	80002d04 <prvAddCurrentTaskToDelayedList+0x74>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3082
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80002cd8:	9301a703          	lw	a4,-1744(gp) # 80008ee0 <pxDelayedTaskList>
80002cdc:	92c1a783          	lw	a5,-1748(gp) # 80008edc <pxCurrentTCB>
80002ce0:	00478793          	addi	a5,a5,4
80002ce4:	00078593          	mv	a1,a5
80002ce8:	00070513          	mv	a0,a4
80002cec:	fddfe0ef          	jal	ra,80001cc8 <vListInsert>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3087
		if( xTimeToWake < xNextTaskUnblockTime )
80002cf0:	95c1a783          	lw	a5,-1700(gp) # 80008f0c <xNextTaskUnblockTime>
80002cf4:	fec42703          	lw	a4,-20(s0)
80002cf8:	00f77663          	bleu	a5,a4,80002d04 <prvAddCurrentTaskToDelayedList+0x74>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3089
			xNextTaskUnblockTime = xTimeToWake;
80002cfc:	fec42703          	lw	a4,-20(s0)
80002d00:	94e1ae23          	sw	a4,-1700(gp) # 80008f0c <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
}
80002d04:	00000013          	nop
80002d08:	01c12083          	lw	ra,28(sp)
80002d0c:	01812403          	lw	s0,24(sp)
80002d10:	02010113          	addi	sp,sp,32
80002d14:	00008067          	ret

80002d18 <prvAllocateTCBAndStack>:
prvAllocateTCBAndStack():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3100
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
80002d18:	fd010113          	addi	sp,sp,-48
80002d1c:	02112623          	sw	ra,44(sp)
80002d20:	02812423          	sw	s0,40(sp)
80002d24:	03010413          	addi	s0,sp,48
80002d28:	00050793          	mv	a5,a0
80002d2c:	fcb42c23          	sw	a1,-40(s0)
80002d30:	fcf41f23          	sh	a5,-34(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80002d34:	fd842783          	lw	a5,-40(s0)
80002d38:	00079e63          	bnez	a5,80002d54 <prvAllocateTCBAndStack+0x3c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 1)
80002d3c:	fde45783          	lhu	a5,-34(s0)
80002d40:	00279793          	slli	a5,a5,0x2
80002d44:	00078513          	mv	a0,a5
80002d48:	da0fe0ef          	jal	ra,800012e8 <pvPortMalloc>
80002d4c:	00050793          	mv	a5,a0
80002d50:	0080006f          	j	80002d58 <prvAllocateTCBAndStack+0x40>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 2)
80002d54:	fd842783          	lw	a5,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 4)
80002d58:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3134 (discriminator 4)

		if( pxStack != NULL )
80002d5c:	fe842783          	lw	a5,-24(s0)
80002d60:	02078a63          	beqz	a5,80002d94 <prvAllocateTCBAndStack+0x7c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3138
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
80002d64:	06000513          	li	a0,96
80002d68:	d80fe0ef          	jal	ra,800012e8 <pvPortMalloc>
80002d6c:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3140

			if( pxNewTCB != NULL )
80002d70:	fec42783          	lw	a5,-20(s0)
80002d74:	00078a63          	beqz	a5,80002d88 <prvAllocateTCBAndStack+0x70>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3143
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
80002d78:	fec42783          	lw	a5,-20(s0)
80002d7c:	fe842703          	lw	a4,-24(s0)
80002d80:	02e7a823          	sw	a4,48(a5)
80002d84:	0140006f          	j	80002d98 <prvAllocateTCBAndStack+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3149
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
80002d88:	fe842503          	lw	a0,-24(s0)
80002d8c:	f38fe0ef          	jal	ra,800014c4 <vPortFree>
80002d90:	0080006f          	j	80002d98 <prvAllocateTCBAndStack+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3154
			}
		}
		else
		{
			pxNewTCB = NULL;
80002d94:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3159
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
80002d98:	fec42783          	lw	a5,-20(s0)
80002d9c:	02078263          	beqz	a5,80002dc0 <prvAllocateTCBAndStack+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3165
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
80002da0:	fec42783          	lw	a5,-20(s0)
80002da4:	0307a703          	lw	a4,48(a5)
80002da8:	fde45783          	lhu	a5,-34(s0)
80002dac:	00279793          	slli	a5,a5,0x2
80002db0:	00078613          	mv	a2,a5
80002db4:	0a500593          	li	a1,165
80002db8:	00070513          	mv	a0,a4
80002dbc:	878ff0ef          	jal	ra,80001e34 <memset>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3170
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
80002dc0:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3171
}
80002dc4:	00078513          	mv	a0,a5
80002dc8:	02c12083          	lw	ra,44(sp)
80002dcc:	02812403          	lw	s0,40(sp)
80002dd0:	03010113          	addi	sp,sp,48
80002dd4:	00008067          	ret

80002dd8 <prvDeleteTCB>:
prvDeleteTCB():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3310
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
80002dd8:	fe010113          	addi	sp,sp,-32
80002ddc:	00112e23          	sw	ra,28(sp)
80002de0:	00812c23          	sw	s0,24(sp)
80002de4:	02010413          	addi	s0,sp,32
80002de8:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3335
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
80002dec:	fec42783          	lw	a5,-20(s0)
80002df0:	0307a783          	lw	a5,48(a5)
80002df4:	00078513          	mv	a0,a5
80002df8:	eccfe0ef          	jal	ra,800014c4 <vPortFree>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3339
		}
		#endif

		vPortFree( pxTCB );
80002dfc:	fec42503          	lw	a0,-20(s0)
80002e00:	ec4fe0ef          	jal	ra,800014c4 <vPortFree>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3340
	}
80002e04:	00000013          	nop
80002e08:	01c12083          	lw	ra,28(sp)
80002e0c:	01812403          	lw	s0,24(sp)
80002e10:	02010113          	addi	sp,sp,32
80002e14:	00008067          	ret

80002e18 <prvResetNextTaskUnblockTime>:
prvResetNextTaskUnblockTime():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3346

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
80002e18:	fe010113          	addi	sp,sp,-32
80002e1c:	00812e23          	sw	s0,28(sp)
80002e20:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80002e24:	9301a783          	lw	a5,-1744(gp) # 80008ee0 <pxDelayedTaskList>
80002e28:	0007a783          	lw	a5,0(a5)
80002e2c:	00079663          	bnez	a5,80002e38 <prvResetNextTaskUnblockTime+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 1)
80002e30:	00100793          	li	a5,1
80002e34:	0080006f          	j	80002e3c <prvResetNextTaskUnblockTime+0x24>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 2)
80002e38:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 4)
80002e3c:	00078863          	beqz	a5,80002e4c <prvResetNextTaskUnblockTime+0x34>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3355
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
80002e40:	fff00713          	li	a4,-1
80002e44:	94e1ae23          	sw	a4,-1700(gp) # 80008f0c <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
80002e48:	0200006f          	j	80002e68 <prvResetNextTaskUnblockTime+0x50>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3363
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80002e4c:	9301a783          	lw	a5,-1744(gp) # 80008ee0 <pxDelayedTaskList>
80002e50:	00c7a783          	lw	a5,12(a5)
80002e54:	00c7a783          	lw	a5,12(a5)
80002e58:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3364
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
80002e5c:	fec42783          	lw	a5,-20(s0)
80002e60:	0047a703          	lw	a4,4(a5)
80002e64:	94e1ae23          	sw	a4,-1700(gp) # 80008f0c <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
}
80002e68:	00000013          	nop
80002e6c:	01c12403          	lw	s0,28(sp)
80002e70:	02010113          	addi	sp,sp,32
80002e74:	00008067          	ret

80002e78 <xTaskGetCurrentTaskHandle>:
xTaskGetCurrentTaskHandle():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3372
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
80002e78:	fe010113          	addi	sp,sp,-32
80002e7c:	00812e23          	sw	s0,28(sp)
80002e80:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3378
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
80002e84:	92c1a783          	lw	a5,-1748(gp) # 80008edc <pxCurrentTCB>
80002e88:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3380

		return xReturn;
80002e8c:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3381
	}
80002e90:	00078513          	mv	a0,a5
80002e94:	01c12403          	lw	s0,28(sp)
80002e98:	02010113          	addi	sp,sp,32
80002e9c:	00008067          	ret

80002ea0 <vTaskEnterCritical>:
vTaskEnterCritical():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3564
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
80002ea0:	ff010113          	addi	sp,sp,-16
80002ea4:	00812623          	sw	s0,12(sp)
80002ea8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3565
		portDISABLE_INTERRUPTS();
80002eac:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3567

		if( xSchedulerRunning != pdFALSE )
80002eb0:	9481a783          	lw	a5,-1720(gp) # 80008ef8 <xSchedulerRunning>
80002eb4:	00078c63          	beqz	a5,80002ecc <vTaskEnterCritical+0x2c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3569
		{
			( pxCurrentTCB->uxCriticalNesting )++;
80002eb8:	92c1a783          	lw	a5,-1748(gp) # 80008edc <pxCurrentTCB>
80002ebc:	0447a703          	lw	a4,68(a5)
80002ec0:	00170713          	addi	a4,a4,1
80002ec4:	04e7a223          	sw	a4,68(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3577
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
80002ec8:	92c1a783          	lw	a5,-1748(gp) # 80008edc <pxCurrentTCB>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3586
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80002ecc:	00000013          	nop
80002ed0:	00c12403          	lw	s0,12(sp)
80002ed4:	01010113          	addi	sp,sp,16
80002ed8:	00008067          	ret

80002edc <vTaskExitCritical>:
vTaskExitCritical():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3594
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
80002edc:	ff010113          	addi	sp,sp,-16
80002ee0:	00812623          	sw	s0,12(sp)
80002ee4:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3595
		if( xSchedulerRunning != pdFALSE )
80002ee8:	9481a783          	lw	a5,-1720(gp) # 80008ef8 <xSchedulerRunning>
80002eec:	02078863          	beqz	a5,80002f1c <vTaskExitCritical+0x40>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3597
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
80002ef0:	92c1a783          	lw	a5,-1748(gp) # 80008edc <pxCurrentTCB>
80002ef4:	0447a783          	lw	a5,68(a5)
80002ef8:	02078263          	beqz	a5,80002f1c <vTaskExitCritical+0x40>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3599
			{
				( pxCurrentTCB->uxCriticalNesting )--;
80002efc:	92c1a783          	lw	a5,-1748(gp) # 80008edc <pxCurrentTCB>
80002f00:	0447a703          	lw	a4,68(a5)
80002f04:	fff70713          	addi	a4,a4,-1
80002f08:	04e7a223          	sw	a4,68(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3601

				if( pxCurrentTCB->uxCriticalNesting == 0U )
80002f0c:	92c1a783          	lw	a5,-1748(gp) # 80008edc <pxCurrentTCB>
80002f10:	0447a783          	lw	a5,68(a5)
80002f14:	00079463          	bnez	a5,80002f1c <vTaskExitCritical+0x40>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3603
				{
					portENABLE_INTERRUPTS();
80002f18:	30046073          	csrsi	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3619
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80002f1c:	00000013          	nop
80002f20:	00c12403          	lw	s0,12(sp)
80002f24:	01010113          	addi	sp,sp,16
80002f28:	00008067          	ret

80002f2c <API_RepositoryWakeUp>:
API_RepositoryWakeUp():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:10
#include "packet.h"
#include "services.h"

////////////////////////////////////////////////////////////
// Informs the Repository that the GLOBALMASTER is ready to receive the application info
void API_RepositoryWakeUp(){
80002f2c:	fe010113          	addi	sp,sp,-32
80002f30:	00112e23          	sw	ra,28(sp)
80002f34:	00812c23          	sw	s0,24(sp)
80002f38:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:13
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80002f3c:	308020ef          	jal	ra,80005244 <API_GetServiceSlot>
80002f40:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:14
        if(mySlot == PIPE_FULL){
80002f44:	fec42703          	lw	a4,-20(s0)
80002f48:	fdfe07b7          	lui	a5,0xfdfe0
80002f4c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9968d>
80002f50:	00f71463          	bne	a4,a5,80002f58 <API_RepositoryWakeUp+0x2c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:16
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80002f54:	614040ef          	jal	ra,80007568 <API_NI_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:18
        }
    }while(mySlot == PIPE_FULL);
80002f58:	fec42703          	lw	a4,-20(s0)
80002f5c:	fdfe07b7          	lui	a5,0xfdfe0
80002f60:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9968d>
80002f64:	fcf70ce3          	beq	a4,a5,80002f3c <API_RepositoryWakeUp+0x10>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:21
    //printsv("I got a free service slot!! -> ", mySlot);

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80002f68:	800227b7          	lui	a5,0x80022
80002f6c:	fec42703          	lw	a4,-20(s0)
80002f70:	01c78693          	addi	a3,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
80002f74:	00070793          	mv	a5,a4
80002f78:	00479793          	slli	a5,a5,0x4
80002f7c:	40e787b3          	sub	a5,a5,a4
80002f80:	00279793          	slli	a5,a5,0x2
80002f84:	00f687b3          	add	a5,a3,a5
80002f88:	feff0737          	lui	a4,0xfeff0
80002f8c:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efa978e>
80002f90:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:23

    ServicePipe[mySlot].header.header       = makeAddress(0, 0) | PERIPH_SOUTH;
80002f94:	00000593          	li	a1,0
80002f98:	00000513          	li	a0,0
80002f9c:	558030ef          	jal	ra,800064f4 <makeAddress>
80002fa0:	00050713          	mv	a4,a0
80002fa4:	000407b7          	lui	a5,0x40
80002fa8:	00f766b3          	or	a3,a4,a5
80002fac:	800227b7          	lui	a5,0x80022
80002fb0:	fec42703          	lw	a4,-20(s0)
80002fb4:	01c78613          	addi	a2,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
80002fb8:	00070793          	mv	a5,a4
80002fbc:	00479793          	slli	a5,a5,0x4
80002fc0:	40e787b3          	sub	a5,a5,a4
80002fc4:	00279793          	slli	a5,a5,0x2
80002fc8:	00f607b3          	add	a5,a2,a5
80002fcc:	00d7a423          	sw	a3,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:24
    ServicePipe[mySlot].header.payload_size = PKT_SERVICE_SIZE;
80002fd0:	800227b7          	lui	a5,0x80022
80002fd4:	fec42703          	lw	a4,-20(s0)
80002fd8:	01c78693          	addi	a3,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
80002fdc:	00070793          	mv	a5,a4
80002fe0:	00479793          	slli	a5,a5,0x4
80002fe4:	40e787b3          	sub	a5,a5,a4
80002fe8:	00279793          	slli	a5,a5,0x2
80002fec:	00f687b3          	add	a5,a3,a5
80002ff0:	00b00713          	li	a4,11
80002ff4:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:25
    ServicePipe[mySlot].header.service      = REPOSITORY_WAKEUP;
80002ff8:	800227b7          	lui	a5,0x80022
80002ffc:	fec42703          	lw	a4,-20(s0)
80003000:	01c78693          	addi	a3,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
80003004:	00070793          	mv	a5,a4
80003008:	00479793          	slli	a5,a5,0x4
8000300c:	40e787b3          	sub	a5,a5,a4
80003010:	00279793          	slli	a5,a5,0x2
80003014:	00f687b3          	add	a5,a3,a5
80003018:	10000713          	li	a4,256
8000301c:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:27

    API_PushSendQueue(SERVICE, mySlot);
80003020:	fec42583          	lw	a1,-20(s0)
80003024:	10100537          	lui	a0,0x10100
80003028:	50c030ef          	jal	ra,80006534 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:28
    return;    
8000302c:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:29
}
80003030:	01c12083          	lw	ra,28(sp)
80003034:	01812403          	lw	s0,24(sp)
80003038:	02010113          	addi	sp,sp,32
8000303c:	00008067          	ret

80003040 <API_AddApplication>:
API_AddApplication():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:33

////////////////////////////////////////////////////////////
// Add one Application in the Execution Queue
void API_AddApplication(unsigned int appID, unsigned int appPeriod, unsigned int appExec, unsigned int appNTasks){
80003040:	fd010113          	addi	sp,sp,-48
80003044:	02112623          	sw	ra,44(sp)
80003048:	02812423          	sw	s0,40(sp)
8000304c:	03010413          	addi	s0,sp,48
80003050:	fca42e23          	sw	a0,-36(s0)
80003054:	fcb42c23          	sw	a1,-40(s0)
80003058:	fcc42a23          	sw	a2,-44(s0)
8000305c:	fcd42823          	sw	a3,-48(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:34
    int slot = API_GetApplicationFreeSlot();
80003060:	1c4000ef          	jal	ra,80003224 <API_GetApplicationFreeSlot>
80003064:	00050793          	mv	a5,a0
80003068:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:35
    applications[slot].occupied = TRUE;
8000306c:	800226b7          	lui	a3,0x80022
80003070:	fec42703          	lw	a4,-20(s0)
80003074:	00070793          	mv	a5,a4
80003078:	00279793          	slli	a5,a5,0x2
8000307c:	00e787b3          	add	a5,a5,a4
80003080:	00579793          	slli	a5,a5,0x5
80003084:	62c68713          	addi	a4,a3,1580 # 8002262c <__stack_top+0xfffdbebc>
80003088:	00e787b3          	add	a5,a5,a4
8000308c:	00100713          	li	a4,1
80003090:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:36
    applications[slot].appID = appID;
80003094:	800227b7          	lui	a5,0x80022
80003098:	fec42703          	lw	a4,-20(s0)
8000309c:	62c78693          	addi	a3,a5,1580 # 8002262c <__stack_top+0xfffdbebc>
800030a0:	00070793          	mv	a5,a4
800030a4:	00279793          	slli	a5,a5,0x2
800030a8:	00e787b3          	add	a5,a5,a4
800030ac:	00579793          	slli	a5,a5,0x5
800030b0:	00f687b3          	add	a5,a3,a5
800030b4:	fdc42703          	lw	a4,-36(s0)
800030b8:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:37
    applications[slot].appPeriod = appPeriod;
800030bc:	800227b7          	lui	a5,0x80022
800030c0:	fec42703          	lw	a4,-20(s0)
800030c4:	62c78693          	addi	a3,a5,1580 # 8002262c <__stack_top+0xfffdbebc>
800030c8:	00070793          	mv	a5,a4
800030cc:	00279793          	slli	a5,a5,0x2
800030d0:	00e787b3          	add	a5,a5,a4
800030d4:	00579793          	slli	a5,a5,0x5
800030d8:	00f687b3          	add	a5,a3,a5
800030dc:	fd842703          	lw	a4,-40(s0)
800030e0:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:38
    applications[slot].appExec = appExec;
800030e4:	800227b7          	lui	a5,0x80022
800030e8:	fec42703          	lw	a4,-20(s0)
800030ec:	62c78693          	addi	a3,a5,1580 # 8002262c <__stack_top+0xfffdbebc>
800030f0:	00070793          	mv	a5,a4
800030f4:	00279793          	slli	a5,a5,0x2
800030f8:	00e787b3          	add	a5,a5,a4
800030fc:	00579793          	slli	a5,a5,0x5
80003100:	00f687b3          	add	a5,a3,a5
80003104:	fd442703          	lw	a4,-44(s0)
80003108:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:39
    applications[slot].numTasks = appNTasks;
8000310c:	800226b7          	lui	a3,0x80022
80003110:	fec42703          	lw	a4,-20(s0)
80003114:	00070793          	mv	a5,a4
80003118:	00279793          	slli	a5,a5,0x2
8000311c:	00e787b3          	add	a5,a5,a4
80003120:	00579793          	slli	a5,a5,0x5
80003124:	62c68713          	addi	a4,a3,1580 # 8002262c <__stack_top+0xfffdbebc>
80003128:	00e787b3          	add	a5,a5,a4
8000312c:	fd042703          	lw	a4,-48(s0)
80003130:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:40
    applications[slot].nextRun = xTaskGetTickCount() + appPeriod;
80003134:	d80ff0ef          	jal	ra,800026b4 <xTaskGetTickCount>
80003138:	00050713          	mv	a4,a0
8000313c:	fd842783          	lw	a5,-40(s0)
80003140:	00f706b3          	add	a3,a4,a5
80003144:	800227b7          	lui	a5,0x80022
80003148:	fec42703          	lw	a4,-20(s0)
8000314c:	62c78613          	addi	a2,a5,1580 # 8002262c <__stack_top+0xfffdbebc>
80003150:	00070793          	mv	a5,a4
80003154:	00279793          	slli	a5,a5,0x2
80003158:	00e787b3          	add	a5,a5,a4
8000315c:	00579793          	slli	a5,a5,0x5
80003160:	00f607b3          	add	a5,a2,a5
80003164:	08d7a623          	sw	a3,140(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:41
    applications[slot].executed = 0;
80003168:	800226b7          	lui	a3,0x80022
8000316c:	fec42703          	lw	a4,-20(s0)
80003170:	00070793          	mv	a5,a4
80003174:	00279793          	slli	a5,a5,0x2
80003178:	00e787b3          	add	a5,a5,a4
8000317c:	00579793          	slli	a5,a5,0x5
80003180:	62c68713          	addi	a4,a3,1580 # 8002262c <__stack_top+0xfffdbebc>
80003184:	00e787b3          	add	a5,a5,a4
80003188:	0807a823          	sw	zero,144(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:42
    applications[slot].lastStart = -1;
8000318c:	800227b7          	lui	a5,0x80022
80003190:	fec42703          	lw	a4,-20(s0)
80003194:	62c78693          	addi	a3,a5,1580 # 8002262c <__stack_top+0xfffdbebc>
80003198:	00070793          	mv	a5,a4
8000319c:	00279793          	slli	a5,a5,0x2
800031a0:	00e787b3          	add	a5,a5,a4
800031a4:	00579793          	slli	a5,a5,0x5
800031a8:	00f687b3          	add	a5,a3,a5
800031ac:	fff00713          	li	a4,-1
800031b0:	08e7aa23          	sw	a4,148(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:43
    applications[slot].finishedTasks = 0;
800031b4:	800227b7          	lui	a5,0x80022
800031b8:	fec42703          	lw	a4,-20(s0)
800031bc:	62c78693          	addi	a3,a5,1580 # 8002262c <__stack_top+0xfffdbebc>
800031c0:	00070793          	mv	a5,a4
800031c4:	00279793          	slli	a5,a5,0x2
800031c8:	00e787b3          	add	a5,a5,a4
800031cc:	00579793          	slli	a5,a5,0x5
800031d0:	00f687b3          	add	a5,a3,a5
800031d4:	0807ac23          	sw	zero,152(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:44
    applications[slot].lastFinish = 0;
800031d8:	800227b7          	lui	a5,0x80022
800031dc:	fec42703          	lw	a4,-20(s0)
800031e0:	62c78693          	addi	a3,a5,1580 # 8002262c <__stack_top+0xfffdbebc>
800031e4:	00070793          	mv	a5,a4
800031e8:	00279793          	slli	a5,a5,0x2
800031ec:	00e787b3          	add	a5,a5,a4
800031f0:	00579793          	slli	a5,a5,0x5
800031f4:	00f687b3          	add	a5,a3,a5
800031f8:	0807ae23          	sw	zero,156(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:45
    printsv("New application registered - ID: ", appID);
800031fc:	fdc42783          	lw	a5,-36(s0)
80003200:	00078593          	mv	a1,a5
80003204:	800087b7          	lui	a5,0x80008
80003208:	41078513          	addi	a0,a5,1040 # 80008410 <__stack_top+0xfffc1ca0>
8000320c:	6cd020ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:46
    return;
80003210:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:47
}
80003214:	02c12083          	lw	ra,44(sp)
80003218:	02812403          	lw	s0,40(sp)
8000321c:	03010113          	addi	sp,sp,48
80003220:	00008067          	ret

80003224 <API_GetApplicationFreeSlot>:
API_GetApplicationFreeSlot():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:65
}


////////////////////////////////////////////////////////////
// Gets an application slot that is free
unsigned int API_GetApplicationFreeSlot(){
80003224:	fe010113          	addi	sp,sp,-32
80003228:	00112e23          	sw	ra,28(sp)
8000322c:	00812c23          	sw	s0,24(sp)
80003230:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:67
    int i;
    for (i = 0; i < NUM_MAX_APPS; i++){
80003234:	fe042623          	sw	zero,-20(s0)
80003238:	0400006f          	j	80003278 <API_GetApplicationFreeSlot+0x54>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:68
        if (applications[i].occupied == FALSE){
8000323c:	800226b7          	lui	a3,0x80022
80003240:	fec42703          	lw	a4,-20(s0)
80003244:	00070793          	mv	a5,a4
80003248:	00279793          	slli	a5,a5,0x2
8000324c:	00e787b3          	add	a5,a5,a4
80003250:	00579793          	slli	a5,a5,0x5
80003254:	62c68713          	addi	a4,a3,1580 # 8002262c <__stack_top+0xfffdbebc>
80003258:	00e787b3          	add	a5,a5,a4
8000325c:	0007a783          	lw	a5,0(a5)
80003260:	00079663          	bnez	a5,8000326c <API_GetApplicationFreeSlot+0x48>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:69
            return i;
80003264:	fec42783          	lw	a5,-20(s0)
80003268:	02c0006f          	j	80003294 <API_GetApplicationFreeSlot+0x70>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:67 (discriminator 2)
    for (i = 0; i < NUM_MAX_APPS; i++){
8000326c:	fec42783          	lw	a5,-20(s0)
80003270:	00178793          	addi	a5,a5,1
80003274:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:67 (discriminator 1)
80003278:	fec42703          	lw	a4,-20(s0)
8000327c:	00b00793          	li	a5,11
80003280:	fae7dee3          	ble	a4,a5,8000323c <API_GetApplicationFreeSlot+0x18>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:72
        }
    }
    prints("returning erro4\n");
80003284:	800087b7          	lui	a5,0x80008
80003288:	44878513          	addi	a0,a5,1096 # 80008448 <__stack_top+0xfffc1cd8>
8000328c:	5a1020ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:73
    return ERRO;
80003290:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:74
}
80003294:	00078513          	mv	a0,a5
80003298:	01c12083          	lw	ra,28(sp)
8000329c:	01812403          	lw	s0,24(sp)
800032a0:	02010113          	addi	sp,sp,32
800032a4:	00008067          	ret

800032a8 <API_ApplicationsReset>:
API_ApplicationsReset():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:78

////////////////////////////////////////////////////////////
// Reset applications vector
void API_ApplicationsReset(){
800032a8:	fe010113          	addi	sp,sp,-32
800032ac:	00812e23          	sw	s0,28(sp)
800032b0:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:80
    int i;
    for (i = 0; i < NUM_MAX_APPS; i++){
800032b4:	fe042623          	sw	zero,-20(s0)
800032b8:	0340006f          	j	800032ec <API_ApplicationsReset+0x44>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:81 (discriminator 3)
        applications[i].occupied = FALSE;
800032bc:	800226b7          	lui	a3,0x80022
800032c0:	fec42703          	lw	a4,-20(s0)
800032c4:	00070793          	mv	a5,a4
800032c8:	00279793          	slli	a5,a5,0x2
800032cc:	00e787b3          	add	a5,a5,a4
800032d0:	00579793          	slli	a5,a5,0x5
800032d4:	62c68713          	addi	a4,a3,1580 # 8002262c <__stack_top+0xfffdbebc>
800032d8:	00e787b3          	add	a5,a5,a4
800032dc:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:80 (discriminator 3)
    for (i = 0; i < NUM_MAX_APPS; i++){
800032e0:	fec42783          	lw	a5,-20(s0)
800032e4:	00178793          	addi	a5,a5,1
800032e8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:80 (discriminator 1)
800032ec:	fec42703          	lw	a4,-20(s0)
800032f0:	00b00793          	li	a5,11
800032f4:	fce7d4e3          	ble	a4,a5,800032bc <API_ApplicationsReset+0x14>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:83
    }
    return;
800032f8:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:84
}
800032fc:	01c12403          	lw	s0,28(sp)
80003300:	02010113          	addi	sp,sp,32
80003304:	00008067          	ret

80003308 <API_TilesReset>:
API_TilesReset():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:88

////////////////////////////////////////////////////////////
// Initialize the Tiles Info
void API_TilesReset(){
80003308:	fe010113          	addi	sp,sp,-32
8000330c:	00812e23          	sw	s0,28(sp)
80003310:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90
    int i, m, n;
    for (m = 0; m < DIM_X; m++){
80003314:	fe042623          	sw	zero,-20(s0)
80003318:	0fc0006f          	j	80003414 <API_TilesReset+0x10c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:91
        for (n = 0; n < DIM_Y; n++){
8000331c:	fe042423          	sw	zero,-24(s0)
80003320:	0dc0006f          	j	800033fc <API_TilesReset+0xf4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:92 (discriminator 3)
            Tiles[m][n].temperature = 273;
80003324:	80023637          	lui	a2,0x80023
80003328:	fe842783          	lw	a5,-24(s0)
8000332c:	fec42683          	lw	a3,-20(s0)
80003330:	00078713          	mv	a4,a5
80003334:	00171713          	slli	a4,a4,0x1
80003338:	00f70733          	add	a4,a4,a5
8000333c:	00271793          	slli	a5,a4,0x2
80003340:	00078713          	mv	a4,a5
80003344:	00068793          	mv	a5,a3
80003348:	00379793          	slli	a5,a5,0x3
8000334c:	00d787b3          	add	a5,a5,a3
80003350:	00279793          	slli	a5,a5,0x2
80003354:	00f70733          	add	a4,a4,a5
80003358:	dd860793          	addi	a5,a2,-552 # 80022dd8 <__stack_top+0xfffdc668>
8000335c:	00f707b3          	add	a5,a4,a5
80003360:	11100713          	li	a4,273
80003364:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:93 (discriminator 3)
            Tiles[m][n].frequency = 1000;
80003368:	80023737          	lui	a4,0x80023
8000336c:	fe842783          	lw	a5,-24(s0)
80003370:	fec42683          	lw	a3,-20(s0)
80003374:	dd870613          	addi	a2,a4,-552 # 80022dd8 <__stack_top+0xfffdc668>
80003378:	00078713          	mv	a4,a5
8000337c:	00171713          	slli	a4,a4,0x1
80003380:	00f70733          	add	a4,a4,a5
80003384:	00271793          	slli	a5,a4,0x2
80003388:	00078713          	mv	a4,a5
8000338c:	00068793          	mv	a5,a3
80003390:	00379793          	slli	a5,a5,0x3
80003394:	00d787b3          	add	a5,a5,a3
80003398:	00279793          	slli	a5,a5,0x2
8000339c:	00f707b3          	add	a5,a4,a5
800033a0:	00f607b3          	add	a5,a2,a5
800033a4:	3e800713          	li	a4,1000
800033a8:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:94 (discriminator 3)
            Tiles[m][n].taskSlots = NUM_MAX_TASKS;
800033ac:	80023737          	lui	a4,0x80023
800033b0:	fe842783          	lw	a5,-24(s0)
800033b4:	fec42683          	lw	a3,-20(s0)
800033b8:	dd870613          	addi	a2,a4,-552 # 80022dd8 <__stack_top+0xfffdc668>
800033bc:	00078713          	mv	a4,a5
800033c0:	00171713          	slli	a4,a4,0x1
800033c4:	00f70733          	add	a4,a4,a5
800033c8:	00271793          	slli	a5,a4,0x2
800033cc:	00078713          	mv	a4,a5
800033d0:	00068793          	mv	a5,a3
800033d4:	00379793          	slli	a5,a5,0x3
800033d8:	00d787b3          	add	a5,a5,a3
800033dc:	00279793          	slli	a5,a5,0x2
800033e0:	00f707b3          	add	a5,a4,a5
800033e4:	00f607b3          	add	a5,a2,a5
800033e8:	00600713          	li	a4,6
800033ec:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:91 (discriminator 3)
        for (n = 0; n < DIM_Y; n++){
800033f0:	fe842783          	lw	a5,-24(s0)
800033f4:	00178793          	addi	a5,a5,1
800033f8:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:91 (discriminator 1)
800033fc:	fe842703          	lw	a4,-24(s0)
80003400:	00200793          	li	a5,2
80003404:	f2e7d0e3          	ble	a4,a5,80003324 <API_TilesReset+0x1c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90 (discriminator 2)
    for (m = 0; m < DIM_X; m++){
80003408:	fec42783          	lw	a5,-20(s0)
8000340c:	00178793          	addi	a5,a5,1
80003410:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90 (discriminator 1)
80003414:	fec42703          	lw	a4,-20(s0)
80003418:	00200793          	li	a5,2
8000341c:	f0e7d0e3          	ble	a4,a5,8000331c <API_TilesReset+0x14>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:100
            /*for(i = 0; i < NUM_MAX_TASKS; i++){
                Tiles[m][n].AppTask[i] = NONE;
            }*/
        }
    }    
    return;
80003420:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:101
}
80003424:	01c12403          	lw	s0,28(sp)
80003428:	02010113          	addi	sp,sp,32
8000342c:	00008067          	ret

80003430 <GeneratePatternMatrix>:
GeneratePatternMatrix():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:104

// Generates the Pattern Matrix for Pattern mapping
void GeneratePatternMatrix(){
80003430:	fe010113          	addi	sp,sp,-32
80003434:	00812e23          	sw	s0,28(sp)
80003438:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:106
    int i, aux;
    aux = 0;
8000343c:	fe042423          	sw	zero,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:107
    priorityPointer = 0;
80003440:	800237b7          	lui	a5,0x80023
80003444:	dc07aa23          	sw	zero,-556(a5) # 80022dd4 <__stack_top+0xfffdc664>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:109
    //prints("Testando Pattern: \n");
    for(i=0; i<(DIM_X*DIM_Y); i++){
80003448:	fe042623          	sw	zero,-20(s0)
8000344c:	0700006f          	j	800034bc <GeneratePatternMatrix+0x8c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:111
        //printi(i); prints(": "); printi(aux); prints("\n");
        priorityMatrix[i] = (aux / DIM_X << 8) | aux % DIM_X;
80003450:	fe842703          	lw	a4,-24(s0)
80003454:	00300793          	li	a5,3
80003458:	02f747b3          	div	a5,a4,a5
8000345c:	00879713          	slli	a4,a5,0x8
80003460:	fe842683          	lw	a3,-24(s0)
80003464:	00300793          	li	a5,3
80003468:	02f6e7b3          	rem	a5,a3,a5
8000346c:	00f767b3          	or	a5,a4,a5
80003470:	00078693          	mv	a3,a5
80003474:	800227b7          	lui	a5,0x80022
80003478:	fec42703          	lw	a4,-20(s0)
8000347c:	00271713          	slli	a4,a4,0x2
80003480:	60878793          	addi	a5,a5,1544 # 80022608 <__stack_top+0xfffdbe98>
80003484:	00f707b3          	add	a5,a4,a5
80003488:	00d7a023          	sw	a3,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:130
            else{
                aux = 1;
            }
        } 
        else{
            if(aux<=((DIM_X*DIM_Y)-3))
8000348c:	fe842703          	lw	a4,-24(s0)
80003490:	00600793          	li	a5,6
80003494:	00e7ca63          	blt	a5,a4,800034a8 <GeneratePatternMatrix+0x78>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:131
                aux += 2;
80003498:	fe842783          	lw	a5,-24(s0)
8000349c:	00278793          	addi	a5,a5,2
800034a0:	fef42423          	sw	a5,-24(s0)
800034a4:	00c0006f          	j	800034b0 <GeneratePatternMatrix+0x80>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:133
            else
                aux = 1;
800034a8:	00100793          	li	a5,1
800034ac:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:109 (discriminator 2)
    for(i=0; i<(DIM_X*DIM_Y); i++){
800034b0:	fec42783          	lw	a5,-20(s0)
800034b4:	00178793          	addi	a5,a5,1
800034b8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:109 (discriminator 1)
800034bc:	fec42703          	lw	a4,-20(s0)
800034c0:	00800793          	li	a5,8
800034c4:	f8e7d6e3          	ble	a4,a5,80003450 <GeneratePatternMatrix+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:136
        }    
    }
    return;
800034c8:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:137
}
800034cc:	01c12403          	lw	s0,28(sp)
800034d0:	02010113          	addi	sp,sp,32
800034d4:	00008067          	ret

800034d8 <API_AllocateTasks>:
API_AllocateTasks():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:140

// Checks if there is some task to allocate...
void API_AllocateTasks(unsigned int tick){
800034d8:	fd010113          	addi	sp,sp,-48
800034dc:	02112623          	sw	ra,44(sp)
800034e0:	02812423          	sw	s0,40(sp)
800034e4:	02912223          	sw	s1,36(sp)
800034e8:	03010413          	addi	s0,sp,48
800034ec:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:144
    int i, j;
    int addr, slot;
    // Iterate around every possible application
    for (i = 0; i < NUM_MAX_APPS; i++){
800034f0:	fe042623          	sw	zero,-20(s0)
800034f4:	2980006f          	j	8000378c <API_AllocateTasks+0x2b4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:146
        // If the application is valid
        if (applications[i].occupied == TRUE){
800034f8:	800226b7          	lui	a3,0x80022
800034fc:	fec42703          	lw	a4,-20(s0)
80003500:	00070793          	mv	a5,a4
80003504:	00279793          	slli	a5,a5,0x2
80003508:	00e787b3          	add	a5,a5,a4
8000350c:	00579793          	slli	a5,a5,0x5
80003510:	62c68713          	addi	a4,a3,1580 # 8002262c <__stack_top+0xfffdbebc>
80003514:	00e787b3          	add	a5,a5,a4
80003518:	0007a703          	lw	a4,0(a5)
8000351c:	00100793          	li	a5,1
80003520:	26f71063          	bne	a4,a5,80003780 <API_AllocateTasks+0x2a8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:149

            // If the nextRun of this application is right now, then release each task!
            if(applications[i].nextRun <= tick && applications[i].nextRun != applications[i].lastStart){
80003524:	800227b7          	lui	a5,0x80022
80003528:	fec42703          	lw	a4,-20(s0)
8000352c:	62c78693          	addi	a3,a5,1580 # 8002262c <__stack_top+0xfffdbebc>
80003530:	00070793          	mv	a5,a4
80003534:	00279793          	slli	a5,a5,0x2
80003538:	00e787b3          	add	a5,a5,a4
8000353c:	00579793          	slli	a5,a5,0x5
80003540:	00f687b3          	add	a5,a3,a5
80003544:	08c7a783          	lw	a5,140(a5)
80003548:	fdc42703          	lw	a4,-36(s0)
8000354c:	22f76a63          	bltu	a4,a5,80003780 <API_AllocateTasks+0x2a8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:149 (discriminator 1)
80003550:	800227b7          	lui	a5,0x80022
80003554:	fec42703          	lw	a4,-20(s0)
80003558:	62c78693          	addi	a3,a5,1580 # 8002262c <__stack_top+0xfffdbebc>
8000355c:	00070793          	mv	a5,a4
80003560:	00279793          	slli	a5,a5,0x2
80003564:	00e787b3          	add	a5,a5,a4
80003568:	00579793          	slli	a5,a5,0x5
8000356c:	00f687b3          	add	a5,a3,a5
80003570:	08c7a683          	lw	a3,140(a5)
80003574:	800227b7          	lui	a5,0x80022
80003578:	fec42703          	lw	a4,-20(s0)
8000357c:	62c78613          	addi	a2,a5,1580 # 8002262c <__stack_top+0xfffdbebc>
80003580:	00070793          	mv	a5,a4
80003584:	00279793          	slli	a5,a5,0x2
80003588:	00e787b3          	add	a5,a5,a4
8000358c:	00579793          	slli	a5,a5,0x5
80003590:	00f607b3          	add	a5,a2,a5
80003594:	0947a783          	lw	a5,148(a5)
80003598:	1ef68463          	beq	a3,a5,80003780 <API_AllocateTasks+0x2a8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:152

                // If the system has space to accept every task
                if(applications[i].numTasks <= API_GetSystemTasksSlots()){
8000359c:	800226b7          	lui	a3,0x80022
800035a0:	fec42703          	lw	a4,-20(s0)
800035a4:	00070793          	mv	a5,a4
800035a8:	00279793          	slli	a5,a5,0x2
800035ac:	00e787b3          	add	a5,a5,a4
800035b0:	00579793          	slli	a5,a5,0x5
800035b4:	62c68713          	addi	a4,a3,1580 # 8002262c <__stack_top+0xfffdbebc>
800035b8:	00e787b3          	add	a5,a5,a4
800035bc:	0107a483          	lw	s1,16(a5)
800035c0:	191000ef          	jal	ra,80003f50 <API_GetSystemTasksSlots>
800035c4:	00050793          	mv	a5,a0
800035c8:	1a97ec63          	bltu	a5,s1,80003780 <API_AllocateTasks+0x2a8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:155
                    
                    // Iterates around each task of this application
                    for(j = 0; j < applications[i].numTasks; j++){
800035cc:	fe042423          	sw	zero,-24(s0)
800035d0:	13c0006f          	j	8000370c <API_AllocateTasks+0x234>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:158

                        for(;;){
                            addr = getNextPriorityAddr();
800035d4:	5ac000ef          	jal	ra,80003b80 <getNextPriorityAddr>
800035d8:	00050793          	mv	a5,a0
800035dc:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:159
                            slot = API_GetTaskSlotFromTile(addr, i, j);
800035e0:	fe442783          	lw	a5,-28(s0)
800035e4:	fec42703          	lw	a4,-20(s0)
800035e8:	fe842683          	lw	a3,-24(s0)
800035ec:	00068613          	mv	a2,a3
800035f0:	00070593          	mv	a1,a4
800035f4:	00078513          	mv	a0,a5
800035f8:	6bc000ef          	jal	ra,80003cb4 <API_GetTaskSlotFromTile>
800035fc:	00050793          	mv	a5,a0
80003600:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:160
                            if (slot != ERRO)
80003604:	fe042703          	lw	a4,-32(s0)
80003608:	fff00793          	li	a5,-1
8000360c:	00f71463          	bne	a4,a5,80003614 <API_AllocateTasks+0x13c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:158
                            addr = getNextPriorityAddr();
80003610:	fc5ff06f          	j	800035d4 <API_AllocateTasks+0xfc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:161
                                break;
80003614:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:163
                        }
                        applications[i].tasks[j].status = TASK_ALLOCATING;
80003618:	80022737          	lui	a4,0x80022
8000361c:	fe842783          	lw	a5,-24(s0)
80003620:	fec42683          	lw	a3,-20(s0)
80003624:	62c70613          	addi	a2,a4,1580 # 8002262c <__stack_top+0xfffdbebc>
80003628:	00078713          	mv	a4,a5
8000362c:	00171713          	slli	a4,a4,0x1
80003630:	00f70733          	add	a4,a4,a5
80003634:	00271793          	slli	a5,a4,0x2
80003638:	00078713          	mv	a4,a5
8000363c:	00068793          	mv	a5,a3
80003640:	00279793          	slli	a5,a5,0x2
80003644:	00d787b3          	add	a5,a5,a3
80003648:	00579793          	slli	a5,a5,0x5
8000364c:	00f707b3          	add	a5,a4,a5
80003650:	00f607b3          	add	a5,a2,a5
80003654:	00300713          	li	a4,3
80003658:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:164
                        applications[i].tasks[j].addr = addr;
8000365c:	fe442603          	lw	a2,-28(s0)
80003660:	80022737          	lui	a4,0x80022
80003664:	fe842783          	lw	a5,-24(s0)
80003668:	fec42683          	lw	a3,-20(s0)
8000366c:	62c70593          	addi	a1,a4,1580 # 8002262c <__stack_top+0xfffdbebc>
80003670:	00078713          	mv	a4,a5
80003674:	00171713          	slli	a4,a4,0x1
80003678:	00f70733          	add	a4,a4,a5
8000367c:	00271793          	slli	a5,a4,0x2
80003680:	00078713          	mv	a4,a5
80003684:	00068793          	mv	a5,a3
80003688:	00279793          	slli	a5,a5,0x2
8000368c:	00d787b3          	add	a5,a5,a3
80003690:	00579793          	slli	a5,a5,0x5
80003694:	00f707b3          	add	a5,a4,a5
80003698:	00f587b3          	add	a5,a1,a5
8000369c:	00c7ac23          	sw	a2,24(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:165
                        applications[i].tasks[j].slot = slot;
800036a0:	fe042603          	lw	a2,-32(s0)
800036a4:	80022737          	lui	a4,0x80022
800036a8:	fe842783          	lw	a5,-24(s0)
800036ac:	fec42683          	lw	a3,-20(s0)
800036b0:	62c70593          	addi	a1,a4,1580 # 8002262c <__stack_top+0xfffdbebc>
800036b4:	00078713          	mv	a4,a5
800036b8:	00171713          	slli	a4,a4,0x1
800036bc:	00f70733          	add	a4,a4,a5
800036c0:	00271793          	slli	a5,a4,0x2
800036c4:	00078713          	mv	a4,a5
800036c8:	00068793          	mv	a5,a3
800036cc:	00279793          	slli	a5,a5,0x2
800036d0:	00d787b3          	add	a5,a5,a3
800036d4:	00579793          	slli	a5,a5,0x5
800036d8:	00f707b3          	add	a5,a4,a5
800036dc:	00f587b3          	add	a5,a1,a5
800036e0:	00c7ae23          	sw	a2,28(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:166
                        API_RepositoryAllocation(i, j, addr);
800036e4:	fec42783          	lw	a5,-20(s0)
800036e8:	fe842703          	lw	a4,-24(s0)
800036ec:	fe442683          	lw	a3,-28(s0)
800036f0:	00068613          	mv	a2,a3
800036f4:	00070593          	mv	a1,a4
800036f8:	00078513          	mv	a0,a5
800036fc:	141000ef          	jal	ra,8000403c <API_RepositoryAllocation>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:155
                    for(j = 0; j < applications[i].numTasks; j++){
80003700:	fe842783          	lw	a5,-24(s0)
80003704:	00178793          	addi	a5,a5,1
80003708:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:155 (discriminator 1)
8000370c:	800226b7          	lui	a3,0x80022
80003710:	fec42703          	lw	a4,-20(s0)
80003714:	00070793          	mv	a5,a4
80003718:	00279793          	slli	a5,a5,0x2
8000371c:	00e787b3          	add	a5,a5,a4
80003720:	00579793          	slli	a5,a5,0x5
80003724:	62c68713          	addi	a4,a3,1580 # 8002262c <__stack_top+0xfffdbebc>
80003728:	00e787b3          	add	a5,a5,a4
8000372c:	0107a703          	lw	a4,16(a5)
80003730:	fe842783          	lw	a5,-24(s0)
80003734:	eae7e0e3          	bltu	a5,a4,800035d4 <API_AllocateTasks+0xfc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:170
                    }

                    // Resets the lastStart
                    applications[i].lastStart = applications[i].nextRun;
80003738:	800227b7          	lui	a5,0x80022
8000373c:	fec42703          	lw	a4,-20(s0)
80003740:	62c78693          	addi	a3,a5,1580 # 8002262c <__stack_top+0xfffdbebc>
80003744:	00070793          	mv	a5,a4
80003748:	00279793          	slli	a5,a5,0x2
8000374c:	00e787b3          	add	a5,a5,a4
80003750:	00579793          	slli	a5,a5,0x5
80003754:	00f687b3          	add	a5,a3,a5
80003758:	08c7a683          	lw	a3,140(a5)
8000375c:	800227b7          	lui	a5,0x80022
80003760:	fec42703          	lw	a4,-20(s0)
80003764:	62c78613          	addi	a2,a5,1580 # 8002262c <__stack_top+0xfffdbebc>
80003768:	00070793          	mv	a5,a4
8000376c:	00279793          	slli	a5,a5,0x2
80003770:	00e787b3          	add	a5,a5,a4
80003774:	00579793          	slli	a5,a5,0x5
80003778:	00f607b3          	add	a5,a2,a5
8000377c:	08d7aa23          	sw	a3,148(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:144 (discriminator 2)
    for (i = 0; i < NUM_MAX_APPS; i++){
80003780:	fec42783          	lw	a5,-20(s0)
80003784:	00178793          	addi	a5,a5,1
80003788:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:144 (discriminator 1)
8000378c:	fec42703          	lw	a4,-20(s0)
80003790:	00b00793          	li	a5,11
80003794:	d6e7d2e3          	ble	a4,a5,800034f8 <API_AllocateTasks+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:176
                }
            }
        }
    }

    return;
80003798:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:177
}
8000379c:	02c12083          	lw	ra,44(sp)
800037a0:	02812403          	lw	s0,40(sp)
800037a4:	02412483          	lw	s1,36(sp)
800037a8:	03010113          	addi	sp,sp,48
800037ac:	00008067          	ret

800037b0 <API_DealocateTask>:
API_DealocateTask():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:179

void API_DealocateTask(unsigned int task_id, unsigned int app_id){
800037b0:	fd010113          	addi	sp,sp,-48
800037b4:	02112623          	sw	ra,44(sp)
800037b8:	02812423          	sw	s0,40(sp)
800037bc:	03010413          	addi	s0,sp,48
800037c0:	fca42e23          	sw	a0,-36(s0)
800037c4:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:182
    unsigned int i, tick;
    volatile int flag;
    applications[app_id].tasks[task_id].status = TASK_FINISHED;
800037c8:	80022737          	lui	a4,0x80022
800037cc:	fdc42783          	lw	a5,-36(s0)
800037d0:	fd842683          	lw	a3,-40(s0)
800037d4:	62c70613          	addi	a2,a4,1580 # 8002262c <__stack_top+0xfffdbebc>
800037d8:	00078713          	mv	a4,a5
800037dc:	00171713          	slli	a4,a4,0x1
800037e0:	00f70733          	add	a4,a4,a5
800037e4:	00271793          	slli	a5,a4,0x2
800037e8:	00078713          	mv	a4,a5
800037ec:	00068793          	mv	a5,a3
800037f0:	00279793          	slli	a5,a5,0x2
800037f4:	00d787b3          	add	a5,a5,a3
800037f8:	00579793          	slli	a5,a5,0x5
800037fc:	00f707b3          	add	a5,a4,a5
80003800:	00f607b3          	add	a5,a2,a5
80003804:	00200713          	li	a4,2
80003808:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:184
    // verify if every task has finished
    flag = 1;
8000380c:	00100793          	li	a5,1
80003810:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:185
    for (i = 0; i < applications[app_id].numTasks; i++){
80003814:	fe042623          	sw	zero,-20(s0)
80003818:	0d00006f          	j	800038e8 <API_DealocateTask+0x138>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:186
        printsvsv("checking ", i, "task is: ", applications[app_id].tasks[i].status);
8000381c:	fec42583          	lw	a1,-20(s0)
80003820:	80022737          	lui	a4,0x80022
80003824:	fec42783          	lw	a5,-20(s0)
80003828:	fd842683          	lw	a3,-40(s0)
8000382c:	62c70613          	addi	a2,a4,1580 # 8002262c <__stack_top+0xfffdbebc>
80003830:	00078713          	mv	a4,a5
80003834:	00171713          	slli	a4,a4,0x1
80003838:	00f70733          	add	a4,a4,a5
8000383c:	00271793          	slli	a5,a4,0x2
80003840:	00078713          	mv	a4,a5
80003844:	00068793          	mv	a5,a3
80003848:	00279793          	slli	a5,a5,0x2
8000384c:	00d787b3          	add	a5,a5,a3
80003850:	00579793          	slli	a5,a5,0x5
80003854:	00f707b3          	add	a5,a4,a5
80003858:	00f607b3          	add	a5,a2,a5
8000385c:	0147a783          	lw	a5,20(a5)
80003860:	00078693          	mv	a3,a5
80003864:	800087b7          	lui	a5,0x80008
80003868:	45c78613          	addi	a2,a5,1116 # 8000845c <__stack_top+0xfffc1cec>
8000386c:	800087b7          	lui	a5,0x80008
80003870:	46878513          	addi	a0,a5,1128 # 80008468 <__stack_top+0xfffc1cf8>
80003874:	0ad020ef          	jal	ra,80006120 <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:187
        printsv("from app: ", app_id);
80003878:	fd842783          	lw	a5,-40(s0)
8000387c:	00078593          	mv	a1,a5
80003880:	800087b7          	lui	a5,0x80008
80003884:	47478513          	addi	a0,a5,1140 # 80008474 <__stack_top+0xfffc1d04>
80003888:	051020ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:188
        if(applications[app_id].tasks[i].status != TASK_FINISHED){
8000388c:	80022737          	lui	a4,0x80022
80003890:	fec42783          	lw	a5,-20(s0)
80003894:	fd842683          	lw	a3,-40(s0)
80003898:	62c70613          	addi	a2,a4,1580 # 8002262c <__stack_top+0xfffdbebc>
8000389c:	00078713          	mv	a4,a5
800038a0:	00171713          	slli	a4,a4,0x1
800038a4:	00f70733          	add	a4,a4,a5
800038a8:	00271793          	slli	a5,a4,0x2
800038ac:	00078713          	mv	a4,a5
800038b0:	00068793          	mv	a5,a3
800038b4:	00279793          	slli	a5,a5,0x2
800038b8:	00d787b3          	add	a5,a5,a3
800038bc:	00579793          	slli	a5,a5,0x5
800038c0:	00f707b3          	add	a5,a4,a5
800038c4:	00f607b3          	add	a5,a2,a5
800038c8:	0147a703          	lw	a4,20(a5)
800038cc:	00200793          	li	a5,2
800038d0:	00f70663          	beq	a4,a5,800038dc <API_DealocateTask+0x12c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:189
            flag = 0;
800038d4:	fe042223          	sw	zero,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:190
            break;
800038d8:	03c0006f          	j	80003914 <API_DealocateTask+0x164>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:185 (discriminator 2)
    for (i = 0; i < applications[app_id].numTasks; i++){
800038dc:	fec42783          	lw	a5,-20(s0)
800038e0:	00178793          	addi	a5,a5,1
800038e4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:185 (discriminator 1)
800038e8:	800226b7          	lui	a3,0x80022
800038ec:	fd842703          	lw	a4,-40(s0)
800038f0:	00070793          	mv	a5,a4
800038f4:	00279793          	slli	a5,a5,0x2
800038f8:	00e787b3          	add	a5,a5,a4
800038fc:	00579793          	slli	a5,a5,0x5
80003900:	62c68713          	addi	a4,a3,1580 # 8002262c <__stack_top+0xfffdbebc>
80003904:	00e787b3          	add	a5,a5,a4
80003908:	0107a783          	lw	a5,16(a5)
8000390c:	fec42703          	lw	a4,-20(s0)
80003910:	f0f766e3          	bltu	a4,a5,8000381c <API_DealocateTask+0x6c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:194
        }
    }
    // in positive case
    if(flag){
80003914:	fe442783          	lw	a5,-28(s0)
80003918:	24078663          	beqz	a5,80003b64 <API_DealocateTask+0x3b4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:196
        // register that the application has executed another time
        tick = xTaskGetTickCount();
8000391c:	d99fe0ef          	jal	ra,800026b4 <xTaskGetTickCount>
80003920:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:197
        applications[app_id].executed++;
80003924:	800226b7          	lui	a3,0x80022
80003928:	fd842703          	lw	a4,-40(s0)
8000392c:	00070793          	mv	a5,a4
80003930:	00279793          	slli	a5,a5,0x2
80003934:	00e787b3          	add	a5,a5,a4
80003938:	00579793          	slli	a5,a5,0x5
8000393c:	62c68713          	addi	a4,a3,1580 # 8002262c <__stack_top+0xfffdbebc>
80003940:	00e787b3          	add	a5,a5,a4
80003944:	0907a783          	lw	a5,144(a5)
80003948:	00178693          	addi	a3,a5,1
8000394c:	80022637          	lui	a2,0x80022
80003950:	fd842703          	lw	a4,-40(s0)
80003954:	00070793          	mv	a5,a4
80003958:	00279793          	slli	a5,a5,0x2
8000395c:	00e787b3          	add	a5,a5,a4
80003960:	00579793          	slli	a5,a5,0x5
80003964:	62c60713          	addi	a4,a2,1580 # 8002262c <__stack_top+0xfffdbebc>
80003968:	00e787b3          	add	a5,a5,a4
8000396c:	08d7a823          	sw	a3,144(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:198
        printsvsv("Application ", app_id, "was executed in ", (tick - applications[app_id].lastStart));
80003970:	fd842583          	lw	a1,-40(s0)
80003974:	800227b7          	lui	a5,0x80022
80003978:	fd842703          	lw	a4,-40(s0)
8000397c:	62c78693          	addi	a3,a5,1580 # 8002262c <__stack_top+0xfffdbebc>
80003980:	00070793          	mv	a5,a4
80003984:	00279793          	slli	a5,a5,0x2
80003988:	00e787b3          	add	a5,a5,a4
8000398c:	00579793          	slli	a5,a5,0x5
80003990:	00f687b3          	add	a5,a3,a5
80003994:	0947a783          	lw	a5,148(a5)
80003998:	fe842703          	lw	a4,-24(s0)
8000399c:	40f707b3          	sub	a5,a4,a5
800039a0:	00078693          	mv	a3,a5
800039a4:	800087b7          	lui	a5,0x80008
800039a8:	48078613          	addi	a2,a5,1152 # 80008480 <__stack_top+0xfffc1d10>
800039ac:	800087b7          	lui	a5,0x80008
800039b0:	49478513          	addi	a0,a5,1172 # 80008494 <__stack_top+0xfffc1d24>
800039b4:	76c020ef          	jal	ra,80006120 <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:199
        applications[app_id].lastFinish = tick;
800039b8:	800227b7          	lui	a5,0x80022
800039bc:	fd842703          	lw	a4,-40(s0)
800039c0:	62c78693          	addi	a3,a5,1580 # 8002262c <__stack_top+0xfffdbebc>
800039c4:	00070793          	mv	a5,a4
800039c8:	00279793          	slli	a5,a5,0x2
800039cc:	00e787b3          	add	a5,a5,a4
800039d0:	00579793          	slli	a5,a5,0x5
800039d4:	00f687b3          	add	a5,a3,a5
800039d8:	fe842703          	lw	a4,-24(s0)
800039dc:	08e7ae23          	sw	a4,156(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:201
        // if the application must run another time
        if(applications[app_id].appExec > applications[app_id].executed){
800039e0:	800227b7          	lui	a5,0x80022
800039e4:	fd842703          	lw	a4,-40(s0)
800039e8:	62c78693          	addi	a3,a5,1580 # 8002262c <__stack_top+0xfffdbebc>
800039ec:	00070793          	mv	a5,a4
800039f0:	00279793          	slli	a5,a5,0x2
800039f4:	00e787b3          	add	a5,a5,a4
800039f8:	00579793          	slli	a5,a5,0x5
800039fc:	00f687b3          	add	a5,a3,a5
80003a00:	00c7a683          	lw	a3,12(a5)
80003a04:	80022637          	lui	a2,0x80022
80003a08:	fd842703          	lw	a4,-40(s0)
80003a0c:	00070793          	mv	a5,a4
80003a10:	00279793          	slli	a5,a5,0x2
80003a14:	00e787b3          	add	a5,a5,a4
80003a18:	00579793          	slli	a5,a5,0x5
80003a1c:	62c60713          	addi	a4,a2,1580 # 8002262c <__stack_top+0xfffdbebc>
80003a20:	00e787b3          	add	a5,a5,a4
80003a24:	0907a783          	lw	a5,144(a5)
80003a28:	0ad7fa63          	bleu	a3,a5,80003adc <API_DealocateTask+0x32c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:202
            printsv("\t\tThis application still need to run: ", (applications[app_id].appExec - applications[app_id].executed));
80003a2c:	800227b7          	lui	a5,0x80022
80003a30:	fd842703          	lw	a4,-40(s0)
80003a34:	62c78693          	addi	a3,a5,1580 # 8002262c <__stack_top+0xfffdbebc>
80003a38:	00070793          	mv	a5,a4
80003a3c:	00279793          	slli	a5,a5,0x2
80003a40:	00e787b3          	add	a5,a5,a4
80003a44:	00579793          	slli	a5,a5,0x5
80003a48:	00f687b3          	add	a5,a3,a5
80003a4c:	00c7a683          	lw	a3,12(a5)
80003a50:	80022637          	lui	a2,0x80022
80003a54:	fd842703          	lw	a4,-40(s0)
80003a58:	00070793          	mv	a5,a4
80003a5c:	00279793          	slli	a5,a5,0x2
80003a60:	00e787b3          	add	a5,a5,a4
80003a64:	00579793          	slli	a5,a5,0x5
80003a68:	62c60713          	addi	a4,a2,1580 # 8002262c <__stack_top+0xfffdbebc>
80003a6c:	00e787b3          	add	a5,a5,a4
80003a70:	0907a783          	lw	a5,144(a5)
80003a74:	40f687b3          	sub	a5,a3,a5
80003a78:	00078593          	mv	a1,a5
80003a7c:	800087b7          	lui	a5,0x80008
80003a80:	4a478513          	addi	a0,a5,1188 # 800084a4 <__stack_top+0xfffc1d34>
80003a84:	654020ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:203
            applications[app_id].nextRun = tick + applications[app_id].appPeriod;
80003a88:	800227b7          	lui	a5,0x80022
80003a8c:	fd842703          	lw	a4,-40(s0)
80003a90:	62c78693          	addi	a3,a5,1580 # 8002262c <__stack_top+0xfffdbebc>
80003a94:	00070793          	mv	a5,a4
80003a98:	00279793          	slli	a5,a5,0x2
80003a9c:	00e787b3          	add	a5,a5,a4
80003aa0:	00579793          	slli	a5,a5,0x5
80003aa4:	00f687b3          	add	a5,a3,a5
80003aa8:	0087a703          	lw	a4,8(a5)
80003aac:	fe842783          	lw	a5,-24(s0)
80003ab0:	00f706b3          	add	a3,a4,a5
80003ab4:	800227b7          	lui	a5,0x80022
80003ab8:	fd842703          	lw	a4,-40(s0)
80003abc:	62c78613          	addi	a2,a5,1580 # 8002262c <__stack_top+0xfffdbebc>
80003ac0:	00070793          	mv	a5,a4
80003ac4:	00279793          	slli	a5,a5,0x2
80003ac8:	00e787b3          	add	a5,a5,a4
80003acc:	00579793          	slli	a5,a5,0x5
80003ad0:	00f607b3          	add	a5,a2,a5
80003ad4:	08d7a623          	sw	a3,140(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:218
            }
            API_SystemFinish = TRUE;
            //_exit(0xfe10);
        }        
    }
    return;
80003ad8:	08c0006f          	j	80003b64 <API_DealocateTask+0x3b4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:205
            prints("\t\tThis application is DONE!\n");
80003adc:	800087b7          	lui	a5,0x80008
80003ae0:	4cc78513          	addi	a0,a5,1228 # 800084cc <__stack_top+0xfffc1d5c>
80003ae4:	548020ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:206
            applications[app_id].occupied = FALSE;
80003ae8:	800226b7          	lui	a3,0x80022
80003aec:	fd842703          	lw	a4,-40(s0)
80003af0:	00070793          	mv	a5,a4
80003af4:	00279793          	slli	a5,a5,0x2
80003af8:	00e787b3          	add	a5,a5,a4
80003afc:	00579793          	slli	a5,a5,0x5
80003b00:	62c68713          	addi	a4,a3,1580 # 8002262c <__stack_top+0xfffdbebc>
80003b04:	00e787b3          	add	a5,a5,a4
80003b08:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:209
            for(i = 0; i < NUM_MAX_APPS; i++){
80003b0c:	fe042623          	sw	zero,-20(s0)
80003b10:	03c0006f          	j	80003b4c <API_DealocateTask+0x39c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:210
                if (applications[i].occupied == TRUE){
80003b14:	800226b7          	lui	a3,0x80022
80003b18:	fec42703          	lw	a4,-20(s0)
80003b1c:	00070793          	mv	a5,a4
80003b20:	00279793          	slli	a5,a5,0x2
80003b24:	00e787b3          	add	a5,a5,a4
80003b28:	00579793          	slli	a5,a5,0x5
80003b2c:	62c68713          	addi	a4,a3,1580 # 8002262c <__stack_top+0xfffdbebc>
80003b30:	00e787b3          	add	a5,a5,a4
80003b34:	0007a703          	lw	a4,0(a5)
80003b38:	00100793          	li	a5,1
80003b3c:	02f70863          	beq	a4,a5,80003b6c <API_DealocateTask+0x3bc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:209 (discriminator 2)
            for(i = 0; i < NUM_MAX_APPS; i++){
80003b40:	fec42783          	lw	a5,-20(s0)
80003b44:	00178793          	addi	a5,a5,1
80003b48:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:209 (discriminator 1)
80003b4c:	fec42703          	lw	a4,-20(s0)
80003b50:	00b00793          	li	a5,11
80003b54:	fce7f0e3          	bleu	a4,a5,80003b14 <API_DealocateTask+0x364>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:214
            API_SystemFinish = TRUE;
80003b58:	00100713          	li	a4,1
80003b5c:	98e1a823          	sw	a4,-1648(gp) # 80008f40 <API_SystemFinish>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:218
    return;
80003b60:	00000013          	nop
80003b64:	00000013          	nop
80003b68:	0080006f          	j	80003b70 <API_DealocateTask+0x3c0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:211
                    return;
80003b6c:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:219
}
80003b70:	02c12083          	lw	ra,44(sp)
80003b74:	02812403          	lw	s0,40(sp)
80003b78:	03010113          	addi	sp,sp,48
80003b7c:	00008067          	ret

80003b80 <getNextPriorityAddr>:
getNextPriorityAddr():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:222

// Gets the address of the next tile in the priority list 
unsigned int getNextPriorityAddr(){
80003b80:	fe010113          	addi	sp,sp,-32
80003b84:	00112e23          	sw	ra,28(sp)
80003b88:	00812c23          	sw	s0,24(sp)
80003b8c:	00912a23          	sw	s1,20(sp)
80003b90:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:224
    int i;
    unsigned int addr = makeAddress(0,0);
80003b94:	00000593          	li	a1,0
80003b98:	00000513          	li	a0,0
80003b9c:	159020ef          	jal	ra,800064f4 <makeAddress>
80003ba0:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:227
    for(;;){
        // Checks if it's a valid address
        if (priorityMatrix[priorityPointer] != makeAddress(0,0)){
80003ba4:	800237b7          	lui	a5,0x80023
80003ba8:	dd47a703          	lw	a4,-556(a5) # 80022dd4 <__stack_top+0xfffdc664>
80003bac:	800227b7          	lui	a5,0x80022
80003bb0:	00271713          	slli	a4,a4,0x2
80003bb4:	60878793          	addi	a5,a5,1544 # 80022608 <__stack_top+0xfffdbe98>
80003bb8:	00f707b3          	add	a5,a4,a5
80003bbc:	0007a483          	lw	s1,0(a5)
80003bc0:	00000593          	li	a1,0
80003bc4:	00000513          	li	a0,0
80003bc8:	12d020ef          	jal	ra,800064f4 <makeAddress>
80003bcc:	00050793          	mv	a5,a0
80003bd0:	06f48e63          	beq	s1,a5,80003c4c <getNextPriorityAddr+0xcc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:228
            if (Tiles[getXpos(addr)][getYpos(addr)].taskSlots > 0){
80003bd4:	fec42503          	lw	a0,-20(s0)
80003bd8:	5a8020ef          	jal	ra,80006180 <getXpos>
80003bdc:	00050493          	mv	s1,a0
80003be0:	fec42503          	lw	a0,-20(s0)
80003be4:	5c8020ef          	jal	ra,800061ac <getYpos>
80003be8:	00050613          	mv	a2,a0
80003bec:	800237b7          	lui	a5,0x80023
80003bf0:	dd878693          	addi	a3,a5,-552 # 80022dd8 <__stack_top+0xfffdc668>
80003bf4:	00060713          	mv	a4,a2
80003bf8:	00171793          	slli	a5,a4,0x1
80003bfc:	00078713          	mv	a4,a5
80003c00:	00c70733          	add	a4,a4,a2
80003c04:	00271793          	slli	a5,a4,0x2
80003c08:	00078713          	mv	a4,a5
80003c0c:	00048793          	mv	a5,s1
80003c10:	00379793          	slli	a5,a5,0x3
80003c14:	009787b3          	add	a5,a5,s1
80003c18:	00279793          	slli	a5,a5,0x2
80003c1c:	00f707b3          	add	a5,a4,a5
80003c20:	00f687b3          	add	a5,a3,a5
80003c24:	0087a783          	lw	a5,8(a5)
80003c28:	02078263          	beqz	a5,80003c4c <getNextPriorityAddr+0xcc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:231
            //for(i = 0; i < NUM_MAX_TASKS; i++){
                //if (Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] == NONE)
                    addr = priorityMatrix[priorityPointer];
80003c2c:	800237b7          	lui	a5,0x80023
80003c30:	dd47a703          	lw	a4,-556(a5) # 80022dd4 <__stack_top+0xfffdc664>
80003c34:	800227b7          	lui	a5,0x80022
80003c38:	00271713          	slli	a4,a4,0x2
80003c3c:	60878793          	addi	a5,a5,1544 # 80022608 <__stack_top+0xfffdbe98>
80003c40:	00f707b3          	add	a5,a4,a5
80003c44:	0007a783          	lw	a5,0(a5)
80003c48:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:237
            //}
            }
        }

        // Increments the priorityPointer
        priorityPointer++;
80003c4c:	800237b7          	lui	a5,0x80023
80003c50:	dd47a783          	lw	a5,-556(a5) # 80022dd4 <__stack_top+0xfffdc664>
80003c54:	00178713          	addi	a4,a5,1
80003c58:	800237b7          	lui	a5,0x80023
80003c5c:	dce7aa23          	sw	a4,-556(a5) # 80022dd4 <__stack_top+0xfffdc664>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:238
        if (priorityPointer == DIM_X*DIM_Y)
80003c60:	800237b7          	lui	a5,0x80023
80003c64:	dd47a703          	lw	a4,-556(a5) # 80022dd4 <__stack_top+0xfffdc664>
80003c68:	00900793          	li	a5,9
80003c6c:	00f71663          	bne	a4,a5,80003c78 <getNextPriorityAddr+0xf8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:239
            priorityPointer = 0;
80003c70:	800237b7          	lui	a5,0x80023
80003c74:	dc07aa23          	sw	zero,-556(a5) # 80022dd4 <__stack_top+0xfffdc664>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:242

        // If we found a new valid address, return
        if( addr != makeAddress(0,0))
80003c78:	00000593          	li	a1,0
80003c7c:	00000513          	li	a0,0
80003c80:	075020ef          	jal	ra,800064f4 <makeAddress>
80003c84:	00050713          	mv	a4,a0
80003c88:	fec42783          	lw	a5,-20(s0)
80003c8c:	00e79463          	bne	a5,a4,80003c94 <getNextPriorityAddr+0x114>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:227
        if (priorityMatrix[priorityPointer] != makeAddress(0,0)){
80003c90:	f15ff06f          	j	80003ba4 <getNextPriorityAddr+0x24>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:243
            break;
80003c94:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:245
    }
    return addr;
80003c98:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:247
    //return 0x101;
}
80003c9c:	00078513          	mv	a0,a5
80003ca0:	01c12083          	lw	ra,28(sp)
80003ca4:	01812403          	lw	s0,24(sp)
80003ca8:	01412483          	lw	s1,20(sp)
80003cac:	02010113          	addi	sp,sp,32
80003cb0:	00008067          	ret

80003cb4 <API_GetTaskSlotFromTile>:
API_GetTaskSlotFromTile():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:250

// Gets a free slot from one given tile
unsigned int API_GetTaskSlotFromTile(unsigned int addr, unsigned int app, unsigned int task){
80003cb4:	fe010113          	addi	sp,sp,-32
80003cb8:	00112e23          	sw	ra,28(sp)
80003cbc:	00812c23          	sw	s0,24(sp)
80003cc0:	00912a23          	sw	s1,20(sp)
80003cc4:	01212823          	sw	s2,16(sp)
80003cc8:	02010413          	addi	s0,sp,32
80003ccc:	fea42623          	sw	a0,-20(s0)
80003cd0:	feb42423          	sw	a1,-24(s0)
80003cd4:	fec42223          	sw	a2,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:260
            printsv("\t achei!! > ", i);
            Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] = (app << 16) | task;
            return i;
        }
    }*/
    if(Tiles[getXpos(addr)][getYpos(addr)].taskSlots > 0){
80003cd8:	fec42503          	lw	a0,-20(s0)
80003cdc:	4a4020ef          	jal	ra,80006180 <getXpos>
80003ce0:	00050493          	mv	s1,a0
80003ce4:	fec42503          	lw	a0,-20(s0)
80003ce8:	4c4020ef          	jal	ra,800061ac <getYpos>
80003cec:	00050613          	mv	a2,a0
80003cf0:	800237b7          	lui	a5,0x80023
80003cf4:	dd878693          	addi	a3,a5,-552 # 80022dd8 <__stack_top+0xfffdc668>
80003cf8:	00060713          	mv	a4,a2
80003cfc:	00171793          	slli	a5,a4,0x1
80003d00:	00078713          	mv	a4,a5
80003d04:	00c70733          	add	a4,a4,a2
80003d08:	00271793          	slli	a5,a4,0x2
80003d0c:	00078713          	mv	a4,a5
80003d10:	00048793          	mv	a5,s1
80003d14:	00379793          	slli	a5,a5,0x3
80003d18:	009787b3          	add	a5,a5,s1
80003d1c:	00279793          	slli	a5,a5,0x2
80003d20:	00f707b3          	add	a5,a4,a5
80003d24:	00f687b3          	add	a5,a3,a5
80003d28:	0087a783          	lw	a5,8(a5)
80003d2c:	0a078c63          	beqz	a5,80003de4 <API_GetTaskSlotFromTile+0x130>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:261
        Tiles[getXpos(addr)][getYpos(addr)].taskSlots = Tiles[getXpos(addr)][getYpos(addr)].taskSlots - 1;
80003d30:	fec42503          	lw	a0,-20(s0)
80003d34:	44c020ef          	jal	ra,80006180 <getXpos>
80003d38:	00050493          	mv	s1,a0
80003d3c:	fec42503          	lw	a0,-20(s0)
80003d40:	46c020ef          	jal	ra,800061ac <getYpos>
80003d44:	00050613          	mv	a2,a0
80003d48:	800237b7          	lui	a5,0x80023
80003d4c:	dd878693          	addi	a3,a5,-552 # 80022dd8 <__stack_top+0xfffdc668>
80003d50:	00060713          	mv	a4,a2
80003d54:	00171793          	slli	a5,a4,0x1
80003d58:	00078713          	mv	a4,a5
80003d5c:	00c70733          	add	a4,a4,a2
80003d60:	00271793          	slli	a5,a4,0x2
80003d64:	00078713          	mv	a4,a5
80003d68:	00048793          	mv	a5,s1
80003d6c:	00379793          	slli	a5,a5,0x3
80003d70:	009787b3          	add	a5,a5,s1
80003d74:	00279793          	slli	a5,a5,0x2
80003d78:	00f707b3          	add	a5,a4,a5
80003d7c:	00f687b3          	add	a5,a3,a5
80003d80:	0087a483          	lw	s1,8(a5)
80003d84:	fec42503          	lw	a0,-20(s0)
80003d88:	3f8020ef          	jal	ra,80006180 <getXpos>
80003d8c:	00050913          	mv	s2,a0
80003d90:	fec42503          	lw	a0,-20(s0)
80003d94:	418020ef          	jal	ra,800061ac <getYpos>
80003d98:	00050593          	mv	a1,a0
80003d9c:	fff48693          	addi	a3,s1,-1
80003da0:	800237b7          	lui	a5,0x80023
80003da4:	dd878613          	addi	a2,a5,-552 # 80022dd8 <__stack_top+0xfffdc668>
80003da8:	00058713          	mv	a4,a1
80003dac:	00171793          	slli	a5,a4,0x1
80003db0:	00078713          	mv	a4,a5
80003db4:	00b70733          	add	a4,a4,a1
80003db8:	00271793          	slli	a5,a4,0x2
80003dbc:	00078713          	mv	a4,a5
80003dc0:	00090793          	mv	a5,s2
80003dc4:	00379793          	slli	a5,a5,0x3
80003dc8:	012787b3          	add	a5,a5,s2
80003dcc:	00279793          	slli	a5,a5,0x2
80003dd0:	00f707b3          	add	a5,a4,a5
80003dd4:	00f607b3          	add	a5,a2,a5
80003dd8:	00d7a423          	sw	a3,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:262
        return 1;
80003ddc:	00100793          	li	a5,1
80003de0:	0140006f          	j	80003df4 <API_GetTaskSlotFromTile+0x140>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:264
    }else {
        prints("returning erro5\n");
80003de4:	800087b7          	lui	a5,0x80008
80003de8:	4ec78513          	addi	a0,a5,1260 # 800084ec <__stack_top+0xfffc1d7c>
80003dec:	240020ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:265
        return ERRO;
80003df0:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:267
    }
}
80003df4:	00078513          	mv	a0,a5
80003df8:	01c12083          	lw	ra,28(sp)
80003dfc:	01812403          	lw	s0,24(sp)
80003e00:	01412483          	lw	s1,20(sp)
80003e04:	01012903          	lw	s2,16(sp)
80003e08:	02010113          	addi	sp,sp,32
80003e0c:	00008067          	ret

80003e10 <API_ClearTaskSlotFromTile>:
API_ClearTaskSlotFromTile():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:270

// Clear a slot occupied by a given task
unsigned int API_ClearTaskSlotFromTile(unsigned int addr, unsigned int app, unsigned int task){
80003e10:	fe010113          	addi	sp,sp,-32
80003e14:	00112e23          	sw	ra,28(sp)
80003e18:	00812c23          	sw	s0,24(sp)
80003e1c:	00912a23          	sw	s1,20(sp)
80003e20:	02010413          	addi	s0,sp,32
80003e24:	fea42623          	sw	a0,-20(s0)
80003e28:	feb42423          	sw	a1,-24(s0)
80003e2c:	fec42223          	sw	a2,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:271
    Tiles[getXpos(addr)][getYpos(addr)].taskSlots++;
80003e30:	fec42503          	lw	a0,-20(s0)
80003e34:	34c020ef          	jal	ra,80006180 <getXpos>
80003e38:	00050493          	mv	s1,a0
80003e3c:	fec42503          	lw	a0,-20(s0)
80003e40:	36c020ef          	jal	ra,800061ac <getYpos>
80003e44:	00050693          	mv	a3,a0
80003e48:	800237b7          	lui	a5,0x80023
80003e4c:	dd878613          	addi	a2,a5,-552 # 80022dd8 <__stack_top+0xfffdc668>
80003e50:	00068713          	mv	a4,a3
80003e54:	00171793          	slli	a5,a4,0x1
80003e58:	00078713          	mv	a4,a5
80003e5c:	00d70733          	add	a4,a4,a3
80003e60:	00271793          	slli	a5,a4,0x2
80003e64:	00078713          	mv	a4,a5
80003e68:	00048793          	mv	a5,s1
80003e6c:	00379793          	slli	a5,a5,0x3
80003e70:	009787b3          	add	a5,a5,s1
80003e74:	00279793          	slli	a5,a5,0x2
80003e78:	00f707b3          	add	a5,a4,a5
80003e7c:	00f607b3          	add	a5,a2,a5
80003e80:	0087a783          	lw	a5,8(a5)
80003e84:	00178613          	addi	a2,a5,1
80003e88:	800237b7          	lui	a5,0x80023
80003e8c:	dd878593          	addi	a1,a5,-552 # 80022dd8 <__stack_top+0xfffdc668>
80003e90:	00068713          	mv	a4,a3
80003e94:	00171793          	slli	a5,a4,0x1
80003e98:	00078713          	mv	a4,a5
80003e9c:	00d70733          	add	a4,a4,a3
80003ea0:	00271793          	slli	a5,a4,0x2
80003ea4:	00078713          	mv	a4,a5
80003ea8:	00048793          	mv	a5,s1
80003eac:	00379793          	slli	a5,a5,0x3
80003eb0:	009787b3          	add	a5,a5,s1
80003eb4:	00279793          	slli	a5,a5,0x2
80003eb8:	00f707b3          	add	a5,a4,a5
80003ebc:	00f587b3          	add	a5,a1,a5
80003ec0:	00c7a423          	sw	a2,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:272
    if(Tiles[getXpos(addr)][getYpos(addr)].taskSlots > NUM_MAX_TASKS){
80003ec4:	fec42503          	lw	a0,-20(s0)
80003ec8:	2b8020ef          	jal	ra,80006180 <getXpos>
80003ecc:	00050493          	mv	s1,a0
80003ed0:	fec42503          	lw	a0,-20(s0)
80003ed4:	2d8020ef          	jal	ra,800061ac <getYpos>
80003ed8:	00050613          	mv	a2,a0
80003edc:	800237b7          	lui	a5,0x80023
80003ee0:	dd878693          	addi	a3,a5,-552 # 80022dd8 <__stack_top+0xfffdc668>
80003ee4:	00060713          	mv	a4,a2
80003ee8:	00171793          	slli	a5,a4,0x1
80003eec:	00078713          	mv	a4,a5
80003ef0:	00c70733          	add	a4,a4,a2
80003ef4:	00271793          	slli	a5,a4,0x2
80003ef8:	00078713          	mv	a4,a5
80003efc:	00048793          	mv	a5,s1
80003f00:	00379793          	slli	a5,a5,0x3
80003f04:	009787b3          	add	a5,a5,s1
80003f08:	00279793          	slli	a5,a5,0x2
80003f0c:	00f707b3          	add	a5,a4,a5
80003f10:	00f687b3          	add	a5,a3,a5
80003f14:	0087a703          	lw	a4,8(a5)
80003f18:	00600793          	li	a5,6
80003f1c:	00e7fc63          	bleu	a4,a5,80003f34 <API_ClearTaskSlotFromTile+0x124>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:273
        prints("returning erro6\n");
80003f20:	800087b7          	lui	a5,0x80008
80003f24:	50078513          	addi	a0,a5,1280 # 80008500 <__stack_top+0xfffc1d90>
80003f28:	104020ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:274
        return ERRO;
80003f2c:	fff00793          	li	a5,-1
80003f30:	0080006f          	j	80003f38 <API_ClearTaskSlotFromTile+0x128>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:277
    }
    else{
        return 1;
80003f34:	00100793          	li	a5,1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:281
    }
    prints("returning erro7\n");
    return ERRO;
}
80003f38:	00078513          	mv	a0,a5
80003f3c:	01c12083          	lw	ra,28(sp)
80003f40:	01812403          	lw	s0,24(sp)
80003f44:	01412483          	lw	s1,20(sp)
80003f48:	02010113          	addi	sp,sp,32
80003f4c:	00008067          	ret

80003f50 <API_GetSystemTasksSlots>:
API_GetSystemTasksSlots():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:284

// Iterates around the system tiles to sum the amount of tasks slots available
unsigned int API_GetSystemTasksSlots(){
80003f50:	fe010113          	addi	sp,sp,-32
80003f54:	00112e23          	sw	ra,28(sp)
80003f58:	00812c23          	sw	s0,24(sp)
80003f5c:	00912a23          	sw	s1,20(sp)
80003f60:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:286
    int m, n, i, sum;
    sum = 0;
80003f64:	fe042223          	sw	zero,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:287
    for(m = 0; m < DIM_X; m++){
80003f68:	fe042623          	sw	zero,-20(s0)
80003f6c:	0a80006f          	j	80004014 <API_GetSystemTasksSlots+0xc4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:288
        for(n = 0; n < DIM_Y; n++){
80003f70:	fe042423          	sw	zero,-24(s0)
80003f74:	0880006f          	j	80003ffc <API_GetSystemTasksSlots+0xac>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:289
            if(makeAddress(m,n) != makeAddress(0,0)){
80003f78:	fec42783          	lw	a5,-20(s0)
80003f7c:	fe842703          	lw	a4,-24(s0)
80003f80:	00070593          	mv	a1,a4
80003f84:	00078513          	mv	a0,a5
80003f88:	56c020ef          	jal	ra,800064f4 <makeAddress>
80003f8c:	00050493          	mv	s1,a0
80003f90:	00000593          	li	a1,0
80003f94:	00000513          	li	a0,0
80003f98:	55c020ef          	jal	ra,800064f4 <makeAddress>
80003f9c:	00050793          	mv	a5,a0
80003fa0:	04f48863          	beq	s1,a5,80003ff0 <API_GetSystemTasksSlots+0xa0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:290
                sum += Tiles[m][n].taskSlots;
80003fa4:	80023737          	lui	a4,0x80023
80003fa8:	fe842783          	lw	a5,-24(s0)
80003fac:	fec42683          	lw	a3,-20(s0)
80003fb0:	dd870613          	addi	a2,a4,-552 # 80022dd8 <__stack_top+0xfffdc668>
80003fb4:	00078713          	mv	a4,a5
80003fb8:	00171713          	slli	a4,a4,0x1
80003fbc:	00f70733          	add	a4,a4,a5
80003fc0:	00271793          	slli	a5,a4,0x2
80003fc4:	00078713          	mv	a4,a5
80003fc8:	00068793          	mv	a5,a3
80003fcc:	00379793          	slli	a5,a5,0x3
80003fd0:	00d787b3          	add	a5,a5,a3
80003fd4:	00279793          	slli	a5,a5,0x2
80003fd8:	00f707b3          	add	a5,a4,a5
80003fdc:	00f607b3          	add	a5,a2,a5
80003fe0:	0087a703          	lw	a4,8(a5)
80003fe4:	fe442783          	lw	a5,-28(s0)
80003fe8:	00f707b3          	add	a5,a4,a5
80003fec:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:288 (discriminator 2)
        for(n = 0; n < DIM_Y; n++){
80003ff0:	fe842783          	lw	a5,-24(s0)
80003ff4:	00178793          	addi	a5,a5,1
80003ff8:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:288 (discriminator 1)
80003ffc:	fe842703          	lw	a4,-24(s0)
80004000:	00200793          	li	a5,2
80004004:	f6e7dae3          	ble	a4,a5,80003f78 <API_GetSystemTasksSlots+0x28>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:287 (discriminator 2)
    for(m = 0; m < DIM_X; m++){
80004008:	fec42783          	lw	a5,-20(s0)
8000400c:	00178793          	addi	a5,a5,1
80004010:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:287 (discriminator 1)
80004014:	fec42703          	lw	a4,-20(s0)
80004018:	00200793          	li	a5,2
8000401c:	f4e7dae3          	ble	a4,a5,80003f70 <API_GetSystemTasksSlots+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:294
            }
        }
    }
    return sum;
80004020:	fe442783          	lw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:295
}
80004024:	00078513          	mv	a0,a5
80004028:	01c12083          	lw	ra,28(sp)
8000402c:	01812403          	lw	s0,24(sp)
80004030:	01412483          	lw	s1,20(sp)
80004034:	02010113          	addi	sp,sp,32
80004038:	00008067          	ret

8000403c <API_RepositoryAllocation>:
API_RepositoryAllocation():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:297

void API_RepositoryAllocation(unsigned int app, unsigned int task, unsigned int dest_addr){
8000403c:	fd010113          	addi	sp,sp,-48
80004040:	02112623          	sw	ra,44(sp)
80004044:	02812423          	sw	s0,40(sp)
80004048:	03010413          	addi	s0,sp,48
8000404c:	fca42e23          	sw	a0,-36(s0)
80004050:	fcb42c23          	sw	a1,-40(s0)
80004054:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:300
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80004058:	1ec010ef          	jal	ra,80005244 <API_GetServiceSlot>
8000405c:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:301
        if(mySlot == PIPE_FULL){
80004060:	fec42703          	lw	a4,-20(s0)
80004064:	fdfe07b7          	lui	a5,0xfdfe0
80004068:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9968d>
8000406c:	00f71463          	bne	a4,a5,80004074 <API_RepositoryAllocation+0x38>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:303
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80004070:	4f8030ef          	jal	ra,80007568 <API_NI_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:305
        }
    }while(mySlot == PIPE_FULL);
80004074:	fec42703          	lw	a4,-20(s0)
80004078:	fdfe07b7          	lui	a5,0xfdfe0
8000407c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9968d>
80004080:	fcf70ce3          	beq	a4,a5,80004058 <API_RepositoryAllocation+0x1c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:306
    printsv("I got a free service slo-!! -> ", mySlot);
80004084:	fec42783          	lw	a5,-20(s0)
80004088:	00078593          	mv	a1,a5
8000408c:	800087b7          	lui	a5,0x80008
80004090:	51478513          	addi	a0,a5,1300 # 80008514 <__stack_top+0xfffc1da4>
80004094:	044020ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:308

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80004098:	800227b7          	lui	a5,0x80022
8000409c:	fec42703          	lw	a4,-20(s0)
800040a0:	01c78693          	addi	a3,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
800040a4:	00070793          	mv	a5,a4
800040a8:	00479793          	slli	a5,a5,0x4
800040ac:	40e787b3          	sub	a5,a5,a4
800040b0:	00279793          	slli	a5,a5,0x2
800040b4:	00f687b3          	add	a5,a3,a5
800040b8:	feff0737          	lui	a4,0xfeff0
800040bc:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efa978e>
800040c0:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:310

    ServicePipe[mySlot].header.header           = makeAddress(0, 0) | PERIPH_SOUTH;
800040c4:	00000593          	li	a1,0
800040c8:	00000513          	li	a0,0
800040cc:	428020ef          	jal	ra,800064f4 <makeAddress>
800040d0:	00050713          	mv	a4,a0
800040d4:	000407b7          	lui	a5,0x40
800040d8:	00f766b3          	or	a3,a4,a5
800040dc:	800227b7          	lui	a5,0x80022
800040e0:	fec42703          	lw	a4,-20(s0)
800040e4:	01c78613          	addi	a2,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
800040e8:	00070793          	mv	a5,a4
800040ec:	00479793          	slli	a5,a5,0x4
800040f0:	40e787b3          	sub	a5,a5,a4
800040f4:	00279793          	slli	a5,a5,0x2
800040f8:	00f607b3          	add	a5,a2,a5
800040fc:	00d7a423          	sw	a3,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:311
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80004100:	800227b7          	lui	a5,0x80022
80004104:	fec42703          	lw	a4,-20(s0)
80004108:	01c78693          	addi	a3,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
8000410c:	00070793          	mv	a5,a4
80004110:	00479793          	slli	a5,a5,0x4
80004114:	40e787b3          	sub	a5,a5,a4
80004118:	00279793          	slli	a5,a5,0x2
8000411c:	00f687b3          	add	a5,a3,a5
80004120:	00b00713          	li	a4,11
80004124:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:312
    ServicePipe[mySlot].header.service          = TASK_ALLOCATION_SEND;
80004128:	800227b7          	lui	a5,0x80022
8000412c:	fec42703          	lw	a4,-20(s0)
80004130:	01c78693          	addi	a3,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
80004134:	00070793          	mv	a5,a4
80004138:	00479793          	slli	a5,a5,0x4
8000413c:	40e787b3          	sub	a5,a5,a4
80004140:	00279793          	slli	a5,a5,0x2
80004144:	00f687b3          	add	a5,a3,a5
80004148:	03000713          	li	a4,48
8000414c:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:313
    ServicePipe[mySlot].header.task_id          = task;
80004150:	800227b7          	lui	a5,0x80022
80004154:	fec42703          	lw	a4,-20(s0)
80004158:	01c78693          	addi	a3,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
8000415c:	00070793          	mv	a5,a4
80004160:	00479793          	slli	a5,a5,0x4
80004164:	40e787b3          	sub	a5,a5,a4
80004168:	00279793          	slli	a5,a5,0x2
8000416c:	00f687b3          	add	a5,a3,a5
80004170:	fd842703          	lw	a4,-40(s0)
80004174:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:314
    ServicePipe[mySlot].header.task_app_id      = app;
80004178:	800227b7          	lui	a5,0x80022
8000417c:	fec42703          	lw	a4,-20(s0)
80004180:	01c78693          	addi	a3,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
80004184:	00070793          	mv	a5,a4
80004188:	00479793          	slli	a5,a5,0x4
8000418c:	40e787b3          	sub	a5,a5,a4
80004190:	00279793          	slli	a5,a5,0x2
80004194:	00f687b3          	add	a5,a3,a5
80004198:	fdc42703          	lw	a4,-36(s0)
8000419c:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:315
    ServicePipe[mySlot].header.task_dest_addr   = dest_addr;
800041a0:	800227b7          	lui	a5,0x80022
800041a4:	fec42703          	lw	a4,-20(s0)
800041a8:	01c78693          	addi	a3,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
800041ac:	00070793          	mv	a5,a4
800041b0:	00479793          	slli	a5,a5,0x4
800041b4:	40e787b3          	sub	a5,a5,a4
800041b8:	00279793          	slli	a5,a5,0x2
800041bc:	00f687b3          	add	a5,a3,a5
800041c0:	fd442703          	lw	a4,-44(s0)
800041c4:	02e7ac23          	sw	a4,56(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:317

    API_PushSendQueue(SERVICE, mySlot);
800041c8:	fec42583          	lw	a1,-20(s0)
800041cc:	10100537          	lui	a0,0x10100
800041d0:	364020ef          	jal	ra,80006534 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:318
    return;    
800041d4:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:319
}
800041d8:	02c12083          	lw	ra,44(sp)
800041dc:	02812403          	lw	s0,40(sp)
800041e0:	03010113          	addi	sp,sp,48
800041e4:	00008067          	ret

800041e8 <API_TaskAllocated>:
API_TaskAllocated():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:321

void API_TaskAllocated(unsigned int task_id, unsigned int app_id){
800041e8:	fe010113          	addi	sp,sp,-32
800041ec:	00812e23          	sw	s0,28(sp)
800041f0:	02010413          	addi	s0,sp,32
800041f4:	fea42623          	sw	a0,-20(s0)
800041f8:	feb42423          	sw	a1,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:323
    unsigned int i;
    applications[app_id].tasks[task_id].status = TASK_ALLOCATED;
800041fc:	80022737          	lui	a4,0x80022
80004200:	fec42783          	lw	a5,-20(s0)
80004204:	fe842683          	lw	a3,-24(s0)
80004208:	62c70613          	addi	a2,a4,1580 # 8002262c <__stack_top+0xfffdbebc>
8000420c:	00078713          	mv	a4,a5
80004210:	00171713          	slli	a4,a4,0x1
80004214:	00f70733          	add	a4,a4,a5
80004218:	00271793          	slli	a5,a4,0x2
8000421c:	00078713          	mv	a4,a5
80004220:	00068793          	mv	a5,a3
80004224:	00279793          	slli	a5,a5,0x2
80004228:	00d787b3          	add	a5,a5,a3
8000422c:	00579793          	slli	a5,a5,0x5
80004230:	00f707b3          	add	a5,a4,a5
80004234:	00f607b3          	add	a5,a2,a5
80004238:	00400713          	li	a4,4
8000423c:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:324
    return;
80004240:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:325
}
80004244:	01c12403          	lw	s0,28(sp)
80004248:	02010113          	addi	sp,sp,32
8000424c:	00008067          	ret

80004250 <API_ApplicationStart>:
API_ApplicationStart():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:327

void API_ApplicationStart(unsigned int app_id){
80004250:	fd010113          	addi	sp,sp,-48
80004254:	02112623          	sw	ra,44(sp)
80004258:	02812423          	sw	s0,40(sp)
8000425c:	03010413          	addi	s0,sp,48
80004260:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:329
    unsigned int i, j;
    printsv("Starting Application: ", app_id);
80004264:	fdc42783          	lw	a5,-36(s0)
80004268:	00078593          	mv	a1,a5
8000426c:	800087b7          	lui	a5,0x80008
80004270:	53478513          	addi	a0,a5,1332 # 80008534 <__stack_top+0xfffc1dc4>
80004274:	665010ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:330
    for(i = 0; i < applications[app_id].numTasks; i++){
80004278:	fe042623          	sw	zero,-20(s0)
8000427c:	1d80006f          	j	80004454 <API_ApplicationStart+0x204>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:333
        while(ServiceMessage.status == PIPE_OCCUPIED){
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80004280:	2e8030ef          	jal	ra,80007568 <API_NI_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:334
            prints("Esperando...\n");
80004284:	800087b7          	lui	a5,0x80008
80004288:	54c78513          	addi	a0,a5,1356 # 8000854c <__stack_top+0xfffc1ddc>
8000428c:	5a1010ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:331
        while(ServiceMessage.status == PIPE_OCCUPIED){
80004290:	800227b7          	lui	a5,0x80022
80004294:	1147a703          	lw	a4,276(a5) # 80022114 <__stack_top+0xfffdb9a4>
80004298:	00100793          	li	a5,1
8000429c:	fef702e3          	beq	a4,a5,80004280 <API_ApplicationStart+0x30>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:343
        //     if(mySlot == PIPE_FULL){
        //         // Runs the NI Handler to send/receive packets, opening space in the PIPE
        //         API_NI_Handler();
        //     }
        // }while(mySlot == PIPE_FULL);
        printsv("Sending TASK_START to task ", i);
800042a0:	fec42783          	lw	a5,-20(s0)
800042a4:	00078593          	mv	a1,a5
800042a8:	800087b7          	lui	a5,0x80008
800042ac:	55c78513          	addi	a0,a5,1372 # 8000855c <__stack_top+0xfffc1dec>
800042b0:	629010ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:344
        ServiceMessage.status = PIPE_OCCUPIED;
800042b4:	800227b7          	lui	a5,0x80022
800042b8:	00100713          	li	a4,1
800042bc:	10e7aa23          	sw	a4,276(a5) # 80022114 <__stack_top+0xfffdb9a4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:346

        ServiceMessage.header.header           = applications[app_id].tasks[i].addr;
800042c0:	80022737          	lui	a4,0x80022
800042c4:	fec42783          	lw	a5,-20(s0)
800042c8:	fdc42683          	lw	a3,-36(s0)
800042cc:	62c70613          	addi	a2,a4,1580 # 8002262c <__stack_top+0xfffdbebc>
800042d0:	00078713          	mv	a4,a5
800042d4:	00171713          	slli	a4,a4,0x1
800042d8:	00f70733          	add	a4,a4,a5
800042dc:	00271793          	slli	a5,a4,0x2
800042e0:	00078713          	mv	a4,a5
800042e4:	00068793          	mv	a5,a3
800042e8:	00279793          	slli	a5,a5,0x2
800042ec:	00d787b3          	add	a5,a5,a3
800042f0:	00579793          	slli	a5,a5,0x5
800042f4:	00f707b3          	add	a5,a4,a5
800042f8:	00f607b3          	add	a5,a2,a5
800042fc:	0187a703          	lw	a4,24(a5)
80004300:	800227b7          	lui	a5,0x80022
80004304:	11478793          	addi	a5,a5,276 # 80022114 <__stack_top+0xfffdb9a4>
80004308:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:347
        ServiceMessage.header.payload_size     = PKT_SERVICE_SIZE + applications[app_id].numTasks + 1;
8000430c:	800226b7          	lui	a3,0x80022
80004310:	fdc42703          	lw	a4,-36(s0)
80004314:	00070793          	mv	a5,a4
80004318:	00279793          	slli	a5,a5,0x2
8000431c:	00e787b3          	add	a5,a5,a4
80004320:	00579793          	slli	a5,a5,0x5
80004324:	62c68713          	addi	a4,a3,1580 # 8002262c <__stack_top+0xfffdbebc>
80004328:	00e787b3          	add	a5,a5,a4
8000432c:	0107a783          	lw	a5,16(a5)
80004330:	00c78713          	addi	a4,a5,12
80004334:	800227b7          	lui	a5,0x80022
80004338:	11478793          	addi	a5,a5,276 # 80022114 <__stack_top+0xfffdb9a4>
8000433c:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:348
        ServiceMessage.header.service          = TASK_START;
80004340:	800227b7          	lui	a5,0x80022
80004344:	11478793          	addi	a5,a5,276 # 80022114 <__stack_top+0xfffdb9a4>
80004348:	40000713          	li	a4,1024
8000434c:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:349
        ServiceMessage.header.task_id          = i;
80004350:	800227b7          	lui	a5,0x80022
80004354:	11478793          	addi	a5,a5,276 # 80022114 <__stack_top+0xfffdb9a4>
80004358:	fec42703          	lw	a4,-20(s0)
8000435c:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:350
        ServiceMessage.header.task_app_id      = app_id;
80004360:	800227b7          	lui	a5,0x80022
80004364:	11478793          	addi	a5,a5,276 # 80022114 <__stack_top+0xfffdb9a4>
80004368:	fdc42703          	lw	a4,-36(s0)
8000436c:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:351
        ServiceMessage.msg.length              = applications[app_id].numTasks;
80004370:	800226b7          	lui	a3,0x80022
80004374:	fdc42703          	lw	a4,-36(s0)
80004378:	00070793          	mv	a5,a4
8000437c:	00279793          	slli	a5,a5,0x2
80004380:	00e787b3          	add	a5,a5,a4
80004384:	00579793          	slli	a5,a5,0x5
80004388:	62c68713          	addi	a4,a3,1580 # 8002262c <__stack_top+0xfffdbebc>
8000438c:	00e787b3          	add	a5,a5,a4
80004390:	0107a703          	lw	a4,16(a5)
80004394:	800227b7          	lui	a5,0x80022
80004398:	11478793          	addi	a5,a5,276 # 80022114 <__stack_top+0xfffdb9a4>
8000439c:	02e7ae23          	sw	a4,60(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:352
        for(j = 0; j < applications[app_id].numTasks; j++){
800043a0:	fe042423          	sw	zero,-24(s0)
800043a4:	06c0006f          	j	80004410 <API_ApplicationStart+0x1c0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:353 (discriminator 3)
            ServiceMessage.msg.msg[j]          = applications[app_id].tasks[j].addr;
800043a8:	80022737          	lui	a4,0x80022
800043ac:	fe842783          	lw	a5,-24(s0)
800043b0:	fdc42683          	lw	a3,-36(s0)
800043b4:	62c70613          	addi	a2,a4,1580 # 8002262c <__stack_top+0xfffdbebc>
800043b8:	00078713          	mv	a4,a5
800043bc:	00171713          	slli	a4,a4,0x1
800043c0:	00f70733          	add	a4,a4,a5
800043c4:	00271793          	slli	a5,a4,0x2
800043c8:	00078713          	mv	a4,a5
800043cc:	00068793          	mv	a5,a3
800043d0:	00279793          	slli	a5,a5,0x2
800043d4:	00d787b3          	add	a5,a5,a3
800043d8:	00579793          	slli	a5,a5,0x5
800043dc:	00f707b3          	add	a5,a4,a5
800043e0:	00f607b3          	add	a5,a2,a5
800043e4:	0187a703          	lw	a4,24(a5)
800043e8:	800226b7          	lui	a3,0x80022
800043ec:	fe842783          	lw	a5,-24(s0)
800043f0:	00c78793          	addi	a5,a5,12
800043f4:	11468693          	addi	a3,a3,276 # 80022114 <__stack_top+0xfffdb9a4>
800043f8:	00279793          	slli	a5,a5,0x2
800043fc:	00f687b3          	add	a5,a3,a5
80004400:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:352 (discriminator 3)
        for(j = 0; j < applications[app_id].numTasks; j++){
80004404:	fe842783          	lw	a5,-24(s0)
80004408:	00178793          	addi	a5,a5,1
8000440c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:352 (discriminator 1)
80004410:	800226b7          	lui	a3,0x80022
80004414:	fdc42703          	lw	a4,-36(s0)
80004418:	00070793          	mv	a5,a4
8000441c:	00279793          	slli	a5,a5,0x2
80004420:	00e787b3          	add	a5,a5,a4
80004424:	00579793          	slli	a5,a5,0x5
80004428:	62c68713          	addi	a4,a3,1580 # 8002262c <__stack_top+0xfffdbebc>
8000442c:	00e787b3          	add	a5,a5,a4
80004430:	0107a783          	lw	a5,16(a5)
80004434:	fe842703          	lw	a4,-24(s0)
80004438:	f6f768e3          	bltu	a4,a5,800043a8 <API_ApplicationStart+0x158>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:355 (discriminator 2)
        }
        API_PushSendQueue(SYS_MESSAGE, 0);
8000443c:	00000593          	li	a1,0
80004440:	50500537          	lui	a0,0x50500
80004444:	0f0020ef          	jal	ra,80006534 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:330 (discriminator 2)
    for(i = 0; i < applications[app_id].numTasks; i++){
80004448:	fec42783          	lw	a5,-20(s0)
8000444c:	00178793          	addi	a5,a5,1
80004450:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:330 (discriminator 1)
80004454:	800226b7          	lui	a3,0x80022
80004458:	fdc42703          	lw	a4,-36(s0)
8000445c:	00070793          	mv	a5,a4
80004460:	00279793          	slli	a5,a5,0x2
80004464:	00e787b3          	add	a5,a5,a4
80004468:	00579793          	slli	a5,a5,0x5
8000446c:	62c68713          	addi	a4,a3,1580 # 8002262c <__stack_top+0xfffdbebc>
80004470:	00e787b3          	add	a5,a5,a4
80004474:	0107a783          	lw	a5,16(a5)
80004478:	fec42703          	lw	a4,-20(s0)
8000447c:	e0f76ae3          	bltu	a4,a5,80004290 <API_ApplicationStart+0x40>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:357
    }
    return;
80004480:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:358
}
80004484:	02c12083          	lw	ra,44(sp)
80004488:	02812403          	lw	s0,40(sp)
8000448c:	03010113          	addi	sp,sp,48
80004490:	00008067          	ret

80004494 <API_StartTasks>:
API_StartTasks():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:361


void API_StartTasks(){
80004494:	fe010113          	addi	sp,sp,-32
80004498:	00112e23          	sw	ra,28(sp)
8000449c:	00812c23          	sw	s0,24(sp)
800044a0:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:363
    unsigned int j, i, start;
    for(j = 0; j < NUM_MAX_APPS; j++){
800044a4:	fe042623          	sw	zero,-20(s0)
800044a8:	18c0006f          	j	80004634 <API_StartTasks+0x1a0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:364
        if(applications[j].occupied == TRUE){
800044ac:	800226b7          	lui	a3,0x80022
800044b0:	fec42703          	lw	a4,-20(s0)
800044b4:	00070793          	mv	a5,a4
800044b8:	00279793          	slli	a5,a5,0x2
800044bc:	00e787b3          	add	a5,a5,a4
800044c0:	00579793          	slli	a5,a5,0x5
800044c4:	62c68713          	addi	a4,a3,1580 # 8002262c <__stack_top+0xfffdbebc>
800044c8:	00e787b3          	add	a5,a5,a4
800044cc:	0007a703          	lw	a4,0(a5)
800044d0:	00100793          	li	a5,1
800044d4:	14f71a63          	bne	a4,a5,80004628 <API_StartTasks+0x194>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:365
            start = TRUE;
800044d8:	00100793          	li	a5,1
800044dc:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:366
            for(i = 0; i < applications[j].numTasks; i++){
800044e0:	fe042423          	sw	zero,-24(s0)
800044e4:	0600006f          	j	80004544 <API_StartTasks+0xb0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:367
                if(applications[j].tasks[i].status != TASK_ALLOCATED){
800044e8:	80022737          	lui	a4,0x80022
800044ec:	fe842783          	lw	a5,-24(s0)
800044f0:	fec42683          	lw	a3,-20(s0)
800044f4:	62c70613          	addi	a2,a4,1580 # 8002262c <__stack_top+0xfffdbebc>
800044f8:	00078713          	mv	a4,a5
800044fc:	00171713          	slli	a4,a4,0x1
80004500:	00f70733          	add	a4,a4,a5
80004504:	00271793          	slli	a5,a4,0x2
80004508:	00078713          	mv	a4,a5
8000450c:	00068793          	mv	a5,a3
80004510:	00279793          	slli	a5,a5,0x2
80004514:	00d787b3          	add	a5,a5,a3
80004518:	00579793          	slli	a5,a5,0x5
8000451c:	00f707b3          	add	a5,a4,a5
80004520:	00f607b3          	add	a5,a2,a5
80004524:	0147a703          	lw	a4,20(a5)
80004528:	00400793          	li	a5,4
8000452c:	00f70663          	beq	a4,a5,80004538 <API_StartTasks+0xa4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:368
                    start = FALSE;
80004530:	fe042223          	sw	zero,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:369
                    break;
80004534:	03c0006f          	j	80004570 <API_StartTasks+0xdc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:366 (discriminator 2)
            for(i = 0; i < applications[j].numTasks; i++){
80004538:	fe842783          	lw	a5,-24(s0)
8000453c:	00178793          	addi	a5,a5,1
80004540:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:366 (discriminator 1)
80004544:	800226b7          	lui	a3,0x80022
80004548:	fec42703          	lw	a4,-20(s0)
8000454c:	00070793          	mv	a5,a4
80004550:	00279793          	slli	a5,a5,0x2
80004554:	00e787b3          	add	a5,a5,a4
80004558:	00579793          	slli	a5,a5,0x5
8000455c:	62c68713          	addi	a4,a3,1580 # 8002262c <__stack_top+0xfffdbebc>
80004560:	00e787b3          	add	a5,a5,a4
80004564:	0107a783          	lw	a5,16(a5)
80004568:	fe842703          	lw	a4,-24(s0)
8000456c:	f6f76ee3          	bltu	a4,a5,800044e8 <API_StartTasks+0x54>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:372
                }
            }
            if(start == TRUE){
80004570:	fe442703          	lw	a4,-28(s0)
80004574:	00100793          	li	a5,1
80004578:	0af71863          	bne	a4,a5,80004628 <API_StartTasks+0x194>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:373
                printsv("Application is allocated: ", j);
8000457c:	fec42783          	lw	a5,-20(s0)
80004580:	00078593          	mv	a1,a5
80004584:	800087b7          	lui	a5,0x80008
80004588:	57878513          	addi	a0,a5,1400 # 80008578 <__stack_top+0xfffc1e08>
8000458c:	34d010ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:374
                API_ApplicationStart(j);
80004590:	fec42503          	lw	a0,-20(s0)
80004594:	cbdff0ef          	jal	ra,80004250 <API_ApplicationStart>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:375
                prints("Start command sent to every task...\n");
80004598:	800087b7          	lui	a5,0x80008
8000459c:	59478513          	addi	a0,a5,1428 # 80008594 <__stack_top+0xfffc1e24>
800045a0:	28d010ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:376
                for(i = 0; i < applications[j].numTasks; i++){
800045a4:	fe042423          	sw	zero,-24(s0)
800045a8:	0540006f          	j	800045fc <API_StartTasks+0x168>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:377 (discriminator 3)
                    applications[j].tasks[i].status = TASK_STARTED;
800045ac:	80022737          	lui	a4,0x80022
800045b0:	fe842783          	lw	a5,-24(s0)
800045b4:	fec42683          	lw	a3,-20(s0)
800045b8:	62c70613          	addi	a2,a4,1580 # 8002262c <__stack_top+0xfffdbebc>
800045bc:	00078713          	mv	a4,a5
800045c0:	00171713          	slli	a4,a4,0x1
800045c4:	00f70733          	add	a4,a4,a5
800045c8:	00271793          	slli	a5,a4,0x2
800045cc:	00078713          	mv	a4,a5
800045d0:	00068793          	mv	a5,a3
800045d4:	00279793          	slli	a5,a5,0x2
800045d8:	00d787b3          	add	a5,a5,a3
800045dc:	00579793          	slli	a5,a5,0x5
800045e0:	00f707b3          	add	a5,a4,a5
800045e4:	00f607b3          	add	a5,a2,a5
800045e8:	00500713          	li	a4,5
800045ec:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:376 (discriminator 3)
                for(i = 0; i < applications[j].numTasks; i++){
800045f0:	fe842783          	lw	a5,-24(s0)
800045f4:	00178793          	addi	a5,a5,1
800045f8:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:376 (discriminator 1)
800045fc:	800226b7          	lui	a3,0x80022
80004600:	fec42703          	lw	a4,-20(s0)
80004604:	00070793          	mv	a5,a4
80004608:	00279793          	slli	a5,a5,0x2
8000460c:	00e787b3          	add	a5,a5,a4
80004610:	00579793          	slli	a5,a5,0x5
80004614:	62c68713          	addi	a4,a3,1580 # 8002262c <__stack_top+0xfffdbebc>
80004618:	00e787b3          	add	a5,a5,a4
8000461c:	0107a783          	lw	a5,16(a5)
80004620:	fe842703          	lw	a4,-24(s0)
80004624:	f8f764e3          	bltu	a4,a5,800045ac <API_StartTasks+0x118>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:363 (discriminator 2)
    for(j = 0; j < NUM_MAX_APPS; j++){
80004628:	fec42783          	lw	a5,-20(s0)
8000462c:	00178793          	addi	a5,a5,1
80004630:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:363 (discriminator 1)
80004634:	fec42703          	lw	a4,-20(s0)
80004638:	00b00793          	li	a5,11
8000463c:	e6e7f8e3          	bleu	a4,a5,800044ac <API_StartTasks+0x18>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:382
                }
            }
        }
    }
    return;
80004640:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:383
}    
80004644:	01c12083          	lw	ra,28(sp)
80004648:	01812403          	lw	s0,24(sp)
8000464c:	02010113          	addi	sp,sp,32
80004650:	00008067          	ret

80004654 <API_TaskListInit>:
API_TaskListInit():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:13
#include "chronos.h"

// Stores information about each running task
//extern volatile Task TaskList[ NUM_MAX_TASKS ];

void API_TaskListInit(){
80004654:	fe010113          	addi	sp,sp,-32
80004658:	00812e23          	sw	s0,28(sp)
8000465c:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:15
    unsigned int i, j;
    for (i = 0; i < NUM_MAX_TASKS; i++){
80004660:	fe042623          	sw	zero,-20(s0)
80004664:	07c0006f          	j	800046e0 <API_TaskListInit+0x8c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:16
        TaskList[i].status = TASK_SLOT_EMPTY;
80004668:	800237b7          	lui	a5,0x80023
8000466c:	fec42683          	lw	a3,-20(s0)
80004670:	00001737          	lui	a4,0x1
80004674:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80004678:	02e68733          	mul	a4,a3,a4
8000467c:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004680:	00f707b3          	add	a5,a4,a5
80004684:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:17
        for (j = 0; j < NUM_MAX_APP_TASKS; j++){
80004688:	fe042423          	sw	zero,-24(s0)
8000468c:	03c0006f          	j	800046c8 <API_TaskListInit+0x74>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:18 (discriminator 3)
            TaskList[i].PendingReq[j] = FALSE;
80004690:	800237b7          	lui	a5,0x80023
80004694:	fec42683          	lw	a3,-20(s0)
80004698:	26100713          	li	a4,609
8000469c:	02e686b3          	mul	a3,a3,a4
800046a0:	fe842703          	lw	a4,-24(s0)
800046a4:	00e68733          	add	a4,a3,a4
800046a8:	24c70713          	addi	a4,a4,588
800046ac:	00271713          	slli	a4,a4,0x2
800046b0:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
800046b4:	00f707b3          	add	a5,a4,a5
800046b8:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:17 (discriminator 3)
        for (j = 0; j < NUM_MAX_APP_TASKS; j++){
800046bc:	fe842783          	lw	a5,-24(s0)
800046c0:	00178793          	addi	a5,a5,1
800046c4:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:17 (discriminator 1)
800046c8:	fe842703          	lw	a4,-24(s0)
800046cc:	00900793          	li	a5,9
800046d0:	fce7f0e3          	bleu	a4,a5,80004690 <API_TaskListInit+0x3c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 2)
    for (i = 0; i < NUM_MAX_TASKS; i++){
800046d4:	fec42783          	lw	a5,-20(s0)
800046d8:	00178793          	addi	a5,a5,1
800046dc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 1)
800046e0:	fec42703          	lw	a4,-20(s0)
800046e4:	00500793          	li	a5,5
800046e8:	f8e7f0e3          	bleu	a4,a5,80004668 <API_TaskListInit+0x14>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:21
        }
    }
    return;
800046ec:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:22
}
800046f0:	01c12403          	lw	s0,28(sp)
800046f4:	02010113          	addi	sp,sp,32
800046f8:	00008067          	ret

800046fc <API_GetCurrentTaskSlot>:
API_GetCurrentTaskSlot():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:24

unsigned int API_GetCurrentTaskSlot(){
800046fc:	fe010113          	addi	sp,sp,-32
80004700:	00112e23          	sw	ra,28(sp)
80004704:	00812c23          	sw	s0,24(sp)
80004708:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:26
    // The handle of the currently running ( calling ) task on the kernel.
    TaskHandle_t xHandle = xTaskGetCurrentTaskHandle();
8000470c:	f6cfe0ef          	jal	ra,80002e78 <xTaskGetCurrentTaskHandle>
80004710:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:27
    unsigned int i = 0;
80004714:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:28
    for ( i = 0 ; i < NUM_MAX_TASKS ; i++ ) {
80004718:	fe042623          	sw	zero,-20(s0)
8000471c:	0640006f          	j	80004780 <API_GetCurrentTaskSlot+0x84>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:29
        if ( TaskList[ i ].TaskHandler == xHandle && TaskList[i].status != TASK_SLOT_EMPTY ) {
80004720:	800237b7          	lui	a5,0x80023
80004724:	fec42683          	lw	a3,-20(s0)
80004728:	e4478713          	addi	a4,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
8000472c:	000017b7          	lui	a5,0x1
80004730:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80004734:	02f687b3          	mul	a5,a3,a5
80004738:	00f707b3          	add	a5,a4,a5
8000473c:	0187a783          	lw	a5,24(a5)
80004740:	fe842703          	lw	a4,-24(s0)
80004744:	02f71863          	bne	a4,a5,80004774 <API_GetCurrentTaskSlot+0x78>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:29 (discriminator 1)
80004748:	800237b7          	lui	a5,0x80023
8000474c:	fec42683          	lw	a3,-20(s0)
80004750:	00001737          	lui	a4,0x1
80004754:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80004758:	02e68733          	mul	a4,a3,a4
8000475c:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004760:	00f707b3          	add	a5,a4,a5
80004764:	0007a783          	lw	a5,0(a5)
80004768:	00078663          	beqz	a5,80004774 <API_GetCurrentTaskSlot+0x78>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:30
            return( i );
8000476c:	fec42783          	lw	a5,-20(s0)
80004770:	02c0006f          	j	8000479c <API_GetCurrentTaskSlot+0xa0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:28 (discriminator 2)
    for ( i = 0 ; i < NUM_MAX_TASKS ; i++ ) {
80004774:	fec42783          	lw	a5,-20(s0)
80004778:	00178793          	addi	a5,a5,1
8000477c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:28 (discriminator 1)
80004780:	fec42703          	lw	a4,-20(s0)
80004784:	00500793          	li	a5,5
80004788:	f8e7fce3          	bleu	a4,a5,80004720 <API_GetCurrentTaskSlot+0x24>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:33
        }
    }
    prints("returning erro0\n");
8000478c:	800087b7          	lui	a5,0x80008
80004790:	5bc78513          	addi	a0,a5,1468 # 800085bc <__stack_top+0xfffc1e4c>
80004794:	099010ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:34
    return ERRO;
80004798:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:35
}
8000479c:	00078513          	mv	a0,a5
800047a0:	01c12083          	lw	ra,28(sp)
800047a4:	01812403          	lw	s0,24(sp)
800047a8:	02010113          	addi	sp,sp,32
800047ac:	00008067          	ret

800047b0 <API_GetFreeTaskSlot>:
API_GetFreeTaskSlot():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:37

unsigned int API_GetFreeTaskSlot(){
800047b0:	fe010113          	addi	sp,sp,-32
800047b4:	00112e23          	sw	ra,28(sp)
800047b8:	00812c23          	sw	s0,24(sp)
800047bc:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:39
    unsigned int i;
    for (i = 0; i < NUM_MAX_TASKS; i++){
800047c0:	fe042623          	sw	zero,-20(s0)
800047c4:	03c0006f          	j	80004800 <API_GetFreeTaskSlot+0x50>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:40
        if (TaskList[i].status == TASK_SLOT_EMPTY){
800047c8:	800237b7          	lui	a5,0x80023
800047cc:	fec42683          	lw	a3,-20(s0)
800047d0:	00001737          	lui	a4,0x1
800047d4:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
800047d8:	02e68733          	mul	a4,a3,a4
800047dc:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
800047e0:	00f707b3          	add	a5,a4,a5
800047e4:	0007a783          	lw	a5,0(a5)
800047e8:	00079663          	bnez	a5,800047f4 <API_GetFreeTaskSlot+0x44>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:41
            return i;
800047ec:	fec42783          	lw	a5,-20(s0)
800047f0:	02c0006f          	j	8000481c <API_GetFreeTaskSlot+0x6c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:39 (discriminator 2)
    for (i = 0; i < NUM_MAX_TASKS; i++){
800047f4:	fec42783          	lw	a5,-20(s0)
800047f8:	00178793          	addi	a5,a5,1
800047fc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:39 (discriminator 1)
80004800:	fec42703          	lw	a4,-20(s0)
80004804:	00500793          	li	a5,5
80004808:	fce7f0e3          	bleu	a4,a5,800047c8 <API_GetFreeTaskSlot+0x18>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:44
        }
    }
    prints("returning erro1\n");
8000480c:	800087b7          	lui	a5,0x80008
80004810:	5d078513          	addi	a0,a5,1488 # 800085d0 <__stack_top+0xfffc1e60>
80004814:	019010ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:45
    return ERRO;
80004818:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:46
}
8000481c:	00078513          	mv	a0,a5
80004820:	01c12083          	lw	ra,28(sp)
80004824:	01812403          	lw	s0,24(sp)
80004828:	02010113          	addi	sp,sp,32
8000482c:	00008067          	ret

80004830 <API_TaskAllocation>:
API_TaskAllocation():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:48

unsigned int API_TaskAllocation(unsigned int task_id, unsigned int txt_size, unsigned int bss_size, unsigned int start_point, unsigned int task_app_id){
80004830:	fc010113          	addi	sp,sp,-64
80004834:	02112e23          	sw	ra,60(sp)
80004838:	02812c23          	sw	s0,56(sp)
8000483c:	04010413          	addi	s0,sp,64
80004840:	fca42e23          	sw	a0,-36(s0)
80004844:	fcb42c23          	sw	a1,-40(s0)
80004848:	fcc42a23          	sw	a2,-44(s0)
8000484c:	fcd42823          	sw	a3,-48(s0)
80004850:	fce42623          	sw	a4,-52(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:49
    unsigned int tslot = API_GetFreeTaskSlot();
80004854:	f5dff0ef          	jal	ra,800047b0 <API_GetFreeTaskSlot>
80004858:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:51
    int i;
    if(tslot == ERRO){
8000485c:	fe842703          	lw	a4,-24(s0)
80004860:	fff00793          	li	a5,-1
80004864:	00f71863          	bne	a4,a5,80004874 <API_TaskAllocation+0x44>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:52
        prints("DEU RUIM NO API_GetFreeTaskSlot()\n");
80004868:	800087b7          	lui	a5,0x80008
8000486c:	5e478513          	addi	a0,a5,1508 # 800085e4 <__stack_top+0xfffc1e74>
80004870:	7bc010ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:54
    }
    printsv("Got slot: ", tslot);
80004874:	fe842783          	lw	a5,-24(s0)
80004878:	00078593          	mv	a1,a5
8000487c:	800087b7          	lui	a5,0x80008
80004880:	60878513          	addi	a0,a5,1544 # 80008608 <__stack_top+0xfffc1e98>
80004884:	055010ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:55
    TaskList[tslot].status = TASK_SLOT_WAITING_START;
80004888:	800237b7          	lui	a5,0x80023
8000488c:	fe842683          	lw	a3,-24(s0)
80004890:	00001737          	lui	a4,0x1
80004894:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80004898:	02e68733          	mul	a4,a3,a4
8000489c:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
800048a0:	00f707b3          	add	a5,a4,a5
800048a4:	00200713          	li	a4,2
800048a8:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:56
    TaskList[tslot].waitingMsg = FALSE;
800048ac:	800237b7          	lui	a5,0x80023
800048b0:	fe842683          	lw	a3,-24(s0)
800048b4:	e4478713          	addi	a4,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
800048b8:	000017b7          	lui	a5,0x1
800048bc:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
800048c0:	02f687b3          	mul	a5,a3,a5
800048c4:	00f707b3          	add	a5,a4,a5
800048c8:	0007ae23          	sw	zero,28(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:57
    TaskList[tslot].TaskID = task_id;
800048cc:	800237b7          	lui	a5,0x80023
800048d0:	fe842683          	lw	a3,-24(s0)
800048d4:	00001737          	lui	a4,0x1
800048d8:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
800048dc:	02e68733          	mul	a4,a3,a4
800048e0:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
800048e4:	00f707b3          	add	a5,a4,a5
800048e8:	fdc42703          	lw	a4,-36(s0)
800048ec:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:58
    TaskList[tslot].AppID = task_app_id;
800048f0:	800237b7          	lui	a5,0x80023
800048f4:	fe842683          	lw	a3,-24(s0)
800048f8:	e4478713          	addi	a4,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
800048fc:	000017b7          	lui	a5,0x1
80004900:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80004904:	02f687b3          	mul	a5,a3,a5
80004908:	00f707b3          	add	a5,a4,a5
8000490c:	fcc42703          	lw	a4,-52(s0)
80004910:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:59
    TaskList[tslot].taskSize = 4 * (txt_size + bss_size); // it multiply by four because each word has 32 bits and the memory is addressed by byte - so each word is composed by 4 addresses
80004914:	fd842703          	lw	a4,-40(s0)
80004918:	fd442783          	lw	a5,-44(s0)
8000491c:	00f707b3          	add	a5,a4,a5
80004920:	00279713          	slli	a4,a5,0x2
80004924:	800237b7          	lui	a5,0x80023
80004928:	fe842603          	lw	a2,-24(s0)
8000492c:	e4478693          	addi	a3,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004930:	000017b7          	lui	a5,0x1
80004934:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80004938:	02f607b3          	mul	a5,a2,a5
8000493c:	00f687b3          	add	a5,a3,a5
80004940:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:60
    printsv("Task total size (txt+bss): ", TaskList[tslot].taskSize);
80004944:	800237b7          	lui	a5,0x80023
80004948:	fe842683          	lw	a3,-24(s0)
8000494c:	e4478713          	addi	a4,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004950:	000017b7          	lui	a5,0x1
80004954:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80004958:	02f687b3          	mul	a5,a3,a5
8000495c:	00f707b3          	add	a5,a4,a5
80004960:	0247a783          	lw	a5,36(a5)
80004964:	00078593          	mv	a1,a5
80004968:	800087b7          	lui	a5,0x80008
8000496c:	61478513          	addi	a0,a5,1556 # 80008614 <__stack_top+0xfffc1ea4>
80004970:	768010ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:61
    TaskList[tslot].taskAddr = (unsigned int)pvPortMalloc(TaskList[tslot].taskSize+64);
80004974:	800237b7          	lui	a5,0x80023
80004978:	fe842683          	lw	a3,-24(s0)
8000497c:	e4478713          	addi	a4,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004980:	000017b7          	lui	a5,0x1
80004984:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80004988:	02f687b3          	mul	a5,a3,a5
8000498c:	00f707b3          	add	a5,a4,a5
80004990:	0247a783          	lw	a5,36(a5)
80004994:	04078793          	addi	a5,a5,64
80004998:	00078513          	mv	a0,a5
8000499c:	94dfc0ef          	jal	ra,800012e8 <pvPortMalloc>
800049a0:	00050793          	mv	a5,a0
800049a4:	00078613          	mv	a2,a5
800049a8:	800237b7          	lui	a5,0x80023
800049ac:	fe842683          	lw	a3,-24(s0)
800049b0:	e4478713          	addi	a4,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
800049b4:	000017b7          	lui	a5,0x1
800049b8:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
800049bc:	02f687b3          	mul	a5,a3,a5
800049c0:	00f707b3          	add	a5,a4,a5
800049c4:	02c7a423          	sw	a2,40(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:62
    printsv("Task addr: ", TaskList[tslot].taskAddr);
800049c8:	800237b7          	lui	a5,0x80023
800049cc:	fe842683          	lw	a3,-24(s0)
800049d0:	e4478713          	addi	a4,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
800049d4:	000017b7          	lui	a5,0x1
800049d8:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
800049dc:	02f687b3          	mul	a5,a3,a5
800049e0:	00f707b3          	add	a5,a4,a5
800049e4:	0287a783          	lw	a5,40(a5)
800049e8:	00078593          	mv	a1,a5
800049ec:	800087b7          	lui	a5,0x80008
800049f0:	63078513          	addi	a0,a5,1584 # 80008630 <__stack_top+0xfffc1ec0>
800049f4:	6e4010ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:63
    TaskList[tslot].mainAddr =  TaskList[tslot].taskAddr + (4 * start_point);
800049f8:	800237b7          	lui	a5,0x80023
800049fc:	fe842683          	lw	a3,-24(s0)
80004a00:	e4478713          	addi	a4,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004a04:	000017b7          	lui	a5,0x1
80004a08:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80004a0c:	02f687b3          	mul	a5,a3,a5
80004a10:	00f707b3          	add	a5,a4,a5
80004a14:	0287a703          	lw	a4,40(a5)
80004a18:	fd042783          	lw	a5,-48(s0)
80004a1c:	00279793          	slli	a5,a5,0x2
80004a20:	00f70733          	add	a4,a4,a5
80004a24:	800237b7          	lui	a5,0x80023
80004a28:	fe842603          	lw	a2,-24(s0)
80004a2c:	e4478693          	addi	a3,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004a30:	000017b7          	lui	a5,0x1
80004a34:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80004a38:	02f607b3          	mul	a5,a2,a5
80004a3c:	00f687b3          	add	a5,a3,a5
80004a40:	02e7a623          	sw	a4,44(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:69

    // filling the MemoryRegion_t struct
    //TaskList[tslot].memRegion.ulLengthInBytes = 0;// TaskList[tslot].taskSize;
    //TaskList[tslot].memRegion.pvBaseAddress = 0;//TaskList[tslot].taskAddr;

    for(i=0;i<NUM_MAX_APP_TASKS;i++){
80004a44:	fe042623          	sw	zero,-20(s0)
80004a48:	0680006f          	j	80004ab0 <API_TaskAllocation+0x280>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:70 (discriminator 3)
        TaskList[tslot].PendingReq[i] = FALSE;
80004a4c:	800237b7          	lui	a5,0x80023
80004a50:	fe842683          	lw	a3,-24(s0)
80004a54:	26100713          	li	a4,609
80004a58:	02e686b3          	mul	a3,a3,a4
80004a5c:	fec42703          	lw	a4,-20(s0)
80004a60:	00e68733          	add	a4,a3,a4
80004a64:	24c70713          	addi	a4,a4,588
80004a68:	00271713          	slli	a4,a4,0x2
80004a6c:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004a70:	00f707b3          	add	a5,a4,a5
80004a74:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:71 (discriminator 3)
        TaskList[tslot].TasksMap[i] = 0;
80004a78:	80023737          	lui	a4,0x80023
80004a7c:	fe842683          	lw	a3,-24(s0)
80004a80:	26100793          	li	a5,609
80004a84:	02f686b3          	mul	a3,a3,a5
80004a88:	fec42783          	lw	a5,-20(s0)
80004a8c:	00f687b3          	add	a5,a3,a5
80004a90:	25478793          	addi	a5,a5,596
80004a94:	e4470713          	addi	a4,a4,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004a98:	00279793          	slli	a5,a5,0x2
80004a9c:	00f707b3          	add	a5,a4,a5
80004aa0:	0007a623          	sw	zero,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:69 (discriminator 3)
    for(i=0;i<NUM_MAX_APP_TASKS;i++){
80004aa4:	fec42783          	lw	a5,-20(s0)
80004aa8:	00178793          	addi	a5,a5,1
80004aac:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:69 (discriminator 1)
80004ab0:	fec42703          	lw	a4,-20(s0)
80004ab4:	00900793          	li	a5,9
80004ab8:	f8e7dae3          	ble	a4,a5,80004a4c <API_TaskAllocation+0x21c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:74
    }

    return tslot;
80004abc:	fe842783          	lw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:75
}
80004ac0:	00078513          	mv	a0,a5
80004ac4:	03c12083          	lw	ra,60(sp)
80004ac8:	03812403          	lw	s0,56(sp)
80004acc:	04010113          	addi	sp,sp,64
80004ad0:	00008067          	ret

80004ad4 <API_GetTaskSlot>:
API_GetTaskSlot():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:77

unsigned int API_GetTaskSlot(unsigned int task_id, unsigned int app_id){
80004ad4:	fd010113          	addi	sp,sp,-48
80004ad8:	02112623          	sw	ra,44(sp)
80004adc:	02812423          	sw	s0,40(sp)
80004ae0:	03010413          	addi	s0,sp,48
80004ae4:	fca42e23          	sw	a0,-36(s0)
80004ae8:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:79
    unsigned int i;
    for( i = 0; i < NUM_MAX_APP_TASKS; i++){
80004aec:	fe042623          	sw	zero,-20(s0)
80004af0:	08c0006f          	j	80004b7c <API_GetTaskSlot+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:80
        if(task_id == TaskList[i].TaskID && app_id == TaskList[i].AppID && TaskList[i].status != TASK_SLOT_EMPTY)
80004af4:	800237b7          	lui	a5,0x80023
80004af8:	fec42683          	lw	a3,-20(s0)
80004afc:	00001737          	lui	a4,0x1
80004b00:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80004b04:	02e68733          	mul	a4,a3,a4
80004b08:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004b0c:	00f707b3          	add	a5,a4,a5
80004b10:	0107a783          	lw	a5,16(a5)
80004b14:	fdc42703          	lw	a4,-36(s0)
80004b18:	04f71c63          	bne	a4,a5,80004b70 <API_GetTaskSlot+0x9c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:80 (discriminator 1)
80004b1c:	800237b7          	lui	a5,0x80023
80004b20:	fec42683          	lw	a3,-20(s0)
80004b24:	e4478713          	addi	a4,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004b28:	000017b7          	lui	a5,0x1
80004b2c:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80004b30:	02f687b3          	mul	a5,a3,a5
80004b34:	00f707b3          	add	a5,a4,a5
80004b38:	0147a783          	lw	a5,20(a5)
80004b3c:	fd842703          	lw	a4,-40(s0)
80004b40:	02f71863          	bne	a4,a5,80004b70 <API_GetTaskSlot+0x9c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:80 (discriminator 2)
80004b44:	800237b7          	lui	a5,0x80023
80004b48:	fec42683          	lw	a3,-20(s0)
80004b4c:	00001737          	lui	a4,0x1
80004b50:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80004b54:	02e68733          	mul	a4,a3,a4
80004b58:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004b5c:	00f707b3          	add	a5,a4,a5
80004b60:	0007a783          	lw	a5,0(a5)
80004b64:	00078663          	beqz	a5,80004b70 <API_GetTaskSlot+0x9c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:81
            return i;
80004b68:	fec42783          	lw	a5,-20(s0)
80004b6c:	02c0006f          	j	80004b98 <API_GetTaskSlot+0xc4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:79 (discriminator 2)
    for( i = 0; i < NUM_MAX_APP_TASKS; i++){
80004b70:	fec42783          	lw	a5,-20(s0)
80004b74:	00178793          	addi	a5,a5,1
80004b78:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:79 (discriminator 1)
80004b7c:	fec42703          	lw	a4,-20(s0)
80004b80:	00900793          	li	a5,9
80004b84:	f6e7f8e3          	bleu	a4,a5,80004af4 <API_GetTaskSlot+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:83
    }
    prints("returning erro2\n");
80004b88:	800087b7          	lui	a5,0x80008
80004b8c:	63c78513          	addi	a0,a5,1596 # 8000863c <__stack_top+0xfffc1ecc>
80004b90:	49c010ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:84
    return ERRO;
80004b94:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:85
}
80004b98:	00078513          	mv	a0,a5
80004b9c:	02c12083          	lw	ra,44(sp)
80004ba0:	02812403          	lw	s0,40(sp)
80004ba4:	03010113          	addi	sp,sp,48
80004ba8:	00008067          	ret

80004bac <API_TaskStart>:
API_TaskStart():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:87

void API_TaskStart(unsigned int slot){
80004bac:	fd010113          	addi	sp,sp,-48
80004bb0:	02112623          	sw	ra,44(sp)
80004bb4:	02812423          	sw	s0,40(sp)
80004bb8:	03010413          	addi	s0,sp,48
80004bbc:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:89
    BaseType_t xReturned;
    TaskList[slot].status = TASK_SLOT_RUNNING;
80004bc0:	800237b7          	lui	a5,0x80023
80004bc4:	fdc42683          	lw	a3,-36(s0)
80004bc8:	00001737          	lui	a4,0x1
80004bcc:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80004bd0:	02e68733          	mul	a4,a3,a4
80004bd4:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004bd8:	00f707b3          	add	a5,a4,a5
80004bdc:	00100713          	li	a4,1
80004be0:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:100
                                    tskIDLE_PRIORITY+1,         //uxPriority
                                    &TaskList[slot].TaskHandler,// pxCreatedTask
                                    NULL,                       // puxStackBuffer
                                    &TaskList[slot].memRegion );//xRegions*/
    
    xReturned = xTaskCreate(TaskList[slot].mainAddr,
80004be4:	800237b7          	lui	a5,0x80023
80004be8:	fdc42683          	lw	a3,-36(s0)
80004bec:	e4478713          	addi	a4,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004bf0:	000017b7          	lui	a5,0x1
80004bf4:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80004bf8:	02f687b3          	mul	a5,a3,a5
80004bfc:	00f707b3          	add	a5,a4,a5
80004c00:	02c7a783          	lw	a5,44(a5)
80004c04:	00078513          	mv	a0,a5
80004c08:	fdc42703          	lw	a4,-36(s0)
80004c0c:	000017b7          	lui	a5,0x1
80004c10:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80004c14:	02f707b3          	mul	a5,a4,a5
80004c18:	01078713          	addi	a4,a5,16
80004c1c:	800237b7          	lui	a5,0x80023
80004c20:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004c24:	00f707b3          	add	a5,a4,a5
80004c28:	00878793          	addi	a5,a5,8
80004c2c:	00000893          	li	a7,0
80004c30:	00000813          	li	a6,0
80004c34:	00100713          	li	a4,1
80004c38:	00000693          	li	a3,0
80004c3c:	00002637          	lui	a2,0x2
80004c40:	3e860613          	addi	a2,a2,1000 # 23e8 <HEAP_SIZE-0xdc18>
80004c44:	800085b7          	lui	a1,0x80008
80004c48:	65058593          	addi	a1,a1,1616 # 80008650 <__stack_top+0xfffc1ee0>
80004c4c:	b20fd0ef          	jal	ra,80001f6c <xTaskGenericCreate>
80004c50:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:106
                            "LaTask",
                            9192,//8192,//4096,//16384,
                            NULL,
                            tskIDLE_PRIORITY+1,
                            &TaskList[slot].TaskHandler);
    if( xReturned != pdPASS ){
80004c54:	fec42703          	lw	a4,-20(s0)
80004c58:	00100793          	li	a5,1
80004c5c:	00f70a63          	beq	a4,a5,80004c70 <API_TaskStart+0xc4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:107
        prints("ERROR - API_TaskStart!!!\n");
80004c60:	800087b7          	lui	a5,0x80008
80004c64:	65878513          	addi	a0,a5,1624 # 80008658 <__stack_top+0xfffc1ee8>
80004c68:	3c4010ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:109
    }
    return;
80004c6c:	00000013          	nop
80004c70:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:110
}
80004c74:	02c12083          	lw	ra,44(sp)
80004c78:	02812403          	lw	s0,40(sp)
80004c7c:	03010113          	addi	sp,sp,48
80004c80:	00008067          	ret

80004c84 <API_FinishRunningTask>:
API_FinishRunningTask():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:113


void API_FinishRunningTask(){
80004c84:	fe010113          	addi	sp,sp,-32
80004c88:	00112e23          	sw	ra,28(sp)
80004c8c:	00812c23          	sw	s0,24(sp)
80004c90:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:115
    int i;
    unsigned int slot = API_GetCurrentTaskSlot();
80004c94:	a69ff0ef          	jal	ra,800046fc <API_GetCurrentTaskSlot>
80004c98:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:116
    printsvsv("Finishing task:", TaskList[slot].TaskID, "app: ", TaskList[slot].AppID);
80004c9c:	800237b7          	lui	a5,0x80023
80004ca0:	fe842683          	lw	a3,-24(s0)
80004ca4:	00001737          	lui	a4,0x1
80004ca8:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80004cac:	02e68733          	mul	a4,a3,a4
80004cb0:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004cb4:	00f707b3          	add	a5,a4,a5
80004cb8:	0107a783          	lw	a5,16(a5)
80004cbc:	00078593          	mv	a1,a5
80004cc0:	800237b7          	lui	a5,0x80023
80004cc4:	fe842683          	lw	a3,-24(s0)
80004cc8:	e4478713          	addi	a4,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004ccc:	000017b7          	lui	a5,0x1
80004cd0:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80004cd4:	02f687b3          	mul	a5,a3,a5
80004cd8:	00f707b3          	add	a5,a4,a5
80004cdc:	0147a783          	lw	a5,20(a5)
80004ce0:	00078693          	mv	a3,a5
80004ce4:	800087b7          	lui	a5,0x80008
80004ce8:	67478613          	addi	a2,a5,1652 # 80008674 <__stack_top+0xfffc1f04>
80004cec:	800087b7          	lui	a5,0x80008
80004cf0:	67c78513          	addi	a0,a5,1660 # 8000867c <__stack_top+0xfffc1f0c>
80004cf4:	42c010ef          	jal	ra,80006120 <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:117
    printsv("From slot: ", slot);
80004cf8:	fe842783          	lw	a5,-24(s0)
80004cfc:	00078593          	mv	a1,a5
80004d00:	800087b7          	lui	a5,0x80008
80004d04:	68c78513          	addi	a0,a5,1676 # 8000868c <__stack_top+0xfffc1f1c>
80004d08:	3d0010ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:118
    while(API_checkPipe(slot) == 1){
80004d0c:	00c0006f          	j	80004d18 <API_FinishRunningTask+0x94>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:119
        vTaskDelay(1);
80004d10:	00100513          	li	a0,1
80004d14:	d50fd0ef          	jal	ra,80002264 <vTaskDelay>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:118
    while(API_checkPipe(slot) == 1){
80004d18:	fe842503          	lw	a0,-24(s0)
80004d1c:	6f4000ef          	jal	ra,80005410 <API_checkPipe>
80004d20:	00050713          	mv	a4,a0
80004d24:	00100793          	li	a5,1
80004d28:	fef704e3          	beq	a4,a5,80004d10 <API_FinishRunningTask+0x8c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:121
    }
    vTaskEnterCritical();
80004d2c:	974fe0ef          	jal	ra,80002ea0 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:122
    printsvsv("Task ", TaskList[slot].TaskID, "deleted with sucsess! From application ", TaskList[slot].AppID);
80004d30:	800237b7          	lui	a5,0x80023
80004d34:	fe842683          	lw	a3,-24(s0)
80004d38:	00001737          	lui	a4,0x1
80004d3c:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80004d40:	02e68733          	mul	a4,a3,a4
80004d44:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004d48:	00f707b3          	add	a5,a4,a5
80004d4c:	0107a783          	lw	a5,16(a5)
80004d50:	00078593          	mv	a1,a5
80004d54:	800237b7          	lui	a5,0x80023
80004d58:	fe842683          	lw	a3,-24(s0)
80004d5c:	e4478713          	addi	a4,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004d60:	000017b7          	lui	a5,0x1
80004d64:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80004d68:	02f687b3          	mul	a5,a3,a5
80004d6c:	00f707b3          	add	a5,a4,a5
80004d70:	0147a783          	lw	a5,20(a5)
80004d74:	00078693          	mv	a3,a5
80004d78:	800087b7          	lui	a5,0x80008
80004d7c:	69878613          	addi	a2,a5,1688 # 80008698 <__stack_top+0xfffc1f28>
80004d80:	800087b7          	lui	a5,0x80008
80004d84:	6c078513          	addi	a0,a5,1728 # 800086c0 <__stack_top+0xfffc1f50>
80004d88:	398010ef          	jal	ra,80006120 <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:123
    TaskList[slot].status = TASK_SLOT_EMPTY;
80004d8c:	800237b7          	lui	a5,0x80023
80004d90:	fe842683          	lw	a3,-24(s0)
80004d94:	00001737          	lui	a4,0x1
80004d98:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80004d9c:	02e68733          	mul	a4,a3,a4
80004da0:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004da4:	00f707b3          	add	a5,a4,a5
80004da8:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:125
    
    for(i = 0; i < NUM_MAX_TASKS; i++){
80004dac:	fe042623          	sw	zero,-20(s0)
80004db0:	0b80006f          	j	80004e68 <API_FinishRunningTask+0x1e4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:126
        printsvsv("TaskList[", i, "]status: ", TaskList[i].status );
80004db4:	800237b7          	lui	a5,0x80023
80004db8:	fec42683          	lw	a3,-20(s0)
80004dbc:	00001737          	lui	a4,0x1
80004dc0:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80004dc4:	02e68733          	mul	a4,a3,a4
80004dc8:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004dcc:	00f707b3          	add	a5,a4,a5
80004dd0:	0007a783          	lw	a5,0(a5)
80004dd4:	00078693          	mv	a3,a5
80004dd8:	800087b7          	lui	a5,0x80008
80004ddc:	6c878613          	addi	a2,a5,1736 # 800086c8 <__stack_top+0xfffc1f58>
80004de0:	fec42583          	lw	a1,-20(s0)
80004de4:	800087b7          	lui	a5,0x80008
80004de8:	6d478513          	addi	a0,a5,1748 # 800086d4 <__stack_top+0xfffc1f64>
80004dec:	334010ef          	jal	ra,80006120 <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:127
        if(TaskList[i].status != TASK_SLOT_EMPTY){
80004df0:	800237b7          	lui	a5,0x80023
80004df4:	fec42683          	lw	a3,-20(s0)
80004df8:	00001737          	lui	a4,0x1
80004dfc:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80004e00:	02e68733          	mul	a4,a3,a4
80004e04:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004e08:	00f707b3          	add	a5,a4,a5
80004e0c:	0007a783          	lw	a5,0(a5)
80004e10:	04078663          	beqz	a5,80004e5c <API_FinishRunningTask+0x1d8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:128
            printsvsv("Returning because of: ", i, "TaskList[i].status ", TaskList[i].status);
80004e14:	800237b7          	lui	a5,0x80023
80004e18:	fec42683          	lw	a3,-20(s0)
80004e1c:	00001737          	lui	a4,0x1
80004e20:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80004e24:	02e68733          	mul	a4,a3,a4
80004e28:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004e2c:	00f707b3          	add	a5,a4,a5
80004e30:	0007a783          	lw	a5,0(a5)
80004e34:	00078693          	mv	a3,a5
80004e38:	800087b7          	lui	a5,0x80008
80004e3c:	6e078613          	addi	a2,a5,1760 # 800086e0 <__stack_top+0xfffc1f70>
80004e40:	fec42583          	lw	a1,-20(s0)
80004e44:	800087b7          	lui	a5,0x80008
80004e48:	6f478513          	addi	a0,a5,1780 # 800086f4 <__stack_top+0xfffc1f84>
80004e4c:	2d4010ef          	jal	ra,80006120 <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:129
            i = 0xffffffff;
80004e50:	fff00793          	li	a5,-1
80004e54:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:130
            break;
80004e58:	01c0006f          	j	80004e74 <API_FinishRunningTask+0x1f0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:125 (discriminator 2)
    for(i = 0; i < NUM_MAX_TASKS; i++){
80004e5c:	fec42783          	lw	a5,-20(s0)
80004e60:	00178793          	addi	a5,a5,1
80004e64:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:125 (discriminator 1)
80004e68:	fec42703          	lw	a4,-20(s0)
80004e6c:	00500793          	li	a5,5
80004e70:	f4e7d2e3          	ble	a4,a5,80004db4 <API_FinishRunningTask+0x130>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:133
        }
    }
    if(i != 0xffffffff){
80004e74:	fec42703          	lw	a4,-20(s0)
80004e78:	fff00793          	li	a5,-1
80004e7c:	00f70463          	beq	a4,a5,80004e84 <API_FinishRunningTask+0x200>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:134
        API_setFreqIdle();
80004e80:	6a0000ef          	jal	ra,80005520 <API_setFreqIdle>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:136
    }
    API_SendFinishTask(TaskList[slot].TaskID, TaskList[slot].AppID);
80004e84:	800237b7          	lui	a5,0x80023
80004e88:	fe842683          	lw	a3,-24(s0)
80004e8c:	00001737          	lui	a4,0x1
80004e90:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80004e94:	02e68733          	mul	a4,a3,a4
80004e98:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004e9c:	00f707b3          	add	a5,a4,a5
80004ea0:	0107a603          	lw	a2,16(a5)
80004ea4:	800237b7          	lui	a5,0x80023
80004ea8:	fe842683          	lw	a3,-24(s0)
80004eac:	e4478713          	addi	a4,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004eb0:	000017b7          	lui	a5,0x1
80004eb4:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80004eb8:	02f687b3          	mul	a5,a3,a5
80004ebc:	00f707b3          	add	a5,a4,a5
80004ec0:	0147a783          	lw	a5,20(a5)
80004ec4:	00078593          	mv	a1,a5
80004ec8:	00060513          	mv	a0,a2
80004ecc:	7e9010ef          	jal	ra,80006eb4 <API_SendFinishTask>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:137
    vPortFree(TaskList[slot].taskAddr);
80004ed0:	800237b7          	lui	a5,0x80023
80004ed4:	fe842683          	lw	a3,-24(s0)
80004ed8:	e4478713          	addi	a4,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004edc:	000017b7          	lui	a5,0x1
80004ee0:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80004ee4:	02f687b3          	mul	a5,a3,a5
80004ee8:	00f707b3          	add	a5,a4,a5
80004eec:	0287a783          	lw	a5,40(a5)
80004ef0:	00078513          	mv	a0,a5
80004ef4:	dd0fc0ef          	jal	ra,800014c4 <vPortFree>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:138
    vTaskExitCritical();
80004ef8:	fe5fd0ef          	jal	ra,80002edc <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:139
    vTaskDelete(TaskList[slot].TaskHandler);
80004efc:	800237b7          	lui	a5,0x80023
80004f00:	fe842683          	lw	a3,-24(s0)
80004f04:	e4478713          	addi	a4,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004f08:	000017b7          	lui	a5,0x1
80004f0c:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80004f10:	02f687b3          	mul	a5,a3,a5
80004f14:	00f707b3          	add	a5,a4,a5
80004f18:	0187a783          	lw	a5,24(a5)
80004f1c:	00078513          	mv	a0,a5
80004f20:	a68fd0ef          	jal	ra,80002188 <vTaskDelete>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:140
    return;
80004f24:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:141
}
80004f28:	01c12083          	lw	ra,28(sp)
80004f2c:	01812403          	lw	s0,24(sp)
80004f30:	02010113          	addi	sp,sp,32
80004f34:	00008067          	ret

80004f38 <API_PipeInitialization>:
API_PipeInitialization():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:14

extern unsigned int thermalPacket_pending; // from thermal.h

////////////////////////////////////////////////////////////
// Initialize the PIPE, setting the status of each slot to FREE
void API_PipeInitialization(){
80004f38:	fe010113          	addi	sp,sp,-32
80004f3c:	00812e23          	sw	s0,28(sp)
80004f40:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:16
    int i, j;
    messageID = 0;
80004f44:	800227b7          	lui	a5,0x80022
80004f48:	1007a823          	sw	zero,272(a5) # 80022110 <__stack_top+0xfffdb9a0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:17
    ServiceMessage.status = PIPE_FREE;
80004f4c:	800227b7          	lui	a5,0x80022
80004f50:	fff00713          	li	a4,-1
80004f54:	10e7aa23          	sw	a4,276(a5) # 80022114 <__stack_top+0xfffdb9a4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:18
    for( i = 0; i < PIPE_SIZE; i++ ){
80004f58:	fe042623          	sw	zero,-20(s0)
80004f5c:	0cc0006f          	j	80005028 <API_PipeInitialization+0xf0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:19
        for(j = 0; j < NUM_MAX_TASKS; j++){
80004f60:	fe042423          	sw	zero,-24(s0)
80004f64:	0840006f          	j	80004fe8 <API_PipeInitialization+0xb0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:20 (discriminator 3)
            TaskList[j].MessagePipe[i].status = PIPE_FREE;
80004f68:	800236b7          	lui	a3,0x80023
80004f6c:	fec42703          	lw	a4,-20(s0)
80004f70:	fe842603          	lw	a2,-24(s0)
80004f74:	00070793          	mv	a5,a4
80004f78:	00379793          	slli	a5,a5,0x3
80004f7c:	00e787b3          	add	a5,a5,a4
80004f80:	00679793          	slli	a5,a5,0x6
80004f84:	00001737          	lui	a4,0x1
80004f88:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80004f8c:	02e60733          	mul	a4,a2,a4
80004f90:	00e78733          	add	a4,a5,a4
80004f94:	e4468793          	addi	a5,a3,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004f98:	00f707b3          	add	a5,a4,a5
80004f9c:	fff00713          	li	a4,-1
80004fa0:	02e7a823          	sw	a4,48(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:21 (discriminator 3)
            TaskList[j].MessagePipe[i].msgID  = 0;
80004fa4:	800237b7          	lui	a5,0x80023
80004fa8:	fec42703          	lw	a4,-20(s0)
80004fac:	fe842603          	lw	a2,-24(s0)
80004fb0:	e4478693          	addi	a3,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80004fb4:	00070793          	mv	a5,a4
80004fb8:	00379793          	slli	a5,a5,0x3
80004fbc:	00e787b3          	add	a5,a5,a4
80004fc0:	00679793          	slli	a5,a5,0x6
80004fc4:	00001737          	lui	a4,0x1
80004fc8:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80004fcc:	02e60733          	mul	a4,a2,a4
80004fd0:	00e787b3          	add	a5,a5,a4
80004fd4:	00f687b3          	add	a5,a3,a5
80004fd8:	0207aa23          	sw	zero,52(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:19 (discriminator 3)
        for(j = 0; j < NUM_MAX_TASKS; j++){
80004fdc:	fe842783          	lw	a5,-24(s0)
80004fe0:	00178793          	addi	a5,a5,1
80004fe4:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:19 (discriminator 1)
80004fe8:	fe842703          	lw	a4,-24(s0)
80004fec:	00500793          	li	a5,5
80004ff0:	f6e7dce3          	ble	a4,a5,80004f68 <API_PipeInitialization+0x30>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:23 (discriminator 2)
        }        
        ServicePipe[i].status = PIPE_FREE;
80004ff4:	800226b7          	lui	a3,0x80022
80004ff8:	fec42703          	lw	a4,-20(s0)
80004ffc:	00070793          	mv	a5,a4
80005000:	00479793          	slli	a5,a5,0x4
80005004:	40e787b3          	sub	a5,a5,a4
80005008:	00279793          	slli	a5,a5,0x2
8000500c:	01c68713          	addi	a4,a3,28 # 8002201c <__stack_top+0xfffdb8ac>
80005010:	00e787b3          	add	a5,a5,a4
80005014:	fff00713          	li	a4,-1
80005018:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:18 (discriminator 2)
    for( i = 0; i < PIPE_SIZE; i++ ){
8000501c:	fec42783          	lw	a5,-20(s0)
80005020:	00178793          	addi	a5,a5,1
80005024:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:18 (discriminator 1)
80005028:	fec42703          	lw	a4,-20(s0)
8000502c:	00300793          	li	a5,3
80005030:	f2e7d8e3          	ble	a4,a5,80004f60 <API_PipeInitialization+0x28>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:25
    }
    return;
80005034:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:26
}
80005038:	01c12403          	lw	s0,28(sp)
8000503c:	02010113          	addi	sp,sp,32
80005040:	00008067          	ret

80005044 <API_GetMessageSlot>:
API_GetMessageSlot():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:30

////////////////////////////////////////////////////////////
// Returns a free Message slot 
unsigned int API_GetMessageSlot(){
80005044:	fe010113          	addi	sp,sp,-32
80005048:	00112e23          	sw	ra,28(sp)
8000504c:	00812c23          	sw	s0,24(sp)
80005050:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:32
    int i;
    unsigned int sel = PIPE_FULL;
80005054:	fdfe07b7          	lui	a5,0xfdfe0
80005058:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9968d>
8000505c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:33
    unsigned int currTask = API_GetCurrentTaskSlot();
80005060:	e9cff0ef          	jal	ra,800046fc <API_GetCurrentTaskSlot>
80005064:	fea42223          	sw	a0,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:34
    vTaskEnterCritical();
80005068:	e39fd0ef          	jal	ra,80002ea0 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:35
    for( i = 0; i < PIPE_SIZE; i++ ){
8000506c:	fe042623          	sw	zero,-20(s0)
80005070:	0f80006f          	j	80005168 <API_GetMessageSlot+0x124>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:36
        if (TaskList[currTask].MessagePipe[i].status == PIPE_FREE){
80005074:	800236b7          	lui	a3,0x80023
80005078:	fec42703          	lw	a4,-20(s0)
8000507c:	fe442603          	lw	a2,-28(s0)
80005080:	00070793          	mv	a5,a4
80005084:	00379793          	slli	a5,a5,0x3
80005088:	00e787b3          	add	a5,a5,a4
8000508c:	00679793          	slli	a5,a5,0x6
80005090:	00001737          	lui	a4,0x1
80005094:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80005098:	02e60733          	mul	a4,a2,a4
8000509c:	00e78733          	add	a4,a5,a4
800050a0:	e4468793          	addi	a5,a3,-444 # 80022e44 <__stack_top+0xfffdc6d4>
800050a4:	00f707b3          	add	a5,a4,a5
800050a8:	0307a703          	lw	a4,48(a5)
800050ac:	fff00793          	li	a5,-1
800050b0:	0af71663          	bne	a4,a5,8000515c <API_GetMessageSlot+0x118>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:37
            TaskList[currTask].MessagePipe[i].status = PIPE_OCCUPIED;
800050b4:	800236b7          	lui	a3,0x80023
800050b8:	fec42703          	lw	a4,-20(s0)
800050bc:	fe442603          	lw	a2,-28(s0)
800050c0:	00070793          	mv	a5,a4
800050c4:	00379793          	slli	a5,a5,0x3
800050c8:	00e787b3          	add	a5,a5,a4
800050cc:	00679793          	slli	a5,a5,0x6
800050d0:	00001737          	lui	a4,0x1
800050d4:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
800050d8:	02e60733          	mul	a4,a2,a4
800050dc:	00e78733          	add	a4,a5,a4
800050e0:	e4468793          	addi	a5,a3,-444 # 80022e44 <__stack_top+0xfffdc6d4>
800050e4:	00f707b3          	add	a5,a4,a5
800050e8:	00100713          	li	a4,1
800050ec:	02e7a823          	sw	a4,48(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:38
            TaskList[currTask].MessagePipe[i].msgID = messageID;
800050f0:	800227b7          	lui	a5,0x80022
800050f4:	1107a683          	lw	a3,272(a5) # 80022110 <__stack_top+0xfffdb9a0>
800050f8:	800237b7          	lui	a5,0x80023
800050fc:	fec42703          	lw	a4,-20(s0)
80005100:	fe442583          	lw	a1,-28(s0)
80005104:	e4478613          	addi	a2,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80005108:	00070793          	mv	a5,a4
8000510c:	00379793          	slli	a5,a5,0x3
80005110:	00e787b3          	add	a5,a5,a4
80005114:	00679793          	slli	a5,a5,0x6
80005118:	00001737          	lui	a4,0x1
8000511c:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80005120:	02e58733          	mul	a4,a1,a4
80005124:	00e787b3          	add	a5,a5,a4
80005128:	00f607b3          	add	a5,a2,a5
8000512c:	02d7aa23          	sw	a3,52(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:39
            messageID++;
80005130:	800227b7          	lui	a5,0x80022
80005134:	1107a783          	lw	a5,272(a5) # 80022110 <__stack_top+0xfffdb9a0>
80005138:	00178713          	addi	a4,a5,1
8000513c:	800227b7          	lui	a5,0x80022
80005140:	10e7a823          	sw	a4,272(a5) # 80022110 <__stack_top+0xfffdb9a0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:40
            sel = (currTask << 8) | i;
80005144:	fe442783          	lw	a5,-28(s0)
80005148:	00879713          	slli	a4,a5,0x8
8000514c:	fec42783          	lw	a5,-20(s0)
80005150:	00f767b3          	or	a5,a4,a5
80005154:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:41
            break;
80005158:	01c0006f          	j	80005174 <API_GetMessageSlot+0x130>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:35 (discriminator 2)
    for( i = 0; i < PIPE_SIZE; i++ ){
8000515c:	fec42783          	lw	a5,-20(s0)
80005160:	00178793          	addi	a5,a5,1
80005164:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:35 (discriminator 1)
80005168:	fec42703          	lw	a4,-20(s0)
8000516c:	00300793          	li	a5,3
80005170:	f0e7d2e3          	ble	a4,a5,80005074 <API_GetMessageSlot+0x30>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:44
        }
    }
    if(messageID > 0X0FFFFFF0){
80005174:	800227b7          	lui	a5,0x80022
80005178:	1107a703          	lw	a4,272(a5) # 80022110 <__stack_top+0xfffdb9a0>
8000517c:	100007b7          	lui	a5,0x10000
80005180:	ff078793          	addi	a5,a5,-16 # ffffff0 <RAM_SIZE+0xff7fff0>
80005184:	0ae7f263          	bleu	a4,a5,80005228 <API_GetMessageSlot+0x1e4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:45
        messageID = 256;
80005188:	800227b7          	lui	a5,0x80022
8000518c:	10000713          	li	a4,256
80005190:	10e7a823          	sw	a4,272(a5) # 80022110 <__stack_top+0xfffdb9a0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:46
        for( i = 0; i < PIPE_SIZE; i++ ){
80005194:	fe042623          	sw	zero,-20(s0)
80005198:	0840006f          	j	8000521c <API_GetMessageSlot+0x1d8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:47 (discriminator 3)
            TaskList[currTask].MessagePipe[i].msgID = (TaskList[currTask].MessagePipe[i].msgID & 0x000000FF);
8000519c:	800237b7          	lui	a5,0x80023
800051a0:	fec42703          	lw	a4,-20(s0)
800051a4:	fe442603          	lw	a2,-28(s0)
800051a8:	e4478693          	addi	a3,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
800051ac:	00070793          	mv	a5,a4
800051b0:	00379793          	slli	a5,a5,0x3
800051b4:	00e787b3          	add	a5,a5,a4
800051b8:	00679793          	slli	a5,a5,0x6
800051bc:	00001737          	lui	a4,0x1
800051c0:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
800051c4:	02e60733          	mul	a4,a2,a4
800051c8:	00e787b3          	add	a5,a5,a4
800051cc:	00f687b3          	add	a5,a3,a5
800051d0:	0347a783          	lw	a5,52(a5)
800051d4:	0ff7f693          	andi	a3,a5,255
800051d8:	800237b7          	lui	a5,0x80023
800051dc:	fec42703          	lw	a4,-20(s0)
800051e0:	fe442583          	lw	a1,-28(s0)
800051e4:	e4478613          	addi	a2,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
800051e8:	00070793          	mv	a5,a4
800051ec:	00379793          	slli	a5,a5,0x3
800051f0:	00e787b3          	add	a5,a5,a4
800051f4:	00679793          	slli	a5,a5,0x6
800051f8:	00001737          	lui	a4,0x1
800051fc:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80005200:	02e58733          	mul	a4,a1,a4
80005204:	00e787b3          	add	a5,a5,a4
80005208:	00f607b3          	add	a5,a2,a5
8000520c:	02d7aa23          	sw	a3,52(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:46 (discriminator 3)
        for( i = 0; i < PIPE_SIZE; i++ ){
80005210:	fec42783          	lw	a5,-20(s0)
80005214:	00178793          	addi	a5,a5,1
80005218:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:46 (discriminator 1)
8000521c:	fec42703          	lw	a4,-20(s0)
80005220:	00300793          	li	a5,3
80005224:	f6e7dce3          	ble	a4,a5,8000519c <API_GetMessageSlot+0x158>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:50
        }
    }
    vTaskExitCritical();
80005228:	cb5fd0ef          	jal	ra,80002edc <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:51
    return sel;
8000522c:	fe842783          	lw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:52
}
80005230:	00078513          	mv	a0,a5
80005234:	01c12083          	lw	ra,28(sp)
80005238:	01812403          	lw	s0,24(sp)
8000523c:	02010113          	addi	sp,sp,32
80005240:	00008067          	ret

80005244 <API_GetServiceSlot>:
API_GetServiceSlot():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:56

////////////////////////////////////////////////////////////
// Returns a free Service slot
unsigned int API_GetServiceSlot(){
80005244:	fe010113          	addi	sp,sp,-32
80005248:	00112e23          	sw	ra,28(sp)
8000524c:	00812c23          	sw	s0,24(sp)
80005250:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:58
    int i;
    vTaskEnterCritical();
80005254:	c4dfd0ef          	jal	ra,80002ea0 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:59
    for( i = 0; i < PIPE_SIZE; i++ ){
80005258:	fe042623          	sw	zero,-20(s0)
8000525c:	0700006f          	j	800052cc <API_GetServiceSlot+0x88>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:60
        if (ServicePipe[i].status == PIPE_FREE){
80005260:	800226b7          	lui	a3,0x80022
80005264:	fec42703          	lw	a4,-20(s0)
80005268:	00070793          	mv	a5,a4
8000526c:	00479793          	slli	a5,a5,0x4
80005270:	40e787b3          	sub	a5,a5,a4
80005274:	00279793          	slli	a5,a5,0x2
80005278:	01c68713          	addi	a4,a3,28 # 8002201c <__stack_top+0xfffdb8ac>
8000527c:	00e787b3          	add	a5,a5,a4
80005280:	0007a703          	lw	a4,0(a5)
80005284:	fff00793          	li	a5,-1
80005288:	02f71c63          	bne	a4,a5,800052c0 <API_GetServiceSlot+0x7c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:61
            ServicePipe[i].status = PIPE_OCCUPIED;
8000528c:	800226b7          	lui	a3,0x80022
80005290:	fec42703          	lw	a4,-20(s0)
80005294:	00070793          	mv	a5,a4
80005298:	00479793          	slli	a5,a5,0x4
8000529c:	40e787b3          	sub	a5,a5,a4
800052a0:	00279793          	slli	a5,a5,0x2
800052a4:	01c68713          	addi	a4,a3,28 # 8002201c <__stack_top+0xfffdb8ac>
800052a8:	00e787b3          	add	a5,a5,a4
800052ac:	00100713          	li	a4,1
800052b0:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:62
            vTaskExitCritical();
800052b4:	c29fd0ef          	jal	ra,80002edc <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:63
            return i;
800052b8:	fec42783          	lw	a5,-20(s0)
800052bc:	0280006f          	j	800052e4 <API_GetServiceSlot+0xa0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:59 (discriminator 2)
    for( i = 0; i < PIPE_SIZE; i++ ){
800052c0:	fec42783          	lw	a5,-20(s0)
800052c4:	00178793          	addi	a5,a5,1
800052c8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:59 (discriminator 1)
800052cc:	fec42703          	lw	a4,-20(s0)
800052d0:	00300793          	li	a5,3
800052d4:	f8e7d6e3          	ble	a4,a5,80005260 <API_GetServiceSlot+0x1c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:66
        }
    }
    vTaskExitCritical();
800052d8:	c05fd0ef          	jal	ra,80002edc <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:67
    return PIPE_FULL;
800052dc:	fdfe07b7          	lui	a5,0xfdfe0
800052e0:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9968d>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:68
}
800052e4:	00078513          	mv	a0,a5
800052e8:	01c12083          	lw	ra,28(sp)
800052ec:	01812403          	lw	s0,24(sp)
800052f0:	02010113          	addi	sp,sp,32
800052f4:	00008067          	ret

800052f8 <API_ClearPipeSlot>:
API_ClearPipeSlot():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:72

////////////////////////////////////////////////////////////
// Clear one PipeSlot after send it
void API_ClearPipeSlot(unsigned int typeSlot){
800052f8:	fd010113          	addi	sp,sp,-48
800052fc:	02812623          	sw	s0,44(sp)
80005300:	03010413          	addi	s0,sp,48
80005304:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:73
    unsigned int type =   typeSlot & 0xFFFF0000;
80005308:	fdc42703          	lw	a4,-36(s0)
8000530c:	ffff07b7          	lui	a5,0xffff0
80005310:	00f777b3          	and	a5,a4,a5
80005314:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:74
    unsigned int taskID = (typeSlot & 0x0000FF00) >> 8;
80005318:	fdc42783          	lw	a5,-36(s0)
8000531c:	0087d793          	srli	a5,a5,0x8
80005320:	0ff7f793          	andi	a5,a5,255
80005324:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:75
    unsigned int slot =   typeSlot & 0x000000FF;
80005328:	fdc42783          	lw	a5,-36(s0)
8000532c:	0ff7f793          	andi	a5,a5,255
80005330:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:77
    
    if (type == SERVICE){
80005334:	fec42703          	lw	a4,-20(s0)
80005338:	101007b7          	lui	a5,0x10100
8000533c:	04f71c63          	bne	a4,a5,80005394 <API_ClearPipeSlot+0x9c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:78
        ServicePipe[slot].status = PIPE_FREE;
80005340:	800226b7          	lui	a3,0x80022
80005344:	fe442703          	lw	a4,-28(s0)
80005348:	00070793          	mv	a5,a4
8000534c:	00479793          	slli	a5,a5,0x4
80005350:	40e787b3          	sub	a5,a5,a4
80005354:	00279793          	slli	a5,a5,0x2
80005358:	01c68713          	addi	a4,a3,28 # 8002201c <__stack_top+0xfffdb8ac>
8000535c:	00e787b3          	add	a5,a5,a4
80005360:	fff00713          	li	a4,-1
80005364:	00e7a023          	sw	a4,0(a5) # 10100000 <RAM_SIZE+0x10080000>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:79
        ServicePipe[slot].holder = PIPE_FREE;
80005368:	800227b7          	lui	a5,0x80022
8000536c:	fe442703          	lw	a4,-28(s0)
80005370:	01c78693          	addi	a3,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
80005374:	00070793          	mv	a5,a4
80005378:	00479793          	slli	a5,a5,0x4
8000537c:	40e787b3          	sub	a5,a5,a4
80005380:	00279793          	slli	a5,a5,0x2
80005384:	00f687b3          	add	a5,a3,a5
80005388:	fff00713          	li	a4,-1
8000538c:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:89
    } else { // type == MESSAGE
        //printsv("cleaning message pipe slot: ", slot);
        TaskList[taskID].MessagePipe[slot].status = PIPE_FREE;
        //TaskList[taskID].MessagePipe[slot].holder = PIPE_FREE;
    }
    return;
80005390:	0740006f          	j	80005404 <API_ClearPipeSlot+0x10c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:80
    } else if (type == THERMAL){
80005394:	fec42703          	lw	a4,-20(s0)
80005398:	404007b7          	lui	a5,0x40400
8000539c:	00f71663          	bne	a4,a5,800053a8 <API_ClearPipeSlot+0xb0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:81
        thermalPacket_pending = FALSE;
800053a0:	9601a223          	sw	zero,-1692(gp) # 80008f14 <thermalPacket_pending>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:89
    return;
800053a4:	0600006f          	j	80005404 <API_ClearPipeSlot+0x10c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:82
    } else if (type == SYS_MESSAGE){
800053a8:	fec42703          	lw	a4,-20(s0)
800053ac:	505007b7          	lui	a5,0x50500
800053b0:	00f71a63          	bne	a4,a5,800053c4 <API_ClearPipeSlot+0xcc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:83
        ServiceMessage.status = PIPE_FREE;
800053b4:	800227b7          	lui	a5,0x80022
800053b8:	fff00713          	li	a4,-1
800053bc:	10e7aa23          	sw	a4,276(a5) # 80022114 <__stack_top+0xfffdb9a4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:89
    return;
800053c0:	0440006f          	j	80005404 <API_ClearPipeSlot+0x10c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:86
        TaskList[taskID].MessagePipe[slot].status = PIPE_FREE;
800053c4:	800236b7          	lui	a3,0x80023
800053c8:	fe442703          	lw	a4,-28(s0)
800053cc:	fe842603          	lw	a2,-24(s0)
800053d0:	00070793          	mv	a5,a4
800053d4:	00379793          	slli	a5,a5,0x3
800053d8:	00e787b3          	add	a5,a5,a4
800053dc:	00679793          	slli	a5,a5,0x6
800053e0:	00001737          	lui	a4,0x1
800053e4:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
800053e8:	02e60733          	mul	a4,a2,a4
800053ec:	00e78733          	add	a4,a5,a4
800053f0:	e4468793          	addi	a5,a3,-444 # 80022e44 <__stack_top+0xfffdc6d4>
800053f4:	00f707b3          	add	a5,a4,a5
800053f8:	fff00713          	li	a4,-1
800053fc:	02e7a823          	sw	a4,48(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:89
    return;
80005400:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:90
}
80005404:	02c12403          	lw	s0,44(sp)
80005408:	03010113          	addi	sp,sp,48
8000540c:	00008067          	ret

80005410 <API_checkPipe>:
API_checkPipe():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:92

unsigned int API_checkPipe(unsigned int taskSlot){
80005410:	fd010113          	addi	sp,sp,-48
80005414:	02112623          	sw	ra,44(sp)
80005418:	02812423          	sw	s0,40(sp)
8000541c:	03010413          	addi	s0,sp,48
80005420:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:94
    unsigned int i;
    printsv("Checking the PIPE of taskSlot: ", taskSlot);
80005424:	fdc42783          	lw	a5,-36(s0)
80005428:	00078593          	mv	a1,a5
8000542c:	800087b7          	lui	a5,0x80008
80005430:	70c78513          	addi	a0,a5,1804 # 8000870c <__stack_top+0xfffc1f9c>
80005434:	4a5000ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:95
    for(i = 0; i < PIPE_SIZE; i++){
80005438:	fe042623          	sw	zero,-20(s0)
8000543c:	0c00006f          	j	800054fc <API_checkPipe+0xec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:96
        printsv("i: ", i);
80005440:	fec42783          	lw	a5,-20(s0)
80005444:	00078593          	mv	a1,a5
80005448:	800087b7          	lui	a5,0x80008
8000544c:	72c78513          	addi	a0,a5,1836 # 8000872c <__stack_top+0xfffc1fbc>
80005450:	489000ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:97
        printsv("status: ", TaskList[taskSlot].MessagePipe[i].status);
80005454:	800236b7          	lui	a3,0x80023
80005458:	fec42703          	lw	a4,-20(s0)
8000545c:	fdc42603          	lw	a2,-36(s0)
80005460:	00070793          	mv	a5,a4
80005464:	00379793          	slli	a5,a5,0x3
80005468:	00e787b3          	add	a5,a5,a4
8000546c:	00679793          	slli	a5,a5,0x6
80005470:	00001737          	lui	a4,0x1
80005474:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80005478:	02e60733          	mul	a4,a2,a4
8000547c:	00e78733          	add	a4,a5,a4
80005480:	e4468793          	addi	a5,a3,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80005484:	00f707b3          	add	a5,a4,a5
80005488:	0307a783          	lw	a5,48(a5)
8000548c:	00078593          	mv	a1,a5
80005490:	800087b7          	lui	a5,0x80008
80005494:	73078513          	addi	a0,a5,1840 # 80008730 <__stack_top+0xfffc1fc0>
80005498:	441000ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:99
        //printsv("holder: ", TaskList[taskSlot].MessagePipe[i].holder);
        prints("---\n");
8000549c:	800087b7          	lui	a5,0x80008
800054a0:	73c78513          	addi	a0,a5,1852 # 8000873c <__stack_top+0xfffc1fcc>
800054a4:	389000ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:100
        if(TaskList[taskSlot].MessagePipe[i].status == PIPE_OCCUPIED){
800054a8:	800236b7          	lui	a3,0x80023
800054ac:	fec42703          	lw	a4,-20(s0)
800054b0:	fdc42603          	lw	a2,-36(s0)
800054b4:	00070793          	mv	a5,a4
800054b8:	00379793          	slli	a5,a5,0x3
800054bc:	00e787b3          	add	a5,a5,a4
800054c0:	00679793          	slli	a5,a5,0x6
800054c4:	00001737          	lui	a4,0x1
800054c8:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
800054cc:	02e60733          	mul	a4,a2,a4
800054d0:	00e78733          	add	a4,a5,a4
800054d4:	e4468793          	addi	a5,a3,-444 # 80022e44 <__stack_top+0xfffdc6d4>
800054d8:	00f707b3          	add	a5,a4,a5
800054dc:	0307a703          	lw	a4,48(a5)
800054e0:	00100793          	li	a5,1
800054e4:	00f71663          	bne	a4,a5,800054f0 <API_checkPipe+0xe0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:102
            //if(MessagePipe[i].holder == taskSlot){
                return 1;
800054e8:	00100793          	li	a5,1
800054ec:	0200006f          	j	8000550c <API_checkPipe+0xfc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:95 (discriminator 2)
    for(i = 0; i < PIPE_SIZE; i++){
800054f0:	fec42783          	lw	a5,-20(s0)
800054f4:	00178793          	addi	a5,a5,1
800054f8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:95 (discriminator 1)
800054fc:	fec42703          	lw	a4,-20(s0)
80005500:	00300793          	li	a5,3
80005504:	f2e7fee3          	bleu	a4,a5,80005440 <API_checkPipe+0x30>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:106
            //}
        }
    }
    return 0;
80005508:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:107
}
8000550c:	00078513          	mv	a0,a5
80005510:	02c12083          	lw	ra,44(sp)
80005514:	02812403          	lw	s0,40(sp)
80005518:	03010113          	addi	sp,sp,48
8000551c:	00008067          	ret

80005520 <API_setFreqIdle>:
API_setFreqIdle():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:3
#include "dvfs.h"

void API_setFreqIdle(){
80005520:	ff010113          	addi	sp,sp,-16
80005524:	00812623          	sw	s0,12(sp)
80005528:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:4
    selectedFrequencyScale = FREQ_IDLE;
8000552c:	800267b7          	lui	a5,0x80026
80005530:	06400713          	li	a4,100
80005534:	74e7ae23          	sw	a4,1884(a5) # 8002675c <__stack_top+0xfffdffec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:5
    return;
80005538:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:6
}
8000553c:	00c12403          	lw	s0,12(sp)
80005540:	01010113          	addi	sp,sp,16
80005544:	00008067          	ret

80005548 <API_setFreqScale>:
API_setFreqScale():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:8

void API_setFreqScale(unsigned int scale){
80005548:	fe010113          	addi	sp,sp,-32
8000554c:	00812e23          	sw	s0,28(sp)
80005550:	02010413          	addi	s0,sp,32
80005554:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:9
    selectedFrequencyScale = scale;
80005558:	800267b7          	lui	a5,0x80026
8000555c:	fec42703          	lw	a4,-20(s0)
80005560:	74e7ae23          	sw	a4,1884(a5) # 8002675c <__stack_top+0xfffdffec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:10
    return;
80005564:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:11
}
80005568:	01c12403          	lw	s0,28(sp)
8000556c:	02010113          	addi	sp,sp,32
80005570:	00008067          	ret

80005574 <API_getFreqScale>:
API_getFreqScale():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:13

unsigned int API_getFreqScale(){
80005574:	ff010113          	addi	sp,sp,-16
80005578:	00112623          	sw	ra,12(sp)
8000557c:	00812423          	sw	s0,8(sp)
80005580:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:14
    return HW_get_32bit_reg(FREQUENCY_SCALE);
80005584:	900007b7          	lui	a5,0x90000
80005588:	ff878513          	addi	a0,a5,-8 # 8ffffff8 <__stack_top+0xffb9888>
8000558c:	a11fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005590:	00050793          	mv	a5,a0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:15
}
80005594:	00078513          	mv	a0,a5
80005598:	00c12083          	lw	ra,12(sp)
8000559c:	00812403          	lw	s0,8(sp)
800055a0:	01010113          	addi	sp,sp,16
800055a4:	00008067          	ret

800055a8 <API_applyFreqScale>:
API_applyFreqScale():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:17

void API_applyFreqScale(){
800055a8:	ff010113          	addi	sp,sp,-16
800055ac:	00112623          	sw	ra,12(sp)
800055b0:	00812423          	sw	s0,8(sp)
800055b4:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:18
    if(selectedFrequencyScale != API_getFreqScale()){
800055b8:	fbdff0ef          	jal	ra,80005574 <API_getFreqScale>
800055bc:	00050713          	mv	a4,a0
800055c0:	800267b7          	lui	a5,0x80026
800055c4:	75c7a783          	lw	a5,1884(a5) # 8002675c <__stack_top+0xfffdffec>
800055c8:	02f70063          	beq	a4,a5,800055e8 <API_applyFreqScale+0x40>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:19
        HW_set_32bit_reg(FREQUENCY_SCALE, selectedFrequencyScale);
800055cc:	800267b7          	lui	a5,0x80026
800055d0:	75c7a783          	lw	a5,1884(a5) # 8002675c <__stack_top+0xfffdffec>
800055d4:	00078593          	mv	a1,a5
800055d8:	900007b7          	lui	a5,0x90000
800055dc:	ff878513          	addi	a0,a5,-8 # 8ffffff8 <__stack_top+0xffb9888>
800055e0:	9b5fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:21
    }
    return;
800055e4:	00000013          	nop
800055e8:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:22
}
800055ec:	00c12083          	lw	ra,12(sp)
800055f0:	00812403          	lw	s0,8(sp)
800055f4:	01010113          	addi	sp,sp,16
800055f8:	00008067          	ret

800055fc <API_freqStepUp>:
API_freqStepUp():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:24

void API_freqStepUp(){
800055fc:	ff010113          	addi	sp,sp,-16
80005600:	00812623          	sw	s0,12(sp)
80005604:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:25
    if(selectedFrequencyScale == FREQ_IDLE){
80005608:	800267b7          	lui	a5,0x80026
8000560c:	75c7a703          	lw	a4,1884(a5) # 8002675c <__stack_top+0xfffdffec>
80005610:	06400793          	li	a5,100
80005614:	00f71a63          	bne	a4,a5,80005628 <API_freqStepUp+0x2c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:26
        selectedFrequencyScale = FREQ_150MHz;
80005618:	800267b7          	lui	a5,0x80026
8000561c:	09600713          	li	a4,150
80005620:	74e7ae23          	sw	a4,1884(a5) # 8002675c <__stack_top+0xfffdffec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
        }
        else{
            selectedFrequencyScale = FREQ_IDLE;
        }
    }
    return;
80005624:	1340006f          	j	80005758 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:28
    else if(selectedFrequencyScale==FREQ_150MHz){
80005628:	800267b7          	lui	a5,0x80026
8000562c:	75c7a703          	lw	a4,1884(a5) # 8002675c <__stack_top+0xfffdffec>
80005630:	09600793          	li	a5,150
80005634:	00f71a63          	bne	a4,a5,80005648 <API_freqStepUp+0x4c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:29
        selectedFrequencyScale = FREQ_250MHz;
80005638:	800267b7          	lui	a5,0x80026
8000563c:	0fa00713          	li	a4,250
80005640:	74e7ae23          	sw	a4,1884(a5) # 8002675c <__stack_top+0xfffdffec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005644:	1140006f          	j	80005758 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:31
    else if(selectedFrequencyScale==FREQ_250MHz){
80005648:	800267b7          	lui	a5,0x80026
8000564c:	75c7a703          	lw	a4,1884(a5) # 8002675c <__stack_top+0xfffdffec>
80005650:	0fa00793          	li	a5,250
80005654:	00f71a63          	bne	a4,a5,80005668 <API_freqStepUp+0x6c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:32
        selectedFrequencyScale = FREQ_500MHz;
80005658:	800267b7          	lui	a5,0x80026
8000565c:	1f400713          	li	a4,500
80005660:	74e7ae23          	sw	a4,1884(a5) # 8002675c <__stack_top+0xfffdffec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005664:	0f40006f          	j	80005758 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:34
    else if(selectedFrequencyScale==FREQ_500MHz){
80005668:	800267b7          	lui	a5,0x80026
8000566c:	75c7a703          	lw	a4,1884(a5) # 8002675c <__stack_top+0xfffdffec>
80005670:	1f400793          	li	a5,500
80005674:	00f71a63          	bne	a4,a5,80005688 <API_freqStepUp+0x8c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:35
        selectedFrequencyScale = FREQ_1GHz;
80005678:	800267b7          	lui	a5,0x80026
8000567c:	3e800713          	li	a4,1000
80005680:	74e7ae23          	sw	a4,1884(a5) # 8002675c <__stack_top+0xfffdffec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005684:	0d40006f          	j	80005758 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:37
    else if(selectedFrequencyScale==FREQ_1GHz){
80005688:	800267b7          	lui	a5,0x80026
8000568c:	75c7a703          	lw	a4,1884(a5) # 8002675c <__stack_top+0xfffdffec>
80005690:	3e800793          	li	a5,1000
80005694:	00f71a63          	bne	a4,a5,800056a8 <API_freqStepUp+0xac>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:38
        selectedFrequencyScale = FREQ_1GHz;
80005698:	800267b7          	lui	a5,0x80026
8000569c:	3e800713          	li	a4,1000
800056a0:	74e7ae23          	sw	a4,1884(a5) # 8002675c <__stack_top+0xfffdffec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
800056a4:	0b40006f          	j	80005758 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:41
        if(selectedFrequencyScale > FREQ_1GHz){
800056a8:	800267b7          	lui	a5,0x80026
800056ac:	75c7a703          	lw	a4,1884(a5) # 8002675c <__stack_top+0xfffdffec>
800056b0:	3e800793          	li	a5,1000
800056b4:	00e7fa63          	bleu	a4,a5,800056c8 <API_freqStepUp+0xcc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:42
            selectedFrequencyScale = FREQ_1GHz;
800056b8:	800267b7          	lui	a5,0x80026
800056bc:	3e800713          	li	a4,1000
800056c0:	74e7ae23          	sw	a4,1884(a5) # 8002675c <__stack_top+0xfffdffec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
800056c4:	0940006f          	j	80005758 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:44
        else if(selectedFrequencyScale > FREQ_500MHz){
800056c8:	800267b7          	lui	a5,0x80026
800056cc:	75c7a703          	lw	a4,1884(a5) # 8002675c <__stack_top+0xfffdffec>
800056d0:	1f400793          	li	a5,500
800056d4:	00e7fa63          	bleu	a4,a5,800056e8 <API_freqStepUp+0xec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:45
            selectedFrequencyScale = FREQ_1GHz;
800056d8:	800267b7          	lui	a5,0x80026
800056dc:	3e800713          	li	a4,1000
800056e0:	74e7ae23          	sw	a4,1884(a5) # 8002675c <__stack_top+0xfffdffec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
800056e4:	0740006f          	j	80005758 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:47
        else if(selectedFrequencyScale > FREQ_250MHz){
800056e8:	800267b7          	lui	a5,0x80026
800056ec:	75c7a703          	lw	a4,1884(a5) # 8002675c <__stack_top+0xfffdffec>
800056f0:	0fa00793          	li	a5,250
800056f4:	00e7fa63          	bleu	a4,a5,80005708 <API_freqStepUp+0x10c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:48
            selectedFrequencyScale = FREQ_500MHz;
800056f8:	800267b7          	lui	a5,0x80026
800056fc:	1f400713          	li	a4,500
80005700:	74e7ae23          	sw	a4,1884(a5) # 8002675c <__stack_top+0xfffdffec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005704:	0540006f          	j	80005758 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:50
        else if(selectedFrequencyScale > FREQ_150MHz){
80005708:	800267b7          	lui	a5,0x80026
8000570c:	75c7a703          	lw	a4,1884(a5) # 8002675c <__stack_top+0xfffdffec>
80005710:	09600793          	li	a5,150
80005714:	00e7fa63          	bleu	a4,a5,80005728 <API_freqStepUp+0x12c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:51
            selectedFrequencyScale = FREQ_250MHz;
80005718:	800267b7          	lui	a5,0x80026
8000571c:	0fa00713          	li	a4,250
80005720:	74e7ae23          	sw	a4,1884(a5) # 8002675c <__stack_top+0xfffdffec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005724:	0340006f          	j	80005758 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:53
        else if(selectedFrequencyScale > FREQ_IDLE){
80005728:	800267b7          	lui	a5,0x80026
8000572c:	75c7a703          	lw	a4,1884(a5) # 8002675c <__stack_top+0xfffdffec>
80005730:	06400793          	li	a5,100
80005734:	00e7fa63          	bleu	a4,a5,80005748 <API_freqStepUp+0x14c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:54
            selectedFrequencyScale = FREQ_150MHz;
80005738:	800267b7          	lui	a5,0x80026
8000573c:	09600713          	li	a4,150
80005740:	74e7ae23          	sw	a4,1884(a5) # 8002675c <__stack_top+0xfffdffec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005744:	0140006f          	j	80005758 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:57
            selectedFrequencyScale = FREQ_IDLE;
80005748:	800267b7          	lui	a5,0x80026
8000574c:	06400713          	li	a4,100
80005750:	74e7ae23          	sw	a4,1884(a5) # 8002675c <__stack_top+0xfffdffec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005754:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:61
}
80005758:	00c12403          	lw	s0,12(sp)
8000575c:	01010113          	addi	sp,sp,16
80005760:	00008067          	ret

80005764 <resetExecutedInstructions>:
resetExecutedInstructions():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:12
    printsv("Stores:\t\t",      HW_get_32bit_reg(STORES_COUNT));
    printsv("Others:\t\t",      HW_get_32bit_reg(OTHERS_COUNT));
    prints("--------------------------\n");
}

void resetExecutedInstructions(){
80005764:	ff010113          	addi	sp,sp,-16
80005768:	00112623          	sw	ra,12(sp)
8000576c:	00812423          	sw	s0,8(sp)
80005770:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:13
    HW_set_32bit_reg(LOADS_COUNT, 0);
80005774:	00000593          	li	a1,0
80005778:	900007b7          	lui	a5,0x90000
8000577c:	ff478513          	addi	a0,a5,-12 # 8ffffff4 <__stack_top+0xffb9884>
80005780:	815fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:14
    HW_set_32bit_reg(STORES_COUNT, 0);
80005784:	00000593          	li	a1,0
80005788:	900007b7          	lui	a5,0x90000
8000578c:	ff078513          	addi	a0,a5,-16 # 8ffffff0 <__stack_top+0xffb9880>
80005790:	805fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:15
    HW_set_32bit_reg(OTHERS_COUNT, 0);
80005794:	00000593          	li	a1,0
80005798:	900007b7          	lui	a5,0x90000
8000579c:	fec78513          	addi	a0,a5,-20 # 8fffffec <__stack_top+0xffb987c>
800057a0:	ff4fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:16
    return;
800057a4:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:17
}
800057a8:	00c12083          	lw	ra,12(sp)
800057ac:	00812403          	lw	s0,8(sp)
800057b0:	01010113          	addi	sp,sp,16
800057b4:	00008067          	ret

800057b8 <getNumberOfPorts>:
getNumberOfPorts():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:21

///////////////////////////////////////////////////////////////////
/* Get the number of ports in the router based in his address*/
unsigned int getNumberOfPorts(unsigned int address) {
800057b8:	fd010113          	addi	sp,sp,-48
800057bc:	02112623          	sw	ra,44(sp)
800057c0:	02812423          	sw	s0,40(sp)
800057c4:	03010413          	addi	s0,sp,48
800057c8:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:23
    unsigned int x, y;
    x = getXpos(address);
800057cc:	fdc42503          	lw	a0,-36(s0)
800057d0:	1b1000ef          	jal	ra,80006180 <getXpos>
800057d4:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:24
    y = getYpos(address);
800057d8:	fdc42503          	lw	a0,-36(s0)
800057dc:	1d1000ef          	jal	ra,800061ac <getYpos>
800057e0:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:26

    if ((x == 0 || x == (DIM_X - 1)) && (y == 0 || y == (DIM_Y - 1))) {
800057e4:	fec42783          	lw	a5,-20(s0)
800057e8:	00078863          	beqz	a5,800057f8 <getNumberOfPorts+0x40>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:26 (discriminator 2)
800057ec:	fec42703          	lw	a4,-20(s0)
800057f0:	00200793          	li	a5,2
800057f4:	02f71063          	bne	a4,a5,80005814 <getNumberOfPorts+0x5c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:26 (discriminator 3)
800057f8:	fe842783          	lw	a5,-24(s0)
800057fc:	00078863          	beqz	a5,8000580c <getNumberOfPorts+0x54>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:26 (discriminator 4)
80005800:	fe842703          	lw	a4,-24(s0)
80005804:	00200793          	li	a5,2
80005808:	00f71663          	bne	a4,a5,80005814 <getNumberOfPorts+0x5c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:27
        return 3;
8000580c:	00300793          	li	a5,3
80005810:	0380006f          	j	80005848 <getNumberOfPorts+0x90>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:29
    } else {
        if (x == 0 || x == (DIM_X - 1) || y == 0 || y == (DIM_Y - 1)) {
80005814:	fec42783          	lw	a5,-20(s0)
80005818:	02078263          	beqz	a5,8000583c <getNumberOfPorts+0x84>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:29 (discriminator 1)
8000581c:	fec42703          	lw	a4,-20(s0)
80005820:	00200793          	li	a5,2
80005824:	00f70c63          	beq	a4,a5,8000583c <getNumberOfPorts+0x84>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:29 (discriminator 2)
80005828:	fe842783          	lw	a5,-24(s0)
8000582c:	00078863          	beqz	a5,8000583c <getNumberOfPorts+0x84>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:29 (discriminator 3)
80005830:	fe842703          	lw	a4,-24(s0)
80005834:	00200793          	li	a5,2
80005838:	00f71663          	bne	a4,a5,80005844 <getNumberOfPorts+0x8c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:30
            return 4;
8000583c:	00400793          	li	a5,4
80005840:	0080006f          	j	80005848 <getNumberOfPorts+0x90>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:32
        } else {
            return 5;
80005844:	00500793          	li	a5,5
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:35
        }
    }
}
80005848:	00078513          	mv	a0,a5
8000584c:	02c12083          	lw	ra,44(sp)
80005850:	02812403          	lw	s0,40(sp)
80005854:	03010113          	addi	sp,sp,48
80005858:	00008067          	ret

8000585c <estimateNoCActivity>:
estimateNoCActivity():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:39

///////////////////////////////////////////////////////////////////
/* Activity estimation based in the amount of flits and packets crossing the router */
unsigned int estimateNoCActivity() {
8000585c:	fe010113          	addi	sp,sp,-32
80005860:	00112e23          	sw	ra,28(sp)
80005864:	00812c23          	sw	s0,24(sp)
80005868:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:42
    unsigned int totalPackets, totalFlits;
    // calculate the difference between the last interruption and the current one
    totalPackets =  HW_get_32bit_reg(EAST_PACKETS) - eastPackets_last;
8000586c:	900007b7          	lui	a5,0x90000
80005870:	fc478513          	addi	a0,a5,-60 # 8fffffc4 <__stack_top+0xffb9854>
80005874:	f28fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005878:	00050713          	mv	a4,a0
8000587c:	96c1a783          	lw	a5,-1684(gp) # 80008f1c <eastPackets_last>
80005880:	40f707b3          	sub	a5,a4,a5
80005884:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:43
    totalPackets += HW_get_32bit_reg(WEST_PACKETS) - westPackets_last;
80005888:	900007b7          	lui	a5,0x90000
8000588c:	fbc78513          	addi	a0,a5,-68 # 8fffffbc <__stack_top+0xffb984c>
80005890:	f0cfb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005894:	00050713          	mv	a4,a0
80005898:	9741a783          	lw	a5,-1676(gp) # 80008f24 <westPackets_last>
8000589c:	40f707b3          	sub	a5,a4,a5
800058a0:	fec42703          	lw	a4,-20(s0)
800058a4:	00f707b3          	add	a5,a4,a5
800058a8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:44
    totalPackets += HW_get_32bit_reg(SOUTH_PACKETS) - southPackets_last;
800058ac:	900007b7          	lui	a5,0x90000
800058b0:	fac78513          	addi	a0,a5,-84 # 8fffffac <__stack_top+0xffb983c>
800058b4:	ee8fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800058b8:	00050713          	mv	a4,a0
800058bc:	9841a783          	lw	a5,-1660(gp) # 80008f34 <southPackets_last>
800058c0:	40f707b3          	sub	a5,a4,a5
800058c4:	fec42703          	lw	a4,-20(s0)
800058c8:	00f707b3          	add	a5,a4,a5
800058cc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:45
    totalPackets += HW_get_32bit_reg(LOCAL_PACKETS) - localPackets_last;
800058d0:	900007b7          	lui	a5,0x90000
800058d4:	fa478513          	addi	a0,a5,-92 # 8fffffa4 <__stack_top+0xffb9834>
800058d8:	ec4fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800058dc:	00050713          	mv	a4,a0
800058e0:	98c1a783          	lw	a5,-1652(gp) # 80008f3c <localPackets_last>
800058e4:	40f707b3          	sub	a5,a4,a5
800058e8:	fec42703          	lw	a4,-20(s0)
800058ec:	00f707b3          	add	a5,a4,a5
800058f0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:46
    totalPackets += HW_get_32bit_reg(NORTH_PACKETS) - northPackets_last;
800058f4:	900007b7          	lui	a5,0x90000
800058f8:	fb478513          	addi	a0,a5,-76 # 8fffffb4 <__stack_top+0xffb9844>
800058fc:	ea0fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005900:	00050713          	mv	a4,a0
80005904:	97c1a783          	lw	a5,-1668(gp) # 80008f2c <northPackets_last>
80005908:	40f707b3          	sub	a5,a4,a5
8000590c:	fec42703          	lw	a4,-20(s0)
80005910:	00f707b3          	add	a5,a4,a5
80005914:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:49
    //totalPackets = eastPackets_dif + westPackets_dif + southPackets_dif + localPackets_dif + northPackets_dif;

    eastPackets_last  = HW_get_32bit_reg(EAST_PACKETS);
80005918:	900007b7          	lui	a5,0x90000
8000591c:	fc478513          	addi	a0,a5,-60 # 8fffffc4 <__stack_top+0xffb9854>
80005920:	e7cfb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005924:	00050713          	mv	a4,a0
80005928:	96e1a623          	sw	a4,-1684(gp) # 80008f1c <eastPackets_last>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:50
    westPackets_last  = HW_get_32bit_reg(WEST_PACKETS);
8000592c:	900007b7          	lui	a5,0x90000
80005930:	fbc78513          	addi	a0,a5,-68 # 8fffffbc <__stack_top+0xffb984c>
80005934:	e68fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005938:	00050713          	mv	a4,a0
8000593c:	96e1aa23          	sw	a4,-1676(gp) # 80008f24 <westPackets_last>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:51
    southPackets_last = HW_get_32bit_reg(SOUTH_PACKETS);
80005940:	900007b7          	lui	a5,0x90000
80005944:	fac78513          	addi	a0,a5,-84 # 8fffffac <__stack_top+0xffb983c>
80005948:	e54fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
8000594c:	00050713          	mv	a4,a0
80005950:	98e1a223          	sw	a4,-1660(gp) # 80008f34 <southPackets_last>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:52
    localPackets_last = HW_get_32bit_reg(LOCAL_PACKETS);
80005954:	900007b7          	lui	a5,0x90000
80005958:	fa478513          	addi	a0,a5,-92 # 8fffffa4 <__stack_top+0xffb9834>
8000595c:	e40fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005960:	00050713          	mv	a4,a0
80005964:	98e1a623          	sw	a4,-1652(gp) # 80008f3c <localPackets_last>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:53
    northPackets_last = HW_get_32bit_reg(NORTH_PACKETS);
80005968:	900007b7          	lui	a5,0x90000
8000596c:	fb478513          	addi	a0,a5,-76 # 8fffffb4 <__stack_top+0xffb9844>
80005970:	e2cfb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005974:	00050713          	mv	a4,a0
80005978:	96e1ae23          	sw	a4,-1668(gp) # 80008f2c <northPackets_last>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:56

    // alculate the difference between the last interruption and the current one
    totalFlits =  HW_get_32bit_reg(EAST_FLITS) - eastFlits_last;
8000597c:	900007b7          	lui	a5,0x90000
80005980:	fc878513          	addi	a0,a5,-56 # 8fffffc8 <__stack_top+0xffb9858>
80005984:	e18fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005988:	00050713          	mv	a4,a0
8000598c:	9681a783          	lw	a5,-1688(gp) # 80008f18 <eastFlits_last>
80005990:	40f707b3          	sub	a5,a4,a5
80005994:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:57
    totalFlits += HW_get_32bit_reg(WEST_FLITS) - westFlits_last;
80005998:	900007b7          	lui	a5,0x90000
8000599c:	fc078513          	addi	a0,a5,-64 # 8fffffc0 <__stack_top+0xffb9850>
800059a0:	dfcfb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800059a4:	00050713          	mv	a4,a0
800059a8:	9701a783          	lw	a5,-1680(gp) # 80008f20 <westFlits_last>
800059ac:	40f707b3          	sub	a5,a4,a5
800059b0:	fe842703          	lw	a4,-24(s0)
800059b4:	00f707b3          	add	a5,a4,a5
800059b8:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:58
    totalFlits += HW_get_32bit_reg(SOUTH_FLITS) - southFlits_last;
800059bc:	900007b7          	lui	a5,0x90000
800059c0:	fb078513          	addi	a0,a5,-80 # 8fffffb0 <__stack_top+0xffb9840>
800059c4:	dd8fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800059c8:	00050713          	mv	a4,a0
800059cc:	9801a783          	lw	a5,-1664(gp) # 80008f30 <southFlits_last>
800059d0:	40f707b3          	sub	a5,a4,a5
800059d4:	fe842703          	lw	a4,-24(s0)
800059d8:	00f707b3          	add	a5,a4,a5
800059dc:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:59
    memFlits = HW_get_32bit_reg(LOCAL_FLITS) - localFlits_last;
800059e0:	900007b7          	lui	a5,0x90000
800059e4:	fa878513          	addi	a0,a5,-88 # 8fffffa8 <__stack_top+0xffb9838>
800059e8:	db4fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800059ec:	00050713          	mv	a4,a0
800059f0:	9881a783          	lw	a5,-1656(gp) # 80008f38 <localFlits_last>
800059f4:	40f70733          	sub	a4,a4,a5
800059f8:	800267b7          	lui	a5,0x80026
800059fc:	76e7a023          	sw	a4,1888(a5) # 80026760 <__stack_top+0xfffdfff0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:60
    totalFlits += memFlits;
80005a00:	800267b7          	lui	a5,0x80026
80005a04:	7607a783          	lw	a5,1888(a5) # 80026760 <__stack_top+0xfffdfff0>
80005a08:	fe842703          	lw	a4,-24(s0)
80005a0c:	00f707b3          	add	a5,a4,a5
80005a10:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:62
    //totalFlits += HW_get_32bit_reg(LOCAL_FLITS) - localFlits_last;
    totalFlits += HW_get_32bit_reg(NORTH_FLITS) - northFlits_last;
80005a14:	900007b7          	lui	a5,0x90000
80005a18:	fb878513          	addi	a0,a5,-72 # 8fffffb8 <__stack_top+0xffb9848>
80005a1c:	d80fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005a20:	00050713          	mv	a4,a0
80005a24:	9781a783          	lw	a5,-1672(gp) # 80008f28 <northFlits_last>
80005a28:	40f707b3          	sub	a5,a4,a5
80005a2c:	fe842703          	lw	a4,-24(s0)
80005a30:	00f707b3          	add	a5,a4,a5
80005a34:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:65
    //totalFlits = eastFlits_dif + westFlits_dif + southFlits_dif + localFlits_dif + northFlits_dif;

    eastFlits_last  = HW_get_32bit_reg(EAST_FLITS);
80005a38:	900007b7          	lui	a5,0x90000
80005a3c:	fc878513          	addi	a0,a5,-56 # 8fffffc8 <__stack_top+0xffb9858>
80005a40:	d5cfb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005a44:	00050713          	mv	a4,a0
80005a48:	96e1a423          	sw	a4,-1688(gp) # 80008f18 <eastFlits_last>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:66
    westFlits_last  = HW_get_32bit_reg(WEST_FLITS);
80005a4c:	900007b7          	lui	a5,0x90000
80005a50:	fc078513          	addi	a0,a5,-64 # 8fffffc0 <__stack_top+0xffb9850>
80005a54:	d48fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005a58:	00050713          	mv	a4,a0
80005a5c:	96e1a823          	sw	a4,-1680(gp) # 80008f20 <westFlits_last>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:67
    southFlits_last = HW_get_32bit_reg(SOUTH_FLITS);
80005a60:	900007b7          	lui	a5,0x90000
80005a64:	fb078513          	addi	a0,a5,-80 # 8fffffb0 <__stack_top+0xffb9840>
80005a68:	d34fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005a6c:	00050713          	mv	a4,a0
80005a70:	98e1a023          	sw	a4,-1664(gp) # 80008f30 <southFlits_last>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:68
    localFlits_last = HW_get_32bit_reg(LOCAL_FLITS);
80005a74:	900007b7          	lui	a5,0x90000
80005a78:	fa878513          	addi	a0,a5,-88 # 8fffffa8 <__stack_top+0xffb9838>
80005a7c:	d20fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005a80:	00050713          	mv	a4,a0
80005a84:	98e1a423          	sw	a4,-1656(gp) # 80008f38 <localFlits_last>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:69
    northFlits_last = HW_get_32bit_reg(NORTH_FLITS);
80005a88:	900007b7          	lui	a5,0x90000
80005a8c:	fb878513          	addi	a0,a5,-72 # 8fffffb8 <__stack_top+0xffb9848>
80005a90:	d0cfb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005a94:	00050713          	mv	a4,a0
80005a98:	96e1ac23          	sw	a4,-1672(gp) # 80008f28 <northFlits_last>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:71

    return ((totalPackets * 5) + totalFlits);
80005a9c:	fec42703          	lw	a4,-20(s0)
80005aa0:	00070793          	mv	a5,a4
80005aa4:	00279793          	slli	a5,a5,0x2
80005aa8:	00e78733          	add	a4,a5,a4
80005aac:	fe842783          	lw	a5,-24(s0)
80005ab0:	00f707b3          	add	a5,a4,a5
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:72
}
80005ab4:	00078513          	mv	a0,a5
80005ab8:	01c12083          	lw	ra,28(sp)
80005abc:	01812403          	lw	s0,24(sp)
80005ac0:	02010113          	addi	sp,sp,32
80005ac4:	00008067          	ret

80005ac8 <powerEstimation>:
powerEstimation():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:74

void powerEstimation(){
80005ac8:	fa010113          	addi	sp,sp,-96
80005acc:	04112e23          	sw	ra,92(sp)
80005ad0:	04812c23          	sw	s0,88(sp)
80005ad4:	06010413          	addi	s0,sp,96
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:76
    //unsigned int actualTime, deltaTime;
    unsigned int Voltage = 2;
80005ad8:	00200793          	li	a5,2
80005adc:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:82
    unsigned int loads, stores, others, total;
    unsigned int dynamicEnergy_PE, dynamicEnergy_MEM, dynamicEnergy_Router;
    unsigned int leakEnergy_PE;
    unsigned int totalEnergy, nPorts, nocActivity, energyActive, energyIdle, nocIdle, idleNoCEnergy, activeNoCEnergy;
    
    if(!thermalPacket_pending){
80005ae0:	9641a783          	lw	a5,-1692(gp) # 80008f14 <thermalPacket_pending>
80005ae4:	34079863          	bnez	a5,80005e34 <powerEstimation+0x36c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:83
        thermalPacket_pending = TRUE;
80005ae8:	00100713          	li	a4,1
80005aec:	96e1a223          	sw	a4,-1692(gp) # 80008f14 <thermalPacket_pending>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:86

        // gets the number of ports
        nPorts = getNumberOfPorts(ProcessorAddr);
80005af0:	800267b7          	lui	a5,0x80026
80005af4:	76c7a783          	lw	a5,1900(a5) # 8002676c <__stack_top+0xfffdfffc>
80005af8:	00078513          	mv	a0,a5
80005afc:	cbdff0ef          	jal	ra,800057b8 <getNumberOfPorts>
80005b00:	fea42223          	sw	a0,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:89
         
        // estimate the noc activity
        nocActivity = estimateNoCActivity();
80005b04:	d59ff0ef          	jal	ra,8000585c <estimateNoCActivity>
80005b08:	fea42023          	sw	a0,-32(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:90
        if(nocActivity < 1000000)
80005b0c:	fe042703          	lw	a4,-32(s0)
80005b10:	000f47b7          	lui	a5,0xf4
80005b14:	23f78793          	addi	a5,a5,575 # f423f <RAM_SIZE+0x7423f>
80005b18:	00e7ee63          	bltu	a5,a4,80005b34 <powerEstimation+0x6c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:91
            nocIdle = 1000000 - nocActivity;
80005b1c:	000f47b7          	lui	a5,0xf4
80005b20:	24078713          	addi	a4,a5,576 # f4240 <RAM_SIZE+0x74240>
80005b24:	fe042783          	lw	a5,-32(s0)
80005b28:	40f707b3          	sub	a5,a4,a5
80005b2c:	fef42623          	sw	a5,-20(s0)
80005b30:	0080006f          	j	80005b38 <powerEstimation+0x70>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:93
        else
            nocIdle = 0;
80005b34:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:96

        // calculates the energy
        energyActive = ((nPorts * powerAvgBufferActive[Voltage]) + powerSwitchControlActive[Voltage]);
80005b38:	800087b7          	lui	a5,0x80008
80005b3c:	fe842703          	lw	a4,-24(s0)
80005b40:	00271713          	slli	a4,a4,0x2
80005b44:	75c78793          	addi	a5,a5,1884 # 8000875c <__stack_top+0xfffc1fec>
80005b48:	00f707b3          	add	a5,a4,a5
80005b4c:	0007a783          	lw	a5,0(a5)
80005b50:	00078713          	mv	a4,a5
80005b54:	fe442783          	lw	a5,-28(s0)
80005b58:	02f707b3          	mul	a5,a4,a5
80005b5c:	80008737          	lui	a4,0x80008
80005b60:	fe842683          	lw	a3,-24(s0)
80005b64:	00269693          	slli	a3,a3,0x2
80005b68:	76870713          	addi	a4,a4,1896 # 80008768 <__stack_top+0xfffc1ff8>
80005b6c:	00e68733          	add	a4,a3,a4
80005b70:	00072703          	lw	a4,0(a4)
80005b74:	00e787b3          	add	a5,a5,a4
80005b78:	fcf42e23          	sw	a5,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:97
        energyIdle   = ((nPorts * powerAvgBufferIdle[Voltage]) + powerSwitchControlIdle[Voltage]);
80005b7c:	800087b7          	lui	a5,0x80008
80005b80:	fe842703          	lw	a4,-24(s0)
80005b84:	00271713          	slli	a4,a4,0x2
80005b88:	74478793          	addi	a5,a5,1860 # 80008744 <__stack_top+0xfffc1fd4>
80005b8c:	00f707b3          	add	a5,a4,a5
80005b90:	0007a783          	lw	a5,0(a5)
80005b94:	00078713          	mv	a4,a5
80005b98:	fe442783          	lw	a5,-28(s0)
80005b9c:	02f707b3          	mul	a5,a4,a5
80005ba0:	80008737          	lui	a4,0x80008
80005ba4:	fe842683          	lw	a3,-24(s0)
80005ba8:	00269693          	slli	a3,a3,0x2
80005bac:	75070713          	addi	a4,a4,1872 # 80008750 <__stack_top+0xfffc1fe0>
80005bb0:	00e68733          	add	a4,a3,a4
80005bb4:	00072703          	lw	a4,0(a4)
80005bb8:	00e787b3          	add	a5,a5,a4
80005bbc:	fcf42c23          	sw	a5,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:100

        // multiply by the period to get the power consumption
        idleNoCEnergy = nocIdle * energyIdle; // * DC_DC_CONVERTER_ENERGY_OVERHEAD / 10;
80005bc0:	fec42703          	lw	a4,-20(s0)
80005bc4:	fd842783          	lw	a5,-40(s0)
80005bc8:	02f707b3          	mul	a5,a4,a5
80005bcc:	fcf42a23          	sw	a5,-44(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:101
        activeNoCEnergy = nocActivity * energyActive + (memFlits * (readEnergyMemory[Voltage] + writeEnergyMemory[Voltage]));  //* DC_DC_CONVERTER_ENERGY_OVERHEAD / 10;
80005bd0:	fe042703          	lw	a4,-32(s0)
80005bd4:	fdc42783          	lw	a5,-36(s0)
80005bd8:	02f70733          	mul	a4,a4,a5
80005bdc:	800087b7          	lui	a5,0x80008
80005be0:	fe842683          	lw	a3,-24(s0)
80005be4:	00269693          	slli	a3,a3,0x2
80005be8:	77478793          	addi	a5,a5,1908 # 80008774 <__stack_top+0xfffc2004>
80005bec:	00f687b3          	add	a5,a3,a5
80005bf0:	0007a683          	lw	a3,0(a5)
80005bf4:	800087b7          	lui	a5,0x80008
80005bf8:	fe842603          	lw	a2,-24(s0)
80005bfc:	00261613          	slli	a2,a2,0x2
80005c00:	78078793          	addi	a5,a5,1920 # 80008780 <__stack_top+0xfffc2010>
80005c04:	00f607b3          	add	a5,a2,a5
80005c08:	0007a783          	lw	a5,0(a5)
80005c0c:	00f687b3          	add	a5,a3,a5
80005c10:	00078693          	mv	a3,a5
80005c14:	800267b7          	lui	a5,0x80026
80005c18:	7607a783          	lw	a5,1888(a5) # 80026760 <__stack_top+0xfffdfff0>
80005c1c:	02f687b3          	mul	a5,a3,a5
80005c20:	00f707b3          	add	a5,a4,a5
80005c24:	fcf42823          	sw	a5,-48(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:104

        // calculates the ROUTER dynamic energy
        dynamicEnergy_Router = (idleNoCEnergy + activeNoCEnergy) >> 6;
80005c28:	fd442703          	lw	a4,-44(s0)
80005c2c:	fd042783          	lw	a5,-48(s0)
80005c30:	00f707b3          	add	a5,a4,a5
80005c34:	0067d793          	srli	a5,a5,0x6
80005c38:	fcf42623          	sw	a5,-52(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:105
        printsv("dynamicEnergy_Router >> ", dynamicEnergy_Router);
80005c3c:	fcc42783          	lw	a5,-52(s0)
80005c40:	00078593          	mv	a1,a5
80005c44:	800087b7          	lui	a5,0x80008
80005c48:	7e478513          	addi	a0,a5,2020 # 800087e4 <__stack_top+0xfffc2074>
80005c4c:	48c000ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:108

        // reads the number of each type of instruction executed in the last window
        loads = HW_get_32bit_reg(LOADS_COUNT);
80005c50:	900007b7          	lui	a5,0x90000
80005c54:	ff478513          	addi	a0,a5,-12 # 8ffffff4 <__stack_top+0xffb9884>
80005c58:	b44fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005c5c:	fca42423          	sw	a0,-56(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:109
        stores = HW_get_32bit_reg(STORES_COUNT);
80005c60:	900007b7          	lui	a5,0x90000
80005c64:	ff078513          	addi	a0,a5,-16 # 8ffffff0 <__stack_top+0xffb9880>
80005c68:	b34fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005c6c:	fca42223          	sw	a0,-60(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:110
        others = HW_get_32bit_reg(OTHERS_COUNT);
80005c70:	900007b7          	lui	a5,0x90000
80005c74:	fec78513          	addi	a0,a5,-20 # 8fffffec <__stack_top+0xffb987c>
80005c78:	b24fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005c7c:	fca42023          	sw	a0,-64(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:111
        resetExecutedInstructions();
80005c80:	ae5ff0ef          	jal	ra,80005764 <resetExecutedInstructions>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:114

        // number of instructions executed in the last window
        total = loads + stores + others; 
80005c84:	fc842703          	lw	a4,-56(s0)
80005c88:	fc442783          	lw	a5,-60(s0)
80005c8c:	00f707b3          	add	a5,a4,a5
80005c90:	fc042703          	lw	a4,-64(s0)
80005c94:	00f707b3          	add	a5,a4,a5
80005c98:	faf42e23          	sw	a5,-68(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:115
        printsv("total instructions~~~> ", total);
80005c9c:	fbc42783          	lw	a5,-68(s0)
80005ca0:	00078593          	mv	a1,a5
80005ca4:	800097b7          	lui	a5,0x80009
80005ca8:	80078513          	addi	a0,a5,-2048 # 80008800 <__stack_top+0xfffc2090>
80005cac:	42c000ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:118

        // calculates the PE dynamic energy
        dynamicEnergy_PE = ((arithDyn[Voltage] * others)) + ((loadStoreDyn[Voltage] * (loads + stores)));
80005cb0:	800087b7          	lui	a5,0x80008
80005cb4:	fe842703          	lw	a4,-24(s0)
80005cb8:	00271713          	slli	a4,a4,0x2
80005cbc:	78c78793          	addi	a5,a5,1932 # 8000878c <__stack_top+0xfffc201c>
80005cc0:	00f707b3          	add	a5,a4,a5
80005cc4:	0007a783          	lw	a5,0(a5)
80005cc8:	00078713          	mv	a4,a5
80005ccc:	fc042783          	lw	a5,-64(s0)
80005cd0:	02f70733          	mul	a4,a4,a5
80005cd4:	800087b7          	lui	a5,0x80008
80005cd8:	fe842683          	lw	a3,-24(s0)
80005cdc:	00269693          	slli	a3,a3,0x2
80005ce0:	79878793          	addi	a5,a5,1944 # 80008798 <__stack_top+0xfffc2028>
80005ce4:	00f687b3          	add	a5,a3,a5
80005ce8:	0007a783          	lw	a5,0(a5)
80005cec:	00078613          	mv	a2,a5
80005cf0:	fc842683          	lw	a3,-56(s0)
80005cf4:	fc442783          	lw	a5,-60(s0)
80005cf8:	00f687b3          	add	a5,a3,a5
80005cfc:	02f607b3          	mul	a5,a2,a5
80005d00:	00f707b3          	add	a5,a4,a5
80005d04:	faf42c23          	sw	a5,-72(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:119
        dynamicEnergy_PE = dynamicEnergy_PE >> 6;
80005d08:	fb842783          	lw	a5,-72(s0)
80005d0c:	0067d793          	srli	a5,a5,0x6
80005d10:	faf42c23          	sw	a5,-72(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:123
        //printsv("dynamicEnergy_PE >> 6: ", dynamicEnergy_PE);

        // calculates the PE leakage energy
        leakEnergy_PE = (unsigned int)((PE_LEAKAGE * 1000000) * 0.001) >> 6; // mW => pW * s => pJ
80005d14:	69700793          	li	a5,1687
80005d18:	faf42a23          	sw	a5,-76(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:126

        // calculates the MEM dynamic energy
        dynamicEnergy_MEM = (readEnergyMemory[Voltage] * loads) + (writeEnergyMemory[Voltage] * stores);
80005d1c:	800087b7          	lui	a5,0x80008
80005d20:	fe842703          	lw	a4,-24(s0)
80005d24:	00271713          	slli	a4,a4,0x2
80005d28:	77478793          	addi	a5,a5,1908 # 80008774 <__stack_top+0xfffc2004>
80005d2c:	00f707b3          	add	a5,a4,a5
80005d30:	0007a783          	lw	a5,0(a5)
80005d34:	00078713          	mv	a4,a5
80005d38:	fc842783          	lw	a5,-56(s0)
80005d3c:	02f70733          	mul	a4,a4,a5
80005d40:	800087b7          	lui	a5,0x80008
80005d44:	fe842683          	lw	a3,-24(s0)
80005d48:	00269693          	slli	a3,a3,0x2
80005d4c:	78078793          	addi	a5,a5,1920 # 80008780 <__stack_top+0xfffc2010>
80005d50:	00f687b3          	add	a5,a3,a5
80005d54:	0007a783          	lw	a5,0(a5)
80005d58:	00078693          	mv	a3,a5
80005d5c:	fc442783          	lw	a5,-60(s0)
80005d60:	02f687b3          	mul	a5,a3,a5
80005d64:	00f707b3          	add	a5,a4,a5
80005d68:	faf42823          	sw	a5,-80(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:127
        dynamicEnergy_MEM = dynamicEnergy_MEM >> 6;
80005d6c:	fb042783          	lw	a5,-80(s0)
80005d70:	0067d793          	srli	a5,a5,0x6
80005d74:	faf42823          	sw	a5,-80(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:131
        //printsv("dynamicEnergy_MEM >> 6: ", dynamicEnergy_MEM);

        // the amount of energy spent by this tile in the last window
        totalEnergy = (dynamicEnergy_MEM + dynamicEnergy_PE + dynamicEnergy_Router) + (leakEnergy_PE);
80005d78:	fb042703          	lw	a4,-80(s0)
80005d7c:	fb842783          	lw	a5,-72(s0)
80005d80:	00f70733          	add	a4,a4,a5
80005d84:	fcc42783          	lw	a5,-52(s0)
80005d88:	00f707b3          	add	a5,a4,a5
80005d8c:	fb442703          	lw	a4,-76(s0)
80005d90:	00f707b3          	add	a5,a4,a5
80005d94:	faf42623          	sw	a5,-84(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:132
        printsv("TotalEnergy: ", totalEnergy);
80005d98:	fac42783          	lw	a5,-84(s0)
80005d9c:	00078593          	mv	a1,a5
80005da0:	800097b7          	lui	a5,0x80009
80005da4:	81878513          	addi	a0,a5,-2024 # 80008818 <__stack_top+0xfffc20a8>
80005da8:	330000ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:135

        // Fill the ThermalPacket slot...
        ThermalPacket.header.header           = makeAddress(0, 0) | PERIPH_WEST;
80005dac:	00000593          	li	a1,0
80005db0:	00000513          	li	a0,0
80005db4:	740000ef          	jal	ra,800064f4 <makeAddress>
80005db8:	00050713          	mv	a4,a0
80005dbc:	000207b7          	lui	a5,0x20
80005dc0:	00f76733          	or	a4,a4,a5
80005dc4:	800227b7          	lui	a5,0x80022
80005dc8:	3ac78793          	addi	a5,a5,940 # 800223ac <__stack_top+0xfffdbc3c>
80005dcc:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:136
        ThermalPacket.header.payload_size     = PKT_SERVICE_SIZE;
80005dd0:	800227b7          	lui	a5,0x80022
80005dd4:	3ac78793          	addi	a5,a5,940 # 800223ac <__stack_top+0xfffdbc3c>
80005dd8:	00b00713          	li	a4,11
80005ddc:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:137
        ThermalPacket.header.service          = ENERGY_PACKET;
80005de0:	800227b7          	lui	a5,0x80022
80005de4:	3ac78793          	addi	a5,a5,940 # 800223ac <__stack_top+0xfffdbc3c>
80005de8:	05000713          	li	a4,80
80005dec:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:138
        ThermalPacket.header.source_addr      = ProcessorAddr;
80005df0:	800267b7          	lui	a5,0x80026
80005df4:	76c7a703          	lw	a4,1900(a5) # 8002676c <__stack_top+0xfffdfffc>
80005df8:	800227b7          	lui	a5,0x80022
80005dfc:	3ac78793          	addi	a5,a5,940 # 800223ac <__stack_top+0xfffdbc3c>
80005e00:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:139
        ThermalPacket.header.spent_energy     = totalEnergy;
80005e04:	800227b7          	lui	a5,0x80022
80005e08:	3ac78793          	addi	a5,a5,940 # 800223ac <__stack_top+0xfffdbc3c>
80005e0c:	fac42703          	lw	a4,-84(s0)
80005e10:	00e7ac23          	sw	a4,24(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:140
        API_PushSendQueue(THERMAL, 0);
80005e14:	00000593          	li	a1,0
80005e18:	40400537          	lui	a0,0x40400
80005e1c:	718000ef          	jal	ra,80006534 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:141
        prints("EnergyPckt sent\n");
80005e20:	800097b7          	lui	a5,0x80009
80005e24:	82878513          	addi	a0,a5,-2008 # 80008828 <__stack_top+0xfffc20b8>
80005e28:	204000ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:144

        // change the PE frequency to the selected one
        API_applyFreqScale();
80005e2c:	f7cff0ef          	jal	ra,800055a8 <API_applyFreqScale>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:146
    }
    return;
80005e30:	00000013          	nop
80005e34:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:147
}
80005e38:	05c12083          	lw	ra,92(sp)
80005e3c:	05812403          	lw	s0,88(sp)
80005e40:	06010113          	addi	sp,sp,96
80005e44:	00008067          	ret

80005e48 <PLIC_EnableIRQ>:
PLIC_EnableIRQ():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:154
{
80005e48:	fd010113          	addi	sp,sp,-48
80005e4c:	02812623          	sw	s0,44(sp)
80005e50:	03010413          	addi	s0,sp,48
80005e54:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:155
    unsigned long hart_id = read_csr(mhartid);
80005e58:	f14027f3          	csrr	a5,mhartid
80005e5c:	fef42623          	sw	a5,-20(s0)
80005e60:	fec42783          	lw	a5,-20(s0)
80005e64:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:156
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80005e68:	40000737          	lui	a4,0x40000
80005e6c:	fdc42783          	lw	a5,-36(s0)
80005e70:	0057d793          	srli	a5,a5,0x5
80005e74:	fe842683          	lw	a3,-24(s0)
80005e78:	00569693          	slli	a3,a3,0x5
80005e7c:	00f686b3          	add	a3,a3,a5
80005e80:	000017b7          	lui	a5,0x1
80005e84:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80005e88:	00f687b3          	add	a5,a3,a5
80005e8c:	00279793          	slli	a5,a5,0x2
80005e90:	00f707b3          	add	a5,a4,a5
80005e94:	0007a783          	lw	a5,0(a5)
80005e98:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:157
    current |= (uint32_t)1 << (IRQn % 32);
80005e9c:	fdc42783          	lw	a5,-36(s0)
80005ea0:	01f7f793          	andi	a5,a5,31
80005ea4:	00100713          	li	a4,1
80005ea8:	00f717b3          	sll	a5,a4,a5
80005eac:	fe442703          	lw	a4,-28(s0)
80005eb0:	00f767b3          	or	a5,a4,a5
80005eb4:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:158
    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
80005eb8:	40000737          	lui	a4,0x40000
80005ebc:	fdc42783          	lw	a5,-36(s0)
80005ec0:	0057d793          	srli	a5,a5,0x5
80005ec4:	fe842683          	lw	a3,-24(s0)
80005ec8:	00569693          	slli	a3,a3,0x5
80005ecc:	00f686b3          	add	a3,a3,a5
80005ed0:	000017b7          	lui	a5,0x1
80005ed4:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80005ed8:	00f687b3          	add	a5,a3,a5
80005edc:	00279793          	slli	a5,a5,0x2
80005ee0:	00f707b3          	add	a5,a4,a5
80005ee4:	fe442703          	lw	a4,-28(s0)
80005ee8:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:159
}
80005eec:	00000013          	nop
80005ef0:	02c12403          	lw	s0,44(sp)
80005ef4:	03010113          	addi	sp,sp,48
80005ef8:	00008067          	ret

80005efc <PLIC_SetPriority>:
PLIC_SetPriority():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:188
{
80005efc:	fe010113          	addi	sp,sp,-32
80005f00:	00812e23          	sw	s0,28(sp)
80005f04:	02010413          	addi	s0,sp,32
80005f08:	fea42623          	sw	a0,-20(s0)
80005f0c:	feb42423          	sw	a1,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:189
    PLIC->SOURCE_PRIORITY[IRQn] = priority;
80005f10:	40000737          	lui	a4,0x40000
80005f14:	fec42783          	lw	a5,-20(s0)
80005f18:	00279793          	slli	a5,a5,0x2
80005f1c:	00f707b3          	add	a5,a4,a5
80005f20:	fe842703          	lw	a4,-24(s0)
80005f24:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:190
}
80005f28:	00000013          	nop
80005f2c:	01c12403          	lw	s0,28(sp)
80005f30:	02010113          	addi	sp,sp,32
80005f34:	00008067          	ret

80005f38 <Chronos_init>:
Chronos_init():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:31
extern unsigned int temperatureUpdated;


////////////////////////////////////////////////////////////
// Initialize Chronos stuff
void Chronos_init(){
80005f38:	ff010113          	addi	sp,sp,-16
80005f3c:	00112623          	sw	ra,12(sp)
80005f40:	00812423          	sw	s0,8(sp)
80005f44:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:33
    // Resets the amount of each executed instruction
    resetExecutedInstructions();
80005f48:	81dff0ef          	jal	ra,80005764 <resetExecutedInstructions>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:36

    //Informs the Router this tile ID, that is provided by Harness
    HW_set_32bit_reg(ROUTER_BASE, HW_get_32bit_reg(MY_ID)); 
80005f4c:	900007b7          	lui	a5,0x90000
80005f50:	ffc78513          	addi	a0,a5,-4 # 8ffffffc <__stack_top+0xffb988c>
80005f54:	848fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005f58:	00050793          	mv	a5,a0
80005f5c:	00078593          	mv	a1,a5
80005f60:	50000537          	lui	a0,0x50000
80005f64:	830fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:39
    
    // Reads this processor address, calculated by the router
    ProcessorAddr = HW_get_32bit_reg(ROUTER_BASE);
80005f68:	50000537          	lui	a0,0x50000
80005f6c:	830fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005f70:	00050713          	mv	a4,a0
80005f74:	800267b7          	lui	a5,0x80026
80005f78:	76e7a623          	sw	a4,1900(a5) # 8002676c <__stack_top+0xfffdfffc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:42

    // Informs the PRINTER this tile address
    HW_set_32bit_reg(PRINTER_CHAR, getXpos(ProcessorAddr));
80005f7c:	800267b7          	lui	a5,0x80026
80005f80:	76c7a783          	lw	a5,1900(a5) # 8002676c <__stack_top+0xfffdfffc>
80005f84:	00078513          	mv	a0,a5
80005f88:	1f8000ef          	jal	ra,80006180 <getXpos>
80005f8c:	00050793          	mv	a5,a0
80005f90:	00078593          	mv	a1,a5
80005f94:	500007b7          	lui	a5,0x50000
80005f98:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80005f9c:	ff9fa0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:43
    HW_set_32bit_reg(PRINTER_CHAR, getYpos(ProcessorAddr));
80005fa0:	800267b7          	lui	a5,0x80026
80005fa4:	76c7a783          	lw	a5,1900(a5) # 8002676c <__stack_top+0xfffdfffc>
80005fa8:	00078513          	mv	a0,a5
80005fac:	200000ef          	jal	ra,800061ac <getYpos>
80005fb0:	00050793          	mv	a5,a0
80005fb4:	00078593          	mv	a1,a5
80005fb8:	500007b7          	lui	a5,0x50000
80005fbc:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80005fc0:	fd5fa0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:46

    // Initialize the TaskList
    API_TaskListInit();
80005fc4:	e90fe0ef          	jal	ra,80004654 <API_TaskListInit>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:49
    
    // Initialize the Message & Service PIPE
    API_PipeInitialization();
80005fc8:	f71fe0ef          	jal	ra,80004f38 <API_PipeInitialization>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:50
    SendingQueue_front = 0;
80005fcc:	800227b7          	lui	a5,0x80022
80005fd0:	6007a023          	sw	zero,1536(a5) # 80022600 <__stack_top+0xfffdbe90>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:51
    SendingQueue_tail = 0;
80005fd4:	800227b7          	lui	a5,0x80022
80005fd8:	3a07a423          	sw	zero,936(a5) # 800223a8 <__stack_top+0xfffdbc38>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:54

    // Configures the timer to interrupt at each ms
    HW_set_32bit_reg(NI_TIMER, 1000);
80005fdc:	3e800593          	li	a1,1000
80005fe0:	500007b7          	lui	a5,0x50000
80005fe4:	01078513          	addi	a0,a5,16 # 50000010 <RAM_SIZE+0x4ff80010>
80005fe8:	fadfa0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:57

    // Informs the NI the address to store incoming packets
    HW_set_32bit_reg(NI_ADDR, (unsigned int)&incommingPacket.header);
80005fec:	800227b7          	lui	a5,0x80022
80005ff0:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
80005ff4:	00078593          	mv	a1,a5
80005ff8:	500007b7          	lui	a5,0x50000
80005ffc:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
80006000:	f95fa0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:60
    
    // Enables interruption from NI
    NI_enable_irq(TX_RX);
80006004:	000077b7          	lui	a5,0x7
80006008:	77778513          	addi	a0,a5,1911 # 7777 <HEAP_SIZE-0x8889>
8000600c:	214000ef          	jal	ra,80006220 <NI_enable_irq>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:63

    // Set the system to Idle
    API_setFreqIdle();
80006010:	d10ff0ef          	jal	ra,80005520 <API_setFreqIdle>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:64
    API_freqStepUp();
80006014:	de8ff0ef          	jal	ra,800055fc <API_freqStepUp>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:65
    return;
80006018:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:66
}
8000601c:	00c12083          	lw	ra,12(sp)
80006020:	00812403          	lw	s0,8(sp)
80006024:	01010113          	addi	sp,sp,16
80006028:	00008067          	ret

8000602c <prints>:
prints():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:70

////////////////////////////////////////////////////////////
// Prints a string
void prints(char *text) {
8000602c:	fd010113          	addi	sp,sp,-48
80006030:	02112623          	sw	ra,44(sp)
80006034:	02812423          	sw	s0,40(sp)
80006038:	03010413          	addi	s0,sp,48
8000603c:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:71
    int i = 0;
80006040:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:73 (discriminator 1)
    do {
        HW_set_32bit_reg(PRINTER_CHAR, text[i]);
80006044:	fec42783          	lw	a5,-20(s0)
80006048:	fdc42703          	lw	a4,-36(s0)
8000604c:	00f707b3          	add	a5,a4,a5
80006050:	00078783          	lb	a5,0(a5)
80006054:	00078593          	mv	a1,a5
80006058:	500007b7          	lui	a5,0x50000
8000605c:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80006060:	f35fa0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:74 (discriminator 1)
        i++;
80006064:	fec42783          	lw	a5,-20(s0)
80006068:	00178793          	addi	a5,a5,1
8000606c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:75 (discriminator 1)
    } while (text[i - 1] != '\0');
80006070:	fec42783          	lw	a5,-20(s0)
80006074:	fff78793          	addi	a5,a5,-1
80006078:	fdc42703          	lw	a4,-36(s0)
8000607c:	00f707b3          	add	a5,a4,a5
80006080:	00078783          	lb	a5,0(a5)
80006084:	fc0790e3          	bnez	a5,80006044 <prints+0x18>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:76
    return;
80006088:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:77
}
8000608c:	02c12083          	lw	ra,44(sp)
80006090:	02812403          	lw	s0,40(sp)
80006094:	03010113          	addi	sp,sp,48
80006098:	00008067          	ret

8000609c <printi>:
printi():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:81

////////////////////////////////////////////////////////////
// Prints an integer
void printi(int value) {
8000609c:	fe010113          	addi	sp,sp,-32
800060a0:	00112e23          	sw	ra,28(sp)
800060a4:	00812c23          	sw	s0,24(sp)
800060a8:	02010413          	addi	s0,sp,32
800060ac:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:82
    HW_set_32bit_reg(PRINTER_INT, value);
800060b0:	fec42783          	lw	a5,-20(s0)
800060b4:	00078593          	mv	a1,a5
800060b8:	500007b7          	lui	a5,0x50000
800060bc:	02478513          	addi	a0,a5,36 # 50000024 <RAM_SIZE+0x4ff80024>
800060c0:	ed5fa0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:83
    return;
800060c4:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:84
}
800060c8:	01c12083          	lw	ra,28(sp)
800060cc:	01812403          	lw	s0,24(sp)
800060d0:	02010113          	addi	sp,sp,32
800060d4:	00008067          	ret

800060d8 <printsv>:
printsv():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:88

////////////////////////////////////////////////////////////
// Prints a string followed by a integer
void printsv(char *text1, int value1) {
800060d8:	fe010113          	addi	sp,sp,-32
800060dc:	00112e23          	sw	ra,28(sp)
800060e0:	00812c23          	sw	s0,24(sp)
800060e4:	02010413          	addi	s0,sp,32
800060e8:	fea42623          	sw	a0,-20(s0)
800060ec:	feb42423          	sw	a1,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:89
    prints(text1);
800060f0:	fec42503          	lw	a0,-20(s0)
800060f4:	f39ff0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:90
    printi(value1);
800060f8:	fe842503          	lw	a0,-24(s0)
800060fc:	fa1ff0ef          	jal	ra,8000609c <printi>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:91
    prints("\n");
80006100:	800097b7          	lui	a5,0x80009
80006104:	83c78513          	addi	a0,a5,-1988 # 8000883c <__stack_top+0xfffc20cc>
80006108:	f25ff0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:92
    return;
8000610c:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:93
}
80006110:	01c12083          	lw	ra,28(sp)
80006114:	01812403          	lw	s0,24(sp)
80006118:	02010113          	addi	sp,sp,32
8000611c:	00008067          	ret

80006120 <printsvsv>:
printsvsv():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:97

////////////////////////////////////////////////////////////
// Prints two strings and two integers interspersed
void printsvsv(char *text1, int value1, char *text2, int value2) {
80006120:	fe010113          	addi	sp,sp,-32
80006124:	00112e23          	sw	ra,28(sp)
80006128:	00812c23          	sw	s0,24(sp)
8000612c:	02010413          	addi	s0,sp,32
80006130:	fea42623          	sw	a0,-20(s0)
80006134:	feb42423          	sw	a1,-24(s0)
80006138:	fec42223          	sw	a2,-28(s0)
8000613c:	fed42023          	sw	a3,-32(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:98
    prints(text1);
80006140:	fec42503          	lw	a0,-20(s0)
80006144:	ee9ff0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:99
    printi(value1);
80006148:	fe842503          	lw	a0,-24(s0)
8000614c:	f51ff0ef          	jal	ra,8000609c <printi>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:100
    prints(text2);
80006150:	fe442503          	lw	a0,-28(s0)
80006154:	ed9ff0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:101
    printi(value2);
80006158:	fe042503          	lw	a0,-32(s0)
8000615c:	f41ff0ef          	jal	ra,8000609c <printi>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:102
    prints("\n");
80006160:	800097b7          	lui	a5,0x80009
80006164:	83c78513          	addi	a0,a5,-1988 # 8000883c <__stack_top+0xfffc20cc>
80006168:	ec5ff0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:103
    return;
8000616c:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:104
}
80006170:	01c12083          	lw	ra,28(sp)
80006174:	01812403          	lw	s0,24(sp)
80006178:	02010113          	addi	sp,sp,32
8000617c:	00008067          	ret

80006180 <getXpos>:
getXpos():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:108

////////////////////////////////////////////////////////////
// Gets the X coordinate from the address
unsigned int getXpos(unsigned int addr) { return ((addr & 0x0000FF00) >> 8); }
80006180:	fe010113          	addi	sp,sp,-32
80006184:	00812e23          	sw	s0,28(sp)
80006188:	02010413          	addi	s0,sp,32
8000618c:	fea42623          	sw	a0,-20(s0)
80006190:	fec42783          	lw	a5,-20(s0)
80006194:	0087d793          	srli	a5,a5,0x8
80006198:	0ff7f793          	andi	a5,a5,255
8000619c:	00078513          	mv	a0,a5
800061a0:	01c12403          	lw	s0,28(sp)
800061a4:	02010113          	addi	sp,sp,32
800061a8:	00008067          	ret

800061ac <getYpos>:
getYpos():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:112

////////////////////////////////////////////////////////////
// Gets the Y coordinate from the address
unsigned int getYpos(unsigned int addr) { return (addr & 0x000000FF); }
800061ac:	fe010113          	addi	sp,sp,-32
800061b0:	00812e23          	sw	s0,28(sp)
800061b4:	02010413          	addi	s0,sp,32
800061b8:	fea42623          	sw	a0,-20(s0)
800061bc:	fec42783          	lw	a5,-20(s0)
800061c0:	0ff7f793          	andi	a5,a5,255
800061c4:	00078513          	mv	a0,a5
800061c8:	01c12403          	lw	s0,28(sp)
800061cc:	02010113          	addi	sp,sp,32
800061d0:	00008067          	ret

800061d4 <SendRaw>:
SendRaw():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:116

///////////////////////////////////////////////////////////////////
// Configure the NI to transmitt a given packet
void SendRaw(unsigned int addr) {
800061d4:	fe010113          	addi	sp,sp,-32
800061d8:	00112e23          	sw	ra,28(sp)
800061dc:	00812c23          	sw	s0,24(sp)
800061e0:	02010413          	addi	s0,sp,32
800061e4:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:117
    HW_set_32bit_reg(NI_ADDR, addr);
800061e8:	fec42583          	lw	a1,-20(s0)
800061ec:	500007b7          	lui	a5,0x50000
800061f0:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
800061f4:	da1fa0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:118
    HW_set_32bit_reg(NI_TX, TX);
800061f8:	000027b7          	lui	a5,0x2
800061fc:	22278593          	addi	a1,a5,546 # 2222 <HEAP_SIZE-0xddde>
80006200:	500007b7          	lui	a5,0x50000
80006204:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80006208:	d8dfa0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:119
    return;
8000620c:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:120
}
80006210:	01c12083          	lw	ra,28(sp)
80006214:	01812403          	lw	s0,24(sp)
80006218:	02010113          	addi	sp,sp,32
8000621c:	00008067          	ret

80006220 <NI_enable_irq>:
NI_enable_irq():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:124

////////////////////////////////////////////////////////////
// Enables interruptions incomming from NI
void NI_enable_irq(int which){
80006220:	fe010113          	addi	sp,sp,-32
80006224:	00112e23          	sw	ra,28(sp)
80006228:	00812c23          	sw	s0,24(sp)
8000622c:	02010413          	addi	s0,sp,32
80006230:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:125
    PLIC_EnableIRQ(NI_RX_IRQn);
80006234:	00200513          	li	a0,2
80006238:	c11ff0ef          	jal	ra,80005e48 <PLIC_EnableIRQ>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:126
    PLIC_SetPriority(NI_RX_IRQn, 1);
8000623c:	00100593          	li	a1,1
80006240:	00200513          	li	a0,2
80006244:	cb9ff0ef          	jal	ra,80005efc <PLIC_SetPriority>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:127
    return;
80006248:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:128
}
8000624c:	01c12083          	lw	ra,28(sp)
80006250:	01812403          	lw	s0,24(sp)
80006254:	02010113          	addi	sp,sp,32
80006258:	00008067          	ret

8000625c <External_2_IRQHandler>:
External_2_IRQHandler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:139
    return;
}

////////////////////////////////////////////////////////////
// Interruption handler for the NI
uint8_t External_2_IRQHandler(void){    
8000625c:	ff010113          	addi	sp,sp,-16
80006260:	00112623          	sw	ra,12(sp)
80006264:	00812423          	sw	s0,8(sp)
80006268:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:140
    API_NI_Handler();
8000626c:	2fc010ef          	jal	ra,80007568 <API_NI_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:142

    return 0;
80006270:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:143
}
80006274:	00078513          	mv	a0,a5
80006278:	00c12083          	lw	ra,12(sp)
8000627c:	00812403          	lw	s0,8(sp)
80006280:	01010113          	addi	sp,sp,16
80006284:	00008067          	ret

80006288 <mySwap>:
mySwap():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:148

////////////////////////////////////////////////////////////
// https://www.techiedelight.com/implement-itoa-function-in-c/
// Function to swap two numbers
void mySwap(char *x, char *y) {
80006288:	fd010113          	addi	sp,sp,-48
8000628c:	02812623          	sw	s0,44(sp)
80006290:	03010413          	addi	s0,sp,48
80006294:	fca42e23          	sw	a0,-36(s0)
80006298:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:149
    char t = *x; *x = *y; *y = t;
8000629c:	fdc42783          	lw	a5,-36(s0)
800062a0:	0007c783          	lbu	a5,0(a5)
800062a4:	fef407a3          	sb	a5,-17(s0)
800062a8:	fd842783          	lw	a5,-40(s0)
800062ac:	00078703          	lb	a4,0(a5)
800062b0:	fdc42783          	lw	a5,-36(s0)
800062b4:	00e78023          	sb	a4,0(a5)
800062b8:	fd842783          	lw	a5,-40(s0)
800062bc:	fef44703          	lbu	a4,-17(s0)
800062c0:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:150
}
800062c4:	00000013          	nop
800062c8:	02c12403          	lw	s0,44(sp)
800062cc:	03010113          	addi	sp,sp,48
800062d0:	00008067          	ret

800062d4 <reverse>:
reverse():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:152
// Function to reverse `buffer[i…j]`
char* reverse(char *buffer, int i, int j){
800062d4:	fe010113          	addi	sp,sp,-32
800062d8:	00112e23          	sw	ra,28(sp)
800062dc:	00812c23          	sw	s0,24(sp)
800062e0:	02010413          	addi	s0,sp,32
800062e4:	fea42623          	sw	a0,-20(s0)
800062e8:	feb42423          	sw	a1,-24(s0)
800062ec:	fec42223          	sw	a2,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:153
    while (i < j) {
800062f0:	0400006f          	j	80006330 <reverse+0x5c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:154
        mySwap(&buffer[i++], &buffer[j--]);
800062f4:	fe842783          	lw	a5,-24(s0)
800062f8:	00178713          	addi	a4,a5,1
800062fc:	fee42423          	sw	a4,-24(s0)
80006300:	00078713          	mv	a4,a5
80006304:	fec42783          	lw	a5,-20(s0)
80006308:	00e786b3          	add	a3,a5,a4
8000630c:	fe442783          	lw	a5,-28(s0)
80006310:	fff78713          	addi	a4,a5,-1
80006314:	fee42223          	sw	a4,-28(s0)
80006318:	00078713          	mv	a4,a5
8000631c:	fec42783          	lw	a5,-20(s0)
80006320:	00e787b3          	add	a5,a5,a4
80006324:	00078593          	mv	a1,a5
80006328:	00068513          	mv	a0,a3
8000632c:	f5dff0ef          	jal	ra,80006288 <mySwap>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:153
    while (i < j) {
80006330:	fe842703          	lw	a4,-24(s0)
80006334:	fe442783          	lw	a5,-28(s0)
80006338:	faf74ee3          	blt	a4,a5,800062f4 <reverse+0x20>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:157
    }
 
    return buffer;
8000633c:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:158
}
80006340:	00078513          	mv	a0,a5
80006344:	01c12083          	lw	ra,28(sp)
80006348:	01812403          	lw	s0,24(sp)
8000634c:	02010113          	addi	sp,sp,32
80006350:	00008067          	ret

80006354 <myItoa>:
myItoa():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:160
// Iterative function to implement `itoa()` function in C
char* myItoa(int value, char* buffer, int base){
80006354:	fd010113          	addi	sp,sp,-48
80006358:	02112623          	sw	ra,44(sp)
8000635c:	02812423          	sw	s0,40(sp)
80006360:	03010413          	addi	s0,sp,48
80006364:	fca42e23          	sw	a0,-36(s0)
80006368:	fcb42c23          	sw	a1,-40(s0)
8000636c:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:162
    // invalid input
    if (base < 2 || base > 32) {
80006370:	fd442703          	lw	a4,-44(s0)
80006374:	00100793          	li	a5,1
80006378:	00e7d863          	ble	a4,a5,80006388 <myItoa+0x34>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:162 (discriminator 1)
8000637c:	fd442703          	lw	a4,-44(s0)
80006380:	02000793          	li	a5,32
80006384:	00e7d663          	ble	a4,a5,80006390 <myItoa+0x3c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:163
        return buffer;
80006388:	fd842783          	lw	a5,-40(s0)
8000638c:	1540006f          	j	800064e0 <myItoa+0x18c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:167
    }
    // consider the absolute value of the number
    int n;
    if (value < 0)
80006390:	fdc42783          	lw	a5,-36(s0)
80006394:	0007da63          	bgez	a5,800063a8 <myItoa+0x54>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:168
        n = value * -1;
80006398:	fdc42783          	lw	a5,-36(s0)
8000639c:	40f007b3          	neg	a5,a5
800063a0:	fef42623          	sw	a5,-20(s0)
800063a4:	00c0006f          	j	800063b0 <myItoa+0x5c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:170
    else 
        n = value;
800063a8:	fdc42783          	lw	a5,-36(s0)
800063ac:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:172

    int i = 0;
800063b0:	fe042423          	sw	zero,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:173
    while (n){
800063b4:	09c0006f          	j	80006450 <myItoa+0xfc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:174
        int r = n % base;
800063b8:	fec42703          	lw	a4,-20(s0)
800063bc:	fd442783          	lw	a5,-44(s0)
800063c0:	02f767b3          	rem	a5,a4,a5
800063c4:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:176
 
        if (r >= 10) {
800063c8:	fe442703          	lw	a4,-28(s0)
800063cc:	00900793          	li	a5,9
800063d0:	02e7de63          	ble	a4,a5,8000640c <myItoa+0xb8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:177
            buffer[i++] = 65 + (r - 10);
800063d4:	fe442783          	lw	a5,-28(s0)
800063d8:	0ff7f793          	andi	a5,a5,255
800063dc:	03778793          	addi	a5,a5,55
800063e0:	0ff7f693          	andi	a3,a5,255
800063e4:	fe842783          	lw	a5,-24(s0)
800063e8:	00178713          	addi	a4,a5,1
800063ec:	fee42423          	sw	a4,-24(s0)
800063f0:	00078713          	mv	a4,a5
800063f4:	fd842783          	lw	a5,-40(s0)
800063f8:	00e787b3          	add	a5,a5,a4
800063fc:	01869713          	slli	a4,a3,0x18
80006400:	41875713          	srai	a4,a4,0x18
80006404:	00e78023          	sb	a4,0(a5)
80006408:	0380006f          	j	80006440 <myItoa+0xec>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:180
        }
        else {
            buffer[i++] = 48 + r;
8000640c:	fe442783          	lw	a5,-28(s0)
80006410:	0ff7f793          	andi	a5,a5,255
80006414:	03078793          	addi	a5,a5,48
80006418:	0ff7f693          	andi	a3,a5,255
8000641c:	fe842783          	lw	a5,-24(s0)
80006420:	00178713          	addi	a4,a5,1
80006424:	fee42423          	sw	a4,-24(s0)
80006428:	00078713          	mv	a4,a5
8000642c:	fd842783          	lw	a5,-40(s0)
80006430:	00e787b3          	add	a5,a5,a4
80006434:	01869713          	slli	a4,a3,0x18
80006438:	41875713          	srai	a4,a4,0x18
8000643c:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:183
        }
 
        n = n / base;
80006440:	fec42703          	lw	a4,-20(s0)
80006444:	fd442783          	lw	a5,-44(s0)
80006448:	02f747b3          	div	a5,a4,a5
8000644c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:173
    while (n){
80006450:	fec42783          	lw	a5,-20(s0)
80006454:	f60792e3          	bnez	a5,800063b8 <myItoa+0x64>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:186
    }
    // if the number is 0
    if (i == 0) {
80006458:	fe842783          	lw	a5,-24(s0)
8000645c:	02079263          	bnez	a5,80006480 <myItoa+0x12c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:187
        buffer[i++] = '0';
80006460:	fe842783          	lw	a5,-24(s0)
80006464:	00178713          	addi	a4,a5,1
80006468:	fee42423          	sw	a4,-24(s0)
8000646c:	00078713          	mv	a4,a5
80006470:	fd842783          	lw	a5,-40(s0)
80006474:	00e787b3          	add	a5,a5,a4
80006478:	03000713          	li	a4,48
8000647c:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:192
    }
    // If the base is 10 and the value is negative, the resulting string
    // is preceded with a minus sign (-)
    // With any other base, value is always considered unsigned
    if (value < 0 && base == 10) {
80006480:	fdc42783          	lw	a5,-36(s0)
80006484:	0207d863          	bgez	a5,800064b4 <myItoa+0x160>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:192 (discriminator 1)
80006488:	fd442703          	lw	a4,-44(s0)
8000648c:	00a00793          	li	a5,10
80006490:	02f71263          	bne	a4,a5,800064b4 <myItoa+0x160>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:193
        buffer[i++] = '-';
80006494:	fe842783          	lw	a5,-24(s0)
80006498:	00178713          	addi	a4,a5,1
8000649c:	fee42423          	sw	a4,-24(s0)
800064a0:	00078713          	mv	a4,a5
800064a4:	fd842783          	lw	a5,-40(s0)
800064a8:	00e787b3          	add	a5,a5,a4
800064ac:	02d00713          	li	a4,45
800064b0:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:195
    }
    buffer[i] = '\0'; // null terminate string
800064b4:	fe842783          	lw	a5,-24(s0)
800064b8:	fd842703          	lw	a4,-40(s0)
800064bc:	00f707b3          	add	a5,a4,a5
800064c0:	00078023          	sb	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:197
    // reverse the string and return it
    return reverse(buffer, 0, i - 1);
800064c4:	fe842783          	lw	a5,-24(s0)
800064c8:	fff78793          	addi	a5,a5,-1
800064cc:	00078613          	mv	a2,a5
800064d0:	00000593          	li	a1,0
800064d4:	fd842503          	lw	a0,-40(s0)
800064d8:	dfdff0ef          	jal	ra,800062d4 <reverse>
800064dc:	00050793          	mv	a5,a0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:198
}
800064e0:	00078513          	mv	a0,a5
800064e4:	02c12083          	lw	ra,44(sp)
800064e8:	02812403          	lw	s0,40(sp)
800064ec:	03010113          	addi	sp,sp,48
800064f0:	00008067          	ret

800064f4 <makeAddress>:
makeAddress():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:212
    return;
}

////////////////////////////////////////////////////////////
// Returns the PE address for a giver pair of coords
unsigned int makeAddress(unsigned int x, unsigned int y) {
800064f4:	fd010113          	addi	sp,sp,-48
800064f8:	02812623          	sw	s0,44(sp)
800064fc:	03010413          	addi	s0,sp,48
80006500:	fca42e23          	sw	a0,-36(s0)
80006504:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:213
    unsigned int address = 0x00000000;
80006508:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:214
    return (address | (x << 8) | y);
8000650c:	fdc42783          	lw	a5,-36(s0)
80006510:	00879713          	slli	a4,a5,0x8
80006514:	fec42783          	lw	a5,-20(s0)
80006518:	00f76733          	or	a4,a4,a5
8000651c:	fd842783          	lw	a5,-40(s0)
80006520:	00f767b3          	or	a5,a4,a5
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:215
}
80006524:	00078513          	mv	a0,a5
80006528:	02c12403          	lw	s0,44(sp)
8000652c:	03010113          	addi	sp,sp,48
80006530:	00008067          	ret

80006534 <API_PushSendQueue>:
API_PushSendQueue():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:219

////////////////////////////////////////////////////////////
// Pushes one slot to the sending queue
void API_PushSendQueue(unsigned int type, unsigned int slot){
80006534:	fe010113          	addi	sp,sp,-32
80006538:	00112e23          	sw	ra,28(sp)
8000653c:	00812c23          	sw	s0,24(sp)
80006540:	02010413          	addi	s0,sp,32
80006544:	fea42623          	sw	a0,-20(s0)
80006548:	feb42423          	sw	a1,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:220
    vTaskEnterCritical();
8000654c:	955fc0ef          	jal	ra,80002ea0 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:221
    if(type == THERMAL){
80006550:	fec42703          	lw	a4,-20(s0)
80006554:	404007b7          	lui	a5,0x40400
80006558:	00f71a63          	bne	a4,a5,8000656c <API_PushSendQueue+0x38>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:222
        API_PrioritySend(type, slot);
8000655c:	fe842583          	lw	a1,-24(s0)
80006560:	fec42503          	lw	a0,-20(s0)
80006564:	094000ef          	jal	ra,800065f8 <API_PrioritySend>
80006568:	0780006f          	j	800065e0 <API_PushSendQueue+0xac>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:224
    } else {
        SendingQueue[SendingQueue_front] = type | slot;
8000656c:	800227b7          	lui	a5,0x80022
80006570:	6007a683          	lw	a3,1536(a5) # 80022600 <__stack_top+0xfffdbe90>
80006574:	fec42703          	lw	a4,-20(s0)
80006578:	fe842783          	lw	a5,-24(s0)
8000657c:	00f76733          	or	a4,a4,a5
80006580:	800227b7          	lui	a5,0x80022
80006584:	00269693          	slli	a3,a3,0x2
80006588:	38878793          	addi	a5,a5,904 # 80022388 <__stack_top+0xfffdbc18>
8000658c:	00f687b3          	add	a5,a3,a5
80006590:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:225
        printsv("SendingQueue_front: ", SendingQueue_front);
80006594:	800227b7          	lui	a5,0x80022
80006598:	6007a783          	lw	a5,1536(a5) # 80022600 <__stack_top+0xfffdbe90>
8000659c:	00078593          	mv	a1,a5
800065a0:	800097b7          	lui	a5,0x80009
800065a4:	86878513          	addi	a0,a5,-1944 # 80008868 <__stack_top+0xfffc20f8>
800065a8:	b31ff0ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:226
        if(SendingQueue_front == (PIPE_SIZE*2)-1){
800065ac:	800227b7          	lui	a5,0x80022
800065b0:	6007a703          	lw	a4,1536(a5) # 80022600 <__stack_top+0xfffdbe90>
800065b4:	00700793          	li	a5,7
800065b8:	00f71863          	bne	a4,a5,800065c8 <API_PushSendQueue+0x94>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:227
            SendingQueue_front = 0;
800065bc:	800227b7          	lui	a5,0x80022
800065c0:	6007a023          	sw	zero,1536(a5) # 80022600 <__stack_top+0xfffdbe90>
800065c4:	0180006f          	j	800065dc <API_PushSendQueue+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:229
        } else {
            SendingQueue_front++;
800065c8:	800227b7          	lui	a5,0x80022
800065cc:	6007a783          	lw	a5,1536(a5) # 80022600 <__stack_top+0xfffdbe90>
800065d0:	00178713          	addi	a4,a5,1
800065d4:	800227b7          	lui	a5,0x80022
800065d8:	60e7a023          	sw	a4,1536(a5) # 80022600 <__stack_top+0xfffdbe90>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:231
        }
        API_Try2Send();
800065dc:	1a0000ef          	jal	ra,8000677c <API_Try2Send>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:233
    }
    vTaskExitCritical();
800065e0:	8fdfc0ef          	jal	ra,80002edc <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:234
    return;
800065e4:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:235
}
800065e8:	01c12083          	lw	ra,28(sp)
800065ec:	01812403          	lw	s0,24(sp)
800065f0:	02010113          	addi	sp,sp,32
800065f4:	00008067          	ret

800065f8 <API_PrioritySend>:
API_PrioritySend():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:238


void API_PrioritySend(unsigned int type, unsigned int slot){
800065f8:	fb010113          	addi	sp,sp,-80
800065fc:	04112623          	sw	ra,76(sp)
80006600:	04812423          	sw	s0,72(sp)
80006604:	05010413          	addi	s0,sp,80
80006608:	faa42e23          	sw	a0,-68(s0)
8000660c:	fab42c23          	sw	a1,-72(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:240
    unsigned int auxQ[PIPE_SIZE*2];
    unsigned int aux, i = 0;
80006610:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:242 (discriminator 1)
    do{
        aux = API_PopSendQueue();
80006614:	0c8000ef          	jal	ra,800066dc <API_PopSendQueue>
80006618:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:243 (discriminator 1)
        auxQ[i] = aux;
8000661c:	fec42783          	lw	a5,-20(s0)
80006620:	00279793          	slli	a5,a5,0x2
80006624:	ff040713          	addi	a4,s0,-16
80006628:	00f707b3          	add	a5,a4,a5
8000662c:	fe842703          	lw	a4,-24(s0)
80006630:	fce7ac23          	sw	a4,-40(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:244 (discriminator 1)
        i++;
80006634:	fec42783          	lw	a5,-20(s0)
80006638:	00178793          	addi	a5,a5,1
8000663c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:245 (discriminator 1)
    }while(aux != EMPTY);
80006640:	fe842703          	lw	a4,-24(s0)
80006644:	303007b7          	lui	a5,0x30300
80006648:	fcf716e3          	bne	a4,a5,80006614 <API_PrioritySend+0x1c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:246
    API_PushSendQueue(type+1, slot);
8000664c:	fbc42783          	lw	a5,-68(s0)
80006650:	00178793          	addi	a5,a5,1 # 30300001 <RAM_SIZE+0x30280001>
80006654:	fb842583          	lw	a1,-72(s0)
80006658:	00078513          	mv	a0,a5
8000665c:	ed9ff0ef          	jal	ra,80006534 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:247
    i = 0;
80006660:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:249
    do{
        aux = auxQ[i];
80006664:	fec42783          	lw	a5,-20(s0)
80006668:	00279793          	slli	a5,a5,0x2
8000666c:	ff040713          	addi	a4,s0,-16
80006670:	00f707b3          	add	a5,a4,a5
80006674:	fd87a783          	lw	a5,-40(a5)
80006678:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:250
        if(aux != EMPTY)
8000667c:	fe842703          	lw	a4,-24(s0)
80006680:	303007b7          	lui	a5,0x30300
80006684:	02f70663          	beq	a4,a5,800066b0 <API_PrioritySend+0xb8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:251
            API_PushSendQueue((aux & 0xFFFF0000), (aux & 0x0000FFFF));
80006688:	fe842703          	lw	a4,-24(s0)
8000668c:	ffff07b7          	lui	a5,0xffff0
80006690:	00f776b3          	and	a3,a4,a5
80006694:	fe842703          	lw	a4,-24(s0)
80006698:	000107b7          	lui	a5,0x10
8000669c:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
800066a0:	00f777b3          	and	a5,a4,a5
800066a4:	00078593          	mv	a1,a5
800066a8:	00068513          	mv	a0,a3
800066ac:	e89ff0ef          	jal	ra,80006534 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:252
        i++;
800066b0:	fec42783          	lw	a5,-20(s0)
800066b4:	00178793          	addi	a5,a5,1
800066b8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:253
    }while(aux != EMPTY);
800066bc:	fe842703          	lw	a4,-24(s0)
800066c0:	303007b7          	lui	a5,0x30300
800066c4:	faf710e3          	bne	a4,a5,80006664 <API_PrioritySend+0x6c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:275
    //     }
    //     vTaskExitCritical();
    // } else {
    //     prints("ERROR API_PrioritySend()\n");
    // }
    return;
800066c8:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:276
}
800066cc:	04c12083          	lw	ra,76(sp)
800066d0:	04812403          	lw	s0,72(sp)
800066d4:	05010113          	addi	sp,sp,80
800066d8:	00008067          	ret

800066dc <API_PopSendQueue>:
API_PopSendQueue():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:281


////////////////////////////////////////////////////////////
// Pushes one slot to the sending queue
unsigned int API_PopSendQueue(){
800066dc:	fe010113          	addi	sp,sp,-32
800066e0:	00112e23          	sw	ra,28(sp)
800066e4:	00812c23          	sw	s0,24(sp)
800066e8:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:283
    unsigned int element;
    vTaskEnterCritical();
800066ec:	fb4fc0ef          	jal	ra,80002ea0 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:284
    if (SendingQueue_front == SendingQueue_tail){
800066f0:	800227b7          	lui	a5,0x80022
800066f4:	6007a703          	lw	a4,1536(a5) # 80022600 <__stack_top+0xfffdbe90>
800066f8:	800227b7          	lui	a5,0x80022
800066fc:	3a87a783          	lw	a5,936(a5) # 800223a8 <__stack_top+0xfffdbc38>
80006700:	00f71863          	bne	a4,a5,80006710 <API_PopSendQueue+0x34>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:285
        vTaskExitCritical();
80006704:	fd8fc0ef          	jal	ra,80002edc <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:286
        return EMPTY;
80006708:	303007b7          	lui	a5,0x30300
8000670c:	05c0006f          	j	80006768 <API_PopSendQueue+0x8c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:288
    } else {
        element = SendingQueue[SendingQueue_tail];
80006710:	800227b7          	lui	a5,0x80022
80006714:	3a87a703          	lw	a4,936(a5) # 800223a8 <__stack_top+0xfffdbc38>
80006718:	800227b7          	lui	a5,0x80022
8000671c:	00271713          	slli	a4,a4,0x2
80006720:	38878793          	addi	a5,a5,904 # 80022388 <__stack_top+0xfffdbc18>
80006724:	00f707b3          	add	a5,a4,a5
80006728:	0007a783          	lw	a5,0(a5)
8000672c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:289
        if (SendingQueue_tail == (PIPE_SIZE*2)-1){
80006730:	800227b7          	lui	a5,0x80022
80006734:	3a87a703          	lw	a4,936(a5) # 800223a8 <__stack_top+0xfffdbc38>
80006738:	00700793          	li	a5,7
8000673c:	00f71863          	bne	a4,a5,8000674c <API_PopSendQueue+0x70>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:290
            SendingQueue_tail = 0;
80006740:	800227b7          	lui	a5,0x80022
80006744:	3a07a423          	sw	zero,936(a5) # 800223a8 <__stack_top+0xfffdbc38>
80006748:	0180006f          	j	80006760 <API_PopSendQueue+0x84>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:292
        } else {
            SendingQueue_tail++;
8000674c:	800227b7          	lui	a5,0x80022
80006750:	3a87a783          	lw	a5,936(a5) # 800223a8 <__stack_top+0xfffdbc38>
80006754:	00178713          	addi	a4,a5,1
80006758:	800227b7          	lui	a5,0x80022
8000675c:	3ae7a423          	sw	a4,936(a5) # 800223a8 <__stack_top+0xfffdbc38>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:294
        }
        vTaskExitCritical();
80006760:	f7cfc0ef          	jal	ra,80002edc <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:295
        return element;
80006764:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:297
    }
}
80006768:	00078513          	mv	a0,a5
8000676c:	01c12083          	lw	ra,28(sp)
80006770:	01812403          	lw	s0,24(sp)
80006774:	02010113          	addi	sp,sp,32
80006778:	00008067          	ret

8000677c <API_Try2Send>:
API_Try2Send():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:301

////////////////////////////////////////////////////////////
// Try to send some packet! 
void API_Try2Send(){
8000677c:	fe010113          	addi	sp,sp,-32
80006780:	00112e23          	sw	ra,28(sp)
80006784:	00812c23          	sw	s0,24(sp)
80006788:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:305
    unsigned int toSend, taskID, slot;
    // Try to send the packet to NI if it's available
    // Checks if the NI is available to transmitt something
    if (HW_get_32bit_reg(NI_TX) == NI_STATUS_OFF){
8000678c:	500007b7          	lui	a5,0x50000
80006790:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80006794:	809fa0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80006798:	00050713          	mv	a4,a0
8000679c:	0ff00793          	li	a5,255
800067a0:	1af71263          	bne	a4,a5,80006944 <API_Try2Send+0x1c8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:306
        vTaskEnterCritical();
800067a4:	efcfc0ef          	jal	ra,80002ea0 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:307
        toSend = API_PopSendQueue();
800067a8:	f35ff0ef          	jal	ra,800066dc <API_PopSendQueue>
800067ac:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:308
        if (toSend != EMPTY){
800067b0:	fec42703          	lw	a4,-20(s0)
800067b4:	303007b7          	lui	a5,0x30300
800067b8:	16f70463          	beq	a4,a5,80006920 <API_Try2Send+0x1a4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:309
            SendingSlot = toSend;
800067bc:	800227b7          	lui	a5,0x80022
800067c0:	fec42703          	lw	a4,-20(s0)
800067c4:	00e7ac23          	sw	a4,24(a5) # 80022018 <__stack_top+0xfffdb8a8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:310
            if((toSend & 0xFFFF0000) == SERVICE){
800067c8:	fec42703          	lw	a4,-20(s0)
800067cc:	ffff07b7          	lui	a5,0xffff0
800067d0:	00f77733          	and	a4,a4,a5
800067d4:	101007b7          	lui	a5,0x10100
800067d8:	04f71063          	bne	a4,a5,80006818 <API_Try2Send+0x9c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:311
                SendRaw((unsigned int)&ServicePipe[toSend & 0x0000FFFF].header);
800067dc:	fec42703          	lw	a4,-20(s0)
800067e0:	000107b7          	lui	a5,0x10
800067e4:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
800067e8:	00f77733          	and	a4,a4,a5
800067ec:	00070793          	mv	a5,a4
800067f0:	00479793          	slli	a5,a5,0x4
800067f4:	40e787b3          	sub	a5,a5,a4
800067f8:	00279793          	slli	a5,a5,0x2
800067fc:	80022737          	lui	a4,0x80022
80006800:	01c70713          	addi	a4,a4,28 # 8002201c <__stack_top+0xfffdb8ac>
80006804:	00e787b3          	add	a5,a5,a4
80006808:	00878793          	addi	a5,a5,8
8000680c:	00078513          	mv	a0,a5
80006810:	9c5ff0ef          	jal	ra,800061d4 <SendRaw>
80006814:	0f80006f          	j	8000690c <API_Try2Send+0x190>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:313
            }
            else if((toSend & 0xFFFF0000) == MESSAGE){
80006818:	fec42703          	lw	a4,-20(s0)
8000681c:	ffff07b7          	lui	a5,0xffff0
80006820:	00f77733          	and	a4,a4,a5
80006824:	202007b7          	lui	a5,0x20200
80006828:	06f71463          	bne	a4,a5,80006890 <API_Try2Send+0x114>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:314
                taskID = (toSend & 0x0000FF00) >> 8;
8000682c:	fec42783          	lw	a5,-20(s0)
80006830:	0087d793          	srli	a5,a5,0x8
80006834:	0ff7f793          	andi	a5,a5,255
80006838:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:315
                slot = toSend & 0x000000FF;
8000683c:	fec42783          	lw	a5,-20(s0)
80006840:	0ff7f793          	andi	a5,a5,255
80006844:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:327
                // }
                // if(older == 0xFFFFFFFF){
                //     print("ERROR! msg a ser enviad nao encontrada no PIPE!\n");
                // }
                //SendRaw((unsigned int)&TaskList[toSend].MessagePipe[older].header);
                SendRaw((unsigned int)&TaskList[taskID].MessagePipe[slot].header);
80006848:	fe442703          	lw	a4,-28(s0)
8000684c:	00070793          	mv	a5,a4
80006850:	00379793          	slli	a5,a5,0x3
80006854:	00e787b3          	add	a5,a5,a4
80006858:	00679793          	slli	a5,a5,0x6
8000685c:	fe842683          	lw	a3,-24(s0)
80006860:	00001737          	lui	a4,0x1
80006864:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80006868:	02e68733          	mul	a4,a3,a4
8000686c:	00e787b3          	add	a5,a5,a4
80006870:	03078713          	addi	a4,a5,48 # 20200030 <RAM_SIZE+0x20180030>
80006874:	800237b7          	lui	a5,0x80023
80006878:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
8000687c:	00f707b3          	add	a5,a4,a5
80006880:	00878793          	addi	a5,a5,8
80006884:	00078513          	mv	a0,a5
80006888:	94dff0ef          	jal	ra,800061d4 <SendRaw>
8000688c:	0800006f          	j	8000690c <API_Try2Send+0x190>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:329
            }
            else if((toSend & 0xFFFF0000) == THERMAL){
80006890:	fec42703          	lw	a4,-20(s0)
80006894:	ffff07b7          	lui	a5,0xffff0
80006898:	00f77733          	and	a4,a4,a5
8000689c:	404007b7          	lui	a5,0x40400
800068a0:	02f71263          	bne	a4,a5,800068c4 <API_Try2Send+0x148>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:330
                SendingSlot = THERMAL;
800068a4:	800227b7          	lui	a5,0x80022
800068a8:	40400737          	lui	a4,0x40400
800068ac:	00e7ac23          	sw	a4,24(a5) # 80022018 <__stack_top+0xfffdb8a8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:331
                SendRaw((unsigned int)&ThermalPacket.header);
800068b0:	800227b7          	lui	a5,0x80022
800068b4:	3b478793          	addi	a5,a5,948 # 800223b4 <__stack_top+0xfffdbc44>
800068b8:	00078513          	mv	a0,a5
800068bc:	919ff0ef          	jal	ra,800061d4 <SendRaw>
800068c0:	04c0006f          	j	8000690c <API_Try2Send+0x190>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:333
            }
            else if((toSend & 0xFFFF0000) == SYS_MESSAGE){
800068c4:	fec42703          	lw	a4,-20(s0)
800068c8:	ffff07b7          	lui	a5,0xffff0
800068cc:	00f77733          	and	a4,a4,a5
800068d0:	505007b7          	lui	a5,0x50500
800068d4:	02f71263          	bne	a4,a5,800068f8 <API_Try2Send+0x17c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:334
                SendingSlot = SYS_MESSAGE;
800068d8:	800227b7          	lui	a5,0x80022
800068dc:	50500737          	lui	a4,0x50500
800068e0:	00e7ac23          	sw	a4,24(a5) # 80022018 <__stack_top+0xfffdb8a8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:335
                SendRaw((unsigned int)&ServiceMessage.header);
800068e4:	800227b7          	lui	a5,0x80022
800068e8:	11c78793          	addi	a5,a5,284 # 8002211c <__stack_top+0xfffdb9ac>
800068ec:	00078513          	mv	a0,a5
800068f0:	8e5ff0ef          	jal	ra,800061d4 <SendRaw>
800068f4:	0180006f          	j	8000690c <API_Try2Send+0x190>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:338
            } 
            else{
                printsv("ERROR! desconhecido!! ", toSend);
800068f8:	fec42783          	lw	a5,-20(s0)
800068fc:	00078593          	mv	a1,a5
80006900:	800097b7          	lui	a5,0x80009
80006904:	88078513          	addi	a0,a5,-1920 # 80008880 <__stack_top+0xfffc2110>
80006908:	fd0ff0ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:340
            }
            prints("API_Try2Send success!\n");
8000690c:	800097b7          	lui	a5,0x80009
80006910:	89878513          	addi	a0,a5,-1896 # 80008898 <__stack_top+0xfffc2128>
80006914:	f18ff0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:341
        vTaskExitCritical();
80006918:	dc4fc0ef          	jal	ra,80002edc <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:349
            prints("API_Try2Send failed - empty SendQueue!\n");
        }
    } else {
        prints("API_Try2Send failed - NI_TX occupied!\n");
    }
    return;
8000691c:	0380006f          	j	80006954 <API_Try2Send+0x1d8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:343
            HW_set_32bit_reg(NI_TX, RESET);
80006920:	000097b7          	lui	a5,0x9
80006924:	88878593          	addi	a1,a5,-1912 # 8888 <HEAP_SIZE-0x7778>
80006928:	500007b7          	lui	a5,0x50000
8000692c:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80006930:	e64fa0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:344
            prints("API_Try2Send failed - empty SendQueue!\n");
80006934:	800097b7          	lui	a5,0x80009
80006938:	8b078513          	addi	a0,a5,-1872 # 800088b0 <__stack_top+0xfffc2140>
8000693c:	ef0ff0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:349
    return;
80006940:	0140006f          	j	80006954 <API_Try2Send+0x1d8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:347
        prints("API_Try2Send failed - NI_TX occupied!\n");
80006944:	800097b7          	lui	a5,0x80009
80006948:	8d878513          	addi	a0,a5,-1832 # 800088d8 <__stack_top+0xfffc2168>
8000694c:	ee0ff0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:349
    return;
80006950:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:350
}
80006954:	01c12083          	lw	ra,28(sp)
80006958:	01812403          	lw	s0,24(sp)
8000695c:	02010113          	addi	sp,sp,32
80006960:	00008067          	ret

80006964 <API_AckTaskAllocation>:
API_AckTaskAllocation():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:352

void API_AckTaskAllocation(unsigned int task_id, unsigned int app_id){
80006964:	fd010113          	addi	sp,sp,-48
80006968:	02112623          	sw	ra,44(sp)
8000696c:	02812423          	sw	s0,40(sp)
80006970:	03010413          	addi	s0,sp,48
80006974:	fca42e23          	sw	a0,-36(s0)
80006978:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:355
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
8000697c:	8c9fe0ef          	jal	ra,80005244 <API_GetServiceSlot>
80006980:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:356
        if(mySlot == PIPE_FULL){
80006984:	fec42703          	lw	a4,-20(s0)
80006988:	fdfe07b7          	lui	a5,0xfdfe0
8000698c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9968d>
80006990:	00f71463          	bne	a4,a5,80006998 <API_AckTaskAllocation+0x34>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:358
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80006994:	3d5000ef          	jal	ra,80007568 <API_NI_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:360
        }
    }while(mySlot == PIPE_FULL);
80006998:	fec42703          	lw	a4,-20(s0)
8000699c:	fdfe07b7          	lui	a5,0xfdfe0
800069a0:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9968d>
800069a4:	fcf70ce3          	beq	a4,a5,8000697c <API_AckTaskAllocation+0x18>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:362

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
800069a8:	800227b7          	lui	a5,0x80022
800069ac:	fec42703          	lw	a4,-20(s0)
800069b0:	01c78693          	addi	a3,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
800069b4:	00070793          	mv	a5,a4
800069b8:	00479793          	slli	a5,a5,0x4
800069bc:	40e787b3          	sub	a5,a5,a4
800069c0:	00279793          	slli	a5,a5,0x2
800069c4:	00f687b3          	add	a5,a3,a5
800069c8:	feff0737          	lui	a4,0xfeff0
800069cc:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efa978e>
800069d0:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:364

    ServicePipe[mySlot].header.header           = makeAddress(0, 0);
800069d4:	00000593          	li	a1,0
800069d8:	00000513          	li	a0,0
800069dc:	b19ff0ef          	jal	ra,800064f4 <makeAddress>
800069e0:	00050613          	mv	a2,a0
800069e4:	800227b7          	lui	a5,0x80022
800069e8:	fec42703          	lw	a4,-20(s0)
800069ec:	01c78693          	addi	a3,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
800069f0:	00070793          	mv	a5,a4
800069f4:	00479793          	slli	a5,a5,0x4
800069f8:	40e787b3          	sub	a5,a5,a4
800069fc:	00279793          	slli	a5,a5,0x2
80006a00:	00f687b3          	add	a5,a3,a5
80006a04:	00c7a423          	sw	a2,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:365
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80006a08:	800227b7          	lui	a5,0x80022
80006a0c:	fec42703          	lw	a4,-20(s0)
80006a10:	01c78693          	addi	a3,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
80006a14:	00070793          	mv	a5,a4
80006a18:	00479793          	slli	a5,a5,0x4
80006a1c:	40e787b3          	sub	a5,a5,a4
80006a20:	00279793          	slli	a5,a5,0x2
80006a24:	00f687b3          	add	a5,a3,a5
80006a28:	00b00713          	li	a4,11
80006a2c:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:366
    ServicePipe[mySlot].header.service          = TASK_ALLOCATION_SUCCESS;
80006a30:	800227b7          	lui	a5,0x80022
80006a34:	fec42703          	lw	a4,-20(s0)
80006a38:	01c78693          	addi	a3,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
80006a3c:	00070793          	mv	a5,a4
80006a40:	00479793          	slli	a5,a5,0x4
80006a44:	40e787b3          	sub	a5,a5,a4
80006a48:	00279793          	slli	a5,a5,0x2
80006a4c:	00f687b3          	add	a5,a3,a5
80006a50:	03500713          	li	a4,53
80006a54:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:367
    ServicePipe[mySlot].header.task_id          = task_id;
80006a58:	800227b7          	lui	a5,0x80022
80006a5c:	fec42703          	lw	a4,-20(s0)
80006a60:	01c78693          	addi	a3,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
80006a64:	00070793          	mv	a5,a4
80006a68:	00479793          	slli	a5,a5,0x4
80006a6c:	40e787b3          	sub	a5,a5,a4
80006a70:	00279793          	slli	a5,a5,0x2
80006a74:	00f687b3          	add	a5,a3,a5
80006a78:	fdc42703          	lw	a4,-36(s0)
80006a7c:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:368
    ServicePipe[mySlot].header.task_app_id      = app_id;
80006a80:	800227b7          	lui	a5,0x80022
80006a84:	fec42703          	lw	a4,-20(s0)
80006a88:	01c78693          	addi	a3,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
80006a8c:	00070793          	mv	a5,a4
80006a90:	00479793          	slli	a5,a5,0x4
80006a94:	40e787b3          	sub	a5,a5,a4
80006a98:	00279793          	slli	a5,a5,0x2
80006a9c:	00f687b3          	add	a5,a3,a5
80006aa0:	fd842703          	lw	a4,-40(s0)
80006aa4:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:370

    API_PushSendQueue(SERVICE, mySlot);
80006aa8:	fec42583          	lw	a1,-20(s0)
80006aac:	10100537          	lui	a0,0x10100
80006ab0:	a85ff0ef          	jal	ra,80006534 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:371
    return;    
80006ab4:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:372
}
80006ab8:	02c12083          	lw	ra,44(sp)
80006abc:	02812403          	lw	s0,40(sp)
80006ac0:	03010113          	addi	sp,sp,48
80006ac4:	00008067          	ret

80006ac8 <API_SendMessage>:
API_SendMessage():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:374

void API_SendMessage(unsigned int addr, unsigned int taskID){
80006ac8:	fc010113          	addi	sp,sp,-64
80006acc:	02112e23          	sw	ra,60(sp)
80006ad0:	02812c23          	sw	s0,56(sp)
80006ad4:	04010413          	addi	s0,sp,64
80006ad8:	fca42623          	sw	a0,-52(s0)
80006adc:	fcb42423          	sw	a1,-56(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:379
    unsigned int mySlot, slot, taskSlot;
    unsigned int i;
    Message *theMessage;
    do{
        mySlot = API_GetMessageSlot();
80006ae0:	d64fe0ef          	jal	ra,80005044 <API_GetMessageSlot>
80006ae4:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:380
        if(mySlot == PIPE_FULL){
80006ae8:	fe842703          	lw	a4,-24(s0)
80006aec:	fdfe07b7          	lui	a5,0xfdfe0
80006af0:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9968d>
80006af4:	00f71463          	bne	a4,a5,80006afc <API_SendMessage+0x34>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:382
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80006af8:	271000ef          	jal	ra,80007568 <API_NI_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:384
        }
    }while(mySlot == PIPE_FULL);
80006afc:	fe842703          	lw	a4,-24(s0)
80006b00:	fdfe07b7          	lui	a5,0xfdfe0
80006b04:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9968d>
80006b08:	fcf70ce3          	beq	a4,a5,80006ae0 <API_SendMessage+0x18>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:386
    
    theMessage = addr;
80006b0c:	fcc42783          	lw	a5,-52(s0)
80006b10:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:388

    taskSlot = (mySlot & 0x0000FF00) >> 8;//API_GetCurrentTaskSlot();
80006b14:	fe842783          	lw	a5,-24(s0)
80006b18:	0087d793          	srli	a5,a5,0x8
80006b1c:	0ff7f793          	andi	a5,a5,255
80006b20:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:389
    slot = mySlot & 0x000000FF;
80006b24:	fe842783          	lw	a5,-24(s0)
80006b28:	0ff7f793          	andi	a5,a5,255
80006b2c:	fcf42e23          	sw	a5,-36(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:390
    printsv("taskSlot: ", taskSlot);
80006b30:	fe042783          	lw	a5,-32(s0)
80006b34:	00078593          	mv	a1,a5
80006b38:	800097b7          	lui	a5,0x80009
80006b3c:	90078513          	addi	a0,a5,-1792 # 80008900 <__stack_top+0xfffc2190>
80006b40:	d98ff0ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:391
    printsvsv("Adding a msg to task ", taskID, " in the PIPE slot ", mySlot);
80006b44:	fc842703          	lw	a4,-56(s0)
80006b48:	fe842783          	lw	a5,-24(s0)
80006b4c:	00078693          	mv	a3,a5
80006b50:	800097b7          	lui	a5,0x80009
80006b54:	90c78613          	addi	a2,a5,-1780 # 8000890c <__stack_top+0xfffc219c>
80006b58:	00070593          	mv	a1,a4
80006b5c:	800097b7          	lui	a5,0x80009
80006b60:	92078513          	addi	a0,a5,-1760 # 80008920 <__stack_top+0xfffc21b0>
80006b64:	dbcff0ef          	jal	ra,80006120 <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:392
    printsv("from app: ", TaskList[taskSlot].AppID);
80006b68:	800237b7          	lui	a5,0x80023
80006b6c:	fe042683          	lw	a3,-32(s0)
80006b70:	e4478713          	addi	a4,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80006b74:	000017b7          	lui	a5,0x1
80006b78:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80006b7c:	02f687b3          	mul	a5,a3,a5
80006b80:	00f707b3          	add	a5,a4,a5
80006b84:	0147a783          	lw	a5,20(a5)
80006b88:	00078593          	mv	a1,a5
80006b8c:	800097b7          	lui	a5,0x80009
80006b90:	93878513          	addi	a0,a5,-1736 # 80008938 <__stack_top+0xfffc21c8>
80006b94:	d44ff0ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:395
    //MessagePipe[mySlot].holder = taskSlot;

    TaskList[taskSlot].MessagePipe[slot].header.header           = TaskList[taskSlot].TasksMap[taskID];
80006b98:	80023737          	lui	a4,0x80023
80006b9c:	fe042683          	lw	a3,-32(s0)
80006ba0:	26100793          	li	a5,609
80006ba4:	02f686b3          	mul	a3,a3,a5
80006ba8:	fc842783          	lw	a5,-56(s0)
80006bac:	00f687b3          	add	a5,a3,a5
80006bb0:	25478793          	addi	a5,a5,596
80006bb4:	e4470713          	addi	a4,a4,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80006bb8:	00279793          	slli	a5,a5,0x2
80006bbc:	00f707b3          	add	a5,a4,a5
80006bc0:	00c7a683          	lw	a3,12(a5)
80006bc4:	800237b7          	lui	a5,0x80023
80006bc8:	fdc42703          	lw	a4,-36(s0)
80006bcc:	fe042583          	lw	a1,-32(s0)
80006bd0:	e4478613          	addi	a2,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80006bd4:	00070793          	mv	a5,a4
80006bd8:	00379793          	slli	a5,a5,0x3
80006bdc:	00e787b3          	add	a5,a5,a4
80006be0:	00679793          	slli	a5,a5,0x6
80006be4:	00001737          	lui	a4,0x1
80006be8:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80006bec:	02e58733          	mul	a4,a1,a4
80006bf0:	00e787b3          	add	a5,a5,a4
80006bf4:	00f607b3          	add	a5,a2,a5
80006bf8:	02d7ac23          	sw	a3,56(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:396
    TaskList[taskSlot].MessagePipe[slot].header.payload_size     = PKT_SERVICE_SIZE + theMessage->length + 1;
80006bfc:	fe442783          	lw	a5,-28(s0)
80006c00:	0007a783          	lw	a5,0(a5)
80006c04:	00c78693          	addi	a3,a5,12
80006c08:	800237b7          	lui	a5,0x80023
80006c0c:	fdc42703          	lw	a4,-36(s0)
80006c10:	fe042583          	lw	a1,-32(s0)
80006c14:	e4478613          	addi	a2,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80006c18:	00070793          	mv	a5,a4
80006c1c:	00379793          	slli	a5,a5,0x3
80006c20:	00e787b3          	add	a5,a5,a4
80006c24:	00679793          	slli	a5,a5,0x6
80006c28:	00001737          	lui	a4,0x1
80006c2c:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80006c30:	02e58733          	mul	a4,a1,a4
80006c34:	00e787b3          	add	a5,a5,a4
80006c38:	00f607b3          	add	a5,a2,a5
80006c3c:	02d7ae23          	sw	a3,60(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:397
    TaskList[taskSlot].MessagePipe[slot].header.service          = MESSAGE_DELIVERY;
80006c40:	800237b7          	lui	a5,0x80023
80006c44:	fdc42703          	lw	a4,-36(s0)
80006c48:	fe042603          	lw	a2,-32(s0)
80006c4c:	e4478693          	addi	a3,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80006c50:	00070793          	mv	a5,a4
80006c54:	00379793          	slli	a5,a5,0x3
80006c58:	00e787b3          	add	a5,a5,a4
80006c5c:	00679793          	slli	a5,a5,0x6
80006c60:	00001737          	lui	a4,0x1
80006c64:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80006c68:	02e60733          	mul	a4,a2,a4
80006c6c:	00e787b3          	add	a5,a5,a4
80006c70:	00f687b3          	add	a5,a3,a5
80006c74:	02000713          	li	a4,32
80006c78:	04e7a023          	sw	a4,64(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:398
    TaskList[taskSlot].MessagePipe[slot].header.application_id   = TaskList[taskSlot].AppID;
80006c7c:	800237b7          	lui	a5,0x80023
80006c80:	fe042683          	lw	a3,-32(s0)
80006c84:	e4478713          	addi	a4,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80006c88:	000017b7          	lui	a5,0x1
80006c8c:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80006c90:	02f687b3          	mul	a5,a3,a5
80006c94:	00f707b3          	add	a5,a4,a5
80006c98:	0147a683          	lw	a3,20(a5)
80006c9c:	800237b7          	lui	a5,0x80023
80006ca0:	fdc42703          	lw	a4,-36(s0)
80006ca4:	fe042583          	lw	a1,-32(s0)
80006ca8:	e4478613          	addi	a2,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80006cac:	00070793          	mv	a5,a4
80006cb0:	00379793          	slli	a5,a5,0x3
80006cb4:	00e787b3          	add	a5,a5,a4
80006cb8:	00679793          	slli	a5,a5,0x6
80006cbc:	00001737          	lui	a4,0x1
80006cc0:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80006cc4:	02e58733          	mul	a4,a1,a4
80006cc8:	00e787b3          	add	a5,a5,a4
80006ccc:	00f607b3          	add	a5,a2,a5
80006cd0:	04d7a223          	sw	a3,68(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:399
    TaskList[taskSlot].MessagePipe[slot].header.producer_task    = TaskList[taskSlot].TaskID;
80006cd4:	800237b7          	lui	a5,0x80023
80006cd8:	fe042683          	lw	a3,-32(s0)
80006cdc:	00001737          	lui	a4,0x1
80006ce0:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80006ce4:	02e68733          	mul	a4,a3,a4
80006ce8:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80006cec:	00f707b3          	add	a5,a4,a5
80006cf0:	0107a683          	lw	a3,16(a5)
80006cf4:	800237b7          	lui	a5,0x80023
80006cf8:	fdc42703          	lw	a4,-36(s0)
80006cfc:	fe042583          	lw	a1,-32(s0)
80006d00:	e4478613          	addi	a2,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80006d04:	00070793          	mv	a5,a4
80006d08:	00379793          	slli	a5,a5,0x3
80006d0c:	00e787b3          	add	a5,a5,a4
80006d10:	00679793          	slli	a5,a5,0x6
80006d14:	00001737          	lui	a4,0x1
80006d18:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80006d1c:	02e58733          	mul	a4,a1,a4
80006d20:	00e787b3          	add	a5,a5,a4
80006d24:	00f607b3          	add	a5,a2,a5
80006d28:	04d7a423          	sw	a3,72(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:400
    TaskList[taskSlot].MessagePipe[slot].header.destination_task = taskID;
80006d2c:	800237b7          	lui	a5,0x80023
80006d30:	fdc42703          	lw	a4,-36(s0)
80006d34:	fe042603          	lw	a2,-32(s0)
80006d38:	e4478693          	addi	a3,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80006d3c:	00070793          	mv	a5,a4
80006d40:	00379793          	slli	a5,a5,0x3
80006d44:	00e787b3          	add	a5,a5,a4
80006d48:	00679793          	slli	a5,a5,0x6
80006d4c:	00001737          	lui	a4,0x1
80006d50:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80006d54:	02e60733          	mul	a4,a2,a4
80006d58:	00e787b3          	add	a5,a5,a4
80006d5c:	00f687b3          	add	a5,a3,a5
80006d60:	fc842703          	lw	a4,-56(s0)
80006d64:	04e7a623          	sw	a4,76(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:401
    TaskList[taskSlot].MessagePipe[slot].msg.length              = theMessage->length;
80006d68:	fe442783          	lw	a5,-28(s0)
80006d6c:	0007a683          	lw	a3,0(a5)
80006d70:	800237b7          	lui	a5,0x80023
80006d74:	fdc42703          	lw	a4,-36(s0)
80006d78:	fe042583          	lw	a1,-32(s0)
80006d7c:	e4478613          	addi	a2,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80006d80:	00070793          	mv	a5,a4
80006d84:	00379793          	slli	a5,a5,0x3
80006d88:	00e787b3          	add	a5,a5,a4
80006d8c:	00679793          	slli	a5,a5,0x6
80006d90:	00001737          	lui	a4,0x1
80006d94:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80006d98:	02e58733          	mul	a4,a1,a4
80006d9c:	00e787b3          	add	a5,a5,a4
80006da0:	00f607b3          	add	a5,a2,a5
80006da4:	06d7a623          	sw	a3,108(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:402
    for (i = 0; i < theMessage->length; i++){
80006da8:	fe042623          	sw	zero,-20(s0)
80006dac:	0680006f          	j	80006e14 <API_SendMessage+0x34c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:403 (discriminator 3)
        TaskList[taskSlot].MessagePipe[slot].msg.msg[i]          = theMessage->msg[i];
80006db0:	fe442703          	lw	a4,-28(s0)
80006db4:	fec42783          	lw	a5,-20(s0)
80006db8:	00279793          	slli	a5,a5,0x2
80006dbc:	00f707b3          	add	a5,a4,a5
80006dc0:	0047a683          	lw	a3,4(a5)
80006dc4:	80023637          	lui	a2,0x80023
80006dc8:	fdc42703          	lw	a4,-36(s0)
80006dcc:	fe042583          	lw	a1,-32(s0)
80006dd0:	00070793          	mv	a5,a4
80006dd4:	00379793          	slli	a5,a5,0x3
80006dd8:	00e787b3          	add	a5,a5,a4
80006ddc:	00479793          	slli	a5,a5,0x4
80006de0:	26100713          	li	a4,609
80006de4:	02e58733          	mul	a4,a1,a4
80006de8:	00e78733          	add	a4,a5,a4
80006dec:	fec42783          	lw	a5,-20(s0)
80006df0:	00f707b3          	add	a5,a4,a5
80006df4:	01878793          	addi	a5,a5,24
80006df8:	e4460713          	addi	a4,a2,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80006dfc:	00279793          	slli	a5,a5,0x2
80006e00:	00f707b3          	add	a5,a4,a5
80006e04:	00d7a823          	sw	a3,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:402 (discriminator 3)
    for (i = 0; i < theMessage->length; i++){
80006e08:	fec42783          	lw	a5,-20(s0)
80006e0c:	00178793          	addi	a5,a5,1
80006e10:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:402 (discriminator 1)
80006e14:	fe442783          	lw	a5,-28(s0)
80006e18:	0007a783          	lw	a5,0(a5)
80006e1c:	fec42703          	lw	a4,-20(s0)
80006e20:	f8f768e3          	bltu	a4,a5,80006db0 <API_SendMessage+0x2e8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:406
    }
    
    if (TaskList[taskSlot].PendingReq[taskID] == TRUE){
80006e24:	800237b7          	lui	a5,0x80023
80006e28:	fe042683          	lw	a3,-32(s0)
80006e2c:	26100713          	li	a4,609
80006e30:	02e686b3          	mul	a3,a3,a4
80006e34:	fc842703          	lw	a4,-56(s0)
80006e38:	00e68733          	add	a4,a3,a4
80006e3c:	24c70713          	addi	a4,a4,588
80006e40:	00271713          	slli	a4,a4,0x2
80006e44:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80006e48:	00f707b3          	add	a5,a4,a5
80006e4c:	0007a703          	lw	a4,0(a5)
80006e50:	00100793          	li	a5,1
80006e54:	04f71663          	bne	a4,a5,80006ea0 <API_SendMessage+0x3d8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:407
        prints(">>>>>Achei aqui no pending!\n");
80006e58:	800097b7          	lui	a5,0x80009
80006e5c:	94478513          	addi	a0,a5,-1724 # 80008944 <__stack_top+0xfffc21d4>
80006e60:	9ccff0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:408
        TaskList[taskSlot].PendingReq[taskID] = FALSE;
80006e64:	800237b7          	lui	a5,0x80023
80006e68:	fe042683          	lw	a3,-32(s0)
80006e6c:	26100713          	li	a4,609
80006e70:	02e686b3          	mul	a3,a3,a4
80006e74:	fc842703          	lw	a4,-56(s0)
80006e78:	00e68733          	add	a4,a3,a4
80006e7c:	24c70713          	addi	a4,a4,588
80006e80:	00271713          	slli	a4,a4,0x2
80006e84:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80006e88:	00f707b3          	add	a5,a4,a5
80006e8c:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:409
        API_PushSendQueue(MESSAGE, mySlot);
80006e90:	fe842583          	lw	a1,-24(s0)
80006e94:	20200537          	lui	a0,0x20200
80006e98:	e9cff0ef          	jal	ra,80006534 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:411
    }
    return;
80006e9c:	00000013          	nop
80006ea0:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:412
}
80006ea4:	03c12083          	lw	ra,60(sp)
80006ea8:	03812403          	lw	s0,56(sp)
80006eac:	04010113          	addi	sp,sp,64
80006eb0:	00008067          	ret

80006eb4 <API_SendFinishTask>:
API_SendFinishTask():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:414

void API_SendFinishTask(unsigned int task_id, unsigned int app_id){
80006eb4:	fd010113          	addi	sp,sp,-48
80006eb8:	02112623          	sw	ra,44(sp)
80006ebc:	02812423          	sw	s0,40(sp)
80006ec0:	03010413          	addi	s0,sp,48
80006ec4:	fca42e23          	sw	a0,-36(s0)
80006ec8:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:417
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80006ecc:	b78fe0ef          	jal	ra,80005244 <API_GetServiceSlot>
80006ed0:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:418
        if(mySlot == PIPE_FULL){
80006ed4:	fec42703          	lw	a4,-20(s0)
80006ed8:	fdfe07b7          	lui	a5,0xfdfe0
80006edc:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9968d>
80006ee0:	00f71463          	bne	a4,a5,80006ee8 <API_SendFinishTask+0x34>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:420
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80006ee4:	684000ef          	jal	ra,80007568 <API_NI_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:422
        }
    }while(mySlot == PIPE_FULL);
80006ee8:	fec42703          	lw	a4,-20(s0)
80006eec:	fdfe07b7          	lui	a5,0xfdfe0
80006ef0:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9968d>
80006ef4:	fcf70ce3          	beq	a4,a5,80006ecc <API_SendFinishTask+0x18>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:424

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80006ef8:	800227b7          	lui	a5,0x80022
80006efc:	fec42703          	lw	a4,-20(s0)
80006f00:	01c78693          	addi	a3,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
80006f04:	00070793          	mv	a5,a4
80006f08:	00479793          	slli	a5,a5,0x4
80006f0c:	40e787b3          	sub	a5,a5,a4
80006f10:	00279793          	slli	a5,a5,0x2
80006f14:	00f687b3          	add	a5,a3,a5
80006f18:	feff0737          	lui	a4,0xfeff0
80006f1c:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efa978e>
80006f20:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:426

    ServicePipe[mySlot].header.header           = makeAddress(0, 0);
80006f24:	00000593          	li	a1,0
80006f28:	00000513          	li	a0,0
80006f2c:	dc8ff0ef          	jal	ra,800064f4 <makeAddress>
80006f30:	00050613          	mv	a2,a0
80006f34:	800227b7          	lui	a5,0x80022
80006f38:	fec42703          	lw	a4,-20(s0)
80006f3c:	01c78693          	addi	a3,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
80006f40:	00070793          	mv	a5,a4
80006f44:	00479793          	slli	a5,a5,0x4
80006f48:	40e787b3          	sub	a5,a5,a4
80006f4c:	00279793          	slli	a5,a5,0x2
80006f50:	00f687b3          	add	a5,a3,a5
80006f54:	00c7a423          	sw	a2,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:427
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80006f58:	800227b7          	lui	a5,0x80022
80006f5c:	fec42703          	lw	a4,-20(s0)
80006f60:	01c78693          	addi	a3,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
80006f64:	00070793          	mv	a5,a4
80006f68:	00479793          	slli	a5,a5,0x4
80006f6c:	40e787b3          	sub	a5,a5,a4
80006f70:	00279793          	slli	a5,a5,0x2
80006f74:	00f687b3          	add	a5,a3,a5
80006f78:	00b00713          	li	a4,11
80006f7c:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:428
    ServicePipe[mySlot].header.service          = TASK_FINISH;
80006f80:	800227b7          	lui	a5,0x80022
80006f84:	fec42703          	lw	a4,-20(s0)
80006f88:	01c78693          	addi	a3,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
80006f8c:	00070793          	mv	a5,a4
80006f90:	00479793          	slli	a5,a5,0x4
80006f94:	40e787b3          	sub	a5,a5,a4
80006f98:	00279793          	slli	a5,a5,0x2
80006f9c:	00f687b3          	add	a5,a3,a5
80006fa0:	50000713          	li	a4,1280
80006fa4:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:429
    ServicePipe[mySlot].header.task_id          = task_id;
80006fa8:	800227b7          	lui	a5,0x80022
80006fac:	fec42703          	lw	a4,-20(s0)
80006fb0:	01c78693          	addi	a3,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
80006fb4:	00070793          	mv	a5,a4
80006fb8:	00479793          	slli	a5,a5,0x4
80006fbc:	40e787b3          	sub	a5,a5,a4
80006fc0:	00279793          	slli	a5,a5,0x2
80006fc4:	00f687b3          	add	a5,a3,a5
80006fc8:	fdc42703          	lw	a4,-36(s0)
80006fcc:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:430
    ServicePipe[mySlot].header.task_app_id      = app_id;
80006fd0:	800227b7          	lui	a5,0x80022
80006fd4:	fec42703          	lw	a4,-20(s0)
80006fd8:	01c78693          	addi	a3,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
80006fdc:	00070793          	mv	a5,a4
80006fe0:	00479793          	slli	a5,a5,0x4
80006fe4:	40e787b3          	sub	a5,a5,a4
80006fe8:	00279793          	slli	a5,a5,0x2
80006fec:	00f687b3          	add	a5,a3,a5
80006ff0:	fd842703          	lw	a4,-40(s0)
80006ff4:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:431
    ServicePipe[mySlot].header.task_dest_addr   = ProcessorAddr;
80006ff8:	800267b7          	lui	a5,0x80026
80006ffc:	76c7a683          	lw	a3,1900(a5) # 8002676c <__stack_top+0xfffdfffc>
80007000:	800227b7          	lui	a5,0x80022
80007004:	fec42703          	lw	a4,-20(s0)
80007008:	01c78613          	addi	a2,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
8000700c:	00070793          	mv	a5,a4
80007010:	00479793          	slli	a5,a5,0x4
80007014:	40e787b3          	sub	a5,a5,a4
80007018:	00279793          	slli	a5,a5,0x2
8000701c:	00f607b3          	add	a5,a2,a5
80007020:	02d7ac23          	sw	a3,56(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:432
    API_PushSendQueue(SERVICE, mySlot);
80007024:	fec42583          	lw	a1,-20(s0)
80007028:	10100537          	lui	a0,0x10100
8000702c:	d08ff0ef          	jal	ra,80006534 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:433
    return;    
80007030:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:434
}
80007034:	02c12083          	lw	ra,44(sp)
80007038:	02812403          	lw	s0,40(sp)
8000703c:	03010113          	addi	sp,sp,48
80007040:	00008067          	ret

80007044 <API_SendMessageReq>:
API_SendMessageReq():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:436

void API_SendMessageReq(unsigned int addr, unsigned int taskID){
80007044:	fd010113          	addi	sp,sp,-48
80007048:	02112623          	sw	ra,44(sp)
8000704c:	02812423          	sw	s0,40(sp)
80007050:	03010413          	addi	s0,sp,48
80007054:	fca42e23          	sw	a0,-36(s0)
80007058:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:439
    unsigned int taskSlot;
    unsigned int mySlot;
    volatile unsigned int idle = 0;
8000705c:	fe042223          	sw	zero,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:441
    // Update task info
    taskSlot = API_GetCurrentTaskSlot();
80007060:	e9cfd0ef          	jal	ra,800046fc <API_GetCurrentTaskSlot>
80007064:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:442
    TaskList[taskSlot].waitingMsg = TRUE;
80007068:	800237b7          	lui	a5,0x80023
8000706c:	fec42683          	lw	a3,-20(s0)
80007070:	e4478713          	addi	a4,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80007074:	000017b7          	lui	a5,0x1
80007078:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
8000707c:	02f687b3          	mul	a5,a3,a5
80007080:	00f707b3          	add	a5,a4,a5
80007084:	00100713          	li	a4,1
80007088:	00e7ae23          	sw	a4,28(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:443
    TaskList[taskSlot].MsgToReceive = addr;
8000708c:	800237b7          	lui	a5,0x80023
80007090:	fec42683          	lw	a3,-20(s0)
80007094:	00001737          	lui	a4,0x1
80007098:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
8000709c:	02e68733          	mul	a4,a3,a4
800070a0:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
800070a4:	00f707b3          	add	a5,a4,a5
800070a8:	fdc42703          	lw	a4,-36(s0)
800070ac:	02e7a023          	sw	a4,32(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:448
    //printsv("API_SendMessageReq addr: ", addr);

    // Sends the message request
    do{
        mySlot = API_GetServiceSlot();
800070b0:	994fe0ef          	jal	ra,80005244 <API_GetServiceSlot>
800070b4:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:449
        if(mySlot == PIPE_FULL){
800070b8:	fe842703          	lw	a4,-24(s0)
800070bc:	fdfe07b7          	lui	a5,0xfdfe0
800070c0:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9968d>
800070c4:	00f71463          	bne	a4,a5,800070cc <API_SendMessageReq+0x88>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:451
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
800070c8:	4a0000ef          	jal	ra,80007568 <API_NI_Handler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:453
        }
    }while(mySlot == PIPE_FULL);
800070cc:	fe842703          	lw	a4,-24(s0)
800070d0:	fdfe07b7          	lui	a5,0xfdfe0
800070d4:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9968d>
800070d8:	fcf70ce3          	beq	a4,a5,800070b0 <API_SendMessageReq+0x6c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:455

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
800070dc:	800227b7          	lui	a5,0x80022
800070e0:	fe842703          	lw	a4,-24(s0)
800070e4:	01c78693          	addi	a3,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
800070e8:	00070793          	mv	a5,a4
800070ec:	00479793          	slli	a5,a5,0x4
800070f0:	40e787b3          	sub	a5,a5,a4
800070f4:	00279793          	slli	a5,a5,0x2
800070f8:	00f687b3          	add	a5,a3,a5
800070fc:	feff0737          	lui	a4,0xfeff0
80007100:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efa978e>
80007104:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:457

    ServicePipe[mySlot].header.header           = TaskList[taskSlot].TasksMap[taskID];
80007108:	80023737          	lui	a4,0x80023
8000710c:	fec42683          	lw	a3,-20(s0)
80007110:	26100793          	li	a5,609
80007114:	02f686b3          	mul	a3,a3,a5
80007118:	fd842783          	lw	a5,-40(s0)
8000711c:	00f687b3          	add	a5,a3,a5
80007120:	25478793          	addi	a5,a5,596
80007124:	e4470713          	addi	a4,a4,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80007128:	00279793          	slli	a5,a5,0x2
8000712c:	00f707b3          	add	a5,a4,a5
80007130:	00c7a683          	lw	a3,12(a5)
80007134:	800227b7          	lui	a5,0x80022
80007138:	fe842703          	lw	a4,-24(s0)
8000713c:	01c78613          	addi	a2,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
80007140:	00070793          	mv	a5,a4
80007144:	00479793          	slli	a5,a5,0x4
80007148:	40e787b3          	sub	a5,a5,a4
8000714c:	00279793          	slli	a5,a5,0x2
80007150:	00f607b3          	add	a5,a2,a5
80007154:	00d7a423          	sw	a3,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:458
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80007158:	800227b7          	lui	a5,0x80022
8000715c:	fe842703          	lw	a4,-24(s0)
80007160:	01c78693          	addi	a3,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
80007164:	00070793          	mv	a5,a4
80007168:	00479793          	slli	a5,a5,0x4
8000716c:	40e787b3          	sub	a5,a5,a4
80007170:	00279793          	slli	a5,a5,0x2
80007174:	00f687b3          	add	a5,a3,a5
80007178:	00b00713          	li	a4,11
8000717c:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:459
    ServicePipe[mySlot].header.service          = MESSAGE_REQUEST;
80007180:	800227b7          	lui	a5,0x80022
80007184:	fe842703          	lw	a4,-24(s0)
80007188:	01c78693          	addi	a3,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
8000718c:	00070793          	mv	a5,a4
80007190:	00479793          	slli	a5,a5,0x4
80007194:	40e787b3          	sub	a5,a5,a4
80007198:	00279793          	slli	a5,a5,0x2
8000719c:	00f687b3          	add	a5,a3,a5
800071a0:	01000713          	li	a4,16
800071a4:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:460
    ServicePipe[mySlot].header.task_id          = TaskList[taskSlot].TaskID;
800071a8:	800237b7          	lui	a5,0x80023
800071ac:	fec42683          	lw	a3,-20(s0)
800071b0:	00001737          	lui	a4,0x1
800071b4:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
800071b8:	02e68733          	mul	a4,a3,a4
800071bc:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
800071c0:	00f707b3          	add	a5,a4,a5
800071c4:	0107a683          	lw	a3,16(a5)
800071c8:	800227b7          	lui	a5,0x80022
800071cc:	fe842703          	lw	a4,-24(s0)
800071d0:	01c78613          	addi	a2,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
800071d4:	00070793          	mv	a5,a4
800071d8:	00479793          	slli	a5,a5,0x4
800071dc:	40e787b3          	sub	a5,a5,a4
800071e0:	00279793          	slli	a5,a5,0x2
800071e4:	00f607b3          	add	a5,a2,a5
800071e8:	00d7aa23          	sw	a3,20(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:461
    ServicePipe[mySlot].header.task_app_id      = TaskList[taskSlot].AppID;
800071ec:	800237b7          	lui	a5,0x80023
800071f0:	fec42683          	lw	a3,-20(s0)
800071f4:	e4478713          	addi	a4,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
800071f8:	000017b7          	lui	a5,0x1
800071fc:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80007200:	02f687b3          	mul	a5,a3,a5
80007204:	00f707b3          	add	a5,a4,a5
80007208:	0147a683          	lw	a3,20(a5)
8000720c:	800227b7          	lui	a5,0x80022
80007210:	fe842703          	lw	a4,-24(s0)
80007214:	01c78613          	addi	a2,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
80007218:	00070793          	mv	a5,a4
8000721c:	00479793          	slli	a5,a5,0x4
80007220:	40e787b3          	sub	a5,a5,a4
80007224:	00279793          	slli	a5,a5,0x2
80007228:	00f607b3          	add	a5,a2,a5
8000722c:	02d7a223          	sw	a3,36(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:462
    ServicePipe[mySlot].header.producer_task_id = taskID;
80007230:	800227b7          	lui	a5,0x80022
80007234:	fe842703          	lw	a4,-24(s0)
80007238:	01c78693          	addi	a3,a5,28 # 8002201c <__stack_top+0xfffdb8ac>
8000723c:	00070793          	mv	a5,a4
80007240:	00479793          	slli	a5,a5,0x4
80007244:	40e787b3          	sub	a5,a5,a4
80007248:	00279793          	slli	a5,a5,0x2
8000724c:	00f687b3          	add	a5,a3,a5
80007250:	fd842703          	lw	a4,-40(s0)
80007254:	00e7ae23          	sw	a4,28(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:464

    prints("Esperando Mensagem!\n");
80007258:	800097b7          	lui	a5,0x80009
8000725c:	96478513          	addi	a0,a5,-1692 # 80008964 <__stack_top+0xfffc21f4>
80007260:	dcdfe0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:466

    API_PushSendQueue(SERVICE, mySlot);
80007264:	fe842583          	lw	a1,-24(s0)
80007268:	10100537          	lui	a0,0x10100
8000726c:	ac8ff0ef          	jal	ra,80006534 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:468
    
    API_setFreqScale(100);
80007270:	06400513          	li	a0,100
80007274:	ad4fe0ef          	jal	ra,80005548 <API_setFreqScale>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:470
    // Bloquear a tarefa!
    while(TaskList[taskSlot].waitingMsg == TRUE){ 
80007278:	00c0006f          	j	80007284 <API_SendMessageReq+0x240>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:477
        //     API_setFreqIdle();
        //     API_applyFreqScale();
        //     idle = 1;
        // }
        //printsv("esperando", mySlot);
        vTaskDelay(1);
8000727c:	00100513          	li	a0,1
80007280:	fe5fa0ef          	jal	ra,80002264 <vTaskDelay>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:470
    while(TaskList[taskSlot].waitingMsg == TRUE){ 
80007284:	800237b7          	lui	a5,0x80023
80007288:	fec42683          	lw	a3,-20(s0)
8000728c:	e4478713          	addi	a4,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80007290:	000017b7          	lui	a5,0x1
80007294:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80007298:	02f687b3          	mul	a5,a3,a5
8000729c:	00f707b3          	add	a5,a4,a5
800072a0:	01c7a703          	lw	a4,28(a5)
800072a4:	00100793          	li	a5,1
800072a8:	fcf70ae3          	beq	a4,a5,8000727c <API_SendMessageReq+0x238>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:482
        //mySlot++;

    }
    //vTaskSuspend(TaskList[taskSlot].TaskHandler);
    API_setFreqScale(1000);
800072ac:	3e800513          	li	a0,1000
800072b0:	a98fe0ef          	jal	ra,80005548 <API_setFreqScale>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:484

    prints("Mensagem Recebida!\n");
800072b4:	800097b7          	lui	a5,0x80009
800072b8:	97c78513          	addi	a0,a5,-1668 # 8000897c <__stack_top+0xfffc220c>
800072bc:	d71fe0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:485
    return;
800072c0:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:486
}
800072c4:	02c12083          	lw	ra,44(sp)
800072c8:	02812403          	lw	s0,40(sp)
800072cc:	03010113          	addi	sp,sp,48
800072d0:	00008067          	ret

800072d4 <API_CheckMessagePipe>:
API_CheckMessagePipe():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:488

unsigned int API_CheckMessagePipe(unsigned int requester_task_id, unsigned int task_app_id){
800072d4:	fd010113          	addi	sp,sp,-48
800072d8:	02812623          	sw	s0,44(sp)
800072dc:	03010413          	addi	s0,sp,48
800072e0:	fca42e23          	sw	a0,-36(s0)
800072e4:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:490
    unsigned int i,j;
    unsigned int sel = ERRO;
800072e8:	fff00793          	li	a5,-1
800072ec:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:491
    unsigned int smallID = 268435455;
800072f0:	100007b7          	lui	a5,0x10000
800072f4:	fff78793          	addi	a5,a5,-1 # fffffff <RAM_SIZE+0xff7ffff>
800072f8:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:493
    //vTaskEnterCritical();
    for(i = 0; i < NUM_MAX_TASKS; i++){
800072fc:	fe042623          	sw	zero,-20(s0)
80007300:	18c0006f          	j	8000748c <API_CheckMessagePipe+0x1b8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:494
        if(TaskList[i].status != TASK_SLOT_EMPTY && TaskList[i].AppID == task_app_id){
80007304:	800237b7          	lui	a5,0x80023
80007308:	fec42683          	lw	a3,-20(s0)
8000730c:	00001737          	lui	a4,0x1
80007310:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80007314:	02e68733          	mul	a4,a3,a4
80007318:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
8000731c:	00f707b3          	add	a5,a4,a5
80007320:	0007a783          	lw	a5,0(a5)
80007324:	14078e63          	beqz	a5,80007480 <API_CheckMessagePipe+0x1ac>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:494 (discriminator 1)
80007328:	800237b7          	lui	a5,0x80023
8000732c:	fec42683          	lw	a3,-20(s0)
80007330:	e4478713          	addi	a4,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80007334:	000017b7          	lui	a5,0x1
80007338:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
8000733c:	02f687b3          	mul	a5,a3,a5
80007340:	00f707b3          	add	a5,a4,a5
80007344:	0147a783          	lw	a5,20(a5)
80007348:	fd842703          	lw	a4,-40(s0)
8000734c:	12f71a63          	bne	a4,a5,80007480 <API_CheckMessagePipe+0x1ac>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:495
            for(j = 0; j < PIPE_SIZE; j++){
80007350:	fe042423          	sw	zero,-24(s0)
80007354:	1200006f          	j	80007474 <API_CheckMessagePipe+0x1a0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:496
                if(TaskList[i].MessagePipe[j].status == PIPE_OCCUPIED){
80007358:	800236b7          	lui	a3,0x80023
8000735c:	fe842703          	lw	a4,-24(s0)
80007360:	fec42603          	lw	a2,-20(s0)
80007364:	00070793          	mv	a5,a4
80007368:	00379793          	slli	a5,a5,0x3
8000736c:	00e787b3          	add	a5,a5,a4
80007370:	00679793          	slli	a5,a5,0x6
80007374:	00001737          	lui	a4,0x1
80007378:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
8000737c:	02e60733          	mul	a4,a2,a4
80007380:	00e78733          	add	a4,a5,a4
80007384:	e4468793          	addi	a5,a3,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80007388:	00f707b3          	add	a5,a4,a5
8000738c:	0307a703          	lw	a4,48(a5)
80007390:	00100793          	li	a5,1
80007394:	0cf71a63          	bne	a4,a5,80007468 <API_CheckMessagePipe+0x194>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:497
                    if(TaskList[i].MessagePipe[j].header.destination_task == requester_task_id){
80007398:	800237b7          	lui	a5,0x80023
8000739c:	fe842703          	lw	a4,-24(s0)
800073a0:	fec42603          	lw	a2,-20(s0)
800073a4:	e4478693          	addi	a3,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
800073a8:	00070793          	mv	a5,a4
800073ac:	00379793          	slli	a5,a5,0x3
800073b0:	00e787b3          	add	a5,a5,a4
800073b4:	00679793          	slli	a5,a5,0x6
800073b8:	00001737          	lui	a4,0x1
800073bc:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
800073c0:	02e60733          	mul	a4,a2,a4
800073c4:	00e787b3          	add	a5,a5,a4
800073c8:	00f687b3          	add	a5,a3,a5
800073cc:	04c7a783          	lw	a5,76(a5)
800073d0:	fdc42703          	lw	a4,-36(s0)
800073d4:	08f71a63          	bne	a4,a5,80007468 <API_CheckMessagePipe+0x194>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:498
                        if(TaskList[i].MessagePipe[j].msgID < smallID){
800073d8:	800237b7          	lui	a5,0x80023
800073dc:	fe842703          	lw	a4,-24(s0)
800073e0:	fec42603          	lw	a2,-20(s0)
800073e4:	e4478693          	addi	a3,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
800073e8:	00070793          	mv	a5,a4
800073ec:	00379793          	slli	a5,a5,0x3
800073f0:	00e787b3          	add	a5,a5,a4
800073f4:	00679793          	slli	a5,a5,0x6
800073f8:	00001737          	lui	a4,0x1
800073fc:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80007400:	02e60733          	mul	a4,a2,a4
80007404:	00e787b3          	add	a5,a5,a4
80007408:	00f687b3          	add	a5,a3,a5
8000740c:	0347a783          	lw	a5,52(a5)
80007410:	fe042703          	lw	a4,-32(s0)
80007414:	04e7fa63          	bleu	a4,a5,80007468 <API_CheckMessagePipe+0x194>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:499
                            smallID = TaskList[i].MessagePipe[j].msgID;
80007418:	800237b7          	lui	a5,0x80023
8000741c:	fe842703          	lw	a4,-24(s0)
80007420:	fec42603          	lw	a2,-20(s0)
80007424:	e4478693          	addi	a3,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80007428:	00070793          	mv	a5,a4
8000742c:	00379793          	slli	a5,a5,0x3
80007430:	00e787b3          	add	a5,a5,a4
80007434:	00679793          	slli	a5,a5,0x6
80007438:	00001737          	lui	a4,0x1
8000743c:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80007440:	02e60733          	mul	a4,a2,a4
80007444:	00e787b3          	add	a5,a5,a4
80007448:	00f687b3          	add	a5,a3,a5
8000744c:	0347a783          	lw	a5,52(a5)
80007450:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:500
                            sel = (i << 8) | j;
80007454:	fec42783          	lw	a5,-20(s0)
80007458:	00879793          	slli	a5,a5,0x8
8000745c:	fe842703          	lw	a4,-24(s0)
80007460:	00f767b3          	or	a5,a4,a5
80007464:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:495 (discriminator 2)
            for(j = 0; j < PIPE_SIZE; j++){
80007468:	fe842783          	lw	a5,-24(s0)
8000746c:	00178793          	addi	a5,a5,1
80007470:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:495 (discriminator 1)
80007474:	fe842703          	lw	a4,-24(s0)
80007478:	00300793          	li	a5,3
8000747c:	ece7fee3          	bleu	a4,a5,80007358 <API_CheckMessagePipe+0x84>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:493 (discriminator 2)
    for(i = 0; i < NUM_MAX_TASKS; i++){
80007480:	fec42783          	lw	a5,-20(s0)
80007484:	00178793          	addi	a5,a5,1
80007488:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:493 (discriminator 1)
8000748c:	fec42703          	lw	a4,-20(s0)
80007490:	00500793          	li	a5,5
80007494:	e6e7f8e3          	bleu	a4,a5,80007304 <API_CheckMessagePipe+0x30>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:507
                    }
                }
            }
        }
    }
    if(sel != ERRO){
80007498:	fe442703          	lw	a4,-28(s0)
8000749c:	fff00793          	li	a5,-1
800074a0:	04f70263          	beq	a4,a5,800074e4 <API_CheckMessagePipe+0x210>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:508
        TaskList[sel >> 8].MessagePipe[sel & 0x000000FF].status == PIPE_TRANSMITTING;
800074a4:	fe442783          	lw	a5,-28(s0)
800074a8:	0087d613          	srli	a2,a5,0x8
800074ac:	fe442783          	lw	a5,-28(s0)
800074b0:	0ff7f713          	andi	a4,a5,255
800074b4:	800236b7          	lui	a3,0x80023
800074b8:	00070793          	mv	a5,a4
800074bc:	00379793          	slli	a5,a5,0x3
800074c0:	00e787b3          	add	a5,a5,a4
800074c4:	00679793          	slli	a5,a5,0x6
800074c8:	00001737          	lui	a4,0x1
800074cc:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
800074d0:	02e60733          	mul	a4,a2,a4
800074d4:	00e78733          	add	a4,a5,a4
800074d8:	e4468793          	addi	a5,a3,-444 # 80022e44 <__stack_top+0xfffdc6d4>
800074dc:	00f707b3          	add	a5,a4,a5
800074e0:	0307a783          	lw	a5,48(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:511
    }
    //vTaskExitCritical();
    return sel;
800074e4:	fe442783          	lw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:512
}
800074e8:	00078513          	mv	a0,a5
800074ec:	02c12403          	lw	s0,44(sp)
800074f0:	03010113          	addi	sp,sp,48
800074f4:	00008067          	ret

800074f8 <API_AddPendingReq>:
API_AddPendingReq():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:514

void API_AddPendingReq(unsigned int requester_task_id, unsigned int task_app_id, unsigned int producer_task_id){
800074f8:	fd010113          	addi	sp,sp,-48
800074fc:	02112623          	sw	ra,44(sp)
80007500:	02812423          	sw	s0,40(sp)
80007504:	03010413          	addi	s0,sp,48
80007508:	fca42e23          	sw	a0,-36(s0)
8000750c:	fcb42c23          	sw	a1,-40(s0)
80007510:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:515
    unsigned int slot = API_GetTaskSlot(producer_task_id, task_app_id);
80007514:	fd842583          	lw	a1,-40(s0)
80007518:	fd442503          	lw	a0,-44(s0)
8000751c:	db8fd0ef          	jal	ra,80004ad4 <API_GetTaskSlot>
80007520:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:516
    TaskList[slot].PendingReq[requester_task_id] = TRUE;
80007524:	800237b7          	lui	a5,0x80023
80007528:	fec42683          	lw	a3,-20(s0)
8000752c:	26100713          	li	a4,609
80007530:	02e686b3          	mul	a3,a3,a4
80007534:	fdc42703          	lw	a4,-36(s0)
80007538:	00e68733          	add	a4,a3,a4
8000753c:	24c70713          	addi	a4,a4,588
80007540:	00271713          	slli	a4,a4,0x2
80007544:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80007548:	00f707b3          	add	a5,a4,a5
8000754c:	00100713          	li	a4,1
80007550:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:517
    return;
80007554:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:518
}
80007558:	02c12083          	lw	ra,44(sp)
8000755c:	02812403          	lw	s0,40(sp)
80007560:	03010113          	addi	sp,sp,48
80007564:	00008067          	ret

80007568 <API_NI_Handler>:
API_NI_Handler():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:521


void API_NI_Handler(){
80007568:	fe010113          	addi	sp,sp,-32
8000756c:	00112e23          	sw	ra,28(sp)
80007570:	00812c23          	sw	s0,24(sp)
80007574:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:526
    unsigned int aux;
    unsigned int service;
    //do{

        vTaskEnterCritical();
80007578:	929fb0ef          	jal	ra,80002ea0 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:527
        if (HW_get_32bit_reg(NI_TX) == NI_STATUS_INTER){
8000757c:	500007b7          	lui	a5,0x50000
80007580:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80007584:	a19f90ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80007588:	00050713          	mv	a4,a0
8000758c:	000017b7          	lui	a5,0x1
80007590:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
80007594:	02f71c63          	bne	a4,a5,800075cc <API_NI_Handler+0x64>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:528
            prints("TX interruption catched\n");
80007598:	800097b7          	lui	a5,0x80009
8000759c:	99078513          	addi	a0,a5,-1648 # 80008990 <__stack_top+0xfffc2220>
800075a0:	a8dfe0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:529
            API_ClearPipeSlot(SendingSlot); // clear the pipe slot that was transmitted
800075a4:	800227b7          	lui	a5,0x80022
800075a8:	0187a783          	lw	a5,24(a5) # 80022018 <__stack_top+0xfffdb8a8>
800075ac:	00078513          	mv	a0,a5
800075b0:	d49fd0ef          	jal	ra,800052f8 <API_ClearPipeSlot>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:530
            HW_set_32bit_reg(NI_TX, DONE);  // releases the interruption
800075b4:	800057b7          	lui	a5,0x80005
800075b8:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffbede5>
800075bc:	500007b7          	lui	a5,0x50000
800075c0:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
800075c4:	9d1f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:531
            API_Try2Send();                 // tries to send another packet (if available)
800075c8:	9b4ff0ef          	jal	ra,8000677c <API_Try2Send>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:533
        }
        vTaskExitCritical();
800075cc:	911fb0ef          	jal	ra,80002edc <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:535

        vTaskEnterCritical();
800075d0:	8d1fb0ef          	jal	ra,80002ea0 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:536
        if( HW_get_32bit_reg(NI_RX) == NI_STATUS_INTER || HW_get_32bit_reg(NI_RX) == NI_STATUS_WAITING) {
800075d4:	500007b7          	lui	a5,0x50000
800075d8:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800075dc:	9c1f90ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800075e0:	00050713          	mv	a4,a0
800075e4:	000017b7          	lui	a5,0x1
800075e8:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
800075ec:	00f70e63          	beq	a4,a5,80007608 <API_NI_Handler+0xa0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:536 (discriminator 1)
800075f0:	500007b7          	lui	a5,0x50000
800075f4:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800075f8:	9a5f90ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800075fc:	00050713          	mv	a4,a0
80007600:	02200793          	li	a5,34
80007604:	0af71ae3          	bne	a4,a5,80007eb8 <API_NI_Handler+0x950>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:537
            prints("RX interruption catched\n");
80007608:	800097b7          	lui	a5,0x80009
8000760c:	9ac78513          	addi	a0,a5,-1620 # 800089ac <__stack_top+0xfffc223c>
80007610:	a1dfe0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:538
            service = incommingPacket.service;
80007614:	800227b7          	lui	a5,0x80022
80007618:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
8000761c:	0087a783          	lw	a5,8(a5)
80007620:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:539
            incommingPacket.service = SOLVED;
80007624:	800227b7          	lui	a5,0x80022
80007628:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
8000762c:	00010737          	lui	a4,0x10
80007630:	fff70713          	addi	a4,a4,-1 # ffff <HEAP_SIZE-0x1>
80007634:	00e7a423          	sw	a4,8(a5)
80007638:	fe842703          	lw	a4,-24(s0)
8000763c:	05500793          	li	a5,85
80007640:	74f70663          	beq	a4,a5,80007d8c <API_NI_Handler+0x824>
80007644:	fe842703          	lw	a4,-24(s0)
80007648:	05500793          	li	a5,85
8000764c:	06e7e063          	bltu	a5,a4,800076ac <API_NI_Handler+0x144>
80007650:	fe842703          	lw	a4,-24(s0)
80007654:	02100793          	li	a5,33
80007658:	6af70063          	beq	a4,a5,80007cf8 <API_NI_Handler+0x790>
8000765c:	fe842703          	lw	a4,-24(s0)
80007660:	02100793          	li	a5,33
80007664:	02e7e063          	bltu	a5,a4,80007684 <API_NI_Handler+0x11c>
80007668:	fe842703          	lw	a4,-24(s0)
8000766c:	01000793          	li	a5,16
80007670:	50f70263          	beq	a4,a5,80007b74 <API_NI_Handler+0x60c>
80007674:	fe842703          	lw	a4,-24(s0)
80007678:	02000793          	li	a5,32
8000767c:	5ef70263          	beq	a4,a5,80007c60 <API_NI_Handler+0x6f8>
80007680:	7f80006f          	j	80007e78 <API_NI_Handler+0x910>
80007684:	fe842703          	lw	a4,-24(s0)
80007688:	03300793          	li	a5,51
8000768c:	2af70063          	beq	a4,a5,8000792c <API_NI_Handler+0x3c4>
80007690:	fe842703          	lw	a4,-24(s0)
80007694:	03500793          	li	a5,53
80007698:	2ef70463          	beq	a4,a5,80007980 <API_NI_Handler+0x418>
8000769c:	fe842703          	lw	a4,-24(s0)
800076a0:	03000793          	li	a5,48
800076a4:	0cf70463          	beq	a4,a5,8000776c <API_NI_Handler+0x204>
800076a8:	7d00006f          	j	80007e78 <API_NI_Handler+0x910>
800076ac:	fe842703          	lw	a4,-24(s0)
800076b0:	40000793          	li	a5,1024
800076b4:	32f70063          	beq	a4,a5,800079d4 <API_NI_Handler+0x46c>
800076b8:	fe842703          	lw	a4,-24(s0)
800076bc:	40000793          	li	a5,1024
800076c0:	02e7e063          	bltu	a5,a4,800076e0 <API_NI_Handler+0x178>
800076c4:	fe842703          	lw	a4,-24(s0)
800076c8:	05600793          	li	a5,86
800076cc:	70f70c63          	beq	a4,a5,80007de4 <API_NI_Handler+0x87c>
800076d0:	fe842703          	lw	a4,-24(s0)
800076d4:	20000793          	li	a5,512
800076d8:	02f70a63          	beq	a4,a5,8000770c <API_NI_Handler+0x1a4>
800076dc:	79c0006f          	j	80007e78 <API_NI_Handler+0x910>
800076e0:	fe842703          	lw	a4,-24(s0)
800076e4:	50000793          	li	a5,1280
800076e8:	18f70863          	beq	a4,a5,80007878 <API_NI_Handler+0x310>
800076ec:	fe842703          	lw	a4,-24(s0)
800076f0:	000107b7          	lui	a5,0x10
800076f4:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
800076f8:	76f70863          	beq	a4,a5,80007e68 <API_NI_Handler+0x900>
800076fc:	fe842703          	lw	a4,-24(s0)
80007700:	40100793          	li	a5,1025
80007704:	36f70a63          	beq	a4,a5,80007a78 <API_NI_Handler+0x510>
80007708:	7700006f          	j	80007e78 <API_NI_Handler+0x910>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:543
            switch (service){
                case REPOSITORY_APP_INFO: // When the repository informs the GM that exist a new Application available:
                    //prints("REPOSITORY_APP_INFO\n");
                    API_AddApplication(incommingPacket.application_id,
8000770c:	800227b7          	lui	a5,0x80022
80007710:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
80007714:	00c7a703          	lw	a4,12(a5)
80007718:	800227b7          	lui	a5,0x80022
8000771c:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
80007720:	0107a583          	lw	a1,16(a5)
80007724:	800227b7          	lui	a5,0x80022
80007728:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
8000772c:	0147a603          	lw	a2,20(a5)
80007730:	800227b7          	lui	a5,0x80022
80007734:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
80007738:	0187a783          	lw	a5,24(a5)
8000773c:	00078693          	mv	a3,a5
80007740:	00070513          	mv	a0,a4
80007744:	8fdfb0ef          	jal	ra,80003040 <API_AddApplication>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:547
                                    incommingPacket.aplication_period, 
                                    incommingPacket.application_executions, 
                                    incommingPacket.application_n_tasks);
                    HW_set_32bit_reg(NI_RX, DONE);
80007748:	800057b7          	lui	a5,0x80005
8000774c:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffbede5>
80007750:	500007b7          	lui	a5,0x50000
80007754:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007758:	83df90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:548
                    prints("1NI_RX DONE!\n");
8000775c:	800097b7          	lui	a5,0x80009
80007760:	9c878513          	addi	a0,a5,-1592 # 800089c8 <__stack_top+0xfffc2258>
80007764:	8c9fe0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:549
                    break;
80007768:	7540006f          	j	80007ebc <API_NI_Handler+0x954>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:552
                
                case TASK_ALLOCATION_SEND: // When the GM asks one Slave to allocate one task
                    prints("TASK_ALLOCATION_SEND\n");
8000776c:	800097b7          	lui	a5,0x80009
80007770:	9d878513          	addi	a0,a5,-1576 # 800089d8 <__stack_top+0xfffc2268>
80007774:	8b9fe0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:553
                    HW_set_32bit_reg(NI_RX, HOLD);
80007778:	ff600593          	li	a1,-10
8000777c:	500007b7          	lui	a5,0x50000
80007780:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007784:	811f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:554
                    aux = API_TaskAllocation(incommingPacket.task_id,
80007788:	800227b7          	lui	a5,0x80022
8000778c:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
80007790:	00c7a503          	lw	a0,12(a5)
80007794:	800227b7          	lui	a5,0x80022
80007798:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
8000779c:	0107a583          	lw	a1,16(a5)
800077a0:	800227b7          	lui	a5,0x80022
800077a4:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
800077a8:	0147a603          	lw	a2,20(a5)
800077ac:	800227b7          	lui	a5,0x80022
800077b0:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
800077b4:	0187a683          	lw	a3,24(a5)
800077b8:	800227b7          	lui	a5,0x80022
800077bc:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
800077c0:	01c7a783          	lw	a5,28(a5)
800077c4:	00078713          	mv	a4,a5
800077c8:	868fd0ef          	jal	ra,80004830 <API_TaskAllocation>
800077cc:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:559
                                             incommingPacket.task_txt_size,
                                             incommingPacket.task_bss_size,
                                             incommingPacket.task_start_point,
                                             incommingPacket.task_app_id);
                    printsv("Task slot: ", aux);
800077d0:	fec42783          	lw	a5,-20(s0)
800077d4:	00078593          	mv	a1,a5
800077d8:	800097b7          	lui	a5,0x80009
800077dc:	9f078513          	addi	a0,a5,-1552 # 800089f0 <__stack_top+0xfffc2280>
800077e0:	8f9fe0ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:560
                    printsv("Task slot TaskAddr: ", TaskList[aux].taskAddr);
800077e4:	800237b7          	lui	a5,0x80023
800077e8:	fec42683          	lw	a3,-20(s0)
800077ec:	e4478713          	addi	a4,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
800077f0:	000017b7          	lui	a5,0x1
800077f4:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
800077f8:	02f687b3          	mul	a5,a3,a5
800077fc:	00f707b3          	add	a5,a4,a5
80007800:	0287a783          	lw	a5,40(a5)
80007804:	00078593          	mv	a1,a5
80007808:	800097b7          	lui	a5,0x80009
8000780c:	9fc78513          	addi	a0,a5,-1540 # 800089fc <__stack_top+0xfffc228c>
80007810:	8c9fe0ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:562
                    // Informs the NI were to write the application
                    HW_set_32bit_reg(NI_RX, TaskList[aux].taskAddr);
80007814:	800237b7          	lui	a5,0x80023
80007818:	fec42683          	lw	a3,-20(s0)
8000781c:	e4478713          	addi	a4,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80007820:	000017b7          	lui	a5,0x1
80007824:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80007828:	02f687b3          	mul	a5,a3,a5
8000782c:	00f707b3          	add	a5,a4,a5
80007830:	0287a783          	lw	a5,40(a5)
80007834:	00078593          	mv	a1,a5
80007838:	500007b7          	lui	a5,0x50000
8000783c:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007840:	f54f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:563
                    incommingPacket.service = TASK_ALLOCATION_FINISHED;
80007844:	800227b7          	lui	a5,0x80022
80007848:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
8000784c:	03300713          	li	a4,51
80007850:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:564
                    HW_set_32bit_reg(NI_RX, DONE);
80007854:	800057b7          	lui	a5,0x80005
80007858:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffbede5>
8000785c:	500007b7          	lui	a5,0x50000
80007860:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007864:	f30f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:565
                    prints("2NI_RX DONE!\n");
80007868:	800097b7          	lui	a5,0x80009
8000786c:	a1478513          	addi	a0,a5,-1516 # 80008a14 <__stack_top+0xfffc22a4>
80007870:	fbcfe0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:566
                    break;
80007874:	6480006f          	j	80007ebc <API_NI_Handler+0x954>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:569
                
                case TASK_FINISH:
                    printsvsv("FINISHED: Task ", incommingPacket.task_id, "from application ", incommingPacket.task_app_id);
80007878:	800227b7          	lui	a5,0x80022
8000787c:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
80007880:	00c7a783          	lw	a5,12(a5)
80007884:	00078713          	mv	a4,a5
80007888:	800227b7          	lui	a5,0x80022
8000788c:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
80007890:	01c7a783          	lw	a5,28(a5)
80007894:	00078693          	mv	a3,a5
80007898:	800097b7          	lui	a5,0x80009
8000789c:	a2478613          	addi	a2,a5,-1500 # 80008a24 <__stack_top+0xfffc22b4>
800078a0:	00070593          	mv	a1,a4
800078a4:	800097b7          	lui	a5,0x80009
800078a8:	a3878513          	addi	a0,a5,-1480 # 80008a38 <__stack_top+0xfffc22c8>
800078ac:	875fe0ef          	jal	ra,80006120 <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:570
                    API_ClearTaskSlotFromTile(incommingPacket.task_dest_addr, incommingPacket.task_app_id, incommingPacket.task_id);
800078b0:	800227b7          	lui	a5,0x80022
800078b4:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
800078b8:	0307a703          	lw	a4,48(a5)
800078bc:	800227b7          	lui	a5,0x80022
800078c0:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
800078c4:	01c7a683          	lw	a3,28(a5)
800078c8:	800227b7          	lui	a5,0x80022
800078cc:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
800078d0:	00c7a783          	lw	a5,12(a5)
800078d4:	00078613          	mv	a2,a5
800078d8:	00068593          	mv	a1,a3
800078dc:	00070513          	mv	a0,a4
800078e0:	d30fc0ef          	jal	ra,80003e10 <API_ClearTaskSlotFromTile>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:571
                    API_DealocateTask(incommingPacket.task_id, incommingPacket.task_app_id);
800078e4:	800227b7          	lui	a5,0x80022
800078e8:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
800078ec:	00c7a703          	lw	a4,12(a5)
800078f0:	800227b7          	lui	a5,0x80022
800078f4:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
800078f8:	01c7a783          	lw	a5,28(a5)
800078fc:	00078593          	mv	a1,a5
80007900:	00070513          	mv	a0,a4
80007904:	eadfb0ef          	jal	ra,800037b0 <API_DealocateTask>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:572
                    HW_set_32bit_reg(NI_RX, DONE);
80007908:	800057b7          	lui	a5,0x80005
8000790c:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffbede5>
80007910:	500007b7          	lui	a5,0x50000
80007914:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007918:	e7cf90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:573
                    prints("3NI_RX DONE!\n");
8000791c:	800097b7          	lui	a5,0x80009
80007920:	a4878513          	addi	a0,a5,-1464 # 80008a48 <__stack_top+0xfffc22d8>
80007924:	f08fe0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:574
                    break;
80007928:	5940006f          	j	80007ebc <API_NI_Handler+0x954>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:577

                case TASK_ALLOCATION_FINISHED:
                    prints("TASK_ALLOCATION_FINISHED\n");
8000792c:	800097b7          	lui	a5,0x80009
80007930:	a5878513          	addi	a0,a5,-1448 # 80008a58 <__stack_top+0xfffc22e8>
80007934:	ef8fe0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:578
                    API_AckTaskAllocation(incommingPacket.task_id, incommingPacket.task_app_id);
80007938:	800227b7          	lui	a5,0x80022
8000793c:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
80007940:	00c7a703          	lw	a4,12(a5)
80007944:	800227b7          	lui	a5,0x80022
80007948:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
8000794c:	01c7a783          	lw	a5,28(a5)
80007950:	00078593          	mv	a1,a5
80007954:	00070513          	mv	a0,a4
80007958:	80cff0ef          	jal	ra,80006964 <API_AckTaskAllocation>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:579
                    HW_set_32bit_reg(NI_RX, DONE);
8000795c:	800057b7          	lui	a5,0x80005
80007960:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffbede5>
80007964:	500007b7          	lui	a5,0x50000
80007968:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
8000796c:	e28f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:580
                    prints("4NI_RX DONE!\n");
80007970:	800097b7          	lui	a5,0x80009
80007974:	a7478513          	addi	a0,a5,-1420 # 80008a74 <__stack_top+0xfffc2304>
80007978:	eb4fe0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:581
                    break;
8000797c:	5400006f          	j	80007ebc <API_NI_Handler+0x954>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:584

                case TASK_ALLOCATION_SUCCESS:
                    prints("TASK_ALLOCATION_SUCCESS\n");
80007980:	800097b7          	lui	a5,0x80009
80007984:	a8478513          	addi	a0,a5,-1404 # 80008a84 <__stack_top+0xfffc2314>
80007988:	ea4fe0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:585
                    API_TaskAllocated(incommingPacket.task_id, incommingPacket.task_app_id);
8000798c:	800227b7          	lui	a5,0x80022
80007990:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
80007994:	00c7a703          	lw	a4,12(a5)
80007998:	800227b7          	lui	a5,0x80022
8000799c:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
800079a0:	01c7a783          	lw	a5,28(a5)
800079a4:	00078593          	mv	a1,a5
800079a8:	00070513          	mv	a0,a4
800079ac:	83dfc0ef          	jal	ra,800041e8 <API_TaskAllocated>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:586
                    HW_set_32bit_reg(NI_RX, DONE);
800079b0:	800057b7          	lui	a5,0x80005
800079b4:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffbede5>
800079b8:	500007b7          	lui	a5,0x50000
800079bc:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800079c0:	dd4f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:587
                    prints("5NI_RX DONE!\n");
800079c4:	800097b7          	lui	a5,0x80009
800079c8:	aa078513          	addi	a0,a5,-1376 # 80008aa0 <__stack_top+0xfffc2330>
800079cc:	e60fe0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:588
                    break;
800079d0:	4ec0006f          	j	80007ebc <API_NI_Handler+0x954>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:591

                case TASK_START:
                    prints("Chegou um TASK_START!\n");
800079d4:	800097b7          	lui	a5,0x80009
800079d8:	ab078513          	addi	a0,a5,-1360 # 80008ab0 <__stack_top+0xfffc2340>
800079dc:	e50fe0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:592
                    aux = API_GetTaskSlot(incommingPacket.task_id, incommingPacket.task_app_id);
800079e0:	800227b7          	lui	a5,0x80022
800079e4:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
800079e8:	00c7a703          	lw	a4,12(a5)
800079ec:	800227b7          	lui	a5,0x80022
800079f0:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
800079f4:	01c7a783          	lw	a5,28(a5)
800079f8:	00078593          	mv	a1,a5
800079fc:	00070513          	mv	a0,a4
80007a00:	8d4fd0ef          	jal	ra,80004ad4 <API_GetTaskSlot>
80007a04:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:594
                    // Informs the NI were to write the application
                    HW_set_32bit_reg(NI_RX, (unsigned int)&TaskList[aux].appNumTasks);
80007a08:	fec42703          	lw	a4,-20(s0)
80007a0c:	000017b7          	lui	a5,0x1
80007a10:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80007a14:	02f70733          	mul	a4,a4,a5
80007a18:	000017b7          	lui	a5,0x1
80007a1c:	95078793          	addi	a5,a5,-1712 # 950 <HEAP_SIZE-0xf6b0>
80007a20:	00f70733          	add	a4,a4,a5
80007a24:	800237b7          	lui	a5,0x80023
80007a28:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80007a2c:	00f707b3          	add	a5,a4,a5
80007a30:	00878793          	addi	a5,a5,8
80007a34:	00078593          	mv	a1,a5
80007a38:	500007b7          	lui	a5,0x50000
80007a3c:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007a40:	d54f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:595
                    incommingPacket.service = TASK_RUN;
80007a44:	800227b7          	lui	a5,0x80022
80007a48:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
80007a4c:	40100713          	li	a4,1025
80007a50:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:596
                    HW_set_32bit_reg(NI_RX, DONE);
80007a54:	800057b7          	lui	a5,0x80005
80007a58:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffbede5>
80007a5c:	500007b7          	lui	a5,0x50000
80007a60:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007a64:	d30f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:597
                    prints("6NI_RX DONE!\n");
80007a68:	800097b7          	lui	a5,0x80009
80007a6c:	ac878513          	addi	a0,a5,-1336 # 80008ac8 <__stack_top+0xfffc2358>
80007a70:	dbcfe0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:598
                    break;
80007a74:	4480006f          	j	80007ebc <API_NI_Handler+0x954>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:601
                
                case TASK_RUN:
                    prints("Chegou um TASK_RUN!\n");
80007a78:	800097b7          	lui	a5,0x80009
80007a7c:	ad878513          	addi	a0,a5,-1320 # 80008ad8 <__stack_top+0xfffc2368>
80007a80:	dacfe0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:602
                    aux = API_GetTaskSlot(incommingPacket.task_id, incommingPacket.task_app_id);
80007a84:	800227b7          	lui	a5,0x80022
80007a88:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
80007a8c:	00c7a703          	lw	a4,12(a5)
80007a90:	800227b7          	lui	a5,0x80022
80007a94:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
80007a98:	01c7a783          	lw	a5,28(a5)
80007a9c:	00078593          	mv	a1,a5
80007aa0:	00070513          	mv	a0,a4
80007aa4:	830fd0ef          	jal	ra,80004ad4 <API_GetTaskSlot>
80007aa8:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:603
                    TaskList[aux].status = TASK_SLOT_READY;
80007aac:	800237b7          	lui	a5,0x80023
80007ab0:	fec42683          	lw	a3,-20(s0)
80007ab4:	00001737          	lui	a4,0x1
80007ab8:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80007abc:	02e68733          	mul	a4,a3,a4
80007ac0:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80007ac4:	00f707b3          	add	a5,a4,a5
80007ac8:	00300713          	li	a4,3
80007acc:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:604
                    API_setFreqScale(1000);
80007ad0:	3e800513          	li	a0,1000
80007ad4:	a75fd0ef          	jal	ra,80005548 <API_setFreqScale>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:605
                    printsvsv("Starting Task ", TaskList[aux].TaskID, " from app ", TaskList[aux].AppID);
80007ad8:	800237b7          	lui	a5,0x80023
80007adc:	fec42683          	lw	a3,-20(s0)
80007ae0:	00001737          	lui	a4,0x1
80007ae4:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80007ae8:	02e68733          	mul	a4,a3,a4
80007aec:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80007af0:	00f707b3          	add	a5,a4,a5
80007af4:	0107a783          	lw	a5,16(a5)
80007af8:	00078593          	mv	a1,a5
80007afc:	800237b7          	lui	a5,0x80023
80007b00:	fec42683          	lw	a3,-20(s0)
80007b04:	e4478713          	addi	a4,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80007b08:	000017b7          	lui	a5,0x1
80007b0c:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80007b10:	02f687b3          	mul	a5,a3,a5
80007b14:	00f707b3          	add	a5,a4,a5
80007b18:	0147a783          	lw	a5,20(a5)
80007b1c:	00078693          	mv	a3,a5
80007b20:	800097b7          	lui	a5,0x80009
80007b24:	af078613          	addi	a2,a5,-1296 # 80008af0 <__stack_top+0xfffc2380>
80007b28:	800097b7          	lui	a5,0x80009
80007b2c:	afc78513          	addi	a0,a5,-1284 # 80008afc <__stack_top+0xfffc238c>
80007b30:	df0fe0ef          	jal	ra,80006120 <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:606
                    printsv("taskSlot run: ", aux);
80007b34:	fec42783          	lw	a5,-20(s0)
80007b38:	00078593          	mv	a1,a5
80007b3c:	800097b7          	lui	a5,0x80009
80007b40:	b0c78513          	addi	a0,a5,-1268 # 80008b0c <__stack_top+0xfffc239c>
80007b44:	d94fe0ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:607
                    HW_set_32bit_reg(NI_RX, DONE);
80007b48:	800057b7          	lui	a5,0x80005
80007b4c:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffbede5>
80007b50:	500007b7          	lui	a5,0x50000
80007b54:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007b58:	c3cf90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:608
                    prints("7NI_RX DONE!\n");
80007b5c:	800097b7          	lui	a5,0x80009
80007b60:	b1c78513          	addi	a0,a5,-1252 # 80008b1c <__stack_top+0xfffc23ac>
80007b64:	cc8fe0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:609
                    API_TaskStart(aux);
80007b68:	fec42503          	lw	a0,-20(s0)
80007b6c:	840fd0ef          	jal	ra,80004bac <API_TaskStart>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:620
                    //         printsvsv("Starting Task ", TaskList[aux].TaskID, " from app ", TaskList[aux].AppID);
                    //         API_TaskStart(aux);
                    //     }
                    // }
                    
                    break;
80007b70:	34c0006f          	j	80007ebc <API_NI_Handler+0x954>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:624

                case MESSAGE_REQUEST:
                    // check the pipe
                    printsvsv("Chegou um message request! App: ", incommingPacket.task_app_id, "Task: ", incommingPacket.task_id);
80007b74:	800227b7          	lui	a5,0x80022
80007b78:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
80007b7c:	01c7a783          	lw	a5,28(a5)
80007b80:	00078713          	mv	a4,a5
80007b84:	800227b7          	lui	a5,0x80022
80007b88:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
80007b8c:	00c7a783          	lw	a5,12(a5)
80007b90:	00078693          	mv	a3,a5
80007b94:	800097b7          	lui	a5,0x80009
80007b98:	b2c78613          	addi	a2,a5,-1236 # 80008b2c <__stack_top+0xfffc23bc>
80007b9c:	00070593          	mv	a1,a4
80007ba0:	800097b7          	lui	a5,0x80009
80007ba4:	b3478513          	addi	a0,a5,-1228 # 80008b34 <__stack_top+0xfffc23c4>
80007ba8:	d78fe0ef          	jal	ra,80006120 <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:625
                    aux = API_CheckMessagePipe(incommingPacket.task_id, incommingPacket.task_app_id);
80007bac:	800227b7          	lui	a5,0x80022
80007bb0:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
80007bb4:	00c7a703          	lw	a4,12(a5)
80007bb8:	800227b7          	lui	a5,0x80022
80007bbc:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
80007bc0:	01c7a783          	lw	a5,28(a5)
80007bc4:	00078593          	mv	a1,a5
80007bc8:	00070513          	mv	a0,a4
80007bcc:	f08ff0ef          	jal	ra,800072d4 <API_CheckMessagePipe>
80007bd0:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:626
                    if (aux == ERRO){
80007bd4:	fec42703          	lw	a4,-20(s0)
80007bd8:	fff00793          	li	a5,-1
80007bdc:	04f71463          	bne	a4,a5,80007c24 <API_NI_Handler+0x6bc>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:628
                        // register an messagerequest
                        prints("Mensagem não encontrada, adicionando ao PendingReq!\n");
80007be0:	800097b7          	lui	a5,0x80009
80007be4:	b5878513          	addi	a0,a5,-1192 # 80008b58 <__stack_top+0xfffc23e8>
80007be8:	c44fe0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:629
                        API_AddPendingReq(incommingPacket.task_id, incommingPacket.task_app_id, incommingPacket.producer_task_id);
80007bec:	800227b7          	lui	a5,0x80022
80007bf0:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
80007bf4:	00c7a703          	lw	a4,12(a5)
80007bf8:	800227b7          	lui	a5,0x80022
80007bfc:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
80007c00:	01c7a683          	lw	a3,28(a5)
80007c04:	800227b7          	lui	a5,0x80022
80007c08:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
80007c0c:	0147a783          	lw	a5,20(a5)
80007c10:	00078613          	mv	a2,a5
80007c14:	00068593          	mv	a1,a3
80007c18:	00070513          	mv	a0,a4
80007c1c:	8ddff0ef          	jal	ra,800074f8 <API_AddPendingReq>
80007c20:	01c0006f          	j	80007c3c <API_NI_Handler+0x6d4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:631
                    } else {
                        prints("Mensagem encontrada no pipe!\n");
80007c24:	800097b7          	lui	a5,0x80009
80007c28:	b9078513          	addi	a0,a5,-1136 # 80008b90 <__stack_top+0xfffc2420>
80007c2c:	c00fe0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:632
                        API_PushSendQueue(MESSAGE, aux);
80007c30:	fec42583          	lw	a1,-20(s0)
80007c34:	20200537          	lui	a0,0x20200
80007c38:	8fdfe0ef          	jal	ra,80006534 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:635
                        // API_Try2Send();
                    }
                    HW_set_32bit_reg(NI_RX, DONE);
80007c3c:	800057b7          	lui	a5,0x80005
80007c40:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffbede5>
80007c44:	500007b7          	lui	a5,0x50000
80007c48:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007c4c:	b48f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:636
                    prints("8NI_RX DONE!\n");
80007c50:	800097b7          	lui	a5,0x80009
80007c54:	bb078513          	addi	a0,a5,-1104 # 80008bb0 <__stack_top+0xfffc2440>
80007c58:	bd4fe0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:637
                    break;
80007c5c:	2600006f          	j	80007ebc <API_NI_Handler+0x954>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:640
                
                case MESSAGE_DELIVERY:
                    prints("Tem uma mensagem chegando...\n");
80007c60:	800097b7          	lui	a5,0x80009
80007c64:	bc078513          	addi	a0,a5,-1088 # 80008bc0 <__stack_top+0xfffc2450>
80007c68:	bc4fe0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:641
                    aux = API_GetTaskSlot(incommingPacket.destination_task, incommingPacket.application_id);
80007c6c:	800227b7          	lui	a5,0x80022
80007c70:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
80007c74:	0147a703          	lw	a4,20(a5)
80007c78:	800227b7          	lui	a5,0x80022
80007c7c:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
80007c80:	00c7a783          	lw	a5,12(a5)
80007c84:	00078593          	mv	a1,a5
80007c88:	00070513          	mv	a0,a4
80007c8c:	e49fc0ef          	jal	ra,80004ad4 <API_GetTaskSlot>
80007c90:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:643
                    //printsv("MESSAGE_DELIVERY addr: ", TaskList[aux].MsgToReceive);
                    HW_set_32bit_reg(NI_RX, TaskList[aux].MsgToReceive);
80007c94:	800237b7          	lui	a5,0x80023
80007c98:	fec42683          	lw	a3,-20(s0)
80007c9c:	00001737          	lui	a4,0x1
80007ca0:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80007ca4:	02e68733          	mul	a4,a3,a4
80007ca8:	e4478793          	addi	a5,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80007cac:	00f707b3          	add	a5,a4,a5
80007cb0:	0207a783          	lw	a5,32(a5)
80007cb4:	00078593          	mv	a1,a5
80007cb8:	500007b7          	lui	a5,0x50000
80007cbc:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007cc0:	ad4f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:644
                    incommingPacket.service = MESSAGE_DELIVERY_FINISH;
80007cc4:	800227b7          	lui	a5,0x80022
80007cc8:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
80007ccc:	02100713          	li	a4,33
80007cd0:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:646
                    //prints("done...\n----------\n");
                    HW_set_32bit_reg(NI_RX, DONE);
80007cd4:	800057b7          	lui	a5,0x80005
80007cd8:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffbede5>
80007cdc:	500007b7          	lui	a5,0x50000
80007ce0:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007ce4:	ab0f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:647
                    prints("9NI_RX DONE!\n");
80007ce8:	800097b7          	lui	a5,0x80009
80007cec:	be078513          	addi	a0,a5,-1056 # 80008be0 <__stack_top+0xfffc2470>
80007cf0:	b3cfe0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:648
                    break;
80007cf4:	1c80006f          	j	80007ebc <API_NI_Handler+0x954>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:652
                
                case MESSAGE_DELIVERY_FINISH:
                    //prints("Terminou de entregar a mensagem!!\n");
                    aux = API_GetTaskSlot(incommingPacket.destination_task, incommingPacket.application_id);
80007cf8:	800227b7          	lui	a5,0x80022
80007cfc:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
80007d00:	0147a703          	lw	a4,20(a5)
80007d04:	800227b7          	lui	a5,0x80022
80007d08:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
80007d0c:	00c7a783          	lw	a5,12(a5)
80007d10:	00078593          	mv	a1,a5
80007d14:	00070513          	mv	a0,a4
80007d18:	dbdfc0ef          	jal	ra,80004ad4 <API_GetTaskSlot>
80007d1c:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:653
                    TaskList[aux].waitingMsg = FALSE;
80007d20:	800237b7          	lui	a5,0x80023
80007d24:	fec42683          	lw	a3,-20(s0)
80007d28:	e4478713          	addi	a4,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80007d2c:	000017b7          	lui	a5,0x1
80007d30:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80007d34:	02f687b3          	mul	a5,a3,a5
80007d38:	00f707b3          	add	a5,a4,a5
80007d3c:	0007ae23          	sw	zero,28(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:654
                    HW_set_32bit_reg(NI_RX, DONE);
80007d40:	800057b7          	lui	a5,0x80005
80007d44:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffbede5>
80007d48:	500007b7          	lui	a5,0x50000
80007d4c:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007d50:	a44f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:655
                    prints("10NI_RX DONE!\n");
80007d54:	800097b7          	lui	a5,0x80009
80007d58:	bf078513          	addi	a0,a5,-1040 # 80008bf0 <__stack_top+0xfffc2480>
80007d5c:	ad0fe0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:657
                    //vTaskResume(TaskList[aux].TaskHandler);
                    xTaskResumeFromISR(TaskList[aux].TaskHandler);
80007d60:	800237b7          	lui	a5,0x80023
80007d64:	fec42683          	lw	a3,-20(s0)
80007d68:	e4478713          	addi	a4,a5,-444 # 80022e44 <__stack_top+0xfffdc6d4>
80007d6c:	000017b7          	lui	a5,0x1
80007d70:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80007d74:	02f687b3          	mul	a5,a3,a5
80007d78:	00f707b3          	add	a5,a4,a5
80007d7c:	0187a783          	lw	a5,24(a5)
80007d80:	00078513          	mv	a0,a5
80007d84:	e00fa0ef          	jal	ra,80002384 <xTaskResumeFromISR>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:658
                    break;
80007d88:	1340006f          	j	80007ebc <API_NI_Handler+0x954>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:661

                case TEMPERATURE_PACKET:
                    prints("Recebendo pacote de temperatura");
80007d8c:	800097b7          	lui	a5,0x80009
80007d90:	c0078513          	addi	a0,a5,-1024 # 80008c00 <__stack_top+0xfffc2490>
80007d94:	a98fe0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:662
                    HW_set_32bit_reg(NI_RX, (unsigned int)&SystemTemperature);
80007d98:	800237b7          	lui	a5,0x80023
80007d9c:	db078793          	addi	a5,a5,-592 # 80022db0 <__stack_top+0xfffdc640>
80007da0:	00078593          	mv	a1,a5
80007da4:	500007b7          	lui	a5,0x50000
80007da8:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007dac:	9e8f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:663
                    incommingPacket.service = FINISH_TEMPERATURE_PACKET;
80007db0:	800227b7          	lui	a5,0x80022
80007db4:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
80007db8:	05600713          	li	a4,86
80007dbc:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:664
                    HW_set_32bit_reg(NI_RX, DONE);
80007dc0:	800057b7          	lui	a5,0x80005
80007dc4:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffbede5>
80007dc8:	500007b7          	lui	a5,0x50000
80007dcc:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007dd0:	9c4f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:665
                    prints("11NI_RX DONE!\n");
80007dd4:	800097b7          	lui	a5,0x80009
80007dd8:	c2078513          	addi	a0,a5,-992 # 80008c20 <__stack_top+0xfffc24b0>
80007ddc:	a50fe0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:666
                    break;
80007de0:	0dc0006f          	j	80007ebc <API_NI_Handler+0x954>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:669
                
                case FINISH_TEMPERATURE_PACKET:
                    temperatureUpdated = 1;
80007de4:	800237b7          	lui	a5,0x80023
80007de8:	00100713          	li	a4,1
80007dec:	dae7a623          	sw	a4,-596(a5) # 80022dac <__stack_top+0xfffdc63c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:670
                    for(aux = 0; aux < DIM_X*DIM_Y; aux++){ 
80007df0:	fe042623          	sw	zero,-20(s0)
80007df4:	0440006f          	j	80007e38 <API_NI_Handler+0x8d0>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:671 (discriminator 3)
                        printsvsv("pe", aux, "temp: ", SystemTemperature[aux]);
80007df8:	fec42583          	lw	a1,-20(s0)
80007dfc:	800237b7          	lui	a5,0x80023
80007e00:	fec42703          	lw	a4,-20(s0)
80007e04:	00271713          	slli	a4,a4,0x2
80007e08:	db078793          	addi	a5,a5,-592 # 80022db0 <__stack_top+0xfffdc640>
80007e0c:	00f707b3          	add	a5,a4,a5
80007e10:	0007a783          	lw	a5,0(a5)
80007e14:	00078693          	mv	a3,a5
80007e18:	800097b7          	lui	a5,0x80009
80007e1c:	c3078613          	addi	a2,a5,-976 # 80008c30 <__stack_top+0xfffc24c0>
80007e20:	800097b7          	lui	a5,0x80009
80007e24:	c3878513          	addi	a0,a5,-968 # 80008c38 <__stack_top+0xfffc24c8>
80007e28:	af8fe0ef          	jal	ra,80006120 <printsvsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:670 (discriminator 3)
                    for(aux = 0; aux < DIM_X*DIM_Y; aux++){ 
80007e2c:	fec42783          	lw	a5,-20(s0)
80007e30:	00178793          	addi	a5,a5,1
80007e34:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:670 (discriminator 1)
80007e38:	fec42703          	lw	a4,-20(s0)
80007e3c:	00800793          	li	a5,8
80007e40:	fae7fce3          	bleu	a4,a5,80007df8 <API_NI_Handler+0x890>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:673
                    }
                    HW_set_32bit_reg(NI_RX, DONE);
80007e44:	800057b7          	lui	a5,0x80005
80007e48:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffbede5>
80007e4c:	500007b7          	lui	a5,0x50000
80007e50:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007e54:	940f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:674
                    prints("12NI_RX DONE!\n");
80007e58:	800097b7          	lui	a5,0x80009
80007e5c:	c3c78513          	addi	a0,a5,-964 # 80008c3c <__stack_top+0xfffc24cc>
80007e60:	9ccfe0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:675
                    break;
80007e64:	0580006f          	j	80007ebc <API_NI_Handler+0x954>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:679

                case SOLVED:
                    //HW_set_32bit_reg(NI_RX, HOLD);
                    prints("13NI_RX HOLD!\n");
80007e68:	800097b7          	lui	a5,0x80009
80007e6c:	c4c78513          	addi	a0,a5,-948 # 80008c4c <__stack_top+0xfffc24dc>
80007e70:	9bcfe0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:680
                    break;
80007e74:	0480006f          	j	80007ebc <API_NI_Handler+0x954>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:683
                    
                default:
                    printsv("ERROR External_2_IRQHandler Unknown-Service ", incommingPacket.service);
80007e78:	800227b7          	lui	a5,0x80022
80007e7c:	35478793          	addi	a5,a5,852 # 80022354 <__stack_top+0xfffdbbe4>
80007e80:	0087a783          	lw	a5,8(a5)
80007e84:	00078593          	mv	a1,a5
80007e88:	800097b7          	lui	a5,0x80009
80007e8c:	c5c78513          	addi	a0,a5,-932 # 80008c5c <__stack_top+0xfffc24ec>
80007e90:	a48fe0ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:684
                    HW_set_32bit_reg(NI_RX, DONE);
80007e94:	800057b7          	lui	a5,0x80005
80007e98:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffbede5>
80007e9c:	500007b7          	lui	a5,0x50000
80007ea0:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007ea4:	8f0f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:685
                    prints("14NI_RX DONE!\n");
80007ea8:	800097b7          	lui	a5,0x80009
80007eac:	c8c78513          	addi	a0,a5,-884 # 80008c8c <__stack_top+0xfffc251c>
80007eb0:	97cfe0ef          	jal	ra,8000602c <prints>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:686
                    break;
80007eb4:	0080006f          	j	80007ebc <API_NI_Handler+0x954>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:688
            }
        }
80007eb8:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:689
        vTaskExitCritical();
80007ebc:	820fb0ef          	jal	ra,80002edc <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:691

        vTaskEnterCritical();
80007ec0:	fe1fa0ef          	jal	ra,80002ea0 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:692
        if (HW_get_32bit_reg(NI_TIMER) == NI_STATUS_INTER){
80007ec4:	500007b7          	lui	a5,0x50000
80007ec8:	01078513          	addi	a0,a5,16 # 50000010 <RAM_SIZE+0x4ff80010>
80007ecc:	8d0f90ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80007ed0:	00050713          	mv	a4,a0
80007ed4:	000017b7          	lui	a5,0x1
80007ed8:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
80007edc:	00f71e63          	bne	a4,a5,80007ef8 <API_NI_Handler+0x990>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:693
            powerEstimation();
80007ee0:	be9fd0ef          	jal	ra,80005ac8 <powerEstimation>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:694
            HW_set_32bit_reg(NI_TIMER, DONE);
80007ee4:	800057b7          	lui	a5,0x80005
80007ee8:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffbede5>
80007eec:	500007b7          	lui	a5,0x50000
80007ef0:	01078513          	addi	a0,a5,16 # 50000010 <RAM_SIZE+0x4ff80010>
80007ef4:	8a0f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:696
        }
        vTaskExitCritical();
80007ef8:	fe5fa0ef          	jal	ra,80002edc <vTaskExitCritical>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:701

    //} while( HW_get_32bit_reg(NI_RX) == NI_STATUS_INTER || HW_get_32bit_reg(NI_RX) == NI_STATUS_WAITING || HW_get_32bit_reg(NI_TX) == NI_STATUS_INTER);
    
    
    return;
80007efc:	00000013          	nop
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:702
80007f00:	01c12083          	lw	ra,28(sp)
80007f04:	01812403          	lw	s0,24(sp)
80007f08:	02010113          	addi	sp,sp,32
80007f0c:	00008067          	ret

80007f10 <PLIC_init>:
PLIC_init():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:124
{
80007f10:	fe010113          	addi	sp,sp,-32
80007f14:	00812e23          	sw	s0,28(sp)
80007f18:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:126
    unsigned long hart_id = read_csr(mhartid);
80007f1c:	f14027f3          	csrr	a5,mhartid
80007f20:	fef42423          	sw	a5,-24(s0)
80007f24:	fe842783          	lw	a5,-24(s0)
80007f28:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
80007f2c:	fe042623          	sw	zero,-20(s0)
80007f30:	03c0006f          	j	80007f6c <PLIC_init+0x5c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:131 (discriminator 3)
        PLIC->TARGET_ENABLES[hart_id].ENABLES[inc] = 0;
80007f34:	40000737          	lui	a4,0x40000
80007f38:	fe442783          	lw	a5,-28(s0)
80007f3c:	00579693          	slli	a3,a5,0x5
80007f40:	fec42783          	lw	a5,-20(s0)
80007f44:	00f686b3          	add	a3,a3,a5
80007f48:	000017b7          	lui	a5,0x1
80007f4c:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80007f50:	00f687b3          	add	a5,a3,a5
80007f54:	00279793          	slli	a5,a5,0x2
80007f58:	00f707b3          	add	a5,a4,a5
80007f5c:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 3)
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
80007f60:	fec42783          	lw	a5,-20(s0)
80007f64:	00178793          	addi	a5,a5,1
80007f68:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 1)
80007f6c:	fec42783          	lw	a5,-20(s0)
80007f70:	fc0782e3          	beqz	a5,80007f34 <PLIC_init+0x24>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
80007f74:	fe042623          	sw	zero,-20(s0)
80007f78:	0240006f          	j	80007f9c <PLIC_init+0x8c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:139 (discriminator 3)
        PLIC->SOURCE_PRIORITY[inc] = 0;
80007f7c:	40000737          	lui	a4,0x40000
80007f80:	fec42783          	lw	a5,-20(s0)
80007f84:	00279793          	slli	a5,a5,0x2
80007f88:	00f707b3          	add	a5,a4,a5
80007f8c:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 3)
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
80007f90:	fec42783          	lw	a5,-20(s0)
80007f94:	00178793          	addi	a5,a5,1
80007f98:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 1)
80007f9c:	fec42703          	lw	a4,-20(s0)
80007fa0:	01e00793          	li	a5,30
80007fa4:	fce7fce3          	bleu	a4,a5,80007f7c <PLIC_init+0x6c>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:143
    PLIC->TARGET[hart_id].PRIORITY_THRESHOLD = 0;
80007fa8:	40000737          	lui	a4,0x40000
80007fac:	fe442783          	lw	a5,-28(s0)
80007fb0:	20078793          	addi	a5,a5,512
80007fb4:	00c79793          	slli	a5,a5,0xc
80007fb8:	00f707b3          	add	a5,a4,a5
80007fbc:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:146
    set_csr(mie, MIP_MEIP);
80007fc0:	000017b7          	lui	a5,0x1
80007fc4:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80007fc8:	3047a7f3          	csrrs	a5,mie,a5
80007fcc:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:147
}
80007fd0:	00000013          	nop
80007fd4:	01c12403          	lw	s0,28(sp)
80007fd8:	02010113          	addi	sp,sp,32
80007fdc:	00008067          	ret

80007fe0 <main>:
main():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:60
extern volatile unsigned int NI_IRCount;

/*-----------------------------------------------------------*/

int main( void )
{
80007fe0:	fd010113          	addi	sp,sp,-48
80007fe4:	02112623          	sw	ra,44(sp)
80007fe8:	02812423          	sw	s0,40(sp)
80007fec:	03010413          	addi	s0,sp,48
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:62
	char str[20];
    PLIC_init();
80007ff0:	f21ff0ef          	jal	ra,80007f10 <PLIC_init>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:68

    /**************************************************************************
    * Initialize CoreUART with its base address, baud value, and line
    * configuration.
    *************************************************************************/
    UART_init(&g_uart, COREUARTAPB0_BASE_ADDR, BAUD_VALUE_115200,
80007ff4:	00100693          	li	a3,1
80007ff8:	02c00613          	li	a2,44
80007ffc:	700015b7          	lui	a1,0x70001
80008000:	800267b7          	lui	a5,0x80026
80008004:	76478513          	addi	a0,a5,1892 # 80026764 <__stack_top+0xfffdfff4>
80008008:	864f90ef          	jal	ra,8000106c <UART_init>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:74
             (DATA_8_BITS | NO_PARITY) );
    
	/**************************************************************************
    * Initialize the Chronos platform stuff
    *************************************************************************/
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n Chronos platform initializing... \n" );
8000800c:	800097b7          	lui	a5,0x80009
80008010:	cb478593          	addi	a1,a5,-844 # 80008cb4 <__stack_top+0xfffc2544>
80008014:	800267b7          	lui	a5,0x80026
80008018:	76478513          	addi	a0,a5,1892 # 80026764 <__stack_top+0xfffdfff4>
8000801c:	a1cf90ef          	jal	ra,80001238 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:75
	Chronos_init();
80008020:	f19fd0ef          	jal	ra,80005f38 <Chronos_init>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:76
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This terminal belongs to the address: " );
80008024:	800097b7          	lui	a5,0x80009
80008028:	cdc78593          	addi	a1,a5,-804 # 80008cdc <__stack_top+0xfffc256c>
8000802c:	800267b7          	lui	a5,0x80026
80008030:	76478513          	addi	a0,a5,1892 # 80026764 <__stack_top+0xfffdfff4>
80008034:	a04f90ef          	jal	ra,80001238 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:77
	myItoa(ProcessorAddr, str, 16);
80008038:	800267b7          	lui	a5,0x80026
8000803c:	76c7a783          	lw	a5,1900(a5) # 8002676c <__stack_top+0xfffdfffc>
80008040:	00078713          	mv	a4,a5
80008044:	fdc40793          	addi	a5,s0,-36
80008048:	01000613          	li	a2,16
8000804c:	00078593          	mv	a1,a5
80008050:	00070513          	mv	a0,a4
80008054:	b00fe0ef          	jal	ra,80006354 <myItoa>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:78
    UART_polled_tx_string( &g_uart, (const uint8_t *)str); UART_polled_tx_string( &g_uart, (const uint8_t *)"\n");
80008058:	fdc40793          	addi	a5,s0,-36
8000805c:	00078593          	mv	a1,a5
80008060:	800267b7          	lui	a5,0x80026
80008064:	76478513          	addi	a0,a5,1892 # 80026764 <__stack_top+0xfffdfff4>
80008068:	9d0f90ef          	jal	ra,80001238 <UART_polled_tx_string>
8000806c:	800097b7          	lui	a5,0x80009
80008070:	d0878593          	addi	a1,a5,-760 # 80008d08 <__stack_top+0xfffc2598>
80008074:	800267b7          	lui	a5,0x80026
80008078:	76478513          	addi	a0,a5,1892 # 80026764 <__stack_top+0xfffdfff4>
8000807c:	9bcf90ef          	jal	ra,80001238 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:83
	
	//xTaskCreate( NI_TX_Handler, "TXHandler", 1024*4, NULL, (tskIDLE_PRIORITY + 1), NULL);
	//xTaskCreate( NI_RX_Handler, "RXHandler", 1024*3, NULL, (tskIDLE_PRIORITY + 1), NULL);

	if (ProcessorAddr == 0x0000){
80008080:	800267b7          	lui	a5,0x80026
80008084:	76c7a783          	lw	a5,1900(a5) # 8002676c <__stack_top+0xfffdfffc>
80008088:	04079663          	bnez	a5,800080d4 <main+0xf4>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:84
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is the Global Master: \n" );
8000808c:	800097b7          	lui	a5,0x80009
80008090:	d0c78593          	addi	a1,a5,-756 # 80008d0c <__stack_top+0xfffc259c>
80008094:	800267b7          	lui	a5,0x80026
80008098:	76478513          	addi	a0,a5,1892 # 80026764 <__stack_top+0xfffdfff4>
8000809c:	99cf90ef          	jal	ra,80001238 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:86
		/* Create the GlobalManager task */
		xTaskCreate( GlobalManagerTask, "GlobalMaster", 1024*6, NULL, (tskIDLE_PRIORITY + 1), NULL );
800080a0:	00000893          	li	a7,0
800080a4:	00000813          	li	a6,0
800080a8:	00000793          	li	a5,0
800080ac:	00100713          	li	a4,1
800080b0:	00000693          	li	a3,0
800080b4:	00002637          	lui	a2,0x2
800080b8:	80060613          	addi	a2,a2,-2048 # 1800 <HEAP_SIZE-0xe800>
800080bc:	800095b7          	lui	a1,0x80009
800080c0:	d3858593          	addi	a1,a1,-712 # 80008d38 <__stack_top+0xfffc25c8>
800080c4:	80008537          	lui	a0,0x80008
800080c8:	13450513          	addi	a0,a0,308 # 80008134 <__stack_top+0xfffc19c4>
800080cc:	ea1f90ef          	jal	ra,80001f6c <xTaskGenericCreate>
800080d0:	0180006f          	j	800080e8 <main+0x108>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:88
	} else {
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is a Slave: \n" );
800080d4:	800097b7          	lui	a5,0x80009
800080d8:	d4878593          	addi	a1,a5,-696 # 80008d48 <__stack_top+0xfffc25d8>
800080dc:	800267b7          	lui	a5,0x80026
800080e0:	76478513          	addi	a0,a5,1892 # 80026764 <__stack_top+0xfffdfff4>
800080e4:	954f90ef          	jal	ra,80001238 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:96
		//xTaskCreate( vUartAliveTask, "Alive", 1024, NULL, (tskIDLE_PRIORITY), NULL );
	}
	//xTaskCreate( NI_Handler, "Handler", 1024*6, NULL, (tskIDLE_PRIORITY + 2), NULL );

	/* Start the kernel.  From here on, only tasks and interrupts will run. */
	vTaskStartScheduler();
800080e8:	bb4fa0ef          	jal	ra,8000249c <vTaskStartScheduler>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:99

	/* Exit FreeRTOS */
	return 0;
800080ec:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:100
}
800080f0:	00078513          	mv	a0,a5
800080f4:	02c12083          	lw	ra,44(sp)
800080f8:	02812403          	lw	s0,40(sp)
800080fc:	03010113          	addi	sp,sp,48
80008100:	00008067          	ret

80008104 <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:105

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
80008104:	ff010113          	addi	sp,sp,-16
80008108:	00812623          	sw	s0,12(sp)
8000810c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:116
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
80008110:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:117 (discriminator 1)
	for( ;; );
80008114:	0000006f          	j	80008114 <vApplicationMallocFailedHook+0x10>

80008118 <vApplicationIdleHook>:
vApplicationIdleHook():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:122
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
80008118:	ff010113          	addi	sp,sp,-16
8000811c:	00812623          	sw	s0,12(sp)
80008120:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:132
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
80008124:	00000013          	nop
80008128:	00c12403          	lw	s0,12(sp)
8000812c:	01010113          	addi	sp,sp,16
80008130:	00008067          	ret

80008134 <GlobalManagerTask>:
GlobalManagerTask():
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:190
	// }
}

/*-----------------------------------------------------------*/

static void GlobalManagerTask( void *pvParameters ){
80008134:	fc010113          	addi	sp,sp,-64
80008138:	02112e23          	sw	ra,60(sp)
8000813c:	02812c23          	sw	s0,56(sp)
80008140:	04010413          	addi	s0,sp,64
80008144:	fca42623          	sw	a0,-52(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:196
	( void ) pvParameters;
	int tick;
	char str[20];

	// Initialize the priority vector with the pattern policy
	GeneratePatternMatrix();
80008148:	ae8fb0ef          	jal	ra,80003430 <GeneratePatternMatrix>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:199

	// Initialize the System Tiles Info
	API_TilesReset();
8000814c:	9bcfb0ef          	jal	ra,80003308 <API_TilesReset>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:202

	// Initialize the applications vector
    API_ApplicationsReset();
80008150:	958fb0ef          	jal	ra,800032a8 <API_ApplicationsReset>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:205

	// Informs the Repository that the GLOBALMASTER is ready to receive the application info
	API_RepositoryWakeUp();
80008154:	dd9fa0ef          	jal	ra,80002f2c <API_RepositoryWakeUp>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:208

	for(;;){
		tick = xTaskGetTickCount();
80008158:	d5cfa0ef          	jal	ra,800026b4 <xTaskGetTickCount>
8000815c:	00050793          	mv	a5,a0
80008160:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:209
		myItoa(tick, str, 10);
80008164:	fd840793          	addi	a5,s0,-40
80008168:	00a00613          	li	a2,10
8000816c:	00078593          	mv	a1,a5
80008170:	fec42503          	lw	a0,-20(s0)
80008174:	9e0fe0ef          	jal	ra,80006354 <myItoa>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:210
		UART_polled_tx_string( &g_uart, (const uint8_t *)str);
80008178:	fd840793          	addi	a5,s0,-40
8000817c:	00078593          	mv	a1,a5
80008180:	800267b7          	lui	a5,0x80026
80008184:	76478513          	addi	a0,a5,1892 # 80026764 <__stack_top+0xfffdfff4>
80008188:	8b0f90ef          	jal	ra,80001238 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:211
		printsv("GlobalMasterActive", tick);
8000818c:	fec42583          	lw	a1,-20(s0)
80008190:	800097b7          	lui	a5,0x80009
80008194:	d7478513          	addi	a0,a5,-652 # 80008d74 <__stack_top+0xfffc2604>
80008198:	f41fd0ef          	jal	ra,800060d8 <printsv>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:212
		UART_polled_tx_string( &g_uart, (const uint8_t *)" GlobalMasterRoutine...\r\n" );
8000819c:	800097b7          	lui	a5,0x80009
800081a0:	d8878593          	addi	a1,a5,-632 # 80008d88 <__stack_top+0xfffc2618>
800081a4:	800267b7          	lui	a5,0x80026
800081a8:	76478513          	addi	a0,a5,1892 # 80026764 <__stack_top+0xfffdfff4>
800081ac:	88cf90ef          	jal	ra,80001238 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:215

		// Checks if there is some task to allocate...
		API_AllocateTasks(tick);
800081b0:	fec42783          	lw	a5,-20(s0)
800081b4:	00078513          	mv	a0,a5
800081b8:	b20fb0ef          	jal	ra,800034d8 <API_AllocateTasks>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:218
		
		// Checks if there is some task to start...
		API_StartTasks();
800081bc:	ad8fc0ef          	jal	ra,80004494 <API_StartTasks>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:220

		if(API_SystemFinish){
800081c0:	9901a783          	lw	a5,-1648(gp) # 80008f40 <API_SystemFinish>
800081c4:	00078c63          	beqz	a5,800081dc <GlobalManagerTask+0xa8>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:221
			vTaskDelay(200); // to cool down the system
800081c8:	0c800513          	li	a0,200
800081cc:	898fa0ef          	jal	ra,80002264 <vTaskDelay>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:222
			_exit(0xfe10);
800081d0:	000107b7          	lui	a5,0x10
800081d4:	e1078513          	addi	a0,a5,-496 # fe10 <HEAP_SIZE-0x1f0>
800081d8:	c05f80ef          	jal	ra,80000ddc <_exit>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:225
		}
		else{
			vTaskDelay(1);
800081dc:	00100513          	li	a0,1
800081e0:	884fa0ef          	jal	ra,80002264 <vTaskDelay>
/casa/workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:208
		tick = xTaskGetTickCount();
800081e4:	f75ff06f          	j	80008158 <GlobalManagerTask+0x24>

800081e8 <write>:
write():
800081e8:	00001797          	auipc	a5,0x1
800081ec:	bd878793          	addi	a5,a5,-1064 # 80008dc0 <_impure_ptr>
800081f0:	00060693          	mv	a3,a2
800081f4:	00058613          	mv	a2,a1
800081f8:	00050593          	mv	a1,a0
800081fc:	0007a503          	lw	a0,0(a5)
80008200:	0040006f          	j	80008204 <_write_r>

80008204 <_write_r>:
_write_r():
80008204:	ff010113          	addi	sp,sp,-16
80008208:	00812423          	sw	s0,8(sp)
8000820c:	00050413          	mv	s0,a0
80008210:	00058513          	mv	a0,a1
80008214:	00060593          	mv	a1,a2
80008218:	00068613          	mv	a2,a3
8000821c:	0001a797          	auipc	a5,0x1a
80008220:	3e07a423          	sw	zero,1000(a5) # 80022604 <errno>
80008224:	00112623          	sw	ra,12(sp)
80008228:	c85f80ef          	jal	ra,80000eac <_write>
8000822c:	fff00793          	li	a5,-1
80008230:	00f51c63          	bne	a0,a5,80008248 <_write_r+0x44>
80008234:	0001a797          	auipc	a5,0x1a
80008238:	3d078793          	addi	a5,a5,976 # 80022604 <errno>
8000823c:	0007a783          	lw	a5,0(a5)
80008240:	00078463          	beqz	a5,80008248 <_write_r+0x44>
80008244:	00f42023          	sw	a5,0(s0)
80008248:	00c12083          	lw	ra,12(sp)
8000824c:	00812403          	lw	s0,8(sp)
80008250:	01010113          	addi	sp,sp,16
80008254:	00008067          	ret
	...
80008260:	6568                	flw	fa0,76(a0)
80008262:	6c6c                	flw	fa1,92(s0)
80008264:	0000006f          	j	80008264 <_write_r+0x60>
80008268:	6544                	flw	fs1,12(a0)
8000826a:	6574                	flw	fa3,76(a0)
8000826c:	69657463          	bleu	s6,a0,800088f4 <loadStoreDyn+0x15c>
80008270:	7520                	flw	fs0,104(a0)
80008272:	616d                	addi	sp,sp,240
80008274:	6320                	flw	fs0,64(a4)
80008276:	6168                	flw	fa0,68(a0)
80008278:	616d                	addi	sp,sp,240
8000827a:	6164                	flw	fs1,68(a0)
8000827c:	5420                	lw	s0,104(s0)
8000827e:	5345                	li	t1,-15
80008280:	4554                	lw	a3,12(a0)
80008282:	6420                	flw	fs0,72(s0)
80008284:	2065                	jal	8000832c <_write_r+0x128>
80008286:	74736973          	csrrsi	s2,0x747,6
8000828a:	6d65                	lui	s10,0x19
8000828c:	2161                	jal	80008714 <_write_r+0x510>
8000828e:	000a                	c.slli	zero,0x2
80008290:	7261                	lui	tp,0xffff8
80008292:	00203067          	0x203067
80008296:	0000                	unimp
80008298:	7261                	lui	tp,0xffff8
8000829a:	00203167          	0x203167
8000829e:	0000                	unimp
800082a0:	7261                	lui	tp,0xffff8
800082a2:	00203267          	0x203267
800082a6:	0000                	unimp
800082a8:	7261                	lui	tp,0xffff8
800082aa:	00203367          	0x203367
800082ae:	0000                	unimp
800082b0:	7261                	lui	tp,0xffff8
800082b2:	00203467          	0x203467
800082b6:	0000                	unimp
800082b8:	7974                	flw	fa3,116(a0)
800082ba:	6570                	flw	fa2,76(a0)
800082bc:	0020                	addi	s0,sp,8
800082be:	0000                	unimp
800082c0:	74737953          	0x74737953
800082c4:	6d65                	lui	s10,0x19
800082c6:	6c6c6163          	bltu	s8,t1,80008988 <loadStoreDyn+0x1f0>
800082ca:	6e20                	flw	fs0,88(a2)
800082cc:	206fa3c3          	fmadd.s	ft7,ft11,ft6,ft4,rdn
800082d0:	6469                	lui	s0,0x1a
800082d2:	6e65                	lui	t3,0x19
800082d4:	6974                	flw	fa3,84(a0)
800082d6:	6966                	flw	fs2,88(sp)
800082d8:	61646163          	bltu	s0,s6,800088da <loadStoreDyn+0x142>
800082dc:	0a21                	addi	s4,s4,8
800082de:	0000                	unimp
800082e0:	7274                	flw	fa3,100(a2)
800082e2:	7061                	c.lui	zero,0xffff8
800082e4:	000a                	c.slli	zero,0x2
800082e6:	0000                	unimp
800082e8:	7065                	c.lui	zero,0xffff9
800082ea:	00203a63          	0x203a63
800082ee:	0000                	unimp
800082f0:	636d                	lui	t1,0x1b
800082f2:	7561                	lui	a0,0xffff8
800082f4:	203a6573          	csrrsi	a0,hideleg,20
800082f8:	0000                	unimp
800082fa:	0000                	unimp
800082fc:	0700                	addi	s0,sp,896
800082fe:	8000                	0x8000
80008300:	0708                	addi	a0,sp,896
80008302:	8000                	0x8000
80008304:	0708                	addi	a0,sp,896
80008306:	8000                	0x8000
80008308:	0708                	addi	a0,sp,896
8000830a:	8000                	0x8000
8000830c:	0708                	addi	a0,sp,896
8000830e:	8000                	0x8000
80008310:	0708                	addi	a0,sp,896
80008312:	8000                	0x8000
80008314:	0708                	addi	a0,sp,896
80008316:	8000                	0x8000
80008318:	0708                	addi	a0,sp,896
8000831a:	8000                	0x8000
8000831c:	0708                	addi	a0,sp,896
8000831e:	8000                	0x8000
80008320:	0708                	addi	a0,sp,896
80008322:	8000                	0x8000
80008324:	06e0                	addi	s0,sp,844
80008326:	8000                	0x8000
80008328:	0708                	addi	a0,sp,896
8000832a:	8000                	0x8000
8000832c:	0708                	addi	a0,sp,896
8000832e:	8000                	0x8000
80008330:	0708                	addi	a0,sp,896
80008332:	8000                	0x8000
80008334:	0708                	addi	a0,sp,896
80008336:	8000                	0x8000
80008338:	0708                	addi	a0,sp,896
8000833a:	8000                	0x8000
8000833c:	0708                	addi	a0,sp,896
8000833e:	8000                	0x8000
80008340:	0708                	addi	a0,sp,896
80008342:	8000                	0x8000
80008344:	0708                	addi	a0,sp,896
80008346:	8000                	0x8000
80008348:	0708                	addi	a0,sp,896
8000834a:	8000                	0x8000
8000834c:	06f0                	addi	a2,sp,844
8000834e:	8000                	0x8000
80008350:	0708                	addi	a0,sp,896
80008352:	8000                	0x8000
80008354:	0708                	addi	a0,sp,896
80008356:	8000                	0x8000
80008358:	0708                	addi	a0,sp,896
8000835a:	8000                	0x8000
8000835c:	0708                	addi	a0,sp,896
8000835e:	8000                	0x8000
80008360:	0708                	addi	a0,sp,896
80008362:	8000                	0x8000
80008364:	0708                	addi	a0,sp,896
80008366:	8000                	0x8000
80008368:	0708                	addi	a0,sp,896
8000836a:	8000                	0x8000
8000836c:	0708                	addi	a0,sp,896
8000836e:	8000                	0x8000
80008370:	0708                	addi	a0,sp,896
80008372:	8000                	0x8000
80008374:	06a4                	addi	s1,sp,840
80008376:	8000                	0x8000
80008378:	0708                	addi	a0,sp,896
8000837a:	8000                	0x8000
8000837c:	0708                	addi	a0,sp,896
8000837e:	8000                	0x8000
80008380:	0708                	addi	a0,sp,896
80008382:	8000                	0x8000
80008384:	0708                	addi	a0,sp,896
80008386:	8000                	0x8000
80008388:	0708                	addi	a0,sp,896
8000838a:	8000                	0x8000
8000838c:	0708                	addi	a0,sp,896
8000838e:	8000                	0x8000
80008390:	0708                	addi	a0,sp,896
80008392:	8000                	0x8000
80008394:	0708                	addi	a0,sp,896
80008396:	8000                	0x8000
80008398:	0708                	addi	a0,sp,896
8000839a:	8000                	0x8000
8000839c:	0680                	addi	s0,sp,832
8000839e:	8000                	0x8000
800083a0:	0708                	addi	a0,sp,896
800083a2:	8000                	0x8000
800083a4:	0708                	addi	a0,sp,896
800083a6:	8000                	0x8000
800083a8:	0708                	addi	a0,sp,896
800083aa:	8000                	0x8000
800083ac:	0708                	addi	a0,sp,896
800083ae:	8000                	0x8000
800083b0:	0708                	addi	a0,sp,896
800083b2:	8000                	0x8000
800083b4:	0708                	addi	a0,sp,896
800083b6:	8000                	0x8000
800083b8:	0708                	addi	a0,sp,896
800083ba:	8000                	0x8000
800083bc:	0708                	addi	a0,sp,896
800083be:	8000                	0x8000
800083c0:	0708                	addi	a0,sp,896
800083c2:	8000                	0x8000
800083c4:	0708                	addi	a0,sp,896
800083c6:	8000                	0x8000
800083c8:	0708                	addi	a0,sp,896
800083ca:	8000                	0x8000
800083cc:	0708                	addi	a0,sp,896
800083ce:	8000                	0x8000
800083d0:	0708                	addi	a0,sp,896
800083d2:	8000                	0x8000
800083d4:	0708                	addi	a0,sp,896
800083d6:	8000                	0x8000
800083d8:	0708                	addi	a0,sp,896
800083da:	8000                	0x8000
800083dc:	05f8                	addi	a4,sp,716
800083de:	8000                	0x8000
800083e0:	7830                	flw	fa2,112(s0)
800083e2:	0000                	unimp
800083e4:	500a                	0x500a
800083e6:	6f72                	flw	ft10,28(sp)
800083e8:	206d6167          	0x206d6167
800083ec:	6168                	flw	fa0,68(a0)
800083ee:	78652073          	csrs	0x786,a0
800083f2:	7469                	lui	s0,0xffffa
800083f4:	6465                	lui	s0,0x19
800083f6:	7720                	flw	fs0,104(a4)
800083f8:	7469                	lui	s0,0xffffa
800083fa:	2068                	fld	fa0,192(s0)
800083fc:	65646f63          	bltu	s0,s6,80008a5a <loadStoreDyn+0x2c2>
80008400:	003a                	c.slli	zero,0xe
80008402:	0000                	unimp
80008404:	000d                	c.nop	3
80008406:	0000                	unimp
80008408:	4449                	li	s0,18
8000840a:	454c                	lw	a1,12(a0)
8000840c:	0000                	unimp
8000840e:	0000                	unimp
80008410:	654e                	flw	fa0,208(sp)
80008412:	70612077          	0x70612077
80008416:	6c70                	flw	fa2,92(s0)
80008418:	6369                	lui	t1,0x1a
8000841a:	7461                	lui	s0,0xffff8
8000841c:	6f69                	lui	t5,0x1a
8000841e:	206e                	fld	ft0,216(sp)
80008420:	6572                	flw	fa0,28(sp)
80008422:	74736967          	0x74736967
80008426:	7265                	lui	tp,0xffff9
80008428:	6465                	lui	s0,0x19
8000842a:	2d20                	fld	fs0,88(a0)
8000842c:	4920                	lw	s0,80(a0)
8000842e:	3a44                	fld	fs1,176(a2)
80008430:	0020                	addi	s0,sp,8
80008432:	0000                	unimp
80008434:	6572                	flw	fa0,28(sp)
80008436:	7574                	flw	fa3,108(a0)
80008438:	6e72                	flw	ft8,28(sp)
8000843a:	6e69                	lui	t3,0x1a
8000843c:	72652067          	0x72652067
80008440:	6f72                	flw	ft10,28(sp)
80008442:	00000a33          	add	s4,zero,zero
80008446:	0000                	unimp
80008448:	6572                	flw	fa0,28(sp)
8000844a:	7574                	flw	fa3,108(a0)
8000844c:	6e72                	flw	ft8,28(sp)
8000844e:	6e69                	lui	t3,0x1a
80008450:	72652067          	0x72652067
80008454:	6f72                	flw	ft10,28(sp)
80008456:	0a34                	addi	a3,sp,280
80008458:	0000                	unimp
8000845a:	0000                	unimp
8000845c:	6174                	flw	fa3,68(a0)
8000845e:	69206b73          	csrrsi	s6,0x692,0
80008462:	00203a73          	csrrc	s4,frm,zero
80008466:	0000                	unimp
80008468:	63656863          	bltu	a0,s6,80008a98 <loadStoreDyn+0x300>
8000846c:	676e696b          	0x676e696b
80008470:	0020                	addi	s0,sp,8
80008472:	0000                	unimp
80008474:	7266                	flw	ft4,120(sp)
80008476:	61206d6f          	jal	s10,8000ea88 <__global_pointer$+0x54d8>
8000847a:	7070                	flw	fa2,100(s0)
8000847c:	203a                	fld	ft0,392(sp)
8000847e:	0000                	unimp
80008480:	20736177          	0x20736177
80008484:	7865                	lui	a6,0xffff9
80008486:	6365                	lui	t1,0x19
80008488:	7475                	lui	s0,0xffffd
8000848a:	6465                	lui	s0,0x19
8000848c:	6920                	flw	fs0,80(a0)
8000848e:	206e                	fld	ft0,216(sp)
80008490:	0000                	unimp
80008492:	0000                	unimp
80008494:	7041                	c.lui	zero,0xffff0
80008496:	6c70                	flw	fa2,92(s0)
80008498:	6369                	lui	t1,0x1a
8000849a:	7461                	lui	s0,0xffff8
8000849c:	6f69                	lui	t5,0x1a
8000849e:	206e                	fld	ft0,216(sp)
800084a0:	0000                	unimp
800084a2:	0000                	unimp
800084a4:	0909                	addi	s2,s2,2
800084a6:	6854                	flw	fa3,20(s0)
800084a8:	7369                	lui	t1,0xffffa
800084aa:	6120                	flw	fs0,64(a0)
800084ac:	7070                	flw	fa2,100(s0)
800084ae:	696c                	flw	fa1,84(a0)
800084b0:	69746163          	bltu	s0,s7,80008b32 <loadStoreDyn+0x39a>
800084b4:	73206e6f          	jal	t3,8000ebe6 <__global_pointer$+0x5636>
800084b8:	6974                	flw	fa3,84(a0)
800084ba:	6c6c                	flw	fa1,92(s0)
800084bc:	6e20                	flw	fs0,88(a2)
800084be:	6565                	lui	a0,0x19
800084c0:	2064                	fld	fs1,192(s0)
800084c2:	6f74                	flw	fa3,92(a4)
800084c4:	7220                	flw	fs0,96(a2)
800084c6:	6e75                	lui	t3,0x1d
800084c8:	203a                	fld	ft0,392(sp)
800084ca:	0000                	unimp
800084cc:	0909                	addi	s2,s2,2
800084ce:	6854                	flw	fa3,20(s0)
800084d0:	7369                	lui	t1,0xffffa
800084d2:	6120                	flw	fs0,64(a0)
800084d4:	7070                	flw	fa2,100(s0)
800084d6:	696c                	flw	fa1,84(a0)
800084d8:	69746163          	bltu	s0,s7,80008b5a <loadStoreDyn+0x3c2>
800084dc:	69206e6f          	jal	t3,8000eb6e <__global_pointer$+0x55be>
800084e0:	4f442073          	csrs	0x4f4,s0
800084e4:	454e                	lw	a0,208(sp)
800084e6:	0a21                	addi	s4,s4,8
800084e8:	0000                	unimp
800084ea:	0000                	unimp
800084ec:	6572                	flw	fa0,28(sp)
800084ee:	7574                	flw	fa3,108(a0)
800084f0:	6e72                	flw	ft8,28(sp)
800084f2:	6e69                	lui	t3,0x1a
800084f4:	72652067          	0x72652067
800084f8:	6f72                	flw	ft10,28(sp)
800084fa:	0a35                	addi	s4,s4,13
800084fc:	0000                	unimp
800084fe:	0000                	unimp
80008500:	6572                	flw	fa0,28(sp)
80008502:	7574                	flw	fa3,108(a0)
80008504:	6e72                	flw	ft8,28(sp)
80008506:	6e69                	lui	t3,0x1a
80008508:	72652067          	0x72652067
8000850c:	6f72                	flw	ft10,28(sp)
8000850e:	0a36                	slli	s4,s4,0xd
80008510:	0000                	unimp
80008512:	0000                	unimp
80008514:	2049                	jal	80008596 <_write_r+0x392>
80008516:	20746f67          	0x20746f67
8000851a:	2061                	jal	800085a2 <_write_r+0x39e>
8000851c:	7266                	flw	ft4,120(sp)
8000851e:	6565                	lui	a0,0x19
80008520:	7320                	flw	fs0,96(a4)
80008522:	7265                	lui	tp,0xffff9
80008524:	6976                	flw	fs2,92(sp)
80008526:	73206563          	bltu	zero,s2,80008c50 <loadStoreDyn+0x4b8>
8000852a:	6f6c                	flw	fa1,92(a4)
8000852c:	212d                	jal	80008956 <loadStoreDyn+0x1be>
8000852e:	2021                	jal	80008536 <_write_r+0x332>
80008530:	3e2d                	jal	8000806a <main+0x8a>
80008532:	0020                	addi	s0,sp,8
80008534:	72617453          	0x72617453
80008538:	6974                	flw	fa3,84(a0)
8000853a:	676e                	flw	fa4,216(sp)
8000853c:	4120                	lw	s0,64(a0)
8000853e:	7070                	flw	fa2,100(s0)
80008540:	696c                	flw	fa1,84(a0)
80008542:	69746163          	bltu	s0,s7,80008bc4 <loadStoreDyn+0x42c>
80008546:	203a6e6f          	jal	t3,800aef48 <__stack_top+0x687d8>
8000854a:	0000                	unimp
8000854c:	7345                	lui	t1,0xffff1
8000854e:	6570                	flw	fa2,76(a0)
80008550:	6172                	flw	ft2,28(sp)
80008552:	646e                	flw	fs0,216(sp)
80008554:	2e2e2e6f          	jal	t3,800ea836 <__stack_top+0xa40c6>
80008558:	000a                	c.slli	zero,0x2
8000855a:	0000                	unimp
8000855c:	646e6553          	0x646e6553
80008560:	6e69                	lui	t3,0x1a
80008562:	41542067          	0x41542067
80008566:	535f4b53          	0x535f4b53
8000856a:	4154                	lw	a3,4(a0)
8000856c:	5452                	lw	s0,52(sp)
8000856e:	7420                	flw	fs0,104(s0)
80008570:	6174206f          	j	8004b386 <__stack_top+0x4c16>
80008574:	00206b73          	csrrsi	s6,frm,0
80008578:	7041                	c.lui	zero,0xffff0
8000857a:	6c70                	flw	fa2,92(s0)
8000857c:	6369                	lui	t1,0x1a
8000857e:	7461                	lui	s0,0xffff8
80008580:	6f69                	lui	t5,0x1a
80008582:	206e                	fld	ft0,216(sp)
80008584:	7369                	lui	t1,0xffffa
80008586:	6120                	flw	fs0,64(a0)
80008588:	6c6c                	flw	fa1,92(s0)
8000858a:	7461636f          	jal	t1,8001ecd0 <__global_pointer$+0x15720>
8000858e:	6465                	lui	s0,0x19
80008590:	203a                	fld	ft0,392(sp)
80008592:	0000                	unimp
80008594:	72617453          	0x72617453
80008598:	2074                	fld	fa3,192(s0)
8000859a:	6d6d6f63          	bltu	s10,s6,80008c78 <loadStoreDyn+0x4e0>
8000859e:	6e61                	lui	t3,0x18
800085a0:	2064                	fld	fs1,192(s0)
800085a2:	746e6573          	csrrsi	a0,0x746,28
800085a6:	7420                	flw	fs0,104(s0)
800085a8:	7665206f          	j	8005ad0e <__stack_top+0x1459e>
800085ac:	7265                	lui	tp,0xffff9
800085ae:	2079                	jal	8000863c <_write_r+0x438>
800085b0:	6174                	flw	fa3,68(a0)
800085b2:	2e2e6b73          	csrrsi	s6,0x2e2,28
800085b6:	0a2e                	slli	s4,s4,0xb
800085b8:	0000                	unimp
800085ba:	0000                	unimp
800085bc:	6572                	flw	fa0,28(sp)
800085be:	7574                	flw	fa3,108(a0)
800085c0:	6e72                	flw	ft8,28(sp)
800085c2:	6e69                	lui	t3,0x1a
800085c4:	72652067          	0x72652067
800085c8:	6f72                	flw	ft10,28(sp)
800085ca:	0a30                	addi	a2,sp,280
800085cc:	0000                	unimp
800085ce:	0000                	unimp
800085d0:	6572                	flw	fa0,28(sp)
800085d2:	7574                	flw	fa3,108(a0)
800085d4:	6e72                	flw	ft8,28(sp)
800085d6:	6e69                	lui	t3,0x1a
800085d8:	72652067          	0x72652067
800085dc:	6f72                	flw	ft10,28(sp)
800085de:	0a31                	addi	s4,s4,12
800085e0:	0000                	unimp
800085e2:	0000                	unimp
800085e4:	4544                	lw	s1,12(a0)
800085e6:	2055                	jal	8000868a <_write_r+0x486>
800085e8:	5552                	lw	a0,52(sp)
800085ea:	4d49                	li	s10,18
800085ec:	4e20                	lw	s0,88(a2)
800085ee:	5041204f          	fnmadd.s	ft0,ft2,ft4,fa0,rdn
800085f2:	5f49                	li	t5,-14
800085f4:	46746547          	fmsub.q	fa0,fs0,ft7,fs0,unknown
800085f8:	6572                	flw	fa0,28(sp)
800085fa:	5465                	li	s0,-7
800085fc:	7361                	lui	t1,0xffff8
800085fe:	6f6c536b          	0x6f6c536b
80008602:	2874                	fld	fa3,208(s0)
80008604:	0a29                	addi	s4,s4,10
80008606:	0000                	unimp
80008608:	20746f47          	fmsub.s	ft10,fs0,ft7,ft4,unknown
8000860c:	746f6c73          	csrrsi	s8,0x746,30
80008610:	203a                	fld	ft0,392(sp)
80008612:	0000                	unimp
80008614:	6154                	flw	fa3,4(a0)
80008616:	74206b73          	csrrsi	s6,0x742,0
8000861a:	6c61746f          	jal	s0,8001fce0 <__global_pointer$+0x16730>
8000861e:	7320                	flw	fs0,96(a4)
80008620:	7a69                	lui	s4,0xffffa
80008622:	2065                	jal	800086ca <_write_r+0x4c6>
80008624:	7428                	flw	fa0,104(s0)
80008626:	7478                	flw	fa4,108(s0)
80008628:	7373622b          	0x7373622b
8000862c:	3a29                	jal	80007f46 <PLIC_init+0x36>
8000862e:	0020                	addi	s0,sp,8
80008630:	6154                	flw	fa3,4(a0)
80008632:	61206b73          	csrrsi	s6,0x612,0
80008636:	6464                	flw	fs1,76(s0)
80008638:	3a72                	fld	fs4,312(sp)
8000863a:	0020                	addi	s0,sp,8
8000863c:	6572                	flw	fa0,28(sp)
8000863e:	7574                	flw	fa3,108(a0)
80008640:	6e72                	flw	ft8,28(sp)
80008642:	6e69                	lui	t3,0x1a
80008644:	72652067          	0x72652067
80008648:	6f72                	flw	ft10,28(sp)
8000864a:	0a32                	slli	s4,s4,0xc
8000864c:	0000                	unimp
8000864e:	0000                	unimp
80008650:	614c                	flw	fa1,4(a0)
80008652:	6154                	flw	fa3,4(a0)
80008654:	00006b73          	csrrsi	s6,ustatus,0
80008658:	5245                	li	tp,-15
8000865a:	4f52                	lw	t5,20(sp)
8000865c:	2052                	fld	ft0,272(sp)
8000865e:	202d                	jal	80008688 <_write_r+0x484>
80008660:	5041                	c.li	zero,-16
80008662:	5f49                	li	t5,-14
80008664:	6154                	flw	fa3,4(a0)
80008666:	74536b73          	csrrsi	s6,0x745,6
8000866a:	7261                	lui	tp,0xffff8
8000866c:	2174                	fld	fa3,192(a0)
8000866e:	2121                	jal	80008a76 <loadStoreDyn+0x2de>
80008670:	000a                	c.slli	zero,0x2
80008672:	0000                	unimp
80008674:	7061                	c.lui	zero,0xffff8
80008676:	3a70                	fld	fa2,240(a2)
80008678:	0020                	addi	s0,sp,8
8000867a:	0000                	unimp
8000867c:	6946                	flw	fs2,80(sp)
8000867e:	696e                	flw	fs2,216(sp)
80008680:	6e696873          	csrrsi	a6,0x6e6,18
80008684:	61742067          	0x61742067
80008688:	003a6b73          	csrrsi	s6,fcsr,20
8000868c:	7246                	flw	ft4,112(sp)
8000868e:	73206d6f          	jal	s10,8000edc0 <__global_pointer$+0x5810>
80008692:	6f6c                	flw	fa1,92(a4)
80008694:	3a74                	fld	fa3,240(a2)
80008696:	0020                	addi	s0,sp,8
80008698:	6564                	flw	fs1,76(a0)
8000869a:	656c                	flw	fa1,76(a0)
8000869c:	6574                	flw	fa3,76(a0)
8000869e:	2064                	fld	fs1,192(s0)
800086a0:	68746977          	0x68746977
800086a4:	7320                	flw	fs0,96(a4)
800086a6:	6375                	lui	t1,0x1d
800086a8:	73736573          	csrrsi	a0,0x737,6
800086ac:	2021                	jal	800086b4 <_write_r+0x4b0>
800086ae:	7246                	flw	ft4,112(sp)
800086b0:	61206d6f          	jal	s10,8000ecc2 <__global_pointer$+0x5712>
800086b4:	7070                	flw	fa2,100(s0)
800086b6:	696c                	flw	fa1,84(a0)
800086b8:	69746163          	bltu	s0,s7,80008d3a <loadStoreDyn+0x5a2>
800086bc:	00206e6f          	jal	t3,8000e6be <__global_pointer$+0x510e>
800086c0:	6154                	flw	fa3,4(a0)
800086c2:	00206b73          	csrrsi	s6,frm,0
800086c6:	0000                	unimp
800086c8:	735d                	lui	t1,0xffff7
800086ca:	6174                	flw	fa3,68(a0)
800086cc:	7574                	flw	fa3,108(a0)
800086ce:	00203a73          	csrrc	s4,frm,zero
800086d2:	0000                	unimp
800086d4:	6154                	flw	fa3,4(a0)
800086d6:	694c6b73          	csrrsi	s6,0x694,24
800086da:	005b7473          	csrrci	s0,utvec,22
800086de:	0000                	unimp
800086e0:	6154                	flw	fa3,4(a0)
800086e2:	694c6b73          	csrrsi	s6,0x694,24
800086e6:	695b7473          	csrrci	s0,0x695,22
800086ea:	2e5d                	jal	80008aa0 <loadStoreDyn+0x308>
800086ec:	74617473          	csrrci	s0,0x746,2
800086f0:	7375                	lui	t1,0xffffd
800086f2:	0020                	addi	s0,sp,8
800086f4:	6552                	flw	fa0,20(sp)
800086f6:	7574                	flw	fa3,108(a0)
800086f8:	6e72                	flw	ft8,28(sp)
800086fa:	6e69                	lui	t3,0x1a
800086fc:	65622067          	0x65622067
80008700:	73756163          	bltu	a0,s7,80008e22 <__data_load+0x52>
80008704:	2065                	jal	800087ac <loadStoreDyn+0x14>
80008706:	203a666f          	jal	a2,800af108 <__stack_top+0x68998>
8000870a:	0000                	unimp
8000870c:	63656843          	fmadd.d	fa6,fa0,fs6,fa2,unknown
80008710:	676e696b          	0x676e696b
80008714:	7420                	flw	fs0,104(s0)
80008716:	6568                	flw	fa0,76(a0)
80008718:	5020                	lw	s0,96(s0)
8000871a:	5049                	c.li	zero,-14
8000871c:	2045                	jal	800087bc <loadStoreDyn+0x24>
8000871e:	7420666f          	jal	a2,8000ee60 <__global_pointer$+0x58b0>
80008722:	7361                	lui	t1,0xffff8
80008724:	6f6c536b          	0x6f6c536b
80008728:	3a74                	fld	fa3,240(a2)
8000872a:	0020                	addi	s0,sp,8
8000872c:	3a69                	jal	800080c6 <main+0xe6>
8000872e:	0020                	addi	s0,sp,8
80008730:	74617473          	csrrci	s0,0x746,2
80008734:	7375                	lui	t1,0xffffd
80008736:	203a                	fld	ft0,392(sp)
80008738:	0000                	unimp
8000873a:	0000                	unimp
8000873c:	2d2d                	jal	80008d76 <loadStoreDyn+0x5de>
8000873e:	0a2d                	addi	s4,s4,11
80008740:	0000                	unimp
	...

80008744 <powerAvgBufferIdle>:
80008744:	0031 0000 003e 0000 004d 0000               1...>...M...

80008750 <powerSwitchControlIdle>:
80008750:	000e 0000 0012 0000 0016 0000               ............

8000875c <powerAvgBufferActive>:
8000875c:	0076 0000 0097 0000 00bc 0000               v...........

80008768 <powerSwitchControlActive>:
80008768:	0029 0000 0034 0000 0041 0000               )...4...A...

80008774 <readEnergyMemory>:
80008774:	18cf 0000 1e74 0000 0340 0000               ....t...@...

80008780 <writeEnergyMemory>:
80008780:	228b 0000 2b23 0000 0240 0000               ."..#+..@...

8000878c <arithDyn>:
8000878c:	035b 0000 0449 0000 086e 0000               [...I...n...

80008798 <loadStoreDyn>:
80008798:	0622 0000 07d1 0000 09d9 0000 2d2d 2d2d     "...........----
800087a8:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
800087b8:	2d2d 2d2d 2d2d 000a 6f4c 6461 3a73 0909     ------..Loads:..
800087c8:	0000 0000 7453 726f 7365 093a 0009 0000     ....Stores:.....
800087d8:	744f 6568 7372 093a 0009 0000 7964 616e     Others:.....dyna
800087e8:	696d 4563 656e 6772 5f79 6f52 7475 7265     micEnergy_Router
800087f8:	3e20 203e 0000 0000 6f74 6174 206c 6e69      >> ....total in
80008808:	7473 7572 7463 6f69 736e 7e7e 3e7e 0020     structions~~~> .
80008818:	6f54 6174 456c 656e 6772 3a79 0020 0000     TotalEnergy: ...
80008828:	6e45 7265 7967 6350 746b 7320 6e65 0a74     EnergyPckt sent.
80008838:	0000 0000 000a 0000 7266 6d6f 203a 0000     ........from: ..
80008848:	736d 2067 6f70 6e69 6574 3a72 0020 0000     msg pointer: ...
80008858:	694d 686e 2061 6174 6b73 4920 3a44 0020     Minha task ID: .
80008868:	6553 646e 6e69 5167 6575 6575 665f 6f72     SendingQueue_fro
80008878:	746e 203a 0000 0000 5245 4f52 2152 6420     nt: ....ERROR! d
80008888:	7365 6f63 686e 6365 6469 216f 2021 0000     esconhecido!! ..
80008898:	5041 5f49 7254 3279 6553 646e 7320 6375     API_Try2Send suc
800088a8:	6563 7373 0a21 0000 5041 5f49 7254 3279     cess!...API_Try2
800088b8:	6553 646e 6620 6961 656c 2064 202d 6d65     Send failed - em
800088c8:	7470 2079 6553 646e 7551 7565 2165 000a     pty SendQueue!..
800088d8:	5041 5f49 7254 3279 6553 646e 6620 6961     API_Try2Send fai
800088e8:	656c 2064 202d 494e 545f 2058 636f 7563     led - NI_TX occu
800088f8:	6970 6465 0a21 0000 6174 6b73 6c53 746f     pied!...taskSlot
80008908:	203a 0000 6920 206e 6874 2065 4950 4550     : .. in the PIPE
80008918:	7320 6f6c 2074 0000 6441 6964 676e 6120      slot ..Adding a
80008928:	6d20 6773 7420 206f 6174 6b73 0020 0000      msg to task ...
80008938:	7266 6d6f 6120 7070 203a 0000 3e3e 3e3e     from app: ..>>>>
80008948:	413e 6863 6965 6120 7571 2069 6f6e 7020     >Achei aqui no p
80008958:	6e65 6964 676e 0a21 0000 0000 7345 6570     ending!.....Espe
80008968:	6172 646e 206f 654d 736e 6761 6d65 0a21     rando Mensagem!.
80008978:	0000 0000 654d 736e 6761 6d65 5220 6365     ....Mensagem Rec
80008988:	6265 6469 2161 000a 5854 6920 746e 7265     ebida!..TX inter
80008998:	7572 7470 6f69 206e 6163 6374 6568 0a64     ruption catched.
800089a8:	0000 0000 5852 6920 746e 7265 7572 7470     ....RX interrupt
800089b8:	6f69 206e 6163 6374 6568 0a64 0000 0000     ion catched.....
800089c8:	4e31 5f49 5852 4420 4e4f 2145 000a 0000     1NI_RX DONE!....
800089d8:	4154 4b53 415f 4c4c 434f 5441 4f49 5f4e     TASK_ALLOCATION_
800089e8:	4553 444e 000a 0000 6154 6b73 7320 6f6c     SEND....Task slo
800089f8:	3a74 0020 6154 6b73 7320 6f6c 2074 6154     t: .Task slot Ta
80008a08:	6b73 6441 7264 203a 0000 0000 4e32 5f49     skAddr: ....2NI_
80008a18:	5852 4420 4e4f 2145 000a 0000 7266 6d6f     RX DONE!....from
80008a28:	6120 7070 696c 6163 6974 6e6f 0020 0000      application ...
80008a38:	4946 494e 4853 4445 203a 6154 6b73 0020     FINISHED: Task .
80008a48:	4e33 5f49 5852 4420 4e4f 2145 000a 0000     3NI_RX DONE!....
80008a58:	4154 4b53 415f 4c4c 434f 5441 4f49 5f4e     TASK_ALLOCATION_
80008a68:	4946 494e 4853 4445 000a 0000 4e34 5f49     FINISHED....4NI_
80008a78:	5852 4420 4e4f 2145 000a 0000 4154 4b53     RX DONE!....TASK
80008a88:	415f 4c4c 434f 5441 4f49 5f4e 5553 4343     _ALLOCATION_SUCC
80008a98:	5345 0a53 0000 0000 4e35 5f49 5852 4420     ESS.....5NI_RX D
80008aa8:	4e4f 2145 000a 0000 6843 6765 756f 7520     ONE!....Chegou u
80008ab8:	206d 4154 4b53 535f 4154 5452 0a21 0000     m TASK_START!...
80008ac8:	4e36 5f49 5852 4420 4e4f 2145 000a 0000     6NI_RX DONE!....
80008ad8:	6843 6765 756f 7520 206d 4154 4b53 525f     Chegou um TASK_R
80008ae8:	4e55 0a21 0000 0000 6620 6f72 206d 7061     UN!..... from ap
80008af8:	2070 0000 7453 7261 6974 676e 5420 7361     p ..Starting Tas
80008b08:	206b 0000 6174 6b73 6c53 746f 7220 6e75     k ..taskSlot run
80008b18:	203a 0000 4e37 5f49 5852 4420 4e4f 2145     : ..7NI_RX DONE!
80008b28:	000a 0000 6154 6b73 203a 0000 6843 6765     ....Task: ..Cheg
80008b38:	756f 7520 206d 656d 7373 6761 2065 6572     ou um message re
80008b48:	7571 7365 2174 4120 7070 203a 0000 0000     quest! App: ....
80008b58:	654d 736e 6761 6d65 6e20 a3c3 206f 6e65     Mensagem n..o en
80008b68:	6f63 746e 6172 6164 202c 6461 6369 6f69     contrada, adicio
80008b78:	616e 646e 206f 6f61 5020 6e65 6964 676e     nando ao Pending
80008b88:	6552 2171 000a 0000 654d 736e 6761 6d65     Req!....Mensagem
80008b98:	6520 636e 6e6f 7274 6461 2061 6f6e 7020      encontrada no p
80008ba8:	7069 2165 000a 0000 4e38 5f49 5852 4420     ipe!....8NI_RX D
80008bb8:	4e4f 2145 000a 0000 6554 206d 6d75 2061     ONE!....Tem uma 
80008bc8:	656d 736e 6761 6d65 6320 6568 6167 646e     mensagem chegand
80008bd8:	2e6f 2e2e 000a 0000 4e39 5f49 5852 4420     o.......9NI_RX D
80008be8:	4e4f 2145 000a 0000 3031 494e 525f 2058     ONE!....10NI_RX 
80008bf8:	4f44 454e 0a21 0000 6552 6563 6562 646e     DONE!...Recebend
80008c08:	206f 6170 6f63 6574 6420 2065 6574 706d     o pacote de temp
80008c18:	7265 7461 7275 0061 3131 494e 525f 2058     eratura.11NI_RX 
80008c28:	4f44 454e 0a21 0000 6574 706d 203a 0000     DONE!...temp: ..
80008c38:	6570 0000 3231 494e 525f 2058 4f44 454e     pe..12NI_RX DONE
80008c48:	0a21 0000 3331 494e 525f 2058 4f48 444c     !...13NI_RX HOLD
80008c58:	0a21 0000 5245 4f52 2052 7845 6574 6e72     !...ERROR Extern
80008c68:	6c61 325f 495f 5152 6148 646e 656c 2072     al_2_IRQHandler 
80008c78:	6e55 6e6b 776f 2d6e 6553 7672 6369 2065     Unknown-Service 
80008c88:	0000 0000 3431 494e 525f 2058 4f44 454e     ....14NI_RX DONE
80008c98:	0a21 0000 0a0d 7246 6565 5452 534f 4520     !.....FreeRTOS E
80008ca8:	6178 706d 656c 0a0d 0000 0000 200a 6843     xample....... Ch
80008cb8:	6f72 6f6e 2073 6c70 7461 6f66 6d72 6920     ronos platform i
80008cc8:	696e 6974 6c61 7a69 6e69 2e67 2e2e 0a20     nitializing... .
80008cd8:	0000 0000 200a 6854 7369 7420 7265 696d     ..... This termi
80008ce8:	616e 206c 6562 6f6c 676e 2073 6f74 7420     nal belongs to t
80008cf8:	6568 6120 6464 6572 7373 203a 0000 0000     he address: ....
80008d08:	000a 0000 200a 6854 7369 7020 6f72 6563     ..... This proce
80008d18:	7373 726f 6920 2073 6874 2065 6c47 626f     ssor is the Glob
80008d28:	6c61 4d20 7361 6574 3a72 0a20 0000 0000     al Master: .....
80008d38:	6c47 626f 6c61 614d 7473 7265 0000 0000     GlobalMaster....
80008d48:	200a 6854 7369 7020 6f72 6563 7373 726f     . This processor
80008d58:	6920 2073 2061 6c53 7661 3a65 0a20 0000      is a Slave: ...
80008d68:	4920 4c44 2e45 2e2e 0a20 0000 6c47 626f      IDLE... ...Glob
80008d78:	6c61 614d 7473 7265 6341 6974 6576 0000     alMasterActive..
80008d88:	4720 6f6c 6162 4d6c 7361 6574 5272 756f      GlobalMasterRou
80008d98:	6974 656e 2e2e 0d2e 000a 0000 0000 0000     tine............
	...
