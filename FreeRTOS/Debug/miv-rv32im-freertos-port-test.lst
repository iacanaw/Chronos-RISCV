
miv-rv32im-freertos-port-test.elf:     file format elf32-littleriscv
miv-rv32im-freertos-port-test.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000000

Program Header:
    LOAD off    0x00001000 vaddr 0x80000000 paddr 0x80000000 align 2**12
         filesz 0x00008870 memsz 0x00043200 flags rwx

Sections:
Idx Name           Size      VMA       LMA       File off  Algn  Flags
  0 .text          00008770  80000000  80000000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sdata         00000020  80008770  80008770  00009770  2**4  CONTENTS, ALLOC, LOAD, DATA
  2 .data          000000e0  80008790  80008790  00009790  2**4  CONTENTS, ALLOC, LOAD, DATA
  3 .sbss          000000a0  80008870  80008870  00009870  2**4  ALLOC
  4 .bss           0001a8f0  80008910  80008910  00009870  2**4  ALLOC
  5 .heap          00010000  80023200  80023200  00009870  2**4  ALLOC
  6 .stack         00010000  80033200  80033200  00009870  2**4  ALLOC
  7 .debug_line    0000bc6f  00000000  00000000  00009870  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_info    00010b6d  00000000  00000000  000154df  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev  00002eb4  00000000  00000000  0002604c  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000009a0  00000000  00000000  00028f00  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_str     000133e1  00000000  00000000  000298a0  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges  00000868  00000000  00000000  0003cc81  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro   00005c36  00000000  00000000  0003d4e9  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment       00000039  00000000  00000000  0004311f  2**0  CONTENTS, READONLY
 15 .debug_frame   00002378  00000000  00000000  00043158  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
80000000 l    d  .text	00000000 .text
80008770 l    d  .sdata	00000000 .sdata
80008790 l    d  .data	00000000 .data
80008870 l    d  .sbss	00000000 .sbss
80008910 l    d  .bss	00000000 .bss
80023200 l    d  .heap	00000000 .heap
80033200 l    d  .stack	00000000 .stack
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./riscv_hal/entry.o
8000000c l       .text	00000000 handle_reset
80000004 l       .text	00000000 nmi_vector
80000008 l       .text	00000000 trap_vector
80000030 l       .text	00000000 trap_entry
00000000 l    df *ABS*	00000000 init.c
80000180 l     F .text	00000050 zero_section
00000000 l    df *ABS*	00000000 riscv_hal.c
80000258 l     F .text	000000b8 PLIC_DisableIRQ
80000310 l     F .text	00000044 PLIC_ClaimIRQ
80000354 l     F .text	0000004c PLIC_CompleteIRQ
80008870 l     O .sbss	00000008 g_systick_increment
00000000 l    df *ABS*	00000000 riscv_hal_stubs.c
00000000 l    df *ABS*	00000000 syscall.c
80008878 l     O .sbss	00000008 g_stdio_uart
80008880 l     O .sbss	00000004 g_stdio_uart_init_done
80000e7c l     F .text	00000030 stub
00000000 l    df *ABS*	00000000 core_uart_apb.c
00000000 l    df *ABS*	00000000 heap_2.c
80008910 l     O .bss	00019000 ucHeap
80008884 l     O .sbss	00000008 xStart
8000888c l     O .sbss	00000008 xEnd
80008770 l     O .sdata	00000004 xFreeBytesRemaining
80008894 l     O .sbss	00000004 xHeapHasBeenInitialised.2777
80001590 l     F .text	00000074 prvHeapInit
00000000 l    df *ABS*	00000000 port.c
80001604 l     F .text	0000004c raise_soft_interrupt
80008774 l     O .sdata	00000004 uxCriticalNesting
80008778 l     O .sdata	00000004 mtime
8000877c l     O .sdata	00000004 mtimecmp
800016c4 l     F .text	000000cc prvSetNextTimerInterrupt
8000185c l     F .text	0000002c prvTaskExitError
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 tasks.c
80021910 l     O .bss	00000064 pxReadyTasksLists
80021974 l     O .bss	00000014 xDelayedTaskList1
80021988 l     O .bss	00000014 xDelayedTaskList2
800088a0 l     O .sbss	00000004 pxDelayedTaskList
800088a4 l     O .sbss	00000004 pxOverflowDelayedTaskList
8002199c l     O .bss	00000014 xPendingReadyList
800219b0 l     O .bss	00000014 xTasksWaitingTermination
800088a8 l     O .sbss	00000004 uxTasksDeleted
800219c4 l     O .bss	00000014 xSuspendedTaskList
800088ac l     O .sbss	00000004 uxCurrentNumberOfTasks
800088b0 l     O .sbss	00000004 xTickCount
800088b4 l     O .sbss	00000004 uxTopReadyPriority
800088b8 l     O .sbss	00000004 xSchedulerRunning
800088bc l     O .sbss	00000004 uxPendedTicks
800088c0 l     O .sbss	00000004 xYieldPending
800088c4 l     O .sbss	00000004 xNumOfOverflows
800088c8 l     O .sbss	00000004 uxTaskNumber
800088cc l     O .sbss	00000004 xNextTaskUnblockTime
800088d0 l     O .sbss	00000004 uxSchedulerSuspended
80002d84 l     F .text	000000c0 prvAllocateTCBAndStack
80002a64 l     F .text	00000138 prvInitialiseTCBVariables
80002b9c l     F .text	000000c0 prvInitialiseTaskLists
80002e84 l     F .text	00000060 prvResetNextTaskUnblockTime
80002cfc l     F .text	00000088 prvAddCurrentTaskToDelayedList
80002380 l     F .text	0000009c prvTaskIsTaskSuspended
80002a30 l     F .text	00000034 prvIdleTask
80002c5c l     F .text	000000a0 prvCheckTasksWaitingTermination
80002e44 l     F .text	00000040 prvDeleteTCB
00000000 l    df *ABS*	00000000 globalMaster.c
00000000 l    df *ABS*	00000000 applications.c
00000000 l    df *ABS*	00000000 packet.c
00000000 l    df *ABS*	00000000 dvfs.c
00000000 l    df *ABS*	00000000 thermal.c
00000000 l    df *ABS*	00000000 chronos.c
80005d1c l     F .text	000000b4 PLIC_EnableIRQ
80005dd0 l     F .text	0000003c PLIC_SetPriority
00000000 l    df *ABS*	00000000 main.c
80007a58 l     F .text	000000d0 PLIC_init
80007c7c l     F .text	000000b0 GlobalManagerTask
00000000 l    df *ABS*	00000000 syswrite.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 impure.c
80008810 l     O .data	00000060 impure_data
800088d8 g     O .sbss	00000004 eastFlits_last
800088e0 g     O .sbss	00000004 westFlits_last
80008230 g     O .text	0000000c readEnergyMemory
80001684 g     F .text	00000040 vPortExitCritical
00010000 g       *ABS*	00000000 STACK_SIZE
800231f0 g     O .bss	00000004 memFlits
800219d8 g     O .bss	00000004 SendingSlot
80000a54  w    F .text	00000020 External_11_IRQHandler
80008f70 g       .sdata	00000000 __global_pointer$
80005fac g     F .text	00000048 printsv
800088f4 g     O .sbss	00000004 southPackets_last
80008790 g       *ABS*	00000000 __data_load
8000191c g     F .text	000000e4 SysTick_Handler
80000994  w    F .text	00000020 External_5_IRQHandler
80004f3c g     F .text	000000a8 API_PipeInitialization
80003374 g     F .text	00000128 API_TilesReset
8000105c g       .text	00000000 HW_get_8bit_reg_field
80002f0c g     F .text	0000003c vTaskEnterCritical
800061a8 g     F .text	00000080 reverse
80008254 g     O .text	0000000c loadStoreDyn
8000718c g     F .text	00000074 API_AddPendingReq
80022698 g     O .bss	00000024 priorityMatrix
800052ec g     F .text	00000114 API_checkPipe
8000889c g     O .sbss	00000004 pxCurrentTCB
80008870 g       .sbss	00000000 __sbss_start
80005e0c g     F .text	000000f4 Chronos_init
80005428 g     F .text	0000002c API_setFreqScale
80022694 g     O .bss	00000004 errno
800219dc g     O .bss	000000f0 ServicePipe
80000f94 g       .text	00000000 HW_set_32bit_reg
80008248 g     O .text	0000000c arithDyn
80000b74  w    F .text	00000020 External_20_IRQHandler
80001a00 g     F .text	00000044 xPortStartScheduler
800003a0 g     F .text	00000024 __enable_irq
80001f18 g     F .text	0000021c xTaskGenericCreate
80005140 g     F .text	000000b4 API_GetServiceSlot
80008770 g       .sdata	00000000 __sdata_start
800014c4 g     F .text	000000cc vPortFree
80021acc g     O .bss	00000004 messageID
80006408 g     F .text	000000c4 API_PushSendQueue
800231f4 g     O .bss	00000008 g_uart
80001034 g       .text	00000000 HW_set_8bit_reg_field
80000c34  w    F .text	00000020 External_26_IRQHandler
800007a4 g     F .text	00000170 handle_trap
80003290 g     F .text	00000084 API_GetApplicationFreeSlot
80001bec g     F .text	00000088 vListInsertEnd
80005698 g     F .text	000000a4 getNumberOfPorts
00080000 g       *ABS*	00000000 RAM_SIZE
80000a34  w    F .text	00000020 External_10_IRQHandler
800226bc g     O .bss	00000780 applications
80008900 g     O .sbss	00000004 API_SystemFinish
80005f70 g     F .text	0000003c printi
800088dc g     O .sbss	00000004 eastPackets_last
80001bc4 g     F .text	00000028 vListInitialiseItem
80007200 g     F .text	00000858 API_NI_Handler
80000cb4  w    F .text	00000020 External_30_IRQHandler
800088e4 g     O .sbss	00000004 westPackets_last
80000b14  w    F .text	00000020 External_17_IRQHandler
80033200 g       .heap	00000000 _heap_end
80000e2c g     F .text	00000050 _isatty
80023200 g       .bss	00000000 __bss_end
80000510 g     F .text	00000294 handle_syscall
800030ac g     F .text	000001e4 API_AddApplication
800012e8 g     F .text	000001dc pvPortMalloc
80004fe4 g     F .text	0000015c API_GetMessageSlot
8000381c g     F .text	00000360 API_DealocateTask
800001d0 g     F .text	0000006c _init
80001b60 g     F .text	00000064 vListInitialise
80001024 g       .text	00000000 HW_set_8bit_reg
8000102c g       .text	00000000 HW_get_8bit_reg
80002720 g     F .text	00000038 xTaskGetTickCount
80022e3c g     O .bss	00000004 temperatureUpdated
80003544 g     F .text	000002d8 API_AllocateTasks
800045c8 g     F .text	000000b0 API_TaskListInit
800047b8 g     F .text	000002d8 API_TaskAllocation
800088ec g     O .sbss	00000004 northPackets_last
80003e0c g     F .text	00000140 API_ClearTaskSlotFromTile
80004734 g     F .text	00000084 API_GetFreeTaskSlot
80005644 g     F .text	00000054 resetExecutedInstructions
80008910 g       .sbss	00000000 __sbss_end
80004b74 g     F .text	000000e4 API_TaskStart
80000fa4 g       .text	00000000 HW_set_32bit_reg_field
80007d2c g     F .text	0000001c write
800041e4 g     F .text	00000128 API_TaskAllocated
80007c4c g     F .text	00000014 vApplicationMallocFailedHook
80000c14  w    F .text	00000020 External_25_IRQHandler
8000573c g     F .text	0000026c estimateNoCActivity
80043200 g       .stack	00000000 __stack_top
80000c94  w    F .text	00000020 External_29_IRQHandler
800088e8 g     O .sbss	00000004 northFlits_last
80021ad0 g     O .bss	00000034 incommingPacket
80002134 g     F .text	000000dc vTaskDelete
80001238 g     F .text	000000b0 UART_polled_tx_string
800231ec g     O .bss	00000004 selectedFrequencyScale
80000cf4 g     F .text	000000e8 write_hex
80000a94  w    F .text	00000020 External_13_IRQHandler
80006130 g     F .text	0000002c External_2_IRQHandler
00010000 g       *ABS*	00000000 HEAP_SIZE
80000a74  w    F .text	00000020 External_12_IRQHandler
800088d4 g     O .sbss	00000004 thermalPacket_pending
800063c8 g     F .text	00000040 makeAddress
80001184 g     F .text	000000b4 UART_send
800060a8 g     F .text	0000004c SendRaw
80000000 g       .text	00000000 _start
80005400 g     F .text	00000028 API_setFreqIdle
80002598 g     F .text	00000028 vTaskSuspendAll
800065a8 g     F .text	000000a0 API_PopSendQueue
800003c4 g     F .text	000000a8 handle_m_timer_interrupt
80005f00 g     F .text	00000070 prints
80001d48 g     F .text	00000098 uxListRemove
8000430c g     F .text	000002bc API_ApplicationStart
800060f4 g     F .text	0000003c NI_enable_irq
80008770 g       *ABS*	00000000 __sdata_load
80008870 g       .data	00000000 __data_end
8000241c g     F .text	000000ec vTaskResume
80002944 g     F .text	000000ec vTaskSwitchContext
80000b34  w    F .text	00000020 External_18_IRQHandler
80000fcc g       .text	00000000 HW_get_32bit_reg_field
80008200 g     O .text	0000000c powerAvgBufferIdle
80006228 g     F .text	000001a0 myItoa
80002294 g     F .text	000000ec vTaskSuspend
80000bb4  w    F .text	00000020 External_22_IRQHandler
80000ad4  w    F .text	00000020 External_15_IRQHandler
80001b38 g     F .text	00000028 vPortYield
80004678 g     F .text	000000bc API_GetCurrentTaskSlot
80000000 g       *ABS*	00000000 RAM_START_ADDRESS
80008910 g       .bss	00000000 __bss_start
80022ed4 g     O .bss	00000318 TaskList
80000af4  w    F .text	00000020 External_16_IRQHandler
80001de0 g     F .text	000000e8 memset
80007b28 g     F .text	00000124 main
8000615c g     F .text	0000004c mySwap
80005488 g     F .text	00000054 API_applyFreqScale
80001c74 g     F .text	000000d4 vListInsert
80000c74  w    F .text	00000020 External_28_IRQHandler
80007050 g     F .text	0000013c API_CheckMessagePipe
800064cc g     F .text	000000dc API_PrioritySend
80003314 g     F .text	00000060 API_ApplicationsReset
80002ee4 g     F .text	00000028 xTaskGetCurrentTaskHandle
80000fe4 g       .text	00000000 HW_get_16bit_reg
80008790 g       .sdata	00000000 __sdata_end
80004c58 g     F .text	000002e4 API_FinishRunningTask
80008224 g     O .text	0000000c powerSwitchControlActive
80033200 g       .heap	00000000 __heap_end
80000ab4  w    F .text	00000020 External_14_IRQHandler
80003cb0 g     F .text	0000015c API_GetTaskSlotFromTile
80003b7c g     F .text	00000134 getNextPriorityAddr
800088f0 g     O .sbss	00000004 southFlits_last
80004038 g     F .text	000001ac API_RepositoryAllocation
8000023c g     F .text	0000001c _fini
800025c0 g     F .text	00000160 xTaskResumeAll
80002508 g     F .text	00000090 vTaskStartScheduler
800068e4 g     F .text	00000340 API_SendMessage
80008790 g     O .data	00000080 ext_irq_handler_table
80021b04 g     O .bss	00000020 SendingQueue
80007d48 g     F .text	00000054 _write_r
80000fec g       .text	00000000 HW_set_16bit_reg_field
80006780 g     F .text	00000164 API_AckTaskAllocation
80021b24 g     O .bss	00000004 SendingQueue_tail
80008780 g     O .sdata	00000004 _impure_ptr
80033200 g       .stack	00000000 __stack_bottom
80001a44 g     F .text	000000f4 Software_IRQHandler
800054dc g     F .text	00000168 API_freqStepUp
800051f4 g     F .text	000000f8 API_ClearPipeSlot
80000c54  w    F .text	00000020 External_27_IRQHandler
80021b28 g     O .bss	00000244 ThermalPacket
800009f4  w    F .text	00000020 External_8_IRQHandler
80000a14  w    F .text	00000020 External_9_IRQHandler
80023200 g       .heap	00000000 __heap_start
80000914  w    F .text	00000020 Invalid_IRQHandler
8000820c g     O .text	0000000c powerSwitchControlIdle
80006648 g     F .text	00000138 API_Try2Send
80000954  w    F .text	00000020 External_3_IRQHandler
80002758 g     F .text	000001ec xTaskIncrementTick
8000823c g     O .text	0000000c writeEnergyMemory
80004a90 g     F .text	000000e4 API_GetTaskSlot
80008898 g     O .sbss	00000004 g_startscheduler
80006080 g     F .text	00000028 getYpos
80000b54  w    F .text	00000020 External_19_IRQHandler
80000eac g     F .text	000000e8 _write
80006054 g     F .text	0000002c getXpos
80023200 g       .bss	00000000 _end
80001790 g     F .text	000000cc vPortSetupTimer
80022e40 g     O .bss	00000024 SystemTemperature
80005454 g     F .text	00000034 API_getFreqScale
80021d6c g     O .bss	00000014 str
80021d80 g     O .bss	00000004 SendingQueue_front
80002f98 g     F .text	00000114 API_RepositoryWakeUp
80005ff4 g     F .text	00000060 printsvsv
80002210 g     F .text	00000084 vTaskDelay
8000106c g     F .text	00000118 UART_init
80000f9c g       .text	00000000 HW_get_32bit_reg
80008218 g     O .text	0000000c powerAvgBufferActive
80000ddc g     F .text	00000050 _exit
80000fdc g       .text	00000000 HW_set_16bit_reg
80006db4 g     F .text	0000029c API_SendMessageReq
80002f48 g     F .text	00000050 vTaskExitCritical
80001ec8 g     F .text	00000050 strlen
80001888 g     F .text	00000094 pxPortInitialiseStack
80000934  w    F .text	00000020 External_1_IRQHandler
80006c24 g     F .text	00000190 API_SendFinishTask
800009b4  w    F .text	00000020 External_6_IRQHandler
80000cd4  w    F .text	00000020 External_31_IRQHandler
80003f4c g     F .text	000000ec API_GetSystemTasksSlots
80001650 g     F .text	00000034 vPortEnterCritical
80008790 g       .data	00000000 __data_start
800059a8 g     F .text	00000374 powerEstimation
800231fc g     O .bss	00000004 ProcessorAddr
800088fc g     O .sbss	00000004 localPackets_last
80022e64 g     O .bss	00000004 priorityPointer
80000b94  w    F .text	00000020 External_21_IRQHandler
80022e68 g     O .bss	0000006c Tiles
800004e0 g     F .text	00000030 handle_m_soft_interrupt
8000046c g     F .text	00000074 handle_m_ext_interrupt
80001014 g       .text	00000000 HW_get_16bit_reg_field
80000bd4  w    F .text	00000020 External_23_IRQHandler
80000bf4  w    F .text	00000020 External_24_IRQHandler
800088f8 g     O .sbss	00000004 localFlits_last
80000974  w    F .text	00000020 External_4_IRQHandler
80021d84 g     O .bss	00000910 MessagePipe
8000349c g     F .text	000000a8 GeneratePatternMatrix
800009d4  w    F .text	00000020 External_7_IRQHandler
80007c60 g     F .text	0000001c vApplicationIdleHook



Disassembly of section .text:

80000000 <_start>:
_start():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:30

  .section      .text.entry
  .globl _start

_start:
  j handle_reset
80000000:	00c0006f          	j	8000000c <handle_reset>

80000004 <nmi_vector>:
nmi_vector():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:33

nmi_vector:
  j nmi_vector
80000004:	0000006f          	j	80000004 <nmi_vector>

80000008 <trap_vector>:
trap_vector():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:36

trap_vector:
  j trap_entry
80000008:	0280006f          	j	80000030 <trap_entry>

8000000c <handle_reset>:
handle_reset():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:39

handle_reset:
  la t0, trap_entry
8000000c:	00000297          	auipc	t0,0x0
80000010:	02428293          	addi	t0,t0,36 # 80000030 <trap_entry>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:40
  csrw mtvec, t0
80000014:	30529073          	csrw	mtvec,t0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:41
  csrwi mstatus, 0
80000018:	30005073          	csrwi	mstatus,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:42
  csrwi mie, 0
8000001c:	30405073          	csrwi	mie,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:60
  lui t0, 0x0
  fscsr t0
#endif

  # initialize global pointer
  la gp, __global_pointer$
80000020:	00018193          	mv	gp,gp
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:63

  # initialize stack pointer
  la sp, __stack_top
80000024:	00043117          	auipc	sp,0x43
80000028:	1dc10113          	addi	sp,sp,476 # 80043200 <__stack_top>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:66

  # perform the rest of initialization in C
  j _init
8000002c:	1a40006f          	j	800001d0 <_init>

80000030 <trap_entry>:
trap_entry():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:70


trap_entry:
  addi sp, sp, -33*REGBYTES
80000030:	f7c10113          	addi	sp,sp,-132
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:72

  SREG x1, 0 * REGBYTES(sp)
80000034:	00112023          	sw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:73
  SREG x2, 1 * REGBYTES(sp)
80000038:	00212223          	sw	sp,4(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:74
  SREG x3, 2 * REGBYTES(sp)
8000003c:	00312423          	sw	gp,8(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:75
  SREG x4, 3 * REGBYTES(sp)
80000040:	00412623          	sw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:76
  SREG x5, 4 * REGBYTES(sp)
80000044:	00512823          	sw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:77
  SREG x6, 5 * REGBYTES(sp)
80000048:	00612a23          	sw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:78
  SREG x7, 6 * REGBYTES(sp)
8000004c:	00712c23          	sw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:79
  SREG x8, 7 * REGBYTES(sp)
80000050:	00812e23          	sw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:80
  SREG x9, 8 * REGBYTES(sp)
80000054:	02912023          	sw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:81
  SREG x10, 9 * REGBYTES(sp)
80000058:	02a12223          	sw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:82
  SREG x11, 10 * REGBYTES(sp)
8000005c:	02b12423          	sw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:83
  SREG x12, 11 * REGBYTES(sp)
80000060:	02c12623          	sw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:84
  SREG x13, 12 * REGBYTES(sp)
80000064:	02d12823          	sw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:85
  SREG x14, 13 * REGBYTES(sp)
80000068:	02e12a23          	sw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:86
  SREG x15, 14 * REGBYTES(sp)
8000006c:	02f12c23          	sw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:87
  SREG x16, 15 * REGBYTES(sp)
80000070:	03012e23          	sw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:88
  SREG x17, 16 * REGBYTES(sp)
80000074:	05112023          	sw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:89
  SREG x18, 17 * REGBYTES(sp)
80000078:	05212223          	sw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:90
  SREG x19, 18 * REGBYTES(sp)
8000007c:	05312423          	sw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:91
  SREG x20, 19 * REGBYTES(sp)
80000080:	05412623          	sw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:92
  SREG x21, 20 * REGBYTES(sp)
80000084:	05512823          	sw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:93
  SREG x22, 21 * REGBYTES(sp)
80000088:	05612a23          	sw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:94
  SREG x23, 22 * REGBYTES(sp)
8000008c:	05712c23          	sw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:95
  SREG x24, 23 * REGBYTES(sp)
80000090:	05812e23          	sw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:96
  SREG x25, 24 * REGBYTES(sp)
80000094:	07912023          	sw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:97
  SREG x26, 25 * REGBYTES(sp)
80000098:	07a12223          	sw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:98
  SREG x27, 26 * REGBYTES(sp)
8000009c:	07b12423          	sw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:99
  SREG x28, 27 * REGBYTES(sp)
800000a0:	07c12623          	sw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:100
  SREG x29, 28 * REGBYTES(sp)
800000a4:	07d12823          	sw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:101
  SREG x30, 29 * REGBYTES(sp)
800000a8:	07e12a23          	sw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:102
  SREG x31, 30 * REGBYTES(sp)
800000ac:	07f12c23          	sw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:105

  # Stores the return addr in the stack
  csrr t0, mepc
800000b0:	341022f3          	csrr	t0,mepc
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:106
  SREG t0, 31 * REGBYTES(sp)
800000b4:	06512e23          	sw	t0,124(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:109

  # store the MIE value in the stack
  li t0, MSTATUS_MIE
800000b8:	00800293          	li	t0,8
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:110
  csrrc t0, mstatus, t0 
800000bc:	3002b2f3          	csrrc	t0,mstatus,t0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:111
  SREG t0, 32 * REGBYTES(sp) 
800000c0:	08512023          	sw	t0,128(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:113

  csrr a0, mcause
800000c4:	34202573          	csrr	a0,mcause
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:114
  csrr a1, mepc
800000c8:	341025f3          	csrr	a1,mepc
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:115
  mv a2, sp
800000cc:	00010613          	mv	a2,sp
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:116
  call handle_trap
800000d0:	6d4000ef          	jal	ra,800007a4 <handle_trap>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:117
  csrw mepc, a0
800000d4:	34151073          	csrw	mepc,a0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:120

  # Remain in M-mode after mret
  li t0, MSTATUS_MPP
800000d8:	000022b7          	lui	t0,0x2
800000dc:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:121
  csrs mstatus, t0
800000e0:	3002a073          	csrs	mstatus,t0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:126
  #li t0, MSTATUS_MPIE
  #csrs mstatus, t0

  # Restore the interruption status after MRET
  LREG x5, 32 * REGBYTES(sp)  # load the old MIE value to t0
800000e4:	08012283          	lw	t0,128(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:127
  slli t0, t0, 4              # shifts it to the MPIE position
800000e8:	00429293          	slli	t0,t0,0x4
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:128
  csrs mstatus, t0            # restore the MIE value into the MPIE
800000ec:	3002a073          	csrs	mstatus,t0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:130
  
  LREG x1, 0 * REGBYTES(sp)
800000f0:	00012083          	lw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:131
  LREG x2, 1 * REGBYTES(sp)
800000f4:	00412103          	lw	sp,4(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:132
  LREG x3, 2 * REGBYTES(sp)
800000f8:	00812183          	lw	gp,8(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:133
  LREG x4, 3 * REGBYTES(sp)
800000fc:	00c12203          	lw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:134
  LREG x5, 4 * REGBYTES(sp)
80000100:	01012283          	lw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:135
  LREG x6, 5 * REGBYTES(sp)
80000104:	01412303          	lw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:136
  LREG x7, 6 * REGBYTES(sp)
80000108:	01812383          	lw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:137
  LREG x8, 7 * REGBYTES(sp)
8000010c:	01c12403          	lw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:138
  LREG x9, 8 * REGBYTES(sp)
80000110:	02012483          	lw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:139
  LREG x10, 9 * REGBYTES(sp)
80000114:	02412503          	lw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:140
  LREG x11, 10 * REGBYTES(sp)
80000118:	02812583          	lw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:141
  LREG x12, 11 * REGBYTES(sp)
8000011c:	02c12603          	lw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:142
  LREG x13, 12 * REGBYTES(sp)
80000120:	03012683          	lw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:143
  LREG x14, 13 * REGBYTES(sp)
80000124:	03412703          	lw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:144
  LREG x15, 14 * REGBYTES(sp)
80000128:	03812783          	lw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:145
  LREG x16, 15 * REGBYTES(sp)
8000012c:	03c12803          	lw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:146
  LREG x17, 16 * REGBYTES(sp)
80000130:	04012883          	lw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:147
  LREG x18, 17 * REGBYTES(sp)
80000134:	04412903          	lw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:148
  LREG x19, 18 * REGBYTES(sp)
80000138:	04812983          	lw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:149
  LREG x20, 19 * REGBYTES(sp)
8000013c:	04c12a03          	lw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:150
  LREG x21, 20 * REGBYTES(sp)
80000140:	05012a83          	lw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:151
  LREG x22, 21 * REGBYTES(sp)
80000144:	05412b03          	lw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:152
  LREG x23, 22 * REGBYTES(sp)
80000148:	05812b83          	lw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:153
  LREG x24, 23 * REGBYTES(sp)
8000014c:	05c12c03          	lw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:154
  LREG x25, 24 * REGBYTES(sp)
80000150:	06012c83          	lw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:155
  LREG x26, 25 * REGBYTES(sp)
80000154:	06412d03          	lw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:156
  LREG x27, 26 * REGBYTES(sp)
80000158:	06812d83          	lw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:157
  LREG x28, 27 * REGBYTES(sp)
8000015c:	06c12e03          	lw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:158
  LREG x29, 28 * REGBYTES(sp)
80000160:	07012e83          	lw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:159
  LREG x30, 29 * REGBYTES(sp)
80000164:	07412f03          	lw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:160
  LREG x31, 30 * REGBYTES(sp)
80000168:	07812f83          	lw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:162

  addi sp, sp, 33*REGBYTES
8000016c:	08410113          	addi	sp,sp,132
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/entry.S:163
  mret
80000170:	30200073          	mret
	...

80000180 <zero_section>:
zero_section():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:47
        ++p_vma;
    }
}

static void zero_section(uint32_t * start, uint32_t * end)
{
80000180:	fd010113          	addi	sp,sp,-48
80000184:	02812623          	sw	s0,44(sp)
80000188:	03010413          	addi	s0,sp,48
8000018c:	fca42e23          	sw	a0,-36(s0)
80000190:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:48
    uint32_t * p_zero = start;
80000194:	fdc42783          	lw	a5,-36(s0)
80000198:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:50
    
    while(p_zero <= end)
8000019c:	0180006f          	j	800001b4 <zero_section+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:52
    {
        *p_zero = 0;
800001a0:	fec42783          	lw	a5,-20(s0)
800001a4:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:53
        ++p_zero;
800001a8:	fec42783          	lw	a5,-20(s0)
800001ac:	00478793          	addi	a5,a5,4
800001b0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:50
    while(p_zero <= end)
800001b4:	fec42703          	lw	a4,-20(s0)
800001b8:	fd842783          	lw	a5,-40(s0)
800001bc:	fee7f2e3          	bleu	a4,a5,800001a0 <zero_section+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:55
    }
}
800001c0:	00000013          	nop
800001c4:	02c12403          	lw	s0,44(sp)
800001c8:	03010113          	addi	sp,sp,48
800001cc:	00008067          	ret

800001d0 <_init>:
_init():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:58

void _init(void)
{
800001d0:	fe010113          	addi	sp,sp,-32
800001d4:	00112e23          	sw	ra,28(sp)
800001d8:	00812c23          	sw	s0,24(sp)
800001dc:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:60
    extern int main(int, char**);
    const char *argv0 = "hello";
800001e0:	800087b7          	lui	a5,0x80008
800001e4:	da078793          	addi	a5,a5,-608 # 80007da0 <__stack_top+0xfffc4ba0>
800001e8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:61
    char *argv[] = {(char *)argv0, NULL, NULL};
800001ec:	fec42783          	lw	a5,-20(s0)
800001f0:	fef42023          	sw	a5,-32(s0)
800001f4:	fe042223          	sw	zero,-28(s0)
800001f8:	fe042423          	sw	zero,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:66

// Imperas - this is loaded directly by simulator so must not be copied
//    copy_section(&__sdata_load, &__sdata_start, &__sdata_end);
//    copy_section(&__data_load, &__data_start, &__data_end);
    zero_section(&__sbss_start, &__sbss_end);
800001fc:	9a018593          	addi	a1,gp,-1632 # 80008910 <__sbss_end>
80000200:	90018513          	addi	a0,gp,-1792 # 80008870 <__data_end>
80000204:	f7dff0ef          	jal	ra,80000180 <zero_section>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:67
    zero_section(&__bss_start, &__bss_end);
80000208:	800237b7          	lui	a5,0x80023
8000020c:	20078593          	addi	a1,a5,512 # 80023200 <__stack_top+0xfffe0000>
80000210:	9a018513          	addi	a0,gp,-1632 # 80008910 <__sbss_end>
80000214:	f6dff0ef          	jal	ra,80000180 <zero_section>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:69
    
    main(1, argv);
80000218:	fe040793          	addi	a5,s0,-32
8000021c:	00078593          	mv	a1,a5
80000220:	00100513          	li	a0,1
80000224:	105070ef          	jal	ra,80007b28 <main>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:70
}
80000228:	00000013          	nop
8000022c:	01c12083          	lw	ra,28(sp)
80000230:	01812403          	lw	s0,24(sp)
80000234:	02010113          	addi	sp,sp,32
80000238:	00008067          	ret

8000023c <_fini>:
_fini():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:75

/* Function called after main() finishes */
void
_fini()
{
8000023c:	ff010113          	addi	sp,sp,-16
80000240:	00812623          	sw	s0,12(sp)
80000244:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/init.c:76
}
80000248:	00000013          	nop
8000024c:	00c12403          	lw	s0,12(sp)
80000250:	01010113          	addi	sp,sp,16
80000254:	00008067          	ret

80000258 <PLIC_DisableIRQ>:
PLIC_DisableIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:174
 * 	If you wish to disable the external interrupt while the interrupt handler
 * 	for that external interrupt is executing then you must use the return value
 * 	EXT_IRQ_DISABLE to return from the extern interrupt handler.
 */
static inline void PLIC_DisableIRQ(IRQn_Type IRQn)
{
80000258:	fd010113          	addi	sp,sp,-48
8000025c:	02812623          	sw	s0,44(sp)
80000260:	03010413          	addi	s0,sp,48
80000264:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:175
    unsigned long hart_id = read_csr(mhartid);
80000268:	f14027f3          	csrr	a5,mhartid
8000026c:	fef42623          	sw	a5,-20(s0)
80000270:	fec42783          	lw	a5,-20(s0)
80000274:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:176
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80000278:	40000737          	lui	a4,0x40000
8000027c:	fdc42783          	lw	a5,-36(s0)
80000280:	0057d793          	srli	a5,a5,0x5
80000284:	fe842683          	lw	a3,-24(s0)
80000288:	00569693          	slli	a3,a3,0x5
8000028c:	00f686b3          	add	a3,a3,a5
80000290:	000017b7          	lui	a5,0x1
80000294:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80000298:	00f687b3          	add	a5,a3,a5
8000029c:	00279793          	slli	a5,a5,0x2
800002a0:	00f707b3          	add	a5,a4,a5
800002a4:	0007a783          	lw	a5,0(a5)
800002a8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:178

    current &= ~((uint32_t)1 << (IRQn % 32));
800002ac:	fdc42783          	lw	a5,-36(s0)
800002b0:	01f7f793          	andi	a5,a5,31
800002b4:	00100713          	li	a4,1
800002b8:	00f717b3          	sll	a5,a4,a5
800002bc:	fff7c793          	not	a5,a5
800002c0:	fe442703          	lw	a4,-28(s0)
800002c4:	00f777b3          	and	a5,a4,a5
800002c8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:180

    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
800002cc:	40000737          	lui	a4,0x40000
800002d0:	fdc42783          	lw	a5,-36(s0)
800002d4:	0057d793          	srli	a5,a5,0x5
800002d8:	fe842683          	lw	a3,-24(s0)
800002dc:	00569693          	slli	a3,a3,0x5
800002e0:	00f686b3          	add	a3,a3,a5
800002e4:	000017b7          	lui	a5,0x1
800002e8:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
800002ec:	00f687b3          	add	a5,a3,a5
800002f0:	00279793          	slli	a5,a5,0x2
800002f4:	00f707b3          	add	a5,a4,a5
800002f8:	fe442703          	lw	a4,-28(s0)
800002fc:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:181
}
80000300:	00000013          	nop
80000304:	02c12403          	lw	s0,44(sp)
80000308:	03010113          	addi	sp,sp,48
8000030c:	00008067          	ret

80000310 <PLIC_ClaimIRQ>:
PLIC_ClaimIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:205

/*==============================================================================
 * The function PLIC_ClaimIRQ() claims the interrupt from the PLIC controller.
 */
static inline uint32_t PLIC_ClaimIRQ(void)
{
80000310:	fe010113          	addi	sp,sp,-32
80000314:	00812e23          	sw	s0,28(sp)
80000318:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:206
    unsigned long hart_id = read_csr(mhartid);
8000031c:	f14027f3          	csrr	a5,mhartid
80000320:	fef42623          	sw	a5,-20(s0)
80000324:	fec42783          	lw	a5,-20(s0)
80000328:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:208

    return PLIC->TARGET[hart_id].CLAIM_COMPLETE;
8000032c:	40000737          	lui	a4,0x40000
80000330:	fe842783          	lw	a5,-24(s0)
80000334:	20078793          	addi	a5,a5,512
80000338:	00c79793          	slli	a5,a5,0xc
8000033c:	00f707b3          	add	a5,a4,a5
80000340:	0047a783          	lw	a5,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:209
}
80000344:	00078513          	mv	a0,a5
80000348:	01c12403          	lw	s0,28(sp)
8000034c:	02010113          	addi	sp,sp,32
80000350:	00008067          	ret

80000354 <PLIC_CompleteIRQ>:
PLIC_CompleteIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:216
/*==============================================================================
 * The function PLIC_CompleteIRQ() indicates to the PLIC controller the interrupt
 * is processed and claim is complete.
 */
static inline void PLIC_CompleteIRQ(uint32_t source)
{
80000354:	fd010113          	addi	sp,sp,-48
80000358:	02812623          	sw	s0,44(sp)
8000035c:	03010413          	addi	s0,sp,48
80000360:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:217
    unsigned long hart_id = read_csr(mhartid);
80000364:	f14027f3          	csrr	a5,mhartid
80000368:	fef42623          	sw	a5,-20(s0)
8000036c:	fec42783          	lw	a5,-20(s0)
80000370:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:219

    PLIC->TARGET[hart_id].CLAIM_COMPLETE = source;
80000374:	40000737          	lui	a4,0x40000
80000378:	fe842783          	lw	a5,-24(s0)
8000037c:	20078793          	addi	a5,a5,512
80000380:	00c79793          	slli	a5,a5,0xc
80000384:	00f707b3          	add	a5,a4,a5
80000388:	fdc42703          	lw	a4,-36(s0)
8000038c:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:220
}
80000390:	00000013          	nop
80000394:	02c12403          	lw	s0,44(sp)
80000398:	03010113          	addi	sp,sp,48
8000039c:	00008067          	ret

800003a0 <__enable_irq>:
__enable_irq():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:96

/*------------------------------------------------------------------------------
 * Enabler all interrupts.
 */
void __enable_irq(void)
{
800003a0:	fe010113          	addi	sp,sp,-32
800003a4:	00812e23          	sw	s0,28(sp)
800003a8:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:97
    set_csr(mstatus, MSTATUS_MIE);
800003ac:	300467f3          	csrrsi	a5,mstatus,8
800003b0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:98
}
800003b4:	00000013          	nop
800003b8:	01c12403          	lw	s0,28(sp)
800003bc:	02010113          	addi	sp,sp,32
800003c0:	00008067          	ret

800003c4 <handle_m_timer_interrupt>:
handle_m_timer_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:128

/*------------------------------------------------------------------------------
 * RISC-V interrupt handler for machine timer interrupts.
 */
void handle_m_timer_interrupt()
{
800003c4:	fe010113          	addi	sp,sp,-32
800003c8:	00112e23          	sw	ra,28(sp)
800003cc:	00812c23          	sw	s0,24(sp)
800003d0:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:129
    clear_csr(mie, MIP_MTIP); //  MIP_MTIP (1 << 7)
800003d4:	08000793          	li	a5,128
800003d8:	3047b7f3          	csrrc	a5,mie,a5
800003dc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:131

    SysTick_Handler();
800003e0:	53c010ef          	jal	ra,8000191c <SysTick_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:133

    PRCI->MTIMECMP[read_csr(mhartid)] = PRCI->MTIME + g_systick_increment;
800003e4:	44000737          	lui	a4,0x44000
800003e8:	0000c7b7          	lui	a5,0xc
800003ec:	00f707b3          	add	a5,a4,a5
800003f0:	ffc7a803          	lw	a6,-4(a5) # bffc <HEAP_SIZE-0x4004>
800003f4:	ff87a783          	lw	a5,-8(a5)
800003f8:	9001a583          	lw	a1,-1792(gp) # 80008870 <__data_end>
800003fc:	9041a603          	lw	a2,-1788(gp) # 80008874 <__data_end+0x4>
80000400:	44000537          	lui	a0,0x44000
80000404:	f1402773          	csrr	a4,mhartid
80000408:	fee42423          	sw	a4,-24(s0)
8000040c:	fe842883          	lw	a7,-24(s0)
80000410:	00b786b3          	add	a3,a5,a1
80000414:	00068313          	mv	t1,a3
80000418:	00f33333          	sltu	t1,t1,a5
8000041c:	00c80733          	add	a4,a6,a2
80000420:	00e307b3          	add	a5,t1,a4
80000424:	00078713          	mv	a4,a5
80000428:	00068793          	mv	a5,a3
8000042c:	00070813          	mv	a6,a4
80000430:	00001737          	lui	a4,0x1
80000434:	80070713          	addi	a4,a4,-2048 # 800 <HEAP_SIZE-0xf800>
80000438:	00e88733          	add	a4,a7,a4
8000043c:	00371713          	slli	a4,a4,0x3
80000440:	00e50733          	add	a4,a0,a4
80000444:	00f72023          	sw	a5,0(a4)
80000448:	01072223          	sw	a6,4(a4)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:135

    set_csr(mie, MIP_MTIP);
8000044c:	08000793          	li	a5,128
80000450:	3047a7f3          	csrrs	a5,mie,a5
80000454:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:136
    return;
80000458:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:137
}
8000045c:	01c12083          	lw	ra,28(sp)
80000460:	01812403          	lw	s0,24(sp)
80000464:	02010113          	addi	sp,sp,32
80000468:	00008067          	ret

8000046c <handle_m_ext_interrupt>:
handle_m_ext_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:182

/*------------------------------------------------------------------------------
 * 
 */
void handle_m_ext_interrupt()
{
8000046c:	fe010113          	addi	sp,sp,-32
80000470:	00112e23          	sw	ra,28(sp)
80000474:	00812c23          	sw	s0,24(sp)
80000478:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:183
    uint32_t int_num  = PLIC_ClaimIRQ();
8000047c:	e95ff0ef          	jal	ra,80000310 <PLIC_ClaimIRQ>
80000480:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:184
    uint8_t disable = EXT_IRQ_KEEP_ENABLED;
80000484:	fe0405a3          	sb	zero,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:186

    disable = ext_irq_handler_table[int_num]();
80000488:	800087b7          	lui	a5,0x80008
8000048c:	fec42703          	lw	a4,-20(s0)
80000490:	00271713          	slli	a4,a4,0x2
80000494:	79078793          	addi	a5,a5,1936 # 80008790 <__stack_top+0xfffc5590>
80000498:	00f707b3          	add	a5,a4,a5
8000049c:	0007a783          	lw	a5,0(a5)
800004a0:	000780e7          	jalr	a5
800004a4:	00050793          	mv	a5,a0
800004a8:	fef405a3          	sb	a5,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:188

    PLIC_CompleteIRQ(int_num);
800004ac:	fec42503          	lw	a0,-20(s0)
800004b0:	ea5ff0ef          	jal	ra,80000354 <PLIC_CompleteIRQ>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:190

    if(EXT_IRQ_DISABLE == disable)
800004b4:	feb44703          	lbu	a4,-21(s0)
800004b8:	00100793          	li	a5,1
800004bc:	00f71863          	bne	a4,a5,800004cc <handle_m_ext_interrupt+0x60>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:192
    {
        PLIC_DisableIRQ((IRQn_Type)int_num);
800004c0:	fec42503          	lw	a0,-20(s0)
800004c4:	d95ff0ef          	jal	ra,80000258 <PLIC_DisableIRQ>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:194
    }
    return;
800004c8:	00000013          	nop
800004cc:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:195
}
800004d0:	01c12083          	lw	ra,28(sp)
800004d4:	01812403          	lw	s0,24(sp)
800004d8:	02010113          	addi	sp,sp,32
800004dc:	00008067          	ret

800004e0 <handle_m_soft_interrupt>:
handle_m_soft_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:198

void handle_m_soft_interrupt()
{
800004e0:	ff010113          	addi	sp,sp,-16
800004e4:	00112623          	sw	ra,12(sp)
800004e8:	00812423          	sw	s0,8(sp)
800004ec:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:199
    Software_IRQHandler();
800004f0:	554010ef          	jal	ra,80001a44 <Software_IRQHandler>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:202

    /*Clear software interrupt*/
    PRCI->MSIP[0] = 0x00;
800004f4:	440007b7          	lui	a5,0x44000
800004f8:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:203
    return;
800004fc:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:204
}
80000500:	00c12083          	lw	ra,12(sp)
80000504:	00812403          	lw	s0,8(sp)
80000508:	01010113          	addi	sp,sp,16
8000050c:	00008067          	ret

80000510 <handle_syscall>:
handle_syscall():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:207

/* syscall funcion defined at system_call.c */
void handle_syscall(){
80000510:	fd010113          	addi	sp,sp,-48
80000514:	02112623          	sw	ra,44(sp)
80000518:	02812423          	sw	s0,40(sp)
8000051c:	03010413          	addi	s0,sp,48
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:210
	unsigned int arg0, arg1, arg2, arg3, arg4, arg5, type;
	unsigned int *pointer;
	register long temp asm("t0") = 0;
80000520:	00000293          	li	t0,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:211
	asm("addi	t0, sp, 0");
80000524:	00010293          	mv	t0,sp
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:213
	
	pointer = (unsigned int *)(temp + (29*4));
80000528:	00028793          	mv	a5,t0
8000052c:	07478793          	addi	a5,a5,116
80000530:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:214
	arg0 =  *pointer;
80000534:	fec42783          	lw	a5,-20(s0)
80000538:	0007a783          	lw	a5,0(a5)
8000053c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:216

	pointer = (unsigned int *)(temp + (30*4));
80000540:	00028793          	mv	a5,t0
80000544:	07878793          	addi	a5,a5,120
80000548:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:217
	arg1 = *pointer;
8000054c:	fec42783          	lw	a5,-20(s0)
80000550:	0007a783          	lw	a5,0(a5)
80000554:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:219
	
	pointer = (unsigned int *)(temp + (31*4));
80000558:	00028793          	mv	a5,t0
8000055c:	07c78793          	addi	a5,a5,124
80000560:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:220
	arg2 = *pointer;
80000564:	fec42783          	lw	a5,-20(s0)
80000568:	0007a783          	lw	a5,0(a5)
8000056c:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:222

	pointer = (unsigned int *)(temp + (32*4));
80000570:	00028793          	mv	a5,t0
80000574:	08078793          	addi	a5,a5,128
80000578:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:223
	arg3 = *pointer;
8000057c:	fec42783          	lw	a5,-20(s0)
80000580:	0007a783          	lw	a5,0(a5)
80000584:	fcf42e23          	sw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:225

	pointer = (unsigned int *)(temp + (33*4));
80000588:	00028793          	mv	a5,t0
8000058c:	08478793          	addi	a5,a5,132
80000590:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:226
	arg4 = *pointer;
80000594:	fec42783          	lw	a5,-20(s0)
80000598:	0007a783          	lw	a5,0(a5)
8000059c:	fcf42c23          	sw	a5,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:228

	pointer = (unsigned int *)(temp + (34*4));
800005a0:	00028793          	mv	a5,t0
800005a4:	08878793          	addi	a5,a5,136
800005a8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:229
	arg4 = *pointer;
800005ac:	fec42783          	lw	a5,-20(s0)
800005b0:	0007a783          	lw	a5,0(a5)
800005b4:	fcf42c23          	sw	a5,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:231

	pointer = (unsigned int *)(temp + (36*4));
800005b8:	00028793          	mv	a5,t0
800005bc:	09078793          	addi	a5,a5,144
800005c0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:232
	type = *pointer;
800005c4:	fec42783          	lw	a5,-20(s0)
800005c8:	0007a783          	lw	a5,0(a5)
800005cc:	fcf42a23          	sw	a5,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:234

	switch (type){
800005d0:	fd442783          	lw	a5,-44(s0)
800005d4:	ff678793          	addi	a5,a5,-10
800005d8:	03800713          	li	a4,56
800005dc:	12f76663          	bltu	a4,a5,80000708 <handle_syscall+0x1f8>
800005e0:	00279713          	slli	a4,a5,0x2
800005e4:	800087b7          	lui	a5,0x80008
800005e8:	e3c78793          	addi	a5,a5,-452 # 80007e3c <__stack_top+0xfffc4c3c>
800005ec:	00f707b3          	add	a5,a4,a5
800005f0:	0007a783          	lw	a5,0(a5)
800005f4:	00078067          	jr	a5
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:237

		case SYS_TESTING:
			prints("Detectei uma chamada TESTE de sistema!\n");
800005f8:	800087b7          	lui	a5,0x80008
800005fc:	da878513          	addi	a0,a5,-600 # 80007da8 <__stack_top+0xfffc4ba8>
80000600:	101050ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:238
			printsv("arg0 ", arg0);
80000604:	fe842783          	lw	a5,-24(s0)
80000608:	00078593          	mv	a1,a5
8000060c:	800087b7          	lui	a5,0x80008
80000610:	dd078513          	addi	a0,a5,-560 # 80007dd0 <__stack_top+0xfffc4bd0>
80000614:	199050ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:239
			printsv("arg1 ", arg1);
80000618:	fe442783          	lw	a5,-28(s0)
8000061c:	00078593          	mv	a1,a5
80000620:	800087b7          	lui	a5,0x80008
80000624:	dd878513          	addi	a0,a5,-552 # 80007dd8 <__stack_top+0xfffc4bd8>
80000628:	185050ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:240
			printsv("arg2 ", arg2);
8000062c:	fe042783          	lw	a5,-32(s0)
80000630:	00078593          	mv	a1,a5
80000634:	800087b7          	lui	a5,0x80008
80000638:	de078513          	addi	a0,a5,-544 # 80007de0 <__stack_top+0xfffc4be0>
8000063c:	171050ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:241
			printsv("arg3 ", arg3);
80000640:	fdc42783          	lw	a5,-36(s0)
80000644:	00078593          	mv	a1,a5
80000648:	800087b7          	lui	a5,0x80008
8000064c:	de878513          	addi	a0,a5,-536 # 80007de8 <__stack_top+0xfffc4be8>
80000650:	15d050ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:242
			printsv("arg4 ", arg4);
80000654:	fd842783          	lw	a5,-40(s0)
80000658:	00078593          	mv	a1,a5
8000065c:	800087b7          	lui	a5,0x80008
80000660:	df078513          	addi	a0,a5,-528 # 80007df0 <__stack_top+0xfffc4bf0>
80000664:	149050ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:243
			printsv("type ", type);
80000668:	fd442783          	lw	a5,-44(s0)
8000066c:	00078593          	mv	a1,a5
80000670:	800087b7          	lui	a5,0x80008
80000674:	df878513          	addi	a0,a5,-520 # 80007df8 <__stack_top+0xfffc4bf8>
80000678:	135050ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:244
			break;
8000067c:	1140006f          	j	80000790 <handle_syscall+0x280>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:247

        case SYS_PRINTS:
            prints(arg0);
80000680:	fe842783          	lw	a5,-24(s0)
80000684:	00078513          	mv	a0,a5
80000688:	079050ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:248
            UART_polled_tx_string( &g_uart, arg0 );
8000068c:	fe842783          	lw	a5,-24(s0)
80000690:	00078593          	mv	a1,a5
80000694:	800237b7          	lui	a5,0x80023
80000698:	1f478513          	addi	a0,a5,500 # 800231f4 <__stack_top+0xfffdfff4>
8000069c:	39d000ef          	jal	ra,80001238 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:249
            break;
800006a0:	0f00006f          	j	80000790 <handle_syscall+0x280>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:252
        
        case SYS_PRINTI:
            printi(arg0);
800006a4:	fe842783          	lw	a5,-24(s0)
800006a8:	00078513          	mv	a0,a5
800006ac:	0c5050ef          	jal	ra,80005f70 <printi>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:253
            myItoa(arg0, str, 10);
800006b0:	fe842703          	lw	a4,-24(s0)
800006b4:	00a00613          	li	a2,10
800006b8:	800227b7          	lui	a5,0x80022
800006bc:	d6c78593          	addi	a1,a5,-660 # 80021d6c <__stack_top+0xfffdeb6c>
800006c0:	00070513          	mv	a0,a4
800006c4:	365050ef          	jal	ra,80006228 <myItoa>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:254
            UART_polled_tx_string( &g_uart, (const uint8_t *)str );
800006c8:	800227b7          	lui	a5,0x80022
800006cc:	d6c78593          	addi	a1,a5,-660 # 80021d6c <__stack_top+0xfffdeb6c>
800006d0:	800237b7          	lui	a5,0x80023
800006d4:	1f478513          	addi	a0,a5,500 # 800231f4 <__stack_top+0xfffdfff4>
800006d8:	361000ef          	jal	ra,80001238 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:255
            break;
800006dc:	0b40006f          	j	80000790 <handle_syscall+0x280>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:259
        
        case SYS_SEND_MSG:
            //              addr, task
            API_SendMessage(arg0, arg1);
800006e0:	fe442583          	lw	a1,-28(s0)
800006e4:	fe842503          	lw	a0,-24(s0)
800006e8:	1fc060ef          	jal	ra,800068e4 <API_SendMessage>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:260
            break;
800006ec:	0a40006f          	j	80000790 <handle_syscall+0x280>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:264
        
        case SYS_RECV_MSG:
            //                 addr, task
            API_SendMessageReq(arg0, arg1);
800006f0:	fe442583          	lw	a1,-28(s0)
800006f4:	fe842503          	lw	a0,-24(s0)
800006f8:	6bc060ef          	jal	ra,80006db4 <API_SendMessageReq>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:265
            break;
800006fc:	0940006f          	j	80000790 <handle_syscall+0x280>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:268
        
        case SYS_END_TASK:
            API_FinishRunningTask();
80000700:	558040ef          	jal	ra,80004c58 <API_FinishRunningTask>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:269
            break;
80000704:	08c0006f          	j	80000790 <handle_syscall+0x280>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:272

		default:
			prints("Systemcall não identificada!\n");
80000708:	800087b7          	lui	a5,0x80008
8000070c:	e0078513          	addi	a0,a5,-512 # 80007e00 <__stack_top+0xfffc4c00>
80000710:	7f0050ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:273
			printsv("arg0 ", arg0);
80000714:	fe842783          	lw	a5,-24(s0)
80000718:	00078593          	mv	a1,a5
8000071c:	800087b7          	lui	a5,0x80008
80000720:	dd078513          	addi	a0,a5,-560 # 80007dd0 <__stack_top+0xfffc4bd0>
80000724:	089050ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:274
			printsv("arg1 ", arg1);
80000728:	fe442783          	lw	a5,-28(s0)
8000072c:	00078593          	mv	a1,a5
80000730:	800087b7          	lui	a5,0x80008
80000734:	dd878513          	addi	a0,a5,-552 # 80007dd8 <__stack_top+0xfffc4bd8>
80000738:	075050ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:275
			printsv("arg2 ", arg2);
8000073c:	fe042783          	lw	a5,-32(s0)
80000740:	00078593          	mv	a1,a5
80000744:	800087b7          	lui	a5,0x80008
80000748:	de078513          	addi	a0,a5,-544 # 80007de0 <__stack_top+0xfffc4be0>
8000074c:	061050ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:276
			printsv("arg3 ", arg3);
80000750:	fdc42783          	lw	a5,-36(s0)
80000754:	00078593          	mv	a1,a5
80000758:	800087b7          	lui	a5,0x80008
8000075c:	de878513          	addi	a0,a5,-536 # 80007de8 <__stack_top+0xfffc4be8>
80000760:	04d050ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:277
			printsv("arg4 ", arg4);
80000764:	fd842783          	lw	a5,-40(s0)
80000768:	00078593          	mv	a1,a5
8000076c:	800087b7          	lui	a5,0x80008
80000770:	df078513          	addi	a0,a5,-528 # 80007df0 <__stack_top+0xfffc4bf0>
80000774:	039050ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:278
			printsv("type ", type);
80000778:	fd442783          	lw	a5,-44(s0)
8000077c:	00078593          	mv	a1,a5
80000780:	800087b7          	lui	a5,0x80008
80000784:	df878513          	addi	a0,a5,-520 # 80007df8 <__stack_top+0xfffc4bf8>
80000788:	025050ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:279
			break;
8000078c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:281
	}
	return;
80000790:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:296
	// 	value = *p;
	// 	printsvsv("i: ", i, " value: ", value);
	// }
    // prints("Cheguei aqui!!!!!!! sucessooo :D\n");
	////////////////////////////////////////////////////
}
80000794:	02c12083          	lw	ra,44(sp)
80000798:	02812403          	lw	s0,40(sp)
8000079c:	03010113          	addi	sp,sp,48
800007a0:	00008067          	ret

800007a4 <handle_trap>:
handle_trap():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:302

/*------------------------------------------------------------------------------
 * Trap/Interrupt handler
 */
uintptr_t handle_trap(uintptr_t mcause, uintptr_t epc)
{
800007a4:	fe010113          	addi	sp,sp,-32
800007a8:	00112e23          	sw	ra,28(sp)
800007ac:	00812c23          	sw	s0,24(sp)
800007b0:	02010413          	addi	s0,sp,32
800007b4:	fea42623          	sw	a0,-20(s0)
800007b8:	feb42423          	sw	a1,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303
    if (!(mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE) == ENV_CALL_M || (mcause & MCAUSE_CAUSE) == ENV_CALL_H || (mcause & MCAUSE_CAUSE) == ENV_CALL_S || (mcause & MCAUSE_CAUSE) == ENV_CALL_U)){
800007bc:	fec42783          	lw	a5,-20(s0)
800007c0:	0607cc63          	bltz	a5,80000838 <handle_trap+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303 (discriminator 1)
800007c4:	fec42703          	lw	a4,-20(s0)
800007c8:	800007b7          	lui	a5,0x80000
800007cc:	fff7c793          	not	a5,a5
800007d0:	00f77733          	and	a4,a4,a5
800007d4:	00b00793          	li	a5,11
800007d8:	04f70663          	beq	a4,a5,80000824 <handle_trap+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303 (discriminator 2)
800007dc:	fec42703          	lw	a4,-20(s0)
800007e0:	800007b7          	lui	a5,0x80000
800007e4:	fff7c793          	not	a5,a5
800007e8:	00f77733          	and	a4,a4,a5
800007ec:	00a00793          	li	a5,10
800007f0:	02f70a63          	beq	a4,a5,80000824 <handle_trap+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303 (discriminator 3)
800007f4:	fec42703          	lw	a4,-20(s0)
800007f8:	800007b7          	lui	a5,0x80000
800007fc:	fff7c793          	not	a5,a5
80000800:	00f77733          	and	a4,a4,a5
80000804:	00900793          	li	a5,9
80000808:	00f70e63          	beq	a4,a5,80000824 <handle_trap+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303 (discriminator 4)
8000080c:	fec42703          	lw	a4,-20(s0)
80000810:	800007b7          	lui	a5,0x80000
80000814:	fff7c793          	not	a5,a5
80000818:	00f77733          	and	a4,a4,a5
8000081c:	00800793          	li	a5,8
80000820:	00f71c63          	bne	a4,a5,80000838 <handle_trap+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:304
        handle_syscall();
80000824:	cedff0ef          	jal	ra,80000510 <handle_syscall>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:305
        epc = (uintptr_t) (epc + 4);
80000828:	fe842783          	lw	a5,-24(s0)
8000082c:	00478793          	addi	a5,a5,4 # 80000004 <__stack_top+0xfffbce04>
80000830:	fef42423          	sw	a5,-24(s0)
80000834:	0c40006f          	j	800008f8 <handle_trap+0x154>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:307
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_EXT)){
80000838:	fec42783          	lw	a5,-20(s0)
8000083c:	0207d263          	bgez	a5,80000860 <handle_trap+0xbc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:307 (discriminator 1)
80000840:	fec42703          	lw	a4,-20(s0)
80000844:	800007b7          	lui	a5,0x80000
80000848:	fff7c793          	not	a5,a5
8000084c:	00f77733          	and	a4,a4,a5
80000850:	00b00793          	li	a5,11
80000854:	00f71663          	bne	a4,a5,80000860 <handle_trap+0xbc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:308
        handle_m_ext_interrupt();
80000858:	c15ff0ef          	jal	ra,8000046c <handle_m_ext_interrupt>
8000085c:	09c0006f          	j	800008f8 <handle_trap+0x154>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:310
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_TIMER)){
80000860:	fec42783          	lw	a5,-20(s0)
80000864:	0207d263          	bgez	a5,80000888 <handle_trap+0xe4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:310 (discriminator 1)
80000868:	fec42703          	lw	a4,-20(s0)
8000086c:	800007b7          	lui	a5,0x80000
80000870:	fff7c793          	not	a5,a5
80000874:	00f77733          	and	a4,a4,a5
80000878:	00700793          	li	a5,7
8000087c:	00f71663          	bne	a4,a5,80000888 <handle_trap+0xe4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:311
        handle_m_timer_interrupt();
80000880:	b45ff0ef          	jal	ra,800003c4 <handle_m_timer_interrupt>
80000884:	0740006f          	j	800008f8 <handle_trap+0x154>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:313
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_SOFT)){
80000888:	fec42783          	lw	a5,-20(s0)
8000088c:	0207d263          	bgez	a5,800008b0 <handle_trap+0x10c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:313 (discriminator 1)
80000890:	fec42703          	lw	a4,-20(s0)
80000894:	800007b7          	lui	a5,0x80000
80000898:	fff7c793          	not	a5,a5
8000089c:	00f77733          	and	a4,a4,a5
800008a0:	00300793          	li	a5,3
800008a4:	00f71663          	bne	a4,a5,800008b0 <handle_trap+0x10c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:314
        handle_m_soft_interrupt();
800008a8:	c39ff0ef          	jal	ra,800004e0 <handle_m_soft_interrupt>
800008ac:	04c0006f          	j	800008f8 <handle_trap+0x154>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:317
    }
    else{
        write(1, "trap\n", 5);
800008b0:	00500613          	li	a2,5
800008b4:	800087b7          	lui	a5,0x80008
800008b8:	e2078593          	addi	a1,a5,-480 # 80007e20 <__stack_top+0xfffc4c20>
800008bc:	00100513          	li	a0,1
800008c0:	46c070ef          	jal	ra,80007d2c <write>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:318
        printsv("epc: ", epc);
800008c4:	fe842783          	lw	a5,-24(s0)
800008c8:	00078593          	mv	a1,a5
800008cc:	800087b7          	lui	a5,0x80008
800008d0:	e2878513          	addi	a0,a5,-472 # 80007e28 <__stack_top+0xfffc4c28>
800008d4:	6d8050ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:319
        printsv("mcause: ", mcause);
800008d8:	fec42783          	lw	a5,-20(s0)
800008dc:	00078593          	mv	a1,a5
800008e0:	800087b7          	lui	a5,0x80008
800008e4:	e3078513          	addi	a0,a5,-464 # 80007e30 <__stack_top+0xfffc4c30>
800008e8:	6c4050ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:320
        _exit(mcause);
800008ec:	fec42783          	lw	a5,-20(s0)
800008f0:	00078513          	mv	a0,a5
800008f4:	4e8000ef          	jal	ra,80000ddc <_exit>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:324
    }
    
    // Added by Iaçanã, solves several interruption problems!
    portDISABLE_INTERRUPTS(); 
800008f8:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:325
    return epc;
800008fc:	fe842783          	lw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:326
}
80000900:	00078513          	mv	a0,a5
80000904:	01c12083          	lw	ra,28(sp)
80000908:	01812403          	lw	s0,24(sp)
8000090c:	02010113          	addi	sp,sp,32
80000910:	00008067          	ret

80000914 <Invalid_IRQHandler>:
Invalid_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:37
{
    ;
}

__attribute__((weak))  uint8_t Invalid_IRQHandler(void)
{
80000914:	ff010113          	addi	sp,sp,-16
80000918:	00812623          	sw	s0,12(sp)
8000091c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:38
    return(0);
80000920:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:39
}
80000924:	00078513          	mv	a0,a5
80000928:	00c12403          	lw	s0,12(sp)
8000092c:	01010113          	addi	sp,sp,16
80000930:	00008067          	ret

80000934 <External_1_IRQHandler>:
External_1_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:42

__attribute__((weak))  uint8_t External_1_IRQHandler(void)
{
80000934:	ff010113          	addi	sp,sp,-16
80000938:	00812623          	sw	s0,12(sp)
8000093c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:43
    return(0);
80000940:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:44
}
80000944:	00078513          	mv	a0,a5
80000948:	00c12403          	lw	s0,12(sp)
8000094c:	01010113          	addi	sp,sp,16
80000950:	00008067          	ret

80000954 <External_3_IRQHandler>:
External_3_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:52
{
    return(0);
}

__attribute__((weak))  uint8_t External_3_IRQHandler(void)
{
80000954:	ff010113          	addi	sp,sp,-16
80000958:	00812623          	sw	s0,12(sp)
8000095c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:53
    return(0);
80000960:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:54
}
80000964:	00078513          	mv	a0,a5
80000968:	00c12403          	lw	s0,12(sp)
8000096c:	01010113          	addi	sp,sp,16
80000970:	00008067          	ret

80000974 <External_4_IRQHandler>:
External_4_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:57

__attribute__((weak))  uint8_t External_4_IRQHandler(void)
{
80000974:	ff010113          	addi	sp,sp,-16
80000978:	00812623          	sw	s0,12(sp)
8000097c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:58
    return(0);
80000980:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:59
}
80000984:	00078513          	mv	a0,a5
80000988:	00c12403          	lw	s0,12(sp)
8000098c:	01010113          	addi	sp,sp,16
80000990:	00008067          	ret

80000994 <External_5_IRQHandler>:
External_5_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:62

__attribute__((weak))  uint8_t External_5_IRQHandler(void)
{
80000994:	ff010113          	addi	sp,sp,-16
80000998:	00812623          	sw	s0,12(sp)
8000099c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:63
    return(0);
800009a0:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:64
}
800009a4:	00078513          	mv	a0,a5
800009a8:	00c12403          	lw	s0,12(sp)
800009ac:	01010113          	addi	sp,sp,16
800009b0:	00008067          	ret

800009b4 <External_6_IRQHandler>:
External_6_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:67

__attribute__((weak))  uint8_t External_6_IRQHandler(void)
{
800009b4:	ff010113          	addi	sp,sp,-16
800009b8:	00812623          	sw	s0,12(sp)
800009bc:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:68
    return(0);
800009c0:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:69
}
800009c4:	00078513          	mv	a0,a5
800009c8:	00c12403          	lw	s0,12(sp)
800009cc:	01010113          	addi	sp,sp,16
800009d0:	00008067          	ret

800009d4 <External_7_IRQHandler>:
External_7_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:72

__attribute__((weak))  uint8_t External_7_IRQHandler(void)
{
800009d4:	ff010113          	addi	sp,sp,-16
800009d8:	00812623          	sw	s0,12(sp)
800009dc:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:73
    return(0);
800009e0:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:74
}
800009e4:	00078513          	mv	a0,a5
800009e8:	00c12403          	lw	s0,12(sp)
800009ec:	01010113          	addi	sp,sp,16
800009f0:	00008067          	ret

800009f4 <External_8_IRQHandler>:
External_8_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:77

__attribute__((weak))  uint8_t External_8_IRQHandler(void)
{
800009f4:	ff010113          	addi	sp,sp,-16
800009f8:	00812623          	sw	s0,12(sp)
800009fc:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:78
    return(0);
80000a00:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:79
}
80000a04:	00078513          	mv	a0,a5
80000a08:	00c12403          	lw	s0,12(sp)
80000a0c:	01010113          	addi	sp,sp,16
80000a10:	00008067          	ret

80000a14 <External_9_IRQHandler>:
External_9_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:82

__attribute__((weak))  uint8_t External_9_IRQHandler(void)
{
80000a14:	ff010113          	addi	sp,sp,-16
80000a18:	00812623          	sw	s0,12(sp)
80000a1c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:83
    return(0);
80000a20:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:84
}
80000a24:	00078513          	mv	a0,a5
80000a28:	00c12403          	lw	s0,12(sp)
80000a2c:	01010113          	addi	sp,sp,16
80000a30:	00008067          	ret

80000a34 <External_10_IRQHandler>:
External_10_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:87

__attribute__((weak))  uint8_t External_10_IRQHandler(void)
{
80000a34:	ff010113          	addi	sp,sp,-16
80000a38:	00812623          	sw	s0,12(sp)
80000a3c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:88
    return(0);
80000a40:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:89
}
80000a44:	00078513          	mv	a0,a5
80000a48:	00c12403          	lw	s0,12(sp)
80000a4c:	01010113          	addi	sp,sp,16
80000a50:	00008067          	ret

80000a54 <External_11_IRQHandler>:
External_11_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:92

__attribute__((weak))  uint8_t External_11_IRQHandler(void)
{
80000a54:	ff010113          	addi	sp,sp,-16
80000a58:	00812623          	sw	s0,12(sp)
80000a5c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:93
    return(0);
80000a60:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:94
}
80000a64:	00078513          	mv	a0,a5
80000a68:	00c12403          	lw	s0,12(sp)
80000a6c:	01010113          	addi	sp,sp,16
80000a70:	00008067          	ret

80000a74 <External_12_IRQHandler>:
External_12_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:97

__attribute__((weak))  uint8_t External_12_IRQHandler(void)
{
80000a74:	ff010113          	addi	sp,sp,-16
80000a78:	00812623          	sw	s0,12(sp)
80000a7c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:98
    return(0);
80000a80:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:99
}
80000a84:	00078513          	mv	a0,a5
80000a88:	00c12403          	lw	s0,12(sp)
80000a8c:	01010113          	addi	sp,sp,16
80000a90:	00008067          	ret

80000a94 <External_13_IRQHandler>:
External_13_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:102

__attribute__((weak))  uint8_t External_13_IRQHandler(void)
{
80000a94:	ff010113          	addi	sp,sp,-16
80000a98:	00812623          	sw	s0,12(sp)
80000a9c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:103
    return(0);
80000aa0:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:104
}
80000aa4:	00078513          	mv	a0,a5
80000aa8:	00c12403          	lw	s0,12(sp)
80000aac:	01010113          	addi	sp,sp,16
80000ab0:	00008067          	ret

80000ab4 <External_14_IRQHandler>:
External_14_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:107

__attribute__((weak))  uint8_t External_14_IRQHandler(void)
{
80000ab4:	ff010113          	addi	sp,sp,-16
80000ab8:	00812623          	sw	s0,12(sp)
80000abc:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:108
    return(0);
80000ac0:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:109
}
80000ac4:	00078513          	mv	a0,a5
80000ac8:	00c12403          	lw	s0,12(sp)
80000acc:	01010113          	addi	sp,sp,16
80000ad0:	00008067          	ret

80000ad4 <External_15_IRQHandler>:
External_15_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:112

__attribute__((weak))  uint8_t External_15_IRQHandler(void)
{
80000ad4:	ff010113          	addi	sp,sp,-16
80000ad8:	00812623          	sw	s0,12(sp)
80000adc:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:113
    return(0);
80000ae0:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:114
}
80000ae4:	00078513          	mv	a0,a5
80000ae8:	00c12403          	lw	s0,12(sp)
80000aec:	01010113          	addi	sp,sp,16
80000af0:	00008067          	ret

80000af4 <External_16_IRQHandler>:
External_16_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:117

__attribute__((weak))  uint8_t External_16_IRQHandler(void)
{
80000af4:	ff010113          	addi	sp,sp,-16
80000af8:	00812623          	sw	s0,12(sp)
80000afc:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:118
    return(0);
80000b00:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:119
}
80000b04:	00078513          	mv	a0,a5
80000b08:	00c12403          	lw	s0,12(sp)
80000b0c:	01010113          	addi	sp,sp,16
80000b10:	00008067          	ret

80000b14 <External_17_IRQHandler>:
External_17_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:122

__attribute__((weak))  uint8_t External_17_IRQHandler(void)
{
80000b14:	ff010113          	addi	sp,sp,-16
80000b18:	00812623          	sw	s0,12(sp)
80000b1c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:123
    return(0);
80000b20:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:124
}
80000b24:	00078513          	mv	a0,a5
80000b28:	00c12403          	lw	s0,12(sp)
80000b2c:	01010113          	addi	sp,sp,16
80000b30:	00008067          	ret

80000b34 <External_18_IRQHandler>:
External_18_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:127

__attribute__((weak))  uint8_t External_18_IRQHandler(void)
{
80000b34:	ff010113          	addi	sp,sp,-16
80000b38:	00812623          	sw	s0,12(sp)
80000b3c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:128
    return(0);
80000b40:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:129
}
80000b44:	00078513          	mv	a0,a5
80000b48:	00c12403          	lw	s0,12(sp)
80000b4c:	01010113          	addi	sp,sp,16
80000b50:	00008067          	ret

80000b54 <External_19_IRQHandler>:
External_19_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:132

__attribute__((weak))  uint8_t External_19_IRQHandler(void)
{
80000b54:	ff010113          	addi	sp,sp,-16
80000b58:	00812623          	sw	s0,12(sp)
80000b5c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:133
    return(0);
80000b60:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:134
}
80000b64:	00078513          	mv	a0,a5
80000b68:	00c12403          	lw	s0,12(sp)
80000b6c:	01010113          	addi	sp,sp,16
80000b70:	00008067          	ret

80000b74 <External_20_IRQHandler>:
External_20_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:137

__attribute__((weak))  uint8_t External_20_IRQHandler(void)
{
80000b74:	ff010113          	addi	sp,sp,-16
80000b78:	00812623          	sw	s0,12(sp)
80000b7c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:138
    return(0);
80000b80:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:139
}
80000b84:	00078513          	mv	a0,a5
80000b88:	00c12403          	lw	s0,12(sp)
80000b8c:	01010113          	addi	sp,sp,16
80000b90:	00008067          	ret

80000b94 <External_21_IRQHandler>:
External_21_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:142

__attribute__((weak))  uint8_t External_21_IRQHandler(void)
{
80000b94:	ff010113          	addi	sp,sp,-16
80000b98:	00812623          	sw	s0,12(sp)
80000b9c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:143
    return(0);
80000ba0:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:144
}
80000ba4:	00078513          	mv	a0,a5
80000ba8:	00c12403          	lw	s0,12(sp)
80000bac:	01010113          	addi	sp,sp,16
80000bb0:	00008067          	ret

80000bb4 <External_22_IRQHandler>:
External_22_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:147

__attribute__((weak))  uint8_t External_22_IRQHandler(void)
{
80000bb4:	ff010113          	addi	sp,sp,-16
80000bb8:	00812623          	sw	s0,12(sp)
80000bbc:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:148
    return(0);
80000bc0:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:149
}
80000bc4:	00078513          	mv	a0,a5
80000bc8:	00c12403          	lw	s0,12(sp)
80000bcc:	01010113          	addi	sp,sp,16
80000bd0:	00008067          	ret

80000bd4 <External_23_IRQHandler>:
External_23_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:152

__attribute__((weak))  uint8_t External_23_IRQHandler(void)
{
80000bd4:	ff010113          	addi	sp,sp,-16
80000bd8:	00812623          	sw	s0,12(sp)
80000bdc:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:153
    return(0);
80000be0:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:154
}
80000be4:	00078513          	mv	a0,a5
80000be8:	00c12403          	lw	s0,12(sp)
80000bec:	01010113          	addi	sp,sp,16
80000bf0:	00008067          	ret

80000bf4 <External_24_IRQHandler>:
External_24_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:157

__attribute__((weak))  uint8_t External_24_IRQHandler(void)
{
80000bf4:	ff010113          	addi	sp,sp,-16
80000bf8:	00812623          	sw	s0,12(sp)
80000bfc:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:158
    return(0);
80000c00:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:159
}
80000c04:	00078513          	mv	a0,a5
80000c08:	00c12403          	lw	s0,12(sp)
80000c0c:	01010113          	addi	sp,sp,16
80000c10:	00008067          	ret

80000c14 <External_25_IRQHandler>:
External_25_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:162

__attribute__((weak))  uint8_t External_25_IRQHandler(void)
{
80000c14:	ff010113          	addi	sp,sp,-16
80000c18:	00812623          	sw	s0,12(sp)
80000c1c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:163
    return(0);
80000c20:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:164
}
80000c24:	00078513          	mv	a0,a5
80000c28:	00c12403          	lw	s0,12(sp)
80000c2c:	01010113          	addi	sp,sp,16
80000c30:	00008067          	ret

80000c34 <External_26_IRQHandler>:
External_26_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:167

__attribute__((weak))  uint8_t External_26_IRQHandler(void)
{
80000c34:	ff010113          	addi	sp,sp,-16
80000c38:	00812623          	sw	s0,12(sp)
80000c3c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:168
    return(0);
80000c40:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:169
}
80000c44:	00078513          	mv	a0,a5
80000c48:	00c12403          	lw	s0,12(sp)
80000c4c:	01010113          	addi	sp,sp,16
80000c50:	00008067          	ret

80000c54 <External_27_IRQHandler>:
External_27_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:172

__attribute__((weak))  uint8_t External_27_IRQHandler(void)
{
80000c54:	ff010113          	addi	sp,sp,-16
80000c58:	00812623          	sw	s0,12(sp)
80000c5c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:173
    return(0);
80000c60:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:174
}
80000c64:	00078513          	mv	a0,a5
80000c68:	00c12403          	lw	s0,12(sp)
80000c6c:	01010113          	addi	sp,sp,16
80000c70:	00008067          	ret

80000c74 <External_28_IRQHandler>:
External_28_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:177

__attribute__((weak))  uint8_t External_28_IRQHandler(void)
{
80000c74:	ff010113          	addi	sp,sp,-16
80000c78:	00812623          	sw	s0,12(sp)
80000c7c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:178
    return(0);
80000c80:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:179
}
80000c84:	00078513          	mv	a0,a5
80000c88:	00c12403          	lw	s0,12(sp)
80000c8c:	01010113          	addi	sp,sp,16
80000c90:	00008067          	ret

80000c94 <External_29_IRQHandler>:
External_29_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:182

__attribute__((weak))  uint8_t External_29_IRQHandler(void)
{
80000c94:	ff010113          	addi	sp,sp,-16
80000c98:	00812623          	sw	s0,12(sp)
80000c9c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:183
    return(0);
80000ca0:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:184
}
80000ca4:	00078513          	mv	a0,a5
80000ca8:	00c12403          	lw	s0,12(sp)
80000cac:	01010113          	addi	sp,sp,16
80000cb0:	00008067          	ret

80000cb4 <External_30_IRQHandler>:
External_30_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:187

__attribute__((weak))  uint8_t External_30_IRQHandler(void)
{
80000cb4:	ff010113          	addi	sp,sp,-16
80000cb8:	00812623          	sw	s0,12(sp)
80000cbc:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:188
    return(0);
80000cc0:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:189
}
80000cc4:	00078513          	mv	a0,a5
80000cc8:	00c12403          	lw	s0,12(sp)
80000ccc:	01010113          	addi	sp,sp,16
80000cd0:	00008067          	ret

80000cd4 <External_31_IRQHandler>:
External_31_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:192

__attribute__((weak))  uint8_t External_31_IRQHandler(void)
{
80000cd4:	ff010113          	addi	sp,sp,-16
80000cd8:	00812623          	sw	s0,12(sp)
80000cdc:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:193
    return(0);
80000ce0:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:194
}
80000ce4:	00078513          	mv	a0,a5
80000ce8:	00c12403          	lw	s0,12(sp)
80000cec:	01010113          	addi	sp,sp,16
80000cf0:	00008067          	ret

80000cf4 <write_hex>:
write_hex():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:55

char *__env[1] = { 0 };
char **environ = __env;

void write_hex(int fd, uint32_t hex)
{
80000cf4:	fd010113          	addi	sp,sp,-48
80000cf8:	02112623          	sw	ra,44(sp)
80000cfc:	02812423          	sw	s0,40(sp)
80000d00:	03010413          	addi	s0,sp,48
80000d04:	fca42e23          	sw	a0,-36(s0)
80000d08:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:61
    uint8_t ii;
    uint8_t jj;
    char towrite;
    uint8_t digit;

    write( fd , "0x", 2 );
80000d0c:	00200613          	li	a2,2
80000d10:	800087b7          	lui	a5,0x80008
80000d14:	f2078593          	addi	a1,a5,-224 # 80007f20 <__stack_top+0xfffc4d20>
80000d18:	fdc42503          	lw	a0,-36(s0)
80000d1c:	010070ef          	jal	ra,80007d2c <write>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:63

    for (ii = 8 ; ii > 0; ii--)
80000d20:	00800793          	li	a5,8
80000d24:	fef407a3          	sb	a5,-17(s0)
80000d28:	0980006f          	j	80000dc0 <write_hex+0xcc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:65
    {
        jj = ii-1;
80000d2c:	fef44783          	lbu	a5,-17(s0)
80000d30:	fff78793          	addi	a5,a5,-1
80000d34:	fef40723          	sb	a5,-18(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:66
        digit = ((hex & (0xF << (jj*4))) >> (jj*4));
80000d38:	fee44783          	lbu	a5,-18(s0)
80000d3c:	00279793          	slli	a5,a5,0x2
80000d40:	00f00713          	li	a4,15
80000d44:	00f717b3          	sll	a5,a4,a5
80000d48:	00078713          	mv	a4,a5
80000d4c:	fd842783          	lw	a5,-40(s0)
80000d50:	00f77733          	and	a4,a4,a5
80000d54:	fee44783          	lbu	a5,-18(s0)
80000d58:	00279793          	slli	a5,a5,0x2
80000d5c:	00f757b3          	srl	a5,a4,a5
80000d60:	fef406a3          	sb	a5,-19(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:67
        towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
80000d64:	fed44703          	lbu	a4,-19(s0)
80000d68:	00900793          	li	a5,9
80000d6c:	00e7ee63          	bltu	a5,a4,80000d88 <write_hex+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 1)
80000d70:	fed44783          	lbu	a5,-19(s0)
80000d74:	03078793          	addi	a5,a5,48
80000d78:	0ff7f793          	andi	a5,a5,255
80000d7c:	01879793          	slli	a5,a5,0x18
80000d80:	4187d793          	srai	a5,a5,0x18
80000d84:	0180006f          	j	80000d9c <write_hex+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 2)
80000d88:	fed44783          	lbu	a5,-19(s0)
80000d8c:	03778793          	addi	a5,a5,55
80000d90:	0ff7f793          	andi	a5,a5,255
80000d94:	01879793          	slli	a5,a5,0x18
80000d98:	4187d793          	srai	a5,a5,0x18
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 4)
80000d9c:	fef40623          	sb	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:68 (discriminator 4)
        write( fd, &towrite, 1);
80000da0:	fec40793          	addi	a5,s0,-20
80000da4:	00100613          	li	a2,1
80000da8:	00078593          	mv	a1,a5
80000dac:	fdc42503          	lw	a0,-36(s0)
80000db0:	77d060ef          	jal	ra,80007d2c <write>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 4)
    for (ii = 8 ; ii > 0; ii--)
80000db4:	fef44783          	lbu	a5,-17(s0)
80000db8:	fff78793          	addi	a5,a5,-1
80000dbc:	fef407a3          	sb	a5,-17(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 2)
80000dc0:	fef44783          	lbu	a5,-17(s0)
80000dc4:	f60794e3          	bnez	a5,80000d2c <write_hex+0x38>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:70
    }
}
80000dc8:	00000013          	nop
80000dcc:	02c12083          	lw	ra,44(sp)
80000dd0:	02812403          	lw	s0,40(sp)
80000dd4:	03010113          	addi	sp,sp,48
80000dd8:	00008067          	ret

80000ddc <_exit>:
_exit():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:74

               
void _exit(int code)
{
80000ddc:	fd010113          	addi	sp,sp,-48
80000de0:	02112623          	sw	ra,44(sp)
80000de4:	02812423          	sw	s0,40(sp)
80000de8:	03010413          	addi	s0,sp,48
80000dec:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:76
#ifdef MSCC_STDIO_THRU_CORE_UART_APB
    const char * message = "\nProgam has exited with code:";
80000df0:	800087b7          	lui	a5,0x80008
80000df4:	f2478793          	addi	a5,a5,-220 # 80007f24 <__stack_top+0xfffc4d24>
80000df8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:78

    write(STDERR_FILENO, message, strlen(message));
80000dfc:	fec42503          	lw	a0,-20(s0)
80000e00:	0c8010ef          	jal	ra,80001ec8 <strlen>
80000e04:	00050793          	mv	a5,a0
80000e08:	00078613          	mv	a2,a5
80000e0c:	fec42583          	lw	a1,-20(s0)
80000e10:	00200513          	li	a0,2
80000e14:	719060ef          	jal	ra,80007d2c <write>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:79
    write_hex(STDERR_FILENO, code);
80000e18:	fdc42783          	lw	a5,-36(s0)
80000e1c:	00078593          	mv	a1,a5
80000e20:	00200513          	li	a0,2
80000e24:	ed1ff0ef          	jal	ra,80000cf4 <write_hex>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:82 (discriminator 1)
#endif

    while (1);
80000e28:	0000006f          	j	80000e28 <_exit+0x4c>

80000e2c <_isatty>:
_isatty():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:101
    curbrk += incr;
    return curbrk - incr;
}

int _isatty(int fd)
{
80000e2c:	fe010113          	addi	sp,sp,-32
80000e30:	00812e23          	sw	s0,28(sp)
80000e34:	02010413          	addi	s0,sp,32
80000e38:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:102
    if (fd == STDOUT_FILENO || fd == STDERR_FILENO)
80000e3c:	fec42703          	lw	a4,-20(s0)
80000e40:	00100793          	li	a5,1
80000e44:	00f70863          	beq	a4,a5,80000e54 <_isatty+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:102 (discriminator 1)
80000e48:	fec42703          	lw	a4,-20(s0)
80000e4c:	00200793          	li	a5,2
80000e50:	00f71663          	bne	a4,a5,80000e5c <_isatty+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:104
    {
        return 1;
80000e54:	00100793          	li	a5,1
80000e58:	0140006f          	j	80000e6c <_isatty+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:107
    }

    errno = EBADF;
80000e5c:	800227b7          	lui	a5,0x80022
80000e60:	00900713          	li	a4,9
80000e64:	68e7aa23          	sw	a4,1684(a5) # 80022694 <__stack_top+0xfffdf494>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:108
    return 0;
80000e68:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:109
}
80000e6c:	00078513          	mv	a0,a5
80000e70:	01c12403          	lw	s0,28(sp)
80000e74:	02010113          	addi	sp,sp,32
80000e78:	00008067          	ret

80000e7c <stub>:
stub():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:112

static int stub(int err)
{
80000e7c:	fe010113          	addi	sp,sp,-32
80000e80:	00812e23          	sw	s0,28(sp)
80000e84:	02010413          	addi	s0,sp,32
80000e88:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:113
    errno = err;
80000e8c:	800227b7          	lui	a5,0x80022
80000e90:	fec42703          	lw	a4,-20(s0)
80000e94:	68e7aa23          	sw	a4,1684(a5) # 80022694 <__stack_top+0xfffdf494>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:114
    return -1;
80000e98:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:115
}
80000e9c:	00078513          	mv	a0,a5
80000ea0:	01c12403          	lw	s0,28(sp)
80000ea4:	02010113          	addi	sp,sp,32
80000ea8:	00008067          	ret

80000eac <_write>:
_write():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:226
{
    return stub(ECHILD);
}

ssize_t _write(int fd, const void* ptr, size_t len)
{
80000eac:	fd010113          	addi	sp,sp,-48
80000eb0:	02112623          	sw	ra,44(sp)
80000eb4:	02812423          	sw	s0,40(sp)
80000eb8:	03010413          	addi	s0,sp,48
80000ebc:	fca42e23          	sw	a0,-36(s0)
80000ec0:	fcb42c23          	sw	a1,-40(s0)
80000ec4:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:229

#ifdef MSCC_STDIO_THRU_CORE_UART_APB
  const uint8_t * current = (const uint8_t *) ptr;
80000ec8:	fd842783          	lw	a5,-40(s0)
80000ecc:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:232
  size_t jj;

  if (_isatty(fd))
80000ed0:	fdc42503          	lw	a0,-36(s0)
80000ed4:	f59ff0ef          	jal	ra,80000e2c <_isatty>
80000ed8:	00050793          	mv	a5,a0
80000edc:	08078c63          	beqz	a5,80000f74 <_write+0xc8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:238
  {
        /*--------------------------------------------------------------------------
        * Initialize the UART driver if it is the first time this function is
        * called.
        */
        if ( !g_stdio_uart_init_done )
80000ee0:	9101a783          	lw	a5,-1776(gp) # 80008880 <g_stdio_uart_init_done>
80000ee4:	02079063          	bnez	a5,80000f04 <_write+0x58>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:245
            /******************************************************************************
            * Baud value:
            * This value is calculated using the following equation:
            *      BAUD_VALUE = (CLOCK / (16 * BAUD_RATE)) - 1
            *****************************************************************************/
            UART_init( &g_stdio_uart, MSCC_STDIO_UART_BASE_ADDR, ((SYS_CLK_FREQ/(16 * MSCC_STDIO_BAUD_VALUE))-1), (DATA_8_BITS | NO_PARITY));
80000ee8:	00100693          	li	a3,1
80000eec:	02c00613          	li	a2,44
80000ef0:	700015b7          	lui	a1,0x70001
80000ef4:	90818513          	addi	a0,gp,-1784 # 80008878 <g_stdio_uart>
80000ef8:	174000ef          	jal	ra,8000106c <UART_init>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:246
            g_stdio_uart_init_done = 1;
80000efc:	00100713          	li	a4,1
80000f00:	90e1a823          	sw	a4,-1776(gp) # 80008880 <g_stdio_uart_init_done>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:249
        }

    for (jj = 0; jj < len; jj++)
80000f04:	fe042623          	sw	zero,-20(s0)
80000f08:	0580006f          	j	80000f60 <_write+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:251
    {
        UART_send(&g_stdio_uart, current + jj, 1);
80000f0c:	fe842703          	lw	a4,-24(s0)
80000f10:	fec42783          	lw	a5,-20(s0)
80000f14:	00f707b3          	add	a5,a4,a5
80000f18:	00100613          	li	a2,1
80000f1c:	00078593          	mv	a1,a5
80000f20:	90818513          	addi	a0,gp,-1784 # 80008878 <g_stdio_uart>
80000f24:	260000ef          	jal	ra,80001184 <UART_send>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:252
        if (current[jj] == '\n')
80000f28:	fe842703          	lw	a4,-24(s0)
80000f2c:	fec42783          	lw	a5,-20(s0)
80000f30:	00f707b3          	add	a5,a4,a5
80000f34:	0007c703          	lbu	a4,0(a5)
80000f38:	00a00793          	li	a5,10
80000f3c:	00f71c63          	bne	a4,a5,80000f54 <_write+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:254
        {
            UART_send(&g_stdio_uart, (const uint8_t *)"\r", 1);
80000f40:	00100613          	li	a2,1
80000f44:	800087b7          	lui	a5,0x80008
80000f48:	f4478593          	addi	a1,a5,-188 # 80007f44 <__stack_top+0xfffc4d44>
80000f4c:	90818513          	addi	a0,gp,-1784 # 80008878 <g_stdio_uart>
80000f50:	234000ef          	jal	ra,80001184 <UART_send>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 2)
    for (jj = 0; jj < len; jj++)
80000f54:	fec42783          	lw	a5,-20(s0)
80000f58:	00178793          	addi	a5,a5,1
80000f5c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 1)
80000f60:	fec42703          	lw	a4,-20(s0)
80000f64:	fd442783          	lw	a5,-44(s0)
80000f68:	faf762e3          	bltu	a4,a5,80000f0c <_write+0x60>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:257
        }
    }
    return len;
80000f6c:	fd442783          	lw	a5,-44(s0)
80000f70:	0100006f          	j	80000f80 <_write+0xd4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:261
  }
#endif

  return stub(EBADF);
80000f74:	00900513          	li	a0,9
80000f78:	f05ff0ef          	jal	ra,80000e7c <stub>
80000f7c:	00050793          	mv	a5,a0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/syscall.c:262
}
80000f80:	00078513          	mv	a0,a5
80000f84:	02c12083          	lw	ra,44(sp)
80000f88:	02812403          	lw	s0,40(sp)
80000f8c:	03010113          	addi	sp,sp,48
80000f90:	00008067          	ret

80000f94 <HW_set_32bit_reg>:
HW_set_32bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:36
 *
 * a0:   addr_t reg_addr
 * a1:   uint32_t value
 */
HW_set_32bit_reg:
    sw a1, 0(a0)
80000f94:	00b52023          	sw	a1,0(a0) # 44000000 <RAM_SIZE+0x43f80000>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:37
    ret
80000f98:	00008067          	ret

80000f9c <HW_get_32bit_reg>:
HW_get_32bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:47
 *
 * R0:   addr_t reg_addr
 * @return          32 bits value read from the peripheral register.
 */
HW_get_32bit_reg:
    lw a0, 0(a0)
80000f9c:	00052503          	lw	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:48
    ret
80000fa0:	00008067          	ret

80000fa4 <HW_set_32bit_reg_field>:
HW_set_32bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:60
 * a1:   int_fast8_t shift
 * a2:   uint32_t mask
 * a3:   uint32_t value
 */
HW_set_32bit_reg_field:
    mv t3, a3
80000fa4:	00068e13          	mv	t3,a3
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:61
    sll t3, t3, a1
80000fa8:	00be1e33          	sll	t3,t3,a1
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:62
    and  t3, t3, a2
80000fac:	00ce7e33          	and	t3,t3,a2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:63
    lw t1, 0(a0)
80000fb0:	00052303          	lw	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:64
    mv t2, a2
80000fb4:	00060393          	mv	t2,a2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:65
    not t2, t2
80000fb8:	fff3c393          	not	t2,t2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:66
    and t1, t1, t2
80000fbc:	00737333          	and	t1,t1,t2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:67
    or t1, t1, t3
80000fc0:	01c36333          	or	t1,t1,t3
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:68
    sw t1, 0(a0)
80000fc4:	00652023          	sw	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:69
    ret
80000fc8:	00008067          	ret

80000fcc <HW_get_32bit_reg_field>:
HW_get_32bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:83
 *
 * @return          32 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_32bit_reg_field:
    lw a0, 0(a0)
80000fcc:	00052503          	lw	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:84
    and a0, a0, a2
80000fd0:	00c57533          	and	a0,a0,a2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:85
    srl a0, a0, a1
80000fd4:	00b55533          	srl	a0,a0,a1
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:86
    ret
80000fd8:	00008067          	ret

80000fdc <HW_set_16bit_reg>:
HW_set_16bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:96
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast16_t value
 */
HW_set_16bit_reg:
    sh a1, 0(a0)
80000fdc:	00b51023          	sh	a1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:97
    ret
80000fe0:	00008067          	ret

80000fe4 <HW_get_16bit_reg>:
HW_get_16bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:107
 *
 * a0:   addr_t reg_addr
 * @return          16 bits value read from the peripheral register.
 */
HW_get_16bit_reg:
    lh a0, (a0)
80000fe4:	00051503          	lh	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:108
    ret
80000fe8:	00008067          	ret

80000fec <HW_set_16bit_reg_field>:
HW_set_16bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:121
 * a2:   uint_fast16_t mask
 * a3:   uint_fast16_t value
 * @param value     Value to be written in the specified field.
 */
HW_set_16bit_reg_field:
    mv t3, a3
80000fec:	00068e13          	mv	t3,a3
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:122
    sll t3, t3, a1
80000ff0:	00be1e33          	sll	t3,t3,a1
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:123
    and  t3, t3, a2
80000ff4:	00ce7e33          	and	t3,t3,a2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:124
    lh t1, 0(a0)
80000ff8:	00051303          	lh	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:125
    mv t2, a2
80000ffc:	00060393          	mv	t2,a2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:126
    not t2, t2
80001000:	fff3c393          	not	t2,t2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:127
    and t1, t1, t2
80001004:	00737333          	and	t1,t1,t2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:128
    or t1, t1, t3
80001008:	01c36333          	or	t1,t1,t3
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:129
    sh t1, 0(a0)
8000100c:	00651023          	sh	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:130
    ret
80001010:	00008067          	ret

80001014 <HW_get_16bit_reg_field>:
HW_get_16bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:144
 *
 * @return          16 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_16bit_reg_field:
    lh a0, 0(a0)
80001014:	00051503          	lh	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:145
    and a0, a0, a2
80001018:	00c57533          	and	a0,a0,a2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:146
    srl a0, a0, a1
8000101c:	00b55533          	srl	a0,a0,a1
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:147
    ret
80001020:	00008067          	ret

80001024 <HW_set_8bit_reg>:
HW_set_8bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:157
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast8_t value
 */
HW_set_8bit_reg:
    sb a1, 0(a0)
80001024:	00b50023          	sb	a1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:158
    ret
80001028:	00008067          	ret

8000102c <HW_get_8bit_reg>:
HW_get_8bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:168
 *
 * a0:   addr_t reg_addr
 * @return          8 bits value read from the peripheral register.
 */
HW_get_8bit_reg:
    lb a0, 0(a0)
8000102c:	00050503          	lb	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:169
    ret
80001030:	00008067          	ret

80001034 <HW_set_8bit_reg_field>:
HW_set_8bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:181
 * a1:   int_fast8_t shift
 * a2:   uint_fast8_t mask
 * a3:   uint_fast8_t value
 */
HW_set_8bit_reg_field:
    mv t3, a3
80001034:	00068e13          	mv	t3,a3
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:182
    sll t3, t3, a1
80001038:	00be1e33          	sll	t3,t3,a1
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:183
    and  t3, t3, a2
8000103c:	00ce7e33          	and	t3,t3,a2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:184
    lb t1, 0(a0)
80001040:	00050303          	lb	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:185
    mv t2, a2
80001044:	00060393          	mv	t2,a2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:186
    not t2, t2
80001048:	fff3c393          	not	t2,t2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:187
    and t1, t1, t2
8000104c:	00737333          	and	t1,t1,t2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:188
    or t1, t1, t3
80001050:	01c36333          	or	t1,t1,t3
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:189
    sb t1, 0(a0)
80001054:	00650023          	sb	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:190
    ret
80001058:	00008067          	ret

8000105c <HW_get_8bit_reg_field>:
HW_get_8bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:204
 *
 * @return          8 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_8bit_reg_field:
    lb a0, 0(a0)
8000105c:	00050503          	lb	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:205
    and a0, a0, a2
80001060:	00c57533          	and	a0,a0,a2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:206
    srl a0, a0, a1
80001064:	00b55533          	srl	a0,a0,a1
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../hal/hw_reg_access.S:207
    ret
80001068:	00008067          	ret

8000106c <UART_init>:
UART_init():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:46
    UART_instance_t * this_uart,
    addr_t base_addr,
    uint16_t baud_value,
    uint8_t line_config
)
{
8000106c:	fd010113          	addi	sp,sp,-48
80001070:	02112623          	sw	ra,44(sp)
80001074:	02812423          	sw	s0,40(sp)
80001078:	03010413          	addi	s0,sp,48
8000107c:	fca42e23          	sw	a0,-36(s0)
80001080:	fcb42c23          	sw	a1,-40(s0)
80001084:	00060793          	mv	a5,a2
80001088:	00068713          	mv	a4,a3
8000108c:	fcf41b23          	sh	a5,-42(s0)
80001090:	00070793          	mv	a5,a4
80001094:	fcf40aa3          	sb	a5,-43(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53
    
    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( line_config <= MAX_LINE_CONFIG )
    HAL_ASSERT( baud_value <= MAX_BAUD_VALUE )

    if( ( this_uart != NULL_INSTANCE ) &&
80001098:	fdc42783          	lw	a5,-36(s0)
8000109c:	0c078a63          	beqz	a5,80001170 <UART_init+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53 (discriminator 1)
800010a0:	fd544703          	lbu	a4,-43(s0)
800010a4:	00700793          	li	a5,7
800010a8:	0ce7e463          	bltu	a5,a4,80001170 <UART_init+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:54
        ( line_config <= MAX_LINE_CONFIG ) &&
800010ac:	fd645703          	lhu	a4,-42(s0)
800010b0:	000027b7          	lui	a5,0x2
800010b4:	0af77e63          	bleu	a5,a4,80001170 <UART_init+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:60
        ( baud_value <= MAX_BAUD_VALUE ) )
    {
        /*
         * Store lower 8-bits of baud value in CTRL1.
         */
        HAL_set_8bit_reg( base_addr, CTRL1, (uint_fast8_t)(baud_value &
800010b8:	fd842783          	lw	a5,-40(s0)
800010bc:	00878713          	addi	a4,a5,8 # 2008 <HEAP_SIZE-0xdff8>
800010c0:	fd645783          	lhu	a5,-42(s0)
800010c4:	0ff7f793          	andi	a5,a5,255
800010c8:	00078593          	mv	a1,a5
800010cc:	00070513          	mv	a0,a4
800010d0:	f55ff0ef          	jal	ra,80001024 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:67
    
        /*
         * Extract higher 5-bits of baud value and store in higher 5-bits 
         * of CTRL2, along with line configuration in lower 3 three bits.
         */
        HAL_set_8bit_reg( base_addr, CTRL2, (uint_fast8_t)line_config | 
800010d4:	fd842783          	lw	a5,-40(s0)
800010d8:	00c78693          	addi	a3,a5,12
800010dc:	fd544703          	lbu	a4,-43(s0)
800010e0:	fd645783          	lhu	a5,-42(s0)
800010e4:	4057d793          	srai	a5,a5,0x5
800010e8:	7f87f793          	andi	a5,a5,2040
800010ec:	00f767b3          	or	a5,a4,a5
800010f0:	00078593          	mv	a1,a5
800010f4:	00068513          	mv	a0,a3
800010f8:	f2dff0ef          	jal	ra,80001024 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:71
                                           (uint_fast8_t)((baud_value &
                                   BAUDVALUE_MSB) >> BAUDVALUE_SHIFT ) );
    
        this_uart->base_address = base_addr;
800010fc:	fdc42783          	lw	a5,-36(s0)
80001100:	fd842703          	lw	a4,-40(s0)
80001104:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:94
        
        /*
         * Flush the receive FIFO of data that may have been received before the
         * driver was initialized.
         */
        rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001108:	fdc42783          	lw	a5,-36(s0)
8000110c:	0007a783          	lw	a5,0(a5)
80001110:	01078793          	addi	a5,a5,16
80001114:	00078513          	mv	a0,a5
80001118:	f15ff0ef          	jal	ra,8000102c <HW_get_8bit_reg>
8000111c:	00050793          	mv	a5,a0
80001120:	0027f793          	andi	a5,a5,2
80001124:	fef407a3          	sb	a5,-17(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
                                                    STATUS_RXFULL_MASK;
        while ( rx_full )
80001128:	0380006f          	j	80001160 <UART_init+0xf4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:98
        {
            HAL_get_8bit_reg( this_uart->base_address, RXDATA );
8000112c:	fdc42783          	lw	a5,-36(s0)
80001130:	0007a783          	lw	a5,0(a5)
80001134:	00478793          	addi	a5,a5,4
80001138:	00078513          	mv	a0,a5
8000113c:	ef1ff0ef          	jal	ra,8000102c <HW_get_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:99
            rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001140:	fdc42783          	lw	a5,-36(s0)
80001144:	0007a783          	lw	a5,0(a5)
80001148:	01078793          	addi	a5,a5,16
8000114c:	00078513          	mv	a0,a5
80001150:	eddff0ef          	jal	ra,8000102c <HW_get_8bit_reg>
80001154:	00050793          	mv	a5,a0
80001158:	0027f793          	andi	a5,a5,2
8000115c:	fef407a3          	sb	a5,-17(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
        while ( rx_full )
80001160:	fef44783          	lbu	a5,-17(s0)
80001164:	fc0794e3          	bnez	a5,8000112c <UART_init+0xc0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:106
        }

        /*
         * Clear status of the UART instance.
         */
        this_uart->status = (uint8_t)0;
80001168:	fdc42783          	lw	a5,-36(s0)
8000116c:	00078223          	sb	zero,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:108
    }
}
80001170:	00000013          	nop
80001174:	02c12083          	lw	ra,44(sp)
80001178:	02812403          	lw	s0,40(sp)
8000117c:	03010113          	addi	sp,sp,48
80001180:	00008067          	ret

80001184 <UART_send>:
UART_send():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:121
(
    UART_instance_t * this_uart,
    const uint8_t * tx_buffer,
    size_t tx_size
)
{
80001184:	fd010113          	addi	sp,sp,-48
80001188:	02112623          	sw	ra,44(sp)
8000118c:	02812423          	sw	s0,40(sp)
80001190:	03010413          	addi	s0,sp,48
80001194:	fca42e23          	sw	a0,-36(s0)
80001198:	fcb42c23          	sw	a1,-40(s0)
8000119c:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( tx_buffer != NULL_BUFFER )
    HAL_ASSERT( tx_size > 0 )
      
    if( (this_uart != NULL_INSTANCE) &&
800011a0:	fdc42783          	lw	a5,-36(s0)
800011a4:	08078063          	beqz	a5,80001224 <UART_send+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129 (discriminator 1)
800011a8:	fd842783          	lw	a5,-40(s0)
800011ac:	06078c63          	beqz	a5,80001224 <UART_send+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:130
        (tx_buffer != NULL_BUFFER)   &&
800011b0:	fd442783          	lw	a5,-44(s0)
800011b4:	06078863          	beqz	a5,80001224 <UART_send+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133
        (tx_size > (size_t)0) )
    {
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
800011b8:	fe042623          	sw	zero,-20(s0)
800011bc:	05c0006f          	j	80001218 <UART_send+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:137 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
800011c0:	fdc42783          	lw	a5,-36(s0)
800011c4:	0007a783          	lw	a5,0(a5)
800011c8:	01078793          	addi	a5,a5,16
800011cc:	00078513          	mv	a0,a5
800011d0:	e5dff0ef          	jal	ra,8000102c <HW_get_8bit_reg>
800011d4:	00050793          	mv	a5,a0
800011d8:	0017f793          	andi	a5,a5,1
800011dc:	fef405a3          	sb	a5,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:139 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
800011e0:	feb44783          	lbu	a5,-21(s0)
800011e4:	fc078ee3          	beqz	a5,800011c0 <UART_send+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:141 (discriminator 2)
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
800011e8:	fdc42783          	lw	a5,-36(s0)
800011ec:	0007a683          	lw	a3,0(a5)
800011f0:	fd842703          	lw	a4,-40(s0)
800011f4:	fec42783          	lw	a5,-20(s0)
800011f8:	00f707b3          	add	a5,a4,a5
800011fc:	0007c783          	lbu	a5,0(a5)
80001200:	00078593          	mv	a1,a5
80001204:	00068513          	mv	a0,a3
80001208:	e1dff0ef          	jal	ra,80001024 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 2)
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
8000120c:	fec42783          	lw	a5,-20(s0)
80001210:	00178793          	addi	a5,a5,1
80001214:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 1)
80001218:	fec42703          	lw	a4,-20(s0)
8000121c:	fd442783          	lw	a5,-44(s0)
80001220:	faf760e3          	bltu	a4,a5,800011c0 <UART_send+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:145
                              (uint_fast8_t)tx_buffer[char_idx] );
        }
    }
}
80001224:	00000013          	nop
80001228:	02c12083          	lw	ra,44(sp)
8000122c:	02812403          	lw	s0,40(sp)
80001230:	03010113          	addi	sp,sp,48
80001234:	00008067          	ret

80001238 <UART_polled_tx_string>:
UART_polled_tx_string():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:239
UART_polled_tx_string
( 
    UART_instance_t * this_uart, 
    const uint8_t * p_sz_string
)
{
80001238:	fd010113          	addi	sp,sp,-48
8000123c:	02112623          	sw	ra,44(sp)
80001240:	02812423          	sw	s0,40(sp)
80001244:	03010413          	addi	s0,sp,48
80001248:	fca42e23          	sw	a0,-36(s0)
8000124c:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246
    uint8_t tx_ready;

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( p_sz_string != NULL_BUFFER )
    
    if( ( this_uart != NULL_INSTANCE ) && ( p_sz_string != NULL_BUFFER ) )
80001250:	fdc42783          	lw	a5,-36(s0)
80001254:	08078063          	beqz	a5,800012d4 <UART_polled_tx_string+0x9c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246 (discriminator 1)
80001258:	fd842783          	lw	a5,-40(s0)
8000125c:	06078c63          	beqz	a5,800012d4 <UART_polled_tx_string+0x9c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:248
    {
        char_idx = 0U;
80001260:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
80001264:	05c0006f          	j	800012c0 <UART_polled_tx_string+0x88>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:253 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001268:	fdc42783          	lw	a5,-36(s0)
8000126c:	0007a783          	lw	a5,0(a5)
80001270:	01078793          	addi	a5,a5,16
80001274:	00078513          	mv	a0,a5
80001278:	db5ff0ef          	jal	ra,8000102c <HW_get_8bit_reg>
8000127c:	00050793          	mv	a5,a0
80001280:	0017f793          	andi	a5,a5,1
80001284:	fef405a3          	sb	a5,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:255 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
80001288:	feb44783          	lbu	a5,-21(s0)
8000128c:	fc078ee3          	beqz	a5,80001268 <UART_polled_tx_string+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:257
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
80001290:	fdc42783          	lw	a5,-36(s0)
80001294:	0007a683          	lw	a3,0(a5)
80001298:	fd842703          	lw	a4,-40(s0)
8000129c:	fec42783          	lw	a5,-20(s0)
800012a0:	00f707b3          	add	a5,a4,a5
800012a4:	0007c783          	lbu	a5,0(a5)
800012a8:	00078593          	mv	a1,a5
800012ac:	00068513          	mv	a0,a3
800012b0:	d75ff0ef          	jal	ra,80001024 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:259
                              (uint_fast8_t)p_sz_string[char_idx] );
            char_idx++;
800012b4:	fec42783          	lw	a5,-20(s0)
800012b8:	00178793          	addi	a5,a5,1
800012bc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
800012c0:	fd842703          	lw	a4,-40(s0)
800012c4:	fec42783          	lw	a5,-20(s0)
800012c8:	00f707b3          	add	a5,a4,a5
800012cc:	0007c783          	lbu	a5,0(a5)
800012d0:	f8079ce3          	bnez	a5,80001268 <UART_polled_tx_string+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:262
        }
    }
}
800012d4:	00000013          	nop
800012d8:	02c12083          	lw	ra,44(sp)
800012dc:	02812403          	lw	s0,40(sp)
800012e0:	03010113          	addi	sp,sp,48
800012e4:	00008067          	ret

800012e8 <pvPortMalloc>:
pvPortMalloc():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:151
}
/*-----------------------------------------------------------*/


void *pvPortMalloc( size_t xWantedSize )
{
800012e8:	fc010113          	addi	sp,sp,-64
800012ec:	02112e23          	sw	ra,60(sp)
800012f0:	02812c23          	sw	s0,56(sp)
800012f4:	04010413          	addi	s0,sp,64
800012f8:	fca42623          	sw	a0,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:154
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
800012fc:	fe042223          	sw	zero,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:156

	vTaskSuspendAll();
80001300:	298010ef          	jal	ra,80002598 <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:160
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
80001304:	9241a783          	lw	a5,-1756(gp) # 80008894 <xHeapHasBeenInitialised.2777>
80001308:	00079863          	bnez	a5,80001318 <pvPortMalloc+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:162
		{
			prvHeapInit();
8000130c:	284000ef          	jal	ra,80001590 <prvHeapInit>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:163
			xHeapHasBeenInitialised = pdTRUE;
80001310:	00100713          	li	a4,1
80001314:	92e1a223          	sw	a4,-1756(gp) # 80008894 <xHeapHasBeenInitialised.2777>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:168
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
80001318:	fcc42783          	lw	a5,-52(s0)
8000131c:	02078a63          	beqz	a5,80001350 <pvPortMalloc+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:170
		{
			xWantedSize += heapSTRUCT_SIZE;
80001320:	00800793          	li	a5,8
80001324:	00078713          	mv	a4,a5
80001328:	fcc42783          	lw	a5,-52(s0)
8000132c:	00e787b3          	add	a5,a5,a4
80001330:	fcf42623          	sw	a5,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:173

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
80001334:	fcc42783          	lw	a5,-52(s0)
80001338:	0037f793          	andi	a5,a5,3
8000133c:	00078a63          	beqz	a5,80001350 <pvPortMalloc+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:176
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
80001340:	fcc42783          	lw	a5,-52(s0)
80001344:	ffc7f793          	andi	a5,a5,-4
80001348:	00478793          	addi	a5,a5,4
8000134c:	fcf42623          	sw	a5,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
80001350:	fcc42783          	lw	a5,-52(s0)
80001354:	14078463          	beqz	a5,8000149c <pvPortMalloc+0x1b4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180 (discriminator 1)
80001358:	fcc42703          	lw	a4,-52(s0)
8000135c:	000197b7          	lui	a5,0x19
80001360:	ffb78793          	addi	a5,a5,-5 # 18ffb <HEAP_SIZE+0x8ffb>
80001364:	12e7ec63          	bltu	a5,a4,8000149c <pvPortMalloc+0x1b4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:184
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
80001368:	91418793          	addi	a5,gp,-1772 # 80008884 <xStart>
8000136c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:185
			pxBlock = xStart.pxNextFreeBlock;
80001370:	9141a783          	lw	a5,-1772(gp) # 80008884 <xStart>
80001374:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
80001378:	0180006f          	j	80001390 <pvPortMalloc+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:188
			{
				pxPreviousBlock = pxBlock;
8000137c:	fec42783          	lw	a5,-20(s0)
80001380:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:189
				pxBlock = pxBlock->pxNextFreeBlock;
80001384:	fec42783          	lw	a5,-20(s0)
80001388:	0007a783          	lw	a5,0(a5)
8000138c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
80001390:	fec42783          	lw	a5,-20(s0)
80001394:	0047a783          	lw	a5,4(a5)
80001398:	fcc42703          	lw	a4,-52(s0)
8000139c:	00e7f863          	bleu	a4,a5,800013ac <pvPortMalloc+0xc4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186 (discriminator 1)
800013a0:	fec42783          	lw	a5,-20(s0)
800013a4:	0007a783          	lw	a5,0(a5)
800013a8:	fc079ae3          	bnez	a5,8000137c <pvPortMalloc+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:193
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
800013ac:	fec42703          	lw	a4,-20(s0)
800013b0:	91c18793          	addi	a5,gp,-1764 # 8000888c <xEnd>
800013b4:	0ef70463          	beq	a4,a5,8000149c <pvPortMalloc+0x1b4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:197
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
800013b8:	fe842783          	lw	a5,-24(s0)
800013bc:	0007a783          	lw	a5,0(a5)
800013c0:	00800713          	li	a4,8
800013c4:	00e787b3          	add	a5,a5,a4
800013c8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:201

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
800013cc:	fec42783          	lw	a5,-20(s0)
800013d0:	0007a703          	lw	a4,0(a5)
800013d4:	fe842783          	lw	a5,-24(s0)
800013d8:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:204

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
800013dc:	fec42783          	lw	a5,-20(s0)
800013e0:	0047a703          	lw	a4,4(a5)
800013e4:	fcc42783          	lw	a5,-52(s0)
800013e8:	40f707b3          	sub	a5,a4,a5
800013ec:	00800713          	li	a4,8
800013f0:	00171713          	slli	a4,a4,0x1
800013f4:	08f77663          	bleu	a5,a4,80001480 <pvPortMalloc+0x198>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:209
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
800013f8:	fec42703          	lw	a4,-20(s0)
800013fc:	fcc42783          	lw	a5,-52(s0)
80001400:	00f707b3          	add	a5,a4,a5
80001404:	fcf42e23          	sw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:213

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
80001408:	fec42783          	lw	a5,-20(s0)
8000140c:	0047a703          	lw	a4,4(a5)
80001410:	fcc42783          	lw	a5,-52(s0)
80001414:	40f70733          	sub	a4,a4,a5
80001418:	fdc42783          	lw	a5,-36(s0)
8000141c:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:214
					pxBlock->xBlockSize = xWantedSize;
80001420:	fec42783          	lw	a5,-20(s0)
80001424:	fcc42703          	lw	a4,-52(s0)
80001428:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
8000142c:	fdc42783          	lw	a5,-36(s0)
80001430:	0047a783          	lw	a5,4(a5)
80001434:	fcf42c23          	sw	a5,-40(s0)
80001438:	91418793          	addi	a5,gp,-1772 # 80008884 <xStart>
8000143c:	fef42023          	sw	a5,-32(s0)
80001440:	0100006f          	j	80001450 <pvPortMalloc+0x168>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 3)
80001444:	fe042783          	lw	a5,-32(s0)
80001448:	0007a783          	lw	a5,0(a5)
8000144c:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 1)
80001450:	fe042783          	lw	a5,-32(s0)
80001454:	0007a783          	lw	a5,0(a5)
80001458:	0047a783          	lw	a5,4(a5)
8000145c:	fd842703          	lw	a4,-40(s0)
80001460:	fee7e2e3          	bltu	a5,a4,80001444 <pvPortMalloc+0x15c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 4)
80001464:	fe042783          	lw	a5,-32(s0)
80001468:	0007a703          	lw	a4,0(a5)
8000146c:	fdc42783          	lw	a5,-36(s0)
80001470:	00e7a023          	sw	a4,0(a5)
80001474:	fe042783          	lw	a5,-32(s0)
80001478:	fdc42703          	lw	a4,-36(s0)
8000147c:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:220
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
80001480:	800087b7          	lui	a5,0x80008
80001484:	7707a703          	lw	a4,1904(a5) # 80008770 <__stack_top+0xfffc5570>
80001488:	fec42783          	lw	a5,-20(s0)
8000148c:	0047a783          	lw	a5,4(a5)
80001490:	40f70733          	sub	a4,a4,a5
80001494:	800087b7          	lui	a5,0x80008
80001498:	76e7a823          	sw	a4,1904(a5) # 80008770 <__stack_top+0xfffc5570>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:226
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
8000149c:	124010ef          	jal	ra,800025c0 <xTaskResumeAll>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:230

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
800014a0:	fe442783          	lw	a5,-28(s0)
800014a4:	00079463          	bnez	a5,800014ac <pvPortMalloc+0x1c4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:233
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
800014a8:	7a4060ef          	jal	ra,80007c4c <vApplicationMallocFailedHook>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:238
		}
	}
	#endif

	return pvReturn;
800014ac:	fe442783          	lw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:239
}
800014b0:	00078513          	mv	a0,a5
800014b4:	03c12083          	lw	ra,60(sp)
800014b8:	03812403          	lw	s0,56(sp)
800014bc:	04010113          	addi	sp,sp,64
800014c0:	00008067          	ret

800014c4 <vPortFree>:
vPortFree():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:243
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
800014c4:	fd010113          	addi	sp,sp,-48
800014c8:	02112623          	sw	ra,44(sp)
800014cc:	02812423          	sw	s0,40(sp)
800014d0:	03010413          	addi	s0,sp,48
800014d4:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:244
uint8_t *puc = ( uint8_t * ) pv;
800014d8:	fdc42783          	lw	a5,-36(s0)
800014dc:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:247
BlockLink_t *pxLink;

	if( pv != NULL )
800014e0:	fdc42783          	lw	a5,-36(s0)
800014e4:	08078c63          	beqz	a5,8000157c <vPortFree+0xb8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:251
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
800014e8:	00800793          	li	a5,8
800014ec:	40f007b3          	neg	a5,a5
800014f0:	fe842703          	lw	a4,-24(s0)
800014f4:	00f707b3          	add	a5,a4,a5
800014f8:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:255

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
800014fc:	fe842783          	lw	a5,-24(s0)
80001500:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:257

		vTaskSuspendAll();
80001504:	094010ef          	jal	ra,80002598 <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
80001508:	fe442783          	lw	a5,-28(s0)
8000150c:	0047a783          	lw	a5,4(a5)
80001510:	fef42023          	sw	a5,-32(s0)
80001514:	91418793          	addi	a5,gp,-1772 # 80008884 <xStart>
80001518:	fef42623          	sw	a5,-20(s0)
8000151c:	0100006f          	j	8000152c <vPortFree+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 3)
80001520:	fec42783          	lw	a5,-20(s0)
80001524:	0007a783          	lw	a5,0(a5)
80001528:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 1)
8000152c:	fec42783          	lw	a5,-20(s0)
80001530:	0007a783          	lw	a5,0(a5)
80001534:	0047a783          	lw	a5,4(a5)
80001538:	fe042703          	lw	a4,-32(s0)
8000153c:	fee7e2e3          	bltu	a5,a4,80001520 <vPortFree+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 4)
80001540:	fec42783          	lw	a5,-20(s0)
80001544:	0007a703          	lw	a4,0(a5)
80001548:	fe442783          	lw	a5,-28(s0)
8000154c:	00e7a023          	sw	a4,0(a5)
80001550:	fec42783          	lw	a5,-20(s0)
80001554:	fe442703          	lw	a4,-28(s0)
80001558:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:261 (discriminator 4)
			xFreeBytesRemaining += pxLink->xBlockSize;
8000155c:	fe442783          	lw	a5,-28(s0)
80001560:	0047a703          	lw	a4,4(a5)
80001564:	800087b7          	lui	a5,0x80008
80001568:	7707a783          	lw	a5,1904(a5) # 80008770 <__stack_top+0xfffc5570>
8000156c:	00f70733          	add	a4,a4,a5
80001570:	800087b7          	lui	a5,0x80008
80001574:	76e7a823          	sw	a4,1904(a5) # 80008770 <__stack_top+0xfffc5570>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:264 (discriminator 4)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
80001578:	048010ef          	jal	ra,800025c0 <xTaskResumeAll>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:266
	}
}
8000157c:	00000013          	nop
80001580:	02c12083          	lw	ra,44(sp)
80001584:	02812403          	lw	s0,40(sp)
80001588:	03010113          	addi	sp,sp,48
8000158c:	00008067          	ret

80001590 <prvHeapInit>:
prvHeapInit():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:282
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
80001590:	fe010113          	addi	sp,sp,-32
80001594:	00812e23          	sw	s0,28(sp)
80001598:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:287
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
8000159c:	800097b7          	lui	a5,0x80009
800015a0:	91478793          	addi	a5,a5,-1772 # 80008914 <__stack_top+0xfffc5714>
800015a4:	ffc7f793          	andi	a5,a5,-4
800015a8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:291

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
800015ac:	fec42703          	lw	a4,-20(s0)
800015b0:	90e1aa23          	sw	a4,-1772(gp) # 80008884 <xStart>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:292
	xStart.xBlockSize = ( size_t ) 0;
800015b4:	91418793          	addi	a5,gp,-1772 # 80008884 <xStart>
800015b8:	0007a223          	sw	zero,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:295

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
800015bc:	91c18793          	addi	a5,gp,-1764 # 8000888c <xEnd>
800015c0:	00019737          	lui	a4,0x19
800015c4:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
800015c8:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:296
	xEnd.pxNextFreeBlock = NULL;
800015cc:	9001ae23          	sw	zero,-1764(gp) # 8000888c <xEnd>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:300

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
800015d0:	fec42783          	lw	a5,-20(s0)
800015d4:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:301
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
800015d8:	fe842783          	lw	a5,-24(s0)
800015dc:	00019737          	lui	a4,0x19
800015e0:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
800015e4:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:302
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
800015e8:	fe842783          	lw	a5,-24(s0)
800015ec:	91c18713          	addi	a4,gp,-1764 # 8000888c <xEnd>
800015f0:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:303
}
800015f4:	00000013          	nop
800015f8:	01c12403          	lw	s0,28(sp)
800015fc:	02010113          	addi	sp,sp,32
80001600:	00008067          	ret

80001604 <raise_soft_interrupt>:
raise_soft_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:227
/*==============================================================================
 * The function raise_soft_interrupt() raises a synchronous software interrupt by
 * writing into the MSIP register.
 */
static inline void raise_soft_interrupt()
{
80001604:	fe010113          	addi	sp,sp,-32
80001608:	00812e23          	sw	s0,28(sp)
8000160c:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:228
    unsigned long hart_id = read_csr(mhartid);
80001610:	f14027f3          	csrr	a5,mhartid
80001614:	fef42623          	sw	a5,-20(s0)
80001618:	fec42783          	lw	a5,-20(s0)
8000161c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:231

    /*You need to make sure that the global interrupt is enabled*/
    set_csr(mie, MIP_MSIP);       /*Enable software interrupt bit */
80001620:	304467f3          	csrrsi	a5,mie,8
80001624:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:232
    PRCI->MSIP[hart_id] = 0x01;   /*raise soft interrupt for hart0*/
80001628:	44000737          	lui	a4,0x44000
8000162c:	fe842783          	lw	a5,-24(s0)
80001630:	00279793          	slli	a5,a5,0x2
80001634:	00f707b3          	add	a5,a4,a5
80001638:	00100713          	li	a4,1
8000163c:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:233
}
80001640:	00000013          	nop
80001644:	01c12403          	lw	s0,28(sp)
80001648:	02010113          	addi	sp,sp,32
8000164c:	00008067          	ret

80001650 <vPortEnterCritical>:
vPortEnterCritical():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:132
 * Used to catch tasks that attempt to return from their implementing function.
 */
static void prvTaskExitError( void );

void vPortEnterCritical( void )
{
80001650:	ff010113          	addi	sp,sp,-16
80001654:	00812623          	sw	s0,12(sp)
80001658:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:133
	portDISABLE_INTERRUPTS();
8000165c:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:134
	uxCriticalNesting++;
80001660:	800087b7          	lui	a5,0x80008
80001664:	7747a783          	lw	a5,1908(a5) # 80008774 <__stack_top+0xfffc5574>
80001668:	00178713          	addi	a4,a5,1
8000166c:	800087b7          	lui	a5,0x80008
80001670:	76e7aa23          	sw	a4,1908(a5) # 80008774 <__stack_top+0xfffc5574>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:135
}
80001674:	00000013          	nop
80001678:	00c12403          	lw	s0,12(sp)
8000167c:	01010113          	addi	sp,sp,16
80001680:	00008067          	ret

80001684 <vPortExitCritical>:
vPortExitCritical():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:139
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
80001684:	ff010113          	addi	sp,sp,-16
80001688:	00812623          	sw	s0,12(sp)
8000168c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:140
	uxCriticalNesting--;
80001690:	800087b7          	lui	a5,0x80008
80001694:	7747a783          	lw	a5,1908(a5) # 80008774 <__stack_top+0xfffc5574>
80001698:	fff78713          	addi	a4,a5,-1
8000169c:	800087b7          	lui	a5,0x80008
800016a0:	76e7aa23          	sw	a4,1908(a5) # 80008774 <__stack_top+0xfffc5574>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:141
	if( uxCriticalNesting == 0 )
800016a4:	800087b7          	lui	a5,0x80008
800016a8:	7747a783          	lw	a5,1908(a5) # 80008774 <__stack_top+0xfffc5574>
800016ac:	00079463          	bnez	a5,800016b4 <vPortExitCritical+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:143
	{
		portENABLE_INTERRUPTS();
800016b0:	30046073          	csrsi	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:145
	}
}
800016b4:	00000013          	nop
800016b8:	00c12403          	lw	s0,12(sp)
800016bc:	01010113          	addi	sp,sp,16
800016c0:	00008067          	ret

800016c4 <prvSetNextTimerInterrupt>:
prvSetNextTimerInterrupt():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:151
/*-----------------------------------------------------------*/

/* Sets the next timer interrupt
 * Reads previous timer compare register, and adds tickrate */
static void prvSetNextTimerInterrupt(void)
{
800016c4:	fe010113          	addi	sp,sp,-32
800016c8:	00812e23          	sw	s0,28(sp)
800016cc:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:154
	uint64_t time;

	time = mtime->val_low;
800016d0:	80008637          	lui	a2,0x80008
800016d4:	77862603          	lw	a2,1912(a2) # 80008778 <__stack_top+0xfffc5578>
800016d8:	00062603          	lw	a2,0(a2)
800016dc:	fec42423          	sw	a2,-24(s0)
800016e0:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:155
	time |= ((uint64_t)mtime->val_high << 32);
800016e4:	80008637          	lui	a2,0x80008
800016e8:	77862603          	lw	a2,1912(a2) # 80008778 <__stack_top+0xfffc5578>
800016ec:	00462603          	lw	a2,4(a2)
800016f0:	00060693          	mv	a3,a2
800016f4:	00000713          	li	a4,0
800016f8:	00069813          	slli	a6,a3,0x0
800016fc:	00000793          	li	a5,0
80001700:	fe842703          	lw	a4,-24(s0)
80001704:	00f76733          	or	a4,a4,a5
80001708:	fee42423          	sw	a4,-24(s0)
8000170c:	fec42703          	lw	a4,-20(s0)
80001710:	010767b3          	or	a5,a4,a6
80001714:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:157

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
80001718:	fe842683          	lw	a3,-24(s0)
8000171c:	fec42703          	lw	a4,-20(s0)
80001720:	000185b7          	lui	a1,0x18
80001724:	6a058593          	addi	a1,a1,1696 # 186a0 <HEAP_SIZE+0x86a0>
80001728:	00000613          	li	a2,0
8000172c:	00b687b3          	add	a5,a3,a1
80001730:	00078513          	mv	a0,a5
80001734:	00d53533          	sltu	a0,a0,a3
80001738:	00c70833          	add	a6,a4,a2
8000173c:	01050733          	add	a4,a0,a6
80001740:	00070813          	mv	a6,a4
80001744:	fef42423          	sw	a5,-24(s0)
80001748:	ff042623          	sw	a6,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:159

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
8000174c:	800087b7          	lui	a5,0x80008
80001750:	77c7a783          	lw	a5,1916(a5) # 8000877c <__stack_top+0xfffc557c>
80001754:	fe842703          	lw	a4,-24(s0)
80001758:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:160
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
8000175c:	fec42783          	lw	a5,-20(s0)
80001760:	0007d313          	srli	t1,a5,0x0
80001764:	00000393          	li	t2,0
80001768:	800087b7          	lui	a5,0x80008
8000176c:	77c7a783          	lw	a5,1916(a5) # 8000877c <__stack_top+0xfffc557c>
80001770:	00030713          	mv	a4,t1
80001774:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:163

	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
80001778:	08000793          	li	a5,128
8000177c:	3047a073          	csrs	mie,a5
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:164
}
80001780:	00000013          	nop
80001784:	01c12403          	lw	s0,28(sp)
80001788:	02010113          	addi	sp,sp,32
8000178c:	00008067          	ret

80001790 <vPortSetupTimer>:
vPortSetupTimer():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:169
/*-----------------------------------------------------------*/

/* Sets and enable the timer interrupt */
void vPortSetupTimer(void)
{
80001790:	fe010113          	addi	sp,sp,-32
80001794:	00812e23          	sw	s0,28(sp)
80001798:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:172
	uint64_t time;

	time = mtime->val_low;
8000179c:	80008637          	lui	a2,0x80008
800017a0:	77862603          	lw	a2,1912(a2) # 80008778 <__stack_top+0xfffc5578>
800017a4:	00062603          	lw	a2,0(a2)
800017a8:	fec42423          	sw	a2,-24(s0)
800017ac:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:173
	time |= ((uint64_t)mtime->val_high << 32);
800017b0:	80008637          	lui	a2,0x80008
800017b4:	77862603          	lw	a2,1912(a2) # 80008778 <__stack_top+0xfffc5578>
800017b8:	00462603          	lw	a2,4(a2)
800017bc:	00060693          	mv	a3,a2
800017c0:	00000713          	li	a4,0
800017c4:	00069813          	slli	a6,a3,0x0
800017c8:	00000793          	li	a5,0
800017cc:	fe842703          	lw	a4,-24(s0)
800017d0:	00f76733          	or	a4,a4,a5
800017d4:	fee42423          	sw	a4,-24(s0)
800017d8:	fec42703          	lw	a4,-20(s0)
800017dc:	010767b3          	or	a5,a4,a6
800017e0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:175

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
800017e4:	fe842683          	lw	a3,-24(s0)
800017e8:	fec42703          	lw	a4,-20(s0)
800017ec:	000185b7          	lui	a1,0x18
800017f0:	6a058593          	addi	a1,a1,1696 # 186a0 <HEAP_SIZE+0x86a0>
800017f4:	00000613          	li	a2,0
800017f8:	00b687b3          	add	a5,a3,a1
800017fc:	00078513          	mv	a0,a5
80001800:	00d53533          	sltu	a0,a0,a3
80001804:	00c70833          	add	a6,a4,a2
80001808:	01050733          	add	a4,a0,a6
8000180c:	00070813          	mv	a6,a4
80001810:	fef42423          	sw	a5,-24(s0)
80001814:	ff042623          	sw	a6,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:177

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
80001818:	800087b7          	lui	a5,0x80008
8000181c:	77c7a783          	lw	a5,1916(a5) # 8000877c <__stack_top+0xfffc557c>
80001820:	fe842703          	lw	a4,-24(s0)
80001824:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:178
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
80001828:	fec42783          	lw	a5,-20(s0)
8000182c:	0007d313          	srli	t1,a5,0x0
80001830:	00000393          	li	t2,0
80001834:	800087b7          	lui	a5,0x80008
80001838:	77c7a783          	lw	a5,1916(a5) # 8000877c <__stack_top+0xfffc557c>
8000183c:	00030713          	mv	a4,t1
80001840:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:182


	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
80001844:	08000793          	li	a5,128
80001848:	3047a073          	csrs	mie,a5
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:183
}
8000184c:	00000013          	nop
80001850:	01c12403          	lw	s0,28(sp)
80001854:	02010113          	addi	sp,sp,32
80001858:	00008067          	ret

8000185c <prvTaskExitError>:
prvTaskExitError():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:187
/*-----------------------------------------------------------*/

void prvTaskExitError( void )
{
8000185c:	ff010113          	addi	sp,sp,-16
80001860:	00812623          	sw	s0,12(sp)
80001864:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
80001868:	800087b7          	lui	a5,0x80008
8000186c:	7747a703          	lw	a4,1908(a5) # 80008774 <__stack_top+0xfffc5574>
80001870:	fff00793          	li	a5,-1
80001874:	00f70663          	beq	a4,a5,80001880 <prvTaskExitError+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194 (discriminator 1)
80001878:	30047073          	csrci	mstatus,8
8000187c:	0000006f          	j	8000187c <prvTaskExitError+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:195
	portDISABLE_INTERRUPTS();
80001880:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:196 (discriminator 2)
	for( ;; );
80001884:	0000006f          	j	80001884 <prvTaskExitError+0x28>

80001888 <pxPortInitialiseStack>:
pxPortInitialiseStack():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:220

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
80001888:	fe010113          	addi	sp,sp,-32
8000188c:	00812e23          	sw	s0,28(sp)
80001890:	02010413          	addi	s0,sp,32
80001894:	fea42623          	sw	a0,-20(s0)
80001898:	feb42423          	sw	a1,-24(s0)
8000189c:	fec42223          	sw	a2,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:224
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	register int *tp asm("x3");
	pxTopOfStack--;
800018a0:	fec42783          	lw	a5,-20(s0)
800018a4:	ffc78793          	addi	a5,a5,-4
800018a8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:225
	*pxTopOfStack = (portSTACK_TYPE)pxCode;			/* Start address */
800018ac:	fe842703          	lw	a4,-24(s0)
800018b0:	fec42783          	lw	a5,-20(s0)
800018b4:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:226
	pxTopOfStack -= 22;
800018b8:	fec42783          	lw	a5,-20(s0)
800018bc:	fa878793          	addi	a5,a5,-88
800018c0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:227
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;	/* Register a0 */
800018c4:	fe442703          	lw	a4,-28(s0)
800018c8:	fec42783          	lw	a5,-20(s0)
800018cc:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:228
	pxTopOfStack -= 6;
800018d0:	fec42783          	lw	a5,-20(s0)
800018d4:	fe878793          	addi	a5,a5,-24
800018d8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:229
	*pxTopOfStack = (portSTACK_TYPE)tp; /* Register thread pointer */
800018dc:	00018793          	mv	a5,gp
800018e0:	00078713          	mv	a4,a5
800018e4:	fec42783          	lw	a5,-20(s0)
800018e8:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:230
	pxTopOfStack -= 3;
800018ec:	fec42783          	lw	a5,-20(s0)
800018f0:	ff478793          	addi	a5,a5,-12
800018f4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:231
	*pxTopOfStack = (portSTACK_TYPE)prvTaskExitError; /* Register ra */
800018f8:	800027b7          	lui	a5,0x80002
800018fc:	85c78713          	addi	a4,a5,-1956 # 8000185c <__stack_top+0xfffbe65c>
80001900:	fec42783          	lw	a5,-20(s0)
80001904:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:233

	return pxTopOfStack;
80001908:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:234
}
8000190c:	00078513          	mv	a0,a5
80001910:	01c12403          	lw	s0,28(sp)
80001914:	02010113          	addi	sp,sp,32
80001918:	00008067          	ret

8000191c <SysTick_Handler>:
SysTick_Handler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:238
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void )
{
8000191c:	ff010113          	addi	sp,sp,-16
80001920:	00112623          	sw	ra,12(sp)
80001924:	00812423          	sw	s0,8(sp)
80001928:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:241
	/*Save Context*/
	{
		__asm volatile("lw	t0, pxCurrentTCB");
8000192c:	92c1a283          	lw	t0,-1748(gp) # 8000889c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:242
		__asm volatile("sw	a2, 0x0(t0)");
80001930:	00c2a023          	sw	a2,0(t0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:246
	}

	/* Increment the RTOS tick. */
	prvSetNextTimerInterrupt();
80001934:	d91ff0ef          	jal	ra,800016c4 <prvSetNextTimerInterrupt>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:249

	/*Switch task */
	if( xTaskIncrementTick() != pdFALSE )
80001938:	621000ef          	jal	ra,80002758 <xTaskIncrementTick>
8000193c:	00050793          	mv	a5,a0
80001940:	00078463          	beqz	a5,80001948 <SysTick_Handler+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:251
	{
		vTaskSwitchContext();
80001944:	000010ef          	jal	ra,80002944 <vTaskSwitchContext>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:256
	}

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
80001948:	92c1a103          	lw	sp,-1748(gp) # 8000889c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:257
		__asm volatile("lw	sp, 0x0(sp)");
8000194c:	00012103          	lw	sp,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:259

		__asm volatile("lw	t0, 31 * 4(sp)");
80001950:	07c12283          	lw	t0,124(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:260
		__asm volatile("csrw	mepc, t0");
80001954:	34129073          	csrw	mepc,t0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:263

		// Added by Iaçanã
		__asm volatile("lui	t0, 0x2");
80001958:	000022b7          	lui	t0,0x2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:264
  		__asm volatile("addi t0,t0,-2048");
8000195c:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:265
		__asm volatile("csrs mstatus,t0");
80001960:	3002a073          	csrs	mstatus,t0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:267

		__asm volatile("lw	t0, 32 * 4(sp)");
80001964:	08012283          	lw	t0,128(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:268
		__asm volatile("slli t0, t0, 0x4");
80001968:	00429293          	slli	t0,t0,0x4
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:269
		__asm volatile("csrs mstatus, t0");
8000196c:	3002a073          	csrs	mstatus,t0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:271

		__asm volatile("lw	x1, 0x0(sp)");
80001970:	00012083          	lw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:272
		__asm volatile("lw   x4, 3 * 4(sp)");
80001974:	00c12203          	lw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:273
		__asm volatile("lw   x5, 4 * 4(sp)");
80001978:	01012283          	lw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:274
		__asm volatile("lw   x6, 5 * 4(sp)");
8000197c:	01412303          	lw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:275
		__asm volatile("lw   x7, 6 * 4(sp)");
80001980:	01812383          	lw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:276
		__asm volatile("lw   x8, 7 * 4(sp)");
80001984:	01c12403          	lw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:277
		__asm volatile("lw   x9, 8 * 4(sp)");
80001988:	02012483          	lw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:278
		__asm volatile("lw   x10, 9 * 4(sp)");
8000198c:	02412503          	lw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:279
		__asm volatile("lw   x11, 10 * 4(sp)");
80001990:	02812583          	lw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:280
		__asm volatile("lw   x12, 11 * 4(sp)");
80001994:	02c12603          	lw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:281
		__asm volatile("lw   x13, 12 * 4(sp)");
80001998:	03012683          	lw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:282
		__asm volatile("lw   x14, 13 * 4(sp)");
8000199c:	03412703          	lw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:283
		__asm volatile("lw   x15, 14 * 4(sp)");
800019a0:	03812783          	lw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:284
		__asm volatile("lw   x16, 15 * 4(sp)");
800019a4:	03c12803          	lw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:285
		__asm volatile("lw   x17, 16 * 4(sp)");
800019a8:	04012883          	lw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:286
		__asm volatile("lw   x18, 17 * 4(sp)");
800019ac:	04412903          	lw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:287
		__asm volatile("lw   x19, 18 * 4(sp)");
800019b0:	04812983          	lw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:288
		__asm volatile("lw   x20, 19 * 4(sp)");
800019b4:	04c12a03          	lw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:289
		__asm volatile("lw   x21, 20 * 4(sp)");
800019b8:	05012a83          	lw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:290
		__asm volatile("lw   x22, 21 * 4(sp)");
800019bc:	05412b03          	lw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:291
		__asm volatile("lw   x23, 22 * 4(sp)");
800019c0:	05812b83          	lw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:292
		__asm volatile("lw   x24, 23 * 4(sp)");
800019c4:	05c12c03          	lw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:293
		__asm volatile("lw   x25, 24 * 4(sp)");
800019c8:	06012c83          	lw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:294
		__asm volatile("lw   x26, 25 * 4(sp)");
800019cc:	06412d03          	lw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:295
		__asm volatile("lw   x27, 26 * 4(sp)");
800019d0:	06812d83          	lw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:296
		__asm volatile("lw   x28, 27 * 4(sp)");
800019d4:	06c12e03          	lw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:297
		__asm volatile("lw   x29, 28 * 4(sp)");
800019d8:	07012e83          	lw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:298
		__asm volatile("lw   x30, 29 * 4(sp)");
800019dc:	07412f03          	lw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:299
		__asm volatile("lw   x31, 30 * 4(sp)");
800019e0:	07812f83          	lw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:301

		__asm volatile("addi	sp, sp, 4 * 33");
800019e4:	08410113          	addi	sp,sp,132
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:303

		__asm volatile("mret");
800019e8:	30200073          	mret
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:305
	}
}
800019ec:	00000013          	nop
800019f0:	00c12083          	lw	ra,12(sp)
800019f4:	00812403          	lw	s0,8(sp)
800019f8:	01010113          	addi	sp,sp,16
800019fc:	00008067          	ret

80001a00 <xPortStartScheduler>:
xPortStartScheduler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:308
uint32_t g_startscheduler = 0;
BaseType_t xPortStartScheduler( void )
{
80001a00:	ff010113          	addi	sp,sp,-16
80001a04:	00112623          	sw	ra,12(sp)
80001a08:	00812423          	sw	s0,8(sp)
80001a0c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:309
	vPortSetupTimer();
80001a10:	d81ff0ef          	jal	ra,80001790 <vPortSetupTimer>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:310
	uxCriticalNesting = 0;
80001a14:	800087b7          	lui	a5,0x80008
80001a18:	7607aa23          	sw	zero,1908(a5) # 80008774 <__stack_top+0xfffc5574>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:311
	g_startscheduler = 1;
80001a1c:	00100713          	li	a4,1
80001a20:	92e1a423          	sw	a4,-1752(gp) # 80008898 <g_startscheduler>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:312
	__enable_irq();
80001a24:	97dfe0ef          	jal	ra,800003a0 <__enable_irq>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:314

	raise_soft_interrupt();
80001a28:	bddff0ef          	jal	ra,80001604 <raise_soft_interrupt>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:317

	/*Should not get here*/
	return pdFALSE;
80001a2c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:318
}
80001a30:	00078513          	mv	a0,a5
80001a34:	00c12083          	lw	ra,12(sp)
80001a38:	00812403          	lw	s0,8(sp)
80001a3c:	01010113          	addi	sp,sp,16
80001a40:	00008067          	ret

80001a44 <Software_IRQHandler>:
Software_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:321

void Software_IRQHandler(void)
{
80001a44:	ff010113          	addi	sp,sp,-16
80001a48:	00112623          	sw	ra,12(sp)
80001a4c:	00812423          	sw	s0,8(sp)
80001a50:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:322
	if(1 == g_startscheduler)
80001a54:	9281a703          	lw	a4,-1752(gp) # 80008898 <g_startscheduler>
80001a58:	00100793          	li	a5,1
80001a5c:	00f71863          	bne	a4,a5,80001a6c <Software_IRQHandler+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:324
	{
		g_startscheduler = 2; //skip the save n switch context first time when scheduler is starting.
80001a60:	00200713          	li	a4,2
80001a64:	92e1a423          	sw	a4,-1752(gp) # 80008898 <g_startscheduler>
80001a68:	0100006f          	j	80001a78 <Software_IRQHandler+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:330
	}
	else
	{
		/*Save Context*/
		{
			__asm volatile("lw	t0, pxCurrentTCB");
80001a6c:	92c1a283          	lw	t0,-1748(gp) # 8000889c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:331
			__asm volatile("sw	a2, 0x0(t0)");
80001a70:	00c2a023          	sw	a2,0(t0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:334
		}

		vTaskSwitchContext();
80001a74:	6d1000ef          	jal	ra,80002944 <vTaskSwitchContext>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:338
	}

	// Moved by Imperas (was previously causing corruption of a5)
	PRCI->MSIP[0] = 0x00;
80001a78:	440007b7          	lui	a5,0x44000
80001a7c:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:342

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
80001a80:	92c1a103          	lw	sp,-1748(gp) # 8000889c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:343
		__asm volatile("lw	sp, 0x0(sp)");
80001a84:	00012103          	lw	sp,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:345

		__asm volatile("lw	t0, 31 * 4(sp)");
80001a88:	07c12283          	lw	t0,124(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:346
		__asm volatile("csrw	mepc, t0");
80001a8c:	34129073          	csrw	mepc,t0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:349

		// Added by Iaçanã
		__asm volatile("lui	t0, 0x2");
80001a90:	000022b7          	lui	t0,0x2
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:350
  		__asm volatile("addi t0,t0,-2048");
80001a94:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:351
		__asm volatile("csrs mstatus,t0");
80001a98:	3002a073          	csrs	mstatus,t0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:353

		__asm volatile("lw	t0, 32 * 4(sp)");
80001a9c:	08012283          	lw	t0,128(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:354
		__asm volatile("slli t0, t0, 0x4");
80001aa0:	00429293          	slli	t0,t0,0x4
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:355
		__asm volatile("csrs mstatus, t0");
80001aa4:	3002a073          	csrs	mstatus,t0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:357

		__asm volatile("lw	x1, 0x0(sp)");
80001aa8:	00012083          	lw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:358
		__asm volatile("lw   x4, 3 * 4(sp)");
80001aac:	00c12203          	lw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:359
		__asm volatile("lw   x5, 4 * 4(sp)");
80001ab0:	01012283          	lw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:360
		__asm volatile("lw   x6, 5 * 4(sp)");
80001ab4:	01412303          	lw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:361
		__asm volatile("lw   x7, 6 * 4(sp)");
80001ab8:	01812383          	lw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:362
		__asm volatile("lw   x8, 7 * 4(sp)");
80001abc:	01c12403          	lw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:363
		__asm volatile("lw   x9, 8 * 4(sp)");
80001ac0:	02012483          	lw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:364
		__asm volatile("lw   x10, 9 * 4(sp)");
80001ac4:	02412503          	lw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:365
		__asm volatile("lw   x11, 10 * 4(sp)");
80001ac8:	02812583          	lw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:366
		__asm volatile("lw   x12, 11 * 4(sp)");
80001acc:	02c12603          	lw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:367
		__asm volatile("lw   x13, 12 * 4(sp)");
80001ad0:	03012683          	lw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:368
		__asm volatile("lw   x14, 13 * 4(sp)");
80001ad4:	03412703          	lw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:369
		__asm volatile("lw   x15, 14 * 4(sp)");
80001ad8:	03812783          	lw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:370
		__asm volatile("lw   x16, 15 * 4(sp)");
80001adc:	03c12803          	lw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:371
		__asm volatile("lw   x17, 16 * 4(sp)");
80001ae0:	04012883          	lw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:372
		__asm volatile("lw   x18, 17 * 4(sp)");
80001ae4:	04412903          	lw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:373
		__asm volatile("lw   x19, 18 * 4(sp)");
80001ae8:	04812983          	lw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:374
		__asm volatile("lw   x20, 19 * 4(sp)");
80001aec:	04c12a03          	lw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:375
		__asm volatile("lw   x21, 20 * 4(sp)");
80001af0:	05012a83          	lw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:376
		__asm volatile("lw   x22, 21 * 4(sp)");
80001af4:	05412b03          	lw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:377
		__asm volatile("lw   x23, 22 * 4(sp)");
80001af8:	05812b83          	lw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:378
		__asm volatile("lw   x24, 23 * 4(sp)");
80001afc:	05c12c03          	lw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:379
		__asm volatile("lw   x25, 24 * 4(sp)");
80001b00:	06012c83          	lw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:380
		__asm volatile("lw   x26, 25 * 4(sp)");
80001b04:	06412d03          	lw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:381
		__asm volatile("lw   x27, 26 * 4(sp)");
80001b08:	06812d83          	lw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:382
		__asm volatile("lw   x28, 27 * 4(sp)");
80001b0c:	06c12e03          	lw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:383
		__asm volatile("lw   x29, 28 * 4(sp)");
80001b10:	07012e83          	lw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:384
		__asm volatile("lw   x30, 29 * 4(sp)");
80001b14:	07412f03          	lw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:385
		__asm volatile("lw   x31, 30 * 4(sp)");
80001b18:	07812f83          	lw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:387

		__asm volatile("addi	sp, sp, 4 * 33");
80001b1c:	08410113          	addi	sp,sp,132
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:392

	    // Moved by Imperas (causing corruption of a5 at this position)
		//PRCI->MSIP[0] = 0x00;

		__asm volatile("mret");
80001b20:	30200073          	mret
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:394
	}
}
80001b24:	00000013          	nop
80001b28:	00c12083          	lw	ra,12(sp)
80001b2c:	00812403          	lw	s0,8(sp)
80001b30:	01010113          	addi	sp,sp,16
80001b34:	00008067          	ret

80001b38 <vPortYield>:
vPortYield():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:397

void vPortYield( void )
{
80001b38:	ff010113          	addi	sp,sp,-16
80001b3c:	00112623          	sw	ra,12(sp)
80001b40:	00812423          	sw	s0,8(sp)
80001b44:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:398
	raise_soft_interrupt();
80001b48:	abdff0ef          	jal	ra,80001604 <raise_soft_interrupt>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:399
}
80001b4c:	00000013          	nop
80001b50:	00c12083          	lw	ra,12(sp)
80001b54:	00812403          	lw	s0,8(sp)
80001b58:	01010113          	addi	sp,sp,16
80001b5c:	00008067          	ret

80001b60 <vListInitialise>:
vListInitialise():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:80
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
80001b60:	fe010113          	addi	sp,sp,-32
80001b64:	00812e23          	sw	s0,28(sp)
80001b68:	02010413          	addi	s0,sp,32
80001b6c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:84
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001b70:	fec42783          	lw	a5,-20(s0)
80001b74:	00878713          	addi	a4,a5,8
80001b78:	fec42783          	lw	a5,-20(s0)
80001b7c:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:88

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
80001b80:	fec42783          	lw	a5,-20(s0)
80001b84:	fff00713          	li	a4,-1
80001b88:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:92

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001b8c:	fec42783          	lw	a5,-20(s0)
80001b90:	00878713          	addi	a4,a5,8
80001b94:	fec42783          	lw	a5,-20(s0)
80001b98:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:93
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001b9c:	fec42783          	lw	a5,-20(s0)
80001ba0:	00878713          	addi	a4,a5,8
80001ba4:	fec42783          	lw	a5,-20(s0)
80001ba8:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:95

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
80001bac:	fec42783          	lw	a5,-20(s0)
80001bb0:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:101

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
80001bb4:	00000013          	nop
80001bb8:	01c12403          	lw	s0,28(sp)
80001bbc:	02010113          	addi	sp,sp,32
80001bc0:	00008067          	ret

80001bc4 <vListInitialiseItem>:
vListInitialiseItem():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:105
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
80001bc4:	fe010113          	addi	sp,sp,-32
80001bc8:	00812e23          	sw	s0,28(sp)
80001bcc:	02010413          	addi	s0,sp,32
80001bd0:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:107
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80001bd4:	fec42783          	lw	a5,-20(s0)
80001bd8:	0007a823          	sw	zero,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:113

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
80001bdc:	00000013          	nop
80001be0:	01c12403          	lw	s0,28(sp)
80001be4:	02010113          	addi	sp,sp,32
80001be8:	00008067          	ret

80001bec <vListInsertEnd>:
vListInsertEnd():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:117
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001bec:	fd010113          	addi	sp,sp,-48
80001bf0:	02812623          	sw	s0,44(sp)
80001bf4:	03010413          	addi	s0,sp,48
80001bf8:	fca42e23          	sw	a0,-36(s0)
80001bfc:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:118
ListItem_t * const pxIndex = pxList->pxIndex;
80001c00:	fdc42783          	lw	a5,-36(s0)
80001c04:	0047a783          	lw	a5,4(a5)
80001c08:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:129
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
80001c0c:	fd842783          	lw	a5,-40(s0)
80001c10:	fec42703          	lw	a4,-20(s0)
80001c14:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:130
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
80001c18:	fec42783          	lw	a5,-20(s0)
80001c1c:	0087a703          	lw	a4,8(a5)
80001c20:	fd842783          	lw	a5,-40(s0)
80001c24:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:135

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
80001c28:	fec42783          	lw	a5,-20(s0)
80001c2c:	0087a783          	lw	a5,8(a5)
80001c30:	fd842703          	lw	a4,-40(s0)
80001c34:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:136
	pxIndex->pxPrevious = pxNewListItem;
80001c38:	fec42783          	lw	a5,-20(s0)
80001c3c:	fd842703          	lw	a4,-40(s0)
80001c40:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:139

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001c44:	fd842783          	lw	a5,-40(s0)
80001c48:	fdc42703          	lw	a4,-36(s0)
80001c4c:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:141

	( pxList->uxNumberOfItems )++;
80001c50:	fdc42783          	lw	a5,-36(s0)
80001c54:	0007a783          	lw	a5,0(a5)
80001c58:	00178713          	addi	a4,a5,1
80001c5c:	fdc42783          	lw	a5,-36(s0)
80001c60:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:142
}
80001c64:	00000013          	nop
80001c68:	02c12403          	lw	s0,44(sp)
80001c6c:	03010113          	addi	sp,sp,48
80001c70:	00008067          	ret

80001c74 <vListInsert>:
vListInsert():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:146
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001c74:	fd010113          	addi	sp,sp,-48
80001c78:	02812623          	sw	s0,44(sp)
80001c7c:	03010413          	addi	s0,sp,48
80001c80:	fca42e23          	sw	a0,-36(s0)
80001c84:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:148
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
80001c88:	fd842783          	lw	a5,-40(s0)
80001c8c:	0007a783          	lw	a5,0(a5)
80001c90:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:164
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
80001c94:	fe842703          	lw	a4,-24(s0)
80001c98:	fff00793          	li	a5,-1
80001c9c:	00f71a63          	bne	a4,a5,80001cb0 <vListInsert+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:166
	{
		pxIterator = pxList->xListEnd.pxPrevious;
80001ca0:	fdc42783          	lw	a5,-36(s0)
80001ca4:	0107a783          	lw	a5,16(a5)
80001ca8:	fef42623          	sw	a5,-20(s0)
80001cac:	0340006f          	j	80001ce0 <vListInsert+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:192
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001cb0:	fdc42783          	lw	a5,-36(s0)
80001cb4:	00878793          	addi	a5,a5,8
80001cb8:	fef42623          	sw	a5,-20(s0)
80001cbc:	0100006f          	j	80001ccc <vListInsert+0x58>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 3)
80001cc0:	fec42783          	lw	a5,-20(s0)
80001cc4:	0047a783          	lw	a5,4(a5)
80001cc8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 1)
80001ccc:	fec42783          	lw	a5,-20(s0)
80001cd0:	0047a783          	lw	a5,4(a5)
80001cd4:	0007a783          	lw	a5,0(a5)
80001cd8:	fe842703          	lw	a4,-24(s0)
80001cdc:	fef772e3          	bleu	a5,a4,80001cc0 <vListInsert+0x4c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:199
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
80001ce0:	fec42783          	lw	a5,-20(s0)
80001ce4:	0047a703          	lw	a4,4(a5)
80001ce8:	fd842783          	lw	a5,-40(s0)
80001cec:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:200
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
80001cf0:	fd842783          	lw	a5,-40(s0)
80001cf4:	0047a783          	lw	a5,4(a5)
80001cf8:	fd842703          	lw	a4,-40(s0)
80001cfc:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:201
	pxNewListItem->pxPrevious = pxIterator;
80001d00:	fd842783          	lw	a5,-40(s0)
80001d04:	fec42703          	lw	a4,-20(s0)
80001d08:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:202
	pxIterator->pxNext = pxNewListItem;
80001d0c:	fec42783          	lw	a5,-20(s0)
80001d10:	fd842703          	lw	a4,-40(s0)
80001d14:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:206

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001d18:	fd842783          	lw	a5,-40(s0)
80001d1c:	fdc42703          	lw	a4,-36(s0)
80001d20:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:208

	( pxList->uxNumberOfItems )++;
80001d24:	fdc42783          	lw	a5,-36(s0)
80001d28:	0007a783          	lw	a5,0(a5)
80001d2c:	00178713          	addi	a4,a5,1
80001d30:	fdc42783          	lw	a5,-36(s0)
80001d34:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:209
}
80001d38:	00000013          	nop
80001d3c:	02c12403          	lw	s0,44(sp)
80001d40:	03010113          	addi	sp,sp,48
80001d44:	00008067          	ret

80001d48 <uxListRemove>:
uxListRemove():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:213
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
80001d48:	fd010113          	addi	sp,sp,-48
80001d4c:	02812623          	sw	s0,44(sp)
80001d50:	03010413          	addi	s0,sp,48
80001d54:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:216
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
80001d58:	fdc42783          	lw	a5,-36(s0)
80001d5c:	0107a783          	lw	a5,16(a5)
80001d60:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:218

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
80001d64:	fdc42783          	lw	a5,-36(s0)
80001d68:	0047a783          	lw	a5,4(a5)
80001d6c:	fdc42703          	lw	a4,-36(s0)
80001d70:	00872703          	lw	a4,8(a4) # 44000008 <RAM_SIZE+0x43f80008>
80001d74:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:219
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
80001d78:	fdc42783          	lw	a5,-36(s0)
80001d7c:	0087a783          	lw	a5,8(a5)
80001d80:	fdc42703          	lw	a4,-36(s0)
80001d84:	00472703          	lw	a4,4(a4)
80001d88:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:225

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
80001d8c:	fec42783          	lw	a5,-20(s0)
80001d90:	0047a783          	lw	a5,4(a5)
80001d94:	fdc42703          	lw	a4,-36(s0)
80001d98:	00f71a63          	bne	a4,a5,80001dac <uxListRemove+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:227
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
80001d9c:	fdc42783          	lw	a5,-36(s0)
80001da0:	0087a703          	lw	a4,8(a5)
80001da4:	fec42783          	lw	a5,-20(s0)
80001da8:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:234
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
80001dac:	fdc42783          	lw	a5,-36(s0)
80001db0:	0007a823          	sw	zero,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:235
	( pxList->uxNumberOfItems )--;
80001db4:	fec42783          	lw	a5,-20(s0)
80001db8:	0007a783          	lw	a5,0(a5)
80001dbc:	fff78713          	addi	a4,a5,-1
80001dc0:	fec42783          	lw	a5,-20(s0)
80001dc4:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:237

	return pxList->uxNumberOfItems;
80001dc8:	fec42783          	lw	a5,-20(s0)
80001dcc:	0007a783          	lw	a5,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/list.c:238
}
80001dd0:	00078513          	mv	a0,a5
80001dd4:	02c12403          	lw	s0,44(sp)
80001dd8:	03010113          	addi	sp,sp,48
80001ddc:	00008067          	ret

80001de0 <memset>:
memset():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:25

  return dest;
}

void* memset(void* dest, int byte, size_t len)
{
80001de0:	fd010113          	addi	sp,sp,-48
80001de4:	02812623          	sw	s0,44(sp)
80001de8:	03010413          	addi	s0,sp,48
80001dec:	fca42e23          	sw	a0,-36(s0)
80001df0:	fcb42c23          	sw	a1,-40(s0)
80001df4:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:26
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
80001df8:	fdc42703          	lw	a4,-36(s0)
80001dfc:	fd442783          	lw	a5,-44(s0)
80001e00:	00f767b3          	or	a5,a4,a5
80001e04:	0037f793          	andi	a5,a5,3
80001e08:	06079863          	bnez	a5,80001e78 <memset+0x98>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:27
    uintptr_t word = byte & 0xFF;
80001e0c:	fd842783          	lw	a5,-40(s0)
80001e10:	0ff7f793          	andi	a5,a5,255
80001e14:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:28
    word |= word << 8;
80001e18:	fe442783          	lw	a5,-28(s0)
80001e1c:	00879793          	slli	a5,a5,0x8
80001e20:	fe442703          	lw	a4,-28(s0)
80001e24:	00f767b3          	or	a5,a4,a5
80001e28:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:29
    word |= word << 16;
80001e2c:	fe442783          	lw	a5,-28(s0)
80001e30:	01079793          	slli	a5,a5,0x10
80001e34:	fe442703          	lw	a4,-28(s0)
80001e38:	00f767b3          	or	a5,a4,a5
80001e3c:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:32
    word |= word << 16 << 16;

    uintptr_t *d = dest;
80001e40:	fdc42783          	lw	a5,-36(s0)
80001e44:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001e48:	0180006f          	j	80001e60 <memset+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:34
      *d++ = word;
80001e4c:	fec42783          	lw	a5,-20(s0)
80001e50:	00478713          	addi	a4,a5,4
80001e54:	fee42623          	sw	a4,-20(s0)
80001e58:	fe442703          	lw	a4,-28(s0)
80001e5c:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001e60:	fdc42703          	lw	a4,-36(s0)
80001e64:	fd442783          	lw	a5,-44(s0)
80001e68:	00f707b3          	add	a5,a4,a5
80001e6c:	fec42703          	lw	a4,-20(s0)
80001e70:	fcf76ee3          	bltu	a4,a5,80001e4c <memset+0x6c>
80001e74:	0400006f          	j	80001eb4 <memset+0xd4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:36
  } else {
    char *d = dest;
80001e78:	fdc42783          	lw	a5,-36(s0)
80001e7c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001e80:	0200006f          	j	80001ea0 <memset+0xc0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:38
      *d++ = byte;
80001e84:	fe842783          	lw	a5,-24(s0)
80001e88:	00178713          	addi	a4,a5,1
80001e8c:	fee42423          	sw	a4,-24(s0)
80001e90:	fd842703          	lw	a4,-40(s0)
80001e94:	01871713          	slli	a4,a4,0x18
80001e98:	41875713          	srai	a4,a4,0x18
80001e9c:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001ea0:	fdc42703          	lw	a4,-36(s0)
80001ea4:	fd442783          	lw	a5,-44(s0)
80001ea8:	00f707b3          	add	a5,a4,a5
80001eac:	fe842703          	lw	a4,-24(s0)
80001eb0:	fcf76ae3          	bltu	a4,a5,80001e84 <memset+0xa4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:40
  }
  return dest;
80001eb4:	fdc42783          	lw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:41
}
80001eb8:	00078513          	mv	a0,a5
80001ebc:	02c12403          	lw	s0,44(sp)
80001ec0:	03010113          	addi	sp,sp,48
80001ec4:	00008067          	ret

80001ec8 <strlen>:
strlen():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:44

size_t strlen(const char *s)
{
80001ec8:	fd010113          	addi	sp,sp,-48
80001ecc:	02812623          	sw	s0,44(sp)
80001ed0:	03010413          	addi	s0,sp,48
80001ed4:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:45
  const char *p = s;
80001ed8:	fdc42783          	lw	a5,-36(s0)
80001edc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001ee0:	0100006f          	j	80001ef0 <strlen+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:47
    p++;
80001ee4:	fec42783          	lw	a5,-20(s0)
80001ee8:	00178793          	addi	a5,a5,1
80001eec:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001ef0:	fec42783          	lw	a5,-20(s0)
80001ef4:	00078783          	lb	a5,0(a5)
80001ef8:	fe0796e3          	bnez	a5,80001ee4 <strlen+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:48
  return p - s;
80001efc:	fec42703          	lw	a4,-20(s0)
80001f00:	fdc42783          	lw	a5,-36(s0)
80001f04:	40f707b3          	sub	a5,a4,a5
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/string.c:49
}
80001f08:	00078513          	mv	a0,a5
80001f0c:	02c12403          	lw	s0,44(sp)
80001f10:	03010113          	addi	sp,sp,48
80001f14:	00008067          	ret

80001f18 <xTaskGenericCreate>:
xTaskGenericCreate():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:551

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80001f18:	fc010113          	addi	sp,sp,-64
80001f1c:	02112e23          	sw	ra,60(sp)
80001f20:	02812c23          	sw	s0,56(sp)
80001f24:	04010413          	addi	s0,sp,64
80001f28:	fca42e23          	sw	a0,-36(s0)
80001f2c:	fcb42c23          	sw	a1,-40(s0)
80001f30:	fcd42823          	sw	a3,-48(s0)
80001f34:	fce42623          	sw	a4,-52(s0)
80001f38:	fcf42423          	sw	a5,-56(s0)
80001f3c:	fd042223          	sw	a6,-60(s0)
80001f40:	fd142023          	sw	a7,-64(s0)
80001f44:	00060793          	mv	a5,a2
80001f48:	fcf41b23          	sh	a5,-42(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:556
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
80001f4c:	fdc42783          	lw	a5,-36(s0)
80001f50:	00079663          	bnez	a5,80001f5c <xTaskGenericCreate+0x44>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:556 (discriminator 1)
80001f54:	30047073          	csrci	mstatus,8
80001f58:	0000006f          	j	80001f58 <xTaskGenericCreate+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:557
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
80001f5c:	fcc42703          	lw	a4,-52(s0)
80001f60:	00400793          	li	a5,4
80001f64:	00e7f663          	bleu	a4,a5,80001f70 <xTaskGenericCreate+0x58>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 1)
80001f68:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 2)
80001f6c:	0000006f          	j	80001f6c <xTaskGenericCreate+0x54>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:561

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
80001f70:	fd645783          	lhu	a5,-42(s0)
80001f74:	fc442583          	lw	a1,-60(s0)
80001f78:	00078513          	mv	a0,a5
80001f7c:	609000ef          	jal	ra,80002d84 <prvAllocateTCBAndStack>
80001f80:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:562
	if( pxNewTCB != NULL )
80001f84:	fe842783          	lw	a5,-24(s0)
80001f88:	16078263          	beqz	a5,800020ec <xTaskGenericCreate+0x1d4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:598
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
80001f8c:	fe842783          	lw	a5,-24(s0)
80001f90:	0307a703          	lw	a4,48(a5)
80001f94:	fd645683          	lhu	a3,-42(s0)
80001f98:	400007b7          	lui	a5,0x40000
80001f9c:	fff78793          	addi	a5,a5,-1 # 3fffffff <RAM_SIZE+0x3ff7ffff>
80001fa0:	00f687b3          	add	a5,a3,a5
80001fa4:	00279793          	slli	a5,a5,0x2
80001fa8:	00f707b3          	add	a5,a4,a5
80001fac:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:599
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
80001fb0:	fe442783          	lw	a5,-28(s0)
80001fb4:	ffc7f793          	andi	a5,a5,-4
80001fb8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:602

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
80001fbc:	fe442783          	lw	a5,-28(s0)
80001fc0:	0037f793          	andi	a5,a5,3
80001fc4:	00078663          	beqz	a5,80001fd0 <xTaskGenericCreate+0xb8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 1)
80001fc8:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 3)
80001fcc:	0000006f          	j	80001fcc <xTaskGenericCreate+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:619
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
80001fd0:	fd645783          	lhu	a5,-42(s0)
80001fd4:	00078713          	mv	a4,a5
80001fd8:	fc042683          	lw	a3,-64(s0)
80001fdc:	fcc42603          	lw	a2,-52(s0)
80001fe0:	fd842583          	lw	a1,-40(s0)
80001fe4:	fe842503          	lw	a0,-24(s0)
80001fe8:	27d000ef          	jal	ra,80002a64 <prvInitialiseTCBVariables>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:631
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
80001fec:	fd042603          	lw	a2,-48(s0)
80001ff0:	fdc42583          	lw	a1,-36(s0)
80001ff4:	fe442503          	lw	a0,-28(s0)
80001ff8:	891ff0ef          	jal	ra,80001888 <pxPortInitialiseStack>
80001ffc:	00050713          	mv	a4,a0
80002000:	fe842783          	lw	a5,-24(s0)
80002004:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:635
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
80002008:	fc842783          	lw	a5,-56(s0)
8000200c:	00078863          	beqz	a5,8000201c <xTaskGenericCreate+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:640
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
80002010:	fc842783          	lw	a5,-56(s0)
80002014:	fe842703          	lw	a4,-24(s0)
80002018:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:649
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
8000201c:	e34ff0ef          	jal	ra,80001650 <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:651
		{
			uxCurrentNumberOfTasks++;
80002020:	93c1a783          	lw	a5,-1732(gp) # 800088ac <uxCurrentNumberOfTasks>
80002024:	00178713          	addi	a4,a5,1
80002028:	92e1ae23          	sw	a4,-1732(gp) # 800088ac <uxCurrentNumberOfTasks>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:652
			if( pxCurrentTCB == NULL )
8000202c:	92c1a783          	lw	a5,-1748(gp) # 8000889c <pxCurrentTCB>
80002030:	02079063          	bnez	a5,80002050 <xTaskGenericCreate+0x138>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:656
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
80002034:	fe842703          	lw	a4,-24(s0)
80002038:	92e1a623          	sw	a4,-1748(gp) # 8000889c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:658

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
8000203c:	93c1a703          	lw	a4,-1732(gp) # 800088ac <uxCurrentNumberOfTasks>
80002040:	00100793          	li	a5,1
80002044:	02f71663          	bne	a4,a5,80002070 <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:663
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
80002048:	355000ef          	jal	ra,80002b9c <prvInitialiseTaskLists>
8000204c:	0240006f          	j	80002070 <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:675
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
80002050:	9481a783          	lw	a5,-1720(gp) # 800088b8 <xSchedulerRunning>
80002054:	00079e63          	bnez	a5,80002070 <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:677
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
80002058:	92c1a783          	lw	a5,-1748(gp) # 8000889c <pxCurrentTCB>
8000205c:	02c7a783          	lw	a5,44(a5)
80002060:	fcc42703          	lw	a4,-52(s0)
80002064:	00f76663          	bltu	a4,a5,80002070 <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:679
					{
						pxCurrentTCB = pxNewTCB;
80002068:	fe842703          	lw	a4,-24(s0)
8000206c:	92e1a623          	sw	a4,-1748(gp) # 8000889c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:692
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
80002070:	9581a783          	lw	a5,-1704(gp) # 800088c8 <uxTaskNumber>
80002074:	00178713          	addi	a4,a5,1
80002078:	94e1ac23          	sw	a4,-1704(gp) # 800088c8 <uxTaskNumber>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:697

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
8000207c:	9581a703          	lw	a4,-1704(gp) # 800088c8 <uxTaskNumber>
80002080:	fe842783          	lw	a5,-24(s0)
80002084:	04e7a423          	sw	a4,72(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:702
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
80002088:	fe842783          	lw	a5,-24(s0)
8000208c:	02c7a703          	lw	a4,44(a5)
80002090:	9441a783          	lw	a5,-1724(gp) # 800088b4 <uxTopReadyPriority>
80002094:	00e7f863          	bleu	a4,a5,800020a4 <xTaskGenericCreate+0x18c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 1)
80002098:	fe842783          	lw	a5,-24(s0)
8000209c:	02c7a703          	lw	a4,44(a5)
800020a0:	94e1a223          	sw	a4,-1724(gp) # 800088b4 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 3)
800020a4:	fe842783          	lw	a5,-24(s0)
800020a8:	02c7a703          	lw	a4,44(a5)
800020ac:	00070793          	mv	a5,a4
800020b0:	00279793          	slli	a5,a5,0x2
800020b4:	00e787b3          	add	a5,a5,a4
800020b8:	00279793          	slli	a5,a5,0x2
800020bc:	80022737          	lui	a4,0x80022
800020c0:	91070713          	addi	a4,a4,-1776 # 80021910 <__stack_top+0xfffde710>
800020c4:	00e78733          	add	a4,a5,a4
800020c8:	fe842783          	lw	a5,-24(s0)
800020cc:	00478793          	addi	a5,a5,4
800020d0:	00078593          	mv	a1,a5
800020d4:	00070513          	mv	a0,a4
800020d8:	b15ff0ef          	jal	ra,80001bec <vListInsertEnd>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:704 (discriminator 3)

			xReturn = pdPASS;
800020dc:	00100793          	li	a5,1
800020e0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:707 (discriminator 3)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
800020e4:	da0ff0ef          	jal	ra,80001684 <vPortExitCritical>
800020e8:	00c0006f          	j	800020f4 <xTaskGenericCreate+0x1dc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:711
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
800020ec:	fff00793          	li	a5,-1
800020f0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:715
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
800020f4:	fec42703          	lw	a4,-20(s0)
800020f8:	00100793          	li	a5,1
800020fc:	02f71063          	bne	a4,a5,8000211c <xTaskGenericCreate+0x204>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:717
	{
		if( xSchedulerRunning != pdFALSE )
80002100:	9481a783          	lw	a5,-1720(gp) # 800088b8 <xSchedulerRunning>
80002104:	00078c63          	beqz	a5,8000211c <xTaskGenericCreate+0x204>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:721
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
80002108:	92c1a783          	lw	a5,-1748(gp) # 8000889c <pxCurrentTCB>
8000210c:	02c7a783          	lw	a5,44(a5)
80002110:	fcc42703          	lw	a4,-52(s0)
80002114:	00e7f463          	bleu	a4,a5,8000211c <xTaskGenericCreate+0x204>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:723
			{
				taskYIELD_IF_USING_PREEMPTION();
80002118:	a21ff0ef          	jal	ra,80001b38 <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:736
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
8000211c:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:737
}
80002120:	00078513          	mv	a0,a5
80002124:	03c12083          	lw	ra,60(sp)
80002128:	03812403          	lw	s0,56(sp)
8000212c:	04010113          	addi	sp,sp,64
80002130:	00008067          	ret

80002134 <vTaskDelete>:
vTaskDelete():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:743
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
80002134:	fd010113          	addi	sp,sp,-48
80002138:	02112623          	sw	ra,44(sp)
8000213c:	02812423          	sw	s0,40(sp)
80002140:	03010413          	addi	s0,sp,48
80002144:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:746
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
80002148:	d08ff0ef          	jal	ra,80001650 <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:750
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
8000214c:	fdc42783          	lw	a5,-36(s0)
80002150:	00079663          	bnez	a5,8000215c <vTaskDelete+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 1)
80002154:	92c1a783          	lw	a5,-1748(gp) # 8000889c <pxCurrentTCB>
80002158:	0080006f          	j	80002160 <vTaskDelete+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 2)
8000215c:	fdc42783          	lw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 4)
80002160:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:756 (discriminator 4)

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80002164:	fec42783          	lw	a5,-20(s0)
80002168:	00478793          	addi	a5,a5,4
8000216c:	00078513          	mv	a0,a5
80002170:	bd9ff0ef          	jal	ra,80001d48 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:766 (discriminator 4)
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
80002174:	fec42783          	lw	a5,-20(s0)
80002178:	0287a783          	lw	a5,40(a5)
8000217c:	00078a63          	beqz	a5,80002190 <vTaskDelete+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:768
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002180:	fec42783          	lw	a5,-20(s0)
80002184:	01878793          	addi	a5,a5,24
80002188:	00078513          	mv	a0,a5
8000218c:	bbdff0ef          	jal	ra,80001d48 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:775
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
80002190:	fec42783          	lw	a5,-20(s0)
80002194:	00478793          	addi	a5,a5,4
80002198:	00078593          	mv	a1,a5
8000219c:	800227b7          	lui	a5,0x80022
800021a0:	9b078513          	addi	a0,a5,-1616 # 800219b0 <__stack_top+0xfffde7b0>
800021a4:	a49ff0ef          	jal	ra,80001bec <vListInsertEnd>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:780

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
800021a8:	9381a783          	lw	a5,-1736(gp) # 800088a8 <uxTasksDeleted>
800021ac:	00178713          	addi	a4,a5,1
800021b0:	92e1ac23          	sw	a4,-1736(gp) # 800088a8 <uxTasksDeleted>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:784

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
800021b4:	9581a783          	lw	a5,-1704(gp) # 800088c8 <uxTaskNumber>
800021b8:	00178713          	addi	a4,a5,1
800021bc:	94e1ac23          	sw	a4,-1704(gp) # 800088c8 <uxTaskNumber>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:788

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
800021c0:	cc4ff0ef          	jal	ra,80001684 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:792

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
800021c4:	9481a783          	lw	a5,-1720(gp) # 800088b8 <xSchedulerRunning>
800021c8:	02078a63          	beqz	a5,800021fc <vTaskDelete+0xc8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:794
		{
			if( pxTCB == pxCurrentTCB )
800021cc:	92c1a783          	lw	a5,-1748(gp) # 8000889c <pxCurrentTCB>
800021d0:	fec42703          	lw	a4,-20(s0)
800021d4:	00f71e63          	bne	a4,a5,800021f0 <vTaskDelete+0xbc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:796
			{
				configASSERT( uxSchedulerSuspended == 0 );
800021d8:	9601a783          	lw	a5,-1696(gp) # 800088d0 <uxSchedulerSuspended>
800021dc:	00078663          	beqz	a5,800021e8 <vTaskDelete+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:796 (discriminator 1)
800021e0:	30047073          	csrci	mstatus,8
800021e4:	0000006f          	j	800021e4 <vTaskDelete+0xb0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:804
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
800021e8:	951ff0ef          	jal	ra,80001b38 <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:817
					prvResetNextTaskUnblockTime();
				}
				taskEXIT_CRITICAL();
			}
		}
	}
800021ec:	0100006f          	j	800021fc <vTaskDelete+0xc8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:810
				taskENTER_CRITICAL();
800021f0:	c60ff0ef          	jal	ra,80001650 <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:812
					prvResetNextTaskUnblockTime();
800021f4:	491000ef          	jal	ra,80002e84 <prvResetNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:814
				taskEXIT_CRITICAL();
800021f8:	c8cff0ef          	jal	ra,80001684 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:817
	}
800021fc:	00000013          	nop
80002200:	02c12083          	lw	ra,44(sp)
80002204:	02812403          	lw	s0,40(sp)
80002208:	03010113          	addi	sp,sp,48
8000220c:	00008067          	ret

80002210 <vTaskDelay>:
vTaskDelay():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:921
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
80002210:	fd010113          	addi	sp,sp,-48
80002214:	02112623          	sw	ra,44(sp)
80002218:	02812423          	sw	s0,40(sp)
8000221c:	03010413          	addi	s0,sp,48
80002220:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:923
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
80002224:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:927


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
80002228:	fdc42783          	lw	a5,-36(s0)
8000222c:	04078463          	beqz	a5,80002274 <vTaskDelay+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:929
		{
			configASSERT( uxSchedulerSuspended == 0 );
80002230:	9601a783          	lw	a5,-1696(gp) # 800088d0 <uxSchedulerSuspended>
80002234:	00078663          	beqz	a5,80002240 <vTaskDelay+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:929 (discriminator 1)
80002238:	30047073          	csrci	mstatus,8
8000223c:	0000006f          	j	8000223c <vTaskDelay+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:930
			vTaskSuspendAll();
80002240:	358000ef          	jal	ra,80002598 <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:944
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
80002244:	9401a783          	lw	a5,-1728(gp) # 800088b0 <xTickCount>
80002248:	fdc42703          	lw	a4,-36(s0)
8000224c:	00f707b3          	add	a5,a4,a5
80002250:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:949

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80002254:	92c1a783          	lw	a5,-1748(gp) # 8000889c <pxCurrentTCB>
80002258:	00478793          	addi	a5,a5,4
8000225c:	00078513          	mv	a0,a5
80002260:	ae9ff0ef          	jal	ra,80001d48 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:960
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
80002264:	fe842503          	lw	a0,-24(s0)
80002268:	295000ef          	jal	ra,80002cfc <prvAddCurrentTaskToDelayedList>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:962
			}
			xAlreadyYielded = xTaskResumeAll();
8000226c:	354000ef          	jal	ra,800025c0 <xTaskResumeAll>
80002270:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:971
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
80002274:	fec42783          	lw	a5,-20(s0)
80002278:	00079463          	bnez	a5,80002280 <vTaskDelay+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:973
		{
			portYIELD_WITHIN_API();
8000227c:	8bdff0ef          	jal	ra,80001b38 <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:979
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80002280:	00000013          	nop
80002284:	02c12083          	lw	ra,44(sp)
80002288:	02812403          	lw	s0,40(sp)
8000228c:	03010113          	addi	sp,sp,48
80002290:	00008067          	ret

80002294 <vTaskSuspend>:
vTaskSuspend():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1283
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
80002294:	fd010113          	addi	sp,sp,-48
80002298:	02112623          	sw	ra,44(sp)
8000229c:	02812423          	sw	s0,40(sp)
800022a0:	03010413          	addi	s0,sp,48
800022a4:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1286
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
800022a8:	ba8ff0ef          	jal	ra,80001650 <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1290
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
800022ac:	fdc42783          	lw	a5,-36(s0)
800022b0:	00079663          	bnez	a5,800022bc <vTaskSuspend+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1290 (discriminator 1)
800022b4:	92c1a783          	lw	a5,-1748(gp) # 8000889c <pxCurrentTCB>
800022b8:	0080006f          	j	800022c0 <vTaskSuspend+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1290 (discriminator 2)
800022bc:	fdc42783          	lw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1290 (discriminator 4)
800022c0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1296 (discriminator 4)

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
800022c4:	fec42783          	lw	a5,-20(s0)
800022c8:	00478793          	addi	a5,a5,4
800022cc:	00078513          	mv	a0,a5
800022d0:	a79ff0ef          	jal	ra,80001d48 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1306 (discriminator 4)
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
800022d4:	fec42783          	lw	a5,-20(s0)
800022d8:	0287a783          	lw	a5,40(a5)
800022dc:	00078a63          	beqz	a5,800022f0 <vTaskSuspend+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1308
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
800022e0:	fec42783          	lw	a5,-20(s0)
800022e4:	01878793          	addi	a5,a5,24
800022e8:	00078513          	mv	a0,a5
800022ec:	a5dff0ef          	jal	ra,80001d48 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1315
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
800022f0:	fec42783          	lw	a5,-20(s0)
800022f4:	00478793          	addi	a5,a5,4
800022f8:	00078593          	mv	a1,a5
800022fc:	800227b7          	lui	a5,0x80022
80002300:	9c478513          	addi	a0,a5,-1596 # 800219c4 <__stack_top+0xfffde7c4>
80002304:	8e9ff0ef          	jal	ra,80001bec <vListInsertEnd>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1317
		}
		taskEXIT_CRITICAL();
80002308:	b7cff0ef          	jal	ra,80001684 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1319

		if( pxTCB == pxCurrentTCB )
8000230c:	92c1a783          	lw	a5,-1748(gp) # 8000889c <pxCurrentTCB>
80002310:	fec42703          	lw	a4,-20(s0)
80002314:	04f71263          	bne	a4,a5,80002358 <vTaskSuspend+0xc4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1321
		{
			if( xSchedulerRunning != pdFALSE )
80002318:	9481a783          	lw	a5,-1720(gp) # 800088b8 <xSchedulerRunning>
8000231c:	00078e63          	beqz	a5,80002338 <vTaskSuspend+0xa4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1324
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
80002320:	9601a783          	lw	a5,-1696(gp) # 800088d0 <uxSchedulerSuspended>
80002324:	00078663          	beqz	a5,80002330 <vTaskSuspend+0x9c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1324 (discriminator 1)
80002328:	30047073          	csrci	mstatus,8
8000232c:	0000006f          	j	8000232c <vTaskSuspend+0x98>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1325
				portYIELD_WITHIN_API();
80002330:	809ff0ef          	jal	ra,80001b38 <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1364
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
80002334:	0380006f          	j	8000236c <vTaskSuspend+0xd8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1332
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
80002338:	800227b7          	lui	a5,0x80022
8000233c:	9c47a703          	lw	a4,-1596(a5) # 800219c4 <__stack_top+0xfffde7c4>
80002340:	93c1a783          	lw	a5,-1732(gp) # 800088ac <uxCurrentNumberOfTasks>
80002344:	00f71663          	bne	a4,a5,80002350 <vTaskSuspend+0xbc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1338
					pxCurrentTCB = NULL;
80002348:	9201a623          	sw	zero,-1748(gp) # 8000889c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1364
	}
8000234c:	0200006f          	j	8000236c <vTaskSuspend+0xd8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1342
					vTaskSwitchContext();
80002350:	5f4000ef          	jal	ra,80002944 <vTaskSwitchContext>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1364
	}
80002354:	0180006f          	j	8000236c <vTaskSuspend+0xd8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1348
			if( xSchedulerRunning != pdFALSE )
80002358:	9481a783          	lw	a5,-1720(gp) # 800088b8 <xSchedulerRunning>
8000235c:	00078863          	beqz	a5,8000236c <vTaskSuspend+0xd8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1353
				taskENTER_CRITICAL();
80002360:	af0ff0ef          	jal	ra,80001650 <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1355
					prvResetNextTaskUnblockTime();
80002364:	321000ef          	jal	ra,80002e84 <prvResetNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1357
				taskEXIT_CRITICAL();
80002368:	b1cff0ef          	jal	ra,80001684 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1364
	}
8000236c:	00000013          	nop
80002370:	02c12083          	lw	ra,44(sp)
80002374:	02812403          	lw	s0,40(sp)
80002378:	03010113          	addi	sp,sp,48
8000237c:	00008067          	ret

80002380 <prvTaskIsTaskSuspended>:
prvTaskIsTaskSuspended():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1372
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
80002380:	fd010113          	addi	sp,sp,-48
80002384:	02812623          	sw	s0,44(sp)
80002388:	03010413          	addi	s0,sp,48
8000238c:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1373
	BaseType_t xReturn = pdFALSE;
80002390:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1374
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
80002394:	fdc42783          	lw	a5,-36(s0)
80002398:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1380

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
8000239c:	fdc42783          	lw	a5,-36(s0)
800023a0:	00079663          	bnez	a5,800023ac <prvTaskIsTaskSuspended+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1380 (discriminator 1)
800023a4:	30047073          	csrci	mstatus,8
800023a8:	0000006f          	j	800023a8 <prvTaskIsTaskSuspended+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1383

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
800023ac:	fe842783          	lw	a5,-24(s0)
800023b0:	0147a703          	lw	a4,20(a5)
800023b4:	800227b7          	lui	a5,0x80022
800023b8:	9c478793          	addi	a5,a5,-1596 # 800219c4 <__stack_top+0xfffde7c4>
800023bc:	00f71663          	bne	a4,a5,800023c8 <prvTaskIsTaskSuspended+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1383 (discriminator 1)
800023c0:	00100793          	li	a5,1
800023c4:	0080006f          	j	800023cc <prvTaskIsTaskSuspended+0x4c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1383 (discriminator 2)
800023c8:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1383 (discriminator 4)
800023cc:	02078e63          	beqz	a5,80002408 <prvTaskIsTaskSuspended+0x88>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1386
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
800023d0:	fe842783          	lw	a5,-24(s0)
800023d4:	0287a703          	lw	a4,40(a5)
800023d8:	800227b7          	lui	a5,0x80022
800023dc:	99c78793          	addi	a5,a5,-1636 # 8002199c <__stack_top+0xfffde79c>
800023e0:	02f70463          	beq	a4,a5,80002408 <prvTaskIsTaskSuspended+0x88>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1390
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
800023e4:	fe842783          	lw	a5,-24(s0)
800023e8:	0287a783          	lw	a5,40(a5)
800023ec:	00079663          	bnez	a5,800023f8 <prvTaskIsTaskSuspended+0x78>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1390 (discriminator 1)
800023f0:	00100793          	li	a5,1
800023f4:	0080006f          	j	800023fc <prvTaskIsTaskSuspended+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1390 (discriminator 2)
800023f8:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1390 (discriminator 4)
800023fc:	00078663          	beqz	a5,80002408 <prvTaskIsTaskSuspended+0x88>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1392
				{
					xReturn = pdTRUE;
80002400:	00100793          	li	a5,1
80002404:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1409
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
80002408:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1410
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
8000240c:	00078513          	mv	a0,a5
80002410:	02c12403          	lw	s0,44(sp)
80002414:	03010113          	addi	sp,sp,48
80002418:	00008067          	ret

8000241c <vTaskResume>:
vTaskResume():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1418
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
8000241c:	fd010113          	addi	sp,sp,-48
80002420:	02112623          	sw	ra,44(sp)
80002424:	02812423          	sw	s0,40(sp)
80002428:	03010413          	addi	s0,sp,48
8000242c:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1419
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
80002430:	fdc42783          	lw	a5,-36(s0)
80002434:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1422

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
80002438:	fdc42783          	lw	a5,-36(s0)
8000243c:	00079663          	bnez	a5,80002448 <vTaskResume+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1422 (discriminator 1)
80002440:	30047073          	csrci	mstatus,8
80002444:	0000006f          	j	80002444 <vTaskResume+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1426

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
80002448:	fec42783          	lw	a5,-20(s0)
8000244c:	0a078463          	beqz	a5,800024f4 <vTaskResume+0xd8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1426 (discriminator 1)
80002450:	92c1a783          	lw	a5,-1748(gp) # 8000889c <pxCurrentTCB>
80002454:	fec42703          	lw	a4,-20(s0)
80002458:	08f70e63          	beq	a4,a5,800024f4 <vTaskResume+0xd8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1428
		{
			taskENTER_CRITICAL();
8000245c:	9f4ff0ef          	jal	ra,80001650 <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1430
			{
				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
80002460:	fec42503          	lw	a0,-20(s0)
80002464:	f1dff0ef          	jal	ra,80002380 <prvTaskIsTaskSuspended>
80002468:	00050713          	mv	a4,a0
8000246c:	00100793          	li	a5,1
80002470:	08f71063          	bne	a4,a5,800024f0 <vTaskResume+0xd4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1436
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
80002474:	fec42783          	lw	a5,-20(s0)
80002478:	00478793          	addi	a5,a5,4
8000247c:	00078513          	mv	a0,a5
80002480:	8c9ff0ef          	jal	ra,80001d48 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1437
					prvAddTaskToReadyList( pxTCB );
80002484:	fec42783          	lw	a5,-20(s0)
80002488:	02c7a703          	lw	a4,44(a5)
8000248c:	9441a783          	lw	a5,-1724(gp) # 800088b4 <uxTopReadyPriority>
80002490:	00e7f863          	bleu	a4,a5,800024a0 <vTaskResume+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1437 (discriminator 1)
80002494:	fec42783          	lw	a5,-20(s0)
80002498:	02c7a703          	lw	a4,44(a5)
8000249c:	94e1a223          	sw	a4,-1724(gp) # 800088b4 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1437 (discriminator 3)
800024a0:	fec42783          	lw	a5,-20(s0)
800024a4:	02c7a703          	lw	a4,44(a5)
800024a8:	00070793          	mv	a5,a4
800024ac:	00279793          	slli	a5,a5,0x2
800024b0:	00e787b3          	add	a5,a5,a4
800024b4:	00279793          	slli	a5,a5,0x2
800024b8:	80022737          	lui	a4,0x80022
800024bc:	91070713          	addi	a4,a4,-1776 # 80021910 <__stack_top+0xfffde710>
800024c0:	00e78733          	add	a4,a5,a4
800024c4:	fec42783          	lw	a5,-20(s0)
800024c8:	00478793          	addi	a5,a5,4
800024cc:	00078593          	mv	a1,a5
800024d0:	00070513          	mv	a0,a4
800024d4:	f18ff0ef          	jal	ra,80001bec <vListInsertEnd>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1440 (discriminator 3)

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
800024d8:	fec42783          	lw	a5,-20(s0)
800024dc:	02c7a703          	lw	a4,44(a5)
800024e0:	92c1a783          	lw	a5,-1748(gp) # 8000889c <pxCurrentTCB>
800024e4:	02c7a783          	lw	a5,44(a5)
800024e8:	00f76463          	bltu	a4,a5,800024f0 <vTaskResume+0xd4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1445
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
800024ec:	e4cff0ef          	jal	ra,80001b38 <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1457
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
800024f0:	994ff0ef          	jal	ra,80001684 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1463
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
800024f4:	00000013          	nop
800024f8:	02c12083          	lw	ra,44(sp)
800024fc:	02812403          	lw	s0,40(sp)
80002500:	03010113          	addi	sp,sp,48
80002504:	00008067          	ret

80002508 <vTaskStartScheduler>:
vTaskStartScheduler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1542

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
80002508:	fe010113          	addi	sp,sp,-32
8000250c:	00112e23          	sw	ra,28(sp)
80002510:	00812c23          	sw	s0,24(sp)
80002514:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1555
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
80002518:	00000893          	li	a7,0
8000251c:	00000813          	li	a6,0
80002520:	00000793          	li	a5,0
80002524:	00000713          	li	a4,0
80002528:	00000693          	li	a3,0
8000252c:	40000613          	li	a2,1024
80002530:	800085b7          	lui	a1,0x80008
80002534:	f4858593          	addi	a1,a1,-184 # 80007f48 <__stack_top+0xfffc4d48>
80002538:	80003537          	lui	a0,0x80003
8000253c:	a3050513          	addi	a0,a0,-1488 # 80002a30 <__stack_top+0xfffbf830>
80002540:	9d9ff0ef          	jal	ra,80001f18 <xTaskGenericCreate>
80002544:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1572
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
80002548:	fec42703          	lw	a4,-20(s0)
8000254c:	00100793          	li	a5,1
80002550:	02f71263          	bne	a4,a5,80002574 <vTaskStartScheduler+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1579
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
80002554:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1589
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
80002558:	fff00713          	li	a4,-1
8000255c:	94e1ae23          	sw	a4,-1700(gp) # 800088cc <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1590
		xSchedulerRunning = pdTRUE;
80002560:	00100713          	li	a4,1
80002564:	94e1a423          	sw	a4,-1720(gp) # 800088b8 <xSchedulerRunning>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1591
		xTickCount = ( TickType_t ) 0U;
80002568:	9401a023          	sw	zero,-1728(gp) # 800088b0 <xTickCount>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1600
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
8000256c:	c94ff0ef          	jal	ra,80001a00 <xPortStartScheduler>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
80002570:	0140006f          	j	80002584 <vTaskStartScheduler+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615
		configASSERT( xReturn );
80002574:	fec42783          	lw	a5,-20(s0)
80002578:	00079663          	bnez	a5,80002584 <vTaskStartScheduler+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 1)
8000257c:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 2)
80002580:	0000006f          	j	80002580 <vTaskStartScheduler+0x78>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
}
80002584:	00000013          	nop
80002588:	01c12083          	lw	ra,28(sp)
8000258c:	01812403          	lw	s0,24(sp)
80002590:	02010113          	addi	sp,sp,32
80002594:	00008067          	ret

80002598 <vTaskSuspendAll>:
vTaskSuspendAll():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1632
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
80002598:	ff010113          	addi	sp,sp,-16
8000259c:	00812623          	sw	s0,12(sp)
800025a0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1637
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
800025a4:	9601a783          	lw	a5,-1696(gp) # 800088d0 <uxSchedulerSuspended>
800025a8:	00178713          	addi	a4,a5,1
800025ac:	96e1a023          	sw	a4,-1696(gp) # 800088d0 <uxSchedulerSuspended>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1638
}
800025b0:	00000013          	nop
800025b4:	00c12403          	lw	s0,12(sp)
800025b8:	01010113          	addi	sp,sp,16
800025bc:	00008067          	ret

800025c0 <xTaskResumeAll>:
xTaskResumeAll():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1670

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
800025c0:	fe010113          	addi	sp,sp,-32
800025c4:	00112e23          	sw	ra,28(sp)
800025c8:	00812c23          	sw	s0,24(sp)
800025cc:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1672
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
800025d0:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
800025d4:	9601a783          	lw	a5,-1696(gp) # 800088d0 <uxSchedulerSuspended>
800025d8:	00079663          	bnez	a5,800025e4 <xTaskResumeAll+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676 (discriminator 1)
800025dc:	30047073          	csrci	mstatus,8
800025e0:	0000006f          	j	800025e0 <xTaskResumeAll+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1683
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
800025e4:	86cff0ef          	jal	ra,80001650 <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1685
	{
		--uxSchedulerSuspended;
800025e8:	9601a783          	lw	a5,-1696(gp) # 800088d0 <uxSchedulerSuspended>
800025ec:	fff78713          	addi	a4,a5,-1
800025f0:	96e1a023          	sw	a4,-1696(gp) # 800088d0 <uxSchedulerSuspended>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1687

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
800025f4:	9601a783          	lw	a5,-1696(gp) # 800088d0 <uxSchedulerSuspended>
800025f8:	10079663          	bnez	a5,80002704 <xTaskResumeAll+0x144>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1689
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
800025fc:	93c1a783          	lw	a5,-1732(gp) # 800088ac <uxCurrentNumberOfTasks>
80002600:	10078263          	beqz	a5,80002704 <xTaskResumeAll+0x144>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
80002604:	0a80006f          	j	800026ac <xTaskResumeAll+0xec>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1695
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
80002608:	800227b7          	lui	a5,0x80022
8000260c:	99c78793          	addi	a5,a5,-1636 # 8002199c <__stack_top+0xfffde79c>
80002610:	00c7a783          	lw	a5,12(a5)
80002614:	00c7a783          	lw	a5,12(a5)
80002618:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1696
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
8000261c:	fe842783          	lw	a5,-24(s0)
80002620:	01878793          	addi	a5,a5,24
80002624:	00078513          	mv	a0,a5
80002628:	f20ff0ef          	jal	ra,80001d48 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1697
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
8000262c:	fe842783          	lw	a5,-24(s0)
80002630:	00478793          	addi	a5,a5,4
80002634:	00078513          	mv	a0,a5
80002638:	f10ff0ef          	jal	ra,80001d48 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698
					prvAddTaskToReadyList( pxTCB );
8000263c:	fe842783          	lw	a5,-24(s0)
80002640:	02c7a703          	lw	a4,44(a5)
80002644:	9441a783          	lw	a5,-1724(gp) # 800088b4 <uxTopReadyPriority>
80002648:	00e7f863          	bleu	a4,a5,80002658 <xTaskResumeAll+0x98>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 1)
8000264c:	fe842783          	lw	a5,-24(s0)
80002650:	02c7a703          	lw	a4,44(a5)
80002654:	94e1a223          	sw	a4,-1724(gp) # 800088b4 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 3)
80002658:	fe842783          	lw	a5,-24(s0)
8000265c:	02c7a703          	lw	a4,44(a5)
80002660:	00070793          	mv	a5,a4
80002664:	00279793          	slli	a5,a5,0x2
80002668:	00e787b3          	add	a5,a5,a4
8000266c:	00279793          	slli	a5,a5,0x2
80002670:	80022737          	lui	a4,0x80022
80002674:	91070713          	addi	a4,a4,-1776 # 80021910 <__stack_top+0xfffde710>
80002678:	00e78733          	add	a4,a5,a4
8000267c:	fe842783          	lw	a5,-24(s0)
80002680:	00478793          	addi	a5,a5,4
80002684:	00078593          	mv	a1,a5
80002688:	00070513          	mv	a0,a4
8000268c:	d60ff0ef          	jal	ra,80001bec <vListInsertEnd>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1702 (discriminator 3)

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80002690:	fe842783          	lw	a5,-24(s0)
80002694:	02c7a703          	lw	a4,44(a5)
80002698:	92c1a783          	lw	a5,-1748(gp) # 8000889c <pxCurrentTCB>
8000269c:	02c7a783          	lw	a5,44(a5)
800026a0:	00f76663          	bltu	a4,a5,800026ac <xTaskResumeAll+0xec>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1704
					{
						xYieldPending = pdTRUE;
800026a4:	00100713          	li	a4,1
800026a8:	94e1a823          	sw	a4,-1712(gp) # 800088c0 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
800026ac:	800227b7          	lui	a5,0x80022
800026b0:	99c7a783          	lw	a5,-1636(a5) # 8002199c <__stack_top+0xfffde79c>
800026b4:	f4079ae3          	bnez	a5,80002608 <xTaskResumeAll+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1716

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
800026b8:	94c1a783          	lw	a5,-1716(gp) # 800088bc <uxPendedTicks>
800026bc:	02078863          	beqz	a5,800026ec <xTaskResumeAll+0x12c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
800026c0:	0240006f          	j	800026e4 <xTaskResumeAll+0x124>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1720
					{
						if( xTaskIncrementTick() != pdFALSE )
800026c4:	094000ef          	jal	ra,80002758 <xTaskIncrementTick>
800026c8:	00050793          	mv	a5,a0
800026cc:	00078663          	beqz	a5,800026d8 <xTaskResumeAll+0x118>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1722
						{
							xYieldPending = pdTRUE;
800026d0:	00100713          	li	a4,1
800026d4:	94e1a823          	sw	a4,-1712(gp) # 800088c0 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1728
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
800026d8:	94c1a783          	lw	a5,-1716(gp) # 800088bc <uxPendedTicks>
800026dc:	fff78713          	addi	a4,a5,-1
800026e0:	94e1a623          	sw	a4,-1716(gp) # 800088bc <uxPendedTicks>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
					while( uxPendedTicks > ( UBaseType_t ) 0U )
800026e4:	94c1a783          	lw	a5,-1716(gp) # 800088bc <uxPendedTicks>
800026e8:	fc079ee3          	bnez	a5,800026c4 <xTaskResumeAll+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1736
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
800026ec:	9501a703          	lw	a4,-1712(gp) # 800088c0 <xYieldPending>
800026f0:	00100793          	li	a5,1
800026f4:	00f71863          	bne	a4,a5,80002704 <xTaskResumeAll+0x144>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1740
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
800026f8:	00100793          	li	a5,1
800026fc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1743
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
80002700:	c38ff0ef          	jal	ra,80001b38 <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1756
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
80002704:	f81fe0ef          	jal	ra,80001684 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1758

	return xAlreadyYielded;
80002708:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1759
}
8000270c:	00078513          	mv	a0,a5
80002710:	01c12083          	lw	ra,28(sp)
80002714:	01812403          	lw	s0,24(sp)
80002718:	02010113          	addi	sp,sp,32
8000271c:	00008067          	ret

80002720 <xTaskGetTickCount>:
xTaskGetTickCount():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1763
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
80002720:	fe010113          	addi	sp,sp,-32
80002724:	00112e23          	sw	ra,28(sp)
80002728:	00812c23          	sw	s0,24(sp)
8000272c:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1767
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
80002730:	f21fe0ef          	jal	ra,80001650 <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1769
	{
		xTicks = xTickCount;
80002734:	9401a783          	lw	a5,-1728(gp) # 800088b0 <xTickCount>
80002738:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1771
	}
	portTICK_TYPE_EXIT_CRITICAL();
8000273c:	f49fe0ef          	jal	ra,80001684 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1773

	return xTicks;
80002740:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1774
}
80002744:	00078513          	mv	a0,a5
80002748:	01c12083          	lw	ra,28(sp)
8000274c:	01812403          	lw	s0,24(sp)
80002750:	02010113          	addi	sp,sp,32
80002754:	00008067          	ret

80002758 <xTaskIncrementTick>:
xTaskIncrementTick():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1938

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
80002758:	fd010113          	addi	sp,sp,-48
8000275c:	02112623          	sw	ra,44(sp)
80002760:	02812423          	sw	s0,40(sp)
80002764:	03010413          	addi	s0,sp,48
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1941
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
80002768:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1947

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
8000276c:	9601a783          	lw	a5,-1696(gp) # 800088d0 <uxSchedulerSuspended>
80002770:	1a079063          	bnez	a5,80002910 <xTaskIncrementTick+0x1b8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1951
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
80002774:	9401a783          	lw	a5,-1728(gp) # 800088b0 <xTickCount>
80002778:	00178713          	addi	a4,a5,1
8000277c:	94e1a023          	sw	a4,-1728(gp) # 800088b0 <xTickCount>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1956

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
80002780:	9401a783          	lw	a5,-1728(gp) # 800088b0 <xTickCount>
80002784:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1958

			if( xConstTickCount == ( TickType_t ) 0U )
80002788:	fe842783          	lw	a5,-24(s0)
8000278c:	04079063          	bnez	a5,800027cc <xTaskIncrementTick+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960
			{
				taskSWITCH_DELAYED_LISTS();
80002790:	9301a783          	lw	a5,-1744(gp) # 800088a0 <pxDelayedTaskList>
80002794:	0007a783          	lw	a5,0(a5)
80002798:	00078663          	beqz	a5,800027a4 <xTaskIncrementTick+0x4c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 1)
8000279c:	30047073          	csrci	mstatus,8
800027a0:	0000006f          	j	800027a0 <xTaskIncrementTick+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 2)
800027a4:	9301a783          	lw	a5,-1744(gp) # 800088a0 <pxDelayedTaskList>
800027a8:	fef42223          	sw	a5,-28(s0)
800027ac:	9341a703          	lw	a4,-1740(gp) # 800088a4 <pxOverflowDelayedTaskList>
800027b0:	92e1a823          	sw	a4,-1744(gp) # 800088a0 <pxDelayedTaskList>
800027b4:	fe442703          	lw	a4,-28(s0)
800027b8:	92e1aa23          	sw	a4,-1740(gp) # 800088a4 <pxOverflowDelayedTaskList>
800027bc:	9541a783          	lw	a5,-1708(gp) # 800088c4 <xNumOfOverflows>
800027c0:	00178713          	addi	a4,a5,1
800027c4:	94e1aa23          	sw	a4,-1708(gp) # 800088c4 <xNumOfOverflows>
800027c8:	6bc000ef          	jal	ra,80002e84 <prvResetNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1971

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
800027cc:	95c1a783          	lw	a5,-1700(gp) # 800088cc <xNextTaskUnblockTime>
800027d0:	fe842703          	lw	a4,-24(s0)
800027d4:	10f76063          	bltu	a4,a5,800028d4 <xTaskIncrementTick+0x17c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
800027d8:	9301a783          	lw	a5,-1744(gp) # 800088a0 <pxDelayedTaskList>
800027dc:	0007a783          	lw	a5,0(a5)
800027e0:	00079663          	bnez	a5,800027ec <xTaskIncrementTick+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 1)
800027e4:	00100793          	li	a5,1
800027e8:	0080006f          	j	800027f0 <xTaskIncrementTick+0x98>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 2)
800027ec:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 4)
800027f0:	00078863          	beqz	a5,80002800 <xTaskIncrementTick+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1982
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
800027f4:	fff00713          	li	a4,-1
800027f8:	94e1ae23          	sw	a4,-1700(gp) # 800088cc <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1983
						break;
800027fc:	0d80006f          	j	800028d4 <xTaskIncrementTick+0x17c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1991
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80002800:	9301a783          	lw	a5,-1744(gp) # 800088a0 <pxDelayedTaskList>
80002804:	00c7a783          	lw	a5,12(a5)
80002808:	00c7a783          	lw	a5,12(a5)
8000280c:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1992
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
80002810:	fe042783          	lw	a5,-32(s0)
80002814:	0047a783          	lw	a5,4(a5)
80002818:	fcf42e23          	sw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1994

						if( xConstTickCount < xItemValue )
8000281c:	fe842703          	lw	a4,-24(s0)
80002820:	fdc42783          	lw	a5,-36(s0)
80002824:	00f77863          	bleu	a5,a4,80002834 <xTaskIncrementTick+0xdc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2001
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
80002828:	fdc42703          	lw	a4,-36(s0)
8000282c:	94e1ae23          	sw	a4,-1700(gp) # 800088cc <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2002
							break;
80002830:	0a40006f          	j	800028d4 <xTaskIncrementTick+0x17c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2010
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80002834:	fe042783          	lw	a5,-32(s0)
80002838:	00478793          	addi	a5,a5,4
8000283c:	00078513          	mv	a0,a5
80002840:	d08ff0ef          	jal	ra,80001d48 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2014

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
80002844:	fe042783          	lw	a5,-32(s0)
80002848:	0287a783          	lw	a5,40(a5)
8000284c:	00078a63          	beqz	a5,80002860 <xTaskIncrementTick+0x108>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2016
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002850:	fe042783          	lw	a5,-32(s0)
80002854:	01878793          	addi	a5,a5,24
80002858:	00078513          	mv	a0,a5
8000285c:	cecff0ef          	jal	ra,80001d48 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
80002860:	fe042783          	lw	a5,-32(s0)
80002864:	02c7a703          	lw	a4,44(a5)
80002868:	9441a783          	lw	a5,-1724(gp) # 800088b4 <uxTopReadyPriority>
8000286c:	00e7f863          	bleu	a4,a5,8000287c <xTaskIncrementTick+0x124>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 1)
80002870:	fe042783          	lw	a5,-32(s0)
80002874:	02c7a703          	lw	a4,44(a5)
80002878:	94e1a223          	sw	a4,-1724(gp) # 800088b4 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 3)
8000287c:	fe042783          	lw	a5,-32(s0)
80002880:	02c7a703          	lw	a4,44(a5)
80002884:	00070793          	mv	a5,a4
80002888:	00279793          	slli	a5,a5,0x2
8000288c:	00e787b3          	add	a5,a5,a4
80002890:	00279793          	slli	a5,a5,0x2
80002894:	80022737          	lui	a4,0x80022
80002898:	91070713          	addi	a4,a4,-1776 # 80021910 <__stack_top+0xfffde710>
8000289c:	00e78733          	add	a4,a5,a4
800028a0:	fe042783          	lw	a5,-32(s0)
800028a4:	00478793          	addi	a5,a5,4
800028a8:	00078593          	mv	a1,a5
800028ac:	00070513          	mv	a0,a4
800028b0:	b3cff0ef          	jal	ra,80001bec <vListInsertEnd>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2035 (discriminator 3)
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
800028b4:	fe042783          	lw	a5,-32(s0)
800028b8:	02c7a703          	lw	a4,44(a5)
800028bc:	92c1a783          	lw	a5,-1748(gp) # 8000889c <pxCurrentTCB>
800028c0:	02c7a783          	lw	a5,44(a5)
800028c4:	f0f76ae3          	bltu	a4,a5,800027d8 <xTaskIncrementTick+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2037
							{
								xSwitchRequired = pdTRUE;
800028c8:	00100793          	li	a5,1
800028cc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
800028d0:	f09ff06f          	j	800027d8 <xTaskIncrementTick+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2055
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
800028d4:	92c1a783          	lw	a5,-1748(gp) # 8000889c <pxCurrentTCB>
800028d8:	02c7a703          	lw	a4,44(a5)
800028dc:	800226b7          	lui	a3,0x80022
800028e0:	00070793          	mv	a5,a4
800028e4:	00279793          	slli	a5,a5,0x2
800028e8:	00e787b3          	add	a5,a5,a4
800028ec:	00279793          	slli	a5,a5,0x2
800028f0:	91068713          	addi	a4,a3,-1776 # 80021910 <__stack_top+0xfffde710>
800028f4:	00e787b3          	add	a5,a5,a4
800028f8:	0007a703          	lw	a4,0(a5)
800028fc:	00100793          	li	a5,1
80002900:	00e7fe63          	bleu	a4,a5,8000291c <xTaskIncrementTick+0x1c4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2057
			{
				xSwitchRequired = pdTRUE;
80002904:	00100793          	li	a5,1
80002908:	fef42623          	sw	a5,-20(s0)
8000290c:	0100006f          	j	8000291c <xTaskIncrementTick+0x1c4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2083
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
80002910:	94c1a783          	lw	a5,-1716(gp) # 800088bc <uxPendedTicks>
80002914:	00178713          	addi	a4,a5,1
80002918:	94e1a623          	sw	a4,-1716(gp) # 800088bc <uxPendedTicks>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2096
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
8000291c:	9501a783          	lw	a5,-1712(gp) # 800088c0 <xYieldPending>
80002920:	00078663          	beqz	a5,8000292c <xTaskIncrementTick+0x1d4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2098
		{
			xSwitchRequired = pdTRUE;
80002924:	00100793          	li	a5,1
80002928:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2107
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
8000292c:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2108
}
80002930:	00078513          	mv	a0,a5
80002934:	02c12083          	lw	ra,44(sp)
80002938:	02812403          	lw	s0,40(sp)
8000293c:	03010113          	addi	sp,sp,48
80002940:	00008067          	ret

80002944 <vTaskSwitchContext>:
vTaskSwitchContext():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2202

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
80002944:	fe010113          	addi	sp,sp,-32
80002948:	00812e23          	sw	s0,28(sp)
8000294c:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2203
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
80002950:	9601a783          	lw	a5,-1696(gp) # 800088d0 <uxSchedulerSuspended>
80002954:	00078863          	beqz	a5,80002964 <vTaskSwitchContext+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2207
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
80002958:	00100713          	li	a4,1
8000295c:	94e1a823          	sw	a4,-1712(gp) # 800088c0 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
80002960:	0c00006f          	j	80002a20 <vTaskSwitchContext+0xdc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2211
		xYieldPending = pdFALSE;
80002964:	9401a823          	sw	zero,-1712(gp) # 800088c0 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246
		taskSELECT_HIGHEST_PRIORITY_TASK();
80002968:	0200006f          	j	80002988 <vTaskSwitchContext+0x44>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 4)
8000296c:	9441a783          	lw	a5,-1724(gp) # 800088b4 <uxTopReadyPriority>
80002970:	00079663          	bnez	a5,8000297c <vTaskSwitchContext+0x38>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 1)
80002974:	30047073          	csrci	mstatus,8
80002978:	0000006f          	j	80002978 <vTaskSwitchContext+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 2)
8000297c:	9441a783          	lw	a5,-1724(gp) # 800088b4 <uxTopReadyPriority>
80002980:	fff78713          	addi	a4,a5,-1
80002984:	94e1a223          	sw	a4,-1724(gp) # 800088b4 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 3)
80002988:	9441a703          	lw	a4,-1724(gp) # 800088b4 <uxTopReadyPriority>
8000298c:	800226b7          	lui	a3,0x80022
80002990:	00070793          	mv	a5,a4
80002994:	00279793          	slli	a5,a5,0x2
80002998:	00e787b3          	add	a5,a5,a4
8000299c:	00279793          	slli	a5,a5,0x2
800029a0:	91068713          	addi	a4,a3,-1776 # 80021910 <__stack_top+0xfffde710>
800029a4:	00e787b3          	add	a5,a5,a4
800029a8:	0007a783          	lw	a5,0(a5)
800029ac:	fc0780e3          	beqz	a5,8000296c <vTaskSwitchContext+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 5)
800029b0:	9441a703          	lw	a4,-1724(gp) # 800088b4 <uxTopReadyPriority>
800029b4:	00070793          	mv	a5,a4
800029b8:	00279793          	slli	a5,a5,0x2
800029bc:	00e787b3          	add	a5,a5,a4
800029c0:	00279793          	slli	a5,a5,0x2
800029c4:	80022737          	lui	a4,0x80022
800029c8:	91070713          	addi	a4,a4,-1776 # 80021910 <__stack_top+0xfffde710>
800029cc:	00e787b3          	add	a5,a5,a4
800029d0:	fef42623          	sw	a5,-20(s0)
800029d4:	fec42783          	lw	a5,-20(s0)
800029d8:	0047a783          	lw	a5,4(a5)
800029dc:	0047a703          	lw	a4,4(a5)
800029e0:	fec42783          	lw	a5,-20(s0)
800029e4:	00e7a223          	sw	a4,4(a5)
800029e8:	fec42783          	lw	a5,-20(s0)
800029ec:	0047a703          	lw	a4,4(a5)
800029f0:	fec42783          	lw	a5,-20(s0)
800029f4:	00878793          	addi	a5,a5,8
800029f8:	00f71c63          	bne	a4,a5,80002a10 <vTaskSwitchContext+0xcc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 6)
800029fc:	fec42783          	lw	a5,-20(s0)
80002a00:	0047a783          	lw	a5,4(a5)
80002a04:	0047a703          	lw	a4,4(a5)
80002a08:	fec42783          	lw	a5,-20(s0)
80002a0c:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 8)
80002a10:	fec42783          	lw	a5,-20(s0)
80002a14:	0047a783          	lw	a5,4(a5)
80002a18:	00c7a703          	lw	a4,12(a5)
80002a1c:	92e1a623          	sw	a4,-1748(gp) # 8000889c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
}
80002a20:	00000013          	nop
80002a24:	01c12403          	lw	s0,28(sp)
80002a28:	02010113          	addi	sp,sp,32
80002a2c:	00008067          	ret

80002a30 <prvIdleTask>:
prvIdleTask():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2689
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
80002a30:	fe010113          	addi	sp,sp,-32
80002a34:	00112e23          	sw	ra,28(sp)
80002a38:	00812c23          	sw	s0,24(sp)
80002a3c:	02010413          	addi	s0,sp,32
80002a40:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
80002a44:	218000ef          	jal	ra,80002c5c <prvCheckTasksWaitingTermination>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2719

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
80002a48:	800227b7          	lui	a5,0x80022
80002a4c:	9107a703          	lw	a4,-1776(a5) # 80021910 <__stack_top+0xfffde710>
80002a50:	00100793          	li	a5,1
80002a54:	00e7f463          	bleu	a4,a5,80002a5c <prvIdleTask+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2721
			{
				taskYIELD();
80002a58:	8e0ff0ef          	jal	ra,80001b38 <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2739
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
80002a5c:	204050ef          	jal	ra,80007c60 <vApplicationIdleHook>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
		prvCheckTasksWaitingTermination();
80002a60:	fe5ff06f          	j	80002a44 <prvIdleTask+0x14>

80002a64 <prvInitialiseTCBVariables>:
prvInitialiseTCBVariables():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2832

#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80002a64:	fc010113          	addi	sp,sp,-64
80002a68:	02112e23          	sw	ra,60(sp)
80002a6c:	02812c23          	sw	s0,56(sp)
80002a70:	04010413          	addi	s0,sp,64
80002a74:	fca42e23          	sw	a0,-36(s0)
80002a78:	fcb42c23          	sw	a1,-40(s0)
80002a7c:	fcc42a23          	sw	a2,-44(s0)
80002a80:	fcd42823          	sw	a3,-48(s0)
80002a84:	00070793          	mv	a5,a4
80002a88:	fcf41723          	sh	a5,-50(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
80002a8c:	fe042623          	sw	zero,-20(s0)
80002a90:	0440006f          	j	80002ad4 <prvInitialiseTCBVariables+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2838
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
80002a94:	fd842703          	lw	a4,-40(s0)
80002a98:	fec42783          	lw	a5,-20(s0)
80002a9c:	00f707b3          	add	a5,a4,a5
80002aa0:	00078703          	lb	a4,0(a5)
80002aa4:	fdc42683          	lw	a3,-36(s0)
80002aa8:	fec42783          	lw	a5,-20(s0)
80002aac:	00f687b3          	add	a5,a3,a5
80002ab0:	02e78a23          	sb	a4,52(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2843

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
80002ab4:	fd842703          	lw	a4,-40(s0)
80002ab8:	fec42783          	lw	a5,-20(s0)
80002abc:	00f707b3          	add	a5,a4,a5
80002ac0:	00078783          	lb	a5,0(a5)
80002ac4:	02078063          	beqz	a5,80002ae4 <prvInitialiseTCBVariables+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 2)
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
80002ac8:	fec42783          	lw	a5,-20(s0)
80002acc:	00178793          	addi	a5,a5,1
80002ad0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 1)
80002ad4:	fec42703          	lw	a4,-20(s0)
80002ad8:	00f00793          	li	a5,15
80002adc:	fae7fce3          	bleu	a4,a5,80002a94 <prvInitialiseTCBVariables+0x30>
80002ae0:	0080006f          	j	80002ae8 <prvInitialiseTCBVariables+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2845
		{
			break;
80002ae4:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2855
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
80002ae8:	fdc42783          	lw	a5,-36(s0)
80002aec:	040781a3          	sb	zero,67(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2859

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
80002af0:	fd442703          	lw	a4,-44(s0)
80002af4:	00400793          	li	a5,4
80002af8:	00e7f663          	bleu	a4,a5,80002b04 <prvInitialiseTCBVariables+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2861
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
80002afc:	00400793          	li	a5,4
80002b00:	fcf42a23          	sw	a5,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2868
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
80002b04:	fdc42783          	lw	a5,-36(s0)
80002b08:	fd442703          	lw	a4,-44(s0)
80002b0c:	02e7a623          	sw	a4,44(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2871
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
80002b10:	fdc42783          	lw	a5,-36(s0)
80002b14:	fd442703          	lw	a4,-44(s0)
80002b18:	04e7a823          	sw	a4,80(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2872
		pxTCB->uxMutexesHeld = 0;
80002b1c:	fdc42783          	lw	a5,-36(s0)
80002b20:	0407aa23          	sw	zero,84(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2876
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
80002b24:	fdc42783          	lw	a5,-36(s0)
80002b28:	00478793          	addi	a5,a5,4
80002b2c:	00078513          	mv	a0,a5
80002b30:	894ff0ef          	jal	ra,80001bc4 <vListInitialiseItem>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2877
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
80002b34:	fdc42783          	lw	a5,-36(s0)
80002b38:	01878793          	addi	a5,a5,24
80002b3c:	00078513          	mv	a0,a5
80002b40:	884ff0ef          	jal	ra,80001bc4 <vListInitialiseItem>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2881

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
80002b44:	fdc42783          	lw	a5,-36(s0)
80002b48:	fdc42703          	lw	a4,-36(s0)
80002b4c:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2884

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80002b50:	00500713          	li	a4,5
80002b54:	fd442783          	lw	a5,-44(s0)
80002b58:	40f70733          	sub	a4,a4,a5
80002b5c:	fdc42783          	lw	a5,-36(s0)
80002b60:	00e7ac23          	sw	a4,24(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2885
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
80002b64:	fdc42783          	lw	a5,-36(s0)
80002b68:	fdc42703          	lw	a4,-36(s0)
80002b6c:	02e7a223          	sw	a4,36(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2889

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
80002b70:	fdc42783          	lw	a5,-36(s0)
80002b74:	0407a223          	sw	zero,68(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2927
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
80002b78:	fdc42783          	lw	a5,-36(s0)
80002b7c:	0407ac23          	sw	zero,88(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2928
		pxTCB->eNotifyState = eNotWaitingNotification;
80002b80:	fdc42783          	lw	a5,-36(s0)
80002b84:	0407ae23          	sw	zero,92(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2938
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
80002b88:	00000013          	nop
80002b8c:	03c12083          	lw	ra,60(sp)
80002b90:	03812403          	lw	s0,56(sp)
80002b94:	04010113          	addi	sp,sp,64
80002b98:	00008067          	ret

80002b9c <prvInitialiseTaskLists>:
prvInitialiseTaskLists():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:2997

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
80002b9c:	fe010113          	addi	sp,sp,-32
80002ba0:	00112e23          	sw	ra,28(sp)
80002ba4:	00812c23          	sw	s0,24(sp)
80002ba8:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
80002bac:	fe042623          	sw	zero,-20(s0)
80002bb0:	0380006f          	j	80002be8 <prvInitialiseTaskLists+0x4c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3002 (discriminator 3)
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
80002bb4:	fec42703          	lw	a4,-20(s0)
80002bb8:	00070793          	mv	a5,a4
80002bbc:	00279793          	slli	a5,a5,0x2
80002bc0:	00e787b3          	add	a5,a5,a4
80002bc4:	00279793          	slli	a5,a5,0x2
80002bc8:	80022737          	lui	a4,0x80022
80002bcc:	91070713          	addi	a4,a4,-1776 # 80021910 <__stack_top+0xfffde710>
80002bd0:	00e787b3          	add	a5,a5,a4
80002bd4:	00078513          	mv	a0,a5
80002bd8:	f89fe0ef          	jal	ra,80001b60 <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 3)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
80002bdc:	fec42783          	lw	a5,-20(s0)
80002be0:	00178793          	addi	a5,a5,1
80002be4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 1)
80002be8:	fec42703          	lw	a4,-20(s0)
80002bec:	00400793          	li	a5,4
80002bf0:	fce7f2e3          	bleu	a4,a5,80002bb4 <prvInitialiseTaskLists+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3005
	}

	vListInitialise( &xDelayedTaskList1 );
80002bf4:	800227b7          	lui	a5,0x80022
80002bf8:	97478513          	addi	a0,a5,-1676 # 80021974 <__stack_top+0xfffde774>
80002bfc:	f65fe0ef          	jal	ra,80001b60 <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3006
	vListInitialise( &xDelayedTaskList2 );
80002c00:	800227b7          	lui	a5,0x80022
80002c04:	98878513          	addi	a0,a5,-1656 # 80021988 <__stack_top+0xfffde788>
80002c08:	f59fe0ef          	jal	ra,80001b60 <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3007
	vListInitialise( &xPendingReadyList );
80002c0c:	800227b7          	lui	a5,0x80022
80002c10:	99c78513          	addi	a0,a5,-1636 # 8002199c <__stack_top+0xfffde79c>
80002c14:	f4dfe0ef          	jal	ra,80001b60 <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3011

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
80002c18:	800227b7          	lui	a5,0x80022
80002c1c:	9b078513          	addi	a0,a5,-1616 # 800219b0 <__stack_top+0xfffde7b0>
80002c20:	f41fe0ef          	jal	ra,80001b60 <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3017
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
80002c24:	800227b7          	lui	a5,0x80022
80002c28:	9c478513          	addi	a0,a5,-1596 # 800219c4 <__stack_top+0xfffde7c4>
80002c2c:	f35fe0ef          	jal	ra,80001b60 <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3023
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
80002c30:	80022737          	lui	a4,0x80022
80002c34:	97470713          	addi	a4,a4,-1676 # 80021974 <__stack_top+0xfffde774>
80002c38:	92e1a823          	sw	a4,-1744(gp) # 800088a0 <pxDelayedTaskList>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3024
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
80002c3c:	80022737          	lui	a4,0x80022
80002c40:	98870713          	addi	a4,a4,-1656 # 80021988 <__stack_top+0xfffde788>
80002c44:	92e1aa23          	sw	a4,-1740(gp) # 800088a4 <pxOverflowDelayedTaskList>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3025
}
80002c48:	00000013          	nop
80002c4c:	01c12083          	lw	ra,28(sp)
80002c50:	01812403          	lw	s0,24(sp)
80002c54:	02010113          	addi	sp,sp,32
80002c58:	00008067          	ret

80002c5c <prvCheckTasksWaitingTermination>:
prvCheckTasksWaitingTermination():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3029
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
80002c5c:	fe010113          	addi	sp,sp,-32
80002c60:	00112e23          	sw	ra,28(sp)
80002c64:	00812c23          	sw	s0,24(sp)
80002c68:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
80002c6c:	0740006f          	j	80002ce0 <prvCheckTasksWaitingTermination+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3038
		{
			vTaskSuspendAll();
80002c70:	929ff0ef          	jal	ra,80002598 <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3040
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
80002c74:	800227b7          	lui	a5,0x80022
80002c78:	9b07a783          	lw	a5,-1616(a5) # 800219b0 <__stack_top+0xfffde7b0>
80002c7c:	0017b793          	seqz	a5,a5
80002c80:	0ff7f793          	andi	a5,a5,255
80002c84:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3042
			}
			( void ) xTaskResumeAll();
80002c88:	939ff0ef          	jal	ra,800025c0 <xTaskResumeAll>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3044

			if( xListIsEmpty == pdFALSE )
80002c8c:	fec42783          	lw	a5,-20(s0)
80002c90:	04079863          	bnez	a5,80002ce0 <prvCheckTasksWaitingTermination+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3048
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
80002c94:	9bdfe0ef          	jal	ra,80001650 <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3050
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
80002c98:	800227b7          	lui	a5,0x80022
80002c9c:	9b078793          	addi	a5,a5,-1616 # 800219b0 <__stack_top+0xfffde7b0>
80002ca0:	00c7a783          	lw	a5,12(a5)
80002ca4:	00c7a783          	lw	a5,12(a5)
80002ca8:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3051
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80002cac:	fe842783          	lw	a5,-24(s0)
80002cb0:	00478793          	addi	a5,a5,4
80002cb4:	00078513          	mv	a0,a5
80002cb8:	890ff0ef          	jal	ra,80001d48 <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3052
					--uxCurrentNumberOfTasks;
80002cbc:	93c1a783          	lw	a5,-1732(gp) # 800088ac <uxCurrentNumberOfTasks>
80002cc0:	fff78713          	addi	a4,a5,-1
80002cc4:	92e1ae23          	sw	a4,-1732(gp) # 800088ac <uxCurrentNumberOfTasks>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3053
					--uxTasksDeleted;
80002cc8:	9381a783          	lw	a5,-1736(gp) # 800088a8 <uxTasksDeleted>
80002ccc:	fff78713          	addi	a4,a5,-1
80002cd0:	92e1ac23          	sw	a4,-1736(gp) # 800088a8 <uxTasksDeleted>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3055
				}
				taskEXIT_CRITICAL();
80002cd4:	9b1fe0ef          	jal	ra,80001684 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3057

				prvDeleteTCB( pxTCB );
80002cd8:	fe842503          	lw	a0,-24(s0)
80002cdc:	168000ef          	jal	ra,80002e44 <prvDeleteTCB>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
80002ce0:	9381a783          	lw	a5,-1736(gp) # 800088a8 <uxTasksDeleted>
80002ce4:	f80796e3          	bnez	a5,80002c70 <prvCheckTasksWaitingTermination+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3066
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
80002ce8:	00000013          	nop
80002cec:	01c12083          	lw	ra,28(sp)
80002cf0:	01812403          	lw	s0,24(sp)
80002cf4:	02010113          	addi	sp,sp,32
80002cf8:	00008067          	ret

80002cfc <prvAddCurrentTaskToDelayedList>:
prvAddCurrentTaskToDelayedList():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3070
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
80002cfc:	fe010113          	addi	sp,sp,-32
80002d00:	00112e23          	sw	ra,28(sp)
80002d04:	00812c23          	sw	s0,24(sp)
80002d08:	02010413          	addi	s0,sp,32
80002d0c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3072
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
80002d10:	92c1a783          	lw	a5,-1748(gp) # 8000889c <pxCurrentTCB>
80002d14:	fec42703          	lw	a4,-20(s0)
80002d18:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3074

	if( xTimeToWake < xTickCount )
80002d1c:	9401a783          	lw	a5,-1728(gp) # 800088b0 <xTickCount>
80002d20:	fec42703          	lw	a4,-20(s0)
80002d24:	02f77063          	bleu	a5,a4,80002d44 <prvAddCurrentTaskToDelayedList+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3077
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80002d28:	9341a703          	lw	a4,-1740(gp) # 800088a4 <pxOverflowDelayedTaskList>
80002d2c:	92c1a783          	lw	a5,-1748(gp) # 8000889c <pxCurrentTCB>
80002d30:	00478793          	addi	a5,a5,4
80002d34:	00078593          	mv	a1,a5
80002d38:	00070513          	mv	a0,a4
80002d3c:	f39fe0ef          	jal	ra,80001c74 <vListInsert>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
80002d40:	0300006f          	j	80002d70 <prvAddCurrentTaskToDelayedList+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3082
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80002d44:	9301a703          	lw	a4,-1744(gp) # 800088a0 <pxDelayedTaskList>
80002d48:	92c1a783          	lw	a5,-1748(gp) # 8000889c <pxCurrentTCB>
80002d4c:	00478793          	addi	a5,a5,4
80002d50:	00078593          	mv	a1,a5
80002d54:	00070513          	mv	a0,a4
80002d58:	f1dfe0ef          	jal	ra,80001c74 <vListInsert>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3087
		if( xTimeToWake < xNextTaskUnblockTime )
80002d5c:	95c1a783          	lw	a5,-1700(gp) # 800088cc <xNextTaskUnblockTime>
80002d60:	fec42703          	lw	a4,-20(s0)
80002d64:	00f77663          	bleu	a5,a4,80002d70 <prvAddCurrentTaskToDelayedList+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3089
			xNextTaskUnblockTime = xTimeToWake;
80002d68:	fec42703          	lw	a4,-20(s0)
80002d6c:	94e1ae23          	sw	a4,-1700(gp) # 800088cc <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
}
80002d70:	00000013          	nop
80002d74:	01c12083          	lw	ra,28(sp)
80002d78:	01812403          	lw	s0,24(sp)
80002d7c:	02010113          	addi	sp,sp,32
80002d80:	00008067          	ret

80002d84 <prvAllocateTCBAndStack>:
prvAllocateTCBAndStack():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3100
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
80002d84:	fd010113          	addi	sp,sp,-48
80002d88:	02112623          	sw	ra,44(sp)
80002d8c:	02812423          	sw	s0,40(sp)
80002d90:	03010413          	addi	s0,sp,48
80002d94:	00050793          	mv	a5,a0
80002d98:	fcb42c23          	sw	a1,-40(s0)
80002d9c:	fcf41f23          	sh	a5,-34(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80002da0:	fd842783          	lw	a5,-40(s0)
80002da4:	00079e63          	bnez	a5,80002dc0 <prvAllocateTCBAndStack+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 1)
80002da8:	fde45783          	lhu	a5,-34(s0)
80002dac:	00279793          	slli	a5,a5,0x2
80002db0:	00078513          	mv	a0,a5
80002db4:	d34fe0ef          	jal	ra,800012e8 <pvPortMalloc>
80002db8:	00050793          	mv	a5,a0
80002dbc:	0080006f          	j	80002dc4 <prvAllocateTCBAndStack+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 2)
80002dc0:	fd842783          	lw	a5,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 4)
80002dc4:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3134 (discriminator 4)

		if( pxStack != NULL )
80002dc8:	fe842783          	lw	a5,-24(s0)
80002dcc:	02078a63          	beqz	a5,80002e00 <prvAllocateTCBAndStack+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3138
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
80002dd0:	06000513          	li	a0,96
80002dd4:	d14fe0ef          	jal	ra,800012e8 <pvPortMalloc>
80002dd8:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3140

			if( pxNewTCB != NULL )
80002ddc:	fec42783          	lw	a5,-20(s0)
80002de0:	00078a63          	beqz	a5,80002df4 <prvAllocateTCBAndStack+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3143
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
80002de4:	fec42783          	lw	a5,-20(s0)
80002de8:	fe842703          	lw	a4,-24(s0)
80002dec:	02e7a823          	sw	a4,48(a5)
80002df0:	0140006f          	j	80002e04 <prvAllocateTCBAndStack+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3149
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
80002df4:	fe842503          	lw	a0,-24(s0)
80002df8:	eccfe0ef          	jal	ra,800014c4 <vPortFree>
80002dfc:	0080006f          	j	80002e04 <prvAllocateTCBAndStack+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3154
			}
		}
		else
		{
			pxNewTCB = NULL;
80002e00:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3159
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
80002e04:	fec42783          	lw	a5,-20(s0)
80002e08:	02078263          	beqz	a5,80002e2c <prvAllocateTCBAndStack+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3165
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
80002e0c:	fec42783          	lw	a5,-20(s0)
80002e10:	0307a703          	lw	a4,48(a5)
80002e14:	fde45783          	lhu	a5,-34(s0)
80002e18:	00279793          	slli	a5,a5,0x2
80002e1c:	00078613          	mv	a2,a5
80002e20:	0a500593          	li	a1,165
80002e24:	00070513          	mv	a0,a4
80002e28:	fb9fe0ef          	jal	ra,80001de0 <memset>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3170
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
80002e2c:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3171
}
80002e30:	00078513          	mv	a0,a5
80002e34:	02c12083          	lw	ra,44(sp)
80002e38:	02812403          	lw	s0,40(sp)
80002e3c:	03010113          	addi	sp,sp,48
80002e40:	00008067          	ret

80002e44 <prvDeleteTCB>:
prvDeleteTCB():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3310
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
80002e44:	fe010113          	addi	sp,sp,-32
80002e48:	00112e23          	sw	ra,28(sp)
80002e4c:	00812c23          	sw	s0,24(sp)
80002e50:	02010413          	addi	s0,sp,32
80002e54:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3335
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
80002e58:	fec42783          	lw	a5,-20(s0)
80002e5c:	0307a783          	lw	a5,48(a5)
80002e60:	00078513          	mv	a0,a5
80002e64:	e60fe0ef          	jal	ra,800014c4 <vPortFree>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3339
		}
		#endif

		vPortFree( pxTCB );
80002e68:	fec42503          	lw	a0,-20(s0)
80002e6c:	e58fe0ef          	jal	ra,800014c4 <vPortFree>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3340
	}
80002e70:	00000013          	nop
80002e74:	01c12083          	lw	ra,28(sp)
80002e78:	01812403          	lw	s0,24(sp)
80002e7c:	02010113          	addi	sp,sp,32
80002e80:	00008067          	ret

80002e84 <prvResetNextTaskUnblockTime>:
prvResetNextTaskUnblockTime():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3346

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
80002e84:	fe010113          	addi	sp,sp,-32
80002e88:	00812e23          	sw	s0,28(sp)
80002e8c:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80002e90:	9301a783          	lw	a5,-1744(gp) # 800088a0 <pxDelayedTaskList>
80002e94:	0007a783          	lw	a5,0(a5)
80002e98:	00079663          	bnez	a5,80002ea4 <prvResetNextTaskUnblockTime+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 1)
80002e9c:	00100793          	li	a5,1
80002ea0:	0080006f          	j	80002ea8 <prvResetNextTaskUnblockTime+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 2)
80002ea4:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 4)
80002ea8:	00078863          	beqz	a5,80002eb8 <prvResetNextTaskUnblockTime+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3355
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
80002eac:	fff00713          	li	a4,-1
80002eb0:	94e1ae23          	sw	a4,-1700(gp) # 800088cc <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
80002eb4:	0200006f          	j	80002ed4 <prvResetNextTaskUnblockTime+0x50>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3363
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80002eb8:	9301a783          	lw	a5,-1744(gp) # 800088a0 <pxDelayedTaskList>
80002ebc:	00c7a783          	lw	a5,12(a5)
80002ec0:	00c7a783          	lw	a5,12(a5)
80002ec4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3364
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
80002ec8:	fec42783          	lw	a5,-20(s0)
80002ecc:	0047a703          	lw	a4,4(a5)
80002ed0:	94e1ae23          	sw	a4,-1700(gp) # 800088cc <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
}
80002ed4:	00000013          	nop
80002ed8:	01c12403          	lw	s0,28(sp)
80002edc:	02010113          	addi	sp,sp,32
80002ee0:	00008067          	ret

80002ee4 <xTaskGetCurrentTaskHandle>:
xTaskGetCurrentTaskHandle():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3372
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
80002ee4:	fe010113          	addi	sp,sp,-32
80002ee8:	00812e23          	sw	s0,28(sp)
80002eec:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3378
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
80002ef0:	92c1a783          	lw	a5,-1748(gp) # 8000889c <pxCurrentTCB>
80002ef4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3380

		return xReturn;
80002ef8:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3381
	}
80002efc:	00078513          	mv	a0,a5
80002f00:	01c12403          	lw	s0,28(sp)
80002f04:	02010113          	addi	sp,sp,32
80002f08:	00008067          	ret

80002f0c <vTaskEnterCritical>:
vTaskEnterCritical():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3564
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
80002f0c:	ff010113          	addi	sp,sp,-16
80002f10:	00812623          	sw	s0,12(sp)
80002f14:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3565
		portDISABLE_INTERRUPTS();
80002f18:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3567

		if( xSchedulerRunning != pdFALSE )
80002f1c:	9481a783          	lw	a5,-1720(gp) # 800088b8 <xSchedulerRunning>
80002f20:	00078c63          	beqz	a5,80002f38 <vTaskEnterCritical+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3569
		{
			( pxCurrentTCB->uxCriticalNesting )++;
80002f24:	92c1a783          	lw	a5,-1748(gp) # 8000889c <pxCurrentTCB>
80002f28:	0447a703          	lw	a4,68(a5)
80002f2c:	00170713          	addi	a4,a4,1
80002f30:	04e7a223          	sw	a4,68(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3577
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
80002f34:	92c1a783          	lw	a5,-1748(gp) # 8000889c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3586
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80002f38:	00000013          	nop
80002f3c:	00c12403          	lw	s0,12(sp)
80002f40:	01010113          	addi	sp,sp,16
80002f44:	00008067          	ret

80002f48 <vTaskExitCritical>:
vTaskExitCritical():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3594
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
80002f48:	ff010113          	addi	sp,sp,-16
80002f4c:	00812623          	sw	s0,12(sp)
80002f50:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3595
		if( xSchedulerRunning != pdFALSE )
80002f54:	9481a783          	lw	a5,-1720(gp) # 800088b8 <xSchedulerRunning>
80002f58:	02078863          	beqz	a5,80002f88 <vTaskExitCritical+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3597
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
80002f5c:	92c1a783          	lw	a5,-1748(gp) # 8000889c <pxCurrentTCB>
80002f60:	0447a783          	lw	a5,68(a5)
80002f64:	02078263          	beqz	a5,80002f88 <vTaskExitCritical+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3599
			{
				( pxCurrentTCB->uxCriticalNesting )--;
80002f68:	92c1a783          	lw	a5,-1748(gp) # 8000889c <pxCurrentTCB>
80002f6c:	0447a703          	lw	a4,68(a5)
80002f70:	fff70713          	addi	a4,a4,-1
80002f74:	04e7a223          	sw	a4,68(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3601

				if( pxCurrentTCB->uxCriticalNesting == 0U )
80002f78:	92c1a783          	lw	a5,-1748(gp) # 8000889c <pxCurrentTCB>
80002f7c:	0447a783          	lw	a5,68(a5)
80002f80:	00079463          	bnez	a5,80002f88 <vTaskExitCritical+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3603
				{
					portENABLE_INTERRUPTS();
80002f84:	30046073          	csrsi	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/tasks.c:3619
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80002f88:	00000013          	nop
80002f8c:	00c12403          	lw	s0,12(sp)
80002f90:	01010113          	addi	sp,sp,16
80002f94:	00008067          	ret

80002f98 <API_RepositoryWakeUp>:
API_RepositoryWakeUp():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:10
#include "packet.h"
#include "services.h"

////////////////////////////////////////////////////////////
// Informs the Repository that the GLOBALMASTER is ready to receive the application info
void API_RepositoryWakeUp(){
80002f98:	fe010113          	addi	sp,sp,-32
80002f9c:	00112e23          	sw	ra,28(sp)
80002fa0:	00812c23          	sw	s0,24(sp)
80002fa4:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:13
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80002fa8:	198020ef          	jal	ra,80005140 <API_GetServiceSlot>
80002fac:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:14
        if(mySlot == PIPE_FULL){
80002fb0:	fec42703          	lw	a4,-20(s0)
80002fb4:	fdfe07b7          	lui	a5,0xfdfe0
80002fb8:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9cbfd>
80002fbc:	00f71463          	bne	a4,a5,80002fc4 <API_RepositoryWakeUp+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:16
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80002fc0:	240040ef          	jal	ra,80007200 <API_NI_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:18
        }
    }while(mySlot == PIPE_FULL);
80002fc4:	fec42703          	lw	a4,-20(s0)
80002fc8:	fdfe07b7          	lui	a5,0xfdfe0
80002fcc:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9cbfd>
80002fd0:	fcf70ce3          	beq	a4,a5,80002fa8 <API_RepositoryWakeUp+0x10>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:21
    //printsv("I got a free service slot!! -> ", mySlot);

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80002fd4:	800227b7          	lui	a5,0x80022
80002fd8:	fec42703          	lw	a4,-20(s0)
80002fdc:	9dc78693          	addi	a3,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
80002fe0:	00070793          	mv	a5,a4
80002fe4:	00479793          	slli	a5,a5,0x4
80002fe8:	40e787b3          	sub	a5,a5,a4
80002fec:	00279793          	slli	a5,a5,0x2
80002ff0:	00f687b3          	add	a5,a3,a5
80002ff4:	feff0737          	lui	a4,0xfeff0
80002ff8:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efaccfe>
80002ffc:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:23

    ServicePipe[mySlot].header.header       = makeAddress(0, 0) | PERIPH_SOUTH;
80003000:	00000593          	li	a1,0
80003004:	00000513          	li	a0,0
80003008:	3c0030ef          	jal	ra,800063c8 <makeAddress>
8000300c:	00050713          	mv	a4,a0
80003010:	000407b7          	lui	a5,0x40
80003014:	00f766b3          	or	a3,a4,a5
80003018:	800227b7          	lui	a5,0x80022
8000301c:	fec42703          	lw	a4,-20(s0)
80003020:	9dc78613          	addi	a2,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
80003024:	00070793          	mv	a5,a4
80003028:	00479793          	slli	a5,a5,0x4
8000302c:	40e787b3          	sub	a5,a5,a4
80003030:	00279793          	slli	a5,a5,0x2
80003034:	00f607b3          	add	a5,a2,a5
80003038:	00d7a423          	sw	a3,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:24
    ServicePipe[mySlot].header.payload_size = PKT_SERVICE_SIZE;
8000303c:	800227b7          	lui	a5,0x80022
80003040:	fec42703          	lw	a4,-20(s0)
80003044:	9dc78693          	addi	a3,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
80003048:	00070793          	mv	a5,a4
8000304c:	00479793          	slli	a5,a5,0x4
80003050:	40e787b3          	sub	a5,a5,a4
80003054:	00279793          	slli	a5,a5,0x2
80003058:	00f687b3          	add	a5,a3,a5
8000305c:	00b00713          	li	a4,11
80003060:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:25
    ServicePipe[mySlot].header.service      = REPOSITORY_WAKEUP;
80003064:	800227b7          	lui	a5,0x80022
80003068:	fec42703          	lw	a4,-20(s0)
8000306c:	9dc78693          	addi	a3,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
80003070:	00070793          	mv	a5,a4
80003074:	00479793          	slli	a5,a5,0x4
80003078:	40e787b3          	sub	a5,a5,a4
8000307c:	00279793          	slli	a5,a5,0x2
80003080:	00f687b3          	add	a5,a3,a5
80003084:	10000713          	li	a4,256
80003088:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:27

    API_PushSendQueue(SERVICE, mySlot);
8000308c:	fec42583          	lw	a1,-20(s0)
80003090:	10100537          	lui	a0,0x10100
80003094:	374030ef          	jal	ra,80006408 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:28
    return;    
80003098:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:29
}
8000309c:	01c12083          	lw	ra,28(sp)
800030a0:	01812403          	lw	s0,24(sp)
800030a4:	02010113          	addi	sp,sp,32
800030a8:	00008067          	ret

800030ac <API_AddApplication>:
API_AddApplication():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:33

////////////////////////////////////////////////////////////
// Add one Application in the Execution Queue
void API_AddApplication(unsigned int appID, unsigned int appPeriod, unsigned int appExec, unsigned int appNTasks){
800030ac:	fd010113          	addi	sp,sp,-48
800030b0:	02112623          	sw	ra,44(sp)
800030b4:	02812423          	sw	s0,40(sp)
800030b8:	03010413          	addi	s0,sp,48
800030bc:	fca42e23          	sw	a0,-36(s0)
800030c0:	fcb42c23          	sw	a1,-40(s0)
800030c4:	fcc42a23          	sw	a2,-44(s0)
800030c8:	fcd42823          	sw	a3,-48(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:34
    int slot = API_GetApplicationFreeSlot();
800030cc:	1c4000ef          	jal	ra,80003290 <API_GetApplicationFreeSlot>
800030d0:	00050793          	mv	a5,a0
800030d4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:35
    applications[slot].occupied = TRUE;
800030d8:	800226b7          	lui	a3,0x80022
800030dc:	fec42703          	lw	a4,-20(s0)
800030e0:	00070793          	mv	a5,a4
800030e4:	00279793          	slli	a5,a5,0x2
800030e8:	00e787b3          	add	a5,a5,a4
800030ec:	00579793          	slli	a5,a5,0x5
800030f0:	6bc68713          	addi	a4,a3,1724 # 800226bc <__stack_top+0xfffdf4bc>
800030f4:	00e787b3          	add	a5,a5,a4
800030f8:	00100713          	li	a4,1
800030fc:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:36
    applications[slot].appID = appID;
80003100:	800227b7          	lui	a5,0x80022
80003104:	fec42703          	lw	a4,-20(s0)
80003108:	6bc78693          	addi	a3,a5,1724 # 800226bc <__stack_top+0xfffdf4bc>
8000310c:	00070793          	mv	a5,a4
80003110:	00279793          	slli	a5,a5,0x2
80003114:	00e787b3          	add	a5,a5,a4
80003118:	00579793          	slli	a5,a5,0x5
8000311c:	00f687b3          	add	a5,a3,a5
80003120:	fdc42703          	lw	a4,-36(s0)
80003124:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:37
    applications[slot].appPeriod = appPeriod;
80003128:	800227b7          	lui	a5,0x80022
8000312c:	fec42703          	lw	a4,-20(s0)
80003130:	6bc78693          	addi	a3,a5,1724 # 800226bc <__stack_top+0xfffdf4bc>
80003134:	00070793          	mv	a5,a4
80003138:	00279793          	slli	a5,a5,0x2
8000313c:	00e787b3          	add	a5,a5,a4
80003140:	00579793          	slli	a5,a5,0x5
80003144:	00f687b3          	add	a5,a3,a5
80003148:	fd842703          	lw	a4,-40(s0)
8000314c:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:38
    applications[slot].appExec = appExec;
80003150:	800227b7          	lui	a5,0x80022
80003154:	fec42703          	lw	a4,-20(s0)
80003158:	6bc78693          	addi	a3,a5,1724 # 800226bc <__stack_top+0xfffdf4bc>
8000315c:	00070793          	mv	a5,a4
80003160:	00279793          	slli	a5,a5,0x2
80003164:	00e787b3          	add	a5,a5,a4
80003168:	00579793          	slli	a5,a5,0x5
8000316c:	00f687b3          	add	a5,a3,a5
80003170:	fd442703          	lw	a4,-44(s0)
80003174:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:39
    applications[slot].numTasks = appNTasks;
80003178:	800226b7          	lui	a3,0x80022
8000317c:	fec42703          	lw	a4,-20(s0)
80003180:	00070793          	mv	a5,a4
80003184:	00279793          	slli	a5,a5,0x2
80003188:	00e787b3          	add	a5,a5,a4
8000318c:	00579793          	slli	a5,a5,0x5
80003190:	6bc68713          	addi	a4,a3,1724 # 800226bc <__stack_top+0xfffdf4bc>
80003194:	00e787b3          	add	a5,a5,a4
80003198:	fd042703          	lw	a4,-48(s0)
8000319c:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:40
    applications[slot].nextRun = xTaskGetTickCount() + appPeriod;
800031a0:	d80ff0ef          	jal	ra,80002720 <xTaskGetTickCount>
800031a4:	00050713          	mv	a4,a0
800031a8:	fd842783          	lw	a5,-40(s0)
800031ac:	00f706b3          	add	a3,a4,a5
800031b0:	800227b7          	lui	a5,0x80022
800031b4:	fec42703          	lw	a4,-20(s0)
800031b8:	6bc78613          	addi	a2,a5,1724 # 800226bc <__stack_top+0xfffdf4bc>
800031bc:	00070793          	mv	a5,a4
800031c0:	00279793          	slli	a5,a5,0x2
800031c4:	00e787b3          	add	a5,a5,a4
800031c8:	00579793          	slli	a5,a5,0x5
800031cc:	00f607b3          	add	a5,a2,a5
800031d0:	08d7a623          	sw	a3,140(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:41
    applications[slot].executed = 0;
800031d4:	800226b7          	lui	a3,0x80022
800031d8:	fec42703          	lw	a4,-20(s0)
800031dc:	00070793          	mv	a5,a4
800031e0:	00279793          	slli	a5,a5,0x2
800031e4:	00e787b3          	add	a5,a5,a4
800031e8:	00579793          	slli	a5,a5,0x5
800031ec:	6bc68713          	addi	a4,a3,1724 # 800226bc <__stack_top+0xfffdf4bc>
800031f0:	00e787b3          	add	a5,a5,a4
800031f4:	0807a823          	sw	zero,144(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:42
    applications[slot].lastStart = -1;
800031f8:	800227b7          	lui	a5,0x80022
800031fc:	fec42703          	lw	a4,-20(s0)
80003200:	6bc78693          	addi	a3,a5,1724 # 800226bc <__stack_top+0xfffdf4bc>
80003204:	00070793          	mv	a5,a4
80003208:	00279793          	slli	a5,a5,0x2
8000320c:	00e787b3          	add	a5,a5,a4
80003210:	00579793          	slli	a5,a5,0x5
80003214:	00f687b3          	add	a5,a3,a5
80003218:	fff00713          	li	a4,-1
8000321c:	08e7aa23          	sw	a4,148(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:43
    applications[slot].finishedTasks = 0;
80003220:	800227b7          	lui	a5,0x80022
80003224:	fec42703          	lw	a4,-20(s0)
80003228:	6bc78693          	addi	a3,a5,1724 # 800226bc <__stack_top+0xfffdf4bc>
8000322c:	00070793          	mv	a5,a4
80003230:	00279793          	slli	a5,a5,0x2
80003234:	00e787b3          	add	a5,a5,a4
80003238:	00579793          	slli	a5,a5,0x5
8000323c:	00f687b3          	add	a5,a3,a5
80003240:	0807ac23          	sw	zero,152(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:44
    applications[slot].lastFinish = 0;
80003244:	800227b7          	lui	a5,0x80022
80003248:	fec42703          	lw	a4,-20(s0)
8000324c:	6bc78693          	addi	a3,a5,1724 # 800226bc <__stack_top+0xfffdf4bc>
80003250:	00070793          	mv	a5,a4
80003254:	00279793          	slli	a5,a5,0x2
80003258:	00e787b3          	add	a5,a5,a4
8000325c:	00579793          	slli	a5,a5,0x5
80003260:	00f687b3          	add	a5,a3,a5
80003264:	0807ae23          	sw	zero,156(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:45
    printsv("New application registered - ID: ", appID);
80003268:	fdc42783          	lw	a5,-36(s0)
8000326c:	00078593          	mv	a1,a5
80003270:	800087b7          	lui	a5,0x80008
80003274:	f5078513          	addi	a0,a5,-176 # 80007f50 <__stack_top+0xfffc4d50>
80003278:	535020ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:46
    return;
8000327c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:47
}
80003280:	02c12083          	lw	ra,44(sp)
80003284:	02812403          	lw	s0,40(sp)
80003288:	03010113          	addi	sp,sp,48
8000328c:	00008067          	ret

80003290 <API_GetApplicationFreeSlot>:
API_GetApplicationFreeSlot():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:65
}


////////////////////////////////////////////////////////////
// Gets an application slot that is free
unsigned int API_GetApplicationFreeSlot(){
80003290:	fe010113          	addi	sp,sp,-32
80003294:	00112e23          	sw	ra,28(sp)
80003298:	00812c23          	sw	s0,24(sp)
8000329c:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:67
    int i;
    for (i = 0; i < NUM_MAX_APPS; i++){
800032a0:	fe042623          	sw	zero,-20(s0)
800032a4:	0400006f          	j	800032e4 <API_GetApplicationFreeSlot+0x54>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:68
        if (applications[i].occupied == FALSE){
800032a8:	800226b7          	lui	a3,0x80022
800032ac:	fec42703          	lw	a4,-20(s0)
800032b0:	00070793          	mv	a5,a4
800032b4:	00279793          	slli	a5,a5,0x2
800032b8:	00e787b3          	add	a5,a5,a4
800032bc:	00579793          	slli	a5,a5,0x5
800032c0:	6bc68713          	addi	a4,a3,1724 # 800226bc <__stack_top+0xfffdf4bc>
800032c4:	00e787b3          	add	a5,a5,a4
800032c8:	0007a783          	lw	a5,0(a5)
800032cc:	00079663          	bnez	a5,800032d8 <API_GetApplicationFreeSlot+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:69
            return i;
800032d0:	fec42783          	lw	a5,-20(s0)
800032d4:	02c0006f          	j	80003300 <API_GetApplicationFreeSlot+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:67 (discriminator 2)
    for (i = 0; i < NUM_MAX_APPS; i++){
800032d8:	fec42783          	lw	a5,-20(s0)
800032dc:	00178793          	addi	a5,a5,1
800032e0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:67 (discriminator 1)
800032e4:	fec42703          	lw	a4,-20(s0)
800032e8:	00b00793          	li	a5,11
800032ec:	fae7dee3          	ble	a4,a5,800032a8 <API_GetApplicationFreeSlot+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:72
        }
    }
    prints("returning erro4\n");
800032f0:	800087b7          	lui	a5,0x80008
800032f4:	f8878513          	addi	a0,a5,-120 # 80007f88 <__stack_top+0xfffc4d88>
800032f8:	409020ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:73
    return ERRO;
800032fc:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:74
}
80003300:	00078513          	mv	a0,a5
80003304:	01c12083          	lw	ra,28(sp)
80003308:	01812403          	lw	s0,24(sp)
8000330c:	02010113          	addi	sp,sp,32
80003310:	00008067          	ret

80003314 <API_ApplicationsReset>:
API_ApplicationsReset():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:78

////////////////////////////////////////////////////////////
// Reset applications vector
void API_ApplicationsReset(){
80003314:	fe010113          	addi	sp,sp,-32
80003318:	00812e23          	sw	s0,28(sp)
8000331c:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:80
    int i;
    for (i = 0; i < NUM_MAX_APPS; i++){
80003320:	fe042623          	sw	zero,-20(s0)
80003324:	0340006f          	j	80003358 <API_ApplicationsReset+0x44>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:81 (discriminator 3)
        applications[i].occupied = FALSE;
80003328:	800226b7          	lui	a3,0x80022
8000332c:	fec42703          	lw	a4,-20(s0)
80003330:	00070793          	mv	a5,a4
80003334:	00279793          	slli	a5,a5,0x2
80003338:	00e787b3          	add	a5,a5,a4
8000333c:	00579793          	slli	a5,a5,0x5
80003340:	6bc68713          	addi	a4,a3,1724 # 800226bc <__stack_top+0xfffdf4bc>
80003344:	00e787b3          	add	a5,a5,a4
80003348:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:80 (discriminator 3)
    for (i = 0; i < NUM_MAX_APPS; i++){
8000334c:	fec42783          	lw	a5,-20(s0)
80003350:	00178793          	addi	a5,a5,1
80003354:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:80 (discriminator 1)
80003358:	fec42703          	lw	a4,-20(s0)
8000335c:	00b00793          	li	a5,11
80003360:	fce7d4e3          	ble	a4,a5,80003328 <API_ApplicationsReset+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:83
    }
    return;
80003364:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:84
}
80003368:	01c12403          	lw	s0,28(sp)
8000336c:	02010113          	addi	sp,sp,32
80003370:	00008067          	ret

80003374 <API_TilesReset>:
API_TilesReset():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:88

////////////////////////////////////////////////////////////
// Initialize the Tiles Info
void API_TilesReset(){
80003374:	fe010113          	addi	sp,sp,-32
80003378:	00812e23          	sw	s0,28(sp)
8000337c:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90
    int i, m, n;
    for (m = 0; m < DIM_X; m++){
80003380:	fe042623          	sw	zero,-20(s0)
80003384:	0fc0006f          	j	80003480 <API_TilesReset+0x10c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:91
        for (n = 0; n < DIM_Y; n++){
80003388:	fe042423          	sw	zero,-24(s0)
8000338c:	0dc0006f          	j	80003468 <API_TilesReset+0xf4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:92 (discriminator 3)
            Tiles[m][n].temperature = 273;
80003390:	80023637          	lui	a2,0x80023
80003394:	fe842783          	lw	a5,-24(s0)
80003398:	fec42683          	lw	a3,-20(s0)
8000339c:	00078713          	mv	a4,a5
800033a0:	00171713          	slli	a4,a4,0x1
800033a4:	00f70733          	add	a4,a4,a5
800033a8:	00271793          	slli	a5,a4,0x2
800033ac:	00078713          	mv	a4,a5
800033b0:	00068793          	mv	a5,a3
800033b4:	00379793          	slli	a5,a5,0x3
800033b8:	00d787b3          	add	a5,a5,a3
800033bc:	00279793          	slli	a5,a5,0x2
800033c0:	00f70733          	add	a4,a4,a5
800033c4:	e6860793          	addi	a5,a2,-408 # 80022e68 <__stack_top+0xfffdfc68>
800033c8:	00f707b3          	add	a5,a4,a5
800033cc:	11100713          	li	a4,273
800033d0:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:93 (discriminator 3)
            Tiles[m][n].frequency = 1000;
800033d4:	80023737          	lui	a4,0x80023
800033d8:	fe842783          	lw	a5,-24(s0)
800033dc:	fec42683          	lw	a3,-20(s0)
800033e0:	e6870613          	addi	a2,a4,-408 # 80022e68 <__stack_top+0xfffdfc68>
800033e4:	00078713          	mv	a4,a5
800033e8:	00171713          	slli	a4,a4,0x1
800033ec:	00f70733          	add	a4,a4,a5
800033f0:	00271793          	slli	a5,a4,0x2
800033f4:	00078713          	mv	a4,a5
800033f8:	00068793          	mv	a5,a3
800033fc:	00379793          	slli	a5,a5,0x3
80003400:	00d787b3          	add	a5,a5,a3
80003404:	00279793          	slli	a5,a5,0x2
80003408:	00f707b3          	add	a5,a4,a5
8000340c:	00f607b3          	add	a5,a2,a5
80003410:	3e800713          	li	a4,1000
80003414:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:94 (discriminator 3)
            Tiles[m][n].taskSlots = NUM_MAX_TASKS;
80003418:	80023737          	lui	a4,0x80023
8000341c:	fe842783          	lw	a5,-24(s0)
80003420:	fec42683          	lw	a3,-20(s0)
80003424:	e6870613          	addi	a2,a4,-408 # 80022e68 <__stack_top+0xfffdfc68>
80003428:	00078713          	mv	a4,a5
8000342c:	00171713          	slli	a4,a4,0x1
80003430:	00f70733          	add	a4,a4,a5
80003434:	00271793          	slli	a5,a4,0x2
80003438:	00078713          	mv	a4,a5
8000343c:	00068793          	mv	a5,a3
80003440:	00379793          	slli	a5,a5,0x3
80003444:	00d787b3          	add	a5,a5,a3
80003448:	00279793          	slli	a5,a5,0x2
8000344c:	00f707b3          	add	a5,a4,a5
80003450:	00f607b3          	add	a5,a2,a5
80003454:	00600713          	li	a4,6
80003458:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:91 (discriminator 3)
        for (n = 0; n < DIM_Y; n++){
8000345c:	fe842783          	lw	a5,-24(s0)
80003460:	00178793          	addi	a5,a5,1
80003464:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:91 (discriminator 1)
80003468:	fe842703          	lw	a4,-24(s0)
8000346c:	00200793          	li	a5,2
80003470:	f2e7d0e3          	ble	a4,a5,80003390 <API_TilesReset+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90 (discriminator 2)
    for (m = 0; m < DIM_X; m++){
80003474:	fec42783          	lw	a5,-20(s0)
80003478:	00178793          	addi	a5,a5,1
8000347c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90 (discriminator 1)
80003480:	fec42703          	lw	a4,-20(s0)
80003484:	00200793          	li	a5,2
80003488:	f0e7d0e3          	ble	a4,a5,80003388 <API_TilesReset+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:100
            /*for(i = 0; i < NUM_MAX_TASKS; i++){
                Tiles[m][n].AppTask[i] = NONE;
            }*/
        }
    }    
    return;
8000348c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:101
}
80003490:	01c12403          	lw	s0,28(sp)
80003494:	02010113          	addi	sp,sp,32
80003498:	00008067          	ret

8000349c <GeneratePatternMatrix>:
GeneratePatternMatrix():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:104

// Generates the Pattern Matrix for Pattern mapping
void GeneratePatternMatrix(){
8000349c:	fe010113          	addi	sp,sp,-32
800034a0:	00812e23          	sw	s0,28(sp)
800034a4:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:106
    int i, aux;
    aux = 0;
800034a8:	fe042423          	sw	zero,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:107
    priorityPointer = 0;
800034ac:	800237b7          	lui	a5,0x80023
800034b0:	e607a223          	sw	zero,-412(a5) # 80022e64 <__stack_top+0xfffdfc64>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:109
    //prints("Testando Pattern: \n");
    for(i=0; i<(DIM_X*DIM_Y); i++){
800034b4:	fe042623          	sw	zero,-20(s0)
800034b8:	0700006f          	j	80003528 <GeneratePatternMatrix+0x8c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:111
        //printi(i); prints(": "); printi(aux); prints("\n");
        priorityMatrix[i] = (aux / DIM_X << 8) | aux % DIM_X;
800034bc:	fe842703          	lw	a4,-24(s0)
800034c0:	00300793          	li	a5,3
800034c4:	02f747b3          	div	a5,a4,a5
800034c8:	00879713          	slli	a4,a5,0x8
800034cc:	fe842683          	lw	a3,-24(s0)
800034d0:	00300793          	li	a5,3
800034d4:	02f6e7b3          	rem	a5,a3,a5
800034d8:	00f767b3          	or	a5,a4,a5
800034dc:	00078693          	mv	a3,a5
800034e0:	800227b7          	lui	a5,0x80022
800034e4:	fec42703          	lw	a4,-20(s0)
800034e8:	00271713          	slli	a4,a4,0x2
800034ec:	69878793          	addi	a5,a5,1688 # 80022698 <__stack_top+0xfffdf498>
800034f0:	00f707b3          	add	a5,a4,a5
800034f4:	00d7a023          	sw	a3,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:130
            else{
                aux = 1;
            }
        } 
        else{
            if(aux<=((DIM_X*DIM_Y)-3))
800034f8:	fe842703          	lw	a4,-24(s0)
800034fc:	00600793          	li	a5,6
80003500:	00e7ca63          	blt	a5,a4,80003514 <GeneratePatternMatrix+0x78>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:131
                aux += 2;
80003504:	fe842783          	lw	a5,-24(s0)
80003508:	00278793          	addi	a5,a5,2
8000350c:	fef42423          	sw	a5,-24(s0)
80003510:	00c0006f          	j	8000351c <GeneratePatternMatrix+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:133
            else
                aux = 1;
80003514:	00100793          	li	a5,1
80003518:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:109 (discriminator 2)
    for(i=0; i<(DIM_X*DIM_Y); i++){
8000351c:	fec42783          	lw	a5,-20(s0)
80003520:	00178793          	addi	a5,a5,1
80003524:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:109 (discriminator 1)
80003528:	fec42703          	lw	a4,-20(s0)
8000352c:	00800793          	li	a5,8
80003530:	f8e7d6e3          	ble	a4,a5,800034bc <GeneratePatternMatrix+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:136
        }    
    }
    return;
80003534:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:137
}
80003538:	01c12403          	lw	s0,28(sp)
8000353c:	02010113          	addi	sp,sp,32
80003540:	00008067          	ret

80003544 <API_AllocateTasks>:
API_AllocateTasks():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:140

// Checks if there is some task to allocate...
void API_AllocateTasks(unsigned int tick){
80003544:	fd010113          	addi	sp,sp,-48
80003548:	02112623          	sw	ra,44(sp)
8000354c:	02812423          	sw	s0,40(sp)
80003550:	02912223          	sw	s1,36(sp)
80003554:	03010413          	addi	s0,sp,48
80003558:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:144
    int i, j;
    int addr, slot;
    // Iterate around every possible application
    for (i = 0; i < NUM_MAX_APPS; i++){
8000355c:	fe042623          	sw	zero,-20(s0)
80003560:	2980006f          	j	800037f8 <API_AllocateTasks+0x2b4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:146
        // If the application is valid
        if (applications[i].occupied == TRUE){
80003564:	800226b7          	lui	a3,0x80022
80003568:	fec42703          	lw	a4,-20(s0)
8000356c:	00070793          	mv	a5,a4
80003570:	00279793          	slli	a5,a5,0x2
80003574:	00e787b3          	add	a5,a5,a4
80003578:	00579793          	slli	a5,a5,0x5
8000357c:	6bc68713          	addi	a4,a3,1724 # 800226bc <__stack_top+0xfffdf4bc>
80003580:	00e787b3          	add	a5,a5,a4
80003584:	0007a703          	lw	a4,0(a5)
80003588:	00100793          	li	a5,1
8000358c:	26f71063          	bne	a4,a5,800037ec <API_AllocateTasks+0x2a8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:149

            // If the nextRun of this application is right now, then release each task!
            if(applications[i].nextRun <= tick && applications[i].nextRun != applications[i].lastStart){
80003590:	800227b7          	lui	a5,0x80022
80003594:	fec42703          	lw	a4,-20(s0)
80003598:	6bc78693          	addi	a3,a5,1724 # 800226bc <__stack_top+0xfffdf4bc>
8000359c:	00070793          	mv	a5,a4
800035a0:	00279793          	slli	a5,a5,0x2
800035a4:	00e787b3          	add	a5,a5,a4
800035a8:	00579793          	slli	a5,a5,0x5
800035ac:	00f687b3          	add	a5,a3,a5
800035b0:	08c7a783          	lw	a5,140(a5)
800035b4:	fdc42703          	lw	a4,-36(s0)
800035b8:	22f76a63          	bltu	a4,a5,800037ec <API_AllocateTasks+0x2a8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:149 (discriminator 1)
800035bc:	800227b7          	lui	a5,0x80022
800035c0:	fec42703          	lw	a4,-20(s0)
800035c4:	6bc78693          	addi	a3,a5,1724 # 800226bc <__stack_top+0xfffdf4bc>
800035c8:	00070793          	mv	a5,a4
800035cc:	00279793          	slli	a5,a5,0x2
800035d0:	00e787b3          	add	a5,a5,a4
800035d4:	00579793          	slli	a5,a5,0x5
800035d8:	00f687b3          	add	a5,a3,a5
800035dc:	08c7a683          	lw	a3,140(a5)
800035e0:	800227b7          	lui	a5,0x80022
800035e4:	fec42703          	lw	a4,-20(s0)
800035e8:	6bc78613          	addi	a2,a5,1724 # 800226bc <__stack_top+0xfffdf4bc>
800035ec:	00070793          	mv	a5,a4
800035f0:	00279793          	slli	a5,a5,0x2
800035f4:	00e787b3          	add	a5,a5,a4
800035f8:	00579793          	slli	a5,a5,0x5
800035fc:	00f607b3          	add	a5,a2,a5
80003600:	0947a783          	lw	a5,148(a5)
80003604:	1ef68463          	beq	a3,a5,800037ec <API_AllocateTasks+0x2a8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:152

                // If the system has space to accept every task
                if(applications[i].numTasks <= API_GetSystemTasksSlots()){
80003608:	800226b7          	lui	a3,0x80022
8000360c:	fec42703          	lw	a4,-20(s0)
80003610:	00070793          	mv	a5,a4
80003614:	00279793          	slli	a5,a5,0x2
80003618:	00e787b3          	add	a5,a5,a4
8000361c:	00579793          	slli	a5,a5,0x5
80003620:	6bc68713          	addi	a4,a3,1724 # 800226bc <__stack_top+0xfffdf4bc>
80003624:	00e787b3          	add	a5,a5,a4
80003628:	0107a483          	lw	s1,16(a5)
8000362c:	121000ef          	jal	ra,80003f4c <API_GetSystemTasksSlots>
80003630:	00050793          	mv	a5,a0
80003634:	1a97ec63          	bltu	a5,s1,800037ec <API_AllocateTasks+0x2a8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:155
                    
                    // Iterates around each task of this application
                    for(j = 0; j < applications[i].numTasks; j++){
80003638:	fe042423          	sw	zero,-24(s0)
8000363c:	13c0006f          	j	80003778 <API_AllocateTasks+0x234>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:158

                        for(;;){
                            addr = getNextPriorityAddr();
80003640:	53c000ef          	jal	ra,80003b7c <getNextPriorityAddr>
80003644:	00050793          	mv	a5,a0
80003648:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:159
                            slot = API_GetTaskSlotFromTile(addr, i, j);
8000364c:	fe442783          	lw	a5,-28(s0)
80003650:	fec42703          	lw	a4,-20(s0)
80003654:	fe842683          	lw	a3,-24(s0)
80003658:	00068613          	mv	a2,a3
8000365c:	00070593          	mv	a1,a4
80003660:	00078513          	mv	a0,a5
80003664:	64c000ef          	jal	ra,80003cb0 <API_GetTaskSlotFromTile>
80003668:	00050793          	mv	a5,a0
8000366c:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:160
                            if (slot != ERRO)
80003670:	fe042703          	lw	a4,-32(s0)
80003674:	fff00793          	li	a5,-1
80003678:	00f71463          	bne	a4,a5,80003680 <API_AllocateTasks+0x13c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:158
                            addr = getNextPriorityAddr();
8000367c:	fc5ff06f          	j	80003640 <API_AllocateTasks+0xfc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:161
                                break;
80003680:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:163
                        }
                        applications[i].tasks[j].status = TASK_ALLOCATING;
80003684:	80022737          	lui	a4,0x80022
80003688:	fe842783          	lw	a5,-24(s0)
8000368c:	fec42683          	lw	a3,-20(s0)
80003690:	6bc70613          	addi	a2,a4,1724 # 800226bc <__stack_top+0xfffdf4bc>
80003694:	00078713          	mv	a4,a5
80003698:	00171713          	slli	a4,a4,0x1
8000369c:	00f70733          	add	a4,a4,a5
800036a0:	00271793          	slli	a5,a4,0x2
800036a4:	00078713          	mv	a4,a5
800036a8:	00068793          	mv	a5,a3
800036ac:	00279793          	slli	a5,a5,0x2
800036b0:	00d787b3          	add	a5,a5,a3
800036b4:	00579793          	slli	a5,a5,0x5
800036b8:	00f707b3          	add	a5,a4,a5
800036bc:	00f607b3          	add	a5,a2,a5
800036c0:	00300713          	li	a4,3
800036c4:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:164
                        applications[i].tasks[j].addr = addr;
800036c8:	fe442603          	lw	a2,-28(s0)
800036cc:	80022737          	lui	a4,0x80022
800036d0:	fe842783          	lw	a5,-24(s0)
800036d4:	fec42683          	lw	a3,-20(s0)
800036d8:	6bc70593          	addi	a1,a4,1724 # 800226bc <__stack_top+0xfffdf4bc>
800036dc:	00078713          	mv	a4,a5
800036e0:	00171713          	slli	a4,a4,0x1
800036e4:	00f70733          	add	a4,a4,a5
800036e8:	00271793          	slli	a5,a4,0x2
800036ec:	00078713          	mv	a4,a5
800036f0:	00068793          	mv	a5,a3
800036f4:	00279793          	slli	a5,a5,0x2
800036f8:	00d787b3          	add	a5,a5,a3
800036fc:	00579793          	slli	a5,a5,0x5
80003700:	00f707b3          	add	a5,a4,a5
80003704:	00f587b3          	add	a5,a1,a5
80003708:	00c7ac23          	sw	a2,24(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:165
                        applications[i].tasks[j].slot = slot;
8000370c:	fe042603          	lw	a2,-32(s0)
80003710:	80022737          	lui	a4,0x80022
80003714:	fe842783          	lw	a5,-24(s0)
80003718:	fec42683          	lw	a3,-20(s0)
8000371c:	6bc70593          	addi	a1,a4,1724 # 800226bc <__stack_top+0xfffdf4bc>
80003720:	00078713          	mv	a4,a5
80003724:	00171713          	slli	a4,a4,0x1
80003728:	00f70733          	add	a4,a4,a5
8000372c:	00271793          	slli	a5,a4,0x2
80003730:	00078713          	mv	a4,a5
80003734:	00068793          	mv	a5,a3
80003738:	00279793          	slli	a5,a5,0x2
8000373c:	00d787b3          	add	a5,a5,a3
80003740:	00579793          	slli	a5,a5,0x5
80003744:	00f707b3          	add	a5,a4,a5
80003748:	00f587b3          	add	a5,a1,a5
8000374c:	00c7ae23          	sw	a2,28(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:166
                        API_RepositoryAllocation(i, j, addr);
80003750:	fec42783          	lw	a5,-20(s0)
80003754:	fe842703          	lw	a4,-24(s0)
80003758:	fe442683          	lw	a3,-28(s0)
8000375c:	00068613          	mv	a2,a3
80003760:	00070593          	mv	a1,a4
80003764:	00078513          	mv	a0,a5
80003768:	0d1000ef          	jal	ra,80004038 <API_RepositoryAllocation>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:155
                    for(j = 0; j < applications[i].numTasks; j++){
8000376c:	fe842783          	lw	a5,-24(s0)
80003770:	00178793          	addi	a5,a5,1
80003774:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:155 (discriminator 1)
80003778:	800226b7          	lui	a3,0x80022
8000377c:	fec42703          	lw	a4,-20(s0)
80003780:	00070793          	mv	a5,a4
80003784:	00279793          	slli	a5,a5,0x2
80003788:	00e787b3          	add	a5,a5,a4
8000378c:	00579793          	slli	a5,a5,0x5
80003790:	6bc68713          	addi	a4,a3,1724 # 800226bc <__stack_top+0xfffdf4bc>
80003794:	00e787b3          	add	a5,a5,a4
80003798:	0107a703          	lw	a4,16(a5)
8000379c:	fe842783          	lw	a5,-24(s0)
800037a0:	eae7e0e3          	bltu	a5,a4,80003640 <API_AllocateTasks+0xfc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:170
                    }

                    // Resets the lastStart
                    applications[i].lastStart = applications[i].nextRun;
800037a4:	800227b7          	lui	a5,0x80022
800037a8:	fec42703          	lw	a4,-20(s0)
800037ac:	6bc78693          	addi	a3,a5,1724 # 800226bc <__stack_top+0xfffdf4bc>
800037b0:	00070793          	mv	a5,a4
800037b4:	00279793          	slli	a5,a5,0x2
800037b8:	00e787b3          	add	a5,a5,a4
800037bc:	00579793          	slli	a5,a5,0x5
800037c0:	00f687b3          	add	a5,a3,a5
800037c4:	08c7a683          	lw	a3,140(a5)
800037c8:	800227b7          	lui	a5,0x80022
800037cc:	fec42703          	lw	a4,-20(s0)
800037d0:	6bc78613          	addi	a2,a5,1724 # 800226bc <__stack_top+0xfffdf4bc>
800037d4:	00070793          	mv	a5,a4
800037d8:	00279793          	slli	a5,a5,0x2
800037dc:	00e787b3          	add	a5,a5,a4
800037e0:	00579793          	slli	a5,a5,0x5
800037e4:	00f607b3          	add	a5,a2,a5
800037e8:	08d7aa23          	sw	a3,148(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:144 (discriminator 2)
    for (i = 0; i < NUM_MAX_APPS; i++){
800037ec:	fec42783          	lw	a5,-20(s0)
800037f0:	00178793          	addi	a5,a5,1
800037f4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:144 (discriminator 1)
800037f8:	fec42703          	lw	a4,-20(s0)
800037fc:	00b00793          	li	a5,11
80003800:	d6e7d2e3          	ble	a4,a5,80003564 <API_AllocateTasks+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:176
                }
            }
        }
    }

    return;
80003804:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:177
}
80003808:	02c12083          	lw	ra,44(sp)
8000380c:	02812403          	lw	s0,40(sp)
80003810:	02412483          	lw	s1,36(sp)
80003814:	03010113          	addi	sp,sp,48
80003818:	00008067          	ret

8000381c <API_DealocateTask>:
API_DealocateTask():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:179

void API_DealocateTask(unsigned int task_id, unsigned int app_id){
8000381c:	fd010113          	addi	sp,sp,-48
80003820:	02112623          	sw	ra,44(sp)
80003824:	02812423          	sw	s0,40(sp)
80003828:	03010413          	addi	s0,sp,48
8000382c:	fca42e23          	sw	a0,-36(s0)
80003830:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:182
    unsigned int i, tick;
    volatile int flag;
    applications[app_id].tasks[task_id].status = TASK_FINISHED;
80003834:	80022737          	lui	a4,0x80022
80003838:	fdc42783          	lw	a5,-36(s0)
8000383c:	fd842683          	lw	a3,-40(s0)
80003840:	6bc70613          	addi	a2,a4,1724 # 800226bc <__stack_top+0xfffdf4bc>
80003844:	00078713          	mv	a4,a5
80003848:	00171713          	slli	a4,a4,0x1
8000384c:	00f70733          	add	a4,a4,a5
80003850:	00271793          	slli	a5,a4,0x2
80003854:	00078713          	mv	a4,a5
80003858:	00068793          	mv	a5,a3
8000385c:	00279793          	slli	a5,a5,0x2
80003860:	00d787b3          	add	a5,a5,a3
80003864:	00579793          	slli	a5,a5,0x5
80003868:	00f707b3          	add	a5,a4,a5
8000386c:	00f607b3          	add	a5,a2,a5
80003870:	00200713          	li	a4,2
80003874:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:184
    // verify if every task has finished
    flag = 1;
80003878:	00100793          	li	a5,1
8000387c:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:185
    for (i = 0; i < applications[app_id].numTasks; i++){
80003880:	fe042623          	sw	zero,-20(s0)
80003884:	0600006f          	j	800038e4 <API_DealocateTask+0xc8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:187
        //printsvsv("checking ", i, "task is: ", applications[app_id].tasks[i].status);
        if(applications[app_id].tasks[i].status != TASK_FINISHED){
80003888:	80022737          	lui	a4,0x80022
8000388c:	fec42783          	lw	a5,-20(s0)
80003890:	fd842683          	lw	a3,-40(s0)
80003894:	6bc70613          	addi	a2,a4,1724 # 800226bc <__stack_top+0xfffdf4bc>
80003898:	00078713          	mv	a4,a5
8000389c:	00171713          	slli	a4,a4,0x1
800038a0:	00f70733          	add	a4,a4,a5
800038a4:	00271793          	slli	a5,a4,0x2
800038a8:	00078713          	mv	a4,a5
800038ac:	00068793          	mv	a5,a3
800038b0:	00279793          	slli	a5,a5,0x2
800038b4:	00d787b3          	add	a5,a5,a3
800038b8:	00579793          	slli	a5,a5,0x5
800038bc:	00f707b3          	add	a5,a4,a5
800038c0:	00f607b3          	add	a5,a2,a5
800038c4:	0147a703          	lw	a4,20(a5)
800038c8:	00200793          	li	a5,2
800038cc:	00f70663          	beq	a4,a5,800038d8 <API_DealocateTask+0xbc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:188
            flag = 0;
800038d0:	fe042223          	sw	zero,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:189
            break;
800038d4:	03c0006f          	j	80003910 <API_DealocateTask+0xf4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:185 (discriminator 2)
    for (i = 0; i < applications[app_id].numTasks; i++){
800038d8:	fec42783          	lw	a5,-20(s0)
800038dc:	00178793          	addi	a5,a5,1
800038e0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:185 (discriminator 1)
800038e4:	800226b7          	lui	a3,0x80022
800038e8:	fd842703          	lw	a4,-40(s0)
800038ec:	00070793          	mv	a5,a4
800038f0:	00279793          	slli	a5,a5,0x2
800038f4:	00e787b3          	add	a5,a5,a4
800038f8:	00579793          	slli	a5,a5,0x5
800038fc:	6bc68713          	addi	a4,a3,1724 # 800226bc <__stack_top+0xfffdf4bc>
80003900:	00e787b3          	add	a5,a5,a4
80003904:	0107a783          	lw	a5,16(a5)
80003908:	fec42703          	lw	a4,-20(s0)
8000390c:	f6f76ee3          	bltu	a4,a5,80003888 <API_DealocateTask+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:193
        }
    }
    // in positive case
    if(flag){
80003910:	fe442783          	lw	a5,-28(s0)
80003914:	24078663          	beqz	a5,80003b60 <API_DealocateTask+0x344>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:195
        // register that the application has executed another time
        tick = xTaskGetTickCount();
80003918:	e09fe0ef          	jal	ra,80002720 <xTaskGetTickCount>
8000391c:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:196
        applications[app_id].executed++;
80003920:	800226b7          	lui	a3,0x80022
80003924:	fd842703          	lw	a4,-40(s0)
80003928:	00070793          	mv	a5,a4
8000392c:	00279793          	slli	a5,a5,0x2
80003930:	00e787b3          	add	a5,a5,a4
80003934:	00579793          	slli	a5,a5,0x5
80003938:	6bc68713          	addi	a4,a3,1724 # 800226bc <__stack_top+0xfffdf4bc>
8000393c:	00e787b3          	add	a5,a5,a4
80003940:	0907a783          	lw	a5,144(a5)
80003944:	00178693          	addi	a3,a5,1
80003948:	80022637          	lui	a2,0x80022
8000394c:	fd842703          	lw	a4,-40(s0)
80003950:	00070793          	mv	a5,a4
80003954:	00279793          	slli	a5,a5,0x2
80003958:	00e787b3          	add	a5,a5,a4
8000395c:	00579793          	slli	a5,a5,0x5
80003960:	6bc60713          	addi	a4,a2,1724 # 800226bc <__stack_top+0xfffdf4bc>
80003964:	00e787b3          	add	a5,a5,a4
80003968:	08d7a823          	sw	a3,144(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:197
        printsvsv("Application ", app_id, "was executed in ", (tick - applications[app_id].lastStart));
8000396c:	fd842583          	lw	a1,-40(s0)
80003970:	800227b7          	lui	a5,0x80022
80003974:	fd842703          	lw	a4,-40(s0)
80003978:	6bc78693          	addi	a3,a5,1724 # 800226bc <__stack_top+0xfffdf4bc>
8000397c:	00070793          	mv	a5,a4
80003980:	00279793          	slli	a5,a5,0x2
80003984:	00e787b3          	add	a5,a5,a4
80003988:	00579793          	slli	a5,a5,0x5
8000398c:	00f687b3          	add	a5,a3,a5
80003990:	0947a783          	lw	a5,148(a5)
80003994:	fe842703          	lw	a4,-24(s0)
80003998:	40f707b3          	sub	a5,a4,a5
8000399c:	00078693          	mv	a3,a5
800039a0:	800087b7          	lui	a5,0x80008
800039a4:	f9c78613          	addi	a2,a5,-100 # 80007f9c <__stack_top+0xfffc4d9c>
800039a8:	800087b7          	lui	a5,0x80008
800039ac:	fb078513          	addi	a0,a5,-80 # 80007fb0 <__stack_top+0xfffc4db0>
800039b0:	644020ef          	jal	ra,80005ff4 <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:198
        applications[app_id].lastFinish = tick;
800039b4:	800227b7          	lui	a5,0x80022
800039b8:	fd842703          	lw	a4,-40(s0)
800039bc:	6bc78693          	addi	a3,a5,1724 # 800226bc <__stack_top+0xfffdf4bc>
800039c0:	00070793          	mv	a5,a4
800039c4:	00279793          	slli	a5,a5,0x2
800039c8:	00e787b3          	add	a5,a5,a4
800039cc:	00579793          	slli	a5,a5,0x5
800039d0:	00f687b3          	add	a5,a3,a5
800039d4:	fe842703          	lw	a4,-24(s0)
800039d8:	08e7ae23          	sw	a4,156(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:200
        // if the application must run another time
        if(applications[app_id].appExec > applications[app_id].executed){
800039dc:	800227b7          	lui	a5,0x80022
800039e0:	fd842703          	lw	a4,-40(s0)
800039e4:	6bc78693          	addi	a3,a5,1724 # 800226bc <__stack_top+0xfffdf4bc>
800039e8:	00070793          	mv	a5,a4
800039ec:	00279793          	slli	a5,a5,0x2
800039f0:	00e787b3          	add	a5,a5,a4
800039f4:	00579793          	slli	a5,a5,0x5
800039f8:	00f687b3          	add	a5,a3,a5
800039fc:	00c7a683          	lw	a3,12(a5)
80003a00:	80022637          	lui	a2,0x80022
80003a04:	fd842703          	lw	a4,-40(s0)
80003a08:	00070793          	mv	a5,a4
80003a0c:	00279793          	slli	a5,a5,0x2
80003a10:	00e787b3          	add	a5,a5,a4
80003a14:	00579793          	slli	a5,a5,0x5
80003a18:	6bc60713          	addi	a4,a2,1724 # 800226bc <__stack_top+0xfffdf4bc>
80003a1c:	00e787b3          	add	a5,a5,a4
80003a20:	0907a783          	lw	a5,144(a5)
80003a24:	0ad7fa63          	bleu	a3,a5,80003ad8 <API_DealocateTask+0x2bc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:201
            printsv("\t\tThis application still need to run: ", (applications[app_id].appExec - applications[app_id].executed));
80003a28:	800227b7          	lui	a5,0x80022
80003a2c:	fd842703          	lw	a4,-40(s0)
80003a30:	6bc78693          	addi	a3,a5,1724 # 800226bc <__stack_top+0xfffdf4bc>
80003a34:	00070793          	mv	a5,a4
80003a38:	00279793          	slli	a5,a5,0x2
80003a3c:	00e787b3          	add	a5,a5,a4
80003a40:	00579793          	slli	a5,a5,0x5
80003a44:	00f687b3          	add	a5,a3,a5
80003a48:	00c7a683          	lw	a3,12(a5)
80003a4c:	80022637          	lui	a2,0x80022
80003a50:	fd842703          	lw	a4,-40(s0)
80003a54:	00070793          	mv	a5,a4
80003a58:	00279793          	slli	a5,a5,0x2
80003a5c:	00e787b3          	add	a5,a5,a4
80003a60:	00579793          	slli	a5,a5,0x5
80003a64:	6bc60713          	addi	a4,a2,1724 # 800226bc <__stack_top+0xfffdf4bc>
80003a68:	00e787b3          	add	a5,a5,a4
80003a6c:	0907a783          	lw	a5,144(a5)
80003a70:	40f687b3          	sub	a5,a3,a5
80003a74:	00078593          	mv	a1,a5
80003a78:	800087b7          	lui	a5,0x80008
80003a7c:	fc078513          	addi	a0,a5,-64 # 80007fc0 <__stack_top+0xfffc4dc0>
80003a80:	52c020ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:202
            applications[app_id].nextRun = tick + applications[app_id].appPeriod;
80003a84:	800227b7          	lui	a5,0x80022
80003a88:	fd842703          	lw	a4,-40(s0)
80003a8c:	6bc78693          	addi	a3,a5,1724 # 800226bc <__stack_top+0xfffdf4bc>
80003a90:	00070793          	mv	a5,a4
80003a94:	00279793          	slli	a5,a5,0x2
80003a98:	00e787b3          	add	a5,a5,a4
80003a9c:	00579793          	slli	a5,a5,0x5
80003aa0:	00f687b3          	add	a5,a3,a5
80003aa4:	0087a703          	lw	a4,8(a5)
80003aa8:	fe842783          	lw	a5,-24(s0)
80003aac:	00f706b3          	add	a3,a4,a5
80003ab0:	800227b7          	lui	a5,0x80022
80003ab4:	fd842703          	lw	a4,-40(s0)
80003ab8:	6bc78613          	addi	a2,a5,1724 # 800226bc <__stack_top+0xfffdf4bc>
80003abc:	00070793          	mv	a5,a4
80003ac0:	00279793          	slli	a5,a5,0x2
80003ac4:	00e787b3          	add	a5,a5,a4
80003ac8:	00579793          	slli	a5,a5,0x5
80003acc:	00f607b3          	add	a5,a2,a5
80003ad0:	08d7a623          	sw	a3,140(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:217
            }
            API_SystemFinish = TRUE;
            //_exit(0xfe10);
        }        
    }
    return;
80003ad4:	08c0006f          	j	80003b60 <API_DealocateTask+0x344>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:204
            prints("\t\tThis application is DONE!\n");
80003ad8:	800087b7          	lui	a5,0x80008
80003adc:	fe878513          	addi	a0,a5,-24 # 80007fe8 <__stack_top+0xfffc4de8>
80003ae0:	420020ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:205
            applications[app_id].occupied = FALSE;
80003ae4:	800226b7          	lui	a3,0x80022
80003ae8:	fd842703          	lw	a4,-40(s0)
80003aec:	00070793          	mv	a5,a4
80003af0:	00279793          	slli	a5,a5,0x2
80003af4:	00e787b3          	add	a5,a5,a4
80003af8:	00579793          	slli	a5,a5,0x5
80003afc:	6bc68713          	addi	a4,a3,1724 # 800226bc <__stack_top+0xfffdf4bc>
80003b00:	00e787b3          	add	a5,a5,a4
80003b04:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:208
            for(i = 0; i < NUM_MAX_APPS; i++){
80003b08:	fe042623          	sw	zero,-20(s0)
80003b0c:	03c0006f          	j	80003b48 <API_DealocateTask+0x32c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:209
                if (applications[i].occupied == TRUE){
80003b10:	800226b7          	lui	a3,0x80022
80003b14:	fec42703          	lw	a4,-20(s0)
80003b18:	00070793          	mv	a5,a4
80003b1c:	00279793          	slli	a5,a5,0x2
80003b20:	00e787b3          	add	a5,a5,a4
80003b24:	00579793          	slli	a5,a5,0x5
80003b28:	6bc68713          	addi	a4,a3,1724 # 800226bc <__stack_top+0xfffdf4bc>
80003b2c:	00e787b3          	add	a5,a5,a4
80003b30:	0007a703          	lw	a4,0(a5)
80003b34:	00100793          	li	a5,1
80003b38:	02f70863          	beq	a4,a5,80003b68 <API_DealocateTask+0x34c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:208 (discriminator 2)
            for(i = 0; i < NUM_MAX_APPS; i++){
80003b3c:	fec42783          	lw	a5,-20(s0)
80003b40:	00178793          	addi	a5,a5,1
80003b44:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:208 (discriminator 1)
80003b48:	fec42703          	lw	a4,-20(s0)
80003b4c:	00b00793          	li	a5,11
80003b50:	fce7f0e3          	bleu	a4,a5,80003b10 <API_DealocateTask+0x2f4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:213
            API_SystemFinish = TRUE;
80003b54:	00100713          	li	a4,1
80003b58:	98e1a823          	sw	a4,-1648(gp) # 80008900 <API_SystemFinish>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:217
    return;
80003b5c:	00000013          	nop
80003b60:	00000013          	nop
80003b64:	0080006f          	j	80003b6c <API_DealocateTask+0x350>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:210
                    return;
80003b68:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:218
}
80003b6c:	02c12083          	lw	ra,44(sp)
80003b70:	02812403          	lw	s0,40(sp)
80003b74:	03010113          	addi	sp,sp,48
80003b78:	00008067          	ret

80003b7c <getNextPriorityAddr>:
getNextPriorityAddr():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:221

// Gets the address of the next tile in the priority list 
unsigned int getNextPriorityAddr(){
80003b7c:	fe010113          	addi	sp,sp,-32
80003b80:	00112e23          	sw	ra,28(sp)
80003b84:	00812c23          	sw	s0,24(sp)
80003b88:	00912a23          	sw	s1,20(sp)
80003b8c:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:223
    int i;
    unsigned int addr = makeAddress(0,0);
80003b90:	00000593          	li	a1,0
80003b94:	00000513          	li	a0,0
80003b98:	031020ef          	jal	ra,800063c8 <makeAddress>
80003b9c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:226
    for(;;){
        // Checks if it's a valid address
        if (priorityMatrix[priorityPointer] != makeAddress(0,0)){
80003ba0:	800237b7          	lui	a5,0x80023
80003ba4:	e647a703          	lw	a4,-412(a5) # 80022e64 <__stack_top+0xfffdfc64>
80003ba8:	800227b7          	lui	a5,0x80022
80003bac:	00271713          	slli	a4,a4,0x2
80003bb0:	69878793          	addi	a5,a5,1688 # 80022698 <__stack_top+0xfffdf498>
80003bb4:	00f707b3          	add	a5,a4,a5
80003bb8:	0007a483          	lw	s1,0(a5)
80003bbc:	00000593          	li	a1,0
80003bc0:	00000513          	li	a0,0
80003bc4:	005020ef          	jal	ra,800063c8 <makeAddress>
80003bc8:	00050793          	mv	a5,a0
80003bcc:	06f48e63          	beq	s1,a5,80003c48 <getNextPriorityAddr+0xcc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:227
            if (Tiles[getXpos(addr)][getYpos(addr)].taskSlots > 0){
80003bd0:	fec42503          	lw	a0,-20(s0)
80003bd4:	480020ef          	jal	ra,80006054 <getXpos>
80003bd8:	00050493          	mv	s1,a0
80003bdc:	fec42503          	lw	a0,-20(s0)
80003be0:	4a0020ef          	jal	ra,80006080 <getYpos>
80003be4:	00050613          	mv	a2,a0
80003be8:	800237b7          	lui	a5,0x80023
80003bec:	e6878693          	addi	a3,a5,-408 # 80022e68 <__stack_top+0xfffdfc68>
80003bf0:	00060713          	mv	a4,a2
80003bf4:	00171793          	slli	a5,a4,0x1
80003bf8:	00078713          	mv	a4,a5
80003bfc:	00c70733          	add	a4,a4,a2
80003c00:	00271793          	slli	a5,a4,0x2
80003c04:	00078713          	mv	a4,a5
80003c08:	00048793          	mv	a5,s1
80003c0c:	00379793          	slli	a5,a5,0x3
80003c10:	009787b3          	add	a5,a5,s1
80003c14:	00279793          	slli	a5,a5,0x2
80003c18:	00f707b3          	add	a5,a4,a5
80003c1c:	00f687b3          	add	a5,a3,a5
80003c20:	0087a783          	lw	a5,8(a5)
80003c24:	02078263          	beqz	a5,80003c48 <getNextPriorityAddr+0xcc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:230
            //for(i = 0; i < NUM_MAX_TASKS; i++){
                //if (Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] == NONE)
                    addr = priorityMatrix[priorityPointer];
80003c28:	800237b7          	lui	a5,0x80023
80003c2c:	e647a703          	lw	a4,-412(a5) # 80022e64 <__stack_top+0xfffdfc64>
80003c30:	800227b7          	lui	a5,0x80022
80003c34:	00271713          	slli	a4,a4,0x2
80003c38:	69878793          	addi	a5,a5,1688 # 80022698 <__stack_top+0xfffdf498>
80003c3c:	00f707b3          	add	a5,a4,a5
80003c40:	0007a783          	lw	a5,0(a5)
80003c44:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:236
            //}
            }
        }

        // Increments the priorityPointer
        priorityPointer++;
80003c48:	800237b7          	lui	a5,0x80023
80003c4c:	e647a783          	lw	a5,-412(a5) # 80022e64 <__stack_top+0xfffdfc64>
80003c50:	00178713          	addi	a4,a5,1
80003c54:	800237b7          	lui	a5,0x80023
80003c58:	e6e7a223          	sw	a4,-412(a5) # 80022e64 <__stack_top+0xfffdfc64>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:237
        if (priorityPointer == DIM_X*DIM_Y)
80003c5c:	800237b7          	lui	a5,0x80023
80003c60:	e647a703          	lw	a4,-412(a5) # 80022e64 <__stack_top+0xfffdfc64>
80003c64:	00900793          	li	a5,9
80003c68:	00f71663          	bne	a4,a5,80003c74 <getNextPriorityAddr+0xf8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:238
            priorityPointer = 0;
80003c6c:	800237b7          	lui	a5,0x80023
80003c70:	e607a223          	sw	zero,-412(a5) # 80022e64 <__stack_top+0xfffdfc64>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:241

        // If we found a new valid address, return
        if( addr != makeAddress(0,0))
80003c74:	00000593          	li	a1,0
80003c78:	00000513          	li	a0,0
80003c7c:	74c020ef          	jal	ra,800063c8 <makeAddress>
80003c80:	00050713          	mv	a4,a0
80003c84:	fec42783          	lw	a5,-20(s0)
80003c88:	00e79463          	bne	a5,a4,80003c90 <getNextPriorityAddr+0x114>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:226
        if (priorityMatrix[priorityPointer] != makeAddress(0,0)){
80003c8c:	f15ff06f          	j	80003ba0 <getNextPriorityAddr+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:242
            break;
80003c90:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:244
    }
    return addr;
80003c94:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:246
    //return 0x101;
}
80003c98:	00078513          	mv	a0,a5
80003c9c:	01c12083          	lw	ra,28(sp)
80003ca0:	01812403          	lw	s0,24(sp)
80003ca4:	01412483          	lw	s1,20(sp)
80003ca8:	02010113          	addi	sp,sp,32
80003cac:	00008067          	ret

80003cb0 <API_GetTaskSlotFromTile>:
API_GetTaskSlotFromTile():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:249

// Gets a free slot from one given tile
unsigned int API_GetTaskSlotFromTile(unsigned int addr, unsigned int app, unsigned int task){
80003cb0:	fe010113          	addi	sp,sp,-32
80003cb4:	00112e23          	sw	ra,28(sp)
80003cb8:	00812c23          	sw	s0,24(sp)
80003cbc:	00912a23          	sw	s1,20(sp)
80003cc0:	01212823          	sw	s2,16(sp)
80003cc4:	02010413          	addi	s0,sp,32
80003cc8:	fea42623          	sw	a0,-20(s0)
80003ccc:	feb42423          	sw	a1,-24(s0)
80003cd0:	fec42223          	sw	a2,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:259
            printsv("\t achei!! > ", i);
            Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] = (app << 16) | task;
            return i;
        }
    }*/
    if(Tiles[getXpos(addr)][getYpos(addr)].taskSlots > 0){
80003cd4:	fec42503          	lw	a0,-20(s0)
80003cd8:	37c020ef          	jal	ra,80006054 <getXpos>
80003cdc:	00050493          	mv	s1,a0
80003ce0:	fec42503          	lw	a0,-20(s0)
80003ce4:	39c020ef          	jal	ra,80006080 <getYpos>
80003ce8:	00050613          	mv	a2,a0
80003cec:	800237b7          	lui	a5,0x80023
80003cf0:	e6878693          	addi	a3,a5,-408 # 80022e68 <__stack_top+0xfffdfc68>
80003cf4:	00060713          	mv	a4,a2
80003cf8:	00171793          	slli	a5,a4,0x1
80003cfc:	00078713          	mv	a4,a5
80003d00:	00c70733          	add	a4,a4,a2
80003d04:	00271793          	slli	a5,a4,0x2
80003d08:	00078713          	mv	a4,a5
80003d0c:	00048793          	mv	a5,s1
80003d10:	00379793          	slli	a5,a5,0x3
80003d14:	009787b3          	add	a5,a5,s1
80003d18:	00279793          	slli	a5,a5,0x2
80003d1c:	00f707b3          	add	a5,a4,a5
80003d20:	00f687b3          	add	a5,a3,a5
80003d24:	0087a783          	lw	a5,8(a5)
80003d28:	0a078c63          	beqz	a5,80003de0 <API_GetTaskSlotFromTile+0x130>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:260
        Tiles[getXpos(addr)][getYpos(addr)].taskSlots = Tiles[getXpos(addr)][getYpos(addr)].taskSlots - 1;
80003d2c:	fec42503          	lw	a0,-20(s0)
80003d30:	324020ef          	jal	ra,80006054 <getXpos>
80003d34:	00050493          	mv	s1,a0
80003d38:	fec42503          	lw	a0,-20(s0)
80003d3c:	344020ef          	jal	ra,80006080 <getYpos>
80003d40:	00050613          	mv	a2,a0
80003d44:	800237b7          	lui	a5,0x80023
80003d48:	e6878693          	addi	a3,a5,-408 # 80022e68 <__stack_top+0xfffdfc68>
80003d4c:	00060713          	mv	a4,a2
80003d50:	00171793          	slli	a5,a4,0x1
80003d54:	00078713          	mv	a4,a5
80003d58:	00c70733          	add	a4,a4,a2
80003d5c:	00271793          	slli	a5,a4,0x2
80003d60:	00078713          	mv	a4,a5
80003d64:	00048793          	mv	a5,s1
80003d68:	00379793          	slli	a5,a5,0x3
80003d6c:	009787b3          	add	a5,a5,s1
80003d70:	00279793          	slli	a5,a5,0x2
80003d74:	00f707b3          	add	a5,a4,a5
80003d78:	00f687b3          	add	a5,a3,a5
80003d7c:	0087a483          	lw	s1,8(a5)
80003d80:	fec42503          	lw	a0,-20(s0)
80003d84:	2d0020ef          	jal	ra,80006054 <getXpos>
80003d88:	00050913          	mv	s2,a0
80003d8c:	fec42503          	lw	a0,-20(s0)
80003d90:	2f0020ef          	jal	ra,80006080 <getYpos>
80003d94:	00050593          	mv	a1,a0
80003d98:	fff48693          	addi	a3,s1,-1
80003d9c:	800237b7          	lui	a5,0x80023
80003da0:	e6878613          	addi	a2,a5,-408 # 80022e68 <__stack_top+0xfffdfc68>
80003da4:	00058713          	mv	a4,a1
80003da8:	00171793          	slli	a5,a4,0x1
80003dac:	00078713          	mv	a4,a5
80003db0:	00b70733          	add	a4,a4,a1
80003db4:	00271793          	slli	a5,a4,0x2
80003db8:	00078713          	mv	a4,a5
80003dbc:	00090793          	mv	a5,s2
80003dc0:	00379793          	slli	a5,a5,0x3
80003dc4:	012787b3          	add	a5,a5,s2
80003dc8:	00279793          	slli	a5,a5,0x2
80003dcc:	00f707b3          	add	a5,a4,a5
80003dd0:	00f607b3          	add	a5,a2,a5
80003dd4:	00d7a423          	sw	a3,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:261
        return 1;
80003dd8:	00100793          	li	a5,1
80003ddc:	0140006f          	j	80003df0 <API_GetTaskSlotFromTile+0x140>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:263
    }else {
        prints("returning erro5\n");
80003de0:	800087b7          	lui	a5,0x80008
80003de4:	00878513          	addi	a0,a5,8 # 80008008 <__stack_top+0xfffc4e08>
80003de8:	118020ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:264
        return ERRO;
80003dec:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:266
    }
}
80003df0:	00078513          	mv	a0,a5
80003df4:	01c12083          	lw	ra,28(sp)
80003df8:	01812403          	lw	s0,24(sp)
80003dfc:	01412483          	lw	s1,20(sp)
80003e00:	01012903          	lw	s2,16(sp)
80003e04:	02010113          	addi	sp,sp,32
80003e08:	00008067          	ret

80003e0c <API_ClearTaskSlotFromTile>:
API_ClearTaskSlotFromTile():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:269

// Clear a slot occupied by a given task
unsigned int API_ClearTaskSlotFromTile(unsigned int addr, unsigned int app, unsigned int task){
80003e0c:	fe010113          	addi	sp,sp,-32
80003e10:	00112e23          	sw	ra,28(sp)
80003e14:	00812c23          	sw	s0,24(sp)
80003e18:	00912a23          	sw	s1,20(sp)
80003e1c:	02010413          	addi	s0,sp,32
80003e20:	fea42623          	sw	a0,-20(s0)
80003e24:	feb42423          	sw	a1,-24(s0)
80003e28:	fec42223          	sw	a2,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:270
    Tiles[getXpos(addr)][getYpos(addr)].taskSlots++;
80003e2c:	fec42503          	lw	a0,-20(s0)
80003e30:	224020ef          	jal	ra,80006054 <getXpos>
80003e34:	00050493          	mv	s1,a0
80003e38:	fec42503          	lw	a0,-20(s0)
80003e3c:	244020ef          	jal	ra,80006080 <getYpos>
80003e40:	00050693          	mv	a3,a0
80003e44:	800237b7          	lui	a5,0x80023
80003e48:	e6878613          	addi	a2,a5,-408 # 80022e68 <__stack_top+0xfffdfc68>
80003e4c:	00068713          	mv	a4,a3
80003e50:	00171793          	slli	a5,a4,0x1
80003e54:	00078713          	mv	a4,a5
80003e58:	00d70733          	add	a4,a4,a3
80003e5c:	00271793          	slli	a5,a4,0x2
80003e60:	00078713          	mv	a4,a5
80003e64:	00048793          	mv	a5,s1
80003e68:	00379793          	slli	a5,a5,0x3
80003e6c:	009787b3          	add	a5,a5,s1
80003e70:	00279793          	slli	a5,a5,0x2
80003e74:	00f707b3          	add	a5,a4,a5
80003e78:	00f607b3          	add	a5,a2,a5
80003e7c:	0087a783          	lw	a5,8(a5)
80003e80:	00178613          	addi	a2,a5,1
80003e84:	800237b7          	lui	a5,0x80023
80003e88:	e6878593          	addi	a1,a5,-408 # 80022e68 <__stack_top+0xfffdfc68>
80003e8c:	00068713          	mv	a4,a3
80003e90:	00171793          	slli	a5,a4,0x1
80003e94:	00078713          	mv	a4,a5
80003e98:	00d70733          	add	a4,a4,a3
80003e9c:	00271793          	slli	a5,a4,0x2
80003ea0:	00078713          	mv	a4,a5
80003ea4:	00048793          	mv	a5,s1
80003ea8:	00379793          	slli	a5,a5,0x3
80003eac:	009787b3          	add	a5,a5,s1
80003eb0:	00279793          	slli	a5,a5,0x2
80003eb4:	00f707b3          	add	a5,a4,a5
80003eb8:	00f587b3          	add	a5,a1,a5
80003ebc:	00c7a423          	sw	a2,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:271
    if(Tiles[getXpos(addr)][getYpos(addr)].taskSlots > NUM_MAX_TASKS){
80003ec0:	fec42503          	lw	a0,-20(s0)
80003ec4:	190020ef          	jal	ra,80006054 <getXpos>
80003ec8:	00050493          	mv	s1,a0
80003ecc:	fec42503          	lw	a0,-20(s0)
80003ed0:	1b0020ef          	jal	ra,80006080 <getYpos>
80003ed4:	00050613          	mv	a2,a0
80003ed8:	800237b7          	lui	a5,0x80023
80003edc:	e6878693          	addi	a3,a5,-408 # 80022e68 <__stack_top+0xfffdfc68>
80003ee0:	00060713          	mv	a4,a2
80003ee4:	00171793          	slli	a5,a4,0x1
80003ee8:	00078713          	mv	a4,a5
80003eec:	00c70733          	add	a4,a4,a2
80003ef0:	00271793          	slli	a5,a4,0x2
80003ef4:	00078713          	mv	a4,a5
80003ef8:	00048793          	mv	a5,s1
80003efc:	00379793          	slli	a5,a5,0x3
80003f00:	009787b3          	add	a5,a5,s1
80003f04:	00279793          	slli	a5,a5,0x2
80003f08:	00f707b3          	add	a5,a4,a5
80003f0c:	00f687b3          	add	a5,a3,a5
80003f10:	0087a703          	lw	a4,8(a5)
80003f14:	00600793          	li	a5,6
80003f18:	00e7fc63          	bleu	a4,a5,80003f30 <API_ClearTaskSlotFromTile+0x124>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:272
        prints("returning erro6\n");
80003f1c:	800087b7          	lui	a5,0x80008
80003f20:	01c78513          	addi	a0,a5,28 # 8000801c <__stack_top+0xfffc4e1c>
80003f24:	7dd010ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:273
        return ERRO;
80003f28:	fff00793          	li	a5,-1
80003f2c:	0080006f          	j	80003f34 <API_ClearTaskSlotFromTile+0x128>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:276
    }
    else{
        return 1;
80003f30:	00100793          	li	a5,1
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:280
    }
    prints("returning erro7\n");
    return ERRO;
}
80003f34:	00078513          	mv	a0,a5
80003f38:	01c12083          	lw	ra,28(sp)
80003f3c:	01812403          	lw	s0,24(sp)
80003f40:	01412483          	lw	s1,20(sp)
80003f44:	02010113          	addi	sp,sp,32
80003f48:	00008067          	ret

80003f4c <API_GetSystemTasksSlots>:
API_GetSystemTasksSlots():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:283

// Iterates around the system tiles to sum the amount of tasks slots available
unsigned int API_GetSystemTasksSlots(){
80003f4c:	fe010113          	addi	sp,sp,-32
80003f50:	00112e23          	sw	ra,28(sp)
80003f54:	00812c23          	sw	s0,24(sp)
80003f58:	00912a23          	sw	s1,20(sp)
80003f5c:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:285
    int m, n, i, sum;
    sum = 0;
80003f60:	fe042223          	sw	zero,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:286
    for(m = 0; m < DIM_X; m++){
80003f64:	fe042623          	sw	zero,-20(s0)
80003f68:	0a80006f          	j	80004010 <API_GetSystemTasksSlots+0xc4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:287
        for(n = 0; n < DIM_Y; n++){
80003f6c:	fe042423          	sw	zero,-24(s0)
80003f70:	0880006f          	j	80003ff8 <API_GetSystemTasksSlots+0xac>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:288
            if(makeAddress(m,n) != makeAddress(0,0)){
80003f74:	fec42783          	lw	a5,-20(s0)
80003f78:	fe842703          	lw	a4,-24(s0)
80003f7c:	00070593          	mv	a1,a4
80003f80:	00078513          	mv	a0,a5
80003f84:	444020ef          	jal	ra,800063c8 <makeAddress>
80003f88:	00050493          	mv	s1,a0
80003f8c:	00000593          	li	a1,0
80003f90:	00000513          	li	a0,0
80003f94:	434020ef          	jal	ra,800063c8 <makeAddress>
80003f98:	00050793          	mv	a5,a0
80003f9c:	04f48863          	beq	s1,a5,80003fec <API_GetSystemTasksSlots+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:289
                sum += Tiles[m][n].taskSlots;
80003fa0:	80023737          	lui	a4,0x80023
80003fa4:	fe842783          	lw	a5,-24(s0)
80003fa8:	fec42683          	lw	a3,-20(s0)
80003fac:	e6870613          	addi	a2,a4,-408 # 80022e68 <__stack_top+0xfffdfc68>
80003fb0:	00078713          	mv	a4,a5
80003fb4:	00171713          	slli	a4,a4,0x1
80003fb8:	00f70733          	add	a4,a4,a5
80003fbc:	00271793          	slli	a5,a4,0x2
80003fc0:	00078713          	mv	a4,a5
80003fc4:	00068793          	mv	a5,a3
80003fc8:	00379793          	slli	a5,a5,0x3
80003fcc:	00d787b3          	add	a5,a5,a3
80003fd0:	00279793          	slli	a5,a5,0x2
80003fd4:	00f707b3          	add	a5,a4,a5
80003fd8:	00f607b3          	add	a5,a2,a5
80003fdc:	0087a703          	lw	a4,8(a5)
80003fe0:	fe442783          	lw	a5,-28(s0)
80003fe4:	00f707b3          	add	a5,a4,a5
80003fe8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:287 (discriminator 2)
        for(n = 0; n < DIM_Y; n++){
80003fec:	fe842783          	lw	a5,-24(s0)
80003ff0:	00178793          	addi	a5,a5,1
80003ff4:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:287 (discriminator 1)
80003ff8:	fe842703          	lw	a4,-24(s0)
80003ffc:	00200793          	li	a5,2
80004000:	f6e7dae3          	ble	a4,a5,80003f74 <API_GetSystemTasksSlots+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:286 (discriminator 2)
    for(m = 0; m < DIM_X; m++){
80004004:	fec42783          	lw	a5,-20(s0)
80004008:	00178793          	addi	a5,a5,1
8000400c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:286 (discriminator 1)
80004010:	fec42703          	lw	a4,-20(s0)
80004014:	00200793          	li	a5,2
80004018:	f4e7dae3          	ble	a4,a5,80003f6c <API_GetSystemTasksSlots+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:293
            }
        }
    }
    return sum;
8000401c:	fe442783          	lw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:294
}
80004020:	00078513          	mv	a0,a5
80004024:	01c12083          	lw	ra,28(sp)
80004028:	01812403          	lw	s0,24(sp)
8000402c:	01412483          	lw	s1,20(sp)
80004030:	02010113          	addi	sp,sp,32
80004034:	00008067          	ret

80004038 <API_RepositoryAllocation>:
API_RepositoryAllocation():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:296

void API_RepositoryAllocation(unsigned int app, unsigned int task, unsigned int dest_addr){
80004038:	fd010113          	addi	sp,sp,-48
8000403c:	02112623          	sw	ra,44(sp)
80004040:	02812423          	sw	s0,40(sp)
80004044:	03010413          	addi	s0,sp,48
80004048:	fca42e23          	sw	a0,-36(s0)
8000404c:	fcb42c23          	sw	a1,-40(s0)
80004050:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:299
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80004054:	0ec010ef          	jal	ra,80005140 <API_GetServiceSlot>
80004058:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:300
        if(mySlot == PIPE_FULL){
8000405c:	fec42703          	lw	a4,-20(s0)
80004060:	fdfe07b7          	lui	a5,0xfdfe0
80004064:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9cbfd>
80004068:	00f71463          	bne	a4,a5,80004070 <API_RepositoryAllocation+0x38>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:302
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
8000406c:	194030ef          	jal	ra,80007200 <API_NI_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:304
        }
    }while(mySlot == PIPE_FULL);
80004070:	fec42703          	lw	a4,-20(s0)
80004074:	fdfe07b7          	lui	a5,0xfdfe0
80004078:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9cbfd>
8000407c:	fcf70ce3          	beq	a4,a5,80004054 <API_RepositoryAllocation+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:305
    printsv("I got a free service slo-!! -> ", mySlot);
80004080:	fec42783          	lw	a5,-20(s0)
80004084:	00078593          	mv	a1,a5
80004088:	800087b7          	lui	a5,0x80008
8000408c:	03078513          	addi	a0,a5,48 # 80008030 <__stack_top+0xfffc4e30>
80004090:	71d010ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:307

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80004094:	800227b7          	lui	a5,0x80022
80004098:	fec42703          	lw	a4,-20(s0)
8000409c:	9dc78693          	addi	a3,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
800040a0:	00070793          	mv	a5,a4
800040a4:	00479793          	slli	a5,a5,0x4
800040a8:	40e787b3          	sub	a5,a5,a4
800040ac:	00279793          	slli	a5,a5,0x2
800040b0:	00f687b3          	add	a5,a3,a5
800040b4:	feff0737          	lui	a4,0xfeff0
800040b8:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efaccfe>
800040bc:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:309

    ServicePipe[mySlot].header.header           = makeAddress(0, 0) | PERIPH_SOUTH;
800040c0:	00000593          	li	a1,0
800040c4:	00000513          	li	a0,0
800040c8:	300020ef          	jal	ra,800063c8 <makeAddress>
800040cc:	00050713          	mv	a4,a0
800040d0:	000407b7          	lui	a5,0x40
800040d4:	00f766b3          	or	a3,a4,a5
800040d8:	800227b7          	lui	a5,0x80022
800040dc:	fec42703          	lw	a4,-20(s0)
800040e0:	9dc78613          	addi	a2,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
800040e4:	00070793          	mv	a5,a4
800040e8:	00479793          	slli	a5,a5,0x4
800040ec:	40e787b3          	sub	a5,a5,a4
800040f0:	00279793          	slli	a5,a5,0x2
800040f4:	00f607b3          	add	a5,a2,a5
800040f8:	00d7a423          	sw	a3,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:310
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
800040fc:	800227b7          	lui	a5,0x80022
80004100:	fec42703          	lw	a4,-20(s0)
80004104:	9dc78693          	addi	a3,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
80004108:	00070793          	mv	a5,a4
8000410c:	00479793          	slli	a5,a5,0x4
80004110:	40e787b3          	sub	a5,a5,a4
80004114:	00279793          	slli	a5,a5,0x2
80004118:	00f687b3          	add	a5,a3,a5
8000411c:	00b00713          	li	a4,11
80004120:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:311
    ServicePipe[mySlot].header.service          = TASK_ALLOCATION_SEND;
80004124:	800227b7          	lui	a5,0x80022
80004128:	fec42703          	lw	a4,-20(s0)
8000412c:	9dc78693          	addi	a3,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
80004130:	00070793          	mv	a5,a4
80004134:	00479793          	slli	a5,a5,0x4
80004138:	40e787b3          	sub	a5,a5,a4
8000413c:	00279793          	slli	a5,a5,0x2
80004140:	00f687b3          	add	a5,a3,a5
80004144:	03000713          	li	a4,48
80004148:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:312
    ServicePipe[mySlot].header.task_id          = task;
8000414c:	800227b7          	lui	a5,0x80022
80004150:	fec42703          	lw	a4,-20(s0)
80004154:	9dc78693          	addi	a3,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
80004158:	00070793          	mv	a5,a4
8000415c:	00479793          	slli	a5,a5,0x4
80004160:	40e787b3          	sub	a5,a5,a4
80004164:	00279793          	slli	a5,a5,0x2
80004168:	00f687b3          	add	a5,a3,a5
8000416c:	fd842703          	lw	a4,-40(s0)
80004170:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:313
    ServicePipe[mySlot].header.task_app_id      = app;
80004174:	800227b7          	lui	a5,0x80022
80004178:	fec42703          	lw	a4,-20(s0)
8000417c:	9dc78693          	addi	a3,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
80004180:	00070793          	mv	a5,a4
80004184:	00479793          	slli	a5,a5,0x4
80004188:	40e787b3          	sub	a5,a5,a4
8000418c:	00279793          	slli	a5,a5,0x2
80004190:	00f687b3          	add	a5,a3,a5
80004194:	fdc42703          	lw	a4,-36(s0)
80004198:	02e7a223          	sw	a4,36(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:314
    ServicePipe[mySlot].header.task_dest_addr   = dest_addr;
8000419c:	800227b7          	lui	a5,0x80022
800041a0:	fec42703          	lw	a4,-20(s0)
800041a4:	9dc78693          	addi	a3,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
800041a8:	00070793          	mv	a5,a4
800041ac:	00479793          	slli	a5,a5,0x4
800041b0:	40e787b3          	sub	a5,a5,a4
800041b4:	00279793          	slli	a5,a5,0x2
800041b8:	00f687b3          	add	a5,a3,a5
800041bc:	fd442703          	lw	a4,-44(s0)
800041c0:	02e7ac23          	sw	a4,56(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:316

    API_PushSendQueue(SERVICE, mySlot);
800041c4:	fec42583          	lw	a1,-20(s0)
800041c8:	10100537          	lui	a0,0x10100
800041cc:	23c020ef          	jal	ra,80006408 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:317
    return;    
800041d0:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:318
}
800041d4:	02c12083          	lw	ra,44(sp)
800041d8:	02812403          	lw	s0,40(sp)
800041dc:	03010113          	addi	sp,sp,48
800041e0:	00008067          	ret

800041e4 <API_TaskAllocated>:
API_TaskAllocated():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:320

void API_TaskAllocated(unsigned int task_id, unsigned int app_id){
800041e4:	fd010113          	addi	sp,sp,-48
800041e8:	02112623          	sw	ra,44(sp)
800041ec:	02812423          	sw	s0,40(sp)
800041f0:	03010413          	addi	s0,sp,48
800041f4:	fca42e23          	sw	a0,-36(s0)
800041f8:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:322
    unsigned int i;
    applications[app_id].tasks[task_id].status = TASK_ALLOCATED;
800041fc:	80022737          	lui	a4,0x80022
80004200:	fdc42783          	lw	a5,-36(s0)
80004204:	fd842683          	lw	a3,-40(s0)
80004208:	6bc70613          	addi	a2,a4,1724 # 800226bc <__stack_top+0xfffdf4bc>
8000420c:	00078713          	mv	a4,a5
80004210:	00171713          	slli	a4,a4,0x1
80004214:	00f70733          	add	a4,a4,a5
80004218:	00271793          	slli	a5,a4,0x2
8000421c:	00078713          	mv	a4,a5
80004220:	00068793          	mv	a5,a3
80004224:	00279793          	slli	a5,a5,0x2
80004228:	00d787b3          	add	a5,a5,a3
8000422c:	00579793          	slli	a5,a5,0x5
80004230:	00f707b3          	add	a5,a4,a5
80004234:	00f607b3          	add	a5,a2,a5
80004238:	00400713          	li	a4,4
8000423c:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:324

    for(i = 0; i < applications[app_id].numTasks; i++){
80004240:	fe042623          	sw	zero,-20(s0)
80004244:	0580006f          	j	8000429c <API_TaskAllocated+0xb8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:325
        if(applications[app_id].tasks[i].status != TASK_ALLOCATED){
80004248:	80022737          	lui	a4,0x80022
8000424c:	fec42783          	lw	a5,-20(s0)
80004250:	fd842683          	lw	a3,-40(s0)
80004254:	6bc70613          	addi	a2,a4,1724 # 800226bc <__stack_top+0xfffdf4bc>
80004258:	00078713          	mv	a4,a5
8000425c:	00171713          	slli	a4,a4,0x1
80004260:	00f70733          	add	a4,a4,a5
80004264:	00271793          	slli	a5,a4,0x2
80004268:	00078713          	mv	a4,a5
8000426c:	00068793          	mv	a5,a3
80004270:	00279793          	slli	a5,a5,0x2
80004274:	00d787b3          	add	a5,a5,a3
80004278:	00579793          	slli	a5,a5,0x5
8000427c:	00f707b3          	add	a5,a4,a5
80004280:	00f607b3          	add	a5,a2,a5
80004284:	0147a703          	lw	a4,20(a5)
80004288:	00400793          	li	a5,4
8000428c:	06f71663          	bne	a4,a5,800042f8 <API_TaskAllocated+0x114>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:324 (discriminator 2)
    for(i = 0; i < applications[app_id].numTasks; i++){
80004290:	fec42783          	lw	a5,-20(s0)
80004294:	00178793          	addi	a5,a5,1
80004298:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:324 (discriminator 1)
8000429c:	800226b7          	lui	a3,0x80022
800042a0:	fd842703          	lw	a4,-40(s0)
800042a4:	00070793          	mv	a5,a4
800042a8:	00279793          	slli	a5,a5,0x2
800042ac:	00e787b3          	add	a5,a5,a4
800042b0:	00579793          	slli	a5,a5,0x5
800042b4:	6bc68713          	addi	a4,a3,1724 # 800226bc <__stack_top+0xfffdf4bc>
800042b8:	00e787b3          	add	a5,a5,a4
800042bc:	0107a783          	lw	a5,16(a5)
800042c0:	fec42703          	lw	a4,-20(s0)
800042c4:	f8f762e3          	bltu	a4,a5,80004248 <API_TaskAllocated+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:330
            //printi(i);
            return;
        }
    }
    printsv("Application allocated: ", app_id);
800042c8:	fd842783          	lw	a5,-40(s0)
800042cc:	00078593          	mv	a1,a5
800042d0:	800087b7          	lui	a5,0x80008
800042d4:	05078513          	addi	a0,a5,80 # 80008050 <__stack_top+0xfffc4e50>
800042d8:	4d5010ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:331
    API_ApplicationStart(app_id);
800042dc:	fd842503          	lw	a0,-40(s0)
800042e0:	02c000ef          	jal	ra,8000430c <API_ApplicationStart>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:332
    prints("\tStart command sent to every task.\n");
800042e4:	800087b7          	lui	a5,0x80008
800042e8:	06878513          	addi	a0,a5,104 # 80008068 <__stack_top+0xfffc4e68>
800042ec:	415010ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:333
    return;
800042f0:	00000013          	nop
800042f4:	0080006f          	j	800042fc <API_TaskAllocated+0x118>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:327
            return;
800042f8:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:334
}
800042fc:	02c12083          	lw	ra,44(sp)
80004300:	02812403          	lw	s0,40(sp)
80004304:	03010113          	addi	sp,sp,48
80004308:	00008067          	ret

8000430c <API_ApplicationStart>:
API_ApplicationStart():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:336

void API_ApplicationStart(unsigned int app_id){
8000430c:	fd010113          	addi	sp,sp,-48
80004310:	02112623          	sw	ra,44(sp)
80004314:	02812423          	sw	s0,40(sp)
80004318:	03010413          	addi	s0,sp,48
8000431c:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:339
    unsigned int i, j;
    unsigned int mySlot;
    for(i = 0; i < applications[app_id].numTasks; i++){
80004320:	fe042623          	sw	zero,-20(s0)
80004324:	2640006f          	j	80004588 <API_ApplicationStart+0x27c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:341
        do{
            mySlot = API_GetMessageSlot();
80004328:	4bd000ef          	jal	ra,80004fe4 <API_GetMessageSlot>
8000432c:	fea42223          	sw	a0,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:342
            if(mySlot == PIPE_FULL){
80004330:	fe442703          	lw	a4,-28(s0)
80004334:	fdfe07b7          	lui	a5,0xfdfe0
80004338:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9cbfd>
8000433c:	00f71463          	bne	a4,a5,80004344 <API_ApplicationStart+0x38>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:344
                // Runs the NI Handler to send/receive packets, opening space in the PIPE
                API_NI_Handler();
80004340:	6c1020ef          	jal	ra,80007200 <API_NI_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:346
            }
        }while(mySlot == PIPE_FULL);
80004344:	fe442703          	lw	a4,-28(s0)
80004348:	fdfe07b7          	lui	a5,0xfdfe0
8000434c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9cbfd>
80004350:	fcf70ce3          	beq	a4,a5,80004328 <API_ApplicationStart+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:348

        MessagePipe[mySlot].holder = PIPE_SYS_HOLDER;
80004354:	800227b7          	lui	a5,0x80022
80004358:	fe442683          	lw	a3,-28(s0)
8000435c:	d8478713          	addi	a4,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
80004360:	24400793          	li	a5,580
80004364:	02f687b3          	mul	a5,a3,a5
80004368:	00f707b3          	add	a5,a4,a5
8000436c:	feff0737          	lui	a4,0xfeff0
80004370:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efaccfe>
80004374:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:350

        MessagePipe[mySlot].header.header           = applications[app_id].tasks[i].addr;
80004378:	80022737          	lui	a4,0x80022
8000437c:	fec42783          	lw	a5,-20(s0)
80004380:	fdc42683          	lw	a3,-36(s0)
80004384:	6bc70613          	addi	a2,a4,1724 # 800226bc <__stack_top+0xfffdf4bc>
80004388:	00078713          	mv	a4,a5
8000438c:	00171713          	slli	a4,a4,0x1
80004390:	00f70733          	add	a4,a4,a5
80004394:	00271793          	slli	a5,a4,0x2
80004398:	00078713          	mv	a4,a5
8000439c:	00068793          	mv	a5,a3
800043a0:	00279793          	slli	a5,a5,0x2
800043a4:	00d787b3          	add	a5,a5,a3
800043a8:	00579793          	slli	a5,a5,0x5
800043ac:	00f707b3          	add	a5,a4,a5
800043b0:	00f607b3          	add	a5,a2,a5
800043b4:	0187a703          	lw	a4,24(a5)
800043b8:	800227b7          	lui	a5,0x80022
800043bc:	fe442603          	lw	a2,-28(s0)
800043c0:	d8478693          	addi	a3,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
800043c4:	24400793          	li	a5,580
800043c8:	02f607b3          	mul	a5,a2,a5
800043cc:	00f687b3          	add	a5,a3,a5
800043d0:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:351
        MessagePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE + applications[app_id].numTasks + 1;
800043d4:	800226b7          	lui	a3,0x80022
800043d8:	fdc42703          	lw	a4,-36(s0)
800043dc:	00070793          	mv	a5,a4
800043e0:	00279793          	slli	a5,a5,0x2
800043e4:	00e787b3          	add	a5,a5,a4
800043e8:	00579793          	slli	a5,a5,0x5
800043ec:	6bc68713          	addi	a4,a3,1724 # 800226bc <__stack_top+0xfffdf4bc>
800043f0:	00e787b3          	add	a5,a5,a4
800043f4:	0107a783          	lw	a5,16(a5)
800043f8:	00c78713          	addi	a4,a5,12
800043fc:	800227b7          	lui	a5,0x80022
80004400:	fe442603          	lw	a2,-28(s0)
80004404:	d8478693          	addi	a3,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
80004408:	24400793          	li	a5,580
8000440c:	02f607b3          	mul	a5,a2,a5
80004410:	00f687b3          	add	a5,a3,a5
80004414:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:352
        MessagePipe[mySlot].header.service          = TASK_START;
80004418:	800227b7          	lui	a5,0x80022
8000441c:	fe442683          	lw	a3,-28(s0)
80004420:	d8478713          	addi	a4,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
80004424:	24400793          	li	a5,580
80004428:	02f687b3          	mul	a5,a3,a5
8000442c:	00f707b3          	add	a5,a4,a5
80004430:	40000713          	li	a4,1024
80004434:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:353
        MessagePipe[mySlot].header.task_id          = i;
80004438:	800227b7          	lui	a5,0x80022
8000443c:	fe442683          	lw	a3,-28(s0)
80004440:	d8478713          	addi	a4,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
80004444:	24400793          	li	a5,580
80004448:	02f687b3          	mul	a5,a3,a5
8000444c:	00f707b3          	add	a5,a4,a5
80004450:	fec42703          	lw	a4,-20(s0)
80004454:	00e7ac23          	sw	a4,24(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:354
        MessagePipe[mySlot].header.task_app_id      = app_id;
80004458:	800227b7          	lui	a5,0x80022
8000445c:	fe442683          	lw	a3,-28(s0)
80004460:	d8478713          	addi	a4,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
80004464:	24400793          	li	a5,580
80004468:	02f687b3          	mul	a5,a3,a5
8000446c:	00f707b3          	add	a5,a4,a5
80004470:	fdc42703          	lw	a4,-36(s0)
80004474:	02e7a423          	sw	a4,40(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:355
        MessagePipe[mySlot].msg.length              = applications[app_id].numTasks;
80004478:	800226b7          	lui	a3,0x80022
8000447c:	fdc42703          	lw	a4,-36(s0)
80004480:	00070793          	mv	a5,a4
80004484:	00279793          	slli	a5,a5,0x2
80004488:	00e787b3          	add	a5,a5,a4
8000448c:	00579793          	slli	a5,a5,0x5
80004490:	6bc68713          	addi	a4,a3,1724 # 800226bc <__stack_top+0xfffdf4bc>
80004494:	00e787b3          	add	a5,a5,a4
80004498:	0107a703          	lw	a4,16(a5)
8000449c:	800227b7          	lui	a5,0x80022
800044a0:	fe442603          	lw	a2,-28(s0)
800044a4:	24400693          	li	a3,580
800044a8:	02d606b3          	mul	a3,a2,a3
800044ac:	d8478793          	addi	a5,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
800044b0:	00f687b3          	add	a5,a3,a5
800044b4:	04e7a023          	sw	a4,64(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:356
        for(j = 0; j < applications[app_id].numTasks; j++){
800044b8:	fe042423          	sw	zero,-24(s0)
800044bc:	0880006f          	j	80004544 <API_ApplicationStart+0x238>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:357 (discriminator 3)
            MessagePipe[mySlot].msg.msg[j]          = applications[app_id].tasks[j].addr;
800044c0:	80022737          	lui	a4,0x80022
800044c4:	fe842783          	lw	a5,-24(s0)
800044c8:	fdc42683          	lw	a3,-36(s0)
800044cc:	6bc70613          	addi	a2,a4,1724 # 800226bc <__stack_top+0xfffdf4bc>
800044d0:	00078713          	mv	a4,a5
800044d4:	00171713          	slli	a4,a4,0x1
800044d8:	00f70733          	add	a4,a4,a5
800044dc:	00271793          	slli	a5,a4,0x2
800044e0:	00078713          	mv	a4,a5
800044e4:	00068793          	mv	a5,a3
800044e8:	00279793          	slli	a5,a5,0x2
800044ec:	00d787b3          	add	a5,a5,a3
800044f0:	00579793          	slli	a5,a5,0x5
800044f4:	00f707b3          	add	a5,a4,a5
800044f8:	00f607b3          	add	a5,a2,a5
800044fc:	0187a683          	lw	a3,24(a5)
80004500:	80022637          	lui	a2,0x80022
80004504:	fe442703          	lw	a4,-28(s0)
80004508:	00070793          	mv	a5,a4
8000450c:	00379793          	slli	a5,a5,0x3
80004510:	00e787b3          	add	a5,a5,a4
80004514:	00479793          	slli	a5,a5,0x4
80004518:	00e787b3          	add	a5,a5,a4
8000451c:	fe842703          	lw	a4,-24(s0)
80004520:	00e787b3          	add	a5,a5,a4
80004524:	01078793          	addi	a5,a5,16
80004528:	d8460713          	addi	a4,a2,-636 # 80021d84 <__stack_top+0xfffdeb84>
8000452c:	00279793          	slli	a5,a5,0x2
80004530:	00f707b3          	add	a5,a4,a5
80004534:	00d7a223          	sw	a3,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:356 (discriminator 3)
        for(j = 0; j < applications[app_id].numTasks; j++){
80004538:	fe842783          	lw	a5,-24(s0)
8000453c:	00178793          	addi	a5,a5,1
80004540:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:356 (discriminator 1)
80004544:	800226b7          	lui	a3,0x80022
80004548:	fdc42703          	lw	a4,-36(s0)
8000454c:	00070793          	mv	a5,a4
80004550:	00279793          	slli	a5,a5,0x2
80004554:	00e787b3          	add	a5,a5,a4
80004558:	00579793          	slli	a5,a5,0x5
8000455c:	6bc68713          	addi	a4,a3,1724 # 800226bc <__stack_top+0xfffdf4bc>
80004560:	00e787b3          	add	a5,a5,a4
80004564:	0107a783          	lw	a5,16(a5)
80004568:	fe842703          	lw	a4,-24(s0)
8000456c:	f4f76ae3          	bltu	a4,a5,800044c0 <API_ApplicationStart+0x1b4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:359 (discriminator 2)
        }
        API_PushSendQueue(MESSAGE, mySlot);
80004570:	fe442583          	lw	a1,-28(s0)
80004574:	20200537          	lui	a0,0x20200
80004578:	691010ef          	jal	ra,80006408 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:339 (discriminator 2)
    for(i = 0; i < applications[app_id].numTasks; i++){
8000457c:	fec42783          	lw	a5,-20(s0)
80004580:	00178793          	addi	a5,a5,1
80004584:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:339 (discriminator 1)
80004588:	800226b7          	lui	a3,0x80022
8000458c:	fdc42703          	lw	a4,-36(s0)
80004590:	00070793          	mv	a5,a4
80004594:	00279793          	slli	a5,a5,0x2
80004598:	00e787b3          	add	a5,a5,a4
8000459c:	00579793          	slli	a5,a5,0x5
800045a0:	6bc68713          	addi	a4,a3,1724 # 800226bc <__stack_top+0xfffdf4bc>
800045a4:	00e787b3          	add	a5,a5,a4
800045a8:	0107a783          	lw	a5,16(a5)
800045ac:	fec42703          	lw	a4,-20(s0)
800045b0:	d6f76ce3          	bltu	a4,a5,80004328 <API_ApplicationStart+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:361
    }
    return;
800045b4:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:362
}
800045b8:	02c12083          	lw	ra,44(sp)
800045bc:	02812403          	lw	s0,40(sp)
800045c0:	03010113          	addi	sp,sp,48
800045c4:	00008067          	ret

800045c8 <API_TaskListInit>:
API_TaskListInit():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:13
#include "chronos.h"

// Stores information about each running task
//extern volatile Task TaskList[ NUM_MAX_TASKS ];

void API_TaskListInit(){
800045c8:	fe010113          	addi	sp,sp,-32
800045cc:	00812e23          	sw	s0,28(sp)
800045d0:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:15
    unsigned int i, j;
    for (i = 0; i < NUM_MAX_TASKS; i++){
800045d4:	fe042623          	sw	zero,-20(s0)
800045d8:	0840006f          	j	8000465c <API_TaskListInit+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:16
        TaskList[i].status = TASK_SLOT_EMPTY;
800045dc:	800236b7          	lui	a3,0x80023
800045e0:	fec42703          	lw	a4,-20(s0)
800045e4:	00070793          	mv	a5,a4
800045e8:	00579793          	slli	a5,a5,0x5
800045ec:	00e787b3          	add	a5,a5,a4
800045f0:	00279793          	slli	a5,a5,0x2
800045f4:	ed468713          	addi	a4,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
800045f8:	00e787b3          	add	a5,a5,a4
800045fc:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:17
        for (j = 0; j < NUM_MAX_APP_TASKS; j++){
80004600:	fe042423          	sw	zero,-24(s0)
80004604:	0400006f          	j	80004644 <API_TaskListInit+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:18 (discriminator 3)
            TaskList[i].PendingReq[j] = FALSE;
80004608:	800236b7          	lui	a3,0x80023
8000460c:	fec42703          	lw	a4,-20(s0)
80004610:	00070793          	mv	a5,a4
80004614:	00579793          	slli	a5,a5,0x5
80004618:	00e787b3          	add	a5,a5,a4
8000461c:	fe842703          	lw	a4,-24(s0)
80004620:	00e787b3          	add	a5,a5,a4
80004624:	00c78793          	addi	a5,a5,12
80004628:	00279713          	slli	a4,a5,0x2
8000462c:	ed468793          	addi	a5,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80004630:	00f707b3          	add	a5,a4,a5
80004634:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:17 (discriminator 3)
        for (j = 0; j < NUM_MAX_APP_TASKS; j++){
80004638:	fe842783          	lw	a5,-24(s0)
8000463c:	00178793          	addi	a5,a5,1
80004640:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:17 (discriminator 1)
80004644:	fe842703          	lw	a4,-24(s0)
80004648:	00900793          	li	a5,9
8000464c:	fae7fee3          	bleu	a4,a5,80004608 <API_TaskListInit+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 2)
    for (i = 0; i < NUM_MAX_TASKS; i++){
80004650:	fec42783          	lw	a5,-20(s0)
80004654:	00178793          	addi	a5,a5,1
80004658:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 1)
8000465c:	fec42703          	lw	a4,-20(s0)
80004660:	00500793          	li	a5,5
80004664:	f6e7fce3          	bleu	a4,a5,800045dc <API_TaskListInit+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:21
        }
    }
    return;
80004668:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:22
}
8000466c:	01c12403          	lw	s0,28(sp)
80004670:	02010113          	addi	sp,sp,32
80004674:	00008067          	ret

80004678 <API_GetCurrentTaskSlot>:
API_GetCurrentTaskSlot():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:24

unsigned int API_GetCurrentTaskSlot(){
80004678:	fe010113          	addi	sp,sp,-32
8000467c:	00112e23          	sw	ra,28(sp)
80004680:	00812c23          	sw	s0,24(sp)
80004684:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:26
    // The handle of the currently running ( calling ) task on the kernel.
    TaskHandle_t xHandle = xTaskGetCurrentTaskHandle();
80004688:	85dfe0ef          	jal	ra,80002ee4 <xTaskGetCurrentTaskHandle>
8000468c:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:27
    unsigned int i = 0;
80004690:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:28
    for ( i = 0 ; i < NUM_MAX_TASKS ; i++ ) {
80004694:	fe042623          	sw	zero,-20(s0)
80004698:	06c0006f          	j	80004704 <API_GetCurrentTaskSlot+0x8c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:29
        if ( TaskList[ i ].TaskHandler == xHandle && TaskList[i].status != TASK_SLOT_EMPTY ) {
8000469c:	800237b7          	lui	a5,0x80023
800046a0:	fec42703          	lw	a4,-20(s0)
800046a4:	ed478693          	addi	a3,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
800046a8:	00070793          	mv	a5,a4
800046ac:	00579793          	slli	a5,a5,0x5
800046b0:	00e787b3          	add	a5,a5,a4
800046b4:	00279793          	slli	a5,a5,0x2
800046b8:	00f687b3          	add	a5,a3,a5
800046bc:	0187a783          	lw	a5,24(a5)
800046c0:	fe842703          	lw	a4,-24(s0)
800046c4:	02f71a63          	bne	a4,a5,800046f8 <API_GetCurrentTaskSlot+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:29 (discriminator 1)
800046c8:	800236b7          	lui	a3,0x80023
800046cc:	fec42703          	lw	a4,-20(s0)
800046d0:	00070793          	mv	a5,a4
800046d4:	00579793          	slli	a5,a5,0x5
800046d8:	00e787b3          	add	a5,a5,a4
800046dc:	00279793          	slli	a5,a5,0x2
800046e0:	ed468713          	addi	a4,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
800046e4:	00e787b3          	add	a5,a5,a4
800046e8:	0007a783          	lw	a5,0(a5)
800046ec:	00078663          	beqz	a5,800046f8 <API_GetCurrentTaskSlot+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:30
            return( i );
800046f0:	fec42783          	lw	a5,-20(s0)
800046f4:	02c0006f          	j	80004720 <API_GetCurrentTaskSlot+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:28 (discriminator 2)
    for ( i = 0 ; i < NUM_MAX_TASKS ; i++ ) {
800046f8:	fec42783          	lw	a5,-20(s0)
800046fc:	00178793          	addi	a5,a5,1
80004700:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:28 (discriminator 1)
80004704:	fec42703          	lw	a4,-20(s0)
80004708:	00500793          	li	a5,5
8000470c:	f8e7f8e3          	bleu	a4,a5,8000469c <API_GetCurrentTaskSlot+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:33
        }
    }
    prints("returning erro0\n");
80004710:	800087b7          	lui	a5,0x80008
80004714:	08c78513          	addi	a0,a5,140 # 8000808c <__stack_top+0xfffc4e8c>
80004718:	7e8010ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:34
    return ERRO;
8000471c:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:35
}
80004720:	00078513          	mv	a0,a5
80004724:	01c12083          	lw	ra,28(sp)
80004728:	01812403          	lw	s0,24(sp)
8000472c:	02010113          	addi	sp,sp,32
80004730:	00008067          	ret

80004734 <API_GetFreeTaskSlot>:
API_GetFreeTaskSlot():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:37

unsigned int API_GetFreeTaskSlot(){
80004734:	fe010113          	addi	sp,sp,-32
80004738:	00112e23          	sw	ra,28(sp)
8000473c:	00812c23          	sw	s0,24(sp)
80004740:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:39
    unsigned int i;
    for (i = 0; i < NUM_MAX_TASKS; i++){
80004744:	fe042623          	sw	zero,-20(s0)
80004748:	0400006f          	j	80004788 <API_GetFreeTaskSlot+0x54>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:40
        if (TaskList[i].status == TASK_SLOT_EMPTY){
8000474c:	800236b7          	lui	a3,0x80023
80004750:	fec42703          	lw	a4,-20(s0)
80004754:	00070793          	mv	a5,a4
80004758:	00579793          	slli	a5,a5,0x5
8000475c:	00e787b3          	add	a5,a5,a4
80004760:	00279793          	slli	a5,a5,0x2
80004764:	ed468713          	addi	a4,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80004768:	00e787b3          	add	a5,a5,a4
8000476c:	0007a783          	lw	a5,0(a5)
80004770:	00079663          	bnez	a5,8000477c <API_GetFreeTaskSlot+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:41
            return i;
80004774:	fec42783          	lw	a5,-20(s0)
80004778:	02c0006f          	j	800047a4 <API_GetFreeTaskSlot+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:39 (discriminator 2)
    for (i = 0; i < NUM_MAX_TASKS; i++){
8000477c:	fec42783          	lw	a5,-20(s0)
80004780:	00178793          	addi	a5,a5,1
80004784:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:39 (discriminator 1)
80004788:	fec42703          	lw	a4,-20(s0)
8000478c:	00500793          	li	a5,5
80004790:	fae7fee3          	bleu	a4,a5,8000474c <API_GetFreeTaskSlot+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:44
        }
    }
    prints("returning erro1\n");
80004794:	800087b7          	lui	a5,0x80008
80004798:	0a078513          	addi	a0,a5,160 # 800080a0 <__stack_top+0xfffc4ea0>
8000479c:	764010ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:45
    return ERRO;
800047a0:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:46
}
800047a4:	00078513          	mv	a0,a5
800047a8:	01c12083          	lw	ra,28(sp)
800047ac:	01812403          	lw	s0,24(sp)
800047b0:	02010113          	addi	sp,sp,32
800047b4:	00008067          	ret

800047b8 <API_TaskAllocation>:
API_TaskAllocation():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:48

unsigned int API_TaskAllocation(unsigned int task_id, unsigned int txt_size, unsigned int bss_size, unsigned int start_point, unsigned int task_app_id){
800047b8:	fc010113          	addi	sp,sp,-64
800047bc:	02112e23          	sw	ra,60(sp)
800047c0:	02812c23          	sw	s0,56(sp)
800047c4:	04010413          	addi	s0,sp,64
800047c8:	fca42e23          	sw	a0,-36(s0)
800047cc:	fcb42c23          	sw	a1,-40(s0)
800047d0:	fcc42a23          	sw	a2,-44(s0)
800047d4:	fcd42823          	sw	a3,-48(s0)
800047d8:	fce42623          	sw	a4,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:49
    unsigned int tslot = API_GetFreeTaskSlot();
800047dc:	f59ff0ef          	jal	ra,80004734 <API_GetFreeTaskSlot>
800047e0:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:51
    int i;
    if(tslot == ERRO){
800047e4:	fe842703          	lw	a4,-24(s0)
800047e8:	fff00793          	li	a5,-1
800047ec:	00f71863          	bne	a4,a5,800047fc <API_TaskAllocation+0x44>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:52
        prints("DEU RUIM NO API_GetFreeTaskSlot()\n");
800047f0:	800087b7          	lui	a5,0x80008
800047f4:	0b478513          	addi	a0,a5,180 # 800080b4 <__stack_top+0xfffc4eb4>
800047f8:	708010ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:54
    }
    printsv("Got slot: ", tslot);
800047fc:	fe842783          	lw	a5,-24(s0)
80004800:	00078593          	mv	a1,a5
80004804:	800087b7          	lui	a5,0x80008
80004808:	0d878513          	addi	a0,a5,216 # 800080d8 <__stack_top+0xfffc4ed8>
8000480c:	7a0010ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:55
    TaskList[tslot].status = TASK_SLOT_WAITING_START;
80004810:	800236b7          	lui	a3,0x80023
80004814:	fe842703          	lw	a4,-24(s0)
80004818:	00070793          	mv	a5,a4
8000481c:	00579793          	slli	a5,a5,0x5
80004820:	00e787b3          	add	a5,a5,a4
80004824:	00279793          	slli	a5,a5,0x2
80004828:	ed468713          	addi	a4,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
8000482c:	00e787b3          	add	a5,a5,a4
80004830:	00200713          	li	a4,2
80004834:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:56
    TaskList[tslot].waitingMsg = FALSE;
80004838:	800237b7          	lui	a5,0x80023
8000483c:	fe842703          	lw	a4,-24(s0)
80004840:	ed478693          	addi	a3,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80004844:	00070793          	mv	a5,a4
80004848:	00579793          	slli	a5,a5,0x5
8000484c:	00e787b3          	add	a5,a5,a4
80004850:	00279793          	slli	a5,a5,0x2
80004854:	00f687b3          	add	a5,a3,a5
80004858:	0007ae23          	sw	zero,28(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:57
    TaskList[tslot].TaskID = task_id;
8000485c:	800236b7          	lui	a3,0x80023
80004860:	fe842703          	lw	a4,-24(s0)
80004864:	00070793          	mv	a5,a4
80004868:	00579793          	slli	a5,a5,0x5
8000486c:	00e787b3          	add	a5,a5,a4
80004870:	00279793          	slli	a5,a5,0x2
80004874:	ed468713          	addi	a4,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80004878:	00e787b3          	add	a5,a5,a4
8000487c:	fdc42703          	lw	a4,-36(s0)
80004880:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:58
    TaskList[tslot].AppID = task_app_id;
80004884:	800237b7          	lui	a5,0x80023
80004888:	fe842703          	lw	a4,-24(s0)
8000488c:	ed478693          	addi	a3,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80004890:	00070793          	mv	a5,a4
80004894:	00579793          	slli	a5,a5,0x5
80004898:	00e787b3          	add	a5,a5,a4
8000489c:	00279793          	slli	a5,a5,0x2
800048a0:	00f687b3          	add	a5,a3,a5
800048a4:	fcc42703          	lw	a4,-52(s0)
800048a8:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:59
    TaskList[tslot].taskSize = 4 * (txt_size + bss_size); // it multiply by four because each word has 32 bits and the memory is addressed by byte - so each word is composed by 4 addresses
800048ac:	fd842703          	lw	a4,-40(s0)
800048b0:	fd442783          	lw	a5,-44(s0)
800048b4:	00f707b3          	add	a5,a4,a5
800048b8:	00279693          	slli	a3,a5,0x2
800048bc:	800237b7          	lui	a5,0x80023
800048c0:	fe842703          	lw	a4,-24(s0)
800048c4:	ed478613          	addi	a2,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
800048c8:	00070793          	mv	a5,a4
800048cc:	00579793          	slli	a5,a5,0x5
800048d0:	00e787b3          	add	a5,a5,a4
800048d4:	00279793          	slli	a5,a5,0x2
800048d8:	00f607b3          	add	a5,a2,a5
800048dc:	02d7a223          	sw	a3,36(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:60
    printsv("Task total size (txt+bss): ", TaskList[tslot].taskSize);
800048e0:	800237b7          	lui	a5,0x80023
800048e4:	fe842703          	lw	a4,-24(s0)
800048e8:	ed478693          	addi	a3,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
800048ec:	00070793          	mv	a5,a4
800048f0:	00579793          	slli	a5,a5,0x5
800048f4:	00e787b3          	add	a5,a5,a4
800048f8:	00279793          	slli	a5,a5,0x2
800048fc:	00f687b3          	add	a5,a3,a5
80004900:	0247a783          	lw	a5,36(a5)
80004904:	00078593          	mv	a1,a5
80004908:	800087b7          	lui	a5,0x80008
8000490c:	0e478513          	addi	a0,a5,228 # 800080e4 <__stack_top+0xfffc4ee4>
80004910:	69c010ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:61
    TaskList[tslot].taskAddr = (unsigned int)pvPortMalloc(TaskList[tslot].taskSize+64);
80004914:	800237b7          	lui	a5,0x80023
80004918:	fe842703          	lw	a4,-24(s0)
8000491c:	ed478693          	addi	a3,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80004920:	00070793          	mv	a5,a4
80004924:	00579793          	slli	a5,a5,0x5
80004928:	00e787b3          	add	a5,a5,a4
8000492c:	00279793          	slli	a5,a5,0x2
80004930:	00f687b3          	add	a5,a3,a5
80004934:	0247a783          	lw	a5,36(a5)
80004938:	04078793          	addi	a5,a5,64
8000493c:	00078513          	mv	a0,a5
80004940:	9a9fc0ef          	jal	ra,800012e8 <pvPortMalloc>
80004944:	00050793          	mv	a5,a0
80004948:	00078613          	mv	a2,a5
8000494c:	800237b7          	lui	a5,0x80023
80004950:	fe842703          	lw	a4,-24(s0)
80004954:	ed478693          	addi	a3,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80004958:	00070793          	mv	a5,a4
8000495c:	00579793          	slli	a5,a5,0x5
80004960:	00e787b3          	add	a5,a5,a4
80004964:	00279793          	slli	a5,a5,0x2
80004968:	00f687b3          	add	a5,a3,a5
8000496c:	02c7a423          	sw	a2,40(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:62
    printsv("Task addr: ", TaskList[tslot].taskAddr);
80004970:	800237b7          	lui	a5,0x80023
80004974:	fe842703          	lw	a4,-24(s0)
80004978:	ed478693          	addi	a3,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
8000497c:	00070793          	mv	a5,a4
80004980:	00579793          	slli	a5,a5,0x5
80004984:	00e787b3          	add	a5,a5,a4
80004988:	00279793          	slli	a5,a5,0x2
8000498c:	00f687b3          	add	a5,a3,a5
80004990:	0287a783          	lw	a5,40(a5)
80004994:	00078593          	mv	a1,a5
80004998:	800087b7          	lui	a5,0x80008
8000499c:	10078513          	addi	a0,a5,256 # 80008100 <__stack_top+0xfffc4f00>
800049a0:	60c010ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:63
    TaskList[tslot].mainAddr =  TaskList[tslot].taskAddr + (4 * start_point);
800049a4:	800237b7          	lui	a5,0x80023
800049a8:	fe842703          	lw	a4,-24(s0)
800049ac:	ed478693          	addi	a3,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
800049b0:	00070793          	mv	a5,a4
800049b4:	00579793          	slli	a5,a5,0x5
800049b8:	00e787b3          	add	a5,a5,a4
800049bc:	00279793          	slli	a5,a5,0x2
800049c0:	00f687b3          	add	a5,a3,a5
800049c4:	0287a703          	lw	a4,40(a5)
800049c8:	fd042783          	lw	a5,-48(s0)
800049cc:	00279793          	slli	a5,a5,0x2
800049d0:	00f706b3          	add	a3,a4,a5
800049d4:	800237b7          	lui	a5,0x80023
800049d8:	fe842703          	lw	a4,-24(s0)
800049dc:	ed478613          	addi	a2,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
800049e0:	00070793          	mv	a5,a4
800049e4:	00579793          	slli	a5,a5,0x5
800049e8:	00e787b3          	add	a5,a5,a4
800049ec:	00279793          	slli	a5,a5,0x2
800049f0:	00f607b3          	add	a5,a2,a5
800049f4:	02d7a623          	sw	a3,44(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:69

    // filling the MemoryRegion_t struct
    //TaskList[tslot].memRegion.ulLengthInBytes = 0;// TaskList[tslot].taskSize;
    //TaskList[tslot].memRegion.pvBaseAddress = 0;//TaskList[tslot].taskAddr;

    for(i=0;i<NUM_MAX_APP_TASKS;i++){
800049f8:	fe042623          	sw	zero,-20(s0)
800049fc:	0700006f          	j	80004a6c <API_TaskAllocation+0x2b4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:70 (discriminator 3)
        TaskList[tslot].PendingReq[i] = FALSE;
80004a00:	800236b7          	lui	a3,0x80023
80004a04:	fe842703          	lw	a4,-24(s0)
80004a08:	00070793          	mv	a5,a4
80004a0c:	00579793          	slli	a5,a5,0x5
80004a10:	00e787b3          	add	a5,a5,a4
80004a14:	fec42703          	lw	a4,-20(s0)
80004a18:	00e787b3          	add	a5,a5,a4
80004a1c:	00c78793          	addi	a5,a5,12
80004a20:	00279713          	slli	a4,a5,0x2
80004a24:	ed468793          	addi	a5,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80004a28:	00f707b3          	add	a5,a4,a5
80004a2c:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:71 (discriminator 3)
        TaskList[tslot].TasksMap[i] = 0;
80004a30:	800236b7          	lui	a3,0x80023
80004a34:	fe842703          	lw	a4,-24(s0)
80004a38:	00070793          	mv	a5,a4
80004a3c:	00579793          	slli	a5,a5,0x5
80004a40:	00e787b3          	add	a5,a5,a4
80004a44:	fec42703          	lw	a4,-20(s0)
80004a48:	00e787b3          	add	a5,a5,a4
80004a4c:	01478793          	addi	a5,a5,20
80004a50:	ed468713          	addi	a4,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80004a54:	00279793          	slli	a5,a5,0x2
80004a58:	00f707b3          	add	a5,a4,a5
80004a5c:	0007a623          	sw	zero,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:69 (discriminator 3)
    for(i=0;i<NUM_MAX_APP_TASKS;i++){
80004a60:	fec42783          	lw	a5,-20(s0)
80004a64:	00178793          	addi	a5,a5,1
80004a68:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:69 (discriminator 1)
80004a6c:	fec42703          	lw	a4,-20(s0)
80004a70:	00900793          	li	a5,9
80004a74:	f8e7d6e3          	ble	a4,a5,80004a00 <API_TaskAllocation+0x248>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:74
    }

    return tslot;
80004a78:	fe842783          	lw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:75
}
80004a7c:	00078513          	mv	a0,a5
80004a80:	03c12083          	lw	ra,60(sp)
80004a84:	03812403          	lw	s0,56(sp)
80004a88:	04010113          	addi	sp,sp,64
80004a8c:	00008067          	ret

80004a90 <API_GetTaskSlot>:
API_GetTaskSlot():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:77

unsigned int API_GetTaskSlot(unsigned int task_id, unsigned int app_id){
80004a90:	fd010113          	addi	sp,sp,-48
80004a94:	02112623          	sw	ra,44(sp)
80004a98:	02812423          	sw	s0,40(sp)
80004a9c:	03010413          	addi	s0,sp,48
80004aa0:	fca42e23          	sw	a0,-36(s0)
80004aa4:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:79
    unsigned int i;
    for( i = 0; i < NUM_MAX_APP_TASKS; i++){
80004aa8:	fe042623          	sw	zero,-20(s0)
80004aac:	0980006f          	j	80004b44 <API_GetTaskSlot+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:80
        if(task_id == TaskList[i].TaskID && app_id == TaskList[i].AppID && TaskList[i].status != TASK_SLOT_EMPTY)
80004ab0:	800236b7          	lui	a3,0x80023
80004ab4:	fec42703          	lw	a4,-20(s0)
80004ab8:	00070793          	mv	a5,a4
80004abc:	00579793          	slli	a5,a5,0x5
80004ac0:	00e787b3          	add	a5,a5,a4
80004ac4:	00279793          	slli	a5,a5,0x2
80004ac8:	ed468713          	addi	a4,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80004acc:	00e787b3          	add	a5,a5,a4
80004ad0:	0107a783          	lw	a5,16(a5)
80004ad4:	fdc42703          	lw	a4,-36(s0)
80004ad8:	06f71063          	bne	a4,a5,80004b38 <API_GetTaskSlot+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:80 (discriminator 1)
80004adc:	800237b7          	lui	a5,0x80023
80004ae0:	fec42703          	lw	a4,-20(s0)
80004ae4:	ed478693          	addi	a3,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80004ae8:	00070793          	mv	a5,a4
80004aec:	00579793          	slli	a5,a5,0x5
80004af0:	00e787b3          	add	a5,a5,a4
80004af4:	00279793          	slli	a5,a5,0x2
80004af8:	00f687b3          	add	a5,a3,a5
80004afc:	0147a783          	lw	a5,20(a5)
80004b00:	fd842703          	lw	a4,-40(s0)
80004b04:	02f71a63          	bne	a4,a5,80004b38 <API_GetTaskSlot+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:80 (discriminator 2)
80004b08:	800236b7          	lui	a3,0x80023
80004b0c:	fec42703          	lw	a4,-20(s0)
80004b10:	00070793          	mv	a5,a4
80004b14:	00579793          	slli	a5,a5,0x5
80004b18:	00e787b3          	add	a5,a5,a4
80004b1c:	00279793          	slli	a5,a5,0x2
80004b20:	ed468713          	addi	a4,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80004b24:	00e787b3          	add	a5,a5,a4
80004b28:	0007a783          	lw	a5,0(a5)
80004b2c:	00078663          	beqz	a5,80004b38 <API_GetTaskSlot+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:81
            return i;
80004b30:	fec42783          	lw	a5,-20(s0)
80004b34:	02c0006f          	j	80004b60 <API_GetTaskSlot+0xd0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:79 (discriminator 2)
    for( i = 0; i < NUM_MAX_APP_TASKS; i++){
80004b38:	fec42783          	lw	a5,-20(s0)
80004b3c:	00178793          	addi	a5,a5,1
80004b40:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:79 (discriminator 1)
80004b44:	fec42703          	lw	a4,-20(s0)
80004b48:	00900793          	li	a5,9
80004b4c:	f6e7f2e3          	bleu	a4,a5,80004ab0 <API_GetTaskSlot+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:83
    }
    prints("returning erro2\n");
80004b50:	800087b7          	lui	a5,0x80008
80004b54:	10c78513          	addi	a0,a5,268 # 8000810c <__stack_top+0xfffc4f0c>
80004b58:	3a8010ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:84
    return ERRO;
80004b5c:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:85
}
80004b60:	00078513          	mv	a0,a5
80004b64:	02c12083          	lw	ra,44(sp)
80004b68:	02812403          	lw	s0,40(sp)
80004b6c:	03010113          	addi	sp,sp,48
80004b70:	00008067          	ret

80004b74 <API_TaskStart>:
API_TaskStart():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:87

void API_TaskStart(unsigned int slot){
80004b74:	fd010113          	addi	sp,sp,-48
80004b78:	02112623          	sw	ra,44(sp)
80004b7c:	02812423          	sw	s0,40(sp)
80004b80:	03010413          	addi	s0,sp,48
80004b84:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:89
    BaseType_t xReturned;
    TaskList[slot].status = TASK_SLOT_RUNNING;
80004b88:	800236b7          	lui	a3,0x80023
80004b8c:	fdc42703          	lw	a4,-36(s0)
80004b90:	00070793          	mv	a5,a4
80004b94:	00579793          	slli	a5,a5,0x5
80004b98:	00e787b3          	add	a5,a5,a4
80004b9c:	00279793          	slli	a5,a5,0x2
80004ba0:	ed468713          	addi	a4,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80004ba4:	00e787b3          	add	a5,a5,a4
80004ba8:	00100713          	li	a4,1
80004bac:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:100
                                    tskIDLE_PRIORITY+1,         //uxPriority
                                    &TaskList[slot].TaskHandler,// pxCreatedTask
                                    NULL,                       // puxStackBuffer
                                    &TaskList[slot].memRegion );//xRegions*/
    
    xReturned = xTaskCreate(TaskList[slot].mainAddr,
80004bb0:	800237b7          	lui	a5,0x80023
80004bb4:	fdc42703          	lw	a4,-36(s0)
80004bb8:	ed478693          	addi	a3,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80004bbc:	00070793          	mv	a5,a4
80004bc0:	00579793          	slli	a5,a5,0x5
80004bc4:	00e787b3          	add	a5,a5,a4
80004bc8:	00279793          	slli	a5,a5,0x2
80004bcc:	00f687b3          	add	a5,a3,a5
80004bd0:	02c7a783          	lw	a5,44(a5)
80004bd4:	00078513          	mv	a0,a5
80004bd8:	fdc42703          	lw	a4,-36(s0)
80004bdc:	00070793          	mv	a5,a4
80004be0:	00579793          	slli	a5,a5,0x5
80004be4:	00e787b3          	add	a5,a5,a4
80004be8:	00279793          	slli	a5,a5,0x2
80004bec:	01078713          	addi	a4,a5,16
80004bf0:	800237b7          	lui	a5,0x80023
80004bf4:	ed478793          	addi	a5,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80004bf8:	00f707b3          	add	a5,a4,a5
80004bfc:	00878793          	addi	a5,a5,8
80004c00:	00000893          	li	a7,0
80004c04:	00000813          	li	a6,0
80004c08:	00100713          	li	a4,1
80004c0c:	00000693          	li	a3,0
80004c10:	00002637          	lui	a2,0x2
80004c14:	3e860613          	addi	a2,a2,1000 # 23e8 <HEAP_SIZE-0xdc18>
80004c18:	800085b7          	lui	a1,0x80008
80004c1c:	12058593          	addi	a1,a1,288 # 80008120 <__stack_top+0xfffc4f20>
80004c20:	af8fd0ef          	jal	ra,80001f18 <xTaskGenericCreate>
80004c24:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:106
                            "LaTask",
                            9192,//8192,//4096,//16384,
                            NULL,
                            tskIDLE_PRIORITY+1,
                            &TaskList[slot].TaskHandler);
    if( xReturned != pdPASS ){
80004c28:	fec42703          	lw	a4,-20(s0)
80004c2c:	00100793          	li	a5,1
80004c30:	00f70a63          	beq	a4,a5,80004c44 <API_TaskStart+0xd0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:107
        prints("ERROR - API_TaskStart!!!\n");
80004c34:	800087b7          	lui	a5,0x80008
80004c38:	12878513          	addi	a0,a5,296 # 80008128 <__stack_top+0xfffc4f28>
80004c3c:	2c4010ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:109
    }
    return;
80004c40:	00000013          	nop
80004c44:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:110
}
80004c48:	02c12083          	lw	ra,44(sp)
80004c4c:	02812403          	lw	s0,40(sp)
80004c50:	03010113          	addi	sp,sp,48
80004c54:	00008067          	ret

80004c58 <API_FinishRunningTask>:
API_FinishRunningTask():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:113


void API_FinishRunningTask(){
80004c58:	fe010113          	addi	sp,sp,-32
80004c5c:	00112e23          	sw	ra,28(sp)
80004c60:	00812c23          	sw	s0,24(sp)
80004c64:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:115
    int i;
    unsigned int slot = API_GetCurrentTaskSlot();
80004c68:	a11ff0ef          	jal	ra,80004678 <API_GetCurrentTaskSlot>
80004c6c:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:116
    printsvsv("Finishing task:", TaskList[slot].TaskID, "app: ", TaskList[slot].AppID);
80004c70:	800236b7          	lui	a3,0x80023
80004c74:	fe842703          	lw	a4,-24(s0)
80004c78:	00070793          	mv	a5,a4
80004c7c:	00579793          	slli	a5,a5,0x5
80004c80:	00e787b3          	add	a5,a5,a4
80004c84:	00279793          	slli	a5,a5,0x2
80004c88:	ed468713          	addi	a4,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80004c8c:	00e787b3          	add	a5,a5,a4
80004c90:	0107a783          	lw	a5,16(a5)
80004c94:	00078593          	mv	a1,a5
80004c98:	800237b7          	lui	a5,0x80023
80004c9c:	fe842703          	lw	a4,-24(s0)
80004ca0:	ed478693          	addi	a3,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80004ca4:	00070793          	mv	a5,a4
80004ca8:	00579793          	slli	a5,a5,0x5
80004cac:	00e787b3          	add	a5,a5,a4
80004cb0:	00279793          	slli	a5,a5,0x2
80004cb4:	00f687b3          	add	a5,a3,a5
80004cb8:	0147a783          	lw	a5,20(a5)
80004cbc:	00078693          	mv	a3,a5
80004cc0:	800087b7          	lui	a5,0x80008
80004cc4:	14478613          	addi	a2,a5,324 # 80008144 <__stack_top+0xfffc4f44>
80004cc8:	800087b7          	lui	a5,0x80008
80004ccc:	14c78513          	addi	a0,a5,332 # 8000814c <__stack_top+0xfffc4f4c>
80004cd0:	324010ef          	jal	ra,80005ff4 <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:117
    printsv("From slot: ", slot);
80004cd4:	fe842783          	lw	a5,-24(s0)
80004cd8:	00078593          	mv	a1,a5
80004cdc:	800087b7          	lui	a5,0x80008
80004ce0:	15c78513          	addi	a0,a5,348 # 8000815c <__stack_top+0xfffc4f5c>
80004ce4:	2c8010ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:118
    while(API_checkPipe(slot) == 1){
80004ce8:	00c0006f          	j	80004cf4 <API_FinishRunningTask+0x9c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:119
        vTaskDelay(1);
80004cec:	00100513          	li	a0,1
80004cf0:	d20fd0ef          	jal	ra,80002210 <vTaskDelay>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:118
    while(API_checkPipe(slot) == 1){
80004cf4:	fe842503          	lw	a0,-24(s0)
80004cf8:	5f4000ef          	jal	ra,800052ec <API_checkPipe>
80004cfc:	00050713          	mv	a4,a0
80004d00:	00100793          	li	a5,1
80004d04:	fef704e3          	beq	a4,a5,80004cec <API_FinishRunningTask+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:121
    }
    vTaskEnterCritical();
80004d08:	a04fe0ef          	jal	ra,80002f0c <vTaskEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:122
    printsvsv("Task ", TaskList[slot].TaskID, "deleted with sucsess! From application ", TaskList[slot].AppID);
80004d0c:	800236b7          	lui	a3,0x80023
80004d10:	fe842703          	lw	a4,-24(s0)
80004d14:	00070793          	mv	a5,a4
80004d18:	00579793          	slli	a5,a5,0x5
80004d1c:	00e787b3          	add	a5,a5,a4
80004d20:	00279793          	slli	a5,a5,0x2
80004d24:	ed468713          	addi	a4,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80004d28:	00e787b3          	add	a5,a5,a4
80004d2c:	0107a783          	lw	a5,16(a5)
80004d30:	00078593          	mv	a1,a5
80004d34:	800237b7          	lui	a5,0x80023
80004d38:	fe842703          	lw	a4,-24(s0)
80004d3c:	ed478693          	addi	a3,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80004d40:	00070793          	mv	a5,a4
80004d44:	00579793          	slli	a5,a5,0x5
80004d48:	00e787b3          	add	a5,a5,a4
80004d4c:	00279793          	slli	a5,a5,0x2
80004d50:	00f687b3          	add	a5,a3,a5
80004d54:	0147a783          	lw	a5,20(a5)
80004d58:	00078693          	mv	a3,a5
80004d5c:	800087b7          	lui	a5,0x80008
80004d60:	16878613          	addi	a2,a5,360 # 80008168 <__stack_top+0xfffc4f68>
80004d64:	800087b7          	lui	a5,0x80008
80004d68:	19078513          	addi	a0,a5,400 # 80008190 <__stack_top+0xfffc4f90>
80004d6c:	288010ef          	jal	ra,80005ff4 <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:123
    TaskList[slot].status = TASK_SLOT_EMPTY;
80004d70:	800236b7          	lui	a3,0x80023
80004d74:	fe842703          	lw	a4,-24(s0)
80004d78:	00070793          	mv	a5,a4
80004d7c:	00579793          	slli	a5,a5,0x5
80004d80:	00e787b3          	add	a5,a5,a4
80004d84:	00279793          	slli	a5,a5,0x2
80004d88:	ed468713          	addi	a4,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80004d8c:	00e787b3          	add	a5,a5,a4
80004d90:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:125
    
    for(i = 0; i < NUM_MAX_TASKS; i++){
80004d94:	fe042623          	sw	zero,-20(s0)
80004d98:	0c40006f          	j	80004e5c <API_FinishRunningTask+0x204>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:126
        printsvsv("TaskList[", i, "]status: ", TaskList[i].status );
80004d9c:	800236b7          	lui	a3,0x80023
80004da0:	fec42703          	lw	a4,-20(s0)
80004da4:	00070793          	mv	a5,a4
80004da8:	00579793          	slli	a5,a5,0x5
80004dac:	00e787b3          	add	a5,a5,a4
80004db0:	00279793          	slli	a5,a5,0x2
80004db4:	ed468713          	addi	a4,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80004db8:	00e787b3          	add	a5,a5,a4
80004dbc:	0007a783          	lw	a5,0(a5)
80004dc0:	00078693          	mv	a3,a5
80004dc4:	800087b7          	lui	a5,0x80008
80004dc8:	19878613          	addi	a2,a5,408 # 80008198 <__stack_top+0xfffc4f98>
80004dcc:	fec42583          	lw	a1,-20(s0)
80004dd0:	800087b7          	lui	a5,0x80008
80004dd4:	1a478513          	addi	a0,a5,420 # 800081a4 <__stack_top+0xfffc4fa4>
80004dd8:	21c010ef          	jal	ra,80005ff4 <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:127
        if(TaskList[i].status != TASK_SLOT_EMPTY){
80004ddc:	800236b7          	lui	a3,0x80023
80004de0:	fec42703          	lw	a4,-20(s0)
80004de4:	00070793          	mv	a5,a4
80004de8:	00579793          	slli	a5,a5,0x5
80004dec:	00e787b3          	add	a5,a5,a4
80004df0:	00279793          	slli	a5,a5,0x2
80004df4:	ed468713          	addi	a4,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80004df8:	00e787b3          	add	a5,a5,a4
80004dfc:	0007a783          	lw	a5,0(a5)
80004e00:	04078863          	beqz	a5,80004e50 <API_FinishRunningTask+0x1f8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:128
            printsvsv("Returning because of: ", i, "TaskList[i].status ", TaskList[i].status);
80004e04:	800236b7          	lui	a3,0x80023
80004e08:	fec42703          	lw	a4,-20(s0)
80004e0c:	00070793          	mv	a5,a4
80004e10:	00579793          	slli	a5,a5,0x5
80004e14:	00e787b3          	add	a5,a5,a4
80004e18:	00279793          	slli	a5,a5,0x2
80004e1c:	ed468713          	addi	a4,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80004e20:	00e787b3          	add	a5,a5,a4
80004e24:	0007a783          	lw	a5,0(a5)
80004e28:	00078693          	mv	a3,a5
80004e2c:	800087b7          	lui	a5,0x80008
80004e30:	1b078613          	addi	a2,a5,432 # 800081b0 <__stack_top+0xfffc4fb0>
80004e34:	fec42583          	lw	a1,-20(s0)
80004e38:	800087b7          	lui	a5,0x80008
80004e3c:	1c478513          	addi	a0,a5,452 # 800081c4 <__stack_top+0xfffc4fc4>
80004e40:	1b4010ef          	jal	ra,80005ff4 <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:129
            i = 0xffffffff;
80004e44:	fff00793          	li	a5,-1
80004e48:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:130
            break;
80004e4c:	01c0006f          	j	80004e68 <API_FinishRunningTask+0x210>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:125 (discriminator 2)
    for(i = 0; i < NUM_MAX_TASKS; i++){
80004e50:	fec42783          	lw	a5,-20(s0)
80004e54:	00178793          	addi	a5,a5,1
80004e58:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:125 (discriminator 1)
80004e5c:	fec42703          	lw	a4,-20(s0)
80004e60:	00500793          	li	a5,5
80004e64:	f2e7dce3          	ble	a4,a5,80004d9c <API_FinishRunningTask+0x144>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:133
        }
    }
    if(i != 0xffffffff){
80004e68:	fec42703          	lw	a4,-20(s0)
80004e6c:	fff00793          	li	a5,-1
80004e70:	00f70463          	beq	a4,a5,80004e78 <API_FinishRunningTask+0x220>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:134
        API_setFreqIdle();
80004e74:	58c000ef          	jal	ra,80005400 <API_setFreqIdle>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:136
    }
    API_SendFinishTask(TaskList[slot].TaskID, TaskList[slot].AppID);
80004e78:	800236b7          	lui	a3,0x80023
80004e7c:	fe842703          	lw	a4,-24(s0)
80004e80:	00070793          	mv	a5,a4
80004e84:	00579793          	slli	a5,a5,0x5
80004e88:	00e787b3          	add	a5,a5,a4
80004e8c:	00279793          	slli	a5,a5,0x2
80004e90:	ed468713          	addi	a4,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80004e94:	00e787b3          	add	a5,a5,a4
80004e98:	0107a603          	lw	a2,16(a5)
80004e9c:	800237b7          	lui	a5,0x80023
80004ea0:	fe842703          	lw	a4,-24(s0)
80004ea4:	ed478693          	addi	a3,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80004ea8:	00070793          	mv	a5,a4
80004eac:	00579793          	slli	a5,a5,0x5
80004eb0:	00e787b3          	add	a5,a5,a4
80004eb4:	00279793          	slli	a5,a5,0x2
80004eb8:	00f687b3          	add	a5,a3,a5
80004ebc:	0147a783          	lw	a5,20(a5)
80004ec0:	00078593          	mv	a1,a5
80004ec4:	00060513          	mv	a0,a2
80004ec8:	55d010ef          	jal	ra,80006c24 <API_SendFinishTask>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:137
    vPortFree(TaskList[slot].taskAddr);
80004ecc:	800237b7          	lui	a5,0x80023
80004ed0:	fe842703          	lw	a4,-24(s0)
80004ed4:	ed478693          	addi	a3,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80004ed8:	00070793          	mv	a5,a4
80004edc:	00579793          	slli	a5,a5,0x5
80004ee0:	00e787b3          	add	a5,a5,a4
80004ee4:	00279793          	slli	a5,a5,0x2
80004ee8:	00f687b3          	add	a5,a3,a5
80004eec:	0287a783          	lw	a5,40(a5)
80004ef0:	00078513          	mv	a0,a5
80004ef4:	dd0fc0ef          	jal	ra,800014c4 <vPortFree>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:138
    vTaskExitCritical();
80004ef8:	850fe0ef          	jal	ra,80002f48 <vTaskExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:139
    vTaskDelete(TaskList[slot].TaskHandler);
80004efc:	800237b7          	lui	a5,0x80023
80004f00:	fe842703          	lw	a4,-24(s0)
80004f04:	ed478693          	addi	a3,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80004f08:	00070793          	mv	a5,a4
80004f0c:	00579793          	slli	a5,a5,0x5
80004f10:	00e787b3          	add	a5,a5,a4
80004f14:	00279793          	slli	a5,a5,0x2
80004f18:	00f687b3          	add	a5,a3,a5
80004f1c:	0187a783          	lw	a5,24(a5)
80004f20:	00078513          	mv	a0,a5
80004f24:	a10fd0ef          	jal	ra,80002134 <vTaskDelete>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:140
    return;
80004f28:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/applications.c:141
}
80004f2c:	01c12083          	lw	ra,28(sp)
80004f30:	01812403          	lw	s0,24(sp)
80004f34:	02010113          	addi	sp,sp,32
80004f38:	00008067          	ret

80004f3c <API_PipeInitialization>:
API_PipeInitialization():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:13

extern unsigned int thermalPacket_pending; // from thermal.h

////////////////////////////////////////////////////////////
// Initialize the PIPE, setting the status of each slot to FREE
void API_PipeInitialization(){
80004f3c:	fe010113          	addi	sp,sp,-32
80004f40:	00812e23          	sw	s0,28(sp)
80004f44:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:15
    int i;
    messageID = 0;
80004f48:	800227b7          	lui	a5,0x80022
80004f4c:	ac07a623          	sw	zero,-1332(a5) # 80021acc <__stack_top+0xfffde8cc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:16
    for( i = 0; i < PIPE_SIZE; i++ ){
80004f50:	fe042623          	sw	zero,-20(s0)
80004f54:	0740006f          	j	80004fc8 <API_PipeInitialization+0x8c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:17 (discriminator 3)
        MessagePipe[i].status = PIPE_FREE;
80004f58:	800227b7          	lui	a5,0x80022
80004f5c:	fec42683          	lw	a3,-20(s0)
80004f60:	24400713          	li	a4,580
80004f64:	02e68733          	mul	a4,a3,a4
80004f68:	d8478793          	addi	a5,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
80004f6c:	00f707b3          	add	a5,a4,a5
80004f70:	fff00713          	li	a4,-1
80004f74:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:18 (discriminator 3)
        MessagePipe[i].msgID  = 0;
80004f78:	800227b7          	lui	a5,0x80022
80004f7c:	fec42683          	lw	a3,-20(s0)
80004f80:	d8478713          	addi	a4,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
80004f84:	24400793          	li	a5,580
80004f88:	02f687b3          	mul	a5,a3,a5
80004f8c:	00f707b3          	add	a5,a4,a5
80004f90:	0007a423          	sw	zero,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:19 (discriminator 3)
        ServicePipe[i].status = PIPE_FREE;
80004f94:	800226b7          	lui	a3,0x80022
80004f98:	fec42703          	lw	a4,-20(s0)
80004f9c:	00070793          	mv	a5,a4
80004fa0:	00479793          	slli	a5,a5,0x4
80004fa4:	40e787b3          	sub	a5,a5,a4
80004fa8:	00279793          	slli	a5,a5,0x2
80004fac:	9dc68713          	addi	a4,a3,-1572 # 800219dc <__stack_top+0xfffde7dc>
80004fb0:	00e787b3          	add	a5,a5,a4
80004fb4:	fff00713          	li	a4,-1
80004fb8:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:16 (discriminator 3)
    for( i = 0; i < PIPE_SIZE; i++ ){
80004fbc:	fec42783          	lw	a5,-20(s0)
80004fc0:	00178793          	addi	a5,a5,1
80004fc4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:16 (discriminator 1)
80004fc8:	fec42703          	lw	a4,-20(s0)
80004fcc:	00300793          	li	a5,3
80004fd0:	f8e7d4e3          	ble	a4,a5,80004f58 <API_PipeInitialization+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:21
    }
    return;
80004fd4:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:22
}
80004fd8:	01c12403          	lw	s0,28(sp)
80004fdc:	02010113          	addi	sp,sp,32
80004fe0:	00008067          	ret

80004fe4 <API_GetMessageSlot>:
API_GetMessageSlot():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:26

////////////////////////////////////////////////////////////
// Returns a free Message slot 
unsigned int API_GetMessageSlot(){
80004fe4:	fe010113          	addi	sp,sp,-32
80004fe8:	00112e23          	sw	ra,28(sp)
80004fec:	00812c23          	sw	s0,24(sp)
80004ff0:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:28
    int i;
    unsigned int sel = PIPE_FULL;
80004ff4:	fdfe07b7          	lui	a5,0xfdfe0
80004ff8:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9cbfd>
80004ffc:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:29
    vTaskEnterCritical();
80005000:	f0dfd0ef          	jal	ra,80002f0c <vTaskEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:30
    for( i = 0; i < PIPE_SIZE; i++ ){
80005004:	fe042623          	sw	zero,-20(s0)
80005008:	0980006f          	j	800050a0 <API_GetMessageSlot+0xbc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:31
        if (MessagePipe[i].status == PIPE_FREE){
8000500c:	800227b7          	lui	a5,0x80022
80005010:	fec42683          	lw	a3,-20(s0)
80005014:	24400713          	li	a4,580
80005018:	02e68733          	mul	a4,a3,a4
8000501c:	d8478793          	addi	a5,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
80005020:	00f707b3          	add	a5,a4,a5
80005024:	0007a703          	lw	a4,0(a5)
80005028:	fff00793          	li	a5,-1
8000502c:	06f71463          	bne	a4,a5,80005094 <API_GetMessageSlot+0xb0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:32
            MessagePipe[i].status = PIPE_OCCUPIED;
80005030:	800227b7          	lui	a5,0x80022
80005034:	fec42683          	lw	a3,-20(s0)
80005038:	24400713          	li	a4,580
8000503c:	02e68733          	mul	a4,a3,a4
80005040:	d8478793          	addi	a5,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
80005044:	00f707b3          	add	a5,a4,a5
80005048:	00100713          	li	a4,1
8000504c:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:33
            MessagePipe[i].msgID = messageID;
80005050:	800227b7          	lui	a5,0x80022
80005054:	acc7a703          	lw	a4,-1332(a5) # 80021acc <__stack_top+0xfffde8cc>
80005058:	800227b7          	lui	a5,0x80022
8000505c:	fec42603          	lw	a2,-20(s0)
80005060:	d8478693          	addi	a3,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
80005064:	24400793          	li	a5,580
80005068:	02f607b3          	mul	a5,a2,a5
8000506c:	00f687b3          	add	a5,a3,a5
80005070:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:34
            messageID++;
80005074:	800227b7          	lui	a5,0x80022
80005078:	acc7a783          	lw	a5,-1332(a5) # 80021acc <__stack_top+0xfffde8cc>
8000507c:	00178713          	addi	a4,a5,1
80005080:	800227b7          	lui	a5,0x80022
80005084:	ace7a623          	sw	a4,-1332(a5) # 80021acc <__stack_top+0xfffde8cc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:35
            sel = i;
80005088:	fec42783          	lw	a5,-20(s0)
8000508c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:36
            break;
80005090:	01c0006f          	j	800050ac <API_GetMessageSlot+0xc8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:30 (discriminator 2)
    for( i = 0; i < PIPE_SIZE; i++ ){
80005094:	fec42783          	lw	a5,-20(s0)
80005098:	00178793          	addi	a5,a5,1
8000509c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:30 (discriminator 1)
800050a0:	fec42703          	lw	a4,-20(s0)
800050a4:	00300793          	li	a5,3
800050a8:	f6e7d2e3          	ble	a4,a5,8000500c <API_GetMessageSlot+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:39
        }
    }
    if(messageID > 16777215){
800050ac:	800227b7          	lui	a5,0x80022
800050b0:	acc7a703          	lw	a4,-1332(a5) # 80021acc <__stack_top+0xfffde8cc>
800050b4:	010007b7          	lui	a5,0x1000
800050b8:	06f76663          	bltu	a4,a5,80005124 <API_GetMessageSlot+0x140>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:40
        messageID = 256;
800050bc:	800227b7          	lui	a5,0x80022
800050c0:	10000713          	li	a4,256
800050c4:	ace7a623          	sw	a4,-1332(a5) # 80021acc <__stack_top+0xfffde8cc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:41
        for( i = 0; i < PIPE_SIZE; i++ ){
800050c8:	fe042623          	sw	zero,-20(s0)
800050cc:	04c0006f          	j	80005118 <API_GetMessageSlot+0x134>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:42 (discriminator 3)
            MessagePipe[i].msgID = (MessagePipe[i].msgID & 0x000000FF);
800050d0:	800227b7          	lui	a5,0x80022
800050d4:	fec42683          	lw	a3,-20(s0)
800050d8:	d8478713          	addi	a4,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
800050dc:	24400793          	li	a5,580
800050e0:	02f687b3          	mul	a5,a3,a5
800050e4:	00f707b3          	add	a5,a4,a5
800050e8:	0087a783          	lw	a5,8(a5)
800050ec:	0ff7f713          	andi	a4,a5,255
800050f0:	800227b7          	lui	a5,0x80022
800050f4:	fec42603          	lw	a2,-20(s0)
800050f8:	d8478693          	addi	a3,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
800050fc:	24400793          	li	a5,580
80005100:	02f607b3          	mul	a5,a2,a5
80005104:	00f687b3          	add	a5,a3,a5
80005108:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:41 (discriminator 3)
        for( i = 0; i < PIPE_SIZE; i++ ){
8000510c:	fec42783          	lw	a5,-20(s0)
80005110:	00178793          	addi	a5,a5,1
80005114:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:41 (discriminator 1)
80005118:	fec42703          	lw	a4,-20(s0)
8000511c:	00300793          	li	a5,3
80005120:	fae7d8e3          	ble	a4,a5,800050d0 <API_GetMessageSlot+0xec>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:45
        }
    }
    vTaskExitCritical();
80005124:	e25fd0ef          	jal	ra,80002f48 <vTaskExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:46
    return sel;
80005128:	fe842783          	lw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:47
}
8000512c:	00078513          	mv	a0,a5
80005130:	01c12083          	lw	ra,28(sp)
80005134:	01812403          	lw	s0,24(sp)
80005138:	02010113          	addi	sp,sp,32
8000513c:	00008067          	ret

80005140 <API_GetServiceSlot>:
API_GetServiceSlot():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:51

////////////////////////////////////////////////////////////
// Returns a free Service slot
unsigned int API_GetServiceSlot(){
80005140:	fe010113          	addi	sp,sp,-32
80005144:	00112e23          	sw	ra,28(sp)
80005148:	00812c23          	sw	s0,24(sp)
8000514c:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:53
    int i;
    vTaskEnterCritical();
80005150:	dbdfd0ef          	jal	ra,80002f0c <vTaskEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:54
    for( i = 0; i < PIPE_SIZE; i++ ){
80005154:	fe042623          	sw	zero,-20(s0)
80005158:	0700006f          	j	800051c8 <API_GetServiceSlot+0x88>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:55
        if (ServicePipe[i].status == PIPE_FREE){
8000515c:	800226b7          	lui	a3,0x80022
80005160:	fec42703          	lw	a4,-20(s0)
80005164:	00070793          	mv	a5,a4
80005168:	00479793          	slli	a5,a5,0x4
8000516c:	40e787b3          	sub	a5,a5,a4
80005170:	00279793          	slli	a5,a5,0x2
80005174:	9dc68713          	addi	a4,a3,-1572 # 800219dc <__stack_top+0xfffde7dc>
80005178:	00e787b3          	add	a5,a5,a4
8000517c:	0007a703          	lw	a4,0(a5)
80005180:	fff00793          	li	a5,-1
80005184:	02f71c63          	bne	a4,a5,800051bc <API_GetServiceSlot+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:56
            ServicePipe[i].status = PIPE_OCCUPIED;
80005188:	800226b7          	lui	a3,0x80022
8000518c:	fec42703          	lw	a4,-20(s0)
80005190:	00070793          	mv	a5,a4
80005194:	00479793          	slli	a5,a5,0x4
80005198:	40e787b3          	sub	a5,a5,a4
8000519c:	00279793          	slli	a5,a5,0x2
800051a0:	9dc68713          	addi	a4,a3,-1572 # 800219dc <__stack_top+0xfffde7dc>
800051a4:	00e787b3          	add	a5,a5,a4
800051a8:	00100713          	li	a4,1
800051ac:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:57
            vTaskExitCritical();
800051b0:	d99fd0ef          	jal	ra,80002f48 <vTaskExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:58
            return i;
800051b4:	fec42783          	lw	a5,-20(s0)
800051b8:	0280006f          	j	800051e0 <API_GetServiceSlot+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:54 (discriminator 2)
    for( i = 0; i < PIPE_SIZE; i++ ){
800051bc:	fec42783          	lw	a5,-20(s0)
800051c0:	00178793          	addi	a5,a5,1
800051c4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:54 (discriminator 1)
800051c8:	fec42703          	lw	a4,-20(s0)
800051cc:	00300793          	li	a5,3
800051d0:	f8e7d6e3          	ble	a4,a5,8000515c <API_GetServiceSlot+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:61
        }
    }
    vTaskExitCritical();
800051d4:	d75fd0ef          	jal	ra,80002f48 <vTaskExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:62
    return PIPE_FULL;
800051d8:	fdfe07b7          	lui	a5,0xfdfe0
800051dc:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9cbfd>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:63
}
800051e0:	00078513          	mv	a0,a5
800051e4:	01c12083          	lw	ra,28(sp)
800051e8:	01812403          	lw	s0,24(sp)
800051ec:	02010113          	addi	sp,sp,32
800051f0:	00008067          	ret

800051f4 <API_ClearPipeSlot>:
API_ClearPipeSlot():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:67

////////////////////////////////////////////////////////////
// Clear one PipeSlot after send it
void API_ClearPipeSlot(unsigned int typeSlot){
800051f4:	fd010113          	addi	sp,sp,-48
800051f8:	02812623          	sw	s0,44(sp)
800051fc:	03010413          	addi	s0,sp,48
80005200:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:68
    unsigned type = typeSlot & 0xFFFF0000;
80005204:	fdc42703          	lw	a4,-36(s0)
80005208:	ffff07b7          	lui	a5,0xffff0
8000520c:	00f777b3          	and	a5,a4,a5
80005210:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:69
    unsigned slot = typeSlot & 0x0000FFFF;
80005214:	fdc42703          	lw	a4,-36(s0)
80005218:	000107b7          	lui	a5,0x10
8000521c:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80005220:	00f777b3          	and	a5,a4,a5
80005224:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:72
    

    if (type == SERVICE){
80005228:	fec42703          	lw	a4,-20(s0)
8000522c:	101007b7          	lui	a5,0x10100
80005230:	04f71c63          	bne	a4,a5,80005288 <API_ClearPipeSlot+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:73
        ServicePipe[slot].status = PIPE_FREE;
80005234:	800226b7          	lui	a3,0x80022
80005238:	fe842703          	lw	a4,-24(s0)
8000523c:	00070793          	mv	a5,a4
80005240:	00479793          	slli	a5,a5,0x4
80005244:	40e787b3          	sub	a5,a5,a4
80005248:	00279793          	slli	a5,a5,0x2
8000524c:	9dc68713          	addi	a4,a3,-1572 # 800219dc <__stack_top+0xfffde7dc>
80005250:	00e787b3          	add	a5,a5,a4
80005254:	fff00713          	li	a4,-1
80005258:	00e7a023          	sw	a4,0(a5) # 10100000 <RAM_SIZE+0x10080000>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:74
        ServicePipe[slot].holder = PIPE_FREE;
8000525c:	800227b7          	lui	a5,0x80022
80005260:	fe842703          	lw	a4,-24(s0)
80005264:	9dc78693          	addi	a3,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
80005268:	00070793          	mv	a5,a4
8000526c:	00479793          	slli	a5,a5,0x4
80005270:	40e787b3          	sub	a5,a5,a4
80005274:	00279793          	slli	a5,a5,0x2
80005278:	00f687b3          	add	a5,a3,a5
8000527c:	fff00713          	li	a4,-1
80005280:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:82
    } else { // type == MESSAGE
        //printsv("cleaning message pipe slot: ", slot);
        MessagePipe[slot].status = PIPE_FREE;
        MessagePipe[slot].holder = PIPE_FREE;
    }
    return;
80005284:	05c0006f          	j	800052e0 <API_ClearPipeSlot+0xec>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:75
    } else if (type == THERMAL){
80005288:	fec42703          	lw	a4,-20(s0)
8000528c:	303007b7          	lui	a5,0x30300
80005290:	00f71663          	bne	a4,a5,8000529c <API_ClearPipeSlot+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:76
        thermalPacket_pending = FALSE;
80005294:	9601a223          	sw	zero,-1692(gp) # 800088d4 <thermalPacket_pending>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:82
    return;
80005298:	0480006f          	j	800052e0 <API_ClearPipeSlot+0xec>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:79
        MessagePipe[slot].status = PIPE_FREE;
8000529c:	800227b7          	lui	a5,0x80022
800052a0:	fe842683          	lw	a3,-24(s0)
800052a4:	24400713          	li	a4,580
800052a8:	02e68733          	mul	a4,a3,a4
800052ac:	d8478793          	addi	a5,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
800052b0:	00f707b3          	add	a5,a4,a5
800052b4:	fff00713          	li	a4,-1
800052b8:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:80
        MessagePipe[slot].holder = PIPE_FREE;
800052bc:	800227b7          	lui	a5,0x80022
800052c0:	fe842683          	lw	a3,-24(s0)
800052c4:	d8478713          	addi	a4,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
800052c8:	24400793          	li	a5,580
800052cc:	02f687b3          	mul	a5,a3,a5
800052d0:	00f707b3          	add	a5,a4,a5
800052d4:	fff00713          	li	a4,-1
800052d8:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:82
    return;
800052dc:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:83
}
800052e0:	02c12403          	lw	s0,44(sp)
800052e4:	03010113          	addi	sp,sp,48
800052e8:	00008067          	ret

800052ec <API_checkPipe>:
API_checkPipe():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:85

unsigned int API_checkPipe(unsigned int taskSlot){
800052ec:	fd010113          	addi	sp,sp,-48
800052f0:	02112623          	sw	ra,44(sp)
800052f4:	02812423          	sw	s0,40(sp)
800052f8:	03010413          	addi	s0,sp,48
800052fc:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:87
    unsigned int i;
    for(i = 0; i < PIPE_SIZE; i++){
80005300:	fe042623          	sw	zero,-20(s0)
80005304:	0d80006f          	j	800053dc <API_checkPipe+0xf0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:88
        printsv("i: ", i);
80005308:	fec42783          	lw	a5,-20(s0)
8000530c:	00078593          	mv	a1,a5
80005310:	800087b7          	lui	a5,0x80008
80005314:	1dc78513          	addi	a0,a5,476 # 800081dc <__stack_top+0xfffc4fdc>
80005318:	495000ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:89
        printsv("status: ", MessagePipe[i].status);
8000531c:	800227b7          	lui	a5,0x80022
80005320:	fec42683          	lw	a3,-20(s0)
80005324:	24400713          	li	a4,580
80005328:	02e68733          	mul	a4,a3,a4
8000532c:	d8478793          	addi	a5,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
80005330:	00f707b3          	add	a5,a4,a5
80005334:	0007a783          	lw	a5,0(a5)
80005338:	00078593          	mv	a1,a5
8000533c:	800087b7          	lui	a5,0x80008
80005340:	1e078513          	addi	a0,a5,480 # 800081e0 <__stack_top+0xfffc4fe0>
80005344:	469000ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:90
        printsv("holder: ", MessagePipe[i].holder);
80005348:	800227b7          	lui	a5,0x80022
8000534c:	fec42683          	lw	a3,-20(s0)
80005350:	d8478713          	addi	a4,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
80005354:	24400793          	li	a5,580
80005358:	02f687b3          	mul	a5,a3,a5
8000535c:	00f707b3          	add	a5,a4,a5
80005360:	0047a783          	lw	a5,4(a5)
80005364:	00078593          	mv	a1,a5
80005368:	800087b7          	lui	a5,0x80008
8000536c:	1ec78513          	addi	a0,a5,492 # 800081ec <__stack_top+0xfffc4fec>
80005370:	43d000ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:91
        prints("---\n");
80005374:	800087b7          	lui	a5,0x80008
80005378:	1f878513          	addi	a0,a5,504 # 800081f8 <__stack_top+0xfffc4ff8>
8000537c:	385000ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:92
        if(MessagePipe[i].status == PIPE_OCCUPIED){
80005380:	800227b7          	lui	a5,0x80022
80005384:	fec42683          	lw	a3,-20(s0)
80005388:	24400713          	li	a4,580
8000538c:	02e68733          	mul	a4,a3,a4
80005390:	d8478793          	addi	a5,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
80005394:	00f707b3          	add	a5,a4,a5
80005398:	0007a703          	lw	a4,0(a5)
8000539c:	00100793          	li	a5,1
800053a0:	02f71863          	bne	a4,a5,800053d0 <API_checkPipe+0xe4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:93
            if(MessagePipe[i].holder == taskSlot){
800053a4:	800227b7          	lui	a5,0x80022
800053a8:	fec42683          	lw	a3,-20(s0)
800053ac:	d8478713          	addi	a4,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
800053b0:	24400793          	li	a5,580
800053b4:	02f687b3          	mul	a5,a3,a5
800053b8:	00f707b3          	add	a5,a4,a5
800053bc:	0047a783          	lw	a5,4(a5)
800053c0:	fdc42703          	lw	a4,-36(s0)
800053c4:	00f71663          	bne	a4,a5,800053d0 <API_checkPipe+0xe4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:94
                return 1;
800053c8:	00100793          	li	a5,1
800053cc:	0200006f          	j	800053ec <API_checkPipe+0x100>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:87 (discriminator 2)
    for(i = 0; i < PIPE_SIZE; i++){
800053d0:	fec42783          	lw	a5,-20(s0)
800053d4:	00178793          	addi	a5,a5,1
800053d8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:87 (discriminator 1)
800053dc:	fec42703          	lw	a4,-20(s0)
800053e0:	00300793          	li	a5,3
800053e4:	f2e7f2e3          	bleu	a4,a5,80005308 <API_checkPipe+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:98
            }
        }
    }
    return 0;
800053e8:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/packet.c:99
}
800053ec:	00078513          	mv	a0,a5
800053f0:	02c12083          	lw	ra,44(sp)
800053f4:	02812403          	lw	s0,40(sp)
800053f8:	03010113          	addi	sp,sp,48
800053fc:	00008067          	ret

80005400 <API_setFreqIdle>:
API_setFreqIdle():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:3
#include "dvfs.h"

void API_setFreqIdle(){
80005400:	ff010113          	addi	sp,sp,-16
80005404:	00812623          	sw	s0,12(sp)
80005408:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:4
    selectedFrequencyScale = FREQ_IDLE;
8000540c:	800237b7          	lui	a5,0x80023
80005410:	06400713          	li	a4,100
80005414:	1ee7a623          	sw	a4,492(a5) # 800231ec <__stack_top+0xfffdffec>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:5
    return;
80005418:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:6
}
8000541c:	00c12403          	lw	s0,12(sp)
80005420:	01010113          	addi	sp,sp,16
80005424:	00008067          	ret

80005428 <API_setFreqScale>:
API_setFreqScale():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:8

void API_setFreqScale(unsigned int scale){
80005428:	fe010113          	addi	sp,sp,-32
8000542c:	00812e23          	sw	s0,28(sp)
80005430:	02010413          	addi	s0,sp,32
80005434:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:9
    selectedFrequencyScale = scale;
80005438:	800237b7          	lui	a5,0x80023
8000543c:	fec42703          	lw	a4,-20(s0)
80005440:	1ee7a623          	sw	a4,492(a5) # 800231ec <__stack_top+0xfffdffec>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:10
    return;
80005444:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:11
}
80005448:	01c12403          	lw	s0,28(sp)
8000544c:	02010113          	addi	sp,sp,32
80005450:	00008067          	ret

80005454 <API_getFreqScale>:
API_getFreqScale():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:13

unsigned int API_getFreqScale(){
80005454:	ff010113          	addi	sp,sp,-16
80005458:	00112623          	sw	ra,12(sp)
8000545c:	00812423          	sw	s0,8(sp)
80005460:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:14
    return HW_get_32bit_reg(FREQUENCY_SCALE);
80005464:	900007b7          	lui	a5,0x90000
80005468:	ff878513          	addi	a0,a5,-8 # 8ffffff8 <__stack_top+0xffbcdf8>
8000546c:	b31fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005470:	00050793          	mv	a5,a0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:15
}
80005474:	00078513          	mv	a0,a5
80005478:	00c12083          	lw	ra,12(sp)
8000547c:	00812403          	lw	s0,8(sp)
80005480:	01010113          	addi	sp,sp,16
80005484:	00008067          	ret

80005488 <API_applyFreqScale>:
API_applyFreqScale():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:17

void API_applyFreqScale(){
80005488:	ff010113          	addi	sp,sp,-16
8000548c:	00112623          	sw	ra,12(sp)
80005490:	00812423          	sw	s0,8(sp)
80005494:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:18
    if(selectedFrequencyScale != API_getFreqScale()){
80005498:	fbdff0ef          	jal	ra,80005454 <API_getFreqScale>
8000549c:	00050713          	mv	a4,a0
800054a0:	800237b7          	lui	a5,0x80023
800054a4:	1ec7a783          	lw	a5,492(a5) # 800231ec <__stack_top+0xfffdffec>
800054a8:	02f70063          	beq	a4,a5,800054c8 <API_applyFreqScale+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:19
        HW_set_32bit_reg(FREQUENCY_SCALE, selectedFrequencyScale);
800054ac:	800237b7          	lui	a5,0x80023
800054b0:	1ec7a783          	lw	a5,492(a5) # 800231ec <__stack_top+0xfffdffec>
800054b4:	00078593          	mv	a1,a5
800054b8:	900007b7          	lui	a5,0x90000
800054bc:	ff878513          	addi	a0,a5,-8 # 8ffffff8 <__stack_top+0xffbcdf8>
800054c0:	ad5fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:21
    }
    return;
800054c4:	00000013          	nop
800054c8:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:22
}
800054cc:	00c12083          	lw	ra,12(sp)
800054d0:	00812403          	lw	s0,8(sp)
800054d4:	01010113          	addi	sp,sp,16
800054d8:	00008067          	ret

800054dc <API_freqStepUp>:
API_freqStepUp():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:24

void API_freqStepUp(){
800054dc:	ff010113          	addi	sp,sp,-16
800054e0:	00812623          	sw	s0,12(sp)
800054e4:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:25
    if(selectedFrequencyScale == FREQ_IDLE){
800054e8:	800237b7          	lui	a5,0x80023
800054ec:	1ec7a703          	lw	a4,492(a5) # 800231ec <__stack_top+0xfffdffec>
800054f0:	06400793          	li	a5,100
800054f4:	00f71a63          	bne	a4,a5,80005508 <API_freqStepUp+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:26
        selectedFrequencyScale = FREQ_150MHz;
800054f8:	800237b7          	lui	a5,0x80023
800054fc:	09600713          	li	a4,150
80005500:	1ee7a623          	sw	a4,492(a5) # 800231ec <__stack_top+0xfffdffec>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
        }
        else{
            selectedFrequencyScale = FREQ_IDLE;
        }
    }
    return;
80005504:	1340006f          	j	80005638 <API_freqStepUp+0x15c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:28
    else if(selectedFrequencyScale==FREQ_150MHz){
80005508:	800237b7          	lui	a5,0x80023
8000550c:	1ec7a703          	lw	a4,492(a5) # 800231ec <__stack_top+0xfffdffec>
80005510:	09600793          	li	a5,150
80005514:	00f71a63          	bne	a4,a5,80005528 <API_freqStepUp+0x4c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:29
        selectedFrequencyScale = FREQ_250MHz;
80005518:	800237b7          	lui	a5,0x80023
8000551c:	0fa00713          	li	a4,250
80005520:	1ee7a623          	sw	a4,492(a5) # 800231ec <__stack_top+0xfffdffec>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005524:	1140006f          	j	80005638 <API_freqStepUp+0x15c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:31
    else if(selectedFrequencyScale==FREQ_250MHz){
80005528:	800237b7          	lui	a5,0x80023
8000552c:	1ec7a703          	lw	a4,492(a5) # 800231ec <__stack_top+0xfffdffec>
80005530:	0fa00793          	li	a5,250
80005534:	00f71a63          	bne	a4,a5,80005548 <API_freqStepUp+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:32
        selectedFrequencyScale = FREQ_500MHz;
80005538:	800237b7          	lui	a5,0x80023
8000553c:	1f400713          	li	a4,500
80005540:	1ee7a623          	sw	a4,492(a5) # 800231ec <__stack_top+0xfffdffec>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005544:	0f40006f          	j	80005638 <API_freqStepUp+0x15c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:34
    else if(selectedFrequencyScale==FREQ_500MHz){
80005548:	800237b7          	lui	a5,0x80023
8000554c:	1ec7a703          	lw	a4,492(a5) # 800231ec <__stack_top+0xfffdffec>
80005550:	1f400793          	li	a5,500
80005554:	00f71a63          	bne	a4,a5,80005568 <API_freqStepUp+0x8c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:35
        selectedFrequencyScale = FREQ_1GHz;
80005558:	800237b7          	lui	a5,0x80023
8000555c:	3e800713          	li	a4,1000
80005560:	1ee7a623          	sw	a4,492(a5) # 800231ec <__stack_top+0xfffdffec>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005564:	0d40006f          	j	80005638 <API_freqStepUp+0x15c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:37
    else if(selectedFrequencyScale==FREQ_1GHz){
80005568:	800237b7          	lui	a5,0x80023
8000556c:	1ec7a703          	lw	a4,492(a5) # 800231ec <__stack_top+0xfffdffec>
80005570:	3e800793          	li	a5,1000
80005574:	00f71a63          	bne	a4,a5,80005588 <API_freqStepUp+0xac>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:38
        selectedFrequencyScale = FREQ_1GHz;
80005578:	800237b7          	lui	a5,0x80023
8000557c:	3e800713          	li	a4,1000
80005580:	1ee7a623          	sw	a4,492(a5) # 800231ec <__stack_top+0xfffdffec>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005584:	0b40006f          	j	80005638 <API_freqStepUp+0x15c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:41
        if(selectedFrequencyScale > FREQ_1GHz){
80005588:	800237b7          	lui	a5,0x80023
8000558c:	1ec7a703          	lw	a4,492(a5) # 800231ec <__stack_top+0xfffdffec>
80005590:	3e800793          	li	a5,1000
80005594:	00e7fa63          	bleu	a4,a5,800055a8 <API_freqStepUp+0xcc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:42
            selectedFrequencyScale = FREQ_1GHz;
80005598:	800237b7          	lui	a5,0x80023
8000559c:	3e800713          	li	a4,1000
800055a0:	1ee7a623          	sw	a4,492(a5) # 800231ec <__stack_top+0xfffdffec>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
800055a4:	0940006f          	j	80005638 <API_freqStepUp+0x15c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:44
        else if(selectedFrequencyScale > FREQ_500MHz){
800055a8:	800237b7          	lui	a5,0x80023
800055ac:	1ec7a703          	lw	a4,492(a5) # 800231ec <__stack_top+0xfffdffec>
800055b0:	1f400793          	li	a5,500
800055b4:	00e7fa63          	bleu	a4,a5,800055c8 <API_freqStepUp+0xec>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:45
            selectedFrequencyScale = FREQ_1GHz;
800055b8:	800237b7          	lui	a5,0x80023
800055bc:	3e800713          	li	a4,1000
800055c0:	1ee7a623          	sw	a4,492(a5) # 800231ec <__stack_top+0xfffdffec>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
800055c4:	0740006f          	j	80005638 <API_freqStepUp+0x15c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:47
        else if(selectedFrequencyScale > FREQ_250MHz){
800055c8:	800237b7          	lui	a5,0x80023
800055cc:	1ec7a703          	lw	a4,492(a5) # 800231ec <__stack_top+0xfffdffec>
800055d0:	0fa00793          	li	a5,250
800055d4:	00e7fa63          	bleu	a4,a5,800055e8 <API_freqStepUp+0x10c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:48
            selectedFrequencyScale = FREQ_500MHz;
800055d8:	800237b7          	lui	a5,0x80023
800055dc:	1f400713          	li	a4,500
800055e0:	1ee7a623          	sw	a4,492(a5) # 800231ec <__stack_top+0xfffdffec>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
800055e4:	0540006f          	j	80005638 <API_freqStepUp+0x15c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:50
        else if(selectedFrequencyScale > FREQ_150MHz){
800055e8:	800237b7          	lui	a5,0x80023
800055ec:	1ec7a703          	lw	a4,492(a5) # 800231ec <__stack_top+0xfffdffec>
800055f0:	09600793          	li	a5,150
800055f4:	00e7fa63          	bleu	a4,a5,80005608 <API_freqStepUp+0x12c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:51
            selectedFrequencyScale = FREQ_250MHz;
800055f8:	800237b7          	lui	a5,0x80023
800055fc:	0fa00713          	li	a4,250
80005600:	1ee7a623          	sw	a4,492(a5) # 800231ec <__stack_top+0xfffdffec>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005604:	0340006f          	j	80005638 <API_freqStepUp+0x15c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:53
        else if(selectedFrequencyScale > FREQ_IDLE){
80005608:	800237b7          	lui	a5,0x80023
8000560c:	1ec7a703          	lw	a4,492(a5) # 800231ec <__stack_top+0xfffdffec>
80005610:	06400793          	li	a5,100
80005614:	00e7fa63          	bleu	a4,a5,80005628 <API_freqStepUp+0x14c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:54
            selectedFrequencyScale = FREQ_150MHz;
80005618:	800237b7          	lui	a5,0x80023
8000561c:	09600713          	li	a4,150
80005620:	1ee7a623          	sw	a4,492(a5) # 800231ec <__stack_top+0xfffdffec>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005624:	0140006f          	j	80005638 <API_freqStepUp+0x15c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:57
            selectedFrequencyScale = FREQ_IDLE;
80005628:	800237b7          	lui	a5,0x80023
8000562c:	06400713          	li	a4,100
80005630:	1ee7a623          	sw	a4,492(a5) # 800231ec <__stack_top+0xfffdffec>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005634:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/dvfs.c:61
}
80005638:	00c12403          	lw	s0,12(sp)
8000563c:	01010113          	addi	sp,sp,16
80005640:	00008067          	ret

80005644 <resetExecutedInstructions>:
resetExecutedInstructions():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:12
    printsv("Stores:\t\t",      HW_get_32bit_reg(STORES_COUNT));
    printsv("Others:\t\t",      HW_get_32bit_reg(OTHERS_COUNT));
    prints("--------------------------\n");
}

void resetExecutedInstructions(){
80005644:	ff010113          	addi	sp,sp,-16
80005648:	00112623          	sw	ra,12(sp)
8000564c:	00812423          	sw	s0,8(sp)
80005650:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:13
    HW_set_32bit_reg(LOADS_COUNT, 0);
80005654:	00000593          	li	a1,0
80005658:	900007b7          	lui	a5,0x90000
8000565c:	ff478513          	addi	a0,a5,-12 # 8ffffff4 <__stack_top+0xffbcdf4>
80005660:	935fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:14
    HW_set_32bit_reg(STORES_COUNT, 0);
80005664:	00000593          	li	a1,0
80005668:	900007b7          	lui	a5,0x90000
8000566c:	ff078513          	addi	a0,a5,-16 # 8ffffff0 <__stack_top+0xffbcdf0>
80005670:	925fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:15
    HW_set_32bit_reg(OTHERS_COUNT, 0);
80005674:	00000593          	li	a1,0
80005678:	900007b7          	lui	a5,0x90000
8000567c:	fec78513          	addi	a0,a5,-20 # 8fffffec <__stack_top+0xffbcdec>
80005680:	915fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:16
    return;
80005684:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:17
}
80005688:	00c12083          	lw	ra,12(sp)
8000568c:	00812403          	lw	s0,8(sp)
80005690:	01010113          	addi	sp,sp,16
80005694:	00008067          	ret

80005698 <getNumberOfPorts>:
getNumberOfPorts():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:21

///////////////////////////////////////////////////////////////////
/* Get the number of ports in the router based in his address*/
unsigned int getNumberOfPorts(unsigned int address) {
80005698:	fd010113          	addi	sp,sp,-48
8000569c:	02112623          	sw	ra,44(sp)
800056a0:	02812423          	sw	s0,40(sp)
800056a4:	03010413          	addi	s0,sp,48
800056a8:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:23
    unsigned int x, y;
    x = getXpos(address);
800056ac:	fdc42503          	lw	a0,-36(s0)
800056b0:	1a5000ef          	jal	ra,80006054 <getXpos>
800056b4:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:24
    y = getYpos(address);
800056b8:	fdc42503          	lw	a0,-36(s0)
800056bc:	1c5000ef          	jal	ra,80006080 <getYpos>
800056c0:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:26

    if ((x == 0 || x == (DIM_X - 1)) && (y == 0 || y == (DIM_Y - 1))) {
800056c4:	fec42783          	lw	a5,-20(s0)
800056c8:	00078863          	beqz	a5,800056d8 <getNumberOfPorts+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:26 (discriminator 2)
800056cc:	fec42703          	lw	a4,-20(s0)
800056d0:	00200793          	li	a5,2
800056d4:	02f71063          	bne	a4,a5,800056f4 <getNumberOfPorts+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:26 (discriminator 3)
800056d8:	fe842783          	lw	a5,-24(s0)
800056dc:	00078863          	beqz	a5,800056ec <getNumberOfPorts+0x54>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:26 (discriminator 4)
800056e0:	fe842703          	lw	a4,-24(s0)
800056e4:	00200793          	li	a5,2
800056e8:	00f71663          	bne	a4,a5,800056f4 <getNumberOfPorts+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:27
        return 3;
800056ec:	00300793          	li	a5,3
800056f0:	0380006f          	j	80005728 <getNumberOfPorts+0x90>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:29
    } else {
        if (x == 0 || x == (DIM_X - 1) || y == 0 || y == (DIM_Y - 1)) {
800056f4:	fec42783          	lw	a5,-20(s0)
800056f8:	02078263          	beqz	a5,8000571c <getNumberOfPorts+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:29 (discriminator 1)
800056fc:	fec42703          	lw	a4,-20(s0)
80005700:	00200793          	li	a5,2
80005704:	00f70c63          	beq	a4,a5,8000571c <getNumberOfPorts+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:29 (discriminator 2)
80005708:	fe842783          	lw	a5,-24(s0)
8000570c:	00078863          	beqz	a5,8000571c <getNumberOfPorts+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:29 (discriminator 3)
80005710:	fe842703          	lw	a4,-24(s0)
80005714:	00200793          	li	a5,2
80005718:	00f71663          	bne	a4,a5,80005724 <getNumberOfPorts+0x8c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:30
            return 4;
8000571c:	00400793          	li	a5,4
80005720:	0080006f          	j	80005728 <getNumberOfPorts+0x90>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:32
        } else {
            return 5;
80005724:	00500793          	li	a5,5
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:35
        }
    }
}
80005728:	00078513          	mv	a0,a5
8000572c:	02c12083          	lw	ra,44(sp)
80005730:	02812403          	lw	s0,40(sp)
80005734:	03010113          	addi	sp,sp,48
80005738:	00008067          	ret

8000573c <estimateNoCActivity>:
estimateNoCActivity():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:39

///////////////////////////////////////////////////////////////////
/* Activity estimation based in the amount of flits and packets crossing the router */
unsigned int estimateNoCActivity() {
8000573c:	fe010113          	addi	sp,sp,-32
80005740:	00112e23          	sw	ra,28(sp)
80005744:	00812c23          	sw	s0,24(sp)
80005748:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:42
    unsigned int totalPackets, totalFlits;
    // calculate the difference between the last interruption and the current one
    totalPackets =  HW_get_32bit_reg(EAST_PACKETS) - eastPackets_last;
8000574c:	900007b7          	lui	a5,0x90000
80005750:	fc478513          	addi	a0,a5,-60 # 8fffffc4 <__stack_top+0xffbcdc4>
80005754:	849fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005758:	00050713          	mv	a4,a0
8000575c:	96c1a783          	lw	a5,-1684(gp) # 800088dc <eastPackets_last>
80005760:	40f707b3          	sub	a5,a4,a5
80005764:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:43
    totalPackets += HW_get_32bit_reg(WEST_PACKETS) - westPackets_last;
80005768:	900007b7          	lui	a5,0x90000
8000576c:	fbc78513          	addi	a0,a5,-68 # 8fffffbc <__stack_top+0xffbcdbc>
80005770:	82dfb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005774:	00050713          	mv	a4,a0
80005778:	9741a783          	lw	a5,-1676(gp) # 800088e4 <westPackets_last>
8000577c:	40f707b3          	sub	a5,a4,a5
80005780:	fec42703          	lw	a4,-20(s0)
80005784:	00f707b3          	add	a5,a4,a5
80005788:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:44
    totalPackets += HW_get_32bit_reg(SOUTH_PACKETS) - southPackets_last;
8000578c:	900007b7          	lui	a5,0x90000
80005790:	fac78513          	addi	a0,a5,-84 # 8fffffac <__stack_top+0xffbcdac>
80005794:	809fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005798:	00050713          	mv	a4,a0
8000579c:	9841a783          	lw	a5,-1660(gp) # 800088f4 <southPackets_last>
800057a0:	40f707b3          	sub	a5,a4,a5
800057a4:	fec42703          	lw	a4,-20(s0)
800057a8:	00f707b3          	add	a5,a4,a5
800057ac:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:45
    totalPackets += HW_get_32bit_reg(LOCAL_PACKETS) - localPackets_last;
800057b0:	900007b7          	lui	a5,0x90000
800057b4:	fa478513          	addi	a0,a5,-92 # 8fffffa4 <__stack_top+0xffbcda4>
800057b8:	fe4fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800057bc:	00050713          	mv	a4,a0
800057c0:	98c1a783          	lw	a5,-1652(gp) # 800088fc <localPackets_last>
800057c4:	40f707b3          	sub	a5,a4,a5
800057c8:	fec42703          	lw	a4,-20(s0)
800057cc:	00f707b3          	add	a5,a4,a5
800057d0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:46
    totalPackets += HW_get_32bit_reg(NORTH_PACKETS) - northPackets_last;
800057d4:	900007b7          	lui	a5,0x90000
800057d8:	fb478513          	addi	a0,a5,-76 # 8fffffb4 <__stack_top+0xffbcdb4>
800057dc:	fc0fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800057e0:	00050713          	mv	a4,a0
800057e4:	97c1a783          	lw	a5,-1668(gp) # 800088ec <northPackets_last>
800057e8:	40f707b3          	sub	a5,a4,a5
800057ec:	fec42703          	lw	a4,-20(s0)
800057f0:	00f707b3          	add	a5,a4,a5
800057f4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:49
    //totalPackets = eastPackets_dif + westPackets_dif + southPackets_dif + localPackets_dif + northPackets_dif;

    eastPackets_last  = HW_get_32bit_reg(EAST_PACKETS);
800057f8:	900007b7          	lui	a5,0x90000
800057fc:	fc478513          	addi	a0,a5,-60 # 8fffffc4 <__stack_top+0xffbcdc4>
80005800:	f9cfb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005804:	00050713          	mv	a4,a0
80005808:	96e1a623          	sw	a4,-1684(gp) # 800088dc <eastPackets_last>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:50
    westPackets_last  = HW_get_32bit_reg(WEST_PACKETS);
8000580c:	900007b7          	lui	a5,0x90000
80005810:	fbc78513          	addi	a0,a5,-68 # 8fffffbc <__stack_top+0xffbcdbc>
80005814:	f88fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005818:	00050713          	mv	a4,a0
8000581c:	96e1aa23          	sw	a4,-1676(gp) # 800088e4 <westPackets_last>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:51
    southPackets_last = HW_get_32bit_reg(SOUTH_PACKETS);
80005820:	900007b7          	lui	a5,0x90000
80005824:	fac78513          	addi	a0,a5,-84 # 8fffffac <__stack_top+0xffbcdac>
80005828:	f74fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
8000582c:	00050713          	mv	a4,a0
80005830:	98e1a223          	sw	a4,-1660(gp) # 800088f4 <southPackets_last>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:52
    localPackets_last = HW_get_32bit_reg(LOCAL_PACKETS);
80005834:	900007b7          	lui	a5,0x90000
80005838:	fa478513          	addi	a0,a5,-92 # 8fffffa4 <__stack_top+0xffbcda4>
8000583c:	f60fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005840:	00050713          	mv	a4,a0
80005844:	98e1a623          	sw	a4,-1652(gp) # 800088fc <localPackets_last>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:53
    northPackets_last = HW_get_32bit_reg(NORTH_PACKETS);
80005848:	900007b7          	lui	a5,0x90000
8000584c:	fb478513          	addi	a0,a5,-76 # 8fffffb4 <__stack_top+0xffbcdb4>
80005850:	f4cfb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005854:	00050713          	mv	a4,a0
80005858:	96e1ae23          	sw	a4,-1668(gp) # 800088ec <northPackets_last>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:56

    // alculate the difference between the last interruption and the current one
    totalFlits =  HW_get_32bit_reg(EAST_FLITS) - eastFlits_last;
8000585c:	900007b7          	lui	a5,0x90000
80005860:	fc878513          	addi	a0,a5,-56 # 8fffffc8 <__stack_top+0xffbcdc8>
80005864:	f38fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005868:	00050713          	mv	a4,a0
8000586c:	9681a783          	lw	a5,-1688(gp) # 800088d8 <eastFlits_last>
80005870:	40f707b3          	sub	a5,a4,a5
80005874:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:57
    totalFlits += HW_get_32bit_reg(WEST_FLITS) - westFlits_last;
80005878:	900007b7          	lui	a5,0x90000
8000587c:	fc078513          	addi	a0,a5,-64 # 8fffffc0 <__stack_top+0xffbcdc0>
80005880:	f1cfb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005884:	00050713          	mv	a4,a0
80005888:	9701a783          	lw	a5,-1680(gp) # 800088e0 <westFlits_last>
8000588c:	40f707b3          	sub	a5,a4,a5
80005890:	fe842703          	lw	a4,-24(s0)
80005894:	00f707b3          	add	a5,a4,a5
80005898:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:58
    totalFlits += HW_get_32bit_reg(SOUTH_FLITS) - southFlits_last;
8000589c:	900007b7          	lui	a5,0x90000
800058a0:	fb078513          	addi	a0,a5,-80 # 8fffffb0 <__stack_top+0xffbcdb0>
800058a4:	ef8fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800058a8:	00050713          	mv	a4,a0
800058ac:	9801a783          	lw	a5,-1664(gp) # 800088f0 <southFlits_last>
800058b0:	40f707b3          	sub	a5,a4,a5
800058b4:	fe842703          	lw	a4,-24(s0)
800058b8:	00f707b3          	add	a5,a4,a5
800058bc:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:59
    memFlits = HW_get_32bit_reg(LOCAL_FLITS) - localFlits_last;
800058c0:	900007b7          	lui	a5,0x90000
800058c4:	fa878513          	addi	a0,a5,-88 # 8fffffa8 <__stack_top+0xffbcda8>
800058c8:	ed4fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800058cc:	00050713          	mv	a4,a0
800058d0:	9881a783          	lw	a5,-1656(gp) # 800088f8 <localFlits_last>
800058d4:	40f70733          	sub	a4,a4,a5
800058d8:	800237b7          	lui	a5,0x80023
800058dc:	1ee7a823          	sw	a4,496(a5) # 800231f0 <__stack_top+0xfffdfff0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:60
    totalFlits += memFlits;
800058e0:	800237b7          	lui	a5,0x80023
800058e4:	1f07a783          	lw	a5,496(a5) # 800231f0 <__stack_top+0xfffdfff0>
800058e8:	fe842703          	lw	a4,-24(s0)
800058ec:	00f707b3          	add	a5,a4,a5
800058f0:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:62
    //totalFlits += HW_get_32bit_reg(LOCAL_FLITS) - localFlits_last;
    totalFlits += HW_get_32bit_reg(NORTH_FLITS) - northFlits_last;
800058f4:	900007b7          	lui	a5,0x90000
800058f8:	fb878513          	addi	a0,a5,-72 # 8fffffb8 <__stack_top+0xffbcdb8>
800058fc:	ea0fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005900:	00050713          	mv	a4,a0
80005904:	9781a783          	lw	a5,-1672(gp) # 800088e8 <northFlits_last>
80005908:	40f707b3          	sub	a5,a4,a5
8000590c:	fe842703          	lw	a4,-24(s0)
80005910:	00f707b3          	add	a5,a4,a5
80005914:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:65
    //totalFlits = eastFlits_dif + westFlits_dif + southFlits_dif + localFlits_dif + northFlits_dif;

    eastFlits_last  = HW_get_32bit_reg(EAST_FLITS);
80005918:	900007b7          	lui	a5,0x90000
8000591c:	fc878513          	addi	a0,a5,-56 # 8fffffc8 <__stack_top+0xffbcdc8>
80005920:	e7cfb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005924:	00050713          	mv	a4,a0
80005928:	96e1a423          	sw	a4,-1688(gp) # 800088d8 <eastFlits_last>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:66
    westFlits_last  = HW_get_32bit_reg(WEST_FLITS);
8000592c:	900007b7          	lui	a5,0x90000
80005930:	fc078513          	addi	a0,a5,-64 # 8fffffc0 <__stack_top+0xffbcdc0>
80005934:	e68fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005938:	00050713          	mv	a4,a0
8000593c:	96e1a823          	sw	a4,-1680(gp) # 800088e0 <westFlits_last>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:67
    southFlits_last = HW_get_32bit_reg(SOUTH_FLITS);
80005940:	900007b7          	lui	a5,0x90000
80005944:	fb078513          	addi	a0,a5,-80 # 8fffffb0 <__stack_top+0xffbcdb0>
80005948:	e54fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
8000594c:	00050713          	mv	a4,a0
80005950:	98e1a023          	sw	a4,-1664(gp) # 800088f0 <southFlits_last>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:68
    localFlits_last = HW_get_32bit_reg(LOCAL_FLITS);
80005954:	900007b7          	lui	a5,0x90000
80005958:	fa878513          	addi	a0,a5,-88 # 8fffffa8 <__stack_top+0xffbcda8>
8000595c:	e40fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005960:	00050713          	mv	a4,a0
80005964:	98e1a423          	sw	a4,-1656(gp) # 800088f8 <localFlits_last>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:69
    northFlits_last = HW_get_32bit_reg(NORTH_FLITS);
80005968:	900007b7          	lui	a5,0x90000
8000596c:	fb878513          	addi	a0,a5,-72 # 8fffffb8 <__stack_top+0xffbcdb8>
80005970:	e2cfb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005974:	00050713          	mv	a4,a0
80005978:	96e1ac23          	sw	a4,-1672(gp) # 800088e8 <northFlits_last>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:71

    return ((totalPackets * 5) + totalFlits);
8000597c:	fec42703          	lw	a4,-20(s0)
80005980:	00070793          	mv	a5,a4
80005984:	00279793          	slli	a5,a5,0x2
80005988:	00e78733          	add	a4,a5,a4
8000598c:	fe842783          	lw	a5,-24(s0)
80005990:	00f707b3          	add	a5,a4,a5
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:72
}
80005994:	00078513          	mv	a0,a5
80005998:	01c12083          	lw	ra,28(sp)
8000599c:	01812403          	lw	s0,24(sp)
800059a0:	02010113          	addi	sp,sp,32
800059a4:	00008067          	ret

800059a8 <powerEstimation>:
powerEstimation():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:74

void powerEstimation(){
800059a8:	fa010113          	addi	sp,sp,-96
800059ac:	04112e23          	sw	ra,92(sp)
800059b0:	04812c23          	sw	s0,88(sp)
800059b4:	06010413          	addi	s0,sp,96
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:76
    //unsigned int actualTime, deltaTime;
    unsigned int Voltage = 2;
800059b8:	00200793          	li	a5,2
800059bc:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:82
    unsigned int loads, stores, others, total;
    unsigned int dynamicEnergy_PE, dynamicEnergy_MEM, dynamicEnergy_Router;
    unsigned int leakEnergy_PE;
    unsigned int totalEnergy, nPorts, nocActivity, energyActive, energyIdle, nocIdle, idleNoCEnergy, activeNoCEnergy;
    
    if(!thermalPacket_pending){
800059c0:	9641a783          	lw	a5,-1692(gp) # 800088d4 <thermalPacket_pending>
800059c4:	34079263          	bnez	a5,80005d08 <powerEstimation+0x360>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:83
        thermalPacket_pending = TRUE;
800059c8:	00100713          	li	a4,1
800059cc:	96e1a223          	sw	a4,-1692(gp) # 800088d4 <thermalPacket_pending>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:86

        // gets the number of ports
        nPorts = getNumberOfPorts(ProcessorAddr);
800059d0:	800237b7          	lui	a5,0x80023
800059d4:	1fc7a783          	lw	a5,508(a5) # 800231fc <__stack_top+0xfffdfffc>
800059d8:	00078513          	mv	a0,a5
800059dc:	cbdff0ef          	jal	ra,80005698 <getNumberOfPorts>
800059e0:	fea42223          	sw	a0,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:89
         
        // estimate the noc activity
        nocActivity = estimateNoCActivity();
800059e4:	d59ff0ef          	jal	ra,8000573c <estimateNoCActivity>
800059e8:	fea42023          	sw	a0,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:90
        if(nocActivity < 1000000)
800059ec:	fe042703          	lw	a4,-32(s0)
800059f0:	000f47b7          	lui	a5,0xf4
800059f4:	23f78793          	addi	a5,a5,575 # f423f <RAM_SIZE+0x7423f>
800059f8:	00e7ee63          	bltu	a5,a4,80005a14 <powerEstimation+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:91
            nocIdle = 1000000 - nocActivity;
800059fc:	000f47b7          	lui	a5,0xf4
80005a00:	24078713          	addi	a4,a5,576 # f4240 <RAM_SIZE+0x74240>
80005a04:	fe042783          	lw	a5,-32(s0)
80005a08:	40f707b3          	sub	a5,a4,a5
80005a0c:	fef42623          	sw	a5,-20(s0)
80005a10:	0080006f          	j	80005a18 <powerEstimation+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:93
        else
            nocIdle = 0;
80005a14:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:96

        // calculates the energy
        energyActive = ((nPorts * powerAvgBufferActive[Voltage]) + powerSwitchControlActive[Voltage]);
80005a18:	800087b7          	lui	a5,0x80008
80005a1c:	fe842703          	lw	a4,-24(s0)
80005a20:	00271713          	slli	a4,a4,0x2
80005a24:	21878793          	addi	a5,a5,536 # 80008218 <__stack_top+0xfffc5018>
80005a28:	00f707b3          	add	a5,a4,a5
80005a2c:	0007a783          	lw	a5,0(a5)
80005a30:	00078713          	mv	a4,a5
80005a34:	fe442783          	lw	a5,-28(s0)
80005a38:	02f707b3          	mul	a5,a4,a5
80005a3c:	80008737          	lui	a4,0x80008
80005a40:	fe842683          	lw	a3,-24(s0)
80005a44:	00269693          	slli	a3,a3,0x2
80005a48:	22470713          	addi	a4,a4,548 # 80008224 <__stack_top+0xfffc5024>
80005a4c:	00e68733          	add	a4,a3,a4
80005a50:	00072703          	lw	a4,0(a4)
80005a54:	00e787b3          	add	a5,a5,a4
80005a58:	fcf42e23          	sw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:97
        energyIdle   = ((nPorts * powerAvgBufferIdle[Voltage]) + powerSwitchControlIdle[Voltage]);
80005a5c:	800087b7          	lui	a5,0x80008
80005a60:	fe842703          	lw	a4,-24(s0)
80005a64:	00271713          	slli	a4,a4,0x2
80005a68:	20078793          	addi	a5,a5,512 # 80008200 <__stack_top+0xfffc5000>
80005a6c:	00f707b3          	add	a5,a4,a5
80005a70:	0007a783          	lw	a5,0(a5)
80005a74:	00078713          	mv	a4,a5
80005a78:	fe442783          	lw	a5,-28(s0)
80005a7c:	02f707b3          	mul	a5,a4,a5
80005a80:	80008737          	lui	a4,0x80008
80005a84:	fe842683          	lw	a3,-24(s0)
80005a88:	00269693          	slli	a3,a3,0x2
80005a8c:	20c70713          	addi	a4,a4,524 # 8000820c <__stack_top+0xfffc500c>
80005a90:	00e68733          	add	a4,a3,a4
80005a94:	00072703          	lw	a4,0(a4)
80005a98:	00e787b3          	add	a5,a5,a4
80005a9c:	fcf42c23          	sw	a5,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:100

        // multiply by the period to get the power consumption
        idleNoCEnergy = nocIdle * energyIdle; // * DC_DC_CONVERTER_ENERGY_OVERHEAD / 10;
80005aa0:	fec42703          	lw	a4,-20(s0)
80005aa4:	fd842783          	lw	a5,-40(s0)
80005aa8:	02f707b3          	mul	a5,a4,a5
80005aac:	fcf42a23          	sw	a5,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:101
        activeNoCEnergy = nocActivity * energyActive + (memFlits * (readEnergyMemory[Voltage] + writeEnergyMemory[Voltage]));  //* DC_DC_CONVERTER_ENERGY_OVERHEAD / 10;
80005ab0:	fe042703          	lw	a4,-32(s0)
80005ab4:	fdc42783          	lw	a5,-36(s0)
80005ab8:	02f70733          	mul	a4,a4,a5
80005abc:	800087b7          	lui	a5,0x80008
80005ac0:	fe842683          	lw	a3,-24(s0)
80005ac4:	00269693          	slli	a3,a3,0x2
80005ac8:	23078793          	addi	a5,a5,560 # 80008230 <__stack_top+0xfffc5030>
80005acc:	00f687b3          	add	a5,a3,a5
80005ad0:	0007a683          	lw	a3,0(a5)
80005ad4:	800087b7          	lui	a5,0x80008
80005ad8:	fe842603          	lw	a2,-24(s0)
80005adc:	00261613          	slli	a2,a2,0x2
80005ae0:	23c78793          	addi	a5,a5,572 # 8000823c <__stack_top+0xfffc503c>
80005ae4:	00f607b3          	add	a5,a2,a5
80005ae8:	0007a783          	lw	a5,0(a5)
80005aec:	00f687b3          	add	a5,a3,a5
80005af0:	00078693          	mv	a3,a5
80005af4:	800237b7          	lui	a5,0x80023
80005af8:	1f07a783          	lw	a5,496(a5) # 800231f0 <__stack_top+0xfffdfff0>
80005afc:	02f687b3          	mul	a5,a3,a5
80005b00:	00f707b3          	add	a5,a4,a5
80005b04:	fcf42823          	sw	a5,-48(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:104

        // calculates the ROUTER dynamic energy
        dynamicEnergy_Router = (idleNoCEnergy + activeNoCEnergy) >> 6;
80005b08:	fd442703          	lw	a4,-44(s0)
80005b0c:	fd042783          	lw	a5,-48(s0)
80005b10:	00f707b3          	add	a5,a4,a5
80005b14:	0067d793          	srli	a5,a5,0x6
80005b18:	fcf42623          	sw	a5,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:105
        printsv("dynamicEnergy_Router >> ", dynamicEnergy_Router);
80005b1c:	fcc42783          	lw	a5,-52(s0)
80005b20:	00078593          	mv	a1,a5
80005b24:	800087b7          	lui	a5,0x80008
80005b28:	2a078513          	addi	a0,a5,672 # 800082a0 <__stack_top+0xfffc50a0>
80005b2c:	480000ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:108

        // reads the number of each type of instruction executed in the last window
        loads = HW_get_32bit_reg(LOADS_COUNT);
80005b30:	900007b7          	lui	a5,0x90000
80005b34:	ff478513          	addi	a0,a5,-12 # 8ffffff4 <__stack_top+0xffbcdf4>
80005b38:	c64fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005b3c:	fca42423          	sw	a0,-56(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:109
        stores = HW_get_32bit_reg(STORES_COUNT);
80005b40:	900007b7          	lui	a5,0x90000
80005b44:	ff078513          	addi	a0,a5,-16 # 8ffffff0 <__stack_top+0xffbcdf0>
80005b48:	c54fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005b4c:	fca42223          	sw	a0,-60(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:110
        others = HW_get_32bit_reg(OTHERS_COUNT);
80005b50:	900007b7          	lui	a5,0x90000
80005b54:	fec78513          	addi	a0,a5,-20 # 8fffffec <__stack_top+0xffbcdec>
80005b58:	c44fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005b5c:	fca42023          	sw	a0,-64(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:111
        resetExecutedInstructions();
80005b60:	ae5ff0ef          	jal	ra,80005644 <resetExecutedInstructions>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:114

        // number of instructions executed in the last window
        total = loads + stores + others; 
80005b64:	fc842703          	lw	a4,-56(s0)
80005b68:	fc442783          	lw	a5,-60(s0)
80005b6c:	00f707b3          	add	a5,a4,a5
80005b70:	fc042703          	lw	a4,-64(s0)
80005b74:	00f707b3          	add	a5,a4,a5
80005b78:	faf42e23          	sw	a5,-68(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:115
        printsv("total instructions~~~> ", total);
80005b7c:	fbc42783          	lw	a5,-68(s0)
80005b80:	00078593          	mv	a1,a5
80005b84:	800087b7          	lui	a5,0x80008
80005b88:	2bc78513          	addi	a0,a5,700 # 800082bc <__stack_top+0xfffc50bc>
80005b8c:	420000ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:118

        // calculates the PE dynamic energy
        dynamicEnergy_PE = ((arithDyn[Voltage] * others)) + ((loadStoreDyn[Voltage] * (loads + stores)));
80005b90:	800087b7          	lui	a5,0x80008
80005b94:	fe842703          	lw	a4,-24(s0)
80005b98:	00271713          	slli	a4,a4,0x2
80005b9c:	24878793          	addi	a5,a5,584 # 80008248 <__stack_top+0xfffc5048>
80005ba0:	00f707b3          	add	a5,a4,a5
80005ba4:	0007a783          	lw	a5,0(a5)
80005ba8:	00078713          	mv	a4,a5
80005bac:	fc042783          	lw	a5,-64(s0)
80005bb0:	02f70733          	mul	a4,a4,a5
80005bb4:	800087b7          	lui	a5,0x80008
80005bb8:	fe842683          	lw	a3,-24(s0)
80005bbc:	00269693          	slli	a3,a3,0x2
80005bc0:	25478793          	addi	a5,a5,596 # 80008254 <__stack_top+0xfffc5054>
80005bc4:	00f687b3          	add	a5,a3,a5
80005bc8:	0007a783          	lw	a5,0(a5)
80005bcc:	00078613          	mv	a2,a5
80005bd0:	fc842683          	lw	a3,-56(s0)
80005bd4:	fc442783          	lw	a5,-60(s0)
80005bd8:	00f687b3          	add	a5,a3,a5
80005bdc:	02f607b3          	mul	a5,a2,a5
80005be0:	00f707b3          	add	a5,a4,a5
80005be4:	faf42c23          	sw	a5,-72(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:119
        dynamicEnergy_PE = dynamicEnergy_PE >> 6;
80005be8:	fb842783          	lw	a5,-72(s0)
80005bec:	0067d793          	srli	a5,a5,0x6
80005bf0:	faf42c23          	sw	a5,-72(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:123
        //printsv("dynamicEnergy_PE >> 6: ", dynamicEnergy_PE);

        // calculates the PE leakage energy
        leakEnergy_PE = (unsigned int)((PE_LEAKAGE * 1000000) * 0.001) >> 6; // mW => pW * s => pJ
80005bf4:	69700793          	li	a5,1687
80005bf8:	faf42a23          	sw	a5,-76(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:126

        // calculates the MEM dynamic energy
        dynamicEnergy_MEM = (readEnergyMemory[Voltage] * loads) + (writeEnergyMemory[Voltage] * stores);
80005bfc:	800087b7          	lui	a5,0x80008
80005c00:	fe842703          	lw	a4,-24(s0)
80005c04:	00271713          	slli	a4,a4,0x2
80005c08:	23078793          	addi	a5,a5,560 # 80008230 <__stack_top+0xfffc5030>
80005c0c:	00f707b3          	add	a5,a4,a5
80005c10:	0007a783          	lw	a5,0(a5)
80005c14:	00078713          	mv	a4,a5
80005c18:	fc842783          	lw	a5,-56(s0)
80005c1c:	02f70733          	mul	a4,a4,a5
80005c20:	800087b7          	lui	a5,0x80008
80005c24:	fe842683          	lw	a3,-24(s0)
80005c28:	00269693          	slli	a3,a3,0x2
80005c2c:	23c78793          	addi	a5,a5,572 # 8000823c <__stack_top+0xfffc503c>
80005c30:	00f687b3          	add	a5,a3,a5
80005c34:	0007a783          	lw	a5,0(a5)
80005c38:	00078693          	mv	a3,a5
80005c3c:	fc442783          	lw	a5,-60(s0)
80005c40:	02f687b3          	mul	a5,a3,a5
80005c44:	00f707b3          	add	a5,a4,a5
80005c48:	faf42823          	sw	a5,-80(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:127
        dynamicEnergy_MEM = dynamicEnergy_MEM >> 6;
80005c4c:	fb042783          	lw	a5,-80(s0)
80005c50:	0067d793          	srli	a5,a5,0x6
80005c54:	faf42823          	sw	a5,-80(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:131
        //printsv("dynamicEnergy_MEM >> 6: ", dynamicEnergy_MEM);

        // the amount of energy spent by this tile in the last window
        totalEnergy = (dynamicEnergy_MEM + dynamicEnergy_PE + dynamicEnergy_Router) + (leakEnergy_PE);
80005c58:	fb042703          	lw	a4,-80(s0)
80005c5c:	fb842783          	lw	a5,-72(s0)
80005c60:	00f70733          	add	a4,a4,a5
80005c64:	fcc42783          	lw	a5,-52(s0)
80005c68:	00f707b3          	add	a5,a4,a5
80005c6c:	fb442703          	lw	a4,-76(s0)
80005c70:	00f707b3          	add	a5,a4,a5
80005c74:	faf42623          	sw	a5,-84(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:132
        printsv("TotalEnergy: ", totalEnergy);
80005c78:	fac42783          	lw	a5,-84(s0)
80005c7c:	00078593          	mv	a1,a5
80005c80:	800087b7          	lui	a5,0x80008
80005c84:	2d478513          	addi	a0,a5,724 # 800082d4 <__stack_top+0xfffc50d4>
80005c88:	324000ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:135

        // Fill the ThermalPacket slot...
        ThermalPacket.header.header           = makeAddress(0, 0) | PERIPH_WEST;
80005c8c:	00000593          	li	a1,0
80005c90:	00000513          	li	a0,0
80005c94:	734000ef          	jal	ra,800063c8 <makeAddress>
80005c98:	00050713          	mv	a4,a0
80005c9c:	000207b7          	lui	a5,0x20
80005ca0:	00f76733          	or	a4,a4,a5
80005ca4:	800227b7          	lui	a5,0x80022
80005ca8:	b2878793          	addi	a5,a5,-1240 # 80021b28 <__stack_top+0xfffde928>
80005cac:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:136
        ThermalPacket.header.payload_size     = PKT_SERVICE_SIZE;
80005cb0:	800227b7          	lui	a5,0x80022
80005cb4:	b2878793          	addi	a5,a5,-1240 # 80021b28 <__stack_top+0xfffde928>
80005cb8:	00b00713          	li	a4,11
80005cbc:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:137
        ThermalPacket.header.service          = ENERGY_PACKET;
80005cc0:	800227b7          	lui	a5,0x80022
80005cc4:	b2878793          	addi	a5,a5,-1240 # 80021b28 <__stack_top+0xfffde928>
80005cc8:	05000713          	li	a4,80
80005ccc:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:138
        ThermalPacket.header.source_addr      = ProcessorAddr;
80005cd0:	800237b7          	lui	a5,0x80023
80005cd4:	1fc7a703          	lw	a4,508(a5) # 800231fc <__stack_top+0xfffdfffc>
80005cd8:	800227b7          	lui	a5,0x80022
80005cdc:	b2878793          	addi	a5,a5,-1240 # 80021b28 <__stack_top+0xfffde928>
80005ce0:	00e7ac23          	sw	a4,24(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:139
        ThermalPacket.header.spent_energy     = totalEnergy;
80005ce4:	800227b7          	lui	a5,0x80022
80005ce8:	b2878793          	addi	a5,a5,-1240 # 80021b28 <__stack_top+0xfffde928>
80005cec:	fac42703          	lw	a4,-84(s0)
80005cf0:	00e7ae23          	sw	a4,28(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:140
        API_PushSendQueue(THERMAL, 0);
80005cf4:	00000593          	li	a1,0
80005cf8:	30300537          	lui	a0,0x30300
80005cfc:	70c000ef          	jal	ra,80006408 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:143

        // change the PE frequency to the selected one
        API_applyFreqScale();
80005d00:	f88ff0ef          	jal	ra,80005488 <API_applyFreqScale>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:145
    }
    return;
80005d04:	00000013          	nop
80005d08:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/thermal.c:146
80005d0c:	05c12083          	lw	ra,92(sp)
80005d10:	05812403          	lw	s0,88(sp)
80005d14:	06010113          	addi	sp,sp,96
80005d18:	00008067          	ret

80005d1c <PLIC_EnableIRQ>:
PLIC_EnableIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:154
{
80005d1c:	fd010113          	addi	sp,sp,-48
80005d20:	02812623          	sw	s0,44(sp)
80005d24:	03010413          	addi	s0,sp,48
80005d28:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:155
    unsigned long hart_id = read_csr(mhartid);
80005d2c:	f14027f3          	csrr	a5,mhartid
80005d30:	fef42623          	sw	a5,-20(s0)
80005d34:	fec42783          	lw	a5,-20(s0)
80005d38:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:156
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80005d3c:	40000737          	lui	a4,0x40000
80005d40:	fdc42783          	lw	a5,-36(s0)
80005d44:	0057d793          	srli	a5,a5,0x5
80005d48:	fe842683          	lw	a3,-24(s0)
80005d4c:	00569693          	slli	a3,a3,0x5
80005d50:	00f686b3          	add	a3,a3,a5
80005d54:	000017b7          	lui	a5,0x1
80005d58:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80005d5c:	00f687b3          	add	a5,a3,a5
80005d60:	00279793          	slli	a5,a5,0x2
80005d64:	00f707b3          	add	a5,a4,a5
80005d68:	0007a783          	lw	a5,0(a5)
80005d6c:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:157
    current |= (uint32_t)1 << (IRQn % 32);
80005d70:	fdc42783          	lw	a5,-36(s0)
80005d74:	01f7f793          	andi	a5,a5,31
80005d78:	00100713          	li	a4,1
80005d7c:	00f717b3          	sll	a5,a4,a5
80005d80:	fe442703          	lw	a4,-28(s0)
80005d84:	00f767b3          	or	a5,a4,a5
80005d88:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:158
    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
80005d8c:	40000737          	lui	a4,0x40000
80005d90:	fdc42783          	lw	a5,-36(s0)
80005d94:	0057d793          	srli	a5,a5,0x5
80005d98:	fe842683          	lw	a3,-24(s0)
80005d9c:	00569693          	slli	a3,a3,0x5
80005da0:	00f686b3          	add	a3,a3,a5
80005da4:	000017b7          	lui	a5,0x1
80005da8:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80005dac:	00f687b3          	add	a5,a3,a5
80005db0:	00279793          	slli	a5,a5,0x2
80005db4:	00f707b3          	add	a5,a4,a5
80005db8:	fe442703          	lw	a4,-28(s0)
80005dbc:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:159
}
80005dc0:	00000013          	nop
80005dc4:	02c12403          	lw	s0,44(sp)
80005dc8:	03010113          	addi	sp,sp,48
80005dcc:	00008067          	ret

80005dd0 <PLIC_SetPriority>:
PLIC_SetPriority():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:188
{
80005dd0:	fe010113          	addi	sp,sp,-32
80005dd4:	00812e23          	sw	s0,28(sp)
80005dd8:	02010413          	addi	s0,sp,32
80005ddc:	fea42623          	sw	a0,-20(s0)
80005de0:	feb42423          	sw	a1,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:189
    PLIC->SOURCE_PRIORITY[IRQn] = priority;
80005de4:	40000737          	lui	a4,0x40000
80005de8:	fec42783          	lw	a5,-20(s0)
80005dec:	00279793          	slli	a5,a5,0x2
80005df0:	00f707b3          	add	a5,a4,a5
80005df4:	fe842703          	lw	a4,-24(s0)
80005df8:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:190
}
80005dfc:	00000013          	nop
80005e00:	01c12403          	lw	s0,28(sp)
80005e04:	02010113          	addi	sp,sp,32
80005e08:	00008067          	ret

80005e0c <Chronos_init>:
Chronos_init():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:31
extern unsigned int temperatureUpdated;


////////////////////////////////////////////////////////////
// Initialize Chronos stuff
void Chronos_init(){
80005e0c:	ff010113          	addi	sp,sp,-16
80005e10:	00112623          	sw	ra,12(sp)
80005e14:	00812423          	sw	s0,8(sp)
80005e18:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:33
    // Resets the amount of each executed instruction
    resetExecutedInstructions();
80005e1c:	829ff0ef          	jal	ra,80005644 <resetExecutedInstructions>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:36

    //Informs the Router this tile ID, that is provided by Harness
    HW_set_32bit_reg(ROUTER_BASE, HW_get_32bit_reg(MY_ID)); 
80005e20:	900007b7          	lui	a5,0x90000
80005e24:	ffc78513          	addi	a0,a5,-4 # 8ffffffc <__stack_top+0xffbcdfc>
80005e28:	974fb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005e2c:	00050793          	mv	a5,a0
80005e30:	00078593          	mv	a1,a5
80005e34:	50000537          	lui	a0,0x50000
80005e38:	95cfb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:39
    
    // Reads this processor address, calculated by the router
    ProcessorAddr = HW_get_32bit_reg(ROUTER_BASE);
80005e3c:	50000537          	lui	a0,0x50000
80005e40:	95cfb0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80005e44:	00050713          	mv	a4,a0
80005e48:	800237b7          	lui	a5,0x80023
80005e4c:	1ee7ae23          	sw	a4,508(a5) # 800231fc <__stack_top+0xfffdfffc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:42

    // Informs the PRINTER this tile address
    HW_set_32bit_reg(PRINTER_CHAR, getXpos(ProcessorAddr));
80005e50:	800237b7          	lui	a5,0x80023
80005e54:	1fc7a783          	lw	a5,508(a5) # 800231fc <__stack_top+0xfffdfffc>
80005e58:	00078513          	mv	a0,a5
80005e5c:	1f8000ef          	jal	ra,80006054 <getXpos>
80005e60:	00050793          	mv	a5,a0
80005e64:	00078593          	mv	a1,a5
80005e68:	500007b7          	lui	a5,0x50000
80005e6c:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80005e70:	924fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:43
    HW_set_32bit_reg(PRINTER_CHAR, getYpos(ProcessorAddr));
80005e74:	800237b7          	lui	a5,0x80023
80005e78:	1fc7a783          	lw	a5,508(a5) # 800231fc <__stack_top+0xfffdfffc>
80005e7c:	00078513          	mv	a0,a5
80005e80:	200000ef          	jal	ra,80006080 <getYpos>
80005e84:	00050793          	mv	a5,a0
80005e88:	00078593          	mv	a1,a5
80005e8c:	500007b7          	lui	a5,0x50000
80005e90:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80005e94:	900fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:46

    // Initialize the TaskList
    API_TaskListInit();
80005e98:	f30fe0ef          	jal	ra,800045c8 <API_TaskListInit>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:49
    
    // Initialize the Message & Service PIPE
    API_PipeInitialization();
80005e9c:	8a0ff0ef          	jal	ra,80004f3c <API_PipeInitialization>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:50
    SendingQueue_front = 0;
80005ea0:	800227b7          	lui	a5,0x80022
80005ea4:	d807a023          	sw	zero,-640(a5) # 80021d80 <__stack_top+0xfffdeb80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:51
    SendingQueue_tail = 0;
80005ea8:	800227b7          	lui	a5,0x80022
80005eac:	b207a223          	sw	zero,-1244(a5) # 80021b24 <__stack_top+0xfffde924>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:54

    // Configures the timer to interrupt at each ms
    HW_set_32bit_reg(NI_TIMER, 1000);
80005eb0:	3e800593          	li	a1,1000
80005eb4:	500007b7          	lui	a5,0x50000
80005eb8:	01078513          	addi	a0,a5,16 # 50000010 <RAM_SIZE+0x4ff80010>
80005ebc:	8d8fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:57

    // Informs the NI the address to store incoming packets
    HW_set_32bit_reg(NI_ADDR, (unsigned int)&incommingPacket.header);
80005ec0:	800227b7          	lui	a5,0x80022
80005ec4:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
80005ec8:	00078593          	mv	a1,a5
80005ecc:	500007b7          	lui	a5,0x50000
80005ed0:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
80005ed4:	8c0fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:60
    
    // Enables interruption from NI
    NI_enable_irq(TX_RX);
80005ed8:	000077b7          	lui	a5,0x7
80005edc:	77778513          	addi	a0,a5,1911 # 7777 <HEAP_SIZE-0x8889>
80005ee0:	214000ef          	jal	ra,800060f4 <NI_enable_irq>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:63

    // Set the system to Idle
    API_setFreqIdle();
80005ee4:	d1cff0ef          	jal	ra,80005400 <API_setFreqIdle>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:64
    API_freqStepUp();
80005ee8:	df4ff0ef          	jal	ra,800054dc <API_freqStepUp>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:65
    return;
80005eec:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:66
}
80005ef0:	00c12083          	lw	ra,12(sp)
80005ef4:	00812403          	lw	s0,8(sp)
80005ef8:	01010113          	addi	sp,sp,16
80005efc:	00008067          	ret

80005f00 <prints>:
prints():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:70

////////////////////////////////////////////////////////////
// Prints a string
void prints(char *text) {
80005f00:	fd010113          	addi	sp,sp,-48
80005f04:	02112623          	sw	ra,44(sp)
80005f08:	02812423          	sw	s0,40(sp)
80005f0c:	03010413          	addi	s0,sp,48
80005f10:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:71
    int i = 0;
80005f14:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:73 (discriminator 1)
    do {
        HW_set_32bit_reg(PRINTER_CHAR, text[i]);
80005f18:	fec42783          	lw	a5,-20(s0)
80005f1c:	fdc42703          	lw	a4,-36(s0)
80005f20:	00f707b3          	add	a5,a4,a5
80005f24:	00078783          	lb	a5,0(a5)
80005f28:	00078593          	mv	a1,a5
80005f2c:	500007b7          	lui	a5,0x50000
80005f30:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80005f34:	860fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:74 (discriminator 1)
        i++;
80005f38:	fec42783          	lw	a5,-20(s0)
80005f3c:	00178793          	addi	a5,a5,1
80005f40:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:75 (discriminator 1)
    } while (text[i - 1] != '\0');
80005f44:	fec42783          	lw	a5,-20(s0)
80005f48:	fff78793          	addi	a5,a5,-1
80005f4c:	fdc42703          	lw	a4,-36(s0)
80005f50:	00f707b3          	add	a5,a4,a5
80005f54:	00078783          	lb	a5,0(a5)
80005f58:	fc0790e3          	bnez	a5,80005f18 <prints+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:76
    return;
80005f5c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:77
}
80005f60:	02c12083          	lw	ra,44(sp)
80005f64:	02812403          	lw	s0,40(sp)
80005f68:	03010113          	addi	sp,sp,48
80005f6c:	00008067          	ret

80005f70 <printi>:
printi():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:81

////////////////////////////////////////////////////////////
// Prints an integer
void printi(int value) {
80005f70:	fe010113          	addi	sp,sp,-32
80005f74:	00112e23          	sw	ra,28(sp)
80005f78:	00812c23          	sw	s0,24(sp)
80005f7c:	02010413          	addi	s0,sp,32
80005f80:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:82
    HW_set_32bit_reg(PRINTER_INT, value);
80005f84:	fec42783          	lw	a5,-20(s0)
80005f88:	00078593          	mv	a1,a5
80005f8c:	500007b7          	lui	a5,0x50000
80005f90:	02478513          	addi	a0,a5,36 # 50000024 <RAM_SIZE+0x4ff80024>
80005f94:	800fb0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:83
    return;
80005f98:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:84
}
80005f9c:	01c12083          	lw	ra,28(sp)
80005fa0:	01812403          	lw	s0,24(sp)
80005fa4:	02010113          	addi	sp,sp,32
80005fa8:	00008067          	ret

80005fac <printsv>:
printsv():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:88

////////////////////////////////////////////////////////////
// Prints a string followed by a integer
void printsv(char *text1, int value1) {
80005fac:	fe010113          	addi	sp,sp,-32
80005fb0:	00112e23          	sw	ra,28(sp)
80005fb4:	00812c23          	sw	s0,24(sp)
80005fb8:	02010413          	addi	s0,sp,32
80005fbc:	fea42623          	sw	a0,-20(s0)
80005fc0:	feb42423          	sw	a1,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:89
    prints(text1);
80005fc4:	fec42503          	lw	a0,-20(s0)
80005fc8:	f39ff0ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:90
    printi(value1);
80005fcc:	fe842503          	lw	a0,-24(s0)
80005fd0:	fa1ff0ef          	jal	ra,80005f70 <printi>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:91
    prints("\n");
80005fd4:	800087b7          	lui	a5,0x80008
80005fd8:	2e478513          	addi	a0,a5,740 # 800082e4 <__stack_top+0xfffc50e4>
80005fdc:	f25ff0ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:92
    return;
80005fe0:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:93
}
80005fe4:	01c12083          	lw	ra,28(sp)
80005fe8:	01812403          	lw	s0,24(sp)
80005fec:	02010113          	addi	sp,sp,32
80005ff0:	00008067          	ret

80005ff4 <printsvsv>:
printsvsv():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:97

////////////////////////////////////////////////////////////
// Prints two strings and two integers interspersed
void printsvsv(char *text1, int value1, char *text2, int value2) {
80005ff4:	fe010113          	addi	sp,sp,-32
80005ff8:	00112e23          	sw	ra,28(sp)
80005ffc:	00812c23          	sw	s0,24(sp)
80006000:	02010413          	addi	s0,sp,32
80006004:	fea42623          	sw	a0,-20(s0)
80006008:	feb42423          	sw	a1,-24(s0)
8000600c:	fec42223          	sw	a2,-28(s0)
80006010:	fed42023          	sw	a3,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:98
    prints(text1);
80006014:	fec42503          	lw	a0,-20(s0)
80006018:	ee9ff0ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:99
    printi(value1);
8000601c:	fe842503          	lw	a0,-24(s0)
80006020:	f51ff0ef          	jal	ra,80005f70 <printi>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:100
    prints(text2);
80006024:	fe442503          	lw	a0,-28(s0)
80006028:	ed9ff0ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:101
    printi(value2);
8000602c:	fe042503          	lw	a0,-32(s0)
80006030:	f41ff0ef          	jal	ra,80005f70 <printi>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:102
    prints("\n");
80006034:	800087b7          	lui	a5,0x80008
80006038:	2e478513          	addi	a0,a5,740 # 800082e4 <__stack_top+0xfffc50e4>
8000603c:	ec5ff0ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:103
    return;
80006040:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:104
}
80006044:	01c12083          	lw	ra,28(sp)
80006048:	01812403          	lw	s0,24(sp)
8000604c:	02010113          	addi	sp,sp,32
80006050:	00008067          	ret

80006054 <getXpos>:
getXpos():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:108

////////////////////////////////////////////////////////////
// Gets the X coordinate from the address
unsigned int getXpos(unsigned int addr) { return ((addr & 0x0000FF00) >> 8); }
80006054:	fe010113          	addi	sp,sp,-32
80006058:	00812e23          	sw	s0,28(sp)
8000605c:	02010413          	addi	s0,sp,32
80006060:	fea42623          	sw	a0,-20(s0)
80006064:	fec42783          	lw	a5,-20(s0)
80006068:	0087d793          	srli	a5,a5,0x8
8000606c:	0ff7f793          	andi	a5,a5,255
80006070:	00078513          	mv	a0,a5
80006074:	01c12403          	lw	s0,28(sp)
80006078:	02010113          	addi	sp,sp,32
8000607c:	00008067          	ret

80006080 <getYpos>:
getYpos():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:112

////////////////////////////////////////////////////////////
// Gets the Y coordinate from the address
unsigned int getYpos(unsigned int addr) { return (addr & 0x000000FF); }
80006080:	fe010113          	addi	sp,sp,-32
80006084:	00812e23          	sw	s0,28(sp)
80006088:	02010413          	addi	s0,sp,32
8000608c:	fea42623          	sw	a0,-20(s0)
80006090:	fec42783          	lw	a5,-20(s0)
80006094:	0ff7f793          	andi	a5,a5,255
80006098:	00078513          	mv	a0,a5
8000609c:	01c12403          	lw	s0,28(sp)
800060a0:	02010113          	addi	sp,sp,32
800060a4:	00008067          	ret

800060a8 <SendRaw>:
SendRaw():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:116

///////////////////////////////////////////////////////////////////
// Configure the NI to transmitt a given packet
void SendRaw(unsigned int addr) {
800060a8:	fe010113          	addi	sp,sp,-32
800060ac:	00112e23          	sw	ra,28(sp)
800060b0:	00812c23          	sw	s0,24(sp)
800060b4:	02010413          	addi	s0,sp,32
800060b8:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:117
    HW_set_32bit_reg(NI_ADDR, addr);
800060bc:	fec42583          	lw	a1,-20(s0)
800060c0:	500007b7          	lui	a5,0x50000
800060c4:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
800060c8:	ecdfa0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:118
    HW_set_32bit_reg(NI_TX, TX);
800060cc:	000027b7          	lui	a5,0x2
800060d0:	22278593          	addi	a1,a5,546 # 2222 <HEAP_SIZE-0xddde>
800060d4:	500007b7          	lui	a5,0x50000
800060d8:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
800060dc:	eb9fa0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:119
    return;
800060e0:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:120
}
800060e4:	01c12083          	lw	ra,28(sp)
800060e8:	01812403          	lw	s0,24(sp)
800060ec:	02010113          	addi	sp,sp,32
800060f0:	00008067          	ret

800060f4 <NI_enable_irq>:
NI_enable_irq():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:124

////////////////////////////////////////////////////////////
// Enables interruptions incomming from NI
void NI_enable_irq(int which){
800060f4:	fe010113          	addi	sp,sp,-32
800060f8:	00112e23          	sw	ra,28(sp)
800060fc:	00812c23          	sw	s0,24(sp)
80006100:	02010413          	addi	s0,sp,32
80006104:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:125
    PLIC_EnableIRQ(NI_RX_IRQn);
80006108:	00200513          	li	a0,2
8000610c:	c11ff0ef          	jal	ra,80005d1c <PLIC_EnableIRQ>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:126
    PLIC_SetPriority(NI_RX_IRQn, 1);
80006110:	00100593          	li	a1,1
80006114:	00200513          	li	a0,2
80006118:	cb9ff0ef          	jal	ra,80005dd0 <PLIC_SetPriority>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:127
    return;
8000611c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:128
}
80006120:	01c12083          	lw	ra,28(sp)
80006124:	01812403          	lw	s0,24(sp)
80006128:	02010113          	addi	sp,sp,32
8000612c:	00008067          	ret

80006130 <External_2_IRQHandler>:
External_2_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:139
    return;
}

////////////////////////////////////////////////////////////
// Interruption handler for the NI
uint8_t External_2_IRQHandler(void){    
80006130:	ff010113          	addi	sp,sp,-16
80006134:	00112623          	sw	ra,12(sp)
80006138:	00812423          	sw	s0,8(sp)
8000613c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:140
    API_NI_Handler();
80006140:	0c0010ef          	jal	ra,80007200 <API_NI_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:142

    return 0;
80006144:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:143
}
80006148:	00078513          	mv	a0,a5
8000614c:	00c12083          	lw	ra,12(sp)
80006150:	00812403          	lw	s0,8(sp)
80006154:	01010113          	addi	sp,sp,16
80006158:	00008067          	ret

8000615c <mySwap>:
mySwap():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:148

////////////////////////////////////////////////////////////
// https://www.techiedelight.com/implement-itoa-function-in-c/
// Function to swap two numbers
void mySwap(char *x, char *y) {
8000615c:	fd010113          	addi	sp,sp,-48
80006160:	02812623          	sw	s0,44(sp)
80006164:	03010413          	addi	s0,sp,48
80006168:	fca42e23          	sw	a0,-36(s0)
8000616c:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:149
    char t = *x; *x = *y; *y = t;
80006170:	fdc42783          	lw	a5,-36(s0)
80006174:	0007c783          	lbu	a5,0(a5)
80006178:	fef407a3          	sb	a5,-17(s0)
8000617c:	fd842783          	lw	a5,-40(s0)
80006180:	00078703          	lb	a4,0(a5)
80006184:	fdc42783          	lw	a5,-36(s0)
80006188:	00e78023          	sb	a4,0(a5)
8000618c:	fd842783          	lw	a5,-40(s0)
80006190:	fef44703          	lbu	a4,-17(s0)
80006194:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:150
}
80006198:	00000013          	nop
8000619c:	02c12403          	lw	s0,44(sp)
800061a0:	03010113          	addi	sp,sp,48
800061a4:	00008067          	ret

800061a8 <reverse>:
reverse():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:152
// Function to reverse `buffer[i…j]`
char* reverse(char *buffer, int i, int j){
800061a8:	fe010113          	addi	sp,sp,-32
800061ac:	00112e23          	sw	ra,28(sp)
800061b0:	00812c23          	sw	s0,24(sp)
800061b4:	02010413          	addi	s0,sp,32
800061b8:	fea42623          	sw	a0,-20(s0)
800061bc:	feb42423          	sw	a1,-24(s0)
800061c0:	fec42223          	sw	a2,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:153
    while (i < j) {
800061c4:	0400006f          	j	80006204 <reverse+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:154
        mySwap(&buffer[i++], &buffer[j--]);
800061c8:	fe842783          	lw	a5,-24(s0)
800061cc:	00178713          	addi	a4,a5,1
800061d0:	fee42423          	sw	a4,-24(s0)
800061d4:	00078713          	mv	a4,a5
800061d8:	fec42783          	lw	a5,-20(s0)
800061dc:	00e786b3          	add	a3,a5,a4
800061e0:	fe442783          	lw	a5,-28(s0)
800061e4:	fff78713          	addi	a4,a5,-1
800061e8:	fee42223          	sw	a4,-28(s0)
800061ec:	00078713          	mv	a4,a5
800061f0:	fec42783          	lw	a5,-20(s0)
800061f4:	00e787b3          	add	a5,a5,a4
800061f8:	00078593          	mv	a1,a5
800061fc:	00068513          	mv	a0,a3
80006200:	f5dff0ef          	jal	ra,8000615c <mySwap>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:153
    while (i < j) {
80006204:	fe842703          	lw	a4,-24(s0)
80006208:	fe442783          	lw	a5,-28(s0)
8000620c:	faf74ee3          	blt	a4,a5,800061c8 <reverse+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:157
    }
 
    return buffer;
80006210:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:158
}
80006214:	00078513          	mv	a0,a5
80006218:	01c12083          	lw	ra,28(sp)
8000621c:	01812403          	lw	s0,24(sp)
80006220:	02010113          	addi	sp,sp,32
80006224:	00008067          	ret

80006228 <myItoa>:
myItoa():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:160
// Iterative function to implement `itoa()` function in C
char* myItoa(int value, char* buffer, int base){
80006228:	fd010113          	addi	sp,sp,-48
8000622c:	02112623          	sw	ra,44(sp)
80006230:	02812423          	sw	s0,40(sp)
80006234:	03010413          	addi	s0,sp,48
80006238:	fca42e23          	sw	a0,-36(s0)
8000623c:	fcb42c23          	sw	a1,-40(s0)
80006240:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:162
    // invalid input
    if (base < 2 || base > 32) {
80006244:	fd442703          	lw	a4,-44(s0)
80006248:	00100793          	li	a5,1
8000624c:	00e7d863          	ble	a4,a5,8000625c <myItoa+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:162 (discriminator 1)
80006250:	fd442703          	lw	a4,-44(s0)
80006254:	02000793          	li	a5,32
80006258:	00e7d663          	ble	a4,a5,80006264 <myItoa+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:163
        return buffer;
8000625c:	fd842783          	lw	a5,-40(s0)
80006260:	1540006f          	j	800063b4 <myItoa+0x18c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:167
    }
    // consider the absolute value of the number
    int n;
    if (value < 0)
80006264:	fdc42783          	lw	a5,-36(s0)
80006268:	0007da63          	bgez	a5,8000627c <myItoa+0x54>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:168
        n = value * -1;
8000626c:	fdc42783          	lw	a5,-36(s0)
80006270:	40f007b3          	neg	a5,a5
80006274:	fef42623          	sw	a5,-20(s0)
80006278:	00c0006f          	j	80006284 <myItoa+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:170
    else 
        n = value;
8000627c:	fdc42783          	lw	a5,-36(s0)
80006280:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:172

    int i = 0;
80006284:	fe042423          	sw	zero,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:173
    while (n){
80006288:	09c0006f          	j	80006324 <myItoa+0xfc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:174
        int r = n % base;
8000628c:	fec42703          	lw	a4,-20(s0)
80006290:	fd442783          	lw	a5,-44(s0)
80006294:	02f767b3          	rem	a5,a4,a5
80006298:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:176
 
        if (r >= 10) {
8000629c:	fe442703          	lw	a4,-28(s0)
800062a0:	00900793          	li	a5,9
800062a4:	02e7de63          	ble	a4,a5,800062e0 <myItoa+0xb8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:177
            buffer[i++] = 65 + (r - 10);
800062a8:	fe442783          	lw	a5,-28(s0)
800062ac:	0ff7f793          	andi	a5,a5,255
800062b0:	03778793          	addi	a5,a5,55
800062b4:	0ff7f693          	andi	a3,a5,255
800062b8:	fe842783          	lw	a5,-24(s0)
800062bc:	00178713          	addi	a4,a5,1
800062c0:	fee42423          	sw	a4,-24(s0)
800062c4:	00078713          	mv	a4,a5
800062c8:	fd842783          	lw	a5,-40(s0)
800062cc:	00e787b3          	add	a5,a5,a4
800062d0:	01869713          	slli	a4,a3,0x18
800062d4:	41875713          	srai	a4,a4,0x18
800062d8:	00e78023          	sb	a4,0(a5)
800062dc:	0380006f          	j	80006314 <myItoa+0xec>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:180
        }
        else {
            buffer[i++] = 48 + r;
800062e0:	fe442783          	lw	a5,-28(s0)
800062e4:	0ff7f793          	andi	a5,a5,255
800062e8:	03078793          	addi	a5,a5,48
800062ec:	0ff7f693          	andi	a3,a5,255
800062f0:	fe842783          	lw	a5,-24(s0)
800062f4:	00178713          	addi	a4,a5,1
800062f8:	fee42423          	sw	a4,-24(s0)
800062fc:	00078713          	mv	a4,a5
80006300:	fd842783          	lw	a5,-40(s0)
80006304:	00e787b3          	add	a5,a5,a4
80006308:	01869713          	slli	a4,a3,0x18
8000630c:	41875713          	srai	a4,a4,0x18
80006310:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:183
        }
 
        n = n / base;
80006314:	fec42703          	lw	a4,-20(s0)
80006318:	fd442783          	lw	a5,-44(s0)
8000631c:	02f747b3          	div	a5,a4,a5
80006320:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:173
    while (n){
80006324:	fec42783          	lw	a5,-20(s0)
80006328:	f60792e3          	bnez	a5,8000628c <myItoa+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:186
    }
    // if the number is 0
    if (i == 0) {
8000632c:	fe842783          	lw	a5,-24(s0)
80006330:	02079263          	bnez	a5,80006354 <myItoa+0x12c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:187
        buffer[i++] = '0';
80006334:	fe842783          	lw	a5,-24(s0)
80006338:	00178713          	addi	a4,a5,1
8000633c:	fee42423          	sw	a4,-24(s0)
80006340:	00078713          	mv	a4,a5
80006344:	fd842783          	lw	a5,-40(s0)
80006348:	00e787b3          	add	a5,a5,a4
8000634c:	03000713          	li	a4,48
80006350:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:192
    }
    // If the base is 10 and the value is negative, the resulting string
    // is preceded with a minus sign (-)
    // With any other base, value is always considered unsigned
    if (value < 0 && base == 10) {
80006354:	fdc42783          	lw	a5,-36(s0)
80006358:	0207d863          	bgez	a5,80006388 <myItoa+0x160>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:192 (discriminator 1)
8000635c:	fd442703          	lw	a4,-44(s0)
80006360:	00a00793          	li	a5,10
80006364:	02f71263          	bne	a4,a5,80006388 <myItoa+0x160>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:193
        buffer[i++] = '-';
80006368:	fe842783          	lw	a5,-24(s0)
8000636c:	00178713          	addi	a4,a5,1
80006370:	fee42423          	sw	a4,-24(s0)
80006374:	00078713          	mv	a4,a5
80006378:	fd842783          	lw	a5,-40(s0)
8000637c:	00e787b3          	add	a5,a5,a4
80006380:	02d00713          	li	a4,45
80006384:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:195
    }
    buffer[i] = '\0'; // null terminate string
80006388:	fe842783          	lw	a5,-24(s0)
8000638c:	fd842703          	lw	a4,-40(s0)
80006390:	00f707b3          	add	a5,a4,a5
80006394:	00078023          	sb	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:197
    // reverse the string and return it
    return reverse(buffer, 0, i - 1);
80006398:	fe842783          	lw	a5,-24(s0)
8000639c:	fff78793          	addi	a5,a5,-1
800063a0:	00078613          	mv	a2,a5
800063a4:	00000593          	li	a1,0
800063a8:	fd842503          	lw	a0,-40(s0)
800063ac:	dfdff0ef          	jal	ra,800061a8 <reverse>
800063b0:	00050793          	mv	a5,a0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:198
}
800063b4:	00078513          	mv	a0,a5
800063b8:	02c12083          	lw	ra,44(sp)
800063bc:	02812403          	lw	s0,40(sp)
800063c0:	03010113          	addi	sp,sp,48
800063c4:	00008067          	ret

800063c8 <makeAddress>:
makeAddress():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:212
    return;
}

////////////////////////////////////////////////////////////
// Returns the PE address for a giver pair of coords
unsigned int makeAddress(unsigned int x, unsigned int y) {
800063c8:	fd010113          	addi	sp,sp,-48
800063cc:	02812623          	sw	s0,44(sp)
800063d0:	03010413          	addi	s0,sp,48
800063d4:	fca42e23          	sw	a0,-36(s0)
800063d8:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:213
    unsigned int address = 0x00000000;
800063dc:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:214
    return (address | (x << 8) | y);
800063e0:	fdc42783          	lw	a5,-36(s0)
800063e4:	00879713          	slli	a4,a5,0x8
800063e8:	fec42783          	lw	a5,-20(s0)
800063ec:	00f76733          	or	a4,a4,a5
800063f0:	fd842783          	lw	a5,-40(s0)
800063f4:	00f767b3          	or	a5,a4,a5
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:215
}
800063f8:	00078513          	mv	a0,a5
800063fc:	02c12403          	lw	s0,44(sp)
80006400:	03010113          	addi	sp,sp,48
80006404:	00008067          	ret

80006408 <API_PushSendQueue>:
API_PushSendQueue():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:219

////////////////////////////////////////////////////////////
// Pushes one slot to the sending queue
void API_PushSendQueue(unsigned int type, unsigned int slot){
80006408:	fe010113          	addi	sp,sp,-32
8000640c:	00112e23          	sw	ra,28(sp)
80006410:	00812c23          	sw	s0,24(sp)
80006414:	02010413          	addi	s0,sp,32
80006418:	fea42623          	sw	a0,-20(s0)
8000641c:	feb42423          	sw	a1,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:220
    vTaskEnterCritical();
80006420:	aedfc0ef          	jal	ra,80002f0c <vTaskEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:221
    if(type == THERMAL){
80006424:	fec42703          	lw	a4,-20(s0)
80006428:	303007b7          	lui	a5,0x30300
8000642c:	00f71a63          	bne	a4,a5,80006440 <API_PushSendQueue+0x38>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:222
        API_PrioritySend(type, slot);
80006430:	fe842583          	lw	a1,-24(s0)
80006434:	fec42503          	lw	a0,-20(s0)
80006438:	094000ef          	jal	ra,800064cc <API_PrioritySend>
8000643c:	0780006f          	j	800064b4 <API_PushSendQueue+0xac>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:224
    } else {
        SendingQueue[SendingQueue_front] = type | slot;
80006440:	800227b7          	lui	a5,0x80022
80006444:	d807a683          	lw	a3,-640(a5) # 80021d80 <__stack_top+0xfffdeb80>
80006448:	fec42703          	lw	a4,-20(s0)
8000644c:	fe842783          	lw	a5,-24(s0)
80006450:	00f76733          	or	a4,a4,a5
80006454:	800227b7          	lui	a5,0x80022
80006458:	00269693          	slli	a3,a3,0x2
8000645c:	b0478793          	addi	a5,a5,-1276 # 80021b04 <__stack_top+0xfffde904>
80006460:	00f687b3          	add	a5,a3,a5
80006464:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:225
        printsv("SendingQueue_front: ", SendingQueue_front);
80006468:	800227b7          	lui	a5,0x80022
8000646c:	d807a783          	lw	a5,-640(a5) # 80021d80 <__stack_top+0xfffdeb80>
80006470:	00078593          	mv	a1,a5
80006474:	800087b7          	lui	a5,0x80008
80006478:	31078513          	addi	a0,a5,784 # 80008310 <__stack_top+0xfffc5110>
8000647c:	b31ff0ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:226
        if(SendingQueue_front == (PIPE_SIZE*2)-1){
80006480:	800227b7          	lui	a5,0x80022
80006484:	d807a703          	lw	a4,-640(a5) # 80021d80 <__stack_top+0xfffdeb80>
80006488:	00700793          	li	a5,7
8000648c:	00f71863          	bne	a4,a5,8000649c <API_PushSendQueue+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:227
            SendingQueue_front = 0;
80006490:	800227b7          	lui	a5,0x80022
80006494:	d807a023          	sw	zero,-640(a5) # 80021d80 <__stack_top+0xfffdeb80>
80006498:	0180006f          	j	800064b0 <API_PushSendQueue+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:229
        } else {
            SendingQueue_front++;
8000649c:	800227b7          	lui	a5,0x80022
800064a0:	d807a783          	lw	a5,-640(a5) # 80021d80 <__stack_top+0xfffdeb80>
800064a4:	00178713          	addi	a4,a5,1
800064a8:	800227b7          	lui	a5,0x80022
800064ac:	d8e7a023          	sw	a4,-640(a5) # 80021d80 <__stack_top+0xfffdeb80>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:231
        }
        API_Try2Send();
800064b0:	198000ef          	jal	ra,80006648 <API_Try2Send>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:233
    }
    vTaskExitCritical();
800064b4:	a95fc0ef          	jal	ra,80002f48 <vTaskExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:234
    return;
800064b8:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:235
}
800064bc:	01c12083          	lw	ra,28(sp)
800064c0:	01812403          	lw	s0,24(sp)
800064c4:	02010113          	addi	sp,sp,32
800064c8:	00008067          	ret

800064cc <API_PrioritySend>:
API_PrioritySend():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:238


void API_PrioritySend(unsigned int type, unsigned int slot){
800064cc:	fe010113          	addi	sp,sp,-32
800064d0:	00112e23          	sw	ra,28(sp)
800064d4:	00812c23          	sw	s0,24(sp)
800064d8:	02010413          	addi	s0,sp,32
800064dc:	fea42623          	sw	a0,-20(s0)
800064e0:	feb42423          	sw	a1,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:239
    if(type == THERMAL){
800064e4:	fec42703          	lw	a4,-20(s0)
800064e8:	303007b7          	lui	a5,0x30300
800064ec:	08f71e63          	bne	a4,a5,80006588 <API_PrioritySend+0xbc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:241
        for(;;){
            if(HW_get_32bit_reg(NI_TX) == NI_STATUS_INTER) {
800064f0:	500007b7          	lui	a5,0x50000
800064f4:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
800064f8:	aa5fa0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800064fc:	00050713          	mv	a4,a0
80006500:	000017b7          	lui	a5,0x1
80006504:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
80006508:	04f71463          	bne	a4,a5,80006550 <API_PrioritySend+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:242
                API_ClearPipeSlot(SendingSlot);
8000650c:	800227b7          	lui	a5,0x80022
80006510:	9d87a783          	lw	a5,-1576(a5) # 800219d8 <__stack_top+0xfffde7d8>
80006514:	00078513          	mv	a0,a5
80006518:	cddfe0ef          	jal	ra,800051f4 <API_ClearPipeSlot>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:243
                HW_set_32bit_reg(NI_TX, DONE);  // releases the interruption
8000651c:	800057b7          	lui	a5,0x80005
80006520:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffc2355>
80006524:	500007b7          	lui	a5,0x50000
80006528:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
8000652c:	a69fa0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:244
                SendingSlot = THERMAL;
80006530:	800227b7          	lui	a5,0x80022
80006534:	30300737          	lui	a4,0x30300
80006538:	9ce7ac23          	sw	a4,-1576(a5) # 800219d8 <__stack_top+0xfffde7d8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:245
                SendRaw((unsigned int)&ThermalPacket.header);
8000653c:	800227b7          	lui	a5,0x80022
80006540:	b3478793          	addi	a5,a5,-1228 # 80021b34 <__stack_top+0xfffde934>
80006544:	00078513          	mv	a0,a5
80006548:	b61ff0ef          	jal	ra,800060a8 <SendRaw>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:246
                break;
8000654c:	0480006f          	j	80006594 <API_PrioritySend+0xc8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:247
            } else if(HW_get_32bit_reg(NI_TX) == NI_STATUS_OFF){
80006550:	500007b7          	lui	a5,0x50000
80006554:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80006558:	a45fa0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
8000655c:	00050713          	mv	a4,a0
80006560:	0ff00793          	li	a5,255
80006564:	f8f716e3          	bne	a4,a5,800064f0 <API_PrioritySend+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:248
                SendingSlot = THERMAL;
80006568:	800227b7          	lui	a5,0x80022
8000656c:	30300737          	lui	a4,0x30300
80006570:	9ce7ac23          	sw	a4,-1576(a5) # 800219d8 <__stack_top+0xfffde7d8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:249
                SendRaw((unsigned int)&ThermalPacket.header);
80006574:	800227b7          	lui	a5,0x80022
80006578:	b3478793          	addi	a5,a5,-1228 # 80021b34 <__stack_top+0xfffde934>
8000657c:	00078513          	mv	a0,a5
80006580:	b29ff0ef          	jal	ra,800060a8 <SendRaw>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:250
                break;
80006584:	0100006f          	j	80006594 <API_PrioritySend+0xc8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:254
            }
        }
    } else {
        prints("ERROR API_PrioritySend()\n");
80006588:	800087b7          	lui	a5,0x80008
8000658c:	32878513          	addi	a0,a5,808 # 80008328 <__stack_top+0xfffc5128>
80006590:	971ff0ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:256 (discriminator 1)
    }
    return;
80006594:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:257 (discriminator 1)
}
80006598:	01c12083          	lw	ra,28(sp)
8000659c:	01812403          	lw	s0,24(sp)
800065a0:	02010113          	addi	sp,sp,32
800065a4:	00008067          	ret

800065a8 <API_PopSendQueue>:
API_PopSendQueue():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:262


////////////////////////////////////////////////////////////
// Pushes one slot to the sending queue
unsigned int API_PopSendQueue(){
800065a8:	fe010113          	addi	sp,sp,-32
800065ac:	00112e23          	sw	ra,28(sp)
800065b0:	00812c23          	sw	s0,24(sp)
800065b4:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:264
    unsigned int element;
    vTaskEnterCritical();
800065b8:	955fc0ef          	jal	ra,80002f0c <vTaskEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:265
    if (SendingQueue_front == SendingQueue_tail){
800065bc:	800227b7          	lui	a5,0x80022
800065c0:	d807a703          	lw	a4,-640(a5) # 80021d80 <__stack_top+0xfffdeb80>
800065c4:	800227b7          	lui	a5,0x80022
800065c8:	b247a783          	lw	a5,-1244(a5) # 80021b24 <__stack_top+0xfffde924>
800065cc:	00f71863          	bne	a4,a5,800065dc <API_PopSendQueue+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:266
        vTaskExitCritical();
800065d0:	979fc0ef          	jal	ra,80002f48 <vTaskExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:267
        return EMPTY;
800065d4:	303007b7          	lui	a5,0x30300
800065d8:	05c0006f          	j	80006634 <API_PopSendQueue+0x8c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:269
    } else {
        element = SendingQueue[SendingQueue_tail];
800065dc:	800227b7          	lui	a5,0x80022
800065e0:	b247a703          	lw	a4,-1244(a5) # 80021b24 <__stack_top+0xfffde924>
800065e4:	800227b7          	lui	a5,0x80022
800065e8:	00271713          	slli	a4,a4,0x2
800065ec:	b0478793          	addi	a5,a5,-1276 # 80021b04 <__stack_top+0xfffde904>
800065f0:	00f707b3          	add	a5,a4,a5
800065f4:	0007a783          	lw	a5,0(a5)
800065f8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:270
        if (SendingQueue_tail == (PIPE_SIZE*2)-1){
800065fc:	800227b7          	lui	a5,0x80022
80006600:	b247a703          	lw	a4,-1244(a5) # 80021b24 <__stack_top+0xfffde924>
80006604:	00700793          	li	a5,7
80006608:	00f71863          	bne	a4,a5,80006618 <API_PopSendQueue+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:271
            SendingQueue_tail = 0;
8000660c:	800227b7          	lui	a5,0x80022
80006610:	b207a223          	sw	zero,-1244(a5) # 80021b24 <__stack_top+0xfffde924>
80006614:	0180006f          	j	8000662c <API_PopSendQueue+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:273
        } else {
            SendingQueue_tail++;
80006618:	800227b7          	lui	a5,0x80022
8000661c:	b247a783          	lw	a5,-1244(a5) # 80021b24 <__stack_top+0xfffde924>
80006620:	00178713          	addi	a4,a5,1
80006624:	800227b7          	lui	a5,0x80022
80006628:	b2e7a223          	sw	a4,-1244(a5) # 80021b24 <__stack_top+0xfffde924>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:275
        }
        vTaskExitCritical();
8000662c:	91dfc0ef          	jal	ra,80002f48 <vTaskExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:276
        return element;
80006630:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:278
    }
}
80006634:	00078513          	mv	a0,a5
80006638:	01c12083          	lw	ra,28(sp)
8000663c:	01812403          	lw	s0,24(sp)
80006640:	02010113          	addi	sp,sp,32
80006644:	00008067          	ret

80006648 <API_Try2Send>:
API_Try2Send():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:282

////////////////////////////////////////////////////////////
// Try to send some packet! 
void API_Try2Send(){
80006648:	fe010113          	addi	sp,sp,-32
8000664c:	00112e23          	sw	ra,28(sp)
80006650:	00812c23          	sw	s0,24(sp)
80006654:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:286
    unsigned int toSend;
    // Try to send the packet to NI if it's available
    // Checks if the NI is available to transmitt something
    if (HW_get_32bit_reg(NI_TX) == NI_STATUS_OFF){
80006658:	500007b7          	lui	a5,0x50000
8000665c:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80006660:	93dfa0ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80006664:	00050713          	mv	a4,a0
80006668:	0ff00793          	li	a5,255
8000666c:	0ef71a63          	bne	a4,a5,80006760 <API_Try2Send+0x118>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:287
        vTaskEnterCritical();
80006670:	89dfc0ef          	jal	ra,80002f0c <vTaskEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:288
        toSend = API_PopSendQueue();
80006674:	f35ff0ef          	jal	ra,800065a8 <API_PopSendQueue>
80006678:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:289
        if (toSend != EMPTY){
8000667c:	fec42703          	lw	a4,-20(s0)
80006680:	303007b7          	lui	a5,0x30300
80006684:	0af70c63          	beq	a4,a5,8000673c <API_Try2Send+0xf4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:290
            SendingSlot = toSend;
80006688:	800227b7          	lui	a5,0x80022
8000668c:	fec42703          	lw	a4,-20(s0)
80006690:	9ce7ac23          	sw	a4,-1576(a5) # 800219d8 <__stack_top+0xfffde7d8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:291
            if((toSend & 0xFFFF0000) ==  SERVICE){
80006694:	fec42703          	lw	a4,-20(s0)
80006698:	ffff07b7          	lui	a5,0xffff0
8000669c:	00f77733          	and	a4,a4,a5
800066a0:	101007b7          	lui	a5,0x10100
800066a4:	04f71063          	bne	a4,a5,800066e4 <API_Try2Send+0x9c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:292
                SendRaw((unsigned int)&ServicePipe[toSend & 0x0000FFFF].header);
800066a8:	fec42703          	lw	a4,-20(s0)
800066ac:	000107b7          	lui	a5,0x10
800066b0:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
800066b4:	00f77733          	and	a4,a4,a5
800066b8:	00070793          	mv	a5,a4
800066bc:	00479793          	slli	a5,a5,0x4
800066c0:	40e787b3          	sub	a5,a5,a4
800066c4:	00279793          	slli	a5,a5,0x2
800066c8:	80022737          	lui	a4,0x80022
800066cc:	9dc70713          	addi	a4,a4,-1572 # 800219dc <__stack_top+0xfffde7dc>
800066d0:	00e787b3          	add	a5,a5,a4
800066d4:	00878793          	addi	a5,a5,8
800066d8:	00078513          	mv	a0,a5
800066dc:	9cdff0ef          	jal	ra,800060a8 <SendRaw>
800066e0:	0480006f          	j	80006728 <API_Try2Send+0xe0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:294
            }
            else if((toSend & 0xFFFF0000) ==  MESSAGE){
800066e4:	fec42703          	lw	a4,-20(s0)
800066e8:	ffff07b7          	lui	a5,0xffff0
800066ec:	00f77733          	and	a4,a4,a5
800066f0:	202007b7          	lui	a5,0x20200
800066f4:	02f71a63          	bne	a4,a5,80006728 <API_Try2Send+0xe0>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:295
                SendRaw((unsigned int)&MessagePipe[toSend & 0x0000FFFF].header);
800066f8:	fec42703          	lw	a4,-20(s0)
800066fc:	000107b7          	lui	a5,0x10
80006700:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80006704:	00f77733          	and	a4,a4,a5
80006708:	24400793          	li	a5,580
8000670c:	02f70733          	mul	a4,a4,a5
80006710:	800227b7          	lui	a5,0x80022
80006714:	d8478793          	addi	a5,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
80006718:	00f707b3          	add	a5,a4,a5
8000671c:	00c78793          	addi	a5,a5,12
80006720:	00078513          	mv	a0,a5
80006724:	985ff0ef          	jal	ra,800060a8 <SendRaw>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:297
            }
            prints("API_Try2Send success!\n");
80006728:	800087b7          	lui	a5,0x80008
8000672c:	34478513          	addi	a0,a5,836 # 80008344 <__stack_top+0xfffc5144>
80006730:	fd0ff0ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:298
        vTaskExitCritical();
80006734:	815fc0ef          	jal	ra,80002f48 <vTaskExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:306
            prints("API_Try2Send failed - empty SendQueue!\n");
        }
    } else {
        prints("API_Try2Send failed - NI_TX occupied!\n");
    }
    return;
80006738:	0380006f          	j	80006770 <API_Try2Send+0x128>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:300
            HW_set_32bit_reg(NI_TX, RESET);
8000673c:	000097b7          	lui	a5,0x9
80006740:	88878593          	addi	a1,a5,-1912 # 8888 <HEAP_SIZE-0x7778>
80006744:	500007b7          	lui	a5,0x50000
80006748:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
8000674c:	849fa0ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:301
            prints("API_Try2Send failed - empty SendQueue!\n");
80006750:	800087b7          	lui	a5,0x80008
80006754:	35c78513          	addi	a0,a5,860 # 8000835c <__stack_top+0xfffc515c>
80006758:	fa8ff0ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:306
    return;
8000675c:	0140006f          	j	80006770 <API_Try2Send+0x128>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:304
        prints("API_Try2Send failed - NI_TX occupied!\n");
80006760:	800087b7          	lui	a5,0x80008
80006764:	38478513          	addi	a0,a5,900 # 80008384 <__stack_top+0xfffc5184>
80006768:	f98ff0ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:306
    return;
8000676c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:307
}
80006770:	01c12083          	lw	ra,28(sp)
80006774:	01812403          	lw	s0,24(sp)
80006778:	02010113          	addi	sp,sp,32
8000677c:	00008067          	ret

80006780 <API_AckTaskAllocation>:
API_AckTaskAllocation():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:309

void API_AckTaskAllocation(unsigned int task_id, unsigned int app_id){
80006780:	fd010113          	addi	sp,sp,-48
80006784:	02112623          	sw	ra,44(sp)
80006788:	02812423          	sw	s0,40(sp)
8000678c:	03010413          	addi	s0,sp,48
80006790:	fca42e23          	sw	a0,-36(s0)
80006794:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:312
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80006798:	9a9fe0ef          	jal	ra,80005140 <API_GetServiceSlot>
8000679c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:313
        if(mySlot == PIPE_FULL){
800067a0:	fec42703          	lw	a4,-20(s0)
800067a4:	fdfe07b7          	lui	a5,0xfdfe0
800067a8:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9cbfd>
800067ac:	00f71463          	bne	a4,a5,800067b4 <API_AckTaskAllocation+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:315
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
800067b0:	251000ef          	jal	ra,80007200 <API_NI_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:317
        }
    }while(mySlot == PIPE_FULL);
800067b4:	fec42703          	lw	a4,-20(s0)
800067b8:	fdfe07b7          	lui	a5,0xfdfe0
800067bc:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9cbfd>
800067c0:	fcf70ce3          	beq	a4,a5,80006798 <API_AckTaskAllocation+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:319

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
800067c4:	800227b7          	lui	a5,0x80022
800067c8:	fec42703          	lw	a4,-20(s0)
800067cc:	9dc78693          	addi	a3,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
800067d0:	00070793          	mv	a5,a4
800067d4:	00479793          	slli	a5,a5,0x4
800067d8:	40e787b3          	sub	a5,a5,a4
800067dc:	00279793          	slli	a5,a5,0x2
800067e0:	00f687b3          	add	a5,a3,a5
800067e4:	feff0737          	lui	a4,0xfeff0
800067e8:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efaccfe>
800067ec:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:321

    ServicePipe[mySlot].header.header           = makeAddress(0, 0);
800067f0:	00000593          	li	a1,0
800067f4:	00000513          	li	a0,0
800067f8:	bd1ff0ef          	jal	ra,800063c8 <makeAddress>
800067fc:	00050613          	mv	a2,a0
80006800:	800227b7          	lui	a5,0x80022
80006804:	fec42703          	lw	a4,-20(s0)
80006808:	9dc78693          	addi	a3,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
8000680c:	00070793          	mv	a5,a4
80006810:	00479793          	slli	a5,a5,0x4
80006814:	40e787b3          	sub	a5,a5,a4
80006818:	00279793          	slli	a5,a5,0x2
8000681c:	00f687b3          	add	a5,a3,a5
80006820:	00c7a423          	sw	a2,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:322
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80006824:	800227b7          	lui	a5,0x80022
80006828:	fec42703          	lw	a4,-20(s0)
8000682c:	9dc78693          	addi	a3,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
80006830:	00070793          	mv	a5,a4
80006834:	00479793          	slli	a5,a5,0x4
80006838:	40e787b3          	sub	a5,a5,a4
8000683c:	00279793          	slli	a5,a5,0x2
80006840:	00f687b3          	add	a5,a3,a5
80006844:	00b00713          	li	a4,11
80006848:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:323
    ServicePipe[mySlot].header.service          = TASK_ALLOCATION_SUCCESS;
8000684c:	800227b7          	lui	a5,0x80022
80006850:	fec42703          	lw	a4,-20(s0)
80006854:	9dc78693          	addi	a3,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
80006858:	00070793          	mv	a5,a4
8000685c:	00479793          	slli	a5,a5,0x4
80006860:	40e787b3          	sub	a5,a5,a4
80006864:	00279793          	slli	a5,a5,0x2
80006868:	00f687b3          	add	a5,a3,a5
8000686c:	03500713          	li	a4,53
80006870:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:324
    ServicePipe[mySlot].header.task_id          = task_id;
80006874:	800227b7          	lui	a5,0x80022
80006878:	fec42703          	lw	a4,-20(s0)
8000687c:	9dc78693          	addi	a3,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
80006880:	00070793          	mv	a5,a4
80006884:	00479793          	slli	a5,a5,0x4
80006888:	40e787b3          	sub	a5,a5,a4
8000688c:	00279793          	slli	a5,a5,0x2
80006890:	00f687b3          	add	a5,a3,a5
80006894:	fdc42703          	lw	a4,-36(s0)
80006898:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:325
    ServicePipe[mySlot].header.task_app_id      = app_id;
8000689c:	800227b7          	lui	a5,0x80022
800068a0:	fec42703          	lw	a4,-20(s0)
800068a4:	9dc78693          	addi	a3,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
800068a8:	00070793          	mv	a5,a4
800068ac:	00479793          	slli	a5,a5,0x4
800068b0:	40e787b3          	sub	a5,a5,a4
800068b4:	00279793          	slli	a5,a5,0x2
800068b8:	00f687b3          	add	a5,a3,a5
800068bc:	fd842703          	lw	a4,-40(s0)
800068c0:	02e7a223          	sw	a4,36(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:327

    API_PushSendQueue(SERVICE, mySlot);
800068c4:	fec42583          	lw	a1,-20(s0)
800068c8:	10100537          	lui	a0,0x10100
800068cc:	b3dff0ef          	jal	ra,80006408 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:328
    return;    
800068d0:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:329
}
800068d4:	02c12083          	lw	ra,44(sp)
800068d8:	02812403          	lw	s0,40(sp)
800068dc:	03010113          	addi	sp,sp,48
800068e0:	00008067          	ret

800068e4 <API_SendMessage>:
API_SendMessage():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:331

void API_SendMessage(unsigned int addr, unsigned int taskID){
800068e4:	fd010113          	addi	sp,sp,-48
800068e8:	02112623          	sw	ra,44(sp)
800068ec:	02812423          	sw	s0,40(sp)
800068f0:	03010413          	addi	s0,sp,48
800068f4:	fca42e23          	sw	a0,-36(s0)
800068f8:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:337
    unsigned int mySlot;
    unsigned int taskSlot;
    unsigned int i;
    Message *theMessage;
    do{
        mySlot = API_GetMessageSlot();
800068fc:	ee8fe0ef          	jal	ra,80004fe4 <API_GetMessageSlot>
80006900:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:338
        if(mySlot == PIPE_FULL){
80006904:	fe842703          	lw	a4,-24(s0)
80006908:	fdfe07b7          	lui	a5,0xfdfe0
8000690c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9cbfd>
80006910:	00f71463          	bne	a4,a5,80006918 <API_SendMessage+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:340
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80006914:	0ed000ef          	jal	ra,80007200 <API_NI_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:342
        }
    }while(mySlot == PIPE_FULL);
80006918:	fe842703          	lw	a4,-24(s0)
8000691c:	fdfe07b7          	lui	a5,0xfdfe0
80006920:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9cbfd>
80006924:	fcf70ce3          	beq	a4,a5,800068fc <API_SendMessage+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:344
    
    theMessage = addr;
80006928:	fdc42783          	lw	a5,-36(s0)
8000692c:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:346

    taskSlot = API_GetCurrentTaskSlot();
80006930:	d49fd0ef          	jal	ra,80004678 <API_GetCurrentTaskSlot>
80006934:	fea42023          	sw	a0,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:347
    printsv("taskSlot: ", taskSlot);
80006938:	fe042783          	lw	a5,-32(s0)
8000693c:	00078593          	mv	a1,a5
80006940:	800087b7          	lui	a5,0x80008
80006944:	3ac78513          	addi	a0,a5,940 # 800083ac <__stack_top+0xfffc51ac>
80006948:	e64ff0ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:348
    printsvsv("Adding a msg to task ", taskID, " in the PIPE slot ", mySlot);
8000694c:	fd842703          	lw	a4,-40(s0)
80006950:	fe842783          	lw	a5,-24(s0)
80006954:	00078693          	mv	a3,a5
80006958:	800087b7          	lui	a5,0x80008
8000695c:	3b878613          	addi	a2,a5,952 # 800083b8 <__stack_top+0xfffc51b8>
80006960:	00070593          	mv	a1,a4
80006964:	800087b7          	lui	a5,0x80008
80006968:	3cc78513          	addi	a0,a5,972 # 800083cc <__stack_top+0xfffc51cc>
8000696c:	e88ff0ef          	jal	ra,80005ff4 <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:349
    printsv("from app: ", TaskList[taskSlot].AppID);
80006970:	800237b7          	lui	a5,0x80023
80006974:	fe042703          	lw	a4,-32(s0)
80006978:	ed478693          	addi	a3,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
8000697c:	00070793          	mv	a5,a4
80006980:	00579793          	slli	a5,a5,0x5
80006984:	00e787b3          	add	a5,a5,a4
80006988:	00279793          	slli	a5,a5,0x2
8000698c:	00f687b3          	add	a5,a3,a5
80006990:	0147a783          	lw	a5,20(a5)
80006994:	00078593          	mv	a1,a5
80006998:	800087b7          	lui	a5,0x80008
8000699c:	3e478513          	addi	a0,a5,996 # 800083e4 <__stack_top+0xfffc51e4>
800069a0:	e0cff0ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:350
    MessagePipe[mySlot].holder = taskSlot;
800069a4:	800227b7          	lui	a5,0x80022
800069a8:	fe842683          	lw	a3,-24(s0)
800069ac:	d8478713          	addi	a4,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
800069b0:	24400793          	li	a5,580
800069b4:	02f687b3          	mul	a5,a3,a5
800069b8:	00f707b3          	add	a5,a4,a5
800069bc:	fe042703          	lw	a4,-32(s0)
800069c0:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:352

    MessagePipe[mySlot].header.header           = TaskList[taskSlot].TasksMap[taskID];
800069c4:	800236b7          	lui	a3,0x80023
800069c8:	fe042703          	lw	a4,-32(s0)
800069cc:	00070793          	mv	a5,a4
800069d0:	00579793          	slli	a5,a5,0x5
800069d4:	00e787b3          	add	a5,a5,a4
800069d8:	fd842703          	lw	a4,-40(s0)
800069dc:	00e787b3          	add	a5,a5,a4
800069e0:	01478793          	addi	a5,a5,20
800069e4:	ed468713          	addi	a4,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
800069e8:	00279793          	slli	a5,a5,0x2
800069ec:	00f707b3          	add	a5,a4,a5
800069f0:	00c7a703          	lw	a4,12(a5)
800069f4:	800227b7          	lui	a5,0x80022
800069f8:	fe842603          	lw	a2,-24(s0)
800069fc:	d8478693          	addi	a3,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
80006a00:	24400793          	li	a5,580
80006a04:	02f607b3          	mul	a5,a2,a5
80006a08:	00f687b3          	add	a5,a3,a5
80006a0c:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:353
    MessagePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE + theMessage->length + 1;
80006a10:	fe442783          	lw	a5,-28(s0)
80006a14:	0007a783          	lw	a5,0(a5)
80006a18:	00c78713          	addi	a4,a5,12
80006a1c:	800227b7          	lui	a5,0x80022
80006a20:	fe842603          	lw	a2,-24(s0)
80006a24:	d8478693          	addi	a3,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
80006a28:	24400793          	li	a5,580
80006a2c:	02f607b3          	mul	a5,a2,a5
80006a30:	00f687b3          	add	a5,a3,a5
80006a34:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:354
    MessagePipe[mySlot].header.service          = MESSAGE_DELIVERY;
80006a38:	800227b7          	lui	a5,0x80022
80006a3c:	fe842683          	lw	a3,-24(s0)
80006a40:	d8478713          	addi	a4,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
80006a44:	24400793          	li	a5,580
80006a48:	02f687b3          	mul	a5,a3,a5
80006a4c:	00f707b3          	add	a5,a4,a5
80006a50:	02000713          	li	a4,32
80006a54:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:355
    MessagePipe[mySlot].header.application_id   = TaskList[taskSlot].AppID;
80006a58:	800237b7          	lui	a5,0x80023
80006a5c:	fe042703          	lw	a4,-32(s0)
80006a60:	ed478693          	addi	a3,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80006a64:	00070793          	mv	a5,a4
80006a68:	00579793          	slli	a5,a5,0x5
80006a6c:	00e787b3          	add	a5,a5,a4
80006a70:	00279793          	slli	a5,a5,0x2
80006a74:	00f687b3          	add	a5,a3,a5
80006a78:	0147a703          	lw	a4,20(a5)
80006a7c:	800227b7          	lui	a5,0x80022
80006a80:	fe842603          	lw	a2,-24(s0)
80006a84:	d8478693          	addi	a3,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
80006a88:	24400793          	li	a5,580
80006a8c:	02f607b3          	mul	a5,a2,a5
80006a90:	00f687b3          	add	a5,a3,a5
80006a94:	00e7ac23          	sw	a4,24(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:356
    MessagePipe[mySlot].header.producer_task    = TaskList[taskSlot].TaskID;
80006a98:	800236b7          	lui	a3,0x80023
80006a9c:	fe042703          	lw	a4,-32(s0)
80006aa0:	00070793          	mv	a5,a4
80006aa4:	00579793          	slli	a5,a5,0x5
80006aa8:	00e787b3          	add	a5,a5,a4
80006aac:	00279793          	slli	a5,a5,0x2
80006ab0:	ed468713          	addi	a4,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80006ab4:	00e787b3          	add	a5,a5,a4
80006ab8:	0107a703          	lw	a4,16(a5)
80006abc:	800227b7          	lui	a5,0x80022
80006ac0:	fe842603          	lw	a2,-24(s0)
80006ac4:	d8478693          	addi	a3,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
80006ac8:	24400793          	li	a5,580
80006acc:	02f607b3          	mul	a5,a2,a5
80006ad0:	00f687b3          	add	a5,a3,a5
80006ad4:	00e7ae23          	sw	a4,28(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:357
    MessagePipe[mySlot].header.destination_task = taskID;
80006ad8:	800227b7          	lui	a5,0x80022
80006adc:	fe842683          	lw	a3,-24(s0)
80006ae0:	d8478713          	addi	a4,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
80006ae4:	24400793          	li	a5,580
80006ae8:	02f687b3          	mul	a5,a3,a5
80006aec:	00f707b3          	add	a5,a4,a5
80006af0:	fd842703          	lw	a4,-40(s0)
80006af4:	02e7a023          	sw	a4,32(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:358
    MessagePipe[mySlot].msg.length              = theMessage->length;
80006af8:	fe442783          	lw	a5,-28(s0)
80006afc:	0007a703          	lw	a4,0(a5)
80006b00:	800227b7          	lui	a5,0x80022
80006b04:	fe842603          	lw	a2,-24(s0)
80006b08:	24400693          	li	a3,580
80006b0c:	02d606b3          	mul	a3,a2,a3
80006b10:	d8478793          	addi	a5,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
80006b14:	00f687b3          	add	a5,a3,a5
80006b18:	04e7a023          	sw	a4,64(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:359
    for (i = 0; i < theMessage->length; i++){
80006b1c:	fe042623          	sw	zero,-20(s0)
80006b20:	05c0006f          	j	80006b7c <API_SendMessage+0x298>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:360 (discriminator 3)
        MessagePipe[mySlot].msg.msg[i]          = theMessage->msg[i];
80006b24:	fe442703          	lw	a4,-28(s0)
80006b28:	fec42783          	lw	a5,-20(s0)
80006b2c:	00279793          	slli	a5,a5,0x2
80006b30:	00f707b3          	add	a5,a4,a5
80006b34:	0047a683          	lw	a3,4(a5)
80006b38:	80022637          	lui	a2,0x80022
80006b3c:	fe842703          	lw	a4,-24(s0)
80006b40:	00070793          	mv	a5,a4
80006b44:	00379793          	slli	a5,a5,0x3
80006b48:	00e787b3          	add	a5,a5,a4
80006b4c:	00479793          	slli	a5,a5,0x4
80006b50:	00e787b3          	add	a5,a5,a4
80006b54:	fec42703          	lw	a4,-20(s0)
80006b58:	00e787b3          	add	a5,a5,a4
80006b5c:	01078793          	addi	a5,a5,16
80006b60:	d8460713          	addi	a4,a2,-636 # 80021d84 <__stack_top+0xfffdeb84>
80006b64:	00279793          	slli	a5,a5,0x2
80006b68:	00f707b3          	add	a5,a4,a5
80006b6c:	00d7a223          	sw	a3,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:359 (discriminator 3)
    for (i = 0; i < theMessage->length; i++){
80006b70:	fec42783          	lw	a5,-20(s0)
80006b74:	00178793          	addi	a5,a5,1
80006b78:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:359 (discriminator 1)
80006b7c:	fe442783          	lw	a5,-28(s0)
80006b80:	0007a783          	lw	a5,0(a5)
80006b84:	fec42703          	lw	a4,-20(s0)
80006b88:	f8f76ee3          	bltu	a4,a5,80006b24 <API_SendMessage+0x240>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:363
    }
    
    if (TaskList[taskSlot].PendingReq[taskID] == TRUE){
80006b8c:	800236b7          	lui	a3,0x80023
80006b90:	fe042703          	lw	a4,-32(s0)
80006b94:	00070793          	mv	a5,a4
80006b98:	00579793          	slli	a5,a5,0x5
80006b9c:	00e787b3          	add	a5,a5,a4
80006ba0:	fd842703          	lw	a4,-40(s0)
80006ba4:	00e787b3          	add	a5,a5,a4
80006ba8:	00c78793          	addi	a5,a5,12
80006bac:	00279713          	slli	a4,a5,0x2
80006bb0:	ed468793          	addi	a5,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80006bb4:	00f707b3          	add	a5,a4,a5
80006bb8:	0007a703          	lw	a4,0(a5)
80006bbc:	00100793          	li	a5,1
80006bc0:	04f71863          	bne	a4,a5,80006c10 <API_SendMessage+0x32c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:364
        prints(">>>>>Achei aqui no pending!\n");
80006bc4:	800087b7          	lui	a5,0x80008
80006bc8:	3f078513          	addi	a0,a5,1008 # 800083f0 <__stack_top+0xfffc51f0>
80006bcc:	b34ff0ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:365
        API_PushSendQueue(MESSAGE, mySlot);
80006bd0:	fe842583          	lw	a1,-24(s0)
80006bd4:	20200537          	lui	a0,0x20200
80006bd8:	831ff0ef          	jal	ra,80006408 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:366
        TaskList[taskSlot].PendingReq[taskID] = FALSE;
80006bdc:	800236b7          	lui	a3,0x80023
80006be0:	fe042703          	lw	a4,-32(s0)
80006be4:	00070793          	mv	a5,a4
80006be8:	00579793          	slli	a5,a5,0x5
80006bec:	00e787b3          	add	a5,a5,a4
80006bf0:	fd842703          	lw	a4,-40(s0)
80006bf4:	00e787b3          	add	a5,a5,a4
80006bf8:	00c78793          	addi	a5,a5,12
80006bfc:	00279713          	slli	a4,a5,0x2
80006c00:	ed468793          	addi	a5,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80006c04:	00f707b3          	add	a5,a4,a5
80006c08:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:368
    }
    return;
80006c0c:	00000013          	nop
80006c10:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:369
}
80006c14:	02c12083          	lw	ra,44(sp)
80006c18:	02812403          	lw	s0,40(sp)
80006c1c:	03010113          	addi	sp,sp,48
80006c20:	00008067          	ret

80006c24 <API_SendFinishTask>:
API_SendFinishTask():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:371

void API_SendFinishTask(unsigned int task_id, unsigned int app_id){
80006c24:	fd010113          	addi	sp,sp,-48
80006c28:	02112623          	sw	ra,44(sp)
80006c2c:	02812423          	sw	s0,40(sp)
80006c30:	03010413          	addi	s0,sp,48
80006c34:	fca42e23          	sw	a0,-36(s0)
80006c38:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:374
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80006c3c:	d04fe0ef          	jal	ra,80005140 <API_GetServiceSlot>
80006c40:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:375
        if(mySlot == PIPE_FULL){
80006c44:	fec42703          	lw	a4,-20(s0)
80006c48:	fdfe07b7          	lui	a5,0xfdfe0
80006c4c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9cbfd>
80006c50:	00f71463          	bne	a4,a5,80006c58 <API_SendFinishTask+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:377
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80006c54:	5ac000ef          	jal	ra,80007200 <API_NI_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:379
        }
    }while(mySlot == PIPE_FULL);
80006c58:	fec42703          	lw	a4,-20(s0)
80006c5c:	fdfe07b7          	lui	a5,0xfdfe0
80006c60:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9cbfd>
80006c64:	fcf70ce3          	beq	a4,a5,80006c3c <API_SendFinishTask+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:381

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80006c68:	800227b7          	lui	a5,0x80022
80006c6c:	fec42703          	lw	a4,-20(s0)
80006c70:	9dc78693          	addi	a3,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
80006c74:	00070793          	mv	a5,a4
80006c78:	00479793          	slli	a5,a5,0x4
80006c7c:	40e787b3          	sub	a5,a5,a4
80006c80:	00279793          	slli	a5,a5,0x2
80006c84:	00f687b3          	add	a5,a3,a5
80006c88:	feff0737          	lui	a4,0xfeff0
80006c8c:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efaccfe>
80006c90:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:383

    ServicePipe[mySlot].header.header           = makeAddress(0, 0);
80006c94:	00000593          	li	a1,0
80006c98:	00000513          	li	a0,0
80006c9c:	f2cff0ef          	jal	ra,800063c8 <makeAddress>
80006ca0:	00050613          	mv	a2,a0
80006ca4:	800227b7          	lui	a5,0x80022
80006ca8:	fec42703          	lw	a4,-20(s0)
80006cac:	9dc78693          	addi	a3,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
80006cb0:	00070793          	mv	a5,a4
80006cb4:	00479793          	slli	a5,a5,0x4
80006cb8:	40e787b3          	sub	a5,a5,a4
80006cbc:	00279793          	slli	a5,a5,0x2
80006cc0:	00f687b3          	add	a5,a3,a5
80006cc4:	00c7a423          	sw	a2,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:384
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80006cc8:	800227b7          	lui	a5,0x80022
80006ccc:	fec42703          	lw	a4,-20(s0)
80006cd0:	9dc78693          	addi	a3,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
80006cd4:	00070793          	mv	a5,a4
80006cd8:	00479793          	slli	a5,a5,0x4
80006cdc:	40e787b3          	sub	a5,a5,a4
80006ce0:	00279793          	slli	a5,a5,0x2
80006ce4:	00f687b3          	add	a5,a3,a5
80006ce8:	00b00713          	li	a4,11
80006cec:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:385
    ServicePipe[mySlot].header.service          = TASK_FINISH;
80006cf0:	800227b7          	lui	a5,0x80022
80006cf4:	fec42703          	lw	a4,-20(s0)
80006cf8:	9dc78693          	addi	a3,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
80006cfc:	00070793          	mv	a5,a4
80006d00:	00479793          	slli	a5,a5,0x4
80006d04:	40e787b3          	sub	a5,a5,a4
80006d08:	00279793          	slli	a5,a5,0x2
80006d0c:	00f687b3          	add	a5,a3,a5
80006d10:	50000713          	li	a4,1280
80006d14:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:386
    ServicePipe[mySlot].header.task_id          = task_id;
80006d18:	800227b7          	lui	a5,0x80022
80006d1c:	fec42703          	lw	a4,-20(s0)
80006d20:	9dc78693          	addi	a3,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
80006d24:	00070793          	mv	a5,a4
80006d28:	00479793          	slli	a5,a5,0x4
80006d2c:	40e787b3          	sub	a5,a5,a4
80006d30:	00279793          	slli	a5,a5,0x2
80006d34:	00f687b3          	add	a5,a3,a5
80006d38:	fdc42703          	lw	a4,-36(s0)
80006d3c:	00e7aa23          	sw	a4,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:387
    ServicePipe[mySlot].header.task_app_id      = app_id;
80006d40:	800227b7          	lui	a5,0x80022
80006d44:	fec42703          	lw	a4,-20(s0)
80006d48:	9dc78693          	addi	a3,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
80006d4c:	00070793          	mv	a5,a4
80006d50:	00479793          	slli	a5,a5,0x4
80006d54:	40e787b3          	sub	a5,a5,a4
80006d58:	00279793          	slli	a5,a5,0x2
80006d5c:	00f687b3          	add	a5,a3,a5
80006d60:	fd842703          	lw	a4,-40(s0)
80006d64:	02e7a223          	sw	a4,36(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:388
    ServicePipe[mySlot].header.task_dest_addr   = ProcessorAddr;
80006d68:	800237b7          	lui	a5,0x80023
80006d6c:	1fc7a683          	lw	a3,508(a5) # 800231fc <__stack_top+0xfffdfffc>
80006d70:	800227b7          	lui	a5,0x80022
80006d74:	fec42703          	lw	a4,-20(s0)
80006d78:	9dc78613          	addi	a2,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
80006d7c:	00070793          	mv	a5,a4
80006d80:	00479793          	slli	a5,a5,0x4
80006d84:	40e787b3          	sub	a5,a5,a4
80006d88:	00279793          	slli	a5,a5,0x2
80006d8c:	00f607b3          	add	a5,a2,a5
80006d90:	02d7ac23          	sw	a3,56(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:389
    API_PushSendQueue(SERVICE, mySlot);
80006d94:	fec42583          	lw	a1,-20(s0)
80006d98:	10100537          	lui	a0,0x10100
80006d9c:	e6cff0ef          	jal	ra,80006408 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:390
    return;    
80006da0:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:391
}
80006da4:	02c12083          	lw	ra,44(sp)
80006da8:	02812403          	lw	s0,40(sp)
80006dac:	03010113          	addi	sp,sp,48
80006db0:	00008067          	ret

80006db4 <API_SendMessageReq>:
API_SendMessageReq():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:393

void API_SendMessageReq(unsigned int addr, unsigned int taskID){
80006db4:	fd010113          	addi	sp,sp,-48
80006db8:	02112623          	sw	ra,44(sp)
80006dbc:	02812423          	sw	s0,40(sp)
80006dc0:	03010413          	addi	s0,sp,48
80006dc4:	fca42e23          	sw	a0,-36(s0)
80006dc8:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:396
    unsigned int taskSlot;
    unsigned int mySlot;
    volatile unsigned int idle = 0;
80006dcc:	fe042223          	sw	zero,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:398
    // Update task info
    taskSlot = API_GetCurrentTaskSlot();
80006dd0:	8a9fd0ef          	jal	ra,80004678 <API_GetCurrentTaskSlot>
80006dd4:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:399
    TaskList[taskSlot].waitingMsg = TRUE;
80006dd8:	800237b7          	lui	a5,0x80023
80006ddc:	fec42703          	lw	a4,-20(s0)
80006de0:	ed478693          	addi	a3,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80006de4:	00070793          	mv	a5,a4
80006de8:	00579793          	slli	a5,a5,0x5
80006dec:	00e787b3          	add	a5,a5,a4
80006df0:	00279793          	slli	a5,a5,0x2
80006df4:	00f687b3          	add	a5,a3,a5
80006df8:	00100713          	li	a4,1
80006dfc:	00e7ae23          	sw	a4,28(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:400
    TaskList[taskSlot].MsgToReceive = addr;
80006e00:	800236b7          	lui	a3,0x80023
80006e04:	fec42703          	lw	a4,-20(s0)
80006e08:	00070793          	mv	a5,a4
80006e0c:	00579793          	slli	a5,a5,0x5
80006e10:	00e787b3          	add	a5,a5,a4
80006e14:	00279793          	slli	a5,a5,0x2
80006e18:	ed468713          	addi	a4,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80006e1c:	00e787b3          	add	a5,a5,a4
80006e20:	fdc42703          	lw	a4,-36(s0)
80006e24:	02e7a023          	sw	a4,32(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:405
    //printsv("API_SendMessageReq addr: ", addr);

    // Sends the message request
    do{
        mySlot = API_GetServiceSlot();
80006e28:	b18fe0ef          	jal	ra,80005140 <API_GetServiceSlot>
80006e2c:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:406
        if(mySlot == PIPE_FULL){
80006e30:	fe842703          	lw	a4,-24(s0)
80006e34:	fdfe07b7          	lui	a5,0xfdfe0
80006e38:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9cbfd>
80006e3c:	00f71463          	bne	a4,a5,80006e44 <API_SendMessageReq+0x90>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:408
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            API_NI_Handler();
80006e40:	3c0000ef          	jal	ra,80007200 <API_NI_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:410
        }
    }while(mySlot == PIPE_FULL);
80006e44:	fe842703          	lw	a4,-24(s0)
80006e48:	fdfe07b7          	lui	a5,0xfdfe0
80006e4c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9cbfd>
80006e50:	fcf70ce3          	beq	a4,a5,80006e28 <API_SendMessageReq+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:412

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80006e54:	800227b7          	lui	a5,0x80022
80006e58:	fe842703          	lw	a4,-24(s0)
80006e5c:	9dc78693          	addi	a3,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
80006e60:	00070793          	mv	a5,a4
80006e64:	00479793          	slli	a5,a5,0x4
80006e68:	40e787b3          	sub	a5,a5,a4
80006e6c:	00279793          	slli	a5,a5,0x2
80006e70:	00f687b3          	add	a5,a3,a5
80006e74:	feff0737          	lui	a4,0xfeff0
80006e78:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efaccfe>
80006e7c:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:414

    ServicePipe[mySlot].header.header           = TaskList[taskSlot].TasksMap[taskID];
80006e80:	800236b7          	lui	a3,0x80023
80006e84:	fec42703          	lw	a4,-20(s0)
80006e88:	00070793          	mv	a5,a4
80006e8c:	00579793          	slli	a5,a5,0x5
80006e90:	00e787b3          	add	a5,a5,a4
80006e94:	fd842703          	lw	a4,-40(s0)
80006e98:	00e787b3          	add	a5,a5,a4
80006e9c:	01478793          	addi	a5,a5,20
80006ea0:	ed468713          	addi	a4,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80006ea4:	00279793          	slli	a5,a5,0x2
80006ea8:	00f707b3          	add	a5,a4,a5
80006eac:	00c7a683          	lw	a3,12(a5)
80006eb0:	800227b7          	lui	a5,0x80022
80006eb4:	fe842703          	lw	a4,-24(s0)
80006eb8:	9dc78613          	addi	a2,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
80006ebc:	00070793          	mv	a5,a4
80006ec0:	00479793          	slli	a5,a5,0x4
80006ec4:	40e787b3          	sub	a5,a5,a4
80006ec8:	00279793          	slli	a5,a5,0x2
80006ecc:	00f607b3          	add	a5,a2,a5
80006ed0:	00d7a423          	sw	a3,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:415
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80006ed4:	800227b7          	lui	a5,0x80022
80006ed8:	fe842703          	lw	a4,-24(s0)
80006edc:	9dc78693          	addi	a3,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
80006ee0:	00070793          	mv	a5,a4
80006ee4:	00479793          	slli	a5,a5,0x4
80006ee8:	40e787b3          	sub	a5,a5,a4
80006eec:	00279793          	slli	a5,a5,0x2
80006ef0:	00f687b3          	add	a5,a3,a5
80006ef4:	00b00713          	li	a4,11
80006ef8:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:416
    ServicePipe[mySlot].header.service          = MESSAGE_REQUEST;
80006efc:	800227b7          	lui	a5,0x80022
80006f00:	fe842703          	lw	a4,-24(s0)
80006f04:	9dc78693          	addi	a3,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
80006f08:	00070793          	mv	a5,a4
80006f0c:	00479793          	slli	a5,a5,0x4
80006f10:	40e787b3          	sub	a5,a5,a4
80006f14:	00279793          	slli	a5,a5,0x2
80006f18:	00f687b3          	add	a5,a3,a5
80006f1c:	01000713          	li	a4,16
80006f20:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:417
    ServicePipe[mySlot].header.task_id          = TaskList[taskSlot].TaskID;
80006f24:	800236b7          	lui	a3,0x80023
80006f28:	fec42703          	lw	a4,-20(s0)
80006f2c:	00070793          	mv	a5,a4
80006f30:	00579793          	slli	a5,a5,0x5
80006f34:	00e787b3          	add	a5,a5,a4
80006f38:	00279793          	slli	a5,a5,0x2
80006f3c:	ed468713          	addi	a4,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80006f40:	00e787b3          	add	a5,a5,a4
80006f44:	0107a683          	lw	a3,16(a5)
80006f48:	800227b7          	lui	a5,0x80022
80006f4c:	fe842703          	lw	a4,-24(s0)
80006f50:	9dc78613          	addi	a2,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
80006f54:	00070793          	mv	a5,a4
80006f58:	00479793          	slli	a5,a5,0x4
80006f5c:	40e787b3          	sub	a5,a5,a4
80006f60:	00279793          	slli	a5,a5,0x2
80006f64:	00f607b3          	add	a5,a2,a5
80006f68:	00d7aa23          	sw	a3,20(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:418
    ServicePipe[mySlot].header.task_app_id      = TaskList[taskSlot].AppID;
80006f6c:	800237b7          	lui	a5,0x80023
80006f70:	fec42703          	lw	a4,-20(s0)
80006f74:	ed478693          	addi	a3,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80006f78:	00070793          	mv	a5,a4
80006f7c:	00579793          	slli	a5,a5,0x5
80006f80:	00e787b3          	add	a5,a5,a4
80006f84:	00279793          	slli	a5,a5,0x2
80006f88:	00f687b3          	add	a5,a3,a5
80006f8c:	0147a683          	lw	a3,20(a5)
80006f90:	800227b7          	lui	a5,0x80022
80006f94:	fe842703          	lw	a4,-24(s0)
80006f98:	9dc78613          	addi	a2,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
80006f9c:	00070793          	mv	a5,a4
80006fa0:	00479793          	slli	a5,a5,0x4
80006fa4:	40e787b3          	sub	a5,a5,a4
80006fa8:	00279793          	slli	a5,a5,0x2
80006fac:	00f607b3          	add	a5,a2,a5
80006fb0:	02d7a223          	sw	a3,36(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:419
    ServicePipe[mySlot].header.producer_task_id = taskID;
80006fb4:	800227b7          	lui	a5,0x80022
80006fb8:	fe842703          	lw	a4,-24(s0)
80006fbc:	9dc78693          	addi	a3,a5,-1572 # 800219dc <__stack_top+0xfffde7dc>
80006fc0:	00070793          	mv	a5,a4
80006fc4:	00479793          	slli	a5,a5,0x4
80006fc8:	40e787b3          	sub	a5,a5,a4
80006fcc:	00279793          	slli	a5,a5,0x2
80006fd0:	00f687b3          	add	a5,a3,a5
80006fd4:	fd842703          	lw	a4,-40(s0)
80006fd8:	00e7ae23          	sw	a4,28(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:421

    API_PushSendQueue(SERVICE, mySlot);
80006fdc:	fe842583          	lw	a1,-24(s0)
80006fe0:	10100537          	lui	a0,0x10100
80006fe4:	c24ff0ef          	jal	ra,80006408 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:423

    prints("Esperando Mensagem!\n");
80006fe8:	800087b7          	lui	a5,0x80008
80006fec:	41078513          	addi	a0,a5,1040 # 80008410 <__stack_top+0xfffc5210>
80006ff0:	f11fe0ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:437
        vTaskDelay(1);
        mySlot++;

    }*/
    
    API_setFreqScale(100);
80006ff4:	06400513          	li	a0,100
80006ff8:	c30fe0ef          	jal	ra,80005428 <API_setFreqScale>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:438
    vTaskSuspend(TaskList[taskSlot].TaskHandler);
80006ffc:	800237b7          	lui	a5,0x80023
80007000:	fec42703          	lw	a4,-20(s0)
80007004:	ed478693          	addi	a3,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80007008:	00070793          	mv	a5,a4
8000700c:	00579793          	slli	a5,a5,0x5
80007010:	00e787b3          	add	a5,a5,a4
80007014:	00279793          	slli	a5,a5,0x2
80007018:	00f687b3          	add	a5,a3,a5
8000701c:	0187a783          	lw	a5,24(a5)
80007020:	00078513          	mv	a0,a5
80007024:	a70fb0ef          	jal	ra,80002294 <vTaskSuspend>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:439
    API_setFreqScale(1000);
80007028:	3e800513          	li	a0,1000
8000702c:	bfcfe0ef          	jal	ra,80005428 <API_setFreqScale>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:441

    prints("Mensagem Recebida!\n");
80007030:	800087b7          	lui	a5,0x80008
80007034:	42878513          	addi	a0,a5,1064 # 80008428 <__stack_top+0xfffc5228>
80007038:	ec9fe0ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:442
    return;
8000703c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:443
}
80007040:	02c12083          	lw	ra,44(sp)
80007044:	02812403          	lw	s0,40(sp)
80007048:	03010113          	addi	sp,sp,48
8000704c:	00008067          	ret

80007050 <API_CheckMessagePipe>:
API_CheckMessagePipe():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:445

unsigned int API_CheckMessagePipe(unsigned int requester_task_id, unsigned int task_app_id){
80007050:	fd010113          	addi	sp,sp,-48
80007054:	02812623          	sw	s0,44(sp)
80007058:	03010413          	addi	s0,sp,48
8000705c:	fca42e23          	sw	a0,-36(s0)
80007060:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:447
    unsigned int i;
    unsigned int sel = ERRO;
80007064:	fff00793          	li	a5,-1
80007068:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:448
    unsigned int smallID = 268435455;
8000706c:	100007b7          	lui	a5,0x10000
80007070:	fff78793          	addi	a5,a5,-1 # fffffff <RAM_SIZE+0xff7ffff>
80007074:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:450
    //vTaskEnterCritical();
    for (i = 0; i < PIPE_SIZE; i++){
80007078:	fe042623          	sw	zero,-20(s0)
8000707c:	0c80006f          	j	80007144 <API_CheckMessagePipe+0xf4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:452
        //printsv("testing ", i);
        if(MessagePipe[i].status == PIPE_OCCUPIED){
80007080:	800227b7          	lui	a5,0x80022
80007084:	fec42683          	lw	a3,-20(s0)
80007088:	24400713          	li	a4,580
8000708c:	02e68733          	mul	a4,a3,a4
80007090:	d8478793          	addi	a5,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
80007094:	00f707b3          	add	a5,a4,a5
80007098:	0007a703          	lw	a4,0(a5)
8000709c:	00100793          	li	a5,1
800070a0:	08f71c63          	bne	a4,a5,80007138 <API_CheckMessagePipe+0xe8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:453
            if(MessagePipe[i].header.application_id == task_app_id){
800070a4:	800227b7          	lui	a5,0x80022
800070a8:	fec42683          	lw	a3,-20(s0)
800070ac:	d8478713          	addi	a4,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
800070b0:	24400793          	li	a5,580
800070b4:	02f687b3          	mul	a5,a3,a5
800070b8:	00f707b3          	add	a5,a4,a5
800070bc:	0187a783          	lw	a5,24(a5)
800070c0:	fd842703          	lw	a4,-40(s0)
800070c4:	06f71a63          	bne	a4,a5,80007138 <API_CheckMessagePipe+0xe8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:454
                if(MessagePipe[i].header.destination_task == requester_task_id){
800070c8:	800227b7          	lui	a5,0x80022
800070cc:	fec42683          	lw	a3,-20(s0)
800070d0:	d8478713          	addi	a4,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
800070d4:	24400793          	li	a5,580
800070d8:	02f687b3          	mul	a5,a3,a5
800070dc:	00f707b3          	add	a5,a4,a5
800070e0:	0207a783          	lw	a5,32(a5)
800070e4:	fdc42703          	lw	a4,-36(s0)
800070e8:	04f71863          	bne	a4,a5,80007138 <API_CheckMessagePipe+0xe8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:455
                    if(MessagePipe[i].msgID < smallID){
800070ec:	800227b7          	lui	a5,0x80022
800070f0:	fec42683          	lw	a3,-20(s0)
800070f4:	d8478713          	addi	a4,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
800070f8:	24400793          	li	a5,580
800070fc:	02f687b3          	mul	a5,a3,a5
80007100:	00f707b3          	add	a5,a4,a5
80007104:	0087a783          	lw	a5,8(a5)
80007108:	fe442703          	lw	a4,-28(s0)
8000710c:	02e7f663          	bleu	a4,a5,80007138 <API_CheckMessagePipe+0xe8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:456
                        smallID = MessagePipe[i].msgID;
80007110:	800227b7          	lui	a5,0x80022
80007114:	fec42683          	lw	a3,-20(s0)
80007118:	d8478713          	addi	a4,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
8000711c:	24400793          	li	a5,580
80007120:	02f687b3          	mul	a5,a3,a5
80007124:	00f707b3          	add	a5,a4,a5
80007128:	0087a783          	lw	a5,8(a5)
8000712c:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:457
                        sel = i;
80007130:	fec42783          	lw	a5,-20(s0)
80007134:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:450 (discriminator 2)
    for (i = 0; i < PIPE_SIZE; i++){
80007138:	fec42783          	lw	a5,-20(s0)
8000713c:	00178793          	addi	a5,a5,1
80007140:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:450 (discriminator 1)
80007144:	fec42703          	lw	a4,-20(s0)
80007148:	00300793          	li	a5,3
8000714c:	f2e7fae3          	bleu	a4,a5,80007080 <API_CheckMessagePipe+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:463
                    }
                }
            }
        }
    }
    if(sel != ERRO){
80007150:	fe842703          	lw	a4,-24(s0)
80007154:	fff00793          	li	a5,-1
80007158:	02f70063          	beq	a4,a5,80007178 <API_CheckMessagePipe+0x128>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:464
        MessagePipe[sel].status == PIPE_TRANSMITTING;
8000715c:	800227b7          	lui	a5,0x80022
80007160:	fe842683          	lw	a3,-24(s0)
80007164:	24400713          	li	a4,580
80007168:	02e68733          	mul	a4,a3,a4
8000716c:	d8478793          	addi	a5,a5,-636 # 80021d84 <__stack_top+0xfffdeb84>
80007170:	00f707b3          	add	a5,a4,a5
80007174:	0007a783          	lw	a5,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:467
    }
    //vTaskExitCritical();
    return sel;
80007178:	fe842783          	lw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:468
}
8000717c:	00078513          	mv	a0,a5
80007180:	02c12403          	lw	s0,44(sp)
80007184:	03010113          	addi	sp,sp,48
80007188:	00008067          	ret

8000718c <API_AddPendingReq>:
API_AddPendingReq():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:470

void API_AddPendingReq(unsigned int requester_task_id, unsigned int task_app_id, unsigned int producer_task_id){
8000718c:	fd010113          	addi	sp,sp,-48
80007190:	02112623          	sw	ra,44(sp)
80007194:	02812423          	sw	s0,40(sp)
80007198:	03010413          	addi	s0,sp,48
8000719c:	fca42e23          	sw	a0,-36(s0)
800071a0:	fcb42c23          	sw	a1,-40(s0)
800071a4:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:471
    unsigned int slot = API_GetTaskSlot(producer_task_id, task_app_id);
800071a8:	fd842583          	lw	a1,-40(s0)
800071ac:	fd442503          	lw	a0,-44(s0)
800071b0:	8e1fd0ef          	jal	ra,80004a90 <API_GetTaskSlot>
800071b4:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:472
    TaskList[slot].PendingReq[requester_task_id] = TRUE;
800071b8:	800236b7          	lui	a3,0x80023
800071bc:	fec42703          	lw	a4,-20(s0)
800071c0:	00070793          	mv	a5,a4
800071c4:	00579793          	slli	a5,a5,0x5
800071c8:	00e787b3          	add	a5,a5,a4
800071cc:	fdc42703          	lw	a4,-36(s0)
800071d0:	00e787b3          	add	a5,a5,a4
800071d4:	00c78793          	addi	a5,a5,12
800071d8:	00279713          	slli	a4,a5,0x2
800071dc:	ed468793          	addi	a5,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
800071e0:	00f707b3          	add	a5,a4,a5
800071e4:	00100713          	li	a4,1
800071e8:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:473
    return;
800071ec:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:474
}
800071f0:	02c12083          	lw	ra,44(sp)
800071f4:	02812403          	lw	s0,40(sp)
800071f8:	03010113          	addi	sp,sp,48
800071fc:	00008067          	ret

80007200 <API_NI_Handler>:
API_NI_Handler():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:477


void API_NI_Handler(){
80007200:	fe010113          	addi	sp,sp,-32
80007204:	00112e23          	sw	ra,28(sp)
80007208:	00812c23          	sw	s0,24(sp)
8000720c:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:480
    unsigned int aux;
    unsigned int service;
    vTaskEnterCritical();
80007210:	cfdfb0ef          	jal	ra,80002f0c <vTaskEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:482
    do{
        if (HW_get_32bit_reg(NI_TX) == NI_STATUS_INTER){
80007214:	500007b7          	lui	a5,0x50000
80007218:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
8000721c:	d81f90ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80007220:	00050713          	mv	a4,a0
80007224:	000017b7          	lui	a5,0x1
80007228:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
8000722c:	02f71c63          	bne	a4,a5,80007264 <API_NI_Handler+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:483
            prints("TX interruption catched\n");
80007230:	800087b7          	lui	a5,0x80008
80007234:	43c78513          	addi	a0,a5,1084 # 8000843c <__stack_top+0xfffc523c>
80007238:	cc9fe0ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:484
            API_ClearPipeSlot(SendingSlot); // clear the pipe slot that was transmitted
8000723c:	800227b7          	lui	a5,0x80022
80007240:	9d87a783          	lw	a5,-1576(a5) # 800219d8 <__stack_top+0xfffde7d8>
80007244:	00078513          	mv	a0,a5
80007248:	fadfd0ef          	jal	ra,800051f4 <API_ClearPipeSlot>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:485
            HW_set_32bit_reg(NI_TX, DONE);  // releases the interruption
8000724c:	800057b7          	lui	a5,0x80005
80007250:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffc2355>
80007254:	500007b7          	lui	a5,0x50000
80007258:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
8000725c:	d39f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:486
            API_Try2Send();                 // tries to send another packet (if available)
80007260:	be8ff0ef          	jal	ra,80006648 <API_Try2Send>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:489
        }

        if( HW_get_32bit_reg(NI_RX) == NI_STATUS_INTER || HW_get_32bit_reg(NI_RX) == NI_STATUS_WAITING) {
80007264:	500007b7          	lui	a5,0x50000
80007268:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
8000726c:	d31f90ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80007270:	00050713          	mv	a4,a0
80007274:	000017b7          	lui	a5,0x1
80007278:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
8000727c:	00f70e63          	beq	a4,a5,80007298 <API_NI_Handler+0x98>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:489 (discriminator 1)
80007280:	500007b7          	lui	a5,0x50000
80007284:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007288:	d15f90ef          	jal	ra,80000f9c <HW_get_32bit_reg>
8000728c:	00050713          	mv	a4,a0
80007290:	02200793          	li	a5,34
80007294:	72f71463          	bne	a4,a5,800079bc <API_NI_Handler+0x7bc>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:490
            prints("RX interruption catched\n");
80007298:	800087b7          	lui	a5,0x80008
8000729c:	45878513          	addi	a0,a5,1112 # 80008458 <__stack_top+0xfffc5258>
800072a0:	c61fe0ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:491
            service = incommingPacket.service;
800072a4:	800227b7          	lui	a5,0x80022
800072a8:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
800072ac:	0087a783          	lw	a5,8(a5)
800072b0:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:492
            incommingPacket.service = SOLVED;
800072b4:	800227b7          	lui	a5,0x80022
800072b8:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
800072bc:	00010737          	lui	a4,0x10
800072c0:	fff70713          	addi	a4,a4,-1 # ffff <HEAP_SIZE-0x1>
800072c4:	00e7a423          	sw	a4,8(a5)
800072c8:	fe842703          	lw	a4,-24(s0)
800072cc:	05500793          	li	a5,85
800072d0:	60f70c63          	beq	a4,a5,800078e8 <API_NI_Handler+0x6e8>
800072d4:	fe842703          	lw	a4,-24(s0)
800072d8:	05500793          	li	a5,85
800072dc:	06e7e063          	bltu	a5,a4,8000733c <API_NI_Handler+0x13c>
800072e0:	fe842703          	lw	a4,-24(s0)
800072e4:	02100793          	li	a5,33
800072e8:	58f70263          	beq	a4,a5,8000786c <API_NI_Handler+0x66c>
800072ec:	fe842703          	lw	a4,-24(s0)
800072f0:	02100793          	li	a5,33
800072f4:	02e7e063          	bltu	a5,a4,80007314 <API_NI_Handler+0x114>
800072f8:	fe842703          	lw	a4,-24(s0)
800072fc:	01000793          	li	a5,16
80007300:	42f70263          	beq	a4,a5,80007724 <API_NI_Handler+0x524>
80007304:	fe842703          	lw	a4,-24(s0)
80007308:	02000793          	li	a5,32
8000730c:	4ef70263          	beq	a4,a5,800077f0 <API_NI_Handler+0x5f0>
80007310:	6740006f          	j	80007984 <API_NI_Handler+0x784>
80007314:	fe842703          	lw	a4,-24(s0)
80007318:	03300793          	li	a5,51
8000731c:	22f70c63          	beq	a4,a5,80007554 <API_NI_Handler+0x354>
80007320:	fe842703          	lw	a4,-24(s0)
80007324:	03500793          	li	a5,53
80007328:	26f70063          	beq	a4,a5,80007588 <API_NI_Handler+0x388>
8000732c:	fe842703          	lw	a4,-24(s0)
80007330:	03000793          	li	a5,48
80007334:	0af70463          	beq	a4,a5,800073dc <API_NI_Handler+0x1dc>
80007338:	64c0006f          	j	80007984 <API_NI_Handler+0x784>
8000733c:	fe842703          	lw	a4,-24(s0)
80007340:	40000793          	li	a5,1024
80007344:	26f70c63          	beq	a4,a5,800075bc <API_NI_Handler+0x3bc>
80007348:	fe842703          	lw	a4,-24(s0)
8000734c:	40000793          	li	a5,1024
80007350:	02e7e063          	bltu	a5,a4,80007370 <API_NI_Handler+0x170>
80007354:	fe842703          	lw	a4,-24(s0)
80007358:	05600793          	li	a5,86
8000735c:	5cf70263          	beq	a4,a5,80007920 <API_NI_Handler+0x720>
80007360:	fe842703          	lw	a4,-24(s0)
80007364:	20000793          	li	a5,512
80007368:	02f70a63          	beq	a4,a5,8000739c <API_NI_Handler+0x19c>
8000736c:	6180006f          	j	80007984 <API_NI_Handler+0x784>
80007370:	fe842703          	lw	a4,-24(s0)
80007374:	50000793          	li	a5,1280
80007378:	14f70463          	beq	a4,a5,800074c0 <API_NI_Handler+0x2c0>
8000737c:	fe842703          	lw	a4,-24(s0)
80007380:	000107b7          	lui	a5,0x10
80007384:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80007388:	60f70e63          	beq	a4,a5,800079a4 <API_NI_Handler+0x7a4>
8000738c:	fe842703          	lw	a4,-24(s0)
80007390:	40100793          	li	a5,1025
80007394:	2af70463          	beq	a4,a5,8000763c <API_NI_Handler+0x43c>
80007398:	5ec0006f          	j	80007984 <API_NI_Handler+0x784>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:496
            switch (service){
                case REPOSITORY_APP_INFO: // When the repository informs the GM that exist a new Application available:
                    //prints("REPOSITORY_APP_INFO\n");
                    API_AddApplication(incommingPacket.application_id,
8000739c:	800227b7          	lui	a5,0x80022
800073a0:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
800073a4:	00c7a703          	lw	a4,12(a5)
800073a8:	800227b7          	lui	a5,0x80022
800073ac:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
800073b0:	0107a583          	lw	a1,16(a5)
800073b4:	800227b7          	lui	a5,0x80022
800073b8:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
800073bc:	0147a603          	lw	a2,20(a5)
800073c0:	800227b7          	lui	a5,0x80022
800073c4:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
800073c8:	0187a783          	lw	a5,24(a5)
800073cc:	00078693          	mv	a3,a5
800073d0:	00070513          	mv	a0,a4
800073d4:	cd9fb0ef          	jal	ra,800030ac <API_AddApplication>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:500
                                    incommingPacket.aplication_period, 
                                    incommingPacket.application_executions, 
                                    incommingPacket.application_n_tasks);
                    break;
800073d8:	5d00006f          	j	800079a8 <API_NI_Handler+0x7a8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:503
                
                case TASK_ALLOCATION_SEND: // When the GM asks one Slave to allocate one task
                    prints("TASK_ALLOCATION_SEND\n");
800073dc:	800087b7          	lui	a5,0x80008
800073e0:	47478513          	addi	a0,a5,1140 # 80008474 <__stack_top+0xfffc5274>
800073e4:	b1dfe0ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:504
                    aux = API_TaskAllocation(incommingPacket.task_id,
800073e8:	800227b7          	lui	a5,0x80022
800073ec:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
800073f0:	00c7a503          	lw	a0,12(a5)
800073f4:	800227b7          	lui	a5,0x80022
800073f8:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
800073fc:	0107a583          	lw	a1,16(a5)
80007400:	800227b7          	lui	a5,0x80022
80007404:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
80007408:	0147a603          	lw	a2,20(a5)
8000740c:	800227b7          	lui	a5,0x80022
80007410:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
80007414:	0187a683          	lw	a3,24(a5)
80007418:	800227b7          	lui	a5,0x80022
8000741c:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
80007420:	01c7a783          	lw	a5,28(a5)
80007424:	00078713          	mv	a4,a5
80007428:	b90fd0ef          	jal	ra,800047b8 <API_TaskAllocation>
8000742c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:509
                                            incommingPacket.task_txt_size,
                                            incommingPacket.task_bss_size,
                                            incommingPacket.task_start_point,
                                            incommingPacket.task_app_id);
                    printsv("Task slot: ", aux);
80007430:	fec42783          	lw	a5,-20(s0)
80007434:	00078593          	mv	a1,a5
80007438:	800087b7          	lui	a5,0x80008
8000743c:	48c78513          	addi	a0,a5,1164 # 8000848c <__stack_top+0xfffc528c>
80007440:	b6dfe0ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:510
                    printsv("Task slot TaskAddr: ", TaskList[aux].taskAddr);
80007444:	800237b7          	lui	a5,0x80023
80007448:	fec42703          	lw	a4,-20(s0)
8000744c:	ed478693          	addi	a3,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80007450:	00070793          	mv	a5,a4
80007454:	00579793          	slli	a5,a5,0x5
80007458:	00e787b3          	add	a5,a5,a4
8000745c:	00279793          	slli	a5,a5,0x2
80007460:	00f687b3          	add	a5,a3,a5
80007464:	0287a783          	lw	a5,40(a5)
80007468:	00078593          	mv	a1,a5
8000746c:	800087b7          	lui	a5,0x80008
80007470:	49878513          	addi	a0,a5,1176 # 80008498 <__stack_top+0xfffc5298>
80007474:	b39fe0ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:512
                    // Informs the NI were to write the application
                    HW_set_32bit_reg(NI_RX, TaskList[aux].taskAddr);
80007478:	800237b7          	lui	a5,0x80023
8000747c:	fec42703          	lw	a4,-20(s0)
80007480:	ed478693          	addi	a3,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80007484:	00070793          	mv	a5,a4
80007488:	00579793          	slli	a5,a5,0x5
8000748c:	00e787b3          	add	a5,a5,a4
80007490:	00279793          	slli	a5,a5,0x2
80007494:	00f687b3          	add	a5,a3,a5
80007498:	0287a783          	lw	a5,40(a5)
8000749c:	00078593          	mv	a1,a5
800074a0:	500007b7          	lui	a5,0x50000
800074a4:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800074a8:	aedf90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:513
                    incommingPacket.service = TASK_ALLOCATION_FINISHED;
800074ac:	800227b7          	lui	a5,0x80022
800074b0:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
800074b4:	03300713          	li	a4,51
800074b8:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:514
                    break;
800074bc:	4ec0006f          	j	800079a8 <API_NI_Handler+0x7a8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:517
                
                case TASK_FINISH:
                    printsvsv("FINISHED: Task ", incommingPacket.task_id, "from application ", incommingPacket.task_app_id);
800074c0:	800227b7          	lui	a5,0x80022
800074c4:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
800074c8:	00c7a783          	lw	a5,12(a5)
800074cc:	00078713          	mv	a4,a5
800074d0:	800227b7          	lui	a5,0x80022
800074d4:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
800074d8:	01c7a783          	lw	a5,28(a5)
800074dc:	00078693          	mv	a3,a5
800074e0:	800087b7          	lui	a5,0x80008
800074e4:	4b078613          	addi	a2,a5,1200 # 800084b0 <__stack_top+0xfffc52b0>
800074e8:	00070593          	mv	a1,a4
800074ec:	800087b7          	lui	a5,0x80008
800074f0:	4c478513          	addi	a0,a5,1220 # 800084c4 <__stack_top+0xfffc52c4>
800074f4:	b01fe0ef          	jal	ra,80005ff4 <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:518
                    API_ClearTaskSlotFromTile(incommingPacket.task_dest_addr, incommingPacket.task_app_id, incommingPacket.task_id);
800074f8:	800227b7          	lui	a5,0x80022
800074fc:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
80007500:	0307a703          	lw	a4,48(a5)
80007504:	800227b7          	lui	a5,0x80022
80007508:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
8000750c:	01c7a683          	lw	a3,28(a5)
80007510:	800227b7          	lui	a5,0x80022
80007514:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
80007518:	00c7a783          	lw	a5,12(a5)
8000751c:	00078613          	mv	a2,a5
80007520:	00068593          	mv	a1,a3
80007524:	00070513          	mv	a0,a4
80007528:	8e5fc0ef          	jal	ra,80003e0c <API_ClearTaskSlotFromTile>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:519
                    API_DealocateTask(incommingPacket.task_id, incommingPacket.task_app_id);
8000752c:	800227b7          	lui	a5,0x80022
80007530:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
80007534:	00c7a703          	lw	a4,12(a5)
80007538:	800227b7          	lui	a5,0x80022
8000753c:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
80007540:	01c7a783          	lw	a5,28(a5)
80007544:	00078593          	mv	a1,a5
80007548:	00070513          	mv	a0,a4
8000754c:	ad0fc0ef          	jal	ra,8000381c <API_DealocateTask>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:520
                    break;
80007550:	4580006f          	j	800079a8 <API_NI_Handler+0x7a8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:523

                case TASK_ALLOCATION_FINISHED:
                    prints("TASK_ALLOCATION_FINISHED\n");
80007554:	800087b7          	lui	a5,0x80008
80007558:	4d478513          	addi	a0,a5,1236 # 800084d4 <__stack_top+0xfffc52d4>
8000755c:	9a5fe0ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:524
                    API_AckTaskAllocation(incommingPacket.task_id, incommingPacket.task_app_id);
80007560:	800227b7          	lui	a5,0x80022
80007564:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
80007568:	00c7a703          	lw	a4,12(a5)
8000756c:	800227b7          	lui	a5,0x80022
80007570:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
80007574:	01c7a783          	lw	a5,28(a5)
80007578:	00078593          	mv	a1,a5
8000757c:	00070513          	mv	a0,a4
80007580:	a00ff0ef          	jal	ra,80006780 <API_AckTaskAllocation>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:525
                    break;
80007584:	4240006f          	j	800079a8 <API_NI_Handler+0x7a8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:528

                case TASK_ALLOCATION_SUCCESS:
                    prints("TASK_ALLOCATION_SUCCESS\n");
80007588:	800087b7          	lui	a5,0x80008
8000758c:	4f078513          	addi	a0,a5,1264 # 800084f0 <__stack_top+0xfffc52f0>
80007590:	971fe0ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:530
                    //printi(incommingPacket.task_id);
                    API_TaskAllocated(incommingPacket.task_id, incommingPacket.task_app_id);
80007594:	800227b7          	lui	a5,0x80022
80007598:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
8000759c:	00c7a703          	lw	a4,12(a5)
800075a0:	800227b7          	lui	a5,0x80022
800075a4:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
800075a8:	01c7a783          	lw	a5,28(a5)
800075ac:	00078593          	mv	a1,a5
800075b0:	00070513          	mv	a0,a4
800075b4:	c31fc0ef          	jal	ra,800041e4 <API_TaskAllocated>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:531
                    break;
800075b8:	3f00006f          	j	800079a8 <API_NI_Handler+0x7a8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:534

                case TASK_START:
                    prints("Chegou um TASK_START!\n");
800075bc:	800087b7          	lui	a5,0x80008
800075c0:	50c78513          	addi	a0,a5,1292 # 8000850c <__stack_top+0xfffc530c>
800075c4:	93dfe0ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:535
                    aux = API_GetTaskSlot(incommingPacket.task_id, incommingPacket.task_app_id);
800075c8:	800227b7          	lui	a5,0x80022
800075cc:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
800075d0:	00c7a703          	lw	a4,12(a5)
800075d4:	800227b7          	lui	a5,0x80022
800075d8:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
800075dc:	01c7a783          	lw	a5,28(a5)
800075e0:	00078593          	mv	a1,a5
800075e4:	00070513          	mv	a0,a4
800075e8:	ca8fd0ef          	jal	ra,80004a90 <API_GetTaskSlot>
800075ec:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:537
                    // Informs the NI were to write the application
                    HW_set_32bit_reg(NI_RX, (unsigned int)&TaskList[aux].appNumTasks);
800075f0:	fec42703          	lw	a4,-20(s0)
800075f4:	00070793          	mv	a5,a4
800075f8:	00579793          	slli	a5,a5,0x5
800075fc:	00e787b3          	add	a5,a5,a4
80007600:	00279793          	slli	a5,a5,0x2
80007604:	05078713          	addi	a4,a5,80
80007608:	800237b7          	lui	a5,0x80023
8000760c:	ed478793          	addi	a5,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80007610:	00f707b3          	add	a5,a4,a5
80007614:	00878793          	addi	a5,a5,8
80007618:	00078593          	mv	a1,a5
8000761c:	500007b7          	lui	a5,0x50000
80007620:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007624:	971f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:538
                    incommingPacket.service = TASK_RUN;
80007628:	800227b7          	lui	a5,0x80022
8000762c:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
80007630:	40100713          	li	a4,1025
80007634:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:539
                    break;
80007638:	3700006f          	j	800079a8 <API_NI_Handler+0x7a8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:542
                
                case TASK_RUN:
                    prints("Chegou um TASK_RUN!\n");
8000763c:	800087b7          	lui	a5,0x80008
80007640:	52478513          	addi	a0,a5,1316 # 80008524 <__stack_top+0xfffc5324>
80007644:	8bdfe0ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:543
                    aux = API_GetTaskSlot(incommingPacket.task_id, incommingPacket.task_app_id);
80007648:	800227b7          	lui	a5,0x80022
8000764c:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
80007650:	00c7a703          	lw	a4,12(a5)
80007654:	800227b7          	lui	a5,0x80022
80007658:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
8000765c:	01c7a783          	lw	a5,28(a5)
80007660:	00078593          	mv	a1,a5
80007664:	00070513          	mv	a0,a4
80007668:	c28fd0ef          	jal	ra,80004a90 <API_GetTaskSlot>
8000766c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:544
                    TaskList[aux].status = TASK_SLOT_READY;
80007670:	800236b7          	lui	a3,0x80023
80007674:	fec42703          	lw	a4,-20(s0)
80007678:	00070793          	mv	a5,a4
8000767c:	00579793          	slli	a5,a5,0x5
80007680:	00e787b3          	add	a5,a5,a4
80007684:	00279793          	slli	a5,a5,0x2
80007688:	ed468713          	addi	a4,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
8000768c:	00e787b3          	add	a5,a5,a4
80007690:	00300713          	li	a4,3
80007694:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:545
                    API_setFreqScale(1000);
80007698:	3e800513          	li	a0,1000
8000769c:	d8dfd0ef          	jal	ra,80005428 <API_setFreqScale>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:546
                    printsvsv("Starting Task ", TaskList[aux].TaskID, " from app ", TaskList[aux].AppID);
800076a0:	800236b7          	lui	a3,0x80023
800076a4:	fec42703          	lw	a4,-20(s0)
800076a8:	00070793          	mv	a5,a4
800076ac:	00579793          	slli	a5,a5,0x5
800076b0:	00e787b3          	add	a5,a5,a4
800076b4:	00279793          	slli	a5,a5,0x2
800076b8:	ed468713          	addi	a4,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
800076bc:	00e787b3          	add	a5,a5,a4
800076c0:	0107a783          	lw	a5,16(a5)
800076c4:	00078593          	mv	a1,a5
800076c8:	800237b7          	lui	a5,0x80023
800076cc:	fec42703          	lw	a4,-20(s0)
800076d0:	ed478693          	addi	a3,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
800076d4:	00070793          	mv	a5,a4
800076d8:	00579793          	slli	a5,a5,0x5
800076dc:	00e787b3          	add	a5,a5,a4
800076e0:	00279793          	slli	a5,a5,0x2
800076e4:	00f687b3          	add	a5,a3,a5
800076e8:	0147a783          	lw	a5,20(a5)
800076ec:	00078693          	mv	a3,a5
800076f0:	800087b7          	lui	a5,0x80008
800076f4:	53c78613          	addi	a2,a5,1340 # 8000853c <__stack_top+0xfffc533c>
800076f8:	800087b7          	lui	a5,0x80008
800076fc:	54878513          	addi	a0,a5,1352 # 80008548 <__stack_top+0xfffc5348>
80007700:	8f5fe0ef          	jal	ra,80005ff4 <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:547
                    printsv("taskSlot run: ", aux);
80007704:	fec42783          	lw	a5,-20(s0)
80007708:	00078593          	mv	a1,a5
8000770c:	800087b7          	lui	a5,0x80008
80007710:	55878513          	addi	a0,a5,1368 # 80008558 <__stack_top+0xfffc5358>
80007714:	899fe0ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:548
                    API_TaskStart(aux);
80007718:	fec42503          	lw	a0,-20(s0)
8000771c:	c58fd0ef          	jal	ra,80004b74 <API_TaskStart>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:558
                    //         API_setFreqScale(1000);
                    //         printsvsv("Starting Task ", TaskList[aux].TaskID, " from app ", TaskList[aux].AppID);
                    //         API_TaskStart(aux);
                    //     }
                    // }
                    break;
80007720:	2880006f          	j	800079a8 <API_NI_Handler+0x7a8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:562

                case MESSAGE_REQUEST:
                    // check the pipe
                    printsvsv("Chegou um message request! App: ", incommingPacket.task_app_id, "Task: ", incommingPacket.task_id);
80007724:	800227b7          	lui	a5,0x80022
80007728:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
8000772c:	01c7a783          	lw	a5,28(a5)
80007730:	00078713          	mv	a4,a5
80007734:	800227b7          	lui	a5,0x80022
80007738:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
8000773c:	00c7a783          	lw	a5,12(a5)
80007740:	00078693          	mv	a3,a5
80007744:	800087b7          	lui	a5,0x80008
80007748:	56878613          	addi	a2,a5,1384 # 80008568 <__stack_top+0xfffc5368>
8000774c:	00070593          	mv	a1,a4
80007750:	800087b7          	lui	a5,0x80008
80007754:	57078513          	addi	a0,a5,1392 # 80008570 <__stack_top+0xfffc5370>
80007758:	89dfe0ef          	jal	ra,80005ff4 <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:563
                    aux = API_CheckMessagePipe(incommingPacket.task_id, incommingPacket.task_app_id);
8000775c:	800227b7          	lui	a5,0x80022
80007760:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
80007764:	00c7a703          	lw	a4,12(a5)
80007768:	800227b7          	lui	a5,0x80022
8000776c:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
80007770:	01c7a783          	lw	a5,28(a5)
80007774:	00078593          	mv	a1,a5
80007778:	00070513          	mv	a0,a4
8000777c:	8d5ff0ef          	jal	ra,80007050 <API_CheckMessagePipe>
80007780:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:564
                    if (aux == ERRO){
80007784:	fec42703          	lw	a4,-20(s0)
80007788:	fff00793          	li	a5,-1
8000778c:	04f71463          	bne	a4,a5,800077d4 <API_NI_Handler+0x5d4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:566
                        // register an messagerequest
                        prints("Mensagem não encontrada, adicionando ao PendingReq!\n");
80007790:	800087b7          	lui	a5,0x80008
80007794:	59478513          	addi	a0,a5,1428 # 80008594 <__stack_top+0xfffc5394>
80007798:	f68fe0ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:567
                        API_AddPendingReq(incommingPacket.task_id, incommingPacket.task_app_id, incommingPacket.producer_task_id);
8000779c:	800227b7          	lui	a5,0x80022
800077a0:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
800077a4:	00c7a703          	lw	a4,12(a5)
800077a8:	800227b7          	lui	a5,0x80022
800077ac:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
800077b0:	01c7a683          	lw	a3,28(a5)
800077b4:	800227b7          	lui	a5,0x80022
800077b8:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
800077bc:	0147a783          	lw	a5,20(a5)
800077c0:	00078613          	mv	a2,a5
800077c4:	00068593          	mv	a1,a3
800077c8:	00070513          	mv	a0,a4
800077cc:	9c1ff0ef          	jal	ra,8000718c <API_AddPendingReq>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:573
                    } else {
                        prints("Mensagem encontrada no pipe!\n");
                        API_PushSendQueue(MESSAGE, aux);
                        // API_Try2Send();
                    }
                    break;
800077d0:	1d80006f          	j	800079a8 <API_NI_Handler+0x7a8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:569
                        prints("Mensagem encontrada no pipe!\n");
800077d4:	800087b7          	lui	a5,0x80008
800077d8:	5cc78513          	addi	a0,a5,1484 # 800085cc <__stack_top+0xfffc53cc>
800077dc:	f24fe0ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:570
                        API_PushSendQueue(MESSAGE, aux);
800077e0:	fec42583          	lw	a1,-20(s0)
800077e4:	20200537          	lui	a0,0x20200
800077e8:	c21fe0ef          	jal	ra,80006408 <API_PushSendQueue>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:573
                    break;
800077ec:	1bc0006f          	j	800079a8 <API_NI_Handler+0x7a8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:576
                
                case MESSAGE_DELIVERY:
                    prints("Tem uma mensagem chegando...\n");
800077f0:	800087b7          	lui	a5,0x80008
800077f4:	5ec78513          	addi	a0,a5,1516 # 800085ec <__stack_top+0xfffc53ec>
800077f8:	f08fe0ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:577
                    aux = API_GetTaskSlot(incommingPacket.destination_task, incommingPacket.application_id);
800077fc:	800227b7          	lui	a5,0x80022
80007800:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
80007804:	0147a703          	lw	a4,20(a5)
80007808:	800227b7          	lui	a5,0x80022
8000780c:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
80007810:	00c7a783          	lw	a5,12(a5)
80007814:	00078593          	mv	a1,a5
80007818:	00070513          	mv	a0,a4
8000781c:	a74fd0ef          	jal	ra,80004a90 <API_GetTaskSlot>
80007820:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:579
                    //printsv("MESSAGE_DELIVERY addr: ", TaskList[aux].MsgToReceive);
                    HW_set_32bit_reg(NI_RX, TaskList[aux].MsgToReceive);
80007824:	800236b7          	lui	a3,0x80023
80007828:	fec42703          	lw	a4,-20(s0)
8000782c:	00070793          	mv	a5,a4
80007830:	00579793          	slli	a5,a5,0x5
80007834:	00e787b3          	add	a5,a5,a4
80007838:	00279793          	slli	a5,a5,0x2
8000783c:	ed468713          	addi	a4,a3,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
80007840:	00e787b3          	add	a5,a5,a4
80007844:	0207a783          	lw	a5,32(a5)
80007848:	00078593          	mv	a1,a5
8000784c:	500007b7          	lui	a5,0x50000
80007850:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007854:	f40f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:580
                    incommingPacket.service = MESSAGE_DELIVERY_FINISH;
80007858:	800227b7          	lui	a5,0x80022
8000785c:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
80007860:	02100713          	li	a4,33
80007864:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:582
                    //prints("done...\n----------\n");
                    break;
80007868:	1400006f          	j	800079a8 <API_NI_Handler+0x7a8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:586
                
                case MESSAGE_DELIVERY_FINISH:
                    //prints("Terminou de entregar a mensagem!!\n");
                    aux = API_GetTaskSlot(incommingPacket.destination_task, incommingPacket.application_id);
8000786c:	800227b7          	lui	a5,0x80022
80007870:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
80007874:	0147a703          	lw	a4,20(a5)
80007878:	800227b7          	lui	a5,0x80022
8000787c:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
80007880:	00c7a783          	lw	a5,12(a5)
80007884:	00078593          	mv	a1,a5
80007888:	00070513          	mv	a0,a4
8000788c:	a04fd0ef          	jal	ra,80004a90 <API_GetTaskSlot>
80007890:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:587
                    TaskList[aux].waitingMsg = FALSE;
80007894:	800237b7          	lui	a5,0x80023
80007898:	fec42703          	lw	a4,-20(s0)
8000789c:	ed478693          	addi	a3,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
800078a0:	00070793          	mv	a5,a4
800078a4:	00579793          	slli	a5,a5,0x5
800078a8:	00e787b3          	add	a5,a5,a4
800078ac:	00279793          	slli	a5,a5,0x2
800078b0:	00f687b3          	add	a5,a3,a5
800078b4:	0007ae23          	sw	zero,28(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:588
                    vTaskResume(TaskList[aux].TaskHandler);
800078b8:	800237b7          	lui	a5,0x80023
800078bc:	fec42703          	lw	a4,-20(s0)
800078c0:	ed478693          	addi	a3,a5,-300 # 80022ed4 <__stack_top+0xfffdfcd4>
800078c4:	00070793          	mv	a5,a4
800078c8:	00579793          	slli	a5,a5,0x5
800078cc:	00e787b3          	add	a5,a5,a4
800078d0:	00279793          	slli	a5,a5,0x2
800078d4:	00f687b3          	add	a5,a3,a5
800078d8:	0187a783          	lw	a5,24(a5)
800078dc:	00078513          	mv	a0,a5
800078e0:	b3dfa0ef          	jal	ra,8000241c <vTaskResume>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:589
                    break;
800078e4:	0c40006f          	j	800079a8 <API_NI_Handler+0x7a8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:592

                case TEMPERATURE_PACKET:
                    prints("Recebendo pacote de temperatura");
800078e8:	800087b7          	lui	a5,0x80008
800078ec:	60c78513          	addi	a0,a5,1548 # 8000860c <__stack_top+0xfffc540c>
800078f0:	e10fe0ef          	jal	ra,80005f00 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:593
                    HW_set_32bit_reg(NI_RX, (unsigned int)&SystemTemperature);
800078f4:	800237b7          	lui	a5,0x80023
800078f8:	e4078793          	addi	a5,a5,-448 # 80022e40 <__stack_top+0xfffdfc40>
800078fc:	00078593          	mv	a1,a5
80007900:	500007b7          	lui	a5,0x50000
80007904:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007908:	e8cf90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:594
                    incommingPacket.service = FINISH_TEMPERATURE_PACKET;
8000790c:	800227b7          	lui	a5,0x80022
80007910:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
80007914:	05600713          	li	a4,86
80007918:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:595
                    break;
8000791c:	08c0006f          	j	800079a8 <API_NI_Handler+0x7a8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:598
                
                case FINISH_TEMPERATURE_PACKET:
                    temperatureUpdated = 1;
80007920:	800237b7          	lui	a5,0x80023
80007924:	00100713          	li	a4,1
80007928:	e2e7ae23          	sw	a4,-452(a5) # 80022e3c <__stack_top+0xfffdfc3c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:599
                    for(aux = 0; aux < DIM_X*DIM_Y; aux++){ 
8000792c:	fe042623          	sw	zero,-20(s0)
80007930:	0440006f          	j	80007974 <API_NI_Handler+0x774>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:600 (discriminator 3)
                        printsvsv("pe", aux, "temp: ", SystemTemperature[aux]);
80007934:	fec42583          	lw	a1,-20(s0)
80007938:	800237b7          	lui	a5,0x80023
8000793c:	fec42703          	lw	a4,-20(s0)
80007940:	00271713          	slli	a4,a4,0x2
80007944:	e4078793          	addi	a5,a5,-448 # 80022e40 <__stack_top+0xfffdfc40>
80007948:	00f707b3          	add	a5,a4,a5
8000794c:	0007a783          	lw	a5,0(a5)
80007950:	00078693          	mv	a3,a5
80007954:	800087b7          	lui	a5,0x80008
80007958:	62c78613          	addi	a2,a5,1580 # 8000862c <__stack_top+0xfffc542c>
8000795c:	800087b7          	lui	a5,0x80008
80007960:	63478513          	addi	a0,a5,1588 # 80008634 <__stack_top+0xfffc5434>
80007964:	e90fe0ef          	jal	ra,80005ff4 <printsvsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:599 (discriminator 3)
                    for(aux = 0; aux < DIM_X*DIM_Y; aux++){ 
80007968:	fec42783          	lw	a5,-20(s0)
8000796c:	00178793          	addi	a5,a5,1
80007970:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:599 (discriminator 1)
80007974:	fec42703          	lw	a4,-20(s0)
80007978:	00800793          	li	a5,8
8000797c:	fae7fce3          	bleu	a4,a5,80007934 <API_NI_Handler+0x734>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:602
                    }
                    break;
80007980:	0280006f          	j	800079a8 <API_NI_Handler+0x7a8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:608

                case SOLVED:
                    break;
                    
                default:
                    printsv("ERROR External_2_IRQHandler Unknown-Service ", incommingPacket.service);
80007984:	800227b7          	lui	a5,0x80022
80007988:	ad078793          	addi	a5,a5,-1328 # 80021ad0 <__stack_top+0xfffde8d0>
8000798c:	0087a783          	lw	a5,8(a5)
80007990:	00078593          	mv	a1,a5
80007994:	800087b7          	lui	a5,0x80008
80007998:	63878513          	addi	a0,a5,1592 # 80008638 <__stack_top+0xfffc5438>
8000799c:	e10fe0ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:609
                    break;
800079a0:	0080006f          	j	800079a8 <API_NI_Handler+0x7a8>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:605
                    break;
800079a4:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:611
            }
            HW_set_32bit_reg(NI_RX, DONE);
800079a8:	800057b7          	lui	a5,0x80005
800079ac:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffc2355>
800079b0:	500007b7          	lui	a5,0x50000
800079b4:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800079b8:	ddcf90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:614
        }
        
    } while( HW_get_32bit_reg(NI_RX) == NI_STATUS_INTER || HW_get_32bit_reg(NI_RX) == NI_STATUS_WAITING || HW_get_32bit_reg(NI_TX) == NI_STATUS_INTER);
800079bc:	500007b7          	lui	a5,0x50000
800079c0:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800079c4:	dd8f90ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800079c8:	00050713          	mv	a4,a0
800079cc:	000017b7          	lui	a5,0x1
800079d0:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
800079d4:	84f700e3          	beq	a4,a5,80007214 <API_NI_Handler+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:614 (discriminator 1)
800079d8:	500007b7          	lui	a5,0x50000
800079dc:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800079e0:	dbcf90ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800079e4:	00050713          	mv	a4,a0
800079e8:	02200793          	li	a5,34
800079ec:	82f704e3          	beq	a4,a5,80007214 <API_NI_Handler+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:614 (discriminator 2)
800079f0:	500007b7          	lui	a5,0x50000
800079f4:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
800079f8:	da4f90ef          	jal	ra,80000f9c <HW_get_32bit_reg>
800079fc:	00050713          	mv	a4,a0
80007a00:	000017b7          	lui	a5,0x1
80007a04:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
80007a08:	80f706e3          	beq	a4,a5,80007214 <API_NI_Handler+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:617


    if (HW_get_32bit_reg(NI_TIMER) == NI_STATUS_INTER){
80007a0c:	500007b7          	lui	a5,0x50000
80007a10:	01078513          	addi	a0,a5,16 # 50000010 <RAM_SIZE+0x4ff80010>
80007a14:	d88f90ef          	jal	ra,80000f9c <HW_get_32bit_reg>
80007a18:	00050713          	mv	a4,a0
80007a1c:	000017b7          	lui	a5,0x1
80007a20:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
80007a24:	00f71e63          	bne	a4,a5,80007a40 <API_NI_Handler+0x840>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:618
        powerEstimation();
80007a28:	f81fd0ef          	jal	ra,800059a8 <powerEstimation>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:619
        HW_set_32bit_reg(NI_TIMER, DONE);
80007a2c:	800057b7          	lui	a5,0x80005
80007a30:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffc2355>
80007a34:	500007b7          	lui	a5,0x50000
80007a38:	01078513          	addi	a0,a5,16 # 50000010 <RAM_SIZE+0x4ff80010>
80007a3c:	d58f90ef          	jal	ra,80000f94 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:621
    }
    vTaskExitCritical();
80007a40:	d08fb0ef          	jal	ra,80002f48 <vTaskExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:623
    
    return;
80007a44:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../FreeRTOS/chronos.c:624
80007a48:	01c12083          	lw	ra,28(sp)
80007a4c:	01812403          	lw	s0,24(sp)
80007a50:	02010113          	addi	sp,sp,32
80007a54:	00008067          	ret

80007a58 <PLIC_init>:
PLIC_init():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:124
{
80007a58:	fe010113          	addi	sp,sp,-32
80007a5c:	00812e23          	sw	s0,28(sp)
80007a60:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:126
    unsigned long hart_id = read_csr(mhartid);
80007a64:	f14027f3          	csrr	a5,mhartid
80007a68:	fef42423          	sw	a5,-24(s0)
80007a6c:	fe842783          	lw	a5,-24(s0)
80007a70:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
80007a74:	fe042623          	sw	zero,-20(s0)
80007a78:	03c0006f          	j	80007ab4 <PLIC_init+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:131 (discriminator 3)
        PLIC->TARGET_ENABLES[hart_id].ENABLES[inc] = 0;
80007a7c:	40000737          	lui	a4,0x40000
80007a80:	fe442783          	lw	a5,-28(s0)
80007a84:	00579693          	slli	a3,a5,0x5
80007a88:	fec42783          	lw	a5,-20(s0)
80007a8c:	00f686b3          	add	a3,a3,a5
80007a90:	000017b7          	lui	a5,0x1
80007a94:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80007a98:	00f687b3          	add	a5,a3,a5
80007a9c:	00279793          	slli	a5,a5,0x2
80007aa0:	00f707b3          	add	a5,a4,a5
80007aa4:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 3)
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
80007aa8:	fec42783          	lw	a5,-20(s0)
80007aac:	00178793          	addi	a5,a5,1
80007ab0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 1)
80007ab4:	fec42783          	lw	a5,-20(s0)
80007ab8:	fc0782e3          	beqz	a5,80007a7c <PLIC_init+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
80007abc:	fe042623          	sw	zero,-20(s0)
80007ac0:	0240006f          	j	80007ae4 <PLIC_init+0x8c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:139 (discriminator 3)
        PLIC->SOURCE_PRIORITY[inc] = 0;
80007ac4:	40000737          	lui	a4,0x40000
80007ac8:	fec42783          	lw	a5,-20(s0)
80007acc:	00279793          	slli	a5,a5,0x2
80007ad0:	00f707b3          	add	a5,a4,a5
80007ad4:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 3)
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
80007ad8:	fec42783          	lw	a5,-20(s0)
80007adc:	00178793          	addi	a5,a5,1
80007ae0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 1)
80007ae4:	fec42703          	lw	a4,-20(s0)
80007ae8:	01e00793          	li	a5,30
80007aec:	fce7fce3          	bleu	a4,a5,80007ac4 <PLIC_init+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:143
    PLIC->TARGET[hart_id].PRIORITY_THRESHOLD = 0;
80007af0:	40000737          	lui	a4,0x40000
80007af4:	fe442783          	lw	a5,-28(s0)
80007af8:	20078793          	addi	a5,a5,512
80007afc:	00c79793          	slli	a5,a5,0xc
80007b00:	00f707b3          	add	a5,a4,a5
80007b04:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:146
    set_csr(mie, MIP_MEIP);
80007b08:	000017b7          	lui	a5,0x1
80007b0c:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80007b10:	3047a7f3          	csrrs	a5,mie,a5
80007b14:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:147
}
80007b18:	00000013          	nop
80007b1c:	01c12403          	lw	s0,28(sp)
80007b20:	02010113          	addi	sp,sp,32
80007b24:	00008067          	ret

80007b28 <main>:
main():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:60
extern volatile unsigned int NI_IRCount;

/*-----------------------------------------------------------*/

int main( void )
{
80007b28:	fd010113          	addi	sp,sp,-48
80007b2c:	02112623          	sw	ra,44(sp)
80007b30:	02812423          	sw	s0,40(sp)
80007b34:	03010413          	addi	s0,sp,48
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:62
	char str[20];
    PLIC_init();
80007b38:	f21ff0ef          	jal	ra,80007a58 <PLIC_init>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:68

    /**************************************************************************
    * Initialize CoreUART with its base address, baud value, and line
    * configuration.
    *************************************************************************/
    UART_init(&g_uart, COREUARTAPB0_BASE_ADDR, BAUD_VALUE_115200,
80007b3c:	00100693          	li	a3,1
80007b40:	02c00613          	li	a2,44
80007b44:	700015b7          	lui	a1,0x70001
80007b48:	800237b7          	lui	a5,0x80023
80007b4c:	1f478513          	addi	a0,a5,500 # 800231f4 <__stack_top+0xfffdfff4>
80007b50:	d1cf90ef          	jal	ra,8000106c <UART_init>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:74
             (DATA_8_BITS | NO_PARITY) );
    
	/**************************************************************************
    * Initialize the Chronos platform stuff
    *************************************************************************/
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n Chronos platform initializing... \n" );
80007b54:	800087b7          	lui	a5,0x80008
80007b58:	68078593          	addi	a1,a5,1664 # 80008680 <__stack_top+0xfffc5480>
80007b5c:	800237b7          	lui	a5,0x80023
80007b60:	1f478513          	addi	a0,a5,500 # 800231f4 <__stack_top+0xfffdfff4>
80007b64:	ed4f90ef          	jal	ra,80001238 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:75
	Chronos_init();
80007b68:	aa4fe0ef          	jal	ra,80005e0c <Chronos_init>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:76
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This terminal belongs to the address: " );
80007b6c:	800087b7          	lui	a5,0x80008
80007b70:	6a878593          	addi	a1,a5,1704 # 800086a8 <__stack_top+0xfffc54a8>
80007b74:	800237b7          	lui	a5,0x80023
80007b78:	1f478513          	addi	a0,a5,500 # 800231f4 <__stack_top+0xfffdfff4>
80007b7c:	ebcf90ef          	jal	ra,80001238 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:77
	myItoa(ProcessorAddr, str, 16);
80007b80:	800237b7          	lui	a5,0x80023
80007b84:	1fc7a783          	lw	a5,508(a5) # 800231fc <__stack_top+0xfffdfffc>
80007b88:	00078713          	mv	a4,a5
80007b8c:	fdc40793          	addi	a5,s0,-36
80007b90:	01000613          	li	a2,16
80007b94:	00078593          	mv	a1,a5
80007b98:	00070513          	mv	a0,a4
80007b9c:	e8cfe0ef          	jal	ra,80006228 <myItoa>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:78
    UART_polled_tx_string( &g_uart, (const uint8_t *)str); UART_polled_tx_string( &g_uart, (const uint8_t *)"\n");
80007ba0:	fdc40793          	addi	a5,s0,-36
80007ba4:	00078593          	mv	a1,a5
80007ba8:	800237b7          	lui	a5,0x80023
80007bac:	1f478513          	addi	a0,a5,500 # 800231f4 <__stack_top+0xfffdfff4>
80007bb0:	e88f90ef          	jal	ra,80001238 <UART_polled_tx_string>
80007bb4:	800087b7          	lui	a5,0x80008
80007bb8:	6d478593          	addi	a1,a5,1748 # 800086d4 <__stack_top+0xfffc54d4>
80007bbc:	800237b7          	lui	a5,0x80023
80007bc0:	1f478513          	addi	a0,a5,500 # 800231f4 <__stack_top+0xfffdfff4>
80007bc4:	e74f90ef          	jal	ra,80001238 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:83
	
	//xTaskCreate( NI_TX_Handler, "TXHandler", 1024*4, NULL, (tskIDLE_PRIORITY + 1), NULL);
	//xTaskCreate( NI_RX_Handler, "RXHandler", 1024*3, NULL, (tskIDLE_PRIORITY + 1), NULL);

	if (ProcessorAddr == 0x0000){
80007bc8:	800237b7          	lui	a5,0x80023
80007bcc:	1fc7a783          	lw	a5,508(a5) # 800231fc <__stack_top+0xfffdfffc>
80007bd0:	04079663          	bnez	a5,80007c1c <main+0xf4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:84
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is the Global Master: \n" );
80007bd4:	800087b7          	lui	a5,0x80008
80007bd8:	6d878593          	addi	a1,a5,1752 # 800086d8 <__stack_top+0xfffc54d8>
80007bdc:	800237b7          	lui	a5,0x80023
80007be0:	1f478513          	addi	a0,a5,500 # 800231f4 <__stack_top+0xfffdfff4>
80007be4:	e54f90ef          	jal	ra,80001238 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:86
		/* Create the GlobalManager task */
		xTaskCreate( GlobalManagerTask, "GlobalMaster", 1024*6, NULL, (tskIDLE_PRIORITY + 1), NULL );
80007be8:	00000893          	li	a7,0
80007bec:	00000813          	li	a6,0
80007bf0:	00000793          	li	a5,0
80007bf4:	00100713          	li	a4,1
80007bf8:	00000693          	li	a3,0
80007bfc:	00002637          	lui	a2,0x2
80007c00:	80060613          	addi	a2,a2,-2048 # 1800 <HEAP_SIZE-0xe800>
80007c04:	800085b7          	lui	a1,0x80008
80007c08:	70458593          	addi	a1,a1,1796 # 80008704 <__stack_top+0xfffc5504>
80007c0c:	80008537          	lui	a0,0x80008
80007c10:	c7c50513          	addi	a0,a0,-900 # 80007c7c <__stack_top+0xfffc4a7c>
80007c14:	b04fa0ef          	jal	ra,80001f18 <xTaskGenericCreate>
80007c18:	0180006f          	j	80007c30 <main+0x108>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:88
	} else {
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is a Slave: \n" );
80007c1c:	800087b7          	lui	a5,0x80008
80007c20:	71478593          	addi	a1,a5,1812 # 80008714 <__stack_top+0xfffc5514>
80007c24:	800237b7          	lui	a5,0x80023
80007c28:	1f478513          	addi	a0,a5,500 # 800231f4 <__stack_top+0xfffdfff4>
80007c2c:	e0cf90ef          	jal	ra,80001238 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:96
		//xTaskCreate( vUartAliveTask, "Alive", 1024*3, NULL, (tskIDLE_PRIORITY + 1), NULL );
	}
	//xTaskCreate( NI_Handler, "Handler", 1024*6, NULL, (tskIDLE_PRIORITY + 2), NULL );

	/* Start the kernel.  From here on, only tasks and interrupts will run. */
	vTaskStartScheduler();
80007c30:	8d9fa0ef          	jal	ra,80002508 <vTaskStartScheduler>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:99

	/* Exit FreeRTOS */
	return 0;
80007c34:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:100
}
80007c38:	00078513          	mv	a0,a5
80007c3c:	02c12083          	lw	ra,44(sp)
80007c40:	02812403          	lw	s0,40(sp)
80007c44:	03010113          	addi	sp,sp,48
80007c48:	00008067          	ret

80007c4c <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:105

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
80007c4c:	ff010113          	addi	sp,sp,-16
80007c50:	00812623          	sw	s0,12(sp)
80007c54:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:116
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
80007c58:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:117 (discriminator 1)
	for( ;; );
80007c5c:	0000006f          	j	80007c5c <vApplicationMallocFailedHook+0x10>

80007c60 <vApplicationIdleHook>:
vApplicationIdleHook():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:122
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
80007c60:	ff010113          	addi	sp,sp,-16
80007c64:	00812623          	sw	s0,12(sp)
80007c68:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:132
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
80007c6c:	00000013          	nop
80007c70:	00c12403          	lw	s0,12(sp)
80007c74:	01010113          	addi	sp,sp,16
80007c78:	00008067          	ret

80007c7c <GlobalManagerTask>:
GlobalManagerTask():
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:183
// 	}
// }

/*-----------------------------------------------------------*/

static void GlobalManagerTask( void *pvParameters ){
80007c7c:	fc010113          	addi	sp,sp,-64
80007c80:	02112e23          	sw	ra,60(sp)
80007c84:	02812c23          	sw	s0,56(sp)
80007c88:	04010413          	addi	s0,sp,64
80007c8c:	fca42623          	sw	a0,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:189
	( void ) pvParameters;
	int tick;
	char str[20];

	// Initialize the priority vector with the pattern policy
	GeneratePatternMatrix();
80007c90:	80dfb0ef          	jal	ra,8000349c <GeneratePatternMatrix>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:192

	// Initialize the System Tiles Info
	API_TilesReset();
80007c94:	ee0fb0ef          	jal	ra,80003374 <API_TilesReset>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:195

	// Initialize the applications vector
    API_ApplicationsReset();
80007c98:	e7cfb0ef          	jal	ra,80003314 <API_ApplicationsReset>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:198

	// Informs the Repository that the GLOBALMASTER is ready to receive the application info
	API_RepositoryWakeUp();
80007c9c:	afcfb0ef          	jal	ra,80002f98 <API_RepositoryWakeUp>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:201

	for(;;){
		tick = xTaskGetTickCount();
80007ca0:	a81fa0ef          	jal	ra,80002720 <xTaskGetTickCount>
80007ca4:	00050793          	mv	a5,a0
80007ca8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:202
		myItoa(tick, str, 10);
80007cac:	fd840793          	addi	a5,s0,-40
80007cb0:	00a00613          	li	a2,10
80007cb4:	00078593          	mv	a1,a5
80007cb8:	fec42503          	lw	a0,-20(s0)
80007cbc:	d6cfe0ef          	jal	ra,80006228 <myItoa>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:203
		UART_polled_tx_string( &g_uart, (const uint8_t *)str);
80007cc0:	fd840793          	addi	a5,s0,-40
80007cc4:	00078593          	mv	a1,a5
80007cc8:	800237b7          	lui	a5,0x80023
80007ccc:	1f478513          	addi	a0,a5,500 # 800231f4 <__stack_top+0xfffdfff4>
80007cd0:	d68f90ef          	jal	ra,80001238 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:204
		printsv("GlobalMasterActive", tick);
80007cd4:	fec42583          	lw	a1,-20(s0)
80007cd8:	800087b7          	lui	a5,0x80008
80007cdc:	73478513          	addi	a0,a5,1844 # 80008734 <__stack_top+0xfffc5534>
80007ce0:	accfe0ef          	jal	ra,80005fac <printsv>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:205
		UART_polled_tx_string( &g_uart, (const uint8_t *)" GlobalMasterRoutine...\r\n" );
80007ce4:	800087b7          	lui	a5,0x80008
80007ce8:	74878593          	addi	a1,a5,1864 # 80008748 <__stack_top+0xfffc5548>
80007cec:	800237b7          	lui	a5,0x80023
80007cf0:	1f478513          	addi	a0,a5,500 # 800231f4 <__stack_top+0xfffdfff4>
80007cf4:	d44f90ef          	jal	ra,80001238 <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:208

		// Checks if there is some task to allocate...
		API_AllocateTasks(tick);
80007cf8:	fec42783          	lw	a5,-20(s0)
80007cfc:	00078513          	mv	a0,a5
80007d00:	845fb0ef          	jal	ra,80003544 <API_AllocateTasks>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:209
		if(API_SystemFinish){
80007d04:	9901a783          	lw	a5,-1648(gp) # 80008900 <API_SystemFinish>
80007d08:	00078c63          	beqz	a5,80007d20 <GlobalManagerTask+0xa4>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:210
			vTaskDelay(200); // to cool down the system
80007d0c:	0c800513          	li	a0,200
80007d10:	d00fa0ef          	jal	ra,80002210 <vTaskDelay>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:211
			_exit(0xfe10);
80007d14:	000107b7          	lui	a5,0x10
80007d18:	e1078513          	addi	a0,a5,-496 # fe10 <HEAP_SIZE-0x1f0>
80007d1c:	8c0f90ef          	jal	ra,80000ddc <_exit>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:214
		}
		else{
			vTaskDelay(1);
80007d20:	00100513          	li	a0,1
80007d24:	cecfa0ef          	jal	ra,80002210 <vTaskDelay>
/home/iacanaw/git_workspace/Chronos-RISCV6/FreeRTOS/Debug/../main.c:201
		tick = xTaskGetTickCount();
80007d28:	f79ff06f          	j	80007ca0 <GlobalManagerTask+0x24>

80007d2c <write>:
write():
80007d2c:	00001797          	auipc	a5,0x1
80007d30:	a5478793          	addi	a5,a5,-1452 # 80008780 <_impure_ptr>
80007d34:	00060693          	mv	a3,a2
80007d38:	00058613          	mv	a2,a1
80007d3c:	00050593          	mv	a1,a0
80007d40:	0007a503          	lw	a0,0(a5)
80007d44:	0040006f          	j	80007d48 <_write_r>

80007d48 <_write_r>:
_write_r():
80007d48:	ff010113          	addi	sp,sp,-16
80007d4c:	00812423          	sw	s0,8(sp)
80007d50:	00050413          	mv	s0,a0
80007d54:	00058513          	mv	a0,a1
80007d58:	00060593          	mv	a1,a2
80007d5c:	00068613          	mv	a2,a3
80007d60:	0001b797          	auipc	a5,0x1b
80007d64:	9207aa23          	sw	zero,-1740(a5) # 80022694 <errno>
80007d68:	00112623          	sw	ra,12(sp)
80007d6c:	940f90ef          	jal	ra,80000eac <_write>
80007d70:	fff00793          	li	a5,-1
80007d74:	00f51c63          	bne	a0,a5,80007d8c <_write_r+0x44>
80007d78:	0001b797          	auipc	a5,0x1b
80007d7c:	91c78793          	addi	a5,a5,-1764 # 80022694 <errno>
80007d80:	0007a783          	lw	a5,0(a5)
80007d84:	00078463          	beqz	a5,80007d8c <_write_r+0x44>
80007d88:	00f42023          	sw	a5,0(s0)
80007d8c:	00c12083          	lw	ra,12(sp)
80007d90:	00812403          	lw	s0,8(sp)
80007d94:	01010113          	addi	sp,sp,16
80007d98:	00008067          	ret
80007d9c:	0000                	unimp
80007d9e:	0000                	unimp
80007da0:	6568                	flw	fa0,76(a0)
80007da2:	6c6c                	flw	fa1,92(s0)
80007da4:	0000006f          	j	80007da4 <_write_r+0x5c>
80007da8:	6544                	flw	fs1,12(a0)
80007daa:	6574                	flw	fa3,76(a0)
80007dac:	69657463          	bleu	s6,a0,80008434 <loadStoreDyn+0x1e0>
80007db0:	7520                	flw	fs0,104(a0)
80007db2:	616d                	addi	sp,sp,240
80007db4:	6320                	flw	fs0,64(a4)
80007db6:	6168                	flw	fa0,68(a0)
80007db8:	616d                	addi	sp,sp,240
80007dba:	6164                	flw	fs1,68(a0)
80007dbc:	5420                	lw	s0,104(s0)
80007dbe:	5345                	li	t1,-15
80007dc0:	4554                	lw	a3,12(a0)
80007dc2:	6420                	flw	fs0,72(s0)
80007dc4:	2065                	jal	80007e6c <_write_r+0x124>
80007dc6:	74736973          	csrrsi	s2,0x747,6
80007dca:	6d65                	lui	s10,0x19
80007dcc:	2161                	jal	80008254 <loadStoreDyn>
80007dce:	000a                	c.slli	zero,0x2
80007dd0:	7261                	lui	tp,0xffff8
80007dd2:	00203067          	0x203067
80007dd6:	0000                	unimp
80007dd8:	7261                	lui	tp,0xffff8
80007dda:	00203167          	0x203167
80007dde:	0000                	unimp
80007de0:	7261                	lui	tp,0xffff8
80007de2:	00203267          	0x203267
80007de6:	0000                	unimp
80007de8:	7261                	lui	tp,0xffff8
80007dea:	00203367          	0x203367
80007dee:	0000                	unimp
80007df0:	7261                	lui	tp,0xffff8
80007df2:	00203467          	0x203467
80007df6:	0000                	unimp
80007df8:	7974                	flw	fa3,116(a0)
80007dfa:	6570                	flw	fa2,76(a0)
80007dfc:	0020                	addi	s0,sp,8
80007dfe:	0000                	unimp
80007e00:	74737953          	0x74737953
80007e04:	6d65                	lui	s10,0x19
80007e06:	6c6c6163          	bltu	s8,t1,800084c8 <loadStoreDyn+0x274>
80007e0a:	6e20                	flw	fs0,88(a2)
80007e0c:	206fa3c3          	fmadd.s	ft7,ft11,ft6,ft4,rdn
80007e10:	6469                	lui	s0,0x1a
80007e12:	6e65                	lui	t3,0x19
80007e14:	6974                	flw	fa3,84(a0)
80007e16:	6966                	flw	fs2,88(sp)
80007e18:	61646163          	bltu	s0,s6,8000841a <loadStoreDyn+0x1c6>
80007e1c:	0a21                	addi	s4,s4,8
80007e1e:	0000                	unimp
80007e20:	7274                	flw	fa3,100(a2)
80007e22:	7061                	c.lui	zero,0xffff8
80007e24:	000a                	c.slli	zero,0x2
80007e26:	0000                	unimp
80007e28:	7065                	c.lui	zero,0xffff9
80007e2a:	00203a63          	0x203a63
80007e2e:	0000                	unimp
80007e30:	636d                	lui	t1,0x1b
80007e32:	7561                	lui	a0,0xffff8
80007e34:	203a6573          	csrrsi	a0,hideleg,20
80007e38:	0000                	unimp
80007e3a:	0000                	unimp
80007e3c:	0700                	addi	s0,sp,896
80007e3e:	8000                	0x8000
80007e40:	0708                	addi	a0,sp,896
80007e42:	8000                	0x8000
80007e44:	0708                	addi	a0,sp,896
80007e46:	8000                	0x8000
80007e48:	0708                	addi	a0,sp,896
80007e4a:	8000                	0x8000
80007e4c:	0708                	addi	a0,sp,896
80007e4e:	8000                	0x8000
80007e50:	0708                	addi	a0,sp,896
80007e52:	8000                	0x8000
80007e54:	0708                	addi	a0,sp,896
80007e56:	8000                	0x8000
80007e58:	0708                	addi	a0,sp,896
80007e5a:	8000                	0x8000
80007e5c:	0708                	addi	a0,sp,896
80007e5e:	8000                	0x8000
80007e60:	0708                	addi	a0,sp,896
80007e62:	8000                	0x8000
80007e64:	06e0                	addi	s0,sp,844
80007e66:	8000                	0x8000
80007e68:	0708                	addi	a0,sp,896
80007e6a:	8000                	0x8000
80007e6c:	0708                	addi	a0,sp,896
80007e6e:	8000                	0x8000
80007e70:	0708                	addi	a0,sp,896
80007e72:	8000                	0x8000
80007e74:	0708                	addi	a0,sp,896
80007e76:	8000                	0x8000
80007e78:	0708                	addi	a0,sp,896
80007e7a:	8000                	0x8000
80007e7c:	0708                	addi	a0,sp,896
80007e7e:	8000                	0x8000
80007e80:	0708                	addi	a0,sp,896
80007e82:	8000                	0x8000
80007e84:	0708                	addi	a0,sp,896
80007e86:	8000                	0x8000
80007e88:	0708                	addi	a0,sp,896
80007e8a:	8000                	0x8000
80007e8c:	06f0                	addi	a2,sp,844
80007e8e:	8000                	0x8000
80007e90:	0708                	addi	a0,sp,896
80007e92:	8000                	0x8000
80007e94:	0708                	addi	a0,sp,896
80007e96:	8000                	0x8000
80007e98:	0708                	addi	a0,sp,896
80007e9a:	8000                	0x8000
80007e9c:	0708                	addi	a0,sp,896
80007e9e:	8000                	0x8000
80007ea0:	0708                	addi	a0,sp,896
80007ea2:	8000                	0x8000
80007ea4:	0708                	addi	a0,sp,896
80007ea6:	8000                	0x8000
80007ea8:	0708                	addi	a0,sp,896
80007eaa:	8000                	0x8000
80007eac:	0708                	addi	a0,sp,896
80007eae:	8000                	0x8000
80007eb0:	0708                	addi	a0,sp,896
80007eb2:	8000                	0x8000
80007eb4:	06a4                	addi	s1,sp,840
80007eb6:	8000                	0x8000
80007eb8:	0708                	addi	a0,sp,896
80007eba:	8000                	0x8000
80007ebc:	0708                	addi	a0,sp,896
80007ebe:	8000                	0x8000
80007ec0:	0708                	addi	a0,sp,896
80007ec2:	8000                	0x8000
80007ec4:	0708                	addi	a0,sp,896
80007ec6:	8000                	0x8000
80007ec8:	0708                	addi	a0,sp,896
80007eca:	8000                	0x8000
80007ecc:	0708                	addi	a0,sp,896
80007ece:	8000                	0x8000
80007ed0:	0708                	addi	a0,sp,896
80007ed2:	8000                	0x8000
80007ed4:	0708                	addi	a0,sp,896
80007ed6:	8000                	0x8000
80007ed8:	0708                	addi	a0,sp,896
80007eda:	8000                	0x8000
80007edc:	0680                	addi	s0,sp,832
80007ede:	8000                	0x8000
80007ee0:	0708                	addi	a0,sp,896
80007ee2:	8000                	0x8000
80007ee4:	0708                	addi	a0,sp,896
80007ee6:	8000                	0x8000
80007ee8:	0708                	addi	a0,sp,896
80007eea:	8000                	0x8000
80007eec:	0708                	addi	a0,sp,896
80007eee:	8000                	0x8000
80007ef0:	0708                	addi	a0,sp,896
80007ef2:	8000                	0x8000
80007ef4:	0708                	addi	a0,sp,896
80007ef6:	8000                	0x8000
80007ef8:	0708                	addi	a0,sp,896
80007efa:	8000                	0x8000
80007efc:	0708                	addi	a0,sp,896
80007efe:	8000                	0x8000
80007f00:	0708                	addi	a0,sp,896
80007f02:	8000                	0x8000
80007f04:	0708                	addi	a0,sp,896
80007f06:	8000                	0x8000
80007f08:	0708                	addi	a0,sp,896
80007f0a:	8000                	0x8000
80007f0c:	0708                	addi	a0,sp,896
80007f0e:	8000                	0x8000
80007f10:	0708                	addi	a0,sp,896
80007f12:	8000                	0x8000
80007f14:	0708                	addi	a0,sp,896
80007f16:	8000                	0x8000
80007f18:	0708                	addi	a0,sp,896
80007f1a:	8000                	0x8000
80007f1c:	05f8                	addi	a4,sp,716
80007f1e:	8000                	0x8000
80007f20:	7830                	flw	fa2,112(s0)
80007f22:	0000                	unimp
80007f24:	500a                	0x500a
80007f26:	6f72                	flw	ft10,28(sp)
80007f28:	206d6167          	0x206d6167
80007f2c:	6168                	flw	fa0,68(a0)
80007f2e:	78652073          	csrs	0x786,a0
80007f32:	7469                	lui	s0,0xffffa
80007f34:	6465                	lui	s0,0x19
80007f36:	7720                	flw	fs0,104(a4)
80007f38:	7469                	lui	s0,0xffffa
80007f3a:	2068                	fld	fa0,192(s0)
80007f3c:	65646f63          	bltu	s0,s6,8000859a <loadStoreDyn+0x346>
80007f40:	003a                	c.slli	zero,0xe
80007f42:	0000                	unimp
80007f44:	000d                	c.nop	3
80007f46:	0000                	unimp
80007f48:	4449                	li	s0,18
80007f4a:	454c                	lw	a1,12(a0)
80007f4c:	0000                	unimp
80007f4e:	0000                	unimp
80007f50:	654e                	flw	fa0,208(sp)
80007f52:	70612077          	0x70612077
80007f56:	6c70                	flw	fa2,92(s0)
80007f58:	6369                	lui	t1,0x1a
80007f5a:	7461                	lui	s0,0xffff8
80007f5c:	6f69                	lui	t5,0x1a
80007f5e:	206e                	fld	ft0,216(sp)
80007f60:	6572                	flw	fa0,28(sp)
80007f62:	74736967          	0x74736967
80007f66:	7265                	lui	tp,0xffff9
80007f68:	6465                	lui	s0,0x19
80007f6a:	2d20                	fld	fs0,88(a0)
80007f6c:	4920                	lw	s0,80(a0)
80007f6e:	3a44                	fld	fs1,176(a2)
80007f70:	0020                	addi	s0,sp,8
80007f72:	0000                	unimp
80007f74:	6572                	flw	fa0,28(sp)
80007f76:	7574                	flw	fa3,108(a0)
80007f78:	6e72                	flw	ft8,28(sp)
80007f7a:	6e69                	lui	t3,0x1a
80007f7c:	72652067          	0x72652067
80007f80:	6f72                	flw	ft10,28(sp)
80007f82:	00000a33          	add	s4,zero,zero
80007f86:	0000                	unimp
80007f88:	6572                	flw	fa0,28(sp)
80007f8a:	7574                	flw	fa3,108(a0)
80007f8c:	6e72                	flw	ft8,28(sp)
80007f8e:	6e69                	lui	t3,0x1a
80007f90:	72652067          	0x72652067
80007f94:	6f72                	flw	ft10,28(sp)
80007f96:	0a34                	addi	a3,sp,280
80007f98:	0000                	unimp
80007f9a:	0000                	unimp
80007f9c:	20736177          	0x20736177
80007fa0:	7865                	lui	a6,0xffff9
80007fa2:	6365                	lui	t1,0x19
80007fa4:	7475                	lui	s0,0xffffd
80007fa6:	6465                	lui	s0,0x19
80007fa8:	6920                	flw	fs0,80(a0)
80007faa:	206e                	fld	ft0,216(sp)
80007fac:	0000                	unimp
80007fae:	0000                	unimp
80007fb0:	7041                	c.lui	zero,0xffff0
80007fb2:	6c70                	flw	fa2,92(s0)
80007fb4:	6369                	lui	t1,0x1a
80007fb6:	7461                	lui	s0,0xffff8
80007fb8:	6f69                	lui	t5,0x1a
80007fba:	206e                	fld	ft0,216(sp)
80007fbc:	0000                	unimp
80007fbe:	0000                	unimp
80007fc0:	0909                	addi	s2,s2,2
80007fc2:	6854                	flw	fa3,20(s0)
80007fc4:	7369                	lui	t1,0xffffa
80007fc6:	6120                	flw	fs0,64(a0)
80007fc8:	7070                	flw	fa2,100(s0)
80007fca:	696c                	flw	fa1,84(a0)
80007fcc:	69746163          	bltu	s0,s7,8000864e <loadStoreDyn+0x3fa>
80007fd0:	73206e6f          	jal	t3,8000e702 <__global_pointer$+0x5792>
80007fd4:	6974                	flw	fa3,84(a0)
80007fd6:	6c6c                	flw	fa1,92(s0)
80007fd8:	6e20                	flw	fs0,88(a2)
80007fda:	6565                	lui	a0,0x19
80007fdc:	2064                	fld	fs1,192(s0)
80007fde:	6f74                	flw	fa3,92(a4)
80007fe0:	7220                	flw	fs0,96(a2)
80007fe2:	6e75                	lui	t3,0x1d
80007fe4:	203a                	fld	ft0,392(sp)
80007fe6:	0000                	unimp
80007fe8:	0909                	addi	s2,s2,2
80007fea:	6854                	flw	fa3,20(s0)
80007fec:	7369                	lui	t1,0xffffa
80007fee:	6120                	flw	fs0,64(a0)
80007ff0:	7070                	flw	fa2,100(s0)
80007ff2:	696c                	flw	fa1,84(a0)
80007ff4:	69746163          	bltu	s0,s7,80008676 <loadStoreDyn+0x422>
80007ff8:	69206e6f          	jal	t3,8000e68a <__global_pointer$+0x571a>
80007ffc:	4f442073          	csrs	0x4f4,s0
80008000:	454e                	lw	a0,208(sp)
80008002:	0a21                	addi	s4,s4,8
80008004:	0000                	unimp
80008006:	0000                	unimp
80008008:	6572                	flw	fa0,28(sp)
8000800a:	7574                	flw	fa3,108(a0)
8000800c:	6e72                	flw	ft8,28(sp)
8000800e:	6e69                	lui	t3,0x1a
80008010:	72652067          	0x72652067
80008014:	6f72                	flw	ft10,28(sp)
80008016:	0a35                	addi	s4,s4,13
80008018:	0000                	unimp
8000801a:	0000                	unimp
8000801c:	6572                	flw	fa0,28(sp)
8000801e:	7574                	flw	fa3,108(a0)
80008020:	6e72                	flw	ft8,28(sp)
80008022:	6e69                	lui	t3,0x1a
80008024:	72652067          	0x72652067
80008028:	6f72                	flw	ft10,28(sp)
8000802a:	0a36                	slli	s4,s4,0xd
8000802c:	0000                	unimp
8000802e:	0000                	unimp
80008030:	2049                	jal	800080b2 <_write_r+0x36a>
80008032:	20746f67          	0x20746f67
80008036:	2061                	jal	800080be <_write_r+0x376>
80008038:	7266                	flw	ft4,120(sp)
8000803a:	6565                	lui	a0,0x19
8000803c:	7320                	flw	fs0,96(a4)
8000803e:	7265                	lui	tp,0xffff9
80008040:	6976                	flw	fs2,92(sp)
80008042:	73206563          	bltu	zero,s2,8000876c <loadStoreDyn+0x518>
80008046:	6f6c                	flw	fa1,92(a4)
80008048:	212d                	jal	80008472 <loadStoreDyn+0x21e>
8000804a:	2021                	jal	80008052 <_write_r+0x30a>
8000804c:	3e2d                	jal	80007b86 <main+0x5e>
8000804e:	0020                	addi	s0,sp,8
80008050:	7041                	c.lui	zero,0xffff0
80008052:	6c70                	flw	fa2,92(s0)
80008054:	6369                	lui	t1,0x1a
80008056:	7461                	lui	s0,0xffff8
80008058:	6f69                	lui	t5,0x1a
8000805a:	206e                	fld	ft0,216(sp)
8000805c:	6c61                	lui	s8,0x18
8000805e:	6f6c                	flw	fa1,92(a4)
80008060:	65746163          	bltu	s0,s7,800086a2 <loadStoreDyn+0x44e>
80008064:	3a64                	fld	fs1,240(a2)
80008066:	0020                	addi	s0,sp,8
80008068:	5309                	li	t1,-30
8000806a:	6174                	flw	fa3,68(a0)
8000806c:	7472                	flw	fs0,60(sp)
8000806e:	6320                	flw	fs0,64(a4)
80008070:	616d6d6f          	jal	s10,800de686 <__stack_top+0x9b486>
80008074:	646e                	flw	fs0,216(sp)
80008076:	7320                	flw	fs0,96(a4)
80008078:	6e65                	lui	t3,0x19
8000807a:	2074                	fld	fa3,192(s0)
8000807c:	6f74                	flw	fa3,92(a4)
8000807e:	6520                	flw	fs0,72(a0)
80008080:	6576                	flw	fa0,92(sp)
80008082:	7972                	flw	fs2,60(sp)
80008084:	7420                	flw	fs0,104(s0)
80008086:	7361                	lui	t1,0xffff8
80008088:	000a2e6b          	0xa2e6b
8000808c:	6572                	flw	fa0,28(sp)
8000808e:	7574                	flw	fa3,108(a0)
80008090:	6e72                	flw	ft8,28(sp)
80008092:	6e69                	lui	t3,0x1a
80008094:	72652067          	0x72652067
80008098:	6f72                	flw	ft10,28(sp)
8000809a:	0a30                	addi	a2,sp,280
8000809c:	0000                	unimp
8000809e:	0000                	unimp
800080a0:	6572                	flw	fa0,28(sp)
800080a2:	7574                	flw	fa3,108(a0)
800080a4:	6e72                	flw	ft8,28(sp)
800080a6:	6e69                	lui	t3,0x1a
800080a8:	72652067          	0x72652067
800080ac:	6f72                	flw	ft10,28(sp)
800080ae:	0a31                	addi	s4,s4,12
800080b0:	0000                	unimp
800080b2:	0000                	unimp
800080b4:	4544                	lw	s1,12(a0)
800080b6:	2055                	jal	8000815a <_write_r+0x412>
800080b8:	5552                	lw	a0,52(sp)
800080ba:	4d49                	li	s10,18
800080bc:	4e20                	lw	s0,88(a2)
800080be:	5041204f          	fnmadd.s	ft0,ft2,ft4,fa0,rdn
800080c2:	5f49                	li	t5,-14
800080c4:	46746547          	fmsub.q	fa0,fs0,ft7,fs0,unknown
800080c8:	6572                	flw	fa0,28(sp)
800080ca:	5465                	li	s0,-7
800080cc:	7361                	lui	t1,0xffff8
800080ce:	6f6c536b          	0x6f6c536b
800080d2:	2874                	fld	fa3,208(s0)
800080d4:	0a29                	addi	s4,s4,10
800080d6:	0000                	unimp
800080d8:	20746f47          	fmsub.s	ft10,fs0,ft7,ft4,unknown
800080dc:	746f6c73          	csrrsi	s8,0x746,30
800080e0:	203a                	fld	ft0,392(sp)
800080e2:	0000                	unimp
800080e4:	6154                	flw	fa3,4(a0)
800080e6:	74206b73          	csrrsi	s6,0x742,0
800080ea:	6c61746f          	jal	s0,8001f7b0 <__global_pointer$+0x16840>
800080ee:	7320                	flw	fs0,96(a4)
800080f0:	7a69                	lui	s4,0xffffa
800080f2:	2065                	jal	8000819a <_write_r+0x452>
800080f4:	7428                	flw	fa0,104(s0)
800080f6:	7478                	flw	fa4,108(s0)
800080f8:	7373622b          	0x7373622b
800080fc:	3a29                	jal	80007a16 <API_NI_Handler+0x816>
800080fe:	0020                	addi	s0,sp,8
80008100:	6154                	flw	fa3,4(a0)
80008102:	61206b73          	csrrsi	s6,0x612,0
80008106:	6464                	flw	fs1,76(s0)
80008108:	3a72                	fld	fs4,312(sp)
8000810a:	0020                	addi	s0,sp,8
8000810c:	6572                	flw	fa0,28(sp)
8000810e:	7574                	flw	fa3,108(a0)
80008110:	6e72                	flw	ft8,28(sp)
80008112:	6e69                	lui	t3,0x1a
80008114:	72652067          	0x72652067
80008118:	6f72                	flw	ft10,28(sp)
8000811a:	0a32                	slli	s4,s4,0xc
8000811c:	0000                	unimp
8000811e:	0000                	unimp
80008120:	614c                	flw	fa1,4(a0)
80008122:	6154                	flw	fa3,4(a0)
80008124:	00006b73          	csrrsi	s6,ustatus,0
80008128:	5245                	li	tp,-15
8000812a:	4f52                	lw	t5,20(sp)
8000812c:	2052                	fld	ft0,272(sp)
8000812e:	202d                	jal	80008158 <_write_r+0x410>
80008130:	5041                	c.li	zero,-16
80008132:	5f49                	li	t5,-14
80008134:	6154                	flw	fa3,4(a0)
80008136:	74536b73          	csrrsi	s6,0x745,6
8000813a:	7261                	lui	tp,0xffff8
8000813c:	2174                	fld	fa3,192(a0)
8000813e:	2121                	jal	80008546 <loadStoreDyn+0x2f2>
80008140:	000a                	c.slli	zero,0x2
80008142:	0000                	unimp
80008144:	7061                	c.lui	zero,0xffff8
80008146:	3a70                	fld	fa2,240(a2)
80008148:	0020                	addi	s0,sp,8
8000814a:	0000                	unimp
8000814c:	6946                	flw	fs2,80(sp)
8000814e:	696e                	flw	fs2,216(sp)
80008150:	6e696873          	csrrsi	a6,0x6e6,18
80008154:	61742067          	0x61742067
80008158:	003a6b73          	csrrsi	s6,fcsr,20
8000815c:	7246                	flw	ft4,112(sp)
8000815e:	73206d6f          	jal	s10,8000e890 <__global_pointer$+0x5920>
80008162:	6f6c                	flw	fa1,92(a4)
80008164:	3a74                	fld	fa3,240(a2)
80008166:	0020                	addi	s0,sp,8
80008168:	6564                	flw	fs1,76(a0)
8000816a:	656c                	flw	fa1,76(a0)
8000816c:	6574                	flw	fa3,76(a0)
8000816e:	2064                	fld	fs1,192(s0)
80008170:	68746977          	0x68746977
80008174:	7320                	flw	fs0,96(a4)
80008176:	6375                	lui	t1,0x1d
80008178:	73736573          	csrrsi	a0,0x737,6
8000817c:	2021                	jal	80008184 <_write_r+0x43c>
8000817e:	7246                	flw	ft4,112(sp)
80008180:	61206d6f          	jal	s10,8000e792 <__global_pointer$+0x5822>
80008184:	7070                	flw	fa2,100(s0)
80008186:	696c                	flw	fa1,84(a0)
80008188:	69746163          	bltu	s0,s7,8000880a <__data_load+0x7a>
8000818c:	00206e6f          	jal	t3,8000e18e <__global_pointer$+0x521e>
80008190:	6154                	flw	fa3,4(a0)
80008192:	00206b73          	csrrsi	s6,frm,0
80008196:	0000                	unimp
80008198:	735d                	lui	t1,0xffff7
8000819a:	6174                	flw	fa3,68(a0)
8000819c:	7574                	flw	fa3,108(a0)
8000819e:	00203a73          	csrrc	s4,frm,zero
800081a2:	0000                	unimp
800081a4:	6154                	flw	fa3,4(a0)
800081a6:	694c6b73          	csrrsi	s6,0x694,24
800081aa:	005b7473          	csrrci	s0,utvec,22
800081ae:	0000                	unimp
800081b0:	6154                	flw	fa3,4(a0)
800081b2:	694c6b73          	csrrsi	s6,0x694,24
800081b6:	695b7473          	csrrci	s0,0x695,22
800081ba:	2e5d                	jal	80008570 <loadStoreDyn+0x31c>
800081bc:	74617473          	csrrci	s0,0x746,2
800081c0:	7375                	lui	t1,0xffffd
800081c2:	0020                	addi	s0,sp,8
800081c4:	6552                	flw	fa0,20(sp)
800081c6:	7574                	flw	fa3,108(a0)
800081c8:	6e72                	flw	ft8,28(sp)
800081ca:	6e69                	lui	t3,0x1a
800081cc:	65622067          	0x65622067
800081d0:	73756163          	bltu	a0,s7,800088f2 <southFlits_last+0x2>
800081d4:	2065                	jal	8000827c <loadStoreDyn+0x28>
800081d6:	203a666f          	jal	a2,800aebd8 <__stack_top+0x6b9d8>
800081da:	0000                	unimp
800081dc:	3a69                	jal	80007b76 <main+0x4e>
800081de:	0020                	addi	s0,sp,8
800081e0:	74617473          	csrrci	s0,0x746,2
800081e4:	7375                	lui	t1,0xffffd
800081e6:	203a                	fld	ft0,392(sp)
800081e8:	0000                	unimp
800081ea:	0000                	unimp
800081ec:	6f68                	flw	fa0,92(a4)
800081ee:	646c                	flw	fa1,76(s0)
800081f0:	7265                	lui	tp,0xffff9
800081f2:	203a                	fld	ft0,392(sp)
800081f4:	0000                	unimp
800081f6:	0000                	unimp
800081f8:	2d2d                	jal	80008832 <impure_data+0x22>
800081fa:	0a2d                	addi	s4,s4,11
800081fc:	0000                	unimp
	...

80008200 <powerAvgBufferIdle>:
80008200:	0031 0000 003e 0000 004d 0000               1...>...M...

8000820c <powerSwitchControlIdle>:
8000820c:	000e 0000 0012 0000 0016 0000               ............

80008218 <powerAvgBufferActive>:
80008218:	0076 0000 0097 0000 00bc 0000               v...........

80008224 <powerSwitchControlActive>:
80008224:	0029 0000 0034 0000 0041 0000               )...4...A...

80008230 <readEnergyMemory>:
80008230:	18cf 0000 1e74 0000 0340 0000               ....t...@...

8000823c <writeEnergyMemory>:
8000823c:	228b 0000 2b23 0000 0240 0000               ."..#+..@...

80008248 <arithDyn>:
80008248:	035b 0000 0449 0000 086e 0000               [...I...n...

80008254 <loadStoreDyn>:
80008254:	0622 0000 07d1 0000 09d9 0000 2d2d 2d2d     "...........----
80008264:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
80008274:	2d2d 2d2d 2d2d 000a 6f4c 6461 3a73 0909     ------..Loads:..
80008284:	0000 0000 7453 726f 7365 093a 0009 0000     ....Stores:.....
80008294:	744f 6568 7372 093a 0009 0000 7964 616e     Others:.....dyna
800082a4:	696d 4563 656e 6772 5f79 6f52 7475 7265     micEnergy_Router
800082b4:	3e20 203e 0000 0000 6f74 6174 206c 6e69      >> ....total in
800082c4:	7473 7572 7463 6f69 736e 7e7e 3e7e 0020     structions~~~> .
800082d4:	6f54 6174 456c 656e 6772 3a79 0020 0000     TotalEnergy: ...
800082e4:	000a 0000 7266 6d6f 203a 0000 736d 2067     ....from: ..msg 
800082f4:	6f70 6e69 6574 3a72 0020 0000 694d 686e     pointer: ...Minh
80008304:	2061 6174 6b73 4920 3a44 0020 6553 646e     a task ID: .Send
80008314:	6e69 5167 6575 6575 665f 6f72 746e 203a     ingQueue_front: 
80008324:	0000 0000 5245 4f52 2052 5041 5f49 7250     ....ERROR API_Pr
80008334:	6f69 6972 7974 6553 646e 2928 000a 0000     ioritySend()....
80008344:	5041 5f49 7254 3279 6553 646e 7320 6375     API_Try2Send suc
80008354:	6563 7373 0a21 0000 5041 5f49 7254 3279     cess!...API_Try2
80008364:	6553 646e 6620 6961 656c 2064 202d 6d65     Send failed - em
80008374:	7470 2079 6553 646e 7551 7565 2165 000a     pty SendQueue!..
80008384:	5041 5f49 7254 3279 6553 646e 6620 6961     API_Try2Send fai
80008394:	656c 2064 202d 494e 545f 2058 636f 7563     led - NI_TX occu
800083a4:	6970 6465 0a21 0000 6174 6b73 6c53 746f     pied!...taskSlot
800083b4:	203a 0000 6920 206e 6874 2065 4950 4550     : .. in the PIPE
800083c4:	7320 6f6c 2074 0000 6441 6964 676e 6120      slot ..Adding a
800083d4:	6d20 6773 7420 206f 6174 6b73 0020 0000      msg to task ...
800083e4:	7266 6d6f 6120 7070 203a 0000 3e3e 3e3e     from app: ..>>>>
800083f4:	413e 6863 6965 6120 7571 2069 6f6e 7020     >Achei aqui no p
80008404:	6e65 6964 676e 0a21 0000 0000 7345 6570     ending!.....Espe
80008414:	6172 646e 206f 654d 736e 6761 6d65 0a21     rando Mensagem!.
80008424:	0000 0000 654d 736e 6761 6d65 5220 6365     ....Mensagem Rec
80008434:	6265 6469 2161 000a 5854 6920 746e 7265     ebida!..TX inter
80008444:	7572 7470 6f69 206e 6163 6374 6568 0a64     ruption catched.
80008454:	0000 0000 5852 6920 746e 7265 7572 7470     ....RX interrupt
80008464:	6f69 206e 6163 6374 6568 0a64 0000 0000     ion catched.....
80008474:	4154 4b53 415f 4c4c 434f 5441 4f49 5f4e     TASK_ALLOCATION_
80008484:	4553 444e 000a 0000 6154 6b73 7320 6f6c     SEND....Task slo
80008494:	3a74 0020 6154 6b73 7320 6f6c 2074 6154     t: .Task slot Ta
800084a4:	6b73 6441 7264 203a 0000 0000 7266 6d6f     skAddr: ....from
800084b4:	6120 7070 696c 6163 6974 6e6f 0020 0000      application ...
800084c4:	4946 494e 4853 4445 203a 6154 6b73 0020     FINISHED: Task .
800084d4:	4154 4b53 415f 4c4c 434f 5441 4f49 5f4e     TASK_ALLOCATION_
800084e4:	4946 494e 4853 4445 000a 0000 4154 4b53     FINISHED....TASK
800084f4:	415f 4c4c 434f 5441 4f49 5f4e 5553 4343     _ALLOCATION_SUCC
80008504:	5345 0a53 0000 0000 6843 6765 756f 7520     ESS.....Chegou u
80008514:	206d 4154 4b53 535f 4154 5452 0a21 0000     m TASK_START!...
80008524:	6843 6765 756f 7520 206d 4154 4b53 525f     Chegou um TASK_R
80008534:	4e55 0a21 0000 0000 6620 6f72 206d 7061     UN!..... from ap
80008544:	2070 0000 7453 7261 6974 676e 5420 7361     p ..Starting Tas
80008554:	206b 0000 6174 6b73 6c53 746f 7220 6e75     k ..taskSlot run
80008564:	203a 0000 6154 6b73 203a 0000 6843 6765     : ..Task: ..Cheg
80008574:	756f 7520 206d 656d 7373 6761 2065 6572     ou um message re
80008584:	7571 7365 2174 4120 7070 203a 0000 0000     quest! App: ....
80008594:	654d 736e 6761 6d65 6e20 a3c3 206f 6e65     Mensagem n..o en
800085a4:	6f63 746e 6172 6164 202c 6461 6369 6f69     contrada, adicio
800085b4:	616e 646e 206f 6f61 5020 6e65 6964 676e     nando ao Pending
800085c4:	6552 2171 000a 0000 654d 736e 6761 6d65     Req!....Mensagem
800085d4:	6520 636e 6e6f 7274 6461 2061 6f6e 7020      encontrada no p
800085e4:	7069 2165 000a 0000 6554 206d 6d75 2061     ipe!....Tem uma 
800085f4:	656d 736e 6761 6d65 6320 6568 6167 646e     mensagem chegand
80008604:	2e6f 2e2e 000a 0000 6552 6563 6562 646e     o.......Recebend
80008614:	206f 6170 6f63 6574 6420 2065 6574 706d     o pacote de temp
80008624:	7265 7461 7275 0061 6574 706d 203a 0000     eratura.temp: ..
80008634:	6570 0000 5245 4f52 2052 7845 6574 6e72     pe..ERROR Extern
80008644:	6c61 325f 495f 5152 6148 646e 656c 2072     al_2_IRQHandler 
80008654:	6e55 6e6b 776f 2d6e 6553 7672 6369 2065     Unknown-Service 
80008664:	0000 0000 0a0d 7246 6565 5452 534f 4520     ......FreeRTOS E
80008674:	6178 706d 656c 0a0d 0000 0000 200a 6843     xample....... Ch
80008684:	6f72 6f6e 2073 6c70 7461 6f66 6d72 6920     ronos platform i
80008694:	696e 6974 6c61 7a69 6e69 2e67 2e2e 0a20     nitializing... .
800086a4:	0000 0000 200a 6854 7369 7420 7265 696d     ..... This termi
800086b4:	616e 206c 6562 6f6c 676e 2073 6f74 7420     nal belongs to t
800086c4:	6568 6120 6464 6572 7373 203a 0000 0000     he address: ....
800086d4:	000a 0000 200a 6854 7369 7020 6f72 6563     ..... This proce
800086e4:	7373 726f 6920 2073 6874 2065 6c47 626f     ssor is the Glob
800086f4:	6c61 4d20 7361 6574 3a72 0a20 0000 0000     al Master: .....
80008704:	6c47 626f 6c61 614d 7473 7265 0000 0000     GlobalMaster....
80008714:	200a 6854 7369 7020 6f72 6563 7373 726f     . This processor
80008724:	6920 2073 2061 6c53 7661 3a65 0a20 0000      is a Slave: ...
80008734:	6c47 626f 6c61 614d 7473 7265 6341 6974     GlobalMasterActi
80008744:	6576 0000 4720 6f6c 6162 4d6c 7361 6574     ve.. GlobalMaste
80008754:	5272 756f 6974 656e 2e2e 0d2e 000a 0000     rRoutine........
	...
