
miv-rv32im-freertos-port-test.elf:     file format elf32-littleriscv
miv-rv32im-freertos-port-test.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000000

Program Header:
    LOAD off    0x00001000 vaddr 0x80000000 paddr 0x80000000 align 2**12
         filesz 0x00006f30 memsz 0x000415f0 flags rwx

Sections:
Idx Name           Size      VMA       LMA       File off  Algn  Flags
  0 .text          00006e30  80000000  80000000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sdata         00000020  80006e30  80006e30  00007e30  2**4  CONTENTS, ALLOC, LOAD, DATA
  2 .data          000000e0  80006e50  80006e50  00007e50  2**4  CONTENTS, ALLOC, LOAD, DATA
  3 .sbss          00000070  80006f30  80006f30  00007f30  2**4  ALLOC
  4 .bss           0001a650  80006fa0  80006fa0  00007f30  2**4  ALLOC
  5 .heap          00010000  800215f0  800215f0  00007f30  2**4  ALLOC
  6 .stack         00010000  800315f0  800315f0  00007f30  2**4  ALLOC
  7 .debug_line    0000a7b7  00000000  00000000  00007f30  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_info    0000f3d7  00000000  00000000  000126e7  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev  00002aa9  00000000  00000000  00021abe  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000918  00000000  00000000  00024568  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_str     00012b29  00000000  00000000  00024e80  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges  000007e8  00000000  00000000  000379a9  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro   000058b6  00000000  00000000  00038191  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment       00000039  00000000  00000000  0003da47  2**0  CONTENTS, READONLY
 15 .debug_frame   000021a0  00000000  00000000  0003da80  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
80000000 l    d  .text	00000000 .text
80006e30 l    d  .sdata	00000000 .sdata
80006e50 l    d  .data	00000000 .data
80006f30 l    d  .sbss	00000000 .sbss
80006fa0 l    d  .bss	00000000 .bss
800215f0 l    d  .heap	00000000 .heap
800315f0 l    d  .stack	00000000 .stack
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./riscv_hal/entry.o
8000000c l       .text	00000000 handle_reset
80000004 l       .text	00000000 nmi_vector
80000008 l       .text	00000000 trap_vector
80000030 l       .text	00000000 trap_entry
00000000 l    df *ABS*	00000000 init.c
80000160 l     F .text	00000050 zero_section
00000000 l    df *ABS*	00000000 riscv_hal.c
80000238 l     F .text	000000b8 PLIC_DisableIRQ
800002f0 l     F .text	00000044 PLIC_ClaimIRQ
80000334 l     F .text	0000004c PLIC_CompleteIRQ
80006f30 l     O .sbss	00000008 g_systick_increment
00000000 l    df *ABS*	00000000 riscv_hal_stubs.c
00000000 l    df *ABS*	00000000 syscall.c
80006f38 l     O .sbss	00000008 g_stdio_uart
80006f40 l     O .sbss	00000004 g_stdio_uart_init_done
80000de4 l     F .text	00000030 stub
00000000 l    df *ABS*	00000000 core_uart_apb.c
00000000 l    df *ABS*	00000000 heap_2.c
80006fa0 l     O .bss	00019000 ucHeap
80006f44 l     O .sbss	00000008 xStart
80006f4c l     O .sbss	00000008 xEnd
80006e30 l     O .sdata	00000004 xFreeBytesRemaining
80006f54 l     O .sbss	00000004 xHeapHasBeenInitialised.2777
800014f8 l     F .text	00000074 prvHeapInit
00000000 l    df *ABS*	00000000 port.c
8000156c l     F .text	0000004c raise_soft_interrupt
80006e34 l     O .sdata	00000004 uxCriticalNesting
80006e38 l     O .sdata	00000004 mtime
80006e3c l     O .sdata	00000004 mtimecmp
8000162c l     F .text	000000cc prvSetNextTimerInterrupt
800017c4 l     F .text	0000002c prvTaskExitError
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 tasks.c
8001ffa0 l     O .bss	00000064 pxReadyTasksLists
80020004 l     O .bss	00000014 xDelayedTaskList1
80020018 l     O .bss	00000014 xDelayedTaskList2
80006f60 l     O .sbss	00000004 pxDelayedTaskList
80006f64 l     O .sbss	00000004 pxOverflowDelayedTaskList
8002002c l     O .bss	00000014 xPendingReadyList
80020040 l     O .bss	00000014 xTasksWaitingTermination
80006f68 l     O .sbss	00000004 uxTasksDeleted
80020054 l     O .bss	00000014 xSuspendedTaskList
80006f6c l     O .sbss	00000004 uxCurrentNumberOfTasks
80006f70 l     O .sbss	00000004 xTickCount
80006f74 l     O .sbss	00000004 uxTopReadyPriority
80006f78 l     O .sbss	00000004 xSchedulerRunning
80006f7c l     O .sbss	00000004 uxPendedTicks
80006f80 l     O .sbss	00000004 xYieldPending
80006f84 l     O .sbss	00000004 xNumOfOverflows
80006f88 l     O .sbss	00000004 uxTaskNumber
80006f8c l     O .sbss	00000004 xNextTaskUnblockTime
80006f90 l     O .sbss	00000004 uxSchedulerSuspended
80002a48 l     F .text	000000c0 prvAllocateTCBAndStack
80002728 l     F .text	00000138 prvInitialiseTCBVariables
80002860 l     F .text	000000c0 prvInitialiseTaskLists
80002b48 l     F .text	00000060 prvResetNextTaskUnblockTime
800029c0 l     F .text	00000088 prvAddCurrentTaskToDelayedList
800026f4 l     F .text	00000034 prvIdleTask
80002920 l     F .text	000000a0 prvCheckTasksWaitingTermination
80002b08 l     F .text	00000040 prvDeleteTCB
00000000 l    df *ABS*	00000000 chronos.c
80002bd0 l     F .text	000000b4 PLIC_EnableIRQ
80002c84 l     F .text	0000003c PLIC_SetPriority
00000000 l    df *ABS*	00000000 globalMaster.c
00000000 l    df *ABS*	00000000 applications.c
00000000 l    df *ABS*	00000000 packet.c
00000000 l    df *ABS*	00000000 main.c
800064c0 l     F .text	000000d0 PLIC_init
800067c4 l     F .text	00000090 GlobalManagerTask
8000670c l     F .text	000000b8 vUartAliveTask
00000000 l    df *ABS*	00000000 syswrite.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 impure.c
80006ed0 l     O .data	00000060 impure_data
800015ec g     F .text	00000040 vPortExitCritical
00010000 g       *ABS*	00000000 STACK_SIZE
80020068 g     O .bss	00000004 SendingSlot
800009bc  w    F .text	00000020 External_11_IRQHandler
80007630 g       .sdata	00000000 __global_pointer$
80002e44 g     F .text	00000048 printsv
80006e50 g       *ABS*	00000000 __data_load
80001884 g     F .text	000000cc SysTick_Handler
800008fc  w    F .text	00000020 External_5_IRQHandler
800060fc g     F .text	000000a8 API_PipeInitialization
800047e4 g     F .text	00000138 API_TilesReset
80000fc4 g       .text	00000000 HW_get_8bit_reg_field
80003574 g     F .text	00000080 reverse
800043a0 g     F .text	00000078 API_AddPendingReq
80020ae4 g     O .bss	00000024 priorityMatrix
8000642c g     F .text	00000094 API_checkPipe
80006f5c g     O .sbss	00000004 pxCurrentTCB
80006f30 g       .sbss	00000000 __sbss_start
80002cc0 g     F .text	000000d8 Chronos_init
80020ae0 g     O .bss	00000004 errno
8002006c g     O .bss	000000f0 ServicePipe
80000efc g       .text	00000000 HW_set_32bit_reg
80000adc  w    F .text	00000020 External_20_IRQHandler
80001950 g     F .text	00000044 xPortStartScheduler
80000380 g     F .text	00000024 __enable_irq
80001e50 g     F .text	0000021c xTaskGenericCreate
800062f0 g     F .text	000000a0 API_GetServiceSlot
80006e30 g       .sdata	00000000 __sdata_start
8000142c g     F .text	000000cc vPortFree
8002015c g     O .bss	00000004 messageID
800037d4 g     F .text	00000088 API_PushSendQueue
800215e0 g     O .bss	00000008 g_uart
80000f9c g       .text	00000000 HW_set_8bit_reg_field
80000b9c  w    F .text	00000020 External_26_IRQHandler
8000078c g     F .text	00000110 handle_trap
80004714 g     F .text	00000070 API_GetApplicationFreeSlot
80001b24 g     F .text	00000088 vListInsertEnd
00080000 g       *ABS*	00000000 RAM_SIZE
8000099c  w    F .text	00000020 External_10_IRQHandler
80020b08 g     O .bss	00000780 applications
80002e08 g     F .text	0000003c printi
80001afc g     F .text	00000028 vListInitialiseItem
80000c1c  w    F .text	00000020 External_30_IRQHandler
80000a7c  w    F .text	00000020 External_17_IRQHandler
800315f0 g       .heap	00000000 _heap_end
80000d94 g     F .text	00000050 _isatty
800215f0 g       .bss	00000000 __bss_end
800004ec g     F .text	000002a0 handle_syscall
80004530 g     F .text	000001e4 API_AddApplication
80001250 g     F .text	000001dc pvPortMalloc
800061a4 g     F .text	0000014c API_GetMessageSlot
80004c9c g     F .text	00000360 API_DealocateTask
800001b0 g     F .text	0000006c _init
80001a98 g     F .text	00000064 vListInitialise
80000f8c g       .text	00000000 HW_set_8bit_reg
80000f94 g       .text	00000000 HW_get_8bit_reg
800023e4 g     F .text	00000038 xTaskGetTickCount
800049c4 g     F .text	000002d8 API_AllocateTasks
80005a84 g     F .text	000000b4 API_TaskListInit
80005c30 g     F .text	000001c0 API_TaskAllocation
80005290 g     F .text	0000013c API_ClearTaskSlotFromTile
80005bc0 g     F .text	00000070 API_GetFreeTaskSlot
80006fa0 g       .sbss	00000000 __sbss_end
80005ec0 g     F .text	000000bc API_TaskStart
80000f0c g       .text	00000000 HW_set_32bit_reg_field
80006854 g     F .text	0000001c write
80005684 g     F .text	00000134 API_TaskAllocated
800066dc g     F .text	00000014 vApplicationMallocFailedHook
80000b7c  w    F .text	00000020 External_25_IRQHandler
800415f0 g       .stack	00000000 __stack_top
80000bfc  w    F .text	00000020 External_29_IRQHandler
80020160 g     O .bss	00000034 incommingPacket
8000206c g     F .text	000000dc vTaskDelete
800011a0 g     F .text	000000b0 UART_polled_tx_string
80000c5c g     F .text	000000e8 write_hex
800009fc  w    F .text	00000020 External_13_IRQHandler
80003070 g     F .text	000004b8 External_2_IRQHandler
00010000 g       *ABS*	00000000 HEAP_SIZE
800009dc  w    F .text	00000020 External_12_IRQHandler
80003794 g     F .text	00000040 makeAddress
800010ec g     F .text	000000b4 UART_send
80002f40 g     F .text	0000004c SendRaw
80000000 g       .text	00000000 _start
8000225c g     F .text	00000028 vTaskSuspendAll
8000385c g     F .text	0000008c API_PopSendQueue
800003a4 g     F .text	000000a8 handle_m_timer_interrupt
80002d98 g     F .text	00000070 prints
80001c80 g     F .text	00000098 uxListRemove
800057b8 g     F .text	000002cc API_ApplicationStart
80002f8c g     F .text	00000094 NI_enable_irq
80006e30 g       *ABS*	00000000 __sdata_load
80006f30 g       .data	00000000 __data_end
80002608 g     F .text	000000ec vTaskSwitchContext
80000a9c  w    F .text	00000020 External_18_IRQHandler
80000f34 g       .text	00000000 HW_get_32bit_reg_field
800035f4 g     F .text	000001a0 myItoa
80000b1c  w    F .text	00000020 External_22_IRQHandler
80000a3c  w    F .text	00000020 External_15_IRQHandler
80001a70 g     F .text	00000028 vPortYield
80005b38 g     F .text	00000088 API_GetCurrentTaskSlot
80000000 g       *ABS*	00000000 RAM_START_ADDRESS
80006fa0 g       .bss	00000000 __bss_start
80021288 g     O .bss	00000258 TaskList
80000a5c  w    F .text	00000020 External_16_IRQHandler
80001d18 g     F .text	000000e8 memset
80006590 g     F .text	0000014c main
80003528 g     F .text	0000004c mySwap
80001bac g     F .text	000000d4 vListInsert
80000bdc  w    F .text	00000020 External_28_IRQHandler
80004264 g     F .text	0000013c API_CheckMessagePipe
80004784 g     F .text	00000060 API_ApplicationsReset
80002ba8 g     F .text	00000028 xTaskGetCurrentTaskHandle
80000f4c g       .text	00000000 HW_get_16bit_reg
80006e50 g       .sdata	00000000 __sdata_end
80005f7c g     F .text	00000180 API_FinishRunningTask
800315f0 g       .heap	00000000 __heap_end
80000a1c  w    F .text	00000020 External_14_IRQHandler
80005158 g     F .text	00000138 API_GetTaskSlotFromTile
80004ffc g     F .text	0000015c getNextPriorityAddr
800054e8 g     F .text	0000019c API_RepositoryAllocation
8000021c g     F .text	0000001c _fini
80002284 g     F .text	00000160 xTaskResumeAll
800021cc g     F .text	00000090 vTaskStartScheduler
80003b48 g     F .text	000002cc API_SendMessage
80006e50 g     O .data	00000080 ext_irq_handler_table
80020194 g     O .bss	00000020 SendingQueue
80006870 g     F .text	00000054 _write_r
80000f54 g       .text	00000000 HW_set_16bit_reg_field
800039e0 g     F .text	00000168 API_AckTaskAllocation
800201b4 g     O .bss	00000004 SendingQueue_tail
80006e40 g     O .sdata	00000004 _impure_ptr
800315f0 g       .stack	00000000 __stack_bottom
80001994 g     F .text	000000dc Software_IRQHandler
80006390 g     F .text	0000009c API_ClearPipeSlot
80000bbc  w    F .text	00000020 External_27_IRQHandler
8000095c  w    F .text	00000020 External_8_IRQHandler
8000097c  w    F .text	00000020 External_9_IRQHandler
800215f0 g       .heap	00000000 __heap_start
8000089c  w    F .text	00000020 Invalid_IRQHandler
800038e8 g     F .text	000000f8 API_Try2Send
800008bc  w    F .text	00000020 External_3_IRQHandler
8000241c g     F .text	000001ec xTaskIncrementTick
80005df0 g     F .text	000000d0 API_GetTaskSlot
80006f58 g     O .sbss	00000004 g_startscheduler
80002f18 g     F .text	00000028 getYpos
80000abc  w    F .text	00000020 External_19_IRQHandler
80000e14 g     F .text	000000e8 _write
80002eec g     F .text	0000002c getXpos
800215f0 g       .bss	00000000 _end
800016f8 g     F .text	000000cc vPortSetupTimer
800201b8 g     O .bss	00000014 str
800201cc g     O .bss	00000004 SendingQueue_front
80004418 g     F .text	00000118 API_RepositoryWakeUp
80002e8c g     F .text	00000060 printsvsv
80002148 g     F .text	00000084 vTaskDelay
80000fd4 g     F .text	00000118 UART_init
80000f04 g       .text	00000000 HW_get_32bit_reg
80000d44 g     F .text	00000050 _exit
80000f44 g       .text	00000000 HW_set_16bit_reg
80003fa8 g     F .text	000002bc API_SendMessageReq
80001e00 g     F .text	00000050 strlen
800017f0 g     F .text	00000094 pxPortInitialiseStack
80003020 g     F .text	00000050 External_1_IRQHandler
80003e14 g     F .text	00000194 API_SendFinishTask
8000091c  w    F .text	00000020 External_6_IRQHandler
80000c3c  w    F .text	00000020 External_31_IRQHandler
800053cc g     F .text	0000011c API_GetSystemTasksSlots
800015b8 g     F .text	00000034 vPortEnterCritical
80006e50 g       .data	00000000 __data_start
800215e8 g     O .bss	00000004 ProcessorAddr
800214e0 g     O .bss	00000004 priorityPointer
80000afc  w    F .text	00000020 External_21_IRQHandler
800214e4 g     O .bss	000000fc Tiles
800004bc g     F .text	00000030 handle_m_soft_interrupt
8000044c g     F .text	00000070 handle_m_ext_interrupt
80000f7c g       .text	00000000 HW_get_16bit_reg_field
80000b3c  w    F .text	00000020 External_23_IRQHandler
80000b5c  w    F .text	00000020 External_24_IRQHandler
800008dc  w    F .text	00000020 External_4_IRQHandler
800201d0 g     O .bss	00000910 MessagePipe
8000491c g     F .text	000000a8 GeneratePatternMatrix
8000093c  w    F .text	00000020 External_7_IRQHandler
800066f0 g     F .text	0000001c vApplicationIdleHook



Disassembly of section .text:

80000000 <_start>:
_start():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:30

  .section      .text.entry
  .globl _start

_start:
  j handle_reset
80000000:	00c0006f          	j	8000000c <handle_reset>

80000004 <nmi_vector>:
nmi_vector():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:33

nmi_vector:
  j nmi_vector
80000004:	0000006f          	j	80000004 <nmi_vector>

80000008 <trap_vector>:
trap_vector():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:36

trap_vector:
  j trap_entry
80000008:	0280006f          	j	80000030 <trap_entry>

8000000c <handle_reset>:
handle_reset():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:39

handle_reset:
  la t0, trap_entry
8000000c:	00000297          	auipc	t0,0x0
80000010:	02428293          	addi	t0,t0,36 # 80000030 <trap_entry>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:40
  csrw mtvec, t0
80000014:	30529073          	csrw	mtvec,t0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:41
  csrwi mstatus, 0
80000018:	30005073          	csrwi	mstatus,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:42
  csrwi mie, 0
8000001c:	30405073          	csrwi	mie,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:60
  lui t0, 0x0
  fscsr t0
#endif

  # initialize global pointer
  la gp, __global_pointer$
80000020:	00018193          	mv	gp,gp
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:63

  # initialize stack pointer
  la sp, __stack_top
80000024:	00041117          	auipc	sp,0x41
80000028:	5cc10113          	addi	sp,sp,1484 # 800415f0 <__stack_top>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:66

  # perform the rest of initialization in C
  j _init
8000002c:	1840006f          	j	800001b0 <_init>

80000030 <trap_entry>:
trap_entry():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:70


trap_entry:
  addi sp, sp, -32*REGBYTES
80000030:	f8010113          	addi	sp,sp,-128
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:72

  SREG x1, 0 * REGBYTES(sp)
80000034:	00112023          	sw	ra,0(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:73
  SREG x2, 1 * REGBYTES(sp)
80000038:	00212223          	sw	sp,4(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:74
  SREG x3, 2 * REGBYTES(sp)
8000003c:	00312423          	sw	gp,8(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:75
  SREG x4, 3 * REGBYTES(sp)
80000040:	00412623          	sw	tp,12(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:76
  SREG x5, 4 * REGBYTES(sp)
80000044:	00512823          	sw	t0,16(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:77
  SREG x6, 5 * REGBYTES(sp)
80000048:	00612a23          	sw	t1,20(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:78
  SREG x7, 6 * REGBYTES(sp)
8000004c:	00712c23          	sw	t2,24(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:79
  SREG x8, 7 * REGBYTES(sp)
80000050:	00812e23          	sw	s0,28(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:80
  SREG x9, 8 * REGBYTES(sp)
80000054:	02912023          	sw	s1,32(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:81
  SREG x10, 9 * REGBYTES(sp)
80000058:	02a12223          	sw	a0,36(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:82
  SREG x11, 10 * REGBYTES(sp)
8000005c:	02b12423          	sw	a1,40(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:83
  SREG x12, 11 * REGBYTES(sp)
80000060:	02c12623          	sw	a2,44(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:84
  SREG x13, 12 * REGBYTES(sp)
80000064:	02d12823          	sw	a3,48(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:85
  SREG x14, 13 * REGBYTES(sp)
80000068:	02e12a23          	sw	a4,52(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:86
  SREG x15, 14 * REGBYTES(sp)
8000006c:	02f12c23          	sw	a5,56(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:87
  SREG x16, 15 * REGBYTES(sp)
80000070:	03012e23          	sw	a6,60(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:88
  SREG x17, 16 * REGBYTES(sp)
80000074:	05112023          	sw	a7,64(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:89
  SREG x18, 17 * REGBYTES(sp)
80000078:	05212223          	sw	s2,68(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:90
  SREG x19, 18 * REGBYTES(sp)
8000007c:	05312423          	sw	s3,72(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:91
  SREG x20, 19 * REGBYTES(sp)
80000080:	05412623          	sw	s4,76(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:92
  SREG x21, 20 * REGBYTES(sp)
80000084:	05512823          	sw	s5,80(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:93
  SREG x22, 21 * REGBYTES(sp)
80000088:	05612a23          	sw	s6,84(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:94
  SREG x23, 22 * REGBYTES(sp)
8000008c:	05712c23          	sw	s7,88(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:95
  SREG x24, 23 * REGBYTES(sp)
80000090:	05812e23          	sw	s8,92(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:96
  SREG x25, 24 * REGBYTES(sp)
80000094:	07912023          	sw	s9,96(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:97
  SREG x26, 25 * REGBYTES(sp)
80000098:	07a12223          	sw	s10,100(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:98
  SREG x27, 26 * REGBYTES(sp)
8000009c:	07b12423          	sw	s11,104(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:99
  SREG x28, 27 * REGBYTES(sp)
800000a0:	07c12623          	sw	t3,108(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:100
  SREG x29, 28 * REGBYTES(sp)
800000a4:	07d12823          	sw	t4,112(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:101
  SREG x30, 29 * REGBYTES(sp)
800000a8:	07e12a23          	sw	t5,116(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:102
  SREG x31, 30 * REGBYTES(sp)
800000ac:	07f12c23          	sw	t6,120(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:105


  csrr t0, mepc
800000b0:	341022f3          	csrr	t0,mepc
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:106
  SREG t0, 31 * REGBYTES(sp)
800000b4:	06512e23          	sw	t0,124(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:108

  csrr a0, mcause
800000b8:	34202573          	csrr	a0,mcause
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:109
  csrr a1, mepc
800000bc:	341025f3          	csrr	a1,mepc
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:110
  mv a2, sp
800000c0:	00010613          	mv	a2,sp
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:111
  jal handle_trap
800000c4:	6c8000ef          	jal	ra,8000078c <handle_trap>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:112
  csrw mepc, a0
800000c8:	34151073          	csrw	mepc,a0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:115

  # Remain in M-mode after mret
  li t0, MSTATUS_MPP
800000cc:	000022b7          	lui	t0,0x2
800000d0:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:116
  csrs mstatus, t0
800000d4:	3002a073          	csrs	mstatus,t0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:118

  LREG x1, 0 * REGBYTES(sp)
800000d8:	00012083          	lw	ra,0(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:119
  LREG x2, 1 * REGBYTES(sp)
800000dc:	00412103          	lw	sp,4(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:120
  LREG x3, 2 * REGBYTES(sp)
800000e0:	00812183          	lw	gp,8(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:121
  LREG x4, 3 * REGBYTES(sp)
800000e4:	00c12203          	lw	tp,12(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:122
  LREG x5, 4 * REGBYTES(sp)
800000e8:	01012283          	lw	t0,16(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:123
  LREG x6, 5 * REGBYTES(sp)
800000ec:	01412303          	lw	t1,20(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:124
  LREG x7, 6 * REGBYTES(sp)
800000f0:	01812383          	lw	t2,24(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:125
  LREG x8, 7 * REGBYTES(sp)
800000f4:	01c12403          	lw	s0,28(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:126
  LREG x9, 8 * REGBYTES(sp)
800000f8:	02012483          	lw	s1,32(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:127
  LREG x10, 9 * REGBYTES(sp)
800000fc:	02412503          	lw	a0,36(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:128
  LREG x11, 10 * REGBYTES(sp)
80000100:	02812583          	lw	a1,40(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:129
  LREG x12, 11 * REGBYTES(sp)
80000104:	02c12603          	lw	a2,44(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:130
  LREG x13, 12 * REGBYTES(sp)
80000108:	03012683          	lw	a3,48(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:131
  LREG x14, 13 * REGBYTES(sp)
8000010c:	03412703          	lw	a4,52(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:132
  LREG x15, 14 * REGBYTES(sp)
80000110:	03812783          	lw	a5,56(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:133
  LREG x16, 15 * REGBYTES(sp)
80000114:	03c12803          	lw	a6,60(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:134
  LREG x17, 16 * REGBYTES(sp)
80000118:	04012883          	lw	a7,64(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:135
  LREG x18, 17 * REGBYTES(sp)
8000011c:	04412903          	lw	s2,68(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:136
  LREG x19, 18 * REGBYTES(sp)
80000120:	04812983          	lw	s3,72(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:137
  LREG x20, 19 * REGBYTES(sp)
80000124:	04c12a03          	lw	s4,76(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:138
  LREG x21, 20 * REGBYTES(sp)
80000128:	05012a83          	lw	s5,80(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:139
  LREG x22, 21 * REGBYTES(sp)
8000012c:	05412b03          	lw	s6,84(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:140
  LREG x23, 22 * REGBYTES(sp)
80000130:	05812b83          	lw	s7,88(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:141
  LREG x24, 23 * REGBYTES(sp)
80000134:	05c12c03          	lw	s8,92(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:142
  LREG x25, 24 * REGBYTES(sp)
80000138:	06012c83          	lw	s9,96(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:143
  LREG x26, 25 * REGBYTES(sp)
8000013c:	06412d03          	lw	s10,100(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:144
  LREG x27, 26 * REGBYTES(sp)
80000140:	06812d83          	lw	s11,104(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:145
  LREG x28, 27 * REGBYTES(sp)
80000144:	06c12e03          	lw	t3,108(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:146
  LREG x29, 28 * REGBYTES(sp)
80000148:	07012e83          	lw	t4,112(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:147
  LREG x30, 29 * REGBYTES(sp)
8000014c:	07412f03          	lw	t5,116(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:148
  LREG x31, 30 * REGBYTES(sp)
80000150:	07812f83          	lw	t6,120(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:150

  addi sp, sp, 32*REGBYTES
80000154:	08010113          	addi	sp,sp,128
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:151
  mret
80000158:	30200073          	mret
8000015c:	0000                	unimp
	...

80000160 <zero_section>:
zero_section():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:47
        ++p_vma;
    }
}

static void zero_section(uint32_t * start, uint32_t * end)
{
80000160:	fd010113          	addi	sp,sp,-48
80000164:	02812623          	sw	s0,44(sp)
80000168:	03010413          	addi	s0,sp,48
8000016c:	fca42e23          	sw	a0,-36(s0)
80000170:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:48
    uint32_t * p_zero = start;
80000174:	fdc42783          	lw	a5,-36(s0)
80000178:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:50
    
    while(p_zero <= end)
8000017c:	0180006f          	j	80000194 <zero_section+0x34>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:52
    {
        *p_zero = 0;
80000180:	fec42783          	lw	a5,-20(s0)
80000184:	0007a023          	sw	zero,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:53
        ++p_zero;
80000188:	fec42783          	lw	a5,-20(s0)
8000018c:	00478793          	addi	a5,a5,4
80000190:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:50
    while(p_zero <= end)
80000194:	fec42703          	lw	a4,-20(s0)
80000198:	fd842783          	lw	a5,-40(s0)
8000019c:	fee7f2e3          	bleu	a4,a5,80000180 <zero_section+0x20>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:55
    }
}
800001a0:	00000013          	nop
800001a4:	02c12403          	lw	s0,44(sp)
800001a8:	03010113          	addi	sp,sp,48
800001ac:	00008067          	ret

800001b0 <_init>:
_init():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:58

void _init(void)
{
800001b0:	fe010113          	addi	sp,sp,-32
800001b4:	00112e23          	sw	ra,28(sp)
800001b8:	00812c23          	sw	s0,24(sp)
800001bc:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:60
    extern int main(int, char**);
    const char *argv0 = "hello";
800001c0:	800077b7          	lui	a5,0x80007
800001c4:	8d078793          	addi	a5,a5,-1840 # 800068d0 <__stack_top+0xfffc52e0>
800001c8:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:61
    char *argv[] = {(char *)argv0, NULL, NULL};
800001cc:	fec42783          	lw	a5,-20(s0)
800001d0:	fef42023          	sw	a5,-32(s0)
800001d4:	fe042223          	sw	zero,-28(s0)
800001d8:	fe042423          	sw	zero,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:66

// Imperas - this is loaded directly by simulator so must not be copied
//    copy_section(&__sdata_load, &__sdata_start, &__sdata_end);
//    copy_section(&__data_load, &__data_start, &__data_end);
    zero_section(&__sbss_start, &__sbss_end);
800001dc:	97018593          	addi	a1,gp,-1680 # 80006fa0 <__sbss_end>
800001e0:	90018513          	addi	a0,gp,-1792 # 80006f30 <__data_end>
800001e4:	f7dff0ef          	jal	ra,80000160 <zero_section>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:67
    zero_section(&__bss_start, &__bss_end);
800001e8:	800217b7          	lui	a5,0x80021
800001ec:	5f078593          	addi	a1,a5,1520 # 800215f0 <__stack_top+0xfffe0000>
800001f0:	97018513          	addi	a0,gp,-1680 # 80006fa0 <__sbss_end>
800001f4:	f6dff0ef          	jal	ra,80000160 <zero_section>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:69
    
    main(1, argv);
800001f8:	fe040793          	addi	a5,s0,-32
800001fc:	00078593          	mv	a1,a5
80000200:	00100513          	li	a0,1
80000204:	38c060ef          	jal	ra,80006590 <main>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:70
}
80000208:	00000013          	nop
8000020c:	01c12083          	lw	ra,28(sp)
80000210:	01812403          	lw	s0,24(sp)
80000214:	02010113          	addi	sp,sp,32
80000218:	00008067          	ret

8000021c <_fini>:
_fini():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:75

/* Function called after main() finishes */
void
_fini()
{
8000021c:	ff010113          	addi	sp,sp,-16
80000220:	00812623          	sw	s0,12(sp)
80000224:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:76
}
80000228:	00000013          	nop
8000022c:	00c12403          	lw	s0,12(sp)
80000230:	01010113          	addi	sp,sp,16
80000234:	00008067          	ret

80000238 <PLIC_DisableIRQ>:
PLIC_DisableIRQ():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:174
 * 	If you wish to disable the external interrupt while the interrupt handler
 * 	for that external interrupt is executing then you must use the return value
 * 	EXT_IRQ_DISABLE to return from the extern interrupt handler.
 */
static inline void PLIC_DisableIRQ(IRQn_Type IRQn)
{
80000238:	fd010113          	addi	sp,sp,-48
8000023c:	02812623          	sw	s0,44(sp)
80000240:	03010413          	addi	s0,sp,48
80000244:	fca42e23          	sw	a0,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:175
    unsigned long hart_id = read_csr(mhartid);
80000248:	f14027f3          	csrr	a5,mhartid
8000024c:	fef42623          	sw	a5,-20(s0)
80000250:	fec42783          	lw	a5,-20(s0)
80000254:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:176
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80000258:	40000737          	lui	a4,0x40000
8000025c:	fdc42783          	lw	a5,-36(s0)
80000260:	0057d793          	srli	a5,a5,0x5
80000264:	fe842683          	lw	a3,-24(s0)
80000268:	00569693          	slli	a3,a3,0x5
8000026c:	00f686b3          	add	a3,a3,a5
80000270:	000017b7          	lui	a5,0x1
80000274:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80000278:	00f687b3          	add	a5,a3,a5
8000027c:	00279793          	slli	a5,a5,0x2
80000280:	00f707b3          	add	a5,a4,a5
80000284:	0007a783          	lw	a5,0(a5)
80000288:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:178

    current &= ~((uint32_t)1 << (IRQn % 32));
8000028c:	fdc42783          	lw	a5,-36(s0)
80000290:	01f7f793          	andi	a5,a5,31
80000294:	00100713          	li	a4,1
80000298:	00f717b3          	sll	a5,a4,a5
8000029c:	fff7c793          	not	a5,a5
800002a0:	fe442703          	lw	a4,-28(s0)
800002a4:	00f777b3          	and	a5,a4,a5
800002a8:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:180

    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
800002ac:	40000737          	lui	a4,0x40000
800002b0:	fdc42783          	lw	a5,-36(s0)
800002b4:	0057d793          	srli	a5,a5,0x5
800002b8:	fe842683          	lw	a3,-24(s0)
800002bc:	00569693          	slli	a3,a3,0x5
800002c0:	00f686b3          	add	a3,a3,a5
800002c4:	000017b7          	lui	a5,0x1
800002c8:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
800002cc:	00f687b3          	add	a5,a3,a5
800002d0:	00279793          	slli	a5,a5,0x2
800002d4:	00f707b3          	add	a5,a4,a5
800002d8:	fe442703          	lw	a4,-28(s0)
800002dc:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:181
}
800002e0:	00000013          	nop
800002e4:	02c12403          	lw	s0,44(sp)
800002e8:	03010113          	addi	sp,sp,48
800002ec:	00008067          	ret

800002f0 <PLIC_ClaimIRQ>:
PLIC_ClaimIRQ():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:205

/*==============================================================================
 * The function PLIC_ClaimIRQ() claims the interrupt from the PLIC controller.
 */
static inline uint32_t PLIC_ClaimIRQ(void)
{
800002f0:	fe010113          	addi	sp,sp,-32
800002f4:	00812e23          	sw	s0,28(sp)
800002f8:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:206
    unsigned long hart_id = read_csr(mhartid);
800002fc:	f14027f3          	csrr	a5,mhartid
80000300:	fef42623          	sw	a5,-20(s0)
80000304:	fec42783          	lw	a5,-20(s0)
80000308:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:208

    return PLIC->TARGET[hart_id].CLAIM_COMPLETE;
8000030c:	40000737          	lui	a4,0x40000
80000310:	fe842783          	lw	a5,-24(s0)
80000314:	20078793          	addi	a5,a5,512
80000318:	00c79793          	slli	a5,a5,0xc
8000031c:	00f707b3          	add	a5,a4,a5
80000320:	0047a783          	lw	a5,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:209
}
80000324:	00078513          	mv	a0,a5
80000328:	01c12403          	lw	s0,28(sp)
8000032c:	02010113          	addi	sp,sp,32
80000330:	00008067          	ret

80000334 <PLIC_CompleteIRQ>:
PLIC_CompleteIRQ():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:216
/*==============================================================================
 * The function PLIC_CompleteIRQ() indicates to the PLIC controller the interrupt
 * is processed and claim is complete.
 */
static inline void PLIC_CompleteIRQ(uint32_t source)
{
80000334:	fd010113          	addi	sp,sp,-48
80000338:	02812623          	sw	s0,44(sp)
8000033c:	03010413          	addi	s0,sp,48
80000340:	fca42e23          	sw	a0,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:217
    unsigned long hart_id = read_csr(mhartid);
80000344:	f14027f3          	csrr	a5,mhartid
80000348:	fef42623          	sw	a5,-20(s0)
8000034c:	fec42783          	lw	a5,-20(s0)
80000350:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:219

    PLIC->TARGET[hart_id].CLAIM_COMPLETE = source;
80000354:	40000737          	lui	a4,0x40000
80000358:	fe842783          	lw	a5,-24(s0)
8000035c:	20078793          	addi	a5,a5,512
80000360:	00c79793          	slli	a5,a5,0xc
80000364:	00f707b3          	add	a5,a4,a5
80000368:	fdc42703          	lw	a4,-36(s0)
8000036c:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:220
}
80000370:	00000013          	nop
80000374:	02c12403          	lw	s0,44(sp)
80000378:	03010113          	addi	sp,sp,48
8000037c:	00008067          	ret

80000380 <__enable_irq>:
__enable_irq():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:96

/*------------------------------------------------------------------------------
 * Enabler all interrupts.
 */
void __enable_irq(void)
{
80000380:	fe010113          	addi	sp,sp,-32
80000384:	00812e23          	sw	s0,28(sp)
80000388:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:97
    set_csr(mstatus, MSTATUS_MIE);
8000038c:	300467f3          	csrrsi	a5,mstatus,8
80000390:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:98
}
80000394:	00000013          	nop
80000398:	01c12403          	lw	s0,28(sp)
8000039c:	02010113          	addi	sp,sp,32
800003a0:	00008067          	ret

800003a4 <handle_m_timer_interrupt>:
handle_m_timer_interrupt():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:128

/*------------------------------------------------------------------------------
 * RISC-V interrupt handler for machine timer interrupts.
 */
void handle_m_timer_interrupt()
{
800003a4:	fe010113          	addi	sp,sp,-32
800003a8:	00112e23          	sw	ra,28(sp)
800003ac:	00812c23          	sw	s0,24(sp)
800003b0:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:129
    clear_csr(mie, MIP_MTIP);
800003b4:	08000793          	li	a5,128
800003b8:	3047b7f3          	csrrc	a5,mie,a5
800003bc:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:131

    SysTick_Handler();
800003c0:	4c4010ef          	jal	ra,80001884 <SysTick_Handler>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:133

    PRCI->MTIMECMP[read_csr(mhartid)] = PRCI->MTIME + g_systick_increment;
800003c4:	44000737          	lui	a4,0x44000
800003c8:	0000c7b7          	lui	a5,0xc
800003cc:	00f707b3          	add	a5,a4,a5
800003d0:	ffc7a803          	lw	a6,-4(a5) # bffc <HEAP_SIZE-0x4004>
800003d4:	ff87a783          	lw	a5,-8(a5)
800003d8:	9001a583          	lw	a1,-1792(gp) # 80006f30 <__data_end>
800003dc:	9041a603          	lw	a2,-1788(gp) # 80006f34 <__data_end+0x4>
800003e0:	44000537          	lui	a0,0x44000
800003e4:	f1402773          	csrr	a4,mhartid
800003e8:	fee42423          	sw	a4,-24(s0)
800003ec:	fe842883          	lw	a7,-24(s0)
800003f0:	00b786b3          	add	a3,a5,a1
800003f4:	00068313          	mv	t1,a3
800003f8:	00f33333          	sltu	t1,t1,a5
800003fc:	00c80733          	add	a4,a6,a2
80000400:	00e307b3          	add	a5,t1,a4
80000404:	00078713          	mv	a4,a5
80000408:	00068793          	mv	a5,a3
8000040c:	00070813          	mv	a6,a4
80000410:	00001737          	lui	a4,0x1
80000414:	80070713          	addi	a4,a4,-2048 # 800 <HEAP_SIZE-0xf800>
80000418:	00e88733          	add	a4,a7,a4
8000041c:	00371713          	slli	a4,a4,0x3
80000420:	00e50733          	add	a4,a0,a4
80000424:	00f72023          	sw	a5,0(a4)
80000428:	01072223          	sw	a6,4(a4)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:135

    set_csr(mie, MIP_MTIP);
8000042c:	08000793          	li	a5,128
80000430:	3047a7f3          	csrrs	a5,mie,a5
80000434:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:136
}
80000438:	00000013          	nop
8000043c:	01c12083          	lw	ra,28(sp)
80000440:	01812403          	lw	s0,24(sp)
80000444:	02010113          	addi	sp,sp,32
80000448:	00008067          	ret

8000044c <handle_m_ext_interrupt>:
handle_m_ext_interrupt():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:181

/*------------------------------------------------------------------------------
 * 
 */
void handle_m_ext_interrupt()
{
8000044c:	fe010113          	addi	sp,sp,-32
80000450:	00112e23          	sw	ra,28(sp)
80000454:	00812c23          	sw	s0,24(sp)
80000458:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:182
    uint32_t int_num  = PLIC_ClaimIRQ();
8000045c:	e95ff0ef          	jal	ra,800002f0 <PLIC_ClaimIRQ>
80000460:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:183
    uint8_t disable = EXT_IRQ_KEEP_ENABLED;
80000464:	fe0405a3          	sb	zero,-21(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:185

    disable = ext_irq_handler_table[int_num]();
80000468:	800077b7          	lui	a5,0x80007
8000046c:	fec42703          	lw	a4,-20(s0)
80000470:	00271713          	slli	a4,a4,0x2
80000474:	e5078793          	addi	a5,a5,-432 # 80006e50 <__stack_top+0xfffc5860>
80000478:	00f707b3          	add	a5,a4,a5
8000047c:	0007a783          	lw	a5,0(a5)
80000480:	000780e7          	jalr	a5
80000484:	00050793          	mv	a5,a0
80000488:	fef405a3          	sb	a5,-21(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:187

    PLIC_CompleteIRQ(int_num);
8000048c:	fec42503          	lw	a0,-20(s0)
80000490:	ea5ff0ef          	jal	ra,80000334 <PLIC_CompleteIRQ>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:189

    if(EXT_IRQ_DISABLE == disable)
80000494:	feb44703          	lbu	a4,-21(s0)
80000498:	00100793          	li	a5,1
8000049c:	00f71663          	bne	a4,a5,800004a8 <handle_m_ext_interrupt+0x5c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:191
    {
        PLIC_DisableIRQ((IRQn_Type)int_num);
800004a0:	fec42503          	lw	a0,-20(s0)
800004a4:	d95ff0ef          	jal	ra,80000238 <PLIC_DisableIRQ>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:193
    }
}
800004a8:	00000013          	nop
800004ac:	01c12083          	lw	ra,28(sp)
800004b0:	01812403          	lw	s0,24(sp)
800004b4:	02010113          	addi	sp,sp,32
800004b8:	00008067          	ret

800004bc <handle_m_soft_interrupt>:
handle_m_soft_interrupt():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:196

void handle_m_soft_interrupt()
{
800004bc:	ff010113          	addi	sp,sp,-16
800004c0:	00112623          	sw	ra,12(sp)
800004c4:	00812423          	sw	s0,8(sp)
800004c8:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:197
    Software_IRQHandler();
800004cc:	4c8010ef          	jal	ra,80001994 <Software_IRQHandler>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:200

    /*Clear software interrupt*/
    PRCI->MSIP[0] = 0x00;
800004d0:	440007b7          	lui	a5,0x44000
800004d4:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:201
}
800004d8:	00000013          	nop
800004dc:	00c12083          	lw	ra,12(sp)
800004e0:	00812403          	lw	s0,8(sp)
800004e4:	01010113          	addi	sp,sp,16
800004e8:	00008067          	ret

800004ec <handle_syscall>:
handle_syscall():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:204

/* syscall funcion defined at system_call.c */
unsigned int handle_syscall(){
800004ec:	fd010113          	addi	sp,sp,-48
800004f0:	02112623          	sw	ra,44(sp)
800004f4:	02812423          	sw	s0,40(sp)
800004f8:	03212223          	sw	s2,36(sp)
800004fc:	03010413          	addi	s0,sp,48
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:207
	unsigned int arg0, arg1, arg2, arg3, arg4, arg5, type;
	unsigned int *pointer;
	register long temp asm("s2") = 0;
80000500:	00000913          	li	s2,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:208
	asm("addi	s2, sp, 0");
80000504:	00010913          	mv	s2,sp
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:210
	
	pointer = (unsigned int *)(temp + (29*4));
80000508:	00090793          	mv	a5,s2
8000050c:	07478793          	addi	a5,a5,116
80000510:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:211
	arg0 =  *pointer;
80000514:	fec42783          	lw	a5,-20(s0)
80000518:	0007a783          	lw	a5,0(a5)
8000051c:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:213

	pointer = (unsigned int *)(temp + (30*4));
80000520:	00090793          	mv	a5,s2
80000524:	07878793          	addi	a5,a5,120
80000528:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:214
	arg1 = *pointer;
8000052c:	fec42783          	lw	a5,-20(s0)
80000530:	0007a783          	lw	a5,0(a5)
80000534:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:216
	
	pointer = (unsigned int *)(temp + (31*4));
80000538:	00090793          	mv	a5,s2
8000053c:	07c78793          	addi	a5,a5,124
80000540:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:217
	arg2 = *pointer;
80000544:	fec42783          	lw	a5,-20(s0)
80000548:	0007a783          	lw	a5,0(a5)
8000054c:	fef42023          	sw	a5,-32(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:219

	pointer = (unsigned int *)(temp + (32*4));
80000550:	00090793          	mv	a5,s2
80000554:	08078793          	addi	a5,a5,128
80000558:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:220
	arg3 = *pointer;
8000055c:	fec42783          	lw	a5,-20(s0)
80000560:	0007a783          	lw	a5,0(a5)
80000564:	fcf42e23          	sw	a5,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:222

	pointer = (unsigned int *)(temp + (33*4));
80000568:	00090793          	mv	a5,s2
8000056c:	08478793          	addi	a5,a5,132
80000570:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:223
	arg4 = *pointer;
80000574:	fec42783          	lw	a5,-20(s0)
80000578:	0007a783          	lw	a5,0(a5)
8000057c:	fcf42c23          	sw	a5,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:225

	pointer = (unsigned int *)(temp + (34*4));
80000580:	00090793          	mv	a5,s2
80000584:	08878793          	addi	a5,a5,136
80000588:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:226
	arg4 = *pointer;
8000058c:	fec42783          	lw	a5,-20(s0)
80000590:	0007a783          	lw	a5,0(a5)
80000594:	fcf42c23          	sw	a5,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:228

	pointer = (unsigned int *)(temp + (36*4));
80000598:	00090793          	mv	a5,s2
8000059c:	09078793          	addi	a5,a5,144
800005a0:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:229
	type = *pointer;
800005a4:	fec42783          	lw	a5,-20(s0)
800005a8:	0007a783          	lw	a5,0(a5)
800005ac:	fcf42a23          	sw	a5,-44(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:231
	
	switch (type){
800005b0:	fd442783          	lw	a5,-44(s0)
800005b4:	ff678793          	addi	a5,a5,-10
800005b8:	03800713          	li	a4,56
800005bc:	12f76663          	bltu	a4,a5,800006e8 <handle_syscall+0x1fc>
800005c0:	00279713          	slli	a4,a5,0x2
800005c4:	800077b7          	lui	a5,0x80007
800005c8:	95878793          	addi	a5,a5,-1704 # 80006958 <__stack_top+0xfffc5368>
800005cc:	00f707b3          	add	a5,a4,a5
800005d0:	0007a783          	lw	a5,0(a5)
800005d4:	00078067          	jr	a5
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:234

		case SYS_TESTING:
			prints("Detectei uma chamada TESTE de sistema!\n");
800005d8:	800077b7          	lui	a5,0x80007
800005dc:	8d878513          	addi	a0,a5,-1832 # 800068d8 <__stack_top+0xfffc52e8>
800005e0:	7b8020ef          	jal	ra,80002d98 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:235
			printsv("arg0 ", arg0);
800005e4:	fe842783          	lw	a5,-24(s0)
800005e8:	00078593          	mv	a1,a5
800005ec:	800077b7          	lui	a5,0x80007
800005f0:	90078513          	addi	a0,a5,-1792 # 80006900 <__stack_top+0xfffc5310>
800005f4:	051020ef          	jal	ra,80002e44 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:236
			printsv("arg1 ", arg1);
800005f8:	fe442783          	lw	a5,-28(s0)
800005fc:	00078593          	mv	a1,a5
80000600:	800077b7          	lui	a5,0x80007
80000604:	90878513          	addi	a0,a5,-1784 # 80006908 <__stack_top+0xfffc5318>
80000608:	03d020ef          	jal	ra,80002e44 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:237
			printsv("arg2 ", arg2);
8000060c:	fe042783          	lw	a5,-32(s0)
80000610:	00078593          	mv	a1,a5
80000614:	800077b7          	lui	a5,0x80007
80000618:	91078513          	addi	a0,a5,-1776 # 80006910 <__stack_top+0xfffc5320>
8000061c:	029020ef          	jal	ra,80002e44 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:238
			printsv("arg3 ", arg3);
80000620:	fdc42783          	lw	a5,-36(s0)
80000624:	00078593          	mv	a1,a5
80000628:	800077b7          	lui	a5,0x80007
8000062c:	91878513          	addi	a0,a5,-1768 # 80006918 <__stack_top+0xfffc5328>
80000630:	015020ef          	jal	ra,80002e44 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:239
			printsv("arg4 ", arg4);
80000634:	fd842783          	lw	a5,-40(s0)
80000638:	00078593          	mv	a1,a5
8000063c:	800077b7          	lui	a5,0x80007
80000640:	92078513          	addi	a0,a5,-1760 # 80006920 <__stack_top+0xfffc5330>
80000644:	001020ef          	jal	ra,80002e44 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:240
			printsv("type ", type);
80000648:	fd442783          	lw	a5,-44(s0)
8000064c:	00078593          	mv	a1,a5
80000650:	800077b7          	lui	a5,0x80007
80000654:	92878513          	addi	a0,a5,-1752 # 80006928 <__stack_top+0xfffc5338>
80000658:	7ec020ef          	jal	ra,80002e44 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:241
			break;
8000065c:	1140006f          	j	80000770 <handle_syscall+0x284>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:244

        case SYS_PRINTS:
            prints(arg0);
80000660:	fe842783          	lw	a5,-24(s0)
80000664:	00078513          	mv	a0,a5
80000668:	730020ef          	jal	ra,80002d98 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:245
            UART_polled_tx_string( &g_uart, arg0 );
8000066c:	fe842783          	lw	a5,-24(s0)
80000670:	00078593          	mv	a1,a5
80000674:	800217b7          	lui	a5,0x80021
80000678:	5e078513          	addi	a0,a5,1504 # 800215e0 <__stack_top+0xfffdfff0>
8000067c:	325000ef          	jal	ra,800011a0 <UART_polled_tx_string>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:246
            break;
80000680:	0f00006f          	j	80000770 <handle_syscall+0x284>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:249
        
        case SYS_PRINTI:
            printi(arg0);
80000684:	fe842783          	lw	a5,-24(s0)
80000688:	00078513          	mv	a0,a5
8000068c:	77c020ef          	jal	ra,80002e08 <printi>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:250
            myItoa(arg0, str, 10);
80000690:	fe842703          	lw	a4,-24(s0)
80000694:	00a00613          	li	a2,10
80000698:	800207b7          	lui	a5,0x80020
8000069c:	1b878593          	addi	a1,a5,440 # 800201b8 <__stack_top+0xfffdebc8>
800006a0:	00070513          	mv	a0,a4
800006a4:	751020ef          	jal	ra,800035f4 <myItoa>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:251
            UART_polled_tx_string( &g_uart, (const uint8_t *)str );
800006a8:	800207b7          	lui	a5,0x80020
800006ac:	1b878593          	addi	a1,a5,440 # 800201b8 <__stack_top+0xfffdebc8>
800006b0:	800217b7          	lui	a5,0x80021
800006b4:	5e078513          	addi	a0,a5,1504 # 800215e0 <__stack_top+0xfffdfff0>
800006b8:	2e9000ef          	jal	ra,800011a0 <UART_polled_tx_string>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:252
            break;
800006bc:	0b40006f          	j	80000770 <handle_syscall+0x284>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:256
        
        case SYS_SEND_MSG:
            //              addr, task
            API_SendMessage(arg0, arg1);
800006c0:	fe442583          	lw	a1,-28(s0)
800006c4:	fe842503          	lw	a0,-24(s0)
800006c8:	480030ef          	jal	ra,80003b48 <API_SendMessage>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:257
            break;
800006cc:	0a40006f          	j	80000770 <handle_syscall+0x284>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:261
        
        case SYS_RECV_MSG:
            //                 addr, task
            API_SendMessageReq(arg0, arg1);
800006d0:	fe442583          	lw	a1,-28(s0)
800006d4:	fe842503          	lw	a0,-24(s0)
800006d8:	0d1030ef          	jal	ra,80003fa8 <API_SendMessageReq>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:262
            break;
800006dc:	0940006f          	j	80000770 <handle_syscall+0x284>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:265
        
        case SYS_END_TASK:
            API_FinishRunningTask();
800006e0:	09d050ef          	jal	ra,80005f7c <API_FinishRunningTask>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:266
            break;
800006e4:	08c0006f          	j	80000770 <handle_syscall+0x284>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:269

		default:
			prints("Systemcall não identificada!\n");
800006e8:	800077b7          	lui	a5,0x80007
800006ec:	93078513          	addi	a0,a5,-1744 # 80006930 <__stack_top+0xfffc5340>
800006f0:	6a8020ef          	jal	ra,80002d98 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:270
			printsv("arg0 ", arg0);
800006f4:	fe842783          	lw	a5,-24(s0)
800006f8:	00078593          	mv	a1,a5
800006fc:	800077b7          	lui	a5,0x80007
80000700:	90078513          	addi	a0,a5,-1792 # 80006900 <__stack_top+0xfffc5310>
80000704:	740020ef          	jal	ra,80002e44 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:271
			printsv("arg1 ", arg1);
80000708:	fe442783          	lw	a5,-28(s0)
8000070c:	00078593          	mv	a1,a5
80000710:	800077b7          	lui	a5,0x80007
80000714:	90878513          	addi	a0,a5,-1784 # 80006908 <__stack_top+0xfffc5318>
80000718:	72c020ef          	jal	ra,80002e44 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:272
			printsv("arg2 ", arg2);
8000071c:	fe042783          	lw	a5,-32(s0)
80000720:	00078593          	mv	a1,a5
80000724:	800077b7          	lui	a5,0x80007
80000728:	91078513          	addi	a0,a5,-1776 # 80006910 <__stack_top+0xfffc5320>
8000072c:	718020ef          	jal	ra,80002e44 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:273
			printsv("arg3 ", arg3);
80000730:	fdc42783          	lw	a5,-36(s0)
80000734:	00078593          	mv	a1,a5
80000738:	800077b7          	lui	a5,0x80007
8000073c:	91878513          	addi	a0,a5,-1768 # 80006918 <__stack_top+0xfffc5328>
80000740:	704020ef          	jal	ra,80002e44 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:274
			printsv("arg4 ", arg4);
80000744:	fd842783          	lw	a5,-40(s0)
80000748:	00078593          	mv	a1,a5
8000074c:	800077b7          	lui	a5,0x80007
80000750:	92078513          	addi	a0,a5,-1760 # 80006920 <__stack_top+0xfffc5330>
80000754:	6f0020ef          	jal	ra,80002e44 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:275
			printsv("type ", type);
80000758:	fd442783          	lw	a5,-44(s0)
8000075c:	00078593          	mv	a1,a5
80000760:	800077b7          	lui	a5,0x80007
80000764:	92878513          	addi	a0,a5,-1752 # 80006928 <__stack_top+0xfffc5338>
80000768:	6dc020ef          	jal	ra,80002e44 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:276
			break;
8000076c:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:278
	}
	return 42;
80000770:	02a00793          	li	a5,42
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:293
	// 	value = *p;
	// 	printsvsv("i: ", i, " value: ", value);
	// }
    // prints("Cheguei aqui!!!!!!! sucessooo :D\n");
	////////////////////////////////////////////////////
}
80000774:	00078513          	mv	a0,a5
80000778:	02c12083          	lw	ra,44(sp)
8000077c:	02812403          	lw	s0,40(sp)
80000780:	02412903          	lw	s2,36(sp)
80000784:	03010113          	addi	sp,sp,48
80000788:	00008067          	ret

8000078c <handle_trap>:
handle_trap():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:299

/*------------------------------------------------------------------------------
 * Trap/Interrupt handler
 */
uintptr_t handle_trap(uintptr_t mcause, uintptr_t epc)
{
8000078c:	fe010113          	addi	sp,sp,-32
80000790:	00112e23          	sw	ra,28(sp)
80000794:	00812c23          	sw	s0,24(sp)
80000798:	02010413          	addi	s0,sp,32
8000079c:	fea42623          	sw	a0,-20(s0)
800007a0:	feb42423          	sw	a1,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:300
    if (mcause == ENV_CALL_M || mcause == ENV_CALL_H || mcause == ENV_CALL_S || mcause == ENV_CALL_U){
800007a4:	fec42703          	lw	a4,-20(s0)
800007a8:	00b00793          	li	a5,11
800007ac:	02f70463          	beq	a4,a5,800007d4 <handle_trap+0x48>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:300 (discriminator 1)
800007b0:	fec42703          	lw	a4,-20(s0)
800007b4:	00a00793          	li	a5,10
800007b8:	00f70e63          	beq	a4,a5,800007d4 <handle_trap+0x48>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:300 (discriminator 2)
800007bc:	fec42703          	lw	a4,-20(s0)
800007c0:	00900793          	li	a5,9
800007c4:	00f70863          	beq	a4,a5,800007d4 <handle_trap+0x48>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:300 (discriminator 3)
800007c8:	fec42703          	lw	a4,-20(s0)
800007cc:	00800793          	li	a5,8
800007d0:	00f71c63          	bne	a4,a5,800007e8 <handle_trap+0x5c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:301
        handle_syscall();
800007d4:	d19ff0ef          	jal	ra,800004ec <handle_syscall>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:302
        epc = (uintptr_t) (epc + 4);
800007d8:	fe842783          	lw	a5,-24(s0)
800007dc:	00478793          	addi	a5,a5,4
800007e0:	fef42423          	sw	a5,-24(s0)
800007e4:	0a00006f          	j	80000884 <handle_trap+0xf8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:304
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_EXT)){
800007e8:	fec42783          	lw	a5,-20(s0)
800007ec:	0207d263          	bgez	a5,80000810 <handle_trap+0x84>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:304 (discriminator 1)
800007f0:	fec42703          	lw	a4,-20(s0)
800007f4:	800007b7          	lui	a5,0x80000
800007f8:	fff7c793          	not	a5,a5
800007fc:	00f77733          	and	a4,a4,a5
80000800:	00b00793          	li	a5,11
80000804:	00f71663          	bne	a4,a5,80000810 <handle_trap+0x84>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:305
        handle_m_ext_interrupt();
80000808:	c45ff0ef          	jal	ra,8000044c <handle_m_ext_interrupt>
8000080c:	0780006f          	j	80000884 <handle_trap+0xf8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:307
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_TIMER)){
80000810:	fec42783          	lw	a5,-20(s0)
80000814:	0207d263          	bgez	a5,80000838 <handle_trap+0xac>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:307 (discriminator 1)
80000818:	fec42703          	lw	a4,-20(s0)
8000081c:	800007b7          	lui	a5,0x80000
80000820:	fff7c793          	not	a5,a5
80000824:	00f77733          	and	a4,a4,a5
80000828:	00700793          	li	a5,7
8000082c:	00f71663          	bne	a4,a5,80000838 <handle_trap+0xac>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:308
        handle_m_timer_interrupt();
80000830:	b75ff0ef          	jal	ra,800003a4 <handle_m_timer_interrupt>
80000834:	0500006f          	j	80000884 <handle_trap+0xf8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:310
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_SOFT)){
80000838:	fec42783          	lw	a5,-20(s0)
8000083c:	0207d263          	bgez	a5,80000860 <handle_trap+0xd4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:310 (discriminator 1)
80000840:	fec42703          	lw	a4,-20(s0)
80000844:	800007b7          	lui	a5,0x80000
80000848:	fff7c793          	not	a5,a5
8000084c:	00f77733          	and	a4,a4,a5
80000850:	00300793          	li	a5,3
80000854:	00f71663          	bne	a4,a5,80000860 <handle_trap+0xd4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:311
        handle_m_soft_interrupt();
80000858:	c65ff0ef          	jal	ra,800004bc <handle_m_soft_interrupt>
8000085c:	0280006f          	j	80000884 <handle_trap+0xf8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:314
    }
    else{
        write(1, "trap\n", 5);
80000860:	00500613          	li	a2,5
80000864:	800077b7          	lui	a5,0x80007
80000868:	95078593          	addi	a1,a5,-1712 # 80006950 <__stack_top+0xfffc5360>
8000086c:	00100513          	li	a0,1
80000870:	7e5050ef          	jal	ra,80006854 <write>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:315
        _exit(1 + mcause);
80000874:	fec42783          	lw	a5,-20(s0)
80000878:	00178793          	addi	a5,a5,1
8000087c:	00078513          	mv	a0,a5
80000880:	4c4000ef          	jal	ra,80000d44 <_exit>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:317
    }
    return epc;
80000884:	fe842783          	lw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:318
}
80000888:	00078513          	mv	a0,a5
8000088c:	01c12083          	lw	ra,28(sp)
80000890:	01812403          	lw	s0,24(sp)
80000894:	02010113          	addi	sp,sp,32
80000898:	00008067          	ret

8000089c <Invalid_IRQHandler>:
Invalid_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:37
{
    ;
}

__attribute__((weak))  uint8_t Invalid_IRQHandler(void)
{
8000089c:	ff010113          	addi	sp,sp,-16
800008a0:	00812623          	sw	s0,12(sp)
800008a4:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:38
    return(0);
800008a8:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:39
}
800008ac:	00078513          	mv	a0,a5
800008b0:	00c12403          	lw	s0,12(sp)
800008b4:	01010113          	addi	sp,sp,16
800008b8:	00008067          	ret

800008bc <External_3_IRQHandler>:
External_3_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:52
{
    return(0);
}

__attribute__((weak))  uint8_t External_3_IRQHandler(void)
{
800008bc:	ff010113          	addi	sp,sp,-16
800008c0:	00812623          	sw	s0,12(sp)
800008c4:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:53
    return(0);
800008c8:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:54
}
800008cc:	00078513          	mv	a0,a5
800008d0:	00c12403          	lw	s0,12(sp)
800008d4:	01010113          	addi	sp,sp,16
800008d8:	00008067          	ret

800008dc <External_4_IRQHandler>:
External_4_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:57

__attribute__((weak))  uint8_t External_4_IRQHandler(void)
{
800008dc:	ff010113          	addi	sp,sp,-16
800008e0:	00812623          	sw	s0,12(sp)
800008e4:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:58
    return(0);
800008e8:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:59
}
800008ec:	00078513          	mv	a0,a5
800008f0:	00c12403          	lw	s0,12(sp)
800008f4:	01010113          	addi	sp,sp,16
800008f8:	00008067          	ret

800008fc <External_5_IRQHandler>:
External_5_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:62

__attribute__((weak))  uint8_t External_5_IRQHandler(void)
{
800008fc:	ff010113          	addi	sp,sp,-16
80000900:	00812623          	sw	s0,12(sp)
80000904:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:63
    return(0);
80000908:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:64
}
8000090c:	00078513          	mv	a0,a5
80000910:	00c12403          	lw	s0,12(sp)
80000914:	01010113          	addi	sp,sp,16
80000918:	00008067          	ret

8000091c <External_6_IRQHandler>:
External_6_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:67

__attribute__((weak))  uint8_t External_6_IRQHandler(void)
{
8000091c:	ff010113          	addi	sp,sp,-16
80000920:	00812623          	sw	s0,12(sp)
80000924:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:68
    return(0);
80000928:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:69
}
8000092c:	00078513          	mv	a0,a5
80000930:	00c12403          	lw	s0,12(sp)
80000934:	01010113          	addi	sp,sp,16
80000938:	00008067          	ret

8000093c <External_7_IRQHandler>:
External_7_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:72

__attribute__((weak))  uint8_t External_7_IRQHandler(void)
{
8000093c:	ff010113          	addi	sp,sp,-16
80000940:	00812623          	sw	s0,12(sp)
80000944:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:73
    return(0);
80000948:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:74
}
8000094c:	00078513          	mv	a0,a5
80000950:	00c12403          	lw	s0,12(sp)
80000954:	01010113          	addi	sp,sp,16
80000958:	00008067          	ret

8000095c <External_8_IRQHandler>:
External_8_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:77

__attribute__((weak))  uint8_t External_8_IRQHandler(void)
{
8000095c:	ff010113          	addi	sp,sp,-16
80000960:	00812623          	sw	s0,12(sp)
80000964:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:78
    return(0);
80000968:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:79
}
8000096c:	00078513          	mv	a0,a5
80000970:	00c12403          	lw	s0,12(sp)
80000974:	01010113          	addi	sp,sp,16
80000978:	00008067          	ret

8000097c <External_9_IRQHandler>:
External_9_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:82

__attribute__((weak))  uint8_t External_9_IRQHandler(void)
{
8000097c:	ff010113          	addi	sp,sp,-16
80000980:	00812623          	sw	s0,12(sp)
80000984:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:83
    return(0);
80000988:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:84
}
8000098c:	00078513          	mv	a0,a5
80000990:	00c12403          	lw	s0,12(sp)
80000994:	01010113          	addi	sp,sp,16
80000998:	00008067          	ret

8000099c <External_10_IRQHandler>:
External_10_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:87

__attribute__((weak))  uint8_t External_10_IRQHandler(void)
{
8000099c:	ff010113          	addi	sp,sp,-16
800009a0:	00812623          	sw	s0,12(sp)
800009a4:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:88
    return(0);
800009a8:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:89
}
800009ac:	00078513          	mv	a0,a5
800009b0:	00c12403          	lw	s0,12(sp)
800009b4:	01010113          	addi	sp,sp,16
800009b8:	00008067          	ret

800009bc <External_11_IRQHandler>:
External_11_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:92

__attribute__((weak))  uint8_t External_11_IRQHandler(void)
{
800009bc:	ff010113          	addi	sp,sp,-16
800009c0:	00812623          	sw	s0,12(sp)
800009c4:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:93
    return(0);
800009c8:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:94
}
800009cc:	00078513          	mv	a0,a5
800009d0:	00c12403          	lw	s0,12(sp)
800009d4:	01010113          	addi	sp,sp,16
800009d8:	00008067          	ret

800009dc <External_12_IRQHandler>:
External_12_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:97

__attribute__((weak))  uint8_t External_12_IRQHandler(void)
{
800009dc:	ff010113          	addi	sp,sp,-16
800009e0:	00812623          	sw	s0,12(sp)
800009e4:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:98
    return(0);
800009e8:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:99
}
800009ec:	00078513          	mv	a0,a5
800009f0:	00c12403          	lw	s0,12(sp)
800009f4:	01010113          	addi	sp,sp,16
800009f8:	00008067          	ret

800009fc <External_13_IRQHandler>:
External_13_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:102

__attribute__((weak))  uint8_t External_13_IRQHandler(void)
{
800009fc:	ff010113          	addi	sp,sp,-16
80000a00:	00812623          	sw	s0,12(sp)
80000a04:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:103
    return(0);
80000a08:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:104
}
80000a0c:	00078513          	mv	a0,a5
80000a10:	00c12403          	lw	s0,12(sp)
80000a14:	01010113          	addi	sp,sp,16
80000a18:	00008067          	ret

80000a1c <External_14_IRQHandler>:
External_14_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:107

__attribute__((weak))  uint8_t External_14_IRQHandler(void)
{
80000a1c:	ff010113          	addi	sp,sp,-16
80000a20:	00812623          	sw	s0,12(sp)
80000a24:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:108
    return(0);
80000a28:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:109
}
80000a2c:	00078513          	mv	a0,a5
80000a30:	00c12403          	lw	s0,12(sp)
80000a34:	01010113          	addi	sp,sp,16
80000a38:	00008067          	ret

80000a3c <External_15_IRQHandler>:
External_15_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:112

__attribute__((weak))  uint8_t External_15_IRQHandler(void)
{
80000a3c:	ff010113          	addi	sp,sp,-16
80000a40:	00812623          	sw	s0,12(sp)
80000a44:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:113
    return(0);
80000a48:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:114
}
80000a4c:	00078513          	mv	a0,a5
80000a50:	00c12403          	lw	s0,12(sp)
80000a54:	01010113          	addi	sp,sp,16
80000a58:	00008067          	ret

80000a5c <External_16_IRQHandler>:
External_16_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:117

__attribute__((weak))  uint8_t External_16_IRQHandler(void)
{
80000a5c:	ff010113          	addi	sp,sp,-16
80000a60:	00812623          	sw	s0,12(sp)
80000a64:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:118
    return(0);
80000a68:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:119
}
80000a6c:	00078513          	mv	a0,a5
80000a70:	00c12403          	lw	s0,12(sp)
80000a74:	01010113          	addi	sp,sp,16
80000a78:	00008067          	ret

80000a7c <External_17_IRQHandler>:
External_17_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:122

__attribute__((weak))  uint8_t External_17_IRQHandler(void)
{
80000a7c:	ff010113          	addi	sp,sp,-16
80000a80:	00812623          	sw	s0,12(sp)
80000a84:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:123
    return(0);
80000a88:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:124
}
80000a8c:	00078513          	mv	a0,a5
80000a90:	00c12403          	lw	s0,12(sp)
80000a94:	01010113          	addi	sp,sp,16
80000a98:	00008067          	ret

80000a9c <External_18_IRQHandler>:
External_18_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:127

__attribute__((weak))  uint8_t External_18_IRQHandler(void)
{
80000a9c:	ff010113          	addi	sp,sp,-16
80000aa0:	00812623          	sw	s0,12(sp)
80000aa4:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:128
    return(0);
80000aa8:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:129
}
80000aac:	00078513          	mv	a0,a5
80000ab0:	00c12403          	lw	s0,12(sp)
80000ab4:	01010113          	addi	sp,sp,16
80000ab8:	00008067          	ret

80000abc <External_19_IRQHandler>:
External_19_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:132

__attribute__((weak))  uint8_t External_19_IRQHandler(void)
{
80000abc:	ff010113          	addi	sp,sp,-16
80000ac0:	00812623          	sw	s0,12(sp)
80000ac4:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:133
    return(0);
80000ac8:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:134
}
80000acc:	00078513          	mv	a0,a5
80000ad0:	00c12403          	lw	s0,12(sp)
80000ad4:	01010113          	addi	sp,sp,16
80000ad8:	00008067          	ret

80000adc <External_20_IRQHandler>:
External_20_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:137

__attribute__((weak))  uint8_t External_20_IRQHandler(void)
{
80000adc:	ff010113          	addi	sp,sp,-16
80000ae0:	00812623          	sw	s0,12(sp)
80000ae4:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:138
    return(0);
80000ae8:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:139
}
80000aec:	00078513          	mv	a0,a5
80000af0:	00c12403          	lw	s0,12(sp)
80000af4:	01010113          	addi	sp,sp,16
80000af8:	00008067          	ret

80000afc <External_21_IRQHandler>:
External_21_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:142

__attribute__((weak))  uint8_t External_21_IRQHandler(void)
{
80000afc:	ff010113          	addi	sp,sp,-16
80000b00:	00812623          	sw	s0,12(sp)
80000b04:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:143
    return(0);
80000b08:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:144
}
80000b0c:	00078513          	mv	a0,a5
80000b10:	00c12403          	lw	s0,12(sp)
80000b14:	01010113          	addi	sp,sp,16
80000b18:	00008067          	ret

80000b1c <External_22_IRQHandler>:
External_22_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:147

__attribute__((weak))  uint8_t External_22_IRQHandler(void)
{
80000b1c:	ff010113          	addi	sp,sp,-16
80000b20:	00812623          	sw	s0,12(sp)
80000b24:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:148
    return(0);
80000b28:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:149
}
80000b2c:	00078513          	mv	a0,a5
80000b30:	00c12403          	lw	s0,12(sp)
80000b34:	01010113          	addi	sp,sp,16
80000b38:	00008067          	ret

80000b3c <External_23_IRQHandler>:
External_23_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:152

__attribute__((weak))  uint8_t External_23_IRQHandler(void)
{
80000b3c:	ff010113          	addi	sp,sp,-16
80000b40:	00812623          	sw	s0,12(sp)
80000b44:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:153
    return(0);
80000b48:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:154
}
80000b4c:	00078513          	mv	a0,a5
80000b50:	00c12403          	lw	s0,12(sp)
80000b54:	01010113          	addi	sp,sp,16
80000b58:	00008067          	ret

80000b5c <External_24_IRQHandler>:
External_24_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:157

__attribute__((weak))  uint8_t External_24_IRQHandler(void)
{
80000b5c:	ff010113          	addi	sp,sp,-16
80000b60:	00812623          	sw	s0,12(sp)
80000b64:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:158
    return(0);
80000b68:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:159
}
80000b6c:	00078513          	mv	a0,a5
80000b70:	00c12403          	lw	s0,12(sp)
80000b74:	01010113          	addi	sp,sp,16
80000b78:	00008067          	ret

80000b7c <External_25_IRQHandler>:
External_25_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:162

__attribute__((weak))  uint8_t External_25_IRQHandler(void)
{
80000b7c:	ff010113          	addi	sp,sp,-16
80000b80:	00812623          	sw	s0,12(sp)
80000b84:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:163
    return(0);
80000b88:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:164
}
80000b8c:	00078513          	mv	a0,a5
80000b90:	00c12403          	lw	s0,12(sp)
80000b94:	01010113          	addi	sp,sp,16
80000b98:	00008067          	ret

80000b9c <External_26_IRQHandler>:
External_26_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:167

__attribute__((weak))  uint8_t External_26_IRQHandler(void)
{
80000b9c:	ff010113          	addi	sp,sp,-16
80000ba0:	00812623          	sw	s0,12(sp)
80000ba4:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:168
    return(0);
80000ba8:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:169
}
80000bac:	00078513          	mv	a0,a5
80000bb0:	00c12403          	lw	s0,12(sp)
80000bb4:	01010113          	addi	sp,sp,16
80000bb8:	00008067          	ret

80000bbc <External_27_IRQHandler>:
External_27_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:172

__attribute__((weak))  uint8_t External_27_IRQHandler(void)
{
80000bbc:	ff010113          	addi	sp,sp,-16
80000bc0:	00812623          	sw	s0,12(sp)
80000bc4:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:173
    return(0);
80000bc8:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:174
}
80000bcc:	00078513          	mv	a0,a5
80000bd0:	00c12403          	lw	s0,12(sp)
80000bd4:	01010113          	addi	sp,sp,16
80000bd8:	00008067          	ret

80000bdc <External_28_IRQHandler>:
External_28_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:177

__attribute__((weak))  uint8_t External_28_IRQHandler(void)
{
80000bdc:	ff010113          	addi	sp,sp,-16
80000be0:	00812623          	sw	s0,12(sp)
80000be4:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:178
    return(0);
80000be8:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:179
}
80000bec:	00078513          	mv	a0,a5
80000bf0:	00c12403          	lw	s0,12(sp)
80000bf4:	01010113          	addi	sp,sp,16
80000bf8:	00008067          	ret

80000bfc <External_29_IRQHandler>:
External_29_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:182

__attribute__((weak))  uint8_t External_29_IRQHandler(void)
{
80000bfc:	ff010113          	addi	sp,sp,-16
80000c00:	00812623          	sw	s0,12(sp)
80000c04:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:183
    return(0);
80000c08:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:184
}
80000c0c:	00078513          	mv	a0,a5
80000c10:	00c12403          	lw	s0,12(sp)
80000c14:	01010113          	addi	sp,sp,16
80000c18:	00008067          	ret

80000c1c <External_30_IRQHandler>:
External_30_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:187

__attribute__((weak))  uint8_t External_30_IRQHandler(void)
{
80000c1c:	ff010113          	addi	sp,sp,-16
80000c20:	00812623          	sw	s0,12(sp)
80000c24:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:188
    return(0);
80000c28:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:189
}
80000c2c:	00078513          	mv	a0,a5
80000c30:	00c12403          	lw	s0,12(sp)
80000c34:	01010113          	addi	sp,sp,16
80000c38:	00008067          	ret

80000c3c <External_31_IRQHandler>:
External_31_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:192

__attribute__((weak))  uint8_t External_31_IRQHandler(void)
{
80000c3c:	ff010113          	addi	sp,sp,-16
80000c40:	00812623          	sw	s0,12(sp)
80000c44:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:193
    return(0);
80000c48:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:194
}
80000c4c:	00078513          	mv	a0,a5
80000c50:	00c12403          	lw	s0,12(sp)
80000c54:	01010113          	addi	sp,sp,16
80000c58:	00008067          	ret

80000c5c <write_hex>:
write_hex():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:55

char *__env[1] = { 0 };
char **environ = __env;

void write_hex(int fd, uint32_t hex)
{
80000c5c:	fd010113          	addi	sp,sp,-48
80000c60:	02112623          	sw	ra,44(sp)
80000c64:	02812423          	sw	s0,40(sp)
80000c68:	03010413          	addi	s0,sp,48
80000c6c:	fca42e23          	sw	a0,-36(s0)
80000c70:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:61
    uint8_t ii;
    uint8_t jj;
    char towrite;
    uint8_t digit;

    write( fd , "0x", 2 );
80000c74:	00200613          	li	a2,2
80000c78:	800077b7          	lui	a5,0x80007
80000c7c:	a3c78593          	addi	a1,a5,-1476 # 80006a3c <__stack_top+0xfffc544c>
80000c80:	fdc42503          	lw	a0,-36(s0)
80000c84:	3d1050ef          	jal	ra,80006854 <write>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:63

    for (ii = 8 ; ii > 0; ii--)
80000c88:	00800793          	li	a5,8
80000c8c:	fef407a3          	sb	a5,-17(s0)
80000c90:	0980006f          	j	80000d28 <write_hex+0xcc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:65
    {
        jj = ii-1;
80000c94:	fef44783          	lbu	a5,-17(s0)
80000c98:	fff78793          	addi	a5,a5,-1
80000c9c:	fef40723          	sb	a5,-18(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:66
        digit = ((hex & (0xF << (jj*4))) >> (jj*4));
80000ca0:	fee44783          	lbu	a5,-18(s0)
80000ca4:	00279793          	slli	a5,a5,0x2
80000ca8:	00f00713          	li	a4,15
80000cac:	00f717b3          	sll	a5,a4,a5
80000cb0:	00078713          	mv	a4,a5
80000cb4:	fd842783          	lw	a5,-40(s0)
80000cb8:	00f77733          	and	a4,a4,a5
80000cbc:	fee44783          	lbu	a5,-18(s0)
80000cc0:	00279793          	slli	a5,a5,0x2
80000cc4:	00f757b3          	srl	a5,a4,a5
80000cc8:	fef406a3          	sb	a5,-19(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:67
        towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
80000ccc:	fed44703          	lbu	a4,-19(s0)
80000cd0:	00900793          	li	a5,9
80000cd4:	00e7ee63          	bltu	a5,a4,80000cf0 <write_hex+0x94>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 1)
80000cd8:	fed44783          	lbu	a5,-19(s0)
80000cdc:	03078793          	addi	a5,a5,48
80000ce0:	0ff7f793          	andi	a5,a5,255
80000ce4:	01879793          	slli	a5,a5,0x18
80000ce8:	4187d793          	srai	a5,a5,0x18
80000cec:	0180006f          	j	80000d04 <write_hex+0xa8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 2)
80000cf0:	fed44783          	lbu	a5,-19(s0)
80000cf4:	03778793          	addi	a5,a5,55
80000cf8:	0ff7f793          	andi	a5,a5,255
80000cfc:	01879793          	slli	a5,a5,0x18
80000d00:	4187d793          	srai	a5,a5,0x18
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 4)
80000d04:	fef40623          	sb	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:68 (discriminator 4)
        write( fd, &towrite, 1);
80000d08:	fec40793          	addi	a5,s0,-20
80000d0c:	00100613          	li	a2,1
80000d10:	00078593          	mv	a1,a5
80000d14:	fdc42503          	lw	a0,-36(s0)
80000d18:	33d050ef          	jal	ra,80006854 <write>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 4)
    for (ii = 8 ; ii > 0; ii--)
80000d1c:	fef44783          	lbu	a5,-17(s0)
80000d20:	fff78793          	addi	a5,a5,-1
80000d24:	fef407a3          	sb	a5,-17(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 2)
80000d28:	fef44783          	lbu	a5,-17(s0)
80000d2c:	f60794e3          	bnez	a5,80000c94 <write_hex+0x38>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:70
    }
}
80000d30:	00000013          	nop
80000d34:	02c12083          	lw	ra,44(sp)
80000d38:	02812403          	lw	s0,40(sp)
80000d3c:	03010113          	addi	sp,sp,48
80000d40:	00008067          	ret

80000d44 <_exit>:
_exit():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:74

               
void _exit(int code)
{
80000d44:	fd010113          	addi	sp,sp,-48
80000d48:	02112623          	sw	ra,44(sp)
80000d4c:	02812423          	sw	s0,40(sp)
80000d50:	03010413          	addi	s0,sp,48
80000d54:	fca42e23          	sw	a0,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:76
#ifdef MSCC_STDIO_THRU_CORE_UART_APB
    const char * message = "\nProgam has exited with code:";
80000d58:	800077b7          	lui	a5,0x80007
80000d5c:	a4078793          	addi	a5,a5,-1472 # 80006a40 <__stack_top+0xfffc5450>
80000d60:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:78

    write(STDERR_FILENO, message, strlen(message));
80000d64:	fec42503          	lw	a0,-20(s0)
80000d68:	098010ef          	jal	ra,80001e00 <strlen>
80000d6c:	00050793          	mv	a5,a0
80000d70:	00078613          	mv	a2,a5
80000d74:	fec42583          	lw	a1,-20(s0)
80000d78:	00200513          	li	a0,2
80000d7c:	2d9050ef          	jal	ra,80006854 <write>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:79
    write_hex(STDERR_FILENO, code);
80000d80:	fdc42783          	lw	a5,-36(s0)
80000d84:	00078593          	mv	a1,a5
80000d88:	00200513          	li	a0,2
80000d8c:	ed1ff0ef          	jal	ra,80000c5c <write_hex>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:82 (discriminator 1)
#endif

    while (1);
80000d90:	0000006f          	j	80000d90 <_exit+0x4c>

80000d94 <_isatty>:
_isatty():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:101
    curbrk += incr;
    return curbrk - incr;
}

int _isatty(int fd)
{
80000d94:	fe010113          	addi	sp,sp,-32
80000d98:	00812e23          	sw	s0,28(sp)
80000d9c:	02010413          	addi	s0,sp,32
80000da0:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:102
    if (fd == STDOUT_FILENO || fd == STDERR_FILENO)
80000da4:	fec42703          	lw	a4,-20(s0)
80000da8:	00100793          	li	a5,1
80000dac:	00f70863          	beq	a4,a5,80000dbc <_isatty+0x28>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:102 (discriminator 1)
80000db0:	fec42703          	lw	a4,-20(s0)
80000db4:	00200793          	li	a5,2
80000db8:	00f71663          	bne	a4,a5,80000dc4 <_isatty+0x30>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:104
    {
        return 1;
80000dbc:	00100793          	li	a5,1
80000dc0:	0140006f          	j	80000dd4 <_isatty+0x40>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:107
    }

    errno = EBADF;
80000dc4:	800217b7          	lui	a5,0x80021
80000dc8:	00900713          	li	a4,9
80000dcc:	aee7a023          	sw	a4,-1312(a5) # 80020ae0 <__stack_top+0xfffdf4f0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:108
    return 0;
80000dd0:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:109
}
80000dd4:	00078513          	mv	a0,a5
80000dd8:	01c12403          	lw	s0,28(sp)
80000ddc:	02010113          	addi	sp,sp,32
80000de0:	00008067          	ret

80000de4 <stub>:
stub():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:112

static int stub(int err)
{
80000de4:	fe010113          	addi	sp,sp,-32
80000de8:	00812e23          	sw	s0,28(sp)
80000dec:	02010413          	addi	s0,sp,32
80000df0:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:113
    errno = err;
80000df4:	800217b7          	lui	a5,0x80021
80000df8:	fec42703          	lw	a4,-20(s0)
80000dfc:	aee7a023          	sw	a4,-1312(a5) # 80020ae0 <__stack_top+0xfffdf4f0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:114
    return -1;
80000e00:	fff00793          	li	a5,-1
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:115
}
80000e04:	00078513          	mv	a0,a5
80000e08:	01c12403          	lw	s0,28(sp)
80000e0c:	02010113          	addi	sp,sp,32
80000e10:	00008067          	ret

80000e14 <_write>:
_write():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:226
{
    return stub(ECHILD);
}

ssize_t _write(int fd, const void* ptr, size_t len)
{
80000e14:	fd010113          	addi	sp,sp,-48
80000e18:	02112623          	sw	ra,44(sp)
80000e1c:	02812423          	sw	s0,40(sp)
80000e20:	03010413          	addi	s0,sp,48
80000e24:	fca42e23          	sw	a0,-36(s0)
80000e28:	fcb42c23          	sw	a1,-40(s0)
80000e2c:	fcc42a23          	sw	a2,-44(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:229

#ifdef MSCC_STDIO_THRU_CORE_UART_APB
  const uint8_t * current = (const uint8_t *) ptr;
80000e30:	fd842783          	lw	a5,-40(s0)
80000e34:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:232
  size_t jj;

  if (_isatty(fd))
80000e38:	fdc42503          	lw	a0,-36(s0)
80000e3c:	f59ff0ef          	jal	ra,80000d94 <_isatty>
80000e40:	00050793          	mv	a5,a0
80000e44:	08078c63          	beqz	a5,80000edc <_write+0xc8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:238
  {
        /*--------------------------------------------------------------------------
        * Initialize the UART driver if it is the first time this function is
        * called.
        */
        if ( !g_stdio_uart_init_done )
80000e48:	9101a783          	lw	a5,-1776(gp) # 80006f40 <g_stdio_uart_init_done>
80000e4c:	02079063          	bnez	a5,80000e6c <_write+0x58>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:245
            /******************************************************************************
            * Baud value:
            * This value is calculated using the following equation:
            *      BAUD_VALUE = (CLOCK / (16 * BAUD_RATE)) - 1
            *****************************************************************************/
            UART_init( &g_stdio_uart, MSCC_STDIO_UART_BASE_ADDR, ((SYS_CLK_FREQ/(16 * MSCC_STDIO_BAUD_VALUE))-1), (DATA_8_BITS | NO_PARITY));
80000e50:	00100693          	li	a3,1
80000e54:	02c00613          	li	a2,44
80000e58:	700015b7          	lui	a1,0x70001
80000e5c:	90818513          	addi	a0,gp,-1784 # 80006f38 <g_stdio_uart>
80000e60:	174000ef          	jal	ra,80000fd4 <UART_init>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:246
            g_stdio_uart_init_done = 1;
80000e64:	00100713          	li	a4,1
80000e68:	90e1a823          	sw	a4,-1776(gp) # 80006f40 <g_stdio_uart_init_done>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:249
        }

    for (jj = 0; jj < len; jj++)
80000e6c:	fe042623          	sw	zero,-20(s0)
80000e70:	0580006f          	j	80000ec8 <_write+0xb4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:251
    {
        UART_send(&g_stdio_uart, current + jj, 1);
80000e74:	fe842703          	lw	a4,-24(s0)
80000e78:	fec42783          	lw	a5,-20(s0)
80000e7c:	00f707b3          	add	a5,a4,a5
80000e80:	00100613          	li	a2,1
80000e84:	00078593          	mv	a1,a5
80000e88:	90818513          	addi	a0,gp,-1784 # 80006f38 <g_stdio_uart>
80000e8c:	260000ef          	jal	ra,800010ec <UART_send>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:252
        if (current[jj] == '\n')
80000e90:	fe842703          	lw	a4,-24(s0)
80000e94:	fec42783          	lw	a5,-20(s0)
80000e98:	00f707b3          	add	a5,a4,a5
80000e9c:	0007c703          	lbu	a4,0(a5)
80000ea0:	00a00793          	li	a5,10
80000ea4:	00f71c63          	bne	a4,a5,80000ebc <_write+0xa8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:254
        {
            UART_send(&g_stdio_uart, (const uint8_t *)"\r", 1);
80000ea8:	00100613          	li	a2,1
80000eac:	800077b7          	lui	a5,0x80007
80000eb0:	a6078593          	addi	a1,a5,-1440 # 80006a60 <__stack_top+0xfffc5470>
80000eb4:	90818513          	addi	a0,gp,-1784 # 80006f38 <g_stdio_uart>
80000eb8:	234000ef          	jal	ra,800010ec <UART_send>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 2)
    for (jj = 0; jj < len; jj++)
80000ebc:	fec42783          	lw	a5,-20(s0)
80000ec0:	00178793          	addi	a5,a5,1
80000ec4:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 1)
80000ec8:	fec42703          	lw	a4,-20(s0)
80000ecc:	fd442783          	lw	a5,-44(s0)
80000ed0:	faf762e3          	bltu	a4,a5,80000e74 <_write+0x60>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:257
        }
    }
    return len;
80000ed4:	fd442783          	lw	a5,-44(s0)
80000ed8:	0100006f          	j	80000ee8 <_write+0xd4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:261
  }
#endif

  return stub(EBADF);
80000edc:	00900513          	li	a0,9
80000ee0:	f05ff0ef          	jal	ra,80000de4 <stub>
80000ee4:	00050793          	mv	a5,a0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:262
}
80000ee8:	00078513          	mv	a0,a5
80000eec:	02c12083          	lw	ra,44(sp)
80000ef0:	02812403          	lw	s0,40(sp)
80000ef4:	03010113          	addi	sp,sp,48
80000ef8:	00008067          	ret

80000efc <HW_set_32bit_reg>:
HW_set_32bit_reg():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:36
 *
 * a0:   addr_t reg_addr
 * a1:   uint32_t value
 */
HW_set_32bit_reg:
    sw a1, 0(a0)
80000efc:	00b52023          	sw	a1,0(a0) # 44000000 <RAM_SIZE+0x43f80000>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:37
    ret
80000f00:	00008067          	ret

80000f04 <HW_get_32bit_reg>:
HW_get_32bit_reg():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:47
 *
 * R0:   addr_t reg_addr
 * @return          32 bits value read from the peripheral register.
 */
HW_get_32bit_reg:
    lw a0, 0(a0)
80000f04:	00052503          	lw	a0,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:48
    ret
80000f08:	00008067          	ret

80000f0c <HW_set_32bit_reg_field>:
HW_set_32bit_reg_field():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:60
 * a1:   int_fast8_t shift
 * a2:   uint32_t mask
 * a3:   uint32_t value
 */
HW_set_32bit_reg_field:
    mv t3, a3
80000f0c:	00068e13          	mv	t3,a3
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:61
    sll t3, t3, a1
80000f10:	00be1e33          	sll	t3,t3,a1
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:62
    and  t3, t3, a2
80000f14:	00ce7e33          	and	t3,t3,a2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:63
    lw t1, 0(a0)
80000f18:	00052303          	lw	t1,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:64
    mv t2, a2
80000f1c:	00060393          	mv	t2,a2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:65
    not t2, t2
80000f20:	fff3c393          	not	t2,t2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:66
    and t1, t1, t2
80000f24:	00737333          	and	t1,t1,t2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:67
    or t1, t1, t3
80000f28:	01c36333          	or	t1,t1,t3
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:68
    sw t1, 0(a0)
80000f2c:	00652023          	sw	t1,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:69
    ret
80000f30:	00008067          	ret

80000f34 <HW_get_32bit_reg_field>:
HW_get_32bit_reg_field():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:83
 *
 * @return          32 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_32bit_reg_field:
    lw a0, 0(a0)
80000f34:	00052503          	lw	a0,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:84
    and a0, a0, a2
80000f38:	00c57533          	and	a0,a0,a2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:85
    srl a0, a0, a1
80000f3c:	00b55533          	srl	a0,a0,a1
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:86
    ret
80000f40:	00008067          	ret

80000f44 <HW_set_16bit_reg>:
HW_set_16bit_reg():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:96
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast16_t value
 */
HW_set_16bit_reg:
    sh a1, 0(a0)
80000f44:	00b51023          	sh	a1,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:97
    ret
80000f48:	00008067          	ret

80000f4c <HW_get_16bit_reg>:
HW_get_16bit_reg():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:107
 *
 * a0:   addr_t reg_addr
 * @return          16 bits value read from the peripheral register.
 */
HW_get_16bit_reg:
    lh a0, (a0)
80000f4c:	00051503          	lh	a0,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:108
    ret
80000f50:	00008067          	ret

80000f54 <HW_set_16bit_reg_field>:
HW_set_16bit_reg_field():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:121
 * a2:   uint_fast16_t mask
 * a3:   uint_fast16_t value
 * @param value     Value to be written in the specified field.
 */
HW_set_16bit_reg_field:
    mv t3, a3
80000f54:	00068e13          	mv	t3,a3
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:122
    sll t3, t3, a1
80000f58:	00be1e33          	sll	t3,t3,a1
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:123
    and  t3, t3, a2
80000f5c:	00ce7e33          	and	t3,t3,a2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:124
    lh t1, 0(a0)
80000f60:	00051303          	lh	t1,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:125
    mv t2, a2
80000f64:	00060393          	mv	t2,a2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:126
    not t2, t2
80000f68:	fff3c393          	not	t2,t2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:127
    and t1, t1, t2
80000f6c:	00737333          	and	t1,t1,t2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:128
    or t1, t1, t3
80000f70:	01c36333          	or	t1,t1,t3
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:129
    sh t1, 0(a0)
80000f74:	00651023          	sh	t1,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:130
    ret
80000f78:	00008067          	ret

80000f7c <HW_get_16bit_reg_field>:
HW_get_16bit_reg_field():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:144
 *
 * @return          16 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_16bit_reg_field:
    lh a0, 0(a0)
80000f7c:	00051503          	lh	a0,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:145
    and a0, a0, a2
80000f80:	00c57533          	and	a0,a0,a2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:146
    srl a0, a0, a1
80000f84:	00b55533          	srl	a0,a0,a1
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:147
    ret
80000f88:	00008067          	ret

80000f8c <HW_set_8bit_reg>:
HW_set_8bit_reg():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:157
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast8_t value
 */
HW_set_8bit_reg:
    sb a1, 0(a0)
80000f8c:	00b50023          	sb	a1,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:158
    ret
80000f90:	00008067          	ret

80000f94 <HW_get_8bit_reg>:
HW_get_8bit_reg():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:168
 *
 * a0:   addr_t reg_addr
 * @return          8 bits value read from the peripheral register.
 */
HW_get_8bit_reg:
    lb a0, 0(a0)
80000f94:	00050503          	lb	a0,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:169
    ret
80000f98:	00008067          	ret

80000f9c <HW_set_8bit_reg_field>:
HW_set_8bit_reg_field():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:181
 * a1:   int_fast8_t shift
 * a2:   uint_fast8_t mask
 * a3:   uint_fast8_t value
 */
HW_set_8bit_reg_field:
    mv t3, a3
80000f9c:	00068e13          	mv	t3,a3
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:182
    sll t3, t3, a1
80000fa0:	00be1e33          	sll	t3,t3,a1
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:183
    and  t3, t3, a2
80000fa4:	00ce7e33          	and	t3,t3,a2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:184
    lb t1, 0(a0)
80000fa8:	00050303          	lb	t1,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:185
    mv t2, a2
80000fac:	00060393          	mv	t2,a2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:186
    not t2, t2
80000fb0:	fff3c393          	not	t2,t2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:187
    and t1, t1, t2
80000fb4:	00737333          	and	t1,t1,t2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:188
    or t1, t1, t3
80000fb8:	01c36333          	or	t1,t1,t3
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:189
    sb t1, 0(a0)
80000fbc:	00650023          	sb	t1,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:190
    ret
80000fc0:	00008067          	ret

80000fc4 <HW_get_8bit_reg_field>:
HW_get_8bit_reg_field():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:204
 *
 * @return          8 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_8bit_reg_field:
    lb a0, 0(a0)
80000fc4:	00050503          	lb	a0,0(a0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:205
    and a0, a0, a2
80000fc8:	00c57533          	and	a0,a0,a2
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:206
    srl a0, a0, a1
80000fcc:	00b55533          	srl	a0,a0,a1
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:207
    ret
80000fd0:	00008067          	ret

80000fd4 <UART_init>:
UART_init():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:46
    UART_instance_t * this_uart,
    addr_t base_addr,
    uint16_t baud_value,
    uint8_t line_config
)
{
80000fd4:	fd010113          	addi	sp,sp,-48
80000fd8:	02112623          	sw	ra,44(sp)
80000fdc:	02812423          	sw	s0,40(sp)
80000fe0:	03010413          	addi	s0,sp,48
80000fe4:	fca42e23          	sw	a0,-36(s0)
80000fe8:	fcb42c23          	sw	a1,-40(s0)
80000fec:	00060793          	mv	a5,a2
80000ff0:	00068713          	mv	a4,a3
80000ff4:	fcf41b23          	sh	a5,-42(s0)
80000ff8:	00070793          	mv	a5,a4
80000ffc:	fcf40aa3          	sb	a5,-43(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53
    
    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( line_config <= MAX_LINE_CONFIG )
    HAL_ASSERT( baud_value <= MAX_BAUD_VALUE )

    if( ( this_uart != NULL_INSTANCE ) &&
80001000:	fdc42783          	lw	a5,-36(s0)
80001004:	0c078a63          	beqz	a5,800010d8 <UART_init+0x104>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53 (discriminator 1)
80001008:	fd544703          	lbu	a4,-43(s0)
8000100c:	00700793          	li	a5,7
80001010:	0ce7e463          	bltu	a5,a4,800010d8 <UART_init+0x104>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:54
        ( line_config <= MAX_LINE_CONFIG ) &&
80001014:	fd645703          	lhu	a4,-42(s0)
80001018:	000027b7          	lui	a5,0x2
8000101c:	0af77e63          	bleu	a5,a4,800010d8 <UART_init+0x104>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:60
        ( baud_value <= MAX_BAUD_VALUE ) )
    {
        /*
         * Store lower 8-bits of baud value in CTRL1.
         */
        HAL_set_8bit_reg( base_addr, CTRL1, (uint_fast8_t)(baud_value &
80001020:	fd842783          	lw	a5,-40(s0)
80001024:	00878713          	addi	a4,a5,8 # 2008 <HEAP_SIZE-0xdff8>
80001028:	fd645783          	lhu	a5,-42(s0)
8000102c:	0ff7f793          	andi	a5,a5,255
80001030:	00078593          	mv	a1,a5
80001034:	00070513          	mv	a0,a4
80001038:	f55ff0ef          	jal	ra,80000f8c <HW_set_8bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:67
    
        /*
         * Extract higher 5-bits of baud value and store in higher 5-bits 
         * of CTRL2, along with line configuration in lower 3 three bits.
         */
        HAL_set_8bit_reg( base_addr, CTRL2, (uint_fast8_t)line_config | 
8000103c:	fd842783          	lw	a5,-40(s0)
80001040:	00c78693          	addi	a3,a5,12
80001044:	fd544703          	lbu	a4,-43(s0)
80001048:	fd645783          	lhu	a5,-42(s0)
8000104c:	4057d793          	srai	a5,a5,0x5
80001050:	7f87f793          	andi	a5,a5,2040
80001054:	00f767b3          	or	a5,a4,a5
80001058:	00078593          	mv	a1,a5
8000105c:	00068513          	mv	a0,a3
80001060:	f2dff0ef          	jal	ra,80000f8c <HW_set_8bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:71
                                           (uint_fast8_t)((baud_value &
                                   BAUDVALUE_MSB) >> BAUDVALUE_SHIFT ) );
    
        this_uart->base_address = base_addr;
80001064:	fdc42783          	lw	a5,-36(s0)
80001068:	fd842703          	lw	a4,-40(s0)
8000106c:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:94
        
        /*
         * Flush the receive FIFO of data that may have been received before the
         * driver was initialized.
         */
        rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001070:	fdc42783          	lw	a5,-36(s0)
80001074:	0007a783          	lw	a5,0(a5)
80001078:	01078793          	addi	a5,a5,16
8000107c:	00078513          	mv	a0,a5
80001080:	f15ff0ef          	jal	ra,80000f94 <HW_get_8bit_reg>
80001084:	00050793          	mv	a5,a0
80001088:	0027f793          	andi	a5,a5,2
8000108c:	fef407a3          	sb	a5,-17(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
                                                    STATUS_RXFULL_MASK;
        while ( rx_full )
80001090:	0380006f          	j	800010c8 <UART_init+0xf4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:98
        {
            HAL_get_8bit_reg( this_uart->base_address, RXDATA );
80001094:	fdc42783          	lw	a5,-36(s0)
80001098:	0007a783          	lw	a5,0(a5)
8000109c:	00478793          	addi	a5,a5,4
800010a0:	00078513          	mv	a0,a5
800010a4:	ef1ff0ef          	jal	ra,80000f94 <HW_get_8bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:99
            rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
800010a8:	fdc42783          	lw	a5,-36(s0)
800010ac:	0007a783          	lw	a5,0(a5)
800010b0:	01078793          	addi	a5,a5,16
800010b4:	00078513          	mv	a0,a5
800010b8:	eddff0ef          	jal	ra,80000f94 <HW_get_8bit_reg>
800010bc:	00050793          	mv	a5,a0
800010c0:	0027f793          	andi	a5,a5,2
800010c4:	fef407a3          	sb	a5,-17(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
        while ( rx_full )
800010c8:	fef44783          	lbu	a5,-17(s0)
800010cc:	fc0794e3          	bnez	a5,80001094 <UART_init+0xc0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:106
        }

        /*
         * Clear status of the UART instance.
         */
        this_uart->status = (uint8_t)0;
800010d0:	fdc42783          	lw	a5,-36(s0)
800010d4:	00078223          	sb	zero,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:108
    }
}
800010d8:	00000013          	nop
800010dc:	02c12083          	lw	ra,44(sp)
800010e0:	02812403          	lw	s0,40(sp)
800010e4:	03010113          	addi	sp,sp,48
800010e8:	00008067          	ret

800010ec <UART_send>:
UART_send():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:121
(
    UART_instance_t * this_uart,
    const uint8_t * tx_buffer,
    size_t tx_size
)
{
800010ec:	fd010113          	addi	sp,sp,-48
800010f0:	02112623          	sw	ra,44(sp)
800010f4:	02812423          	sw	s0,40(sp)
800010f8:	03010413          	addi	s0,sp,48
800010fc:	fca42e23          	sw	a0,-36(s0)
80001100:	fcb42c23          	sw	a1,-40(s0)
80001104:	fcc42a23          	sw	a2,-44(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( tx_buffer != NULL_BUFFER )
    HAL_ASSERT( tx_size > 0 )
      
    if( (this_uart != NULL_INSTANCE) &&
80001108:	fdc42783          	lw	a5,-36(s0)
8000110c:	08078063          	beqz	a5,8000118c <UART_send+0xa0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129 (discriminator 1)
80001110:	fd842783          	lw	a5,-40(s0)
80001114:	06078c63          	beqz	a5,8000118c <UART_send+0xa0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:130
        (tx_buffer != NULL_BUFFER)   &&
80001118:	fd442783          	lw	a5,-44(s0)
8000111c:	06078863          	beqz	a5,8000118c <UART_send+0xa0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133
        (tx_size > (size_t)0) )
    {
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
80001120:	fe042623          	sw	zero,-20(s0)
80001124:	05c0006f          	j	80001180 <UART_send+0x94>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:137 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001128:	fdc42783          	lw	a5,-36(s0)
8000112c:	0007a783          	lw	a5,0(a5)
80001130:	01078793          	addi	a5,a5,16
80001134:	00078513          	mv	a0,a5
80001138:	e5dff0ef          	jal	ra,80000f94 <HW_get_8bit_reg>
8000113c:	00050793          	mv	a5,a0
80001140:	0017f793          	andi	a5,a5,1
80001144:	fef405a3          	sb	a5,-21(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:139 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
80001148:	feb44783          	lbu	a5,-21(s0)
8000114c:	fc078ee3          	beqz	a5,80001128 <UART_send+0x3c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:141 (discriminator 2)
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
80001150:	fdc42783          	lw	a5,-36(s0)
80001154:	0007a683          	lw	a3,0(a5)
80001158:	fd842703          	lw	a4,-40(s0)
8000115c:	fec42783          	lw	a5,-20(s0)
80001160:	00f707b3          	add	a5,a4,a5
80001164:	0007c783          	lbu	a5,0(a5)
80001168:	00078593          	mv	a1,a5
8000116c:	00068513          	mv	a0,a3
80001170:	e1dff0ef          	jal	ra,80000f8c <HW_set_8bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 2)
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
80001174:	fec42783          	lw	a5,-20(s0)
80001178:	00178793          	addi	a5,a5,1
8000117c:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 1)
80001180:	fec42703          	lw	a4,-20(s0)
80001184:	fd442783          	lw	a5,-44(s0)
80001188:	faf760e3          	bltu	a4,a5,80001128 <UART_send+0x3c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:145
                              (uint_fast8_t)tx_buffer[char_idx] );
        }
    }
}
8000118c:	00000013          	nop
80001190:	02c12083          	lw	ra,44(sp)
80001194:	02812403          	lw	s0,40(sp)
80001198:	03010113          	addi	sp,sp,48
8000119c:	00008067          	ret

800011a0 <UART_polled_tx_string>:
UART_polled_tx_string():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:239
UART_polled_tx_string
( 
    UART_instance_t * this_uart, 
    const uint8_t * p_sz_string
)
{
800011a0:	fd010113          	addi	sp,sp,-48
800011a4:	02112623          	sw	ra,44(sp)
800011a8:	02812423          	sw	s0,40(sp)
800011ac:	03010413          	addi	s0,sp,48
800011b0:	fca42e23          	sw	a0,-36(s0)
800011b4:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246
    uint8_t tx_ready;

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( p_sz_string != NULL_BUFFER )
    
    if( ( this_uart != NULL_INSTANCE ) && ( p_sz_string != NULL_BUFFER ) )
800011b8:	fdc42783          	lw	a5,-36(s0)
800011bc:	08078063          	beqz	a5,8000123c <UART_polled_tx_string+0x9c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246 (discriminator 1)
800011c0:	fd842783          	lw	a5,-40(s0)
800011c4:	06078c63          	beqz	a5,8000123c <UART_polled_tx_string+0x9c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:248
    {
        char_idx = 0U;
800011c8:	fe042623          	sw	zero,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
800011cc:	05c0006f          	j	80001228 <UART_polled_tx_string+0x88>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:253 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
800011d0:	fdc42783          	lw	a5,-36(s0)
800011d4:	0007a783          	lw	a5,0(a5)
800011d8:	01078793          	addi	a5,a5,16
800011dc:	00078513          	mv	a0,a5
800011e0:	db5ff0ef          	jal	ra,80000f94 <HW_get_8bit_reg>
800011e4:	00050793          	mv	a5,a0
800011e8:	0017f793          	andi	a5,a5,1
800011ec:	fef405a3          	sb	a5,-21(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:255 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
800011f0:	feb44783          	lbu	a5,-21(s0)
800011f4:	fc078ee3          	beqz	a5,800011d0 <UART_polled_tx_string+0x30>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:257
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
800011f8:	fdc42783          	lw	a5,-36(s0)
800011fc:	0007a683          	lw	a3,0(a5)
80001200:	fd842703          	lw	a4,-40(s0)
80001204:	fec42783          	lw	a5,-20(s0)
80001208:	00f707b3          	add	a5,a4,a5
8000120c:	0007c783          	lbu	a5,0(a5)
80001210:	00078593          	mv	a1,a5
80001214:	00068513          	mv	a0,a3
80001218:	d75ff0ef          	jal	ra,80000f8c <HW_set_8bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:259
                              (uint_fast8_t)p_sz_string[char_idx] );
            char_idx++;
8000121c:	fec42783          	lw	a5,-20(s0)
80001220:	00178793          	addi	a5,a5,1
80001224:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
80001228:	fd842703          	lw	a4,-40(s0)
8000122c:	fec42783          	lw	a5,-20(s0)
80001230:	00f707b3          	add	a5,a4,a5
80001234:	0007c783          	lbu	a5,0(a5)
80001238:	f8079ce3          	bnez	a5,800011d0 <UART_polled_tx_string+0x30>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:262
        }
    }
}
8000123c:	00000013          	nop
80001240:	02c12083          	lw	ra,44(sp)
80001244:	02812403          	lw	s0,40(sp)
80001248:	03010113          	addi	sp,sp,48
8000124c:	00008067          	ret

80001250 <pvPortMalloc>:
pvPortMalloc():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:151
}
/*-----------------------------------------------------------*/


void *pvPortMalloc( size_t xWantedSize )
{
80001250:	fc010113          	addi	sp,sp,-64
80001254:	02112e23          	sw	ra,60(sp)
80001258:	02812c23          	sw	s0,56(sp)
8000125c:	04010413          	addi	s0,sp,64
80001260:	fca42623          	sw	a0,-52(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:154
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
80001264:	fe042223          	sw	zero,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:156

	vTaskSuspendAll();
80001268:	7f5000ef          	jal	ra,8000225c <vTaskSuspendAll>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:160
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
8000126c:	9241a783          	lw	a5,-1756(gp) # 80006f54 <xHeapHasBeenInitialised.2777>
80001270:	00079863          	bnez	a5,80001280 <pvPortMalloc+0x30>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:162
		{
			prvHeapInit();
80001274:	284000ef          	jal	ra,800014f8 <prvHeapInit>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:163
			xHeapHasBeenInitialised = pdTRUE;
80001278:	00100713          	li	a4,1
8000127c:	92e1a223          	sw	a4,-1756(gp) # 80006f54 <xHeapHasBeenInitialised.2777>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:168
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
80001280:	fcc42783          	lw	a5,-52(s0)
80001284:	02078a63          	beqz	a5,800012b8 <pvPortMalloc+0x68>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:170
		{
			xWantedSize += heapSTRUCT_SIZE;
80001288:	00800793          	li	a5,8
8000128c:	00078713          	mv	a4,a5
80001290:	fcc42783          	lw	a5,-52(s0)
80001294:	00e787b3          	add	a5,a5,a4
80001298:	fcf42623          	sw	a5,-52(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:173

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
8000129c:	fcc42783          	lw	a5,-52(s0)
800012a0:	0037f793          	andi	a5,a5,3
800012a4:	00078a63          	beqz	a5,800012b8 <pvPortMalloc+0x68>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:176
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
800012a8:	fcc42783          	lw	a5,-52(s0)
800012ac:	ffc7f793          	andi	a5,a5,-4
800012b0:	00478793          	addi	a5,a5,4
800012b4:	fcf42623          	sw	a5,-52(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
800012b8:	fcc42783          	lw	a5,-52(s0)
800012bc:	14078463          	beqz	a5,80001404 <pvPortMalloc+0x1b4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180 (discriminator 1)
800012c0:	fcc42703          	lw	a4,-52(s0)
800012c4:	000197b7          	lui	a5,0x19
800012c8:	ffb78793          	addi	a5,a5,-5 # 18ffb <HEAP_SIZE+0x8ffb>
800012cc:	12e7ec63          	bltu	a5,a4,80001404 <pvPortMalloc+0x1b4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:184
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
800012d0:	91418793          	addi	a5,gp,-1772 # 80006f44 <xStart>
800012d4:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:185
			pxBlock = xStart.pxNextFreeBlock;
800012d8:	9141a783          	lw	a5,-1772(gp) # 80006f44 <xStart>
800012dc:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
800012e0:	0180006f          	j	800012f8 <pvPortMalloc+0xa8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:188
			{
				pxPreviousBlock = pxBlock;
800012e4:	fec42783          	lw	a5,-20(s0)
800012e8:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:189
				pxBlock = pxBlock->pxNextFreeBlock;
800012ec:	fec42783          	lw	a5,-20(s0)
800012f0:	0007a783          	lw	a5,0(a5)
800012f4:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
800012f8:	fec42783          	lw	a5,-20(s0)
800012fc:	0047a783          	lw	a5,4(a5)
80001300:	fcc42703          	lw	a4,-52(s0)
80001304:	00e7f863          	bleu	a4,a5,80001314 <pvPortMalloc+0xc4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186 (discriminator 1)
80001308:	fec42783          	lw	a5,-20(s0)
8000130c:	0007a783          	lw	a5,0(a5)
80001310:	fc079ae3          	bnez	a5,800012e4 <pvPortMalloc+0x94>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:193
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
80001314:	fec42703          	lw	a4,-20(s0)
80001318:	91c18793          	addi	a5,gp,-1764 # 80006f4c <xEnd>
8000131c:	0ef70463          	beq	a4,a5,80001404 <pvPortMalloc+0x1b4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:197
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
80001320:	fe842783          	lw	a5,-24(s0)
80001324:	0007a783          	lw	a5,0(a5)
80001328:	00800713          	li	a4,8
8000132c:	00e787b3          	add	a5,a5,a4
80001330:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:201

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
80001334:	fec42783          	lw	a5,-20(s0)
80001338:	0007a703          	lw	a4,0(a5)
8000133c:	fe842783          	lw	a5,-24(s0)
80001340:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:204

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
80001344:	fec42783          	lw	a5,-20(s0)
80001348:	0047a703          	lw	a4,4(a5)
8000134c:	fcc42783          	lw	a5,-52(s0)
80001350:	40f707b3          	sub	a5,a4,a5
80001354:	00800713          	li	a4,8
80001358:	00171713          	slli	a4,a4,0x1
8000135c:	08f77663          	bleu	a5,a4,800013e8 <pvPortMalloc+0x198>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:209
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
80001360:	fec42703          	lw	a4,-20(s0)
80001364:	fcc42783          	lw	a5,-52(s0)
80001368:	00f707b3          	add	a5,a4,a5
8000136c:	fcf42e23          	sw	a5,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:213

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
80001370:	fec42783          	lw	a5,-20(s0)
80001374:	0047a703          	lw	a4,4(a5)
80001378:	fcc42783          	lw	a5,-52(s0)
8000137c:	40f70733          	sub	a4,a4,a5
80001380:	fdc42783          	lw	a5,-36(s0)
80001384:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:214
					pxBlock->xBlockSize = xWantedSize;
80001388:	fec42783          	lw	a5,-20(s0)
8000138c:	fcc42703          	lw	a4,-52(s0)
80001390:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
80001394:	fdc42783          	lw	a5,-36(s0)
80001398:	0047a783          	lw	a5,4(a5)
8000139c:	fcf42c23          	sw	a5,-40(s0)
800013a0:	91418793          	addi	a5,gp,-1772 # 80006f44 <xStart>
800013a4:	fef42023          	sw	a5,-32(s0)
800013a8:	0100006f          	j	800013b8 <pvPortMalloc+0x168>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 3)
800013ac:	fe042783          	lw	a5,-32(s0)
800013b0:	0007a783          	lw	a5,0(a5)
800013b4:	fef42023          	sw	a5,-32(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 1)
800013b8:	fe042783          	lw	a5,-32(s0)
800013bc:	0007a783          	lw	a5,0(a5)
800013c0:	0047a783          	lw	a5,4(a5)
800013c4:	fd842703          	lw	a4,-40(s0)
800013c8:	fee7e2e3          	bltu	a5,a4,800013ac <pvPortMalloc+0x15c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 4)
800013cc:	fe042783          	lw	a5,-32(s0)
800013d0:	0007a703          	lw	a4,0(a5)
800013d4:	fdc42783          	lw	a5,-36(s0)
800013d8:	00e7a023          	sw	a4,0(a5)
800013dc:	fe042783          	lw	a5,-32(s0)
800013e0:	fdc42703          	lw	a4,-36(s0)
800013e4:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:220
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
800013e8:	800077b7          	lui	a5,0x80007
800013ec:	e307a703          	lw	a4,-464(a5) # 80006e30 <__stack_top+0xfffc5840>
800013f0:	fec42783          	lw	a5,-20(s0)
800013f4:	0047a783          	lw	a5,4(a5)
800013f8:	40f70733          	sub	a4,a4,a5
800013fc:	800077b7          	lui	a5,0x80007
80001400:	e2e7a823          	sw	a4,-464(a5) # 80006e30 <__stack_top+0xfffc5840>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:226
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
80001404:	681000ef          	jal	ra,80002284 <xTaskResumeAll>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:230

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
80001408:	fe442783          	lw	a5,-28(s0)
8000140c:	00079463          	bnez	a5,80001414 <pvPortMalloc+0x1c4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:233
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
80001410:	2cc050ef          	jal	ra,800066dc <vApplicationMallocFailedHook>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:238
		}
	}
	#endif

	return pvReturn;
80001414:	fe442783          	lw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:239
}
80001418:	00078513          	mv	a0,a5
8000141c:	03c12083          	lw	ra,60(sp)
80001420:	03812403          	lw	s0,56(sp)
80001424:	04010113          	addi	sp,sp,64
80001428:	00008067          	ret

8000142c <vPortFree>:
vPortFree():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:243
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
8000142c:	fd010113          	addi	sp,sp,-48
80001430:	02112623          	sw	ra,44(sp)
80001434:	02812423          	sw	s0,40(sp)
80001438:	03010413          	addi	s0,sp,48
8000143c:	fca42e23          	sw	a0,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:244
uint8_t *puc = ( uint8_t * ) pv;
80001440:	fdc42783          	lw	a5,-36(s0)
80001444:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:247
BlockLink_t *pxLink;

	if( pv != NULL )
80001448:	fdc42783          	lw	a5,-36(s0)
8000144c:	08078c63          	beqz	a5,800014e4 <vPortFree+0xb8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:251
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
80001450:	00800793          	li	a5,8
80001454:	40f007b3          	neg	a5,a5
80001458:	fe842703          	lw	a4,-24(s0)
8000145c:	00f707b3          	add	a5,a4,a5
80001460:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:255

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
80001464:	fe842783          	lw	a5,-24(s0)
80001468:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:257

		vTaskSuspendAll();
8000146c:	5f1000ef          	jal	ra,8000225c <vTaskSuspendAll>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
80001470:	fe442783          	lw	a5,-28(s0)
80001474:	0047a783          	lw	a5,4(a5)
80001478:	fef42023          	sw	a5,-32(s0)
8000147c:	91418793          	addi	a5,gp,-1772 # 80006f44 <xStart>
80001480:	fef42623          	sw	a5,-20(s0)
80001484:	0100006f          	j	80001494 <vPortFree+0x68>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 3)
80001488:	fec42783          	lw	a5,-20(s0)
8000148c:	0007a783          	lw	a5,0(a5)
80001490:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 1)
80001494:	fec42783          	lw	a5,-20(s0)
80001498:	0007a783          	lw	a5,0(a5)
8000149c:	0047a783          	lw	a5,4(a5)
800014a0:	fe042703          	lw	a4,-32(s0)
800014a4:	fee7e2e3          	bltu	a5,a4,80001488 <vPortFree+0x5c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 4)
800014a8:	fec42783          	lw	a5,-20(s0)
800014ac:	0007a703          	lw	a4,0(a5)
800014b0:	fe442783          	lw	a5,-28(s0)
800014b4:	00e7a023          	sw	a4,0(a5)
800014b8:	fec42783          	lw	a5,-20(s0)
800014bc:	fe442703          	lw	a4,-28(s0)
800014c0:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:261 (discriminator 4)
			xFreeBytesRemaining += pxLink->xBlockSize;
800014c4:	fe442783          	lw	a5,-28(s0)
800014c8:	0047a703          	lw	a4,4(a5)
800014cc:	800077b7          	lui	a5,0x80007
800014d0:	e307a783          	lw	a5,-464(a5) # 80006e30 <__stack_top+0xfffc5840>
800014d4:	00f70733          	add	a4,a4,a5
800014d8:	800077b7          	lui	a5,0x80007
800014dc:	e2e7a823          	sw	a4,-464(a5) # 80006e30 <__stack_top+0xfffc5840>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:264 (discriminator 4)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
800014e0:	5a5000ef          	jal	ra,80002284 <xTaskResumeAll>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:266
	}
}
800014e4:	00000013          	nop
800014e8:	02c12083          	lw	ra,44(sp)
800014ec:	02812403          	lw	s0,40(sp)
800014f0:	03010113          	addi	sp,sp,48
800014f4:	00008067          	ret

800014f8 <prvHeapInit>:
prvHeapInit():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:282
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
800014f8:	fe010113          	addi	sp,sp,-32
800014fc:	00812e23          	sw	s0,28(sp)
80001500:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:287
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
80001504:	800077b7          	lui	a5,0x80007
80001508:	fa478793          	addi	a5,a5,-92 # 80006fa4 <__stack_top+0xfffc59b4>
8000150c:	ffc7f793          	andi	a5,a5,-4
80001510:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:291

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
80001514:	fec42703          	lw	a4,-20(s0)
80001518:	90e1aa23          	sw	a4,-1772(gp) # 80006f44 <xStart>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:292
	xStart.xBlockSize = ( size_t ) 0;
8000151c:	91418793          	addi	a5,gp,-1772 # 80006f44 <xStart>
80001520:	0007a223          	sw	zero,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:295

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
80001524:	91c18793          	addi	a5,gp,-1764 # 80006f4c <xEnd>
80001528:	00019737          	lui	a4,0x19
8000152c:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
80001530:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:296
	xEnd.pxNextFreeBlock = NULL;
80001534:	9001ae23          	sw	zero,-1764(gp) # 80006f4c <xEnd>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:300

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
80001538:	fec42783          	lw	a5,-20(s0)
8000153c:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:301
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
80001540:	fe842783          	lw	a5,-24(s0)
80001544:	00019737          	lui	a4,0x19
80001548:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
8000154c:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:302
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
80001550:	fe842783          	lw	a5,-24(s0)
80001554:	91c18713          	addi	a4,gp,-1764 # 80006f4c <xEnd>
80001558:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:303
}
8000155c:	00000013          	nop
80001560:	01c12403          	lw	s0,28(sp)
80001564:	02010113          	addi	sp,sp,32
80001568:	00008067          	ret

8000156c <raise_soft_interrupt>:
raise_soft_interrupt():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:227
/*==============================================================================
 * The function raise_soft_interrupt() raises a synchronous software interrupt by
 * writing into the MSIP register.
 */
static inline void raise_soft_interrupt()
{
8000156c:	fe010113          	addi	sp,sp,-32
80001570:	00812e23          	sw	s0,28(sp)
80001574:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:228
    unsigned long hart_id = read_csr(mhartid);
80001578:	f14027f3          	csrr	a5,mhartid
8000157c:	fef42623          	sw	a5,-20(s0)
80001580:	fec42783          	lw	a5,-20(s0)
80001584:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:231

    /*You need to make sure that the global interrupt is enabled*/
    set_csr(mie, MIP_MSIP);       /*Enable software interrupt bit */
80001588:	304467f3          	csrrsi	a5,mie,8
8000158c:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:232
    PRCI->MSIP[hart_id] = 0x01;   /*raise soft interrupt for hart0*/
80001590:	44000737          	lui	a4,0x44000
80001594:	fe842783          	lw	a5,-24(s0)
80001598:	00279793          	slli	a5,a5,0x2
8000159c:	00f707b3          	add	a5,a4,a5
800015a0:	00100713          	li	a4,1
800015a4:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:233
}
800015a8:	00000013          	nop
800015ac:	01c12403          	lw	s0,28(sp)
800015b0:	02010113          	addi	sp,sp,32
800015b4:	00008067          	ret

800015b8 <vPortEnterCritical>:
vPortEnterCritical():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:132
 * Used to catch tasks that attempt to return from their implementing function.
 */
static void prvTaskExitError( void );

void vPortEnterCritical( void )
{
800015b8:	ff010113          	addi	sp,sp,-16
800015bc:	00812623          	sw	s0,12(sp)
800015c0:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:133
	portDISABLE_INTERRUPTS();
800015c4:	30047073          	csrci	mstatus,8
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:134
	uxCriticalNesting++;
800015c8:	800077b7          	lui	a5,0x80007
800015cc:	e347a783          	lw	a5,-460(a5) # 80006e34 <__stack_top+0xfffc5844>
800015d0:	00178713          	addi	a4,a5,1
800015d4:	800077b7          	lui	a5,0x80007
800015d8:	e2e7aa23          	sw	a4,-460(a5) # 80006e34 <__stack_top+0xfffc5844>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:135
}
800015dc:	00000013          	nop
800015e0:	00c12403          	lw	s0,12(sp)
800015e4:	01010113          	addi	sp,sp,16
800015e8:	00008067          	ret

800015ec <vPortExitCritical>:
vPortExitCritical():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:139
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
800015ec:	ff010113          	addi	sp,sp,-16
800015f0:	00812623          	sw	s0,12(sp)
800015f4:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:140
	uxCriticalNesting--;
800015f8:	800077b7          	lui	a5,0x80007
800015fc:	e347a783          	lw	a5,-460(a5) # 80006e34 <__stack_top+0xfffc5844>
80001600:	fff78713          	addi	a4,a5,-1
80001604:	800077b7          	lui	a5,0x80007
80001608:	e2e7aa23          	sw	a4,-460(a5) # 80006e34 <__stack_top+0xfffc5844>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:141
	if( uxCriticalNesting == 0 )
8000160c:	800077b7          	lui	a5,0x80007
80001610:	e347a783          	lw	a5,-460(a5) # 80006e34 <__stack_top+0xfffc5844>
80001614:	00079463          	bnez	a5,8000161c <vPortExitCritical+0x30>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:143
	{
		portENABLE_INTERRUPTS();
80001618:	30046073          	csrsi	mstatus,8
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:145
	}
}
8000161c:	00000013          	nop
80001620:	00c12403          	lw	s0,12(sp)
80001624:	01010113          	addi	sp,sp,16
80001628:	00008067          	ret

8000162c <prvSetNextTimerInterrupt>:
prvSetNextTimerInterrupt():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:151
/*-----------------------------------------------------------*/

/* Sets the next timer interrupt
 * Reads previous timer compare register, and adds tickrate */
static void prvSetNextTimerInterrupt(void)
{
8000162c:	fe010113          	addi	sp,sp,-32
80001630:	00812e23          	sw	s0,28(sp)
80001634:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:154
	uint64_t time;

	time = mtime->val_low;
80001638:	80007637          	lui	a2,0x80007
8000163c:	e3862603          	lw	a2,-456(a2) # 80006e38 <__stack_top+0xfffc5848>
80001640:	00062603          	lw	a2,0(a2)
80001644:	fec42423          	sw	a2,-24(s0)
80001648:	fe042623          	sw	zero,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:155
	time |= ((uint64_t)mtime->val_high << 32);
8000164c:	80007637          	lui	a2,0x80007
80001650:	e3862603          	lw	a2,-456(a2) # 80006e38 <__stack_top+0xfffc5848>
80001654:	00462603          	lw	a2,4(a2)
80001658:	00060693          	mv	a3,a2
8000165c:	00000713          	li	a4,0
80001660:	00069813          	slli	a6,a3,0x0
80001664:	00000793          	li	a5,0
80001668:	fe842703          	lw	a4,-24(s0)
8000166c:	00f76733          	or	a4,a4,a5
80001670:	fee42423          	sw	a4,-24(s0)
80001674:	fec42703          	lw	a4,-20(s0)
80001678:	010767b3          	or	a5,a4,a6
8000167c:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:157

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
80001680:	fe842683          	lw	a3,-24(s0)
80001684:	fec42703          	lw	a4,-20(s0)
80001688:	000145b7          	lui	a1,0x14
8000168c:	43858593          	addi	a1,a1,1080 # 14438 <HEAP_SIZE+0x4438>
80001690:	00000613          	li	a2,0
80001694:	00b687b3          	add	a5,a3,a1
80001698:	00078513          	mv	a0,a5
8000169c:	00d53533          	sltu	a0,a0,a3
800016a0:	00c70833          	add	a6,a4,a2
800016a4:	01050733          	add	a4,a0,a6
800016a8:	00070813          	mv	a6,a4
800016ac:	fef42423          	sw	a5,-24(s0)
800016b0:	ff042623          	sw	a6,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:159

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
800016b4:	800077b7          	lui	a5,0x80007
800016b8:	e3c7a783          	lw	a5,-452(a5) # 80006e3c <__stack_top+0xfffc584c>
800016bc:	fe842703          	lw	a4,-24(s0)
800016c0:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:160
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
800016c4:	fec42783          	lw	a5,-20(s0)
800016c8:	0007d313          	srli	t1,a5,0x0
800016cc:	00000393          	li	t2,0
800016d0:	800077b7          	lui	a5,0x80007
800016d4:	e3c7a783          	lw	a5,-452(a5) # 80006e3c <__stack_top+0xfffc584c>
800016d8:	00030713          	mv	a4,t1
800016dc:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:163

	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
800016e0:	08000793          	li	a5,128
800016e4:	3047a073          	csrs	mie,a5
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:164
}
800016e8:	00000013          	nop
800016ec:	01c12403          	lw	s0,28(sp)
800016f0:	02010113          	addi	sp,sp,32
800016f4:	00008067          	ret

800016f8 <vPortSetupTimer>:
vPortSetupTimer():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:169
/*-----------------------------------------------------------*/

/* Sets and enable the timer interrupt */
void vPortSetupTimer(void)
{
800016f8:	fe010113          	addi	sp,sp,-32
800016fc:	00812e23          	sw	s0,28(sp)
80001700:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:172
	uint64_t time;

	time = mtime->val_low;
80001704:	80007637          	lui	a2,0x80007
80001708:	e3862603          	lw	a2,-456(a2) # 80006e38 <__stack_top+0xfffc5848>
8000170c:	00062603          	lw	a2,0(a2)
80001710:	fec42423          	sw	a2,-24(s0)
80001714:	fe042623          	sw	zero,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:173
	time |= ((uint64_t)mtime->val_high << 32);
80001718:	80007637          	lui	a2,0x80007
8000171c:	e3862603          	lw	a2,-456(a2) # 80006e38 <__stack_top+0xfffc5848>
80001720:	00462603          	lw	a2,4(a2)
80001724:	00060693          	mv	a3,a2
80001728:	00000713          	li	a4,0
8000172c:	00069813          	slli	a6,a3,0x0
80001730:	00000793          	li	a5,0
80001734:	fe842703          	lw	a4,-24(s0)
80001738:	00f76733          	or	a4,a4,a5
8000173c:	fee42423          	sw	a4,-24(s0)
80001740:	fec42703          	lw	a4,-20(s0)
80001744:	010767b3          	or	a5,a4,a6
80001748:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:175

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
8000174c:	fe842683          	lw	a3,-24(s0)
80001750:	fec42703          	lw	a4,-20(s0)
80001754:	000145b7          	lui	a1,0x14
80001758:	43858593          	addi	a1,a1,1080 # 14438 <HEAP_SIZE+0x4438>
8000175c:	00000613          	li	a2,0
80001760:	00b687b3          	add	a5,a3,a1
80001764:	00078513          	mv	a0,a5
80001768:	00d53533          	sltu	a0,a0,a3
8000176c:	00c70833          	add	a6,a4,a2
80001770:	01050733          	add	a4,a0,a6
80001774:	00070813          	mv	a6,a4
80001778:	fef42423          	sw	a5,-24(s0)
8000177c:	ff042623          	sw	a6,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:177

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
80001780:	800077b7          	lui	a5,0x80007
80001784:	e3c7a783          	lw	a5,-452(a5) # 80006e3c <__stack_top+0xfffc584c>
80001788:	fe842703          	lw	a4,-24(s0)
8000178c:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:178
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
80001790:	fec42783          	lw	a5,-20(s0)
80001794:	0007d313          	srli	t1,a5,0x0
80001798:	00000393          	li	t2,0
8000179c:	800077b7          	lui	a5,0x80007
800017a0:	e3c7a783          	lw	a5,-452(a5) # 80006e3c <__stack_top+0xfffc584c>
800017a4:	00030713          	mv	a4,t1
800017a8:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:182


	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
800017ac:	08000793          	li	a5,128
800017b0:	3047a073          	csrs	mie,a5
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:183
}
800017b4:	00000013          	nop
800017b8:	01c12403          	lw	s0,28(sp)
800017bc:	02010113          	addi	sp,sp,32
800017c0:	00008067          	ret

800017c4 <prvTaskExitError>:
prvTaskExitError():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:187
/*-----------------------------------------------------------*/

void prvTaskExitError( void )
{
800017c4:	ff010113          	addi	sp,sp,-16
800017c8:	00812623          	sw	s0,12(sp)
800017cc:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
800017d0:	800077b7          	lui	a5,0x80007
800017d4:	e347a703          	lw	a4,-460(a5) # 80006e34 <__stack_top+0xfffc5844>
800017d8:	fff00793          	li	a5,-1
800017dc:	00f70663          	beq	a4,a5,800017e8 <prvTaskExitError+0x24>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194 (discriminator 1)
800017e0:	30047073          	csrci	mstatus,8
800017e4:	0000006f          	j	800017e4 <prvTaskExitError+0x20>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:195
	portDISABLE_INTERRUPTS();
800017e8:	30047073          	csrci	mstatus,8
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:196 (discriminator 2)
	for( ;; );
800017ec:	0000006f          	j	800017ec <prvTaskExitError+0x28>

800017f0 <pxPortInitialiseStack>:
pxPortInitialiseStack():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:220

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
800017f0:	fe010113          	addi	sp,sp,-32
800017f4:	00812e23          	sw	s0,28(sp)
800017f8:	02010413          	addi	s0,sp,32
800017fc:	fea42623          	sw	a0,-20(s0)
80001800:	feb42423          	sw	a1,-24(s0)
80001804:	fec42223          	sw	a2,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:224
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	register int *tp asm("x3");
	pxTopOfStack--;
80001808:	fec42783          	lw	a5,-20(s0)
8000180c:	ffc78793          	addi	a5,a5,-4
80001810:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:225
	*pxTopOfStack = (portSTACK_TYPE)pxCode;			/* Start address */
80001814:	fe842703          	lw	a4,-24(s0)
80001818:	fec42783          	lw	a5,-20(s0)
8000181c:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:226
	pxTopOfStack -= 22;
80001820:	fec42783          	lw	a5,-20(s0)
80001824:	fa878793          	addi	a5,a5,-88
80001828:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:227
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;	/* Register a0 */
8000182c:	fe442703          	lw	a4,-28(s0)
80001830:	fec42783          	lw	a5,-20(s0)
80001834:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:228
	pxTopOfStack -= 6;
80001838:	fec42783          	lw	a5,-20(s0)
8000183c:	fe878793          	addi	a5,a5,-24
80001840:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:229
	*pxTopOfStack = (portSTACK_TYPE)tp; /* Register thread pointer */
80001844:	00018793          	mv	a5,gp
80001848:	00078713          	mv	a4,a5
8000184c:	fec42783          	lw	a5,-20(s0)
80001850:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:230
	pxTopOfStack -= 3;
80001854:	fec42783          	lw	a5,-20(s0)
80001858:	ff478793          	addi	a5,a5,-12
8000185c:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:231
	*pxTopOfStack = (portSTACK_TYPE)prvTaskExitError; /* Register ra */
80001860:	800017b7          	lui	a5,0x80001
80001864:	7c478713          	addi	a4,a5,1988 # 800017c4 <__stack_top+0xfffc01d4>
80001868:	fec42783          	lw	a5,-20(s0)
8000186c:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:233

	return pxTopOfStack;
80001870:	fec42783          	lw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:234
}
80001874:	00078513          	mv	a0,a5
80001878:	01c12403          	lw	s0,28(sp)
8000187c:	02010113          	addi	sp,sp,32
80001880:	00008067          	ret

80001884 <SysTick_Handler>:
SysTick_Handler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:238
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void )
{
80001884:	ff010113          	addi	sp,sp,-16
80001888:	00112623          	sw	ra,12(sp)
8000188c:	00812423          	sw	s0,8(sp)
80001890:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:241
	/*Save Context*/
	{
		__asm volatile("lw	t0, pxCurrentTCB");
80001894:	92c1a283          	lw	t0,-1748(gp) # 80006f5c <pxCurrentTCB>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:242
		__asm volatile("sw	a2, 0x0(t0)");
80001898:	00c2a023          	sw	a2,0(t0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:246
	}

	/* Increment the RTOS tick. */
	prvSetNextTimerInterrupt();
8000189c:	d91ff0ef          	jal	ra,8000162c <prvSetNextTimerInterrupt>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:249

	/*Switch task */
	if( xTaskIncrementTick() != pdFALSE )
800018a0:	37d000ef          	jal	ra,8000241c <xTaskIncrementTick>
800018a4:	00050793          	mv	a5,a0
800018a8:	00078463          	beqz	a5,800018b0 <SysTick_Handler+0x2c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:251
	{
		vTaskSwitchContext();
800018ac:	55d000ef          	jal	ra,80002608 <vTaskSwitchContext>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:256
	}

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
800018b0:	92c1a103          	lw	sp,-1748(gp) # 80006f5c <pxCurrentTCB>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:257
		__asm volatile("lw	sp, 0x0(sp)");
800018b4:	00012103          	lw	sp,0(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:259

		__asm volatile("lw	t0, 31 * 4(sp)");
800018b8:	07c12283          	lw	t0,124(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:260
		__asm volatile("csrw	mepc, t0");
800018bc:	34129073          	csrw	mepc,t0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:262

		__asm volatile("lw	x1, 0x0(sp)");
800018c0:	00012083          	lw	ra,0(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:263
		__asm volatile("lw   x4, 3 * 4(sp)");
800018c4:	00c12203          	lw	tp,12(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:264
		__asm volatile("lw   x5, 4 * 4(sp)");
800018c8:	01012283          	lw	t0,16(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:265
		__asm volatile("lw   x6, 5 * 4(sp)");
800018cc:	01412303          	lw	t1,20(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:266
		__asm volatile("lw   x7, 6 * 4(sp)");
800018d0:	01812383          	lw	t2,24(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:267
		__asm volatile("lw   x8, 7 * 4(sp)");
800018d4:	01c12403          	lw	s0,28(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:268
		__asm volatile("lw   x9, 8 * 4(sp)");
800018d8:	02012483          	lw	s1,32(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:269
		__asm volatile("lw   x10, 9 * 4(sp)");
800018dc:	02412503          	lw	a0,36(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:270
		__asm volatile("lw   x11, 10 * 4(sp)");
800018e0:	02812583          	lw	a1,40(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:271
		__asm volatile("lw   x12, 11 * 4(sp)");
800018e4:	02c12603          	lw	a2,44(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:272
		__asm volatile("lw   x13, 12 * 4(sp)");
800018e8:	03012683          	lw	a3,48(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:273
		__asm volatile("lw   x14, 13 * 4(sp)");
800018ec:	03412703          	lw	a4,52(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:274
		__asm volatile("lw   x15, 14 * 4(sp)");
800018f0:	03812783          	lw	a5,56(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:275
		__asm volatile("lw   x16, 15 * 4(sp)");
800018f4:	03c12803          	lw	a6,60(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:276
		__asm volatile("lw   x17, 16 * 4(sp)");
800018f8:	04012883          	lw	a7,64(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:277
		__asm volatile("lw   x18, 17 * 4(sp)");
800018fc:	04412903          	lw	s2,68(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:278
		__asm volatile("lw   x19, 18 * 4(sp)");
80001900:	04812983          	lw	s3,72(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:279
		__asm volatile("lw   x20, 19 * 4(sp)");
80001904:	04c12a03          	lw	s4,76(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:280
		__asm volatile("lw   x21, 20 * 4(sp)");
80001908:	05012a83          	lw	s5,80(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:281
		__asm volatile("lw   x22, 21 * 4(sp)");
8000190c:	05412b03          	lw	s6,84(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:282
		__asm volatile("lw   x23, 22 * 4(sp)");
80001910:	05812b83          	lw	s7,88(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:283
		__asm volatile("lw   x24, 23 * 4(sp)");
80001914:	05c12c03          	lw	s8,92(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:284
		__asm volatile("lw   x25, 24 * 4(sp)");
80001918:	06012c83          	lw	s9,96(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:285
		__asm volatile("lw   x26, 25 * 4(sp)");
8000191c:	06412d03          	lw	s10,100(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:286
		__asm volatile("lw   x27, 26 * 4(sp)");
80001920:	06812d83          	lw	s11,104(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:287
		__asm volatile("lw   x28, 27 * 4(sp)");
80001924:	06c12e03          	lw	t3,108(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:288
		__asm volatile("lw   x29, 28 * 4(sp)");
80001928:	07012e83          	lw	t4,112(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:289
		__asm volatile("lw   x30, 29 * 4(sp)");
8000192c:	07412f03          	lw	t5,116(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:290
		__asm volatile("lw   x31, 30 * 4(sp)");
80001930:	07812f83          	lw	t6,120(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:292

		__asm volatile("addi	sp, sp, 4 * 32");
80001934:	08010113          	addi	sp,sp,128
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:294

		__asm volatile("mret");
80001938:	30200073          	mret
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:296
	}
}
8000193c:	00000013          	nop
80001940:	00c12083          	lw	ra,12(sp)
80001944:	00812403          	lw	s0,8(sp)
80001948:	01010113          	addi	sp,sp,16
8000194c:	00008067          	ret

80001950 <xPortStartScheduler>:
xPortStartScheduler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:299
uint32_t g_startscheduler = 0;
BaseType_t xPortStartScheduler( void )
{
80001950:	ff010113          	addi	sp,sp,-16
80001954:	00112623          	sw	ra,12(sp)
80001958:	00812423          	sw	s0,8(sp)
8000195c:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:300
	vPortSetupTimer();
80001960:	d99ff0ef          	jal	ra,800016f8 <vPortSetupTimer>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:301
	uxCriticalNesting = 0;
80001964:	800077b7          	lui	a5,0x80007
80001968:	e207aa23          	sw	zero,-460(a5) # 80006e34 <__stack_top+0xfffc5844>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:302
	g_startscheduler = 1;
8000196c:	00100713          	li	a4,1
80001970:	92e1a423          	sw	a4,-1752(gp) # 80006f58 <g_startscheduler>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:303
	__enable_irq();
80001974:	a0dfe0ef          	jal	ra,80000380 <__enable_irq>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:305

	raise_soft_interrupt();
80001978:	bf5ff0ef          	jal	ra,8000156c <raise_soft_interrupt>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:308

	/*Should not get here*/
	return pdFALSE;
8000197c:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:309
}
80001980:	00078513          	mv	a0,a5
80001984:	00c12083          	lw	ra,12(sp)
80001988:	00812403          	lw	s0,8(sp)
8000198c:	01010113          	addi	sp,sp,16
80001990:	00008067          	ret

80001994 <Software_IRQHandler>:
Software_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:312

void Software_IRQHandler(void)
{
80001994:	ff010113          	addi	sp,sp,-16
80001998:	00112623          	sw	ra,12(sp)
8000199c:	00812423          	sw	s0,8(sp)
800019a0:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:313
	if(1 == g_startscheduler)
800019a4:	9281a703          	lw	a4,-1752(gp) # 80006f58 <g_startscheduler>
800019a8:	00100793          	li	a5,1
800019ac:	00f71863          	bne	a4,a5,800019bc <Software_IRQHandler+0x28>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:315
	{
		g_startscheduler = 2; //skip the save n switch context first time when scheduler is starting.
800019b0:	00200713          	li	a4,2
800019b4:	92e1a423          	sw	a4,-1752(gp) # 80006f58 <g_startscheduler>
800019b8:	0100006f          	j	800019c8 <Software_IRQHandler+0x34>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:321
	}
	else
	{
		/*Save Context*/
		{
			__asm volatile("lw	t0, pxCurrentTCB");
800019bc:	92c1a283          	lw	t0,-1748(gp) # 80006f5c <pxCurrentTCB>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:322
			__asm volatile("sw	a2, 0x0(t0)");
800019c0:	00c2a023          	sw	a2,0(t0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:325
		}

		vTaskSwitchContext();
800019c4:	445000ef          	jal	ra,80002608 <vTaskSwitchContext>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:329
	}

	// Moved by Imperas (was previously causing corruption of a5)
	PRCI->MSIP[0] = 0x00;
800019c8:	440007b7          	lui	a5,0x44000
800019cc:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:333

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
800019d0:	92c1a103          	lw	sp,-1748(gp) # 80006f5c <pxCurrentTCB>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:334
		__asm volatile("lw	sp, 0x0(sp)");
800019d4:	00012103          	lw	sp,0(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:336

		__asm volatile("lw	t0, 31 * 4(sp)");
800019d8:	07c12283          	lw	t0,124(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:337
		__asm volatile("csrw	mepc, t0");
800019dc:	34129073          	csrw	mepc,t0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:339

		__asm volatile("lw	x1, 0x0(sp)");
800019e0:	00012083          	lw	ra,0(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:340
		__asm volatile("lw   x4, 3 * 4(sp)");
800019e4:	00c12203          	lw	tp,12(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:341
		__asm volatile("lw   x5, 4 * 4(sp)");
800019e8:	01012283          	lw	t0,16(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:342
		__asm volatile("lw   x6, 5 * 4(sp)");
800019ec:	01412303          	lw	t1,20(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:343
		__asm volatile("lw   x7, 6 * 4(sp)");
800019f0:	01812383          	lw	t2,24(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:344
		__asm volatile("lw   x8, 7 * 4(sp)");
800019f4:	01c12403          	lw	s0,28(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:345
		__asm volatile("lw   x9, 8 * 4(sp)");
800019f8:	02012483          	lw	s1,32(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:346
		__asm volatile("lw   x10, 9 * 4(sp)");
800019fc:	02412503          	lw	a0,36(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:347
		__asm volatile("lw   x11, 10 * 4(sp)");
80001a00:	02812583          	lw	a1,40(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:348
		__asm volatile("lw   x12, 11 * 4(sp)");
80001a04:	02c12603          	lw	a2,44(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:349
		__asm volatile("lw   x13, 12 * 4(sp)");
80001a08:	03012683          	lw	a3,48(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:350
		__asm volatile("lw   x14, 13 * 4(sp)");
80001a0c:	03412703          	lw	a4,52(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:351
		__asm volatile("lw   x15, 14 * 4(sp)");
80001a10:	03812783          	lw	a5,56(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:352
		__asm volatile("lw   x16, 15 * 4(sp)");
80001a14:	03c12803          	lw	a6,60(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:353
		__asm volatile("lw   x17, 16 * 4(sp)");
80001a18:	04012883          	lw	a7,64(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:354
		__asm volatile("lw   x18, 17 * 4(sp)");
80001a1c:	04412903          	lw	s2,68(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:355
		__asm volatile("lw   x19, 18 * 4(sp)");
80001a20:	04812983          	lw	s3,72(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:356
		__asm volatile("lw   x20, 19 * 4(sp)");
80001a24:	04c12a03          	lw	s4,76(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:357
		__asm volatile("lw   x21, 20 * 4(sp)");
80001a28:	05012a83          	lw	s5,80(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:358
		__asm volatile("lw   x22, 21 * 4(sp)");
80001a2c:	05412b03          	lw	s6,84(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:359
		__asm volatile("lw   x23, 22 * 4(sp)");
80001a30:	05812b83          	lw	s7,88(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:360
		__asm volatile("lw   x24, 23 * 4(sp)");
80001a34:	05c12c03          	lw	s8,92(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:361
		__asm volatile("lw   x25, 24 * 4(sp)");
80001a38:	06012c83          	lw	s9,96(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:362
		__asm volatile("lw   x26, 25 * 4(sp)");
80001a3c:	06412d03          	lw	s10,100(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:363
		__asm volatile("lw   x27, 26 * 4(sp)");
80001a40:	06812d83          	lw	s11,104(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:364
		__asm volatile("lw   x28, 27 * 4(sp)");
80001a44:	06c12e03          	lw	t3,108(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:365
		__asm volatile("lw   x29, 28 * 4(sp)");
80001a48:	07012e83          	lw	t4,112(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:366
		__asm volatile("lw   x30, 29 * 4(sp)");
80001a4c:	07412f03          	lw	t5,116(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:367
		__asm volatile("lw   x31, 30 * 4(sp)");
80001a50:	07812f83          	lw	t6,120(sp)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:369

		__asm volatile("addi	sp, sp, 4 * 32");
80001a54:	08010113          	addi	sp,sp,128
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:374

	    // Moved by Imperas (causing corruption of a5 at this position)
		//PRCI->MSIP[0] = 0x00;

		__asm volatile("mret");
80001a58:	30200073          	mret
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:376
	}
}
80001a5c:	00000013          	nop
80001a60:	00c12083          	lw	ra,12(sp)
80001a64:	00812403          	lw	s0,8(sp)
80001a68:	01010113          	addi	sp,sp,16
80001a6c:	00008067          	ret

80001a70 <vPortYield>:
vPortYield():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:379

void vPortYield( void )
{
80001a70:	ff010113          	addi	sp,sp,-16
80001a74:	00112623          	sw	ra,12(sp)
80001a78:	00812423          	sw	s0,8(sp)
80001a7c:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:380
	raise_soft_interrupt();
80001a80:	aedff0ef          	jal	ra,8000156c <raise_soft_interrupt>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:381
}
80001a84:	00000013          	nop
80001a88:	00c12083          	lw	ra,12(sp)
80001a8c:	00812403          	lw	s0,8(sp)
80001a90:	01010113          	addi	sp,sp,16
80001a94:	00008067          	ret

80001a98 <vListInitialise>:
vListInitialise():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:80
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
80001a98:	fe010113          	addi	sp,sp,-32
80001a9c:	00812e23          	sw	s0,28(sp)
80001aa0:	02010413          	addi	s0,sp,32
80001aa4:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:84
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001aa8:	fec42783          	lw	a5,-20(s0)
80001aac:	00878713          	addi	a4,a5,8
80001ab0:	fec42783          	lw	a5,-20(s0)
80001ab4:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:88

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
80001ab8:	fec42783          	lw	a5,-20(s0)
80001abc:	fff00713          	li	a4,-1
80001ac0:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:92

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001ac4:	fec42783          	lw	a5,-20(s0)
80001ac8:	00878713          	addi	a4,a5,8
80001acc:	fec42783          	lw	a5,-20(s0)
80001ad0:	00e7a623          	sw	a4,12(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:93
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001ad4:	fec42783          	lw	a5,-20(s0)
80001ad8:	00878713          	addi	a4,a5,8
80001adc:	fec42783          	lw	a5,-20(s0)
80001ae0:	00e7a823          	sw	a4,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:95

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
80001ae4:	fec42783          	lw	a5,-20(s0)
80001ae8:	0007a023          	sw	zero,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:101

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
80001aec:	00000013          	nop
80001af0:	01c12403          	lw	s0,28(sp)
80001af4:	02010113          	addi	sp,sp,32
80001af8:	00008067          	ret

80001afc <vListInitialiseItem>:
vListInitialiseItem():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:105
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
80001afc:	fe010113          	addi	sp,sp,-32
80001b00:	00812e23          	sw	s0,28(sp)
80001b04:	02010413          	addi	s0,sp,32
80001b08:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:107
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80001b0c:	fec42783          	lw	a5,-20(s0)
80001b10:	0007a823          	sw	zero,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:113

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
80001b14:	00000013          	nop
80001b18:	01c12403          	lw	s0,28(sp)
80001b1c:	02010113          	addi	sp,sp,32
80001b20:	00008067          	ret

80001b24 <vListInsertEnd>:
vListInsertEnd():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:117
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001b24:	fd010113          	addi	sp,sp,-48
80001b28:	02812623          	sw	s0,44(sp)
80001b2c:	03010413          	addi	s0,sp,48
80001b30:	fca42e23          	sw	a0,-36(s0)
80001b34:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:118
ListItem_t * const pxIndex = pxList->pxIndex;
80001b38:	fdc42783          	lw	a5,-36(s0)
80001b3c:	0047a783          	lw	a5,4(a5)
80001b40:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:129
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
80001b44:	fd842783          	lw	a5,-40(s0)
80001b48:	fec42703          	lw	a4,-20(s0)
80001b4c:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:130
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
80001b50:	fec42783          	lw	a5,-20(s0)
80001b54:	0087a703          	lw	a4,8(a5)
80001b58:	fd842783          	lw	a5,-40(s0)
80001b5c:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:135

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
80001b60:	fec42783          	lw	a5,-20(s0)
80001b64:	0087a783          	lw	a5,8(a5)
80001b68:	fd842703          	lw	a4,-40(s0)
80001b6c:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:136
	pxIndex->pxPrevious = pxNewListItem;
80001b70:	fec42783          	lw	a5,-20(s0)
80001b74:	fd842703          	lw	a4,-40(s0)
80001b78:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:139

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001b7c:	fd842783          	lw	a5,-40(s0)
80001b80:	fdc42703          	lw	a4,-36(s0)
80001b84:	00e7a823          	sw	a4,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:141

	( pxList->uxNumberOfItems )++;
80001b88:	fdc42783          	lw	a5,-36(s0)
80001b8c:	0007a783          	lw	a5,0(a5)
80001b90:	00178713          	addi	a4,a5,1
80001b94:	fdc42783          	lw	a5,-36(s0)
80001b98:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:142
}
80001b9c:	00000013          	nop
80001ba0:	02c12403          	lw	s0,44(sp)
80001ba4:	03010113          	addi	sp,sp,48
80001ba8:	00008067          	ret

80001bac <vListInsert>:
vListInsert():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:146
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001bac:	fd010113          	addi	sp,sp,-48
80001bb0:	02812623          	sw	s0,44(sp)
80001bb4:	03010413          	addi	s0,sp,48
80001bb8:	fca42e23          	sw	a0,-36(s0)
80001bbc:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:148
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
80001bc0:	fd842783          	lw	a5,-40(s0)
80001bc4:	0007a783          	lw	a5,0(a5)
80001bc8:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:164
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
80001bcc:	fe842703          	lw	a4,-24(s0)
80001bd0:	fff00793          	li	a5,-1
80001bd4:	00f71a63          	bne	a4,a5,80001be8 <vListInsert+0x3c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:166
	{
		pxIterator = pxList->xListEnd.pxPrevious;
80001bd8:	fdc42783          	lw	a5,-36(s0)
80001bdc:	0107a783          	lw	a5,16(a5)
80001be0:	fef42623          	sw	a5,-20(s0)
80001be4:	0340006f          	j	80001c18 <vListInsert+0x6c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:192
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001be8:	fdc42783          	lw	a5,-36(s0)
80001bec:	00878793          	addi	a5,a5,8
80001bf0:	fef42623          	sw	a5,-20(s0)
80001bf4:	0100006f          	j	80001c04 <vListInsert+0x58>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 3)
80001bf8:	fec42783          	lw	a5,-20(s0)
80001bfc:	0047a783          	lw	a5,4(a5)
80001c00:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 1)
80001c04:	fec42783          	lw	a5,-20(s0)
80001c08:	0047a783          	lw	a5,4(a5)
80001c0c:	0007a783          	lw	a5,0(a5)
80001c10:	fe842703          	lw	a4,-24(s0)
80001c14:	fef772e3          	bleu	a5,a4,80001bf8 <vListInsert+0x4c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:199
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
80001c18:	fec42783          	lw	a5,-20(s0)
80001c1c:	0047a703          	lw	a4,4(a5)
80001c20:	fd842783          	lw	a5,-40(s0)
80001c24:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:200
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
80001c28:	fd842783          	lw	a5,-40(s0)
80001c2c:	0047a783          	lw	a5,4(a5)
80001c30:	fd842703          	lw	a4,-40(s0)
80001c34:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:201
	pxNewListItem->pxPrevious = pxIterator;
80001c38:	fd842783          	lw	a5,-40(s0)
80001c3c:	fec42703          	lw	a4,-20(s0)
80001c40:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:202
	pxIterator->pxNext = pxNewListItem;
80001c44:	fec42783          	lw	a5,-20(s0)
80001c48:	fd842703          	lw	a4,-40(s0)
80001c4c:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:206

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001c50:	fd842783          	lw	a5,-40(s0)
80001c54:	fdc42703          	lw	a4,-36(s0)
80001c58:	00e7a823          	sw	a4,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:208

	( pxList->uxNumberOfItems )++;
80001c5c:	fdc42783          	lw	a5,-36(s0)
80001c60:	0007a783          	lw	a5,0(a5)
80001c64:	00178713          	addi	a4,a5,1
80001c68:	fdc42783          	lw	a5,-36(s0)
80001c6c:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:209
}
80001c70:	00000013          	nop
80001c74:	02c12403          	lw	s0,44(sp)
80001c78:	03010113          	addi	sp,sp,48
80001c7c:	00008067          	ret

80001c80 <uxListRemove>:
uxListRemove():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:213
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
80001c80:	fd010113          	addi	sp,sp,-48
80001c84:	02812623          	sw	s0,44(sp)
80001c88:	03010413          	addi	s0,sp,48
80001c8c:	fca42e23          	sw	a0,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:216
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
80001c90:	fdc42783          	lw	a5,-36(s0)
80001c94:	0107a783          	lw	a5,16(a5)
80001c98:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:218

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
80001c9c:	fdc42783          	lw	a5,-36(s0)
80001ca0:	0047a783          	lw	a5,4(a5)
80001ca4:	fdc42703          	lw	a4,-36(s0)
80001ca8:	00872703          	lw	a4,8(a4) # 44000008 <RAM_SIZE+0x43f80008>
80001cac:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:219
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
80001cb0:	fdc42783          	lw	a5,-36(s0)
80001cb4:	0087a783          	lw	a5,8(a5)
80001cb8:	fdc42703          	lw	a4,-36(s0)
80001cbc:	00472703          	lw	a4,4(a4)
80001cc0:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:225

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
80001cc4:	fec42783          	lw	a5,-20(s0)
80001cc8:	0047a783          	lw	a5,4(a5)
80001ccc:	fdc42703          	lw	a4,-36(s0)
80001cd0:	00f71a63          	bne	a4,a5,80001ce4 <uxListRemove+0x64>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:227
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
80001cd4:	fdc42783          	lw	a5,-36(s0)
80001cd8:	0087a703          	lw	a4,8(a5)
80001cdc:	fec42783          	lw	a5,-20(s0)
80001ce0:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:234
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
80001ce4:	fdc42783          	lw	a5,-36(s0)
80001ce8:	0007a823          	sw	zero,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:235
	( pxList->uxNumberOfItems )--;
80001cec:	fec42783          	lw	a5,-20(s0)
80001cf0:	0007a783          	lw	a5,0(a5)
80001cf4:	fff78713          	addi	a4,a5,-1
80001cf8:	fec42783          	lw	a5,-20(s0)
80001cfc:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:237

	return pxList->uxNumberOfItems;
80001d00:	fec42783          	lw	a5,-20(s0)
80001d04:	0007a783          	lw	a5,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:238
}
80001d08:	00078513          	mv	a0,a5
80001d0c:	02c12403          	lw	s0,44(sp)
80001d10:	03010113          	addi	sp,sp,48
80001d14:	00008067          	ret

80001d18 <memset>:
memset():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:25

  return dest;
}

void* memset(void* dest, int byte, size_t len)
{
80001d18:	fd010113          	addi	sp,sp,-48
80001d1c:	02812623          	sw	s0,44(sp)
80001d20:	03010413          	addi	s0,sp,48
80001d24:	fca42e23          	sw	a0,-36(s0)
80001d28:	fcb42c23          	sw	a1,-40(s0)
80001d2c:	fcc42a23          	sw	a2,-44(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:26
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
80001d30:	fdc42703          	lw	a4,-36(s0)
80001d34:	fd442783          	lw	a5,-44(s0)
80001d38:	00f767b3          	or	a5,a4,a5
80001d3c:	0037f793          	andi	a5,a5,3
80001d40:	06079863          	bnez	a5,80001db0 <memset+0x98>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:27
    uintptr_t word = byte & 0xFF;
80001d44:	fd842783          	lw	a5,-40(s0)
80001d48:	0ff7f793          	andi	a5,a5,255
80001d4c:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:28
    word |= word << 8;
80001d50:	fe442783          	lw	a5,-28(s0)
80001d54:	00879793          	slli	a5,a5,0x8
80001d58:	fe442703          	lw	a4,-28(s0)
80001d5c:	00f767b3          	or	a5,a4,a5
80001d60:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:29
    word |= word << 16;
80001d64:	fe442783          	lw	a5,-28(s0)
80001d68:	01079793          	slli	a5,a5,0x10
80001d6c:	fe442703          	lw	a4,-28(s0)
80001d70:	00f767b3          	or	a5,a4,a5
80001d74:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:32
    word |= word << 16 << 16;

    uintptr_t *d = dest;
80001d78:	fdc42783          	lw	a5,-36(s0)
80001d7c:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001d80:	0180006f          	j	80001d98 <memset+0x80>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:34
      *d++ = word;
80001d84:	fec42783          	lw	a5,-20(s0)
80001d88:	00478713          	addi	a4,a5,4
80001d8c:	fee42623          	sw	a4,-20(s0)
80001d90:	fe442703          	lw	a4,-28(s0)
80001d94:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001d98:	fdc42703          	lw	a4,-36(s0)
80001d9c:	fd442783          	lw	a5,-44(s0)
80001da0:	00f707b3          	add	a5,a4,a5
80001da4:	fec42703          	lw	a4,-20(s0)
80001da8:	fcf76ee3          	bltu	a4,a5,80001d84 <memset+0x6c>
80001dac:	0400006f          	j	80001dec <memset+0xd4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:36
  } else {
    char *d = dest;
80001db0:	fdc42783          	lw	a5,-36(s0)
80001db4:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001db8:	0200006f          	j	80001dd8 <memset+0xc0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:38
      *d++ = byte;
80001dbc:	fe842783          	lw	a5,-24(s0)
80001dc0:	00178713          	addi	a4,a5,1
80001dc4:	fee42423          	sw	a4,-24(s0)
80001dc8:	fd842703          	lw	a4,-40(s0)
80001dcc:	01871713          	slli	a4,a4,0x18
80001dd0:	41875713          	srai	a4,a4,0x18
80001dd4:	00e78023          	sb	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001dd8:	fdc42703          	lw	a4,-36(s0)
80001ddc:	fd442783          	lw	a5,-44(s0)
80001de0:	00f707b3          	add	a5,a4,a5
80001de4:	fe842703          	lw	a4,-24(s0)
80001de8:	fcf76ae3          	bltu	a4,a5,80001dbc <memset+0xa4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:40
  }
  return dest;
80001dec:	fdc42783          	lw	a5,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:41
}
80001df0:	00078513          	mv	a0,a5
80001df4:	02c12403          	lw	s0,44(sp)
80001df8:	03010113          	addi	sp,sp,48
80001dfc:	00008067          	ret

80001e00 <strlen>:
strlen():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:44

size_t strlen(const char *s)
{
80001e00:	fd010113          	addi	sp,sp,-48
80001e04:	02812623          	sw	s0,44(sp)
80001e08:	03010413          	addi	s0,sp,48
80001e0c:	fca42e23          	sw	a0,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:45
  const char *p = s;
80001e10:	fdc42783          	lw	a5,-36(s0)
80001e14:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001e18:	0100006f          	j	80001e28 <strlen+0x28>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:47
    p++;
80001e1c:	fec42783          	lw	a5,-20(s0)
80001e20:	00178793          	addi	a5,a5,1
80001e24:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001e28:	fec42783          	lw	a5,-20(s0)
80001e2c:	00078783          	lb	a5,0(a5)
80001e30:	fe0796e3          	bnez	a5,80001e1c <strlen+0x1c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:48
  return p - s;
80001e34:	fec42703          	lw	a4,-20(s0)
80001e38:	fdc42783          	lw	a5,-36(s0)
80001e3c:	40f707b3          	sub	a5,a4,a5
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:49
}
80001e40:	00078513          	mv	a0,a5
80001e44:	02c12403          	lw	s0,44(sp)
80001e48:	03010113          	addi	sp,sp,48
80001e4c:	00008067          	ret

80001e50 <xTaskGenericCreate>:
xTaskGenericCreate():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:551

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80001e50:	fc010113          	addi	sp,sp,-64
80001e54:	02112e23          	sw	ra,60(sp)
80001e58:	02812c23          	sw	s0,56(sp)
80001e5c:	04010413          	addi	s0,sp,64
80001e60:	fca42e23          	sw	a0,-36(s0)
80001e64:	fcb42c23          	sw	a1,-40(s0)
80001e68:	fcd42823          	sw	a3,-48(s0)
80001e6c:	fce42623          	sw	a4,-52(s0)
80001e70:	fcf42423          	sw	a5,-56(s0)
80001e74:	fd042223          	sw	a6,-60(s0)
80001e78:	fd142023          	sw	a7,-64(s0)
80001e7c:	00060793          	mv	a5,a2
80001e80:	fcf41b23          	sh	a5,-42(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:556
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
80001e84:	fdc42783          	lw	a5,-36(s0)
80001e88:	00079663          	bnez	a5,80001e94 <xTaskGenericCreate+0x44>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:556 (discriminator 1)
80001e8c:	30047073          	csrci	mstatus,8
80001e90:	0000006f          	j	80001e90 <xTaskGenericCreate+0x40>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:557
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
80001e94:	fcc42703          	lw	a4,-52(s0)
80001e98:	00400793          	li	a5,4
80001e9c:	00e7f663          	bleu	a4,a5,80001ea8 <xTaskGenericCreate+0x58>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 1)
80001ea0:	30047073          	csrci	mstatus,8
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 2)
80001ea4:	0000006f          	j	80001ea4 <xTaskGenericCreate+0x54>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:561

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
80001ea8:	fd645783          	lhu	a5,-42(s0)
80001eac:	fc442583          	lw	a1,-60(s0)
80001eb0:	00078513          	mv	a0,a5
80001eb4:	395000ef          	jal	ra,80002a48 <prvAllocateTCBAndStack>
80001eb8:	fea42423          	sw	a0,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:562
	if( pxNewTCB != NULL )
80001ebc:	fe842783          	lw	a5,-24(s0)
80001ec0:	16078263          	beqz	a5,80002024 <xTaskGenericCreate+0x1d4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:598
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
80001ec4:	fe842783          	lw	a5,-24(s0)
80001ec8:	0307a703          	lw	a4,48(a5)
80001ecc:	fd645683          	lhu	a3,-42(s0)
80001ed0:	400007b7          	lui	a5,0x40000
80001ed4:	fff78793          	addi	a5,a5,-1 # 3fffffff <RAM_SIZE+0x3ff7ffff>
80001ed8:	00f687b3          	add	a5,a3,a5
80001edc:	00279793          	slli	a5,a5,0x2
80001ee0:	00f707b3          	add	a5,a4,a5
80001ee4:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:599
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
80001ee8:	fe442783          	lw	a5,-28(s0)
80001eec:	ffc7f793          	andi	a5,a5,-4
80001ef0:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:602

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
80001ef4:	fe442783          	lw	a5,-28(s0)
80001ef8:	0037f793          	andi	a5,a5,3
80001efc:	00078663          	beqz	a5,80001f08 <xTaskGenericCreate+0xb8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 1)
80001f00:	30047073          	csrci	mstatus,8
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 3)
80001f04:	0000006f          	j	80001f04 <xTaskGenericCreate+0xb4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:619
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
80001f08:	fd645783          	lhu	a5,-42(s0)
80001f0c:	00078713          	mv	a4,a5
80001f10:	fc042683          	lw	a3,-64(s0)
80001f14:	fcc42603          	lw	a2,-52(s0)
80001f18:	fd842583          	lw	a1,-40(s0)
80001f1c:	fe842503          	lw	a0,-24(s0)
80001f20:	009000ef          	jal	ra,80002728 <prvInitialiseTCBVariables>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:631
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
80001f24:	fd042603          	lw	a2,-48(s0)
80001f28:	fdc42583          	lw	a1,-36(s0)
80001f2c:	fe442503          	lw	a0,-28(s0)
80001f30:	8c1ff0ef          	jal	ra,800017f0 <pxPortInitialiseStack>
80001f34:	00050713          	mv	a4,a0
80001f38:	fe842783          	lw	a5,-24(s0)
80001f3c:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:635
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
80001f40:	fc842783          	lw	a5,-56(s0)
80001f44:	00078863          	beqz	a5,80001f54 <xTaskGenericCreate+0x104>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:640
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
80001f48:	fc842783          	lw	a5,-56(s0)
80001f4c:	fe842703          	lw	a4,-24(s0)
80001f50:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:649
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
80001f54:	e64ff0ef          	jal	ra,800015b8 <vPortEnterCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:651
		{
			uxCurrentNumberOfTasks++;
80001f58:	93c1a783          	lw	a5,-1732(gp) # 80006f6c <uxCurrentNumberOfTasks>
80001f5c:	00178713          	addi	a4,a5,1
80001f60:	92e1ae23          	sw	a4,-1732(gp) # 80006f6c <uxCurrentNumberOfTasks>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:652
			if( pxCurrentTCB == NULL )
80001f64:	92c1a783          	lw	a5,-1748(gp) # 80006f5c <pxCurrentTCB>
80001f68:	02079063          	bnez	a5,80001f88 <xTaskGenericCreate+0x138>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:656
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
80001f6c:	fe842703          	lw	a4,-24(s0)
80001f70:	92e1a623          	sw	a4,-1748(gp) # 80006f5c <pxCurrentTCB>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:658

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
80001f74:	93c1a703          	lw	a4,-1732(gp) # 80006f6c <uxCurrentNumberOfTasks>
80001f78:	00100793          	li	a5,1
80001f7c:	02f71663          	bne	a4,a5,80001fa8 <xTaskGenericCreate+0x158>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:663
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
80001f80:	0e1000ef          	jal	ra,80002860 <prvInitialiseTaskLists>
80001f84:	0240006f          	j	80001fa8 <xTaskGenericCreate+0x158>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:675
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
80001f88:	9481a783          	lw	a5,-1720(gp) # 80006f78 <xSchedulerRunning>
80001f8c:	00079e63          	bnez	a5,80001fa8 <xTaskGenericCreate+0x158>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:677
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
80001f90:	92c1a783          	lw	a5,-1748(gp) # 80006f5c <pxCurrentTCB>
80001f94:	02c7a783          	lw	a5,44(a5)
80001f98:	fcc42703          	lw	a4,-52(s0)
80001f9c:	00f76663          	bltu	a4,a5,80001fa8 <xTaskGenericCreate+0x158>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:679
					{
						pxCurrentTCB = pxNewTCB;
80001fa0:	fe842703          	lw	a4,-24(s0)
80001fa4:	92e1a623          	sw	a4,-1748(gp) # 80006f5c <pxCurrentTCB>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:692
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
80001fa8:	9581a783          	lw	a5,-1704(gp) # 80006f88 <uxTaskNumber>
80001fac:	00178713          	addi	a4,a5,1
80001fb0:	94e1ac23          	sw	a4,-1704(gp) # 80006f88 <uxTaskNumber>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:697

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
80001fb4:	9581a703          	lw	a4,-1704(gp) # 80006f88 <uxTaskNumber>
80001fb8:	fe842783          	lw	a5,-24(s0)
80001fbc:	04e7a423          	sw	a4,72(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:702
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
80001fc0:	fe842783          	lw	a5,-24(s0)
80001fc4:	02c7a703          	lw	a4,44(a5)
80001fc8:	9441a783          	lw	a5,-1724(gp) # 80006f74 <uxTopReadyPriority>
80001fcc:	00e7f863          	bleu	a4,a5,80001fdc <xTaskGenericCreate+0x18c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 1)
80001fd0:	fe842783          	lw	a5,-24(s0)
80001fd4:	02c7a703          	lw	a4,44(a5)
80001fd8:	94e1a223          	sw	a4,-1724(gp) # 80006f74 <uxTopReadyPriority>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 3)
80001fdc:	fe842783          	lw	a5,-24(s0)
80001fe0:	02c7a703          	lw	a4,44(a5)
80001fe4:	00070793          	mv	a5,a4
80001fe8:	00279793          	slli	a5,a5,0x2
80001fec:	00e787b3          	add	a5,a5,a4
80001ff0:	00279793          	slli	a5,a5,0x2
80001ff4:	80020737          	lui	a4,0x80020
80001ff8:	fa070713          	addi	a4,a4,-96 # 8001ffa0 <__stack_top+0xfffde9b0>
80001ffc:	00e78733          	add	a4,a5,a4
80002000:	fe842783          	lw	a5,-24(s0)
80002004:	00478793          	addi	a5,a5,4
80002008:	00078593          	mv	a1,a5
8000200c:	00070513          	mv	a0,a4
80002010:	b15ff0ef          	jal	ra,80001b24 <vListInsertEnd>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:704 (discriminator 3)

			xReturn = pdPASS;
80002014:	00100793          	li	a5,1
80002018:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:707 (discriminator 3)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
8000201c:	dd0ff0ef          	jal	ra,800015ec <vPortExitCritical>
80002020:	00c0006f          	j	8000202c <xTaskGenericCreate+0x1dc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:711
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
80002024:	fff00793          	li	a5,-1
80002028:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:715
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
8000202c:	fec42703          	lw	a4,-20(s0)
80002030:	00100793          	li	a5,1
80002034:	02f71063          	bne	a4,a5,80002054 <xTaskGenericCreate+0x204>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:717
	{
		if( xSchedulerRunning != pdFALSE )
80002038:	9481a783          	lw	a5,-1720(gp) # 80006f78 <xSchedulerRunning>
8000203c:	00078c63          	beqz	a5,80002054 <xTaskGenericCreate+0x204>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:721
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
80002040:	92c1a783          	lw	a5,-1748(gp) # 80006f5c <pxCurrentTCB>
80002044:	02c7a783          	lw	a5,44(a5)
80002048:	fcc42703          	lw	a4,-52(s0)
8000204c:	00e7f463          	bleu	a4,a5,80002054 <xTaskGenericCreate+0x204>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:723
			{
				taskYIELD_IF_USING_PREEMPTION();
80002050:	a21ff0ef          	jal	ra,80001a70 <vPortYield>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:736
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
80002054:	fec42783          	lw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:737
}
80002058:	00078513          	mv	a0,a5
8000205c:	03c12083          	lw	ra,60(sp)
80002060:	03812403          	lw	s0,56(sp)
80002064:	04010113          	addi	sp,sp,64
80002068:	00008067          	ret

8000206c <vTaskDelete>:
vTaskDelete():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:743
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
8000206c:	fd010113          	addi	sp,sp,-48
80002070:	02112623          	sw	ra,44(sp)
80002074:	02812423          	sw	s0,40(sp)
80002078:	03010413          	addi	s0,sp,48
8000207c:	fca42e23          	sw	a0,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:746
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
80002080:	d38ff0ef          	jal	ra,800015b8 <vPortEnterCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:750
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
80002084:	fdc42783          	lw	a5,-36(s0)
80002088:	00079663          	bnez	a5,80002094 <vTaskDelete+0x28>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 1)
8000208c:	92c1a783          	lw	a5,-1748(gp) # 80006f5c <pxCurrentTCB>
80002090:	0080006f          	j	80002098 <vTaskDelete+0x2c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 2)
80002094:	fdc42783          	lw	a5,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 4)
80002098:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:756 (discriminator 4)

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
8000209c:	fec42783          	lw	a5,-20(s0)
800020a0:	00478793          	addi	a5,a5,4
800020a4:	00078513          	mv	a0,a5
800020a8:	bd9ff0ef          	jal	ra,80001c80 <uxListRemove>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:766 (discriminator 4)
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
800020ac:	fec42783          	lw	a5,-20(s0)
800020b0:	0287a783          	lw	a5,40(a5)
800020b4:	00078a63          	beqz	a5,800020c8 <vTaskDelete+0x5c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:768
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
800020b8:	fec42783          	lw	a5,-20(s0)
800020bc:	01878793          	addi	a5,a5,24
800020c0:	00078513          	mv	a0,a5
800020c4:	bbdff0ef          	jal	ra,80001c80 <uxListRemove>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:775
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
800020c8:	fec42783          	lw	a5,-20(s0)
800020cc:	00478793          	addi	a5,a5,4
800020d0:	00078593          	mv	a1,a5
800020d4:	800207b7          	lui	a5,0x80020
800020d8:	04078513          	addi	a0,a5,64 # 80020040 <__stack_top+0xfffdea50>
800020dc:	a49ff0ef          	jal	ra,80001b24 <vListInsertEnd>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:780

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
800020e0:	9381a783          	lw	a5,-1736(gp) # 80006f68 <uxTasksDeleted>
800020e4:	00178713          	addi	a4,a5,1
800020e8:	92e1ac23          	sw	a4,-1736(gp) # 80006f68 <uxTasksDeleted>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:784

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
800020ec:	9581a783          	lw	a5,-1704(gp) # 80006f88 <uxTaskNumber>
800020f0:	00178713          	addi	a4,a5,1
800020f4:	94e1ac23          	sw	a4,-1704(gp) # 80006f88 <uxTaskNumber>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:788

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
800020f8:	cf4ff0ef          	jal	ra,800015ec <vPortExitCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:792

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
800020fc:	9481a783          	lw	a5,-1720(gp) # 80006f78 <xSchedulerRunning>
80002100:	02078a63          	beqz	a5,80002134 <vTaskDelete+0xc8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:794
		{
			if( pxTCB == pxCurrentTCB )
80002104:	92c1a783          	lw	a5,-1748(gp) # 80006f5c <pxCurrentTCB>
80002108:	fec42703          	lw	a4,-20(s0)
8000210c:	00f71e63          	bne	a4,a5,80002128 <vTaskDelete+0xbc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:796
			{
				configASSERT( uxSchedulerSuspended == 0 );
80002110:	9601a783          	lw	a5,-1696(gp) # 80006f90 <uxSchedulerSuspended>
80002114:	00078663          	beqz	a5,80002120 <vTaskDelete+0xb4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:796 (discriminator 1)
80002118:	30047073          	csrci	mstatus,8
8000211c:	0000006f          	j	8000211c <vTaskDelete+0xb0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:804
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
80002120:	951ff0ef          	jal	ra,80001a70 <vPortYield>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:817
					prvResetNextTaskUnblockTime();
				}
				taskEXIT_CRITICAL();
			}
		}
	}
80002124:	0100006f          	j	80002134 <vTaskDelete+0xc8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:810
				taskENTER_CRITICAL();
80002128:	c90ff0ef          	jal	ra,800015b8 <vPortEnterCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:812
					prvResetNextTaskUnblockTime();
8000212c:	21d000ef          	jal	ra,80002b48 <prvResetNextTaskUnblockTime>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:814
				taskEXIT_CRITICAL();
80002130:	cbcff0ef          	jal	ra,800015ec <vPortExitCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:817
	}
80002134:	00000013          	nop
80002138:	02c12083          	lw	ra,44(sp)
8000213c:	02812403          	lw	s0,40(sp)
80002140:	03010113          	addi	sp,sp,48
80002144:	00008067          	ret

80002148 <vTaskDelay>:
vTaskDelay():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:921
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
80002148:	fd010113          	addi	sp,sp,-48
8000214c:	02112623          	sw	ra,44(sp)
80002150:	02812423          	sw	s0,40(sp)
80002154:	03010413          	addi	s0,sp,48
80002158:	fca42e23          	sw	a0,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:923
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
8000215c:	fe042623          	sw	zero,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:927


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
80002160:	fdc42783          	lw	a5,-36(s0)
80002164:	04078463          	beqz	a5,800021ac <vTaskDelay+0x64>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:929
		{
			configASSERT( uxSchedulerSuspended == 0 );
80002168:	9601a783          	lw	a5,-1696(gp) # 80006f90 <uxSchedulerSuspended>
8000216c:	00078663          	beqz	a5,80002178 <vTaskDelay+0x30>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:929 (discriminator 1)
80002170:	30047073          	csrci	mstatus,8
80002174:	0000006f          	j	80002174 <vTaskDelay+0x2c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:930
			vTaskSuspendAll();
80002178:	0e4000ef          	jal	ra,8000225c <vTaskSuspendAll>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:944
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
8000217c:	9401a783          	lw	a5,-1728(gp) # 80006f70 <xTickCount>
80002180:	fdc42703          	lw	a4,-36(s0)
80002184:	00f707b3          	add	a5,a4,a5
80002188:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:949

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
8000218c:	92c1a783          	lw	a5,-1748(gp) # 80006f5c <pxCurrentTCB>
80002190:	00478793          	addi	a5,a5,4
80002194:	00078513          	mv	a0,a5
80002198:	ae9ff0ef          	jal	ra,80001c80 <uxListRemove>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:960
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
8000219c:	fe842503          	lw	a0,-24(s0)
800021a0:	021000ef          	jal	ra,800029c0 <prvAddCurrentTaskToDelayedList>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:962
			}
			xAlreadyYielded = xTaskResumeAll();
800021a4:	0e0000ef          	jal	ra,80002284 <xTaskResumeAll>
800021a8:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:971
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
800021ac:	fec42783          	lw	a5,-20(s0)
800021b0:	00079463          	bnez	a5,800021b8 <vTaskDelay+0x70>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:973
		{
			portYIELD_WITHIN_API();
800021b4:	8bdff0ef          	jal	ra,80001a70 <vPortYield>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:979
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
800021b8:	00000013          	nop
800021bc:	02c12083          	lw	ra,44(sp)
800021c0:	02812403          	lw	s0,40(sp)
800021c4:	03010113          	addi	sp,sp,48
800021c8:	00008067          	ret

800021cc <vTaskStartScheduler>:
vTaskStartScheduler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1542

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
800021cc:	fe010113          	addi	sp,sp,-32
800021d0:	00112e23          	sw	ra,28(sp)
800021d4:	00812c23          	sw	s0,24(sp)
800021d8:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1555
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
800021dc:	00000893          	li	a7,0
800021e0:	00000813          	li	a6,0
800021e4:	00000793          	li	a5,0
800021e8:	00000713          	li	a4,0
800021ec:	00000693          	li	a3,0
800021f0:	40000613          	li	a2,1024
800021f4:	800075b7          	lui	a1,0x80007
800021f8:	a6458593          	addi	a1,a1,-1436 # 80006a64 <__stack_top+0xfffc5474>
800021fc:	80002537          	lui	a0,0x80002
80002200:	6f450513          	addi	a0,a0,1780 # 800026f4 <__stack_top+0xfffc1104>
80002204:	c4dff0ef          	jal	ra,80001e50 <xTaskGenericCreate>
80002208:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1572
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
8000220c:	fec42703          	lw	a4,-20(s0)
80002210:	00100793          	li	a5,1
80002214:	02f71263          	bne	a4,a5,80002238 <vTaskStartScheduler+0x6c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1579
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
80002218:	30047073          	csrci	mstatus,8
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1589
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
8000221c:	fff00713          	li	a4,-1
80002220:	94e1ae23          	sw	a4,-1700(gp) # 80006f8c <xNextTaskUnblockTime>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1590
		xSchedulerRunning = pdTRUE;
80002224:	00100713          	li	a4,1
80002228:	94e1a423          	sw	a4,-1720(gp) # 80006f78 <xSchedulerRunning>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1591
		xTickCount = ( TickType_t ) 0U;
8000222c:	9401a023          	sw	zero,-1728(gp) # 80006f70 <xTickCount>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1600
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
80002230:	f20ff0ef          	jal	ra,80001950 <xPortStartScheduler>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
80002234:	0140006f          	j	80002248 <vTaskStartScheduler+0x7c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615
		configASSERT( xReturn );
80002238:	fec42783          	lw	a5,-20(s0)
8000223c:	00079663          	bnez	a5,80002248 <vTaskStartScheduler+0x7c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 1)
80002240:	30047073          	csrci	mstatus,8
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 2)
80002244:	0000006f          	j	80002244 <vTaskStartScheduler+0x78>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
}
80002248:	00000013          	nop
8000224c:	01c12083          	lw	ra,28(sp)
80002250:	01812403          	lw	s0,24(sp)
80002254:	02010113          	addi	sp,sp,32
80002258:	00008067          	ret

8000225c <vTaskSuspendAll>:
vTaskSuspendAll():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1632
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
8000225c:	ff010113          	addi	sp,sp,-16
80002260:	00812623          	sw	s0,12(sp)
80002264:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1637
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
80002268:	9601a783          	lw	a5,-1696(gp) # 80006f90 <uxSchedulerSuspended>
8000226c:	00178713          	addi	a4,a5,1
80002270:	96e1a023          	sw	a4,-1696(gp) # 80006f90 <uxSchedulerSuspended>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1638
}
80002274:	00000013          	nop
80002278:	00c12403          	lw	s0,12(sp)
8000227c:	01010113          	addi	sp,sp,16
80002280:	00008067          	ret

80002284 <xTaskResumeAll>:
xTaskResumeAll():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1670

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
80002284:	fe010113          	addi	sp,sp,-32
80002288:	00112e23          	sw	ra,28(sp)
8000228c:	00812c23          	sw	s0,24(sp)
80002290:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1672
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
80002294:	fe042623          	sw	zero,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
80002298:	9601a783          	lw	a5,-1696(gp) # 80006f90 <uxSchedulerSuspended>
8000229c:	00079663          	bnez	a5,800022a8 <xTaskResumeAll+0x24>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676 (discriminator 1)
800022a0:	30047073          	csrci	mstatus,8
800022a4:	0000006f          	j	800022a4 <xTaskResumeAll+0x20>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1683
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
800022a8:	b10ff0ef          	jal	ra,800015b8 <vPortEnterCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1685
	{
		--uxSchedulerSuspended;
800022ac:	9601a783          	lw	a5,-1696(gp) # 80006f90 <uxSchedulerSuspended>
800022b0:	fff78713          	addi	a4,a5,-1
800022b4:	96e1a023          	sw	a4,-1696(gp) # 80006f90 <uxSchedulerSuspended>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1687

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
800022b8:	9601a783          	lw	a5,-1696(gp) # 80006f90 <uxSchedulerSuspended>
800022bc:	10079663          	bnez	a5,800023c8 <xTaskResumeAll+0x144>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1689
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
800022c0:	93c1a783          	lw	a5,-1732(gp) # 80006f6c <uxCurrentNumberOfTasks>
800022c4:	10078263          	beqz	a5,800023c8 <xTaskResumeAll+0x144>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
800022c8:	0a80006f          	j	80002370 <xTaskResumeAll+0xec>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1695
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
800022cc:	800207b7          	lui	a5,0x80020
800022d0:	02c78793          	addi	a5,a5,44 # 8002002c <__stack_top+0xfffdea3c>
800022d4:	00c7a783          	lw	a5,12(a5)
800022d8:	00c7a783          	lw	a5,12(a5)
800022dc:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1696
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
800022e0:	fe842783          	lw	a5,-24(s0)
800022e4:	01878793          	addi	a5,a5,24
800022e8:	00078513          	mv	a0,a5
800022ec:	995ff0ef          	jal	ra,80001c80 <uxListRemove>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1697
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
800022f0:	fe842783          	lw	a5,-24(s0)
800022f4:	00478793          	addi	a5,a5,4
800022f8:	00078513          	mv	a0,a5
800022fc:	985ff0ef          	jal	ra,80001c80 <uxListRemove>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698
					prvAddTaskToReadyList( pxTCB );
80002300:	fe842783          	lw	a5,-24(s0)
80002304:	02c7a703          	lw	a4,44(a5)
80002308:	9441a783          	lw	a5,-1724(gp) # 80006f74 <uxTopReadyPriority>
8000230c:	00e7f863          	bleu	a4,a5,8000231c <xTaskResumeAll+0x98>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 1)
80002310:	fe842783          	lw	a5,-24(s0)
80002314:	02c7a703          	lw	a4,44(a5)
80002318:	94e1a223          	sw	a4,-1724(gp) # 80006f74 <uxTopReadyPriority>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 3)
8000231c:	fe842783          	lw	a5,-24(s0)
80002320:	02c7a703          	lw	a4,44(a5)
80002324:	00070793          	mv	a5,a4
80002328:	00279793          	slli	a5,a5,0x2
8000232c:	00e787b3          	add	a5,a5,a4
80002330:	00279793          	slli	a5,a5,0x2
80002334:	80020737          	lui	a4,0x80020
80002338:	fa070713          	addi	a4,a4,-96 # 8001ffa0 <__stack_top+0xfffde9b0>
8000233c:	00e78733          	add	a4,a5,a4
80002340:	fe842783          	lw	a5,-24(s0)
80002344:	00478793          	addi	a5,a5,4
80002348:	00078593          	mv	a1,a5
8000234c:	00070513          	mv	a0,a4
80002350:	fd4ff0ef          	jal	ra,80001b24 <vListInsertEnd>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1702 (discriminator 3)

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80002354:	fe842783          	lw	a5,-24(s0)
80002358:	02c7a703          	lw	a4,44(a5)
8000235c:	92c1a783          	lw	a5,-1748(gp) # 80006f5c <pxCurrentTCB>
80002360:	02c7a783          	lw	a5,44(a5)
80002364:	00f76663          	bltu	a4,a5,80002370 <xTaskResumeAll+0xec>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1704
					{
						xYieldPending = pdTRUE;
80002368:	00100713          	li	a4,1
8000236c:	94e1a823          	sw	a4,-1712(gp) # 80006f80 <xYieldPending>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
80002370:	800207b7          	lui	a5,0x80020
80002374:	02c7a783          	lw	a5,44(a5) # 8002002c <__stack_top+0xfffdea3c>
80002378:	f4079ae3          	bnez	a5,800022cc <xTaskResumeAll+0x48>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1716

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
8000237c:	94c1a783          	lw	a5,-1716(gp) # 80006f7c <uxPendedTicks>
80002380:	02078863          	beqz	a5,800023b0 <xTaskResumeAll+0x12c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
80002384:	0240006f          	j	800023a8 <xTaskResumeAll+0x124>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1720
					{
						if( xTaskIncrementTick() != pdFALSE )
80002388:	094000ef          	jal	ra,8000241c <xTaskIncrementTick>
8000238c:	00050793          	mv	a5,a0
80002390:	00078663          	beqz	a5,8000239c <xTaskResumeAll+0x118>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1722
						{
							xYieldPending = pdTRUE;
80002394:	00100713          	li	a4,1
80002398:	94e1a823          	sw	a4,-1712(gp) # 80006f80 <xYieldPending>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1728
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
8000239c:	94c1a783          	lw	a5,-1716(gp) # 80006f7c <uxPendedTicks>
800023a0:	fff78713          	addi	a4,a5,-1
800023a4:	94e1a623          	sw	a4,-1716(gp) # 80006f7c <uxPendedTicks>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
					while( uxPendedTicks > ( UBaseType_t ) 0U )
800023a8:	94c1a783          	lw	a5,-1716(gp) # 80006f7c <uxPendedTicks>
800023ac:	fc079ee3          	bnez	a5,80002388 <xTaskResumeAll+0x104>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1736
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
800023b0:	9501a703          	lw	a4,-1712(gp) # 80006f80 <xYieldPending>
800023b4:	00100793          	li	a5,1
800023b8:	00f71863          	bne	a4,a5,800023c8 <xTaskResumeAll+0x144>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1740
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
800023bc:	00100793          	li	a5,1
800023c0:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1743
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
800023c4:	eacff0ef          	jal	ra,80001a70 <vPortYield>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1756
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
800023c8:	a24ff0ef          	jal	ra,800015ec <vPortExitCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1758

	return xAlreadyYielded;
800023cc:	fec42783          	lw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1759
}
800023d0:	00078513          	mv	a0,a5
800023d4:	01c12083          	lw	ra,28(sp)
800023d8:	01812403          	lw	s0,24(sp)
800023dc:	02010113          	addi	sp,sp,32
800023e0:	00008067          	ret

800023e4 <xTaskGetTickCount>:
xTaskGetTickCount():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1763
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
800023e4:	fe010113          	addi	sp,sp,-32
800023e8:	00112e23          	sw	ra,28(sp)
800023ec:	00812c23          	sw	s0,24(sp)
800023f0:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1767
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
800023f4:	9c4ff0ef          	jal	ra,800015b8 <vPortEnterCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1769
	{
		xTicks = xTickCount;
800023f8:	9401a783          	lw	a5,-1728(gp) # 80006f70 <xTickCount>
800023fc:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1771
	}
	portTICK_TYPE_EXIT_CRITICAL();
80002400:	9ecff0ef          	jal	ra,800015ec <vPortExitCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1773

	return xTicks;
80002404:	fec42783          	lw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1774
}
80002408:	00078513          	mv	a0,a5
8000240c:	01c12083          	lw	ra,28(sp)
80002410:	01812403          	lw	s0,24(sp)
80002414:	02010113          	addi	sp,sp,32
80002418:	00008067          	ret

8000241c <xTaskIncrementTick>:
xTaskIncrementTick():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1938

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
8000241c:	fd010113          	addi	sp,sp,-48
80002420:	02112623          	sw	ra,44(sp)
80002424:	02812423          	sw	s0,40(sp)
80002428:	03010413          	addi	s0,sp,48
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1941
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
8000242c:	fe042623          	sw	zero,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1947

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80002430:	9601a783          	lw	a5,-1696(gp) # 80006f90 <uxSchedulerSuspended>
80002434:	1a079063          	bnez	a5,800025d4 <xTaskIncrementTick+0x1b8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1951
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
80002438:	9401a783          	lw	a5,-1728(gp) # 80006f70 <xTickCount>
8000243c:	00178713          	addi	a4,a5,1
80002440:	94e1a023          	sw	a4,-1728(gp) # 80006f70 <xTickCount>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1956

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
80002444:	9401a783          	lw	a5,-1728(gp) # 80006f70 <xTickCount>
80002448:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1958

			if( xConstTickCount == ( TickType_t ) 0U )
8000244c:	fe842783          	lw	a5,-24(s0)
80002450:	04079063          	bnez	a5,80002490 <xTaskIncrementTick+0x74>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960
			{
				taskSWITCH_DELAYED_LISTS();
80002454:	9301a783          	lw	a5,-1744(gp) # 80006f60 <pxDelayedTaskList>
80002458:	0007a783          	lw	a5,0(a5)
8000245c:	00078663          	beqz	a5,80002468 <xTaskIncrementTick+0x4c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 1)
80002460:	30047073          	csrci	mstatus,8
80002464:	0000006f          	j	80002464 <xTaskIncrementTick+0x48>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 2)
80002468:	9301a783          	lw	a5,-1744(gp) # 80006f60 <pxDelayedTaskList>
8000246c:	fef42223          	sw	a5,-28(s0)
80002470:	9341a703          	lw	a4,-1740(gp) # 80006f64 <pxOverflowDelayedTaskList>
80002474:	92e1a823          	sw	a4,-1744(gp) # 80006f60 <pxDelayedTaskList>
80002478:	fe442703          	lw	a4,-28(s0)
8000247c:	92e1aa23          	sw	a4,-1740(gp) # 80006f64 <pxOverflowDelayedTaskList>
80002480:	9541a783          	lw	a5,-1708(gp) # 80006f84 <xNumOfOverflows>
80002484:	00178713          	addi	a4,a5,1
80002488:	94e1aa23          	sw	a4,-1708(gp) # 80006f84 <xNumOfOverflows>
8000248c:	6bc000ef          	jal	ra,80002b48 <prvResetNextTaskUnblockTime>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1971

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
80002490:	95c1a783          	lw	a5,-1700(gp) # 80006f8c <xNextTaskUnblockTime>
80002494:	fe842703          	lw	a4,-24(s0)
80002498:	10f76063          	bltu	a4,a5,80002598 <xTaskIncrementTick+0x17c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
8000249c:	9301a783          	lw	a5,-1744(gp) # 80006f60 <pxDelayedTaskList>
800024a0:	0007a783          	lw	a5,0(a5)
800024a4:	00079663          	bnez	a5,800024b0 <xTaskIncrementTick+0x94>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 1)
800024a8:	00100793          	li	a5,1
800024ac:	0080006f          	j	800024b4 <xTaskIncrementTick+0x98>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 2)
800024b0:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 4)
800024b4:	00078863          	beqz	a5,800024c4 <xTaskIncrementTick+0xa8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1982
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
800024b8:	fff00713          	li	a4,-1
800024bc:	94e1ae23          	sw	a4,-1700(gp) # 80006f8c <xNextTaskUnblockTime>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1983
						break;
800024c0:	0d80006f          	j	80002598 <xTaskIncrementTick+0x17c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1991
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
800024c4:	9301a783          	lw	a5,-1744(gp) # 80006f60 <pxDelayedTaskList>
800024c8:	00c7a783          	lw	a5,12(a5)
800024cc:	00c7a783          	lw	a5,12(a5)
800024d0:	fef42023          	sw	a5,-32(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1992
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
800024d4:	fe042783          	lw	a5,-32(s0)
800024d8:	0047a783          	lw	a5,4(a5)
800024dc:	fcf42e23          	sw	a5,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1994

						if( xConstTickCount < xItemValue )
800024e0:	fe842703          	lw	a4,-24(s0)
800024e4:	fdc42783          	lw	a5,-36(s0)
800024e8:	00f77863          	bleu	a5,a4,800024f8 <xTaskIncrementTick+0xdc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2001
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
800024ec:	fdc42703          	lw	a4,-36(s0)
800024f0:	94e1ae23          	sw	a4,-1700(gp) # 80006f8c <xNextTaskUnblockTime>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2002
							break;
800024f4:	0a40006f          	j	80002598 <xTaskIncrementTick+0x17c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2010
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
800024f8:	fe042783          	lw	a5,-32(s0)
800024fc:	00478793          	addi	a5,a5,4
80002500:	00078513          	mv	a0,a5
80002504:	f7cff0ef          	jal	ra,80001c80 <uxListRemove>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2014

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
80002508:	fe042783          	lw	a5,-32(s0)
8000250c:	0287a783          	lw	a5,40(a5)
80002510:	00078a63          	beqz	a5,80002524 <xTaskIncrementTick+0x108>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2016
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002514:	fe042783          	lw	a5,-32(s0)
80002518:	01878793          	addi	a5,a5,24
8000251c:	00078513          	mv	a0,a5
80002520:	f60ff0ef          	jal	ra,80001c80 <uxListRemove>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
80002524:	fe042783          	lw	a5,-32(s0)
80002528:	02c7a703          	lw	a4,44(a5)
8000252c:	9441a783          	lw	a5,-1724(gp) # 80006f74 <uxTopReadyPriority>
80002530:	00e7f863          	bleu	a4,a5,80002540 <xTaskIncrementTick+0x124>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 1)
80002534:	fe042783          	lw	a5,-32(s0)
80002538:	02c7a703          	lw	a4,44(a5)
8000253c:	94e1a223          	sw	a4,-1724(gp) # 80006f74 <uxTopReadyPriority>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 3)
80002540:	fe042783          	lw	a5,-32(s0)
80002544:	02c7a703          	lw	a4,44(a5)
80002548:	00070793          	mv	a5,a4
8000254c:	00279793          	slli	a5,a5,0x2
80002550:	00e787b3          	add	a5,a5,a4
80002554:	00279793          	slli	a5,a5,0x2
80002558:	80020737          	lui	a4,0x80020
8000255c:	fa070713          	addi	a4,a4,-96 # 8001ffa0 <__stack_top+0xfffde9b0>
80002560:	00e78733          	add	a4,a5,a4
80002564:	fe042783          	lw	a5,-32(s0)
80002568:	00478793          	addi	a5,a5,4
8000256c:	00078593          	mv	a1,a5
80002570:	00070513          	mv	a0,a4
80002574:	db0ff0ef          	jal	ra,80001b24 <vListInsertEnd>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2035 (discriminator 3)
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80002578:	fe042783          	lw	a5,-32(s0)
8000257c:	02c7a703          	lw	a4,44(a5)
80002580:	92c1a783          	lw	a5,-1748(gp) # 80006f5c <pxCurrentTCB>
80002584:	02c7a783          	lw	a5,44(a5)
80002588:	f0f76ae3          	bltu	a4,a5,8000249c <xTaskIncrementTick+0x80>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2037
							{
								xSwitchRequired = pdTRUE;
8000258c:	00100793          	li	a5,1
80002590:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80002594:	f09ff06f          	j	8000249c <xTaskIncrementTick+0x80>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2055
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
80002598:	92c1a783          	lw	a5,-1748(gp) # 80006f5c <pxCurrentTCB>
8000259c:	02c7a703          	lw	a4,44(a5)
800025a0:	800206b7          	lui	a3,0x80020
800025a4:	00070793          	mv	a5,a4
800025a8:	00279793          	slli	a5,a5,0x2
800025ac:	00e787b3          	add	a5,a5,a4
800025b0:	00279793          	slli	a5,a5,0x2
800025b4:	fa068713          	addi	a4,a3,-96 # 8001ffa0 <__stack_top+0xfffde9b0>
800025b8:	00e787b3          	add	a5,a5,a4
800025bc:	0007a703          	lw	a4,0(a5)
800025c0:	00100793          	li	a5,1
800025c4:	00e7fe63          	bleu	a4,a5,800025e0 <xTaskIncrementTick+0x1c4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2057
			{
				xSwitchRequired = pdTRUE;
800025c8:	00100793          	li	a5,1
800025cc:	fef42623          	sw	a5,-20(s0)
800025d0:	0100006f          	j	800025e0 <xTaskIncrementTick+0x1c4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2083
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
800025d4:	94c1a783          	lw	a5,-1716(gp) # 80006f7c <uxPendedTicks>
800025d8:	00178713          	addi	a4,a5,1
800025dc:	94e1a623          	sw	a4,-1716(gp) # 80006f7c <uxPendedTicks>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2096
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
800025e0:	9501a783          	lw	a5,-1712(gp) # 80006f80 <xYieldPending>
800025e4:	00078663          	beqz	a5,800025f0 <xTaskIncrementTick+0x1d4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2098
		{
			xSwitchRequired = pdTRUE;
800025e8:	00100793          	li	a5,1
800025ec:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2107
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
800025f0:	fec42783          	lw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2108
}
800025f4:	00078513          	mv	a0,a5
800025f8:	02c12083          	lw	ra,44(sp)
800025fc:	02812403          	lw	s0,40(sp)
80002600:	03010113          	addi	sp,sp,48
80002604:	00008067          	ret

80002608 <vTaskSwitchContext>:
vTaskSwitchContext():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2202

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
80002608:	fe010113          	addi	sp,sp,-32
8000260c:	00812e23          	sw	s0,28(sp)
80002610:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2203
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
80002614:	9601a783          	lw	a5,-1696(gp) # 80006f90 <uxSchedulerSuspended>
80002618:	00078863          	beqz	a5,80002628 <vTaskSwitchContext+0x20>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2207
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
8000261c:	00100713          	li	a4,1
80002620:	94e1a823          	sw	a4,-1712(gp) # 80006f80 <xYieldPending>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
80002624:	0c00006f          	j	800026e4 <vTaskSwitchContext+0xdc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2211
		xYieldPending = pdFALSE;
80002628:	9401a823          	sw	zero,-1712(gp) # 80006f80 <xYieldPending>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246
		taskSELECT_HIGHEST_PRIORITY_TASK();
8000262c:	0200006f          	j	8000264c <vTaskSwitchContext+0x44>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 4)
80002630:	9441a783          	lw	a5,-1724(gp) # 80006f74 <uxTopReadyPriority>
80002634:	00079663          	bnez	a5,80002640 <vTaskSwitchContext+0x38>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 1)
80002638:	30047073          	csrci	mstatus,8
8000263c:	0000006f          	j	8000263c <vTaskSwitchContext+0x34>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 2)
80002640:	9441a783          	lw	a5,-1724(gp) # 80006f74 <uxTopReadyPriority>
80002644:	fff78713          	addi	a4,a5,-1
80002648:	94e1a223          	sw	a4,-1724(gp) # 80006f74 <uxTopReadyPriority>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 3)
8000264c:	9441a703          	lw	a4,-1724(gp) # 80006f74 <uxTopReadyPriority>
80002650:	800206b7          	lui	a3,0x80020
80002654:	00070793          	mv	a5,a4
80002658:	00279793          	slli	a5,a5,0x2
8000265c:	00e787b3          	add	a5,a5,a4
80002660:	00279793          	slli	a5,a5,0x2
80002664:	fa068713          	addi	a4,a3,-96 # 8001ffa0 <__stack_top+0xfffde9b0>
80002668:	00e787b3          	add	a5,a5,a4
8000266c:	0007a783          	lw	a5,0(a5)
80002670:	fc0780e3          	beqz	a5,80002630 <vTaskSwitchContext+0x28>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 5)
80002674:	9441a703          	lw	a4,-1724(gp) # 80006f74 <uxTopReadyPriority>
80002678:	00070793          	mv	a5,a4
8000267c:	00279793          	slli	a5,a5,0x2
80002680:	00e787b3          	add	a5,a5,a4
80002684:	00279793          	slli	a5,a5,0x2
80002688:	80020737          	lui	a4,0x80020
8000268c:	fa070713          	addi	a4,a4,-96 # 8001ffa0 <__stack_top+0xfffde9b0>
80002690:	00e787b3          	add	a5,a5,a4
80002694:	fef42623          	sw	a5,-20(s0)
80002698:	fec42783          	lw	a5,-20(s0)
8000269c:	0047a783          	lw	a5,4(a5)
800026a0:	0047a703          	lw	a4,4(a5)
800026a4:	fec42783          	lw	a5,-20(s0)
800026a8:	00e7a223          	sw	a4,4(a5)
800026ac:	fec42783          	lw	a5,-20(s0)
800026b0:	0047a703          	lw	a4,4(a5)
800026b4:	fec42783          	lw	a5,-20(s0)
800026b8:	00878793          	addi	a5,a5,8
800026bc:	00f71c63          	bne	a4,a5,800026d4 <vTaskSwitchContext+0xcc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 6)
800026c0:	fec42783          	lw	a5,-20(s0)
800026c4:	0047a783          	lw	a5,4(a5)
800026c8:	0047a703          	lw	a4,4(a5)
800026cc:	fec42783          	lw	a5,-20(s0)
800026d0:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 8)
800026d4:	fec42783          	lw	a5,-20(s0)
800026d8:	0047a783          	lw	a5,4(a5)
800026dc:	00c7a703          	lw	a4,12(a5)
800026e0:	92e1a623          	sw	a4,-1748(gp) # 80006f5c <pxCurrentTCB>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
}
800026e4:	00000013          	nop
800026e8:	01c12403          	lw	s0,28(sp)
800026ec:	02010113          	addi	sp,sp,32
800026f0:	00008067          	ret

800026f4 <prvIdleTask>:
prvIdleTask():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2689
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
800026f4:	fe010113          	addi	sp,sp,-32
800026f8:	00112e23          	sw	ra,28(sp)
800026fc:	00812c23          	sw	s0,24(sp)
80002700:	02010413          	addi	s0,sp,32
80002704:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
80002708:	218000ef          	jal	ra,80002920 <prvCheckTasksWaitingTermination>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2719

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
8000270c:	800207b7          	lui	a5,0x80020
80002710:	fa07a703          	lw	a4,-96(a5) # 8001ffa0 <__stack_top+0xfffde9b0>
80002714:	00100793          	li	a5,1
80002718:	00e7f463          	bleu	a4,a5,80002720 <prvIdleTask+0x2c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2721
			{
				taskYIELD();
8000271c:	b54ff0ef          	jal	ra,80001a70 <vPortYield>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2739
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
80002720:	7d1030ef          	jal	ra,800066f0 <vApplicationIdleHook>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
		prvCheckTasksWaitingTermination();
80002724:	fe5ff06f          	j	80002708 <prvIdleTask+0x14>

80002728 <prvInitialiseTCBVariables>:
prvInitialiseTCBVariables():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2832

#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80002728:	fc010113          	addi	sp,sp,-64
8000272c:	02112e23          	sw	ra,60(sp)
80002730:	02812c23          	sw	s0,56(sp)
80002734:	04010413          	addi	s0,sp,64
80002738:	fca42e23          	sw	a0,-36(s0)
8000273c:	fcb42c23          	sw	a1,-40(s0)
80002740:	fcc42a23          	sw	a2,-44(s0)
80002744:	fcd42823          	sw	a3,-48(s0)
80002748:	00070793          	mv	a5,a4
8000274c:	fcf41723          	sh	a5,-50(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
80002750:	fe042623          	sw	zero,-20(s0)
80002754:	0440006f          	j	80002798 <prvInitialiseTCBVariables+0x70>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2838
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
80002758:	fd842703          	lw	a4,-40(s0)
8000275c:	fec42783          	lw	a5,-20(s0)
80002760:	00f707b3          	add	a5,a4,a5
80002764:	00078703          	lb	a4,0(a5)
80002768:	fdc42683          	lw	a3,-36(s0)
8000276c:	fec42783          	lw	a5,-20(s0)
80002770:	00f687b3          	add	a5,a3,a5
80002774:	02e78a23          	sb	a4,52(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2843

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
80002778:	fd842703          	lw	a4,-40(s0)
8000277c:	fec42783          	lw	a5,-20(s0)
80002780:	00f707b3          	add	a5,a4,a5
80002784:	00078783          	lb	a5,0(a5)
80002788:	02078063          	beqz	a5,800027a8 <prvInitialiseTCBVariables+0x80>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 2)
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
8000278c:	fec42783          	lw	a5,-20(s0)
80002790:	00178793          	addi	a5,a5,1
80002794:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 1)
80002798:	fec42703          	lw	a4,-20(s0)
8000279c:	00f00793          	li	a5,15
800027a0:	fae7fce3          	bleu	a4,a5,80002758 <prvInitialiseTCBVariables+0x30>
800027a4:	0080006f          	j	800027ac <prvInitialiseTCBVariables+0x84>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2845
		{
			break;
800027a8:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2855
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
800027ac:	fdc42783          	lw	a5,-36(s0)
800027b0:	040781a3          	sb	zero,67(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2859

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
800027b4:	fd442703          	lw	a4,-44(s0)
800027b8:	00400793          	li	a5,4
800027bc:	00e7f663          	bleu	a4,a5,800027c8 <prvInitialiseTCBVariables+0xa0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2861
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
800027c0:	00400793          	li	a5,4
800027c4:	fcf42a23          	sw	a5,-44(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2868
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
800027c8:	fdc42783          	lw	a5,-36(s0)
800027cc:	fd442703          	lw	a4,-44(s0)
800027d0:	02e7a623          	sw	a4,44(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2871
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
800027d4:	fdc42783          	lw	a5,-36(s0)
800027d8:	fd442703          	lw	a4,-44(s0)
800027dc:	04e7a823          	sw	a4,80(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2872
		pxTCB->uxMutexesHeld = 0;
800027e0:	fdc42783          	lw	a5,-36(s0)
800027e4:	0407aa23          	sw	zero,84(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2876
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
800027e8:	fdc42783          	lw	a5,-36(s0)
800027ec:	00478793          	addi	a5,a5,4
800027f0:	00078513          	mv	a0,a5
800027f4:	b08ff0ef          	jal	ra,80001afc <vListInitialiseItem>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2877
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
800027f8:	fdc42783          	lw	a5,-36(s0)
800027fc:	01878793          	addi	a5,a5,24
80002800:	00078513          	mv	a0,a5
80002804:	af8ff0ef          	jal	ra,80001afc <vListInitialiseItem>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2881

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
80002808:	fdc42783          	lw	a5,-36(s0)
8000280c:	fdc42703          	lw	a4,-36(s0)
80002810:	00e7a823          	sw	a4,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2884

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80002814:	00500713          	li	a4,5
80002818:	fd442783          	lw	a5,-44(s0)
8000281c:	40f70733          	sub	a4,a4,a5
80002820:	fdc42783          	lw	a5,-36(s0)
80002824:	00e7ac23          	sw	a4,24(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2885
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
80002828:	fdc42783          	lw	a5,-36(s0)
8000282c:	fdc42703          	lw	a4,-36(s0)
80002830:	02e7a223          	sw	a4,36(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2889

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
80002834:	fdc42783          	lw	a5,-36(s0)
80002838:	0407a223          	sw	zero,68(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2927
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
8000283c:	fdc42783          	lw	a5,-36(s0)
80002840:	0407ac23          	sw	zero,88(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2928
		pxTCB->eNotifyState = eNotWaitingNotification;
80002844:	fdc42783          	lw	a5,-36(s0)
80002848:	0407ae23          	sw	zero,92(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2938
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
8000284c:	00000013          	nop
80002850:	03c12083          	lw	ra,60(sp)
80002854:	03812403          	lw	s0,56(sp)
80002858:	04010113          	addi	sp,sp,64
8000285c:	00008067          	ret

80002860 <prvInitialiseTaskLists>:
prvInitialiseTaskLists():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2997

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
80002860:	fe010113          	addi	sp,sp,-32
80002864:	00112e23          	sw	ra,28(sp)
80002868:	00812c23          	sw	s0,24(sp)
8000286c:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
80002870:	fe042623          	sw	zero,-20(s0)
80002874:	0380006f          	j	800028ac <prvInitialiseTaskLists+0x4c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3002 (discriminator 3)
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
80002878:	fec42703          	lw	a4,-20(s0)
8000287c:	00070793          	mv	a5,a4
80002880:	00279793          	slli	a5,a5,0x2
80002884:	00e787b3          	add	a5,a5,a4
80002888:	00279793          	slli	a5,a5,0x2
8000288c:	80020737          	lui	a4,0x80020
80002890:	fa070713          	addi	a4,a4,-96 # 8001ffa0 <__stack_top+0xfffde9b0>
80002894:	00e787b3          	add	a5,a5,a4
80002898:	00078513          	mv	a0,a5
8000289c:	9fcff0ef          	jal	ra,80001a98 <vListInitialise>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 3)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
800028a0:	fec42783          	lw	a5,-20(s0)
800028a4:	00178793          	addi	a5,a5,1
800028a8:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 1)
800028ac:	fec42703          	lw	a4,-20(s0)
800028b0:	00400793          	li	a5,4
800028b4:	fce7f2e3          	bleu	a4,a5,80002878 <prvInitialiseTaskLists+0x18>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3005
	}

	vListInitialise( &xDelayedTaskList1 );
800028b8:	800207b7          	lui	a5,0x80020
800028bc:	00478513          	addi	a0,a5,4 # 80020004 <__stack_top+0xfffdea14>
800028c0:	9d8ff0ef          	jal	ra,80001a98 <vListInitialise>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3006
	vListInitialise( &xDelayedTaskList2 );
800028c4:	800207b7          	lui	a5,0x80020
800028c8:	01878513          	addi	a0,a5,24 # 80020018 <__stack_top+0xfffdea28>
800028cc:	9ccff0ef          	jal	ra,80001a98 <vListInitialise>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3007
	vListInitialise( &xPendingReadyList );
800028d0:	800207b7          	lui	a5,0x80020
800028d4:	02c78513          	addi	a0,a5,44 # 8002002c <__stack_top+0xfffdea3c>
800028d8:	9c0ff0ef          	jal	ra,80001a98 <vListInitialise>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3011

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
800028dc:	800207b7          	lui	a5,0x80020
800028e0:	04078513          	addi	a0,a5,64 # 80020040 <__stack_top+0xfffdea50>
800028e4:	9b4ff0ef          	jal	ra,80001a98 <vListInitialise>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3017
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
800028e8:	800207b7          	lui	a5,0x80020
800028ec:	05478513          	addi	a0,a5,84 # 80020054 <__stack_top+0xfffdea64>
800028f0:	9a8ff0ef          	jal	ra,80001a98 <vListInitialise>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3023
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
800028f4:	80020737          	lui	a4,0x80020
800028f8:	00470713          	addi	a4,a4,4 # 80020004 <__stack_top+0xfffdea14>
800028fc:	92e1a823          	sw	a4,-1744(gp) # 80006f60 <pxDelayedTaskList>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3024
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
80002900:	80020737          	lui	a4,0x80020
80002904:	01870713          	addi	a4,a4,24 # 80020018 <__stack_top+0xfffdea28>
80002908:	92e1aa23          	sw	a4,-1740(gp) # 80006f64 <pxOverflowDelayedTaskList>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3025
}
8000290c:	00000013          	nop
80002910:	01c12083          	lw	ra,28(sp)
80002914:	01812403          	lw	s0,24(sp)
80002918:	02010113          	addi	sp,sp,32
8000291c:	00008067          	ret

80002920 <prvCheckTasksWaitingTermination>:
prvCheckTasksWaitingTermination():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3029
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
80002920:	fe010113          	addi	sp,sp,-32
80002924:	00112e23          	sw	ra,28(sp)
80002928:	00812c23          	sw	s0,24(sp)
8000292c:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
80002930:	0740006f          	j	800029a4 <prvCheckTasksWaitingTermination+0x84>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3038
		{
			vTaskSuspendAll();
80002934:	929ff0ef          	jal	ra,8000225c <vTaskSuspendAll>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3040
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
80002938:	800207b7          	lui	a5,0x80020
8000293c:	0407a783          	lw	a5,64(a5) # 80020040 <__stack_top+0xfffdea50>
80002940:	0017b793          	seqz	a5,a5
80002944:	0ff7f793          	andi	a5,a5,255
80002948:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3042
			}
			( void ) xTaskResumeAll();
8000294c:	939ff0ef          	jal	ra,80002284 <xTaskResumeAll>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3044

			if( xListIsEmpty == pdFALSE )
80002950:	fec42783          	lw	a5,-20(s0)
80002954:	04079863          	bnez	a5,800029a4 <prvCheckTasksWaitingTermination+0x84>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3048
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
80002958:	c61fe0ef          	jal	ra,800015b8 <vPortEnterCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3050
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
8000295c:	800207b7          	lui	a5,0x80020
80002960:	04078793          	addi	a5,a5,64 # 80020040 <__stack_top+0xfffdea50>
80002964:	00c7a783          	lw	a5,12(a5)
80002968:	00c7a783          	lw	a5,12(a5)
8000296c:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3051
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80002970:	fe842783          	lw	a5,-24(s0)
80002974:	00478793          	addi	a5,a5,4
80002978:	00078513          	mv	a0,a5
8000297c:	b04ff0ef          	jal	ra,80001c80 <uxListRemove>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3052
					--uxCurrentNumberOfTasks;
80002980:	93c1a783          	lw	a5,-1732(gp) # 80006f6c <uxCurrentNumberOfTasks>
80002984:	fff78713          	addi	a4,a5,-1
80002988:	92e1ae23          	sw	a4,-1732(gp) # 80006f6c <uxCurrentNumberOfTasks>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3053
					--uxTasksDeleted;
8000298c:	9381a783          	lw	a5,-1736(gp) # 80006f68 <uxTasksDeleted>
80002990:	fff78713          	addi	a4,a5,-1
80002994:	92e1ac23          	sw	a4,-1736(gp) # 80006f68 <uxTasksDeleted>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3055
				}
				taskEXIT_CRITICAL();
80002998:	c55fe0ef          	jal	ra,800015ec <vPortExitCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3057

				prvDeleteTCB( pxTCB );
8000299c:	fe842503          	lw	a0,-24(s0)
800029a0:	168000ef          	jal	ra,80002b08 <prvDeleteTCB>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
800029a4:	9381a783          	lw	a5,-1736(gp) # 80006f68 <uxTasksDeleted>
800029a8:	f80796e3          	bnez	a5,80002934 <prvCheckTasksWaitingTermination+0x14>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3066
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
800029ac:	00000013          	nop
800029b0:	01c12083          	lw	ra,28(sp)
800029b4:	01812403          	lw	s0,24(sp)
800029b8:	02010113          	addi	sp,sp,32
800029bc:	00008067          	ret

800029c0 <prvAddCurrentTaskToDelayedList>:
prvAddCurrentTaskToDelayedList():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3070
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
800029c0:	fe010113          	addi	sp,sp,-32
800029c4:	00112e23          	sw	ra,28(sp)
800029c8:	00812c23          	sw	s0,24(sp)
800029cc:	02010413          	addi	s0,sp,32
800029d0:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3072
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
800029d4:	92c1a783          	lw	a5,-1748(gp) # 80006f5c <pxCurrentTCB>
800029d8:	fec42703          	lw	a4,-20(s0)
800029dc:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3074

	if( xTimeToWake < xTickCount )
800029e0:	9401a783          	lw	a5,-1728(gp) # 80006f70 <xTickCount>
800029e4:	fec42703          	lw	a4,-20(s0)
800029e8:	02f77063          	bleu	a5,a4,80002a08 <prvAddCurrentTaskToDelayedList+0x48>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3077
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
800029ec:	9341a703          	lw	a4,-1740(gp) # 80006f64 <pxOverflowDelayedTaskList>
800029f0:	92c1a783          	lw	a5,-1748(gp) # 80006f5c <pxCurrentTCB>
800029f4:	00478793          	addi	a5,a5,4
800029f8:	00078593          	mv	a1,a5
800029fc:	00070513          	mv	a0,a4
80002a00:	9acff0ef          	jal	ra,80001bac <vListInsert>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
80002a04:	0300006f          	j	80002a34 <prvAddCurrentTaskToDelayedList+0x74>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3082
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80002a08:	9301a703          	lw	a4,-1744(gp) # 80006f60 <pxDelayedTaskList>
80002a0c:	92c1a783          	lw	a5,-1748(gp) # 80006f5c <pxCurrentTCB>
80002a10:	00478793          	addi	a5,a5,4
80002a14:	00078593          	mv	a1,a5
80002a18:	00070513          	mv	a0,a4
80002a1c:	990ff0ef          	jal	ra,80001bac <vListInsert>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3087
		if( xTimeToWake < xNextTaskUnblockTime )
80002a20:	95c1a783          	lw	a5,-1700(gp) # 80006f8c <xNextTaskUnblockTime>
80002a24:	fec42703          	lw	a4,-20(s0)
80002a28:	00f77663          	bleu	a5,a4,80002a34 <prvAddCurrentTaskToDelayedList+0x74>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3089
			xNextTaskUnblockTime = xTimeToWake;
80002a2c:	fec42703          	lw	a4,-20(s0)
80002a30:	94e1ae23          	sw	a4,-1700(gp) # 80006f8c <xNextTaskUnblockTime>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
}
80002a34:	00000013          	nop
80002a38:	01c12083          	lw	ra,28(sp)
80002a3c:	01812403          	lw	s0,24(sp)
80002a40:	02010113          	addi	sp,sp,32
80002a44:	00008067          	ret

80002a48 <prvAllocateTCBAndStack>:
prvAllocateTCBAndStack():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3100
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
80002a48:	fd010113          	addi	sp,sp,-48
80002a4c:	02112623          	sw	ra,44(sp)
80002a50:	02812423          	sw	s0,40(sp)
80002a54:	03010413          	addi	s0,sp,48
80002a58:	00050793          	mv	a5,a0
80002a5c:	fcb42c23          	sw	a1,-40(s0)
80002a60:	fcf41f23          	sh	a5,-34(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80002a64:	fd842783          	lw	a5,-40(s0)
80002a68:	00079e63          	bnez	a5,80002a84 <prvAllocateTCBAndStack+0x3c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 1)
80002a6c:	fde45783          	lhu	a5,-34(s0)
80002a70:	00279793          	slli	a5,a5,0x2
80002a74:	00078513          	mv	a0,a5
80002a78:	fd8fe0ef          	jal	ra,80001250 <pvPortMalloc>
80002a7c:	00050793          	mv	a5,a0
80002a80:	0080006f          	j	80002a88 <prvAllocateTCBAndStack+0x40>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 2)
80002a84:	fd842783          	lw	a5,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 4)
80002a88:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3134 (discriminator 4)

		if( pxStack != NULL )
80002a8c:	fe842783          	lw	a5,-24(s0)
80002a90:	02078a63          	beqz	a5,80002ac4 <prvAllocateTCBAndStack+0x7c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3138
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
80002a94:	06000513          	li	a0,96
80002a98:	fb8fe0ef          	jal	ra,80001250 <pvPortMalloc>
80002a9c:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3140

			if( pxNewTCB != NULL )
80002aa0:	fec42783          	lw	a5,-20(s0)
80002aa4:	00078a63          	beqz	a5,80002ab8 <prvAllocateTCBAndStack+0x70>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3143
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
80002aa8:	fec42783          	lw	a5,-20(s0)
80002aac:	fe842703          	lw	a4,-24(s0)
80002ab0:	02e7a823          	sw	a4,48(a5)
80002ab4:	0140006f          	j	80002ac8 <prvAllocateTCBAndStack+0x80>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3149
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
80002ab8:	fe842503          	lw	a0,-24(s0)
80002abc:	971fe0ef          	jal	ra,8000142c <vPortFree>
80002ac0:	0080006f          	j	80002ac8 <prvAllocateTCBAndStack+0x80>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3154
			}
		}
		else
		{
			pxNewTCB = NULL;
80002ac4:	fe042623          	sw	zero,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3159
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
80002ac8:	fec42783          	lw	a5,-20(s0)
80002acc:	02078263          	beqz	a5,80002af0 <prvAllocateTCBAndStack+0xa8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3165
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
80002ad0:	fec42783          	lw	a5,-20(s0)
80002ad4:	0307a703          	lw	a4,48(a5)
80002ad8:	fde45783          	lhu	a5,-34(s0)
80002adc:	00279793          	slli	a5,a5,0x2
80002ae0:	00078613          	mv	a2,a5
80002ae4:	0a500593          	li	a1,165
80002ae8:	00070513          	mv	a0,a4
80002aec:	a2cff0ef          	jal	ra,80001d18 <memset>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3170
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
80002af0:	fec42783          	lw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3171
}
80002af4:	00078513          	mv	a0,a5
80002af8:	02c12083          	lw	ra,44(sp)
80002afc:	02812403          	lw	s0,40(sp)
80002b00:	03010113          	addi	sp,sp,48
80002b04:	00008067          	ret

80002b08 <prvDeleteTCB>:
prvDeleteTCB():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3310
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
80002b08:	fe010113          	addi	sp,sp,-32
80002b0c:	00112e23          	sw	ra,28(sp)
80002b10:	00812c23          	sw	s0,24(sp)
80002b14:	02010413          	addi	s0,sp,32
80002b18:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3335
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
80002b1c:	fec42783          	lw	a5,-20(s0)
80002b20:	0307a783          	lw	a5,48(a5)
80002b24:	00078513          	mv	a0,a5
80002b28:	905fe0ef          	jal	ra,8000142c <vPortFree>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3339
		}
		#endif

		vPortFree( pxTCB );
80002b2c:	fec42503          	lw	a0,-20(s0)
80002b30:	8fdfe0ef          	jal	ra,8000142c <vPortFree>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3340
	}
80002b34:	00000013          	nop
80002b38:	01c12083          	lw	ra,28(sp)
80002b3c:	01812403          	lw	s0,24(sp)
80002b40:	02010113          	addi	sp,sp,32
80002b44:	00008067          	ret

80002b48 <prvResetNextTaskUnblockTime>:
prvResetNextTaskUnblockTime():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3346

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
80002b48:	fe010113          	addi	sp,sp,-32
80002b4c:	00812e23          	sw	s0,28(sp)
80002b50:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80002b54:	9301a783          	lw	a5,-1744(gp) # 80006f60 <pxDelayedTaskList>
80002b58:	0007a783          	lw	a5,0(a5)
80002b5c:	00079663          	bnez	a5,80002b68 <prvResetNextTaskUnblockTime+0x20>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 1)
80002b60:	00100793          	li	a5,1
80002b64:	0080006f          	j	80002b6c <prvResetNextTaskUnblockTime+0x24>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 2)
80002b68:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 4)
80002b6c:	00078863          	beqz	a5,80002b7c <prvResetNextTaskUnblockTime+0x34>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3355
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
80002b70:	fff00713          	li	a4,-1
80002b74:	94e1ae23          	sw	a4,-1700(gp) # 80006f8c <xNextTaskUnblockTime>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
80002b78:	0200006f          	j	80002b98 <prvResetNextTaskUnblockTime+0x50>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3363
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80002b7c:	9301a783          	lw	a5,-1744(gp) # 80006f60 <pxDelayedTaskList>
80002b80:	00c7a783          	lw	a5,12(a5)
80002b84:	00c7a783          	lw	a5,12(a5)
80002b88:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3364
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
80002b8c:	fec42783          	lw	a5,-20(s0)
80002b90:	0047a703          	lw	a4,4(a5)
80002b94:	94e1ae23          	sw	a4,-1700(gp) # 80006f8c <xNextTaskUnblockTime>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
}
80002b98:	00000013          	nop
80002b9c:	01c12403          	lw	s0,28(sp)
80002ba0:	02010113          	addi	sp,sp,32
80002ba4:	00008067          	ret

80002ba8 <xTaskGetCurrentTaskHandle>:
xTaskGetCurrentTaskHandle():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3372
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
80002ba8:	fe010113          	addi	sp,sp,-32
80002bac:	00812e23          	sw	s0,28(sp)
80002bb0:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3378
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
80002bb4:	92c1a783          	lw	a5,-1748(gp) # 80006f5c <pxCurrentTCB>
80002bb8:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3380

		return xReturn;
80002bbc:	fec42783          	lw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3381
	}
80002bc0:	00078513          	mv	a0,a5
80002bc4:	01c12403          	lw	s0,28(sp)
80002bc8:	02010113          	addi	sp,sp,32
80002bcc:	00008067          	ret

80002bd0 <PLIC_EnableIRQ>:
PLIC_EnableIRQ():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:154
{
80002bd0:	fd010113          	addi	sp,sp,-48
80002bd4:	02812623          	sw	s0,44(sp)
80002bd8:	03010413          	addi	s0,sp,48
80002bdc:	fca42e23          	sw	a0,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:155
    unsigned long hart_id = read_csr(mhartid);
80002be0:	f14027f3          	csrr	a5,mhartid
80002be4:	fef42623          	sw	a5,-20(s0)
80002be8:	fec42783          	lw	a5,-20(s0)
80002bec:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:156
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80002bf0:	40000737          	lui	a4,0x40000
80002bf4:	fdc42783          	lw	a5,-36(s0)
80002bf8:	0057d793          	srli	a5,a5,0x5
80002bfc:	fe842683          	lw	a3,-24(s0)
80002c00:	00569693          	slli	a3,a3,0x5
80002c04:	00f686b3          	add	a3,a3,a5
80002c08:	000017b7          	lui	a5,0x1
80002c0c:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80002c10:	00f687b3          	add	a5,a3,a5
80002c14:	00279793          	slli	a5,a5,0x2
80002c18:	00f707b3          	add	a5,a4,a5
80002c1c:	0007a783          	lw	a5,0(a5)
80002c20:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:157
    current |= (uint32_t)1 << (IRQn % 32);
80002c24:	fdc42783          	lw	a5,-36(s0)
80002c28:	01f7f793          	andi	a5,a5,31
80002c2c:	00100713          	li	a4,1
80002c30:	00f717b3          	sll	a5,a4,a5
80002c34:	fe442703          	lw	a4,-28(s0)
80002c38:	00f767b3          	or	a5,a4,a5
80002c3c:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:158
    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
80002c40:	40000737          	lui	a4,0x40000
80002c44:	fdc42783          	lw	a5,-36(s0)
80002c48:	0057d793          	srli	a5,a5,0x5
80002c4c:	fe842683          	lw	a3,-24(s0)
80002c50:	00569693          	slli	a3,a3,0x5
80002c54:	00f686b3          	add	a3,a3,a5
80002c58:	000017b7          	lui	a5,0x1
80002c5c:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80002c60:	00f687b3          	add	a5,a3,a5
80002c64:	00279793          	slli	a5,a5,0x2
80002c68:	00f707b3          	add	a5,a4,a5
80002c6c:	fe442703          	lw	a4,-28(s0)
80002c70:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:159
}
80002c74:	00000013          	nop
80002c78:	02c12403          	lw	s0,44(sp)
80002c7c:	03010113          	addi	sp,sp,48
80002c80:	00008067          	ret

80002c84 <PLIC_SetPriority>:
PLIC_SetPriority():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:188
{
80002c84:	fe010113          	addi	sp,sp,-32
80002c88:	00812e23          	sw	s0,28(sp)
80002c8c:	02010413          	addi	s0,sp,32
80002c90:	fea42623          	sw	a0,-20(s0)
80002c94:	feb42423          	sw	a1,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:189
    PLIC->SOURCE_PRIORITY[IRQn] = priority;
80002c98:	40000737          	lui	a4,0x40000
80002c9c:	fec42783          	lw	a5,-20(s0)
80002ca0:	00279793          	slli	a5,a5,0x2
80002ca4:	00f707b3          	add	a5,a4,a5
80002ca8:	fe842703          	lw	a4,-24(s0)
80002cac:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:190
}
80002cb0:	00000013          	nop
80002cb4:	01c12403          	lw	s0,28(sp)
80002cb8:	02010113          	addi	sp,sp,32
80002cbc:	00008067          	ret

80002cc0 <Chronos_init>:
Chronos_init():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:27
extern volatile unsigned int SendingQueue_front;
extern volatile unsigned int SendingQueue_tail;

////////////////////////////////////////////////////////////
// Initialize Chronos stuff
void Chronos_init(){
80002cc0:	ff010113          	addi	sp,sp,-16
80002cc4:	00112623          	sw	ra,12(sp)
80002cc8:	00812423          	sw	s0,8(sp)
80002ccc:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:29
    //Informs the Router this tile ID, that is provided by Harness
    HW_set_32bit_reg(ROUTER_BASE, HW_get_32bit_reg(MY_ID)); 
80002cd0:	900007b7          	lui	a5,0x90000
80002cd4:	ffc78513          	addi	a0,a5,-4 # 8ffffffc <__stack_top+0xffbea0c>
80002cd8:	a2cfe0ef          	jal	ra,80000f04 <HW_get_32bit_reg>
80002cdc:	00050793          	mv	a5,a0
80002ce0:	00078593          	mv	a1,a5
80002ce4:	50000537          	lui	a0,0x50000
80002ce8:	a14fe0ef          	jal	ra,80000efc <HW_set_32bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:32
    
    // Reads this processor address, calculated by the router
    ProcessorAddr = HW_get_32bit_reg(ROUTER_BASE);
80002cec:	50000537          	lui	a0,0x50000
80002cf0:	a14fe0ef          	jal	ra,80000f04 <HW_get_32bit_reg>
80002cf4:	00050713          	mv	a4,a0
80002cf8:	800217b7          	lui	a5,0x80021
80002cfc:	5ee7a423          	sw	a4,1512(a5) # 800215e8 <__stack_top+0xfffdfff8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:35

    // Informs the PRINTER this tile address
    HW_set_32bit_reg(PRINTER_CHAR, getXpos(ProcessorAddr));
80002d00:	800217b7          	lui	a5,0x80021
80002d04:	5e87a783          	lw	a5,1512(a5) # 800215e8 <__stack_top+0xfffdfff8>
80002d08:	00078513          	mv	a0,a5
80002d0c:	1e0000ef          	jal	ra,80002eec <getXpos>
80002d10:	00050793          	mv	a5,a0
80002d14:	00078593          	mv	a1,a5
80002d18:	500007b7          	lui	a5,0x50000
80002d1c:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002d20:	9dcfe0ef          	jal	ra,80000efc <HW_set_32bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:36
    HW_set_32bit_reg(PRINTER_CHAR, getYpos(ProcessorAddr));
80002d24:	800217b7          	lui	a5,0x80021
80002d28:	5e87a783          	lw	a5,1512(a5) # 800215e8 <__stack_top+0xfffdfff8>
80002d2c:	00078513          	mv	a0,a5
80002d30:	1e8000ef          	jal	ra,80002f18 <getYpos>
80002d34:	00050793          	mv	a5,a0
80002d38:	00078593          	mv	a1,a5
80002d3c:	500007b7          	lui	a5,0x50000
80002d40:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002d44:	9b8fe0ef          	jal	ra,80000efc <HW_set_32bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:39

    // Enables interruption from NI
    NI_enable_irq(TX_RX);
80002d48:	000077b7          	lui	a5,0x7
80002d4c:	77778513          	addi	a0,a5,1911 # 7777 <HEAP_SIZE-0x8889>
80002d50:	23c000ef          	jal	ra,80002f8c <NI_enable_irq>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:42

    // Informs the NI the address to store incoming packets
    HW_set_32bit_reg(NI_ADDR, (unsigned int)&incommingPacket.header);
80002d54:	800207b7          	lui	a5,0x80020
80002d58:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
80002d5c:	00078593          	mv	a1,a5
80002d60:	500007b7          	lui	a5,0x50000
80002d64:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
80002d68:	994fe0ef          	jal	ra,80000efc <HW_set_32bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:45
    
    // Initialize the TaskList
    API_TaskListInit();
80002d6c:	519020ef          	jal	ra,80005a84 <API_TaskListInit>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:48

    // Initialize the Message & Service PIPE
    API_PipeInitialization();
80002d70:	38c030ef          	jal	ra,800060fc <API_PipeInitialization>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:49
    SendingQueue_front = 0;
80002d74:	800207b7          	lui	a5,0x80020
80002d78:	1c07a623          	sw	zero,460(a5) # 800201cc <__stack_top+0xfffdebdc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:50
    SendingQueue_tail = 0;
80002d7c:	800207b7          	lui	a5,0x80020
80002d80:	1a07aa23          	sw	zero,436(a5) # 800201b4 <__stack_top+0xfffdebc4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:52

    return;
80002d84:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:53
}
80002d88:	00c12083          	lw	ra,12(sp)
80002d8c:	00812403          	lw	s0,8(sp)
80002d90:	01010113          	addi	sp,sp,16
80002d94:	00008067          	ret

80002d98 <prints>:
prints():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:57

////////////////////////////////////////////////////////////
// Prints a string
void prints(char *text) {
80002d98:	fd010113          	addi	sp,sp,-48
80002d9c:	02112623          	sw	ra,44(sp)
80002da0:	02812423          	sw	s0,40(sp)
80002da4:	03010413          	addi	s0,sp,48
80002da8:	fca42e23          	sw	a0,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:58
    int i = 0;
80002dac:	fe042623          	sw	zero,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:60 (discriminator 1)
    do {
        HW_set_32bit_reg(PRINTER_CHAR, text[i]);
80002db0:	fec42783          	lw	a5,-20(s0)
80002db4:	fdc42703          	lw	a4,-36(s0)
80002db8:	00f707b3          	add	a5,a4,a5
80002dbc:	00078783          	lb	a5,0(a5)
80002dc0:	00078593          	mv	a1,a5
80002dc4:	500007b7          	lui	a5,0x50000
80002dc8:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002dcc:	930fe0ef          	jal	ra,80000efc <HW_set_32bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:61 (discriminator 1)
        i++;
80002dd0:	fec42783          	lw	a5,-20(s0)
80002dd4:	00178793          	addi	a5,a5,1
80002dd8:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:62 (discriminator 1)
    } while (text[i - 1] != '\0');
80002ddc:	fec42783          	lw	a5,-20(s0)
80002de0:	fff78793          	addi	a5,a5,-1
80002de4:	fdc42703          	lw	a4,-36(s0)
80002de8:	00f707b3          	add	a5,a4,a5
80002dec:	00078783          	lb	a5,0(a5)
80002df0:	fc0790e3          	bnez	a5,80002db0 <prints+0x18>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:63
    return;
80002df4:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:64
}
80002df8:	02c12083          	lw	ra,44(sp)
80002dfc:	02812403          	lw	s0,40(sp)
80002e00:	03010113          	addi	sp,sp,48
80002e04:	00008067          	ret

80002e08 <printi>:
printi():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:68

////////////////////////////////////////////////////////////
// Prints an integer
void printi(int value) {
80002e08:	fe010113          	addi	sp,sp,-32
80002e0c:	00112e23          	sw	ra,28(sp)
80002e10:	00812c23          	sw	s0,24(sp)
80002e14:	02010413          	addi	s0,sp,32
80002e18:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:69
    HW_set_32bit_reg(PRINTER_INT, value);
80002e1c:	fec42783          	lw	a5,-20(s0)
80002e20:	00078593          	mv	a1,a5
80002e24:	500007b7          	lui	a5,0x50000
80002e28:	02478513          	addi	a0,a5,36 # 50000024 <RAM_SIZE+0x4ff80024>
80002e2c:	8d0fe0ef          	jal	ra,80000efc <HW_set_32bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:70
    return;
80002e30:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:71
}
80002e34:	01c12083          	lw	ra,28(sp)
80002e38:	01812403          	lw	s0,24(sp)
80002e3c:	02010113          	addi	sp,sp,32
80002e40:	00008067          	ret

80002e44 <printsv>:
printsv():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:75

////////////////////////////////////////////////////////////
// Prints a string followed by a integer
void printsv(char *text1, int value1) {
80002e44:	fe010113          	addi	sp,sp,-32
80002e48:	00112e23          	sw	ra,28(sp)
80002e4c:	00812c23          	sw	s0,24(sp)
80002e50:	02010413          	addi	s0,sp,32
80002e54:	fea42623          	sw	a0,-20(s0)
80002e58:	feb42423          	sw	a1,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:76
    prints(text1);
80002e5c:	fec42503          	lw	a0,-20(s0)
80002e60:	f39ff0ef          	jal	ra,80002d98 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:77
    printi(value1);
80002e64:	fe842503          	lw	a0,-24(s0)
80002e68:	fa1ff0ef          	jal	ra,80002e08 <printi>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:78
    prints("\n");
80002e6c:	800077b7          	lui	a5,0x80007
80002e70:	a6c78513          	addi	a0,a5,-1428 # 80006a6c <__stack_top+0xfffc547c>
80002e74:	f25ff0ef          	jal	ra,80002d98 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:79
    return;
80002e78:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:80
}
80002e7c:	01c12083          	lw	ra,28(sp)
80002e80:	01812403          	lw	s0,24(sp)
80002e84:	02010113          	addi	sp,sp,32
80002e88:	00008067          	ret

80002e8c <printsvsv>:
printsvsv():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:84

////////////////////////////////////////////////////////////
// Prints two strings and two integers interspersed
void printsvsv(char *text1, int value1, char *text2, int value2) {
80002e8c:	fe010113          	addi	sp,sp,-32
80002e90:	00112e23          	sw	ra,28(sp)
80002e94:	00812c23          	sw	s0,24(sp)
80002e98:	02010413          	addi	s0,sp,32
80002e9c:	fea42623          	sw	a0,-20(s0)
80002ea0:	feb42423          	sw	a1,-24(s0)
80002ea4:	fec42223          	sw	a2,-28(s0)
80002ea8:	fed42023          	sw	a3,-32(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:85
    prints(text1);
80002eac:	fec42503          	lw	a0,-20(s0)
80002eb0:	ee9ff0ef          	jal	ra,80002d98 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:86
    printi(value1);
80002eb4:	fe842503          	lw	a0,-24(s0)
80002eb8:	f51ff0ef          	jal	ra,80002e08 <printi>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:87
    prints(text2);
80002ebc:	fe442503          	lw	a0,-28(s0)
80002ec0:	ed9ff0ef          	jal	ra,80002d98 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:88
    printi(value2);
80002ec4:	fe042503          	lw	a0,-32(s0)
80002ec8:	f41ff0ef          	jal	ra,80002e08 <printi>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:89
    prints("\n");
80002ecc:	800077b7          	lui	a5,0x80007
80002ed0:	a6c78513          	addi	a0,a5,-1428 # 80006a6c <__stack_top+0xfffc547c>
80002ed4:	ec5ff0ef          	jal	ra,80002d98 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:90
    return;
80002ed8:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:91
}
80002edc:	01c12083          	lw	ra,28(sp)
80002ee0:	01812403          	lw	s0,24(sp)
80002ee4:	02010113          	addi	sp,sp,32
80002ee8:	00008067          	ret

80002eec <getXpos>:
getXpos():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:95

////////////////////////////////////////////////////////////
// Gets the X coordinate from the address
unsigned int getXpos(unsigned int addr) { return ((addr & 0x0000FF00) >> 8); }
80002eec:	fe010113          	addi	sp,sp,-32
80002ef0:	00812e23          	sw	s0,28(sp)
80002ef4:	02010413          	addi	s0,sp,32
80002ef8:	fea42623          	sw	a0,-20(s0)
80002efc:	fec42783          	lw	a5,-20(s0)
80002f00:	0087d793          	srli	a5,a5,0x8
80002f04:	0ff7f793          	andi	a5,a5,255
80002f08:	00078513          	mv	a0,a5
80002f0c:	01c12403          	lw	s0,28(sp)
80002f10:	02010113          	addi	sp,sp,32
80002f14:	00008067          	ret

80002f18 <getYpos>:
getYpos():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:99

////////////////////////////////////////////////////////////
// Gets the Y coordinate from the address
unsigned int getYpos(unsigned int addr) { return (addr & 0x000000FF); }
80002f18:	fe010113          	addi	sp,sp,-32
80002f1c:	00812e23          	sw	s0,28(sp)
80002f20:	02010413          	addi	s0,sp,32
80002f24:	fea42623          	sw	a0,-20(s0)
80002f28:	fec42783          	lw	a5,-20(s0)
80002f2c:	0ff7f793          	andi	a5,a5,255
80002f30:	00078513          	mv	a0,a5
80002f34:	01c12403          	lw	s0,28(sp)
80002f38:	02010113          	addi	sp,sp,32
80002f3c:	00008067          	ret

80002f40 <SendRaw>:
SendRaw():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:103

///////////////////////////////////////////////////////////////////
// Configure the NI to transmitt a given packet
void SendRaw(unsigned int addr) {
80002f40:	fe010113          	addi	sp,sp,-32
80002f44:	00112e23          	sw	ra,28(sp)
80002f48:	00812c23          	sw	s0,24(sp)
80002f4c:	02010413          	addi	s0,sp,32
80002f50:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:104
    HW_set_32bit_reg(NI_ADDR, addr);
80002f54:	fec42583          	lw	a1,-20(s0)
80002f58:	500007b7          	lui	a5,0x50000
80002f5c:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
80002f60:	f9dfd0ef          	jal	ra,80000efc <HW_set_32bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:105
    HW_set_32bit_reg(NI_TX, TX);
80002f64:	000027b7          	lui	a5,0x2
80002f68:	22278593          	addi	a1,a5,546 # 2222 <HEAP_SIZE-0xddde>
80002f6c:	500007b7          	lui	a5,0x50000
80002f70:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80002f74:	f89fd0ef          	jal	ra,80000efc <HW_set_32bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:106
    return;
80002f78:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:107
}
80002f7c:	01c12083          	lw	ra,28(sp)
80002f80:	01812403          	lw	s0,24(sp)
80002f84:	02010113          	addi	sp,sp,32
80002f88:	00008067          	ret

80002f8c <NI_enable_irq>:
NI_enable_irq():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:111

////////////////////////////////////////////////////////////
// Enables interruptions incomming from NI
void NI_enable_irq(int which){
80002f8c:	fe010113          	addi	sp,sp,-32
80002f90:	00112e23          	sw	ra,28(sp)
80002f94:	00812c23          	sw	s0,24(sp)
80002f98:	02010413          	addi	s0,sp,32
80002f9c:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:112
	if (which == TX || which == TX_RX){
80002fa0:	fec42703          	lw	a4,-20(s0)
80002fa4:	000027b7          	lui	a5,0x2
80002fa8:	22278793          	addi	a5,a5,546 # 2222 <HEAP_SIZE-0xddde>
80002fac:	00f70a63          	beq	a4,a5,80002fc0 <NI_enable_irq+0x34>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:112 (discriminator 1)
80002fb0:	fec42703          	lw	a4,-20(s0)
80002fb4:	000077b7          	lui	a5,0x7
80002fb8:	77778793          	addi	a5,a5,1911 # 7777 <HEAP_SIZE-0x8889>
80002fbc:	00f71c63          	bne	a4,a5,80002fd4 <NI_enable_irq+0x48>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:113
        PLIC_EnableIRQ(NI_TX_IRQn);
80002fc0:	00100513          	li	a0,1
80002fc4:	c0dff0ef          	jal	ra,80002bd0 <PLIC_EnableIRQ>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:114
        PLIC_SetPriority(NI_TX_IRQn, 1);
80002fc8:	00100593          	li	a1,1
80002fcc:	00100513          	li	a0,1
80002fd0:	cb5ff0ef          	jal	ra,80002c84 <PLIC_SetPriority>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:116
    }
    if (which == RX || which == TX_RX){
80002fd4:	fec42703          	lw	a4,-20(s0)
80002fd8:	000037b7          	lui	a5,0x3
80002fdc:	33378793          	addi	a5,a5,819 # 3333 <HEAP_SIZE-0xcccd>
80002fe0:	00f70a63          	beq	a4,a5,80002ff4 <NI_enable_irq+0x68>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:116 (discriminator 1)
80002fe4:	fec42703          	lw	a4,-20(s0)
80002fe8:	000077b7          	lui	a5,0x7
80002fec:	77778793          	addi	a5,a5,1911 # 7777 <HEAP_SIZE-0x8889>
80002ff0:	00f71e63          	bne	a4,a5,8000300c <NI_enable_irq+0x80>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:117
        PLIC_EnableIRQ(NI_RX_IRQn);
80002ff4:	00200513          	li	a0,2
80002ff8:	bd9ff0ef          	jal	ra,80002bd0 <PLIC_EnableIRQ>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:118
        PLIC_SetPriority(NI_RX_IRQn, 1);
80002ffc:	00100593          	li	a1,1
80003000:	00200513          	li	a0,2
80003004:	c81ff0ef          	jal	ra,80002c84 <PLIC_SetPriority>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:120
    }
    return;
80003008:	00000013          	nop
8000300c:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:121
}
80003010:	01c12083          	lw	ra,28(sp)
80003014:	01812403          	lw	s0,24(sp)
80003018:	02010113          	addi	sp,sp,32
8000301c:	00008067          	ret

80003020 <External_1_IRQHandler>:
External_1_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:133
    return;
}

////////////////////////////////////////////////////////////
// Interruptions handler for TX
uint8_t External_1_IRQHandler(void){ 
80003020:	ff010113          	addi	sp,sp,-16
80003024:	00112623          	sw	ra,12(sp)
80003028:	00812423          	sw	s0,8(sp)
8000302c:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:135
    //prints("INTERRUPTION TX\n");
    API_ClearPipeSlot(SendingSlot);
80003030:	800207b7          	lui	a5,0x80020
80003034:	0687a783          	lw	a5,104(a5) # 80020068 <__stack_top+0xfffdea78>
80003038:	00078513          	mv	a0,a5
8000303c:	354030ef          	jal	ra,80006390 <API_ClearPipeSlot>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:136
    HW_set_32bit_reg(NI_TX, DONE);
80003040:	000057b7          	lui	a5,0x5
80003044:	55578593          	addi	a1,a5,1365 # 5555 <HEAP_SIZE-0xaaab>
80003048:	500007b7          	lui	a5,0x50000
8000304c:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80003050:	eadfd0ef          	jal	ra,80000efc <HW_set_32bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:137
    API_Try2Send();
80003054:	095000ef          	jal	ra,800038e8 <API_Try2Send>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:138
    return 0;
80003058:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:139
}
8000305c:	00078513          	mv	a0,a5
80003060:	00c12083          	lw	ra,12(sp)
80003064:	00812403          	lw	s0,8(sp)
80003068:	01010113          	addi	sp,sp,16
8000306c:	00008067          	ret

80003070 <External_2_IRQHandler>:
External_2_IRQHandler():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:143

////////////////////////////////////////////////////////////
// Interruptions handler for RX
uint8_t External_2_IRQHandler(void){
80003070:	fe010113          	addi	sp,sp,-32
80003074:	00112e23          	sw	ra,28(sp)
80003078:	00812c23          	sw	s0,24(sp)
8000307c:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:161
    // printsv("Flit 10: ", incommingPacket.flit10);
    // printsv("Flit 11: ", incommingPacket.flit11);
    // printsv("Flit 12: ", incommingPacket.flit12);


    switch (incommingPacket.service){
80003080:	800207b7          	lui	a5,0x80020
80003084:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
80003088:	0087a783          	lw	a5,8(a5)
8000308c:	03300713          	li	a4,51
80003090:	1ce78c63          	beq	a5,a4,80003268 <External_2_IRQHandler+0x1f8>
80003094:	03300713          	li	a4,51
80003098:	02f76a63          	bltu	a4,a5,800030cc <External_2_IRQHandler+0x5c>
8000309c:	02000713          	li	a4,32
800030a0:	36e78e63          	beq	a5,a4,8000341c <External_2_IRQHandler+0x3ac>
800030a4:	02000713          	li	a4,32
800030a8:	00f76863          	bltu	a4,a5,800030b8 <External_2_IRQHandler+0x48>
800030ac:	01000713          	li	a4,16
800030b0:	2ce78663          	beq	a5,a4,8000337c <External_2_IRQHandler+0x30c>
800030b4:	4280006f          	j	800034dc <External_2_IRQHandler+0x46c>
800030b8:	02100713          	li	a4,33
800030bc:	3ce78863          	beq	a5,a4,8000348c <External_2_IRQHandler+0x41c>
800030c0:	03000713          	li	a4,48
800030c4:	08e78063          	beq	a5,a4,80003144 <External_2_IRQHandler+0xd4>
800030c8:	4140006f          	j	800034dc <External_2_IRQHandler+0x46c>
800030cc:	40000713          	li	a4,1024
800030d0:	1ee78463          	beq	a5,a4,800032b8 <External_2_IRQHandler+0x248>
800030d4:	40000713          	li	a4,1024
800030d8:	00f76c63          	bltu	a4,a5,800030f0 <External_2_IRQHandler+0x80>
800030dc:	03500713          	li	a4,53
800030e0:	1ae78863          	beq	a5,a4,80003290 <External_2_IRQHandler+0x220>
800030e4:	20000713          	li	a4,512
800030e8:	00e78e63          	beq	a5,a4,80003104 <External_2_IRQHandler+0x94>
800030ec:	3f00006f          	j	800034dc <External_2_IRQHandler+0x46c>
800030f0:	40100713          	li	a4,1025
800030f4:	22e78c63          	beq	a5,a4,8000332c <External_2_IRQHandler+0x2bc>
800030f8:	50000713          	li	a4,1280
800030fc:	0ce78c63          	beq	a5,a4,800031d4 <External_2_IRQHandler+0x164>
80003100:	3dc0006f          	j	800034dc <External_2_IRQHandler+0x46c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:166
        unsigned int aux;

        case REPOSITORY_APP_INFO: // When the repository informs the GM that exist a new Application available:
            //prints("REPOSITORY_APP_INFO\n");
            API_AddApplication(incommingPacket.application_id,
80003104:	800207b7          	lui	a5,0x80020
80003108:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
8000310c:	00c7a703          	lw	a4,12(a5)
80003110:	800207b7          	lui	a5,0x80020
80003114:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
80003118:	0107a583          	lw	a1,16(a5)
8000311c:	800207b7          	lui	a5,0x80020
80003120:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
80003124:	0147a603          	lw	a2,20(a5)
80003128:	800207b7          	lui	a5,0x80020
8000312c:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
80003130:	0187a783          	lw	a5,24(a5)
80003134:	00078693          	mv	a3,a5
80003138:	00070513          	mv	a0,a4
8000313c:	3f4010ef          	jal	ra,80004530 <API_AddApplication>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:170
                               incommingPacket.aplication_period, 
                               incommingPacket.application_executions, 
                               incommingPacket.application_n_tasks);
            break;
80003140:	3bc0006f          	j	800034fc <External_2_IRQHandler+0x48c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:175
        
        case TASK_ALLOCATION_SEND: // When the GM asks one Slave to allocate one task
            // aux will receive the taskslot 
            //prints("TASK_ALLOCATION_SEND\n");
            aux = API_TaskAllocation(incommingPacket.task_id,
80003144:	800207b7          	lui	a5,0x80020
80003148:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
8000314c:	00c7a503          	lw	a0,12(a5)
80003150:	800207b7          	lui	a5,0x80020
80003154:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
80003158:	0107a583          	lw	a1,16(a5)
8000315c:	800207b7          	lui	a5,0x80020
80003160:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
80003164:	0147a603          	lw	a2,20(a5)
80003168:	800207b7          	lui	a5,0x80020
8000316c:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
80003170:	0187a683          	lw	a3,24(a5)
80003174:	800207b7          	lui	a5,0x80020
80003178:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
8000317c:	01c7a783          	lw	a5,28(a5)
80003180:	00078713          	mv	a4,a5
80003184:	2ad020ef          	jal	ra,80005c30 <API_TaskAllocation>
80003188:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:182
                                     incommingPacket.task_bss_size,
                                     incommingPacket.task_start_point,
                                     incommingPacket.task_app_id);

            // Informs the NI were to write the application
            HW_set_32bit_reg(NI_ADDR, TaskList[aux].taskAddr);
8000318c:	800217b7          	lui	a5,0x80021
80003190:	fec42703          	lw	a4,-20(s0)
80003194:	28878693          	addi	a3,a5,648 # 80021288 <__stack_top+0xfffdfc98>
80003198:	00070793          	mv	a5,a4
8000319c:	00479793          	slli	a5,a5,0x4
800031a0:	40e787b3          	sub	a5,a5,a4
800031a4:	00379793          	slli	a5,a5,0x3
800031a8:	00f687b3          	add	a5,a3,a5
800031ac:	01c7a783          	lw	a5,28(a5)
800031b0:	00078593          	mv	a1,a5
800031b4:	500007b7          	lui	a5,0x50000
800031b8:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
800031bc:	d41fd0ef          	jal	ra,80000efc <HW_set_32bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:183
            incommingPacket.service = TASK_ALLOCATION_FINISHED;
800031c0:	800207b7          	lui	a5,0x80020
800031c4:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
800031c8:	03300713          	li	a4,51
800031cc:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:184
            break;
800031d0:	32c0006f          	j	800034fc <External_2_IRQHandler+0x48c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:187
        
        case TASK_FINISH:
            printsvsv("FINISHED: Task ", incommingPacket.task_id, "from application ", incommingPacket.task_app_id);
800031d4:	800207b7          	lui	a5,0x80020
800031d8:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
800031dc:	00c7a783          	lw	a5,12(a5)
800031e0:	00078713          	mv	a4,a5
800031e4:	800207b7          	lui	a5,0x80020
800031e8:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
800031ec:	01c7a783          	lw	a5,28(a5)
800031f0:	00078693          	mv	a3,a5
800031f4:	800077b7          	lui	a5,0x80007
800031f8:	a7078613          	addi	a2,a5,-1424 # 80006a70 <__stack_top+0xfffc5480>
800031fc:	00070593          	mv	a1,a4
80003200:	800077b7          	lui	a5,0x80007
80003204:	a8478513          	addi	a0,a5,-1404 # 80006a84 <__stack_top+0xfffc5494>
80003208:	c85ff0ef          	jal	ra,80002e8c <printsvsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:188
            API_ClearTaskSlotFromTile(incommingPacket.task_dest_addr, incommingPacket.task_app_id, incommingPacket.task_id);
8000320c:	800207b7          	lui	a5,0x80020
80003210:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
80003214:	0307a703          	lw	a4,48(a5)
80003218:	800207b7          	lui	a5,0x80020
8000321c:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
80003220:	01c7a683          	lw	a3,28(a5)
80003224:	800207b7          	lui	a5,0x80020
80003228:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
8000322c:	00c7a783          	lw	a5,12(a5)
80003230:	00078613          	mv	a2,a5
80003234:	00068593          	mv	a1,a3
80003238:	00070513          	mv	a0,a4
8000323c:	054020ef          	jal	ra,80005290 <API_ClearTaskSlotFromTile>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:189
            API_DealocateTask(incommingPacket.task_app_id, incommingPacket.task_id);
80003240:	800207b7          	lui	a5,0x80020
80003244:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
80003248:	01c7a703          	lw	a4,28(a5)
8000324c:	800207b7          	lui	a5,0x80020
80003250:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
80003254:	00c7a783          	lw	a5,12(a5)
80003258:	00078593          	mv	a1,a5
8000325c:	00070513          	mv	a0,a4
80003260:	23d010ef          	jal	ra,80004c9c <API_DealocateTask>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:190
            break;
80003264:	2980006f          	j	800034fc <External_2_IRQHandler+0x48c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:194

        case TASK_ALLOCATION_FINISHED:
            //prints("TASK_ALLOCATION_FINISHED\n");
            API_AckTaskAllocation(incommingPacket.task_id, incommingPacket.task_app_id);
80003268:	800207b7          	lui	a5,0x80020
8000326c:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
80003270:	00c7a703          	lw	a4,12(a5)
80003274:	800207b7          	lui	a5,0x80020
80003278:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
8000327c:	01c7a783          	lw	a5,28(a5)
80003280:	00078593          	mv	a1,a5
80003284:	00070513          	mv	a0,a4
80003288:	758000ef          	jal	ra,800039e0 <API_AckTaskAllocation>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:195
            break;
8000328c:	2700006f          	j	800034fc <External_2_IRQHandler+0x48c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:199

        case TASK_ALLOCATION_SUCCESS:
            //prints("TASK_ALLOCATION_SUCCESS\n");
            API_TaskAllocated(incommingPacket.task_id, incommingPacket.task_app_id);
80003290:	800207b7          	lui	a5,0x80020
80003294:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
80003298:	00c7a703          	lw	a4,12(a5)
8000329c:	800207b7          	lui	a5,0x80020
800032a0:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
800032a4:	01c7a783          	lw	a5,28(a5)
800032a8:	00078593          	mv	a1,a5
800032ac:	00070513          	mv	a0,a4
800032b0:	3d4020ef          	jal	ra,80005684 <API_TaskAllocated>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:200
            break;
800032b4:	2480006f          	j	800034fc <External_2_IRQHandler+0x48c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:204

        case TASK_START:
            //prints("Chegou um TASK_START!\n");
            aux = API_GetTaskSlot(incommingPacket.task_id, incommingPacket.task_app_id);
800032b8:	800207b7          	lui	a5,0x80020
800032bc:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
800032c0:	00c7a703          	lw	a4,12(a5)
800032c4:	800207b7          	lui	a5,0x80020
800032c8:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
800032cc:	01c7a783          	lw	a5,28(a5)
800032d0:	00078593          	mv	a1,a5
800032d4:	00070513          	mv	a0,a4
800032d8:	319020ef          	jal	ra,80005df0 <API_GetTaskSlot>
800032dc:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:206
            // Informs the NI were to write the application
            HW_set_32bit_reg(NI_ADDR, (unsigned int)&TaskList[aux].appNumTasks);
800032e0:	fec42703          	lw	a4,-20(s0)
800032e4:	00070793          	mv	a5,a4
800032e8:	00479793          	slli	a5,a5,0x4
800032ec:	40e787b3          	sub	a5,a5,a4
800032f0:	00379793          	slli	a5,a5,0x3
800032f4:	04078713          	addi	a4,a5,64
800032f8:	800217b7          	lui	a5,0x80021
800032fc:	28878793          	addi	a5,a5,648 # 80021288 <__stack_top+0xfffdfc98>
80003300:	00f707b3          	add	a5,a4,a5
80003304:	00c78793          	addi	a5,a5,12
80003308:	00078593          	mv	a1,a5
8000330c:	500007b7          	lui	a5,0x50000
80003310:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
80003314:	be9fd0ef          	jal	ra,80000efc <HW_set_32bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:207
            incommingPacket.service = TASK_RUN;
80003318:	800207b7          	lui	a5,0x80020
8000331c:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
80003320:	40100713          	li	a4,1025
80003324:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:208
            break;
80003328:	1d40006f          	j	800034fc <External_2_IRQHandler+0x48c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:212
        
        case TASK_RUN:
            //prints("Chegou um TASK_RUN!\n");
            aux = API_GetTaskSlot(incommingPacket.task_id, incommingPacket.task_app_id);
8000332c:	800207b7          	lui	a5,0x80020
80003330:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
80003334:	00c7a703          	lw	a4,12(a5)
80003338:	800207b7          	lui	a5,0x80020
8000333c:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
80003340:	01c7a783          	lw	a5,28(a5)
80003344:	00078593          	mv	a1,a5
80003348:	00070513          	mv	a0,a4
8000334c:	2a5020ef          	jal	ra,80005df0 <API_GetTaskSlot>
80003350:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:213
            printsv("Starting Task: ", incommingPacket.task_id);
80003354:	800207b7          	lui	a5,0x80020
80003358:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
8000335c:	00c7a783          	lw	a5,12(a5)
80003360:	00078593          	mv	a1,a5
80003364:	800077b7          	lui	a5,0x80007
80003368:	a9478513          	addi	a0,a5,-1388 # 80006a94 <__stack_top+0xfffc54a4>
8000336c:	ad9ff0ef          	jal	ra,80002e44 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:214
            API_TaskStart(aux);
80003370:	fec42503          	lw	a0,-20(s0)
80003374:	34d020ef          	jal	ra,80005ec0 <API_TaskStart>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:215
            break;
80003378:	1840006f          	j	800034fc <External_2_IRQHandler+0x48c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:219

        case MESSAGE_REQUEST:
            // check the pipe
            prints("Chegou um message request! \n");
8000337c:	800077b7          	lui	a5,0x80007
80003380:	aa478513          	addi	a0,a5,-1372 # 80006aa4 <__stack_top+0xfffc54b4>
80003384:	a15ff0ef          	jal	ra,80002d98 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:220
            aux = API_CheckMessagePipe(incommingPacket.task_id, incommingPacket.task_app_id);
80003388:	800207b7          	lui	a5,0x80020
8000338c:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
80003390:	00c7a703          	lw	a4,12(a5)
80003394:	800207b7          	lui	a5,0x80020
80003398:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
8000339c:	01c7a783          	lw	a5,28(a5)
800033a0:	00078593          	mv	a1,a5
800033a4:	00070513          	mv	a0,a4
800033a8:	6bd000ef          	jal	ra,80004264 <API_CheckMessagePipe>
800033ac:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:221
            if (aux == ERRO){
800033b0:	fec42703          	lw	a4,-20(s0)
800033b4:	fff00793          	li	a5,-1
800033b8:	04f71463          	bne	a4,a5,80003400 <External_2_IRQHandler+0x390>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:223
                // register an messagerequest
                prints("Mensagem não encontrada, adicionando ao PendingReq!\n");
800033bc:	800077b7          	lui	a5,0x80007
800033c0:	ac478513          	addi	a0,a5,-1340 # 80006ac4 <__stack_top+0xfffc54d4>
800033c4:	9d5ff0ef          	jal	ra,80002d98 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:224
                API_AddPendingReq(incommingPacket.task_id, incommingPacket.task_app_id, incommingPacket.producer_task_id);
800033c8:	800207b7          	lui	a5,0x80020
800033cc:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
800033d0:	00c7a703          	lw	a4,12(a5)
800033d4:	800207b7          	lui	a5,0x80020
800033d8:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
800033dc:	01c7a683          	lw	a3,28(a5)
800033e0:	800207b7          	lui	a5,0x80020
800033e4:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
800033e8:	0147a783          	lw	a5,20(a5)
800033ec:	00078613          	mv	a2,a5
800033f0:	00068593          	mv	a1,a3
800033f4:	00070513          	mv	a0,a4
800033f8:	7a9000ef          	jal	ra,800043a0 <API_AddPendingReq>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:229
            } else {
                prints("Mensagem encontrada no pipe!\n");
                API_PushSendQueue(MESSAGE, aux);
            }
            break;
800033fc:	1000006f          	j	800034fc <External_2_IRQHandler+0x48c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:226
                prints("Mensagem encontrada no pipe!\n");
80003400:	800077b7          	lui	a5,0x80007
80003404:	afc78513          	addi	a0,a5,-1284 # 80006afc <__stack_top+0xfffc550c>
80003408:	991ff0ef          	jal	ra,80002d98 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:227
                API_PushSendQueue(MESSAGE, aux);
8000340c:	fec42583          	lw	a1,-20(s0)
80003410:	20200537          	lui	a0,0x20200
80003414:	3c0000ef          	jal	ra,800037d4 <API_PushSendQueue>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:229
            break;
80003418:	0e40006f          	j	800034fc <External_2_IRQHandler+0x48c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:233
        
        case MESSAGE_DELIVERY:
            //prints("Tem uma mensagem chegando...\n");
            aux = API_GetTaskSlot(incommingPacket.destination_task, incommingPacket.application_id);
8000341c:	800207b7          	lui	a5,0x80020
80003420:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
80003424:	0147a703          	lw	a4,20(a5)
80003428:	800207b7          	lui	a5,0x80020
8000342c:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
80003430:	00c7a783          	lw	a5,12(a5)
80003434:	00078593          	mv	a1,a5
80003438:	00070513          	mv	a0,a4
8000343c:	1b5020ef          	jal	ra,80005df0 <API_GetTaskSlot>
80003440:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:234
            incommingPacket.service = MESSAGE_DELIVERY_FINISH;
80003444:	800207b7          	lui	a5,0x80020
80003448:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
8000344c:	02100713          	li	a4,33
80003450:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:236
            //printsv("MESSAGE_DELIVERY addr: ", TaskList[aux].MsgToReceive);
            HW_set_32bit_reg(NI_ADDR, TaskList[aux].MsgToReceive);
80003454:	800217b7          	lui	a5,0x80021
80003458:	fec42703          	lw	a4,-20(s0)
8000345c:	28878693          	addi	a3,a5,648 # 80021288 <__stack_top+0xfffdfc98>
80003460:	00070793          	mv	a5,a4
80003464:	00479793          	slli	a5,a5,0x4
80003468:	40e787b3          	sub	a5,a5,a4
8000346c:	00379793          	slli	a5,a5,0x3
80003470:	00f687b3          	add	a5,a3,a5
80003474:	0147a783          	lw	a5,20(a5)
80003478:	00078593          	mv	a1,a5
8000347c:	500007b7          	lui	a5,0x50000
80003480:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
80003484:	a79fd0ef          	jal	ra,80000efc <HW_set_32bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:237
            break;
80003488:	0740006f          	j	800034fc <External_2_IRQHandler+0x48c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:241
        
        case MESSAGE_DELIVERY_FINISH:
            //prints("Terminou de entregar a mensagem!!\n");
            aux = API_GetTaskSlot(incommingPacket.destination_task, incommingPacket.application_id);
8000348c:	800207b7          	lui	a5,0x80020
80003490:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
80003494:	0147a703          	lw	a4,20(a5)
80003498:	800207b7          	lui	a5,0x80020
8000349c:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
800034a0:	00c7a783          	lw	a5,12(a5)
800034a4:	00078593          	mv	a1,a5
800034a8:	00070513          	mv	a0,a4
800034ac:	145020ef          	jal	ra,80005df0 <API_GetTaskSlot>
800034b0:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:242
            TaskList[aux].waitingMsg = FALSE;
800034b4:	800216b7          	lui	a3,0x80021
800034b8:	fec42703          	lw	a4,-20(s0)
800034bc:	00070793          	mv	a5,a4
800034c0:	00479793          	slli	a5,a5,0x4
800034c4:	40e787b3          	sub	a5,a5,a4
800034c8:	00379793          	slli	a5,a5,0x3
800034cc:	28868713          	addi	a4,a3,648 # 80021288 <__stack_top+0xfffdfc98>
800034d0:	00e787b3          	add	a5,a5,a4
800034d4:	0007a823          	sw	zero,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:243
            break;
800034d8:	0240006f          	j	800034fc <External_2_IRQHandler+0x48c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:247
            

        default:
            printsv("ERROR External_2_IRQHandler Unknown-Service", incommingPacket.service);
800034dc:	800207b7          	lui	a5,0x80020
800034e0:	16078793          	addi	a5,a5,352 # 80020160 <__stack_top+0xfffdeb70>
800034e4:	0087a783          	lw	a5,8(a5)
800034e8:	00078593          	mv	a1,a5
800034ec:	800077b7          	lui	a5,0x80007
800034f0:	b1c78513          	addi	a0,a5,-1252 # 80006b1c <__stack_top+0xfffc552c>
800034f4:	951ff0ef          	jal	ra,80002e44 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:248
            break;
800034f8:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:251
    }
    // prints("==========================\n");
    HW_set_32bit_reg(NI_RX, DONE);
800034fc:	000057b7          	lui	a5,0x5
80003500:	55578593          	addi	a1,a5,1365 # 5555 <HEAP_SIZE-0xaaab>
80003504:	500007b7          	lui	a5,0x50000
80003508:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
8000350c:	9f1fd0ef          	jal	ra,80000efc <HW_set_32bit_reg>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:252
    return 0;
80003510:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:253
}
80003514:	00078513          	mv	a0,a5
80003518:	01c12083          	lw	ra,28(sp)
8000351c:	01812403          	lw	s0,24(sp)
80003520:	02010113          	addi	sp,sp,32
80003524:	00008067          	ret

80003528 <mySwap>:
mySwap():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:258

////////////////////////////////////////////////////////////
// https://www.techiedelight.com/implement-itoa-function-in-c/
// Function to swap two numbers
void mySwap(char *x, char *y) {
80003528:	fd010113          	addi	sp,sp,-48
8000352c:	02812623          	sw	s0,44(sp)
80003530:	03010413          	addi	s0,sp,48
80003534:	fca42e23          	sw	a0,-36(s0)
80003538:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:259
    char t = *x; *x = *y; *y = t;
8000353c:	fdc42783          	lw	a5,-36(s0)
80003540:	0007c783          	lbu	a5,0(a5)
80003544:	fef407a3          	sb	a5,-17(s0)
80003548:	fd842783          	lw	a5,-40(s0)
8000354c:	00078703          	lb	a4,0(a5)
80003550:	fdc42783          	lw	a5,-36(s0)
80003554:	00e78023          	sb	a4,0(a5)
80003558:	fd842783          	lw	a5,-40(s0)
8000355c:	fef44703          	lbu	a4,-17(s0)
80003560:	00e78023          	sb	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:260
}
80003564:	00000013          	nop
80003568:	02c12403          	lw	s0,44(sp)
8000356c:	03010113          	addi	sp,sp,48
80003570:	00008067          	ret

80003574 <reverse>:
reverse():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:262
// Function to reverse `buffer[i…j]`
char* reverse(char *buffer, int i, int j){
80003574:	fe010113          	addi	sp,sp,-32
80003578:	00112e23          	sw	ra,28(sp)
8000357c:	00812c23          	sw	s0,24(sp)
80003580:	02010413          	addi	s0,sp,32
80003584:	fea42623          	sw	a0,-20(s0)
80003588:	feb42423          	sw	a1,-24(s0)
8000358c:	fec42223          	sw	a2,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:263
    while (i < j) {
80003590:	0400006f          	j	800035d0 <reverse+0x5c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:264
        mySwap(&buffer[i++], &buffer[j--]);
80003594:	fe842783          	lw	a5,-24(s0)
80003598:	00178713          	addi	a4,a5,1
8000359c:	fee42423          	sw	a4,-24(s0)
800035a0:	00078713          	mv	a4,a5
800035a4:	fec42783          	lw	a5,-20(s0)
800035a8:	00e786b3          	add	a3,a5,a4
800035ac:	fe442783          	lw	a5,-28(s0)
800035b0:	fff78713          	addi	a4,a5,-1
800035b4:	fee42223          	sw	a4,-28(s0)
800035b8:	00078713          	mv	a4,a5
800035bc:	fec42783          	lw	a5,-20(s0)
800035c0:	00e787b3          	add	a5,a5,a4
800035c4:	00078593          	mv	a1,a5
800035c8:	00068513          	mv	a0,a3
800035cc:	f5dff0ef          	jal	ra,80003528 <mySwap>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:263
    while (i < j) {
800035d0:	fe842703          	lw	a4,-24(s0)
800035d4:	fe442783          	lw	a5,-28(s0)
800035d8:	faf74ee3          	blt	a4,a5,80003594 <reverse+0x20>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:267
    }
 
    return buffer;
800035dc:	fec42783          	lw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:268
}
800035e0:	00078513          	mv	a0,a5
800035e4:	01c12083          	lw	ra,28(sp)
800035e8:	01812403          	lw	s0,24(sp)
800035ec:	02010113          	addi	sp,sp,32
800035f0:	00008067          	ret

800035f4 <myItoa>:
myItoa():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:270
// Iterative function to implement `itoa()` function in C
char* myItoa(int value, char* buffer, int base){
800035f4:	fd010113          	addi	sp,sp,-48
800035f8:	02112623          	sw	ra,44(sp)
800035fc:	02812423          	sw	s0,40(sp)
80003600:	03010413          	addi	s0,sp,48
80003604:	fca42e23          	sw	a0,-36(s0)
80003608:	fcb42c23          	sw	a1,-40(s0)
8000360c:	fcc42a23          	sw	a2,-44(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:272
    // invalid input
    if (base < 2 || base > 32) {
80003610:	fd442703          	lw	a4,-44(s0)
80003614:	00100793          	li	a5,1
80003618:	00e7d863          	ble	a4,a5,80003628 <myItoa+0x34>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:272 (discriminator 1)
8000361c:	fd442703          	lw	a4,-44(s0)
80003620:	02000793          	li	a5,32
80003624:	00e7d663          	ble	a4,a5,80003630 <myItoa+0x3c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:273
        return buffer;
80003628:	fd842783          	lw	a5,-40(s0)
8000362c:	1540006f          	j	80003780 <myItoa+0x18c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:277
    }
    // consider the absolute value of the number
    int n;
    if (value < 0)
80003630:	fdc42783          	lw	a5,-36(s0)
80003634:	0007da63          	bgez	a5,80003648 <myItoa+0x54>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:278
        n = value * -1;
80003638:	fdc42783          	lw	a5,-36(s0)
8000363c:	40f007b3          	neg	a5,a5
80003640:	fef42623          	sw	a5,-20(s0)
80003644:	00c0006f          	j	80003650 <myItoa+0x5c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:280
    else 
        n = value;
80003648:	fdc42783          	lw	a5,-36(s0)
8000364c:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:282

    int i = 0;
80003650:	fe042423          	sw	zero,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:283
    while (n){
80003654:	09c0006f          	j	800036f0 <myItoa+0xfc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:284
        int r = n % base;
80003658:	fec42703          	lw	a4,-20(s0)
8000365c:	fd442783          	lw	a5,-44(s0)
80003660:	02f767b3          	rem	a5,a4,a5
80003664:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:286
 
        if (r >= 10) {
80003668:	fe442703          	lw	a4,-28(s0)
8000366c:	00900793          	li	a5,9
80003670:	02e7de63          	ble	a4,a5,800036ac <myItoa+0xb8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:287
            buffer[i++] = 65 + (r - 10);
80003674:	fe442783          	lw	a5,-28(s0)
80003678:	0ff7f793          	andi	a5,a5,255
8000367c:	03778793          	addi	a5,a5,55
80003680:	0ff7f693          	andi	a3,a5,255
80003684:	fe842783          	lw	a5,-24(s0)
80003688:	00178713          	addi	a4,a5,1
8000368c:	fee42423          	sw	a4,-24(s0)
80003690:	00078713          	mv	a4,a5
80003694:	fd842783          	lw	a5,-40(s0)
80003698:	00e787b3          	add	a5,a5,a4
8000369c:	01869713          	slli	a4,a3,0x18
800036a0:	41875713          	srai	a4,a4,0x18
800036a4:	00e78023          	sb	a4,0(a5)
800036a8:	0380006f          	j	800036e0 <myItoa+0xec>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:290
        }
        else {
            buffer[i++] = 48 + r;
800036ac:	fe442783          	lw	a5,-28(s0)
800036b0:	0ff7f793          	andi	a5,a5,255
800036b4:	03078793          	addi	a5,a5,48
800036b8:	0ff7f693          	andi	a3,a5,255
800036bc:	fe842783          	lw	a5,-24(s0)
800036c0:	00178713          	addi	a4,a5,1
800036c4:	fee42423          	sw	a4,-24(s0)
800036c8:	00078713          	mv	a4,a5
800036cc:	fd842783          	lw	a5,-40(s0)
800036d0:	00e787b3          	add	a5,a5,a4
800036d4:	01869713          	slli	a4,a3,0x18
800036d8:	41875713          	srai	a4,a4,0x18
800036dc:	00e78023          	sb	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:293
        }
 
        n = n / base;
800036e0:	fec42703          	lw	a4,-20(s0)
800036e4:	fd442783          	lw	a5,-44(s0)
800036e8:	02f747b3          	div	a5,a4,a5
800036ec:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:283
    while (n){
800036f0:	fec42783          	lw	a5,-20(s0)
800036f4:	f60792e3          	bnez	a5,80003658 <myItoa+0x64>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:296
    }
    // if the number is 0
    if (i == 0) {
800036f8:	fe842783          	lw	a5,-24(s0)
800036fc:	02079263          	bnez	a5,80003720 <myItoa+0x12c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:297
        buffer[i++] = '0';
80003700:	fe842783          	lw	a5,-24(s0)
80003704:	00178713          	addi	a4,a5,1
80003708:	fee42423          	sw	a4,-24(s0)
8000370c:	00078713          	mv	a4,a5
80003710:	fd842783          	lw	a5,-40(s0)
80003714:	00e787b3          	add	a5,a5,a4
80003718:	03000713          	li	a4,48
8000371c:	00e78023          	sb	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:302
    }
    // If the base is 10 and the value is negative, the resulting string
    // is preceded with a minus sign (-)
    // With any other base, value is always considered unsigned
    if (value < 0 && base == 10) {
80003720:	fdc42783          	lw	a5,-36(s0)
80003724:	0207d863          	bgez	a5,80003754 <myItoa+0x160>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:302 (discriminator 1)
80003728:	fd442703          	lw	a4,-44(s0)
8000372c:	00a00793          	li	a5,10
80003730:	02f71263          	bne	a4,a5,80003754 <myItoa+0x160>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:303
        buffer[i++] = '-';
80003734:	fe842783          	lw	a5,-24(s0)
80003738:	00178713          	addi	a4,a5,1
8000373c:	fee42423          	sw	a4,-24(s0)
80003740:	00078713          	mv	a4,a5
80003744:	fd842783          	lw	a5,-40(s0)
80003748:	00e787b3          	add	a5,a5,a4
8000374c:	02d00713          	li	a4,45
80003750:	00e78023          	sb	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:305
    }
    buffer[i] = '\0'; // null terminate string
80003754:	fe842783          	lw	a5,-24(s0)
80003758:	fd842703          	lw	a4,-40(s0)
8000375c:	00f707b3          	add	a5,a4,a5
80003760:	00078023          	sb	zero,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:307
    // reverse the string and return it
    return reverse(buffer, 0, i - 1);
80003764:	fe842783          	lw	a5,-24(s0)
80003768:	fff78793          	addi	a5,a5,-1
8000376c:	00078613          	mv	a2,a5
80003770:	00000593          	li	a1,0
80003774:	fd842503          	lw	a0,-40(s0)
80003778:	dfdff0ef          	jal	ra,80003574 <reverse>
8000377c:	00050793          	mv	a5,a0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:308
}
80003780:	00078513          	mv	a0,a5
80003784:	02c12083          	lw	ra,44(sp)
80003788:	02812403          	lw	s0,40(sp)
8000378c:	03010113          	addi	sp,sp,48
80003790:	00008067          	ret

80003794 <makeAddress>:
makeAddress():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:322
    return;
}

////////////////////////////////////////////////////////////
// Returns the PE address for a giver pair of coords
unsigned int makeAddress(unsigned int x, unsigned int y) {
80003794:	fd010113          	addi	sp,sp,-48
80003798:	02812623          	sw	s0,44(sp)
8000379c:	03010413          	addi	s0,sp,48
800037a0:	fca42e23          	sw	a0,-36(s0)
800037a4:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:323
    unsigned int address = 0x00000000;
800037a8:	fe042623          	sw	zero,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:324
    return (address | (x << 8) | y);
800037ac:	fdc42783          	lw	a5,-36(s0)
800037b0:	00879713          	slli	a4,a5,0x8
800037b4:	fec42783          	lw	a5,-20(s0)
800037b8:	00f76733          	or	a4,a4,a5
800037bc:	fd842783          	lw	a5,-40(s0)
800037c0:	00f767b3          	or	a5,a4,a5
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:325
}
800037c4:	00078513          	mv	a0,a5
800037c8:	02c12403          	lw	s0,44(sp)
800037cc:	03010113          	addi	sp,sp,48
800037d0:	00008067          	ret

800037d4 <API_PushSendQueue>:
API_PushSendQueue():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:329

////////////////////////////////////////////////////////////
// Pushes one slot to the sending queue
void API_PushSendQueue(unsigned int type, unsigned int slot){
800037d4:	fe010113          	addi	sp,sp,-32
800037d8:	00112e23          	sw	ra,28(sp)
800037dc:	00812c23          	sw	s0,24(sp)
800037e0:	02010413          	addi	s0,sp,32
800037e4:	fea42623          	sw	a0,-20(s0)
800037e8:	feb42423          	sw	a1,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:330
    SendingQueue[SendingQueue_front] = type | slot;
800037ec:	800207b7          	lui	a5,0x80020
800037f0:	1cc7a683          	lw	a3,460(a5) # 800201cc <__stack_top+0xfffdebdc>
800037f4:	fec42703          	lw	a4,-20(s0)
800037f8:	fe842783          	lw	a5,-24(s0)
800037fc:	00f76733          	or	a4,a4,a5
80003800:	800207b7          	lui	a5,0x80020
80003804:	00269693          	slli	a3,a3,0x2
80003808:	19478793          	addi	a5,a5,404 # 80020194 <__stack_top+0xfffdeba4>
8000380c:	00f687b3          	add	a5,a3,a5
80003810:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:331
    if(SendingQueue_front == (PIPE_SIZE*2)-1){
80003814:	800207b7          	lui	a5,0x80020
80003818:	1cc7a703          	lw	a4,460(a5) # 800201cc <__stack_top+0xfffdebdc>
8000381c:	00700793          	li	a5,7
80003820:	00f71863          	bne	a4,a5,80003830 <API_PushSendQueue+0x5c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:332
        SendingQueue_front = 0;
80003824:	800207b7          	lui	a5,0x80020
80003828:	1c07a623          	sw	zero,460(a5) # 800201cc <__stack_top+0xfffdebdc>
8000382c:	0180006f          	j	80003844 <API_PushSendQueue+0x70>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:334
    } else {
        SendingQueue_front++;
80003830:	800207b7          	lui	a5,0x80020
80003834:	1cc7a783          	lw	a5,460(a5) # 800201cc <__stack_top+0xfffdebdc>
80003838:	00178713          	addi	a4,a5,1
8000383c:	800207b7          	lui	a5,0x80020
80003840:	1ce7a623          	sw	a4,460(a5) # 800201cc <__stack_top+0xfffdebdc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:336
    }
    API_Try2Send();
80003844:	0a4000ef          	jal	ra,800038e8 <API_Try2Send>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:337
    return;
80003848:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:338
}
8000384c:	01c12083          	lw	ra,28(sp)
80003850:	01812403          	lw	s0,24(sp)
80003854:	02010113          	addi	sp,sp,32
80003858:	00008067          	ret

8000385c <API_PopSendQueue>:
API_PopSendQueue():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:342

////////////////////////////////////////////////////////////
// Pushes one slot to the sending queue
unsigned int API_PopSendQueue(){
8000385c:	fe010113          	addi	sp,sp,-32
80003860:	00812e23          	sw	s0,28(sp)
80003864:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:344
    unsigned int element;
    if (SendingQueue_front == SendingQueue_tail){
80003868:	800207b7          	lui	a5,0x80020
8000386c:	1cc7a703          	lw	a4,460(a5) # 800201cc <__stack_top+0xfffdebdc>
80003870:	800207b7          	lui	a5,0x80020
80003874:	1b47a783          	lw	a5,436(a5) # 800201b4 <__stack_top+0xfffdebc4>
80003878:	00f71663          	bne	a4,a5,80003884 <API_PopSendQueue+0x28>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:345
        return EMPTY;
8000387c:	303007b7          	lui	a5,0x30300
80003880:	0580006f          	j	800038d8 <API_PopSendQueue+0x7c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:347
    } else {
        element = SendingQueue[SendingQueue_tail];
80003884:	800207b7          	lui	a5,0x80020
80003888:	1b47a703          	lw	a4,436(a5) # 800201b4 <__stack_top+0xfffdebc4>
8000388c:	800207b7          	lui	a5,0x80020
80003890:	00271713          	slli	a4,a4,0x2
80003894:	19478793          	addi	a5,a5,404 # 80020194 <__stack_top+0xfffdeba4>
80003898:	00f707b3          	add	a5,a4,a5
8000389c:	0007a783          	lw	a5,0(a5)
800038a0:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:348
        if (SendingQueue_tail == (PIPE_SIZE*2)-1){
800038a4:	800207b7          	lui	a5,0x80020
800038a8:	1b47a703          	lw	a4,436(a5) # 800201b4 <__stack_top+0xfffdebc4>
800038ac:	00700793          	li	a5,7
800038b0:	00f71863          	bne	a4,a5,800038c0 <API_PopSendQueue+0x64>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:349
            SendingQueue_tail = 0;
800038b4:	800207b7          	lui	a5,0x80020
800038b8:	1a07aa23          	sw	zero,436(a5) # 800201b4 <__stack_top+0xfffdebc4>
800038bc:	0180006f          	j	800038d4 <API_PopSendQueue+0x78>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:351
        } else {
            SendingQueue_tail++;
800038c0:	800207b7          	lui	a5,0x80020
800038c4:	1b47a783          	lw	a5,436(a5) # 800201b4 <__stack_top+0xfffdebc4>
800038c8:	00178713          	addi	a4,a5,1
800038cc:	800207b7          	lui	a5,0x80020
800038d0:	1ae7aa23          	sw	a4,436(a5) # 800201b4 <__stack_top+0xfffdebc4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:353
        }
        return element;
800038d4:	fec42783          	lw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:355
    }
}
800038d8:	00078513          	mv	a0,a5
800038dc:	01c12403          	lw	s0,28(sp)
800038e0:	02010113          	addi	sp,sp,32
800038e4:	00008067          	ret

800038e8 <API_Try2Send>:
API_Try2Send():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:359

////////////////////////////////////////////////////////////
// Try to send some packet! 
void API_Try2Send(){
800038e8:	fe010113          	addi	sp,sp,-32
800038ec:	00112e23          	sw	ra,28(sp)
800038f0:	00812c23          	sw	s0,24(sp)
800038f4:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:363
    unsigned int toSend;
    //prints("API_Try2Send\n");
    // Try to send the packet to NI if it's available
    vPortEnterCritical();
800038f8:	cc1fd0ef          	jal	ra,800015b8 <vPortEnterCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:365
        // Checks if the NI is available to transmitt something
        if (HW_get_32bit_reg(NI_TX) == NI_STATUS_OFF){
800038fc:	500007b7          	lui	a5,0x50000
80003900:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80003904:	e00fd0ef          	jal	ra,80000f04 <HW_get_32bit_reg>
80003908:	00050713          	mv	a4,a0
8000390c:	0ff00793          	li	a5,255
80003910:	0af71c63          	bne	a4,a5,800039c8 <API_Try2Send+0xe0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:367
            //prints("NI_TX free\n");
            toSend = API_PopSendQueue();
80003914:	f49ff0ef          	jal	ra,8000385c <API_PopSendQueue>
80003918:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:369
            //printsv("toSend ", toSend);
            if (toSend != EMPTY){
8000391c:	fec42703          	lw	a4,-20(s0)
80003920:	303007b7          	lui	a5,0x30300
80003924:	0af70263          	beq	a4,a5,800039c8 <API_Try2Send+0xe0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:370
                SendingSlot = toSend;
80003928:	800207b7          	lui	a5,0x80020
8000392c:	fec42703          	lw	a4,-20(s0)
80003930:	06e7a423          	sw	a4,104(a5) # 80020068 <__stack_top+0xfffdea78>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:371
                if((toSend & 0xFFFF0000) ==  SERVICE){
80003934:	fec42703          	lw	a4,-20(s0)
80003938:	ffff07b7          	lui	a5,0xffff0
8000393c:	00f77733          	and	a4,a4,a5
80003940:	101007b7          	lui	a5,0x10100
80003944:	04f71063          	bne	a4,a5,80003984 <API_Try2Send+0x9c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:372
                    SendRaw((unsigned int)&ServicePipe[toSend & 0x0000FFFF].header);
80003948:	fec42703          	lw	a4,-20(s0)
8000394c:	000107b7          	lui	a5,0x10
80003950:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80003954:	00f77733          	and	a4,a4,a5
80003958:	00070793          	mv	a5,a4
8000395c:	00479793          	slli	a5,a5,0x4
80003960:	40e787b3          	sub	a5,a5,a4
80003964:	00279793          	slli	a5,a5,0x2
80003968:	80020737          	lui	a4,0x80020
8000396c:	06c70713          	addi	a4,a4,108 # 8002006c <__stack_top+0xfffdea7c>
80003970:	00e787b3          	add	a5,a5,a4
80003974:	00878793          	addi	a5,a5,8
80003978:	00078513          	mv	a0,a5
8000397c:	dc4ff0ef          	jal	ra,80002f40 <SendRaw>
80003980:	0480006f          	j	800039c8 <API_Try2Send+0xe0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:374
                }
                else if((toSend & 0xFFFF0000) ==  MESSAGE){
80003984:	fec42703          	lw	a4,-20(s0)
80003988:	ffff07b7          	lui	a5,0xffff0
8000398c:	00f77733          	and	a4,a4,a5
80003990:	202007b7          	lui	a5,0x20200
80003994:	02f71a63          	bne	a4,a5,800039c8 <API_Try2Send+0xe0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:375
                    SendRaw((unsigned int)&MessagePipe[toSend & 0x0000FFFF].header);
80003998:	fec42703          	lw	a4,-20(s0)
8000399c:	000107b7          	lui	a5,0x10
800039a0:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
800039a4:	00f77733          	and	a4,a4,a5
800039a8:	24400793          	li	a5,580
800039ac:	02f70733          	mul	a4,a4,a5
800039b0:	800207b7          	lui	a5,0x80020
800039b4:	1d078793          	addi	a5,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
800039b8:	00f707b3          	add	a5,a4,a5
800039bc:	00c78793          	addi	a5,a5,12
800039c0:	00078513          	mv	a0,a5
800039c4:	d7cff0ef          	jal	ra,80002f40 <SendRaw>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:381
                }
            }
        } else {
            //prints("NI_TX occupied\n");
        }
    vPortExitCritical();
800039c8:	c25fd0ef          	jal	ra,800015ec <vPortExitCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:382
    return;
800039cc:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:383
}
800039d0:	01c12083          	lw	ra,28(sp)
800039d4:	01812403          	lw	s0,24(sp)
800039d8:	02010113          	addi	sp,sp,32
800039dc:	00008067          	ret

800039e0 <API_AckTaskAllocation>:
API_AckTaskAllocation():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:385

void API_AckTaskAllocation(unsigned int task_id, unsigned int app_id){
800039e0:	fd010113          	addi	sp,sp,-48
800039e4:	02112623          	sw	ra,44(sp)
800039e8:	02812423          	sw	s0,40(sp)
800039ec:	03010413          	addi	s0,sp,48
800039f0:	fca42e23          	sw	a0,-36(s0)
800039f4:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:388
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
800039f8:	0f9020ef          	jal	ra,800062f0 <API_GetServiceSlot>
800039fc:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:389
        if(mySlot == PIPE_FULL) vTaskDelay(1);
80003a00:	fec42703          	lw	a4,-20(s0)
80003a04:	fdfe07b7          	lui	a5,0xfdfe0
80003a08:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e80d>
80003a0c:	00f71663          	bne	a4,a5,80003a18 <API_AckTaskAllocation+0x38>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:389 (discriminator 1)
80003a10:	00100513          	li	a0,1
80003a14:	f34fe0ef          	jal	ra,80002148 <vTaskDelay>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:390
    }while(mySlot == PIPE_FULL);
80003a18:	fec42703          	lw	a4,-20(s0)
80003a1c:	fdfe07b7          	lui	a5,0xfdfe0
80003a20:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e80d>
80003a24:	fcf70ae3          	beq	a4,a5,800039f8 <API_AckTaskAllocation+0x18>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:393
    //printsv("I got a free service slot!! -> ", mySlot);

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80003a28:	800207b7          	lui	a5,0x80020
80003a2c:	fec42703          	lw	a4,-20(s0)
80003a30:	06c78693          	addi	a3,a5,108 # 8002006c <__stack_top+0xfffdea7c>
80003a34:	00070793          	mv	a5,a4
80003a38:	00479793          	slli	a5,a5,0x4
80003a3c:	40e787b3          	sub	a5,a5,a4
80003a40:	00279793          	slli	a5,a5,0x2
80003a44:	00f687b3          	add	a5,a3,a5
80003a48:	feff0737          	lui	a4,0xfeff0
80003a4c:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efae90e>
80003a50:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:395

    ServicePipe[mySlot].header.header           = makeAddress(0, 0);
80003a54:	00000593          	li	a1,0
80003a58:	00000513          	li	a0,0
80003a5c:	d39ff0ef          	jal	ra,80003794 <makeAddress>
80003a60:	00050613          	mv	a2,a0
80003a64:	800207b7          	lui	a5,0x80020
80003a68:	fec42703          	lw	a4,-20(s0)
80003a6c:	06c78693          	addi	a3,a5,108 # 8002006c <__stack_top+0xfffdea7c>
80003a70:	00070793          	mv	a5,a4
80003a74:	00479793          	slli	a5,a5,0x4
80003a78:	40e787b3          	sub	a5,a5,a4
80003a7c:	00279793          	slli	a5,a5,0x2
80003a80:	00f687b3          	add	a5,a3,a5
80003a84:	00c7a423          	sw	a2,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:396
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80003a88:	800207b7          	lui	a5,0x80020
80003a8c:	fec42703          	lw	a4,-20(s0)
80003a90:	06c78693          	addi	a3,a5,108 # 8002006c <__stack_top+0xfffdea7c>
80003a94:	00070793          	mv	a5,a4
80003a98:	00479793          	slli	a5,a5,0x4
80003a9c:	40e787b3          	sub	a5,a5,a4
80003aa0:	00279793          	slli	a5,a5,0x2
80003aa4:	00f687b3          	add	a5,a3,a5
80003aa8:	00b00713          	li	a4,11
80003aac:	00e7a623          	sw	a4,12(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:397
    ServicePipe[mySlot].header.service          = TASK_ALLOCATION_SUCCESS;
80003ab0:	800207b7          	lui	a5,0x80020
80003ab4:	fec42703          	lw	a4,-20(s0)
80003ab8:	06c78693          	addi	a3,a5,108 # 8002006c <__stack_top+0xfffdea7c>
80003abc:	00070793          	mv	a5,a4
80003ac0:	00479793          	slli	a5,a5,0x4
80003ac4:	40e787b3          	sub	a5,a5,a4
80003ac8:	00279793          	slli	a5,a5,0x2
80003acc:	00f687b3          	add	a5,a3,a5
80003ad0:	03500713          	li	a4,53
80003ad4:	00e7a823          	sw	a4,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:398
    ServicePipe[mySlot].header.task_id          = task_id;
80003ad8:	800207b7          	lui	a5,0x80020
80003adc:	fec42703          	lw	a4,-20(s0)
80003ae0:	06c78693          	addi	a3,a5,108 # 8002006c <__stack_top+0xfffdea7c>
80003ae4:	00070793          	mv	a5,a4
80003ae8:	00479793          	slli	a5,a5,0x4
80003aec:	40e787b3          	sub	a5,a5,a4
80003af0:	00279793          	slli	a5,a5,0x2
80003af4:	00f687b3          	add	a5,a3,a5
80003af8:	fdc42703          	lw	a4,-36(s0)
80003afc:	00e7aa23          	sw	a4,20(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:399
    ServicePipe[mySlot].header.task_app_id      = app_id;
80003b00:	800207b7          	lui	a5,0x80020
80003b04:	fec42703          	lw	a4,-20(s0)
80003b08:	06c78693          	addi	a3,a5,108 # 8002006c <__stack_top+0xfffdea7c>
80003b0c:	00070793          	mv	a5,a4
80003b10:	00479793          	slli	a5,a5,0x4
80003b14:	40e787b3          	sub	a5,a5,a4
80003b18:	00279793          	slli	a5,a5,0x2
80003b1c:	00f687b3          	add	a5,a3,a5
80003b20:	fd842703          	lw	a4,-40(s0)
80003b24:	02e7a223          	sw	a4,36(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:401

    API_PushSendQueue(SERVICE, mySlot);
80003b28:	fec42583          	lw	a1,-20(s0)
80003b2c:	10100537          	lui	a0,0x10100
80003b30:	ca5ff0ef          	jal	ra,800037d4 <API_PushSendQueue>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:402
    return;    
80003b34:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:403
}
80003b38:	02c12083          	lw	ra,44(sp)
80003b3c:	02812403          	lw	s0,40(sp)
80003b40:	03010113          	addi	sp,sp,48
80003b44:	00008067          	ret

80003b48 <API_SendMessage>:
API_SendMessage():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:405

void API_SendMessage(unsigned int addr, unsigned int taskID){
80003b48:	fd010113          	addi	sp,sp,-48
80003b4c:	02112623          	sw	ra,44(sp)
80003b50:	02812423          	sw	s0,40(sp)
80003b54:	03010413          	addi	s0,sp,48
80003b58:	fca42e23          	sw	a0,-36(s0)
80003b5c:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:411
    unsigned int mySlot;
    unsigned int taskSlot;
    unsigned int i;
    Message *theMessage;
    do{
        vPortEnterCritical();
80003b60:	a59fd0ef          	jal	ra,800015b8 <vPortEnterCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:412
        mySlot = API_GetMessageSlot();
80003b64:	640020ef          	jal	ra,800061a4 <API_GetMessageSlot>
80003b68:	fea42423          	sw	a0,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:413
        prints("esperando um message slot...\n");
80003b6c:	800077b7          	lui	a5,0x80007
80003b70:	b7078513          	addi	a0,a5,-1168 # 80006b70 <__stack_top+0xfffc5580>
80003b74:	a24ff0ef          	jal	ra,80002d98 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:414
        if(mySlot == PIPE_FULL){ 
80003b78:	fe842703          	lw	a4,-24(s0)
80003b7c:	fdfe07b7          	lui	a5,0xfdfe0
80003b80:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e80d>
80003b84:	00f71863          	bne	a4,a5,80003b94 <API_SendMessage+0x4c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:415
            vPortExitCritical();
80003b88:	a65fd0ef          	jal	ra,800015ec <vPortExitCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:416
            vTaskDelay(1);
80003b8c:	00100513          	li	a0,1
80003b90:	db8fe0ef          	jal	ra,80002148 <vTaskDelay>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:418
        }
    }while(mySlot == PIPE_FULL);
80003b94:	fe842703          	lw	a4,-24(s0)
80003b98:	fdfe07b7          	lui	a5,0xfdfe0
80003b9c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e80d>
80003ba0:	fcf700e3          	beq	a4,a5,80003b60 <API_SendMessage+0x18>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:420
    
    theMessage = addr;
80003ba4:	fdc42783          	lw	a5,-36(s0)
80003ba8:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:422

    taskSlot = API_GetCurrentTaskSlot();
80003bac:	78d010ef          	jal	ra,80005b38 <API_GetCurrentTaskSlot>
80003bb0:	fea42023          	sw	a0,-32(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:423
    printsv("Adding a msg in the PIPE slot ", mySlot);
80003bb4:	fe842783          	lw	a5,-24(s0)
80003bb8:	00078593          	mv	a1,a5
80003bbc:	800077b7          	lui	a5,0x80007
80003bc0:	b9078513          	addi	a0,a5,-1136 # 80006b90 <__stack_top+0xfffc55a0>
80003bc4:	a80ff0ef          	jal	ra,80002e44 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:424
    MessagePipe[mySlot].holder = taskSlot;
80003bc8:	800207b7          	lui	a5,0x80020
80003bcc:	fe842683          	lw	a3,-24(s0)
80003bd0:	1d078713          	addi	a4,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
80003bd4:	24400793          	li	a5,580
80003bd8:	02f687b3          	mul	a5,a3,a5
80003bdc:	00f707b3          	add	a5,a4,a5
80003be0:	fe042703          	lw	a4,-32(s0)
80003be4:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:426

    MessagePipe[mySlot].header.header           = TaskList[taskSlot].TasksMap[taskID];
80003be8:	800216b7          	lui	a3,0x80021
80003bec:	fe042703          	lw	a4,-32(s0)
80003bf0:	00070793          	mv	a5,a4
80003bf4:	00479793          	slli	a5,a5,0x4
80003bf8:	40e787b3          	sub	a5,a5,a4
80003bfc:	00179793          	slli	a5,a5,0x1
80003c00:	fd842703          	lw	a4,-40(s0)
80003c04:	00e787b3          	add	a5,a5,a4
80003c08:	01478793          	addi	a5,a5,20
80003c0c:	00279713          	slli	a4,a5,0x2
80003c10:	28868793          	addi	a5,a3,648 # 80021288 <__stack_top+0xfffdfc98>
80003c14:	00f707b3          	add	a5,a4,a5
80003c18:	0007a703          	lw	a4,0(a5)
80003c1c:	800207b7          	lui	a5,0x80020
80003c20:	fe842603          	lw	a2,-24(s0)
80003c24:	1d078693          	addi	a3,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
80003c28:	24400793          	li	a5,580
80003c2c:	02f607b3          	mul	a5,a2,a5
80003c30:	00f687b3          	add	a5,a3,a5
80003c34:	00e7a623          	sw	a4,12(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:427
    MessagePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE + theMessage->length + 1;
80003c38:	fe442783          	lw	a5,-28(s0)
80003c3c:	0007a783          	lw	a5,0(a5)
80003c40:	00c78713          	addi	a4,a5,12
80003c44:	800207b7          	lui	a5,0x80020
80003c48:	fe842603          	lw	a2,-24(s0)
80003c4c:	1d078693          	addi	a3,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
80003c50:	24400793          	li	a5,580
80003c54:	02f607b3          	mul	a5,a2,a5
80003c58:	00f687b3          	add	a5,a3,a5
80003c5c:	00e7a823          	sw	a4,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:428
    MessagePipe[mySlot].header.service          = MESSAGE_DELIVERY;
80003c60:	800207b7          	lui	a5,0x80020
80003c64:	fe842683          	lw	a3,-24(s0)
80003c68:	1d078713          	addi	a4,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
80003c6c:	24400793          	li	a5,580
80003c70:	02f687b3          	mul	a5,a3,a5
80003c74:	00f707b3          	add	a5,a4,a5
80003c78:	02000713          	li	a4,32
80003c7c:	00e7aa23          	sw	a4,20(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:429
    MessagePipe[mySlot].header.application_id   = TaskList[taskSlot].AppID;
80003c80:	800217b7          	lui	a5,0x80021
80003c84:	fe042703          	lw	a4,-32(s0)
80003c88:	28878693          	addi	a3,a5,648 # 80021288 <__stack_top+0xfffdfc98>
80003c8c:	00070793          	mv	a5,a4
80003c90:	00479793          	slli	a5,a5,0x4
80003c94:	40e787b3          	sub	a5,a5,a4
80003c98:	00379793          	slli	a5,a5,0x3
80003c9c:	00f687b3          	add	a5,a3,a5
80003ca0:	0087a703          	lw	a4,8(a5)
80003ca4:	800207b7          	lui	a5,0x80020
80003ca8:	fe842603          	lw	a2,-24(s0)
80003cac:	1d078693          	addi	a3,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
80003cb0:	24400793          	li	a5,580
80003cb4:	02f607b3          	mul	a5,a2,a5
80003cb8:	00f687b3          	add	a5,a3,a5
80003cbc:	00e7ac23          	sw	a4,24(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:430
    MessagePipe[mySlot].header.producer_task    = TaskList[taskSlot].TaskID;
80003cc0:	800217b7          	lui	a5,0x80021
80003cc4:	fe042703          	lw	a4,-32(s0)
80003cc8:	28878693          	addi	a3,a5,648 # 80021288 <__stack_top+0xfffdfc98>
80003ccc:	00070793          	mv	a5,a4
80003cd0:	00479793          	slli	a5,a5,0x4
80003cd4:	40e787b3          	sub	a5,a5,a4
80003cd8:	00379793          	slli	a5,a5,0x3
80003cdc:	00f687b3          	add	a5,a3,a5
80003ce0:	0047a703          	lw	a4,4(a5)
80003ce4:	800207b7          	lui	a5,0x80020
80003ce8:	fe842603          	lw	a2,-24(s0)
80003cec:	1d078693          	addi	a3,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
80003cf0:	24400793          	li	a5,580
80003cf4:	02f607b3          	mul	a5,a2,a5
80003cf8:	00f687b3          	add	a5,a3,a5
80003cfc:	00e7ae23          	sw	a4,28(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:431
    MessagePipe[mySlot].header.destination_task = taskID;
80003d00:	800207b7          	lui	a5,0x80020
80003d04:	fe842683          	lw	a3,-24(s0)
80003d08:	1d078713          	addi	a4,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
80003d0c:	24400793          	li	a5,580
80003d10:	02f687b3          	mul	a5,a3,a5
80003d14:	00f707b3          	add	a5,a4,a5
80003d18:	fd842703          	lw	a4,-40(s0)
80003d1c:	02e7a023          	sw	a4,32(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:432
    MessagePipe[mySlot].msg.length              = theMessage->length;
80003d20:	fe442783          	lw	a5,-28(s0)
80003d24:	0007a703          	lw	a4,0(a5)
80003d28:	800207b7          	lui	a5,0x80020
80003d2c:	fe842603          	lw	a2,-24(s0)
80003d30:	24400693          	li	a3,580
80003d34:	02d606b3          	mul	a3,a2,a3
80003d38:	1d078793          	addi	a5,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
80003d3c:	00f687b3          	add	a5,a3,a5
80003d40:	04e7a023          	sw	a4,64(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:433
    for (i = 0; i < theMessage->length; i++){
80003d44:	fe042623          	sw	zero,-20(s0)
80003d48:	05c0006f          	j	80003da4 <API_SendMessage+0x25c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:434 (discriminator 3)
        MessagePipe[mySlot].msg.msg[i]          = theMessage->msg[i];
80003d4c:	fe442703          	lw	a4,-28(s0)
80003d50:	fec42783          	lw	a5,-20(s0)
80003d54:	00279793          	slli	a5,a5,0x2
80003d58:	00f707b3          	add	a5,a4,a5
80003d5c:	0047a683          	lw	a3,4(a5)
80003d60:	80020637          	lui	a2,0x80020
80003d64:	fe842703          	lw	a4,-24(s0)
80003d68:	00070793          	mv	a5,a4
80003d6c:	00379793          	slli	a5,a5,0x3
80003d70:	00e787b3          	add	a5,a5,a4
80003d74:	00479793          	slli	a5,a5,0x4
80003d78:	00e787b3          	add	a5,a5,a4
80003d7c:	fec42703          	lw	a4,-20(s0)
80003d80:	00e787b3          	add	a5,a5,a4
80003d84:	01078793          	addi	a5,a5,16
80003d88:	1d060713          	addi	a4,a2,464 # 800201d0 <__stack_top+0xfffdebe0>
80003d8c:	00279793          	slli	a5,a5,0x2
80003d90:	00f707b3          	add	a5,a4,a5
80003d94:	00d7a223          	sw	a3,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:433 (discriminator 3)
    for (i = 0; i < theMessage->length; i++){
80003d98:	fec42783          	lw	a5,-20(s0)
80003d9c:	00178793          	addi	a5,a5,1
80003da0:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:433 (discriminator 1)
80003da4:	fe442783          	lw	a5,-28(s0)
80003da8:	0007a783          	lw	a5,0(a5)
80003dac:	fec42703          	lw	a4,-20(s0)
80003db0:	f8f76ee3          	bltu	a4,a5,80003d4c <API_SendMessage+0x204>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:437
    }
    
    if (TaskList[taskSlot].PendingReq[taskID] == TRUE){
80003db4:	800216b7          	lui	a3,0x80021
80003db8:	fe042703          	lw	a4,-32(s0)
80003dbc:	00070793          	mv	a5,a4
80003dc0:	00479793          	slli	a5,a5,0x4
80003dc4:	40e787b3          	sub	a5,a5,a4
80003dc8:	00179793          	slli	a5,a5,0x1
80003dcc:	fd842703          	lw	a4,-40(s0)
80003dd0:	00e787b3          	add	a5,a5,a4
80003dd4:	00878793          	addi	a5,a5,8
80003dd8:	28868713          	addi	a4,a3,648 # 80021288 <__stack_top+0xfffdfc98>
80003ddc:	00279793          	slli	a5,a5,0x2
80003de0:	00f707b3          	add	a5,a4,a5
80003de4:	0047a703          	lw	a4,4(a5)
80003de8:	00100793          	li	a5,1
80003dec:	00f71863          	bne	a4,a5,80003dfc <API_SendMessage+0x2b4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:438
        API_PushSendQueue(MESSAGE, mySlot);
80003df0:	fe842583          	lw	a1,-24(s0)
80003df4:	20200537          	lui	a0,0x20200
80003df8:	9ddff0ef          	jal	ra,800037d4 <API_PushSendQueue>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:440
    }
    vPortExitCritical();
80003dfc:	ff0fd0ef          	jal	ra,800015ec <vPortExitCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:441
    return;
80003e00:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:442
}
80003e04:	02c12083          	lw	ra,44(sp)
80003e08:	02812403          	lw	s0,40(sp)
80003e0c:	03010113          	addi	sp,sp,48
80003e10:	00008067          	ret

80003e14 <API_SendFinishTask>:
API_SendFinishTask():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:444

void API_SendFinishTask(unsigned int task_id, unsigned int app_id){
80003e14:	fd010113          	addi	sp,sp,-48
80003e18:	02112623          	sw	ra,44(sp)
80003e1c:	02812423          	sw	s0,40(sp)
80003e20:	03010413          	addi	s0,sp,48
80003e24:	fca42e23          	sw	a0,-36(s0)
80003e28:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:447
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80003e2c:	4c4020ef          	jal	ra,800062f0 <API_GetServiceSlot>
80003e30:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:448
        if(mySlot == PIPE_FULL){ 
80003e34:	fec42703          	lw	a4,-20(s0)
80003e38:	fdfe07b7          	lui	a5,0xfdfe0
80003e3c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e80d>
80003e40:	00f71663          	bne	a4,a5,80003e4c <API_SendFinishTask+0x38>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:449
            vTaskDelay(1);
80003e44:	00100513          	li	a0,1
80003e48:	b00fe0ef          	jal	ra,80002148 <vTaskDelay>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:451
        }
    }while(mySlot == PIPE_FULL);
80003e4c:	fec42703          	lw	a4,-20(s0)
80003e50:	fdfe07b7          	lui	a5,0xfdfe0
80003e54:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e80d>
80003e58:	fcf70ae3          	beq	a4,a5,80003e2c <API_SendFinishTask+0x18>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:453

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80003e5c:	800207b7          	lui	a5,0x80020
80003e60:	fec42703          	lw	a4,-20(s0)
80003e64:	06c78693          	addi	a3,a5,108 # 8002006c <__stack_top+0xfffdea7c>
80003e68:	00070793          	mv	a5,a4
80003e6c:	00479793          	slli	a5,a5,0x4
80003e70:	40e787b3          	sub	a5,a5,a4
80003e74:	00279793          	slli	a5,a5,0x2
80003e78:	00f687b3          	add	a5,a3,a5
80003e7c:	feff0737          	lui	a4,0xfeff0
80003e80:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efae90e>
80003e84:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:455

    ServicePipe[mySlot].header.header           = makeAddress(0, 0);
80003e88:	00000593          	li	a1,0
80003e8c:	00000513          	li	a0,0
80003e90:	905ff0ef          	jal	ra,80003794 <makeAddress>
80003e94:	00050613          	mv	a2,a0
80003e98:	800207b7          	lui	a5,0x80020
80003e9c:	fec42703          	lw	a4,-20(s0)
80003ea0:	06c78693          	addi	a3,a5,108 # 8002006c <__stack_top+0xfffdea7c>
80003ea4:	00070793          	mv	a5,a4
80003ea8:	00479793          	slli	a5,a5,0x4
80003eac:	40e787b3          	sub	a5,a5,a4
80003eb0:	00279793          	slli	a5,a5,0x2
80003eb4:	00f687b3          	add	a5,a3,a5
80003eb8:	00c7a423          	sw	a2,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:456
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80003ebc:	800207b7          	lui	a5,0x80020
80003ec0:	fec42703          	lw	a4,-20(s0)
80003ec4:	06c78693          	addi	a3,a5,108 # 8002006c <__stack_top+0xfffdea7c>
80003ec8:	00070793          	mv	a5,a4
80003ecc:	00479793          	slli	a5,a5,0x4
80003ed0:	40e787b3          	sub	a5,a5,a4
80003ed4:	00279793          	slli	a5,a5,0x2
80003ed8:	00f687b3          	add	a5,a3,a5
80003edc:	00b00713          	li	a4,11
80003ee0:	00e7a623          	sw	a4,12(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:457
    ServicePipe[mySlot].header.service          = TASK_FINISH;
80003ee4:	800207b7          	lui	a5,0x80020
80003ee8:	fec42703          	lw	a4,-20(s0)
80003eec:	06c78693          	addi	a3,a5,108 # 8002006c <__stack_top+0xfffdea7c>
80003ef0:	00070793          	mv	a5,a4
80003ef4:	00479793          	slli	a5,a5,0x4
80003ef8:	40e787b3          	sub	a5,a5,a4
80003efc:	00279793          	slli	a5,a5,0x2
80003f00:	00f687b3          	add	a5,a3,a5
80003f04:	50000713          	li	a4,1280
80003f08:	00e7a823          	sw	a4,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:458
    ServicePipe[mySlot].header.task_id          = task_id;
80003f0c:	800207b7          	lui	a5,0x80020
80003f10:	fec42703          	lw	a4,-20(s0)
80003f14:	06c78693          	addi	a3,a5,108 # 8002006c <__stack_top+0xfffdea7c>
80003f18:	00070793          	mv	a5,a4
80003f1c:	00479793          	slli	a5,a5,0x4
80003f20:	40e787b3          	sub	a5,a5,a4
80003f24:	00279793          	slli	a5,a5,0x2
80003f28:	00f687b3          	add	a5,a3,a5
80003f2c:	fdc42703          	lw	a4,-36(s0)
80003f30:	00e7aa23          	sw	a4,20(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:459
    ServicePipe[mySlot].header.task_app_id      = app_id;
80003f34:	800207b7          	lui	a5,0x80020
80003f38:	fec42703          	lw	a4,-20(s0)
80003f3c:	06c78693          	addi	a3,a5,108 # 8002006c <__stack_top+0xfffdea7c>
80003f40:	00070793          	mv	a5,a4
80003f44:	00479793          	slli	a5,a5,0x4
80003f48:	40e787b3          	sub	a5,a5,a4
80003f4c:	00279793          	slli	a5,a5,0x2
80003f50:	00f687b3          	add	a5,a3,a5
80003f54:	fd842703          	lw	a4,-40(s0)
80003f58:	02e7a223          	sw	a4,36(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:460
    ServicePipe[mySlot].header.task_dest_addr   = ProcessorAddr;
80003f5c:	800217b7          	lui	a5,0x80021
80003f60:	5e87a683          	lw	a3,1512(a5) # 800215e8 <__stack_top+0xfffdfff8>
80003f64:	800207b7          	lui	a5,0x80020
80003f68:	fec42703          	lw	a4,-20(s0)
80003f6c:	06c78613          	addi	a2,a5,108 # 8002006c <__stack_top+0xfffdea7c>
80003f70:	00070793          	mv	a5,a4
80003f74:	00479793          	slli	a5,a5,0x4
80003f78:	40e787b3          	sub	a5,a5,a4
80003f7c:	00279793          	slli	a5,a5,0x2
80003f80:	00f607b3          	add	a5,a2,a5
80003f84:	02d7ac23          	sw	a3,56(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:461
    API_PushSendQueue(SERVICE, mySlot);
80003f88:	fec42583          	lw	a1,-20(s0)
80003f8c:	10100537          	lui	a0,0x10100
80003f90:	845ff0ef          	jal	ra,800037d4 <API_PushSendQueue>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:462
    return;    
80003f94:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:463
}
80003f98:	02c12083          	lw	ra,44(sp)
80003f9c:	02812403          	lw	s0,40(sp)
80003fa0:	03010113          	addi	sp,sp,48
80003fa4:	00008067          	ret

80003fa8 <API_SendMessageReq>:
API_SendMessageReq():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:465

void API_SendMessageReq(unsigned int addr, unsigned int taskID){
80003fa8:	fd010113          	addi	sp,sp,-48
80003fac:	02112623          	sw	ra,44(sp)
80003fb0:	02812423          	sw	s0,40(sp)
80003fb4:	03010413          	addi	s0,sp,48
80003fb8:	fca42e23          	sw	a0,-36(s0)
80003fbc:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:470
    unsigned int taskSlot;
    unsigned int mySlot;

    // Update task info
    taskSlot = API_GetCurrentTaskSlot();
80003fc0:	379010ef          	jal	ra,80005b38 <API_GetCurrentTaskSlot>
80003fc4:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:471
    TaskList[taskSlot].waitingMsg = TRUE;
80003fc8:	800216b7          	lui	a3,0x80021
80003fcc:	fec42703          	lw	a4,-20(s0)
80003fd0:	00070793          	mv	a5,a4
80003fd4:	00479793          	slli	a5,a5,0x4
80003fd8:	40e787b3          	sub	a5,a5,a4
80003fdc:	00379793          	slli	a5,a5,0x3
80003fe0:	28868713          	addi	a4,a3,648 # 80021288 <__stack_top+0xfffdfc98>
80003fe4:	00e787b3          	add	a5,a5,a4
80003fe8:	00100713          	li	a4,1
80003fec:	00e7a823          	sw	a4,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:472
    TaskList[taskSlot].MsgToReceive = addr;
80003ff0:	800217b7          	lui	a5,0x80021
80003ff4:	fec42703          	lw	a4,-20(s0)
80003ff8:	28878693          	addi	a3,a5,648 # 80021288 <__stack_top+0xfffdfc98>
80003ffc:	00070793          	mv	a5,a4
80004000:	00479793          	slli	a5,a5,0x4
80004004:	40e787b3          	sub	a5,a5,a4
80004008:	00379793          	slli	a5,a5,0x3
8000400c:	00f687b3          	add	a5,a3,a5
80004010:	fdc42703          	lw	a4,-36(s0)
80004014:	00e7aa23          	sw	a4,20(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:477
    //printsv("API_SendMessageReq addr: ", addr);

    // Sends the message request
    do{
        mySlot = API_GetServiceSlot();
80004018:	2d8020ef          	jal	ra,800062f0 <API_GetServiceSlot>
8000401c:	fea42423          	sw	a0,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:478
        if(mySlot == PIPE_FULL) vTaskDelay(1);
80004020:	fe842703          	lw	a4,-24(s0)
80004024:	fdfe07b7          	lui	a5,0xfdfe0
80004028:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e80d>
8000402c:	00f71663          	bne	a4,a5,80004038 <API_SendMessageReq+0x90>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:478 (discriminator 1)
80004030:	00100513          	li	a0,1
80004034:	914fe0ef          	jal	ra,80002148 <vTaskDelay>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:479
    }while(mySlot == PIPE_FULL);
80004038:	fe842703          	lw	a4,-24(s0)
8000403c:	fdfe07b7          	lui	a5,0xfdfe0
80004040:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e80d>
80004044:	fcf70ae3          	beq	a4,a5,80004018 <API_SendMessageReq+0x70>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:481

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80004048:	800207b7          	lui	a5,0x80020
8000404c:	fe842703          	lw	a4,-24(s0)
80004050:	06c78693          	addi	a3,a5,108 # 8002006c <__stack_top+0xfffdea7c>
80004054:	00070793          	mv	a5,a4
80004058:	00479793          	slli	a5,a5,0x4
8000405c:	40e787b3          	sub	a5,a5,a4
80004060:	00279793          	slli	a5,a5,0x2
80004064:	00f687b3          	add	a5,a3,a5
80004068:	feff0737          	lui	a4,0xfeff0
8000406c:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efae90e>
80004070:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:483

    ServicePipe[mySlot].header.header           = TaskList[taskSlot].TasksMap[taskID];
80004074:	800216b7          	lui	a3,0x80021
80004078:	fec42703          	lw	a4,-20(s0)
8000407c:	00070793          	mv	a5,a4
80004080:	00479793          	slli	a5,a5,0x4
80004084:	40e787b3          	sub	a5,a5,a4
80004088:	00179793          	slli	a5,a5,0x1
8000408c:	fd842703          	lw	a4,-40(s0)
80004090:	00e787b3          	add	a5,a5,a4
80004094:	01478793          	addi	a5,a5,20
80004098:	00279713          	slli	a4,a5,0x2
8000409c:	28868793          	addi	a5,a3,648 # 80021288 <__stack_top+0xfffdfc98>
800040a0:	00f707b3          	add	a5,a4,a5
800040a4:	0007a683          	lw	a3,0(a5)
800040a8:	800207b7          	lui	a5,0x80020
800040ac:	fe842703          	lw	a4,-24(s0)
800040b0:	06c78613          	addi	a2,a5,108 # 8002006c <__stack_top+0xfffdea7c>
800040b4:	00070793          	mv	a5,a4
800040b8:	00479793          	slli	a5,a5,0x4
800040bc:	40e787b3          	sub	a5,a5,a4
800040c0:	00279793          	slli	a5,a5,0x2
800040c4:	00f607b3          	add	a5,a2,a5
800040c8:	00d7a423          	sw	a3,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:484
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
800040cc:	800207b7          	lui	a5,0x80020
800040d0:	fe842703          	lw	a4,-24(s0)
800040d4:	06c78693          	addi	a3,a5,108 # 8002006c <__stack_top+0xfffdea7c>
800040d8:	00070793          	mv	a5,a4
800040dc:	00479793          	slli	a5,a5,0x4
800040e0:	40e787b3          	sub	a5,a5,a4
800040e4:	00279793          	slli	a5,a5,0x2
800040e8:	00f687b3          	add	a5,a3,a5
800040ec:	00b00713          	li	a4,11
800040f0:	00e7a623          	sw	a4,12(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:485
    ServicePipe[mySlot].header.service          = MESSAGE_REQUEST;
800040f4:	800207b7          	lui	a5,0x80020
800040f8:	fe842703          	lw	a4,-24(s0)
800040fc:	06c78693          	addi	a3,a5,108 # 8002006c <__stack_top+0xfffdea7c>
80004100:	00070793          	mv	a5,a4
80004104:	00479793          	slli	a5,a5,0x4
80004108:	40e787b3          	sub	a5,a5,a4
8000410c:	00279793          	slli	a5,a5,0x2
80004110:	00f687b3          	add	a5,a3,a5
80004114:	01000713          	li	a4,16
80004118:	00e7a823          	sw	a4,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:486
    ServicePipe[mySlot].header.task_id          = TaskList[taskSlot].TaskID;
8000411c:	800217b7          	lui	a5,0x80021
80004120:	fec42703          	lw	a4,-20(s0)
80004124:	28878693          	addi	a3,a5,648 # 80021288 <__stack_top+0xfffdfc98>
80004128:	00070793          	mv	a5,a4
8000412c:	00479793          	slli	a5,a5,0x4
80004130:	40e787b3          	sub	a5,a5,a4
80004134:	00379793          	slli	a5,a5,0x3
80004138:	00f687b3          	add	a5,a3,a5
8000413c:	0047a683          	lw	a3,4(a5)
80004140:	800207b7          	lui	a5,0x80020
80004144:	fe842703          	lw	a4,-24(s0)
80004148:	06c78613          	addi	a2,a5,108 # 8002006c <__stack_top+0xfffdea7c>
8000414c:	00070793          	mv	a5,a4
80004150:	00479793          	slli	a5,a5,0x4
80004154:	40e787b3          	sub	a5,a5,a4
80004158:	00279793          	slli	a5,a5,0x2
8000415c:	00f607b3          	add	a5,a2,a5
80004160:	00d7aa23          	sw	a3,20(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:487
    ServicePipe[mySlot].header.task_app_id      = TaskList[taskSlot].AppID;
80004164:	800217b7          	lui	a5,0x80021
80004168:	fec42703          	lw	a4,-20(s0)
8000416c:	28878693          	addi	a3,a5,648 # 80021288 <__stack_top+0xfffdfc98>
80004170:	00070793          	mv	a5,a4
80004174:	00479793          	slli	a5,a5,0x4
80004178:	40e787b3          	sub	a5,a5,a4
8000417c:	00379793          	slli	a5,a5,0x3
80004180:	00f687b3          	add	a5,a3,a5
80004184:	0087a683          	lw	a3,8(a5)
80004188:	800207b7          	lui	a5,0x80020
8000418c:	fe842703          	lw	a4,-24(s0)
80004190:	06c78613          	addi	a2,a5,108 # 8002006c <__stack_top+0xfffdea7c>
80004194:	00070793          	mv	a5,a4
80004198:	00479793          	slli	a5,a5,0x4
8000419c:	40e787b3          	sub	a5,a5,a4
800041a0:	00279793          	slli	a5,a5,0x2
800041a4:	00f607b3          	add	a5,a2,a5
800041a8:	02d7a223          	sw	a3,36(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:488
    ServicePipe[mySlot].header.producer_task_id = taskID;
800041ac:	800207b7          	lui	a5,0x80020
800041b0:	fe842703          	lw	a4,-24(s0)
800041b4:	06c78693          	addi	a3,a5,108 # 8002006c <__stack_top+0xfffdea7c>
800041b8:	00070793          	mv	a5,a4
800041bc:	00479793          	slli	a5,a5,0x4
800041c0:	40e787b3          	sub	a5,a5,a4
800041c4:	00279793          	slli	a5,a5,0x2
800041c8:	00f687b3          	add	a5,a3,a5
800041cc:	fd842703          	lw	a4,-40(s0)
800041d0:	00e7ae23          	sw	a4,28(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:490

    API_PushSendQueue(SERVICE, mySlot);
800041d4:	fe842583          	lw	a1,-24(s0)
800041d8:	10100537          	lui	a0,0x10100
800041dc:	df8ff0ef          	jal	ra,800037d4 <API_PushSendQueue>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:491
    prints("Esperando Mensagem!\n");
800041e0:	800077b7          	lui	a5,0x80007
800041e4:	bb078513          	addi	a0,a5,-1104 # 80006bb0 <__stack_top+0xfffc55c0>
800041e8:	bb1fe0ef          	jal	ra,80002d98 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:493
    // Bloquear a tarefa!
    while(TaskList[taskSlot].waitingMsg == TRUE){ 
800041ec:	02c0006f          	j	80004218 <API_SendMessageReq+0x270>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:494
        printsvsv("taskslot ", taskSlot, " esperando mensagem ", 0);
800041f0:	fec42703          	lw	a4,-20(s0)
800041f4:	00000693          	li	a3,0
800041f8:	800077b7          	lui	a5,0x80007
800041fc:	bc878613          	addi	a2,a5,-1080 # 80006bc8 <__stack_top+0xfffc55d8>
80004200:	00070593          	mv	a1,a4
80004204:	800077b7          	lui	a5,0x80007
80004208:	be078513          	addi	a0,a5,-1056 # 80006be0 <__stack_top+0xfffc55f0>
8000420c:	c81fe0ef          	jal	ra,80002e8c <printsvsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:495
        vTaskDelay(1); 
80004210:	00100513          	li	a0,1
80004214:	f35fd0ef          	jal	ra,80002148 <vTaskDelay>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:493
    while(TaskList[taskSlot].waitingMsg == TRUE){ 
80004218:	800216b7          	lui	a3,0x80021
8000421c:	fec42703          	lw	a4,-20(s0)
80004220:	00070793          	mv	a5,a4
80004224:	00479793          	slli	a5,a5,0x4
80004228:	40e787b3          	sub	a5,a5,a4
8000422c:	00379793          	slli	a5,a5,0x3
80004230:	28868713          	addi	a4,a3,648 # 80021288 <__stack_top+0xfffdfc98>
80004234:	00e787b3          	add	a5,a5,a4
80004238:	0107a703          	lw	a4,16(a5)
8000423c:	00100793          	li	a5,1
80004240:	faf708e3          	beq	a4,a5,800041f0 <API_SendMessageReq+0x248>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:497
    }
    prints("Mensagem Recebida!\n");
80004244:	800077b7          	lui	a5,0x80007
80004248:	bec78513          	addi	a0,a5,-1044 # 80006bec <__stack_top+0xfffc55fc>
8000424c:	b4dfe0ef          	jal	ra,80002d98 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:498
    return;
80004250:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:499
}
80004254:	02c12083          	lw	ra,44(sp)
80004258:	02812403          	lw	s0,40(sp)
8000425c:	03010113          	addi	sp,sp,48
80004260:	00008067          	ret

80004264 <API_CheckMessagePipe>:
API_CheckMessagePipe():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:501

unsigned int API_CheckMessagePipe(unsigned int requester_task_id, unsigned int task_app_id){
80004264:	fd010113          	addi	sp,sp,-48
80004268:	02812623          	sw	s0,44(sp)
8000426c:	03010413          	addi	s0,sp,48
80004270:	fca42e23          	sw	a0,-36(s0)
80004274:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:503
    unsigned int i;
    unsigned int sel = ERRO;
80004278:	fff00793          	li	a5,-1
8000427c:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:504
    unsigned int smallID = 268435455;
80004280:	100007b7          	lui	a5,0x10000
80004284:	fff78793          	addi	a5,a5,-1 # fffffff <RAM_SIZE+0xff7ffff>
80004288:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:505
    for (i = 0; i < PIPE_SIZE; i++){
8000428c:	fe042623          	sw	zero,-20(s0)
80004290:	0c80006f          	j	80004358 <API_CheckMessagePipe+0xf4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:506
        if(MessagePipe[i].status == PIPE_OCCUPIED){
80004294:	800207b7          	lui	a5,0x80020
80004298:	fec42683          	lw	a3,-20(s0)
8000429c:	24400713          	li	a4,580
800042a0:	02e68733          	mul	a4,a3,a4
800042a4:	1d078793          	addi	a5,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
800042a8:	00f707b3          	add	a5,a4,a5
800042ac:	0007a703          	lw	a4,0(a5)
800042b0:	00100793          	li	a5,1
800042b4:	08f71c63          	bne	a4,a5,8000434c <API_CheckMessagePipe+0xe8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:507
            if(MessagePipe[i].header.application_id == task_app_id){
800042b8:	800207b7          	lui	a5,0x80020
800042bc:	fec42683          	lw	a3,-20(s0)
800042c0:	1d078713          	addi	a4,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
800042c4:	24400793          	li	a5,580
800042c8:	02f687b3          	mul	a5,a3,a5
800042cc:	00f707b3          	add	a5,a4,a5
800042d0:	0187a783          	lw	a5,24(a5)
800042d4:	fd842703          	lw	a4,-40(s0)
800042d8:	06f71a63          	bne	a4,a5,8000434c <API_CheckMessagePipe+0xe8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:508
                if(MessagePipe[i].header.destination_task == requester_task_id){
800042dc:	800207b7          	lui	a5,0x80020
800042e0:	fec42683          	lw	a3,-20(s0)
800042e4:	1d078713          	addi	a4,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
800042e8:	24400793          	li	a5,580
800042ec:	02f687b3          	mul	a5,a3,a5
800042f0:	00f707b3          	add	a5,a4,a5
800042f4:	0207a783          	lw	a5,32(a5)
800042f8:	fdc42703          	lw	a4,-36(s0)
800042fc:	04f71863          	bne	a4,a5,8000434c <API_CheckMessagePipe+0xe8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:509
                    if(MessagePipe[i].msgID < smallID){
80004300:	800207b7          	lui	a5,0x80020
80004304:	fec42683          	lw	a3,-20(s0)
80004308:	1d078713          	addi	a4,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
8000430c:	24400793          	li	a5,580
80004310:	02f687b3          	mul	a5,a3,a5
80004314:	00f707b3          	add	a5,a4,a5
80004318:	0087a783          	lw	a5,8(a5)
8000431c:	fe442703          	lw	a4,-28(s0)
80004320:	02e7f663          	bleu	a4,a5,8000434c <API_CheckMessagePipe+0xe8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:510
                        smallID = MessagePipe[i].msgID;
80004324:	800207b7          	lui	a5,0x80020
80004328:	fec42683          	lw	a3,-20(s0)
8000432c:	1d078713          	addi	a4,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
80004330:	24400793          	li	a5,580
80004334:	02f687b3          	mul	a5,a3,a5
80004338:	00f707b3          	add	a5,a4,a5
8000433c:	0087a783          	lw	a5,8(a5)
80004340:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:511
                        sel = i;
80004344:	fec42783          	lw	a5,-20(s0)
80004348:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:505 (discriminator 2)
    for (i = 0; i < PIPE_SIZE; i++){
8000434c:	fec42783          	lw	a5,-20(s0)
80004350:	00178793          	addi	a5,a5,1
80004354:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:505 (discriminator 1)
80004358:	fec42703          	lw	a4,-20(s0)
8000435c:	00300793          	li	a5,3
80004360:	f2e7fae3          	bleu	a4,a5,80004294 <API_CheckMessagePipe+0x30>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:517
                    }
                }
            }
        }
    }
    if(sel != ERRO){
80004364:	fe842703          	lw	a4,-24(s0)
80004368:	fff00793          	li	a5,-1
8000436c:	02f70063          	beq	a4,a5,8000438c <API_CheckMessagePipe+0x128>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:518
        MessagePipe[sel].status == PIPE_TRANSMITTING;
80004370:	800207b7          	lui	a5,0x80020
80004374:	fe842683          	lw	a3,-24(s0)
80004378:	24400713          	li	a4,580
8000437c:	02e68733          	mul	a4,a3,a4
80004380:	1d078793          	addi	a5,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
80004384:	00f707b3          	add	a5,a4,a5
80004388:	0007a783          	lw	a5,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:521
    }
    //printsv("returning sel: ", sel);
    return sel;
8000438c:	fe842783          	lw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:522
}
80004390:	00078513          	mv	a0,a5
80004394:	02c12403          	lw	s0,44(sp)
80004398:	03010113          	addi	sp,sp,48
8000439c:	00008067          	ret

800043a0 <API_AddPendingReq>:
API_AddPendingReq():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:524

void API_AddPendingReq(unsigned int requester_task_id, unsigned int task_app_id, unsigned int producer_task_id){
800043a0:	fd010113          	addi	sp,sp,-48
800043a4:	02112623          	sw	ra,44(sp)
800043a8:	02812423          	sw	s0,40(sp)
800043ac:	03010413          	addi	s0,sp,48
800043b0:	fca42e23          	sw	a0,-36(s0)
800043b4:	fcb42c23          	sw	a1,-40(s0)
800043b8:	fcc42a23          	sw	a2,-44(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:525
    unsigned int slot = API_GetTaskSlot(producer_task_id, task_app_id);
800043bc:	fd842583          	lw	a1,-40(s0)
800043c0:	fd442503          	lw	a0,-44(s0)
800043c4:	22d010ef          	jal	ra,80005df0 <API_GetTaskSlot>
800043c8:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:526
    TaskList[slot].PendingReq[requester_task_id] = TRUE;
800043cc:	800216b7          	lui	a3,0x80021
800043d0:	fec42703          	lw	a4,-20(s0)
800043d4:	00070793          	mv	a5,a4
800043d8:	00479793          	slli	a5,a5,0x4
800043dc:	40e787b3          	sub	a5,a5,a4
800043e0:	00179793          	slli	a5,a5,0x1
800043e4:	fdc42703          	lw	a4,-36(s0)
800043e8:	00e787b3          	add	a5,a5,a4
800043ec:	00878793          	addi	a5,a5,8
800043f0:	28868713          	addi	a4,a3,648 # 80021288 <__stack_top+0xfffdfc98>
800043f4:	00279793          	slli	a5,a5,0x2
800043f8:	00f707b3          	add	a5,a4,a5
800043fc:	00100713          	li	a4,1
80004400:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:527
    return;
80004404:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/chronos.c:528
}
80004408:	02c12083          	lw	ra,44(sp)
8000440c:	02812403          	lw	s0,40(sp)
80004410:	03010113          	addi	sp,sp,48
80004414:	00008067          	ret

80004418 <API_RepositoryWakeUp>:
API_RepositoryWakeUp():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:10
#include "packet.h"
#include "services.h"

////////////////////////////////////////////////////////////
// Informs the Repository that the GLOBALMASTER is ready to receive the application info
void API_RepositoryWakeUp(){
80004418:	fe010113          	addi	sp,sp,-32
8000441c:	00112e23          	sw	ra,28(sp)
80004420:	00812c23          	sw	s0,24(sp)
80004424:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:13
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80004428:	6c9010ef          	jal	ra,800062f0 <API_GetServiceSlot>
8000442c:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:14
        if(mySlot == PIPE_FULL) vTaskDelay(1);
80004430:	fec42703          	lw	a4,-20(s0)
80004434:	fdfe07b7          	lui	a5,0xfdfe0
80004438:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e80d>
8000443c:	00f71663          	bne	a4,a5,80004448 <API_RepositoryWakeUp+0x30>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:14 (discriminator 1)
80004440:	00100513          	li	a0,1
80004444:	d05fd0ef          	jal	ra,80002148 <vTaskDelay>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:15
    }while(mySlot == PIPE_FULL);
80004448:	fec42703          	lw	a4,-20(s0)
8000444c:	fdfe07b7          	lui	a5,0xfdfe0
80004450:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e80d>
80004454:	fcf70ae3          	beq	a4,a5,80004428 <API_RepositoryWakeUp+0x10>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:18
    //printsv("I got a free service slot!! -> ", mySlot);

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80004458:	800207b7          	lui	a5,0x80020
8000445c:	fec42703          	lw	a4,-20(s0)
80004460:	06c78693          	addi	a3,a5,108 # 8002006c <__stack_top+0xfffdea7c>
80004464:	00070793          	mv	a5,a4
80004468:	00479793          	slli	a5,a5,0x4
8000446c:	40e787b3          	sub	a5,a5,a4
80004470:	00279793          	slli	a5,a5,0x2
80004474:	00f687b3          	add	a5,a3,a5
80004478:	feff0737          	lui	a4,0xfeff0
8000447c:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efae90e>
80004480:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:20

    ServicePipe[mySlot].header.header       = makeAddress(0, 0) | PERIPH_SOUTH;
80004484:	00000593          	li	a1,0
80004488:	00000513          	li	a0,0
8000448c:	b08ff0ef          	jal	ra,80003794 <makeAddress>
80004490:	00050713          	mv	a4,a0
80004494:	000407b7          	lui	a5,0x40
80004498:	00f766b3          	or	a3,a4,a5
8000449c:	800207b7          	lui	a5,0x80020
800044a0:	fec42703          	lw	a4,-20(s0)
800044a4:	06c78613          	addi	a2,a5,108 # 8002006c <__stack_top+0xfffdea7c>
800044a8:	00070793          	mv	a5,a4
800044ac:	00479793          	slli	a5,a5,0x4
800044b0:	40e787b3          	sub	a5,a5,a4
800044b4:	00279793          	slli	a5,a5,0x2
800044b8:	00f607b3          	add	a5,a2,a5
800044bc:	00d7a423          	sw	a3,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:21
    ServicePipe[mySlot].header.payload_size = PKT_SERVICE_SIZE;
800044c0:	800207b7          	lui	a5,0x80020
800044c4:	fec42703          	lw	a4,-20(s0)
800044c8:	06c78693          	addi	a3,a5,108 # 8002006c <__stack_top+0xfffdea7c>
800044cc:	00070793          	mv	a5,a4
800044d0:	00479793          	slli	a5,a5,0x4
800044d4:	40e787b3          	sub	a5,a5,a4
800044d8:	00279793          	slli	a5,a5,0x2
800044dc:	00f687b3          	add	a5,a3,a5
800044e0:	00b00713          	li	a4,11
800044e4:	00e7a623          	sw	a4,12(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:22
    ServicePipe[mySlot].header.service      = REPOSITORY_WAKEUP;
800044e8:	800207b7          	lui	a5,0x80020
800044ec:	fec42703          	lw	a4,-20(s0)
800044f0:	06c78693          	addi	a3,a5,108 # 8002006c <__stack_top+0xfffdea7c>
800044f4:	00070793          	mv	a5,a4
800044f8:	00479793          	slli	a5,a5,0x4
800044fc:	40e787b3          	sub	a5,a5,a4
80004500:	00279793          	slli	a5,a5,0x2
80004504:	00f687b3          	add	a5,a3,a5
80004508:	10000713          	li	a4,256
8000450c:	00e7a823          	sw	a4,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:24

    API_PushSendQueue(SERVICE, mySlot);
80004510:	fec42583          	lw	a1,-20(s0)
80004514:	10100537          	lui	a0,0x10100
80004518:	abcff0ef          	jal	ra,800037d4 <API_PushSendQueue>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:25
    return;    
8000451c:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:26
}
80004520:	01c12083          	lw	ra,28(sp)
80004524:	01812403          	lw	s0,24(sp)
80004528:	02010113          	addi	sp,sp,32
8000452c:	00008067          	ret

80004530 <API_AddApplication>:
API_AddApplication():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:30

////////////////////////////////////////////////////////////
// Add one Application in the Execution Queue
void API_AddApplication(unsigned int appID, unsigned int appPeriod, unsigned int appExec, unsigned int appNTasks){
80004530:	fd010113          	addi	sp,sp,-48
80004534:	02112623          	sw	ra,44(sp)
80004538:	02812423          	sw	s0,40(sp)
8000453c:	03010413          	addi	s0,sp,48
80004540:	fca42e23          	sw	a0,-36(s0)
80004544:	fcb42c23          	sw	a1,-40(s0)
80004548:	fcc42a23          	sw	a2,-44(s0)
8000454c:	fcd42823          	sw	a3,-48(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:31
    int slot = API_GetApplicationFreeSlot();
80004550:	1c4000ef          	jal	ra,80004714 <API_GetApplicationFreeSlot>
80004554:	00050793          	mv	a5,a0
80004558:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:32
    applications[slot].occupied = TRUE;
8000455c:	800216b7          	lui	a3,0x80021
80004560:	fec42703          	lw	a4,-20(s0)
80004564:	00070793          	mv	a5,a4
80004568:	00279793          	slli	a5,a5,0x2
8000456c:	00e787b3          	add	a5,a5,a4
80004570:	00579793          	slli	a5,a5,0x5
80004574:	b0868713          	addi	a4,a3,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004578:	00e787b3          	add	a5,a5,a4
8000457c:	00100713          	li	a4,1
80004580:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:33
    applications[slot].appID = appID;
80004584:	800217b7          	lui	a5,0x80021
80004588:	fec42703          	lw	a4,-20(s0)
8000458c:	b0878693          	addi	a3,a5,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004590:	00070793          	mv	a5,a4
80004594:	00279793          	slli	a5,a5,0x2
80004598:	00e787b3          	add	a5,a5,a4
8000459c:	00579793          	slli	a5,a5,0x5
800045a0:	00f687b3          	add	a5,a3,a5
800045a4:	fdc42703          	lw	a4,-36(s0)
800045a8:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:34
    applications[slot].appPeriod = appPeriod;
800045ac:	800217b7          	lui	a5,0x80021
800045b0:	fec42703          	lw	a4,-20(s0)
800045b4:	b0878693          	addi	a3,a5,-1272 # 80020b08 <__stack_top+0xfffdf518>
800045b8:	00070793          	mv	a5,a4
800045bc:	00279793          	slli	a5,a5,0x2
800045c0:	00e787b3          	add	a5,a5,a4
800045c4:	00579793          	slli	a5,a5,0x5
800045c8:	00f687b3          	add	a5,a3,a5
800045cc:	fd842703          	lw	a4,-40(s0)
800045d0:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:35
    applications[slot].appExec = appExec;
800045d4:	800217b7          	lui	a5,0x80021
800045d8:	fec42703          	lw	a4,-20(s0)
800045dc:	b0878693          	addi	a3,a5,-1272 # 80020b08 <__stack_top+0xfffdf518>
800045e0:	00070793          	mv	a5,a4
800045e4:	00279793          	slli	a5,a5,0x2
800045e8:	00e787b3          	add	a5,a5,a4
800045ec:	00579793          	slli	a5,a5,0x5
800045f0:	00f687b3          	add	a5,a3,a5
800045f4:	fd442703          	lw	a4,-44(s0)
800045f8:	00e7a623          	sw	a4,12(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:36
    applications[slot].numTasks = appNTasks;
800045fc:	800216b7          	lui	a3,0x80021
80004600:	fec42703          	lw	a4,-20(s0)
80004604:	00070793          	mv	a5,a4
80004608:	00279793          	slli	a5,a5,0x2
8000460c:	00e787b3          	add	a5,a5,a4
80004610:	00579793          	slli	a5,a5,0x5
80004614:	b0868713          	addi	a4,a3,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004618:	00e787b3          	add	a5,a5,a4
8000461c:	fd042703          	lw	a4,-48(s0)
80004620:	00e7a823          	sw	a4,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:37
    applications[slot].nextRun = xTaskGetTickCount() + appPeriod;
80004624:	dc1fd0ef          	jal	ra,800023e4 <xTaskGetTickCount>
80004628:	00050713          	mv	a4,a0
8000462c:	fd842783          	lw	a5,-40(s0)
80004630:	00f706b3          	add	a3,a4,a5
80004634:	800217b7          	lui	a5,0x80021
80004638:	fec42703          	lw	a4,-20(s0)
8000463c:	b0878613          	addi	a2,a5,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004640:	00070793          	mv	a5,a4
80004644:	00279793          	slli	a5,a5,0x2
80004648:	00e787b3          	add	a5,a5,a4
8000464c:	00579793          	slli	a5,a5,0x5
80004650:	00f607b3          	add	a5,a2,a5
80004654:	08d7a623          	sw	a3,140(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:38
    applications[slot].executed = 0;
80004658:	800216b7          	lui	a3,0x80021
8000465c:	fec42703          	lw	a4,-20(s0)
80004660:	00070793          	mv	a5,a4
80004664:	00279793          	slli	a5,a5,0x2
80004668:	00e787b3          	add	a5,a5,a4
8000466c:	00579793          	slli	a5,a5,0x5
80004670:	b0868713          	addi	a4,a3,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004674:	00e787b3          	add	a5,a5,a4
80004678:	0807a823          	sw	zero,144(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:39
    applications[slot].lastStart = -1;
8000467c:	800217b7          	lui	a5,0x80021
80004680:	fec42703          	lw	a4,-20(s0)
80004684:	b0878693          	addi	a3,a5,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004688:	00070793          	mv	a5,a4
8000468c:	00279793          	slli	a5,a5,0x2
80004690:	00e787b3          	add	a5,a5,a4
80004694:	00579793          	slli	a5,a5,0x5
80004698:	00f687b3          	add	a5,a3,a5
8000469c:	fff00713          	li	a4,-1
800046a0:	08e7aa23          	sw	a4,148(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:40
    applications[slot].finishedTasks = 0;
800046a4:	800217b7          	lui	a5,0x80021
800046a8:	fec42703          	lw	a4,-20(s0)
800046ac:	b0878693          	addi	a3,a5,-1272 # 80020b08 <__stack_top+0xfffdf518>
800046b0:	00070793          	mv	a5,a4
800046b4:	00279793          	slli	a5,a5,0x2
800046b8:	00e787b3          	add	a5,a5,a4
800046bc:	00579793          	slli	a5,a5,0x5
800046c0:	00f687b3          	add	a5,a3,a5
800046c4:	0807ac23          	sw	zero,152(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:41
    applications[slot].lastFinish = 0;
800046c8:	800217b7          	lui	a5,0x80021
800046cc:	fec42703          	lw	a4,-20(s0)
800046d0:	b0878693          	addi	a3,a5,-1272 # 80020b08 <__stack_top+0xfffdf518>
800046d4:	00070793          	mv	a5,a4
800046d8:	00279793          	slli	a5,a5,0x2
800046dc:	00e787b3          	add	a5,a5,a4
800046e0:	00579793          	slli	a5,a5,0x5
800046e4:	00f687b3          	add	a5,a3,a5
800046e8:	0807ae23          	sw	zero,156(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:42
    printsv("New application registered - ID: ", appID);
800046ec:	fdc42783          	lw	a5,-36(s0)
800046f0:	00078593          	mv	a1,a5
800046f4:	800077b7          	lui	a5,0x80007
800046f8:	c0078513          	addi	a0,a5,-1024 # 80006c00 <__stack_top+0xfffc5610>
800046fc:	f48fe0ef          	jal	ra,80002e44 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:43
    return;
80004700:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:44
}
80004704:	02c12083          	lw	ra,44(sp)
80004708:	02812403          	lw	s0,40(sp)
8000470c:	03010113          	addi	sp,sp,48
80004710:	00008067          	ret

80004714 <API_GetApplicationFreeSlot>:
API_GetApplicationFreeSlot():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:61
}


////////////////////////////////////////////////////////////
// Gets an application slot that is free
unsigned int API_GetApplicationFreeSlot(){
80004714:	fe010113          	addi	sp,sp,-32
80004718:	00812e23          	sw	s0,28(sp)
8000471c:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:63
    int i;
    for (i = 0; i < NUM_MAX_APPS; i++){
80004720:	fe042623          	sw	zero,-20(s0)
80004724:	0400006f          	j	80004764 <API_GetApplicationFreeSlot+0x50>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:64
        if (applications[i].occupied == FALSE){
80004728:	800216b7          	lui	a3,0x80021
8000472c:	fec42703          	lw	a4,-20(s0)
80004730:	00070793          	mv	a5,a4
80004734:	00279793          	slli	a5,a5,0x2
80004738:	00e787b3          	add	a5,a5,a4
8000473c:	00579793          	slli	a5,a5,0x5
80004740:	b0868713          	addi	a4,a3,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004744:	00e787b3          	add	a5,a5,a4
80004748:	0007a783          	lw	a5,0(a5)
8000474c:	00079663          	bnez	a5,80004758 <API_GetApplicationFreeSlot+0x44>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:65
            return i;
80004750:	fec42783          	lw	a5,-20(s0)
80004754:	0200006f          	j	80004774 <API_GetApplicationFreeSlot+0x60>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:63 (discriminator 2)
    for (i = 0; i < NUM_MAX_APPS; i++){
80004758:	fec42783          	lw	a5,-20(s0)
8000475c:	00178793          	addi	a5,a5,1
80004760:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:63 (discriminator 1)
80004764:	fec42703          	lw	a4,-20(s0)
80004768:	00b00793          	li	a5,11
8000476c:	fae7dee3          	ble	a4,a5,80004728 <API_GetApplicationFreeSlot+0x14>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:68
        }
    }
    return ERRO;
80004770:	fff00793          	li	a5,-1
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:69
}
80004774:	00078513          	mv	a0,a5
80004778:	01c12403          	lw	s0,28(sp)
8000477c:	02010113          	addi	sp,sp,32
80004780:	00008067          	ret

80004784 <API_ApplicationsReset>:
API_ApplicationsReset():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:73

////////////////////////////////////////////////////////////
// Reset applications vector
void API_ApplicationsReset(){
80004784:	fe010113          	addi	sp,sp,-32
80004788:	00812e23          	sw	s0,28(sp)
8000478c:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:75
    int i;
    for (i = 0; i < NUM_MAX_APPS; i++){
80004790:	fe042623          	sw	zero,-20(s0)
80004794:	0340006f          	j	800047c8 <API_ApplicationsReset+0x44>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:76 (discriminator 3)
        applications[i].occupied = FALSE;
80004798:	800216b7          	lui	a3,0x80021
8000479c:	fec42703          	lw	a4,-20(s0)
800047a0:	00070793          	mv	a5,a4
800047a4:	00279793          	slli	a5,a5,0x2
800047a8:	00e787b3          	add	a5,a5,a4
800047ac:	00579793          	slli	a5,a5,0x5
800047b0:	b0868713          	addi	a4,a3,-1272 # 80020b08 <__stack_top+0xfffdf518>
800047b4:	00e787b3          	add	a5,a5,a4
800047b8:	0007a023          	sw	zero,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:75 (discriminator 3)
    for (i = 0; i < NUM_MAX_APPS; i++){
800047bc:	fec42783          	lw	a5,-20(s0)
800047c0:	00178793          	addi	a5,a5,1
800047c4:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:75 (discriminator 1)
800047c8:	fec42703          	lw	a4,-20(s0)
800047cc:	00b00793          	li	a5,11
800047d0:	fce7d4e3          	ble	a4,a5,80004798 <API_ApplicationsReset+0x14>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:78
    }
    return;
800047d4:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:79
}
800047d8:	01c12403          	lw	s0,28(sp)
800047dc:	02010113          	addi	sp,sp,32
800047e0:	00008067          	ret

800047e4 <API_TilesReset>:
API_TilesReset():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:83

////////////////////////////////////////////////////////////
// Initialize the Tiles Info
void API_TilesReset(){
800047e4:	fe010113          	addi	sp,sp,-32
800047e8:	00812e23          	sw	s0,28(sp)
800047ec:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:85
    int i, m, n;
    for (m = 0; m < DIM_X; m++){
800047f0:	fe042423          	sw	zero,-24(s0)
800047f4:	10c0006f          	j	80004900 <API_TilesReset+0x11c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:86
        for (n = 0; n < DIM_Y; n++){
800047f8:	fe042223          	sw	zero,-28(s0)
800047fc:	0ec0006f          	j	800048e8 <API_TilesReset+0x104>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:87
            Tiles[m][n].temperature = 273;
80004800:	800216b7          	lui	a3,0x80021
80004804:	fe442703          	lw	a4,-28(s0)
80004808:	fe842603          	lw	a2,-24(s0)
8000480c:	00070793          	mv	a5,a4
80004810:	00379793          	slli	a5,a5,0x3
80004814:	40e787b3          	sub	a5,a5,a4
80004818:	00279793          	slli	a5,a5,0x2
8000481c:	05400713          	li	a4,84
80004820:	02e60733          	mul	a4,a2,a4
80004824:	00e78733          	add	a4,a5,a4
80004828:	4e468793          	addi	a5,a3,1252 # 800214e4 <__stack_top+0xfffdfef4>
8000482c:	00f707b3          	add	a5,a4,a5
80004830:	11100713          	li	a4,273
80004834:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:88
            Tiles[m][n].frequency = 1000;
80004838:	800217b7          	lui	a5,0x80021
8000483c:	fe442703          	lw	a4,-28(s0)
80004840:	fe842603          	lw	a2,-24(s0)
80004844:	4e478693          	addi	a3,a5,1252 # 800214e4 <__stack_top+0xfffdfef4>
80004848:	00070793          	mv	a5,a4
8000484c:	00379793          	slli	a5,a5,0x3
80004850:	40e787b3          	sub	a5,a5,a4
80004854:	00279793          	slli	a5,a5,0x2
80004858:	05400713          	li	a4,84
8000485c:	02e60733          	mul	a4,a2,a4
80004860:	00e787b3          	add	a5,a5,a4
80004864:	00f687b3          	add	a5,a3,a5
80004868:	3e800713          	li	a4,1000
8000486c:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:89
            for(i = 0; i < NUM_MAX_TASKS; i++){
80004870:	fe042623          	sw	zero,-20(s0)
80004874:	05c0006f          	j	800048d0 <API_TilesReset+0xec>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:90 (discriminator 3)
                Tiles[m][n].AppTask[i] = NONE;
80004878:	80021637          	lui	a2,0x80021
8000487c:	fe442783          	lw	a5,-28(s0)
80004880:	fe842683          	lw	a3,-24(s0)
80004884:	00078713          	mv	a4,a5
80004888:	00371713          	slli	a4,a4,0x3
8000488c:	40f70733          	sub	a4,a4,a5
80004890:	00068793          	mv	a5,a3
80004894:	00279793          	slli	a5,a5,0x2
80004898:	00d787b3          	add	a5,a5,a3
8000489c:	00279793          	slli	a5,a5,0x2
800048a0:	00d787b3          	add	a5,a5,a3
800048a4:	00f70733          	add	a4,a4,a5
800048a8:	fec42783          	lw	a5,-20(s0)
800048ac:	00f707b3          	add	a5,a4,a5
800048b0:	4e460713          	addi	a4,a2,1252 # 800214e4 <__stack_top+0xfffdfef4>
800048b4:	00279793          	slli	a5,a5,0x2
800048b8:	00f707b3          	add	a5,a4,a5
800048bc:	fff00713          	li	a4,-1
800048c0:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:89 (discriminator 3)
            for(i = 0; i < NUM_MAX_TASKS; i++){
800048c4:	fec42783          	lw	a5,-20(s0)
800048c8:	00178793          	addi	a5,a5,1
800048cc:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:89 (discriminator 1)
800048d0:	fec42703          	lw	a4,-20(s0)
800048d4:	00400793          	li	a5,4
800048d8:	fae7d0e3          	ble	a4,a5,80004878 <API_TilesReset+0x94>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:86 (discriminator 2)
        for (n = 0; n < DIM_Y; n++){
800048dc:	fe442783          	lw	a5,-28(s0)
800048e0:	00178793          	addi	a5,a5,1
800048e4:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:86 (discriminator 1)
800048e8:	fe442703          	lw	a4,-28(s0)
800048ec:	00200793          	li	a5,2
800048f0:	f0e7d8e3          	ble	a4,a5,80004800 <API_TilesReset+0x1c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:85 (discriminator 2)
    for (m = 0; m < DIM_X; m++){
800048f4:	fe842783          	lw	a5,-24(s0)
800048f8:	00178793          	addi	a5,a5,1
800048fc:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:85 (discriminator 1)
80004900:	fe842703          	lw	a4,-24(s0)
80004904:	00200793          	li	a5,2
80004908:	eee7d8e3          	ble	a4,a5,800047f8 <API_TilesReset+0x14>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:94
            }
        }
    }    
    return;
8000490c:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:95
}
80004910:	01c12403          	lw	s0,28(sp)
80004914:	02010113          	addi	sp,sp,32
80004918:	00008067          	ret

8000491c <GeneratePatternMatrix>:
GeneratePatternMatrix():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:98

// Generates the Pattern Matrix for Pattern mapping
void GeneratePatternMatrix(){
8000491c:	fe010113          	addi	sp,sp,-32
80004920:	00812e23          	sw	s0,28(sp)
80004924:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:100
    int i, aux;
    aux = 0;
80004928:	fe042423          	sw	zero,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:101
    priorityPointer = 0;
8000492c:	800217b7          	lui	a5,0x80021
80004930:	4e07a023          	sw	zero,1248(a5) # 800214e0 <__stack_top+0xfffdfef0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:103
    //prints("Testando Pattern: \n");
    for(i=0; i<(DIM_X*DIM_Y); i++){
80004934:	fe042623          	sw	zero,-20(s0)
80004938:	0700006f          	j	800049a8 <GeneratePatternMatrix+0x8c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:105
        //printi(i); prints(": "); printi(aux); prints("\n");
        priorityMatrix[i] = (aux / DIM_X << 8) | aux % DIM_X;
8000493c:	fe842703          	lw	a4,-24(s0)
80004940:	00300793          	li	a5,3
80004944:	02f747b3          	div	a5,a4,a5
80004948:	00879713          	slli	a4,a5,0x8
8000494c:	fe842683          	lw	a3,-24(s0)
80004950:	00300793          	li	a5,3
80004954:	02f6e7b3          	rem	a5,a3,a5
80004958:	00f767b3          	or	a5,a4,a5
8000495c:	00078693          	mv	a3,a5
80004960:	800217b7          	lui	a5,0x80021
80004964:	fec42703          	lw	a4,-20(s0)
80004968:	00271713          	slli	a4,a4,0x2
8000496c:	ae478793          	addi	a5,a5,-1308 # 80020ae4 <__stack_top+0xfffdf4f4>
80004970:	00f707b3          	add	a5,a4,a5
80004974:	00d7a023          	sw	a3,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:124
            else{
                aux = 1;
            }
        } 
        else{
            if(aux<=((DIM_X*DIM_Y)-3))
80004978:	fe842703          	lw	a4,-24(s0)
8000497c:	00600793          	li	a5,6
80004980:	00e7ca63          	blt	a5,a4,80004994 <GeneratePatternMatrix+0x78>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:125
                aux += 2;
80004984:	fe842783          	lw	a5,-24(s0)
80004988:	00278793          	addi	a5,a5,2
8000498c:	fef42423          	sw	a5,-24(s0)
80004990:	00c0006f          	j	8000499c <GeneratePatternMatrix+0x80>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:127
            else
                aux = 1;
80004994:	00100793          	li	a5,1
80004998:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:103 (discriminator 2)
    for(i=0; i<(DIM_X*DIM_Y); i++){
8000499c:	fec42783          	lw	a5,-20(s0)
800049a0:	00178793          	addi	a5,a5,1
800049a4:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:103 (discriminator 1)
800049a8:	fec42703          	lw	a4,-20(s0)
800049ac:	00800793          	li	a5,8
800049b0:	f8e7d6e3          	ble	a4,a5,8000493c <GeneratePatternMatrix+0x20>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:130
        }    
    }
    return;
800049b4:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:131
}
800049b8:	01c12403          	lw	s0,28(sp)
800049bc:	02010113          	addi	sp,sp,32
800049c0:	00008067          	ret

800049c4 <API_AllocateTasks>:
API_AllocateTasks():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:134

// Checks if there is some task to allocate...
void API_AllocateTasks(unsigned int tick){
800049c4:	fd010113          	addi	sp,sp,-48
800049c8:	02112623          	sw	ra,44(sp)
800049cc:	02812423          	sw	s0,40(sp)
800049d0:	02912223          	sw	s1,36(sp)
800049d4:	03010413          	addi	s0,sp,48
800049d8:	fca42e23          	sw	a0,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:138
    int i, j;
    int addr, slot;
    // Iterate around every possible application
    for (i = 0; i < NUM_MAX_APPS; i++){
800049dc:	fe042623          	sw	zero,-20(s0)
800049e0:	2980006f          	j	80004c78 <API_AllocateTasks+0x2b4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:140
        // If the application is valid
        if (applications[i].occupied == TRUE){
800049e4:	800216b7          	lui	a3,0x80021
800049e8:	fec42703          	lw	a4,-20(s0)
800049ec:	00070793          	mv	a5,a4
800049f0:	00279793          	slli	a5,a5,0x2
800049f4:	00e787b3          	add	a5,a5,a4
800049f8:	00579793          	slli	a5,a5,0x5
800049fc:	b0868713          	addi	a4,a3,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004a00:	00e787b3          	add	a5,a5,a4
80004a04:	0007a703          	lw	a4,0(a5)
80004a08:	00100793          	li	a5,1
80004a0c:	26f71063          	bne	a4,a5,80004c6c <API_AllocateTasks+0x2a8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:143

            // If the nextRun of this application is right now, then release each task!
            if(applications[i].nextRun <= tick && applications[i].nextRun != applications[i].lastStart){
80004a10:	800217b7          	lui	a5,0x80021
80004a14:	fec42703          	lw	a4,-20(s0)
80004a18:	b0878693          	addi	a3,a5,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004a1c:	00070793          	mv	a5,a4
80004a20:	00279793          	slli	a5,a5,0x2
80004a24:	00e787b3          	add	a5,a5,a4
80004a28:	00579793          	slli	a5,a5,0x5
80004a2c:	00f687b3          	add	a5,a3,a5
80004a30:	08c7a783          	lw	a5,140(a5)
80004a34:	fdc42703          	lw	a4,-36(s0)
80004a38:	22f76a63          	bltu	a4,a5,80004c6c <API_AllocateTasks+0x2a8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:143 (discriminator 1)
80004a3c:	800217b7          	lui	a5,0x80021
80004a40:	fec42703          	lw	a4,-20(s0)
80004a44:	b0878693          	addi	a3,a5,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004a48:	00070793          	mv	a5,a4
80004a4c:	00279793          	slli	a5,a5,0x2
80004a50:	00e787b3          	add	a5,a5,a4
80004a54:	00579793          	slli	a5,a5,0x5
80004a58:	00f687b3          	add	a5,a3,a5
80004a5c:	08c7a683          	lw	a3,140(a5)
80004a60:	800217b7          	lui	a5,0x80021
80004a64:	fec42703          	lw	a4,-20(s0)
80004a68:	b0878613          	addi	a2,a5,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004a6c:	00070793          	mv	a5,a4
80004a70:	00279793          	slli	a5,a5,0x2
80004a74:	00e787b3          	add	a5,a5,a4
80004a78:	00579793          	slli	a5,a5,0x5
80004a7c:	00f607b3          	add	a5,a2,a5
80004a80:	0947a783          	lw	a5,148(a5)
80004a84:	1ef68463          	beq	a3,a5,80004c6c <API_AllocateTasks+0x2a8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:146

                // If the system has space to accept every task
                if(applications[i].numTasks <= API_GetSystemTasksSlots()){
80004a88:	800216b7          	lui	a3,0x80021
80004a8c:	fec42703          	lw	a4,-20(s0)
80004a90:	00070793          	mv	a5,a4
80004a94:	00279793          	slli	a5,a5,0x2
80004a98:	00e787b3          	add	a5,a5,a4
80004a9c:	00579793          	slli	a5,a5,0x5
80004aa0:	b0868713          	addi	a4,a3,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004aa4:	00e787b3          	add	a5,a5,a4
80004aa8:	0107a483          	lw	s1,16(a5)
80004aac:	121000ef          	jal	ra,800053cc <API_GetSystemTasksSlots>
80004ab0:	00050793          	mv	a5,a0
80004ab4:	1a97ec63          	bltu	a5,s1,80004c6c <API_AllocateTasks+0x2a8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:149
                    
                    // Iterates around each task of this application
                    for(j = 0; j < applications[i].numTasks; j++){
80004ab8:	fe042423          	sw	zero,-24(s0)
80004abc:	13c0006f          	j	80004bf8 <API_AllocateTasks+0x234>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:152

                        for(;;){
                            addr = getNextPriorityAddr();
80004ac0:	53c000ef          	jal	ra,80004ffc <getNextPriorityAddr>
80004ac4:	00050793          	mv	a5,a0
80004ac8:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:153
                            slot = API_GetTaskSlotFromTile(addr, i, j);
80004acc:	fe442783          	lw	a5,-28(s0)
80004ad0:	fec42703          	lw	a4,-20(s0)
80004ad4:	fe842683          	lw	a3,-24(s0)
80004ad8:	00068613          	mv	a2,a3
80004adc:	00070593          	mv	a1,a4
80004ae0:	00078513          	mv	a0,a5
80004ae4:	674000ef          	jal	ra,80005158 <API_GetTaskSlotFromTile>
80004ae8:	00050793          	mv	a5,a0
80004aec:	fef42023          	sw	a5,-32(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:154
                            if (slot != ERRO)
80004af0:	fe042703          	lw	a4,-32(s0)
80004af4:	fff00793          	li	a5,-1
80004af8:	00f71463          	bne	a4,a5,80004b00 <API_AllocateTasks+0x13c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:152
                            addr = getNextPriorityAddr();
80004afc:	fc5ff06f          	j	80004ac0 <API_AllocateTasks+0xfc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:155
                                break;
80004b00:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:157
                        }
                        applications[i].tasks[j].status = TASK_ALLOCATING;
80004b04:	80021737          	lui	a4,0x80021
80004b08:	fe842783          	lw	a5,-24(s0)
80004b0c:	fec42683          	lw	a3,-20(s0)
80004b10:	b0870613          	addi	a2,a4,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004b14:	00078713          	mv	a4,a5
80004b18:	00171713          	slli	a4,a4,0x1
80004b1c:	00f70733          	add	a4,a4,a5
80004b20:	00271793          	slli	a5,a4,0x2
80004b24:	00078713          	mv	a4,a5
80004b28:	00068793          	mv	a5,a3
80004b2c:	00279793          	slli	a5,a5,0x2
80004b30:	00d787b3          	add	a5,a5,a3
80004b34:	00579793          	slli	a5,a5,0x5
80004b38:	00f707b3          	add	a5,a4,a5
80004b3c:	00f607b3          	add	a5,a2,a5
80004b40:	00300713          	li	a4,3
80004b44:	00e7aa23          	sw	a4,20(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:158
                        applications[i].tasks[j].addr = addr;
80004b48:	fe442603          	lw	a2,-28(s0)
80004b4c:	80021737          	lui	a4,0x80021
80004b50:	fe842783          	lw	a5,-24(s0)
80004b54:	fec42683          	lw	a3,-20(s0)
80004b58:	b0870593          	addi	a1,a4,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004b5c:	00078713          	mv	a4,a5
80004b60:	00171713          	slli	a4,a4,0x1
80004b64:	00f70733          	add	a4,a4,a5
80004b68:	00271793          	slli	a5,a4,0x2
80004b6c:	00078713          	mv	a4,a5
80004b70:	00068793          	mv	a5,a3
80004b74:	00279793          	slli	a5,a5,0x2
80004b78:	00d787b3          	add	a5,a5,a3
80004b7c:	00579793          	slli	a5,a5,0x5
80004b80:	00f707b3          	add	a5,a4,a5
80004b84:	00f587b3          	add	a5,a1,a5
80004b88:	00c7ac23          	sw	a2,24(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:159
                        applications[i].tasks[j].slot = slot;
80004b8c:	fe042603          	lw	a2,-32(s0)
80004b90:	80021737          	lui	a4,0x80021
80004b94:	fe842783          	lw	a5,-24(s0)
80004b98:	fec42683          	lw	a3,-20(s0)
80004b9c:	b0870593          	addi	a1,a4,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004ba0:	00078713          	mv	a4,a5
80004ba4:	00171713          	slli	a4,a4,0x1
80004ba8:	00f70733          	add	a4,a4,a5
80004bac:	00271793          	slli	a5,a4,0x2
80004bb0:	00078713          	mv	a4,a5
80004bb4:	00068793          	mv	a5,a3
80004bb8:	00279793          	slli	a5,a5,0x2
80004bbc:	00d787b3          	add	a5,a5,a3
80004bc0:	00579793          	slli	a5,a5,0x5
80004bc4:	00f707b3          	add	a5,a4,a5
80004bc8:	00f587b3          	add	a5,a1,a5
80004bcc:	00c7ae23          	sw	a2,28(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:160
                        API_RepositoryAllocation(i, j, addr);
80004bd0:	fec42783          	lw	a5,-20(s0)
80004bd4:	fe842703          	lw	a4,-24(s0)
80004bd8:	fe442683          	lw	a3,-28(s0)
80004bdc:	00068613          	mv	a2,a3
80004be0:	00070593          	mv	a1,a4
80004be4:	00078513          	mv	a0,a5
80004be8:	101000ef          	jal	ra,800054e8 <API_RepositoryAllocation>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:149
                    for(j = 0; j < applications[i].numTasks; j++){
80004bec:	fe842783          	lw	a5,-24(s0)
80004bf0:	00178793          	addi	a5,a5,1
80004bf4:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:149 (discriminator 1)
80004bf8:	800216b7          	lui	a3,0x80021
80004bfc:	fec42703          	lw	a4,-20(s0)
80004c00:	00070793          	mv	a5,a4
80004c04:	00279793          	slli	a5,a5,0x2
80004c08:	00e787b3          	add	a5,a5,a4
80004c0c:	00579793          	slli	a5,a5,0x5
80004c10:	b0868713          	addi	a4,a3,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004c14:	00e787b3          	add	a5,a5,a4
80004c18:	0107a703          	lw	a4,16(a5)
80004c1c:	fe842783          	lw	a5,-24(s0)
80004c20:	eae7e0e3          	bltu	a5,a4,80004ac0 <API_AllocateTasks+0xfc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:164
                    }

                    // Resets the lastStart
                    applications[i].lastStart = applications[i].nextRun;
80004c24:	800217b7          	lui	a5,0x80021
80004c28:	fec42703          	lw	a4,-20(s0)
80004c2c:	b0878693          	addi	a3,a5,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004c30:	00070793          	mv	a5,a4
80004c34:	00279793          	slli	a5,a5,0x2
80004c38:	00e787b3          	add	a5,a5,a4
80004c3c:	00579793          	slli	a5,a5,0x5
80004c40:	00f687b3          	add	a5,a3,a5
80004c44:	08c7a683          	lw	a3,140(a5)
80004c48:	800217b7          	lui	a5,0x80021
80004c4c:	fec42703          	lw	a4,-20(s0)
80004c50:	b0878613          	addi	a2,a5,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004c54:	00070793          	mv	a5,a4
80004c58:	00279793          	slli	a5,a5,0x2
80004c5c:	00e787b3          	add	a5,a5,a4
80004c60:	00579793          	slli	a5,a5,0x5
80004c64:	00f607b3          	add	a5,a2,a5
80004c68:	08d7aa23          	sw	a3,148(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:138 (discriminator 2)
    for (i = 0; i < NUM_MAX_APPS; i++){
80004c6c:	fec42783          	lw	a5,-20(s0)
80004c70:	00178793          	addi	a5,a5,1
80004c74:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:138 (discriminator 1)
80004c78:	fec42703          	lw	a4,-20(s0)
80004c7c:	00b00793          	li	a5,11
80004c80:	d6e7d2e3          	ble	a4,a5,800049e4 <API_AllocateTasks+0x20>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:170
                }
            }
        }
    }

    return;
80004c84:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:171
}
80004c88:	02c12083          	lw	ra,44(sp)
80004c8c:	02812403          	lw	s0,40(sp)
80004c90:	02412483          	lw	s1,36(sp)
80004c94:	03010113          	addi	sp,sp,48
80004c98:	00008067          	ret

80004c9c <API_DealocateTask>:
API_DealocateTask():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:173

void API_DealocateTask(unsigned int task_id, unsigned int app_id){
80004c9c:	fd010113          	addi	sp,sp,-48
80004ca0:	02112623          	sw	ra,44(sp)
80004ca4:	02812423          	sw	s0,40(sp)
80004ca8:	03010413          	addi	s0,sp,48
80004cac:	fca42e23          	sw	a0,-36(s0)
80004cb0:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:175
    unsigned int i, flag, tick;
    applications[app_id].tasks[task_id].status = TASK_FINISHED;
80004cb4:	80021737          	lui	a4,0x80021
80004cb8:	fdc42783          	lw	a5,-36(s0)
80004cbc:	fd842683          	lw	a3,-40(s0)
80004cc0:	b0870613          	addi	a2,a4,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004cc4:	00078713          	mv	a4,a5
80004cc8:	00171713          	slli	a4,a4,0x1
80004ccc:	00f70733          	add	a4,a4,a5
80004cd0:	00271793          	slli	a5,a4,0x2
80004cd4:	00078713          	mv	a4,a5
80004cd8:	00068793          	mv	a5,a3
80004cdc:	00279793          	slli	a5,a5,0x2
80004ce0:	00d787b3          	add	a5,a5,a3
80004ce4:	00579793          	slli	a5,a5,0x5
80004ce8:	00f707b3          	add	a5,a4,a5
80004cec:	00f607b3          	add	a5,a2,a5
80004cf0:	00200713          	li	a4,2
80004cf4:	00e7aa23          	sw	a4,20(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:177
    // verify if every task has finished
    flag = 1;
80004cf8:	00100793          	li	a5,1
80004cfc:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:178
    for (i = 0; i < applications[app_id].numTasks; i++){
80004d00:	fe042623          	sw	zero,-20(s0)
80004d04:	0bc0006f          	j	80004dc0 <API_DealocateTask+0x124>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:179
        printsvsv("checking ", i, "task is: ", applications[app_id].tasks[i].status);
80004d08:	fec42583          	lw	a1,-20(s0)
80004d0c:	80021737          	lui	a4,0x80021
80004d10:	fec42783          	lw	a5,-20(s0)
80004d14:	fd842683          	lw	a3,-40(s0)
80004d18:	b0870613          	addi	a2,a4,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004d1c:	00078713          	mv	a4,a5
80004d20:	00171713          	slli	a4,a4,0x1
80004d24:	00f70733          	add	a4,a4,a5
80004d28:	00271793          	slli	a5,a4,0x2
80004d2c:	00078713          	mv	a4,a5
80004d30:	00068793          	mv	a5,a3
80004d34:	00279793          	slli	a5,a5,0x2
80004d38:	00d787b3          	add	a5,a5,a3
80004d3c:	00579793          	slli	a5,a5,0x5
80004d40:	00f707b3          	add	a5,a4,a5
80004d44:	00f607b3          	add	a5,a2,a5
80004d48:	0147a783          	lw	a5,20(a5)
80004d4c:	00078693          	mv	a3,a5
80004d50:	800077b7          	lui	a5,0x80007
80004d54:	c2478613          	addi	a2,a5,-988 # 80006c24 <__stack_top+0xfffc5634>
80004d58:	800077b7          	lui	a5,0x80007
80004d5c:	c3078513          	addi	a0,a5,-976 # 80006c30 <__stack_top+0xfffc5640>
80004d60:	92cfe0ef          	jal	ra,80002e8c <printsvsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:180
        if(applications[app_id].tasks[i].status != TASK_FINISHED){
80004d64:	80021737          	lui	a4,0x80021
80004d68:	fec42783          	lw	a5,-20(s0)
80004d6c:	fd842683          	lw	a3,-40(s0)
80004d70:	b0870613          	addi	a2,a4,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004d74:	00078713          	mv	a4,a5
80004d78:	00171713          	slli	a4,a4,0x1
80004d7c:	00f70733          	add	a4,a4,a5
80004d80:	00271793          	slli	a5,a4,0x2
80004d84:	00078713          	mv	a4,a5
80004d88:	00068793          	mv	a5,a3
80004d8c:	00279793          	slli	a5,a5,0x2
80004d90:	00d787b3          	add	a5,a5,a3
80004d94:	00579793          	slli	a5,a5,0x5
80004d98:	00f707b3          	add	a5,a4,a5
80004d9c:	00f607b3          	add	a5,a2,a5
80004da0:	0147a703          	lw	a4,20(a5)
80004da4:	00200793          	li	a5,2
80004da8:	00f70663          	beq	a4,a5,80004db4 <API_DealocateTask+0x118>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:181
            flag = 0;
80004dac:	fe042423          	sw	zero,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:182
            break;
80004db0:	03c0006f          	j	80004dec <API_DealocateTask+0x150>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:178 (discriminator 2)
    for (i = 0; i < applications[app_id].numTasks; i++){
80004db4:	fec42783          	lw	a5,-20(s0)
80004db8:	00178793          	addi	a5,a5,1
80004dbc:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:178 (discriminator 1)
80004dc0:	800216b7          	lui	a3,0x80021
80004dc4:	fd842703          	lw	a4,-40(s0)
80004dc8:	00070793          	mv	a5,a4
80004dcc:	00279793          	slli	a5,a5,0x2
80004dd0:	00e787b3          	add	a5,a5,a4
80004dd4:	00579793          	slli	a5,a5,0x5
80004dd8:	b0868713          	addi	a4,a3,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004ddc:	00e787b3          	add	a5,a5,a4
80004de0:	0107a783          	lw	a5,16(a5)
80004de4:	fec42703          	lw	a4,-20(s0)
80004de8:	f2f760e3          	bltu	a4,a5,80004d08 <API_DealocateTask+0x6c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:186
        }
    }
    // in positive case
    if(flag){
80004dec:	fe842783          	lw	a5,-24(s0)
80004df0:	1e078c63          	beqz	a5,80004fe8 <API_DealocateTask+0x34c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:188
        // register that the application has executed another time
        tick = xTaskGetTickCount();
80004df4:	df0fd0ef          	jal	ra,800023e4 <xTaskGetTickCount>
80004df8:	fea42223          	sw	a0,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:189
        applications[app_id].executed++;
80004dfc:	800216b7          	lui	a3,0x80021
80004e00:	fd842703          	lw	a4,-40(s0)
80004e04:	00070793          	mv	a5,a4
80004e08:	00279793          	slli	a5,a5,0x2
80004e0c:	00e787b3          	add	a5,a5,a4
80004e10:	00579793          	slli	a5,a5,0x5
80004e14:	b0868713          	addi	a4,a3,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004e18:	00e787b3          	add	a5,a5,a4
80004e1c:	0907a783          	lw	a5,144(a5)
80004e20:	00178693          	addi	a3,a5,1
80004e24:	80021637          	lui	a2,0x80021
80004e28:	fd842703          	lw	a4,-40(s0)
80004e2c:	00070793          	mv	a5,a4
80004e30:	00279793          	slli	a5,a5,0x2
80004e34:	00e787b3          	add	a5,a5,a4
80004e38:	00579793          	slli	a5,a5,0x5
80004e3c:	b0860713          	addi	a4,a2,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004e40:	00e787b3          	add	a5,a5,a4
80004e44:	08d7a823          	sw	a3,144(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:190
        printsvsv("Application ", app_id, "was executed in ", (tick - applications[app_id].lastStart));
80004e48:	fd842583          	lw	a1,-40(s0)
80004e4c:	800217b7          	lui	a5,0x80021
80004e50:	fd842703          	lw	a4,-40(s0)
80004e54:	b0878693          	addi	a3,a5,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004e58:	00070793          	mv	a5,a4
80004e5c:	00279793          	slli	a5,a5,0x2
80004e60:	00e787b3          	add	a5,a5,a4
80004e64:	00579793          	slli	a5,a5,0x5
80004e68:	00f687b3          	add	a5,a3,a5
80004e6c:	0947a783          	lw	a5,148(a5)
80004e70:	fe442703          	lw	a4,-28(s0)
80004e74:	40f707b3          	sub	a5,a4,a5
80004e78:	00078693          	mv	a3,a5
80004e7c:	800077b7          	lui	a5,0x80007
80004e80:	c3c78613          	addi	a2,a5,-964 # 80006c3c <__stack_top+0xfffc564c>
80004e84:	800077b7          	lui	a5,0x80007
80004e88:	c5078513          	addi	a0,a5,-944 # 80006c50 <__stack_top+0xfffc5660>
80004e8c:	800fe0ef          	jal	ra,80002e8c <printsvsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:191
        applications[app_id].lastFinish = tick;
80004e90:	800217b7          	lui	a5,0x80021
80004e94:	fd842703          	lw	a4,-40(s0)
80004e98:	b0878693          	addi	a3,a5,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004e9c:	00070793          	mv	a5,a4
80004ea0:	00279793          	slli	a5,a5,0x2
80004ea4:	00e787b3          	add	a5,a5,a4
80004ea8:	00579793          	slli	a5,a5,0x5
80004eac:	00f687b3          	add	a5,a3,a5
80004eb0:	fe442703          	lw	a4,-28(s0)
80004eb4:	08e7ae23          	sw	a4,156(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:193
        // if the application must run another time
        if(applications[app_id].appExec > applications[app_id].executed){
80004eb8:	800217b7          	lui	a5,0x80021
80004ebc:	fd842703          	lw	a4,-40(s0)
80004ec0:	b0878693          	addi	a3,a5,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004ec4:	00070793          	mv	a5,a4
80004ec8:	00279793          	slli	a5,a5,0x2
80004ecc:	00e787b3          	add	a5,a5,a4
80004ed0:	00579793          	slli	a5,a5,0x5
80004ed4:	00f687b3          	add	a5,a3,a5
80004ed8:	00c7a683          	lw	a3,12(a5)
80004edc:	80021637          	lui	a2,0x80021
80004ee0:	fd842703          	lw	a4,-40(s0)
80004ee4:	00070793          	mv	a5,a4
80004ee8:	00279793          	slli	a5,a5,0x2
80004eec:	00e787b3          	add	a5,a5,a4
80004ef0:	00579793          	slli	a5,a5,0x5
80004ef4:	b0860713          	addi	a4,a2,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004ef8:	00e787b3          	add	a5,a5,a4
80004efc:	0907a783          	lw	a5,144(a5)
80004f00:	0ad7fa63          	bleu	a3,a5,80004fb4 <API_DealocateTask+0x318>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:194
            printsv("\t\tThis application still need to run: ", (applications[app_id].appExec - applications[app_id].executed));
80004f04:	800217b7          	lui	a5,0x80021
80004f08:	fd842703          	lw	a4,-40(s0)
80004f0c:	b0878693          	addi	a3,a5,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004f10:	00070793          	mv	a5,a4
80004f14:	00279793          	slli	a5,a5,0x2
80004f18:	00e787b3          	add	a5,a5,a4
80004f1c:	00579793          	slli	a5,a5,0x5
80004f20:	00f687b3          	add	a5,a3,a5
80004f24:	00c7a683          	lw	a3,12(a5)
80004f28:	80021637          	lui	a2,0x80021
80004f2c:	fd842703          	lw	a4,-40(s0)
80004f30:	00070793          	mv	a5,a4
80004f34:	00279793          	slli	a5,a5,0x2
80004f38:	00e787b3          	add	a5,a5,a4
80004f3c:	00579793          	slli	a5,a5,0x5
80004f40:	b0860713          	addi	a4,a2,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004f44:	00e787b3          	add	a5,a5,a4
80004f48:	0907a783          	lw	a5,144(a5)
80004f4c:	40f687b3          	sub	a5,a3,a5
80004f50:	00078593          	mv	a1,a5
80004f54:	800077b7          	lui	a5,0x80007
80004f58:	c6078513          	addi	a0,a5,-928 # 80006c60 <__stack_top+0xfffc5670>
80004f5c:	ee9fd0ef          	jal	ra,80002e44 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:195
            applications[app_id].nextRun = tick + applications[app_id].lastFinish;
80004f60:	800217b7          	lui	a5,0x80021
80004f64:	fd842703          	lw	a4,-40(s0)
80004f68:	b0878693          	addi	a3,a5,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004f6c:	00070793          	mv	a5,a4
80004f70:	00279793          	slli	a5,a5,0x2
80004f74:	00e787b3          	add	a5,a5,a4
80004f78:	00579793          	slli	a5,a5,0x5
80004f7c:	00f687b3          	add	a5,a3,a5
80004f80:	09c7a703          	lw	a4,156(a5)
80004f84:	fe442783          	lw	a5,-28(s0)
80004f88:	00f706b3          	add	a3,a4,a5
80004f8c:	800217b7          	lui	a5,0x80021
80004f90:	fd842703          	lw	a4,-40(s0)
80004f94:	b0878613          	addi	a2,a5,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004f98:	00070793          	mv	a5,a4
80004f9c:	00279793          	slli	a5,a5,0x2
80004fa0:	00e787b3          	add	a5,a5,a4
80004fa4:	00579793          	slli	a5,a5,0x5
80004fa8:	00f607b3          	add	a5,a2,a5
80004fac:	08d7a623          	sw	a3,140(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:201
        } else { // if the application has finished its runs
            prints("\t\tThis application is DONE!\n");
            applications[app_id].occupied = FALSE;
        }        
    }
    return;
80004fb0:	0380006f          	j	80004fe8 <API_DealocateTask+0x34c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:197
            prints("\t\tThis application is DONE!\n");
80004fb4:	800077b7          	lui	a5,0x80007
80004fb8:	c8878513          	addi	a0,a5,-888 # 80006c88 <__stack_top+0xfffc5698>
80004fbc:	dddfd0ef          	jal	ra,80002d98 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:198
            applications[app_id].occupied = FALSE;
80004fc0:	800216b7          	lui	a3,0x80021
80004fc4:	fd842703          	lw	a4,-40(s0)
80004fc8:	00070793          	mv	a5,a4
80004fcc:	00279793          	slli	a5,a5,0x2
80004fd0:	00e787b3          	add	a5,a5,a4
80004fd4:	00579793          	slli	a5,a5,0x5
80004fd8:	b0868713          	addi	a4,a3,-1272 # 80020b08 <__stack_top+0xfffdf518>
80004fdc:	00e787b3          	add	a5,a5,a4
80004fe0:	0007a023          	sw	zero,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:201
    return;
80004fe4:	00000013          	nop
80004fe8:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:202
}
80004fec:	02c12083          	lw	ra,44(sp)
80004ff0:	02812403          	lw	s0,40(sp)
80004ff4:	03010113          	addi	sp,sp,48
80004ff8:	00008067          	ret

80004ffc <getNextPriorityAddr>:
getNextPriorityAddr():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:205

// Gets the address of the next tile in the priority list 
unsigned int getNextPriorityAddr(){
80004ffc:	fe010113          	addi	sp,sp,-32
80005000:	00112e23          	sw	ra,28(sp)
80005004:	00812c23          	sw	s0,24(sp)
80005008:	00912a23          	sw	s1,20(sp)
8000500c:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:207
    int i;
    unsigned int addr = makeAddress(0,0);
80005010:	00000593          	li	a1,0
80005014:	00000513          	li	a0,0
80005018:	f7cfe0ef          	jal	ra,80003794 <makeAddress>
8000501c:	fea42423          	sw	a0,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:210
    for(;;){
        // Checks if it's a valid address
        if (priorityMatrix[priorityPointer] != makeAddress(0,0)){
80005020:	800217b7          	lui	a5,0x80021
80005024:	4e07a703          	lw	a4,1248(a5) # 800214e0 <__stack_top+0xfffdfef0>
80005028:	800217b7          	lui	a5,0x80021
8000502c:	00271713          	slli	a4,a4,0x2
80005030:	ae478793          	addi	a5,a5,-1308 # 80020ae4 <__stack_top+0xfffdf4f4>
80005034:	00f707b3          	add	a5,a4,a5
80005038:	0007a483          	lw	s1,0(a5)
8000503c:	00000593          	li	a1,0
80005040:	00000513          	li	a0,0
80005044:	f50fe0ef          	jal	ra,80003794 <makeAddress>
80005048:	00050793          	mv	a5,a0
8000504c:	0af48263          	beq	s1,a5,800050f0 <getNextPriorityAddr+0xf4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:211
            for(i = 0; i < NUM_MAX_TASKS; i++){
80005050:	fe042623          	sw	zero,-20(s0)
80005054:	0900006f          	j	800050e4 <getNextPriorityAddr+0xe8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:212
                if (Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] == NONE)
80005058:	fe842503          	lw	a0,-24(s0)
8000505c:	e91fd0ef          	jal	ra,80002eec <getXpos>
80005060:	00050493          	mv	s1,a0
80005064:	fe842503          	lw	a0,-24(s0)
80005068:	eb1fd0ef          	jal	ra,80002f18 <getYpos>
8000506c:	00050793          	mv	a5,a0
80005070:	800216b7          	lui	a3,0x80021
80005074:	00078713          	mv	a4,a5
80005078:	00371713          	slli	a4,a4,0x3
8000507c:	40f70733          	sub	a4,a4,a5
80005080:	00048793          	mv	a5,s1
80005084:	00279793          	slli	a5,a5,0x2
80005088:	009787b3          	add	a5,a5,s1
8000508c:	00279793          	slli	a5,a5,0x2
80005090:	009787b3          	add	a5,a5,s1
80005094:	00f70733          	add	a4,a4,a5
80005098:	fec42783          	lw	a5,-20(s0)
8000509c:	00f707b3          	add	a5,a4,a5
800050a0:	4e468713          	addi	a4,a3,1252 # 800214e4 <__stack_top+0xfffdfef4>
800050a4:	00279793          	slli	a5,a5,0x2
800050a8:	00f707b3          	add	a5,a4,a5
800050ac:	0087a703          	lw	a4,8(a5)
800050b0:	fff00793          	li	a5,-1
800050b4:	02f71263          	bne	a4,a5,800050d8 <getNextPriorityAddr+0xdc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:213
                    addr = priorityMatrix[priorityPointer];
800050b8:	800217b7          	lui	a5,0x80021
800050bc:	4e07a703          	lw	a4,1248(a5) # 800214e0 <__stack_top+0xfffdfef0>
800050c0:	800217b7          	lui	a5,0x80021
800050c4:	00271713          	slli	a4,a4,0x2
800050c8:	ae478793          	addi	a5,a5,-1308 # 80020ae4 <__stack_top+0xfffdf4f4>
800050cc:	00f707b3          	add	a5,a4,a5
800050d0:	0007a783          	lw	a5,0(a5)
800050d4:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:211 (discriminator 2)
            for(i = 0; i < NUM_MAX_TASKS; i++){
800050d8:	fec42783          	lw	a5,-20(s0)
800050dc:	00178793          	addi	a5,a5,1
800050e0:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:211 (discriminator 1)
800050e4:	fec42703          	lw	a4,-20(s0)
800050e8:	00400793          	li	a5,4
800050ec:	f6e7d6e3          	ble	a4,a5,80005058 <getNextPriorityAddr+0x5c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:218
            }
        }

        // Increments the priorityPointer
        priorityPointer++;
800050f0:	800217b7          	lui	a5,0x80021
800050f4:	4e07a783          	lw	a5,1248(a5) # 800214e0 <__stack_top+0xfffdfef0>
800050f8:	00178713          	addi	a4,a5,1
800050fc:	800217b7          	lui	a5,0x80021
80005100:	4ee7a023          	sw	a4,1248(a5) # 800214e0 <__stack_top+0xfffdfef0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:219
        if (priorityPointer == DIM_X*DIM_Y)
80005104:	800217b7          	lui	a5,0x80021
80005108:	4e07a703          	lw	a4,1248(a5) # 800214e0 <__stack_top+0xfffdfef0>
8000510c:	00900793          	li	a5,9
80005110:	00f71663          	bne	a4,a5,8000511c <getNextPriorityAddr+0x120>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:220
            priorityPointer = 0;
80005114:	800217b7          	lui	a5,0x80021
80005118:	4e07a023          	sw	zero,1248(a5) # 800214e0 <__stack_top+0xfffdfef0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:223

        // If we found a new valid address, return
        if( addr != makeAddress(0,0))
8000511c:	00000593          	li	a1,0
80005120:	00000513          	li	a0,0
80005124:	e70fe0ef          	jal	ra,80003794 <makeAddress>
80005128:	00050713          	mv	a4,a0
8000512c:	fe842783          	lw	a5,-24(s0)
80005130:	00e79463          	bne	a5,a4,80005138 <getNextPriorityAddr+0x13c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:210
        if (priorityMatrix[priorityPointer] != makeAddress(0,0)){
80005134:	eedff06f          	j	80005020 <getNextPriorityAddr+0x24>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:224
            break;
80005138:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:226
    }
    return addr;
8000513c:	fe842783          	lw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:228
    //return 0x101;
}
80005140:	00078513          	mv	a0,a5
80005144:	01c12083          	lw	ra,28(sp)
80005148:	01812403          	lw	s0,24(sp)
8000514c:	01412483          	lw	s1,20(sp)
80005150:	02010113          	addi	sp,sp,32
80005154:	00008067          	ret

80005158 <API_GetTaskSlotFromTile>:
API_GetTaskSlotFromTile():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:231

// Gets a free slot from one given tile
unsigned int API_GetTaskSlotFromTile(unsigned int addr, unsigned int app, unsigned int task){
80005158:	fd010113          	addi	sp,sp,-48
8000515c:	02112623          	sw	ra,44(sp)
80005160:	02812423          	sw	s0,40(sp)
80005164:	02912223          	sw	s1,36(sp)
80005168:	03212023          	sw	s2,32(sp)
8000516c:	03010413          	addi	s0,sp,48
80005170:	fca42e23          	sw	a0,-36(s0)
80005174:	fcb42c23          	sw	a1,-40(s0)
80005178:	fcc42a23          	sw	a2,-44(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:233
    int i;
    for(i = 0; i < NUM_MAX_TASKS; i++){
8000517c:	fe042623          	sw	zero,-20(s0)
80005180:	0e40006f          	j	80005264 <API_GetTaskSlotFromTile+0x10c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:234
        if(Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] == NONE){
80005184:	fdc42503          	lw	a0,-36(s0)
80005188:	d65fd0ef          	jal	ra,80002eec <getXpos>
8000518c:	00050493          	mv	s1,a0
80005190:	fdc42503          	lw	a0,-36(s0)
80005194:	d85fd0ef          	jal	ra,80002f18 <getYpos>
80005198:	00050793          	mv	a5,a0
8000519c:	800216b7          	lui	a3,0x80021
800051a0:	00078713          	mv	a4,a5
800051a4:	00371713          	slli	a4,a4,0x3
800051a8:	40f70733          	sub	a4,a4,a5
800051ac:	00048793          	mv	a5,s1
800051b0:	00279793          	slli	a5,a5,0x2
800051b4:	009787b3          	add	a5,a5,s1
800051b8:	00279793          	slli	a5,a5,0x2
800051bc:	009787b3          	add	a5,a5,s1
800051c0:	00f70733          	add	a4,a4,a5
800051c4:	fec42783          	lw	a5,-20(s0)
800051c8:	00f707b3          	add	a5,a4,a5
800051cc:	4e468713          	addi	a4,a3,1252 # 800214e4 <__stack_top+0xfffdfef4>
800051d0:	00279793          	slli	a5,a5,0x2
800051d4:	00f707b3          	add	a5,a4,a5
800051d8:	0087a703          	lw	a4,8(a5)
800051dc:	fff00793          	li	a5,-1
800051e0:	06f71c63          	bne	a4,a5,80005258 <API_GetTaskSlotFromTile+0x100>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:235
            Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] = (app << 16) | task;
800051e4:	fd842783          	lw	a5,-40(s0)
800051e8:	01079913          	slli	s2,a5,0x10
800051ec:	fdc42503          	lw	a0,-36(s0)
800051f0:	cfdfd0ef          	jal	ra,80002eec <getXpos>
800051f4:	00050493          	mv	s1,a0
800051f8:	fdc42503          	lw	a0,-36(s0)
800051fc:	d1dfd0ef          	jal	ra,80002f18 <getYpos>
80005200:	00050593          	mv	a1,a0
80005204:	fd442783          	lw	a5,-44(s0)
80005208:	00f966b3          	or	a3,s2,a5
8000520c:	80021637          	lui	a2,0x80021
80005210:	00058713          	mv	a4,a1
80005214:	00371793          	slli	a5,a4,0x3
80005218:	00078713          	mv	a4,a5
8000521c:	40b70733          	sub	a4,a4,a1
80005220:	00048793          	mv	a5,s1
80005224:	00279793          	slli	a5,a5,0x2
80005228:	009787b3          	add	a5,a5,s1
8000522c:	00279793          	slli	a5,a5,0x2
80005230:	009787b3          	add	a5,a5,s1
80005234:	00f70733          	add	a4,a4,a5
80005238:	fec42783          	lw	a5,-20(s0)
8000523c:	00f707b3          	add	a5,a4,a5
80005240:	4e460713          	addi	a4,a2,1252 # 800214e4 <__stack_top+0xfffdfef4>
80005244:	00279793          	slli	a5,a5,0x2
80005248:	00f707b3          	add	a5,a4,a5
8000524c:	00d7a423          	sw	a3,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:236
            return i;
80005250:	fec42783          	lw	a5,-20(s0)
80005254:	0200006f          	j	80005274 <API_GetTaskSlotFromTile+0x11c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:233 (discriminator 2)
    for(i = 0; i < NUM_MAX_TASKS; i++){
80005258:	fec42783          	lw	a5,-20(s0)
8000525c:	00178793          	addi	a5,a5,1
80005260:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:233 (discriminator 1)
80005264:	fec42703          	lw	a4,-20(s0)
80005268:	00400793          	li	a5,4
8000526c:	f0e7dce3          	ble	a4,a5,80005184 <API_GetTaskSlotFromTile+0x2c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:239
        }
    }
    return ERRO;
80005270:	fff00793          	li	a5,-1
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:240
}
80005274:	00078513          	mv	a0,a5
80005278:	02c12083          	lw	ra,44(sp)
8000527c:	02812403          	lw	s0,40(sp)
80005280:	02412483          	lw	s1,36(sp)
80005284:	02012903          	lw	s2,32(sp)
80005288:	03010113          	addi	sp,sp,48
8000528c:	00008067          	ret

80005290 <API_ClearTaskSlotFromTile>:
API_ClearTaskSlotFromTile():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:243

// Clear a slot occupied by a given task
unsigned int API_ClearTaskSlotFromTile(unsigned int addr, unsigned int app, unsigned int task){
80005290:	fd010113          	addi	sp,sp,-48
80005294:	02112623          	sw	ra,44(sp)
80005298:	02812423          	sw	s0,40(sp)
8000529c:	02912223          	sw	s1,36(sp)
800052a0:	03010413          	addi	s0,sp,48
800052a4:	fca42e23          	sw	a0,-36(s0)
800052a8:	fcb42c23          	sw	a1,-40(s0)
800052ac:	fcc42a23          	sw	a2,-44(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:245
    int i;
    for(i = 0; i < NUM_MAX_TASKS; i++){
800052b0:	fe042623          	sw	zero,-20(s0)
800052b4:	0f00006f          	j	800053a4 <API_ClearTaskSlotFromTile+0x114>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:246
        if(Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] == (app << 16) | task){
800052b8:	fdc42503          	lw	a0,-36(s0)
800052bc:	c31fd0ef          	jal	ra,80002eec <getXpos>
800052c0:	00050493          	mv	s1,a0
800052c4:	fdc42503          	lw	a0,-36(s0)
800052c8:	c51fd0ef          	jal	ra,80002f18 <getYpos>
800052cc:	00050793          	mv	a5,a0
800052d0:	800216b7          	lui	a3,0x80021
800052d4:	00078713          	mv	a4,a5
800052d8:	00371713          	slli	a4,a4,0x3
800052dc:	40f70733          	sub	a4,a4,a5
800052e0:	00048793          	mv	a5,s1
800052e4:	00279793          	slli	a5,a5,0x2
800052e8:	009787b3          	add	a5,a5,s1
800052ec:	00279793          	slli	a5,a5,0x2
800052f0:	009787b3          	add	a5,a5,s1
800052f4:	00f70733          	add	a4,a4,a5
800052f8:	fec42783          	lw	a5,-20(s0)
800052fc:	00f707b3          	add	a5,a4,a5
80005300:	4e468713          	addi	a4,a3,1252 # 800214e4 <__stack_top+0xfffdfef4>
80005304:	00279793          	slli	a5,a5,0x2
80005308:	00f707b3          	add	a5,a4,a5
8000530c:	0087a703          	lw	a4,8(a5)
80005310:	fd842783          	lw	a5,-40(s0)
80005314:	01079793          	slli	a5,a5,0x10
80005318:	40f707b3          	sub	a5,a4,a5
8000531c:	0017b793          	seqz	a5,a5
80005320:	0ff7f793          	andi	a5,a5,255
80005324:	00078713          	mv	a4,a5
80005328:	fd442783          	lw	a5,-44(s0)
8000532c:	00f767b3          	or	a5,a4,a5
80005330:	06078463          	beqz	a5,80005398 <API_ClearTaskSlotFromTile+0x108>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:247
            Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] = NONE;
80005334:	fdc42503          	lw	a0,-36(s0)
80005338:	bb5fd0ef          	jal	ra,80002eec <getXpos>
8000533c:	00050493          	mv	s1,a0
80005340:	fdc42503          	lw	a0,-36(s0)
80005344:	bd5fd0ef          	jal	ra,80002f18 <getYpos>
80005348:	00050793          	mv	a5,a0
8000534c:	800216b7          	lui	a3,0x80021
80005350:	00078713          	mv	a4,a5
80005354:	00371713          	slli	a4,a4,0x3
80005358:	40f70733          	sub	a4,a4,a5
8000535c:	00048793          	mv	a5,s1
80005360:	00279793          	slli	a5,a5,0x2
80005364:	009787b3          	add	a5,a5,s1
80005368:	00279793          	slli	a5,a5,0x2
8000536c:	009787b3          	add	a5,a5,s1
80005370:	00f70733          	add	a4,a4,a5
80005374:	fec42783          	lw	a5,-20(s0)
80005378:	00f707b3          	add	a5,a4,a5
8000537c:	4e468713          	addi	a4,a3,1252 # 800214e4 <__stack_top+0xfffdfef4>
80005380:	00279793          	slli	a5,a5,0x2
80005384:	00f707b3          	add	a5,a4,a5
80005388:	fff00713          	li	a4,-1
8000538c:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:248
            return 1;
80005390:	00100793          	li	a5,1
80005394:	0200006f          	j	800053b4 <API_ClearTaskSlotFromTile+0x124>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:245 (discriminator 2)
    for(i = 0; i < NUM_MAX_TASKS; i++){
80005398:	fec42783          	lw	a5,-20(s0)
8000539c:	00178793          	addi	a5,a5,1
800053a0:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:245 (discriminator 1)
800053a4:	fec42703          	lw	a4,-20(s0)
800053a8:	00400793          	li	a5,4
800053ac:	f0e7d6e3          	ble	a4,a5,800052b8 <API_ClearTaskSlotFromTile+0x28>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:251
        }
    }
    return ERRO;
800053b0:	fff00793          	li	a5,-1
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:252
}
800053b4:	00078513          	mv	a0,a5
800053b8:	02c12083          	lw	ra,44(sp)
800053bc:	02812403          	lw	s0,40(sp)
800053c0:	02412483          	lw	s1,36(sp)
800053c4:	03010113          	addi	sp,sp,48
800053c8:	00008067          	ret

800053cc <API_GetSystemTasksSlots>:
API_GetSystemTasksSlots():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:255

// Iterates around the system tiles to sum the amount of tasks slots available
unsigned int API_GetSystemTasksSlots(){
800053cc:	fe010113          	addi	sp,sp,-32
800053d0:	00112e23          	sw	ra,28(sp)
800053d4:	00812c23          	sw	s0,24(sp)
800053d8:	00912a23          	sw	s1,20(sp)
800053dc:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:257
    int m, n, i, sum;
    sum = 0;
800053e0:	fe042023          	sw	zero,-32(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:258
    for(m = 0; m < DIM_X; m++){
800053e4:	fe042623          	sw	zero,-20(s0)
800053e8:	0d80006f          	j	800054c0 <API_GetSystemTasksSlots+0xf4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:259
        for(n = 0; n < DIM_Y; n++){
800053ec:	fe042423          	sw	zero,-24(s0)
800053f0:	0b80006f          	j	800054a8 <API_GetSystemTasksSlots+0xdc>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:260
            if(makeAddress(m,n) != makeAddress(0,0)){
800053f4:	fec42783          	lw	a5,-20(s0)
800053f8:	fe842703          	lw	a4,-24(s0)
800053fc:	00070593          	mv	a1,a4
80005400:	00078513          	mv	a0,a5
80005404:	b90fe0ef          	jal	ra,80003794 <makeAddress>
80005408:	00050493          	mv	s1,a0
8000540c:	00000593          	li	a1,0
80005410:	00000513          	li	a0,0
80005414:	b80fe0ef          	jal	ra,80003794 <makeAddress>
80005418:	00050793          	mv	a5,a0
8000541c:	08f48063          	beq	s1,a5,8000549c <API_GetSystemTasksSlots+0xd0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:261
                for(i = 0; i < NUM_MAX_TASKS; i++){
80005420:	fe042223          	sw	zero,-28(s0)
80005424:	06c0006f          	j	80005490 <API_GetSystemTasksSlots+0xc4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:262
                    if(Tiles[m][n].AppTask[i] == NONE){
80005428:	80021637          	lui	a2,0x80021
8000542c:	fe842783          	lw	a5,-24(s0)
80005430:	fec42683          	lw	a3,-20(s0)
80005434:	00078713          	mv	a4,a5
80005438:	00371713          	slli	a4,a4,0x3
8000543c:	40f70733          	sub	a4,a4,a5
80005440:	00068793          	mv	a5,a3
80005444:	00279793          	slli	a5,a5,0x2
80005448:	00d787b3          	add	a5,a5,a3
8000544c:	00279793          	slli	a5,a5,0x2
80005450:	00d787b3          	add	a5,a5,a3
80005454:	00f70733          	add	a4,a4,a5
80005458:	fe442783          	lw	a5,-28(s0)
8000545c:	00f707b3          	add	a5,a4,a5
80005460:	4e460713          	addi	a4,a2,1252 # 800214e4 <__stack_top+0xfffdfef4>
80005464:	00279793          	slli	a5,a5,0x2
80005468:	00f707b3          	add	a5,a4,a5
8000546c:	0087a703          	lw	a4,8(a5)
80005470:	fff00793          	li	a5,-1
80005474:	00f71863          	bne	a4,a5,80005484 <API_GetSystemTasksSlots+0xb8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:263
                        sum++;
80005478:	fe042783          	lw	a5,-32(s0)
8000547c:	00178793          	addi	a5,a5,1
80005480:	fef42023          	sw	a5,-32(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:261 (discriminator 2)
                for(i = 0; i < NUM_MAX_TASKS; i++){
80005484:	fe442783          	lw	a5,-28(s0)
80005488:	00178793          	addi	a5,a5,1
8000548c:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:261 (discriminator 1)
80005490:	fe442703          	lw	a4,-28(s0)
80005494:	00400793          	li	a5,4
80005498:	f8e7d8e3          	ble	a4,a5,80005428 <API_GetSystemTasksSlots+0x5c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:259 (discriminator 2)
        for(n = 0; n < DIM_Y; n++){
8000549c:	fe842783          	lw	a5,-24(s0)
800054a0:	00178793          	addi	a5,a5,1
800054a4:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:259 (discriminator 1)
800054a8:	fe842703          	lw	a4,-24(s0)
800054ac:	00200793          	li	a5,2
800054b0:	f4e7d2e3          	ble	a4,a5,800053f4 <API_GetSystemTasksSlots+0x28>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:258 (discriminator 2)
    for(m = 0; m < DIM_X; m++){
800054b4:	fec42783          	lw	a5,-20(s0)
800054b8:	00178793          	addi	a5,a5,1
800054bc:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:258 (discriminator 1)
800054c0:	fec42703          	lw	a4,-20(s0)
800054c4:	00200793          	li	a5,2
800054c8:	f2e7d2e3          	ble	a4,a5,800053ec <API_GetSystemTasksSlots+0x20>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:269
                    }
                }
            }
        }
    }
    return sum;
800054cc:	fe042783          	lw	a5,-32(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:270
}
800054d0:	00078513          	mv	a0,a5
800054d4:	01c12083          	lw	ra,28(sp)
800054d8:	01812403          	lw	s0,24(sp)
800054dc:	01412483          	lw	s1,20(sp)
800054e0:	02010113          	addi	sp,sp,32
800054e4:	00008067          	ret

800054e8 <API_RepositoryAllocation>:
API_RepositoryAllocation():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:272

void API_RepositoryAllocation(unsigned int app, unsigned int task, unsigned int dest_addr){
800054e8:	fd010113          	addi	sp,sp,-48
800054ec:	02112623          	sw	ra,44(sp)
800054f0:	02812423          	sw	s0,40(sp)
800054f4:	03010413          	addi	s0,sp,48
800054f8:	fca42e23          	sw	a0,-36(s0)
800054fc:	fcb42c23          	sw	a1,-40(s0)
80005500:	fcc42a23          	sw	a2,-44(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:275
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80005504:	5ed000ef          	jal	ra,800062f0 <API_GetServiceSlot>
80005508:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:276
        if(mySlot == PIPE_FULL) vTaskDelay(1);
8000550c:	fec42703          	lw	a4,-20(s0)
80005510:	fdfe07b7          	lui	a5,0xfdfe0
80005514:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e80d>
80005518:	00f71663          	bne	a4,a5,80005524 <API_RepositoryAllocation+0x3c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:276 (discriminator 1)
8000551c:	00100513          	li	a0,1
80005520:	c29fc0ef          	jal	ra,80002148 <vTaskDelay>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:277
    }while(mySlot == PIPE_FULL);
80005524:	fec42703          	lw	a4,-20(s0)
80005528:	fdfe07b7          	lui	a5,0xfdfe0
8000552c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e80d>
80005530:	fcf70ae3          	beq	a4,a5,80005504 <API_RepositoryAllocation+0x1c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:280
    //printsv("I got a free service slot!! -> ", mySlot);

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80005534:	800207b7          	lui	a5,0x80020
80005538:	fec42703          	lw	a4,-20(s0)
8000553c:	06c78693          	addi	a3,a5,108 # 8002006c <__stack_top+0xfffdea7c>
80005540:	00070793          	mv	a5,a4
80005544:	00479793          	slli	a5,a5,0x4
80005548:	40e787b3          	sub	a5,a5,a4
8000554c:	00279793          	slli	a5,a5,0x2
80005550:	00f687b3          	add	a5,a3,a5
80005554:	feff0737          	lui	a4,0xfeff0
80005558:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efae90e>
8000555c:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:282

    ServicePipe[mySlot].header.header           = makeAddress(0, 0) | PERIPH_SOUTH;
80005560:	00000593          	li	a1,0
80005564:	00000513          	li	a0,0
80005568:	a2cfe0ef          	jal	ra,80003794 <makeAddress>
8000556c:	00050713          	mv	a4,a0
80005570:	000407b7          	lui	a5,0x40
80005574:	00f766b3          	or	a3,a4,a5
80005578:	800207b7          	lui	a5,0x80020
8000557c:	fec42703          	lw	a4,-20(s0)
80005580:	06c78613          	addi	a2,a5,108 # 8002006c <__stack_top+0xfffdea7c>
80005584:	00070793          	mv	a5,a4
80005588:	00479793          	slli	a5,a5,0x4
8000558c:	40e787b3          	sub	a5,a5,a4
80005590:	00279793          	slli	a5,a5,0x2
80005594:	00f607b3          	add	a5,a2,a5
80005598:	00d7a423          	sw	a3,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:283
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
8000559c:	800207b7          	lui	a5,0x80020
800055a0:	fec42703          	lw	a4,-20(s0)
800055a4:	06c78693          	addi	a3,a5,108 # 8002006c <__stack_top+0xfffdea7c>
800055a8:	00070793          	mv	a5,a4
800055ac:	00479793          	slli	a5,a5,0x4
800055b0:	40e787b3          	sub	a5,a5,a4
800055b4:	00279793          	slli	a5,a5,0x2
800055b8:	00f687b3          	add	a5,a3,a5
800055bc:	00b00713          	li	a4,11
800055c0:	00e7a623          	sw	a4,12(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:284
    ServicePipe[mySlot].header.service          = TASK_ALLOCATION_SEND;
800055c4:	800207b7          	lui	a5,0x80020
800055c8:	fec42703          	lw	a4,-20(s0)
800055cc:	06c78693          	addi	a3,a5,108 # 8002006c <__stack_top+0xfffdea7c>
800055d0:	00070793          	mv	a5,a4
800055d4:	00479793          	slli	a5,a5,0x4
800055d8:	40e787b3          	sub	a5,a5,a4
800055dc:	00279793          	slli	a5,a5,0x2
800055e0:	00f687b3          	add	a5,a3,a5
800055e4:	03000713          	li	a4,48
800055e8:	00e7a823          	sw	a4,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:285
    ServicePipe[mySlot].header.task_id          = task;
800055ec:	800207b7          	lui	a5,0x80020
800055f0:	fec42703          	lw	a4,-20(s0)
800055f4:	06c78693          	addi	a3,a5,108 # 8002006c <__stack_top+0xfffdea7c>
800055f8:	00070793          	mv	a5,a4
800055fc:	00479793          	slli	a5,a5,0x4
80005600:	40e787b3          	sub	a5,a5,a4
80005604:	00279793          	slli	a5,a5,0x2
80005608:	00f687b3          	add	a5,a3,a5
8000560c:	fd842703          	lw	a4,-40(s0)
80005610:	00e7aa23          	sw	a4,20(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:286
    ServicePipe[mySlot].header.task_app_id      = app;
80005614:	800207b7          	lui	a5,0x80020
80005618:	fec42703          	lw	a4,-20(s0)
8000561c:	06c78693          	addi	a3,a5,108 # 8002006c <__stack_top+0xfffdea7c>
80005620:	00070793          	mv	a5,a4
80005624:	00479793          	slli	a5,a5,0x4
80005628:	40e787b3          	sub	a5,a5,a4
8000562c:	00279793          	slli	a5,a5,0x2
80005630:	00f687b3          	add	a5,a3,a5
80005634:	fdc42703          	lw	a4,-36(s0)
80005638:	02e7a223          	sw	a4,36(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:287
    ServicePipe[mySlot].header.task_dest_addr   = dest_addr;
8000563c:	800207b7          	lui	a5,0x80020
80005640:	fec42703          	lw	a4,-20(s0)
80005644:	06c78693          	addi	a3,a5,108 # 8002006c <__stack_top+0xfffdea7c>
80005648:	00070793          	mv	a5,a4
8000564c:	00479793          	slli	a5,a5,0x4
80005650:	40e787b3          	sub	a5,a5,a4
80005654:	00279793          	slli	a5,a5,0x2
80005658:	00f687b3          	add	a5,a3,a5
8000565c:	fd442703          	lw	a4,-44(s0)
80005660:	02e7ac23          	sw	a4,56(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:289

    API_PushSendQueue(SERVICE, mySlot);
80005664:	fec42583          	lw	a1,-20(s0)
80005668:	10100537          	lui	a0,0x10100
8000566c:	968fe0ef          	jal	ra,800037d4 <API_PushSendQueue>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:290
    return;    
80005670:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:291
}
80005674:	02c12083          	lw	ra,44(sp)
80005678:	02812403          	lw	s0,40(sp)
8000567c:	03010113          	addi	sp,sp,48
80005680:	00008067          	ret

80005684 <API_TaskAllocated>:
API_TaskAllocated():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:293

void API_TaskAllocated(unsigned int task_id, unsigned int app_id){
80005684:	fd010113          	addi	sp,sp,-48
80005688:	02112623          	sw	ra,44(sp)
8000568c:	02812423          	sw	s0,40(sp)
80005690:	03010413          	addi	s0,sp,48
80005694:	fca42e23          	sw	a0,-36(s0)
80005698:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:295
    unsigned int i;
    applications[app_id].tasks[task_id].status = TASK_ALLOCATED;
8000569c:	80021737          	lui	a4,0x80021
800056a0:	fdc42783          	lw	a5,-36(s0)
800056a4:	fd842683          	lw	a3,-40(s0)
800056a8:	b0870613          	addi	a2,a4,-1272 # 80020b08 <__stack_top+0xfffdf518>
800056ac:	00078713          	mv	a4,a5
800056b0:	00171713          	slli	a4,a4,0x1
800056b4:	00f70733          	add	a4,a4,a5
800056b8:	00271793          	slli	a5,a4,0x2
800056bc:	00078713          	mv	a4,a5
800056c0:	00068793          	mv	a5,a3
800056c4:	00279793          	slli	a5,a5,0x2
800056c8:	00d787b3          	add	a5,a5,a3
800056cc:	00579793          	slli	a5,a5,0x5
800056d0:	00f707b3          	add	a5,a4,a5
800056d4:	00f607b3          	add	a5,a2,a5
800056d8:	00400713          	li	a4,4
800056dc:	00e7aa23          	sw	a4,20(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:297

    for(i = 0; i < applications[app_id].numTasks; i++){
800056e0:	fe042623          	sw	zero,-20(s0)
800056e4:	0580006f          	j	8000573c <API_TaskAllocated+0xb8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:298
        if(applications[app_id].tasks[i].status != TASK_ALLOCATED){
800056e8:	80021737          	lui	a4,0x80021
800056ec:	fec42783          	lw	a5,-20(s0)
800056f0:	fd842683          	lw	a3,-40(s0)
800056f4:	b0870613          	addi	a2,a4,-1272 # 80020b08 <__stack_top+0xfffdf518>
800056f8:	00078713          	mv	a4,a5
800056fc:	00171713          	slli	a4,a4,0x1
80005700:	00f70733          	add	a4,a4,a5
80005704:	00271793          	slli	a5,a4,0x2
80005708:	00078713          	mv	a4,a5
8000570c:	00068793          	mv	a5,a3
80005710:	00279793          	slli	a5,a5,0x2
80005714:	00d787b3          	add	a5,a5,a3
80005718:	00579793          	slli	a5,a5,0x5
8000571c:	00f707b3          	add	a5,a4,a5
80005720:	00f607b3          	add	a5,a2,a5
80005724:	0147a703          	lw	a4,20(a5)
80005728:	00400793          	li	a5,4
8000572c:	06f71c63          	bne	a4,a5,800057a4 <API_TaskAllocated+0x120>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:297 (discriminator 2)
    for(i = 0; i < applications[app_id].numTasks; i++){
80005730:	fec42783          	lw	a5,-20(s0)
80005734:	00178793          	addi	a5,a5,1
80005738:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:297 (discriminator 1)
8000573c:	800216b7          	lui	a3,0x80021
80005740:	fd842703          	lw	a4,-40(s0)
80005744:	00070793          	mv	a5,a4
80005748:	00279793          	slli	a5,a5,0x2
8000574c:	00e787b3          	add	a5,a5,a4
80005750:	00579793          	slli	a5,a5,0x5
80005754:	b0868713          	addi	a4,a3,-1272 # 80020b08 <__stack_top+0xfffdf518>
80005758:	00e787b3          	add	a5,a5,a4
8000575c:	0107a783          	lw	a5,16(a5)
80005760:	fec42703          	lw	a4,-20(s0)
80005764:	f8f762e3          	bltu	a4,a5,800056e8 <API_TaskAllocated+0x64>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:302
            return;
        }
    }
    printsvsv("Application ", app_id, " is allocated!", 1);
80005768:	fd842703          	lw	a4,-40(s0)
8000576c:	00100693          	li	a3,1
80005770:	800077b7          	lui	a5,0x80007
80005774:	ca878613          	addi	a2,a5,-856 # 80006ca8 <__stack_top+0xfffc56b8>
80005778:	00070593          	mv	a1,a4
8000577c:	800077b7          	lui	a5,0x80007
80005780:	c5078513          	addi	a0,a5,-944 # 80006c50 <__stack_top+0xfffc5660>
80005784:	f08fd0ef          	jal	ra,80002e8c <printsvsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:303
    API_ApplicationStart(app_id);
80005788:	fd842503          	lw	a0,-40(s0)
8000578c:	02c000ef          	jal	ra,800057b8 <API_ApplicationStart>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:304
    prints("\tStart command sent to every task.\n");
80005790:	800077b7          	lui	a5,0x80007
80005794:	cb878513          	addi	a0,a5,-840 # 80006cb8 <__stack_top+0xfffc56c8>
80005798:	e00fd0ef          	jal	ra,80002d98 <prints>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:305
    return;
8000579c:	00000013          	nop
800057a0:	0080006f          	j	800057a8 <API_TaskAllocated+0x124>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:299
            return;
800057a4:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:306
}
800057a8:	02c12083          	lw	ra,44(sp)
800057ac:	02812403          	lw	s0,40(sp)
800057b0:	03010113          	addi	sp,sp,48
800057b4:	00008067          	ret

800057b8 <API_ApplicationStart>:
API_ApplicationStart():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:308

void API_ApplicationStart(unsigned int app_id){
800057b8:	fd010113          	addi	sp,sp,-48
800057bc:	02112623          	sw	ra,44(sp)
800057c0:	02812423          	sw	s0,40(sp)
800057c4:	03010413          	addi	s0,sp,48
800057c8:	fca42e23          	sw	a0,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:311
    unsigned int i, j;
    unsigned int mySlot;
    for(i = 0; i < applications[app_id].numTasks; i++){
800057cc:	fe042623          	sw	zero,-20(s0)
800057d0:	2740006f          	j	80005a44 <API_ApplicationStart+0x28c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:313
        do{
            vPortEnterCritical();
800057d4:	de5fb0ef          	jal	ra,800015b8 <vPortEnterCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:314
            mySlot = API_GetMessageSlot();
800057d8:	1cd000ef          	jal	ra,800061a4 <API_GetMessageSlot>
800057dc:	fea42223          	sw	a0,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:315
            if(mySlot == PIPE_FULL){ 
800057e0:	fe442703          	lw	a4,-28(s0)
800057e4:	fdfe07b7          	lui	a5,0xfdfe0
800057e8:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e80d>
800057ec:	00f71863          	bne	a4,a5,800057fc <API_ApplicationStart+0x44>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:316
                vPortExitCritical();
800057f0:	dfdfb0ef          	jal	ra,800015ec <vPortExitCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:317
                vTaskDelay(1);
800057f4:	00100513          	li	a0,1
800057f8:	951fc0ef          	jal	ra,80002148 <vTaskDelay>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:319
            }
        }while(mySlot == PIPE_FULL);
800057fc:	fe442703          	lw	a4,-28(s0)
80005800:	fdfe07b7          	lui	a5,0xfdfe0
80005804:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e80d>
80005808:	fcf706e3          	beq	a4,a5,800057d4 <API_ApplicationStart+0x1c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:321

        MessagePipe[mySlot].holder = PIPE_SYS_HOLDER;
8000580c:	800207b7          	lui	a5,0x80020
80005810:	fe442683          	lw	a3,-28(s0)
80005814:	1d078713          	addi	a4,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
80005818:	24400793          	li	a5,580
8000581c:	02f687b3          	mul	a5,a3,a5
80005820:	00f707b3          	add	a5,a4,a5
80005824:	feff0737          	lui	a4,0xfeff0
80005828:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7efae90e>
8000582c:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:323

        MessagePipe[mySlot].header.header           = applications[app_id].tasks[i].addr;
80005830:	80021737          	lui	a4,0x80021
80005834:	fec42783          	lw	a5,-20(s0)
80005838:	fdc42683          	lw	a3,-36(s0)
8000583c:	b0870613          	addi	a2,a4,-1272 # 80020b08 <__stack_top+0xfffdf518>
80005840:	00078713          	mv	a4,a5
80005844:	00171713          	slli	a4,a4,0x1
80005848:	00f70733          	add	a4,a4,a5
8000584c:	00271793          	slli	a5,a4,0x2
80005850:	00078713          	mv	a4,a5
80005854:	00068793          	mv	a5,a3
80005858:	00279793          	slli	a5,a5,0x2
8000585c:	00d787b3          	add	a5,a5,a3
80005860:	00579793          	slli	a5,a5,0x5
80005864:	00f707b3          	add	a5,a4,a5
80005868:	00f607b3          	add	a5,a2,a5
8000586c:	0187a703          	lw	a4,24(a5)
80005870:	800207b7          	lui	a5,0x80020
80005874:	fe442603          	lw	a2,-28(s0)
80005878:	1d078693          	addi	a3,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
8000587c:	24400793          	li	a5,580
80005880:	02f607b3          	mul	a5,a2,a5
80005884:	00f687b3          	add	a5,a3,a5
80005888:	00e7a623          	sw	a4,12(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:324
        MessagePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE + applications[app_id].numTasks + 1;
8000588c:	800216b7          	lui	a3,0x80021
80005890:	fdc42703          	lw	a4,-36(s0)
80005894:	00070793          	mv	a5,a4
80005898:	00279793          	slli	a5,a5,0x2
8000589c:	00e787b3          	add	a5,a5,a4
800058a0:	00579793          	slli	a5,a5,0x5
800058a4:	b0868713          	addi	a4,a3,-1272 # 80020b08 <__stack_top+0xfffdf518>
800058a8:	00e787b3          	add	a5,a5,a4
800058ac:	0107a783          	lw	a5,16(a5)
800058b0:	00c78713          	addi	a4,a5,12
800058b4:	800207b7          	lui	a5,0x80020
800058b8:	fe442603          	lw	a2,-28(s0)
800058bc:	1d078693          	addi	a3,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
800058c0:	24400793          	li	a5,580
800058c4:	02f607b3          	mul	a5,a2,a5
800058c8:	00f687b3          	add	a5,a3,a5
800058cc:	00e7a823          	sw	a4,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:325
        MessagePipe[mySlot].header.service          = TASK_START;
800058d0:	800207b7          	lui	a5,0x80020
800058d4:	fe442683          	lw	a3,-28(s0)
800058d8:	1d078713          	addi	a4,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
800058dc:	24400793          	li	a5,580
800058e0:	02f687b3          	mul	a5,a3,a5
800058e4:	00f707b3          	add	a5,a4,a5
800058e8:	40000713          	li	a4,1024
800058ec:	00e7aa23          	sw	a4,20(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:326
        MessagePipe[mySlot].header.task_id          = i;
800058f0:	800207b7          	lui	a5,0x80020
800058f4:	fe442683          	lw	a3,-28(s0)
800058f8:	1d078713          	addi	a4,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
800058fc:	24400793          	li	a5,580
80005900:	02f687b3          	mul	a5,a3,a5
80005904:	00f707b3          	add	a5,a4,a5
80005908:	fec42703          	lw	a4,-20(s0)
8000590c:	00e7ac23          	sw	a4,24(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:327
        MessagePipe[mySlot].header.task_app_id      = app_id;
80005910:	800207b7          	lui	a5,0x80020
80005914:	fe442683          	lw	a3,-28(s0)
80005918:	1d078713          	addi	a4,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
8000591c:	24400793          	li	a5,580
80005920:	02f687b3          	mul	a5,a3,a5
80005924:	00f707b3          	add	a5,a4,a5
80005928:	fdc42703          	lw	a4,-36(s0)
8000592c:	02e7a423          	sw	a4,40(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:328
        MessagePipe[mySlot].msg.length              = applications[app_id].numTasks;
80005930:	800216b7          	lui	a3,0x80021
80005934:	fdc42703          	lw	a4,-36(s0)
80005938:	00070793          	mv	a5,a4
8000593c:	00279793          	slli	a5,a5,0x2
80005940:	00e787b3          	add	a5,a5,a4
80005944:	00579793          	slli	a5,a5,0x5
80005948:	b0868713          	addi	a4,a3,-1272 # 80020b08 <__stack_top+0xfffdf518>
8000594c:	00e787b3          	add	a5,a5,a4
80005950:	0107a703          	lw	a4,16(a5)
80005954:	800207b7          	lui	a5,0x80020
80005958:	fe442603          	lw	a2,-28(s0)
8000595c:	24400693          	li	a3,580
80005960:	02d606b3          	mul	a3,a2,a3
80005964:	1d078793          	addi	a5,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
80005968:	00f687b3          	add	a5,a3,a5
8000596c:	04e7a023          	sw	a4,64(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:329
        for(j = 0; j < applications[app_id].numTasks; j++){
80005970:	fe042423          	sw	zero,-24(s0)
80005974:	0880006f          	j	800059fc <API_ApplicationStart+0x244>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:330 (discriminator 3)
            MessagePipe[mySlot].msg.msg[j]          = applications[app_id].tasks[j].addr;
80005978:	80021737          	lui	a4,0x80021
8000597c:	fe842783          	lw	a5,-24(s0)
80005980:	fdc42683          	lw	a3,-36(s0)
80005984:	b0870613          	addi	a2,a4,-1272 # 80020b08 <__stack_top+0xfffdf518>
80005988:	00078713          	mv	a4,a5
8000598c:	00171713          	slli	a4,a4,0x1
80005990:	00f70733          	add	a4,a4,a5
80005994:	00271793          	slli	a5,a4,0x2
80005998:	00078713          	mv	a4,a5
8000599c:	00068793          	mv	a5,a3
800059a0:	00279793          	slli	a5,a5,0x2
800059a4:	00d787b3          	add	a5,a5,a3
800059a8:	00579793          	slli	a5,a5,0x5
800059ac:	00f707b3          	add	a5,a4,a5
800059b0:	00f607b3          	add	a5,a2,a5
800059b4:	0187a683          	lw	a3,24(a5)
800059b8:	80020637          	lui	a2,0x80020
800059bc:	fe442703          	lw	a4,-28(s0)
800059c0:	00070793          	mv	a5,a4
800059c4:	00379793          	slli	a5,a5,0x3
800059c8:	00e787b3          	add	a5,a5,a4
800059cc:	00479793          	slli	a5,a5,0x4
800059d0:	00e787b3          	add	a5,a5,a4
800059d4:	fe842703          	lw	a4,-24(s0)
800059d8:	00e787b3          	add	a5,a5,a4
800059dc:	01078793          	addi	a5,a5,16
800059e0:	1d060713          	addi	a4,a2,464 # 800201d0 <__stack_top+0xfffdebe0>
800059e4:	00279793          	slli	a5,a5,0x2
800059e8:	00f707b3          	add	a5,a4,a5
800059ec:	00d7a223          	sw	a3,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:329 (discriminator 3)
        for(j = 0; j < applications[app_id].numTasks; j++){
800059f0:	fe842783          	lw	a5,-24(s0)
800059f4:	00178793          	addi	a5,a5,1
800059f8:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:329 (discriminator 1)
800059fc:	800216b7          	lui	a3,0x80021
80005a00:	fdc42703          	lw	a4,-36(s0)
80005a04:	00070793          	mv	a5,a4
80005a08:	00279793          	slli	a5,a5,0x2
80005a0c:	00e787b3          	add	a5,a5,a4
80005a10:	00579793          	slli	a5,a5,0x5
80005a14:	b0868713          	addi	a4,a3,-1272 # 80020b08 <__stack_top+0xfffdf518>
80005a18:	00e787b3          	add	a5,a5,a4
80005a1c:	0107a783          	lw	a5,16(a5)
80005a20:	fe842703          	lw	a4,-24(s0)
80005a24:	f4f76ae3          	bltu	a4,a5,80005978 <API_ApplicationStart+0x1c0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:332 (discriminator 2)
        }
        API_PushSendQueue(MESSAGE, mySlot);
80005a28:	fe442583          	lw	a1,-28(s0)
80005a2c:	20200537          	lui	a0,0x20200
80005a30:	da5fd0ef          	jal	ra,800037d4 <API_PushSendQueue>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:333 (discriminator 2)
        vPortExitCritical();
80005a34:	bb9fb0ef          	jal	ra,800015ec <vPortExitCritical>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:311 (discriminator 2)
    for(i = 0; i < applications[app_id].numTasks; i++){
80005a38:	fec42783          	lw	a5,-20(s0)
80005a3c:	00178793          	addi	a5,a5,1
80005a40:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:311 (discriminator 1)
80005a44:	800216b7          	lui	a3,0x80021
80005a48:	fdc42703          	lw	a4,-36(s0)
80005a4c:	00070793          	mv	a5,a4
80005a50:	00279793          	slli	a5,a5,0x2
80005a54:	00e787b3          	add	a5,a5,a4
80005a58:	00579793          	slli	a5,a5,0x5
80005a5c:	b0868713          	addi	a4,a3,-1272 # 80020b08 <__stack_top+0xfffdf518>
80005a60:	00e787b3          	add	a5,a5,a4
80005a64:	0107a783          	lw	a5,16(a5)
80005a68:	fec42703          	lw	a4,-20(s0)
80005a6c:	d6f764e3          	bltu	a4,a5,800057d4 <API_ApplicationStart+0x1c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:335
    }
}
80005a70:	00000013          	nop
80005a74:	02c12083          	lw	ra,44(sp)
80005a78:	02812403          	lw	s0,40(sp)
80005a7c:	03010113          	addi	sp,sp,48
80005a80:	00008067          	ret

80005a84 <API_TaskListInit>:
API_TaskListInit():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:13
#include "chronos.h"

// Stores information about each running task
//extern volatile Task TaskList[ NUM_MAX_TASKS ];

void API_TaskListInit(){
80005a84:	fe010113          	addi	sp,sp,-32
80005a88:	00812e23          	sw	s0,28(sp)
80005a8c:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:15
    unsigned int i, j;
    for (i = 0; i < NUM_MAX_TASKS; i++){
80005a90:	fe042623          	sw	zero,-20(s0)
80005a94:	0880006f          	j	80005b1c <API_TaskListInit+0x98>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:16
        TaskList[i].status = TASK_SLOT_EMPTY;
80005a98:	800216b7          	lui	a3,0x80021
80005a9c:	fec42703          	lw	a4,-20(s0)
80005aa0:	00070793          	mv	a5,a4
80005aa4:	00479793          	slli	a5,a5,0x4
80005aa8:	40e787b3          	sub	a5,a5,a4
80005aac:	00379793          	slli	a5,a5,0x3
80005ab0:	28868713          	addi	a4,a3,648 # 80021288 <__stack_top+0xfffdfc98>
80005ab4:	00e787b3          	add	a5,a5,a4
80005ab8:	0007a023          	sw	zero,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:17
        for (j = 0; j < NUM_MAX_APP_TASKS; j++){
80005abc:	fe042423          	sw	zero,-24(s0)
80005ac0:	0440006f          	j	80005b04 <API_TaskListInit+0x80>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:18 (discriminator 3)
            TaskList[i].PendingReq[j] = FALSE;
80005ac4:	800216b7          	lui	a3,0x80021
80005ac8:	fec42703          	lw	a4,-20(s0)
80005acc:	00070793          	mv	a5,a4
80005ad0:	00479793          	slli	a5,a5,0x4
80005ad4:	40e787b3          	sub	a5,a5,a4
80005ad8:	00179793          	slli	a5,a5,0x1
80005adc:	fe842703          	lw	a4,-24(s0)
80005ae0:	00e787b3          	add	a5,a5,a4
80005ae4:	00878793          	addi	a5,a5,8
80005ae8:	28868713          	addi	a4,a3,648 # 80021288 <__stack_top+0xfffdfc98>
80005aec:	00279793          	slli	a5,a5,0x2
80005af0:	00f707b3          	add	a5,a4,a5
80005af4:	0007a223          	sw	zero,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:17 (discriminator 3)
        for (j = 0; j < NUM_MAX_APP_TASKS; j++){
80005af8:	fe842783          	lw	a5,-24(s0)
80005afc:	00178793          	addi	a5,a5,1
80005b00:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:17 (discriminator 1)
80005b04:	fe842703          	lw	a4,-24(s0)
80005b08:	00900793          	li	a5,9
80005b0c:	fae7fce3          	bleu	a4,a5,80005ac4 <API_TaskListInit+0x40>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 2)
    for (i = 0; i < NUM_MAX_TASKS; i++){
80005b10:	fec42783          	lw	a5,-20(s0)
80005b14:	00178793          	addi	a5,a5,1
80005b18:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 1)
80005b1c:	fec42703          	lw	a4,-20(s0)
80005b20:	00400793          	li	a5,4
80005b24:	f6e7fae3          	bleu	a4,a5,80005a98 <API_TaskListInit+0x14>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:21
        }
    }
    return;
80005b28:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:22
}
80005b2c:	01c12403          	lw	s0,28(sp)
80005b30:	02010113          	addi	sp,sp,32
80005b34:	00008067          	ret

80005b38 <API_GetCurrentTaskSlot>:
API_GetCurrentTaskSlot():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:24

unsigned int API_GetCurrentTaskSlot(){
80005b38:	fe010113          	addi	sp,sp,-32
80005b3c:	00112e23          	sw	ra,28(sp)
80005b40:	00812c23          	sw	s0,24(sp)
80005b44:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:26
    // The handle of the currently running ( calling ) task on the kernel.
    TaskHandle_t xHandle = xTaskGetCurrentTaskHandle();
80005b48:	860fd0ef          	jal	ra,80002ba8 <xTaskGetCurrentTaskHandle>
80005b4c:	fea42423          	sw	a0,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:27
    unsigned int i = 0;
80005b50:	fe042623          	sw	zero,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:28
    for ( i = 0 ; i < NUM_MAX_TASKS ; i++ ) {
80005b54:	fe042623          	sw	zero,-20(s0)
80005b58:	0440006f          	j	80005b9c <API_GetCurrentTaskSlot+0x64>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:29
        if ( TaskList[ i ].TaskHandler == xHandle ) {
80005b5c:	800217b7          	lui	a5,0x80021
80005b60:	fec42703          	lw	a4,-20(s0)
80005b64:	28878693          	addi	a3,a5,648 # 80021288 <__stack_top+0xfffdfc98>
80005b68:	00070793          	mv	a5,a4
80005b6c:	00479793          	slli	a5,a5,0x4
80005b70:	40e787b3          	sub	a5,a5,a4
80005b74:	00379793          	slli	a5,a5,0x3
80005b78:	00f687b3          	add	a5,a3,a5
80005b7c:	00c7a783          	lw	a5,12(a5)
80005b80:	fe842703          	lw	a4,-24(s0)
80005b84:	00f71663          	bne	a4,a5,80005b90 <API_GetCurrentTaskSlot+0x58>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:30
            return( i );
80005b88:	fec42783          	lw	a5,-20(s0)
80005b8c:	0200006f          	j	80005bac <API_GetCurrentTaskSlot+0x74>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:28 (discriminator 2)
    for ( i = 0 ; i < NUM_MAX_TASKS ; i++ ) {
80005b90:	fec42783          	lw	a5,-20(s0)
80005b94:	00178793          	addi	a5,a5,1
80005b98:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:28 (discriminator 1)
80005b9c:	fec42703          	lw	a4,-20(s0)
80005ba0:	00400793          	li	a5,4
80005ba4:	fae7fce3          	bleu	a4,a5,80005b5c <API_GetCurrentTaskSlot+0x24>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:33
        }
    }
    return ERRO;
80005ba8:	fff00793          	li	a5,-1
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:34
}
80005bac:	00078513          	mv	a0,a5
80005bb0:	01c12083          	lw	ra,28(sp)
80005bb4:	01812403          	lw	s0,24(sp)
80005bb8:	02010113          	addi	sp,sp,32
80005bbc:	00008067          	ret

80005bc0 <API_GetFreeTaskSlot>:
API_GetFreeTaskSlot():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:36

unsigned int API_GetFreeTaskSlot(){
80005bc0:	fe010113          	addi	sp,sp,-32
80005bc4:	00812e23          	sw	s0,28(sp)
80005bc8:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:38
    unsigned int i;
    for (i = 0; i < NUM_MAX_TASKS; i++){
80005bcc:	fe042623          	sw	zero,-20(s0)
80005bd0:	0400006f          	j	80005c10 <API_GetFreeTaskSlot+0x50>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:39
        if (TaskList[i].status == TASK_SLOT_EMPTY){
80005bd4:	800216b7          	lui	a3,0x80021
80005bd8:	fec42703          	lw	a4,-20(s0)
80005bdc:	00070793          	mv	a5,a4
80005be0:	00479793          	slli	a5,a5,0x4
80005be4:	40e787b3          	sub	a5,a5,a4
80005be8:	00379793          	slli	a5,a5,0x3
80005bec:	28868713          	addi	a4,a3,648 # 80021288 <__stack_top+0xfffdfc98>
80005bf0:	00e787b3          	add	a5,a5,a4
80005bf4:	0007a783          	lw	a5,0(a5)
80005bf8:	00079663          	bnez	a5,80005c04 <API_GetFreeTaskSlot+0x44>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:40
            return i;
80005bfc:	fec42783          	lw	a5,-20(s0)
80005c00:	0200006f          	j	80005c20 <API_GetFreeTaskSlot+0x60>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:38 (discriminator 2)
    for (i = 0; i < NUM_MAX_TASKS; i++){
80005c04:	fec42783          	lw	a5,-20(s0)
80005c08:	00178793          	addi	a5,a5,1
80005c0c:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:38 (discriminator 1)
80005c10:	fec42703          	lw	a4,-20(s0)
80005c14:	00400793          	li	a5,4
80005c18:	fae7fee3          	bleu	a4,a5,80005bd4 <API_GetFreeTaskSlot+0x14>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:43
        }
    }
    return ERRO;
80005c1c:	fff00793          	li	a5,-1
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:44
}
80005c20:	00078513          	mv	a0,a5
80005c24:	01c12403          	lw	s0,28(sp)
80005c28:	02010113          	addi	sp,sp,32
80005c2c:	00008067          	ret

80005c30 <API_TaskAllocation>:
API_TaskAllocation():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:46

unsigned int API_TaskAllocation(unsigned int task_id, unsigned int txt_size, unsigned int bss_size, unsigned int start_point, unsigned int task_app_id){
80005c30:	fc010113          	addi	sp,sp,-64
80005c34:	02112e23          	sw	ra,60(sp)
80005c38:	02812c23          	sw	s0,56(sp)
80005c3c:	04010413          	addi	s0,sp,64
80005c40:	fca42e23          	sw	a0,-36(s0)
80005c44:	fcb42c23          	sw	a1,-40(s0)
80005c48:	fcc42a23          	sw	a2,-44(s0)
80005c4c:	fcd42823          	sw	a3,-48(s0)
80005c50:	fce42623          	sw	a4,-52(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:47
    unsigned int tslot = API_GetFreeTaskSlot();
80005c54:	f6dff0ef          	jal	ra,80005bc0 <API_GetFreeTaskSlot>
80005c58:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:48
    TaskList[tslot].status = TASK_SLOT_WAITING_START;
80005c5c:	800216b7          	lui	a3,0x80021
80005c60:	fec42703          	lw	a4,-20(s0)
80005c64:	00070793          	mv	a5,a4
80005c68:	00479793          	slli	a5,a5,0x4
80005c6c:	40e787b3          	sub	a5,a5,a4
80005c70:	00379793          	slli	a5,a5,0x3
80005c74:	28868713          	addi	a4,a3,648 # 80021288 <__stack_top+0xfffdfc98>
80005c78:	00e787b3          	add	a5,a5,a4
80005c7c:	00200713          	li	a4,2
80005c80:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:49
    TaskList[tslot].waitingMsg = FALSE;
80005c84:	800216b7          	lui	a3,0x80021
80005c88:	fec42703          	lw	a4,-20(s0)
80005c8c:	00070793          	mv	a5,a4
80005c90:	00479793          	slli	a5,a5,0x4
80005c94:	40e787b3          	sub	a5,a5,a4
80005c98:	00379793          	slli	a5,a5,0x3
80005c9c:	28868713          	addi	a4,a3,648 # 80021288 <__stack_top+0xfffdfc98>
80005ca0:	00e787b3          	add	a5,a5,a4
80005ca4:	0007a823          	sw	zero,16(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:50
    TaskList[tslot].TaskID = task_id;
80005ca8:	800217b7          	lui	a5,0x80021
80005cac:	fec42703          	lw	a4,-20(s0)
80005cb0:	28878693          	addi	a3,a5,648 # 80021288 <__stack_top+0xfffdfc98>
80005cb4:	00070793          	mv	a5,a4
80005cb8:	00479793          	slli	a5,a5,0x4
80005cbc:	40e787b3          	sub	a5,a5,a4
80005cc0:	00379793          	slli	a5,a5,0x3
80005cc4:	00f687b3          	add	a5,a3,a5
80005cc8:	fdc42703          	lw	a4,-36(s0)
80005ccc:	00e7a223          	sw	a4,4(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:51
    TaskList[tslot].AppID = task_app_id;
80005cd0:	800217b7          	lui	a5,0x80021
80005cd4:	fec42703          	lw	a4,-20(s0)
80005cd8:	28878693          	addi	a3,a5,648 # 80021288 <__stack_top+0xfffdfc98>
80005cdc:	00070793          	mv	a5,a4
80005ce0:	00479793          	slli	a5,a5,0x4
80005ce4:	40e787b3          	sub	a5,a5,a4
80005ce8:	00379793          	slli	a5,a5,0x3
80005cec:	00f687b3          	add	a5,a3,a5
80005cf0:	fcc42703          	lw	a4,-52(s0)
80005cf4:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:52
    TaskList[tslot].taskSize = 4 * (txt_size + bss_size); // it multiply by four because each word has 32 bits and the memory is addressed by byte - so each word is composed by 4 addresses
80005cf8:	fd842703          	lw	a4,-40(s0)
80005cfc:	fd442783          	lw	a5,-44(s0)
80005d00:	00f707b3          	add	a5,a4,a5
80005d04:	00279693          	slli	a3,a5,0x2
80005d08:	800217b7          	lui	a5,0x80021
80005d0c:	fec42703          	lw	a4,-20(s0)
80005d10:	28878613          	addi	a2,a5,648 # 80021288 <__stack_top+0xfffdfc98>
80005d14:	00070793          	mv	a5,a4
80005d18:	00479793          	slli	a5,a5,0x4
80005d1c:	40e787b3          	sub	a5,a5,a4
80005d20:	00379793          	slli	a5,a5,0x3
80005d24:	00f607b3          	add	a5,a2,a5
80005d28:	00d7ac23          	sw	a3,24(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:54

    TaskList[tslot].taskAddr = (unsigned int)pvPortMalloc(TaskList[tslot].taskSize); //vPortFree(TaskList[tslot].taskAddr);    
80005d2c:	800217b7          	lui	a5,0x80021
80005d30:	fec42703          	lw	a4,-20(s0)
80005d34:	28878693          	addi	a3,a5,648 # 80021288 <__stack_top+0xfffdfc98>
80005d38:	00070793          	mv	a5,a4
80005d3c:	00479793          	slli	a5,a5,0x4
80005d40:	40e787b3          	sub	a5,a5,a4
80005d44:	00379793          	slli	a5,a5,0x3
80005d48:	00f687b3          	add	a5,a3,a5
80005d4c:	0187a783          	lw	a5,24(a5)
80005d50:	00078513          	mv	a0,a5
80005d54:	cfcfb0ef          	jal	ra,80001250 <pvPortMalloc>
80005d58:	00050793          	mv	a5,a0
80005d5c:	00078613          	mv	a2,a5
80005d60:	800217b7          	lui	a5,0x80021
80005d64:	fec42703          	lw	a4,-20(s0)
80005d68:	28878693          	addi	a3,a5,648 # 80021288 <__stack_top+0xfffdfc98>
80005d6c:	00070793          	mv	a5,a4
80005d70:	00479793          	slli	a5,a5,0x4
80005d74:	40e787b3          	sub	a5,a5,a4
80005d78:	00379793          	slli	a5,a5,0x3
80005d7c:	00f687b3          	add	a5,a3,a5
80005d80:	00c7ae23          	sw	a2,28(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:55
    TaskList[tslot].mainAddr =  TaskList[tslot].taskAddr + (4 * start_point);
80005d84:	800217b7          	lui	a5,0x80021
80005d88:	fec42703          	lw	a4,-20(s0)
80005d8c:	28878693          	addi	a3,a5,648 # 80021288 <__stack_top+0xfffdfc98>
80005d90:	00070793          	mv	a5,a4
80005d94:	00479793          	slli	a5,a5,0x4
80005d98:	40e787b3          	sub	a5,a5,a4
80005d9c:	00379793          	slli	a5,a5,0x3
80005da0:	00f687b3          	add	a5,a3,a5
80005da4:	01c7a703          	lw	a4,28(a5)
80005da8:	fd042783          	lw	a5,-48(s0)
80005dac:	00279793          	slli	a5,a5,0x2
80005db0:	00f706b3          	add	a3,a4,a5
80005db4:	80021637          	lui	a2,0x80021
80005db8:	fec42703          	lw	a4,-20(s0)
80005dbc:	00070793          	mv	a5,a4
80005dc0:	00479793          	slli	a5,a5,0x4
80005dc4:	40e787b3          	sub	a5,a5,a4
80005dc8:	00379793          	slli	a5,a5,0x3
80005dcc:	28860713          	addi	a4,a2,648 # 80021288 <__stack_top+0xfffdfc98>
80005dd0:	00e787b3          	add	a5,a5,a4
80005dd4:	02d7a023          	sw	a3,32(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:57

    return tslot;
80005dd8:	fec42783          	lw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:58
}
80005ddc:	00078513          	mv	a0,a5
80005de0:	03c12083          	lw	ra,60(sp)
80005de4:	03812403          	lw	s0,56(sp)
80005de8:	04010113          	addi	sp,sp,64
80005dec:	00008067          	ret

80005df0 <API_GetTaskSlot>:
API_GetTaskSlot():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:60

unsigned int API_GetTaskSlot(unsigned int task_id, unsigned int app_id){
80005df0:	fd010113          	addi	sp,sp,-48
80005df4:	02812623          	sw	s0,44(sp)
80005df8:	03010413          	addi	s0,sp,48
80005dfc:	fca42e23          	sw	a0,-36(s0)
80005e00:	fcb42c23          	sw	a1,-40(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:62
    unsigned int i;
    for( i = 0; i < NUM_MAX_APP_TASKS; i++){
80005e04:	fe042623          	sw	zero,-20(s0)
80005e08:	0980006f          	j	80005ea0 <API_GetTaskSlot+0xb0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:63
        if(task_id == TaskList[i].TaskID && app_id == TaskList[i].AppID && TaskList[i].status != TASK_SLOT_EMPTY)
80005e0c:	800217b7          	lui	a5,0x80021
80005e10:	fec42703          	lw	a4,-20(s0)
80005e14:	28878693          	addi	a3,a5,648 # 80021288 <__stack_top+0xfffdfc98>
80005e18:	00070793          	mv	a5,a4
80005e1c:	00479793          	slli	a5,a5,0x4
80005e20:	40e787b3          	sub	a5,a5,a4
80005e24:	00379793          	slli	a5,a5,0x3
80005e28:	00f687b3          	add	a5,a3,a5
80005e2c:	0047a783          	lw	a5,4(a5)
80005e30:	fdc42703          	lw	a4,-36(s0)
80005e34:	06f71063          	bne	a4,a5,80005e94 <API_GetTaskSlot+0xa4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:63 (discriminator 1)
80005e38:	800217b7          	lui	a5,0x80021
80005e3c:	fec42703          	lw	a4,-20(s0)
80005e40:	28878693          	addi	a3,a5,648 # 80021288 <__stack_top+0xfffdfc98>
80005e44:	00070793          	mv	a5,a4
80005e48:	00479793          	slli	a5,a5,0x4
80005e4c:	40e787b3          	sub	a5,a5,a4
80005e50:	00379793          	slli	a5,a5,0x3
80005e54:	00f687b3          	add	a5,a3,a5
80005e58:	0087a783          	lw	a5,8(a5)
80005e5c:	fd842703          	lw	a4,-40(s0)
80005e60:	02f71a63          	bne	a4,a5,80005e94 <API_GetTaskSlot+0xa4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:63 (discriminator 2)
80005e64:	800216b7          	lui	a3,0x80021
80005e68:	fec42703          	lw	a4,-20(s0)
80005e6c:	00070793          	mv	a5,a4
80005e70:	00479793          	slli	a5,a5,0x4
80005e74:	40e787b3          	sub	a5,a5,a4
80005e78:	00379793          	slli	a5,a5,0x3
80005e7c:	28868713          	addi	a4,a3,648 # 80021288 <__stack_top+0xfffdfc98>
80005e80:	00e787b3          	add	a5,a5,a4
80005e84:	0007a783          	lw	a5,0(a5)
80005e88:	00078663          	beqz	a5,80005e94 <API_GetTaskSlot+0xa4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:64
            return i;
80005e8c:	fec42783          	lw	a5,-20(s0)
80005e90:	0200006f          	j	80005eb0 <API_GetTaskSlot+0xc0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:62 (discriminator 2)
    for( i = 0; i < NUM_MAX_APP_TASKS; i++){
80005e94:	fec42783          	lw	a5,-20(s0)
80005e98:	00178793          	addi	a5,a5,1
80005e9c:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:62 (discriminator 1)
80005ea0:	fec42703          	lw	a4,-20(s0)
80005ea4:	00900793          	li	a5,9
80005ea8:	f6e7f2e3          	bleu	a4,a5,80005e0c <API_GetTaskSlot+0x1c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:66
    }
    return ERRO;
80005eac:	fff00793          	li	a5,-1
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:67
}
80005eb0:	00078513          	mv	a0,a5
80005eb4:	02c12403          	lw	s0,44(sp)
80005eb8:	03010113          	addi	sp,sp,48
80005ebc:	00008067          	ret

80005ec0 <API_TaskStart>:
API_TaskStart():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:69

void API_TaskStart(unsigned int slot){
80005ec0:	fe010113          	addi	sp,sp,-32
80005ec4:	00112e23          	sw	ra,28(sp)
80005ec8:	00812c23          	sw	s0,24(sp)
80005ecc:	02010413          	addi	s0,sp,32
80005ed0:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:70
    TaskList[slot].status = TASK_SLOT_RUNNING;
80005ed4:	800216b7          	lui	a3,0x80021
80005ed8:	fec42703          	lw	a4,-20(s0)
80005edc:	00070793          	mv	a5,a4
80005ee0:	00479793          	slli	a5,a5,0x4
80005ee4:	40e787b3          	sub	a5,a5,a4
80005ee8:	00379793          	slli	a5,a5,0x3
80005eec:	28868713          	addi	a4,a3,648 # 80021288 <__stack_top+0xfffdfc98>
80005ef0:	00e787b3          	add	a5,a5,a4
80005ef4:	00100713          	li	a4,1
80005ef8:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:71
    xTaskCreate(TaskList[slot].mainAddr,
80005efc:	800216b7          	lui	a3,0x80021
80005f00:	fec42703          	lw	a4,-20(s0)
80005f04:	00070793          	mv	a5,a4
80005f08:	00479793          	slli	a5,a5,0x4
80005f0c:	40e787b3          	sub	a5,a5,a4
80005f10:	00379793          	slli	a5,a5,0x3
80005f14:	28868713          	addi	a4,a3,648 # 80021288 <__stack_top+0xfffdfc98>
80005f18:	00e787b3          	add	a5,a5,a4
80005f1c:	0207a783          	lw	a5,32(a5)
80005f20:	00078513          	mv	a0,a5
80005f24:	fec42703          	lw	a4,-20(s0)
80005f28:	00070793          	mv	a5,a4
80005f2c:	00479793          	slli	a5,a5,0x4
80005f30:	40e787b3          	sub	a5,a5,a4
80005f34:	00379793          	slli	a5,a5,0x3
80005f38:	80021737          	lui	a4,0x80021
80005f3c:	28870713          	addi	a4,a4,648 # 80021288 <__stack_top+0xfffdfc98>
80005f40:	00e787b3          	add	a5,a5,a4
80005f44:	00c78793          	addi	a5,a5,12
80005f48:	00000893          	li	a7,0
80005f4c:	00000813          	li	a6,0
80005f50:	00100713          	li	a4,1
80005f54:	00000693          	li	a3,0
80005f58:	40000613          	li	a2,1024
80005f5c:	800075b7          	lui	a1,0x80007
80005f60:	cdc58593          	addi	a1,a1,-804 # 80006cdc <__stack_top+0xfffc56ec>
80005f64:	eedfb0ef          	jal	ra,80001e50 <xTaskGenericCreate>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:77
                "LaTask",
                1024,
                NULL,
                tskIDLE_PRIORITY+1,
                &TaskList[slot].TaskHandler);
    return;
80005f68:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:78
}
80005f6c:	01c12083          	lw	ra,28(sp)
80005f70:	01812403          	lw	s0,24(sp)
80005f74:	02010113          	addi	sp,sp,32
80005f78:	00008067          	ret

80005f7c <API_FinishRunningTask>:
API_FinishRunningTask():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:81


void API_FinishRunningTask(){
80005f7c:	fe010113          	addi	sp,sp,-32
80005f80:	00112e23          	sw	ra,28(sp)
80005f84:	00812c23          	sw	s0,24(sp)
80005f88:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:82
    unsigned int slot = API_GetCurrentTaskSlot();
80005f8c:	badff0ef          	jal	ra,80005b38 <API_GetCurrentTaskSlot>
80005f90:	fea42623          	sw	a0,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:83
    while(API_checkPipe(slot) == 1){
80005f94:	00c0006f          	j	80005fa0 <API_FinishRunningTask+0x24>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:84
        vTaskDelay(1);
80005f98:	00100513          	li	a0,1
80005f9c:	9acfc0ef          	jal	ra,80002148 <vTaskDelay>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:83
    while(API_checkPipe(slot) == 1){
80005fa0:	fec42503          	lw	a0,-20(s0)
80005fa4:	488000ef          	jal	ra,8000642c <API_checkPipe>
80005fa8:	00050713          	mv	a4,a0
80005fac:	00100793          	li	a5,1
80005fb0:	fef704e3          	beq	a4,a5,80005f98 <API_FinishRunningTask+0x1c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:86
    }
    vPortFree(TaskList[slot].taskAddr);
80005fb4:	800217b7          	lui	a5,0x80021
80005fb8:	fec42703          	lw	a4,-20(s0)
80005fbc:	28878693          	addi	a3,a5,648 # 80021288 <__stack_top+0xfffdfc98>
80005fc0:	00070793          	mv	a5,a4
80005fc4:	00479793          	slli	a5,a5,0x4
80005fc8:	40e787b3          	sub	a5,a5,a4
80005fcc:	00379793          	slli	a5,a5,0x3
80005fd0:	00f687b3          	add	a5,a3,a5
80005fd4:	01c7a783          	lw	a5,28(a5)
80005fd8:	00078513          	mv	a0,a5
80005fdc:	c50fb0ef          	jal	ra,8000142c <vPortFree>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:87
    API_SendFinishTask(TaskList[slot].TaskID, TaskList[slot].AppID);
80005fe0:	800217b7          	lui	a5,0x80021
80005fe4:	fec42703          	lw	a4,-20(s0)
80005fe8:	28878693          	addi	a3,a5,648 # 80021288 <__stack_top+0xfffdfc98>
80005fec:	00070793          	mv	a5,a4
80005ff0:	00479793          	slli	a5,a5,0x4
80005ff4:	40e787b3          	sub	a5,a5,a4
80005ff8:	00379793          	slli	a5,a5,0x3
80005ffc:	00f687b3          	add	a5,a3,a5
80006000:	0047a603          	lw	a2,4(a5)
80006004:	800217b7          	lui	a5,0x80021
80006008:	fec42703          	lw	a4,-20(s0)
8000600c:	28878693          	addi	a3,a5,648 # 80021288 <__stack_top+0xfffdfc98>
80006010:	00070793          	mv	a5,a4
80006014:	00479793          	slli	a5,a5,0x4
80006018:	40e787b3          	sub	a5,a5,a4
8000601c:	00379793          	slli	a5,a5,0x3
80006020:	00f687b3          	add	a5,a3,a5
80006024:	0087a783          	lw	a5,8(a5)
80006028:	00078593          	mv	a1,a5
8000602c:	00060513          	mv	a0,a2
80006030:	de5fd0ef          	jal	ra,80003e14 <API_SendFinishTask>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:88
    printsvsv("Task ", TaskList[slot].TaskID, "deleted with sucsess! From application ", TaskList[slot].AppID);
80006034:	800217b7          	lui	a5,0x80021
80006038:	fec42703          	lw	a4,-20(s0)
8000603c:	28878693          	addi	a3,a5,648 # 80021288 <__stack_top+0xfffdfc98>
80006040:	00070793          	mv	a5,a4
80006044:	00479793          	slli	a5,a5,0x4
80006048:	40e787b3          	sub	a5,a5,a4
8000604c:	00379793          	slli	a5,a5,0x3
80006050:	00f687b3          	add	a5,a3,a5
80006054:	0047a783          	lw	a5,4(a5)
80006058:	00078593          	mv	a1,a5
8000605c:	800217b7          	lui	a5,0x80021
80006060:	fec42703          	lw	a4,-20(s0)
80006064:	28878693          	addi	a3,a5,648 # 80021288 <__stack_top+0xfffdfc98>
80006068:	00070793          	mv	a5,a4
8000606c:	00479793          	slli	a5,a5,0x4
80006070:	40e787b3          	sub	a5,a5,a4
80006074:	00379793          	slli	a5,a5,0x3
80006078:	00f687b3          	add	a5,a3,a5
8000607c:	0087a783          	lw	a5,8(a5)
80006080:	00078693          	mv	a3,a5
80006084:	800077b7          	lui	a5,0x80007
80006088:	ce478613          	addi	a2,a5,-796 # 80006ce4 <__stack_top+0xfffc56f4>
8000608c:	800077b7          	lui	a5,0x80007
80006090:	d0c78513          	addi	a0,a5,-756 # 80006d0c <__stack_top+0xfffc571c>
80006094:	df9fc0ef          	jal	ra,80002e8c <printsvsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:89
    TaskList[slot].status = TASK_SLOT_EMPTY;
80006098:	800216b7          	lui	a3,0x80021
8000609c:	fec42703          	lw	a4,-20(s0)
800060a0:	00070793          	mv	a5,a4
800060a4:	00479793          	slli	a5,a5,0x4
800060a8:	40e787b3          	sub	a5,a5,a4
800060ac:	00379793          	slli	a5,a5,0x3
800060b0:	28868713          	addi	a4,a3,648 # 80021288 <__stack_top+0xfffdfc98>
800060b4:	00e787b3          	add	a5,a5,a4
800060b8:	0007a023          	sw	zero,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:90
    vTaskDelete(TaskList[slot].TaskHandler);
800060bc:	800217b7          	lui	a5,0x80021
800060c0:	fec42703          	lw	a4,-20(s0)
800060c4:	28878693          	addi	a3,a5,648 # 80021288 <__stack_top+0xfffdfc98>
800060c8:	00070793          	mv	a5,a4
800060cc:	00479793          	slli	a5,a5,0x4
800060d0:	40e787b3          	sub	a5,a5,a4
800060d4:	00379793          	slli	a5,a5,0x3
800060d8:	00f687b3          	add	a5,a3,a5
800060dc:	00c7a783          	lw	a5,12(a5)
800060e0:	00078513          	mv	a0,a5
800060e4:	f89fb0ef          	jal	ra,8000206c <vTaskDelete>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:91
    return;
800060e8:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/applications.c:92
}
800060ec:	01c12083          	lw	ra,28(sp)
800060f0:	01812403          	lw	s0,24(sp)
800060f4:	02010113          	addi	sp,sp,32
800060f8:	00008067          	ret

800060fc <API_PipeInitialization>:
API_PipeInitialization():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:11
extern volatile ServicePacket ServicePipe[PIPE_SIZE];
extern unsigned int messageID;

////////////////////////////////////////////////////////////
// Initialize the PIPE, setting the status of each slot to FREE
void API_PipeInitialization(){
800060fc:	fe010113          	addi	sp,sp,-32
80006100:	00812e23          	sw	s0,28(sp)
80006104:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:13
    int i;
    messageID = 0;
80006108:	800207b7          	lui	a5,0x80020
8000610c:	1407ae23          	sw	zero,348(a5) # 8002015c <__stack_top+0xfffdeb6c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:14
    for( i = 0; i < PIPE_SIZE; i++ ){
80006110:	fe042623          	sw	zero,-20(s0)
80006114:	0740006f          	j	80006188 <API_PipeInitialization+0x8c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:15 (discriminator 3)
        MessagePipe[i].status = PIPE_FREE;
80006118:	800207b7          	lui	a5,0x80020
8000611c:	fec42683          	lw	a3,-20(s0)
80006120:	24400713          	li	a4,580
80006124:	02e68733          	mul	a4,a3,a4
80006128:	1d078793          	addi	a5,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
8000612c:	00f707b3          	add	a5,a4,a5
80006130:	fff00713          	li	a4,-1
80006134:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:16 (discriminator 3)
        MessagePipe[i].msgID  = 0;
80006138:	800207b7          	lui	a5,0x80020
8000613c:	fec42683          	lw	a3,-20(s0)
80006140:	1d078713          	addi	a4,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
80006144:	24400793          	li	a5,580
80006148:	02f687b3          	mul	a5,a3,a5
8000614c:	00f707b3          	add	a5,a4,a5
80006150:	0007a423          	sw	zero,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:17 (discriminator 3)
        ServicePipe[i].status = PIPE_FREE;
80006154:	800206b7          	lui	a3,0x80020
80006158:	fec42703          	lw	a4,-20(s0)
8000615c:	00070793          	mv	a5,a4
80006160:	00479793          	slli	a5,a5,0x4
80006164:	40e787b3          	sub	a5,a5,a4
80006168:	00279793          	slli	a5,a5,0x2
8000616c:	06c68713          	addi	a4,a3,108 # 8002006c <__stack_top+0xfffdea7c>
80006170:	00e787b3          	add	a5,a5,a4
80006174:	fff00713          	li	a4,-1
80006178:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:14 (discriminator 3)
    for( i = 0; i < PIPE_SIZE; i++ ){
8000617c:	fec42783          	lw	a5,-20(s0)
80006180:	00178793          	addi	a5,a5,1
80006184:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:14 (discriminator 1)
80006188:	fec42703          	lw	a4,-20(s0)
8000618c:	00300793          	li	a5,3
80006190:	f8e7d4e3          	ble	a4,a5,80006118 <API_PipeInitialization+0x1c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:19
    }
    return;
80006194:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:20
}
80006198:	01c12403          	lw	s0,28(sp)
8000619c:	02010113          	addi	sp,sp,32
800061a0:	00008067          	ret

800061a4 <API_GetMessageSlot>:
API_GetMessageSlot():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:24

////////////////////////////////////////////////////////////
// Returns a free Message slot 
unsigned int API_GetMessageSlot(){
800061a4:	fe010113          	addi	sp,sp,-32
800061a8:	00812e23          	sw	s0,28(sp)
800061ac:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:26
    int i;
    unsigned int sel = PIPE_FULL;
800061b0:	fdfe07b7          	lui	a5,0xfdfe0
800061b4:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e80d>
800061b8:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:27
    for( i = 0; i < PIPE_SIZE; i++ ){
800061bc:	fe042623          	sw	zero,-20(s0)
800061c0:	0980006f          	j	80006258 <API_GetMessageSlot+0xb4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:28
        if (MessagePipe[i].status == PIPE_FREE){
800061c4:	800207b7          	lui	a5,0x80020
800061c8:	fec42683          	lw	a3,-20(s0)
800061cc:	24400713          	li	a4,580
800061d0:	02e68733          	mul	a4,a3,a4
800061d4:	1d078793          	addi	a5,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
800061d8:	00f707b3          	add	a5,a4,a5
800061dc:	0007a703          	lw	a4,0(a5)
800061e0:	fff00793          	li	a5,-1
800061e4:	06f71463          	bne	a4,a5,8000624c <API_GetMessageSlot+0xa8>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:29
            MessagePipe[i].status = PIPE_OCCUPIED;
800061e8:	800207b7          	lui	a5,0x80020
800061ec:	fec42683          	lw	a3,-20(s0)
800061f0:	24400713          	li	a4,580
800061f4:	02e68733          	mul	a4,a3,a4
800061f8:	1d078793          	addi	a5,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
800061fc:	00f707b3          	add	a5,a4,a5
80006200:	00100713          	li	a4,1
80006204:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:30
            MessagePipe[i].msgID = messageID;
80006208:	800207b7          	lui	a5,0x80020
8000620c:	15c7a703          	lw	a4,348(a5) # 8002015c <__stack_top+0xfffdeb6c>
80006210:	800207b7          	lui	a5,0x80020
80006214:	fec42603          	lw	a2,-20(s0)
80006218:	1d078693          	addi	a3,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
8000621c:	24400793          	li	a5,580
80006220:	02f607b3          	mul	a5,a2,a5
80006224:	00f687b3          	add	a5,a3,a5
80006228:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:31
            messageID++;
8000622c:	800207b7          	lui	a5,0x80020
80006230:	15c7a783          	lw	a5,348(a5) # 8002015c <__stack_top+0xfffdeb6c>
80006234:	00178713          	addi	a4,a5,1
80006238:	800207b7          	lui	a5,0x80020
8000623c:	14e7ae23          	sw	a4,348(a5) # 8002015c <__stack_top+0xfffdeb6c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:32
            sel = i;
80006240:	fec42783          	lw	a5,-20(s0)
80006244:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:33
            break;
80006248:	01c0006f          	j	80006264 <API_GetMessageSlot+0xc0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:27 (discriminator 2)
    for( i = 0; i < PIPE_SIZE; i++ ){
8000624c:	fec42783          	lw	a5,-20(s0)
80006250:	00178793          	addi	a5,a5,1
80006254:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:27 (discriminator 1)
80006258:	fec42703          	lw	a4,-20(s0)
8000625c:	00300793          	li	a5,3
80006260:	f6e7d2e3          	ble	a4,a5,800061c4 <API_GetMessageSlot+0x20>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:36
        }
    }
    if(messageID > 16777215){
80006264:	800207b7          	lui	a5,0x80020
80006268:	15c7a703          	lw	a4,348(a5) # 8002015c <__stack_top+0xfffdeb6c>
8000626c:	010007b7          	lui	a5,0x1000
80006270:	06f76663          	bltu	a4,a5,800062dc <API_GetMessageSlot+0x138>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:37
        messageID = 256;
80006274:	800207b7          	lui	a5,0x80020
80006278:	10000713          	li	a4,256
8000627c:	14e7ae23          	sw	a4,348(a5) # 8002015c <__stack_top+0xfffdeb6c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:38
        for( i = 0; i < PIPE_SIZE; i++ ){
80006280:	fe042623          	sw	zero,-20(s0)
80006284:	04c0006f          	j	800062d0 <API_GetMessageSlot+0x12c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:39 (discriminator 3)
            MessagePipe[i].msgID = (MessagePipe[i].msgID & 0x000000FF);
80006288:	800207b7          	lui	a5,0x80020
8000628c:	fec42683          	lw	a3,-20(s0)
80006290:	1d078713          	addi	a4,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
80006294:	24400793          	li	a5,580
80006298:	02f687b3          	mul	a5,a3,a5
8000629c:	00f707b3          	add	a5,a4,a5
800062a0:	0087a783          	lw	a5,8(a5)
800062a4:	0ff7f713          	andi	a4,a5,255
800062a8:	800207b7          	lui	a5,0x80020
800062ac:	fec42603          	lw	a2,-20(s0)
800062b0:	1d078693          	addi	a3,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
800062b4:	24400793          	li	a5,580
800062b8:	02f607b3          	mul	a5,a2,a5
800062bc:	00f687b3          	add	a5,a3,a5
800062c0:	00e7a423          	sw	a4,8(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:38 (discriminator 3)
        for( i = 0; i < PIPE_SIZE; i++ ){
800062c4:	fec42783          	lw	a5,-20(s0)
800062c8:	00178793          	addi	a5,a5,1
800062cc:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:38 (discriminator 1)
800062d0:	fec42703          	lw	a4,-20(s0)
800062d4:	00300793          	li	a5,3
800062d8:	fae7d8e3          	ble	a4,a5,80006288 <API_GetMessageSlot+0xe4>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:42
        }
    }
    return sel;
800062dc:	fe842783          	lw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:43
}
800062e0:	00078513          	mv	a0,a5
800062e4:	01c12403          	lw	s0,28(sp)
800062e8:	02010113          	addi	sp,sp,32
800062ec:	00008067          	ret

800062f0 <API_GetServiceSlot>:
API_GetServiceSlot():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:47

////////////////////////////////////////////////////////////
// Returns a free Service slot
unsigned int API_GetServiceSlot(){
800062f0:	fe010113          	addi	sp,sp,-32
800062f4:	00812e23          	sw	s0,28(sp)
800062f8:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:49
    int i;
    for( i = 0; i < PIPE_SIZE; i++ ){
800062fc:	fe042623          	sw	zero,-20(s0)
80006300:	06c0006f          	j	8000636c <API_GetServiceSlot+0x7c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:50
        if (ServicePipe[i].status == PIPE_FREE){
80006304:	800206b7          	lui	a3,0x80020
80006308:	fec42703          	lw	a4,-20(s0)
8000630c:	00070793          	mv	a5,a4
80006310:	00479793          	slli	a5,a5,0x4
80006314:	40e787b3          	sub	a5,a5,a4
80006318:	00279793          	slli	a5,a5,0x2
8000631c:	06c68713          	addi	a4,a3,108 # 8002006c <__stack_top+0xfffdea7c>
80006320:	00e787b3          	add	a5,a5,a4
80006324:	0007a703          	lw	a4,0(a5)
80006328:	fff00793          	li	a5,-1
8000632c:	02f71a63          	bne	a4,a5,80006360 <API_GetServiceSlot+0x70>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:51
            ServicePipe[i].status = PIPE_OCCUPIED;
80006330:	800206b7          	lui	a3,0x80020
80006334:	fec42703          	lw	a4,-20(s0)
80006338:	00070793          	mv	a5,a4
8000633c:	00479793          	slli	a5,a5,0x4
80006340:	40e787b3          	sub	a5,a5,a4
80006344:	00279793          	slli	a5,a5,0x2
80006348:	06c68713          	addi	a4,a3,108 # 8002006c <__stack_top+0xfffdea7c>
8000634c:	00e787b3          	add	a5,a5,a4
80006350:	00100713          	li	a4,1
80006354:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:52
            return i;
80006358:	fec42783          	lw	a5,-20(s0)
8000635c:	0240006f          	j	80006380 <API_GetServiceSlot+0x90>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:49 (discriminator 2)
    for( i = 0; i < PIPE_SIZE; i++ ){
80006360:	fec42783          	lw	a5,-20(s0)
80006364:	00178793          	addi	a5,a5,1
80006368:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:49 (discriminator 1)
8000636c:	fec42703          	lw	a4,-20(s0)
80006370:	00300793          	li	a5,3
80006374:	f8e7d8e3          	ble	a4,a5,80006304 <API_GetServiceSlot+0x14>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:55
        }
    }
    return PIPE_FULL;
80006378:	fdfe07b7          	lui	a5,0xfdfe0
8000637c:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df9e80d>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:56
}
80006380:	00078513          	mv	a0,a5
80006384:	01c12403          	lw	s0,28(sp)
80006388:	02010113          	addi	sp,sp,32
8000638c:	00008067          	ret

80006390 <API_ClearPipeSlot>:
API_ClearPipeSlot():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:60

////////////////////////////////////////////////////////////
// Clear one PipeSlot after send it
void API_ClearPipeSlot(unsigned int typeSlot){
80006390:	fd010113          	addi	sp,sp,-48
80006394:	02812623          	sw	s0,44(sp)
80006398:	03010413          	addi	s0,sp,48
8000639c:	fca42e23          	sw	a0,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:61
    unsigned type = typeSlot & 0xFFFF0000;
800063a0:	fdc42703          	lw	a4,-36(s0)
800063a4:	ffff07b7          	lui	a5,0xffff0
800063a8:	00f777b3          	and	a5,a4,a5
800063ac:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:62
    unsigned slot = typeSlot & 0x0000FFFF;
800063b0:	fdc42703          	lw	a4,-36(s0)
800063b4:	000107b7          	lui	a5,0x10
800063b8:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
800063bc:	00f777b3          	and	a5,a4,a5
800063c0:	fef42423          	sw	a5,-24(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:64
    
    if (type == SERVICE){
800063c4:	fec42703          	lw	a4,-20(s0)
800063c8:	101007b7          	lui	a5,0x10100
800063cc:	02f71863          	bne	a4,a5,800063fc <API_ClearPipeSlot+0x6c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:65
        ServicePipe[slot].status = PIPE_FREE;
800063d0:	800206b7          	lui	a3,0x80020
800063d4:	fe842703          	lw	a4,-24(s0)
800063d8:	00070793          	mv	a5,a4
800063dc:	00479793          	slli	a5,a5,0x4
800063e0:	40e787b3          	sub	a5,a5,a4
800063e4:	00279793          	slli	a5,a5,0x2
800063e8:	06c68713          	addi	a4,a3,108 # 8002006c <__stack_top+0xfffdea7c>
800063ec:	00e787b3          	add	a5,a5,a4
800063f0:	fff00713          	li	a4,-1
800063f4:	00e7a023          	sw	a4,0(a5) # 10100000 <RAM_SIZE+0x10080000>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:70
    } else { // type == MESSAGE
        //printsv("cleaning message pipe slot: ", slot);
        MessagePipe[slot].status = PIPE_FREE;
    }
    return;
800063f8:	0280006f          	j	80006420 <API_ClearPipeSlot+0x90>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:68
        MessagePipe[slot].status = PIPE_FREE;
800063fc:	800207b7          	lui	a5,0x80020
80006400:	fe842683          	lw	a3,-24(s0)
80006404:	24400713          	li	a4,580
80006408:	02e68733          	mul	a4,a3,a4
8000640c:	1d078793          	addi	a5,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
80006410:	00f707b3          	add	a5,a4,a5
80006414:	fff00713          	li	a4,-1
80006418:	00e7a023          	sw	a4,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:70
    return;
8000641c:	00000013          	nop
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:71
}
80006420:	02c12403          	lw	s0,44(sp)
80006424:	03010113          	addi	sp,sp,48
80006428:	00008067          	ret

8000642c <API_checkPipe>:
API_checkPipe():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:73

unsigned int API_checkPipe(unsigned int taskSlot){
8000642c:	fd010113          	addi	sp,sp,-48
80006430:	02812623          	sw	s0,44(sp)
80006434:	03010413          	addi	s0,sp,48
80006438:	fca42e23          	sw	a0,-36(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:75
    unsigned int i;
    for(i = 0; i < PIPE_SIZE; i++){
8000643c:	fe042623          	sw	zero,-20(s0)
80006440:	0600006f          	j	800064a0 <API_checkPipe+0x74>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:80
        // printsv("i: ", i);
        // printsv("status: ", MessagePipe[i].status);
        // printsv("holder: ", MessagePipe[i].holder);
        // prints("---\n");
        if(MessagePipe[i].status == PIPE_OCCUPIED){
80006444:	800207b7          	lui	a5,0x80020
80006448:	fec42683          	lw	a3,-20(s0)
8000644c:	24400713          	li	a4,580
80006450:	02e68733          	mul	a4,a3,a4
80006454:	1d078793          	addi	a5,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
80006458:	00f707b3          	add	a5,a4,a5
8000645c:	0007a703          	lw	a4,0(a5)
80006460:	00100793          	li	a5,1
80006464:	02f71863          	bne	a4,a5,80006494 <API_checkPipe+0x68>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:81
            if(MessagePipe[i].holder == taskSlot){
80006468:	800207b7          	lui	a5,0x80020
8000646c:	fec42683          	lw	a3,-20(s0)
80006470:	1d078713          	addi	a4,a5,464 # 800201d0 <__stack_top+0xfffdebe0>
80006474:	24400793          	li	a5,580
80006478:	02f687b3          	mul	a5,a3,a5
8000647c:	00f707b3          	add	a5,a4,a5
80006480:	0047a783          	lw	a5,4(a5)
80006484:	fdc42703          	lw	a4,-36(s0)
80006488:	00f71663          	bne	a4,a5,80006494 <API_checkPipe+0x68>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:82
                return 1;
8000648c:	00100793          	li	a5,1
80006490:	0200006f          	j	800064b0 <API_checkPipe+0x84>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:75 (discriminator 2)
    for(i = 0; i < PIPE_SIZE; i++){
80006494:	fec42783          	lw	a5,-20(s0)
80006498:	00178793          	addi	a5,a5,1
8000649c:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:75 (discriminator 1)
800064a0:	fec42703          	lw	a4,-20(s0)
800064a4:	00300793          	li	a5,3
800064a8:	f8e7fee3          	bleu	a4,a5,80006444 <API_checkPipe+0x18>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:86
            }
        }
    }
    return 0;
800064ac:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/packet.c:87
}
800064b0:	00078513          	mv	a0,a5
800064b4:	02c12403          	lw	s0,44(sp)
800064b8:	03010113          	addi	sp,sp,48
800064bc:	00008067          	ret

800064c0 <PLIC_init>:
PLIC_init():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:124
{
800064c0:	fe010113          	addi	sp,sp,-32
800064c4:	00812e23          	sw	s0,28(sp)
800064c8:	02010413          	addi	s0,sp,32
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:126
    unsigned long hart_id = read_csr(mhartid);
800064cc:	f14027f3          	csrr	a5,mhartid
800064d0:	fef42423          	sw	a5,-24(s0)
800064d4:	fe842783          	lw	a5,-24(s0)
800064d8:	fef42223          	sw	a5,-28(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
800064dc:	fe042623          	sw	zero,-20(s0)
800064e0:	03c0006f          	j	8000651c <PLIC_init+0x5c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:131 (discriminator 3)
        PLIC->TARGET_ENABLES[hart_id].ENABLES[inc] = 0;
800064e4:	40000737          	lui	a4,0x40000
800064e8:	fe442783          	lw	a5,-28(s0)
800064ec:	00579693          	slli	a3,a5,0x5
800064f0:	fec42783          	lw	a5,-20(s0)
800064f4:	00f686b3          	add	a3,a3,a5
800064f8:	000017b7          	lui	a5,0x1
800064fc:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80006500:	00f687b3          	add	a5,a3,a5
80006504:	00279793          	slli	a5,a5,0x2
80006508:	00f707b3          	add	a5,a4,a5
8000650c:	0007a023          	sw	zero,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 3)
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
80006510:	fec42783          	lw	a5,-20(s0)
80006514:	00178793          	addi	a5,a5,1
80006518:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 1)
8000651c:	fec42783          	lw	a5,-20(s0)
80006520:	fc0782e3          	beqz	a5,800064e4 <PLIC_init+0x24>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
80006524:	fe042623          	sw	zero,-20(s0)
80006528:	0240006f          	j	8000654c <PLIC_init+0x8c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:139 (discriminator 3)
        PLIC->SOURCE_PRIORITY[inc] = 0;
8000652c:	40000737          	lui	a4,0x40000
80006530:	fec42783          	lw	a5,-20(s0)
80006534:	00279793          	slli	a5,a5,0x2
80006538:	00f707b3          	add	a5,a4,a5
8000653c:	0007a023          	sw	zero,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 3)
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
80006540:	fec42783          	lw	a5,-20(s0)
80006544:	00178793          	addi	a5,a5,1
80006548:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 1)
8000654c:	fec42703          	lw	a4,-20(s0)
80006550:	01e00793          	li	a5,30
80006554:	fce7fce3          	bleu	a4,a5,8000652c <PLIC_init+0x6c>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:143
    PLIC->TARGET[hart_id].PRIORITY_THRESHOLD = 0;
80006558:	40000737          	lui	a4,0x40000
8000655c:	fe442783          	lw	a5,-28(s0)
80006560:	20078793          	addi	a5,a5,512
80006564:	00c79793          	slli	a5,a5,0xc
80006568:	00f707b3          	add	a5,a4,a5
8000656c:	0007a023          	sw	zero,0(a5)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:146
    set_csr(mie, MIP_MEIP);
80006570:	000017b7          	lui	a5,0x1
80006574:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80006578:	3047a7f3          	csrrs	a5,mie,a5
8000657c:	fef42023          	sw	a5,-32(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:147
}
80006580:	00000013          	nop
80006584:	01c12403          	lw	s0,28(sp)
80006588:	02010113          	addi	sp,sp,32
8000658c:	00008067          	ret

80006590 <main>:
main():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:49
unsigned int ProcessorAddr;

/*-----------------------------------------------------------*/

int main( void )
{
80006590:	fd010113          	addi	sp,sp,-48
80006594:	02112623          	sw	ra,44(sp)
80006598:	02812423          	sw	s0,40(sp)
8000659c:	03010413          	addi	s0,sp,48
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:51
	char str[20];
    PLIC_init();
800065a0:	f21ff0ef          	jal	ra,800064c0 <PLIC_init>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:57

    /**************************************************************************
    * Initialize CoreUART with its base address, baud value, and line
    * configuration.
    *************************************************************************/
    UART_init(&g_uart, COREUARTAPB0_BASE_ADDR, BAUD_VALUE_115200,
800065a4:	00100693          	li	a3,1
800065a8:	02c00613          	li	a2,44
800065ac:	700015b7          	lui	a1,0x70001
800065b0:	800217b7          	lui	a5,0x80021
800065b4:	5e078513          	addi	a0,a5,1504 # 800215e0 <__stack_top+0xfffdfff0>
800065b8:	a1dfa0ef          	jal	ra,80000fd4 <UART_init>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:63
             (DATA_8_BITS | NO_PARITY) );
    
	/**************************************************************************
    * Initialize the Chronos platform stuff
    *************************************************************************/
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n Chronos platform initializing... \n" );
800065bc:	800077b7          	lui	a5,0x80007
800065c0:	d2c78593          	addi	a1,a5,-724 # 80006d2c <__stack_top+0xfffc573c>
800065c4:	800217b7          	lui	a5,0x80021
800065c8:	5e078513          	addi	a0,a5,1504 # 800215e0 <__stack_top+0xfffdfff0>
800065cc:	bd5fa0ef          	jal	ra,800011a0 <UART_polled_tx_string>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:64
	Chronos_init();
800065d0:	ef0fc0ef          	jal	ra,80002cc0 <Chronos_init>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:65
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This terminal belongs to the address: " );
800065d4:	800077b7          	lui	a5,0x80007
800065d8:	d5478593          	addi	a1,a5,-684 # 80006d54 <__stack_top+0xfffc5764>
800065dc:	800217b7          	lui	a5,0x80021
800065e0:	5e078513          	addi	a0,a5,1504 # 800215e0 <__stack_top+0xfffdfff0>
800065e4:	bbdfa0ef          	jal	ra,800011a0 <UART_polled_tx_string>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:66
	myItoa(ProcessorAddr, str, 16);
800065e8:	800217b7          	lui	a5,0x80021
800065ec:	5e87a783          	lw	a5,1512(a5) # 800215e8 <__stack_top+0xfffdfff8>
800065f0:	00078713          	mv	a4,a5
800065f4:	fdc40793          	addi	a5,s0,-36
800065f8:	01000613          	li	a2,16
800065fc:	00078593          	mv	a1,a5
80006600:	00070513          	mv	a0,a4
80006604:	ff1fc0ef          	jal	ra,800035f4 <myItoa>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:67
    UART_polled_tx_string( &g_uart, (const uint8_t *)str); UART_polled_tx_string( &g_uart, (const uint8_t *)"\n");
80006608:	fdc40793          	addi	a5,s0,-36
8000660c:	00078593          	mv	a1,a5
80006610:	800217b7          	lui	a5,0x80021
80006614:	5e078513          	addi	a0,a5,1504 # 800215e0 <__stack_top+0xfffdfff0>
80006618:	b89fa0ef          	jal	ra,800011a0 <UART_polled_tx_string>
8000661c:	800077b7          	lui	a5,0x80007
80006620:	d8078593          	addi	a1,a5,-640 # 80006d80 <__stack_top+0xfffc5790>
80006624:	800217b7          	lui	a5,0x80021
80006628:	5e078513          	addi	a0,a5,1504 # 800215e0 <__stack_top+0xfffdfff0>
8000662c:	b75fa0ef          	jal	ra,800011a0 <UART_polled_tx_string>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:71
	
	//AppsToMap = 0;
	
	if (ProcessorAddr == 0x0000){
80006630:	800217b7          	lui	a5,0x80021
80006634:	5e87a783          	lw	a5,1512(a5) # 800215e8 <__stack_top+0xfffdfff8>
80006638:	04079463          	bnez	a5,80006680 <main+0xf0>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:72
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is the Global Master: \n" );
8000663c:	800077b7          	lui	a5,0x80007
80006640:	d8478593          	addi	a1,a5,-636 # 80006d84 <__stack_top+0xfffc5794>
80006644:	800217b7          	lui	a5,0x80021
80006648:	5e078513          	addi	a0,a5,1504 # 800215e0 <__stack_top+0xfffdfff0>
8000664c:	b55fa0ef          	jal	ra,800011a0 <UART_polled_tx_string>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:74
		/* Create the GlobalManager task */
		xTaskCreate( GlobalManagerTask, "GlobalMaster", 1000, NULL, (configMAX_PRIORITIES - 1), NULL );
80006650:	00000893          	li	a7,0
80006654:	00000813          	li	a6,0
80006658:	00000793          	li	a5,0
8000665c:	00400713          	li	a4,4
80006660:	00000693          	li	a3,0
80006664:	3e800613          	li	a2,1000
80006668:	800075b7          	lui	a1,0x80007
8000666c:	db058593          	addi	a1,a1,-592 # 80006db0 <__stack_top+0xfffc57c0>
80006670:	80006537          	lui	a0,0x80006
80006674:	7c450513          	addi	a0,a0,1988 # 800067c4 <__stack_top+0xfffc51d4>
80006678:	fd8fb0ef          	jal	ra,80001e50 <xTaskGenericCreate>
8000667c:	0440006f          	j	800066c0 <main+0x130>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:76
	} else {
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is a Slave: \n" );
80006680:	800077b7          	lui	a5,0x80007
80006684:	dc078593          	addi	a1,a5,-576 # 80006dc0 <__stack_top+0xfffc57d0>
80006688:	800217b7          	lui	a5,0x80021
8000668c:	5e078513          	addi	a0,a5,1504 # 800215e0 <__stack_top+0xfffdfff0>
80006690:	b11fa0ef          	jal	ra,800011a0 <UART_polled_tx_string>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:79
		
		/* Create the two test tasks. */
		xTaskCreate( vUartAliveTask, "Alive", 1000, NULL, 0, NULL );
80006694:	00000893          	li	a7,0
80006698:	00000813          	li	a6,0
8000669c:	00000793          	li	a5,0
800066a0:	00000713          	li	a4,0
800066a4:	00000693          	li	a3,0
800066a8:	3e800613          	li	a2,1000
800066ac:	800075b7          	lui	a1,0x80007
800066b0:	de058593          	addi	a1,a1,-544 # 80006de0 <__stack_top+0xfffc57f0>
800066b4:	80006537          	lui	a0,0x80006
800066b8:	70c50513          	addi	a0,a0,1804 # 8000670c <__stack_top+0xfffc511c>
800066bc:	f94fb0ef          	jal	ra,80001e50 <xTaskGenericCreate>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:83
	}	

	/* Start the kernel.  From here on, only tasks and interrupts will run. */
	vTaskStartScheduler();
800066c0:	b0dfb0ef          	jal	ra,800021cc <vTaskStartScheduler>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:86

	/* Exit FreeRTOS */
	return 0;
800066c4:	00000793          	li	a5,0
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:87
}
800066c8:	00078513          	mv	a0,a5
800066cc:	02c12083          	lw	ra,44(sp)
800066d0:	02812403          	lw	s0,40(sp)
800066d4:	03010113          	addi	sp,sp,48
800066d8:	00008067          	ret

800066dc <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:92

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
800066dc:	ff010113          	addi	sp,sp,-16
800066e0:	00812623          	sw	s0,12(sp)
800066e4:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:103
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
800066e8:	30047073          	csrci	mstatus,8
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:104 (discriminator 1)
	for( ;; );
800066ec:	0000006f          	j	800066ec <vApplicationMallocFailedHook+0x10>

800066f0 <vApplicationIdleHook>:
vApplicationIdleHook():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:109
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
800066f0:	ff010113          	addi	sp,sp,-16
800066f4:	00812623          	sw	s0,12(sp)
800066f8:	01010413          	addi	s0,sp,16
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:119
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
800066fc:	00000013          	nop
80006700:	00c12403          	lw	s0,12(sp)
80006704:	01010113          	addi	sp,sp,16
80006708:	00008067          	ret

8000670c <vUartAliveTask>:
vUartAliveTask():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:136
	for( ;; );
}
/*-----------------------------------------------------------*/

static void vUartAliveTask( void *pvParameters )
{
8000670c:	fc010113          	addi	sp,sp,-64
80006710:	02112e23          	sw	ra,60(sp)
80006714:	02812c23          	sw	s0,56(sp)
80006718:	04010413          	addi	s0,sp,64
8000671c:	fca42623          	sw	a0,-52(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:140
	( void ) pvParameters;
	char str[20];
	unsigned int i;
	for( i = 0 ;; i++ ){
80006720:	fe042623          	sw	zero,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:141 (discriminator 2)
		myItoa(ProcessorAddr, str, 16);
80006724:	800217b7          	lui	a5,0x80021
80006728:	5e87a783          	lw	a5,1512(a5) # 800215e8 <__stack_top+0xfffdfff8>
8000672c:	00078713          	mv	a4,a5
80006730:	fd840793          	addi	a5,s0,-40
80006734:	01000613          	li	a2,16
80006738:	00078593          	mv	a1,a5
8000673c:	00070513          	mv	a0,a4
80006740:	eb5fc0ef          	jal	ra,800035f4 <myItoa>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:142 (discriminator 2)
		UART_polled_tx_string( &g_uart, (const uint8_t *)str);
80006744:	fd840793          	addi	a5,s0,-40
80006748:	00078593          	mv	a1,a5
8000674c:	800217b7          	lui	a5,0x80021
80006750:	5e078513          	addi	a0,a5,1504 # 800215e0 <__stack_top+0xfffdfff0>
80006754:	a4dfa0ef          	jal	ra,800011a0 <UART_polled_tx_string>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:143 (discriminator 2)
		UART_polled_tx_string( &g_uart, (const uint8_t *)" PE is alive - " );
80006758:	800077b7          	lui	a5,0x80007
8000675c:	de878593          	addi	a1,a5,-536 # 80006de8 <__stack_top+0xfffc57f8>
80006760:	800217b7          	lui	a5,0x80021
80006764:	5e078513          	addi	a0,a5,1504 # 800215e0 <__stack_top+0xfffdfff0>
80006768:	a39fa0ef          	jal	ra,800011a0 <UART_polled_tx_string>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:144 (discriminator 2)
		myItoa(i, str, 10);
8000676c:	fec42783          	lw	a5,-20(s0)
80006770:	fd840713          	addi	a4,s0,-40
80006774:	00a00613          	li	a2,10
80006778:	00070593          	mv	a1,a4
8000677c:	00078513          	mv	a0,a5
80006780:	e75fc0ef          	jal	ra,800035f4 <myItoa>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:145 (discriminator 2)
		UART_polled_tx_string( &g_uart, (const uint8_t *)str);
80006784:	fd840793          	addi	a5,s0,-40
80006788:	00078593          	mv	a1,a5
8000678c:	800217b7          	lui	a5,0x80021
80006790:	5e078513          	addi	a0,a5,1504 # 800215e0 <__stack_top+0xfffdfff0>
80006794:	a0dfa0ef          	jal	ra,800011a0 <UART_polled_tx_string>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:146 (discriminator 2)
		UART_polled_tx_string( &g_uart, (const uint8_t *)" -\r\n" );
80006798:	800077b7          	lui	a5,0x80007
8000679c:	df878593          	addi	a1,a5,-520 # 80006df8 <__stack_top+0xfffc5808>
800067a0:	800217b7          	lui	a5,0x80021
800067a4:	5e078513          	addi	a0,a5,1504 # 800215e0 <__stack_top+0xfffdfff0>
800067a8:	9f9fa0ef          	jal	ra,800011a0 <UART_polled_tx_string>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:147 (discriminator 2)
	    vTaskDelay(10);
800067ac:	00a00513          	li	a0,10
800067b0:	999fb0ef          	jal	ra,80002148 <vTaskDelay>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:140 (discriminator 2)
	for( i = 0 ;; i++ ){
800067b4:	fec42783          	lw	a5,-20(s0)
800067b8:	00178793          	addi	a5,a5,1
800067bc:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:141 (discriminator 2)
		myItoa(ProcessorAddr, str, 16);
800067c0:	f65ff06f          	j	80006724 <vUartAliveTask+0x18>

800067c4 <GlobalManagerTask>:
GlobalManagerTask():
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:153
	}
}

/*-----------------------------------------------------------*/

static void GlobalManagerTask( void *pvParameters ){
800067c4:	fc010113          	addi	sp,sp,-64
800067c8:	02112e23          	sw	ra,60(sp)
800067cc:	02812c23          	sw	s0,56(sp)
800067d0:	04010413          	addi	s0,sp,64
800067d4:	fca42623          	sw	a0,-52(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:158
	( void ) pvParameters;
	int tick;
	char str[20];
	// Initialize the priority vector with the pattern policy
	GeneratePatternMatrix();
800067d8:	944fe0ef          	jal	ra,8000491c <GeneratePatternMatrix>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:161

	// Initialize the System Tiles Info
	API_TilesReset();
800067dc:	808fe0ef          	jal	ra,800047e4 <API_TilesReset>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:164

	// Initialize the applications vector
    API_ApplicationsReset();
800067e0:	fa5fd0ef          	jal	ra,80004784 <API_ApplicationsReset>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:167

	// Informs the Repository that the GLOBALMASTER is ready to receive the application info
	API_RepositoryWakeUp();
800067e4:	c35fd0ef          	jal	ra,80004418 <API_RepositoryWakeUp>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:170 (discriminator 1)

	for(;;){
		tick = xTaskGetTickCount();
800067e8:	bfdfb0ef          	jal	ra,800023e4 <xTaskGetTickCount>
800067ec:	00050793          	mv	a5,a0
800067f0:	fef42623          	sw	a5,-20(s0)
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:171 (discriminator 1)
		myItoa(tick, str, 10);
800067f4:	fd840793          	addi	a5,s0,-40
800067f8:	00a00613          	li	a2,10
800067fc:	00078593          	mv	a1,a5
80006800:	fec42503          	lw	a0,-20(s0)
80006804:	df1fc0ef          	jal	ra,800035f4 <myItoa>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:172 (discriminator 1)
		UART_polled_tx_string( &g_uart, (const uint8_t *)str);
80006808:	fd840793          	addi	a5,s0,-40
8000680c:	00078593          	mv	a1,a5
80006810:	800217b7          	lui	a5,0x80021
80006814:	5e078513          	addi	a0,a5,1504 # 800215e0 <__stack_top+0xfffdfff0>
80006818:	989fa0ef          	jal	ra,800011a0 <UART_polled_tx_string>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:173 (discriminator 1)
		printsv("GlobalMasterActive", tick);
8000681c:	fec42583          	lw	a1,-20(s0)
80006820:	800077b7          	lui	a5,0x80007
80006824:	e0078513          	addi	a0,a5,-512 # 80006e00 <__stack_top+0xfffc5810>
80006828:	e1cfc0ef          	jal	ra,80002e44 <printsv>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:174 (discriminator 1)
		UART_polled_tx_string( &g_uart, (const uint8_t *)" GlobalMasterRoutine...\r\n" );
8000682c:	800077b7          	lui	a5,0x80007
80006830:	e1478593          	addi	a1,a5,-492 # 80006e14 <__stack_top+0xfffc5824>
80006834:	800217b7          	lui	a5,0x80021
80006838:	5e078513          	addi	a0,a5,1504 # 800215e0 <__stack_top+0xfffdfff0>
8000683c:	965fa0ef          	jal	ra,800011a0 <UART_polled_tx_string>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:177 (discriminator 1)

		// Checks if there is some task to allocate...
		API_AllocateTasks(tick);
80006840:	fec42783          	lw	a5,-20(s0)
80006844:	00078513          	mv	a0,a5
80006848:	97cfe0ef          	jal	ra,800049c4 <API_AllocateTasks>
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:179 (discriminator 1)

		asm ("wfi");
8000684c:	10500073          	wfi
/home/iacana/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:170 (discriminator 1)
		tick = xTaskGetTickCount();
80006850:	f99ff06f          	j	800067e8 <GlobalManagerTask+0x24>

80006854 <write>:
write():
80006854:	00000797          	auipc	a5,0x0
80006858:	5ec78793          	addi	a5,a5,1516 # 80006e40 <_impure_ptr>
8000685c:	00060693          	mv	a3,a2
80006860:	00058613          	mv	a2,a1
80006864:	00050593          	mv	a1,a0
80006868:	0007a503          	lw	a0,0(a5)
8000686c:	0040006f          	j	80006870 <_write_r>

80006870 <_write_r>:
_write_r():
80006870:	ff010113          	addi	sp,sp,-16
80006874:	00812423          	sw	s0,8(sp)
80006878:	00050413          	mv	s0,a0
8000687c:	00058513          	mv	a0,a1
80006880:	00060593          	mv	a1,a2
80006884:	00068613          	mv	a2,a3
80006888:	0001a797          	auipc	a5,0x1a
8000688c:	2407ac23          	sw	zero,600(a5) # 80020ae0 <errno>
80006890:	00112623          	sw	ra,12(sp)
80006894:	d80fa0ef          	jal	ra,80000e14 <_write>
80006898:	fff00793          	li	a5,-1
8000689c:	00f51c63          	bne	a0,a5,800068b4 <_write_r+0x44>
800068a0:	0001a797          	auipc	a5,0x1a
800068a4:	24078793          	addi	a5,a5,576 # 80020ae0 <errno>
800068a8:	0007a783          	lw	a5,0(a5)
800068ac:	00078463          	beqz	a5,800068b4 <_write_r+0x44>
800068b0:	00f42023          	sw	a5,0(s0)
800068b4:	00c12083          	lw	ra,12(sp)
800068b8:	00812403          	lw	s0,8(sp)
800068bc:	01010113          	addi	sp,sp,16
800068c0:	00008067          	ret
	...
800068d0:	6568                	flw	fa0,76(a0)
800068d2:	6c6c                	flw	fa1,92(s0)
800068d4:	0000006f          	j	800068d4 <_write_r+0x64>
800068d8:	6544                	flw	fs1,12(a0)
800068da:	6574                	flw	fa3,76(a0)
800068dc:	69657463          	bleu	s6,a0,80006f64 <pxOverflowDelayedTaskList>
800068e0:	7520                	flw	fs0,104(a0)
800068e2:	616d                	addi	sp,sp,240
800068e4:	6320                	flw	fs0,64(a4)
800068e6:	6168                	flw	fa0,68(a0)
800068e8:	616d                	addi	sp,sp,240
800068ea:	6164                	flw	fs1,68(a0)
800068ec:	5420                	lw	s0,104(s0)
800068ee:	5345                	li	t1,-15
800068f0:	4554                	lw	a3,12(a0)
800068f2:	6420                	flw	fs0,72(s0)
800068f4:	2065                	jal	8000699c <_write_r+0x12c>
800068f6:	74736973          	csrrsi	s2,0x747,6
800068fa:	6d65                	lui	s10,0x19
800068fc:	2161                	jal	80006d84 <_write_r+0x514>
800068fe:	000a                	c.slli	zero,0x2
80006900:	7261                	lui	tp,0xffff8
80006902:	00203067          	0x203067
80006906:	0000                	unimp
80006908:	7261                	lui	tp,0xffff8
8000690a:	00203167          	0x203167
8000690e:	0000                	unimp
80006910:	7261                	lui	tp,0xffff8
80006912:	00203267          	0x203267
80006916:	0000                	unimp
80006918:	7261                	lui	tp,0xffff8
8000691a:	00203367          	0x203367
8000691e:	0000                	unimp
80006920:	7261                	lui	tp,0xffff8
80006922:	00203467          	0x203467
80006926:	0000                	unimp
80006928:	7974                	flw	fa3,116(a0)
8000692a:	6570                	flw	fa2,76(a0)
8000692c:	0020                	addi	s0,sp,8
8000692e:	0000                	unimp
80006930:	74737953          	0x74737953
80006934:	6d65                	lui	s10,0x19
80006936:	6c6c6163          	bltu	s8,t1,80006ff8 <__sbss_end+0x58>
8000693a:	6e20                	flw	fs0,88(a2)
8000693c:	206fa3c3          	fmadd.s	ft7,ft11,ft6,ft4,rdn
80006940:	6469                	lui	s0,0x1a
80006942:	6e65                	lui	t3,0x19
80006944:	6974                	flw	fa3,84(a0)
80006946:	6966                	flw	fs2,88(sp)
80006948:	61646163          	bltu	s0,s6,80006f4a <xStart+0x6>
8000694c:	0a21                	addi	s4,s4,8
8000694e:	0000                	unimp
80006950:	7274                	flw	fa3,100(a2)
80006952:	7061                	c.lui	zero,0xffff8
80006954:	000a                	c.slli	zero,0x2
80006956:	0000                	unimp
80006958:	06e0                	addi	s0,sp,844
8000695a:	8000                	0x8000
8000695c:	06e8                	addi	a0,sp,844
8000695e:	8000                	0x8000
80006960:	06e8                	addi	a0,sp,844
80006962:	8000                	0x8000
80006964:	06e8                	addi	a0,sp,844
80006966:	8000                	0x8000
80006968:	06e8                	addi	a0,sp,844
8000696a:	8000                	0x8000
8000696c:	06e8                	addi	a0,sp,844
8000696e:	8000                	0x8000
80006970:	06e8                	addi	a0,sp,844
80006972:	8000                	0x8000
80006974:	06e8                	addi	a0,sp,844
80006976:	8000                	0x8000
80006978:	06e8                	addi	a0,sp,844
8000697a:	8000                	0x8000
8000697c:	06e8                	addi	a0,sp,844
8000697e:	8000                	0x8000
80006980:	06c0                	addi	s0,sp,836
80006982:	8000                	0x8000
80006984:	06e8                	addi	a0,sp,844
80006986:	8000                	0x8000
80006988:	06e8                	addi	a0,sp,844
8000698a:	8000                	0x8000
8000698c:	06e8                	addi	a0,sp,844
8000698e:	8000                	0x8000
80006990:	06e8                	addi	a0,sp,844
80006992:	8000                	0x8000
80006994:	06e8                	addi	a0,sp,844
80006996:	8000                	0x8000
80006998:	06e8                	addi	a0,sp,844
8000699a:	8000                	0x8000
8000699c:	06e8                	addi	a0,sp,844
8000699e:	8000                	0x8000
800069a0:	06e8                	addi	a0,sp,844
800069a2:	8000                	0x8000
800069a4:	06e8                	addi	a0,sp,844
800069a6:	8000                	0x8000
800069a8:	06d0                	addi	a2,sp,836
800069aa:	8000                	0x8000
800069ac:	06e8                	addi	a0,sp,844
800069ae:	8000                	0x8000
800069b0:	06e8                	addi	a0,sp,844
800069b2:	8000                	0x8000
800069b4:	06e8                	addi	a0,sp,844
800069b6:	8000                	0x8000
800069b8:	06e8                	addi	a0,sp,844
800069ba:	8000                	0x8000
800069bc:	06e8                	addi	a0,sp,844
800069be:	8000                	0x8000
800069c0:	06e8                	addi	a0,sp,844
800069c2:	8000                	0x8000
800069c4:	06e8                	addi	a0,sp,844
800069c6:	8000                	0x8000
800069c8:	06e8                	addi	a0,sp,844
800069ca:	8000                	0x8000
800069cc:	06e8                	addi	a0,sp,844
800069ce:	8000                	0x8000
800069d0:	0684                	addi	s1,sp,832
800069d2:	8000                	0x8000
800069d4:	06e8                	addi	a0,sp,844
800069d6:	8000                	0x8000
800069d8:	06e8                	addi	a0,sp,844
800069da:	8000                	0x8000
800069dc:	06e8                	addi	a0,sp,844
800069de:	8000                	0x8000
800069e0:	06e8                	addi	a0,sp,844
800069e2:	8000                	0x8000
800069e4:	06e8                	addi	a0,sp,844
800069e6:	8000                	0x8000
800069e8:	06e8                	addi	a0,sp,844
800069ea:	8000                	0x8000
800069ec:	06e8                	addi	a0,sp,844
800069ee:	8000                	0x8000
800069f0:	06e8                	addi	a0,sp,844
800069f2:	8000                	0x8000
800069f4:	06e8                	addi	a0,sp,844
800069f6:	8000                	0x8000
800069f8:	0660                	addi	s0,sp,780
800069fa:	8000                	0x8000
800069fc:	06e8                	addi	a0,sp,844
800069fe:	8000                	0x8000
80006a00:	06e8                	addi	a0,sp,844
80006a02:	8000                	0x8000
80006a04:	06e8                	addi	a0,sp,844
80006a06:	8000                	0x8000
80006a08:	06e8                	addi	a0,sp,844
80006a0a:	8000                	0x8000
80006a0c:	06e8                	addi	a0,sp,844
80006a0e:	8000                	0x8000
80006a10:	06e8                	addi	a0,sp,844
80006a12:	8000                	0x8000
80006a14:	06e8                	addi	a0,sp,844
80006a16:	8000                	0x8000
80006a18:	06e8                	addi	a0,sp,844
80006a1a:	8000                	0x8000
80006a1c:	06e8                	addi	a0,sp,844
80006a1e:	8000                	0x8000
80006a20:	06e8                	addi	a0,sp,844
80006a22:	8000                	0x8000
80006a24:	06e8                	addi	a0,sp,844
80006a26:	8000                	0x8000
80006a28:	06e8                	addi	a0,sp,844
80006a2a:	8000                	0x8000
80006a2c:	06e8                	addi	a0,sp,844
80006a2e:	8000                	0x8000
80006a30:	06e8                	addi	a0,sp,844
80006a32:	8000                	0x8000
80006a34:	06e8                	addi	a0,sp,844
80006a36:	8000                	0x8000
80006a38:	05d8                	addi	a4,sp,708
80006a3a:	8000                	0x8000
80006a3c:	7830                	flw	fa2,112(s0)
80006a3e:	0000                	unimp
80006a40:	500a                	0x500a
80006a42:	6f72                	flw	ft10,28(sp)
80006a44:	206d6167          	0x206d6167
80006a48:	6168                	flw	fa0,68(a0)
80006a4a:	78652073          	csrs	0x786,a0
80006a4e:	7469                	lui	s0,0xffffa
80006a50:	6465                	lui	s0,0x19
80006a52:	7720                	flw	fs0,104(a4)
80006a54:	7469                	lui	s0,0xffffa
80006a56:	2068                	fld	fa0,192(s0)
80006a58:	65646f63          	bltu	s0,s6,800070b6 <__sbss_end+0x116>
80006a5c:	003a                	c.slli	zero,0xe
80006a5e:	0000                	unimp
80006a60:	000d                	c.nop	3
80006a62:	0000                	unimp
80006a64:	4449                	li	s0,18
80006a66:	454c                	lw	a1,12(a0)
80006a68:	0000                	unimp
80006a6a:	0000                	unimp
80006a6c:	000a                	c.slli	zero,0x2
80006a6e:	0000                	unimp
80006a70:	7266                	flw	ft4,120(sp)
80006a72:	61206d6f          	jal	s10,8000d084 <__global_pointer$+0x5a54>
80006a76:	7070                	flw	fa2,100(s0)
80006a78:	696c                	flw	fa1,84(a0)
80006a7a:	69746163          	bltu	s0,s7,800070fc <__sbss_end+0x15c>
80006a7e:	00206e6f          	jal	t3,8000ca80 <__global_pointer$+0x5450>
80006a82:	0000                	unimp
80006a84:	4946                	lw	s2,80(sp)
80006a86:	494e                	lw	s2,208(sp)
80006a88:	44454853          	0x44454853
80006a8c:	203a                	fld	ft0,392(sp)
80006a8e:	6154                	flw	fa3,4(a0)
80006a90:	00206b73          	csrrsi	s6,frm,0
80006a94:	72617453          	0x72617453
80006a98:	6974                	flw	fa3,84(a0)
80006a9a:	676e                	flw	fa4,216(sp)
80006a9c:	5420                	lw	s0,104(s0)
80006a9e:	7361                	lui	t1,0xffff8
80006aa0:	00203a6b          	0x203a6b
80006aa4:	67656843          	fmadd.q	fa6,fa0,fs6,fa2,unknown
80006aa8:	7520756f          	jal	a0,8000e1fa <__global_pointer$+0x6bca>
80006aac:	206d                	jal	80006b56 <_write_r+0x2e6>
80006aae:	656d                	lui	a0,0x1b
80006ab0:	67617373          	csrrci	t1,0x676,2
80006ab4:	2065                	jal	80006b5c <_write_r+0x2ec>
80006ab6:	6572                	flw	fa0,28(sp)
80006ab8:	7571                	lui	a0,0xffffc
80006aba:	7365                	lui	t1,0xffff9
80006abc:	2174                	fld	fa3,192(a0)
80006abe:	0a20                	addi	s0,sp,280
80006ac0:	0000                	unimp
80006ac2:	0000                	unimp
80006ac4:	654d                	lui	a0,0x13
80006ac6:	736e                	flw	ft6,248(sp)
80006ac8:	6761                	lui	a4,0x18
80006aca:	6d65                	lui	s10,0x19
80006acc:	6e20                	flw	fs0,88(a2)
80006ace:	206fa3c3          	fmadd.s	ft7,ft11,ft6,ft4,rdn
80006ad2:	6e65                	lui	t3,0x19
80006ad4:	746e6f63          	bltu	t3,t1,80007232 <__sbss_end+0x292>
80006ad8:	6172                	flw	ft2,28(sp)
80006ada:	6164                	flw	fs1,68(a0)
80006adc:	202c                	fld	fa1,64(s0)
80006ade:	6461                	lui	s0,0x18
80006ae0:	6369                	lui	t1,0x1a
80006ae2:	6f69                	lui	t5,0x1a
80006ae4:	616e                	flw	ft2,216(sp)
80006ae6:	646e                	flw	fs0,216(sp)
80006ae8:	6f61206f          	j	800191de <__global_pointer$+0x11bae>
80006aec:	5020                	lw	s0,96(s0)
80006aee:	6e65                	lui	t3,0x19
80006af0:	6964                	flw	fs1,84(a0)
80006af2:	676e                	flw	fa4,216(sp)
80006af4:	6552                	flw	fa0,20(sp)
80006af6:	2171                	jal	80006f82 <xYieldPending+0x2>
80006af8:	000a                	c.slli	zero,0x2
80006afa:	0000                	unimp
80006afc:	654d                	lui	a0,0x13
80006afe:	736e                	flw	ft6,248(sp)
80006b00:	6761                	lui	a4,0x18
80006b02:	6d65                	lui	s10,0x19
80006b04:	6520                	flw	fs0,72(a0)
80006b06:	636e                	flw	ft6,216(sp)
80006b08:	72746e6f          	jal	t3,8004da2e <__stack_top+0xc43e>
80006b0c:	6461                	lui	s0,0x18
80006b0e:	2061                	jal	80006b96 <_write_r+0x326>
80006b10:	6f6e                	flw	ft10,216(sp)
80006b12:	7020                	flw	fs0,96(s0)
80006b14:	7069                	c.lui	zero,0xffffa
80006b16:	2165                	jal	80006fbe <__sbss_end+0x1e>
80006b18:	000a                	c.slli	zero,0x2
80006b1a:	0000                	unimp
80006b1c:	5245                	li	tp,-15
80006b1e:	4f52                	lw	t5,20(sp)
80006b20:	2052                	fld	ft0,272(sp)
80006b22:	7845                	lui	a6,0xffff1
80006b24:	6574                	flw	fa3,76(a0)
80006b26:	6e72                	flw	ft8,28(sp)
80006b28:	6c61                	lui	s8,0x18
80006b2a:	325f 495f 5152      	0x5152495f325f
80006b30:	6148                	flw	fa0,4(a0)
80006b32:	646e                	flw	fs0,216(sp)
80006b34:	656c                	flw	fa1,76(a0)
80006b36:	2072                	fld	ft0,280(sp)
80006b38:	6e55                	lui	t3,0x15
80006b3a:	776f6e6b          	0x776f6e6b
80006b3e:	2d6e                	fld	fs10,216(sp)
80006b40:	76726553          	0x76726553
80006b44:	6369                	lui	t1,0x1a
80006b46:	0065                	c.nop	25
80006b48:	7266                	flw	ft4,120(sp)
80006b4a:	203a6d6f          	jal	s10,800ad54c <__stack_top+0x6bf5c>
80006b4e:	0000                	unimp
80006b50:	736d                	lui	t1,0xffffb
80006b52:	6f702067          	0x6f702067
80006b56:	6e69                	lui	t3,0x1a
80006b58:	6574                	flw	fa3,76(a0)
80006b5a:	3a72                	fld	fs4,312(sp)
80006b5c:	0020                	addi	s0,sp,8
80006b5e:	0000                	unimp
80006b60:	694d                	lui	s2,0x13
80006b62:	686e                	flw	fa6,216(sp)
80006b64:	2061                	jal	80006bec <_write_r+0x37c>
80006b66:	6174                	flw	fa3,68(a0)
80006b68:	49206b73          	csrrsi	s6,0x492,0
80006b6c:	3a44                	fld	fs1,176(a2)
80006b6e:	0020                	addi	s0,sp,8
80006b70:	7365                	lui	t1,0xffff9
80006b72:	6570                	flw	fa2,76(a0)
80006b74:	6172                	flw	ft2,28(sp)
80006b76:	646e                	flw	fs0,216(sp)
80006b78:	6d75206f          	j	80059a4e <__stack_top+0x1845e>
80006b7c:	6d20                	flw	fs0,88(a0)
80006b7e:	7365                	lui	t1,0xffff9
80006b80:	65676173          	csrrsi	sp,0x656,14
80006b84:	7320                	flw	fs0,96(a4)
80006b86:	6f6c                	flw	fa1,92(a4)
80006b88:	2e74                	fld	fa3,216(a2)
80006b8a:	2e2e                	fld	ft8,200(sp)
80006b8c:	000a                	c.slli	zero,0x2
80006b8e:	0000                	unimp
80006b90:	6441                	lui	s0,0x10
80006b92:	6964                	flw	fs1,84(a0)
80006b94:	676e                	flw	fa4,216(sp)
80006b96:	6120                	flw	fs0,64(a0)
80006b98:	6d20                	flw	fs0,88(a0)
80006b9a:	69206773          	csrrsi	a4,0x692,0
80006b9e:	206e                	fld	ft0,216(sp)
80006ba0:	6874                	flw	fa3,84(s0)
80006ba2:	2065                	jal	80006c4a <_write_r+0x3da>
80006ba4:	4950                	lw	a2,20(a0)
80006ba6:	4550                	lw	a2,12(a0)
80006ba8:	7320                	flw	fs0,96(a4)
80006baa:	6f6c                	flw	fa1,92(a4)
80006bac:	2074                	fld	fa3,192(s0)
80006bae:	0000                	unimp
80006bb0:	7345                	lui	t1,0xffff1
80006bb2:	6570                	flw	fa2,76(a0)
80006bb4:	6172                	flw	ft2,28(sp)
80006bb6:	646e                	flw	fs0,216(sp)
80006bb8:	654d206f          	j	800d920c <__stack_top+0x97c1c>
80006bbc:	736e                	flw	ft6,248(sp)
80006bbe:	6761                	lui	a4,0x18
80006bc0:	6d65                	lui	s10,0x19
80006bc2:	0a21                	addi	s4,s4,8
80006bc4:	0000                	unimp
80006bc6:	0000                	unimp
80006bc8:	6520                	flw	fs0,72(a0)
80006bca:	72657073          	csrci	0x726,10
80006bce:	6e61                	lui	t3,0x18
80006bd0:	6f64                	flw	fs1,92(a4)
80006bd2:	6d20                	flw	fs0,88(a0)
80006bd4:	6e65                	lui	t3,0x19
80006bd6:	65676173          	csrrsi	sp,0x656,14
80006bda:	206d                	jal	80006c84 <_write_r+0x414>
80006bdc:	0000                	unimp
80006bde:	0000                	unimp
80006be0:	6174                	flw	fa3,68(a0)
80006be2:	6c736b73          	csrrsi	s6,0x6c7,6
80006be6:	0020746f          	jal	s0,8000dbe8 <__global_pointer$+0x65b8>
80006bea:	0000                	unimp
80006bec:	654d                	lui	a0,0x13
80006bee:	736e                	flw	ft6,248(sp)
80006bf0:	6761                	lui	a4,0x18
80006bf2:	6d65                	lui	s10,0x19
80006bf4:	5220                	lw	s0,96(a2)
80006bf6:	6365                	lui	t1,0x19
80006bf8:	6265                	lui	tp,0x19
80006bfa:	6469                	lui	s0,0x1a
80006bfc:	2161                	jal	80007084 <__sbss_end+0xe4>
80006bfe:	000a                	c.slli	zero,0x2
80006c00:	654e                	flw	fa0,208(sp)
80006c02:	70612077          	0x70612077
80006c06:	6c70                	flw	fa2,92(s0)
80006c08:	6369                	lui	t1,0x1a
80006c0a:	7461                	lui	s0,0xffff8
80006c0c:	6f69                	lui	t5,0x1a
80006c0e:	206e                	fld	ft0,216(sp)
80006c10:	6572                	flw	fa0,28(sp)
80006c12:	74736967          	0x74736967
80006c16:	7265                	lui	tp,0xffff9
80006c18:	6465                	lui	s0,0x19
80006c1a:	2d20                	fld	fs0,88(a0)
80006c1c:	4920                	lw	s0,80(a0)
80006c1e:	3a44                	fld	fs1,176(a2)
80006c20:	0020                	addi	s0,sp,8
80006c22:	0000                	unimp
80006c24:	6174                	flw	fa3,68(a0)
80006c26:	69206b73          	csrrsi	s6,0x692,0
80006c2a:	00203a73          	csrrc	s4,frm,zero
80006c2e:	0000                	unimp
80006c30:	63656863          	bltu	a0,s6,80007260 <__sbss_end+0x2c0>
80006c34:	676e696b          	0x676e696b
80006c38:	0020                	addi	s0,sp,8
80006c3a:	0000                	unimp
80006c3c:	20736177          	0x20736177
80006c40:	7865                	lui	a6,0xffff9
80006c42:	6365                	lui	t1,0x19
80006c44:	7475                	lui	s0,0xffffd
80006c46:	6465                	lui	s0,0x19
80006c48:	6920                	flw	fs0,80(a0)
80006c4a:	206e                	fld	ft0,216(sp)
80006c4c:	0000                	unimp
80006c4e:	0000                	unimp
80006c50:	7041                	c.lui	zero,0xffff0
80006c52:	6c70                	flw	fa2,92(s0)
80006c54:	6369                	lui	t1,0x1a
80006c56:	7461                	lui	s0,0xffff8
80006c58:	6f69                	lui	t5,0x1a
80006c5a:	206e                	fld	ft0,216(sp)
80006c5c:	0000                	unimp
80006c5e:	0000                	unimp
80006c60:	0909                	addi	s2,s2,2
80006c62:	6854                	flw	fa3,20(s0)
80006c64:	7369                	lui	t1,0xffffa
80006c66:	6120                	flw	fs0,64(a0)
80006c68:	7070                	flw	fa2,100(s0)
80006c6a:	696c                	flw	fa1,84(a0)
80006c6c:	69746163          	bltu	s0,s7,800072ee <__sbss_end+0x34e>
80006c70:	73206e6f          	jal	t3,8000d3a2 <__global_pointer$+0x5d72>
80006c74:	6974                	flw	fa3,84(a0)
80006c76:	6c6c                	flw	fa1,92(s0)
80006c78:	6e20                	flw	fs0,88(a2)
80006c7a:	6565                	lui	a0,0x19
80006c7c:	2064                	fld	fs1,192(s0)
80006c7e:	6f74                	flw	fa3,92(a4)
80006c80:	7220                	flw	fs0,96(a2)
80006c82:	6e75                	lui	t3,0x1d
80006c84:	203a                	fld	ft0,392(sp)
80006c86:	0000                	unimp
80006c88:	0909                	addi	s2,s2,2
80006c8a:	6854                	flw	fa3,20(s0)
80006c8c:	7369                	lui	t1,0xffffa
80006c8e:	6120                	flw	fs0,64(a0)
80006c90:	7070                	flw	fa2,100(s0)
80006c92:	696c                	flw	fa1,84(a0)
80006c94:	69746163          	bltu	s0,s7,80007316 <__sbss_end+0x376>
80006c98:	69206e6f          	jal	t3,8000d32a <__global_pointer$+0x5cfa>
80006c9c:	4f442073          	csrs	0x4f4,s0
80006ca0:	454e                	lw	a0,208(sp)
80006ca2:	0a21                	addi	s4,s4,8
80006ca4:	0000                	unimp
80006ca6:	0000                	unimp
80006ca8:	6920                	flw	fs0,80(a0)
80006caa:	6c612073          	csrs	0x6c6,sp
80006cae:	6f6c                	flw	fa1,92(a4)
80006cb0:	65746163          	bltu	s0,s7,800072f2 <__sbss_end+0x352>
80006cb4:	2164                	fld	fs1,192(a0)
80006cb6:	0000                	unimp
80006cb8:	5309                	li	t1,-30
80006cba:	6174                	flw	fa3,68(a0)
80006cbc:	7472                	flw	fs0,60(sp)
80006cbe:	6320                	flw	fs0,64(a4)
80006cc0:	616d6d6f          	jal	s10,800dd2d6 <__stack_top+0x9bce6>
80006cc4:	646e                	flw	fs0,216(sp)
80006cc6:	7320                	flw	fs0,96(a4)
80006cc8:	6e65                	lui	t3,0x19
80006cca:	2074                	fld	fa3,192(s0)
80006ccc:	6f74                	flw	fa3,92(a4)
80006cce:	6520                	flw	fs0,72(a0)
80006cd0:	6576                	flw	fa0,92(sp)
80006cd2:	7972                	flw	fs2,60(sp)
80006cd4:	7420                	flw	fs0,104(s0)
80006cd6:	7361                	lui	t1,0xffff8
80006cd8:	000a2e6b          	0xa2e6b
80006cdc:	614c                	flw	fa1,4(a0)
80006cde:	6154                	flw	fa3,4(a0)
80006ce0:	00006b73          	csrrsi	s6,ustatus,0
80006ce4:	6564                	flw	fs1,76(a0)
80006ce6:	656c                	flw	fa1,76(a0)
80006ce8:	6574                	flw	fa3,76(a0)
80006cea:	2064                	fld	fs1,192(s0)
80006cec:	68746977          	0x68746977
80006cf0:	7320                	flw	fs0,96(a4)
80006cf2:	6375                	lui	t1,0x1d
80006cf4:	73736573          	csrrsi	a0,0x737,6
80006cf8:	2021                	jal	80006d00 <_write_r+0x490>
80006cfa:	7246                	flw	ft4,112(sp)
80006cfc:	61206d6f          	jal	s10,8000d30e <__global_pointer$+0x5cde>
80006d00:	7070                	flw	fa2,100(s0)
80006d02:	696c                	flw	fa1,84(a0)
80006d04:	69746163          	bltu	s0,s7,80007386 <__sbss_end+0x3e6>
80006d08:	00206e6f          	jal	t3,8000cd0a <__global_pointer$+0x56da>
80006d0c:	6154                	flw	fa3,4(a0)
80006d0e:	00206b73          	csrrsi	s6,frm,0
80006d12:	0000                	unimp
80006d14:	0a0d                	addi	s4,s4,3
80006d16:	7246                	flw	ft4,112(sp)
80006d18:	6565                	lui	a0,0x19
80006d1a:	5452                	lw	s0,52(sp)
80006d1c:	4520534f          	0x4520534f
80006d20:	6178                	flw	fa4,68(a0)
80006d22:	706d                	c.lui	zero,0xffffb
80006d24:	656c                	flw	fa1,76(a0)
80006d26:	0a0d                	addi	s4,s4,3
80006d28:	0000                	unimp
80006d2a:	0000                	unimp
80006d2c:	200a                	fld	ft0,128(sp)
80006d2e:	6f726843          	fmadd.q	fa6,ft4,fs7,fa3,unknown
80006d32:	6f6e                	flw	ft10,216(sp)
80006d34:	6c702073          	csrr	zero,0x6c7
80006d38:	7461                	lui	s0,0xffff8
80006d3a:	6f66                	flw	ft10,88(sp)
80006d3c:	6d72                	flw	fs10,28(sp)
80006d3e:	6920                	flw	fs0,80(a0)
80006d40:	696e                	flw	fs2,216(sp)
80006d42:	6974                	flw	fa3,84(a0)
80006d44:	6c61                	lui	s8,0x18
80006d46:	7a69                	lui	s4,0xffffa
80006d48:	6e69                	lui	t3,0x1a
80006d4a:	2e2e2e67          	0x2e2e2e67
80006d4e:	0a20                	addi	s0,sp,280
80006d50:	0000                	unimp
80006d52:	0000                	unimp
80006d54:	200a                	fld	ft0,128(sp)
80006d56:	6854                	flw	fa3,20(s0)
80006d58:	7369                	lui	t1,0xffffa
80006d5a:	7420                	flw	fs0,104(s0)
80006d5c:	7265                	lui	tp,0xffff9
80006d5e:	696d                	lui	s2,0x1b
80006d60:	616e                	flw	ft2,216(sp)
80006d62:	206c                	fld	fa1,192(s0)
80006d64:	6562                	flw	fa0,24(sp)
80006d66:	6f6c                	flw	fa1,92(a4)
80006d68:	676e                	flw	fa4,216(sp)
80006d6a:	6f742073          	csrs	0x6f7,s0
80006d6e:	7420                	flw	fs0,104(s0)
80006d70:	6568                	flw	fa0,76(a0)
80006d72:	6120                	flw	fs0,64(a0)
80006d74:	6464                	flw	fs1,76(s0)
80006d76:	6572                	flw	fa0,28(sp)
80006d78:	203a7373          	csrrci	t1,hideleg,20
80006d7c:	0000                	unimp
80006d7e:	0000                	unimp
80006d80:	000a                	c.slli	zero,0x2
80006d82:	0000                	unimp
80006d84:	200a                	fld	ft0,128(sp)
80006d86:	6854                	flw	fa3,20(s0)
80006d88:	7369                	lui	t1,0xffffa
80006d8a:	7020                	flw	fs0,96(s0)
80006d8c:	6f72                	flw	ft10,28(sp)
80006d8e:	73736563          	bltu	t1,s7,800074b8 <__sbss_end+0x518>
80006d92:	6920726f          	jal	tp,8000e424 <__global_pointer$+0x6df4>
80006d96:	68742073          	csrs	0x687,s0
80006d9a:	2065                	jal	80006e42 <_impure_ptr+0x2>
80006d9c:	626f6c47          	fmsub.d	fs8,ft10,ft6,fa2,unknown
80006da0:	6c61                	lui	s8,0x18
80006da2:	4d20                	lw	s0,88(a0)
80006da4:	7361                	lui	t1,0xffff8
80006da6:	6574                	flw	fa3,76(a0)
80006da8:	3a72                	fld	fs4,312(sp)
80006daa:	0a20                	addi	s0,sp,280
80006dac:	0000                	unimp
80006dae:	0000                	unimp
80006db0:	626f6c47          	fmsub.d	fs8,ft10,ft6,fa2,unknown
80006db4:	6c61                	lui	s8,0x18
80006db6:	614d                	addi	sp,sp,176
80006db8:	72657473          	csrrci	s0,0x726,10
80006dbc:	0000                	unimp
80006dbe:	0000                	unimp
80006dc0:	200a                	fld	ft0,128(sp)
80006dc2:	6854                	flw	fa3,20(s0)
80006dc4:	7369                	lui	t1,0xffffa
80006dc6:	7020                	flw	fs0,96(s0)
80006dc8:	6f72                	flw	ft10,28(sp)
80006dca:	73736563          	bltu	t1,s7,800074f4 <__sbss_end+0x554>
80006dce:	6920726f          	jal	tp,8000e460 <__global_pointer$+0x6e30>
80006dd2:	20612073          	csrs	0x206,sp
80006dd6:	76616c53          	0x76616c53
80006dda:	3a65                	jal	80006792 <vUartAliveTask+0x86>
80006ddc:	0a20                	addi	s0,sp,280
80006dde:	0000                	unimp
80006de0:	6c41                	lui	s8,0x10
80006de2:	7669                	lui	a2,0xffffa
80006de4:	0065                	c.nop	25
80006de6:	0000                	unimp
80006de8:	5020                	lw	s0,96(s0)
80006dea:	2045                	jal	80006e8a <__data_load+0x3a>
80006dec:	7369                	lui	t1,0xffffa
80006dee:	6120                	flw	fs0,64(a0)
80006df0:	696c                	flw	fa1,84(a0)
80006df2:	6576                	flw	fa0,92(sp)
80006df4:	2d20                	fld	fs0,88(a0)
80006df6:	0020                	addi	s0,sp,8
80006df8:	2d20                	fld	fs0,88(a0)
80006dfa:	0a0d                	addi	s4,s4,3
80006dfc:	0000                	unimp
80006dfe:	0000                	unimp
80006e00:	626f6c47          	fmsub.d	fs8,ft10,ft6,fa2,unknown
80006e04:	6c61                	lui	s8,0x18
80006e06:	614d                	addi	sp,sp,176
80006e08:	72657473          	csrrci	s0,0x726,10
80006e0c:	6341                	lui	t1,0x10
80006e0e:	6974                	flw	fa3,84(a0)
80006e10:	6576                	flw	fa0,92(sp)
80006e12:	0000                	unimp
80006e14:	4720                	lw	s0,72(a4)
80006e16:	6f6c                	flw	fa1,92(a4)
80006e18:	6162                	flw	ft2,24(sp)
80006e1a:	4d6c                	lw	a1,92(a0)
80006e1c:	7361                	lui	t1,0xffff8
80006e1e:	6574                	flw	fa3,76(a0)
80006e20:	5272                	lw	tp,60(sp)
80006e22:	6974756f          	jal	a0,8004ecb8 <__stack_top+0xd6c8>
80006e26:	656e                	flw	fa0,216(sp)
80006e28:	2e2e                	fld	ft8,200(sp)
80006e2a:	0d2e                	slli	s10,s10,0xb
80006e2c:	000a                	c.slli	zero,0x2
	...
