
miv-rv32im-freertos-port-test.elf:     file format elf32-littleriscv
miv-rv32im-freertos-port-test.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000000

Program Header:
    LOAD off    0x00001000 vaddr 0x80000000 paddr 0x80000000 align 2**12
         filesz 0x00009690 memsz 0x000600a0 flags rwx

Sections:
Idx Name           Size      VMA       LMA       File off  Algn  Flags
  0 .text          00009590  80000000  80000000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sdata         00000020  80009590  80009590  0000a590  2**4  CONTENTS, ALLOC, LOAD, DATA
  2 .data          000000e0  800095b0  800095b0  0000a5b0  2**4  CONTENTS, ALLOC, LOAD, DATA
  3 .sbss          000000a0  80009690  80009690  0000a690  2**4  ALLOC
  4 .bss           00036970  80009730  80009730  0000a690  2**4  ALLOC
  5 .heap          00010000  800400a0  800400a0  0000a690  2**4  ALLOC
  6 .stack         00010000  800500a0  800500a0  0000a690  2**4  ALLOC
  7 .debug_line    0000c624  00000000  00000000  0000a690  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_info    00011134  00000000  00000000  00016cb4  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev  00002fd4  00000000  00000000  00027de8  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000009d0  00000000  00000000  0002adc0  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_str     000134ef  00000000  00000000  0002b790  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges  00000880  00000000  00000000  0003ec7f  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro   00005c79  00000000  00000000  0003f4ff  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment       00000039  00000000  00000000  00045178  2**0  CONTENTS, READONLY
 15 .debug_frame   00002434  00000000  00000000  000451b4  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
80000000 l    d  .text	00000000 .text
80009590 l    d  .sdata	00000000 .sdata
800095b0 l    d  .data	00000000 .data
80009690 l    d  .sbss	00000000 .sbss
80009730 l    d  .bss	00000000 .bss
800400a0 l    d  .heap	00000000 .heap
800500a0 l    d  .stack	00000000 .stack
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./riscv_hal/entry.o
8000000c l       .text	00000000 handle_reset
80000004 l       .text	00000000 nmi_vector
80000008 l       .text	00000000 trap_vector
80000030 l       .text	00000000 trap_entry
00000000 l    df *ABS*	00000000 init.c
80000180 l     F .text	00000050 zero_section
00000000 l    df *ABS*	00000000 riscv_hal.c
80000258 l     F .text	000000b8 PLIC_DisableIRQ
80000310 l     F .text	00000044 PLIC_ClaimIRQ
80000354 l     F .text	0000004c PLIC_CompleteIRQ
80009690 l     O .sbss	00000008 g_systick_increment
00000000 l    df *ABS*	00000000 riscv_hal_stubs.c
00000000 l    df *ABS*	00000000 syscall.c
80009698 l     O .sbss	00000008 g_stdio_uart
800096a0 l     O .sbss	00000004 g_stdio_uart_init_done
80000e3c l     F .text	00000030 stub
00000000 l    df *ABS*	00000000 core_uart_apb.c
00000000 l    df *ABS*	00000000 heap_2.c
80009730 l     O .bss	00032000 ucHeap
800096a4 l     O .sbss	00000008 xStart
800096ac l     O .sbss	00000008 xEnd
80009590 l     O .sdata	00000004 xFreeBytesRemaining
800096b4 l     O .sbss	00000004 xHeapHasBeenInitialised.2777
80001550 l     F .text	00000074 prvHeapInit
00000000 l    df *ABS*	00000000 port.c
800015c4 l     F .text	0000004c raise_soft_interrupt
80009594 l     O .sdata	00000004 uxCriticalNesting
80009598 l     O .sdata	00000004 mtime
8000959c l     O .sdata	00000004 mtimecmp
80001684 l     F .text	000000cc prvSetNextTimerInterrupt
8000181c l     F .text	0000002c prvTaskExitError
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 tasks.c
8003b730 l     O .bss	00000064 pxReadyTasksLists
8003b794 l     O .bss	00000014 xDelayedTaskList1
8003b7a8 l     O .bss	00000014 xDelayedTaskList2
800096c0 l     O .sbss	00000004 pxDelayedTaskList
800096c4 l     O .sbss	00000004 pxOverflowDelayedTaskList
8003b7bc l     O .bss	00000014 xPendingReadyList
8003b7d0 l     O .bss	00000014 xTasksWaitingTermination
800096c8 l     O .sbss	00000004 uxTasksDeleted
8003b7e4 l     O .bss	00000014 xSuspendedTaskList
800096cc l     O .sbss	00000004 uxCurrentNumberOfTasks
800096d0 l     O .sbss	00000004 xTickCount
800096d4 l     O .sbss	00000004 uxTopReadyPriority
800096d8 l     O .sbss	00000004 xSchedulerRunning
800096dc l     O .sbss	00000004 uxPendedTicks
800096e0 l     O .sbss	00000004 xYieldPending
800096e4 l     O .sbss	00000004 xNumOfOverflows
800096e8 l     O .sbss	00000004 uxTaskNumber
800096ec l     O .sbss	00000004 xNextTaskUnblockTime
800096f0 l     O .sbss	00000004 uxSchedulerSuspended
80002eb0 l     F .text	000000c0 prvAllocateTCBAndStack
80002b90 l     F .text	00000138 prvInitialiseTCBVariables
80002cc8 l     F .text	000000c0 prvInitialiseTaskLists
80002fb0 l     F .text	00000060 prvResetNextTaskUnblockTime
80002e28 l     F .text	00000088 prvAddCurrentTaskToDelayedList
80002394 l     F .text	0000009c prvTaskIsTaskSuspended
80002b5c l     F .text	00000034 prvIdleTask
80002d88 l     F .text	000000a0 prvCheckTasksWaitingTermination
80002f70 l     F .text	00000040 prvDeleteTCB
00000000 l    df *ABS*	00000000 globalMaster.c
00000000 l    df *ABS*	00000000 applications.c
00000000 l    df *ABS*	00000000 packet.c
00000000 l    df *ABS*	00000000 dvfs.c
00000000 l    df *ABS*	00000000 thermal.c
00000000 l    df *ABS*	00000000 chronos.c
80006354 l     F .text	000000b4 PLIC_EnableIRQ
80006408 l     F .text	0000003c PLIC_SetPriority
00000000 l    df *ABS*	00000000 main.c
80007c48 l     F .text	000000d0 PLIC_init
80007efc l     F .text	00000830 vNI_RX_HandlerTask
8000872c l     F .text	00000070 vNI_TX_HandlerTask
8000879c l     F .text	00000054 vNI_TMR_HandlerTask
800087f0 l     F .text	000000b4 GlobalManagerTask
00000000 l    df *ABS*	00000000 syswrite.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 impure.c
80009630 l     O .data	00000060 impure_data
800096f8 g     O .sbss	00000004 eastFlits_last
80001870 g     F .text	0000002c vPortSetInterruptMask
80009700 g     O .sbss	00000004 westFlits_last
80008e80 g     O .text	0000000c readEnergyMemory
80001644 g     F .text	00000040 vPortExitCritical
00010000 g       *ABS*	00000000 STACK_SIZE
80040088 g     O .bss	00000004 memFlits
8003b7f8 g     O .bss	00000004 SendingSlot
80000a14  w    F .text	00000020 External_11_IRQHandler
80009d90 g       .sdata	00000000 __global_pointer$
800065e4 g     F .text	00000048 printsv
80009714 g     O .sbss	00000004 southPackets_last
800095b0 g       *ABS*	00000000 __data_load
80001930 g     F .text	000000e4 SysTick_Handler
80000954  w    F .text	00000020 External_5_IRQHandler
80005330 g     F .text	0000010c API_PipeInitialization
800036f8 g     F .text	00000128 API_TilesReset
8000101c g       .text	00000000 HW_get_8bit_reg_field
80003038 g     F .text	0000003c vTaskEnterCritical
80006920 g     F .text	00000080 reverse
80008ea4 g     O .text	0000000c loadStoreDyn
80007bbc g     F .text	00000070 API_AddPendingReq
8003bdf0 g     O .bss	00000064 priorityMatrix
8000591c g     F .text	00000110 API_checkPipe
800096bc g     O .sbss	00000004 pxCurrentTCB
80009690 g       .sbss	00000000 __sbss_start
80006444 g     F .text	000000f4 Chronos_init
80005a54 g     F .text	0000002c API_setFreqScale
8003bdec g     O .bss	00000004 errno
8003b7fc g     O .bss	000000f0 ServicePipe
80000f54 g       .text	00000000 HW_set_32bit_reg
80008e98 g     O .text	0000000c arithDyn
80000b34  w    F .text	00000020 External_20_IRQHandler
8003b8ec g     O .bss	00000004 NI_RX_Handler
80001a14 g     F .text	00000044 xPortStartScheduler
800003a0 g     F .text	00000024 __enable_irq
80001f2c g     F .text	0000021c xTaskGenericCreate
8000563c g     F .text	000000b4 API_GetServiceSlot
80009590 g       .sdata	00000000 __sdata_start
80001484 g     F .text	000000cc vPortFree
8003b8f0 g     O .bss	00000004 messageID
80006b80 g     F .text	000000c4 API_PushSendQueue
8004008c g     O .bss	00000008 g_uart
80000ff4 g       .text	00000000 HW_set_8bit_reg_field
80000bf4  w    F .text	00000020 External_26_IRQHandler
800007a4 g     F .text	00000170 handle_trap
80003614 g     F .text	00000084 API_GetApplicationFreeSlot
80001c00 g     F .text	00000088 vListInsertEnd
80005cc4 g     F .text	000000a4 getNumberOfPorts
00080000 g       *ABS*	00000000 RAM_SIZE
800009f4  w    F .text	00000020 External_10_IRQHandler
8003be54 g     O .bss	00000780 applications
8003b8f4 g     O .bss	00000240 ServiceMessage
80009720 g     O .sbss	00000004 API_SystemFinish
800065a8 g     F .text	0000003c printi
8000251c g     F .text	00000118 xTaskResumeFromISR
800096fc g     O .sbss	00000004 eastPackets_last
80001bd8 g     F .text	00000028 vListInitialiseItem
80007c2c g     F .text	0000001c API_NI_Handler
80001848 g     F .text	00000028 vPortClearInterruptMask
80000c74  w    F .text	00000020 External_30_IRQHandler
80009704 g     O .sbss	00000004 westPackets_last
80000ad4  w    F .text	00000020 External_17_IRQHandler
800500a0 g       .heap	00000000 _heap_end
80000dec g     F .text	00000050 _isatty
800400a0 g       .bss	00000000 __bss_end
80000510 g     F .text	00000294 handle_syscall
80003430 g     F .text	000001e4 API_AddApplication
800012a8 g     F .text	000001dc pvPortMalloc
8000543c g     F .text	00000200 API_GetMessageSlot
80003ba0 g     F .text	000003d0 API_DealocateTask
800001d0 g     F .text	0000006c _init
80001b74 g     F .text	00000064 vListInitialise
80000fe4 g       .text	00000000 HW_set_8bit_reg
80000fec g       .text	00000000 HW_get_8bit_reg
8000284c g     F .text	00000038 xTaskGetTickCount
8003c5d4 g     O .bss	00000004 temperatureUpdated
800038c8 g     F .text	000002d8 API_AllocateTasks
80004a50 g     F .text	000000a8 API_TaskListInit
80004c2c g     F .text	000002a4 API_TaskAllocation
8000970c g     O .sbss	00000004 northPackets_last
80004200 g     F .text	00000140 API_ClearTaskSlotFromTile
80004bac g     F .text	00000080 API_GetFreeTaskSlot
80005c70 g     F .text	00000054 resetExecutedInstructions
80009730 g       .sbss	00000000 __sbss_end
80004fa8 g     F .text	000000d4 API_TaskStart
80000f64 g       .text	00000000 HW_set_32bit_reg_field
800088a4 g     F .text	0000001c write
800045e4 g     F .text	00000068 API_TaskAllocated
80007ecc g     F .text	00000014 vApplicationMallocFailedHook
80000bd4  w    F .text	00000020 External_25_IRQHandler
80005d68 g     F .text	0000026c estimateNoCActivity
800600a0 g       .stack	00000000 __stack_top
80000c54  w    F .text	00000020 External_29_IRQHandler
80009708 g     O .sbss	00000004 northFlits_last
8003bb34 g     O .bss	00000034 incommingPacket
80002148 g     F .text	000000dc vTaskDelete
800011f8 g     F .text	000000b0 UART_polled_tx_string
80040084 g     O .bss	00000004 selectedFrequencyScale
80000cb4 g     F .text	000000e8 write_hex
80000a54  w    F .text	00000020 External_13_IRQHandler
80006790 g     F .text	0000006c External_2_IRQHandler
00010000 g       *ABS*	00000000 HEAP_SIZE
80000a34  w    F .text	00000020 External_12_IRQHandler
800096f4 g     O .sbss	00000004 thermalPacket_pending
80006b40 g     F .text	00000040 makeAddress
80001144 g     F .text	000000b4 UART_send
800030c4 g     F .text	000000f4 ulTaskNotifyTake
800066e0 g     F .text	0000004c SendRaw
80000000 g       .text	00000000 _start
80005a2c g     F .text	00000028 API_setFreqIdle
800026c4 g     F .text	00000028 vTaskSuspendAll
80006d28 g     F .text	000000a0 API_PopSendQueue
80004890 g     F .text	000001c0 API_StartTasks
800003c4 g     F .text	000000a8 handle_m_timer_interrupt
80006538 g     F .text	00000070 prints
80001d5c g     F .text	00000098 uxListRemove
8000464c g     F .text	00000244 API_ApplicationStart
8000672c g     F .text	00000064 NI_enable_irq
80009590 g       *ABS*	00000000 __sdata_load
80009690 g       .data	00000000 __data_end
80002430 g     F .text	000000ec vTaskResume
80002a70 g     F .text	000000ec vTaskSwitchContext
80000af4  w    F .text	00000020 External_18_IRQHandler
80000f8c g       .text	00000000 HW_get_32bit_reg_field
80008e50 g     O .text	0000000c powerAvgBufferIdle
800069a0 g     F .text	000001a0 myItoa
800022a8 g     F .text	000000ec vTaskSuspend
80000b74  w    F .text	00000020 External_22_IRQHandler
80000a94  w    F .text	00000020 External_15_IRQHandler
80001b4c g     F .text	00000028 vPortYield
80004af8 g     F .text	000000b4 API_GetCurrentTaskSlot
80000000 g       *ABS*	00000000 RAM_START_ADDRESS
80009730 g       .bss	00000000 __bss_start
8003c76c g     O .bss	00003918 TaskList
80000ab4  w    F .text	00000020 External_16_IRQHandler
80001df4 g     F .text	000000e8 memset
80007d18 g     F .text	000001b4 main
800068d4 g     F .text	0000004c mySwap
80005ab4 g     F .text	00000054 API_applyFreqScale
80001c88 g     F .text	000000d4 vListInsert
80000c34  w    F .text	00000020 External_28_IRQHandler
80007998 g     F .text	00000224 API_CheckMessagePipe
80006c44 g     F .text	000000e4 API_PrioritySend
80003698 g     F .text	00000060 API_ApplicationsReset
80003010 g     F .text	00000028 xTaskGetCurrentTaskHandle
80000fa4 g       .text	00000000 HW_get_16bit_reg
800095b0 g       .sdata	00000000 __sdata_end
8000507c g     F .text	000002b4 API_FinishRunningTask
80008e74 g     O .text	0000000c powerSwitchControlActive
800500a0 g       .heap	00000000 __heap_end
80000a74  w    F .text	00000020 External_14_IRQHandler
800040a4 g     F .text	0000015c API_GetTaskSlotFromTile
80003f70 g     F .text	00000134 getNextPriorityAddr
80009710 g     O .sbss	00000004 southFlits_last
8000442c g     F .text	000001b8 API_RepositoryAllocation
8000023c g     F .text	0000001c _fini
800026ec g     F .text	00000160 xTaskResumeAll
80002634 g     F .text	00000090 vTaskStartScheduler
8000710c g     F .text	00000454 API_SendMessage
800095b0 g     O .data	00000080 ext_irq_handler_table
8003bb68 g     O .bss	00000020 SendingQueue
800088c0 g     F .text	00000054 _write_r
80000fac g       .text	00000000 HW_set_16bit_reg_field
80006f9c g     F .text	00000170 API_AckTaskAllocation
8003bb88 g     O .bss	00000004 SendingQueue_tail
800095a0 g     O .sdata	00000004 _impure_ptr
800500a0 g       .stack	00000000 __stack_bottom
80001a58 g     F .text	000000f4 Software_IRQHandler
80005b08 g     F .text	00000168 API_freqStepUp
800056f0 g     F .text	0000022c API_ClearPipeSlot
80000c14  w    F .text	00000020 External_27_IRQHandler
8003bb8c g     O .bss	00000240 ThermalPacket
800009b4  w    F .text	00000020 External_8_IRQHandler
800009d4  w    F .text	00000020 External_9_IRQHandler
800400a0 g       .heap	00000000 __heap_start
80000914  w    F .text	00000020 Invalid_IRQHandler
80008e5c g     O .text	0000000c powerSwitchControlIdle
80006dc8 g     F .text	000001d4 API_Try2Send
800067fc g     F .text	0000006c External_3_IRQHandler
80002884 g     F .text	000001ec xTaskIncrementTick
80008e8c g     O .text	0000000c writeEnergyMemory
80004ed0 g     F .text	000000d8 API_GetTaskSlot
800096b8 g     O .sbss	00000004 g_startscheduler
800066b8 g     F .text	00000028 getYpos
80000b14  w    F .text	00000020 External_19_IRQHandler
80000e6c g     F .text	000000e8 _write
8000668c g     F .text	0000002c getXpos
800400a0 g       .bss	00000000 _end
80001750 g     F .text	000000cc vPortSetupTimer
8003c5d8 g     O .bss	00000064 SystemTemperature
80005a80 g     F .text	00000034 API_getFreqScale
8003bdcc g     O .bss	00000014 str
8003bde0 g     O .bss	00000004 NI_TX_Handler
8003bde4 g     O .bss	00000004 SendingQueue_front
80003310 g     F .text	00000120 API_RepositoryWakeUp
8000662c g     F .text	00000060 printsvsv
80002224 g     F .text	00000084 vTaskDelay
8000102c g     F .text	00000118 UART_init
80000f5c g       .text	00000000 HW_get_32bit_reg
8003bde8 g     O .bss	00000004 NI_TMR_Handler
80008e68 g     O .text	0000000c powerAvgBufferActive
80000d9c g     F .text	00000050 _exit
80000f9c g       .text	00000000 HW_set_16bit_reg
800076fc g     F .text	0000029c API_SendMessageReq
80003074 g     F .text	00000050 vTaskExitCritical
80001edc g     F .text	00000050 strlen
8000189c g     F .text	00000094 pxPortInitialiseStack
80000934  w    F .text	00000020 External_1_IRQHandler
80007560 g     F .text	0000019c API_SendFinishTask
80000974  w    F .text	00000020 External_6_IRQHandler
80000c94  w    F .text	00000020 External_31_IRQHandler
80004340 g     F .text	000000ec API_GetSystemTasksSlots
80001610 g     F .text	00000034 vPortEnterCritical
800095b0 g       .data	00000000 __data_start
80005fd4 g     F .text	00000380 powerEstimation
80040094 g     O .bss	00000004 ProcessorAddr
8000971c g     O .sbss	00000004 localPackets_last
8003c63c g     O .bss	00000004 priorityPointer
80000b54  w    F .text	00000020 External_21_IRQHandler
8003c640 g     O .bss	0000012c Tiles
800004e0 g     F .text	00000030 handle_m_soft_interrupt
8000046c g     F .text	00000074 handle_m_ext_interrupt
80000fd4 g       .text	00000000 HW_get_16bit_reg_field
80000b94  w    F .text	00000020 External_23_IRQHandler
80000bb4  w    F .text	00000020 External_24_IRQHandler
80009718 g     O .sbss	00000004 localFlits_last
80006868 g     F .text	0000006c External_4_IRQHandler
800031b8 g     F .text	00000158 vTaskNotifyGiveFromISR
80003820 g     F .text	000000a8 GeneratePatternMatrix
80000994  w    F .text	00000020 External_7_IRQHandler
80007ee0 g     F .text	0000001c vApplicationIdleHook



Disassembly of section .text:

80000000 <_start>:
_start():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:30

  .section      .text.entry
  .globl _start

_start:
  j handle_reset
80000000:	00c0006f          	j	8000000c <handle_reset>

80000004 <nmi_vector>:
nmi_vector():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:33

nmi_vector:
  j nmi_vector
80000004:	0000006f          	j	80000004 <nmi_vector>

80000008 <trap_vector>:
trap_vector():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:36

trap_vector:
  j trap_entry
80000008:	0280006f          	j	80000030 <trap_entry>

8000000c <handle_reset>:
handle_reset():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:39

handle_reset:
  la t0, trap_entry
8000000c:	00000297          	auipc	t0,0x0
80000010:	02428293          	addi	t0,t0,36 # 80000030 <trap_entry>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:40
  csrw mtvec, t0
80000014:	30529073          	csrw	mtvec,t0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:41
  csrwi mstatus, 0
80000018:	30005073          	csrwi	mstatus,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:42
  csrwi mie, 0
8000001c:	30405073          	csrwi	mie,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:60
  lui t0, 0x0
  fscsr t0
#endif

  # initialize global pointer
  la gp, __global_pointer$
80000020:	00018193          	mv	gp,gp
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:63

  # initialize stack pointer
  la sp, __stack_top
80000024:	00060117          	auipc	sp,0x60
80000028:	07c10113          	addi	sp,sp,124 # 800600a0 <__stack_top>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:66

  # perform the rest of initialization in C
  j _init
8000002c:	1a40006f          	j	800001d0 <_init>

80000030 <trap_entry>:
trap_entry():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:70


trap_entry:
  addi sp, sp, -33*REGBYTES
80000030:	f7c10113          	addi	sp,sp,-132
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:72

  SREG x1, 0 * REGBYTES(sp)
80000034:	00112023          	sw	ra,0(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:73
  SREG x2, 1 * REGBYTES(sp)
80000038:	00212223          	sw	sp,4(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:74
  SREG x3, 2 * REGBYTES(sp)
8000003c:	00312423          	sw	gp,8(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:75
  SREG x4, 3 * REGBYTES(sp)
80000040:	00412623          	sw	tp,12(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:76
  SREG x5, 4 * REGBYTES(sp)
80000044:	00512823          	sw	t0,16(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:77
  SREG x6, 5 * REGBYTES(sp)
80000048:	00612a23          	sw	t1,20(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:78
  SREG x7, 6 * REGBYTES(sp)
8000004c:	00712c23          	sw	t2,24(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:79
  SREG x8, 7 * REGBYTES(sp)
80000050:	00812e23          	sw	s0,28(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:80
  SREG x9, 8 * REGBYTES(sp)
80000054:	02912023          	sw	s1,32(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:81
  SREG x10, 9 * REGBYTES(sp)
80000058:	02a12223          	sw	a0,36(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:82
  SREG x11, 10 * REGBYTES(sp)
8000005c:	02b12423          	sw	a1,40(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:83
  SREG x12, 11 * REGBYTES(sp)
80000060:	02c12623          	sw	a2,44(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:84
  SREG x13, 12 * REGBYTES(sp)
80000064:	02d12823          	sw	a3,48(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:85
  SREG x14, 13 * REGBYTES(sp)
80000068:	02e12a23          	sw	a4,52(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:86
  SREG x15, 14 * REGBYTES(sp)
8000006c:	02f12c23          	sw	a5,56(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:87
  SREG x16, 15 * REGBYTES(sp)
80000070:	03012e23          	sw	a6,60(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:88
  SREG x17, 16 * REGBYTES(sp)
80000074:	05112023          	sw	a7,64(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:89
  SREG x18, 17 * REGBYTES(sp)
80000078:	05212223          	sw	s2,68(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:90
  SREG x19, 18 * REGBYTES(sp)
8000007c:	05312423          	sw	s3,72(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:91
  SREG x20, 19 * REGBYTES(sp)
80000080:	05412623          	sw	s4,76(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:92
  SREG x21, 20 * REGBYTES(sp)
80000084:	05512823          	sw	s5,80(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:93
  SREG x22, 21 * REGBYTES(sp)
80000088:	05612a23          	sw	s6,84(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:94
  SREG x23, 22 * REGBYTES(sp)
8000008c:	05712c23          	sw	s7,88(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:95
  SREG x24, 23 * REGBYTES(sp)
80000090:	05812e23          	sw	s8,92(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:96
  SREG x25, 24 * REGBYTES(sp)
80000094:	07912023          	sw	s9,96(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:97
  SREG x26, 25 * REGBYTES(sp)
80000098:	07a12223          	sw	s10,100(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:98
  SREG x27, 26 * REGBYTES(sp)
8000009c:	07b12423          	sw	s11,104(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:99
  SREG x28, 27 * REGBYTES(sp)
800000a0:	07c12623          	sw	t3,108(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:100
  SREG x29, 28 * REGBYTES(sp)
800000a4:	07d12823          	sw	t4,112(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:101
  SREG x30, 29 * REGBYTES(sp)
800000a8:	07e12a23          	sw	t5,116(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:102
  SREG x31, 30 * REGBYTES(sp)
800000ac:	07f12c23          	sw	t6,120(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:105

  # Stores the return addr in the stack
  csrr t0, mepc
800000b0:	341022f3          	csrr	t0,mepc
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:106
  SREG t0, 31 * REGBYTES(sp)
800000b4:	06512e23          	sw	t0,124(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:109

  # store the MIE value in the stack
  li t0, MSTATUS_MIE
800000b8:	00800293          	li	t0,8
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:110
  csrrc t0, mstatus, t0 
800000bc:	3002b2f3          	csrrc	t0,mstatus,t0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:111
  SREG t0, 32 * REGBYTES(sp) 
800000c0:	08512023          	sw	t0,128(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:113

  csrr a0, mcause
800000c4:	34202573          	csrr	a0,mcause
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:114
  csrr a1, mepc
800000c8:	341025f3          	csrr	a1,mepc
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:115
  mv a2, sp
800000cc:	00010613          	mv	a2,sp
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:116
  call handle_trap
800000d0:	6d4000ef          	jal	ra,800007a4 <handle_trap>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:117
  csrw mepc, a0
800000d4:	34151073          	csrw	mepc,a0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:120

  # Remain in M-mode after mret
  li t0, MSTATUS_MPP
800000d8:	000022b7          	lui	t0,0x2
800000dc:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:121
  csrs mstatus, t0
800000e0:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:126
  #li t0, MSTATUS_MPIE
  #csrs mstatus, t0

  # Restore the interruption status after MRET
  LREG x5, 32 * REGBYTES(sp)  # load the old MIE value to t0
800000e4:	08012283          	lw	t0,128(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:127
  slli t0, t0, 4              # shifts it to the MPIE position
800000e8:	00429293          	slli	t0,t0,0x4
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:128
  csrs mstatus, t0            # restore the MIE value into the MPIE
800000ec:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:130
  
  LREG x1, 0 * REGBYTES(sp)
800000f0:	00012083          	lw	ra,0(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:131
  LREG x2, 1 * REGBYTES(sp)
800000f4:	00412103          	lw	sp,4(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:132
  LREG x3, 2 * REGBYTES(sp)
800000f8:	00812183          	lw	gp,8(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:133
  LREG x4, 3 * REGBYTES(sp)
800000fc:	00c12203          	lw	tp,12(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:134
  LREG x5, 4 * REGBYTES(sp)
80000100:	01012283          	lw	t0,16(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:135
  LREG x6, 5 * REGBYTES(sp)
80000104:	01412303          	lw	t1,20(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:136
  LREG x7, 6 * REGBYTES(sp)
80000108:	01812383          	lw	t2,24(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:137
  LREG x8, 7 * REGBYTES(sp)
8000010c:	01c12403          	lw	s0,28(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:138
  LREG x9, 8 * REGBYTES(sp)
80000110:	02012483          	lw	s1,32(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:139
  LREG x10, 9 * REGBYTES(sp)
80000114:	02412503          	lw	a0,36(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:140
  LREG x11, 10 * REGBYTES(sp)
80000118:	02812583          	lw	a1,40(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:141
  LREG x12, 11 * REGBYTES(sp)
8000011c:	02c12603          	lw	a2,44(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:142
  LREG x13, 12 * REGBYTES(sp)
80000120:	03012683          	lw	a3,48(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:143
  LREG x14, 13 * REGBYTES(sp)
80000124:	03412703          	lw	a4,52(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:144
  LREG x15, 14 * REGBYTES(sp)
80000128:	03812783          	lw	a5,56(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:145
  LREG x16, 15 * REGBYTES(sp)
8000012c:	03c12803          	lw	a6,60(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:146
  LREG x17, 16 * REGBYTES(sp)
80000130:	04012883          	lw	a7,64(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:147
  LREG x18, 17 * REGBYTES(sp)
80000134:	04412903          	lw	s2,68(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:148
  LREG x19, 18 * REGBYTES(sp)
80000138:	04812983          	lw	s3,72(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:149
  LREG x20, 19 * REGBYTES(sp)
8000013c:	04c12a03          	lw	s4,76(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:150
  LREG x21, 20 * REGBYTES(sp)
80000140:	05012a83          	lw	s5,80(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:151
  LREG x22, 21 * REGBYTES(sp)
80000144:	05412b03          	lw	s6,84(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:152
  LREG x23, 22 * REGBYTES(sp)
80000148:	05812b83          	lw	s7,88(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:153
  LREG x24, 23 * REGBYTES(sp)
8000014c:	05c12c03          	lw	s8,92(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:154
  LREG x25, 24 * REGBYTES(sp)
80000150:	06012c83          	lw	s9,96(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:155
  LREG x26, 25 * REGBYTES(sp)
80000154:	06412d03          	lw	s10,100(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:156
  LREG x27, 26 * REGBYTES(sp)
80000158:	06812d83          	lw	s11,104(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:157
  LREG x28, 27 * REGBYTES(sp)
8000015c:	06c12e03          	lw	t3,108(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:158
  LREG x29, 28 * REGBYTES(sp)
80000160:	07012e83          	lw	t4,112(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:159
  LREG x30, 29 * REGBYTES(sp)
80000164:	07412f03          	lw	t5,116(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:160
  LREG x31, 30 * REGBYTES(sp)
80000168:	07812f83          	lw	t6,120(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:162

  addi sp, sp, 33*REGBYTES
8000016c:	08410113          	addi	sp,sp,132
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/entry.S:163
  mret
80000170:	30200073          	mret
	...

80000180 <zero_section>:
zero_section():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/init.c:47
        ++p_vma;
    }
}

static void zero_section(uint32_t * start, uint32_t * end)
{
80000180:	fd010113          	addi	sp,sp,-48
80000184:	02812623          	sw	s0,44(sp)
80000188:	03010413          	addi	s0,sp,48
8000018c:	fca42e23          	sw	a0,-36(s0)
80000190:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/init.c:48
    uint32_t * p_zero = start;
80000194:	fdc42783          	lw	a5,-36(s0)
80000198:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/init.c:50
    
    while(p_zero <= end)
8000019c:	0180006f          	j	800001b4 <zero_section+0x34>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/init.c:52
    {
        *p_zero = 0;
800001a0:	fec42783          	lw	a5,-20(s0)
800001a4:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/init.c:53
        ++p_zero;
800001a8:	fec42783          	lw	a5,-20(s0)
800001ac:	00478793          	addi	a5,a5,4
800001b0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/init.c:50
    while(p_zero <= end)
800001b4:	fec42703          	lw	a4,-20(s0)
800001b8:	fd842783          	lw	a5,-40(s0)
800001bc:	fee7f2e3          	bleu	a4,a5,800001a0 <zero_section+0x20>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/init.c:55
    }
}
800001c0:	00000013          	nop
800001c4:	02c12403          	lw	s0,44(sp)
800001c8:	03010113          	addi	sp,sp,48
800001cc:	00008067          	ret

800001d0 <_init>:
_init():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/init.c:58

void _init(void)
{
800001d0:	fe010113          	addi	sp,sp,-32
800001d4:	00112e23          	sw	ra,28(sp)
800001d8:	00812c23          	sw	s0,24(sp)
800001dc:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/init.c:60
    extern int main(int, char**);
    const char *argv0 = "hello";
800001e0:	800097b7          	lui	a5,0x80009
800001e4:	92078793          	addi	a5,a5,-1760 # 80008920 <__stack_top+0xfffa8880>
800001e8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/init.c:61
    char *argv[] = {(char *)argv0, NULL, NULL};
800001ec:	fec42783          	lw	a5,-20(s0)
800001f0:	fef42023          	sw	a5,-32(s0)
800001f4:	fe042223          	sw	zero,-28(s0)
800001f8:	fe042423          	sw	zero,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/init.c:66

// Imperas - this is loaded directly by simulator so must not be copied
//    copy_section(&__sdata_load, &__sdata_start, &__sdata_end);
//    copy_section(&__data_load, &__data_start, &__data_end);
    zero_section(&__sbss_start, &__sbss_end);
800001fc:	9a018593          	addi	a1,gp,-1632 # 80009730 <__sbss_end>
80000200:	90018513          	addi	a0,gp,-1792 # 80009690 <__data_end>
80000204:	f7dff0ef          	jal	ra,80000180 <zero_section>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/init.c:67
    zero_section(&__bss_start, &__bss_end);
80000208:	800407b7          	lui	a5,0x80040
8000020c:	0a078593          	addi	a1,a5,160 # 800400a0 <__stack_top+0xfffe0000>
80000210:	9a018513          	addi	a0,gp,-1632 # 80009730 <__sbss_end>
80000214:	f6dff0ef          	jal	ra,80000180 <zero_section>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/init.c:69
    
    main(1, argv);
80000218:	fe040793          	addi	a5,s0,-32
8000021c:	00078593          	mv	a1,a5
80000220:	00100513          	li	a0,1
80000224:	2f5070ef          	jal	ra,80007d18 <main>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/init.c:70
}
80000228:	00000013          	nop
8000022c:	01c12083          	lw	ra,28(sp)
80000230:	01812403          	lw	s0,24(sp)
80000234:	02010113          	addi	sp,sp,32
80000238:	00008067          	ret

8000023c <_fini>:
_fini():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/init.c:75

/* Function called after main() finishes */
void
_fini()
{
8000023c:	ff010113          	addi	sp,sp,-16
80000240:	00812623          	sw	s0,12(sp)
80000244:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/init.c:76
}
80000248:	00000013          	nop
8000024c:	00c12403          	lw	s0,12(sp)
80000250:	01010113          	addi	sp,sp,16
80000254:	00008067          	ret

80000258 <PLIC_DisableIRQ>:
PLIC_DisableIRQ():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:174
 * 	If you wish to disable the external interrupt while the interrupt handler
 * 	for that external interrupt is executing then you must use the return value
 * 	EXT_IRQ_DISABLE to return from the extern interrupt handler.
 */
static inline void PLIC_DisableIRQ(IRQn_Type IRQn)
{
80000258:	fd010113          	addi	sp,sp,-48
8000025c:	02812623          	sw	s0,44(sp)
80000260:	03010413          	addi	s0,sp,48
80000264:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:175
    unsigned long hart_id = read_csr(mhartid);
80000268:	f14027f3          	csrr	a5,mhartid
8000026c:	fef42623          	sw	a5,-20(s0)
80000270:	fec42783          	lw	a5,-20(s0)
80000274:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:176
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80000278:	40000737          	lui	a4,0x40000
8000027c:	fdc42783          	lw	a5,-36(s0)
80000280:	0057d793          	srli	a5,a5,0x5
80000284:	fe842683          	lw	a3,-24(s0)
80000288:	00569693          	slli	a3,a3,0x5
8000028c:	00f686b3          	add	a3,a3,a5
80000290:	000017b7          	lui	a5,0x1
80000294:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80000298:	00f687b3          	add	a5,a3,a5
8000029c:	00279793          	slli	a5,a5,0x2
800002a0:	00f707b3          	add	a5,a4,a5
800002a4:	0007a783          	lw	a5,0(a5)
800002a8:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:178

    current &= ~((uint32_t)1 << (IRQn % 32));
800002ac:	fdc42783          	lw	a5,-36(s0)
800002b0:	01f7f793          	andi	a5,a5,31
800002b4:	00100713          	li	a4,1
800002b8:	00f717b3          	sll	a5,a4,a5
800002bc:	fff7c793          	not	a5,a5
800002c0:	fe442703          	lw	a4,-28(s0)
800002c4:	00f777b3          	and	a5,a4,a5
800002c8:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:180

    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
800002cc:	40000737          	lui	a4,0x40000
800002d0:	fdc42783          	lw	a5,-36(s0)
800002d4:	0057d793          	srli	a5,a5,0x5
800002d8:	fe842683          	lw	a3,-24(s0)
800002dc:	00569693          	slli	a3,a3,0x5
800002e0:	00f686b3          	add	a3,a3,a5
800002e4:	000017b7          	lui	a5,0x1
800002e8:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
800002ec:	00f687b3          	add	a5,a3,a5
800002f0:	00279793          	slli	a5,a5,0x2
800002f4:	00f707b3          	add	a5,a4,a5
800002f8:	fe442703          	lw	a4,-28(s0)
800002fc:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:181
}
80000300:	00000013          	nop
80000304:	02c12403          	lw	s0,44(sp)
80000308:	03010113          	addi	sp,sp,48
8000030c:	00008067          	ret

80000310 <PLIC_ClaimIRQ>:
PLIC_ClaimIRQ():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:205

/*==============================================================================
 * The function PLIC_ClaimIRQ() claims the interrupt from the PLIC controller.
 */
static inline uint32_t PLIC_ClaimIRQ(void)
{
80000310:	fe010113          	addi	sp,sp,-32
80000314:	00812e23          	sw	s0,28(sp)
80000318:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:206
    unsigned long hart_id = read_csr(mhartid);
8000031c:	f14027f3          	csrr	a5,mhartid
80000320:	fef42623          	sw	a5,-20(s0)
80000324:	fec42783          	lw	a5,-20(s0)
80000328:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:208

    return PLIC->TARGET[hart_id].CLAIM_COMPLETE;
8000032c:	40000737          	lui	a4,0x40000
80000330:	fe842783          	lw	a5,-24(s0)
80000334:	20078793          	addi	a5,a5,512
80000338:	00c79793          	slli	a5,a5,0xc
8000033c:	00f707b3          	add	a5,a4,a5
80000340:	0047a783          	lw	a5,4(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:209
}
80000344:	00078513          	mv	a0,a5
80000348:	01c12403          	lw	s0,28(sp)
8000034c:	02010113          	addi	sp,sp,32
80000350:	00008067          	ret

80000354 <PLIC_CompleteIRQ>:
PLIC_CompleteIRQ():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:216
/*==============================================================================
 * The function PLIC_CompleteIRQ() indicates to the PLIC controller the interrupt
 * is processed and claim is complete.
 */
static inline void PLIC_CompleteIRQ(uint32_t source)
{
80000354:	fd010113          	addi	sp,sp,-48
80000358:	02812623          	sw	s0,44(sp)
8000035c:	03010413          	addi	s0,sp,48
80000360:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:217
    unsigned long hart_id = read_csr(mhartid);
80000364:	f14027f3          	csrr	a5,mhartid
80000368:	fef42623          	sw	a5,-20(s0)
8000036c:	fec42783          	lw	a5,-20(s0)
80000370:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:219

    PLIC->TARGET[hart_id].CLAIM_COMPLETE = source;
80000374:	40000737          	lui	a4,0x40000
80000378:	fe842783          	lw	a5,-24(s0)
8000037c:	20078793          	addi	a5,a5,512
80000380:	00c79793          	slli	a5,a5,0xc
80000384:	00f707b3          	add	a5,a4,a5
80000388:	fdc42703          	lw	a4,-36(s0)
8000038c:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:220
}
80000390:	00000013          	nop
80000394:	02c12403          	lw	s0,44(sp)
80000398:	03010113          	addi	sp,sp,48
8000039c:	00008067          	ret

800003a0 <__enable_irq>:
__enable_irq():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:96

/*------------------------------------------------------------------------------
 * Enabler all interrupts.
 */
void __enable_irq(void)
{
800003a0:	fe010113          	addi	sp,sp,-32
800003a4:	00812e23          	sw	s0,28(sp)
800003a8:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:97
    set_csr(mstatus, MSTATUS_MIE);
800003ac:	300467f3          	csrrsi	a5,mstatus,8
800003b0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:98
}
800003b4:	00000013          	nop
800003b8:	01c12403          	lw	s0,28(sp)
800003bc:	02010113          	addi	sp,sp,32
800003c0:	00008067          	ret

800003c4 <handle_m_timer_interrupt>:
handle_m_timer_interrupt():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:128

/*------------------------------------------------------------------------------
 * RISC-V interrupt handler for machine timer interrupts.
 */
void handle_m_timer_interrupt()
{
800003c4:	fe010113          	addi	sp,sp,-32
800003c8:	00112e23          	sw	ra,28(sp)
800003cc:	00812c23          	sw	s0,24(sp)
800003d0:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:129
    clear_csr(mie, MIP_MTIP); //  MIP_MTIP (1 << 7)
800003d4:	08000793          	li	a5,128
800003d8:	3047b7f3          	csrrc	a5,mie,a5
800003dc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:131

    SysTick_Handler();
800003e0:	550010ef          	jal	ra,80001930 <SysTick_Handler>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:133

    PRCI->MTIMECMP[read_csr(mhartid)] = PRCI->MTIME + g_systick_increment;
800003e4:	44000737          	lui	a4,0x44000
800003e8:	0000c7b7          	lui	a5,0xc
800003ec:	00f707b3          	add	a5,a4,a5
800003f0:	ffc7a803          	lw	a6,-4(a5) # bffc <HEAP_SIZE-0x4004>
800003f4:	ff87a783          	lw	a5,-8(a5)
800003f8:	9001a583          	lw	a1,-1792(gp) # 80009690 <__data_end>
800003fc:	9041a603          	lw	a2,-1788(gp) # 80009694 <__data_end+0x4>
80000400:	44000537          	lui	a0,0x44000
80000404:	f1402773          	csrr	a4,mhartid
80000408:	fee42423          	sw	a4,-24(s0)
8000040c:	fe842883          	lw	a7,-24(s0)
80000410:	00b786b3          	add	a3,a5,a1
80000414:	00068313          	mv	t1,a3
80000418:	00f33333          	sltu	t1,t1,a5
8000041c:	00c80733          	add	a4,a6,a2
80000420:	00e307b3          	add	a5,t1,a4
80000424:	00078713          	mv	a4,a5
80000428:	00068793          	mv	a5,a3
8000042c:	00070813          	mv	a6,a4
80000430:	00001737          	lui	a4,0x1
80000434:	80070713          	addi	a4,a4,-2048 # 800 <HEAP_SIZE-0xf800>
80000438:	00e88733          	add	a4,a7,a4
8000043c:	00371713          	slli	a4,a4,0x3
80000440:	00e50733          	add	a4,a0,a4
80000444:	00f72023          	sw	a5,0(a4)
80000448:	01072223          	sw	a6,4(a4)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:135

    set_csr(mie, MIP_MTIP);
8000044c:	08000793          	li	a5,128
80000450:	3047a7f3          	csrrs	a5,mie,a5
80000454:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:136
    return;
80000458:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:137
}
8000045c:	01c12083          	lw	ra,28(sp)
80000460:	01812403          	lw	s0,24(sp)
80000464:	02010113          	addi	sp,sp,32
80000468:	00008067          	ret

8000046c <handle_m_ext_interrupt>:
handle_m_ext_interrupt():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:182

/*------------------------------------------------------------------------------
 * 
 */
void handle_m_ext_interrupt()
{
8000046c:	fe010113          	addi	sp,sp,-32
80000470:	00112e23          	sw	ra,28(sp)
80000474:	00812c23          	sw	s0,24(sp)
80000478:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:183
    uint32_t int_num  = PLIC_ClaimIRQ();
8000047c:	e95ff0ef          	jal	ra,80000310 <PLIC_ClaimIRQ>
80000480:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:184
    uint8_t disable = EXT_IRQ_KEEP_ENABLED;
80000484:	fe0405a3          	sb	zero,-21(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:186

    disable = ext_irq_handler_table[int_num]();
80000488:	800097b7          	lui	a5,0x80009
8000048c:	fec42703          	lw	a4,-20(s0)
80000490:	00271713          	slli	a4,a4,0x2
80000494:	5b078793          	addi	a5,a5,1456 # 800095b0 <__stack_top+0xfffa9510>
80000498:	00f707b3          	add	a5,a4,a5
8000049c:	0007a783          	lw	a5,0(a5)
800004a0:	000780e7          	jalr	a5
800004a4:	00050793          	mv	a5,a0
800004a8:	fef405a3          	sb	a5,-21(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:188

    PLIC_CompleteIRQ(int_num);
800004ac:	fec42503          	lw	a0,-20(s0)
800004b0:	ea5ff0ef          	jal	ra,80000354 <PLIC_CompleteIRQ>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:190

    if(EXT_IRQ_DISABLE == disable)
800004b4:	feb44703          	lbu	a4,-21(s0)
800004b8:	00100793          	li	a5,1
800004bc:	00f71863          	bne	a4,a5,800004cc <handle_m_ext_interrupt+0x60>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:192
    {
        PLIC_DisableIRQ((IRQn_Type)int_num);
800004c0:	fec42503          	lw	a0,-20(s0)
800004c4:	d95ff0ef          	jal	ra,80000258 <PLIC_DisableIRQ>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:194
    }
    return;
800004c8:	00000013          	nop
800004cc:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:195
}
800004d0:	01c12083          	lw	ra,28(sp)
800004d4:	01812403          	lw	s0,24(sp)
800004d8:	02010113          	addi	sp,sp,32
800004dc:	00008067          	ret

800004e0 <handle_m_soft_interrupt>:
handle_m_soft_interrupt():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:198

void handle_m_soft_interrupt()
{
800004e0:	ff010113          	addi	sp,sp,-16
800004e4:	00112623          	sw	ra,12(sp)
800004e8:	00812423          	sw	s0,8(sp)
800004ec:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:199
    Software_IRQHandler();
800004f0:	568010ef          	jal	ra,80001a58 <Software_IRQHandler>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:202

    /*Clear software interrupt*/
    PRCI->MSIP[0] = 0x00;
800004f4:	440007b7          	lui	a5,0x44000
800004f8:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:203
    return;
800004fc:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:204
}
80000500:	00c12083          	lw	ra,12(sp)
80000504:	00812403          	lw	s0,8(sp)
80000508:	01010113          	addi	sp,sp,16
8000050c:	00008067          	ret

80000510 <handle_syscall>:
handle_syscall():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:207

/* syscall funcion defined at system_call.c */
void handle_syscall(){
80000510:	fd010113          	addi	sp,sp,-48
80000514:	02112623          	sw	ra,44(sp)
80000518:	02812423          	sw	s0,40(sp)
8000051c:	03010413          	addi	s0,sp,48
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:210
	unsigned int arg0, arg1, arg2, arg3, arg4, arg5, type;
	unsigned int *pointer;
	register long temp asm("t0") = 0;
80000520:	00000293          	li	t0,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:211
	asm("addi	t0, sp, 0");
80000524:	00010293          	mv	t0,sp
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:213
	
	pointer = (unsigned int *)(temp + (29*4));
80000528:	00028793          	mv	a5,t0
8000052c:	07478793          	addi	a5,a5,116
80000530:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:214
	arg0 =  *pointer;
80000534:	fec42783          	lw	a5,-20(s0)
80000538:	0007a783          	lw	a5,0(a5)
8000053c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:216

	pointer = (unsigned int *)(temp + (30*4));
80000540:	00028793          	mv	a5,t0
80000544:	07878793          	addi	a5,a5,120
80000548:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:217
	arg1 = *pointer;
8000054c:	fec42783          	lw	a5,-20(s0)
80000550:	0007a783          	lw	a5,0(a5)
80000554:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:219
	
	pointer = (unsigned int *)(temp + (31*4));
80000558:	00028793          	mv	a5,t0
8000055c:	07c78793          	addi	a5,a5,124
80000560:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:220
	arg2 = *pointer;
80000564:	fec42783          	lw	a5,-20(s0)
80000568:	0007a783          	lw	a5,0(a5)
8000056c:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:222

	pointer = (unsigned int *)(temp + (32*4));
80000570:	00028793          	mv	a5,t0
80000574:	08078793          	addi	a5,a5,128
80000578:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:223
	arg3 = *pointer;
8000057c:	fec42783          	lw	a5,-20(s0)
80000580:	0007a783          	lw	a5,0(a5)
80000584:	fcf42e23          	sw	a5,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:225

	pointer = (unsigned int *)(temp + (33*4));
80000588:	00028793          	mv	a5,t0
8000058c:	08478793          	addi	a5,a5,132
80000590:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:226
	arg4 = *pointer;
80000594:	fec42783          	lw	a5,-20(s0)
80000598:	0007a783          	lw	a5,0(a5)
8000059c:	fcf42c23          	sw	a5,-40(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:228

	pointer = (unsigned int *)(temp + (34*4));
800005a0:	00028793          	mv	a5,t0
800005a4:	08878793          	addi	a5,a5,136
800005a8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:229
	arg4 = *pointer;
800005ac:	fec42783          	lw	a5,-20(s0)
800005b0:	0007a783          	lw	a5,0(a5)
800005b4:	fcf42c23          	sw	a5,-40(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:231

	pointer = (unsigned int *)(temp + (36*4));
800005b8:	00028793          	mv	a5,t0
800005bc:	09078793          	addi	a5,a5,144
800005c0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:232
	type = *pointer;
800005c4:	fec42783          	lw	a5,-20(s0)
800005c8:	0007a783          	lw	a5,0(a5)
800005cc:	fcf42a23          	sw	a5,-44(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:234

	switch (type){
800005d0:	fd442783          	lw	a5,-44(s0)
800005d4:	ff678793          	addi	a5,a5,-10
800005d8:	03800713          	li	a4,56
800005dc:	12f76663          	bltu	a4,a5,80000708 <handle_syscall+0x1f8>
800005e0:	00279713          	slli	a4,a5,0x2
800005e4:	800097b7          	lui	a5,0x80009
800005e8:	9bc78793          	addi	a5,a5,-1604 # 800089bc <__stack_top+0xfffa891c>
800005ec:	00f707b3          	add	a5,a4,a5
800005f0:	0007a783          	lw	a5,0(a5)
800005f4:	00078067          	jr	a5
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:237

		case SYS_TESTING:
			prints("Detectei uma chamada TESTE de sistema!\n");
800005f8:	800097b7          	lui	a5,0x80009
800005fc:	92878513          	addi	a0,a5,-1752 # 80008928 <__stack_top+0xfffa8888>
80000600:	739050ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:238
			printsv("arg0 ", arg0);
80000604:	fe842783          	lw	a5,-24(s0)
80000608:	00078593          	mv	a1,a5
8000060c:	800097b7          	lui	a5,0x80009
80000610:	95078513          	addi	a0,a5,-1712 # 80008950 <__stack_top+0xfffa88b0>
80000614:	7d1050ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:239
			printsv("arg1 ", arg1);
80000618:	fe442783          	lw	a5,-28(s0)
8000061c:	00078593          	mv	a1,a5
80000620:	800097b7          	lui	a5,0x80009
80000624:	95878513          	addi	a0,a5,-1704 # 80008958 <__stack_top+0xfffa88b8>
80000628:	7bd050ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:240
			printsv("arg2 ", arg2);
8000062c:	fe042783          	lw	a5,-32(s0)
80000630:	00078593          	mv	a1,a5
80000634:	800097b7          	lui	a5,0x80009
80000638:	96078513          	addi	a0,a5,-1696 # 80008960 <__stack_top+0xfffa88c0>
8000063c:	7a9050ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:241
			printsv("arg3 ", arg3);
80000640:	fdc42783          	lw	a5,-36(s0)
80000644:	00078593          	mv	a1,a5
80000648:	800097b7          	lui	a5,0x80009
8000064c:	96878513          	addi	a0,a5,-1688 # 80008968 <__stack_top+0xfffa88c8>
80000650:	795050ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:242
			printsv("arg4 ", arg4);
80000654:	fd842783          	lw	a5,-40(s0)
80000658:	00078593          	mv	a1,a5
8000065c:	800097b7          	lui	a5,0x80009
80000660:	97078513          	addi	a0,a5,-1680 # 80008970 <__stack_top+0xfffa88d0>
80000664:	781050ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:243
			printsv("type ", type);
80000668:	fd442783          	lw	a5,-44(s0)
8000066c:	00078593          	mv	a1,a5
80000670:	800097b7          	lui	a5,0x80009
80000674:	97878513          	addi	a0,a5,-1672 # 80008978 <__stack_top+0xfffa88d8>
80000678:	76d050ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:244
			break;
8000067c:	1140006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:247

        case SYS_PRINTS:
            prints(arg0);
80000680:	fe842783          	lw	a5,-24(s0)
80000684:	00078513          	mv	a0,a5
80000688:	6b1050ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:248
            UART_polled_tx_string( &g_uart, arg0 );
8000068c:	fe842783          	lw	a5,-24(s0)
80000690:	00078593          	mv	a1,a5
80000694:	800407b7          	lui	a5,0x80040
80000698:	08c78513          	addi	a0,a5,140 # 8004008c <__stack_top+0xfffdffec>
8000069c:	35d000ef          	jal	ra,800011f8 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:249
            break;
800006a0:	0f00006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:252
        
        case SYS_PRINTI:
            printi(arg0);
800006a4:	fe842783          	lw	a5,-24(s0)
800006a8:	00078513          	mv	a0,a5
800006ac:	6fd050ef          	jal	ra,800065a8 <printi>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:253
            myItoa(arg0, str, 10);
800006b0:	fe842703          	lw	a4,-24(s0)
800006b4:	00a00613          	li	a2,10
800006b8:	8003c7b7          	lui	a5,0x8003c
800006bc:	dcc78593          	addi	a1,a5,-564 # 8003bdcc <__stack_top+0xfffdbd2c>
800006c0:	00070513          	mv	a0,a4
800006c4:	2dc060ef          	jal	ra,800069a0 <myItoa>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:254
            UART_polled_tx_string( &g_uart, (const uint8_t *)str );
800006c8:	8003c7b7          	lui	a5,0x8003c
800006cc:	dcc78593          	addi	a1,a5,-564 # 8003bdcc <__stack_top+0xfffdbd2c>
800006d0:	800407b7          	lui	a5,0x80040
800006d4:	08c78513          	addi	a0,a5,140 # 8004008c <__stack_top+0xfffdffec>
800006d8:	321000ef          	jal	ra,800011f8 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:255
            break;
800006dc:	0b40006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:259
        
        case SYS_SEND_MSG:
            //              addr, task
            API_SendMessage(arg0, arg1);
800006e0:	fe442583          	lw	a1,-28(s0)
800006e4:	fe842503          	lw	a0,-24(s0)
800006e8:	225060ef          	jal	ra,8000710c <API_SendMessage>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:260
            break;
800006ec:	0a40006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:264
        
        case SYS_RECV_MSG:
            //                 addr, task
            API_SendMessageReq(arg0, arg1);
800006f0:	fe442583          	lw	a1,-28(s0)
800006f4:	fe842503          	lw	a0,-24(s0)
800006f8:	004070ef          	jal	ra,800076fc <API_SendMessageReq>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:265
            break;
800006fc:	0940006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:268
        
        case SYS_END_TASK:
            API_FinishRunningTask();
80000700:	17d040ef          	jal	ra,8000507c <API_FinishRunningTask>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:269
            break;
80000704:	08c0006f          	j	80000790 <handle_syscall+0x280>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:272

		default:
			prints("Systemcall não identificada!\n");
80000708:	800097b7          	lui	a5,0x80009
8000070c:	98078513          	addi	a0,a5,-1664 # 80008980 <__stack_top+0xfffa88e0>
80000710:	629050ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:273
			printsv("arg0 ", arg0);
80000714:	fe842783          	lw	a5,-24(s0)
80000718:	00078593          	mv	a1,a5
8000071c:	800097b7          	lui	a5,0x80009
80000720:	95078513          	addi	a0,a5,-1712 # 80008950 <__stack_top+0xfffa88b0>
80000724:	6c1050ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:274
			printsv("arg1 ", arg1);
80000728:	fe442783          	lw	a5,-28(s0)
8000072c:	00078593          	mv	a1,a5
80000730:	800097b7          	lui	a5,0x80009
80000734:	95878513          	addi	a0,a5,-1704 # 80008958 <__stack_top+0xfffa88b8>
80000738:	6ad050ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:275
			printsv("arg2 ", arg2);
8000073c:	fe042783          	lw	a5,-32(s0)
80000740:	00078593          	mv	a1,a5
80000744:	800097b7          	lui	a5,0x80009
80000748:	96078513          	addi	a0,a5,-1696 # 80008960 <__stack_top+0xfffa88c0>
8000074c:	699050ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:276
			printsv("arg3 ", arg3);
80000750:	fdc42783          	lw	a5,-36(s0)
80000754:	00078593          	mv	a1,a5
80000758:	800097b7          	lui	a5,0x80009
8000075c:	96878513          	addi	a0,a5,-1688 # 80008968 <__stack_top+0xfffa88c8>
80000760:	685050ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:277
			printsv("arg4 ", arg4);
80000764:	fd842783          	lw	a5,-40(s0)
80000768:	00078593          	mv	a1,a5
8000076c:	800097b7          	lui	a5,0x80009
80000770:	97078513          	addi	a0,a5,-1680 # 80008970 <__stack_top+0xfffa88d0>
80000774:	671050ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:278
			printsv("type ", type);
80000778:	fd442783          	lw	a5,-44(s0)
8000077c:	00078593          	mv	a1,a5
80000780:	800097b7          	lui	a5,0x80009
80000784:	97878513          	addi	a0,a5,-1672 # 80008978 <__stack_top+0xfffa88d8>
80000788:	65d050ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:279
			break;
8000078c:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:281
	}
	return;
80000790:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:296
	// 	value = *p;
	// 	printsvsv("i: ", i, " value: ", value);
	// }
    // prints("Cheguei aqui!!!!!!! sucessooo :D\n");
	////////////////////////////////////////////////////
}
80000794:	02c12083          	lw	ra,44(sp)
80000798:	02812403          	lw	s0,40(sp)
8000079c:	03010113          	addi	sp,sp,48
800007a0:	00008067          	ret

800007a4 <handle_trap>:
handle_trap():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:302

/*------------------------------------------------------------------------------
 * Trap/Interrupt handler
 */
uintptr_t handle_trap(uintptr_t mcause, uintptr_t epc)
{
800007a4:	fe010113          	addi	sp,sp,-32
800007a8:	00112e23          	sw	ra,28(sp)
800007ac:	00812c23          	sw	s0,24(sp)
800007b0:	02010413          	addi	s0,sp,32
800007b4:	fea42623          	sw	a0,-20(s0)
800007b8:	feb42423          	sw	a1,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303
    if (!(mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE) == ENV_CALL_M || (mcause & MCAUSE_CAUSE) == ENV_CALL_H || (mcause & MCAUSE_CAUSE) == ENV_CALL_S || (mcause & MCAUSE_CAUSE) == ENV_CALL_U)){
800007bc:	fec42783          	lw	a5,-20(s0)
800007c0:	0607cc63          	bltz	a5,80000838 <handle_trap+0x94>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303 (discriminator 1)
800007c4:	fec42703          	lw	a4,-20(s0)
800007c8:	800007b7          	lui	a5,0x80000
800007cc:	fff7c793          	not	a5,a5
800007d0:	00f77733          	and	a4,a4,a5
800007d4:	00b00793          	li	a5,11
800007d8:	04f70663          	beq	a4,a5,80000824 <handle_trap+0x80>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303 (discriminator 2)
800007dc:	fec42703          	lw	a4,-20(s0)
800007e0:	800007b7          	lui	a5,0x80000
800007e4:	fff7c793          	not	a5,a5
800007e8:	00f77733          	and	a4,a4,a5
800007ec:	00a00793          	li	a5,10
800007f0:	02f70a63          	beq	a4,a5,80000824 <handle_trap+0x80>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303 (discriminator 3)
800007f4:	fec42703          	lw	a4,-20(s0)
800007f8:	800007b7          	lui	a5,0x80000
800007fc:	fff7c793          	not	a5,a5
80000800:	00f77733          	and	a4,a4,a5
80000804:	00900793          	li	a5,9
80000808:	00f70e63          	beq	a4,a5,80000824 <handle_trap+0x80>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:303 (discriminator 4)
8000080c:	fec42703          	lw	a4,-20(s0)
80000810:	800007b7          	lui	a5,0x80000
80000814:	fff7c793          	not	a5,a5
80000818:	00f77733          	and	a4,a4,a5
8000081c:	00800793          	li	a5,8
80000820:	00f71c63          	bne	a4,a5,80000838 <handle_trap+0x94>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:304
        handle_syscall();
80000824:	cedff0ef          	jal	ra,80000510 <handle_syscall>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:305
        epc = (uintptr_t) (epc + 4);
80000828:	fe842783          	lw	a5,-24(s0)
8000082c:	00478793          	addi	a5,a5,4 # 80000004 <__stack_top+0xfff9ff64>
80000830:	fef42423          	sw	a5,-24(s0)
80000834:	0c40006f          	j	800008f8 <handle_trap+0x154>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:307
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_EXT)){
80000838:	fec42783          	lw	a5,-20(s0)
8000083c:	0207d263          	bgez	a5,80000860 <handle_trap+0xbc>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:307 (discriminator 1)
80000840:	fec42703          	lw	a4,-20(s0)
80000844:	800007b7          	lui	a5,0x80000
80000848:	fff7c793          	not	a5,a5
8000084c:	00f77733          	and	a4,a4,a5
80000850:	00b00793          	li	a5,11
80000854:	00f71663          	bne	a4,a5,80000860 <handle_trap+0xbc>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:308
        handle_m_ext_interrupt();
80000858:	c15ff0ef          	jal	ra,8000046c <handle_m_ext_interrupt>
8000085c:	09c0006f          	j	800008f8 <handle_trap+0x154>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:310
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_TIMER)){
80000860:	fec42783          	lw	a5,-20(s0)
80000864:	0207d263          	bgez	a5,80000888 <handle_trap+0xe4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:310 (discriminator 1)
80000868:	fec42703          	lw	a4,-20(s0)
8000086c:	800007b7          	lui	a5,0x80000
80000870:	fff7c793          	not	a5,a5
80000874:	00f77733          	and	a4,a4,a5
80000878:	00700793          	li	a5,7
8000087c:	00f71663          	bne	a4,a5,80000888 <handle_trap+0xe4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:311
        handle_m_timer_interrupt();
80000880:	b45ff0ef          	jal	ra,800003c4 <handle_m_timer_interrupt>
80000884:	0740006f          	j	800008f8 <handle_trap+0x154>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:313
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_SOFT)){
80000888:	fec42783          	lw	a5,-20(s0)
8000088c:	0207d263          	bgez	a5,800008b0 <handle_trap+0x10c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:313 (discriminator 1)
80000890:	fec42703          	lw	a4,-20(s0)
80000894:	800007b7          	lui	a5,0x80000
80000898:	fff7c793          	not	a5,a5
8000089c:	00f77733          	and	a4,a4,a5
800008a0:	00300793          	li	a5,3
800008a4:	00f71663          	bne	a4,a5,800008b0 <handle_trap+0x10c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:314
        handle_m_soft_interrupt();
800008a8:	c39ff0ef          	jal	ra,800004e0 <handle_m_soft_interrupt>
800008ac:	04c0006f          	j	800008f8 <handle_trap+0x154>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:317
    }
    else{
        write(1, "trap\n", 5);
800008b0:	00500613          	li	a2,5
800008b4:	800097b7          	lui	a5,0x80009
800008b8:	9a078593          	addi	a1,a5,-1632 # 800089a0 <__stack_top+0xfffa8900>
800008bc:	00100513          	li	a0,1
800008c0:	7e5070ef          	jal	ra,800088a4 <write>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:318
        printsv("epc: ", epc);
800008c4:	fe842783          	lw	a5,-24(s0)
800008c8:	00078593          	mv	a1,a5
800008cc:	800097b7          	lui	a5,0x80009
800008d0:	9a878513          	addi	a0,a5,-1624 # 800089a8 <__stack_top+0xfffa8908>
800008d4:	511050ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:319
        printsv("mcause: ", mcause);
800008d8:	fec42783          	lw	a5,-20(s0)
800008dc:	00078593          	mv	a1,a5
800008e0:	800097b7          	lui	a5,0x80009
800008e4:	9b078513          	addi	a0,a5,-1616 # 800089b0 <__stack_top+0xfffa8910>
800008e8:	4fd050ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:320
        _exit(mcause);
800008ec:	fec42783          	lw	a5,-20(s0)
800008f0:	00078513          	mv	a0,a5
800008f4:	4a8000ef          	jal	ra,80000d9c <_exit>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:324
    }
    
    // Added by Iaçanã, solves several interruption problems!
    portDISABLE_INTERRUPTS(); 
800008f8:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:325
    return epc;
800008fc:	fe842783          	lw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:326
}
80000900:	00078513          	mv	a0,a5
80000904:	01c12083          	lw	ra,28(sp)
80000908:	01812403          	lw	s0,24(sp)
8000090c:	02010113          	addi	sp,sp,32
80000910:	00008067          	ret

80000914 <Invalid_IRQHandler>:
Invalid_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:37
{
    ;
}

__attribute__((weak))  uint8_t Invalid_IRQHandler(void)
{
80000914:	ff010113          	addi	sp,sp,-16
80000918:	00812623          	sw	s0,12(sp)
8000091c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:38
    return(0);
80000920:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:39
}
80000924:	00078513          	mv	a0,a5
80000928:	00c12403          	lw	s0,12(sp)
8000092c:	01010113          	addi	sp,sp,16
80000930:	00008067          	ret

80000934 <External_1_IRQHandler>:
External_1_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:42

__attribute__((weak))  uint8_t External_1_IRQHandler(void)
{
80000934:	ff010113          	addi	sp,sp,-16
80000938:	00812623          	sw	s0,12(sp)
8000093c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:43
    return(0);
80000940:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:44
}
80000944:	00078513          	mv	a0,a5
80000948:	00c12403          	lw	s0,12(sp)
8000094c:	01010113          	addi	sp,sp,16
80000950:	00008067          	ret

80000954 <External_5_IRQHandler>:
External_5_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:62
{
    return(0);
}

__attribute__((weak))  uint8_t External_5_IRQHandler(void)
{
80000954:	ff010113          	addi	sp,sp,-16
80000958:	00812623          	sw	s0,12(sp)
8000095c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:63
    return(0);
80000960:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:64
}
80000964:	00078513          	mv	a0,a5
80000968:	00c12403          	lw	s0,12(sp)
8000096c:	01010113          	addi	sp,sp,16
80000970:	00008067          	ret

80000974 <External_6_IRQHandler>:
External_6_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:67

__attribute__((weak))  uint8_t External_6_IRQHandler(void)
{
80000974:	ff010113          	addi	sp,sp,-16
80000978:	00812623          	sw	s0,12(sp)
8000097c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:68
    return(0);
80000980:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:69
}
80000984:	00078513          	mv	a0,a5
80000988:	00c12403          	lw	s0,12(sp)
8000098c:	01010113          	addi	sp,sp,16
80000990:	00008067          	ret

80000994 <External_7_IRQHandler>:
External_7_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:72

__attribute__((weak))  uint8_t External_7_IRQHandler(void)
{
80000994:	ff010113          	addi	sp,sp,-16
80000998:	00812623          	sw	s0,12(sp)
8000099c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:73
    return(0);
800009a0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:74
}
800009a4:	00078513          	mv	a0,a5
800009a8:	00c12403          	lw	s0,12(sp)
800009ac:	01010113          	addi	sp,sp,16
800009b0:	00008067          	ret

800009b4 <External_8_IRQHandler>:
External_8_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:77

__attribute__((weak))  uint8_t External_8_IRQHandler(void)
{
800009b4:	ff010113          	addi	sp,sp,-16
800009b8:	00812623          	sw	s0,12(sp)
800009bc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:78
    return(0);
800009c0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:79
}
800009c4:	00078513          	mv	a0,a5
800009c8:	00c12403          	lw	s0,12(sp)
800009cc:	01010113          	addi	sp,sp,16
800009d0:	00008067          	ret

800009d4 <External_9_IRQHandler>:
External_9_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:82

__attribute__((weak))  uint8_t External_9_IRQHandler(void)
{
800009d4:	ff010113          	addi	sp,sp,-16
800009d8:	00812623          	sw	s0,12(sp)
800009dc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:83
    return(0);
800009e0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:84
}
800009e4:	00078513          	mv	a0,a5
800009e8:	00c12403          	lw	s0,12(sp)
800009ec:	01010113          	addi	sp,sp,16
800009f0:	00008067          	ret

800009f4 <External_10_IRQHandler>:
External_10_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:87

__attribute__((weak))  uint8_t External_10_IRQHandler(void)
{
800009f4:	ff010113          	addi	sp,sp,-16
800009f8:	00812623          	sw	s0,12(sp)
800009fc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:88
    return(0);
80000a00:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:89
}
80000a04:	00078513          	mv	a0,a5
80000a08:	00c12403          	lw	s0,12(sp)
80000a0c:	01010113          	addi	sp,sp,16
80000a10:	00008067          	ret

80000a14 <External_11_IRQHandler>:
External_11_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:92

__attribute__((weak))  uint8_t External_11_IRQHandler(void)
{
80000a14:	ff010113          	addi	sp,sp,-16
80000a18:	00812623          	sw	s0,12(sp)
80000a1c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:93
    return(0);
80000a20:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:94
}
80000a24:	00078513          	mv	a0,a5
80000a28:	00c12403          	lw	s0,12(sp)
80000a2c:	01010113          	addi	sp,sp,16
80000a30:	00008067          	ret

80000a34 <External_12_IRQHandler>:
External_12_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:97

__attribute__((weak))  uint8_t External_12_IRQHandler(void)
{
80000a34:	ff010113          	addi	sp,sp,-16
80000a38:	00812623          	sw	s0,12(sp)
80000a3c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:98
    return(0);
80000a40:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:99
}
80000a44:	00078513          	mv	a0,a5
80000a48:	00c12403          	lw	s0,12(sp)
80000a4c:	01010113          	addi	sp,sp,16
80000a50:	00008067          	ret

80000a54 <External_13_IRQHandler>:
External_13_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:102

__attribute__((weak))  uint8_t External_13_IRQHandler(void)
{
80000a54:	ff010113          	addi	sp,sp,-16
80000a58:	00812623          	sw	s0,12(sp)
80000a5c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:103
    return(0);
80000a60:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:104
}
80000a64:	00078513          	mv	a0,a5
80000a68:	00c12403          	lw	s0,12(sp)
80000a6c:	01010113          	addi	sp,sp,16
80000a70:	00008067          	ret

80000a74 <External_14_IRQHandler>:
External_14_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:107

__attribute__((weak))  uint8_t External_14_IRQHandler(void)
{
80000a74:	ff010113          	addi	sp,sp,-16
80000a78:	00812623          	sw	s0,12(sp)
80000a7c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:108
    return(0);
80000a80:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:109
}
80000a84:	00078513          	mv	a0,a5
80000a88:	00c12403          	lw	s0,12(sp)
80000a8c:	01010113          	addi	sp,sp,16
80000a90:	00008067          	ret

80000a94 <External_15_IRQHandler>:
External_15_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:112

__attribute__((weak))  uint8_t External_15_IRQHandler(void)
{
80000a94:	ff010113          	addi	sp,sp,-16
80000a98:	00812623          	sw	s0,12(sp)
80000a9c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:113
    return(0);
80000aa0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:114
}
80000aa4:	00078513          	mv	a0,a5
80000aa8:	00c12403          	lw	s0,12(sp)
80000aac:	01010113          	addi	sp,sp,16
80000ab0:	00008067          	ret

80000ab4 <External_16_IRQHandler>:
External_16_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:117

__attribute__((weak))  uint8_t External_16_IRQHandler(void)
{
80000ab4:	ff010113          	addi	sp,sp,-16
80000ab8:	00812623          	sw	s0,12(sp)
80000abc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:118
    return(0);
80000ac0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:119
}
80000ac4:	00078513          	mv	a0,a5
80000ac8:	00c12403          	lw	s0,12(sp)
80000acc:	01010113          	addi	sp,sp,16
80000ad0:	00008067          	ret

80000ad4 <External_17_IRQHandler>:
External_17_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:122

__attribute__((weak))  uint8_t External_17_IRQHandler(void)
{
80000ad4:	ff010113          	addi	sp,sp,-16
80000ad8:	00812623          	sw	s0,12(sp)
80000adc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:123
    return(0);
80000ae0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:124
}
80000ae4:	00078513          	mv	a0,a5
80000ae8:	00c12403          	lw	s0,12(sp)
80000aec:	01010113          	addi	sp,sp,16
80000af0:	00008067          	ret

80000af4 <External_18_IRQHandler>:
External_18_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:127

__attribute__((weak))  uint8_t External_18_IRQHandler(void)
{
80000af4:	ff010113          	addi	sp,sp,-16
80000af8:	00812623          	sw	s0,12(sp)
80000afc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:128
    return(0);
80000b00:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:129
}
80000b04:	00078513          	mv	a0,a5
80000b08:	00c12403          	lw	s0,12(sp)
80000b0c:	01010113          	addi	sp,sp,16
80000b10:	00008067          	ret

80000b14 <External_19_IRQHandler>:
External_19_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:132

__attribute__((weak))  uint8_t External_19_IRQHandler(void)
{
80000b14:	ff010113          	addi	sp,sp,-16
80000b18:	00812623          	sw	s0,12(sp)
80000b1c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:133
    return(0);
80000b20:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:134
}
80000b24:	00078513          	mv	a0,a5
80000b28:	00c12403          	lw	s0,12(sp)
80000b2c:	01010113          	addi	sp,sp,16
80000b30:	00008067          	ret

80000b34 <External_20_IRQHandler>:
External_20_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:137

__attribute__((weak))  uint8_t External_20_IRQHandler(void)
{
80000b34:	ff010113          	addi	sp,sp,-16
80000b38:	00812623          	sw	s0,12(sp)
80000b3c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:138
    return(0);
80000b40:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:139
}
80000b44:	00078513          	mv	a0,a5
80000b48:	00c12403          	lw	s0,12(sp)
80000b4c:	01010113          	addi	sp,sp,16
80000b50:	00008067          	ret

80000b54 <External_21_IRQHandler>:
External_21_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:142

__attribute__((weak))  uint8_t External_21_IRQHandler(void)
{
80000b54:	ff010113          	addi	sp,sp,-16
80000b58:	00812623          	sw	s0,12(sp)
80000b5c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:143
    return(0);
80000b60:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:144
}
80000b64:	00078513          	mv	a0,a5
80000b68:	00c12403          	lw	s0,12(sp)
80000b6c:	01010113          	addi	sp,sp,16
80000b70:	00008067          	ret

80000b74 <External_22_IRQHandler>:
External_22_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:147

__attribute__((weak))  uint8_t External_22_IRQHandler(void)
{
80000b74:	ff010113          	addi	sp,sp,-16
80000b78:	00812623          	sw	s0,12(sp)
80000b7c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:148
    return(0);
80000b80:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:149
}
80000b84:	00078513          	mv	a0,a5
80000b88:	00c12403          	lw	s0,12(sp)
80000b8c:	01010113          	addi	sp,sp,16
80000b90:	00008067          	ret

80000b94 <External_23_IRQHandler>:
External_23_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:152

__attribute__((weak))  uint8_t External_23_IRQHandler(void)
{
80000b94:	ff010113          	addi	sp,sp,-16
80000b98:	00812623          	sw	s0,12(sp)
80000b9c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:153
    return(0);
80000ba0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:154
}
80000ba4:	00078513          	mv	a0,a5
80000ba8:	00c12403          	lw	s0,12(sp)
80000bac:	01010113          	addi	sp,sp,16
80000bb0:	00008067          	ret

80000bb4 <External_24_IRQHandler>:
External_24_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:157

__attribute__((weak))  uint8_t External_24_IRQHandler(void)
{
80000bb4:	ff010113          	addi	sp,sp,-16
80000bb8:	00812623          	sw	s0,12(sp)
80000bbc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:158
    return(0);
80000bc0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:159
}
80000bc4:	00078513          	mv	a0,a5
80000bc8:	00c12403          	lw	s0,12(sp)
80000bcc:	01010113          	addi	sp,sp,16
80000bd0:	00008067          	ret

80000bd4 <External_25_IRQHandler>:
External_25_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:162

__attribute__((weak))  uint8_t External_25_IRQHandler(void)
{
80000bd4:	ff010113          	addi	sp,sp,-16
80000bd8:	00812623          	sw	s0,12(sp)
80000bdc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:163
    return(0);
80000be0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:164
}
80000be4:	00078513          	mv	a0,a5
80000be8:	00c12403          	lw	s0,12(sp)
80000bec:	01010113          	addi	sp,sp,16
80000bf0:	00008067          	ret

80000bf4 <External_26_IRQHandler>:
External_26_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:167

__attribute__((weak))  uint8_t External_26_IRQHandler(void)
{
80000bf4:	ff010113          	addi	sp,sp,-16
80000bf8:	00812623          	sw	s0,12(sp)
80000bfc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:168
    return(0);
80000c00:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:169
}
80000c04:	00078513          	mv	a0,a5
80000c08:	00c12403          	lw	s0,12(sp)
80000c0c:	01010113          	addi	sp,sp,16
80000c10:	00008067          	ret

80000c14 <External_27_IRQHandler>:
External_27_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:172

__attribute__((weak))  uint8_t External_27_IRQHandler(void)
{
80000c14:	ff010113          	addi	sp,sp,-16
80000c18:	00812623          	sw	s0,12(sp)
80000c1c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:173
    return(0);
80000c20:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:174
}
80000c24:	00078513          	mv	a0,a5
80000c28:	00c12403          	lw	s0,12(sp)
80000c2c:	01010113          	addi	sp,sp,16
80000c30:	00008067          	ret

80000c34 <External_28_IRQHandler>:
External_28_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:177

__attribute__((weak))  uint8_t External_28_IRQHandler(void)
{
80000c34:	ff010113          	addi	sp,sp,-16
80000c38:	00812623          	sw	s0,12(sp)
80000c3c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:178
    return(0);
80000c40:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:179
}
80000c44:	00078513          	mv	a0,a5
80000c48:	00c12403          	lw	s0,12(sp)
80000c4c:	01010113          	addi	sp,sp,16
80000c50:	00008067          	ret

80000c54 <External_29_IRQHandler>:
External_29_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:182

__attribute__((weak))  uint8_t External_29_IRQHandler(void)
{
80000c54:	ff010113          	addi	sp,sp,-16
80000c58:	00812623          	sw	s0,12(sp)
80000c5c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:183
    return(0);
80000c60:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:184
}
80000c64:	00078513          	mv	a0,a5
80000c68:	00c12403          	lw	s0,12(sp)
80000c6c:	01010113          	addi	sp,sp,16
80000c70:	00008067          	ret

80000c74 <External_30_IRQHandler>:
External_30_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:187

__attribute__((weak))  uint8_t External_30_IRQHandler(void)
{
80000c74:	ff010113          	addi	sp,sp,-16
80000c78:	00812623          	sw	s0,12(sp)
80000c7c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:188
    return(0);
80000c80:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:189
}
80000c84:	00078513          	mv	a0,a5
80000c88:	00c12403          	lw	s0,12(sp)
80000c8c:	01010113          	addi	sp,sp,16
80000c90:	00008067          	ret

80000c94 <External_31_IRQHandler>:
External_31_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:192

__attribute__((weak))  uint8_t External_31_IRQHandler(void)
{
80000c94:	ff010113          	addi	sp,sp,-16
80000c98:	00812623          	sw	s0,12(sp)
80000c9c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:193
    return(0);
80000ca0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:194
}
80000ca4:	00078513          	mv	a0,a5
80000ca8:	00c12403          	lw	s0,12(sp)
80000cac:	01010113          	addi	sp,sp,16
80000cb0:	00008067          	ret

80000cb4 <write_hex>:
write_hex():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:55

char *__env[1] = { 0 };
char **environ = __env;

void write_hex(int fd, uint32_t hex)
{
80000cb4:	fd010113          	addi	sp,sp,-48
80000cb8:	02112623          	sw	ra,44(sp)
80000cbc:	02812423          	sw	s0,40(sp)
80000cc0:	03010413          	addi	s0,sp,48
80000cc4:	fca42e23          	sw	a0,-36(s0)
80000cc8:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:61
    uint8_t ii;
    uint8_t jj;
    char towrite;
    uint8_t digit;

    write( fd , "0x", 2 );
80000ccc:	00200613          	li	a2,2
80000cd0:	800097b7          	lui	a5,0x80009
80000cd4:	aa078593          	addi	a1,a5,-1376 # 80008aa0 <__stack_top+0xfffa8a00>
80000cd8:	fdc42503          	lw	a0,-36(s0)
80000cdc:	3c9070ef          	jal	ra,800088a4 <write>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:63

    for (ii = 8 ; ii > 0; ii--)
80000ce0:	00800793          	li	a5,8
80000ce4:	fef407a3          	sb	a5,-17(s0)
80000ce8:	0980006f          	j	80000d80 <write_hex+0xcc>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:65
    {
        jj = ii-1;
80000cec:	fef44783          	lbu	a5,-17(s0)
80000cf0:	fff78793          	addi	a5,a5,-1
80000cf4:	fef40723          	sb	a5,-18(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:66
        digit = ((hex & (0xF << (jj*4))) >> (jj*4));
80000cf8:	fee44783          	lbu	a5,-18(s0)
80000cfc:	00279793          	slli	a5,a5,0x2
80000d00:	00f00713          	li	a4,15
80000d04:	00f717b3          	sll	a5,a4,a5
80000d08:	00078713          	mv	a4,a5
80000d0c:	fd842783          	lw	a5,-40(s0)
80000d10:	00f77733          	and	a4,a4,a5
80000d14:	fee44783          	lbu	a5,-18(s0)
80000d18:	00279793          	slli	a5,a5,0x2
80000d1c:	00f757b3          	srl	a5,a4,a5
80000d20:	fef406a3          	sb	a5,-19(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:67
        towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
80000d24:	fed44703          	lbu	a4,-19(s0)
80000d28:	00900793          	li	a5,9
80000d2c:	00e7ee63          	bltu	a5,a4,80000d48 <write_hex+0x94>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 1)
80000d30:	fed44783          	lbu	a5,-19(s0)
80000d34:	03078793          	addi	a5,a5,48
80000d38:	0ff7f793          	andi	a5,a5,255
80000d3c:	01879793          	slli	a5,a5,0x18
80000d40:	4187d793          	srai	a5,a5,0x18
80000d44:	0180006f          	j	80000d5c <write_hex+0xa8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 2)
80000d48:	fed44783          	lbu	a5,-19(s0)
80000d4c:	03778793          	addi	a5,a5,55
80000d50:	0ff7f793          	andi	a5,a5,255
80000d54:	01879793          	slli	a5,a5,0x18
80000d58:	4187d793          	srai	a5,a5,0x18
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 4)
80000d5c:	fef40623          	sb	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:68 (discriminator 4)
        write( fd, &towrite, 1);
80000d60:	fec40793          	addi	a5,s0,-20
80000d64:	00100613          	li	a2,1
80000d68:	00078593          	mv	a1,a5
80000d6c:	fdc42503          	lw	a0,-36(s0)
80000d70:	335070ef          	jal	ra,800088a4 <write>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 4)
    for (ii = 8 ; ii > 0; ii--)
80000d74:	fef44783          	lbu	a5,-17(s0)
80000d78:	fff78793          	addi	a5,a5,-1
80000d7c:	fef407a3          	sb	a5,-17(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 2)
80000d80:	fef44783          	lbu	a5,-17(s0)
80000d84:	f60794e3          	bnez	a5,80000cec <write_hex+0x38>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:70
    }
}
80000d88:	00000013          	nop
80000d8c:	02c12083          	lw	ra,44(sp)
80000d90:	02812403          	lw	s0,40(sp)
80000d94:	03010113          	addi	sp,sp,48
80000d98:	00008067          	ret

80000d9c <_exit>:
_exit():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:74

               
void _exit(int code)
{
80000d9c:	fd010113          	addi	sp,sp,-48
80000da0:	02112623          	sw	ra,44(sp)
80000da4:	02812423          	sw	s0,40(sp)
80000da8:	03010413          	addi	s0,sp,48
80000dac:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:76
#ifdef MSCC_STDIO_THRU_CORE_UART_APB
    const char * message = "\nProgam has exited with code:";
80000db0:	800097b7          	lui	a5,0x80009
80000db4:	aa478793          	addi	a5,a5,-1372 # 80008aa4 <__stack_top+0xfffa8a04>
80000db8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:78

    write(STDERR_FILENO, message, strlen(message));
80000dbc:	fec42503          	lw	a0,-20(s0)
80000dc0:	11c010ef          	jal	ra,80001edc <strlen>
80000dc4:	00050793          	mv	a5,a0
80000dc8:	00078613          	mv	a2,a5
80000dcc:	fec42583          	lw	a1,-20(s0)
80000dd0:	00200513          	li	a0,2
80000dd4:	2d1070ef          	jal	ra,800088a4 <write>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:79
    write_hex(STDERR_FILENO, code);
80000dd8:	fdc42783          	lw	a5,-36(s0)
80000ddc:	00078593          	mv	a1,a5
80000de0:	00200513          	li	a0,2
80000de4:	ed1ff0ef          	jal	ra,80000cb4 <write_hex>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:82 (discriminator 1)
#endif

    while (1);
80000de8:	0000006f          	j	80000de8 <_exit+0x4c>

80000dec <_isatty>:
_isatty():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:101
    curbrk += incr;
    return curbrk - incr;
}

int _isatty(int fd)
{
80000dec:	fe010113          	addi	sp,sp,-32
80000df0:	00812e23          	sw	s0,28(sp)
80000df4:	02010413          	addi	s0,sp,32
80000df8:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:102
    if (fd == STDOUT_FILENO || fd == STDERR_FILENO)
80000dfc:	fec42703          	lw	a4,-20(s0)
80000e00:	00100793          	li	a5,1
80000e04:	00f70863          	beq	a4,a5,80000e14 <_isatty+0x28>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:102 (discriminator 1)
80000e08:	fec42703          	lw	a4,-20(s0)
80000e0c:	00200793          	li	a5,2
80000e10:	00f71663          	bne	a4,a5,80000e1c <_isatty+0x30>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:104
    {
        return 1;
80000e14:	00100793          	li	a5,1
80000e18:	0140006f          	j	80000e2c <_isatty+0x40>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:107
    }

    errno = EBADF;
80000e1c:	8003c7b7          	lui	a5,0x8003c
80000e20:	00900713          	li	a4,9
80000e24:	dee7a623          	sw	a4,-532(a5) # 8003bdec <__stack_top+0xfffdbd4c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:108
    return 0;
80000e28:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:109
}
80000e2c:	00078513          	mv	a0,a5
80000e30:	01c12403          	lw	s0,28(sp)
80000e34:	02010113          	addi	sp,sp,32
80000e38:	00008067          	ret

80000e3c <stub>:
stub():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:112

static int stub(int err)
{
80000e3c:	fe010113          	addi	sp,sp,-32
80000e40:	00812e23          	sw	s0,28(sp)
80000e44:	02010413          	addi	s0,sp,32
80000e48:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:113
    errno = err;
80000e4c:	8003c7b7          	lui	a5,0x8003c
80000e50:	fec42703          	lw	a4,-20(s0)
80000e54:	dee7a623          	sw	a4,-532(a5) # 8003bdec <__stack_top+0xfffdbd4c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:114
    return -1;
80000e58:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:115
}
80000e5c:	00078513          	mv	a0,a5
80000e60:	01c12403          	lw	s0,28(sp)
80000e64:	02010113          	addi	sp,sp,32
80000e68:	00008067          	ret

80000e6c <_write>:
_write():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:226
{
    return stub(ECHILD);
}

ssize_t _write(int fd, const void* ptr, size_t len)
{
80000e6c:	fd010113          	addi	sp,sp,-48
80000e70:	02112623          	sw	ra,44(sp)
80000e74:	02812423          	sw	s0,40(sp)
80000e78:	03010413          	addi	s0,sp,48
80000e7c:	fca42e23          	sw	a0,-36(s0)
80000e80:	fcb42c23          	sw	a1,-40(s0)
80000e84:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:229

#ifdef MSCC_STDIO_THRU_CORE_UART_APB
  const uint8_t * current = (const uint8_t *) ptr;
80000e88:	fd842783          	lw	a5,-40(s0)
80000e8c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:232
  size_t jj;

  if (_isatty(fd))
80000e90:	fdc42503          	lw	a0,-36(s0)
80000e94:	f59ff0ef          	jal	ra,80000dec <_isatty>
80000e98:	00050793          	mv	a5,a0
80000e9c:	08078c63          	beqz	a5,80000f34 <_write+0xc8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:238
  {
        /*--------------------------------------------------------------------------
        * Initialize the UART driver if it is the first time this function is
        * called.
        */
        if ( !g_stdio_uart_init_done )
80000ea0:	9101a783          	lw	a5,-1776(gp) # 800096a0 <g_stdio_uart_init_done>
80000ea4:	02079063          	bnez	a5,80000ec4 <_write+0x58>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:245
            /******************************************************************************
            * Baud value:
            * This value is calculated using the following equation:
            *      BAUD_VALUE = (CLOCK / (16 * BAUD_RATE)) - 1
            *****************************************************************************/
            UART_init( &g_stdio_uart, MSCC_STDIO_UART_BASE_ADDR, ((SYS_CLK_FREQ/(16 * MSCC_STDIO_BAUD_VALUE))-1), (DATA_8_BITS | NO_PARITY));
80000ea8:	00100693          	li	a3,1
80000eac:	02c00613          	li	a2,44
80000eb0:	700015b7          	lui	a1,0x70001
80000eb4:	90818513          	addi	a0,gp,-1784 # 80009698 <g_stdio_uart>
80000eb8:	174000ef          	jal	ra,8000102c <UART_init>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:246
            g_stdio_uart_init_done = 1;
80000ebc:	00100713          	li	a4,1
80000ec0:	90e1a823          	sw	a4,-1776(gp) # 800096a0 <g_stdio_uart_init_done>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:249
        }

    for (jj = 0; jj < len; jj++)
80000ec4:	fe042623          	sw	zero,-20(s0)
80000ec8:	0580006f          	j	80000f20 <_write+0xb4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:251
    {
        UART_send(&g_stdio_uart, current + jj, 1);
80000ecc:	fe842703          	lw	a4,-24(s0)
80000ed0:	fec42783          	lw	a5,-20(s0)
80000ed4:	00f707b3          	add	a5,a4,a5
80000ed8:	00100613          	li	a2,1
80000edc:	00078593          	mv	a1,a5
80000ee0:	90818513          	addi	a0,gp,-1784 # 80009698 <g_stdio_uart>
80000ee4:	260000ef          	jal	ra,80001144 <UART_send>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:252
        if (current[jj] == '\n')
80000ee8:	fe842703          	lw	a4,-24(s0)
80000eec:	fec42783          	lw	a5,-20(s0)
80000ef0:	00f707b3          	add	a5,a4,a5
80000ef4:	0007c703          	lbu	a4,0(a5)
80000ef8:	00a00793          	li	a5,10
80000efc:	00f71c63          	bne	a4,a5,80000f14 <_write+0xa8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:254
        {
            UART_send(&g_stdio_uart, (const uint8_t *)"\r", 1);
80000f00:	00100613          	li	a2,1
80000f04:	800097b7          	lui	a5,0x80009
80000f08:	ac478593          	addi	a1,a5,-1340 # 80008ac4 <__stack_top+0xfffa8a24>
80000f0c:	90818513          	addi	a0,gp,-1784 # 80009698 <g_stdio_uart>
80000f10:	234000ef          	jal	ra,80001144 <UART_send>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 2)
    for (jj = 0; jj < len; jj++)
80000f14:	fec42783          	lw	a5,-20(s0)
80000f18:	00178793          	addi	a5,a5,1
80000f1c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 1)
80000f20:	fec42703          	lw	a4,-20(s0)
80000f24:	fd442783          	lw	a5,-44(s0)
80000f28:	faf762e3          	bltu	a4,a5,80000ecc <_write+0x60>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:257
        }
    }
    return len;
80000f2c:	fd442783          	lw	a5,-44(s0)
80000f30:	0100006f          	j	80000f40 <_write+0xd4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:261
  }
#endif

  return stub(EBADF);
80000f34:	00900513          	li	a0,9
80000f38:	f05ff0ef          	jal	ra,80000e3c <stub>
80000f3c:	00050793          	mv	a5,a0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/syscall.c:262
}
80000f40:	00078513          	mv	a0,a5
80000f44:	02c12083          	lw	ra,44(sp)
80000f48:	02812403          	lw	s0,40(sp)
80000f4c:	03010113          	addi	sp,sp,48
80000f50:	00008067          	ret

80000f54 <HW_set_32bit_reg>:
HW_set_32bit_reg():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:36
 *
 * a0:   addr_t reg_addr
 * a1:   uint32_t value
 */
HW_set_32bit_reg:
    sw a1, 0(a0)
80000f54:	00b52023          	sw	a1,0(a0) # 44000000 <RAM_SIZE+0x43f80000>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:37
    ret
80000f58:	00008067          	ret

80000f5c <HW_get_32bit_reg>:
HW_get_32bit_reg():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:47
 *
 * R0:   addr_t reg_addr
 * @return          32 bits value read from the peripheral register.
 */
HW_get_32bit_reg:
    lw a0, 0(a0)
80000f5c:	00052503          	lw	a0,0(a0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:48
    ret
80000f60:	00008067          	ret

80000f64 <HW_set_32bit_reg_field>:
HW_set_32bit_reg_field():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:60
 * a1:   int_fast8_t shift
 * a2:   uint32_t mask
 * a3:   uint32_t value
 */
HW_set_32bit_reg_field:
    mv t3, a3
80000f64:	00068e13          	mv	t3,a3
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:61
    sll t3, t3, a1
80000f68:	00be1e33          	sll	t3,t3,a1
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:62
    and  t3, t3, a2
80000f6c:	00ce7e33          	and	t3,t3,a2
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:63
    lw t1, 0(a0)
80000f70:	00052303          	lw	t1,0(a0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:64
    mv t2, a2
80000f74:	00060393          	mv	t2,a2
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:65
    not t2, t2
80000f78:	fff3c393          	not	t2,t2
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:66
    and t1, t1, t2
80000f7c:	00737333          	and	t1,t1,t2
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:67
    or t1, t1, t3
80000f80:	01c36333          	or	t1,t1,t3
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:68
    sw t1, 0(a0)
80000f84:	00652023          	sw	t1,0(a0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:69
    ret
80000f88:	00008067          	ret

80000f8c <HW_get_32bit_reg_field>:
HW_get_32bit_reg_field():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:83
 *
 * @return          32 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_32bit_reg_field:
    lw a0, 0(a0)
80000f8c:	00052503          	lw	a0,0(a0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:84
    and a0, a0, a2
80000f90:	00c57533          	and	a0,a0,a2
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:85
    srl a0, a0, a1
80000f94:	00b55533          	srl	a0,a0,a1
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:86
    ret
80000f98:	00008067          	ret

80000f9c <HW_set_16bit_reg>:
HW_set_16bit_reg():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:96
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast16_t value
 */
HW_set_16bit_reg:
    sh a1, 0(a0)
80000f9c:	00b51023          	sh	a1,0(a0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:97
    ret
80000fa0:	00008067          	ret

80000fa4 <HW_get_16bit_reg>:
HW_get_16bit_reg():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:107
 *
 * a0:   addr_t reg_addr
 * @return          16 bits value read from the peripheral register.
 */
HW_get_16bit_reg:
    lh a0, (a0)
80000fa4:	00051503          	lh	a0,0(a0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:108
    ret
80000fa8:	00008067          	ret

80000fac <HW_set_16bit_reg_field>:
HW_set_16bit_reg_field():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:121
 * a2:   uint_fast16_t mask
 * a3:   uint_fast16_t value
 * @param value     Value to be written in the specified field.
 */
HW_set_16bit_reg_field:
    mv t3, a3
80000fac:	00068e13          	mv	t3,a3
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:122
    sll t3, t3, a1
80000fb0:	00be1e33          	sll	t3,t3,a1
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:123
    and  t3, t3, a2
80000fb4:	00ce7e33          	and	t3,t3,a2
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:124
    lh t1, 0(a0)
80000fb8:	00051303          	lh	t1,0(a0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:125
    mv t2, a2
80000fbc:	00060393          	mv	t2,a2
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:126
    not t2, t2
80000fc0:	fff3c393          	not	t2,t2
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:127
    and t1, t1, t2
80000fc4:	00737333          	and	t1,t1,t2
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:128
    or t1, t1, t3
80000fc8:	01c36333          	or	t1,t1,t3
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:129
    sh t1, 0(a0)
80000fcc:	00651023          	sh	t1,0(a0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:130
    ret
80000fd0:	00008067          	ret

80000fd4 <HW_get_16bit_reg_field>:
HW_get_16bit_reg_field():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:144
 *
 * @return          16 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_16bit_reg_field:
    lh a0, 0(a0)
80000fd4:	00051503          	lh	a0,0(a0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:145
    and a0, a0, a2
80000fd8:	00c57533          	and	a0,a0,a2
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:146
    srl a0, a0, a1
80000fdc:	00b55533          	srl	a0,a0,a1
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:147
    ret
80000fe0:	00008067          	ret

80000fe4 <HW_set_8bit_reg>:
HW_set_8bit_reg():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:157
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast8_t value
 */
HW_set_8bit_reg:
    sb a1, 0(a0)
80000fe4:	00b50023          	sb	a1,0(a0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:158
    ret
80000fe8:	00008067          	ret

80000fec <HW_get_8bit_reg>:
HW_get_8bit_reg():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:168
 *
 * a0:   addr_t reg_addr
 * @return          8 bits value read from the peripheral register.
 */
HW_get_8bit_reg:
    lb a0, 0(a0)
80000fec:	00050503          	lb	a0,0(a0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:169
    ret
80000ff0:	00008067          	ret

80000ff4 <HW_set_8bit_reg_field>:
HW_set_8bit_reg_field():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:181
 * a1:   int_fast8_t shift
 * a2:   uint_fast8_t mask
 * a3:   uint_fast8_t value
 */
HW_set_8bit_reg_field:
    mv t3, a3
80000ff4:	00068e13          	mv	t3,a3
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:182
    sll t3, t3, a1
80000ff8:	00be1e33          	sll	t3,t3,a1
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:183
    and  t3, t3, a2
80000ffc:	00ce7e33          	and	t3,t3,a2
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:184
    lb t1, 0(a0)
80001000:	00050303          	lb	t1,0(a0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:185
    mv t2, a2
80001004:	00060393          	mv	t2,a2
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:186
    not t2, t2
80001008:	fff3c393          	not	t2,t2
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:187
    and t1, t1, t2
8000100c:	00737333          	and	t1,t1,t2
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:188
    or t1, t1, t3
80001010:	01c36333          	or	t1,t1,t3
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:189
    sb t1, 0(a0)
80001014:	00650023          	sb	t1,0(a0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:190
    ret
80001018:	00008067          	ret

8000101c <HW_get_8bit_reg_field>:
HW_get_8bit_reg_field():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:204
 *
 * @return          8 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_8bit_reg_field:
    lb a0, 0(a0)
8000101c:	00050503          	lb	a0,0(a0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:205
    and a0, a0, a2
80001020:	00c57533          	and	a0,a0,a2
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:206
    srl a0, a0, a1
80001024:	00b55533          	srl	a0,a0,a1
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../hal/hw_reg_access.S:207
    ret
80001028:	00008067          	ret

8000102c <UART_init>:
UART_init():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:46
    UART_instance_t * this_uart,
    addr_t base_addr,
    uint16_t baud_value,
    uint8_t line_config
)
{
8000102c:	fd010113          	addi	sp,sp,-48
80001030:	02112623          	sw	ra,44(sp)
80001034:	02812423          	sw	s0,40(sp)
80001038:	03010413          	addi	s0,sp,48
8000103c:	fca42e23          	sw	a0,-36(s0)
80001040:	fcb42c23          	sw	a1,-40(s0)
80001044:	00060793          	mv	a5,a2
80001048:	00068713          	mv	a4,a3
8000104c:	fcf41b23          	sh	a5,-42(s0)
80001050:	00070793          	mv	a5,a4
80001054:	fcf40aa3          	sb	a5,-43(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53
    
    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( line_config <= MAX_LINE_CONFIG )
    HAL_ASSERT( baud_value <= MAX_BAUD_VALUE )

    if( ( this_uart != NULL_INSTANCE ) &&
80001058:	fdc42783          	lw	a5,-36(s0)
8000105c:	0c078a63          	beqz	a5,80001130 <UART_init+0x104>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53 (discriminator 1)
80001060:	fd544703          	lbu	a4,-43(s0)
80001064:	00700793          	li	a5,7
80001068:	0ce7e463          	bltu	a5,a4,80001130 <UART_init+0x104>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:54
        ( line_config <= MAX_LINE_CONFIG ) &&
8000106c:	fd645703          	lhu	a4,-42(s0)
80001070:	000027b7          	lui	a5,0x2
80001074:	0af77e63          	bleu	a5,a4,80001130 <UART_init+0x104>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:60
        ( baud_value <= MAX_BAUD_VALUE ) )
    {
        /*
         * Store lower 8-bits of baud value in CTRL1.
         */
        HAL_set_8bit_reg( base_addr, CTRL1, (uint_fast8_t)(baud_value &
80001078:	fd842783          	lw	a5,-40(s0)
8000107c:	00878713          	addi	a4,a5,8 # 2008 <HEAP_SIZE-0xdff8>
80001080:	fd645783          	lhu	a5,-42(s0)
80001084:	0ff7f793          	andi	a5,a5,255
80001088:	00078593          	mv	a1,a5
8000108c:	00070513          	mv	a0,a4
80001090:	f55ff0ef          	jal	ra,80000fe4 <HW_set_8bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:67
    
        /*
         * Extract higher 5-bits of baud value and store in higher 5-bits 
         * of CTRL2, along with line configuration in lower 3 three bits.
         */
        HAL_set_8bit_reg( base_addr, CTRL2, (uint_fast8_t)line_config | 
80001094:	fd842783          	lw	a5,-40(s0)
80001098:	00c78693          	addi	a3,a5,12
8000109c:	fd544703          	lbu	a4,-43(s0)
800010a0:	fd645783          	lhu	a5,-42(s0)
800010a4:	4057d793          	srai	a5,a5,0x5
800010a8:	7f87f793          	andi	a5,a5,2040
800010ac:	00f767b3          	or	a5,a4,a5
800010b0:	00078593          	mv	a1,a5
800010b4:	00068513          	mv	a0,a3
800010b8:	f2dff0ef          	jal	ra,80000fe4 <HW_set_8bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:71
                                           (uint_fast8_t)((baud_value &
                                   BAUDVALUE_MSB) >> BAUDVALUE_SHIFT ) );
    
        this_uart->base_address = base_addr;
800010bc:	fdc42783          	lw	a5,-36(s0)
800010c0:	fd842703          	lw	a4,-40(s0)
800010c4:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:94
        
        /*
         * Flush the receive FIFO of data that may have been received before the
         * driver was initialized.
         */
        rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
800010c8:	fdc42783          	lw	a5,-36(s0)
800010cc:	0007a783          	lw	a5,0(a5)
800010d0:	01078793          	addi	a5,a5,16
800010d4:	00078513          	mv	a0,a5
800010d8:	f15ff0ef          	jal	ra,80000fec <HW_get_8bit_reg>
800010dc:	00050793          	mv	a5,a0
800010e0:	0027f793          	andi	a5,a5,2
800010e4:	fef407a3          	sb	a5,-17(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
                                                    STATUS_RXFULL_MASK;
        while ( rx_full )
800010e8:	0380006f          	j	80001120 <UART_init+0xf4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:98
        {
            HAL_get_8bit_reg( this_uart->base_address, RXDATA );
800010ec:	fdc42783          	lw	a5,-36(s0)
800010f0:	0007a783          	lw	a5,0(a5)
800010f4:	00478793          	addi	a5,a5,4
800010f8:	00078513          	mv	a0,a5
800010fc:	ef1ff0ef          	jal	ra,80000fec <HW_get_8bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:99
            rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001100:	fdc42783          	lw	a5,-36(s0)
80001104:	0007a783          	lw	a5,0(a5)
80001108:	01078793          	addi	a5,a5,16
8000110c:	00078513          	mv	a0,a5
80001110:	eddff0ef          	jal	ra,80000fec <HW_get_8bit_reg>
80001114:	00050793          	mv	a5,a0
80001118:	0027f793          	andi	a5,a5,2
8000111c:	fef407a3          	sb	a5,-17(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
        while ( rx_full )
80001120:	fef44783          	lbu	a5,-17(s0)
80001124:	fc0794e3          	bnez	a5,800010ec <UART_init+0xc0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:106
        }

        /*
         * Clear status of the UART instance.
         */
        this_uart->status = (uint8_t)0;
80001128:	fdc42783          	lw	a5,-36(s0)
8000112c:	00078223          	sb	zero,4(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:108
    }
}
80001130:	00000013          	nop
80001134:	02c12083          	lw	ra,44(sp)
80001138:	02812403          	lw	s0,40(sp)
8000113c:	03010113          	addi	sp,sp,48
80001140:	00008067          	ret

80001144 <UART_send>:
UART_send():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:121
(
    UART_instance_t * this_uart,
    const uint8_t * tx_buffer,
    size_t tx_size
)
{
80001144:	fd010113          	addi	sp,sp,-48
80001148:	02112623          	sw	ra,44(sp)
8000114c:	02812423          	sw	s0,40(sp)
80001150:	03010413          	addi	s0,sp,48
80001154:	fca42e23          	sw	a0,-36(s0)
80001158:	fcb42c23          	sw	a1,-40(s0)
8000115c:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( tx_buffer != NULL_BUFFER )
    HAL_ASSERT( tx_size > 0 )
      
    if( (this_uart != NULL_INSTANCE) &&
80001160:	fdc42783          	lw	a5,-36(s0)
80001164:	08078063          	beqz	a5,800011e4 <UART_send+0xa0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129 (discriminator 1)
80001168:	fd842783          	lw	a5,-40(s0)
8000116c:	06078c63          	beqz	a5,800011e4 <UART_send+0xa0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:130
        (tx_buffer != NULL_BUFFER)   &&
80001170:	fd442783          	lw	a5,-44(s0)
80001174:	06078863          	beqz	a5,800011e4 <UART_send+0xa0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133
        (tx_size > (size_t)0) )
    {
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
80001178:	fe042623          	sw	zero,-20(s0)
8000117c:	05c0006f          	j	800011d8 <UART_send+0x94>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:137 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001180:	fdc42783          	lw	a5,-36(s0)
80001184:	0007a783          	lw	a5,0(a5)
80001188:	01078793          	addi	a5,a5,16
8000118c:	00078513          	mv	a0,a5
80001190:	e5dff0ef          	jal	ra,80000fec <HW_get_8bit_reg>
80001194:	00050793          	mv	a5,a0
80001198:	0017f793          	andi	a5,a5,1
8000119c:	fef405a3          	sb	a5,-21(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:139 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
800011a0:	feb44783          	lbu	a5,-21(s0)
800011a4:	fc078ee3          	beqz	a5,80001180 <UART_send+0x3c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:141 (discriminator 2)
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
800011a8:	fdc42783          	lw	a5,-36(s0)
800011ac:	0007a683          	lw	a3,0(a5)
800011b0:	fd842703          	lw	a4,-40(s0)
800011b4:	fec42783          	lw	a5,-20(s0)
800011b8:	00f707b3          	add	a5,a4,a5
800011bc:	0007c783          	lbu	a5,0(a5)
800011c0:	00078593          	mv	a1,a5
800011c4:	00068513          	mv	a0,a3
800011c8:	e1dff0ef          	jal	ra,80000fe4 <HW_set_8bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 2)
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
800011cc:	fec42783          	lw	a5,-20(s0)
800011d0:	00178793          	addi	a5,a5,1
800011d4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 1)
800011d8:	fec42703          	lw	a4,-20(s0)
800011dc:	fd442783          	lw	a5,-44(s0)
800011e0:	faf760e3          	bltu	a4,a5,80001180 <UART_send+0x3c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:145
                              (uint_fast8_t)tx_buffer[char_idx] );
        }
    }
}
800011e4:	00000013          	nop
800011e8:	02c12083          	lw	ra,44(sp)
800011ec:	02812403          	lw	s0,40(sp)
800011f0:	03010113          	addi	sp,sp,48
800011f4:	00008067          	ret

800011f8 <UART_polled_tx_string>:
UART_polled_tx_string():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:239
UART_polled_tx_string
( 
    UART_instance_t * this_uart, 
    const uint8_t * p_sz_string
)
{
800011f8:	fd010113          	addi	sp,sp,-48
800011fc:	02112623          	sw	ra,44(sp)
80001200:	02812423          	sw	s0,40(sp)
80001204:	03010413          	addi	s0,sp,48
80001208:	fca42e23          	sw	a0,-36(s0)
8000120c:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246
    uint8_t tx_ready;

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( p_sz_string != NULL_BUFFER )
    
    if( ( this_uart != NULL_INSTANCE ) && ( p_sz_string != NULL_BUFFER ) )
80001210:	fdc42783          	lw	a5,-36(s0)
80001214:	08078063          	beqz	a5,80001294 <UART_polled_tx_string+0x9c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246 (discriminator 1)
80001218:	fd842783          	lw	a5,-40(s0)
8000121c:	06078c63          	beqz	a5,80001294 <UART_polled_tx_string+0x9c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:248
    {
        char_idx = 0U;
80001220:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
80001224:	05c0006f          	j	80001280 <UART_polled_tx_string+0x88>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:253 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80001228:	fdc42783          	lw	a5,-36(s0)
8000122c:	0007a783          	lw	a5,0(a5)
80001230:	01078793          	addi	a5,a5,16
80001234:	00078513          	mv	a0,a5
80001238:	db5ff0ef          	jal	ra,80000fec <HW_get_8bit_reg>
8000123c:	00050793          	mv	a5,a0
80001240:	0017f793          	andi	a5,a5,1
80001244:	fef405a3          	sb	a5,-21(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:255 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
80001248:	feb44783          	lbu	a5,-21(s0)
8000124c:	fc078ee3          	beqz	a5,80001228 <UART_polled_tx_string+0x30>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:257
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
80001250:	fdc42783          	lw	a5,-36(s0)
80001254:	0007a683          	lw	a3,0(a5)
80001258:	fd842703          	lw	a4,-40(s0)
8000125c:	fec42783          	lw	a5,-20(s0)
80001260:	00f707b3          	add	a5,a4,a5
80001264:	0007c783          	lbu	a5,0(a5)
80001268:	00078593          	mv	a1,a5
8000126c:	00068513          	mv	a0,a3
80001270:	d75ff0ef          	jal	ra,80000fe4 <HW_set_8bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:259
                              (uint_fast8_t)p_sz_string[char_idx] );
            char_idx++;
80001274:	fec42783          	lw	a5,-20(s0)
80001278:	00178793          	addi	a5,a5,1
8000127c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
80001280:	fd842703          	lw	a4,-40(s0)
80001284:	fec42783          	lw	a5,-20(s0)
80001288:	00f707b3          	add	a5,a4,a5
8000128c:	0007c783          	lbu	a5,0(a5)
80001290:	f8079ce3          	bnez	a5,80001228 <UART_polled_tx_string+0x30>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:262
        }
    }
}
80001294:	00000013          	nop
80001298:	02c12083          	lw	ra,44(sp)
8000129c:	02812403          	lw	s0,40(sp)
800012a0:	03010113          	addi	sp,sp,48
800012a4:	00008067          	ret

800012a8 <pvPortMalloc>:
pvPortMalloc():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:151
}
/*-----------------------------------------------------------*/


void *pvPortMalloc( size_t xWantedSize )
{
800012a8:	fc010113          	addi	sp,sp,-64
800012ac:	02112e23          	sw	ra,60(sp)
800012b0:	02812c23          	sw	s0,56(sp)
800012b4:	04010413          	addi	s0,sp,64
800012b8:	fca42623          	sw	a0,-52(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:154
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
800012bc:	fe042223          	sw	zero,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:156

	vTaskSuspendAll();
800012c0:	404010ef          	jal	ra,800026c4 <vTaskSuspendAll>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:160
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
800012c4:	9241a783          	lw	a5,-1756(gp) # 800096b4 <xHeapHasBeenInitialised.2777>
800012c8:	00079863          	bnez	a5,800012d8 <pvPortMalloc+0x30>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:162
		{
			prvHeapInit();
800012cc:	284000ef          	jal	ra,80001550 <prvHeapInit>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:163
			xHeapHasBeenInitialised = pdTRUE;
800012d0:	00100713          	li	a4,1
800012d4:	92e1a223          	sw	a4,-1756(gp) # 800096b4 <xHeapHasBeenInitialised.2777>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:168
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
800012d8:	fcc42783          	lw	a5,-52(s0)
800012dc:	02078a63          	beqz	a5,80001310 <pvPortMalloc+0x68>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:170
		{
			xWantedSize += heapSTRUCT_SIZE;
800012e0:	00800793          	li	a5,8
800012e4:	00078713          	mv	a4,a5
800012e8:	fcc42783          	lw	a5,-52(s0)
800012ec:	00e787b3          	add	a5,a5,a4
800012f0:	fcf42623          	sw	a5,-52(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:173

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
800012f4:	fcc42783          	lw	a5,-52(s0)
800012f8:	0037f793          	andi	a5,a5,3
800012fc:	00078a63          	beqz	a5,80001310 <pvPortMalloc+0x68>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:176
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
80001300:	fcc42783          	lw	a5,-52(s0)
80001304:	ffc7f793          	andi	a5,a5,-4
80001308:	00478793          	addi	a5,a5,4
8000130c:	fcf42623          	sw	a5,-52(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
80001310:	fcc42783          	lw	a5,-52(s0)
80001314:	14078463          	beqz	a5,8000145c <pvPortMalloc+0x1b4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180 (discriminator 1)
80001318:	fcc42703          	lw	a4,-52(s0)
8000131c:	000327b7          	lui	a5,0x32
80001320:	ffb78793          	addi	a5,a5,-5 # 31ffb <HEAP_SIZE+0x21ffb>
80001324:	12e7ec63          	bltu	a5,a4,8000145c <pvPortMalloc+0x1b4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:184
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
80001328:	91418793          	addi	a5,gp,-1772 # 800096a4 <xStart>
8000132c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:185
			pxBlock = xStart.pxNextFreeBlock;
80001330:	9141a783          	lw	a5,-1772(gp) # 800096a4 <xStart>
80001334:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
80001338:	0180006f          	j	80001350 <pvPortMalloc+0xa8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:188
			{
				pxPreviousBlock = pxBlock;
8000133c:	fec42783          	lw	a5,-20(s0)
80001340:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:189
				pxBlock = pxBlock->pxNextFreeBlock;
80001344:	fec42783          	lw	a5,-20(s0)
80001348:	0007a783          	lw	a5,0(a5)
8000134c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
80001350:	fec42783          	lw	a5,-20(s0)
80001354:	0047a783          	lw	a5,4(a5)
80001358:	fcc42703          	lw	a4,-52(s0)
8000135c:	00e7f863          	bleu	a4,a5,8000136c <pvPortMalloc+0xc4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186 (discriminator 1)
80001360:	fec42783          	lw	a5,-20(s0)
80001364:	0007a783          	lw	a5,0(a5)
80001368:	fc079ae3          	bnez	a5,8000133c <pvPortMalloc+0x94>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:193
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
8000136c:	fec42703          	lw	a4,-20(s0)
80001370:	91c18793          	addi	a5,gp,-1764 # 800096ac <xEnd>
80001374:	0ef70463          	beq	a4,a5,8000145c <pvPortMalloc+0x1b4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:197
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
80001378:	fe842783          	lw	a5,-24(s0)
8000137c:	0007a783          	lw	a5,0(a5)
80001380:	00800713          	li	a4,8
80001384:	00e787b3          	add	a5,a5,a4
80001388:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:201

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
8000138c:	fec42783          	lw	a5,-20(s0)
80001390:	0007a703          	lw	a4,0(a5)
80001394:	fe842783          	lw	a5,-24(s0)
80001398:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:204

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
8000139c:	fec42783          	lw	a5,-20(s0)
800013a0:	0047a703          	lw	a4,4(a5)
800013a4:	fcc42783          	lw	a5,-52(s0)
800013a8:	40f707b3          	sub	a5,a4,a5
800013ac:	00800713          	li	a4,8
800013b0:	00171713          	slli	a4,a4,0x1
800013b4:	08f77663          	bleu	a5,a4,80001440 <pvPortMalloc+0x198>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:209
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
800013b8:	fec42703          	lw	a4,-20(s0)
800013bc:	fcc42783          	lw	a5,-52(s0)
800013c0:	00f707b3          	add	a5,a4,a5
800013c4:	fcf42e23          	sw	a5,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:213

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
800013c8:	fec42783          	lw	a5,-20(s0)
800013cc:	0047a703          	lw	a4,4(a5)
800013d0:	fcc42783          	lw	a5,-52(s0)
800013d4:	40f70733          	sub	a4,a4,a5
800013d8:	fdc42783          	lw	a5,-36(s0)
800013dc:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:214
					pxBlock->xBlockSize = xWantedSize;
800013e0:	fec42783          	lw	a5,-20(s0)
800013e4:	fcc42703          	lw	a4,-52(s0)
800013e8:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
800013ec:	fdc42783          	lw	a5,-36(s0)
800013f0:	0047a783          	lw	a5,4(a5)
800013f4:	fcf42c23          	sw	a5,-40(s0)
800013f8:	91418793          	addi	a5,gp,-1772 # 800096a4 <xStart>
800013fc:	fef42023          	sw	a5,-32(s0)
80001400:	0100006f          	j	80001410 <pvPortMalloc+0x168>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 3)
80001404:	fe042783          	lw	a5,-32(s0)
80001408:	0007a783          	lw	a5,0(a5)
8000140c:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 1)
80001410:	fe042783          	lw	a5,-32(s0)
80001414:	0007a783          	lw	a5,0(a5)
80001418:	0047a783          	lw	a5,4(a5)
8000141c:	fd842703          	lw	a4,-40(s0)
80001420:	fee7e2e3          	bltu	a5,a4,80001404 <pvPortMalloc+0x15c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 4)
80001424:	fe042783          	lw	a5,-32(s0)
80001428:	0007a703          	lw	a4,0(a5)
8000142c:	fdc42783          	lw	a5,-36(s0)
80001430:	00e7a023          	sw	a4,0(a5)
80001434:	fe042783          	lw	a5,-32(s0)
80001438:	fdc42703          	lw	a4,-36(s0)
8000143c:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:220
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
80001440:	800097b7          	lui	a5,0x80009
80001444:	5907a703          	lw	a4,1424(a5) # 80009590 <__stack_top+0xfffa94f0>
80001448:	fec42783          	lw	a5,-20(s0)
8000144c:	0047a783          	lw	a5,4(a5)
80001450:	40f70733          	sub	a4,a4,a5
80001454:	800097b7          	lui	a5,0x80009
80001458:	58e7a823          	sw	a4,1424(a5) # 80009590 <__stack_top+0xfffa94f0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:226
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
8000145c:	290010ef          	jal	ra,800026ec <xTaskResumeAll>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:230

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
80001460:	fe442783          	lw	a5,-28(s0)
80001464:	00079463          	bnez	a5,8000146c <pvPortMalloc+0x1c4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:233
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
80001468:	265060ef          	jal	ra,80007ecc <vApplicationMallocFailedHook>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:238
		}
	}
	#endif

	return pvReturn;
8000146c:	fe442783          	lw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:239
}
80001470:	00078513          	mv	a0,a5
80001474:	03c12083          	lw	ra,60(sp)
80001478:	03812403          	lw	s0,56(sp)
8000147c:	04010113          	addi	sp,sp,64
80001480:	00008067          	ret

80001484 <vPortFree>:
vPortFree():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:243
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
80001484:	fd010113          	addi	sp,sp,-48
80001488:	02112623          	sw	ra,44(sp)
8000148c:	02812423          	sw	s0,40(sp)
80001490:	03010413          	addi	s0,sp,48
80001494:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:244
uint8_t *puc = ( uint8_t * ) pv;
80001498:	fdc42783          	lw	a5,-36(s0)
8000149c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:247
BlockLink_t *pxLink;

	if( pv != NULL )
800014a0:	fdc42783          	lw	a5,-36(s0)
800014a4:	08078c63          	beqz	a5,8000153c <vPortFree+0xb8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:251
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
800014a8:	00800793          	li	a5,8
800014ac:	40f007b3          	neg	a5,a5
800014b0:	fe842703          	lw	a4,-24(s0)
800014b4:	00f707b3          	add	a5,a4,a5
800014b8:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:255

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
800014bc:	fe842783          	lw	a5,-24(s0)
800014c0:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:257

		vTaskSuspendAll();
800014c4:	200010ef          	jal	ra,800026c4 <vTaskSuspendAll>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
800014c8:	fe442783          	lw	a5,-28(s0)
800014cc:	0047a783          	lw	a5,4(a5)
800014d0:	fef42023          	sw	a5,-32(s0)
800014d4:	91418793          	addi	a5,gp,-1772 # 800096a4 <xStart>
800014d8:	fef42623          	sw	a5,-20(s0)
800014dc:	0100006f          	j	800014ec <vPortFree+0x68>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 3)
800014e0:	fec42783          	lw	a5,-20(s0)
800014e4:	0007a783          	lw	a5,0(a5)
800014e8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 1)
800014ec:	fec42783          	lw	a5,-20(s0)
800014f0:	0007a783          	lw	a5,0(a5)
800014f4:	0047a783          	lw	a5,4(a5)
800014f8:	fe042703          	lw	a4,-32(s0)
800014fc:	fee7e2e3          	bltu	a5,a4,800014e0 <vPortFree+0x5c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 4)
80001500:	fec42783          	lw	a5,-20(s0)
80001504:	0007a703          	lw	a4,0(a5)
80001508:	fe442783          	lw	a5,-28(s0)
8000150c:	00e7a023          	sw	a4,0(a5)
80001510:	fec42783          	lw	a5,-20(s0)
80001514:	fe442703          	lw	a4,-28(s0)
80001518:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:261 (discriminator 4)
			xFreeBytesRemaining += pxLink->xBlockSize;
8000151c:	fe442783          	lw	a5,-28(s0)
80001520:	0047a703          	lw	a4,4(a5)
80001524:	800097b7          	lui	a5,0x80009
80001528:	5907a783          	lw	a5,1424(a5) # 80009590 <__stack_top+0xfffa94f0>
8000152c:	00f70733          	add	a4,a4,a5
80001530:	800097b7          	lui	a5,0x80009
80001534:	58e7a823          	sw	a4,1424(a5) # 80009590 <__stack_top+0xfffa94f0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:264 (discriminator 4)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
80001538:	1b4010ef          	jal	ra,800026ec <xTaskResumeAll>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:266
	}
}
8000153c:	00000013          	nop
80001540:	02c12083          	lw	ra,44(sp)
80001544:	02812403          	lw	s0,40(sp)
80001548:	03010113          	addi	sp,sp,48
8000154c:	00008067          	ret

80001550 <prvHeapInit>:
prvHeapInit():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:282
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
80001550:	fe010113          	addi	sp,sp,-32
80001554:	00812e23          	sw	s0,28(sp)
80001558:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:287
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
8000155c:	800097b7          	lui	a5,0x80009
80001560:	73478793          	addi	a5,a5,1844 # 80009734 <__stack_top+0xfffa9694>
80001564:	ffc7f793          	andi	a5,a5,-4
80001568:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:291

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
8000156c:	fec42703          	lw	a4,-20(s0)
80001570:	90e1aa23          	sw	a4,-1772(gp) # 800096a4 <xStart>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:292
	xStart.xBlockSize = ( size_t ) 0;
80001574:	91418793          	addi	a5,gp,-1772 # 800096a4 <xStart>
80001578:	0007a223          	sw	zero,4(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:295

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
8000157c:	91c18793          	addi	a5,gp,-1764 # 800096ac <xEnd>
80001580:	00032737          	lui	a4,0x32
80001584:	ffc70713          	addi	a4,a4,-4 # 31ffc <HEAP_SIZE+0x21ffc>
80001588:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:296
	xEnd.pxNextFreeBlock = NULL;
8000158c:	9001ae23          	sw	zero,-1764(gp) # 800096ac <xEnd>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:300

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
80001590:	fec42783          	lw	a5,-20(s0)
80001594:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:301
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
80001598:	fe842783          	lw	a5,-24(s0)
8000159c:	00032737          	lui	a4,0x32
800015a0:	ffc70713          	addi	a4,a4,-4 # 31ffc <HEAP_SIZE+0x21ffc>
800015a4:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:302
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
800015a8:	fe842783          	lw	a5,-24(s0)
800015ac:	91c18713          	addi	a4,gp,-1764 # 800096ac <xEnd>
800015b0:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:303
}
800015b4:	00000013          	nop
800015b8:	01c12403          	lw	s0,28(sp)
800015bc:	02010113          	addi	sp,sp,32
800015c0:	00008067          	ret

800015c4 <raise_soft_interrupt>:
raise_soft_interrupt():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:227
/*==============================================================================
 * The function raise_soft_interrupt() raises a synchronous software interrupt by
 * writing into the MSIP register.
 */
static inline void raise_soft_interrupt()
{
800015c4:	fe010113          	addi	sp,sp,-32
800015c8:	00812e23          	sw	s0,28(sp)
800015cc:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:228
    unsigned long hart_id = read_csr(mhartid);
800015d0:	f14027f3          	csrr	a5,mhartid
800015d4:	fef42623          	sw	a5,-20(s0)
800015d8:	fec42783          	lw	a5,-20(s0)
800015dc:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:231

    /*You need to make sure that the global interrupt is enabled*/
    set_csr(mie, MIP_MSIP);       /*Enable software interrupt bit */
800015e0:	304467f3          	csrrsi	a5,mie,8
800015e4:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:232
    PRCI->MSIP[hart_id] = 0x01;   /*raise soft interrupt for hart0*/
800015e8:	44000737          	lui	a4,0x44000
800015ec:	fe842783          	lw	a5,-24(s0)
800015f0:	00279793          	slli	a5,a5,0x2
800015f4:	00f707b3          	add	a5,a4,a5
800015f8:	00100713          	li	a4,1
800015fc:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:233
}
80001600:	00000013          	nop
80001604:	01c12403          	lw	s0,28(sp)
80001608:	02010113          	addi	sp,sp,32
8000160c:	00008067          	ret

80001610 <vPortEnterCritical>:
vPortEnterCritical():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:132
 * Used to catch tasks that attempt to return from their implementing function.
 */
static void prvTaskExitError( void );

void vPortEnterCritical( void )
{
80001610:	ff010113          	addi	sp,sp,-16
80001614:	00812623          	sw	s0,12(sp)
80001618:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:133
	portDISABLE_INTERRUPTS();
8000161c:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:134
	uxCriticalNesting++;
80001620:	800097b7          	lui	a5,0x80009
80001624:	5947a783          	lw	a5,1428(a5) # 80009594 <__stack_top+0xfffa94f4>
80001628:	00178713          	addi	a4,a5,1
8000162c:	800097b7          	lui	a5,0x80009
80001630:	58e7aa23          	sw	a4,1428(a5) # 80009594 <__stack_top+0xfffa94f4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:135
}
80001634:	00000013          	nop
80001638:	00c12403          	lw	s0,12(sp)
8000163c:	01010113          	addi	sp,sp,16
80001640:	00008067          	ret

80001644 <vPortExitCritical>:
vPortExitCritical():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:139
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
80001644:	ff010113          	addi	sp,sp,-16
80001648:	00812623          	sw	s0,12(sp)
8000164c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:140
	uxCriticalNesting--;
80001650:	800097b7          	lui	a5,0x80009
80001654:	5947a783          	lw	a5,1428(a5) # 80009594 <__stack_top+0xfffa94f4>
80001658:	fff78713          	addi	a4,a5,-1
8000165c:	800097b7          	lui	a5,0x80009
80001660:	58e7aa23          	sw	a4,1428(a5) # 80009594 <__stack_top+0xfffa94f4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:141
	if( uxCriticalNesting == 0 )
80001664:	800097b7          	lui	a5,0x80009
80001668:	5947a783          	lw	a5,1428(a5) # 80009594 <__stack_top+0xfffa94f4>
8000166c:	00079463          	bnez	a5,80001674 <vPortExitCritical+0x30>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:143
	{
		portENABLE_INTERRUPTS();
80001670:	30046073          	csrsi	mstatus,8
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:145
	}
}
80001674:	00000013          	nop
80001678:	00c12403          	lw	s0,12(sp)
8000167c:	01010113          	addi	sp,sp,16
80001680:	00008067          	ret

80001684 <prvSetNextTimerInterrupt>:
prvSetNextTimerInterrupt():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:151
/*-----------------------------------------------------------*/

/* Sets the next timer interrupt
 * Reads previous timer compare register, and adds tickrate */
static void prvSetNextTimerInterrupt(void)
{
80001684:	fe010113          	addi	sp,sp,-32
80001688:	00812e23          	sw	s0,28(sp)
8000168c:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:154
	uint64_t time;

	time = mtime->val_low;
80001690:	80009637          	lui	a2,0x80009
80001694:	59862603          	lw	a2,1432(a2) # 80009598 <__stack_top+0xfffa94f8>
80001698:	00062603          	lw	a2,0(a2)
8000169c:	fec42423          	sw	a2,-24(s0)
800016a0:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:155
	time |= ((uint64_t)mtime->val_high << 32);
800016a4:	80009637          	lui	a2,0x80009
800016a8:	59862603          	lw	a2,1432(a2) # 80009598 <__stack_top+0xfffa94f8>
800016ac:	00462603          	lw	a2,4(a2)
800016b0:	00060693          	mv	a3,a2
800016b4:	00000713          	li	a4,0
800016b8:	00069813          	slli	a6,a3,0x0
800016bc:	00000793          	li	a5,0
800016c0:	fe842703          	lw	a4,-24(s0)
800016c4:	00f76733          	or	a4,a4,a5
800016c8:	fee42423          	sw	a4,-24(s0)
800016cc:	fec42703          	lw	a4,-20(s0)
800016d0:	010767b3          	or	a5,a4,a6
800016d4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:157

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
800016d8:	fe842683          	lw	a3,-24(s0)
800016dc:	fec42703          	lw	a4,-20(s0)
800016e0:	000185b7          	lui	a1,0x18
800016e4:	6a058593          	addi	a1,a1,1696 # 186a0 <HEAP_SIZE+0x86a0>
800016e8:	00000613          	li	a2,0
800016ec:	00b687b3          	add	a5,a3,a1
800016f0:	00078513          	mv	a0,a5
800016f4:	00d53533          	sltu	a0,a0,a3
800016f8:	00c70833          	add	a6,a4,a2
800016fc:	01050733          	add	a4,a0,a6
80001700:	00070813          	mv	a6,a4
80001704:	fef42423          	sw	a5,-24(s0)
80001708:	ff042623          	sw	a6,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:159

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
8000170c:	800097b7          	lui	a5,0x80009
80001710:	59c7a783          	lw	a5,1436(a5) # 8000959c <__stack_top+0xfffa94fc>
80001714:	fe842703          	lw	a4,-24(s0)
80001718:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:160
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
8000171c:	fec42783          	lw	a5,-20(s0)
80001720:	0007d313          	srli	t1,a5,0x0
80001724:	00000393          	li	t2,0
80001728:	800097b7          	lui	a5,0x80009
8000172c:	59c7a783          	lw	a5,1436(a5) # 8000959c <__stack_top+0xfffa94fc>
80001730:	00030713          	mv	a4,t1
80001734:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:163

	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
80001738:	08000793          	li	a5,128
8000173c:	3047a073          	csrs	mie,a5
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:164
}
80001740:	00000013          	nop
80001744:	01c12403          	lw	s0,28(sp)
80001748:	02010113          	addi	sp,sp,32
8000174c:	00008067          	ret

80001750 <vPortSetupTimer>:
vPortSetupTimer():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:169
/*-----------------------------------------------------------*/

/* Sets and enable the timer interrupt */
void vPortSetupTimer(void)
{
80001750:	fe010113          	addi	sp,sp,-32
80001754:	00812e23          	sw	s0,28(sp)
80001758:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:172
	uint64_t time;

	time = mtime->val_low;
8000175c:	80009637          	lui	a2,0x80009
80001760:	59862603          	lw	a2,1432(a2) # 80009598 <__stack_top+0xfffa94f8>
80001764:	00062603          	lw	a2,0(a2)
80001768:	fec42423          	sw	a2,-24(s0)
8000176c:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:173
	time |= ((uint64_t)mtime->val_high << 32);
80001770:	80009637          	lui	a2,0x80009
80001774:	59862603          	lw	a2,1432(a2) # 80009598 <__stack_top+0xfffa94f8>
80001778:	00462603          	lw	a2,4(a2)
8000177c:	00060693          	mv	a3,a2
80001780:	00000713          	li	a4,0
80001784:	00069813          	slli	a6,a3,0x0
80001788:	00000793          	li	a5,0
8000178c:	fe842703          	lw	a4,-24(s0)
80001790:	00f76733          	or	a4,a4,a5
80001794:	fee42423          	sw	a4,-24(s0)
80001798:	fec42703          	lw	a4,-20(s0)
8000179c:	010767b3          	or	a5,a4,a6
800017a0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:175

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
800017a4:	fe842683          	lw	a3,-24(s0)
800017a8:	fec42703          	lw	a4,-20(s0)
800017ac:	000185b7          	lui	a1,0x18
800017b0:	6a058593          	addi	a1,a1,1696 # 186a0 <HEAP_SIZE+0x86a0>
800017b4:	00000613          	li	a2,0
800017b8:	00b687b3          	add	a5,a3,a1
800017bc:	00078513          	mv	a0,a5
800017c0:	00d53533          	sltu	a0,a0,a3
800017c4:	00c70833          	add	a6,a4,a2
800017c8:	01050733          	add	a4,a0,a6
800017cc:	00070813          	mv	a6,a4
800017d0:	fef42423          	sw	a5,-24(s0)
800017d4:	ff042623          	sw	a6,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:177

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
800017d8:	800097b7          	lui	a5,0x80009
800017dc:	59c7a783          	lw	a5,1436(a5) # 8000959c <__stack_top+0xfffa94fc>
800017e0:	fe842703          	lw	a4,-24(s0)
800017e4:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:178
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
800017e8:	fec42783          	lw	a5,-20(s0)
800017ec:	0007d313          	srli	t1,a5,0x0
800017f0:	00000393          	li	t2,0
800017f4:	800097b7          	lui	a5,0x80009
800017f8:	59c7a783          	lw	a5,1436(a5) # 8000959c <__stack_top+0xfffa94fc>
800017fc:	00030713          	mv	a4,t1
80001800:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:182


	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
80001804:	08000793          	li	a5,128
80001808:	3047a073          	csrs	mie,a5
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:183
}
8000180c:	00000013          	nop
80001810:	01c12403          	lw	s0,28(sp)
80001814:	02010113          	addi	sp,sp,32
80001818:	00008067          	ret

8000181c <prvTaskExitError>:
prvTaskExitError():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:187
/*-----------------------------------------------------------*/

void prvTaskExitError( void )
{
8000181c:	ff010113          	addi	sp,sp,-16
80001820:	00812623          	sw	s0,12(sp)
80001824:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
80001828:	800097b7          	lui	a5,0x80009
8000182c:	5947a703          	lw	a4,1428(a5) # 80009594 <__stack_top+0xfffa94f4>
80001830:	fff00793          	li	a5,-1
80001834:	00f70663          	beq	a4,a5,80001840 <prvTaskExitError+0x24>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194 (discriminator 1)
80001838:	30047073          	csrci	mstatus,8
8000183c:	0000006f          	j	8000183c <prvTaskExitError+0x20>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:195
	portDISABLE_INTERRUPTS();
80001840:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:196 (discriminator 2)
	for( ;; );
80001844:	0000006f          	j	80001844 <prvTaskExitError+0x28>

80001848 <vPortClearInterruptMask>:
vPortClearInterruptMask():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:202
}
/*-----------------------------------------------------------*/

/* Clear current interrupt mask and set given mask */
void vPortClearInterruptMask(int mask)
{
80001848:	fe010113          	addi	sp,sp,-32
8000184c:	00812e23          	sw	s0,28(sp)
80001850:	02010413          	addi	s0,sp,32
80001854:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:203
	__asm volatile("csrw mie, %0"::"r"(mask));
80001858:	fec42783          	lw	a5,-20(s0)
8000185c:	30479073          	csrw	mie,a5
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:204
}
80001860:	00000013          	nop
80001864:	01c12403          	lw	s0,28(sp)
80001868:	02010113          	addi	sp,sp,32
8000186c:	00008067          	ret

80001870 <vPortSetInterruptMask>:
vPortSetInterruptMask():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:209
/*-----------------------------------------------------------*/

/* Set interrupt mask and return current interrupt enable register */
int vPortSetInterruptMask(void)
{
80001870:	fe010113          	addi	sp,sp,-32
80001874:	00812e23          	sw	s0,28(sp)
80001878:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:211
	int ret;
	__asm volatile("csrr %0,mie":"=r"(ret));
8000187c:	304027f3          	csrr	a5,mie
80001880:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:212
	__asm volatile("csrc mie,%0"::"i"(7));
80001884:	3043f073          	csrci	mie,7
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:213
	return ret;
80001888:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:214
}
8000188c:	00078513          	mv	a0,a5
80001890:	01c12403          	lw	s0,28(sp)
80001894:	02010113          	addi	sp,sp,32
80001898:	00008067          	ret

8000189c <pxPortInitialiseStack>:
pxPortInitialiseStack():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:220

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
8000189c:	fe010113          	addi	sp,sp,-32
800018a0:	00812e23          	sw	s0,28(sp)
800018a4:	02010413          	addi	s0,sp,32
800018a8:	fea42623          	sw	a0,-20(s0)
800018ac:	feb42423          	sw	a1,-24(s0)
800018b0:	fec42223          	sw	a2,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:224
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	register int *tp asm("x3");
	pxTopOfStack--;
800018b4:	fec42783          	lw	a5,-20(s0)
800018b8:	ffc78793          	addi	a5,a5,-4
800018bc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:225
	*pxTopOfStack = (portSTACK_TYPE)pxCode;			/* Start address */
800018c0:	fe842703          	lw	a4,-24(s0)
800018c4:	fec42783          	lw	a5,-20(s0)
800018c8:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:226
	pxTopOfStack -= 22;
800018cc:	fec42783          	lw	a5,-20(s0)
800018d0:	fa878793          	addi	a5,a5,-88
800018d4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:227
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;	/* Register a0 */
800018d8:	fe442703          	lw	a4,-28(s0)
800018dc:	fec42783          	lw	a5,-20(s0)
800018e0:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:228
	pxTopOfStack -= 6;
800018e4:	fec42783          	lw	a5,-20(s0)
800018e8:	fe878793          	addi	a5,a5,-24
800018ec:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:229
	*pxTopOfStack = (portSTACK_TYPE)tp; /* Register thread pointer */
800018f0:	00018793          	mv	a5,gp
800018f4:	00078713          	mv	a4,a5
800018f8:	fec42783          	lw	a5,-20(s0)
800018fc:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:230
	pxTopOfStack -= 3;
80001900:	fec42783          	lw	a5,-20(s0)
80001904:	ff478793          	addi	a5,a5,-12
80001908:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:231
	*pxTopOfStack = (portSTACK_TYPE)prvTaskExitError; /* Register ra */
8000190c:	800027b7          	lui	a5,0x80002
80001910:	81c78713          	addi	a4,a5,-2020 # 8000181c <__stack_top+0xfffa177c>
80001914:	fec42783          	lw	a5,-20(s0)
80001918:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:233

	return pxTopOfStack;
8000191c:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:234
}
80001920:	00078513          	mv	a0,a5
80001924:	01c12403          	lw	s0,28(sp)
80001928:	02010113          	addi	sp,sp,32
8000192c:	00008067          	ret

80001930 <SysTick_Handler>:
SysTick_Handler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:238
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void )
{
80001930:	ff010113          	addi	sp,sp,-16
80001934:	00112623          	sw	ra,12(sp)
80001938:	00812423          	sw	s0,8(sp)
8000193c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:241
	/*Save Context*/
	{
		__asm volatile("lw	t0, pxCurrentTCB");
80001940:	92c1a283          	lw	t0,-1748(gp) # 800096bc <pxCurrentTCB>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:242
		__asm volatile("sw	a2, 0x0(t0)");
80001944:	00c2a023          	sw	a2,0(t0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:246
	}

	/* Increment the RTOS tick. */
	prvSetNextTimerInterrupt();
80001948:	d3dff0ef          	jal	ra,80001684 <prvSetNextTimerInterrupt>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:249

	/*Switch task */
	if( xTaskIncrementTick() != pdFALSE )
8000194c:	739000ef          	jal	ra,80002884 <xTaskIncrementTick>
80001950:	00050793          	mv	a5,a0
80001954:	00078463          	beqz	a5,8000195c <SysTick_Handler+0x2c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:251
	{
		vTaskSwitchContext();
80001958:	118010ef          	jal	ra,80002a70 <vTaskSwitchContext>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:256
	}

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
8000195c:	92c1a103          	lw	sp,-1748(gp) # 800096bc <pxCurrentTCB>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:257
		__asm volatile("lw	sp, 0x0(sp)");
80001960:	00012103          	lw	sp,0(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:259

		__asm volatile("lw	t0, 31 * 4(sp)");
80001964:	07c12283          	lw	t0,124(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:260
		__asm volatile("csrw	mepc, t0");
80001968:	34129073          	csrw	mepc,t0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:263

		// Added by Iaçanã
		__asm volatile("lui	t0, 0x2");
8000196c:	000022b7          	lui	t0,0x2
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:264
  		__asm volatile("addi t0,t0,-2048");
80001970:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:265
		__asm volatile("csrs mstatus,t0");
80001974:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:267

		__asm volatile("lw	t0, 32 * 4(sp)");
80001978:	08012283          	lw	t0,128(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:268
		__asm volatile("slli t0, t0, 0x4");
8000197c:	00429293          	slli	t0,t0,0x4
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:269
		__asm volatile("csrs mstatus, t0");
80001980:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:271

		__asm volatile("lw	x1, 0x0(sp)");
80001984:	00012083          	lw	ra,0(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:272
		__asm volatile("lw   x4, 3 * 4(sp)");
80001988:	00c12203          	lw	tp,12(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:273
		__asm volatile("lw   x5, 4 * 4(sp)");
8000198c:	01012283          	lw	t0,16(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:274
		__asm volatile("lw   x6, 5 * 4(sp)");
80001990:	01412303          	lw	t1,20(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:275
		__asm volatile("lw   x7, 6 * 4(sp)");
80001994:	01812383          	lw	t2,24(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:276
		__asm volatile("lw   x8, 7 * 4(sp)");
80001998:	01c12403          	lw	s0,28(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:277
		__asm volatile("lw   x9, 8 * 4(sp)");
8000199c:	02012483          	lw	s1,32(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:278
		__asm volatile("lw   x10, 9 * 4(sp)");
800019a0:	02412503          	lw	a0,36(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:279
		__asm volatile("lw   x11, 10 * 4(sp)");
800019a4:	02812583          	lw	a1,40(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:280
		__asm volatile("lw   x12, 11 * 4(sp)");
800019a8:	02c12603          	lw	a2,44(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:281
		__asm volatile("lw   x13, 12 * 4(sp)");
800019ac:	03012683          	lw	a3,48(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:282
		__asm volatile("lw   x14, 13 * 4(sp)");
800019b0:	03412703          	lw	a4,52(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:283
		__asm volatile("lw   x15, 14 * 4(sp)");
800019b4:	03812783          	lw	a5,56(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:284
		__asm volatile("lw   x16, 15 * 4(sp)");
800019b8:	03c12803          	lw	a6,60(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:285
		__asm volatile("lw   x17, 16 * 4(sp)");
800019bc:	04012883          	lw	a7,64(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:286
		__asm volatile("lw   x18, 17 * 4(sp)");
800019c0:	04412903          	lw	s2,68(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:287
		__asm volatile("lw   x19, 18 * 4(sp)");
800019c4:	04812983          	lw	s3,72(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:288
		__asm volatile("lw   x20, 19 * 4(sp)");
800019c8:	04c12a03          	lw	s4,76(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:289
		__asm volatile("lw   x21, 20 * 4(sp)");
800019cc:	05012a83          	lw	s5,80(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:290
		__asm volatile("lw   x22, 21 * 4(sp)");
800019d0:	05412b03          	lw	s6,84(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:291
		__asm volatile("lw   x23, 22 * 4(sp)");
800019d4:	05812b83          	lw	s7,88(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:292
		__asm volatile("lw   x24, 23 * 4(sp)");
800019d8:	05c12c03          	lw	s8,92(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:293
		__asm volatile("lw   x25, 24 * 4(sp)");
800019dc:	06012c83          	lw	s9,96(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:294
		__asm volatile("lw   x26, 25 * 4(sp)");
800019e0:	06412d03          	lw	s10,100(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:295
		__asm volatile("lw   x27, 26 * 4(sp)");
800019e4:	06812d83          	lw	s11,104(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:296
		__asm volatile("lw   x28, 27 * 4(sp)");
800019e8:	06c12e03          	lw	t3,108(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:297
		__asm volatile("lw   x29, 28 * 4(sp)");
800019ec:	07012e83          	lw	t4,112(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:298
		__asm volatile("lw   x30, 29 * 4(sp)");
800019f0:	07412f03          	lw	t5,116(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:299
		__asm volatile("lw   x31, 30 * 4(sp)");
800019f4:	07812f83          	lw	t6,120(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:301

		__asm volatile("addi	sp, sp, 4 * 33");
800019f8:	08410113          	addi	sp,sp,132
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:303

		__asm volatile("mret");
800019fc:	30200073          	mret
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:305
	}
}
80001a00:	00000013          	nop
80001a04:	00c12083          	lw	ra,12(sp)
80001a08:	00812403          	lw	s0,8(sp)
80001a0c:	01010113          	addi	sp,sp,16
80001a10:	00008067          	ret

80001a14 <xPortStartScheduler>:
xPortStartScheduler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:308
uint32_t g_startscheduler = 0;
BaseType_t xPortStartScheduler( void )
{
80001a14:	ff010113          	addi	sp,sp,-16
80001a18:	00112623          	sw	ra,12(sp)
80001a1c:	00812423          	sw	s0,8(sp)
80001a20:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:309
	vPortSetupTimer();
80001a24:	d2dff0ef          	jal	ra,80001750 <vPortSetupTimer>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:310
	uxCriticalNesting = 0;
80001a28:	800097b7          	lui	a5,0x80009
80001a2c:	5807aa23          	sw	zero,1428(a5) # 80009594 <__stack_top+0xfffa94f4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:311
	g_startscheduler = 1;
80001a30:	00100713          	li	a4,1
80001a34:	92e1a423          	sw	a4,-1752(gp) # 800096b8 <g_startscheduler>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:312
	__enable_irq();
80001a38:	969fe0ef          	jal	ra,800003a0 <__enable_irq>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:314

	raise_soft_interrupt();
80001a3c:	b89ff0ef          	jal	ra,800015c4 <raise_soft_interrupt>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:317

	/*Should not get here*/
	return pdFALSE;
80001a40:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:318
}
80001a44:	00078513          	mv	a0,a5
80001a48:	00c12083          	lw	ra,12(sp)
80001a4c:	00812403          	lw	s0,8(sp)
80001a50:	01010113          	addi	sp,sp,16
80001a54:	00008067          	ret

80001a58 <Software_IRQHandler>:
Software_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:321

void Software_IRQHandler(void)
{
80001a58:	ff010113          	addi	sp,sp,-16
80001a5c:	00112623          	sw	ra,12(sp)
80001a60:	00812423          	sw	s0,8(sp)
80001a64:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:322
	if(1 == g_startscheduler)
80001a68:	9281a703          	lw	a4,-1752(gp) # 800096b8 <g_startscheduler>
80001a6c:	00100793          	li	a5,1
80001a70:	00f71863          	bne	a4,a5,80001a80 <Software_IRQHandler+0x28>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:324
	{
		g_startscheduler = 2; //skip the save n switch context first time when scheduler is starting.
80001a74:	00200713          	li	a4,2
80001a78:	92e1a423          	sw	a4,-1752(gp) # 800096b8 <g_startscheduler>
80001a7c:	0100006f          	j	80001a8c <Software_IRQHandler+0x34>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:330
	}
	else
	{
		/*Save Context*/
		{
			__asm volatile("lw	t0, pxCurrentTCB");
80001a80:	92c1a283          	lw	t0,-1748(gp) # 800096bc <pxCurrentTCB>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:331
			__asm volatile("sw	a2, 0x0(t0)");
80001a84:	00c2a023          	sw	a2,0(t0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:334
		}

		vTaskSwitchContext();
80001a88:	7e9000ef          	jal	ra,80002a70 <vTaskSwitchContext>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:338
	}

	// Moved by Imperas (was previously causing corruption of a5)
	PRCI->MSIP[0] = 0x00;
80001a8c:	440007b7          	lui	a5,0x44000
80001a90:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:342

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
80001a94:	92c1a103          	lw	sp,-1748(gp) # 800096bc <pxCurrentTCB>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:343
		__asm volatile("lw	sp, 0x0(sp)");
80001a98:	00012103          	lw	sp,0(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:345

		__asm volatile("lw	t0, 31 * 4(sp)");
80001a9c:	07c12283          	lw	t0,124(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:346
		__asm volatile("csrw	mepc, t0");
80001aa0:	34129073          	csrw	mepc,t0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:349

		// Added by Iaçanã
		__asm volatile("lui	t0, 0x2");
80001aa4:	000022b7          	lui	t0,0x2
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:350
  		__asm volatile("addi t0,t0,-2048");
80001aa8:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:351
		__asm volatile("csrs mstatus,t0");
80001aac:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:353

		__asm volatile("lw	t0, 32 * 4(sp)");
80001ab0:	08012283          	lw	t0,128(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:354
		__asm volatile("slli t0, t0, 0x4");
80001ab4:	00429293          	slli	t0,t0,0x4
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:355
		__asm volatile("csrs mstatus, t0");
80001ab8:	3002a073          	csrs	mstatus,t0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:357

		__asm volatile("lw	x1, 0x0(sp)");
80001abc:	00012083          	lw	ra,0(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:358
		__asm volatile("lw   x4, 3 * 4(sp)");
80001ac0:	00c12203          	lw	tp,12(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:359
		__asm volatile("lw   x5, 4 * 4(sp)");
80001ac4:	01012283          	lw	t0,16(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:360
		__asm volatile("lw   x6, 5 * 4(sp)");
80001ac8:	01412303          	lw	t1,20(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:361
		__asm volatile("lw   x7, 6 * 4(sp)");
80001acc:	01812383          	lw	t2,24(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:362
		__asm volatile("lw   x8, 7 * 4(sp)");
80001ad0:	01c12403          	lw	s0,28(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:363
		__asm volatile("lw   x9, 8 * 4(sp)");
80001ad4:	02012483          	lw	s1,32(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:364
		__asm volatile("lw   x10, 9 * 4(sp)");
80001ad8:	02412503          	lw	a0,36(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:365
		__asm volatile("lw   x11, 10 * 4(sp)");
80001adc:	02812583          	lw	a1,40(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:366
		__asm volatile("lw   x12, 11 * 4(sp)");
80001ae0:	02c12603          	lw	a2,44(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:367
		__asm volatile("lw   x13, 12 * 4(sp)");
80001ae4:	03012683          	lw	a3,48(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:368
		__asm volatile("lw   x14, 13 * 4(sp)");
80001ae8:	03412703          	lw	a4,52(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:369
		__asm volatile("lw   x15, 14 * 4(sp)");
80001aec:	03812783          	lw	a5,56(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:370
		__asm volatile("lw   x16, 15 * 4(sp)");
80001af0:	03c12803          	lw	a6,60(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:371
		__asm volatile("lw   x17, 16 * 4(sp)");
80001af4:	04012883          	lw	a7,64(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:372
		__asm volatile("lw   x18, 17 * 4(sp)");
80001af8:	04412903          	lw	s2,68(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:373
		__asm volatile("lw   x19, 18 * 4(sp)");
80001afc:	04812983          	lw	s3,72(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:374
		__asm volatile("lw   x20, 19 * 4(sp)");
80001b00:	04c12a03          	lw	s4,76(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:375
		__asm volatile("lw   x21, 20 * 4(sp)");
80001b04:	05012a83          	lw	s5,80(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:376
		__asm volatile("lw   x22, 21 * 4(sp)");
80001b08:	05412b03          	lw	s6,84(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:377
		__asm volatile("lw   x23, 22 * 4(sp)");
80001b0c:	05812b83          	lw	s7,88(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:378
		__asm volatile("lw   x24, 23 * 4(sp)");
80001b10:	05c12c03          	lw	s8,92(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:379
		__asm volatile("lw   x25, 24 * 4(sp)");
80001b14:	06012c83          	lw	s9,96(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:380
		__asm volatile("lw   x26, 25 * 4(sp)");
80001b18:	06412d03          	lw	s10,100(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:381
		__asm volatile("lw   x27, 26 * 4(sp)");
80001b1c:	06812d83          	lw	s11,104(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:382
		__asm volatile("lw   x28, 27 * 4(sp)");
80001b20:	06c12e03          	lw	t3,108(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:383
		__asm volatile("lw   x29, 28 * 4(sp)");
80001b24:	07012e83          	lw	t4,112(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:384
		__asm volatile("lw   x30, 29 * 4(sp)");
80001b28:	07412f03          	lw	t5,116(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:385
		__asm volatile("lw   x31, 30 * 4(sp)");
80001b2c:	07812f83          	lw	t6,120(sp)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:387

		__asm volatile("addi	sp, sp, 4 * 33");
80001b30:	08410113          	addi	sp,sp,132
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:392

	    // Moved by Imperas (causing corruption of a5 at this position)
		//PRCI->MSIP[0] = 0x00;

		__asm volatile("mret");
80001b34:	30200073          	mret
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:394
	}
}
80001b38:	00000013          	nop
80001b3c:	00c12083          	lw	ra,12(sp)
80001b40:	00812403          	lw	s0,8(sp)
80001b44:	01010113          	addi	sp,sp,16
80001b48:	00008067          	ret

80001b4c <vPortYield>:
vPortYield():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:397

void vPortYield( void )
{
80001b4c:	ff010113          	addi	sp,sp,-16
80001b50:	00112623          	sw	ra,12(sp)
80001b54:	00812423          	sw	s0,8(sp)
80001b58:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:398
	raise_soft_interrupt();
80001b5c:	a69ff0ef          	jal	ra,800015c4 <raise_soft_interrupt>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:399
}
80001b60:	00000013          	nop
80001b64:	00c12083          	lw	ra,12(sp)
80001b68:	00812403          	lw	s0,8(sp)
80001b6c:	01010113          	addi	sp,sp,16
80001b70:	00008067          	ret

80001b74 <vListInitialise>:
vListInitialise():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:80
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
80001b74:	fe010113          	addi	sp,sp,-32
80001b78:	00812e23          	sw	s0,28(sp)
80001b7c:	02010413          	addi	s0,sp,32
80001b80:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:84
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001b84:	fec42783          	lw	a5,-20(s0)
80001b88:	00878713          	addi	a4,a5,8
80001b8c:	fec42783          	lw	a5,-20(s0)
80001b90:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:88

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
80001b94:	fec42783          	lw	a5,-20(s0)
80001b98:	fff00713          	li	a4,-1
80001b9c:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:92

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001ba0:	fec42783          	lw	a5,-20(s0)
80001ba4:	00878713          	addi	a4,a5,8
80001ba8:	fec42783          	lw	a5,-20(s0)
80001bac:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:93
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001bb0:	fec42783          	lw	a5,-20(s0)
80001bb4:	00878713          	addi	a4,a5,8
80001bb8:	fec42783          	lw	a5,-20(s0)
80001bbc:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:95

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
80001bc0:	fec42783          	lw	a5,-20(s0)
80001bc4:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:101

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
80001bc8:	00000013          	nop
80001bcc:	01c12403          	lw	s0,28(sp)
80001bd0:	02010113          	addi	sp,sp,32
80001bd4:	00008067          	ret

80001bd8 <vListInitialiseItem>:
vListInitialiseItem():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:105
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
80001bd8:	fe010113          	addi	sp,sp,-32
80001bdc:	00812e23          	sw	s0,28(sp)
80001be0:	02010413          	addi	s0,sp,32
80001be4:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:107
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80001be8:	fec42783          	lw	a5,-20(s0)
80001bec:	0007a823          	sw	zero,16(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:113

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
80001bf0:	00000013          	nop
80001bf4:	01c12403          	lw	s0,28(sp)
80001bf8:	02010113          	addi	sp,sp,32
80001bfc:	00008067          	ret

80001c00 <vListInsertEnd>:
vListInsertEnd():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:117
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001c00:	fd010113          	addi	sp,sp,-48
80001c04:	02812623          	sw	s0,44(sp)
80001c08:	03010413          	addi	s0,sp,48
80001c0c:	fca42e23          	sw	a0,-36(s0)
80001c10:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:118
ListItem_t * const pxIndex = pxList->pxIndex;
80001c14:	fdc42783          	lw	a5,-36(s0)
80001c18:	0047a783          	lw	a5,4(a5)
80001c1c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:129
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
80001c20:	fd842783          	lw	a5,-40(s0)
80001c24:	fec42703          	lw	a4,-20(s0)
80001c28:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:130
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
80001c2c:	fec42783          	lw	a5,-20(s0)
80001c30:	0087a703          	lw	a4,8(a5)
80001c34:	fd842783          	lw	a5,-40(s0)
80001c38:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:135

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
80001c3c:	fec42783          	lw	a5,-20(s0)
80001c40:	0087a783          	lw	a5,8(a5)
80001c44:	fd842703          	lw	a4,-40(s0)
80001c48:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:136
	pxIndex->pxPrevious = pxNewListItem;
80001c4c:	fec42783          	lw	a5,-20(s0)
80001c50:	fd842703          	lw	a4,-40(s0)
80001c54:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:139

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001c58:	fd842783          	lw	a5,-40(s0)
80001c5c:	fdc42703          	lw	a4,-36(s0)
80001c60:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:141

	( pxList->uxNumberOfItems )++;
80001c64:	fdc42783          	lw	a5,-36(s0)
80001c68:	0007a783          	lw	a5,0(a5)
80001c6c:	00178713          	addi	a4,a5,1
80001c70:	fdc42783          	lw	a5,-36(s0)
80001c74:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:142
}
80001c78:	00000013          	nop
80001c7c:	02c12403          	lw	s0,44(sp)
80001c80:	03010113          	addi	sp,sp,48
80001c84:	00008067          	ret

80001c88 <vListInsert>:
vListInsert():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:146
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001c88:	fd010113          	addi	sp,sp,-48
80001c8c:	02812623          	sw	s0,44(sp)
80001c90:	03010413          	addi	s0,sp,48
80001c94:	fca42e23          	sw	a0,-36(s0)
80001c98:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:148
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
80001c9c:	fd842783          	lw	a5,-40(s0)
80001ca0:	0007a783          	lw	a5,0(a5)
80001ca4:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:164
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
80001ca8:	fe842703          	lw	a4,-24(s0)
80001cac:	fff00793          	li	a5,-1
80001cb0:	00f71a63          	bne	a4,a5,80001cc4 <vListInsert+0x3c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:166
	{
		pxIterator = pxList->xListEnd.pxPrevious;
80001cb4:	fdc42783          	lw	a5,-36(s0)
80001cb8:	0107a783          	lw	a5,16(a5)
80001cbc:	fef42623          	sw	a5,-20(s0)
80001cc0:	0340006f          	j	80001cf4 <vListInsert+0x6c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:192
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001cc4:	fdc42783          	lw	a5,-36(s0)
80001cc8:	00878793          	addi	a5,a5,8
80001ccc:	fef42623          	sw	a5,-20(s0)
80001cd0:	0100006f          	j	80001ce0 <vListInsert+0x58>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 3)
80001cd4:	fec42783          	lw	a5,-20(s0)
80001cd8:	0047a783          	lw	a5,4(a5)
80001cdc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 1)
80001ce0:	fec42783          	lw	a5,-20(s0)
80001ce4:	0047a783          	lw	a5,4(a5)
80001ce8:	0007a783          	lw	a5,0(a5)
80001cec:	fe842703          	lw	a4,-24(s0)
80001cf0:	fef772e3          	bleu	a5,a4,80001cd4 <vListInsert+0x4c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:199
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
80001cf4:	fec42783          	lw	a5,-20(s0)
80001cf8:	0047a703          	lw	a4,4(a5)
80001cfc:	fd842783          	lw	a5,-40(s0)
80001d00:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:200
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
80001d04:	fd842783          	lw	a5,-40(s0)
80001d08:	0047a783          	lw	a5,4(a5)
80001d0c:	fd842703          	lw	a4,-40(s0)
80001d10:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:201
	pxNewListItem->pxPrevious = pxIterator;
80001d14:	fd842783          	lw	a5,-40(s0)
80001d18:	fec42703          	lw	a4,-20(s0)
80001d1c:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:202
	pxIterator->pxNext = pxNewListItem;
80001d20:	fec42783          	lw	a5,-20(s0)
80001d24:	fd842703          	lw	a4,-40(s0)
80001d28:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:206

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001d2c:	fd842783          	lw	a5,-40(s0)
80001d30:	fdc42703          	lw	a4,-36(s0)
80001d34:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:208

	( pxList->uxNumberOfItems )++;
80001d38:	fdc42783          	lw	a5,-36(s0)
80001d3c:	0007a783          	lw	a5,0(a5)
80001d40:	00178713          	addi	a4,a5,1
80001d44:	fdc42783          	lw	a5,-36(s0)
80001d48:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:209
}
80001d4c:	00000013          	nop
80001d50:	02c12403          	lw	s0,44(sp)
80001d54:	03010113          	addi	sp,sp,48
80001d58:	00008067          	ret

80001d5c <uxListRemove>:
uxListRemove():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:213
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
80001d5c:	fd010113          	addi	sp,sp,-48
80001d60:	02812623          	sw	s0,44(sp)
80001d64:	03010413          	addi	s0,sp,48
80001d68:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:216
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
80001d6c:	fdc42783          	lw	a5,-36(s0)
80001d70:	0107a783          	lw	a5,16(a5)
80001d74:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:218

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
80001d78:	fdc42783          	lw	a5,-36(s0)
80001d7c:	0047a783          	lw	a5,4(a5)
80001d80:	fdc42703          	lw	a4,-36(s0)
80001d84:	00872703          	lw	a4,8(a4) # 44000008 <RAM_SIZE+0x43f80008>
80001d88:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:219
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
80001d8c:	fdc42783          	lw	a5,-36(s0)
80001d90:	0087a783          	lw	a5,8(a5)
80001d94:	fdc42703          	lw	a4,-36(s0)
80001d98:	00472703          	lw	a4,4(a4)
80001d9c:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:225

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
80001da0:	fec42783          	lw	a5,-20(s0)
80001da4:	0047a783          	lw	a5,4(a5)
80001da8:	fdc42703          	lw	a4,-36(s0)
80001dac:	00f71a63          	bne	a4,a5,80001dc0 <uxListRemove+0x64>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:227
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
80001db0:	fdc42783          	lw	a5,-36(s0)
80001db4:	0087a703          	lw	a4,8(a5)
80001db8:	fec42783          	lw	a5,-20(s0)
80001dbc:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:234
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
80001dc0:	fdc42783          	lw	a5,-36(s0)
80001dc4:	0007a823          	sw	zero,16(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:235
	( pxList->uxNumberOfItems )--;
80001dc8:	fec42783          	lw	a5,-20(s0)
80001dcc:	0007a783          	lw	a5,0(a5)
80001dd0:	fff78713          	addi	a4,a5,-1
80001dd4:	fec42783          	lw	a5,-20(s0)
80001dd8:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:237

	return pxList->uxNumberOfItems;
80001ddc:	fec42783          	lw	a5,-20(s0)
80001de0:	0007a783          	lw	a5,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/list.c:238
}
80001de4:	00078513          	mv	a0,a5
80001de8:	02c12403          	lw	s0,44(sp)
80001dec:	03010113          	addi	sp,sp,48
80001df0:	00008067          	ret

80001df4 <memset>:
memset():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/string.c:25

  return dest;
}

void* memset(void* dest, int byte, size_t len)
{
80001df4:	fd010113          	addi	sp,sp,-48
80001df8:	02812623          	sw	s0,44(sp)
80001dfc:	03010413          	addi	s0,sp,48
80001e00:	fca42e23          	sw	a0,-36(s0)
80001e04:	fcb42c23          	sw	a1,-40(s0)
80001e08:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/string.c:26
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
80001e0c:	fdc42703          	lw	a4,-36(s0)
80001e10:	fd442783          	lw	a5,-44(s0)
80001e14:	00f767b3          	or	a5,a4,a5
80001e18:	0037f793          	andi	a5,a5,3
80001e1c:	06079863          	bnez	a5,80001e8c <memset+0x98>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/string.c:27
    uintptr_t word = byte & 0xFF;
80001e20:	fd842783          	lw	a5,-40(s0)
80001e24:	0ff7f793          	andi	a5,a5,255
80001e28:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/string.c:28
    word |= word << 8;
80001e2c:	fe442783          	lw	a5,-28(s0)
80001e30:	00879793          	slli	a5,a5,0x8
80001e34:	fe442703          	lw	a4,-28(s0)
80001e38:	00f767b3          	or	a5,a4,a5
80001e3c:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/string.c:29
    word |= word << 16;
80001e40:	fe442783          	lw	a5,-28(s0)
80001e44:	01079793          	slli	a5,a5,0x10
80001e48:	fe442703          	lw	a4,-28(s0)
80001e4c:	00f767b3          	or	a5,a4,a5
80001e50:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/string.c:32
    word |= word << 16 << 16;

    uintptr_t *d = dest;
80001e54:	fdc42783          	lw	a5,-36(s0)
80001e58:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001e5c:	0180006f          	j	80001e74 <memset+0x80>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/string.c:34
      *d++ = word;
80001e60:	fec42783          	lw	a5,-20(s0)
80001e64:	00478713          	addi	a4,a5,4
80001e68:	fee42623          	sw	a4,-20(s0)
80001e6c:	fe442703          	lw	a4,-28(s0)
80001e70:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001e74:	fdc42703          	lw	a4,-36(s0)
80001e78:	fd442783          	lw	a5,-44(s0)
80001e7c:	00f707b3          	add	a5,a4,a5
80001e80:	fec42703          	lw	a4,-20(s0)
80001e84:	fcf76ee3          	bltu	a4,a5,80001e60 <memset+0x6c>
80001e88:	0400006f          	j	80001ec8 <memset+0xd4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/string.c:36
  } else {
    char *d = dest;
80001e8c:	fdc42783          	lw	a5,-36(s0)
80001e90:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001e94:	0200006f          	j	80001eb4 <memset+0xc0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/string.c:38
      *d++ = byte;
80001e98:	fe842783          	lw	a5,-24(s0)
80001e9c:	00178713          	addi	a4,a5,1
80001ea0:	fee42423          	sw	a4,-24(s0)
80001ea4:	fd842703          	lw	a4,-40(s0)
80001ea8:	01871713          	slli	a4,a4,0x18
80001eac:	41875713          	srai	a4,a4,0x18
80001eb0:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001eb4:	fdc42703          	lw	a4,-36(s0)
80001eb8:	fd442783          	lw	a5,-44(s0)
80001ebc:	00f707b3          	add	a5,a4,a5
80001ec0:	fe842703          	lw	a4,-24(s0)
80001ec4:	fcf76ae3          	bltu	a4,a5,80001e98 <memset+0xa4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/string.c:40
  }
  return dest;
80001ec8:	fdc42783          	lw	a5,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/string.c:41
}
80001ecc:	00078513          	mv	a0,a5
80001ed0:	02c12403          	lw	s0,44(sp)
80001ed4:	03010113          	addi	sp,sp,48
80001ed8:	00008067          	ret

80001edc <strlen>:
strlen():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/string.c:44

size_t strlen(const char *s)
{
80001edc:	fd010113          	addi	sp,sp,-48
80001ee0:	02812623          	sw	s0,44(sp)
80001ee4:	03010413          	addi	s0,sp,48
80001ee8:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/string.c:45
  const char *p = s;
80001eec:	fdc42783          	lw	a5,-36(s0)
80001ef0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001ef4:	0100006f          	j	80001f04 <strlen+0x28>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/string.c:47
    p++;
80001ef8:	fec42783          	lw	a5,-20(s0)
80001efc:	00178793          	addi	a5,a5,1
80001f00:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001f04:	fec42783          	lw	a5,-20(s0)
80001f08:	00078783          	lb	a5,0(a5)
80001f0c:	fe0796e3          	bnez	a5,80001ef8 <strlen+0x1c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/string.c:48
  return p - s;
80001f10:	fec42703          	lw	a4,-20(s0)
80001f14:	fdc42783          	lw	a5,-36(s0)
80001f18:	40f707b3          	sub	a5,a4,a5
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/string.c:49
}
80001f1c:	00078513          	mv	a0,a5
80001f20:	02c12403          	lw	s0,44(sp)
80001f24:	03010113          	addi	sp,sp,48
80001f28:	00008067          	ret

80001f2c <xTaskGenericCreate>:
xTaskGenericCreate():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:551

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80001f2c:	fc010113          	addi	sp,sp,-64
80001f30:	02112e23          	sw	ra,60(sp)
80001f34:	02812c23          	sw	s0,56(sp)
80001f38:	04010413          	addi	s0,sp,64
80001f3c:	fca42e23          	sw	a0,-36(s0)
80001f40:	fcb42c23          	sw	a1,-40(s0)
80001f44:	fcd42823          	sw	a3,-48(s0)
80001f48:	fce42623          	sw	a4,-52(s0)
80001f4c:	fcf42423          	sw	a5,-56(s0)
80001f50:	fd042223          	sw	a6,-60(s0)
80001f54:	fd142023          	sw	a7,-64(s0)
80001f58:	00060793          	mv	a5,a2
80001f5c:	fcf41b23          	sh	a5,-42(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:556
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
80001f60:	fdc42783          	lw	a5,-36(s0)
80001f64:	00079663          	bnez	a5,80001f70 <xTaskGenericCreate+0x44>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:556 (discriminator 1)
80001f68:	30047073          	csrci	mstatus,8
80001f6c:	0000006f          	j	80001f6c <xTaskGenericCreate+0x40>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:557
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
80001f70:	fcc42703          	lw	a4,-52(s0)
80001f74:	00400793          	li	a5,4
80001f78:	00e7f663          	bleu	a4,a5,80001f84 <xTaskGenericCreate+0x58>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 1)
80001f7c:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 2)
80001f80:	0000006f          	j	80001f80 <xTaskGenericCreate+0x54>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:561

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
80001f84:	fd645783          	lhu	a5,-42(s0)
80001f88:	fc442583          	lw	a1,-60(s0)
80001f8c:	00078513          	mv	a0,a5
80001f90:	721000ef          	jal	ra,80002eb0 <prvAllocateTCBAndStack>
80001f94:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:562
	if( pxNewTCB != NULL )
80001f98:	fe842783          	lw	a5,-24(s0)
80001f9c:	16078263          	beqz	a5,80002100 <xTaskGenericCreate+0x1d4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:598
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
80001fa0:	fe842783          	lw	a5,-24(s0)
80001fa4:	0307a703          	lw	a4,48(a5)
80001fa8:	fd645683          	lhu	a3,-42(s0)
80001fac:	400007b7          	lui	a5,0x40000
80001fb0:	fff78793          	addi	a5,a5,-1 # 3fffffff <RAM_SIZE+0x3ff7ffff>
80001fb4:	00f687b3          	add	a5,a3,a5
80001fb8:	00279793          	slli	a5,a5,0x2
80001fbc:	00f707b3          	add	a5,a4,a5
80001fc0:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:599
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
80001fc4:	fe442783          	lw	a5,-28(s0)
80001fc8:	ffc7f793          	andi	a5,a5,-4
80001fcc:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:602

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
80001fd0:	fe442783          	lw	a5,-28(s0)
80001fd4:	0037f793          	andi	a5,a5,3
80001fd8:	00078663          	beqz	a5,80001fe4 <xTaskGenericCreate+0xb8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 1)
80001fdc:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 3)
80001fe0:	0000006f          	j	80001fe0 <xTaskGenericCreate+0xb4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:619
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
80001fe4:	fd645783          	lhu	a5,-42(s0)
80001fe8:	00078713          	mv	a4,a5
80001fec:	fc042683          	lw	a3,-64(s0)
80001ff0:	fcc42603          	lw	a2,-52(s0)
80001ff4:	fd842583          	lw	a1,-40(s0)
80001ff8:	fe842503          	lw	a0,-24(s0)
80001ffc:	395000ef          	jal	ra,80002b90 <prvInitialiseTCBVariables>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:631
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
80002000:	fd042603          	lw	a2,-48(s0)
80002004:	fdc42583          	lw	a1,-36(s0)
80002008:	fe442503          	lw	a0,-28(s0)
8000200c:	891ff0ef          	jal	ra,8000189c <pxPortInitialiseStack>
80002010:	00050713          	mv	a4,a0
80002014:	fe842783          	lw	a5,-24(s0)
80002018:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:635
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
8000201c:	fc842783          	lw	a5,-56(s0)
80002020:	00078863          	beqz	a5,80002030 <xTaskGenericCreate+0x104>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:640
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
80002024:	fc842783          	lw	a5,-56(s0)
80002028:	fe842703          	lw	a4,-24(s0)
8000202c:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:649
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
80002030:	de0ff0ef          	jal	ra,80001610 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:651
		{
			uxCurrentNumberOfTasks++;
80002034:	93c1a783          	lw	a5,-1732(gp) # 800096cc <uxCurrentNumberOfTasks>
80002038:	00178713          	addi	a4,a5,1
8000203c:	92e1ae23          	sw	a4,-1732(gp) # 800096cc <uxCurrentNumberOfTasks>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:652
			if( pxCurrentTCB == NULL )
80002040:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
80002044:	02079063          	bnez	a5,80002064 <xTaskGenericCreate+0x138>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:656
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
80002048:	fe842703          	lw	a4,-24(s0)
8000204c:	92e1a623          	sw	a4,-1748(gp) # 800096bc <pxCurrentTCB>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:658

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
80002050:	93c1a703          	lw	a4,-1732(gp) # 800096cc <uxCurrentNumberOfTasks>
80002054:	00100793          	li	a5,1
80002058:	02f71663          	bne	a4,a5,80002084 <xTaskGenericCreate+0x158>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:663
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
8000205c:	46d000ef          	jal	ra,80002cc8 <prvInitialiseTaskLists>
80002060:	0240006f          	j	80002084 <xTaskGenericCreate+0x158>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:675
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
80002064:	9481a783          	lw	a5,-1720(gp) # 800096d8 <xSchedulerRunning>
80002068:	00079e63          	bnez	a5,80002084 <xTaskGenericCreate+0x158>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:677
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
8000206c:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
80002070:	02c7a783          	lw	a5,44(a5)
80002074:	fcc42703          	lw	a4,-52(s0)
80002078:	00f76663          	bltu	a4,a5,80002084 <xTaskGenericCreate+0x158>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:679
					{
						pxCurrentTCB = pxNewTCB;
8000207c:	fe842703          	lw	a4,-24(s0)
80002080:	92e1a623          	sw	a4,-1748(gp) # 800096bc <pxCurrentTCB>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:692
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
80002084:	9581a783          	lw	a5,-1704(gp) # 800096e8 <uxTaskNumber>
80002088:	00178713          	addi	a4,a5,1
8000208c:	94e1ac23          	sw	a4,-1704(gp) # 800096e8 <uxTaskNumber>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:697

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
80002090:	9581a703          	lw	a4,-1704(gp) # 800096e8 <uxTaskNumber>
80002094:	fe842783          	lw	a5,-24(s0)
80002098:	04e7a423          	sw	a4,72(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:702
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
8000209c:	fe842783          	lw	a5,-24(s0)
800020a0:	02c7a703          	lw	a4,44(a5)
800020a4:	9441a783          	lw	a5,-1724(gp) # 800096d4 <uxTopReadyPriority>
800020a8:	00e7f863          	bleu	a4,a5,800020b8 <xTaskGenericCreate+0x18c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 1)
800020ac:	fe842783          	lw	a5,-24(s0)
800020b0:	02c7a703          	lw	a4,44(a5)
800020b4:	94e1a223          	sw	a4,-1724(gp) # 800096d4 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 3)
800020b8:	fe842783          	lw	a5,-24(s0)
800020bc:	02c7a703          	lw	a4,44(a5)
800020c0:	00070793          	mv	a5,a4
800020c4:	00279793          	slli	a5,a5,0x2
800020c8:	00e787b3          	add	a5,a5,a4
800020cc:	00279793          	slli	a5,a5,0x2
800020d0:	8003b737          	lui	a4,0x8003b
800020d4:	73070713          	addi	a4,a4,1840 # 8003b730 <__stack_top+0xfffdb690>
800020d8:	00e78733          	add	a4,a5,a4
800020dc:	fe842783          	lw	a5,-24(s0)
800020e0:	00478793          	addi	a5,a5,4
800020e4:	00078593          	mv	a1,a5
800020e8:	00070513          	mv	a0,a4
800020ec:	b15ff0ef          	jal	ra,80001c00 <vListInsertEnd>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:704 (discriminator 3)

			xReturn = pdPASS;
800020f0:	00100793          	li	a5,1
800020f4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:707 (discriminator 3)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
800020f8:	d4cff0ef          	jal	ra,80001644 <vPortExitCritical>
800020fc:	00c0006f          	j	80002108 <xTaskGenericCreate+0x1dc>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:711
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
80002100:	fff00793          	li	a5,-1
80002104:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:715
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
80002108:	fec42703          	lw	a4,-20(s0)
8000210c:	00100793          	li	a5,1
80002110:	02f71063          	bne	a4,a5,80002130 <xTaskGenericCreate+0x204>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:717
	{
		if( xSchedulerRunning != pdFALSE )
80002114:	9481a783          	lw	a5,-1720(gp) # 800096d8 <xSchedulerRunning>
80002118:	00078c63          	beqz	a5,80002130 <xTaskGenericCreate+0x204>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:721
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
8000211c:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
80002120:	02c7a783          	lw	a5,44(a5)
80002124:	fcc42703          	lw	a4,-52(s0)
80002128:	00e7f463          	bleu	a4,a5,80002130 <xTaskGenericCreate+0x204>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:723
			{
				taskYIELD_IF_USING_PREEMPTION();
8000212c:	a21ff0ef          	jal	ra,80001b4c <vPortYield>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:736
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
80002130:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:737
}
80002134:	00078513          	mv	a0,a5
80002138:	03c12083          	lw	ra,60(sp)
8000213c:	03812403          	lw	s0,56(sp)
80002140:	04010113          	addi	sp,sp,64
80002144:	00008067          	ret

80002148 <vTaskDelete>:
vTaskDelete():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:743
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
80002148:	fd010113          	addi	sp,sp,-48
8000214c:	02112623          	sw	ra,44(sp)
80002150:	02812423          	sw	s0,40(sp)
80002154:	03010413          	addi	s0,sp,48
80002158:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:746
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
8000215c:	cb4ff0ef          	jal	ra,80001610 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:750
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
80002160:	fdc42783          	lw	a5,-36(s0)
80002164:	00079663          	bnez	a5,80002170 <vTaskDelete+0x28>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 1)
80002168:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
8000216c:	0080006f          	j	80002174 <vTaskDelete+0x2c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 2)
80002170:	fdc42783          	lw	a5,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:750 (discriminator 4)
80002174:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:756 (discriminator 4)

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80002178:	fec42783          	lw	a5,-20(s0)
8000217c:	00478793          	addi	a5,a5,4
80002180:	00078513          	mv	a0,a5
80002184:	bd9ff0ef          	jal	ra,80001d5c <uxListRemove>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:766 (discriminator 4)
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
80002188:	fec42783          	lw	a5,-20(s0)
8000218c:	0287a783          	lw	a5,40(a5)
80002190:	00078a63          	beqz	a5,800021a4 <vTaskDelete+0x5c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:768
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002194:	fec42783          	lw	a5,-20(s0)
80002198:	01878793          	addi	a5,a5,24
8000219c:	00078513          	mv	a0,a5
800021a0:	bbdff0ef          	jal	ra,80001d5c <uxListRemove>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:775
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
800021a4:	fec42783          	lw	a5,-20(s0)
800021a8:	00478793          	addi	a5,a5,4
800021ac:	00078593          	mv	a1,a5
800021b0:	8003b7b7          	lui	a5,0x8003b
800021b4:	7d078513          	addi	a0,a5,2000 # 8003b7d0 <__stack_top+0xfffdb730>
800021b8:	a49ff0ef          	jal	ra,80001c00 <vListInsertEnd>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:780

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
800021bc:	9381a783          	lw	a5,-1736(gp) # 800096c8 <uxTasksDeleted>
800021c0:	00178713          	addi	a4,a5,1
800021c4:	92e1ac23          	sw	a4,-1736(gp) # 800096c8 <uxTasksDeleted>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:784

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
800021c8:	9581a783          	lw	a5,-1704(gp) # 800096e8 <uxTaskNumber>
800021cc:	00178713          	addi	a4,a5,1
800021d0:	94e1ac23          	sw	a4,-1704(gp) # 800096e8 <uxTaskNumber>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:788

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
800021d4:	c70ff0ef          	jal	ra,80001644 <vPortExitCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:792

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
800021d8:	9481a783          	lw	a5,-1720(gp) # 800096d8 <xSchedulerRunning>
800021dc:	02078a63          	beqz	a5,80002210 <vTaskDelete+0xc8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:794
		{
			if( pxTCB == pxCurrentTCB )
800021e0:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
800021e4:	fec42703          	lw	a4,-20(s0)
800021e8:	00f71e63          	bne	a4,a5,80002204 <vTaskDelete+0xbc>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:796
			{
				configASSERT( uxSchedulerSuspended == 0 );
800021ec:	9601a783          	lw	a5,-1696(gp) # 800096f0 <uxSchedulerSuspended>
800021f0:	00078663          	beqz	a5,800021fc <vTaskDelete+0xb4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:796 (discriminator 1)
800021f4:	30047073          	csrci	mstatus,8
800021f8:	0000006f          	j	800021f8 <vTaskDelete+0xb0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:804
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
800021fc:	951ff0ef          	jal	ra,80001b4c <vPortYield>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:817
					prvResetNextTaskUnblockTime();
				}
				taskEXIT_CRITICAL();
			}
		}
	}
80002200:	0100006f          	j	80002210 <vTaskDelete+0xc8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:810
				taskENTER_CRITICAL();
80002204:	c0cff0ef          	jal	ra,80001610 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:812
					prvResetNextTaskUnblockTime();
80002208:	5a9000ef          	jal	ra,80002fb0 <prvResetNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:814
				taskEXIT_CRITICAL();
8000220c:	c38ff0ef          	jal	ra,80001644 <vPortExitCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:817
	}
80002210:	00000013          	nop
80002214:	02c12083          	lw	ra,44(sp)
80002218:	02812403          	lw	s0,40(sp)
8000221c:	03010113          	addi	sp,sp,48
80002220:	00008067          	ret

80002224 <vTaskDelay>:
vTaskDelay():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:921
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
80002224:	fd010113          	addi	sp,sp,-48
80002228:	02112623          	sw	ra,44(sp)
8000222c:	02812423          	sw	s0,40(sp)
80002230:	03010413          	addi	s0,sp,48
80002234:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:923
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
80002238:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:927


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
8000223c:	fdc42783          	lw	a5,-36(s0)
80002240:	04078463          	beqz	a5,80002288 <vTaskDelay+0x64>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:929
		{
			configASSERT( uxSchedulerSuspended == 0 );
80002244:	9601a783          	lw	a5,-1696(gp) # 800096f0 <uxSchedulerSuspended>
80002248:	00078663          	beqz	a5,80002254 <vTaskDelay+0x30>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:929 (discriminator 1)
8000224c:	30047073          	csrci	mstatus,8
80002250:	0000006f          	j	80002250 <vTaskDelay+0x2c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:930
			vTaskSuspendAll();
80002254:	470000ef          	jal	ra,800026c4 <vTaskSuspendAll>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:944
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
80002258:	9401a783          	lw	a5,-1728(gp) # 800096d0 <xTickCount>
8000225c:	fdc42703          	lw	a4,-36(s0)
80002260:	00f707b3          	add	a5,a4,a5
80002264:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:949

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80002268:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
8000226c:	00478793          	addi	a5,a5,4
80002270:	00078513          	mv	a0,a5
80002274:	ae9ff0ef          	jal	ra,80001d5c <uxListRemove>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:960
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
80002278:	fe842503          	lw	a0,-24(s0)
8000227c:	3ad000ef          	jal	ra,80002e28 <prvAddCurrentTaskToDelayedList>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:962
			}
			xAlreadyYielded = xTaskResumeAll();
80002280:	46c000ef          	jal	ra,800026ec <xTaskResumeAll>
80002284:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:971
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
80002288:	fec42783          	lw	a5,-20(s0)
8000228c:	00079463          	bnez	a5,80002294 <vTaskDelay+0x70>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:973
		{
			portYIELD_WITHIN_API();
80002290:	8bdff0ef          	jal	ra,80001b4c <vPortYield>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:979
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80002294:	00000013          	nop
80002298:	02c12083          	lw	ra,44(sp)
8000229c:	02812403          	lw	s0,40(sp)
800022a0:	03010113          	addi	sp,sp,48
800022a4:	00008067          	ret

800022a8 <vTaskSuspend>:
vTaskSuspend():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1283
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
800022a8:	fd010113          	addi	sp,sp,-48
800022ac:	02112623          	sw	ra,44(sp)
800022b0:	02812423          	sw	s0,40(sp)
800022b4:	03010413          	addi	s0,sp,48
800022b8:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1286
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
800022bc:	b54ff0ef          	jal	ra,80001610 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1290
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
800022c0:	fdc42783          	lw	a5,-36(s0)
800022c4:	00079663          	bnez	a5,800022d0 <vTaskSuspend+0x28>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1290 (discriminator 1)
800022c8:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
800022cc:	0080006f          	j	800022d4 <vTaskSuspend+0x2c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1290 (discriminator 2)
800022d0:	fdc42783          	lw	a5,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1290 (discriminator 4)
800022d4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1296 (discriminator 4)

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
800022d8:	fec42783          	lw	a5,-20(s0)
800022dc:	00478793          	addi	a5,a5,4
800022e0:	00078513          	mv	a0,a5
800022e4:	a79ff0ef          	jal	ra,80001d5c <uxListRemove>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1306 (discriminator 4)
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
800022e8:	fec42783          	lw	a5,-20(s0)
800022ec:	0287a783          	lw	a5,40(a5)
800022f0:	00078a63          	beqz	a5,80002304 <vTaskSuspend+0x5c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1308
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
800022f4:	fec42783          	lw	a5,-20(s0)
800022f8:	01878793          	addi	a5,a5,24
800022fc:	00078513          	mv	a0,a5
80002300:	a5dff0ef          	jal	ra,80001d5c <uxListRemove>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1315
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
80002304:	fec42783          	lw	a5,-20(s0)
80002308:	00478793          	addi	a5,a5,4
8000230c:	00078593          	mv	a1,a5
80002310:	8003b7b7          	lui	a5,0x8003b
80002314:	7e478513          	addi	a0,a5,2020 # 8003b7e4 <__stack_top+0xfffdb744>
80002318:	8e9ff0ef          	jal	ra,80001c00 <vListInsertEnd>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1317
		}
		taskEXIT_CRITICAL();
8000231c:	b28ff0ef          	jal	ra,80001644 <vPortExitCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1319

		if( pxTCB == pxCurrentTCB )
80002320:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
80002324:	fec42703          	lw	a4,-20(s0)
80002328:	04f71263          	bne	a4,a5,8000236c <vTaskSuspend+0xc4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1321
		{
			if( xSchedulerRunning != pdFALSE )
8000232c:	9481a783          	lw	a5,-1720(gp) # 800096d8 <xSchedulerRunning>
80002330:	00078e63          	beqz	a5,8000234c <vTaskSuspend+0xa4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1324
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
80002334:	9601a783          	lw	a5,-1696(gp) # 800096f0 <uxSchedulerSuspended>
80002338:	00078663          	beqz	a5,80002344 <vTaskSuspend+0x9c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1324 (discriminator 1)
8000233c:	30047073          	csrci	mstatus,8
80002340:	0000006f          	j	80002340 <vTaskSuspend+0x98>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1325
				portYIELD_WITHIN_API();
80002344:	809ff0ef          	jal	ra,80001b4c <vPortYield>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1364
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
80002348:	0380006f          	j	80002380 <vTaskSuspend+0xd8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1332
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
8000234c:	8003b7b7          	lui	a5,0x8003b
80002350:	7e47a703          	lw	a4,2020(a5) # 8003b7e4 <__stack_top+0xfffdb744>
80002354:	93c1a783          	lw	a5,-1732(gp) # 800096cc <uxCurrentNumberOfTasks>
80002358:	00f71663          	bne	a4,a5,80002364 <vTaskSuspend+0xbc>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1338
					pxCurrentTCB = NULL;
8000235c:	9201a623          	sw	zero,-1748(gp) # 800096bc <pxCurrentTCB>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1364
	}
80002360:	0200006f          	j	80002380 <vTaskSuspend+0xd8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1342
					vTaskSwitchContext();
80002364:	70c000ef          	jal	ra,80002a70 <vTaskSwitchContext>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1364
	}
80002368:	0180006f          	j	80002380 <vTaskSuspend+0xd8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1348
			if( xSchedulerRunning != pdFALSE )
8000236c:	9481a783          	lw	a5,-1720(gp) # 800096d8 <xSchedulerRunning>
80002370:	00078863          	beqz	a5,80002380 <vTaskSuspend+0xd8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1353
				taskENTER_CRITICAL();
80002374:	a9cff0ef          	jal	ra,80001610 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1355
					prvResetNextTaskUnblockTime();
80002378:	439000ef          	jal	ra,80002fb0 <prvResetNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1357
				taskEXIT_CRITICAL();
8000237c:	ac8ff0ef          	jal	ra,80001644 <vPortExitCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1364
	}
80002380:	00000013          	nop
80002384:	02c12083          	lw	ra,44(sp)
80002388:	02812403          	lw	s0,40(sp)
8000238c:	03010113          	addi	sp,sp,48
80002390:	00008067          	ret

80002394 <prvTaskIsTaskSuspended>:
prvTaskIsTaskSuspended():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1372
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
80002394:	fd010113          	addi	sp,sp,-48
80002398:	02812623          	sw	s0,44(sp)
8000239c:	03010413          	addi	s0,sp,48
800023a0:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1373
	BaseType_t xReturn = pdFALSE;
800023a4:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1374
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
800023a8:	fdc42783          	lw	a5,-36(s0)
800023ac:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1380

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
800023b0:	fdc42783          	lw	a5,-36(s0)
800023b4:	00079663          	bnez	a5,800023c0 <prvTaskIsTaskSuspended+0x2c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1380 (discriminator 1)
800023b8:	30047073          	csrci	mstatus,8
800023bc:	0000006f          	j	800023bc <prvTaskIsTaskSuspended+0x28>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1383

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
800023c0:	fe842783          	lw	a5,-24(s0)
800023c4:	0147a703          	lw	a4,20(a5)
800023c8:	8003b7b7          	lui	a5,0x8003b
800023cc:	7e478793          	addi	a5,a5,2020 # 8003b7e4 <__stack_top+0xfffdb744>
800023d0:	00f71663          	bne	a4,a5,800023dc <prvTaskIsTaskSuspended+0x48>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1383 (discriminator 1)
800023d4:	00100793          	li	a5,1
800023d8:	0080006f          	j	800023e0 <prvTaskIsTaskSuspended+0x4c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1383 (discriminator 2)
800023dc:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1383 (discriminator 4)
800023e0:	02078e63          	beqz	a5,8000241c <prvTaskIsTaskSuspended+0x88>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1386
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
800023e4:	fe842783          	lw	a5,-24(s0)
800023e8:	0287a703          	lw	a4,40(a5)
800023ec:	8003b7b7          	lui	a5,0x8003b
800023f0:	7bc78793          	addi	a5,a5,1980 # 8003b7bc <__stack_top+0xfffdb71c>
800023f4:	02f70463          	beq	a4,a5,8000241c <prvTaskIsTaskSuspended+0x88>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1390
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
800023f8:	fe842783          	lw	a5,-24(s0)
800023fc:	0287a783          	lw	a5,40(a5)
80002400:	00079663          	bnez	a5,8000240c <prvTaskIsTaskSuspended+0x78>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1390 (discriminator 1)
80002404:	00100793          	li	a5,1
80002408:	0080006f          	j	80002410 <prvTaskIsTaskSuspended+0x7c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1390 (discriminator 2)
8000240c:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1390 (discriminator 4)
80002410:	00078663          	beqz	a5,8000241c <prvTaskIsTaskSuspended+0x88>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1392
				{
					xReturn = pdTRUE;
80002414:	00100793          	li	a5,1
80002418:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1409
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
8000241c:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1410
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
80002420:	00078513          	mv	a0,a5
80002424:	02c12403          	lw	s0,44(sp)
80002428:	03010113          	addi	sp,sp,48
8000242c:	00008067          	ret

80002430 <vTaskResume>:
vTaskResume():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1418
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
80002430:	fd010113          	addi	sp,sp,-48
80002434:	02112623          	sw	ra,44(sp)
80002438:	02812423          	sw	s0,40(sp)
8000243c:	03010413          	addi	s0,sp,48
80002440:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1419
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
80002444:	fdc42783          	lw	a5,-36(s0)
80002448:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1422

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
8000244c:	fdc42783          	lw	a5,-36(s0)
80002450:	00079663          	bnez	a5,8000245c <vTaskResume+0x2c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1422 (discriminator 1)
80002454:	30047073          	csrci	mstatus,8
80002458:	0000006f          	j	80002458 <vTaskResume+0x28>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1426

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
8000245c:	fec42783          	lw	a5,-20(s0)
80002460:	0a078463          	beqz	a5,80002508 <vTaskResume+0xd8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1426 (discriminator 1)
80002464:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
80002468:	fec42703          	lw	a4,-20(s0)
8000246c:	08f70e63          	beq	a4,a5,80002508 <vTaskResume+0xd8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1428
		{
			taskENTER_CRITICAL();
80002470:	9a0ff0ef          	jal	ra,80001610 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1430
			{
				if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
80002474:	fec42503          	lw	a0,-20(s0)
80002478:	f1dff0ef          	jal	ra,80002394 <prvTaskIsTaskSuspended>
8000247c:	00050713          	mv	a4,a0
80002480:	00100793          	li	a5,1
80002484:	08f71063          	bne	a4,a5,80002504 <vTaskResume+0xd4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1436
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
80002488:	fec42783          	lw	a5,-20(s0)
8000248c:	00478793          	addi	a5,a5,4
80002490:	00078513          	mv	a0,a5
80002494:	8c9ff0ef          	jal	ra,80001d5c <uxListRemove>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1437
					prvAddTaskToReadyList( pxTCB );
80002498:	fec42783          	lw	a5,-20(s0)
8000249c:	02c7a703          	lw	a4,44(a5)
800024a0:	9441a783          	lw	a5,-1724(gp) # 800096d4 <uxTopReadyPriority>
800024a4:	00e7f863          	bleu	a4,a5,800024b4 <vTaskResume+0x84>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1437 (discriminator 1)
800024a8:	fec42783          	lw	a5,-20(s0)
800024ac:	02c7a703          	lw	a4,44(a5)
800024b0:	94e1a223          	sw	a4,-1724(gp) # 800096d4 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1437 (discriminator 3)
800024b4:	fec42783          	lw	a5,-20(s0)
800024b8:	02c7a703          	lw	a4,44(a5)
800024bc:	00070793          	mv	a5,a4
800024c0:	00279793          	slli	a5,a5,0x2
800024c4:	00e787b3          	add	a5,a5,a4
800024c8:	00279793          	slli	a5,a5,0x2
800024cc:	8003b737          	lui	a4,0x8003b
800024d0:	73070713          	addi	a4,a4,1840 # 8003b730 <__stack_top+0xfffdb690>
800024d4:	00e78733          	add	a4,a5,a4
800024d8:	fec42783          	lw	a5,-20(s0)
800024dc:	00478793          	addi	a5,a5,4
800024e0:	00078593          	mv	a1,a5
800024e4:	00070513          	mv	a0,a4
800024e8:	f18ff0ef          	jal	ra,80001c00 <vListInsertEnd>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1440 (discriminator 3)

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
800024ec:	fec42783          	lw	a5,-20(s0)
800024f0:	02c7a703          	lw	a4,44(a5)
800024f4:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
800024f8:	02c7a783          	lw	a5,44(a5)
800024fc:	00f76463          	bltu	a4,a5,80002504 <vTaskResume+0xd4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1445
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
80002500:	e4cff0ef          	jal	ra,80001b4c <vPortYield>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1457
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
80002504:	940ff0ef          	jal	ra,80001644 <vPortExitCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1463
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80002508:	00000013          	nop
8000250c:	02c12083          	lw	ra,44(sp)
80002510:	02812403          	lw	s0,40(sp)
80002514:	03010113          	addi	sp,sp,48
80002518:	00008067          	ret

8000251c <xTaskResumeFromISR>:
xTaskResumeFromISR():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1472
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
8000251c:	fd010113          	addi	sp,sp,-48
80002520:	02112623          	sw	ra,44(sp)
80002524:	02812423          	sw	s0,40(sp)
80002528:	03010413          	addi	s0,sp,48
8000252c:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1473
	BaseType_t xYieldRequired = pdFALSE;
80002530:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1474
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
80002534:	fdc42783          	lw	a5,-36(s0)
80002538:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1477
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
8000253c:	fdc42783          	lw	a5,-36(s0)
80002540:	00079663          	bnez	a5,8000254c <xTaskResumeFromISR+0x30>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1477 (discriminator 1)
80002544:	30047073          	csrci	mstatus,8
80002548:	0000006f          	j	80002548 <xTaskResumeFromISR+0x2c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1497
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
8000254c:	b24ff0ef          	jal	ra,80001870 <vPortSetInterruptMask>
80002550:	00050793          	mv	a5,a0
80002554:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1499
		{
			if( prvTaskIsTaskSuspended( pxTCB ) == pdTRUE )
80002558:	fe842503          	lw	a0,-24(s0)
8000255c:	e39ff0ef          	jal	ra,80002394 <prvTaskIsTaskSuspended>
80002560:	00050713          	mv	a4,a0
80002564:	00100793          	li	a5,1
80002568:	0af71463          	bne	a4,a5,80002610 <xTaskResumeFromISR+0xf4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1504
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
8000256c:	9601a783          	lw	a5,-1696(gp) # 800096f0 <uxSchedulerSuspended>
80002570:	08079463          	bnez	a5,800025f8 <xTaskResumeFromISR+0xdc>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1508
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80002574:	fe842783          	lw	a5,-24(s0)
80002578:	02c7a703          	lw	a4,44(a5)
8000257c:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
80002580:	02c7a783          	lw	a5,44(a5)
80002584:	00f76663          	bltu	a4,a5,80002590 <xTaskResumeFromISR+0x74>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1510
					{
						xYieldRequired = pdTRUE;
80002588:	00100793          	li	a5,1
8000258c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1517
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove(  &( pxTCB->xGenericListItem ) );
80002590:	fe842783          	lw	a5,-24(s0)
80002594:	00478793          	addi	a5,a5,4
80002598:	00078513          	mv	a0,a5
8000259c:	fc0ff0ef          	jal	ra,80001d5c <uxListRemove>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1518
					prvAddTaskToReadyList( pxTCB );
800025a0:	fe842783          	lw	a5,-24(s0)
800025a4:	02c7a703          	lw	a4,44(a5)
800025a8:	9441a783          	lw	a5,-1724(gp) # 800096d4 <uxTopReadyPriority>
800025ac:	00e7f863          	bleu	a4,a5,800025bc <xTaskResumeFromISR+0xa0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1518 (discriminator 1)
800025b0:	fe842783          	lw	a5,-24(s0)
800025b4:	02c7a703          	lw	a4,44(a5)
800025b8:	94e1a223          	sw	a4,-1724(gp) # 800096d4 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1518 (discriminator 3)
800025bc:	fe842783          	lw	a5,-24(s0)
800025c0:	02c7a703          	lw	a4,44(a5)
800025c4:	00070793          	mv	a5,a4
800025c8:	00279793          	slli	a5,a5,0x2
800025cc:	00e787b3          	add	a5,a5,a4
800025d0:	00279793          	slli	a5,a5,0x2
800025d4:	8003b737          	lui	a4,0x8003b
800025d8:	73070713          	addi	a4,a4,1840 # 8003b730 <__stack_top+0xfffdb690>
800025dc:	00e78733          	add	a4,a5,a4
800025e0:	fe842783          	lw	a5,-24(s0)
800025e4:	00478793          	addi	a5,a5,4
800025e8:	00078593          	mv	a1,a5
800025ec:	00070513          	mv	a0,a4
800025f0:	e10ff0ef          	jal	ra,80001c00 <vListInsertEnd>
800025f4:	01c0006f          	j	80002610 <xTaskResumeFromISR+0xf4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1525
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
800025f8:	fe842783          	lw	a5,-24(s0)
800025fc:	01878793          	addi	a5,a5,24
80002600:	00078593          	mv	a1,a5
80002604:	8003b7b7          	lui	a5,0x8003b
80002608:	7bc78513          	addi	a0,a5,1980 # 8003b7bc <__stack_top+0xfffdb71c>
8000260c:	df4ff0ef          	jal	ra,80001c00 <vListInsertEnd>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1533
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
80002610:	fe442783          	lw	a5,-28(s0)
80002614:	00078513          	mv	a0,a5
80002618:	a30ff0ef          	jal	ra,80001848 <vPortClearInterruptMask>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1535

		return xYieldRequired;
8000261c:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1536
	}
80002620:	00078513          	mv	a0,a5
80002624:	02c12083          	lw	ra,44(sp)
80002628:	02812403          	lw	s0,40(sp)
8000262c:	03010113          	addi	sp,sp,48
80002630:	00008067          	ret

80002634 <vTaskStartScheduler>:
vTaskStartScheduler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1542

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
80002634:	fe010113          	addi	sp,sp,-32
80002638:	00112e23          	sw	ra,28(sp)
8000263c:	00812c23          	sw	s0,24(sp)
80002640:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1555
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
80002644:	00000893          	li	a7,0
80002648:	00000813          	li	a6,0
8000264c:	00000793          	li	a5,0
80002650:	00000713          	li	a4,0
80002654:	00000693          	li	a3,0
80002658:	40000613          	li	a2,1024
8000265c:	800095b7          	lui	a1,0x80009
80002660:	ac858593          	addi	a1,a1,-1336 # 80008ac8 <__stack_top+0xfffa8a28>
80002664:	80003537          	lui	a0,0x80003
80002668:	b5c50513          	addi	a0,a0,-1188 # 80002b5c <__stack_top+0xfffa2abc>
8000266c:	8c1ff0ef          	jal	ra,80001f2c <xTaskGenericCreate>
80002670:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1572
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
80002674:	fec42703          	lw	a4,-20(s0)
80002678:	00100793          	li	a5,1
8000267c:	02f71263          	bne	a4,a5,800026a0 <vTaskStartScheduler+0x6c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1579
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
80002680:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1589
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
80002684:	fff00713          	li	a4,-1
80002688:	94e1ae23          	sw	a4,-1700(gp) # 800096ec <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1590
		xSchedulerRunning = pdTRUE;
8000268c:	00100713          	li	a4,1
80002690:	94e1a423          	sw	a4,-1720(gp) # 800096d8 <xSchedulerRunning>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1591
		xTickCount = ( TickType_t ) 0U;
80002694:	9401a023          	sw	zero,-1728(gp) # 800096d0 <xTickCount>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1600
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
80002698:	b7cff0ef          	jal	ra,80001a14 <xPortStartScheduler>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
8000269c:	0140006f          	j	800026b0 <vTaskStartScheduler+0x7c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615
		configASSERT( xReturn );
800026a0:	fec42783          	lw	a5,-20(s0)
800026a4:	00079663          	bnez	a5,800026b0 <vTaskStartScheduler+0x7c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 1)
800026a8:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 2)
800026ac:	0000006f          	j	800026ac <vTaskStartScheduler+0x78>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
}
800026b0:	00000013          	nop
800026b4:	01c12083          	lw	ra,28(sp)
800026b8:	01812403          	lw	s0,24(sp)
800026bc:	02010113          	addi	sp,sp,32
800026c0:	00008067          	ret

800026c4 <vTaskSuspendAll>:
vTaskSuspendAll():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1632
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
800026c4:	ff010113          	addi	sp,sp,-16
800026c8:	00812623          	sw	s0,12(sp)
800026cc:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1637
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
800026d0:	9601a783          	lw	a5,-1696(gp) # 800096f0 <uxSchedulerSuspended>
800026d4:	00178713          	addi	a4,a5,1
800026d8:	96e1a023          	sw	a4,-1696(gp) # 800096f0 <uxSchedulerSuspended>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1638
}
800026dc:	00000013          	nop
800026e0:	00c12403          	lw	s0,12(sp)
800026e4:	01010113          	addi	sp,sp,16
800026e8:	00008067          	ret

800026ec <xTaskResumeAll>:
xTaskResumeAll():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1670

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
800026ec:	fe010113          	addi	sp,sp,-32
800026f0:	00112e23          	sw	ra,28(sp)
800026f4:	00812c23          	sw	s0,24(sp)
800026f8:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1672
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
800026fc:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
80002700:	9601a783          	lw	a5,-1696(gp) # 800096f0 <uxSchedulerSuspended>
80002704:	00079663          	bnez	a5,80002710 <xTaskResumeAll+0x24>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676 (discriminator 1)
80002708:	30047073          	csrci	mstatus,8
8000270c:	0000006f          	j	8000270c <xTaskResumeAll+0x20>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1683
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
80002710:	f01fe0ef          	jal	ra,80001610 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1685
	{
		--uxSchedulerSuspended;
80002714:	9601a783          	lw	a5,-1696(gp) # 800096f0 <uxSchedulerSuspended>
80002718:	fff78713          	addi	a4,a5,-1
8000271c:	96e1a023          	sw	a4,-1696(gp) # 800096f0 <uxSchedulerSuspended>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1687

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80002720:	9601a783          	lw	a5,-1696(gp) # 800096f0 <uxSchedulerSuspended>
80002724:	10079663          	bnez	a5,80002830 <xTaskResumeAll+0x144>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1689
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
80002728:	93c1a783          	lw	a5,-1732(gp) # 800096cc <uxCurrentNumberOfTasks>
8000272c:	10078263          	beqz	a5,80002830 <xTaskResumeAll+0x144>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
80002730:	0a80006f          	j	800027d8 <xTaskResumeAll+0xec>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1695
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
80002734:	8003b7b7          	lui	a5,0x8003b
80002738:	7bc78793          	addi	a5,a5,1980 # 8003b7bc <__stack_top+0xfffdb71c>
8000273c:	00c7a783          	lw	a5,12(a5)
80002740:	00c7a783          	lw	a5,12(a5)
80002744:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1696
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002748:	fe842783          	lw	a5,-24(s0)
8000274c:	01878793          	addi	a5,a5,24
80002750:	00078513          	mv	a0,a5
80002754:	e08ff0ef          	jal	ra,80001d5c <uxListRemove>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1697
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80002758:	fe842783          	lw	a5,-24(s0)
8000275c:	00478793          	addi	a5,a5,4
80002760:	00078513          	mv	a0,a5
80002764:	df8ff0ef          	jal	ra,80001d5c <uxListRemove>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698
					prvAddTaskToReadyList( pxTCB );
80002768:	fe842783          	lw	a5,-24(s0)
8000276c:	02c7a703          	lw	a4,44(a5)
80002770:	9441a783          	lw	a5,-1724(gp) # 800096d4 <uxTopReadyPriority>
80002774:	00e7f863          	bleu	a4,a5,80002784 <xTaskResumeAll+0x98>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 1)
80002778:	fe842783          	lw	a5,-24(s0)
8000277c:	02c7a703          	lw	a4,44(a5)
80002780:	94e1a223          	sw	a4,-1724(gp) # 800096d4 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 3)
80002784:	fe842783          	lw	a5,-24(s0)
80002788:	02c7a703          	lw	a4,44(a5)
8000278c:	00070793          	mv	a5,a4
80002790:	00279793          	slli	a5,a5,0x2
80002794:	00e787b3          	add	a5,a5,a4
80002798:	00279793          	slli	a5,a5,0x2
8000279c:	8003b737          	lui	a4,0x8003b
800027a0:	73070713          	addi	a4,a4,1840 # 8003b730 <__stack_top+0xfffdb690>
800027a4:	00e78733          	add	a4,a5,a4
800027a8:	fe842783          	lw	a5,-24(s0)
800027ac:	00478793          	addi	a5,a5,4
800027b0:	00078593          	mv	a1,a5
800027b4:	00070513          	mv	a0,a4
800027b8:	c48ff0ef          	jal	ra,80001c00 <vListInsertEnd>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1702 (discriminator 3)

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
800027bc:	fe842783          	lw	a5,-24(s0)
800027c0:	02c7a703          	lw	a4,44(a5)
800027c4:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
800027c8:	02c7a783          	lw	a5,44(a5)
800027cc:	00f76663          	bltu	a4,a5,800027d8 <xTaskResumeAll+0xec>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1704
					{
						xYieldPending = pdTRUE;
800027d0:	00100713          	li	a4,1
800027d4:	94e1a823          	sw	a4,-1712(gp) # 800096e0 <xYieldPending>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
800027d8:	8003b7b7          	lui	a5,0x8003b
800027dc:	7bc7a783          	lw	a5,1980(a5) # 8003b7bc <__stack_top+0xfffdb71c>
800027e0:	f4079ae3          	bnez	a5,80002734 <xTaskResumeAll+0x48>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1716

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
800027e4:	94c1a783          	lw	a5,-1716(gp) # 800096dc <uxPendedTicks>
800027e8:	02078863          	beqz	a5,80002818 <xTaskResumeAll+0x12c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
800027ec:	0240006f          	j	80002810 <xTaskResumeAll+0x124>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1720
					{
						if( xTaskIncrementTick() != pdFALSE )
800027f0:	094000ef          	jal	ra,80002884 <xTaskIncrementTick>
800027f4:	00050793          	mv	a5,a0
800027f8:	00078663          	beqz	a5,80002804 <xTaskResumeAll+0x118>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1722
						{
							xYieldPending = pdTRUE;
800027fc:	00100713          	li	a4,1
80002800:	94e1a823          	sw	a4,-1712(gp) # 800096e0 <xYieldPending>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1728
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
80002804:	94c1a783          	lw	a5,-1716(gp) # 800096dc <uxPendedTicks>
80002808:	fff78713          	addi	a4,a5,-1
8000280c:	94e1a623          	sw	a4,-1716(gp) # 800096dc <uxPendedTicks>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
					while( uxPendedTicks > ( UBaseType_t ) 0U )
80002810:	94c1a783          	lw	a5,-1716(gp) # 800096dc <uxPendedTicks>
80002814:	fc079ee3          	bnez	a5,800027f0 <xTaskResumeAll+0x104>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1736
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
80002818:	9501a703          	lw	a4,-1712(gp) # 800096e0 <xYieldPending>
8000281c:	00100793          	li	a5,1
80002820:	00f71863          	bne	a4,a5,80002830 <xTaskResumeAll+0x144>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1740
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
80002824:	00100793          	li	a5,1
80002828:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1743
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
8000282c:	b20ff0ef          	jal	ra,80001b4c <vPortYield>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1756
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
80002830:	e15fe0ef          	jal	ra,80001644 <vPortExitCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1758

	return xAlreadyYielded;
80002834:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1759
}
80002838:	00078513          	mv	a0,a5
8000283c:	01c12083          	lw	ra,28(sp)
80002840:	01812403          	lw	s0,24(sp)
80002844:	02010113          	addi	sp,sp,32
80002848:	00008067          	ret

8000284c <xTaskGetTickCount>:
xTaskGetTickCount():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1763
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
8000284c:	fe010113          	addi	sp,sp,-32
80002850:	00112e23          	sw	ra,28(sp)
80002854:	00812c23          	sw	s0,24(sp)
80002858:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1767
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
8000285c:	db5fe0ef          	jal	ra,80001610 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1769
	{
		xTicks = xTickCount;
80002860:	9401a783          	lw	a5,-1728(gp) # 800096d0 <xTickCount>
80002864:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1771
	}
	portTICK_TYPE_EXIT_CRITICAL();
80002868:	dddfe0ef          	jal	ra,80001644 <vPortExitCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1773

	return xTicks;
8000286c:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1774
}
80002870:	00078513          	mv	a0,a5
80002874:	01c12083          	lw	ra,28(sp)
80002878:	01812403          	lw	s0,24(sp)
8000287c:	02010113          	addi	sp,sp,32
80002880:	00008067          	ret

80002884 <xTaskIncrementTick>:
xTaskIncrementTick():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1938

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
80002884:	fd010113          	addi	sp,sp,-48
80002888:	02112623          	sw	ra,44(sp)
8000288c:	02812423          	sw	s0,40(sp)
80002890:	03010413          	addi	s0,sp,48
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1941
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
80002894:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1947

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80002898:	9601a783          	lw	a5,-1696(gp) # 800096f0 <uxSchedulerSuspended>
8000289c:	1a079063          	bnez	a5,80002a3c <xTaskIncrementTick+0x1b8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1951
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
800028a0:	9401a783          	lw	a5,-1728(gp) # 800096d0 <xTickCount>
800028a4:	00178713          	addi	a4,a5,1
800028a8:	94e1a023          	sw	a4,-1728(gp) # 800096d0 <xTickCount>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1956

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
800028ac:	9401a783          	lw	a5,-1728(gp) # 800096d0 <xTickCount>
800028b0:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1958

			if( xConstTickCount == ( TickType_t ) 0U )
800028b4:	fe842783          	lw	a5,-24(s0)
800028b8:	04079063          	bnez	a5,800028f8 <xTaskIncrementTick+0x74>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960
			{
				taskSWITCH_DELAYED_LISTS();
800028bc:	9301a783          	lw	a5,-1744(gp) # 800096c0 <pxDelayedTaskList>
800028c0:	0007a783          	lw	a5,0(a5)
800028c4:	00078663          	beqz	a5,800028d0 <xTaskIncrementTick+0x4c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 1)
800028c8:	30047073          	csrci	mstatus,8
800028cc:	0000006f          	j	800028cc <xTaskIncrementTick+0x48>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 2)
800028d0:	9301a783          	lw	a5,-1744(gp) # 800096c0 <pxDelayedTaskList>
800028d4:	fef42223          	sw	a5,-28(s0)
800028d8:	9341a703          	lw	a4,-1740(gp) # 800096c4 <pxOverflowDelayedTaskList>
800028dc:	92e1a823          	sw	a4,-1744(gp) # 800096c0 <pxDelayedTaskList>
800028e0:	fe442703          	lw	a4,-28(s0)
800028e4:	92e1aa23          	sw	a4,-1740(gp) # 800096c4 <pxOverflowDelayedTaskList>
800028e8:	9541a783          	lw	a5,-1708(gp) # 800096e4 <xNumOfOverflows>
800028ec:	00178713          	addi	a4,a5,1
800028f0:	94e1aa23          	sw	a4,-1708(gp) # 800096e4 <xNumOfOverflows>
800028f4:	6bc000ef          	jal	ra,80002fb0 <prvResetNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1971

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
800028f8:	95c1a783          	lw	a5,-1700(gp) # 800096ec <xNextTaskUnblockTime>
800028fc:	fe842703          	lw	a4,-24(s0)
80002900:	10f76063          	bltu	a4,a5,80002a00 <xTaskIncrementTick+0x17c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80002904:	9301a783          	lw	a5,-1744(gp) # 800096c0 <pxDelayedTaskList>
80002908:	0007a783          	lw	a5,0(a5)
8000290c:	00079663          	bnez	a5,80002918 <xTaskIncrementTick+0x94>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 1)
80002910:	00100793          	li	a5,1
80002914:	0080006f          	j	8000291c <xTaskIncrementTick+0x98>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 2)
80002918:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 4)
8000291c:	00078863          	beqz	a5,8000292c <xTaskIncrementTick+0xa8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1982
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
80002920:	fff00713          	li	a4,-1
80002924:	94e1ae23          	sw	a4,-1700(gp) # 800096ec <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1983
						break;
80002928:	0d80006f          	j	80002a00 <xTaskIncrementTick+0x17c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1991
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
8000292c:	9301a783          	lw	a5,-1744(gp) # 800096c0 <pxDelayedTaskList>
80002930:	00c7a783          	lw	a5,12(a5)
80002934:	00c7a783          	lw	a5,12(a5)
80002938:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1992
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
8000293c:	fe042783          	lw	a5,-32(s0)
80002940:	0047a783          	lw	a5,4(a5)
80002944:	fcf42e23          	sw	a5,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1994

						if( xConstTickCount < xItemValue )
80002948:	fe842703          	lw	a4,-24(s0)
8000294c:	fdc42783          	lw	a5,-36(s0)
80002950:	00f77863          	bleu	a5,a4,80002960 <xTaskIncrementTick+0xdc>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2001
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
80002954:	fdc42703          	lw	a4,-36(s0)
80002958:	94e1ae23          	sw	a4,-1700(gp) # 800096ec <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2002
							break;
8000295c:	0a40006f          	j	80002a00 <xTaskIncrementTick+0x17c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2010
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80002960:	fe042783          	lw	a5,-32(s0)
80002964:	00478793          	addi	a5,a5,4
80002968:	00078513          	mv	a0,a5
8000296c:	bf0ff0ef          	jal	ra,80001d5c <uxListRemove>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2014

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
80002970:	fe042783          	lw	a5,-32(s0)
80002974:	0287a783          	lw	a5,40(a5)
80002978:	00078a63          	beqz	a5,8000298c <xTaskIncrementTick+0x108>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2016
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
8000297c:	fe042783          	lw	a5,-32(s0)
80002980:	01878793          	addi	a5,a5,24
80002984:	00078513          	mv	a0,a5
80002988:	bd4ff0ef          	jal	ra,80001d5c <uxListRemove>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
8000298c:	fe042783          	lw	a5,-32(s0)
80002990:	02c7a703          	lw	a4,44(a5)
80002994:	9441a783          	lw	a5,-1724(gp) # 800096d4 <uxTopReadyPriority>
80002998:	00e7f863          	bleu	a4,a5,800029a8 <xTaskIncrementTick+0x124>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 1)
8000299c:	fe042783          	lw	a5,-32(s0)
800029a0:	02c7a703          	lw	a4,44(a5)
800029a4:	94e1a223          	sw	a4,-1724(gp) # 800096d4 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 3)
800029a8:	fe042783          	lw	a5,-32(s0)
800029ac:	02c7a703          	lw	a4,44(a5)
800029b0:	00070793          	mv	a5,a4
800029b4:	00279793          	slli	a5,a5,0x2
800029b8:	00e787b3          	add	a5,a5,a4
800029bc:	00279793          	slli	a5,a5,0x2
800029c0:	8003b737          	lui	a4,0x8003b
800029c4:	73070713          	addi	a4,a4,1840 # 8003b730 <__stack_top+0xfffdb690>
800029c8:	00e78733          	add	a4,a5,a4
800029cc:	fe042783          	lw	a5,-32(s0)
800029d0:	00478793          	addi	a5,a5,4
800029d4:	00078593          	mv	a1,a5
800029d8:	00070513          	mv	a0,a4
800029dc:	a24ff0ef          	jal	ra,80001c00 <vListInsertEnd>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2035 (discriminator 3)
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
800029e0:	fe042783          	lw	a5,-32(s0)
800029e4:	02c7a703          	lw	a4,44(a5)
800029e8:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
800029ec:	02c7a783          	lw	a5,44(a5)
800029f0:	f0f76ae3          	bltu	a4,a5,80002904 <xTaskIncrementTick+0x80>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2037
							{
								xSwitchRequired = pdTRUE;
800029f4:	00100793          	li	a5,1
800029f8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
800029fc:	f09ff06f          	j	80002904 <xTaskIncrementTick+0x80>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2055
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
80002a00:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
80002a04:	02c7a703          	lw	a4,44(a5)
80002a08:	8003b6b7          	lui	a3,0x8003b
80002a0c:	00070793          	mv	a5,a4
80002a10:	00279793          	slli	a5,a5,0x2
80002a14:	00e787b3          	add	a5,a5,a4
80002a18:	00279793          	slli	a5,a5,0x2
80002a1c:	73068713          	addi	a4,a3,1840 # 8003b730 <__stack_top+0xfffdb690>
80002a20:	00e787b3          	add	a5,a5,a4
80002a24:	0007a703          	lw	a4,0(a5)
80002a28:	00100793          	li	a5,1
80002a2c:	00e7fe63          	bleu	a4,a5,80002a48 <xTaskIncrementTick+0x1c4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2057
			{
				xSwitchRequired = pdTRUE;
80002a30:	00100793          	li	a5,1
80002a34:	fef42623          	sw	a5,-20(s0)
80002a38:	0100006f          	j	80002a48 <xTaskIncrementTick+0x1c4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2083
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
80002a3c:	94c1a783          	lw	a5,-1716(gp) # 800096dc <uxPendedTicks>
80002a40:	00178713          	addi	a4,a5,1
80002a44:	94e1a623          	sw	a4,-1716(gp) # 800096dc <uxPendedTicks>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2096
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
80002a48:	9501a783          	lw	a5,-1712(gp) # 800096e0 <xYieldPending>
80002a4c:	00078663          	beqz	a5,80002a58 <xTaskIncrementTick+0x1d4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2098
		{
			xSwitchRequired = pdTRUE;
80002a50:	00100793          	li	a5,1
80002a54:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2107
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
80002a58:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2108
}
80002a5c:	00078513          	mv	a0,a5
80002a60:	02c12083          	lw	ra,44(sp)
80002a64:	02812403          	lw	s0,40(sp)
80002a68:	03010113          	addi	sp,sp,48
80002a6c:	00008067          	ret

80002a70 <vTaskSwitchContext>:
vTaskSwitchContext():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2202

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
80002a70:	fe010113          	addi	sp,sp,-32
80002a74:	00812e23          	sw	s0,28(sp)
80002a78:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2203
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
80002a7c:	9601a783          	lw	a5,-1696(gp) # 800096f0 <uxSchedulerSuspended>
80002a80:	00078863          	beqz	a5,80002a90 <vTaskSwitchContext+0x20>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2207
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
80002a84:	00100713          	li	a4,1
80002a88:	94e1a823          	sw	a4,-1712(gp) # 800096e0 <xYieldPending>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
80002a8c:	0c00006f          	j	80002b4c <vTaskSwitchContext+0xdc>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2211
		xYieldPending = pdFALSE;
80002a90:	9401a823          	sw	zero,-1712(gp) # 800096e0 <xYieldPending>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246
		taskSELECT_HIGHEST_PRIORITY_TASK();
80002a94:	0200006f          	j	80002ab4 <vTaskSwitchContext+0x44>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 4)
80002a98:	9441a783          	lw	a5,-1724(gp) # 800096d4 <uxTopReadyPriority>
80002a9c:	00079663          	bnez	a5,80002aa8 <vTaskSwitchContext+0x38>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 1)
80002aa0:	30047073          	csrci	mstatus,8
80002aa4:	0000006f          	j	80002aa4 <vTaskSwitchContext+0x34>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 2)
80002aa8:	9441a783          	lw	a5,-1724(gp) # 800096d4 <uxTopReadyPriority>
80002aac:	fff78713          	addi	a4,a5,-1
80002ab0:	94e1a223          	sw	a4,-1724(gp) # 800096d4 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 3)
80002ab4:	9441a703          	lw	a4,-1724(gp) # 800096d4 <uxTopReadyPriority>
80002ab8:	8003b6b7          	lui	a3,0x8003b
80002abc:	00070793          	mv	a5,a4
80002ac0:	00279793          	slli	a5,a5,0x2
80002ac4:	00e787b3          	add	a5,a5,a4
80002ac8:	00279793          	slli	a5,a5,0x2
80002acc:	73068713          	addi	a4,a3,1840 # 8003b730 <__stack_top+0xfffdb690>
80002ad0:	00e787b3          	add	a5,a5,a4
80002ad4:	0007a783          	lw	a5,0(a5)
80002ad8:	fc0780e3          	beqz	a5,80002a98 <vTaskSwitchContext+0x28>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 5)
80002adc:	9441a703          	lw	a4,-1724(gp) # 800096d4 <uxTopReadyPriority>
80002ae0:	00070793          	mv	a5,a4
80002ae4:	00279793          	slli	a5,a5,0x2
80002ae8:	00e787b3          	add	a5,a5,a4
80002aec:	00279793          	slli	a5,a5,0x2
80002af0:	8003b737          	lui	a4,0x8003b
80002af4:	73070713          	addi	a4,a4,1840 # 8003b730 <__stack_top+0xfffdb690>
80002af8:	00e787b3          	add	a5,a5,a4
80002afc:	fef42623          	sw	a5,-20(s0)
80002b00:	fec42783          	lw	a5,-20(s0)
80002b04:	0047a783          	lw	a5,4(a5)
80002b08:	0047a703          	lw	a4,4(a5)
80002b0c:	fec42783          	lw	a5,-20(s0)
80002b10:	00e7a223          	sw	a4,4(a5)
80002b14:	fec42783          	lw	a5,-20(s0)
80002b18:	0047a703          	lw	a4,4(a5)
80002b1c:	fec42783          	lw	a5,-20(s0)
80002b20:	00878793          	addi	a5,a5,8
80002b24:	00f71c63          	bne	a4,a5,80002b3c <vTaskSwitchContext+0xcc>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 6)
80002b28:	fec42783          	lw	a5,-20(s0)
80002b2c:	0047a783          	lw	a5,4(a5)
80002b30:	0047a703          	lw	a4,4(a5)
80002b34:	fec42783          	lw	a5,-20(s0)
80002b38:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 8)
80002b3c:	fec42783          	lw	a5,-20(s0)
80002b40:	0047a783          	lw	a5,4(a5)
80002b44:	00c7a703          	lw	a4,12(a5)
80002b48:	92e1a623          	sw	a4,-1748(gp) # 800096bc <pxCurrentTCB>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
}
80002b4c:	00000013          	nop
80002b50:	01c12403          	lw	s0,28(sp)
80002b54:	02010113          	addi	sp,sp,32
80002b58:	00008067          	ret

80002b5c <prvIdleTask>:
prvIdleTask():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2689
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
80002b5c:	fe010113          	addi	sp,sp,-32
80002b60:	00112e23          	sw	ra,28(sp)
80002b64:	00812c23          	sw	s0,24(sp)
80002b68:	02010413          	addi	s0,sp,32
80002b6c:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
80002b70:	218000ef          	jal	ra,80002d88 <prvCheckTasksWaitingTermination>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2719

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
80002b74:	8003b7b7          	lui	a5,0x8003b
80002b78:	7307a703          	lw	a4,1840(a5) # 8003b730 <__stack_top+0xfffdb690>
80002b7c:	00100793          	li	a5,1
80002b80:	00e7f463          	bleu	a4,a5,80002b88 <prvIdleTask+0x2c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2721
			{
				taskYIELD();
80002b84:	fc9fe0ef          	jal	ra,80001b4c <vPortYield>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2739
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
80002b88:	358050ef          	jal	ra,80007ee0 <vApplicationIdleHook>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
		prvCheckTasksWaitingTermination();
80002b8c:	fe5ff06f          	j	80002b70 <prvIdleTask+0x14>

80002b90 <prvInitialiseTCBVariables>:
prvInitialiseTCBVariables():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2832

#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80002b90:	fc010113          	addi	sp,sp,-64
80002b94:	02112e23          	sw	ra,60(sp)
80002b98:	02812c23          	sw	s0,56(sp)
80002b9c:	04010413          	addi	s0,sp,64
80002ba0:	fca42e23          	sw	a0,-36(s0)
80002ba4:	fcb42c23          	sw	a1,-40(s0)
80002ba8:	fcc42a23          	sw	a2,-44(s0)
80002bac:	fcd42823          	sw	a3,-48(s0)
80002bb0:	00070793          	mv	a5,a4
80002bb4:	fcf41723          	sh	a5,-50(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
80002bb8:	fe042623          	sw	zero,-20(s0)
80002bbc:	0440006f          	j	80002c00 <prvInitialiseTCBVariables+0x70>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2838
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
80002bc0:	fd842703          	lw	a4,-40(s0)
80002bc4:	fec42783          	lw	a5,-20(s0)
80002bc8:	00f707b3          	add	a5,a4,a5
80002bcc:	00078703          	lb	a4,0(a5)
80002bd0:	fdc42683          	lw	a3,-36(s0)
80002bd4:	fec42783          	lw	a5,-20(s0)
80002bd8:	00f687b3          	add	a5,a3,a5
80002bdc:	02e78a23          	sb	a4,52(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2843

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
80002be0:	fd842703          	lw	a4,-40(s0)
80002be4:	fec42783          	lw	a5,-20(s0)
80002be8:	00f707b3          	add	a5,a4,a5
80002bec:	00078783          	lb	a5,0(a5)
80002bf0:	02078063          	beqz	a5,80002c10 <prvInitialiseTCBVariables+0x80>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 2)
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
80002bf4:	fec42783          	lw	a5,-20(s0)
80002bf8:	00178793          	addi	a5,a5,1
80002bfc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 1)
80002c00:	fec42703          	lw	a4,-20(s0)
80002c04:	00f00793          	li	a5,15
80002c08:	fae7fce3          	bleu	a4,a5,80002bc0 <prvInitialiseTCBVariables+0x30>
80002c0c:	0080006f          	j	80002c14 <prvInitialiseTCBVariables+0x84>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2845
		{
			break;
80002c10:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2855
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
80002c14:	fdc42783          	lw	a5,-36(s0)
80002c18:	040781a3          	sb	zero,67(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2859

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
80002c1c:	fd442703          	lw	a4,-44(s0)
80002c20:	00400793          	li	a5,4
80002c24:	00e7f663          	bleu	a4,a5,80002c30 <prvInitialiseTCBVariables+0xa0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2861
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
80002c28:	00400793          	li	a5,4
80002c2c:	fcf42a23          	sw	a5,-44(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2868
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
80002c30:	fdc42783          	lw	a5,-36(s0)
80002c34:	fd442703          	lw	a4,-44(s0)
80002c38:	02e7a623          	sw	a4,44(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2871
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
80002c3c:	fdc42783          	lw	a5,-36(s0)
80002c40:	fd442703          	lw	a4,-44(s0)
80002c44:	04e7a823          	sw	a4,80(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2872
		pxTCB->uxMutexesHeld = 0;
80002c48:	fdc42783          	lw	a5,-36(s0)
80002c4c:	0407aa23          	sw	zero,84(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2876
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
80002c50:	fdc42783          	lw	a5,-36(s0)
80002c54:	00478793          	addi	a5,a5,4
80002c58:	00078513          	mv	a0,a5
80002c5c:	f7dfe0ef          	jal	ra,80001bd8 <vListInitialiseItem>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2877
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
80002c60:	fdc42783          	lw	a5,-36(s0)
80002c64:	01878793          	addi	a5,a5,24
80002c68:	00078513          	mv	a0,a5
80002c6c:	f6dfe0ef          	jal	ra,80001bd8 <vListInitialiseItem>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2881

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
80002c70:	fdc42783          	lw	a5,-36(s0)
80002c74:	fdc42703          	lw	a4,-36(s0)
80002c78:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2884

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80002c7c:	00500713          	li	a4,5
80002c80:	fd442783          	lw	a5,-44(s0)
80002c84:	40f70733          	sub	a4,a4,a5
80002c88:	fdc42783          	lw	a5,-36(s0)
80002c8c:	00e7ac23          	sw	a4,24(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2885
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
80002c90:	fdc42783          	lw	a5,-36(s0)
80002c94:	fdc42703          	lw	a4,-36(s0)
80002c98:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2889

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
80002c9c:	fdc42783          	lw	a5,-36(s0)
80002ca0:	0407a223          	sw	zero,68(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2927
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
80002ca4:	fdc42783          	lw	a5,-36(s0)
80002ca8:	0407ac23          	sw	zero,88(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2928
		pxTCB->eNotifyState = eNotWaitingNotification;
80002cac:	fdc42783          	lw	a5,-36(s0)
80002cb0:	0407ae23          	sw	zero,92(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2938
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
80002cb4:	00000013          	nop
80002cb8:	03c12083          	lw	ra,60(sp)
80002cbc:	03812403          	lw	s0,56(sp)
80002cc0:	04010113          	addi	sp,sp,64
80002cc4:	00008067          	ret

80002cc8 <prvInitialiseTaskLists>:
prvInitialiseTaskLists():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:2997

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
80002cc8:	fe010113          	addi	sp,sp,-32
80002ccc:	00112e23          	sw	ra,28(sp)
80002cd0:	00812c23          	sw	s0,24(sp)
80002cd4:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
80002cd8:	fe042623          	sw	zero,-20(s0)
80002cdc:	0380006f          	j	80002d14 <prvInitialiseTaskLists+0x4c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3002 (discriminator 3)
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
80002ce0:	fec42703          	lw	a4,-20(s0)
80002ce4:	00070793          	mv	a5,a4
80002ce8:	00279793          	slli	a5,a5,0x2
80002cec:	00e787b3          	add	a5,a5,a4
80002cf0:	00279793          	slli	a5,a5,0x2
80002cf4:	8003b737          	lui	a4,0x8003b
80002cf8:	73070713          	addi	a4,a4,1840 # 8003b730 <__stack_top+0xfffdb690>
80002cfc:	00e787b3          	add	a5,a5,a4
80002d00:	00078513          	mv	a0,a5
80002d04:	e71fe0ef          	jal	ra,80001b74 <vListInitialise>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 3)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
80002d08:	fec42783          	lw	a5,-20(s0)
80002d0c:	00178793          	addi	a5,a5,1
80002d10:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 1)
80002d14:	fec42703          	lw	a4,-20(s0)
80002d18:	00400793          	li	a5,4
80002d1c:	fce7f2e3          	bleu	a4,a5,80002ce0 <prvInitialiseTaskLists+0x18>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3005
	}

	vListInitialise( &xDelayedTaskList1 );
80002d20:	8003b7b7          	lui	a5,0x8003b
80002d24:	79478513          	addi	a0,a5,1940 # 8003b794 <__stack_top+0xfffdb6f4>
80002d28:	e4dfe0ef          	jal	ra,80001b74 <vListInitialise>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3006
	vListInitialise( &xDelayedTaskList2 );
80002d2c:	8003b7b7          	lui	a5,0x8003b
80002d30:	7a878513          	addi	a0,a5,1960 # 8003b7a8 <__stack_top+0xfffdb708>
80002d34:	e41fe0ef          	jal	ra,80001b74 <vListInitialise>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3007
	vListInitialise( &xPendingReadyList );
80002d38:	8003b7b7          	lui	a5,0x8003b
80002d3c:	7bc78513          	addi	a0,a5,1980 # 8003b7bc <__stack_top+0xfffdb71c>
80002d40:	e35fe0ef          	jal	ra,80001b74 <vListInitialise>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3011

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
80002d44:	8003b7b7          	lui	a5,0x8003b
80002d48:	7d078513          	addi	a0,a5,2000 # 8003b7d0 <__stack_top+0xfffdb730>
80002d4c:	e29fe0ef          	jal	ra,80001b74 <vListInitialise>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3017
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
80002d50:	8003b7b7          	lui	a5,0x8003b
80002d54:	7e478513          	addi	a0,a5,2020 # 8003b7e4 <__stack_top+0xfffdb744>
80002d58:	e1dfe0ef          	jal	ra,80001b74 <vListInitialise>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3023
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
80002d5c:	8003b737          	lui	a4,0x8003b
80002d60:	79470713          	addi	a4,a4,1940 # 8003b794 <__stack_top+0xfffdb6f4>
80002d64:	92e1a823          	sw	a4,-1744(gp) # 800096c0 <pxDelayedTaskList>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3024
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
80002d68:	8003b737          	lui	a4,0x8003b
80002d6c:	7a870713          	addi	a4,a4,1960 # 8003b7a8 <__stack_top+0xfffdb708>
80002d70:	92e1aa23          	sw	a4,-1740(gp) # 800096c4 <pxOverflowDelayedTaskList>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3025
}
80002d74:	00000013          	nop
80002d78:	01c12083          	lw	ra,28(sp)
80002d7c:	01812403          	lw	s0,24(sp)
80002d80:	02010113          	addi	sp,sp,32
80002d84:	00008067          	ret

80002d88 <prvCheckTasksWaitingTermination>:
prvCheckTasksWaitingTermination():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3029
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
80002d88:	fe010113          	addi	sp,sp,-32
80002d8c:	00112e23          	sw	ra,28(sp)
80002d90:	00812c23          	sw	s0,24(sp)
80002d94:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
80002d98:	0740006f          	j	80002e0c <prvCheckTasksWaitingTermination+0x84>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3038
		{
			vTaskSuspendAll();
80002d9c:	929ff0ef          	jal	ra,800026c4 <vTaskSuspendAll>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3040
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
80002da0:	8003b7b7          	lui	a5,0x8003b
80002da4:	7d07a783          	lw	a5,2000(a5) # 8003b7d0 <__stack_top+0xfffdb730>
80002da8:	0017b793          	seqz	a5,a5
80002dac:	0ff7f793          	andi	a5,a5,255
80002db0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3042
			}
			( void ) xTaskResumeAll();
80002db4:	939ff0ef          	jal	ra,800026ec <xTaskResumeAll>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3044

			if( xListIsEmpty == pdFALSE )
80002db8:	fec42783          	lw	a5,-20(s0)
80002dbc:	04079863          	bnez	a5,80002e0c <prvCheckTasksWaitingTermination+0x84>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3048
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
80002dc0:	851fe0ef          	jal	ra,80001610 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3050
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
80002dc4:	8003b7b7          	lui	a5,0x8003b
80002dc8:	7d078793          	addi	a5,a5,2000 # 8003b7d0 <__stack_top+0xfffdb730>
80002dcc:	00c7a783          	lw	a5,12(a5)
80002dd0:	00c7a783          	lw	a5,12(a5)
80002dd4:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3051
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80002dd8:	fe842783          	lw	a5,-24(s0)
80002ddc:	00478793          	addi	a5,a5,4
80002de0:	00078513          	mv	a0,a5
80002de4:	f79fe0ef          	jal	ra,80001d5c <uxListRemove>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3052
					--uxCurrentNumberOfTasks;
80002de8:	93c1a783          	lw	a5,-1732(gp) # 800096cc <uxCurrentNumberOfTasks>
80002dec:	fff78713          	addi	a4,a5,-1
80002df0:	92e1ae23          	sw	a4,-1732(gp) # 800096cc <uxCurrentNumberOfTasks>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3053
					--uxTasksDeleted;
80002df4:	9381a783          	lw	a5,-1736(gp) # 800096c8 <uxTasksDeleted>
80002df8:	fff78713          	addi	a4,a5,-1
80002dfc:	92e1ac23          	sw	a4,-1736(gp) # 800096c8 <uxTasksDeleted>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3055
				}
				taskEXIT_CRITICAL();
80002e00:	845fe0ef          	jal	ra,80001644 <vPortExitCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3057

				prvDeleteTCB( pxTCB );
80002e04:	fe842503          	lw	a0,-24(s0)
80002e08:	168000ef          	jal	ra,80002f70 <prvDeleteTCB>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
80002e0c:	9381a783          	lw	a5,-1736(gp) # 800096c8 <uxTasksDeleted>
80002e10:	f80796e3          	bnez	a5,80002d9c <prvCheckTasksWaitingTermination+0x14>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3066
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
80002e14:	00000013          	nop
80002e18:	01c12083          	lw	ra,28(sp)
80002e1c:	01812403          	lw	s0,24(sp)
80002e20:	02010113          	addi	sp,sp,32
80002e24:	00008067          	ret

80002e28 <prvAddCurrentTaskToDelayedList>:
prvAddCurrentTaskToDelayedList():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3070
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
80002e28:	fe010113          	addi	sp,sp,-32
80002e2c:	00112e23          	sw	ra,28(sp)
80002e30:	00812c23          	sw	s0,24(sp)
80002e34:	02010413          	addi	s0,sp,32
80002e38:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3072
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
80002e3c:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
80002e40:	fec42703          	lw	a4,-20(s0)
80002e44:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3074

	if( xTimeToWake < xTickCount )
80002e48:	9401a783          	lw	a5,-1728(gp) # 800096d0 <xTickCount>
80002e4c:	fec42703          	lw	a4,-20(s0)
80002e50:	02f77063          	bleu	a5,a4,80002e70 <prvAddCurrentTaskToDelayedList+0x48>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3077
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80002e54:	9341a703          	lw	a4,-1740(gp) # 800096c4 <pxOverflowDelayedTaskList>
80002e58:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
80002e5c:	00478793          	addi	a5,a5,4
80002e60:	00078593          	mv	a1,a5
80002e64:	00070513          	mv	a0,a4
80002e68:	e21fe0ef          	jal	ra,80001c88 <vListInsert>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
80002e6c:	0300006f          	j	80002e9c <prvAddCurrentTaskToDelayedList+0x74>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3082
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80002e70:	9301a703          	lw	a4,-1744(gp) # 800096c0 <pxDelayedTaskList>
80002e74:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
80002e78:	00478793          	addi	a5,a5,4
80002e7c:	00078593          	mv	a1,a5
80002e80:	00070513          	mv	a0,a4
80002e84:	e05fe0ef          	jal	ra,80001c88 <vListInsert>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3087
		if( xTimeToWake < xNextTaskUnblockTime )
80002e88:	95c1a783          	lw	a5,-1700(gp) # 800096ec <xNextTaskUnblockTime>
80002e8c:	fec42703          	lw	a4,-20(s0)
80002e90:	00f77663          	bleu	a5,a4,80002e9c <prvAddCurrentTaskToDelayedList+0x74>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3089
			xNextTaskUnblockTime = xTimeToWake;
80002e94:	fec42703          	lw	a4,-20(s0)
80002e98:	94e1ae23          	sw	a4,-1700(gp) # 800096ec <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
}
80002e9c:	00000013          	nop
80002ea0:	01c12083          	lw	ra,28(sp)
80002ea4:	01812403          	lw	s0,24(sp)
80002ea8:	02010113          	addi	sp,sp,32
80002eac:	00008067          	ret

80002eb0 <prvAllocateTCBAndStack>:
prvAllocateTCBAndStack():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3100
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
80002eb0:	fd010113          	addi	sp,sp,-48
80002eb4:	02112623          	sw	ra,44(sp)
80002eb8:	02812423          	sw	s0,40(sp)
80002ebc:	03010413          	addi	s0,sp,48
80002ec0:	00050793          	mv	a5,a0
80002ec4:	fcb42c23          	sw	a1,-40(s0)
80002ec8:	fcf41f23          	sh	a5,-34(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80002ecc:	fd842783          	lw	a5,-40(s0)
80002ed0:	00079e63          	bnez	a5,80002eec <prvAllocateTCBAndStack+0x3c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 1)
80002ed4:	fde45783          	lhu	a5,-34(s0)
80002ed8:	00279793          	slli	a5,a5,0x2
80002edc:	00078513          	mv	a0,a5
80002ee0:	bc8fe0ef          	jal	ra,800012a8 <pvPortMalloc>
80002ee4:	00050793          	mv	a5,a0
80002ee8:	0080006f          	j	80002ef0 <prvAllocateTCBAndStack+0x40>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 2)
80002eec:	fd842783          	lw	a5,-40(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 4)
80002ef0:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3134 (discriminator 4)

		if( pxStack != NULL )
80002ef4:	fe842783          	lw	a5,-24(s0)
80002ef8:	02078a63          	beqz	a5,80002f2c <prvAllocateTCBAndStack+0x7c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3138
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
80002efc:	06000513          	li	a0,96
80002f00:	ba8fe0ef          	jal	ra,800012a8 <pvPortMalloc>
80002f04:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3140

			if( pxNewTCB != NULL )
80002f08:	fec42783          	lw	a5,-20(s0)
80002f0c:	00078a63          	beqz	a5,80002f20 <prvAllocateTCBAndStack+0x70>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3143
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
80002f10:	fec42783          	lw	a5,-20(s0)
80002f14:	fe842703          	lw	a4,-24(s0)
80002f18:	02e7a823          	sw	a4,48(a5)
80002f1c:	0140006f          	j	80002f30 <prvAllocateTCBAndStack+0x80>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3149
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
80002f20:	fe842503          	lw	a0,-24(s0)
80002f24:	d60fe0ef          	jal	ra,80001484 <vPortFree>
80002f28:	0080006f          	j	80002f30 <prvAllocateTCBAndStack+0x80>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3154
			}
		}
		else
		{
			pxNewTCB = NULL;
80002f2c:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3159
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
80002f30:	fec42783          	lw	a5,-20(s0)
80002f34:	02078263          	beqz	a5,80002f58 <prvAllocateTCBAndStack+0xa8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3165
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
80002f38:	fec42783          	lw	a5,-20(s0)
80002f3c:	0307a703          	lw	a4,48(a5)
80002f40:	fde45783          	lhu	a5,-34(s0)
80002f44:	00279793          	slli	a5,a5,0x2
80002f48:	00078613          	mv	a2,a5
80002f4c:	0a500593          	li	a1,165
80002f50:	00070513          	mv	a0,a4
80002f54:	ea1fe0ef          	jal	ra,80001df4 <memset>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3170
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
80002f58:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3171
}
80002f5c:	00078513          	mv	a0,a5
80002f60:	02c12083          	lw	ra,44(sp)
80002f64:	02812403          	lw	s0,40(sp)
80002f68:	03010113          	addi	sp,sp,48
80002f6c:	00008067          	ret

80002f70 <prvDeleteTCB>:
prvDeleteTCB():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3310
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
80002f70:	fe010113          	addi	sp,sp,-32
80002f74:	00112e23          	sw	ra,28(sp)
80002f78:	00812c23          	sw	s0,24(sp)
80002f7c:	02010413          	addi	s0,sp,32
80002f80:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3335
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
80002f84:	fec42783          	lw	a5,-20(s0)
80002f88:	0307a783          	lw	a5,48(a5)
80002f8c:	00078513          	mv	a0,a5
80002f90:	cf4fe0ef          	jal	ra,80001484 <vPortFree>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3339
		}
		#endif

		vPortFree( pxTCB );
80002f94:	fec42503          	lw	a0,-20(s0)
80002f98:	cecfe0ef          	jal	ra,80001484 <vPortFree>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3340
	}
80002f9c:	00000013          	nop
80002fa0:	01c12083          	lw	ra,28(sp)
80002fa4:	01812403          	lw	s0,24(sp)
80002fa8:	02010113          	addi	sp,sp,32
80002fac:	00008067          	ret

80002fb0 <prvResetNextTaskUnblockTime>:
prvResetNextTaskUnblockTime():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3346

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
80002fb0:	fe010113          	addi	sp,sp,-32
80002fb4:	00812e23          	sw	s0,28(sp)
80002fb8:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80002fbc:	9301a783          	lw	a5,-1744(gp) # 800096c0 <pxDelayedTaskList>
80002fc0:	0007a783          	lw	a5,0(a5)
80002fc4:	00079663          	bnez	a5,80002fd0 <prvResetNextTaskUnblockTime+0x20>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 1)
80002fc8:	00100793          	li	a5,1
80002fcc:	0080006f          	j	80002fd4 <prvResetNextTaskUnblockTime+0x24>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 2)
80002fd0:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 4)
80002fd4:	00078863          	beqz	a5,80002fe4 <prvResetNextTaskUnblockTime+0x34>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3355
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
80002fd8:	fff00713          	li	a4,-1
80002fdc:	94e1ae23          	sw	a4,-1700(gp) # 800096ec <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
80002fe0:	0200006f          	j	80003000 <prvResetNextTaskUnblockTime+0x50>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3363
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80002fe4:	9301a783          	lw	a5,-1744(gp) # 800096c0 <pxDelayedTaskList>
80002fe8:	00c7a783          	lw	a5,12(a5)
80002fec:	00c7a783          	lw	a5,12(a5)
80002ff0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3364
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
80002ff4:	fec42783          	lw	a5,-20(s0)
80002ff8:	0047a703          	lw	a4,4(a5)
80002ffc:	94e1ae23          	sw	a4,-1700(gp) # 800096ec <xNextTaskUnblockTime>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
}
80003000:	00000013          	nop
80003004:	01c12403          	lw	s0,28(sp)
80003008:	02010113          	addi	sp,sp,32
8000300c:	00008067          	ret

80003010 <xTaskGetCurrentTaskHandle>:
xTaskGetCurrentTaskHandle():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3372
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
80003010:	fe010113          	addi	sp,sp,-32
80003014:	00812e23          	sw	s0,28(sp)
80003018:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3378
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
8000301c:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
80003020:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3380

		return xReturn;
80003024:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3381
	}
80003028:	00078513          	mv	a0,a5
8000302c:	01c12403          	lw	s0,28(sp)
80003030:	02010113          	addi	sp,sp,32
80003034:	00008067          	ret

80003038 <vTaskEnterCritical>:
vTaskEnterCritical():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3564
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskEnterCritical( void )
	{
80003038:	ff010113          	addi	sp,sp,-16
8000303c:	00812623          	sw	s0,12(sp)
80003040:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3565
		portDISABLE_INTERRUPTS();
80003044:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3567

		if( xSchedulerRunning != pdFALSE )
80003048:	9481a783          	lw	a5,-1720(gp) # 800096d8 <xSchedulerRunning>
8000304c:	00078c63          	beqz	a5,80003064 <vTaskEnterCritical+0x2c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3569
		{
			( pxCurrentTCB->uxCriticalNesting )++;
80003050:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
80003054:	0447a703          	lw	a4,68(a5)
80003058:	00170713          	addi	a4,a4,1
8000305c:	04e7a223          	sw	a4,68(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3577
			function so	assert() if it is being called from an interrupt
			context.  Only API functions that end in "FromISR" can be used in an
			interrupt.  Only assert if the critical nesting count is 1 to
			protect against recursive calls if the assert function also uses a
			critical section. */
			if( pxCurrentTCB->uxCriticalNesting == 1 )
80003060:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3586
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80003064:	00000013          	nop
80003068:	00c12403          	lw	s0,12(sp)
8000306c:	01010113          	addi	sp,sp,16
80003070:	00008067          	ret

80003074 <vTaskExitCritical>:
vTaskExitCritical():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3594
/*-----------------------------------------------------------*/

#if ( portCRITICAL_NESTING_IN_TCB == 1 )

	void vTaskExitCritical( void )
	{
80003074:	ff010113          	addi	sp,sp,-16
80003078:	00812623          	sw	s0,12(sp)
8000307c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3595
		if( xSchedulerRunning != pdFALSE )
80003080:	9481a783          	lw	a5,-1720(gp) # 800096d8 <xSchedulerRunning>
80003084:	02078863          	beqz	a5,800030b4 <vTaskExitCritical+0x40>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3597
		{
			if( pxCurrentTCB->uxCriticalNesting > 0U )
80003088:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
8000308c:	0447a783          	lw	a5,68(a5)
80003090:	02078263          	beqz	a5,800030b4 <vTaskExitCritical+0x40>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3599
			{
				( pxCurrentTCB->uxCriticalNesting )--;
80003094:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
80003098:	0447a703          	lw	a4,68(a5)
8000309c:	fff70713          	addi	a4,a4,-1
800030a0:	04e7a223          	sw	a4,68(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3601

				if( pxCurrentTCB->uxCriticalNesting == 0U )
800030a4:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
800030a8:	0447a783          	lw	a5,68(a5)
800030ac:	00079463          	bnez	a5,800030b4 <vTaskExitCritical+0x40>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3603
				{
					portENABLE_INTERRUPTS();
800030b0:	30046073          	csrsi	mstatus,8
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3619
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
800030b4:	00000013          	nop
800030b8:	00c12403          	lw	s0,12(sp)
800030bc:	01010113          	addi	sp,sp,16
800030c0:	00008067          	ret

800030c4 <ulTaskNotifyTake>:
ulTaskNotifyTake():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3900
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
800030c4:	fd010113          	addi	sp,sp,-48
800030c8:	02112623          	sw	ra,44(sp)
800030cc:	02812423          	sw	s0,40(sp)
800030d0:	03010413          	addi	s0,sp,48
800030d4:	fca42e23          	sw	a0,-36(s0)
800030d8:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3904
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
800030dc:	d34fe0ef          	jal	ra,80001610 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3907
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
800030e0:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
800030e4:	0587a783          	lw	a5,88(a5)
800030e8:	06079663          	bnez	a5,80003154 <ulTaskNotifyTake+0x90>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3910
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
800030ec:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
800030f0:	00100713          	li	a4,1
800030f4:	04e7ae23          	sw	a4,92(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3912

				if( xTicksToWait > ( TickType_t ) 0 )
800030f8:	fd842783          	lw	a5,-40(s0)
800030fc:	04078c63          	beqz	a5,80003154 <ulTaskNotifyTake+0x90>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3916
				{
					/* The task is going to block.  First it must be removed
					from the ready list. */
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80003100:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
80003104:	00478793          	addi	a5,a5,4
80003108:	00078513          	mv	a0,a5
8000310c:	c51fe0ef          	jal	ra,80001d5c <uxListRemove>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3930
						mtCOVERAGE_TEST_MARKER();
					}

					#if ( INCLUDE_vTaskSuspend == 1 )
					{
						if( xTicksToWait == portMAX_DELAY )
80003110:	fd842703          	lw	a4,-40(s0)
80003114:	fff00793          	li	a5,-1
80003118:	02f71063          	bne	a4,a5,80003138 <ulTaskNotifyTake+0x74>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3936
						{
							/* Add the task to the suspended task list instead
							of a delayed task list to ensure the task is not
							woken by a timing event.  It will block
							indefinitely. */
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
8000311c:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
80003120:	00478793          	addi	a5,a5,4
80003124:	00078593          	mv	a1,a5
80003128:	8003b7b7          	lui	a5,0x8003b
8000312c:	7e478513          	addi	a0,a5,2020 # 8003b7e4 <__stack_top+0xfffdb744>
80003130:	ad1fe0ef          	jal	ra,80001c00 <vListInsertEnd>
80003134:	01c0006f          	j	80003150 <ulTaskNotifyTake+0x8c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3944
						{
							/* Calculate the time at which the task should be
							woken if no notification events occur.  This may
							overflow but this doesn't matter, the scheduler will
							handle it. */
							xTimeToWake = xTickCount + xTicksToWait;
80003138:	9401a783          	lw	a5,-1728(gp) # 800096d0 <xTickCount>
8000313c:	fd842703          	lw	a4,-40(s0)
80003140:	00f707b3          	add	a5,a4,a5
80003144:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3945
							prvAddCurrentTaskToDelayedList( xTimeToWake );
80003148:	fec42503          	lw	a0,-20(s0)
8000314c:	cddff0ef          	jal	ra,80002e28 <prvAddCurrentTaskToDelayedList>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3965

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
80003150:	9fdfe0ef          	jal	ra,80001b4c <vPortYield>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3977
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
80003154:	cf0fe0ef          	jal	ra,80001644 <vPortExitCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3979

		taskENTER_CRITICAL();
80003158:	cb8fe0ef          	jal	ra,80001610 <vPortEnterCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3982
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
8000315c:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
80003160:	0587a783          	lw	a5,88(a5)
80003164:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3984

			if( ulReturn != 0UL )
80003168:	fe842783          	lw	a5,-24(s0)
8000316c:	02078463          	beqz	a5,80003194 <ulTaskNotifyTake+0xd0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3986
			{
				if( xClearCountOnExit != pdFALSE )
80003170:	fdc42783          	lw	a5,-36(s0)
80003174:	00078863          	beqz	a5,80003184 <ulTaskNotifyTake+0xc0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3988
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
80003178:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
8000317c:	0407ac23          	sw	zero,88(a5)
80003180:	0140006f          	j	80003194 <ulTaskNotifyTake+0xd0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:3992
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
80003184:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
80003188:	0587a703          	lw	a4,88(a5)
8000318c:	fff70713          	addi	a4,a4,-1
80003190:	04e7ac23          	sw	a4,88(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:4000
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
80003194:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
80003198:	0407ae23          	sw	zero,92(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:4002
		}
		taskEXIT_CRITICAL();
8000319c:	ca8fe0ef          	jal	ra,80001644 <vPortExitCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:4004

		return ulReturn;
800031a0:	fe842783          	lw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:4005
	}
800031a4:	00078513          	mv	a0,a5
800031a8:	02c12083          	lw	ra,44(sp)
800031ac:	02812403          	lw	s0,40(sp)
800031b0:	03010113          	addi	sp,sp,48
800031b4:	00008067          	ret

800031b8 <vTaskNotifyGiveFromISR>:
vTaskNotifyGiveFromISR():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:4361
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
800031b8:	fd010113          	addi	sp,sp,-48
800031bc:	02112623          	sw	ra,44(sp)
800031c0:	02812423          	sw	s0,40(sp)
800031c4:	03010413          	addi	s0,sp,48
800031c8:	fca42e23          	sw	a0,-36(s0)
800031cc:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:4366
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
800031d0:	fdc42783          	lw	a5,-36(s0)
800031d4:	00079663          	bnez	a5,800031e0 <vTaskNotifyGiveFromISR+0x28>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:4366 (discriminator 1)
800031d8:	30047073          	csrci	mstatus,8
800031dc:	0000006f          	j	800031dc <vTaskNotifyGiveFromISR+0x24>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:4386
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
800031e0:	fdc42783          	lw	a5,-36(s0)
800031e4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:4388

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
800031e8:	e88fe0ef          	jal	ra,80001870 <vPortSetInterruptMask>
800031ec:	00050793          	mv	a5,a0
800031f0:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:4390
		{
			eOriginalNotifyState = pxTCB->eNotifyState;
800031f4:	fec42783          	lw	a5,-20(s0)
800031f8:	05c7a783          	lw	a5,92(a5)
800031fc:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:4391
			pxTCB->eNotifyState = eNotified;
80003200:	fec42783          	lw	a5,-20(s0)
80003204:	00200713          	li	a4,2
80003208:	04e7ae23          	sw	a4,92(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:4395

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
8000320c:	fec42783          	lw	a5,-20(s0)
80003210:	0587a783          	lw	a5,88(a5)
80003214:	00178713          	addi	a4,a5,1
80003218:	fec42783          	lw	a5,-20(s0)
8000321c:	04e7ac23          	sw	a4,88(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:4401

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
80003220:	fe442703          	lw	a4,-28(s0)
80003224:	00100793          	li	a5,1
80003228:	0cf71463          	bne	a4,a5,800032f0 <vTaskNotifyGiveFromISR+0x138>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:4404
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
8000322c:	fec42783          	lw	a5,-20(s0)
80003230:	0287a783          	lw	a5,40(a5)
80003234:	00078663          	beqz	a5,80003240 <vTaskNotifyGiveFromISR+0x88>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:4404 (discriminator 1)
80003238:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:4404 (discriminator 2)
8000323c:	0000006f          	j	8000323c <vTaskNotifyGiveFromISR+0x84>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:4406

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80003240:	9601a783          	lw	a5,-1696(gp) # 800096f0 <uxSchedulerSuspended>
80003244:	06079663          	bnez	a5,800032b0 <vTaskNotifyGiveFromISR+0xf8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:4408
				{
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
80003248:	fec42783          	lw	a5,-20(s0)
8000324c:	00478793          	addi	a5,a5,4
80003250:	00078513          	mv	a0,a5
80003254:	b09fe0ef          	jal	ra,80001d5c <uxListRemove>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:4409
					prvAddTaskToReadyList( pxTCB );
80003258:	fec42783          	lw	a5,-20(s0)
8000325c:	02c7a703          	lw	a4,44(a5)
80003260:	9441a783          	lw	a5,-1724(gp) # 800096d4 <uxTopReadyPriority>
80003264:	00e7f863          	bleu	a4,a5,80003274 <vTaskNotifyGiveFromISR+0xbc>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:4409 (discriminator 1)
80003268:	fec42783          	lw	a5,-20(s0)
8000326c:	02c7a703          	lw	a4,44(a5)
80003270:	94e1a223          	sw	a4,-1724(gp) # 800096d4 <uxTopReadyPriority>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:4409 (discriminator 3)
80003274:	fec42783          	lw	a5,-20(s0)
80003278:	02c7a703          	lw	a4,44(a5)
8000327c:	00070793          	mv	a5,a4
80003280:	00279793          	slli	a5,a5,0x2
80003284:	00e787b3          	add	a5,a5,a4
80003288:	00279793          	slli	a5,a5,0x2
8000328c:	8003b737          	lui	a4,0x8003b
80003290:	73070713          	addi	a4,a4,1840 # 8003b730 <__stack_top+0xfffdb690>
80003294:	00e78733          	add	a4,a5,a4
80003298:	fec42783          	lw	a5,-20(s0)
8000329c:	00478793          	addi	a5,a5,4
800032a0:	00078593          	mv	a1,a5
800032a4:	00070513          	mv	a0,a4
800032a8:	959fe0ef          	jal	ra,80001c00 <vListInsertEnd>
800032ac:	01c0006f          	j	800032c8 <vTaskNotifyGiveFromISR+0x110>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:4415
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
800032b0:	fec42783          	lw	a5,-20(s0)
800032b4:	01878793          	addi	a5,a5,24
800032b8:	00078593          	mv	a1,a5
800032bc:	8003b7b7          	lui	a5,0x8003b
800032c0:	7bc78513          	addi	a0,a5,1980 # 8003b7bc <__stack_top+0xfffdb71c>
800032c4:	93dfe0ef          	jal	ra,80001c00 <vListInsertEnd>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:4418
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
800032c8:	fec42783          	lw	a5,-20(s0)
800032cc:	02c7a703          	lw	a4,44(a5)
800032d0:	92c1a783          	lw	a5,-1748(gp) # 800096bc <pxCurrentTCB>
800032d4:	02c7a783          	lw	a5,44(a5)
800032d8:	00e7fc63          	bleu	a4,a5,800032f0 <vTaskNotifyGiveFromISR+0x138>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:4422
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
800032dc:	fd842783          	lw	a5,-40(s0)
800032e0:	00078863          	beqz	a5,800032f0 <vTaskNotifyGiveFromISR+0x138>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:4424
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
800032e4:	fd842783          	lw	a5,-40(s0)
800032e8:	00100713          	li	a4,1
800032ec:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:4433
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
800032f0:	fe842783          	lw	a5,-24(s0)
800032f4:	00078513          	mv	a0,a5
800032f8:	d50fe0ef          	jal	ra,80001848 <vPortClearInterruptMask>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/tasks.c:4434
	}
800032fc:	00000013          	nop
80003300:	02c12083          	lw	ra,44(sp)
80003304:	02812403          	lw	s0,40(sp)
80003308:	03010113          	addi	sp,sp,48
8000330c:	00008067          	ret

80003310 <API_RepositoryWakeUp>:
API_RepositoryWakeUp():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:10
#include "packet.h"
#include "services.h"

////////////////////////////////////////////////////////////
// Informs the Repository that the GLOBALMASTER is ready to receive the application info
void API_RepositoryWakeUp(){
80003310:	fe010113          	addi	sp,sp,-32
80003314:	00112e23          	sw	ra,28(sp)
80003318:	00812c23          	sw	s0,24(sp)
8000331c:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:13
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80003320:	31c020ef          	jal	ra,8000563c <API_GetServiceSlot>
80003324:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:14
        if(mySlot == PIPE_FULL){
80003328:	fec42703          	lw	a4,-20(s0)
8000332c:	fdfe07b7          	lui	a5,0xfdfe0
80003330:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df7fd5d>
80003334:	00f71a63          	bne	a4,a5,80003348 <API_RepositoryWakeUp+0x38>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:16
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            prints("Estou preso aqui5...\n");
80003338:	800097b7          	lui	a5,0x80009
8000333c:	ad078513          	addi	a0,a5,-1328 # 80008ad0 <__stack_top+0xfffa8a30>
80003340:	1f8030ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:17
            API_NI_Handler();
80003344:	0e9040ef          	jal	ra,80007c2c <API_NI_Handler>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:19
        }
    }while(mySlot == PIPE_FULL);
80003348:	fec42703          	lw	a4,-20(s0)
8000334c:	fdfe07b7          	lui	a5,0xfdfe0
80003350:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df7fd5d>
80003354:	fcf706e3          	beq	a4,a5,80003320 <API_RepositoryWakeUp+0x10>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:22
    //printsv("I got a free service slot!! -> ", mySlot);

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80003358:	8003b7b7          	lui	a5,0x8003b
8000335c:	fec42703          	lw	a4,-20(s0)
80003360:	7fc78693          	addi	a3,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
80003364:	00070793          	mv	a5,a4
80003368:	00479793          	slli	a5,a5,0x4
8000336c:	40e787b3          	sub	a5,a5,a4
80003370:	00279793          	slli	a5,a5,0x2
80003374:	00f687b3          	add	a5,a3,a5
80003378:	feff0737          	lui	a4,0xfeff0
8000337c:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7ef8fe5e>
80003380:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:24

    ServicePipe[mySlot].header.header       = makeAddress(0, 0) | PERIPH_SOUTH;
80003384:	00000593          	li	a1,0
80003388:	00000513          	li	a0,0
8000338c:	7b4030ef          	jal	ra,80006b40 <makeAddress>
80003390:	00050713          	mv	a4,a0
80003394:	000407b7          	lui	a5,0x40
80003398:	00f766b3          	or	a3,a4,a5
8000339c:	8003b7b7          	lui	a5,0x8003b
800033a0:	fec42703          	lw	a4,-20(s0)
800033a4:	7fc78613          	addi	a2,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
800033a8:	00070793          	mv	a5,a4
800033ac:	00479793          	slli	a5,a5,0x4
800033b0:	40e787b3          	sub	a5,a5,a4
800033b4:	00279793          	slli	a5,a5,0x2
800033b8:	00f607b3          	add	a5,a2,a5
800033bc:	00d7a423          	sw	a3,8(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:25
    ServicePipe[mySlot].header.payload_size = PKT_SERVICE_SIZE;
800033c0:	8003b7b7          	lui	a5,0x8003b
800033c4:	fec42703          	lw	a4,-20(s0)
800033c8:	7fc78693          	addi	a3,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
800033cc:	00070793          	mv	a5,a4
800033d0:	00479793          	slli	a5,a5,0x4
800033d4:	40e787b3          	sub	a5,a5,a4
800033d8:	00279793          	slli	a5,a5,0x2
800033dc:	00f687b3          	add	a5,a3,a5
800033e0:	00b00713          	li	a4,11
800033e4:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:26
    ServicePipe[mySlot].header.service      = REPOSITORY_WAKEUP;
800033e8:	8003b7b7          	lui	a5,0x8003b
800033ec:	fec42703          	lw	a4,-20(s0)
800033f0:	7fc78693          	addi	a3,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
800033f4:	00070793          	mv	a5,a4
800033f8:	00479793          	slli	a5,a5,0x4
800033fc:	40e787b3          	sub	a5,a5,a4
80003400:	00279793          	slli	a5,a5,0x2
80003404:	00f687b3          	add	a5,a3,a5
80003408:	10000713          	li	a4,256
8000340c:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:28

    API_PushSendQueue(SERVICE, mySlot);
80003410:	fec42583          	lw	a1,-20(s0)
80003414:	10100537          	lui	a0,0x10100
80003418:	768030ef          	jal	ra,80006b80 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:29
    return;    
8000341c:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:30
}
80003420:	01c12083          	lw	ra,28(sp)
80003424:	01812403          	lw	s0,24(sp)
80003428:	02010113          	addi	sp,sp,32
8000342c:	00008067          	ret

80003430 <API_AddApplication>:
API_AddApplication():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:34

////////////////////////////////////////////////////////////
// Add one Application in the Execution Queue
void API_AddApplication(unsigned int appID, unsigned int appPeriod, unsigned int appExec, unsigned int appNTasks){
80003430:	fd010113          	addi	sp,sp,-48
80003434:	02112623          	sw	ra,44(sp)
80003438:	02812423          	sw	s0,40(sp)
8000343c:	03010413          	addi	s0,sp,48
80003440:	fca42e23          	sw	a0,-36(s0)
80003444:	fcb42c23          	sw	a1,-40(s0)
80003448:	fcc42a23          	sw	a2,-44(s0)
8000344c:	fcd42823          	sw	a3,-48(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:35
    int slot = API_GetApplicationFreeSlot();
80003450:	1c4000ef          	jal	ra,80003614 <API_GetApplicationFreeSlot>
80003454:	00050793          	mv	a5,a0
80003458:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:36
    applications[slot].occupied = TRUE;
8000345c:	8003c6b7          	lui	a3,0x8003c
80003460:	fec42703          	lw	a4,-20(s0)
80003464:	00070793          	mv	a5,a4
80003468:	00279793          	slli	a5,a5,0x2
8000346c:	00e787b3          	add	a5,a5,a4
80003470:	00579793          	slli	a5,a5,0x5
80003474:	e5468713          	addi	a4,a3,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003478:	00e787b3          	add	a5,a5,a4
8000347c:	00100713          	li	a4,1
80003480:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:37
    applications[slot].appID = appID;
80003484:	8003c7b7          	lui	a5,0x8003c
80003488:	fec42703          	lw	a4,-20(s0)
8000348c:	e5478693          	addi	a3,a5,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003490:	00070793          	mv	a5,a4
80003494:	00279793          	slli	a5,a5,0x2
80003498:	00e787b3          	add	a5,a5,a4
8000349c:	00579793          	slli	a5,a5,0x5
800034a0:	00f687b3          	add	a5,a3,a5
800034a4:	fdc42703          	lw	a4,-36(s0)
800034a8:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:38
    applications[slot].appPeriod = appPeriod;
800034ac:	8003c7b7          	lui	a5,0x8003c
800034b0:	fec42703          	lw	a4,-20(s0)
800034b4:	e5478693          	addi	a3,a5,-428 # 8003be54 <__stack_top+0xfffdbdb4>
800034b8:	00070793          	mv	a5,a4
800034bc:	00279793          	slli	a5,a5,0x2
800034c0:	00e787b3          	add	a5,a5,a4
800034c4:	00579793          	slli	a5,a5,0x5
800034c8:	00f687b3          	add	a5,a3,a5
800034cc:	fd842703          	lw	a4,-40(s0)
800034d0:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:39
    applications[slot].appExec = appExec;
800034d4:	8003c7b7          	lui	a5,0x8003c
800034d8:	fec42703          	lw	a4,-20(s0)
800034dc:	e5478693          	addi	a3,a5,-428 # 8003be54 <__stack_top+0xfffdbdb4>
800034e0:	00070793          	mv	a5,a4
800034e4:	00279793          	slli	a5,a5,0x2
800034e8:	00e787b3          	add	a5,a5,a4
800034ec:	00579793          	slli	a5,a5,0x5
800034f0:	00f687b3          	add	a5,a3,a5
800034f4:	fd442703          	lw	a4,-44(s0)
800034f8:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:40
    applications[slot].numTasks = appNTasks;
800034fc:	8003c6b7          	lui	a3,0x8003c
80003500:	fec42703          	lw	a4,-20(s0)
80003504:	00070793          	mv	a5,a4
80003508:	00279793          	slli	a5,a5,0x2
8000350c:	00e787b3          	add	a5,a5,a4
80003510:	00579793          	slli	a5,a5,0x5
80003514:	e5468713          	addi	a4,a3,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003518:	00e787b3          	add	a5,a5,a4
8000351c:	fd042703          	lw	a4,-48(s0)
80003520:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:41
    applications[slot].nextRun = xTaskGetTickCount() + appPeriod;
80003524:	b28ff0ef          	jal	ra,8000284c <xTaskGetTickCount>
80003528:	00050713          	mv	a4,a0
8000352c:	fd842783          	lw	a5,-40(s0)
80003530:	00f706b3          	add	a3,a4,a5
80003534:	8003c7b7          	lui	a5,0x8003c
80003538:	fec42703          	lw	a4,-20(s0)
8000353c:	e5478613          	addi	a2,a5,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003540:	00070793          	mv	a5,a4
80003544:	00279793          	slli	a5,a5,0x2
80003548:	00e787b3          	add	a5,a5,a4
8000354c:	00579793          	slli	a5,a5,0x5
80003550:	00f607b3          	add	a5,a2,a5
80003554:	08d7a623          	sw	a3,140(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:42
    applications[slot].executed = 0;
80003558:	8003c6b7          	lui	a3,0x8003c
8000355c:	fec42703          	lw	a4,-20(s0)
80003560:	00070793          	mv	a5,a4
80003564:	00279793          	slli	a5,a5,0x2
80003568:	00e787b3          	add	a5,a5,a4
8000356c:	00579793          	slli	a5,a5,0x5
80003570:	e5468713          	addi	a4,a3,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003574:	00e787b3          	add	a5,a5,a4
80003578:	0807a823          	sw	zero,144(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:43
    applications[slot].lastStart = -1;
8000357c:	8003c7b7          	lui	a5,0x8003c
80003580:	fec42703          	lw	a4,-20(s0)
80003584:	e5478693          	addi	a3,a5,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003588:	00070793          	mv	a5,a4
8000358c:	00279793          	slli	a5,a5,0x2
80003590:	00e787b3          	add	a5,a5,a4
80003594:	00579793          	slli	a5,a5,0x5
80003598:	00f687b3          	add	a5,a3,a5
8000359c:	fff00713          	li	a4,-1
800035a0:	08e7aa23          	sw	a4,148(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:44
    applications[slot].finishedTasks = 0;
800035a4:	8003c7b7          	lui	a5,0x8003c
800035a8:	fec42703          	lw	a4,-20(s0)
800035ac:	e5478693          	addi	a3,a5,-428 # 8003be54 <__stack_top+0xfffdbdb4>
800035b0:	00070793          	mv	a5,a4
800035b4:	00279793          	slli	a5,a5,0x2
800035b8:	00e787b3          	add	a5,a5,a4
800035bc:	00579793          	slli	a5,a5,0x5
800035c0:	00f687b3          	add	a5,a3,a5
800035c4:	0807ac23          	sw	zero,152(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:45
    applications[slot].lastFinish = 0;
800035c8:	8003c7b7          	lui	a5,0x8003c
800035cc:	fec42703          	lw	a4,-20(s0)
800035d0:	e5478693          	addi	a3,a5,-428 # 8003be54 <__stack_top+0xfffdbdb4>
800035d4:	00070793          	mv	a5,a4
800035d8:	00279793          	slli	a5,a5,0x2
800035dc:	00e787b3          	add	a5,a5,a4
800035e0:	00579793          	slli	a5,a5,0x5
800035e4:	00f687b3          	add	a5,a3,a5
800035e8:	0807ae23          	sw	zero,156(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:46
    printsv("New application registered - ID: ", appID);
800035ec:	fdc42783          	lw	a5,-36(s0)
800035f0:	00078593          	mv	a1,a5
800035f4:	800097b7          	lui	a5,0x80009
800035f8:	ae878513          	addi	a0,a5,-1304 # 80008ae8 <__stack_top+0xfffa8a48>
800035fc:	7e9020ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:47
    return;
80003600:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:48
}
80003604:	02c12083          	lw	ra,44(sp)
80003608:	02812403          	lw	s0,40(sp)
8000360c:	03010113          	addi	sp,sp,48
80003610:	00008067          	ret

80003614 <API_GetApplicationFreeSlot>:
API_GetApplicationFreeSlot():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:66
}


////////////////////////////////////////////////////////////
// Gets an application slot that is free
unsigned int API_GetApplicationFreeSlot(){
80003614:	fe010113          	addi	sp,sp,-32
80003618:	00112e23          	sw	ra,28(sp)
8000361c:	00812c23          	sw	s0,24(sp)
80003620:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:68
    int i;
    for (i = 0; i < NUM_MAX_APPS; i++){
80003624:	fe042623          	sw	zero,-20(s0)
80003628:	0400006f          	j	80003668 <API_GetApplicationFreeSlot+0x54>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:69
        if (applications[i].occupied == FALSE){
8000362c:	8003c6b7          	lui	a3,0x8003c
80003630:	fec42703          	lw	a4,-20(s0)
80003634:	00070793          	mv	a5,a4
80003638:	00279793          	slli	a5,a5,0x2
8000363c:	00e787b3          	add	a5,a5,a4
80003640:	00579793          	slli	a5,a5,0x5
80003644:	e5468713          	addi	a4,a3,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003648:	00e787b3          	add	a5,a5,a4
8000364c:	0007a783          	lw	a5,0(a5)
80003650:	00079663          	bnez	a5,8000365c <API_GetApplicationFreeSlot+0x48>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:70
            return i;
80003654:	fec42783          	lw	a5,-20(s0)
80003658:	02c0006f          	j	80003684 <API_GetApplicationFreeSlot+0x70>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:68 (discriminator 2)
    for (i = 0; i < NUM_MAX_APPS; i++){
8000365c:	fec42783          	lw	a5,-20(s0)
80003660:	00178793          	addi	a5,a5,1
80003664:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:68 (discriminator 1)
80003668:	fec42703          	lw	a4,-20(s0)
8000366c:	00b00793          	li	a5,11
80003670:	fae7dee3          	ble	a4,a5,8000362c <API_GetApplicationFreeSlot+0x18>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:73
        }
    }
    prints("returning erro4\n");
80003674:	800097b7          	lui	a5,0x80009
80003678:	b2078513          	addi	a0,a5,-1248 # 80008b20 <__stack_top+0xfffa8a80>
8000367c:	6bd020ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:74
    return ERRO;
80003680:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:75
}
80003684:	00078513          	mv	a0,a5
80003688:	01c12083          	lw	ra,28(sp)
8000368c:	01812403          	lw	s0,24(sp)
80003690:	02010113          	addi	sp,sp,32
80003694:	00008067          	ret

80003698 <API_ApplicationsReset>:
API_ApplicationsReset():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:79

////////////////////////////////////////////////////////////
// Reset applications vector
void API_ApplicationsReset(){
80003698:	fe010113          	addi	sp,sp,-32
8000369c:	00812e23          	sw	s0,28(sp)
800036a0:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:81
    int i;
    for (i = 0; i < NUM_MAX_APPS; i++){
800036a4:	fe042623          	sw	zero,-20(s0)
800036a8:	0340006f          	j	800036dc <API_ApplicationsReset+0x44>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:82 (discriminator 3)
        applications[i].occupied = FALSE;
800036ac:	8003c6b7          	lui	a3,0x8003c
800036b0:	fec42703          	lw	a4,-20(s0)
800036b4:	00070793          	mv	a5,a4
800036b8:	00279793          	slli	a5,a5,0x2
800036bc:	00e787b3          	add	a5,a5,a4
800036c0:	00579793          	slli	a5,a5,0x5
800036c4:	e5468713          	addi	a4,a3,-428 # 8003be54 <__stack_top+0xfffdbdb4>
800036c8:	00e787b3          	add	a5,a5,a4
800036cc:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:81 (discriminator 3)
    for (i = 0; i < NUM_MAX_APPS; i++){
800036d0:	fec42783          	lw	a5,-20(s0)
800036d4:	00178793          	addi	a5,a5,1
800036d8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:81 (discriminator 1)
800036dc:	fec42703          	lw	a4,-20(s0)
800036e0:	00b00793          	li	a5,11
800036e4:	fce7d4e3          	ble	a4,a5,800036ac <API_ApplicationsReset+0x14>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:84
    }
    return;
800036e8:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:85
}
800036ec:	01c12403          	lw	s0,28(sp)
800036f0:	02010113          	addi	sp,sp,32
800036f4:	00008067          	ret

800036f8 <API_TilesReset>:
API_TilesReset():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:89

////////////////////////////////////////////////////////////
// Initialize the Tiles Info
void API_TilesReset(){
800036f8:	fe010113          	addi	sp,sp,-32
800036fc:	00812e23          	sw	s0,28(sp)
80003700:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:91
    int i, m, n;
    for (m = 0; m < DIM_X; m++){
80003704:	fe042623          	sw	zero,-20(s0)
80003708:	0fc0006f          	j	80003804 <API_TilesReset+0x10c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:92
        for (n = 0; n < DIM_Y; n++){
8000370c:	fe042423          	sw	zero,-24(s0)
80003710:	0dc0006f          	j	800037ec <API_TilesReset+0xf4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:93 (discriminator 3)
            Tiles[m][n].temperature = 273;
80003714:	8003c637          	lui	a2,0x8003c
80003718:	fe842783          	lw	a5,-24(s0)
8000371c:	fec42683          	lw	a3,-20(s0)
80003720:	00078713          	mv	a4,a5
80003724:	00171713          	slli	a4,a4,0x1
80003728:	00f70733          	add	a4,a4,a5
8000372c:	00271793          	slli	a5,a4,0x2
80003730:	00078713          	mv	a4,a5
80003734:	00068793          	mv	a5,a3
80003738:	00479793          	slli	a5,a5,0x4
8000373c:	40d787b3          	sub	a5,a5,a3
80003740:	00279793          	slli	a5,a5,0x2
80003744:	00f70733          	add	a4,a4,a5
80003748:	64060793          	addi	a5,a2,1600 # 8003c640 <__stack_top+0xfffdc5a0>
8000374c:	00f707b3          	add	a5,a4,a5
80003750:	11100713          	li	a4,273
80003754:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:94 (discriminator 3)
            Tiles[m][n].frequency = 1000;
80003758:	8003c737          	lui	a4,0x8003c
8000375c:	fe842783          	lw	a5,-24(s0)
80003760:	fec42683          	lw	a3,-20(s0)
80003764:	64070613          	addi	a2,a4,1600 # 8003c640 <__stack_top+0xfffdc5a0>
80003768:	00078713          	mv	a4,a5
8000376c:	00171713          	slli	a4,a4,0x1
80003770:	00f70733          	add	a4,a4,a5
80003774:	00271793          	slli	a5,a4,0x2
80003778:	00078713          	mv	a4,a5
8000377c:	00068793          	mv	a5,a3
80003780:	00479793          	slli	a5,a5,0x4
80003784:	40d787b3          	sub	a5,a5,a3
80003788:	00279793          	slli	a5,a5,0x2
8000378c:	00f707b3          	add	a5,a4,a5
80003790:	00f607b3          	add	a5,a2,a5
80003794:	3e800713          	li	a4,1000
80003798:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:95 (discriminator 3)
            Tiles[m][n].taskSlots = NUM_MAX_TASKS;
8000379c:	8003c737          	lui	a4,0x8003c
800037a0:	fe842783          	lw	a5,-24(s0)
800037a4:	fec42683          	lw	a3,-20(s0)
800037a8:	64070613          	addi	a2,a4,1600 # 8003c640 <__stack_top+0xfffdc5a0>
800037ac:	00078713          	mv	a4,a5
800037b0:	00171713          	slli	a4,a4,0x1
800037b4:	00f70733          	add	a4,a4,a5
800037b8:	00271793          	slli	a5,a4,0x2
800037bc:	00078713          	mv	a4,a5
800037c0:	00068793          	mv	a5,a3
800037c4:	00479793          	slli	a5,a5,0x4
800037c8:	40d787b3          	sub	a5,a5,a3
800037cc:	00279793          	slli	a5,a5,0x2
800037d0:	00f707b3          	add	a5,a4,a5
800037d4:	00f607b3          	add	a5,a2,a5
800037d8:	00600713          	li	a4,6
800037dc:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:92 (discriminator 3)
        for (n = 0; n < DIM_Y; n++){
800037e0:	fe842783          	lw	a5,-24(s0)
800037e4:	00178793          	addi	a5,a5,1
800037e8:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:92 (discriminator 1)
800037ec:	fe842703          	lw	a4,-24(s0)
800037f0:	00400793          	li	a5,4
800037f4:	f2e7d0e3          	ble	a4,a5,80003714 <API_TilesReset+0x1c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:91 (discriminator 2)
    for (m = 0; m < DIM_X; m++){
800037f8:	fec42783          	lw	a5,-20(s0)
800037fc:	00178793          	addi	a5,a5,1
80003800:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:91 (discriminator 1)
80003804:	fec42703          	lw	a4,-20(s0)
80003808:	00400793          	li	a5,4
8000380c:	f0e7d0e3          	ble	a4,a5,8000370c <API_TilesReset+0x14>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:101
            /*for(i = 0; i < NUM_MAX_TASKS; i++){
                Tiles[m][n].AppTask[i] = NONE;
            }*/
        }
    }    
    return;
80003810:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:102
}
80003814:	01c12403          	lw	s0,28(sp)
80003818:	02010113          	addi	sp,sp,32
8000381c:	00008067          	ret

80003820 <GeneratePatternMatrix>:
GeneratePatternMatrix():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:105

// Generates the Pattern Matrix for Pattern mapping
void GeneratePatternMatrix(){
80003820:	fe010113          	addi	sp,sp,-32
80003824:	00812e23          	sw	s0,28(sp)
80003828:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:107
    int i, aux;
    aux = 0;
8000382c:	fe042423          	sw	zero,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:108
    priorityPointer = 0;
80003830:	8003c7b7          	lui	a5,0x8003c
80003834:	6207ae23          	sw	zero,1596(a5) # 8003c63c <__stack_top+0xfffdc59c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:110
    //prints("Testando Pattern: \n");
    for(i=0; i<(DIM_X*DIM_Y); i++){
80003838:	fe042623          	sw	zero,-20(s0)
8000383c:	0700006f          	j	800038ac <GeneratePatternMatrix+0x8c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:112
        //printi(i); prints(": "); printi(aux); prints("\n");
        priorityMatrix[i] = (aux / DIM_X << 8) | aux % DIM_X;
80003840:	fe842703          	lw	a4,-24(s0)
80003844:	00500793          	li	a5,5
80003848:	02f747b3          	div	a5,a4,a5
8000384c:	00879713          	slli	a4,a5,0x8
80003850:	fe842683          	lw	a3,-24(s0)
80003854:	00500793          	li	a5,5
80003858:	02f6e7b3          	rem	a5,a3,a5
8000385c:	00f767b3          	or	a5,a4,a5
80003860:	00078693          	mv	a3,a5
80003864:	8003c7b7          	lui	a5,0x8003c
80003868:	fec42703          	lw	a4,-20(s0)
8000386c:	00271713          	slli	a4,a4,0x2
80003870:	df078793          	addi	a5,a5,-528 # 8003bdf0 <__stack_top+0xfffdbd50>
80003874:	00f707b3          	add	a5,a4,a5
80003878:	00d7a023          	sw	a3,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:131
            else{
                aux = 1;
            }
        } 
        else{
            if(aux<=((DIM_X*DIM_Y)-3))
8000387c:	fe842703          	lw	a4,-24(s0)
80003880:	01600793          	li	a5,22
80003884:	00e7ca63          	blt	a5,a4,80003898 <GeneratePatternMatrix+0x78>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:132
                aux += 2;
80003888:	fe842783          	lw	a5,-24(s0)
8000388c:	00278793          	addi	a5,a5,2
80003890:	fef42423          	sw	a5,-24(s0)
80003894:	00c0006f          	j	800038a0 <GeneratePatternMatrix+0x80>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:134
            else
                aux = 1;
80003898:	00100793          	li	a5,1
8000389c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:110 (discriminator 2)
    for(i=0; i<(DIM_X*DIM_Y); i++){
800038a0:	fec42783          	lw	a5,-20(s0)
800038a4:	00178793          	addi	a5,a5,1
800038a8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:110 (discriminator 1)
800038ac:	fec42703          	lw	a4,-20(s0)
800038b0:	01800793          	li	a5,24
800038b4:	f8e7d6e3          	ble	a4,a5,80003840 <GeneratePatternMatrix+0x20>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:137
        }    
    }
    return;
800038b8:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:138
}
800038bc:	01c12403          	lw	s0,28(sp)
800038c0:	02010113          	addi	sp,sp,32
800038c4:	00008067          	ret

800038c8 <API_AllocateTasks>:
API_AllocateTasks():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:141

// Checks if there is some task to allocate...
void API_AllocateTasks(unsigned int tick){
800038c8:	fd010113          	addi	sp,sp,-48
800038cc:	02112623          	sw	ra,44(sp)
800038d0:	02812423          	sw	s0,40(sp)
800038d4:	02912223          	sw	s1,36(sp)
800038d8:	03010413          	addi	s0,sp,48
800038dc:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:145
    int i, j;
    int addr, slot;
    // Iterate around every possible application
    for (i = 0; i < NUM_MAX_APPS; i++){
800038e0:	fe042623          	sw	zero,-20(s0)
800038e4:	2980006f          	j	80003b7c <API_AllocateTasks+0x2b4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:147
        // If the application is valid
        if (applications[i].occupied == TRUE){
800038e8:	8003c6b7          	lui	a3,0x8003c
800038ec:	fec42703          	lw	a4,-20(s0)
800038f0:	00070793          	mv	a5,a4
800038f4:	00279793          	slli	a5,a5,0x2
800038f8:	00e787b3          	add	a5,a5,a4
800038fc:	00579793          	slli	a5,a5,0x5
80003900:	e5468713          	addi	a4,a3,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003904:	00e787b3          	add	a5,a5,a4
80003908:	0007a703          	lw	a4,0(a5)
8000390c:	00100793          	li	a5,1
80003910:	26f71063          	bne	a4,a5,80003b70 <API_AllocateTasks+0x2a8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:150

            // If the nextRun of this application is right now, then release each task!
            if(applications[i].nextRun <= tick && applications[i].nextRun != applications[i].lastStart){
80003914:	8003c7b7          	lui	a5,0x8003c
80003918:	fec42703          	lw	a4,-20(s0)
8000391c:	e5478693          	addi	a3,a5,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003920:	00070793          	mv	a5,a4
80003924:	00279793          	slli	a5,a5,0x2
80003928:	00e787b3          	add	a5,a5,a4
8000392c:	00579793          	slli	a5,a5,0x5
80003930:	00f687b3          	add	a5,a3,a5
80003934:	08c7a783          	lw	a5,140(a5)
80003938:	fdc42703          	lw	a4,-36(s0)
8000393c:	22f76a63          	bltu	a4,a5,80003b70 <API_AllocateTasks+0x2a8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:150 (discriminator 1)
80003940:	8003c7b7          	lui	a5,0x8003c
80003944:	fec42703          	lw	a4,-20(s0)
80003948:	e5478693          	addi	a3,a5,-428 # 8003be54 <__stack_top+0xfffdbdb4>
8000394c:	00070793          	mv	a5,a4
80003950:	00279793          	slli	a5,a5,0x2
80003954:	00e787b3          	add	a5,a5,a4
80003958:	00579793          	slli	a5,a5,0x5
8000395c:	00f687b3          	add	a5,a3,a5
80003960:	08c7a683          	lw	a3,140(a5)
80003964:	8003c7b7          	lui	a5,0x8003c
80003968:	fec42703          	lw	a4,-20(s0)
8000396c:	e5478613          	addi	a2,a5,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003970:	00070793          	mv	a5,a4
80003974:	00279793          	slli	a5,a5,0x2
80003978:	00e787b3          	add	a5,a5,a4
8000397c:	00579793          	slli	a5,a5,0x5
80003980:	00f607b3          	add	a5,a2,a5
80003984:	0947a783          	lw	a5,148(a5)
80003988:	1ef68463          	beq	a3,a5,80003b70 <API_AllocateTasks+0x2a8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:153

                // If the system has space to accept every task
                if(applications[i].numTasks <= API_GetSystemTasksSlots()){
8000398c:	8003c6b7          	lui	a3,0x8003c
80003990:	fec42703          	lw	a4,-20(s0)
80003994:	00070793          	mv	a5,a4
80003998:	00279793          	slli	a5,a5,0x2
8000399c:	00e787b3          	add	a5,a5,a4
800039a0:	00579793          	slli	a5,a5,0x5
800039a4:	e5468713          	addi	a4,a3,-428 # 8003be54 <__stack_top+0xfffdbdb4>
800039a8:	00e787b3          	add	a5,a5,a4
800039ac:	0107a483          	lw	s1,16(a5)
800039b0:	191000ef          	jal	ra,80004340 <API_GetSystemTasksSlots>
800039b4:	00050793          	mv	a5,a0
800039b8:	1a97ec63          	bltu	a5,s1,80003b70 <API_AllocateTasks+0x2a8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:156
                    
                    // Iterates around each task of this application
                    for(j = 0; j < applications[i].numTasks; j++){
800039bc:	fe042423          	sw	zero,-24(s0)
800039c0:	13c0006f          	j	80003afc <API_AllocateTasks+0x234>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:159

                        for(;;){
                            addr = getNextPriorityAddr();
800039c4:	5ac000ef          	jal	ra,80003f70 <getNextPriorityAddr>
800039c8:	00050793          	mv	a5,a0
800039cc:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:160
                            slot = API_GetTaskSlotFromTile(addr, i, j);
800039d0:	fe442783          	lw	a5,-28(s0)
800039d4:	fec42703          	lw	a4,-20(s0)
800039d8:	fe842683          	lw	a3,-24(s0)
800039dc:	00068613          	mv	a2,a3
800039e0:	00070593          	mv	a1,a4
800039e4:	00078513          	mv	a0,a5
800039e8:	6bc000ef          	jal	ra,800040a4 <API_GetTaskSlotFromTile>
800039ec:	00050793          	mv	a5,a0
800039f0:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:161
                            if (slot != ERRO)
800039f4:	fe042703          	lw	a4,-32(s0)
800039f8:	fff00793          	li	a5,-1
800039fc:	00f71463          	bne	a4,a5,80003a04 <API_AllocateTasks+0x13c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:159
                            addr = getNextPriorityAddr();
80003a00:	fc5ff06f          	j	800039c4 <API_AllocateTasks+0xfc>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:162
                                break;
80003a04:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:164
                        }
                        applications[i].tasks[j].status = TASK_ALLOCATING;
80003a08:	8003c737          	lui	a4,0x8003c
80003a0c:	fe842783          	lw	a5,-24(s0)
80003a10:	fec42683          	lw	a3,-20(s0)
80003a14:	e5470613          	addi	a2,a4,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003a18:	00078713          	mv	a4,a5
80003a1c:	00171713          	slli	a4,a4,0x1
80003a20:	00f70733          	add	a4,a4,a5
80003a24:	00271793          	slli	a5,a4,0x2
80003a28:	00078713          	mv	a4,a5
80003a2c:	00068793          	mv	a5,a3
80003a30:	00279793          	slli	a5,a5,0x2
80003a34:	00d787b3          	add	a5,a5,a3
80003a38:	00579793          	slli	a5,a5,0x5
80003a3c:	00f707b3          	add	a5,a4,a5
80003a40:	00f607b3          	add	a5,a2,a5
80003a44:	00300713          	li	a4,3
80003a48:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:165
                        applications[i].tasks[j].addr = addr;
80003a4c:	fe442603          	lw	a2,-28(s0)
80003a50:	8003c737          	lui	a4,0x8003c
80003a54:	fe842783          	lw	a5,-24(s0)
80003a58:	fec42683          	lw	a3,-20(s0)
80003a5c:	e5470593          	addi	a1,a4,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003a60:	00078713          	mv	a4,a5
80003a64:	00171713          	slli	a4,a4,0x1
80003a68:	00f70733          	add	a4,a4,a5
80003a6c:	00271793          	slli	a5,a4,0x2
80003a70:	00078713          	mv	a4,a5
80003a74:	00068793          	mv	a5,a3
80003a78:	00279793          	slli	a5,a5,0x2
80003a7c:	00d787b3          	add	a5,a5,a3
80003a80:	00579793          	slli	a5,a5,0x5
80003a84:	00f707b3          	add	a5,a4,a5
80003a88:	00f587b3          	add	a5,a1,a5
80003a8c:	00c7ac23          	sw	a2,24(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:166
                        applications[i].tasks[j].slot = slot;
80003a90:	fe042603          	lw	a2,-32(s0)
80003a94:	8003c737          	lui	a4,0x8003c
80003a98:	fe842783          	lw	a5,-24(s0)
80003a9c:	fec42683          	lw	a3,-20(s0)
80003aa0:	e5470593          	addi	a1,a4,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003aa4:	00078713          	mv	a4,a5
80003aa8:	00171713          	slli	a4,a4,0x1
80003aac:	00f70733          	add	a4,a4,a5
80003ab0:	00271793          	slli	a5,a4,0x2
80003ab4:	00078713          	mv	a4,a5
80003ab8:	00068793          	mv	a5,a3
80003abc:	00279793          	slli	a5,a5,0x2
80003ac0:	00d787b3          	add	a5,a5,a3
80003ac4:	00579793          	slli	a5,a5,0x5
80003ac8:	00f707b3          	add	a5,a4,a5
80003acc:	00f587b3          	add	a5,a1,a5
80003ad0:	00c7ae23          	sw	a2,28(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:167
                        API_RepositoryAllocation(i, j, addr);
80003ad4:	fec42783          	lw	a5,-20(s0)
80003ad8:	fe842703          	lw	a4,-24(s0)
80003adc:	fe442683          	lw	a3,-28(s0)
80003ae0:	00068613          	mv	a2,a3
80003ae4:	00070593          	mv	a1,a4
80003ae8:	00078513          	mv	a0,a5
80003aec:	141000ef          	jal	ra,8000442c <API_RepositoryAllocation>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:156
                    for(j = 0; j < applications[i].numTasks; j++){
80003af0:	fe842783          	lw	a5,-24(s0)
80003af4:	00178793          	addi	a5,a5,1
80003af8:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:156 (discriminator 1)
80003afc:	8003c6b7          	lui	a3,0x8003c
80003b00:	fec42703          	lw	a4,-20(s0)
80003b04:	00070793          	mv	a5,a4
80003b08:	00279793          	slli	a5,a5,0x2
80003b0c:	00e787b3          	add	a5,a5,a4
80003b10:	00579793          	slli	a5,a5,0x5
80003b14:	e5468713          	addi	a4,a3,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003b18:	00e787b3          	add	a5,a5,a4
80003b1c:	0107a703          	lw	a4,16(a5)
80003b20:	fe842783          	lw	a5,-24(s0)
80003b24:	eae7e0e3          	bltu	a5,a4,800039c4 <API_AllocateTasks+0xfc>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:171
                    }

                    // Resets the lastStart
                    applications[i].lastStart = applications[i].nextRun;
80003b28:	8003c7b7          	lui	a5,0x8003c
80003b2c:	fec42703          	lw	a4,-20(s0)
80003b30:	e5478693          	addi	a3,a5,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003b34:	00070793          	mv	a5,a4
80003b38:	00279793          	slli	a5,a5,0x2
80003b3c:	00e787b3          	add	a5,a5,a4
80003b40:	00579793          	slli	a5,a5,0x5
80003b44:	00f687b3          	add	a5,a3,a5
80003b48:	08c7a683          	lw	a3,140(a5)
80003b4c:	8003c7b7          	lui	a5,0x8003c
80003b50:	fec42703          	lw	a4,-20(s0)
80003b54:	e5478613          	addi	a2,a5,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003b58:	00070793          	mv	a5,a4
80003b5c:	00279793          	slli	a5,a5,0x2
80003b60:	00e787b3          	add	a5,a5,a4
80003b64:	00579793          	slli	a5,a5,0x5
80003b68:	00f607b3          	add	a5,a2,a5
80003b6c:	08d7aa23          	sw	a3,148(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:145 (discriminator 2)
    for (i = 0; i < NUM_MAX_APPS; i++){
80003b70:	fec42783          	lw	a5,-20(s0)
80003b74:	00178793          	addi	a5,a5,1
80003b78:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:145 (discriminator 1)
80003b7c:	fec42703          	lw	a4,-20(s0)
80003b80:	00b00793          	li	a5,11
80003b84:	d6e7d2e3          	ble	a4,a5,800038e8 <API_AllocateTasks+0x20>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:177
                }
            }
        }
    }

    return;
80003b88:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:178
}
80003b8c:	02c12083          	lw	ra,44(sp)
80003b90:	02812403          	lw	s0,40(sp)
80003b94:	02412483          	lw	s1,36(sp)
80003b98:	03010113          	addi	sp,sp,48
80003b9c:	00008067          	ret

80003ba0 <API_DealocateTask>:
API_DealocateTask():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:180

void API_DealocateTask(unsigned int task_id, unsigned int app_id){
80003ba0:	fd010113          	addi	sp,sp,-48
80003ba4:	02112623          	sw	ra,44(sp)
80003ba8:	02812423          	sw	s0,40(sp)
80003bac:	03010413          	addi	s0,sp,48
80003bb0:	fca42e23          	sw	a0,-36(s0)
80003bb4:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:183
    unsigned int i, tick;
    volatile int flag;
    applications[app_id].tasks[task_id].status = TASK_FINISHED;
80003bb8:	8003c737          	lui	a4,0x8003c
80003bbc:	fdc42783          	lw	a5,-36(s0)
80003bc0:	fd842683          	lw	a3,-40(s0)
80003bc4:	e5470613          	addi	a2,a4,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003bc8:	00078713          	mv	a4,a5
80003bcc:	00171713          	slli	a4,a4,0x1
80003bd0:	00f70733          	add	a4,a4,a5
80003bd4:	00271793          	slli	a5,a4,0x2
80003bd8:	00078713          	mv	a4,a5
80003bdc:	00068793          	mv	a5,a3
80003be0:	00279793          	slli	a5,a5,0x2
80003be4:	00d787b3          	add	a5,a5,a3
80003be8:	00579793          	slli	a5,a5,0x5
80003bec:	00f707b3          	add	a5,a4,a5
80003bf0:	00f607b3          	add	a5,a2,a5
80003bf4:	00200713          	li	a4,2
80003bf8:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:185
    // verify if every task has finished
    flag = 1;
80003bfc:	00100793          	li	a5,1
80003c00:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:186
    for (i = 0; i < applications[app_id].numTasks; i++){
80003c04:	fe042623          	sw	zero,-20(s0)
80003c08:	0d00006f          	j	80003cd8 <API_DealocateTask+0x138>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:187
        printsvsv("checking ", i, "task is: ", applications[app_id].tasks[i].status);
80003c0c:	fec42583          	lw	a1,-20(s0)
80003c10:	8003c737          	lui	a4,0x8003c
80003c14:	fec42783          	lw	a5,-20(s0)
80003c18:	fd842683          	lw	a3,-40(s0)
80003c1c:	e5470613          	addi	a2,a4,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003c20:	00078713          	mv	a4,a5
80003c24:	00171713          	slli	a4,a4,0x1
80003c28:	00f70733          	add	a4,a4,a5
80003c2c:	00271793          	slli	a5,a4,0x2
80003c30:	00078713          	mv	a4,a5
80003c34:	00068793          	mv	a5,a3
80003c38:	00279793          	slli	a5,a5,0x2
80003c3c:	00d787b3          	add	a5,a5,a3
80003c40:	00579793          	slli	a5,a5,0x5
80003c44:	00f707b3          	add	a5,a4,a5
80003c48:	00f607b3          	add	a5,a2,a5
80003c4c:	0147a783          	lw	a5,20(a5)
80003c50:	00078693          	mv	a3,a5
80003c54:	800097b7          	lui	a5,0x80009
80003c58:	b3478613          	addi	a2,a5,-1228 # 80008b34 <__stack_top+0xfffa8a94>
80003c5c:	800097b7          	lui	a5,0x80009
80003c60:	b4078513          	addi	a0,a5,-1216 # 80008b40 <__stack_top+0xfffa8aa0>
80003c64:	1c9020ef          	jal	ra,8000662c <printsvsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:188
        printsv("from app: ", app_id);
80003c68:	fd842783          	lw	a5,-40(s0)
80003c6c:	00078593          	mv	a1,a5
80003c70:	800097b7          	lui	a5,0x80009
80003c74:	b4c78513          	addi	a0,a5,-1204 # 80008b4c <__stack_top+0xfffa8aac>
80003c78:	16d020ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:189
        if(applications[app_id].tasks[i].status != TASK_FINISHED){
80003c7c:	8003c737          	lui	a4,0x8003c
80003c80:	fec42783          	lw	a5,-20(s0)
80003c84:	fd842683          	lw	a3,-40(s0)
80003c88:	e5470613          	addi	a2,a4,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003c8c:	00078713          	mv	a4,a5
80003c90:	00171713          	slli	a4,a4,0x1
80003c94:	00f70733          	add	a4,a4,a5
80003c98:	00271793          	slli	a5,a4,0x2
80003c9c:	00078713          	mv	a4,a5
80003ca0:	00068793          	mv	a5,a3
80003ca4:	00279793          	slli	a5,a5,0x2
80003ca8:	00d787b3          	add	a5,a5,a3
80003cac:	00579793          	slli	a5,a5,0x5
80003cb0:	00f707b3          	add	a5,a4,a5
80003cb4:	00f607b3          	add	a5,a2,a5
80003cb8:	0147a703          	lw	a4,20(a5)
80003cbc:	00200793          	li	a5,2
80003cc0:	00f70663          	beq	a4,a5,80003ccc <API_DealocateTask+0x12c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:190
            flag = 0;
80003cc4:	fe042223          	sw	zero,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:191
            break;
80003cc8:	03c0006f          	j	80003d04 <API_DealocateTask+0x164>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:186 (discriminator 2)
    for (i = 0; i < applications[app_id].numTasks; i++){
80003ccc:	fec42783          	lw	a5,-20(s0)
80003cd0:	00178793          	addi	a5,a5,1
80003cd4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:186 (discriminator 1)
80003cd8:	8003c6b7          	lui	a3,0x8003c
80003cdc:	fd842703          	lw	a4,-40(s0)
80003ce0:	00070793          	mv	a5,a4
80003ce4:	00279793          	slli	a5,a5,0x2
80003ce8:	00e787b3          	add	a5,a5,a4
80003cec:	00579793          	slli	a5,a5,0x5
80003cf0:	e5468713          	addi	a4,a3,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003cf4:	00e787b3          	add	a5,a5,a4
80003cf8:	0107a783          	lw	a5,16(a5)
80003cfc:	fec42703          	lw	a4,-20(s0)
80003d00:	f0f766e3          	bltu	a4,a5,80003c0c <API_DealocateTask+0x6c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:195
        }
    }
    // in positive case
    if(flag){
80003d04:	fe442783          	lw	a5,-28(s0)
80003d08:	24078663          	beqz	a5,80003f54 <API_DealocateTask+0x3b4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:197
        // register that the application has executed another time
        tick = xTaskGetTickCount();
80003d0c:	b41fe0ef          	jal	ra,8000284c <xTaskGetTickCount>
80003d10:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:198
        applications[app_id].executed++;
80003d14:	8003c6b7          	lui	a3,0x8003c
80003d18:	fd842703          	lw	a4,-40(s0)
80003d1c:	00070793          	mv	a5,a4
80003d20:	00279793          	slli	a5,a5,0x2
80003d24:	00e787b3          	add	a5,a5,a4
80003d28:	00579793          	slli	a5,a5,0x5
80003d2c:	e5468713          	addi	a4,a3,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003d30:	00e787b3          	add	a5,a5,a4
80003d34:	0907a783          	lw	a5,144(a5)
80003d38:	00178693          	addi	a3,a5,1
80003d3c:	8003c637          	lui	a2,0x8003c
80003d40:	fd842703          	lw	a4,-40(s0)
80003d44:	00070793          	mv	a5,a4
80003d48:	00279793          	slli	a5,a5,0x2
80003d4c:	00e787b3          	add	a5,a5,a4
80003d50:	00579793          	slli	a5,a5,0x5
80003d54:	e5460713          	addi	a4,a2,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003d58:	00e787b3          	add	a5,a5,a4
80003d5c:	08d7a823          	sw	a3,144(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:199
        printsvsv("Application ", app_id, "was executed in ", (tick - applications[app_id].lastStart));
80003d60:	fd842583          	lw	a1,-40(s0)
80003d64:	8003c7b7          	lui	a5,0x8003c
80003d68:	fd842703          	lw	a4,-40(s0)
80003d6c:	e5478693          	addi	a3,a5,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003d70:	00070793          	mv	a5,a4
80003d74:	00279793          	slli	a5,a5,0x2
80003d78:	00e787b3          	add	a5,a5,a4
80003d7c:	00579793          	slli	a5,a5,0x5
80003d80:	00f687b3          	add	a5,a3,a5
80003d84:	0947a783          	lw	a5,148(a5)
80003d88:	fe842703          	lw	a4,-24(s0)
80003d8c:	40f707b3          	sub	a5,a4,a5
80003d90:	00078693          	mv	a3,a5
80003d94:	800097b7          	lui	a5,0x80009
80003d98:	b5878613          	addi	a2,a5,-1192 # 80008b58 <__stack_top+0xfffa8ab8>
80003d9c:	800097b7          	lui	a5,0x80009
80003da0:	b6c78513          	addi	a0,a5,-1172 # 80008b6c <__stack_top+0xfffa8acc>
80003da4:	089020ef          	jal	ra,8000662c <printsvsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:200
        applications[app_id].lastFinish = tick;
80003da8:	8003c7b7          	lui	a5,0x8003c
80003dac:	fd842703          	lw	a4,-40(s0)
80003db0:	e5478693          	addi	a3,a5,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003db4:	00070793          	mv	a5,a4
80003db8:	00279793          	slli	a5,a5,0x2
80003dbc:	00e787b3          	add	a5,a5,a4
80003dc0:	00579793          	slli	a5,a5,0x5
80003dc4:	00f687b3          	add	a5,a3,a5
80003dc8:	fe842703          	lw	a4,-24(s0)
80003dcc:	08e7ae23          	sw	a4,156(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:202
        // if the application must run another time
        if(applications[app_id].appExec > applications[app_id].executed){
80003dd0:	8003c7b7          	lui	a5,0x8003c
80003dd4:	fd842703          	lw	a4,-40(s0)
80003dd8:	e5478693          	addi	a3,a5,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003ddc:	00070793          	mv	a5,a4
80003de0:	00279793          	slli	a5,a5,0x2
80003de4:	00e787b3          	add	a5,a5,a4
80003de8:	00579793          	slli	a5,a5,0x5
80003dec:	00f687b3          	add	a5,a3,a5
80003df0:	00c7a683          	lw	a3,12(a5)
80003df4:	8003c637          	lui	a2,0x8003c
80003df8:	fd842703          	lw	a4,-40(s0)
80003dfc:	00070793          	mv	a5,a4
80003e00:	00279793          	slli	a5,a5,0x2
80003e04:	00e787b3          	add	a5,a5,a4
80003e08:	00579793          	slli	a5,a5,0x5
80003e0c:	e5460713          	addi	a4,a2,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003e10:	00e787b3          	add	a5,a5,a4
80003e14:	0907a783          	lw	a5,144(a5)
80003e18:	0ad7fa63          	bleu	a3,a5,80003ecc <API_DealocateTask+0x32c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:203
            printsv("\t\tThis application still need to run: ", (applications[app_id].appExec - applications[app_id].executed));
80003e1c:	8003c7b7          	lui	a5,0x8003c
80003e20:	fd842703          	lw	a4,-40(s0)
80003e24:	e5478693          	addi	a3,a5,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003e28:	00070793          	mv	a5,a4
80003e2c:	00279793          	slli	a5,a5,0x2
80003e30:	00e787b3          	add	a5,a5,a4
80003e34:	00579793          	slli	a5,a5,0x5
80003e38:	00f687b3          	add	a5,a3,a5
80003e3c:	00c7a683          	lw	a3,12(a5)
80003e40:	8003c637          	lui	a2,0x8003c
80003e44:	fd842703          	lw	a4,-40(s0)
80003e48:	00070793          	mv	a5,a4
80003e4c:	00279793          	slli	a5,a5,0x2
80003e50:	00e787b3          	add	a5,a5,a4
80003e54:	00579793          	slli	a5,a5,0x5
80003e58:	e5460713          	addi	a4,a2,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003e5c:	00e787b3          	add	a5,a5,a4
80003e60:	0907a783          	lw	a5,144(a5)
80003e64:	40f687b3          	sub	a5,a3,a5
80003e68:	00078593          	mv	a1,a5
80003e6c:	800097b7          	lui	a5,0x80009
80003e70:	b7c78513          	addi	a0,a5,-1156 # 80008b7c <__stack_top+0xfffa8adc>
80003e74:	770020ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:204
            applications[app_id].nextRun = tick + applications[app_id].appPeriod;
80003e78:	8003c7b7          	lui	a5,0x8003c
80003e7c:	fd842703          	lw	a4,-40(s0)
80003e80:	e5478693          	addi	a3,a5,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003e84:	00070793          	mv	a5,a4
80003e88:	00279793          	slli	a5,a5,0x2
80003e8c:	00e787b3          	add	a5,a5,a4
80003e90:	00579793          	slli	a5,a5,0x5
80003e94:	00f687b3          	add	a5,a3,a5
80003e98:	0087a703          	lw	a4,8(a5)
80003e9c:	fe842783          	lw	a5,-24(s0)
80003ea0:	00f706b3          	add	a3,a4,a5
80003ea4:	8003c7b7          	lui	a5,0x8003c
80003ea8:	fd842703          	lw	a4,-40(s0)
80003eac:	e5478613          	addi	a2,a5,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003eb0:	00070793          	mv	a5,a4
80003eb4:	00279793          	slli	a5,a5,0x2
80003eb8:	00e787b3          	add	a5,a5,a4
80003ebc:	00579793          	slli	a5,a5,0x5
80003ec0:	00f607b3          	add	a5,a2,a5
80003ec4:	08d7a623          	sw	a3,140(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:219
            }
            API_SystemFinish = TRUE;
            //_exit(0xfe10);
        }        
    }
    return;
80003ec8:	08c0006f          	j	80003f54 <API_DealocateTask+0x3b4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:206
            prints("\t\tThis application is DONE!\n");
80003ecc:	800097b7          	lui	a5,0x80009
80003ed0:	ba478513          	addi	a0,a5,-1116 # 80008ba4 <__stack_top+0xfffa8b04>
80003ed4:	664020ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:207
            applications[app_id].occupied = FALSE;
80003ed8:	8003c6b7          	lui	a3,0x8003c
80003edc:	fd842703          	lw	a4,-40(s0)
80003ee0:	00070793          	mv	a5,a4
80003ee4:	00279793          	slli	a5,a5,0x2
80003ee8:	00e787b3          	add	a5,a5,a4
80003eec:	00579793          	slli	a5,a5,0x5
80003ef0:	e5468713          	addi	a4,a3,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003ef4:	00e787b3          	add	a5,a5,a4
80003ef8:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:210
            for(i = 0; i < NUM_MAX_APPS; i++){
80003efc:	fe042623          	sw	zero,-20(s0)
80003f00:	03c0006f          	j	80003f3c <API_DealocateTask+0x39c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:211
                if (applications[i].occupied == TRUE){
80003f04:	8003c6b7          	lui	a3,0x8003c
80003f08:	fec42703          	lw	a4,-20(s0)
80003f0c:	00070793          	mv	a5,a4
80003f10:	00279793          	slli	a5,a5,0x2
80003f14:	00e787b3          	add	a5,a5,a4
80003f18:	00579793          	slli	a5,a5,0x5
80003f1c:	e5468713          	addi	a4,a3,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80003f20:	00e787b3          	add	a5,a5,a4
80003f24:	0007a703          	lw	a4,0(a5)
80003f28:	00100793          	li	a5,1
80003f2c:	02f70863          	beq	a4,a5,80003f5c <API_DealocateTask+0x3bc>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:210 (discriminator 2)
            for(i = 0; i < NUM_MAX_APPS; i++){
80003f30:	fec42783          	lw	a5,-20(s0)
80003f34:	00178793          	addi	a5,a5,1
80003f38:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:210 (discriminator 1)
80003f3c:	fec42703          	lw	a4,-20(s0)
80003f40:	00b00793          	li	a5,11
80003f44:	fce7f0e3          	bleu	a4,a5,80003f04 <API_DealocateTask+0x364>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:215
            API_SystemFinish = TRUE;
80003f48:	00100713          	li	a4,1
80003f4c:	98e1a823          	sw	a4,-1648(gp) # 80009720 <API_SystemFinish>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:219
    return;
80003f50:	00000013          	nop
80003f54:	00000013          	nop
80003f58:	0080006f          	j	80003f60 <API_DealocateTask+0x3c0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:212
                    return;
80003f5c:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:220
}
80003f60:	02c12083          	lw	ra,44(sp)
80003f64:	02812403          	lw	s0,40(sp)
80003f68:	03010113          	addi	sp,sp,48
80003f6c:	00008067          	ret

80003f70 <getNextPriorityAddr>:
getNextPriorityAddr():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:223

// Gets the address of the next tile in the priority list 
unsigned int getNextPriorityAddr(){
80003f70:	fe010113          	addi	sp,sp,-32
80003f74:	00112e23          	sw	ra,28(sp)
80003f78:	00812c23          	sw	s0,24(sp)
80003f7c:	00912a23          	sw	s1,20(sp)
80003f80:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:225
    int i;
    unsigned int addr = makeAddress(0,0);
80003f84:	00000593          	li	a1,0
80003f88:	00000513          	li	a0,0
80003f8c:	3b5020ef          	jal	ra,80006b40 <makeAddress>
80003f90:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:228
    for(;;){
        // Checks if it's a valid address
        if (priorityMatrix[priorityPointer] != makeAddress(0,0)){
80003f94:	8003c7b7          	lui	a5,0x8003c
80003f98:	63c7a703          	lw	a4,1596(a5) # 8003c63c <__stack_top+0xfffdc59c>
80003f9c:	8003c7b7          	lui	a5,0x8003c
80003fa0:	00271713          	slli	a4,a4,0x2
80003fa4:	df078793          	addi	a5,a5,-528 # 8003bdf0 <__stack_top+0xfffdbd50>
80003fa8:	00f707b3          	add	a5,a4,a5
80003fac:	0007a483          	lw	s1,0(a5)
80003fb0:	00000593          	li	a1,0
80003fb4:	00000513          	li	a0,0
80003fb8:	389020ef          	jal	ra,80006b40 <makeAddress>
80003fbc:	00050793          	mv	a5,a0
80003fc0:	06f48e63          	beq	s1,a5,8000403c <getNextPriorityAddr+0xcc>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:229
            if (Tiles[getXpos(addr)][getYpos(addr)].taskSlots > 0){
80003fc4:	fec42503          	lw	a0,-20(s0)
80003fc8:	6c4020ef          	jal	ra,8000668c <getXpos>
80003fcc:	00050493          	mv	s1,a0
80003fd0:	fec42503          	lw	a0,-20(s0)
80003fd4:	6e4020ef          	jal	ra,800066b8 <getYpos>
80003fd8:	00050613          	mv	a2,a0
80003fdc:	8003c7b7          	lui	a5,0x8003c
80003fe0:	64078693          	addi	a3,a5,1600 # 8003c640 <__stack_top+0xfffdc5a0>
80003fe4:	00060713          	mv	a4,a2
80003fe8:	00171793          	slli	a5,a4,0x1
80003fec:	00078713          	mv	a4,a5
80003ff0:	00c70733          	add	a4,a4,a2
80003ff4:	00271793          	slli	a5,a4,0x2
80003ff8:	00078713          	mv	a4,a5
80003ffc:	00048793          	mv	a5,s1
80004000:	00479793          	slli	a5,a5,0x4
80004004:	409787b3          	sub	a5,a5,s1
80004008:	00279793          	slli	a5,a5,0x2
8000400c:	00f707b3          	add	a5,a4,a5
80004010:	00f687b3          	add	a5,a3,a5
80004014:	0087a783          	lw	a5,8(a5)
80004018:	02078263          	beqz	a5,8000403c <getNextPriorityAddr+0xcc>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:232
            //for(i = 0; i < NUM_MAX_TASKS; i++){
                //if (Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] == NONE)
                    addr = priorityMatrix[priorityPointer];
8000401c:	8003c7b7          	lui	a5,0x8003c
80004020:	63c7a703          	lw	a4,1596(a5) # 8003c63c <__stack_top+0xfffdc59c>
80004024:	8003c7b7          	lui	a5,0x8003c
80004028:	00271713          	slli	a4,a4,0x2
8000402c:	df078793          	addi	a5,a5,-528 # 8003bdf0 <__stack_top+0xfffdbd50>
80004030:	00f707b3          	add	a5,a4,a5
80004034:	0007a783          	lw	a5,0(a5)
80004038:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:238
            //}
            }
        }

        // Increments the priorityPointer
        priorityPointer++;
8000403c:	8003c7b7          	lui	a5,0x8003c
80004040:	63c7a783          	lw	a5,1596(a5) # 8003c63c <__stack_top+0xfffdc59c>
80004044:	00178713          	addi	a4,a5,1
80004048:	8003c7b7          	lui	a5,0x8003c
8000404c:	62e7ae23          	sw	a4,1596(a5) # 8003c63c <__stack_top+0xfffdc59c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:239
        if (priorityPointer == DIM_X*DIM_Y)
80004050:	8003c7b7          	lui	a5,0x8003c
80004054:	63c7a703          	lw	a4,1596(a5) # 8003c63c <__stack_top+0xfffdc59c>
80004058:	01900793          	li	a5,25
8000405c:	00f71663          	bne	a4,a5,80004068 <getNextPriorityAddr+0xf8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:240
            priorityPointer = 0;
80004060:	8003c7b7          	lui	a5,0x8003c
80004064:	6207ae23          	sw	zero,1596(a5) # 8003c63c <__stack_top+0xfffdc59c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:243

        // If we found a new valid address, return
        if( addr != makeAddress(0,0))
80004068:	00000593          	li	a1,0
8000406c:	00000513          	li	a0,0
80004070:	2d1020ef          	jal	ra,80006b40 <makeAddress>
80004074:	00050713          	mv	a4,a0
80004078:	fec42783          	lw	a5,-20(s0)
8000407c:	00e79463          	bne	a5,a4,80004084 <getNextPriorityAddr+0x114>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:228
        if (priorityMatrix[priorityPointer] != makeAddress(0,0)){
80004080:	f15ff06f          	j	80003f94 <getNextPriorityAddr+0x24>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:244
            break;
80004084:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:246
    }
    return addr;
80004088:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:248
    //return 0x101;
}
8000408c:	00078513          	mv	a0,a5
80004090:	01c12083          	lw	ra,28(sp)
80004094:	01812403          	lw	s0,24(sp)
80004098:	01412483          	lw	s1,20(sp)
8000409c:	02010113          	addi	sp,sp,32
800040a0:	00008067          	ret

800040a4 <API_GetTaskSlotFromTile>:
API_GetTaskSlotFromTile():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:251

// Gets a free slot from one given tile
unsigned int API_GetTaskSlotFromTile(unsigned int addr, unsigned int app, unsigned int task){
800040a4:	fe010113          	addi	sp,sp,-32
800040a8:	00112e23          	sw	ra,28(sp)
800040ac:	00812c23          	sw	s0,24(sp)
800040b0:	00912a23          	sw	s1,20(sp)
800040b4:	01212823          	sw	s2,16(sp)
800040b8:	02010413          	addi	s0,sp,32
800040bc:	fea42623          	sw	a0,-20(s0)
800040c0:	feb42423          	sw	a1,-24(s0)
800040c4:	fec42223          	sw	a2,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:261
            printsv("\t achei!! > ", i);
            Tiles[getXpos(addr)][getYpos(addr)].AppTask[i] = (app << 16) | task;
            return i;
        }
    }*/
    if(Tiles[getXpos(addr)][getYpos(addr)].taskSlots > 0){
800040c8:	fec42503          	lw	a0,-20(s0)
800040cc:	5c0020ef          	jal	ra,8000668c <getXpos>
800040d0:	00050493          	mv	s1,a0
800040d4:	fec42503          	lw	a0,-20(s0)
800040d8:	5e0020ef          	jal	ra,800066b8 <getYpos>
800040dc:	00050613          	mv	a2,a0
800040e0:	8003c7b7          	lui	a5,0x8003c
800040e4:	64078693          	addi	a3,a5,1600 # 8003c640 <__stack_top+0xfffdc5a0>
800040e8:	00060713          	mv	a4,a2
800040ec:	00171793          	slli	a5,a4,0x1
800040f0:	00078713          	mv	a4,a5
800040f4:	00c70733          	add	a4,a4,a2
800040f8:	00271793          	slli	a5,a4,0x2
800040fc:	00078713          	mv	a4,a5
80004100:	00048793          	mv	a5,s1
80004104:	00479793          	slli	a5,a5,0x4
80004108:	409787b3          	sub	a5,a5,s1
8000410c:	00279793          	slli	a5,a5,0x2
80004110:	00f707b3          	add	a5,a4,a5
80004114:	00f687b3          	add	a5,a3,a5
80004118:	0087a783          	lw	a5,8(a5)
8000411c:	0a078c63          	beqz	a5,800041d4 <API_GetTaskSlotFromTile+0x130>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:262
        Tiles[getXpos(addr)][getYpos(addr)].taskSlots = Tiles[getXpos(addr)][getYpos(addr)].taskSlots - 1;
80004120:	fec42503          	lw	a0,-20(s0)
80004124:	568020ef          	jal	ra,8000668c <getXpos>
80004128:	00050493          	mv	s1,a0
8000412c:	fec42503          	lw	a0,-20(s0)
80004130:	588020ef          	jal	ra,800066b8 <getYpos>
80004134:	00050613          	mv	a2,a0
80004138:	8003c7b7          	lui	a5,0x8003c
8000413c:	64078693          	addi	a3,a5,1600 # 8003c640 <__stack_top+0xfffdc5a0>
80004140:	00060713          	mv	a4,a2
80004144:	00171793          	slli	a5,a4,0x1
80004148:	00078713          	mv	a4,a5
8000414c:	00c70733          	add	a4,a4,a2
80004150:	00271793          	slli	a5,a4,0x2
80004154:	00078713          	mv	a4,a5
80004158:	00048793          	mv	a5,s1
8000415c:	00479793          	slli	a5,a5,0x4
80004160:	409787b3          	sub	a5,a5,s1
80004164:	00279793          	slli	a5,a5,0x2
80004168:	00f707b3          	add	a5,a4,a5
8000416c:	00f687b3          	add	a5,a3,a5
80004170:	0087a483          	lw	s1,8(a5)
80004174:	fec42503          	lw	a0,-20(s0)
80004178:	514020ef          	jal	ra,8000668c <getXpos>
8000417c:	00050913          	mv	s2,a0
80004180:	fec42503          	lw	a0,-20(s0)
80004184:	534020ef          	jal	ra,800066b8 <getYpos>
80004188:	00050593          	mv	a1,a0
8000418c:	fff48693          	addi	a3,s1,-1
80004190:	8003c7b7          	lui	a5,0x8003c
80004194:	64078613          	addi	a2,a5,1600 # 8003c640 <__stack_top+0xfffdc5a0>
80004198:	00058713          	mv	a4,a1
8000419c:	00171793          	slli	a5,a4,0x1
800041a0:	00078713          	mv	a4,a5
800041a4:	00b70733          	add	a4,a4,a1
800041a8:	00271793          	slli	a5,a4,0x2
800041ac:	00078713          	mv	a4,a5
800041b0:	00090793          	mv	a5,s2
800041b4:	00479793          	slli	a5,a5,0x4
800041b8:	412787b3          	sub	a5,a5,s2
800041bc:	00279793          	slli	a5,a5,0x2
800041c0:	00f707b3          	add	a5,a4,a5
800041c4:	00f607b3          	add	a5,a2,a5
800041c8:	00d7a423          	sw	a3,8(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:263
        return 1;
800041cc:	00100793          	li	a5,1
800041d0:	0140006f          	j	800041e4 <API_GetTaskSlotFromTile+0x140>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:265
    }else {
        prints("returning erro5\n");
800041d4:	800097b7          	lui	a5,0x80009
800041d8:	bc478513          	addi	a0,a5,-1084 # 80008bc4 <__stack_top+0xfffa8b24>
800041dc:	35c020ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:266
        return ERRO;
800041e0:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:268
    }
}
800041e4:	00078513          	mv	a0,a5
800041e8:	01c12083          	lw	ra,28(sp)
800041ec:	01812403          	lw	s0,24(sp)
800041f0:	01412483          	lw	s1,20(sp)
800041f4:	01012903          	lw	s2,16(sp)
800041f8:	02010113          	addi	sp,sp,32
800041fc:	00008067          	ret

80004200 <API_ClearTaskSlotFromTile>:
API_ClearTaskSlotFromTile():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:271

// Clear a slot occupied by a given task
unsigned int API_ClearTaskSlotFromTile(unsigned int addr, unsigned int app, unsigned int task){
80004200:	fe010113          	addi	sp,sp,-32
80004204:	00112e23          	sw	ra,28(sp)
80004208:	00812c23          	sw	s0,24(sp)
8000420c:	00912a23          	sw	s1,20(sp)
80004210:	02010413          	addi	s0,sp,32
80004214:	fea42623          	sw	a0,-20(s0)
80004218:	feb42423          	sw	a1,-24(s0)
8000421c:	fec42223          	sw	a2,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:272
    Tiles[getXpos(addr)][getYpos(addr)].taskSlots++;
80004220:	fec42503          	lw	a0,-20(s0)
80004224:	468020ef          	jal	ra,8000668c <getXpos>
80004228:	00050493          	mv	s1,a0
8000422c:	fec42503          	lw	a0,-20(s0)
80004230:	488020ef          	jal	ra,800066b8 <getYpos>
80004234:	00050693          	mv	a3,a0
80004238:	8003c7b7          	lui	a5,0x8003c
8000423c:	64078613          	addi	a2,a5,1600 # 8003c640 <__stack_top+0xfffdc5a0>
80004240:	00068713          	mv	a4,a3
80004244:	00171793          	slli	a5,a4,0x1
80004248:	00078713          	mv	a4,a5
8000424c:	00d70733          	add	a4,a4,a3
80004250:	00271793          	slli	a5,a4,0x2
80004254:	00078713          	mv	a4,a5
80004258:	00048793          	mv	a5,s1
8000425c:	00479793          	slli	a5,a5,0x4
80004260:	409787b3          	sub	a5,a5,s1
80004264:	00279793          	slli	a5,a5,0x2
80004268:	00f707b3          	add	a5,a4,a5
8000426c:	00f607b3          	add	a5,a2,a5
80004270:	0087a783          	lw	a5,8(a5)
80004274:	00178613          	addi	a2,a5,1
80004278:	8003c7b7          	lui	a5,0x8003c
8000427c:	64078593          	addi	a1,a5,1600 # 8003c640 <__stack_top+0xfffdc5a0>
80004280:	00068713          	mv	a4,a3
80004284:	00171793          	slli	a5,a4,0x1
80004288:	00078713          	mv	a4,a5
8000428c:	00d70733          	add	a4,a4,a3
80004290:	00271793          	slli	a5,a4,0x2
80004294:	00078713          	mv	a4,a5
80004298:	00048793          	mv	a5,s1
8000429c:	00479793          	slli	a5,a5,0x4
800042a0:	409787b3          	sub	a5,a5,s1
800042a4:	00279793          	slli	a5,a5,0x2
800042a8:	00f707b3          	add	a5,a4,a5
800042ac:	00f587b3          	add	a5,a1,a5
800042b0:	00c7a423          	sw	a2,8(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:273
    if(Tiles[getXpos(addr)][getYpos(addr)].taskSlots > NUM_MAX_TASKS){
800042b4:	fec42503          	lw	a0,-20(s0)
800042b8:	3d4020ef          	jal	ra,8000668c <getXpos>
800042bc:	00050493          	mv	s1,a0
800042c0:	fec42503          	lw	a0,-20(s0)
800042c4:	3f4020ef          	jal	ra,800066b8 <getYpos>
800042c8:	00050613          	mv	a2,a0
800042cc:	8003c7b7          	lui	a5,0x8003c
800042d0:	64078693          	addi	a3,a5,1600 # 8003c640 <__stack_top+0xfffdc5a0>
800042d4:	00060713          	mv	a4,a2
800042d8:	00171793          	slli	a5,a4,0x1
800042dc:	00078713          	mv	a4,a5
800042e0:	00c70733          	add	a4,a4,a2
800042e4:	00271793          	slli	a5,a4,0x2
800042e8:	00078713          	mv	a4,a5
800042ec:	00048793          	mv	a5,s1
800042f0:	00479793          	slli	a5,a5,0x4
800042f4:	409787b3          	sub	a5,a5,s1
800042f8:	00279793          	slli	a5,a5,0x2
800042fc:	00f707b3          	add	a5,a4,a5
80004300:	00f687b3          	add	a5,a3,a5
80004304:	0087a703          	lw	a4,8(a5)
80004308:	00600793          	li	a5,6
8000430c:	00e7fc63          	bleu	a4,a5,80004324 <API_ClearTaskSlotFromTile+0x124>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:274
        prints("returning erro6\n");
80004310:	800097b7          	lui	a5,0x80009
80004314:	bd878513          	addi	a0,a5,-1064 # 80008bd8 <__stack_top+0xfffa8b38>
80004318:	220020ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:275
        return ERRO;
8000431c:	fff00793          	li	a5,-1
80004320:	0080006f          	j	80004328 <API_ClearTaskSlotFromTile+0x128>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:278
    }
    else{
        return 1;
80004324:	00100793          	li	a5,1
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:282
    }
    prints("returning erro7\n");
    return ERRO;
}
80004328:	00078513          	mv	a0,a5
8000432c:	01c12083          	lw	ra,28(sp)
80004330:	01812403          	lw	s0,24(sp)
80004334:	01412483          	lw	s1,20(sp)
80004338:	02010113          	addi	sp,sp,32
8000433c:	00008067          	ret

80004340 <API_GetSystemTasksSlots>:
API_GetSystemTasksSlots():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:285

// Iterates around the system tiles to sum the amount of tasks slots available
unsigned int API_GetSystemTasksSlots(){
80004340:	fe010113          	addi	sp,sp,-32
80004344:	00112e23          	sw	ra,28(sp)
80004348:	00812c23          	sw	s0,24(sp)
8000434c:	00912a23          	sw	s1,20(sp)
80004350:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:287
    int m, n, i, sum;
    sum = 0;
80004354:	fe042223          	sw	zero,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:288
    for(m = 0; m < DIM_X; m++){
80004358:	fe042623          	sw	zero,-20(s0)
8000435c:	0a80006f          	j	80004404 <API_GetSystemTasksSlots+0xc4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:289
        for(n = 0; n < DIM_Y; n++){
80004360:	fe042423          	sw	zero,-24(s0)
80004364:	0880006f          	j	800043ec <API_GetSystemTasksSlots+0xac>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:290
            if(makeAddress(m,n) != makeAddress(0,0)){
80004368:	fec42783          	lw	a5,-20(s0)
8000436c:	fe842703          	lw	a4,-24(s0)
80004370:	00070593          	mv	a1,a4
80004374:	00078513          	mv	a0,a5
80004378:	7c8020ef          	jal	ra,80006b40 <makeAddress>
8000437c:	00050493          	mv	s1,a0
80004380:	00000593          	li	a1,0
80004384:	00000513          	li	a0,0
80004388:	7b8020ef          	jal	ra,80006b40 <makeAddress>
8000438c:	00050793          	mv	a5,a0
80004390:	04f48863          	beq	s1,a5,800043e0 <API_GetSystemTasksSlots+0xa0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:291
                sum += Tiles[m][n].taskSlots;
80004394:	8003c737          	lui	a4,0x8003c
80004398:	fe842783          	lw	a5,-24(s0)
8000439c:	fec42683          	lw	a3,-20(s0)
800043a0:	64070613          	addi	a2,a4,1600 # 8003c640 <__stack_top+0xfffdc5a0>
800043a4:	00078713          	mv	a4,a5
800043a8:	00171713          	slli	a4,a4,0x1
800043ac:	00f70733          	add	a4,a4,a5
800043b0:	00271793          	slli	a5,a4,0x2
800043b4:	00078713          	mv	a4,a5
800043b8:	00068793          	mv	a5,a3
800043bc:	00479793          	slli	a5,a5,0x4
800043c0:	40d787b3          	sub	a5,a5,a3
800043c4:	00279793          	slli	a5,a5,0x2
800043c8:	00f707b3          	add	a5,a4,a5
800043cc:	00f607b3          	add	a5,a2,a5
800043d0:	0087a703          	lw	a4,8(a5)
800043d4:	fe442783          	lw	a5,-28(s0)
800043d8:	00f707b3          	add	a5,a4,a5
800043dc:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:289 (discriminator 2)
        for(n = 0; n < DIM_Y; n++){
800043e0:	fe842783          	lw	a5,-24(s0)
800043e4:	00178793          	addi	a5,a5,1
800043e8:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:289 (discriminator 1)
800043ec:	fe842703          	lw	a4,-24(s0)
800043f0:	00400793          	li	a5,4
800043f4:	f6e7dae3          	ble	a4,a5,80004368 <API_GetSystemTasksSlots+0x28>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:288 (discriminator 2)
    for(m = 0; m < DIM_X; m++){
800043f8:	fec42783          	lw	a5,-20(s0)
800043fc:	00178793          	addi	a5,a5,1
80004400:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:288 (discriminator 1)
80004404:	fec42703          	lw	a4,-20(s0)
80004408:	00400793          	li	a5,4
8000440c:	f4e7dae3          	ble	a4,a5,80004360 <API_GetSystemTasksSlots+0x20>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:295
            }
        }
    }
    return sum;
80004410:	fe442783          	lw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:296
}
80004414:	00078513          	mv	a0,a5
80004418:	01c12083          	lw	ra,28(sp)
8000441c:	01812403          	lw	s0,24(sp)
80004420:	01412483          	lw	s1,20(sp)
80004424:	02010113          	addi	sp,sp,32
80004428:	00008067          	ret

8000442c <API_RepositoryAllocation>:
API_RepositoryAllocation():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:298

void API_RepositoryAllocation(unsigned int app, unsigned int task, unsigned int dest_addr){
8000442c:	fd010113          	addi	sp,sp,-48
80004430:	02112623          	sw	ra,44(sp)
80004434:	02812423          	sw	s0,40(sp)
80004438:	03010413          	addi	s0,sp,48
8000443c:	fca42e23          	sw	a0,-36(s0)
80004440:	fcb42c23          	sw	a1,-40(s0)
80004444:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:301
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80004448:	1f4010ef          	jal	ra,8000563c <API_GetServiceSlot>
8000444c:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:302
        if(mySlot == PIPE_FULL){
80004450:	fec42703          	lw	a4,-20(s0)
80004454:	fdfe07b7          	lui	a5,0xfdfe0
80004458:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df7fd5d>
8000445c:	00f71a63          	bne	a4,a5,80004470 <API_RepositoryAllocation+0x44>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:304
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            prints("Estou preso aqui6...\n");
80004460:	800097b7          	lui	a5,0x80009
80004464:	bec78513          	addi	a0,a5,-1044 # 80008bec <__stack_top+0xfffa8b4c>
80004468:	0d0020ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:305
            API_NI_Handler();
8000446c:	7c0030ef          	jal	ra,80007c2c <API_NI_Handler>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:307
        }
    }while(mySlot == PIPE_FULL);
80004470:	fec42703          	lw	a4,-20(s0)
80004474:	fdfe07b7          	lui	a5,0xfdfe0
80004478:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df7fd5d>
8000447c:	fcf706e3          	beq	a4,a5,80004448 <API_RepositoryAllocation+0x1c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:308
    printsv("I got a free service slo-!! -> ", mySlot);
80004480:	fec42783          	lw	a5,-20(s0)
80004484:	00078593          	mv	a1,a5
80004488:	800097b7          	lui	a5,0x80009
8000448c:	c0478513          	addi	a0,a5,-1020 # 80008c04 <__stack_top+0xfffa8b64>
80004490:	154020ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:310

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80004494:	8003b7b7          	lui	a5,0x8003b
80004498:	fec42703          	lw	a4,-20(s0)
8000449c:	7fc78693          	addi	a3,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
800044a0:	00070793          	mv	a5,a4
800044a4:	00479793          	slli	a5,a5,0x4
800044a8:	40e787b3          	sub	a5,a5,a4
800044ac:	00279793          	slli	a5,a5,0x2
800044b0:	00f687b3          	add	a5,a3,a5
800044b4:	feff0737          	lui	a4,0xfeff0
800044b8:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7ef8fe5e>
800044bc:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:312

    ServicePipe[mySlot].header.header           = makeAddress(0, 0) | PERIPH_SOUTH;
800044c0:	00000593          	li	a1,0
800044c4:	00000513          	li	a0,0
800044c8:	678020ef          	jal	ra,80006b40 <makeAddress>
800044cc:	00050713          	mv	a4,a0
800044d0:	000407b7          	lui	a5,0x40
800044d4:	00f766b3          	or	a3,a4,a5
800044d8:	8003b7b7          	lui	a5,0x8003b
800044dc:	fec42703          	lw	a4,-20(s0)
800044e0:	7fc78613          	addi	a2,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
800044e4:	00070793          	mv	a5,a4
800044e8:	00479793          	slli	a5,a5,0x4
800044ec:	40e787b3          	sub	a5,a5,a4
800044f0:	00279793          	slli	a5,a5,0x2
800044f4:	00f607b3          	add	a5,a2,a5
800044f8:	00d7a423          	sw	a3,8(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:313
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
800044fc:	8003b7b7          	lui	a5,0x8003b
80004500:	fec42703          	lw	a4,-20(s0)
80004504:	7fc78693          	addi	a3,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
80004508:	00070793          	mv	a5,a4
8000450c:	00479793          	slli	a5,a5,0x4
80004510:	40e787b3          	sub	a5,a5,a4
80004514:	00279793          	slli	a5,a5,0x2
80004518:	00f687b3          	add	a5,a3,a5
8000451c:	00b00713          	li	a4,11
80004520:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:314
    ServicePipe[mySlot].header.service          = TASK_ALLOCATION_SEND;
80004524:	8003b7b7          	lui	a5,0x8003b
80004528:	fec42703          	lw	a4,-20(s0)
8000452c:	7fc78693          	addi	a3,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
80004530:	00070793          	mv	a5,a4
80004534:	00479793          	slli	a5,a5,0x4
80004538:	40e787b3          	sub	a5,a5,a4
8000453c:	00279793          	slli	a5,a5,0x2
80004540:	00f687b3          	add	a5,a3,a5
80004544:	03000713          	li	a4,48
80004548:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:315
    ServicePipe[mySlot].header.task_id          = task;
8000454c:	8003b7b7          	lui	a5,0x8003b
80004550:	fec42703          	lw	a4,-20(s0)
80004554:	7fc78693          	addi	a3,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
80004558:	00070793          	mv	a5,a4
8000455c:	00479793          	slli	a5,a5,0x4
80004560:	40e787b3          	sub	a5,a5,a4
80004564:	00279793          	slli	a5,a5,0x2
80004568:	00f687b3          	add	a5,a3,a5
8000456c:	fd842703          	lw	a4,-40(s0)
80004570:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:316
    ServicePipe[mySlot].header.task_app_id      = app;
80004574:	8003b7b7          	lui	a5,0x8003b
80004578:	fec42703          	lw	a4,-20(s0)
8000457c:	7fc78693          	addi	a3,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
80004580:	00070793          	mv	a5,a4
80004584:	00479793          	slli	a5,a5,0x4
80004588:	40e787b3          	sub	a5,a5,a4
8000458c:	00279793          	slli	a5,a5,0x2
80004590:	00f687b3          	add	a5,a3,a5
80004594:	fdc42703          	lw	a4,-36(s0)
80004598:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:317
    ServicePipe[mySlot].header.task_dest_addr   = dest_addr;
8000459c:	8003b7b7          	lui	a5,0x8003b
800045a0:	fec42703          	lw	a4,-20(s0)
800045a4:	7fc78693          	addi	a3,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
800045a8:	00070793          	mv	a5,a4
800045ac:	00479793          	slli	a5,a5,0x4
800045b0:	40e787b3          	sub	a5,a5,a4
800045b4:	00279793          	slli	a5,a5,0x2
800045b8:	00f687b3          	add	a5,a3,a5
800045bc:	fd442703          	lw	a4,-44(s0)
800045c0:	02e7ac23          	sw	a4,56(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:319

    API_PushSendQueue(SERVICE, mySlot);
800045c4:	fec42583          	lw	a1,-20(s0)
800045c8:	10100537          	lui	a0,0x10100
800045cc:	5b4020ef          	jal	ra,80006b80 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:320
    return;    
800045d0:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:321
}
800045d4:	02c12083          	lw	ra,44(sp)
800045d8:	02812403          	lw	s0,40(sp)
800045dc:	03010113          	addi	sp,sp,48
800045e0:	00008067          	ret

800045e4 <API_TaskAllocated>:
API_TaskAllocated():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:323

void API_TaskAllocated(unsigned int task_id, unsigned int app_id){
800045e4:	fe010113          	addi	sp,sp,-32
800045e8:	00812e23          	sw	s0,28(sp)
800045ec:	02010413          	addi	s0,sp,32
800045f0:	fea42623          	sw	a0,-20(s0)
800045f4:	feb42423          	sw	a1,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:325
    unsigned int i;
    applications[app_id].tasks[task_id].status = TASK_ALLOCATED;
800045f8:	8003c737          	lui	a4,0x8003c
800045fc:	fec42783          	lw	a5,-20(s0)
80004600:	fe842683          	lw	a3,-24(s0)
80004604:	e5470613          	addi	a2,a4,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80004608:	00078713          	mv	a4,a5
8000460c:	00171713          	slli	a4,a4,0x1
80004610:	00f70733          	add	a4,a4,a5
80004614:	00271793          	slli	a5,a4,0x2
80004618:	00078713          	mv	a4,a5
8000461c:	00068793          	mv	a5,a3
80004620:	00279793          	slli	a5,a5,0x2
80004624:	00d787b3          	add	a5,a5,a3
80004628:	00579793          	slli	a5,a5,0x5
8000462c:	00f707b3          	add	a5,a4,a5
80004630:	00f607b3          	add	a5,a2,a5
80004634:	00400713          	li	a4,4
80004638:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:326
    return;
8000463c:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:327
}
80004640:	01c12403          	lw	s0,28(sp)
80004644:	02010113          	addi	sp,sp,32
80004648:	00008067          	ret

8000464c <API_ApplicationStart>:
API_ApplicationStart():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:329

void API_ApplicationStart(unsigned int app_id){
8000464c:	fd010113          	addi	sp,sp,-48
80004650:	02112623          	sw	ra,44(sp)
80004654:	02812423          	sw	s0,40(sp)
80004658:	03010413          	addi	s0,sp,48
8000465c:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:331
    unsigned int i, j;
    printsv("Starting Application: ", app_id);
80004660:	fdc42783          	lw	a5,-36(s0)
80004664:	00078593          	mv	a1,a5
80004668:	800097b7          	lui	a5,0x80009
8000466c:	c2478513          	addi	a0,a5,-988 # 80008c24 <__stack_top+0xfffa8b84>
80004670:	775010ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:332
    for(i = 0; i < applications[app_id].numTasks; i++){
80004674:	fe042623          	sw	zero,-20(s0)
80004678:	1d80006f          	j	80004850 <API_ApplicationStart+0x204>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:335
        while(ServiceMessage.status == PIPE_OCCUPIED){
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            prints("Estou preso aqui7...\n");
8000467c:	800097b7          	lui	a5,0x80009
80004680:	c3c78513          	addi	a0,a5,-964 # 80008c3c <__stack_top+0xfffa8b9c>
80004684:	6b5010ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:336
            API_NI_Handler();
80004688:	5a4030ef          	jal	ra,80007c2c <API_NI_Handler>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:333
        while(ServiceMessage.status == PIPE_OCCUPIED){
8000468c:	8003c7b7          	lui	a5,0x8003c
80004690:	8f47a703          	lw	a4,-1804(a5) # 8003b8f4 <__stack_top+0xfffdb854>
80004694:	00100793          	li	a5,1
80004698:	fef702e3          	beq	a4,a5,8000467c <API_ApplicationStart+0x30>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:345
        //     if(mySlot == PIPE_FULL){
        //         // Runs the NI Handler to send/receive packets, opening space in the PIPE
        //         API_NI_Handler();
        //     }
        // }while(mySlot == PIPE_FULL);
        printsv("Sending TASK_START to task ", i);
8000469c:	fec42783          	lw	a5,-20(s0)
800046a0:	00078593          	mv	a1,a5
800046a4:	800097b7          	lui	a5,0x80009
800046a8:	c5478513          	addi	a0,a5,-940 # 80008c54 <__stack_top+0xfffa8bb4>
800046ac:	739010ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:346
        ServiceMessage.status = PIPE_OCCUPIED;
800046b0:	8003c7b7          	lui	a5,0x8003c
800046b4:	00100713          	li	a4,1
800046b8:	8ee7aa23          	sw	a4,-1804(a5) # 8003b8f4 <__stack_top+0xfffdb854>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:348

        ServiceMessage.header.header           = applications[app_id].tasks[i].addr;
800046bc:	8003c737          	lui	a4,0x8003c
800046c0:	fec42783          	lw	a5,-20(s0)
800046c4:	fdc42683          	lw	a3,-36(s0)
800046c8:	e5470613          	addi	a2,a4,-428 # 8003be54 <__stack_top+0xfffdbdb4>
800046cc:	00078713          	mv	a4,a5
800046d0:	00171713          	slli	a4,a4,0x1
800046d4:	00f70733          	add	a4,a4,a5
800046d8:	00271793          	slli	a5,a4,0x2
800046dc:	00078713          	mv	a4,a5
800046e0:	00068793          	mv	a5,a3
800046e4:	00279793          	slli	a5,a5,0x2
800046e8:	00d787b3          	add	a5,a5,a3
800046ec:	00579793          	slli	a5,a5,0x5
800046f0:	00f707b3          	add	a5,a4,a5
800046f4:	00f607b3          	add	a5,a2,a5
800046f8:	0187a703          	lw	a4,24(a5)
800046fc:	8003c7b7          	lui	a5,0x8003c
80004700:	8f478793          	addi	a5,a5,-1804 # 8003b8f4 <__stack_top+0xfffdb854>
80004704:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:349
        ServiceMessage.header.payload_size     = PKT_SERVICE_SIZE + applications[app_id].numTasks + 1;
80004708:	8003c6b7          	lui	a3,0x8003c
8000470c:	fdc42703          	lw	a4,-36(s0)
80004710:	00070793          	mv	a5,a4
80004714:	00279793          	slli	a5,a5,0x2
80004718:	00e787b3          	add	a5,a5,a4
8000471c:	00579793          	slli	a5,a5,0x5
80004720:	e5468713          	addi	a4,a3,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80004724:	00e787b3          	add	a5,a5,a4
80004728:	0107a783          	lw	a5,16(a5)
8000472c:	00c78713          	addi	a4,a5,12
80004730:	8003c7b7          	lui	a5,0x8003c
80004734:	8f478793          	addi	a5,a5,-1804 # 8003b8f4 <__stack_top+0xfffdb854>
80004738:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:350
        ServiceMessage.header.service          = TASK_START;
8000473c:	8003c7b7          	lui	a5,0x8003c
80004740:	8f478793          	addi	a5,a5,-1804 # 8003b8f4 <__stack_top+0xfffdb854>
80004744:	40000713          	li	a4,1024
80004748:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:351
        ServiceMessage.header.task_id          = i;
8000474c:	8003c7b7          	lui	a5,0x8003c
80004750:	8f478793          	addi	a5,a5,-1804 # 8003b8f4 <__stack_top+0xfffdb854>
80004754:	fec42703          	lw	a4,-20(s0)
80004758:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:352
        ServiceMessage.header.task_app_id      = app_id;
8000475c:	8003c7b7          	lui	a5,0x8003c
80004760:	8f478793          	addi	a5,a5,-1804 # 8003b8f4 <__stack_top+0xfffdb854>
80004764:	fdc42703          	lw	a4,-36(s0)
80004768:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:353
        ServiceMessage.msg.length              = applications[app_id].numTasks;
8000476c:	8003c6b7          	lui	a3,0x8003c
80004770:	fdc42703          	lw	a4,-36(s0)
80004774:	00070793          	mv	a5,a4
80004778:	00279793          	slli	a5,a5,0x2
8000477c:	00e787b3          	add	a5,a5,a4
80004780:	00579793          	slli	a5,a5,0x5
80004784:	e5468713          	addi	a4,a3,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80004788:	00e787b3          	add	a5,a5,a4
8000478c:	0107a703          	lw	a4,16(a5)
80004790:	8003c7b7          	lui	a5,0x8003c
80004794:	8f478793          	addi	a5,a5,-1804 # 8003b8f4 <__stack_top+0xfffdb854>
80004798:	02e7ae23          	sw	a4,60(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:354
        for(j = 0; j < applications[app_id].numTasks; j++){
8000479c:	fe042423          	sw	zero,-24(s0)
800047a0:	06c0006f          	j	8000480c <API_ApplicationStart+0x1c0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:355 (discriminator 3)
            ServiceMessage.msg.msg[j]          = applications[app_id].tasks[j].addr;
800047a4:	8003c737          	lui	a4,0x8003c
800047a8:	fe842783          	lw	a5,-24(s0)
800047ac:	fdc42683          	lw	a3,-36(s0)
800047b0:	e5470613          	addi	a2,a4,-428 # 8003be54 <__stack_top+0xfffdbdb4>
800047b4:	00078713          	mv	a4,a5
800047b8:	00171713          	slli	a4,a4,0x1
800047bc:	00f70733          	add	a4,a4,a5
800047c0:	00271793          	slli	a5,a4,0x2
800047c4:	00078713          	mv	a4,a5
800047c8:	00068793          	mv	a5,a3
800047cc:	00279793          	slli	a5,a5,0x2
800047d0:	00d787b3          	add	a5,a5,a3
800047d4:	00579793          	slli	a5,a5,0x5
800047d8:	00f707b3          	add	a5,a4,a5
800047dc:	00f607b3          	add	a5,a2,a5
800047e0:	0187a703          	lw	a4,24(a5)
800047e4:	8003c6b7          	lui	a3,0x8003c
800047e8:	fe842783          	lw	a5,-24(s0)
800047ec:	00c78793          	addi	a5,a5,12
800047f0:	8f468693          	addi	a3,a3,-1804 # 8003b8f4 <__stack_top+0xfffdb854>
800047f4:	00279793          	slli	a5,a5,0x2
800047f8:	00f687b3          	add	a5,a3,a5
800047fc:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:354 (discriminator 3)
        for(j = 0; j < applications[app_id].numTasks; j++){
80004800:	fe842783          	lw	a5,-24(s0)
80004804:	00178793          	addi	a5,a5,1
80004808:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:354 (discriminator 1)
8000480c:	8003c6b7          	lui	a3,0x8003c
80004810:	fdc42703          	lw	a4,-36(s0)
80004814:	00070793          	mv	a5,a4
80004818:	00279793          	slli	a5,a5,0x2
8000481c:	00e787b3          	add	a5,a5,a4
80004820:	00579793          	slli	a5,a5,0x5
80004824:	e5468713          	addi	a4,a3,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80004828:	00e787b3          	add	a5,a5,a4
8000482c:	0107a783          	lw	a5,16(a5)
80004830:	fe842703          	lw	a4,-24(s0)
80004834:	f6f768e3          	bltu	a4,a5,800047a4 <API_ApplicationStart+0x158>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:357 (discriminator 2)
        }
        API_PushSendQueue(SYS_MESSAGE, 0);
80004838:	00000593          	li	a1,0
8000483c:	50500537          	lui	a0,0x50500
80004840:	340020ef          	jal	ra,80006b80 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:332 (discriminator 2)
    for(i = 0; i < applications[app_id].numTasks; i++){
80004844:	fec42783          	lw	a5,-20(s0)
80004848:	00178793          	addi	a5,a5,1
8000484c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:332 (discriminator 1)
80004850:	8003c6b7          	lui	a3,0x8003c
80004854:	fdc42703          	lw	a4,-36(s0)
80004858:	00070793          	mv	a5,a4
8000485c:	00279793          	slli	a5,a5,0x2
80004860:	00e787b3          	add	a5,a5,a4
80004864:	00579793          	slli	a5,a5,0x5
80004868:	e5468713          	addi	a4,a3,-428 # 8003be54 <__stack_top+0xfffdbdb4>
8000486c:	00e787b3          	add	a5,a5,a4
80004870:	0107a783          	lw	a5,16(a5)
80004874:	fec42703          	lw	a4,-20(s0)
80004878:	e0f76ae3          	bltu	a4,a5,8000468c <API_ApplicationStart+0x40>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:359
    }
    return;
8000487c:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:360
}
80004880:	02c12083          	lw	ra,44(sp)
80004884:	02812403          	lw	s0,40(sp)
80004888:	03010113          	addi	sp,sp,48
8000488c:	00008067          	ret

80004890 <API_StartTasks>:
API_StartTasks():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:363


void API_StartTasks(){
80004890:	fe010113          	addi	sp,sp,-32
80004894:	00112e23          	sw	ra,28(sp)
80004898:	00812c23          	sw	s0,24(sp)
8000489c:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:365
    unsigned int j, i, start;
    for(j = 0; j < NUM_MAX_APPS; j++){
800048a0:	fe042623          	sw	zero,-20(s0)
800048a4:	18c0006f          	j	80004a30 <API_StartTasks+0x1a0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:366
        if(applications[j].occupied == TRUE){
800048a8:	8003c6b7          	lui	a3,0x8003c
800048ac:	fec42703          	lw	a4,-20(s0)
800048b0:	00070793          	mv	a5,a4
800048b4:	00279793          	slli	a5,a5,0x2
800048b8:	00e787b3          	add	a5,a5,a4
800048bc:	00579793          	slli	a5,a5,0x5
800048c0:	e5468713          	addi	a4,a3,-428 # 8003be54 <__stack_top+0xfffdbdb4>
800048c4:	00e787b3          	add	a5,a5,a4
800048c8:	0007a703          	lw	a4,0(a5)
800048cc:	00100793          	li	a5,1
800048d0:	14f71a63          	bne	a4,a5,80004a24 <API_StartTasks+0x194>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:367
            start = TRUE;
800048d4:	00100793          	li	a5,1
800048d8:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:368
            for(i = 0; i < applications[j].numTasks; i++){
800048dc:	fe042423          	sw	zero,-24(s0)
800048e0:	0600006f          	j	80004940 <API_StartTasks+0xb0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:369
                if(applications[j].tasks[i].status != TASK_ALLOCATED){
800048e4:	8003c737          	lui	a4,0x8003c
800048e8:	fe842783          	lw	a5,-24(s0)
800048ec:	fec42683          	lw	a3,-20(s0)
800048f0:	e5470613          	addi	a2,a4,-428 # 8003be54 <__stack_top+0xfffdbdb4>
800048f4:	00078713          	mv	a4,a5
800048f8:	00171713          	slli	a4,a4,0x1
800048fc:	00f70733          	add	a4,a4,a5
80004900:	00271793          	slli	a5,a4,0x2
80004904:	00078713          	mv	a4,a5
80004908:	00068793          	mv	a5,a3
8000490c:	00279793          	slli	a5,a5,0x2
80004910:	00d787b3          	add	a5,a5,a3
80004914:	00579793          	slli	a5,a5,0x5
80004918:	00f707b3          	add	a5,a4,a5
8000491c:	00f607b3          	add	a5,a2,a5
80004920:	0147a703          	lw	a4,20(a5)
80004924:	00400793          	li	a5,4
80004928:	00f70663          	beq	a4,a5,80004934 <API_StartTasks+0xa4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:370
                    start = FALSE;
8000492c:	fe042223          	sw	zero,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:371
                    break;
80004930:	03c0006f          	j	8000496c <API_StartTasks+0xdc>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:368 (discriminator 2)
            for(i = 0; i < applications[j].numTasks; i++){
80004934:	fe842783          	lw	a5,-24(s0)
80004938:	00178793          	addi	a5,a5,1
8000493c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:368 (discriminator 1)
80004940:	8003c6b7          	lui	a3,0x8003c
80004944:	fec42703          	lw	a4,-20(s0)
80004948:	00070793          	mv	a5,a4
8000494c:	00279793          	slli	a5,a5,0x2
80004950:	00e787b3          	add	a5,a5,a4
80004954:	00579793          	slli	a5,a5,0x5
80004958:	e5468713          	addi	a4,a3,-428 # 8003be54 <__stack_top+0xfffdbdb4>
8000495c:	00e787b3          	add	a5,a5,a4
80004960:	0107a783          	lw	a5,16(a5)
80004964:	fe842703          	lw	a4,-24(s0)
80004968:	f6f76ee3          	bltu	a4,a5,800048e4 <API_StartTasks+0x54>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:374
                }
            }
            if(start == TRUE){
8000496c:	fe442703          	lw	a4,-28(s0)
80004970:	00100793          	li	a5,1
80004974:	0af71863          	bne	a4,a5,80004a24 <API_StartTasks+0x194>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:375
                printsv("Application is allocated: ", j);
80004978:	fec42783          	lw	a5,-20(s0)
8000497c:	00078593          	mv	a1,a5
80004980:	800097b7          	lui	a5,0x80009
80004984:	c7078513          	addi	a0,a5,-912 # 80008c70 <__stack_top+0xfffa8bd0>
80004988:	45d010ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:376
                API_ApplicationStart(j);
8000498c:	fec42503          	lw	a0,-20(s0)
80004990:	cbdff0ef          	jal	ra,8000464c <API_ApplicationStart>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:377
                prints("Start command sent to every task...\n");
80004994:	800097b7          	lui	a5,0x80009
80004998:	c8c78513          	addi	a0,a5,-884 # 80008c8c <__stack_top+0xfffa8bec>
8000499c:	39d010ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:378
                for(i = 0; i < applications[j].numTasks; i++){
800049a0:	fe042423          	sw	zero,-24(s0)
800049a4:	0540006f          	j	800049f8 <API_StartTasks+0x168>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:379 (discriminator 3)
                    applications[j].tasks[i].status = TASK_STARTED;
800049a8:	8003c737          	lui	a4,0x8003c
800049ac:	fe842783          	lw	a5,-24(s0)
800049b0:	fec42683          	lw	a3,-20(s0)
800049b4:	e5470613          	addi	a2,a4,-428 # 8003be54 <__stack_top+0xfffdbdb4>
800049b8:	00078713          	mv	a4,a5
800049bc:	00171713          	slli	a4,a4,0x1
800049c0:	00f70733          	add	a4,a4,a5
800049c4:	00271793          	slli	a5,a4,0x2
800049c8:	00078713          	mv	a4,a5
800049cc:	00068793          	mv	a5,a3
800049d0:	00279793          	slli	a5,a5,0x2
800049d4:	00d787b3          	add	a5,a5,a3
800049d8:	00579793          	slli	a5,a5,0x5
800049dc:	00f707b3          	add	a5,a4,a5
800049e0:	00f607b3          	add	a5,a2,a5
800049e4:	00500713          	li	a4,5
800049e8:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:378 (discriminator 3)
                for(i = 0; i < applications[j].numTasks; i++){
800049ec:	fe842783          	lw	a5,-24(s0)
800049f0:	00178793          	addi	a5,a5,1
800049f4:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:378 (discriminator 1)
800049f8:	8003c6b7          	lui	a3,0x8003c
800049fc:	fec42703          	lw	a4,-20(s0)
80004a00:	00070793          	mv	a5,a4
80004a04:	00279793          	slli	a5,a5,0x2
80004a08:	00e787b3          	add	a5,a5,a4
80004a0c:	00579793          	slli	a5,a5,0x5
80004a10:	e5468713          	addi	a4,a3,-428 # 8003be54 <__stack_top+0xfffdbdb4>
80004a14:	00e787b3          	add	a5,a5,a4
80004a18:	0107a783          	lw	a5,16(a5)
80004a1c:	fe842703          	lw	a4,-24(s0)
80004a20:	f8f764e3          	bltu	a4,a5,800049a8 <API_StartTasks+0x118>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:365 (discriminator 2)
    for(j = 0; j < NUM_MAX_APPS; j++){
80004a24:	fec42783          	lw	a5,-20(s0)
80004a28:	00178793          	addi	a5,a5,1
80004a2c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:365 (discriminator 1)
80004a30:	fec42703          	lw	a4,-20(s0)
80004a34:	00b00793          	li	a5,11
80004a38:	e6e7f8e3          	bleu	a4,a5,800048a8 <API_StartTasks+0x18>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:384
                }
            }
        }
    }
    return;
80004a3c:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/globalMaster.c:385
}    
80004a40:	01c12083          	lw	ra,28(sp)
80004a44:	01812403          	lw	s0,24(sp)
80004a48:	02010113          	addi	sp,sp,32
80004a4c:	00008067          	ret

80004a50 <API_TaskListInit>:
API_TaskListInit():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:13
#include "chronos.h"

// Stores information about each running task
//extern volatile Task TaskList[ NUM_MAX_TASKS ];

void API_TaskListInit(){
80004a50:	fe010113          	addi	sp,sp,-32
80004a54:	00812e23          	sw	s0,28(sp)
80004a58:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:15
    unsigned int i, j;
    for (i = 0; i < NUM_MAX_TASKS; i++){
80004a5c:	fe042623          	sw	zero,-20(s0)
80004a60:	07c0006f          	j	80004adc <API_TaskListInit+0x8c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:16
        TaskList[i].status = TASK_SLOT_EMPTY;
80004a64:	8003c7b7          	lui	a5,0x8003c
80004a68:	fec42683          	lw	a3,-20(s0)
80004a6c:	00001737          	lui	a4,0x1
80004a70:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80004a74:	02e68733          	mul	a4,a3,a4
80004a78:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80004a7c:	00f707b3          	add	a5,a4,a5
80004a80:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:17
        for (j = 0; j < NUM_MAX_APP_TASKS; j++){
80004a84:	fe042423          	sw	zero,-24(s0)
80004a88:	03c0006f          	j	80004ac4 <API_TaskListInit+0x74>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:18 (discriminator 3)
            TaskList[i].PendingReq[j] = FALSE;
80004a8c:	8003c7b7          	lui	a5,0x8003c
80004a90:	fec42683          	lw	a3,-20(s0)
80004a94:	26100713          	li	a4,609
80004a98:	02e686b3          	mul	a3,a3,a4
80004a9c:	fe842703          	lw	a4,-24(s0)
80004aa0:	00e68733          	add	a4,a3,a4
80004aa4:	24c70713          	addi	a4,a4,588
80004aa8:	00271713          	slli	a4,a4,0x2
80004aac:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80004ab0:	00f707b3          	add	a5,a4,a5
80004ab4:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:17 (discriminator 3)
        for (j = 0; j < NUM_MAX_APP_TASKS; j++){
80004ab8:	fe842783          	lw	a5,-24(s0)
80004abc:	00178793          	addi	a5,a5,1
80004ac0:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:17 (discriminator 1)
80004ac4:	fe842703          	lw	a4,-24(s0)
80004ac8:	00900793          	li	a5,9
80004acc:	fce7f0e3          	bleu	a4,a5,80004a8c <API_TaskListInit+0x3c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 2)
    for (i = 0; i < NUM_MAX_TASKS; i++){
80004ad0:	fec42783          	lw	a5,-20(s0)
80004ad4:	00178793          	addi	a5,a5,1
80004ad8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:15 (discriminator 1)
80004adc:	fec42703          	lw	a4,-20(s0)
80004ae0:	00500793          	li	a5,5
80004ae4:	f8e7f0e3          	bleu	a4,a5,80004a64 <API_TaskListInit+0x14>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:21
        }
    }
    return;
80004ae8:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:22
}
80004aec:	01c12403          	lw	s0,28(sp)
80004af0:	02010113          	addi	sp,sp,32
80004af4:	00008067          	ret

80004af8 <API_GetCurrentTaskSlot>:
API_GetCurrentTaskSlot():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:24

unsigned int API_GetCurrentTaskSlot(){
80004af8:	fe010113          	addi	sp,sp,-32
80004afc:	00112e23          	sw	ra,28(sp)
80004b00:	00812c23          	sw	s0,24(sp)
80004b04:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:26
    // The handle of the currently running ( calling ) task on the kernel.
    TaskHandle_t xHandle = xTaskGetCurrentTaskHandle();
80004b08:	d08fe0ef          	jal	ra,80003010 <xTaskGetCurrentTaskHandle>
80004b0c:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:27
    unsigned int i = 0;
80004b10:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:28
    for ( i = 0 ; i < NUM_MAX_TASKS ; i++ ) {
80004b14:	fe042623          	sw	zero,-20(s0)
80004b18:	0640006f          	j	80004b7c <API_GetCurrentTaskSlot+0x84>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:29
        if ( TaskList[ i ].TaskHandler == xHandle && TaskList[i].status != TASK_SLOT_EMPTY ) {
80004b1c:	8003c7b7          	lui	a5,0x8003c
80004b20:	fec42683          	lw	a3,-20(s0)
80004b24:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80004b28:	000017b7          	lui	a5,0x1
80004b2c:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80004b30:	02f687b3          	mul	a5,a3,a5
80004b34:	00f707b3          	add	a5,a4,a5
80004b38:	0187a783          	lw	a5,24(a5)
80004b3c:	fe842703          	lw	a4,-24(s0)
80004b40:	02f71863          	bne	a4,a5,80004b70 <API_GetCurrentTaskSlot+0x78>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:29 (discriminator 1)
80004b44:	8003c7b7          	lui	a5,0x8003c
80004b48:	fec42683          	lw	a3,-20(s0)
80004b4c:	00001737          	lui	a4,0x1
80004b50:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80004b54:	02e68733          	mul	a4,a3,a4
80004b58:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80004b5c:	00f707b3          	add	a5,a4,a5
80004b60:	0007a783          	lw	a5,0(a5)
80004b64:	00078663          	beqz	a5,80004b70 <API_GetCurrentTaskSlot+0x78>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:30
            return( i );
80004b68:	fec42783          	lw	a5,-20(s0)
80004b6c:	02c0006f          	j	80004b98 <API_GetCurrentTaskSlot+0xa0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:28 (discriminator 2)
    for ( i = 0 ; i < NUM_MAX_TASKS ; i++ ) {
80004b70:	fec42783          	lw	a5,-20(s0)
80004b74:	00178793          	addi	a5,a5,1
80004b78:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:28 (discriminator 1)
80004b7c:	fec42703          	lw	a4,-20(s0)
80004b80:	00500793          	li	a5,5
80004b84:	f8e7fce3          	bleu	a4,a5,80004b1c <API_GetCurrentTaskSlot+0x24>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:33
        }
    }
    prints("returning erro0\n");
80004b88:	800097b7          	lui	a5,0x80009
80004b8c:	cb478513          	addi	a0,a5,-844 # 80008cb4 <__stack_top+0xfffa8c14>
80004b90:	1a9010ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:34
    return ERRO;
80004b94:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:35
}
80004b98:	00078513          	mv	a0,a5
80004b9c:	01c12083          	lw	ra,28(sp)
80004ba0:	01812403          	lw	s0,24(sp)
80004ba4:	02010113          	addi	sp,sp,32
80004ba8:	00008067          	ret

80004bac <API_GetFreeTaskSlot>:
API_GetFreeTaskSlot():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:37

unsigned int API_GetFreeTaskSlot(){
80004bac:	fe010113          	addi	sp,sp,-32
80004bb0:	00112e23          	sw	ra,28(sp)
80004bb4:	00812c23          	sw	s0,24(sp)
80004bb8:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:39
    unsigned int i;
    for (i = 0; i < NUM_MAX_TASKS; i++){
80004bbc:	fe042623          	sw	zero,-20(s0)
80004bc0:	03c0006f          	j	80004bfc <API_GetFreeTaskSlot+0x50>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:40
        if (TaskList[i].status == TASK_SLOT_EMPTY){
80004bc4:	8003c7b7          	lui	a5,0x8003c
80004bc8:	fec42683          	lw	a3,-20(s0)
80004bcc:	00001737          	lui	a4,0x1
80004bd0:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80004bd4:	02e68733          	mul	a4,a3,a4
80004bd8:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80004bdc:	00f707b3          	add	a5,a4,a5
80004be0:	0007a783          	lw	a5,0(a5)
80004be4:	00079663          	bnez	a5,80004bf0 <API_GetFreeTaskSlot+0x44>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:41
            return i;
80004be8:	fec42783          	lw	a5,-20(s0)
80004bec:	02c0006f          	j	80004c18 <API_GetFreeTaskSlot+0x6c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:39 (discriminator 2)
    for (i = 0; i < NUM_MAX_TASKS; i++){
80004bf0:	fec42783          	lw	a5,-20(s0)
80004bf4:	00178793          	addi	a5,a5,1
80004bf8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:39 (discriminator 1)
80004bfc:	fec42703          	lw	a4,-20(s0)
80004c00:	00500793          	li	a5,5
80004c04:	fce7f0e3          	bleu	a4,a5,80004bc4 <API_GetFreeTaskSlot+0x18>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:44
        }
    }
    prints("returning erro1\n");
80004c08:	800097b7          	lui	a5,0x80009
80004c0c:	cc878513          	addi	a0,a5,-824 # 80008cc8 <__stack_top+0xfffa8c28>
80004c10:	129010ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:45
    return ERRO;
80004c14:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:46
}
80004c18:	00078513          	mv	a0,a5
80004c1c:	01c12083          	lw	ra,28(sp)
80004c20:	01812403          	lw	s0,24(sp)
80004c24:	02010113          	addi	sp,sp,32
80004c28:	00008067          	ret

80004c2c <API_TaskAllocation>:
API_TaskAllocation():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:48

unsigned int API_TaskAllocation(unsigned int task_id, unsigned int txt_size, unsigned int bss_size, unsigned int start_point, unsigned int task_app_id){
80004c2c:	fc010113          	addi	sp,sp,-64
80004c30:	02112e23          	sw	ra,60(sp)
80004c34:	02812c23          	sw	s0,56(sp)
80004c38:	04010413          	addi	s0,sp,64
80004c3c:	fca42e23          	sw	a0,-36(s0)
80004c40:	fcb42c23          	sw	a1,-40(s0)
80004c44:	fcc42a23          	sw	a2,-44(s0)
80004c48:	fcd42823          	sw	a3,-48(s0)
80004c4c:	fce42623          	sw	a4,-52(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:49
    unsigned int tslot = API_GetFreeTaskSlot();
80004c50:	f5dff0ef          	jal	ra,80004bac <API_GetFreeTaskSlot>
80004c54:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:51
    int i;
    if(tslot == ERRO){
80004c58:	fe842703          	lw	a4,-24(s0)
80004c5c:	fff00793          	li	a5,-1
80004c60:	00f71863          	bne	a4,a5,80004c70 <API_TaskAllocation+0x44>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:52
        prints("DEU RUIM NO API_GetFreeTaskSlot()\n");
80004c64:	800097b7          	lui	a5,0x80009
80004c68:	cdc78513          	addi	a0,a5,-804 # 80008cdc <__stack_top+0xfffa8c3c>
80004c6c:	0cd010ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:54
    }
    printsv("Got slot: ", tslot);
80004c70:	fe842783          	lw	a5,-24(s0)
80004c74:	00078593          	mv	a1,a5
80004c78:	800097b7          	lui	a5,0x80009
80004c7c:	d0078513          	addi	a0,a5,-768 # 80008d00 <__stack_top+0xfffa8c60>
80004c80:	165010ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:55
    TaskList[tslot].status = TASK_SLOT_WAITING_START;
80004c84:	8003c7b7          	lui	a5,0x8003c
80004c88:	fe842683          	lw	a3,-24(s0)
80004c8c:	00001737          	lui	a4,0x1
80004c90:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80004c94:	02e68733          	mul	a4,a3,a4
80004c98:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80004c9c:	00f707b3          	add	a5,a4,a5
80004ca0:	00200713          	li	a4,2
80004ca4:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:56
    TaskList[tslot].waitingMsg = FALSE;
80004ca8:	8003c7b7          	lui	a5,0x8003c
80004cac:	fe842683          	lw	a3,-24(s0)
80004cb0:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80004cb4:	000017b7          	lui	a5,0x1
80004cb8:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80004cbc:	02f687b3          	mul	a5,a3,a5
80004cc0:	00f707b3          	add	a5,a4,a5
80004cc4:	0007ae23          	sw	zero,28(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:57
    TaskList[tslot].TaskID = task_id;
80004cc8:	8003c7b7          	lui	a5,0x8003c
80004ccc:	fe842683          	lw	a3,-24(s0)
80004cd0:	00001737          	lui	a4,0x1
80004cd4:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80004cd8:	02e68733          	mul	a4,a3,a4
80004cdc:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80004ce0:	00f707b3          	add	a5,a4,a5
80004ce4:	fdc42703          	lw	a4,-36(s0)
80004ce8:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:58
    TaskList[tslot].AppID = task_app_id;
80004cec:	8003c7b7          	lui	a5,0x8003c
80004cf0:	fe842683          	lw	a3,-24(s0)
80004cf4:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80004cf8:	000017b7          	lui	a5,0x1
80004cfc:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80004d00:	02f687b3          	mul	a5,a3,a5
80004d04:	00f707b3          	add	a5,a4,a5
80004d08:	fcc42703          	lw	a4,-52(s0)
80004d0c:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:59
    TaskList[tslot].taskSize = 4 * (txt_size + bss_size); // it multiply by four because each word has 32 bits and the memory is addressed by byte - so each word is composed by 4 addresses
80004d10:	fd842703          	lw	a4,-40(s0)
80004d14:	fd442783          	lw	a5,-44(s0)
80004d18:	00f707b3          	add	a5,a4,a5
80004d1c:	00279713          	slli	a4,a5,0x2
80004d20:	8003c7b7          	lui	a5,0x8003c
80004d24:	fe842603          	lw	a2,-24(s0)
80004d28:	76c78693          	addi	a3,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80004d2c:	000017b7          	lui	a5,0x1
80004d30:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80004d34:	02f607b3          	mul	a5,a2,a5
80004d38:	00f687b3          	add	a5,a3,a5
80004d3c:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:60
    printsv("Task total size (txt+bss): ", TaskList[tslot].taskSize);
80004d40:	8003c7b7          	lui	a5,0x8003c
80004d44:	fe842683          	lw	a3,-24(s0)
80004d48:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80004d4c:	000017b7          	lui	a5,0x1
80004d50:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80004d54:	02f687b3          	mul	a5,a3,a5
80004d58:	00f707b3          	add	a5,a4,a5
80004d5c:	0247a783          	lw	a5,36(a5)
80004d60:	00078593          	mv	a1,a5
80004d64:	800097b7          	lui	a5,0x80009
80004d68:	d0c78513          	addi	a0,a5,-756 # 80008d0c <__stack_top+0xfffa8c6c>
80004d6c:	079010ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:61
    TaskList[tslot].taskAddr = (unsigned int)pvPortMalloc(TaskList[tslot].taskSize+64);
80004d70:	8003c7b7          	lui	a5,0x8003c
80004d74:	fe842683          	lw	a3,-24(s0)
80004d78:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80004d7c:	000017b7          	lui	a5,0x1
80004d80:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80004d84:	02f687b3          	mul	a5,a3,a5
80004d88:	00f707b3          	add	a5,a4,a5
80004d8c:	0247a783          	lw	a5,36(a5)
80004d90:	04078793          	addi	a5,a5,64
80004d94:	00078513          	mv	a0,a5
80004d98:	d10fc0ef          	jal	ra,800012a8 <pvPortMalloc>
80004d9c:	00050793          	mv	a5,a0
80004da0:	00078613          	mv	a2,a5
80004da4:	8003c7b7          	lui	a5,0x8003c
80004da8:	fe842683          	lw	a3,-24(s0)
80004dac:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80004db0:	000017b7          	lui	a5,0x1
80004db4:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80004db8:	02f687b3          	mul	a5,a3,a5
80004dbc:	00f707b3          	add	a5,a4,a5
80004dc0:	02c7a423          	sw	a2,40(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:62
    printsv("Task addr: ", TaskList[tslot].taskAddr);
80004dc4:	8003c7b7          	lui	a5,0x8003c
80004dc8:	fe842683          	lw	a3,-24(s0)
80004dcc:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80004dd0:	000017b7          	lui	a5,0x1
80004dd4:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80004dd8:	02f687b3          	mul	a5,a3,a5
80004ddc:	00f707b3          	add	a5,a4,a5
80004de0:	0287a783          	lw	a5,40(a5)
80004de4:	00078593          	mv	a1,a5
80004de8:	800097b7          	lui	a5,0x80009
80004dec:	d2878513          	addi	a0,a5,-728 # 80008d28 <__stack_top+0xfffa8c88>
80004df0:	7f4010ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:63
    TaskList[tslot].mainAddr =  TaskList[tslot].taskAddr + (4 * start_point);
80004df4:	8003c7b7          	lui	a5,0x8003c
80004df8:	fe842683          	lw	a3,-24(s0)
80004dfc:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80004e00:	000017b7          	lui	a5,0x1
80004e04:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80004e08:	02f687b3          	mul	a5,a3,a5
80004e0c:	00f707b3          	add	a5,a4,a5
80004e10:	0287a703          	lw	a4,40(a5)
80004e14:	fd042783          	lw	a5,-48(s0)
80004e18:	00279793          	slli	a5,a5,0x2
80004e1c:	00f70733          	add	a4,a4,a5
80004e20:	8003c7b7          	lui	a5,0x8003c
80004e24:	fe842603          	lw	a2,-24(s0)
80004e28:	76c78693          	addi	a3,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80004e2c:	000017b7          	lui	a5,0x1
80004e30:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80004e34:	02f607b3          	mul	a5,a2,a5
80004e38:	00f687b3          	add	a5,a3,a5
80004e3c:	02e7a623          	sw	a4,44(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:69

    // filling the MemoryRegion_t struct
    //TaskList[tslot].memRegion.ulLengthInBytes = 0;// TaskList[tslot].taskSize;
    //TaskList[tslot].memRegion.pvBaseAddress = 0;//TaskList[tslot].taskAddr;

    for(i=0;i<NUM_MAX_APP_TASKS;i++){
80004e40:	fe042623          	sw	zero,-20(s0)
80004e44:	0680006f          	j	80004eac <API_TaskAllocation+0x280>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:70 (discriminator 3)
        TaskList[tslot].PendingReq[i] = FALSE;
80004e48:	8003c7b7          	lui	a5,0x8003c
80004e4c:	fe842683          	lw	a3,-24(s0)
80004e50:	26100713          	li	a4,609
80004e54:	02e686b3          	mul	a3,a3,a4
80004e58:	fec42703          	lw	a4,-20(s0)
80004e5c:	00e68733          	add	a4,a3,a4
80004e60:	24c70713          	addi	a4,a4,588
80004e64:	00271713          	slli	a4,a4,0x2
80004e68:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80004e6c:	00f707b3          	add	a5,a4,a5
80004e70:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:71 (discriminator 3)
        TaskList[tslot].TasksMap[i] = 0;
80004e74:	8003c737          	lui	a4,0x8003c
80004e78:	fe842683          	lw	a3,-24(s0)
80004e7c:	26100793          	li	a5,609
80004e80:	02f686b3          	mul	a3,a3,a5
80004e84:	fec42783          	lw	a5,-20(s0)
80004e88:	00f687b3          	add	a5,a3,a5
80004e8c:	25478793          	addi	a5,a5,596
80004e90:	76c70713          	addi	a4,a4,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80004e94:	00279793          	slli	a5,a5,0x2
80004e98:	00f707b3          	add	a5,a4,a5
80004e9c:	0007a623          	sw	zero,12(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:69 (discriminator 3)
    for(i=0;i<NUM_MAX_APP_TASKS;i++){
80004ea0:	fec42783          	lw	a5,-20(s0)
80004ea4:	00178793          	addi	a5,a5,1
80004ea8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:69 (discriminator 1)
80004eac:	fec42703          	lw	a4,-20(s0)
80004eb0:	00900793          	li	a5,9
80004eb4:	f8e7dae3          	ble	a4,a5,80004e48 <API_TaskAllocation+0x21c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:74
    }

    return tslot;
80004eb8:	fe842783          	lw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:75
}
80004ebc:	00078513          	mv	a0,a5
80004ec0:	03c12083          	lw	ra,60(sp)
80004ec4:	03812403          	lw	s0,56(sp)
80004ec8:	04010113          	addi	sp,sp,64
80004ecc:	00008067          	ret

80004ed0 <API_GetTaskSlot>:
API_GetTaskSlot():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:77

unsigned int API_GetTaskSlot(unsigned int task_id, unsigned int app_id){
80004ed0:	fd010113          	addi	sp,sp,-48
80004ed4:	02112623          	sw	ra,44(sp)
80004ed8:	02812423          	sw	s0,40(sp)
80004edc:	03010413          	addi	s0,sp,48
80004ee0:	fca42e23          	sw	a0,-36(s0)
80004ee4:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:79
    unsigned int i;
    for( i = 0; i < NUM_MAX_APP_TASKS; i++){
80004ee8:	fe042623          	sw	zero,-20(s0)
80004eec:	08c0006f          	j	80004f78 <API_GetTaskSlot+0xa8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:80
        if(task_id == TaskList[i].TaskID && app_id == TaskList[i].AppID && TaskList[i].status != TASK_SLOT_EMPTY)
80004ef0:	8003c7b7          	lui	a5,0x8003c
80004ef4:	fec42683          	lw	a3,-20(s0)
80004ef8:	00001737          	lui	a4,0x1
80004efc:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80004f00:	02e68733          	mul	a4,a3,a4
80004f04:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80004f08:	00f707b3          	add	a5,a4,a5
80004f0c:	0107a783          	lw	a5,16(a5)
80004f10:	fdc42703          	lw	a4,-36(s0)
80004f14:	04f71c63          	bne	a4,a5,80004f6c <API_GetTaskSlot+0x9c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:80 (discriminator 1)
80004f18:	8003c7b7          	lui	a5,0x8003c
80004f1c:	fec42683          	lw	a3,-20(s0)
80004f20:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80004f24:	000017b7          	lui	a5,0x1
80004f28:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80004f2c:	02f687b3          	mul	a5,a3,a5
80004f30:	00f707b3          	add	a5,a4,a5
80004f34:	0147a783          	lw	a5,20(a5)
80004f38:	fd842703          	lw	a4,-40(s0)
80004f3c:	02f71863          	bne	a4,a5,80004f6c <API_GetTaskSlot+0x9c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:80 (discriminator 2)
80004f40:	8003c7b7          	lui	a5,0x8003c
80004f44:	fec42683          	lw	a3,-20(s0)
80004f48:	00001737          	lui	a4,0x1
80004f4c:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80004f50:	02e68733          	mul	a4,a3,a4
80004f54:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80004f58:	00f707b3          	add	a5,a4,a5
80004f5c:	0007a783          	lw	a5,0(a5)
80004f60:	00078663          	beqz	a5,80004f6c <API_GetTaskSlot+0x9c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:81
            return i;
80004f64:	fec42783          	lw	a5,-20(s0)
80004f68:	02c0006f          	j	80004f94 <API_GetTaskSlot+0xc4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:79 (discriminator 2)
    for( i = 0; i < NUM_MAX_APP_TASKS; i++){
80004f6c:	fec42783          	lw	a5,-20(s0)
80004f70:	00178793          	addi	a5,a5,1
80004f74:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:79 (discriminator 1)
80004f78:	fec42703          	lw	a4,-20(s0)
80004f7c:	00900793          	li	a5,9
80004f80:	f6e7f8e3          	bleu	a4,a5,80004ef0 <API_GetTaskSlot+0x20>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:83
    }
    prints("returning erro2\n");
80004f84:	800097b7          	lui	a5,0x80009
80004f88:	d3478513          	addi	a0,a5,-716 # 80008d34 <__stack_top+0xfffa8c94>
80004f8c:	5ac010ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:84
    return ERRO;
80004f90:	fff00793          	li	a5,-1
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:85
}
80004f94:	00078513          	mv	a0,a5
80004f98:	02c12083          	lw	ra,44(sp)
80004f9c:	02812403          	lw	s0,40(sp)
80004fa0:	03010113          	addi	sp,sp,48
80004fa4:	00008067          	ret

80004fa8 <API_TaskStart>:
API_TaskStart():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:87

void API_TaskStart(unsigned int slot){
80004fa8:	fd010113          	addi	sp,sp,-48
80004fac:	02112623          	sw	ra,44(sp)
80004fb0:	02812423          	sw	s0,40(sp)
80004fb4:	03010413          	addi	s0,sp,48
80004fb8:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:89
    BaseType_t xReturned;
    TaskList[slot].status = TASK_SLOT_RUNNING;
80004fbc:	8003c7b7          	lui	a5,0x8003c
80004fc0:	fdc42683          	lw	a3,-36(s0)
80004fc4:	00001737          	lui	a4,0x1
80004fc8:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80004fcc:	02e68733          	mul	a4,a3,a4
80004fd0:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80004fd4:	00f707b3          	add	a5,a4,a5
80004fd8:	00100713          	li	a4,1
80004fdc:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:100
                                    tskIDLE_PRIORITY+1,         //uxPriority
                                    &TaskList[slot].TaskHandler,// pxCreatedTask
                                    NULL,                       // puxStackBuffer
                                    &TaskList[slot].memRegion );//xRegions*/
    
    xReturned = xTaskCreate(TaskList[slot].mainAddr,
80004fe0:	8003c7b7          	lui	a5,0x8003c
80004fe4:	fdc42683          	lw	a3,-36(s0)
80004fe8:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80004fec:	000017b7          	lui	a5,0x1
80004ff0:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80004ff4:	02f687b3          	mul	a5,a3,a5
80004ff8:	00f707b3          	add	a5,a4,a5
80004ffc:	02c7a783          	lw	a5,44(a5)
80005000:	00078513          	mv	a0,a5
80005004:	fdc42703          	lw	a4,-36(s0)
80005008:	000017b7          	lui	a5,0x1
8000500c:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80005010:	02f707b3          	mul	a5,a4,a5
80005014:	01078713          	addi	a4,a5,16
80005018:	8003c7b7          	lui	a5,0x8003c
8000501c:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80005020:	00f707b3          	add	a5,a4,a5
80005024:	00878793          	addi	a5,a5,8
80005028:	00000893          	li	a7,0
8000502c:	00000813          	li	a6,0
80005030:	00100713          	li	a4,1
80005034:	00000693          	li	a3,0
80005038:	00001637          	lui	a2,0x1
8000503c:	800095b7          	lui	a1,0x80009
80005040:	d4858593          	addi	a1,a1,-696 # 80008d48 <__stack_top+0xfffa8ca8>
80005044:	ee9fc0ef          	jal	ra,80001f2c <xTaskGenericCreate>
80005048:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:106
                            "LaTask",
                            4096,//8192,//4096,//16384,
                            NULL,
                            tskIDLE_PRIORITY+1,
                            &TaskList[slot].TaskHandler);
    if( xReturned != pdPASS ){
8000504c:	fec42703          	lw	a4,-20(s0)
80005050:	00100793          	li	a5,1
80005054:	00f70a63          	beq	a4,a5,80005068 <API_TaskStart+0xc0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:107
        prints("ERROR - API_TaskStart!!!\n");
80005058:	800097b7          	lui	a5,0x80009
8000505c:	d5078513          	addi	a0,a5,-688 # 80008d50 <__stack_top+0xfffa8cb0>
80005060:	4d8010ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:109
    }
    return;
80005064:	00000013          	nop
80005068:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:110
}
8000506c:	02c12083          	lw	ra,44(sp)
80005070:	02812403          	lw	s0,40(sp)
80005074:	03010113          	addi	sp,sp,48
80005078:	00008067          	ret

8000507c <API_FinishRunningTask>:
API_FinishRunningTask():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:113


void API_FinishRunningTask(){
8000507c:	fe010113          	addi	sp,sp,-32
80005080:	00112e23          	sw	ra,28(sp)
80005084:	00812c23          	sw	s0,24(sp)
80005088:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:115
    int i;
    unsigned int slot = API_GetCurrentTaskSlot();
8000508c:	a6dff0ef          	jal	ra,80004af8 <API_GetCurrentTaskSlot>
80005090:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:116
    printsvsv("Finishing task:", TaskList[slot].TaskID, "app: ", TaskList[slot].AppID);
80005094:	8003c7b7          	lui	a5,0x8003c
80005098:	fe842683          	lw	a3,-24(s0)
8000509c:	00001737          	lui	a4,0x1
800050a0:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
800050a4:	02e68733          	mul	a4,a3,a4
800050a8:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
800050ac:	00f707b3          	add	a5,a4,a5
800050b0:	0107a783          	lw	a5,16(a5)
800050b4:	00078593          	mv	a1,a5
800050b8:	8003c7b7          	lui	a5,0x8003c
800050bc:	fe842683          	lw	a3,-24(s0)
800050c0:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
800050c4:	000017b7          	lui	a5,0x1
800050c8:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
800050cc:	02f687b3          	mul	a5,a3,a5
800050d0:	00f707b3          	add	a5,a4,a5
800050d4:	0147a783          	lw	a5,20(a5)
800050d8:	00078693          	mv	a3,a5
800050dc:	800097b7          	lui	a5,0x80009
800050e0:	d6c78613          	addi	a2,a5,-660 # 80008d6c <__stack_top+0xfffa8ccc>
800050e4:	800097b7          	lui	a5,0x80009
800050e8:	d7478513          	addi	a0,a5,-652 # 80008d74 <__stack_top+0xfffa8cd4>
800050ec:	540010ef          	jal	ra,8000662c <printsvsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:117
    printsv("From slot: ", slot);
800050f0:	fe842783          	lw	a5,-24(s0)
800050f4:	00078593          	mv	a1,a5
800050f8:	800097b7          	lui	a5,0x80009
800050fc:	d8478513          	addi	a0,a5,-636 # 80008d84 <__stack_top+0xfffa8ce4>
80005100:	4e4010ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:118
    while(API_checkPipe(slot) == 1){
80005104:	00c0006f          	j	80005110 <API_FinishRunningTask+0x94>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:119
        vTaskDelay(1);
80005108:	00100513          	li	a0,1
8000510c:	918fd0ef          	jal	ra,80002224 <vTaskDelay>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:118
    while(API_checkPipe(slot) == 1){
80005110:	fe842503          	lw	a0,-24(s0)
80005114:	009000ef          	jal	ra,8000591c <API_checkPipe>
80005118:	00050713          	mv	a4,a0
8000511c:	00100793          	li	a5,1
80005120:	fef704e3          	beq	a4,a5,80005108 <API_FinishRunningTask+0x8c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:121
    }
    vTaskEnterCritical();
80005124:	f15fd0ef          	jal	ra,80003038 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:122
    printsvsv("Task ", TaskList[slot].TaskID, "deleted with sucsess! From application ", TaskList[slot].AppID);
80005128:	8003c7b7          	lui	a5,0x8003c
8000512c:	fe842683          	lw	a3,-24(s0)
80005130:	00001737          	lui	a4,0x1
80005134:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80005138:	02e68733          	mul	a4,a3,a4
8000513c:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80005140:	00f707b3          	add	a5,a4,a5
80005144:	0107a783          	lw	a5,16(a5)
80005148:	00078593          	mv	a1,a5
8000514c:	8003c7b7          	lui	a5,0x8003c
80005150:	fe842683          	lw	a3,-24(s0)
80005154:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80005158:	000017b7          	lui	a5,0x1
8000515c:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80005160:	02f687b3          	mul	a5,a3,a5
80005164:	00f707b3          	add	a5,a4,a5
80005168:	0147a783          	lw	a5,20(a5)
8000516c:	00078693          	mv	a3,a5
80005170:	800097b7          	lui	a5,0x80009
80005174:	d9078613          	addi	a2,a5,-624 # 80008d90 <__stack_top+0xfffa8cf0>
80005178:	800097b7          	lui	a5,0x80009
8000517c:	db878513          	addi	a0,a5,-584 # 80008db8 <__stack_top+0xfffa8d18>
80005180:	4ac010ef          	jal	ra,8000662c <printsvsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:123
    TaskList[slot].status = TASK_SLOT_EMPTY;
80005184:	8003c7b7          	lui	a5,0x8003c
80005188:	fe842683          	lw	a3,-24(s0)
8000518c:	00001737          	lui	a4,0x1
80005190:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80005194:	02e68733          	mul	a4,a3,a4
80005198:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
8000519c:	00f707b3          	add	a5,a4,a5
800051a0:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:125
    
    for(i = 0; i < NUM_MAX_TASKS; i++){
800051a4:	fe042623          	sw	zero,-20(s0)
800051a8:	0b80006f          	j	80005260 <API_FinishRunningTask+0x1e4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:126
        printsvsv("TaskList[", i, "]status: ", TaskList[i].status );
800051ac:	8003c7b7          	lui	a5,0x8003c
800051b0:	fec42683          	lw	a3,-20(s0)
800051b4:	00001737          	lui	a4,0x1
800051b8:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
800051bc:	02e68733          	mul	a4,a3,a4
800051c0:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
800051c4:	00f707b3          	add	a5,a4,a5
800051c8:	0007a783          	lw	a5,0(a5)
800051cc:	00078693          	mv	a3,a5
800051d0:	800097b7          	lui	a5,0x80009
800051d4:	dc078613          	addi	a2,a5,-576 # 80008dc0 <__stack_top+0xfffa8d20>
800051d8:	fec42583          	lw	a1,-20(s0)
800051dc:	800097b7          	lui	a5,0x80009
800051e0:	dcc78513          	addi	a0,a5,-564 # 80008dcc <__stack_top+0xfffa8d2c>
800051e4:	448010ef          	jal	ra,8000662c <printsvsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:127
        if(TaskList[i].status != TASK_SLOT_EMPTY){
800051e8:	8003c7b7          	lui	a5,0x8003c
800051ec:	fec42683          	lw	a3,-20(s0)
800051f0:	00001737          	lui	a4,0x1
800051f4:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
800051f8:	02e68733          	mul	a4,a3,a4
800051fc:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80005200:	00f707b3          	add	a5,a4,a5
80005204:	0007a783          	lw	a5,0(a5)
80005208:	04078663          	beqz	a5,80005254 <API_FinishRunningTask+0x1d8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:128
            printsvsv("Returning because of: ", i, "TaskList[i].status ", TaskList[i].status);
8000520c:	8003c7b7          	lui	a5,0x8003c
80005210:	fec42683          	lw	a3,-20(s0)
80005214:	00001737          	lui	a4,0x1
80005218:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
8000521c:	02e68733          	mul	a4,a3,a4
80005220:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80005224:	00f707b3          	add	a5,a4,a5
80005228:	0007a783          	lw	a5,0(a5)
8000522c:	00078693          	mv	a3,a5
80005230:	800097b7          	lui	a5,0x80009
80005234:	dd878613          	addi	a2,a5,-552 # 80008dd8 <__stack_top+0xfffa8d38>
80005238:	fec42583          	lw	a1,-20(s0)
8000523c:	800097b7          	lui	a5,0x80009
80005240:	dec78513          	addi	a0,a5,-532 # 80008dec <__stack_top+0xfffa8d4c>
80005244:	3e8010ef          	jal	ra,8000662c <printsvsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:129
            i = 0xffffffff;
80005248:	fff00793          	li	a5,-1
8000524c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:130
            break;
80005250:	01c0006f          	j	8000526c <API_FinishRunningTask+0x1f0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:125 (discriminator 2)
    for(i = 0; i < NUM_MAX_TASKS; i++){
80005254:	fec42783          	lw	a5,-20(s0)
80005258:	00178793          	addi	a5,a5,1
8000525c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:125 (discriminator 1)
80005260:	fec42703          	lw	a4,-20(s0)
80005264:	00500793          	li	a5,5
80005268:	f4e7d2e3          	ble	a4,a5,800051ac <API_FinishRunningTask+0x130>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:133
        }
    }
    if(i != 0xffffffff){
8000526c:	fec42703          	lw	a4,-20(s0)
80005270:	fff00793          	li	a5,-1
80005274:	00f70463          	beq	a4,a5,8000527c <API_FinishRunningTask+0x200>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:134
        API_setFreqIdle();
80005278:	7b4000ef          	jal	ra,80005a2c <API_setFreqIdle>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:136
    }
    API_SendFinishTask(TaskList[slot].TaskID, TaskList[slot].AppID);
8000527c:	8003c7b7          	lui	a5,0x8003c
80005280:	fe842683          	lw	a3,-24(s0)
80005284:	00001737          	lui	a4,0x1
80005288:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
8000528c:	02e68733          	mul	a4,a3,a4
80005290:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80005294:	00f707b3          	add	a5,a4,a5
80005298:	0107a603          	lw	a2,16(a5)
8000529c:	8003c7b7          	lui	a5,0x8003c
800052a0:	fe842683          	lw	a3,-24(s0)
800052a4:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
800052a8:	000017b7          	lui	a5,0x1
800052ac:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
800052b0:	02f687b3          	mul	a5,a3,a5
800052b4:	00f707b3          	add	a5,a4,a5
800052b8:	0147a783          	lw	a5,20(a5)
800052bc:	00078593          	mv	a1,a5
800052c0:	00060513          	mv	a0,a2
800052c4:	29c020ef          	jal	ra,80007560 <API_SendFinishTask>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:137
    vPortFree(TaskList[slot].taskAddr);
800052c8:	8003c7b7          	lui	a5,0x8003c
800052cc:	fe842683          	lw	a3,-24(s0)
800052d0:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
800052d4:	000017b7          	lui	a5,0x1
800052d8:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
800052dc:	02f687b3          	mul	a5,a3,a5
800052e0:	00f707b3          	add	a5,a4,a5
800052e4:	0287a783          	lw	a5,40(a5)
800052e8:	00078513          	mv	a0,a5
800052ec:	998fc0ef          	jal	ra,80001484 <vPortFree>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:138
    vTaskExitCritical();
800052f0:	d85fd0ef          	jal	ra,80003074 <vTaskExitCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:139
    vTaskDelete(TaskList[slot].TaskHandler);
800052f4:	8003c7b7          	lui	a5,0x8003c
800052f8:	fe842683          	lw	a3,-24(s0)
800052fc:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80005300:	000017b7          	lui	a5,0x1
80005304:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80005308:	02f687b3          	mul	a5,a3,a5
8000530c:	00f707b3          	add	a5,a4,a5
80005310:	0187a783          	lw	a5,24(a5)
80005314:	00078513          	mv	a0,a5
80005318:	e31fc0ef          	jal	ra,80002148 <vTaskDelete>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:140
    return;
8000531c:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/applications.c:141
}
80005320:	01c12083          	lw	ra,28(sp)
80005324:	01812403          	lw	s0,24(sp)
80005328:	02010113          	addi	sp,sp,32
8000532c:	00008067          	ret

80005330 <API_PipeInitialization>:
API_PipeInitialization():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:14

extern unsigned int thermalPacket_pending; // from thermal.h

////////////////////////////////////////////////////////////
// Initialize the PIPE, setting the status of each slot to FREE
void API_PipeInitialization(){
80005330:	fe010113          	addi	sp,sp,-32
80005334:	00812e23          	sw	s0,28(sp)
80005338:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:16
    int i, j;
    messageID = 0;
8000533c:	8003c7b7          	lui	a5,0x8003c
80005340:	8e07a823          	sw	zero,-1808(a5) # 8003b8f0 <__stack_top+0xfffdb850>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:17
    ServiceMessage.status = PIPE_FREE;
80005344:	8003c7b7          	lui	a5,0x8003c
80005348:	fff00713          	li	a4,-1
8000534c:	8ee7aa23          	sw	a4,-1804(a5) # 8003b8f4 <__stack_top+0xfffdb854>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:18
    for( i = 0; i < PIPE_SIZE; i++ ){
80005350:	fe042623          	sw	zero,-20(s0)
80005354:	0cc0006f          	j	80005420 <API_PipeInitialization+0xf0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:19
        for(j = 0; j < NUM_MAX_TASKS; j++){
80005358:	fe042423          	sw	zero,-24(s0)
8000535c:	0840006f          	j	800053e0 <API_PipeInitialization+0xb0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:20 (discriminator 3)
            TaskList[j].MessagePipe[i].status = PIPE_FREE;
80005360:	8003c6b7          	lui	a3,0x8003c
80005364:	fec42703          	lw	a4,-20(s0)
80005368:	fe842603          	lw	a2,-24(s0)
8000536c:	00070793          	mv	a5,a4
80005370:	00379793          	slli	a5,a5,0x3
80005374:	00e787b3          	add	a5,a5,a4
80005378:	00679793          	slli	a5,a5,0x6
8000537c:	00001737          	lui	a4,0x1
80005380:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80005384:	02e60733          	mul	a4,a2,a4
80005388:	00e78733          	add	a4,a5,a4
8000538c:	76c68793          	addi	a5,a3,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80005390:	00f707b3          	add	a5,a4,a5
80005394:	fff00713          	li	a4,-1
80005398:	02e7a823          	sw	a4,48(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:21 (discriminator 3)
            TaskList[j].MessagePipe[i].msgID  = 0;
8000539c:	8003c7b7          	lui	a5,0x8003c
800053a0:	fec42703          	lw	a4,-20(s0)
800053a4:	fe842603          	lw	a2,-24(s0)
800053a8:	76c78693          	addi	a3,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
800053ac:	00070793          	mv	a5,a4
800053b0:	00379793          	slli	a5,a5,0x3
800053b4:	00e787b3          	add	a5,a5,a4
800053b8:	00679793          	slli	a5,a5,0x6
800053bc:	00001737          	lui	a4,0x1
800053c0:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
800053c4:	02e60733          	mul	a4,a2,a4
800053c8:	00e787b3          	add	a5,a5,a4
800053cc:	00f687b3          	add	a5,a3,a5
800053d0:	0207aa23          	sw	zero,52(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:19 (discriminator 3)
        for(j = 0; j < NUM_MAX_TASKS; j++){
800053d4:	fe842783          	lw	a5,-24(s0)
800053d8:	00178793          	addi	a5,a5,1
800053dc:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:19 (discriminator 1)
800053e0:	fe842703          	lw	a4,-24(s0)
800053e4:	00500793          	li	a5,5
800053e8:	f6e7dce3          	ble	a4,a5,80005360 <API_PipeInitialization+0x30>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:23 (discriminator 2)
        }        
        ServicePipe[i].status = PIPE_FREE;
800053ec:	8003b6b7          	lui	a3,0x8003b
800053f0:	fec42703          	lw	a4,-20(s0)
800053f4:	00070793          	mv	a5,a4
800053f8:	00479793          	slli	a5,a5,0x4
800053fc:	40e787b3          	sub	a5,a5,a4
80005400:	00279793          	slli	a5,a5,0x2
80005404:	7fc68713          	addi	a4,a3,2044 # 8003b7fc <__stack_top+0xfffdb75c>
80005408:	00e787b3          	add	a5,a5,a4
8000540c:	fff00713          	li	a4,-1
80005410:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:18 (discriminator 2)
    for( i = 0; i < PIPE_SIZE; i++ ){
80005414:	fec42783          	lw	a5,-20(s0)
80005418:	00178793          	addi	a5,a5,1
8000541c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:18 (discriminator 1)
80005420:	fec42703          	lw	a4,-20(s0)
80005424:	00300793          	li	a5,3
80005428:	f2e7d8e3          	ble	a4,a5,80005358 <API_PipeInitialization+0x28>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:25
    }
    return;
8000542c:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:26
}
80005430:	01c12403          	lw	s0,28(sp)
80005434:	02010113          	addi	sp,sp,32
80005438:	00008067          	ret

8000543c <API_GetMessageSlot>:
API_GetMessageSlot():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:30

////////////////////////////////////////////////////////////
// Returns a free Message slot 
unsigned int API_GetMessageSlot(){
8000543c:	fe010113          	addi	sp,sp,-32
80005440:	00112e23          	sw	ra,28(sp)
80005444:	00812c23          	sw	s0,24(sp)
80005448:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:32
    int i;
    unsigned int sel = PIPE_FULL;
8000544c:	fdfe07b7          	lui	a5,0xfdfe0
80005450:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df7fd5d>
80005454:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:33
    unsigned int currTask = API_GetCurrentTaskSlot();
80005458:	ea0ff0ef          	jal	ra,80004af8 <API_GetCurrentTaskSlot>
8000545c:	fea42223          	sw	a0,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:34
    vTaskEnterCritical();
80005460:	bd9fd0ef          	jal	ra,80003038 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:35
    for( i = 0; i < PIPE_SIZE; i++ ){
80005464:	fe042623          	sw	zero,-20(s0)
80005468:	0f80006f          	j	80005560 <API_GetMessageSlot+0x124>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:36
        if (TaskList[currTask].MessagePipe[i].status == PIPE_FREE){
8000546c:	8003c6b7          	lui	a3,0x8003c
80005470:	fec42703          	lw	a4,-20(s0)
80005474:	fe442603          	lw	a2,-28(s0)
80005478:	00070793          	mv	a5,a4
8000547c:	00379793          	slli	a5,a5,0x3
80005480:	00e787b3          	add	a5,a5,a4
80005484:	00679793          	slli	a5,a5,0x6
80005488:	00001737          	lui	a4,0x1
8000548c:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80005490:	02e60733          	mul	a4,a2,a4
80005494:	00e78733          	add	a4,a5,a4
80005498:	76c68793          	addi	a5,a3,1900 # 8003c76c <__stack_top+0xfffdc6cc>
8000549c:	00f707b3          	add	a5,a4,a5
800054a0:	0307a703          	lw	a4,48(a5)
800054a4:	fff00793          	li	a5,-1
800054a8:	0af71663          	bne	a4,a5,80005554 <API_GetMessageSlot+0x118>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:37
            TaskList[currTask].MessagePipe[i].status = PIPE_OCCUPIED;
800054ac:	8003c6b7          	lui	a3,0x8003c
800054b0:	fec42703          	lw	a4,-20(s0)
800054b4:	fe442603          	lw	a2,-28(s0)
800054b8:	00070793          	mv	a5,a4
800054bc:	00379793          	slli	a5,a5,0x3
800054c0:	00e787b3          	add	a5,a5,a4
800054c4:	00679793          	slli	a5,a5,0x6
800054c8:	00001737          	lui	a4,0x1
800054cc:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
800054d0:	02e60733          	mul	a4,a2,a4
800054d4:	00e78733          	add	a4,a5,a4
800054d8:	76c68793          	addi	a5,a3,1900 # 8003c76c <__stack_top+0xfffdc6cc>
800054dc:	00f707b3          	add	a5,a4,a5
800054e0:	00100713          	li	a4,1
800054e4:	02e7a823          	sw	a4,48(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:38
            TaskList[currTask].MessagePipe[i].msgID = messageID;
800054e8:	8003c7b7          	lui	a5,0x8003c
800054ec:	8f07a683          	lw	a3,-1808(a5) # 8003b8f0 <__stack_top+0xfffdb850>
800054f0:	8003c7b7          	lui	a5,0x8003c
800054f4:	fec42703          	lw	a4,-20(s0)
800054f8:	fe442583          	lw	a1,-28(s0)
800054fc:	76c78613          	addi	a2,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80005500:	00070793          	mv	a5,a4
80005504:	00379793          	slli	a5,a5,0x3
80005508:	00e787b3          	add	a5,a5,a4
8000550c:	00679793          	slli	a5,a5,0x6
80005510:	00001737          	lui	a4,0x1
80005514:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80005518:	02e58733          	mul	a4,a1,a4
8000551c:	00e787b3          	add	a5,a5,a4
80005520:	00f607b3          	add	a5,a2,a5
80005524:	02d7aa23          	sw	a3,52(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:39
            messageID++;
80005528:	8003c7b7          	lui	a5,0x8003c
8000552c:	8f07a783          	lw	a5,-1808(a5) # 8003b8f0 <__stack_top+0xfffdb850>
80005530:	00178713          	addi	a4,a5,1
80005534:	8003c7b7          	lui	a5,0x8003c
80005538:	8ee7a823          	sw	a4,-1808(a5) # 8003b8f0 <__stack_top+0xfffdb850>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:40
            sel = (currTask << 8) | i;
8000553c:	fe442783          	lw	a5,-28(s0)
80005540:	00879713          	slli	a4,a5,0x8
80005544:	fec42783          	lw	a5,-20(s0)
80005548:	00f767b3          	or	a5,a4,a5
8000554c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:41
            break;
80005550:	01c0006f          	j	8000556c <API_GetMessageSlot+0x130>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:35 (discriminator 2)
    for( i = 0; i < PIPE_SIZE; i++ ){
80005554:	fec42783          	lw	a5,-20(s0)
80005558:	00178793          	addi	a5,a5,1
8000555c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:35 (discriminator 1)
80005560:	fec42703          	lw	a4,-20(s0)
80005564:	00300793          	li	a5,3
80005568:	f0e7d2e3          	ble	a4,a5,8000546c <API_GetMessageSlot+0x30>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:44
        }
    }
    if(messageID > 0X0FFFFFF0){
8000556c:	8003c7b7          	lui	a5,0x8003c
80005570:	8f07a703          	lw	a4,-1808(a5) # 8003b8f0 <__stack_top+0xfffdb850>
80005574:	100007b7          	lui	a5,0x10000
80005578:	ff078793          	addi	a5,a5,-16 # ffffff0 <RAM_SIZE+0xff7fff0>
8000557c:	0ae7f263          	bleu	a4,a5,80005620 <API_GetMessageSlot+0x1e4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:45
        messageID = 256;
80005580:	8003c7b7          	lui	a5,0x8003c
80005584:	10000713          	li	a4,256
80005588:	8ee7a823          	sw	a4,-1808(a5) # 8003b8f0 <__stack_top+0xfffdb850>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:46
        for( i = 0; i < PIPE_SIZE; i++ ){
8000558c:	fe042623          	sw	zero,-20(s0)
80005590:	0840006f          	j	80005614 <API_GetMessageSlot+0x1d8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:47 (discriminator 3)
            TaskList[currTask].MessagePipe[i].msgID = (TaskList[currTask].MessagePipe[i].msgID & 0x000000FF);
80005594:	8003c7b7          	lui	a5,0x8003c
80005598:	fec42703          	lw	a4,-20(s0)
8000559c:	fe442603          	lw	a2,-28(s0)
800055a0:	76c78693          	addi	a3,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
800055a4:	00070793          	mv	a5,a4
800055a8:	00379793          	slli	a5,a5,0x3
800055ac:	00e787b3          	add	a5,a5,a4
800055b0:	00679793          	slli	a5,a5,0x6
800055b4:	00001737          	lui	a4,0x1
800055b8:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
800055bc:	02e60733          	mul	a4,a2,a4
800055c0:	00e787b3          	add	a5,a5,a4
800055c4:	00f687b3          	add	a5,a3,a5
800055c8:	0347a783          	lw	a5,52(a5)
800055cc:	0ff7f693          	andi	a3,a5,255
800055d0:	8003c7b7          	lui	a5,0x8003c
800055d4:	fec42703          	lw	a4,-20(s0)
800055d8:	fe442583          	lw	a1,-28(s0)
800055dc:	76c78613          	addi	a2,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
800055e0:	00070793          	mv	a5,a4
800055e4:	00379793          	slli	a5,a5,0x3
800055e8:	00e787b3          	add	a5,a5,a4
800055ec:	00679793          	slli	a5,a5,0x6
800055f0:	00001737          	lui	a4,0x1
800055f4:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
800055f8:	02e58733          	mul	a4,a1,a4
800055fc:	00e787b3          	add	a5,a5,a4
80005600:	00f607b3          	add	a5,a2,a5
80005604:	02d7aa23          	sw	a3,52(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:46 (discriminator 3)
        for( i = 0; i < PIPE_SIZE; i++ ){
80005608:	fec42783          	lw	a5,-20(s0)
8000560c:	00178793          	addi	a5,a5,1
80005610:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:46 (discriminator 1)
80005614:	fec42703          	lw	a4,-20(s0)
80005618:	00300793          	li	a5,3
8000561c:	f6e7dce3          	ble	a4,a5,80005594 <API_GetMessageSlot+0x158>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:50
        }
    }
    vTaskExitCritical();
80005620:	a55fd0ef          	jal	ra,80003074 <vTaskExitCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:51
    return sel;
80005624:	fe842783          	lw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:52
}
80005628:	00078513          	mv	a0,a5
8000562c:	01c12083          	lw	ra,28(sp)
80005630:	01812403          	lw	s0,24(sp)
80005634:	02010113          	addi	sp,sp,32
80005638:	00008067          	ret

8000563c <API_GetServiceSlot>:
API_GetServiceSlot():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:56

////////////////////////////////////////////////////////////
// Returns a free Service slot
unsigned int API_GetServiceSlot(){
8000563c:	fe010113          	addi	sp,sp,-32
80005640:	00112e23          	sw	ra,28(sp)
80005644:	00812c23          	sw	s0,24(sp)
80005648:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:58
    int i;
    vTaskEnterCritical();
8000564c:	9edfd0ef          	jal	ra,80003038 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:59
    for( i = 0; i < PIPE_SIZE; i++ ){
80005650:	fe042623          	sw	zero,-20(s0)
80005654:	0700006f          	j	800056c4 <API_GetServiceSlot+0x88>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:60
        if (ServicePipe[i].status == PIPE_FREE){
80005658:	8003b6b7          	lui	a3,0x8003b
8000565c:	fec42703          	lw	a4,-20(s0)
80005660:	00070793          	mv	a5,a4
80005664:	00479793          	slli	a5,a5,0x4
80005668:	40e787b3          	sub	a5,a5,a4
8000566c:	00279793          	slli	a5,a5,0x2
80005670:	7fc68713          	addi	a4,a3,2044 # 8003b7fc <__stack_top+0xfffdb75c>
80005674:	00e787b3          	add	a5,a5,a4
80005678:	0007a703          	lw	a4,0(a5)
8000567c:	fff00793          	li	a5,-1
80005680:	02f71c63          	bne	a4,a5,800056b8 <API_GetServiceSlot+0x7c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:61
            ServicePipe[i].status = PIPE_OCCUPIED;
80005684:	8003b6b7          	lui	a3,0x8003b
80005688:	fec42703          	lw	a4,-20(s0)
8000568c:	00070793          	mv	a5,a4
80005690:	00479793          	slli	a5,a5,0x4
80005694:	40e787b3          	sub	a5,a5,a4
80005698:	00279793          	slli	a5,a5,0x2
8000569c:	7fc68713          	addi	a4,a3,2044 # 8003b7fc <__stack_top+0xfffdb75c>
800056a0:	00e787b3          	add	a5,a5,a4
800056a4:	00100713          	li	a4,1
800056a8:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:62
            vTaskExitCritical();
800056ac:	9c9fd0ef          	jal	ra,80003074 <vTaskExitCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:63
            return i;
800056b0:	fec42783          	lw	a5,-20(s0)
800056b4:	0280006f          	j	800056dc <API_GetServiceSlot+0xa0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:59 (discriminator 2)
    for( i = 0; i < PIPE_SIZE; i++ ){
800056b8:	fec42783          	lw	a5,-20(s0)
800056bc:	00178793          	addi	a5,a5,1
800056c0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:59 (discriminator 1)
800056c4:	fec42703          	lw	a4,-20(s0)
800056c8:	00300793          	li	a5,3
800056cc:	f8e7d6e3          	ble	a4,a5,80005658 <API_GetServiceSlot+0x1c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:66
        }
    }
    vTaskExitCritical();
800056d0:	9a5fd0ef          	jal	ra,80003074 <vTaskExitCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:67
    return PIPE_FULL;
800056d4:	fdfe07b7          	lui	a5,0xfdfe0
800056d8:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df7fd5d>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:68
}
800056dc:	00078513          	mv	a0,a5
800056e0:	01c12083          	lw	ra,28(sp)
800056e4:	01812403          	lw	s0,24(sp)
800056e8:	02010113          	addi	sp,sp,32
800056ec:	00008067          	ret

800056f0 <API_ClearPipeSlot>:
API_ClearPipeSlot():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:72

////////////////////////////////////////////////////////////
// Clear one PipeSlot after send it
void API_ClearPipeSlot(unsigned int typeSlot){
800056f0:	fc010113          	addi	sp,sp,-64
800056f4:	02112e23          	sw	ra,60(sp)
800056f8:	02812c23          	sw	s0,56(sp)
800056fc:	04010413          	addi	s0,sp,64
80005700:	fca42623          	sw	a0,-52(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:73
    unsigned int type =   typeSlot & 0xFFFF0000;
80005704:	fcc42703          	lw	a4,-52(s0)
80005708:	ffff07b7          	lui	a5,0xffff0
8000570c:	00f777b3          	and	a5,a4,a5
80005710:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:74
    unsigned int taskID = (typeSlot & 0x0000FF00) >> 8;
80005714:	fcc42783          	lw	a5,-52(s0)
80005718:	0087d793          	srli	a5,a5,0x8
8000571c:	0ff7f793          	andi	a5,a5,255
80005720:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:75
    unsigned int slot =   typeSlot & 0x000000FF;
80005724:	fcc42783          	lw	a5,-52(s0)
80005728:	0ff7f793          	andi	a5,a5,255
8000572c:	fcf42e23          	sw	a5,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:78
    unsigned int i, j;
    
    if (type == SERVICE){
80005730:	fe442703          	lw	a4,-28(s0)
80005734:	101007b7          	lui	a5,0x10100
80005738:	04f71c63          	bne	a4,a5,80005790 <API_ClearPipeSlot+0xa0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:79
        ServicePipe[slot].status = PIPE_FREE;
8000573c:	8003b6b7          	lui	a3,0x8003b
80005740:	fdc42703          	lw	a4,-36(s0)
80005744:	00070793          	mv	a5,a4
80005748:	00479793          	slli	a5,a5,0x4
8000574c:	40e787b3          	sub	a5,a5,a4
80005750:	00279793          	slli	a5,a5,0x2
80005754:	7fc68713          	addi	a4,a3,2044 # 8003b7fc <__stack_top+0xfffdb75c>
80005758:	00e787b3          	add	a5,a5,a4
8000575c:	fff00713          	li	a4,-1
80005760:	00e7a023          	sw	a4,0(a5) # 10100000 <RAM_SIZE+0x10080000>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:80
        ServicePipe[slot].holder = PIPE_FREE;
80005764:	8003b7b7          	lui	a5,0x8003b
80005768:	fdc42703          	lw	a4,-36(s0)
8000576c:	7fc78693          	addi	a3,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
80005770:	00070793          	mv	a5,a4
80005774:	00479793          	slli	a5,a5,0x4
80005778:	40e787b3          	sub	a5,a5,a4
8000577c:	00279793          	slli	a5,a5,0x2
80005780:	00f687b3          	add	a5,a3,a5
80005784:	fff00713          	li	a4,-1
80005788:	00e7a223          	sw	a4,4(a5)
8000578c:	0700006f          	j	800057fc <API_ClearPipeSlot+0x10c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:81
    } else if (type == THERMAL){
80005790:	fe442703          	lw	a4,-28(s0)
80005794:	404007b7          	lui	a5,0x40400
80005798:	00f71663          	bne	a4,a5,800057a4 <API_ClearPipeSlot+0xb4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:82
        thermalPacket_pending = FALSE;
8000579c:	9601a223          	sw	zero,-1692(gp) # 800096f4 <thermalPacket_pending>
800057a0:	05c0006f          	j	800057fc <API_ClearPipeSlot+0x10c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:83
    } else if (type == SYS_MESSAGE){
800057a4:	fe442703          	lw	a4,-28(s0)
800057a8:	505007b7          	lui	a5,0x50500
800057ac:	00f71a63          	bne	a4,a5,800057c0 <API_ClearPipeSlot+0xd0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:84
        ServiceMessage.status = PIPE_FREE;
800057b0:	8003c7b7          	lui	a5,0x8003c
800057b4:	fff00713          	li	a4,-1
800057b8:	8ee7aa23          	sw	a4,-1804(a5) # 8003b8f4 <__stack_top+0xfffdb854>
800057bc:	0400006f          	j	800057fc <API_ClearPipeSlot+0x10c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:87
    } else { // type == MESSAGE
        //printsv("cleaning message pipe slot: ", slot);
        TaskList[taskID].MessagePipe[slot].status = PIPE_FREE;
800057c0:	8003c6b7          	lui	a3,0x8003c
800057c4:	fdc42703          	lw	a4,-36(s0)
800057c8:	fe042603          	lw	a2,-32(s0)
800057cc:	00070793          	mv	a5,a4
800057d0:	00379793          	slli	a5,a5,0x3
800057d4:	00e787b3          	add	a5,a5,a4
800057d8:	00679793          	slli	a5,a5,0x6
800057dc:	00001737          	lui	a4,0x1
800057e0:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
800057e4:	02e60733          	mul	a4,a2,a4
800057e8:	00e78733          	add	a4,a5,a4
800057ec:	76c68793          	addi	a5,a3,1900 # 8003c76c <__stack_top+0xfffdc6cc>
800057f0:	00f707b3          	add	a5,a4,a5
800057f4:	fff00713          	li	a4,-1
800057f8:	02e7a823          	sw	a4,48(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:92
        //TaskList[taskID].MessagePipe[slot].holder = PIPE_FREE;
    }

    // checks if some task must be released
    for(i=0; i < NUM_MAX_TASKS; i++){
800057fc:	fe042623          	sw	zero,-20(s0)
80005800:	0fc0006f          	j	800058fc <API_ClearPipeSlot+0x20c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:93
        if( TaskList[i].status == TASK_SLOT_SUSPENDED ){
80005804:	8003c7b7          	lui	a5,0x8003c
80005808:	fec42683          	lw	a3,-20(s0)
8000580c:	00001737          	lui	a4,0x1
80005810:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80005814:	02e68733          	mul	a4,a3,a4
80005818:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
8000581c:	00f707b3          	add	a5,a4,a5
80005820:	0007a703          	lw	a4,0(a5)
80005824:	00400793          	li	a5,4
80005828:	0cf71463          	bne	a4,a5,800058f0 <API_ClearPipeSlot+0x200>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:94
            for(j=0; j < PIPE_SIZE; j++){
8000582c:	fe042423          	sw	zero,-24(s0)
80005830:	0b40006f          	j	800058e4 <API_ClearPipeSlot+0x1f4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:95
                if( TaskList[i].MessagePipe[j].status == PIPE_FREE ){         
80005834:	8003c6b7          	lui	a3,0x8003c
80005838:	fe842703          	lw	a4,-24(s0)
8000583c:	fec42603          	lw	a2,-20(s0)
80005840:	00070793          	mv	a5,a4
80005844:	00379793          	slli	a5,a5,0x3
80005848:	00e787b3          	add	a5,a5,a4
8000584c:	00679793          	slli	a5,a5,0x6
80005850:	00001737          	lui	a4,0x1
80005854:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80005858:	02e60733          	mul	a4,a2,a4
8000585c:	00e78733          	add	a4,a5,a4
80005860:	76c68793          	addi	a5,a3,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80005864:	00f707b3          	add	a5,a4,a5
80005868:	0307a703          	lw	a4,48(a5)
8000586c:	fff00793          	li	a5,-1
80005870:	06f71463          	bne	a4,a5,800058d8 <API_ClearPipeSlot+0x1e8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:96
                    TaskList[i].status = TASK_SLOT_RUNNING;
80005874:	8003c7b7          	lui	a5,0x8003c
80005878:	fec42683          	lw	a3,-20(s0)
8000587c:	00001737          	lui	a4,0x1
80005880:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80005884:	02e68733          	mul	a4,a3,a4
80005888:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
8000588c:	00f707b3          	add	a5,a4,a5
80005890:	00100713          	li	a4,1
80005894:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:97
                    vTaskResume( TaskList[i].TaskHandler );
80005898:	8003c7b7          	lui	a5,0x8003c
8000589c:	fec42683          	lw	a3,-20(s0)
800058a0:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
800058a4:	000017b7          	lui	a5,0x1
800058a8:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
800058ac:	02f687b3          	mul	a5,a3,a5
800058b0:	00f707b3          	add	a5,a4,a5
800058b4:	0187a783          	lw	a5,24(a5)
800058b8:	00078513          	mv	a0,a5
800058bc:	b75fc0ef          	jal	ra,80002430 <vTaskResume>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:98
                    printsv("Resumindo taskSlot ", i);
800058c0:	fec42783          	lw	a5,-20(s0)
800058c4:	00078593          	mv	a1,a5
800058c8:	800097b7          	lui	a5,0x80009
800058cc:	e0478513          	addi	a0,a5,-508 # 80008e04 <__stack_top+0xfffa8d64>
800058d0:	515000ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:99
                    break;
800058d4:	01c0006f          	j	800058f0 <API_ClearPipeSlot+0x200>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:94 (discriminator 2)
            for(j=0; j < PIPE_SIZE; j++){
800058d8:	fe842783          	lw	a5,-24(s0)
800058dc:	00178793          	addi	a5,a5,1
800058e0:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:94 (discriminator 1)
800058e4:	fe842703          	lw	a4,-24(s0)
800058e8:	00300793          	li	a5,3
800058ec:	f4e7f4e3          	bleu	a4,a5,80005834 <API_ClearPipeSlot+0x144>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:92 (discriminator 2)
    for(i=0; i < NUM_MAX_TASKS; i++){
800058f0:	fec42783          	lw	a5,-20(s0)
800058f4:	00178793          	addi	a5,a5,1
800058f8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:92 (discriminator 1)
800058fc:	fec42703          	lw	a4,-20(s0)
80005900:	00500793          	li	a5,5
80005904:	f0e7f0e3          	bleu	a4,a5,80005804 <API_ClearPipeSlot+0x114>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:104
                }    
            }
        }
    }
    return;
80005908:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:105
}
8000590c:	03c12083          	lw	ra,60(sp)
80005910:	03812403          	lw	s0,56(sp)
80005914:	04010113          	addi	sp,sp,64
80005918:	00008067          	ret

8000591c <API_checkPipe>:
API_checkPipe():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:107

unsigned int API_checkPipe(unsigned int taskSlot){
8000591c:	fd010113          	addi	sp,sp,-48
80005920:	02112623          	sw	ra,44(sp)
80005924:	02812423          	sw	s0,40(sp)
80005928:	03010413          	addi	s0,sp,48
8000592c:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:109
    unsigned int i;
    printsv("Checking the PIPE of taskSlot: ", taskSlot);
80005930:	fdc42783          	lw	a5,-36(s0)
80005934:	00078593          	mv	a1,a5
80005938:	800097b7          	lui	a5,0x80009
8000593c:	e1878513          	addi	a0,a5,-488 # 80008e18 <__stack_top+0xfffa8d78>
80005940:	4a5000ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:110
    for(i = 0; i < PIPE_SIZE; i++){
80005944:	fe042623          	sw	zero,-20(s0)
80005948:	0c00006f          	j	80005a08 <API_checkPipe+0xec>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:111
        printsv("i: ", i);
8000594c:	fec42783          	lw	a5,-20(s0)
80005950:	00078593          	mv	a1,a5
80005954:	800097b7          	lui	a5,0x80009
80005958:	e3878513          	addi	a0,a5,-456 # 80008e38 <__stack_top+0xfffa8d98>
8000595c:	489000ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:112
        printsv("status: ", TaskList[taskSlot].MessagePipe[i].status);
80005960:	8003c6b7          	lui	a3,0x8003c
80005964:	fec42703          	lw	a4,-20(s0)
80005968:	fdc42603          	lw	a2,-36(s0)
8000596c:	00070793          	mv	a5,a4
80005970:	00379793          	slli	a5,a5,0x3
80005974:	00e787b3          	add	a5,a5,a4
80005978:	00679793          	slli	a5,a5,0x6
8000597c:	00001737          	lui	a4,0x1
80005980:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80005984:	02e60733          	mul	a4,a2,a4
80005988:	00e78733          	add	a4,a5,a4
8000598c:	76c68793          	addi	a5,a3,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80005990:	00f707b3          	add	a5,a4,a5
80005994:	0307a783          	lw	a5,48(a5)
80005998:	00078593          	mv	a1,a5
8000599c:	800097b7          	lui	a5,0x80009
800059a0:	e3c78513          	addi	a0,a5,-452 # 80008e3c <__stack_top+0xfffa8d9c>
800059a4:	441000ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:114
        //printsv("holder: ", TaskList[taskSlot].MessagePipe[i].holder);
        prints("---\n");
800059a8:	800097b7          	lui	a5,0x80009
800059ac:	e4878513          	addi	a0,a5,-440 # 80008e48 <__stack_top+0xfffa8da8>
800059b0:	389000ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:115
        if(TaskList[taskSlot].MessagePipe[i].status == PIPE_OCCUPIED){
800059b4:	8003c6b7          	lui	a3,0x8003c
800059b8:	fec42703          	lw	a4,-20(s0)
800059bc:	fdc42603          	lw	a2,-36(s0)
800059c0:	00070793          	mv	a5,a4
800059c4:	00379793          	slli	a5,a5,0x3
800059c8:	00e787b3          	add	a5,a5,a4
800059cc:	00679793          	slli	a5,a5,0x6
800059d0:	00001737          	lui	a4,0x1
800059d4:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
800059d8:	02e60733          	mul	a4,a2,a4
800059dc:	00e78733          	add	a4,a5,a4
800059e0:	76c68793          	addi	a5,a3,1900 # 8003c76c <__stack_top+0xfffdc6cc>
800059e4:	00f707b3          	add	a5,a4,a5
800059e8:	0307a703          	lw	a4,48(a5)
800059ec:	00100793          	li	a5,1
800059f0:	00f71663          	bne	a4,a5,800059fc <API_checkPipe+0xe0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:117
            //if(MessagePipe[i].holder == taskSlot){
                return 1;
800059f4:	00100793          	li	a5,1
800059f8:	0200006f          	j	80005a18 <API_checkPipe+0xfc>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:110 (discriminator 2)
    for(i = 0; i < PIPE_SIZE; i++){
800059fc:	fec42783          	lw	a5,-20(s0)
80005a00:	00178793          	addi	a5,a5,1
80005a04:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:110 (discriminator 1)
80005a08:	fec42703          	lw	a4,-20(s0)
80005a0c:	00300793          	li	a5,3
80005a10:	f2e7fee3          	bleu	a4,a5,8000594c <API_checkPipe+0x30>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:121
            //}
        }
    }
    return 0;
80005a14:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/packet.c:122
}
80005a18:	00078513          	mv	a0,a5
80005a1c:	02c12083          	lw	ra,44(sp)
80005a20:	02812403          	lw	s0,40(sp)
80005a24:	03010113          	addi	sp,sp,48
80005a28:	00008067          	ret

80005a2c <API_setFreqIdle>:
API_setFreqIdle():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:3
#include "dvfs.h"

void API_setFreqIdle(){
80005a2c:	ff010113          	addi	sp,sp,-16
80005a30:	00812623          	sw	s0,12(sp)
80005a34:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:4
    selectedFrequencyScale = FREQ_IDLE;
80005a38:	800407b7          	lui	a5,0x80040
80005a3c:	06400713          	li	a4,100
80005a40:	08e7a223          	sw	a4,132(a5) # 80040084 <__stack_top+0xfffdffe4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:5
    return;
80005a44:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:6
}
80005a48:	00c12403          	lw	s0,12(sp)
80005a4c:	01010113          	addi	sp,sp,16
80005a50:	00008067          	ret

80005a54 <API_setFreqScale>:
API_setFreqScale():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:8

void API_setFreqScale(unsigned int scale){
80005a54:	fe010113          	addi	sp,sp,-32
80005a58:	00812e23          	sw	s0,28(sp)
80005a5c:	02010413          	addi	s0,sp,32
80005a60:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:9
    selectedFrequencyScale = scale;
80005a64:	800407b7          	lui	a5,0x80040
80005a68:	fec42703          	lw	a4,-20(s0)
80005a6c:	08e7a223          	sw	a4,132(a5) # 80040084 <__stack_top+0xfffdffe4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:10
    return;
80005a70:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:11
}
80005a74:	01c12403          	lw	s0,28(sp)
80005a78:	02010113          	addi	sp,sp,32
80005a7c:	00008067          	ret

80005a80 <API_getFreqScale>:
API_getFreqScale():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:13

unsigned int API_getFreqScale(){
80005a80:	ff010113          	addi	sp,sp,-16
80005a84:	00112623          	sw	ra,12(sp)
80005a88:	00812423          	sw	s0,8(sp)
80005a8c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:14
    return HW_get_32bit_reg(FREQUENCY_SCALE);
80005a90:	900007b7          	lui	a5,0x90000
80005a94:	ff878513          	addi	a0,a5,-8 # 8ffffff8 <__stack_top+0xff9ff58>
80005a98:	cc4fb0ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80005a9c:	00050793          	mv	a5,a0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:15
}
80005aa0:	00078513          	mv	a0,a5
80005aa4:	00c12083          	lw	ra,12(sp)
80005aa8:	00812403          	lw	s0,8(sp)
80005aac:	01010113          	addi	sp,sp,16
80005ab0:	00008067          	ret

80005ab4 <API_applyFreqScale>:
API_applyFreqScale():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:17

void API_applyFreqScale(){
80005ab4:	ff010113          	addi	sp,sp,-16
80005ab8:	00112623          	sw	ra,12(sp)
80005abc:	00812423          	sw	s0,8(sp)
80005ac0:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:18
    if(selectedFrequencyScale != API_getFreqScale()){
80005ac4:	fbdff0ef          	jal	ra,80005a80 <API_getFreqScale>
80005ac8:	00050713          	mv	a4,a0
80005acc:	800407b7          	lui	a5,0x80040
80005ad0:	0847a783          	lw	a5,132(a5) # 80040084 <__stack_top+0xfffdffe4>
80005ad4:	02f70063          	beq	a4,a5,80005af4 <API_applyFreqScale+0x40>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:19
        HW_set_32bit_reg(FREQUENCY_SCALE, selectedFrequencyScale);
80005ad8:	800407b7          	lui	a5,0x80040
80005adc:	0847a783          	lw	a5,132(a5) # 80040084 <__stack_top+0xfffdffe4>
80005ae0:	00078593          	mv	a1,a5
80005ae4:	900007b7          	lui	a5,0x90000
80005ae8:	ff878513          	addi	a0,a5,-8 # 8ffffff8 <__stack_top+0xff9ff58>
80005aec:	c68fb0ef          	jal	ra,80000f54 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:21
    }
    return;
80005af0:	00000013          	nop
80005af4:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:22
}
80005af8:	00c12083          	lw	ra,12(sp)
80005afc:	00812403          	lw	s0,8(sp)
80005b00:	01010113          	addi	sp,sp,16
80005b04:	00008067          	ret

80005b08 <API_freqStepUp>:
API_freqStepUp():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:24

void API_freqStepUp(){
80005b08:	ff010113          	addi	sp,sp,-16
80005b0c:	00812623          	sw	s0,12(sp)
80005b10:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:25
    if(selectedFrequencyScale == FREQ_IDLE){
80005b14:	800407b7          	lui	a5,0x80040
80005b18:	0847a703          	lw	a4,132(a5) # 80040084 <__stack_top+0xfffdffe4>
80005b1c:	06400793          	li	a5,100
80005b20:	00f71a63          	bne	a4,a5,80005b34 <API_freqStepUp+0x2c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:26
        selectedFrequencyScale = FREQ_150MHz;
80005b24:	800407b7          	lui	a5,0x80040
80005b28:	09600713          	li	a4,150
80005b2c:	08e7a223          	sw	a4,132(a5) # 80040084 <__stack_top+0xfffdffe4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
        }
        else{
            selectedFrequencyScale = FREQ_IDLE;
        }
    }
    return;
80005b30:	1340006f          	j	80005c64 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:28
    else if(selectedFrequencyScale==FREQ_150MHz){
80005b34:	800407b7          	lui	a5,0x80040
80005b38:	0847a703          	lw	a4,132(a5) # 80040084 <__stack_top+0xfffdffe4>
80005b3c:	09600793          	li	a5,150
80005b40:	00f71a63          	bne	a4,a5,80005b54 <API_freqStepUp+0x4c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:29
        selectedFrequencyScale = FREQ_250MHz;
80005b44:	800407b7          	lui	a5,0x80040
80005b48:	0fa00713          	li	a4,250
80005b4c:	08e7a223          	sw	a4,132(a5) # 80040084 <__stack_top+0xfffdffe4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005b50:	1140006f          	j	80005c64 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:31
    else if(selectedFrequencyScale==FREQ_250MHz){
80005b54:	800407b7          	lui	a5,0x80040
80005b58:	0847a703          	lw	a4,132(a5) # 80040084 <__stack_top+0xfffdffe4>
80005b5c:	0fa00793          	li	a5,250
80005b60:	00f71a63          	bne	a4,a5,80005b74 <API_freqStepUp+0x6c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:32
        selectedFrequencyScale = FREQ_500MHz;
80005b64:	800407b7          	lui	a5,0x80040
80005b68:	1f400713          	li	a4,500
80005b6c:	08e7a223          	sw	a4,132(a5) # 80040084 <__stack_top+0xfffdffe4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005b70:	0f40006f          	j	80005c64 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:34
    else if(selectedFrequencyScale==FREQ_500MHz){
80005b74:	800407b7          	lui	a5,0x80040
80005b78:	0847a703          	lw	a4,132(a5) # 80040084 <__stack_top+0xfffdffe4>
80005b7c:	1f400793          	li	a5,500
80005b80:	00f71a63          	bne	a4,a5,80005b94 <API_freqStepUp+0x8c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:35
        selectedFrequencyScale = FREQ_1GHz;
80005b84:	800407b7          	lui	a5,0x80040
80005b88:	3e800713          	li	a4,1000
80005b8c:	08e7a223          	sw	a4,132(a5) # 80040084 <__stack_top+0xfffdffe4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005b90:	0d40006f          	j	80005c64 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:37
    else if(selectedFrequencyScale==FREQ_1GHz){
80005b94:	800407b7          	lui	a5,0x80040
80005b98:	0847a703          	lw	a4,132(a5) # 80040084 <__stack_top+0xfffdffe4>
80005b9c:	3e800793          	li	a5,1000
80005ba0:	00f71a63          	bne	a4,a5,80005bb4 <API_freqStepUp+0xac>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:38
        selectedFrequencyScale = FREQ_1GHz;
80005ba4:	800407b7          	lui	a5,0x80040
80005ba8:	3e800713          	li	a4,1000
80005bac:	08e7a223          	sw	a4,132(a5) # 80040084 <__stack_top+0xfffdffe4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005bb0:	0b40006f          	j	80005c64 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:41
        if(selectedFrequencyScale > FREQ_1GHz){
80005bb4:	800407b7          	lui	a5,0x80040
80005bb8:	0847a703          	lw	a4,132(a5) # 80040084 <__stack_top+0xfffdffe4>
80005bbc:	3e800793          	li	a5,1000
80005bc0:	00e7fa63          	bleu	a4,a5,80005bd4 <API_freqStepUp+0xcc>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:42
            selectedFrequencyScale = FREQ_1GHz;
80005bc4:	800407b7          	lui	a5,0x80040
80005bc8:	3e800713          	li	a4,1000
80005bcc:	08e7a223          	sw	a4,132(a5) # 80040084 <__stack_top+0xfffdffe4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005bd0:	0940006f          	j	80005c64 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:44
        else if(selectedFrequencyScale > FREQ_500MHz){
80005bd4:	800407b7          	lui	a5,0x80040
80005bd8:	0847a703          	lw	a4,132(a5) # 80040084 <__stack_top+0xfffdffe4>
80005bdc:	1f400793          	li	a5,500
80005be0:	00e7fa63          	bleu	a4,a5,80005bf4 <API_freqStepUp+0xec>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:45
            selectedFrequencyScale = FREQ_1GHz;
80005be4:	800407b7          	lui	a5,0x80040
80005be8:	3e800713          	li	a4,1000
80005bec:	08e7a223          	sw	a4,132(a5) # 80040084 <__stack_top+0xfffdffe4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005bf0:	0740006f          	j	80005c64 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:47
        else if(selectedFrequencyScale > FREQ_250MHz){
80005bf4:	800407b7          	lui	a5,0x80040
80005bf8:	0847a703          	lw	a4,132(a5) # 80040084 <__stack_top+0xfffdffe4>
80005bfc:	0fa00793          	li	a5,250
80005c00:	00e7fa63          	bleu	a4,a5,80005c14 <API_freqStepUp+0x10c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:48
            selectedFrequencyScale = FREQ_500MHz;
80005c04:	800407b7          	lui	a5,0x80040
80005c08:	1f400713          	li	a4,500
80005c0c:	08e7a223          	sw	a4,132(a5) # 80040084 <__stack_top+0xfffdffe4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005c10:	0540006f          	j	80005c64 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:50
        else if(selectedFrequencyScale > FREQ_150MHz){
80005c14:	800407b7          	lui	a5,0x80040
80005c18:	0847a703          	lw	a4,132(a5) # 80040084 <__stack_top+0xfffdffe4>
80005c1c:	09600793          	li	a5,150
80005c20:	00e7fa63          	bleu	a4,a5,80005c34 <API_freqStepUp+0x12c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:51
            selectedFrequencyScale = FREQ_250MHz;
80005c24:	800407b7          	lui	a5,0x80040
80005c28:	0fa00713          	li	a4,250
80005c2c:	08e7a223          	sw	a4,132(a5) # 80040084 <__stack_top+0xfffdffe4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005c30:	0340006f          	j	80005c64 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:53
        else if(selectedFrequencyScale > FREQ_IDLE){
80005c34:	800407b7          	lui	a5,0x80040
80005c38:	0847a703          	lw	a4,132(a5) # 80040084 <__stack_top+0xfffdffe4>
80005c3c:	06400793          	li	a5,100
80005c40:	00e7fa63          	bleu	a4,a5,80005c54 <API_freqStepUp+0x14c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:54
            selectedFrequencyScale = FREQ_150MHz;
80005c44:	800407b7          	lui	a5,0x80040
80005c48:	09600713          	li	a4,150
80005c4c:	08e7a223          	sw	a4,132(a5) # 80040084 <__stack_top+0xfffdffe4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005c50:	0140006f          	j	80005c64 <API_freqStepUp+0x15c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:57
            selectedFrequencyScale = FREQ_IDLE;
80005c54:	800407b7          	lui	a5,0x80040
80005c58:	06400713          	li	a4,100
80005c5c:	08e7a223          	sw	a4,132(a5) # 80040084 <__stack_top+0xfffdffe4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:60
    return;
80005c60:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/dvfs.c:61
}
80005c64:	00c12403          	lw	s0,12(sp)
80005c68:	01010113          	addi	sp,sp,16
80005c6c:	00008067          	ret

80005c70 <resetExecutedInstructions>:
resetExecutedInstructions():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:12
    printsv("Stores:\t\t",      HW_get_32bit_reg(STORES_COUNT));
    printsv("Others:\t\t",      HW_get_32bit_reg(OTHERS_COUNT));
    prints("--------------------------\n");
}

void resetExecutedInstructions(){
80005c70:	ff010113          	addi	sp,sp,-16
80005c74:	00112623          	sw	ra,12(sp)
80005c78:	00812423          	sw	s0,8(sp)
80005c7c:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:13
    HW_set_32bit_reg(LOADS_COUNT, 0);
80005c80:	00000593          	li	a1,0
80005c84:	900007b7          	lui	a5,0x90000
80005c88:	ff478513          	addi	a0,a5,-12 # 8ffffff4 <__stack_top+0xff9ff54>
80005c8c:	ac8fb0ef          	jal	ra,80000f54 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:14
    HW_set_32bit_reg(STORES_COUNT, 0);
80005c90:	00000593          	li	a1,0
80005c94:	900007b7          	lui	a5,0x90000
80005c98:	ff078513          	addi	a0,a5,-16 # 8ffffff0 <__stack_top+0xff9ff50>
80005c9c:	ab8fb0ef          	jal	ra,80000f54 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:15
    HW_set_32bit_reg(OTHERS_COUNT, 0);
80005ca0:	00000593          	li	a1,0
80005ca4:	900007b7          	lui	a5,0x90000
80005ca8:	fec78513          	addi	a0,a5,-20 # 8fffffec <__stack_top+0xff9ff4c>
80005cac:	aa8fb0ef          	jal	ra,80000f54 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:16
    return;
80005cb0:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:17
}
80005cb4:	00c12083          	lw	ra,12(sp)
80005cb8:	00812403          	lw	s0,8(sp)
80005cbc:	01010113          	addi	sp,sp,16
80005cc0:	00008067          	ret

80005cc4 <getNumberOfPorts>:
getNumberOfPorts():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:21

///////////////////////////////////////////////////////////////////
/* Get the number of ports in the router based in his address*/
unsigned int getNumberOfPorts(unsigned int address) {
80005cc4:	fd010113          	addi	sp,sp,-48
80005cc8:	02112623          	sw	ra,44(sp)
80005ccc:	02812423          	sw	s0,40(sp)
80005cd0:	03010413          	addi	s0,sp,48
80005cd4:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:23
    unsigned int x, y;
    x = getXpos(address);
80005cd8:	fdc42503          	lw	a0,-36(s0)
80005cdc:	1b1000ef          	jal	ra,8000668c <getXpos>
80005ce0:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:24
    y = getYpos(address);
80005ce4:	fdc42503          	lw	a0,-36(s0)
80005ce8:	1d1000ef          	jal	ra,800066b8 <getYpos>
80005cec:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:26

    if ((x == 0 || x == (DIM_X - 1)) && (y == 0 || y == (DIM_Y - 1))) {
80005cf0:	fec42783          	lw	a5,-20(s0)
80005cf4:	00078863          	beqz	a5,80005d04 <getNumberOfPorts+0x40>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:26 (discriminator 2)
80005cf8:	fec42703          	lw	a4,-20(s0)
80005cfc:	00400793          	li	a5,4
80005d00:	02f71063          	bne	a4,a5,80005d20 <getNumberOfPorts+0x5c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:26 (discriminator 3)
80005d04:	fe842783          	lw	a5,-24(s0)
80005d08:	00078863          	beqz	a5,80005d18 <getNumberOfPorts+0x54>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:26 (discriminator 4)
80005d0c:	fe842703          	lw	a4,-24(s0)
80005d10:	00400793          	li	a5,4
80005d14:	00f71663          	bne	a4,a5,80005d20 <getNumberOfPorts+0x5c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:27
        return 3;
80005d18:	00300793          	li	a5,3
80005d1c:	0380006f          	j	80005d54 <getNumberOfPorts+0x90>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:29
    } else {
        if (x == 0 || x == (DIM_X - 1) || y == 0 || y == (DIM_Y - 1)) {
80005d20:	fec42783          	lw	a5,-20(s0)
80005d24:	02078263          	beqz	a5,80005d48 <getNumberOfPorts+0x84>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:29 (discriminator 1)
80005d28:	fec42703          	lw	a4,-20(s0)
80005d2c:	00400793          	li	a5,4
80005d30:	00f70c63          	beq	a4,a5,80005d48 <getNumberOfPorts+0x84>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:29 (discriminator 2)
80005d34:	fe842783          	lw	a5,-24(s0)
80005d38:	00078863          	beqz	a5,80005d48 <getNumberOfPorts+0x84>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:29 (discriminator 3)
80005d3c:	fe842703          	lw	a4,-24(s0)
80005d40:	00400793          	li	a5,4
80005d44:	00f71663          	bne	a4,a5,80005d50 <getNumberOfPorts+0x8c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:30
            return 4;
80005d48:	00400793          	li	a5,4
80005d4c:	0080006f          	j	80005d54 <getNumberOfPorts+0x90>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:32
        } else {
            return 5;
80005d50:	00500793          	li	a5,5
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:35
        }
    }
}
80005d54:	00078513          	mv	a0,a5
80005d58:	02c12083          	lw	ra,44(sp)
80005d5c:	02812403          	lw	s0,40(sp)
80005d60:	03010113          	addi	sp,sp,48
80005d64:	00008067          	ret

80005d68 <estimateNoCActivity>:
estimateNoCActivity():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:39

///////////////////////////////////////////////////////////////////
/* Activity estimation based in the amount of flits and packets crossing the router */
unsigned int estimateNoCActivity() {
80005d68:	fe010113          	addi	sp,sp,-32
80005d6c:	00112e23          	sw	ra,28(sp)
80005d70:	00812c23          	sw	s0,24(sp)
80005d74:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:42
    unsigned int totalPackets, totalFlits;
    // calculate the difference between the last interruption and the current one
    totalPackets =  HW_get_32bit_reg(EAST_PACKETS) - eastPackets_last;
80005d78:	900007b7          	lui	a5,0x90000
80005d7c:	fc478513          	addi	a0,a5,-60 # 8fffffc4 <__stack_top+0xff9ff24>
80005d80:	9dcfb0ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80005d84:	00050713          	mv	a4,a0
80005d88:	96c1a783          	lw	a5,-1684(gp) # 800096fc <eastPackets_last>
80005d8c:	40f707b3          	sub	a5,a4,a5
80005d90:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:43
    totalPackets += HW_get_32bit_reg(WEST_PACKETS) - westPackets_last;
80005d94:	900007b7          	lui	a5,0x90000
80005d98:	fbc78513          	addi	a0,a5,-68 # 8fffffbc <__stack_top+0xff9ff1c>
80005d9c:	9c0fb0ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80005da0:	00050713          	mv	a4,a0
80005da4:	9741a783          	lw	a5,-1676(gp) # 80009704 <westPackets_last>
80005da8:	40f707b3          	sub	a5,a4,a5
80005dac:	fec42703          	lw	a4,-20(s0)
80005db0:	00f707b3          	add	a5,a4,a5
80005db4:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:44
    totalPackets += HW_get_32bit_reg(SOUTH_PACKETS) - southPackets_last;
80005db8:	900007b7          	lui	a5,0x90000
80005dbc:	fac78513          	addi	a0,a5,-84 # 8fffffac <__stack_top+0xff9ff0c>
80005dc0:	99cfb0ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80005dc4:	00050713          	mv	a4,a0
80005dc8:	9841a783          	lw	a5,-1660(gp) # 80009714 <southPackets_last>
80005dcc:	40f707b3          	sub	a5,a4,a5
80005dd0:	fec42703          	lw	a4,-20(s0)
80005dd4:	00f707b3          	add	a5,a4,a5
80005dd8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:45
    totalPackets += HW_get_32bit_reg(LOCAL_PACKETS) - localPackets_last;
80005ddc:	900007b7          	lui	a5,0x90000
80005de0:	fa478513          	addi	a0,a5,-92 # 8fffffa4 <__stack_top+0xff9ff04>
80005de4:	978fb0ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80005de8:	00050713          	mv	a4,a0
80005dec:	98c1a783          	lw	a5,-1652(gp) # 8000971c <localPackets_last>
80005df0:	40f707b3          	sub	a5,a4,a5
80005df4:	fec42703          	lw	a4,-20(s0)
80005df8:	00f707b3          	add	a5,a4,a5
80005dfc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:46
    totalPackets += HW_get_32bit_reg(NORTH_PACKETS) - northPackets_last;
80005e00:	900007b7          	lui	a5,0x90000
80005e04:	fb478513          	addi	a0,a5,-76 # 8fffffb4 <__stack_top+0xff9ff14>
80005e08:	954fb0ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80005e0c:	00050713          	mv	a4,a0
80005e10:	97c1a783          	lw	a5,-1668(gp) # 8000970c <northPackets_last>
80005e14:	40f707b3          	sub	a5,a4,a5
80005e18:	fec42703          	lw	a4,-20(s0)
80005e1c:	00f707b3          	add	a5,a4,a5
80005e20:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:49
    //totalPackets = eastPackets_dif + westPackets_dif + southPackets_dif + localPackets_dif + northPackets_dif;

    eastPackets_last  = HW_get_32bit_reg(EAST_PACKETS);
80005e24:	900007b7          	lui	a5,0x90000
80005e28:	fc478513          	addi	a0,a5,-60 # 8fffffc4 <__stack_top+0xff9ff24>
80005e2c:	930fb0ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80005e30:	00050713          	mv	a4,a0
80005e34:	96e1a623          	sw	a4,-1684(gp) # 800096fc <eastPackets_last>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:50
    westPackets_last  = HW_get_32bit_reg(WEST_PACKETS);
80005e38:	900007b7          	lui	a5,0x90000
80005e3c:	fbc78513          	addi	a0,a5,-68 # 8fffffbc <__stack_top+0xff9ff1c>
80005e40:	91cfb0ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80005e44:	00050713          	mv	a4,a0
80005e48:	96e1aa23          	sw	a4,-1676(gp) # 80009704 <westPackets_last>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:51
    southPackets_last = HW_get_32bit_reg(SOUTH_PACKETS);
80005e4c:	900007b7          	lui	a5,0x90000
80005e50:	fac78513          	addi	a0,a5,-84 # 8fffffac <__stack_top+0xff9ff0c>
80005e54:	908fb0ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80005e58:	00050713          	mv	a4,a0
80005e5c:	98e1a223          	sw	a4,-1660(gp) # 80009714 <southPackets_last>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:52
    localPackets_last = HW_get_32bit_reg(LOCAL_PACKETS);
80005e60:	900007b7          	lui	a5,0x90000
80005e64:	fa478513          	addi	a0,a5,-92 # 8fffffa4 <__stack_top+0xff9ff04>
80005e68:	8f4fb0ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80005e6c:	00050713          	mv	a4,a0
80005e70:	98e1a623          	sw	a4,-1652(gp) # 8000971c <localPackets_last>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:53
    northPackets_last = HW_get_32bit_reg(NORTH_PACKETS);
80005e74:	900007b7          	lui	a5,0x90000
80005e78:	fb478513          	addi	a0,a5,-76 # 8fffffb4 <__stack_top+0xff9ff14>
80005e7c:	8e0fb0ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80005e80:	00050713          	mv	a4,a0
80005e84:	96e1ae23          	sw	a4,-1668(gp) # 8000970c <northPackets_last>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:56

    // alculate the difference between the last interruption and the current one
    totalFlits =  HW_get_32bit_reg(EAST_FLITS) - eastFlits_last;
80005e88:	900007b7          	lui	a5,0x90000
80005e8c:	fc878513          	addi	a0,a5,-56 # 8fffffc8 <__stack_top+0xff9ff28>
80005e90:	8ccfb0ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80005e94:	00050713          	mv	a4,a0
80005e98:	9681a783          	lw	a5,-1688(gp) # 800096f8 <eastFlits_last>
80005e9c:	40f707b3          	sub	a5,a4,a5
80005ea0:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:57
    totalFlits += HW_get_32bit_reg(WEST_FLITS) - westFlits_last;
80005ea4:	900007b7          	lui	a5,0x90000
80005ea8:	fc078513          	addi	a0,a5,-64 # 8fffffc0 <__stack_top+0xff9ff20>
80005eac:	8b0fb0ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80005eb0:	00050713          	mv	a4,a0
80005eb4:	9701a783          	lw	a5,-1680(gp) # 80009700 <westFlits_last>
80005eb8:	40f707b3          	sub	a5,a4,a5
80005ebc:	fe842703          	lw	a4,-24(s0)
80005ec0:	00f707b3          	add	a5,a4,a5
80005ec4:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:58
    totalFlits += HW_get_32bit_reg(SOUTH_FLITS) - southFlits_last;
80005ec8:	900007b7          	lui	a5,0x90000
80005ecc:	fb078513          	addi	a0,a5,-80 # 8fffffb0 <__stack_top+0xff9ff10>
80005ed0:	88cfb0ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80005ed4:	00050713          	mv	a4,a0
80005ed8:	9801a783          	lw	a5,-1664(gp) # 80009710 <southFlits_last>
80005edc:	40f707b3          	sub	a5,a4,a5
80005ee0:	fe842703          	lw	a4,-24(s0)
80005ee4:	00f707b3          	add	a5,a4,a5
80005ee8:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:59
    memFlits = HW_get_32bit_reg(LOCAL_FLITS) - localFlits_last;
80005eec:	900007b7          	lui	a5,0x90000
80005ef0:	fa878513          	addi	a0,a5,-88 # 8fffffa8 <__stack_top+0xff9ff08>
80005ef4:	868fb0ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80005ef8:	00050713          	mv	a4,a0
80005efc:	9881a783          	lw	a5,-1656(gp) # 80009718 <localFlits_last>
80005f00:	40f70733          	sub	a4,a4,a5
80005f04:	800407b7          	lui	a5,0x80040
80005f08:	08e7a423          	sw	a4,136(a5) # 80040088 <__stack_top+0xfffdffe8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:60
    totalFlits += memFlits;
80005f0c:	800407b7          	lui	a5,0x80040
80005f10:	0887a783          	lw	a5,136(a5) # 80040088 <__stack_top+0xfffdffe8>
80005f14:	fe842703          	lw	a4,-24(s0)
80005f18:	00f707b3          	add	a5,a4,a5
80005f1c:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:62
    //totalFlits += HW_get_32bit_reg(LOCAL_FLITS) - localFlits_last;
    totalFlits += HW_get_32bit_reg(NORTH_FLITS) - northFlits_last;
80005f20:	900007b7          	lui	a5,0x90000
80005f24:	fb878513          	addi	a0,a5,-72 # 8fffffb8 <__stack_top+0xff9ff18>
80005f28:	834fb0ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80005f2c:	00050713          	mv	a4,a0
80005f30:	9781a783          	lw	a5,-1672(gp) # 80009708 <northFlits_last>
80005f34:	40f707b3          	sub	a5,a4,a5
80005f38:	fe842703          	lw	a4,-24(s0)
80005f3c:	00f707b3          	add	a5,a4,a5
80005f40:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:65
    //totalFlits = eastFlits_dif + westFlits_dif + southFlits_dif + localFlits_dif + northFlits_dif;

    eastFlits_last  = HW_get_32bit_reg(EAST_FLITS);
80005f44:	900007b7          	lui	a5,0x90000
80005f48:	fc878513          	addi	a0,a5,-56 # 8fffffc8 <__stack_top+0xff9ff28>
80005f4c:	810fb0ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80005f50:	00050713          	mv	a4,a0
80005f54:	96e1a423          	sw	a4,-1688(gp) # 800096f8 <eastFlits_last>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:66
    westFlits_last  = HW_get_32bit_reg(WEST_FLITS);
80005f58:	900007b7          	lui	a5,0x90000
80005f5c:	fc078513          	addi	a0,a5,-64 # 8fffffc0 <__stack_top+0xff9ff20>
80005f60:	ffdfa0ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80005f64:	00050713          	mv	a4,a0
80005f68:	96e1a823          	sw	a4,-1680(gp) # 80009700 <westFlits_last>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:67
    southFlits_last = HW_get_32bit_reg(SOUTH_FLITS);
80005f6c:	900007b7          	lui	a5,0x90000
80005f70:	fb078513          	addi	a0,a5,-80 # 8fffffb0 <__stack_top+0xff9ff10>
80005f74:	fe9fa0ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80005f78:	00050713          	mv	a4,a0
80005f7c:	98e1a023          	sw	a4,-1664(gp) # 80009710 <southFlits_last>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:68
    localFlits_last = HW_get_32bit_reg(LOCAL_FLITS);
80005f80:	900007b7          	lui	a5,0x90000
80005f84:	fa878513          	addi	a0,a5,-88 # 8fffffa8 <__stack_top+0xff9ff08>
80005f88:	fd5fa0ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80005f8c:	00050713          	mv	a4,a0
80005f90:	98e1a423          	sw	a4,-1656(gp) # 80009718 <localFlits_last>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:69
    northFlits_last = HW_get_32bit_reg(NORTH_FLITS);
80005f94:	900007b7          	lui	a5,0x90000
80005f98:	fb878513          	addi	a0,a5,-72 # 8fffffb8 <__stack_top+0xff9ff18>
80005f9c:	fc1fa0ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80005fa0:	00050713          	mv	a4,a0
80005fa4:	96e1ac23          	sw	a4,-1672(gp) # 80009708 <northFlits_last>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:71

    return ((totalPackets * 5) + totalFlits);
80005fa8:	fec42703          	lw	a4,-20(s0)
80005fac:	00070793          	mv	a5,a4
80005fb0:	00279793          	slli	a5,a5,0x2
80005fb4:	00e78733          	add	a4,a5,a4
80005fb8:	fe842783          	lw	a5,-24(s0)
80005fbc:	00f707b3          	add	a5,a4,a5
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:72
}
80005fc0:	00078513          	mv	a0,a5
80005fc4:	01c12083          	lw	ra,28(sp)
80005fc8:	01812403          	lw	s0,24(sp)
80005fcc:	02010113          	addi	sp,sp,32
80005fd0:	00008067          	ret

80005fd4 <powerEstimation>:
powerEstimation():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:74

void powerEstimation(){
80005fd4:	fa010113          	addi	sp,sp,-96
80005fd8:	04112e23          	sw	ra,92(sp)
80005fdc:	04812c23          	sw	s0,88(sp)
80005fe0:	06010413          	addi	s0,sp,96
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:76
    //unsigned int actualTime, deltaTime;
    unsigned int Voltage = 2;
80005fe4:	00200793          	li	a5,2
80005fe8:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:82
    unsigned int loads, stores, others, total;
    unsigned int dynamicEnergy_PE, dynamicEnergy_MEM, dynamicEnergy_Router;
    unsigned int leakEnergy_PE;
    unsigned int totalEnergy, nPorts, nocActivity, energyActive, energyIdle, nocIdle, idleNoCEnergy, activeNoCEnergy;
    
    if(!thermalPacket_pending){
80005fec:	9641a783          	lw	a5,-1692(gp) # 800096f4 <thermalPacket_pending>
80005ff0:	34079863          	bnez	a5,80006340 <powerEstimation+0x36c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:83
        thermalPacket_pending = TRUE;
80005ff4:	00100713          	li	a4,1
80005ff8:	96e1a223          	sw	a4,-1692(gp) # 800096f4 <thermalPacket_pending>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:86

        // gets the number of ports
        nPorts = getNumberOfPorts(ProcessorAddr);
80005ffc:	800407b7          	lui	a5,0x80040
80006000:	0947a783          	lw	a5,148(a5) # 80040094 <__stack_top+0xfffdfff4>
80006004:	00078513          	mv	a0,a5
80006008:	cbdff0ef          	jal	ra,80005cc4 <getNumberOfPorts>
8000600c:	fea42223          	sw	a0,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:89
         
        // estimate the noc activity
        nocActivity = estimateNoCActivity();
80006010:	d59ff0ef          	jal	ra,80005d68 <estimateNoCActivity>
80006014:	fea42023          	sw	a0,-32(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:90
        if(nocActivity < 1000000)
80006018:	fe042703          	lw	a4,-32(s0)
8000601c:	000f47b7          	lui	a5,0xf4
80006020:	23f78793          	addi	a5,a5,575 # f423f <RAM_SIZE+0x7423f>
80006024:	00e7ee63          	bltu	a5,a4,80006040 <powerEstimation+0x6c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:91
            nocIdle = 1000000 - nocActivity;
80006028:	000f47b7          	lui	a5,0xf4
8000602c:	24078713          	addi	a4,a5,576 # f4240 <RAM_SIZE+0x74240>
80006030:	fe042783          	lw	a5,-32(s0)
80006034:	40f707b3          	sub	a5,a4,a5
80006038:	fef42623          	sw	a5,-20(s0)
8000603c:	0080006f          	j	80006044 <powerEstimation+0x70>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:93
        else
            nocIdle = 0;
80006040:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:96

        // calculates the energy
        energyActive = ((nPorts * powerAvgBufferActive[Voltage]) + powerSwitchControlActive[Voltage]);
80006044:	800097b7          	lui	a5,0x80009
80006048:	fe842703          	lw	a4,-24(s0)
8000604c:	00271713          	slli	a4,a4,0x2
80006050:	e6878793          	addi	a5,a5,-408 # 80008e68 <__stack_top+0xfffa8dc8>
80006054:	00f707b3          	add	a5,a4,a5
80006058:	0007a783          	lw	a5,0(a5)
8000605c:	00078713          	mv	a4,a5
80006060:	fe442783          	lw	a5,-28(s0)
80006064:	02f707b3          	mul	a5,a4,a5
80006068:	80009737          	lui	a4,0x80009
8000606c:	fe842683          	lw	a3,-24(s0)
80006070:	00269693          	slli	a3,a3,0x2
80006074:	e7470713          	addi	a4,a4,-396 # 80008e74 <__stack_top+0xfffa8dd4>
80006078:	00e68733          	add	a4,a3,a4
8000607c:	00072703          	lw	a4,0(a4)
80006080:	00e787b3          	add	a5,a5,a4
80006084:	fcf42e23          	sw	a5,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:97
        energyIdle   = ((nPorts * powerAvgBufferIdle[Voltage]) + powerSwitchControlIdle[Voltage]);
80006088:	800097b7          	lui	a5,0x80009
8000608c:	fe842703          	lw	a4,-24(s0)
80006090:	00271713          	slli	a4,a4,0x2
80006094:	e5078793          	addi	a5,a5,-432 # 80008e50 <__stack_top+0xfffa8db0>
80006098:	00f707b3          	add	a5,a4,a5
8000609c:	0007a783          	lw	a5,0(a5)
800060a0:	00078713          	mv	a4,a5
800060a4:	fe442783          	lw	a5,-28(s0)
800060a8:	02f707b3          	mul	a5,a4,a5
800060ac:	80009737          	lui	a4,0x80009
800060b0:	fe842683          	lw	a3,-24(s0)
800060b4:	00269693          	slli	a3,a3,0x2
800060b8:	e5c70713          	addi	a4,a4,-420 # 80008e5c <__stack_top+0xfffa8dbc>
800060bc:	00e68733          	add	a4,a3,a4
800060c0:	00072703          	lw	a4,0(a4)
800060c4:	00e787b3          	add	a5,a5,a4
800060c8:	fcf42c23          	sw	a5,-40(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:100

        // multiply by the period to get the power consumption
        idleNoCEnergy = nocIdle * energyIdle; // * DC_DC_CONVERTER_ENERGY_OVERHEAD / 10;
800060cc:	fec42703          	lw	a4,-20(s0)
800060d0:	fd842783          	lw	a5,-40(s0)
800060d4:	02f707b3          	mul	a5,a4,a5
800060d8:	fcf42a23          	sw	a5,-44(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:101
        activeNoCEnergy = nocActivity * energyActive + (memFlits * (readEnergyMemory[Voltage] + writeEnergyMemory[Voltage]));  //* DC_DC_CONVERTER_ENERGY_OVERHEAD / 10;
800060dc:	fe042703          	lw	a4,-32(s0)
800060e0:	fdc42783          	lw	a5,-36(s0)
800060e4:	02f70733          	mul	a4,a4,a5
800060e8:	800097b7          	lui	a5,0x80009
800060ec:	fe842683          	lw	a3,-24(s0)
800060f0:	00269693          	slli	a3,a3,0x2
800060f4:	e8078793          	addi	a5,a5,-384 # 80008e80 <__stack_top+0xfffa8de0>
800060f8:	00f687b3          	add	a5,a3,a5
800060fc:	0007a683          	lw	a3,0(a5)
80006100:	800097b7          	lui	a5,0x80009
80006104:	fe842603          	lw	a2,-24(s0)
80006108:	00261613          	slli	a2,a2,0x2
8000610c:	e8c78793          	addi	a5,a5,-372 # 80008e8c <__stack_top+0xfffa8dec>
80006110:	00f607b3          	add	a5,a2,a5
80006114:	0007a783          	lw	a5,0(a5)
80006118:	00f687b3          	add	a5,a3,a5
8000611c:	00078693          	mv	a3,a5
80006120:	800407b7          	lui	a5,0x80040
80006124:	0887a783          	lw	a5,136(a5) # 80040088 <__stack_top+0xfffdffe8>
80006128:	02f687b3          	mul	a5,a3,a5
8000612c:	00f707b3          	add	a5,a4,a5
80006130:	fcf42823          	sw	a5,-48(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:104

        // calculates the ROUTER dynamic energy
        dynamicEnergy_Router = (idleNoCEnergy + activeNoCEnergy) >> 6;
80006134:	fd442703          	lw	a4,-44(s0)
80006138:	fd042783          	lw	a5,-48(s0)
8000613c:	00f707b3          	add	a5,a4,a5
80006140:	0067d793          	srli	a5,a5,0x6
80006144:	fcf42623          	sw	a5,-52(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:105
        printsv("dynamicEnergy_Router >> ", dynamicEnergy_Router);
80006148:	fcc42783          	lw	a5,-52(s0)
8000614c:	00078593          	mv	a1,a5
80006150:	800097b7          	lui	a5,0x80009
80006154:	ef078513          	addi	a0,a5,-272 # 80008ef0 <__stack_top+0xfffa8e50>
80006158:	48c000ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:108

        // reads the number of each type of instruction executed in the last window
        loads = HW_get_32bit_reg(LOADS_COUNT);
8000615c:	900007b7          	lui	a5,0x90000
80006160:	ff478513          	addi	a0,a5,-12 # 8ffffff4 <__stack_top+0xff9ff54>
80006164:	df9fa0ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80006168:	fca42423          	sw	a0,-56(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:109
        stores = HW_get_32bit_reg(STORES_COUNT);
8000616c:	900007b7          	lui	a5,0x90000
80006170:	ff078513          	addi	a0,a5,-16 # 8ffffff0 <__stack_top+0xff9ff50>
80006174:	de9fa0ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80006178:	fca42223          	sw	a0,-60(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:110
        others = HW_get_32bit_reg(OTHERS_COUNT);
8000617c:	900007b7          	lui	a5,0x90000
80006180:	fec78513          	addi	a0,a5,-20 # 8fffffec <__stack_top+0xff9ff4c>
80006184:	dd9fa0ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80006188:	fca42023          	sw	a0,-64(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:111
        resetExecutedInstructions();
8000618c:	ae5ff0ef          	jal	ra,80005c70 <resetExecutedInstructions>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:114

        // number of instructions executed in the last window
        total = loads + stores + others; 
80006190:	fc842703          	lw	a4,-56(s0)
80006194:	fc442783          	lw	a5,-60(s0)
80006198:	00f707b3          	add	a5,a4,a5
8000619c:	fc042703          	lw	a4,-64(s0)
800061a0:	00f707b3          	add	a5,a4,a5
800061a4:	faf42e23          	sw	a5,-68(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:115
        printsv("total instructions~~~> ", total);
800061a8:	fbc42783          	lw	a5,-68(s0)
800061ac:	00078593          	mv	a1,a5
800061b0:	800097b7          	lui	a5,0x80009
800061b4:	f0c78513          	addi	a0,a5,-244 # 80008f0c <__stack_top+0xfffa8e6c>
800061b8:	42c000ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:118

        // calculates the PE dynamic energy
        dynamicEnergy_PE = ((arithDyn[Voltage] * others)) + ((loadStoreDyn[Voltage] * (loads + stores)));
800061bc:	800097b7          	lui	a5,0x80009
800061c0:	fe842703          	lw	a4,-24(s0)
800061c4:	00271713          	slli	a4,a4,0x2
800061c8:	e9878793          	addi	a5,a5,-360 # 80008e98 <__stack_top+0xfffa8df8>
800061cc:	00f707b3          	add	a5,a4,a5
800061d0:	0007a783          	lw	a5,0(a5)
800061d4:	00078713          	mv	a4,a5
800061d8:	fc042783          	lw	a5,-64(s0)
800061dc:	02f70733          	mul	a4,a4,a5
800061e0:	800097b7          	lui	a5,0x80009
800061e4:	fe842683          	lw	a3,-24(s0)
800061e8:	00269693          	slli	a3,a3,0x2
800061ec:	ea478793          	addi	a5,a5,-348 # 80008ea4 <__stack_top+0xfffa8e04>
800061f0:	00f687b3          	add	a5,a3,a5
800061f4:	0007a783          	lw	a5,0(a5)
800061f8:	00078613          	mv	a2,a5
800061fc:	fc842683          	lw	a3,-56(s0)
80006200:	fc442783          	lw	a5,-60(s0)
80006204:	00f687b3          	add	a5,a3,a5
80006208:	02f607b3          	mul	a5,a2,a5
8000620c:	00f707b3          	add	a5,a4,a5
80006210:	faf42c23          	sw	a5,-72(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:119
        dynamicEnergy_PE = dynamicEnergy_PE >> 6;
80006214:	fb842783          	lw	a5,-72(s0)
80006218:	0067d793          	srli	a5,a5,0x6
8000621c:	faf42c23          	sw	a5,-72(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:123
        //printsv("dynamicEnergy_PE >> 6: ", dynamicEnergy_PE);

        // calculates the PE leakage energy
        leakEnergy_PE = (unsigned int)((PE_LEAKAGE * 1000000) * 0.001) >> 6; // mW => pW * s => pJ
80006220:	69700793          	li	a5,1687
80006224:	faf42a23          	sw	a5,-76(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:126

        // calculates the MEM dynamic energy
        dynamicEnergy_MEM = (readEnergyMemory[Voltage] * loads) + (writeEnergyMemory[Voltage] * stores);
80006228:	800097b7          	lui	a5,0x80009
8000622c:	fe842703          	lw	a4,-24(s0)
80006230:	00271713          	slli	a4,a4,0x2
80006234:	e8078793          	addi	a5,a5,-384 # 80008e80 <__stack_top+0xfffa8de0>
80006238:	00f707b3          	add	a5,a4,a5
8000623c:	0007a783          	lw	a5,0(a5)
80006240:	00078713          	mv	a4,a5
80006244:	fc842783          	lw	a5,-56(s0)
80006248:	02f70733          	mul	a4,a4,a5
8000624c:	800097b7          	lui	a5,0x80009
80006250:	fe842683          	lw	a3,-24(s0)
80006254:	00269693          	slli	a3,a3,0x2
80006258:	e8c78793          	addi	a5,a5,-372 # 80008e8c <__stack_top+0xfffa8dec>
8000625c:	00f687b3          	add	a5,a3,a5
80006260:	0007a783          	lw	a5,0(a5)
80006264:	00078693          	mv	a3,a5
80006268:	fc442783          	lw	a5,-60(s0)
8000626c:	02f687b3          	mul	a5,a3,a5
80006270:	00f707b3          	add	a5,a4,a5
80006274:	faf42823          	sw	a5,-80(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:127
        dynamicEnergy_MEM = dynamicEnergy_MEM >> 6;
80006278:	fb042783          	lw	a5,-80(s0)
8000627c:	0067d793          	srli	a5,a5,0x6
80006280:	faf42823          	sw	a5,-80(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:131
        //printsv("dynamicEnergy_MEM >> 6: ", dynamicEnergy_MEM);

        // the amount of energy spent by this tile in the last window
        totalEnergy = (dynamicEnergy_MEM + dynamicEnergy_PE + dynamicEnergy_Router) + (leakEnergy_PE);
80006284:	fb042703          	lw	a4,-80(s0)
80006288:	fb842783          	lw	a5,-72(s0)
8000628c:	00f70733          	add	a4,a4,a5
80006290:	fcc42783          	lw	a5,-52(s0)
80006294:	00f707b3          	add	a5,a4,a5
80006298:	fb442703          	lw	a4,-76(s0)
8000629c:	00f707b3          	add	a5,a4,a5
800062a0:	faf42623          	sw	a5,-84(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:132
        printsv("TotalEnergy: ", totalEnergy);
800062a4:	fac42783          	lw	a5,-84(s0)
800062a8:	00078593          	mv	a1,a5
800062ac:	800097b7          	lui	a5,0x80009
800062b0:	f2478513          	addi	a0,a5,-220 # 80008f24 <__stack_top+0xfffa8e84>
800062b4:	330000ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:135

        // Fill the ThermalPacket slot...
        ThermalPacket.header.header           = makeAddress(0, 0) | PERIPH_WEST;
800062b8:	00000593          	li	a1,0
800062bc:	00000513          	li	a0,0
800062c0:	081000ef          	jal	ra,80006b40 <makeAddress>
800062c4:	00050713          	mv	a4,a0
800062c8:	000207b7          	lui	a5,0x20
800062cc:	00f76733          	or	a4,a4,a5
800062d0:	8003c7b7          	lui	a5,0x8003c
800062d4:	b8c78793          	addi	a5,a5,-1140 # 8003bb8c <__stack_top+0xfffdbaec>
800062d8:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:136
        ThermalPacket.header.payload_size     = PKT_SERVICE_SIZE;
800062dc:	8003c7b7          	lui	a5,0x8003c
800062e0:	b8c78793          	addi	a5,a5,-1140 # 8003bb8c <__stack_top+0xfffdbaec>
800062e4:	00b00713          	li	a4,11
800062e8:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:137
        ThermalPacket.header.service          = ENERGY_PACKET;
800062ec:	8003c7b7          	lui	a5,0x8003c
800062f0:	b8c78793          	addi	a5,a5,-1140 # 8003bb8c <__stack_top+0xfffdbaec>
800062f4:	05000713          	li	a4,80
800062f8:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:138
        ThermalPacket.header.source_addr      = ProcessorAddr;
800062fc:	800407b7          	lui	a5,0x80040
80006300:	0947a703          	lw	a4,148(a5) # 80040094 <__stack_top+0xfffdfff4>
80006304:	8003c7b7          	lui	a5,0x8003c
80006308:	b8c78793          	addi	a5,a5,-1140 # 8003bb8c <__stack_top+0xfffdbaec>
8000630c:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:139
        ThermalPacket.header.spent_energy     = totalEnergy;
80006310:	8003c7b7          	lui	a5,0x8003c
80006314:	b8c78793          	addi	a5,a5,-1140 # 8003bb8c <__stack_top+0xfffdbaec>
80006318:	fac42703          	lw	a4,-84(s0)
8000631c:	00e7ac23          	sw	a4,24(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:140
        API_PushSendQueue(THERMAL, 0);
80006320:	00000593          	li	a1,0
80006324:	40400537          	lui	a0,0x40400
80006328:	059000ef          	jal	ra,80006b80 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:141
        prints("EnergyPckt sent\n");
8000632c:	800097b7          	lui	a5,0x80009
80006330:	f3478513          	addi	a0,a5,-204 # 80008f34 <__stack_top+0xfffa8e94>
80006334:	204000ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:144

        // change the PE frequency to the selected one
        API_applyFreqScale();
80006338:	f7cff0ef          	jal	ra,80005ab4 <API_applyFreqScale>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:146
    }
    return;
8000633c:	00000013          	nop
80006340:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/thermal.c:147
}
80006344:	05c12083          	lw	ra,92(sp)
80006348:	05812403          	lw	s0,88(sp)
8000634c:	06010113          	addi	sp,sp,96
80006350:	00008067          	ret

80006354 <PLIC_EnableIRQ>:
PLIC_EnableIRQ():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:154
{
80006354:	fd010113          	addi	sp,sp,-48
80006358:	02812623          	sw	s0,44(sp)
8000635c:	03010413          	addi	s0,sp,48
80006360:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:155
    unsigned long hart_id = read_csr(mhartid);
80006364:	f14027f3          	csrr	a5,mhartid
80006368:	fef42623          	sw	a5,-20(s0)
8000636c:	fec42783          	lw	a5,-20(s0)
80006370:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:156
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80006374:	40000737          	lui	a4,0x40000
80006378:	fdc42783          	lw	a5,-36(s0)
8000637c:	0057d793          	srli	a5,a5,0x5
80006380:	fe842683          	lw	a3,-24(s0)
80006384:	00569693          	slli	a3,a3,0x5
80006388:	00f686b3          	add	a3,a3,a5
8000638c:	000017b7          	lui	a5,0x1
80006390:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80006394:	00f687b3          	add	a5,a3,a5
80006398:	00279793          	slli	a5,a5,0x2
8000639c:	00f707b3          	add	a5,a4,a5
800063a0:	0007a783          	lw	a5,0(a5)
800063a4:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:157
    current |= (uint32_t)1 << (IRQn % 32);
800063a8:	fdc42783          	lw	a5,-36(s0)
800063ac:	01f7f793          	andi	a5,a5,31
800063b0:	00100713          	li	a4,1
800063b4:	00f717b3          	sll	a5,a4,a5
800063b8:	fe442703          	lw	a4,-28(s0)
800063bc:	00f767b3          	or	a5,a4,a5
800063c0:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:158
    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
800063c4:	40000737          	lui	a4,0x40000
800063c8:	fdc42783          	lw	a5,-36(s0)
800063cc:	0057d793          	srli	a5,a5,0x5
800063d0:	fe842683          	lw	a3,-24(s0)
800063d4:	00569693          	slli	a3,a3,0x5
800063d8:	00f686b3          	add	a3,a3,a5
800063dc:	000017b7          	lui	a5,0x1
800063e0:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
800063e4:	00f687b3          	add	a5,a3,a5
800063e8:	00279793          	slli	a5,a5,0x2
800063ec:	00f707b3          	add	a5,a4,a5
800063f0:	fe442703          	lw	a4,-28(s0)
800063f4:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:159
}
800063f8:	00000013          	nop
800063fc:	02c12403          	lw	s0,44(sp)
80006400:	03010113          	addi	sp,sp,48
80006404:	00008067          	ret

80006408 <PLIC_SetPriority>:
PLIC_SetPriority():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:188
{
80006408:	fe010113          	addi	sp,sp,-32
8000640c:	00812e23          	sw	s0,28(sp)
80006410:	02010413          	addi	s0,sp,32
80006414:	fea42623          	sw	a0,-20(s0)
80006418:	feb42423          	sw	a1,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:189
    PLIC->SOURCE_PRIORITY[IRQn] = priority;
8000641c:	40000737          	lui	a4,0x40000
80006420:	fec42783          	lw	a5,-20(s0)
80006424:	00279793          	slli	a5,a5,0x2
80006428:	00f707b3          	add	a5,a4,a5
8000642c:	fe842703          	lw	a4,-24(s0)
80006430:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:190
}
80006434:	00000013          	nop
80006438:	01c12403          	lw	s0,28(sp)
8000643c:	02010113          	addi	sp,sp,32
80006440:	00008067          	ret

80006444 <Chronos_init>:
Chronos_init():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:31
extern unsigned int temperatureUpdated;


////////////////////////////////////////////////////////////
// Initialize Chronos stuff
void Chronos_init(){
80006444:	ff010113          	addi	sp,sp,-16
80006448:	00112623          	sw	ra,12(sp)
8000644c:	00812423          	sw	s0,8(sp)
80006450:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:33
    // Resets the amount of each executed instruction
    resetExecutedInstructions();
80006454:	81dff0ef          	jal	ra,80005c70 <resetExecutedInstructions>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:36

    //Informs the Router this tile ID, that is provided by Harness
    HW_set_32bit_reg(ROUTER_BASE, HW_get_32bit_reg(MY_ID)); 
80006458:	900007b7          	lui	a5,0x90000
8000645c:	ffc78513          	addi	a0,a5,-4 # 8ffffffc <__stack_top+0xff9ff5c>
80006460:	afdfa0ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80006464:	00050793          	mv	a5,a0
80006468:	00078593          	mv	a1,a5
8000646c:	50000537          	lui	a0,0x50000
80006470:	ae5fa0ef          	jal	ra,80000f54 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:39
    
    // Reads this processor address, calculated by the router
    ProcessorAddr = HW_get_32bit_reg(ROUTER_BASE);
80006474:	50000537          	lui	a0,0x50000
80006478:	ae5fa0ef          	jal	ra,80000f5c <HW_get_32bit_reg>
8000647c:	00050713          	mv	a4,a0
80006480:	800407b7          	lui	a5,0x80040
80006484:	08e7aa23          	sw	a4,148(a5) # 80040094 <__stack_top+0xfffdfff4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:42

    // Informs the PRINTER this tile address
    HW_set_32bit_reg(PRINTER_CHAR, getXpos(ProcessorAddr));
80006488:	800407b7          	lui	a5,0x80040
8000648c:	0947a783          	lw	a5,148(a5) # 80040094 <__stack_top+0xfffdfff4>
80006490:	00078513          	mv	a0,a5
80006494:	1f8000ef          	jal	ra,8000668c <getXpos>
80006498:	00050793          	mv	a5,a0
8000649c:	00078593          	mv	a1,a5
800064a0:	500007b7          	lui	a5,0x50000
800064a4:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
800064a8:	aadfa0ef          	jal	ra,80000f54 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:43
    HW_set_32bit_reg(PRINTER_CHAR, getYpos(ProcessorAddr));
800064ac:	800407b7          	lui	a5,0x80040
800064b0:	0947a783          	lw	a5,148(a5) # 80040094 <__stack_top+0xfffdfff4>
800064b4:	00078513          	mv	a0,a5
800064b8:	200000ef          	jal	ra,800066b8 <getYpos>
800064bc:	00050793          	mv	a5,a0
800064c0:	00078593          	mv	a1,a5
800064c4:	500007b7          	lui	a5,0x50000
800064c8:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
800064cc:	a89fa0ef          	jal	ra,80000f54 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:46

    // Initialize the TaskList
    API_TaskListInit();
800064d0:	d80fe0ef          	jal	ra,80004a50 <API_TaskListInit>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:49
    
    // Initialize the Message & Service PIPE
    API_PipeInitialization();
800064d4:	e5dfe0ef          	jal	ra,80005330 <API_PipeInitialization>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:50
    SendingQueue_front = 0;
800064d8:	8003c7b7          	lui	a5,0x8003c
800064dc:	de07a223          	sw	zero,-540(a5) # 8003bde4 <__stack_top+0xfffdbd44>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:51
    SendingQueue_tail = 0;
800064e0:	8003c7b7          	lui	a5,0x8003c
800064e4:	b807a423          	sw	zero,-1144(a5) # 8003bb88 <__stack_top+0xfffdbae8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:54

    // Configures the timer to interrupt at each ms
    HW_set_32bit_reg(NI_TIMER, 1000);
800064e8:	3e800593          	li	a1,1000
800064ec:	500007b7          	lui	a5,0x50000
800064f0:	01078513          	addi	a0,a5,16 # 50000010 <RAM_SIZE+0x4ff80010>
800064f4:	a61fa0ef          	jal	ra,80000f54 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:57

    // Informs the NI the address to store incoming packets
    HW_set_32bit_reg(NI_ADDR, (unsigned int)&incommingPacket.header);
800064f8:	8003c7b7          	lui	a5,0x8003c
800064fc:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
80006500:	00078593          	mv	a1,a5
80006504:	500007b7          	lui	a5,0x50000
80006508:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
8000650c:	a49fa0ef          	jal	ra,80000f54 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:60
    
    // Enables interruption from NI
    NI_enable_irq(TX_RX);
80006510:	000077b7          	lui	a5,0x7
80006514:	77778513          	addi	a0,a5,1911 # 7777 <HEAP_SIZE-0x8889>
80006518:	214000ef          	jal	ra,8000672c <NI_enable_irq>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:63

    // Set the system to Idle
    API_setFreqIdle();
8000651c:	d10ff0ef          	jal	ra,80005a2c <API_setFreqIdle>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:64
    API_freqStepUp();
80006520:	de8ff0ef          	jal	ra,80005b08 <API_freqStepUp>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:65
    return;
80006524:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:66
}
80006528:	00c12083          	lw	ra,12(sp)
8000652c:	00812403          	lw	s0,8(sp)
80006530:	01010113          	addi	sp,sp,16
80006534:	00008067          	ret

80006538 <prints>:
prints():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:70

////////////////////////////////////////////////////////////
// Prints a string
void prints(char *text) {
80006538:	fd010113          	addi	sp,sp,-48
8000653c:	02112623          	sw	ra,44(sp)
80006540:	02812423          	sw	s0,40(sp)
80006544:	03010413          	addi	s0,sp,48
80006548:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:71
    int i = 0;
8000654c:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:73 (discriminator 1)
    do {
        HW_set_32bit_reg(PRINTER_CHAR, text[i]);
80006550:	fec42783          	lw	a5,-20(s0)
80006554:	fdc42703          	lw	a4,-36(s0)
80006558:	00f707b3          	add	a5,a4,a5
8000655c:	00078783          	lb	a5,0(a5)
80006560:	00078593          	mv	a1,a5
80006564:	500007b7          	lui	a5,0x50000
80006568:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
8000656c:	9e9fa0ef          	jal	ra,80000f54 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:74 (discriminator 1)
        i++;
80006570:	fec42783          	lw	a5,-20(s0)
80006574:	00178793          	addi	a5,a5,1
80006578:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:75 (discriminator 1)
    } while (text[i - 1] != '\0');
8000657c:	fec42783          	lw	a5,-20(s0)
80006580:	fff78793          	addi	a5,a5,-1
80006584:	fdc42703          	lw	a4,-36(s0)
80006588:	00f707b3          	add	a5,a4,a5
8000658c:	00078783          	lb	a5,0(a5)
80006590:	fc0790e3          	bnez	a5,80006550 <prints+0x18>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:76
    return;
80006594:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:77
}
80006598:	02c12083          	lw	ra,44(sp)
8000659c:	02812403          	lw	s0,40(sp)
800065a0:	03010113          	addi	sp,sp,48
800065a4:	00008067          	ret

800065a8 <printi>:
printi():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:81

////////////////////////////////////////////////////////////
// Prints an integer
void printi(int value) {
800065a8:	fe010113          	addi	sp,sp,-32
800065ac:	00112e23          	sw	ra,28(sp)
800065b0:	00812c23          	sw	s0,24(sp)
800065b4:	02010413          	addi	s0,sp,32
800065b8:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:82
    HW_set_32bit_reg(PRINTER_INT, value);
800065bc:	fec42783          	lw	a5,-20(s0)
800065c0:	00078593          	mv	a1,a5
800065c4:	500007b7          	lui	a5,0x50000
800065c8:	02478513          	addi	a0,a5,36 # 50000024 <RAM_SIZE+0x4ff80024>
800065cc:	989fa0ef          	jal	ra,80000f54 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:83
    return;
800065d0:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:84
}
800065d4:	01c12083          	lw	ra,28(sp)
800065d8:	01812403          	lw	s0,24(sp)
800065dc:	02010113          	addi	sp,sp,32
800065e0:	00008067          	ret

800065e4 <printsv>:
printsv():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:88

////////////////////////////////////////////////////////////
// Prints a string followed by a integer
void printsv(char *text1, int value1) {
800065e4:	fe010113          	addi	sp,sp,-32
800065e8:	00112e23          	sw	ra,28(sp)
800065ec:	00812c23          	sw	s0,24(sp)
800065f0:	02010413          	addi	s0,sp,32
800065f4:	fea42623          	sw	a0,-20(s0)
800065f8:	feb42423          	sw	a1,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:89
    prints(text1);
800065fc:	fec42503          	lw	a0,-20(s0)
80006600:	f39ff0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:90
    printi(value1);
80006604:	fe842503          	lw	a0,-24(s0)
80006608:	fa1ff0ef          	jal	ra,800065a8 <printi>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:91
    prints("\n");
8000660c:	800097b7          	lui	a5,0x80009
80006610:	f4878513          	addi	a0,a5,-184 # 80008f48 <__stack_top+0xfffa8ea8>
80006614:	f25ff0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:92
    return;
80006618:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:93
}
8000661c:	01c12083          	lw	ra,28(sp)
80006620:	01812403          	lw	s0,24(sp)
80006624:	02010113          	addi	sp,sp,32
80006628:	00008067          	ret

8000662c <printsvsv>:
printsvsv():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:97

////////////////////////////////////////////////////////////
// Prints two strings and two integers interspersed
void printsvsv(char *text1, int value1, char *text2, int value2) {
8000662c:	fe010113          	addi	sp,sp,-32
80006630:	00112e23          	sw	ra,28(sp)
80006634:	00812c23          	sw	s0,24(sp)
80006638:	02010413          	addi	s0,sp,32
8000663c:	fea42623          	sw	a0,-20(s0)
80006640:	feb42423          	sw	a1,-24(s0)
80006644:	fec42223          	sw	a2,-28(s0)
80006648:	fed42023          	sw	a3,-32(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:98
    prints(text1);
8000664c:	fec42503          	lw	a0,-20(s0)
80006650:	ee9ff0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:99
    printi(value1);
80006654:	fe842503          	lw	a0,-24(s0)
80006658:	f51ff0ef          	jal	ra,800065a8 <printi>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:100
    prints(text2);
8000665c:	fe442503          	lw	a0,-28(s0)
80006660:	ed9ff0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:101
    printi(value2);
80006664:	fe042503          	lw	a0,-32(s0)
80006668:	f41ff0ef          	jal	ra,800065a8 <printi>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:102
    prints("\n");
8000666c:	800097b7          	lui	a5,0x80009
80006670:	f4878513          	addi	a0,a5,-184 # 80008f48 <__stack_top+0xfffa8ea8>
80006674:	ec5ff0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:103
    return;
80006678:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:104
}
8000667c:	01c12083          	lw	ra,28(sp)
80006680:	01812403          	lw	s0,24(sp)
80006684:	02010113          	addi	sp,sp,32
80006688:	00008067          	ret

8000668c <getXpos>:
getXpos():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:108

////////////////////////////////////////////////////////////
// Gets the X coordinate from the address
unsigned int getXpos(unsigned int addr) { return ((addr & 0x0000FF00) >> 8); }
8000668c:	fe010113          	addi	sp,sp,-32
80006690:	00812e23          	sw	s0,28(sp)
80006694:	02010413          	addi	s0,sp,32
80006698:	fea42623          	sw	a0,-20(s0)
8000669c:	fec42783          	lw	a5,-20(s0)
800066a0:	0087d793          	srli	a5,a5,0x8
800066a4:	0ff7f793          	andi	a5,a5,255
800066a8:	00078513          	mv	a0,a5
800066ac:	01c12403          	lw	s0,28(sp)
800066b0:	02010113          	addi	sp,sp,32
800066b4:	00008067          	ret

800066b8 <getYpos>:
getYpos():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:112

////////////////////////////////////////////////////////////
// Gets the Y coordinate from the address
unsigned int getYpos(unsigned int addr) { return (addr & 0x000000FF); }
800066b8:	fe010113          	addi	sp,sp,-32
800066bc:	00812e23          	sw	s0,28(sp)
800066c0:	02010413          	addi	s0,sp,32
800066c4:	fea42623          	sw	a0,-20(s0)
800066c8:	fec42783          	lw	a5,-20(s0)
800066cc:	0ff7f793          	andi	a5,a5,255
800066d0:	00078513          	mv	a0,a5
800066d4:	01c12403          	lw	s0,28(sp)
800066d8:	02010113          	addi	sp,sp,32
800066dc:	00008067          	ret

800066e0 <SendRaw>:
SendRaw():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:116

///////////////////////////////////////////////////////////////////
// Configure the NI to transmitt a given packet
void SendRaw(unsigned int addr) {
800066e0:	fe010113          	addi	sp,sp,-32
800066e4:	00112e23          	sw	ra,28(sp)
800066e8:	00812c23          	sw	s0,24(sp)
800066ec:	02010413          	addi	s0,sp,32
800066f0:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:117
    HW_set_32bit_reg(NI_ADDR, addr);
800066f4:	fec42583          	lw	a1,-20(s0)
800066f8:	500007b7          	lui	a5,0x50000
800066fc:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
80006700:	855fa0ef          	jal	ra,80000f54 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:118
    HW_set_32bit_reg(NI_TX, TX);
80006704:	000027b7          	lui	a5,0x2
80006708:	22278593          	addi	a1,a5,546 # 2222 <HEAP_SIZE-0xddde>
8000670c:	500007b7          	lui	a5,0x50000
80006710:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80006714:	841fa0ef          	jal	ra,80000f54 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:119
    return;
80006718:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:120
}
8000671c:	01c12083          	lw	ra,28(sp)
80006720:	01812403          	lw	s0,24(sp)
80006724:	02010113          	addi	sp,sp,32
80006728:	00008067          	ret

8000672c <NI_enable_irq>:
NI_enable_irq():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:124

////////////////////////////////////////////////////////////
// Enables interruptions incomming from NI
void NI_enable_irq(int which){
8000672c:	fe010113          	addi	sp,sp,-32
80006730:	00112e23          	sw	ra,28(sp)
80006734:	00812c23          	sw	s0,24(sp)
80006738:	02010413          	addi	s0,sp,32
8000673c:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:125
    PLIC_EnableIRQ(NI_RX_IRQn);
80006740:	00200513          	li	a0,2
80006744:	c11ff0ef          	jal	ra,80006354 <PLIC_EnableIRQ>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:126
    PLIC_SetPriority(NI_RX_IRQn, 1);
80006748:	00100593          	li	a1,1
8000674c:	00200513          	li	a0,2
80006750:	cb9ff0ef          	jal	ra,80006408 <PLIC_SetPriority>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:127
    PLIC_EnableIRQ(NI_TX_IRQn);
80006754:	00300513          	li	a0,3
80006758:	bfdff0ef          	jal	ra,80006354 <PLIC_EnableIRQ>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:128
    PLIC_SetPriority(NI_TX_IRQn, 2);
8000675c:	00200593          	li	a1,2
80006760:	00300513          	li	a0,3
80006764:	ca5ff0ef          	jal	ra,80006408 <PLIC_SetPriority>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:129
    PLIC_EnableIRQ(Timer_IRQn);
80006768:	00400513          	li	a0,4
8000676c:	be9ff0ef          	jal	ra,80006354 <PLIC_EnableIRQ>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:130
    PLIC_SetPriority(Timer_IRQn, 3);
80006770:	00300593          	li	a1,3
80006774:	00400513          	li	a0,4
80006778:	c91ff0ef          	jal	ra,80006408 <PLIC_SetPriority>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:131
    return;
8000677c:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:132
}
80006780:	01c12083          	lw	ra,28(sp)
80006784:	01812403          	lw	s0,24(sp)
80006788:	02010113          	addi	sp,sp,32
8000678c:	00008067          	ret

80006790 <External_2_IRQHandler>:
External_2_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:145
    return;
}

////////////////////////////////////////////////////////////
// Interruption handler for the NI RX
uint8_t External_2_IRQHandler(void){    
80006790:	fe010113          	addi	sp,sp,-32
80006794:	00112e23          	sw	ra,28(sp)
80006798:	00812c23          	sw	s0,24(sp)
8000679c:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:147
    BaseType_t xHigherPriorityTaskWoken;
    prints("ENTREI NA INTERRUPCAO RX\n");
800067a0:	800097b7          	lui	a5,0x80009
800067a4:	f4c78513          	addi	a0,a5,-180 # 80008f4c <__stack_top+0xfffa8eac>
800067a8:	d91ff0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:149
    /* Clear the interrupt. */
    HW_set_32bit_reg(NI_RX, HOLD);
800067ac:	ff600593          	li	a1,-10
800067b0:	500007b7          	lui	a5,0x50000
800067b4:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
800067b8:	f9cfa0ef          	jal	ra,80000f54 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:156
    /* xHigherPriorityTaskWoken must be initialised to pdFALSE.
    If calling vTaskNotifyGiveFromISR() unblocks the handling
    task, and the priority of the handling task is higher than
    the priority of the currently running task, then
    xHigherPriorityTaskWoken will be automatically set to pdTRUE. */
    xHigherPriorityTaskWoken = pdFALSE;
800067bc:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:163
    /* Unblock the handling task so the task can perform
    any processing necessitated by the interrupt.  xHandlingTask
    is the task's handle, which was obtained when the task was
    created.  vTaskNotifyGiveFromISR() also increments
    the receiving task's notification value. */
    vTaskNotifyGiveFromISR( NI_RX_Handler, &xHigherPriorityTaskWoken );
800067c0:	8003c7b7          	lui	a5,0x8003c
800067c4:	8ec7a783          	lw	a5,-1812(a5) # 8003b8ec <__stack_top+0xfffdb84c>
800067c8:	fec40713          	addi	a4,s0,-20
800067cc:	00070593          	mv	a1,a4
800067d0:	00078513          	mv	a0,a5
800067d4:	9e5fc0ef          	jal	ra,800031b8 <vTaskNotifyGiveFromISR>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:168

    /* Force a context switch if xHigherPriorityTaskWoken is now
    set to pdTRUE. The macro used to do this is dependent on
    the port and may be called portEND_SWITCHING_ISR. */
    portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
800067d8:	fec42783          	lw	a5,-20(s0)
800067dc:	00078463          	beqz	a5,800067e4 <External_2_IRQHandler+0x54>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:168 (discriminator 1)
800067e0:	b6cfb0ef          	jal	ra,80001b4c <vPortYield>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:170

    return 0;
800067e4:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:171
}
800067e8:	00078513          	mv	a0,a5
800067ec:	01c12083          	lw	ra,28(sp)
800067f0:	01812403          	lw	s0,24(sp)
800067f4:	02010113          	addi	sp,sp,32
800067f8:	00008067          	ret

800067fc <External_3_IRQHandler>:
External_3_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:175

////////////////////////////////////////////////////////////
// Interruption handler for the NI TX
uint8_t External_3_IRQHandler(void){    
800067fc:	fe010113          	addi	sp,sp,-32
80006800:	00112e23          	sw	ra,28(sp)
80006804:	00812c23          	sw	s0,24(sp)
80006808:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:177
    BaseType_t xHigherPriorityTaskWoken;
    prints("ENTREI NA INTERRUPCAO TX\n");
8000680c:	800097b7          	lui	a5,0x80009
80006810:	f6878513          	addi	a0,a5,-152 # 80008f68 <__stack_top+0xfffa8ec8>
80006814:	d25ff0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:179
    /* Clear the interrupt. */
    HW_set_32bit_reg(NI_TX, HOLD);
80006818:	ff600593          	li	a1,-10
8000681c:	500007b7          	lui	a5,0x50000
80006820:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80006824:	f30fa0ef          	jal	ra,80000f54 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:186
    /* xHigherPriorityTaskWoken must be initialised to pdFALSE.
    If calling vTaskNotifyGiveFromISR() unblocks the handling
    task, and the priority of the handling task is higher than
    the priority of the currently running task, then
    xHigherPriorityTaskWoken will be automatically set to pdTRUE. */
    xHigherPriorityTaskWoken = pdFALSE;
80006828:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:193
    /* Unblock the handling task so the task can perform
    any processing necessitated by the interrupt.  xHandlingTask
    is the task's handle, which was obtained when the task was
    created.  vTaskNotifyGiveFromISR() also increments
    the receiving task's notification value. */
    vTaskNotifyGiveFromISR( NI_TX_Handler, &xHigherPriorityTaskWoken );
8000682c:	8003c7b7          	lui	a5,0x8003c
80006830:	de07a783          	lw	a5,-544(a5) # 8003bde0 <__stack_top+0xfffdbd40>
80006834:	fec40713          	addi	a4,s0,-20
80006838:	00070593          	mv	a1,a4
8000683c:	00078513          	mv	a0,a5
80006840:	979fc0ef          	jal	ra,800031b8 <vTaskNotifyGiveFromISR>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:198

    /* Force a context switch if xHigherPriorityTaskWoken is now
    set to pdTRUE. The macro used to do this is dependent on
    the port and may be called portEND_SWITCHING_ISR. */
    portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
80006844:	fec42783          	lw	a5,-20(s0)
80006848:	00078463          	beqz	a5,80006850 <External_3_IRQHandler+0x54>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:198 (discriminator 1)
8000684c:	b00fb0ef          	jal	ra,80001b4c <vPortYield>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:200

    return 0;
80006850:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:201
}
80006854:	00078513          	mv	a0,a5
80006858:	01c12083          	lw	ra,28(sp)
8000685c:	01812403          	lw	s0,24(sp)
80006860:	02010113          	addi	sp,sp,32
80006864:	00008067          	ret

80006868 <External_4_IRQHandler>:
External_4_IRQHandler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:205

////////////////////////////////////////////////////////////
// Interruption handler for the NI TMR
uint8_t External_4_IRQHandler(void){    
80006868:	fe010113          	addi	sp,sp,-32
8000686c:	00112e23          	sw	ra,28(sp)
80006870:	00812c23          	sw	s0,24(sp)
80006874:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:207
    BaseType_t xHigherPriorityTaskWoken;
    prints("ENTREI NA INTERRUPCAO TMR\n");
80006878:	800097b7          	lui	a5,0x80009
8000687c:	f8478513          	addi	a0,a5,-124 # 80008f84 <__stack_top+0xfffa8ee4>
80006880:	cb9ff0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:209
    /* Clear the interrupt. */
    HW_set_32bit_reg(NI_TIMER, HOLD);
80006884:	ff600593          	li	a1,-10
80006888:	500007b7          	lui	a5,0x50000
8000688c:	01078513          	addi	a0,a5,16 # 50000010 <RAM_SIZE+0x4ff80010>
80006890:	ec4fa0ef          	jal	ra,80000f54 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:216
    /* xHigherPriorityTaskWoken must be initialised to pdFALSE.
    If calling vTaskNotifyGiveFromISR() unblocks the handling
    task, and the priority of the handling task is higher than
    the priority of the currently running task, then
    xHigherPriorityTaskWoken will be automatically set to pdTRUE. */
    xHigherPriorityTaskWoken = pdFALSE;
80006894:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:223
    /* Unblock the handling task so the task can perform
    any processing necessitated by the interrupt.  xHandlingTask
    is the task's handle, which was obtained when the task was
    created.  vTaskNotifyGiveFromISR() also increments
    the receiving task's notification value. */
    vTaskNotifyGiveFromISR( NI_TMR_Handler, &xHigherPriorityTaskWoken );
80006898:	8003c7b7          	lui	a5,0x8003c
8000689c:	de87a783          	lw	a5,-536(a5) # 8003bde8 <__stack_top+0xfffdbd48>
800068a0:	fec40713          	addi	a4,s0,-20
800068a4:	00070593          	mv	a1,a4
800068a8:	00078513          	mv	a0,a5
800068ac:	90dfc0ef          	jal	ra,800031b8 <vTaskNotifyGiveFromISR>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:228

    /* Force a context switch if xHigherPriorityTaskWoken is now
    set to pdTRUE. The macro used to do this is dependent on
    the port and may be called portEND_SWITCHING_ISR. */
    portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
800068b0:	fec42783          	lw	a5,-20(s0)
800068b4:	00078463          	beqz	a5,800068bc <External_4_IRQHandler+0x54>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:228 (discriminator 1)
800068b8:	a94fb0ef          	jal	ra,80001b4c <vPortYield>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:230

    return 0;
800068bc:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:231
}
800068c0:	00078513          	mv	a0,a5
800068c4:	01c12083          	lw	ra,28(sp)
800068c8:	01812403          	lw	s0,24(sp)
800068cc:	02010113          	addi	sp,sp,32
800068d0:	00008067          	ret

800068d4 <mySwap>:
mySwap():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:237


////////////////////////////////////////////////////////////
// https://www.techiedelight.com/implement-itoa-function-in-c/
// Function to swap two numbers
void mySwap(char *x, char *y) {
800068d4:	fd010113          	addi	sp,sp,-48
800068d8:	02812623          	sw	s0,44(sp)
800068dc:	03010413          	addi	s0,sp,48
800068e0:	fca42e23          	sw	a0,-36(s0)
800068e4:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:238
    char t = *x; *x = *y; *y = t;
800068e8:	fdc42783          	lw	a5,-36(s0)
800068ec:	0007c783          	lbu	a5,0(a5)
800068f0:	fef407a3          	sb	a5,-17(s0)
800068f4:	fd842783          	lw	a5,-40(s0)
800068f8:	00078703          	lb	a4,0(a5)
800068fc:	fdc42783          	lw	a5,-36(s0)
80006900:	00e78023          	sb	a4,0(a5)
80006904:	fd842783          	lw	a5,-40(s0)
80006908:	fef44703          	lbu	a4,-17(s0)
8000690c:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:239
}
80006910:	00000013          	nop
80006914:	02c12403          	lw	s0,44(sp)
80006918:	03010113          	addi	sp,sp,48
8000691c:	00008067          	ret

80006920 <reverse>:
reverse():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:241
// Function to reverse `buffer[i…j]`
char* reverse(char *buffer, int i, int j){
80006920:	fe010113          	addi	sp,sp,-32
80006924:	00112e23          	sw	ra,28(sp)
80006928:	00812c23          	sw	s0,24(sp)
8000692c:	02010413          	addi	s0,sp,32
80006930:	fea42623          	sw	a0,-20(s0)
80006934:	feb42423          	sw	a1,-24(s0)
80006938:	fec42223          	sw	a2,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:242
    while (i < j) {
8000693c:	0400006f          	j	8000697c <reverse+0x5c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:243
        mySwap(&buffer[i++], &buffer[j--]);
80006940:	fe842783          	lw	a5,-24(s0)
80006944:	00178713          	addi	a4,a5,1
80006948:	fee42423          	sw	a4,-24(s0)
8000694c:	00078713          	mv	a4,a5
80006950:	fec42783          	lw	a5,-20(s0)
80006954:	00e786b3          	add	a3,a5,a4
80006958:	fe442783          	lw	a5,-28(s0)
8000695c:	fff78713          	addi	a4,a5,-1
80006960:	fee42223          	sw	a4,-28(s0)
80006964:	00078713          	mv	a4,a5
80006968:	fec42783          	lw	a5,-20(s0)
8000696c:	00e787b3          	add	a5,a5,a4
80006970:	00078593          	mv	a1,a5
80006974:	00068513          	mv	a0,a3
80006978:	f5dff0ef          	jal	ra,800068d4 <mySwap>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:242
    while (i < j) {
8000697c:	fe842703          	lw	a4,-24(s0)
80006980:	fe442783          	lw	a5,-28(s0)
80006984:	faf74ee3          	blt	a4,a5,80006940 <reverse+0x20>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:246
    }
 
    return buffer;
80006988:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:247
}
8000698c:	00078513          	mv	a0,a5
80006990:	01c12083          	lw	ra,28(sp)
80006994:	01812403          	lw	s0,24(sp)
80006998:	02010113          	addi	sp,sp,32
8000699c:	00008067          	ret

800069a0 <myItoa>:
myItoa():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:249
// Iterative function to implement `itoa()` function in C
char* myItoa(int value, char* buffer, int base){
800069a0:	fd010113          	addi	sp,sp,-48
800069a4:	02112623          	sw	ra,44(sp)
800069a8:	02812423          	sw	s0,40(sp)
800069ac:	03010413          	addi	s0,sp,48
800069b0:	fca42e23          	sw	a0,-36(s0)
800069b4:	fcb42c23          	sw	a1,-40(s0)
800069b8:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:251
    // invalid input
    if (base < 2 || base > 32) {
800069bc:	fd442703          	lw	a4,-44(s0)
800069c0:	00100793          	li	a5,1
800069c4:	00e7d863          	ble	a4,a5,800069d4 <myItoa+0x34>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:251 (discriminator 1)
800069c8:	fd442703          	lw	a4,-44(s0)
800069cc:	02000793          	li	a5,32
800069d0:	00e7d663          	ble	a4,a5,800069dc <myItoa+0x3c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:252
        return buffer;
800069d4:	fd842783          	lw	a5,-40(s0)
800069d8:	1540006f          	j	80006b2c <myItoa+0x18c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:256
    }
    // consider the absolute value of the number
    int n;
    if (value < 0)
800069dc:	fdc42783          	lw	a5,-36(s0)
800069e0:	0007da63          	bgez	a5,800069f4 <myItoa+0x54>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:257
        n = value * -1;
800069e4:	fdc42783          	lw	a5,-36(s0)
800069e8:	40f007b3          	neg	a5,a5
800069ec:	fef42623          	sw	a5,-20(s0)
800069f0:	00c0006f          	j	800069fc <myItoa+0x5c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:259
    else 
        n = value;
800069f4:	fdc42783          	lw	a5,-36(s0)
800069f8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:261

    int i = 0;
800069fc:	fe042423          	sw	zero,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:262
    while (n){
80006a00:	09c0006f          	j	80006a9c <myItoa+0xfc>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:263
        int r = n % base;
80006a04:	fec42703          	lw	a4,-20(s0)
80006a08:	fd442783          	lw	a5,-44(s0)
80006a0c:	02f767b3          	rem	a5,a4,a5
80006a10:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:265
 
        if (r >= 10) {
80006a14:	fe442703          	lw	a4,-28(s0)
80006a18:	00900793          	li	a5,9
80006a1c:	02e7de63          	ble	a4,a5,80006a58 <myItoa+0xb8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:266
            buffer[i++] = 65 + (r - 10);
80006a20:	fe442783          	lw	a5,-28(s0)
80006a24:	0ff7f793          	andi	a5,a5,255
80006a28:	03778793          	addi	a5,a5,55
80006a2c:	0ff7f693          	andi	a3,a5,255
80006a30:	fe842783          	lw	a5,-24(s0)
80006a34:	00178713          	addi	a4,a5,1
80006a38:	fee42423          	sw	a4,-24(s0)
80006a3c:	00078713          	mv	a4,a5
80006a40:	fd842783          	lw	a5,-40(s0)
80006a44:	00e787b3          	add	a5,a5,a4
80006a48:	01869713          	slli	a4,a3,0x18
80006a4c:	41875713          	srai	a4,a4,0x18
80006a50:	00e78023          	sb	a4,0(a5)
80006a54:	0380006f          	j	80006a8c <myItoa+0xec>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:269
        }
        else {
            buffer[i++] = 48 + r;
80006a58:	fe442783          	lw	a5,-28(s0)
80006a5c:	0ff7f793          	andi	a5,a5,255
80006a60:	03078793          	addi	a5,a5,48
80006a64:	0ff7f693          	andi	a3,a5,255
80006a68:	fe842783          	lw	a5,-24(s0)
80006a6c:	00178713          	addi	a4,a5,1
80006a70:	fee42423          	sw	a4,-24(s0)
80006a74:	00078713          	mv	a4,a5
80006a78:	fd842783          	lw	a5,-40(s0)
80006a7c:	00e787b3          	add	a5,a5,a4
80006a80:	01869713          	slli	a4,a3,0x18
80006a84:	41875713          	srai	a4,a4,0x18
80006a88:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:272
        }
 
        n = n / base;
80006a8c:	fec42703          	lw	a4,-20(s0)
80006a90:	fd442783          	lw	a5,-44(s0)
80006a94:	02f747b3          	div	a5,a4,a5
80006a98:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:262
    while (n){
80006a9c:	fec42783          	lw	a5,-20(s0)
80006aa0:	f60792e3          	bnez	a5,80006a04 <myItoa+0x64>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:275
    }
    // if the number is 0
    if (i == 0) {
80006aa4:	fe842783          	lw	a5,-24(s0)
80006aa8:	02079263          	bnez	a5,80006acc <myItoa+0x12c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:276
        buffer[i++] = '0';
80006aac:	fe842783          	lw	a5,-24(s0)
80006ab0:	00178713          	addi	a4,a5,1
80006ab4:	fee42423          	sw	a4,-24(s0)
80006ab8:	00078713          	mv	a4,a5
80006abc:	fd842783          	lw	a5,-40(s0)
80006ac0:	00e787b3          	add	a5,a5,a4
80006ac4:	03000713          	li	a4,48
80006ac8:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:281
    }
    // If the base is 10 and the value is negative, the resulting string
    // is preceded with a minus sign (-)
    // With any other base, value is always considered unsigned
    if (value < 0 && base == 10) {
80006acc:	fdc42783          	lw	a5,-36(s0)
80006ad0:	0207d863          	bgez	a5,80006b00 <myItoa+0x160>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:281 (discriminator 1)
80006ad4:	fd442703          	lw	a4,-44(s0)
80006ad8:	00a00793          	li	a5,10
80006adc:	02f71263          	bne	a4,a5,80006b00 <myItoa+0x160>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:282
        buffer[i++] = '-';
80006ae0:	fe842783          	lw	a5,-24(s0)
80006ae4:	00178713          	addi	a4,a5,1
80006ae8:	fee42423          	sw	a4,-24(s0)
80006aec:	00078713          	mv	a4,a5
80006af0:	fd842783          	lw	a5,-40(s0)
80006af4:	00e787b3          	add	a5,a5,a4
80006af8:	02d00713          	li	a4,45
80006afc:	00e78023          	sb	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:284
    }
    buffer[i] = '\0'; // null terminate string
80006b00:	fe842783          	lw	a5,-24(s0)
80006b04:	fd842703          	lw	a4,-40(s0)
80006b08:	00f707b3          	add	a5,a4,a5
80006b0c:	00078023          	sb	zero,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:286
    // reverse the string and return it
    return reverse(buffer, 0, i - 1);
80006b10:	fe842783          	lw	a5,-24(s0)
80006b14:	fff78793          	addi	a5,a5,-1
80006b18:	00078613          	mv	a2,a5
80006b1c:	00000593          	li	a1,0
80006b20:	fd842503          	lw	a0,-40(s0)
80006b24:	dfdff0ef          	jal	ra,80006920 <reverse>
80006b28:	00050793          	mv	a5,a0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:287
}
80006b2c:	00078513          	mv	a0,a5
80006b30:	02c12083          	lw	ra,44(sp)
80006b34:	02812403          	lw	s0,40(sp)
80006b38:	03010113          	addi	sp,sp,48
80006b3c:	00008067          	ret

80006b40 <makeAddress>:
makeAddress():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:301
    return;
}

////////////////////////////////////////////////////////////
// Returns the PE address for a giver pair of coords
unsigned int makeAddress(unsigned int x, unsigned int y) {
80006b40:	fd010113          	addi	sp,sp,-48
80006b44:	02812623          	sw	s0,44(sp)
80006b48:	03010413          	addi	s0,sp,48
80006b4c:	fca42e23          	sw	a0,-36(s0)
80006b50:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:302
    unsigned int address = 0x00000000;
80006b54:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:303
    return (address | (x << 8) | y);
80006b58:	fdc42783          	lw	a5,-36(s0)
80006b5c:	00879713          	slli	a4,a5,0x8
80006b60:	fec42783          	lw	a5,-20(s0)
80006b64:	00f76733          	or	a4,a4,a5
80006b68:	fd842783          	lw	a5,-40(s0)
80006b6c:	00f767b3          	or	a5,a4,a5
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:304
}
80006b70:	00078513          	mv	a0,a5
80006b74:	02c12403          	lw	s0,44(sp)
80006b78:	03010113          	addi	sp,sp,48
80006b7c:	00008067          	ret

80006b80 <API_PushSendQueue>:
API_PushSendQueue():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:308

////////////////////////////////////////////////////////////
// Pushes one slot to the sending queue
void API_PushSendQueue(unsigned int type, unsigned int slot){
80006b80:	fe010113          	addi	sp,sp,-32
80006b84:	00112e23          	sw	ra,28(sp)
80006b88:	00812c23          	sw	s0,24(sp)
80006b8c:	02010413          	addi	s0,sp,32
80006b90:	fea42623          	sw	a0,-20(s0)
80006b94:	feb42423          	sw	a1,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:309
    vTaskEnterCritical();
80006b98:	ca0fc0ef          	jal	ra,80003038 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:310
    if(type == THERMAL){
80006b9c:	fec42703          	lw	a4,-20(s0)
80006ba0:	404007b7          	lui	a5,0x40400
80006ba4:	00f71a63          	bne	a4,a5,80006bb8 <API_PushSendQueue+0x38>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:311
        API_PrioritySend(type, slot);
80006ba8:	fe842583          	lw	a1,-24(s0)
80006bac:	fec42503          	lw	a0,-20(s0)
80006bb0:	094000ef          	jal	ra,80006c44 <API_PrioritySend>
80006bb4:	0780006f          	j	80006c2c <API_PushSendQueue+0xac>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:313
    } else {
        SendingQueue[SendingQueue_front] = type | slot;
80006bb8:	8003c7b7          	lui	a5,0x8003c
80006bbc:	de47a683          	lw	a3,-540(a5) # 8003bde4 <__stack_top+0xfffdbd44>
80006bc0:	fec42703          	lw	a4,-20(s0)
80006bc4:	fe842783          	lw	a5,-24(s0)
80006bc8:	00f76733          	or	a4,a4,a5
80006bcc:	8003c7b7          	lui	a5,0x8003c
80006bd0:	00269693          	slli	a3,a3,0x2
80006bd4:	b6878793          	addi	a5,a5,-1176 # 8003bb68 <__stack_top+0xfffdbac8>
80006bd8:	00f687b3          	add	a5,a3,a5
80006bdc:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:314
        printsv("SendingQueue_front: ", SendingQueue_front);
80006be0:	8003c7b7          	lui	a5,0x8003c
80006be4:	de47a783          	lw	a5,-540(a5) # 8003bde4 <__stack_top+0xfffdbd44>
80006be8:	00078593          	mv	a1,a5
80006bec:	800097b7          	lui	a5,0x80009
80006bf0:	fc878513          	addi	a0,a5,-56 # 80008fc8 <__stack_top+0xfffa8f28>
80006bf4:	9f1ff0ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:315
        if(SendingQueue_front == (PIPE_SIZE*2)-1){
80006bf8:	8003c7b7          	lui	a5,0x8003c
80006bfc:	de47a703          	lw	a4,-540(a5) # 8003bde4 <__stack_top+0xfffdbd44>
80006c00:	00700793          	li	a5,7
80006c04:	00f71863          	bne	a4,a5,80006c14 <API_PushSendQueue+0x94>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:316
            SendingQueue_front = 0;
80006c08:	8003c7b7          	lui	a5,0x8003c
80006c0c:	de07a223          	sw	zero,-540(a5) # 8003bde4 <__stack_top+0xfffdbd44>
80006c10:	0180006f          	j	80006c28 <API_PushSendQueue+0xa8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:318
        } else {
            SendingQueue_front++;
80006c14:	8003c7b7          	lui	a5,0x8003c
80006c18:	de47a783          	lw	a5,-540(a5) # 8003bde4 <__stack_top+0xfffdbd44>
80006c1c:	00178713          	addi	a4,a5,1
80006c20:	8003c7b7          	lui	a5,0x8003c
80006c24:	dee7a223          	sw	a4,-540(a5) # 8003bde4 <__stack_top+0xfffdbd44>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:320
        }
        API_Try2Send();
80006c28:	1a0000ef          	jal	ra,80006dc8 <API_Try2Send>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:322
    }
    vTaskExitCritical();
80006c2c:	c48fc0ef          	jal	ra,80003074 <vTaskExitCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:323
    return;
80006c30:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:324
}
80006c34:	01c12083          	lw	ra,28(sp)
80006c38:	01812403          	lw	s0,24(sp)
80006c3c:	02010113          	addi	sp,sp,32
80006c40:	00008067          	ret

80006c44 <API_PrioritySend>:
API_PrioritySend():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:327


void API_PrioritySend(unsigned int type, unsigned int slot){
80006c44:	fb010113          	addi	sp,sp,-80
80006c48:	04112623          	sw	ra,76(sp)
80006c4c:	04812423          	sw	s0,72(sp)
80006c50:	05010413          	addi	s0,sp,80
80006c54:	faa42e23          	sw	a0,-68(s0)
80006c58:	fab42c23          	sw	a1,-72(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:329
    unsigned int auxQ[PIPE_SIZE*2];
    unsigned int aux, i = 0;
80006c5c:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:331 (discriminator 1)
    do{
        aux = API_PopSendQueue();
80006c60:	0c8000ef          	jal	ra,80006d28 <API_PopSendQueue>
80006c64:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:332 (discriminator 1)
        auxQ[i] = aux;
80006c68:	fec42783          	lw	a5,-20(s0)
80006c6c:	00279793          	slli	a5,a5,0x2
80006c70:	ff040713          	addi	a4,s0,-16
80006c74:	00f707b3          	add	a5,a4,a5
80006c78:	fe842703          	lw	a4,-24(s0)
80006c7c:	fce7ac23          	sw	a4,-40(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:333 (discriminator 1)
        i++;
80006c80:	fec42783          	lw	a5,-20(s0)
80006c84:	00178793          	addi	a5,a5,1
80006c88:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:334 (discriminator 1)
    }while(aux != EMPTY);
80006c8c:	fe842703          	lw	a4,-24(s0)
80006c90:	303007b7          	lui	a5,0x30300
80006c94:	fcf716e3          	bne	a4,a5,80006c60 <API_PrioritySend+0x1c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:335
    API_PushSendQueue(type+1, slot);
80006c98:	fbc42783          	lw	a5,-68(s0)
80006c9c:	00178793          	addi	a5,a5,1 # 30300001 <RAM_SIZE+0x30280001>
80006ca0:	fb842583          	lw	a1,-72(s0)
80006ca4:	00078513          	mv	a0,a5
80006ca8:	ed9ff0ef          	jal	ra,80006b80 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:336
    i = 0;
80006cac:	fe042623          	sw	zero,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:338
    do{
        aux = auxQ[i];
80006cb0:	fec42783          	lw	a5,-20(s0)
80006cb4:	00279793          	slli	a5,a5,0x2
80006cb8:	ff040713          	addi	a4,s0,-16
80006cbc:	00f707b3          	add	a5,a4,a5
80006cc0:	fd87a783          	lw	a5,-40(a5)
80006cc4:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:339
        if(aux != EMPTY)
80006cc8:	fe842703          	lw	a4,-24(s0)
80006ccc:	303007b7          	lui	a5,0x30300
80006cd0:	02f70663          	beq	a4,a5,80006cfc <API_PrioritySend+0xb8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:340
            API_PushSendQueue((aux & 0xFFFF0000), (aux & 0x0000FFFF));
80006cd4:	fe842703          	lw	a4,-24(s0)
80006cd8:	ffff07b7          	lui	a5,0xffff0
80006cdc:	00f776b3          	and	a3,a4,a5
80006ce0:	fe842703          	lw	a4,-24(s0)
80006ce4:	000107b7          	lui	a5,0x10
80006ce8:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80006cec:	00f777b3          	and	a5,a4,a5
80006cf0:	00078593          	mv	a1,a5
80006cf4:	00068513          	mv	a0,a3
80006cf8:	e89ff0ef          	jal	ra,80006b80 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:341
        i++;
80006cfc:	fec42783          	lw	a5,-20(s0)
80006d00:	00178793          	addi	a5,a5,1
80006d04:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:342
    }while(aux != EMPTY);
80006d08:	fe842703          	lw	a4,-24(s0)
80006d0c:	303007b7          	lui	a5,0x30300
80006d10:	faf710e3          	bne	a4,a5,80006cb0 <API_PrioritySend+0x6c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:343
    return;
80006d14:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:344
}
80006d18:	04c12083          	lw	ra,76(sp)
80006d1c:	04812403          	lw	s0,72(sp)
80006d20:	05010113          	addi	sp,sp,80
80006d24:	00008067          	ret

80006d28 <API_PopSendQueue>:
API_PopSendQueue():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:349


////////////////////////////////////////////////////////////
// Pushes one slot to the sending queue
unsigned int API_PopSendQueue(){
80006d28:	fe010113          	addi	sp,sp,-32
80006d2c:	00112e23          	sw	ra,28(sp)
80006d30:	00812c23          	sw	s0,24(sp)
80006d34:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:351
    unsigned int element;
    vTaskEnterCritical();
80006d38:	b00fc0ef          	jal	ra,80003038 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:352
    if (SendingQueue_front == SendingQueue_tail){
80006d3c:	8003c7b7          	lui	a5,0x8003c
80006d40:	de47a703          	lw	a4,-540(a5) # 8003bde4 <__stack_top+0xfffdbd44>
80006d44:	8003c7b7          	lui	a5,0x8003c
80006d48:	b887a783          	lw	a5,-1144(a5) # 8003bb88 <__stack_top+0xfffdbae8>
80006d4c:	00f71863          	bne	a4,a5,80006d5c <API_PopSendQueue+0x34>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:353
        vTaskExitCritical();
80006d50:	b24fc0ef          	jal	ra,80003074 <vTaskExitCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:354
        return EMPTY;
80006d54:	303007b7          	lui	a5,0x30300
80006d58:	05c0006f          	j	80006db4 <API_PopSendQueue+0x8c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:356
    } else {
        element = SendingQueue[SendingQueue_tail];
80006d5c:	8003c7b7          	lui	a5,0x8003c
80006d60:	b887a703          	lw	a4,-1144(a5) # 8003bb88 <__stack_top+0xfffdbae8>
80006d64:	8003c7b7          	lui	a5,0x8003c
80006d68:	00271713          	slli	a4,a4,0x2
80006d6c:	b6878793          	addi	a5,a5,-1176 # 8003bb68 <__stack_top+0xfffdbac8>
80006d70:	00f707b3          	add	a5,a4,a5
80006d74:	0007a783          	lw	a5,0(a5)
80006d78:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:357
        if (SendingQueue_tail == (PIPE_SIZE*2)-1){
80006d7c:	8003c7b7          	lui	a5,0x8003c
80006d80:	b887a703          	lw	a4,-1144(a5) # 8003bb88 <__stack_top+0xfffdbae8>
80006d84:	00700793          	li	a5,7
80006d88:	00f71863          	bne	a4,a5,80006d98 <API_PopSendQueue+0x70>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:358
            SendingQueue_tail = 0;
80006d8c:	8003c7b7          	lui	a5,0x8003c
80006d90:	b807a423          	sw	zero,-1144(a5) # 8003bb88 <__stack_top+0xfffdbae8>
80006d94:	0180006f          	j	80006dac <API_PopSendQueue+0x84>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:360
        } else {
            SendingQueue_tail++;
80006d98:	8003c7b7          	lui	a5,0x8003c
80006d9c:	b887a783          	lw	a5,-1144(a5) # 8003bb88 <__stack_top+0xfffdbae8>
80006da0:	00178713          	addi	a4,a5,1
80006da4:	8003c7b7          	lui	a5,0x8003c
80006da8:	b8e7a423          	sw	a4,-1144(a5) # 8003bb88 <__stack_top+0xfffdbae8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:362
        }
        vTaskExitCritical();
80006dac:	ac8fc0ef          	jal	ra,80003074 <vTaskExitCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:363
        return element;
80006db0:	fec42783          	lw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:365
    }
}
80006db4:	00078513          	mv	a0,a5
80006db8:	01c12083          	lw	ra,28(sp)
80006dbc:	01812403          	lw	s0,24(sp)
80006dc0:	02010113          	addi	sp,sp,32
80006dc4:	00008067          	ret

80006dc8 <API_Try2Send>:
API_Try2Send():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:369

////////////////////////////////////////////////////////////
// Try to send some packet! 
void API_Try2Send(){
80006dc8:	fe010113          	addi	sp,sp,-32
80006dcc:	00112e23          	sw	ra,28(sp)
80006dd0:	00812c23          	sw	s0,24(sp)
80006dd4:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:373
    unsigned int toSend, taskID, slot, i;
    // Try to send the packet to NI if it's available
    // Checks if the NI is available to transmitt something
    if (HW_get_32bit_reg(NI_TX) == NI_STATUS_OFF){
80006dd8:	500007b7          	lui	a5,0x50000
80006ddc:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80006de0:	97cfa0ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80006de4:	00050713          	mv	a4,a0
80006de8:	0ff00793          	li	a5,255
80006dec:	18f71863          	bne	a4,a5,80006f7c <API_Try2Send+0x1b4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:374
        vTaskEnterCritical();
80006df0:	a48fc0ef          	jal	ra,80003038 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:375
        toSend = API_PopSendQueue();
80006df4:	f35ff0ef          	jal	ra,80006d28 <API_PopSendQueue>
80006df8:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:376
        if (toSend != EMPTY){
80006dfc:	fec42703          	lw	a4,-20(s0)
80006e00:	303007b7          	lui	a5,0x30300
80006e04:	16f70263          	beq	a4,a5,80006f68 <API_Try2Send+0x1a0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:377
            SendingSlot = toSend;
80006e08:	8003b7b7          	lui	a5,0x8003b
80006e0c:	fec42703          	lw	a4,-20(s0)
80006e10:	7ee7ac23          	sw	a4,2040(a5) # 8003b7f8 <__stack_top+0xfffdb758>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:378
            if((toSend & 0xFFFF0000) == SERVICE){
80006e14:	fec42703          	lw	a4,-20(s0)
80006e18:	ffff07b7          	lui	a5,0xffff0
80006e1c:	00f77733          	and	a4,a4,a5
80006e20:	101007b7          	lui	a5,0x10100
80006e24:	04f71063          	bne	a4,a5,80006e64 <API_Try2Send+0x9c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:379
                SendRaw((unsigned int)&ServicePipe[toSend & 0x0000FFFF].header);
80006e28:	fec42703          	lw	a4,-20(s0)
80006e2c:	000107b7          	lui	a5,0x10
80006e30:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80006e34:	00f77733          	and	a4,a4,a5
80006e38:	00070793          	mv	a5,a4
80006e3c:	00479793          	slli	a5,a5,0x4
80006e40:	40e787b3          	sub	a5,a5,a4
80006e44:	00279793          	slli	a5,a5,0x2
80006e48:	8003b737          	lui	a4,0x8003b
80006e4c:	7fc70713          	addi	a4,a4,2044 # 8003b7fc <__stack_top+0xfffdb75c>
80006e50:	00e787b3          	add	a5,a5,a4
80006e54:	00878793          	addi	a5,a5,8
80006e58:	00078513          	mv	a0,a5
80006e5c:	885ff0ef          	jal	ra,800066e0 <SendRaw>
80006e60:	0f80006f          	j	80006f58 <API_Try2Send+0x190>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:381
            }
            else if((toSend & 0xFFFF0000) == MESSAGE){
80006e64:	fec42703          	lw	a4,-20(s0)
80006e68:	ffff07b7          	lui	a5,0xffff0
80006e6c:	00f77733          	and	a4,a4,a5
80006e70:	202007b7          	lui	a5,0x20200
80006e74:	06f71463          	bne	a4,a5,80006edc <API_Try2Send+0x114>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:382
                taskID = (toSend & 0x0000FF00) >> 8;
80006e78:	fec42783          	lw	a5,-20(s0)
80006e7c:	0087d793          	srli	a5,a5,0x8
80006e80:	0ff7f793          	andi	a5,a5,255
80006e84:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:383
                slot = toSend & 0x000000FF;
80006e88:	fec42783          	lw	a5,-20(s0)
80006e8c:	0ff7f793          	andi	a5,a5,255
80006e90:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:384
                SendRaw((unsigned int)&TaskList[taskID].MessagePipe[slot].header);
80006e94:	fe442703          	lw	a4,-28(s0)
80006e98:	00070793          	mv	a5,a4
80006e9c:	00379793          	slli	a5,a5,0x3
80006ea0:	00e787b3          	add	a5,a5,a4
80006ea4:	00679793          	slli	a5,a5,0x6
80006ea8:	fe842683          	lw	a3,-24(s0)
80006eac:	00001737          	lui	a4,0x1
80006eb0:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80006eb4:	02e68733          	mul	a4,a3,a4
80006eb8:	00e787b3          	add	a5,a5,a4
80006ebc:	03078713          	addi	a4,a5,48 # 20200030 <RAM_SIZE+0x20180030>
80006ec0:	8003c7b7          	lui	a5,0x8003c
80006ec4:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80006ec8:	00f707b3          	add	a5,a4,a5
80006ecc:	00878793          	addi	a5,a5,8
80006ed0:	00078513          	mv	a0,a5
80006ed4:	80dff0ef          	jal	ra,800066e0 <SendRaw>
80006ed8:	0800006f          	j	80006f58 <API_Try2Send+0x190>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:386
            }
            else if((toSend & 0xFFFF0000) == THERMAL){
80006edc:	fec42703          	lw	a4,-20(s0)
80006ee0:	ffff07b7          	lui	a5,0xffff0
80006ee4:	00f77733          	and	a4,a4,a5
80006ee8:	404007b7          	lui	a5,0x40400
80006eec:	02f71263          	bne	a4,a5,80006f10 <API_Try2Send+0x148>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:387
                SendingSlot = THERMAL;
80006ef0:	8003b7b7          	lui	a5,0x8003b
80006ef4:	40400737          	lui	a4,0x40400
80006ef8:	7ee7ac23          	sw	a4,2040(a5) # 8003b7f8 <__stack_top+0xfffdb758>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:388
                SendRaw((unsigned int)&ThermalPacket.header);
80006efc:	8003c7b7          	lui	a5,0x8003c
80006f00:	b9478793          	addi	a5,a5,-1132 # 8003bb94 <__stack_top+0xfffdbaf4>
80006f04:	00078513          	mv	a0,a5
80006f08:	fd8ff0ef          	jal	ra,800066e0 <SendRaw>
80006f0c:	04c0006f          	j	80006f58 <API_Try2Send+0x190>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:390
            }
            else if((toSend & 0xFFFF0000) == SYS_MESSAGE){
80006f10:	fec42703          	lw	a4,-20(s0)
80006f14:	ffff07b7          	lui	a5,0xffff0
80006f18:	00f77733          	and	a4,a4,a5
80006f1c:	505007b7          	lui	a5,0x50500
80006f20:	02f71263          	bne	a4,a5,80006f44 <API_Try2Send+0x17c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:391
                SendingSlot = SYS_MESSAGE;
80006f24:	8003b7b7          	lui	a5,0x8003b
80006f28:	50500737          	lui	a4,0x50500
80006f2c:	7ee7ac23          	sw	a4,2040(a5) # 8003b7f8 <__stack_top+0xfffdb758>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:392
                SendRaw((unsigned int)&ServiceMessage.header);
80006f30:	8003c7b7          	lui	a5,0x8003c
80006f34:	8fc78793          	addi	a5,a5,-1796 # 8003b8fc <__stack_top+0xfffdb85c>
80006f38:	00078513          	mv	a0,a5
80006f3c:	fa4ff0ef          	jal	ra,800066e0 <SendRaw>
80006f40:	0180006f          	j	80006f58 <API_Try2Send+0x190>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:395
            } 
            else{
                printsv("ERROR! desconhecido!! ", toSend);
80006f44:	fec42783          	lw	a5,-20(s0)
80006f48:	00078593          	mv	a1,a5
80006f4c:	800097b7          	lui	a5,0x80009
80006f50:	fe078513          	addi	a0,a5,-32 # 80008fe0 <__stack_top+0xfffa8f40>
80006f54:	e90ff0ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:397
            }
            prints("API_Try2Send success!\n");
80006f58:	800097b7          	lui	a5,0x80009
80006f5c:	ff878513          	addi	a0,a5,-8 # 80008ff8 <__stack_top+0xfffa8f58>
80006f60:	dd8ff0ef          	jal	ra,80006538 <prints>
80006f64:	0100006f          	j	80006f74 <API_Try2Send+0x1ac>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:399
        } else {
            prints("API_Try2Send failed - empty SendQueue!\n");
80006f68:	800097b7          	lui	a5,0x80009
80006f6c:	01078513          	addi	a0,a5,16 # 80009010 <__stack_top+0xfffa8f70>
80006f70:	dc8ff0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:401
        }
        vTaskExitCritical();
80006f74:	900fc0ef          	jal	ra,80003074 <vTaskExitCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:405
    } else {
        prints("API_Try2Send failed - NI_TX occupied!\n");
    }
    return;
80006f78:	0140006f          	j	80006f8c <API_Try2Send+0x1c4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:403
        prints("API_Try2Send failed - NI_TX occupied!\n");
80006f7c:	800097b7          	lui	a5,0x80009
80006f80:	03878513          	addi	a0,a5,56 # 80009038 <__stack_top+0xfffa8f98>
80006f84:	db4ff0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:405
    return;
80006f88:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:406
}
80006f8c:	01c12083          	lw	ra,28(sp)
80006f90:	01812403          	lw	s0,24(sp)
80006f94:	02010113          	addi	sp,sp,32
80006f98:	00008067          	ret

80006f9c <API_AckTaskAllocation>:
API_AckTaskAllocation():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:408

void API_AckTaskAllocation(unsigned int task_id, unsigned int app_id){
80006f9c:	fd010113          	addi	sp,sp,-48
80006fa0:	02112623          	sw	ra,44(sp)
80006fa4:	02812423          	sw	s0,40(sp)
80006fa8:	03010413          	addi	s0,sp,48
80006fac:	fca42e23          	sw	a0,-36(s0)
80006fb0:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:411
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80006fb4:	e88fe0ef          	jal	ra,8000563c <API_GetServiceSlot>
80006fb8:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:412
        if(mySlot == PIPE_FULL){
80006fbc:	fec42703          	lw	a4,-20(s0)
80006fc0:	fdfe07b7          	lui	a5,0xfdfe0
80006fc4:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df7fd5d>
80006fc8:	00f71a63          	bne	a4,a5,80006fdc <API_AckTaskAllocation+0x40>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:414
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            prints("Estou preso aqui1...\n");
80006fcc:	800097b7          	lui	a5,0x80009
80006fd0:	06078513          	addi	a0,a5,96 # 80009060 <__stack_top+0xfffa8fc0>
80006fd4:	d64ff0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:415
            API_NI_Handler();
80006fd8:	455000ef          	jal	ra,80007c2c <API_NI_Handler>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:417
        }
    }while(mySlot == PIPE_FULL);
80006fdc:	fec42703          	lw	a4,-20(s0)
80006fe0:	fdfe07b7          	lui	a5,0xfdfe0
80006fe4:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df7fd5d>
80006fe8:	fcf706e3          	beq	a4,a5,80006fb4 <API_AckTaskAllocation+0x18>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:419

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
80006fec:	8003b7b7          	lui	a5,0x8003b
80006ff0:	fec42703          	lw	a4,-20(s0)
80006ff4:	7fc78693          	addi	a3,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
80006ff8:	00070793          	mv	a5,a4
80006ffc:	00479793          	slli	a5,a5,0x4
80007000:	40e787b3          	sub	a5,a5,a4
80007004:	00279793          	slli	a5,a5,0x2
80007008:	00f687b3          	add	a5,a3,a5
8000700c:	feff0737          	lui	a4,0xfeff0
80007010:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7ef8fe5e>
80007014:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:421

    ServicePipe[mySlot].header.header           = makeAddress(0, 0);
80007018:	00000593          	li	a1,0
8000701c:	00000513          	li	a0,0
80007020:	b21ff0ef          	jal	ra,80006b40 <makeAddress>
80007024:	00050613          	mv	a2,a0
80007028:	8003b7b7          	lui	a5,0x8003b
8000702c:	fec42703          	lw	a4,-20(s0)
80007030:	7fc78693          	addi	a3,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
80007034:	00070793          	mv	a5,a4
80007038:	00479793          	slli	a5,a5,0x4
8000703c:	40e787b3          	sub	a5,a5,a4
80007040:	00279793          	slli	a5,a5,0x2
80007044:	00f687b3          	add	a5,a3,a5
80007048:	00c7a423          	sw	a2,8(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:422
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
8000704c:	8003b7b7          	lui	a5,0x8003b
80007050:	fec42703          	lw	a4,-20(s0)
80007054:	7fc78693          	addi	a3,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
80007058:	00070793          	mv	a5,a4
8000705c:	00479793          	slli	a5,a5,0x4
80007060:	40e787b3          	sub	a5,a5,a4
80007064:	00279793          	slli	a5,a5,0x2
80007068:	00f687b3          	add	a5,a3,a5
8000706c:	00b00713          	li	a4,11
80007070:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:423
    ServicePipe[mySlot].header.service          = TASK_ALLOCATION_SUCCESS;
80007074:	8003b7b7          	lui	a5,0x8003b
80007078:	fec42703          	lw	a4,-20(s0)
8000707c:	7fc78693          	addi	a3,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
80007080:	00070793          	mv	a5,a4
80007084:	00479793          	slli	a5,a5,0x4
80007088:	40e787b3          	sub	a5,a5,a4
8000708c:	00279793          	slli	a5,a5,0x2
80007090:	00f687b3          	add	a5,a3,a5
80007094:	03500713          	li	a4,53
80007098:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:424
    ServicePipe[mySlot].header.task_id          = task_id;
8000709c:	8003b7b7          	lui	a5,0x8003b
800070a0:	fec42703          	lw	a4,-20(s0)
800070a4:	7fc78693          	addi	a3,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
800070a8:	00070793          	mv	a5,a4
800070ac:	00479793          	slli	a5,a5,0x4
800070b0:	40e787b3          	sub	a5,a5,a4
800070b4:	00279793          	slli	a5,a5,0x2
800070b8:	00f687b3          	add	a5,a3,a5
800070bc:	fdc42703          	lw	a4,-36(s0)
800070c0:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:425
    ServicePipe[mySlot].header.task_app_id      = app_id;
800070c4:	8003b7b7          	lui	a5,0x8003b
800070c8:	fec42703          	lw	a4,-20(s0)
800070cc:	7fc78693          	addi	a3,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
800070d0:	00070793          	mv	a5,a4
800070d4:	00479793          	slli	a5,a5,0x4
800070d8:	40e787b3          	sub	a5,a5,a4
800070dc:	00279793          	slli	a5,a5,0x2
800070e0:	00f687b3          	add	a5,a3,a5
800070e4:	fd842703          	lw	a4,-40(s0)
800070e8:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:427

    API_PushSendQueue(SERVICE, mySlot);
800070ec:	fec42583          	lw	a1,-20(s0)
800070f0:	10100537          	lui	a0,0x10100
800070f4:	a8dff0ef          	jal	ra,80006b80 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:428
    return;    
800070f8:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:429
}
800070fc:	02c12083          	lw	ra,44(sp)
80007100:	02812403          	lw	s0,40(sp)
80007104:	03010113          	addi	sp,sp,48
80007108:	00008067          	ret

8000710c <API_SendMessage>:
API_SendMessage():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:431

void API_SendMessage(unsigned int addr, unsigned int taskID){
8000710c:	fc010113          	addi	sp,sp,-64
80007110:	02112e23          	sw	ra,60(sp)
80007114:	02812c23          	sw	s0,56(sp)
80007118:	04010413          	addi	s0,sp,64
8000711c:	fca42623          	sw	a0,-52(s0)
80007120:	fcb42423          	sw	a1,-56(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:436
    unsigned int mySlot, slot, taskSlot;
    unsigned int i;
    Message *theMessage;
    do{
        vTaskEnterCritical();
80007124:	f15fb0ef          	jal	ra,80003038 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:437
        mySlot = API_GetMessageSlot();
80007128:	b14fe0ef          	jal	ra,8000543c <API_GetMessageSlot>
8000712c:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:438
        if(mySlot == PIPE_FULL){
80007130:	fe842703          	lw	a4,-24(s0)
80007134:	fdfe07b7          	lui	a5,0xfdfe0
80007138:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df7fd5d>
8000713c:	06f71663          	bne	a4,a5,800071a8 <API_SendMessage+0x9c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:440
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            prints("Estou preso aqui2...\n");
80007140:	800097b7          	lui	a5,0x80009
80007144:	07878513          	addi	a0,a5,120 # 80009078 <__stack_top+0xfffa8fd8>
80007148:	bf0ff0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:442
            //API_NI_Handler();
            taskSlot = API_GetCurrentTaskSlot();
8000714c:	9adfd0ef          	jal	ra,80004af8 <API_GetCurrentTaskSlot>
80007150:	fea42223          	sw	a0,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:443
            TaskList[taskSlot].status = TASK_SLOT_SUSPENDED;
80007154:	8003c7b7          	lui	a5,0x8003c
80007158:	fe442683          	lw	a3,-28(s0)
8000715c:	00001737          	lui	a4,0x1
80007160:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80007164:	02e68733          	mul	a4,a3,a4
80007168:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
8000716c:	00f707b3          	add	a5,a4,a5
80007170:	00400713          	li	a4,4
80007174:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:444
            vTaskExitCritical();
80007178:	efdfb0ef          	jal	ra,80003074 <vTaskExitCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:445
            vTaskSuspend( TaskList[taskSlot].TaskHandler );
8000717c:	8003c7b7          	lui	a5,0x8003c
80007180:	fe442683          	lw	a3,-28(s0)
80007184:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80007188:	000017b7          	lui	a5,0x1
8000718c:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80007190:	02f687b3          	mul	a5,a3,a5
80007194:	00f707b3          	add	a5,a4,a5
80007198:	0187a783          	lw	a5,24(a5)
8000719c:	00078513          	mv	a0,a5
800071a0:	908fb0ef          	jal	ra,800022a8 <vTaskSuspend>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:446
            vTaskEnterCritical();
800071a4:	e95fb0ef          	jal	ra,80003038 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:448
        }
    }while(mySlot == PIPE_FULL);
800071a8:	fe842703          	lw	a4,-24(s0)
800071ac:	fdfe07b7          	lui	a5,0xfdfe0
800071b0:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df7fd5d>
800071b4:	f6f708e3          	beq	a4,a5,80007124 <API_SendMessage+0x18>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:450
    
    theMessage = addr;
800071b8:	fcc42783          	lw	a5,-52(s0)
800071bc:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:452

    taskSlot = (mySlot & 0x0000FF00) >> 8;//API_GetCurrentTaskSlot();
800071c0:	fe842783          	lw	a5,-24(s0)
800071c4:	0087d793          	srli	a5,a5,0x8
800071c8:	0ff7f793          	andi	a5,a5,255
800071cc:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:453
    slot = mySlot & 0x000000FF;
800071d0:	fe842783          	lw	a5,-24(s0)
800071d4:	0ff7f793          	andi	a5,a5,255
800071d8:	fcf42e23          	sw	a5,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:454
    printsv("taskSlot: ", taskSlot);
800071dc:	fe442783          	lw	a5,-28(s0)
800071e0:	00078593          	mv	a1,a5
800071e4:	800097b7          	lui	a5,0x80009
800071e8:	09078513          	addi	a0,a5,144 # 80009090 <__stack_top+0xfffa8ff0>
800071ec:	bf8ff0ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:455
    printsvsv("Adding a msg to task ", taskID, " in the PIPE slot ", mySlot);
800071f0:	fc842703          	lw	a4,-56(s0)
800071f4:	fe842783          	lw	a5,-24(s0)
800071f8:	00078693          	mv	a3,a5
800071fc:	800097b7          	lui	a5,0x80009
80007200:	09c78613          	addi	a2,a5,156 # 8000909c <__stack_top+0xfffa8ffc>
80007204:	00070593          	mv	a1,a4
80007208:	800097b7          	lui	a5,0x80009
8000720c:	0b078513          	addi	a0,a5,176 # 800090b0 <__stack_top+0xfffa9010>
80007210:	c1cff0ef          	jal	ra,8000662c <printsvsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:456
    printsv("from app: ", TaskList[taskSlot].AppID);
80007214:	8003c7b7          	lui	a5,0x8003c
80007218:	fe442683          	lw	a3,-28(s0)
8000721c:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80007220:	000017b7          	lui	a5,0x1
80007224:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80007228:	02f687b3          	mul	a5,a3,a5
8000722c:	00f707b3          	add	a5,a4,a5
80007230:	0147a783          	lw	a5,20(a5)
80007234:	00078593          	mv	a1,a5
80007238:	800097b7          	lui	a5,0x80009
8000723c:	0c878513          	addi	a0,a5,200 # 800090c8 <__stack_top+0xfffa9028>
80007240:	ba4ff0ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:459
    //MessagePipe[mySlot].holder = taskSlot;

    TaskList[taskSlot].MessagePipe[slot].header.header           = TaskList[taskSlot].TasksMap[taskID];
80007244:	8003c737          	lui	a4,0x8003c
80007248:	fe442683          	lw	a3,-28(s0)
8000724c:	26100793          	li	a5,609
80007250:	02f686b3          	mul	a3,a3,a5
80007254:	fc842783          	lw	a5,-56(s0)
80007258:	00f687b3          	add	a5,a3,a5
8000725c:	25478793          	addi	a5,a5,596
80007260:	76c70713          	addi	a4,a4,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80007264:	00279793          	slli	a5,a5,0x2
80007268:	00f707b3          	add	a5,a4,a5
8000726c:	00c7a683          	lw	a3,12(a5)
80007270:	8003c7b7          	lui	a5,0x8003c
80007274:	fdc42703          	lw	a4,-36(s0)
80007278:	fe442583          	lw	a1,-28(s0)
8000727c:	76c78613          	addi	a2,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80007280:	00070793          	mv	a5,a4
80007284:	00379793          	slli	a5,a5,0x3
80007288:	00e787b3          	add	a5,a5,a4
8000728c:	00679793          	slli	a5,a5,0x6
80007290:	00001737          	lui	a4,0x1
80007294:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80007298:	02e58733          	mul	a4,a1,a4
8000729c:	00e787b3          	add	a5,a5,a4
800072a0:	00f607b3          	add	a5,a2,a5
800072a4:	02d7ac23          	sw	a3,56(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:460
    TaskList[taskSlot].MessagePipe[slot].header.payload_size     = PKT_SERVICE_SIZE + theMessage->length + 1;
800072a8:	fe042783          	lw	a5,-32(s0)
800072ac:	0007a783          	lw	a5,0(a5)
800072b0:	00c78693          	addi	a3,a5,12
800072b4:	8003c7b7          	lui	a5,0x8003c
800072b8:	fdc42703          	lw	a4,-36(s0)
800072bc:	fe442583          	lw	a1,-28(s0)
800072c0:	76c78613          	addi	a2,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
800072c4:	00070793          	mv	a5,a4
800072c8:	00379793          	slli	a5,a5,0x3
800072cc:	00e787b3          	add	a5,a5,a4
800072d0:	00679793          	slli	a5,a5,0x6
800072d4:	00001737          	lui	a4,0x1
800072d8:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
800072dc:	02e58733          	mul	a4,a1,a4
800072e0:	00e787b3          	add	a5,a5,a4
800072e4:	00f607b3          	add	a5,a2,a5
800072e8:	02d7ae23          	sw	a3,60(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:461
    TaskList[taskSlot].MessagePipe[slot].header.service          = MESSAGE_DELIVERY;
800072ec:	8003c7b7          	lui	a5,0x8003c
800072f0:	fdc42703          	lw	a4,-36(s0)
800072f4:	fe442603          	lw	a2,-28(s0)
800072f8:	76c78693          	addi	a3,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
800072fc:	00070793          	mv	a5,a4
80007300:	00379793          	slli	a5,a5,0x3
80007304:	00e787b3          	add	a5,a5,a4
80007308:	00679793          	slli	a5,a5,0x6
8000730c:	00001737          	lui	a4,0x1
80007310:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80007314:	02e60733          	mul	a4,a2,a4
80007318:	00e787b3          	add	a5,a5,a4
8000731c:	00f687b3          	add	a5,a3,a5
80007320:	02000713          	li	a4,32
80007324:	04e7a023          	sw	a4,64(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:462
    TaskList[taskSlot].MessagePipe[slot].header.application_id   = TaskList[taskSlot].AppID;
80007328:	8003c7b7          	lui	a5,0x8003c
8000732c:	fe442683          	lw	a3,-28(s0)
80007330:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80007334:	000017b7          	lui	a5,0x1
80007338:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
8000733c:	02f687b3          	mul	a5,a3,a5
80007340:	00f707b3          	add	a5,a4,a5
80007344:	0147a683          	lw	a3,20(a5)
80007348:	8003c7b7          	lui	a5,0x8003c
8000734c:	fdc42703          	lw	a4,-36(s0)
80007350:	fe442583          	lw	a1,-28(s0)
80007354:	76c78613          	addi	a2,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80007358:	00070793          	mv	a5,a4
8000735c:	00379793          	slli	a5,a5,0x3
80007360:	00e787b3          	add	a5,a5,a4
80007364:	00679793          	slli	a5,a5,0x6
80007368:	00001737          	lui	a4,0x1
8000736c:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80007370:	02e58733          	mul	a4,a1,a4
80007374:	00e787b3          	add	a5,a5,a4
80007378:	00f607b3          	add	a5,a2,a5
8000737c:	04d7a223          	sw	a3,68(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:463
    TaskList[taskSlot].MessagePipe[slot].header.producer_task    = TaskList[taskSlot].TaskID;
80007380:	8003c7b7          	lui	a5,0x8003c
80007384:	fe442683          	lw	a3,-28(s0)
80007388:	00001737          	lui	a4,0x1
8000738c:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80007390:	02e68733          	mul	a4,a3,a4
80007394:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80007398:	00f707b3          	add	a5,a4,a5
8000739c:	0107a683          	lw	a3,16(a5)
800073a0:	8003c7b7          	lui	a5,0x8003c
800073a4:	fdc42703          	lw	a4,-36(s0)
800073a8:	fe442583          	lw	a1,-28(s0)
800073ac:	76c78613          	addi	a2,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
800073b0:	00070793          	mv	a5,a4
800073b4:	00379793          	slli	a5,a5,0x3
800073b8:	00e787b3          	add	a5,a5,a4
800073bc:	00679793          	slli	a5,a5,0x6
800073c0:	00001737          	lui	a4,0x1
800073c4:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
800073c8:	02e58733          	mul	a4,a1,a4
800073cc:	00e787b3          	add	a5,a5,a4
800073d0:	00f607b3          	add	a5,a2,a5
800073d4:	04d7a423          	sw	a3,72(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:464
    TaskList[taskSlot].MessagePipe[slot].header.destination_task = taskID;
800073d8:	8003c7b7          	lui	a5,0x8003c
800073dc:	fdc42703          	lw	a4,-36(s0)
800073e0:	fe442603          	lw	a2,-28(s0)
800073e4:	76c78693          	addi	a3,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
800073e8:	00070793          	mv	a5,a4
800073ec:	00379793          	slli	a5,a5,0x3
800073f0:	00e787b3          	add	a5,a5,a4
800073f4:	00679793          	slli	a5,a5,0x6
800073f8:	00001737          	lui	a4,0x1
800073fc:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80007400:	02e60733          	mul	a4,a2,a4
80007404:	00e787b3          	add	a5,a5,a4
80007408:	00f687b3          	add	a5,a3,a5
8000740c:	fc842703          	lw	a4,-56(s0)
80007410:	04e7a623          	sw	a4,76(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:465
    TaskList[taskSlot].MessagePipe[slot].msg.length              = theMessage->length;
80007414:	fe042783          	lw	a5,-32(s0)
80007418:	0007a683          	lw	a3,0(a5)
8000741c:	8003c7b7          	lui	a5,0x8003c
80007420:	fdc42703          	lw	a4,-36(s0)
80007424:	fe442583          	lw	a1,-28(s0)
80007428:	76c78613          	addi	a2,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
8000742c:	00070793          	mv	a5,a4
80007430:	00379793          	slli	a5,a5,0x3
80007434:	00e787b3          	add	a5,a5,a4
80007438:	00679793          	slli	a5,a5,0x6
8000743c:	00001737          	lui	a4,0x1
80007440:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80007444:	02e58733          	mul	a4,a1,a4
80007448:	00e787b3          	add	a5,a5,a4
8000744c:	00f607b3          	add	a5,a2,a5
80007450:	06d7a623          	sw	a3,108(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:466
    for (i = 0; i < theMessage->length; i++){
80007454:	fe042623          	sw	zero,-20(s0)
80007458:	0680006f          	j	800074c0 <API_SendMessage+0x3b4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:467 (discriminator 3)
        TaskList[taskSlot].MessagePipe[slot].msg.msg[i]          = theMessage->msg[i];
8000745c:	fe042703          	lw	a4,-32(s0)
80007460:	fec42783          	lw	a5,-20(s0)
80007464:	00279793          	slli	a5,a5,0x2
80007468:	00f707b3          	add	a5,a4,a5
8000746c:	0047a683          	lw	a3,4(a5)
80007470:	8003c637          	lui	a2,0x8003c
80007474:	fdc42703          	lw	a4,-36(s0)
80007478:	fe442583          	lw	a1,-28(s0)
8000747c:	00070793          	mv	a5,a4
80007480:	00379793          	slli	a5,a5,0x3
80007484:	00e787b3          	add	a5,a5,a4
80007488:	00479793          	slli	a5,a5,0x4
8000748c:	26100713          	li	a4,609
80007490:	02e58733          	mul	a4,a1,a4
80007494:	00e78733          	add	a4,a5,a4
80007498:	fec42783          	lw	a5,-20(s0)
8000749c:	00f707b3          	add	a5,a4,a5
800074a0:	01878793          	addi	a5,a5,24
800074a4:	76c60713          	addi	a4,a2,1900 # 8003c76c <__stack_top+0xfffdc6cc>
800074a8:	00279793          	slli	a5,a5,0x2
800074ac:	00f707b3          	add	a5,a4,a5
800074b0:	00d7a823          	sw	a3,16(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:466 (discriminator 3)
    for (i = 0; i < theMessage->length; i++){
800074b4:	fec42783          	lw	a5,-20(s0)
800074b8:	00178793          	addi	a5,a5,1
800074bc:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:466 (discriminator 1)
800074c0:	fe042783          	lw	a5,-32(s0)
800074c4:	0007a783          	lw	a5,0(a5)
800074c8:	fec42703          	lw	a4,-20(s0)
800074cc:	f8f768e3          	bltu	a4,a5,8000745c <API_SendMessage+0x350>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:470
    }
    
    if (TaskList[taskSlot].PendingReq[taskID] == TRUE){
800074d0:	8003c7b7          	lui	a5,0x8003c
800074d4:	fe442683          	lw	a3,-28(s0)
800074d8:	26100713          	li	a4,609
800074dc:	02e686b3          	mul	a3,a3,a4
800074e0:	fc842703          	lw	a4,-56(s0)
800074e4:	00e68733          	add	a4,a3,a4
800074e8:	24c70713          	addi	a4,a4,588
800074ec:	00271713          	slli	a4,a4,0x2
800074f0:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
800074f4:	00f707b3          	add	a5,a4,a5
800074f8:	0007a703          	lw	a4,0(a5)
800074fc:	00100793          	li	a5,1
80007500:	04f71463          	bne	a4,a5,80007548 <API_SendMessage+0x43c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:471
        prints(">>>>>Achei aqui no pending!\n");
80007504:	800097b7          	lui	a5,0x80009
80007508:	0d478513          	addi	a0,a5,212 # 800090d4 <__stack_top+0xfffa9034>
8000750c:	82cff0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:472
        TaskList[taskSlot].PendingReq[taskID] = FALSE;
80007510:	8003c7b7          	lui	a5,0x8003c
80007514:	fe442683          	lw	a3,-28(s0)
80007518:	26100713          	li	a4,609
8000751c:	02e686b3          	mul	a3,a3,a4
80007520:	fc842703          	lw	a4,-56(s0)
80007524:	00e68733          	add	a4,a3,a4
80007528:	24c70713          	addi	a4,a4,588
8000752c:	00271713          	slli	a4,a4,0x2
80007530:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80007534:	00f707b3          	add	a5,a4,a5
80007538:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:473
        API_PushSendQueue(MESSAGE, mySlot);
8000753c:	fe842583          	lw	a1,-24(s0)
80007540:	20200537          	lui	a0,0x20200
80007544:	e3cff0ef          	jal	ra,80006b80 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:475
    }
    vTaskExitCritical();
80007548:	b2dfb0ef          	jal	ra,80003074 <vTaskExitCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:476
    return;
8000754c:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:477
}
80007550:	03c12083          	lw	ra,60(sp)
80007554:	03812403          	lw	s0,56(sp)
80007558:	04010113          	addi	sp,sp,64
8000755c:	00008067          	ret

80007560 <API_SendFinishTask>:
API_SendFinishTask():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:479

void API_SendFinishTask(unsigned int task_id, unsigned int app_id){
80007560:	fd010113          	addi	sp,sp,-48
80007564:	02112623          	sw	ra,44(sp)
80007568:	02812423          	sw	s0,40(sp)
8000756c:	03010413          	addi	s0,sp,48
80007570:	fca42e23          	sw	a0,-36(s0)
80007574:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:482
    unsigned int mySlot;
    do{
        mySlot = API_GetServiceSlot();
80007578:	8c4fe0ef          	jal	ra,8000563c <API_GetServiceSlot>
8000757c:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:483
        if(mySlot == PIPE_FULL){
80007580:	fec42703          	lw	a4,-20(s0)
80007584:	fdfe07b7          	lui	a5,0xfdfe0
80007588:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df7fd5d>
8000758c:	00f71a63          	bne	a4,a5,800075a0 <API_SendFinishTask+0x40>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:485
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            prints("Estou preso aqui3...\n");
80007590:	800097b7          	lui	a5,0x80009
80007594:	0f478513          	addi	a0,a5,244 # 800090f4 <__stack_top+0xfffa9054>
80007598:	fa1fe0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:486
            API_NI_Handler();
8000759c:	690000ef          	jal	ra,80007c2c <API_NI_Handler>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:488
        }
    }while(mySlot == PIPE_FULL);
800075a0:	fec42703          	lw	a4,-20(s0)
800075a4:	fdfe07b7          	lui	a5,0xfdfe0
800075a8:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df7fd5d>
800075ac:	fcf706e3          	beq	a4,a5,80007578 <API_SendFinishTask+0x18>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:490

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
800075b0:	8003b7b7          	lui	a5,0x8003b
800075b4:	fec42703          	lw	a4,-20(s0)
800075b8:	7fc78693          	addi	a3,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
800075bc:	00070793          	mv	a5,a4
800075c0:	00479793          	slli	a5,a5,0x4
800075c4:	40e787b3          	sub	a5,a5,a4
800075c8:	00279793          	slli	a5,a5,0x2
800075cc:	00f687b3          	add	a5,a3,a5
800075d0:	feff0737          	lui	a4,0xfeff0
800075d4:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7ef8fe5e>
800075d8:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:492

    ServicePipe[mySlot].header.header           = makeAddress(0, 0);
800075dc:	00000593          	li	a1,0
800075e0:	00000513          	li	a0,0
800075e4:	d5cff0ef          	jal	ra,80006b40 <makeAddress>
800075e8:	00050613          	mv	a2,a0
800075ec:	8003b7b7          	lui	a5,0x8003b
800075f0:	fec42703          	lw	a4,-20(s0)
800075f4:	7fc78693          	addi	a3,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
800075f8:	00070793          	mv	a5,a4
800075fc:	00479793          	slli	a5,a5,0x4
80007600:	40e787b3          	sub	a5,a5,a4
80007604:	00279793          	slli	a5,a5,0x2
80007608:	00f687b3          	add	a5,a3,a5
8000760c:	00c7a423          	sw	a2,8(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:493
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
80007610:	8003b7b7          	lui	a5,0x8003b
80007614:	fec42703          	lw	a4,-20(s0)
80007618:	7fc78693          	addi	a3,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
8000761c:	00070793          	mv	a5,a4
80007620:	00479793          	slli	a5,a5,0x4
80007624:	40e787b3          	sub	a5,a5,a4
80007628:	00279793          	slli	a5,a5,0x2
8000762c:	00f687b3          	add	a5,a3,a5
80007630:	00b00713          	li	a4,11
80007634:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:494
    ServicePipe[mySlot].header.service          = TASK_FINISH;
80007638:	8003b7b7          	lui	a5,0x8003b
8000763c:	fec42703          	lw	a4,-20(s0)
80007640:	7fc78693          	addi	a3,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
80007644:	00070793          	mv	a5,a4
80007648:	00479793          	slli	a5,a5,0x4
8000764c:	40e787b3          	sub	a5,a5,a4
80007650:	00279793          	slli	a5,a5,0x2
80007654:	00f687b3          	add	a5,a3,a5
80007658:	50000713          	li	a4,1280
8000765c:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:495
    ServicePipe[mySlot].header.task_id          = task_id;
80007660:	8003b7b7          	lui	a5,0x8003b
80007664:	fec42703          	lw	a4,-20(s0)
80007668:	7fc78693          	addi	a3,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
8000766c:	00070793          	mv	a5,a4
80007670:	00479793          	slli	a5,a5,0x4
80007674:	40e787b3          	sub	a5,a5,a4
80007678:	00279793          	slli	a5,a5,0x2
8000767c:	00f687b3          	add	a5,a3,a5
80007680:	fdc42703          	lw	a4,-36(s0)
80007684:	00e7aa23          	sw	a4,20(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:496
    ServicePipe[mySlot].header.task_app_id      = app_id;
80007688:	8003b7b7          	lui	a5,0x8003b
8000768c:	fec42703          	lw	a4,-20(s0)
80007690:	7fc78693          	addi	a3,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
80007694:	00070793          	mv	a5,a4
80007698:	00479793          	slli	a5,a5,0x4
8000769c:	40e787b3          	sub	a5,a5,a4
800076a0:	00279793          	slli	a5,a5,0x2
800076a4:	00f687b3          	add	a5,a3,a5
800076a8:	fd842703          	lw	a4,-40(s0)
800076ac:	02e7a223          	sw	a4,36(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:497
    ServicePipe[mySlot].header.task_dest_addr   = ProcessorAddr;
800076b0:	800407b7          	lui	a5,0x80040
800076b4:	0947a683          	lw	a3,148(a5) # 80040094 <__stack_top+0xfffdfff4>
800076b8:	8003b7b7          	lui	a5,0x8003b
800076bc:	fec42703          	lw	a4,-20(s0)
800076c0:	7fc78613          	addi	a2,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
800076c4:	00070793          	mv	a5,a4
800076c8:	00479793          	slli	a5,a5,0x4
800076cc:	40e787b3          	sub	a5,a5,a4
800076d0:	00279793          	slli	a5,a5,0x2
800076d4:	00f607b3          	add	a5,a2,a5
800076d8:	02d7ac23          	sw	a3,56(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:498
    API_PushSendQueue(SERVICE, mySlot);
800076dc:	fec42583          	lw	a1,-20(s0)
800076e0:	10100537          	lui	a0,0x10100
800076e4:	c9cff0ef          	jal	ra,80006b80 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:499
    return;    
800076e8:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:500
}
800076ec:	02c12083          	lw	ra,44(sp)
800076f0:	02812403          	lw	s0,40(sp)
800076f4:	03010113          	addi	sp,sp,48
800076f8:	00008067          	ret

800076fc <API_SendMessageReq>:
API_SendMessageReq():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:502

void API_SendMessageReq(unsigned int addr, unsigned int taskID){
800076fc:	fd010113          	addi	sp,sp,-48
80007700:	02112623          	sw	ra,44(sp)
80007704:	02812423          	sw	s0,40(sp)
80007708:	03010413          	addi	s0,sp,48
8000770c:	fca42e23          	sw	a0,-36(s0)
80007710:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:505
    unsigned int taskSlot;
    unsigned int mySlot;
    volatile unsigned int idle = 0;
80007714:	fe042223          	sw	zero,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:507
    // Update task info
    taskSlot = API_GetCurrentTaskSlot();
80007718:	be0fd0ef          	jal	ra,80004af8 <API_GetCurrentTaskSlot>
8000771c:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:508
    TaskList[taskSlot].waitingMsg = TRUE;
80007720:	8003c7b7          	lui	a5,0x8003c
80007724:	fec42683          	lw	a3,-20(s0)
80007728:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
8000772c:	000017b7          	lui	a5,0x1
80007730:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80007734:	02f687b3          	mul	a5,a3,a5
80007738:	00f707b3          	add	a5,a4,a5
8000773c:	00100713          	li	a4,1
80007740:	00e7ae23          	sw	a4,28(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:509
    TaskList[taskSlot].MsgToReceive = addr;
80007744:	8003c7b7          	lui	a5,0x8003c
80007748:	fec42683          	lw	a3,-20(s0)
8000774c:	00001737          	lui	a4,0x1
80007750:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80007754:	02e68733          	mul	a4,a3,a4
80007758:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
8000775c:	00f707b3          	add	a5,a4,a5
80007760:	fdc42703          	lw	a4,-36(s0)
80007764:	02e7a023          	sw	a4,32(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:518

    //printsv("API_SendMessageReq addr: ", addr);

    // Sends the message request
    do{
        mySlot = API_GetServiceSlot();
80007768:	ed5fd0ef          	jal	ra,8000563c <API_GetServiceSlot>
8000776c:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:519
        if(mySlot == PIPE_FULL){
80007770:	fe842703          	lw	a4,-24(s0)
80007774:	fdfe07b7          	lui	a5,0xfdfe0
80007778:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df7fd5d>
8000777c:	00f71a63          	bne	a4,a5,80007790 <API_SendMessageReq+0x94>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:521
            // Runs the NI Handler to send/receive packets, opening space in the PIPE
            prints("Estou preso aqui4...\n");
80007780:	800097b7          	lui	a5,0x80009
80007784:	10c78513          	addi	a0,a5,268 # 8000910c <__stack_top+0xfffa906c>
80007788:	db1fe0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:522
            API_NI_Handler();
8000778c:	4a0000ef          	jal	ra,80007c2c <API_NI_Handler>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:524
        }
    }while(mySlot == PIPE_FULL);
80007790:	fe842703          	lw	a4,-24(s0)
80007794:	fdfe07b7          	lui	a5,0xfdfe0
80007798:	dfd78793          	addi	a5,a5,-515 # fdfdfdfd <__stack_top+0x7df7fd5d>
8000779c:	fcf706e3          	beq	a4,a5,80007768 <API_SendMessageReq+0x6c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:526

    ServicePipe[mySlot].holder = PIPE_SYS_HOLDER;
800077a0:	8003b7b7          	lui	a5,0x8003b
800077a4:	fe842703          	lw	a4,-24(s0)
800077a8:	7fc78693          	addi	a3,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
800077ac:	00070793          	mv	a5,a4
800077b0:	00479793          	slli	a5,a5,0x4
800077b4:	40e787b3          	sub	a5,a5,a4
800077b8:	00279793          	slli	a5,a5,0x2
800077bc:	00f687b3          	add	a5,a3,a5
800077c0:	feff0737          	lui	a4,0xfeff0
800077c4:	efe70713          	addi	a4,a4,-258 # fefefefe <__stack_top+0x7ef8fe5e>
800077c8:	00e7a223          	sw	a4,4(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:528

    ServicePipe[mySlot].header.header           = TaskList[taskSlot].TasksMap[taskID];
800077cc:	8003c737          	lui	a4,0x8003c
800077d0:	fec42683          	lw	a3,-20(s0)
800077d4:	26100793          	li	a5,609
800077d8:	02f686b3          	mul	a3,a3,a5
800077dc:	fd842783          	lw	a5,-40(s0)
800077e0:	00f687b3          	add	a5,a3,a5
800077e4:	25478793          	addi	a5,a5,596
800077e8:	76c70713          	addi	a4,a4,1900 # 8003c76c <__stack_top+0xfffdc6cc>
800077ec:	00279793          	slli	a5,a5,0x2
800077f0:	00f707b3          	add	a5,a4,a5
800077f4:	00c7a683          	lw	a3,12(a5)
800077f8:	8003b7b7          	lui	a5,0x8003b
800077fc:	fe842703          	lw	a4,-24(s0)
80007800:	7fc78613          	addi	a2,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
80007804:	00070793          	mv	a5,a4
80007808:	00479793          	slli	a5,a5,0x4
8000780c:	40e787b3          	sub	a5,a5,a4
80007810:	00279793          	slli	a5,a5,0x2
80007814:	00f607b3          	add	a5,a2,a5
80007818:	00d7a423          	sw	a3,8(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:529
    ServicePipe[mySlot].header.payload_size     = PKT_SERVICE_SIZE;
8000781c:	8003b7b7          	lui	a5,0x8003b
80007820:	fe842703          	lw	a4,-24(s0)
80007824:	7fc78693          	addi	a3,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
80007828:	00070793          	mv	a5,a4
8000782c:	00479793          	slli	a5,a5,0x4
80007830:	40e787b3          	sub	a5,a5,a4
80007834:	00279793          	slli	a5,a5,0x2
80007838:	00f687b3          	add	a5,a3,a5
8000783c:	00b00713          	li	a4,11
80007840:	00e7a623          	sw	a4,12(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:530
    ServicePipe[mySlot].header.service          = MESSAGE_REQUEST;
80007844:	8003b7b7          	lui	a5,0x8003b
80007848:	fe842703          	lw	a4,-24(s0)
8000784c:	7fc78693          	addi	a3,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
80007850:	00070793          	mv	a5,a4
80007854:	00479793          	slli	a5,a5,0x4
80007858:	40e787b3          	sub	a5,a5,a4
8000785c:	00279793          	slli	a5,a5,0x2
80007860:	00f687b3          	add	a5,a3,a5
80007864:	01000713          	li	a4,16
80007868:	00e7a823          	sw	a4,16(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:531
    ServicePipe[mySlot].header.task_id          = TaskList[taskSlot].TaskID;
8000786c:	8003c7b7          	lui	a5,0x8003c
80007870:	fec42683          	lw	a3,-20(s0)
80007874:	00001737          	lui	a4,0x1
80007878:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
8000787c:	02e68733          	mul	a4,a3,a4
80007880:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80007884:	00f707b3          	add	a5,a4,a5
80007888:	0107a683          	lw	a3,16(a5)
8000788c:	8003b7b7          	lui	a5,0x8003b
80007890:	fe842703          	lw	a4,-24(s0)
80007894:	7fc78613          	addi	a2,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
80007898:	00070793          	mv	a5,a4
8000789c:	00479793          	slli	a5,a5,0x4
800078a0:	40e787b3          	sub	a5,a5,a4
800078a4:	00279793          	slli	a5,a5,0x2
800078a8:	00f607b3          	add	a5,a2,a5
800078ac:	00d7aa23          	sw	a3,20(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:532
    ServicePipe[mySlot].header.task_app_id      = TaskList[taskSlot].AppID;
800078b0:	8003c7b7          	lui	a5,0x8003c
800078b4:	fec42683          	lw	a3,-20(s0)
800078b8:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
800078bc:	000017b7          	lui	a5,0x1
800078c0:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
800078c4:	02f687b3          	mul	a5,a3,a5
800078c8:	00f707b3          	add	a5,a4,a5
800078cc:	0147a683          	lw	a3,20(a5)
800078d0:	8003b7b7          	lui	a5,0x8003b
800078d4:	fe842703          	lw	a4,-24(s0)
800078d8:	7fc78613          	addi	a2,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
800078dc:	00070793          	mv	a5,a4
800078e0:	00479793          	slli	a5,a5,0x4
800078e4:	40e787b3          	sub	a5,a5,a4
800078e8:	00279793          	slli	a5,a5,0x2
800078ec:	00f607b3          	add	a5,a2,a5
800078f0:	02d7a223          	sw	a3,36(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:533
    ServicePipe[mySlot].header.producer_task_id = taskID;
800078f4:	8003b7b7          	lui	a5,0x8003b
800078f8:	fe842703          	lw	a4,-24(s0)
800078fc:	7fc78693          	addi	a3,a5,2044 # 8003b7fc <__stack_top+0xfffdb75c>
80007900:	00070793          	mv	a5,a4
80007904:	00479793          	slli	a5,a5,0x4
80007908:	40e787b3          	sub	a5,a5,a4
8000790c:	00279793          	slli	a5,a5,0x2
80007910:	00f687b3          	add	a5,a3,a5
80007914:	fd842703          	lw	a4,-40(s0)
80007918:	00e7ae23          	sw	a4,28(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:535

    prints("Esperando Mensagem!\n");
8000791c:	800097b7          	lui	a5,0x80009
80007920:	12478513          	addi	a0,a5,292 # 80009124 <__stack_top+0xfffa9084>
80007924:	c15fe0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:537

    API_PushSendQueue(SERVICE, mySlot);
80007928:	fe842583          	lw	a1,-24(s0)
8000792c:	10100537          	lui	a0,0x10100
80007930:	a50ff0ef          	jal	ra,80006b80 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:539
    
    API_setFreqScale(100);
80007934:	06400513          	li	a0,100
80007938:	91cfe0ef          	jal	ra,80005a54 <API_setFreqScale>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:541
    // Bloquear a tarefa!
    while(TaskList[taskSlot].waitingMsg == TRUE){ 
8000793c:	00c0006f          	j	80007948 <API_SendMessageReq+0x24c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:542
        vTaskDelay(1);
80007940:	00100513          	li	a0,1
80007944:	8e1fa0ef          	jal	ra,80002224 <vTaskDelay>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:541
    while(TaskList[taskSlot].waitingMsg == TRUE){ 
80007948:	8003c7b7          	lui	a5,0x8003c
8000794c:	fec42683          	lw	a3,-20(s0)
80007950:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80007954:	000017b7          	lui	a5,0x1
80007958:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
8000795c:	02f687b3          	mul	a5,a3,a5
80007960:	00f707b3          	add	a5,a4,a5
80007964:	01c7a703          	lw	a4,28(a5)
80007968:	00100793          	li	a5,1
8000796c:	fcf70ae3          	beq	a4,a5,80007940 <API_SendMessageReq+0x244>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:552
    //     // Blocks the task until the NI interrupts it
    //     ulNotifiedValue = ulTaskNotifyTake( pdFALSE, xBlockTime );
    // }


    API_setFreqScale(1000);
80007970:	3e800513          	li	a0,1000
80007974:	8e0fe0ef          	jal	ra,80005a54 <API_setFreqScale>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:554

    prints("Mensagem Recebida!\n");
80007978:	800097b7          	lui	a5,0x80009
8000797c:	13c78513          	addi	a0,a5,316 # 8000913c <__stack_top+0xfffa909c>
80007980:	bb9fe0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:555
    return;
80007984:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:556
}
80007988:	02c12083          	lw	ra,44(sp)
8000798c:	02812403          	lw	s0,40(sp)
80007990:	03010113          	addi	sp,sp,48
80007994:	00008067          	ret

80007998 <API_CheckMessagePipe>:
API_CheckMessagePipe():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:558

unsigned int API_CheckMessagePipe(unsigned int requester_task_id, unsigned int task_app_id){
80007998:	fd010113          	addi	sp,sp,-48
8000799c:	02812623          	sw	s0,44(sp)
800079a0:	03010413          	addi	s0,sp,48
800079a4:	fca42e23          	sw	a0,-36(s0)
800079a8:	fcb42c23          	sw	a1,-40(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:560
    unsigned int i,j;
    unsigned int sel = ERRO;
800079ac:	fff00793          	li	a5,-1
800079b0:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:561
    unsigned int smallID = 268435455;
800079b4:	100007b7          	lui	a5,0x10000
800079b8:	fff78793          	addi	a5,a5,-1 # fffffff <RAM_SIZE+0xff7ffff>
800079bc:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:563
    //vTaskEnterCritical();
    for(i = 0; i < NUM_MAX_TASKS; i++){
800079c0:	fe042623          	sw	zero,-20(s0)
800079c4:	18c0006f          	j	80007b50 <API_CheckMessagePipe+0x1b8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:564
        if(TaskList[i].status != TASK_SLOT_EMPTY && TaskList[i].AppID == task_app_id){
800079c8:	8003c7b7          	lui	a5,0x8003c
800079cc:	fec42683          	lw	a3,-20(s0)
800079d0:	00001737          	lui	a4,0x1
800079d4:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
800079d8:	02e68733          	mul	a4,a3,a4
800079dc:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
800079e0:	00f707b3          	add	a5,a4,a5
800079e4:	0007a783          	lw	a5,0(a5)
800079e8:	14078e63          	beqz	a5,80007b44 <API_CheckMessagePipe+0x1ac>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:564 (discriminator 1)
800079ec:	8003c7b7          	lui	a5,0x8003c
800079f0:	fec42683          	lw	a3,-20(s0)
800079f4:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
800079f8:	000017b7          	lui	a5,0x1
800079fc:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80007a00:	02f687b3          	mul	a5,a3,a5
80007a04:	00f707b3          	add	a5,a4,a5
80007a08:	0147a783          	lw	a5,20(a5)
80007a0c:	fd842703          	lw	a4,-40(s0)
80007a10:	12f71a63          	bne	a4,a5,80007b44 <API_CheckMessagePipe+0x1ac>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:565
            for(j = 0; j < PIPE_SIZE; j++){
80007a14:	fe042423          	sw	zero,-24(s0)
80007a18:	1200006f          	j	80007b38 <API_CheckMessagePipe+0x1a0>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:566
                if(TaskList[i].MessagePipe[j].status == PIPE_OCCUPIED){
80007a1c:	8003c6b7          	lui	a3,0x8003c
80007a20:	fe842703          	lw	a4,-24(s0)
80007a24:	fec42603          	lw	a2,-20(s0)
80007a28:	00070793          	mv	a5,a4
80007a2c:	00379793          	slli	a5,a5,0x3
80007a30:	00e787b3          	add	a5,a5,a4
80007a34:	00679793          	slli	a5,a5,0x6
80007a38:	00001737          	lui	a4,0x1
80007a3c:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80007a40:	02e60733          	mul	a4,a2,a4
80007a44:	00e78733          	add	a4,a5,a4
80007a48:	76c68793          	addi	a5,a3,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80007a4c:	00f707b3          	add	a5,a4,a5
80007a50:	0307a703          	lw	a4,48(a5)
80007a54:	00100793          	li	a5,1
80007a58:	0cf71a63          	bne	a4,a5,80007b2c <API_CheckMessagePipe+0x194>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:567
                    if(TaskList[i].MessagePipe[j].header.destination_task == requester_task_id){
80007a5c:	8003c7b7          	lui	a5,0x8003c
80007a60:	fe842703          	lw	a4,-24(s0)
80007a64:	fec42603          	lw	a2,-20(s0)
80007a68:	76c78693          	addi	a3,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80007a6c:	00070793          	mv	a5,a4
80007a70:	00379793          	slli	a5,a5,0x3
80007a74:	00e787b3          	add	a5,a5,a4
80007a78:	00679793          	slli	a5,a5,0x6
80007a7c:	00001737          	lui	a4,0x1
80007a80:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80007a84:	02e60733          	mul	a4,a2,a4
80007a88:	00e787b3          	add	a5,a5,a4
80007a8c:	00f687b3          	add	a5,a3,a5
80007a90:	04c7a783          	lw	a5,76(a5)
80007a94:	fdc42703          	lw	a4,-36(s0)
80007a98:	08f71a63          	bne	a4,a5,80007b2c <API_CheckMessagePipe+0x194>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:568
                        if(TaskList[i].MessagePipe[j].msgID < smallID){
80007a9c:	8003c7b7          	lui	a5,0x8003c
80007aa0:	fe842703          	lw	a4,-24(s0)
80007aa4:	fec42603          	lw	a2,-20(s0)
80007aa8:	76c78693          	addi	a3,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80007aac:	00070793          	mv	a5,a4
80007ab0:	00379793          	slli	a5,a5,0x3
80007ab4:	00e787b3          	add	a5,a5,a4
80007ab8:	00679793          	slli	a5,a5,0x6
80007abc:	00001737          	lui	a4,0x1
80007ac0:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80007ac4:	02e60733          	mul	a4,a2,a4
80007ac8:	00e787b3          	add	a5,a5,a4
80007acc:	00f687b3          	add	a5,a3,a5
80007ad0:	0347a783          	lw	a5,52(a5)
80007ad4:	fe042703          	lw	a4,-32(s0)
80007ad8:	04e7fa63          	bleu	a4,a5,80007b2c <API_CheckMessagePipe+0x194>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:569
                            smallID = TaskList[i].MessagePipe[j].msgID;
80007adc:	8003c7b7          	lui	a5,0x8003c
80007ae0:	fe842703          	lw	a4,-24(s0)
80007ae4:	fec42603          	lw	a2,-20(s0)
80007ae8:	76c78693          	addi	a3,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80007aec:	00070793          	mv	a5,a4
80007af0:	00379793          	slli	a5,a5,0x3
80007af4:	00e787b3          	add	a5,a5,a4
80007af8:	00679793          	slli	a5,a5,0x6
80007afc:	00001737          	lui	a4,0x1
80007b00:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80007b04:	02e60733          	mul	a4,a2,a4
80007b08:	00e787b3          	add	a5,a5,a4
80007b0c:	00f687b3          	add	a5,a3,a5
80007b10:	0347a783          	lw	a5,52(a5)
80007b14:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:570
                            sel = (i << 8) | j;
80007b18:	fec42783          	lw	a5,-20(s0)
80007b1c:	00879793          	slli	a5,a5,0x8
80007b20:	fe842703          	lw	a4,-24(s0)
80007b24:	00f767b3          	or	a5,a4,a5
80007b28:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:565 (discriminator 2)
            for(j = 0; j < PIPE_SIZE; j++){
80007b2c:	fe842783          	lw	a5,-24(s0)
80007b30:	00178793          	addi	a5,a5,1
80007b34:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:565 (discriminator 1)
80007b38:	fe842703          	lw	a4,-24(s0)
80007b3c:	00300793          	li	a5,3
80007b40:	ece7fee3          	bleu	a4,a5,80007a1c <API_CheckMessagePipe+0x84>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:563 (discriminator 2)
    for(i = 0; i < NUM_MAX_TASKS; i++){
80007b44:	fec42783          	lw	a5,-20(s0)
80007b48:	00178793          	addi	a5,a5,1
80007b4c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:563 (discriminator 1)
80007b50:	fec42703          	lw	a4,-20(s0)
80007b54:	00500793          	li	a5,5
80007b58:	e6e7f8e3          	bleu	a4,a5,800079c8 <API_CheckMessagePipe+0x30>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:577
                    }
                }
            }
        }
    }
    if(sel != ERRO){
80007b5c:	fe442703          	lw	a4,-28(s0)
80007b60:	fff00793          	li	a5,-1
80007b64:	04f70263          	beq	a4,a5,80007ba8 <API_CheckMessagePipe+0x210>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:578
        TaskList[sel >> 8].MessagePipe[sel & 0x000000FF].status == PIPE_TRANSMITTING;
80007b68:	fe442783          	lw	a5,-28(s0)
80007b6c:	0087d613          	srli	a2,a5,0x8
80007b70:	fe442783          	lw	a5,-28(s0)
80007b74:	0ff7f713          	andi	a4,a5,255
80007b78:	8003c6b7          	lui	a3,0x8003c
80007b7c:	00070793          	mv	a5,a4
80007b80:	00379793          	slli	a5,a5,0x3
80007b84:	00e787b3          	add	a5,a5,a4
80007b88:	00679793          	slli	a5,a5,0x6
80007b8c:	00001737          	lui	a4,0x1
80007b90:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
80007b94:	02e60733          	mul	a4,a2,a4
80007b98:	00e78733          	add	a4,a5,a4
80007b9c:	76c68793          	addi	a5,a3,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80007ba0:	00f707b3          	add	a5,a4,a5
80007ba4:	0307a783          	lw	a5,48(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:581
    }
    //vTaskExitCritical();
    return sel;
80007ba8:	fe442783          	lw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:582
}
80007bac:	00078513          	mv	a0,a5
80007bb0:	02c12403          	lw	s0,44(sp)
80007bb4:	03010113          	addi	sp,sp,48
80007bb8:	00008067          	ret

80007bbc <API_AddPendingReq>:
API_AddPendingReq():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:584

void API_AddPendingReq(unsigned int requester_task_id, unsigned int task_app_id, unsigned int producer_task_id){
80007bbc:	fd010113          	addi	sp,sp,-48
80007bc0:	02112623          	sw	ra,44(sp)
80007bc4:	02812423          	sw	s0,40(sp)
80007bc8:	03010413          	addi	s0,sp,48
80007bcc:	fca42e23          	sw	a0,-36(s0)
80007bd0:	fcb42c23          	sw	a1,-40(s0)
80007bd4:	fcc42a23          	sw	a2,-44(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:585
    unsigned int slot = API_GetTaskSlot(producer_task_id, task_app_id);
80007bd8:	fd842583          	lw	a1,-40(s0)
80007bdc:	fd442503          	lw	a0,-44(s0)
80007be0:	af0fd0ef          	jal	ra,80004ed0 <API_GetTaskSlot>
80007be4:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:586
    TaskList[slot].PendingReq[requester_task_id] = TRUE;
80007be8:	8003c7b7          	lui	a5,0x8003c
80007bec:	fec42683          	lw	a3,-20(s0)
80007bf0:	26100713          	li	a4,609
80007bf4:	02e686b3          	mul	a3,a3,a4
80007bf8:	fdc42703          	lw	a4,-36(s0)
80007bfc:	00e68733          	add	a4,a3,a4
80007c00:	24c70713          	addi	a4,a4,588
80007c04:	00271713          	slli	a4,a4,0x2
80007c08:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80007c0c:	00f707b3          	add	a5,a4,a5
80007c10:	00100713          	li	a4,1
80007c14:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:587
    return;
80007c18:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:588
}
80007c1c:	02c12083          	lw	ra,44(sp)
80007c20:	02812403          	lw	s0,40(sp)
80007c24:	03010113          	addi	sp,sp,48
80007c28:	00008067          	ret

80007c2c <API_NI_Handler>:
API_NI_Handler():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:591


void API_NI_Handler(){
80007c2c:	ff010113          	addi	sp,sp,-16
80007c30:	00812623          	sw	s0,12(sp)
80007c34:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:592
    return;
80007c38:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../FreeRTOS/chronos.c:593
80007c3c:	00c12403          	lw	s0,12(sp)
80007c40:	01010113          	addi	sp,sp,16
80007c44:	00008067          	ret

80007c48 <PLIC_init>:
PLIC_init():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:124
{
80007c48:	fe010113          	addi	sp,sp,-32
80007c4c:	00812e23          	sw	s0,28(sp)
80007c50:	02010413          	addi	s0,sp,32
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:126
    unsigned long hart_id = read_csr(mhartid);
80007c54:	f14027f3          	csrr	a5,mhartid
80007c58:	fef42423          	sw	a5,-24(s0)
80007c5c:	fe842783          	lw	a5,-24(s0)
80007c60:	fef42223          	sw	a5,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
80007c64:	fe042623          	sw	zero,-20(s0)
80007c68:	03c0006f          	j	80007ca4 <PLIC_init+0x5c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:131 (discriminator 3)
        PLIC->TARGET_ENABLES[hart_id].ENABLES[inc] = 0;
80007c6c:	40000737          	lui	a4,0x40000
80007c70:	fe442783          	lw	a5,-28(s0)
80007c74:	00579693          	slli	a3,a5,0x5
80007c78:	fec42783          	lw	a5,-20(s0)
80007c7c:	00f686b3          	add	a3,a3,a5
80007c80:	000017b7          	lui	a5,0x1
80007c84:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80007c88:	00f687b3          	add	a5,a3,a5
80007c8c:	00279793          	slli	a5,a5,0x2
80007c90:	00f707b3          	add	a5,a4,a5
80007c94:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 3)
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
80007c98:	fec42783          	lw	a5,-20(s0)
80007c9c:	00178793          	addi	a5,a5,1
80007ca0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 1)
80007ca4:	fec42783          	lw	a5,-20(s0)
80007ca8:	fc0782e3          	beqz	a5,80007c6c <PLIC_init+0x24>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
80007cac:	fe042623          	sw	zero,-20(s0)
80007cb0:	0240006f          	j	80007cd4 <PLIC_init+0x8c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:139 (discriminator 3)
        PLIC->SOURCE_PRIORITY[inc] = 0;
80007cb4:	40000737          	lui	a4,0x40000
80007cb8:	fec42783          	lw	a5,-20(s0)
80007cbc:	00279793          	slli	a5,a5,0x2
80007cc0:	00f707b3          	add	a5,a4,a5
80007cc4:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 3)
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
80007cc8:	fec42783          	lw	a5,-20(s0)
80007ccc:	00178793          	addi	a5,a5,1
80007cd0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 1)
80007cd4:	fec42703          	lw	a4,-20(s0)
80007cd8:	01e00793          	li	a5,30
80007cdc:	fce7fce3          	bleu	a4,a5,80007cb4 <PLIC_init+0x6c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:143
    PLIC->TARGET[hart_id].PRIORITY_THRESHOLD = 0;
80007ce0:	40000737          	lui	a4,0x40000
80007ce4:	fe442783          	lw	a5,-28(s0)
80007ce8:	20078793          	addi	a5,a5,512
80007cec:	00c79793          	slli	a5,a5,0xc
80007cf0:	00f707b3          	add	a5,a4,a5
80007cf4:	0007a023          	sw	zero,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:146
    set_csr(mie, MIP_MEIP);
80007cf8:	000017b7          	lui	a5,0x1
80007cfc:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80007d00:	3047a7f3          	csrrs	a5,mie,a5
80007d04:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:147
}
80007d08:	00000013          	nop
80007d0c:	01c12403          	lw	s0,28(sp)
80007d10:	02010113          	addi	sp,sp,32
80007d14:	00008067          	ret

80007d18 <main>:
main():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:60
extern volatile unsigned int NI_IRCount;

/*-----------------------------------------------------------*/

int main( void )
{
80007d18:	fd010113          	addi	sp,sp,-48
80007d1c:	02112623          	sw	ra,44(sp)
80007d20:	02812423          	sw	s0,40(sp)
80007d24:	03010413          	addi	s0,sp,48
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:62
	char str[20];
    PLIC_init();
80007d28:	f21ff0ef          	jal	ra,80007c48 <PLIC_init>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:68

    /**************************************************************************
    * Initialize CoreUART with its base address, baud value, and line
    * configuration.
    *************************************************************************/
    UART_init(&g_uart, COREUARTAPB0_BASE_ADDR, BAUD_VALUE_115200,
80007d2c:	00100693          	li	a3,1
80007d30:	02c00613          	li	a2,44
80007d34:	700015b7          	lui	a1,0x70001
80007d38:	800407b7          	lui	a5,0x80040
80007d3c:	08c78513          	addi	a0,a5,140 # 8004008c <__stack_top+0xfffdffec>
80007d40:	aecf90ef          	jal	ra,8000102c <UART_init>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:74
             (DATA_8_BITS | NO_PARITY) );
    
	/**************************************************************************
    * Initialize the Chronos platform stuff
    *************************************************************************/
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n Chronos platform initializing... \n" );
80007d44:	800097b7          	lui	a5,0x80009
80007d48:	16878593          	addi	a1,a5,360 # 80009168 <__stack_top+0xfffa90c8>
80007d4c:	800407b7          	lui	a5,0x80040
80007d50:	08c78513          	addi	a0,a5,140 # 8004008c <__stack_top+0xfffdffec>
80007d54:	ca4f90ef          	jal	ra,800011f8 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:75
	Chronos_init();
80007d58:	eecfe0ef          	jal	ra,80006444 <Chronos_init>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:76
	UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This terminal belongs to the address: " );
80007d5c:	800097b7          	lui	a5,0x80009
80007d60:	19078593          	addi	a1,a5,400 # 80009190 <__stack_top+0xfffa90f0>
80007d64:	800407b7          	lui	a5,0x80040
80007d68:	08c78513          	addi	a0,a5,140 # 8004008c <__stack_top+0xfffdffec>
80007d6c:	c8cf90ef          	jal	ra,800011f8 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:77
	myItoa(ProcessorAddr, str, 16);
80007d70:	800407b7          	lui	a5,0x80040
80007d74:	0947a783          	lw	a5,148(a5) # 80040094 <__stack_top+0xfffdfff4>
80007d78:	00078713          	mv	a4,a5
80007d7c:	fdc40793          	addi	a5,s0,-36
80007d80:	01000613          	li	a2,16
80007d84:	00078593          	mv	a1,a5
80007d88:	00070513          	mv	a0,a4
80007d8c:	c15fe0ef          	jal	ra,800069a0 <myItoa>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:78
    UART_polled_tx_string( &g_uart, (const uint8_t *)str); UART_polled_tx_string( &g_uart, (const uint8_t *)"\n");
80007d90:	fdc40793          	addi	a5,s0,-36
80007d94:	00078593          	mv	a1,a5
80007d98:	800407b7          	lui	a5,0x80040
80007d9c:	08c78513          	addi	a0,a5,140 # 8004008c <__stack_top+0xfffdffec>
80007da0:	c58f90ef          	jal	ra,800011f8 <UART_polled_tx_string>
80007da4:	800097b7          	lui	a5,0x80009
80007da8:	1bc78593          	addi	a1,a5,444 # 800091bc <__stack_top+0xfffa911c>
80007dac:	800407b7          	lui	a5,0x80040
80007db0:	08c78513          	addi	a0,a5,140 # 8004008c <__stack_top+0xfffdffec>
80007db4:	c44f90ef          	jal	ra,800011f8 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:81
	
	/* Create the NI Handler task */
	xTaskCreate( vNI_RX_HandlerTask, "RX_TASK", 1024, NULL, (tskIDLE_PRIORITY + 2), &NI_RX_Handler );
80007db8:	00000893          	li	a7,0
80007dbc:	00000813          	li	a6,0
80007dc0:	8003c7b7          	lui	a5,0x8003c
80007dc4:	8ec78793          	addi	a5,a5,-1812 # 8003b8ec <__stack_top+0xfffdb84c>
80007dc8:	00200713          	li	a4,2
80007dcc:	00000693          	li	a3,0
80007dd0:	40000613          	li	a2,1024
80007dd4:	800095b7          	lui	a1,0x80009
80007dd8:	1c058593          	addi	a1,a1,448 # 800091c0 <__stack_top+0xfffa9120>
80007ddc:	80008537          	lui	a0,0x80008
80007de0:	efc50513          	addi	a0,a0,-260 # 80007efc <__stack_top+0xfffa7e5c>
80007de4:	948fa0ef          	jal	ra,80001f2c <xTaskGenericCreate>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:82
	xTaskCreate( vNI_TX_HandlerTask, "TX_TASK", 1024, NULL, (tskIDLE_PRIORITY + 3), &NI_TX_Handler );
80007de8:	00000893          	li	a7,0
80007dec:	00000813          	li	a6,0
80007df0:	8003c7b7          	lui	a5,0x8003c
80007df4:	de078793          	addi	a5,a5,-544 # 8003bde0 <__stack_top+0xfffdbd40>
80007df8:	00300713          	li	a4,3
80007dfc:	00000693          	li	a3,0
80007e00:	40000613          	li	a2,1024
80007e04:	800095b7          	lui	a1,0x80009
80007e08:	1c858593          	addi	a1,a1,456 # 800091c8 <__stack_top+0xfffa9128>
80007e0c:	80008537          	lui	a0,0x80008
80007e10:	72c50513          	addi	a0,a0,1836 # 8000872c <__stack_top+0xfffa868c>
80007e14:	918fa0ef          	jal	ra,80001f2c <xTaskGenericCreate>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:83
	xTaskCreate( vNI_TMR_HandlerTask, "TMR_TASK", 1024, NULL, (tskIDLE_PRIORITY + 4), &NI_TMR_Handler );
80007e18:	00000893          	li	a7,0
80007e1c:	00000813          	li	a6,0
80007e20:	8003c7b7          	lui	a5,0x8003c
80007e24:	de878793          	addi	a5,a5,-536 # 8003bde8 <__stack_top+0xfffdbd48>
80007e28:	00400713          	li	a4,4
80007e2c:	00000693          	li	a3,0
80007e30:	40000613          	li	a2,1024
80007e34:	800095b7          	lui	a1,0x80009
80007e38:	1d058593          	addi	a1,a1,464 # 800091d0 <__stack_top+0xfffa9130>
80007e3c:	80008537          	lui	a0,0x80008
80007e40:	79c50513          	addi	a0,a0,1948 # 8000879c <__stack_top+0xfffa86fc>
80007e44:	8e8fa0ef          	jal	ra,80001f2c <xTaskGenericCreate>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:85

	if (ProcessorAddr == 0x0000){
80007e48:	800407b7          	lui	a5,0x80040
80007e4c:	0947a783          	lw	a5,148(a5) # 80040094 <__stack_top+0xfffdfff4>
80007e50:	04079663          	bnez	a5,80007e9c <main+0x184>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:86
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is the Global Master: \n" );
80007e54:	800097b7          	lui	a5,0x80009
80007e58:	1dc78593          	addi	a1,a5,476 # 800091dc <__stack_top+0xfffa913c>
80007e5c:	800407b7          	lui	a5,0x80040
80007e60:	08c78513          	addi	a0,a5,140 # 8004008c <__stack_top+0xfffdffec>
80007e64:	b94f90ef          	jal	ra,800011f8 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:88
		/* Create the GlobalManager task */
		xTaskCreate( GlobalManagerTask, "GlobalMaster", 1024*6, NULL, (tskIDLE_PRIORITY + 1), NULL );
80007e68:	00000893          	li	a7,0
80007e6c:	00000813          	li	a6,0
80007e70:	00000793          	li	a5,0
80007e74:	00100713          	li	a4,1
80007e78:	00000693          	li	a3,0
80007e7c:	00002637          	lui	a2,0x2
80007e80:	80060613          	addi	a2,a2,-2048 # 1800 <HEAP_SIZE-0xe800>
80007e84:	800095b7          	lui	a1,0x80009
80007e88:	20858593          	addi	a1,a1,520 # 80009208 <__stack_top+0xfffa9168>
80007e8c:	80008537          	lui	a0,0x80008
80007e90:	7f050513          	addi	a0,a0,2032 # 800087f0 <__stack_top+0xfffa8750>
80007e94:	898fa0ef          	jal	ra,80001f2c <xTaskGenericCreate>
80007e98:	0180006f          	j	80007eb0 <main+0x198>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:90
	} else {
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n This processor is a Slave: \n" );
80007e9c:	800097b7          	lui	a5,0x80009
80007ea0:	21878593          	addi	a1,a5,536 # 80009218 <__stack_top+0xfffa9178>
80007ea4:	800407b7          	lui	a5,0x80040
80007ea8:	08c78513          	addi	a0,a5,140 # 8004008c <__stack_top+0xfffdffec>
80007eac:	b4cf90ef          	jal	ra,800011f8 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:95
	}
	//xTaskCreate( NI_Handler, "Handler", 1024*6, NULL, (tskIDLE_PRIORITY + 2), NULL );

	/* Start the kernel.  From here on, only tasks and interrupts will run. */
	vTaskStartScheduler();
80007eb0:	f84fa0ef          	jal	ra,80002634 <vTaskStartScheduler>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:98

	/* Exit FreeRTOS */
	return 0;
80007eb4:	00000793          	li	a5,0
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:99
}
80007eb8:	00078513          	mv	a0,a5
80007ebc:	02c12083          	lw	ra,44(sp)
80007ec0:	02812403          	lw	s0,40(sp)
80007ec4:	03010113          	addi	sp,sp,48
80007ec8:	00008067          	ret

80007ecc <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:104

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
80007ecc:	ff010113          	addi	sp,sp,-16
80007ed0:	00812623          	sw	s0,12(sp)
80007ed4:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:115
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
80007ed8:	30047073          	csrci	mstatus,8
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:116 (discriminator 1)
	for( ;; );
80007edc:	0000006f          	j	80007edc <vApplicationMallocFailedHook+0x10>

80007ee0 <vApplicationIdleHook>:
vApplicationIdleHook():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:121
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
80007ee0:	ff010113          	addi	sp,sp,-16
80007ee4:	00812623          	sw	s0,12(sp)
80007ee8:	01010413          	addi	s0,sp,16
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:131
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
80007eec:	00000013          	nop
80007ef0:	00c12403          	lw	s0,12(sp)
80007ef4:	01010113          	addi	sp,sp,16
80007ef8:	00008067          	ret

80007efc <vNI_RX_HandlerTask>:
vNI_RX_HandlerTask():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:150
/*-----------------------------------------------------------*/


/* A task that blocks waiting to be notified that the peripheral
needs servicing. */
void vNI_RX_HandlerTask( void *pvParameters ){
80007efc:	fd010113          	addi	sp,sp,-48
80007f00:	02112623          	sw	ra,44(sp)
80007f04:	02812423          	sw	s0,40(sp)
80007f08:	03010413          	addi	s0,sp,48
80007f0c:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:153
	BaseType_t xEvent;
	unsigned int aux, service;
	const TickType_t xBlockTime = 10000;
80007f10:	000027b7          	lui	a5,0x2
80007f14:	71078793          	addi	a5,a5,1808 # 2710 <HEAP_SIZE-0xd8f0>
80007f18:	fef42423          	sw	a5,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:159
	uint32_t ulNotifiedValue;
    //BaseType_t xHigherPriorityTaskWoken;

    for( ;; ){
		/* Blocks the task until the NI interrupts it */
        ulNotifiedValue = ulTaskNotifyTake( pdFALSE,
80007f1c:	fe842583          	lw	a1,-24(s0)
80007f20:	00000513          	li	a0,0
80007f24:	9a0fb0ef          	jal	ra,800030c4 <ulTaskNotifyTake>
80007f28:	fea42223          	sw	a0,-28(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:171
        // else{
        //     /* Did not receive a notification within the expected time. */
		// 	UART_polled_tx_string( &g_uart, (const uint8_t *)" Time out NI RX...\r\n" );
        // }

		vTaskEnterCritical();
80007f2c:	90cfb0ef          	jal	ra,80003038 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:172
        if( HW_get_32bit_reg(NI_RX) == NI_STATUS_INTER || HW_get_32bit_reg(NI_RX) == NI_STATUS_WAITING) {
80007f30:	500007b7          	lui	a5,0x50000
80007f34:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007f38:	824f90ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80007f3c:	00050713          	mv	a4,a0
80007f40:	000017b7          	lui	a5,0x1
80007f44:	f0f78793          	addi	a5,a5,-241 # f0f <HEAP_SIZE-0xf0f1>
80007f48:	00f70e63          	beq	a4,a5,80007f64 <vNI_RX_HandlerTask+0x68>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:172 (discriminator 1)
80007f4c:	500007b7          	lui	a5,0x50000
80007f50:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80007f54:	808f90ef          	jal	ra,80000f5c <HW_get_32bit_reg>
80007f58:	00050713          	mv	a4,a0
80007f5c:	02200793          	li	a5,34
80007f60:	7af71663          	bne	a4,a5,8000870c <vNI_RX_HandlerTask+0x810>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:173
            prints("RX interruption catched\n");
80007f64:	800097b7          	lui	a5,0x80009
80007f68:	23878513          	addi	a0,a5,568 # 80009238 <__stack_top+0xfffa9198>
80007f6c:	dccfe0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:174
            service = incommingPacket.service;
80007f70:	8003c7b7          	lui	a5,0x8003c
80007f74:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
80007f78:	0087a783          	lw	a5,8(a5)
80007f7c:	fef42023          	sw	a5,-32(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:175
            incommingPacket.service = SOLVED;
80007f80:	8003c7b7          	lui	a5,0x8003c
80007f84:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
80007f88:	00010737          	lui	a4,0x10
80007f8c:	fff70713          	addi	a4,a4,-1 # ffff <HEAP_SIZE-0x1>
80007f90:	00e7a423          	sw	a4,8(a5)
80007f94:	fe042703          	lw	a4,-32(s0)
80007f98:	05500793          	li	a5,85
80007f9c:	68f70063          	beq	a4,a5,8000861c <vNI_RX_HandlerTask+0x720>
80007fa0:	fe042703          	lw	a4,-32(s0)
80007fa4:	05500793          	li	a5,85
80007fa8:	06e7e063          	bltu	a5,a4,80008008 <vNI_RX_HandlerTask+0x10c>
80007fac:	fe042703          	lw	a4,-32(s0)
80007fb0:	02100793          	li	a5,33
80007fb4:	5ef70463          	beq	a4,a5,8000859c <vNI_RX_HandlerTask+0x6a0>
80007fb8:	fe042703          	lw	a4,-32(s0)
80007fbc:	02100793          	li	a5,33
80007fc0:	02e7e063          	bltu	a5,a4,80007fe0 <vNI_RX_HandlerTask+0xe4>
80007fc4:	fe042703          	lw	a4,-32(s0)
80007fc8:	01000793          	li	a5,16
80007fcc:	46f70a63          	beq	a4,a5,80008440 <vNI_RX_HandlerTask+0x544>
80007fd0:	fe042703          	lw	a4,-32(s0)
80007fd4:	02000793          	li	a5,32
80007fd8:	54f70063          	beq	a4,a5,80008518 <vNI_RX_HandlerTask+0x61c>
80007fdc:	7040006f          	j	800086e0 <vNI_RX_HandlerTask+0x7e4>
80007fe0:	fe042703          	lw	a4,-32(s0)
80007fe4:	03300793          	li	a5,51
80007fe8:	26f70063          	beq	a4,a5,80008248 <vNI_RX_HandlerTask+0x34c>
80007fec:	fe042703          	lw	a4,-32(s0)
80007ff0:	03500793          	li	a5,53
80007ff4:	28f70a63          	beq	a4,a5,80008288 <vNI_RX_HandlerTask+0x38c>
80007ff8:	fe042703          	lw	a4,-32(s0)
80007ffc:	03000793          	li	a5,48
80008000:	0cf70063          	beq	a4,a5,800080c0 <vNI_RX_HandlerTask+0x1c4>
80008004:	6dc0006f          	j	800086e0 <vNI_RX_HandlerTask+0x7e4>
80008008:	fe042703          	lw	a4,-32(s0)
8000800c:	40000793          	li	a5,1024
80008010:	2af70c63          	beq	a4,a5,800082c8 <vNI_RX_HandlerTask+0x3cc>
80008014:	fe042703          	lw	a4,-32(s0)
80008018:	40000793          	li	a5,1024
8000801c:	02e7e063          	bltu	a5,a4,8000803c <vNI_RX_HandlerTask+0x140>
80008020:	fe042703          	lw	a4,-32(s0)
80008024:	05600793          	li	a5,86
80008028:	62f70c63          	beq	a4,a5,80008660 <vNI_RX_HandlerTask+0x764>
8000802c:	fe042703          	lw	a4,-32(s0)
80008030:	20000793          	li	a5,512
80008034:	02f70a63          	beq	a4,a5,80008068 <vNI_RX_HandlerTask+0x16c>
80008038:	6a80006f          	j	800086e0 <vNI_RX_HandlerTask+0x7e4>
8000803c:	fe042703          	lw	a4,-32(s0)
80008040:	50000793          	li	a5,1280
80008044:	16f70263          	beq	a4,a5,800081a8 <vNI_RX_HandlerTask+0x2ac>
80008048:	fe042703          	lw	a4,-32(s0)
8000804c:	000107b7          	lui	a5,0x10
80008050:	fff78793          	addi	a5,a5,-1 # ffff <HEAP_SIZE-0x1>
80008054:	66f70e63          	beq	a4,a5,800086d0 <vNI_RX_HandlerTask+0x7d4>
80008058:	fe042703          	lw	a4,-32(s0)
8000805c:	40100793          	li	a5,1025
80008060:	2ef70c63          	beq	a4,a5,80008358 <vNI_RX_HandlerTask+0x45c>
80008064:	67c0006f          	j	800086e0 <vNI_RX_HandlerTask+0x7e4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:178
            switch (service){
                case REPOSITORY_APP_INFO: // When the repository informs the GM that exist a new Application available:
                    prints("REPOSITORY_APP_INFO\n");
80008068:	800097b7          	lui	a5,0x80009
8000806c:	25478513          	addi	a0,a5,596 # 80009254 <__stack_top+0xfffa91b4>
80008070:	cc8fe0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:179
                    API_AddApplication(incommingPacket.application_id,
80008074:	8003c7b7          	lui	a5,0x8003c
80008078:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
8000807c:	00c7a703          	lw	a4,12(a5)
80008080:	8003c7b7          	lui	a5,0x8003c
80008084:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
80008088:	0107a583          	lw	a1,16(a5)
8000808c:	8003c7b7          	lui	a5,0x8003c
80008090:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
80008094:	0147a603          	lw	a2,20(a5)
80008098:	8003c7b7          	lui	a5,0x8003c
8000809c:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
800080a0:	0187a783          	lw	a5,24(a5)
800080a4:	00078693          	mv	a3,a5
800080a8:	00070513          	mv	a0,a4
800080ac:	b84fb0ef          	jal	ra,80003430 <API_AddApplication>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:184
                                    incommingPacket.aplication_period, 
                                    incommingPacket.application_executions, 
                                    incommingPacket.application_n_tasks);
                    //HW_set_32bit_reg(NI_RX, DONE);
                    prints("1NI_RX DONE!\n");
800080b0:	800097b7          	lui	a5,0x80009
800080b4:	26c78513          	addi	a0,a5,620 # 8000926c <__stack_top+0xfffa91cc>
800080b8:	c80fe0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:185
                    break;
800080bc:	6540006f          	j	80008710 <vNI_RX_HandlerTask+0x814>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:188
                
                case TASK_ALLOCATION_SEND: // When the GM asks one Slave to allocate one task
                    prints("TASK_ALLOCATION_SEND\n");
800080c0:	800097b7          	lui	a5,0x80009
800080c4:	27c78513          	addi	a0,a5,636 # 8000927c <__stack_top+0xfffa91dc>
800080c8:	c70fe0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:189
                    aux = API_TaskAllocation(incommingPacket.task_id,
800080cc:	8003c7b7          	lui	a5,0x8003c
800080d0:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
800080d4:	00c7a503          	lw	a0,12(a5)
800080d8:	8003c7b7          	lui	a5,0x8003c
800080dc:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
800080e0:	0107a583          	lw	a1,16(a5)
800080e4:	8003c7b7          	lui	a5,0x8003c
800080e8:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
800080ec:	0147a603          	lw	a2,20(a5)
800080f0:	8003c7b7          	lui	a5,0x8003c
800080f4:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
800080f8:	0187a683          	lw	a3,24(a5)
800080fc:	8003c7b7          	lui	a5,0x8003c
80008100:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
80008104:	01c7a783          	lw	a5,28(a5)
80008108:	00078713          	mv	a4,a5
8000810c:	b21fc0ef          	jal	ra,80004c2c <API_TaskAllocation>
80008110:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:194
                                             incommingPacket.task_txt_size,
                                             incommingPacket.task_bss_size,
                                             incommingPacket.task_start_point,
                                             incommingPacket.task_app_id);
                    printsv("Task slot: ", aux);
80008114:	fec42783          	lw	a5,-20(s0)
80008118:	00078593          	mv	a1,a5
8000811c:	800097b7          	lui	a5,0x80009
80008120:	29478513          	addi	a0,a5,660 # 80009294 <__stack_top+0xfffa91f4>
80008124:	cc0fe0ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:195
                    printsv("Task slot TaskAddr: ", TaskList[aux].taskAddr);
80008128:	8003c7b7          	lui	a5,0x8003c
8000812c:	fec42683          	lw	a3,-20(s0)
80008130:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80008134:	000017b7          	lui	a5,0x1
80008138:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
8000813c:	02f687b3          	mul	a5,a3,a5
80008140:	00f707b3          	add	a5,a4,a5
80008144:	0287a783          	lw	a5,40(a5)
80008148:	00078593          	mv	a1,a5
8000814c:	800097b7          	lui	a5,0x80009
80008150:	2a078513          	addi	a0,a5,672 # 800092a0 <__stack_top+0xfffa9200>
80008154:	c90fe0ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:197
                    // Informs the NI were to write the application
                    HW_set_32bit_reg(NI_RX, TaskList[aux].taskAddr);
80008158:	8003c7b7          	lui	a5,0x8003c
8000815c:	fec42683          	lw	a3,-20(s0)
80008160:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80008164:	000017b7          	lui	a5,0x1
80008168:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
8000816c:	02f687b3          	mul	a5,a3,a5
80008170:	00f707b3          	add	a5,a4,a5
80008174:	0287a783          	lw	a5,40(a5)
80008178:	00078593          	mv	a1,a5
8000817c:	500007b7          	lui	a5,0x50000
80008180:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80008184:	dd1f80ef          	jal	ra,80000f54 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:198
                    incommingPacket.service = TASK_ALLOCATION_FINISHED;
80008188:	8003c7b7          	lui	a5,0x8003c
8000818c:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
80008190:	03300713          	li	a4,51
80008194:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:200
                    //HW_set_32bit_reg(NI_RX, DONE);
                    prints("2NI_RX DONE!\n");
80008198:	800097b7          	lui	a5,0x80009
8000819c:	2b878513          	addi	a0,a5,696 # 800092b8 <__stack_top+0xfffa9218>
800081a0:	b98fe0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:201
                    break;
800081a4:	56c0006f          	j	80008710 <vNI_RX_HandlerTask+0x814>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:204
                
                case TASK_FINISH:
                    printsvsv("FINISHED: Task ", incommingPacket.task_id, "from application ", incommingPacket.task_app_id);
800081a8:	8003c7b7          	lui	a5,0x8003c
800081ac:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
800081b0:	00c7a783          	lw	a5,12(a5)
800081b4:	00078713          	mv	a4,a5
800081b8:	8003c7b7          	lui	a5,0x8003c
800081bc:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
800081c0:	01c7a783          	lw	a5,28(a5)
800081c4:	00078693          	mv	a3,a5
800081c8:	800097b7          	lui	a5,0x80009
800081cc:	2c878613          	addi	a2,a5,712 # 800092c8 <__stack_top+0xfffa9228>
800081d0:	00070593          	mv	a1,a4
800081d4:	800097b7          	lui	a5,0x80009
800081d8:	2dc78513          	addi	a0,a5,732 # 800092dc <__stack_top+0xfffa923c>
800081dc:	c50fe0ef          	jal	ra,8000662c <printsvsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:205
                    API_ClearTaskSlotFromTile(incommingPacket.task_dest_addr, incommingPacket.task_app_id, incommingPacket.task_id);
800081e0:	8003c7b7          	lui	a5,0x8003c
800081e4:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
800081e8:	0307a703          	lw	a4,48(a5)
800081ec:	8003c7b7          	lui	a5,0x8003c
800081f0:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
800081f4:	01c7a683          	lw	a3,28(a5)
800081f8:	8003c7b7          	lui	a5,0x8003c
800081fc:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
80008200:	00c7a783          	lw	a5,12(a5)
80008204:	00078613          	mv	a2,a5
80008208:	00068593          	mv	a1,a3
8000820c:	00070513          	mv	a0,a4
80008210:	ff1fb0ef          	jal	ra,80004200 <API_ClearTaskSlotFromTile>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:206
                    API_DealocateTask(incommingPacket.task_id, incommingPacket.task_app_id);
80008214:	8003c7b7          	lui	a5,0x8003c
80008218:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
8000821c:	00c7a703          	lw	a4,12(a5)
80008220:	8003c7b7          	lui	a5,0x8003c
80008224:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
80008228:	01c7a783          	lw	a5,28(a5)
8000822c:	00078593          	mv	a1,a5
80008230:	00070513          	mv	a0,a4
80008234:	96dfb0ef          	jal	ra,80003ba0 <API_DealocateTask>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:208
                    //HW_set_32bit_reg(NI_RX, DONE);
                    prints("3NI_RX DONE!\n");
80008238:	800097b7          	lui	a5,0x80009
8000823c:	2ec78513          	addi	a0,a5,748 # 800092ec <__stack_top+0xfffa924c>
80008240:	af8fe0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:209
                    break;
80008244:	4cc0006f          	j	80008710 <vNI_RX_HandlerTask+0x814>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:212

                case TASK_ALLOCATION_FINISHED:
                    prints("TASK_ALLOCATION_FINISHED\n");
80008248:	800097b7          	lui	a5,0x80009
8000824c:	2fc78513          	addi	a0,a5,764 # 800092fc <__stack_top+0xfffa925c>
80008250:	ae8fe0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:213
                    API_AckTaskAllocation(incommingPacket.task_id, incommingPacket.task_app_id);
80008254:	8003c7b7          	lui	a5,0x8003c
80008258:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
8000825c:	00c7a703          	lw	a4,12(a5)
80008260:	8003c7b7          	lui	a5,0x8003c
80008264:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
80008268:	01c7a783          	lw	a5,28(a5)
8000826c:	00078593          	mv	a1,a5
80008270:	00070513          	mv	a0,a4
80008274:	d29fe0ef          	jal	ra,80006f9c <API_AckTaskAllocation>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:215
                    //HW_set_32bit_reg(NI_RX, DONE);
                    prints("4NI_RX DONE!\n");
80008278:	800097b7          	lui	a5,0x80009
8000827c:	31878513          	addi	a0,a5,792 # 80009318 <__stack_top+0xfffa9278>
80008280:	ab8fe0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:216
                    break;
80008284:	48c0006f          	j	80008710 <vNI_RX_HandlerTask+0x814>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:219

                case TASK_ALLOCATION_SUCCESS:
                    prints("TASK_ALLOCATION_SUCCESS\n");
80008288:	800097b7          	lui	a5,0x80009
8000828c:	32878513          	addi	a0,a5,808 # 80009328 <__stack_top+0xfffa9288>
80008290:	aa8fe0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:220
                    API_TaskAllocated(incommingPacket.task_id, incommingPacket.task_app_id);
80008294:	8003c7b7          	lui	a5,0x8003c
80008298:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
8000829c:	00c7a703          	lw	a4,12(a5)
800082a0:	8003c7b7          	lui	a5,0x8003c
800082a4:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
800082a8:	01c7a783          	lw	a5,28(a5)
800082ac:	00078593          	mv	a1,a5
800082b0:	00070513          	mv	a0,a4
800082b4:	b30fc0ef          	jal	ra,800045e4 <API_TaskAllocated>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:222
                    //HW_set_32bit_reg(NI_RX, DONE);
                    prints("5NI_RX DONE!\n");
800082b8:	800097b7          	lui	a5,0x80009
800082bc:	34478513          	addi	a0,a5,836 # 80009344 <__stack_top+0xfffa92a4>
800082c0:	a78fe0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:223
                    break;
800082c4:	44c0006f          	j	80008710 <vNI_RX_HandlerTask+0x814>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:226

                case TASK_START:
                    prints("Chegou um TASK_START!\n");
800082c8:	800097b7          	lui	a5,0x80009
800082cc:	35478513          	addi	a0,a5,852 # 80009354 <__stack_top+0xfffa92b4>
800082d0:	a68fe0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:227
                    aux = API_GetTaskSlot(incommingPacket.task_id, incommingPacket.task_app_id);
800082d4:	8003c7b7          	lui	a5,0x8003c
800082d8:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
800082dc:	00c7a703          	lw	a4,12(a5)
800082e0:	8003c7b7          	lui	a5,0x8003c
800082e4:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
800082e8:	01c7a783          	lw	a5,28(a5)
800082ec:	00078593          	mv	a1,a5
800082f0:	00070513          	mv	a0,a4
800082f4:	bddfc0ef          	jal	ra,80004ed0 <API_GetTaskSlot>
800082f8:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:229
                    // Informs the NI were to write the application
                    HW_set_32bit_reg(NI_RX, (unsigned int)&TaskList[aux].appNumTasks);
800082fc:	fec42703          	lw	a4,-20(s0)
80008300:	000017b7          	lui	a5,0x1
80008304:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80008308:	02f70733          	mul	a4,a4,a5
8000830c:	000017b7          	lui	a5,0x1
80008310:	95078793          	addi	a5,a5,-1712 # 950 <HEAP_SIZE-0xf6b0>
80008314:	00f70733          	add	a4,a4,a5
80008318:	8003c7b7          	lui	a5,0x8003c
8000831c:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80008320:	00f707b3          	add	a5,a4,a5
80008324:	00878793          	addi	a5,a5,8
80008328:	00078593          	mv	a1,a5
8000832c:	500007b7          	lui	a5,0x50000
80008330:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80008334:	c21f80ef          	jal	ra,80000f54 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:230
                    incommingPacket.service = TASK_RUN;
80008338:	8003c7b7          	lui	a5,0x8003c
8000833c:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
80008340:	40100713          	li	a4,1025
80008344:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:232
                    //HW_set_32bit_reg(NI_RX, DONE);
                    prints("6NI_RX DONE!\n");
80008348:	800097b7          	lui	a5,0x80009
8000834c:	36c78513          	addi	a0,a5,876 # 8000936c <__stack_top+0xfffa92cc>
80008350:	9e8fe0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:233
                    break;
80008354:	3bc0006f          	j	80008710 <vNI_RX_HandlerTask+0x814>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:236
                
                case TASK_RUN:
                    prints("Chegou um TASK_RUN!\n");
80008358:	800097b7          	lui	a5,0x80009
8000835c:	37c78513          	addi	a0,a5,892 # 8000937c <__stack_top+0xfffa92dc>
80008360:	9d8fe0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:237
                    aux = API_GetTaskSlot(incommingPacket.task_id, incommingPacket.task_app_id);
80008364:	8003c7b7          	lui	a5,0x8003c
80008368:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
8000836c:	00c7a703          	lw	a4,12(a5)
80008370:	8003c7b7          	lui	a5,0x8003c
80008374:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
80008378:	01c7a783          	lw	a5,28(a5)
8000837c:	00078593          	mv	a1,a5
80008380:	00070513          	mv	a0,a4
80008384:	b4dfc0ef          	jal	ra,80004ed0 <API_GetTaskSlot>
80008388:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:238
                    TaskList[aux].status = TASK_SLOT_READY;
8000838c:	8003c7b7          	lui	a5,0x8003c
80008390:	fec42683          	lw	a3,-20(s0)
80008394:	00001737          	lui	a4,0x1
80008398:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
8000839c:	02e68733          	mul	a4,a3,a4
800083a0:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
800083a4:	00f707b3          	add	a5,a4,a5
800083a8:	00300713          	li	a4,3
800083ac:	00e7a023          	sw	a4,0(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:239
                    API_setFreqScale(1000);
800083b0:	3e800513          	li	a0,1000
800083b4:	ea0fd0ef          	jal	ra,80005a54 <API_setFreqScale>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:240
                    printsvsv("Starting Task ", TaskList[aux].TaskID, " from app ", TaskList[aux].AppID);
800083b8:	8003c7b7          	lui	a5,0x8003c
800083bc:	fec42683          	lw	a3,-20(s0)
800083c0:	00001737          	lui	a4,0x1
800083c4:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
800083c8:	02e68733          	mul	a4,a3,a4
800083cc:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
800083d0:	00f707b3          	add	a5,a4,a5
800083d4:	0107a783          	lw	a5,16(a5)
800083d8:	00078593          	mv	a1,a5
800083dc:	8003c7b7          	lui	a5,0x8003c
800083e0:	fec42683          	lw	a3,-20(s0)
800083e4:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
800083e8:	000017b7          	lui	a5,0x1
800083ec:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
800083f0:	02f687b3          	mul	a5,a3,a5
800083f4:	00f707b3          	add	a5,a4,a5
800083f8:	0147a783          	lw	a5,20(a5)
800083fc:	00078693          	mv	a3,a5
80008400:	800097b7          	lui	a5,0x80009
80008404:	39478613          	addi	a2,a5,916 # 80009394 <__stack_top+0xfffa92f4>
80008408:	800097b7          	lui	a5,0x80009
8000840c:	3a078513          	addi	a0,a5,928 # 800093a0 <__stack_top+0xfffa9300>
80008410:	a1cfe0ef          	jal	ra,8000662c <printsvsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:241
                    printsv("taskSlot run: ", aux);
80008414:	fec42783          	lw	a5,-20(s0)
80008418:	00078593          	mv	a1,a5
8000841c:	800097b7          	lui	a5,0x80009
80008420:	3b078513          	addi	a0,a5,944 # 800093b0 <__stack_top+0xfffa9310>
80008424:	9c0fe0ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:243
                    //HW_set_32bit_reg(NI_RX, DONE);
                    prints("7NI_RX DONE!\n");
80008428:	800097b7          	lui	a5,0x80009
8000842c:	3c078513          	addi	a0,a5,960 # 800093c0 <__stack_top+0xfffa9320>
80008430:	908fe0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:244
                    API_TaskStart(aux);
80008434:	fec42503          	lw	a0,-20(s0)
80008438:	b71fc0ef          	jal	ra,80004fa8 <API_TaskStart>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:245
                    break;
8000843c:	2d40006f          	j	80008710 <vNI_RX_HandlerTask+0x814>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:249

                case MESSAGE_REQUEST:
                    // check the pipe
                    printsvsv("Chegou um message request! App: ", incommingPacket.task_app_id, "Task: ", incommingPacket.task_id);
80008440:	8003c7b7          	lui	a5,0x8003c
80008444:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
80008448:	01c7a783          	lw	a5,28(a5)
8000844c:	00078713          	mv	a4,a5
80008450:	8003c7b7          	lui	a5,0x8003c
80008454:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
80008458:	00c7a783          	lw	a5,12(a5)
8000845c:	00078693          	mv	a3,a5
80008460:	800097b7          	lui	a5,0x80009
80008464:	3d078613          	addi	a2,a5,976 # 800093d0 <__stack_top+0xfffa9330>
80008468:	00070593          	mv	a1,a4
8000846c:	800097b7          	lui	a5,0x80009
80008470:	3d878513          	addi	a0,a5,984 # 800093d8 <__stack_top+0xfffa9338>
80008474:	9b8fe0ef          	jal	ra,8000662c <printsvsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:250
                    aux = API_CheckMessagePipe(incommingPacket.task_id, incommingPacket.task_app_id);
80008478:	8003c7b7          	lui	a5,0x8003c
8000847c:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
80008480:	00c7a703          	lw	a4,12(a5)
80008484:	8003c7b7          	lui	a5,0x8003c
80008488:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
8000848c:	01c7a783          	lw	a5,28(a5)
80008490:	00078593          	mv	a1,a5
80008494:	00070513          	mv	a0,a4
80008498:	d00ff0ef          	jal	ra,80007998 <API_CheckMessagePipe>
8000849c:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:251
                    if (aux == ERRO){
800084a0:	fec42703          	lw	a4,-20(s0)
800084a4:	fff00793          	li	a5,-1
800084a8:	04f71463          	bne	a4,a5,800084f0 <vNI_RX_HandlerTask+0x5f4>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:253
                        // register an messagerequest
                        prints("Mensagem não encontrada, adicionando ao PendingReq!\n");
800084ac:	800097b7          	lui	a5,0x80009
800084b0:	3fc78513          	addi	a0,a5,1020 # 800093fc <__stack_top+0xfffa935c>
800084b4:	884fe0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:254
                        API_AddPendingReq(incommingPacket.task_id, incommingPacket.task_app_id, incommingPacket.producer_task_id);
800084b8:	8003c7b7          	lui	a5,0x8003c
800084bc:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
800084c0:	00c7a703          	lw	a4,12(a5)
800084c4:	8003c7b7          	lui	a5,0x8003c
800084c8:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
800084cc:	01c7a683          	lw	a3,28(a5)
800084d0:	8003c7b7          	lui	a5,0x8003c
800084d4:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
800084d8:	0147a783          	lw	a5,20(a5)
800084dc:	00078613          	mv	a2,a5
800084e0:	00068593          	mv	a1,a3
800084e4:	00070513          	mv	a0,a4
800084e8:	ed4ff0ef          	jal	ra,80007bbc <API_AddPendingReq>
800084ec:	01c0006f          	j	80008508 <vNI_RX_HandlerTask+0x60c>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:256
                    } else {
                        prints("Mensagem encontrada no pipe!\n");
800084f0:	800097b7          	lui	a5,0x80009
800084f4:	43478513          	addi	a0,a5,1076 # 80009434 <__stack_top+0xfffa9394>
800084f8:	840fe0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:257
                        API_PushSendQueue(MESSAGE, aux);
800084fc:	fec42583          	lw	a1,-20(s0)
80008500:	20200537          	lui	a0,0x20200
80008504:	e7cfe0ef          	jal	ra,80006b80 <API_PushSendQueue>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:261
                        // API_Try2Send();
                    }
                    //HW_set_32bit_reg(NI_RX, DONE);
                    prints("8NI_RX DONE!\n");
80008508:	800097b7          	lui	a5,0x80009
8000850c:	45478513          	addi	a0,a5,1108 # 80009454 <__stack_top+0xfffa93b4>
80008510:	828fe0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:262
                    break;
80008514:	1fc0006f          	j	80008710 <vNI_RX_HandlerTask+0x814>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:265
                
                case MESSAGE_DELIVERY:
                    prints("Tem uma mensagem chegando...\n");
80008518:	800097b7          	lui	a5,0x80009
8000851c:	46478513          	addi	a0,a5,1124 # 80009464 <__stack_top+0xfffa93c4>
80008520:	818fe0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:266
                    aux = API_GetTaskSlot(incommingPacket.destination_task, incommingPacket.application_id);
80008524:	8003c7b7          	lui	a5,0x8003c
80008528:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
8000852c:	0147a703          	lw	a4,20(a5)
80008530:	8003c7b7          	lui	a5,0x8003c
80008534:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
80008538:	00c7a783          	lw	a5,12(a5)
8000853c:	00078593          	mv	a1,a5
80008540:	00070513          	mv	a0,a4
80008544:	98dfc0ef          	jal	ra,80004ed0 <API_GetTaskSlot>
80008548:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:268
                    //printsv("MESSAGE_DELIVERY addr: ", TaskList[aux].MsgToReceive);
                    HW_set_32bit_reg(NI_RX, TaskList[aux].MsgToReceive);
8000854c:	8003c7b7          	lui	a5,0x8003c
80008550:	fec42683          	lw	a3,-20(s0)
80008554:	00001737          	lui	a4,0x1
80008558:	98470713          	addi	a4,a4,-1660 # 984 <HEAP_SIZE-0xf67c>
8000855c:	02e68733          	mul	a4,a3,a4
80008560:	76c78793          	addi	a5,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
80008564:	00f707b3          	add	a5,a4,a5
80008568:	0207a783          	lw	a5,32(a5)
8000856c:	00078593          	mv	a1,a5
80008570:	500007b7          	lui	a5,0x50000
80008574:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80008578:	9ddf80ef          	jal	ra,80000f54 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:269
                    incommingPacket.service = MESSAGE_DELIVERY_FINISH;
8000857c:	8003c7b7          	lui	a5,0x8003c
80008580:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
80008584:	02100713          	li	a4,33
80008588:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:272
                    //prints("done...\n----------\n");
                    //HW_set_32bit_reg(NI_RX, DONE);
                    prints("9NI_RX DONE!\n");
8000858c:	800097b7          	lui	a5,0x80009
80008590:	48478513          	addi	a0,a5,1156 # 80009484 <__stack_top+0xfffa93e4>
80008594:	fa5fd0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:273
                    break;
80008598:	1780006f          	j	80008710 <vNI_RX_HandlerTask+0x814>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:277
                
                case MESSAGE_DELIVERY_FINISH:
                    //prints("Terminou de entregar a mensagem!!\n");
                    aux = API_GetTaskSlot(incommingPacket.destination_task, incommingPacket.application_id);
8000859c:	8003c7b7          	lui	a5,0x8003c
800085a0:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
800085a4:	0147a703          	lw	a4,20(a5)
800085a8:	8003c7b7          	lui	a5,0x8003c
800085ac:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
800085b0:	00c7a783          	lw	a5,12(a5)
800085b4:	00078593          	mv	a1,a5
800085b8:	00070513          	mv	a0,a4
800085bc:	915fc0ef          	jal	ra,80004ed0 <API_GetTaskSlot>
800085c0:	fea42623          	sw	a0,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:278
                    TaskList[aux].waitingMsg = FALSE;
800085c4:	8003c7b7          	lui	a5,0x8003c
800085c8:	fec42683          	lw	a3,-20(s0)
800085cc:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
800085d0:	000017b7          	lui	a5,0x1
800085d4:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
800085d8:	02f687b3          	mul	a5,a3,a5
800085dc:	00f707b3          	add	a5,a4,a5
800085e0:	0007ae23          	sw	zero,28(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:308
                    //     the port and may be called portEND_SWITCHING_ISR. */
                    //     //portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
                    // }

                    //HW_set_32bit_reg(NI_RX, DONE);
                    prints("10NI_RX DONE!\n");
800085e4:	800097b7          	lui	a5,0x80009
800085e8:	49478513          	addi	a0,a5,1172 # 80009494 <__stack_top+0xfffa93f4>
800085ec:	f4dfd0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:310
                    //vTaskResume(TaskList[aux].TaskHandler);
                    xTaskResumeFromISR(TaskList[aux].TaskHandler);
800085f0:	8003c7b7          	lui	a5,0x8003c
800085f4:	fec42683          	lw	a3,-20(s0)
800085f8:	76c78713          	addi	a4,a5,1900 # 8003c76c <__stack_top+0xfffdc6cc>
800085fc:	000017b7          	lui	a5,0x1
80008600:	98478793          	addi	a5,a5,-1660 # 984 <HEAP_SIZE-0xf67c>
80008604:	02f687b3          	mul	a5,a3,a5
80008608:	00f707b3          	add	a5,a4,a5
8000860c:	0187a783          	lw	a5,24(a5)
80008610:	00078513          	mv	a0,a5
80008614:	f09f90ef          	jal	ra,8000251c <xTaskResumeFromISR>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:311
                    break;
80008618:	0f80006f          	j	80008710 <vNI_RX_HandlerTask+0x814>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:314

                case TEMPERATURE_PACKET:
                    prints("Recebendo pacote de temperatura");
8000861c:	800097b7          	lui	a5,0x80009
80008620:	4a478513          	addi	a0,a5,1188 # 800094a4 <__stack_top+0xfffa9404>
80008624:	f15fd0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:315
                    HW_set_32bit_reg(NI_RX, (unsigned int)&SystemTemperature);
80008628:	8003c7b7          	lui	a5,0x8003c
8000862c:	5d878793          	addi	a5,a5,1496 # 8003c5d8 <__stack_top+0xfffdc538>
80008630:	00078593          	mv	a1,a5
80008634:	500007b7          	lui	a5,0x50000
80008638:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
8000863c:	919f80ef          	jal	ra,80000f54 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:316
                    incommingPacket.service = FINISH_TEMPERATURE_PACKET;
80008640:	8003c7b7          	lui	a5,0x8003c
80008644:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
80008648:	05600713          	li	a4,86
8000864c:	00e7a423          	sw	a4,8(a5)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:318
                    //HW_set_32bit_reg(NI_RX, DONE);
                    prints("11NI_RX DONE!\n");
80008650:	800097b7          	lui	a5,0x80009
80008654:	4c478513          	addi	a0,a5,1220 # 800094c4 <__stack_top+0xfffa9424>
80008658:	ee1fd0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:319
                    break;
8000865c:	0b40006f          	j	80008710 <vNI_RX_HandlerTask+0x814>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:322
                
                case FINISH_TEMPERATURE_PACKET:
                    temperatureUpdated = 1;
80008660:	8003c7b7          	lui	a5,0x8003c
80008664:	00100713          	li	a4,1
80008668:	5ce7aa23          	sw	a4,1492(a5) # 8003c5d4 <__stack_top+0xfffdc534>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:323
                    for(aux = 0; aux < DIM_X*DIM_Y; aux++){ 
8000866c:	fe042623          	sw	zero,-20(s0)
80008670:	0440006f          	j	800086b4 <vNI_RX_HandlerTask+0x7b8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:324 (discriminator 3)
                        printsvsv("pe", aux, "temp: ", SystemTemperature[aux]);
80008674:	fec42583          	lw	a1,-20(s0)
80008678:	8003c7b7          	lui	a5,0x8003c
8000867c:	fec42703          	lw	a4,-20(s0)
80008680:	00271713          	slli	a4,a4,0x2
80008684:	5d878793          	addi	a5,a5,1496 # 8003c5d8 <__stack_top+0xfffdc538>
80008688:	00f707b3          	add	a5,a4,a5
8000868c:	0007a783          	lw	a5,0(a5)
80008690:	00078693          	mv	a3,a5
80008694:	800097b7          	lui	a5,0x80009
80008698:	4d478613          	addi	a2,a5,1236 # 800094d4 <__stack_top+0xfffa9434>
8000869c:	800097b7          	lui	a5,0x80009
800086a0:	4dc78513          	addi	a0,a5,1244 # 800094dc <__stack_top+0xfffa943c>
800086a4:	f89fd0ef          	jal	ra,8000662c <printsvsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:323 (discriminator 3)
                    for(aux = 0; aux < DIM_X*DIM_Y; aux++){ 
800086a8:	fec42783          	lw	a5,-20(s0)
800086ac:	00178793          	addi	a5,a5,1
800086b0:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:323 (discriminator 1)
800086b4:	fec42703          	lw	a4,-20(s0)
800086b8:	01800793          	li	a5,24
800086bc:	fae7fce3          	bleu	a4,a5,80008674 <vNI_RX_HandlerTask+0x778>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:327
                    }
                    //HW_set_32bit_reg(NI_RX, DONE);
                    prints("12NI_RX DONE!\n");
800086c0:	800097b7          	lui	a5,0x80009
800086c4:	4e078513          	addi	a0,a5,1248 # 800094e0 <__stack_top+0xfffa9440>
800086c8:	e71fd0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:328
                    break;
800086cc:	0440006f          	j	80008710 <vNI_RX_HandlerTask+0x814>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:332

                case SOLVED:
                    //HW_set_32bit_reg(NI_RX, HOLD);
                    prints("13NI_RX HOLD!\n");
800086d0:	800097b7          	lui	a5,0x80009
800086d4:	4f078513          	addi	a0,a5,1264 # 800094f0 <__stack_top+0xfffa9450>
800086d8:	e61fd0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:333
                    break;
800086dc:	0340006f          	j	80008710 <vNI_RX_HandlerTask+0x814>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:336
                    
                default:
                    printsv("ERROR External_2_IRQHandler Unknown-Service ", incommingPacket.service);
800086e0:	8003c7b7          	lui	a5,0x8003c
800086e4:	b3478793          	addi	a5,a5,-1228 # 8003bb34 <__stack_top+0xfffdba94>
800086e8:	0087a783          	lw	a5,8(a5)
800086ec:	00078593          	mv	a1,a5
800086f0:	800097b7          	lui	a5,0x80009
800086f4:	50078513          	addi	a0,a5,1280 # 80009500 <__stack_top+0xfffa9460>
800086f8:	eedfd0ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:338
                    //HW_set_32bit_reg(NI_RX, DONE);
                    prints("14NI_RX DONE!\n");
800086fc:	800097b7          	lui	a5,0x80009
80008700:	53078513          	addi	a0,a5,1328 # 80009530 <__stack_top+0xfffa9490>
80008704:	e35fd0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:339
                    break;
80008708:	0080006f          	j	80008710 <vNI_RX_HandlerTask+0x814>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:341
            }
        }
8000870c:	00000013          	nop
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:342
		HW_set_32bit_reg(NI_RX, DONE);
80008710:	800057b7          	lui	a5,0x80005
80008714:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffa54b5>
80008718:	500007b7          	lui	a5,0x50000
8000871c:	00c78513          	addi	a0,a5,12 # 5000000c <RAM_SIZE+0x4ff8000c>
80008720:	835f80ef          	jal	ra,80000f54 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:343
        vTaskExitCritical();
80008724:	951fa0ef          	jal	ra,80003074 <vTaskExitCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:157
    for( ;; ){
80008728:	ff4ff06f          	j	80007f1c <vNI_RX_HandlerTask+0x20>

8000872c <vNI_TX_HandlerTask>:
vNI_TX_HandlerTask():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:349
    }
}

/* A task that blocks waiting to be notified that the peripheral
needs servicing. */
void vNI_TX_HandlerTask( void *pvParameters ){
8000872c:	fd010113          	addi	sp,sp,-48
80008730:	02112623          	sw	ra,44(sp)
80008734:	02812423          	sw	s0,40(sp)
80008738:	03010413          	addi	s0,sp,48
8000873c:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:351
	BaseType_t xEvent;
	const TickType_t xBlockTime = 1000000;
80008740:	000f47b7          	lui	a5,0xf4
80008744:	24078793          	addi	a5,a5,576 # f4240 <RAM_SIZE+0x74240>
80008748:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:356 (discriminator 1)
	uint32_t ulNotifiedValue;

    for( ;; ){
		/* Blocks the task until the NI interrupts it */
        ulNotifiedValue = ulTaskNotifyTake( pdFALSE,
8000874c:	fec42583          	lw	a1,-20(s0)
80008750:	00000513          	li	a0,0
80008754:	971fa0ef          	jal	ra,800030c4 <ulTaskNotifyTake>
80008758:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:369 (discriminator 1)
        //     /* Did not receive a notification within the expected time. */
		// 	UART_polled_tx_string( &g_uart, (const uint8_t *)" Time out NI TX...\r\n" );
        // }

		// enters in critical mode
		vTaskEnterCritical();
8000875c:	8ddfa0ef          	jal	ra,80003038 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:371 (discriminator 1)
		
		prints("TX interruption catched\n");
80008760:	800097b7          	lui	a5,0x80009
80008764:	54078513          	addi	a0,a5,1344 # 80009540 <__stack_top+0xfffa94a0>
80008768:	dd1fd0ef          	jal	ra,80006538 <prints>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:372 (discriminator 1)
		API_ClearPipeSlot(SendingSlot); // clear the pipe slot that was transmitted
8000876c:	8003b7b7          	lui	a5,0x8003b
80008770:	7f87a783          	lw	a5,2040(a5) # 8003b7f8 <__stack_top+0xfffdb758>
80008774:	00078513          	mv	a0,a5
80008778:	f79fc0ef          	jal	ra,800056f0 <API_ClearPipeSlot>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:373 (discriminator 1)
		HW_set_32bit_reg(NI_TX, DONE);  // releases the interruption
8000877c:	800057b7          	lui	a5,0x80005
80008780:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffa54b5>
80008784:	500007b7          	lui	a5,0x50000
80008788:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
8000878c:	fc8f80ef          	jal	ra,80000f54 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:374 (discriminator 1)
		API_Try2Send();                 // tries to send another packet (if available)
80008790:	e38fe0ef          	jal	ra,80006dc8 <API_Try2Send>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:377 (discriminator 1)
        
		// exits the criticla mode
		vTaskExitCritical();
80008794:	8e1fa0ef          	jal	ra,80003074 <vTaskExitCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:354 (discriminator 1)
    for( ;; ){
80008798:	fb5ff06f          	j	8000874c <vNI_TX_HandlerTask+0x20>

8000879c <vNI_TMR_HandlerTask>:
vNI_TMR_HandlerTask():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:384
    }
}

/* A task that blocks waiting to be notified that the peripheral
needs servicing. */
void vNI_TMR_HandlerTask( void *pvParameters ){
8000879c:	fd010113          	addi	sp,sp,-48
800087a0:	02112623          	sw	ra,44(sp)
800087a4:	02812423          	sw	s0,40(sp)
800087a8:	03010413          	addi	s0,sp,48
800087ac:	fca42e23          	sw	a0,-36(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:386
	BaseType_t xEvent;
	const TickType_t xBlockTime = 1000000;
800087b0:	000f47b7          	lui	a5,0xf4
800087b4:	24078793          	addi	a5,a5,576 # f4240 <RAM_SIZE+0x74240>
800087b8:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:391 (discriminator 1)
	uint32_t ulNotifiedValue;

    for( ;; ){
		/* Blocks the task until the NI interrupts it */
        ulNotifiedValue = ulTaskNotifyTake( pdFALSE,
800087bc:	fec42583          	lw	a1,-20(s0)
800087c0:	00000513          	li	a0,0
800087c4:	901fa0ef          	jal	ra,800030c4 <ulTaskNotifyTake>
800087c8:	fea42423          	sw	a0,-24(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:404 (discriminator 1)
        //     /* Did not receive a notification within the expected time. */
		// 	UART_polled_tx_string( &g_uart, (const uint8_t *)" Time out NI TIMER...\r\n" );
        // }

		// enters in critical mode 
		vTaskEnterCritical();
800087cc:	86dfa0ef          	jal	ra,80003038 <vTaskEnterCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:406 (discriminator 1)
	
            powerEstimation(); // estimate the power consumed by this PE and send it to the TEA
800087d0:	805fd0ef          	jal	ra,80005fd4 <powerEstimation>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:407 (discriminator 1)
            HW_set_32bit_reg(NI_TIMER, DONE);
800087d4:	800057b7          	lui	a5,0x80005
800087d8:	55578593          	addi	a1,a5,1365 # 80005555 <__stack_top+0xfffa54b5>
800087dc:	500007b7          	lui	a5,0x50000
800087e0:	01078513          	addi	a0,a5,16 # 50000010 <RAM_SIZE+0x4ff80010>
800087e4:	f70f80ef          	jal	ra,80000f54 <HW_set_32bit_reg>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:410 (discriminator 1)

		// exit critical mode
        vTaskExitCritical();
800087e8:	88dfa0ef          	jal	ra,80003074 <vTaskExitCritical>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:389 (discriminator 1)
    for( ;; ){
800087ec:	fd1ff06f          	j	800087bc <vNI_TMR_HandlerTask+0x20>

800087f0 <GlobalManagerTask>:
GlobalManagerTask():
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:417
    }
}

/*-----------------------------------------------------------*/

static void GlobalManagerTask( void *pvParameters ){
800087f0:	fc010113          	addi	sp,sp,-64
800087f4:	02112e23          	sw	ra,60(sp)
800087f8:	02812c23          	sw	s0,56(sp)
800087fc:	04010413          	addi	s0,sp,64
80008800:	fca42623          	sw	a0,-52(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:423
	( void ) pvParameters;
	int tick;
	char str[20];

	// Initialize the priority vector with the pattern policy
	GeneratePatternMatrix();
80008804:	81cfb0ef          	jal	ra,80003820 <GeneratePatternMatrix>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:426

	// Initialize the System Tiles Info
	API_TilesReset();
80008808:	ef1fa0ef          	jal	ra,800036f8 <API_TilesReset>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:429

	// Initialize the applications vector
    API_ApplicationsReset();
8000880c:	e8dfa0ef          	jal	ra,80003698 <API_ApplicationsReset>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:432

	// Informs the Repository that the GLOBALMASTER is ready to receive the application info
	API_RepositoryWakeUp();
80008810:	b01fa0ef          	jal	ra,80003310 <API_RepositoryWakeUp>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:435

	for(;;){
		tick = xTaskGetTickCount();
80008814:	838fa0ef          	jal	ra,8000284c <xTaskGetTickCount>
80008818:	00050793          	mv	a5,a0
8000881c:	fef42623          	sw	a5,-20(s0)
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:436
		myItoa(tick, str, 10);
80008820:	fd840793          	addi	a5,s0,-40
80008824:	00a00613          	li	a2,10
80008828:	00078593          	mv	a1,a5
8000882c:	fec42503          	lw	a0,-20(s0)
80008830:	970fe0ef          	jal	ra,800069a0 <myItoa>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:437
		UART_polled_tx_string( &g_uart, (const uint8_t *)str);
80008834:	fd840793          	addi	a5,s0,-40
80008838:	00078593          	mv	a1,a5
8000883c:	800407b7          	lui	a5,0x80040
80008840:	08c78513          	addi	a0,a5,140 # 8004008c <__stack_top+0xfffdffec>
80008844:	9b5f80ef          	jal	ra,800011f8 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:438
		printsv("GlobalMasterActive", tick);
80008848:	fec42583          	lw	a1,-20(s0)
8000884c:	800097b7          	lui	a5,0x80009
80008850:	55c78513          	addi	a0,a5,1372 # 8000955c <__stack_top+0xfffa94bc>
80008854:	d91fd0ef          	jal	ra,800065e4 <printsv>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:439
		UART_polled_tx_string( &g_uart, (const uint8_t *)" GlobalMasterRoutine...\r\n" );
80008858:	800097b7          	lui	a5,0x80009
8000885c:	57078593          	addi	a1,a5,1392 # 80009570 <__stack_top+0xfffa94d0>
80008860:	800407b7          	lui	a5,0x80040
80008864:	08c78513          	addi	a0,a5,140 # 8004008c <__stack_top+0xfffdffec>
80008868:	991f80ef          	jal	ra,800011f8 <UART_polled_tx_string>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:442

		// Checks if there is some task to allocate...
		API_AllocateTasks(tick);
8000886c:	fec42783          	lw	a5,-20(s0)
80008870:	00078513          	mv	a0,a5
80008874:	854fb0ef          	jal	ra,800038c8 <API_AllocateTasks>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:445
		
		// Checks if there is some task to start...
		API_StartTasks();
80008878:	818fc0ef          	jal	ra,80004890 <API_StartTasks>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:447

		if(API_SystemFinish){
8000887c:	9901a783          	lw	a5,-1648(gp) # 80009720 <API_SystemFinish>
80008880:	00078c63          	beqz	a5,80008898 <GlobalManagerTask+0xa8>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:448
			vTaskDelay(200); // to cool down the system
80008884:	0c800513          	li	a0,200
80008888:	99df90ef          	jal	ra,80002224 <vTaskDelay>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:449
			_exit(0xfe10);
8000888c:	000107b7          	lui	a5,0x10
80008890:	e1078513          	addi	a0,a5,-496 # fe10 <HEAP_SIZE-0x1f0>
80008894:	d08f80ef          	jal	ra,80000d9c <_exit>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:452
		}
		else{
			vTaskDelay(1);
80008898:	00100513          	li	a0,1
8000889c:	989f90ef          	jal	ra,80002224 <vTaskDelay>
/casa/workspace/Chronos-RISCV7/FreeRTOS/Debug/../main.c:435
		tick = xTaskGetTickCount();
800088a0:	f75ff06f          	j	80008814 <GlobalManagerTask+0x24>

800088a4 <write>:
write():
800088a4:	00001797          	auipc	a5,0x1
800088a8:	cfc78793          	addi	a5,a5,-772 # 800095a0 <_impure_ptr>
800088ac:	00060693          	mv	a3,a2
800088b0:	00058613          	mv	a2,a1
800088b4:	00050593          	mv	a1,a0
800088b8:	0007a503          	lw	a0,0(a5)
800088bc:	0040006f          	j	800088c0 <_write_r>

800088c0 <_write_r>:
_write_r():
800088c0:	ff010113          	addi	sp,sp,-16
800088c4:	00812423          	sw	s0,8(sp)
800088c8:	00050413          	mv	s0,a0
800088cc:	00058513          	mv	a0,a1
800088d0:	00060593          	mv	a1,a2
800088d4:	00068613          	mv	a2,a3
800088d8:	00033797          	auipc	a5,0x33
800088dc:	5007aa23          	sw	zero,1300(a5) # 8003bdec <errno>
800088e0:	00112623          	sw	ra,12(sp)
800088e4:	d88f80ef          	jal	ra,80000e6c <_write>
800088e8:	fff00793          	li	a5,-1
800088ec:	00f51c63          	bne	a0,a5,80008904 <_write_r+0x44>
800088f0:	00033797          	auipc	a5,0x33
800088f4:	4fc78793          	addi	a5,a5,1276 # 8003bdec <errno>
800088f8:	0007a783          	lw	a5,0(a5)
800088fc:	00078463          	beqz	a5,80008904 <_write_r+0x44>
80008900:	00f42023          	sw	a5,0(s0)
80008904:	00c12083          	lw	ra,12(sp)
80008908:	00812403          	lw	s0,8(sp)
8000890c:	01010113          	addi	sp,sp,16
80008910:	00008067          	ret
	...
80008920:	6568                	flw	fa0,76(a0)
80008922:	6c6c                	flw	fa1,92(s0)
80008924:	0000006f          	j	80008924 <_write_r+0x64>
80008928:	6544                	flw	fs1,12(a0)
8000892a:	6574                	flw	fa3,76(a0)
8000892c:	69657463          	bleu	s6,a0,80008fb4 <loadStoreDyn+0x110>
80008930:	7520                	flw	fs0,104(a0)
80008932:	616d                	addi	sp,sp,240
80008934:	6320                	flw	fs0,64(a4)
80008936:	6168                	flw	fa0,68(a0)
80008938:	616d                	addi	sp,sp,240
8000893a:	6164                	flw	fs1,68(a0)
8000893c:	5420                	lw	s0,104(s0)
8000893e:	5345                	li	t1,-15
80008940:	4554                	lw	a3,12(a0)
80008942:	6420                	flw	fs0,72(s0)
80008944:	2065                	jal	800089ec <_write_r+0x12c>
80008946:	74736973          	csrrsi	s2,0x747,6
8000894a:	6d65                	lui	s10,0x19
8000894c:	2161                	jal	80008dd4 <_write_r+0x514>
8000894e:	000a                	c.slli	zero,0x2
80008950:	7261                	lui	tp,0xffff8
80008952:	00203067          	0x203067
80008956:	0000                	unimp
80008958:	7261                	lui	tp,0xffff8
8000895a:	00203167          	0x203167
8000895e:	0000                	unimp
80008960:	7261                	lui	tp,0xffff8
80008962:	00203267          	0x203267
80008966:	0000                	unimp
80008968:	7261                	lui	tp,0xffff8
8000896a:	00203367          	0x203367
8000896e:	0000                	unimp
80008970:	7261                	lui	tp,0xffff8
80008972:	00203467          	0x203467
80008976:	0000                	unimp
80008978:	7974                	flw	fa3,116(a0)
8000897a:	6570                	flw	fa2,76(a0)
8000897c:	0020                	addi	s0,sp,8
8000897e:	0000                	unimp
80008980:	74737953          	0x74737953
80008984:	6d65                	lui	s10,0x19
80008986:	6c6c6163          	bltu	s8,t1,80009048 <loadStoreDyn+0x1a4>
8000898a:	6e20                	flw	fs0,88(a2)
8000898c:	206fa3c3          	fmadd.s	ft7,ft11,ft6,ft4,rdn
80008990:	6469                	lui	s0,0x1a
80008992:	6e65                	lui	t3,0x19
80008994:	6974                	flw	fa3,84(a0)
80008996:	6966                	flw	fs2,88(sp)
80008998:	61646163          	bltu	s0,s6,80008f9a <loadStoreDyn+0xf6>
8000899c:	0a21                	addi	s4,s4,8
8000899e:	0000                	unimp
800089a0:	7274                	flw	fa3,100(a2)
800089a2:	7061                	c.lui	zero,0xffff8
800089a4:	000a                	c.slli	zero,0x2
800089a6:	0000                	unimp
800089a8:	7065                	c.lui	zero,0xffff9
800089aa:	00203a63          	0x203a63
800089ae:	0000                	unimp
800089b0:	636d                	lui	t1,0x1b
800089b2:	7561                	lui	a0,0xffff8
800089b4:	203a6573          	csrrsi	a0,hideleg,20
800089b8:	0000                	unimp
800089ba:	0000                	unimp
800089bc:	0700                	addi	s0,sp,896
800089be:	8000                	0x8000
800089c0:	0708                	addi	a0,sp,896
800089c2:	8000                	0x8000
800089c4:	0708                	addi	a0,sp,896
800089c6:	8000                	0x8000
800089c8:	0708                	addi	a0,sp,896
800089ca:	8000                	0x8000
800089cc:	0708                	addi	a0,sp,896
800089ce:	8000                	0x8000
800089d0:	0708                	addi	a0,sp,896
800089d2:	8000                	0x8000
800089d4:	0708                	addi	a0,sp,896
800089d6:	8000                	0x8000
800089d8:	0708                	addi	a0,sp,896
800089da:	8000                	0x8000
800089dc:	0708                	addi	a0,sp,896
800089de:	8000                	0x8000
800089e0:	0708                	addi	a0,sp,896
800089e2:	8000                	0x8000
800089e4:	06e0                	addi	s0,sp,844
800089e6:	8000                	0x8000
800089e8:	0708                	addi	a0,sp,896
800089ea:	8000                	0x8000
800089ec:	0708                	addi	a0,sp,896
800089ee:	8000                	0x8000
800089f0:	0708                	addi	a0,sp,896
800089f2:	8000                	0x8000
800089f4:	0708                	addi	a0,sp,896
800089f6:	8000                	0x8000
800089f8:	0708                	addi	a0,sp,896
800089fa:	8000                	0x8000
800089fc:	0708                	addi	a0,sp,896
800089fe:	8000                	0x8000
80008a00:	0708                	addi	a0,sp,896
80008a02:	8000                	0x8000
80008a04:	0708                	addi	a0,sp,896
80008a06:	8000                	0x8000
80008a08:	0708                	addi	a0,sp,896
80008a0a:	8000                	0x8000
80008a0c:	06f0                	addi	a2,sp,844
80008a0e:	8000                	0x8000
80008a10:	0708                	addi	a0,sp,896
80008a12:	8000                	0x8000
80008a14:	0708                	addi	a0,sp,896
80008a16:	8000                	0x8000
80008a18:	0708                	addi	a0,sp,896
80008a1a:	8000                	0x8000
80008a1c:	0708                	addi	a0,sp,896
80008a1e:	8000                	0x8000
80008a20:	0708                	addi	a0,sp,896
80008a22:	8000                	0x8000
80008a24:	0708                	addi	a0,sp,896
80008a26:	8000                	0x8000
80008a28:	0708                	addi	a0,sp,896
80008a2a:	8000                	0x8000
80008a2c:	0708                	addi	a0,sp,896
80008a2e:	8000                	0x8000
80008a30:	0708                	addi	a0,sp,896
80008a32:	8000                	0x8000
80008a34:	06a4                	addi	s1,sp,840
80008a36:	8000                	0x8000
80008a38:	0708                	addi	a0,sp,896
80008a3a:	8000                	0x8000
80008a3c:	0708                	addi	a0,sp,896
80008a3e:	8000                	0x8000
80008a40:	0708                	addi	a0,sp,896
80008a42:	8000                	0x8000
80008a44:	0708                	addi	a0,sp,896
80008a46:	8000                	0x8000
80008a48:	0708                	addi	a0,sp,896
80008a4a:	8000                	0x8000
80008a4c:	0708                	addi	a0,sp,896
80008a4e:	8000                	0x8000
80008a50:	0708                	addi	a0,sp,896
80008a52:	8000                	0x8000
80008a54:	0708                	addi	a0,sp,896
80008a56:	8000                	0x8000
80008a58:	0708                	addi	a0,sp,896
80008a5a:	8000                	0x8000
80008a5c:	0680                	addi	s0,sp,832
80008a5e:	8000                	0x8000
80008a60:	0708                	addi	a0,sp,896
80008a62:	8000                	0x8000
80008a64:	0708                	addi	a0,sp,896
80008a66:	8000                	0x8000
80008a68:	0708                	addi	a0,sp,896
80008a6a:	8000                	0x8000
80008a6c:	0708                	addi	a0,sp,896
80008a6e:	8000                	0x8000
80008a70:	0708                	addi	a0,sp,896
80008a72:	8000                	0x8000
80008a74:	0708                	addi	a0,sp,896
80008a76:	8000                	0x8000
80008a78:	0708                	addi	a0,sp,896
80008a7a:	8000                	0x8000
80008a7c:	0708                	addi	a0,sp,896
80008a7e:	8000                	0x8000
80008a80:	0708                	addi	a0,sp,896
80008a82:	8000                	0x8000
80008a84:	0708                	addi	a0,sp,896
80008a86:	8000                	0x8000
80008a88:	0708                	addi	a0,sp,896
80008a8a:	8000                	0x8000
80008a8c:	0708                	addi	a0,sp,896
80008a8e:	8000                	0x8000
80008a90:	0708                	addi	a0,sp,896
80008a92:	8000                	0x8000
80008a94:	0708                	addi	a0,sp,896
80008a96:	8000                	0x8000
80008a98:	0708                	addi	a0,sp,896
80008a9a:	8000                	0x8000
80008a9c:	05f8                	addi	a4,sp,716
80008a9e:	8000                	0x8000
80008aa0:	7830                	flw	fa2,112(s0)
80008aa2:	0000                	unimp
80008aa4:	500a                	0x500a
80008aa6:	6f72                	flw	ft10,28(sp)
80008aa8:	206d6167          	0x206d6167
80008aac:	6168                	flw	fa0,68(a0)
80008aae:	78652073          	csrs	0x786,a0
80008ab2:	7469                	lui	s0,0xffffa
80008ab4:	6465                	lui	s0,0x19
80008ab6:	7720                	flw	fs0,104(a4)
80008ab8:	7469                	lui	s0,0xffffa
80008aba:	2068                	fld	fa0,192(s0)
80008abc:	65646f63          	bltu	s0,s6,8000911a <loadStoreDyn+0x276>
80008ac0:	003a                	c.slli	zero,0xe
80008ac2:	0000                	unimp
80008ac4:	000d                	c.nop	3
80008ac6:	0000                	unimp
80008ac8:	4449                	li	s0,18
80008aca:	454c                	lw	a1,12(a0)
80008acc:	0000                	unimp
80008ace:	0000                	unimp
80008ad0:	7345                	lui	t1,0xffff1
80008ad2:	6f74                	flw	fa3,92(a4)
80008ad4:	2075                	jal	80008b80 <_write_r+0x2c0>
80008ad6:	7270                	flw	fa2,100(a2)
80008ad8:	7365                	lui	t1,0xffff9
80008ada:	7161206f          	j	8001b1f0 <__global_pointer$+0x11460>
80008ade:	6975                	lui	s2,0x1d
80008ae0:	2e35                	jal	80008e1c <_write_r+0x55c>
80008ae2:	2e2e                	fld	ft8,200(sp)
80008ae4:	000a                	c.slli	zero,0x2
80008ae6:	0000                	unimp
80008ae8:	654e                	flw	fa0,208(sp)
80008aea:	70612077          	0x70612077
80008aee:	6c70                	flw	fa2,92(s0)
80008af0:	6369                	lui	t1,0x1a
80008af2:	7461                	lui	s0,0xffff8
80008af4:	6f69                	lui	t5,0x1a
80008af6:	206e                	fld	ft0,216(sp)
80008af8:	6572                	flw	fa0,28(sp)
80008afa:	74736967          	0x74736967
80008afe:	7265                	lui	tp,0xffff9
80008b00:	6465                	lui	s0,0x19
80008b02:	2d20                	fld	fs0,88(a0)
80008b04:	4920                	lw	s0,80(a0)
80008b06:	3a44                	fld	fs1,176(a2)
80008b08:	0020                	addi	s0,sp,8
80008b0a:	0000                	unimp
80008b0c:	6572                	flw	fa0,28(sp)
80008b0e:	7574                	flw	fa3,108(a0)
80008b10:	6e72                	flw	ft8,28(sp)
80008b12:	6e69                	lui	t3,0x1a
80008b14:	72652067          	0x72652067
80008b18:	6f72                	flw	ft10,28(sp)
80008b1a:	00000a33          	add	s4,zero,zero
80008b1e:	0000                	unimp
80008b20:	6572                	flw	fa0,28(sp)
80008b22:	7574                	flw	fa3,108(a0)
80008b24:	6e72                	flw	ft8,28(sp)
80008b26:	6e69                	lui	t3,0x1a
80008b28:	72652067          	0x72652067
80008b2c:	6f72                	flw	ft10,28(sp)
80008b2e:	0a34                	addi	a3,sp,280
80008b30:	0000                	unimp
80008b32:	0000                	unimp
80008b34:	6174                	flw	fa3,68(a0)
80008b36:	69206b73          	csrrsi	s6,0x692,0
80008b3a:	00203a73          	csrrc	s4,frm,zero
80008b3e:	0000                	unimp
80008b40:	63656863          	bltu	a0,s6,80009170 <loadStoreDyn+0x2cc>
80008b44:	676e696b          	0x676e696b
80008b48:	0020                	addi	s0,sp,8
80008b4a:	0000                	unimp
80008b4c:	7266                	flw	ft4,120(sp)
80008b4e:	61206d6f          	jal	s10,8000f160 <__global_pointer$+0x53d0>
80008b52:	7070                	flw	fa2,100(s0)
80008b54:	203a                	fld	ft0,392(sp)
80008b56:	0000                	unimp
80008b58:	20736177          	0x20736177
80008b5c:	7865                	lui	a6,0xffff9
80008b5e:	6365                	lui	t1,0x19
80008b60:	7475                	lui	s0,0xffffd
80008b62:	6465                	lui	s0,0x19
80008b64:	6920                	flw	fs0,80(a0)
80008b66:	206e                	fld	ft0,216(sp)
80008b68:	0000                	unimp
80008b6a:	0000                	unimp
80008b6c:	7041                	c.lui	zero,0xffff0
80008b6e:	6c70                	flw	fa2,92(s0)
80008b70:	6369                	lui	t1,0x1a
80008b72:	7461                	lui	s0,0xffff8
80008b74:	6f69                	lui	t5,0x1a
80008b76:	206e                	fld	ft0,216(sp)
80008b78:	0000                	unimp
80008b7a:	0000                	unimp
80008b7c:	0909                	addi	s2,s2,2
80008b7e:	6854                	flw	fa3,20(s0)
80008b80:	7369                	lui	t1,0xffffa
80008b82:	6120                	flw	fs0,64(a0)
80008b84:	7070                	flw	fa2,100(s0)
80008b86:	696c                	flw	fa1,84(a0)
80008b88:	69746163          	bltu	s0,s7,8000920a <loadStoreDyn+0x366>
80008b8c:	73206e6f          	jal	t3,8000f2be <__global_pointer$+0x552e>
80008b90:	6974                	flw	fa3,84(a0)
80008b92:	6c6c                	flw	fa1,92(s0)
80008b94:	6e20                	flw	fs0,88(a2)
80008b96:	6565                	lui	a0,0x19
80008b98:	2064                	fld	fs1,192(s0)
80008b9a:	6f74                	flw	fa3,92(a4)
80008b9c:	7220                	flw	fs0,96(a2)
80008b9e:	6e75                	lui	t3,0x1d
80008ba0:	203a                	fld	ft0,392(sp)
80008ba2:	0000                	unimp
80008ba4:	0909                	addi	s2,s2,2
80008ba6:	6854                	flw	fa3,20(s0)
80008ba8:	7369                	lui	t1,0xffffa
80008baa:	6120                	flw	fs0,64(a0)
80008bac:	7070                	flw	fa2,100(s0)
80008bae:	696c                	flw	fa1,84(a0)
80008bb0:	69746163          	bltu	s0,s7,80009232 <loadStoreDyn+0x38e>
80008bb4:	69206e6f          	jal	t3,8000f246 <__global_pointer$+0x54b6>
80008bb8:	4f442073          	csrs	0x4f4,s0
80008bbc:	454e                	lw	a0,208(sp)
80008bbe:	0a21                	addi	s4,s4,8
80008bc0:	0000                	unimp
80008bc2:	0000                	unimp
80008bc4:	6572                	flw	fa0,28(sp)
80008bc6:	7574                	flw	fa3,108(a0)
80008bc8:	6e72                	flw	ft8,28(sp)
80008bca:	6e69                	lui	t3,0x1a
80008bcc:	72652067          	0x72652067
80008bd0:	6f72                	flw	ft10,28(sp)
80008bd2:	0a35                	addi	s4,s4,13
80008bd4:	0000                	unimp
80008bd6:	0000                	unimp
80008bd8:	6572                	flw	fa0,28(sp)
80008bda:	7574                	flw	fa3,108(a0)
80008bdc:	6e72                	flw	ft8,28(sp)
80008bde:	6e69                	lui	t3,0x1a
80008be0:	72652067          	0x72652067
80008be4:	6f72                	flw	ft10,28(sp)
80008be6:	0a36                	slli	s4,s4,0xd
80008be8:	0000                	unimp
80008bea:	0000                	unimp
80008bec:	7345                	lui	t1,0xffff1
80008bee:	6f74                	flw	fa3,92(a4)
80008bf0:	2075                	jal	80008c9c <_write_r+0x3dc>
80008bf2:	7270                	flw	fa2,100(a2)
80008bf4:	7365                	lui	t1,0xffff9
80008bf6:	7161206f          	j	8001b30c <__global_pointer$+0x1157c>
80008bfa:	6975                	lui	s2,0x1d
80008bfc:	2e36                	fld	ft8,328(sp)
80008bfe:	2e2e                	fld	ft8,200(sp)
80008c00:	000a                	c.slli	zero,0x2
80008c02:	0000                	unimp
80008c04:	2049                	jal	80008c86 <_write_r+0x3c6>
80008c06:	20746f67          	0x20746f67
80008c0a:	2061                	jal	80008c92 <_write_r+0x3d2>
80008c0c:	7266                	flw	ft4,120(sp)
80008c0e:	6565                	lui	a0,0x19
80008c10:	7320                	flw	fs0,96(a4)
80008c12:	7265                	lui	tp,0xffff9
80008c14:	6976                	flw	fs2,92(sp)
80008c16:	73206563          	bltu	zero,s2,80009340 <loadStoreDyn+0x49c>
80008c1a:	6f6c                	flw	fa1,92(a4)
80008c1c:	212d                	jal	80009046 <loadStoreDyn+0x1a2>
80008c1e:	2021                	jal	80008c26 <_write_r+0x366>
80008c20:	3e2d                	jal	8000875a <vNI_TX_HandlerTask+0x2e>
80008c22:	0020                	addi	s0,sp,8
80008c24:	72617453          	0x72617453
80008c28:	6974                	flw	fa3,84(a0)
80008c2a:	676e                	flw	fa4,216(sp)
80008c2c:	4120                	lw	s0,64(a0)
80008c2e:	7070                	flw	fa2,100(s0)
80008c30:	696c                	flw	fa1,84(a0)
80008c32:	69746163          	bltu	s0,s7,800092b4 <loadStoreDyn+0x410>
80008c36:	203a6e6f          	jal	t3,800af638 <__stack_top+0x4f598>
80008c3a:	0000                	unimp
80008c3c:	7345                	lui	t1,0xffff1
80008c3e:	6f74                	flw	fa3,92(a4)
80008c40:	2075                	jal	80008cec <_write_r+0x42c>
80008c42:	7270                	flw	fa2,100(a2)
80008c44:	7365                	lui	t1,0xffff9
80008c46:	7161206f          	j	8001b35c <__global_pointer$+0x115cc>
80008c4a:	6975                	lui	s2,0x1d
80008c4c:	2e2e2e37          	lui	t3,0x2e2e2
80008c50:	000a                	c.slli	zero,0x2
80008c52:	0000                	unimp
80008c54:	646e6553          	0x646e6553
80008c58:	6e69                	lui	t3,0x1a
80008c5a:	41542067          	0x41542067
80008c5e:	535f4b53          	0x535f4b53
80008c62:	4154                	lw	a3,4(a0)
80008c64:	5452                	lw	s0,52(sp)
80008c66:	7420                	flw	fs0,104(s0)
80008c68:	6174206f          	j	8004ba7e <__bss_end+0xb9de>
80008c6c:	00206b73          	csrrsi	s6,frm,0
80008c70:	7041                	c.lui	zero,0xffff0
80008c72:	6c70                	flw	fa2,92(s0)
80008c74:	6369                	lui	t1,0x1a
80008c76:	7461                	lui	s0,0xffff8
80008c78:	6f69                	lui	t5,0x1a
80008c7a:	206e                	fld	ft0,216(sp)
80008c7c:	7369                	lui	t1,0xffffa
80008c7e:	6120                	flw	fs0,64(a0)
80008c80:	6c6c                	flw	fa1,92(s0)
80008c82:	7461636f          	jal	t1,8001f3c8 <__global_pointer$+0x15638>
80008c86:	6465                	lui	s0,0x19
80008c88:	203a                	fld	ft0,392(sp)
80008c8a:	0000                	unimp
80008c8c:	72617453          	0x72617453
80008c90:	2074                	fld	fa3,192(s0)
80008c92:	6d6d6f63          	bltu	s10,s6,80009370 <loadStoreDyn+0x4cc>
80008c96:	6e61                	lui	t3,0x18
80008c98:	2064                	fld	fs1,192(s0)
80008c9a:	746e6573          	csrrsi	a0,0x746,28
80008c9e:	7420                	flw	fs0,104(s0)
80008ca0:	7665206f          	j	8005b406 <__heap_end+0xb366>
80008ca4:	7265                	lui	tp,0xffff9
80008ca6:	2079                	jal	80008d34 <_write_r+0x474>
80008ca8:	6174                	flw	fa3,68(a0)
80008caa:	2e2e6b73          	csrrsi	s6,0x2e2,28
80008cae:	0a2e                	slli	s4,s4,0xb
80008cb0:	0000                	unimp
80008cb2:	0000                	unimp
80008cb4:	6572                	flw	fa0,28(sp)
80008cb6:	7574                	flw	fa3,108(a0)
80008cb8:	6e72                	flw	ft8,28(sp)
80008cba:	6e69                	lui	t3,0x1a
80008cbc:	72652067          	0x72652067
80008cc0:	6f72                	flw	ft10,28(sp)
80008cc2:	0a30                	addi	a2,sp,280
80008cc4:	0000                	unimp
80008cc6:	0000                	unimp
80008cc8:	6572                	flw	fa0,28(sp)
80008cca:	7574                	flw	fa3,108(a0)
80008ccc:	6e72                	flw	ft8,28(sp)
80008cce:	6e69                	lui	t3,0x1a
80008cd0:	72652067          	0x72652067
80008cd4:	6f72                	flw	ft10,28(sp)
80008cd6:	0a31                	addi	s4,s4,12
80008cd8:	0000                	unimp
80008cda:	0000                	unimp
80008cdc:	4544                	lw	s1,12(a0)
80008cde:	2055                	jal	80008d82 <_write_r+0x4c2>
80008ce0:	5552                	lw	a0,52(sp)
80008ce2:	4d49                	li	s10,18
80008ce4:	4e20                	lw	s0,88(a2)
80008ce6:	5041204f          	fnmadd.s	ft0,ft2,ft4,fa0,rdn
80008cea:	5f49                	li	t5,-14
80008cec:	46746547          	fmsub.q	fa0,fs0,ft7,fs0,unknown
80008cf0:	6572                	flw	fa0,28(sp)
80008cf2:	5465                	li	s0,-7
80008cf4:	7361                	lui	t1,0xffff8
80008cf6:	6f6c536b          	0x6f6c536b
80008cfa:	2874                	fld	fa3,208(s0)
80008cfc:	0a29                	addi	s4,s4,10
80008cfe:	0000                	unimp
80008d00:	20746f47          	fmsub.s	ft10,fs0,ft7,ft4,unknown
80008d04:	746f6c73          	csrrsi	s8,0x746,30
80008d08:	203a                	fld	ft0,392(sp)
80008d0a:	0000                	unimp
80008d0c:	6154                	flw	fa3,4(a0)
80008d0e:	74206b73          	csrrsi	s6,0x742,0
80008d12:	6c61746f          	jal	s0,800203d8 <__global_pointer$+0x16648>
80008d16:	7320                	flw	fs0,96(a4)
80008d18:	7a69                	lui	s4,0xffffa
80008d1a:	2065                	jal	80008dc2 <_write_r+0x502>
80008d1c:	7428                	flw	fa0,104(s0)
80008d1e:	7478                	flw	fa4,108(s0)
80008d20:	7373622b          	0x7373622b
80008d24:	3a29                	jal	8000863e <vNI_RX_HandlerTask+0x742>
80008d26:	0020                	addi	s0,sp,8
80008d28:	6154                	flw	fa3,4(a0)
80008d2a:	61206b73          	csrrsi	s6,0x612,0
80008d2e:	6464                	flw	fs1,76(s0)
80008d30:	3a72                	fld	fs4,312(sp)
80008d32:	0020                	addi	s0,sp,8
80008d34:	6572                	flw	fa0,28(sp)
80008d36:	7574                	flw	fa3,108(a0)
80008d38:	6e72                	flw	ft8,28(sp)
80008d3a:	6e69                	lui	t3,0x1a
80008d3c:	72652067          	0x72652067
80008d40:	6f72                	flw	ft10,28(sp)
80008d42:	0a32                	slli	s4,s4,0xc
80008d44:	0000                	unimp
80008d46:	0000                	unimp
80008d48:	614c                	flw	fa1,4(a0)
80008d4a:	6154                	flw	fa3,4(a0)
80008d4c:	00006b73          	csrrsi	s6,ustatus,0
80008d50:	5245                	li	tp,-15
80008d52:	4f52                	lw	t5,20(sp)
80008d54:	2052                	fld	ft0,272(sp)
80008d56:	202d                	jal	80008d80 <_write_r+0x4c0>
80008d58:	5041                	c.li	zero,-16
80008d5a:	5f49                	li	t5,-14
80008d5c:	6154                	flw	fa3,4(a0)
80008d5e:	74536b73          	csrrsi	s6,0x745,6
80008d62:	7261                	lui	tp,0xffff8
80008d64:	2174                	fld	fa3,192(a0)
80008d66:	2121                	jal	8000916e <loadStoreDyn+0x2ca>
80008d68:	000a                	c.slli	zero,0x2
80008d6a:	0000                	unimp
80008d6c:	7061                	c.lui	zero,0xffff8
80008d6e:	3a70                	fld	fa2,240(a2)
80008d70:	0020                	addi	s0,sp,8
80008d72:	0000                	unimp
80008d74:	6946                	flw	fs2,80(sp)
80008d76:	696e                	flw	fs2,216(sp)
80008d78:	6e696873          	csrrsi	a6,0x6e6,18
80008d7c:	61742067          	0x61742067
80008d80:	003a6b73          	csrrsi	s6,fcsr,20
80008d84:	7246                	flw	ft4,112(sp)
80008d86:	73206d6f          	jal	s10,8000f4b8 <__global_pointer$+0x5728>
80008d8a:	6f6c                	flw	fa1,92(a4)
80008d8c:	3a74                	fld	fa3,240(a2)
80008d8e:	0020                	addi	s0,sp,8
80008d90:	6564                	flw	fs1,76(a0)
80008d92:	656c                	flw	fa1,76(a0)
80008d94:	6574                	flw	fa3,76(a0)
80008d96:	2064                	fld	fs1,192(s0)
80008d98:	68746977          	0x68746977
80008d9c:	7320                	flw	fs0,96(a4)
80008d9e:	6375                	lui	t1,0x1d
80008da0:	73736573          	csrrsi	a0,0x737,6
80008da4:	2021                	jal	80008dac <_write_r+0x4ec>
80008da6:	7246                	flw	ft4,112(sp)
80008da8:	61206d6f          	jal	s10,8000f3ba <__global_pointer$+0x562a>
80008dac:	7070                	flw	fa2,100(s0)
80008dae:	696c                	flw	fa1,84(a0)
80008db0:	69746163          	bltu	s0,s7,80009432 <loadStoreDyn+0x58e>
80008db4:	00206e6f          	jal	t3,8000edb6 <__global_pointer$+0x5026>
80008db8:	6154                	flw	fa3,4(a0)
80008dba:	00206b73          	csrrsi	s6,frm,0
80008dbe:	0000                	unimp
80008dc0:	735d                	lui	t1,0xffff7
80008dc2:	6174                	flw	fa3,68(a0)
80008dc4:	7574                	flw	fa3,108(a0)
80008dc6:	00203a73          	csrrc	s4,frm,zero
80008dca:	0000                	unimp
80008dcc:	6154                	flw	fa3,4(a0)
80008dce:	694c6b73          	csrrsi	s6,0x694,24
80008dd2:	005b7473          	csrrci	s0,utvec,22
80008dd6:	0000                	unimp
80008dd8:	6154                	flw	fa3,4(a0)
80008dda:	694c6b73          	csrrsi	s6,0x694,24
80008dde:	695b7473          	csrrci	s0,0x695,22
80008de2:	2e5d                	jal	80009198 <loadStoreDyn+0x2f4>
80008de4:	74617473          	csrrci	s0,0x746,2
80008de8:	7375                	lui	t1,0xffffd
80008dea:	0020                	addi	s0,sp,8
80008dec:	6552                	flw	fa0,20(sp)
80008dee:	7574                	flw	fa3,108(a0)
80008df0:	6e72                	flw	ft8,28(sp)
80008df2:	6e69                	lui	t3,0x1a
80008df4:	65622067          	0x65622067
80008df8:	73756163          	bltu	a0,s7,8000951a <loadStoreDyn+0x676>
80008dfc:	2065                	jal	80008ea4 <loadStoreDyn>
80008dfe:	203a666f          	jal	a2,800af800 <__stack_top+0x4f760>
80008e02:	0000                	unimp
80008e04:	6552                	flw	fa0,20(sp)
80008e06:	696d7573          	csrrci	a0,0x696,26
80008e0a:	646e                	flw	fs0,216(sp)
80008e0c:	6174206f          	j	8004bc22 <__bss_end+0xbb82>
80008e10:	6c536b73          	csrrsi	s6,0x6c5,6
80008e14:	0020746f          	jal	s0,8000fe16 <__global_pointer$+0x6086>
80008e18:	63656843          	fmadd.d	fa6,fa0,fs6,fa2,unknown
80008e1c:	676e696b          	0x676e696b
80008e20:	7420                	flw	fs0,104(s0)
80008e22:	6568                	flw	fa0,76(a0)
80008e24:	5020                	lw	s0,96(s0)
80008e26:	5049                	c.li	zero,-14
80008e28:	2045                	jal	80008ec8 <loadStoreDyn+0x24>
80008e2a:	7420666f          	jal	a2,8000f56c <__global_pointer$+0x57dc>
80008e2e:	7361                	lui	t1,0xffff8
80008e30:	6f6c536b          	0x6f6c536b
80008e34:	3a74                	fld	fa3,240(a2)
80008e36:	0020                	addi	s0,sp,8
80008e38:	3a69                	jal	800087d2 <vNI_TMR_HandlerTask+0x36>
80008e3a:	0020                	addi	s0,sp,8
80008e3c:	74617473          	csrrci	s0,0x746,2
80008e40:	7375                	lui	t1,0xffffd
80008e42:	203a                	fld	ft0,392(sp)
80008e44:	0000                	unimp
80008e46:	0000                	unimp
80008e48:	2d2d                	jal	80009482 <loadStoreDyn+0x5de>
80008e4a:	0a2d                	addi	s4,s4,11
80008e4c:	0000                	unimp
	...

80008e50 <powerAvgBufferIdle>:
80008e50:	0031 0000 003e 0000 004d 0000               1...>...M...

80008e5c <powerSwitchControlIdle>:
80008e5c:	000e 0000 0012 0000 0016 0000               ............

80008e68 <powerAvgBufferActive>:
80008e68:	0076 0000 0097 0000 00bc 0000               v...........

80008e74 <powerSwitchControlActive>:
80008e74:	0029 0000 0034 0000 0041 0000               )...4...A...

80008e80 <readEnergyMemory>:
80008e80:	18cf 0000 1e74 0000 0340 0000               ....t...@...

80008e8c <writeEnergyMemory>:
80008e8c:	228b 0000 2b23 0000 0240 0000               ."..#+..@...

80008e98 <arithDyn>:
80008e98:	035b 0000 0449 0000 086e 0000               [...I...n...

80008ea4 <loadStoreDyn>:
80008ea4:	0622 0000 07d1 0000 09d9 0000 2d2d 2d2d     "...........----
80008eb4:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
80008ec4:	2d2d 2d2d 2d2d 000a 6f4c 6461 3a73 0909     ------..Loads:..
80008ed4:	0000 0000 7453 726f 7365 093a 0009 0000     ....Stores:.....
80008ee4:	744f 6568 7372 093a 0009 0000 7964 616e     Others:.....dyna
80008ef4:	696d 4563 656e 6772 5f79 6f52 7475 7265     micEnergy_Router
80008f04:	3e20 203e 0000 0000 6f74 6174 206c 6e69      >> ....total in
80008f14:	7473 7572 7463 6f69 736e 7e7e 3e7e 0020     structions~~~> .
80008f24:	6f54 6174 456c 656e 6772 3a79 0020 0000     TotalEnergy: ...
80008f34:	6e45 7265 7967 6350 746b 7320 6e65 0a74     EnergyPckt sent.
80008f44:	0000 0000 000a 0000 4e45 5254 4945 4e20     ........ENTREI N
80008f54:	2041 4e49 4554 5252 5055 4143 204f 5852     A INTERRUPCAO RX
80008f64:	000a 0000 4e45 5254 4945 4e20 2041 4e49     ....ENTREI NA IN
80008f74:	4554 5252 5055 4143 204f 5854 000a 0000     TERRUPCAO TX....
80008f84:	4e45 5254 4945 4e20 2041 4e49 4554 5252     ENTREI NA INTERR
80008f94:	5055 4143 204f 4d54 0a52 0000 7266 6d6f     UPCAO TMR...from
80008fa4:	203a 0000 736d 2067 6f70 6e69 6574 3a72     : ..msg pointer:
80008fb4:	0020 0000 694d 686e 2061 6174 6b73 4920      ...Minha task I
80008fc4:	3a44 0020 6553 646e 6e69 5167 6575 6575     D: .SendingQueue
80008fd4:	665f 6f72 746e 203a 0000 0000 5245 4f52     _front: ....ERRO
80008fe4:	2152 6420 7365 6f63 686e 6365 6469 216f     R! desconhecido!
80008ff4:	2021 0000 5041 5f49 7254 3279 6553 646e     ! ..API_Try2Send
80009004:	7320 6375 6563 7373 0a21 0000 5041 5f49      success!...API_
80009014:	7254 3279 6553 646e 6620 6961 656c 2064     Try2Send failed 
80009024:	202d 6d65 7470 2079 6553 646e 7551 7565     - empty SendQueu
80009034:	2165 000a 5041 5f49 7254 3279 6553 646e     e!..API_Try2Send
80009044:	6620 6961 656c 2064 202d 494e 545f 2058      failed - NI_TX 
80009054:	636f 7563 6970 6465 0a21 0000 7345 6f74     occupied!...Esto
80009064:	2075 7270 7365 206f 7161 6975 2e31 2e2e     u preso aqui1...
80009074:	000a 0000 7345 6f74 2075 7270 7365 206f     ....Estou preso 
80009084:	7161 6975 2e32 2e2e 000a 0000 6174 6b73     aqui2.......task
80009094:	6c53 746f 203a 0000 6920 206e 6874 2065     Slot: .. in the 
800090a4:	4950 4550 7320 6f6c 2074 0000 6441 6964     PIPE slot ..Addi
800090b4:	676e 6120 6d20 6773 7420 206f 6174 6b73     ng a msg to task
800090c4:	0020 0000 7266 6d6f 6120 7070 203a 0000      ...from app: ..
800090d4:	3e3e 3e3e 413e 6863 6965 6120 7571 2069     >>>>>Achei aqui 
800090e4:	6f6e 7020 6e65 6964 676e 0a21 0000 0000     no pending!.....
800090f4:	7345 6f74 2075 7270 7365 206f 7161 6975     Estou preso aqui
80009104:	2e33 2e2e 000a 0000 7345 6f74 2075 7270     3.......Estou pr
80009114:	7365 206f 7161 6975 2e34 2e2e 000a 0000     eso aqui4.......
80009124:	7345 6570 6172 646e 206f 654d 736e 6761     Esperando Mensag
80009134:	6d65 0a21 0000 0000 654d 736e 6761 6d65     em!.....Mensagem
80009144:	5220 6365 6265 6469 2161 000a 0a0d 7246      Recebida!....Fr
80009154:	6565 5452 534f 4520 6178 706d 656c 0a0d     eeRTOS Example..
80009164:	0000 0000 200a 6843 6f72 6f6e 2073 6c70     ..... Chronos pl
80009174:	7461 6f66 6d72 6920 696e 6974 6c61 7a69     atform initializ
80009184:	6e69 2e67 2e2e 0a20 0000 0000 200a 6854     ing... ...... Th
80009194:	7369 7420 7265 696d 616e 206c 6562 6f6c     is terminal belo
800091a4:	676e 2073 6f74 7420 6568 6120 6464 6572     ngs to the addre
800091b4:	7373 203a 0000 0000 000a 0000 5852 545f     ss: ........RX_T
800091c4:	5341 004b 5854 545f 5341 004b 4d54 5f52     ASK.TX_TASK.TMR_
800091d4:	4154 4b53 0000 0000 200a 6854 7369 7020     TASK..... This p
800091e4:	6f72 6563 7373 726f 6920 2073 6874 2065     rocessor is the 
800091f4:	6c47 626f 6c61 4d20 7361 6574 3a72 0a20     Global Master: .
80009204:	0000 0000 6c47 626f 6c61 614d 7473 7265     ....GlobalMaster
80009214:	0000 0000 200a 6854 7369 7020 6f72 6563     ..... This proce
80009224:	7373 726f 6920 2073 2061 6c53 7661 3a65     ssor is a Slave:
80009234:	0a20 0000 5852 6920 746e 7265 7572 7470      ...RX interrupt
80009244:	6f69 206e 6163 6374 6568 0a64 0000 0000     ion catched.....
80009254:	4552 4f50 4953 4f54 5952 415f 5050 495f     REPOSITORY_APP_I
80009264:	464e 0a4f 0000 0000 4e31 5f49 5852 4420     NFO.....1NI_RX D
80009274:	4e4f 2145 000a 0000 4154 4b53 415f 4c4c     ONE!....TASK_ALL
80009284:	434f 5441 4f49 5f4e 4553 444e 000a 0000     OCATION_SEND....
80009294:	6154 6b73 7320 6f6c 3a74 0020 6154 6b73     Task slot: .Task
800092a4:	7320 6f6c 2074 6154 6b73 6441 7264 203a      slot TaskAddr: 
800092b4:	0000 0000 4e32 5f49 5852 4420 4e4f 2145     ....2NI_RX DONE!
800092c4:	000a 0000 7266 6d6f 6120 7070 696c 6163     ....from applica
800092d4:	6974 6e6f 0020 0000 4946 494e 4853 4445     tion ...FINISHED
800092e4:	203a 6154 6b73 0020 4e33 5f49 5852 4420     : Task .3NI_RX D
800092f4:	4e4f 2145 000a 0000 4154 4b53 415f 4c4c     ONE!....TASK_ALL
80009304:	434f 5441 4f49 5f4e 4946 494e 4853 4445     OCATION_FINISHED
80009314:	000a 0000 4e34 5f49 5852 4420 4e4f 2145     ....4NI_RX DONE!
80009324:	000a 0000 4154 4b53 415f 4c4c 434f 5441     ....TASK_ALLOCAT
80009334:	4f49 5f4e 5553 4343 5345 0a53 0000 0000     ION_SUCCESS.....
80009344:	4e35 5f49 5852 4420 4e4f 2145 000a 0000     5NI_RX DONE!....
80009354:	6843 6765 756f 7520 206d 4154 4b53 535f     Chegou um TASK_S
80009364:	4154 5452 0a21 0000 4e36 5f49 5852 4420     TART!...6NI_RX D
80009374:	4e4f 2145 000a 0000 6843 6765 756f 7520     ONE!....Chegou u
80009384:	206d 4154 4b53 525f 4e55 0a21 0000 0000     m TASK_RUN!.....
80009394:	6620 6f72 206d 7061 2070 0000 7453 7261      from app ..Star
800093a4:	6974 676e 5420 7361 206b 0000 6174 6b73     ting Task ..task
800093b4:	6c53 746f 7220 6e75 203a 0000 4e37 5f49     Slot run: ..7NI_
800093c4:	5852 4420 4e4f 2145 000a 0000 6154 6b73     RX DONE!....Task
800093d4:	203a 0000 6843 6765 756f 7520 206d 656d     : ..Chegou um me
800093e4:	7373 6761 2065 6572 7571 7365 2174 4120     ssage request! A
800093f4:	7070 203a 0000 0000 654d 736e 6761 6d65     pp: ....Mensagem
80009404:	6e20 a3c3 206f 6e65 6f63 746e 6172 6164      n..o encontrada
80009414:	202c 6461 6369 6f69 616e 646e 206f 6f61     , adicionando ao
80009424:	5020 6e65 6964 676e 6552 2171 000a 0000      PendingReq!....
80009434:	654d 736e 6761 6d65 6520 636e 6e6f 7274     Mensagem encontr
80009444:	6461 2061 6f6e 7020 7069 2165 000a 0000     ada no pipe!....
80009454:	4e38 5f49 5852 4420 4e4f 2145 000a 0000     8NI_RX DONE!....
80009464:	6554 206d 6d75 2061 656d 736e 6761 6d65     Tem uma mensagem
80009474:	6320 6568 6167 646e 2e6f 2e2e 000a 0000      chegando.......
80009484:	4e39 5f49 5852 4420 4e4f 2145 000a 0000     9NI_RX DONE!....
80009494:	3031 494e 525f 2058 4f44 454e 0a21 0000     10NI_RX DONE!...
800094a4:	6552 6563 6562 646e 206f 6170 6f63 6574     Recebendo pacote
800094b4:	6420 2065 6574 706d 7265 7461 7275 0061      de temperatura.
800094c4:	3131 494e 525f 2058 4f44 454e 0a21 0000     11NI_RX DONE!...
800094d4:	6574 706d 203a 0000 6570 0000 3231 494e     temp: ..pe..12NI
800094e4:	525f 2058 4f44 454e 0a21 0000 3331 494e     _RX DONE!...13NI
800094f4:	525f 2058 4f48 444c 0a21 0000 5245 4f52     _RX HOLD!...ERRO
80009504:	2052 7845 6574 6e72 6c61 325f 495f 5152     R External_2_IRQ
80009514:	6148 646e 656c 2072 6e55 6e6b 776f 2d6e     Handler Unknown-
80009524:	6553 7672 6369 2065 0000 0000 3431 494e     Service ....14NI
80009534:	525f 2058 4f44 454e 0a21 0000 5854 6920     _RX DONE!...TX i
80009544:	746e 7265 7572 7470 6f69 206e 6163 6374     nterruption catc
80009554:	6568 0a64 0000 0000 6c47 626f 6c61 614d     hed.....GlobalMa
80009564:	7473 7265 6341 6974 6576 0000 4720 6f6c     sterActive.. Glo
80009574:	6162 4d6c 7361 6574 5272 756f 6974 656e     balMasterRoutine
80009584:	2e2e 0d2e 000a 0000 0000 0000               ............
