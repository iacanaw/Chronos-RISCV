
miv-rv32im-freertos-port-test.elf:     file format elf32-littleriscv
miv-rv32im-freertos-port-test.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x80000000

Program Header:
    LOAD off    0x00001000 vaddr 0x80000000 paddr 0x80000000 align 2**12
         filesz 0x00003450 memsz 0x0003c5a0 flags rwx

Sections:
Idx Name           Size      VMA       LMA       File off  Algn  Flags
  0 .text          00003350  80000000  80000000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .sdata         00000020  80003350  80003350  00004350  2**4  CONTENTS, ALLOC, LOAD, DATA
  2 .data          000000e0  80003370  80003370  00004370  2**4  CONTENTS, ALLOC, LOAD, DATA
  3 .sbss          00000070  80003450  80003450  00004450  2**4  ALLOC
  4 .bss           000190e0  800034c0  800034c0  00004450  2**4  ALLOC
  5 .heap          00010000  8001c5a0  8001c5a0  00004450  2**4  ALLOC
  6 .stack         00010000  8002c5a0  8002c5a0  00004450  2**4  ALLOC
  7 .debug_line    00007978  00000000  00000000  00004450  2**0  CONTENTS, READONLY, DEBUGGING
  8 .debug_info    00009d0f  00000000  00000000  0000bdc8  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev  00001d2c  00000000  00000000  00015ad7  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000006e8  00000000  00000000  00017808  2**3  CONTENTS, READONLY, DEBUGGING
 11 .debug_str     00011e29  00000000  00000000  00017ef0  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges  000005f8  00000000  00000000  00029d19  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro   00004cf7  00000000  00000000  0002a311  2**0  CONTENTS, READONLY, DEBUGGING
 14 .comment       00000039  00000000  00000000  0002f008  2**0  CONTENTS, READONLY
 15 .debug_frame   000019a0  00000000  00000000  0002f044  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
80000000 l    d  .text	00000000 .text
80003350 l    d  .sdata	00000000 .sdata
80003370 l    d  .data	00000000 .data
80003450 l    d  .sbss	00000000 .sbss
800034c0 l    d  .bss	00000000 .bss
8001c5a0 l    d  .heap	00000000 .heap
8002c5a0 l    d  .stack	00000000 .stack
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./riscv_hal/entry.o
8000000c l       .text	00000000 handle_reset
80000004 l       .text	00000000 nmi_vector
80000008 l       .text	00000000 trap_vector
80000030 l       .text	00000000 trap_entry
00000000 l    df *ABS*	00000000 init.c
80000160 l     F .text	00000050 zero_section
00000000 l    df *ABS*	00000000 riscv_hal.c
80000238 l     F .text	000000b8 PLIC_DisableIRQ
800002f0 l     F .text	00000044 PLIC_ClaimIRQ
80000334 l     F .text	0000004c PLIC_CompleteIRQ
80003450 l     O .sbss	00000008 g_systick_increment
00000000 l    df *ABS*	00000000 riscv_hal_stubs.c
00000000 l    df *ABS*	00000000 syscall.c
80003458 l     O .sbss	00000008 g_stdio_uart
80003460 l     O .sbss	00000004 g_stdio_uart_init_done
80000b80 l     F .text	00000030 stub
00000000 l    df *ABS*	00000000 core_uart_apb.c
00000000 l    df *ABS*	00000000 heap_2.c
800034c0 l     O .bss	00019000 ucHeap
80003464 l     O .sbss	00000008 xStart
8000346c l     O .sbss	00000008 xEnd
80003350 l     O .sdata	00000004 xFreeBytesRemaining
80003474 l     O .sbss	00000004 xHeapHasBeenInitialised.2777
80001294 l     F .text	00000074 prvHeapInit
00000000 l    df *ABS*	00000000 port.c
80001308 l     F .text	0000004c raise_soft_interrupt
80003354 l     O .sdata	00000004 uxCriticalNesting
80003358 l     O .sdata	00000004 mtime
8000335c l     O .sdata	00000004 mtimecmp
800013c8 l     F .text	000000cc prvSetNextTimerInterrupt
80001560 l     F .text	0000002c prvTaskExitError
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 string.c
00000000 l    df *ABS*	00000000 tasks.c
8001c4c0 l     O .bss	00000064 pxReadyTasksLists
8001c524 l     O .bss	00000014 xDelayedTaskList1
8001c538 l     O .bss	00000014 xDelayedTaskList2
80003480 l     O .sbss	00000004 pxDelayedTaskList
80003484 l     O .sbss	00000004 pxOverflowDelayedTaskList
8001c54c l     O .bss	00000014 xPendingReadyList
8001c560 l     O .bss	00000014 xTasksWaitingTermination
80003488 l     O .sbss	00000004 uxTasksDeleted
8001c574 l     O .bss	00000014 xSuspendedTaskList
8000348c l     O .sbss	00000004 uxCurrentNumberOfTasks
80003490 l     O .sbss	00000004 xTickCount
80003494 l     O .sbss	00000004 uxTopReadyPriority
80003498 l     O .sbss	00000004 xSchedulerRunning
8000349c l     O .sbss	00000004 uxPendedTicks
800034a0 l     O .sbss	00000004 xYieldPending
800034a4 l     O .sbss	00000004 xNumOfOverflows
800034a8 l     O .sbss	00000004 uxTaskNumber
800034ac l     O .sbss	00000004 xNextTaskUnblockTime
800034b0 l     O .sbss	00000004 uxSchedulerSuspended
8000279c l     F .text	000000c0 prvAllocateTCBAndStack
8000247c l     F .text	00000138 prvInitialiseTCBVariables
800025b4 l     F .text	000000c0 prvInitialiseTaskLists
8000289c l     F .text	00000060 prvResetNextTaskUnblockTime
80002714 l     F .text	00000088 prvAddCurrentTaskToDelayedList
80002448 l     F .text	00000034 prvIdleTask
80002674 l     F .text	000000a0 prvCheckTasksWaitingTermination
8000285c l     F .text	00000040 prvDeleteTCB
00000000 l    df *ABS*	00000000 main.c
800028fc l     F .text	000000d0 PLIC_init
800029cc l     F .text	000000b4 PLIC_EnableIRQ
80002de0 l     F .text	00000124 vUartTestTask1
80002f04 l     F .text	000000b8 vUartTestTask2
00000000 l    df *ABS*	00000000 itoa.c
00000000 l    df *ABS*	00000000 syswrite.c
00000000 l    df *ABS*	00000000 utoa.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 impure.c
800033f0 l     O .data	00000060 impure_data
80001388 g     F .text	00000040 vPortExitCritical
00010000 g       *ABS*	00000000 STACK_SIZE
80000758  w    F .text	00000020 External_11_IRQHandler
80003b50 g       .sdata	00000000 __global_pointer$
80003370 g       *ABS*	00000000 __data_load
80001620 g     F .text	000000cc SysTick_Handler
80000698  w    F .text	00000020 External_5_IRQHandler
80000d60 g       .text	00000000 HW_get_8bit_reg_field
8000347c g     O .sbss	00000004 pxCurrentTCB
80003450 g       .sbss	00000000 __sbss_start
80002a80 g     F .text	00000090 Chronos_init
8001c588 g     O .bss	00000004 errno
80000c98 g       .text	00000000 HW_set_32bit_reg
80000878  w    F .text	00000020 External_20_IRQHandler
800016ec g     F .text	00000044 xPortStartScheduler
800003e8 g     F .text	00000024 __enable_irq
80001ab4 g     F .text	000000cc memcpy
80001cb8 g     F .text	0000021c xTaskGenericCreate
80003350 g       .sdata	00000000 __sdata_start
800011c8 g     F .text	000000cc vPortFree
8001c58c g     O .bss	00000008 g_uart
80000d38 g       .text	00000000 HW_set_8bit_reg_field
80000938  w    F .text	00000020 External_26_IRQHandler
8000056c g     F .text	000000cc handle_trap
800018c0 g     F .text	00000088 vListInsertEnd
00080000 g       *ABS*	00000000 RAM_SIZE
80000738  w    F .text	00000020 External_10_IRQHandler
80003024 g     F .text	00000004 itoa
80002b80 g     F .text	0000003c printi
80001898 g     F .text	00000028 vListInitialiseItem
800009b8  w    F .text	00000020 External_30_IRQHandler
80000818  w    F .text	00000020 External_17_IRQHandler
8002c5a0 g       .heap	00000000 _heap_end
80000b30 g     F .text	00000050 _isatty
8001c5a0 g       .bss	00000000 __bss_end
80000fec g     F .text	000001dc pvPortMalloc
800001b0 g     F .text	0000006c _init
80001834 g     F .text	00000064 vListInitialise
80000d28 g       .text	00000000 HW_set_8bit_reg
80000d30 g       .text	00000000 HW_get_8bit_reg
800034c0 g       .sbss	00000000 __sbss_end
80000ca8 g       .text	00000000 HW_set_32bit_reg_field
80003028 g     F .text	0000001c write
80002db0 g     F .text	00000014 vApplicationMallocFailedHook
80000918  w    F .text	00000020 External_25_IRQHandler
8003c5a0 g       .stack	00000000 __stack_top
80000998  w    F .text	00000020 External_29_IRQHandler
80000f3c g     F .text	000000b0 UART_polled_tx_string
80002fbc g     F .text	00000068 __itoa
800009f8 g     F .text	000000e8 write_hex
80000798  w    F .text	00000020 External_13_IRQHandler
800003b4 g     F .text	00000034 External_2_IRQHandler
00010000 g       *ABS*	00000000 HEAP_SIZE
80000778  w    F .text	00000020 External_12_IRQHandler
80000e88 g     F .text	000000b4 UART_send
80002c10 g     F .text	00000058 SendRaw
80000000 g       .text	00000000 _start
80001fe8 g     F .text	00000028 vTaskSuspendAll
8000040c g     F .text	000000a8 handle_m_timer_interrupt
80002b10 g     F .text	00000070 prints
80001a1c g     F .text	00000098 uxListRemove
80002c68 g     F .text	0000007c NI_enable_irq
80003350 g       *ABS*	00000000 __sdata_load
80003450 g       .data	00000000 __data_end
8000235c g     F .text	000000ec vTaskSwitchContext
80000838  w    F .text	00000020 External_18_IRQHandler
80000cd0 g       .text	00000000 HW_get_32bit_reg_field
800008b8  w    F .text	00000020 External_22_IRQHandler
800007d8  w    F .text	00000020 External_15_IRQHandler
8000180c g     F .text	00000028 vPortYield
80000000 g       *ABS*	00000000 RAM_START_ADDRESS
80003044 g     F .text	000000c8 __utoa
800034c0 g       .bss	00000000 __bss_start
800007f8  w    F .text	00000020 External_16_IRQHandler
80001b80 g     F .text	000000e8 memset
80002ce4 g     F .text	000000cc main
80001948 g     F .text	000000d4 vListInsert
80000978  w    F .text	00000020 External_28_IRQHandler
80000ce8 g       .text	00000000 HW_get_16bit_reg
80003370 g       .sdata	00000000 __sdata_end
8002c5a0 g       .heap	00000000 __heap_end
800007b8  w    F .text	00000020 External_14_IRQHandler
8000021c g     F .text	0000001c _fini
80002010 g     F .text	00000160 xTaskResumeAll
80001f58 g     F .text	00000090 vTaskStartScheduler
80003370 g     O .data	00000080 ext_irq_handler_table
8000310c g     F .text	00000054 _write_r
80000cf0 g       .text	00000000 HW_set_16bit_reg_field
80003360 g     O .sdata	00000004 _impure_ptr
8002c5a0 g       .stack	00000000 __stack_bottom
80001730 g     F .text	000000dc Software_IRQHandler
80000958  w    F .text	00000020 External_27_IRQHandler
800006f8  w    F .text	00000020 External_8_IRQHandler
80000718  w    F .text	00000020 External_9_IRQHandler
8001c5a0 g       .heap	00000000 __heap_start
80000638  w    F .text	00000020 Invalid_IRQHandler
80000658  w    F .text	00000020 External_3_IRQHandler
80002170 g     F .text	000001ec xTaskIncrementTick
80003478 g     O .sbss	00000004 g_startscheduler
80002be8 g     F .text	00000028 getYpos
80000858  w    F .text	00000020 External_19_IRQHandler
80000bb0 g     F .text	000000e8 _write
80002bbc g     F .text	0000002c getXpos
8001c5a0 g       .bss	00000000 _end
80001494 g     F .text	000000cc vPortSetupTimer
80001ed4 g     F .text	00000084 vTaskDelay
80000d70 g     F .text	00000118 UART_init
80000ca0 g       .text	00000000 HW_get_32bit_reg
80000ae0 g     F .text	00000050 _exit
80000ce0 g       .text	00000000 HW_set_16bit_reg
80001c68 g     F .text	00000050 strlen
8000158c g     F .text	00000094 pxPortInitialiseStack
80000380 g     F .text	00000034 External_1_IRQHandler
800006b8  w    F .text	00000020 External_6_IRQHandler
800009d8  w    F .text	00000020 External_31_IRQHandler
80001354 g     F .text	00000034 vPortEnterCritical
80003370 g       .data	00000000 __data_start
80000898  w    F .text	00000020 External_21_IRQHandler
80000530 g     F .text	0000003c handle_m_soft_interrupt
800004b4 g     F .text	0000007c handle_m_ext_interrupt
80000d18 g       .text	00000000 HW_get_16bit_reg_field
800008d8  w    F .text	00000020 External_23_IRQHandler
800008f8  w    F .text	00000020 External_24_IRQHandler
80000678  w    F .text	00000020 External_4_IRQHandler
800006d8  w    F .text	00000020 External_7_IRQHandler
80002dc4 g     F .text	0000001c vApplicationIdleHook



Disassembly of section .text:

80000000 <_start>:
_start():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:30

  .section      .text.entry
  .globl _start

_start:
  j handle_reset
80000000:	00c0006f          	j	8000000c <handle_reset>

80000004 <nmi_vector>:
nmi_vector():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:33

nmi_vector:
  j nmi_vector
80000004:	0000006f          	j	80000004 <nmi_vector>

80000008 <trap_vector>:
trap_vector():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:36

trap_vector:
  j trap_entry
80000008:	0280006f          	j	80000030 <trap_entry>

8000000c <handle_reset>:
handle_reset():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:39

handle_reset:
  la t0, trap_entry
8000000c:	00000297          	auipc	t0,0x0
80000010:	02428293          	addi	t0,t0,36 # 80000030 <trap_entry>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:40
  csrw mtvec, t0
80000014:	30529073          	csrw	mtvec,t0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:41
  csrwi mstatus, 0
80000018:	30005073          	csrwi	mstatus,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:42
  csrwi mie, 0
8000001c:	30405073          	csrwi	mie,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:60
  lui t0, 0x0
  fscsr t0
#endif

  # initialize global pointer
  la gp, __global_pointer$
80000020:	00018193          	mv	gp,gp
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:63

  # initialize stack pointer
  la sp, __stack_top
80000024:	0003c117          	auipc	sp,0x3c
80000028:	57c10113          	addi	sp,sp,1404 # 8003c5a0 <__stack_top>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:66

  # perform the rest of initialization in C
  j _init
8000002c:	1840006f          	j	800001b0 <_init>

80000030 <trap_entry>:
trap_entry():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:70


trap_entry:
  addi sp, sp, -32*REGBYTES
80000030:	f8010113          	addi	sp,sp,-128
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:72

  SREG x1, 0 * REGBYTES(sp)
80000034:	00112023          	sw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:73
  SREG x2, 1 * REGBYTES(sp)
80000038:	00212223          	sw	sp,4(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:74
  SREG x3, 2 * REGBYTES(sp)
8000003c:	00312423          	sw	gp,8(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:75
  SREG x4, 3 * REGBYTES(sp)
80000040:	00412623          	sw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:76
  SREG x5, 4 * REGBYTES(sp)
80000044:	00512823          	sw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:77
  SREG x6, 5 * REGBYTES(sp)
80000048:	00612a23          	sw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:78
  SREG x7, 6 * REGBYTES(sp)
8000004c:	00712c23          	sw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:79
  SREG x8, 7 * REGBYTES(sp)
80000050:	00812e23          	sw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:80
  SREG x9, 8 * REGBYTES(sp)
80000054:	02912023          	sw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:81
  SREG x10, 9 * REGBYTES(sp)
80000058:	02a12223          	sw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:82
  SREG x11, 10 * REGBYTES(sp)
8000005c:	02b12423          	sw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:83
  SREG x12, 11 * REGBYTES(sp)
80000060:	02c12623          	sw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:84
  SREG x13, 12 * REGBYTES(sp)
80000064:	02d12823          	sw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:85
  SREG x14, 13 * REGBYTES(sp)
80000068:	02e12a23          	sw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:86
  SREG x15, 14 * REGBYTES(sp)
8000006c:	02f12c23          	sw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:87
  SREG x16, 15 * REGBYTES(sp)
80000070:	03012e23          	sw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:88
  SREG x17, 16 * REGBYTES(sp)
80000074:	05112023          	sw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:89
  SREG x18, 17 * REGBYTES(sp)
80000078:	05212223          	sw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:90
  SREG x19, 18 * REGBYTES(sp)
8000007c:	05312423          	sw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:91
  SREG x20, 19 * REGBYTES(sp)
80000080:	05412623          	sw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:92
  SREG x21, 20 * REGBYTES(sp)
80000084:	05512823          	sw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:93
  SREG x22, 21 * REGBYTES(sp)
80000088:	05612a23          	sw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:94
  SREG x23, 22 * REGBYTES(sp)
8000008c:	05712c23          	sw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:95
  SREG x24, 23 * REGBYTES(sp)
80000090:	05812e23          	sw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:96
  SREG x25, 24 * REGBYTES(sp)
80000094:	07912023          	sw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:97
  SREG x26, 25 * REGBYTES(sp)
80000098:	07a12223          	sw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:98
  SREG x27, 26 * REGBYTES(sp)
8000009c:	07b12423          	sw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:99
  SREG x28, 27 * REGBYTES(sp)
800000a0:	07c12623          	sw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:100
  SREG x29, 28 * REGBYTES(sp)
800000a4:	07d12823          	sw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:101
  SREG x30, 29 * REGBYTES(sp)
800000a8:	07e12a23          	sw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:102
  SREG x31, 30 * REGBYTES(sp)
800000ac:	07f12c23          	sw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:105


  csrr t0, mepc
800000b0:	341022f3          	csrr	t0,mepc
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:106
  SREG t0, 31 * REGBYTES(sp)
800000b4:	06512e23          	sw	t0,124(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:108

  csrr a0, mcause
800000b8:	34202573          	csrr	a0,mcause
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:109
  csrr a1, mepc
800000bc:	341025f3          	csrr	a1,mepc
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:110
  mv a2, sp
800000c0:	00010613          	mv	a2,sp
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:111
  jal handle_trap
800000c4:	4a8000ef          	jal	ra,8000056c <handle_trap>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:112
  csrw mepc, a0
800000c8:	34151073          	csrw	mepc,a0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:115

  # Remain in M-mode after mret
  li t0, MSTATUS_MPP
800000cc:	000022b7          	lui	t0,0x2
800000d0:	80028293          	addi	t0,t0,-2048 # 1800 <HEAP_SIZE-0xe800>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:116
  csrs mstatus, t0
800000d4:	3002a073          	csrs	mstatus,t0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:118

  LREG x1, 0 * REGBYTES(sp)
800000d8:	00012083          	lw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:119
  LREG x2, 1 * REGBYTES(sp)
800000dc:	00412103          	lw	sp,4(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:120
  LREG x3, 2 * REGBYTES(sp)
800000e0:	00812183          	lw	gp,8(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:121
  LREG x4, 3 * REGBYTES(sp)
800000e4:	00c12203          	lw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:122
  LREG x5, 4 * REGBYTES(sp)
800000e8:	01012283          	lw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:123
  LREG x6, 5 * REGBYTES(sp)
800000ec:	01412303          	lw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:124
  LREG x7, 6 * REGBYTES(sp)
800000f0:	01812383          	lw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:125
  LREG x8, 7 * REGBYTES(sp)
800000f4:	01c12403          	lw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:126
  LREG x9, 8 * REGBYTES(sp)
800000f8:	02012483          	lw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:127
  LREG x10, 9 * REGBYTES(sp)
800000fc:	02412503          	lw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:128
  LREG x11, 10 * REGBYTES(sp)
80000100:	02812583          	lw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:129
  LREG x12, 11 * REGBYTES(sp)
80000104:	02c12603          	lw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:130
  LREG x13, 12 * REGBYTES(sp)
80000108:	03012683          	lw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:131
  LREG x14, 13 * REGBYTES(sp)
8000010c:	03412703          	lw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:132
  LREG x15, 14 * REGBYTES(sp)
80000110:	03812783          	lw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:133
  LREG x16, 15 * REGBYTES(sp)
80000114:	03c12803          	lw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:134
  LREG x17, 16 * REGBYTES(sp)
80000118:	04012883          	lw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:135
  LREG x18, 17 * REGBYTES(sp)
8000011c:	04412903          	lw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:136
  LREG x19, 18 * REGBYTES(sp)
80000120:	04812983          	lw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:137
  LREG x20, 19 * REGBYTES(sp)
80000124:	04c12a03          	lw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:138
  LREG x21, 20 * REGBYTES(sp)
80000128:	05012a83          	lw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:139
  LREG x22, 21 * REGBYTES(sp)
8000012c:	05412b03          	lw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:140
  LREG x23, 22 * REGBYTES(sp)
80000130:	05812b83          	lw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:141
  LREG x24, 23 * REGBYTES(sp)
80000134:	05c12c03          	lw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:142
  LREG x25, 24 * REGBYTES(sp)
80000138:	06012c83          	lw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:143
  LREG x26, 25 * REGBYTES(sp)
8000013c:	06412d03          	lw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:144
  LREG x27, 26 * REGBYTES(sp)
80000140:	06812d83          	lw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:145
  LREG x28, 27 * REGBYTES(sp)
80000144:	06c12e03          	lw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:146
  LREG x29, 28 * REGBYTES(sp)
80000148:	07012e83          	lw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:147
  LREG x30, 29 * REGBYTES(sp)
8000014c:	07412f03          	lw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:148
  LREG x31, 30 * REGBYTES(sp)
80000150:	07812f83          	lw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:150

  addi sp, sp, 32*REGBYTES
80000154:	08010113          	addi	sp,sp,128
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/entry.S:151
  mret
80000158:	30200073          	mret
8000015c:	0000                	unimp
	...

80000160 <zero_section>:
zero_section():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:47
        ++p_vma;
    }
}

static void zero_section(uint32_t * start, uint32_t * end)
{
80000160:	fd010113          	addi	sp,sp,-48
80000164:	02812623          	sw	s0,44(sp)
80000168:	03010413          	addi	s0,sp,48
8000016c:	fca42e23          	sw	a0,-36(s0)
80000170:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:48
    uint32_t * p_zero = start;
80000174:	fdc42783          	lw	a5,-36(s0)
80000178:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:50
    
    while(p_zero <= end)
8000017c:	0180006f          	j	80000194 <zero_section+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:52
    {
        *p_zero = 0;
80000180:	fec42783          	lw	a5,-20(s0)
80000184:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:53
        ++p_zero;
80000188:	fec42783          	lw	a5,-20(s0)
8000018c:	00478793          	addi	a5,a5,4
80000190:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:50
    while(p_zero <= end)
80000194:	fec42703          	lw	a4,-20(s0)
80000198:	fd842783          	lw	a5,-40(s0)
8000019c:	fee7f2e3          	bleu	a4,a5,80000180 <zero_section+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:55
    }
}
800001a0:	00000013          	nop
800001a4:	02c12403          	lw	s0,44(sp)
800001a8:	03010113          	addi	sp,sp,48
800001ac:	00008067          	ret

800001b0 <_init>:
_init():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:58

void _init(void)
{
800001b0:	fe010113          	addi	sp,sp,-32
800001b4:	00112e23          	sw	ra,28(sp)
800001b8:	00812c23          	sw	s0,24(sp)
800001bc:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:60
    extern int main(int, char**);
    const char *argv0 = "hello";
800001c0:	800037b7          	lui	a5,0x80003
800001c4:	16078793          	addi	a5,a5,352 # 80003160 <__stack_top+0xfffc6bc0>
800001c8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:61
    char *argv[] = {(char *)argv0, NULL, NULL};
800001cc:	fec42783          	lw	a5,-20(s0)
800001d0:	fef42023          	sw	a5,-32(s0)
800001d4:	fe042223          	sw	zero,-28(s0)
800001d8:	fe042423          	sw	zero,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:66

// Imperas - this is loaded directly by simulator so must not be copied
//    copy_section(&__sdata_load, &__sdata_start, &__sdata_end);
//    copy_section(&__data_load, &__data_start, &__data_end);
    zero_section(&__sbss_start, &__sbss_end);
800001dc:	97018593          	addi	a1,gp,-1680 # 800034c0 <__sbss_end>
800001e0:	90018513          	addi	a0,gp,-1792 # 80003450 <__data_end>
800001e4:	f7dff0ef          	jal	ra,80000160 <zero_section>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:67
    zero_section(&__bss_start, &__bss_end);
800001e8:	8001c7b7          	lui	a5,0x8001c
800001ec:	5a078593          	addi	a1,a5,1440 # 8001c5a0 <__stack_top+0xfffe0000>
800001f0:	97018513          	addi	a0,gp,-1680 # 800034c0 <__sbss_end>
800001f4:	f6dff0ef          	jal	ra,80000160 <zero_section>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:69
    
    main(1, argv);
800001f8:	fe040793          	addi	a5,s0,-32
800001fc:	00078593          	mv	a1,a5
80000200:	00100513          	li	a0,1
80000204:	2e1020ef          	jal	ra,80002ce4 <main>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:70
}
80000208:	00000013          	nop
8000020c:	01c12083          	lw	ra,28(sp)
80000210:	01812403          	lw	s0,24(sp)
80000214:	02010113          	addi	sp,sp,32
80000218:	00008067          	ret

8000021c <_fini>:
_fini():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:75

/* Function called after main() finishes */
void
_fini()
{
8000021c:	ff010113          	addi	sp,sp,-16
80000220:	00812623          	sw	s0,12(sp)
80000224:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/init.c:76
}
80000228:	00000013          	nop
8000022c:	00c12403          	lw	s0,12(sp)
80000230:	01010113          	addi	sp,sp,16
80000234:	00008067          	ret

80000238 <PLIC_DisableIRQ>:
PLIC_DisableIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:174
 * 	If you wish to disable the external interrupt while the interrupt handler
 * 	for that external interrupt is executing then you must use the return value
 * 	EXT_IRQ_DISABLE to return from the extern interrupt handler.
 */
static inline void PLIC_DisableIRQ(IRQn_Type IRQn)
{
80000238:	fd010113          	addi	sp,sp,-48
8000023c:	02812623          	sw	s0,44(sp)
80000240:	03010413          	addi	s0,sp,48
80000244:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:175
    unsigned long hart_id = read_csr(mhartid);
80000248:	f14027f3          	csrr	a5,mhartid
8000024c:	fef42623          	sw	a5,-20(s0)
80000250:	fec42783          	lw	a5,-20(s0)
80000254:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:176
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
80000258:	40000737          	lui	a4,0x40000
8000025c:	fdc42783          	lw	a5,-36(s0)
80000260:	0057d793          	srli	a5,a5,0x5
80000264:	fe842683          	lw	a3,-24(s0)
80000268:	00569693          	slli	a3,a3,0x5
8000026c:	00f686b3          	add	a3,a3,a5
80000270:	000017b7          	lui	a5,0x1
80000274:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80000278:	00f687b3          	add	a5,a3,a5
8000027c:	00279793          	slli	a5,a5,0x2
80000280:	00f707b3          	add	a5,a4,a5
80000284:	0007a783          	lw	a5,0(a5)
80000288:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:178

    current &= ~((uint32_t)1 << (IRQn % 32));
8000028c:	fdc42783          	lw	a5,-36(s0)
80000290:	01f7f793          	andi	a5,a5,31
80000294:	00100713          	li	a4,1
80000298:	00f717b3          	sll	a5,a4,a5
8000029c:	fff7c793          	not	a5,a5
800002a0:	fe442703          	lw	a4,-28(s0)
800002a4:	00f777b3          	and	a5,a4,a5
800002a8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:180

    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
800002ac:	40000737          	lui	a4,0x40000
800002b0:	fdc42783          	lw	a5,-36(s0)
800002b4:	0057d793          	srli	a5,a5,0x5
800002b8:	fe842683          	lw	a3,-24(s0)
800002bc:	00569693          	slli	a3,a3,0x5
800002c0:	00f686b3          	add	a3,a3,a5
800002c4:	000017b7          	lui	a5,0x1
800002c8:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
800002cc:	00f687b3          	add	a5,a3,a5
800002d0:	00279793          	slli	a5,a5,0x2
800002d4:	00f707b3          	add	a5,a4,a5
800002d8:	fe442703          	lw	a4,-28(s0)
800002dc:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:181
}
800002e0:	00000013          	nop
800002e4:	02c12403          	lw	s0,44(sp)
800002e8:	03010113          	addi	sp,sp,48
800002ec:	00008067          	ret

800002f0 <PLIC_ClaimIRQ>:
PLIC_ClaimIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:205

/*==============================================================================
 * The function PLIC_ClaimIRQ() claims the interrupt from the PLIC controller.
 */
static inline uint32_t PLIC_ClaimIRQ(void)
{
800002f0:	fe010113          	addi	sp,sp,-32
800002f4:	00812e23          	sw	s0,28(sp)
800002f8:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:206
    unsigned long hart_id = read_csr(mhartid);
800002fc:	f14027f3          	csrr	a5,mhartid
80000300:	fef42623          	sw	a5,-20(s0)
80000304:	fec42783          	lw	a5,-20(s0)
80000308:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:208

    return PLIC->TARGET[hart_id].CLAIM_COMPLETE;
8000030c:	40000737          	lui	a4,0x40000
80000310:	fe842783          	lw	a5,-24(s0)
80000314:	20078793          	addi	a5,a5,512
80000318:	00c79793          	slli	a5,a5,0xc
8000031c:	00f707b3          	add	a5,a4,a5
80000320:	0047a783          	lw	a5,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:209
}
80000324:	00078513          	mv	a0,a5
80000328:	01c12403          	lw	s0,28(sp)
8000032c:	02010113          	addi	sp,sp,32
80000330:	00008067          	ret

80000334 <PLIC_CompleteIRQ>:
PLIC_CompleteIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:216
/*==============================================================================
 * The function PLIC_CompleteIRQ() indicates to the PLIC controller the interrupt
 * is processed and claim is complete.
 */
static inline void PLIC_CompleteIRQ(uint32_t source)
{
80000334:	fd010113          	addi	sp,sp,-48
80000338:	02812623          	sw	s0,44(sp)
8000033c:	03010413          	addi	s0,sp,48
80000340:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:217
    unsigned long hart_id = read_csr(mhartid);
80000344:	f14027f3          	csrr	a5,mhartid
80000348:	fef42623          	sw	a5,-20(s0)
8000034c:	fec42783          	lw	a5,-20(s0)
80000350:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:219

    PLIC->TARGET[hart_id].CLAIM_COMPLETE = source;
80000354:	40000737          	lui	a4,0x40000
80000358:	fe842783          	lw	a5,-24(s0)
8000035c:	20078793          	addi	a5,a5,512
80000360:	00c79793          	slli	a5,a5,0xc
80000364:	00f707b3          	add	a5,a4,a5
80000368:	fdc42703          	lw	a4,-36(s0)
8000036c:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:220
}
80000370:	00000013          	nop
80000374:	02c12403          	lw	s0,44(sp)
80000378:	03010113          	addi	sp,sp,48
8000037c:	00008067          	ret

80000380 <External_1_IRQHandler>:
External_1_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:30

/*------------------------------------------------------------------------------
 * 
 */
uint8_t Invalid_IRQHandler(void);
uint8_t External_1_IRQHandler(void){
80000380:	ff010113          	addi	sp,sp,-16
80000384:	00112623          	sw	ra,12(sp)
80000388:	00812423          	sw	s0,8(sp)
8000038c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:31
    prints("INT1\n");
80000390:	800037b7          	lui	a5,0x80003
80000394:	16878513          	addi	a0,a5,360 # 80003168 <__stack_top+0xfffc6bc8>
80000398:	778020ef          	jal	ra,80002b10 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:32
    return 0;
8000039c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:33
}
800003a0:	00078513          	mv	a0,a5
800003a4:	00c12083          	lw	ra,12(sp)
800003a8:	00812403          	lw	s0,8(sp)
800003ac:	01010113          	addi	sp,sp,16
800003b0:	00008067          	ret

800003b4 <External_2_IRQHandler>:
External_2_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:34
uint8_t External_2_IRQHandler(void){
800003b4:	ff010113          	addi	sp,sp,-16
800003b8:	00112623          	sw	ra,12(sp)
800003bc:	00812423          	sw	s0,8(sp)
800003c0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:35
    prints("INT2\n");
800003c4:	800037b7          	lui	a5,0x80003
800003c8:	17078513          	addi	a0,a5,368 # 80003170 <__stack_top+0xfffc6bd0>
800003cc:	744020ef          	jal	ra,80002b10 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:36
    return 0;
800003d0:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:37
}
800003d4:	00078513          	mv	a0,a5
800003d8:	00c12083          	lw	ra,12(sp)
800003dc:	00812403          	lw	s0,8(sp)
800003e0:	01010113          	addi	sp,sp,16
800003e4:	00008067          	ret

800003e8 <__enable_irq>:
__enable_irq():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:94

/*------------------------------------------------------------------------------
 * Enabler all interrupts.
 */
void __enable_irq(void)
{
800003e8:	fe010113          	addi	sp,sp,-32
800003ec:	00812e23          	sw	s0,28(sp)
800003f0:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:95
    set_csr(mstatus, MSTATUS_MIE);
800003f4:	300467f3          	csrrsi	a5,mstatus,8
800003f8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:96
}
800003fc:	00000013          	nop
80000400:	01c12403          	lw	s0,28(sp)
80000404:	02010113          	addi	sp,sp,32
80000408:	00008067          	ret

8000040c <handle_m_timer_interrupt>:
handle_m_timer_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:126

/*------------------------------------------------------------------------------
 * RISC-V interrupt handler for machine timer interrupts.
 */
void handle_m_timer_interrupt()
{
8000040c:	fe010113          	addi	sp,sp,-32
80000410:	00112e23          	sw	ra,28(sp)
80000414:	00812c23          	sw	s0,24(sp)
80000418:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:127
    clear_csr(mie, MIP_MTIP);
8000041c:	08000793          	li	a5,128
80000420:	3047b7f3          	csrrc	a5,mie,a5
80000424:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:129

    SysTick_Handler();
80000428:	1f8010ef          	jal	ra,80001620 <SysTick_Handler>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:131

    PRCI->MTIMECMP[read_csr(mhartid)] = PRCI->MTIME + g_systick_increment;
8000042c:	44000737          	lui	a4,0x44000
80000430:	0000c7b7          	lui	a5,0xc
80000434:	00f707b3          	add	a5,a4,a5
80000438:	ffc7a803          	lw	a6,-4(a5) # bffc <HEAP_SIZE-0x4004>
8000043c:	ff87a783          	lw	a5,-8(a5)
80000440:	9001a583          	lw	a1,-1792(gp) # 80003450 <__data_end>
80000444:	9041a603          	lw	a2,-1788(gp) # 80003454 <__data_end+0x4>
80000448:	44000537          	lui	a0,0x44000
8000044c:	f1402773          	csrr	a4,mhartid
80000450:	fee42423          	sw	a4,-24(s0)
80000454:	fe842883          	lw	a7,-24(s0)
80000458:	00b786b3          	add	a3,a5,a1
8000045c:	00068313          	mv	t1,a3
80000460:	00f33333          	sltu	t1,t1,a5
80000464:	00c80733          	add	a4,a6,a2
80000468:	00e307b3          	add	a5,t1,a4
8000046c:	00078713          	mv	a4,a5
80000470:	00068793          	mv	a5,a3
80000474:	00070813          	mv	a6,a4
80000478:	00001737          	lui	a4,0x1
8000047c:	80070713          	addi	a4,a4,-2048 # 800 <HEAP_SIZE-0xf800>
80000480:	00e88733          	add	a4,a7,a4
80000484:	00371713          	slli	a4,a4,0x3
80000488:	00e50733          	add	a4,a0,a4
8000048c:	00f72023          	sw	a5,0(a4)
80000490:	01072223          	sw	a6,4(a4)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:133

    set_csr(mie, MIP_MTIP);
80000494:	08000793          	li	a5,128
80000498:	3047a7f3          	csrrs	a5,mie,a5
8000049c:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:134
}
800004a0:	00000013          	nop
800004a4:	01c12083          	lw	ra,28(sp)
800004a8:	01812403          	lw	s0,24(sp)
800004ac:	02010113          	addi	sp,sp,32
800004b0:	00008067          	ret

800004b4 <handle_m_ext_interrupt>:
handle_m_ext_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:179

/*------------------------------------------------------------------------------
 * 
 */
void handle_m_ext_interrupt()
{
800004b4:	fe010113          	addi	sp,sp,-32
800004b8:	00112e23          	sw	ra,28(sp)
800004bc:	00812c23          	sw	s0,24(sp)
800004c0:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:180
    uint32_t int_num  = PLIC_ClaimIRQ();
800004c4:	e2dff0ef          	jal	ra,800002f0 <PLIC_ClaimIRQ>
800004c8:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:181
    uint8_t disable = EXT_IRQ_KEEP_ENABLED;
800004cc:	fe0405a3          	sb	zero,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:182
    prints("Interrupção detectada handle_m_ext_interrupt!\n");
800004d0:	800037b7          	lui	a5,0x80003
800004d4:	17878513          	addi	a0,a5,376 # 80003178 <__stack_top+0xfffc6bd8>
800004d8:	638020ef          	jal	ra,80002b10 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:183
    disable = ext_irq_handler_table[int_num]();
800004dc:	800037b7          	lui	a5,0x80003
800004e0:	fec42703          	lw	a4,-20(s0)
800004e4:	00271713          	slli	a4,a4,0x2
800004e8:	37078793          	addi	a5,a5,880 # 80003370 <__stack_top+0xfffc6dd0>
800004ec:	00f707b3          	add	a5,a4,a5
800004f0:	0007a783          	lw	a5,0(a5)
800004f4:	000780e7          	jalr	a5
800004f8:	00050793          	mv	a5,a0
800004fc:	fef405a3          	sb	a5,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:185

    PLIC_CompleteIRQ(int_num);
80000500:	fec42503          	lw	a0,-20(s0)
80000504:	e31ff0ef          	jal	ra,80000334 <PLIC_CompleteIRQ>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:187

    if(EXT_IRQ_DISABLE == disable)
80000508:	feb44703          	lbu	a4,-21(s0)
8000050c:	00100793          	li	a5,1
80000510:	00f71663          	bne	a4,a5,8000051c <handle_m_ext_interrupt+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:189
    {
        PLIC_DisableIRQ((IRQn_Type)int_num);
80000514:	fec42503          	lw	a0,-20(s0)
80000518:	d21ff0ef          	jal	ra,80000238 <PLIC_DisableIRQ>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:191
    }
}
8000051c:	00000013          	nop
80000520:	01c12083          	lw	ra,28(sp)
80000524:	01812403          	lw	s0,24(sp)
80000528:	02010113          	addi	sp,sp,32
8000052c:	00008067          	ret

80000530 <handle_m_soft_interrupt>:
handle_m_soft_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:194

void handle_m_soft_interrupt()
{
80000530:	ff010113          	addi	sp,sp,-16
80000534:	00112623          	sw	ra,12(sp)
80000538:	00812423          	sw	s0,8(sp)
8000053c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:195
    Software_IRQHandler();
80000540:	1f0010ef          	jal	ra,80001730 <Software_IRQHandler>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:196
    prints("Interrupção detectada handle_m_soft_interrupt!\n");
80000544:	800037b7          	lui	a5,0x80003
80000548:	1ac78513          	addi	a0,a5,428 # 800031ac <__stack_top+0xfffc6c0c>
8000054c:	5c4020ef          	jal	ra,80002b10 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:199

    /*Clear software interrupt*/
    PRCI->MSIP[0] = 0x00;
80000550:	440007b7          	lui	a5,0x44000
80000554:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:200
}
80000558:	00000013          	nop
8000055c:	00c12083          	lw	ra,12(sp)
80000560:	00812403          	lw	s0,8(sp)
80000564:	01010113          	addi	sp,sp,16
80000568:	00008067          	ret

8000056c <handle_trap>:
handle_trap():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:205
/*------------------------------------------------------------------------------
 * Trap/Interrupt handler
 */
uintptr_t handle_trap(uintptr_t mcause, uintptr_t epc)
{
8000056c:	fe010113          	addi	sp,sp,-32
80000570:	00112e23          	sw	ra,28(sp)
80000574:	00812c23          	sw	s0,24(sp)
80000578:	02010413          	addi	s0,sp,32
8000057c:	fea42623          	sw	a0,-20(s0)
80000580:	feb42423          	sw	a1,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:206
    if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_EXT))
80000584:	fec42783          	lw	a5,-20(s0)
80000588:	0207d263          	bgez	a5,800005ac <handle_trap+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:206 (discriminator 1)
8000058c:	fec42703          	lw	a4,-20(s0)
80000590:	800007b7          	lui	a5,0x80000
80000594:	fff7c793          	not	a5,a5
80000598:	00f77733          	and	a4,a4,a5
8000059c:	00b00793          	li	a5,11
800005a0:	00f71663          	bne	a4,a5,800005ac <handle_trap+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:208
    {
        handle_m_ext_interrupt();
800005a4:	f11ff0ef          	jal	ra,800004b4 <handle_m_ext_interrupt>
800005a8:	0780006f          	j	80000620 <handle_trap+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:210
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_TIMER))
800005ac:	fec42783          	lw	a5,-20(s0)
800005b0:	0207d263          	bgez	a5,800005d4 <handle_trap+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:210 (discriminator 1)
800005b4:	fec42703          	lw	a4,-20(s0)
800005b8:	800007b7          	lui	a5,0x80000
800005bc:	fff7c793          	not	a5,a5
800005c0:	00f77733          	and	a4,a4,a5
800005c4:	00700793          	li	a5,7
800005c8:	00f71663          	bne	a4,a5,800005d4 <handle_trap+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:212
    {
        handle_m_timer_interrupt();
800005cc:	e41ff0ef          	jal	ra,8000040c <handle_m_timer_interrupt>
800005d0:	0500006f          	j	80000620 <handle_trap+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:214
    }
    else if ((mcause & MCAUSE_INT) && ((mcause & MCAUSE_CAUSE)  == IRQ_M_SOFT))
800005d4:	fec42783          	lw	a5,-20(s0)
800005d8:	0207d263          	bgez	a5,800005fc <handle_trap+0x90>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:214 (discriminator 1)
800005dc:	fec42703          	lw	a4,-20(s0)
800005e0:	800007b7          	lui	a5,0x80000
800005e4:	fff7c793          	not	a5,a5
800005e8:	00f77733          	and	a4,a4,a5
800005ec:	00300793          	li	a5,3
800005f0:	00f71663          	bne	a4,a5,800005fc <handle_trap+0x90>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:216
    {
        handle_m_soft_interrupt();
800005f4:	f3dff0ef          	jal	ra,80000530 <handle_m_soft_interrupt>
800005f8:	0280006f          	j	80000620 <handle_trap+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:220
    }
    else
    {
        write(1, "trap\n", 5);
800005fc:	00500613          	li	a2,5
80000600:	800037b7          	lui	a5,0x80003
80000604:	1e078593          	addi	a1,a5,480 # 800031e0 <__stack_top+0xfffc6c40>
80000608:	00100513          	li	a0,1
8000060c:	21d020ef          	jal	ra,80003028 <write>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:221
        _exit(1 + mcause);
80000610:	fec42783          	lw	a5,-20(s0)
80000614:	00178793          	addi	a5,a5,1
80000618:	00078513          	mv	a0,a5
8000061c:	4c4000ef          	jal	ra,80000ae0 <_exit>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:223
    }
    return epc;
80000620:	fe842783          	lw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal.c:224
}
80000624:	00078513          	mv	a0,a5
80000628:	01c12083          	lw	ra,28(sp)
8000062c:	01812403          	lw	s0,24(sp)
80000630:	02010113          	addi	sp,sp,32
80000634:	00008067          	ret

80000638 <Invalid_IRQHandler>:
Invalid_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:37
{
    ;
}

__attribute__((weak))  uint8_t Invalid_IRQHandler(void)
{
80000638:	ff010113          	addi	sp,sp,-16
8000063c:	00812623          	sw	s0,12(sp)
80000640:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:38
    return(0);
80000644:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:39
}
80000648:	00078513          	mv	a0,a5
8000064c:	00c12403          	lw	s0,12(sp)
80000650:	01010113          	addi	sp,sp,16
80000654:	00008067          	ret

80000658 <External_3_IRQHandler>:
External_3_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:52
{
    return(0);
}

__attribute__((weak))  uint8_t External_3_IRQHandler(void)
{
80000658:	ff010113          	addi	sp,sp,-16
8000065c:	00812623          	sw	s0,12(sp)
80000660:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:53
    return(0);
80000664:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:54
}
80000668:	00078513          	mv	a0,a5
8000066c:	00c12403          	lw	s0,12(sp)
80000670:	01010113          	addi	sp,sp,16
80000674:	00008067          	ret

80000678 <External_4_IRQHandler>:
External_4_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:57

__attribute__((weak))  uint8_t External_4_IRQHandler(void)
{
80000678:	ff010113          	addi	sp,sp,-16
8000067c:	00812623          	sw	s0,12(sp)
80000680:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:58
    return(0);
80000684:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:59
}
80000688:	00078513          	mv	a0,a5
8000068c:	00c12403          	lw	s0,12(sp)
80000690:	01010113          	addi	sp,sp,16
80000694:	00008067          	ret

80000698 <External_5_IRQHandler>:
External_5_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:62

__attribute__((weak))  uint8_t External_5_IRQHandler(void)
{
80000698:	ff010113          	addi	sp,sp,-16
8000069c:	00812623          	sw	s0,12(sp)
800006a0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:63
    return(0);
800006a4:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:64
}
800006a8:	00078513          	mv	a0,a5
800006ac:	00c12403          	lw	s0,12(sp)
800006b0:	01010113          	addi	sp,sp,16
800006b4:	00008067          	ret

800006b8 <External_6_IRQHandler>:
External_6_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:67

__attribute__((weak))  uint8_t External_6_IRQHandler(void)
{
800006b8:	ff010113          	addi	sp,sp,-16
800006bc:	00812623          	sw	s0,12(sp)
800006c0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:68
    return(0);
800006c4:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:69
}
800006c8:	00078513          	mv	a0,a5
800006cc:	00c12403          	lw	s0,12(sp)
800006d0:	01010113          	addi	sp,sp,16
800006d4:	00008067          	ret

800006d8 <External_7_IRQHandler>:
External_7_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:72

__attribute__((weak))  uint8_t External_7_IRQHandler(void)
{
800006d8:	ff010113          	addi	sp,sp,-16
800006dc:	00812623          	sw	s0,12(sp)
800006e0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:73
    return(0);
800006e4:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:74
}
800006e8:	00078513          	mv	a0,a5
800006ec:	00c12403          	lw	s0,12(sp)
800006f0:	01010113          	addi	sp,sp,16
800006f4:	00008067          	ret

800006f8 <External_8_IRQHandler>:
External_8_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:77

__attribute__((weak))  uint8_t External_8_IRQHandler(void)
{
800006f8:	ff010113          	addi	sp,sp,-16
800006fc:	00812623          	sw	s0,12(sp)
80000700:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:78
    return(0);
80000704:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:79
}
80000708:	00078513          	mv	a0,a5
8000070c:	00c12403          	lw	s0,12(sp)
80000710:	01010113          	addi	sp,sp,16
80000714:	00008067          	ret

80000718 <External_9_IRQHandler>:
External_9_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:82

__attribute__((weak))  uint8_t External_9_IRQHandler(void)
{
80000718:	ff010113          	addi	sp,sp,-16
8000071c:	00812623          	sw	s0,12(sp)
80000720:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:83
    return(0);
80000724:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:84
}
80000728:	00078513          	mv	a0,a5
8000072c:	00c12403          	lw	s0,12(sp)
80000730:	01010113          	addi	sp,sp,16
80000734:	00008067          	ret

80000738 <External_10_IRQHandler>:
External_10_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:87

__attribute__((weak))  uint8_t External_10_IRQHandler(void)
{
80000738:	ff010113          	addi	sp,sp,-16
8000073c:	00812623          	sw	s0,12(sp)
80000740:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:88
    return(0);
80000744:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:89
}
80000748:	00078513          	mv	a0,a5
8000074c:	00c12403          	lw	s0,12(sp)
80000750:	01010113          	addi	sp,sp,16
80000754:	00008067          	ret

80000758 <External_11_IRQHandler>:
External_11_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:92

__attribute__((weak))  uint8_t External_11_IRQHandler(void)
{
80000758:	ff010113          	addi	sp,sp,-16
8000075c:	00812623          	sw	s0,12(sp)
80000760:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:93
    return(0);
80000764:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:94
}
80000768:	00078513          	mv	a0,a5
8000076c:	00c12403          	lw	s0,12(sp)
80000770:	01010113          	addi	sp,sp,16
80000774:	00008067          	ret

80000778 <External_12_IRQHandler>:
External_12_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:97

__attribute__((weak))  uint8_t External_12_IRQHandler(void)
{
80000778:	ff010113          	addi	sp,sp,-16
8000077c:	00812623          	sw	s0,12(sp)
80000780:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:98
    return(0);
80000784:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:99
}
80000788:	00078513          	mv	a0,a5
8000078c:	00c12403          	lw	s0,12(sp)
80000790:	01010113          	addi	sp,sp,16
80000794:	00008067          	ret

80000798 <External_13_IRQHandler>:
External_13_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:102

__attribute__((weak))  uint8_t External_13_IRQHandler(void)
{
80000798:	ff010113          	addi	sp,sp,-16
8000079c:	00812623          	sw	s0,12(sp)
800007a0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:103
    return(0);
800007a4:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:104
}
800007a8:	00078513          	mv	a0,a5
800007ac:	00c12403          	lw	s0,12(sp)
800007b0:	01010113          	addi	sp,sp,16
800007b4:	00008067          	ret

800007b8 <External_14_IRQHandler>:
External_14_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:107

__attribute__((weak))  uint8_t External_14_IRQHandler(void)
{
800007b8:	ff010113          	addi	sp,sp,-16
800007bc:	00812623          	sw	s0,12(sp)
800007c0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:108
    return(0);
800007c4:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:109
}
800007c8:	00078513          	mv	a0,a5
800007cc:	00c12403          	lw	s0,12(sp)
800007d0:	01010113          	addi	sp,sp,16
800007d4:	00008067          	ret

800007d8 <External_15_IRQHandler>:
External_15_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:112

__attribute__((weak))  uint8_t External_15_IRQHandler(void)
{
800007d8:	ff010113          	addi	sp,sp,-16
800007dc:	00812623          	sw	s0,12(sp)
800007e0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:113
    return(0);
800007e4:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:114
}
800007e8:	00078513          	mv	a0,a5
800007ec:	00c12403          	lw	s0,12(sp)
800007f0:	01010113          	addi	sp,sp,16
800007f4:	00008067          	ret

800007f8 <External_16_IRQHandler>:
External_16_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:117

__attribute__((weak))  uint8_t External_16_IRQHandler(void)
{
800007f8:	ff010113          	addi	sp,sp,-16
800007fc:	00812623          	sw	s0,12(sp)
80000800:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:118
    return(0);
80000804:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:119
}
80000808:	00078513          	mv	a0,a5
8000080c:	00c12403          	lw	s0,12(sp)
80000810:	01010113          	addi	sp,sp,16
80000814:	00008067          	ret

80000818 <External_17_IRQHandler>:
External_17_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:122

__attribute__((weak))  uint8_t External_17_IRQHandler(void)
{
80000818:	ff010113          	addi	sp,sp,-16
8000081c:	00812623          	sw	s0,12(sp)
80000820:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:123
    return(0);
80000824:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:124
}
80000828:	00078513          	mv	a0,a5
8000082c:	00c12403          	lw	s0,12(sp)
80000830:	01010113          	addi	sp,sp,16
80000834:	00008067          	ret

80000838 <External_18_IRQHandler>:
External_18_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:127

__attribute__((weak))  uint8_t External_18_IRQHandler(void)
{
80000838:	ff010113          	addi	sp,sp,-16
8000083c:	00812623          	sw	s0,12(sp)
80000840:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:128
    return(0);
80000844:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:129
}
80000848:	00078513          	mv	a0,a5
8000084c:	00c12403          	lw	s0,12(sp)
80000850:	01010113          	addi	sp,sp,16
80000854:	00008067          	ret

80000858 <External_19_IRQHandler>:
External_19_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:132

__attribute__((weak))  uint8_t External_19_IRQHandler(void)
{
80000858:	ff010113          	addi	sp,sp,-16
8000085c:	00812623          	sw	s0,12(sp)
80000860:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:133
    return(0);
80000864:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:134
}
80000868:	00078513          	mv	a0,a5
8000086c:	00c12403          	lw	s0,12(sp)
80000870:	01010113          	addi	sp,sp,16
80000874:	00008067          	ret

80000878 <External_20_IRQHandler>:
External_20_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:137

__attribute__((weak))  uint8_t External_20_IRQHandler(void)
{
80000878:	ff010113          	addi	sp,sp,-16
8000087c:	00812623          	sw	s0,12(sp)
80000880:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:138
    return(0);
80000884:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:139
}
80000888:	00078513          	mv	a0,a5
8000088c:	00c12403          	lw	s0,12(sp)
80000890:	01010113          	addi	sp,sp,16
80000894:	00008067          	ret

80000898 <External_21_IRQHandler>:
External_21_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:142

__attribute__((weak))  uint8_t External_21_IRQHandler(void)
{
80000898:	ff010113          	addi	sp,sp,-16
8000089c:	00812623          	sw	s0,12(sp)
800008a0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:143
    return(0);
800008a4:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:144
}
800008a8:	00078513          	mv	a0,a5
800008ac:	00c12403          	lw	s0,12(sp)
800008b0:	01010113          	addi	sp,sp,16
800008b4:	00008067          	ret

800008b8 <External_22_IRQHandler>:
External_22_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:147

__attribute__((weak))  uint8_t External_22_IRQHandler(void)
{
800008b8:	ff010113          	addi	sp,sp,-16
800008bc:	00812623          	sw	s0,12(sp)
800008c0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:148
    return(0);
800008c4:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:149
}
800008c8:	00078513          	mv	a0,a5
800008cc:	00c12403          	lw	s0,12(sp)
800008d0:	01010113          	addi	sp,sp,16
800008d4:	00008067          	ret

800008d8 <External_23_IRQHandler>:
External_23_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:152

__attribute__((weak))  uint8_t External_23_IRQHandler(void)
{
800008d8:	ff010113          	addi	sp,sp,-16
800008dc:	00812623          	sw	s0,12(sp)
800008e0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:153
    return(0);
800008e4:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:154
}
800008e8:	00078513          	mv	a0,a5
800008ec:	00c12403          	lw	s0,12(sp)
800008f0:	01010113          	addi	sp,sp,16
800008f4:	00008067          	ret

800008f8 <External_24_IRQHandler>:
External_24_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:157

__attribute__((weak))  uint8_t External_24_IRQHandler(void)
{
800008f8:	ff010113          	addi	sp,sp,-16
800008fc:	00812623          	sw	s0,12(sp)
80000900:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:158
    return(0);
80000904:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:159
}
80000908:	00078513          	mv	a0,a5
8000090c:	00c12403          	lw	s0,12(sp)
80000910:	01010113          	addi	sp,sp,16
80000914:	00008067          	ret

80000918 <External_25_IRQHandler>:
External_25_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:162

__attribute__((weak))  uint8_t External_25_IRQHandler(void)
{
80000918:	ff010113          	addi	sp,sp,-16
8000091c:	00812623          	sw	s0,12(sp)
80000920:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:163
    return(0);
80000924:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:164
}
80000928:	00078513          	mv	a0,a5
8000092c:	00c12403          	lw	s0,12(sp)
80000930:	01010113          	addi	sp,sp,16
80000934:	00008067          	ret

80000938 <External_26_IRQHandler>:
External_26_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:167

__attribute__((weak))  uint8_t External_26_IRQHandler(void)
{
80000938:	ff010113          	addi	sp,sp,-16
8000093c:	00812623          	sw	s0,12(sp)
80000940:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:168
    return(0);
80000944:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:169
}
80000948:	00078513          	mv	a0,a5
8000094c:	00c12403          	lw	s0,12(sp)
80000950:	01010113          	addi	sp,sp,16
80000954:	00008067          	ret

80000958 <External_27_IRQHandler>:
External_27_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:172

__attribute__((weak))  uint8_t External_27_IRQHandler(void)
{
80000958:	ff010113          	addi	sp,sp,-16
8000095c:	00812623          	sw	s0,12(sp)
80000960:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:173
    return(0);
80000964:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:174
}
80000968:	00078513          	mv	a0,a5
8000096c:	00c12403          	lw	s0,12(sp)
80000970:	01010113          	addi	sp,sp,16
80000974:	00008067          	ret

80000978 <External_28_IRQHandler>:
External_28_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:177

__attribute__((weak))  uint8_t External_28_IRQHandler(void)
{
80000978:	ff010113          	addi	sp,sp,-16
8000097c:	00812623          	sw	s0,12(sp)
80000980:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:178
    return(0);
80000984:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:179
}
80000988:	00078513          	mv	a0,a5
8000098c:	00c12403          	lw	s0,12(sp)
80000990:	01010113          	addi	sp,sp,16
80000994:	00008067          	ret

80000998 <External_29_IRQHandler>:
External_29_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:182

__attribute__((weak))  uint8_t External_29_IRQHandler(void)
{
80000998:	ff010113          	addi	sp,sp,-16
8000099c:	00812623          	sw	s0,12(sp)
800009a0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:183
    return(0);
800009a4:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:184
}
800009a8:	00078513          	mv	a0,a5
800009ac:	00c12403          	lw	s0,12(sp)
800009b0:	01010113          	addi	sp,sp,16
800009b4:	00008067          	ret

800009b8 <External_30_IRQHandler>:
External_30_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:187

__attribute__((weak))  uint8_t External_30_IRQHandler(void)
{
800009b8:	ff010113          	addi	sp,sp,-16
800009bc:	00812623          	sw	s0,12(sp)
800009c0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:188
    return(0);
800009c4:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:189
}
800009c8:	00078513          	mv	a0,a5
800009cc:	00c12403          	lw	s0,12(sp)
800009d0:	01010113          	addi	sp,sp,16
800009d4:	00008067          	ret

800009d8 <External_31_IRQHandler>:
External_31_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:192

__attribute__((weak))  uint8_t External_31_IRQHandler(void)
{
800009d8:	ff010113          	addi	sp,sp,-16
800009dc:	00812623          	sw	s0,12(sp)
800009e0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:193
    return(0);
800009e4:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_hal_stubs.c:194
}
800009e8:	00078513          	mv	a0,a5
800009ec:	00c12403          	lw	s0,12(sp)
800009f0:	01010113          	addi	sp,sp,16
800009f4:	00008067          	ret

800009f8 <write_hex>:
write_hex():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:55

char *__env[1] = { 0 };
char **environ = __env;

void write_hex(int fd, uint32_t hex)
{
800009f8:	fd010113          	addi	sp,sp,-48
800009fc:	02112623          	sw	ra,44(sp)
80000a00:	02812423          	sw	s0,40(sp)
80000a04:	03010413          	addi	s0,sp,48
80000a08:	fca42e23          	sw	a0,-36(s0)
80000a0c:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:61
    uint8_t ii;
    uint8_t jj;
    char towrite;
    uint8_t digit;

    write( fd , "0x", 2 );
80000a10:	00200613          	li	a2,2
80000a14:	800037b7          	lui	a5,0x80003
80000a18:	1e878593          	addi	a1,a5,488 # 800031e8 <__stack_top+0xfffc6c48>
80000a1c:	fdc42503          	lw	a0,-36(s0)
80000a20:	608020ef          	jal	ra,80003028 <write>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:63

    for (ii = 8 ; ii > 0; ii--)
80000a24:	00800793          	li	a5,8
80000a28:	fef407a3          	sb	a5,-17(s0)
80000a2c:	0980006f          	j	80000ac4 <write_hex+0xcc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:65
    {
        jj = ii-1;
80000a30:	fef44783          	lbu	a5,-17(s0)
80000a34:	fff78793          	addi	a5,a5,-1
80000a38:	fef40723          	sb	a5,-18(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:66
        digit = ((hex & (0xF << (jj*4))) >> (jj*4));
80000a3c:	fee44783          	lbu	a5,-18(s0)
80000a40:	00279793          	slli	a5,a5,0x2
80000a44:	00f00713          	li	a4,15
80000a48:	00f717b3          	sll	a5,a4,a5
80000a4c:	00078713          	mv	a4,a5
80000a50:	fd842783          	lw	a5,-40(s0)
80000a54:	00f77733          	and	a4,a4,a5
80000a58:	fee44783          	lbu	a5,-18(s0)
80000a5c:	00279793          	slli	a5,a5,0x2
80000a60:	00f757b3          	srl	a5,a4,a5
80000a64:	fef406a3          	sb	a5,-19(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:67
        towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
80000a68:	fed44703          	lbu	a4,-19(s0)
80000a6c:	00900793          	li	a5,9
80000a70:	00e7ee63          	bltu	a5,a4,80000a8c <write_hex+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 1)
80000a74:	fed44783          	lbu	a5,-19(s0)
80000a78:	03078793          	addi	a5,a5,48
80000a7c:	0ff7f793          	andi	a5,a5,255
80000a80:	01879793          	slli	a5,a5,0x18
80000a84:	4187d793          	srai	a5,a5,0x18
80000a88:	0180006f          	j	80000aa0 <write_hex+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 2)
80000a8c:	fed44783          	lbu	a5,-19(s0)
80000a90:	03778793          	addi	a5,a5,55
80000a94:	0ff7f793          	andi	a5,a5,255
80000a98:	01879793          	slli	a5,a5,0x18
80000a9c:	4187d793          	srai	a5,a5,0x18
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:67 (discriminator 4)
80000aa0:	fef40623          	sb	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:68 (discriminator 4)
        write( fd, &towrite, 1);
80000aa4:	fec40793          	addi	a5,s0,-20
80000aa8:	00100613          	li	a2,1
80000aac:	00078593          	mv	a1,a5
80000ab0:	fdc42503          	lw	a0,-36(s0)
80000ab4:	574020ef          	jal	ra,80003028 <write>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 4)
    for (ii = 8 ; ii > 0; ii--)
80000ab8:	fef44783          	lbu	a5,-17(s0)
80000abc:	fff78793          	addi	a5,a5,-1
80000ac0:	fef407a3          	sb	a5,-17(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:63 (discriminator 2)
80000ac4:	fef44783          	lbu	a5,-17(s0)
80000ac8:	f60794e3          	bnez	a5,80000a30 <write_hex+0x38>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:70
    }
}
80000acc:	00000013          	nop
80000ad0:	02c12083          	lw	ra,44(sp)
80000ad4:	02812403          	lw	s0,40(sp)
80000ad8:	03010113          	addi	sp,sp,48
80000adc:	00008067          	ret

80000ae0 <_exit>:
_exit():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:74

               
void _exit(int code)
{
80000ae0:	fd010113          	addi	sp,sp,-48
80000ae4:	02112623          	sw	ra,44(sp)
80000ae8:	02812423          	sw	s0,40(sp)
80000aec:	03010413          	addi	s0,sp,48
80000af0:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:76
#ifdef MSCC_STDIO_THRU_CORE_UART_APB
    const char * message = "\nProgam has exited with code:";
80000af4:	800037b7          	lui	a5,0x80003
80000af8:	1ec78793          	addi	a5,a5,492 # 800031ec <__stack_top+0xfffc6c4c>
80000afc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:78

    write(STDERR_FILENO, message, strlen(message));
80000b00:	fec42503          	lw	a0,-20(s0)
80000b04:	164010ef          	jal	ra,80001c68 <strlen>
80000b08:	00050793          	mv	a5,a0
80000b0c:	00078613          	mv	a2,a5
80000b10:	fec42583          	lw	a1,-20(s0)
80000b14:	00200513          	li	a0,2
80000b18:	510020ef          	jal	ra,80003028 <write>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:79
    write_hex(STDERR_FILENO, code);
80000b1c:	fdc42783          	lw	a5,-36(s0)
80000b20:	00078593          	mv	a1,a5
80000b24:	00200513          	li	a0,2
80000b28:	ed1ff0ef          	jal	ra,800009f8 <write_hex>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:82 (discriminator 1)
#endif

    while (1);
80000b2c:	0000006f          	j	80000b2c <_exit+0x4c>

80000b30 <_isatty>:
_isatty():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:101
    curbrk += incr;
    return curbrk - incr;
}

int _isatty(int fd)
{
80000b30:	fe010113          	addi	sp,sp,-32
80000b34:	00812e23          	sw	s0,28(sp)
80000b38:	02010413          	addi	s0,sp,32
80000b3c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:102
    if (fd == STDOUT_FILENO || fd == STDERR_FILENO)
80000b40:	fec42703          	lw	a4,-20(s0)
80000b44:	00100793          	li	a5,1
80000b48:	00f70863          	beq	a4,a5,80000b58 <_isatty+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:102 (discriminator 1)
80000b4c:	fec42703          	lw	a4,-20(s0)
80000b50:	00200793          	li	a5,2
80000b54:	00f71663          	bne	a4,a5,80000b60 <_isatty+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:104
    {
        return 1;
80000b58:	00100793          	li	a5,1
80000b5c:	0140006f          	j	80000b70 <_isatty+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:107
    }

    errno = EBADF;
80000b60:	8001c7b7          	lui	a5,0x8001c
80000b64:	00900713          	li	a4,9
80000b68:	58e7a423          	sw	a4,1416(a5) # 8001c588 <__stack_top+0xfffdffe8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:108
    return 0;
80000b6c:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:109
}
80000b70:	00078513          	mv	a0,a5
80000b74:	01c12403          	lw	s0,28(sp)
80000b78:	02010113          	addi	sp,sp,32
80000b7c:	00008067          	ret

80000b80 <stub>:
stub():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:112

static int stub(int err)
{
80000b80:	fe010113          	addi	sp,sp,-32
80000b84:	00812e23          	sw	s0,28(sp)
80000b88:	02010413          	addi	s0,sp,32
80000b8c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:113
    errno = err;
80000b90:	8001c7b7          	lui	a5,0x8001c
80000b94:	fec42703          	lw	a4,-20(s0)
80000b98:	58e7a423          	sw	a4,1416(a5) # 8001c588 <__stack_top+0xfffdffe8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:114
    return -1;
80000b9c:	fff00793          	li	a5,-1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:115
}
80000ba0:	00078513          	mv	a0,a5
80000ba4:	01c12403          	lw	s0,28(sp)
80000ba8:	02010113          	addi	sp,sp,32
80000bac:	00008067          	ret

80000bb0 <_write>:
_write():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:226
{
    return stub(ECHILD);
}

ssize_t _write(int fd, const void* ptr, size_t len)
{
80000bb0:	fd010113          	addi	sp,sp,-48
80000bb4:	02112623          	sw	ra,44(sp)
80000bb8:	02812423          	sw	s0,40(sp)
80000bbc:	03010413          	addi	s0,sp,48
80000bc0:	fca42e23          	sw	a0,-36(s0)
80000bc4:	fcb42c23          	sw	a1,-40(s0)
80000bc8:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:229

#ifdef MSCC_STDIO_THRU_CORE_UART_APB
  const uint8_t * current = (const uint8_t *) ptr;
80000bcc:	fd842783          	lw	a5,-40(s0)
80000bd0:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:232
  size_t jj;

  if (_isatty(fd))
80000bd4:	fdc42503          	lw	a0,-36(s0)
80000bd8:	f59ff0ef          	jal	ra,80000b30 <_isatty>
80000bdc:	00050793          	mv	a5,a0
80000be0:	08078c63          	beqz	a5,80000c78 <_write+0xc8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:238
  {
        /*--------------------------------------------------------------------------
        * Initialize the UART driver if it is the first time this function is
        * called.
        */
        if ( !g_stdio_uart_init_done )
80000be4:	9101a783          	lw	a5,-1776(gp) # 80003460 <g_stdio_uart_init_done>
80000be8:	02079063          	bnez	a5,80000c08 <_write+0x58>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:245
            /******************************************************************************
            * Baud value:
            * This value is calculated using the following equation:
            *      BAUD_VALUE = (CLOCK / (16 * BAUD_RATE)) - 1
            *****************************************************************************/
            UART_init( &g_stdio_uart, MSCC_STDIO_UART_BASE_ADDR, ((SYS_CLK_FREQ/(16 * MSCC_STDIO_BAUD_VALUE))-1), (DATA_8_BITS | NO_PARITY));
80000bec:	00100693          	li	a3,1
80000bf0:	02c00613          	li	a2,44
80000bf4:	700015b7          	lui	a1,0x70001
80000bf8:	90818513          	addi	a0,gp,-1784 # 80003458 <g_stdio_uart>
80000bfc:	174000ef          	jal	ra,80000d70 <UART_init>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:246
            g_stdio_uart_init_done = 1;
80000c00:	00100713          	li	a4,1
80000c04:	90e1a823          	sw	a4,-1776(gp) # 80003460 <g_stdio_uart_init_done>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:249
        }

    for (jj = 0; jj < len; jj++)
80000c08:	fe042623          	sw	zero,-20(s0)
80000c0c:	0580006f          	j	80000c64 <_write+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:251
    {
        UART_send(&g_stdio_uart, current + jj, 1);
80000c10:	fe842703          	lw	a4,-24(s0)
80000c14:	fec42783          	lw	a5,-20(s0)
80000c18:	00f707b3          	add	a5,a4,a5
80000c1c:	00100613          	li	a2,1
80000c20:	00078593          	mv	a1,a5
80000c24:	90818513          	addi	a0,gp,-1784 # 80003458 <g_stdio_uart>
80000c28:	260000ef          	jal	ra,80000e88 <UART_send>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:252
        if (current[jj] == '\n')
80000c2c:	fe842703          	lw	a4,-24(s0)
80000c30:	fec42783          	lw	a5,-20(s0)
80000c34:	00f707b3          	add	a5,a4,a5
80000c38:	0007c703          	lbu	a4,0(a5)
80000c3c:	00a00793          	li	a5,10
80000c40:	00f71c63          	bne	a4,a5,80000c58 <_write+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:254
        {
            UART_send(&g_stdio_uart, (const uint8_t *)"\r", 1);
80000c44:	00100613          	li	a2,1
80000c48:	800037b7          	lui	a5,0x80003
80000c4c:	20c78593          	addi	a1,a5,524 # 8000320c <__stack_top+0xfffc6c6c>
80000c50:	90818513          	addi	a0,gp,-1784 # 80003458 <g_stdio_uart>
80000c54:	234000ef          	jal	ra,80000e88 <UART_send>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 2)
    for (jj = 0; jj < len; jj++)
80000c58:	fec42783          	lw	a5,-20(s0)
80000c5c:	00178793          	addi	a5,a5,1
80000c60:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:249 (discriminator 1)
80000c64:	fec42703          	lw	a4,-20(s0)
80000c68:	fd442783          	lw	a5,-44(s0)
80000c6c:	faf762e3          	bltu	a4,a5,80000c10 <_write+0x60>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:257
        }
    }
    return len;
80000c70:	fd442783          	lw	a5,-44(s0)
80000c74:	0100006f          	j	80000c84 <_write+0xd4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:261
  }
#endif

  return stub(EBADF);
80000c78:	00900513          	li	a0,9
80000c7c:	f05ff0ef          	jal	ra,80000b80 <stub>
80000c80:	00050793          	mv	a5,a0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/syscall.c:262
}
80000c84:	00078513          	mv	a0,a5
80000c88:	02c12083          	lw	ra,44(sp)
80000c8c:	02812403          	lw	s0,40(sp)
80000c90:	03010113          	addi	sp,sp,48
80000c94:	00008067          	ret

80000c98 <HW_set_32bit_reg>:
HW_set_32bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:36
 *
 * a0:   addr_t reg_addr
 * a1:   uint32_t value
 */
HW_set_32bit_reg:
    sw a1, 0(a0)
80000c98:	00b52023          	sw	a1,0(a0) # 44000000 <RAM_SIZE+0x43f80000>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:37
    ret
80000c9c:	00008067          	ret

80000ca0 <HW_get_32bit_reg>:
HW_get_32bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:47
 *
 * R0:   addr_t reg_addr
 * @return          32 bits value read from the peripheral register.
 */
HW_get_32bit_reg:
    lw a0, 0(a0)
80000ca0:	00052503          	lw	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:48
    ret
80000ca4:	00008067          	ret

80000ca8 <HW_set_32bit_reg_field>:
HW_set_32bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:60
 * a1:   int_fast8_t shift
 * a2:   uint32_t mask
 * a3:   uint32_t value
 */
HW_set_32bit_reg_field:
    mv t3, a3
80000ca8:	00068e13          	mv	t3,a3
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:61
    sll t3, t3, a1
80000cac:	00be1e33          	sll	t3,t3,a1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:62
    and  t3, t3, a2
80000cb0:	00ce7e33          	and	t3,t3,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:63
    lw t1, 0(a0)
80000cb4:	00052303          	lw	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:64
    mv t2, a2
80000cb8:	00060393          	mv	t2,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:65
    not t2, t2
80000cbc:	fff3c393          	not	t2,t2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:66
    and t1, t1, t2
80000cc0:	00737333          	and	t1,t1,t2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:67
    or t1, t1, t3
80000cc4:	01c36333          	or	t1,t1,t3
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:68
    sw t1, 0(a0)
80000cc8:	00652023          	sw	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:69
    ret
80000ccc:	00008067          	ret

80000cd0 <HW_get_32bit_reg_field>:
HW_get_32bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:83
 *
 * @return          32 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_32bit_reg_field:
    lw a0, 0(a0)
80000cd0:	00052503          	lw	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:84
    and a0, a0, a2
80000cd4:	00c57533          	and	a0,a0,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:85
    srl a0, a0, a1
80000cd8:	00b55533          	srl	a0,a0,a1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:86
    ret
80000cdc:	00008067          	ret

80000ce0 <HW_set_16bit_reg>:
HW_set_16bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:96
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast16_t value
 */
HW_set_16bit_reg:
    sh a1, 0(a0)
80000ce0:	00b51023          	sh	a1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:97
    ret
80000ce4:	00008067          	ret

80000ce8 <HW_get_16bit_reg>:
HW_get_16bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:107
 *
 * a0:   addr_t reg_addr
 * @return          16 bits value read from the peripheral register.
 */
HW_get_16bit_reg:
    lh a0, (a0)
80000ce8:	00051503          	lh	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:108
    ret
80000cec:	00008067          	ret

80000cf0 <HW_set_16bit_reg_field>:
HW_set_16bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:121
 * a2:   uint_fast16_t mask
 * a3:   uint_fast16_t value
 * @param value     Value to be written in the specified field.
 */
HW_set_16bit_reg_field:
    mv t3, a3
80000cf0:	00068e13          	mv	t3,a3
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:122
    sll t3, t3, a1
80000cf4:	00be1e33          	sll	t3,t3,a1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:123
    and  t3, t3, a2
80000cf8:	00ce7e33          	and	t3,t3,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:124
    lh t1, 0(a0)
80000cfc:	00051303          	lh	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:125
    mv t2, a2
80000d00:	00060393          	mv	t2,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:126
    not t2, t2
80000d04:	fff3c393          	not	t2,t2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:127
    and t1, t1, t2
80000d08:	00737333          	and	t1,t1,t2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:128
    or t1, t1, t3
80000d0c:	01c36333          	or	t1,t1,t3
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:129
    sh t1, 0(a0)
80000d10:	00651023          	sh	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:130
    ret
80000d14:	00008067          	ret

80000d18 <HW_get_16bit_reg_field>:
HW_get_16bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:144
 *
 * @return          16 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_16bit_reg_field:
    lh a0, 0(a0)
80000d18:	00051503          	lh	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:145
    and a0, a0, a2
80000d1c:	00c57533          	and	a0,a0,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:146
    srl a0, a0, a1
80000d20:	00b55533          	srl	a0,a0,a1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:147
    ret
80000d24:	00008067          	ret

80000d28 <HW_set_8bit_reg>:
HW_set_8bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:157
 *
 * a0:   addr_t reg_addr
 * a1:   uint_fast8_t value
 */
HW_set_8bit_reg:
    sb a1, 0(a0)
80000d28:	00b50023          	sb	a1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:158
    ret
80000d2c:	00008067          	ret

80000d30 <HW_get_8bit_reg>:
HW_get_8bit_reg():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:168
 *
 * a0:   addr_t reg_addr
 * @return          8 bits value read from the peripheral register.
 */
HW_get_8bit_reg:
    lb a0, 0(a0)
80000d30:	00050503          	lb	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:169
    ret
80000d34:	00008067          	ret

80000d38 <HW_set_8bit_reg_field>:
HW_set_8bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:181
 * a1:   int_fast8_t shift
 * a2:   uint_fast8_t mask
 * a3:   uint_fast8_t value
 */
HW_set_8bit_reg_field:
    mv t3, a3
80000d38:	00068e13          	mv	t3,a3
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:182
    sll t3, t3, a1
80000d3c:	00be1e33          	sll	t3,t3,a1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:183
    and  t3, t3, a2
80000d40:	00ce7e33          	and	t3,t3,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:184
    lb t1, 0(a0)
80000d44:	00050303          	lb	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:185
    mv t2, a2
80000d48:	00060393          	mv	t2,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:186
    not t2, t2
80000d4c:	fff3c393          	not	t2,t2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:187
    and t1, t1, t2
80000d50:	00737333          	and	t1,t1,t2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:188
    or t1, t1, t3
80000d54:	01c36333          	or	t1,t1,t3
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:189
    sb t1, 0(a0)
80000d58:	00650023          	sb	t1,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:190
    ret
80000d5c:	00008067          	ret

80000d60 <HW_get_8bit_reg_field>:
HW_get_8bit_reg_field():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:204
 *
 * @return          8 bits value containing the register field value specified
 *                  as parameter.
 */
HW_get_8bit_reg_field:
    lb a0, 0(a0)
80000d60:	00050503          	lb	a0,0(a0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:205
    and a0, a0, a2
80000d64:	00c57533          	and	a0,a0,a2
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:206
    srl a0, a0, a1
80000d68:	00b55533          	srl	a0,a0,a1
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../hal/hw_reg_access.S:207
    ret
80000d6c:	00008067          	ret

80000d70 <UART_init>:
UART_init():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:46
    UART_instance_t * this_uart,
    addr_t base_addr,
    uint16_t baud_value,
    uint8_t line_config
)
{
80000d70:	fd010113          	addi	sp,sp,-48
80000d74:	02112623          	sw	ra,44(sp)
80000d78:	02812423          	sw	s0,40(sp)
80000d7c:	03010413          	addi	s0,sp,48
80000d80:	fca42e23          	sw	a0,-36(s0)
80000d84:	fcb42c23          	sw	a1,-40(s0)
80000d88:	00060793          	mv	a5,a2
80000d8c:	00068713          	mv	a4,a3
80000d90:	fcf41b23          	sh	a5,-42(s0)
80000d94:	00070793          	mv	a5,a4
80000d98:	fcf40aa3          	sb	a5,-43(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53
    
    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( line_config <= MAX_LINE_CONFIG )
    HAL_ASSERT( baud_value <= MAX_BAUD_VALUE )

    if( ( this_uart != NULL_INSTANCE ) &&
80000d9c:	fdc42783          	lw	a5,-36(s0)
80000da0:	0c078a63          	beqz	a5,80000e74 <UART_init+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:53 (discriminator 1)
80000da4:	fd544703          	lbu	a4,-43(s0)
80000da8:	00700793          	li	a5,7
80000dac:	0ce7e463          	bltu	a5,a4,80000e74 <UART_init+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:54
        ( line_config <= MAX_LINE_CONFIG ) &&
80000db0:	fd645703          	lhu	a4,-42(s0)
80000db4:	000027b7          	lui	a5,0x2
80000db8:	0af77e63          	bleu	a5,a4,80000e74 <UART_init+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:60
        ( baud_value <= MAX_BAUD_VALUE ) )
    {
        /*
         * Store lower 8-bits of baud value in CTRL1.
         */
        HAL_set_8bit_reg( base_addr, CTRL1, (uint_fast8_t)(baud_value &
80000dbc:	fd842783          	lw	a5,-40(s0)
80000dc0:	00878713          	addi	a4,a5,8 # 2008 <HEAP_SIZE-0xdff8>
80000dc4:	fd645783          	lhu	a5,-42(s0)
80000dc8:	0ff7f793          	andi	a5,a5,255
80000dcc:	00078593          	mv	a1,a5
80000dd0:	00070513          	mv	a0,a4
80000dd4:	f55ff0ef          	jal	ra,80000d28 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:67
    
        /*
         * Extract higher 5-bits of baud value and store in higher 5-bits 
         * of CTRL2, along with line configuration in lower 3 three bits.
         */
        HAL_set_8bit_reg( base_addr, CTRL2, (uint_fast8_t)line_config | 
80000dd8:	fd842783          	lw	a5,-40(s0)
80000ddc:	00c78693          	addi	a3,a5,12
80000de0:	fd544703          	lbu	a4,-43(s0)
80000de4:	fd645783          	lhu	a5,-42(s0)
80000de8:	4057d793          	srai	a5,a5,0x5
80000dec:	7f87f793          	andi	a5,a5,2040
80000df0:	00f767b3          	or	a5,a4,a5
80000df4:	00078593          	mv	a1,a5
80000df8:	00068513          	mv	a0,a3
80000dfc:	f2dff0ef          	jal	ra,80000d28 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:71
                                           (uint_fast8_t)((baud_value &
                                   BAUDVALUE_MSB) >> BAUDVALUE_SHIFT ) );
    
        this_uart->base_address = base_addr;
80000e00:	fdc42783          	lw	a5,-36(s0)
80000e04:	fd842703          	lw	a4,-40(s0)
80000e08:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:94
        
        /*
         * Flush the receive FIFO of data that may have been received before the
         * driver was initialized.
         */
        rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80000e0c:	fdc42783          	lw	a5,-36(s0)
80000e10:	0007a783          	lw	a5,0(a5)
80000e14:	01078793          	addi	a5,a5,16
80000e18:	00078513          	mv	a0,a5
80000e1c:	f15ff0ef          	jal	ra,80000d30 <HW_get_8bit_reg>
80000e20:	00050793          	mv	a5,a0
80000e24:	0027f793          	andi	a5,a5,2
80000e28:	fef407a3          	sb	a5,-17(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
                                                    STATUS_RXFULL_MASK;
        while ( rx_full )
80000e2c:	0380006f          	j	80000e64 <UART_init+0xf4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:98
        {
            HAL_get_8bit_reg( this_uart->base_address, RXDATA );
80000e30:	fdc42783          	lw	a5,-36(s0)
80000e34:	0007a783          	lw	a5,0(a5)
80000e38:	00478793          	addi	a5,a5,4
80000e3c:	00078513          	mv	a0,a5
80000e40:	ef1ff0ef          	jal	ra,80000d30 <HW_get_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:99
            rx_full = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80000e44:	fdc42783          	lw	a5,-36(s0)
80000e48:	0007a783          	lw	a5,0(a5)
80000e4c:	01078793          	addi	a5,a5,16
80000e50:	00078513          	mv	a0,a5
80000e54:	eddff0ef          	jal	ra,80000d30 <HW_get_8bit_reg>
80000e58:	00050793          	mv	a5,a0
80000e5c:	0027f793          	andi	a5,a5,2
80000e60:	fef407a3          	sb	a5,-17(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:96
        while ( rx_full )
80000e64:	fef44783          	lbu	a5,-17(s0)
80000e68:	fc0794e3          	bnez	a5,80000e30 <UART_init+0xc0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:106
        }

        /*
         * Clear status of the UART instance.
         */
        this_uart->status = (uint8_t)0;
80000e6c:	fdc42783          	lw	a5,-36(s0)
80000e70:	00078223          	sb	zero,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:108
    }
}
80000e74:	00000013          	nop
80000e78:	02c12083          	lw	ra,44(sp)
80000e7c:	02812403          	lw	s0,40(sp)
80000e80:	03010113          	addi	sp,sp,48
80000e84:	00008067          	ret

80000e88 <UART_send>:
UART_send():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:121
(
    UART_instance_t * this_uart,
    const uint8_t * tx_buffer,
    size_t tx_size
)
{
80000e88:	fd010113          	addi	sp,sp,-48
80000e8c:	02112623          	sw	ra,44(sp)
80000e90:	02812423          	sw	s0,40(sp)
80000e94:	03010413          	addi	s0,sp,48
80000e98:	fca42e23          	sw	a0,-36(s0)
80000e9c:	fcb42c23          	sw	a1,-40(s0)
80000ea0:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( tx_buffer != NULL_BUFFER )
    HAL_ASSERT( tx_size > 0 )
      
    if( (this_uart != NULL_INSTANCE) &&
80000ea4:	fdc42783          	lw	a5,-36(s0)
80000ea8:	08078063          	beqz	a5,80000f28 <UART_send+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:129 (discriminator 1)
80000eac:	fd842783          	lw	a5,-40(s0)
80000eb0:	06078c63          	beqz	a5,80000f28 <UART_send+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:130
        (tx_buffer != NULL_BUFFER)   &&
80000eb4:	fd442783          	lw	a5,-44(s0)
80000eb8:	06078863          	beqz	a5,80000f28 <UART_send+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133
        (tx_size > (size_t)0) )
    {
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
80000ebc:	fe042623          	sw	zero,-20(s0)
80000ec0:	05c0006f          	j	80000f1c <UART_send+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:137 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80000ec4:	fdc42783          	lw	a5,-36(s0)
80000ec8:	0007a783          	lw	a5,0(a5)
80000ecc:	01078793          	addi	a5,a5,16
80000ed0:	00078513          	mv	a0,a5
80000ed4:	e5dff0ef          	jal	ra,80000d30 <HW_get_8bit_reg>
80000ed8:	00050793          	mv	a5,a0
80000edc:	0017f793          	andi	a5,a5,1
80000ee0:	fef405a3          	sb	a5,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:139 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
80000ee4:	feb44783          	lbu	a5,-21(s0)
80000ee8:	fc078ee3          	beqz	a5,80000ec4 <UART_send+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:141 (discriminator 2)
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
80000eec:	fdc42783          	lw	a5,-36(s0)
80000ef0:	0007a683          	lw	a3,0(a5)
80000ef4:	fd842703          	lw	a4,-40(s0)
80000ef8:	fec42783          	lw	a5,-20(s0)
80000efc:	00f707b3          	add	a5,a4,a5
80000f00:	0007c783          	lbu	a5,0(a5)
80000f04:	00078593          	mv	a1,a5
80000f08:	00068513          	mv	a0,a3
80000f0c:	e1dff0ef          	jal	ra,80000d28 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 2)
        for ( char_idx = (size_t)0; char_idx < tx_size; char_idx++ )
80000f10:	fec42783          	lw	a5,-20(s0)
80000f14:	00178793          	addi	a5,a5,1
80000f18:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:133 (discriminator 1)
80000f1c:	fec42703          	lw	a4,-20(s0)
80000f20:	fd442783          	lw	a5,-44(s0)
80000f24:	faf760e3          	bltu	a4,a5,80000ec4 <UART_send+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:145
                              (uint_fast8_t)tx_buffer[char_idx] );
        }
    }
}
80000f28:	00000013          	nop
80000f2c:	02c12083          	lw	ra,44(sp)
80000f30:	02812403          	lw	s0,40(sp)
80000f34:	03010113          	addi	sp,sp,48
80000f38:	00008067          	ret

80000f3c <UART_polled_tx_string>:
UART_polled_tx_string():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:239
UART_polled_tx_string
( 
    UART_instance_t * this_uart, 
    const uint8_t * p_sz_string
)
{
80000f3c:	fd010113          	addi	sp,sp,-48
80000f40:	02112623          	sw	ra,44(sp)
80000f44:	02812423          	sw	s0,40(sp)
80000f48:	03010413          	addi	s0,sp,48
80000f4c:	fca42e23          	sw	a0,-36(s0)
80000f50:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246
    uint8_t tx_ready;

    HAL_ASSERT( this_uart != NULL_INSTANCE )
    HAL_ASSERT( p_sz_string != NULL_BUFFER )
    
    if( ( this_uart != NULL_INSTANCE ) && ( p_sz_string != NULL_BUFFER ) )
80000f54:	fdc42783          	lw	a5,-36(s0)
80000f58:	08078063          	beqz	a5,80000fd8 <UART_polled_tx_string+0x9c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:246 (discriminator 1)
80000f5c:	fd842783          	lw	a5,-40(s0)
80000f60:	06078c63          	beqz	a5,80000fd8 <UART_polled_tx_string+0x9c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:248
    {
        char_idx = 0U;
80000f64:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
80000f68:	05c0006f          	j	80000fc4 <UART_polled_tx_string+0x88>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:253 (discriminator 1)
        {
            /* Wait for UART to become ready to transmit. */
            do {
                tx_ready = HAL_get_8bit_reg( this_uart->base_address, STATUS ) &
80000f6c:	fdc42783          	lw	a5,-36(s0)
80000f70:	0007a783          	lw	a5,0(a5)
80000f74:	01078793          	addi	a5,a5,16
80000f78:	00078513          	mv	a0,a5
80000f7c:	db5ff0ef          	jal	ra,80000d30 <HW_get_8bit_reg>
80000f80:	00050793          	mv	a5,a0
80000f84:	0017f793          	andi	a5,a5,1
80000f88:	fef405a3          	sb	a5,-21(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:255 (discriminator 1)
                                                              STATUS_TXRDY_MASK;
            } while ( !tx_ready );
80000f8c:	feb44783          	lbu	a5,-21(s0)
80000f90:	fc078ee3          	beqz	a5,80000f6c <UART_polled_tx_string+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:257
            /* Send next character in the buffer. */
            HAL_set_8bit_reg( this_uart->base_address, TXDATA,
80000f94:	fdc42783          	lw	a5,-36(s0)
80000f98:	0007a683          	lw	a3,0(a5)
80000f9c:	fd842703          	lw	a4,-40(s0)
80000fa0:	fec42783          	lw	a5,-20(s0)
80000fa4:	00f707b3          	add	a5,a4,a5
80000fa8:	0007c783          	lbu	a5,0(a5)
80000fac:	00078593          	mv	a1,a5
80000fb0:	00068513          	mv	a0,a3
80000fb4:	d75ff0ef          	jal	ra,80000d28 <HW_set_8bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:259
                              (uint_fast8_t)p_sz_string[char_idx] );
            char_idx++;
80000fb8:	fec42783          	lw	a5,-20(s0)
80000fbc:	00178793          	addi	a5,a5,1
80000fc0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:249
        while( 0U != p_sz_string[char_idx] )
80000fc4:	fd842703          	lw	a4,-40(s0)
80000fc8:	fec42783          	lw	a5,-20(s0)
80000fcc:	00f707b3          	add	a5,a4,a5
80000fd0:	0007c783          	lbu	a5,0(a5)
80000fd4:	f8079ce3          	bnez	a5,80000f6c <UART_polled_tx_string+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../drivers/CoreUARTapb/core_uart_apb.c:262
        }
    }
}
80000fd8:	00000013          	nop
80000fdc:	02c12083          	lw	ra,44(sp)
80000fe0:	02812403          	lw	s0,40(sp)
80000fe4:	03010113          	addi	sp,sp,48
80000fe8:	00008067          	ret

80000fec <pvPortMalloc>:
pvPortMalloc():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:151
}
/*-----------------------------------------------------------*/


void *pvPortMalloc( size_t xWantedSize )
{
80000fec:	fc010113          	addi	sp,sp,-64
80000ff0:	02112e23          	sw	ra,60(sp)
80000ff4:	02812c23          	sw	s0,56(sp)
80000ff8:	04010413          	addi	s0,sp,64
80000ffc:	fca42623          	sw	a0,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:154
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
80001000:	fe042223          	sw	zero,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:156

	vTaskSuspendAll();
80001004:	7e5000ef          	jal	ra,80001fe8 <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:160
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
80001008:	9241a783          	lw	a5,-1756(gp) # 80003474 <xHeapHasBeenInitialised.2777>
8000100c:	00079863          	bnez	a5,8000101c <pvPortMalloc+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:162
		{
			prvHeapInit();
80001010:	284000ef          	jal	ra,80001294 <prvHeapInit>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:163
			xHeapHasBeenInitialised = pdTRUE;
80001014:	00100713          	li	a4,1
80001018:	92e1a223          	sw	a4,-1756(gp) # 80003474 <xHeapHasBeenInitialised.2777>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:168
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
8000101c:	fcc42783          	lw	a5,-52(s0)
80001020:	02078a63          	beqz	a5,80001054 <pvPortMalloc+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:170
		{
			xWantedSize += heapSTRUCT_SIZE;
80001024:	00800793          	li	a5,8
80001028:	00078713          	mv	a4,a5
8000102c:	fcc42783          	lw	a5,-52(s0)
80001030:	00e787b3          	add	a5,a5,a4
80001034:	fcf42623          	sw	a5,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:173

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
80001038:	fcc42783          	lw	a5,-52(s0)
8000103c:	0037f793          	andi	a5,a5,3
80001040:	00078a63          	beqz	a5,80001054 <pvPortMalloc+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:176
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
80001044:	fcc42783          	lw	a5,-52(s0)
80001048:	ffc7f793          	andi	a5,a5,-4
8000104c:	00478793          	addi	a5,a5,4
80001050:	fcf42623          	sw	a5,-52(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
80001054:	fcc42783          	lw	a5,-52(s0)
80001058:	14078463          	beqz	a5,800011a0 <pvPortMalloc+0x1b4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:180 (discriminator 1)
8000105c:	fcc42703          	lw	a4,-52(s0)
80001060:	000197b7          	lui	a5,0x19
80001064:	ffb78793          	addi	a5,a5,-5 # 18ffb <HEAP_SIZE+0x8ffb>
80001068:	12e7ec63          	bltu	a5,a4,800011a0 <pvPortMalloc+0x1b4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:184
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
8000106c:	91418793          	addi	a5,gp,-1772 # 80003464 <xStart>
80001070:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:185
			pxBlock = xStart.pxNextFreeBlock;
80001074:	9141a783          	lw	a5,-1772(gp) # 80003464 <xStart>
80001078:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
8000107c:	0180006f          	j	80001094 <pvPortMalloc+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:188
			{
				pxPreviousBlock = pxBlock;
80001080:	fec42783          	lw	a5,-20(s0)
80001084:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:189
				pxBlock = pxBlock->pxNextFreeBlock;
80001088:	fec42783          	lw	a5,-20(s0)
8000108c:	0007a783          	lw	a5,0(a5)
80001090:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
80001094:	fec42783          	lw	a5,-20(s0)
80001098:	0047a783          	lw	a5,4(a5)
8000109c:	fcc42703          	lw	a4,-52(s0)
800010a0:	00e7f863          	bleu	a4,a5,800010b0 <pvPortMalloc+0xc4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:186 (discriminator 1)
800010a4:	fec42783          	lw	a5,-20(s0)
800010a8:	0007a783          	lw	a5,0(a5)
800010ac:	fc079ae3          	bnez	a5,80001080 <pvPortMalloc+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:193
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
800010b0:	fec42703          	lw	a4,-20(s0)
800010b4:	91c18793          	addi	a5,gp,-1764 # 8000346c <xEnd>
800010b8:	0ef70463          	beq	a4,a5,800011a0 <pvPortMalloc+0x1b4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:197
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
800010bc:	fe842783          	lw	a5,-24(s0)
800010c0:	0007a783          	lw	a5,0(a5)
800010c4:	00800713          	li	a4,8
800010c8:	00e787b3          	add	a5,a5,a4
800010cc:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:201

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
800010d0:	fec42783          	lw	a5,-20(s0)
800010d4:	0007a703          	lw	a4,0(a5)
800010d8:	fe842783          	lw	a5,-24(s0)
800010dc:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:204

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
800010e0:	fec42783          	lw	a5,-20(s0)
800010e4:	0047a703          	lw	a4,4(a5)
800010e8:	fcc42783          	lw	a5,-52(s0)
800010ec:	40f707b3          	sub	a5,a4,a5
800010f0:	00800713          	li	a4,8
800010f4:	00171713          	slli	a4,a4,0x1
800010f8:	08f77663          	bleu	a5,a4,80001184 <pvPortMalloc+0x198>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:209
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
800010fc:	fec42703          	lw	a4,-20(s0)
80001100:	fcc42783          	lw	a5,-52(s0)
80001104:	00f707b3          	add	a5,a4,a5
80001108:	fcf42e23          	sw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:213

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
8000110c:	fec42783          	lw	a5,-20(s0)
80001110:	0047a703          	lw	a4,4(a5)
80001114:	fcc42783          	lw	a5,-52(s0)
80001118:	40f70733          	sub	a4,a4,a5
8000111c:	fdc42783          	lw	a5,-36(s0)
80001120:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:214
					pxBlock->xBlockSize = xWantedSize;
80001124:	fec42783          	lw	a5,-20(s0)
80001128:	fcc42703          	lw	a4,-52(s0)
8000112c:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
80001130:	fdc42783          	lw	a5,-36(s0)
80001134:	0047a783          	lw	a5,4(a5)
80001138:	fcf42c23          	sw	a5,-40(s0)
8000113c:	91418793          	addi	a5,gp,-1772 # 80003464 <xStart>
80001140:	fef42023          	sw	a5,-32(s0)
80001144:	0100006f          	j	80001154 <pvPortMalloc+0x168>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 3)
80001148:	fe042783          	lw	a5,-32(s0)
8000114c:	0007a783          	lw	a5,0(a5)
80001150:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 1)
80001154:	fe042783          	lw	a5,-32(s0)
80001158:	0007a783          	lw	a5,0(a5)
8000115c:	0047a783          	lw	a5,4(a5)
80001160:	fd842703          	lw	a4,-40(s0)
80001164:	fee7e2e3          	bltu	a5,a4,80001148 <pvPortMalloc+0x15c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:217 (discriminator 4)
80001168:	fe042783          	lw	a5,-32(s0)
8000116c:	0007a703          	lw	a4,0(a5)
80001170:	fdc42783          	lw	a5,-36(s0)
80001174:	00e7a023          	sw	a4,0(a5)
80001178:	fe042783          	lw	a5,-32(s0)
8000117c:	fdc42703          	lw	a4,-36(s0)
80001180:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:220
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
80001184:	800037b7          	lui	a5,0x80003
80001188:	3507a703          	lw	a4,848(a5) # 80003350 <__stack_top+0xfffc6db0>
8000118c:	fec42783          	lw	a5,-20(s0)
80001190:	0047a783          	lw	a5,4(a5)
80001194:	40f70733          	sub	a4,a4,a5
80001198:	800037b7          	lui	a5,0x80003
8000119c:	34e7a823          	sw	a4,848(a5) # 80003350 <__stack_top+0xfffc6db0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:226
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
800011a0:	671000ef          	jal	ra,80002010 <xTaskResumeAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:230

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
800011a4:	fe442783          	lw	a5,-28(s0)
800011a8:	00079463          	bnez	a5,800011b0 <pvPortMalloc+0x1c4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:233
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
800011ac:	405010ef          	jal	ra,80002db0 <vApplicationMallocFailedHook>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:238
		}
	}
	#endif

	return pvReturn;
800011b0:	fe442783          	lw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:239
}
800011b4:	00078513          	mv	a0,a5
800011b8:	03c12083          	lw	ra,60(sp)
800011bc:	03812403          	lw	s0,56(sp)
800011c0:	04010113          	addi	sp,sp,64
800011c4:	00008067          	ret

800011c8 <vPortFree>:
vPortFree():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:243
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
800011c8:	fd010113          	addi	sp,sp,-48
800011cc:	02112623          	sw	ra,44(sp)
800011d0:	02812423          	sw	s0,40(sp)
800011d4:	03010413          	addi	s0,sp,48
800011d8:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:244
uint8_t *puc = ( uint8_t * ) pv;
800011dc:	fdc42783          	lw	a5,-36(s0)
800011e0:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:247
BlockLink_t *pxLink;

	if( pv != NULL )
800011e4:	fdc42783          	lw	a5,-36(s0)
800011e8:	08078c63          	beqz	a5,80001280 <vPortFree+0xb8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:251
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
800011ec:	00800793          	li	a5,8
800011f0:	40f007b3          	neg	a5,a5
800011f4:	fe842703          	lw	a4,-24(s0)
800011f8:	00f707b3          	add	a5,a4,a5
800011fc:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:255

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
80001200:	fe842783          	lw	a5,-24(s0)
80001204:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:257

		vTaskSuspendAll();
80001208:	5e1000ef          	jal	ra,80001fe8 <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
8000120c:	fe442783          	lw	a5,-28(s0)
80001210:	0047a783          	lw	a5,4(a5)
80001214:	fef42023          	sw	a5,-32(s0)
80001218:	91418793          	addi	a5,gp,-1772 # 80003464 <xStart>
8000121c:	fef42623          	sw	a5,-20(s0)
80001220:	0100006f          	j	80001230 <vPortFree+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 3)
80001224:	fec42783          	lw	a5,-20(s0)
80001228:	0007a783          	lw	a5,0(a5)
8000122c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 1)
80001230:	fec42783          	lw	a5,-20(s0)
80001234:	0007a783          	lw	a5,0(a5)
80001238:	0047a783          	lw	a5,4(a5)
8000123c:	fe042703          	lw	a4,-32(s0)
80001240:	fee7e2e3          	bltu	a5,a4,80001224 <vPortFree+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:260 (discriminator 4)
80001244:	fec42783          	lw	a5,-20(s0)
80001248:	0007a703          	lw	a4,0(a5)
8000124c:	fe442783          	lw	a5,-28(s0)
80001250:	00e7a023          	sw	a4,0(a5)
80001254:	fec42783          	lw	a5,-20(s0)
80001258:	fe442703          	lw	a4,-28(s0)
8000125c:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:261 (discriminator 4)
			xFreeBytesRemaining += pxLink->xBlockSize;
80001260:	fe442783          	lw	a5,-28(s0)
80001264:	0047a703          	lw	a4,4(a5)
80001268:	800037b7          	lui	a5,0x80003
8000126c:	3507a783          	lw	a5,848(a5) # 80003350 <__stack_top+0xfffc6db0>
80001270:	00f70733          	add	a4,a4,a5
80001274:	800037b7          	lui	a5,0x80003
80001278:	34e7a823          	sw	a4,848(a5) # 80003350 <__stack_top+0xfffc6db0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:264 (discriminator 4)
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
8000127c:	595000ef          	jal	ra,80002010 <xTaskResumeAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:266
	}
}
80001280:	00000013          	nop
80001284:	02c12083          	lw	ra,44(sp)
80001288:	02812403          	lw	s0,40(sp)
8000128c:	03010113          	addi	sp,sp,48
80001290:	00008067          	ret

80001294 <prvHeapInit>:
prvHeapInit():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:282
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
80001294:	fe010113          	addi	sp,sp,-32
80001298:	00812e23          	sw	s0,28(sp)
8000129c:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:287
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
800012a0:	800037b7          	lui	a5,0x80003
800012a4:	4c478793          	addi	a5,a5,1220 # 800034c4 <__stack_top+0xfffc6f24>
800012a8:	ffc7f793          	andi	a5,a5,-4
800012ac:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:291

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
800012b0:	fec42703          	lw	a4,-20(s0)
800012b4:	90e1aa23          	sw	a4,-1772(gp) # 80003464 <xStart>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:292
	xStart.xBlockSize = ( size_t ) 0;
800012b8:	91418793          	addi	a5,gp,-1772 # 80003464 <xStart>
800012bc:	0007a223          	sw	zero,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:295

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
800012c0:	91c18793          	addi	a5,gp,-1764 # 8000346c <xEnd>
800012c4:	00019737          	lui	a4,0x19
800012c8:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
800012cc:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:296
	xEnd.pxNextFreeBlock = NULL;
800012d0:	9001ae23          	sw	zero,-1764(gp) # 8000346c <xEnd>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:300

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
800012d4:	fec42783          	lw	a5,-20(s0)
800012d8:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:301
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
800012dc:	fe842783          	lw	a5,-24(s0)
800012e0:	00019737          	lui	a4,0x19
800012e4:	ffc70713          	addi	a4,a4,-4 # 18ffc <HEAP_SIZE+0x8ffc>
800012e8:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:302
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
800012ec:	fe842783          	lw	a5,-24(s0)
800012f0:	91c18713          	addi	a4,gp,-1764 # 8000346c <xEnd>
800012f4:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/MemMang/heap_2.c:303
}
800012f8:	00000013          	nop
800012fc:	01c12403          	lw	s0,28(sp)
80001300:	02010113          	addi	sp,sp,32
80001304:	00008067          	ret

80001308 <raise_soft_interrupt>:
raise_soft_interrupt():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:227
/*==============================================================================
 * The function raise_soft_interrupt() raises a synchronous software interrupt by
 * writing into the MSIP register.
 */
static inline void raise_soft_interrupt()
{
80001308:	fe010113          	addi	sp,sp,-32
8000130c:	00812e23          	sw	s0,28(sp)
80001310:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:228
    unsigned long hart_id = read_csr(mhartid);
80001314:	f14027f3          	csrr	a5,mhartid
80001318:	fef42623          	sw	a5,-20(s0)
8000131c:	fec42783          	lw	a5,-20(s0)
80001320:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:231

    /*You need to make sure that the global interrupt is enabled*/
    set_csr(mie, MIP_MSIP);       /*Enable software interrupt bit */
80001324:	304467f3          	csrrsi	a5,mie,8
80001328:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:232
    PRCI->MSIP[hart_id] = 0x01;   /*raise soft interrupt for hart0*/
8000132c:	44000737          	lui	a4,0x44000
80001330:	fe842783          	lw	a5,-24(s0)
80001334:	00279793          	slli	a5,a5,0x2
80001338:	00f707b3          	add	a5,a4,a5
8000133c:	00100713          	li	a4,1
80001340:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:233
}
80001344:	00000013          	nop
80001348:	01c12403          	lw	s0,28(sp)
8000134c:	02010113          	addi	sp,sp,32
80001350:	00008067          	ret

80001354 <vPortEnterCritical>:
vPortEnterCritical():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:132
 * Used to catch tasks that attempt to return from their implementing function.
 */
static void prvTaskExitError( void );

void vPortEnterCritical( void )
{
80001354:	ff010113          	addi	sp,sp,-16
80001358:	00812623          	sw	s0,12(sp)
8000135c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:133
	portDISABLE_INTERRUPTS();
80001360:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:134
	uxCriticalNesting++;
80001364:	800037b7          	lui	a5,0x80003
80001368:	3547a783          	lw	a5,852(a5) # 80003354 <__stack_top+0xfffc6db4>
8000136c:	00178713          	addi	a4,a5,1
80001370:	800037b7          	lui	a5,0x80003
80001374:	34e7aa23          	sw	a4,852(a5) # 80003354 <__stack_top+0xfffc6db4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:135
}
80001378:	00000013          	nop
8000137c:	00c12403          	lw	s0,12(sp)
80001380:	01010113          	addi	sp,sp,16
80001384:	00008067          	ret

80001388 <vPortExitCritical>:
vPortExitCritical():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:139
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
80001388:	ff010113          	addi	sp,sp,-16
8000138c:	00812623          	sw	s0,12(sp)
80001390:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:140
	uxCriticalNesting--;
80001394:	800037b7          	lui	a5,0x80003
80001398:	3547a783          	lw	a5,852(a5) # 80003354 <__stack_top+0xfffc6db4>
8000139c:	fff78713          	addi	a4,a5,-1
800013a0:	800037b7          	lui	a5,0x80003
800013a4:	34e7aa23          	sw	a4,852(a5) # 80003354 <__stack_top+0xfffc6db4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:141
	if( uxCriticalNesting == 0 )
800013a8:	800037b7          	lui	a5,0x80003
800013ac:	3547a783          	lw	a5,852(a5) # 80003354 <__stack_top+0xfffc6db4>
800013b0:	00079463          	bnez	a5,800013b8 <vPortExitCritical+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:143
	{
		portENABLE_INTERRUPTS();
800013b4:	30046073          	csrsi	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:145
	}
}
800013b8:	00000013          	nop
800013bc:	00c12403          	lw	s0,12(sp)
800013c0:	01010113          	addi	sp,sp,16
800013c4:	00008067          	ret

800013c8 <prvSetNextTimerInterrupt>:
prvSetNextTimerInterrupt():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:151
/*-----------------------------------------------------------*/

/* Sets the next timer interrupt
 * Reads previous timer compare register, and adds tickrate */
static void prvSetNextTimerInterrupt(void)
{
800013c8:	fe010113          	addi	sp,sp,-32
800013cc:	00812e23          	sw	s0,28(sp)
800013d0:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:154
	uint64_t time;

	time = mtime->val_low;
800013d4:	80003637          	lui	a2,0x80003
800013d8:	35862603          	lw	a2,856(a2) # 80003358 <__stack_top+0xfffc6db8>
800013dc:	00062603          	lw	a2,0(a2)
800013e0:	fec42423          	sw	a2,-24(s0)
800013e4:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:155
	time |= ((uint64_t)mtime->val_high << 32);
800013e8:	80003637          	lui	a2,0x80003
800013ec:	35862603          	lw	a2,856(a2) # 80003358 <__stack_top+0xfffc6db8>
800013f0:	00462603          	lw	a2,4(a2)
800013f4:	00060693          	mv	a3,a2
800013f8:	00000713          	li	a4,0
800013fc:	00069813          	slli	a6,a3,0x0
80001400:	00000793          	li	a5,0
80001404:	fe842703          	lw	a4,-24(s0)
80001408:	00f76733          	or	a4,a4,a5
8000140c:	fee42423          	sw	a4,-24(s0)
80001410:	fec42703          	lw	a4,-20(s0)
80001414:	010767b3          	or	a5,a4,a6
80001418:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:157

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
8000141c:	fe842683          	lw	a3,-24(s0)
80001420:	fec42703          	lw	a4,-20(s0)
80001424:	000145b7          	lui	a1,0x14
80001428:	43858593          	addi	a1,a1,1080 # 14438 <HEAP_SIZE+0x4438>
8000142c:	00000613          	li	a2,0
80001430:	00b687b3          	add	a5,a3,a1
80001434:	00078513          	mv	a0,a5
80001438:	00d53533          	sltu	a0,a0,a3
8000143c:	00c70833          	add	a6,a4,a2
80001440:	01050733          	add	a4,a0,a6
80001444:	00070813          	mv	a6,a4
80001448:	fef42423          	sw	a5,-24(s0)
8000144c:	ff042623          	sw	a6,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:159

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
80001450:	800037b7          	lui	a5,0x80003
80001454:	35c7a783          	lw	a5,860(a5) # 8000335c <__stack_top+0xfffc6dbc>
80001458:	fe842703          	lw	a4,-24(s0)
8000145c:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:160
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
80001460:	fec42783          	lw	a5,-20(s0)
80001464:	0007d313          	srli	t1,a5,0x0
80001468:	00000393          	li	t2,0
8000146c:	800037b7          	lui	a5,0x80003
80001470:	35c7a783          	lw	a5,860(a5) # 8000335c <__stack_top+0xfffc6dbc>
80001474:	00030713          	mv	a4,t1
80001478:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:163

	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
8000147c:	08000793          	li	a5,128
80001480:	3047a073          	csrs	mie,a5
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:164
}
80001484:	00000013          	nop
80001488:	01c12403          	lw	s0,28(sp)
8000148c:	02010113          	addi	sp,sp,32
80001490:	00008067          	ret

80001494 <vPortSetupTimer>:
vPortSetupTimer():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:169
/*-----------------------------------------------------------*/

/* Sets and enable the timer interrupt */
void vPortSetupTimer(void)
{
80001494:	fe010113          	addi	sp,sp,-32
80001498:	00812e23          	sw	s0,28(sp)
8000149c:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:172
	uint64_t time;

	time = mtime->val_low;
800014a0:	80003637          	lui	a2,0x80003
800014a4:	35862603          	lw	a2,856(a2) # 80003358 <__stack_top+0xfffc6db8>
800014a8:	00062603          	lw	a2,0(a2)
800014ac:	fec42423          	sw	a2,-24(s0)
800014b0:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:173
	time |= ((uint64_t)mtime->val_high << 32);
800014b4:	80003637          	lui	a2,0x80003
800014b8:	35862603          	lw	a2,856(a2) # 80003358 <__stack_top+0xfffc6db8>
800014bc:	00462603          	lw	a2,4(a2)
800014c0:	00060693          	mv	a3,a2
800014c4:	00000713          	li	a4,0
800014c8:	00069813          	slli	a6,a3,0x0
800014cc:	00000793          	li	a5,0
800014d0:	fe842703          	lw	a4,-24(s0)
800014d4:	00f76733          	or	a4,a4,a5
800014d8:	fee42423          	sw	a4,-24(s0)
800014dc:	fec42703          	lw	a4,-20(s0)
800014e0:	010767b3          	or	a5,a4,a6
800014e4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:175

	time += (configCPU_CLOCK_HZ / configTICK_RATE_HZ);
800014e8:	fe842683          	lw	a3,-24(s0)
800014ec:	fec42703          	lw	a4,-20(s0)
800014f0:	000145b7          	lui	a1,0x14
800014f4:	43858593          	addi	a1,a1,1080 # 14438 <HEAP_SIZE+0x4438>
800014f8:	00000613          	li	a2,0
800014fc:	00b687b3          	add	a5,a3,a1
80001500:	00078513          	mv	a0,a5
80001504:	00d53533          	sltu	a0,a0,a3
80001508:	00c70833          	add	a6,a4,a2
8000150c:	01050733          	add	a4,a0,a6
80001510:	00070813          	mv	a6,a4
80001514:	fef42423          	sw	a5,-24(s0)
80001518:	ff042623          	sw	a6,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:177

	mtimecmp->val_low = (uint32_t)(time & 0xFFFFFFFF);
8000151c:	800037b7          	lui	a5,0x80003
80001520:	35c7a783          	lw	a5,860(a5) # 8000335c <__stack_top+0xfffc6dbc>
80001524:	fe842703          	lw	a4,-24(s0)
80001528:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:178
	mtimecmp->val_high = (uint32_t)((time >> 32) & 0xFFFFFFFF);
8000152c:	fec42783          	lw	a5,-20(s0)
80001530:	0007d313          	srli	t1,a5,0x0
80001534:	00000393          	li	t2,0
80001538:	800037b7          	lui	a5,0x80003
8000153c:	35c7a783          	lw	a5,860(a5) # 8000335c <__stack_top+0xfffc6dbc>
80001540:	00030713          	mv	a4,t1
80001544:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:182


	/* Enable timer interrupt */
	__asm volatile("csrs mie,%0"::"r"(0x80));
80001548:	08000793          	li	a5,128
8000154c:	3047a073          	csrs	mie,a5
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:183
}
80001550:	00000013          	nop
80001554:	01c12403          	lw	s0,28(sp)
80001558:	02010113          	addi	sp,sp,32
8000155c:	00008067          	ret

80001560 <prvTaskExitError>:
prvTaskExitError():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:187
/*-----------------------------------------------------------*/

void prvTaskExitError( void )
{
80001560:	ff010113          	addi	sp,sp,-16
80001564:	00812623          	sw	s0,12(sp)
80001568:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
8000156c:	800037b7          	lui	a5,0x80003
80001570:	3547a703          	lw	a4,852(a5) # 80003354 <__stack_top+0xfffc6db4>
80001574:	fff00793          	li	a5,-1
80001578:	00f70663          	beq	a4,a5,80001584 <prvTaskExitError+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:194 (discriminator 1)
8000157c:	30047073          	csrci	mstatus,8
80001580:	0000006f          	j	80001580 <prvTaskExitError+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:195
	portDISABLE_INTERRUPTS();
80001584:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:196 (discriminator 2)
	for( ;; );
80001588:	0000006f          	j	80001588 <prvTaskExitError+0x28>

8000158c <pxPortInitialiseStack>:
pxPortInitialiseStack():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:220

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
8000158c:	fe010113          	addi	sp,sp,-32
80001590:	00812e23          	sw	s0,28(sp)
80001594:	02010413          	addi	s0,sp,32
80001598:	fea42623          	sw	a0,-20(s0)
8000159c:	feb42423          	sw	a1,-24(s0)
800015a0:	fec42223          	sw	a2,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:224
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	register int *tp asm("x3");
	pxTopOfStack--;
800015a4:	fec42783          	lw	a5,-20(s0)
800015a8:	ffc78793          	addi	a5,a5,-4
800015ac:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:225
	*pxTopOfStack = (portSTACK_TYPE)pxCode;			/* Start address */
800015b0:	fe842703          	lw	a4,-24(s0)
800015b4:	fec42783          	lw	a5,-20(s0)
800015b8:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:226
	pxTopOfStack -= 22;
800015bc:	fec42783          	lw	a5,-20(s0)
800015c0:	fa878793          	addi	a5,a5,-88
800015c4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:227
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;	/* Register a0 */
800015c8:	fe442703          	lw	a4,-28(s0)
800015cc:	fec42783          	lw	a5,-20(s0)
800015d0:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:228
	pxTopOfStack -= 6;
800015d4:	fec42783          	lw	a5,-20(s0)
800015d8:	fe878793          	addi	a5,a5,-24
800015dc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:229
	*pxTopOfStack = (portSTACK_TYPE)tp; /* Register thread pointer */
800015e0:	00018793          	mv	a5,gp
800015e4:	00078713          	mv	a4,a5
800015e8:	fec42783          	lw	a5,-20(s0)
800015ec:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:230
	pxTopOfStack -= 3;
800015f0:	fec42783          	lw	a5,-20(s0)
800015f4:	ff478793          	addi	a5,a5,-12
800015f8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:231
	*pxTopOfStack = (portSTACK_TYPE)prvTaskExitError; /* Register ra */
800015fc:	800017b7          	lui	a5,0x80001
80001600:	56078713          	addi	a4,a5,1376 # 80001560 <__stack_top+0xfffc4fc0>
80001604:	fec42783          	lw	a5,-20(s0)
80001608:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:233

	return pxTopOfStack;
8000160c:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:234
}
80001610:	00078513          	mv	a0,a5
80001614:	01c12403          	lw	s0,28(sp)
80001618:	02010113          	addi	sp,sp,32
8000161c:	00008067          	ret

80001620 <SysTick_Handler>:
SysTick_Handler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:238
/*-----------------------------------------------------------*/

void vPortSysTickHandler( void )
{
80001620:	ff010113          	addi	sp,sp,-16
80001624:	00112623          	sw	ra,12(sp)
80001628:	00812423          	sw	s0,8(sp)
8000162c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:241
	/*Save Context*/
	{
		__asm volatile("lw	t0, pxCurrentTCB");
80001630:	92c1a283          	lw	t0,-1748(gp) # 8000347c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:242
		__asm volatile("sw	a2, 0x0(t0)");
80001634:	00c2a023          	sw	a2,0(t0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:246
	}

	/* Increment the RTOS tick. */
	prvSetNextTimerInterrupt();
80001638:	d91ff0ef          	jal	ra,800013c8 <prvSetNextTimerInterrupt>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:249

	/*Switch task */
	if( xTaskIncrementTick() != pdFALSE )
8000163c:	335000ef          	jal	ra,80002170 <xTaskIncrementTick>
80001640:	00050793          	mv	a5,a0
80001644:	00078463          	beqz	a5,8000164c <SysTick_Handler+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:251
	{
		vTaskSwitchContext();
80001648:	515000ef          	jal	ra,8000235c <vTaskSwitchContext>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:256
	}

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
8000164c:	92c1a103          	lw	sp,-1748(gp) # 8000347c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:257
		__asm volatile("lw	sp, 0x0(sp)");
80001650:	00012103          	lw	sp,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:259

		__asm volatile("lw	t0, 31 * 4(sp)");
80001654:	07c12283          	lw	t0,124(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:260
		__asm volatile("csrw	mepc, t0");
80001658:	34129073          	csrw	mepc,t0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:262

		__asm volatile("lw	x1, 0x0(sp)");
8000165c:	00012083          	lw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:263
		__asm volatile("lw   x4, 3 * 4(sp)");
80001660:	00c12203          	lw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:264
		__asm volatile("lw   x5, 4 * 4(sp)");
80001664:	01012283          	lw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:265
		__asm volatile("lw   x6, 5 * 4(sp)");
80001668:	01412303          	lw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:266
		__asm volatile("lw   x7, 6 * 4(sp)");
8000166c:	01812383          	lw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:267
		__asm volatile("lw   x8, 7 * 4(sp)");
80001670:	01c12403          	lw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:268
		__asm volatile("lw   x9, 8 * 4(sp)");
80001674:	02012483          	lw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:269
		__asm volatile("lw   x10, 9 * 4(sp)");
80001678:	02412503          	lw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:270
		__asm volatile("lw   x11, 10 * 4(sp)");
8000167c:	02812583          	lw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:271
		__asm volatile("lw   x12, 11 * 4(sp)");
80001680:	02c12603          	lw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:272
		__asm volatile("lw   x13, 12 * 4(sp)");
80001684:	03012683          	lw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:273
		__asm volatile("lw   x14, 13 * 4(sp)");
80001688:	03412703          	lw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:274
		__asm volatile("lw   x15, 14 * 4(sp)");
8000168c:	03812783          	lw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:275
		__asm volatile("lw   x16, 15 * 4(sp)");
80001690:	03c12803          	lw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:276
		__asm volatile("lw   x17, 16 * 4(sp)");
80001694:	04012883          	lw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:277
		__asm volatile("lw   x18, 17 * 4(sp)");
80001698:	04412903          	lw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:278
		__asm volatile("lw   x19, 18 * 4(sp)");
8000169c:	04812983          	lw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:279
		__asm volatile("lw   x20, 19 * 4(sp)");
800016a0:	04c12a03          	lw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:280
		__asm volatile("lw   x21, 20 * 4(sp)");
800016a4:	05012a83          	lw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:281
		__asm volatile("lw   x22, 21 * 4(sp)");
800016a8:	05412b03          	lw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:282
		__asm volatile("lw   x23, 22 * 4(sp)");
800016ac:	05812b83          	lw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:283
		__asm volatile("lw   x24, 23 * 4(sp)");
800016b0:	05c12c03          	lw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:284
		__asm volatile("lw   x25, 24 * 4(sp)");
800016b4:	06012c83          	lw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:285
		__asm volatile("lw   x26, 25 * 4(sp)");
800016b8:	06412d03          	lw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:286
		__asm volatile("lw   x27, 26 * 4(sp)");
800016bc:	06812d83          	lw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:287
		__asm volatile("lw   x28, 27 * 4(sp)");
800016c0:	06c12e03          	lw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:288
		__asm volatile("lw   x29, 28 * 4(sp)");
800016c4:	07012e83          	lw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:289
		__asm volatile("lw   x30, 29 * 4(sp)");
800016c8:	07412f03          	lw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:290
		__asm volatile("lw   x31, 30 * 4(sp)");
800016cc:	07812f83          	lw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:292

		__asm volatile("addi	sp, sp, 4 * 32");
800016d0:	08010113          	addi	sp,sp,128
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:294

		__asm volatile("mret");
800016d4:	30200073          	mret
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:296
	}
}
800016d8:	00000013          	nop
800016dc:	00c12083          	lw	ra,12(sp)
800016e0:	00812403          	lw	s0,8(sp)
800016e4:	01010113          	addi	sp,sp,16
800016e8:	00008067          	ret

800016ec <xPortStartScheduler>:
xPortStartScheduler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:299
uint32_t g_startscheduler = 0;
BaseType_t xPortStartScheduler( void )
{
800016ec:	ff010113          	addi	sp,sp,-16
800016f0:	00112623          	sw	ra,12(sp)
800016f4:	00812423          	sw	s0,8(sp)
800016f8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:300
	vPortSetupTimer();
800016fc:	d99ff0ef          	jal	ra,80001494 <vPortSetupTimer>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:301
	uxCriticalNesting = 0;
80001700:	800037b7          	lui	a5,0x80003
80001704:	3407aa23          	sw	zero,852(a5) # 80003354 <__stack_top+0xfffc6db4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:302
	g_startscheduler = 1;
80001708:	00100713          	li	a4,1
8000170c:	92e1a423          	sw	a4,-1752(gp) # 80003478 <g_startscheduler>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:303
	__enable_irq();
80001710:	cd9fe0ef          	jal	ra,800003e8 <__enable_irq>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:305

	raise_soft_interrupt();
80001714:	bf5ff0ef          	jal	ra,80001308 <raise_soft_interrupt>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:308

	/*Should not get here*/
	return pdFALSE;
80001718:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:309
}
8000171c:	00078513          	mv	a0,a5
80001720:	00c12083          	lw	ra,12(sp)
80001724:	00812403          	lw	s0,8(sp)
80001728:	01010113          	addi	sp,sp,16
8000172c:	00008067          	ret

80001730 <Software_IRQHandler>:
Software_IRQHandler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:312

void Software_IRQHandler(void)
{
80001730:	ff010113          	addi	sp,sp,-16
80001734:	00112623          	sw	ra,12(sp)
80001738:	00812423          	sw	s0,8(sp)
8000173c:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:313
	if(1 == g_startscheduler)
80001740:	9281a703          	lw	a4,-1752(gp) # 80003478 <g_startscheduler>
80001744:	00100793          	li	a5,1
80001748:	00f71863          	bne	a4,a5,80001758 <Software_IRQHandler+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:315
	{
		g_startscheduler = 2; //skip the save n switch context first time when scheduler is starting.
8000174c:	00200713          	li	a4,2
80001750:	92e1a423          	sw	a4,-1752(gp) # 80003478 <g_startscheduler>
80001754:	0100006f          	j	80001764 <Software_IRQHandler+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:321
	}
	else
	{
		/*Save Context*/
		{
			__asm volatile("lw	t0, pxCurrentTCB");
80001758:	92c1a283          	lw	t0,-1748(gp) # 8000347c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:322
			__asm volatile("sw	a2, 0x0(t0)");
8000175c:	00c2a023          	sw	a2,0(t0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:325
		}

		vTaskSwitchContext();
80001760:	3fd000ef          	jal	ra,8000235c <vTaskSwitchContext>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:329
	}

	// Moved by Imperas (was previously causing corruption of a5)
	PRCI->MSIP[0] = 0x00;
80001764:	440007b7          	lui	a5,0x44000
80001768:	0007a023          	sw	zero,0(a5) # 44000000 <RAM_SIZE+0x43f80000>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:333

	/*Restore Context*/
	{
		__asm volatile("lw	sp, pxCurrentTCB");
8000176c:	92c1a103          	lw	sp,-1748(gp) # 8000347c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:334
		__asm volatile("lw	sp, 0x0(sp)");
80001770:	00012103          	lw	sp,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:336

		__asm volatile("lw	t0, 31 * 4(sp)");
80001774:	07c12283          	lw	t0,124(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:337
		__asm volatile("csrw	mepc, t0");
80001778:	34129073          	csrw	mepc,t0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:339

		__asm volatile("lw	x1, 0x0(sp)");
8000177c:	00012083          	lw	ra,0(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:340
		__asm volatile("lw   x4, 3 * 4(sp)");
80001780:	00c12203          	lw	tp,12(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:341
		__asm volatile("lw   x5, 4 * 4(sp)");
80001784:	01012283          	lw	t0,16(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:342
		__asm volatile("lw   x6, 5 * 4(sp)");
80001788:	01412303          	lw	t1,20(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:343
		__asm volatile("lw   x7, 6 * 4(sp)");
8000178c:	01812383          	lw	t2,24(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:344
		__asm volatile("lw   x8, 7 * 4(sp)");
80001790:	01c12403          	lw	s0,28(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:345
		__asm volatile("lw   x9, 8 * 4(sp)");
80001794:	02012483          	lw	s1,32(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:346
		__asm volatile("lw   x10, 9 * 4(sp)");
80001798:	02412503          	lw	a0,36(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:347
		__asm volatile("lw   x11, 10 * 4(sp)");
8000179c:	02812583          	lw	a1,40(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:348
		__asm volatile("lw   x12, 11 * 4(sp)");
800017a0:	02c12603          	lw	a2,44(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:349
		__asm volatile("lw   x13, 12 * 4(sp)");
800017a4:	03012683          	lw	a3,48(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:350
		__asm volatile("lw   x14, 13 * 4(sp)");
800017a8:	03412703          	lw	a4,52(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:351
		__asm volatile("lw   x15, 14 * 4(sp)");
800017ac:	03812783          	lw	a5,56(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:352
		__asm volatile("lw   x16, 15 * 4(sp)");
800017b0:	03c12803          	lw	a6,60(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:353
		__asm volatile("lw   x17, 16 * 4(sp)");
800017b4:	04012883          	lw	a7,64(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:354
		__asm volatile("lw   x18, 17 * 4(sp)");
800017b8:	04412903          	lw	s2,68(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:355
		__asm volatile("lw   x19, 18 * 4(sp)");
800017bc:	04812983          	lw	s3,72(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:356
		__asm volatile("lw   x20, 19 * 4(sp)");
800017c0:	04c12a03          	lw	s4,76(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:357
		__asm volatile("lw   x21, 20 * 4(sp)");
800017c4:	05012a83          	lw	s5,80(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:358
		__asm volatile("lw   x22, 21 * 4(sp)");
800017c8:	05412b03          	lw	s6,84(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:359
		__asm volatile("lw   x23, 22 * 4(sp)");
800017cc:	05812b83          	lw	s7,88(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:360
		__asm volatile("lw   x24, 23 * 4(sp)");
800017d0:	05c12c03          	lw	s8,92(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:361
		__asm volatile("lw   x25, 24 * 4(sp)");
800017d4:	06012c83          	lw	s9,96(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:362
		__asm volatile("lw   x26, 25 * 4(sp)");
800017d8:	06412d03          	lw	s10,100(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:363
		__asm volatile("lw   x27, 26 * 4(sp)");
800017dc:	06812d83          	lw	s11,104(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:364
		__asm volatile("lw   x28, 27 * 4(sp)");
800017e0:	06c12e03          	lw	t3,108(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:365
		__asm volatile("lw   x29, 28 * 4(sp)");
800017e4:	07012e83          	lw	t4,112(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:366
		__asm volatile("lw   x30, 29 * 4(sp)");
800017e8:	07412f03          	lw	t5,116(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:367
		__asm volatile("lw   x31, 30 * 4(sp)");
800017ec:	07812f83          	lw	t6,120(sp)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:369

		__asm volatile("addi	sp, sp, 4 * 32");
800017f0:	08010113          	addi	sp,sp,128
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:374

	    // Moved by Imperas (causing corruption of a5 at this position)
		//PRCI->MSIP[0] = 0x00;

		__asm volatile("mret");
800017f4:	30200073          	mret
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:376
	}
}
800017f8:	00000013          	nop
800017fc:	00c12083          	lw	ra,12(sp)
80001800:	00812403          	lw	s0,8(sp)
80001804:	01010113          	addi	sp,sp,16
80001808:	00008067          	ret

8000180c <vPortYield>:
vPortYield():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:379

void vPortYield( void )
{
8000180c:	ff010113          	addi	sp,sp,-16
80001810:	00112623          	sw	ra,12(sp)
80001814:	00812423          	sw	s0,8(sp)
80001818:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:380
	raise_soft_interrupt();
8000181c:	aedff0ef          	jal	ra,80001308 <raise_soft_interrupt>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/portable/GCC/RISCV/port.c:381
}
80001820:	00000013          	nop
80001824:	00c12083          	lw	ra,12(sp)
80001828:	00812403          	lw	s0,8(sp)
8000182c:	01010113          	addi	sp,sp,16
80001830:	00008067          	ret

80001834 <vListInitialise>:
vListInitialise():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:80
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
80001834:	fe010113          	addi	sp,sp,-32
80001838:	00812e23          	sw	s0,28(sp)
8000183c:	02010413          	addi	s0,sp,32
80001840:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:84
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001844:	fec42783          	lw	a5,-20(s0)
80001848:	00878713          	addi	a4,a5,8
8000184c:	fec42783          	lw	a5,-20(s0)
80001850:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:88

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
80001854:	fec42783          	lw	a5,-20(s0)
80001858:	fff00713          	li	a4,-1
8000185c:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:92

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001860:	fec42783          	lw	a5,-20(s0)
80001864:	00878713          	addi	a4,a5,8
80001868:	fec42783          	lw	a5,-20(s0)
8000186c:	00e7a623          	sw	a4,12(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:93
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001870:	fec42783          	lw	a5,-20(s0)
80001874:	00878713          	addi	a4,a5,8
80001878:	fec42783          	lw	a5,-20(s0)
8000187c:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:95

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
80001880:	fec42783          	lw	a5,-20(s0)
80001884:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:101

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
80001888:	00000013          	nop
8000188c:	01c12403          	lw	s0,28(sp)
80001890:	02010113          	addi	sp,sp,32
80001894:	00008067          	ret

80001898 <vListInitialiseItem>:
vListInitialiseItem():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:105
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
80001898:	fe010113          	addi	sp,sp,-32
8000189c:	00812e23          	sw	s0,28(sp)
800018a0:	02010413          	addi	s0,sp,32
800018a4:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:107
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
800018a8:	fec42783          	lw	a5,-20(s0)
800018ac:	0007a823          	sw	zero,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:113

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
800018b0:	00000013          	nop
800018b4:	01c12403          	lw	s0,28(sp)
800018b8:	02010113          	addi	sp,sp,32
800018bc:	00008067          	ret

800018c0 <vListInsertEnd>:
vListInsertEnd():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:117
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
800018c0:	fd010113          	addi	sp,sp,-48
800018c4:	02812623          	sw	s0,44(sp)
800018c8:	03010413          	addi	s0,sp,48
800018cc:	fca42e23          	sw	a0,-36(s0)
800018d0:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:118
ListItem_t * const pxIndex = pxList->pxIndex;
800018d4:	fdc42783          	lw	a5,-36(s0)
800018d8:	0047a783          	lw	a5,4(a5)
800018dc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:129
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
800018e0:	fd842783          	lw	a5,-40(s0)
800018e4:	fec42703          	lw	a4,-20(s0)
800018e8:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:130
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
800018ec:	fec42783          	lw	a5,-20(s0)
800018f0:	0087a703          	lw	a4,8(a5)
800018f4:	fd842783          	lw	a5,-40(s0)
800018f8:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:135

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
800018fc:	fec42783          	lw	a5,-20(s0)
80001900:	0087a783          	lw	a5,8(a5)
80001904:	fd842703          	lw	a4,-40(s0)
80001908:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:136
	pxIndex->pxPrevious = pxNewListItem;
8000190c:	fec42783          	lw	a5,-20(s0)
80001910:	fd842703          	lw	a4,-40(s0)
80001914:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:139

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
80001918:	fd842783          	lw	a5,-40(s0)
8000191c:	fdc42703          	lw	a4,-36(s0)
80001920:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:141

	( pxList->uxNumberOfItems )++;
80001924:	fdc42783          	lw	a5,-36(s0)
80001928:	0007a783          	lw	a5,0(a5)
8000192c:	00178713          	addi	a4,a5,1
80001930:	fdc42783          	lw	a5,-36(s0)
80001934:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:142
}
80001938:	00000013          	nop
8000193c:	02c12403          	lw	s0,44(sp)
80001940:	03010113          	addi	sp,sp,48
80001944:	00008067          	ret

80001948 <vListInsert>:
vListInsert():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:146
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
80001948:	fd010113          	addi	sp,sp,-48
8000194c:	02812623          	sw	s0,44(sp)
80001950:	03010413          	addi	s0,sp,48
80001954:	fca42e23          	sw	a0,-36(s0)
80001958:	fcb42c23          	sw	a1,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:148
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
8000195c:	fd842783          	lw	a5,-40(s0)
80001960:	0007a783          	lw	a5,0(a5)
80001964:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:164
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
80001968:	fe842703          	lw	a4,-24(s0)
8000196c:	fff00793          	li	a5,-1
80001970:	00f71a63          	bne	a4,a5,80001984 <vListInsert+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:166
	{
		pxIterator = pxList->xListEnd.pxPrevious;
80001974:	fdc42783          	lw	a5,-36(s0)
80001978:	0107a783          	lw	a5,16(a5)
8000197c:	fef42623          	sw	a5,-20(s0)
80001980:	0340006f          	j	800019b4 <vListInsert+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:192
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80001984:	fdc42783          	lw	a5,-36(s0)
80001988:	00878793          	addi	a5,a5,8
8000198c:	fef42623          	sw	a5,-20(s0)
80001990:	0100006f          	j	800019a0 <vListInsert+0x58>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 3)
80001994:	fec42783          	lw	a5,-20(s0)
80001998:	0047a783          	lw	a5,4(a5)
8000199c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:192 (discriminator 1)
800019a0:	fec42783          	lw	a5,-20(s0)
800019a4:	0047a783          	lw	a5,4(a5)
800019a8:	0007a783          	lw	a5,0(a5)
800019ac:	fe842703          	lw	a4,-24(s0)
800019b0:	fef772e3          	bleu	a5,a4,80001994 <vListInsert+0x4c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:199
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
800019b4:	fec42783          	lw	a5,-20(s0)
800019b8:	0047a703          	lw	a4,4(a5)
800019bc:	fd842783          	lw	a5,-40(s0)
800019c0:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:200
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
800019c4:	fd842783          	lw	a5,-40(s0)
800019c8:	0047a783          	lw	a5,4(a5)
800019cc:	fd842703          	lw	a4,-40(s0)
800019d0:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:201
	pxNewListItem->pxPrevious = pxIterator;
800019d4:	fd842783          	lw	a5,-40(s0)
800019d8:	fec42703          	lw	a4,-20(s0)
800019dc:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:202
	pxIterator->pxNext = pxNewListItem;
800019e0:	fec42783          	lw	a5,-20(s0)
800019e4:	fd842703          	lw	a4,-40(s0)
800019e8:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:206

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
800019ec:	fd842783          	lw	a5,-40(s0)
800019f0:	fdc42703          	lw	a4,-36(s0)
800019f4:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:208

	( pxList->uxNumberOfItems )++;
800019f8:	fdc42783          	lw	a5,-36(s0)
800019fc:	0007a783          	lw	a5,0(a5)
80001a00:	00178713          	addi	a4,a5,1
80001a04:	fdc42783          	lw	a5,-36(s0)
80001a08:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:209
}
80001a0c:	00000013          	nop
80001a10:	02c12403          	lw	s0,44(sp)
80001a14:	03010113          	addi	sp,sp,48
80001a18:	00008067          	ret

80001a1c <uxListRemove>:
uxListRemove():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:213
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
80001a1c:	fd010113          	addi	sp,sp,-48
80001a20:	02812623          	sw	s0,44(sp)
80001a24:	03010413          	addi	s0,sp,48
80001a28:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:216
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
80001a2c:	fdc42783          	lw	a5,-36(s0)
80001a30:	0107a783          	lw	a5,16(a5)
80001a34:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:218

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
80001a38:	fdc42783          	lw	a5,-36(s0)
80001a3c:	0047a783          	lw	a5,4(a5)
80001a40:	fdc42703          	lw	a4,-36(s0)
80001a44:	00872703          	lw	a4,8(a4) # 44000008 <RAM_SIZE+0x43f80008>
80001a48:	00e7a423          	sw	a4,8(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:219
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
80001a4c:	fdc42783          	lw	a5,-36(s0)
80001a50:	0087a783          	lw	a5,8(a5)
80001a54:	fdc42703          	lw	a4,-36(s0)
80001a58:	00472703          	lw	a4,4(a4)
80001a5c:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:225

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
80001a60:	fec42783          	lw	a5,-20(s0)
80001a64:	0047a783          	lw	a5,4(a5)
80001a68:	fdc42703          	lw	a4,-36(s0)
80001a6c:	00f71a63          	bne	a4,a5,80001a80 <uxListRemove+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:227
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
80001a70:	fdc42783          	lw	a5,-36(s0)
80001a74:	0087a703          	lw	a4,8(a5)
80001a78:	fec42783          	lw	a5,-20(s0)
80001a7c:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:234
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
80001a80:	fdc42783          	lw	a5,-36(s0)
80001a84:	0007a823          	sw	zero,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:235
	( pxList->uxNumberOfItems )--;
80001a88:	fec42783          	lw	a5,-20(s0)
80001a8c:	0007a783          	lw	a5,0(a5)
80001a90:	fff78713          	addi	a4,a5,-1
80001a94:	fec42783          	lw	a5,-20(s0)
80001a98:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:237

	return pxList->uxNumberOfItems;
80001a9c:	fec42783          	lw	a5,-20(s0)
80001aa0:	0007a783          	lw	a5,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/list.c:238
}
80001aa4:	00078513          	mv	a0,a5
80001aa8:	02c12403          	lw	s0,44(sp)
80001aac:	03010113          	addi	sp,sp,48
80001ab0:	00008067          	ret

80001ab4 <memcpy>:
memcpy():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:6
#include <string.h>
#include <stdint.h>
#include <ctype.h>

void* memcpy(void* dest, const void* src, size_t len)
{
80001ab4:	fd010113          	addi	sp,sp,-48
80001ab8:	02812623          	sw	s0,44(sp)
80001abc:	03010413          	addi	s0,sp,48
80001ac0:	fca42e23          	sw	a0,-36(s0)
80001ac4:	fcb42c23          	sw	a1,-40(s0)
80001ac8:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:7
  const char* s = src;
80001acc:	fd842783          	lw	a5,-40(s0)
80001ad0:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:8
  char *d = dest;
80001ad4:	fdc42783          	lw	a5,-36(s0)
80001ad8:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:10

  if ((((uintptr_t)dest | (uintptr_t)src) & (sizeof(uintptr_t)-1)) == 0) {
80001adc:	fdc42703          	lw	a4,-36(s0)
80001ae0:	fd842783          	lw	a5,-40(s0)
80001ae4:	00f767b3          	or	a5,a4,a5
80001ae8:	0037f793          	andi	a5,a5,3
80001aec:	06079663          	bnez	a5,80001b58 <memcpy+0xa4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:11
    while ((void*)d < (dest + len - (sizeof(uintptr_t)-1))) {
80001af0:	02c0006f          	j	80001b1c <memcpy+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:12
      *(uintptr_t*)d = *(const uintptr_t*)s;
80001af4:	fec42783          	lw	a5,-20(s0)
80001af8:	0007a703          	lw	a4,0(a5)
80001afc:	fe842783          	lw	a5,-24(s0)
80001b00:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:13
      d += sizeof(uintptr_t);
80001b04:	fe842783          	lw	a5,-24(s0)
80001b08:	00478793          	addi	a5,a5,4
80001b0c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:14
      s += sizeof(uintptr_t);
80001b10:	fec42783          	lw	a5,-20(s0)
80001b14:	00478793          	addi	a5,a5,4
80001b18:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:11
    while ((void*)d < (dest + len - (sizeof(uintptr_t)-1))) {
80001b1c:	fd442783          	lw	a5,-44(s0)
80001b20:	ffd78793          	addi	a5,a5,-3
80001b24:	fdc42703          	lw	a4,-36(s0)
80001b28:	00f707b3          	add	a5,a4,a5
80001b2c:	fe842703          	lw	a4,-24(s0)
80001b30:	fcf762e3          	bltu	a4,a5,80001af4 <memcpy+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:18
    }
  }

  while (d < (char*)(dest + len))
80001b34:	0240006f          	j	80001b58 <memcpy+0xa4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:19
    *d++ = *s++;
80001b38:	fec42703          	lw	a4,-20(s0)
80001b3c:	00170793          	addi	a5,a4,1
80001b40:	fef42623          	sw	a5,-20(s0)
80001b44:	fe842783          	lw	a5,-24(s0)
80001b48:	00178693          	addi	a3,a5,1
80001b4c:	fed42423          	sw	a3,-24(s0)
80001b50:	00070703          	lb	a4,0(a4)
80001b54:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:18
  while (d < (char*)(dest + len))
80001b58:	fdc42703          	lw	a4,-36(s0)
80001b5c:	fd442783          	lw	a5,-44(s0)
80001b60:	00f707b3          	add	a5,a4,a5
80001b64:	fe842703          	lw	a4,-24(s0)
80001b68:	fcf768e3          	bltu	a4,a5,80001b38 <memcpy+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:21

  return dest;
80001b6c:	fdc42783          	lw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:22
}
80001b70:	00078513          	mv	a0,a5
80001b74:	02c12403          	lw	s0,44(sp)
80001b78:	03010113          	addi	sp,sp,48
80001b7c:	00008067          	ret

80001b80 <memset>:
memset():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:25

void* memset(void* dest, int byte, size_t len)
{
80001b80:	fd010113          	addi	sp,sp,-48
80001b84:	02812623          	sw	s0,44(sp)
80001b88:	03010413          	addi	s0,sp,48
80001b8c:	fca42e23          	sw	a0,-36(s0)
80001b90:	fcb42c23          	sw	a1,-40(s0)
80001b94:	fcc42a23          	sw	a2,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:26
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
80001b98:	fdc42703          	lw	a4,-36(s0)
80001b9c:	fd442783          	lw	a5,-44(s0)
80001ba0:	00f767b3          	or	a5,a4,a5
80001ba4:	0037f793          	andi	a5,a5,3
80001ba8:	06079863          	bnez	a5,80001c18 <memset+0x98>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:27
    uintptr_t word = byte & 0xFF;
80001bac:	fd842783          	lw	a5,-40(s0)
80001bb0:	0ff7f793          	andi	a5,a5,255
80001bb4:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:28
    word |= word << 8;
80001bb8:	fe442783          	lw	a5,-28(s0)
80001bbc:	00879793          	slli	a5,a5,0x8
80001bc0:	fe442703          	lw	a4,-28(s0)
80001bc4:	00f767b3          	or	a5,a4,a5
80001bc8:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:29
    word |= word << 16;
80001bcc:	fe442783          	lw	a5,-28(s0)
80001bd0:	01079793          	slli	a5,a5,0x10
80001bd4:	fe442703          	lw	a4,-28(s0)
80001bd8:	00f767b3          	or	a5,a4,a5
80001bdc:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:32
    word |= word << 16 << 16;

    uintptr_t *d = dest;
80001be0:	fdc42783          	lw	a5,-36(s0)
80001be4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001be8:	0180006f          	j	80001c00 <memset+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:34
      *d++ = word;
80001bec:	fec42783          	lw	a5,-20(s0)
80001bf0:	00478713          	addi	a4,a5,4
80001bf4:	fee42623          	sw	a4,-20(s0)
80001bf8:	fe442703          	lw	a4,-28(s0)
80001bfc:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:33
    while (d < (uintptr_t*)(dest + len))
80001c00:	fdc42703          	lw	a4,-36(s0)
80001c04:	fd442783          	lw	a5,-44(s0)
80001c08:	00f707b3          	add	a5,a4,a5
80001c0c:	fec42703          	lw	a4,-20(s0)
80001c10:	fcf76ee3          	bltu	a4,a5,80001bec <memset+0x6c>
80001c14:	0400006f          	j	80001c54 <memset+0xd4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:36
  } else {
    char *d = dest;
80001c18:	fdc42783          	lw	a5,-36(s0)
80001c1c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001c20:	0200006f          	j	80001c40 <memset+0xc0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:38
      *d++ = byte;
80001c24:	fe842783          	lw	a5,-24(s0)
80001c28:	00178713          	addi	a4,a5,1
80001c2c:	fee42423          	sw	a4,-24(s0)
80001c30:	fd842703          	lw	a4,-40(s0)
80001c34:	01871713          	slli	a4,a4,0x18
80001c38:	41875713          	srai	a4,a4,0x18
80001c3c:	00e78023          	sb	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:37
    while (d < (char*)(dest + len))
80001c40:	fdc42703          	lw	a4,-36(s0)
80001c44:	fd442783          	lw	a5,-44(s0)
80001c48:	00f707b3          	add	a5,a4,a5
80001c4c:	fe842703          	lw	a4,-24(s0)
80001c50:	fcf76ae3          	bltu	a4,a5,80001c24 <memset+0xa4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:40
  }
  return dest;
80001c54:	fdc42783          	lw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:41
}
80001c58:	00078513          	mv	a0,a5
80001c5c:	02c12403          	lw	s0,44(sp)
80001c60:	03010113          	addi	sp,sp,48
80001c64:	00008067          	ret

80001c68 <strlen>:
strlen():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:44

size_t strlen(const char *s)
{
80001c68:	fd010113          	addi	sp,sp,-48
80001c6c:	02812623          	sw	s0,44(sp)
80001c70:	03010413          	addi	s0,sp,48
80001c74:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:45
  const char *p = s;
80001c78:	fdc42783          	lw	a5,-36(s0)
80001c7c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001c80:	0100006f          	j	80001c90 <strlen+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:47
    p++;
80001c84:	fec42783          	lw	a5,-20(s0)
80001c88:	00178793          	addi	a5,a5,1
80001c8c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:46
  while (*p)
80001c90:	fec42783          	lw	a5,-20(s0)
80001c94:	00078783          	lb	a5,0(a5)
80001c98:	fe0796e3          	bnez	a5,80001c84 <strlen+0x1c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:48
  return p - s;
80001c9c:	fec42703          	lw	a4,-20(s0)
80001ca0:	fdc42783          	lw	a5,-36(s0)
80001ca4:	40f707b3          	sub	a5,a4,a5
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/string.c:49
}
80001ca8:	00078513          	mv	a0,a5
80001cac:	02c12403          	lw	s0,44(sp)
80001cb0:	03010113          	addi	sp,sp,48
80001cb4:	00008067          	ret

80001cb8 <xTaskGenericCreate>:
xTaskGenericCreate():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:551

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
80001cb8:	fc010113          	addi	sp,sp,-64
80001cbc:	02112e23          	sw	ra,60(sp)
80001cc0:	02812c23          	sw	s0,56(sp)
80001cc4:	04010413          	addi	s0,sp,64
80001cc8:	fca42e23          	sw	a0,-36(s0)
80001ccc:	fcb42c23          	sw	a1,-40(s0)
80001cd0:	fcd42823          	sw	a3,-48(s0)
80001cd4:	fce42623          	sw	a4,-52(s0)
80001cd8:	fcf42423          	sw	a5,-56(s0)
80001cdc:	fd042223          	sw	a6,-60(s0)
80001ce0:	fd142023          	sw	a7,-64(s0)
80001ce4:	00060793          	mv	a5,a2
80001ce8:	fcf41b23          	sh	a5,-42(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:556
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
80001cec:	fdc42783          	lw	a5,-36(s0)
80001cf0:	00079663          	bnez	a5,80001cfc <xTaskGenericCreate+0x44>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:556 (discriminator 1)
80001cf4:	30047073          	csrci	mstatus,8
80001cf8:	0000006f          	j	80001cf8 <xTaskGenericCreate+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:557
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
80001cfc:	fcc42703          	lw	a4,-52(s0)
80001d00:	00400793          	li	a5,4
80001d04:	00e7f663          	bleu	a4,a5,80001d10 <xTaskGenericCreate+0x58>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 1)
80001d08:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:557 (discriminator 2)
80001d0c:	0000006f          	j	80001d0c <xTaskGenericCreate+0x54>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:561

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
80001d10:	fd645783          	lhu	a5,-42(s0)
80001d14:	fc442583          	lw	a1,-60(s0)
80001d18:	00078513          	mv	a0,a5
80001d1c:	281000ef          	jal	ra,8000279c <prvAllocateTCBAndStack>
80001d20:	fea42423          	sw	a0,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:562
	if( pxNewTCB != NULL )
80001d24:	fe842783          	lw	a5,-24(s0)
80001d28:	16078263          	beqz	a5,80001e8c <xTaskGenericCreate+0x1d4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:598
		stack grows from high memory to low (as per the 80x86) or vice versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
80001d2c:	fe842783          	lw	a5,-24(s0)
80001d30:	0307a703          	lw	a4,48(a5)
80001d34:	fd645683          	lhu	a3,-42(s0)
80001d38:	400007b7          	lui	a5,0x40000
80001d3c:	fff78793          	addi	a5,a5,-1 # 3fffffff <RAM_SIZE+0x3ff7ffff>
80001d40:	00f687b3          	add	a5,a3,a5
80001d44:	00279793          	slli	a5,a5,0x2
80001d48:	00f707b3          	add	a5,a4,a5
80001d4c:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:599
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
80001d50:	fe442783          	lw	a5,-28(s0)
80001d54:	ffc7f793          	andi	a5,a5,-4
80001d58:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:602

			/* Check the alignment of the calculated top of stack is correct. */
			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
80001d5c:	fe442783          	lw	a5,-28(s0)
80001d60:	0037f793          	andi	a5,a5,3
80001d64:	00078663          	beqz	a5,80001d70 <xTaskGenericCreate+0xb8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 1)
80001d68:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:602 (discriminator 3)
80001d6c:	0000006f          	j	80001d6c <xTaskGenericCreate+0xb4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:619
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif /* portSTACK_GROWTH */

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
80001d70:	fd645783          	lhu	a5,-42(s0)
80001d74:	00078713          	mv	a4,a5
80001d78:	fc042683          	lw	a3,-64(s0)
80001d7c:	fcc42603          	lw	a2,-52(s0)
80001d80:	fd842583          	lw	a1,-40(s0)
80001d84:	fe842503          	lw	a0,-24(s0)
80001d88:	6f4000ef          	jal	ra,8000247c <prvInitialiseTCBVariables>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:631
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
80001d8c:	fd042603          	lw	a2,-48(s0)
80001d90:	fdc42583          	lw	a1,-36(s0)
80001d94:	fe442503          	lw	a0,-28(s0)
80001d98:	ff4ff0ef          	jal	ra,8000158c <pxPortInitialiseStack>
80001d9c:	00050713          	mv	a4,a0
80001da0:	fe842783          	lw	a5,-24(s0)
80001da4:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:635
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
80001da8:	fc842783          	lw	a5,-56(s0)
80001dac:	00078863          	beqz	a5,80001dbc <xTaskGenericCreate+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:640
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
80001db0:	fc842783          	lw	a5,-56(s0)
80001db4:	fe842703          	lw	a4,-24(s0)
80001db8:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:649
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
80001dbc:	d98ff0ef          	jal	ra,80001354 <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:651
		{
			uxCurrentNumberOfTasks++;
80001dc0:	93c1a783          	lw	a5,-1732(gp) # 8000348c <uxCurrentNumberOfTasks>
80001dc4:	00178713          	addi	a4,a5,1
80001dc8:	92e1ae23          	sw	a4,-1732(gp) # 8000348c <uxCurrentNumberOfTasks>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:652
			if( pxCurrentTCB == NULL )
80001dcc:	92c1a783          	lw	a5,-1748(gp) # 8000347c <pxCurrentTCB>
80001dd0:	02079063          	bnez	a5,80001df0 <xTaskGenericCreate+0x138>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:656
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
80001dd4:	fe842703          	lw	a4,-24(s0)
80001dd8:	92e1a623          	sw	a4,-1748(gp) # 8000347c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:658

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
80001ddc:	93c1a703          	lw	a4,-1732(gp) # 8000348c <uxCurrentNumberOfTasks>
80001de0:	00100793          	li	a5,1
80001de4:	02f71663          	bne	a4,a5,80001e10 <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:663
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
80001de8:	7cc000ef          	jal	ra,800025b4 <prvInitialiseTaskLists>
80001dec:	0240006f          	j	80001e10 <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:675
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
80001df0:	9481a783          	lw	a5,-1720(gp) # 80003498 <xSchedulerRunning>
80001df4:	00079e63          	bnez	a5,80001e10 <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:677
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
80001df8:	92c1a783          	lw	a5,-1748(gp) # 8000347c <pxCurrentTCB>
80001dfc:	02c7a783          	lw	a5,44(a5)
80001e00:	fcc42703          	lw	a4,-52(s0)
80001e04:	00f76663          	bltu	a4,a5,80001e10 <xTaskGenericCreate+0x158>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:679
					{
						pxCurrentTCB = pxNewTCB;
80001e08:	fe842703          	lw	a4,-24(s0)
80001e0c:	92e1a623          	sw	a4,-1748(gp) # 8000347c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:692
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
80001e10:	9581a783          	lw	a5,-1704(gp) # 800034a8 <uxTaskNumber>
80001e14:	00178713          	addi	a4,a5,1
80001e18:	94e1ac23          	sw	a4,-1704(gp) # 800034a8 <uxTaskNumber>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:697

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
80001e1c:	9581a703          	lw	a4,-1704(gp) # 800034a8 <uxTaskNumber>
80001e20:	fe842783          	lw	a5,-24(s0)
80001e24:	04e7a423          	sw	a4,72(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:702
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
80001e28:	fe842783          	lw	a5,-24(s0)
80001e2c:	02c7a703          	lw	a4,44(a5)
80001e30:	9441a783          	lw	a5,-1724(gp) # 80003494 <uxTopReadyPriority>
80001e34:	00e7f863          	bleu	a4,a5,80001e44 <xTaskGenericCreate+0x18c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 1)
80001e38:	fe842783          	lw	a5,-24(s0)
80001e3c:	02c7a703          	lw	a4,44(a5)
80001e40:	94e1a223          	sw	a4,-1724(gp) # 80003494 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:702 (discriminator 3)
80001e44:	fe842783          	lw	a5,-24(s0)
80001e48:	02c7a703          	lw	a4,44(a5)
80001e4c:	00070793          	mv	a5,a4
80001e50:	00279793          	slli	a5,a5,0x2
80001e54:	00e787b3          	add	a5,a5,a4
80001e58:	00279793          	slli	a5,a5,0x2
80001e5c:	8001c737          	lui	a4,0x8001c
80001e60:	4c070713          	addi	a4,a4,1216 # 8001c4c0 <__stack_top+0xfffdff20>
80001e64:	00e78733          	add	a4,a5,a4
80001e68:	fe842783          	lw	a5,-24(s0)
80001e6c:	00478793          	addi	a5,a5,4
80001e70:	00078593          	mv	a1,a5
80001e74:	00070513          	mv	a0,a4
80001e78:	a49ff0ef          	jal	ra,800018c0 <vListInsertEnd>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:704 (discriminator 3)

			xReturn = pdPASS;
80001e7c:	00100793          	li	a5,1
80001e80:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:707 (discriminator 3)
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
80001e84:	d04ff0ef          	jal	ra,80001388 <vPortExitCritical>
80001e88:	00c0006f          	j	80001e94 <xTaskGenericCreate+0x1dc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:711
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
80001e8c:	fff00793          	li	a5,-1
80001e90:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:715
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
80001e94:	fec42703          	lw	a4,-20(s0)
80001e98:	00100793          	li	a5,1
80001e9c:	02f71063          	bne	a4,a5,80001ebc <xTaskGenericCreate+0x204>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:717
	{
		if( xSchedulerRunning != pdFALSE )
80001ea0:	9481a783          	lw	a5,-1720(gp) # 80003498 <xSchedulerRunning>
80001ea4:	00078c63          	beqz	a5,80001ebc <xTaskGenericCreate+0x204>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:721
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
80001ea8:	92c1a783          	lw	a5,-1748(gp) # 8000347c <pxCurrentTCB>
80001eac:	02c7a783          	lw	a5,44(a5)
80001eb0:	fcc42703          	lw	a4,-52(s0)
80001eb4:	00e7f463          	bleu	a4,a5,80001ebc <xTaskGenericCreate+0x204>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:723
			{
				taskYIELD_IF_USING_PREEMPTION();
80001eb8:	955ff0ef          	jal	ra,8000180c <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:736
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
80001ebc:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:737
}
80001ec0:	00078513          	mv	a0,a5
80001ec4:	03c12083          	lw	ra,60(sp)
80001ec8:	03812403          	lw	s0,56(sp)
80001ecc:	04010113          	addi	sp,sp,64
80001ed0:	00008067          	ret

80001ed4 <vTaskDelay>:
vTaskDelay():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:921
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
80001ed4:	fd010113          	addi	sp,sp,-48
80001ed8:	02112623          	sw	ra,44(sp)
80001edc:	02812423          	sw	s0,40(sp)
80001ee0:	03010413          	addi	s0,sp,48
80001ee4:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:923
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;
80001ee8:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:927


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
80001eec:	fdc42783          	lw	a5,-36(s0)
80001ef0:	04078463          	beqz	a5,80001f38 <vTaskDelay+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:929
		{
			configASSERT( uxSchedulerSuspended == 0 );
80001ef4:	9601a783          	lw	a5,-1696(gp) # 800034b0 <uxSchedulerSuspended>
80001ef8:	00078663          	beqz	a5,80001f04 <vTaskDelay+0x30>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:929 (discriminator 1)
80001efc:	30047073          	csrci	mstatus,8
80001f00:	0000006f          	j	80001f00 <vTaskDelay+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:930
			vTaskSuspendAll();
80001f04:	0e4000ef          	jal	ra,80001fe8 <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:944
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
80001f08:	9401a783          	lw	a5,-1728(gp) # 80003490 <xTickCount>
80001f0c:	fdc42703          	lw	a4,-36(s0)
80001f10:	00f707b3          	add	a5,a4,a5
80001f14:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:949

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
80001f18:	92c1a783          	lw	a5,-1748(gp) # 8000347c <pxCurrentTCB>
80001f1c:	00478793          	addi	a5,a5,4
80001f20:	00078513          	mv	a0,a5
80001f24:	af9ff0ef          	jal	ra,80001a1c <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:960
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
80001f28:	fe842503          	lw	a0,-24(s0)
80001f2c:	7e8000ef          	jal	ra,80002714 <prvAddCurrentTaskToDelayedList>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:962
			}
			xAlreadyYielded = xTaskResumeAll();
80001f30:	0e0000ef          	jal	ra,80002010 <xTaskResumeAll>
80001f34:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:971
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
80001f38:	fec42783          	lw	a5,-20(s0)
80001f3c:	00079463          	bnez	a5,80001f44 <vTaskDelay+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:973
		{
			portYIELD_WITHIN_API();
80001f40:	8cdff0ef          	jal	ra,8000180c <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:979
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
80001f44:	00000013          	nop
80001f48:	02c12083          	lw	ra,44(sp)
80001f4c:	02812403          	lw	s0,40(sp)
80001f50:	03010113          	addi	sp,sp,48
80001f54:	00008067          	ret

80001f58 <vTaskStartScheduler>:
vTaskStartScheduler():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1542

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
80001f58:	fe010113          	addi	sp,sp,-32
80001f5c:	00112e23          	sw	ra,28(sp)
80001f60:	00812c23          	sw	s0,24(sp)
80001f64:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1555
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
80001f68:	00000893          	li	a7,0
80001f6c:	00000813          	li	a6,0
80001f70:	00000793          	li	a5,0
80001f74:	00000713          	li	a4,0
80001f78:	00000693          	li	a3,0
80001f7c:	40000613          	li	a2,1024
80001f80:	800035b7          	lui	a1,0x80003
80001f84:	21058593          	addi	a1,a1,528 # 80003210 <__stack_top+0xfffc6c70>
80001f88:	80002537          	lui	a0,0x80002
80001f8c:	44850513          	addi	a0,a0,1096 # 80002448 <__stack_top+0xfffc5ea8>
80001f90:	d29ff0ef          	jal	ra,80001cb8 <xTaskGenericCreate>
80001f94:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1572
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
80001f98:	fec42703          	lw	a4,-20(s0)
80001f9c:	00100793          	li	a5,1
80001fa0:	02f71263          	bne	a4,a5,80001fc4 <vTaskStartScheduler+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1579
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
80001fa4:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1589
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
80001fa8:	fff00713          	li	a4,-1
80001fac:	94e1ae23          	sw	a4,-1700(gp) # 800034ac <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1590
		xSchedulerRunning = pdTRUE;
80001fb0:	00100713          	li	a4,1
80001fb4:	94e1a423          	sw	a4,-1720(gp) # 80003498 <xSchedulerRunning>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1591
		xTickCount = ( TickType_t ) 0U;
80001fb8:	9401a023          	sw	zero,-1728(gp) # 80003490 <xTickCount>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1600
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
80001fbc:	f30ff0ef          	jal	ra,800016ec <xPortStartScheduler>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
80001fc0:	0140006f          	j	80001fd4 <vTaskStartScheduler+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615
		configASSERT( xReturn );
80001fc4:	fec42783          	lw	a5,-20(s0)
80001fc8:	00079663          	bnez	a5,80001fd4 <vTaskStartScheduler+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 1)
80001fcc:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1615 (discriminator 2)
80001fd0:	0000006f          	j	80001fd0 <vTaskStartScheduler+0x78>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1617
}
80001fd4:	00000013          	nop
80001fd8:	01c12083          	lw	ra,28(sp)
80001fdc:	01812403          	lw	s0,24(sp)
80001fe0:	02010113          	addi	sp,sp,32
80001fe4:	00008067          	ret

80001fe8 <vTaskSuspendAll>:
vTaskSuspendAll():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1632
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
80001fe8:	ff010113          	addi	sp,sp,-16
80001fec:	00812623          	sw	s0,12(sp)
80001ff0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1637
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
80001ff4:	9601a783          	lw	a5,-1696(gp) # 800034b0 <uxSchedulerSuspended>
80001ff8:	00178713          	addi	a4,a5,1
80001ffc:	96e1a023          	sw	a4,-1696(gp) # 800034b0 <uxSchedulerSuspended>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1638
}
80002000:	00000013          	nop
80002004:	00c12403          	lw	s0,12(sp)
80002008:	01010113          	addi	sp,sp,16
8000200c:	00008067          	ret

80002010 <xTaskResumeAll>:
xTaskResumeAll():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1670

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
80002010:	fe010113          	addi	sp,sp,-32
80002014:	00112e23          	sw	ra,28(sp)
80002018:	00812c23          	sw	s0,24(sp)
8000201c:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1672
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
80002020:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
80002024:	9601a783          	lw	a5,-1696(gp) # 800034b0 <uxSchedulerSuspended>
80002028:	00079663          	bnez	a5,80002034 <xTaskResumeAll+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1676 (discriminator 1)
8000202c:	30047073          	csrci	mstatus,8
80002030:	0000006f          	j	80002030 <xTaskResumeAll+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1683
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
80002034:	b20ff0ef          	jal	ra,80001354 <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1685
	{
		--uxSchedulerSuspended;
80002038:	9601a783          	lw	a5,-1696(gp) # 800034b0 <uxSchedulerSuspended>
8000203c:	fff78713          	addi	a4,a5,-1
80002040:	96e1a023          	sw	a4,-1696(gp) # 800034b0 <uxSchedulerSuspended>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1687

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80002044:	9601a783          	lw	a5,-1696(gp) # 800034b0 <uxSchedulerSuspended>
80002048:	10079663          	bnez	a5,80002154 <xTaskResumeAll+0x144>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1689
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
8000204c:	93c1a783          	lw	a5,-1732(gp) # 8000348c <uxCurrentNumberOfTasks>
80002050:	10078263          	beqz	a5,80002154 <xTaskResumeAll+0x144>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
80002054:	0a80006f          	j	800020fc <xTaskResumeAll+0xec>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1695
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
80002058:	8001c7b7          	lui	a5,0x8001c
8000205c:	54c78793          	addi	a5,a5,1356 # 8001c54c <__stack_top+0xfffdffac>
80002060:	00c7a783          	lw	a5,12(a5)
80002064:	00c7a783          	lw	a5,12(a5)
80002068:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1696
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
8000206c:	fe842783          	lw	a5,-24(s0)
80002070:	01878793          	addi	a5,a5,24
80002074:	00078513          	mv	a0,a5
80002078:	9a5ff0ef          	jal	ra,80001a1c <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1697
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
8000207c:	fe842783          	lw	a5,-24(s0)
80002080:	00478793          	addi	a5,a5,4
80002084:	00078513          	mv	a0,a5
80002088:	995ff0ef          	jal	ra,80001a1c <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698
					prvAddTaskToReadyList( pxTCB );
8000208c:	fe842783          	lw	a5,-24(s0)
80002090:	02c7a703          	lw	a4,44(a5)
80002094:	9441a783          	lw	a5,-1724(gp) # 80003494 <uxTopReadyPriority>
80002098:	00e7f863          	bleu	a4,a5,800020a8 <xTaskResumeAll+0x98>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 1)
8000209c:	fe842783          	lw	a5,-24(s0)
800020a0:	02c7a703          	lw	a4,44(a5)
800020a4:	94e1a223          	sw	a4,-1724(gp) # 80003494 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1698 (discriminator 3)
800020a8:	fe842783          	lw	a5,-24(s0)
800020ac:	02c7a703          	lw	a4,44(a5)
800020b0:	00070793          	mv	a5,a4
800020b4:	00279793          	slli	a5,a5,0x2
800020b8:	00e787b3          	add	a5,a5,a4
800020bc:	00279793          	slli	a5,a5,0x2
800020c0:	8001c737          	lui	a4,0x8001c
800020c4:	4c070713          	addi	a4,a4,1216 # 8001c4c0 <__stack_top+0xfffdff20>
800020c8:	00e78733          	add	a4,a5,a4
800020cc:	fe842783          	lw	a5,-24(s0)
800020d0:	00478793          	addi	a5,a5,4
800020d4:	00078593          	mv	a1,a5
800020d8:	00070513          	mv	a0,a4
800020dc:	fe4ff0ef          	jal	ra,800018c0 <vListInsertEnd>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1702 (discriminator 3)

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
800020e0:	fe842783          	lw	a5,-24(s0)
800020e4:	02c7a703          	lw	a4,44(a5)
800020e8:	92c1a783          	lw	a5,-1748(gp) # 8000347c <pxCurrentTCB>
800020ec:	02c7a783          	lw	a5,44(a5)
800020f0:	00f76663          	bltu	a4,a5,800020fc <xTaskResumeAll+0xec>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1704
					{
						xYieldPending = pdTRUE;
800020f4:	00100713          	li	a4,1
800020f8:	94e1a823          	sw	a4,-1712(gp) # 800034a0 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1693
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
800020fc:	8001c7b7          	lui	a5,0x8001c
80002100:	54c7a783          	lw	a5,1356(a5) # 8001c54c <__stack_top+0xfffdffac>
80002104:	f4079ae3          	bnez	a5,80002058 <xTaskResumeAll+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1716

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
80002108:	94c1a783          	lw	a5,-1716(gp) # 8000349c <uxPendedTicks>
8000210c:	02078863          	beqz	a5,8000213c <xTaskResumeAll+0x12c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
80002110:	0240006f          	j	80002134 <xTaskResumeAll+0x124>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1720
					{
						if( xTaskIncrementTick() != pdFALSE )
80002114:	05c000ef          	jal	ra,80002170 <xTaskIncrementTick>
80002118:	00050793          	mv	a5,a0
8000211c:	00078663          	beqz	a5,80002128 <xTaskResumeAll+0x118>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1722
						{
							xYieldPending = pdTRUE;
80002120:	00100713          	li	a4,1
80002124:	94e1a823          	sw	a4,-1712(gp) # 800034a0 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1728
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
80002128:	94c1a783          	lw	a5,-1716(gp) # 8000349c <uxPendedTicks>
8000212c:	fff78713          	addi	a4,a5,-1
80002130:	94e1a623          	sw	a4,-1716(gp) # 8000349c <uxPendedTicks>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1718
					while( uxPendedTicks > ( UBaseType_t ) 0U )
80002134:	94c1a783          	lw	a5,-1716(gp) # 8000349c <uxPendedTicks>
80002138:	fc079ee3          	bnez	a5,80002114 <xTaskResumeAll+0x104>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1736
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
8000213c:	9501a703          	lw	a4,-1712(gp) # 800034a0 <xYieldPending>
80002140:	00100793          	li	a5,1
80002144:	00f71863          	bne	a4,a5,80002154 <xTaskResumeAll+0x144>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1740
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
80002148:	00100793          	li	a5,1
8000214c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1743
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
80002150:	ebcff0ef          	jal	ra,8000180c <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1756
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
80002154:	a34ff0ef          	jal	ra,80001388 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1758

	return xAlreadyYielded;
80002158:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1759
}
8000215c:	00078513          	mv	a0,a5
80002160:	01c12083          	lw	ra,28(sp)
80002164:	01812403          	lw	s0,24(sp)
80002168:	02010113          	addi	sp,sp,32
8000216c:	00008067          	ret

80002170 <xTaskIncrementTick>:
xTaskIncrementTick():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1938

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
80002170:	fd010113          	addi	sp,sp,-48
80002174:	02112623          	sw	ra,44(sp)
80002178:	02812423          	sw	s0,40(sp)
8000217c:	03010413          	addi	s0,sp,48
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1941
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
80002180:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1947

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80002184:	9601a783          	lw	a5,-1696(gp) # 800034b0 <uxSchedulerSuspended>
80002188:	1a079063          	bnez	a5,80002328 <xTaskIncrementTick+0x1b8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1951
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
8000218c:	9401a783          	lw	a5,-1728(gp) # 80003490 <xTickCount>
80002190:	00178713          	addi	a4,a5,1
80002194:	94e1a023          	sw	a4,-1728(gp) # 80003490 <xTickCount>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1956

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
80002198:	9401a783          	lw	a5,-1728(gp) # 80003490 <xTickCount>
8000219c:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1958

			if( xConstTickCount == ( TickType_t ) 0U )
800021a0:	fe842783          	lw	a5,-24(s0)
800021a4:	04079063          	bnez	a5,800021e4 <xTaskIncrementTick+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960
			{
				taskSWITCH_DELAYED_LISTS();
800021a8:	9301a783          	lw	a5,-1744(gp) # 80003480 <pxDelayedTaskList>
800021ac:	0007a783          	lw	a5,0(a5)
800021b0:	00078663          	beqz	a5,800021bc <xTaskIncrementTick+0x4c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 1)
800021b4:	30047073          	csrci	mstatus,8
800021b8:	0000006f          	j	800021b8 <xTaskIncrementTick+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1960 (discriminator 2)
800021bc:	9301a783          	lw	a5,-1744(gp) # 80003480 <pxDelayedTaskList>
800021c0:	fef42223          	sw	a5,-28(s0)
800021c4:	9341a703          	lw	a4,-1740(gp) # 80003484 <pxOverflowDelayedTaskList>
800021c8:	92e1a823          	sw	a4,-1744(gp) # 80003480 <pxDelayedTaskList>
800021cc:	fe442703          	lw	a4,-28(s0)
800021d0:	92e1aa23          	sw	a4,-1740(gp) # 80003484 <pxOverflowDelayedTaskList>
800021d4:	9541a783          	lw	a5,-1708(gp) # 800034a4 <xNumOfOverflows>
800021d8:	00178713          	addi	a4,a5,1
800021dc:	94e1aa23          	sw	a4,-1708(gp) # 800034a4 <xNumOfOverflows>
800021e0:	6bc000ef          	jal	ra,8000289c <prvResetNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1971

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
800021e4:	95c1a783          	lw	a5,-1700(gp) # 800034ac <xNextTaskUnblockTime>
800021e8:	fe842703          	lw	a4,-24(s0)
800021ec:	10f76063          	bltu	a4,a5,800022ec <xTaskIncrementTick+0x17c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
800021f0:	9301a783          	lw	a5,-1744(gp) # 80003480 <pxDelayedTaskList>
800021f4:	0007a783          	lw	a5,0(a5)
800021f8:	00079663          	bnez	a5,80002204 <xTaskIncrementTick+0x94>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 1)
800021fc:	00100793          	li	a5,1
80002200:	0080006f          	j	80002208 <xTaskIncrementTick+0x98>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 2)
80002204:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975 (discriminator 4)
80002208:	00078863          	beqz	a5,80002218 <xTaskIncrementTick+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1982
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
8000220c:	fff00713          	li	a4,-1
80002210:	94e1ae23          	sw	a4,-1700(gp) # 800034ac <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1983
						break;
80002214:	0d80006f          	j	800022ec <xTaskIncrementTick+0x17c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1991
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80002218:	9301a783          	lw	a5,-1744(gp) # 80003480 <pxDelayedTaskList>
8000221c:	00c7a783          	lw	a5,12(a5)
80002220:	00c7a783          	lw	a5,12(a5)
80002224:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1992
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
80002228:	fe042783          	lw	a5,-32(s0)
8000222c:	0047a783          	lw	a5,4(a5)
80002230:	fcf42e23          	sw	a5,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1994

						if( xConstTickCount < xItemValue )
80002234:	fe842703          	lw	a4,-24(s0)
80002238:	fdc42783          	lw	a5,-36(s0)
8000223c:	00f77863          	bleu	a5,a4,8000224c <xTaskIncrementTick+0xdc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2001
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
80002240:	fdc42703          	lw	a4,-36(s0)
80002244:	94e1ae23          	sw	a4,-1700(gp) # 800034ac <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2002
							break;
80002248:	0a40006f          	j	800022ec <xTaskIncrementTick+0x17c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2010
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
8000224c:	fe042783          	lw	a5,-32(s0)
80002250:	00478793          	addi	a5,a5,4
80002254:	00078513          	mv	a0,a5
80002258:	fc4ff0ef          	jal	ra,80001a1c <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2014

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
8000225c:	fe042783          	lw	a5,-32(s0)
80002260:	0287a783          	lw	a5,40(a5)
80002264:	00078a63          	beqz	a5,80002278 <xTaskIncrementTick+0x108>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2016
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80002268:	fe042783          	lw	a5,-32(s0)
8000226c:	01878793          	addi	a5,a5,24
80002270:	00078513          	mv	a0,a5
80002274:	fa8ff0ef          	jal	ra,80001a1c <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
80002278:	fe042783          	lw	a5,-32(s0)
8000227c:	02c7a703          	lw	a4,44(a5)
80002280:	9441a783          	lw	a5,-1724(gp) # 80003494 <uxTopReadyPriority>
80002284:	00e7f863          	bleu	a4,a5,80002294 <xTaskIncrementTick+0x124>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 1)
80002288:	fe042783          	lw	a5,-32(s0)
8000228c:	02c7a703          	lw	a4,44(a5)
80002290:	94e1a223          	sw	a4,-1724(gp) # 80003494 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2025 (discriminator 3)
80002294:	fe042783          	lw	a5,-32(s0)
80002298:	02c7a703          	lw	a4,44(a5)
8000229c:	00070793          	mv	a5,a4
800022a0:	00279793          	slli	a5,a5,0x2
800022a4:	00e787b3          	add	a5,a5,a4
800022a8:	00279793          	slli	a5,a5,0x2
800022ac:	8001c737          	lui	a4,0x8001c
800022b0:	4c070713          	addi	a4,a4,1216 # 8001c4c0 <__stack_top+0xfffdff20>
800022b4:	00e78733          	add	a4,a5,a4
800022b8:	fe042783          	lw	a5,-32(s0)
800022bc:	00478793          	addi	a5,a5,4
800022c0:	00078593          	mv	a1,a5
800022c4:	00070513          	mv	a0,a4
800022c8:	df8ff0ef          	jal	ra,800018c0 <vListInsertEnd>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2035 (discriminator 3)
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
800022cc:	fe042783          	lw	a5,-32(s0)
800022d0:	02c7a703          	lw	a4,44(a5)
800022d4:	92c1a783          	lw	a5,-1748(gp) # 8000347c <pxCurrentTCB>
800022d8:	02c7a783          	lw	a5,44(a5)
800022dc:	f0f76ae3          	bltu	a4,a5,800021f0 <xTaskIncrementTick+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2037
							{
								xSwitchRequired = pdTRUE;
800022e0:	00100793          	li	a5,1
800022e4:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:1975
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
800022e8:	f09ff06f          	j	800021f0 <xTaskIncrementTick+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2055
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
800022ec:	92c1a783          	lw	a5,-1748(gp) # 8000347c <pxCurrentTCB>
800022f0:	02c7a703          	lw	a4,44(a5)
800022f4:	8001c6b7          	lui	a3,0x8001c
800022f8:	00070793          	mv	a5,a4
800022fc:	00279793          	slli	a5,a5,0x2
80002300:	00e787b3          	add	a5,a5,a4
80002304:	00279793          	slli	a5,a5,0x2
80002308:	4c068713          	addi	a4,a3,1216 # 8001c4c0 <__stack_top+0xfffdff20>
8000230c:	00e787b3          	add	a5,a5,a4
80002310:	0007a703          	lw	a4,0(a5)
80002314:	00100793          	li	a5,1
80002318:	00e7fe63          	bleu	a4,a5,80002334 <xTaskIncrementTick+0x1c4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2057
			{
				xSwitchRequired = pdTRUE;
8000231c:	00100793          	li	a5,1
80002320:	fef42623          	sw	a5,-20(s0)
80002324:	0100006f          	j	80002334 <xTaskIncrementTick+0x1c4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2083
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
80002328:	94c1a783          	lw	a5,-1716(gp) # 8000349c <uxPendedTicks>
8000232c:	00178713          	addi	a4,a5,1
80002330:	94e1a623          	sw	a4,-1716(gp) # 8000349c <uxPendedTicks>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2096
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
80002334:	9501a783          	lw	a5,-1712(gp) # 800034a0 <xYieldPending>
80002338:	00078663          	beqz	a5,80002344 <xTaskIncrementTick+0x1d4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2098
		{
			xSwitchRequired = pdTRUE;
8000233c:	00100793          	li	a5,1
80002340:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2107
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
80002344:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2108
}
80002348:	00078513          	mv	a0,a5
8000234c:	02c12083          	lw	ra,44(sp)
80002350:	02812403          	lw	s0,40(sp)
80002354:	03010113          	addi	sp,sp,48
80002358:	00008067          	ret

8000235c <vTaskSwitchContext>:
vTaskSwitchContext():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2202

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
8000235c:	fe010113          	addi	sp,sp,-32
80002360:	00812e23          	sw	s0,28(sp)
80002364:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2203
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
80002368:	9601a783          	lw	a5,-1696(gp) # 800034b0 <uxSchedulerSuspended>
8000236c:	00078863          	beqz	a5,8000237c <vTaskSwitchContext+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2207
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
80002370:	00100713          	li	a4,1
80002374:	94e1a823          	sw	a4,-1712(gp) # 800034a0 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
80002378:	0c00006f          	j	80002438 <vTaskSwitchContext+0xdc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2211
		xYieldPending = pdFALSE;
8000237c:	9401a823          	sw	zero,-1712(gp) # 800034a0 <xYieldPending>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246
		taskSELECT_HIGHEST_PRIORITY_TASK();
80002380:	0200006f          	j	800023a0 <vTaskSwitchContext+0x44>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 4)
80002384:	9441a783          	lw	a5,-1724(gp) # 80003494 <uxTopReadyPriority>
80002388:	00079663          	bnez	a5,80002394 <vTaskSwitchContext+0x38>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 1)
8000238c:	30047073          	csrci	mstatus,8
80002390:	0000006f          	j	80002390 <vTaskSwitchContext+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 2)
80002394:	9441a783          	lw	a5,-1724(gp) # 80003494 <uxTopReadyPriority>
80002398:	fff78713          	addi	a4,a5,-1
8000239c:	94e1a223          	sw	a4,-1724(gp) # 80003494 <uxTopReadyPriority>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 3)
800023a0:	9441a703          	lw	a4,-1724(gp) # 80003494 <uxTopReadyPriority>
800023a4:	8001c6b7          	lui	a3,0x8001c
800023a8:	00070793          	mv	a5,a4
800023ac:	00279793          	slli	a5,a5,0x2
800023b0:	00e787b3          	add	a5,a5,a4
800023b4:	00279793          	slli	a5,a5,0x2
800023b8:	4c068713          	addi	a4,a3,1216 # 8001c4c0 <__stack_top+0xfffdff20>
800023bc:	00e787b3          	add	a5,a5,a4
800023c0:	0007a783          	lw	a5,0(a5)
800023c4:	fc0780e3          	beqz	a5,80002384 <vTaskSwitchContext+0x28>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 5)
800023c8:	9441a703          	lw	a4,-1724(gp) # 80003494 <uxTopReadyPriority>
800023cc:	00070793          	mv	a5,a4
800023d0:	00279793          	slli	a5,a5,0x2
800023d4:	00e787b3          	add	a5,a5,a4
800023d8:	00279793          	slli	a5,a5,0x2
800023dc:	8001c737          	lui	a4,0x8001c
800023e0:	4c070713          	addi	a4,a4,1216 # 8001c4c0 <__stack_top+0xfffdff20>
800023e4:	00e787b3          	add	a5,a5,a4
800023e8:	fef42623          	sw	a5,-20(s0)
800023ec:	fec42783          	lw	a5,-20(s0)
800023f0:	0047a783          	lw	a5,4(a5)
800023f4:	0047a703          	lw	a4,4(a5)
800023f8:	fec42783          	lw	a5,-20(s0)
800023fc:	00e7a223          	sw	a4,4(a5)
80002400:	fec42783          	lw	a5,-20(s0)
80002404:	0047a703          	lw	a4,4(a5)
80002408:	fec42783          	lw	a5,-20(s0)
8000240c:	00878793          	addi	a5,a5,8
80002410:	00f71c63          	bne	a4,a5,80002428 <vTaskSwitchContext+0xcc>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 6)
80002414:	fec42783          	lw	a5,-20(s0)
80002418:	0047a783          	lw	a5,4(a5)
8000241c:	0047a703          	lw	a4,4(a5)
80002420:	fec42783          	lw	a5,-20(s0)
80002424:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2246 (discriminator 8)
80002428:	fec42783          	lw	a5,-20(s0)
8000242c:	0047a783          	lw	a5,4(a5)
80002430:	00c7a703          	lw	a4,12(a5)
80002434:	92e1a623          	sw	a4,-1748(gp) # 8000347c <pxCurrentTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2257
}
80002438:	00000013          	nop
8000243c:	01c12403          	lw	s0,28(sp)
80002440:	02010113          	addi	sp,sp,32
80002444:	00008067          	ret

80002448 <prvIdleTask>:
prvIdleTask():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2689
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
80002448:	fe010113          	addi	sp,sp,-32
8000244c:	00112e23          	sw	ra,28(sp)
80002450:	00812c23          	sw	s0,24(sp)
80002454:	02010413          	addi	s0,sp,32
80002458:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
8000245c:	218000ef          	jal	ra,80002674 <prvCheckTasksWaitingTermination>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2719

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
80002460:	8001c7b7          	lui	a5,0x8001c
80002464:	4c07a703          	lw	a4,1216(a5) # 8001c4c0 <__stack_top+0xfffdff20>
80002468:	00100793          	li	a5,1
8000246c:	00e7f463          	bleu	a4,a5,80002474 <prvIdleTask+0x2c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2721
			{
				taskYIELD();
80002470:	b9cff0ef          	jal	ra,8000180c <vPortYield>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2739
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
80002474:	151000ef          	jal	ra,80002dc4 <vApplicationIdleHook>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2696
		prvCheckTasksWaitingTermination();
80002478:	fe5ff06f          	j	8000245c <prvIdleTask+0x14>

8000247c <prvInitialiseTCBVariables>:
prvInitialiseTCBVariables():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2832

#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
8000247c:	fc010113          	addi	sp,sp,-64
80002480:	02112e23          	sw	ra,60(sp)
80002484:	02812c23          	sw	s0,56(sp)
80002488:	04010413          	addi	s0,sp,64
8000248c:	fca42e23          	sw	a0,-36(s0)
80002490:	fcb42c23          	sw	a1,-40(s0)
80002494:	fcc42a23          	sw	a2,-44(s0)
80002498:	fcd42823          	sw	a3,-48(s0)
8000249c:	00070793          	mv	a5,a4
800024a0:	fcf41723          	sh	a5,-50(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
800024a4:	fe042623          	sw	zero,-20(s0)
800024a8:	0440006f          	j	800024ec <prvInitialiseTCBVariables+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2838
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
800024ac:	fd842703          	lw	a4,-40(s0)
800024b0:	fec42783          	lw	a5,-20(s0)
800024b4:	00f707b3          	add	a5,a4,a5
800024b8:	00078703          	lb	a4,0(a5)
800024bc:	fdc42683          	lw	a3,-36(s0)
800024c0:	fec42783          	lw	a5,-20(s0)
800024c4:	00f687b3          	add	a5,a3,a5
800024c8:	02e78a23          	sb	a4,52(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2843

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
800024cc:	fd842703          	lw	a4,-40(s0)
800024d0:	fec42783          	lw	a5,-20(s0)
800024d4:	00f707b3          	add	a5,a4,a5
800024d8:	00078783          	lb	a5,0(a5)
800024dc:	02078063          	beqz	a5,800024fc <prvInitialiseTCBVariables+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 2)
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
800024e0:	fec42783          	lw	a5,-20(s0)
800024e4:	00178793          	addi	a5,a5,1
800024e8:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2836 (discriminator 1)
800024ec:	fec42703          	lw	a4,-20(s0)
800024f0:	00f00793          	li	a5,15
800024f4:	fae7fce3          	bleu	a4,a5,800024ac <prvInitialiseTCBVariables+0x30>
800024f8:	0080006f          	j	80002500 <prvInitialiseTCBVariables+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2845
		{
			break;
800024fc:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2855
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
80002500:	fdc42783          	lw	a5,-36(s0)
80002504:	040781a3          	sb	zero,67(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2859

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
80002508:	fd442703          	lw	a4,-44(s0)
8000250c:	00400793          	li	a5,4
80002510:	00e7f663          	bleu	a4,a5,8000251c <prvInitialiseTCBVariables+0xa0>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2861
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
80002514:	00400793          	li	a5,4
80002518:	fcf42a23          	sw	a5,-44(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2868
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
8000251c:	fdc42783          	lw	a5,-36(s0)
80002520:	fd442703          	lw	a4,-44(s0)
80002524:	02e7a623          	sw	a4,44(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2871
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
80002528:	fdc42783          	lw	a5,-36(s0)
8000252c:	fd442703          	lw	a4,-44(s0)
80002530:	04e7a823          	sw	a4,80(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2872
		pxTCB->uxMutexesHeld = 0;
80002534:	fdc42783          	lw	a5,-36(s0)
80002538:	0407aa23          	sw	zero,84(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2876
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
8000253c:	fdc42783          	lw	a5,-36(s0)
80002540:	00478793          	addi	a5,a5,4
80002544:	00078513          	mv	a0,a5
80002548:	b50ff0ef          	jal	ra,80001898 <vListInitialiseItem>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2877
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
8000254c:	fdc42783          	lw	a5,-36(s0)
80002550:	01878793          	addi	a5,a5,24
80002554:	00078513          	mv	a0,a5
80002558:	b40ff0ef          	jal	ra,80001898 <vListInitialiseItem>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2881

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
8000255c:	fdc42783          	lw	a5,-36(s0)
80002560:	fdc42703          	lw	a4,-36(s0)
80002564:	00e7a823          	sw	a4,16(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2884

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80002568:	00500713          	li	a4,5
8000256c:	fd442783          	lw	a5,-44(s0)
80002570:	40f70733          	sub	a4,a4,a5
80002574:	fdc42783          	lw	a5,-36(s0)
80002578:	00e7ac23          	sw	a4,24(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2885
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
8000257c:	fdc42783          	lw	a5,-36(s0)
80002580:	fdc42703          	lw	a4,-36(s0)
80002584:	02e7a223          	sw	a4,36(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2889

	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
	{
		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
80002588:	fdc42783          	lw	a5,-36(s0)
8000258c:	0407a223          	sw	zero,68(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2927
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
80002590:	fdc42783          	lw	a5,-36(s0)
80002594:	0407ac23          	sw	zero,88(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2928
		pxTCB->eNotifyState = eNotWaitingNotification;
80002598:	fdc42783          	lw	a5,-36(s0)
8000259c:	0407ae23          	sw	zero,92(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2938
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
	}
	#endif /* configUSE_NEWLIB_REENTRANT */
}
800025a0:	00000013          	nop
800025a4:	03c12083          	lw	ra,60(sp)
800025a8:	03812403          	lw	s0,56(sp)
800025ac:	04010113          	addi	sp,sp,64
800025b0:	00008067          	ret

800025b4 <prvInitialiseTaskLists>:
prvInitialiseTaskLists():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:2997

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
800025b4:	fe010113          	addi	sp,sp,-32
800025b8:	00112e23          	sw	ra,28(sp)
800025bc:	00812c23          	sw	s0,24(sp)
800025c0:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
800025c4:	fe042623          	sw	zero,-20(s0)
800025c8:	0380006f          	j	80002600 <prvInitialiseTaskLists+0x4c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3002 (discriminator 3)
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
800025cc:	fec42703          	lw	a4,-20(s0)
800025d0:	00070793          	mv	a5,a4
800025d4:	00279793          	slli	a5,a5,0x2
800025d8:	00e787b3          	add	a5,a5,a4
800025dc:	00279793          	slli	a5,a5,0x2
800025e0:	8001c737          	lui	a4,0x8001c
800025e4:	4c070713          	addi	a4,a4,1216 # 8001c4c0 <__stack_top+0xfffdff20>
800025e8:	00e787b3          	add	a5,a5,a4
800025ec:	00078513          	mv	a0,a5
800025f0:	a44ff0ef          	jal	ra,80001834 <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 3)
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
800025f4:	fec42783          	lw	a5,-20(s0)
800025f8:	00178793          	addi	a5,a5,1
800025fc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3000 (discriminator 1)
80002600:	fec42703          	lw	a4,-20(s0)
80002604:	00400793          	li	a5,4
80002608:	fce7f2e3          	bleu	a4,a5,800025cc <prvInitialiseTaskLists+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3005
	}

	vListInitialise( &xDelayedTaskList1 );
8000260c:	8001c7b7          	lui	a5,0x8001c
80002610:	52478513          	addi	a0,a5,1316 # 8001c524 <__stack_top+0xfffdff84>
80002614:	a20ff0ef          	jal	ra,80001834 <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3006
	vListInitialise( &xDelayedTaskList2 );
80002618:	8001c7b7          	lui	a5,0x8001c
8000261c:	53878513          	addi	a0,a5,1336 # 8001c538 <__stack_top+0xfffdff98>
80002620:	a14ff0ef          	jal	ra,80001834 <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3007
	vListInitialise( &xPendingReadyList );
80002624:	8001c7b7          	lui	a5,0x8001c
80002628:	54c78513          	addi	a0,a5,1356 # 8001c54c <__stack_top+0xfffdffac>
8000262c:	a08ff0ef          	jal	ra,80001834 <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3011

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
80002630:	8001c7b7          	lui	a5,0x8001c
80002634:	56078513          	addi	a0,a5,1376 # 8001c560 <__stack_top+0xfffdffc0>
80002638:	9fcff0ef          	jal	ra,80001834 <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3017
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
8000263c:	8001c7b7          	lui	a5,0x8001c
80002640:	57478513          	addi	a0,a5,1396 # 8001c574 <__stack_top+0xfffdffd4>
80002644:	9f0ff0ef          	jal	ra,80001834 <vListInitialise>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3023
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
80002648:	8001c737          	lui	a4,0x8001c
8000264c:	52470713          	addi	a4,a4,1316 # 8001c524 <__stack_top+0xfffdff84>
80002650:	92e1a823          	sw	a4,-1744(gp) # 80003480 <pxDelayedTaskList>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3024
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
80002654:	8001c737          	lui	a4,0x8001c
80002658:	53870713          	addi	a4,a4,1336 # 8001c538 <__stack_top+0xfffdff98>
8000265c:	92e1aa23          	sw	a4,-1740(gp) # 80003484 <pxOverflowDelayedTaskList>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3025
}
80002660:	00000013          	nop
80002664:	01c12083          	lw	ra,28(sp)
80002668:	01812403          	lw	s0,24(sp)
8000266c:	02010113          	addi	sp,sp,32
80002670:	00008067          	ret

80002674 <prvCheckTasksWaitingTermination>:
prvCheckTasksWaitingTermination():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3029
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
80002674:	fe010113          	addi	sp,sp,-32
80002678:	00112e23          	sw	ra,28(sp)
8000267c:	00812c23          	sw	s0,24(sp)
80002680:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
80002684:	0740006f          	j	800026f8 <prvCheckTasksWaitingTermination+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3038
		{
			vTaskSuspendAll();
80002688:	961ff0ef          	jal	ra,80001fe8 <vTaskSuspendAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3040
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
8000268c:	8001c7b7          	lui	a5,0x8001c
80002690:	5607a783          	lw	a5,1376(a5) # 8001c560 <__stack_top+0xfffdffc0>
80002694:	0017b793          	seqz	a5,a5
80002698:	0ff7f793          	andi	a5,a5,255
8000269c:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3042
			}
			( void ) xTaskResumeAll();
800026a0:	971ff0ef          	jal	ra,80002010 <xTaskResumeAll>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3044

			if( xListIsEmpty == pdFALSE )
800026a4:	fec42783          	lw	a5,-20(s0)
800026a8:	04079863          	bnez	a5,800026f8 <prvCheckTasksWaitingTermination+0x84>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3048
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
800026ac:	ca9fe0ef          	jal	ra,80001354 <vPortEnterCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3050
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
800026b0:	8001c7b7          	lui	a5,0x8001c
800026b4:	56078793          	addi	a5,a5,1376 # 8001c560 <__stack_top+0xfffdffc0>
800026b8:	00c7a783          	lw	a5,12(a5)
800026bc:	00c7a783          	lw	a5,12(a5)
800026c0:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3051
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
800026c4:	fe842783          	lw	a5,-24(s0)
800026c8:	00478793          	addi	a5,a5,4
800026cc:	00078513          	mv	a0,a5
800026d0:	b4cff0ef          	jal	ra,80001a1c <uxListRemove>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3052
					--uxCurrentNumberOfTasks;
800026d4:	93c1a783          	lw	a5,-1732(gp) # 8000348c <uxCurrentNumberOfTasks>
800026d8:	fff78713          	addi	a4,a5,-1
800026dc:	92e1ae23          	sw	a4,-1732(gp) # 8000348c <uxCurrentNumberOfTasks>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3053
					--uxTasksDeleted;
800026e0:	9381a783          	lw	a5,-1736(gp) # 80003488 <uxTasksDeleted>
800026e4:	fff78713          	addi	a4,a5,-1
800026e8:	92e1ac23          	sw	a4,-1736(gp) # 80003488 <uxTasksDeleted>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3055
				}
				taskEXIT_CRITICAL();
800026ec:	c9dfe0ef          	jal	ra,80001388 <vPortExitCritical>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3057

				prvDeleteTCB( pxTCB );
800026f0:	fe842503          	lw	a0,-24(s0)
800026f4:	168000ef          	jal	ra,8000285c <prvDeleteTCB>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3036
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
800026f8:	9381a783          	lw	a5,-1736(gp) # 80003488 <uxTasksDeleted>
800026fc:	f80796e3          	bnez	a5,80002688 <prvCheckTasksWaitingTermination+0x14>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3066
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* vTaskDelete */
}
80002700:	00000013          	nop
80002704:	01c12083          	lw	ra,28(sp)
80002708:	01812403          	lw	s0,24(sp)
8000270c:	02010113          	addi	sp,sp,32
80002710:	00008067          	ret

80002714 <prvAddCurrentTaskToDelayedList>:
prvAddCurrentTaskToDelayedList():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3070
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
80002714:	fe010113          	addi	sp,sp,-32
80002718:	00112e23          	sw	ra,28(sp)
8000271c:	00812c23          	sw	s0,24(sp)
80002720:	02010413          	addi	s0,sp,32
80002724:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3072
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
80002728:	92c1a783          	lw	a5,-1748(gp) # 8000347c <pxCurrentTCB>
8000272c:	fec42703          	lw	a4,-20(s0)
80002730:	00e7a223          	sw	a4,4(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3074

	if( xTimeToWake < xTickCount )
80002734:	9401a783          	lw	a5,-1728(gp) # 80003490 <xTickCount>
80002738:	fec42703          	lw	a4,-20(s0)
8000273c:	02f77063          	bleu	a5,a4,8000275c <prvAddCurrentTaskToDelayedList+0x48>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3077
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
80002740:	9341a703          	lw	a4,-1740(gp) # 80003484 <pxOverflowDelayedTaskList>
80002744:	92c1a783          	lw	a5,-1748(gp) # 8000347c <pxCurrentTCB>
80002748:	00478793          	addi	a5,a5,4
8000274c:	00078593          	mv	a1,a5
80002750:	00070513          	mv	a0,a4
80002754:	9f4ff0ef          	jal	ra,80001948 <vListInsert>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
80002758:	0300006f          	j	80002788 <prvAddCurrentTaskToDelayedList+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3082
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
8000275c:	9301a703          	lw	a4,-1744(gp) # 80003480 <pxDelayedTaskList>
80002760:	92c1a783          	lw	a5,-1748(gp) # 8000347c <pxCurrentTCB>
80002764:	00478793          	addi	a5,a5,4
80002768:	00078593          	mv	a1,a5
8000276c:	00070513          	mv	a0,a4
80002770:	9d8ff0ef          	jal	ra,80001948 <vListInsert>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3087
		if( xTimeToWake < xNextTaskUnblockTime )
80002774:	95c1a783          	lw	a5,-1700(gp) # 800034ac <xNextTaskUnblockTime>
80002778:	fec42703          	lw	a4,-20(s0)
8000277c:	00f77663          	bleu	a5,a4,80002788 <prvAddCurrentTaskToDelayedList+0x74>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3089
			xNextTaskUnblockTime = xTimeToWake;
80002780:	fec42703          	lw	a4,-20(s0)
80002784:	94e1ae23          	sw	a4,-1700(gp) # 800034ac <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3096
}
80002788:	00000013          	nop
8000278c:	01c12083          	lw	ra,28(sp)
80002790:	01812403          	lw	s0,24(sp)
80002794:	02010113          	addi	sp,sp,32
80002798:	00008067          	ret

8000279c <prvAllocateTCBAndStack>:
prvAllocateTCBAndStack():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3100
/*-----------------------------------------------------------*/

static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
{
8000279c:	fd010113          	addi	sp,sp,-48
800027a0:	02112623          	sw	ra,44(sp)
800027a4:	02812423          	sw	s0,40(sp)
800027a8:	03010413          	addi	s0,sp,48
800027ac:	00050793          	mv	a5,a0
800027b0:	fcb42c23          	sw	a1,-40(s0)
800027b4:	fcf41f23          	sh	a5,-34(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
800027b8:	fd842783          	lw	a5,-40(s0)
800027bc:	00079e63          	bnez	a5,800027d8 <prvAllocateTCBAndStack+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 1)
800027c0:	fde45783          	lhu	a5,-34(s0)
800027c4:	00279793          	slli	a5,a5,0x2
800027c8:	00078513          	mv	a0,a5
800027cc:	821fe0ef          	jal	ra,80000fec <pvPortMalloc>
800027d0:	00050793          	mv	a5,a0
800027d4:	0080006f          	j	800027dc <prvAllocateTCBAndStack+0x40>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 2)
800027d8:	fd842783          	lw	a5,-40(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3132 (discriminator 4)
800027dc:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3134 (discriminator 4)

		if( pxStack != NULL )
800027e0:	fe842783          	lw	a5,-24(s0)
800027e4:	02078a63          	beqz	a5,80002818 <prvAllocateTCBAndStack+0x7c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3138
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
800027e8:	06000513          	li	a0,96
800027ec:	801fe0ef          	jal	ra,80000fec <pvPortMalloc>
800027f0:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3140

			if( pxNewTCB != NULL )
800027f4:	fec42783          	lw	a5,-20(s0)
800027f8:	00078a63          	beqz	a5,8000280c <prvAllocateTCBAndStack+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3143
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
800027fc:	fec42783          	lw	a5,-20(s0)
80002800:	fe842703          	lw	a4,-24(s0)
80002804:	02e7a823          	sw	a4,48(a5)
80002808:	0140006f          	j	8000281c <prvAllocateTCBAndStack+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3149
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
8000280c:	fe842503          	lw	a0,-24(s0)
80002810:	9b9fe0ef          	jal	ra,800011c8 <vPortFree>
80002814:	0080006f          	j	8000281c <prvAllocateTCBAndStack+0x80>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3154
			}
		}
		else
		{
			pxNewTCB = NULL;
80002818:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3159
		}
	}
	#endif /* portSTACK_GROWTH */

	if( pxNewTCB != NULL )
8000281c:	fec42783          	lw	a5,-20(s0)
80002820:	02078263          	beqz	a5,80002844 <prvAllocateTCBAndStack+0xa8>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3165
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
80002824:	fec42783          	lw	a5,-20(s0)
80002828:	0307a703          	lw	a4,48(a5)
8000282c:	fde45783          	lhu	a5,-34(s0)
80002830:	00279793          	slli	a5,a5,0x2
80002834:	00078613          	mv	a2,a5
80002838:	0a500593          	li	a1,165
8000283c:	00070513          	mv	a0,a4
80002840:	b40ff0ef          	jal	ra,80001b80 <memset>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3170
		}
		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
	}

	return pxNewTCB;
80002844:	fec42783          	lw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3171
}
80002848:	00078513          	mv	a0,a5
8000284c:	02c12083          	lw	ra,44(sp)
80002850:	02812403          	lw	s0,40(sp)
80002854:	03010113          	addi	sp,sp,48
80002858:	00008067          	ret

8000285c <prvDeleteTCB>:
prvDeleteTCB():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3310
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
8000285c:	fe010113          	addi	sp,sp,-32
80002860:	00112e23          	sw	ra,28(sp)
80002864:	00812c23          	sw	s0,24(sp)
80002868:	02010413          	addi	s0,sp,32
8000286c:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3335
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
80002870:	fec42783          	lw	a5,-20(s0)
80002874:	0307a783          	lw	a5,48(a5)
80002878:	00078513          	mv	a0,a5
8000287c:	94dfe0ef          	jal	ra,800011c8 <vPortFree>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3339
		}
		#endif

		vPortFree( pxTCB );
80002880:	fec42503          	lw	a0,-20(s0)
80002884:	945fe0ef          	jal	ra,800011c8 <vPortFree>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3340
	}
80002888:	00000013          	nop
8000288c:	01c12083          	lw	ra,28(sp)
80002890:	01812403          	lw	s0,24(sp)
80002894:	02010113          	addi	sp,sp,32
80002898:	00008067          	ret

8000289c <prvResetNextTaskUnblockTime>:
prvResetNextTaskUnblockTime():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3346

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
8000289c:	fe010113          	addi	sp,sp,-32
800028a0:	00812e23          	sw	s0,28(sp)
800028a4:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
800028a8:	9301a783          	lw	a5,-1744(gp) # 80003480 <pxDelayedTaskList>
800028ac:	0007a783          	lw	a5,0(a5)
800028b0:	00079663          	bnez	a5,800028bc <prvResetNextTaskUnblockTime+0x20>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 1)
800028b4:	00100793          	li	a5,1
800028b8:	0080006f          	j	800028c0 <prvResetNextTaskUnblockTime+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 2)
800028bc:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3349 (discriminator 4)
800028c0:	00078863          	beqz	a5,800028d0 <prvResetNextTaskUnblockTime+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3355
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
800028c4:	fff00713          	li	a4,-1
800028c8:	94e1ae23          	sw	a4,-1700(gp) # 800034ac <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
800028cc:	0200006f          	j	800028ec <prvResetNextTaskUnblockTime+0x50>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3363
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
800028d0:	9301a783          	lw	a5,-1744(gp) # 80003480 <pxDelayedTaskList>
800028d4:	00c7a783          	lw	a5,12(a5)
800028d8:	00c7a783          	lw	a5,12(a5)
800028dc:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3364
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
800028e0:	fec42783          	lw	a5,-20(s0)
800028e4:	0047a703          	lw	a4,4(a5)
800028e8:	94e1ae23          	sw	a4,-1700(gp) # 800034ac <xNextTaskUnblockTime>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/tasks.c:3366
}
800028ec:	00000013          	nop
800028f0:	01c12403          	lw	s0,28(sp)
800028f4:	02010113          	addi	sp,sp,32
800028f8:	00008067          	ret

800028fc <PLIC_init>:
PLIC_init():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:124
{
800028fc:	fe010113          	addi	sp,sp,-32
80002900:	00812e23          	sw	s0,28(sp)
80002904:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:126
    unsigned long hart_id = read_csr(mhartid);
80002908:	f14027f3          	csrr	a5,mhartid
8000290c:	fef42423          	sw	a5,-24(s0)
80002910:	fe842783          	lw	a5,-24(s0)
80002914:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
80002918:	fe042623          	sw	zero,-20(s0)
8000291c:	03c0006f          	j	80002958 <PLIC_init+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:131 (discriminator 3)
        PLIC->TARGET_ENABLES[hart_id].ENABLES[inc] = 0;
80002920:	40000737          	lui	a4,0x40000
80002924:	fe442783          	lw	a5,-28(s0)
80002928:	00579693          	slli	a3,a5,0x5
8000292c:	fec42783          	lw	a5,-20(s0)
80002930:	00f686b3          	add	a3,a3,a5
80002934:	000017b7          	lui	a5,0x1
80002938:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
8000293c:	00f687b3          	add	a5,a3,a5
80002940:	00279793          	slli	a5,a5,0x2
80002944:	00f707b3          	add	a5,a4,a5
80002948:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 3)
    for(inc = 0; inc < ((PLIC_NUM_SOURCES + 32u) / 32u); ++inc)
8000294c:	fec42783          	lw	a5,-20(s0)
80002950:	00178793          	addi	a5,a5,1
80002954:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:129 (discriminator 1)
80002958:	fec42783          	lw	a5,-20(s0)
8000295c:	fc0782e3          	beqz	a5,80002920 <PLIC_init+0x24>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
80002960:	fe042623          	sw	zero,-20(s0)
80002964:	0240006f          	j	80002988 <PLIC_init+0x8c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:139 (discriminator 3)
        PLIC->SOURCE_PRIORITY[inc] = 0;
80002968:	40000737          	lui	a4,0x40000
8000296c:	fec42783          	lw	a5,-20(s0)
80002970:	00279793          	slli	a5,a5,0x2
80002974:	00f707b3          	add	a5,a4,a5
80002978:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 3)
    for(inc = 0; inc < PLIC_NUM_SOURCES; ++inc)
8000297c:	fec42783          	lw	a5,-20(s0)
80002980:	00178793          	addi	a5,a5,1
80002984:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:137 (discriminator 1)
80002988:	fec42703          	lw	a4,-20(s0)
8000298c:	01e00793          	li	a5,30
80002990:	fce7fce3          	bleu	a4,a5,80002968 <PLIC_init+0x6c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:143
    PLIC->TARGET[hart_id].PRIORITY_THRESHOLD = 0;
80002994:	40000737          	lui	a4,0x40000
80002998:	fe442783          	lw	a5,-28(s0)
8000299c:	20078793          	addi	a5,a5,512
800029a0:	00c79793          	slli	a5,a5,0xc
800029a4:	00f707b3          	add	a5,a4,a5
800029a8:	0007a023          	sw	zero,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:146
    set_csr(mie, MIP_MEIP);
800029ac:	000017b7          	lui	a5,0x1
800029b0:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
800029b4:	3047a7f3          	csrrs	a5,mie,a5
800029b8:	fef42023          	sw	a5,-32(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:147
}
800029bc:	00000013          	nop
800029c0:	01c12403          	lw	s0,28(sp)
800029c4:	02010113          	addi	sp,sp,32
800029c8:	00008067          	ret

800029cc <PLIC_EnableIRQ>:
PLIC_EnableIRQ():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:154
{
800029cc:	fd010113          	addi	sp,sp,-48
800029d0:	02812623          	sw	s0,44(sp)
800029d4:	03010413          	addi	s0,sp,48
800029d8:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:155
    unsigned long hart_id = read_csr(mhartid);
800029dc:	f14027f3          	csrr	a5,mhartid
800029e0:	fef42623          	sw	a5,-20(s0)
800029e4:	fec42783          	lw	a5,-20(s0)
800029e8:	fef42423          	sw	a5,-24(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:156
    uint32_t current = PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32];
800029ec:	40000737          	lui	a4,0x40000
800029f0:	fdc42783          	lw	a5,-36(s0)
800029f4:	0057d793          	srli	a5,a5,0x5
800029f8:	fe842683          	lw	a3,-24(s0)
800029fc:	00569693          	slli	a3,a3,0x5
80002a00:	00f686b3          	add	a3,a3,a5
80002a04:	000017b7          	lui	a5,0x1
80002a08:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80002a0c:	00f687b3          	add	a5,a3,a5
80002a10:	00279793          	slli	a5,a5,0x2
80002a14:	00f707b3          	add	a5,a4,a5
80002a18:	0007a783          	lw	a5,0(a5)
80002a1c:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:157
    current |= (uint32_t)1 << (IRQn % 32);
80002a20:	fdc42783          	lw	a5,-36(s0)
80002a24:	01f7f793          	andi	a5,a5,31
80002a28:	00100713          	li	a4,1
80002a2c:	00f717b3          	sll	a5,a4,a5
80002a30:	fe442703          	lw	a4,-28(s0)
80002a34:	00f767b3          	or	a5,a4,a5
80002a38:	fef42223          	sw	a5,-28(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:158
    PLIC->TARGET_ENABLES[hart_id].ENABLES[IRQn / 32] = current;
80002a3c:	40000737          	lui	a4,0x40000
80002a40:	fdc42783          	lw	a5,-36(s0)
80002a44:	0057d793          	srli	a5,a5,0x5
80002a48:	fe842683          	lw	a3,-24(s0)
80002a4c:	00569693          	slli	a3,a3,0x5
80002a50:	00f686b3          	add	a3,a3,a5
80002a54:	000017b7          	lui	a5,0x1
80002a58:	80078793          	addi	a5,a5,-2048 # 800 <HEAP_SIZE-0xf800>
80002a5c:	00f687b3          	add	a5,a3,a5
80002a60:	00279793          	slli	a5,a5,0x2
80002a64:	00f707b3          	add	a5,a4,a5
80002a68:	fe442703          	lw	a4,-28(s0)
80002a6c:	00e7a023          	sw	a4,0(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../riscv_hal/riscv_plic.h:159
}
80002a70:	00000013          	nop
80002a74:	02c12403          	lw	s0,44(sp)
80002a78:	03010113          	addi	sp,sp,48
80002a7c:	00008067          	ret

80002a80 <Chronos_init>:
Chronos_init():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:58
// Disables interruptions incomming from NI
void NI_disable_irq(int which);

////////////////////////////////////////////////////////////
// Initialize Chronos stuff
void Chronos_init(){
80002a80:	fe010113          	addi	sp,sp,-32
80002a84:	00112e23          	sw	ra,28(sp)
80002a88:	00812c23          	sw	s0,24(sp)
80002a8c:	02010413          	addi	s0,sp,32
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:60
    //Informs the Router this tile ID, that is provided by Harness
    HW_set_32bit_reg(ROUTER_BASE, HW_get_32bit_reg(MY_ID)); 
80002a90:	900007b7          	lui	a5,0x90000
80002a94:	ffc78513          	addi	a0,a5,-4 # 8ffffffc <__stack_top+0xffc3a5c>
80002a98:	a08fe0ef          	jal	ra,80000ca0 <HW_get_32bit_reg>
80002a9c:	00050793          	mv	a5,a0
80002aa0:	00078593          	mv	a1,a5
80002aa4:	50000537          	lui	a0,0x50000
80002aa8:	9f0fe0ef          	jal	ra,80000c98 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:63
    
    // Reads this processor address
    unsigned int myaddr = HW_get_32bit_reg(ROUTER_BASE);
80002aac:	50000537          	lui	a0,0x50000
80002ab0:	9f0fe0ef          	jal	ra,80000ca0 <HW_get_32bit_reg>
80002ab4:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:66

    // Informs the PRINTER this tile address
    HW_set_32bit_reg(PRINTER_CHAR, getXpos(myaddr));
80002ab8:	fec42503          	lw	a0,-20(s0)
80002abc:	100000ef          	jal	ra,80002bbc <getXpos>
80002ac0:	00050793          	mv	a5,a0
80002ac4:	00078593          	mv	a1,a5
80002ac8:	500007b7          	lui	a5,0x50000
80002acc:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002ad0:	9c8fe0ef          	jal	ra,80000c98 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:67
    HW_set_32bit_reg(PRINTER_CHAR, getYpos(myaddr));
80002ad4:	fec42503          	lw	a0,-20(s0)
80002ad8:	110000ef          	jal	ra,80002be8 <getYpos>
80002adc:	00050793          	mv	a5,a0
80002ae0:	00078593          	mv	a1,a5
80002ae4:	500007b7          	lui	a5,0x50000
80002ae8:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002aec:	9acfe0ef          	jal	ra,80000c98 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:70

    // Enables interruption from NI
    NI_enable_irq(TX_RX);
80002af0:	000047b7          	lui	a5,0x4
80002af4:	44478513          	addi	a0,a5,1092 # 4444 <HEAP_SIZE-0xbbbc>
80002af8:	170000ef          	jal	ra,80002c68 <NI_enable_irq>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:72

    return;
80002afc:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:73
}
80002b00:	01c12083          	lw	ra,28(sp)
80002b04:	01812403          	lw	s0,24(sp)
80002b08:	02010113          	addi	sp,sp,32
80002b0c:	00008067          	ret

80002b10 <prints>:
prints():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:77

////////////////////////////////////////////////////////////
// Prints a string
void prints(char *text) {
80002b10:	fd010113          	addi	sp,sp,-48
80002b14:	02112623          	sw	ra,44(sp)
80002b18:	02812423          	sw	s0,40(sp)
80002b1c:	03010413          	addi	s0,sp,48
80002b20:	fca42e23          	sw	a0,-36(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:78
    int i = 0;
80002b24:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:80 (discriminator 1)
    do {
        HW_set_32bit_reg(PRINTER_CHAR, text[i]);
80002b28:	fec42783          	lw	a5,-20(s0)
80002b2c:	fdc42703          	lw	a4,-36(s0)
80002b30:	00f707b3          	add	a5,a4,a5
80002b34:	00078783          	lb	a5,0(a5)
80002b38:	00078593          	mv	a1,a5
80002b3c:	500007b7          	lui	a5,0x50000
80002b40:	02078513          	addi	a0,a5,32 # 50000020 <RAM_SIZE+0x4ff80020>
80002b44:	954fe0ef          	jal	ra,80000c98 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:81 (discriminator 1)
        i++;
80002b48:	fec42783          	lw	a5,-20(s0)
80002b4c:	00178793          	addi	a5,a5,1
80002b50:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:82 (discriminator 1)
    } while (text[i - 1] != '\0');
80002b54:	fec42783          	lw	a5,-20(s0)
80002b58:	fff78793          	addi	a5,a5,-1
80002b5c:	fdc42703          	lw	a4,-36(s0)
80002b60:	00f707b3          	add	a5,a4,a5
80002b64:	00078783          	lb	a5,0(a5)
80002b68:	fc0790e3          	bnez	a5,80002b28 <prints+0x18>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:83
    return;
80002b6c:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:84
}
80002b70:	02c12083          	lw	ra,44(sp)
80002b74:	02812403          	lw	s0,40(sp)
80002b78:	03010113          	addi	sp,sp,48
80002b7c:	00008067          	ret

80002b80 <printi>:
printi():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:88

////////////////////////////////////////////////////////////
// Prints an integer
void printi(int value) {
80002b80:	fe010113          	addi	sp,sp,-32
80002b84:	00112e23          	sw	ra,28(sp)
80002b88:	00812c23          	sw	s0,24(sp)
80002b8c:	02010413          	addi	s0,sp,32
80002b90:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:89
    HW_set_32bit_reg(PRINTER_INT, value);
80002b94:	fec42783          	lw	a5,-20(s0)
80002b98:	00078593          	mv	a1,a5
80002b9c:	500007b7          	lui	a5,0x50000
80002ba0:	02478513          	addi	a0,a5,36 # 50000024 <RAM_SIZE+0x4ff80024>
80002ba4:	8f4fe0ef          	jal	ra,80000c98 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:90
    return;
80002ba8:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:91
}
80002bac:	01c12083          	lw	ra,28(sp)
80002bb0:	01812403          	lw	s0,24(sp)
80002bb4:	02010113          	addi	sp,sp,32
80002bb8:	00008067          	ret

80002bbc <getXpos>:
getXpos():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:115
    return;
}

////////////////////////////////////////////////////////////
// Gets the X coordinate from the address
unsigned int getXpos(unsigned int addr) { return ((addr & 0x0000FF00) >> 8); }
80002bbc:	fe010113          	addi	sp,sp,-32
80002bc0:	00812e23          	sw	s0,28(sp)
80002bc4:	02010413          	addi	s0,sp,32
80002bc8:	fea42623          	sw	a0,-20(s0)
80002bcc:	fec42783          	lw	a5,-20(s0)
80002bd0:	0087d793          	srli	a5,a5,0x8
80002bd4:	0ff7f793          	andi	a5,a5,255
80002bd8:	00078513          	mv	a0,a5
80002bdc:	01c12403          	lw	s0,28(sp)
80002be0:	02010113          	addi	sp,sp,32
80002be4:	00008067          	ret

80002be8 <getYpos>:
getYpos():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:119

////////////////////////////////////////////////////////////
// Gets the Y coordinate from the address
unsigned int getYpos(unsigned int addr) { return (addr & 0x000000FF); }
80002be8:	fe010113          	addi	sp,sp,-32
80002bec:	00812e23          	sw	s0,28(sp)
80002bf0:	02010413          	addi	s0,sp,32
80002bf4:	fea42623          	sw	a0,-20(s0)
80002bf8:	fec42783          	lw	a5,-20(s0)
80002bfc:	0ff7f793          	andi	a5,a5,255
80002c00:	00078513          	mv	a0,a5
80002c04:	01c12403          	lw	s0,28(sp)
80002c08:	02010113          	addi	sp,sp,32
80002c0c:	00008067          	ret

80002c10 <SendRaw>:
SendRaw():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:123

///////////////////////////////////////////////////////////////////
// Configure the NI to transmitt a given packet
void SendRaw(unsigned int addr) {
80002c10:	fe010113          	addi	sp,sp,-32
80002c14:	00112e23          	sw	ra,28(sp)
80002c18:	00812c23          	sw	s0,24(sp)
80002c1c:	02010413          	addi	s0,sp,32
80002c20:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:124
    HW_set_32bit_reg(NI_ADDR, addr);
80002c24:	fec42583          	lw	a1,-20(s0)
80002c28:	500007b7          	lui	a5,0x50000
80002c2c:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
80002c30:	868fe0ef          	jal	ra,80000c98 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:125
    HW_set_32bit_reg(NI_TX, TX);
80002c34:	000027b7          	lui	a5,0x2
80002c38:	22278593          	addi	a1,a5,546 # 2222 <HEAP_SIZE-0xddde>
80002c3c:	500007b7          	lui	a5,0x50000
80002c40:	00878513          	addi	a0,a5,8 # 50000008 <RAM_SIZE+0x4ff80008>
80002c44:	854fe0ef          	jal	ra,80000c98 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:126
    prints("Mensagem enviada!");
80002c48:	800037b7          	lui	a5,0x80003
80002c4c:	21c78513          	addi	a0,a5,540 # 8000321c <__stack_top+0xfffc6c7c>
80002c50:	ec1ff0ef          	jal	ra,80002b10 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:127
    return;
80002c54:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:128
}
80002c58:	01c12083          	lw	ra,28(sp)
80002c5c:	01812403          	lw	s0,24(sp)
80002c60:	02010113          	addi	sp,sp,32
80002c64:	00008067          	ret

80002c68 <NI_enable_irq>:
NI_enable_irq():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:132

////////////////////////////////////////////////////////////
// Enables interruptions incomming from NI
void NI_enable_irq(int which){
80002c68:	fe010113          	addi	sp,sp,-32
80002c6c:	00112e23          	sw	ra,28(sp)
80002c70:	00812c23          	sw	s0,24(sp)
80002c74:	02010413          	addi	s0,sp,32
80002c78:	fea42623          	sw	a0,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:133
	if (which == TX || which == TX_RX) PLIC_EnableIRQ(NI_TX_IRQn);
80002c7c:	fec42703          	lw	a4,-20(s0)
80002c80:	000027b7          	lui	a5,0x2
80002c84:	22278793          	addi	a5,a5,546 # 2222 <HEAP_SIZE-0xddde>
80002c88:	00f70a63          	beq	a4,a5,80002c9c <NI_enable_irq+0x34>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:133 (discriminator 2)
80002c8c:	fec42703          	lw	a4,-20(s0)
80002c90:	000047b7          	lui	a5,0x4
80002c94:	44478793          	addi	a5,a5,1092 # 4444 <HEAP_SIZE-0xbbbc>
80002c98:	00f71663          	bne	a4,a5,80002ca4 <NI_enable_irq+0x3c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:133 (discriminator 3)
80002c9c:	00100513          	li	a0,1
80002ca0:	d2dff0ef          	jal	ra,800029cc <PLIC_EnableIRQ>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:134
    if (which == RX || which == TX_RX) PLIC_EnableIRQ(NI_RX_IRQn);
80002ca4:	fec42703          	lw	a4,-20(s0)
80002ca8:	000037b7          	lui	a5,0x3
80002cac:	33378793          	addi	a5,a5,819 # 3333 <HEAP_SIZE-0xcccd>
80002cb0:	00f70a63          	beq	a4,a5,80002cc4 <NI_enable_irq+0x5c>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:134 (discriminator 2)
80002cb4:	fec42703          	lw	a4,-20(s0)
80002cb8:	000047b7          	lui	a5,0x4
80002cbc:	44478793          	addi	a5,a5,1092 # 4444 <HEAP_SIZE-0xbbbc>
80002cc0:	00f71863          	bne	a4,a5,80002cd0 <NI_enable_irq+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:134 (discriminator 3)
80002cc4:	00200513          	li	a0,2
80002cc8:	d05ff0ef          	jal	ra,800029cc <PLIC_EnableIRQ>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:135 (discriminator 3)
    return;
80002ccc:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:135
80002cd0:	00000013          	nop
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../FreeRTOS/include/chronos.h:136
}
80002cd4:	01c12083          	lw	ra,28(sp)
80002cd8:	01812403          	lw	s0,24(sp)
80002cdc:	02010113          	addi	sp,sp,32
80002ce0:	00008067          	ret

80002ce4 <main>:
main():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:43
void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName );

/*-----------------------------------------------------------*/

int main( void )
{
80002ce4:	ff010113          	addi	sp,sp,-16
80002ce8:	00112623          	sw	ra,12(sp)
80002cec:	00812423          	sw	s0,8(sp)
80002cf0:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:44
    PLIC_init();
80002cf4:	c09ff0ef          	jal	ra,800028fc <PLIC_init>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:50

    /**************************************************************************
    * Initialize CoreUART with its base address, baud value, and line
    * configuration.
    *************************************************************************/
    UART_init(&g_uart, COREUARTAPB0_BASE_ADDR, BAUD_VALUE_115200,
80002cf8:	00100693          	li	a3,1
80002cfc:	02c00613          	li	a2,44
80002d00:	700015b7          	lui	a1,0x70001
80002d04:	8001c7b7          	lui	a5,0x8001c
80002d08:	58c78513          	addi	a0,a5,1420 # 8001c58c <__stack_top+0xfffdffec>
80002d0c:	864fe0ef          	jal	ra,80000d70 <UART_init>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:56
             (DATA_8_BITS | NO_PARITY) );
    
	/**************************************************************************
    * Initialize the Chronos platform stuff
    *************************************************************************/
	Chronos_init();
80002d10:	d71ff0ef          	jal	ra,80002a80 <Chronos_init>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:58

    UART_polled_tx_string( &g_uart, (const uint8_t *)"\n        Sample Demonstration of FreeRTOS port for Mi-V processor.\r\n\r\n" );
80002d14:	800037b7          	lui	a5,0x80003
80002d18:	24878593          	addi	a1,a5,584 # 80003248 <__stack_top+0xfffc6ca8>
80002d1c:	8001c7b7          	lui	a5,0x8001c
80002d20:	58c78513          	addi	a0,a5,1420 # 8001c58c <__stack_top+0xfffdffec>
80002d24:	a18fe0ef          	jal	ra,80000f3c <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:59
    UART_polled_tx_string( &g_uart, (const uint8_t *)"      This project creates two tasks and runs them at regular intervals.\r\n" );
80002d28:	800037b7          	lui	a5,0x80003
80002d2c:	29078593          	addi	a1,a5,656 # 80003290 <__stack_top+0xfffc6cf0>
80002d30:	8001c7b7          	lui	a5,0x8001c
80002d34:	58c78513          	addi	a0,a5,1420 # 8001c58c <__stack_top+0xfffdffec>
80002d38:	a04fe0ef          	jal	ra,80000f3c <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:61
    /* Create the two test tasks. */
	xTaskCreate( vUartTestTask1, "UArt1", 1000, NULL, uartPRIMARY_PRIORITY, NULL );
80002d3c:	00000893          	li	a7,0
80002d40:	00000813          	li	a6,0
80002d44:	00000793          	li	a5,0
80002d48:	00200713          	li	a4,2
80002d4c:	00000693          	li	a3,0
80002d50:	3e800613          	li	a2,1000
80002d54:	800035b7          	lui	a1,0x80003
80002d58:	2dc58593          	addi	a1,a1,732 # 800032dc <__stack_top+0xfffc6d3c>
80002d5c:	80003537          	lui	a0,0x80003
80002d60:	de050513          	addi	a0,a0,-544 # 80002de0 <__stack_top+0xfffc6840>
80002d64:	f55fe0ef          	jal	ra,80001cb8 <xTaskGenericCreate>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:62
	xTaskCreate( vUartTestTask2, "UArt2", 1000, NULL, uartPRIMARY_PRIORITY, NULL );
80002d68:	00000893          	li	a7,0
80002d6c:	00000813          	li	a6,0
80002d70:	00000793          	li	a5,0
80002d74:	00200713          	li	a4,2
80002d78:	00000693          	li	a3,0
80002d7c:	3e800613          	li	a2,1000
80002d80:	800035b7          	lui	a1,0x80003
80002d84:	2e458593          	addi	a1,a1,740 # 800032e4 <__stack_top+0xfffc6d44>
80002d88:	80003537          	lui	a0,0x80003
80002d8c:	f0450513          	addi	a0,a0,-252 # 80002f04 <__stack_top+0xfffc6964>
80002d90:	f29fe0ef          	jal	ra,80001cb8 <xTaskGenericCreate>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:65

	/* Start the kernel.  From here on, only tasks and interrupts will run. */
	vTaskStartScheduler();
80002d94:	9c4ff0ef          	jal	ra,80001f58 <vTaskStartScheduler>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:68

	/* Exit FreeRTOS */
	return 0;
80002d98:	00000793          	li	a5,0
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:69
}
80002d9c:	00078513          	mv	a0,a5
80002da0:	00c12083          	lw	ra,12(sp)
80002da4:	00812403          	lw	s0,8(sp)
80002da8:	01010113          	addi	sp,sp,16
80002dac:	00008067          	ret

80002db0 <vApplicationMallocFailedHook>:
vApplicationMallocFailedHook():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:74

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
80002db0:	ff010113          	addi	sp,sp,-16
80002db4:	00812623          	sw	s0,12(sp)
80002db8:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:85
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
80002dbc:	30047073          	csrci	mstatus,8
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:86 (discriminator 1)
	for( ;; );
80002dc0:	0000006f          	j	80002dc0 <vApplicationMallocFailedHook+0x10>

80002dc4 <vApplicationIdleHook>:
vApplicationIdleHook():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:91
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
80002dc4:	ff010113          	addi	sp,sp,-16
80002dc8:	00812623          	sw	s0,12(sp)
80002dcc:	01010413          	addi	s0,sp,16
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:101
	specified, or call vTaskDelay()).  If the application makes use of the
	vTaskDelete() API function (as this demo application does) then it is also
	important that vApplicationIdleHook() is permitted to return to its calling
	function, because it is the responsibility of the idle task to clean up
	memory allocated by the kernel to any task that has since been deleted. */
}
80002dd0:	00000013          	nop
80002dd4:	00c12403          	lw	s0,12(sp)
80002dd8:	01010113          	addi	sp,sp,16
80002ddc:	00008067          	ret

80002de0 <vUartTestTask1>:
vUartTestTask1():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:118
	for( ;; );
}
/*-----------------------------------------------------------*/

static void vUartTestTask1( void *pvParameters )
{
80002de0:	f1010113          	addi	sp,sp,-240
80002de4:	0e112623          	sw	ra,236(sp)
80002de8:	0e812423          	sw	s0,232(sp)
80002dec:	0f010413          	addi	s0,sp,240
80002df0:	f0a42e23          	sw	a0,-228(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:120
	( void ) pvParameters;
	int i = 0;
80002df4:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:123
	char str[100];
	unsigned int msg[25];
	msg[0] = 0x101;
80002df8:	10100793          	li	a5,257
80002dfc:	f2f42223          	sw	a5,-220(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:124
	msg[1] = 20;
80002e00:	01400793          	li	a5,20
80002e04:	f2f42423          	sw	a5,-216(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:125
	msg[2] = HW_get_32bit_reg(ROUTER_BASE);
80002e08:	50000537          	lui	a0,0x50000
80002e0c:	e95fd0ef          	jal	ra,80000ca0 <HW_get_32bit_reg>
80002e10:	00050793          	mv	a5,a0
80002e14:	f2f42623          	sw	a5,-212(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:126
	for(i = 3; i<20; i++){
80002e18:	00300793          	li	a5,3
80002e1c:	fef42623          	sw	a5,-20(s0)
80002e20:	0280006f          	j	80002e48 <vUartTestTask1+0x68>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:127 (discriminator 3)
		msg[i] = i;
80002e24:	fec42703          	lw	a4,-20(s0)
80002e28:	fec42783          	lw	a5,-20(s0)
80002e2c:	00279793          	slli	a5,a5,0x2
80002e30:	ff040693          	addi	a3,s0,-16
80002e34:	00f687b3          	add	a5,a3,a5
80002e38:	f2e7aa23          	sw	a4,-204(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:126 (discriminator 3)
	for(i = 3; i<20; i++){
80002e3c:	fec42783          	lw	a5,-20(s0)
80002e40:	00178793          	addi	a5,a5,1
80002e44:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:126 (discriminator 1)
80002e48:	fec42703          	lw	a4,-20(s0)
80002e4c:	01300793          	li	a5,19
80002e50:	fce7dae3          	ble	a4,a5,80002e24 <vUartTestTask1+0x44>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:129
	}
	i = 0;
80002e54:	fe042623          	sw	zero,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:130
	vTaskDelay(10);
80002e58:	00a00513          	li	a0,10
80002e5c:	878ff0ef          	jal	ra,80001ed4 <vTaskDelay>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:133
	for( ;; )
	{
		UART_polled_tx_string( &g_uart, (const uint8_t *)"Task - 1\r\n" );
80002e60:	800037b7          	lui	a5,0x80003
80002e64:	2ec78593          	addi	a1,a5,748 # 800032ec <__stack_top+0xfffc6d4c>
80002e68:	8001c7b7          	lui	a5,0x8001c
80002e6c:	58c78513          	addi	a0,a5,1420 # 8001c58c <__stack_top+0xfffdffec>
80002e70:	8ccfe0ef          	jal	ra,80000f3c <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:134
	    vTaskDelay(2);
80002e74:	00200513          	li	a0,2
80002e78:	85cff0ef          	jal	ra,80001ed4 <vTaskDelay>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:136
		// sends one message
		if (i==0 && HW_get_32bit_reg(ROUTER_BASE) != 0x101){
80002e7c:	fec42783          	lw	a5,-20(s0)
80002e80:	02079263          	bnez	a5,80002ea4 <vUartTestTask1+0xc4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:136 (discriminator 1)
80002e84:	50000537          	lui	a0,0x50000
80002e88:	e19fd0ef          	jal	ra,80000ca0 <HW_get_32bit_reg>
80002e8c:	00050713          	mv	a4,a0
80002e90:	10100793          	li	a5,257
80002e94:	00f70863          	beq	a4,a5,80002ea4 <vUartTestTask1+0xc4>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:137
			SendRaw((unsigned int)&msg);
80002e98:	f2440793          	addi	a5,s0,-220
80002e9c:	00078513          	mv	a0,a5
80002ea0:	d71ff0ef          	jal	ra,80002c10 <SendRaw>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:139
		}
		i++;
80002ea4:	fec42783          	lw	a5,-20(s0)
80002ea8:	00178793          	addi	a5,a5,1
80002eac:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:140
		printi(i);
80002eb0:	fec42503          	lw	a0,-20(s0)
80002eb4:	ccdff0ef          	jal	ra,80002b80 <printi>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:141
		prints("\n");
80002eb8:	800037b7          	lui	a5,0x80003
80002ebc:	21878513          	addi	a0,a5,536 # 80003218 <__stack_top+0xfffc6c78>
80002ec0:	c51ff0ef          	jal	ra,80002b10 <prints>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:142
		itoa(i, str, 10);
80002ec4:	f8840793          	addi	a5,s0,-120
80002ec8:	00a00613          	li	a2,10
80002ecc:	00078593          	mv	a1,a5
80002ed0:	fec42503          	lw	a0,-20(s0)
80002ed4:	150000ef          	jal	ra,80003024 <itoa>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:143
		UART_polled_tx_string( &g_uart, (const uint8_t *)str);
80002ed8:	f8840793          	addi	a5,s0,-120
80002edc:	00078593          	mv	a1,a5
80002ee0:	8001c7b7          	lui	a5,0x8001c
80002ee4:	58c78513          	addi	a0,a5,1420 # 8001c58c <__stack_top+0xfffdffec>
80002ee8:	854fe0ef          	jal	ra,80000f3c <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:144
		UART_polled_tx_string( &g_uart, (const uint8_t *)"\n");
80002eec:	800037b7          	lui	a5,0x80003
80002ef0:	21878593          	addi	a1,a5,536 # 80003218 <__stack_top+0xfffc6c78>
80002ef4:	8001c7b7          	lui	a5,0x8001c
80002ef8:	58c78513          	addi	a0,a5,1420 # 8001c58c <__stack_top+0xfffdffec>
80002efc:	840fe0ef          	jal	ra,80000f3c <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:132
	{
80002f00:	f61ff06f          	j	80002e60 <vUartTestTask1+0x80>

80002f04 <vUartTestTask2>:
vUartTestTask2():
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:152


/*-----------------------------------------------------------*/

static void vUartTestTask2( void *pvParameters )
{
80002f04:	e4010113          	addi	sp,sp,-448
80002f08:	1a112e23          	sw	ra,444(sp)
80002f0c:	1a812c23          	sw	s0,440(sp)
80002f10:	1c010413          	addi	s0,sp,448
80002f14:	e4a42623          	sw	a0,-436(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:156
	( void ) pvParameters;
	volatile unsigned int incomingPacket[100];
	int i;
	HW_set_32bit_reg(NI_ADDR, (unsigned int)&incomingPacket);
80002f18:	e5c40793          	addi	a5,s0,-420
80002f1c:	00078593          	mv	a1,a5
80002f20:	500007b7          	lui	a5,0x50000
80002f24:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
80002f28:	d71fd0ef          	jal	ra,80000c98 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:157
	HW_set_32bit_reg(NI_ADDR, (unsigned int)&incomingPacket);
80002f2c:	e5c40793          	addi	a5,s0,-420
80002f30:	00078593          	mv	a1,a5
80002f34:	500007b7          	lui	a5,0x50000
80002f38:	00478513          	addi	a0,a5,4 # 50000004 <RAM_SIZE+0x4ff80004>
80002f3c:	d5dfd0ef          	jal	ra,80000c98 <HW_set_32bit_reg>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:158
	for (i = 0; i<100; i++){
80002f40:	fe042623          	sw	zero,-20(s0)
80002f44:	0240006f          	j	80002f68 <vUartTestTask2+0x64>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:159 (discriminator 3)
		incomingPacket[i] = 0;
80002f48:	fec42783          	lw	a5,-20(s0)
80002f4c:	00279793          	slli	a5,a5,0x2
80002f50:	ff040713          	addi	a4,s0,-16
80002f54:	00f707b3          	add	a5,a4,a5
80002f58:	e607a623          	sw	zero,-404(a5)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:158 (discriminator 3)
	for (i = 0; i<100; i++){
80002f5c:	fec42783          	lw	a5,-20(s0)
80002f60:	00178793          	addi	a5,a5,1
80002f64:	fef42623          	sw	a5,-20(s0)
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:158 (discriminator 1)
80002f68:	fec42703          	lw	a4,-20(s0)
80002f6c:	06300793          	li	a5,99
80002f70:	fce7dce3          	ble	a4,a5,80002f48 <vUartTestTask2+0x44>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:163
	}
	for( ;; )
	{
		UART_polled_tx_string( &g_uart, (const uint8_t *)"Task - 2\r\n" );
80002f74:	800037b7          	lui	a5,0x80003
80002f78:	2f878593          	addi	a1,a5,760 # 800032f8 <__stack_top+0xfffc6d58>
80002f7c:	8001c7b7          	lui	a5,0x8001c
80002f80:	58c78513          	addi	a0,a5,1420 # 8001c58c <__stack_top+0xfffdffec>
80002f84:	fb9fd0ef          	jal	ra,80000f3c <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:164
	    vTaskDelay(5);
80002f88:	00500513          	li	a0,5
80002f8c:	f49fe0ef          	jal	ra,80001ed4 <vTaskDelay>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:165
		if (incomingPacket[7] != 0){
80002f90:	e7842783          	lw	a5,-392(s0)
80002f94:	fe0780e3          	beqz	a5,80002f74 <vUartTestTask2+0x70>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:166
			UART_polled_tx_string( &g_uart, (const uint8_t *)">--Recebi-algo------------------\r\n" );
80002f98:	800037b7          	lui	a5,0x80003
80002f9c:	30478593          	addi	a1,a5,772 # 80003304 <__stack_top+0xfffc6d64>
80002fa0:	8001c7b7          	lui	a5,0x8001c
80002fa4:	58c78513          	addi	a0,a5,1420 # 8001c58c <__stack_top+0xfffdffec>
80002fa8:	f95fd0ef          	jal	ra,80000f3c <UART_polled_tx_string>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:167
			printi(incomingPacket[2]);
80002fac:	e6442783          	lw	a5,-412(s0)
80002fb0:	00078513          	mv	a0,a5
80002fb4:	bcdff0ef          	jal	ra,80002b80 <printi>
/home/iacanaw/git_workspace/Chronos-RISCV/FreeRTOS/Debug/../main.c:163
		UART_polled_tx_string( &g_uart, (const uint8_t *)"Task - 2\r\n" );
80002fb8:	fbdff06f          	j	80002f74 <vUartTestTask2+0x70>

80002fbc <__itoa>:
__itoa():
80002fbc:	ff010113          	addi	sp,sp,-16
80002fc0:	00812423          	sw	s0,8(sp)
80002fc4:	00112623          	sw	ra,12(sp)
80002fc8:	ffe60713          	addi	a4,a2,-2
80002fcc:	02200793          	li	a5,34
80002fd0:	00058413          	mv	s0,a1
80002fd4:	02e7f063          	bleu	a4,a5,80002ff4 <__itoa+0x38>
80002fd8:	00058023          	sb	zero,0(a1)
80002fdc:	00000413          	li	s0,0
80002fe0:	00040513          	mv	a0,s0
80002fe4:	00c12083          	lw	ra,12(sp)
80002fe8:	00812403          	lw	s0,8(sp)
80002fec:	01010113          	addi	sp,sp,16
80002ff0:	00008067          	ret
80002ff4:	00a00793          	li	a5,10
80002ff8:	02f61263          	bne	a2,a5,8000301c <__itoa+0x60>
80002ffc:	02055063          	bgez	a0,8000301c <__itoa+0x60>
80003000:	02d00793          	li	a5,45
80003004:	00f58023          	sb	a5,0(a1)
80003008:	40a00533          	neg	a0,a0
8000300c:	00100593          	li	a1,1
80003010:	00b405b3          	add	a1,s0,a1
80003014:	030000ef          	jal	ra,80003044 <__utoa>
80003018:	fc9ff06f          	j	80002fe0 <__itoa+0x24>
8000301c:	00000593          	li	a1,0
80003020:	ff1ff06f          	j	80003010 <__itoa+0x54>

80003024 <itoa>:
itoa():
80003024:	f99ff06f          	j	80002fbc <__itoa>

80003028 <write>:
write():
80003028:	00000797          	auipc	a5,0x0
8000302c:	33878793          	addi	a5,a5,824 # 80003360 <_impure_ptr>
80003030:	00060693          	mv	a3,a2
80003034:	00058613          	mv	a2,a1
80003038:	00050593          	mv	a1,a0
8000303c:	0007a503          	lw	a0,0(a5)
80003040:	0cc0006f          	j	8000310c <_write_r>

80003044 <__utoa>:
__utoa():
80003044:	fc010113          	addi	sp,sp,-64
80003048:	02812c23          	sw	s0,56(sp)
8000304c:	02912a23          	sw	s1,52(sp)
80003050:	03212823          	sw	s2,48(sp)
80003054:	00050493          	mv	s1,a0
80003058:	00060913          	mv	s2,a2
8000305c:	00058413          	mv	s0,a1
80003060:	02500613          	li	a2,37
80003064:	00000597          	auipc	a1,0x0
80003068:	2c458593          	addi	a1,a1,708 # 80003328 <_write_r+0x21c>
8000306c:	00810513          	addi	a0,sp,8
80003070:	02112e23          	sw	ra,60(sp)
80003074:	a41fe0ef          	jal	ra,80001ab4 <memcpy>
80003078:	ffe90693          	addi	a3,s2,-2
8000307c:	02200793          	li	a5,34
80003080:	00000713          	li	a4,0
80003084:	02d7f863          	bleu	a3,a5,800030b4 <__utoa+0x70>
80003088:	00040023          	sb	zero,0(s0)
8000308c:	00000413          	li	s0,0
80003090:	00040513          	mv	a0,s0
80003094:	03c12083          	lw	ra,60(sp)
80003098:	03812403          	lw	s0,56(sp)
8000309c:	03412483          	lw	s1,52(sp)
800030a0:	03012903          	lw	s2,48(sp)
800030a4:	04010113          	addi	sp,sp,64
800030a8:	00008067          	ret
800030ac:	00060713          	mv	a4,a2
800030b0:	00078493          	mv	s1,a5
800030b4:	0324f7b3          	remu	a5,s1,s2
800030b8:	03010593          	addi	a1,sp,48
800030bc:	00170613          	addi	a2,a4,1 # 40000001 <RAM_SIZE+0x3ff80001>
800030c0:	00c406b3          	add	a3,s0,a2
800030c4:	00f587b3          	add	a5,a1,a5
800030c8:	fd87c783          	lbu	a5,-40(a5)
800030cc:	fef68fa3          	sb	a5,-1(a3)
800030d0:	0324d7b3          	divu	a5,s1,s2
800030d4:	fd24fce3          	bleu	s2,s1,800030ac <__utoa+0x68>
800030d8:	00068023          	sb	zero,0(a3)
800030dc:	00000793          	li	a5,0
800030e0:	00e406b3          	add	a3,s0,a4
800030e4:	40f70633          	sub	a2,a4,a5
800030e8:	fac7d4e3          	ble	a2,a5,80003090 <__utoa+0x4c>
800030ec:	00f40633          	add	a2,s0,a5
800030f0:	0006c503          	lbu	a0,0(a3)
800030f4:	00064583          	lbu	a1,0(a2)
800030f8:	00178793          	addi	a5,a5,1
800030fc:	00a60023          	sb	a0,0(a2)
80003100:	00b68023          	sb	a1,0(a3)
80003104:	fff68693          	addi	a3,a3,-1
80003108:	fddff06f          	j	800030e4 <__utoa+0xa0>

8000310c <_write_r>:
_write_r():
8000310c:	ff010113          	addi	sp,sp,-16
80003110:	00812423          	sw	s0,8(sp)
80003114:	00050413          	mv	s0,a0
80003118:	00058513          	mv	a0,a1
8000311c:	00060593          	mv	a1,a2
80003120:	00068613          	mv	a2,a3
80003124:	00019797          	auipc	a5,0x19
80003128:	4607a223          	sw	zero,1124(a5) # 8001c588 <errno>
8000312c:	00112623          	sw	ra,12(sp)
80003130:	a81fd0ef          	jal	ra,80000bb0 <_write>
80003134:	fff00793          	li	a5,-1
80003138:	00f51c63          	bne	a0,a5,80003150 <_write_r+0x44>
8000313c:	00019797          	auipc	a5,0x19
80003140:	44c78793          	addi	a5,a5,1100 # 8001c588 <errno>
80003144:	0007a783          	lw	a5,0(a5)
80003148:	00078463          	beqz	a5,80003150 <_write_r+0x44>
8000314c:	00f42023          	sw	a5,0(s0)
80003150:	00c12083          	lw	ra,12(sp)
80003154:	00812403          	lw	s0,8(sp)
80003158:	01010113          	addi	sp,sp,16
8000315c:	00008067          	ret
80003160:	6568                	flw	fa0,76(a0)
80003162:	6c6c                	flw	fa1,92(s0)
80003164:	0000006f          	j	80003164 <_write_r+0x58>
80003168:	4e49                	li	t3,18
8000316a:	3154                	fld	fa3,160(a0)
8000316c:	000a                	c.slli	zero,0x2
8000316e:	0000                	unimp
80003170:	4e49                	li	t3,18
80003172:	3254                	fld	fa3,160(a2)
80003174:	000a                	c.slli	zero,0x2
80003176:	0000                	unimp
80003178:	6e49                	lui	t3,0x12
8000317a:	6574                	flw	fa3,76(a0)
8000317c:	7272                	flw	ft4,60(sp)
8000317e:	7075                	c.lui	zero,0xffffd
80003180:	a3c3a7c3          	fmadd.d	fa5,ft7,ft8,fs4,rdn
80003184:	6564206f          	j	800457da <__stack_top+0x923a>
80003188:	6574                	flw	fa3,76(a0)
8000318a:	64617463          	bleu	t1,sp,800037d2 <__sbss_end+0x312>
8000318e:	2061                	jal	80003216 <_write_r+0x10a>
80003190:	6168                	flw	fa0,68(a0)
80003192:	646e                	flw	fs0,216(sp)
80003194:	656c                	flw	fa1,76(a0)
80003196:	6d5f 655f 7478      	0x7478655f6d5f
8000319c:	695f 746e 7265      	0x7265746e695f
800031a2:	7572                	flw	fa0,60(sp)
800031a4:	7470                	flw	fa2,108(s0)
800031a6:	0a21                	addi	s4,s4,8
800031a8:	0000                	unimp
800031aa:	0000                	unimp
800031ac:	6e49                	lui	t3,0x12
800031ae:	6574                	flw	fa3,76(a0)
800031b0:	7272                	flw	ft4,60(sp)
800031b2:	7075                	c.lui	zero,0xffffd
800031b4:	a3c3a7c3          	fmadd.d	fa5,ft7,ft8,fs4,rdn
800031b8:	6564206f          	j	8004580e <__stack_top+0x926e>
800031bc:	6574                	flw	fa3,76(a0)
800031be:	64617463          	bleu	t1,sp,80003806 <__sbss_end+0x346>
800031c2:	2061                	jal	8000324a <_write_r+0x13e>
800031c4:	6168                	flw	fa0,68(a0)
800031c6:	646e                	flw	fs0,216(sp)
800031c8:	656c                	flw	fa1,76(a0)
800031ca:	6d5f 735f 666f      	0x666f735f6d5f
800031d0:	5f74                	lw	a3,124(a4)
800031d2:	6e69                	lui	t3,0x1a
800031d4:	6574                	flw	fa3,76(a0)
800031d6:	7272                	flw	ft4,60(sp)
800031d8:	7075                	c.lui	zero,0xffffd
800031da:	2174                	fld	fa3,192(a0)
800031dc:	000a                	c.slli	zero,0x2
800031de:	0000                	unimp
800031e0:	7274                	flw	fa3,100(a2)
800031e2:	7061                	c.lui	zero,0xffff8
800031e4:	000a                	c.slli	zero,0x2
800031e6:	0000                	unimp
800031e8:	7830                	flw	fa2,112(s0)
800031ea:	0000                	unimp
800031ec:	500a                	0x500a
800031ee:	6f72                	flw	ft10,28(sp)
800031f0:	206d6167          	0x206d6167
800031f4:	6168                	flw	fa0,68(a0)
800031f6:	78652073          	csrs	0x786,a0
800031fa:	7469                	lui	s0,0xffffa
800031fc:	6465                	lui	s0,0x19
800031fe:	7720                	flw	fs0,104(a4)
80003200:	7469                	lui	s0,0xffffa
80003202:	2068                	fld	fa0,192(s0)
80003204:	65646f63          	bltu	s0,s6,80003862 <__sbss_end+0x3a2>
80003208:	003a                	c.slli	zero,0xe
8000320a:	0000                	unimp
8000320c:	000d                	c.nop	3
8000320e:	0000                	unimp
80003210:	4449                	li	s0,18
80003212:	454c                	lw	a1,12(a0)
80003214:	0000                	unimp
80003216:	0000                	unimp
80003218:	000a                	c.slli	zero,0x2
8000321a:	0000                	unimp
8000321c:	654d                	lui	a0,0x13
8000321e:	736e                	flw	ft6,248(sp)
80003220:	6761                	lui	a4,0x18
80003222:	6d65                	lui	s10,0x19
80003224:	6520                	flw	fs0,72(a0)
80003226:	766e                	flw	fa2,248(sp)
80003228:	6169                	addi	sp,sp,208
8000322a:	6164                	flw	fs1,68(a0)
8000322c:	0021                	c.nop	8
8000322e:	0000                	unimp
80003230:	0a0d                	addi	s4,s4,3
80003232:	7246                	flw	ft4,112(sp)
80003234:	6565                	lui	a0,0x19
80003236:	5452                	lw	s0,52(sp)
80003238:	4520534f          	0x4520534f
8000323c:	6178                	flw	fa4,68(a0)
8000323e:	706d                	c.lui	zero,0xffffb
80003240:	656c                	flw	fa1,76(a0)
80003242:	0a0d                	addi	s4,s4,3
80003244:	0000                	unimp
80003246:	0000                	unimp
80003248:	200a                	fld	ft0,128(sp)
8000324a:	2020                	fld	fs0,64(s0)
8000324c:	2020                	fld	fs0,64(s0)
8000324e:	2020                	fld	fs0,64(s0)
80003250:	5320                	lw	s0,96(a4)
80003252:	6d61                	lui	s10,0x18
80003254:	6c70                	flw	fa2,92(s0)
80003256:	2065                	jal	800032fe <_write_r+0x1f2>
80003258:	6544                	flw	fs1,12(a0)
8000325a:	6f6d                	lui	t5,0x1b
8000325c:	736e                	flw	ft6,248(sp)
8000325e:	7274                	flw	fa3,100(a2)
80003260:	7461                	lui	s0,0xffff8
80003262:	6f69                	lui	t5,0x1a
80003264:	206e                	fld	ft0,216(sp)
80003266:	4620666f          	jal	a2,800096c8 <__global_pointer$+0x5b78>
8000326a:	6572                	flw	fa0,28(sp)
8000326c:	5265                	li	tp,-7
8000326e:	4f54                	lw	a3,28(a4)
80003270:	6f702053          	0x6f702053
80003274:	7472                	flw	fs0,60(sp)
80003276:	6620                	flw	fs0,72(a2)
80003278:	4d20726f          	jal	tp,8000a74a <__global_pointer$+0x6bfa>
8000327c:	2d69                	jal	80003916 <__sbss_end+0x456>
8000327e:	2056                	fld	ft0,336(sp)
80003280:	7270                	flw	fa2,100(a2)
80003282:	7365636f          	jal	t1,800599b8 <__stack_top+0x1d418>
80003286:	2e726f73          	csrrsi	t5,0x2e7,4
8000328a:	0a0d                	addi	s4,s4,3
8000328c:	0a0d                	addi	s4,s4,3
8000328e:	0000                	unimp
80003290:	2020                	fld	fs0,64(s0)
80003292:	2020                	fld	fs0,64(s0)
80003294:	2020                	fld	fs0,64(s0)
80003296:	6854                	flw	fa3,20(s0)
80003298:	7369                	lui	t1,0xffffa
8000329a:	7020                	flw	fs0,96(s0)
8000329c:	6f72                	flw	ft10,28(sp)
8000329e:	656a                	flw	fa0,152(sp)
800032a0:	63207463          	bleu	s2,zero,800038c8 <__sbss_end+0x408>
800032a4:	6572                	flw	fa0,28(sp)
800032a6:	7461                	lui	s0,0xffff8
800032a8:	7365                	lui	t1,0xffff9
800032aa:	7420                	flw	fs0,104(s0)
800032ac:	74206f77          	0x74206f77
800032b0:	7361                	lui	t1,0xffff8
800032b2:	6120736b          	0x6120736b
800032b6:	646e                	flw	fs0,216(sp)
800032b8:	7220                	flw	fs0,96(a2)
800032ba:	6e75                	lui	t3,0x1d
800032bc:	68742073          	csrs	0x687,s0
800032c0:	6d65                	lui	s10,0x19
800032c2:	6120                	flw	fs0,64(a0)
800032c4:	2074                	fld	fa3,192(s0)
800032c6:	6572                	flw	fa0,28(sp)
800032c8:	616c7567          	0x616c7567
800032cc:	2072                	fld	ft0,280(sp)
800032ce:	6e69                	lui	t3,0x1a
800032d0:	6574                	flw	fa3,76(a0)
800032d2:	7672                	flw	fa2,60(sp)
800032d4:	6c61                	lui	s8,0x18
800032d6:	0a0d2e73          	csrrs	t3,0xa0,s10
800032da:	0000                	unimp
800032dc:	4155                	li	sp,21
800032de:	7472                	flw	fs0,60(sp)
800032e0:	0031                	c.nop	12
800032e2:	0000                	unimp
800032e4:	4155                	li	sp,21
800032e6:	7472                	flw	fs0,60(sp)
800032e8:	0032                	c.slli	zero,0xc
800032ea:	0000                	unimp
800032ec:	6154                	flw	fa3,4(a0)
800032ee:	2d206b73          	csrrsi	s6,0x2d2,0
800032f2:	3120                	fld	fs0,96(a0)
800032f4:	0a0d                	addi	s4,s4,3
800032f6:	0000                	unimp
800032f8:	6154                	flw	fa3,4(a0)
800032fa:	2d206b73          	csrrsi	s6,0x2d2,0
800032fe:	3220                	fld	fs0,96(a2)
80003300:	0a0d                	addi	s4,s4,3
80003302:	0000                	unimp
80003304:	2d3e                	fld	fs10,456(sp)
80003306:	522d                	li	tp,-21
80003308:	6365                	lui	t1,0x19
8000330a:	6265                	lui	tp,0x19
8000330c:	2d69                	jal	800039a6 <__sbss_end+0x4e6>
8000330e:	6c61                	lui	s8,0x18
80003310:	2d2d6f67          	0x2d2d6f67
80003314:	2d2d                	jal	8000394e <__sbss_end+0x48e>
80003316:	2d2d                	jal	80003950 <__sbss_end+0x490>
80003318:	2d2d                	jal	80003952 <__sbss_end+0x492>
8000331a:	2d2d                	jal	80003954 <__sbss_end+0x494>
8000331c:	2d2d                	jal	80003956 <__sbss_end+0x496>
8000331e:	2d2d                	jal	80003958 <__sbss_end+0x498>
80003320:	2d2d                	jal	8000395a <__sbss_end+0x49a>
80003322:	2d2d                	jal	8000395c <__sbss_end+0x49c>
80003324:	0a0d                	addi	s4,s4,3
80003326:	0000                	unimp
80003328:	3130                	fld	fa2,96(a0)
8000332a:	3332                	fld	ft6,296(sp)
8000332c:	3534                	fld	fa3,104(a0)
8000332e:	3736                	fld	fa4,360(sp)
80003330:	3938                	fld	fa4,112(a0)
80003332:	6261                	lui	tp,0x18
80003334:	66656463          	bltu	a0,t1,8000399c <__sbss_end+0x4dc>
80003338:	6a696867          	0x6a696867
8000333c:	6e6d6c6b          	0x6e6d6c6b
80003340:	7271706f          	j	8001b266 <__global_pointer$+0x17716>
80003344:	76757473          	csrrci	s0,0x767,10
80003348:	7a797877          	0x7a797877
8000334c:	0000                	unimp
	...
