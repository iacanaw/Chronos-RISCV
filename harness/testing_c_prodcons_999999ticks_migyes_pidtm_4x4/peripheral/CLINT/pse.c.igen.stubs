/*
 * Copyright (c) 2005-2021 Imperas Software Ltd., www.imperas.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */


////////////////////////////////////////////////////////////////////////////////
//
//                W R I T T E N   B Y   I M P E R A S   I G E N
//
//                             Version 20210408.0
//
////////////////////////////////////////////////////////////////////////////////

#include "pse.igen.h"
#include <string.h>

//////////////////////////////// Callback stubs ////////////////////////////////

PPM_REG_READ_CB(msipRead) {
    if(bytes != 4) {
        bhmMessage("E", "PPM_RNB", "Only 4 byte access permitted");
        return 0;
    }
    // YOUR CODE HERE (msipRead)
    return 0;
}

PPM_REG_VIEW_CB(msipView) {
    // YOUR CODE HERE (msipView)
    // no code
}

PPM_REG_WRITE_CB(msipWrite) {
    if(bytes != 4) {
        bhmMessage("E", "PPM_WNB", "Only 4 byte access permitted");
        return;
    }
    // YOUR CODE HERE (msipWrite)
}

PPM_REG_READ_CB(mtimeRead) {
    if(bytes != 4) {
        bhmMessage("E", "PPM_RNB", "Only 4 byte access permitted");
        return 0;
    }
    // YOUR CODE HERE (mtimeRead)
    return *(Uns32*)user;
}

PPM_REG_VIEW_CB(mtimeViewHi) {
    // YOUR CODE HERE (mtimeViewHi)
    *(Uns32*)data = *(Uns32*)user;
}

PPM_REG_VIEW_CB(mtimeViewLo) {
    // YOUR CODE HERE (mtimeViewLo)
    *(Uns32*)data = *(Uns32*)user;
}

PPM_REG_READ_CB(mtimecmpRead) {
    if(bytes != 4) {
        bhmMessage("E", "PPM_RNB", "Only 4 byte access permitted");
        return 0;
    }
    // YOUR CODE HERE (mtimecmpRead)
    return 0;
}

PPM_REG_VIEW_CB(mtimecmpViewHi) {
    // YOUR CODE HERE (mtimecmpViewHi)
    // no code
}

PPM_REG_VIEW_CB(mtimecmpViewLo) {
    // YOUR CODE HERE (mtimecmpViewLo)
    // no code
}

PPM_REG_WRITE_CB(mtimecmpWrite) {
    if(bytes != 4) {
        bhmMessage("E", "PPM_WNB", "Only 4 byte access permitted");
        return;
    }
    // YOUR CODE HERE (mtimecmpWrite)
}

PPM_READ_CB(reservedRD) {
    // YOUR CODE HERE (reservedRD)
    return 0;
}

PPM_WRITE_CB(reservedWR) {
    // YOUR CODE HERE (reservedWR)
}

PPM_CONSTRUCTOR_CB(constructor) {
    // YOUR CODE HERE (pre constructor)
    periphConstructor();
    // YOUR CODE HERE (post constructor)
}


PPM_SAVE_STATE_FN(peripheralSaveState) {
    bhmMessage("E", "PPM_RSNI", "Model does not implement save/restore");
}

PPM_RESTORE_STATE_FN(peripheralRestoreState) {
    bhmMessage("E", "PPM_RSNI", "Model does not implement save/restore");
}

PPM_NET_PORT_FN(nextNetPortUser){
    return NULL;
}

